{"version":3,"names":["cov_wfaaug54p","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","TrailingStopManager","trailingStopUpdates","Map","updateTrailingStop","position","config","marketConditions","currentPrice","entryPrice","currentStopLoss","stopLoss","profitPercentage","calculateProfitPercentage","minProfitToTrail","newStopLoss","updated","trailingDistance","breakevenActive","reason","toFixed","calculateTrailingStopLoss","breakevenResult","applyBreakevenLogic","shouldUpdate","shouldUpdateStopLoss","recordStopLossUpdate","id","calculateActualTrailingDistance","volatilityAdjustment","adjustTrailingDistanceForVolatility","volatility","atr","trailingStop","supportLevel","Math","max","resistanceLevel","min","baseDistance","volatilityMultiplier","atrBasedDistance","adjustedDistance","calculatedStopLoss","breakevenThreshold","breakevenStop","finalStop","abs","positionId","previousStopLoss","update","timestamp","Date","has","set","get","push","updates","length","splice","getTrailingStopHistory","calculateInitialStopLoss","positionType","initialStopDistance","initialStopLoss","atrBasedStop","optimizeStopLoss","minDistance","currentDistance","optimizedStop","optimizedStopLoss","supportBasedStop","resistanceBasedStop","clearTrailingStopHistory","delete","getTrailingStopStatistics","totalUpdates","averageTrailingDistance","maxTrailingDistance","minTrailingDistance","breakevenActivations","distances","map","filter","includes","reduce","sum","d","exports"],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\risk\\trailing-stop-manager.ts"],"sourcesContent":["/**\r\n * Trailing Stop Loss Manager\r\n * \r\n * Implements sophisticated trailing stop loss system with:\r\n * - -1% initial stop loss with trailing functionality\r\n * - Dynamic trailing stop adjustment based on volatility\r\n * - Breakeven stop loss automation\r\n * - Stop loss optimization based on market conditions\r\n */\r\n\r\nimport { \r\n  TrailingStopConfig, \r\n  TrailingStopResult, \r\n  Position \r\n} from './types.js';\r\n\r\nexport interface MarketConditions {\r\n  /** Current volatility level */\r\n  volatility: number;\r\n  /** Market trend direction */\r\n  trend: 'BULLISH' | 'BEARISH' | 'SIDEWAYS';\r\n  /** Support/resistance levels */\r\n  supportLevel?: number;\r\n  resistanceLevel?: number;\r\n  /** Average true range for volatility measurement */\r\n  atr: number;\r\n}\r\n\r\nexport interface TrailingStopUpdate {\r\n  /** Position ID */\r\n  positionId: string;\r\n  /** Previous stop loss */\r\n  previousStopLoss: number;\r\n  /** New stop loss */\r\n  newStopLoss: number;\r\n  /** Update reason */\r\n  reason: string;\r\n  /** Timestamp */\r\n  timestamp: Date;\r\n}\r\n\r\nexport class TrailingStopManager {\r\n  private trailingStopUpdates: Map<string, TrailingStopUpdate[]> = new Map();\r\n\r\n  /**\r\n   * Update trailing stop loss for a position\r\n   */\r\n  updateTrailingStop(\r\n    position: Position,\r\n    config: TrailingStopConfig,\r\n    marketConditions: MarketConditions\r\n  ): TrailingStopResult {\r\n    const currentPrice = position.currentPrice;\r\n    const entryPrice = position.entryPrice;\r\n    const currentStopLoss = position.stopLoss;\r\n\r\n    // Calculate profit percentage\r\n    const profitPercentage = this.calculateProfitPercentage(position);\r\n\r\n    // Check if we should start trailing\r\n    if (profitPercentage < config.minProfitToTrail) {\r\n      return {\r\n        newStopLoss: currentStopLoss,\r\n        updated: false,\r\n        trailingDistance: config.trailingDistance,\r\n        breakevenActive: false,\r\n        reason: `Profit ${profitPercentage.toFixed(2)}% below minimum ${config.minProfitToTrail}% to start trailing`\r\n      };\r\n    }\r\n\r\n    // Calculate new trailing stop loss\r\n    let newStopLoss = this.calculateTrailingStopLoss(\r\n      position,\r\n      config,\r\n      marketConditions\r\n    );\r\n\r\n    // Apply breakeven logic\r\n    const breakevenResult = this.applyBreakevenLogic(\r\n      position,\r\n      newStopLoss,\r\n      config,\r\n      profitPercentage\r\n    );\r\n\r\n    newStopLoss = breakevenResult.stopLoss;\r\n\r\n    // Ensure stop loss only moves in favorable direction\r\n    const shouldUpdate = this.shouldUpdateStopLoss(\r\n      position,\r\n      currentStopLoss,\r\n      newStopLoss\r\n    );\r\n\r\n    if (shouldUpdate) {\r\n      // Record the update\r\n      this.recordStopLossUpdate(position.id, currentStopLoss, newStopLoss, breakevenResult.reason);\r\n\r\n      return {\r\n        newStopLoss,\r\n        updated: true,\r\n        trailingDistance: this.calculateActualTrailingDistance(currentPrice, newStopLoss),\r\n        breakevenActive: breakevenResult.breakevenActive,\r\n        reason: breakevenResult.reason\r\n      };\r\n    }\r\n\r\n    return {\r\n      newStopLoss: currentStopLoss,\r\n      updated: false,\r\n      trailingDistance: config.trailingDistance,\r\n      breakevenActive: breakevenResult.breakevenActive,\r\n      reason: 'Stop loss would move in unfavorable direction'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculate trailing stop loss based on market conditions\r\n   */\r\n  private calculateTrailingStopLoss(\r\n    position: Position,\r\n    config: TrailingStopConfig,\r\n    marketConditions: MarketConditions\r\n  ): number {\r\n    const currentPrice = position.currentPrice;\r\n    let trailingDistance = config.trailingDistance;\r\n\r\n    // Adjust trailing distance based on volatility\r\n    if (config.volatilityAdjustment) {\r\n      trailingDistance = this.adjustTrailingDistanceForVolatility(\r\n        trailingDistance,\r\n        marketConditions.volatility,\r\n        marketConditions.atr\r\n      );\r\n    }\r\n\r\n    // Calculate base trailing stop\r\n    let trailingStop: number;\r\n    \r\n    if (position.type === 'LONG') {\r\n      trailingStop = currentPrice * (1 - trailingDistance / 100);\r\n      \r\n      // Consider support levels for long positions\r\n      if (marketConditions.supportLevel && marketConditions.supportLevel > trailingStop) {\r\n        trailingStop = Math.max(trailingStop, marketConditions.supportLevel * 0.995); // 0.5% below support\r\n      }\r\n    } else {\r\n      trailingStop = currentPrice * (1 + trailingDistance / 100);\r\n      \r\n      // Consider resistance levels for short positions\r\n      if (marketConditions.resistanceLevel && marketConditions.resistanceLevel < trailingStop) {\r\n        trailingStop = Math.min(trailingStop, marketConditions.resistanceLevel * 1.005); // 0.5% above resistance\r\n      }\r\n    }\r\n\r\n    return trailingStop;\r\n  }\r\n\r\n  /**\r\n   * Adjust trailing distance based on market volatility\r\n   */\r\n  private adjustTrailingDistanceForVolatility(\r\n    baseDistance: number,\r\n    volatility: number,\r\n    atr: number\r\n  ): number {\r\n    // Increase trailing distance in high volatility to avoid premature stops\r\n    const volatilityMultiplier = 1 + (volatility * 0.5);\r\n    \r\n    // Use ATR to determine minimum trailing distance\r\n    const atrBasedDistance = (atr / 100) * 2; // 2x ATR as minimum distance\r\n    \r\n    const adjustedDistance = Math.max(\r\n      baseDistance * volatilityMultiplier,\r\n      atrBasedDistance\r\n    );\r\n\r\n    // Cap maximum trailing distance at 5%\r\n    return Math.min(adjustedDistance, 5.0);\r\n  }\r\n\r\n  /**\r\n   * Apply breakeven stop loss logic\r\n   */\r\n  private applyBreakevenLogic(\r\n    position: Position,\r\n    calculatedStopLoss: number,\r\n    config: TrailingStopConfig,\r\n    profitPercentage: number\r\n  ): { stopLoss: number; breakevenActive: boolean; reason: string } {\r\n    const entryPrice = position.entryPrice;\r\n\r\n    // Check if we should move to breakeven\r\n    if (profitPercentage >= config.breakevenThreshold) {\r\n      let breakevenStop: number;\r\n      \r\n      if (position.type === 'LONG') {\r\n        // For long positions, breakeven is slightly above entry\r\n        breakevenStop = entryPrice * 1.001; // 0.1% above entry to cover fees\r\n        \r\n        // Use the higher of calculated trailing stop or breakeven\r\n        const finalStop = Math.max(calculatedStopLoss, breakevenStop);\r\n        \r\n        return {\r\n          stopLoss: finalStop,\r\n          breakevenActive: true,\r\n          reason: finalStop === breakevenStop \r\n            ? `Breakeven stop activated at ${profitPercentage.toFixed(2)}% profit`\r\n            : `Trailing stop above breakeven at ${profitPercentage.toFixed(2)}% profit`\r\n        };\r\n      } else {\r\n        // For short positions, breakeven is slightly below entry\r\n        breakevenStop = entryPrice * 0.999; // 0.1% below entry to cover fees\r\n        \r\n        // Use the lower of calculated trailing stop or breakeven\r\n        const finalStop = Math.min(calculatedStopLoss, breakevenStop);\r\n        \r\n        return {\r\n          stopLoss: finalStop,\r\n          breakevenActive: true,\r\n          reason: finalStop === breakevenStop \r\n            ? `Breakeven stop activated at ${profitPercentage.toFixed(2)}% profit`\r\n            : `Trailing stop below breakeven at ${profitPercentage.toFixed(2)}% profit`\r\n        };\r\n      }\r\n    }\r\n\r\n    return {\r\n      stopLoss: calculatedStopLoss,\r\n      breakevenActive: false,\r\n      reason: `Trailing stop updated, ${profitPercentage.toFixed(2)}% profit`\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculate current profit percentage\r\n   */\r\n  private calculateProfitPercentage(position: Position): number {\r\n    const entryPrice = position.entryPrice;\r\n    const currentPrice = position.currentPrice;\r\n\r\n    if (position.type === 'LONG') {\r\n      return ((currentPrice - entryPrice) / entryPrice) * 100;\r\n    } else {\r\n      return ((entryPrice - currentPrice) / entryPrice) * 100;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Determine if stop loss should be updated\r\n   */\r\n  private shouldUpdateStopLoss(\r\n    position: Position,\r\n    currentStopLoss: number,\r\n    newStopLoss: number\r\n  ): boolean {\r\n    if (position.type === 'LONG') {\r\n      // For long positions, only move stop loss up\r\n      return newStopLoss > currentStopLoss;\r\n    } else {\r\n      // For short positions, only move stop loss down\r\n      return newStopLoss < currentStopLoss;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate actual trailing distance percentage\r\n   */\r\n  private calculateActualTrailingDistance(currentPrice: number, stopLoss: number): number {\r\n    return Math.abs((currentPrice - stopLoss) / currentPrice) * 100;\r\n  }\r\n\r\n  /**\r\n   * Record stop loss update for audit trail\r\n   */\r\n  private recordStopLossUpdate(\r\n    positionId: string,\r\n    previousStopLoss: number,\r\n    newStopLoss: number,\r\n    reason: string\r\n  ): void {\r\n    const update: TrailingStopUpdate = {\r\n      positionId,\r\n      previousStopLoss,\r\n      newStopLoss,\r\n      reason,\r\n      timestamp: new Date()\r\n    };\r\n\r\n    if (!this.trailingStopUpdates.has(positionId)) {\r\n      this.trailingStopUpdates.set(positionId, []);\r\n    }\r\n\r\n    this.trailingStopUpdates.get(positionId)!.push(update);\r\n\r\n    // Keep only last 100 updates per position\r\n    const updates = this.trailingStopUpdates.get(positionId)!;\r\n    if (updates.length > 100) {\r\n      updates.splice(0, updates.length - 100);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get trailing stop update history for a position\r\n   */\r\n  getTrailingStopHistory(positionId: string): TrailingStopUpdate[] {\r\n    return this.trailingStopUpdates.get(positionId) || [];\r\n  }\r\n\r\n  /**\r\n   * Calculate optimal initial stop loss\r\n   */\r\n  calculateInitialStopLoss(\r\n    entryPrice: number,\r\n    positionType: 'LONG' | 'SHORT',\r\n    config: TrailingStopConfig,\r\n    marketConditions: MarketConditions\r\n  ): number {\r\n    let initialStopDistance = config.initialStopLoss;\r\n\r\n    // Adjust for volatility\r\n    if (config.volatilityAdjustment) {\r\n      const volatilityAdjustment = marketConditions.volatility * 0.5;\r\n      initialStopDistance = Math.max(\r\n        initialStopDistance,\r\n        initialStopDistance * (1 + volatilityAdjustment)\r\n      );\r\n    }\r\n\r\n    // Use ATR for minimum stop distance\r\n    const atrBasedStop = (marketConditions.atr / entryPrice) * 100 * 1.5; // 1.5x ATR\r\n    initialStopDistance = Math.max(initialStopDistance, atrBasedStop);\r\n\r\n    if (positionType === 'LONG') {\r\n      return entryPrice * (1 - initialStopDistance / 100);\r\n    } else {\r\n      return entryPrice * (1 + initialStopDistance / 100);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Optimize stop loss based on current market conditions\r\n   */\r\n  optimizeStopLoss(\r\n    position: Position,\r\n    config: TrailingStopConfig,\r\n    marketConditions: MarketConditions\r\n  ): { optimizedStopLoss: number; reason: string } {\r\n    const currentStopLoss = position.stopLoss;\r\n    const currentPrice = position.currentPrice;\r\n\r\n    // Check if current stop is too tight in high volatility\r\n    if (marketConditions.volatility > 0.5) {\r\n      const minDistance = (marketConditions.atr / currentPrice) * 100 * 2;\r\n      const currentDistance = this.calculateActualTrailingDistance(currentPrice, currentStopLoss);\r\n\r\n      if (currentDistance < minDistance) {\r\n        const optimizedStop = position.type === 'LONG'\r\n          ? currentPrice * (1 - minDistance / 100)\r\n          : currentPrice * (1 + minDistance / 100);\r\n\r\n        return {\r\n          optimizedStopLoss: optimizedStop,\r\n          reason: `Stop loss widened due to high volatility (${(marketConditions.volatility * 100).toFixed(1)}%)`\r\n        };\r\n      }\r\n    }\r\n\r\n    // Check for support/resistance optimization\r\n    if (position.type === 'LONG' && marketConditions.supportLevel) {\r\n      const supportBasedStop = marketConditions.supportLevel * 0.995;\r\n      if (supportBasedStop > currentStopLoss) {\r\n        return {\r\n          optimizedStopLoss: supportBasedStop,\r\n          reason: `Stop loss moved to support level at ${marketConditions.supportLevel}`\r\n        };\r\n      }\r\n    }\r\n\r\n    if (position.type === 'SHORT' && marketConditions.resistanceLevel) {\r\n      const resistanceBasedStop = marketConditions.resistanceLevel * 1.005;\r\n      if (resistanceBasedStop < currentStopLoss) {\r\n        return {\r\n          optimizedStopLoss: resistanceBasedStop,\r\n          reason: `Stop loss moved to resistance level at ${marketConditions.resistanceLevel}`\r\n        };\r\n      }\r\n    }\r\n\r\n    return {\r\n      optimizedStopLoss: currentStopLoss,\r\n      reason: 'Current stop loss is optimal for market conditions'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Clear trailing stop history for a position\r\n   */\r\n  clearTrailingStopHistory(positionId: string): void {\r\n    this.trailingStopUpdates.delete(positionId);\r\n  }\r\n\r\n  /**\r\n   * Get statistics for trailing stop performance\r\n   */\r\n  getTrailingStopStatistics(positionId: string): {\r\n    totalUpdates: number;\r\n    averageTrailingDistance: number;\r\n    maxTrailingDistance: number;\r\n    minTrailingDistance: number;\r\n    breakevenActivations: number;\r\n  } {\r\n    const updates = this.getTrailingStopHistory(positionId);\r\n    \r\n    if (updates.length === 0) {\r\n      return {\r\n        totalUpdates: 0,\r\n        averageTrailingDistance: 0,\r\n        maxTrailingDistance: 0,\r\n        minTrailingDistance: 0,\r\n        breakevenActivations: 0\r\n      };\r\n    }\r\n\r\n    const distances = updates.map(update => \r\n      Math.abs((update.newStopLoss - update.previousStopLoss) / update.previousStopLoss) * 100\r\n    );\r\n\r\n    const breakevenActivations = updates.filter(update => \r\n      update.reason.includes('Breakeven')\r\n    ).length;\r\n\r\n    return {\r\n      totalUpdates: updates.length,\r\n      averageTrailingDistance: distances.reduce((sum, d) => sum + d, 0) / distances.length,\r\n      maxTrailingDistance: Math.max(...distances),\r\n      minTrailingDistance: Math.min(...distances),\r\n      breakevenActivations\r\n    };\r\n  }\r\n}"],"mappings":"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","ignoreList":[]}