5541bd76315055604e8d294cc50bbd2f
"use strict";
/**
 * Moving Average Strategy Tests
 *
 * Comprehensive test suite for moving average calculations and crossover detection.
 * Tests cover SMA, EMA calculations, crossover detection, and signal generation.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const moving_average_1 = require("../moving-average");
describe('MovingAverageStrategy', () => {
    let strategy;
    let mockMarketData;
    beforeEach(() => {
        strategy = new moving_average_1.MovingAverageStrategy();
        // Create mock market data for testing
        mockMarketData = [];
        const basePrice = 100;
        const baseVolume = 1000000;
        for (let i = 0; i < 60; i++) {
            const price = basePrice + Math.sin(i * 0.1) * 10 + (i * 0.1); // Trending upward with oscillation
            mockMarketData.push({
                symbol: 'BTC/USDT',
                timestamp: new Date(Date.now() - (60 - i) * 60000), // 1 minute intervals
                open: price - 0.5,
                high: price + 1,
                low: price - 1,
                close: price,
                volume: baseVolume + Math.random() * 500000
            });
        }
    });
    describe('SMA Calculations', () => {
        test('should calculate SMA correctly', () => {
            const prices = [10, 20, 30, 40, 50];
            const sma = strategy.calculateSMA(prices, 5);
            expect(sma).toBe(30); // (10+20+30+40+50)/5 = 30
        });
        test('should return null for insufficient data', () => {
            const prices = [10, 20];
            const sma = strategy.calculateSMA(prices, 5);
            expect(sma).toBeNull();
        });
        test('should calculate SMA for partial period', () => {
            const prices = [10, 20, 30, 40, 50, 60];
            const sma = strategy.calculateSMA(prices, 3);
            expect(sma).toBe(50); // Last 3 values: (40+50+60)/3 = 50
        });
    });
    describe('EMA Calculations', () => {
        test('should calculate EMA correctly', () => {
            const prices = [10, 20, 30, 40, 50];
            const ema = strategy.calculateEMA(prices, 5);
            expect(ema).toBeGreaterThan(0);
            expect(ema).toBeLessThan(100);
        });
        test('should return null for insufficient data', () => {
            const prices = [10, 20];
            const ema = strategy.calculateEMA(prices, 5);
            expect(ema).toBeNull();
        });
        test('should give more weight to recent prices', () => {
            const prices1 = [10, 10, 10, 10, 50]; // Recent high
            const prices2 = [50, 10, 10, 10, 10]; // Early high
            const ema1 = strategy.calculateEMA(prices1, 5);
            const ema2 = strategy.calculateEMA(prices2, 5);
            expect(ema1).toBeGreaterThan(ema2);
        });
    });
    describe('EMA Crossover Calculations', () => {
        test('should calculate fast and slow EMAs', () => {
            const result = strategy.calculateEMACrossover(mockMarketData, 10, 20);
            expect(result.fastEMA).not.toBeNull();
            expect(result.slowEMA).not.toBeNull();
            expect(typeof result.fastEMA).toBe('number');
            expect(typeof result.slowEMA).toBe('number');
        });
        test('should return null for insufficient data', () => {
            const shortData = mockMarketData.slice(0, 5);
            const result = strategy.calculateEMACrossover(shortData, 10, 20);
            expect(result.fastEMA).toBeNull();
            expect(result.slowEMA).toBeNull();
        });
    });
    describe('Crossover Detection', () => {
        test('should detect golden cross', () => {
            // Create data where fast EMA crosses above slow EMA
            const goldenCrossData = [];
            for (let i = 0; i < 60; i++) {
                const price = 100 + (i < 30 ? -i * 0.5 : (i - 30) * 2); // Decline then strong rise
                goldenCrossData.push({
                    symbol: 'BTC/USDT',
                    timestamp: new Date(Date.now() - (60 - i) * 60000),
                    open: price - 0.5,
                    high: price + 1,
                    low: price - 1,
                    close: price,
                    volume: 1000000 + Math.random() * 500000
                });
            }
            const crossover = strategy.detectCrossover(goldenCrossData, 10, 20);
            if (crossover?.crossover?.type === 'GOLDEN_CROSS') {
                expect(crossover.crossover.type).toBe('GOLDEN_CROSS');
                expect(crossover.crossover.strength).toBeGreaterThan(0);
            }
        });
        test('should detect death cross', () => {
            // Create data where fast EMA crosses below slow EMA
            const deathCrossData = [];
            for (let i = 0; i < 60; i++) {
                const price = 100 + (i < 30 ? i * 2 : -(i - 30) * 2); // Rise then strong decline
                deathCrossData.push({
                    symbol: 'BTC/USDT',
                    timestamp: new Date(Date.now() - (60 - i) * 60000),
                    open: price - 0.5,
                    high: price + 1,
                    low: price - 1,
                    close: price,
                    volume: 1000000 + Math.random() * 500000
                });
            }
            const crossover = strategy.detectCrossover(deathCrossData, 10, 20);
            if (crossover?.crossover?.type === 'DEATH_CROSS') {
                expect(crossover.crossover.type).toBe('DEATH_CROSS');
                expect(crossover.crossover.strength).toBeGreaterThan(0);
            }
        });
        test('should return null for insufficient data', () => {
            const shortData = mockMarketData.slice(0, 10);
            const crossover = strategy.detectCrossover(shortData, 20, 50);
            expect(crossover).toBeNull();
        });
        test('should include volume confirmation', () => {
            const crossover = strategy.detectCrossover(mockMarketData, 10, 20);
            if (crossover?.crossover) {
                expect(typeof crossover.crossover.volumeConfirmed).toBe('boolean');
            }
        });
    });
    describe('Signal Generation', () => {
        test('should generate buy signal on golden cross', () => {
            // Create strong uptrend data
            const trendData = [];
            for (let i = 0; i < 60; i++) {
                const price = 100 + (i < 40 ? 0 : (i - 40) * 3); // Flat then strong rise
                trendData.push({
                    symbol: 'BTC/USDT',
                    timestamp: new Date(Date.now() - (60 - i) * 60000),
                    open: price - 0.5,
                    high: price + 1,
                    low: price - 1,
                    close: price,
                    volume: 1000000 * (i < 40 ? 1 : 2) // Higher volume during rise
                });
            }
            const signal = strategy.generateSignal(trendData, 10, 20);
            if (signal) {
                expect(signal.type).toBe('BUY');
                expect(signal.strength).toBeGreaterThan(0);
                expect(signal.confidence).toBeGreaterThan(0);
                expect(signal.indicators).toContain('EMA_10');
                expect(signal.indicators).toContain('EMA_20');
                expect(signal.reasoning).toContain('Golden Cross');
            }
        });
        test('should generate sell signal on death cross', () => {
            // Create strong downtrend data
            const trendData = [];
            for (let i = 0; i < 60; i++) {
                const price = 100 - (i < 40 ? 0 : (i - 40) * 3); // Flat then strong decline
                trendData.push({
                    symbol: 'BTC/USDT',
                    timestamp: new Date(Date.now() - (60 - i) * 60000),
                    open: price - 0.5,
                    high: price + 1,
                    low: price - 1,
                    close: price,
                    volume: 1000000 * (i < 40 ? 1 : 2) // Higher volume during decline
                });
            }
            const signal = strategy.generateSignal(trendData, 10, 20);
            if (signal) {
                expect(signal.type).toBe('SELL');
                expect(signal.strength).toBeGreaterThan(0);
                expect(signal.confidence).toBeGreaterThan(0);
                expect(signal.reasoning).toContain('Death Cross');
            }
        });
        test('should return null when no crossover occurs', () => {
            // Create sideways market data
            const sidewaysData = [];
            for (let i = 0; i < 60; i++) {
                const price = 100 + Math.sin(i * 0.1) * 2; // Small oscillations
                sidewaysData.push({
                    symbol: 'BTC/USDT',
                    timestamp: new Date(Date.now() - (60 - i) * 60000),
                    open: price - 0.5,
                    high: price + 1,
                    low: price - 1,
                    close: price,
                    volume: 1000000
                });
            }
            const signal = strategy.generateSignal(sidewaysData, 10, 20);
            // May or may not generate signal depending on exact oscillations
            if (signal) {
                expect(['BUY', 'SELL']).toContain(signal.type);
            }
        });
        test('should include proper metadata', () => {
            const signal = strategy.generateSignal(mockMarketData, 10, 20);
            if (signal) {
                expect(signal.metadata).toBeDefined();
                expect(signal.metadata?.fastEMA).toBeDefined();
                expect(signal.metadata?.slowEMA).toBeDefined();
                expect(signal.metadata?.volumeConfirmed).toBeDefined();
                expect(signal.metadata?.crossoverType).toBeDefined();
            }
        });
    });
    describe('Signal Confidence Evaluation', () => {
        test('should evaluate signal confidence correctly', () => {
            const signal = strategy.generateSignal(mockMarketData, 10, 20);
            if (signal) {
                const confidence = strategy.evaluateSignalConfidence(mockMarketData, signal);
                expect(confidence.overall).toBeGreaterThanOrEqual(0);
                expect(confidence.overall).toBeLessThanOrEqual(100);
                expect(confidence.technical).toBeGreaterThanOrEqual(0);
                expect(confidence.technical).toBeLessThanOrEqual(100);
                expect(confidence.volume).toBeGreaterThanOrEqual(0);
                expect(confidence.volume).toBeLessThanOrEqual(100);
                expect(confidence.momentum).toBeGreaterThanOrEqual(0);
                expect(confidence.momentum).toBeLessThanOrEqual(100);
                expect(confidence.factors).toHaveLength(3);
            }
        });
        test('should provide detailed factors', () => {
            const signal = strategy.generateSignal(mockMarketData, 10, 20);
            if (signal) {
                const confidence = strategy.evaluateSignalConfidence(mockMarketData, signal);
                expect(confidence.factors[0]).toContain('EMA crossover strength');
                expect(confidence.factors[1]).toContain('Volume confirmation');
                expect(confidence.factors[2]).toContain('Price momentum');
            }
        });
    });
    describe('Edge Cases', () => {
        test('should handle empty market data', () => {
            const signal = strategy.generateSignal([], 10, 20);
            expect(signal).toBeNull();
        });
        test('should handle single data point', () => {
            const singleData = [mockMarketData[0]];
            const signal = strategy.generateSignal(singleData, 10, 20);
            expect(signal).toBeNull();
        });
        test('should handle identical prices', () => {
            const flatData = [];
            for (let i = 0; i < 60; i++) {
                flatData.push({
                    symbol: 'BTC/USDT',
                    timestamp: new Date(Date.now() - (60 - i) * 60000),
                    open: 100,
                    high: 100,
                    low: 100,
                    close: 100,
                    volume: 1000000
                });
            }
            const signal = strategy.generateSignal(flatData, 10, 20);
            // Should not generate signal for flat prices
            expect(signal).toBeNull();
        });
        test('should handle very small periods', () => {
            const sma = strategy.calculateSMA([10, 20], 1);
            expect(sma).toBe(20); // Should return last value for period 1
            const ema = strategy.calculateEMA([10, 20], 1);
            expect(ema).toBe(20); // Should return last value for period 1
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,