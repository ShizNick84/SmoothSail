{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\strategies\\__tests__\\moving-average.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\strategies\\__tests__\\moving-average.test.ts"],"sourcesContent":["/**\r\n * Moving Average Strategy Tests\r\n * \r\n * Comprehensive test suite for moving average calculations and crossover detection.\r\n * Tests cover SMA, EMA calculations, crossover detection, and signal generation.\r\n */\r\n\r\nimport { MovingAverageStrategy } from '../moving-average';\r\nimport { MarketData } from '../types';\r\n\r\ndescribe('MovingAverageStrategy', () => {\r\n  let strategy: MovingAverageStrategy;\r\n  let mockMarketData: MarketData[];\r\n\r\n  beforeEach(() => {\r\n    strategy = new MovingAverageStrategy();\r\n    \r\n    // Create mock market data for testing\r\n    mockMarketData = [];\r\n    const basePrice = 100;\r\n    const baseVolume = 1000000;\r\n    \r\n    for (let i = 0; i < 60; i++) {\r\n      const price = basePrice + Math.sin(i * 0.1) * 10 + (i * 0.1); // Trending upward with oscillation\r\n      mockMarketData.push({\r\n        symbol: 'BTC/USDT',\r\n        timestamp: new Date(Date.now() - (60 - i) * 60000), // 1 minute intervals\r\n        open: price - 0.5,\r\n        high: price + 1,\r\n        low: price - 1,\r\n        close: price,\r\n        volume: baseVolume + Math.random() * 500000\r\n      });\r\n    }\r\n  });\r\n\r\n  describe('SMA Calculations', () => {\r\n    test('should calculate SMA correctly', () => {\r\n      const prices = [10, 20, 30, 40, 50];\r\n      const sma = strategy.calculateSMA(prices, 5);\r\n      expect(sma).toBe(30); // (10+20+30+40+50)/5 = 30\r\n    });\r\n\r\n    test('should return null for insufficient data', () => {\r\n      const prices = [10, 20];\r\n      const sma = strategy.calculateSMA(prices, 5);\r\n      expect(sma).toBeNull();\r\n    });\r\n\r\n    test('should calculate SMA for partial period', () => {\r\n      const prices = [10, 20, 30, 40, 50, 60];\r\n      const sma = strategy.calculateSMA(prices, 3);\r\n      expect(sma).toBe(50); // Last 3 values: (40+50+60)/3 = 50\r\n    });\r\n  });\r\n\r\n  describe('EMA Calculations', () => {\r\n    test('should calculate EMA correctly', () => {\r\n      const prices = [10, 20, 30, 40, 50];\r\n      const ema = strategy.calculateEMA(prices, 5);\r\n      expect(ema).toBeGreaterThan(0);\r\n      expect(ema).toBeLessThan(100);\r\n    });\r\n\r\n    test('should return null for insufficient data', () => {\r\n      const prices = [10, 20];\r\n      const ema = strategy.calculateEMA(prices, 5);\r\n      expect(ema).toBeNull();\r\n    });\r\n\r\n    test('should give more weight to recent prices', () => {\r\n      const prices1 = [10, 10, 10, 10, 50]; // Recent high\r\n      const prices2 = [50, 10, 10, 10, 10]; // Early high\r\n      \r\n      const ema1 = strategy.calculateEMA(prices1, 5);\r\n      const ema2 = strategy.calculateEMA(prices2, 5);\r\n      \r\n      expect(ema1).toBeGreaterThan(ema2!);\r\n    });\r\n  });\r\n\r\n  describe('EMA Crossover Calculations', () => {\r\n    test('should calculate fast and slow EMAs', () => {\r\n      const result = strategy.calculateEMACrossover(mockMarketData, 10, 20);\r\n      \r\n      expect(result.fastEMA).not.toBeNull();\r\n      expect(result.slowEMA).not.toBeNull();\r\n      expect(typeof result.fastEMA).toBe('number');\r\n      expect(typeof result.slowEMA).toBe('number');\r\n    });\r\n\r\n    test('should return null for insufficient data', () => {\r\n      const shortData = mockMarketData.slice(0, 5);\r\n      const result = strategy.calculateEMACrossover(shortData, 10, 20);\r\n      \r\n      expect(result.fastEMA).toBeNull();\r\n      expect(result.slowEMA).toBeNull();\r\n    });\r\n  });\r\n\r\n  describe('Crossover Detection', () => {\r\n    test('should detect golden cross', () => {\r\n      // Create data where fast EMA crosses above slow EMA\r\n      const goldenCrossData: MarketData[] = [];\r\n      for (let i = 0; i < 60; i++) {\r\n        const price = 100 + (i < 30 ? -i * 0.5 : (i - 30) * 2); // Decline then strong rise\r\n        goldenCrossData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (60 - i) * 60000),\r\n          open: price - 0.5,\r\n          high: price + 1,\r\n          low: price - 1,\r\n          close: price,\r\n          volume: 1000000 + Math.random() * 500000\r\n        });\r\n      }\r\n\r\n      const crossover = strategy.detectCrossover(goldenCrossData, 10, 20);\r\n      \r\n      if (crossover?.crossover?.type === 'GOLDEN_CROSS') {\r\n        expect(crossover.crossover.type).toBe('GOLDEN_CROSS');\r\n        expect(crossover.crossover.strength).toBeGreaterThan(0);\r\n      }\r\n    });\r\n\r\n    test('should detect death cross', () => {\r\n      // Create data where fast EMA crosses below slow EMA\r\n      const deathCrossData: MarketData[] = [];\r\n      for (let i = 0; i < 60; i++) {\r\n        const price = 100 + (i < 30 ? i * 2 : -(i - 30) * 2); // Rise then strong decline\r\n        deathCrossData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (60 - i) * 60000),\r\n          open: price - 0.5,\r\n          high: price + 1,\r\n          low: price - 1,\r\n          close: price,\r\n          volume: 1000000 + Math.random() * 500000\r\n        });\r\n      }\r\n\r\n      const crossover = strategy.detectCrossover(deathCrossData, 10, 20);\r\n      \r\n      if (crossover?.crossover?.type === 'DEATH_CROSS') {\r\n        expect(crossover.crossover.type).toBe('DEATH_CROSS');\r\n        expect(crossover.crossover.strength).toBeGreaterThan(0);\r\n      }\r\n    });\r\n\r\n    test('should return null for insufficient data', () => {\r\n      const shortData = mockMarketData.slice(0, 10);\r\n      const crossover = strategy.detectCrossover(shortData, 20, 50);\r\n      expect(crossover).toBeNull();\r\n    });\r\n\r\n    test('should include volume confirmation', () => {\r\n      const crossover = strategy.detectCrossover(mockMarketData, 10, 20);\r\n      \r\n      if (crossover?.crossover) {\r\n        expect(typeof crossover.crossover.volumeConfirmed).toBe('boolean');\r\n      }\r\n    });\r\n  });\r\n\r\n  describe('Signal Generation', () => {\r\n    test('should generate buy signal on golden cross', () => {\r\n      // Create strong uptrend data\r\n      const trendData: MarketData[] = [];\r\n      for (let i = 0; i < 60; i++) {\r\n        const price = 100 + (i < 40 ? 0 : (i - 40) * 3); // Flat then strong rise\r\n        trendData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (60 - i) * 60000),\r\n          open: price - 0.5,\r\n          high: price + 1,\r\n          low: price - 1,\r\n          close: price,\r\n          volume: 1000000 * (i < 40 ? 1 : 2) // Higher volume during rise\r\n        });\r\n      }\r\n\r\n      const signal = strategy.generateSignal(trendData, 10, 20);\r\n      \r\n      if (signal) {\r\n        expect(signal.type).toBe('BUY');\r\n        expect(signal.strength).toBeGreaterThan(0);\r\n        expect(signal.confidence).toBeGreaterThan(0);\r\n        expect(signal.indicators).toContain('EMA_10');\r\n        expect(signal.indicators).toContain('EMA_20');\r\n        expect(signal.reasoning).toContain('Golden Cross');\r\n      }\r\n    });\r\n\r\n    test('should generate sell signal on death cross', () => {\r\n      // Create strong downtrend data\r\n      const trendData: MarketData[] = [];\r\n      for (let i = 0; i < 60; i++) {\r\n        const price = 100 - (i < 40 ? 0 : (i - 40) * 3); // Flat then strong decline\r\n        trendData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (60 - i) * 60000),\r\n          open: price - 0.5,\r\n          high: price + 1,\r\n          low: price - 1,\r\n          close: price,\r\n          volume: 1000000 * (i < 40 ? 1 : 2) // Higher volume during decline\r\n        });\r\n      }\r\n\r\n      const signal = strategy.generateSignal(trendData, 10, 20);\r\n      \r\n      if (signal) {\r\n        expect(signal.type).toBe('SELL');\r\n        expect(signal.strength).toBeGreaterThan(0);\r\n        expect(signal.confidence).toBeGreaterThan(0);\r\n        expect(signal.reasoning).toContain('Death Cross');\r\n      }\r\n    });\r\n\r\n    test('should return null when no crossover occurs', () => {\r\n      // Create sideways market data\r\n      const sidewaysData: MarketData[] = [];\r\n      for (let i = 0; i < 60; i++) {\r\n        const price = 100 + Math.sin(i * 0.1) * 2; // Small oscillations\r\n        sidewaysData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (60 - i) * 60000),\r\n          open: price - 0.5,\r\n          high: price + 1,\r\n          low: price - 1,\r\n          close: price,\r\n          volume: 1000000\r\n        });\r\n      }\r\n\r\n      const signal = strategy.generateSignal(sidewaysData, 10, 20);\r\n      // May or may not generate signal depending on exact oscillations\r\n      if (signal) {\r\n        expect(['BUY', 'SELL']).toContain(signal.type);\r\n      }\r\n    });\r\n\r\n    test('should include proper metadata', () => {\r\n      const signal = strategy.generateSignal(mockMarketData, 10, 20);\r\n      \r\n      if (signal) {\r\n        expect(signal.metadata).toBeDefined();\r\n        expect(signal.metadata?.fastEMA).toBeDefined();\r\n        expect(signal.metadata?.slowEMA).toBeDefined();\r\n        expect(signal.metadata?.volumeConfirmed).toBeDefined();\r\n        expect(signal.metadata?.crossoverType).toBeDefined();\r\n      }\r\n    });\r\n  });\r\n\r\n  describe('Signal Confidence Evaluation', () => {\r\n    test('should evaluate signal confidence correctly', () => {\r\n      const signal = strategy.generateSignal(mockMarketData, 10, 20);\r\n      \r\n      if (signal) {\r\n        const confidence = strategy.evaluateSignalConfidence(mockMarketData, signal);\r\n        \r\n        expect(confidence.overall).toBeGreaterThanOrEqual(0);\r\n        expect(confidence.overall).toBeLessThanOrEqual(100);\r\n        expect(confidence.technical).toBeGreaterThanOrEqual(0);\r\n        expect(confidence.technical).toBeLessThanOrEqual(100);\r\n        expect(confidence.volume).toBeGreaterThanOrEqual(0);\r\n        expect(confidence.volume).toBeLessThanOrEqual(100);\r\n        expect(confidence.momentum).toBeGreaterThanOrEqual(0);\r\n        expect(confidence.momentum).toBeLessThanOrEqual(100);\r\n        expect(confidence.factors).toHaveLength(3);\r\n      }\r\n    });\r\n\r\n    test('should provide detailed factors', () => {\r\n      const signal = strategy.generateSignal(mockMarketData, 10, 20);\r\n      \r\n      if (signal) {\r\n        const confidence = strategy.evaluateSignalConfidence(mockMarketData, signal);\r\n        \r\n        expect(confidence.factors[0]).toContain('EMA crossover strength');\r\n        expect(confidence.factors[1]).toContain('Volume confirmation');\r\n        expect(confidence.factors[2]).toContain('Price momentum');\r\n      }\r\n    });\r\n  });\r\n\r\n  describe('Edge Cases', () => {\r\n    test('should handle empty market data', () => {\r\n      const signal = strategy.generateSignal([], 10, 20);\r\n      expect(signal).toBeNull();\r\n    });\r\n\r\n    test('should handle single data point', () => {\r\n      const singleData = [mockMarketData[0]];\r\n      const signal = strategy.generateSignal(singleData, 10, 20);\r\n      expect(signal).toBeNull();\r\n    });\r\n\r\n    test('should handle identical prices', () => {\r\n      const flatData: MarketData[] = [];\r\n      for (let i = 0; i < 60; i++) {\r\n        flatData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (60 - i) * 60000),\r\n          open: 100,\r\n          high: 100,\r\n          low: 100,\r\n          close: 100,\r\n          volume: 1000000\r\n        });\r\n      }\r\n\r\n      const signal = strategy.generateSignal(flatData, 10, 20);\r\n      // Should not generate signal for flat prices\r\n      expect(signal).toBeNull();\r\n    });\r\n\r\n    test('should handle very small periods', () => {\r\n      const sma = strategy.calculateSMA([10, 20], 1);\r\n      expect(sma).toBe(20); // Should return last value for period 1\r\n\r\n      const ema = strategy.calculateEMA([10, 20], 1);\r\n      expect(ema).toBe(20); // Should return last value for period 1\r\n    });\r\n  });\r\n});"],"version":3}