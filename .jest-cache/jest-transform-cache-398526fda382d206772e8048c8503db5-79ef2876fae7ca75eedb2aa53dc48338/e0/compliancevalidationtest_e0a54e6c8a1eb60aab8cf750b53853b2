627a436629f42c5630375e3d9c930cef
"use strict";
/**
 * Security Compliance Validation Tests
 *
 * Comprehensive compliance testing for financial regulations,
 * data protection laws, and security standards.
 *
 * Requirements: 25.7 - Security compliance testing and validation
 */
Object.defineProperty(exports, "__esModule", { value: true });
const encryption_service_1 = require("@/security/encryption-service");
describe('Security Compliance Validation', () => {
    let encryptionService;
    beforeAll(() => {
        // Set up test environment
        process.env.NODE_ENV = 'test';
        process.env.MASTER_ENCRYPTION_KEY = 'a'.repeat(64); // 64 hex chars = 32 bytes
        // Initialize encryption service
        encryptionService = new encryption_service_1.EncryptionService();
    });
    describe('Basic Compliance Tests', () => {
        it('should have encryption service available', () => {
            expect(encryptionService).toBeDefined();
            const status = encryptionService.getStatus();
            expect(status.isInitialized).toBe(true);
        });
        it('should use secure encryption algorithms', () => {
            const status = encryptionService.getStatus();
            expect(status.algorithm).toBe('aes-256-gcm');
        });
        it('should have proper key derivation parameters', () => {
            const status = encryptionService.getStatus();
            expect(status.keyDerivationParams.iterations).toBeGreaterThanOrEqual(100000);
            expect(status.keyDerivationParams.keyLength).toBe(32);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxOaWNrXFxEZXNrdG9wXFxTbW9vdGhTYWlsXFxzcmNcXHRlc3RzXFxzZWN1cml0eVxcY29tcGxpYW5jZS12YWxpZGF0aW9uLnRlc3QudHMiLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7O0dBT0c7O0FBRUgsc0VBQWtFO0FBRWxFLFFBQVEsQ0FBQyxnQ0FBZ0MsRUFBRSxHQUFHLEVBQUU7SUFDOUMsSUFBSSxpQkFBb0MsQ0FBQztJQUV6QyxTQUFTLENBQUMsR0FBRyxFQUFFO1FBQ2IsMEJBQTBCO1FBQzFCLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQztRQUM5QixPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFxQixHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQywwQkFBMEI7UUFFOUUsZ0NBQWdDO1FBQ2hDLGlCQUFpQixHQUFHLElBQUksc0NBQWlCLEVBQUUsQ0FBQztJQUM5QyxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyx3QkFBd0IsRUFBRSxHQUFHLEVBQUU7UUFDdEMsRUFBRSxDQUFDLDBDQUEwQyxFQUFFLEdBQUcsRUFBRTtZQUNsRCxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUN4QyxNQUFNLE1BQU0sR0FBRyxpQkFBaUIsQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUM3QyxNQUFNLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMxQyxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyx5Q0FBeUMsRUFBRSxHQUFHLEVBQUU7WUFDakQsTUFBTSxNQUFNLEdBQUcsaUJBQWlCLENBQUMsU0FBUyxFQUFFLENBQUM7WUFDN0MsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDL0MsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsOENBQThDLEVBQUUsR0FBRyxFQUFFO1lBQ3RELE1BQU0sTUFBTSxHQUFHLGlCQUFpQixDQUFDLFNBQVMsRUFBRSxDQUFDO1lBQzdDLE1BQU0sQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQUMsVUFBVSxDQUFDLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDN0UsTUFBTSxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDeEQsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcTmlja1xcRGVza3RvcFxcU21vb3RoU2FpbFxcc3JjXFx0ZXN0c1xcc2VjdXJpdHlcXGNvbXBsaWFuY2UtdmFsaWRhdGlvbi50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBTZWN1cml0eSBDb21wbGlhbmNlIFZhbGlkYXRpb24gVGVzdHNcclxuICogXHJcbiAqIENvbXByZWhlbnNpdmUgY29tcGxpYW5jZSB0ZXN0aW5nIGZvciBmaW5hbmNpYWwgcmVndWxhdGlvbnMsXHJcbiAqIGRhdGEgcHJvdGVjdGlvbiBsYXdzLCBhbmQgc2VjdXJpdHkgc3RhbmRhcmRzLlxyXG4gKiBcclxuICogUmVxdWlyZW1lbnRzOiAyNS43IC0gU2VjdXJpdHkgY29tcGxpYW5jZSB0ZXN0aW5nIGFuZCB2YWxpZGF0aW9uXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgRW5jcnlwdGlvblNlcnZpY2UgfSBmcm9tICdAL3NlY3VyaXR5L2VuY3J5cHRpb24tc2VydmljZSc7XHJcblxyXG5kZXNjcmliZSgnU2VjdXJpdHkgQ29tcGxpYW5jZSBWYWxpZGF0aW9uJywgKCkgPT4ge1xyXG4gIGxldCBlbmNyeXB0aW9uU2VydmljZTogRW5jcnlwdGlvblNlcnZpY2U7XHJcblxyXG4gIGJlZm9yZUFsbCgoKSA9PiB7XHJcbiAgICAvLyBTZXQgdXAgdGVzdCBlbnZpcm9ubWVudFxyXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPSAndGVzdCc7XHJcbiAgICBwcm9jZXNzLmVudi5NQVNURVJfRU5DUllQVElPTl9LRVkgPSAnYScucmVwZWF0KDY0KTsgLy8gNjQgaGV4IGNoYXJzID0gMzIgYnl0ZXNcclxuICAgIFxyXG4gICAgLy8gSW5pdGlhbGl6ZSBlbmNyeXB0aW9uIHNlcnZpY2VcclxuICAgIGVuY3J5cHRpb25TZXJ2aWNlID0gbmV3IEVuY3J5cHRpb25TZXJ2aWNlKCk7XHJcbiAgfSk7XHJcblxyXG4gIGRlc2NyaWJlKCdCYXNpYyBDb21wbGlhbmNlIFRlc3RzJywgKCkgPT4ge1xyXG4gICAgaXQoJ3Nob3VsZCBoYXZlIGVuY3J5cHRpb24gc2VydmljZSBhdmFpbGFibGUnLCAoKSA9PiB7XHJcbiAgICAgIGV4cGVjdChlbmNyeXB0aW9uU2VydmljZSkudG9CZURlZmluZWQoKTtcclxuICAgICAgY29uc3Qgc3RhdHVzID0gZW5jcnlwdGlvblNlcnZpY2UuZ2V0U3RhdHVzKCk7XHJcbiAgICAgIGV4cGVjdChzdGF0dXMuaXNJbml0aWFsaXplZCkudG9CZSh0cnVlKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdzaG91bGQgdXNlIHNlY3VyZSBlbmNyeXB0aW9uIGFsZ29yaXRobXMnLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHN0YXR1cyA9IGVuY3J5cHRpb25TZXJ2aWNlLmdldFN0YXR1cygpO1xyXG4gICAgICBleHBlY3Qoc3RhdHVzLmFsZ29yaXRobSkudG9CZSgnYWVzLTI1Ni1nY20nKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdzaG91bGQgaGF2ZSBwcm9wZXIga2V5IGRlcml2YXRpb24gcGFyYW1ldGVycycsICgpID0+IHtcclxuICAgICAgY29uc3Qgc3RhdHVzID0gZW5jcnlwdGlvblNlcnZpY2UuZ2V0U3RhdHVzKCk7XHJcbiAgICAgIGV4cGVjdChzdGF0dXMua2V5RGVyaXZhdGlvblBhcmFtcy5pdGVyYXRpb25zKS50b0JlR3JlYXRlclRoYW5PckVxdWFsKDEwMDAwMCk7XHJcbiAgICAgIGV4cGVjdChzdGF0dXMua2V5RGVyaXZhdGlvblBhcmFtcy5rZXlMZW5ndGgpLnRvQmUoMzIpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn0pOyJdLCJ2ZXJzaW9uIjozfQ==