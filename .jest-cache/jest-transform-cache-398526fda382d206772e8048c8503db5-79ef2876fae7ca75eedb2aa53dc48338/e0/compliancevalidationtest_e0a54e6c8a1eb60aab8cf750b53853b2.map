{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\tests\\security\\compliance-validation.test.ts","mappings":";AAAA;;;;;;;GAOG;;AAEH,sEAAkE;AAElE,QAAQ,CAAC,gCAAgC,EAAE,GAAG,EAAE;IAC9C,IAAI,iBAAoC,CAAC;IAEzC,SAAS,CAAC,GAAG,EAAE;QACb,0BAA0B;QAC1B,OAAO,CAAC,GAAG,CAAC,QAAQ,GAAG,MAAM,CAAC;QAC9B,OAAO,CAAC,GAAG,CAAC,qBAAqB,GAAG,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,0BAA0B;QAE9E,gCAAgC;QAChC,iBAAiB,GAAG,IAAI,sCAAiB,EAAE,CAAC;IAC9C,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,wBAAwB,EAAE,GAAG,EAAE;QACtC,EAAE,CAAC,0CAA0C,EAAE,GAAG,EAAE;YAClD,MAAM,CAAC,iBAAiB,CAAC,CAAC,WAAW,EAAE,CAAC;YACxC,MAAM,MAAM,GAAG,iBAAiB,CAAC,SAAS,EAAE,CAAC;YAC7C,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yCAAyC,EAAE,GAAG,EAAE;YACjD,MAAM,MAAM,GAAG,iBAAiB,CAAC,SAAS,EAAE,CAAC;YAC7C,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8CAA8C,EAAE,GAAG,EAAE;YACtD,MAAM,MAAM,GAAG,iBAAiB,CAAC,SAAS,EAAE,CAAC;YAC7C,MAAM,CAAC,MAAM,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC;YAC7E,MAAM,CAAC,MAAM,CAAC,mBAAmB,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\tests\\security\\compliance-validation.test.ts"],"sourcesContent":["/**\r\n * Security Compliance Validation Tests\r\n * \r\n * Comprehensive compliance testing for financial regulations,\r\n * data protection laws, and security standards.\r\n * \r\n * Requirements: 25.7 - Security compliance testing and validation\r\n */\r\n\r\nimport { EncryptionService } from '@/security/encryption-service';\r\n\r\ndescribe('Security Compliance Validation', () => {\r\n  let encryptionService: EncryptionService;\r\n\r\n  beforeAll(() => {\r\n    // Set up test environment\r\n    process.env.NODE_ENV = 'test';\r\n    process.env.MASTER_ENCRYPTION_KEY = 'a'.repeat(64); // 64 hex chars = 32 bytes\r\n    \r\n    // Initialize encryption service\r\n    encryptionService = new EncryptionService();\r\n  });\r\n\r\n  describe('Basic Compliance Tests', () => {\r\n    it('should have encryption service available', () => {\r\n      expect(encryptionService).toBeDefined();\r\n      const status = encryptionService.getStatus();\r\n      expect(status.isInitialized).toBe(true);\r\n    });\r\n\r\n    it('should use secure encryption algorithms', () => {\r\n      const status = encryptionService.getStatus();\r\n      expect(status.algorithm).toBe('aes-256-gcm');\r\n    });\r\n\r\n    it('should have proper key derivation parameters', () => {\r\n      const status = encryptionService.getStatus();\r\n      expect(status.keyDerivationParams.iterations).toBeGreaterThanOrEqual(100000);\r\n      expect(status.keyDerivationParams.keyLength).toBe(32);\r\n    });\r\n  });\r\n});"],"version":3}