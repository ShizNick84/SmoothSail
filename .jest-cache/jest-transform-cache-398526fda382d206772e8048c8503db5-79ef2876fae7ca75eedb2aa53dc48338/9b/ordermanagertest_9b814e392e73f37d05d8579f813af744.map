{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\orders\\__tests__\\order-manager.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\orders\\__tests__\\order-manager.test.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * ORDER MANAGER TESTS\r\n * =============================================================================\r\n * \r\n * Comprehensive test suite for the order management system with validation,\r\n * execution, status monitoring, and position tracking.\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport { OrderManager } from '../order-manager';\r\nimport { GateIOClient } from '../../api/gate-io-client';\r\nimport { AuditService } from '@/security/audit-service';\r\nimport { OrderRequest, OrderResponse, OrderStatus, OrderSide, OrderType } from '../../api/types';\r\n\r\n// Mock dependencies\r\njest.mock('../../api/gate-io-client');\r\njest.mock('@/security/audit-service');\r\njest.mock('@/core/logging/logger');\r\n\r\nconst MockedGateIOClient = GateIOClient as jest.MockedClass<typeof GateIOClient>;\r\nconst MockedAuditService = AuditService as jest.MockedClass<typeof AuditService>;\r\n\r\ndescribe('OrderManager', () => {\r\n  let orderManager: OrderManager;\r\n  let mockGateIOClient: jest.Mocked<GateIOClient>;\r\n  let mockAuditService: jest.Mocked<AuditService>;\r\n\r\n  // Sample order data\r\n  const sampleOrderRequest: OrderRequest = {\r\n    currency_pair: 'BTC_USDT',\r\n    type: 'limit',\r\n    side: 'buy',\r\n    amount: '0.001',\r\n    price: '50000',\r\n    time_in_force: 'GTC',\r\n  };\r\n\r\n  const sampleOrderResponse: OrderResponse = {\r\n    id: 'order-123',\r\n    text: 'test-order',\r\n    create_time: '2024-01-01T00:00:00Z',\r\n    update_time: '2024-01-01T00:00:00Z',\r\n    create_time_ms: Date.now(),\r\n    update_time_ms: Date.now(),\r\n    status: 'open',\r\n    currency_pair: 'BTC_USDT',\r\n    type: 'limit',\r\n    account: 'spot',\r\n    side: 'buy',\r\n    amount: '0.001',\r\n    price: '50000',\r\n    time_in_force: 'GTC',\r\n    iceberg: '0',\r\n    auto_borrow: false,\r\n    auto_repay: false,\r\n    left: '0.001',\r\n    filled_total: '0',\r\n    fee: '0',\r\n    fee_currency: 'USDT',\r\n    point_fee: '0',\r\n    gt_fee: '0',\r\n    gt_discount: false,\r\n    rebated_fee: '0',\r\n    rebated_fee_currency: 'USDT',\r\n  };\r\n\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    \r\n    // Mock GateIO client\r\n    mockGateIOClient = new MockedGateIOClient() as jest.Mocked<GateIOClient>;\r\n    mockGateIOClient.makeRequest = jest.fn();\r\n    \r\n    // Mock audit service\r\n    mockAuditService = new MockedAuditService() as jest.Mocked<AuditService>;\r\n    mockAuditService.logSecurityEvent = jest.fn().mockResolvedValue(undefined);\r\n    \r\n    // Create order manager instance\r\n    orderManager = new OrderManager(mockGateIOClient);\r\n  });\r\n\r\n  describe('Initialization', () => {\r\n    it('should initialize successfully with default configuration', async () => {\r\n      // Mock existing orders response\r\n      mockGateIOClient.makeRequest.mockResolvedValue([]);\r\n      \r\n      const result = await orderManager.initialize();\r\n      \r\n      expect(result).toBe(true);\r\n      expect(mockAuditService.logSecurityEvent).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          type: 'ORDER_MANAGER_INITIALIZED',\r\n          severity: 'INFO'\r\n        })\r\n      );\r\n    });\r\n\r\n    it('should initialize with custom configuration', async () => {\r\n      mockGateIOClient.makeRequest.mockResolvedValue([]);\r\n      \r\n      const customConfig = {\r\n        maxOrderValue: 5000,\r\n        enableRiskChecks: false,\r\n      };\r\n      \r\n      const result = await orderManager.initialize(customConfig);\r\n      \r\n      expect(result).toBe(true);\r\n      const config = orderManager.getConfig();\r\n      expect(config.maxOrderValue).toBe(5000);\r\n      expect(config.enableRiskChecks).toBe(false);\r\n    });\r\n\r\n    it('should load existing orders during initialization', async () => {\r\n      const existingOrders = [sampleOrderResponse];\r\n      mockGateIOClient.makeRequest.mockResolvedValue(existingOrders);\r\n      \r\n      await orderManager.initialize();\r\n      \r\n      const activeOrders = orderManager.getActiveOrders();\r\n      expect(activeOrders).toHaveLength(1);\r\n      expect(activeOrders[0].id).toBe('order-123');\r\n    });\r\n\r\n    it('should handle initialization failure gracefully', async () => {\r\n      mockGateIOClient.makeRequest.mockRejectedValue(new Error('API error'));\r\n      \r\n      const result = await orderManager.initialize();\r\n      \r\n      expect(result).toBe(false);\r\n      expect(mockAuditService.logSecurityEvent).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          type: 'ORDER_MANAGER_INIT_FAILED',\r\n          severity: 'ERROR'\r\n        })\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('Order Placement', () => {\r\n    beforeEach(async () => {\r\n      mockGateIOClient.makeRequest.mockResolvedValue([]);\r\n      await orderManager.initialize();\r\n    });\r\n\r\n    it('should place order successfully with validation', async () => {\r\n      mockGateIOClient.makeRequest\r\n        .mockResolvedValueOnce([]) // Account balance check\r\n        .mockResolvedValueOnce(sampleOrderResponse); // Order placement\r\n      \r\n      const result = await orderManager.placeOrder(sampleOrderRequest);\r\n      \r\n      expect(result.success).toBe(true);\r\n      expect(result.order).toEqual(sampleOrderResponse);\r\n      expect(result.validationResult.isValid).toBe(true);\r\n      expect(mockGateIOClient.makeRequest).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          method: 'POST',\r\n          url: '/spot/orders',\r\n          data: sampleOrderRequest\r\n        })\r\n      );\r\n    });\r\n\r\n    it('should reject invalid orders', async () => {\r\n      const invalidOrder: OrderRequest = {\r\n        currency_pair: '',\r\n        type: 'limit',\r\n        side: 'buy',\r\n        amount: '0',\r\n        price: '50000',\r\n      };\r\n      \r\n      const result = await orderManager.placeOrder(invalidOrder);\r\n      \r\n      expect(result.success).toBe(false);\r\n      expect(result.validationResult.isValid).toBe(false);\r\n      expect(result.validationResult.errors).toContain('Currency pair is required');\r\n      expect(result.validationResult.errors).toContain('Order amount must be positive');\r\n    });\r\n\r\n    it('should reject orders exceeding maximum value', async () => {\r\n      const largeOrder: OrderRequest = {\r\n        ...sampleOrderRequest,\r\n        amount: '1', // 1 BTC at $50,000 = $50,000 (exceeds default $10,000 limit)\r\n      };\r\n      \r\n      const result = await orderManager.placeOrder(largeOrder);\r\n      \r\n      expect(result.success).toBe(false);\r\n      expect(result.validationResult.errors).toContain(\r\n        expect.stringContaining('Order value exceeds maximum')\r\n      );\r\n    });\r\n\r\n    it('should handle high-risk orders', async () => {\r\n      // Configure to enable risk checks\r\n      orderManager.updateConfig({ enableRiskChecks: true });\r\n      \r\n      const highRiskOrder: OrderRequest = {\r\n        ...sampleOrderRequest,\r\n        amount: '0.2', // $10,000 order (at limit)\r\n      };\r\n      \r\n      mockGateIOClient.makeRequest.mockResolvedValueOnce([]); // Balance check\r\n      \r\n      const result = await orderManager.placeOrder(highRiskOrder);\r\n      \r\n      // Should succeed but with warnings\r\n      expect(result.success).toBe(true);\r\n      expect(result.validationResult.warnings.length).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('should handle API errors during order placement', async () => {\r\n      mockGateIOClient.makeRequest\r\n        .mockResolvedValueOnce([]) // Balance check\r\n        .mockRejectedValueOnce(new Error('API error'));\r\n      \r\n      const result = await orderManager.placeOrder(sampleOrderRequest);\r\n      \r\n      expect(result.success).toBe(false);\r\n      expect(result.error).toBe('API error');\r\n    });\r\n\r\n    it('should perform post-execution validation', async () => {\r\n      const mismatchedResponse = {\r\n        ...sampleOrderResponse,\r\n        side: 'sell' as OrderSide, // Different from request\r\n      };\r\n      \r\n      mockGateIOClient.makeRequest\r\n        .mockResolvedValueOnce([]) // Balance check\r\n        .mockResolvedValueOnce(mismatchedResponse) // Order placement\r\n        .mockResolvedValueOnce(undefined); // Order cancellation\r\n      \r\n      const result = await orderManager.placeOrder(sampleOrderRequest);\r\n      \r\n      expect(result.success).toBe(true);\r\n      // Should attempt to cancel due to validation failure\r\n      expect(mockGateIOClient.makeRequest).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          method: 'DELETE',\r\n          url: `/spot/orders/${mismatchedResponse.id}`\r\n        })\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('Order Cancellation', () => {\r\n    beforeEach(async () => {\r\n      mockGateIOClient.makeRequest.mockResolvedValue([sampleOrderResponse]);\r\n      await orderManager.initialize();\r\n    });\r\n\r\n    it('should cancel order successfully', async () => {\r\n      mockGateIOClient.makeRequest.mockResolvedValueOnce(undefined);\r\n      \r\n      const result = await orderManager.cancelOrder('order-123', 'User requested');\r\n      \r\n      expect(result).toBe(true);\r\n      expect(mockGateIOClient.makeRequest).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          method: 'DELETE',\r\n          url: '/spot/orders/order-123',\r\n          data: { currency_pair: 'BTC_USDT' }\r\n        })\r\n      );\r\n    });\r\n\r\n    it('should handle cancellation of non-existent order', async () => {\r\n      const result = await orderManager.cancelOrder('non-existent', 'Test');\r\n      \r\n      expect(result).toBe(false);\r\n    });\r\n\r\n    it('should handle cancellation of already closed order', async () => {\r\n      const closedOrder = { ...sampleOrderResponse, status: 'closed' as OrderStatus };\r\n      mockGateIOClient.makeRequest.mockResolvedValue([closedOrder]);\r\n      await orderManager.initialize();\r\n      \r\n      const result = await orderManager.cancelOrder('order-123', 'Test');\r\n      \r\n      expect(result).toBe(false);\r\n    });\r\n\r\n    it('should handle API errors during cancellation', async () => {\r\n      mockGateIOClient.makeRequest.mockRejectedValueOnce(new Error('API error'));\r\n      \r\n      const result = await orderManager.cancelOrder('order-123', 'Test');\r\n      \r\n      expect(result).toBe(false);\r\n    });\r\n  });\r\n\r\n  describe('Order Modification', () => {\r\n    beforeEach(async () => {\r\n      mockGateIOClient.makeRequest.mockResolvedValue([sampleOrderResponse]);\r\n      await orderManager.initialize();\r\n    });\r\n\r\n    it('should modify order successfully', async () => {\r\n      const modifications = {\r\n        price: '51000',\r\n        amount: '0.002',\r\n      };\r\n      \r\n      const modifiedOrder = {\r\n        ...sampleOrderResponse,\r\n        price: '51000',\r\n        amount: '0.002',\r\n      };\r\n      \r\n      mockGateIOClient.makeRequest.mockResolvedValueOnce(modifiedOrder);\r\n      \r\n      const result = await orderManager.modifyOrder('order-123', modifications);\r\n      \r\n      expect(result).toEqual(modifiedOrder);\r\n      expect(mockGateIOClient.makeRequest).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          method: 'PATCH',\r\n          url: '/spot/orders/order-123',\r\n          data: expect.objectContaining({\r\n            currency_pair: 'BTC_USDT',\r\n            ...modifications\r\n          })\r\n        })\r\n      );\r\n    });\r\n\r\n    it('should reject invalid modifications', async () => {\r\n      const invalidModifications = {\r\n        price: '-100', // Negative price\r\n      };\r\n      \r\n      const result = await orderManager.modifyOrder('order-123', invalidModifications);\r\n      \r\n      expect(result).toBeNull();\r\n    });\r\n\r\n    it('should handle modification of non-modifiable order', async () => {\r\n      const closedOrder = { ...sampleOrderResponse, status: 'closed' as OrderStatus };\r\n      mockGateIOClient.makeRequest.mockResolvedValue([closedOrder]);\r\n      await orderManager.initialize();\r\n      \r\n      const result = await orderManager.modifyOrder('order-123', { price: '51000' });\r\n      \r\n      expect(result).toBeNull();\r\n    });\r\n  });\r\n\r\n  describe('Order Status Monitoring', () => {\r\n    beforeEach(async () => {\r\n      mockGateIOClient.makeRequest.mockResolvedValue([sampleOrderResponse]);\r\n      await orderManager.initialize();\r\n    });\r\n\r\n    it('should get order status successfully', async () => {\r\n      const updatedOrder = { ...sampleOrderResponse, status: 'closed' as OrderStatus };\r\n      mockGateIOClient.makeRequest.mockResolvedValueOnce(updatedOrder);\r\n      \r\n      const result = await orderManager.getOrderStatus('order-123');\r\n      \r\n      expect(result).toEqual(updatedOrder);\r\n      expect(mockGateIOClient.makeRequest).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          method: 'GET',\r\n          url: '/spot/orders/order-123'\r\n        })\r\n      );\r\n    });\r\n\r\n    it('should handle status change events', async () => {\r\n      const statusChangeSpy = jest.fn();\r\n      orderManager.on('orderStatusChanged', statusChangeSpy);\r\n      \r\n      const updatedOrder = { ...sampleOrderResponse, status: 'closed' as OrderStatus };\r\n      mockGateIOClient.makeRequest.mockResolvedValueOnce(updatedOrder);\r\n      \r\n      await orderManager.getOrderStatus('order-123');\r\n      \r\n      expect(statusChangeSpy).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          orderId: 'order-123',\r\n          oldStatus: 'open',\r\n          newStatus: 'closed'\r\n        })\r\n      );\r\n    });\r\n\r\n    it('should handle API errors during status check', async () => {\r\n      mockGateIOClient.makeRequest.mockRejectedValueOnce(new Error('API error'));\r\n      \r\n      const result = await orderManager.getOrderStatus('order-123');\r\n      \r\n      expect(result).toBeNull();\r\n    });\r\n  });\r\n\r\n  describe('Position Tracking', () => {\r\n    beforeEach(async () => {\r\n      mockGateIOClient.makeRequest.mockResolvedValue([]);\r\n      await orderManager.initialize();\r\n    });\r\n\r\n    it('should track positions correctly', async () => {\r\n      const position = orderManager.getPosition('BTC_USDT');\r\n      \r\n      expect(position).toBeDefined();\r\n      expect(position?.symbol).toBe('BTC_USDT');\r\n      expect(position?.side).toBe('neutral');\r\n      expect(position?.totalAmount).toBe(0);\r\n    });\r\n\r\n    it('should update position on order fill', async () => {\r\n      const filledOrder = {\r\n        ...sampleOrderResponse,\r\n        status: 'closed' as OrderStatus,\r\n        filled_total: '0.001',\r\n      };\r\n      \r\n      mockGateIOClient.makeRequest\r\n        .mockResolvedValueOnce([]) // Balance check\r\n        .mockResolvedValueOnce(filledOrder); // Order placement\r\n      \r\n      await orderManager.placeOrder(sampleOrderRequest);\r\n      \r\n      const position = orderManager.getPosition('BTC_USDT');\r\n      expect(position?.totalAmount).toBe(0.001);\r\n    });\r\n\r\n    it('should return all positions', () => {\r\n      const positions = orderManager.getAllPositions();\r\n      \r\n      expect(positions).toHaveLength(2); // BTC_USDT and ETH_USDT\r\n      expect(positions.map(p => p.symbol)).toContain('BTC_USDT');\r\n      expect(positions.map(p => p.symbol)).toContain('ETH_USDT');\r\n    });\r\n  });\r\n\r\n  describe('Emergency Stop', () => {\r\n    beforeEach(async () => {\r\n      const activeOrders = [\r\n        sampleOrderResponse,\r\n        { ...sampleOrderResponse, id: 'order-456' },\r\n      ];\r\n      mockGateIOClient.makeRequest.mockResolvedValue(activeOrders);\r\n      await orderManager.initialize();\r\n    });\r\n\r\n    it('should cancel all active orders during emergency stop', async () => {\r\n      mockGateIOClient.makeRequest\r\n        .mockResolvedValueOnce(undefined) // Cancel order-123\r\n        .mockResolvedValueOnce(undefined); // Cancel order-456\r\n      \r\n      const emergencyStopSpy = jest.fn();\r\n      orderManager.on('emergencyStop', emergencyStopSpy);\r\n      \r\n      const result = await orderManager.emergencyStop('Market crash detected');\r\n      \r\n      expect(result).toBe(true);\r\n      expect(mockGateIOClient.makeRequest).toHaveBeenCalledTimes(2);\r\n      expect(emergencyStopSpy).toHaveBeenCalledWith(\r\n        'Market crash detected',\r\n        2, // cancelled orders\r\n        2  // total orders\r\n      );\r\n    });\r\n\r\n    it('should handle partial cancellation failures', async () => {\r\n      mockGateIOClient.makeRequest\r\n        .mockResolvedValueOnce(undefined) // Cancel order-123 (success)\r\n        .mockRejectedValueOnce(new Error('API error')); // Cancel order-456 (fail)\r\n      \r\n      const result = await orderManager.emergencyStop('Test emergency');\r\n      \r\n      expect(result).toBe(false); // Not all orders cancelled\r\n    });\r\n  });\r\n\r\n  describe('Order History and Statistics', () => {\r\n    beforeEach(async () => {\r\n      mockGateIOClient.makeRequest.mockResolvedValue([]);\r\n      await orderManager.initialize();\r\n    });\r\n\r\n    it('should track order statistics', async () => {\r\n      mockGateIOClient.makeRequest\r\n        .mockResolvedValueOnce([]) // Balance check\r\n        .mockResolvedValueOnce(sampleOrderResponse); // Order placement\r\n      \r\n      await orderManager.placeOrder(sampleOrderRequest);\r\n      \r\n      const stats = orderManager.getOrderStats();\r\n      expect(stats.totalOrders).toBe(1);\r\n      expect(stats.successfulOrders).toBe(1);\r\n      expect(stats.failedOrders).toBe(0);\r\n      expect(stats.successRate).toBe(100);\r\n    });\r\n\r\n    it('should return order history', async () => {\r\n      mockGateIOClient.makeRequest\r\n        .mockResolvedValueOnce([]) // Balance check\r\n        .mockResolvedValueOnce(sampleOrderResponse); // Order placement\r\n      \r\n      await orderManager.placeOrder(sampleOrderRequest);\r\n      \r\n      const history = orderManager.getOrderHistory();\r\n      expect(history).toHaveLength(1);\r\n      expect(history[0].id).toBe('order-123');\r\n    });\r\n\r\n    it('should limit order history size', async () => {\r\n      const history = orderManager.getOrderHistory(5);\r\n      expect(history.length).toBeLessThanOrEqual(5);\r\n    });\r\n  });\r\n\r\n  describe('Configuration Management', () => {\r\n    beforeEach(async () => {\r\n      mockGateIOClient.makeRequest.mockResolvedValue([]);\r\n      await orderManager.initialize();\r\n    });\r\n\r\n    it('should return current configuration', () => {\r\n      const config = orderManager.getConfig();\r\n      \r\n      expect(config).toHaveProperty('enablePreValidation');\r\n      expect(config).toHaveProperty('maxOrderValue');\r\n      expect(config).toHaveProperty('enableRiskChecks');\r\n    });\r\n\r\n    it('should update configuration', () => {\r\n      const newConfig = {\r\n        maxOrderValue: 20000,\r\n        enableRiskChecks: false,\r\n      };\r\n      \r\n      orderManager.updateConfig(newConfig);\r\n      \r\n      const config = orderManager.getConfig();\r\n      expect(config.maxOrderValue).toBe(20000);\r\n      expect(config.enableRiskChecks).toBe(false);\r\n    });\r\n  });\r\n\r\n  describe('Error Handling', () => {\r\n    beforeEach(async () => {\r\n      mockGateIOClient.makeRequest.mockResolvedValue([]);\r\n      await orderManager.initialize();\r\n    });\r\n\r\n    it('should handle network errors gracefully', async () => {\r\n      mockGateIOClient.makeRequest.mockRejectedValue(new Error('Network error'));\r\n      \r\n      const result = await orderManager.placeOrder(sampleOrderRequest);\r\n      \r\n      expect(result.success).toBe(false);\r\n      expect(result.error).toBe('Network error');\r\n    });\r\n\r\n    it('should handle API rate limiting', async () => {\r\n      const rateLimitError = {\r\n        response: { status: 429 },\r\n        message: 'Rate limit exceeded'\r\n      };\r\n      \r\n      mockGateIOClient.makeRequest.mockRejectedValue(rateLimitError);\r\n      \r\n      const result = await orderManager.placeOrder(sampleOrderRequest);\r\n      \r\n      expect(result.success).toBe(false);\r\n      expect(result.error).toBe('Rate limit exceeded');\r\n    });\r\n\r\n    it('should handle invalid order responses', async () => {\r\n      const invalidResponse = {\r\n        ...sampleOrderResponse,\r\n        id: '', // Missing order ID\r\n      };\r\n      \r\n      mockGateIOClient.makeRequest\r\n        .mockResolvedValueOnce([]) // Balance check\r\n        .mockResolvedValueOnce(invalidResponse); // Order placement\r\n      \r\n      const result = await orderManager.placeOrder(sampleOrderRequest);\r\n      \r\n      expect(result.success).toBe(true); // Order placed but validation warnings\r\n      expect(result.validationResult.warnings.length).toBeGreaterThan(0);\r\n    });\r\n  });\r\n\r\n  describe('Shutdown', () => {\r\n    beforeEach(async () => {\r\n      mockGateIOClient.makeRequest.mockResolvedValue([]);\r\n      await orderManager.initialize();\r\n    });\r\n\r\n    it('should shutdown gracefully', async () => {\r\n      await orderManager.shutdown();\r\n      \r\n      expect(mockAuditService.logSecurityEvent).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          type: 'ORDER_MANAGER_SHUTDOWN',\r\n          severity: 'INFO'\r\n        })\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('Event Emission', () => {\r\n    beforeEach(async () => {\r\n      mockGateIOClient.makeRequest.mockResolvedValue([]);\r\n      await orderManager.initialize();\r\n    });\r\n\r\n    it('should emit orderPlaced event', async () => {\r\n      const orderPlacedSpy = jest.fn();\r\n      orderManager.on('orderPlaced', orderPlacedSpy);\r\n      \r\n      mockGateIOClient.makeRequest\r\n        .mockResolvedValueOnce([]) // Balance check\r\n        .mockResolvedValueOnce(sampleOrderResponse); // Order placement\r\n      \r\n      await orderManager.placeOrder(sampleOrderRequest);\r\n      \r\n      expect(orderPlacedSpy).toHaveBeenCalledWith(sampleOrderResponse);\r\n    });\r\n\r\n    it('should emit orderCancelled event', async () => {\r\n      // First place an order\r\n      mockGateIOClient.makeRequest.mockResolvedValue([sampleOrderResponse]);\r\n      await orderManager.initialize();\r\n      \r\n      const orderCancelledSpy = jest.fn();\r\n      orderManager.on('orderCancelled', orderCancelledSpy);\r\n      \r\n      mockGateIOClient.makeRequest.mockResolvedValueOnce(undefined);\r\n      \r\n      await orderManager.cancelOrder('order-123', 'Test cancellation');\r\n      \r\n      expect(orderCancelledSpy).toHaveBeenCalledWith(\r\n        expect.objectContaining({ id: 'order-123' }),\r\n        'Test cancellation'\r\n      );\r\n    });\r\n\r\n    it('should emit orderModified event', async () => {\r\n      // First place an order\r\n      mockGateIOClient.makeRequest.mockResolvedValue([sampleOrderResponse]);\r\n      await orderManager.initialize();\r\n      \r\n      const orderModifiedSpy = jest.fn();\r\n      orderManager.on('orderModified', orderModifiedSpy);\r\n      \r\n      const modifications = { price: '51000' };\r\n      const modifiedOrder = { ...sampleOrderResponse, price: '51000' };\r\n      \r\n      mockGateIOClient.makeRequest.mockResolvedValueOnce(modifiedOrder);\r\n      \r\n      await orderManager.modifyOrder('order-123', modifications);\r\n      \r\n      expect(orderModifiedSpy).toHaveBeenCalledWith(modifiedOrder, modifications);\r\n    });\r\n  });\r\n});"],"version":3}