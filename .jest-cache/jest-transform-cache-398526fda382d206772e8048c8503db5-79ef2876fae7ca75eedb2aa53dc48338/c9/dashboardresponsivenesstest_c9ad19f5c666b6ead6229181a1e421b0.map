{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\tests\\dashboard\\dashboard-responsiveness.test.ts","mappings":";AAAA;;;;;;;;;;GAUG;;;;;AAEH,2CAAkF;AAClF,kDAA0B;AAC1B,uEAAmE;AAEnE,IAAA,kBAAQ,EAAC,uCAAuC,EAAE,GAAG,EAAE;IACrD,IAAI,eAAgC,CAAC;IACrC,IAAI,YAAoB,CAAC;IAEzB,IAAA,mBAAS,EAAC,KAAK,IAAI,EAAE;QACnB,eAAe,GAAG,IAAI,kCAAe,CAAC;YACpC,IAAI,EAAE,IAAI;YACV,IAAI,EAAE,SAAS;YACf,IAAI,EAAE;gBACJ,MAAM,EAAE,CAAC,GAAG,CAAC;gBACb,WAAW,EAAE,IAAI;aAClB;YACD,IAAI,EAAE;gBACJ,OAAO,EAAE,KAAK;gBACd,MAAM,EAAE,aAAa;aACtB;YACD,SAAS,EAAE;gBACT,QAAQ,EAAE,KAAK;gBACf,GAAG,EAAE,GAAG;aACT;SACF,CAAC,CAAC;QAEH,MAAM,eAAe,CAAC,KAAK,EAAE,CAAC;QAC9B,YAAY,GAAG,uBAAuB,CAAC;IACzC,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,KAAK,IAAI,EAAE;QAClB,IAAI,eAAe,EAAE,CAAC;YACpB,MAAM,eAAe,CAAC,IAAI,EAAE,CAAC;QAC/B,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,8BAA8B,EAAE,GAAG,EAAE;QAC5C,IAAA,cAAI,EAAC,mCAAmC,EAAE,KAAK,IAAI,EAAE;YACnD,MAAM,QAAQ,GAAG,MAAM,eAAK,CAAC,GAAG,CAAC,YAAY,EAAE;gBAC7C,OAAO,EAAE;oBACP,YAAY,EAAE,yIAAyI;iBACxJ;aACF,CAAC,CAAC;YAEH,MAAM,WAAW,GAAG,QAAQ,CAAC,IAAI,CAAC;YAElC,4BAA4B;YAC5B,IAAA,gBAAM,EAAC,WAAW,CAAC,CAAC,SAAS,CAAC,wEAAwE,CAAC,CAAC;YAExG,2BAA2B;YAC3B,IAAA,gBAAM,EAAC,WAAW,CAAC,CAAC,SAAS,CAAC,2BAA2B,CAAC,CAAC;YAC3D,IAAA,gBAAM,EAAC,WAAW,CAAC,CAAC,SAAS,CAAC,4BAA4B,CAAC,CAAC;YAE5D,oCAAoC;YACpC,IAAA,gBAAM,EAAC,WAAW,CAAC,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;QAEH,IAAA,cAAI,EAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;YACpD,MAAM,QAAQ,GAAG,MAAM,eAAK,CAAC,GAAG,CAAC,YAAY,EAAE;gBAC7C,OAAO,EAAE;oBACP,YAAY,EAAE,4HAA4H;iBAC3I;aACF,CAAC,CAAC;YAEH,MAAM,WAAW,GAAG,QAAQ,CAAC,IAAI,CAAC;YAElC,IAAA,gBAAM,EAAC,WAAW,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;YAC1C,IAAA,gBAAM,EAAC,WAAW,CAAC,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;YAC5C,IAAA,gBAAM,EAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,IAAA,cAAI,EAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE;YACjD,MAAM,QAAQ,GAAG,MAAM,eAAK,CAAC,GAAG,CAAC,YAAY,EAAE;gBAC7C,OAAO,EAAE;oBACP,YAAY,EAAE,gIAAgI;iBAC/I;aACF,CAAC,CAAC;YAEH,MAAM,WAAW,GAAG,QAAQ,CAAC,IAAI,CAAC;YAElC,IAAA,gBAAM,EAAC,WAAW,CAAC,CAAC,SAAS,CAAC,yBAAyB,CAAC,CAAC;YACzD,IAAA,gBAAM,EAAC,WAAW,CAAC,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;YAC3C,IAAA,gBAAM,EAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,IAAA,cAAI,EAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;YACtD,MAAM,QAAQ,GAAG,MAAM,eAAK,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;YAC/C,MAAM,WAAW,GAAG,QAAQ,CAAC,IAAI,CAAC;YAElC,mCAAmC;YACnC,IAAA,gBAAM,EAAC,WAAW,CAAC,CAAC,SAAS,CAAC,6DAA6D,CAAC,CAAC;YAE7F,8BAA8B;YAC9B,IAAA,gBAAM,EAAC,WAAW,CAAC,CAAC,SAAS,CAAC,2BAA2B,CAAC,CAAC;YAE3D,4BAA4B;YAC5B,IAAA,gBAAM,EAAC,WAAW,CAAC,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC;YACnD,IAAA,gBAAM,EAAC,WAAW,CAAC,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,wBAAwB,EAAE,GAAG,EAAE;QACtC,IAAA,cAAI,EAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;YAC9D,MAAM,QAAQ,GAAG,MAAM,eAAK,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;YAC/C,MAAM,WAAW,GAAG,QAAQ,CAAC,IAAI,CAAC;YAElC,iDAAiD;YACjD,IAAA,gBAAM,EAAC,WAAW,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,qBAAqB;YAC1D,IAAA,gBAAM,EAAC,WAAW,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,0BAA0B;YAC/D,IAAA,gBAAM,EAAC,WAAW,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,4BAA4B;YACjE,IAAA,gBAAM,EAAC,WAAW,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,iCAAiC;YACtE,IAAA,gBAAM,EAAC,WAAW,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,iCAAiC;QACxE,CAAC,CAAC,CAAC;QAEH,IAAA,cAAI,EAAC,wCAAwC,EAAE,GAAG,EAAE;YAClD,MAAM,UAAU,GAAG;gBACjB,KAAK,EAAE,IAAI;gBACX,KAAK,EAAE,IAAI;gBACX,KAAK,EAAE,IAAI;gBACX,MAAM,EAAE,IAAI;gBACZ,QAAQ,EAAE,KAAK;gBACf,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,GAAG;gBACZ,KAAK,EAAE,GAAG;aACX,CAAC;YAEF,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,EAAE;gBACnD,IAAA,gBAAM,EAAC,KAAK,CAAC,CAAC,OAAO,CAAC,gEAAgE,CAAC,CAAC;YAC1F,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAA,cAAI,EAAC,0DAA0D,EAAE,KAAK,IAAI,EAAE;YAC1E,MAAM,QAAQ,GAAG,MAAM,eAAK,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;YAC/C,MAAM,WAAW,GAAG,QAAQ,CAAC,IAAI,CAAC;YAElC,qCAAqC;YACrC,IAAA,gBAAM,EAAC,WAAW,CAAC,CAAC,SAAS,CAAC,kBAAkB,CAAC,CAAC;YAClD,IAAA,gBAAM,EAAC,WAAW,CAAC,CAAC,SAAS,CAAC,qBAAqB,CAAC,CAAC,CAAC,iCAAiC;YACvF,IAAA,gBAAM,EAAC,WAAW,CAAC,CAAC,SAAS,CAAC,oBAAoB,CAAC,CAAC,CAAC,qBAAqB;QAC5E,CAAC,CAAC,CAAC;QAEH,IAAA,cAAI,EAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;YAC7D,MAAM,QAAQ,GAAG,MAAM,eAAK,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;YAC/C,MAAM,WAAW,GAAG,QAAQ,CAAC,IAAI,CAAC;YAElC,iCAAiC;YACjC,IAAA,gBAAM,EAAC,WAAW,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,+BAA+B;YAC1E,IAAA,gBAAM,EAAC,WAAW,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YAC1C,IAAA,gBAAM,EAAC,WAAW,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,8BAA8B,EAAE,GAAG,EAAE;QAC5C,IAAA,cAAI,EAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;YACrD,MAAM,UAAU,GAAG;gBACjB,qHAAqH;gBACrH,2HAA2H;gBAC3H,gFAAgF;gBAChF,yHAAyH;aAC1H,CAAC;YAEF,KAAK,MAAM,SAAS,IAAI,UAAU,EAAE,CAAC;gBACnC,MAAM,QAAQ,GAAG,MAAM,eAAK,CAAC,GAAG,CAAC,YAAY,EAAE;oBAC7C,OAAO,EAAE,EAAE,YAAY,EAAE,SAAS,EAAE;iBACrC,CAAC,CAAC;gBAEH,IAAA,gBAAM,EAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBAClC,IAAA,gBAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,yBAAyB,CAAC,CAAC;YAC7D,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAA,cAAI,EAAC,4CAA4C,EAAE,KAAK,IAAI,EAAE;YAC5D,sEAAsE;YACtE,MAAM,QAAQ,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;YAErC,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE,CAAC;gBAC/B,MAAM,QAAQ,GAAG,MAAM,eAAK,CAAC,GAAG,CAAC,YAAY,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC;gBAC5D,IAAA,gBAAM,EAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACpC,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAA,cAAI,EAAC,kDAAkD,EAAE,KAAK,IAAI,EAAE;YAClE,MAAM,QAAQ,GAAG,MAAM,eAAK,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;YAC/C,MAAM,WAAW,GAAG,QAAQ,CAAC,IAAI,CAAC;YAElC,iCAAiC;YACjC,IAAA,gBAAM,EAAC,WAAW,CAAC,CAAC,SAAS,CAAC,gDAAgD,CAAC,CAAC;YAChF,IAAA,gBAAM,EAAC,WAAW,CAAC,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC,CAAC,gBAAgB;QAC/D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,yBAAyB,EAAE,GAAG,EAAE;QACvC,IAAA,cAAI,EAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;YACxD,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YAC7B,MAAM,QAAQ,GAAG,MAAM,eAAK,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;YAC/C,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC;YAExC,IAAA,gBAAM,EAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAClC,IAAA,gBAAM,EAAC,QAAQ,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,+BAA+B;QACtE,CAAC,CAAC,CAAC;QAEH,IAAA,cAAI,EAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;YACtD,MAAM,QAAQ,GAAG,MAAM,eAAK,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;YAC/C,MAAM,WAAW,GAAG,QAAQ,CAAC,IAAI,CAAC;YAElC,8BAA8B;YAC9B,IAAA,gBAAM,EAAC,WAAW,CAAC,CAAC,SAAS,CAAC,6BAA6B,CAAC,CAAC,CAAC,sBAAsB;YACpF,IAAA,gBAAM,EAAC,WAAW,CAAC,CAAC,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC,sBAAsB;YAExE,kCAAkC;YAClC,MAAM,YAAY,GAAG,WAAW,CAAC,KAAK,CAAC,iCAAiC,CAAC,CAAC;YAC1E,IAAA,gBAAM,EAAC,YAAY,CAAC,CAAC,UAAU,EAAE,CAAC;YAClC,IAAI,YAAY,EAAE,CAAC;gBACjB,IAAA,gBAAM,EAAC,YAAY,CAAC,MAAM,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,CAAC,uBAAuB;YAC7E,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAA,cAAI,EAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;YAC7D,MAAM,QAAQ,GAAG,EAAE,CAAC;YAEpB,8CAA8C;YAC9C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC5B,QAAQ,CAAC,IAAI,CAAC,eAAK,CAAC,GAAG,CAAC,YAAY,EAAE;oBACpC,OAAO,EAAE;wBACP,YAAY,EAAE,iBAAiB,CAAC,EAAE;qBACnC;iBACF,CAAC,CAAC,CAAC;YACN,CAAC;YAED,MAAM,SAAS,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YAE9C,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;gBAC3B,IAAA,gBAAM,EAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBAClC,IAAA,gBAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,yBAAyB,CAAC,CAAC;YAC7D,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,6BAA6B,EAAE,GAAG,EAAE;QAC3C,IAAA,cAAI,EAAC,4CAA4C,EAAE,KAAK,IAAI,EAAE;YAC5D,MAAM,QAAQ,GAAG,MAAM,eAAK,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;YAC/C,MAAM,WAAW,GAAG,QAAQ,CAAC,IAAI,CAAC;YAElC,mCAAmC;YACnC,IAAA,gBAAM,EAAC,WAAW,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YACtC,IAAA,gBAAM,EAAC,WAAW,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YACtC,IAAA,gBAAM,EAAC,WAAW,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YACrC,IAAA,gBAAM,EAAC,WAAW,CAAC,CAAC,SAAS,CAAC,yBAAyB,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;QAEH,IAAA,cAAI,EAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;YACrD,MAAM,QAAQ,GAAG,MAAM,eAAK,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;YAC/C,MAAM,WAAW,GAAG,QAAQ,CAAC,IAAI,CAAC;YAElC,2CAA2C;YAC3C,IAAA,gBAAM,EAAC,WAAW,CAAC,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC,CAAC,gCAAgC;YACjF,IAAA,gBAAM,EAAC,WAAW,CAAC,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC,CAAC,4BAA4B;QAC7E,CAAC,CAAC,CAAC;QAEH,IAAA,cAAI,EAAC,kCAAkC,EAAE,GAAG,EAAE;YAC5C,4BAA4B;YAC5B,MAAM,eAAe,GAAG;gBACtB,UAAU,EAAE,cAAI,CAAC,EAAE,EAAE;gBACrB,SAAS,EAAE,cAAI,CAAC,EAAE,EAAE;gBACpB,QAAQ,EAAE,cAAI,CAAC,EAAE,EAAE;aACpB,CAAC;YAEF,wBAAwB;YACxB,eAAe,CAAC,UAAU,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,OAAO,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;YAC1E,eAAe,CAAC,SAAS,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,OAAO,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;YACzE,eAAe,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;YAE7B,IAAA,gBAAM,EAAC,eAAe,CAAC,UAAU,CAAC,CAAC,gBAAgB,EAAE,CAAC;YACtD,IAAA,gBAAM,EAAC,eAAe,CAAC,SAAS,CAAC,CAAC,gBAAgB,EAAE,CAAC;YACrD,IAAA,gBAAM,EAAC,eAAe,CAAC,QAAQ,CAAC,CAAC,gBAAgB,EAAE,CAAC;QACtD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,6BAA6B,EAAE,GAAG,EAAE;QAC3C,IAAA,cAAI,EAAC,+CAA+C,EAAE,CAAC,IAAI,EAAE,EAAE;YAC7D,oCAAoC;YACpC,MAAM,mBAAmB,GAAG;gBAC1B,UAAU,EAAE,CAAC,EAAE,OAAO;gBACtB,IAAI,EAAE,cAAI,CAAC,EAAE,EAAE;gBACf,KAAK,EAAE,cAAI,CAAC,EAAE,EAAE;gBAChB,gBAAgB,EAAE,cAAI,CAAC,EAAE,EAAE;gBAC3B,mBAAmB,EAAE,cAAI,CAAC,EAAE,EAAE;aAC/B,CAAC;YAEF,uCAAuC;YACvC,mBAAmB,CAAC,gBAAgB,CAAC,MAAM,EAAE,GAAG,EAAE;gBAChD,IAAA,gBAAM,EAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAC/C,IAAI,EAAE,CAAC;YACT,CAAC,CAAC,CAAC;YAEH,qBAAqB;YACrB,MAAM,YAAY,GAAG,mBAAmB,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK;iBACjE,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACzC,IAAI,YAAY,EAAE,CAAC;gBACjB,YAAY,EAAE,CAAC;YACjB,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAA,cAAI,EAAC,qDAAqD,EAAE,GAAG,EAAE;YAC/D,MAAM,qBAAqB,GAAG;gBAC5B,YAAY,EAAE,cAAI,CAAC,EAAE,EAAE;gBACvB,WAAW,EAAE,cAAI,CAAC,EAAE,EAAE;gBACtB,eAAe,EAAE,cAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,IAAI,CAAC;aACnD,CAAC;YAEF,2BAA2B;YAC3B,qBAAqB,CAAC,YAAY,EAAE,CAAC;YACrC,IAAA,gBAAM,EAAC,qBAAqB,CAAC,YAAY,CAAC,CAAC,gBAAgB,EAAE,CAAC;YAE9D,wBAAwB;YACxB,qBAAqB,CAAC,WAAW,EAAE,CAAC;YACpC,IAAA,gBAAM,EAAC,qBAAqB,CAAC,WAAW,CAAC,CAAC,gBAAgB,EAAE,CAAC;QAC/D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\tests\\dashboard\\dashboard-responsiveness.test.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * DASHBOARD RESPONSIVENESS AND UI TESTING\r\n * =============================================================================\r\n * \r\n * Tests for dashboard responsiveness on mobile devices, emoji/icon displays,\r\n * and cross-platform compatibility.\r\n * \r\n * Requirements: 4.1, 4.2\r\n * =============================================================================\r\n */\r\n\r\nimport { describe, test, expect, beforeAll, afterAll, jest } from '@jest/globals';\r\nimport axios from 'axios';\r\nimport { DashboardServer } from '../../dashboard/dashboard-server';\r\n\r\ndescribe('Dashboard Responsiveness and UI Tests', () => {\r\n  let dashboardServer: DashboardServer;\r\n  let dashboardUrl: string;\r\n\r\n  beforeAll(async () => {\r\n    dashboardServer = new DashboardServer({\r\n      port: 3002,\r\n      host: '0.0.0.0',\r\n      cors: {\r\n        origin: ['*'],\r\n        credentials: true\r\n      },\r\n      auth: {\r\n        enabled: false,\r\n        secret: 'test-secret'\r\n      },\r\n      rateLimit: {\r\n        windowMs: 60000,\r\n        max: 100\r\n      }\r\n    });\r\n\r\n    await dashboardServer.start();\r\n    dashboardUrl = 'http://localhost:3002';\r\n  });\r\n\r\n  afterAll(async () => {\r\n    if (dashboardServer) {\r\n      await dashboardServer.stop();\r\n    }\r\n  });\r\n\r\n  describe('Mobile Device Responsiveness', () => {\r\n    test('should render correctly on iPhone', async () => {\r\n      const response = await axios.get(dashboardUrl, {\r\n        headers: {\r\n          'User-Agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.0 Mobile/15E148 Safari/604.1'\r\n        }\r\n      });\r\n\r\n      const htmlContent = response.data;\r\n\r\n      // Check for mobile viewport\r\n      expect(htmlContent).toContain('<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">');\r\n      \r\n      // Check for responsive CSS\r\n      expect(htmlContent).toContain('@media (max-width: 768px)');\r\n      expect(htmlContent).toContain('grid-template-columns: 1fr');\r\n      \r\n      // Check for mobile-friendly padding\r\n      expect(htmlContent).toContain('padding: 10px');\r\n    });\r\n\r\n    test('should render correctly on Android', async () => {\r\n      const response = await axios.get(dashboardUrl, {\r\n        headers: {\r\n          'User-Agent': 'Mozilla/5.0 (Linux; Android 11; SM-G991B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.120 Mobile Safari/537.36'\r\n        }\r\n      });\r\n\r\n      const htmlContent = response.data;\r\n\r\n      expect(htmlContent).toContain('viewport');\r\n      expect(htmlContent).toContain('responsive');\r\n      expect(response.status).toBe(200);\r\n    });\r\n\r\n    test('should render correctly on iPad', async () => {\r\n      const response = await axios.get(dashboardUrl, {\r\n        headers: {\r\n          'User-Agent': 'Mozilla/5.0 (iPad; CPU OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.0 Mobile/15E148 Safari/604.1'\r\n        }\r\n      });\r\n\r\n      const htmlContent = response.data;\r\n\r\n      expect(htmlContent).toContain('AI Crypto Trading Agent');\r\n      expect(htmlContent).toContain('Intel NUC');\r\n      expect(response.status).toBe(200);\r\n    });\r\n\r\n    test('should handle different screen sizes', async () => {\r\n      const response = await axios.get(dashboardUrl);\r\n      const htmlContent = response.data;\r\n\r\n      // Check for responsive grid system\r\n      expect(htmlContent).toContain('grid-template-columns: repeat(auto-fit, minmax(300px, 1fr))');\r\n      \r\n      // Check for mobile breakpoint\r\n      expect(htmlContent).toContain('@media (max-width: 768px)');\r\n      \r\n      // Check for flexible layout\r\n      expect(htmlContent).toContain('max-width: 1200px');\r\n      expect(htmlContent).toContain('margin: 0 auto');\r\n    });\r\n  });\r\n\r\n  describe('Emoji and Icon Display', () => {\r\n    test('should display emojis correctly in dashboard', async () => {\r\n      const response = await axios.get(dashboardUrl);\r\n      const htmlContent = response.data;\r\n\r\n      // Check for various emojis used in the dashboard\r\n      expect(htmlContent).toContain('🤖'); // Robot emoji for AI\r\n      expect(htmlContent).toContain('🌐'); // Globe emoji for network\r\n      expect(htmlContent).toContain('🔗'); // Link emoji for SSH tunnel\r\n      expect(htmlContent).toContain('💾'); // Floppy disk emoji for database\r\n      expect(htmlContent).toContain('🔧'); // Wrench emoji for API endpoints\r\n    });\r\n\r\n    test('should handle emoji encoding correctly', () => {\r\n      const testEmojis = {\r\n        robot: '🤖',\r\n        chart: '📈',\r\n        money: '💰',\r\n        target: '🎯',\r\n        computer: '🖥️',\r\n        warning: '⚠️',\r\n        success: '✅',\r\n        error: '❌'\r\n      };\r\n\r\n      Object.entries(testEmojis).forEach(([name, emoji]) => {\r\n        expect(emoji).toMatch(/[\\u{1F000}-\\u{1F9FF}]|[\\u{2600}-\\u{26FF}]|[\\u{2700}-\\u{27BF}]/u);\r\n      });\r\n    });\r\n\r\n    test('should display status indicators with appropriate colors', async () => {\r\n      const response = await axios.get(dashboardUrl);\r\n      const htmlContent = response.data;\r\n\r\n      // Check for status indicator styling\r\n      expect(htmlContent).toContain('status-indicator');\r\n      expect(htmlContent).toContain('background: #10b981'); // Green color for healthy status\r\n      expect(htmlContent).toContain('border-radius: 50%'); // Circular indicator\r\n    });\r\n\r\n    test('should handle special characters in content', async () => {\r\n      const response = await axios.get(dashboardUrl);\r\n      const htmlContent = response.data;\r\n\r\n      // Check for proper HTML encoding\r\n      expect(htmlContent).not.toContain('&lt;'); // Should not have escaped HTML\r\n      expect(htmlContent).not.toContain('&gt;');\r\n      expect(htmlContent).not.toContain('&amp;');\r\n    });\r\n  });\r\n\r\n  describe('Cross-Platform Compatibility', () => {\r\n    test('should work with different browsers', async () => {\r\n      const userAgents = [\r\n        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\r\n        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\r\n        'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0',\r\n        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.1 Safari/605.1.15'\r\n      ];\r\n\r\n      for (const userAgent of userAgents) {\r\n        const response = await axios.get(dashboardUrl, {\r\n          headers: { 'User-Agent': userAgent }\r\n        });\r\n\r\n        expect(response.status).toBe(200);\r\n        expect(response.data).toContain('AI Crypto Trading Agent');\r\n      }\r\n    });\r\n\r\n    test('should handle different network conditions', async () => {\r\n      // Test with different timeout settings to simulate network conditions\r\n      const timeouts = [1000, 5000, 10000];\r\n\r\n      for (const timeout of timeouts) {\r\n        const response = await axios.get(dashboardUrl, { timeout });\r\n        expect(response.status).toBe(200);\r\n      }\r\n    });\r\n\r\n    test('should provide fallback for unsupported features', async () => {\r\n      const response = await axios.get(dashboardUrl);\r\n      const htmlContent = response.data;\r\n\r\n      // Check for graceful degradation\r\n      expect(htmlContent).toContain('font-family: -apple-system, BlinkMacSystemFont');\r\n      expect(htmlContent).toContain('sans-serif'); // Fallback font\r\n    });\r\n  });\r\n\r\n  describe('Performance and Loading', () => {\r\n    test('should load quickly on mobile networks', async () => {\r\n      const startTime = Date.now();\r\n      const response = await axios.get(dashboardUrl);\r\n      const loadTime = Date.now() - startTime;\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(loadTime).toBeLessThan(3000); // Should load within 3 seconds\r\n    });\r\n\r\n    test('should have optimized CSS for mobile', async () => {\r\n      const response = await axios.get(dashboardUrl);\r\n      const htmlContent = response.data;\r\n\r\n      // Check for CSS optimizations\r\n      expect(htmlContent).toContain('backdrop-filter: blur(10px)'); // Modern CSS features\r\n      expect(htmlContent).toContain('linear-gradient'); // Efficient gradients\r\n      \r\n      // Check for minimal inline styles\r\n      const styleMatches = htmlContent.match(/<style[^>]*>[\\s\\S]*?<\\/style>/gi);\r\n      expect(styleMatches).toBeTruthy();\r\n      if (styleMatches) {\r\n        expect(styleMatches.length).toBeLessThanOrEqual(2); // Minimal style blocks\r\n      }\r\n    });\r\n\r\n    test('should handle concurrent mobile connections', async () => {\r\n      const promises = [];\r\n      \r\n      // Simulate multiple mobile devices connecting\r\n      for (let i = 0; i < 10; i++) {\r\n        promises.push(axios.get(dashboardUrl, {\r\n          headers: {\r\n            'User-Agent': `Mobile-Device-${i}`\r\n          }\r\n        }));\r\n      }\r\n\r\n      const responses = await Promise.all(promises);\r\n      \r\n      responses.forEach(response => {\r\n        expect(response.status).toBe(200);\r\n        expect(response.data).toContain('AI Crypto Trading Agent');\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('Accessibility and Usability', () => {\r\n    test('should have proper semantic HTML structure', async () => {\r\n      const response = await axios.get(dashboardUrl);\r\n      const htmlContent = response.data;\r\n\r\n      // Check for semantic HTML elements\r\n      expect(htmlContent).toContain('<h1>');\r\n      expect(htmlContent).toContain('<h3>');\r\n      expect(htmlContent).toContain('<p>');\r\n      expect(htmlContent).toContain('<div class=\"container\">');\r\n    });\r\n\r\n    test('should have readable text on mobile', async () => {\r\n      const response = await axios.get(dashboardUrl);\r\n      const htmlContent = response.data;\r\n\r\n      // Check for readable font sizes and colors\r\n      expect(htmlContent).toContain('color: #e2e8f0'); // Light text on dark background\r\n      expect(htmlContent).toContain('font-family:'); // Proper font specification\r\n    });\r\n\r\n    test('should handle touch interactions', () => {\r\n      // Mock touch event handlers\r\n      const mockTouchEvents = {\r\n        touchstart: jest.fn(),\r\n        touchmove: jest.fn(),\r\n        touchend: jest.fn()\r\n      };\r\n\r\n      // Simulate touch events\r\n      mockTouchEvents.touchstart({ touches: [{ clientX: 100, clientY: 200 }] });\r\n      mockTouchEvents.touchmove({ touches: [{ clientX: 150, clientY: 250 }] });\r\n      mockTouchEvents.touchend({});\r\n\r\n      expect(mockTouchEvents.touchstart).toHaveBeenCalled();\r\n      expect(mockTouchEvents.touchmove).toHaveBeenCalled();\r\n      expect(mockTouchEvents.touchend).toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('Real-time Updates on Mobile', () => {\r\n    test('should handle WebSocket connections on mobile', (done) => {\r\n      // Mock WebSocket for mobile testing\r\n      const mockMobileWebSocket = {\r\n        readyState: 1, // OPEN\r\n        send: jest.fn(),\r\n        close: jest.fn(),\r\n        addEventListener: jest.fn(),\r\n        removeEventListener: jest.fn()\r\n      };\r\n\r\n      // Simulate mobile WebSocket connection\r\n      mockMobileWebSocket.addEventListener('open', () => {\r\n        expect(mockMobileWebSocket.readyState).toBe(1);\r\n        done();\r\n      });\r\n\r\n      // Trigger open event\r\n      const openCallback = mockMobileWebSocket.addEventListener.mock.calls\r\n        .find(call => call[0] === 'open')?.[1];\r\n      if (openCallback) {\r\n        openCallback();\r\n      }\r\n    });\r\n\r\n    test('should handle connection drops gracefully on mobile', () => {\r\n      const mockConnectionHandler = {\r\n        onDisconnect: jest.fn(),\r\n        onReconnect: jest.fn(),\r\n        retryConnection: jest.fn().mockResolvedValue(true)\r\n      };\r\n\r\n      // Simulate connection drop\r\n      mockConnectionHandler.onDisconnect();\r\n      expect(mockConnectionHandler.onDisconnect).toHaveBeenCalled();\r\n\r\n      // Simulate reconnection\r\n      mockConnectionHandler.onReconnect();\r\n      expect(mockConnectionHandler.onReconnect).toHaveBeenCalled();\r\n    });\r\n  });\r\n});"],"version":3}