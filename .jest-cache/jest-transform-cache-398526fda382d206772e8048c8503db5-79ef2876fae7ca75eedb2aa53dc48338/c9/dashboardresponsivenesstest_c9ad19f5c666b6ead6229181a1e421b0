61ca4917845d1f00bae4418309106616
"use strict";
/**
 * =============================================================================
 * DASHBOARD RESPONSIVENESS AND UI TESTING
 * =============================================================================
 *
 * Tests for dashboard responsiveness on mobile devices, emoji/icon displays,
 * and cross-platform compatibility.
 *
 * Requirements: 4.1, 4.2
 * =============================================================================
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const axios_1 = __importDefault(require("axios"));
const dashboard_server_1 = require("../../dashboard/dashboard-server");
(0, globals_1.describe)('Dashboard Responsiveness and UI Tests', () => {
    let dashboardServer;
    let dashboardUrl;
    (0, globals_1.beforeAll)(async () => {
        dashboardServer = new dashboard_server_1.DashboardServer({
            port: 3002,
            host: '0.0.0.0',
            cors: {
                origin: ['*'],
                credentials: true
            },
            auth: {
                enabled: false,
                secret: 'test-secret'
            },
            rateLimit: {
                windowMs: 60000,
                max: 100
            }
        });
        await dashboardServer.start();
        dashboardUrl = 'http://localhost:3002';
    });
    (0, globals_1.afterAll)(async () => {
        if (dashboardServer) {
            await dashboardServer.stop();
        }
    });
    (0, globals_1.describe)('Mobile Device Responsiveness', () => {
        (0, globals_1.test)('should render correctly on iPhone', async () => {
            const response = await axios_1.default.get(dashboardUrl, {
                headers: {
                    'User-Agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.0 Mobile/15E148 Safari/604.1'
                }
            });
            const htmlContent = response.data;
            // Check for mobile viewport
            (0, globals_1.expect)(htmlContent).toContain('<meta name="viewport" content="width=device-width, initial-scale=1.0">');
            // Check for responsive CSS
            (0, globals_1.expect)(htmlContent).toContain('@media (max-width: 768px)');
            (0, globals_1.expect)(htmlContent).toContain('grid-template-columns: 1fr');
            // Check for mobile-friendly padding
            (0, globals_1.expect)(htmlContent).toContain('padding: 10px');
        });
        (0, globals_1.test)('should render correctly on Android', async () => {
            const response = await axios_1.default.get(dashboardUrl, {
                headers: {
                    'User-Agent': 'Mozilla/5.0 (Linux; Android 11; SM-G991B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.120 Mobile Safari/537.36'
                }
            });
            const htmlContent = response.data;
            (0, globals_1.expect)(htmlContent).toContain('viewport');
            (0, globals_1.expect)(htmlContent).toContain('responsive');
            (0, globals_1.expect)(response.status).toBe(200);
        });
        (0, globals_1.test)('should render correctly on iPad', async () => {
            const response = await axios_1.default.get(dashboardUrl, {
                headers: {
                    'User-Agent': 'Mozilla/5.0 (iPad; CPU OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.0 Mobile/15E148 Safari/604.1'
                }
            });
            const htmlContent = response.data;
            (0, globals_1.expect)(htmlContent).toContain('AI Crypto Trading Agent');
            (0, globals_1.expect)(htmlContent).toContain('Intel NUC');
            (0, globals_1.expect)(response.status).toBe(200);
        });
        (0, globals_1.test)('should handle different screen sizes', async () => {
            const response = await axios_1.default.get(dashboardUrl);
            const htmlContent = response.data;
            // Check for responsive grid system
            (0, globals_1.expect)(htmlContent).toContain('grid-template-columns: repeat(auto-fit, minmax(300px, 1fr))');
            // Check for mobile breakpoint
            (0, globals_1.expect)(htmlContent).toContain('@media (max-width: 768px)');
            // Check for flexible layout
            (0, globals_1.expect)(htmlContent).toContain('max-width: 1200px');
            (0, globals_1.expect)(htmlContent).toContain('margin: 0 auto');
        });
    });
    (0, globals_1.describe)('Emoji and Icon Display', () => {
        (0, globals_1.test)('should display emojis correctly in dashboard', async () => {
            const response = await axios_1.default.get(dashboardUrl);
            const htmlContent = response.data;
            // Check for various emojis used in the dashboard
            (0, globals_1.expect)(htmlContent).toContain('🤖'); // Robot emoji for AI
            (0, globals_1.expect)(htmlContent).toContain('🌐'); // Globe emoji for network
            (0, globals_1.expect)(htmlContent).toContain('🔗'); // Link emoji for SSH tunnel
            (0, globals_1.expect)(htmlContent).toContain('💾'); // Floppy disk emoji for database
            (0, globals_1.expect)(htmlContent).toContain('🔧'); // Wrench emoji for API endpoints
        });
        (0, globals_1.test)('should handle emoji encoding correctly', () => {
            const testEmojis = {
                robot: '🤖',
                chart: '📈',
                money: '💰',
                target: '🎯',
                computer: '🖥️',
                warning: '⚠️',
                success: '✅',
                error: '❌'
            };
            Object.entries(testEmojis).forEach(([name, emoji]) => {
                (0, globals_1.expect)(emoji).toMatch(/[\u{1F000}-\u{1F9FF}]|[\u{2600}-\u{26FF}]|[\u{2700}-\u{27BF}]/u);
            });
        });
        (0, globals_1.test)('should display status indicators with appropriate colors', async () => {
            const response = await axios_1.default.get(dashboardUrl);
            const htmlContent = response.data;
            // Check for status indicator styling
            (0, globals_1.expect)(htmlContent).toContain('status-indicator');
            (0, globals_1.expect)(htmlContent).toContain('background: #10b981'); // Green color for healthy status
            (0, globals_1.expect)(htmlContent).toContain('border-radius: 50%'); // Circular indicator
        });
        (0, globals_1.test)('should handle special characters in content', async () => {
            const response = await axios_1.default.get(dashboardUrl);
            const htmlContent = response.data;
            // Check for proper HTML encoding
            (0, globals_1.expect)(htmlContent).not.toContain('&lt;'); // Should not have escaped HTML
            (0, globals_1.expect)(htmlContent).not.toContain('&gt;');
            (0, globals_1.expect)(htmlContent).not.toContain('&amp;');
        });
    });
    (0, globals_1.describe)('Cross-Platform Compatibility', () => {
        (0, globals_1.test)('should work with different browsers', async () => {
            const userAgents = [
                'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
                'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
                'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0',
                'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.1 Safari/605.1.15'
            ];
            for (const userAgent of userAgents) {
                const response = await axios_1.default.get(dashboardUrl, {
                    headers: { 'User-Agent': userAgent }
                });
                (0, globals_1.expect)(response.status).toBe(200);
                (0, globals_1.expect)(response.data).toContain('AI Crypto Trading Agent');
            }
        });
        (0, globals_1.test)('should handle different network conditions', async () => {
            // Test with different timeout settings to simulate network conditions
            const timeouts = [1000, 5000, 10000];
            for (const timeout of timeouts) {
                const response = await axios_1.default.get(dashboardUrl, { timeout });
                (0, globals_1.expect)(response.status).toBe(200);
            }
        });
        (0, globals_1.test)('should provide fallback for unsupported features', async () => {
            const response = await axios_1.default.get(dashboardUrl);
            const htmlContent = response.data;
            // Check for graceful degradation
            (0, globals_1.expect)(htmlContent).toContain('font-family: -apple-system, BlinkMacSystemFont');
            (0, globals_1.expect)(htmlContent).toContain('sans-serif'); // Fallback font
        });
    });
    (0, globals_1.describe)('Performance and Loading', () => {
        (0, globals_1.test)('should load quickly on mobile networks', async () => {
            const startTime = Date.now();
            const response = await axios_1.default.get(dashboardUrl);
            const loadTime = Date.now() - startTime;
            (0, globals_1.expect)(response.status).toBe(200);
            (0, globals_1.expect)(loadTime).toBeLessThan(3000); // Should load within 3 seconds
        });
        (0, globals_1.test)('should have optimized CSS for mobile', async () => {
            const response = await axios_1.default.get(dashboardUrl);
            const htmlContent = response.data;
            // Check for CSS optimizations
            (0, globals_1.expect)(htmlContent).toContain('backdrop-filter: blur(10px)'); // Modern CSS features
            (0, globals_1.expect)(htmlContent).toContain('linear-gradient'); // Efficient gradients
            // Check for minimal inline styles
            const styleMatches = htmlContent.match(/<style[^>]*>[\s\S]*?<\/style>/gi);
            (0, globals_1.expect)(styleMatches).toBeTruthy();
            if (styleMatches) {
                (0, globals_1.expect)(styleMatches.length).toBeLessThanOrEqual(2); // Minimal style blocks
            }
        });
        (0, globals_1.test)('should handle concurrent mobile connections', async () => {
            const promises = [];
            // Simulate multiple mobile devices connecting
            for (let i = 0; i < 10; i++) {
                promises.push(axios_1.default.get(dashboardUrl, {
                    headers: {
                        'User-Agent': `Mobile-Device-${i}`
                    }
                }));
            }
            const responses = await Promise.all(promises);
            responses.forEach(response => {
                (0, globals_1.expect)(response.status).toBe(200);
                (0, globals_1.expect)(response.data).toContain('AI Crypto Trading Agent');
            });
        });
    });
    (0, globals_1.describe)('Accessibility and Usability', () => {
        (0, globals_1.test)('should have proper semantic HTML structure', async () => {
            const response = await axios_1.default.get(dashboardUrl);
            const htmlContent = response.data;
            // Check for semantic HTML elements
            (0, globals_1.expect)(htmlContent).toContain('<h1>');
            (0, globals_1.expect)(htmlContent).toContain('<h3>');
            (0, globals_1.expect)(htmlContent).toContain('<p>');
            (0, globals_1.expect)(htmlContent).toContain('<div class="container">');
        });
        (0, globals_1.test)('should have readable text on mobile', async () => {
            const response = await axios_1.default.get(dashboardUrl);
            const htmlContent = response.data;
            // Check for readable font sizes and colors
            (0, globals_1.expect)(htmlContent).toContain('color: #e2e8f0'); // Light text on dark background
            (0, globals_1.expect)(htmlContent).toContain('font-family:'); // Proper font specification
        });
        (0, globals_1.test)('should handle touch interactions', () => {
            // Mock touch event handlers
            const mockTouchEvents = {
                touchstart: globals_1.jest.fn(),
                touchmove: globals_1.jest.fn(),
                touchend: globals_1.jest.fn()
            };
            // Simulate touch events
            mockTouchEvents.touchstart({ touches: [{ clientX: 100, clientY: 200 }] });
            mockTouchEvents.touchmove({ touches: [{ clientX: 150, clientY: 250 }] });
            mockTouchEvents.touchend({});
            (0, globals_1.expect)(mockTouchEvents.touchstart).toHaveBeenCalled();
            (0, globals_1.expect)(mockTouchEvents.touchmove).toHaveBeenCalled();
            (0, globals_1.expect)(mockTouchEvents.touchend).toHaveBeenCalled();
        });
    });
    (0, globals_1.describe)('Real-time Updates on Mobile', () => {
        (0, globals_1.test)('should handle WebSocket connections on mobile', (done) => {
            // Mock WebSocket for mobile testing
            const mockMobileWebSocket = {
                readyState: 1, // OPEN
                send: globals_1.jest.fn(),
                close: globals_1.jest.fn(),
                addEventListener: globals_1.jest.fn(),
                removeEventListener: globals_1.jest.fn()
            };
            // Simulate mobile WebSocket connection
            mockMobileWebSocket.addEventListener('open', () => {
                (0, globals_1.expect)(mockMobileWebSocket.readyState).toBe(1);
                done();
            });
            // Trigger open event
            const openCallback = mockMobileWebSocket.addEventListener.mock.calls
                .find(call => call[0] === 'open')?.[1];
            if (openCallback) {
                openCallback();
            }
        });
        (0, globals_1.test)('should handle connection drops gracefully on mobile', () => {
            const mockConnectionHandler = {
                onDisconnect: globals_1.jest.fn(),
                onReconnect: globals_1.jest.fn(),
                retryConnection: globals_1.jest.fn().mockResolvedValue(true)
            };
            // Simulate connection drop
            mockConnectionHandler.onDisconnect();
            (0, globals_1.expect)(mockConnectionHandler.onDisconnect).toHaveBeenCalled();
            // Simulate reconnection
            mockConnectionHandler.onReconnect();
            (0, globals_1.expect)(mockConnectionHandler.onReconnect).toHaveBeenCalled();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,