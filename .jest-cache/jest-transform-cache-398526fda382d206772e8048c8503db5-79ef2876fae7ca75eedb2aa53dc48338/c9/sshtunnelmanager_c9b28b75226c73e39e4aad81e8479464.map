{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\ssh-tunnel-manager.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\ssh-tunnel-manager.ts"],"sourcesContent":["import { EventEmitter } from 'events';\r\nimport { spawn, ChildProcess } from 'child_process';\r\nimport { promises as fs, constants as fsConstants } from 'fs';\r\nimport { join } from 'path';\r\nimport { Logger } from '../core/logging/logger';\r\nimport { EncryptionService } from '../security/encryption-service';\r\n\r\n/**\r\n * SSH Tunnel Configuration interface\r\n * Defines all parameters needed to establish a secure SSH tunnel to Oracle Free Tier\r\n */\r\nexport interface TunnelConfig {\r\n  /** Tunnel name identifier */\r\n  name: string;\r\n  /** Remote host to tunnel to */\r\n  remoteHost: string;\r\n  /** Remote port to tunnel to */\r\n  remotePort: number;\r\n  /** Local port for tunnel */\r\n  localPort: number;\r\n  /** SSH host (Oracle Free Tier IP) */\r\n  sshHost: string;\r\n  /** SSH port (default: 22) */\r\n  sshPort: number;\r\n  /** SSH username for Oracle instance */\r\n  sshUsername: string;\r\n  /** Path to private key file */\r\n  privateKeyPath?: string;\r\n  /** Private key content */\r\n  privateKey?: string;\r\n  /** Maximum retry attempts */\r\n  maxRetries: number;\r\n  /** Retry delay in milliseconds */\r\n  retryDelay: number;\r\n  /** Health check interval in milliseconds */\r\n  healthCheckInterval: number;\r\n  /** Enable SSH compression */\r\n  compression: boolean;\r\n  /** Enable SSH keep-alive */\r\n  keepAlive: boolean;\r\n}\r\n\r\n/**\r\n * SSH Tunnel Connection interface\r\n * Represents an active SSH tunnel connection with state management\r\n */\r\nexport interface TunnelConnection {\r\n  /** Unique connection identifier */\r\n  id: string;\r\n  /** Connection configuration */\r\n  config: TunnelConfig;\r\n  /** SSH process handle */\r\n  process: ChildProcess | null;\r\n  /** Connection state */\r\n  state: TunnelState;\r\n  /** Connection establishment timestamp */\r\n  connectedAt: Date | null;\r\n  /** Last activity timestamp */\r\n  lastActivity: Date;\r\n  /** Connection statistics */\r\n  stats: TunnelStats;\r\n}\r\n\r\n/**\r\n * Tunnel connection states\r\n */\r\nexport enum TunnelState {\r\n  DISCONNECTED = 'DISCONNECTED',\r\n  CONNECTING = 'CONNECTING',\r\n  CONNECTED = 'CONNECTED',\r\n  RECONNECTING = 'RECONNECTING',\r\n  FAILED = 'FAILED',\r\n  TERMINATED = 'TERMINATED'\r\n}\r\n\r\n/**\r\n * Tunnel connection statistics\r\n */\r\nexport interface TunnelStats {\r\n  /** Total bytes transferred */\r\n  bytesTransferred: number;\r\n  /** Connection uptime in milliseconds */\r\n  uptime: number;\r\n  /** Number of reconnection attempts */\r\n  reconnectAttempts: number;\r\n  /** Last error message */\r\n  lastError: string | null;\r\n  /** Connection quality score (0-100) */\r\n  qualityScore: number;\r\n}\r\n\r\n/**\r\n * SSH Tunnel Manager\r\n * Manages SSH tunnel connections to Oracle Free Tier with authentication,\r\n * state management, and connection validation\r\n */\r\nexport class SSHTunnelManager extends EventEmitter {\r\n  private logger: Logger;\r\n  private connections: Map<string, TunnelConnection>;\r\n\r\n  constructor() {\r\n    super();\r\n    this.logger = new Logger('SSHTunnelManager');\r\n    this.connections = new Map();\r\n    \r\n    this.logger.info('SSH Tunnel Manager initialized');\r\n  }\r\n\r\n  /**\r\n   * Establish SSH tunnel connection\r\n   * @param config - Tunnel configuration parameters\r\n   * @returns Promise resolving to tunnel connection\r\n   */\r\n  async establishTunnel(config: TunnelConfig): Promise<TunnelConnection> {\r\n    // Validate configuration\r\n    await this.validateTunnelConfig(config);\r\n    \r\n    // Generate unique connection ID\r\n    const connectionId = this.generateConnectionId();\r\n    \r\n    // Create connection object\r\n    const connection: TunnelConnection = {\r\n      id: connectionId,\r\n      config: config,\r\n      process: null,\r\n      state: TunnelState.DISCONNECTED,\r\n      connectedAt: null,\r\n      lastActivity: new Date(),\r\n      stats: {\r\n        bytesTransferred: 0,\r\n        uptime: 0,\r\n        reconnectAttempts: 0,\r\n        lastError: null,\r\n        qualityScore: 0\r\n      }\r\n    };\r\n\r\n    // Store connection\r\n    this.connections.set(connectionId, connection);\r\n    \r\n    try {\r\n      // Update state to connecting\r\n      this.updateConnectionState(connection, TunnelState.CONNECTING);\r\n      \r\n      // Validate private key exists and is accessible\r\n      if (config.privateKeyPath) {\r\n        await this.validatePrivateKey(config.privateKeyPath);\r\n      }\r\n      \r\n      // Build SSH command arguments\r\n      const sshArgs = this.buildSSHArguments(config);\r\n      \r\n      this.logger.info(`Establishing SSH tunnel: ${connectionId}`, {\r\n        remoteHost: config.remoteHost,\r\n        localPort: config.localPort,\r\n        remotePort: config.remotePort\r\n      });\r\n\r\n      // Spawn SSH process\r\n      const sshProcess = spawn('ssh', sshArgs, {\r\n        stdio: ['pipe', 'pipe', 'pipe'],\r\n        detached: false\r\n      });\r\n\r\n      connection.process = sshProcess;\r\n\r\n      // Set up process event handlers\r\n      this.setupProcessHandlers(connection);\r\n\r\n      // Wait for connection establishment\r\n      await this.waitForConnection(connection);\r\n      \r\n      // Update connection state\r\n      this.updateConnectionState(connection, TunnelState.CONNECTED);\r\n      connection.connectedAt = new Date();\r\n      \r\n      this.logger.info(`SSH tunnel established successfully: ${connectionId}`);\r\n      this.emit('tunnelConnected', connection);\r\n\r\n      return connection;\r\n\r\n    } catch (error) {\r\n      this.logger.error(`Failed to establish SSH tunnel: ${connectionId}`, error);\r\n      this.updateConnectionState(connection, TunnelState.FAILED);\r\n      connection.stats.lastError = error instanceof Error ? error.message : String(error);\r\n      this.emit('tunnelError', connection, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Disconnect SSH tunnel\r\n   * Gracefully terminates the SSH connection\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @returns Promise resolving when disconnected\r\n   */\r\n  async disconnectTunnel(connectionId: string): Promise<void> {\r\n    const connection = this.connections.get(connectionId);\r\n    if (!connection) {\r\n      throw new Error(`Connection not found: ${connectionId}`);\r\n    }\r\n\r\n    if (connection.state === TunnelState.DISCONNECTED) {\r\n      this.logger.warn(`Tunnel already disconnected: ${connectionId}`);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      this.logger.info(`Disconnecting SSH tunnel: ${connectionId}`);\r\n      \r\n      if (connection.process) {\r\n        // Graceful termination\r\n        connection.process.kill('SIGTERM');\r\n        \r\n        // Wait for process to exit\r\n        await new Promise<void>((resolve) => {\r\n          const timeout = setTimeout(() => {\r\n            // Force kill if graceful termination fails\r\n            if (connection.process && !connection.process.killed) {\r\n              connection.process.kill('SIGKILL');\r\n            }\r\n            resolve();\r\n          }, 5000);\r\n\r\n          connection.process!.on('exit', () => {\r\n            clearTimeout(timeout);\r\n            resolve();\r\n          });\r\n        });\r\n      }\r\n\r\n      this.updateConnectionState(connection, TunnelState.DISCONNECTED);\r\n      connection.process = null;\r\n      connection.connectedAt = null;\r\n      \r\n      this.logger.info(`SSH tunnel disconnected: ${connectionId}`);\r\n      this.emit('tunnelDisconnected', connection);\r\n\r\n    } catch (error) {\r\n      this.logger.error(`Error disconnecting SSH tunnel: ${connectionId}`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get connection by ID\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @returns Tunnel connection or undefined\r\n   */\r\n  getConnection(connectionId: string): TunnelConnection | undefined {\r\n    return this.connections.get(connectionId);\r\n  }\r\n\r\n  /**\r\n   * Get all connections\r\n   * \r\n   * @returns Array of all tunnel connections\r\n   */\r\n  getAllConnections(): TunnelConnection[] {\r\n    return Array.from(this.connections.values());\r\n  }\r\n\r\n  /**\r\n   * Get active connections\r\n   * \r\n   * @returns Array of connected tunnel connections\r\n   */\r\n  getActiveConnections(): TunnelConnection[] {\r\n    return this.getAllConnections().filter(\r\n      conn => conn.state === TunnelState.CONNECTED\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Validate tunnel configuration\r\n   * Ensures all required parameters are present and valid\r\n   * \r\n   * @param config - Tunnel configuration to validate\r\n   */\r\n  private async validateTunnelConfig(config: TunnelConfig): Promise<void> {\r\n    const requiredFields: (keyof TunnelConfig)[] = [\r\n      'name', 'remoteHost', 'sshHost', 'sshUsername', 'localPort', 'remotePort'\r\n    ];\r\n\r\n    for (const field of requiredFields) {\r\n      if (!config[field]) {\r\n        throw new Error(`Missing required tunnel configuration: ${field}`);\r\n      }\r\n    }\r\n\r\n    // Validate IP address format for SSH host\r\n    if (!this.isValidIP(config.sshHost)) {\r\n      throw new Error(`Invalid SSH host IP address: ${config.sshHost}`);\r\n    }\r\n\r\n    // Validate port ranges\r\n    if (config.localPort < 1 || config.localPort > 65535) {\r\n      throw new Error(`Invalid local port: ${config.localPort}`);\r\n    }\r\n\r\n    if (config.remotePort < 1 || config.remotePort > 65535) {\r\n      throw new Error(`Invalid remote port: ${config.remotePort}`);\r\n    }\r\n\r\n    this.logger.debug('Tunnel configuration validated successfully');\r\n  }\r\n\r\n  /**\r\n   * Validate private key file exists and is accessible\r\n   * \r\n   * @param privateKeyPath - Path to private key file\r\n   */\r\n  private async validatePrivateKey(privateKeyPath: string): Promise<void> {\r\n    try {\r\n      const stats = await fs.stat(privateKeyPath);\r\n      \r\n      if (!stats.isFile()) {\r\n        throw new Error(`Private key path is not a file: ${privateKeyPath}`);\r\n      }\r\n\r\n      // Check file permissions (should be readable by owner only)\r\n      await fs.access(privateKeyPath, fsConstants.R_OK);\r\n      \r\n      this.logger.debug(`Private key validated: ${privateKeyPath}`);\r\n      \r\n    } catch (error) {\r\n      throw new Error(`Private key validation failed: ${error instanceof Error ? error.message : String(error)}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Build SSH command arguments\r\n   * \r\n   * @param config - Tunnel configuration\r\n   * @returns Array of SSH command arguments\r\n   */\r\n  private buildSSHArguments(config: TunnelConfig): string[] {\r\n    const args = [\r\n      '-N', // No remote command execution\r\n      '-T', // Disable pseudo-terminal allocation\r\n      '-o', 'StrictHostKeyChecking=no', // Accept new host keys\r\n      '-o', 'UserKnownHostsFile=/dev/null', // Don't save host keys\r\n      '-o', 'ConnectTimeout=30',\r\n      '-o', 'ServerAliveInterval=60',\r\n      '-o', 'ServerAliveCountMax=3',\r\n      '-p', config.sshPort.toString(), // SSH port\r\n      '-L', `${config.localPort}:${config.remoteHost}:${config.remotePort}`, // Local port forwarding\r\n    ];\r\n\r\n    // Add private key\r\n    if (config.privateKeyPath) {\r\n      args.push('-i', config.privateKeyPath);\r\n    }\r\n\r\n    // Add compression if enabled\r\n    if (config.compression) {\r\n      args.push('-C');\r\n    }\r\n\r\n    // Add keep-alive if enabled\r\n    if (config.keepAlive) {\r\n      args.push('-o', 'TCPKeepAlive=yes');\r\n    }\r\n\r\n    // Add connection target\r\n    args.push(`${config.sshUsername}@${config.sshHost}`);\r\n\r\n    return args;\r\n  }\r\n\r\n  /**\r\n   * Set up SSH process event handlers\r\n   * \r\n   * @param connection - Tunnel connection\r\n   */\r\n  private setupProcessHandlers(connection: TunnelConnection): void {\r\n    if (!connection.process) return;\r\n\r\n    const process = connection.process;\r\n\r\n    process.stdout?.on('data', (data) => {\r\n      this.logger.debug(`SSH stdout [${connection.id}]: ${data.toString().trim()}`);\r\n    });\r\n\r\n    process.stderr?.on('data', (data) => {\r\n      const message = data.toString().trim();\r\n      this.logger.debug(`SSH stderr [${connection.id}]: ${message}`);\r\n      \r\n      // Check for connection success indicators\r\n      if (message.includes('Local forwarding listening')) {\r\n        this.emit('tunnelReady', connection);\r\n      }\r\n    });\r\n\r\n    process.on('exit', (code, signal) => {\r\n      this.logger.info(`SSH process exited [${connection.id}]`, { code, signal });\r\n      \r\n      if (connection.state === TunnelState.CONNECTED) {\r\n        this.updateConnectionState(connection, TunnelState.DISCONNECTED);\r\n        this.emit('tunnelDisconnected', connection);\r\n      }\r\n      \r\n      connection.process = null;\r\n    });\r\n\r\n    process.on('error', (error) => {\r\n      this.logger.error(`SSH process error [${connection.id}]`, error);\r\n      this.updateConnectionState(connection, TunnelState.FAILED);\r\n      connection.stats.lastError = error.message;\r\n      this.emit('tunnelError', connection, error);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Wait for SSH tunnel connection to be established\r\n   * \r\n   * @param connection - Tunnel connection\r\n   * @param timeoutMs - Timeout in milliseconds\r\n   */\r\n  private async waitForConnection(connection: TunnelConnection, timeoutMs: number = 30000): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      const timeout = setTimeout(() => {\r\n        reject(new Error(`SSH tunnel connection timeout: ${connection.id}`));\r\n      }, timeoutMs);\r\n\r\n      const onReady = () => {\r\n        clearTimeout(timeout);\r\n        this.removeListener('tunnelError', onError);\r\n        resolve();\r\n      };\r\n\r\n      const onError = (conn: TunnelConnection, error: Error) => {\r\n        if (conn.id === connection.id) {\r\n          clearTimeout(timeout);\r\n          this.removeListener('tunnelReady', onReady);\r\n          reject(error);\r\n        }\r\n      };\r\n\r\n      this.once('tunnelReady', onReady);\r\n      this.once('tunnelError', onError);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update connection state and emit events\r\n   * \r\n   * @param connection - Tunnel connection\r\n   * @param newState - New connection state\r\n   */\r\n  private updateConnectionState(connection: TunnelConnection, newState: TunnelState): void {\r\n    const oldState = connection.state;\r\n    connection.state = newState;\r\n    connection.lastActivity = new Date();\r\n\r\n    this.logger.debug(`Tunnel state changed [${connection.id}]: ${oldState} -> ${newState}`);\r\n    this.emit('stateChanged', connection, oldState, newState);\r\n  }\r\n\r\n  /**\r\n   * Generate unique connection ID\r\n   * \r\n   * @returns Unique connection identifier\r\n   */\r\n  private generateConnectionId(): string {\r\n    return `tunnel_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  /**\r\n   * Validate IP address format\r\n   * \r\n   * @param ip - IP address to validate\r\n   * @returns True if valid IP address\r\n   */\r\n  private isValidIP(ip: string): boolean {\r\n    const ipRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;\r\n    return ipRegex.test(ip);\r\n  }\r\n\r\n  /**\r\n   * Get connection status for all tunnels\r\n   */\r\n  async getConnectionStatus(): Promise<any> {\r\n    const connections = Array.from(this.connections.values());\r\n    return {\r\n      totalConnections: connections.length,\r\n      activeConnections: connections.filter(c => c.state === TunnelState.CONNECTED).length,\r\n      connections: connections.map(c => ({\r\n        id: c.id,\r\n        name: c.config.name,\r\n        state: c.state,\r\n        connectedAt: c.connectedAt,\r\n        lastActivity: c.lastActivity\r\n      }))\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Cleanup all connections on shutdown\r\n   */\r\n  async cleanup(): Promise<void> {\r\n    this.logger.info('Cleaning up SSH tunnel connections');\r\n    \r\n    const disconnectPromises = Array.from(this.connections.keys()).map(\r\n      connectionId => this.disconnectTunnel(connectionId).catch(error => \r\n        this.logger.error(`Error disconnecting tunnel ${connectionId}`, error)\r\n      )\r\n    );\r\n\r\n    await Promise.all(disconnectPromises);\r\n    this.connections.clear();\r\n    \r\n    this.logger.info('SSH tunnel cleanup completed');\r\n  }\r\n}\r\n"],"version":3}