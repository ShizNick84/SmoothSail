a54517be251916dfa7e1ef4900f69910
"use strict";

/* istanbul ignore next */
function cov_2pgvlnd7u9() {
  var path = "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\ssh-tunnel-manager.ts";
  var hash = "899df721c3bbba1009eebcb47089cfe28b3b0473";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\ssh-tunnel-manager.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 56
        }
      },
      "2": {
        start: {
          line: 4,
          column: 17
        },
        end: {
          line: 4,
          column: 34
        }
      },
      "3": {
        start: {
          line: 5,
          column: 24
        },
        end: {
          line: 5,
          column: 48
        }
      },
      "4": {
        start: {
          line: 6,
          column: 13
        },
        end: {
          line: 6,
          column: 26
        }
      },
      "5": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 60
        }
      },
      "6": {
        start: {
          line: 12,
          column: 4
        },
        end: {
          line: 12,
          column: 49
        }
      },
      "7": {
        start: {
          line: 13,
          column: 4
        },
        end: {
          line: 13,
          column: 45
        }
      },
      "8": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 14,
          column: 43
        }
      },
      "9": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 15,
          column: 49
        }
      },
      "10": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 16,
          column: 37
        }
      },
      "11": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 17,
          column: 45
        }
      },
      "12": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 16
        }
      },
      "13": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 29
        }
      },
      "14": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 51
        }
      },
      "15": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 37
        }
      },
      "16": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 43,
          column: 10
        }
      },
      "17": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 44,
          column: 59
        }
      },
      "18": {
        start: {
          line: 54,
          column: 27
        },
        end: {
          line: 54,
          column: 63
        }
      },
      "19": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 56,
          column: 52
        }
      },
      "20": {
        start: {
          line: 58,
          column: 29
        },
        end: {
          line: 58,
          column: 56
        }
      },
      "21": {
        start: {
          line: 60,
          column: 27
        },
        end: {
          line: 74,
          column: 9
        }
      },
      "22": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 76,
          column: 55
        }
      },
      "23": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 81,
          column: 11
        }
      },
      "24": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 82,
          column: 26
        }
      },
      "25": {
        start: {
          line: 92,
          column: 27
        },
        end: {
          line: 92,
          column: 61
        }
      },
      "26": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 95,
          column: 9
        }
      },
      "27": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 94,
          column: 69
        }
      },
      "28": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 99,
          column: 9
        }
      },
      "29": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 97,
          column: 74
        }
      },
      "30": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 98,
          column: 19
        }
      },
      "31": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 133,
          column: 9
        }
      },
      "32": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 102,
          column: 75
        }
      },
      "33": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 104,
          column: 76
        }
      },
      "34": {
        start: {
          line: 106,
          column: 28
        },
        end: {
          line: 106,
          column: 69
        }
      },
      "35": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 110,
          column: 15
        }
      },
      "36": {
        start: {
          line: 109,
          column: 44
        },
        end: {
          line: 109,
          column: 73
        }
      },
      "37": {
        start: {
          line: 112,
          column: 31
        },
        end: {
          line: 115,
          column: 14
        }
      },
      "38": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 116,
          column: 44
        }
      },
      "39": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 118,
          column: 50
        }
      },
      "40": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 120,
          column: 53
        }
      },
      "41": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 122,
          column: 74
        }
      },
      "42": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 123,
          column: 48
        }
      },
      "43": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 124,
          column: 85
        }
      },
      "44": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 125,
          column: 53
        }
      },
      "45": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 128,
          column: 88
        }
      },
      "46": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 129,
          column: 71
        }
      },
      "47": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 130,
          column: 96
        }
      },
      "48": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 131,
          column: 56
        }
      },
      "49": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 132,
          column: 24
        }
      },
      "50": {
        start: {
          line: 143,
          column: 27
        },
        end: {
          line: 143,
          column: 61
        }
      },
      "51": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 146,
          column: 9
        }
      },
      "52": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 145,
          column: 69
        }
      },
      "53": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 150,
          column: 9
        }
      },
      "54": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 148,
          column: 77
        }
      },
      "55": {
        start: {
          line: 149,
          column: 12
        },
        end: {
          line: 149,
          column: 19
        }
      },
      "56": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 180,
          column: 9
        }
      },
      "57": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 152,
          column: 74
        }
      },
      "58": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 170,
          column: 13
        }
      },
      "59": {
        start: {
          line: 155,
          column: 16
        },
        end: {
          line: 155,
          column: 51
        }
      },
      "60": {
        start: {
          line: 157,
          column: 16
        },
        end: {
          line: 169,
          column: 19
        }
      },
      "61": {
        start: {
          line: 158,
          column: 36
        },
        end: {
          line: 164,
          column: 28
        }
      },
      "62": {
        start: {
          line: 160,
          column: 24
        },
        end: {
          line: 162,
          column: 25
        }
      },
      "63": {
        start: {
          line: 161,
          column: 28
        },
        end: {
          line: 161,
          column: 63
        }
      },
      "64": {
        start: {
          line: 163,
          column: 24
        },
        end: {
          line: 163,
          column: 34
        }
      },
      "65": {
        start: {
          line: 165,
          column: 20
        },
        end: {
          line: 168,
          column: 23
        }
      },
      "66": {
        start: {
          line: 166,
          column: 24
        },
        end: {
          line: 166,
          column: 46
        }
      },
      "67": {
        start: {
          line: 167,
          column: 24
        },
        end: {
          line: 167,
          column: 34
        }
      },
      "68": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 171,
          column: 77
        }
      },
      "69": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 172,
          column: 38
        }
      },
      "70": {
        start: {
          line: 173,
          column: 12
        },
        end: {
          line: 173,
          column: 42
        }
      },
      "71": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 174,
          column: 73
        }
      },
      "72": {
        start: {
          line: 175,
          column: 12
        },
        end: {
          line: 175,
          column: 56
        }
      },
      "73": {
        start: {
          line: 178,
          column: 12
        },
        end: {
          line: 178,
          column: 88
        }
      },
      "74": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 179,
          column: 24
        }
      },
      "75": {
        start: {
          line: 189,
          column: 8
        },
        end: {
          line: 189,
          column: 50
        }
      },
      "76": {
        start: {
          line: 197,
          column: 8
        },
        end: {
          line: 197,
          column: 53
        }
      },
      "77": {
        start: {
          line: 205,
          column: 8
        },
        end: {
          line: 205,
          column: 93
        }
      },
      "78": {
        start: {
          line: 205,
          column: 55
        },
        end: {
          line: 205,
          column: 91
        }
      },
      "79": {
        start: {
          line: 214,
          column: 31
        },
        end: {
          line: 216,
          column: 9
        }
      },
      "80": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 221,
          column: 9
        }
      },
      "81": {
        start: {
          line: 218,
          column: 12
        },
        end: {
          line: 220,
          column: 13
        }
      },
      "82": {
        start: {
          line: 219,
          column: 16
        },
        end: {
          line: 219,
          column: 83
        }
      },
      "83": {
        start: {
          line: 223,
          column: 8
        },
        end: {
          line: 225,
          column: 9
        }
      },
      "84": {
        start: {
          line: 224,
          column: 12
        },
        end: {
          line: 224,
          column: 77
        }
      },
      "85": {
        start: {
          line: 227,
          column: 8
        },
        end: {
          line: 229,
          column: 9
        }
      },
      "86": {
        start: {
          line: 228,
          column: 12
        },
        end: {
          line: 228,
          column: 71
        }
      },
      "87": {
        start: {
          line: 230,
          column: 8
        },
        end: {
          line: 232,
          column: 9
        }
      },
      "88": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 231,
          column: 73
        }
      },
      "89": {
        start: {
          line: 233,
          column: 8
        },
        end: {
          line: 233,
          column: 73
        }
      },
      "90": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 252,
          column: 9
        }
      },
      "91": {
        start: {
          line: 242,
          column: 26
        },
        end: {
          line: 242,
          column: 66
        }
      },
      "92": {
        start: {
          line: 243,
          column: 12
        },
        end: {
          line: 245,
          column: 13
        }
      },
      "93": {
        start: {
          line: 244,
          column: 16
        },
        end: {
          line: 244,
          column: 85
        }
      },
      "94": {
        start: {
          line: 247,
          column: 12
        },
        end: {
          line: 247,
          column: 85
        }
      },
      "95": {
        start: {
          line: 248,
          column: 12
        },
        end: {
          line: 248,
          column: 74
        }
      },
      "96": {
        start: {
          line: 251,
          column: 12
        },
        end: {
          line: 251,
          column: 120
        }
      },
      "97": {
        start: {
          line: 261,
          column: 21
        },
        end: {
          line: 272,
          column: 9
        }
      },
      "98": {
        start: {
          line: 274,
          column: 8
        },
        end: {
          line: 276,
          column: 9
        }
      },
      "99": {
        start: {
          line: 275,
          column: 12
        },
        end: {
          line: 275,
          column: 28
        }
      },
      "100": {
        start: {
          line: 278,
          column: 8
        },
        end: {
          line: 280,
          column: 9
        }
      },
      "101": {
        start: {
          line: 279,
          column: 12
        },
        end: {
          line: 279,
          column: 48
        }
      },
      "102": {
        start: {
          line: 282,
          column: 8
        },
        end: {
          line: 282,
          column: 59
        }
      },
      "103": {
        start: {
          line: 283,
          column: 8
        },
        end: {
          line: 283,
          column: 20
        }
      },
      "104": {
        start: {
          line: 291,
          column: 8
        },
        end: {
          line: 292,
          column: 19
        }
      },
      "105": {
        start: {
          line: 292,
          column: 12
        },
        end: {
          line: 292,
          column: 19
        }
      },
      "106": {
        start: {
          line: 293,
          column: 24
        },
        end: {
          line: 293,
          column: 42
        }
      },
      "107": {
        start: {
          line: 294,
          column: 8
        },
        end: {
          line: 296,
          column: 11
        }
      },
      "108": {
        start: {
          line: 295,
          column: 12
        },
        end: {
          line: 295,
          column: 90
        }
      },
      "109": {
        start: {
          line: 297,
          column: 8
        },
        end: {
          line: 304,
          column: 11
        }
      },
      "110": {
        start: {
          line: 298,
          column: 28
        },
        end: {
          line: 298,
          column: 50
        }
      },
      "111": {
        start: {
          line: 299,
          column: 12
        },
        end: {
          line: 299,
          column: 75
        }
      },
      "112": {
        start: {
          line: 301,
          column: 12
        },
        end: {
          line: 303,
          column: 13
        }
      },
      "113": {
        start: {
          line: 302,
          column: 16
        },
        end: {
          line: 302,
          column: 53
        }
      },
      "114": {
        start: {
          line: 305,
          column: 8
        },
        end: {
          line: 312,
          column: 11
        }
      },
      "115": {
        start: {
          line: 306,
          column: 12
        },
        end: {
          line: 306,
          column: 88
        }
      },
      "116": {
        start: {
          line: 307,
          column: 12
        },
        end: {
          line: 310,
          column: 13
        }
      },
      "117": {
        start: {
          line: 308,
          column: 16
        },
        end: {
          line: 308,
          column: 81
        }
      },
      "118": {
        start: {
          line: 309,
          column: 16
        },
        end: {
          line: 309,
          column: 60
        }
      },
      "119": {
        start: {
          line: 311,
          column: 12
        },
        end: {
          line: 311,
          column: 38
        }
      },
      "120": {
        start: {
          line: 313,
          column: 8
        },
        end: {
          line: 318,
          column: 11
        }
      },
      "121": {
        start: {
          line: 314,
          column: 12
        },
        end: {
          line: 314,
          column: 77
        }
      },
      "122": {
        start: {
          line: 315,
          column: 12
        },
        end: {
          line: 315,
          column: 71
        }
      },
      "123": {
        start: {
          line: 316,
          column: 12
        },
        end: {
          line: 316,
          column: 55
        }
      },
      "124": {
        start: {
          line: 317,
          column: 12
        },
        end: {
          line: 317,
          column: 56
        }
      },
      "125": {
        start: {
          line: 327,
          column: 8
        },
        end: {
          line: 345,
          column: 11
        }
      },
      "126": {
        start: {
          line: 328,
          column: 28
        },
        end: {
          line: 330,
          column: 25
        }
      },
      "127": {
        start: {
          line: 329,
          column: 16
        },
        end: {
          line: 329,
          column: 85
        }
      },
      "128": {
        start: {
          line: 331,
          column: 28
        },
        end: {
          line: 335,
          column: 13
        }
      },
      "129": {
        start: {
          line: 332,
          column: 16
        },
        end: {
          line: 332,
          column: 38
        }
      },
      "130": {
        start: {
          line: 333,
          column: 16
        },
        end: {
          line: 333,
          column: 60
        }
      },
      "131": {
        start: {
          line: 334,
          column: 16
        },
        end: {
          line: 334,
          column: 26
        }
      },
      "132": {
        start: {
          line: 336,
          column: 28
        },
        end: {
          line: 342,
          column: 13
        }
      },
      "133": {
        start: {
          line: 337,
          column: 16
        },
        end: {
          line: 341,
          column: 17
        }
      },
      "134": {
        start: {
          line: 338,
          column: 20
        },
        end: {
          line: 338,
          column: 42
        }
      },
      "135": {
        start: {
          line: 339,
          column: 20
        },
        end: {
          line: 339,
          column: 64
        }
      },
      "136": {
        start: {
          line: 340,
          column: 20
        },
        end: {
          line: 340,
          column: 34
        }
      },
      "137": {
        start: {
          line: 343,
          column: 12
        },
        end: {
          line: 343,
          column: 46
        }
      },
      "138": {
        start: {
          line: 344,
          column: 12
        },
        end: {
          line: 344,
          column: 46
        }
      },
      "139": {
        start: {
          line: 354,
          column: 25
        },
        end: {
          line: 354,
          column: 41
        }
      },
      "140": {
        start: {
          line: 355,
          column: 8
        },
        end: {
          line: 355,
          column: 36
        }
      },
      "141": {
        start: {
          line: 356,
          column: 8
        },
        end: {
          line: 356,
          column: 45
        }
      },
      "142": {
        start: {
          line: 357,
          column: 8
        },
        end: {
          line: 357,
          column: 97
        }
      },
      "143": {
        start: {
          line: 358,
          column: 8
        },
        end: {
          line: 358,
          column: 66
        }
      },
      "144": {
        start: {
          line: 366,
          column: 8
        },
        end: {
          line: 366,
          column: 81
        }
      },
      "145": {
        start: {
          line: 375,
          column: 24
        },
        end: {
          line: 375,
          column: 117
        }
      },
      "146": {
        start: {
          line: 376,
          column: 8
        },
        end: {
          line: 376,
          column: 32
        }
      },
      "147": {
        start: {
          line: 382,
          column: 8
        },
        end: {
          line: 382,
          column: 63
        }
      },
      "148": {
        start: {
          line: 383,
          column: 35
        },
        end: {
          line: 383,
          column: 214
        }
      },
      "149": {
        start: {
          line: 383,
          column: 91
        },
        end: {
          line: 383,
          column: 213
        }
      },
      "150": {
        start: {
          line: 383,
          column: 142
        },
        end: {
          line: 383,
          column: 212
        }
      },
      "151": {
        start: {
          line: 384,
          column: 8
        },
        end: {
          line: 384,
          column: 46
        }
      },
      "152": {
        start: {
          line: 385,
          column: 8
        },
        end: {
          line: 385,
          column: 33
        }
      },
      "153": {
        start: {
          line: 386,
          column: 8
        },
        end: {
          line: 386,
          column: 57
        }
      },
      "154": {
        start: {
          line: 389,
          column: 0
        },
        end: {
          line: 389,
          column: 44
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 11,
            column: 1
          },
          end: {
            line: 11,
            column: 2
          }
        },
        loc: {
          start: {
            line: 11,
            column: 24
          },
          end: {
            line: 18,
            column: 1
          }
        },
        line: 11
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 29,
            column: 4
          },
          end: {
            line: 29,
            column: 5
          }
        },
        loc: {
          start: {
            line: 29,
            column: 43
          },
          end: {
            line: 45,
            column: 5
          }
        },
        line: 29
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 53,
            column: 4
          },
          end: {
            line: 53,
            column: 5
          }
        },
        loc: {
          start: {
            line: 53,
            column: 31
          },
          end: {
            line: 83,
            column: 5
          }
        },
        line: 53
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 91,
            column: 4
          },
          end: {
            line: 91,
            column: 5
          }
        },
        loc: {
          start: {
            line: 91,
            column: 40
          },
          end: {
            line: 134,
            column: 5
          }
        },
        line: 91
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 109,
            column: 37
          },
          end: {
            line: 109,
            column: 38
          }
        },
        loc: {
          start: {
            line: 109,
            column: 44
          },
          end: {
            line: 109,
            column: 73
          }
        },
        line: 109
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 142,
            column: 4
          },
          end: {
            line: 142,
            column: 5
          }
        },
        loc: {
          start: {
            line: 142,
            column: 41
          },
          end: {
            line: 181,
            column: 5
          }
        },
        line: 142
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 157,
            column: 34
          },
          end: {
            line: 157,
            column: 35
          }
        },
        loc: {
          start: {
            line: 157,
            column: 47
          },
          end: {
            line: 169,
            column: 17
          }
        },
        line: 157
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 158,
            column: 47
          },
          end: {
            line: 158,
            column: 48
          }
        },
        loc: {
          start: {
            line: 158,
            column: 53
          },
          end: {
            line: 164,
            column: 21
          }
        },
        line: 158
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 165,
            column: 50
          },
          end: {
            line: 165,
            column: 51
          }
        },
        loc: {
          start: {
            line: 165,
            column: 56
          },
          end: {
            line: 168,
            column: 21
          }
        },
        line: 165
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 188,
            column: 4
          },
          end: {
            line: 188,
            column: 5
          }
        },
        loc: {
          start: {
            line: 188,
            column: 32
          },
          end: {
            line: 190,
            column: 5
          }
        },
        line: 188
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 196,
            column: 4
          },
          end: {
            line: 196,
            column: 5
          }
        },
        loc: {
          start: {
            line: 196,
            column: 24
          },
          end: {
            line: 198,
            column: 5
          }
        },
        line: 196
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 204,
            column: 4
          },
          end: {
            line: 204,
            column: 5
          }
        },
        loc: {
          start: {
            line: 204,
            column: 27
          },
          end: {
            line: 206,
            column: 5
          }
        },
        line: 204
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 205,
            column: 47
          },
          end: {
            line: 205,
            column: 48
          }
        },
        loc: {
          start: {
            line: 205,
            column: 55
          },
          end: {
            line: 205,
            column: 91
          }
        },
        line: 205
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 213,
            column: 4
          },
          end: {
            line: 213,
            column: 5
          }
        },
        loc: {
          start: {
            line: 213,
            column: 39
          },
          end: {
            line: 234,
            column: 5
          }
        },
        line: 213
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 240,
            column: 4
          },
          end: {
            line: 240,
            column: 5
          }
        },
        loc: {
          start: {
            line: 240,
            column: 45
          },
          end: {
            line: 253,
            column: 5
          }
        },
        line: 240
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 260,
            column: 4
          },
          end: {
            line: 260,
            column: 5
          }
        },
        loc: {
          start: {
            line: 260,
            column: 30
          },
          end: {
            line: 284,
            column: 5
          }
        },
        line: 260
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 290,
            column: 4
          },
          end: {
            line: 290,
            column: 5
          }
        },
        loc: {
          start: {
            line: 290,
            column: 37
          },
          end: {
            line: 319,
            column: 5
          }
        },
        line: 290
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 294,
            column: 35
          },
          end: {
            line: 294,
            column: 36
          }
        },
        loc: {
          start: {
            line: 294,
            column: 45
          },
          end: {
            line: 296,
            column: 9
          }
        },
        line: 294
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 297,
            column: 35
          },
          end: {
            line: 297,
            column: 36
          }
        },
        loc: {
          start: {
            line: 297,
            column: 45
          },
          end: {
            line: 304,
            column: 9
          }
        },
        line: 297
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 305,
            column: 27
          },
          end: {
            line: 305,
            column: 28
          }
        },
        loc: {
          start: {
            line: 305,
            column: 45
          },
          end: {
            line: 312,
            column: 9
          }
        },
        line: 305
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 313,
            column: 28
          },
          end: {
            line: 313,
            column: 29
          }
        },
        loc: {
          start: {
            line: 313,
            column: 39
          },
          end: {
            line: 318,
            column: 9
          }
        },
        line: 313
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 326,
            column: 4
          },
          end: {
            line: 326,
            column: 5
          }
        },
        loc: {
          start: {
            line: 326,
            column: 59
          },
          end: {
            line: 346,
            column: 5
          }
        },
        line: 326
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 327,
            column: 27
          },
          end: {
            line: 327,
            column: 28
          }
        },
        loc: {
          start: {
            line: 327,
            column: 48
          },
          end: {
            line: 345,
            column: 9
          }
        },
        line: 327
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 328,
            column: 39
          },
          end: {
            line: 328,
            column: 40
          }
        },
        loc: {
          start: {
            line: 328,
            column: 45
          },
          end: {
            line: 330,
            column: 13
          }
        },
        line: 328
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 331,
            column: 28
          },
          end: {
            line: 331,
            column: 29
          }
        },
        loc: {
          start: {
            line: 331,
            column: 34
          },
          end: {
            line: 335,
            column: 13
          }
        },
        line: 331
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 336,
            column: 28
          },
          end: {
            line: 336,
            column: 29
          }
        },
        loc: {
          start: {
            line: 336,
            column: 45
          },
          end: {
            line: 342,
            column: 13
          }
        },
        line: 336
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 353,
            column: 4
          },
          end: {
            line: 353,
            column: 5
          }
        },
        loc: {
          start: {
            line: 353,
            column: 48
          },
          end: {
            line: 359,
            column: 5
          }
        },
        line: 353
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 365,
            column: 4
          },
          end: {
            line: 365,
            column: 5
          }
        },
        loc: {
          start: {
            line: 365,
            column: 27
          },
          end: {
            line: 367,
            column: 5
          }
        },
        line: 365
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 374,
            column: 4
          },
          end: {
            line: 374,
            column: 5
          }
        },
        loc: {
          start: {
            line: 374,
            column: 18
          },
          end: {
            line: 377,
            column: 5
          }
        },
        line: 374
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 381,
            column: 4
          },
          end: {
            line: 381,
            column: 5
          }
        },
        loc: {
          start: {
            line: 381,
            column: 20
          },
          end: {
            line: 387,
            column: 5
          }
        },
        line: 381
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 383,
            column: 75
          },
          end: {
            line: 383,
            column: 76
          }
        },
        loc: {
          start: {
            line: 383,
            column: 91
          },
          end: {
            line: 383,
            column: 213
          }
        },
        line: 383
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 383,
            column: 133
          },
          end: {
            line: 383,
            column: 134
          }
        },
        loc: {
          start: {
            line: 383,
            column: 142
          },
          end: {
            line: 383,
            column: 212
          }
        },
        line: 383
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 18,
            column: 3
          },
          end: {
            line: 18,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 3
          },
          end: {
            line: 18,
            column: 14
          }
        }, {
          start: {
            line: 18,
            column: 19
          },
          end: {
            line: 18,
            column: 57
          }
        }],
        line: 18
      },
      "1": {
        loc: {
          start: {
            line: 93,
            column: 8
          },
          end: {
            line: 95,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 93,
            column: 8
          },
          end: {
            line: 95,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 93
      },
      "2": {
        loc: {
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 99,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 99,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 96
      },
      "3": {
        loc: {
          start: {
            line: 130,
            column: 41
          },
          end: {
            line: 130,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 130,
            column: 66
          },
          end: {
            line: 130,
            column: 79
          }
        }, {
          start: {
            line: 130,
            column: 82
          },
          end: {
            line: 130,
            column: 95
          }
        }],
        line: 130
      },
      "4": {
        loc: {
          start: {
            line: 144,
            column: 8
          },
          end: {
            line: 146,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 144,
            column: 8
          },
          end: {
            line: 146,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 144
      },
      "5": {
        loc: {
          start: {
            line: 147,
            column: 8
          },
          end: {
            line: 150,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 147,
            column: 8
          },
          end: {
            line: 150,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 147
      },
      "6": {
        loc: {
          start: {
            line: 153,
            column: 12
          },
          end: {
            line: 170,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 153,
            column: 12
          },
          end: {
            line: 170,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 153
      },
      "7": {
        loc: {
          start: {
            line: 160,
            column: 24
          },
          end: {
            line: 162,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 160,
            column: 24
          },
          end: {
            line: 162,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 160
      },
      "8": {
        loc: {
          start: {
            line: 160,
            column: 28
          },
          end: {
            line: 160,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 160,
            column: 28
          },
          end: {
            line: 160,
            column: 46
          }
        }, {
          start: {
            line: 160,
            column: 50
          },
          end: {
            line: 160,
            column: 76
          }
        }],
        line: 160
      },
      "9": {
        loc: {
          start: {
            line: 218,
            column: 12
          },
          end: {
            line: 220,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 218,
            column: 12
          },
          end: {
            line: 220,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 218
      },
      "10": {
        loc: {
          start: {
            line: 223,
            column: 8
          },
          end: {
            line: 225,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 223,
            column: 8
          },
          end: {
            line: 225,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 223
      },
      "11": {
        loc: {
          start: {
            line: 227,
            column: 8
          },
          end: {
            line: 229,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 227,
            column: 8
          },
          end: {
            line: 229,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 227
      },
      "12": {
        loc: {
          start: {
            line: 227,
            column: 12
          },
          end: {
            line: 227,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 227,
            column: 12
          },
          end: {
            line: 227,
            column: 32
          }
        }, {
          start: {
            line: 227,
            column: 36
          },
          end: {
            line: 227,
            column: 60
          }
        }],
        line: 227
      },
      "13": {
        loc: {
          start: {
            line: 230,
            column: 8
          },
          end: {
            line: 232,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 230,
            column: 8
          },
          end: {
            line: 232,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 230
      },
      "14": {
        loc: {
          start: {
            line: 230,
            column: 12
          },
          end: {
            line: 230,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 230,
            column: 12
          },
          end: {
            line: 230,
            column: 33
          }
        }, {
          start: {
            line: 230,
            column: 37
          },
          end: {
            line: 230,
            column: 62
          }
        }],
        line: 230
      },
      "15": {
        loc: {
          start: {
            line: 243,
            column: 12
          },
          end: {
            line: 245,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 243,
            column: 12
          },
          end: {
            line: 245,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 243
      },
      "16": {
        loc: {
          start: {
            line: 251,
            column: 62
          },
          end: {
            line: 251,
            column: 116
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 251,
            column: 87
          },
          end: {
            line: 251,
            column: 100
          }
        }, {
          start: {
            line: 251,
            column: 103
          },
          end: {
            line: 251,
            column: 116
          }
        }],
        line: 251
      },
      "17": {
        loc: {
          start: {
            line: 274,
            column: 8
          },
          end: {
            line: 276,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 274,
            column: 8
          },
          end: {
            line: 276,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 274
      },
      "18": {
        loc: {
          start: {
            line: 278,
            column: 8
          },
          end: {
            line: 280,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 278,
            column: 8
          },
          end: {
            line: 280,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 278
      },
      "19": {
        loc: {
          start: {
            line: 291,
            column: 8
          },
          end: {
            line: 292,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 291,
            column: 8
          },
          end: {
            line: 292,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 291
      },
      "20": {
        loc: {
          start: {
            line: 301,
            column: 12
          },
          end: {
            line: 303,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 301,
            column: 12
          },
          end: {
            line: 303,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 301
      },
      "21": {
        loc: {
          start: {
            line: 307,
            column: 12
          },
          end: {
            line: 310,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 307,
            column: 12
          },
          end: {
            line: 310,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 307
      },
      "22": {
        loc: {
          start: {
            line: 326,
            column: 40
          },
          end: {
            line: 326,
            column: 57
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 326,
            column: 52
          },
          end: {
            line: 326,
            column: 57
          }
        }],
        line: 326
      },
      "23": {
        loc: {
          start: {
            line: 337,
            column: 16
          },
          end: {
            line: 341,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 337,
            column: 16
          },
          end: {
            line: 341,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 337
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0],
      "23": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\ssh-tunnel-manager.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\ssh-tunnel-manager.ts"],
      sourcesContent: ["import { EventEmitter } from 'events';\r\nimport { spawn, ChildProcess } from 'child_process';\r\nimport { promises as fs } from 'fs';\r\nimport { join } from 'path';\r\nimport { Logger } from '../core/logging/logger';\r\nimport { EncryptionService } from '../security/encryption-service';\r\n\r\n/**\r\n * SSH Tunnel Configuration interface\r\n * Defines all parameters needed to establish a secure SSH tunnel to Oracle Free Tier\r\n */\r\nexport interface TunnelConfig {\r\n  /** Oracle Free Tier IP address */\r\n  oracleIP: string;\r\n  /** SSH port (default: 22) */\r\n  sshPort: number;\r\n  /** SSH username for Oracle instance */\r\n  username: string;\r\n  /** Path to private key file */\r\n  privateKeyPath: string;\r\n  /** Local port for tunnel */\r\n  localPort: number;\r\n  /** Remote port on Oracle instance */\r\n  remotePort: number;\r\n  /** Enable SSH keep-alive */\r\n  keepAlive: boolean;\r\n  /** Enable SSH compression */\r\n  compression: boolean;\r\n  /** Connection timeout in seconds */\r\n  connectionTimeout: number;\r\n  /** Server alive interval in seconds */\r\n  serverAliveInterval: number;\r\n  /** Maximum server alive count misses */\r\n  serverAliveCountMax: number;\r\n}\r\n\r\n/**\r\n * SSH Tunnel Connection interface\r\n * Represents an active SSH tunnel connection with state management\r\n */\r\nexport interface TunnelConnection {\r\n  /** Unique connection identifier */\r\n  id: string;\r\n  /** Connection configuration */\r\n  config: TunnelConfig;\r\n  /** SSH process handle */\r\n  process: ChildProcess | null;\r\n  /** Connection state */\r\n  state: TunnelState;\r\n  /** Connection establishment timestamp */\r\n  connectedAt: Date | null;\r\n  /** Last activity timestamp */\r\n  lastActivity: Date;\r\n  /** Connection statistics */\r\n  stats: TunnelStats;\r\n}\r\n\r\n/**\r\n * Tunnel connection states\r\n */\r\nexport enum TunnelState {\r\n  DISCONNECTED = 'DISCONNECTED',\r\n  CONNECTING = 'CONNECTING',\r\n  CONNECTED = 'CONNECTED',\r\n  RECONNECTING = 'RECONNECTING',\r\n  FAILED = 'FAILED',\r\n  TERMINATED = 'TERMINATED'\r\n}\r\n\r\n/**\r\n * Tunnel connection statistics\r\n */\r\nexport interface TunnelStats {\r\n  /** Total bytes transferred */\r\n  bytesTransferred: number;\r\n  /** Connection uptime in milliseconds */\r\n  uptime: number;\r\n  /** Number of reconnection attempts */\r\n  reconnectAttempts: number;\r\n  /** Last error message */\r\n  lastError: string | null;\r\n  /** Connection quality score (0-100) */\r\n  qualityScore: number;\r\n}\r\n\r\n/**\r\n * SSH Tunnel Manager\r\n * Manages SSH tunnel connections to Oracle Free Tier with authentication,\r\n * state management, and connection validation\r\n */\r\nexport class SSHTunnelManager extends EventEmitter {\r\n  private logger: Logger;\r\n  private encryptionService: EncryptionService;\r\n  private connections: Map<string, TunnelConnection>;\r\n  private defaultConfig: Partial<TunnelConfig>;\r\n\r\n  constructor(\r\n    logger: Logger,\r\n    encryptionService: EncryptionService\r\n  ) {\r\n    super();\r\n    this.logger = logger;\r\n    this.encryptionService = encryptionService;\r\n    this.connections = new Map();\r\n    \r\n    // Default configuration for Oracle Free Tier\r\n    this.defaultConfig = {\r\n      oracleIP: '168.138.104.117',\r\n      sshPort: 22,\r\n      keepAlive: true,\r\n      compression: true,\r\n      connectionTimeout: 30,\r\n      serverAliveInterval: 60,\r\n      serverAliveCountMax: 3\r\n    };\r\n\r\n    this.logger.info('SSH Tunnel Manager initialized');\r\n  }\r\n\r\n  /**\r\n   * Create a new SSH tunnel connection to Oracle Free Tier\r\n   * Implements secure authentication with private key management\r\n   * \r\n   * @param config - Tunnel configuration parameters\r\n   * @returns Promise resolving to tunnel connection\r\n   */\r\n  async createTunnel(config: Partial<TunnelConfig>): Promise<TunnelConnection> {\r\n    const fullConfig = { ...this.defaultConfig, ...config } as TunnelConfig;\r\n    \r\n    // Validate configuration\r\n    await this.validateTunnelConfig(fullConfig);\r\n    \r\n    // Generate unique connection ID\r\n    const connectionId = this.generateConnectionId();\r\n    \r\n    // Create connection object\r\n    const connection: TunnelConnection = {\r\n      id: connectionId,\r\n      config: fullConfig,\r\n      process: null,\r\n      state: TunnelState.DISCONNECTED,\r\n      connectedAt: null,\r\n      lastActivity: new Date(),\r\n      stats: {\r\n        bytesTransferred: 0,\r\n        uptime: 0,\r\n        reconnectAttempts: 0,\r\n        lastError: null,\r\n        qualityScore: 0\r\n      }\r\n    };\r\n\r\n    // Store connection\r\n    this.connections.set(connectionId, connection);\r\n    \r\n    this.logger.info(`Created SSH tunnel connection: ${connectionId}`, {\r\n      oracleIP: fullConfig.oracleIP,\r\n      localPort: fullConfig.localPort,\r\n      remotePort: fullConfig.remotePort\r\n    });\r\n\r\n    return connection;\r\n  }\r\n\r\n  /**\r\n   * Establish SSH tunnel connection\r\n   * Implements connection authentication and state management\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @returns Promise resolving when connection is established\r\n   */\r\n  async establishTunnel(connectionId: string): Promise<void> {\r\n    const connection = this.connections.get(connectionId);\r\n    if (!connection) {\r\n      throw new Error(`Connection not found: ${connectionId}`);\r\n    }\r\n\r\n    if (connection.state === TunnelState.CONNECTED) {\r\n      this.logger.warn(`Tunnel already connected: ${connectionId}`);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Update state to connecting\r\n      this.updateConnectionState(connection, TunnelState.CONNECTING);\r\n      \r\n      // Validate private key exists and is accessible\r\n      await this.validatePrivateKey(connection.config.privateKeyPath);\r\n      \r\n      // Build SSH command arguments\r\n      const sshArgs = this.buildSSHArguments(connection.config);\r\n      \r\n      this.logger.info(`Establishing SSH tunnel: ${connectionId}`, {\r\n        command: 'ssh',\r\n        args: sshArgs.filter(arg => !arg.includes('IdentityFile')) // Don't log private key path\r\n      });\r\n\r\n      // Spawn SSH process\r\n      const sshProcess = spawn('ssh', sshArgs, {\r\n        stdio: ['pipe', 'pipe', 'pipe'],\r\n        detached: false\r\n      });\r\n\r\n      connection.process = sshProcess;\r\n\r\n      // Set up process event handlers\r\n      this.setupProcessHandlers(connection);\r\n\r\n      // Wait for connection establishment\r\n      await this.waitForConnection(connection);\r\n      \r\n      // Update connection state\r\n      this.updateConnectionState(connection, TunnelState.CONNECTED);\r\n      connection.connectedAt = new Date();\r\n      \r\n      this.logger.info(`SSH tunnel established successfully: ${connectionId}`);\r\n      this.emit('tunnelConnected', connection);\r\n\r\n    } catch (error) {\r\n      this.logger.error(`Failed to establish SSH tunnel: ${connectionId}`, error);\r\n      this.updateConnectionState(connection, TunnelState.FAILED);\r\n      connection.stats.lastError = error instanceof Error ? error.message : String(error);\r\n      this.emit('tunnelError', connection, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Disconnect SSH tunnel\r\n   * Gracefully terminates the SSH connection\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @returns Promise resolving when disconnected\r\n   */\r\n  async disconnectTunnel(connectionId: string): Promise<void> {\r\n    const connection = this.connections.get(connectionId);\r\n    if (!connection) {\r\n      throw new Error(`Connection not found: ${connectionId}`);\r\n    }\r\n\r\n    if (connection.state === TunnelState.DISCONNECTED) {\r\n      this.logger.warn(`Tunnel already disconnected: ${connectionId}`);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      this.logger.info(`Disconnecting SSH tunnel: ${connectionId}`);\r\n      \r\n      if (connection.process) {\r\n        // Graceful termination\r\n        connection.process.kill('SIGTERM');\r\n        \r\n        // Wait for process to exit\r\n        await new Promise<void>((resolve) => {\r\n          const timeout = setTimeout(() => {\r\n            // Force kill if graceful termination fails\r\n            if (connection.process && !connection.process.killed) {\r\n              connection.process.kill('SIGKILL');\r\n            }\r\n            resolve();\r\n          }, 5000);\r\n\r\n          connection.process!.on('exit', () => {\r\n            clearTimeout(timeout);\r\n            resolve();\r\n          });\r\n        });\r\n      }\r\n\r\n      this.updateConnectionState(connection, TunnelState.DISCONNECTED);\r\n      connection.process = null;\r\n      connection.connectedAt = null;\r\n      \r\n      this.logger.info(`SSH tunnel disconnected: ${connectionId}`);\r\n      this.emit('tunnelDisconnected', connection);\r\n\r\n    } catch (error) {\r\n      this.logger.error(`Error disconnecting SSH tunnel: ${connectionId}`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get connection by ID\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @returns Tunnel connection or undefined\r\n   */\r\n  getConnection(connectionId: string): TunnelConnection | undefined {\r\n    return this.connections.get(connectionId);\r\n  }\r\n\r\n  /**\r\n   * Get all connections\r\n   * \r\n   * @returns Array of all tunnel connections\r\n   */\r\n  getAllConnections(): TunnelConnection[] {\r\n    return Array.from(this.connections.values());\r\n  }\r\n\r\n  /**\r\n   * Get active connections\r\n   * \r\n   * @returns Array of connected tunnel connections\r\n   */\r\n  getActiveConnections(): TunnelConnection[] {\r\n    return this.getAllConnections().filter(\r\n      conn => conn.state === TunnelState.CONNECTED\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Validate tunnel configuration\r\n   * Ensures all required parameters are present and valid\r\n   * \r\n   * @param config - Tunnel configuration to validate\r\n   */\r\n  private async validateTunnelConfig(config: TunnelConfig): Promise<void> {\r\n    const requiredFields: (keyof TunnelConfig)[] = [\r\n      'oracleIP', 'username', 'privateKeyPath', 'localPort', 'remotePort'\r\n    ];\r\n\r\n    for (const field of requiredFields) {\r\n      if (!config[field]) {\r\n        throw new Error(`Missing required tunnel configuration: ${field}`);\r\n      }\r\n    }\r\n\r\n    // Validate IP address format\r\n    if (!this.isValidIP(config.oracleIP)) {\r\n      throw new Error(`Invalid Oracle IP address: ${config.oracleIP}`);\r\n    }\r\n\r\n    // Validate port ranges\r\n    if (config.localPort < 1 || config.localPort > 65535) {\r\n      throw new Error(`Invalid local port: ${config.localPort}`);\r\n    }\r\n\r\n    if (config.remotePort < 1 || config.remotePort > 65535) {\r\n      throw new Error(`Invalid remote port: ${config.remotePort}`);\r\n    }\r\n\r\n    this.logger.debug('Tunnel configuration validated successfully');\r\n  }\r\n\r\n  /**\r\n   * Validate private key file exists and is accessible\r\n   * \r\n   * @param privateKeyPath - Path to private key file\r\n   */\r\n  private async validatePrivateKey(privateKeyPath: string): Promise<void> {\r\n    try {\r\n      const stats = await fs.stat(privateKeyPath);\r\n      \r\n      if (!stats.isFile()) {\r\n        throw new Error(`Private key path is not a file: ${privateKeyPath}`);\r\n      }\r\n\r\n      // Check file permissions (should be readable by owner only)\r\n      await fs.access(privateKeyPath, fs.constants.R_OK);\r\n      \r\n      this.logger.debug(`Private key validated: ${privateKeyPath}`);\r\n      \r\n    } catch (error) {\r\n      throw new Error(`Private key validation failed: ${error instanceof Error ? error.message : String(error)}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Build SSH command arguments\r\n   * \r\n   * @param config - Tunnel configuration\r\n   * @returns Array of SSH command arguments\r\n   */\r\n  private buildSSHArguments(config: TunnelConfig): string[] {\r\n    const args = [\r\n      '-N', // No remote command execution\r\n      '-T', // Disable pseudo-terminal allocation\r\n      '-o', 'StrictHostKeyChecking=no', // Accept new host keys\r\n      '-o', 'UserKnownHostsFile=/dev/null', // Don't save host keys\r\n      '-o', `ConnectTimeout=${config.connectionTimeout}`,\r\n      '-o', `ServerAliveInterval=${config.serverAliveInterval}`,\r\n      '-o', `ServerAliveCountMax=${config.serverAliveCountMax}`,\r\n      '-i', config.privateKeyPath, // Identity file\r\n      '-p', config.sshPort.toString(), // SSH port\r\n      '-L', `${config.localPort}:localhost:${config.remotePort}`, // Local port forwarding\r\n    ];\r\n\r\n    // Add compression if enabled\r\n    if (config.compression) {\r\n      args.push('-C');\r\n    }\r\n\r\n    // Add keep-alive if enabled\r\n    if (config.keepAlive) {\r\n      args.push('-o', 'TCPKeepAlive=yes');\r\n    }\r\n\r\n    // Add connection target\r\n    args.push(`${config.username}@${config.oracleIP}`);\r\n\r\n    return args;\r\n  }\r\n\r\n  /**\r\n   * Set up SSH process event handlers\r\n   * \r\n   * @param connection - Tunnel connection\r\n   */\r\n  private setupProcessHandlers(connection: TunnelConnection): void {\r\n    if (!connection.process) return;\r\n\r\n    const process = connection.process;\r\n\r\n    process.stdout?.on('data', (data) => {\r\n      this.logger.debug(`SSH stdout [${connection.id}]: ${data.toString().trim()}`);\r\n    });\r\n\r\n    process.stderr?.on('data', (data) => {\r\n      const message = data.toString().trim();\r\n      this.logger.debug(`SSH stderr [${connection.id}]: ${message}`);\r\n      \r\n      // Check for connection success indicators\r\n      if (message.includes('Local forwarding listening')) {\r\n        this.emit('tunnelReady', connection);\r\n      }\r\n    });\r\n\r\n    process.on('exit', (code, signal) => {\r\n      this.logger.info(`SSH process exited [${connection.id}]`, { code, signal });\r\n      \r\n      if (connection.state === TunnelState.CONNECTED) {\r\n        this.updateConnectionState(connection, TunnelState.DISCONNECTED);\r\n        this.emit('tunnelDisconnected', connection);\r\n      }\r\n      \r\n      connection.process = null;\r\n    });\r\n\r\n    process.on('error', (error) => {\r\n      this.logger.error(`SSH process error [${connection.id}]`, error);\r\n      this.updateConnectionState(connection, TunnelState.FAILED);\r\n      connection.stats.lastError = error.message;\r\n      this.emit('tunnelError', connection, error);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Wait for SSH tunnel connection to be established\r\n   * \r\n   * @param connection - Tunnel connection\r\n   * @param timeoutMs - Timeout in milliseconds\r\n   */\r\n  private async waitForConnection(connection: TunnelConnection, timeoutMs: number = 30000): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      const timeout = setTimeout(() => {\r\n        reject(new Error(`SSH tunnel connection timeout: ${connection.id}`));\r\n      }, timeoutMs);\r\n\r\n      const onReady = () => {\r\n        clearTimeout(timeout);\r\n        this.removeListener('tunnelError', onError);\r\n        resolve();\r\n      };\r\n\r\n      const onError = (conn: TunnelConnection, error: Error) => {\r\n        if (conn.id === connection.id) {\r\n          clearTimeout(timeout);\r\n          this.removeListener('tunnelReady', onReady);\r\n          reject(error);\r\n        }\r\n      };\r\n\r\n      this.once('tunnelReady', onReady);\r\n      this.once('tunnelError', onError);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update connection state and emit events\r\n   * \r\n   * @param connection - Tunnel connection\r\n   * @param newState - New connection state\r\n   */\r\n  private updateConnectionState(connection: TunnelConnection, newState: TunnelState): void {\r\n    const oldState = connection.state;\r\n    connection.state = newState;\r\n    connection.lastActivity = new Date();\r\n\r\n    this.logger.debug(`Tunnel state changed [${connection.id}]: ${oldState} -> ${newState}`);\r\n    this.emit('stateChanged', connection, oldState, newState);\r\n  }\r\n\r\n  /**\r\n   * Generate unique connection ID\r\n   * \r\n   * @returns Unique connection identifier\r\n   */\r\n  private generateConnectionId(): string {\r\n    return `tunnel_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  /**\r\n   * Validate IP address format\r\n   * \r\n   * @param ip - IP address to validate\r\n   * @returns True if valid IP address\r\n   */\r\n  private isValidIP(ip: string): boolean {\r\n    const ipRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;\r\n    return ipRegex.test(ip);\r\n  }\r\n\r\n  /**\r\n   * Cleanup all connections on shutdown\r\n   */\r\n  async cleanup(): Promise<void> {\r\n    this.logger.info('Cleaning up SSH tunnel connections');\r\n    \r\n    const disconnectPromises = Array.from(this.connections.keys()).map(\r\n      connectionId => this.disconnectTunnel(connectionId).catch(error => \r\n        this.logger.error(`Error disconnecting tunnel ${connectionId}`, error)\r\n      )\r\n    );\r\n\r\n    await Promise.all(disconnectPromises);\r\n    this.connections.clear();\r\n    \r\n    this.logger.info('SSH tunnel cleanup completed');\r\n  }\r\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "899df721c3bbba1009eebcb47089cfe28b3b0473"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2pgvlnd7u9 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2pgvlnd7u9();
cov_2pgvlnd7u9().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2pgvlnd7u9().s[1]++;
exports.SSHTunnelManager = exports.TunnelState = void 0;
const events_1 =
/* istanbul ignore next */
(cov_2pgvlnd7u9().s[2]++, require("events"));
const child_process_1 =
/* istanbul ignore next */
(cov_2pgvlnd7u9().s[3]++, require("child_process"));
const fs_1 =
/* istanbul ignore next */
(cov_2pgvlnd7u9().s[4]++, require("fs"));
/**
 * Tunnel connection states
 */
var TunnelState;
/* istanbul ignore next */
cov_2pgvlnd7u9().s[5]++;
(function (TunnelState) {
  /* istanbul ignore next */
  cov_2pgvlnd7u9().f[0]++;
  cov_2pgvlnd7u9().s[6]++;
  TunnelState["DISCONNECTED"] = "DISCONNECTED";
  /* istanbul ignore next */
  cov_2pgvlnd7u9().s[7]++;
  TunnelState["CONNECTING"] = "CONNECTING";
  /* istanbul ignore next */
  cov_2pgvlnd7u9().s[8]++;
  TunnelState["CONNECTED"] = "CONNECTED";
  /* istanbul ignore next */
  cov_2pgvlnd7u9().s[9]++;
  TunnelState["RECONNECTING"] = "RECONNECTING";
  /* istanbul ignore next */
  cov_2pgvlnd7u9().s[10]++;
  TunnelState["FAILED"] = "FAILED";
  /* istanbul ignore next */
  cov_2pgvlnd7u9().s[11]++;
  TunnelState["TERMINATED"] = "TERMINATED";
})(
/* istanbul ignore next */
(cov_2pgvlnd7u9().b[0][0]++, TunnelState) ||
/* istanbul ignore next */
(cov_2pgvlnd7u9().b[0][1]++, exports.TunnelState = TunnelState = {}));
/**
 * SSH Tunnel Manager
 * Manages SSH tunnel connections to Oracle Free Tier with authentication,
 * state management, and connection validation
 */
class SSHTunnelManager extends
/* istanbul ignore next */
(events_1.EventEmitter) {
  logger;
  encryptionService;
  connections;
  defaultConfig;
  constructor(logger, encryptionService) {
    /* istanbul ignore next */
    cov_2pgvlnd7u9().f[1]++;
    cov_2pgvlnd7u9().s[12]++;
    super();
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[13]++;
    this.logger = logger;
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[14]++;
    this.encryptionService = encryptionService;
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[15]++;
    this.connections = new Map();
    // Default configuration for Oracle Free Tier
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[16]++;
    this.defaultConfig = {
      oracleIP: '168.138.104.117',
      sshPort: 22,
      keepAlive: true,
      compression: true,
      connectionTimeout: 30,
      serverAliveInterval: 60,
      serverAliveCountMax: 3
    };
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[17]++;
    this.logger.info('SSH Tunnel Manager initialized');
  }
  /**
   * Create a new SSH tunnel connection to Oracle Free Tier
   * Implements secure authentication with private key management
   *
   * @param config - Tunnel configuration parameters
   * @returns Promise resolving to tunnel connection
   */
  async createTunnel(config) {
    /* istanbul ignore next */
    cov_2pgvlnd7u9().f[2]++;
    const fullConfig =
    /* istanbul ignore next */
    (cov_2pgvlnd7u9().s[18]++, {
      ...this.defaultConfig,
      ...config
    });
    // Validate configuration
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[19]++;
    await this.validateTunnelConfig(fullConfig);
    // Generate unique connection ID
    const connectionId =
    /* istanbul ignore next */
    (cov_2pgvlnd7u9().s[20]++, this.generateConnectionId());
    // Create connection object
    const connection =
    /* istanbul ignore next */
    (cov_2pgvlnd7u9().s[21]++, {
      id: connectionId,
      config: fullConfig,
      process: null,
      state: TunnelState.DISCONNECTED,
      connectedAt: null,
      lastActivity: new Date(),
      stats: {
        bytesTransferred: 0,
        uptime: 0,
        reconnectAttempts: 0,
        lastError: null,
        qualityScore: 0
      }
    });
    // Store connection
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[22]++;
    this.connections.set(connectionId, connection);
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[23]++;
    this.logger.info(`Created SSH tunnel connection: ${connectionId}`, {
      oracleIP: fullConfig.oracleIP,
      localPort: fullConfig.localPort,
      remotePort: fullConfig.remotePort
    });
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[24]++;
    return connection;
  }
  /**
   * Establish SSH tunnel connection
   * Implements connection authentication and state management
   *
   * @param connectionId - Connection identifier
   * @returns Promise resolving when connection is established
   */
  async establishTunnel(connectionId) {
    /* istanbul ignore next */
    cov_2pgvlnd7u9().f[3]++;
    const connection =
    /* istanbul ignore next */
    (cov_2pgvlnd7u9().s[25]++, this.connections.get(connectionId));
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[26]++;
    if (!connection) {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().b[1][0]++;
      cov_2pgvlnd7u9().s[27]++;
      throw new Error(`Connection not found: ${connectionId}`);
    } else
    /* istanbul ignore next */
    {
      cov_2pgvlnd7u9().b[1][1]++;
    }
    cov_2pgvlnd7u9().s[28]++;
    if (connection.state === TunnelState.CONNECTED) {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().b[2][0]++;
      cov_2pgvlnd7u9().s[29]++;
      this.logger.warn(`Tunnel already connected: ${connectionId}`);
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[30]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2pgvlnd7u9().b[2][1]++;
    }
    cov_2pgvlnd7u9().s[31]++;
    try {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[32]++;
      // Update state to connecting
      this.updateConnectionState(connection, TunnelState.CONNECTING);
      // Validate private key exists and is accessible
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[33]++;
      await this.validatePrivateKey(connection.config.privateKeyPath);
      // Build SSH command arguments
      const sshArgs =
      /* istanbul ignore next */
      (cov_2pgvlnd7u9().s[34]++, this.buildSSHArguments(connection.config));
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[35]++;
      this.logger.info(`Establishing SSH tunnel: ${connectionId}`, {
        command: 'ssh',
        args: sshArgs.filter(arg => {
          /* istanbul ignore next */
          cov_2pgvlnd7u9().f[4]++;
          cov_2pgvlnd7u9().s[36]++;
          return !arg.includes('IdentityFile');
        }) // Don't log private key path
      });
      // Spawn SSH process
      const sshProcess =
      /* istanbul ignore next */
      (cov_2pgvlnd7u9().s[37]++, (0, child_process_1.spawn)('ssh', sshArgs, {
        stdio: ['pipe', 'pipe', 'pipe'],
        detached: false
      }));
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[38]++;
      connection.process = sshProcess;
      // Set up process event handlers
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[39]++;
      this.setupProcessHandlers(connection);
      // Wait for connection establishment
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[40]++;
      await this.waitForConnection(connection);
      // Update connection state
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[41]++;
      this.updateConnectionState(connection, TunnelState.CONNECTED);
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[42]++;
      connection.connectedAt = new Date();
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[43]++;
      this.logger.info(`SSH tunnel established successfully: ${connectionId}`);
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[44]++;
      this.emit('tunnelConnected', connection);
    } catch (error) {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[45]++;
      this.logger.error(`Failed to establish SSH tunnel: ${connectionId}`, error);
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[46]++;
      this.updateConnectionState(connection, TunnelState.FAILED);
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[47]++;
      connection.stats.lastError = error instanceof Error ?
      /* istanbul ignore next */
      (cov_2pgvlnd7u9().b[3][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2pgvlnd7u9().b[3][1]++, String(error));
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[48]++;
      this.emit('tunnelError', connection, error);
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[49]++;
      throw error;
    }
  }
  /**
   * Disconnect SSH tunnel
   * Gracefully terminates the SSH connection
   *
   * @param connectionId - Connection identifier
   * @returns Promise resolving when disconnected
   */
  async disconnectTunnel(connectionId) {
    /* istanbul ignore next */
    cov_2pgvlnd7u9().f[5]++;
    const connection =
    /* istanbul ignore next */
    (cov_2pgvlnd7u9().s[50]++, this.connections.get(connectionId));
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[51]++;
    if (!connection) {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().b[4][0]++;
      cov_2pgvlnd7u9().s[52]++;
      throw new Error(`Connection not found: ${connectionId}`);
    } else
    /* istanbul ignore next */
    {
      cov_2pgvlnd7u9().b[4][1]++;
    }
    cov_2pgvlnd7u9().s[53]++;
    if (connection.state === TunnelState.DISCONNECTED) {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().b[5][0]++;
      cov_2pgvlnd7u9().s[54]++;
      this.logger.warn(`Tunnel already disconnected: ${connectionId}`);
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[55]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2pgvlnd7u9().b[5][1]++;
    }
    cov_2pgvlnd7u9().s[56]++;
    try {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[57]++;
      this.logger.info(`Disconnecting SSH tunnel: ${connectionId}`);
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[58]++;
      if (connection.process) {
        /* istanbul ignore next */
        cov_2pgvlnd7u9().b[6][0]++;
        cov_2pgvlnd7u9().s[59]++;
        // Graceful termination
        connection.process.kill('SIGTERM');
        // Wait for process to exit
        /* istanbul ignore next */
        cov_2pgvlnd7u9().s[60]++;
        await new Promise(resolve => {
          /* istanbul ignore next */
          cov_2pgvlnd7u9().f[6]++;
          const timeout =
          /* istanbul ignore next */
          (cov_2pgvlnd7u9().s[61]++, setTimeout(() => {
            /* istanbul ignore next */
            cov_2pgvlnd7u9().f[7]++;
            cov_2pgvlnd7u9().s[62]++;
            // Force kill if graceful termination fails
            if (
            /* istanbul ignore next */
            (cov_2pgvlnd7u9().b[8][0]++, connection.process) &&
            /* istanbul ignore next */
            (cov_2pgvlnd7u9().b[8][1]++, !connection.process.killed)) {
              /* istanbul ignore next */
              cov_2pgvlnd7u9().b[7][0]++;
              cov_2pgvlnd7u9().s[63]++;
              connection.process.kill('SIGKILL');
            } else
            /* istanbul ignore next */
            {
              cov_2pgvlnd7u9().b[7][1]++;
            }
            cov_2pgvlnd7u9().s[64]++;
            resolve();
          }, 5000));
          /* istanbul ignore next */
          cov_2pgvlnd7u9().s[65]++;
          connection.process.on('exit', () => {
            /* istanbul ignore next */
            cov_2pgvlnd7u9().f[8]++;
            cov_2pgvlnd7u9().s[66]++;
            clearTimeout(timeout);
            /* istanbul ignore next */
            cov_2pgvlnd7u9().s[67]++;
            resolve();
          });
        });
      } else
      /* istanbul ignore next */
      {
        cov_2pgvlnd7u9().b[6][1]++;
      }
      cov_2pgvlnd7u9().s[68]++;
      this.updateConnectionState(connection, TunnelState.DISCONNECTED);
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[69]++;
      connection.process = null;
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[70]++;
      connection.connectedAt = null;
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[71]++;
      this.logger.info(`SSH tunnel disconnected: ${connectionId}`);
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[72]++;
      this.emit('tunnelDisconnected', connection);
    } catch (error) {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[73]++;
      this.logger.error(`Error disconnecting SSH tunnel: ${connectionId}`, error);
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[74]++;
      throw error;
    }
  }
  /**
   * Get connection by ID
   *
   * @param connectionId - Connection identifier
   * @returns Tunnel connection or undefined
   */
  getConnection(connectionId) {
    /* istanbul ignore next */
    cov_2pgvlnd7u9().f[9]++;
    cov_2pgvlnd7u9().s[75]++;
    return this.connections.get(connectionId);
  }
  /**
   * Get all connections
   *
   * @returns Array of all tunnel connections
   */
  getAllConnections() {
    /* istanbul ignore next */
    cov_2pgvlnd7u9().f[10]++;
    cov_2pgvlnd7u9().s[76]++;
    return Array.from(this.connections.values());
  }
  /**
   * Get active connections
   *
   * @returns Array of connected tunnel connections
   */
  getActiveConnections() {
    /* istanbul ignore next */
    cov_2pgvlnd7u9().f[11]++;
    cov_2pgvlnd7u9().s[77]++;
    return this.getAllConnections().filter(conn => {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().f[12]++;
      cov_2pgvlnd7u9().s[78]++;
      return conn.state === TunnelState.CONNECTED;
    });
  }
  /**
   * Validate tunnel configuration
   * Ensures all required parameters are present and valid
   *
   * @param config - Tunnel configuration to validate
   */
  async validateTunnelConfig(config) {
    /* istanbul ignore next */
    cov_2pgvlnd7u9().f[13]++;
    const requiredFields =
    /* istanbul ignore next */
    (cov_2pgvlnd7u9().s[79]++, ['oracleIP', 'username', 'privateKeyPath', 'localPort', 'remotePort']);
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[80]++;
    for (const field of requiredFields) {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[81]++;
      if (!config[field]) {
        /* istanbul ignore next */
        cov_2pgvlnd7u9().b[9][0]++;
        cov_2pgvlnd7u9().s[82]++;
        throw new Error(`Missing required tunnel configuration: ${field}`);
      } else
      /* istanbul ignore next */
      {
        cov_2pgvlnd7u9().b[9][1]++;
      }
    }
    // Validate IP address format
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[83]++;
    if (!this.isValidIP(config.oracleIP)) {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().b[10][0]++;
      cov_2pgvlnd7u9().s[84]++;
      throw new Error(`Invalid Oracle IP address: ${config.oracleIP}`);
    } else
    /* istanbul ignore next */
    {
      cov_2pgvlnd7u9().b[10][1]++;
    }
    // Validate port ranges
    cov_2pgvlnd7u9().s[85]++;
    if (
    /* istanbul ignore next */
    (cov_2pgvlnd7u9().b[12][0]++, config.localPort < 1) ||
    /* istanbul ignore next */
    (cov_2pgvlnd7u9().b[12][1]++, config.localPort > 65535)) {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().b[11][0]++;
      cov_2pgvlnd7u9().s[86]++;
      throw new Error(`Invalid local port: ${config.localPort}`);
    } else
    /* istanbul ignore next */
    {
      cov_2pgvlnd7u9().b[11][1]++;
    }
    cov_2pgvlnd7u9().s[87]++;
    if (
    /* istanbul ignore next */
    (cov_2pgvlnd7u9().b[14][0]++, config.remotePort < 1) ||
    /* istanbul ignore next */
    (cov_2pgvlnd7u9().b[14][1]++, config.remotePort > 65535)) {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().b[13][0]++;
      cov_2pgvlnd7u9().s[88]++;
      throw new Error(`Invalid remote port: ${config.remotePort}`);
    } else
    /* istanbul ignore next */
    {
      cov_2pgvlnd7u9().b[13][1]++;
    }
    cov_2pgvlnd7u9().s[89]++;
    this.logger.debug('Tunnel configuration validated successfully');
  }
  /**
   * Validate private key file exists and is accessible
   *
   * @param privateKeyPath - Path to private key file
   */
  async validatePrivateKey(privateKeyPath) {
    /* istanbul ignore next */
    cov_2pgvlnd7u9().f[14]++;
    cov_2pgvlnd7u9().s[90]++;
    try {
      const stats =
      /* istanbul ignore next */
      (cov_2pgvlnd7u9().s[91]++, await fs_1.promises.stat(privateKeyPath));
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[92]++;
      if (!stats.isFile()) {
        /* istanbul ignore next */
        cov_2pgvlnd7u9().b[15][0]++;
        cov_2pgvlnd7u9().s[93]++;
        throw new Error(`Private key path is not a file: ${privateKeyPath}`);
      } else
      /* istanbul ignore next */
      {
        cov_2pgvlnd7u9().b[15][1]++;
      }
      // Check file permissions (should be readable by owner only)
      cov_2pgvlnd7u9().s[94]++;
      await fs_1.promises.access(privateKeyPath, fs_1.promises.constants.R_OK);
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[95]++;
      this.logger.debug(`Private key validated: ${privateKeyPath}`);
    } catch (error) {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[96]++;
      throw new Error(`Private key validation failed: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_2pgvlnd7u9().b[16][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2pgvlnd7u9().b[16][1]++, String(error))}`);
    }
  }
  /**
   * Build SSH command arguments
   *
   * @param config - Tunnel configuration
   * @returns Array of SSH command arguments
   */
  buildSSHArguments(config) {
    /* istanbul ignore next */
    cov_2pgvlnd7u9().f[15]++;
    const args =
    /* istanbul ignore next */
    (cov_2pgvlnd7u9().s[97]++, ['-N',
    // No remote command execution
    '-T',
    // Disable pseudo-terminal allocation
    '-o', 'StrictHostKeyChecking=no',
    // Accept new host keys
    '-o', 'UserKnownHostsFile=/dev/null',
    // Don't save host keys
    '-o', `ConnectTimeout=${config.connectionTimeout}`, '-o', `ServerAliveInterval=${config.serverAliveInterval}`, '-o', `ServerAliveCountMax=${config.serverAliveCountMax}`, '-i', config.privateKeyPath,
    // Identity file
    '-p', config.sshPort.toString(),
    // SSH port
    '-L', `${config.localPort}:localhost:${config.remotePort}` // Local port forwarding
    ]);
    // Add compression if enabled
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[98]++;
    if (config.compression) {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().b[17][0]++;
      cov_2pgvlnd7u9().s[99]++;
      args.push('-C');
    } else
    /* istanbul ignore next */
    {
      cov_2pgvlnd7u9().b[17][1]++;
    }
    // Add keep-alive if enabled
    cov_2pgvlnd7u9().s[100]++;
    if (config.keepAlive) {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().b[18][0]++;
      cov_2pgvlnd7u9().s[101]++;
      args.push('-o', 'TCPKeepAlive=yes');
    } else
    /* istanbul ignore next */
    {
      cov_2pgvlnd7u9().b[18][1]++;
    }
    // Add connection target
    cov_2pgvlnd7u9().s[102]++;
    args.push(`${config.username}@${config.oracleIP}`);
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[103]++;
    return args;
  }
  /**
   * Set up SSH process event handlers
   *
   * @param connection - Tunnel connection
   */
  setupProcessHandlers(connection) {
    /* istanbul ignore next */
    cov_2pgvlnd7u9().f[16]++;
    cov_2pgvlnd7u9().s[104]++;
    if (!connection.process) {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().b[19][0]++;
      cov_2pgvlnd7u9().s[105]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2pgvlnd7u9().b[19][1]++;
    }
    const process =
    /* istanbul ignore next */
    (cov_2pgvlnd7u9().s[106]++, connection.process);
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[107]++;
    process.stdout?.on('data', data => {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().f[17]++;
      cov_2pgvlnd7u9().s[108]++;
      this.logger.debug(`SSH stdout [${connection.id}]: ${data.toString().trim()}`);
    });
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[109]++;
    process.stderr?.on('data', data => {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().f[18]++;
      const message =
      /* istanbul ignore next */
      (cov_2pgvlnd7u9().s[110]++, data.toString().trim());
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[111]++;
      this.logger.debug(`SSH stderr [${connection.id}]: ${message}`);
      // Check for connection success indicators
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[112]++;
      if (message.includes('Local forwarding listening')) {
        /* istanbul ignore next */
        cov_2pgvlnd7u9().b[20][0]++;
        cov_2pgvlnd7u9().s[113]++;
        this.emit('tunnelReady', connection);
      } else
      /* istanbul ignore next */
      {
        cov_2pgvlnd7u9().b[20][1]++;
      }
    });
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[114]++;
    process.on('exit', (code, signal) => {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().f[19]++;
      cov_2pgvlnd7u9().s[115]++;
      this.logger.info(`SSH process exited [${connection.id}]`, {
        code,
        signal
      });
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[116]++;
      if (connection.state === TunnelState.CONNECTED) {
        /* istanbul ignore next */
        cov_2pgvlnd7u9().b[21][0]++;
        cov_2pgvlnd7u9().s[117]++;
        this.updateConnectionState(connection, TunnelState.DISCONNECTED);
        /* istanbul ignore next */
        cov_2pgvlnd7u9().s[118]++;
        this.emit('tunnelDisconnected', connection);
      } else
      /* istanbul ignore next */
      {
        cov_2pgvlnd7u9().b[21][1]++;
      }
      cov_2pgvlnd7u9().s[119]++;
      connection.process = null;
    });
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[120]++;
    process.on('error', error => {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().f[20]++;
      cov_2pgvlnd7u9().s[121]++;
      this.logger.error(`SSH process error [${connection.id}]`, error);
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[122]++;
      this.updateConnectionState(connection, TunnelState.FAILED);
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[123]++;
      connection.stats.lastError = error.message;
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[124]++;
      this.emit('tunnelError', connection, error);
    });
  }
  /**
   * Wait for SSH tunnel connection to be established
   *
   * @param connection - Tunnel connection
   * @param timeoutMs - Timeout in milliseconds
   */
  async waitForConnection(connection, timeoutMs =
  /* istanbul ignore next */
  (cov_2pgvlnd7u9().b[22][0]++, 30000)) {
    /* istanbul ignore next */
    cov_2pgvlnd7u9().f[21]++;
    cov_2pgvlnd7u9().s[125]++;
    return new Promise((resolve, reject) => {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().f[22]++;
      const timeout =
      /* istanbul ignore next */
      (cov_2pgvlnd7u9().s[126]++, setTimeout(() => {
        /* istanbul ignore next */
        cov_2pgvlnd7u9().f[23]++;
        cov_2pgvlnd7u9().s[127]++;
        reject(new Error(`SSH tunnel connection timeout: ${connection.id}`));
      }, timeoutMs));
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[128]++;
      const onReady = () => {
        /* istanbul ignore next */
        cov_2pgvlnd7u9().f[24]++;
        cov_2pgvlnd7u9().s[129]++;
        clearTimeout(timeout);
        /* istanbul ignore next */
        cov_2pgvlnd7u9().s[130]++;
        this.removeListener('tunnelError', onError);
        /* istanbul ignore next */
        cov_2pgvlnd7u9().s[131]++;
        resolve();
      };
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[132]++;
      const onError = (conn, error) => {
        /* istanbul ignore next */
        cov_2pgvlnd7u9().f[25]++;
        cov_2pgvlnd7u9().s[133]++;
        if (conn.id === connection.id) {
          /* istanbul ignore next */
          cov_2pgvlnd7u9().b[23][0]++;
          cov_2pgvlnd7u9().s[134]++;
          clearTimeout(timeout);
          /* istanbul ignore next */
          cov_2pgvlnd7u9().s[135]++;
          this.removeListener('tunnelReady', onReady);
          /* istanbul ignore next */
          cov_2pgvlnd7u9().s[136]++;
          reject(error);
        } else
        /* istanbul ignore next */
        {
          cov_2pgvlnd7u9().b[23][1]++;
        }
      };
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[137]++;
      this.once('tunnelReady', onReady);
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[138]++;
      this.once('tunnelError', onError);
    });
  }
  /**
   * Update connection state and emit events
   *
   * @param connection - Tunnel connection
   * @param newState - New connection state
   */
  updateConnectionState(connection, newState) {
    /* istanbul ignore next */
    cov_2pgvlnd7u9().f[26]++;
    const oldState =
    /* istanbul ignore next */
    (cov_2pgvlnd7u9().s[139]++, connection.state);
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[140]++;
    connection.state = newState;
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[141]++;
    connection.lastActivity = new Date();
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[142]++;
    this.logger.debug(`Tunnel state changed [${connection.id}]: ${oldState} -> ${newState}`);
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[143]++;
    this.emit('stateChanged', connection, oldState, newState);
  }
  /**
   * Generate unique connection ID
   *
   * @returns Unique connection identifier
   */
  generateConnectionId() {
    /* istanbul ignore next */
    cov_2pgvlnd7u9().f[27]++;
    cov_2pgvlnd7u9().s[144]++;
    return `tunnel_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }
  /**
   * Validate IP address format
   *
   * @param ip - IP address to validate
   * @returns True if valid IP address
   */
  isValidIP(ip) {
    /* istanbul ignore next */
    cov_2pgvlnd7u9().f[28]++;
    const ipRegex =
    /* istanbul ignore next */
    (cov_2pgvlnd7u9().s[145]++, /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/);
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[146]++;
    return ipRegex.test(ip);
  }
  /**
   * Cleanup all connections on shutdown
   */
  async cleanup() {
    /* istanbul ignore next */
    cov_2pgvlnd7u9().f[29]++;
    cov_2pgvlnd7u9().s[147]++;
    this.logger.info('Cleaning up SSH tunnel connections');
    const disconnectPromises =
    /* istanbul ignore next */
    (cov_2pgvlnd7u9().s[148]++, Array.from(this.connections.keys()).map(connectionId => {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().f[30]++;
      cov_2pgvlnd7u9().s[149]++;
      return this.disconnectTunnel(connectionId).catch(error => {
        /* istanbul ignore next */
        cov_2pgvlnd7u9().f[31]++;
        cov_2pgvlnd7u9().s[150]++;
        return this.logger.error(`Error disconnecting tunnel ${connectionId}`, error);
      });
    }));
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[151]++;
    await Promise.all(disconnectPromises);
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[152]++;
    this.connections.clear();
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[153]++;
    this.logger.info('SSH tunnel cleanup completed');
  }
}
/* istanbul ignore next */
cov_2pgvlnd7u9().s[154]++;
exports.SSHTunnelManager = SSHTunnelManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMnBndmxuZDd1OSIsImFjdHVhbENvdmVyYWdlIiwicyIsImV2ZW50c18xIiwicmVxdWlyZSIsImNoaWxkX3Byb2Nlc3NfMSIsImZzXzEiLCJUdW5uZWxTdGF0ZSIsImYiLCJiIiwiZXhwb3J0cyIsIlNTSFR1bm5lbE1hbmFnZXIiLCJFdmVudEVtaXR0ZXIiLCJsb2dnZXIiLCJlbmNyeXB0aW9uU2VydmljZSIsImNvbm5lY3Rpb25zIiwiZGVmYXVsdENvbmZpZyIsImNvbnN0cnVjdG9yIiwiTWFwIiwib3JhY2xlSVAiLCJzc2hQb3J0Iiwia2VlcEFsaXZlIiwiY29tcHJlc3Npb24iLCJjb25uZWN0aW9uVGltZW91dCIsInNlcnZlckFsaXZlSW50ZXJ2YWwiLCJzZXJ2ZXJBbGl2ZUNvdW50TWF4IiwiaW5mbyIsImNyZWF0ZVR1bm5lbCIsImNvbmZpZyIsImZ1bGxDb25maWciLCJ2YWxpZGF0ZVR1bm5lbENvbmZpZyIsImNvbm5lY3Rpb25JZCIsImdlbmVyYXRlQ29ubmVjdGlvbklkIiwiY29ubmVjdGlvbiIsImlkIiwicHJvY2VzcyIsInN0YXRlIiwiRElTQ09OTkVDVEVEIiwiY29ubmVjdGVkQXQiLCJsYXN0QWN0aXZpdHkiLCJEYXRlIiwic3RhdHMiLCJieXRlc1RyYW5zZmVycmVkIiwidXB0aW1lIiwicmVjb25uZWN0QXR0ZW1wdHMiLCJsYXN0RXJyb3IiLCJxdWFsaXR5U2NvcmUiLCJzZXQiLCJsb2NhbFBvcnQiLCJyZW1vdGVQb3J0IiwiZXN0YWJsaXNoVHVubmVsIiwiZ2V0IiwiRXJyb3IiLCJDT05ORUNURUQiLCJ3YXJuIiwidXBkYXRlQ29ubmVjdGlvblN0YXRlIiwiQ09OTkVDVElORyIsInZhbGlkYXRlUHJpdmF0ZUtleSIsInByaXZhdGVLZXlQYXRoIiwic3NoQXJncyIsImJ1aWxkU1NIQXJndW1lbnRzIiwiY29tbWFuZCIsImFyZ3MiLCJmaWx0ZXIiLCJhcmciLCJpbmNsdWRlcyIsInNzaFByb2Nlc3MiLCJzcGF3biIsInN0ZGlvIiwiZGV0YWNoZWQiLCJzZXR1cFByb2Nlc3NIYW5kbGVycyIsIndhaXRGb3JDb25uZWN0aW9uIiwiZW1pdCIsImVycm9yIiwiRkFJTEVEIiwibWVzc2FnZSIsIlN0cmluZyIsImRpc2Nvbm5lY3RUdW5uZWwiLCJraWxsIiwiUHJvbWlzZSIsInJlc29sdmUiLCJ0aW1lb3V0Iiwic2V0VGltZW91dCIsImtpbGxlZCIsIm9uIiwiY2xlYXJUaW1lb3V0IiwiZ2V0Q29ubmVjdGlvbiIsImdldEFsbENvbm5lY3Rpb25zIiwiQXJyYXkiLCJmcm9tIiwidmFsdWVzIiwiZ2V0QWN0aXZlQ29ubmVjdGlvbnMiLCJjb25uIiwicmVxdWlyZWRGaWVsZHMiLCJmaWVsZCIsImlzVmFsaWRJUCIsImRlYnVnIiwicHJvbWlzZXMiLCJzdGF0IiwiaXNGaWxlIiwiYWNjZXNzIiwiY29uc3RhbnRzIiwiUl9PSyIsInRvU3RyaW5nIiwicHVzaCIsInVzZXJuYW1lIiwic3Rkb3V0IiwiZGF0YSIsInRyaW0iLCJzdGRlcnIiLCJjb2RlIiwic2lnbmFsIiwidGltZW91dE1zIiwicmVqZWN0Iiwib25SZWFkeSIsInJlbW92ZUxpc3RlbmVyIiwib25FcnJvciIsIm9uY2UiLCJuZXdTdGF0ZSIsIm9sZFN0YXRlIiwibm93IiwiTWF0aCIsInJhbmRvbSIsInN1YnN0ciIsImlwIiwiaXBSZWdleCIsInRlc3QiLCJjbGVhbnVwIiwiZGlzY29ubmVjdFByb21pc2VzIiwia2V5cyIsIm1hcCIsImNhdGNoIiwiYWxsIiwiY2xlYXIiXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXE5pY2tcXERlc2t0b3BcXFNtb290aFNhaWxcXHNyY1xcaW5mcmFzdHJ1Y3R1cmVcXHNzaC10dW5uZWwtbWFuYWdlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICdldmVudHMnO1xyXG5pbXBvcnQgeyBzcGF3biwgQ2hpbGRQcm9jZXNzIH0gZnJvbSAnY2hpbGRfcHJvY2Vzcyc7XHJcbmltcG9ydCB7IHByb21pc2VzIGFzIGZzIH0gZnJvbSAnZnMnO1xyXG5pbXBvcnQgeyBqb2luIH0gZnJvbSAncGF0aCc7XHJcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4uL2NvcmUvbG9nZ2luZy9sb2dnZXInO1xyXG5pbXBvcnQgeyBFbmNyeXB0aW9uU2VydmljZSB9IGZyb20gJy4uL3NlY3VyaXR5L2VuY3J5cHRpb24tc2VydmljZSc7XHJcblxyXG4vKipcclxuICogU1NIIFR1bm5lbCBDb25maWd1cmF0aW9uIGludGVyZmFjZVxyXG4gKiBEZWZpbmVzIGFsbCBwYXJhbWV0ZXJzIG5lZWRlZCB0byBlc3RhYmxpc2ggYSBzZWN1cmUgU1NIIHR1bm5lbCB0byBPcmFjbGUgRnJlZSBUaWVyXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFR1bm5lbENvbmZpZyB7XHJcbiAgLyoqIE9yYWNsZSBGcmVlIFRpZXIgSVAgYWRkcmVzcyAqL1xyXG4gIG9yYWNsZUlQOiBzdHJpbmc7XHJcbiAgLyoqIFNTSCBwb3J0IChkZWZhdWx0OiAyMikgKi9cclxuICBzc2hQb3J0OiBudW1iZXI7XHJcbiAgLyoqIFNTSCB1c2VybmFtZSBmb3IgT3JhY2xlIGluc3RhbmNlICovXHJcbiAgdXNlcm5hbWU6IHN0cmluZztcclxuICAvKiogUGF0aCB0byBwcml2YXRlIGtleSBmaWxlICovXHJcbiAgcHJpdmF0ZUtleVBhdGg6IHN0cmluZztcclxuICAvKiogTG9jYWwgcG9ydCBmb3IgdHVubmVsICovXHJcbiAgbG9jYWxQb3J0OiBudW1iZXI7XHJcbiAgLyoqIFJlbW90ZSBwb3J0IG9uIE9yYWNsZSBpbnN0YW5jZSAqL1xyXG4gIHJlbW90ZVBvcnQ6IG51bWJlcjtcclxuICAvKiogRW5hYmxlIFNTSCBrZWVwLWFsaXZlICovXHJcbiAga2VlcEFsaXZlOiBib29sZWFuO1xyXG4gIC8qKiBFbmFibGUgU1NIIGNvbXByZXNzaW9uICovXHJcbiAgY29tcHJlc3Npb246IGJvb2xlYW47XHJcbiAgLyoqIENvbm5lY3Rpb24gdGltZW91dCBpbiBzZWNvbmRzICovXHJcbiAgY29ubmVjdGlvblRpbWVvdXQ6IG51bWJlcjtcclxuICAvKiogU2VydmVyIGFsaXZlIGludGVydmFsIGluIHNlY29uZHMgKi9cclxuICBzZXJ2ZXJBbGl2ZUludGVydmFsOiBudW1iZXI7XHJcbiAgLyoqIE1heGltdW0gc2VydmVyIGFsaXZlIGNvdW50IG1pc3NlcyAqL1xyXG4gIHNlcnZlckFsaXZlQ291bnRNYXg6IG51bWJlcjtcclxufVxyXG5cclxuLyoqXHJcbiAqIFNTSCBUdW5uZWwgQ29ubmVjdGlvbiBpbnRlcmZhY2VcclxuICogUmVwcmVzZW50cyBhbiBhY3RpdmUgU1NIIHR1bm5lbCBjb25uZWN0aW9uIHdpdGggc3RhdGUgbWFuYWdlbWVudFxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBUdW5uZWxDb25uZWN0aW9uIHtcclxuICAvKiogVW5pcXVlIGNvbm5lY3Rpb24gaWRlbnRpZmllciAqL1xyXG4gIGlkOiBzdHJpbmc7XHJcbiAgLyoqIENvbm5lY3Rpb24gY29uZmlndXJhdGlvbiAqL1xyXG4gIGNvbmZpZzogVHVubmVsQ29uZmlnO1xyXG4gIC8qKiBTU0ggcHJvY2VzcyBoYW5kbGUgKi9cclxuICBwcm9jZXNzOiBDaGlsZFByb2Nlc3MgfCBudWxsO1xyXG4gIC8qKiBDb25uZWN0aW9uIHN0YXRlICovXHJcbiAgc3RhdGU6IFR1bm5lbFN0YXRlO1xyXG4gIC8qKiBDb25uZWN0aW9uIGVzdGFibGlzaG1lbnQgdGltZXN0YW1wICovXHJcbiAgY29ubmVjdGVkQXQ6IERhdGUgfCBudWxsO1xyXG4gIC8qKiBMYXN0IGFjdGl2aXR5IHRpbWVzdGFtcCAqL1xyXG4gIGxhc3RBY3Rpdml0eTogRGF0ZTtcclxuICAvKiogQ29ubmVjdGlvbiBzdGF0aXN0aWNzICovXHJcbiAgc3RhdHM6IFR1bm5lbFN0YXRzO1xyXG59XHJcblxyXG4vKipcclxuICogVHVubmVsIGNvbm5lY3Rpb24gc3RhdGVzXHJcbiAqL1xyXG5leHBvcnQgZW51bSBUdW5uZWxTdGF0ZSB7XHJcbiAgRElTQ09OTkVDVEVEID0gJ0RJU0NPTk5FQ1RFRCcsXHJcbiAgQ09OTkVDVElORyA9ICdDT05ORUNUSU5HJyxcclxuICBDT05ORUNURUQgPSAnQ09OTkVDVEVEJyxcclxuICBSRUNPTk5FQ1RJTkcgPSAnUkVDT05ORUNUSU5HJyxcclxuICBGQUlMRUQgPSAnRkFJTEVEJyxcclxuICBURVJNSU5BVEVEID0gJ1RFUk1JTkFURUQnXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUdW5uZWwgY29ubmVjdGlvbiBzdGF0aXN0aWNzXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFR1bm5lbFN0YXRzIHtcclxuICAvKiogVG90YWwgYnl0ZXMgdHJhbnNmZXJyZWQgKi9cclxuICBieXRlc1RyYW5zZmVycmVkOiBudW1iZXI7XHJcbiAgLyoqIENvbm5lY3Rpb24gdXB0aW1lIGluIG1pbGxpc2Vjb25kcyAqL1xyXG4gIHVwdGltZTogbnVtYmVyO1xyXG4gIC8qKiBOdW1iZXIgb2YgcmVjb25uZWN0aW9uIGF0dGVtcHRzICovXHJcbiAgcmVjb25uZWN0QXR0ZW1wdHM6IG51bWJlcjtcclxuICAvKiogTGFzdCBlcnJvciBtZXNzYWdlICovXHJcbiAgbGFzdEVycm9yOiBzdHJpbmcgfCBudWxsO1xyXG4gIC8qKiBDb25uZWN0aW9uIHF1YWxpdHkgc2NvcmUgKDAtMTAwKSAqL1xyXG4gIHF1YWxpdHlTY29yZTogbnVtYmVyO1xyXG59XHJcblxyXG4vKipcclxuICogU1NIIFR1bm5lbCBNYW5hZ2VyXHJcbiAqIE1hbmFnZXMgU1NIIHR1bm5lbCBjb25uZWN0aW9ucyB0byBPcmFjbGUgRnJlZSBUaWVyIHdpdGggYXV0aGVudGljYXRpb24sXHJcbiAqIHN0YXRlIG1hbmFnZW1lbnQsIGFuZCBjb25uZWN0aW9uIHZhbGlkYXRpb25cclxuICovXHJcbmV4cG9ydCBjbGFzcyBTU0hUdW5uZWxNYW5hZ2VyIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcclxuICBwcml2YXRlIGxvZ2dlcjogTG9nZ2VyO1xyXG4gIHByaXZhdGUgZW5jcnlwdGlvblNlcnZpY2U6IEVuY3J5cHRpb25TZXJ2aWNlO1xyXG4gIHByaXZhdGUgY29ubmVjdGlvbnM6IE1hcDxzdHJpbmcsIFR1bm5lbENvbm5lY3Rpb24+O1xyXG4gIHByaXZhdGUgZGVmYXVsdENvbmZpZzogUGFydGlhbDxUdW5uZWxDb25maWc+O1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIGxvZ2dlcjogTG9nZ2VyLFxyXG4gICAgZW5jcnlwdGlvblNlcnZpY2U6IEVuY3J5cHRpb25TZXJ2aWNlXHJcbiAgKSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgdGhpcy5sb2dnZXIgPSBsb2dnZXI7XHJcbiAgICB0aGlzLmVuY3J5cHRpb25TZXJ2aWNlID0gZW5jcnlwdGlvblNlcnZpY2U7XHJcbiAgICB0aGlzLmNvbm5lY3Rpb25zID0gbmV3IE1hcCgpO1xyXG4gICAgXHJcbiAgICAvLyBEZWZhdWx0IGNvbmZpZ3VyYXRpb24gZm9yIE9yYWNsZSBGcmVlIFRpZXJcclxuICAgIHRoaXMuZGVmYXVsdENvbmZpZyA9IHtcclxuICAgICAgb3JhY2xlSVA6ICcxNjguMTM4LjEwNC4xMTcnLFxyXG4gICAgICBzc2hQb3J0OiAyMixcclxuICAgICAga2VlcEFsaXZlOiB0cnVlLFxyXG4gICAgICBjb21wcmVzc2lvbjogdHJ1ZSxcclxuICAgICAgY29ubmVjdGlvblRpbWVvdXQ6IDMwLFxyXG4gICAgICBzZXJ2ZXJBbGl2ZUludGVydmFsOiA2MCxcclxuICAgICAgc2VydmVyQWxpdmVDb3VudE1heDogM1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmxvZ2dlci5pbmZvKCdTU0ggVHVubmVsIE1hbmFnZXIgaW5pdGlhbGl6ZWQnKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZSBhIG5ldyBTU0ggdHVubmVsIGNvbm5lY3Rpb24gdG8gT3JhY2xlIEZyZWUgVGllclxyXG4gICAqIEltcGxlbWVudHMgc2VjdXJlIGF1dGhlbnRpY2F0aW9uIHdpdGggcHJpdmF0ZSBrZXkgbWFuYWdlbWVudFxyXG4gICAqIFxyXG4gICAqIEBwYXJhbSBjb25maWcgLSBUdW5uZWwgY29uZmlndXJhdGlvbiBwYXJhbWV0ZXJzXHJcbiAgICogQHJldHVybnMgUHJvbWlzZSByZXNvbHZpbmcgdG8gdHVubmVsIGNvbm5lY3Rpb25cclxuICAgKi9cclxuICBhc3luYyBjcmVhdGVUdW5uZWwoY29uZmlnOiBQYXJ0aWFsPFR1bm5lbENvbmZpZz4pOiBQcm9taXNlPFR1bm5lbENvbm5lY3Rpb24+IHtcclxuICAgIGNvbnN0IGZ1bGxDb25maWcgPSB7IC4uLnRoaXMuZGVmYXVsdENvbmZpZywgLi4uY29uZmlnIH0gYXMgVHVubmVsQ29uZmlnO1xyXG4gICAgXHJcbiAgICAvLyBWYWxpZGF0ZSBjb25maWd1cmF0aW9uXHJcbiAgICBhd2FpdCB0aGlzLnZhbGlkYXRlVHVubmVsQ29uZmlnKGZ1bGxDb25maWcpO1xyXG4gICAgXHJcbiAgICAvLyBHZW5lcmF0ZSB1bmlxdWUgY29ubmVjdGlvbiBJRFxyXG4gICAgY29uc3QgY29ubmVjdGlvbklkID0gdGhpcy5nZW5lcmF0ZUNvbm5lY3Rpb25JZCgpO1xyXG4gICAgXHJcbiAgICAvLyBDcmVhdGUgY29ubmVjdGlvbiBvYmplY3RcclxuICAgIGNvbnN0IGNvbm5lY3Rpb246IFR1bm5lbENvbm5lY3Rpb24gPSB7XHJcbiAgICAgIGlkOiBjb25uZWN0aW9uSWQsXHJcbiAgICAgIGNvbmZpZzogZnVsbENvbmZpZyxcclxuICAgICAgcHJvY2VzczogbnVsbCxcclxuICAgICAgc3RhdGU6IFR1bm5lbFN0YXRlLkRJU0NPTk5FQ1RFRCxcclxuICAgICAgY29ubmVjdGVkQXQ6IG51bGwsXHJcbiAgICAgIGxhc3RBY3Rpdml0eTogbmV3IERhdGUoKSxcclxuICAgICAgc3RhdHM6IHtcclxuICAgICAgICBieXRlc1RyYW5zZmVycmVkOiAwLFxyXG4gICAgICAgIHVwdGltZTogMCxcclxuICAgICAgICByZWNvbm5lY3RBdHRlbXB0czogMCxcclxuICAgICAgICBsYXN0RXJyb3I6IG51bGwsXHJcbiAgICAgICAgcXVhbGl0eVNjb3JlOiAwXHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLy8gU3RvcmUgY29ubmVjdGlvblxyXG4gICAgdGhpcy5jb25uZWN0aW9ucy5zZXQoY29ubmVjdGlvbklkLCBjb25uZWN0aW9uKTtcclxuICAgIFxyXG4gICAgdGhpcy5sb2dnZXIuaW5mbyhgQ3JlYXRlZCBTU0ggdHVubmVsIGNvbm5lY3Rpb246ICR7Y29ubmVjdGlvbklkfWAsIHtcclxuICAgICAgb3JhY2xlSVA6IGZ1bGxDb25maWcub3JhY2xlSVAsXHJcbiAgICAgIGxvY2FsUG9ydDogZnVsbENvbmZpZy5sb2NhbFBvcnQsXHJcbiAgICAgIHJlbW90ZVBvcnQ6IGZ1bGxDb25maWcucmVtb3RlUG9ydFxyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIGNvbm5lY3Rpb247XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBFc3RhYmxpc2ggU1NIIHR1bm5lbCBjb25uZWN0aW9uXHJcbiAgICogSW1wbGVtZW50cyBjb25uZWN0aW9uIGF1dGhlbnRpY2F0aW9uIGFuZCBzdGF0ZSBtYW5hZ2VtZW50XHJcbiAgICogXHJcbiAgICogQHBhcmFtIGNvbm5lY3Rpb25JZCAtIENvbm5lY3Rpb24gaWRlbnRpZmllclxyXG4gICAqIEByZXR1cm5zIFByb21pc2UgcmVzb2x2aW5nIHdoZW4gY29ubmVjdGlvbiBpcyBlc3RhYmxpc2hlZFxyXG4gICAqL1xyXG4gIGFzeW5jIGVzdGFibGlzaFR1bm5lbChjb25uZWN0aW9uSWQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgY29uc3QgY29ubmVjdGlvbiA9IHRoaXMuY29ubmVjdGlvbnMuZ2V0KGNvbm5lY3Rpb25JZCk7XHJcbiAgICBpZiAoIWNvbm5lY3Rpb24pIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb25uZWN0aW9uIG5vdCBmb3VuZDogJHtjb25uZWN0aW9uSWR9YCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGNvbm5lY3Rpb24uc3RhdGUgPT09IFR1bm5lbFN0YXRlLkNPTk5FQ1RFRCkge1xyXG4gICAgICB0aGlzLmxvZ2dlci53YXJuKGBUdW5uZWwgYWxyZWFkeSBjb25uZWN0ZWQ6ICR7Y29ubmVjdGlvbklkfWApO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgLy8gVXBkYXRlIHN0YXRlIHRvIGNvbm5lY3RpbmdcclxuICAgICAgdGhpcy51cGRhdGVDb25uZWN0aW9uU3RhdGUoY29ubmVjdGlvbiwgVHVubmVsU3RhdGUuQ09OTkVDVElORyk7XHJcbiAgICAgIFxyXG4gICAgICAvLyBWYWxpZGF0ZSBwcml2YXRlIGtleSBleGlzdHMgYW5kIGlzIGFjY2Vzc2libGVcclxuICAgICAgYXdhaXQgdGhpcy52YWxpZGF0ZVByaXZhdGVLZXkoY29ubmVjdGlvbi5jb25maWcucHJpdmF0ZUtleVBhdGgpO1xyXG4gICAgICBcclxuICAgICAgLy8gQnVpbGQgU1NIIGNvbW1hbmQgYXJndW1lbnRzXHJcbiAgICAgIGNvbnN0IHNzaEFyZ3MgPSB0aGlzLmJ1aWxkU1NIQXJndW1lbnRzKGNvbm5lY3Rpb24uY29uZmlnKTtcclxuICAgICAgXHJcbiAgICAgIHRoaXMubG9nZ2VyLmluZm8oYEVzdGFibGlzaGluZyBTU0ggdHVubmVsOiAke2Nvbm5lY3Rpb25JZH1gLCB7XHJcbiAgICAgICAgY29tbWFuZDogJ3NzaCcsXHJcbiAgICAgICAgYXJnczogc3NoQXJncy5maWx0ZXIoYXJnID0+ICFhcmcuaW5jbHVkZXMoJ0lkZW50aXR5RmlsZScpKSAvLyBEb24ndCBsb2cgcHJpdmF0ZSBrZXkgcGF0aFxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8vIFNwYXduIFNTSCBwcm9jZXNzXHJcbiAgICAgIGNvbnN0IHNzaFByb2Nlc3MgPSBzcGF3bignc3NoJywgc3NoQXJncywge1xyXG4gICAgICAgIHN0ZGlvOiBbJ3BpcGUnLCAncGlwZScsICdwaXBlJ10sXHJcbiAgICAgICAgZGV0YWNoZWQ6IGZhbHNlXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgY29ubmVjdGlvbi5wcm9jZXNzID0gc3NoUHJvY2VzcztcclxuXHJcbiAgICAgIC8vIFNldCB1cCBwcm9jZXNzIGV2ZW50IGhhbmRsZXJzXHJcbiAgICAgIHRoaXMuc2V0dXBQcm9jZXNzSGFuZGxlcnMoY29ubmVjdGlvbik7XHJcblxyXG4gICAgICAvLyBXYWl0IGZvciBjb25uZWN0aW9uIGVzdGFibGlzaG1lbnRcclxuICAgICAgYXdhaXQgdGhpcy53YWl0Rm9yQ29ubmVjdGlvbihjb25uZWN0aW9uKTtcclxuICAgICAgXHJcbiAgICAgIC8vIFVwZGF0ZSBjb25uZWN0aW9uIHN0YXRlXHJcbiAgICAgIHRoaXMudXBkYXRlQ29ubmVjdGlvblN0YXRlKGNvbm5lY3Rpb24sIFR1bm5lbFN0YXRlLkNPTk5FQ1RFRCk7XHJcbiAgICAgIGNvbm5lY3Rpb24uY29ubmVjdGVkQXQgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICBcclxuICAgICAgdGhpcy5sb2dnZXIuaW5mbyhgU1NIIHR1bm5lbCBlc3RhYmxpc2hlZCBzdWNjZXNzZnVsbHk6ICR7Y29ubmVjdGlvbklkfWApO1xyXG4gICAgICB0aGlzLmVtaXQoJ3R1bm5lbENvbm5lY3RlZCcsIGNvbm5lY3Rpb24pO1xyXG5cclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIHRoaXMubG9nZ2VyLmVycm9yKGBGYWlsZWQgdG8gZXN0YWJsaXNoIFNTSCB0dW5uZWw6ICR7Y29ubmVjdGlvbklkfWAsIGVycm9yKTtcclxuICAgICAgdGhpcy51cGRhdGVDb25uZWN0aW9uU3RhdGUoY29ubmVjdGlvbiwgVHVubmVsU3RhdGUuRkFJTEVEKTtcclxuICAgICAgY29ubmVjdGlvbi5zdGF0cy5sYXN0RXJyb3IgPSBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFN0cmluZyhlcnJvcik7XHJcbiAgICAgIHRoaXMuZW1pdCgndHVubmVsRXJyb3InLCBjb25uZWN0aW9uLCBlcnJvcik7XHJcbiAgICAgIHRocm93IGVycm9yO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRGlzY29ubmVjdCBTU0ggdHVubmVsXHJcbiAgICogR3JhY2VmdWxseSB0ZXJtaW5hdGVzIHRoZSBTU0ggY29ubmVjdGlvblxyXG4gICAqIFxyXG4gICAqIEBwYXJhbSBjb25uZWN0aW9uSWQgLSBDb25uZWN0aW9uIGlkZW50aWZpZXJcclxuICAgKiBAcmV0dXJucyBQcm9taXNlIHJlc29sdmluZyB3aGVuIGRpc2Nvbm5lY3RlZFxyXG4gICAqL1xyXG4gIGFzeW5jIGRpc2Nvbm5lY3RUdW5uZWwoY29ubmVjdGlvbklkOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIGNvbnN0IGNvbm5lY3Rpb24gPSB0aGlzLmNvbm5lY3Rpb25zLmdldChjb25uZWN0aW9uSWQpO1xyXG4gICAgaWYgKCFjb25uZWN0aW9uKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihgQ29ubmVjdGlvbiBub3QgZm91bmQ6ICR7Y29ubmVjdGlvbklkfWApO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChjb25uZWN0aW9uLnN0YXRlID09PSBUdW5uZWxTdGF0ZS5ESVNDT05ORUNURUQpIHtcclxuICAgICAgdGhpcy5sb2dnZXIud2FybihgVHVubmVsIGFscmVhZHkgZGlzY29ubmVjdGVkOiAke2Nvbm5lY3Rpb25JZH1gKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgIHRoaXMubG9nZ2VyLmluZm8oYERpc2Nvbm5lY3RpbmcgU1NIIHR1bm5lbDogJHtjb25uZWN0aW9uSWR9YCk7XHJcbiAgICAgIFxyXG4gICAgICBpZiAoY29ubmVjdGlvbi5wcm9jZXNzKSB7XHJcbiAgICAgICAgLy8gR3JhY2VmdWwgdGVybWluYXRpb25cclxuICAgICAgICBjb25uZWN0aW9uLnByb2Nlc3Mua2lsbCgnU0lHVEVSTScpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFdhaXQgZm9yIHByb2Nlc3MgdG8gZXhpdFxyXG4gICAgICAgIGF3YWl0IG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlKSA9PiB7XHJcbiAgICAgICAgICBjb25zdCB0aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIEZvcmNlIGtpbGwgaWYgZ3JhY2VmdWwgdGVybWluYXRpb24gZmFpbHNcclxuICAgICAgICAgICAgaWYgKGNvbm5lY3Rpb24ucHJvY2VzcyAmJiAhY29ubmVjdGlvbi5wcm9jZXNzLmtpbGxlZCkge1xyXG4gICAgICAgICAgICAgIGNvbm5lY3Rpb24ucHJvY2Vzcy5raWxsKCdTSUdLSUxMJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgfSwgNTAwMCk7XHJcblxyXG4gICAgICAgICAgY29ubmVjdGlvbi5wcm9jZXNzIS5vbignZXhpdCcsICgpID0+IHtcclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xyXG4gICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy51cGRhdGVDb25uZWN0aW9uU3RhdGUoY29ubmVjdGlvbiwgVHVubmVsU3RhdGUuRElTQ09OTkVDVEVEKTtcclxuICAgICAgY29ubmVjdGlvbi5wcm9jZXNzID0gbnVsbDtcclxuICAgICAgY29ubmVjdGlvbi5jb25uZWN0ZWRBdCA9IG51bGw7XHJcbiAgICAgIFxyXG4gICAgICB0aGlzLmxvZ2dlci5pbmZvKGBTU0ggdHVubmVsIGRpc2Nvbm5lY3RlZDogJHtjb25uZWN0aW9uSWR9YCk7XHJcbiAgICAgIHRoaXMuZW1pdCgndHVubmVsRGlzY29ubmVjdGVkJywgY29ubmVjdGlvbik7XHJcblxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoYEVycm9yIGRpc2Nvbm5lY3RpbmcgU1NIIHR1bm5lbDogJHtjb25uZWN0aW9uSWR9YCwgZXJyb3IpO1xyXG4gICAgICB0aHJvdyBlcnJvcjtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCBjb25uZWN0aW9uIGJ5IElEXHJcbiAgICogXHJcbiAgICogQHBhcmFtIGNvbm5lY3Rpb25JZCAtIENvbm5lY3Rpb24gaWRlbnRpZmllclxyXG4gICAqIEByZXR1cm5zIFR1bm5lbCBjb25uZWN0aW9uIG9yIHVuZGVmaW5lZFxyXG4gICAqL1xyXG4gIGdldENvbm5lY3Rpb24oY29ubmVjdGlvbklkOiBzdHJpbmcpOiBUdW5uZWxDb25uZWN0aW9uIHwgdW5kZWZpbmVkIHtcclxuICAgIHJldHVybiB0aGlzLmNvbm5lY3Rpb25zLmdldChjb25uZWN0aW9uSWQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IGFsbCBjb25uZWN0aW9uc1xyXG4gICAqIFxyXG4gICAqIEByZXR1cm5zIEFycmF5IG9mIGFsbCB0dW5uZWwgY29ubmVjdGlvbnNcclxuICAgKi9cclxuICBnZXRBbGxDb25uZWN0aW9ucygpOiBUdW5uZWxDb25uZWN0aW9uW10ge1xyXG4gICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5jb25uZWN0aW9ucy52YWx1ZXMoKSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXQgYWN0aXZlIGNvbm5lY3Rpb25zXHJcbiAgICogXHJcbiAgICogQHJldHVybnMgQXJyYXkgb2YgY29ubmVjdGVkIHR1bm5lbCBjb25uZWN0aW9uc1xyXG4gICAqL1xyXG4gIGdldEFjdGl2ZUNvbm5lY3Rpb25zKCk6IFR1bm5lbENvbm5lY3Rpb25bXSB7XHJcbiAgICByZXR1cm4gdGhpcy5nZXRBbGxDb25uZWN0aW9ucygpLmZpbHRlcihcclxuICAgICAgY29ubiA9PiBjb25uLnN0YXRlID09PSBUdW5uZWxTdGF0ZS5DT05ORUNURURcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBWYWxpZGF0ZSB0dW5uZWwgY29uZmlndXJhdGlvblxyXG4gICAqIEVuc3VyZXMgYWxsIHJlcXVpcmVkIHBhcmFtZXRlcnMgYXJlIHByZXNlbnQgYW5kIHZhbGlkXHJcbiAgICogXHJcbiAgICogQHBhcmFtIGNvbmZpZyAtIFR1bm5lbCBjb25maWd1cmF0aW9uIHRvIHZhbGlkYXRlXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBhc3luYyB2YWxpZGF0ZVR1bm5lbENvbmZpZyhjb25maWc6IFR1bm5lbENvbmZpZyk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgY29uc3QgcmVxdWlyZWRGaWVsZHM6IChrZXlvZiBUdW5uZWxDb25maWcpW10gPSBbXHJcbiAgICAgICdvcmFjbGVJUCcsICd1c2VybmFtZScsICdwcml2YXRlS2V5UGF0aCcsICdsb2NhbFBvcnQnLCAncmVtb3RlUG9ydCdcclxuICAgIF07XHJcblxyXG4gICAgZm9yIChjb25zdCBmaWVsZCBvZiByZXF1aXJlZEZpZWxkcykge1xyXG4gICAgICBpZiAoIWNvbmZpZ1tmaWVsZF0pIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE1pc3NpbmcgcmVxdWlyZWQgdHVubmVsIGNvbmZpZ3VyYXRpb246ICR7ZmllbGR9YCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBWYWxpZGF0ZSBJUCBhZGRyZXNzIGZvcm1hdFxyXG4gICAgaWYgKCF0aGlzLmlzVmFsaWRJUChjb25maWcub3JhY2xlSVApKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBPcmFjbGUgSVAgYWRkcmVzczogJHtjb25maWcub3JhY2xlSVB9YCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVmFsaWRhdGUgcG9ydCByYW5nZXNcclxuICAgIGlmIChjb25maWcubG9jYWxQb3J0IDwgMSB8fCBjb25maWcubG9jYWxQb3J0ID4gNjU1MzUpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGxvY2FsIHBvcnQ6ICR7Y29uZmlnLmxvY2FsUG9ydH1gKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoY29uZmlnLnJlbW90ZVBvcnQgPCAxIHx8IGNvbmZpZy5yZW1vdGVQb3J0ID4gNjU1MzUpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHJlbW90ZSBwb3J0OiAke2NvbmZpZy5yZW1vdGVQb3J0fWApO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMubG9nZ2VyLmRlYnVnKCdUdW5uZWwgY29uZmlndXJhdGlvbiB2YWxpZGF0ZWQgc3VjY2Vzc2Z1bGx5Jyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBWYWxpZGF0ZSBwcml2YXRlIGtleSBmaWxlIGV4aXN0cyBhbmQgaXMgYWNjZXNzaWJsZVxyXG4gICAqIFxyXG4gICAqIEBwYXJhbSBwcml2YXRlS2V5UGF0aCAtIFBhdGggdG8gcHJpdmF0ZSBrZXkgZmlsZVxyXG4gICAqL1xyXG4gIHByaXZhdGUgYXN5bmMgdmFsaWRhdGVQcml2YXRlS2V5KHByaXZhdGVLZXlQYXRoOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHN0YXRzID0gYXdhaXQgZnMuc3RhdChwcml2YXRlS2V5UGF0aCk7XHJcbiAgICAgIFxyXG4gICAgICBpZiAoIXN0YXRzLmlzRmlsZSgpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBQcml2YXRlIGtleSBwYXRoIGlzIG5vdCBhIGZpbGU6ICR7cHJpdmF0ZUtleVBhdGh9YCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIENoZWNrIGZpbGUgcGVybWlzc2lvbnMgKHNob3VsZCBiZSByZWFkYWJsZSBieSBvd25lciBvbmx5KVxyXG4gICAgICBhd2FpdCBmcy5hY2Nlc3MocHJpdmF0ZUtleVBhdGgsIGZzLmNvbnN0YW50cy5SX09LKTtcclxuICAgICAgXHJcbiAgICAgIHRoaXMubG9nZ2VyLmRlYnVnKGBQcml2YXRlIGtleSB2YWxpZGF0ZWQ6ICR7cHJpdmF0ZUtleVBhdGh9YCk7XHJcbiAgICAgIFxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBQcml2YXRlIGtleSB2YWxpZGF0aW9uIGZhaWxlZDogJHtlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFN0cmluZyhlcnJvcil9YCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBCdWlsZCBTU0ggY29tbWFuZCBhcmd1bWVudHNcclxuICAgKiBcclxuICAgKiBAcGFyYW0gY29uZmlnIC0gVHVubmVsIGNvbmZpZ3VyYXRpb25cclxuICAgKiBAcmV0dXJucyBBcnJheSBvZiBTU0ggY29tbWFuZCBhcmd1bWVudHNcclxuICAgKi9cclxuICBwcml2YXRlIGJ1aWxkU1NIQXJndW1lbnRzKGNvbmZpZzogVHVubmVsQ29uZmlnKTogc3RyaW5nW10ge1xyXG4gICAgY29uc3QgYXJncyA9IFtcclxuICAgICAgJy1OJywgLy8gTm8gcmVtb3RlIGNvbW1hbmQgZXhlY3V0aW9uXHJcbiAgICAgICctVCcsIC8vIERpc2FibGUgcHNldWRvLXRlcm1pbmFsIGFsbG9jYXRpb25cclxuICAgICAgJy1vJywgJ1N0cmljdEhvc3RLZXlDaGVja2luZz1ubycsIC8vIEFjY2VwdCBuZXcgaG9zdCBrZXlzXHJcbiAgICAgICctbycsICdVc2VyS25vd25Ib3N0c0ZpbGU9L2Rldi9udWxsJywgLy8gRG9uJ3Qgc2F2ZSBob3N0IGtleXNcclxuICAgICAgJy1vJywgYENvbm5lY3RUaW1lb3V0PSR7Y29uZmlnLmNvbm5lY3Rpb25UaW1lb3V0fWAsXHJcbiAgICAgICctbycsIGBTZXJ2ZXJBbGl2ZUludGVydmFsPSR7Y29uZmlnLnNlcnZlckFsaXZlSW50ZXJ2YWx9YCxcclxuICAgICAgJy1vJywgYFNlcnZlckFsaXZlQ291bnRNYXg9JHtjb25maWcuc2VydmVyQWxpdmVDb3VudE1heH1gLFxyXG4gICAgICAnLWknLCBjb25maWcucHJpdmF0ZUtleVBhdGgsIC8vIElkZW50aXR5IGZpbGVcclxuICAgICAgJy1wJywgY29uZmlnLnNzaFBvcnQudG9TdHJpbmcoKSwgLy8gU1NIIHBvcnRcclxuICAgICAgJy1MJywgYCR7Y29uZmlnLmxvY2FsUG9ydH06bG9jYWxob3N0OiR7Y29uZmlnLnJlbW90ZVBvcnR9YCwgLy8gTG9jYWwgcG9ydCBmb3J3YXJkaW5nXHJcbiAgICBdO1xyXG5cclxuICAgIC8vIEFkZCBjb21wcmVzc2lvbiBpZiBlbmFibGVkXHJcbiAgICBpZiAoY29uZmlnLmNvbXByZXNzaW9uKSB7XHJcbiAgICAgIGFyZ3MucHVzaCgnLUMnKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBBZGQga2VlcC1hbGl2ZSBpZiBlbmFibGVkXHJcbiAgICBpZiAoY29uZmlnLmtlZXBBbGl2ZSkge1xyXG4gICAgICBhcmdzLnB1c2goJy1vJywgJ1RDUEtlZXBBbGl2ZT15ZXMnKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBBZGQgY29ubmVjdGlvbiB0YXJnZXRcclxuICAgIGFyZ3MucHVzaChgJHtjb25maWcudXNlcm5hbWV9QCR7Y29uZmlnLm9yYWNsZUlQfWApO1xyXG5cclxuICAgIHJldHVybiBhcmdzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2V0IHVwIFNTSCBwcm9jZXNzIGV2ZW50IGhhbmRsZXJzXHJcbiAgICogXHJcbiAgICogQHBhcmFtIGNvbm5lY3Rpb24gLSBUdW5uZWwgY29ubmVjdGlvblxyXG4gICAqL1xyXG4gIHByaXZhdGUgc2V0dXBQcm9jZXNzSGFuZGxlcnMoY29ubmVjdGlvbjogVHVubmVsQ29ubmVjdGlvbik6IHZvaWQge1xyXG4gICAgaWYgKCFjb25uZWN0aW9uLnByb2Nlc3MpIHJldHVybjtcclxuXHJcbiAgICBjb25zdCBwcm9jZXNzID0gY29ubmVjdGlvbi5wcm9jZXNzO1xyXG5cclxuICAgIHByb2Nlc3Muc3Rkb3V0Py5vbignZGF0YScsIChkYXRhKSA9PiB7XHJcbiAgICAgIHRoaXMubG9nZ2VyLmRlYnVnKGBTU0ggc3Rkb3V0IFske2Nvbm5lY3Rpb24uaWR9XTogJHtkYXRhLnRvU3RyaW5nKCkudHJpbSgpfWApO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcHJvY2Vzcy5zdGRlcnI/Lm9uKCdkYXRhJywgKGRhdGEpID0+IHtcclxuICAgICAgY29uc3QgbWVzc2FnZSA9IGRhdGEudG9TdHJpbmcoKS50cmltKCk7XHJcbiAgICAgIHRoaXMubG9nZ2VyLmRlYnVnKGBTU0ggc3RkZXJyIFske2Nvbm5lY3Rpb24uaWR9XTogJHttZXNzYWdlfWApO1xyXG4gICAgICBcclxuICAgICAgLy8gQ2hlY2sgZm9yIGNvbm5lY3Rpb24gc3VjY2VzcyBpbmRpY2F0b3JzXHJcbiAgICAgIGlmIChtZXNzYWdlLmluY2x1ZGVzKCdMb2NhbCBmb3J3YXJkaW5nIGxpc3RlbmluZycpKSB7XHJcbiAgICAgICAgdGhpcy5lbWl0KCd0dW5uZWxSZWFkeScsIGNvbm5lY3Rpb24pO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBwcm9jZXNzLm9uKCdleGl0JywgKGNvZGUsIHNpZ25hbCkgPT4ge1xyXG4gICAgICB0aGlzLmxvZ2dlci5pbmZvKGBTU0ggcHJvY2VzcyBleGl0ZWQgWyR7Y29ubmVjdGlvbi5pZH1dYCwgeyBjb2RlLCBzaWduYWwgfSk7XHJcbiAgICAgIFxyXG4gICAgICBpZiAoY29ubmVjdGlvbi5zdGF0ZSA9PT0gVHVubmVsU3RhdGUuQ09OTkVDVEVEKSB7XHJcbiAgICAgICAgdGhpcy51cGRhdGVDb25uZWN0aW9uU3RhdGUoY29ubmVjdGlvbiwgVHVubmVsU3RhdGUuRElTQ09OTkVDVEVEKTtcclxuICAgICAgICB0aGlzLmVtaXQoJ3R1bm5lbERpc2Nvbm5lY3RlZCcsIGNvbm5lY3Rpb24pO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICBjb25uZWN0aW9uLnByb2Nlc3MgPSBudWxsO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcHJvY2Vzcy5vbignZXJyb3InLCAoZXJyb3IpID0+IHtcclxuICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoYFNTSCBwcm9jZXNzIGVycm9yIFske2Nvbm5lY3Rpb24uaWR9XWAsIGVycm9yKTtcclxuICAgICAgdGhpcy51cGRhdGVDb25uZWN0aW9uU3RhdGUoY29ubmVjdGlvbiwgVHVubmVsU3RhdGUuRkFJTEVEKTtcclxuICAgICAgY29ubmVjdGlvbi5zdGF0cy5sYXN0RXJyb3IgPSBlcnJvci5tZXNzYWdlO1xyXG4gICAgICB0aGlzLmVtaXQoJ3R1bm5lbEVycm9yJywgY29ubmVjdGlvbiwgZXJyb3IpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBXYWl0IGZvciBTU0ggdHVubmVsIGNvbm5lY3Rpb24gdG8gYmUgZXN0YWJsaXNoZWRcclxuICAgKiBcclxuICAgKiBAcGFyYW0gY29ubmVjdGlvbiAtIFR1bm5lbCBjb25uZWN0aW9uXHJcbiAgICogQHBhcmFtIHRpbWVvdXRNcyAtIFRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBhc3luYyB3YWl0Rm9yQ29ubmVjdGlvbihjb25uZWN0aW9uOiBUdW5uZWxDb25uZWN0aW9uLCB0aW1lb3V0TXM6IG51bWJlciA9IDMwMDAwKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICBjb25zdCB0aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihgU1NIIHR1bm5lbCBjb25uZWN0aW9uIHRpbWVvdXQ6ICR7Y29ubmVjdGlvbi5pZH1gKSk7XHJcbiAgICAgIH0sIHRpbWVvdXRNcyk7XHJcblxyXG4gICAgICBjb25zdCBvblJlYWR5ID0gKCkgPT4ge1xyXG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcclxuICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKCd0dW5uZWxFcnJvcicsIG9uRXJyb3IpO1xyXG4gICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIGNvbnN0IG9uRXJyb3IgPSAoY29ubjogVHVubmVsQ29ubmVjdGlvbiwgZXJyb3I6IEVycm9yKSA9PiB7XHJcbiAgICAgICAgaWYgKGNvbm4uaWQgPT09IGNvbm5lY3Rpb24uaWQpIHtcclxuICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcclxuICAgICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIoJ3R1bm5lbFJlYWR5Jywgb25SZWFkeSk7XHJcbiAgICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuXHJcbiAgICAgIHRoaXMub25jZSgndHVubmVsUmVhZHknLCBvblJlYWR5KTtcclxuICAgICAgdGhpcy5vbmNlKCd0dW5uZWxFcnJvcicsIG9uRXJyb3IpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBVcGRhdGUgY29ubmVjdGlvbiBzdGF0ZSBhbmQgZW1pdCBldmVudHNcclxuICAgKiBcclxuICAgKiBAcGFyYW0gY29ubmVjdGlvbiAtIFR1bm5lbCBjb25uZWN0aW9uXHJcbiAgICogQHBhcmFtIG5ld1N0YXRlIC0gTmV3IGNvbm5lY3Rpb24gc3RhdGVcclxuICAgKi9cclxuICBwcml2YXRlIHVwZGF0ZUNvbm5lY3Rpb25TdGF0ZShjb25uZWN0aW9uOiBUdW5uZWxDb25uZWN0aW9uLCBuZXdTdGF0ZTogVHVubmVsU3RhdGUpOiB2b2lkIHtcclxuICAgIGNvbnN0IG9sZFN0YXRlID0gY29ubmVjdGlvbi5zdGF0ZTtcclxuICAgIGNvbm5lY3Rpb24uc3RhdGUgPSBuZXdTdGF0ZTtcclxuICAgIGNvbm5lY3Rpb24ubGFzdEFjdGl2aXR5ID0gbmV3IERhdGUoKTtcclxuXHJcbiAgICB0aGlzLmxvZ2dlci5kZWJ1ZyhgVHVubmVsIHN0YXRlIGNoYW5nZWQgWyR7Y29ubmVjdGlvbi5pZH1dOiAke29sZFN0YXRlfSAtPiAke25ld1N0YXRlfWApO1xyXG4gICAgdGhpcy5lbWl0KCdzdGF0ZUNoYW5nZWQnLCBjb25uZWN0aW9uLCBvbGRTdGF0ZSwgbmV3U3RhdGUpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2VuZXJhdGUgdW5pcXVlIGNvbm5lY3Rpb24gSURcclxuICAgKiBcclxuICAgKiBAcmV0dXJucyBVbmlxdWUgY29ubmVjdGlvbiBpZGVudGlmaWVyXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBnZW5lcmF0ZUNvbm5lY3Rpb25JZCgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIGB0dW5uZWxfJHtEYXRlLm5vdygpfV8ke01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCA5KX1gO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVmFsaWRhdGUgSVAgYWRkcmVzcyBmb3JtYXRcclxuICAgKiBcclxuICAgKiBAcGFyYW0gaXAgLSBJUCBhZGRyZXNzIHRvIHZhbGlkYXRlXHJcbiAgICogQHJldHVybnMgVHJ1ZSBpZiB2YWxpZCBJUCBhZGRyZXNzXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBpc1ZhbGlkSVAoaXA6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgY29uc3QgaXBSZWdleCA9IC9eKD86KD86MjVbMC01XXwyWzAtNF1bMC05XXxbMDFdP1swLTldWzAtOV0/KVxcLil7M30oPzoyNVswLTVdfDJbMC00XVswLTldfFswMV0/WzAtOV1bMC05XT8pJC87XHJcbiAgICByZXR1cm4gaXBSZWdleC50ZXN0KGlwKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENsZWFudXAgYWxsIGNvbm5lY3Rpb25zIG9uIHNodXRkb3duXHJcbiAgICovXHJcbiAgYXN5bmMgY2xlYW51cCgpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIHRoaXMubG9nZ2VyLmluZm8oJ0NsZWFuaW5nIHVwIFNTSCB0dW5uZWwgY29ubmVjdGlvbnMnKTtcclxuICAgIFxyXG4gICAgY29uc3QgZGlzY29ubmVjdFByb21pc2VzID0gQXJyYXkuZnJvbSh0aGlzLmNvbm5lY3Rpb25zLmtleXMoKSkubWFwKFxyXG4gICAgICBjb25uZWN0aW9uSWQgPT4gdGhpcy5kaXNjb25uZWN0VHVubmVsKGNvbm5lY3Rpb25JZCkuY2F0Y2goZXJyb3IgPT4gXHJcbiAgICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoYEVycm9yIGRpc2Nvbm5lY3RpbmcgdHVubmVsICR7Y29ubmVjdGlvbklkfWAsIGVycm9yKVxyXG4gICAgICApXHJcbiAgICApO1xyXG5cclxuICAgIGF3YWl0IFByb21pc2UuYWxsKGRpc2Nvbm5lY3RQcm9taXNlcyk7XHJcbiAgICB0aGlzLmNvbm5lY3Rpb25zLmNsZWFyKCk7XHJcbiAgICBcclxuICAgIHRoaXMubG9nZ2VyLmluZm8oJ1NTSCB0dW5uZWwgY2xlYW51cCBjb21wbGV0ZWQnKTtcclxuICB9XHJcbn0iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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