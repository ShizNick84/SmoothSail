{"version":3,"names":["cov_2pgvlnd7u9","actualCoverage","s","events_1","require","child_process_1","fs_1","TunnelState","f","b","exports","SSHTunnelManager","EventEmitter","logger","encryptionService","connections","defaultConfig","constructor","Map","oracleIP","sshPort","keepAlive","compression","connectionTimeout","serverAliveInterval","serverAliveCountMax","info","createTunnel","config","fullConfig","validateTunnelConfig","connectionId","generateConnectionId","connection","id","process","state","DISCONNECTED","connectedAt","lastActivity","Date","stats","bytesTransferred","uptime","reconnectAttempts","lastError","qualityScore","set","localPort","remotePort","establishTunnel","get","Error","CONNECTED","warn","updateConnectionState","CONNECTING","validatePrivateKey","privateKeyPath","sshArgs","buildSSHArguments","command","args","filter","arg","includes","sshProcess","spawn","stdio","detached","setupProcessHandlers","waitForConnection","emit","error","FAILED","message","String","disconnectTunnel","kill","Promise","resolve","timeout","setTimeout","killed","on","clearTimeout","getConnection","getAllConnections","Array","from","values","getActiveConnections","conn","requiredFields","field","isValidIP","debug","promises","stat","isFile","access","constants","R_OK","toString","push","username","stdout","data","trim","stderr","code","signal","timeoutMs","reject","onReady","removeListener","onError","once","newState","oldState","now","Math","random","substr","ip","ipRegex","test","cleanup","disconnectPromises","keys","map","catch","all","clear"],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\ssh-tunnel-manager.ts"],"sourcesContent":["import { EventEmitter } from 'events';\r\nimport { spawn, ChildProcess } from 'child_process';\r\nimport { promises as fs } from 'fs';\r\nimport { join } from 'path';\r\nimport { Logger } from '../core/logging/logger';\r\nimport { EncryptionService } from '../security/encryption-service';\r\n\r\n/**\r\n * SSH Tunnel Configuration interface\r\n * Defines all parameters needed to establish a secure SSH tunnel to Oracle Free Tier\r\n */\r\nexport interface TunnelConfig {\r\n  /** Oracle Free Tier IP address */\r\n  oracleIP: string;\r\n  /** SSH port (default: 22) */\r\n  sshPort: number;\r\n  /** SSH username for Oracle instance */\r\n  username: string;\r\n  /** Path to private key file */\r\n  privateKeyPath: string;\r\n  /** Local port for tunnel */\r\n  localPort: number;\r\n  /** Remote port on Oracle instance */\r\n  remotePort: number;\r\n  /** Enable SSH keep-alive */\r\n  keepAlive: boolean;\r\n  /** Enable SSH compression */\r\n  compression: boolean;\r\n  /** Connection timeout in seconds */\r\n  connectionTimeout: number;\r\n  /** Server alive interval in seconds */\r\n  serverAliveInterval: number;\r\n  /** Maximum server alive count misses */\r\n  serverAliveCountMax: number;\r\n}\r\n\r\n/**\r\n * SSH Tunnel Connection interface\r\n * Represents an active SSH tunnel connection with state management\r\n */\r\nexport interface TunnelConnection {\r\n  /** Unique connection identifier */\r\n  id: string;\r\n  /** Connection configuration */\r\n  config: TunnelConfig;\r\n  /** SSH process handle */\r\n  process: ChildProcess | null;\r\n  /** Connection state */\r\n  state: TunnelState;\r\n  /** Connection establishment timestamp */\r\n  connectedAt: Date | null;\r\n  /** Last activity timestamp */\r\n  lastActivity: Date;\r\n  /** Connection statistics */\r\n  stats: TunnelStats;\r\n}\r\n\r\n/**\r\n * Tunnel connection states\r\n */\r\nexport enum TunnelState {\r\n  DISCONNECTED = 'DISCONNECTED',\r\n  CONNECTING = 'CONNECTING',\r\n  CONNECTED = 'CONNECTED',\r\n  RECONNECTING = 'RECONNECTING',\r\n  FAILED = 'FAILED',\r\n  TERMINATED = 'TERMINATED'\r\n}\r\n\r\n/**\r\n * Tunnel connection statistics\r\n */\r\nexport interface TunnelStats {\r\n  /** Total bytes transferred */\r\n  bytesTransferred: number;\r\n  /** Connection uptime in milliseconds */\r\n  uptime: number;\r\n  /** Number of reconnection attempts */\r\n  reconnectAttempts: number;\r\n  /** Last error message */\r\n  lastError: string | null;\r\n  /** Connection quality score (0-100) */\r\n  qualityScore: number;\r\n}\r\n\r\n/**\r\n * SSH Tunnel Manager\r\n * Manages SSH tunnel connections to Oracle Free Tier with authentication,\r\n * state management, and connection validation\r\n */\r\nexport class SSHTunnelManager extends EventEmitter {\r\n  private logger: Logger;\r\n  private encryptionService: EncryptionService;\r\n  private connections: Map<string, TunnelConnection>;\r\n  private defaultConfig: Partial<TunnelConfig>;\r\n\r\n  constructor(\r\n    logger: Logger,\r\n    encryptionService: EncryptionService\r\n  ) {\r\n    super();\r\n    this.logger = logger;\r\n    this.encryptionService = encryptionService;\r\n    this.connections = new Map();\r\n    \r\n    // Default configuration for Oracle Free Tier\r\n    this.defaultConfig = {\r\n      oracleIP: '168.138.104.117',\r\n      sshPort: 22,\r\n      keepAlive: true,\r\n      compression: true,\r\n      connectionTimeout: 30,\r\n      serverAliveInterval: 60,\r\n      serverAliveCountMax: 3\r\n    };\r\n\r\n    this.logger.info('SSH Tunnel Manager initialized');\r\n  }\r\n\r\n  /**\r\n   * Create a new SSH tunnel connection to Oracle Free Tier\r\n   * Implements secure authentication with private key management\r\n   * \r\n   * @param config - Tunnel configuration parameters\r\n   * @returns Promise resolving to tunnel connection\r\n   */\r\n  async createTunnel(config: Partial<TunnelConfig>): Promise<TunnelConnection> {\r\n    const fullConfig = { ...this.defaultConfig, ...config } as TunnelConfig;\r\n    \r\n    // Validate configuration\r\n    await this.validateTunnelConfig(fullConfig);\r\n    \r\n    // Generate unique connection ID\r\n    const connectionId = this.generateConnectionId();\r\n    \r\n    // Create connection object\r\n    const connection: TunnelConnection = {\r\n      id: connectionId,\r\n      config: fullConfig,\r\n      process: null,\r\n      state: TunnelState.DISCONNECTED,\r\n      connectedAt: null,\r\n      lastActivity: new Date(),\r\n      stats: {\r\n        bytesTransferred: 0,\r\n        uptime: 0,\r\n        reconnectAttempts: 0,\r\n        lastError: null,\r\n        qualityScore: 0\r\n      }\r\n    };\r\n\r\n    // Store connection\r\n    this.connections.set(connectionId, connection);\r\n    \r\n    this.logger.info(`Created SSH tunnel connection: ${connectionId}`, {\r\n      oracleIP: fullConfig.oracleIP,\r\n      localPort: fullConfig.localPort,\r\n      remotePort: fullConfig.remotePort\r\n    });\r\n\r\n    return connection;\r\n  }\r\n\r\n  /**\r\n   * Establish SSH tunnel connection\r\n   * Implements connection authentication and state management\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @returns Promise resolving when connection is established\r\n   */\r\n  async establishTunnel(connectionId: string): Promise<void> {\r\n    const connection = this.connections.get(connectionId);\r\n    if (!connection) {\r\n      throw new Error(`Connection not found: ${connectionId}`);\r\n    }\r\n\r\n    if (connection.state === TunnelState.CONNECTED) {\r\n      this.logger.warn(`Tunnel already connected: ${connectionId}`);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Update state to connecting\r\n      this.updateConnectionState(connection, TunnelState.CONNECTING);\r\n      \r\n      // Validate private key exists and is accessible\r\n      await this.validatePrivateKey(connection.config.privateKeyPath);\r\n      \r\n      // Build SSH command arguments\r\n      const sshArgs = this.buildSSHArguments(connection.config);\r\n      \r\n      this.logger.info(`Establishing SSH tunnel: ${connectionId}`, {\r\n        command: 'ssh',\r\n        args: sshArgs.filter(arg => !arg.includes('IdentityFile')) // Don't log private key path\r\n      });\r\n\r\n      // Spawn SSH process\r\n      const sshProcess = spawn('ssh', sshArgs, {\r\n        stdio: ['pipe', 'pipe', 'pipe'],\r\n        detached: false\r\n      });\r\n\r\n      connection.process = sshProcess;\r\n\r\n      // Set up process event handlers\r\n      this.setupProcessHandlers(connection);\r\n\r\n      // Wait for connection establishment\r\n      await this.waitForConnection(connection);\r\n      \r\n      // Update connection state\r\n      this.updateConnectionState(connection, TunnelState.CONNECTED);\r\n      connection.connectedAt = new Date();\r\n      \r\n      this.logger.info(`SSH tunnel established successfully: ${connectionId}`);\r\n      this.emit('tunnelConnected', connection);\r\n\r\n    } catch (error) {\r\n      this.logger.error(`Failed to establish SSH tunnel: ${connectionId}`, error);\r\n      this.updateConnectionState(connection, TunnelState.FAILED);\r\n      connection.stats.lastError = error instanceof Error ? error.message : String(error);\r\n      this.emit('tunnelError', connection, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Disconnect SSH tunnel\r\n   * Gracefully terminates the SSH connection\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @returns Promise resolving when disconnected\r\n   */\r\n  async disconnectTunnel(connectionId: string): Promise<void> {\r\n    const connection = this.connections.get(connectionId);\r\n    if (!connection) {\r\n      throw new Error(`Connection not found: ${connectionId}`);\r\n    }\r\n\r\n    if (connection.state === TunnelState.DISCONNECTED) {\r\n      this.logger.warn(`Tunnel already disconnected: ${connectionId}`);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      this.logger.info(`Disconnecting SSH tunnel: ${connectionId}`);\r\n      \r\n      if (connection.process) {\r\n        // Graceful termination\r\n        connection.process.kill('SIGTERM');\r\n        \r\n        // Wait for process to exit\r\n        await new Promise<void>((resolve) => {\r\n          const timeout = setTimeout(() => {\r\n            // Force kill if graceful termination fails\r\n            if (connection.process && !connection.process.killed) {\r\n              connection.process.kill('SIGKILL');\r\n            }\r\n            resolve();\r\n          }, 5000);\r\n\r\n          connection.process!.on('exit', () => {\r\n            clearTimeout(timeout);\r\n            resolve();\r\n          });\r\n        });\r\n      }\r\n\r\n      this.updateConnectionState(connection, TunnelState.DISCONNECTED);\r\n      connection.process = null;\r\n      connection.connectedAt = null;\r\n      \r\n      this.logger.info(`SSH tunnel disconnected: ${connectionId}`);\r\n      this.emit('tunnelDisconnected', connection);\r\n\r\n    } catch (error) {\r\n      this.logger.error(`Error disconnecting SSH tunnel: ${connectionId}`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get connection by ID\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @returns Tunnel connection or undefined\r\n   */\r\n  getConnection(connectionId: string): TunnelConnection | undefined {\r\n    return this.connections.get(connectionId);\r\n  }\r\n\r\n  /**\r\n   * Get all connections\r\n   * \r\n   * @returns Array of all tunnel connections\r\n   */\r\n  getAllConnections(): TunnelConnection[] {\r\n    return Array.from(this.connections.values());\r\n  }\r\n\r\n  /**\r\n   * Get active connections\r\n   * \r\n   * @returns Array of connected tunnel connections\r\n   */\r\n  getActiveConnections(): TunnelConnection[] {\r\n    return this.getAllConnections().filter(\r\n      conn => conn.state === TunnelState.CONNECTED\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Validate tunnel configuration\r\n   * Ensures all required parameters are present and valid\r\n   * \r\n   * @param config - Tunnel configuration to validate\r\n   */\r\n  private async validateTunnelConfig(config: TunnelConfig): Promise<void> {\r\n    const requiredFields: (keyof TunnelConfig)[] = [\r\n      'oracleIP', 'username', 'privateKeyPath', 'localPort', 'remotePort'\r\n    ];\r\n\r\n    for (const field of requiredFields) {\r\n      if (!config[field]) {\r\n        throw new Error(`Missing required tunnel configuration: ${field}`);\r\n      }\r\n    }\r\n\r\n    // Validate IP address format\r\n    if (!this.isValidIP(config.oracleIP)) {\r\n      throw new Error(`Invalid Oracle IP address: ${config.oracleIP}`);\r\n    }\r\n\r\n    // Validate port ranges\r\n    if (config.localPort < 1 || config.localPort > 65535) {\r\n      throw new Error(`Invalid local port: ${config.localPort}`);\r\n    }\r\n\r\n    if (config.remotePort < 1 || config.remotePort > 65535) {\r\n      throw new Error(`Invalid remote port: ${config.remotePort}`);\r\n    }\r\n\r\n    this.logger.debug('Tunnel configuration validated successfully');\r\n  }\r\n\r\n  /**\r\n   * Validate private key file exists and is accessible\r\n   * \r\n   * @param privateKeyPath - Path to private key file\r\n   */\r\n  private async validatePrivateKey(privateKeyPath: string): Promise<void> {\r\n    try {\r\n      const stats = await fs.stat(privateKeyPath);\r\n      \r\n      if (!stats.isFile()) {\r\n        throw new Error(`Private key path is not a file: ${privateKeyPath}`);\r\n      }\r\n\r\n      // Check file permissions (should be readable by owner only)\r\n      await fs.access(privateKeyPath, fs.constants.R_OK);\r\n      \r\n      this.logger.debug(`Private key validated: ${privateKeyPath}`);\r\n      \r\n    } catch (error) {\r\n      throw new Error(`Private key validation failed: ${error instanceof Error ? error.message : String(error)}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Build SSH command arguments\r\n   * \r\n   * @param config - Tunnel configuration\r\n   * @returns Array of SSH command arguments\r\n   */\r\n  private buildSSHArguments(config: TunnelConfig): string[] {\r\n    const args = [\r\n      '-N', // No remote command execution\r\n      '-T', // Disable pseudo-terminal allocation\r\n      '-o', 'StrictHostKeyChecking=no', // Accept new host keys\r\n      '-o', 'UserKnownHostsFile=/dev/null', // Don't save host keys\r\n      '-o', `ConnectTimeout=${config.connectionTimeout}`,\r\n      '-o', `ServerAliveInterval=${config.serverAliveInterval}`,\r\n      '-o', `ServerAliveCountMax=${config.serverAliveCountMax}`,\r\n      '-i', config.privateKeyPath, // Identity file\r\n      '-p', config.sshPort.toString(), // SSH port\r\n      '-L', `${config.localPort}:localhost:${config.remotePort}`, // Local port forwarding\r\n    ];\r\n\r\n    // Add compression if enabled\r\n    if (config.compression) {\r\n      args.push('-C');\r\n    }\r\n\r\n    // Add keep-alive if enabled\r\n    if (config.keepAlive) {\r\n      args.push('-o', 'TCPKeepAlive=yes');\r\n    }\r\n\r\n    // Add connection target\r\n    args.push(`${config.username}@${config.oracleIP}`);\r\n\r\n    return args;\r\n  }\r\n\r\n  /**\r\n   * Set up SSH process event handlers\r\n   * \r\n   * @param connection - Tunnel connection\r\n   */\r\n  private setupProcessHandlers(connection: TunnelConnection): void {\r\n    if (!connection.process) return;\r\n\r\n    const process = connection.process;\r\n\r\n    process.stdout?.on('data', (data) => {\r\n      this.logger.debug(`SSH stdout [${connection.id}]: ${data.toString().trim()}`);\r\n    });\r\n\r\n    process.stderr?.on('data', (data) => {\r\n      const message = data.toString().trim();\r\n      this.logger.debug(`SSH stderr [${connection.id}]: ${message}`);\r\n      \r\n      // Check for connection success indicators\r\n      if (message.includes('Local forwarding listening')) {\r\n        this.emit('tunnelReady', connection);\r\n      }\r\n    });\r\n\r\n    process.on('exit', (code, signal) => {\r\n      this.logger.info(`SSH process exited [${connection.id}]`, { code, signal });\r\n      \r\n      if (connection.state === TunnelState.CONNECTED) {\r\n        this.updateConnectionState(connection, TunnelState.DISCONNECTED);\r\n        this.emit('tunnelDisconnected', connection);\r\n      }\r\n      \r\n      connection.process = null;\r\n    });\r\n\r\n    process.on('error', (error) => {\r\n      this.logger.error(`SSH process error [${connection.id}]`, error);\r\n      this.updateConnectionState(connection, TunnelState.FAILED);\r\n      connection.stats.lastError = error.message;\r\n      this.emit('tunnelError', connection, error);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Wait for SSH tunnel connection to be established\r\n   * \r\n   * @param connection - Tunnel connection\r\n   * @param timeoutMs - Timeout in milliseconds\r\n   */\r\n  private async waitForConnection(connection: TunnelConnection, timeoutMs: number = 30000): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      const timeout = setTimeout(() => {\r\n        reject(new Error(`SSH tunnel connection timeout: ${connection.id}`));\r\n      }, timeoutMs);\r\n\r\n      const onReady = () => {\r\n        clearTimeout(timeout);\r\n        this.removeListener('tunnelError', onError);\r\n        resolve();\r\n      };\r\n\r\n      const onError = (conn: TunnelConnection, error: Error) => {\r\n        if (conn.id === connection.id) {\r\n          clearTimeout(timeout);\r\n          this.removeListener('tunnelReady', onReady);\r\n          reject(error);\r\n        }\r\n      };\r\n\r\n      this.once('tunnelReady', onReady);\r\n      this.once('tunnelError', onError);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update connection state and emit events\r\n   * \r\n   * @param connection - Tunnel connection\r\n   * @param newState - New connection state\r\n   */\r\n  private updateConnectionState(connection: TunnelConnection, newState: TunnelState): void {\r\n    const oldState = connection.state;\r\n    connection.state = newState;\r\n    connection.lastActivity = new Date();\r\n\r\n    this.logger.debug(`Tunnel state changed [${connection.id}]: ${oldState} -> ${newState}`);\r\n    this.emit('stateChanged', connection, oldState, newState);\r\n  }\r\n\r\n  /**\r\n   * Generate unique connection ID\r\n   * \r\n   * @returns Unique connection identifier\r\n   */\r\n  private generateConnectionId(): string {\r\n    return `tunnel_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  /**\r\n   * Validate IP address format\r\n   * \r\n   * @param ip - IP address to validate\r\n   * @returns True if valid IP address\r\n   */\r\n  private isValidIP(ip: string): boolean {\r\n    const ipRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;\r\n    return ipRegex.test(ip);\r\n  }\r\n\r\n  /**\r\n   * Cleanup all connections on shutdown\r\n   */\r\n  async cleanup(): Promise<void> {\r\n    this.logger.info('Cleaning up SSH tunnel connections');\r\n    \r\n    const disconnectPromises = Array.from(this.connections.keys()).map(\r\n      connectionId => this.disconnectTunnel(connectionId).catch(error => \r\n        this.logger.error(`Error disconnecting tunnel ${connectionId}`, error)\r\n      )\r\n    );\r\n\r\n    await Promise.all(disconnectPromises);\r\n    this.connections.clear();\r\n    \r\n    this.logger.info('SSH tunnel cleanup completed');\r\n  }\r\n}"],"mappingsiEE;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAAAA,cAAA,GAAAE,CAAA;;;;;;;AAjEF,MAAAC,QAAA;AAAA;AAAA,CAAAH,cAAA,GAAAE,CAAA,OAAAE,OAAA;AACA,MAAAC,eAAA;AAAA;AAAA,CAAAL,cAAA,GAAAE,CAAA,OAAAE,OAAA;AACA,MAAAE,IAAA;AAAA;AAAA,CAAAN,cAAA,GAAAE,CAAA,OAAAE,OAAA;AAuDA;;;AAGA,IAAYG,WAOX;AAAA;AAAAP,cAAA,GAAAE,CAAA;AAPD,WAAYK,WAAW;EAAA;EAAAP,cAAA,GAAAQ,CAAA;EAAAR,cAAA,GAAAE,CAAA;EACrBK,WAAA,iCAA6B;EAAA;EAAAP,cAAA,GAAAE,CAAA;EAC7BK,WAAA,6BAAyB;EAAA;EAAAP,cAAA,GAAAE,CAAA;EACzBK,WAAA,2BAAuB;EAAA;EAAAP,cAAA,GAAAE,CAAA;EACvBK,WAAA,iCAA6B;EAAA;EAAAP,cAAA,GAAAE,CAAA;EAC7BK,WAAA,qBAAiB;EAAA;EAAAP,cAAA,GAAAE,CAAA;EACjBK,WAAA,6BAAyB;AAC3B,CAAC;AAPW;AAAA,CAAAP,cAAA,GAAAS,CAAA,UAAAF,WAAW;AAAA;AAAA,CAAAP,cAAA,GAAAS,CAAA,UAAAC,OAAA,CAAAH,WAAA,GAAXA,WAAW;AAyBvB;;;;;AAKA,MAAaI,gBAAiB;AAAA;AAAA,CAAQR,QAAA,CAAAS,YAAY;EACxCC,MAAM;EACNC,iBAAiB;EACjBC,WAAW;EACXC,aAAa;EAErBC,YACEJ,MAAc,EACdC,iBAAoC;IAAA;IAAAd,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAE,CAAA;IAEpC,KAAK,EAAE;IAAC;IAAAF,cAAA,GAAAE,CAAA;IACR,IAAI,CAACW,MAAM,GAAGA,MAAM;IAAC;IAAAb,cAAA,GAAAE,CAAA;IACrB,IAAI,CAACY,iBAAiB,GAAGA,iBAAiB;IAAC;IAAAd,cAAA,GAAAE,CAAA;IAC3C,IAAI,CAACa,WAAW,GAAG,IAAIG,GAAG,EAAE;IAE5B;IAAA;IAAAlB,cAAA,GAAAE,CAAA;IACA,IAAI,CAACc,aAAa,GAAG;MACnBG,QAAQ,EAAE,iBAAiB;MAC3BC,OAAO,EAAE,EAAE;MACXC,SAAS,EAAE,IAAI;MACfC,WAAW,EAAE,IAAI;MACjBC,iBAAiB,EAAE,EAAE;MACrBC,mBAAmB,EAAE,EAAE;MACvBC,mBAAmB,EAAE;KACtB;IAAC;IAAAzB,cAAA,GAAAE,CAAA;IAEF,IAAI,CAACW,MAAM,CAACa,IAAI,CAAC,gCAAgC,CAAC;EACpD;EAEA;;;;;;;EAOA,MAAMC,YAAYA,CAACC,MAA6B;IAAA;IAAA5B,cAAA,GAAAQ,CAAA;IAC9C,MAAMqB,UAAU;IAAA;IAAA,CAAA7B,cAAA,GAAAE,CAAA,QAAG;MAAE,GAAG,IAAI,CAACc,aAAa;MAAE,GAAGY;IAAM,CAAkB;IAEvE;IAAA;IAAA5B,cAAA,GAAAE,CAAA;IACA,MAAM,IAAI,CAAC4B,oBAAoB,CAACD,UAAU,CAAC;IAE3C;IACA,MAAME,YAAY;IAAA;IAAA,CAAA/B,cAAA,GAAAE,CAAA,QAAG,IAAI,CAAC8B,oBAAoB,EAAE;IAEhD;IACA,MAAMC,UAAU;IAAA;IAAA,CAAAjC,cAAA,GAAAE,CAAA,QAAqB;MACnCgC,EAAE,EAAEH,YAAY;MAChBH,MAAM,EAAEC,UAAU;MAClBM,OAAO,EAAE,IAAI;MACbC,KAAK,EAAE7B,WAAW,CAAC8B,YAAY;MAC/BC,WAAW,EAAE,IAAI;MACjBC,YAAY,EAAE,IAAIC,IAAI,EAAE;MACxBC,KAAK,EAAE;QACLC,gBAAgB,EAAE,CAAC;QACnBC,MAAM,EAAE,CAAC;QACTC,iBAAiB,EAAE,CAAC;QACpBC,SAAS,EAAE,IAAI;QACfC,YAAY,EAAE;;KAEjB;IAED;IAAA;IAAA9C,cAAA,GAAAE,CAAA;IACA,IAAI,CAACa,WAAW,CAACgC,GAAG,CAAChB,YAAY,EAAEE,UAAU,CAAC;IAAC;IAAAjC,cAAA,GAAAE,CAAA;IAE/C,IAAI,CAACW,MAAM,CAACa,IAAI,CAAC,kCAAkCK,YAAY,EAAE,EAAE;MACjEZ,QAAQ,EAAEU,UAAU,CAACV,QAAQ;MAC7B6B,SAAS,EAAEnB,UAAU,CAACmB,SAAS;MAC/BC,UAAU,EAAEpB,UAAU,CAACoB;KACxB,CAAC;IAAC;IAAAjD,cAAA,GAAAE,CAAA;IAEH,OAAO+B,UAAU;EACnB;EAEA;;;;;;;EAOA,MAAMiB,eAAeA,CAACnB,YAAoB;IAAA;IAAA/B,cAAA,GAAAQ,CAAA;IACxC,MAAMyB,UAAU;IAAA;IAAA,CAAAjC,cAAA,GAAAE,CAAA,QAAG,IAAI,CAACa,WAAW,CAACoC,GAAG,CAACpB,YAAY,CAAC;IAAC;IAAA/B,cAAA,GAAAE,CAAA;IACtD,IAAI,CAAC+B,UAAU,EAAE;MAAA;MAAAjC,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAE,CAAA;MACf,MAAM,IAAIkD,KAAK,CAAC,yBAAyBrB,YAAY,EAAE,CAAC;IAC1D,CAAC;IAAA;IAAA;MAAA/B,cAAA,GAAAS,CAAA;IAAA;IAAAT,cAAA,GAAAE,CAAA;IAED,IAAI+B,UAAU,CAACG,KAAK,KAAK7B,WAAW,CAAC8C,SAAS,EAAE;MAAA;MAAArD,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAE,CAAA;MAC9C,IAAI,CAACW,MAAM,CAACyC,IAAI,CAAC,6BAA6BvB,YAAY,EAAE,CAAC;MAAC;MAAA/B,cAAA,GAAAE,CAAA;MAC9D;IACF,CAAC;IAAA;IAAA;MAAAF,cAAA,GAAAS,CAAA;IAAA;IAAAT,cAAA,GAAAE,CAAA;IAED,IAAI;MAAA;MAAAF,cAAA,GAAAE,CAAA;MACF;MACA,IAAI,CAACqD,qBAAqB,CAACtB,UAAU,EAAE1B,WAAW,CAACiD,UAAU,CAAC;MAE9D;MAAA;MAAAxD,cAAA,GAAAE,CAAA;MACA,MAAM,IAAI,CAACuD,kBAAkB,CAACxB,UAAU,CAACL,MAAM,CAAC8B,cAAc,CAAC;MAE/D;MACA,MAAMC,OAAO;MAAA;MAAA,CAAA3D,cAAA,GAAAE,CAAA,QAAG,IAAI,CAAC0D,iBAAiB,CAAC3B,UAAU,CAACL,MAAM,CAAC;MAAC;MAAA5B,cAAA,GAAAE,CAAA;MAE1D,IAAI,CAACW,MAAM,CAACa,IAAI,CAAC,4BAA4BK,YAAY,EAAE,EAAE;QAC3D8B,OAAO,EAAE,KAAK;QACdC,IAAI,EAAEH,OAAO,CAACI,MAAM,CAACC,GAAG,IAAI;UAAA;UAAAhE,cAAA,GAAAQ,CAAA;UAAAR,cAAA,GAAAE,CAAA;UAAA,QAAC8D,GAAG,CAACC,QAAQ,CAAC,cAAc,CAAC;QAAD,CAAC,CAAC,CAAC;OAC5D,CAAC;MAEF;MACA,MAAMC,UAAU;MAAA;MAAA,CAAAlE,cAAA,GAAAE,CAAA,QAAG,IAAAG,eAAA,CAAA8D,KAAK,EAAC,KAAK,EAAER,OAAO,EAAE;QACvCS,KAAK,EAAE,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC;QAC/BC,QAAQ,EAAE;OACX,CAAC;MAAC;MAAArE,cAAA,GAAAE,CAAA;MAEH+B,UAAU,CAACE,OAAO,GAAG+B,UAAU;MAE/B;MAAA;MAAAlE,cAAA,GAAAE,CAAA;MACA,IAAI,CAACoE,oBAAoB,CAACrC,UAAU,CAAC;MAErC;MAAA;MAAAjC,cAAA,GAAAE,CAAA;MACA,MAAM,IAAI,CAACqE,iBAAiB,CAACtC,UAAU,CAAC;MAExC;MAAA;MAAAjC,cAAA,GAAAE,CAAA;MACA,IAAI,CAACqD,qBAAqB,CAACtB,UAAU,EAAE1B,WAAW,CAAC8C,SAAS,CAAC;MAAC;MAAArD,cAAA,GAAAE,CAAA;MAC9D+B,UAAU,CAACK,WAAW,GAAG,IAAIE,IAAI,EAAE;MAAC;MAAAxC,cAAA,GAAAE,CAAA;MAEpC,IAAI,CAACW,MAAM,CAACa,IAAI,CAAC,wCAAwCK,YAAY,EAAE,CAAC;MAAC;MAAA/B,cAAA,GAAAE,CAAA;MACzE,IAAI,CAACsE,IAAI,CAAC,iBAAiB,EAAEvC,UAAU,CAAC;IAE1C,CAAC,CAAC,OAAOwC,KAAK,EAAE;MAAA;MAAAzE,cAAA,GAAAE,CAAA;MACd,IAAI,CAACW,MAAM,CAAC4D,KAAK,CAAC,mCAAmC1C,YAAY,EAAE,EAAE0C,KAAK,CAAC;MAAC;MAAAzE,cAAA,GAAAE,CAAA;MAC5E,IAAI,CAACqD,qBAAqB,CAACtB,UAAU,EAAE1B,WAAW,CAACmE,MAAM,CAAC;MAAC;MAAA1E,cAAA,GAAAE,CAAA;MAC3D+B,UAAU,CAACQ,KAAK,CAACI,SAAS,GAAG4B,KAAK,YAAYrB,KAAK;MAAA;MAAA,CAAApD,cAAA,GAAAS,CAAA,UAAGgE,KAAK,CAACE,OAAO;MAAA;MAAA,CAAA3E,cAAA,GAAAS,CAAA,UAAGmE,MAAM,CAACH,KAAK,CAAC;MAAC;MAAAzE,cAAA,GAAAE,CAAA;MACpF,IAAI,CAACsE,IAAI,CAAC,aAAa,EAAEvC,UAAU,EAAEwC,KAAK,CAAC;MAAC;MAAAzE,cAAA,GAAAE,CAAA;MAC5C,MAAMuE,KAAK;IACb;EACF;EAEA;;;;;;;EAOA,MAAMI,gBAAgBA,CAAC9C,YAAoB;IAAA;IAAA/B,cAAA,GAAAQ,CAAA;IACzC,MAAMyB,UAAU;IAAA;IAAA,CAAAjC,cAAA,GAAAE,CAAA,QAAG,IAAI,CAACa,WAAW,CAACoC,GAAG,CAACpB,YAAY,CAAC;IAAC;IAAA/B,cAAA,GAAAE,CAAA;IACtD,IAAI,CAAC+B,UAAU,EAAE;MAAA;MAAAjC,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAE,CAAA;MACf,MAAM,IAAIkD,KAAK,CAAC,yBAAyBrB,YAAY,EAAE,CAAC;IAC1D,CAAC;IAAA;IAAA;MAAA/B,cAAA,GAAAS,CAAA;IAAA;IAAAT,cAAA,GAAAE,CAAA;IAED,IAAI+B,UAAU,CAACG,KAAK,KAAK7B,WAAW,CAAC8B,YAAY,EAAE;MAAA;MAAArC,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAE,CAAA;MACjD,IAAI,CAACW,MAAM,CAACyC,IAAI,CAAC,gCAAgCvB,YAAY,EAAE,CAAC;MAAC;MAAA/B,cAAA,GAAAE,CAAA;MACjE;IACF,CAAC;IAAA;IAAA;MAAAF,cAAA,GAAAS,CAAA;IAAA;IAAAT,cAAA,GAAAE,CAAA;IAED,IAAI;MAAA;MAAAF,cAAA,GAAAE,CAAA;MACF,IAAI,CAACW,MAAM,CAACa,IAAI,CAAC,6BAA6BK,YAAY,EAAE,CAAC;MAAC;MAAA/B,cAAA,GAAAE,CAAA;MAE9D,IAAI+B,UAAU,CAACE,OAAO,EAAE;QAAA;QAAAnC,cAAA,GAAAS,CAAA;QAAAT,cAAA,GAAAE,CAAA;QACtB;QACA+B,UAAU,CAACE,OAAO,CAAC2C,IAAI,CAAC,SAAS,CAAC;QAElC;QAAA;QAAA9E,cAAA,GAAAE,CAAA;QACA,MAAM,IAAI6E,OAAO,CAAQC,OAAO,IAAI;UAAA;UAAAhF,cAAA,GAAAQ,CAAA;UAClC,MAAMyE,OAAO;UAAA;UAAA,CAAAjF,cAAA,GAAAE,CAAA,QAAGgF,UAAU,CAAC,MAAK;YAAA;YAAAlF,cAAA,GAAAQ,CAAA;YAAAR,cAAA,GAAAE,CAAA;YAC9B;YACA;YAAI;YAAA,CAAAF,cAAA,GAAAS,CAAA,UAAAwB,UAAU,CAACE,OAAO;YAAA;YAAA,CAAAnC,cAAA,GAAAS,CAAA,UAAI,CAACwB,UAAU,CAACE,OAAO,CAACgD,MAAM,GAAE;cAAA;cAAAnF,cAAA,GAAAS,CAAA;cAAAT,cAAA,GAAAE,CAAA;cACpD+B,UAAU,CAACE,OAAO,CAAC2C,IAAI,CAAC,SAAS,CAAC;YACpC,CAAC;YAAA;YAAA;cAAA9E,cAAA,GAAAS,CAAA;YAAA;YAAAT,cAAA,GAAAE,CAAA;YACD8E,OAAO,EAAE;UACX,CAAC,EAAE,IAAI,CAAC;UAAC;UAAAhF,cAAA,GAAAE,CAAA;UAET+B,UAAU,CAACE,OAAQ,CAACiD,EAAE,CAAC,MAAM,EAAE,MAAK;YAAA;YAAApF,cAAA,GAAAQ,CAAA;YAAAR,cAAA,GAAAE,CAAA;YAClCmF,YAAY,CAACJ,OAAO,CAAC;YAAC;YAAAjF,cAAA,GAAAE,CAAA;YACtB8E,OAAO,EAAE;UACX,CAAC,CAAC;QACJ,CAAC,CAAC;MACJ,CAAC;MAAA;MAAA;QAAAhF,cAAA,GAAAS,CAAA;MAAA;MAAAT,cAAA,GAAAE,CAAA;MAED,IAAI,CAACqD,qBAAqB,CAACtB,UAAU,EAAE1B,WAAW,CAAC8B,YAAY,CAAC;MAAC;MAAArC,cAAA,GAAAE,CAAA;MACjE+B,UAAU,CAACE,OAAO,GAAG,IAAI;MAAC;MAAAnC,cAAA,GAAAE,CAAA;MAC1B+B,UAAU,CAACK,WAAW,GAAG,IAAI;MAAC;MAAAtC,cAAA,GAAAE,CAAA;MAE9B,IAAI,CAACW,MAAM,CAACa,IAAI,CAAC,4BAA4BK,YAAY,EAAE,CAAC;MAAC;MAAA/B,cAAA,GAAAE,CAAA;MAC7D,IAAI,CAACsE,IAAI,CAAC,oBAAoB,EAAEvC,UAAU,CAAC;IAE7C,CAAC,CAAC,OAAOwC,KAAK,EAAE;MAAA;MAAAzE,cAAA,GAAAE,CAAA;MACd,IAAI,CAACW,MAAM,CAAC4D,KAAK,CAAC,mCAAmC1C,YAAY,EAAE,EAAE0C,KAAK,CAAC;MAAC;MAAAzE,cAAA,GAAAE,CAAA;MAC5E,MAAMuE,KAAK;IACb;EACF;EAEA;;;;;;EAMAa,aAAaA,CAACvD,YAAoB;IAAA;IAAA/B,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAE,CAAA;IAChC,OAAO,IAAI,CAACa,WAAW,CAACoC,GAAG,CAACpB,YAAY,CAAC;EAC3C;EAEA;;;;;EAKAwD,iBAAiBA,CAAA;IAAA;IAAAvF,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAE,CAAA;IACf,OAAOsF,KAAK,CAACC,IAAI,CAAC,IAAI,CAAC1E,WAAW,CAAC2E,MAAM,EAAE,CAAC;EAC9C;EAEA;;;;;EAKAC,oBAAoBA,CAAA;IAAA;IAAA3F,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAE,CAAA;IAClB,OAAO,IAAI,CAACqF,iBAAiB,EAAE,CAACxB,MAAM,CACpC6B,IAAI,IAAI;MAAA;MAAA5F,cAAA,GAAAQ,CAAA;MAAAR,cAAA,GAAAE,CAAA;MAAA,OAAA0F,IAAI,CAACxD,KAAK,KAAK7B,WAAW,CAAC8C,SAAS;IAAT,CAAS,CAC7C;EACH;EAEA;;;;;;EAMQ,MAAMvB,oBAAoBA,CAACF,MAAoB;IAAA;IAAA5B,cAAA,GAAAQ,CAAA;IACrD,MAAMqF,cAAc;IAAA;IAAA,CAAA7F,cAAA,GAAAE,CAAA,QAA2B,CAC7C,UAAU,EAAE,UAAU,EAAE,gBAAgB,EAAE,WAAW,EAAE,YAAY,CACpE;IAAC;IAAAF,cAAA,GAAAE,CAAA;IAEF,KAAK,MAAM4F,KAAK,IAAID,cAAc,EAAE;MAAA;MAAA7F,cAAA,GAAAE,CAAA;MAClC,IAAI,CAAC0B,MAAM,CAACkE,KAAK,CAAC,EAAE;QAAA;QAAA9F,cAAA,GAAAS,CAAA;QAAAT,cAAA,GAAAE,CAAA;QAClB,MAAM,IAAIkD,KAAK,CAAC,0CAA0C0C,KAAK,EAAE,CAAC;MACpE,CAAC;MAAA;MAAA;QAAA9F,cAAA,GAAAS,CAAA;MAAA;IACH;IAEA;IAAA;IAAAT,cAAA,GAAAE,CAAA;IACA,IAAI,CAAC,IAAI,CAAC6F,SAAS,CAACnE,MAAM,CAACT,QAAQ,CAAC,EAAE;MAAA;MAAAnB,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAE,CAAA;MACpC,MAAM,IAAIkD,KAAK,CAAC,8BAA8BxB,MAAM,CAACT,QAAQ,EAAE,CAAC;IAClE,CAAC;IAAA;IAAA;MAAAnB,cAAA,GAAAS,CAAA;IAAA;IAED;IAAAT,cAAA,GAAAE,CAAA;IACA;IAAI;IAAA,CAAAF,cAAA,GAAAS,CAAA,WAAAmB,MAAM,CAACoB,SAAS,GAAG,CAAC;IAAA;IAAA,CAAAhD,cAAA,GAAAS,CAAA,WAAImB,MAAM,CAACoB,SAAS,GAAG,KAAK,GAAE;MAAA;MAAAhD,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAE,CAAA;MACpD,MAAM,IAAIkD,KAAK,CAAC,uBAAuBxB,MAAM,CAACoB,SAAS,EAAE,CAAC;IAC5D,CAAC;IAAA;IAAA;MAAAhD,cAAA,GAAAS,CAAA;IAAA;IAAAT,cAAA,GAAAE,CAAA;IAED;IAAI;IAAA,CAAAF,cAAA,GAAAS,CAAA,WAAAmB,MAAM,CAACqB,UAAU,GAAG,CAAC;IAAA;IAAA,CAAAjD,cAAA,GAAAS,CAAA,WAAImB,MAAM,CAACqB,UAAU,GAAG,KAAK,GAAE;MAAA;MAAAjD,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAE,CAAA;MACtD,MAAM,IAAIkD,KAAK,CAAC,wBAAwBxB,MAAM,CAACqB,UAAU,EAAE,CAAC;IAC9D,CAAC;IAAA;IAAA;MAAAjD,cAAA,GAAAS,CAAA;IAAA;IAAAT,cAAA,GAAAE,CAAA;IAED,IAAI,CAACW,MAAM,CAACmF,KAAK,CAAC,6CAA6C,CAAC;EAClE;EAEA;;;;;EAKQ,MAAMvC,kBAAkBA,CAACC,cAAsB;IAAA;IAAA1D,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAE,CAAA;IACrD,IAAI;MACF,MAAMuC,KAAK;MAAA;MAAA,CAAAzC,cAAA,GAAAE,CAAA,QAAG,MAAMI,IAAA,CAAA2F,QAAE,CAACC,IAAI,CAACxC,cAAc,CAAC;MAAC;MAAA1D,cAAA,GAAAE,CAAA;MAE5C,IAAI,CAACuC,KAAK,CAAC0D,MAAM,EAAE,EAAE;QAAA;QAAAnG,cAAA,GAAAS,CAAA;QAAAT,cAAA,GAAAE,CAAA;QACnB,MAAM,IAAIkD,KAAK,CAAC,mCAAmCM,cAAc,EAAE,CAAC;MACtE,CAAC;MAAA;MAAA;QAAA1D,cAAA,GAAAS,CAAA;MAAA;MAED;MAAAT,cAAA,GAAAE,CAAA;MACA,MAAMI,IAAA,CAAA2F,QAAE,CAACG,MAAM,CAAC1C,cAAc,EAAEpD,IAAA,CAAA2F,QAAE,CAACI,SAAS,CAACC,IAAI,CAAC;MAAC;MAAAtG,cAAA,GAAAE,CAAA;MAEnD,IAAI,CAACW,MAAM,CAACmF,KAAK,CAAC,0BAA0BtC,cAAc,EAAE,CAAC;IAE/D,CAAC,CAAC,OAAOe,KAAK,EAAE;MAAA;MAAAzE,cAAA,GAAAE,CAAA;MACd,MAAM,IAAIkD,KAAK,CAAC,kCAAkCqB,KAAK,YAAYrB,KAAK;MAAA;MAAA,CAAApD,cAAA,GAAAS,CAAA,WAAGgE,KAAK,CAACE,OAAO;MAAA;MAAA,CAAA3E,cAAA,GAAAS,CAAA,WAAGmE,MAAM,CAACH,KAAK,CAAC,GAAE,CAAC;IAC7G;EACF;EAEA;;;;;;EAMQb,iBAAiBA,CAAChC,MAAoB;IAAA;IAAA5B,cAAA,GAAAQ,CAAA;IAC5C,MAAMsD,IAAI;IAAA;IAAA,CAAA9D,cAAA,GAAAE,CAAA,QAAG,CACX,IAAI;IAAE;IACN,IAAI;IAAE;IACN,IAAI,EAAE,0BAA0B;IAAE;IAClC,IAAI,EAAE,8BAA8B;IAAE;IACtC,IAAI,EAAE,kBAAkB0B,MAAM,CAACL,iBAAiB,EAAE,EAClD,IAAI,EAAE,uBAAuBK,MAAM,CAACJ,mBAAmB,EAAE,EACzD,IAAI,EAAE,uBAAuBI,MAAM,CAACH,mBAAmB,EAAE,EACzD,IAAI,EAAEG,MAAM,CAAC8B,cAAc;IAAE;IAC7B,IAAI,EAAE9B,MAAM,CAACR,OAAO,CAACmF,QAAQ,EAAE;IAAE;IACjC,IAAI,EAAE,GAAG3E,MAAM,CAACoB,SAAS,cAAcpB,MAAM,CAACqB,UAAU,EAAE,CAAE;IAAA,CAC7D;IAED;IAAA;IAAAjD,cAAA,GAAAE,CAAA;IACA,IAAI0B,MAAM,CAACN,WAAW,EAAE;MAAA;MAAAtB,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAE,CAAA;MACtB4D,IAAI,CAAC0C,IAAI,CAAC,IAAI,CAAC;IACjB,CAAC;IAAA;IAAA;MAAAxG,cAAA,GAAAS,CAAA;IAAA;IAED;IAAAT,cAAA,GAAAE,CAAA;IACA,IAAI0B,MAAM,CAACP,SAAS,EAAE;MAAA;MAAArB,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAE,CAAA;MACpB4D,IAAI,CAAC0C,IAAI,CAAC,IAAI,EAAE,kBAAkB,CAAC;IACrC,CAAC;IAAA;IAAA;MAAAxG,cAAA,GAAAS,CAAA;IAAA;IAED;IAAAT,cAAA,GAAAE,CAAA;IACA4D,IAAI,CAAC0C,IAAI,CAAC,GAAG5E,MAAM,CAAC6E,QAAQ,IAAI7E,MAAM,CAACT,QAAQ,EAAE,CAAC;IAAC;IAAAnB,cAAA,GAAAE,CAAA;IAEnD,OAAO4D,IAAI;EACb;EAEA;;;;;EAKQQ,oBAAoBA,CAACrC,UAA4B;IAAA;IAAAjC,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAE,CAAA;IACvD,IAAI,CAAC+B,UAAU,CAACE,OAAO,EAAE;MAAA;MAAAnC,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAE,CAAA;MAAA;IAAA,CAAO;IAAA;IAAA;MAAAF,cAAA,GAAAS,CAAA;IAAA;IAEhC,MAAM0B,OAAO;IAAA;IAAA,CAAAnC,cAAA,GAAAE,CAAA,SAAG+B,UAAU,CAACE,OAAO;IAAC;IAAAnC,cAAA,GAAAE,CAAA;IAEnCiC,OAAO,CAACuE,MAAM,EAAEtB,EAAE,CAAC,MAAM,EAAGuB,IAAI,IAAI;MAAA;MAAA3G,cAAA,GAAAQ,CAAA;MAAAR,cAAA,GAAAE,CAAA;MAClC,IAAI,CAACW,MAAM,CAACmF,KAAK,CAAC,eAAe/D,UAAU,CAACC,EAAE,MAAMyE,IAAI,CAACJ,QAAQ,EAAE,CAACK,IAAI,EAAE,EAAE,CAAC;IAC/E,CAAC,CAAC;IAAC;IAAA5G,cAAA,GAAAE,CAAA;IAEHiC,OAAO,CAAC0E,MAAM,EAAEzB,EAAE,CAAC,MAAM,EAAGuB,IAAI,IAAI;MAAA;MAAA3G,cAAA,GAAAQ,CAAA;MAClC,MAAMmE,OAAO;MAAA;MAAA,CAAA3E,cAAA,GAAAE,CAAA,SAAGyG,IAAI,CAACJ,QAAQ,EAAE,CAACK,IAAI,EAAE;MAAC;MAAA5G,cAAA,GAAAE,CAAA;MACvC,IAAI,CAACW,MAAM,CAACmF,KAAK,CAAC,eAAe/D,UAAU,CAACC,EAAE,MAAMyC,OAAO,EAAE,CAAC;MAE9D;MAAA;MAAA3E,cAAA,GAAAE,CAAA;MACA,IAAIyE,OAAO,CAACV,QAAQ,CAAC,4BAA4B,CAAC,EAAE;QAAA;QAAAjE,cAAA,GAAAS,CAAA;QAAAT,cAAA,GAAAE,CAAA;QAClD,IAAI,CAACsE,IAAI,CAAC,aAAa,EAAEvC,UAAU,CAAC;MACtC,CAAC;MAAA;MAAA;QAAAjC,cAAA,GAAAS,CAAA;MAAA;IACH,CAAC,CAAC;IAAC;IAAAT,cAAA,GAAAE,CAAA;IAEHiC,OAAO,CAACiD,EAAE,CAAC,MAAM,EAAE,CAAC0B,IAAI,EAAEC,MAAM,KAAI;MAAA;MAAA/G,cAAA,GAAAQ,CAAA;MAAAR,cAAA,GAAAE,CAAA;MAClC,IAAI,CAACW,MAAM,CAACa,IAAI,CAAC,uBAAuBO,UAAU,CAACC,EAAE,GAAG,EAAE;QAAE4E,IAAI;QAAEC;MAAM,CAAE,CAAC;MAAC;MAAA/G,cAAA,GAAAE,CAAA;MAE5E,IAAI+B,UAAU,CAACG,KAAK,KAAK7B,WAAW,CAAC8C,SAAS,EAAE;QAAA;QAAArD,cAAA,GAAAS,CAAA;QAAAT,cAAA,GAAAE,CAAA;QAC9C,IAAI,CAACqD,qBAAqB,CAACtB,UAAU,EAAE1B,WAAW,CAAC8B,YAAY,CAAC;QAAC;QAAArC,cAAA,GAAAE,CAAA;QACjE,IAAI,CAACsE,IAAI,CAAC,oBAAoB,EAAEvC,UAAU,CAAC;MAC7C,CAAC;MAAA;MAAA;QAAAjC,cAAA,GAAAS,CAAA;MAAA;MAAAT,cAAA,GAAAE,CAAA;MAED+B,UAAU,CAACE,OAAO,GAAG,IAAI;IAC3B,CAAC,CAAC;IAAC;IAAAnC,cAAA,GAAAE,CAAA;IAEHiC,OAAO,CAACiD,EAAE,CAAC,OAAO,EAAGX,KAAK,IAAI;MAAA;MAAAzE,cAAA,GAAAQ,CAAA;MAAAR,cAAA,GAAAE,CAAA;MAC5B,IAAI,CAACW,MAAM,CAAC4D,KAAK,CAAC,sBAAsBxC,UAAU,CAACC,EAAE,GAAG,EAAEuC,KAAK,CAAC;MAAC;MAAAzE,cAAA,GAAAE,CAAA;MACjE,IAAI,CAACqD,qBAAqB,CAACtB,UAAU,EAAE1B,WAAW,CAACmE,MAAM,CAAC;MAAC;MAAA1E,cAAA,GAAAE,CAAA;MAC3D+B,UAAU,CAACQ,KAAK,CAACI,SAAS,GAAG4B,KAAK,CAACE,OAAO;MAAC;MAAA3E,cAAA,GAAAE,CAAA;MAC3C,IAAI,CAACsE,IAAI,CAAC,aAAa,EAAEvC,UAAU,EAAEwC,KAAK,CAAC;IAC7C,CAAC,CAAC;EACJ;EAEA;;;;;;EAMQ,MAAMF,iBAAiBA,CAACtC,UAA4B,EAAE+E,SAAA;EAAA;EAAA,CAAAhH,cAAA,GAAAS,CAAA,WAAoB,KAAK;IAAA;IAAAT,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAE,CAAA;IACrF,OAAO,IAAI6E,OAAO,CAAC,CAACC,OAAO,EAAEiC,MAAM,KAAI;MAAA;MAAAjH,cAAA,GAAAQ,CAAA;MACrC,MAAMyE,OAAO;MAAA;MAAA,CAAAjF,cAAA,GAAAE,CAAA,SAAGgF,UAAU,CAAC,MAAK;QAAA;QAAAlF,cAAA,GAAAQ,CAAA;QAAAR,cAAA,GAAAE,CAAA;QAC9B+G,MAAM,CAAC,IAAI7D,KAAK,CAAC,kCAAkCnB,UAAU,CAACC,EAAE,EAAE,CAAC,CAAC;MACtE,CAAC,EAAE8E,SAAS,CAAC;MAAC;MAAAhH,cAAA,GAAAE,CAAA;MAEd,MAAMgH,OAAO,GAAGA,CAAA,KAAK;QAAA;QAAAlH,cAAA,GAAAQ,CAAA;QAAAR,cAAA,GAAAE,CAAA;QACnBmF,YAAY,CAACJ,OAAO,CAAC;QAAC;QAAAjF,cAAA,GAAAE,CAAA;QACtB,IAAI,CAACiH,cAAc,CAAC,aAAa,EAAEC,OAAO,CAAC;QAAC;QAAApH,cAAA,GAAAE,CAAA;QAC5C8E,OAAO,EAAE;MACX,CAAC;MAAC;MAAAhF,cAAA,GAAAE,CAAA;MAEF,MAAMkH,OAAO,GAAGA,CAACxB,IAAsB,EAAEnB,KAAY,KAAI;QAAA;QAAAzE,cAAA,GAAAQ,CAAA;QAAAR,cAAA,GAAAE,CAAA;QACvD,IAAI0F,IAAI,CAAC1D,EAAE,KAAKD,UAAU,CAACC,EAAE,EAAE;UAAA;UAAAlC,cAAA,GAAAS,CAAA;UAAAT,cAAA,GAAAE,CAAA;UAC7BmF,YAAY,CAACJ,OAAO,CAAC;UAAC;UAAAjF,cAAA,GAAAE,CAAA;UACtB,IAAI,CAACiH,cAAc,CAAC,aAAa,EAAED,OAAO,CAAC;UAAC;UAAAlH,cAAA,GAAAE,CAAA;UAC5C+G,MAAM,CAACxC,KAAK,CAAC;QACf,CAAC;QAAA;QAAA;UAAAzE,cAAA,GAAAS,CAAA;QAAA;MACH,CAAC;MAAC;MAAAT,cAAA,GAAAE,CAAA;MAEF,IAAI,CAACmH,IAAI,CAAC,aAAa,EAAEH,OAAO,CAAC;MAAC;MAAAlH,cAAA,GAAAE,CAAA;MAClC,IAAI,CAACmH,IAAI,CAAC,aAAa,EAAED,OAAO,CAAC;IACnC,CAAC,CAAC;EACJ;EAEA;;;;;;EAMQ7D,qBAAqBA,CAACtB,UAA4B,EAAEqF,QAAqB;IAAA;IAAAtH,cAAA,GAAAQ,CAAA;IAC/E,MAAM+G,QAAQ;IAAA;IAAA,CAAAvH,cAAA,GAAAE,CAAA,SAAG+B,UAAU,CAACG,KAAK;IAAC;IAAApC,cAAA,GAAAE,CAAA;IAClC+B,UAAU,CAACG,KAAK,GAAGkF,QAAQ;IAAC;IAAAtH,cAAA,GAAAE,CAAA;IAC5B+B,UAAU,CAACM,YAAY,GAAG,IAAIC,IAAI,EAAE;IAAC;IAAAxC,cAAA,GAAAE,CAAA;IAErC,IAAI,CAACW,MAAM,CAACmF,KAAK,CAAC,yBAAyB/D,UAAU,CAACC,EAAE,MAAMqF,QAAQ,OAAOD,QAAQ,EAAE,CAAC;IAAC;IAAAtH,cAAA,GAAAE,CAAA;IACzF,IAAI,CAACsE,IAAI,CAAC,cAAc,EAAEvC,UAAU,EAAEsF,QAAQ,EAAED,QAAQ,CAAC;EAC3D;EAEA;;;;;EAKQtF,oBAAoBA,CAAA;IAAA;IAAAhC,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAE,CAAA;IAC1B,OAAO,UAAUsC,IAAI,CAACgF,GAAG,EAAE,IAAIC,IAAI,CAACC,MAAM,EAAE,CAACnB,QAAQ,CAAC,EAAE,CAAC,CAACoB,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;EAC1E;EAEA;;;;;;EAMQ5B,SAASA,CAAC6B,EAAU;IAAA;IAAA5H,cAAA,GAAAQ,CAAA;IAC1B,MAAMqH,OAAO;IAAA;IAAA,CAAA7H,cAAA,GAAAE,CAAA,SAAG,6FAA6F;IAAC;IAAAF,cAAA,GAAAE,CAAA;IAC9G,OAAO2H,OAAO,CAACC,IAAI,CAACF,EAAE,CAAC;EACzB;EAEA;;;EAGA,MAAMG,OAAOA,CAAA;IAAA;IAAA/H,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAE,CAAA;IACX,IAAI,CAACW,MAAM,CAACa,IAAI,CAAC,oCAAoC,CAAC;IAEtD,MAAMsG,kBAAkB;IAAA;IAAA,CAAAhI,cAAA,GAAAE,CAAA,SAAGsF,KAAK,CAACC,IAAI,CAAC,IAAI,CAAC1E,WAAW,CAACkH,IAAI,EAAE,CAAC,CAACC,GAAG,CAChEnG,YAAY,IAAI;MAAA;MAAA/B,cAAA,GAAAQ,CAAA;MAAAR,cAAA,GAAAE,CAAA;MAAA,WAAI,CAAC2E,gBAAgB,CAAC9C,YAAY,CAAC,CAACoG,KAAK,CAAC1D,KAAK,IAC7D;QAAA;QAAAzE,cAAA,GAAAQ,CAAA;QAAAR,cAAA,GAAAE,CAAA;QAAA,WAAI,CAACW,MAAM,CAAC4D,KAAK,CAAC,8BAA8B1C,YAAY,EAAE,EAAE0C,KAAK,CAAC;MAAD,CAAC,CACvE;IADuE,CACvE,CACF;IAAC;IAAAzE,cAAA,GAAAE,CAAA;IAEF,MAAM6E,OAAO,CAACqD,GAAG,CAACJ,kBAAkB,CAAC;IAAC;IAAAhI,cAAA,GAAAE,CAAA;IACtC,IAAI,CAACa,WAAW,CAACsH,KAAK,EAAE;IAAC;IAAArI,cAAA,GAAAE,CAAA;IAEzB,IAAI,CAACW,MAAM,CAACa,IAAI,CAAC,8BAA8B,CAAC;EAClD;;AACD;AAAA1B,cAAA,GAAAE,CAAA;AAzbDQ,OAAA,CAAAC,gBAAA,GAAAA,gBAAA","ignoreList":[]}