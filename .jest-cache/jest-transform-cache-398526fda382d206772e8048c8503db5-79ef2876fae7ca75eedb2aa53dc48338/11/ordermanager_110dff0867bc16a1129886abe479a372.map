{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\orders\\order-manager.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\orders\\order-manager.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * ORDER MANAGEMENT AND EXECUTION SYSTEM\r\n * =============================================================================\r\n * \r\n * This module implements a comprehensive order management system for Gate.io\r\n * cryptocurrency trading with validation, confirmation, status monitoring,\r\n * and comprehensive audit logging for all order operations.\r\n * \r\n * SECURITY FEATURES:\r\n * - Order validation with risk assessment before placement\r\n * - Real-time order status monitoring and updates\r\n * - Comprehensive audit logging for all order operations\r\n * - Order cancellation and modification with safety checks\r\n * - Position tracking and reconciliation\r\n * - Emergency stop-loss and position closure capabilities\r\n * \r\n * CRITICAL TRADING NOTICE:\r\n * This system handles real financial assets and trading operations.\r\n * All order operations must be validated and logged for audit compliance.\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport { EventEmitter } from 'events';\r\nimport { logger } from '@/core/logging/logger';\r\nimport { AuditService } from '@/security/audit-service';\r\nimport { GateIOClient } from '../api/gate-io-client';\r\nimport { \r\n  OrderRequest, \r\n  OrderResponse, \r\n  OrderModifyRequest, \r\n  OrderStatus, \r\n  OrderSide, \r\n  OrderType,\r\n  TradingSymbol,\r\n  TimeInForce \r\n} from '../api/types';\r\n\r\n/**\r\n * Order validation result\r\n */\r\ninterface OrderValidationResult {\r\n  isValid: boolean;\r\n  errors: string[];\r\n  warnings: string[];\r\n  riskScore: number; // 0-100\r\n  estimatedCost: number;\r\n  estimatedFees: number;\r\n}\r\n\r\n/**\r\n * Order execution result\r\n */\r\ninterface OrderExecutionResult {\r\n  success: boolean;\r\n  order: OrderResponse | null;\r\n  executionTime: number;\r\n  error?: string;\r\n  validationResult: OrderValidationResult;\r\n}\r\n\r\n/**\r\n * Order status update\r\n */\r\ninterface OrderStatusUpdate {\r\n  orderId: string;\r\n  oldStatus: OrderStatus;\r\n  newStatus: OrderStatus;\r\n  timestamp: Date;\r\n  filledAmount?: string;\r\n  remainingAmount?: string;\r\n  averagePrice?: string;\r\n}\r\n\r\n/**\r\n * Position summary\r\n */\r\ninterface PositionSummary {\r\n  symbol: string;\r\n  side: 'long' | 'short' | 'neutral';\r\n  totalAmount: number;\r\n  averagePrice: number;\r\n  unrealizedPnL: number;\r\n  realizedPnL: number;\r\n  openOrders: OrderResponse[];\r\n  lastUpdate: Date;\r\n}\r\n\r\n/**\r\n * Order management statistics\r\n */\r\ninterface OrderManagementStats {\r\n  totalOrders: number;\r\n  successfulOrders: number;\r\n  failedOrders: number;\r\n  cancelledOrders: number;\r\n  totalVolume: number;\r\n  totalFees: number;\r\n  averageExecutionTime: number;\r\n  successRate: number;\r\n  lastOrderTime: Date | null;\r\n}\r\n\r\n/**\r\n * Order execution configuration\r\n */\r\ninterface OrderExecutionConfig {\r\n  enablePreValidation: boolean;\r\n  enablePostValidation: boolean;\r\n  maxOrderValue: number;\r\n  maxDailyVolume: number;\r\n  enableRiskChecks: boolean;\r\n  confirmationRequired: boolean;\r\n  executionTimeout: number;\r\n}\r\n\r\n/**\r\n * Order Management and Execution System\r\n * Handles all order lifecycle operations with comprehensive validation and monitoring\r\n */\r\nexport class OrderManager extends EventEmitter {\r\n  private gateIOClient: GateIOClient;\r\n  private auditService: AuditService;\r\n  private activeOrders: Map<string, OrderResponse> = new Map();\r\n  private orderHistory: OrderResponse[] = [];\r\n  private positions: Map<string, PositionSummary> = new Map();\r\n  private stats: OrderManagementStats;\r\n  private config: OrderExecutionConfig;\r\n  \r\n  // Monitoring and validation\r\n  private statusMonitorInterval: NodeJS.Timeout | null = null;\r\n  private readonly statusCheckInterval: number = 5000; // 5 seconds\r\n  private readonly maxOrderAge: number = 86400000; // 24 hours in milliseconds\r\n\r\n  constructor(gateIOClient: GateIOClient) {\r\n    super();\r\n    \r\n    this.gateIOClient = gateIOClient;\r\n    this.auditService = new AuditService();\r\n    \r\n    // Initialize statistics\r\n    this.stats = {\r\n      totalOrders: 0,\r\n      successfulOrders: 0,\r\n      failedOrders: 0,\r\n      cancelledOrders: 0,\r\n      totalVolume: 0,\r\n      totalFees: 0,\r\n      averageExecutionTime: 0,\r\n      successRate: 0,\r\n      lastOrderTime: null,\r\n    };\r\n    \r\n    // Default configuration\r\n    this.config = {\r\n      enablePreValidation: true,\r\n      enablePostValidation: true,\r\n      maxOrderValue: 10000, // $10,000 USD\r\n      maxDailyVolume: 100000, // $100,000 USD\r\n      enableRiskChecks: true,\r\n      confirmationRequired: false,\r\n      executionTimeout: 30000, // 30 seconds\r\n    };\r\n    \r\n    logger.info('💹 Order Manager initialized with comprehensive validation');\r\n  }\r\n\r\n  /**\r\n   * Initialize order manager with configuration\r\n   * \r\n   * @param config - Order execution configuration\r\n   * @returns Promise<boolean> - Success status\r\n   */\r\n  public async initialize(config?: Partial<OrderExecutionConfig>): Promise<boolean> {\r\n    try {\r\n      logger.info('🚀 Initializing Order Manager...');\r\n      \r\n      // Update configuration\r\n      if (config) {\r\n        this.config = { ...this.config, ...config };\r\n      }\r\n      \r\n      // Load existing orders from exchange\r\n      await this.loadExistingOrders();\r\n      \r\n      // Start order status monitoring\r\n      this.startOrderStatusMonitoring();\r\n      \r\n      // Initialize position tracking\r\n      await this.initializePositionTracking();\r\n      \r\n      await this.auditService.logSecurityEvent({\r\n        type: 'ORDER_MANAGER_INITIALIZED',\r\n        severity: 'INFO',\r\n        details: { config: this.config },\r\n        timestamp: new Date(),\r\n      });\r\n      \r\n      logger.info('✅ Order Manager initialized successfully');\r\n      return true;\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to initialize Order Manager:', error);\r\n      await this.auditService.logSecurityEvent({\r\n        type: 'ORDER_MANAGER_INIT_FAILED',\r\n        severity: 'ERROR',\r\n        details: { error: error.message },\r\n        timestamp: new Date(),\r\n      });\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Place new order with comprehensive validation and confirmation\r\n   * \r\n   * @param orderRequest - Order request parameters\r\n   * @returns Promise<OrderExecutionResult> - Order execution result\r\n   */\r\n  public async placeOrder(orderRequest: OrderRequest): Promise<OrderExecutionResult> {\r\n    const startTime = Date.now();\r\n    \r\n    try {\r\n      logger.info(`📝 Placing ${orderRequest.side} order for ${orderRequest.amount} ${orderRequest.currency_pair}`);\r\n      \r\n      // Pre-validation\r\n      const validationResult = await this.validateOrder(orderRequest);\r\n      if (!validationResult.isValid) {\r\n        const error = `Order validation failed: ${validationResult.errors.join(', ')}`;\r\n        await this.logOrderEvent('ORDER_VALIDATION_FAILED', orderRequest, { validationResult });\r\n        return {\r\n          success: false,\r\n          order: null,\r\n          executionTime: Date.now() - startTime,\r\n          error,\r\n          validationResult,\r\n        };\r\n      }\r\n      \r\n      // Log validation warnings if any\r\n      if (validationResult.warnings.length > 0) {\r\n        logger.warn('⚠️ Order validation warnings:', validationResult.warnings);\r\n      }\r\n      \r\n      // Risk assessment\r\n      if (this.config.enableRiskChecks) {\r\n        const riskAssessment = await this.assessOrderRisk(orderRequest, validationResult);\r\n        if (riskAssessment.riskScore > 80) {\r\n          const error = `Order risk score too high: ${riskAssessment.riskScore}/100`;\r\n          await this.logOrderEvent('ORDER_HIGH_RISK_REJECTED', orderRequest, { riskAssessment });\r\n          return {\r\n            success: false,\r\n            order: null,\r\n            executionTime: Date.now() - startTime,\r\n            error,\r\n            validationResult,\r\n          };\r\n        }\r\n      }\r\n      \r\n      // Execute order through Gate.io API\r\n      const orderResponse = await this.executeOrder(orderRequest);\r\n      \r\n      // Post-validation\r\n      if (this.config.enablePostValidation) {\r\n        const postValidation = await this.validateOrderExecution(orderRequest, orderResponse);\r\n        if (!postValidation.isValid) {\r\n          logger.error('❌ Post-execution validation failed:', postValidation.errors);\r\n          // Attempt to cancel the order if validation fails\r\n          await this.cancelOrder(orderResponse.id, 'Post-validation failure');\r\n        }\r\n      }\r\n      \r\n      // Store order in active orders\r\n      this.activeOrders.set(orderResponse.id, orderResponse);\r\n      this.orderHistory.push(orderResponse);\r\n      \r\n      // Update statistics\r\n      const executionTime = Date.now() - startTime;\r\n      this.updateOrderStats(true, executionTime, parseFloat(orderRequest.amount), validationResult.estimatedFees);\r\n      \r\n      // Update position tracking\r\n      await this.updatePositionTracking(orderResponse);\r\n      \r\n      // Log successful order placement\r\n      await this.logOrderEvent('ORDER_PLACED_SUCCESS', orderRequest, { \r\n        orderResponse, \r\n        executionTime,\r\n        validationResult \r\n      });\r\n      \r\n      // Emit order placed event\r\n      this.emit('orderPlaced', orderResponse);\r\n      \r\n      logger.info(`✅ Order placed successfully: ${orderResponse.id} (${executionTime}ms)`);\r\n      \r\n      return {\r\n        success: true,\r\n        order: orderResponse,\r\n        executionTime,\r\n        validationResult,\r\n      };\r\n      \r\n    } catch (error) {\r\n      const executionTime = Date.now() - startTime;\r\n      \r\n      // Update statistics\r\n      this.updateOrderStats(false, executionTime, 0, 0);\r\n      \r\n      // Log failed order placement\r\n      await this.logOrderEvent('ORDER_PLACEMENT_FAILED', orderRequest, { \r\n        error: error.message,\r\n        executionTime \r\n      });\r\n      \r\n      logger.error(`❌ Failed to place order: ${error.message}`);\r\n      \r\n      return {\r\n        success: false,\r\n        order: null,\r\n        executionTime,\r\n        error: error.message,\r\n        validationResult: {\r\n          isValid: false,\r\n          errors: [error.message],\r\n          warnings: [],\r\n          riskScore: 100,\r\n          estimatedCost: 0,\r\n          estimatedFees: 0,\r\n        },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cancel existing order with safety checks\r\n   * \r\n   * @param orderId - Order ID to cancel\r\n   * @param reason - Cancellation reason\r\n   * @returns Promise<boolean> - Success status\r\n   */\r\n  public async cancelOrder(orderId: string, reason: string = 'User requested'): Promise<boolean> {\r\n    try {\r\n      logger.info(`🚫 Cancelling order: ${orderId} (reason: ${reason})`);\r\n      \r\n      // Check if order exists and is cancellable\r\n      const order = this.activeOrders.get(orderId);\r\n      if (!order) {\r\n        logger.warn(`⚠️ Order not found in active orders: ${orderId}`);\r\n        return false;\r\n      }\r\n      \r\n      if (order.status === 'closed' || order.status === 'cancelled') {\r\n        logger.warn(`⚠️ Order already ${order.status}: ${orderId}`);\r\n        return false;\r\n      }\r\n      \r\n      // Execute cancellation through Gate.io API\r\n      await this.gateIOClient.makeRequest({\r\n        method: 'DELETE',\r\n        url: `/spot/orders/${orderId}`,\r\n        data: { currency_pair: order.currency_pair },\r\n      });\r\n      \r\n      // Update order status\r\n      const updatedOrder = { ...order, status: 'cancelled' as OrderStatus };\r\n      this.activeOrders.set(orderId, updatedOrder);\r\n      \r\n      // Update statistics\r\n      this.stats.cancelledOrders++;\r\n      \r\n      // Log cancellation\r\n      await this.logOrderEvent('ORDER_CANCELLED', order, { reason });\r\n      \r\n      // Emit order cancelled event\r\n      this.emit('orderCancelled', updatedOrder, reason);\r\n      \r\n      logger.info(`✅ Order cancelled successfully: ${orderId}`);\r\n      return true;\r\n      \r\n    } catch (error) {\r\n      logger.error(`❌ Failed to cancel order ${orderId}:`, error);\r\n      await this.logOrderEvent('ORDER_CANCELLATION_FAILED', { orderId }, { \r\n        error: error.message, \r\n        reason \r\n      });\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Modify existing order\r\n   * \r\n   * @param orderId - Order ID to modify\r\n   * @param modifications - Order modifications\r\n   * @returns Promise<OrderResponse | null> - Modified order or null if failed\r\n   */\r\n  public async modifyOrder(\r\n    orderId: string, \r\n    modifications: OrderModifyRequest\r\n  ): Promise<OrderResponse | null> {\r\n    try {\r\n      logger.info(`✏️ Modifying order: ${orderId}`);\r\n      \r\n      // Check if order exists and is modifiable\r\n      const order = this.activeOrders.get(orderId);\r\n      if (!order) {\r\n        logger.warn(`⚠️ Order not found: ${orderId}`);\r\n        return null;\r\n      }\r\n      \r\n      if (order.status !== 'open') {\r\n        logger.warn(`⚠️ Order not modifiable (status: ${order.status}): ${orderId}`);\r\n        return null;\r\n      }\r\n      \r\n      // Validate modifications\r\n      const validationResult = await this.validateOrderModification(order, modifications);\r\n      if (!validationResult.isValid) {\r\n        logger.error('❌ Order modification validation failed:', validationResult.errors);\r\n        return null;\r\n      }\r\n      \r\n      // Execute modification through Gate.io API\r\n      const modifiedOrder = await this.gateIOClient.makeRequest<OrderResponse>({\r\n        method: 'PATCH',\r\n        url: `/spot/orders/${orderId}`,\r\n        data: {\r\n          currency_pair: order.currency_pair,\r\n          ...modifications,\r\n        },\r\n      });\r\n      \r\n      // Update stored order\r\n      this.activeOrders.set(orderId, modifiedOrder);\r\n      \r\n      // Log modification\r\n      await this.logOrderEvent('ORDER_MODIFIED', order, { \r\n        modifications, \r\n        modifiedOrder,\r\n        validationResult \r\n      });\r\n      \r\n      // Emit order modified event\r\n      this.emit('orderModified', modifiedOrder, modifications);\r\n      \r\n      logger.info(`✅ Order modified successfully: ${orderId}`);\r\n      return modifiedOrder;\r\n      \r\n    } catch (error) {\r\n      logger.error(`❌ Failed to modify order ${orderId}:`, error);\r\n      await this.logOrderEvent('ORDER_MODIFICATION_FAILED', { orderId }, { \r\n        error: error.message, \r\n        modifications \r\n      });\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get order status with real-time updates\r\n   * \r\n   * @param orderId - Order ID\r\n   * @returns Promise<OrderResponse | null> - Order details or null if not found\r\n   */\r\n  public async getOrderStatus(orderId: string): Promise<OrderResponse | null> {\r\n    try {\r\n      // First check local cache\r\n      const cachedOrder = this.activeOrders.get(orderId);\r\n      \r\n      // Fetch latest status from exchange\r\n      const orderResponse = await this.gateIOClient.makeRequest<OrderResponse>({\r\n        method: 'GET',\r\n        url: `/spot/orders/${orderId}`,\r\n        params: { currency_pair: cachedOrder?.currency_pair || 'BTC_USDT' },\r\n      });\r\n      \r\n      // Update local cache\r\n      if (orderResponse) {\r\n        this.activeOrders.set(orderId, orderResponse);\r\n        \r\n        // Check for status changes\r\n        if (cachedOrder && cachedOrder.status !== orderResponse.status) {\r\n          await this.handleOrderStatusChange(cachedOrder, orderResponse);\r\n        }\r\n      }\r\n      \r\n      return orderResponse;\r\n      \r\n    } catch (error) {\r\n      logger.error(`❌ Failed to get order status ${orderId}:`, error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all active orders\r\n   * \r\n   * @returns Array of active orders\r\n   */\r\n  public getActiveOrders(): OrderResponse[] {\r\n    return Array.from(this.activeOrders.values()).filter(\r\n      order => order.status === 'open'\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get order history\r\n   * \r\n   * @param limit - Maximum number of orders to return\r\n   * @returns Array of historical orders\r\n   */\r\n  public getOrderHistory(limit: number = 100): OrderResponse[] {\r\n    return this.orderHistory\r\n      .sort((a, b) => new Date(b.create_time).getTime() - new Date(a.create_time).getTime())\r\n      .slice(0, limit);\r\n  }\r\n\r\n  /**\r\n   * Get position summary for symbol\r\n   * \r\n   * @param symbol - Trading symbol\r\n   * @returns Position summary or null if no position\r\n   */\r\n  public getPosition(symbol: string): PositionSummary | null {\r\n    return this.positions.get(symbol) || null;\r\n  }\r\n\r\n  /**\r\n   * Get all positions\r\n   * \r\n   * @returns Array of all position summaries\r\n   */\r\n  public getAllPositions(): PositionSummary[] {\r\n    return Array.from(this.positions.values());\r\n  }\r\n\r\n  /**\r\n   * Emergency stop - cancel all open orders\r\n   * \r\n   * @param reason - Emergency stop reason\r\n   * @returns Promise<boolean> - Success status\r\n   */\r\n  public async emergencyStop(reason: string = 'Emergency stop triggered'): Promise<boolean> {\r\n    try {\r\n      logger.warn(`🚨 EMERGENCY STOP: ${reason}`);\r\n      \r\n      const activeOrders = this.getActiveOrders();\r\n      const cancellationPromises = activeOrders.map(order => \r\n        this.cancelOrder(order.id, `Emergency stop: ${reason}`)\r\n      );\r\n      \r\n      const results = await Promise.allSettled(cancellationPromises);\r\n      const successCount = results.filter(result => \r\n        result.status === 'fulfilled' && result.value === true\r\n      ).length;\r\n      \r\n      await this.auditService.logSecurityEvent({\r\n        type: 'EMERGENCY_STOP_EXECUTED',\r\n        severity: 'CRITICAL',\r\n        details: { \r\n          reason, \r\n          totalOrders: activeOrders.length, \r\n          cancelledOrders: successCount \r\n        },\r\n        timestamp: new Date(),\r\n      });\r\n      \r\n      logger.warn(`🚨 Emergency stop completed: ${successCount}/${activeOrders.length} orders cancelled`);\r\n      \r\n      // Emit emergency stop event\r\n      this.emit('emergencyStop', reason, successCount, activeOrders.length);\r\n      \r\n      return successCount === activeOrders.length;\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Emergency stop failed:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate order before placement\r\n   * \r\n   * @param orderRequest - Order request to validate\r\n   * @returns Promise<OrderValidationResult> - Validation result\r\n   */\r\n  private async validateOrder(orderRequest: OrderRequest): Promise<OrderValidationResult> {\r\n    const errors: string[] = [];\r\n    const warnings: string[] = [];\r\n    let riskScore = 0;\r\n    \r\n    // Validate required fields\r\n    if (!orderRequest.currency_pair) {\r\n      errors.push('Currency pair is required');\r\n    }\r\n    \r\n    if (!orderRequest.side) {\r\n      errors.push('Order side is required');\r\n    }\r\n    \r\n    if (!orderRequest.amount || parseFloat(orderRequest.amount) <= 0) {\r\n      errors.push('Order amount must be positive');\r\n    }\r\n    \r\n    if (orderRequest.type === 'limit' && (!orderRequest.price || parseFloat(orderRequest.price) <= 0)) {\r\n      errors.push('Limit orders require a positive price');\r\n    }\r\n    \r\n    // Validate order size limits\r\n    const orderValue = parseFloat(orderRequest.amount) * (parseFloat(orderRequest.price || '0') || 1);\r\n    if (orderValue > this.config.maxOrderValue) {\r\n      errors.push(`Order value exceeds maximum: ${orderValue} > ${this.config.maxOrderValue}`);\r\n      riskScore += 30;\r\n    }\r\n    \r\n    // Check daily volume limits\r\n    const todayVolume = this.calculateTodayVolume();\r\n    if (todayVolume + orderValue > this.config.maxDailyVolume) {\r\n      warnings.push(`Order would exceed daily volume limit: ${todayVolume + orderValue} > ${this.config.maxDailyVolume}`);\r\n      riskScore += 20;\r\n    }\r\n    \r\n    // Estimate costs and fees\r\n    const estimatedCost = orderValue;\r\n    const estimatedFees = orderValue * 0.002; // Assume 0.2% fee\r\n    \r\n    // Check account balance (simplified)\r\n    try {\r\n      const balances = await this.gateIOClient.makeRequest({\r\n        method: 'GET',\r\n        url: '/spot/accounts',\r\n      });\r\n      \r\n      // Add balance validation logic here\r\n      // This is simplified - in production, you'd check specific currency balances\r\n      \r\n    } catch (error) {\r\n      warnings.push('Could not verify account balance');\r\n      riskScore += 10;\r\n    }\r\n    \r\n    return {\r\n      isValid: errors.length === 0,\r\n      errors,\r\n      warnings,\r\n      riskScore,\r\n      estimatedCost,\r\n      estimatedFees,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Execute order through Gate.io API\r\n   * \r\n   * @param orderRequest - Order request\r\n   * @returns Promise<OrderResponse> - Order response\r\n   */\r\n  private async executeOrder(orderRequest: OrderRequest): Promise<OrderResponse> {\r\n    const orderResponse = await this.gateIOClient.makeRequest<OrderResponse>({\r\n      method: 'POST',\r\n      url: '/spot/orders',\r\n      data: orderRequest,\r\n    });\r\n    \r\n    return orderResponse;\r\n  }\r\n\r\n  /**\r\n   * Validate order execution\r\n   * \r\n   * @param orderRequest - Original order request\r\n   * @param orderResponse - Order response from exchange\r\n   * @returns Promise<OrderValidationResult> - Validation result\r\n   */\r\n  private async validateOrderExecution(\r\n    orderRequest: OrderRequest, \r\n    orderResponse: OrderResponse\r\n  ): Promise<OrderValidationResult> {\r\n    const errors: string[] = [];\r\n    const warnings: string[] = [];\r\n    \r\n    // Validate response matches request\r\n    if (orderResponse.currency_pair !== orderRequest.currency_pair) {\r\n      errors.push('Currency pair mismatch');\r\n    }\r\n    \r\n    if (orderResponse.side !== orderRequest.side) {\r\n      errors.push('Order side mismatch');\r\n    }\r\n    \r\n    if (orderResponse.type !== orderRequest.type) {\r\n      errors.push('Order type mismatch');\r\n    }\r\n    \r\n    if (Math.abs(parseFloat(orderResponse.amount) - parseFloat(orderRequest.amount)) > 0.00001) {\r\n      errors.push('Order amount mismatch');\r\n    }\r\n    \r\n    // Validate order was accepted\r\n    if (!orderResponse.id) {\r\n      errors.push('Order ID not received');\r\n    }\r\n    \r\n    if (orderResponse.status === 'cancelled' || orderResponse.status === 'expired') {\r\n      warnings.push(`Order immediately ${orderResponse.status}`);\r\n    }\r\n    \r\n    return {\r\n      isValid: errors.length === 0,\r\n      errors,\r\n      warnings,\r\n      riskScore: errors.length > 0 ? 100 : warnings.length * 10,\r\n      estimatedCost: 0,\r\n      estimatedFees: 0,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Assess order risk\r\n   * \r\n   * @param orderRequest - Order request\r\n   * @param validationResult - Validation result\r\n   * @returns Promise<any> - Risk assessment\r\n   */\r\n  private async assessOrderRisk(\r\n    orderRequest: OrderRequest, \r\n    validationResult: OrderValidationResult\r\n  ): Promise<any> {\r\n    // Simplified risk assessment\r\n    // In production, this would include more sophisticated risk models\r\n    return {\r\n      riskScore: validationResult.riskScore,\r\n      factors: validationResult.warnings,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Validate order modification\r\n   * \r\n   * @param order - Original order\r\n   * @param modifications - Proposed modifications\r\n   * @returns Promise<OrderValidationResult> - Validation result\r\n   */\r\n  private async validateOrderModification(\r\n    order: OrderResponse, \r\n    modifications: OrderModifyRequest\r\n  ): Promise<OrderValidationResult> {\r\n    const errors: string[] = [];\r\n    const warnings: string[] = [];\r\n    \r\n    // Validate modification parameters\r\n    if (modifications.price && parseFloat(modifications.price) <= 0) {\r\n      errors.push('Modified price must be positive');\r\n    }\r\n    \r\n    if (modifications.amount && parseFloat(modifications.amount) <= 0) {\r\n      errors.push('Modified amount must be positive');\r\n    }\r\n    \r\n    // Check if modifications are significant\r\n    if (modifications.price && Math.abs(parseFloat(modifications.price) - parseFloat(order.price)) < 0.01) {\r\n      warnings.push('Price modification is very small');\r\n    }\r\n    \r\n    return {\r\n      isValid: errors.length === 0,\r\n      errors,\r\n      warnings,\r\n      riskScore: errors.length * 20,\r\n      estimatedCost: 0,\r\n      estimatedFees: 0,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Handle order status changes\r\n   * \r\n   * @param oldOrder - Previous order state\r\n   * @param newOrder - New order state\r\n   */\r\n  private async handleOrderStatusChange(\r\n    oldOrder: OrderResponse, \r\n    newOrder: OrderResponse\r\n  ): Promise<void> {\r\n    const statusUpdate: OrderStatusUpdate = {\r\n      orderId: newOrder.id,\r\n      oldStatus: oldOrder.status,\r\n      newStatus: newOrder.status,\r\n      timestamp: new Date(),\r\n      filledAmount: newOrder.filled_total,\r\n      remainingAmount: newOrder.left,\r\n      averagePrice: newOrder.price,\r\n    };\r\n    \r\n    // Log status change\r\n    await this.logOrderEvent('ORDER_STATUS_CHANGED', newOrder, { statusUpdate });\r\n    \r\n    // Update position tracking\r\n    await this.updatePositionTracking(newOrder);\r\n    \r\n    // Emit status change event\r\n    this.emit('orderStatusChanged', statusUpdate);\r\n    \r\n    logger.info(`📊 Order status changed: ${statusUpdate.orderId} (${statusUpdate.oldStatus} -> ${statusUpdate.newStatus})`);\r\n  }\r\n\r\n  /**\r\n   * Load existing orders from exchange\r\n   */\r\n  private async loadExistingOrders(): Promise<void> {\r\n    try {\r\n      // Load open orders for each supported trading pair\r\n      const symbols: TradingSymbol[] = ['BTC_USDT', 'ETH_USDT'];\r\n      \r\n      for (const symbol of symbols) {\r\n        const orders = await this.gateIOClient.makeRequest<OrderResponse[]>({\r\n          method: 'GET',\r\n          url: '/spot/orders',\r\n          params: { \r\n            currency_pair: symbol,\r\n            status: 'open',\r\n            limit: 100 \r\n          },\r\n        });\r\n        \r\n        // Store active orders\r\n        orders.forEach(order => {\r\n          this.activeOrders.set(order.id, order);\r\n          this.orderHistory.push(order);\r\n        });\r\n      }\r\n      \r\n      logger.info(`📋 Loaded ${this.activeOrders.size} existing orders`);\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to load existing orders:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Start order status monitoring\r\n   */\r\n  private startOrderStatusMonitoring(): void {\r\n    this.statusMonitorInterval = setInterval(async () => {\r\n      await this.monitorOrderStatuses();\r\n    }, this.statusCheckInterval);\r\n    \r\n    logger.info('👁️ Started order status monitoring');\r\n  }\r\n\r\n  /**\r\n   * Monitor order statuses\r\n   */\r\n  private async monitorOrderStatuses(): Promise<void> {\r\n    const activeOrders = this.getActiveOrders();\r\n    \r\n    for (const order of activeOrders) {\r\n      try {\r\n        await this.getOrderStatus(order.id);\r\n      } catch (error) {\r\n        logger.error(`❌ Failed to monitor order ${order.id}:`, error);\r\n      }\r\n    }\r\n    \r\n    // Clean up old orders\r\n    await this.cleanupOldOrders();\r\n  }\r\n\r\n  /**\r\n   * Initialize position tracking\r\n   */\r\n  private async initializePositionTracking(): Promise<void> {\r\n    try {\r\n      // Initialize positions for supported symbols\r\n      const symbols: TradingSymbol[] = ['BTC_USDT', 'ETH_USDT'];\r\n      \r\n      for (const symbol of symbols) {\r\n        this.positions.set(symbol, {\r\n          symbol,\r\n          side: 'neutral',\r\n          totalAmount: 0,\r\n          averagePrice: 0,\r\n          unrealizedPnL: 0,\r\n          realizedPnL: 0,\r\n          openOrders: [],\r\n          lastUpdate: new Date(),\r\n        });\r\n      }\r\n      \r\n      logger.info('📊 Position tracking initialized');\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to initialize position tracking:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update position tracking\r\n   * \r\n   * @param order - Order to update position with\r\n   */\r\n  private async updatePositionTracking(order: OrderResponse): Promise<void> {\r\n    try {\r\n      const position = this.positions.get(order.currency_pair);\r\n      if (!position) return;\r\n      \r\n      // Update position based on order status\r\n      if (order.status === 'closed') {\r\n        const filledAmount = parseFloat(order.filled_total);\r\n        const price = parseFloat(order.price);\r\n        \r\n        if (order.side === 'buy') {\r\n          position.totalAmount += filledAmount;\r\n        } else {\r\n          position.totalAmount -= filledAmount;\r\n        }\r\n        \r\n        // Recalculate average price (simplified)\r\n        if (position.totalAmount > 0) {\r\n          position.averagePrice = price; // Simplified calculation\r\n        }\r\n      }\r\n      \r\n      // Update open orders\r\n      position.openOrders = this.getActiveOrders().filter(\r\n        o => o.currency_pair === order.currency_pair\r\n      );\r\n      \r\n      position.lastUpdate = new Date();\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to update position tracking:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate today's trading volume\r\n   */\r\n  private calculateTodayVolume(): number {\r\n    const today = new Date();\r\n    today.setHours(0, 0, 0, 0);\r\n    \r\n    return this.orderHistory\r\n      .filter(order => new Date(order.create_time) >= today)\r\n      .reduce((total, order) => {\r\n        const volume = parseFloat(order.amount) * parseFloat(order.price);\r\n        return total + volume;\r\n      }, 0);\r\n  }\r\n\r\n  /**\r\n   * Update order statistics\r\n   * \r\n   * @param success - Order success status\r\n   * @param executionTime - Execution time in milliseconds\r\n   * @param volume - Order volume\r\n   * @param fees - Order fees\r\n   */\r\n  private updateOrderStats(\r\n    success: boolean, \r\n    executionTime: number, \r\n    volume: number, \r\n    fees: number\r\n  ): void {\r\n    this.stats.totalOrders++;\r\n    this.stats.lastOrderTime = new Date();\r\n    \r\n    if (success) {\r\n      this.stats.successfulOrders++;\r\n      this.stats.totalVolume += volume;\r\n      this.stats.totalFees += fees;\r\n    } else {\r\n      this.stats.failedOrders++;\r\n    }\r\n    \r\n    // Update average execution time\r\n    const alpha = 0.1;\r\n    this.stats.averageExecutionTime = \r\n      (alpha * executionTime) + ((1 - alpha) * this.stats.averageExecutionTime);\r\n    \r\n    // Update success rate\r\n    this.stats.successRate = (this.stats.successfulOrders / this.stats.totalOrders) * 100;\r\n  }\r\n\r\n  /**\r\n   * Clean up old orders from memory\r\n   */\r\n  private async cleanupOldOrders(): Promise<void> {\r\n    const cutoffTime = Date.now() - this.maxOrderAge;\r\n    \r\n    // Remove old orders from active orders map\r\n    for (const [orderId, order] of this.activeOrders.entries()) {\r\n      const orderTime = new Date(order.create_time).getTime();\r\n      if (orderTime < cutoffTime && (order.status === 'closed' || order.status === 'cancelled')) {\r\n        this.activeOrders.delete(orderId);\r\n      }\r\n    }\r\n    \r\n    // Limit order history size\r\n    if (this.orderHistory.length > 1000) {\r\n      this.orderHistory = this.orderHistory\r\n        .sort((a, b) => new Date(b.create_time).getTime() - new Date(a.create_time).getTime())\r\n        .slice(0, 1000);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Log order event for audit trail\r\n   * \r\n   * @param eventType - Event type\r\n   * @param orderData - Order data\r\n   * @param additionalData - Additional event data\r\n   */\r\n  private async logOrderEvent(\r\n    eventType: string, \r\n    orderData: any, \r\n    additionalData: any = {}\r\n  ): Promise<void> {\r\n    await this.auditService.logSecurityEvent({\r\n      type: eventType,\r\n      severity: 'INFO',\r\n      details: {\r\n        orderData: this.sanitizeOrderData(orderData),\r\n        ...additionalData,\r\n      },\r\n      timestamp: new Date(),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Sanitize order data for logging\r\n   * \r\n   * @param orderData - Order data to sanitize\r\n   * @returns Sanitized order data\r\n   */\r\n  private sanitizeOrderData(orderData: any): any {\r\n    // Remove sensitive information from logs\r\n    const sanitized = { ...orderData };\r\n    \r\n    // Keep only essential order information\r\n    if (sanitized.text) {\r\n      delete sanitized.text; // May contain sensitive info\r\n    }\r\n    \r\n    return sanitized;\r\n  }\r\n\r\n  /**\r\n   * Get order management statistics\r\n   */\r\n  public getOrderStats(): OrderManagementStats {\r\n    return { ...this.stats };\r\n  }\r\n\r\n  /**\r\n   * Get order execution configuration\r\n   */\r\n  public getConfig(): OrderExecutionConfig {\r\n    return { ...this.config };\r\n  }\r\n\r\n  /**\r\n   * Update order execution configuration\r\n   * \r\n   * @param config - New configuration\r\n   */\r\n  public updateConfig(config: Partial<OrderExecutionConfig>): void {\r\n    this.config = { ...this.config, ...config };\r\n    logger.info('⚙️ Order execution configuration updated');\r\n  }\r\n\r\n  /**\r\n   * Graceful shutdown\r\n   */\r\n  public async shutdown(): Promise<void> {\r\n    logger.info('🛑 Shutting down Order Manager...');\r\n    \r\n    // Stop status monitoring\r\n    if (this.statusMonitorInterval) {\r\n      clearInterval(this.statusMonitorInterval);\r\n      this.statusMonitorInterval = null;\r\n    }\r\n    \r\n    // Log final statistics\r\n    await this.auditService.logSecurityEvent({\r\n      type: 'ORDER_MANAGER_SHUTDOWN',\r\n      severity: 'INFO',\r\n      details: { \r\n        stats: this.stats,\r\n        activeOrders: this.activeOrders.size,\r\n        positions: this.positions.size \r\n      },\r\n      timestamp: new Date(),\r\n    });\r\n    \r\n    logger.info('✅ Order Manager shutdown completed');\r\n  }\r\n}\r\n\r\n// Export types\r\nexport type {\r\n  OrderValidationResult,\r\n  OrderExecutionResult,\r\n  OrderStatusUpdate,\r\n  PositionSummary,\r\n  OrderManagementStats,\r\n  OrderExecutionConfig,\r\n};"],"version":3}