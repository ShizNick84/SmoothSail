{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\audit-service.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\audit-service.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * AI CRYPTO TRADING AGENT - COMPREHENSIVE AUDIT SERVICE\r\n * =============================================================================\r\n * \r\n * This service provides tamper-proof audit logging capabilities for the AI\r\n * crypto trading agent. It maintains comprehensive audit trails for all\r\n * security events, trading operations, and system activities.\r\n * \r\n * CRITICAL SECURITY NOTICE:\r\n * This service creates legal audit trails for financial operations.\r\n * All audit logs must be protected from tampering and maintained for\r\n * compliance with financial regulations.\r\n * \r\n * Features:\r\n * - Tamper-proof audit logging with hash chains\r\n * - Comprehensive event tracking and correlation\r\n * - Compliance reporting and data export\r\n * - Forensic analysis capabilities\r\n * - Automated integrity verification\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport { createHash, createHmac } from 'crypto';\r\nimport { logger, AuditLogEntry } from '@/core/logging/logger';\r\nimport { encryptionService } from '@/security/encryption-service';\r\n\r\n/**\r\n * Interface for enhanced audit entry\r\n * Extends basic audit entry with additional security fields\r\n */\r\nexport interface EnhancedAuditEntry extends AuditLogEntry {\r\n  /** Sequence number for ordering */\r\n  sequenceNumber: number;\r\n  /** Hash of previous audit entry for chain integrity */\r\n  previousHash: string;\r\n  /** Hash of current entry */\r\n  currentHash: string;\r\n  /** Digital signature of the entry */\r\n  signature: string;\r\n  /** Risk score of the audited action */\r\n  riskScore: number;\r\n  /** Compliance tags */\r\n  complianceTags: string[];\r\n  /** Related audit entries */\r\n  relatedEntries: string[];\r\n}\r\n\r\n/**\r\n * Interface for audit query parameters\r\n */\r\nexport interface AuditQuery {\r\n  /** Start date for query */\r\n  startDate?: Date;\r\n  /** End date for query */\r\n  endDate?: Date;\r\n  /** Event type filter */\r\n  eventType?: string;\r\n  /** Actor filter */\r\n  actor?: string;\r\n  /** Resource filter */\r\n  resource?: string;\r\n  /** Result filter */\r\n  result?: 'SUCCESS' | 'FAILURE' | 'PARTIAL';\r\n  /** Risk score range */\r\n  riskScoreMin?: number;\r\n  /** Risk score range */\r\n  riskScoreMax?: number;\r\n  /** Compliance tags */\r\n  complianceTags?: string[];\r\n  /** Maximum number of results */\r\n  limit?: number;\r\n  /** Offset for pagination */\r\n  offset?: number;\r\n}\r\n\r\n/**\r\n * Interface for audit statistics\r\n */\r\nexport interface AuditStatistics {\r\n  /** Total number of audit entries */\r\n  totalEntries: number;\r\n  /** Entries by event type */\r\n  entriesByType: Record<string, number>;\r\n  /** Entries by result */\r\n  entriesByResult: Record<string, number>;\r\n  /** Average risk score */\r\n  averageRiskScore: number;\r\n  /** High-risk entries count */\r\n  highRiskEntries: number;\r\n  /** Failed operations count */\r\n  failedOperations: number;\r\n  /** Time range of audit data */\r\n  timeRange: { start: Date; end: Date };\r\n}\r\n\r\n/**\r\n * Comprehensive audit service with tamper-proof logging\r\n * Provides secure audit trail capabilities for compliance and forensics\r\n */\r\nexport class AuditService {\r\n  /** Current sequence number for audit entries */\r\n  private sequenceNumber: number = 0;\r\n  \r\n  /** Hash of the last audit entry for chain integrity */\r\n  private lastEntryHash: string = '';\r\n  \r\n  /** HMAC key for audit entry signatures */\r\n  private auditSigningKey: Buffer;\r\n  \r\n  /** In-memory audit cache for performance */\r\n  private auditCache: Map<string, EnhancedAuditEntry> = new Map();\r\n  \r\n  /** Maximum cache size */\r\n  private static readonly MAX_CACHE_SIZE = 1000;\r\n\r\n  constructor() {\r\n    // Initialize audit signing key\r\n    this.initializeAuditSigning();\r\n    \r\n    // Load last sequence number and hash\r\n    this.initializeAuditChain();\r\n  }\r\n\r\n  /**\r\n   * Initialize audit signing key for tamper-proof signatures\r\n   */\r\n  private async initializeAuditSigning(): Promise<void> {\r\n    try {\r\n      // Generate or retrieve audit signing key\r\n      const signingKeyHex = process.env.AUDIT_SIGNING_KEY || \r\n                           encryptionService.generateSecureKey(32);\r\n      \r\n      this.auditSigningKey = Buffer.from(signingKeyHex, 'hex');\r\n      \r\n      logger.info('🔐 Audit signing system initialized');\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to initialize audit signing:', error);\r\n      throw new Error('Audit service initialization failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialize audit chain by loading last entry\r\n   */\r\n  private async initializeAuditChain(): Promise<void> {\r\n    try {\r\n      // Load last audit entry to continue chain\r\n      const lastEntry = await this.getLastAuditEntry();\r\n      \r\n      if (lastEntry) {\r\n        this.sequenceNumber = lastEntry.sequenceNumber;\r\n        this.lastEntryHash = lastEntry.currentHash;\r\n      } else {\r\n        // Initialize genesis entry\r\n        this.sequenceNumber = 0;\r\n        this.lastEntryHash = this.calculateGenesisHash();\r\n      }\r\n      \r\n      logger.info('🔗 Audit chain initialized', {\r\n        sequenceNumber: this.sequenceNumber,\r\n        lastHash: this.lastEntryHash.substring(0, 16) + '...'\r\n      });\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to initialize audit chain:', error);\r\n      throw new Error('Audit chain initialization failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create tamper-proof audit entry\r\n   * Generates audit entry with hash chain and digital signature\r\n   * \r\n   * @param auditEntry - Basic audit entry data\r\n   * @returns Promise<EnhancedAuditEntry> Enhanced audit entry with security fields\r\n   */\r\n  public async createAuditEntry(auditEntry: AuditLogEntry): Promise<EnhancedAuditEntry> {\r\n    try {\r\n      // Increment sequence number\r\n      this.sequenceNumber++;\r\n      \r\n      // Calculate risk score\r\n      const riskScore = this.calculateRiskScore(auditEntry);\r\n      \r\n      // Determine compliance tags\r\n      const complianceTags = this.determineComplianceTags(auditEntry);\r\n      \r\n      // Create enhanced audit entry\r\n      const enhancedEntry: EnhancedAuditEntry = {\r\n        ...auditEntry,\r\n        sequenceNumber: this.sequenceNumber,\r\n        previousHash: this.lastEntryHash,\r\n        currentHash: '', // Will be calculated\r\n        signature: '', // Will be calculated\r\n        riskScore,\r\n        complianceTags,\r\n        relatedEntries: []\r\n      };\r\n      \r\n      // Calculate current hash\r\n      enhancedEntry.currentHash = this.calculateEntryHash(enhancedEntry);\r\n      \r\n      // Generate digital signature\r\n      enhancedEntry.signature = this.signAuditEntry(enhancedEntry);\r\n      \r\n      // Update last entry hash for chain\r\n      this.lastEntryHash = enhancedEntry.currentHash;\r\n      \r\n      // Store audit entry\r\n      await this.storeAuditEntry(enhancedEntry);\r\n      \r\n      // Cache for performance\r\n      this.cacheAuditEntry(enhancedEntry);\r\n      \r\n      // Log to standard audit logger\r\n      logger.audit(auditEntry);\r\n      \r\n      return enhancedEntry;\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to create audit entry:', error);\r\n      throw new Error('Audit entry creation failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verify audit chain integrity\r\n   * Checks hash chain and signatures for tampering\r\n   * \r\n   * @param startSequence - Starting sequence number (optional)\r\n   * @param endSequence - Ending sequence number (optional)\r\n   * @returns Promise<{ isValid: boolean; errors: string[] }> Verification result\r\n   */\r\n  public async verifyAuditChain(\r\n    startSequence?: number,\r\n    endSequence?: number\r\n  ): Promise<{ isValid: boolean; errors: string[] }> {\r\n    try {\r\n      const errors: string[] = [];\r\n      let isValid = true;\r\n      \r\n      // Get audit entries in sequence\r\n      const entries = await this.getAuditEntries({\r\n        limit: endSequence ? endSequence - (startSequence || 0) : undefined,\r\n        offset: startSequence || 0\r\n      });\r\n      \r\n      let previousHash = startSequence === 0 ? this.calculateGenesisHash() : '';\r\n      \r\n      for (const entry of entries) {\r\n        // Verify hash chain\r\n        if (entry.previousHash !== previousHash) {\r\n          errors.push(`Hash chain broken at sequence ${entry.sequenceNumber}`);\r\n          isValid = false;\r\n        }\r\n        \r\n        // Verify entry hash\r\n        const calculatedHash = this.calculateEntryHash(entry);\r\n        if (entry.currentHash !== calculatedHash) {\r\n          errors.push(`Entry hash invalid at sequence ${entry.sequenceNumber}`);\r\n          isValid = false;\r\n        }\r\n        \r\n        // Verify signature\r\n        const calculatedSignature = this.signAuditEntry(entry);\r\n        if (entry.signature !== calculatedSignature) {\r\n          errors.push(`Signature invalid at sequence ${entry.sequenceNumber}`);\r\n          isValid = false;\r\n        }\r\n        \r\n        previousHash = entry.currentHash;\r\n      }\r\n      \r\n      return { isValid, errors };\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to verify audit chain:', error);\r\n      return { isValid: false, errors: ['Verification process failed'] };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Query audit entries with filtering\r\n   * Retrieves audit entries based on specified criteria\r\n   * \r\n   * @param query - Query parameters\r\n   * @returns Promise<EnhancedAuditEntry[]> Matching audit entries\r\n   */\r\n  public async getAuditEntries(query: AuditQuery = {}): Promise<EnhancedAuditEntry[]> {\r\n    try {\r\n      // Implementation would query secure audit database\r\n      // For now, return empty array as placeholder\r\n      return [];\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to query audit entries:', error);\r\n      throw new Error('Audit query failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate audit statistics\r\n   * Provides comprehensive statistics about audit data\r\n   * \r\n   * @param query - Optional query to filter statistics\r\n   * @returns Promise<AuditStatistics> Audit statistics\r\n   */\r\n  public async getAuditStatistics(query?: AuditQuery): Promise<AuditStatistics> {\r\n    try {\r\n      // Implementation would analyze audit database\r\n      // For now, return placeholder statistics\r\n      return {\r\n        totalEntries: this.sequenceNumber,\r\n        entriesByType: {},\r\n        entriesByResult: {},\r\n        averageRiskScore: 0,\r\n        highRiskEntries: 0,\r\n        failedOperations: 0,\r\n        timeRange: { start: new Date(), end: new Date() }\r\n      };\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to generate audit statistics:', error);\r\n      throw new Error('Audit statistics generation failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Export audit data for compliance\r\n   * Generates audit reports in various formats\r\n   * \r\n   * @param query - Query parameters for export\r\n   * @param format - Export format ('json', 'csv', 'xml')\r\n   * @returns Promise<string> Exported audit data\r\n   */\r\n  public async exportAuditData(\r\n    query: AuditQuery,\r\n    format: 'json' | 'csv' | 'xml' = 'json'\r\n  ): Promise<string> {\r\n    try {\r\n      const entries = await this.getAuditEntries(query);\r\n      \r\n      switch (format) {\r\n        case 'json':\r\n          return JSON.stringify(entries, null, 2);\r\n        \r\n        case 'csv':\r\n          return this.convertToCSV(entries);\r\n        \r\n        case 'xml':\r\n          return this.convertToXML(entries);\r\n        \r\n        default:\r\n          throw new Error(`Unsupported export format: ${format}`);\r\n      }\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to export audit data:', error);\r\n      throw new Error('Audit data export failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate risk score for audit entry\r\n   * Assigns risk score based on event type and context\r\n   * \r\n   * @param auditEntry - Audit entry to score\r\n   * @returns number Risk score (0-10)\r\n   */\r\n  private calculateRiskScore(auditEntry: AuditLogEntry): number {\r\n    let riskScore = 0;\r\n    \r\n    // Base risk by event type\r\n    const eventRiskMap: Record<string, number> = {\r\n      'LOGIN_ATTEMPT': 2,\r\n      'LOGIN_SUCCESS': 1,\r\n      'LOGIN_FAILURE': 4,\r\n      'API_ACCESS': 1,\r\n      'TRADE_EXECUTION': 3,\r\n      'FUND_TRANSFER': 8,\r\n      'CREDENTIAL_ACCESS': 6,\r\n      'SYSTEM_CONFIGURATION': 5,\r\n      'SECURITY_INCIDENT': 9,\r\n      'EMERGENCY_SHUTDOWN': 10\r\n    };\r\n    \r\n    riskScore = eventRiskMap[auditEntry.eventType] || 1;\r\n    \r\n    // Increase risk for failures\r\n    if (auditEntry.result === 'FAILURE') {\r\n      riskScore += 2;\r\n    }\r\n    \r\n    // Increase risk for external actors\r\n    if (auditEntry.actor !== 'SYSTEM') {\r\n      riskScore += 1;\r\n    }\r\n    \r\n    // Cap at maximum risk score\r\n    return Math.min(riskScore, 10);\r\n  }\r\n\r\n  /**\r\n   * Determine compliance tags for audit entry\r\n   * Assigns relevant compliance tags based on event type\r\n   * \r\n   * @param auditEntry - Audit entry to tag\r\n   * @returns string[] Compliance tags\r\n   */\r\n  private determineComplianceTags(auditEntry: AuditLogEntry): string[] {\r\n    const tags: string[] = [];\r\n    \r\n    // Financial compliance tags\r\n    if (auditEntry.eventType.includes('TRADE') || auditEntry.eventType.includes('FUND')) {\r\n      tags.push('FINANCIAL_TRANSACTION');\r\n    }\r\n    \r\n    // Security compliance tags\r\n    if (auditEntry.eventType.includes('SECURITY') || auditEntry.eventType.includes('LOGIN')) {\r\n      tags.push('SECURITY_EVENT');\r\n    }\r\n    \r\n    // Data protection tags\r\n    if (auditEntry.eventType.includes('CREDENTIAL') || auditEntry.eventType.includes('DATA')) {\r\n      tags.push('DATA_PROTECTION');\r\n    }\r\n    \r\n    // High-risk tags\r\n    if (this.calculateRiskScore(auditEntry) >= 7) {\r\n      tags.push('HIGH_RISK');\r\n    }\r\n    \r\n    return tags;\r\n  }\r\n\r\n  /**\r\n   * Calculate hash for audit entry\r\n   * Generates SHA-256 hash of entry data\r\n   * \r\n   * @param entry - Audit entry to hash\r\n   * @returns string SHA-256 hash\r\n   */\r\n  private calculateEntryHash(entry: Partial<EnhancedAuditEntry>): string {\r\n    const hashData = {\r\n      auditId: entry.auditId,\r\n      eventType: entry.eventType,\r\n      actor: entry.actor,\r\n      resource: entry.resource,\r\n      action: entry.action,\r\n      result: entry.result,\r\n      timestamp: entry.timestamp,\r\n      sequenceNumber: entry.sequenceNumber,\r\n      previousHash: entry.previousHash,\r\n      auditData: entry.auditData\r\n    };\r\n    \r\n    return createHash('sha256')\r\n      .update(JSON.stringify(hashData))\r\n      .digest('hex');\r\n  }\r\n\r\n  /**\r\n   * Sign audit entry with HMAC\r\n   * Generates tamper-proof signature for audit entry\r\n   * \r\n   * @param entry - Audit entry to sign\r\n   * @returns string HMAC signature\r\n   */\r\n  private signAuditEntry(entry: Partial<EnhancedAuditEntry>): string {\r\n    const signatureData = `${entry.auditId}:${entry.currentHash}:${entry.sequenceNumber}`;\r\n    \r\n    return createHmac('sha256', this.auditSigningKey)\r\n      .update(signatureData)\r\n      .digest('hex');\r\n  }\r\n\r\n  /**\r\n   * Calculate genesis hash for audit chain\r\n   * Generates initial hash for audit chain\r\n   * \r\n   * @returns string Genesis hash\r\n   */\r\n  private calculateGenesisHash(): string {\r\n    return createHash('sha256')\r\n      .update('AI_CRYPTO_TRADING_AGENT_AUDIT_GENESIS')\r\n      .digest('hex');\r\n  }\r\n\r\n  /**\r\n   * Store audit entry securely\r\n   * Persists audit entry to secure storage\r\n   * \r\n   * @param entry - Enhanced audit entry to store\r\n   */\r\n  private async storeAuditEntry(entry: EnhancedAuditEntry): Promise<void> {\r\n    // Implementation would store in secure audit database\r\n    // For now, this is a placeholder\r\n    logger.debug('Audit entry stored securely', {\r\n      auditId: entry.auditId,\r\n      sequenceNumber: entry.sequenceNumber\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get last audit entry from storage\r\n   * Retrieves the most recent audit entry\r\n   * \r\n   * @returns Promise<EnhancedAuditEntry | null> Last audit entry or null\r\n   */\r\n  private async getLastAuditEntry(): Promise<EnhancedAuditEntry | null> {\r\n    // Implementation would query secure audit database\r\n    // For now, return null as placeholder\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Cache audit entry for performance\r\n   * Stores audit entry in memory cache\r\n   * \r\n   * @param entry - Audit entry to cache\r\n   */\r\n  private cacheAuditEntry(entry: EnhancedAuditEntry): void {\r\n    // Maintain cache size limit\r\n    if (this.auditCache.size >= AuditService.MAX_CACHE_SIZE) {\r\n      const firstKey = this.auditCache.keys().next().value;\r\n      this.auditCache.delete(firstKey);\r\n    }\r\n    \r\n    this.auditCache.set(entry.auditId, entry);\r\n  }\r\n\r\n  /**\r\n   * Convert audit entries to CSV format\r\n   * Generates CSV representation of audit data\r\n   * \r\n   * @param entries - Audit entries to convert\r\n   * @returns string CSV data\r\n   */\r\n  private convertToCSV(entries: EnhancedAuditEntry[]): string {\r\n    if (entries.length === 0) return '';\r\n    \r\n    const headers = Object.keys(entries[0]).join(',');\r\n    const rows = entries.map(entry => \r\n      Object.values(entry).map(value => \r\n        typeof value === 'object' ? JSON.stringify(value) : String(value)\r\n      ).join(',')\r\n    );\r\n    \r\n    return [headers, ...rows].join('\\n');\r\n  }\r\n\r\n  /**\r\n   * Convert audit entries to XML format\r\n   * Generates XML representation of audit data\r\n   * \r\n   * @param entries - Audit entries to convert\r\n   * @returns string XML data\r\n   */\r\n  private convertToXML(entries: EnhancedAuditEntry[]): string {\r\n    let xml = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<auditEntries>\\n';\r\n    \r\n    for (const entry of entries) {\r\n      xml += '  <auditEntry>\\n';\r\n      for (const [key, value] of Object.entries(entry)) {\r\n        const xmlValue = typeof value === 'object' ? \r\n          JSON.stringify(value) : String(value);\r\n        xml += `    <${key}>${xmlValue}</${key}>\\n`;\r\n      }\r\n      xml += '  </auditEntry>\\n';\r\n    }\r\n    \r\n    xml += '</auditEntries>';\r\n    return xml;\r\n  }\r\n\r\n  /**\r\n   * Get audit service status\r\n   * Returns current status for monitoring\r\n   * \r\n   * @returns Object containing status information\r\n   */\r\n  public getStatus(): {\r\n    sequenceNumber: number;\r\n    cacheSize: number;\r\n    lastEntryHash: string;\r\n    timestamp: number;\r\n  } {\r\n    return {\r\n      sequenceNumber: this.sequenceNumber,\r\n      cacheSize: this.auditCache.size,\r\n      lastEntryHash: this.lastEntryHash.substring(0, 16) + '...',\r\n      timestamp: Date.now()\r\n    };\r\n  }\r\n}\r\n\r\n// Create and export singleton instance\r\nexport const auditService = new AuditService();\r\n\r\n// =============================================================================\r\n// AUDIT SECURITY NOTES\r\n// =============================================================================\r\n// 1. All audit entries are cryptographically signed for tamper detection\r\n// 2. Hash chains ensure audit trail integrity and detect tampering\r\n// 3. Risk scores help prioritize security analysis and response\r\n// 4. Compliance tags enable automated regulatory reporting\r\n// 5. Audit data export supports compliance and forensic analysis\r\n// 6. Chain verification should be performed regularly\r\n// 7. Audit signing keys must be protected and rotated regularly\r\n// 8. All audit operations are themselves audited for accountability\r\n// ============================================================================="],"version":3}