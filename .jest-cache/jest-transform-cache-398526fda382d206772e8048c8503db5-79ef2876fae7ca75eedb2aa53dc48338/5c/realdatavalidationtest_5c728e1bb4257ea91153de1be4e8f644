15090703fc7566bf2292b69b5b5b142c
"use strict";
/**
 * =============================================================================
 * REAL DATA VALIDATION TESTS
 * =============================================================================
 *
 * Comprehensive tests to ensure the backtesting system only uses real
 * historical market data and never mock data. These tests validate the
 * data integrity and authenticity requirements.
 *
 * @author AI Crypto Trading System
 * @version 1.0.0
 * @license PROPRIETARY
 * =============================================================================
 */
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const historical_data_fetcher_1 = require("../historical-data-fetcher");
const backtesting_engine_1 = require("../backtesting-engine");
// Mock GateIOClient for testing
const mockGateIOClient = {
    makeRequest: jest.fn(),
};
(0, globals_1.describe)('Real Data Validation', () => {
    let dataFetcher;
    let backtestingEngine;
    (0, globals_1.beforeEach)(() => {
        dataFetcher = new historical_data_fetcher_1.HistoricalDataFetcher(mockGateIOClient);
        backtestingEngine = new backtesting_engine_1.BacktestingEngine(mockGateIOClient);
    });
    (0, globals_1.describe)('Data Source Validation', () => {
        (0, globals_1.test)('should reject mock data', async () => {
            const mockData = [
                {
                    symbol: 'BTC_USDT',
                    timestamp: new Date(),
                    open: 42000,
                    high: 42500,
                    low: 41800,
                    close: 42200,
                    volume: 1000,
                    validated: false, // Mock data flag
                    source: 'MOCK', // Not from Gate.io
                    integrity: 'mock_hash',
                    fetchedAt: new Date(),
                },
            ];
            const config = {
                symbol: 'BTC_USDT',
                startDate: new Date('2024-01-01'),
                endDate: new Date('2024-01-02'),
                initialBalance: 10000,
                strategies: [],
                riskManagement: {
                    maxRiskPerTrade: 0.02,
                    stopLossPercentage: 0.01,
                    minRiskRewardRatio: 1.5,
                    maxDrawdown: 0.15,
                },
                fees: { maker: 0.002, taker: 0.002 },
                slippage: 0.001,
                dataValidation: {
                    requireRealData: true,
                    minDataPoints: 1,
                    maxGapMinutes: 60,
                },
            };
            const validation = await dataFetcher.validateForBacktesting(mockData, config);
            (0, globals_1.expect)(validation.isValid).toBe(false);
            (0, globals_1.expect)(validation.errors).toContain(globals_1.expect.stringContaining('Mock data detected'));
        });
        (0, globals_1.test)('should accept real Gate.io data', async () => {
            const realData = [
                {
                    symbol: 'BTC_USDT',
                    timestamp: new Date(),
                    open: 42000,
                    high: 42500,
                    low: 41800,
                    close: 42200,
                    volume: 1000,
                    validated: true, // Real data flag
                    source: 'GATE_IO', // From Gate.io
                    integrity: 'real_hash_12345',
                    fetchedAt: new Date(),
                },
            ];
            const config = {
                symbol: 'BTC_USDT',
                startDate: new Date('2024-01-01'),
                endDate: new Date('2024-01-02'),
                initialBalance: 10000,
                strategies: [],
                riskManagement: {
                    maxRiskPerTrade: 0.02,
                    stopLossPercentage: 0.01,
                    minRiskRewardRatio: 1.5,
                    maxDrawdown: 0.15,
                },
                fees: { maker: 0.002, taker: 0.002 },
                slippage: 0.001,
                dataValidation: {
                    requireRealData: true,
                    minDataPoints: 1,
                    maxGapMinutes: 60,
                },
            };
            const validation = await dataFetcher.validateForBacktesting(realData, config);
            (0, globals_1.expect)(validation.isValid).toBe(true);
            (0, globals_1.expect)(validation.errors).toHaveLength(0);
        });
        (0, globals_1.test)('should validate data integrity hashes', async () => {
            const dataWithBadHash = [
                {
                    symbol: 'BTC_USDT',
                    timestamp: new Date(),
                    open: 42000,
                    high: 42500,
                    low: 41800,
                    close: 42200,
                    volume: 1000,
                    validated: true,
                    source: 'GATE_IO',
                    integrity: 'invalid_hash', // Bad integrity hash
                    fetchedAt: new Date(),
                },
            ];
            const config = {
                symbol: 'BTC_USDT',
                startDate: new Date('2024-01-01'),
                endDate: new Date('2024-01-02'),
                initialBalance: 10000,
                strategies: [],
                riskManagement: {
                    maxRiskPerTrade: 0.02,
                    stopLossPercentage: 0.01,
                    minRiskRewardRatio: 1.5,
                    maxDrawdown: 0.15,
                },
                fees: { maker: 0.002, taker: 0.002 },
                slippage: 0.001,
                dataValidation: {
                    requireRealData: true,
                    minDataPoints: 1,
                    maxGapMinutes: 60,
                },
            };
            const validation = await dataFetcher.validateForBacktesting(dataWithBadHash, config);
            // Should still be valid but with warnings about integrity
            (0, globals_1.expect)(validation.warnings.length).toBeGreaterThan(0);
        });
    });
    (0, globals_1.describe)('Data Quality Validation', () => {
        (0, globals_1.test)('should detect unrealistic price movements', async () => {
            const unrealisticData = [
                {
                    symbol: 'BTC_USDT',
                    timestamp: new Date(),
                    open: 42000,
                    high: 84000, // 100% price jump - unrealistic
                    low: 21000, // 50% price drop - unrealistic
                    close: 42200,
                    volume: 1000,
                    validated: true,
                    source: 'GATE_IO',
                    integrity: 'test_hash',
                    fetchedAt: new Date(),
                },
            ];
            const config = {
                symbol: 'BTC_USDT',
                startDate: new Date('2024-01-01'),
                endDate: new Date('2024-01-02'),
                initialBalance: 10000,
                strategies: [],
                riskManagement: {
                    maxRiskPerTrade: 0.02,
                    stopLossPercentage: 0.01,
                    minRiskRewardRatio: 1.5,
                    maxDrawdown: 0.15,
                },
                fees: { maker: 0.002, taker: 0.002 },
                slippage: 0.001,
                dataValidation: {
                    requireRealData: true,
                    minDataPoints: 1,
                    maxGapMinutes: 60,
                },
            };
            const validation = await dataFetcher.validateForBacktesting(unrealisticData, config);
            (0, globals_1.expect)(validation.invalidPoints).toBeGreaterThan(0);
            (0, globals_1.expect)(validation.warnings.length).toBeGreaterThan(0);
        });
        (0, globals_1.test)('should validate OHLC relationships', async () => {
            const invalidOHLCData = [
                {
                    symbol: 'BTC_USDT',
                    timestamp: new Date(),
                    open: 42000,
                    high: 41000, // High less than open - invalid
                    low: 43000, // Low greater than open - invalid
                    close: 42200,
                    volume: 1000,
                    validated: true,
                    source: 'GATE_IO',
                    integrity: 'test_hash',
                    fetchedAt: new Date(),
                },
            ];
            const config = {
                symbol: 'BTC_USDT',
                startDate: new Date('2024-01-01'),
                endDate: new Date('2024-01-02'),
                initialBalance: 10000,
                strategies: [],
                riskManagement: {
                    maxRiskPerTrade: 0.02,
                    stopLossPercentage: 0.01,
                    minRiskRewardRatio: 1.5,
                    maxDrawdown: 0.15,
                },
                fees: { maker: 0.002, taker: 0.002 },
                slippage: 0.001,
                dataValidation: {
                    requireRealData: true,
                    minDataPoints: 1,
                    maxGapMinutes: 60,
                },
            };
            const validation = await dataFetcher.validateForBacktesting(invalidOHLCData, config);
            (0, globals_1.expect)(validation.invalidPoints).toBeGreaterThan(0);
        });
        (0, globals_1.test)('should detect data gaps', async () => {
            const dataWithGaps = [
                {
                    symbol: 'BTC_USDT',
                    timestamp: new Date('2024-01-01T00:00:00Z'),
                    open: 42000,
                    high: 42500,
                    low: 41800,
                    close: 42200,
                    volume: 1000,
                    validated: true,
                    source: 'GATE_IO',
                    integrity: 'test_hash_1',
                    fetchedAt: new Date(),
                },
                {
                    symbol: 'BTC_USDT',
                    timestamp: new Date('2024-01-01T05:00:00Z'), // 5 hour gap
                    open: 42200,
                    high: 42800,
                    low: 42000,
                    close: 42600,
                    volume: 1200,
                    validated: true,
                    source: 'GATE_IO',
                    integrity: 'test_hash_2',
                    fetchedAt: new Date(),
                },
            ];
            const config = {
                symbol: 'BTC_USDT',
                startDate: new Date('2024-01-01'),
                endDate: new Date('2024-01-02'),
                initialBalance: 10000,
                strategies: [],
                riskManagement: {
                    maxRiskPerTrade: 0.02,
                    stopLossPercentage: 0.01,
                    minRiskRewardRatio: 1.5,
                    maxDrawdown: 0.15,
                },
                fees: { maker: 0.002, taker: 0.002 },
                slippage: 0.001,
                dataValidation: {
                    requireRealData: true,
                    minDataPoints: 2,
                    maxGapMinutes: 60, // 1 hour max gap
                },
            };
            const validation = await dataFetcher.validateForBacktesting(dataWithGaps, config);
            (0, globals_1.expect)(validation.gaps.length).toBeGreaterThan(0);
            (0, globals_1.expect)(validation.gaps[0].durationMinutes).toBeGreaterThan(60);
        });
    });
    (0, globals_1.describe)('Security Validation', () => {
        (0, globals_1.test)('should enforce minimum data points requirement', async () => {
            const insufficientData = [
                {
                    symbol: 'BTC_USDT',
                    timestamp: new Date(),
                    open: 42000,
                    high: 42500,
                    low: 41800,
                    close: 42200,
                    volume: 1000,
                    validated: true,
                    source: 'GATE_IO',
                    integrity: 'test_hash',
                    fetchedAt: new Date(),
                },
            ];
            const config = {
                symbol: 'BTC_USDT',
                startDate: new Date('2024-01-01'),
                endDate: new Date('2024-01-02'),
                initialBalance: 10000,
                strategies: [],
                riskManagement: {
                    maxRiskPerTrade: 0.02,
                    stopLossPercentage: 0.01,
                    minRiskRewardRatio: 1.5,
                    maxDrawdown: 0.15,
                },
                fees: { maker: 0.002, taker: 0.002 },
                slippage: 0.001,
                dataValidation: {
                    requireRealData: true,
                    minDataPoints: 100, // Require 100 points
                    maxGapMinutes: 60,
                },
            };
            const validation = await dataFetcher.validateForBacktesting(insufficientData, config);
            (0, globals_1.expect)(validation.isValid).toBe(false);
            (0, globals_1.expect)(validation.errors).toContain(globals_1.expect.stringContaining('Insufficient data points'));
        });
        (0, globals_1.test)('should calculate data integrity score', async () => {
            const mixedQualityData = [
                // Good data point
                {
                    symbol: 'BTC_USDT',
                    timestamp: new Date('2024-01-01T00:00:00Z'),
                    open: 42000,
                    high: 42500,
                    low: 41800,
                    close: 42200,
                    volume: 1000,
                    validated: true,
                    source: 'GATE_IO',
                    integrity: 'good_hash_1',
                    fetchedAt: new Date(),
                },
                // Bad data point
                {
                    symbol: 'BTC_USDT',
                    timestamp: new Date('2024-01-01T01:00:00Z'),
                    open: 0, // Invalid price
                    high: 0,
                    low: 0,
                    close: 0,
                    volume: -100, // Invalid volume
                    validated: false,
                    source: 'GATE_IO',
                    integrity: 'bad_hash',
                    fetchedAt: new Date(),
                },
            ];
            const config = {
                symbol: 'BTC_USDT',
                startDate: new Date('2024-01-01'),
                endDate: new Date('2024-01-02'),
                initialBalance: 10000,
                strategies: [],
                riskManagement: {
                    maxRiskPerTrade: 0.02,
                    stopLossPercentage: 0.01,
                    minRiskRewardRatio: 1.5,
                    maxDrawdown: 0.15,
                },
                fees: { maker: 0.002, taker: 0.002 },
                slippage: 0.001,
                dataValidation: {
                    requireRealData: true,
                    minDataPoints: 2,
                    maxGapMinutes: 120,
                },
            };
            const validation = await dataFetcher.validateForBacktesting(mixedQualityData, config);
            (0, globals_1.expect)(validation.integrityScore).toBeLessThan(100);
            (0, globals_1.expect)(validation.validPoints).toBe(1);
            (0, globals_1.expect)(validation.invalidPoints).toBe(1);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,