d48956ca2b09e2b80521b18151e2cce9
"use strict";

/* istanbul ignore next */
function cov_1o4inqbypn() {
  var path = "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\tunnel-failover-manager.ts";
  var hash = "6fc90f190e21defea083c229d3f6db3b511ed790";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\tunnel-failover-manager.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 39
        }
      },
      "2": {
        start: {
          line: 4,
          column: 17
        },
        end: {
          line: 4,
          column: 34
        }
      },
      "3": {
        start: {
          line: 5,
          column: 29
        },
        end: {
          line: 5,
          column: 60
        }
      },
      "4": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 16
        }
      },
      "5": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 29
        }
      },
      "6": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 43
        }
      },
      "7": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 43
        }
      },
      "8": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 41
        }
      },
      "9": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 43
        }
      },
      "10": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 34
        }
      },
      "11": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 39
        }
      },
      "12": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 40
        }
      },
      "13": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 44
        }
      },
      "14": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 35,
          column: 43
        }
      },
      "15": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 36,
          column: 31
        }
      },
      "16": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 48,
          column: 10
        }
      },
      "17": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 61,
          column: 10
        }
      },
      "18": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 62,
          column: 35
        }
      },
      "19": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 63,
          column: 77
        }
      },
      "20": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 72,
          column: 9
        }
      },
      "21": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 71
        }
      },
      "22": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 71,
          column: 19
        }
      },
      "23": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 73,
          column: 30
        }
      },
      "24": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 74,
          column: 57
        }
      },
      "25": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 78,
          column: 9
        }
      },
      "26": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 77,
          column: 45
        }
      },
      "27": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 80,
          column: 43
        }
      },
      "28": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 81,
          column: 37
        }
      },
      "29": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 90,
          column: 9
        }
      },
      "30": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 88,
          column: 72
        }
      },
      "31": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 89,
          column: 19
        }
      },
      "32": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 91,
          column: 31
        }
      },
      "33": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 92,
          column: 58
        }
      },
      "34": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 97,
          column: 9
        }
      },
      "35": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 55
        }
      },
      "36": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 47
        }
      },
      "37": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 99,
          column: 45
        }
      },
      "38": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 100,
          column: 38
        }
      },
      "39": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 113,
          column: 9
        }
      },
      "40": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 111,
          column: 53
        }
      },
      "41": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 112,
          column: 24
        }
      },
      "42": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 118,
          column: 9
        }
      },
      "43": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 116,
          column: 100
        }
      },
      "44": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 117,
          column: 68
        }
      },
      "45": {
        start: {
          line: 119,
          column: 32
        },
        end: {
          line: 119,
          column: 81
        }
      },
      "46": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 120,
          column: 74
        }
      },
      "47": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 127,
          column: 9
        }
      },
      "48": {
        start: {
          line: 122,
          column: 27
        },
        end: {
          line: 122,
          column: 48
        }
      },
      "49": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 123,
          column: 26
        }
      },
      "50": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 126,
          column: 64
        }
      },
      "51": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 135,
          column: 46
        }
      },
      "52": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 136,
          column: 89
        }
      },
      "53": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 144,
          column: 49
        }
      },
      "54": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 145,
          column: 93
        }
      },
      "55": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 154,
          column: 77
        }
      },
      "56": {
        start: {
          line: 156,
          column: 27
        },
        end: {
          line: 156,
          column: 78
        }
      },
      "57": {
        start: {
          line: 158,
          column: 29
        },
        end: {
          line: 167,
          column: 9
        }
      },
      "58": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 168,
          column: 60
        }
      },
      "59": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 169,
          column: 33
        }
      },
      "60": {
        start: {
          line: 170,
          column: 8
        },
        end: {
          line: 170,
          column: 68
        }
      },
      "61": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 171,
          column: 67
        }
      },
      "62": {
        start: {
          line: 172,
          column: 8
        },
        end: {
          line: 172,
          column: 26
        }
      },
      "63": {
        start: {
          line: 180,
          column: 29
        },
        end: {
          line: 180,
          column: 65
        }
      },
      "64": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 183,
          column: 9
        }
      },
      "65": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 182,
          column: 72
        }
      },
      "66": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 187,
          column: 9
        }
      },
      "67": {
        start: {
          line: 185,
          column: 12
        },
        end: {
          line: 185,
          column: 78
        }
      },
      "68": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 186,
          column: 19
        }
      },
      "69": {
        start: {
          line: 188,
          column: 8
        },
        end: {
          line: 203,
          column: 9
        }
      },
      "70": {
        start: {
          line: 189,
          column: 12
        },
        end: {
          line: 189,
          column: 74
        }
      },
      "71": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 191,
          column: 67
        }
      },
      "72": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 193,
          column: 41
        }
      },
      "73": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 194,
          column: 47
        }
      },
      "74": {
        start: {
          line: 195,
          column: 12
        },
        end: {
          line: 195,
          column: 38
        }
      },
      "75": {
        start: {
          line: 196,
          column: 12
        },
        end: {
          line: 196,
          column: 37
        }
      },
      "76": {
        start: {
          line: 197,
          column: 12
        },
        end: {
          line: 197,
          column: 73
        }
      },
      "77": {
        start: {
          line: 198,
          column: 12
        },
        end: {
          line: 198,
          column: 75
        }
      },
      "78": {
        start: {
          line: 201,
          column: 12
        },
        end: {
          line: 201,
          column: 90
        }
      },
      "79": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 202,
          column: 24
        }
      },
      "80": {
        start: {
          line: 211,
          column: 29
        },
        end: {
          line: 211,
          column: 65
        }
      },
      "81": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 214,
          column: 9
        }
      },
      "82": {
        start: {
          line: 213,
          column: 12
        },
        end: {
          line: 213,
          column: 72
        }
      },
      "83": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 218,
          column: 9
        }
      },
      "84": {
        start: {
          line: 216,
          column: 12
        },
        end: {
          line: 216,
          column: 80
        }
      },
      "85": {
        start: {
          line: 217,
          column: 12
        },
        end: {
          line: 217,
          column: 19
        }
      },
      "86": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 232,
          column: 9
        }
      },
      "87": {
        start: {
          line: 220,
          column: 12
        },
        end: {
          line: 220,
          column: 76
        }
      },
      "88": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 222,
          column: 68
        }
      },
      "89": {
        start: {
          line: 224,
          column: 12
        },
        end: {
          line: 224,
          column: 42
        }
      },
      "90": {
        start: {
          line: 225,
          column: 12
        },
        end: {
          line: 225,
          column: 37
        }
      },
      "91": {
        start: {
          line: 226,
          column: 12
        },
        end: {
          line: 226,
          column: 75
        }
      },
      "92": {
        start: {
          line: 227,
          column: 12
        },
        end: {
          line: 227,
          column: 77
        }
      },
      "93": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 230,
          column: 92
        }
      },
      "94": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 231,
          column: 24
        }
      },
      "95": {
        start: {
          line: 240,
          column: 8
        },
        end: {
          line: 240,
          column: 41
        }
      },
      "96": {
        start: {
          line: 249,
          column: 8
        },
        end: {
          line: 249,
          column: 86
        }
      },
      "97": {
        start: {
          line: 257,
          column: 8
        },
        end: {
          line: 257,
          column: 43
        }
      },
      "98": {
        start: {
          line: 264,
          column: 8
        },
        end: {
          line: 268,
          column: 11
        }
      },
      "99": {
        start: {
          line: 265,
          column: 12
        },
        end: {
          line: 267,
          column: 13
        }
      },
      "100": {
        start: {
          line: 266,
          column: 16
        },
        end: {
          line: 266,
          column: 86
        }
      },
      "101": {
        start: {
          line: 270,
          column: 8
        },
        end: {
          line: 274,
          column: 11
        }
      },
      "102": {
        start: {
          line: 271,
          column: 12
        },
        end: {
          line: 273,
          column: 13
        }
      },
      "103": {
        start: {
          line: 272,
          column: 16
        },
        end: {
          line: 272,
          column: 75
        }
      },
      "104": {
        start: {
          line: 276,
          column: 8
        },
        end: {
          line: 280,
          column: 11
        }
      },
      "105": {
        start: {
          line: 277,
          column: 12
        },
        end: {
          line: 279,
          column: 13
        }
      },
      "106": {
        start: {
          line: 278,
          column: 16
        },
        end: {
          line: 278,
          column: 76
        }
      },
      "107": {
        start: {
          line: 282,
          column: 8
        },
        end: {
          line: 288,
          column: 11
        }
      },
      "108": {
        start: {
          line: 283,
          column: 33
        },
        end: {
          line: 283,
          column: 70
        }
      },
      "109": {
        start: {
          line: 284,
          column: 12
        },
        end: {
          line: 287,
          column: 13
        }
      },
      "110": {
        start: {
          line: 285,
          column: 16
        },
        end: {
          line: 285,
          column: 46
        }
      },
      "111": {
        start: {
          line: 286,
          column: 16
        },
        end: {
          line: 286,
          column: 41
        }
      },
      "112": {
        start: {
          line: 290,
          column: 8
        },
        end: {
          line: 297,
          column: 11
        }
      },
      "113": {
        start: {
          line: 291,
          column: 33
        },
        end: {
          line: 291,
          column: 70
        }
      },
      "114": {
        start: {
          line: 292,
          column: 12
        },
        end: {
          line: 296,
          column: 13
        }
      },
      "115": {
        start: {
          line: 293,
          column: 16
        },
        end: {
          line: 293,
          column: 46
        }
      },
      "116": {
        start: {
          line: 294,
          column: 16
        },
        end: {
          line: 294,
          column: 47
        }
      },
      "117": {
        start: {
          line: 295,
          column: 16
        },
        end: {
          line: 295,
          column: 41
        }
      },
      "118": {
        start: {
          line: 307,
          column: 26
        },
        end: {
          line: 307,
          column: 36
        }
      },
      "119": {
        start: {
          line: 308,
          column: 30
        },
        end: {
          line: 316,
          column: 9
        }
      },
      "120": {
        start: {
          line: 317,
          column: 8
        },
        end: {
          line: 356,
          column: 9
        }
      },
      "121": {
        start: {
          line: 318,
          column: 12
        },
        end: {
          line: 318,
          column: 101
        }
      },
      "122": {
        start: {
          line: 320,
          column: 33
        },
        end: {
          line: 320,
          column: 87
        }
      },
      "123": {
        start: {
          line: 321,
          column: 12
        },
        end: {
          line: 323,
          column: 13
        }
      },
      "124": {
        start: {
          line: 322,
          column: 16
        },
        end: {
          line: 322,
          column: 71
        }
      },
      "125": {
        start: {
          line: 324,
          column: 12
        },
        end: {
          line: 324,
          column: 74
        }
      },
      "126": {
        start: {
          line: 326,
          column: 33
        },
        end: {
          line: 326,
          column: 83
        }
      },
      "127": {
        start: {
          line: 327,
          column: 12
        },
        end: {
          line: 329,
          column: 13
        }
      },
      "128": {
        start: {
          line: 328,
          column: 16
        },
        end: {
          line: 328,
          column: 76
        }
      },
      "129": {
        start: {
          line: 331,
          column: 12
        },
        end: {
          line: 331,
          column: 70
        }
      },
      "130": {
        start: {
          line: 333,
          column: 12
        },
        end: {
          line: 333,
          column: 41
        }
      },
      "131": {
        start: {
          line: 334,
          column: 12
        },
        end: {
          line: 334,
          column: 60
        }
      },
      "132": {
        start: {
          line: 336,
          column: 12
        },
        end: {
          line: 336,
          column: 52
        }
      },
      "133": {
        start: {
          line: 337,
          column: 12
        },
        end: {
          line: 339,
          column: 15
        }
      },
      "134": {
        start: {
          line: 340,
          column: 12
        },
        end: {
          line: 340,
          column: 73
        }
      },
      "135": {
        start: {
          line: 341,
          column: 12
        },
        end: {
          line: 341,
          column: 32
        }
      },
      "136": {
        start: {
          line: 344,
          column: 12
        },
        end: {
          line: 344,
          column: 42
        }
      },
      "137": {
        start: {
          line: 345,
          column: 12
        },
        end: {
          line: 345,
          column: 92
        }
      },
      "138": {
        start: {
          line: 346,
          column: 12
        },
        end: {
          line: 346,
          column: 60
        }
      },
      "139": {
        start: {
          line: 348,
          column: 12
        },
        end: {
          line: 348,
          column: 52
        }
      },
      "140": {
        start: {
          line: 349,
          column: 12
        },
        end: {
          line: 349,
          column: 95
        }
      },
      "141": {
        start: {
          line: 350,
          column: 12
        },
        end: {
          line: 350,
          column: 55
        }
      },
      "142": {
        start: {
          line: 351,
          column: 12
        },
        end: {
          line: 351,
          column: 24
        }
      },
      "143": {
        start: {
          line: 355,
          column: 12
        },
        end: {
          line: 355,
          column: 51
        }
      },
      "144": {
        start: {
          line: 366,
          column: 33
        },
        end: {
          line: 371,
          column: 52
        }
      },
      "145": {
        start: {
          line: 368,
          column: 12
        },
        end: {
          line: 369,
          column: 72
        }
      },
      "146": {
        start: {
          line: 371,
          column: 28
        },
        end: {
          line: 371,
          column: 51
        }
      },
      "147": {
        start: {
          line: 372,
          column: 8
        },
        end: {
          line: 378,
          column: 9
        }
      },
      "148": {
        start: {
          line: 374,
          column: 12
        },
        end: {
          line: 376,
          column: 13
        }
      },
      "149": {
        start: {
          line: 375,
          column: 16
        },
        end: {
          line: 375,
          column: 52
        }
      },
      "150": {
        start: {
          line: 377,
          column: 12
        },
        end: {
          line: 377,
          column: 24
        }
      },
      "151": {
        start: {
          line: 380,
          column: 8
        },
        end: {
          line: 396,
          column: 9
        }
      },
      "152": {
        start: {
          line: 381,
          column: 31
        },
        end: {
          line: 381,
          column: 84
        }
      },
      "153": {
        start: {
          line: 382,
          column: 12
        },
        end: {
          line: 383,
          column: 25
        }
      },
      "154": {
        start: {
          line: 383,
          column: 16
        },
        end: {
          line: 383,
          column: 25
        }
      },
      "155": {
        start: {
          line: 384,
          column: 34
        },
        end: {
          line: 384,
          column: 90
        }
      },
      "156": {
        start: {
          line: 386,
          column: 12
        },
        end: {
          line: 395,
          column: 13
        }
      },
      "157": {
        start: {
          line: 387,
          column: 16
        },
        end: {
          line: 394,
          column: 18
        }
      },
      "158": {
        start: {
          line: 398,
          column: 31
        },
        end: {
          line: 398,
          column: 50
        }
      },
      "159": {
        start: {
          line: 399,
          column: 27
        },
        end: {
          line: 399,
          column: 88
        }
      },
      "160": {
        start: {
          line: 400,
          column: 8
        },
        end: {
          line: 409,
          column: 9
        }
      },
      "161": {
        start: {
          line: 401,
          column: 12
        },
        end: {
          line: 408,
          column: 14
        }
      },
      "162": {
        start: {
          line: 410,
          column: 8
        },
        end: {
          line: 410,
          column: 20
        }
      },
      "163": {
        start: {
          line: 418,
          column: 8
        },
        end: {
          line: 420,
          column: 9
        }
      },
      "164": {
        start: {
          line: 419,
          column: 12
        },
        end: {
          line: 419,
          column: 24
        }
      },
      "165": {
        start: {
          line: 421,
          column: 8
        },
        end: {
          line: 440,
          column: 9
        }
      },
      "166": {
        start: {
          line: 422,
          column: 12
        },
        end: {
          line: 422,
          column: 65
        }
      },
      "167": {
        start: {
          line: 424,
          column: 33
        },
        end: {
          line: 424,
          column: 61
        }
      },
      "168": {
        start: {
          line: 425,
          column: 31
        },
        end: {
          line: 425,
          column: 74
        }
      },
      "169": {
        start: {
          line: 427,
          column: 12
        },
        end: {
          line: 427,
          column: 59
        }
      },
      "170": {
        start: {
          line: 428,
          column: 12
        },
        end: {
          line: 435,
          column: 14
        }
      },
      "171": {
        start: {
          line: 438,
          column: 12
        },
        end: {
          line: 438,
          column: 81
        }
      },
      "172": {
        start: {
          line: 439,
          column: 12
        },
        end: {
          line: 439,
          column: 24
        }
      },
      "173": {
        start: {
          line: 449,
          column: 26
        },
        end: {
          line: 449,
          column: 36
        }
      },
      "174": {
        start: {
          line: 450,
          column: 8
        },
        end: {
          line: 461,
          column: 9
        }
      },
      "175": {
        start: {
          line: 451,
          column: 31
        },
        end: {
          line: 451,
          column: 77
        }
      },
      "176": {
        start: {
          line: 452,
          column: 12
        },
        end: {
          line: 458,
          column: 13
        }
      },
      "177": {
        start: {
          line: 454,
          column: 38
        },
        end: {
          line: 454,
          column: 87
        }
      },
      "178": {
        start: {
          line: 455,
          column: 16
        },
        end: {
          line: 457,
          column: 17
        }
      },
      "179": {
        start: {
          line: 456,
          column: 20
        },
        end: {
          line: 456,
          column: 27
        }
      },
      "180": {
        start: {
          line: 460,
          column: 12
        },
        end: {
          line: 460,
          column: 68
        }
      },
      "181": {
        start: {
          line: 460,
          column: 41
        },
        end: {
          line: 460,
          column: 66
        }
      },
      "182": {
        start: {
          line: 462,
          column: 8
        },
        end: {
          line: 462,
          column: 76
        }
      },
      "183": {
        start: {
          line: 468,
          column: 34
        },
        end: {
          line: 468,
          column: 106
        }
      },
      "184": {
        start: {
          line: 469,
          column: 35
        },
        end: {
          line: 469,
          column: 58
        }
      },
      "185": {
        start: {
          line: 470,
          column: 8
        },
        end: {
          line: 473,
          column: 9
        }
      },
      "186": {
        start: {
          line: 471,
          column: 12
        },
        end: {
          line: 471,
          column: 73
        }
      },
      "187": {
        start: {
          line: 472,
          column: 12
        },
        end: {
          line: 472,
          column: 19
        }
      },
      "188": {
        start: {
          line: 474,
          column: 32
        },
        end: {
          line: 474,
          column: 70
        }
      },
      "189": {
        start: {
          line: 475,
          column: 8
        },
        end: {
          line: 475,
          column: 71
        }
      },
      "190": {
        start: {
          line: 476,
          column: 31
        },
        end: {
          line: 476,
          column: 33
        }
      },
      "191": {
        start: {
          line: 477,
          column: 8
        },
        end: {
          line: 480,
          column: 9
        }
      },
      "192": {
        start: {
          line: 477,
          column: 21
        },
        end: {
          line: 477,
          column: 22
        }
      },
      "193": {
        start: {
          line: 478,
          column: 33
        },
        end: {
          line: 478,
          column: 61
        }
      },
      "194": {
        start: {
          line: 479,
          column: 12
        },
        end: {
          line: 479,
          column: 71
        }
      },
      "195": {
        start: {
          line: 481,
          column: 8
        },
        end: {
          line: 487,
          column: 9
        }
      },
      "196": {
        start: {
          line: 482,
          column: 12
        },
        end: {
          line: 482,
          column: 46
        }
      },
      "197": {
        start: {
          line: 483,
          column: 12
        },
        end: {
          line: 483,
          column: 87
        }
      },
      "198": {
        start: {
          line: 486,
          column: 12
        },
        end: {
          line: 486,
          column: 77
        }
      },
      "199": {
        start: {
          line: 493,
          column: 35
        },
        end: {
          line: 493,
          column: 228
        }
      },
      "200": {
        start: {
          line: 493,
          column: 93
        },
        end: {
          line: 493,
          column: 227
        }
      },
      "201": {
        start: {
          line: 493,
          column: 150
        },
        end: {
          line: 493,
          column: 226
        }
      },
      "202": {
        start: {
          line: 494,
          column: 8
        },
        end: {
          line: 494,
          column: 46
        }
      },
      "203": {
        start: {
          line: 495,
          column: 8
        },
        end: {
          line: 495,
          column: 35
        }
      },
      "204": {
        start: {
          line: 496,
          column: 8
        },
        end: {
          line: 496,
          column: 33
        }
      },
      "205": {
        start: {
          line: 502,
          column: 8
        },
        end: {
          line: 504,
          column: 9
        }
      },
      "206": {
        start: {
          line: 503,
          column: 12
        },
        end: {
          line: 503,
          column: 55
        }
      },
      "207": {
        start: {
          line: 505,
          column: 8
        },
        end: {
          line: 507,
          column: 50
        }
      },
      "208": {
        start: {
          line: 506,
          column: 12
        },
        end: {
          line: 506,
          column: 37
        }
      },
      "209": {
        start: {
          line: 508,
          column: 8
        },
        end: {
          line: 508,
          column: 61
        }
      },
      "210": {
        start: {
          line: 514,
          column: 8
        },
        end: {
          line: 528,
          column: 9
        }
      },
      "211": {
        start: {
          line: 515,
          column: 12
        },
        end: {
          line: 527,
          column: 13
        }
      },
      "212": {
        start: {
          line: 516,
          column: 38
        },
        end: {
          line: 516,
          column: 87
        }
      },
      "213": {
        start: {
          line: 517,
          column: 16
        },
        end: {
          line: 517,
          column: 89
        }
      },
      "214": {
        start: {
          line: 519,
          column: 16
        },
        end: {
          line: 522,
          column: 17
        }
      },
      "215": {
        start: {
          line: 520,
          column: 20
        },
        end: {
          line: 520,
          column: 106
        }
      },
      "216": {
        start: {
          line: 521,
          column: 20
        },
        end: {
          line: 521,
          column: 108
        }
      },
      "217": {
        start: {
          line: 525,
          column: 16
        },
        end: {
          line: 525,
          column: 91
        }
      },
      "218": {
        start: {
          line: 526,
          column: 16
        },
        end: {
          line: 526,
          column: 47
        }
      },
      "219": {
        start: {
          line: 529,
          column: 8
        },
        end: {
          line: 529,
          column: 33
        }
      },
      "220": {
        start: {
          line: 538,
          column: 22
        },
        end: {
          line: 538,
          column: 72
        }
      },
      "221": {
        start: {
          line: 539,
          column: 8
        },
        end: {
          line: 539,
          column: 40
        }
      },
      "222": {
        start: {
          line: 547,
          column: 8
        },
        end: {
          line: 547,
          column: 44
        }
      },
      "223": {
        start: {
          line: 548,
          column: 8
        },
        end: {
          line: 553,
          column: 9
        }
      },
      "224": {
        start: {
          line: 549,
          column: 12
        },
        end: {
          line: 549,
          column: 53
        }
      },
      "225": {
        start: {
          line: 552,
          column: 12
        },
        end: {
          line: 552,
          column: 35
        }
      },
      "226": {
        start: {
          line: 555,
          column: 8
        },
        end: {
          line: 567,
          column: 9
        }
      },
      "227": {
        start: {
          line: 556,
          column: 12
        },
        end: {
          line: 558,
          column: 13
        }
      },
      "228": {
        start: {
          line: 557,
          column: 16
        },
        end: {
          line: 557,
          column: 80
        }
      },
      "229": {
        start: {
          line: 559,
          column: 12
        },
        end: {
          line: 561,
          column: 13
        }
      },
      "230": {
        start: {
          line: 560,
          column: 16
        },
        end: {
          line: 560,
          column: 81
        }
      },
      "231": {
        start: {
          line: 563,
          column: 30
        },
        end: {
          line: 565,
          column: 56
        }
      },
      "232": {
        start: {
          line: 564,
          column: 29
        },
        end: {
          line: 564,
          column: 38
        }
      },
      "233": {
        start: {
          line: 565,
          column: 36
        },
        end: {
          line: 565,
          column: 52
        }
      },
      "234": {
        start: {
          line: 566,
          column: 12
        },
        end: {
          line: 566,
          column: 104
        }
      },
      "235": {
        start: {
          line: 569,
          column: 36
        },
        end: {
          line: 569,
          column: 120
        }
      },
      "236": {
        start: {
          line: 570,
          column: 8
        },
        end: {
          line: 570,
          column: 113
        }
      },
      "237": {
        start: {
          line: 571,
          column: 8
        },
        end: {
          line: 571,
          column: 61
        }
      },
      "238": {
        start: {
          line: 577,
          column: 8
        },
        end: {
          line: 577,
          column: 72
        }
      },
      "239": {
        start: {
          line: 578,
          column: 30
        },
        end: {
          line: 578,
          column: 100
        }
      },
      "240": {
        start: {
          line: 578,
          column: 82
        },
        end: {
          line: 578,
          column: 92
        }
      },
      "241": {
        start: {
          line: 579,
          column: 8
        },
        end: {
          line: 581,
          column: 16
        }
      },
      "242": {
        start: {
          line: 589,
          column: 8
        },
        end: {
          line: 589,
          column: 49
        }
      },
      "243": {
        start: {
          line: 591,
          column: 31
        },
        end: {
          line: 591,
          column: 35
        }
      },
      "244": {
        start: {
          line: 592,
          column: 8
        },
        end: {
          line: 594,
          column: 9
        }
      },
      "245": {
        start: {
          line: 593,
          column: 12
        },
        end: {
          line: 593,
          column: 89
        }
      },
      "246": {
        start: {
          line: 600,
          column: 8
        },
        end: {
          line: 600,
          column: 29
        }
      },
      "247": {
        start: {
          line: 601,
          column: 8
        },
        end: {
          line: 601,
          column: 34
        }
      },
      "248": {
        start: {
          line: 602,
          column: 8
        },
        end: {
          line: 602,
          column: 36
        }
      },
      "249": {
        start: {
          line: 603,
          column: 8
        },
        end: {
          line: 603,
          column: 40
        }
      },
      "250": {
        start: {
          line: 604,
          column: 8
        },
        end: {
          line: 604,
          column: 70
        }
      },
      "251": {
        start: {
          line: 607,
          column: 0
        },
        end: {
          line: 607,
          column: 54
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        },
        loc: {
          start: {
            line: 24,
            column: 91
          },
          end: {
            line: 64,
            column: 5
          }
        },
        line: 24
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 68,
            column: 4
          },
          end: {
            line: 68,
            column: 5
          }
        },
        loc: {
          start: {
            line: 68,
            column: 19
          },
          end: {
            line: 82,
            column: 5
          }
        },
        line: 68
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 86,
            column: 4
          },
          end: {
            line: 86,
            column: 5
          }
        },
        loc: {
          start: {
            line: 86,
            column: 20
          },
          end: {
            line: 101,
            column: 5
          }
        },
        line: 86
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 109,
            column: 4
          },
          end: {
            line: 109,
            column: 5
          }
        },
        loc: {
          start: {
            line: 109,
            column: 55
          },
          end: {
            line: 128,
            column: 5
          }
        },
        line: 109
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 134,
            column: 4
          },
          end: {
            line: 134,
            column: 5
          }
        },
        loc: {
          start: {
            line: 134,
            column: 35
          },
          end: {
            line: 137,
            column: 5
          }
        },
        line: 134
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 143,
            column: 4
          },
          end: {
            line: 143,
            column: 5
          }
        },
        loc: {
          start: {
            line: 143,
            column: 38
          },
          end: {
            line: 146,
            column: 5
          }
        },
        line: 143
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 153,
            column: 4
          },
          end: {
            line: 153,
            column: 5
          }
        },
        loc: {
          start: {
            line: 153,
            column: 43
          },
          end: {
            line: 173,
            column: 5
          }
        },
        line: 153
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 179,
            column: 4
          },
          end: {
            line: 179,
            column: 5
          }
        },
        loc: {
          start: {
            line: 179,
            column: 45
          },
          end: {
            line: 204,
            column: 5
          }
        },
        line: 179
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 210,
            column: 4
          },
          end: {
            line: 210,
            column: 5
          }
        },
        loc: {
          start: {
            line: 210,
            column: 47
          },
          end: {
            line: 233,
            column: 5
          }
        },
        line: 210
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 239,
            column: 4
          },
          end: {
            line: 239,
            column: 5
          }
        },
        loc: {
          start: {
            line: 239,
            column: 23
          },
          end: {
            line: 241,
            column: 5
          }
        },
        line: 239
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 248,
            column: 4
          },
          end: {
            line: 248,
            column: 5
          }
        },
        loc: {
          start: {
            line: 248,
            column: 30
          },
          end: {
            line: 250,
            column: 5
          }
        },
        line: 248
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 256,
            column: 4
          },
          end: {
            line: 256,
            column: 5
          }
        },
        loc: {
          start: {
            line: 256,
            column: 28
          },
          end: {
            line: 258,
            column: 5
          }
        },
        line: 256
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 262,
            column: 4
          },
          end: {
            line: 262,
            column: 5
          }
        },
        loc: {
          start: {
            line: 262,
            column: 26
          },
          end: {
            line: 298,
            column: 5
          }
        },
        line: 262
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 264,
            column: 45
          },
          end: {
            line: 264,
            column: 46
          }
        },
        loc: {
          start: {
            line: 264,
            column: 68
          },
          end: {
            line: 268,
            column: 9
          }
        },
        line: 264
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 270,
            column: 52
          },
          end: {
            line: 270,
            column: 53
          }
        },
        loc: {
          start: {
            line: 270,
            column: 68
          },
          end: {
            line: 274,
            column: 9
          }
        },
        line: 270
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 276,
            column: 53
          },
          end: {
            line: 276,
            column: 54
          }
        },
        loc: {
          start: {
            line: 276,
            column: 69
          },
          end: {
            line: 280,
            column: 9
          }
        },
        line: 276
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 282,
            column: 49
          },
          end: {
            line: 282,
            column: 50
          }
        },
        loc: {
          start: {
            line: 282,
            column: 65
          },
          end: {
            line: 288,
            column: 9
          }
        },
        line: 282
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 290,
            column: 52
          },
          end: {
            line: 290,
            column: 53
          }
        },
        loc: {
          start: {
            line: 290,
            column: 68
          },
          end: {
            line: 297,
            column: 9
          }
        },
        line: 290
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 306,
            column: 4
          },
          end: {
            line: 306,
            column: 5
          }
        },
        loc: {
          start: {
            line: 306,
            column: 55
          },
          end: {
            line: 357,
            column: 5
          }
        },
        line: 306
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 364,
            column: 4
          },
          end: {
            line: 364,
            column: 5
          }
        },
        loc: {
          start: {
            line: 364,
            column: 54
          },
          end: {
            line: 411,
            column: 5
          }
        },
        line: 364
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 367,
            column: 20
          },
          end: {
            line: 367,
            column: 21
          }
        },
        loc: {
          start: {
            line: 367,
            column: 30
          },
          end: {
            line: 370,
            column: 9
          }
        },
        line: 367
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 371,
            column: 18
          },
          end: {
            line: 371,
            column: 19
          }
        },
        loc: {
          start: {
            line: 371,
            column: 28
          },
          end: {
            line: 371,
            column: 51
          }
        },
        line: 371
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 417,
            column: 4
          },
          end: {
            line: 417,
            column: 5
          }
        },
        loc: {
          start: {
            line: 417,
            column: 34
          },
          end: {
            line: 441,
            column: 5
          }
        },
        line: 417
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 448,
            column: 4
          },
          end: {
            line: 448,
            column: 5
          }
        },
        loc: {
          start: {
            line: 448,
            column: 84
          },
          end: {
            line: 463,
            column: 5
          }
        },
        line: 448
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 460,
            column: 30
          },
          end: {
            line: 460,
            column: 31
          }
        },
        loc: {
          start: {
            line: 460,
            column: 41
          },
          end: {
            line: 460,
            column: 66
          }
        },
        line: 460
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 467,
            column: 4
          },
          end: {
            line: 467,
            column: 5
          }
        },
        loc: {
          start: {
            line: 467,
            column: 32
          },
          end: {
            line: 488,
            column: 5
          }
        },
        line: 467
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 492,
            column: 4
          },
          end: {
            line: 492,
            column: 5
          }
        },
        loc: {
          start: {
            line: 492,
            column: 36
          },
          end: {
            line: 497,
            column: 5
          }
        },
        line: 492
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 493,
            column: 77
          },
          end: {
            line: 493,
            column: 78
          }
        },
        loc: {
          start: {
            line: 493,
            column: 93
          },
          end: {
            line: 493,
            column: 227
          }
        },
        line: 493
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 493,
            column: 141
          },
          end: {
            line: 493,
            column: 142
          }
        },
        loc: {
          start: {
            line: 493,
            column: 150
          },
          end: {
            line: 493,
            column: 226
          }
        },
        line: 493
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 501,
            column: 4
          },
          end: {
            line: 501,
            column: 5
          }
        },
        loc: {
          start: {
            line: 501,
            column: 34
          },
          end: {
            line: 509,
            column: 5
          }
        },
        line: 501
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 505,
            column: 50
          },
          end: {
            line: 505,
            column: 51
          }
        },
        loc: {
          start: {
            line: 505,
            column: 56
          },
          end: {
            line: 507,
            column: 9
          }
        },
        line: 505
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 513,
            column: 4
          },
          end: {
            line: 513,
            column: 5
          }
        },
        loc: {
          start: {
            line: 513,
            column: 30
          },
          end: {
            line: 530,
            column: 5
          }
        },
        line: 513
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 537,
            column: 4
          },
          end: {
            line: 537,
            column: 5
          }
        },
        loc: {
          start: {
            line: 537,
            column: 36
          },
          end: {
            line: 540,
            column: 5
          }
        },
        line: 537
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 546,
            column: 4
          },
          end: {
            line: 546,
            column: 5
          }
        },
        loc: {
          start: {
            line: 546,
            column: 39
          },
          end: {
            line: 572,
            column: 5
          }
        },
        line: 546
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 564,
            column: 24
          },
          end: {
            line: 564,
            column: 25
          }
        },
        loc: {
          start: {
            line: 564,
            column: 29
          },
          end: {
            line: 564,
            column: 38
          }
        },
        line: 564
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 565,
            column: 24
          },
          end: {
            line: 565,
            column: 25
          }
        },
        loc: {
          start: {
            line: 565,
            column: 36
          },
          end: {
            line: 565,
            column: 52
          }
        },
        line: 565
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 576,
            column: 4
          },
          end: {
            line: 576,
            column: 5
          }
        },
        loc: {
          start: {
            line: 576,
            column: 24
          },
          end: {
            line: 582,
            column: 5
          }
        },
        line: 576
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 578,
            column: 77
          },
          end: {
            line: 578,
            column: 78
          }
        },
        loc: {
          start: {
            line: 578,
            column: 82
          },
          end: {
            line: 578,
            column: 92
          }
        },
        line: 578
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 588,
            column: 4
          },
          end: {
            line: 588,
            column: 5
          }
        },
        loc: {
          start: {
            line: 588,
            column: 38
          },
          end: {
            line: 595,
            column: 5
          }
        },
        line: 588
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 599,
            column: 4
          },
          end: {
            line: 599,
            column: 5
          }
        },
        loc: {
          start: {
            line: 599,
            column: 20
          },
          end: {
            line: 605,
            column: 5
          }
        },
        line: 599
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 69,
            column: 8
          },
          end: {
            line: 72,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 69,
            column: 8
          },
          end: {
            line: 72,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 69
      },
      "1": {
        loc: {
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 78,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 78,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 76
      },
      "2": {
        loc: {
          start: {
            line: 87,
            column: 8
          },
          end: {
            line: 90,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 87,
            column: 8
          },
          end: {
            line: 90,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 87
      },
      "3": {
        loc: {
          start: {
            line: 94,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 94,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 94
      },
      "4": {
        loc: {
          start: {
            line: 110,
            column: 8
          },
          end: {
            line: 113,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 110,
            column: 8
          },
          end: {
            line: 113,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 110
      },
      "5": {
        loc: {
          start: {
            line: 115,
            column: 8
          },
          end: {
            line: 118,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 115,
            column: 8
          },
          end: {
            line: 118,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 115
      },
      "6": {
        loc: {
          start: {
            line: 181,
            column: 8
          },
          end: {
            line: 183,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 181,
            column: 8
          },
          end: {
            line: 183,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 181
      },
      "7": {
        loc: {
          start: {
            line: 184,
            column: 8
          },
          end: {
            line: 187,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 184,
            column: 8
          },
          end: {
            line: 187,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 184
      },
      "8": {
        loc: {
          start: {
            line: 212,
            column: 8
          },
          end: {
            line: 214,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 212,
            column: 8
          },
          end: {
            line: 214,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 212
      },
      "9": {
        loc: {
          start: {
            line: 215,
            column: 8
          },
          end: {
            line: 218,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 215,
            column: 8
          },
          end: {
            line: 218,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 215
      },
      "10": {
        loc: {
          start: {
            line: 249,
            column: 15
          },
          end: {
            line: 249,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 249,
            column: 23
          },
          end: {
            line: 249,
            column: 57
          }
        }, {
          start: {
            line: 249,
            column: 60
          },
          end: {
            line: 249,
            column: 85
          }
        }],
        line: 249
      },
      "11": {
        loc: {
          start: {
            line: 265,
            column: 12
          },
          end: {
            line: 267,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 265,
            column: 12
          },
          end: {
            line: 267,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 265
      },
      "12": {
        loc: {
          start: {
            line: 271,
            column: 12
          },
          end: {
            line: 273,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 271,
            column: 12
          },
          end: {
            line: 273,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 271
      },
      "13": {
        loc: {
          start: {
            line: 277,
            column: 12
          },
          end: {
            line: 279,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 277,
            column: 12
          },
          end: {
            line: 279,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 277
      },
      "14": {
        loc: {
          start: {
            line: 284,
            column: 12
          },
          end: {
            line: 287,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 284,
            column: 12
          },
          end: {
            line: 287,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 284
      },
      "15": {
        loc: {
          start: {
            line: 292,
            column: 12
          },
          end: {
            line: 296,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 292,
            column: 12
          },
          end: {
            line: 296,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 292
      },
      "16": {
        loc: {
          start: {
            line: 321,
            column: 12
          },
          end: {
            line: 323,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 321,
            column: 12
          },
          end: {
            line: 323,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 321
      },
      "17": {
        loc: {
          start: {
            line: 327,
            column: 12
          },
          end: {
            line: 329,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 327,
            column: 12
          },
          end: {
            line: 329,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 327
      },
      "18": {
        loc: {
          start: {
            line: 327,
            column: 16
          },
          end: {
            line: 327,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 327,
            column: 16
          },
          end: {
            line: 327,
            column: 28
          }
        }, {
          start: {
            line: 327,
            column: 32
          },
          end: {
            line: 327,
            column: 54
          }
        }],
        line: 327
      },
      "19": {
        loc: {
          start: {
            line: 345,
            column: 34
          },
          end: {
            line: 345,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 345,
            column: 59
          },
          end: {
            line: 345,
            column: 64
          }
        }, {
          start: {
            line: 345,
            column: 67
          },
          end: {
            line: 345,
            column: 91
          }
        }],
        line: 345
      },
      "20": {
        loc: {
          start: {
            line: 368,
            column: 19
          },
          end: {
            line: 369,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 368,
            column: 19
          },
          end: {
            line: 368,
            column: 62
          }
        }, {
          start: {
            line: 369,
            column: 17
          },
          end: {
            line: 369,
            column: 32
          }
        }, {
          start: {
            line: 369,
            column: 36
          },
          end: {
            line: 369,
            column: 70
          }
        }],
        line: 368
      },
      "21": {
        loc: {
          start: {
            line: 372,
            column: 8
          },
          end: {
            line: 378,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 372,
            column: 8
          },
          end: {
            line: 378,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 372
      },
      "22": {
        loc: {
          start: {
            line: 374,
            column: 12
          },
          end: {
            line: 376,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 374,
            column: 12
          },
          end: {
            line: 376,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 374
      },
      "23": {
        loc: {
          start: {
            line: 382,
            column: 12
          },
          end: {
            line: 383,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 382,
            column: 12
          },
          end: {
            line: 383,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 382
      },
      "24": {
        loc: {
          start: {
            line: 386,
            column: 12
          },
          end: {
            line: 395,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 386,
            column: 12
          },
          end: {
            line: 395,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 386
      },
      "25": {
        loc: {
          start: {
            line: 386,
            column: 16
          },
          end: {
            line: 386,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 386,
            column: 16
          },
          end: {
            line: 386,
            column: 29
          }
        }, {
          start: {
            line: 386,
            column: 33
          },
          end: {
            line: 386,
            column: 64
          }
        }],
        line: 386
      },
      "26": {
        loc: {
          start: {
            line: 400,
            column: 8
          },
          end: {
            line: 409,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 400,
            column: 8
          },
          end: {
            line: 409,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 400
      },
      "27": {
        loc: {
          start: {
            line: 418,
            column: 8
          },
          end: {
            line: 420,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 418,
            column: 8
          },
          end: {
            line: 420,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 418
      },
      "28": {
        loc: {
          start: {
            line: 448,
            column: 43
          },
          end: {
            line: 448,
            column: 82
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 448,
            column: 55
          },
          end: {
            line: 448,
            column: 82
          }
        }],
        line: 448
      },
      "29": {
        loc: {
          start: {
            line: 452,
            column: 12
          },
          end: {
            line: 458,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 452,
            column: 12
          },
          end: {
            line: 458,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 452
      },
      "30": {
        loc: {
          start: {
            line: 452,
            column: 16
          },
          end: {
            line: 452,
            column: 93
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 452,
            column: 16
          },
          end: {
            line: 452,
            column: 26
          }
        }, {
          start: {
            line: 452,
            column: 30
          },
          end: {
            line: 452,
            column: 93
          }
        }],
        line: 452
      },
      "31": {
        loc: {
          start: {
            line: 455,
            column: 16
          },
          end: {
            line: 457,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 455,
            column: 16
          },
          end: {
            line: 457,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 455
      },
      "32": {
        loc: {
          start: {
            line: 455,
            column: 20
          },
          end: {
            line: 455,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 455,
            column: 20
          },
          end: {
            line: 455,
            column: 33
          }
        }, {
          start: {
            line: 455,
            column: 37
          },
          end: {
            line: 455,
            column: 60
          }
        }],
        line: 455
      },
      "33": {
        loc: {
          start: {
            line: 470,
            column: 8
          },
          end: {
            line: 473,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 470,
            column: 8
          },
          end: {
            line: 473,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 470
      },
      "34": {
        loc: {
          start: {
            line: 477,
            column: 24
          },
          end: {
            line: 477,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 477,
            column: 24
          },
          end: {
            line: 477,
            column: 43
          }
        }, {
          start: {
            line: 477,
            column: 47
          },
          end: {
            line: 477,
            column: 83
          }
        }],
        line: 477
      },
      "35": {
        loc: {
          start: {
            line: 502,
            column: 8
          },
          end: {
            line: 504,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 502,
            column: 8
          },
          end: {
            line: 504,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 502
      },
      "36": {
        loc: {
          start: {
            line: 517,
            column: 41
          },
          end: {
            line: 517,
            column: 88
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 517,
            column: 57
          },
          end: {
            line: 517,
            column: 80
          }
        }, {
          start: {
            line: 517,
            column: 83
          },
          end: {
            line: 517,
            column: 88
          }
        }],
        line: 517
      },
      "37": {
        loc: {
          start: {
            line: 519,
            column: 16
          },
          end: {
            line: 522,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 519,
            column: 16
          },
          end: {
            line: 522,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 519
      },
      "38": {
        loc: {
          start: {
            line: 519,
            column: 20
          },
          end: {
            line: 519,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 519,
            column: 20
          },
          end: {
            line: 519,
            column: 43
          }
        }, {
          start: {
            line: 519,
            column: 47
          },
          end: {
            line: 519,
            column: 68
          }
        }],
        line: 519
      },
      "39": {
        loc: {
          start: {
            line: 539,
            column: 15
          },
          end: {
            line: 539,
            column: 39
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 539,
            column: 28
          },
          end: {
            line: 539,
            column: 33
          }
        }, {
          start: {
            line: 539,
            column: 36
          },
          end: {
            line: 539,
            column: 39
          }
        }],
        line: 539
      },
      "40": {
        loc: {
          start: {
            line: 548,
            column: 8
          },
          end: {
            line: 553,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 548,
            column: 8
          },
          end: {
            line: 553,
            column: 9
          }
        }, {
          start: {
            line: 551,
            column: 13
          },
          end: {
            line: 553,
            column: 9
          }
        }],
        line: 548
      },
      "41": {
        loc: {
          start: {
            line: 555,
            column: 8
          },
          end: {
            line: 567,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 555,
            column: 8
          },
          end: {
            line: 567,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 555
      },
      "42": {
        loc: {
          start: {
            line: 556,
            column: 12
          },
          end: {
            line: 558,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 556,
            column: 12
          },
          end: {
            line: 558,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 556
      },
      "43": {
        loc: {
          start: {
            line: 559,
            column: 12
          },
          end: {
            line: 561,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 559,
            column: 12
          },
          end: {
            line: 561,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 559
      },
      "44": {
        loc: {
          start: {
            line: 569,
            column: 36
          },
          end: {
            line: 569,
            column: 120
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 569,
            column: 36
          },
          end: {
            line: 569,
            column: 115
          }
        }, {
          start: {
            line: 569,
            column: 119
          },
          end: {
            line: 569,
            column: 120
          }
        }],
        line: 569
      },
      "45": {
        loc: {
          start: {
            line: 579,
            column: 47
          },
          end: {
            line: 581,
            column: 15
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 580,
            column: 14
          },
          end: {
            line: 580,
            column: 61
          }
        }, {
          start: {
            line: 581,
            column: 14
          },
          end: {
            line: 581,
            column: 15
          }
        }],
        line: 579
      },
      "46": {
        loc: {
          start: {
            line: 592,
            column: 8
          },
          end: {
            line: 594,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 592,
            column: 8
          },
          end: {
            line: 594,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 592
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\tunnel-failover-manager.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\tunnel-failover-manager.ts"],
      sourcesContent: ["import { EventEmitter } from 'events';\r\nimport { Logger } from '../core/logging/logger';\r\nimport { SSHTunnelManager, TunnelConnection, TunnelState, TunnelConfig } from './ssh-tunnel-manager';\r\nimport { TunnelHealthMonitor } from './tunnel-health-monitor';\r\nimport { TunnelLoadBalancer, TunnelSelection } from './tunnel-load-balancer';\r\nimport { TunnelAutoReconnect } from './tunnel-auto-reconnect';\r\n\r\n/**\r\n * Failover configuration\r\n */\r\nexport interface FailoverConfig {\r\n  /** Enable automatic failover */\r\n  enabled: boolean;\r\n  /** Minimum number of backup tunnels to maintain */\r\n  minBackupTunnels: number;\r\n  /** Maximum failover attempts per connection */\r\n  maxFailoverAttempts: number;\r\n  /** Failover timeout in milliseconds */\r\n  failoverTimeout: number;\r\n  /** Health check interval for backup tunnels */\r\n  backupHealthCheckInterval: number;\r\n  /** Enable proactive backup tunnel creation */\r\n  enableProactiveBackups: boolean;\r\n  /** Backup tunnel configurations */\r\n  backupConfigs: Partial<TunnelConfig>[];\r\n  /** Failover priority order */\r\n  failoverPriority: string[];\r\n}\r\n\r\n/**\r\n * Failover event information\r\n */\r\nexport interface FailoverEvent {\r\n  id: string;\r\n  timestamp: Date;\r\n  primaryConnectionId: string;\r\n  backupConnectionId: string | null;\r\n  reason: string;\r\n  success: boolean;\r\n  duration: number;\r\n  error?: Error;\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\n/**\r\n * Failover statistics\r\n */\r\nexport interface FailoverStats {\r\n  totalFailovers: number;\r\n  successfulFailovers: number;\r\n  failedFailovers: number;\r\n  averageFailoverTime: number;\r\n  longestFailoverTime: number;\r\n  shortestFailoverTime: number;\r\n  failoversByConnection: Map<string, number>;\r\n  lastFailoverEvent: FailoverEvent | null;\r\n  currentBackupCount: number;\r\n  backupUtilization: number;\r\n}\r\n\r\n/**\r\n * Backup tunnel status\r\n */\r\nexport interface BackupTunnelStatus {\r\n  connectionId: string;\r\n  isActive: boolean;\r\n  isHealthy: boolean;\r\n  priority: number;\r\n  createdAt: Date;\r\n  lastUsed: Date | null;\r\n  usageCount: number;\r\n  config: Partial<TunnelConfig>;\r\n}\r\n\r\n/**\r\n * Tunnel Failover Manager\r\n * Manages automatic failover between primary and backup SSH tunnels\r\n */\r\nexport class TunnelFailoverManager extends EventEmitter {\r\n  private logger: Logger;\r\n  private tunnelManager: SSHTunnelManager;\r\n  private healthMonitor: TunnelHealthMonitor;\r\n  private loadBalancer: TunnelLoadBalancer;\r\n  private autoReconnect: TunnelAutoReconnect;\r\n  private config: FailoverConfig;\r\n  private failoverStats: FailoverStats;\r\n  private failoverHistory: FailoverEvent[];\r\n  private backupTunnels: Map<string, BackupTunnelStatus>;\r\n  private primaryTunnels: Set<string>;\r\n  private failoverInProgress: Map<string, Promise<TunnelSelection | null>>;\r\n  private backupHealthCheckTimer: NodeJS.Timeout | null;\r\n  private isEnabled: boolean;\r\n\r\n  constructor(\r\n    logger: Logger,\r\n    tunnelManager: SSHTunnelManager,\r\n    healthMonitor: TunnelHealthMonitor,\r\n    loadBalancer: TunnelLoadBalancer,\r\n    autoReconnect: TunnelAutoReconnect,\r\n    config?: Partial<FailoverConfig>\r\n  ) {\r\n    super();\r\n    this.logger = logger;\r\n    this.tunnelManager = tunnelManager;\r\n    this.healthMonitor = healthMonitor;\r\n    this.loadBalancer = loadBalancer;\r\n    this.autoReconnect = autoReconnect;\r\n    this.failoverHistory = [];\r\n    this.backupTunnels = new Map();\r\n    this.primaryTunnels = new Set();\r\n    this.failoverInProgress = new Map();\r\n    this.backupHealthCheckTimer = null;\r\n    this.isEnabled = false;\r\n\r\n    // Default configuration\r\n    this.config = {\r\n      enabled: true,\r\n      minBackupTunnels: 1,\r\n      maxFailoverAttempts: 3,\r\n      failoverTimeout: 30000,\r\n      backupHealthCheckInterval: 60000,\r\n      enableProactiveBackups: true,\r\n      backupConfigs: [],\r\n      failoverPriority: [],\r\n      ...config\r\n    };\r\n\r\n    // Initialize statistics\r\n    this.failoverStats = {\r\n      totalFailovers: 0,\r\n      successfulFailovers: 0,\r\n      failedFailovers: 0,\r\n      averageFailoverTime: 0,\r\n      longestFailoverTime: 0,\r\n      shortestFailoverTime: Infinity,\r\n      failoversByConnection: new Map(),\r\n      lastFailoverEvent: null,\r\n      currentBackupCount: 0,\r\n      backupUtilization: 0\r\n    };\r\n\r\n    this.setupEventListeners();\r\n    this.logger.info('Tunnel Failover Manager initialized', this.config);\r\n  }\r\n\r\n  /**\r\n   * Enable failover management\r\n   */\r\n  async enable(): Promise<void> {\r\n    if (this.isEnabled) {\r\n      this.logger.warn('Failover management is already enabled');\r\n      return;\r\n    }\r\n\r\n    this.isEnabled = true;\r\n    this.logger.info('Enabling failover management');\r\n\r\n    // Create backup tunnels if configured\r\n    if (this.config.enableProactiveBackups) {\r\n      await this.createBackupTunnels();\r\n    }\r\n\r\n    // Start backup health monitoring\r\n    this.startBackupHealthMonitoring();\r\n\r\n    this.emit('failoverEnabled');\r\n  }\r\n\r\n  /**\r\n   * Disable failover management\r\n   */\r\n  async disable(): Promise<void> {\r\n    if (!this.isEnabled) {\r\n      this.logger.warn('Failover management is already disabled');\r\n      return;\r\n    }\r\n\r\n    this.isEnabled = false;\r\n    this.logger.info('Disabling failover management');\r\n\r\n    // Stop backup health monitoring\r\n    if (this.backupHealthCheckTimer) {\r\n      clearInterval(this.backupHealthCheckTimer);\r\n      this.backupHealthCheckTimer = null;\r\n    }\r\n\r\n    // Disconnect backup tunnels\r\n    await this.disconnectBackupTunnels();\r\n\r\n    this.emit('failoverDisabled');\r\n  }\r\n\r\n  /**\r\n   * Perform failover from primary to backup tunnel\r\n   * \r\n   * @param primaryConnectionId - Primary connection that failed\r\n   * @param reason - Reason for failover\r\n   * @returns Backup tunnel selection or null if failed\r\n   */\r\n  async performFailover(primaryConnectionId: string, reason: string): Promise<TunnelSelection | null> {\r\n    if (!this.isEnabled) {\r\n      this.logger.warn('Failover is disabled');\r\n      return null;\r\n    }\r\n\r\n    // Check if failover is already in progress for this connection\r\n    if (this.failoverInProgress.has(primaryConnectionId)) {\r\n      this.logger.info(`Failover already in progress for connection: ${primaryConnectionId}`);\r\n      return this.failoverInProgress.get(primaryConnectionId)!;\r\n    }\r\n\r\n    const failoverPromise = this.executeFailover(primaryConnectionId, reason);\r\n    this.failoverInProgress.set(primaryConnectionId, failoverPromise);\r\n\r\n    try {\r\n      const result = await failoverPromise;\r\n      return result;\r\n    } finally {\r\n      this.failoverInProgress.delete(primaryConnectionId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add primary tunnel to failover management\r\n   * \r\n   * @param connectionId - Primary connection ID\r\n   */\r\n  addPrimaryTunnel(connectionId: string): void {\r\n    this.primaryTunnels.add(connectionId);\r\n    this.logger.info(`Added primary tunnel to failover management: ${connectionId}`);\r\n  }\r\n\r\n  /**\r\n   * Remove primary tunnel from failover management\r\n   * \r\n   * @param connectionId - Primary connection ID\r\n   */\r\n  removePrimaryTunnel(connectionId: string): void {\r\n    this.primaryTunnels.delete(connectionId);\r\n    this.logger.info(`Removed primary tunnel from failover management: ${connectionId}`);\r\n  }\r\n\r\n  /**\r\n   * Create backup tunnel with specified configuration\r\n   * \r\n   * @param backupConfig - Backup tunnel configuration\r\n   * @returns Created backup tunnel connection\r\n   */\r\n  async createBackupTunnel(backupConfig: Partial<TunnelConfig>): Promise<TunnelConnection> {\r\n    this.logger.info('Creating backup tunnel', { config: backupConfig });\r\n\r\n    // Create tunnel connection\r\n    const connection = await this.tunnelManager.createTunnel(backupConfig);\r\n\r\n    // Register as backup tunnel\r\n    const backupStatus: BackupTunnelStatus = {\r\n      connectionId: connection.id,\r\n      isActive: false,\r\n      isHealthy: false,\r\n      priority: this.getBackupPriority(connection.id),\r\n      createdAt: new Date(),\r\n      lastUsed: null,\r\n      usageCount: 0,\r\n      config: backupConfig\r\n    };\r\n\r\n    this.backupTunnels.set(connection.id, backupStatus);\r\n    this.updateBackupStats();\r\n\r\n    this.logger.info(`Backup tunnel created: ${connection.id}`);\r\n    this.emit('backupTunnelCreated', connection, backupStatus);\r\n\r\n    return connection;\r\n  }\r\n\r\n  /**\r\n   * Activate backup tunnel\r\n   * \r\n   * @param connectionId - Backup connection ID\r\n   */\r\n  async activateBackupTunnel(connectionId: string): Promise<void> {\r\n    const backupStatus = this.backupTunnels.get(connectionId);\r\n    if (!backupStatus) {\r\n      throw new Error(`Backup tunnel not found: ${connectionId}`);\r\n    }\r\n\r\n    if (backupStatus.isActive) {\r\n      this.logger.warn(`Backup tunnel already active: ${connectionId}`);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      this.logger.info(`Activating backup tunnel: ${connectionId}`);\r\n\r\n      // Establish tunnel connection\r\n      await this.tunnelManager.establishTunnel(connectionId);\r\n\r\n      // Update status\r\n      backupStatus.isActive = true;\r\n      backupStatus.lastUsed = new Date();\r\n      backupStatus.usageCount++;\r\n\r\n      this.updateBackupStats();\r\n\r\n      this.logger.info(`Backup tunnel activated: ${connectionId}`);\r\n      this.emit('backupTunnelActivated', connectionId, backupStatus);\r\n\r\n    } catch (error) {\r\n      this.logger.error(`Failed to activate backup tunnel: ${connectionId}`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deactivate backup tunnel\r\n   * \r\n   * @param connectionId - Backup connection ID\r\n   */\r\n  async deactivateBackupTunnel(connectionId: string): Promise<void> {\r\n    const backupStatus = this.backupTunnels.get(connectionId);\r\n    if (!backupStatus) {\r\n      throw new Error(`Backup tunnel not found: ${connectionId}`);\r\n    }\r\n\r\n    if (!backupStatus.isActive) {\r\n      this.logger.warn(`Backup tunnel already inactive: ${connectionId}`);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      this.logger.info(`Deactivating backup tunnel: ${connectionId}`);\r\n\r\n      // Disconnect tunnel\r\n      await this.tunnelManager.disconnectTunnel(connectionId);\r\n\r\n      // Update status\r\n      backupStatus.isActive = false;\r\n\r\n      this.updateBackupStats();\r\n\r\n      this.logger.info(`Backup tunnel deactivated: ${connectionId}`);\r\n      this.emit('backupTunnelDeactivated', connectionId, backupStatus);\r\n\r\n    } catch (error) {\r\n      this.logger.error(`Failed to deactivate backup tunnel: ${connectionId}`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get failover statistics\r\n   * \r\n   * @returns Current failover statistics\r\n   */\r\n  getFailoverStats(): FailoverStats {\r\n    return { ...this.failoverStats };\r\n  }\r\n\r\n  /**\r\n   * Get failover history\r\n   * \r\n   * @param limit - Maximum number of events to return\r\n   * @returns Array of failover events\r\n   */\r\n  getFailoverHistory(limit?: number): FailoverEvent[] {\r\n    return limit ? this.failoverHistory.slice(-limit) : [...this.failoverHistory];\r\n  }\r\n\r\n  /**\r\n   * Get backup tunnel status\r\n   * \r\n   * @returns Map of backup tunnel statuses\r\n   */\r\n  getBackupTunnelStatus(): Map<string, BackupTunnelStatus> {\r\n    return new Map(this.backupTunnels);\r\n  }\r\n\r\n  /**\r\n   * Setup event listeners\r\n   */\r\n  private setupEventListeners(): void {\r\n    // Listen for tunnel failures\r\n    this.tunnelManager.on('tunnelError', (connection, error) => {\r\n      if (this.primaryTunnels.has(connection.id)) {\r\n        this.performFailover(connection.id, `Tunnel error: ${error.message}`);\r\n      }\r\n    });\r\n\r\n    // Listen for tunnel disconnections\r\n    this.tunnelManager.on('tunnelDisconnected', (connection) => {\r\n      if (this.primaryTunnels.has(connection.id)) {\r\n        this.performFailover(connection.id, 'Tunnel disconnected');\r\n      }\r\n    });\r\n\r\n    // Listen for health issues\r\n    this.healthMonitor.on('connectionUnhealthy', (connection) => {\r\n      if (this.primaryTunnels.has(connection.id)) {\r\n        this.performFailover(connection.id, 'Connection unhealthy');\r\n      }\r\n    });\r\n\r\n    // Listen for backup tunnel connections\r\n    this.tunnelManager.on('tunnelConnected', (connection) => {\r\n      const backupStatus = this.backupTunnels.get(connection.id);\r\n      if (backupStatus) {\r\n        backupStatus.isHealthy = true;\r\n        this.updateBackupStats();\r\n      }\r\n    });\r\n\r\n    // Listen for backup tunnel disconnections\r\n    this.tunnelManager.on('tunnelDisconnected', (connection) => {\r\n      const backupStatus = this.backupTunnels.get(connection.id);\r\n      if (backupStatus) {\r\n        backupStatus.isActive = false;\r\n        backupStatus.isHealthy = false;\r\n        this.updateBackupStats();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Execute failover process\r\n   * \r\n   * @param primaryConnectionId - Primary connection ID\r\n   * @param reason - Reason for failover\r\n   * @returns Backup tunnel selection or null\r\n   */\r\n  private async executeFailover(primaryConnectionId: string, reason: string): Promise<TunnelSelection | null> {\r\n    const startTime = Date.now();\r\n    const failoverEvent: FailoverEvent = {\r\n      id: `failover_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n      timestamp: new Date(),\r\n      primaryConnectionId,\r\n      backupConnectionId: null,\r\n      reason,\r\n      success: false,\r\n      duration: 0\r\n    };\r\n\r\n    try {\r\n      this.logger.warn(`Starting failover for connection: ${primaryConnectionId}`, { reason });\r\n\r\n      // Find best backup tunnel\r\n      const backupTunnel = await this.selectBestBackupTunnel(primaryConnectionId);\r\n      \r\n      if (!backupTunnel) {\r\n        throw new Error('No suitable backup tunnel available');\r\n      }\r\n\r\n      failoverEvent.backupConnectionId = backupTunnel.connection.id;\r\n\r\n      // Activate backup tunnel if not already active\r\n      const backupStatus = this.backupTunnels.get(backupTunnel.connection.id);\r\n      if (backupStatus && !backupStatus.isActive) {\r\n        await this.activateBackupTunnel(backupTunnel.connection.id);\r\n      }\r\n\r\n      // Wait for backup tunnel to be ready\r\n      await this.waitForTunnelReady(backupTunnel.connection.id);\r\n\r\n      // Mark failover as successful\r\n      failoverEvent.success = true;\r\n      failoverEvent.duration = Date.now() - startTime;\r\n\r\n      // Update statistics\r\n      this.updateFailoverStats(failoverEvent);\r\n\r\n      this.logger.info(`Failover successful: ${primaryConnectionId} -> ${backupTunnel.connection.id}`, {\r\n        duration: `${failoverEvent.duration}ms`\r\n      });\r\n\r\n      this.emit('failoverSuccessful', failoverEvent, backupTunnel);\r\n      return backupTunnel;\r\n\r\n    } catch (error) {\r\n      failoverEvent.success = false;\r\n      failoverEvent.error = error instanceof Error ? error : new Error(String(error));\r\n      failoverEvent.duration = Date.now() - startTime;\r\n\r\n      // Update statistics\r\n      this.updateFailoverStats(failoverEvent);\r\n\r\n      this.logger.error(`Failover failed for connection: ${primaryConnectionId}`, error);\r\n      this.emit('failoverFailed', failoverEvent);\r\n\r\n      return null;\r\n\r\n    } finally {\r\n      // Store failover event in history\r\n      this.storeFailoverEvent(failoverEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Select best backup tunnel for failover\r\n   * \r\n   * @param excludeConnectionId - Connection ID to exclude\r\n   * @returns Best backup tunnel selection or null\r\n   */\r\n  private async selectBestBackupTunnel(excludeConnectionId: string): Promise<TunnelSelection | null> {\r\n    // Get available backup tunnels\r\n    const availableBackups = Array.from(this.backupTunnels.values())\r\n      .filter(backup => {\r\n        return backup.connectionId !== excludeConnectionId &&\r\n               (backup.isActive || this.config.enableProactiveBackups);\r\n      })\r\n      .sort((a, b) => a.priority - b.priority); // Sort by priority\r\n\r\n    if (availableBackups.length === 0) {\r\n      // Try to create emergency backup if no backups available\r\n      if (this.config.backupConfigs.length > 0) {\r\n        return this.createEmergencyBackup();\r\n      }\r\n      return null;\r\n    }\r\n\r\n    // Select best backup based on health and priority\r\n    for (const backup of availableBackups) {\r\n      const connection = this.tunnelManager.getConnection(backup.connectionId);\r\n      if (!connection) continue;\r\n\r\n      const healthMetrics = this.healthMonitor.getHealthMetrics(backup.connectionId);\r\n      \r\n      // Check if backup is healthy enough\r\n      if (healthMetrics && healthMetrics.healthScore >= 50) {\r\n        return {\r\n          connection,\r\n          reason: 'Backup tunnel selection',\r\n          weight: 1,\r\n          healthScore: healthMetrics.healthScore,\r\n          latency: healthMetrics.latency,\r\n          selectionTime: new Date()\r\n        };\r\n      }\r\n    }\r\n\r\n    // If no healthy backup found, use the highest priority one\r\n    const fallbackBackup = availableBackups[0];\r\n    const connection = this.tunnelManager.getConnection(fallbackBackup.connectionId);\r\n    \r\n    if (connection) {\r\n      return {\r\n        connection,\r\n        reason: 'Fallback backup tunnel selection',\r\n        weight: 1,\r\n        healthScore: 0,\r\n        latency: 0,\r\n        selectionTime: new Date()\r\n      };\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Create emergency backup tunnel\r\n   * \r\n   * @returns Emergency backup tunnel selection or null\r\n   */\r\n  private async createEmergencyBackup(): Promise<TunnelSelection | null> {\r\n    if (this.config.backupConfigs.length === 0) {\r\n      return null;\r\n    }\r\n\r\n    try {\r\n      this.logger.warn('Creating emergency backup tunnel');\r\n\r\n      // Use first backup configuration\r\n      const backupConfig = this.config.backupConfigs[0];\r\n      const connection = await this.createBackupTunnel(backupConfig);\r\n      \r\n      // Activate immediately\r\n      await this.activateBackupTunnel(connection.id);\r\n\r\n      return {\r\n        connection,\r\n        reason: 'Emergency backup tunnel creation',\r\n        weight: 1,\r\n        healthScore: 50, // Assume moderate health for new tunnel\r\n        latency: 0,\r\n        selectionTime: new Date()\r\n      };\r\n\r\n    } catch (error) {\r\n      this.logger.error('Failed to create emergency backup tunnel', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Wait for tunnel to be ready\r\n   * \r\n   * @param connectionId - Connection ID\r\n   * @param timeoutMs - Timeout in milliseconds\r\n   */\r\n  private async waitForTunnelReady(connectionId: string, timeoutMs: number = this.config.failoverTimeout): Promise<void> {\r\n    const startTime = Date.now();\r\n    \r\n    while (Date.now() - startTime < timeoutMs) {\r\n      const connection = this.tunnelManager.getConnection(connectionId);\r\n      \r\n      if (connection && connection.state === TunnelState.CONNECTED) {\r\n        // Additional health check\r\n        const healthMetrics = this.healthMonitor.getHealthMetrics(connectionId);\r\n        if (healthMetrics && healthMetrics.isHealthy) {\r\n          return;\r\n        }\r\n      }\r\n\r\n      // Wait before next check\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n    }\r\n\r\n    throw new Error(`Tunnel not ready within timeout: ${connectionId}`);\r\n  }\r\n\r\n  /**\r\n   * Create backup tunnels from configuration\r\n   */\r\n  private async createBackupTunnels(): Promise<void> {\r\n    const targetBackupCount = Math.max(this.config.minBackupTunnels, this.config.backupConfigs.length);\r\n    const currentBackupCount = this.backupTunnels.size;\r\n\r\n    if (currentBackupCount >= targetBackupCount) {\r\n      this.logger.debug('Sufficient backup tunnels already exist');\r\n      return;\r\n    }\r\n\r\n    const tunnelsToCreate = targetBackupCount - currentBackupCount;\r\n    this.logger.info(`Creating ${tunnelsToCreate} backup tunnels`);\r\n\r\n    const createPromises = [];\r\n    for (let i = 0; i < tunnelsToCreate && i < this.config.backupConfigs.length; i++) {\r\n      const backupConfig = this.config.backupConfigs[i];\r\n      createPromises.push(this.createBackupTunnel(backupConfig));\r\n    }\r\n\r\n    try {\r\n      await Promise.all(createPromises);\r\n      this.logger.info(`Successfully created ${tunnelsToCreate} backup tunnels`);\r\n    } catch (error) {\r\n      this.logger.error('Failed to create some backup tunnels', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Disconnect all backup tunnels\r\n   */\r\n  private async disconnectBackupTunnels(): Promise<void> {\r\n    const disconnectPromises = Array.from(this.backupTunnels.keys()).map(\r\n      connectionId => this.deactivateBackupTunnel(connectionId).catch(error =>\r\n        this.logger.error(`Error deactivating backup tunnel ${connectionId}`, error)\r\n      )\r\n    );\r\n\r\n    await Promise.all(disconnectPromises);\r\n    this.backupTunnels.clear();\r\n    this.updateBackupStats();\r\n  }\r\n\r\n  /**\r\n   * Start backup health monitoring\r\n   */\r\n  private startBackupHealthMonitoring(): void {\r\n    if (this.backupHealthCheckTimer) {\r\n      clearInterval(this.backupHealthCheckTimer);\r\n    }\r\n\r\n    this.backupHealthCheckTimer = setInterval(() => {\r\n      this.checkBackupHealth();\r\n    }, this.config.backupHealthCheckInterval);\r\n\r\n    this.logger.info('Started backup health monitoring');\r\n  }\r\n\r\n  /**\r\n   * Check health of backup tunnels\r\n   */\r\n  private async checkBackupHealth(): Promise<void> {\r\n    for (const [connectionId, backupStatus] of this.backupTunnels.entries()) {\r\n      try {\r\n        const healthMetrics = this.healthMonitor.getHealthMetrics(connectionId);\r\n        backupStatus.isHealthy = healthMetrics ? healthMetrics.isHealthy : false;\r\n\r\n        // If backup is unhealthy and active, try to reconnect\r\n        if (!backupStatus.isHealthy && backupStatus.isActive) {\r\n          this.logger.warn(`Backup tunnel unhealthy, attempting reconnection: ${connectionId}`);\r\n          await this.autoReconnect.forceReconnection(connectionId, 'Backup health check failure');\r\n        }\r\n\r\n      } catch (error) {\r\n        this.logger.error(`Backup health check failed for ${connectionId}`, error);\r\n        backupStatus.isHealthy = false;\r\n      }\r\n    }\r\n\r\n    this.updateBackupStats();\r\n  }\r\n\r\n  /**\r\n   * Get backup priority for connection\r\n   * \r\n   * @param connectionId - Connection ID\r\n   * @returns Priority number (lower = higher priority)\r\n   */\r\n  private getBackupPriority(connectionId: string): number {\r\n    const index = this.config.failoverPriority.indexOf(connectionId);\r\n    return index >= 0 ? index : 999; // Default low priority\r\n  }\r\n\r\n  /**\r\n   * Update failover statistics\r\n   * \r\n   * @param failoverEvent - Failover event\r\n   */\r\n  private updateFailoverStats(failoverEvent: FailoverEvent): void {\r\n    this.failoverStats.totalFailovers++;\r\n    \r\n    if (failoverEvent.success) {\r\n      this.failoverStats.successfulFailovers++;\r\n    } else {\r\n      this.failedFailovers++;\r\n    }\r\n\r\n    // Update timing statistics\r\n    if (failoverEvent.success) {\r\n      if (failoverEvent.duration > this.failoverStats.longestFailoverTime) {\r\n        this.failoverStats.longestFailoverTime = failoverEvent.duration;\r\n      }\r\n      \r\n      if (failoverEvent.duration < this.failoverStats.shortestFailoverTime) {\r\n        this.failoverStats.shortestFailoverTime = failoverEvent.duration;\r\n      }\r\n\r\n      // Calculate average\r\n      const totalTime = this.failoverHistory\r\n        .filter(e => e.success)\r\n        .reduce((sum, e) => sum + e.duration, 0);\r\n      this.failoverStats.averageFailoverTime = totalTime / this.failoverStats.successfulFailovers;\r\n    }\r\n\r\n    // Update per-connection statistics\r\n    const connectionFailovers = this.failoverStats.failoversByConnection.get(failoverEvent.primaryConnectionId) || 0;\r\n    this.failoverStats.failoversByConnection.set(failoverEvent.primaryConnectionId, connectionFailovers + 1);\r\n\r\n    this.failoverStats.lastFailoverEvent = failoverEvent;\r\n  }\r\n\r\n  /**\r\n   * Update backup statistics\r\n   */\r\n  private updateBackupStats(): void {\r\n    this.failoverStats.currentBackupCount = this.backupTunnels.size;\r\n    \r\n    const activeBackups = Array.from(this.backupTunnels.values()).filter(b => b.isActive).length;\r\n    this.failoverStats.backupUtilization = this.backupTunnels.size > 0 \r\n      ? (activeBackups / this.backupTunnels.size) * 100 \r\n      : 0;\r\n  }\r\n\r\n  /**\r\n   * Store failover event in history\r\n   * \r\n   * @param failoverEvent - Failover event to store\r\n   */\r\n  private storeFailoverEvent(failoverEvent: FailoverEvent): void {\r\n    this.failoverHistory.push(failoverEvent);\r\n\r\n    // Limit history size\r\n    const maxHistorySize = 1000;\r\n    if (this.failoverHistory.length > maxHistorySize) {\r\n      this.failoverHistory.splice(0, this.failoverHistory.length - maxHistorySize);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cleanup failover manager resources\r\n   */\r\n  async cleanup(): Promise<void> {\r\n    await this.disable();\r\n    this.failoverHistory = [];\r\n    this.primaryTunnels.clear();\r\n    this.failoverInProgress.clear();\r\n    this.logger.info('Tunnel failover manager cleanup completed');\r\n  }\r\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "6fc90f190e21defea083c229d3f6db3b511ed790"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1o4inqbypn = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1o4inqbypn();
cov_1o4inqbypn().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1o4inqbypn().s[1]++;
exports.TunnelFailoverManager = void 0;
const events_1 =
/* istanbul ignore next */
(cov_1o4inqbypn().s[2]++, require("events"));
const ssh_tunnel_manager_1 =
/* istanbul ignore next */
(cov_1o4inqbypn().s[3]++, require("./ssh-tunnel-manager"));
/**
 * Tunnel Failover Manager
 * Manages automatic failover between primary and backup SSH tunnels
 */
class TunnelFailoverManager extends
/* istanbul ignore next */
(events_1.EventEmitter) {
  logger;
  tunnelManager;
  healthMonitor;
  loadBalancer;
  autoReconnect;
  config;
  failoverStats;
  failoverHistory;
  backupTunnels;
  primaryTunnels;
  failoverInProgress;
  backupHealthCheckTimer;
  isEnabled;
  constructor(logger, tunnelManager, healthMonitor, loadBalancer, autoReconnect, config) {
    /* istanbul ignore next */
    cov_1o4inqbypn().f[0]++;
    cov_1o4inqbypn().s[4]++;
    super();
    /* istanbul ignore next */
    cov_1o4inqbypn().s[5]++;
    this.logger = logger;
    /* istanbul ignore next */
    cov_1o4inqbypn().s[6]++;
    this.tunnelManager = tunnelManager;
    /* istanbul ignore next */
    cov_1o4inqbypn().s[7]++;
    this.healthMonitor = healthMonitor;
    /* istanbul ignore next */
    cov_1o4inqbypn().s[8]++;
    this.loadBalancer = loadBalancer;
    /* istanbul ignore next */
    cov_1o4inqbypn().s[9]++;
    this.autoReconnect = autoReconnect;
    /* istanbul ignore next */
    cov_1o4inqbypn().s[10]++;
    this.failoverHistory = [];
    /* istanbul ignore next */
    cov_1o4inqbypn().s[11]++;
    this.backupTunnels = new Map();
    /* istanbul ignore next */
    cov_1o4inqbypn().s[12]++;
    this.primaryTunnels = new Set();
    /* istanbul ignore next */
    cov_1o4inqbypn().s[13]++;
    this.failoverInProgress = new Map();
    /* istanbul ignore next */
    cov_1o4inqbypn().s[14]++;
    this.backupHealthCheckTimer = null;
    /* istanbul ignore next */
    cov_1o4inqbypn().s[15]++;
    this.isEnabled = false;
    // Default configuration
    /* istanbul ignore next */
    cov_1o4inqbypn().s[16]++;
    this.config = {
      enabled: true,
      minBackupTunnels: 1,
      maxFailoverAttempts: 3,
      failoverTimeout: 30000,
      backupHealthCheckInterval: 60000,
      enableProactiveBackups: true,
      backupConfigs: [],
      failoverPriority: [],
      ...config
    };
    // Initialize statistics
    /* istanbul ignore next */
    cov_1o4inqbypn().s[17]++;
    this.failoverStats = {
      totalFailovers: 0,
      successfulFailovers: 0,
      failedFailovers: 0,
      averageFailoverTime: 0,
      longestFailoverTime: 0,
      shortestFailoverTime: Infinity,
      failoversByConnection: new Map(),
      lastFailoverEvent: null,
      currentBackupCount: 0,
      backupUtilization: 0
    };
    /* istanbul ignore next */
    cov_1o4inqbypn().s[18]++;
    this.setupEventListeners();
    /* istanbul ignore next */
    cov_1o4inqbypn().s[19]++;
    this.logger.info('Tunnel Failover Manager initialized', this.config);
  }
  /**
   * Enable failover management
   */
  async enable() {
    /* istanbul ignore next */
    cov_1o4inqbypn().f[1]++;
    cov_1o4inqbypn().s[20]++;
    if (this.isEnabled) {
      /* istanbul ignore next */
      cov_1o4inqbypn().b[0][0]++;
      cov_1o4inqbypn().s[21]++;
      this.logger.warn('Failover management is already enabled');
      /* istanbul ignore next */
      cov_1o4inqbypn().s[22]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1o4inqbypn().b[0][1]++;
    }
    cov_1o4inqbypn().s[23]++;
    this.isEnabled = true;
    /* istanbul ignore next */
    cov_1o4inqbypn().s[24]++;
    this.logger.info('Enabling failover management');
    // Create backup tunnels if configured
    /* istanbul ignore next */
    cov_1o4inqbypn().s[25]++;
    if (this.config.enableProactiveBackups) {
      /* istanbul ignore next */
      cov_1o4inqbypn().b[1][0]++;
      cov_1o4inqbypn().s[26]++;
      await this.createBackupTunnels();
    } else
    /* istanbul ignore next */
    {
      cov_1o4inqbypn().b[1][1]++;
    }
    // Start backup health monitoring
    cov_1o4inqbypn().s[27]++;
    this.startBackupHealthMonitoring();
    /* istanbul ignore next */
    cov_1o4inqbypn().s[28]++;
    this.emit('failoverEnabled');
  }
  /**
   * Disable failover management
   */
  async disable() {
    /* istanbul ignore next */
    cov_1o4inqbypn().f[2]++;
    cov_1o4inqbypn().s[29]++;
    if (!this.isEnabled) {
      /* istanbul ignore next */
      cov_1o4inqbypn().b[2][0]++;
      cov_1o4inqbypn().s[30]++;
      this.logger.warn('Failover management is already disabled');
      /* istanbul ignore next */
      cov_1o4inqbypn().s[31]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1o4inqbypn().b[2][1]++;
    }
    cov_1o4inqbypn().s[32]++;
    this.isEnabled = false;
    /* istanbul ignore next */
    cov_1o4inqbypn().s[33]++;
    this.logger.info('Disabling failover management');
    // Stop backup health monitoring
    /* istanbul ignore next */
    cov_1o4inqbypn().s[34]++;
    if (this.backupHealthCheckTimer) {
      /* istanbul ignore next */
      cov_1o4inqbypn().b[3][0]++;
      cov_1o4inqbypn().s[35]++;
      clearInterval(this.backupHealthCheckTimer);
      /* istanbul ignore next */
      cov_1o4inqbypn().s[36]++;
      this.backupHealthCheckTimer = null;
    } else
    /* istanbul ignore next */
    {
      cov_1o4inqbypn().b[3][1]++;
    }
    // Disconnect backup tunnels
    cov_1o4inqbypn().s[37]++;
    await this.disconnectBackupTunnels();
    /* istanbul ignore next */
    cov_1o4inqbypn().s[38]++;
    this.emit('failoverDisabled');
  }
  /**
   * Perform failover from primary to backup tunnel
   *
   * @param primaryConnectionId - Primary connection that failed
   * @param reason - Reason for failover
   * @returns Backup tunnel selection or null if failed
   */
  async performFailover(primaryConnectionId, reason) {
    /* istanbul ignore next */
    cov_1o4inqbypn().f[3]++;
    cov_1o4inqbypn().s[39]++;
    if (!this.isEnabled) {
      /* istanbul ignore next */
      cov_1o4inqbypn().b[4][0]++;
      cov_1o4inqbypn().s[40]++;
      this.logger.warn('Failover is disabled');
      /* istanbul ignore next */
      cov_1o4inqbypn().s[41]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_1o4inqbypn().b[4][1]++;
    }
    // Check if failover is already in progress for this connection
    cov_1o4inqbypn().s[42]++;
    if (this.failoverInProgress.has(primaryConnectionId)) {
      /* istanbul ignore next */
      cov_1o4inqbypn().b[5][0]++;
      cov_1o4inqbypn().s[43]++;
      this.logger.info(`Failover already in progress for connection: ${primaryConnectionId}`);
      /* istanbul ignore next */
      cov_1o4inqbypn().s[44]++;
      return this.failoverInProgress.get(primaryConnectionId);
    } else
    /* istanbul ignore next */
    {
      cov_1o4inqbypn().b[5][1]++;
    }
    const failoverPromise =
    /* istanbul ignore next */
    (cov_1o4inqbypn().s[45]++, this.executeFailover(primaryConnectionId, reason));
    /* istanbul ignore next */
    cov_1o4inqbypn().s[46]++;
    this.failoverInProgress.set(primaryConnectionId, failoverPromise);
    /* istanbul ignore next */
    cov_1o4inqbypn().s[47]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_1o4inqbypn().s[48]++, await failoverPromise);
      /* istanbul ignore next */
      cov_1o4inqbypn().s[49]++;
      return result;
    } finally {
      /* istanbul ignore next */
      cov_1o4inqbypn().s[50]++;
      this.failoverInProgress.delete(primaryConnectionId);
    }
  }
  /**
   * Add primary tunnel to failover management
   *
   * @param connectionId - Primary connection ID
   */
  addPrimaryTunnel(connectionId) {
    /* istanbul ignore next */
    cov_1o4inqbypn().f[4]++;
    cov_1o4inqbypn().s[51]++;
    this.primaryTunnels.add(connectionId);
    /* istanbul ignore next */
    cov_1o4inqbypn().s[52]++;
    this.logger.info(`Added primary tunnel to failover management: ${connectionId}`);
  }
  /**
   * Remove primary tunnel from failover management
   *
   * @param connectionId - Primary connection ID
   */
  removePrimaryTunnel(connectionId) {
    /* istanbul ignore next */
    cov_1o4inqbypn().f[5]++;
    cov_1o4inqbypn().s[53]++;
    this.primaryTunnels.delete(connectionId);
    /* istanbul ignore next */
    cov_1o4inqbypn().s[54]++;
    this.logger.info(`Removed primary tunnel from failover management: ${connectionId}`);
  }
  /**
   * Create backup tunnel with specified configuration
   *
   * @param backupConfig - Backup tunnel configuration
   * @returns Created backup tunnel connection
   */
  async createBackupTunnel(backupConfig) {
    /* istanbul ignore next */
    cov_1o4inqbypn().f[6]++;
    cov_1o4inqbypn().s[55]++;
    this.logger.info('Creating backup tunnel', {
      config: backupConfig
    });
    // Create tunnel connection
    const connection =
    /* istanbul ignore next */
    (cov_1o4inqbypn().s[56]++, await this.tunnelManager.createTunnel(backupConfig));
    // Register as backup tunnel
    const backupStatus =
    /* istanbul ignore next */
    (cov_1o4inqbypn().s[57]++, {
      connectionId: connection.id,
      isActive: false,
      isHealthy: false,
      priority: this.getBackupPriority(connection.id),
      createdAt: new Date(),
      lastUsed: null,
      usageCount: 0,
      config: backupConfig
    });
    /* istanbul ignore next */
    cov_1o4inqbypn().s[58]++;
    this.backupTunnels.set(connection.id, backupStatus);
    /* istanbul ignore next */
    cov_1o4inqbypn().s[59]++;
    this.updateBackupStats();
    /* istanbul ignore next */
    cov_1o4inqbypn().s[60]++;
    this.logger.info(`Backup tunnel created: ${connection.id}`);
    /* istanbul ignore next */
    cov_1o4inqbypn().s[61]++;
    this.emit('backupTunnelCreated', connection, backupStatus);
    /* istanbul ignore next */
    cov_1o4inqbypn().s[62]++;
    return connection;
  }
  /**
   * Activate backup tunnel
   *
   * @param connectionId - Backup connection ID
   */
  async activateBackupTunnel(connectionId) {
    /* istanbul ignore next */
    cov_1o4inqbypn().f[7]++;
    const backupStatus =
    /* istanbul ignore next */
    (cov_1o4inqbypn().s[63]++, this.backupTunnels.get(connectionId));
    /* istanbul ignore next */
    cov_1o4inqbypn().s[64]++;
    if (!backupStatus) {
      /* istanbul ignore next */
      cov_1o4inqbypn().b[6][0]++;
      cov_1o4inqbypn().s[65]++;
      throw new Error(`Backup tunnel not found: ${connectionId}`);
    } else
    /* istanbul ignore next */
    {
      cov_1o4inqbypn().b[6][1]++;
    }
    cov_1o4inqbypn().s[66]++;
    if (backupStatus.isActive) {
      /* istanbul ignore next */
      cov_1o4inqbypn().b[7][0]++;
      cov_1o4inqbypn().s[67]++;
      this.logger.warn(`Backup tunnel already active: ${connectionId}`);
      /* istanbul ignore next */
      cov_1o4inqbypn().s[68]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1o4inqbypn().b[7][1]++;
    }
    cov_1o4inqbypn().s[69]++;
    try {
      /* istanbul ignore next */
      cov_1o4inqbypn().s[70]++;
      this.logger.info(`Activating backup tunnel: ${connectionId}`);
      // Establish tunnel connection
      /* istanbul ignore next */
      cov_1o4inqbypn().s[71]++;
      await this.tunnelManager.establishTunnel(connectionId);
      // Update status
      /* istanbul ignore next */
      cov_1o4inqbypn().s[72]++;
      backupStatus.isActive = true;
      /* istanbul ignore next */
      cov_1o4inqbypn().s[73]++;
      backupStatus.lastUsed = new Date();
      /* istanbul ignore next */
      cov_1o4inqbypn().s[74]++;
      backupStatus.usageCount++;
      /* istanbul ignore next */
      cov_1o4inqbypn().s[75]++;
      this.updateBackupStats();
      /* istanbul ignore next */
      cov_1o4inqbypn().s[76]++;
      this.logger.info(`Backup tunnel activated: ${connectionId}`);
      /* istanbul ignore next */
      cov_1o4inqbypn().s[77]++;
      this.emit('backupTunnelActivated', connectionId, backupStatus);
    } catch (error) {
      /* istanbul ignore next */
      cov_1o4inqbypn().s[78]++;
      this.logger.error(`Failed to activate backup tunnel: ${connectionId}`, error);
      /* istanbul ignore next */
      cov_1o4inqbypn().s[79]++;
      throw error;
    }
  }
  /**
   * Deactivate backup tunnel
   *
   * @param connectionId - Backup connection ID
   */
  async deactivateBackupTunnel(connectionId) {
    /* istanbul ignore next */
    cov_1o4inqbypn().f[8]++;
    const backupStatus =
    /* istanbul ignore next */
    (cov_1o4inqbypn().s[80]++, this.backupTunnels.get(connectionId));
    /* istanbul ignore next */
    cov_1o4inqbypn().s[81]++;
    if (!backupStatus) {
      /* istanbul ignore next */
      cov_1o4inqbypn().b[8][0]++;
      cov_1o4inqbypn().s[82]++;
      throw new Error(`Backup tunnel not found: ${connectionId}`);
    } else
    /* istanbul ignore next */
    {
      cov_1o4inqbypn().b[8][1]++;
    }
    cov_1o4inqbypn().s[83]++;
    if (!backupStatus.isActive) {
      /* istanbul ignore next */
      cov_1o4inqbypn().b[9][0]++;
      cov_1o4inqbypn().s[84]++;
      this.logger.warn(`Backup tunnel already inactive: ${connectionId}`);
      /* istanbul ignore next */
      cov_1o4inqbypn().s[85]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1o4inqbypn().b[9][1]++;
    }
    cov_1o4inqbypn().s[86]++;
    try {
      /* istanbul ignore next */
      cov_1o4inqbypn().s[87]++;
      this.logger.info(`Deactivating backup tunnel: ${connectionId}`);
      // Disconnect tunnel
      /* istanbul ignore next */
      cov_1o4inqbypn().s[88]++;
      await this.tunnelManager.disconnectTunnel(connectionId);
      // Update status
      /* istanbul ignore next */
      cov_1o4inqbypn().s[89]++;
      backupStatus.isActive = false;
      /* istanbul ignore next */
      cov_1o4inqbypn().s[90]++;
      this.updateBackupStats();
      /* istanbul ignore next */
      cov_1o4inqbypn().s[91]++;
      this.logger.info(`Backup tunnel deactivated: ${connectionId}`);
      /* istanbul ignore next */
      cov_1o4inqbypn().s[92]++;
      this.emit('backupTunnelDeactivated', connectionId, backupStatus);
    } catch (error) {
      /* istanbul ignore next */
      cov_1o4inqbypn().s[93]++;
      this.logger.error(`Failed to deactivate backup tunnel: ${connectionId}`, error);
      /* istanbul ignore next */
      cov_1o4inqbypn().s[94]++;
      throw error;
    }
  }
  /**
   * Get failover statistics
   *
   * @returns Current failover statistics
   */
  getFailoverStats() {
    /* istanbul ignore next */
    cov_1o4inqbypn().f[9]++;
    cov_1o4inqbypn().s[95]++;
    return {
      ...this.failoverStats
    };
  }
  /**
   * Get failover history
   *
   * @param limit - Maximum number of events to return
   * @returns Array of failover events
   */
  getFailoverHistory(limit) {
    /* istanbul ignore next */
    cov_1o4inqbypn().f[10]++;
    cov_1o4inqbypn().s[96]++;
    return limit ?
    /* istanbul ignore next */
    (cov_1o4inqbypn().b[10][0]++, this.failoverHistory.slice(-limit)) :
    /* istanbul ignore next */
    (cov_1o4inqbypn().b[10][1]++, [...this.failoverHistory]);
  }
  /**
   * Get backup tunnel status
   *
   * @returns Map of backup tunnel statuses
   */
  getBackupTunnelStatus() {
    /* istanbul ignore next */
    cov_1o4inqbypn().f[11]++;
    cov_1o4inqbypn().s[97]++;
    return new Map(this.backupTunnels);
  }
  /**
   * Setup event listeners
   */
  setupEventListeners() {
    /* istanbul ignore next */
    cov_1o4inqbypn().f[12]++;
    cov_1o4inqbypn().s[98]++;
    // Listen for tunnel failures
    this.tunnelManager.on('tunnelError', (connection, error) => {
      /* istanbul ignore next */
      cov_1o4inqbypn().f[13]++;
      cov_1o4inqbypn().s[99]++;
      if (this.primaryTunnels.has(connection.id)) {
        /* istanbul ignore next */
        cov_1o4inqbypn().b[11][0]++;
        cov_1o4inqbypn().s[100]++;
        this.performFailover(connection.id, `Tunnel error: ${error.message}`);
      } else
      /* istanbul ignore next */
      {
        cov_1o4inqbypn().b[11][1]++;
      }
    });
    // Listen for tunnel disconnections
    /* istanbul ignore next */
    cov_1o4inqbypn().s[101]++;
    this.tunnelManager.on('tunnelDisconnected', connection => {
      /* istanbul ignore next */
      cov_1o4inqbypn().f[14]++;
      cov_1o4inqbypn().s[102]++;
      if (this.primaryTunnels.has(connection.id)) {
        /* istanbul ignore next */
        cov_1o4inqbypn().b[12][0]++;
        cov_1o4inqbypn().s[103]++;
        this.performFailover(connection.id, 'Tunnel disconnected');
      } else
      /* istanbul ignore next */
      {
        cov_1o4inqbypn().b[12][1]++;
      }
    });
    // Listen for health issues
    /* istanbul ignore next */
    cov_1o4inqbypn().s[104]++;
    this.healthMonitor.on('connectionUnhealthy', connection => {
      /* istanbul ignore next */
      cov_1o4inqbypn().f[15]++;
      cov_1o4inqbypn().s[105]++;
      if (this.primaryTunnels.has(connection.id)) {
        /* istanbul ignore next */
        cov_1o4inqbypn().b[13][0]++;
        cov_1o4inqbypn().s[106]++;
        this.performFailover(connection.id, 'Connection unhealthy');
      } else
      /* istanbul ignore next */
      {
        cov_1o4inqbypn().b[13][1]++;
      }
    });
    // Listen for backup tunnel connections
    /* istanbul ignore next */
    cov_1o4inqbypn().s[107]++;
    this.tunnelManager.on('tunnelConnected', connection => {
      /* istanbul ignore next */
      cov_1o4inqbypn().f[16]++;
      const backupStatus =
      /* istanbul ignore next */
      (cov_1o4inqbypn().s[108]++, this.backupTunnels.get(connection.id));
      /* istanbul ignore next */
      cov_1o4inqbypn().s[109]++;
      if (backupStatus) {
        /* istanbul ignore next */
        cov_1o4inqbypn().b[14][0]++;
        cov_1o4inqbypn().s[110]++;
        backupStatus.isHealthy = true;
        /* istanbul ignore next */
        cov_1o4inqbypn().s[111]++;
        this.updateBackupStats();
      } else
      /* istanbul ignore next */
      {
        cov_1o4inqbypn().b[14][1]++;
      }
    });
    // Listen for backup tunnel disconnections
    /* istanbul ignore next */
    cov_1o4inqbypn().s[112]++;
    this.tunnelManager.on('tunnelDisconnected', connection => {
      /* istanbul ignore next */
      cov_1o4inqbypn().f[17]++;
      const backupStatus =
      /* istanbul ignore next */
      (cov_1o4inqbypn().s[113]++, this.backupTunnels.get(connection.id));
      /* istanbul ignore next */
      cov_1o4inqbypn().s[114]++;
      if (backupStatus) {
        /* istanbul ignore next */
        cov_1o4inqbypn().b[15][0]++;
        cov_1o4inqbypn().s[115]++;
        backupStatus.isActive = false;
        /* istanbul ignore next */
        cov_1o4inqbypn().s[116]++;
        backupStatus.isHealthy = false;
        /* istanbul ignore next */
        cov_1o4inqbypn().s[117]++;
        this.updateBackupStats();
      } else
      /* istanbul ignore next */
      {
        cov_1o4inqbypn().b[15][1]++;
      }
    });
  }
  /**
   * Execute failover process
   *
   * @param primaryConnectionId - Primary connection ID
   * @param reason - Reason for failover
   * @returns Backup tunnel selection or null
   */
  async executeFailover(primaryConnectionId, reason) {
    /* istanbul ignore next */
    cov_1o4inqbypn().f[18]++;
    const startTime =
    /* istanbul ignore next */
    (cov_1o4inqbypn().s[118]++, Date.now());
    const failoverEvent =
    /* istanbul ignore next */
    (cov_1o4inqbypn().s[119]++, {
      id: `failover_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      timestamp: new Date(),
      primaryConnectionId,
      backupConnectionId: null,
      reason,
      success: false,
      duration: 0
    });
    /* istanbul ignore next */
    cov_1o4inqbypn().s[120]++;
    try {
      /* istanbul ignore next */
      cov_1o4inqbypn().s[121]++;
      this.logger.warn(`Starting failover for connection: ${primaryConnectionId}`, {
        reason
      });
      // Find best backup tunnel
      const backupTunnel =
      /* istanbul ignore next */
      (cov_1o4inqbypn().s[122]++, await this.selectBestBackupTunnel(primaryConnectionId));
      /* istanbul ignore next */
      cov_1o4inqbypn().s[123]++;
      if (!backupTunnel) {
        /* istanbul ignore next */
        cov_1o4inqbypn().b[16][0]++;
        cov_1o4inqbypn().s[124]++;
        throw new Error('No suitable backup tunnel available');
      } else
      /* istanbul ignore next */
      {
        cov_1o4inqbypn().b[16][1]++;
      }
      cov_1o4inqbypn().s[125]++;
      failoverEvent.backupConnectionId = backupTunnel.connection.id;
      // Activate backup tunnel if not already active
      const backupStatus =
      /* istanbul ignore next */
      (cov_1o4inqbypn().s[126]++, this.backupTunnels.get(backupTunnel.connection.id));
      /* istanbul ignore next */
      cov_1o4inqbypn().s[127]++;
      if (
      /* istanbul ignore next */
      (cov_1o4inqbypn().b[18][0]++, backupStatus) &&
      /* istanbul ignore next */
      (cov_1o4inqbypn().b[18][1]++, !backupStatus.isActive)) {
        /* istanbul ignore next */
        cov_1o4inqbypn().b[17][0]++;
        cov_1o4inqbypn().s[128]++;
        await this.activateBackupTunnel(backupTunnel.connection.id);
      } else
      /* istanbul ignore next */
      {
        cov_1o4inqbypn().b[17][1]++;
      }
      // Wait for backup tunnel to be ready
      cov_1o4inqbypn().s[129]++;
      await this.waitForTunnelReady(backupTunnel.connection.id);
      // Mark failover as successful
      /* istanbul ignore next */
      cov_1o4inqbypn().s[130]++;
      failoverEvent.success = true;
      /* istanbul ignore next */
      cov_1o4inqbypn().s[131]++;
      failoverEvent.duration = Date.now() - startTime;
      // Update statistics
      /* istanbul ignore next */
      cov_1o4inqbypn().s[132]++;
      this.updateFailoverStats(failoverEvent);
      /* istanbul ignore next */
      cov_1o4inqbypn().s[133]++;
      this.logger.info(`Failover successful: ${primaryConnectionId} -> ${backupTunnel.connection.id}`, {
        duration: `${failoverEvent.duration}ms`
      });
      /* istanbul ignore next */
      cov_1o4inqbypn().s[134]++;
      this.emit('failoverSuccessful', failoverEvent, backupTunnel);
      /* istanbul ignore next */
      cov_1o4inqbypn().s[135]++;
      return backupTunnel;
    } catch (error) {
      /* istanbul ignore next */
      cov_1o4inqbypn().s[136]++;
      failoverEvent.success = false;
      /* istanbul ignore next */
      cov_1o4inqbypn().s[137]++;
      failoverEvent.error = error instanceof Error ?
      /* istanbul ignore next */
      (cov_1o4inqbypn().b[19][0]++, error) :
      /* istanbul ignore next */
      (cov_1o4inqbypn().b[19][1]++, new Error(String(error)));
      /* istanbul ignore next */
      cov_1o4inqbypn().s[138]++;
      failoverEvent.duration = Date.now() - startTime;
      // Update statistics
      /* istanbul ignore next */
      cov_1o4inqbypn().s[139]++;
      this.updateFailoverStats(failoverEvent);
      /* istanbul ignore next */
      cov_1o4inqbypn().s[140]++;
      this.logger.error(`Failover failed for connection: ${primaryConnectionId}`, error);
      /* istanbul ignore next */
      cov_1o4inqbypn().s[141]++;
      this.emit('failoverFailed', failoverEvent);
      /* istanbul ignore next */
      cov_1o4inqbypn().s[142]++;
      return null;
    } finally {
      /* istanbul ignore next */
      cov_1o4inqbypn().s[143]++;
      // Store failover event in history
      this.storeFailoverEvent(failoverEvent);
    }
  }
  /**
   * Select best backup tunnel for failover
   *
   * @param excludeConnectionId - Connection ID to exclude
   * @returns Best backup tunnel selection or null
   */
  async selectBestBackupTunnel(excludeConnectionId) {
    /* istanbul ignore next */
    cov_1o4inqbypn().f[19]++;
    // Get available backup tunnels
    const availableBackups =
    /* istanbul ignore next */
    (cov_1o4inqbypn().s[144]++, Array.from(this.backupTunnels.values()).filter(backup => {
      /* istanbul ignore next */
      cov_1o4inqbypn().f[20]++;
      cov_1o4inqbypn().s[145]++;
      return /* istanbul ignore next */(cov_1o4inqbypn().b[20][0]++, backup.connectionId !== excludeConnectionId) && (
      /* istanbul ignore next */
      (cov_1o4inqbypn().b[20][1]++, backup.isActive) ||
      /* istanbul ignore next */
      (cov_1o4inqbypn().b[20][2]++, this.config.enableProactiveBackups));
    }).sort((a, b) => {
      /* istanbul ignore next */
      cov_1o4inqbypn().f[21]++;
      cov_1o4inqbypn().s[146]++;
      return a.priority - b.priority;
    })); // Sort by priority
    /* istanbul ignore next */
    cov_1o4inqbypn().s[147]++;
    if (availableBackups.length === 0) {
      /* istanbul ignore next */
      cov_1o4inqbypn().b[21][0]++;
      cov_1o4inqbypn().s[148]++;
      // Try to create emergency backup if no backups available
      if (this.config.backupConfigs.length > 0) {
        /* istanbul ignore next */
        cov_1o4inqbypn().b[22][0]++;
        cov_1o4inqbypn().s[149]++;
        return this.createEmergencyBackup();
      } else
      /* istanbul ignore next */
      {
        cov_1o4inqbypn().b[22][1]++;
      }
      cov_1o4inqbypn().s[150]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_1o4inqbypn().b[21][1]++;
    }
    // Select best backup based on health and priority
    cov_1o4inqbypn().s[151]++;
    for (const backup of availableBackups) {
      const connection =
      /* istanbul ignore next */
      (cov_1o4inqbypn().s[152]++, this.tunnelManager.getConnection(backup.connectionId));
      /* istanbul ignore next */
      cov_1o4inqbypn().s[153]++;
      if (!connection) {
        /* istanbul ignore next */
        cov_1o4inqbypn().b[23][0]++;
        cov_1o4inqbypn().s[154]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_1o4inqbypn().b[23][1]++;
      }
      const healthMetrics =
      /* istanbul ignore next */
      (cov_1o4inqbypn().s[155]++, this.healthMonitor.getHealthMetrics(backup.connectionId));
      // Check if backup is healthy enough
      /* istanbul ignore next */
      cov_1o4inqbypn().s[156]++;
      if (
      /* istanbul ignore next */
      (cov_1o4inqbypn().b[25][0]++, healthMetrics) &&
      /* istanbul ignore next */
      (cov_1o4inqbypn().b[25][1]++, healthMetrics.healthScore >= 50)) {
        /* istanbul ignore next */
        cov_1o4inqbypn().b[24][0]++;
        cov_1o4inqbypn().s[157]++;
        return {
          connection,
          reason: 'Backup tunnel selection',
          weight: 1,
          healthScore: healthMetrics.healthScore,
          latency: healthMetrics.latency,
          selectionTime: new Date()
        };
      } else
      /* istanbul ignore next */
      {
        cov_1o4inqbypn().b[24][1]++;
      }
    }
    // If no healthy backup found, use the highest priority one
    const fallbackBackup =
    /* istanbul ignore next */
    (cov_1o4inqbypn().s[158]++, availableBackups[0]);
    const connection =
    /* istanbul ignore next */
    (cov_1o4inqbypn().s[159]++, this.tunnelManager.getConnection(fallbackBackup.connectionId));
    /* istanbul ignore next */
    cov_1o4inqbypn().s[160]++;
    if (connection) {
      /* istanbul ignore next */
      cov_1o4inqbypn().b[26][0]++;
      cov_1o4inqbypn().s[161]++;
      return {
        connection,
        reason: 'Fallback backup tunnel selection',
        weight: 1,
        healthScore: 0,
        latency: 0,
        selectionTime: new Date()
      };
    } else
    /* istanbul ignore next */
    {
      cov_1o4inqbypn().b[26][1]++;
    }
    cov_1o4inqbypn().s[162]++;
    return null;
  }
  /**
   * Create emergency backup tunnel
   *
   * @returns Emergency backup tunnel selection or null
   */
  async createEmergencyBackup() {
    /* istanbul ignore next */
    cov_1o4inqbypn().f[22]++;
    cov_1o4inqbypn().s[163]++;
    if (this.config.backupConfigs.length === 0) {
      /* istanbul ignore next */
      cov_1o4inqbypn().b[27][0]++;
      cov_1o4inqbypn().s[164]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_1o4inqbypn().b[27][1]++;
    }
    cov_1o4inqbypn().s[165]++;
    try {
      /* istanbul ignore next */
      cov_1o4inqbypn().s[166]++;
      this.logger.warn('Creating emergency backup tunnel');
      // Use first backup configuration
      const backupConfig =
      /* istanbul ignore next */
      (cov_1o4inqbypn().s[167]++, this.config.backupConfigs[0]);
      const connection =
      /* istanbul ignore next */
      (cov_1o4inqbypn().s[168]++, await this.createBackupTunnel(backupConfig));
      // Activate immediately
      /* istanbul ignore next */
      cov_1o4inqbypn().s[169]++;
      await this.activateBackupTunnel(connection.id);
      /* istanbul ignore next */
      cov_1o4inqbypn().s[170]++;
      return {
        connection,
        reason: 'Emergency backup tunnel creation',
        weight: 1,
        healthScore: 50,
        // Assume moderate health for new tunnel
        latency: 0,
        selectionTime: new Date()
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1o4inqbypn().s[171]++;
      this.logger.error('Failed to create emergency backup tunnel', error);
      /* istanbul ignore next */
      cov_1o4inqbypn().s[172]++;
      return null;
    }
  }
  /**
   * Wait for tunnel to be ready
   *
   * @param connectionId - Connection ID
   * @param timeoutMs - Timeout in milliseconds
   */
  async waitForTunnelReady(connectionId, timeoutMs =
  /* istanbul ignore next */
  (cov_1o4inqbypn().b[28][0]++, this.config.failoverTimeout)) {
    /* istanbul ignore next */
    cov_1o4inqbypn().f[23]++;
    const startTime =
    /* istanbul ignore next */
    (cov_1o4inqbypn().s[173]++, Date.now());
    /* istanbul ignore next */
    cov_1o4inqbypn().s[174]++;
    while (Date.now() - startTime < timeoutMs) {
      const connection =
      /* istanbul ignore next */
      (cov_1o4inqbypn().s[175]++, this.tunnelManager.getConnection(connectionId));
      /* istanbul ignore next */
      cov_1o4inqbypn().s[176]++;
      if (
      /* istanbul ignore next */
      (cov_1o4inqbypn().b[30][0]++, connection) &&
      /* istanbul ignore next */
      (cov_1o4inqbypn().b[30][1]++, connection.state === ssh_tunnel_manager_1.TunnelState.CONNECTED)) {
        /* istanbul ignore next */
        cov_1o4inqbypn().b[29][0]++;
        // Additional health check
        const healthMetrics =
        /* istanbul ignore next */
        (cov_1o4inqbypn().s[177]++, this.healthMonitor.getHealthMetrics(connectionId));
        /* istanbul ignore next */
        cov_1o4inqbypn().s[178]++;
        if (
        /* istanbul ignore next */
        (cov_1o4inqbypn().b[32][0]++, healthMetrics) &&
        /* istanbul ignore next */
        (cov_1o4inqbypn().b[32][1]++, healthMetrics.isHealthy)) {
          /* istanbul ignore next */
          cov_1o4inqbypn().b[31][0]++;
          cov_1o4inqbypn().s[179]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_1o4inqbypn().b[31][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_1o4inqbypn().b[29][1]++;
      }
      // Wait before next check
      cov_1o4inqbypn().s[180]++;
      await new Promise(resolve => {
        /* istanbul ignore next */
        cov_1o4inqbypn().f[24]++;
        cov_1o4inqbypn().s[181]++;
        return setTimeout(resolve, 1000);
      });
    }
    /* istanbul ignore next */
    cov_1o4inqbypn().s[182]++;
    throw new Error(`Tunnel not ready within timeout: ${connectionId}`);
  }
  /**
   * Create backup tunnels from configuration
   */
  async createBackupTunnels() {
    /* istanbul ignore next */
    cov_1o4inqbypn().f[25]++;
    const targetBackupCount =
    /* istanbul ignore next */
    (cov_1o4inqbypn().s[183]++, Math.max(this.config.minBackupTunnels, this.config.backupConfigs.length));
    const currentBackupCount =
    /* istanbul ignore next */
    (cov_1o4inqbypn().s[184]++, this.backupTunnels.size);
    /* istanbul ignore next */
    cov_1o4inqbypn().s[185]++;
    if (currentBackupCount >= targetBackupCount) {
      /* istanbul ignore next */
      cov_1o4inqbypn().b[33][0]++;
      cov_1o4inqbypn().s[186]++;
      this.logger.debug('Sufficient backup tunnels already exist');
      /* istanbul ignore next */
      cov_1o4inqbypn().s[187]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1o4inqbypn().b[33][1]++;
    }
    const tunnelsToCreate =
    /* istanbul ignore next */
    (cov_1o4inqbypn().s[188]++, targetBackupCount - currentBackupCount);
    /* istanbul ignore next */
    cov_1o4inqbypn().s[189]++;
    this.logger.info(`Creating ${tunnelsToCreate} backup tunnels`);
    const createPromises =
    /* istanbul ignore next */
    (cov_1o4inqbypn().s[190]++, []);
    /* istanbul ignore next */
    cov_1o4inqbypn().s[191]++;
    for (let i =
    /* istanbul ignore next */
    (cov_1o4inqbypn().s[192]++, 0);
    /* istanbul ignore next */
    (cov_1o4inqbypn().b[34][0]++, i < tunnelsToCreate) &&
    /* istanbul ignore next */
    (cov_1o4inqbypn().b[34][1]++, i < this.config.backupConfigs.length); i++) {
      const backupConfig =
      /* istanbul ignore next */
      (cov_1o4inqbypn().s[193]++, this.config.backupConfigs[i]);
      /* istanbul ignore next */
      cov_1o4inqbypn().s[194]++;
      createPromises.push(this.createBackupTunnel(backupConfig));
    }
    /* istanbul ignore next */
    cov_1o4inqbypn().s[195]++;
    try {
      /* istanbul ignore next */
      cov_1o4inqbypn().s[196]++;
      await Promise.all(createPromises);
      /* istanbul ignore next */
      cov_1o4inqbypn().s[197]++;
      this.logger.info(`Successfully created ${tunnelsToCreate} backup tunnels`);
    } catch (error) {
      /* istanbul ignore next */
      cov_1o4inqbypn().s[198]++;
      this.logger.error('Failed to create some backup tunnels', error);
    }
  }
  /**
   * Disconnect all backup tunnels
   */
  async disconnectBackupTunnels() {
    /* istanbul ignore next */
    cov_1o4inqbypn().f[26]++;
    const disconnectPromises =
    /* istanbul ignore next */
    (cov_1o4inqbypn().s[199]++, Array.from(this.backupTunnels.keys()).map(connectionId => {
      /* istanbul ignore next */
      cov_1o4inqbypn().f[27]++;
      cov_1o4inqbypn().s[200]++;
      return this.deactivateBackupTunnel(connectionId).catch(error => {
        /* istanbul ignore next */
        cov_1o4inqbypn().f[28]++;
        cov_1o4inqbypn().s[201]++;
        return this.logger.error(`Error deactivating backup tunnel ${connectionId}`, error);
      });
    }));
    /* istanbul ignore next */
    cov_1o4inqbypn().s[202]++;
    await Promise.all(disconnectPromises);
    /* istanbul ignore next */
    cov_1o4inqbypn().s[203]++;
    this.backupTunnels.clear();
    /* istanbul ignore next */
    cov_1o4inqbypn().s[204]++;
    this.updateBackupStats();
  }
  /**
   * Start backup health monitoring
   */
  startBackupHealthMonitoring() {
    /* istanbul ignore next */
    cov_1o4inqbypn().f[29]++;
    cov_1o4inqbypn().s[205]++;
    if (this.backupHealthCheckTimer) {
      /* istanbul ignore next */
      cov_1o4inqbypn().b[35][0]++;
      cov_1o4inqbypn().s[206]++;
      clearInterval(this.backupHealthCheckTimer);
    } else
    /* istanbul ignore next */
    {
      cov_1o4inqbypn().b[35][1]++;
    }
    cov_1o4inqbypn().s[207]++;
    this.backupHealthCheckTimer = setInterval(() => {
      /* istanbul ignore next */
      cov_1o4inqbypn().f[30]++;
      cov_1o4inqbypn().s[208]++;
      this.checkBackupHealth();
    }, this.config.backupHealthCheckInterval);
    /* istanbul ignore next */
    cov_1o4inqbypn().s[209]++;
    this.logger.info('Started backup health monitoring');
  }
  /**
   * Check health of backup tunnels
   */
  async checkBackupHealth() {
    /* istanbul ignore next */
    cov_1o4inqbypn().f[31]++;
    cov_1o4inqbypn().s[210]++;
    for (const [connectionId, backupStatus] of this.backupTunnels.entries()) {
      /* istanbul ignore next */
      cov_1o4inqbypn().s[211]++;
      try {
        const healthMetrics =
        /* istanbul ignore next */
        (cov_1o4inqbypn().s[212]++, this.healthMonitor.getHealthMetrics(connectionId));
        /* istanbul ignore next */
        cov_1o4inqbypn().s[213]++;
        backupStatus.isHealthy = healthMetrics ?
        /* istanbul ignore next */
        (cov_1o4inqbypn().b[36][0]++, healthMetrics.isHealthy) :
        /* istanbul ignore next */
        (cov_1o4inqbypn().b[36][1]++, false);
        // If backup is unhealthy and active, try to reconnect
        /* istanbul ignore next */
        cov_1o4inqbypn().s[214]++;
        if (
        /* istanbul ignore next */
        (cov_1o4inqbypn().b[38][0]++, !backupStatus.isHealthy) &&
        /* istanbul ignore next */
        (cov_1o4inqbypn().b[38][1]++, backupStatus.isActive)) {
          /* istanbul ignore next */
          cov_1o4inqbypn().b[37][0]++;
          cov_1o4inqbypn().s[215]++;
          this.logger.warn(`Backup tunnel unhealthy, attempting reconnection: ${connectionId}`);
          /* istanbul ignore next */
          cov_1o4inqbypn().s[216]++;
          await this.autoReconnect.forceReconnection(connectionId, 'Backup health check failure');
        } else
        /* istanbul ignore next */
        {
          cov_1o4inqbypn().b[37][1]++;
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_1o4inqbypn().s[217]++;
        this.logger.error(`Backup health check failed for ${connectionId}`, error);
        /* istanbul ignore next */
        cov_1o4inqbypn().s[218]++;
        backupStatus.isHealthy = false;
      }
    }
    /* istanbul ignore next */
    cov_1o4inqbypn().s[219]++;
    this.updateBackupStats();
  }
  /**
   * Get backup priority for connection
   *
   * @param connectionId - Connection ID
   * @returns Priority number (lower = higher priority)
   */
  getBackupPriority(connectionId) {
    /* istanbul ignore next */
    cov_1o4inqbypn().f[32]++;
    const index =
    /* istanbul ignore next */
    (cov_1o4inqbypn().s[220]++, this.config.failoverPriority.indexOf(connectionId));
    /* istanbul ignore next */
    cov_1o4inqbypn().s[221]++;
    return index >= 0 ?
    /* istanbul ignore next */
    (cov_1o4inqbypn().b[39][0]++, index) :
    /* istanbul ignore next */
    (cov_1o4inqbypn().b[39][1]++, 999); // Default low priority
  }
  /**
   * Update failover statistics
   *
   * @param failoverEvent - Failover event
   */
  updateFailoverStats(failoverEvent) {
    /* istanbul ignore next */
    cov_1o4inqbypn().f[33]++;
    cov_1o4inqbypn().s[222]++;
    this.failoverStats.totalFailovers++;
    /* istanbul ignore next */
    cov_1o4inqbypn().s[223]++;
    if (failoverEvent.success) {
      /* istanbul ignore next */
      cov_1o4inqbypn().b[40][0]++;
      cov_1o4inqbypn().s[224]++;
      this.failoverStats.successfulFailovers++;
    } else {
      /* istanbul ignore next */
      cov_1o4inqbypn().b[40][1]++;
      cov_1o4inqbypn().s[225]++;
      this.failedFailovers++;
    }
    // Update timing statistics
    /* istanbul ignore next */
    cov_1o4inqbypn().s[226]++;
    if (failoverEvent.success) {
      /* istanbul ignore next */
      cov_1o4inqbypn().b[41][0]++;
      cov_1o4inqbypn().s[227]++;
      if (failoverEvent.duration > this.failoverStats.longestFailoverTime) {
        /* istanbul ignore next */
        cov_1o4inqbypn().b[42][0]++;
        cov_1o4inqbypn().s[228]++;
        this.failoverStats.longestFailoverTime = failoverEvent.duration;
      } else
      /* istanbul ignore next */
      {
        cov_1o4inqbypn().b[42][1]++;
      }
      cov_1o4inqbypn().s[229]++;
      if (failoverEvent.duration < this.failoverStats.shortestFailoverTime) {
        /* istanbul ignore next */
        cov_1o4inqbypn().b[43][0]++;
        cov_1o4inqbypn().s[230]++;
        this.failoverStats.shortestFailoverTime = failoverEvent.duration;
      } else
      /* istanbul ignore next */
      {
        cov_1o4inqbypn().b[43][1]++;
      }
      // Calculate average
      const totalTime =
      /* istanbul ignore next */
      (cov_1o4inqbypn().s[231]++, this.failoverHistory.filter(e => {
        /* istanbul ignore next */
        cov_1o4inqbypn().f[34]++;
        cov_1o4inqbypn().s[232]++;
        return e.success;
      }).reduce((sum, e) => {
        /* istanbul ignore next */
        cov_1o4inqbypn().f[35]++;
        cov_1o4inqbypn().s[233]++;
        return sum + e.duration;
      }, 0));
      /* istanbul ignore next */
      cov_1o4inqbypn().s[234]++;
      this.failoverStats.averageFailoverTime = totalTime / this.failoverStats.successfulFailovers;
    } else
    /* istanbul ignore next */
    {
      cov_1o4inqbypn().b[41][1]++;
    }
    // Update per-connection statistics
    const connectionFailovers =
    /* istanbul ignore next */
    (cov_1o4inqbypn().s[235]++,
    /* istanbul ignore next */
    (cov_1o4inqbypn().b[44][0]++, this.failoverStats.failoversByConnection.get(failoverEvent.primaryConnectionId)) ||
    /* istanbul ignore next */
    (cov_1o4inqbypn().b[44][1]++, 0));
    /* istanbul ignore next */
    cov_1o4inqbypn().s[236]++;
    this.failoverStats.failoversByConnection.set(failoverEvent.primaryConnectionId, connectionFailovers + 1);
    /* istanbul ignore next */
    cov_1o4inqbypn().s[237]++;
    this.failoverStats.lastFailoverEvent = failoverEvent;
  }
  /**
   * Update backup statistics
   */
  updateBackupStats() {
    /* istanbul ignore next */
    cov_1o4inqbypn().f[36]++;
    cov_1o4inqbypn().s[238]++;
    this.failoverStats.currentBackupCount = this.backupTunnels.size;
    const activeBackups =
    /* istanbul ignore next */
    (cov_1o4inqbypn().s[239]++, Array.from(this.backupTunnels.values()).filter(b => {
      /* istanbul ignore next */
      cov_1o4inqbypn().f[37]++;
      cov_1o4inqbypn().s[240]++;
      return b.isActive;
    }).length);
    /* istanbul ignore next */
    cov_1o4inqbypn().s[241]++;
    this.failoverStats.backupUtilization = this.backupTunnels.size > 0 ?
    /* istanbul ignore next */
    (cov_1o4inqbypn().b[45][0]++, activeBackups / this.backupTunnels.size * 100) :
    /* istanbul ignore next */
    (cov_1o4inqbypn().b[45][1]++, 0);
  }
  /**
   * Store failover event in history
   *
   * @param failoverEvent - Failover event to store
   */
  storeFailoverEvent(failoverEvent) {
    /* istanbul ignore next */
    cov_1o4inqbypn().f[38]++;
    cov_1o4inqbypn().s[242]++;
    this.failoverHistory.push(failoverEvent);
    // Limit history size
    const maxHistorySize =
    /* istanbul ignore next */
    (cov_1o4inqbypn().s[243]++, 1000);
    /* istanbul ignore next */
    cov_1o4inqbypn().s[244]++;
    if (this.failoverHistory.length > maxHistorySize) {
      /* istanbul ignore next */
      cov_1o4inqbypn().b[46][0]++;
      cov_1o4inqbypn().s[245]++;
      this.failoverHistory.splice(0, this.failoverHistory.length - maxHistorySize);
    } else
    /* istanbul ignore next */
    {
      cov_1o4inqbypn().b[46][1]++;
    }
  }
  /**
   * Cleanup failover manager resources
   */
  async cleanup() {
    /* istanbul ignore next */
    cov_1o4inqbypn().f[39]++;
    cov_1o4inqbypn().s[246]++;
    await this.disable();
    /* istanbul ignore next */
    cov_1o4inqbypn().s[247]++;
    this.failoverHistory = [];
    /* istanbul ignore next */
    cov_1o4inqbypn().s[248]++;
    this.primaryTunnels.clear();
    /* istanbul ignore next */
    cov_1o4inqbypn().s[249]++;
    this.failoverInProgress.clear();
    /* istanbul ignore next */
    cov_1o4inqbypn().s[250]++;
    this.logger.info('Tunnel failover manager cleanup completed');
  }
}
/* istanbul ignore next */
cov_1o4inqbypn().s[251]++;
exports.TunnelFailoverManager = TunnelFailoverManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,