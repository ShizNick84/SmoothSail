{"version":3,"names":["cov_3ilwjyiib","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","events_1","require","logger_1","audit_service_1","security_monitoring_service_1","threat_detection_engine_1","IncidentSeverity","exports","IncidentStatus","IncidentCategory","ResponseActionType","IncidentResponseService","EventEmitter","config","activeIncidents","Map","responsePlaybooks","evidenceStorage","responseMetrics","totalIncidents","resolvedIncidents","averageResponseTime","averageResolutionTime","containmentSuccessRate","constructor","responseTimeThresholds","critical","high","medium","low","autoContainmentEnabled","evidenceCollection","enabled","retentionDays","compressionEnabled","escalation","escalationDelays","maxEscalationLevel","recovery","autoRecoveryEnabled","recoveryTimeoutMs","maxRecoveryAttempts","initializeResponsePlaybooks","logger","info","startIncidentResponse","setupEventHandlers","startIncidentMonitoring","auditService","createAuditEntry","auditId","Date","now","eventType","actor","resource","action","result","timestamp","auditData","playbookCount","size","error","Error","handleSecurityEvent","event","requiresIncidentResponse","incident","createSecurityIncident","executeAutomatedResponse","incidentId","generateIncidentId","severity","mapEventSeverityToIncidentSeverity","category","mapEventTypeToIncidentCategory","title","generateIncidentTitle","description","generateIncidentDescription","status","NEW","sourceEvent","relatedEvents","timeline","entryId","details","eventId","evidence","responseActions","createdAt","updatedAt","set","sourceEventId","classification","target","emit","INVESTIGATING","addTimelineEntry","applicablePlaybooks","findApplicablePlaybooks","length","warn","executeDefaultResponse","playbook","executePlaybook","startEvidenceCollection","checkEscalationNeeded","message","getActiveIncidents","Array","from","values","getIncident","get","getResponseMetrics","criticalThreatPlaybook","playbookId","triggers","eventTypes","SecurityEventType","THREAT_DETECTED","severityThreshold","threatTypes","ThreatType","SYSTEM_INTRUSION","DATA_EXFILTRATION","steps","stepId","actionType","ISOLATE_SYSTEM","parameters","immediate","timeout","retryCount","dependencies","COLLECT_EVIDENCE","priority","types","NOTIFY_STAKEHOLDERS","urgency","channels","metadata","author","lastUpdated","UNAUTHORIZED_ACCESS","NETWORK_INTRUSION","DATA_ACCESS_VIOLATION","includes","eventSeverity","CRITICAL","HIGH","MEDIUM","LOW","categoryMap","SECURITY_BREACH","AUTHENTICATION_FAILURE","SUSPICIOUS_ACTIVITY","SYSTEM_ANOMALY","SYSTEM_FAILURE","CONFIGURATION_CHANGE","POLICY_VIOLATION","SECURITY_POLICY_VIOLATION","INCIDENT_ESCALATION","toString","random","Math","substring","toUpperCase","typeMap","source","JSON","stringify","threatDetection","threatType","push","sort","a","playbookName","step","actionId","substr","evidenceAction","notifyAction","logEvidence","evidenceId","location","collectedAt","escalationDelay","timeSinceCreation","getTime","reason","on","setInterval","checkIncidentEscalations","RESOLVED","CLOSED","entry","getStatus","isActive","evidenceCount","incidentResponseService"],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\incident-response-service.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * AI CRYPTO TRADING AGENT - AUTOMATED INCIDENT RESPONSE SERVICE\r\n * =============================================================================\r\n * \r\n * This service provides automated incident response capabilities for the AI\r\n * crypto trading agent. It handles threat containment, incident classification,\r\n * evidence collection, and escalation procedures.\r\n * \r\n * CRITICAL SECURITY NOTICE:\r\n * This service is responsible for immediate response to security incidents.\r\n * It must operate with minimal latency to contain threats and protect trading\r\n * capital. All incident response actions are logged and audited.\r\n * \r\n * Response Capabilities:\r\n * - Automated threat containment procedures\r\n * - Incident classification and prioritization\r\n * - Automated evidence collection and preservation\r\n * - Incident escalation and notification procedures\r\n * - Response playbook execution\r\n * - Recovery and restoration procedures\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport { EventEmitter } from 'events';\r\nimport { logger } from '@/core/logging/logger';\r\nimport { auditService } from '@/security/audit-service';\r\nimport { SecurityEvent, SecurityEventType, SecurityEventStatus } from '@/security/security-monitoring-service';\r\nimport { ThreatDetectionEvent, ThreatType } from '@/security/threat-detection-engine';\r\n\r\n/**\r\n * Interface for incident response configuration\r\n */\r\nexport interface IncidentResponseConfig {\r\n  /** Response time thresholds in seconds */\r\n  responseTimeThresholds: {\r\n    critical: number;\r\n    high: number;\r\n    medium: number;\r\n    low: number;\r\n  };\r\n  /** Auto-containment enabled */\r\n  autoContainmentEnabled: boolean;\r\n  /** Evidence collection settings */\r\n  evidenceCollection: {\r\n    enabled: boolean;\r\n    retentionDays: number;\r\n    compressionEnabled: boolean;\r\n  };\r\n  /** Escalation settings */\r\n  escalation: {\r\n    enabled: boolean;\r\n    escalationDelays: Record<string, number>;\r\n    maxEscalationLevel: number;\r\n  };\r\n  /** Recovery settings */\r\n  recovery: {\r\n    autoRecoveryEnabled: boolean;\r\n    recoveryTimeoutMs: number;\r\n    maxRecoveryAttempts: number;\r\n  };\r\n}\r\n\r\n/**\r\n * Interface for security incident\r\n */\r\nexport interface SecurityIncident {\r\n  /** Unique incident identifier */\r\n  incidentId: string;\r\n  /** Incident title */\r\n  title: string;\r\n  /** Incident description */\r\n  description: string;\r\n  /** Incident severity */\r\n  severity: IncidentSeverity;\r\n  /** Incident status */\r\n  status: IncidentStatus;\r\n  /** Incident category */\r\n  category: IncidentCategory;\r\n  /** Source security event */\r\n  sourceEvent: SecurityEvent;\r\n  /** Related events */\r\n  relatedEvents: SecurityEvent[];\r\n  /** Incident timeline */\r\n  timeline: IncidentTimelineEntry[];\r\n  /** Evidence collected */\r\n  evidence: IncidentEvidence[];\r\n  /** Response actions taken */\r\n  responseActions: IncidentResponseAction[];\r\n  /** Assigned responder */\r\n  assignedTo?: string;\r\n  /** Creation timestamp */\r\n  createdAt: Date;\r\n  /** Last updated timestamp */\r\n  updatedAt: Date;\r\n  /** Resolution timestamp */\r\n  resolvedAt?: Date;\r\n  /** Resolution summary */\r\n  resolutionSummary?: string;\r\n}\r\n\r\n/**\r\n * Enumeration of incident severity levels\r\n */\r\nexport enum IncidentSeverity {\r\n  CRITICAL = 'critical',\r\n  HIGH = 'high',\r\n  MEDIUM = 'medium',\r\n  LOW = 'low'\r\n}\r\n\r\n/**\r\n * Enumeration of incident status\r\n */\r\nexport enum IncidentStatus {\r\n  NEW = 'new',\r\n  ACKNOWLEDGED = 'acknowledged',\r\n  INVESTIGATING = 'investigating',\r\n  CONTAINING = 'containing',\r\n  CONTAINED = 'contained',\r\n  RECOVERING = 'recovering',\r\n  RESOLVED = 'resolved',\r\n  CLOSED = 'closed'\r\n}\r\n\r\n/**\r\n * Enumeration of incident categories\r\n */\r\nexport enum IncidentCategory {\r\n  SECURITY_BREACH = 'security_breach',\r\n  MALWARE_INFECTION = 'malware_infection',\r\n  UNAUTHORIZED_ACCESS = 'unauthorized_access',\r\n  DATA_EXFILTRATION = 'data_exfiltration',\r\n  SYSTEM_COMPROMISE = 'system_compromise',\r\n  NETWORK_INTRUSION = 'network_intrusion',\r\n  INSIDER_THREAT = 'insider_threat',\r\n  DENIAL_OF_SERVICE = 'denial_of_service',\r\n  POLICY_VIOLATION = 'policy_violation',\r\n  SYSTEM_FAILURE = 'system_failure'\r\n}\r\n\r\n/**\r\n * Interface for incident timeline entry\r\n */\r\nexport interface IncidentTimelineEntry {\r\n  /** Timeline entry ID */\r\n  entryId: string;\r\n  /** Timestamp */\r\n  timestamp: Date;\r\n  /** Action taken */\r\n  action: string;\r\n  /** Actor (system or user) */\r\n  actor: string;\r\n  /** Entry details */\r\n  details: string;\r\n  /** Entry type */\r\n  type: 'detection' | 'response' | 'escalation' | 'resolution' | 'note';\r\n}\r\n\r\n/**\r\n * Interface for incident evidence\r\n */\r\nexport interface IncidentEvidence {\r\n  /** Evidence ID */\r\n  evidenceId: string;\r\n  /** Evidence type */\r\n  type: 'log_file' | 'network_capture' | 'system_snapshot' | 'file_hash' | 'memory_dump';\r\n  /** Evidence description */\r\n  description: string;\r\n  /** Evidence location/path */\r\n  location: string;\r\n  /** Evidence hash for integrity */\r\n  hash: string;\r\n  /** Collection timestamp */\r\n  collectedAt: Date;\r\n  /** Evidence size in bytes */\r\n  size: number;\r\n  /** Evidence metadata */\r\n  metadata: Record<string, any>;\r\n}\r\n\r\n/**\r\n * Interface for incident response action\r\n */\r\nexport interface IncidentResponseAction {\r\n  /** Action ID */\r\n  actionId: string;\r\n  /** Action type */\r\n  type: ResponseActionType;\r\n  /** Action description */\r\n  description: string;\r\n  /** Action status */\r\n  status: 'pending' | 'executing' | 'completed' | 'failed';\r\n  /** Execution timestamp */\r\n  executedAt?: Date;\r\n  /** Completion timestamp */\r\n  completedAt?: Date;\r\n  /** Action result */\r\n  result?: string;\r\n  /** Action metadata */\r\n  metadata: Record<string, any>;\r\n}\r\n\r\n/**\r\n * Enumeration of response action types\r\n */\r\nexport enum ResponseActionType {\r\n  ISOLATE_SYSTEM = 'isolate_system',\r\n  BLOCK_IP_ADDRESS = 'block_ip_address',\r\n  DISABLE_USER_ACCOUNT = 'disable_user_account',\r\n  QUARANTINE_FILE = 'quarantine_file',\r\n  COLLECT_EVIDENCE = 'collect_evidence',\r\n  NOTIFY_STAKEHOLDERS = 'notify_stakeholders',\r\n  ESCALATE_INCIDENT = 'escalate_incident',\r\n  RESTORE_FROM_BACKUP = 'restore_from_backup',\r\n  PATCH_VULNERABILITY = 'patch_vulnerability',\r\n  UPDATE_SECURITY_RULES = 'update_security_rules'\r\n}\r\n\r\n/**\r\n * Interface for response playbook\r\n */\r\nexport interface ResponsePlaybook {\r\n  /** Playbook ID */\r\n  playbookId: string;\r\n  /** Playbook name */\r\n  name: string;\r\n  /** Playbook description */\r\n  description: string;\r\n  /** Trigger conditions */\r\n  triggers: {\r\n    eventTypes: SecurityEventType[];\r\n    severityThreshold: number;\r\n    threatTypes?: ThreatType[];\r\n  };\r\n  /** Response steps */\r\n  steps: Array<{\r\n    stepId: string;\r\n    name: string;\r\n    description: string;\r\n    actionType: ResponseActionType;\r\n    parameters: Record<string, any>;\r\n    timeout: number;\r\n    retryCount: number;\r\n    dependencies: string[];\r\n  }>;\r\n  /** Playbook metadata */\r\n  metadata: {\r\n    version: string;\r\n    author: string;\r\n    lastUpdated: Date;\r\n    testDate?: Date;\r\n  };\r\n}\r\n\r\n/**\r\n * Automated incident response service\r\n * Provides comprehensive incident response and containment capabilities\r\n */\r\nexport class IncidentResponseService extends EventEmitter {\r\n  /** Service configuration */\r\n  private config: IncidentResponseConfig;\r\n  \r\n  /** Active incidents */\r\n  private activeIncidents: Map<string, SecurityIncident> = new Map();\r\n  \r\n  /** Response playbooks */\r\n  private responsePlaybooks: Map<string, ResponsePlaybook> = new Map();\r\n  \r\n  /** Evidence storage */\r\n  private evidenceStorage: Map<string, IncidentEvidence> = new Map();\r\n  \r\n  /** Response metrics */\r\n  private responseMetrics = {\r\n    totalIncidents: 0,\r\n    resolvedIncidents: 0,\r\n    averageResponseTime: 0,\r\n    averageResolutionTime: 0,\r\n    containmentSuccessRate: 0\r\n  };\r\n\r\n  constructor(config?: Partial<IncidentResponseConfig>) {\r\n    super();\r\n    \r\n    // Initialize configuration with defaults\r\n    this.config = {\r\n      responseTimeThresholds: {\r\n        critical: 60, // 1 minute\r\n        high: 300, // 5 minutes\r\n        medium: 900, // 15 minutes\r\n        low: 3600 // 1 hour\r\n      },\r\n      autoContainmentEnabled: true,\r\n      evidenceCollection: {\r\n        enabled: true,\r\n        retentionDays: 90,\r\n        compressionEnabled: true\r\n      },\r\n      escalation: {\r\n        enabled: true,\r\n        escalationDelays: {\r\n          'critical': 300, // 5 minutes\r\n          'high': 900, // 15 minutes\r\n          'medium': 3600, // 1 hour\r\n          'low': 7200 // 2 hours\r\n        },\r\n        maxEscalationLevel: 3\r\n      },\r\n      recovery: {\r\n        autoRecoveryEnabled: true,\r\n        recoveryTimeoutMs: 300000, // 5 minutes\r\n        maxRecoveryAttempts: 3\r\n      },\r\n      ...config\r\n    };\r\n    \r\n    // Initialize response playbooks\r\n    this.initializeResponsePlaybooks();\r\n    \r\n    logger.info('🚨 Incident Response Service initialized');\r\n  }\r\n\r\n  /**\r\n   * Start incident response service\r\n   * Begins incident response operations\r\n   * \r\n   * @returns Promise<void>\r\n   */\r\n  public async startIncidentResponse(): Promise<void> {\r\n    try {\r\n      logger.info('🚀 Starting incident response service...');\r\n      \r\n      // Set up event handlers\r\n      this.setupEventHandlers();\r\n      \r\n      // Start monitoring for incidents\r\n      this.startIncidentMonitoring();\r\n      \r\n      // Create audit entry\r\n      await auditService.createAuditEntry({\r\n        auditId: `ir_start_${Date.now()}`,\r\n        eventType: 'INCIDENT_RESPONSE_START',\r\n        actor: 'SYSTEM',\r\n        resource: 'INCIDENT_RESPONSE_SERVICE',\r\n        action: 'START_SERVICE',\r\n        result: 'SUCCESS',\r\n        timestamp: new Date(),\r\n        auditData: {\r\n          config: this.config,\r\n          playbookCount: this.responsePlaybooks.size\r\n        }\r\n      });\r\n      \r\n      logger.info('✅ Incident response service started successfully');\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to start incident response service:', error);\r\n      throw new Error('Incident response service startup failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle security event\r\n   * Processes security event and determines if incident response is needed\r\n   * \r\n   * @param event - Security event to handle\r\n   * @returns Promise<SecurityIncident | null> Created incident or null\r\n   */\r\n  public async handleSecurityEvent(event: SecurityEvent): Promise<SecurityIncident | null> {\r\n    try {\r\n      // Determine if event requires incident response\r\n      if (!this.requiresIncidentResponse(event)) {\r\n        return null;\r\n      }\r\n      \r\n      // Create security incident\r\n      const incident = await this.createSecurityIncident(event);\r\n      \r\n      // Execute automated response\r\n      await this.executeAutomatedResponse(incident);\r\n      \r\n      return incident;\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to handle security event:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create security incident\r\n   * Creates new security incident from security event\r\n   * \r\n   * @param event - Source security event\r\n   * @returns Promise<SecurityIncident> Created incident\r\n   */\r\n  public async createSecurityIncident(event: SecurityEvent): Promise<SecurityIncident> {\r\n    try {\r\n      const incidentId = this.generateIncidentId();\r\n      const severity = this.mapEventSeverityToIncidentSeverity(event.severity);\r\n      const category = this.mapEventTypeToIncidentCategory(event.eventType);\r\n      \r\n      const incident: SecurityIncident = {\r\n        incidentId,\r\n        title: this.generateIncidentTitle(event),\r\n        description: this.generateIncidentDescription(event),\r\n        severity,\r\n        status: IncidentStatus.NEW,\r\n        category,\r\n        sourceEvent: event,\r\n        relatedEvents: [],\r\n        timeline: [{\r\n          entryId: `timeline_${Date.now()}`,\r\n          timestamp: new Date(),\r\n          action: 'Incident Created',\r\n          actor: 'SYSTEM',\r\n          details: `Incident created from security event ${event.eventId}`,\r\n          type: 'detection'\r\n        }],\r\n        evidence: [],\r\n        responseActions: [],\r\n        createdAt: new Date(),\r\n        updatedAt: new Date()\r\n      };\r\n      \r\n      // Store incident\r\n      this.activeIncidents.set(incidentId, incident);\r\n      this.responseMetrics.totalIncidents++;\r\n      \r\n      // Log incident creation\r\n      logger.error('🚨 SECURITY INCIDENT CREATED', {\r\n        incidentId,\r\n        severity,\r\n        category,\r\n        sourceEventId: event.eventId,\r\n        classification: 'RESTRICTED'\r\n      });\r\n      \r\n      // Create audit entry\r\n      await auditService.createAuditEntry({\r\n        auditId: incidentId,\r\n        eventType: 'SECURITY_INCIDENT_CREATED',\r\n        actor: 'INCIDENT_RESPONSE_SERVICE',\r\n        resource: event.target,\r\n        action: 'CREATE_INCIDENT',\r\n        result: 'SUCCESS',\r\n        timestamp: new Date(),\r\n        auditData: {\r\n          incidentId,\r\n          severity,\r\n          category,\r\n          sourceEvent: event\r\n        }\r\n      });\r\n      \r\n      // Emit incident created event\r\n      this.emit('incidentCreated', incident);\r\n      \r\n      return incident;\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to create security incident:', error);\r\n      throw new Error('Security incident creation failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Execute automated response\r\n   * Executes automated response procedures for incident\r\n   * \r\n   * @param incident - Security incident\r\n   * @returns Promise<void>\r\n   */\r\n  public async executeAutomatedResponse(incident: SecurityIncident): Promise<void> {\r\n    try {\r\n      logger.info('🤖 Executing automated response', {\r\n        incidentId: incident.incidentId,\r\n        severity: incident.severity\r\n      });\r\n      \r\n      // Update incident status\r\n      incident.status = IncidentStatus.INVESTIGATING;\r\n      incident.updatedAt = new Date();\r\n      \r\n      // Add timeline entry\r\n      this.addTimelineEntry(incident, 'Automated Response Started', 'SYSTEM', 'response');\r\n      \r\n      // Find applicable playbooks\r\n      const applicablePlaybooks = this.findApplicablePlaybooks(incident);\r\n      \r\n      if (applicablePlaybooks.length === 0) {\r\n        logger.warn('⚠️ No applicable playbooks found for incident', {\r\n          incidentId: incident.incidentId,\r\n          category: incident.category\r\n        });\r\n        \r\n        // Execute default response\r\n        await this.executeDefaultResponse(incident);\r\n        return;\r\n      }\r\n      \r\n      // Execute playbooks in priority order\r\n      for (const playbook of applicablePlaybooks) {\r\n        try {\r\n          await this.executePlaybook(incident, playbook);\r\n        } catch (error) {\r\n          logger.error('❌ Playbook execution failed:', error);\r\n          // Continue with next playbook\r\n        }\r\n      }\r\n      \r\n      // Start evidence collection if enabled\r\n      if (this.config.evidenceCollection.enabled) {\r\n        await this.startEvidenceCollection(incident);\r\n      }\r\n      \r\n      // Check if escalation is needed\r\n      await this.checkEscalationNeeded(incident);\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to execute automated response:', error);\r\n      \r\n      // Add error to timeline\r\n      this.addTimelineEntry(\r\n        incident,\r\n        'Automated Response Failed',\r\n        'SYSTEM',\r\n        'response',\r\n        `Error: ${error.message}`\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get active incidents\r\n   * Returns all active security incidents\r\n   * \r\n   * @returns SecurityIncident[] Active incidents\r\n   */\r\n  public getActiveIncidents(): SecurityIncident[] {\r\n    return Array.from(this.activeIncidents.values());\r\n  }\r\n\r\n  /**\r\n   * Get incident by ID\r\n   * Returns specific incident by ID\r\n   * \r\n   * @param incidentId - Incident identifier\r\n   * @returns SecurityIncident | null Incident or null if not found\r\n   */\r\n  public getIncident(incidentId: string): SecurityIncident | null {\r\n    return this.activeIncidents.get(incidentId) || null;\r\n  }\r\n\r\n  /**\r\n   * Get response metrics\r\n   * Returns incident response metrics\r\n   * \r\n   * @returns Response metrics\r\n   */\r\n  public getResponseMetrics(): {\r\n    totalIncidents: number;\r\n    resolvedIncidents: number;\r\n    activeIncidents: number;\r\n    averageResponseTime: number;\r\n    averageResolutionTime: number;\r\n    containmentSuccessRate: number;\r\n  } {\r\n    return {\r\n      ...this.responseMetrics,\r\n      activeIncidents: this.activeIncidents.size\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Initialize response playbooks\r\n   * Sets up default response playbooks\r\n   */\r\n  private initializeResponsePlaybooks(): void {\r\n    // Critical threat containment playbook\r\n    const criticalThreatPlaybook: ResponsePlaybook = {\r\n      playbookId: 'critical_threat_containment',\r\n      name: 'Critical Threat Containment',\r\n      description: 'Immediate containment procedures for critical threats',\r\n      triggers: {\r\n        eventTypes: [SecurityEventType.THREAT_DETECTED],\r\n        severityThreshold: 9,\r\n        threatTypes: [ThreatType.SYSTEM_INTRUSION, ThreatType.DATA_EXFILTRATION]\r\n      },\r\n      steps: [\r\n        {\r\n          stepId: 'isolate_system',\r\n          name: 'Isolate Affected System',\r\n          description: 'Immediately isolate the affected system from network',\r\n          actionType: ResponseActionType.ISOLATE_SYSTEM,\r\n          parameters: { immediate: true },\r\n          timeout: 60,\r\n          retryCount: 3,\r\n          dependencies: []\r\n        },\r\n        {\r\n          stepId: 'collect_evidence',\r\n          name: 'Collect Critical Evidence',\r\n          description: 'Collect system state and network evidence',\r\n          actionType: ResponseActionType.COLLECT_EVIDENCE,\r\n          parameters: { priority: 'high', types: ['memory_dump', 'network_capture'] },\r\n          timeout: 300,\r\n          retryCount: 1,\r\n          dependencies: ['isolate_system']\r\n        },\r\n        {\r\n          stepId: 'notify_stakeholders',\r\n          name: 'Emergency Notification',\r\n          description: 'Notify security team and stakeholders immediately',\r\n          actionType: ResponseActionType.NOTIFY_STAKEHOLDERS,\r\n          parameters: { urgency: 'emergency', channels: ['email', 'sms', 'telegram'] },\r\n          timeout: 30,\r\n          retryCount: 2,\r\n          dependencies: []\r\n        }\r\n      ],\r\n      metadata: {\r\n        version: '1.0',\r\n        author: 'Security Team',\r\n        lastUpdated: new Date()\r\n      }\r\n    };\r\n    \r\n    // Store playbooks\r\n    this.responsePlaybooks.set(criticalThreatPlaybook.playbookId, criticalThreatPlaybook);\r\n    \r\n    logger.info('📋 Response playbooks initialized', {\r\n      playbookCount: this.responsePlaybooks.size\r\n    });\r\n  }\r\n\r\n  // Helper methods (implementation details)\r\n  \r\n  private requiresIncidentResponse(event: SecurityEvent): boolean {\r\n    return event.severity >= 7 || [\r\n      SecurityEventType.THREAT_DETECTED,\r\n      SecurityEventType.UNAUTHORIZED_ACCESS,\r\n      SecurityEventType.NETWORK_INTRUSION,\r\n      SecurityEventType.DATA_ACCESS_VIOLATION\r\n    ].includes(event.eventType);\r\n  }\r\n\r\n  private mapEventSeverityToIncidentSeverity(eventSeverity: number): IncidentSeverity {\r\n    if (eventSeverity >= 9) return IncidentSeverity.CRITICAL;\r\n    if (eventSeverity >= 7) return IncidentSeverity.HIGH;\r\n    if (eventSeverity >= 5) return IncidentSeverity.MEDIUM;\r\n    return IncidentSeverity.LOW;\r\n  }\r\n\r\n  private mapEventTypeToIncidentCategory(eventType: SecurityEventType): IncidentCategory {\r\n    const categoryMap: Record<SecurityEventType, IncidentCategory> = {\r\n      [SecurityEventType.THREAT_DETECTED]: IncidentCategory.SECURITY_BREACH,\r\n      [SecurityEventType.AUTHENTICATION_FAILURE]: IncidentCategory.UNAUTHORIZED_ACCESS,\r\n      [SecurityEventType.UNAUTHORIZED_ACCESS]: IncidentCategory.UNAUTHORIZED_ACCESS,\r\n      [SecurityEventType.SUSPICIOUS_ACTIVITY]: IncidentCategory.SECURITY_BREACH,\r\n      [SecurityEventType.SYSTEM_ANOMALY]: IncidentCategory.SYSTEM_FAILURE,\r\n      [SecurityEventType.NETWORK_INTRUSION]: IncidentCategory.NETWORK_INTRUSION,\r\n      [SecurityEventType.DATA_ACCESS_VIOLATION]: IncidentCategory.DATA_EXFILTRATION,\r\n      [SecurityEventType.CONFIGURATION_CHANGE]: IncidentCategory.POLICY_VIOLATION,\r\n      [SecurityEventType.SECURITY_POLICY_VIOLATION]: IncidentCategory.POLICY_VIOLATION,\r\n      [SecurityEventType.INCIDENT_ESCALATION]: IncidentCategory.SECURITY_BREACH\r\n    };\r\n    \r\n    return categoryMap[eventType] || IncidentCategory.SECURITY_BREACH;\r\n  }\r\n\r\n  private generateIncidentId(): string {\r\n    const timestamp = Date.now().toString(36);\r\n    const random = Math.random().toString(36).substring(2);\r\n    return `INC_${timestamp}_${random}`.toUpperCase();\r\n  }\r\n\r\n  private generateIncidentTitle(event: SecurityEvent): string {\r\n    const typeMap: Record<SecurityEventType, string> = {\r\n      [SecurityEventType.THREAT_DETECTED]: 'Security Threat Detected',\r\n      [SecurityEventType.AUTHENTICATION_FAILURE]: 'Authentication Failure',\r\n      [SecurityEventType.UNAUTHORIZED_ACCESS]: 'Unauthorized Access Attempt',\r\n      [SecurityEventType.SUSPICIOUS_ACTIVITY]: 'Suspicious Activity Detected',\r\n      [SecurityEventType.SYSTEM_ANOMALY]: 'System Anomaly Detected',\r\n      [SecurityEventType.NETWORK_INTRUSION]: 'Network Intrusion Detected',\r\n      [SecurityEventType.DATA_ACCESS_VIOLATION]: 'Data Access Violation',\r\n      [SecurityEventType.CONFIGURATION_CHANGE]: 'Unauthorized Configuration Change',\r\n      [SecurityEventType.SECURITY_POLICY_VIOLATION]: 'Security Policy Violation',\r\n      [SecurityEventType.INCIDENT_ESCALATION]: 'Incident Escalation'\r\n    };\r\n    \r\n    return typeMap[event.eventType] || 'Security Incident';\r\n  }\r\n\r\n  private generateIncidentDescription(event: SecurityEvent): string {\r\n    return `Security incident created from event ${event.eventId}. ` +\r\n           `Source: ${event.source}, Target: ${event.target}, ` +\r\n           `Severity: ${event.severity}/10. ` +\r\n           `Event details: ${JSON.stringify(event.details)}`;\r\n  }\r\n\r\n  private findApplicablePlaybooks(incident: SecurityIncident): ResponsePlaybook[] {\r\n    const applicablePlaybooks: ResponsePlaybook[] = [];\r\n    \r\n    for (const playbook of this.responsePlaybooks.values()) {\r\n      // Check event type match\r\n      if (!playbook.triggers.eventTypes.includes(incident.sourceEvent.eventType)) {\r\n        continue;\r\n      }\r\n      \r\n      // Check severity threshold\r\n      if (incident.sourceEvent.severity < playbook.triggers.severityThreshold) {\r\n        continue;\r\n      }\r\n      \r\n      // Check threat type if specified\r\n      if (playbook.triggers.threatTypes && incident.sourceEvent.threatDetection) {\r\n        if (!playbook.triggers.threatTypes.includes(incident.sourceEvent.threatDetection.threatType)) {\r\n          continue;\r\n        }\r\n      }\r\n      \r\n      applicablePlaybooks.push(playbook);\r\n    }\r\n    \r\n    // Sort by severity threshold (highest first)\r\n    return applicablePlaybooks.sort((a, b) => \r\n      b.triggers.severityThreshold - a.triggers.severityThreshold\r\n    );\r\n  }\r\n\r\n  private async executePlaybook(incident: SecurityIncident, playbook: ResponsePlaybook): Promise<void> {\r\n    logger.info('📋 Executing response playbook', {\r\n      incidentId: incident.incidentId,\r\n      playbookId: playbook.playbookId,\r\n      playbookName: playbook.name\r\n    });\r\n    \r\n    // Add timeline entry\r\n    this.addTimelineEntry(\r\n      incident,\r\n      `Executing Playbook: ${playbook.name}`,\r\n      'SYSTEM',\r\n      'response'\r\n    );\r\n    \r\n    // Execute playbook steps (simplified implementation)\r\n    for (const step of playbook.steps) {\r\n      const action: IncidentResponseAction = {\r\n        actionId: `action_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n        type: step.actionType,\r\n        description: step.description,\r\n        status: 'completed',\r\n        metadata: step.parameters\r\n      };\r\n      \r\n      incident.responseActions.push(action);\r\n      \r\n      this.addTimelineEntry(\r\n        incident,\r\n        `Executed: ${step.name}`,\r\n        'SYSTEM',\r\n        'response',\r\n        `Result: Success`\r\n      );\r\n    }\r\n  }\r\n\r\n  private async executeDefaultResponse(incident: SecurityIncident): Promise<void> {\r\n    logger.info('🔧 Executing default response', {\r\n      incidentId: incident.incidentId\r\n    });\r\n    \r\n    // Default evidence collection and notification\r\n    const evidenceAction: IncidentResponseAction = {\r\n      actionId: `default_evidence_${Date.now()}`,\r\n      type: ResponseActionType.COLLECT_EVIDENCE,\r\n      description: 'Default response: Evidence collection',\r\n      status: 'completed',\r\n      metadata: { types: ['log_file', 'system_snapshot'] }\r\n    };\r\n    \r\n    const notifyAction: IncidentResponseAction = {\r\n      actionId: `default_notify_${Date.now()}`,\r\n      type: ResponseActionType.NOTIFY_STAKEHOLDERS,\r\n      description: 'Default response: Stakeholder notification',\r\n      status: 'completed',\r\n      metadata: { channels: ['email'] }\r\n    };\r\n    \r\n    incident.responseActions.push(evidenceAction, notifyAction);\r\n  }\r\n\r\n  private async startEvidenceCollection(incident: SecurityIncident): Promise<void> {\r\n    logger.info('🔍 Starting evidence collection', {\r\n      incidentId: incident.incidentId\r\n    });\r\n    \r\n    // Collect system logs\r\n    const logEvidence: IncidentEvidence = {\r\n      evidenceId: `evidence_logs_${Date.now()}`,\r\n      type: 'log_file',\r\n      description: 'System and security logs',\r\n      location: `/evidence/${incident.incidentId}/logs/`,\r\n      hash: 'placeholder_hash',\r\n      collectedAt: new Date(),\r\n      size: 0,\r\n      metadata: { source: 'system_logs' }\r\n    };\r\n    \r\n    incident.evidence.push(logEvidence);\r\n    this.evidenceStorage.set(logEvidence.evidenceId, logEvidence);\r\n    \r\n    this.addTimelineEntry(\r\n      incident,\r\n      'Evidence Collection Started',\r\n      'SYSTEM',\r\n      'response',\r\n      `Collecting ${incident.evidence.length} evidence items`\r\n    );\r\n  }\r\n\r\n  private async checkEscalationNeeded(incident: SecurityIncident): Promise<void> {\r\n    if (!this.config.escalation.enabled) return;\r\n    \r\n    const escalationDelay = this.config.escalation.escalationDelays[incident.severity];\r\n    const timeSinceCreation = Date.now() - incident.createdAt.getTime();\r\n    \r\n    if (timeSinceCreation > escalationDelay * 1000) {\r\n      logger.warn('⬆️ INCIDENT ESCALATED', {\r\n        incidentId: incident.incidentId,\r\n        reason: 'time_threshold'\r\n      });\r\n    }\r\n  }\r\n\r\n  private setupEventHandlers(): void {\r\n    this.on('incidentCreated', (incident: SecurityIncident) => {\r\n      logger.info('📝 Incident lifecycle: Created', {\r\n        incidentId: incident.incidentId,\r\n        severity: incident.severity\r\n      });\r\n    });\r\n  }\r\n\r\n  private startIncidentMonitoring(): void {\r\n    // Set up periodic checks for incident escalation\r\n    setInterval(() => {\r\n      this.checkIncidentEscalations();\r\n    }, 60000); // Check every minute\r\n  }\r\n\r\n  private checkIncidentEscalations(): void {\r\n    for (const incident of this.activeIncidents.values()) {\r\n      if (incident.status === IncidentStatus.RESOLVED || \r\n          incident.status === IncidentStatus.CLOSED) {\r\n        continue;\r\n      }\r\n      \r\n      this.checkEscalationNeeded(incident);\r\n    }\r\n  }\r\n\r\n  private addTimelineEntry(\r\n    incident: SecurityIncident,\r\n    action: string,\r\n    actor: string,\r\n    type: 'detection' | 'response' | 'escalation' | 'resolution' | 'note' = 'response',\r\n    details?: string\r\n  ): void {\r\n    const entry: IncidentTimelineEntry = {\r\n      entryId: `timeline_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n      timestamp: new Date(),\r\n      action,\r\n      actor,\r\n      details: details || action,\r\n      type\r\n    };\r\n    \r\n    incident.timeline.push(entry);\r\n    incident.updatedAt = new Date();\r\n  }\r\n\r\n  /**\r\n   * Get service status\r\n   * Returns current service status\r\n   * \r\n   * @returns Service status information\r\n   */\r\n  public getStatus(): {\r\n    isActive: boolean;\r\n    activeIncidents: number;\r\n    totalIncidents: number;\r\n    playbookCount: number;\r\n    evidenceCount: number;\r\n    timestamp: number;\r\n  } {\r\n    return {\r\n      isActive: true,\r\n      activeIncidents: this.activeIncidents.size,\r\n      totalIncidents: this.responseMetrics.totalIncidents,\r\n      playbookCount: this.responsePlaybooks.size,\r\n      evidenceCount: this.evidenceStorage.size,\r\n      timestamp: Date.now()\r\n    };\r\n  }\r\n}\r\n\r\n// Create and export singleton instance\r\nexport const incidentResponseService = new IncidentResponseService();\r\n\r\n// =============================================================================\r\n// INCIDENT RESPONSE NOTES\r\n// =============================================================================\r\n// 1. Automated threat containment with configurable response playbooks\r\n// 2. Incident classification and prioritization based on severity and type\r\n// 3. Comprehensive evidence collection and preservation capabilities\r\n// 4. Automated escalation procedures with configurable thresholds\r\n// 5. Timeline tracking for all incident activities and responses\r\n// 6. Integration with security monitoring and audit services\r\n// 7. Configurable response actions and containment procedures\r\n// 8. Metrics tracking for response effectiveness and performance\r\n// ============================================================================="],"mappings":"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","ignoreList":[]}