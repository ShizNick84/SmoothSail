{"version":3,"names":["cov_2d7cimrxhs","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","crypto_1","require","encryption_service_1","logger_1","fs_1","path_1","KeyType","exports","KeyStatus","KeyManager","keyStoragePath","keyCache","Map","DEFAULT_ROTATION_POLICIES","keyType","MASTER","rotationInterval","maxAge","rotateOnSecurityEvent","gracePeriod","API_ENCRYPTION","maxUsage","SESSION","DATABASE","constructor","resolve","process","cwd","initializeKeyStorage","startKeyRotationMonitoring","existsSync","mkdirSync","recursive","mode","logger","info","stats","statSync","parseInt","warn","currentMode","toString","expectedMode","error","Error","generateKey","purpose","strength","keyId","generateKeyId","keyBytes","keyBuffer","randomBytes","metadata","createdAt","Date","status","ACTIVE","usageCount","policy","getRotationPolicy","nextRotation","now","storeKey","set","key","security","classification","audit","auditId","eventType","actor","resource","action","result","timestamp","auditData","getKey","cached","get","updateKeyMetadata","keyData","loadKey","rotateKey","currentKey","newKeyId","DEPRECATED","lastRotated","delete","oldKeyId","revokeKey","reason","REVOKED","encryptionService","secureClear","listKeys","keyFiles","readdirSync","filter","endsWith","keys","replace","push","sort","a","getTime","checkKeysForRotation","allKeys","keysNeedingRotation","keyMetadata","keyAge","lastRotation","timeSinceRotation","needsRotation","PENDING_ROTATION","encryptedKey","encryptData","integrityHash","createHash","update","JSON","stringify","digest","storageEntry","storedAt","keyFilePath","writeFileSync","storageData","readFileSync","parse","keyHex","decryptData","Buffer","from","expectedHash","timingSafeEqual","random","find","setInterval","length","count","map","k","getStatus","keysByType","keysByStatus","totalKeys","cacheSize","size","keyManager"],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\key-manager.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * AI CRYPTO TRADING AGENT - MILITARY-GRADE KEY MANAGEMENT SERVICE\r\n * =============================================================================\r\n * \r\n * This service provides secure key management capabilities for the AI crypto\r\n * trading agent. It handles encryption key generation, rotation, storage, and\r\n * lifecycle management with military-grade security standards.\r\n * \r\n * CRITICAL SECURITY NOTICE:\r\n * This service protects the keys that secure access to trading capital and\r\n * sensitive financial data. Any compromise of this service could result in\r\n * total loss of funds. All operations must be audited and monitored.\r\n * \r\n * Security Features:\r\n * - Hardware-based key generation when available\r\n * - Automatic key rotation with configurable intervals\r\n * - Secure key storage with multiple encryption layers\r\n * - Key escrow and recovery capabilities\r\n * - Comprehensive audit logging of all key operations\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport { randomBytes, createHash, timingSafeEqual } from 'crypto';\r\nimport { encryptionService, EncryptedData } from '@/security/encryption-service';\r\nimport { logger } from '@/core/logging/logger';\r\nimport { existsSync, readFileSync, writeFileSync, mkdirSync } from 'fs';\r\nimport { resolve } from 'path';\r\n\r\n/**\r\n * Interface for key metadata\r\n * Contains information about key lifecycle and usage\r\n */\r\nexport interface KeyMetadata {\r\n  /** Unique key identifier */\r\n  keyId: string;\r\n  /** Key type (master, api, session, etc.) */\r\n  keyType: KeyType;\r\n  /** Key purpose description */\r\n  purpose: string;\r\n  /** Creation timestamp */\r\n  createdAt: Date;\r\n  /** Last rotation timestamp */\r\n  lastRotated?: Date;\r\n  /** Next scheduled rotation */\r\n  nextRotation?: Date;\r\n  /** Key status */\r\n  status: KeyStatus;\r\n  /** Key version for rotation tracking */\r\n  version: number;\r\n  /** Key strength in bits */\r\n  strength: number;\r\n  /** Usage counter */\r\n  usageCount: number;\r\n  /** Maximum allowed usage count */\r\n  maxUsage?: number;\r\n}\r\n\r\n/**\r\n * Enumeration of key types\r\n * Defines different categories of keys managed by the system\r\n */\r\nexport enum KeyType {\r\n  MASTER = 'master',\r\n  API_ENCRYPTION = 'api_encryption',\r\n  SESSION = 'session',\r\n  DATABASE = 'database',\r\n  BACKUP = 'backup',\r\n  AUDIT = 'audit',\r\n  COMMUNICATION = 'communication'\r\n}\r\n\r\n/**\r\n * Enumeration of key status values\r\n * Tracks the lifecycle state of each key\r\n */\r\nexport enum KeyStatus {\r\n  ACTIVE = 'active',\r\n  PENDING_ROTATION = 'pending_rotation',\r\n  DEPRECATED = 'deprecated',\r\n  REVOKED = 'revoked',\r\n  COMPROMISED = 'compromised'\r\n}\r\n\r\n/**\r\n * Interface for key rotation policy\r\n * Defines when and how keys should be rotated\r\n */\r\nexport interface KeyRotationPolicy {\r\n  /** Key type this policy applies to */\r\n  keyType: KeyType;\r\n  /** Rotation interval in milliseconds */\r\n  rotationInterval: number;\r\n  /** Maximum key age before forced rotation */\r\n  maxAge: number;\r\n  /** Maximum usage count before rotation */\r\n  maxUsage?: number;\r\n  /** Whether to rotate on security events */\r\n  rotateOnSecurityEvent: boolean;\r\n  /** Grace period for old key after rotation */\r\n  gracePeriod: number;\r\n}\r\n\r\n/**\r\n * Interface for key storage entry\r\n * Structure for persisting keys securely\r\n */\r\ninterface KeyStorageEntry {\r\n  /** Key metadata */\r\n  metadata: KeyMetadata;\r\n  /** Encrypted key data */\r\n  encryptedKey: EncryptedData;\r\n  /** Key integrity hash */\r\n  integrityHash: string;\r\n  /** Storage timestamp */\r\n  storedAt: Date;\r\n}\r\n\r\n/**\r\n * Military-grade key management service\r\n * Provides comprehensive key lifecycle management with security focus\r\n */\r\nexport class KeyManager {\r\n  /** Path to secure key storage directory */\r\n  private readonly keyStoragePath: string;\r\n  \r\n  /** In-memory key cache for performance */\r\n  private keyCache: Map<string, { key: Buffer; metadata: KeyMetadata }> = new Map();\r\n  \r\n  /** Default key rotation policies */\r\n  private static readonly DEFAULT_ROTATION_POLICIES: KeyRotationPolicy[] = [\r\n    {\r\n      keyType: KeyType.MASTER,\r\n      rotationInterval: 90 * 24 * 60 * 60 * 1000, // 90 days\r\n      maxAge: 365 * 24 * 60 * 60 * 1000, // 1 year\r\n      rotateOnSecurityEvent: true,\r\n      gracePeriod: 7 * 24 * 60 * 60 * 1000 // 7 days\r\n    },\r\n    {\r\n      keyType: KeyType.API_ENCRYPTION,\r\n      rotationInterval: 30 * 24 * 60 * 60 * 1000, // 30 days\r\n      maxAge: 90 * 24 * 60 * 60 * 1000, // 90 days\r\n      maxUsage: 1000000, // 1 million operations\r\n      rotateOnSecurityEvent: true,\r\n      gracePeriod: 24 * 60 * 60 * 1000 // 24 hours\r\n    },\r\n    {\r\n      keyType: KeyType.SESSION,\r\n      rotationInterval: 24 * 60 * 60 * 1000, // 24 hours\r\n      maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days\r\n      maxUsage: 10000, // 10k sessions\r\n      rotateOnSecurityEvent: true,\r\n      gracePeriod: 60 * 60 * 1000 // 1 hour\r\n    },\r\n    {\r\n      keyType: KeyType.DATABASE,\r\n      rotationInterval: 60 * 24 * 60 * 60 * 1000, // 60 days\r\n      maxAge: 180 * 24 * 60 * 60 * 1000, // 180 days\r\n      rotateOnSecurityEvent: true,\r\n      gracePeriod: 3 * 24 * 60 * 60 * 1000 // 3 days\r\n    }\r\n  ];\r\n\r\n  constructor() {\r\n    // Initialize key storage directory\r\n    this.keyStoragePath = resolve(process.cwd(), 'keys');\r\n    this.initializeKeyStorage();\r\n    \r\n    // Start key rotation monitoring\r\n    this.startKeyRotationMonitoring();\r\n  }\r\n\r\n  /**\r\n   * Initialize secure key storage directory\r\n   * Creates directory with restricted permissions if it doesn't exist\r\n   */\r\n  private initializeKeyStorage(): void {\r\n    try {\r\n      if (!existsSync(this.keyStoragePath)) {\r\n        mkdirSync(this.keyStoragePath, { recursive: true, mode: 0o700 });\r\n        logger.info('üîê Key storage directory created', { path: this.keyStoragePath });\r\n      }\r\n      \r\n      // Verify directory permissions\r\n      const stats = require('fs').statSync(this.keyStoragePath);\r\n      const mode = stats.mode & parseInt('777', 8);\r\n      \r\n      if (mode !== parseInt('700', 8)) {\r\n        logger.warn('‚ö†Ô∏è Key storage directory has incorrect permissions', { \r\n          path: this.keyStoragePath, \r\n          currentMode: mode.toString(8),\r\n          expectedMode: '700'\r\n        });\r\n      }\r\n      \r\n    } catch (error) {\r\n      logger.error('‚ùå Failed to initialize key storage:', error);\r\n      throw new Error('Key storage initialization failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate a new cryptographically secure key\r\n   * Creates a new key with specified type and strength\r\n   * \r\n   * @param keyType - Type of key to generate\r\n   * @param purpose - Purpose description for the key\r\n   * @param strength - Key strength in bits (default: 256)\r\n   * @returns Promise<string> The generated key ID\r\n   */\r\n  public async generateKey(\r\n    keyType: KeyType,\r\n    purpose: string,\r\n    strength: number = 256\r\n  ): Promise<string> {\r\n    try {\r\n      // Generate unique key ID\r\n      const keyId = this.generateKeyId(keyType);\r\n      \r\n      // Generate cryptographically secure key\r\n      const keyBytes = strength / 8;\r\n      const keyBuffer = randomBytes(keyBytes);\r\n      \r\n      // Create key metadata\r\n      const metadata: KeyMetadata = {\r\n        keyId,\r\n        keyType,\r\n        purpose,\r\n        createdAt: new Date(),\r\n        status: KeyStatus.ACTIVE,\r\n        version: 1,\r\n        strength,\r\n        usageCount: 0\r\n      };\r\n      \r\n      // Set next rotation based on policy\r\n      const policy = this.getRotationPolicy(keyType);\r\n      if (policy) {\r\n        metadata.nextRotation = new Date(Date.now() + policy.rotationInterval);\r\n      }\r\n      \r\n      // Store key securely\r\n      await this.storeKey(keyId, keyBuffer, metadata);\r\n      \r\n      // Cache key for performance\r\n      this.keyCache.set(keyId, { key: keyBuffer, metadata });\r\n      \r\n      // Log key generation (without sensitive data)\r\n      logger.security('KEY_GENERATED', 'New cryptographic key generated', {\r\n        keyId,\r\n        keyType,\r\n        purpose,\r\n        strength,\r\n        classification: 'RESTRICTED'\r\n      });\r\n      \r\n      // Audit log\r\n      logger.audit({\r\n        auditId: `key_gen_${keyId}`,\r\n        eventType: 'KEY_GENERATION',\r\n        actor: 'SYSTEM',\r\n        resource: `KEY:${keyId}`,\r\n        action: 'GENERATE',\r\n        result: 'SUCCESS',\r\n        timestamp: new Date(),\r\n        auditData: { keyType, purpose, strength }\r\n      });\r\n      \r\n      return keyId;\r\n      \r\n    } catch (error) {\r\n      logger.error('‚ùå Key generation failed:', error);\r\n      throw new Error('Failed to generate cryptographic key');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieve a key by ID\r\n   * Returns the key data and metadata for the specified key ID\r\n   * \r\n   * @param keyId - Unique key identifier\r\n   * @returns Promise<{ key: Buffer; metadata: KeyMetadata } | null> Key data or null if not found\r\n   */\r\n  public async getKey(keyId: string): Promise<{ key: Buffer; metadata: KeyMetadata } | null> {\r\n    try {\r\n      // Check cache first\r\n      const cached = this.keyCache.get(keyId);\r\n      if (cached) {\r\n        // Update usage count\r\n        cached.metadata.usageCount++;\r\n        await this.updateKeyMetadata(keyId, cached.metadata);\r\n        return cached;\r\n      }\r\n      \r\n      // Load from storage\r\n      const keyData = await this.loadKey(keyId);\r\n      if (!keyData) {\r\n        return null;\r\n      }\r\n      \r\n      // Update usage count\r\n      keyData.metadata.usageCount++;\r\n      await this.updateKeyMetadata(keyId, keyData.metadata);\r\n      \r\n      // Cache for future use\r\n      this.keyCache.set(keyId, keyData);\r\n      \r\n      return keyData;\r\n      \r\n    } catch (error) {\r\n      logger.error('‚ùå Key retrieval failed:', error);\r\n      throw new Error('Failed to retrieve cryptographic key');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Rotate a key to a new version\r\n   * Generates a new key and marks the old one as deprecated\r\n   * \r\n   * @param keyId - Key ID to rotate\r\n   * @returns Promise<string> New key ID\r\n   */\r\n  public async rotateKey(keyId: string): Promise<string> {\r\n    try {\r\n      // Get current key\r\n      const currentKey = await this.getKey(keyId);\r\n      if (!currentKey) {\r\n        throw new Error(`Key not found: ${keyId}`);\r\n      }\r\n      \r\n      // Generate new key with same parameters\r\n      const newKeyId = await this.generateKey(\r\n        currentKey.metadata.keyType,\r\n        currentKey.metadata.purpose,\r\n        currentKey.metadata.strength\r\n      );\r\n      \r\n      // Mark old key as deprecated\r\n      currentKey.metadata.status = KeyStatus.DEPRECATED;\r\n      currentKey.metadata.lastRotated = new Date();\r\n      await this.updateKeyMetadata(keyId, currentKey.metadata);\r\n      \r\n      // Remove from cache to force reload\r\n      this.keyCache.delete(keyId);\r\n      \r\n      // Log key rotation\r\n      logger.security('KEY_ROTATED', 'Cryptographic key rotated', {\r\n        oldKeyId: keyId,\r\n        newKeyId,\r\n        keyType: currentKey.metadata.keyType,\r\n        classification: 'RESTRICTED'\r\n      });\r\n      \r\n      // Audit log\r\n      logger.audit({\r\n        auditId: `key_rot_${keyId}`,\r\n        eventType: 'KEY_ROTATION',\r\n        actor: 'SYSTEM',\r\n        resource: `KEY:${keyId}`,\r\n        action: 'ROTATE',\r\n        result: 'SUCCESS',\r\n        timestamp: new Date(),\r\n        auditData: { oldKeyId: keyId, newKeyId }\r\n      });\r\n      \r\n      return newKeyId;\r\n      \r\n    } catch (error) {\r\n      logger.error('‚ùå Key rotation failed:', error);\r\n      throw new Error('Failed to rotate cryptographic key');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Revoke a key immediately\r\n   * Marks a key as revoked and removes it from cache\r\n   * \r\n   * @param keyId - Key ID to revoke\r\n   * @param reason - Reason for revocation\r\n   */\r\n  public async revokeKey(keyId: string, reason: string): Promise<void> {\r\n    try {\r\n      // Get current key\r\n      const currentKey = await this.getKey(keyId);\r\n      if (!currentKey) {\r\n        throw new Error(`Key not found: ${keyId}`);\r\n      }\r\n      \r\n      // Mark key as revoked\r\n      currentKey.metadata.status = KeyStatus.REVOKED;\r\n      await this.updateKeyMetadata(keyId, currentKey.metadata);\r\n      \r\n      // Remove from cache\r\n      this.keyCache.delete(keyId);\r\n      \r\n      // Clear key from memory\r\n      encryptionService.secureClear(currentKey.key);\r\n      \r\n      // Log key revocation\r\n      logger.security('KEY_REVOKED', 'Cryptographic key revoked', {\r\n        keyId,\r\n        reason,\r\n        keyType: currentKey.metadata.keyType,\r\n        classification: 'RESTRICTED'\r\n      });\r\n      \r\n      // Audit log\r\n      logger.audit({\r\n        auditId: `key_rev_${keyId}`,\r\n        eventType: 'KEY_REVOCATION',\r\n        actor: 'SYSTEM',\r\n        resource: `KEY:${keyId}`,\r\n        action: 'REVOKE',\r\n        result: 'SUCCESS',\r\n        timestamp: new Date(),\r\n        auditData: { reason }\r\n      });\r\n      \r\n    } catch (error) {\r\n      logger.error('‚ùå Key revocation failed:', error);\r\n      throw new Error('Failed to revoke cryptographic key');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * List all keys with their metadata\r\n   * Returns metadata for all keys (without key data)\r\n   * \r\n   * @param keyType - Optional filter by key type\r\n   * @returns Promise<KeyMetadata[]> Array of key metadata\r\n   */\r\n  public async listKeys(keyType?: KeyType): Promise<KeyMetadata[]> {\r\n    try {\r\n      const keyFiles = require('fs').readdirSync(this.keyStoragePath)\r\n        .filter((file: string) => file.endsWith('.key'));\r\n      \r\n      const keys: KeyMetadata[] = [];\r\n      \r\n      for (const file of keyFiles) {\r\n        try {\r\n          const keyData = await this.loadKey(file.replace('.key', ''));\r\n          if (keyData && (!keyType || keyData.metadata.keyType === keyType)) {\r\n            keys.push(keyData.metadata);\r\n          }\r\n        } catch (error) {\r\n          logger.warn('‚ö†Ô∏è Failed to load key metadata', { file, error });\r\n        }\r\n      }\r\n      \r\n      return keys.sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\r\n      \r\n    } catch (error) {\r\n      logger.error('‚ùå Failed to list keys:', error);\r\n      throw new Error('Failed to list cryptographic keys');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if keys need rotation\r\n   * Identifies keys that should be rotated based on policies\r\n   * \r\n   * @returns Promise<KeyMetadata[]> Keys that need rotation\r\n   */\r\n  public async checkKeysForRotation(): Promise<KeyMetadata[]> {\r\n    try {\r\n      const allKeys = await this.listKeys();\r\n      const keysNeedingRotation: KeyMetadata[] = [];\r\n      \r\n      for (const keyMetadata of allKeys) {\r\n        if (keyMetadata.status !== KeyStatus.ACTIVE) {\r\n          continue;\r\n        }\r\n        \r\n        const policy = this.getRotationPolicy(keyMetadata.keyType);\r\n        if (!policy) {\r\n          continue;\r\n        }\r\n        \r\n        const now = Date.now();\r\n        const keyAge = now - keyMetadata.createdAt.getTime();\r\n        const lastRotation = keyMetadata.lastRotated?.getTime() || keyMetadata.createdAt.getTime();\r\n        const timeSinceRotation = now - lastRotation;\r\n        \r\n        // Check if rotation is needed\r\n        const needsRotation = \r\n          keyAge > policy.maxAge ||\r\n          timeSinceRotation > policy.rotationInterval ||\r\n          (policy.maxUsage && keyMetadata.usageCount > policy.maxUsage) ||\r\n          (keyMetadata.nextRotation && now > keyMetadata.nextRotation.getTime());\r\n        \r\n        if (needsRotation) {\r\n          keyMetadata.status = KeyStatus.PENDING_ROTATION;\r\n          await this.updateKeyMetadata(keyMetadata.keyId, keyMetadata);\r\n          keysNeedingRotation.push(keyMetadata);\r\n        }\r\n      }\r\n      \r\n      return keysNeedingRotation;\r\n      \r\n    } catch (error) {\r\n      logger.error('‚ùå Failed to check keys for rotation:', error);\r\n      throw new Error('Failed to check key rotation status');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Store a key securely to disk\r\n   * Encrypts and stores key with metadata and integrity checking\r\n   * \r\n   * @param keyId - Unique key identifier\r\n   * @param keyBuffer - Key data to store\r\n   * @param metadata - Key metadata\r\n   */\r\n  private async storeKey(keyId: string, keyBuffer: Buffer, metadata: KeyMetadata): Promise<void> {\r\n    try {\r\n      // Encrypt the key data\r\n      const encryptedKey = await encryptionService.encryptData(keyBuffer.toString('hex'));\r\n      \r\n      // Calculate integrity hash\r\n      const integrityHash = createHash('sha256')\r\n        .update(keyBuffer)\r\n        .update(JSON.stringify(metadata))\r\n        .digest('hex');\r\n      \r\n      // Create storage entry\r\n      const storageEntry: KeyStorageEntry = {\r\n        metadata,\r\n        encryptedKey,\r\n        integrityHash,\r\n        storedAt: new Date()\r\n      };\r\n      \r\n      // Write to secure storage\r\n      const keyFilePath = resolve(this.keyStoragePath, `${keyId}.key`);\r\n      writeFileSync(keyFilePath, JSON.stringify(storageEntry), { mode: 0o600 });\r\n      \r\n    } catch (error) {\r\n      logger.error('‚ùå Failed to store key:', error);\r\n      throw new Error('Key storage failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load a key securely from disk\r\n   * Decrypts and verifies integrity of stored key\r\n   * \r\n   * @param keyId - Unique key identifier\r\n   * @returns Promise<{ key: Buffer; metadata: KeyMetadata } | null> Key data or null\r\n   */\r\n  private async loadKey(keyId: string): Promise<{ key: Buffer; metadata: KeyMetadata } | null> {\r\n    try {\r\n      const keyFilePath = resolve(this.keyStoragePath, `${keyId}.key`);\r\n      \r\n      if (!existsSync(keyFilePath)) {\r\n        return null;\r\n      }\r\n      \r\n      // Read storage entry\r\n      const storageData = readFileSync(keyFilePath, 'utf8');\r\n      const storageEntry: KeyStorageEntry = JSON.parse(storageData);\r\n      \r\n      // Decrypt key data\r\n      const keyHex = await encryptionService.decryptData(storageEntry.encryptedKey);\r\n      const keyBuffer = Buffer.from(keyHex, 'hex');\r\n      \r\n      // Verify integrity\r\n      const expectedHash = createHash('sha256')\r\n        .update(keyBuffer)\r\n        .update(JSON.stringify(storageEntry.metadata))\r\n        .digest('hex');\r\n      \r\n      if (!timingSafeEqual(Buffer.from(storageEntry.integrityHash, 'hex'), Buffer.from(expectedHash, 'hex'))) {\r\n        throw new Error('Key integrity verification failed');\r\n      }\r\n      \r\n      return {\r\n        key: keyBuffer,\r\n        metadata: storageEntry.metadata\r\n      };\r\n      \r\n    } catch (error) {\r\n      logger.error('‚ùå Failed to load key:', error);\r\n      throw new Error('Key loading failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update key metadata\r\n   * Updates stored metadata for a key\r\n   * \r\n   * @param keyId - Key identifier\r\n   * @param metadata - Updated metadata\r\n   */\r\n  private async updateKeyMetadata(keyId: string, metadata: KeyMetadata): Promise<void> {\r\n    try {\r\n      const keyData = await this.loadKey(keyId);\r\n      if (!keyData) {\r\n        throw new Error(`Key not found: ${keyId}`);\r\n      }\r\n      \r\n      // Update metadata and re-store\r\n      await this.storeKey(keyId, keyData.key, metadata);\r\n      \r\n      // Update cache if present\r\n      const cached = this.keyCache.get(keyId);\r\n      if (cached) {\r\n        cached.metadata = metadata;\r\n      }\r\n      \r\n    } catch (error) {\r\n      logger.error('‚ùå Failed to update key metadata:', error);\r\n      throw new Error('Key metadata update failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate unique key ID\r\n   * Creates a unique identifier for a new key\r\n   * \r\n   * @param keyType - Type of key\r\n   * @returns string Unique key ID\r\n   */\r\n  private generateKeyId(keyType: KeyType): string {\r\n    const timestamp = Date.now().toString(36);\r\n    const random = randomBytes(8).toString('hex');\r\n    return `${keyType}_${timestamp}_${random}`;\r\n  }\r\n\r\n  /**\r\n   * Get rotation policy for key type\r\n   * Returns the rotation policy for a specific key type\r\n   * \r\n   * @param keyType - Key type to get policy for\r\n   * @returns KeyRotationPolicy | null Policy or null if not found\r\n   */\r\n  private getRotationPolicy(keyType: KeyType): KeyRotationPolicy | null {\r\n    return KeyManager.DEFAULT_ROTATION_POLICIES.find(policy => policy.keyType === keyType) || null;\r\n  }\r\n\r\n  /**\r\n   * Start key rotation monitoring\r\n   * Begins periodic checking for keys that need rotation\r\n   */\r\n  private startKeyRotationMonitoring(): void {\r\n    // Check for key rotation every hour\r\n    setInterval(async () => {\r\n      try {\r\n        const keysNeedingRotation = await this.checkKeysForRotation();\r\n        \r\n        if (keysNeedingRotation.length > 0) {\r\n          logger.warn('‚ö†Ô∏è Keys requiring rotation detected', {\r\n            count: keysNeedingRotation.length,\r\n            keys: keysNeedingRotation.map(k => ({ keyId: k.keyId, keyType: k.keyType }))\r\n          });\r\n          \r\n          // Auto-rotate non-critical keys\r\n          for (const keyMetadata of keysNeedingRotation) {\r\n            if (keyMetadata.keyType !== KeyType.MASTER) {\r\n              try {\r\n                await this.rotateKey(keyMetadata.keyId);\r\n                logger.info('üîÑ Key automatically rotated', { keyId: keyMetadata.keyId });\r\n              } catch (error) {\r\n                logger.error('‚ùå Automatic key rotation failed', { keyId: keyMetadata.keyId, error });\r\n              }\r\n            }\r\n          }\r\n        }\r\n        \r\n      } catch (error) {\r\n        logger.error('‚ùå Key rotation monitoring error:', error);\r\n      }\r\n    }, 60 * 60 * 1000); // 1 hour\r\n  }\r\n\r\n  /**\r\n   * Get key manager status and statistics\r\n   * Returns current status for monitoring and diagnostics\r\n   * \r\n   * @returns Object containing key manager status\r\n   */\r\n  public async getStatus(): Promise<{\r\n    totalKeys: number;\r\n    keysByType: Record<string, number>;\r\n    keysByStatus: Record<string, number>;\r\n    cacheSize: number;\r\n    keysNeedingRotation: number;\r\n    timestamp: number;\r\n  }> {\r\n    try {\r\n      const allKeys = await this.listKeys();\r\n      const keysNeedingRotation = await this.checkKeysForRotation();\r\n      \r\n      const keysByType: Record<string, number> = {};\r\n      const keysByStatus: Record<string, number> = {};\r\n      \r\n      for (const key of allKeys) {\r\n        keysByType[key.keyType] = (keysByType[key.keyType] || 0) + 1;\r\n        keysByStatus[key.status] = (keysByStatus[key.status] || 0) + 1;\r\n      }\r\n      \r\n      return {\r\n        totalKeys: allKeys.length,\r\n        keysByType,\r\n        keysByStatus,\r\n        cacheSize: this.keyCache.size,\r\n        keysNeedingRotation: keysNeedingRotation.length,\r\n        timestamp: Date.now()\r\n      };\r\n      \r\n    } catch (error) {\r\n      logger.error('‚ùå Failed to get key manager status:', error);\r\n      throw new Error('Failed to get key manager status');\r\n    }\r\n  }\r\n}\r\n\r\n// Create and export singleton instance\r\nexport const keyManager = new KeyManager();\r\n\r\n// =============================================================================\r\n// KEY MANAGEMENT SECURITY NOTES\r\n// =============================================================================\r\n// 1. All keys are stored encrypted with the master encryption key\r\n// 2. Key files have restricted permissions (600) for security\r\n// 3. Keys are automatically rotated based on configurable policies\r\n// 4. All key operations are logged and audited\r\n// 5. Key integrity is verified on every load operation\r\n// 6. Sensitive key data is cleared from memory after use\r\n// 7. Key cache improves performance but maintains security\r\n// 8. Master keys require manual rotation for maximum security\r\n// =============================================================================\r\n"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA,SAAAA,ecAAA;MAAAC,IAAA;MAAAC,QAAA;MAAAC,KAAA;MAAAC,OAAA;MAAAC,cAAA;MAAAC,OAAA;IAAA;IAAAC,eAAA;IAAA5B,IAAA;EAAA;EAAA,IAAA6B,QAAA,GAAA5B,MAAA,CAAAE,GAAA,MAAAF,MAAA,CAAAE,GAAA;EAAA,KAAA0B,QAAA,CAAA9B,IAAA,KAAA8B,QAAA,CAAA9B,IAAA,EAAAC,IAAA,KAAAA,IAAA;IAAA6B,QAAA,CAAA9B,IAAA,IAAAK,YAAA;EAAA;EAAA,IAAA0B,cAAA,GAAAD,QAAA,CAAA9B,IAAA;EAAA;;;;;;;;;;;;;;;;AA2BA,MAAAgC,QAAA;AAAA;AAAA,CAAAjC,cAAA,GAAAoB,CAAA,OAAAc,OAAA;AACA,MAAAC,oBAAA;AAAA;AAAA,CAAAnC,cAAA,GAAAoB,CAAA,OAAAc,OAAA;AACA,MAAAE,QAAA;AAAA;AAAA,CAAApC,cAAA,GAAAoB,CAAA,OAAAc,OAAA;AACA,MAAAG,IAAA;AAAA;AAAA,CAAArC,cAAA,GAAAoB,CAAA,OAAAc,OAAA;AACA,MAAAI,MAAA;AAAA;AAAA,CAAAtC,cAAA,GAAAoB,CAAA,OAAAc,OAAA;AA+BA;;;;AAIA,IAAYK,OAQX;AAAA;AAAAvC,cAAA,GAAAoB,CAAA;AARD,WAAYmB,OAAO;EAAA;EAAAvC,cAAA,GAAAqB,CAAA;EAAArB,cAAA,GAAAoB,CAAA;EACjBmB,OAAA,qBAAiB;EAAA;EAAAvC,cAAA,GAAAoB,CAAA;EACjBmB,OAAA,qCAAiC;EAAA;EAAAvC,cAAA,GAAAoB,CAAA;EACjCmB,OAAA,uBAAmB;EAAA;EAAAvC,cAAA,GAAAoB,CAAA;EACnBmB,OAAA,yBAAqB;EAAA;EAAAvC,cAAA,GAAAoB,CAAA;EACrBmB,OAAA,qBAAiB;EAAA;EAAAvC,cAAA,GAAAoB,CAAA;EACjBmB,OAAA,mBAAe;EAAA;EAAAvC,cAAA,GAAAoB,CAAA;EACfmB,OAAA,mCAA+B;AACjC,CAAC;AARW;AAAA,CAAAvC,cAAA,GAAAsB,CAAA,UAAAiB,OAAO;AAAA;AAAA,CAAAvC,cAAA,GAAAsB,CAAA,UAAAkB,OAAA,CAAAD,OAAA,GAAPA,OAAO;AAUnB;;;;AAIA,IAAYE,SAMX;AAAA;AAAAzC,cAAA,GAAAoB,CAAA;AAND,WAAYqB,SAAS;EAAA;EAAAzC,cAAA,GAAAqB,CAAA;EAAArB,cAAA,GAAAoB,CAAA;EACnBqB,SAAA,qBAAiB;EAAA;EAAAzC,cAAA,GAAAoB,CAAA;EACjBqB,SAAA,yCAAqC;EAAA;EAAAzC,cAAA,GAAAoB,CAAA;EACrCqB,SAAA,6BAAyB;EAAA;EAAAzC,cAAA,GAAAoB,CAAA;EACzBqB,SAAA,uBAAmB;EAAA;EAAAzC,cAAA,GAAAoB,CAAA;EACnBqB,SAAA,+BAA2B;AAC7B,CAAC;AANW;AAAA,CAAAzC,cAAA,GAAAsB,CAAA,UAAAmB,SAAS;AAAA;AAAA,CAAAzC,cAAA,GAAAsB,CAAA,UAAAkB,OAAA,CAAAC,SAAA,GAATA,SAAS;AA0CrB;;;;AAIA,MAAaC,UAAU;EACrB;EACiBC,cAAc;EAE/B;EACQC,QAAQ;EAAA;EAAA,CAAA5C,cAAA,GAAAoB,CAAA,QAAwD,IAAIyB,GAAG,EAAE;EAEjF;EACQ,OAAgBC,yBAAyB;EAAA;EAAA,CAAA9C,cAAA,GAAAoB,CAAA,QAAwB,CACvE;IACE2B,OAAO,EAAER,OAAO,CAACS,MAAM;IACvBC,gBAAgB,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;IAAE;IAC5CC,MAAM,EAAE,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;IAAE;IACnCC,qBAAqB,EAAE,IAAI;IAC3BC,WAAW,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;GACtC,EACD;IACEL,OAAO,EAAER,OAAO,CAACc,cAAc;IAC/BJ,gBAAgB,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;IAAE;IAC5CC,MAAM,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;IAAE;IAClCI,QAAQ,EAAE,OAAO;IAAE;IACnBH,qBAAqB,EAAE,IAAI;IAC3BC,WAAW,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;GAClC,EACD;IACEL,OAAO,EAAER,OAAO,CAACgB,OAAO;IACxBN,gBAAgB,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;IAAE;IACvCC,MAAM,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;IAAE;IACjCI,QAAQ,EAAE,KAAK;IAAE;IACjBH,qBAAqB,EAAE,IAAI;IAC3BC,WAAW,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;GAC7B,EACD;IACEL,OAAO,EAAER,OAAO,CAACiB,QAAQ;IACzBP,gBAAgB,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;IAAE;IAC5CC,MAAM,EAAE,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;IAAE;IACnCC,qBAAqB,EAAE,IAAI;IAC3BC,WAAW,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;GACtC,CACF;EAEDK,YAAA;IAAA;IAAAzD,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IACE;IACA,IAAI,CAACuB,cAAc,GAAG,IAAAL,MAAA,CAAAoB,OAAO,EAACC,OAAO,CAACC,GAAG,EAAE,EAAE,MAAM,CAAC;IAAC;IAAA5D,cAAA,GAAAoB,CAAA;IACrD,IAAI,CAACyC,oBAAoB,EAAE;IAE3B;IAAA;IAAA7D,cAAA,GAAAoB,CAAA;IACA,IAAI,CAAC0C,0BAA0B,EAAE;EACnC;EAEA;;;;EAIQD,oBAAoBA,CAAA;IAAA;IAAA7D,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IAC1B,IAAI;MAAA;MAAApB,cAAA,GAAAoB,CAAA;MACF,IAAI,CAAC,IAAAiB,IAAA,CAAA0B,UAAU,EAAC,IAAI,CAACpB,cAAc,CAAC,EAAE;QAAA;QAAA3C,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACpC,IAAAiB,IAAA,CAAA2B,SAAS,EAAC,IAAI,CAACrB,cAAc,EAAE;UAAEsB,SAAS,EAAE,IAAI;UAAEC,IAAI,EAAE;QAAK,CAAE,CAAC;QAAC;QAAAlE,cAAA,GAAAoB,CAAA;QACjEgB,QAAA,CAAA+B,MAAM,CAACC,IAAI,CAAC,kCAAkC,EAAE;UAAEnE,IAAI,EAAE,IAAI,CAAC0C;QAAc,CAAE,CAAC;MAChF,CAAC;MAAA;MAAA;QAAA3C,cAAA,GAAAsB,CAAA;MAAA;MAED;MACA,MAAM+C,KAAK;MAAA;MAAA,CAAArE,cAAA,GAAAoB,CAAA,QAAGc,OAAO,CAAC,IAAI,CAAC,CAACoC,QAAQ,CAAC,IAAI,CAAC3B,cAAc,CAAC;MACzD,MAAMuB,IAAI;MAAA;MAAA,CAAAlE,cAAA,GAAAoB,CAAA,QAAGiD,KAAK,CAACH,IAAI,GAAGK,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAC;MAAC;MAAAvE,cAAA,GAAAoB,CAAA;MAE7C,IAAI8C,IAAI,KAAKK,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE;QAAA;QAAAvE,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QAC/BgB,QAAA,CAAA+B,MAAM,CAACK,IAAI,CAAC,oDAAoD,EAAE;UAChEvE,IAAI,EAAE,IAAI,CAAC0C,cAAc;UACzB8B,WAAW,EAAEP,IAAI,CAACQ,QAAQ,CAAC,CAAC,CAAC;UAC7BC,YAAY,EAAE;SACf,CAAC;MACJ,CAAC;MAAA;MAAA;QAAA3E,cAAA,GAAAsB,CAAA;MAAA;IAEH,CAAC,CAAC,OAAOsD,KAAK,EAAE;MAAA;MAAA5E,cAAA,GAAAoB,CAAA;MACdgB,QAAA,CAAA+B,MAAM,CAACS,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAAC;MAAA5E,cAAA,GAAAoB,CAAA;MAC3D,MAAM,IAAIyD,KAAK,CAAC,mCAAmC,CAAC;IACtD;EACF;EAEA;;;;;;;;;EASO,MAAMC,WAAWA,CACtB/B,OAAgB,EAChBgC,OAAe,EACfC,QAAA;EAAA;EAAA,CAAAhF,cAAA,GAAAsB,CAAA,UAAmB,GAAG;IAAA;IAAAtB,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IAEtB,IAAI;MACF;MACA,MAAM6D,KAAK;MAAA;MAAA,CAAAjF,cAAA,GAAAoB,CAAA,QAAG,IAAI,CAAC8D,aAAa,CAACnC,OAAO,CAAC;MAEzC;MACA,MAAMoC,QAAQ;MAAA;MAAA,CAAAnF,cAAA,GAAAoB,CAAA,QAAG4D,QAAQ,GAAG,CAAC;MAC7B,MAAMI,SAAS;MAAA;MAAA,CAAApF,cAAA,GAAAoB,CAAA,QAAG,IAAAa,QAAA,CAAAoD,WAAW,EAACF,QAAQ,CAAC;MAEvC;MACA,MAAMG,QAAQ;MAAA;MAAA,CAAAtF,cAAA,GAAAoB,CAAA,QAAgB;QAC5B6D,KAAK;QACLlC,OAAO;QACPgC,OAAO;QACPQ,SAAS,EAAE,IAAIC,IAAI,EAAE;QACrBC,MAAM,EAAEhD,SAAS,CAACiD,MAAM;QACxB7D,OAAO,EAAE,CAAC;QACVmD,QAAQ;QACRW,UAAU,EAAE;OACb;MAED;MACA,MAAMC,MAAM;MAAA;MAAA,CAAA5F,cAAA,GAAAoB,CAAA,QAAG,IAAI,CAACyE,iBAAiB,CAAC9C,OAAO,CAAC;MAAC;MAAA/C,cAAA,GAAAoB,CAAA;MAC/C,IAAIwE,MAAM,EAAE;QAAA;QAAA5F,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACVkE,QAAQ,CAACQ,YAAY,GAAG,IAAIN,IAAI,CAACA,IAAI,CAACO,GAAG,EAAE,GAAGH,MAAM,CAAC3C,gBAAgB,CAAC;MACxE,CAAC;MAAA;MAAA;QAAAjD,cAAA,GAAAsB,CAAA;MAAA;MAED;MAAAtB,cAAA,GAAAoB,CAAA;MACA,MAAM,IAAI,CAAC4E,QAAQ,CAACf,KAAK,EAAEG,SAAS,EAAEE,QAAQ,CAAC;MAE/C;MAAA;MAAAtF,cAAA,GAAAoB,CAAA;MACA,IAAI,CAACwB,QAAQ,CAACqD,GAAG,CAAChB,KAAK,EAAE;QAAEiB,GAAG,EAAEd,SAAS;QAAEE;MAAQ,CAAE,CAAC;MAEtD;MAAA;MAAAtF,cAAA,GAAAoB,CAAA;MACAgB,QAAA,CAAA+B,MAAM,CAACgC,QAAQ,CAAC,eAAe,EAAE,iCAAiC,EAAE;QAClElB,KAAK;QACLlC,OAAO;QACPgC,OAAO;QACPC,QAAQ;QACRoB,cAAc,EAAE;OACjB,CAAC;MAEF;MAAA;MAAApG,cAAA,GAAAoB,CAAA;MACAgB,QAAA,CAAA+B,MAAM,CAACkC,KAAK,CAAC;QACXC,OAAO,EAAE,WAAWrB,KAAK,EAAE;QAC3BsB,SAAS,EAAE,gBAAgB;QAC3BC,KAAK,EAAE,QAAQ;QACfC,QAAQ,EAAE,OAAOxB,KAAK,EAAE;QACxByB,MAAM,EAAE,UAAU;QAClBC,MAAM,EAAE,SAAS;QACjBC,SAAS,EAAE,IAAIpB,IAAI,EAAE;QACrBqB,SAAS,EAAE;UAAE9D,OAAO;UAAEgC,OAAO;UAAEC;QAAQ;OACxC,CAAC;MAAC;MAAAhF,cAAA,GAAAoB,CAAA;MAEH,OAAO6D,KAAK;IAEd,CAAC,CAAC,OAAOL,KAAK,EAAE;MAAA;MAAA5E,cAAA,GAAAoB,CAAA;MACdgB,QAAA,CAAA+B,MAAM,CAACS,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAAC;MAAA5E,cAAA,GAAAoB,CAAA;MAChD,MAAM,IAAIyD,KAAK,CAAC,sCAAsC,CAAC;IACzD;EACF;EAEA;;;;;;;EAOO,MAAMiC,MAAMA,CAAC7B,KAAa;IAAA;IAAAjF,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IAC/B,IAAI;MACF;MACA,MAAM2F,MAAM;MAAA;MAAA,CAAA/G,cAAA,GAAAoB,CAAA,QAAG,IAAI,CAACwB,QAAQ,CAACoE,GAAG,CAAC/B,KAAK,CAAC;MAAC;MAAAjF,cAAA,GAAAoB,CAAA;MACxC,IAAI2F,MAAM,EAAE;QAAA;QAAA/G,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACV;QACA2F,MAAM,CAACzB,QAAQ,CAACK,UAAU,EAAE;QAAC;QAAA3F,cAAA,GAAAoB,CAAA;QAC7B,MAAM,IAAI,CAAC6F,iBAAiB,CAAChC,KAAK,EAAE8B,MAAM,CAACzB,QAAQ,CAAC;QAAC;QAAAtF,cAAA,GAAAoB,CAAA;QACrD,OAAO2F,MAAM;MACf,CAAC;MAAA;MAAA;QAAA/G,cAAA,GAAAsB,CAAA;MAAA;MAED;MACA,MAAM4F,OAAO;MAAA;MAAA,CAAAlH,cAAA,GAAAoB,CAAA,QAAG,MAAM,IAAI,CAAC+F,OAAO,CAAClC,KAAK,CAAC;MAAC;MAAAjF,cAAA,GAAAoB,CAAA;MAC1C,IAAI,CAAC8F,OAAO,EAAE;QAAA;QAAAlH,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACZ,OAAO,IAAI;MACb,CAAC;MAAA;MAAA;QAAApB,cAAA,GAAAsB,CAAA;MAAA;MAED;MAAAtB,cAAA,GAAAoB,CAAA;MACA8F,OAAO,CAAC5B,QAAQ,CAACK,UAAU,EAAE;MAAC;MAAA3F,cAAA,GAAAoB,CAAA;MAC9B,MAAM,IAAI,CAAC6F,iBAAiB,CAAChC,KAAK,EAAEiC,OAAO,CAAC5B,QAAQ,CAAC;MAErD;MAAA;MAAAtF,cAAA,GAAAoB,CAAA;MACA,IAAI,CAACwB,QAAQ,CAACqD,GAAG,CAAChB,KAAK,EAAEiC,OAAO,CAAC;MAAC;MAAAlH,cAAA,GAAAoB,CAAA;MAElC,OAAO8F,OAAO;IAEhB,CAAC,CAAC,OAAOtC,KAAK,EAAE;MAAA;MAAA5E,cAAA,GAAAoB,CAAA;MACdgB,QAAA,CAAA+B,MAAM,CAACS,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAAC;MAAA5E,cAAA,GAAAoB,CAAA;MAC/C,MAAM,IAAIyD,KAAK,CAAC,sCAAsC,CAAC;IACzD;EACF;EAEA;;;;;;;EAOO,MAAMuC,SAASA,CAACnC,KAAa;IAAA;IAAAjF,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IAClC,IAAI;MACF;MACA,MAAMiG,UAAU;MAAA;MAAA,CAAArH,cAAA,GAAAoB,CAAA,QAAG,MAAM,IAAI,CAAC0F,MAAM,CAAC7B,KAAK,CAAC;MAAC;MAAAjF,cAAA,GAAAoB,CAAA;MAC5C,IAAI,CAACiG,UAAU,EAAE;QAAA;QAAArH,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACf,MAAM,IAAIyD,KAAK,CAAC,kBAAkBI,KAAK,EAAE,CAAC;MAC5C,CAAC;MAAA;MAAA;QAAAjF,cAAA,GAAAsB,CAAA;MAAA;MAED;MACA,MAAMgG,QAAQ;MAAA;MAAA,CAAAtH,cAAA,GAAAoB,CAAA,QAAG,MAAM,IAAI,CAAC0D,WAAW,CACrCuC,UAAU,CAAC/B,QAAQ,CAACvC,OAAO,EAC3BsE,UAAU,CAAC/B,QAAQ,CAACP,OAAO,EAC3BsC,UAAU,CAAC/B,QAAQ,CAACN,QAAQ,CAC7B;MAED;MAAA;MAAAhF,cAAA,GAAAoB,CAAA;MACAiG,UAAU,CAAC/B,QAAQ,CAACG,MAAM,GAAGhD,SAAS,CAAC8E,UAAU;MAAC;MAAAvH,cAAA,GAAAoB,CAAA;MAClDiG,UAAU,CAAC/B,QAAQ,CAACkC,WAAW,GAAG,IAAIhC,IAAI,EAAE;MAAC;MAAAxF,cAAA,GAAAoB,CAAA;MAC7C,MAAM,IAAI,CAAC6F,iBAAiB,CAAChC,KAAK,EAAEoC,UAAU,CAAC/B,QAAQ,CAAC;MAExD;MAAA;MAAAtF,cAAA,GAAAoB,CAAA;MACA,IAAI,CAACwB,QAAQ,CAAC6E,MAAM,CAACxC,KAAK,CAAC;MAE3B;MAAA;MAAAjF,cAAA,GAAAoB,CAAA;MACAgB,QAAA,CAAA+B,MAAM,CAACgC,QAAQ,CAAC,aAAa,EAAE,2BAA2B,EAAE;QAC1DuB,QAAQ,EAAEzC,KAAK;QACfqC,QAAQ;QACRvE,OAAO,EAAEsE,UAAU,CAAC/B,QAAQ,CAACvC,OAAO;QACpCqD,cAAc,EAAE;OACjB,CAAC;MAEF;MAAA;MAAApG,cAAA,GAAAoB,CAAA;MACAgB,QAAA,CAAA+B,MAAM,CAACkC,KAAK,CAAC;QACXC,OAAO,EAAE,WAAWrB,KAAK,EAAE;QAC3BsB,SAAS,EAAE,cAAc;QACzBC,KAAK,EAAE,QAAQ;QACfC,QAAQ,EAAE,OAAOxB,KAAK,EAAE;QACxByB,MAAM,EAAE,QAAQ;QAChBC,MAAM,EAAE,SAAS;QACjBC,SAAS,EAAE,IAAIpB,IAAI,EAAE;QACrBqB,SAAS,EAAE;UAAEa,QAAQ,EAAEzC,KAAK;UAAEqC;QAAQ;OACvC,CAAC;MAAC;MAAAtH,cAAA,GAAAoB,CAAA;MAEH,OAAOkG,QAAQ;IAEjB,CAAC,CAAC,OAAO1C,KAAK,EAAE;MAAA;MAAA5E,cAAA,GAAAoB,CAAA;MACdgB,QAAA,CAAA+B,MAAM,CAACS,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAAC;MAAA5E,cAAA,GAAAoB,CAAA;MAC9C,MAAM,IAAIyD,KAAK,CAAC,oCAAoC,CAAC;IACvD;EACF;EAEA;;;;;;;EAOO,MAAM8C,SAASA,CAAC1C,KAAa,EAAE2C,MAAc;IAAA;IAAA5H,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IAClD,IAAI;MACF;MACA,MAAMiG,UAAU;MAAA;MAAA,CAAArH,cAAA,GAAAoB,CAAA,QAAG,MAAM,IAAI,CAAC0F,MAAM,CAAC7B,KAAK,CAAC;MAAC;MAAAjF,cAAA,GAAAoB,CAAA;MAC5C,IAAI,CAACiG,UAAU,EAAE;QAAA;QAAArH,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACf,MAAM,IAAIyD,KAAK,CAAC,kBAAkBI,KAAK,EAAE,CAAC;MAC5C,CAAC;MAAA;MAAA;QAAAjF,cAAA,GAAAsB,CAAA;MAAA;MAED;MAAAtB,cAAA,GAAAoB,CAAA;MACAiG,UAAU,CAAC/B,QAAQ,CAACG,MAAM,GAAGhD,SAAS,CAACoF,OAAO;MAAC;MAAA7H,cAAA,GAAAoB,CAAA;MAC/C,MAAM,IAAI,CAAC6F,iBAAiB,CAAChC,KAAK,EAAEoC,UAAU,CAAC/B,QAAQ,CAAC;MAExD;MAAA;MAAAtF,cAAA,GAAAoB,CAAA;MACA,IAAI,CAACwB,QAAQ,CAAC6E,MAAM,CAACxC,KAAK,CAAC;MAE3B;MAAA;MAAAjF,cAAA,GAAAoB,CAAA;MACAe,oBAAA,CAAA2F,iBAAiB,CAACC,WAAW,CAACV,UAAU,CAACnB,GAAG,CAAC;MAE7C;MAAA;MAAAlG,cAAA,GAAAoB,CAAA;MACAgB,QAAA,CAAA+B,MAAM,CAACgC,QAAQ,CAAC,aAAa,EAAE,2BAA2B,EAAE;QAC1DlB,KAAK;QACL2C,MAAM;QACN7E,OAAO,EAAEsE,UAAU,CAAC/B,QAAQ,CAACvC,OAAO;QACpCqD,cAAc,EAAE;OACjB,CAAC;MAEF;MAAA;MAAApG,cAAA,GAAAoB,CAAA;MACAgB,QAAA,CAAA+B,MAAM,CAACkC,KAAK,CAAC;QACXC,OAAO,EAAE,WAAWrB,KAAK,EAAE;QAC3BsB,SAAS,EAAE,gBAAgB;QAC3BC,KAAK,EAAE,QAAQ;QACfC,QAAQ,EAAE,OAAOxB,KAAK,EAAE;QACxByB,MAAM,EAAE,QAAQ;QAChBC,MAAM,EAAE,SAAS;QACjBC,SAAS,EAAE,IAAIpB,IAAI,EAAE;QACrBqB,SAAS,EAAE;UAAEe;QAAM;OACpB,CAAC;IAEJ,CAAC,CAAC,OAAOhD,KAAK,EAAE;MAAA;MAAA5E,cAAA,GAAAoB,CAAA;MACdgB,QAAA,CAAA+B,MAAM,CAACS,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAAC;MAAA5E,cAAA,GAAAoB,CAAA;MAChD,MAAM,IAAIyD,KAAK,CAAC,oCAAoC,CAAC;IACvD;EACF;EAEA;;;;;;;EAOO,MAAMmD,QAAQA,CAACjF,OAAiB;IAAA;IAAA/C,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IACrC,IAAI;MACF,MAAM6G,QAAQ;MAAA;MAAA,CAAAjI,cAAA,GAAAoB,CAAA,QAAGc,OAAO,CAAC,IAAI,CAAC,CAACgG,WAAW,CAAC,IAAI,CAACvF,cAAc,CAAC,CAC5DwF,MAAM,CAAE3G,IAAY,IAAK;QAAA;QAAAxB,cAAA,GAAAqB,CAAA;QAAArB,cAAA,GAAAoB,CAAA;QAAA,OAAAI,IAAI,CAAC4G,QAAQ,CAAC,MAAM,CAAC;MAAD,CAAC,CAAC;MAElD,MAAMC,IAAI;MAAA;MAAA,CAAArI,cAAA,GAAAoB,CAAA,QAAkB,EAAE;MAAC;MAAApB,cAAA,GAAAoB,CAAA;MAE/B,KAAK,MAAMI,IAAI,IAAIyG,QAAQ,EAAE;QAAA;QAAAjI,cAAA,GAAAoB,CAAA;QAC3B,IAAI;UACF,MAAM8F,OAAO;UAAA;UAAA,CAAAlH,cAAA,GAAAoB,CAAA,QAAG,MAAM,IAAI,CAAC+F,OAAO,CAAC3F,IAAI,CAAC8G,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;UAAC;UAAAtI,cAAA,GAAAoB,CAAA;UAC7D;UAAI;UAAA,CAAApB,cAAA,GAAAsB,CAAA,WAAA4F,OAAO;UAAK;UAAA,CAAAlH,cAAA,GAAAsB,CAAA,YAACyB,OAAO;UAAA;UAAA,CAAA/C,cAAA,GAAAsB,CAAA,WAAI4F,OAAO,CAAC5B,QAAQ,CAACvC,OAAO,KAAKA,OAAO,EAAC,EAAE;YAAA;YAAA/C,cAAA,GAAAsB,CAAA;YAAAtB,cAAA,GAAAoB,CAAA;YACjEiH,IAAI,CAACE,IAAI,CAACrB,OAAO,CAAC5B,QAAQ,CAAC;UAC7B,CAAC;UAAA;UAAA;YAAAtF,cAAA,GAAAsB,CAAA;UAAA;QACH,CAAC,CAAC,OAAOsD,KAAK,EAAE;UAAA;UAAA5E,cAAA,GAAAoB,CAAA;UACdgB,QAAA,CAAA+B,MAAM,CAACK,IAAI,CAAC,gCAAgC,EAAE;YAAEhD,IAAI;YAAEoD;UAAK,CAAE,CAAC;QAChE;MACF;MAAC;MAAA5E,cAAA,GAAAoB,CAAA;MAED,OAAOiH,IAAI,CAACG,IAAI,CAAC,CAACC,CAAC,EAAEnH,CAAC,KAAK;QAAA;QAAAtB,cAAA,GAAAqB,CAAA;QAAArB,cAAA,GAAAoB,CAAA;QAAA,OAAAE,CAAC,CAACiE,SAAS,CAACmD,OAAO,EAAE,GAAGD,CAAC,CAAClD,SAAS,CAACmD,OAAO,EAAE;MAAF,CAAE,CAAC;IAE3E,CAAC,CAAC,OAAO9D,KAAK,EAAE;MAAA;MAAA5E,cAAA,GAAAoB,CAAA;MACdgB,QAAA,CAAA+B,MAAM,CAACS,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAAC;MAAA5E,cAAA,GAAAoB,CAAA;MAC9C,MAAM,IAAIyD,KAAK,CAAC,mCAAmC,CAAC;IACtD;EACF;EAEA;;;;;;EAMO,MAAM8D,oBAAoBA,CAAA;IAAA;IAAA3I,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IAC/B,IAAI;MACF,MAAMwH,OAAO;MAAA;MAAA,CAAA5I,cAAA,GAAAoB,CAAA,SAAG,MAAM,IAAI,CAAC4G,QAAQ,EAAE;MACrC,MAAMa,mBAAmB;MAAA;MAAA,CAAA7I,cAAA,GAAAoB,CAAA,SAAkB,EAAE;MAAC;MAAApB,cAAA,GAAAoB,CAAA;MAE9C,KAAK,MAAM0H,WAAW,IAAIF,OAAO,EAAE;QAAA;QAAA5I,cAAA,GAAAoB,CAAA;QACjC,IAAI0H,WAAW,CAACrD,MAAM,KAAKhD,SAAS,CAACiD,MAAM,EAAE;UAAA;UAAA1F,cAAA,GAAAsB,CAAA;UAAAtB,cAAA,GAAAoB,CAAA;UAC3C;QACF,CAAC;QAAA;QAAA;UAAApB,cAAA,GAAAsB,CAAA;QAAA;QAED,MAAMsE,MAAM;QAAA;QAAA,CAAA5F,cAAA,GAAAoB,CAAA,SAAG,IAAI,CAACyE,iBAAiB,CAACiD,WAAW,CAAC/F,OAAO,CAAC;QAAC;QAAA/C,cAAA,GAAAoB,CAAA;QAC3D,IAAI,CAACwE,MAAM,EAAE;UAAA;UAAA5F,cAAA,GAAAsB,CAAA;UAAAtB,cAAA,GAAAoB,CAAA;UACX;QACF,CAAC;QAAA;QAAA;UAAApB,cAAA,GAAAsB,CAAA;QAAA;QAED,MAAMyE,GAAG;QAAA;QAAA,CAAA/F,cAAA,GAAAoB,CAAA,SAAGoE,IAAI,CAACO,GAAG,EAAE;QACtB,MAAMgD,MAAM;QAAA;QAAA,CAAA/I,cAAA,GAAAoB,CAAA,SAAG2E,GAAG,GAAG+C,WAAW,CAACvD,SAAS,CAACmD,OAAO,EAAE;QACpD,MAAMM,YAAY;QAAA;QAAA,CAAAhJ,cAAA,GAAAoB,CAAA;QAAG;QAAA,CAAApB,cAAA,GAAAsB,CAAA,WAAAwH,WAAW,CAACtB,WAAW,EAAEkB,OAAO,EAAE;QAAA;QAAA,CAAA1I,cAAA,GAAAsB,CAAA,WAAIwH,WAAW,CAACvD,SAAS,CAACmD,OAAO,EAAE;QAC1F,MAAMO,iBAAiB;QAAA;QAAA,CAAAjJ,cAAA,GAAAoB,CAAA,SAAG2E,GAAG,GAAGiD,YAAY;QAE5C;QACA,MAAME,aAAa;QAAA;QAAA,CAAAlJ,cAAA,GAAAoB,CAAA;QACjB;QAAA,CAAApB,cAAA,GAAAsB,CAAA,WAAAyH,MAAM,GAAGnD,MAAM,CAAC1C,MAAM;QAAA;QAAA,CAAAlD,cAAA,GAAAsB,CAAA,WACtB2H,iBAAiB,GAAGrD,MAAM,CAAC3C,gBAAgB;QAC1C;QAAA,CAAAjD,cAAA,GAAAsB,CAAA,WAAAsE,MAAM,CAACtC,QAAQ;QAAA;QAAA,CAAAtD,cAAA,GAAAsB,CAAA,WAAIwH,WAAW,CAACnD,UAAU,GAAGC,MAAM,CAACtC,QAAQ,CAAC;QAC5D;QAAA,CAAAtD,cAAA,GAAAsB,CAAA,WAAAwH,WAAW,CAAChD,YAAY;QAAA;QAAA,CAAA9F,cAAA,GAAAsB,CAAA,WAAIyE,GAAG,GAAG+C,WAAW,CAAChD,YAAY,CAAC4C,OAAO,EAAE,CAAC;QAAC;QAAA1I,cAAA,GAAAoB,CAAA;QAEzE,IAAI8H,aAAa,EAAE;UAAA;UAAAlJ,cAAA,GAAAsB,CAAA;UAAAtB,cAAA,GAAAoB,CAAA;UACjB0H,WAAW,CAACrD,MAAM,GAAGhD,SAAS,CAAC0G,gBAAgB;UAAC;UAAAnJ,cAAA,GAAAoB,CAAA;UAChD,MAAM,IAAI,CAAC6F,iBAAiB,CAAC6B,WAAW,CAAC7D,KAAK,EAAE6D,WAAW,CAAC;UAAC;UAAA9I,cAAA,GAAAoB,CAAA;UAC7DyH,mBAAmB,CAACN,IAAI,CAACO,WAAW,CAAC;QACvC,CAAC;QAAA;QAAA;UAAA9I,cAAA,GAAAsB,CAAA;QAAA;MACH;MAAC;MAAAtB,cAAA,GAAAoB,CAAA;MAED,OAAOyH,mBAAmB;IAE5B,CAAC,CAAC,OAAOjE,KAAK,EAAE;MAAA;MAAA5E,cAAA,GAAAoB,CAAA;MACdgB,QAAA,CAAA+B,MAAM,CAACS,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;MAAC;MAAA5E,cAAA,GAAAoB,CAAA;MAC5D,MAAM,IAAIyD,KAAK,CAAC,qCAAqC,CAAC;IACxD;EACF;EAEA;;;;;;;;EAQQ,MAAMmB,QAAQA,CAACf,KAAa,EAAEG,SAAiB,EAAEE,QAAqB;IAAA;IAAAtF,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IAC5E,IAAI;MACF;MACA,MAAMgI,YAAY;MAAA;MAAA,CAAApJ,cAAA,GAAAoB,CAAA,SAAG,MAAMe,oBAAA,CAAA2F,iBAAiB,CAACuB,WAAW,CAACjE,SAAS,CAACV,QAAQ,CAAC,KAAK,CAAC,CAAC;MAEnF;MACA,MAAM4E,aAAa;MAAA;MAAA,CAAAtJ,cAAA,GAAAoB,CAAA,SAAG,IAAAa,QAAA,CAAAsH,UAAU,EAAC,QAAQ,CAAC,CACvCC,MAAM,CAACpE,SAAS,CAAC,CACjBoE,MAAM,CAACC,IAAI,CAACC,SAAS,CAACpE,QAAQ,CAAC,CAAC,CAChCqE,MAAM,CAAC,KAAK,CAAC;MAEhB;MACA,MAAMC,YAAY;MAAA;MAAA,CAAA5J,cAAA,GAAAoB,CAAA,SAAoB;QACpCkE,QAAQ;QACR8D,YAAY;QACZE,aAAa;QACbO,QAAQ,EAAE,IAAIrE,IAAI;OACnB;MAED;MACA,MAAMsE,WAAW;MAAA;MAAA,CAAA9J,cAAA,GAAAoB,CAAA,SAAG,IAAAkB,MAAA,CAAAoB,OAAO,EAAC,IAAI,CAACf,cAAc,EAAE,GAAGsC,KAAK,MAAM,CAAC;MAAC;MAAAjF,cAAA,GAAAoB,CAAA;MACjE,IAAAiB,IAAA,CAAA0H,aAAa,EAACD,WAAW,EAAEL,IAAI,CAACC,SAAS,CAACE,YAAY,CAAC,EAAE;QAAE1F,IAAI,EAAE;MAAK,CAAE,CAAC;IAE3E,CAAC,CAAC,OAAOU,KAAK,EAAE;MAAA;MAAA5E,cAAA,GAAAoB,CAAA;MACdgB,QAAA,CAAA+B,MAAM,CAACS,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAAC;MAAA5E,cAAA,GAAAoB,CAAA;MAC9C,MAAM,IAAIyD,KAAK,CAAC,oBAAoB,CAAC;IACvC;EACF;EAEA;;;;;;;EAOQ,MAAMsC,OAAOA,CAAClC,KAAa;IAAA;IAAAjF,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IACjC,IAAI;MACF,MAAM0I,WAAW;MAAA;MAAA,CAAA9J,cAAA,GAAAoB,CAAA,SAAG,IAAAkB,MAAA,CAAAoB,OAAO,EAAC,IAAI,CAACf,cAAc,EAAE,GAAGsC,KAAK,MAAM,CAAC;MAAC;MAAAjF,cAAA,GAAAoB,CAAA;MAEjE,IAAI,CAAC,IAAAiB,IAAA,CAAA0B,UAAU,EAAC+F,WAAW,CAAC,EAAE;QAAA;QAAA9J,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QAC5B,OAAO,IAAI;MACb,CAAC;MAAA;MAAA;QAAApB,cAAA,GAAAsB,CAAA;MAAA;MAED;MACA,MAAM0I,WAAW;MAAA;MAAA,CAAAhK,cAAA,GAAAoB,CAAA,SAAG,IAAAiB,IAAA,CAAA4H,YAAY,EAACH,WAAW,EAAE,MAAM,CAAC;MACrD,MAAMF,YAAY;MAAA;MAAA,CAAA5J,cAAA,GAAAoB,CAAA,SAAoBqI,IAAI,CAACS,KAAK,CAACF,WAAW,CAAC;MAE7D;MACA,MAAMG,MAAM;MAAA;MAAA,CAAAnK,cAAA,GAAAoB,CAAA,SAAG,MAAMe,oBAAA,CAAA2F,iBAAiB,CAACsC,WAAW,CAACR,YAAY,CAACR,YAAY,CAAC;MAC7E,MAAMhE,SAAS;MAAA;MAAA,CAAApF,cAAA,GAAAoB,CAAA,SAAGiJ,MAAM,CAACC,IAAI,CAACH,MAAM,EAAE,KAAK,CAAC;MAE5C;MACA,MAAMI,YAAY;MAAA;MAAA,CAAAvK,cAAA,GAAAoB,CAAA,SAAG,IAAAa,QAAA,CAAAsH,UAAU,EAAC,QAAQ,CAAC,CACtCC,MAAM,CAACpE,SAAS,CAAC,CACjBoE,MAAM,CAACC,IAAI,CAACC,SAAS,CAACE,YAAY,CAACtE,QAAQ,CAAC,CAAC,CAC7CqE,MAAM,CAAC,KAAK,CAAC;MAAC;MAAA3J,cAAA,GAAAoB,CAAA;MAEjB,IAAI,CAAC,IAAAa,QAAA,CAAAuI,eAAe,EAACH,MAAM,CAACC,IAAI,CAACV,YAAY,CAACN,aAAa,EAAE,KAAK,CAAC,EAAEe,MAAM,CAACC,IAAI,CAACC,YAAY,EAAE,KAAK,CAAC,CAAC,EAAE;QAAA;QAAAvK,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACtG,MAAM,IAAIyD,KAAK,CAAC,mCAAmC,CAAC;MACtD,CAAC;MAAA;MAAA;QAAA7E,cAAA,GAAAsB,CAAA;MAAA;MAAAtB,cAAA,GAAAoB,CAAA;MAED,OAAO;QACL8E,GAAG,EAAEd,SAAS;QACdE,QAAQ,EAAEsE,YAAY,CAACtE;OACxB;IAEH,CAAC,CAAC,OAAOV,KAAK,EAAE;MAAA;MAAA5E,cAAA,GAAAoB,CAAA;MACdgB,QAAA,CAAA+B,MAAM,CAACS,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAAC;MAAA5E,cAAA,GAAAoB,CAAA;MAC7C,MAAM,IAAIyD,KAAK,CAAC,oBAAoB,CAAC;IACvC;EACF;EAEA;;;;;;;EAOQ,MAAMoC,iBAAiBA,CAAChC,KAAa,EAAEK,QAAqB;IAAA;IAAAtF,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IAClE,IAAI;MACF,MAAM8F,OAAO;MAAA;MAAA,CAAAlH,cAAA,GAAAoB,CAAA,SAAG,MAAM,IAAI,CAAC+F,OAAO,CAAClC,KAAK,CAAC;MAAC;MAAAjF,cAAA,GAAAoB,CAAA;MAC1C,IAAI,CAAC8F,OAAO,EAAE;QAAA;QAAAlH,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACZ,MAAM,IAAIyD,KAAK,CAAC,kBAAkBI,KAAK,EAAE,CAAC;MAC5C,CAAC;MAAA;MAAA;QAAAjF,cAAA,GAAAsB,CAAA;MAAA;MAED;MAAAtB,cAAA,GAAAoB,CAAA;MACA,MAAM,IAAI,CAAC4E,QAAQ,CAACf,KAAK,EAAEiC,OAAO,CAAChB,GAAG,EAAEZ,QAAQ,CAAC;MAEjD;MACA,MAAMyB,MAAM;MAAA;MAAA,CAAA/G,cAAA,GAAAoB,CAAA,SAAG,IAAI,CAACwB,QAAQ,CAACoE,GAAG,CAAC/B,KAAK,CAAC;MAAC;MAAAjF,cAAA,GAAAoB,CAAA;MACxC,IAAI2F,MAAM,EAAE;QAAA;QAAA/G,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACV2F,MAAM,CAACzB,QAAQ,GAAGA,QAAQ;MAC5B,CAAC;MAAA;MAAA;QAAAtF,cAAA,GAAAsB,CAAA;MAAA;IAEH,CAAC,CAAC,OAAOsD,KAAK,EAAE;MAAA;MAAA5E,cAAA,GAAAoB,CAAA;MACdgB,QAAA,CAAA+B,MAAM,CAACS,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MAAC;MAAA5E,cAAA,GAAAoB,CAAA;MACxD,MAAM,IAAIyD,KAAK,CAAC,4BAA4B,CAAC;IAC/C;EACF;EAEA;;;;;;;EAOQK,aAAaA,CAACnC,OAAgB;IAAA;IAAA/C,cAAA,GAAAqB,CAAA;IACpC,MAAMuF,SAAS;IAAA;IAAA,CAAA5G,cAAA,GAAAoB,CAAA,SAAGoE,IAAI,CAACO,GAAG,EAAE,CAACrB,QAAQ,CAAC,EAAE,CAAC;IACzC,MAAM+F,MAAM;IAAA;IAAA,CAAAzK,cAAA,GAAAoB,CAAA,SAAG,IAAAa,QAAA,CAAAoD,WAAW,EAAC,CAAC,CAAC,CAACX,QAAQ,CAAC,KAAK,CAAC;IAAC;IAAA1E,cAAA,GAAAoB,CAAA;IAC9C,OAAO,GAAG2B,OAAO,IAAI6D,SAAS,IAAI6D,MAAM,EAAE;EAC5C;EAEA;;;;;;;EAOQ5E,iBAAiBA,CAAC9C,OAAgB;IAAA;IAAA/C,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IACxC,OAAO,2BAAApB,cAAA,GAAAsB,CAAA,WAAAoB,UAAU,CAACI,yBAAyB,CAAC4H,IAAI,CAAC9E,MAAM,IAAI;MAAA;MAAA5F,cAAA,GAAAqB,CAAA;MAAArB,cAAA,GAAAoB,CAAA;MAAA,OAAAwE,MAAM,CAAC7C,OAAO,KAAKA,OAAO;IAAP,CAAO,CAAC;IAAA;IAAA,CAAA/C,cAAA,GAAAsB,CAAA,WAAI,IAAI;EAChG;EAEA;;;;EAIQwC,0BAA0BA,CAAA;IAAA;IAAA9D,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IAChC;IACAuJ,WAAW,CAAC,YAAW;MAAA;MAAA3K,cAAA,GAAAqB,CAAA;MAAArB,cAAA,GAAAoB,CAAA;MACrB,IAAI;QACF,MAAMyH,mBAAmB;QAAA;QAAA,CAAA7I,cAAA,GAAAoB,CAAA,SAAG,MAAM,IAAI,CAACuH,oBAAoB,EAAE;QAAC;QAAA3I,cAAA,GAAAoB,CAAA;QAE9D,IAAIyH,mBAAmB,CAAC+B,MAAM,GAAG,CAAC,EAAE;UAAA;UAAA5K,cAAA,GAAAsB,CAAA;UAAAtB,cAAA,GAAAoB,CAAA;UAClCgB,QAAA,CAAA+B,MAAM,CAACK,IAAI,CAAC,qCAAqC,EAAE;YACjDqG,KAAK,EAAEhC,mBAAmB,CAAC+B,MAAM;YACjCvC,IAAI,EAAEQ,mBAAmB,CAACiC,GAAG,CAACC,CAAC,IAAK;cAAA;cAAA/K,cAAA,GAAAqB,CAAA;cAAArB,cAAA,GAAAoB,CAAA;cAAA;gBAAE6D,KAAK,EAAE8F,CAAC,CAAC9F,KAAK;gBAAElC,OAAO,EAAEgI,CAAC,CAAChI;cAAO,CAAE;YAAF,CAAG;WAC5E,CAAC;UAEF;UAAA;UAAA/C,cAAA,GAAAoB,CAAA;UACA,KAAK,MAAM0H,WAAW,IAAID,mBAAmB,EAAE;YAAA;YAAA7I,cAAA,GAAAoB,CAAA;YAC7C,IAAI0H,WAAW,CAAC/F,OAAO,KAAKR,OAAO,CAACS,MAAM,EAAE;cAAA;cAAAhD,cAAA,GAAAsB,CAAA;cAAAtB,cAAA,GAAAoB,CAAA;cAC1C,IAAI;gBAAA;gBAAApB,cAAA,GAAAoB,CAAA;gBACF,MAAM,IAAI,CAACgG,SAAS,CAAC0B,WAAW,CAAC7D,KAAK,CAAC;gBAAC;gBAAAjF,cAAA,GAAAoB,CAAA;gBACxCgB,QAAA,CAAA+B,MAAM,CAACC,IAAI,CAAC,8BAA8B,EAAE;kBAAEa,KAAK,EAAE6D,WAAW,CAAC7D;gBAAK,CAAE,CAAC;cAC3E,CAAC,CAAC,OAAOL,KAAK,EAAE;gBAAA;gBAAA5E,cAAA,GAAAoB,CAAA;gBACdgB,QAAA,CAAA+B,MAAM,CAACS,KAAK,CAAC,iCAAiC,EAAE;kBAAEK,KAAK,EAAE6D,WAAW,CAAC7D,KAAK;kBAAEL;gBAAK,CAAE,CAAC;cACtF;YACF,CAAC;YAAA;YAAA;cAAA5E,cAAA,GAAAsB,CAAA;YAAA;UACH;QACF,CAAC;QAAA;QAAA;UAAAtB,cAAA,GAAAsB,CAAA;QAAA;MAEH,CAAC,CAAC,OAAOsD,KAAK,EAAE;QAAA;QAAA5E,cAAA,GAAAoB,CAAA;QACdgB,QAAA,CAAA+B,MAAM,CAACS,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MACzD;IACF,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;EACtB;EAEA;;;;;;EAMO,MAAMoG,SAASA,CAAA;IAAA;IAAAhL,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IAQpB,IAAI;MACF,MAAMwH,OAAO;MAAA;MAAA,CAAA5I,cAAA,GAAAoB,CAAA,SAAG,MAAM,IAAI,CAAC4G,QAAQ,EAAE;MACrC,MAAMa,mBAAmB;MAAA;MAAA,CAAA7I,cAAA,GAAAoB,CAAA,SAAG,MAAM,IAAI,CAACuH,oBAAoB,EAAE;MAE7D,MAAMsC,UAAU;MAAA;MAAA,CAAAjL,cAAA,GAAAoB,CAAA,SAA2B,EAAE;MAC7C,MAAM8J,YAAY;MAAA;MAAA,CAAAlL,cAAA,GAAAoB,CAAA,SAA2B,EAAE;MAAC;MAAApB,cAAA,GAAAoB,CAAA;MAEhD,KAAK,MAAM8E,GAAG,IAAI0C,OAAO,EAAE;QAAA;QAAA5I,cAAA,GAAAoB,CAAA;QACzB6J,UAAU,CAAC/E,GAAG,CAACnD,OAAO,CAAC,GAAG;QAAC;QAAA,CAAA/C,cAAA,GAAAsB,CAAA,WAAA2J,UAAU,CAAC/E,GAAG,CAACnD,OAAO,CAAC;QAAA;QAAA,CAAA/C,cAAA,GAAAsB,CAAA,WAAI,CAAC,KAAI,CAAC;QAAC;QAAAtB,cAAA,GAAAoB,CAAA;QAC7D8J,YAAY,CAAChF,GAAG,CAACT,MAAM,CAAC,GAAG;QAAC;QAAA,CAAAzF,cAAA,GAAAsB,CAAA,WAAA4J,YAAY,CAAChF,GAAG,CAACT,MAAM,CAAC;QAAA;QAAA,CAAAzF,cAAA,GAAAsB,CAAA,WAAI,CAAC,KAAI,CAAC;MAChE;MAAC;MAAAtB,cAAA,GAAAoB,CAAA;MAED,OAAO;QACL+J,SAAS,EAAEvC,OAAO,CAACgC,MAAM;QACzBK,UAAU;QACVC,YAAY;QACZE,SAAS,EAAE,IAAI,CAACxI,QAAQ,CAACyI,IAAI;QAC7BxC,mBAAmB,EAAEA,mBAAmB,CAAC+B,MAAM;QAC/ChE,SAAS,EAAEpB,IAAI,CAACO,GAAG;OACpB;IAEH,CAAC,CAAC,OAAOnB,KAAK,EAAE;MAAA;MAAA5E,cAAA,GAAAoB,CAAA;MACdgB,QAAA,CAAA+B,MAAM,CAACS,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAAC;MAAA5E,cAAA,GAAAoB,CAAA;MAC3D,MAAM,IAAIyD,KAAK,CAAC,kCAAkC,CAAC;IACrD;EACF;;;;AA/kBFrC,OAAA,CAAAE,UAAA,GAAAA,UAAA;AAklBA;AAAA;AAAA1C,cAAA,GAAAoB,CAAA;AACaoB,OAAA,CAAA8I,UAAU,GAAG,IAAI5I,UAAU,EAAE;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]}