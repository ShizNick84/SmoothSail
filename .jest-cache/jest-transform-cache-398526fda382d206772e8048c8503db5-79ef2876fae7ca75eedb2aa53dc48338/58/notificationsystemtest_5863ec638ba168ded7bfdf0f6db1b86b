ae9cfb153ddebf5b69c5c1016c84d409
"use strict";
/**
 * =============================================================================
 * NOTIFICATION SYSTEM TESTS
 * =============================================================================
 *
 * Comprehensive test suite for the notification system of the AI crypto
 * trading agent. Tests all notification services, routing, and integration.
 *
 * @author AI Crypto Trading System
 * @version 1.0.0
 * =============================================================================
 */
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
// Mock the encryption service before importing notification modules
globals_1.jest.mock('@/security/encryption-service', () => {
    return {
        EncryptionService: globals_1.jest.fn().mockImplementation(() => ({
            encrypt: globals_1.jest.fn().mockResolvedValue('encrypted_data'),
            decrypt: globals_1.jest.fn().mockResolvedValue('decrypted_data'),
            initializeMasterKey: globals_1.jest.fn().mockResolvedValue(undefined),
            generateKey: globals_1.jest.fn().mockReturnValue('generated_key'),
            hashData: globals_1.jest.fn().mockReturnValue('hashed_data')
        }))
    };
});
// Mock nodemailer
globals_1.jest.mock('nodemailer', () => ({
    createTransporter: globals_1.jest.fn().mockReturnValue({
        verify: globals_1.jest.fn().mockResolvedValue(true),
        sendMail: globals_1.jest.fn().mockResolvedValue({ messageId: 'test_message_id' })
    })
}));
// Mock telegraf
globals_1.jest.mock('telegraf', () => ({
    Telegraf: globals_1.jest.fn().mockImplementation(() => ({
        launch: globals_1.jest.fn().mockResolvedValue(undefined),
        stop: globals_1.jest.fn(),
        telegram: {
            sendMessage: globals_1.jest.fn().mockResolvedValue({ message_id: 123 }),
            setMyCommands: globals_1.jest.fn().mockResolvedValue(undefined)
        },
        use: globals_1.jest.fn(),
        command: globals_1.jest.fn(),
        on: globals_1.jest.fn()
    })),
    Markup: {
        inlineKeyboard: globals_1.jest.fn(),
        button: globals_1.jest.fn()
    }
}));
// Mock environment variables BEFORE importing modules
process.env.SMTP_HOST = 'smtp.gmail.com';
process.env.SMTP_PORT = '587';
process.env.SMTP_USER = 'test@example.com';
process.env.SMTP_PASS = 'encrypted_password';
process.env.SMTP_FROM_ADDRESS = 'trading-agent@example.com';
process.env.SMTP_SECURE = 'true';
process.env.TELEGRAM_BOT_TOKEN = 'test_bot_token';
process.env.TELEGRAM_CHAT_ID = '123456789';
process.env.TELEGRAM_AUTHORIZED_USERS = '123456789,987654321';
process.env.TELEGRAM_ADMIN_USERS = '123456789';
process.env.NOTIFICATION_EMAIL = 'notifications@example.com';
process.env.MASTER_ENCRYPTION_KEY = 'test_master_key_for_testing_purposes_only_64_chars_minimum_length';
const notifications_1 = require("@/core/notifications");
(0, globals_1.describe)('Notification System', () => {
    let notificationManager;
    (0, globals_1.beforeEach)(async () => {
        // Mock external dependencies
        globals_1.jest.clearAllMocks();
    });
    (0, globals_1.afterEach)(async () => {
        if (notificationManager) {
            await notificationManager.stop();
        }
    });
    (0, globals_1.describe)('NotificationManager', () => {
        (0, globals_1.test)('should initialize with default configuration', async () => {
            notificationManager = new notifications_1.NotificationManager();
            // Mock the initialization to avoid actual network calls
            globals_1.jest.spyOn(notificationManager, 'initializeEmailService').mockResolvedValue(undefined);
            globals_1.jest.spyOn(notificationManager, 'initializeTelegramService').mockResolvedValue(undefined);
            globals_1.jest.spyOn(notificationManager, 'initializeNotificationRouter').mockResolvedValue(undefined);
            globals_1.jest.spyOn(notificationManager, 'initializeTradingNotifications').mockResolvedValue(undefined);
            globals_1.jest.spyOn(notificationManager, 'sendStartupNotification').mockResolvedValue(undefined);
            await notificationManager.initialize();
            const healthStatus = notificationManager.getHealthStatus();
            (0, globals_1.expect)(healthStatus.size).toBeGreaterThan(0);
        });
        (0, globals_1.test)('should handle trade execution notification', async () => {
            notificationManager = new notifications_1.NotificationManager();
            // Mock initialization
            globals_1.jest.spyOn(notificationManager, 'initializeEmailService').mockResolvedValue(undefined);
            globals_1.jest.spyOn(notificationManager, 'initializeTelegramService').mockResolvedValue(undefined);
            globals_1.jest.spyOn(notificationManager, 'initializeNotificationRouter').mockResolvedValue(undefined);
            globals_1.jest.spyOn(notificationManager, 'initializeTradingNotifications').mockResolvedValue(undefined);
            globals_1.jest.spyOn(notificationManager, 'sendStartupNotification').mockResolvedValue(undefined);
            await notificationManager.initialize();
            const tradeData = {
                tradeId: 'test_trade_123',
                symbol: 'BTC/USDT',
                action: 'BUY',
                quantity: 0.1,
                price: 45000,
                totalValue: 4500,
                fees: 4.5,
                pnl: 150,
                balance: 10000,
                strategy: 'MA Crossover',
                confidence: 0.85,
                riskReward: 2.5,
                timestamp: new Date(),
                executionTime: 250
            };
            // Mock the trading notifications service
            const mockNotifyTradeExecution = globals_1.jest.fn().mockResolvedValue(undefined);
            notificationManager.tradingNotifications = {
                notifyTradeExecution: mockNotifyTradeExecution
            };
            await notificationManager.notifyTradeExecution(tradeData);
            (0, globals_1.expect)(mockNotifyTradeExecution).toHaveBeenCalledWith(tradeData);
        });
        (0, globals_1.test)('should handle security alerts', async () => {
            notificationManager = new notifications_1.NotificationManager();
            // Mock initialization
            globals_1.jest.spyOn(notificationManager, 'initializeEmailService').mockResolvedValue(undefined);
            globals_1.jest.spyOn(notificationManager, 'initializeTelegramService').mockResolvedValue(undefined);
            globals_1.jest.spyOn(notificationManager, 'initializeNotificationRouter').mockResolvedValue(undefined);
            globals_1.jest.spyOn(notificationManager, 'initializeTradingNotifications').mockResolvedValue(undefined);
            globals_1.jest.spyOn(notificationManager, 'sendStartupNotification').mockResolvedValue(undefined);
            await notificationManager.initialize();
            const securityData = {
                threatLevel: 'HIGH',
                incidentType: 'Unauthorized Access Attempt',
                description: 'Multiple failed login attempts detected',
                affectedSystems: ['Trading Engine', 'API Gateway']
            };
            // Mock the notification router
            const mockSendSecurityAlert = globals_1.jest.fn().mockResolvedValue([]);
            notificationManager.notificationRouter = {
                sendSecurityAlert: mockSendSecurityAlert
            };
            await notificationManager.sendSecurityAlert(securityData);
            (0, globals_1.expect)(mockSendSecurityAlert).toHaveBeenCalledWith(securityData);
        });
        (0, globals_1.test)('should provide health statistics', async () => {
            notificationManager = new notifications_1.NotificationManager();
            // Mock initialization
            globals_1.jest.spyOn(notificationManager, 'initializeEmailService').mockResolvedValue(undefined);
            globals_1.jest.spyOn(notificationManager, 'initializeTelegramService').mockResolvedValue(undefined);
            globals_1.jest.spyOn(notificationManager, 'initializeNotificationRouter').mockResolvedValue(undefined);
            globals_1.jest.spyOn(notificationManager, 'initializeTradingNotifications').mockResolvedValue(undefined);
            globals_1.jest.spyOn(notificationManager, 'sendStartupNotification').mockResolvedValue(undefined);
            await notificationManager.initialize();
            const statistics = notificationManager.getStatistics();
            (0, globals_1.expect)(statistics).toHaveProperty('services');
            (0, globals_1.expect)(statistics).toHaveProperty('overallHealth');
            (0, globals_1.expect)(statistics).toHaveProperty('lastHealthCheck');
            (0, globals_1.expect)(typeof statistics.overallHealth).toBe('boolean');
        });
    });
    (0, globals_1.describe)('EmailService', () => {
        (0, globals_1.test)('should validate SMTP configuration', () => {
            const emailService = new notifications_1.EmailService();
            // Test that required environment variables are checked
            (0, globals_1.expect)(process.env.SMTP_HOST).toBeDefined();
            (0, globals_1.expect)(process.env.SMTP_PORT).toBeDefined();
            (0, globals_1.expect)(process.env.SMTP_USER).toBeDefined();
            (0, globals_1.expect)(process.env.SMTP_PASS).toBeDefined();
            (0, globals_1.expect)(process.env.SMTP_FROM_ADDRESS).toBeDefined();
        });
        (0, globals_1.test)('should generate email content from templates', async () => {
            const emailService = new notifications_1.EmailService();
            // Mock the template system
            const mockGenerateEmailContent = globals_1.jest.fn().mockResolvedValue('<html>Test Email</html>');
            emailService.generateEmailContent = mockGenerateEmailContent;
            const notification = {
                id: 'test_email_123',
                type: notifications_1.EmailNotificationType.TRADE_EXECUTION,
                priority: 'high',
                to: ['test@example.com'],
                subject: 'Test Trade Notification',
                templateData: {
                    systemName: 'AI Crypto Trading Agent',
                    timestamp: new Date().toISOString(),
                    symbol: 'BTC/USDT',
                    action: 'BUY',
                    quantity: 0.1,
                    price: 45000
                },
                timestamp: new Date()
            };
            await mockGenerateEmailContent(notification);
            (0, globals_1.expect)(mockGenerateEmailContent).toHaveBeenCalledWith(notification);
        });
    });
    (0, globals_1.describe)('TelegramService', () => {
        (0, globals_1.test)('should format trading messages with emojis', () => {
            const telegramService = new notifications_1.TelegramService();
            const tradeData = {
                symbol: 'BTC/USDT',
                action: 'BUY',
                quantity: 0.1,
                price: 45000,
                pnl: 150,
                balance: 10000,
                strategy: 'MA Crossover',
                timestamp: new Date()
            };
            // Test message formatting logic
            const emoji = tradeData.action === 'BUY' ? '🟢' : '🔴';
            const actionEmoji = tradeData.action === 'BUY' ? '📈' : '📉';
            const pnlEmoji = (tradeData.pnl || 0) >= 0 ? '💰' : '📉';
            (0, globals_1.expect)(emoji).toBe('🟢');
            (0, globals_1.expect)(actionEmoji).toBe('📈');
            (0, globals_1.expect)(pnlEmoji).toBe('💰');
        });
        (0, globals_1.test)('should validate authorized users', () => {
            const telegramService = new notifications_1.TelegramService();
            // Test that authorized users are loaded from environment
            (0, globals_1.expect)(process.env.TELEGRAM_AUTHORIZED_USERS).toBeDefined();
            (0, globals_1.expect)(process.env.TELEGRAM_ADMIN_USERS).toBeDefined();
            const authorizedUsers = process.env.TELEGRAM_AUTHORIZED_USERS.split(',');
            const adminUsers = process.env.TELEGRAM_ADMIN_USERS.split(',');
            (0, globals_1.expect)(authorizedUsers.length).toBeGreaterThan(0);
            (0, globals_1.expect)(adminUsers.length).toBeGreaterThan(0);
        });
    });
    (0, globals_1.describe)('NotificationRouter', () => {
        (0, globals_1.test)('should route alerts based on priority and category', () => {
            const router = new notifications_1.NotificationRouter();
            const alert = {
                id: 'test_alert_123',
                category: notifications_1.AlertCategory.TRADING,
                priority: notifications_1.AlertPriority.HIGH,
                title: 'Test Trading Alert',
                message: 'This is a test trading alert',
                data: { symbol: 'BTC/USDT', action: 'BUY' },
                timestamp: new Date(),
                source: 'test',
                tags: ['test', 'trading']
            };
            // Test alert structure
            (0, globals_1.expect)(alert.category).toBe(notifications_1.AlertCategory.TRADING);
            (0, globals_1.expect)(alert.priority).toBe(notifications_1.AlertPriority.HIGH);
            (0, globals_1.expect)(alert.data).toHaveProperty('symbol');
            (0, globals_1.expect)(alert.data).toHaveProperty('action');
        });
        (0, globals_1.test)('should implement rate limiting', () => {
            const router = new notifications_1.NotificationRouter();
            const rateLimitRule = {
                enabled: true,
                maxPerMinute: 10,
                maxPerHour: 100,
                maxPerDay: 1000,
                windowMinutes: 60
            };
            // Test rate limit configuration
            (0, globals_1.expect)(rateLimitRule.enabled).toBe(true);
            (0, globals_1.expect)(rateLimitRule.maxPerMinute).toBe(10);
            (0, globals_1.expect)(rateLimitRule.maxPerHour).toBe(100);
            (0, globals_1.expect)(rateLimitRule.maxPerDay).toBe(1000);
        });
        (0, globals_1.test)('should handle alert deduplication', () => {
            const router = new notifications_1.NotificationRouter();
            const alert1 = {
                id: 'alert_1',
                category: notifications_1.AlertCategory.SYSTEM,
                priority: notifications_1.AlertPriority.NORMAL,
                title: 'High CPU Usage',
                message: 'CPU usage is at 85%',
                data: { cpu: 85 },
                timestamp: new Date(),
                source: 'system-monitor',
                tags: ['system', 'cpu']
            };
            const alert2 = {
                id: 'alert_2',
                category: notifications_1.AlertCategory.SYSTEM,
                priority: notifications_1.AlertPriority.NORMAL,
                title: 'High CPU Usage',
                message: 'CPU usage is at 85%',
                data: { cpu: 85 },
                timestamp: new Date(),
                source: 'system-monitor',
                tags: ['system', 'cpu']
            };
            // Test that alerts with same content should be deduplicated
            (0, globals_1.expect)(alert1.title).toBe(alert2.title);
            (0, globals_1.expect)(alert1.message).toBe(alert2.message);
            (0, globals_1.expect)(alert1.source).toBe(alert2.source);
        });
    });
    (0, globals_1.describe)('TradingNotifications', () => {
        (0, globals_1.test)('should format performance summary data', () => {
            const tradingNotifications = new notifications_1.TradingNotifications();
            const performanceData = {
                period: 'daily',
                startDate: new Date('2024-01-01'),
                endDate: new Date('2024-01-01'),
                totalTrades: 15,
                winningTrades: 10,
                losingTrades: 5,
                winRate: 66.7,
                totalPnL: 250.50,
                grossProfit: 400.75,
                grossLoss: -150.25,
                profitFactor: 2.67,
                sharpeRatio: 1.85,
                maxDrawdown: -75.25,
                maxDrawdownPercent: -2.5,
                bestTrade: 85.50,
                worstTrade: -45.25,
                averageWin: 40.08,
                averageLoss: -30.05,
                largestWinStreak: 4,
                largestLossStreak: 2,
                currentBalance: 10250.50,
                startingBalance: 10000.00,
                returnPercent: 2.51,
                tradingDays: 1,
                averageTradesPerDay: 15,
                strategies: [
                    {
                        name: 'MA Crossover',
                        trades: 8,
                        winRate: 75.0,
                        pnl: 180.25,
                        profitFactor: 3.2,
                        averageReturn: 22.53
                    },
                    {
                        name: 'RSI Momentum',
                        trades: 7,
                        winRate: 57.1,
                        pnl: 70.25,
                        profitFactor: 2.1,
                        averageReturn: 10.04
                    }
                ]
            };
            // Test performance data structure
            (0, globals_1.expect)(performanceData.totalTrades).toBe(15);
            (0, globals_1.expect)(performanceData.winRate).toBe(66.7);
            (0, globals_1.expect)(performanceData.totalPnL).toBe(250.50);
            (0, globals_1.expect)(performanceData.strategies.length).toBe(2);
            (0, globals_1.expect)(performanceData.strategies[0].name).toBe('MA Crossover');
        });
        (0, globals_1.test)('should handle system health data', () => {
            const tradingNotifications = new notifications_1.TradingNotifications();
            const healthData = {
                timestamp: new Date(),
                uptime: 86400, // 24 hours in seconds
                cpu: {
                    usage: 45.5,
                    temperature: 65.2,
                    frequency: 2800
                },
                memory: {
                    used: 8192,
                    available: 4096,
                    usagePercent: 66.7
                },
                disk: {
                    used: 128000,
                    available: 128000,
                    usagePercent: 50.0,
                    ioWait: 2.5
                },
                network: {
                    latency: 25,
                    throughput: 1000,
                    packetsLost: 0,
                    connectionStatus: 'connected'
                },
                trading: {
                    activePositions: 3,
                    dailyTrades: 12,
                    apiLatency: 150,
                    lastTradeTime: new Date()
                }
            };
            // Test system health data structure
            (0, globals_1.expect)(healthData.cpu.usage).toBe(45.5);
            (0, globals_1.expect)(healthData.memory.usagePercent).toBe(66.7);
            (0, globals_1.expect)(healthData.disk.usagePercent).toBe(50.0);
            (0, globals_1.expect)(healthData.network.connectionStatus).toBe('connected');
            (0, globals_1.expect)(healthData.trading.activePositions).toBe(3);
        });
    });
    (0, globals_1.describe)('Integration Tests', () => {
        (0, globals_1.test)('should handle complete notification flow', async () => {
            notificationManager = new notifications_1.NotificationManager({
                emailEnabled: true,
                telegramEnabled: true,
                routingEnabled: true,
                tradingNotificationsEnabled: true,
                healthCheckInterval: 1 // 1 minute for testing
            });
            // Mock all initialization methods
            globals_1.jest.spyOn(notificationManager, 'initializeEmailService').mockResolvedValue(undefined);
            globals_1.jest.spyOn(notificationManager, 'initializeTelegramService').mockResolvedValue(undefined);
            globals_1.jest.spyOn(notificationManager, 'initializeNotificationRouter').mockResolvedValue(undefined);
            globals_1.jest.spyOn(notificationManager, 'initializeTradingNotifications').mockResolvedValue(undefined);
            globals_1.jest.spyOn(notificationManager, 'sendStartupNotification').mockResolvedValue(undefined);
            await notificationManager.initialize();
            // Test trade execution flow
            const tradeData = {
                tradeId: 'integration_test_123',
                symbol: 'ETH/USDT',
                action: 'SELL',
                quantity: 2.5,
                price: 2800,
                totalValue: 7000,
                fees: 7.0,
                pnl: -50,
                balance: 9950,
                strategy: 'RSI Divergence',
                confidence: 0.72,
                riskReward: 1.8,
                timestamp: new Date(),
                executionTime: 180
            };
            // Mock the trading notifications
            const mockNotifyTradeExecution = globals_1.jest.fn().mockResolvedValue(undefined);
            notificationManager.tradingNotifications = {
                notifyTradeExecution: mockNotifyTradeExecution
            };
            await notificationManager.notifyTradeExecution(tradeData);
            (0, globals_1.expect)(mockNotifyTradeExecution).toHaveBeenCalledWith(tradeData);
            // Test statistics
            const statistics = notificationManager.getStatistics();
            (0, globals_1.expect)(statistics).toHaveProperty('services');
            (0, globals_1.expect)(statistics).toHaveProperty('overallHealth');
        });
        (0, globals_1.test)('should handle error scenarios gracefully', async () => {
            notificationManager = new notifications_1.NotificationManager();
            // Mock initialization with some failures
            globals_1.jest.spyOn(notificationManager, 'initializeEmailService').mockRejectedValue(new Error('Email service failed'));
            globals_1.jest.spyOn(notificationManager, 'initializeTelegramService').mockResolvedValue(undefined);
            globals_1.jest.spyOn(notificationManager, 'initializeNotificationRouter').mockResolvedValue(undefined);
            globals_1.jest.spyOn(notificationManager, 'initializeTradingNotifications').mockResolvedValue(undefined);
            // Should throw error due to email service failure
            await (0, globals_1.expect)(notificationManager.initialize()).rejects.toThrow('Email service failed');
        });
    });
});
(0, globals_1.describe)('Notification System Environment Validation', () => {
    (0, globals_1.test)('should validate required environment variables', () => {
        const requiredVars = [
            'SMTP_HOST',
            'SMTP_PORT',
            'SMTP_USER',
            'SMTP_PASS',
            'SMTP_FROM_ADDRESS',
            'TELEGRAM_BOT_TOKEN',
            'TELEGRAM_CHAT_ID',
            'NOTIFICATION_EMAIL'
        ];
        for (const varName of requiredVars) {
            (0, globals_1.expect)(process.env[varName]).toBeDefined();
        }
    });
    (0, globals_1.test)('should validate email configuration format', () => {
        (0, globals_1.expect)(process.env.SMTP_PORT).toMatch(/^\d+$/);
        (0, globals_1.expect)(process.env.SMTP_FROM_ADDRESS).toMatch(/^[^\s@]+@[^\s@]+\.[^\s@]+$/);
        (0, globals_1.expect)(process.env.NOTIFICATION_EMAIL).toMatch(/^[^\s@]+@[^\s@]+\.[^\s@]+$/);
    });
    (0, globals_1.test)('should validate Telegram configuration format', () => {
        (0, globals_1.expect)(process.env.TELEGRAM_CHAT_ID).toMatch(/^\d+$/);
        (0, globals_1.expect)(process.env.TELEGRAM_AUTHORIZED_USERS).toMatch(/^\d+(,\d+)*$/);
        (0, globals_1.expect)(process.env.TELEGRAM_ADMIN_USERS).toMatch(/^\d+(,\d+)*$/);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,