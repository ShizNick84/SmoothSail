{"version":3,"names":["cov_8jz5m8s9d","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","MovingAverageStrategy","defaultFastPeriod","defaultSlowPeriod","volumeConfirmationThreshold","calculateSMA","prices","period","length","sum","slice","reduce","acc","price","calculateEMA","multiplier","ema","i","calculateEMACrossover","marketData","fastPeriod","slowPeriod","map","data","close","fastEMA","slowEMA","detectCrossover","Math","max","currentData","previousData","current","previous","crossoverType","strength","calculateCrossoverStrength","volumeConfirmed","isVolumeConfirmed","latestData","value","timestamp","parameters","crossover","direction","separation","abs","averagePrice","separationPercentage","min","round","currentVolume","volume","averageVolume","generateSignal","signalType","confidence","riskReward","calculateRiskReward","id","Date","now","random","toString","substr","symbol","indicators","reasoning","generateReasoning","metadata","currentPrice","recentHigh","d","high","recentLow","low","target","stopLoss","reward","risk","volumeText","evaluateSignalConfidence","signal","technical","recentPrices","momentum","calculateMomentumScore","overall","factors","priceChange","expectedDirection","alignment","exports"],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\strategies\\moving-average.ts"],"sourcesContent":["/**\r\n * Moving Average Strategy Implementation\r\n * \r\n * This module implements Simple Moving Average (SMA) and Exponential Moving Average (EMA)\r\n * calculations with crossover signal detection and volume confirmation.\r\n * \r\n * Requirements: 4.1, 4.8 - Moving average crossover with configurable periods and signal strength\r\n */\r\n\r\nimport { MarketData, MovingAverageSignal, TradingSignal, SignalConfidence } from './types';\r\n\r\nexport class MovingAverageStrategy {\r\n  private readonly defaultFastPeriod = 20;\r\n  private readonly defaultSlowPeriod = 50;\r\n  private readonly volumeConfirmationThreshold = 1.5; // 50% above average volume\r\n\r\n  /**\r\n   * Calculate Simple Moving Average (SMA)\r\n   * @param prices Array of price values\r\n   * @param period Number of periods for calculation\r\n   * @returns SMA value or null if insufficient data\r\n   */\r\n  public calculateSMA(prices: number[], period: number): number | null {\r\n    if (prices.length < period) {\r\n      return null;\r\n    }\r\n\r\n    const sum = prices.slice(-period).reduce((acc, price) => acc + price, 0);\r\n    return sum / period;\r\n  }\r\n\r\n  /**\r\n   * Calculate Exponential Moving Average (EMA)\r\n   * @param prices Array of price values\r\n   * @param period Number of periods for calculation\r\n   * @returns EMA value or null if insufficient data\r\n   */\r\n  public calculateEMA(prices: number[], period: number): number | null {\r\n    if (prices.length < period) {\r\n      return null;\r\n    }\r\n\r\n    const multiplier = 2 / (period + 1);\r\n    let ema = prices[0];\r\n\r\n    for (let i = 1; i < prices.length; i++) {\r\n      ema = (prices[i] * multiplier) + (ema * (1 - multiplier));\r\n    }\r\n\r\n    return ema;\r\n  }\r\n\r\n  /**\r\n   * Calculate multiple EMAs for crossover analysis\r\n   * @param marketData Array of market data\r\n   * @param fastPeriod Fast EMA period (default: 20)\r\n   * @param slowPeriod Slow EMA period (default: 50)\r\n   * @returns Object containing fast and slow EMA values\r\n   */\r\n  public calculateEMACrossover(\r\n    marketData: MarketData[],\r\n    fastPeriod: number = this.defaultFastPeriod,\r\n    slowPeriod: number = this.defaultSlowPeriod\r\n  ): { fastEMA: number | null; slowEMA: number | null } {\r\n    const prices = marketData.map(data => data.close);\r\n    \r\n    return {\r\n      fastEMA: this.calculateEMA(prices, fastPeriod),\r\n      slowEMA: this.calculateEMA(prices, slowPeriod)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Detect moving average crossover signals\r\n   * @param marketData Array of market data (minimum 2 periods for crossover detection)\r\n   * @param fastPeriod Fast EMA period\r\n   * @param slowPeriod Slow EMA period\r\n   * @returns MovingAverageSignal with crossover information\r\n   */\r\n  public detectCrossover(\r\n    marketData: MarketData[],\r\n    fastPeriod: number = this.defaultFastPeriod,\r\n    slowPeriod: number = this.defaultSlowPeriod\r\n  ): MovingAverageSignal | null {\r\n    if (marketData.length < Math.max(fastPeriod, slowPeriod) + 1) {\r\n      return null;\r\n    }\r\n\r\n    // Calculate current EMAs\r\n    const currentData = marketData.slice(0, -1);\r\n    const previousData = marketData.slice(0, -2);\r\n\r\n    const current = this.calculateEMACrossover(currentData, fastPeriod, slowPeriod);\r\n    const previous = this.calculateEMACrossover(previousData, fastPeriod, slowPeriod);\r\n\r\n    if (!current.fastEMA || !current.slowEMA || !previous.fastEMA || !previous.slowEMA) {\r\n      return null;\r\n    }\r\n\r\n    // Determine crossover type\r\n    let crossoverType: 'GOLDEN_CROSS' | 'DEATH_CROSS' | 'NONE' = 'NONE';\r\n    let strength = 0;\r\n\r\n    // Golden Cross: Fast EMA crosses above Slow EMA (bullish)\r\n    if (previous.fastEMA <= previous.slowEMA && current.fastEMA > current.slowEMA) {\r\n      crossoverType = 'GOLDEN_CROSS';\r\n      strength = this.calculateCrossoverStrength(current.fastEMA, current.slowEMA, 'bullish');\r\n    }\r\n    // Death Cross: Fast EMA crosses below Slow EMA (bearish)\r\n    else if (previous.fastEMA >= previous.slowEMA && current.fastEMA < current.slowEMA) {\r\n      crossoverType = 'DEATH_CROSS';\r\n      strength = this.calculateCrossoverStrength(current.fastEMA, current.slowEMA, 'bearish');\r\n    }\r\n\r\n    // Check volume confirmation\r\n    const volumeConfirmed = this.isVolumeConfirmed(marketData);\r\n\r\n    const latestData = marketData[marketData.length - 1];\r\n\r\n    return {\r\n      name: 'EMA',\r\n      value: current.fastEMA,\r\n      timestamp: latestData.timestamp,\r\n      period: fastPeriod,\r\n      parameters: {\r\n        fastPeriod,\r\n        slowPeriod,\r\n        slowEMA: current.slowEMA\r\n      },\r\n      crossover: {\r\n        type: crossoverType,\r\n        strength,\r\n        volumeConfirmed\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculate crossover strength based on EMA separation\r\n   * @param fastEMA Fast EMA value\r\n   * @param slowEMA Slow EMA value\r\n   * @param direction Crossover direction\r\n   * @returns Strength score (0-100)\r\n   */\r\n  private calculateCrossoverStrength(\r\n    fastEMA: number,\r\n    slowEMA: number,\r\n    direction: 'bullish' | 'bearish'\r\n  ): number {\r\n    const separation = Math.abs(fastEMA - slowEMA);\r\n    const averagePrice = (fastEMA + slowEMA) / 2;\r\n    const separationPercentage = (separation / averagePrice) * 100;\r\n\r\n    // Normalize to 0-100 scale (higher separation = stronger signal)\r\n    // Typical separation ranges from 0.1% to 5% for most assets\r\n    const strength = Math.min(separationPercentage * 20, 100);\r\n    \r\n    return Math.round(strength);\r\n  }\r\n\r\n  /**\r\n   * Check if current volume confirms the crossover signal\r\n   * @param marketData Array of market data\r\n   * @returns True if volume is above average threshold\r\n   */\r\n  private isVolumeConfirmed(marketData: MarketData[]): boolean {\r\n    if (marketData.length < 20) {\r\n      return false; // Need at least 20 periods for volume analysis\r\n    }\r\n\r\n    const currentVolume = marketData[marketData.length - 1].volume;\r\n    const averageVolume = marketData.slice(-20)\r\n      .reduce((sum, data) => sum + data.volume, 0) / 20;\r\n\r\n    return currentVolume >= (averageVolume * this.volumeConfirmationThreshold);\r\n  }\r\n\r\n  /**\r\n   * Generate trading signal based on moving average crossover\r\n   * @param marketData Array of market data\r\n   * @param fastPeriod Fast EMA period\r\n   * @param slowPeriod Slow EMA period\r\n   * @returns TradingSignal or null if no signal\r\n   */\r\n  public generateSignal(\r\n    marketData: MarketData[],\r\n    fastPeriod: number = this.defaultFastPeriod,\r\n    slowPeriod: number = this.defaultSlowPeriod\r\n  ): TradingSignal | null {\r\n    const crossover = this.detectCrossover(marketData, fastPeriod, slowPeriod);\r\n    \r\n    if (!crossover || !crossover.crossover || crossover.crossover.type === 'NONE') {\r\n      return null;\r\n    }\r\n\r\n    const latestData = marketData[marketData.length - 1];\r\n    const signalType = crossover.crossover.type === 'GOLDEN_CROSS' ? 'BUY' : 'SELL';\r\n    \r\n    // Calculate confidence based on strength and volume confirmation\r\n    let confidence = crossover.crossover.strength;\r\n    if (crossover.crossover.volumeConfirmed) {\r\n      confidence = Math.min(confidence + 20, 100); // Boost confidence with volume\r\n    }\r\n\r\n    // Calculate risk-reward ratio (simplified for MA strategy)\r\n    const riskReward = this.calculateRiskReward(marketData, signalType);\r\n\r\n    return {\r\n      id: `ma_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n      symbol: latestData.symbol,\r\n      type: signalType,\r\n      strength: crossover.crossover.strength,\r\n      confidence,\r\n      indicators: [`EMA_${fastPeriod}`, `EMA_${slowPeriod}`],\r\n      reasoning: this.generateReasoning(crossover, fastPeriod, slowPeriod),\r\n      riskReward,\r\n      timestamp: latestData.timestamp,\r\n      metadata: {\r\n        fastEMA: crossover.value,\r\n        slowEMA: crossover.parameters.slowEMA,\r\n        volumeConfirmed: crossover.crossover.volumeConfirmed,\r\n        crossoverType: crossover.crossover.type\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculate risk-reward ratio for MA strategy\r\n   * @param marketData Array of market data\r\n   * @param signalType Signal type (BUY/SELL)\r\n   * @returns Risk-reward ratio\r\n   */\r\n  private calculateRiskReward(marketData: MarketData[], signalType: 'BUY' | 'SELL'): number {\r\n    const currentPrice = marketData[marketData.length - 1].close;\r\n    const recentHigh = Math.max(...marketData.slice(-20).map(d => d.high));\r\n    const recentLow = Math.min(...marketData.slice(-20).map(d => d.low));\r\n\r\n    if (signalType === 'BUY') {\r\n      const target = recentHigh;\r\n      const stopLoss = recentLow;\r\n      const reward = target - currentPrice;\r\n      const risk = currentPrice - stopLoss;\r\n      return risk > 0 ? reward / risk : 1.0;\r\n    } else {\r\n      const target = recentLow;\r\n      const stopLoss = recentHigh;\r\n      const reward = currentPrice - target;\r\n      const risk = stopLoss - currentPrice;\r\n      return risk > 0 ? reward / risk : 1.0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate human-readable reasoning for the signal\r\n   * @param crossover MovingAverageSignal data\r\n   * @param fastPeriod Fast EMA period\r\n   * @param slowPeriod Slow EMA period\r\n   * @returns Reasoning string\r\n   */\r\n  private generateReasoning(\r\n    crossover: MovingAverageSignal,\r\n    fastPeriod: number,\r\n    slowPeriod: number\r\n  ): string {\r\n    const { type, strength, volumeConfirmed } = crossover.crossover!;\r\n    const volumeText = volumeConfirmed ? ' with strong volume confirmation' : ' with weak volume';\r\n    \r\n    if (type === 'GOLDEN_CROSS') {\r\n      return `Golden Cross detected: ${fastPeriod}-period EMA crossed above ${slowPeriod}-period EMA${volumeText}. Signal strength: ${strength}/100. This indicates potential bullish momentum.`;\r\n    } else {\r\n      return `Death Cross detected: ${fastPeriod}-period EMA crossed below ${slowPeriod}-period EMA${volumeText}. Signal strength: ${strength}/100. This indicates potential bearish momentum.`;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Evaluate signal confidence based on multiple factors\r\n   * @param marketData Array of market data\r\n   * @param signal Generated trading signal\r\n   * @returns SignalConfidence object\r\n   */\r\n  public evaluateSignalConfidence(marketData: MarketData[], signal: TradingSignal): SignalConfidence {\r\n    const technical = signal.strength;\r\n    const volume = signal.metadata?.volumeConfirmed ? 80 : 40;\r\n    \r\n    // Calculate momentum based on recent price action\r\n    const recentPrices = marketData.slice(-5).map(d => d.close);\r\n    const momentum = this.calculateMomentumScore(recentPrices, signal.type);\r\n    \r\n    const overall = Math.round((technical * 0.4 + volume * 0.3 + momentum * 0.3));\r\n    \r\n    const factors = [\r\n      `EMA crossover strength: ${technical}/100`,\r\n      `Volume confirmation: ${volume}/100`,\r\n      `Price momentum: ${momentum}/100`\r\n    ];\r\n\r\n    return {\r\n      overall,\r\n      technical,\r\n      volume,\r\n      momentum,\r\n      factors\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculate momentum score based on recent price action\r\n   * @param prices Recent price array\r\n   * @param signalType Signal direction\r\n   * @returns Momentum score (0-100)\r\n   */\r\n  private calculateMomentumScore(prices: number[], signalType: 'BUY' | 'SELL'): number {\r\n    if (prices.length < 3) return 50;\r\n\r\n    const priceChange = (prices[prices.length - 1] - prices[0]) / prices[0];\r\n    const expectedDirection = signalType === 'BUY' ? 1 : -1;\r\n    const alignment = priceChange * expectedDirection;\r\n\r\n    // Convert to 0-100 scale\r\n    return Math.max(0, Math.min(100, 50 + (alignment * 1000)));\r\n  }\r\n}"],"mappings":"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","ignoreList":[]}