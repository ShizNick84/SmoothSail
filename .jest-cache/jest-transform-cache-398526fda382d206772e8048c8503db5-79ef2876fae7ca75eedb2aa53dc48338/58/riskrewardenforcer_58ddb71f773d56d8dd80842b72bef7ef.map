{"version":3,"names":["cov_rxb1yu68n","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","RiskRewardEnforcer","config","performanceMetrics","tradeHistory","constructor","averageRR","rrComplianceRate","rejectedTradesCount","totalTradesAnalyzed","bestRR","worstRR","Infinity","rrByStrategy","Map","analyzeRiskReward","proposal","marketConditions","baseAnalysis","calculateBaseRiskReward","adjustedAnalysis","applyDynamicAdjustments","optimizations","generateOptimizationRecommendations","finalAnalysis","optimizationRecommendations","approved","validateTradeApproval","rejectionReasons","generateRejectionReasons","updatePerformanceMetrics","push","entryPrice","stopLossPrice","takeProfitPrice","positionSize","riskAmount","Math","abs","rewardAmount","riskPercentage","rewardPercentage","riskRewardRatio","meetsMinimumRR","minRiskRewardRatio","enableDynamicAdjustment","adjustmentFactor","trend","marketConditionAdjustments","bullish","bearish","sideways","volatility","highVolatility","lowVolatility","confidenceAdjustment","confidence","adjustedMinRR","analysis","recommendations","tighterStopLoss","calculateOptimalStopLoss","newRisk","newRR","currentValue","recommendedValue","rrImprovement","description","toFixed","priority","extendedTakeProfit","calculateOptimalTakeProfit","newReward","betterEntry","calculateBetterEntryPrice","preferredRiskRewardRatio","sort","a","priorityOrder","HIGH","MEDIUM","LOW","atrBasedDistance","atr","minStopDistance","max","optimalStop","supportLevel","resistanceLevel","min","riskDistance","targetRR","optimalTarget","currentReward","currentRisk","targetRisk","maxRiskPercentage","reasons","currentSum","executedTrades","strategyRR","get","strategy","set","approvedTrades","getPerformanceMetrics","getTradeHistory","limit","slice","updateConfig","newConfig","getConfig","resetPerformanceMetrics","generatePerformanceReport","topStrategies","Array","from","entries","map","avgRR","recentTrends","period","recentTrades","filter","t","length","reduce","sum","approvalRate","summary","exports"],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\risk\\risk-reward-enforcer.ts"],"sourcesContent":["/**\r\n * Risk-Reward Ratio Enforcer\r\n * \r\n * Implements sophisticated risk-reward ratio enforcement with:\r\n * - Minimum 1.3:1 risk-reward ratio validation\r\n * - Dynamic RR adjustment based on market conditions\r\n * - Trade rejection for insufficient risk-reward\r\n * - RR optimization recommendations\r\n */\r\n\r\nimport { MarketConditions } from './trailing-stop-manager.js';\r\n\r\nexport interface TradeProposal {\r\n  /** Trading symbol */\r\n  symbol: string;\r\n  /** Position type */\r\n  type: 'LONG' | 'SHORT';\r\n  /** Entry price */\r\n  entryPrice: number;\r\n  /** Stop loss price */\r\n  stopLossPrice: number;\r\n  /** Take profit price */\r\n  takeProfitPrice: number;\r\n  /** Position size */\r\n  positionSize: number;\r\n  /** Signal confidence (0-100) */\r\n  confidence: number;\r\n  /** Strategy that generated the signal */\r\n  strategy: string;\r\n}\r\n\r\nexport interface RiskRewardAnalysis {\r\n  /** Calculated risk-reward ratio */\r\n  riskRewardRatio: number;\r\n  /** Risk amount in currency */\r\n  riskAmount: number;\r\n  /** Reward amount in currency */\r\n  rewardAmount: number;\r\n  /** Risk percentage of position value */\r\n  riskPercentage: number;\r\n  /** Reward percentage of position value */\r\n  rewardPercentage: number;\r\n  /** Whether trade meets minimum RR requirements */\r\n  meetsMinimumRR: boolean;\r\n  /** Approval status */\r\n  approved: boolean;\r\n  /** Rejection reasons */\r\n  rejectionReasons: string[];\r\n  /** Optimization recommendations */\r\n  optimizationRecommendations: RROptimization[];\r\n}\r\n\r\nexport interface RROptimization {\r\n  /** Type of optimization */\r\n  type: 'ADJUST_STOP_LOSS' | 'ADJUST_TAKE_PROFIT' | 'REDUCE_POSITION_SIZE' | 'WAIT_FOR_BETTER_ENTRY';\r\n  /** Current value */\r\n  currentValue: number;\r\n  /** Recommended value */\r\n  recommendedValue: number;\r\n  /** Expected improvement in RR ratio */\r\n  rrImprovement: number;\r\n  /** Description of the optimization */\r\n  description: string;\r\n  /** Priority level */\r\n  priority: 'LOW' | 'MEDIUM' | 'HIGH';\r\n}\r\n\r\nexport interface RREnforcementConfig {\r\n  /** Minimum risk-reward ratio */\r\n  minRiskRewardRatio: number;\r\n  /** Preferred risk-reward ratio */\r\n  preferredRiskRewardRatio: number;\r\n  /** Maximum acceptable risk percentage */\r\n  maxRiskPercentage: number;\r\n  /** Enable dynamic RR adjustment */\r\n  enableDynamicAdjustment: boolean;\r\n  /** Market condition adjustment factors */\r\n  marketConditionAdjustments: {\r\n    bullish: number;\r\n    bearish: number;\r\n    sideways: number;\r\n    highVolatility: number;\r\n    lowVolatility: number;\r\n  };\r\n}\r\n\r\nexport interface RRPerformanceMetrics {\r\n  /** Average risk-reward ratio of executed trades */\r\n  averageRR: number;\r\n  /** Percentage of trades meeting minimum RR */\r\n  rrComplianceRate: number;\r\n  /** Number of trades rejected for poor RR */\r\n  rejectedTradesCount: number;\r\n  /** Total trades analyzed */\r\n  totalTradesAnalyzed: number;\r\n  /** Best RR ratio achieved */\r\n  bestRR: number;\r\n  /** Worst RR ratio executed */\r\n  worstRR: number;\r\n  /** RR distribution by strategy */\r\n  rrByStrategy: Map<string, number>;\r\n}\r\n\r\nexport class RiskRewardEnforcer {\r\n  private config: RREnforcementConfig;\r\n  private performanceMetrics: RRPerformanceMetrics;\r\n  private tradeHistory: RiskRewardAnalysis[] = [];\r\n\r\n  constructor(config: RREnforcementConfig) {\r\n    this.config = config;\r\n    this.performanceMetrics = {\r\n      averageRR: 0,\r\n      rrComplianceRate: 0,\r\n      rejectedTradesCount: 0,\r\n      totalTradesAnalyzed: 0,\r\n      bestRR: 0,\r\n      worstRR: Infinity,\r\n      rrByStrategy: new Map()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Analyze and enforce risk-reward ratio for a trade proposal\r\n   */\r\n  analyzeRiskReward(\r\n    proposal: TradeProposal,\r\n    marketConditions: MarketConditions\r\n  ): RiskRewardAnalysis {\r\n    // Calculate base risk-reward metrics\r\n    const baseAnalysis = this.calculateBaseRiskReward(proposal);\r\n\r\n    // Apply dynamic adjustments based on market conditions\r\n    const adjustedAnalysis = this.applyDynamicAdjustments(baseAnalysis, proposal, marketConditions);\r\n\r\n    // Generate optimization recommendations\r\n    const optimizations = this.generateOptimizationRecommendations(proposal, adjustedAnalysis, marketConditions);\r\n\r\n    // Final validation\r\n    const finalAnalysis: RiskRewardAnalysis = {\r\n      ...adjustedAnalysis,\r\n      optimizationRecommendations: optimizations,\r\n      approved: this.validateTradeApproval(adjustedAnalysis, proposal),\r\n      rejectionReasons: this.generateRejectionReasons(adjustedAnalysis, proposal)\r\n    };\r\n\r\n    // Update performance metrics\r\n    this.updatePerformanceMetrics(finalAnalysis, proposal);\r\n\r\n    // Store in history\r\n    this.tradeHistory.push(finalAnalysis);\r\n\r\n    return finalAnalysis;\r\n  }\r\n\r\n  /**\r\n   * Calculate base risk-reward metrics\r\n   */\r\n  private calculateBaseRiskReward(proposal: TradeProposal): Omit<RiskRewardAnalysis, 'optimizationRecommendations' | 'approved' | 'rejectionReasons'> {\r\n    const { entryPrice, stopLossPrice, takeProfitPrice, positionSize } = proposal;\r\n\r\n    // Calculate risk and reward amounts\r\n    const riskAmount = Math.abs(entryPrice - stopLossPrice) * positionSize;\r\n    const rewardAmount = Math.abs(takeProfitPrice - entryPrice) * positionSize;\r\n\r\n    // Calculate percentages\r\n    const riskPercentage = Math.abs((entryPrice - stopLossPrice) / entryPrice) * 100;\r\n    const rewardPercentage = Math.abs((takeProfitPrice - entryPrice) / entryPrice) * 100;\r\n\r\n    // Calculate risk-reward ratio\r\n    const riskRewardRatio = riskAmount > 0 ? rewardAmount / riskAmount : 0;\r\n\r\n    // Check if meets minimum requirements\r\n    const meetsMinimumRR = riskRewardRatio >= this.config.minRiskRewardRatio;\r\n\r\n    return {\r\n      riskRewardRatio,\r\n      riskAmount,\r\n      rewardAmount,\r\n      riskPercentage,\r\n      rewardPercentage,\r\n      meetsMinimumRR\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Apply dynamic adjustments based on market conditions\r\n   */\r\n  private applyDynamicAdjustments(\r\n    baseAnalysis: Omit<RiskRewardAnalysis, 'optimizationRecommendations' | 'approved' | 'rejectionReasons'>,\r\n    proposal: TradeProposal,\r\n    marketConditions: MarketConditions\r\n  ): Omit<RiskRewardAnalysis, 'optimizationRecommendations' | 'approved' | 'rejectionReasons'> {\r\n    if (!this.config.enableDynamicAdjustment) {\r\n      return baseAnalysis;\r\n    }\r\n\r\n    let adjustmentFactor = 1.0;\r\n\r\n    // Adjust based on market trend\r\n    switch (marketConditions.trend) {\r\n      case 'BULLISH':\r\n        adjustmentFactor *= this.config.marketConditionAdjustments.bullish;\r\n        break;\r\n      case 'BEARISH':\r\n        adjustmentFactor *= this.config.marketConditionAdjustments.bearish;\r\n        break;\r\n      case 'SIDEWAYS':\r\n        adjustmentFactor *= this.config.marketConditionAdjustments.sideways;\r\n        break;\r\n    }\r\n\r\n    // Adjust based on volatility\r\n    if (marketConditions.volatility > 0.5) {\r\n      adjustmentFactor *= this.config.marketConditionAdjustments.highVolatility;\r\n    } else if (marketConditions.volatility < 0.2) {\r\n      adjustmentFactor *= this.config.marketConditionAdjustments.lowVolatility;\r\n    }\r\n\r\n    // Adjust based on signal confidence\r\n    const confidenceAdjustment = 0.8 + (proposal.confidence / 100) * 0.4; // 0.8 to 1.2 range\r\n    adjustmentFactor *= confidenceAdjustment;\r\n\r\n    // Apply adjustment to minimum RR requirement\r\n    const adjustedMinRR = this.config.minRiskRewardRatio * adjustmentFactor;\r\n\r\n    return {\r\n      ...baseAnalysis,\r\n      meetsMinimumRR: baseAnalysis.riskRewardRatio >= adjustedMinRR\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generate optimization recommendations\r\n   */\r\n  private generateOptimizationRecommendations(\r\n    proposal: TradeProposal,\r\n    analysis: Omit<RiskRewardAnalysis, 'optimizationRecommendations' | 'approved' | 'rejectionReasons'>,\r\n    marketConditions: MarketConditions\r\n  ): RROptimization[] {\r\n    const recommendations: RROptimization[] = [];\r\n\r\n    // If RR is below minimum, suggest improvements\r\n    if (!analysis.meetsMinimumRR) {\r\n      // Suggest tightening stop loss\r\n      const tighterStopLoss = this.calculateOptimalStopLoss(proposal, marketConditions);\r\n      if (tighterStopLoss !== proposal.stopLossPrice) {\r\n        const newRisk = Math.abs(proposal.entryPrice - tighterStopLoss) * proposal.positionSize;\r\n        const newRR = analysis.rewardAmount / newRisk;\r\n\r\n        recommendations.push({\r\n          type: 'ADJUST_STOP_LOSS',\r\n          currentValue: proposal.stopLossPrice,\r\n          recommendedValue: tighterStopLoss,\r\n          rrImprovement: newRR - analysis.riskRewardRatio,\r\n          description: `Tighten stop loss to ${tighterStopLoss.toFixed(2)} to improve RR ratio`,\r\n          priority: 'HIGH'\r\n        });\r\n      }\r\n\r\n      // Suggest extending take profit\r\n      const extendedTakeProfit = this.calculateOptimalTakeProfit(proposal, marketConditions);\r\n      if (extendedTakeProfit !== proposal.takeProfitPrice) {\r\n        const newReward = Math.abs(extendedTakeProfit - proposal.entryPrice) * proposal.positionSize;\r\n        const newRR = newReward / analysis.riskAmount;\r\n\r\n        recommendations.push({\r\n          type: 'ADJUST_TAKE_PROFIT',\r\n          currentValue: proposal.takeProfitPrice,\r\n          recommendedValue: extendedTakeProfit,\r\n          rrImprovement: newRR - analysis.riskRewardRatio,\r\n          description: `Extend take profit to ${extendedTakeProfit.toFixed(2)} to improve RR ratio`,\r\n          priority: 'MEDIUM'\r\n        });\r\n      }\r\n\r\n      // Suggest waiting for better entry\r\n      const betterEntry = this.calculateBetterEntryPrice(proposal, marketConditions);\r\n      if (betterEntry !== proposal.entryPrice) {\r\n        const newRisk = Math.abs(betterEntry - proposal.stopLossPrice) * proposal.positionSize;\r\n        const newReward = Math.abs(proposal.takeProfitPrice - betterEntry) * proposal.positionSize;\r\n        const newRR = newReward / newRisk;\r\n\r\n        recommendations.push({\r\n          type: 'WAIT_FOR_BETTER_ENTRY',\r\n          currentValue: proposal.entryPrice,\r\n          recommendedValue: betterEntry,\r\n          rrImprovement: newRR - analysis.riskRewardRatio,\r\n          description: `Wait for better entry at ${betterEntry.toFixed(2)} to improve RR ratio`,\r\n          priority: 'LOW'\r\n        });\r\n      }\r\n    }\r\n\r\n    // If RR is acceptable but could be better\r\n    if (analysis.riskRewardRatio < this.config.preferredRiskRewardRatio) {\r\n      recommendations.push({\r\n        type: 'REDUCE_POSITION_SIZE',\r\n        currentValue: proposal.positionSize,\r\n        recommendedValue: proposal.positionSize * 0.8,\r\n        rrImprovement: 0,\r\n        description: 'Consider reducing position size to maintain capital preservation',\r\n        priority: 'LOW'\r\n      });\r\n    }\r\n\r\n    return recommendations.sort((a, b) => {\r\n      const priorityOrder = { HIGH: 3, MEDIUM: 2, LOW: 1 };\r\n      return priorityOrder[b.priority] - priorityOrder[a.priority];\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Calculate optimal stop loss based on market conditions\r\n   */\r\n  private calculateOptimalStopLoss(proposal: TradeProposal, marketConditions: MarketConditions): number {\r\n    const { entryPrice, type } = proposal;\r\n    \r\n    // Use ATR to determine optimal stop distance\r\n    const atrBasedDistance = (marketConditions.atr / entryPrice) * 100;\r\n    const minStopDistance = Math.max(0.5, atrBasedDistance * 1.5); // 1.5x ATR minimum\r\n\r\n    if (type === 'LONG') {\r\n      const optimalStop = entryPrice * (1 - minStopDistance / 100);\r\n      \r\n      // Consider support levels\r\n      if (marketConditions.supportLevel && marketConditions.supportLevel < entryPrice) {\r\n        return Math.max(optimalStop, marketConditions.supportLevel * 0.995);\r\n      }\r\n      \r\n      return optimalStop;\r\n    } else {\r\n      const optimalStop = entryPrice * (1 + minStopDistance / 100);\r\n      \r\n      // Consider resistance levels\r\n      if (marketConditions.resistanceLevel && marketConditions.resistanceLevel > entryPrice) {\r\n        return Math.min(optimalStop, marketConditions.resistanceLevel * 1.005);\r\n      }\r\n      \r\n      return optimalStop;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate optimal take profit based on market conditions\r\n   */\r\n  private calculateOptimalTakeProfit(proposal: TradeProposal, marketConditions: MarketConditions): number {\r\n    const { entryPrice, stopLossPrice, type } = proposal;\r\n    \r\n    const riskDistance = Math.abs(entryPrice - stopLossPrice);\r\n    const targetRR = this.config.preferredRiskRewardRatio;\r\n    \r\n    if (type === 'LONG') {\r\n      const optimalTarget = entryPrice + (riskDistance * targetRR);\r\n      \r\n      // Consider resistance levels as potential targets\r\n      if (marketConditions.resistanceLevel && marketConditions.resistanceLevel > entryPrice) {\r\n        return Math.min(optimalTarget, marketConditions.resistanceLevel * 0.995);\r\n      }\r\n      \r\n      return optimalTarget;\r\n    } else {\r\n      const optimalTarget = entryPrice - (riskDistance * targetRR);\r\n      \r\n      // Consider support levels as potential targets\r\n      if (marketConditions.supportLevel && marketConditions.supportLevel < entryPrice) {\r\n        return Math.max(optimalTarget, marketConditions.supportLevel * 1.005);\r\n      }\r\n      \r\n      return optimalTarget;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate better entry price for improved RR\r\n   */\r\n  private calculateBetterEntryPrice(proposal: TradeProposal, marketConditions: MarketConditions): number {\r\n    const { entryPrice, stopLossPrice, takeProfitPrice, type } = proposal;\r\n    \r\n    // Calculate what entry price would give us the preferred RR\r\n    const currentReward = Math.abs(takeProfitPrice - entryPrice);\r\n    const currentRisk = Math.abs(entryPrice - stopLossPrice);\r\n    \r\n    if (type === 'LONG') {\r\n      // For long positions, lower entry improves RR\r\n      const targetRisk = currentReward / this.config.preferredRiskRewardRatio;\r\n      return stopLossPrice + targetRisk;\r\n    } else {\r\n      // For short positions, higher entry improves RR\r\n      const targetRisk = currentReward / this.config.preferredRiskRewardRatio;\r\n      return stopLossPrice - targetRisk;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate if trade should be approved\r\n   */\r\n  private validateTradeApproval(\r\n    analysis: Omit<RiskRewardAnalysis, 'optimizationRecommendations' | 'approved' | 'rejectionReasons'>,\r\n    proposal: TradeProposal\r\n  ): boolean {\r\n    // Must meet minimum RR ratio\r\n    if (!analysis.meetsMinimumRR) {\r\n      return false;\r\n    }\r\n\r\n    // Must not exceed maximum risk percentage\r\n    if (analysis.riskPercentage > this.config.maxRiskPercentage) {\r\n      return false;\r\n    }\r\n\r\n    // Additional validation based on confidence\r\n    if (proposal.confidence < 50 && analysis.riskRewardRatio < this.config.preferredRiskRewardRatio) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Generate rejection reasons\r\n   */\r\n  private generateRejectionReasons(\r\n    analysis: Omit<RiskRewardAnalysis, 'optimizationRecommendations' | 'approved' | 'rejectionReasons'>,\r\n    proposal: TradeProposal\r\n  ): string[] {\r\n    const reasons: string[] = [];\r\n\r\n    if (!analysis.meetsMinimumRR) {\r\n      reasons.push(`Risk-reward ratio ${analysis.riskRewardRatio.toFixed(2)} below minimum ${this.config.minRiskRewardRatio}`);\r\n    }\r\n\r\n    if (analysis.riskPercentage > this.config.maxRiskPercentage) {\r\n      reasons.push(`Risk percentage ${analysis.riskPercentage.toFixed(2)}% exceeds maximum ${this.config.maxRiskPercentage}%`);\r\n    }\r\n\r\n    if (proposal.confidence < 50 && analysis.riskRewardRatio < this.config.preferredRiskRewardRatio) {\r\n      reasons.push(`Low confidence ${proposal.confidence}% with suboptimal RR ratio ${analysis.riskRewardRatio.toFixed(2)}`);\r\n    }\r\n\r\n    return reasons;\r\n  }\r\n\r\n  /**\r\n   * Update performance metrics\r\n   */\r\n  private updatePerformanceMetrics(analysis: RiskRewardAnalysis, proposal: TradeProposal): void {\r\n    this.performanceMetrics.totalTradesAnalyzed++;\r\n\r\n    if (analysis.approved) {\r\n      // Update average RR\r\n      const currentSum = this.performanceMetrics.averageRR * (this.performanceMetrics.totalTradesAnalyzed - this.performanceMetrics.rejectedTradesCount - 1);\r\n      const executedTrades = this.performanceMetrics.totalTradesAnalyzed - this.performanceMetrics.rejectedTradesCount;\r\n      this.performanceMetrics.averageRR = (currentSum + analysis.riskRewardRatio) / executedTrades;\r\n\r\n      // Update best/worst RR\r\n      this.performanceMetrics.bestRR = Math.max(this.performanceMetrics.bestRR, analysis.riskRewardRatio);\r\n      this.performanceMetrics.worstRR = Math.min(this.performanceMetrics.worstRR, analysis.riskRewardRatio);\r\n\r\n      // Update strategy-specific RR\r\n      const strategyRR = this.performanceMetrics.rrByStrategy.get(proposal.strategy) || 0;\r\n      this.performanceMetrics.rrByStrategy.set(proposal.strategy, \r\n        (strategyRR + analysis.riskRewardRatio) / 2\r\n      );\r\n    } else {\r\n      this.performanceMetrics.rejectedTradesCount++;\r\n    }\r\n\r\n    // Update compliance rate\r\n    const approvedTrades = this.performanceMetrics.totalTradesAnalyzed - this.performanceMetrics.rejectedTradesCount;\r\n    this.performanceMetrics.rrComplianceRate = (approvedTrades / this.performanceMetrics.totalTradesAnalyzed) * 100;\r\n  }\r\n\r\n  /**\r\n   * Get performance metrics\r\n   */\r\n  getPerformanceMetrics(): RRPerformanceMetrics {\r\n    return { ...this.performanceMetrics };\r\n  }\r\n\r\n  /**\r\n   * Get trade history\r\n   */\r\n  getTradeHistory(limit?: number): RiskRewardAnalysis[] {\r\n    if (limit) {\r\n      return this.tradeHistory.slice(-limit);\r\n    }\r\n    return [...this.tradeHistory];\r\n  }\r\n\r\n  /**\r\n   * Update configuration\r\n   */\r\n  updateConfig(newConfig: Partial<RREnforcementConfig>): void {\r\n    this.config = { ...this.config, ...newConfig };\r\n  }\r\n\r\n  /**\r\n   * Get current configuration\r\n   */\r\n  getConfig(): RREnforcementConfig {\r\n    return { ...this.config };\r\n  }\r\n\r\n  /**\r\n   * Reset performance metrics\r\n   */\r\n  resetPerformanceMetrics(): void {\r\n    this.performanceMetrics = {\r\n      averageRR: 0,\r\n      rrComplianceRate: 0,\r\n      rejectedTradesCount: 0,\r\n      totalTradesAnalyzed: 0,\r\n      bestRR: 0,\r\n      worstRR: Infinity,\r\n      rrByStrategy: new Map()\r\n    };\r\n    this.tradeHistory = [];\r\n  }\r\n\r\n  /**\r\n   * Generate RR performance report\r\n   */\r\n  generatePerformanceReport(): {\r\n    summary: RRPerformanceMetrics;\r\n    topStrategies: Array<{ strategy: string; avgRR: number }>;\r\n    recentTrends: Array<{ period: string; avgRR: number; approvalRate: number }>;\r\n  } {\r\n    const topStrategies = Array.from(this.performanceMetrics.rrByStrategy.entries())\r\n      .map(([strategy, avgRR]) => ({ strategy, avgRR }))\r\n      .sort((a, b) => b.avgRR - a.avgRR)\r\n      .slice(0, 5);\r\n\r\n    // Calculate recent trends (last 10, 20, 50 trades)\r\n    const recentTrends = [10, 20, 50].map(period => {\r\n      const recentTrades = this.tradeHistory.slice(-period);\r\n      const approvedTrades = recentTrades.filter(t => t.approved);\r\n      const avgRR = approvedTrades.length > 0 \r\n        ? approvedTrades.reduce((sum, t) => sum + t.riskRewardRatio, 0) / approvedTrades.length\r\n        : 0;\r\n      const approvalRate = recentTrades.length > 0 \r\n        ? (approvedTrades.length / recentTrades.length) * 100\r\n        : 0;\r\n\r\n      return {\r\n        period: `Last ${period} trades`,\r\n        avgRR,\r\n        approvalRate\r\n      };\r\n    });\r\n\r\n    return {\r\n      summary: this.getPerformanceMetrics(),\r\n      topStrategies,\r\n      recentTrends\r\n    };\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]}