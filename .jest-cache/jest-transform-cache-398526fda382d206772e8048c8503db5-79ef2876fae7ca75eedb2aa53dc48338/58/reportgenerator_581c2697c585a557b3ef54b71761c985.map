{"version":3,"names":["cov_1fwcimt8ws","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","promises_1","__importDefault","require","path_1","logger_1","BacktestReportGenerator","generateReport","result","config","benchmark","logger","info","sections","generateReportSections","report","format","generateHTMLReport","generateJSONReport","warn","outputPath","saveReport","error","push","generateExecutiveSummary","generatePerformanceSection","includeRiskMetrics","generateRiskSection","includeTradeDetails","generateTradeAnalysisSection","includeStrategyBreakdown","generateStrategySection","includeMonthlyReturns","generateMonthlyReturnsSection","includeBenchmarkComparison","generateBenchmarkSection","includeCharts","generateChartsSection","perf","performance","trades","summary","totalReturnPercentage","toFixed","totalReturn","annualizedReturn","sharpeRatio","maxDrawdownPercentage","winRate","profitFactor","total","winning","losing","averageWin","averageLoss","largestWin","largestLoss","risk","volatility","var95","cvar95","recoveryFactor","dataQuality","totalDataPoints","toLocaleString","dataIntegrityScore","dataSource","gapsDetected","outperformance","riskAdjustedReturn","informationRatio","period","toISOString","split","durationDays","title","content","expectedValue","sortinoRatio","calmarRatio","maxDrawdown","averageDrawdown","payoffRatio","downside_deviation","beta","alpha","generateRiskAssessment","Math","max","maxConsecutiveWins","maxConsecutiveLosses","generateTradeDistribution","executionDetails","generateTopTrades","strategies","Object","entries","strategyPerformance","averageHoldingPeriod","signalAccuracy","contribution","monthlyReturns","month","monthName","Date","year","return","returnPercentage","yearlyData","calculateYearlySummaries","data","totalTrades","avgWinRate","bestMonth","worstMonth","strategy","generateBenchmarkAnalysis","charts","equityCurve","map","point","x","timestamp","y","equity","xAxis","yAxis","drawdownCurve","drawdownPercentage","String","padStart","html","symbol","section","markdownToHTML","chart","length","join","JSON","stringify","dir","default","dirname","mkdir","recursive","ext","toLowerCase","fullPath","endsWith","writeFile","assessment","closedTrades","filter","t","status","pnl","pnlRanges","min","Infinity","label","distribution","range","count","percentage","sortedTrades","sort","a","topTrades","slice","table","trade","date","entryTime","pnlClass","pnlPercentage","toString","months","values","analysis","abs","markdown","replace","match","cells","cell","trim","isHeader","includes","tag","toUpperCase","exports"],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\backtesting\\report-generator.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * BACKTESTING REPORT GENERATOR\r\n * =============================================================================\r\n * \r\n * This module generates comprehensive backtesting reports in multiple formats\r\n * including JSON, HTML, and detailed analysis reports. The reports include\r\n * performance metrics, trade analysis, risk assessment, and visual charts.\r\n * \r\n * REPORT FEATURES:\r\n * - Comprehensive performance analysis\r\n * - Strategy breakdown and comparison\r\n * - Risk metrics and drawdown analysis\r\n * - Trade-by-trade detailed analysis\r\n * - Visual charts and equity curves\r\n * - Monthly and yearly performance breakdown\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport fs from 'fs/promises';\r\nimport path from 'path';\r\nimport { logger } from '@/core/logging/logger';\r\nimport { \r\n  BacktestResult, \r\n  BacktestReportConfig,\r\n  BenchmarkComparison,\r\n  MonthlyReturn \r\n} from './types';\r\n\r\n/**\r\n * Report section interface\r\n */\r\ninterface ReportSection {\r\n  title: string;\r\n  content: string;\r\n  charts?: ChartData[];\r\n}\r\n\r\n/**\r\n * Chart data interface\r\n */\r\ninterface ChartData {\r\n  type: 'line' | 'bar' | 'pie' | 'scatter';\r\n  title: string;\r\n  data: any[];\r\n  xAxis?: string;\r\n  yAxis?: string;\r\n}\r\n\r\n/**\r\n * Comprehensive Backtesting Report Generator\r\n */\r\nexport class BacktestReportGenerator {\r\n  \r\n  /**\r\n   * Generate comprehensive backtesting report\r\n   */\r\n  public static async generateReport(\r\n    result: BacktestResult,\r\n    config: BacktestReportConfig,\r\n    benchmark?: BenchmarkComparison\r\n  ): Promise<string> {\r\n    logger.info('üìä Generating comprehensive backtesting report...');\r\n    \r\n    try {\r\n      const sections = await this.generateReportSections(result, config, benchmark);\r\n      \r\n      let report: string;\r\n      \r\n      switch (config.format) {\r\n        case 'HTML':\r\n          report = await this.generateHTMLReport(sections, result);\r\n          break;\r\n        case 'JSON':\r\n          report = await this.generateJSONReport(result);\r\n          break;\r\n        case 'PDF':\r\n          // PDF generation would require additional libraries\r\n          report = await this.generateHTMLReport(sections, result);\r\n          logger.warn('‚ö†Ô∏è PDF generation not implemented, generated HTML instead');\r\n          break;\r\n        default:\r\n          report = await this.generateJSONReport(result);\r\n      }\r\n      \r\n      // Save report to file if output path specified\r\n      if (config.outputPath) {\r\n        await this.saveReport(report, config.outputPath, config.format);\r\n      }\r\n      \r\n      logger.info('‚úÖ Backtesting report generated successfully');\r\n      return report;\r\n      \r\n    } catch (error) {\r\n      logger.error('‚ùå Failed to generate backtesting report:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate report sections\r\n   */\r\n  private static async generateReportSections(\r\n    result: BacktestResult,\r\n    config: BacktestReportConfig,\r\n    benchmark?: BenchmarkComparison\r\n  ): Promise<ReportSection[]> {\r\n    const sections: ReportSection[] = [];\r\n    \r\n    // Executive Summary\r\n    sections.push(await this.generateExecutiveSummary(result, benchmark));\r\n    \r\n    // Performance Metrics\r\n    sections.push(await this.generatePerformanceSection(result));\r\n    \r\n    // Risk Analysis\r\n    if (config.includeRiskMetrics) {\r\n      sections.push(await this.generateRiskSection(result));\r\n    }\r\n    \r\n    // Trade Analysis\r\n    if (config.includeTradeDetails) {\r\n      sections.push(await this.generateTradeAnalysisSection(result));\r\n    }\r\n    \r\n    // Strategy Breakdown\r\n    if (config.includeStrategyBreakdown) {\r\n      sections.push(await this.generateStrategySection(result));\r\n    }\r\n    \r\n    // Monthly Returns\r\n    if (config.includeMonthlyReturns) {\r\n      sections.push(await this.generateMonthlyReturnsSection(result));\r\n    }\r\n    \r\n    // Benchmark Comparison\r\n    if (config.includeBenchmarkComparison && benchmark) {\r\n      sections.push(await this.generateBenchmarkSection(result, benchmark));\r\n    }\r\n    \r\n    // Charts and Visualizations\r\n    if (config.includeCharts) {\r\n      sections.push(await this.generateChartsSection(result));\r\n    }\r\n    \r\n    return sections;\r\n  }\r\n\r\n  /**\r\n   * Generate executive summary section\r\n   */\r\n  private static async generateExecutiveSummary(\r\n    result: BacktestResult,\r\n    benchmark?: BenchmarkComparison\r\n  ): Promise<ReportSection> {\r\n    const perf = result.performance;\r\n    const trades = result.trades;\r\n    \r\n    const summary = `\r\n## Executive Summary\r\n\r\n**Strategy Performance Overview**\r\n- **Total Return**: ${perf.totalReturnPercentage.toFixed(2)}% (${perf.totalReturn.toFixed(2)} USDT)\r\n- **Annualized Return**: ${perf.annualizedReturn.toFixed(2)}%\r\n- **Sharpe Ratio**: ${perf.sharpeRatio.toFixed(2)}\r\n- **Maximum Drawdown**: ${perf.maxDrawdownPercentage.toFixed(2)}%\r\n- **Win Rate**: ${trades.winRate.toFixed(1)}%\r\n- **Profit Factor**: ${perf.profitFactor.toFixed(2)}\r\n\r\n**Trading Activity**\r\n- **Total Trades**: ${trades.total}\r\n- **Winning Trades**: ${trades.winning}\r\n- **Losing Trades**: ${trades.losing}\r\n- **Average Win**: $${trades.averageWin.toFixed(2)}\r\n- **Average Loss**: $${trades.averageLoss.toFixed(2)}\r\n- **Largest Win**: $${trades.largestWin.toFixed(2)}\r\n- **Largest Loss**: $${trades.largestLoss.toFixed(2)}\r\n\r\n**Risk Assessment**\r\n- **Volatility**: ${result.risk.volatility.toFixed(2)}%\r\n- **Value at Risk (95%)**: ${result.risk.var95.toFixed(2)}%\r\n- **Conditional VaR (95%)**: ${result.risk.cvar95.toFixed(2)}%\r\n- **Recovery Factor**: ${perf.recoveryFactor.toFixed(2)}\r\n\r\n**Data Quality**\r\n- **Total Data Points**: ${result.dataQuality.totalDataPoints.toLocaleString()}\r\n- **Data Integrity Score**: ${result.dataQuality.dataIntegrityScore.toFixed(1)}%\r\n- **Data Source**: ${result.dataQuality.dataSource}\r\n- **Gaps Detected**: ${result.dataQuality.gapsDetected}\r\n\r\n${benchmark ? `\r\n**Benchmark Comparison**\r\n- **Outperformance**: ${benchmark.outperformance.totalReturn.toFixed(2)}%\r\n- **Risk-Adjusted Outperformance**: ${benchmark.outperformance.riskAdjustedReturn.toFixed(2)}%\r\n- **Information Ratio**: ${benchmark.outperformance.informationRatio.toFixed(2)}\r\n` : ''}\r\n\r\n**Period**: ${result.period.start.toISOString().split('T')[0]} to ${result.period.end.toISOString().split('T')[0]} (${result.period.durationDays.toFixed(0)} days)\r\n`;\r\n    \r\n    return {\r\n      title: 'Executive Summary',\r\n      content: summary,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generate performance metrics section\r\n   */\r\n  private static async generatePerformanceSection(result: BacktestResult): Promise<ReportSection> {\r\n    const perf = result.performance;\r\n    \r\n    const content = `\r\n## Performance Metrics\r\n\r\n### Return Metrics\r\n| Metric | Value |\r\n|--------|-------|\r\n| Total Return | ${perf.totalReturnPercentage.toFixed(2)}% |\r\n| Total Return (USDT) | $${perf.totalReturn.toFixed(2)} |\r\n| Annualized Return | ${perf.annualizedReturn.toFixed(2)}% |\r\n| Expected Value per Trade | $${perf.expectedValue.toFixed(2)} |\r\n\r\n### Risk-Adjusted Returns\r\n| Metric | Value | Description |\r\n|--------|-------|-------------|\r\n| Sharpe Ratio | ${perf.sharpeRatio.toFixed(2)} | Risk-adjusted return vs risk-free rate |\r\n| Sortino Ratio | ${perf.sortinoRatio.toFixed(2)} | Return vs downside deviation |\r\n| Calmar Ratio | ${perf.calmarRatio.toFixed(2)} | Annual return vs maximum drawdown |\r\n\r\n### Drawdown Analysis\r\n| Metric | Value |\r\n|--------|-------|\r\n| Maximum Drawdown | ${perf.maxDrawdownPercentage.toFixed(2)}% |\r\n| Maximum Drawdown (USDT) | $${perf.maxDrawdown.toFixed(2)} |\r\n| Average Drawdown | ${perf.averageDrawdown.toFixed(2)}% |\r\n| Recovery Factor | ${perf.recoveryFactor.toFixed(2)} |\r\n\r\n### Trading Efficiency\r\n| Metric | Value |\r\n|--------|-------|\r\n| Profit Factor | ${perf.profitFactor.toFixed(2)} |\r\n| Payoff Ratio | ${perf.payoffRatio.toFixed(2)} |\r\n`;\r\n    \r\n    return {\r\n      title: 'Performance Metrics',\r\n      content,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generate risk analysis section\r\n   */\r\n  private static async generateRiskSection(result: BacktestResult): Promise<ReportSection> {\r\n    const risk = result.risk;\r\n    \r\n    const content = `\r\n## Risk Analysis\r\n\r\n### Volatility Metrics\r\n| Metric | Value | Description |\r\n|--------|-------|-------------|\r\n| Volatility (Annualized) | ${risk.volatility.toFixed(2)}% | Standard deviation of returns |\r\n| Downside Deviation | ${risk.downside_deviation.toFixed(2)}% | Volatility of negative returns |\r\n\r\n### Value at Risk (VaR)\r\n| Confidence Level | Value | Description |\r\n|------------------|-------|-------------|\r\n| VaR 95% | ${risk.var95.toFixed(2)}% | Maximum expected loss (95% confidence) |\r\n| CVaR 95% | ${risk.cvar95.toFixed(2)}% | Expected loss beyond VaR |\r\n\r\n### Market Correlation\r\n| Metric | Value | Description |\r\n|--------|-------|-------------|\r\n| Beta | ${risk.beta.toFixed(2)} | Correlation with market benchmark |\r\n| Alpha | ${risk.alpha.toFixed(2)}% | Excess return over benchmark |\r\n| Information Ratio | ${risk.informationRatio.toFixed(2)} | Risk-adjusted excess return |\r\n\r\n### Risk Assessment\r\n${this.generateRiskAssessment(result)}\r\n`;\r\n    \r\n    return {\r\n      title: 'Risk Analysis',\r\n      content,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generate trade analysis section\r\n   */\r\n  private static async generateTradeAnalysisSection(result: BacktestResult): Promise<ReportSection> {\r\n    const trades = result.trades;\r\n    \r\n    const content = `\r\n## Trade Analysis\r\n\r\n### Trade Statistics\r\n| Metric | Value |\r\n|--------|-------|\r\n| Total Trades | ${trades.total} |\r\n| Winning Trades | ${trades.winning} |\r\n| Losing Trades | ${trades.losing} |\r\n| Win Rate | ${trades.winRate.toFixed(1)}% |\r\n\r\n### Win/Loss Analysis\r\n| Metric | Value |\r\n|--------|-------|\r\n| Average Win | $${trades.averageWin.toFixed(2)} |\r\n| Average Loss | $${trades.averageLoss.toFixed(2)} |\r\n| Largest Win | $${trades.largestWin.toFixed(2)} |\r\n| Largest Loss | $${trades.largestLoss.toFixed(2)} |\r\n| Payoff Ratio | ${(trades.averageWin / Math.max(trades.averageLoss, 0.01)).toFixed(2)} |\r\n\r\n### Consecutive Trades\r\n| Metric | Value |\r\n|--------|-------|\r\n| Max Consecutive Wins | ${trades.maxConsecutiveWins} |\r\n| Max Consecutive Losses | ${trades.maxConsecutiveLosses} |\r\n\r\n### Trade Distribution\r\n${this.generateTradeDistribution(result.executionDetails)}\r\n\r\n### Top 10 Best Trades\r\n${this.generateTopTrades(result.executionDetails, 'best')}\r\n\r\n### Top 10 Worst Trades\r\n${this.generateTopTrades(result.executionDetails, 'worst')}\r\n`;\r\n    \r\n    return {\r\n      title: 'Trade Analysis',\r\n      content,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generate strategy breakdown section\r\n   */\r\n  private static async generateStrategySection(result: BacktestResult): Promise<ReportSection> {\r\n    const strategies = Object.entries(result.strategyPerformance);\r\n    \r\n    let content = `\r\n## Strategy Performance Breakdown\r\n\r\n### Strategy Comparison\r\n| Strategy | Trades | Win Rate | Total Return | Profit Factor | Avg Holding |\r\n|----------|--------|----------|--------------|---------------|-------------|\r\n`;\r\n    \r\n    for (const [name, perf] of strategies) {\r\n      content += `| ${name} | ${perf.trades} | ${perf.winRate.toFixed(1)}% | $${perf.totalReturn.toFixed(2)} | ${perf.profitFactor.toFixed(2)} | ${perf.averageHoldingPeriod.toFixed(1)}h |\\n`;\r\n    }\r\n    \r\n    content += `\\n### Strategy Analysis\\n`;\r\n    \r\n    for (const [name, perf] of strategies) {\r\n      content += `\r\n#### ${name}\r\n- **Signal Accuracy**: ${(perf.signalAccuracy * 100).toFixed(1)}%\r\n- **Average Holding Period**: ${perf.averageHoldingPeriod.toFixed(1)} hours\r\n- **Contribution to Performance**: ${perf.contribution.toFixed(2)}%\r\n`;\r\n    }\r\n    \r\n    return {\r\n      title: 'Strategy Performance',\r\n      content,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generate monthly returns section\r\n   */\r\n  private static async generateMonthlyReturnsSection(result: BacktestResult): Promise<ReportSection> {\r\n    const monthlyReturns = result.monthlyReturns;\r\n    \r\n    let content = `\r\n## Monthly Performance Analysis\r\n\r\n### Monthly Returns Table\r\n| Year | Month | Return | Return % | Trades | Win Rate | Max DD |\r\n|------|-------|--------|----------|--------|----------|--------|\r\n`;\r\n    \r\n    for (const month of monthlyReturns) {\r\n      const monthName = new Date(month.year, month.month).toLocaleString('default', { month: 'long' });\r\n      content += `| ${month.year} | ${monthName} | $${month.return.toFixed(2)} | ${month.returnPercentage.toFixed(2)}% | ${month.trades} | ${month.winRate.toFixed(1)}% | ${month.maxDrawdown.toFixed(2)}% |\\n`;\r\n    }\r\n    \r\n    // Calculate yearly summaries\r\n    const yearlyData = this.calculateYearlySummaries(monthlyReturns);\r\n    \r\n    content += `\\n### Yearly Performance Summary\\n`;\r\n    content += `| Year | Total Return | Return % | Trades | Win Rate | Best Month | Worst Month |\\n`;\r\n    content += `|------|--------------|----------|--------|----------|------------|-------------|\\n`;\r\n    \r\n    for (const [year, data] of Object.entries(yearlyData)) {\r\n      content += `| ${year} | $${data.totalReturn.toFixed(2)} | ${data.returnPercentage.toFixed(2)}% | ${data.totalTrades} | ${data.avgWinRate.toFixed(1)}% | ${data.bestMonth.toFixed(2)}% | ${data.worstMonth.toFixed(2)}% |\\n`;\r\n    }\r\n    \r\n    return {\r\n      title: 'Monthly Performance',\r\n      content,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generate benchmark comparison section\r\n   */\r\n  private static async generateBenchmarkSection(\r\n    result: BacktestResult,\r\n    benchmark: BenchmarkComparison\r\n  ): Promise<ReportSection> {\r\n    const content = `\r\n## Benchmark Comparison\r\n\r\n### Performance vs ${benchmark.benchmark.name}\r\n| Metric | Strategy | Benchmark | Outperformance |\r\n|--------|----------|-----------|----------------|\r\n| Total Return | ${benchmark.strategy.totalReturn.toFixed(2)}% | ${benchmark.benchmark.totalReturn.toFixed(2)}% | ${benchmark.outperformance.totalReturn.toFixed(2)}% |\r\n| Sharpe Ratio | ${benchmark.strategy.sharpeRatio.toFixed(2)} | ${benchmark.benchmark.sharpeRatio.toFixed(2)} | ${benchmark.outperformance.sharpeRatio.toFixed(2)} |\r\n| Max Drawdown | ${benchmark.strategy.maxDrawdown.toFixed(2)}% | ${benchmark.benchmark.maxDrawdown.toFixed(2)}% | ${(benchmark.strategy.maxDrawdown - benchmark.benchmark.maxDrawdown).toFixed(2)}% |\r\n| Volatility | ${benchmark.strategy.volatility.toFixed(2)}% | ${benchmark.benchmark.volatility.toFixed(2)}% | ${(benchmark.strategy.volatility - benchmark.benchmark.volatility).toFixed(2)}% |\r\n\r\n### Risk-Adjusted Performance\r\n- **Risk-Adjusted Outperformance**: ${benchmark.outperformance.riskAdjustedReturn.toFixed(2)}%\r\n- **Information Ratio**: ${benchmark.outperformance.informationRatio.toFixed(2)}\r\n\r\n### Analysis\r\n${this.generateBenchmarkAnalysis(benchmark)}\r\n`;\r\n    \r\n    return {\r\n      title: 'Benchmark Comparison',\r\n      content,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generate charts section\r\n   */\r\n  private static async generateChartsSection(result: BacktestResult): Promise<ReportSection> {\r\n    const charts: ChartData[] = [\r\n      {\r\n        type: 'line',\r\n        title: 'Equity Curve',\r\n        data: result.equityCurve.map(point => ({\r\n          x: point.timestamp.toISOString().split('T')[0],\r\n          y: point.equity,\r\n        })),\r\n        xAxis: 'Date',\r\n        yAxis: 'Equity (USDT)',\r\n      },\r\n      {\r\n        type: 'line',\r\n        title: 'Drawdown Curve',\r\n        data: result.drawdownCurve.map(point => ({\r\n          x: point.timestamp.toISOString().split('T')[0],\r\n          y: -point.drawdownPercentage,\r\n        })),\r\n        xAxis: 'Date',\r\n        yAxis: 'Drawdown (%)',\r\n      },\r\n      {\r\n        type: 'bar',\r\n        title: 'Monthly Returns',\r\n        data: result.monthlyReturns.map(month => ({\r\n          x: `${month.year}-${String(month.month + 1).padStart(2, '0')}`,\r\n          y: month.returnPercentage,\r\n        })),\r\n        xAxis: 'Month',\r\n        yAxis: 'Return (%)',\r\n      },\r\n    ];\r\n    \r\n    const content = `\r\n## Charts and Visualizations\r\n\r\n### Equity Curve\r\nThe equity curve shows the growth of the portfolio over time, including both realized and unrealized profits/losses.\r\n\r\n### Drawdown Analysis\r\nThe drawdown curve illustrates periods when the portfolio value was below its previous peak, helping identify risk periods.\r\n\r\n### Monthly Performance\r\nMonthly returns distribution shows the consistency of the strategy across different market conditions.\r\n\r\n*Note: Interactive charts would be generated in the HTML version of this report.*\r\n`;\r\n    \r\n    return {\r\n      title: 'Charts and Visualizations',\r\n      content,\r\n      charts,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generate HTML report\r\n   */\r\n  private static async generateHTMLReport(sections: ReportSection[], result: BacktestResult): Promise<string> {\r\n    const html = `\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Backtesting Report - ${result.config.symbol}</title>\r\n    <style>\r\n        body {\r\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n            line-height: 1.6;\r\n            color: #333;\r\n            max-width: 1200px;\r\n            margin: 0 auto;\r\n            padding: 20px;\r\n            background-color: #f5f5f5;\r\n        }\r\n        .header {\r\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n            color: white;\r\n            padding: 30px;\r\n            border-radius: 10px;\r\n            margin-bottom: 30px;\r\n            text-align: center;\r\n        }\r\n        .section {\r\n            background: white;\r\n            padding: 25px;\r\n            margin-bottom: 20px;\r\n            border-radius: 8px;\r\n            box-shadow: 0 2px 10px rgba(0,0,0,0.1);\r\n        }\r\n        table {\r\n            width: 100%;\r\n            border-collapse: collapse;\r\n            margin: 15px 0;\r\n        }\r\n        th, td {\r\n            padding: 12px;\r\n            text-align: left;\r\n            border-bottom: 1px solid #ddd;\r\n        }\r\n        th {\r\n            background-color: #f8f9fa;\r\n            font-weight: 600;\r\n        }\r\n        .metric-positive { color: #28a745; font-weight: bold; }\r\n        .metric-negative { color: #dc3545; font-weight: bold; }\r\n        .metric-neutral { color: #6c757d; }\r\n        .chart-placeholder {\r\n            background: #f8f9fa;\r\n            border: 2px dashed #dee2e6;\r\n            padding: 40px;\r\n            text-align: center;\r\n            margin: 20px 0;\r\n            border-radius: 5px;\r\n        }\r\n        h1 { color: white; margin: 0; }\r\n        h2 { color: #495057; border-bottom: 2px solid #e9ecef; padding-bottom: 10px; }\r\n        h3 { color: #6c757d; }\r\n        .summary-grid {\r\n            display: grid;\r\n            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\r\n            gap: 20px;\r\n            margin: 20px 0;\r\n        }\r\n        .summary-card {\r\n            background: #f8f9fa;\r\n            padding: 20px;\r\n            border-radius: 5px;\r\n            border-left: 4px solid #667eea;\r\n        }\r\n        .footer {\r\n            text-align: center;\r\n            margin-top: 40px;\r\n            padding: 20px;\r\n            color: #6c757d;\r\n            border-top: 1px solid #dee2e6;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n    <div class=\"header\">\r\n        <h1>Backtesting Report</h1>\r\n        <p><strong>${result.config.symbol}</strong> | ${result.period.start.toISOString().split('T')[0]} to ${result.period.end.toISOString().split('T')[0]}</p>\r\n        <p>Generated on ${new Date().toISOString().split('T')[0]}</p>\r\n    </div>\r\n    \r\n    ${sections.map(section => `\r\n    <div class=\"section\">\r\n        <h2>${section.title}</h2>\r\n        ${this.markdownToHTML(section.content)}\r\n        ${section.charts ? section.charts.map(chart => `\r\n        <div class=\"chart-placeholder\">\r\n            <h3>${chart.title}</h3>\r\n            <p>üìä Interactive ${chart.type} chart would be displayed here</p>\r\n            <small>Chart Type: ${chart.type} | Data Points: ${chart.data.length}</small>\r\n        </div>\r\n        `).join('') : ''}\r\n    </div>\r\n    `).join('')}\r\n    \r\n    <div class=\"footer\">\r\n        <p>Report generated by AI Crypto Trading System</p>\r\n        <p><small>This report is based on historical backtesting and does not guarantee future performance.</small></p>\r\n    </div>\r\n</body>\r\n</html>\r\n`;\r\n    \r\n    return html;\r\n  }\r\n\r\n  /**\r\n   * Generate JSON report\r\n   */\r\n  private static async generateJSONReport(result: BacktestResult): Promise<string> {\r\n    return JSON.stringify(result, null, 2);\r\n  }\r\n\r\n  /**\r\n   * Save report to file\r\n   */\r\n  private static async saveReport(report: string, outputPath: string, format: string): Promise<void> {\r\n    try {\r\n      // Ensure directory exists\r\n      const dir = path.dirname(outputPath);\r\n      await fs.mkdir(dir, { recursive: true });\r\n      \r\n      // Determine file extension\r\n      const ext = format.toLowerCase() === 'html' ? '.html' : \r\n                  format.toLowerCase() === 'json' ? '.json' : '.txt';\r\n      \r\n      const fullPath = outputPath.endsWith(ext) ? outputPath : `${outputPath}${ext}`;\r\n      \r\n      await fs.writeFile(fullPath, report, 'utf-8');\r\n      logger.info(`üìÑ Report saved to: ${fullPath}`);\r\n      \r\n    } catch (error) {\r\n      logger.error('‚ùå Failed to save report:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Helper methods\r\n   */\r\n  private static generateRiskAssessment(result: BacktestResult): string {\r\n    const risk = result.risk;\r\n    const perf = result.performance;\r\n    \r\n    let assessment = '';\r\n    \r\n    if (perf.sharpeRatio > 2) {\r\n      assessment += '‚úÖ **Excellent** risk-adjusted returns (Sharpe > 2)\\n';\r\n    } else if (perf.sharpeRatio > 1) {\r\n      assessment += '‚úÖ **Good** risk-adjusted returns (Sharpe > 1)\\n';\r\n    } else if (perf.sharpeRatio > 0.5) {\r\n      assessment += '‚ö†Ô∏è **Moderate** risk-adjusted returns (Sharpe > 0.5)\\n';\r\n    } else {\r\n      assessment += '‚ùå **Poor** risk-adjusted returns (Sharpe < 0.5)\\n';\r\n    }\r\n    \r\n    if (perf.maxDrawdownPercentage < 10) {\r\n      assessment += '‚úÖ **Low** maximum drawdown (< 10%)\\n';\r\n    } else if (perf.maxDrawdownPercentage < 20) {\r\n      assessment += '‚ö†Ô∏è **Moderate** maximum drawdown (< 20%)\\n';\r\n    } else {\r\n      assessment += '‚ùå **High** maximum drawdown (> 20%)\\n';\r\n    }\r\n    \r\n    if (risk.volatility < 20) {\r\n      assessment += '‚úÖ **Low** volatility (< 20%)\\n';\r\n    } else if (risk.volatility < 40) {\r\n      assessment += '‚ö†Ô∏è **Moderate** volatility (< 40%)\\n';\r\n    } else {\r\n      assessment += '‚ùå **High** volatility (> 40%)\\n';\r\n    }\r\n    \r\n    return assessment;\r\n  }\r\n\r\n  private static generateTradeDistribution(trades: any[]): string {\r\n    const closedTrades = trades.filter(t => t.status === 'CLOSED' && t.pnl !== undefined);\r\n    const pnlRanges = [\r\n      { min: -Infinity, max: -1000, label: '< -$1000' },\r\n      { min: -1000, max: -500, label: '-$1000 to -$500' },\r\n      { min: -500, max: -100, label: '-$500 to -$100' },\r\n      { min: -100, max: 0, label: '-$100 to $0' },\r\n      { min: 0, max: 100, label: '$0 to $100' },\r\n      { min: 100, max: 500, label: '$100 to $500' },\r\n      { min: 500, max: 1000, label: '$500 to $1000' },\r\n      { min: 1000, max: Infinity, label: '> $1000' },\r\n    ];\r\n    \r\n    let distribution = '| P&L Range | Count | Percentage |\\n|-----------|-------|------------|\\n';\r\n    \r\n    for (const range of pnlRanges) {\r\n      const count = closedTrades.filter(t => t.pnl >= range.min && t.pnl < range.max).length;\r\n      const percentage = closedTrades.length > 0 ? (count / closedTrades.length * 100).toFixed(1) : '0.0';\r\n      distribution += `| ${range.label} | ${count} | ${percentage}% |\\n`;\r\n    }\r\n    \r\n    return distribution;\r\n  }\r\n\r\n  private static generateTopTrades(trades: any[], type: 'best' | 'worst'): string {\r\n    const closedTrades = trades.filter(t => t.status === 'CLOSED' && t.pnl !== undefined);\r\n    const sortedTrades = closedTrades.sort((a, b) => type === 'best' ? b.pnl - a.pnl : a.pnl - b.pnl);\r\n    const topTrades = sortedTrades.slice(0, 10);\r\n    \r\n    let table = '| Date | Symbol | Type | P&L | P&L % | Strategy |\\n|------|--------|------|-----|-------|----------|\\n';\r\n    \r\n    for (const trade of topTrades) {\r\n      const date = trade.entryTime.toISOString().split('T')[0];\r\n      const pnlClass = trade.pnl > 0 ? '+' : '';\r\n      table += `| ${date} | ${trade.symbol} | ${trade.type} | ${pnlClass}$${trade.pnl.toFixed(2)} | ${pnlClass}${trade.pnlPercentage.toFixed(2)}% | ${trade.strategy} |\\n`;\r\n    }\r\n    \r\n    return table;\r\n  }\r\n\r\n  private static calculateYearlySummaries(monthlyReturns: MonthlyReturn[]): Record<string, any> {\r\n    const yearlyData: Record<string, any> = {};\r\n    \r\n    for (const month of monthlyReturns) {\r\n      const year = month.year.toString();\r\n      \r\n      if (!yearlyData[year]) {\r\n        yearlyData[year] = {\r\n          totalReturn: 0,\r\n          returnPercentage: 0,\r\n          totalTrades: 0,\r\n          avgWinRate: 0,\r\n          bestMonth: -Infinity,\r\n          worstMonth: Infinity,\r\n          months: 0,\r\n        };\r\n      }\r\n      \r\n      const data = yearlyData[year];\r\n      data.totalReturn += month.return;\r\n      data.returnPercentage += month.returnPercentage;\r\n      data.totalTrades += month.trades;\r\n      data.avgWinRate += month.winRate;\r\n      data.bestMonth = Math.max(data.bestMonth, month.returnPercentage);\r\n      data.worstMonth = Math.min(data.worstMonth, month.returnPercentage);\r\n      data.months++;\r\n    }\r\n    \r\n    // Calculate averages\r\n    for (const data of Object.values(yearlyData)) {\r\n      data.avgWinRate /= data.months;\r\n    }\r\n    \r\n    return yearlyData;\r\n  }\r\n\r\n  private static generateBenchmarkAnalysis(benchmark: BenchmarkComparison): string {\r\n    let analysis = '';\r\n    \r\n    if (benchmark.outperformance.totalReturn > 0) {\r\n      analysis += `‚úÖ The strategy **outperformed** the benchmark by ${benchmark.outperformance.totalReturn.toFixed(2)}%.\\n`;\r\n    } else {\r\n      analysis += `‚ùå The strategy **underperformed** the benchmark by ${Math.abs(benchmark.outperformance.totalReturn).toFixed(2)}%.\\n`;\r\n    }\r\n    \r\n    if (benchmark.outperformance.riskAdjustedReturn > 0) {\r\n      analysis += `‚úÖ **Risk-adjusted outperformance** of ${benchmark.outperformance.riskAdjustedReturn.toFixed(2)}% indicates superior risk management.\\n`;\r\n    } else {\r\n      analysis += `‚ùå **Risk-adjusted underperformance** of ${Math.abs(benchmark.outperformance.riskAdjustedReturn).toFixed(2)}% suggests poor risk management.\\n`;\r\n    }\r\n    \r\n    if (benchmark.outperformance.informationRatio > 0.5) {\r\n      analysis += `‚úÖ **High Information Ratio** (${benchmark.outperformance.informationRatio.toFixed(2)}) indicates consistent outperformance.\\n`;\r\n    } else if (benchmark.outperformance.informationRatio > 0) {\r\n      analysis += `‚ö†Ô∏è **Moderate Information Ratio** (${benchmark.outperformance.informationRatio.toFixed(2)}) shows some outperformance.\\n`;\r\n    } else {\r\n      analysis += `‚ùå **Negative Information Ratio** (${benchmark.outperformance.informationRatio.toFixed(2)}) indicates poor performance vs benchmark.\\n`;\r\n    }\r\n    \r\n    return analysis;\r\n  }\r\n\r\n  private static markdownToHTML(markdown: string): string {\r\n    return markdown\r\n      .replace(/### (.*)/g, '<h3>$1</h3>')\r\n      .replace(/## (.*)/g, '<h2>$1</h2>')\r\n      .replace(/# (.*)/g, '<h1>$1</h1>')\r\n      .replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>')\r\n      .replace(/\\*(.*?)\\*/g, '<em>$1</em>')\r\n      .replace(/\\n\\n/g, '</p><p>')\r\n      .replace(/\\n/g, '<br>')\r\n      .replace(/^/, '<p>')\r\n      .replace(/$/, '</p>')\r\n      .replace(/\\|(.+)\\|/g, (match, content) => {\r\n        const cells = content.split('|').map(cell => cell.trim());\r\n        const isHeader = match.includes('---');\r\n        if (isHeader) return '';\r\n        \r\n        const tag = cells[0] === cells[0].toUpperCase() ? 'th' : 'td';\r\n        return `<tr>${cells.map(cell => `<${tag}>${cell}</${tag}>`).join('')}</tr>`;\r\n      })\r\n      .replace(/(<tr>.*<\\/tr>)/g, '<table>$1</table>')\r\n      .replace(/<\\/table>\\s*<table>/g, '');\r\n  }\r\n}"],"mappings":"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","ignoreList":[]}