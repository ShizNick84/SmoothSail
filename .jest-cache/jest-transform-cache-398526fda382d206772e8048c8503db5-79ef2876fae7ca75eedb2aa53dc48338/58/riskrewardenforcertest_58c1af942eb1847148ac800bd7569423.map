{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\risk\\__tests__\\risk-reward-enforcer.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\risk\\__tests__\\risk-reward-enforcer.test.ts"],"sourcesContent":["/**\r\n * Risk-Reward Enforcer Tests\r\n * \r\n * Comprehensive tests for risk-reward ratio enforcement functionality\r\n */\r\n\r\nimport { describe, it, expect, beforeEach } from '@jest/globals';\r\nimport { RiskRewardEnforcer, TradeProposal, RREnforcementConfig } from '../risk-reward-enforcer.js';\r\nimport { MarketConditions } from '../trailing-stop-manager.js';\r\n\r\ndescribe('RiskRewardEnforcer', () => {\r\n  let enforcer: RiskRewardEnforcer;\r\n  let defaultConfig: RREnforcementConfig;\r\n  let baseProposal: TradeProposal;\r\n  let marketConditions: MarketConditions;\r\n\r\n  beforeEach(() => {\r\n    defaultConfig = {\r\n      minRiskRewardRatio: 1.3,\r\n      preferredRiskRewardRatio: 2.0,\r\n      maxRiskPercentage: 3.0,\r\n      enableDynamicAdjustment: true,\r\n      marketConditionAdjustments: {\r\n        bullish: 0.9, // Lower RR requirement in bullish markets\r\n        bearish: 1.2, // Higher RR requirement in bearish markets\r\n        sideways: 1.1,\r\n        highVolatility: 1.3,\r\n        lowVolatility: 0.8\r\n      }\r\n    };\r\n\r\n    enforcer = new RiskRewardEnforcer(defaultConfig);\r\n\r\n    baseProposal = {\r\n      symbol: 'BTC',\r\n      type: 'LONG',\r\n      entryPrice: 50000,\r\n      stopLossPrice: 49000, // 2% risk\r\n      takeProfitPrice: 52600, // 5.2% reward = 2.6:1 RR\r\n      positionSize: 0.1,\r\n      confidence: 75,\r\n      strategy: 'moving-average-crossover'\r\n    };\r\n\r\n    marketConditions = {\r\n      volatility: 0.3,\r\n      trend: 'BULLISH',\r\n      atr: 1000,\r\n      supportLevel: 49500,\r\n      resistanceLevel: 52000\r\n    };\r\n  });\r\n\r\n  describe('analyzeRiskReward', () => {\r\n    it('should approve trade with good risk-reward ratio', () => {\r\n      const analysis = enforcer.analyzeRiskReward(baseProposal, marketConditions);\r\n\r\n      expect(analysis.riskRewardRatio).toBeCloseTo(2.6, 1);\r\n      expect(analysis.meetsMinimumRR).toBe(true);\r\n      expect(analysis.approved).toBe(true);\r\n      expect(analysis.rejectionReasons).toHaveLength(0);\r\n    });\r\n\r\n    it('should reject trade with poor risk-reward ratio', () => {\r\n      const poorRRProposal = {\r\n        ...baseProposal,\r\n        takeProfitPrice: 50500 // Only 1% reward vs 2% risk = 0.5:1 RR\r\n      };\r\n\r\n      const analysis = enforcer.analyzeRiskReward(poorRRProposal, marketConditions);\r\n\r\n      expect(analysis.riskRewardRatio).toBeCloseTo(0.5, 1);\r\n      expect(analysis.meetsMinimumRR).toBe(false);\r\n      expect(analysis.approved).toBe(false);\r\n      expect(analysis.rejectionReasons).toContain(\r\n        expect.stringContaining('Risk-reward ratio')\r\n      );\r\n    });\r\n\r\n    it('should calculate risk and reward amounts correctly', () => {\r\n      const analysis = enforcer.analyzeRiskReward(baseProposal, marketConditions);\r\n\r\n      const expectedRisk = Math.abs(50000 - 49000) * 0.1; // $100\r\n      const expectedReward = Math.abs(52600 - 50000) * 0.1; // $260\r\n\r\n      expect(analysis.riskAmount).toBeCloseTo(expectedRisk, 2);\r\n      expect(analysis.rewardAmount).toBeCloseTo(expectedReward, 2);\r\n      expect(analysis.riskPercentage).toBeCloseTo(2.0, 1);\r\n      expect(analysis.rewardPercentage).toBeCloseTo(5.2, 1);\r\n    });\r\n\r\n    it('should apply dynamic adjustments based on market conditions', () => {\r\n      const bullishAnalysis = enforcer.analyzeRiskReward(baseProposal, marketConditions);\r\n\r\n      const bearishConditions = { ...marketConditions, trend: 'BEARISH' as const };\r\n      const bearishAnalysis = enforcer.analyzeRiskReward(baseProposal, bearishConditions);\r\n\r\n      // Same trade should have different approval status based on market conditions\r\n      expect(bullishAnalysis.approved).toBe(true);\r\n      // Bearish conditions require higher RR, so this might still be approved due to good base RR\r\n      expect(bearishAnalysis.approved).toBe(true);\r\n    });\r\n\r\n    it('should generate optimization recommendations for poor RR trades', () => {\r\n      const poorRRProposal = {\r\n        ...baseProposal,\r\n        takeProfitPrice: 50650 // 1.3% reward vs 2% risk = 0.65:1 RR\r\n      };\r\n\r\n      const analysis = enforcer.analyzeRiskReward(poorRRProposal, marketConditions);\r\n\r\n      expect(analysis.optimizationRecommendations.length).toBeGreaterThan(0);\r\n      \r\n      const stopLossOptimization = analysis.optimizationRecommendations.find(\r\n        opt => opt.type === 'ADJUST_STOP_LOSS'\r\n      );\r\n      expect(stopLossOptimization).toBeDefined();\r\n      expect(stopLossOptimization?.rrImprovement).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('should handle short positions correctly', () => {\r\n      const shortProposal: TradeProposal = {\r\n        ...baseProposal,\r\n        type: 'SHORT',\r\n        entryPrice: 50000,\r\n        stopLossPrice: 51000, // 2% risk (price goes up)\r\n        takeProfitPrice: 47400 // 5.2% reward (price goes down)\r\n      };\r\n\r\n      const analysis = enforcer.analyzeRiskReward(shortProposal, marketConditions);\r\n\r\n      expect(analysis.riskRewardRatio).toBeCloseTo(2.6, 1);\r\n      expect(analysis.approved).toBe(true);\r\n    });\r\n\r\n    it('should reject trades with excessive risk percentage', () => {\r\n      const highRiskProposal = {\r\n        ...baseProposal,\r\n        stopLossPrice: 45000 // 10% risk\r\n      };\r\n\r\n      const analysis = enforcer.analyzeRiskReward(highRiskProposal, marketConditions);\r\n\r\n      expect(analysis.approved).toBe(false);\r\n      expect(analysis.rejectionReasons).toContain(\r\n        expect.stringContaining('Risk percentage')\r\n      );\r\n    });\r\n\r\n    it('should consider confidence in approval decision', () => {\r\n      const lowConfidenceProposal = {\r\n        ...baseProposal,\r\n        confidence: 30,\r\n        takeProfitPrice: 51500 // Marginal RR ratio\r\n      };\r\n\r\n      const analysis = enforcer.analyzeRiskReward(lowConfidenceProposal, marketConditions);\r\n\r\n      // Low confidence with suboptimal RR should be rejected\r\n      expect(analysis.approved).toBe(false);\r\n      expect(analysis.rejectionReasons).toContain(\r\n        expect.stringContaining('Low confidence')\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('optimization recommendations', () => {\r\n    it('should suggest tightening stop loss for better RR', () => {\r\n      const poorRRProposal = {\r\n        ...baseProposal,\r\n        takeProfitPrice: 50800 // Poor RR\r\n      };\r\n\r\n      const analysis = enforcer.analyzeRiskReward(poorRRProposal, marketConditions);\r\n\r\n      const stopLossRec = analysis.optimizationRecommendations.find(\r\n        opt => opt.type === 'ADJUST_STOP_LOSS'\r\n      );\r\n\r\n      expect(stopLossRec).toBeDefined();\r\n      expect(stopLossRec?.recommendedValue).toBeGreaterThan(poorRRProposal.stopLossPrice);\r\n      expect(stopLossRec?.priority).toBe('HIGH');\r\n    });\r\n\r\n    it('should suggest extending take profit for better RR', () => {\r\n      const poorRRProposal = {\r\n        ...baseProposal,\r\n        takeProfitPrice: 50800 // Poor RR\r\n      };\r\n\r\n      const analysis = enforcer.analyzeRiskReward(poorRRProposal, marketConditions);\r\n\r\n      const takeProfitRec = analysis.optimizationRecommendations.find(\r\n        opt => opt.type === 'ADJUST_TAKE_PROFIT'\r\n      );\r\n\r\n      expect(takeProfitRec).toBeDefined();\r\n      expect(takeProfitRec?.recommendedValue).toBeGreaterThan(poorRRProposal.takeProfitPrice);\r\n    });\r\n\r\n    it('should suggest waiting for better entry', () => {\r\n      const poorRRProposal = {\r\n        ...baseProposal,\r\n        takeProfitPrice: 50800 // Poor RR\r\n      };\r\n\r\n      const analysis = enforcer.analyzeRiskReward(poorRRProposal, marketConditions);\r\n\r\n      const betterEntryRec = analysis.optimizationRecommendations.find(\r\n        opt => opt.type === 'WAIT_FOR_BETTER_ENTRY'\r\n      );\r\n\r\n      expect(betterEntryRec).toBeDefined();\r\n      expect(betterEntryRec?.rrImprovement).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('should prioritize recommendations correctly', () => {\r\n      const poorRRProposal = {\r\n        ...baseProposal,\r\n        takeProfitPrice: 50500 // Very poor RR\r\n      };\r\n\r\n      const analysis = enforcer.analyzeRiskReward(poorRRProposal, marketConditions);\r\n\r\n      // Should have multiple recommendations sorted by priority\r\n      expect(analysis.optimizationRecommendations.length).toBeGreaterThan(1);\r\n      \r\n      const priorities = analysis.optimizationRecommendations.map(opt => opt.priority);\r\n      const highPriorityFirst = priorities[0] === 'HIGH';\r\n      expect(highPriorityFirst).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('performance metrics', () => {\r\n    it('should track performance metrics correctly', () => {\r\n      // Analyze several trades\r\n      enforcer.analyzeRiskReward(baseProposal, marketConditions);\r\n      \r\n      const poorRRProposal = {\r\n        ...baseProposal,\r\n        takeProfitPrice: 50500\r\n      };\r\n      enforcer.analyzeRiskReward(poorRRProposal, marketConditions);\r\n\r\n      const metrics = enforcer.getPerformanceMetrics();\r\n\r\n      expect(metrics.totalTradesAnalyzed).toBe(2);\r\n      expect(metrics.rejectedTradesCount).toBe(1);\r\n      expect(metrics.rrComplianceRate).toBe(50);\r\n      expect(metrics.averageRR).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('should track strategy-specific RR ratios', () => {\r\n      const macdProposal = {\r\n        ...baseProposal,\r\n        strategy: 'macd-crossover'\r\n      };\r\n\r\n      enforcer.analyzeRiskReward(baseProposal, marketConditions);\r\n      enforcer.analyzeRiskReward(macdProposal, marketConditions);\r\n\r\n      const metrics = enforcer.getPerformanceMetrics();\r\n\r\n      expect(metrics.rrByStrategy.has('moving-average-crossover')).toBe(true);\r\n      expect(metrics.rrByStrategy.has('macd-crossover')).toBe(true);\r\n    });\r\n\r\n    it('should generate performance report', () => {\r\n      // Add multiple trades\r\n      for (let i = 0; i < 10; i++) {\r\n        const proposal = {\r\n          ...baseProposal,\r\n          takeProfitPrice: 51000 + (i * 100),\r\n          strategy: i % 2 === 0 ? 'strategy-a' : 'strategy-b'\r\n        };\r\n        enforcer.analyzeRiskReward(proposal, marketConditions);\r\n      }\r\n\r\n      const report = enforcer.generatePerformanceReport();\r\n\r\n      expect(report.summary).toBeDefined();\r\n      expect(report.topStrategies.length).toBeGreaterThan(0);\r\n      expect(report.recentTrends.length).toBe(3); // 10, 20, 50 trade periods\r\n    });\r\n\r\n    it('should reset performance metrics', () => {\r\n      enforcer.analyzeRiskReward(baseProposal, marketConditions);\r\n      \r\n      let metrics = enforcer.getPerformanceMetrics();\r\n      expect(metrics.totalTradesAnalyzed).toBe(1);\r\n\r\n      enforcer.resetPerformanceMetrics();\r\n      \r\n      metrics = enforcer.getPerformanceMetrics();\r\n      expect(metrics.totalTradesAnalyzed).toBe(0);\r\n      expect(enforcer.getTradeHistory()).toHaveLength(0);\r\n    });\r\n  });\r\n\r\n  describe('configuration management', () => {\r\n    it('should update configuration correctly', () => {\r\n      const newConfig = { minRiskRewardRatio: 2.0 };\r\n      enforcer.updateConfig(newConfig);\r\n\r\n      const config = enforcer.getConfig();\r\n      expect(config.minRiskRewardRatio).toBe(2.0);\r\n      expect(config.preferredRiskRewardRatio).toBe(2.0); // Should remain unchanged\r\n    });\r\n\r\n    it('should apply new configuration to analysis', () => {\r\n      // First analysis with default config (1.3 min RR)\r\n      const analysis1 = enforcer.analyzeRiskReward(baseProposal, marketConditions);\r\n      expect(analysis1.approved).toBe(true);\r\n\r\n      // Update to higher minimum RR\r\n      enforcer.updateConfig({ minRiskRewardRatio: 3.0 });\r\n\r\n      // Same trade should now be rejected\r\n      const analysis2 = enforcer.analyzeRiskReward(baseProposal, marketConditions);\r\n      expect(analysis2.approved).toBe(false);\r\n    });\r\n\r\n    it('should disable dynamic adjustment when configured', () => {\r\n      enforcer.updateConfig({ enableDynamicAdjustment: false });\r\n\r\n      const bullishAnalysis = enforcer.analyzeRiskReward(baseProposal, marketConditions);\r\n      \r\n      const bearishConditions = { ...marketConditions, trend: 'BEARISH' as const };\r\n      const bearishAnalysis = enforcer.analyzeRiskReward(baseProposal, bearishConditions);\r\n\r\n      // Without dynamic adjustment, both should have same approval status\r\n      expect(bullishAnalysis.approved).toBe(bearishAnalysis.approved);\r\n    });\r\n  });\r\n\r\n  describe('edge cases', () => {\r\n    it('should handle zero risk scenario', () => {\r\n      const zeroRiskProposal = {\r\n        ...baseProposal,\r\n        stopLossPrice: 50000 // Same as entry price\r\n      };\r\n\r\n      const analysis = enforcer.analyzeRiskReward(zeroRiskProposal, marketConditions);\r\n\r\n      expect(analysis.riskRewardRatio).toBe(0);\r\n      expect(analysis.approved).toBe(false);\r\n    });\r\n\r\n    it('should handle very high confidence trades', () => {\r\n      const highConfidenceProposal = {\r\n        ...baseProposal,\r\n        confidence: 95\r\n      };\r\n\r\n      const analysis = enforcer.analyzeRiskReward(highConfidenceProposal, marketConditions);\r\n\r\n      expect(analysis.approved).toBe(true);\r\n    });\r\n\r\n    it('should handle extreme market conditions', () => {\r\n      const extremeConditions = {\r\n        ...marketConditions,\r\n        volatility: 1.0, // 100% volatility\r\n        trend: 'BEARISH' as const\r\n      };\r\n\r\n      const analysis = enforcer.analyzeRiskReward(baseProposal, extremeConditions);\r\n\r\n      // Should still provide analysis even in extreme conditions\r\n      expect(analysis).toBeDefined();\r\n      expect(analysis.riskRewardRatio).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('should handle missing support/resistance levels', () => {\r\n      const conditionsWithoutLevels = {\r\n        ...marketConditions,\r\n        supportLevel: undefined,\r\n        resistanceLevel: undefined\r\n      };\r\n\r\n      const analysis = enforcer.analyzeRiskReward(baseProposal, conditionsWithoutLevels);\r\n\r\n      expect(analysis).toBeDefined();\r\n      expect(analysis.optimizationRecommendations).toBeDefined();\r\n    });\r\n  });\r\n});"],"version":3}