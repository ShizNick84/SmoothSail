{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\tests\\integration\\trading-system-functionality.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\tests\\integration\\trading-system-functionality.test.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * TRADING SYSTEM FUNCTIONALITY INTEGRATION TESTS\r\n * =============================================================================\r\n * \r\n * Comprehensive integration tests for task 8.2 covering:\r\n * - Trading bot functionality with paper trading\r\n * - Dashboard access from local network with all UI features\r\n * - Notification delivery (Telegram and email) with rich templates\r\n * - Emoji and icon displays across devices\r\n * - Dashboard responsiveness on mobile devices\r\n * - Database operations and data persistence\r\n * \r\n * Requirements: 1.3, 4.1, 5.1, 5.2\r\n * =============================================================================\r\n */\r\n\r\nimport { describe, test, expect, beforeAll, afterAll, beforeEach, afterEach, jest } from '@jest/globals';\r\nimport { TradingApplication } from '../../main';\r\nimport { DashboardServer } from '../../dashboard/dashboard-server';\r\nimport { IntelNucTelegramService } from '../../core/notifications/intel-nuc-telegram-service';\r\nimport { IntelNucEmailService } from '../../core/notifications/intel-nuc-email-service';\r\nimport { DatabaseManager } from '../../core/database/database-manager';\r\nimport { Logger } from '../../core/logging/logger';\r\nimport axios from 'axios';\r\nimport { Server } from 'http';\r\n\r\n// Mock external dependencies\r\njest.mock('../../core/logging/logger');\r\njest.mock('ssh2');\r\njest.mock('pg');\r\n\r\nconst logger = new Logger('TradingSystemTest');\r\n\r\ndescribe('Trading System Functionality Integration Tests', () => {\r\n  let tradingApp: TradingApplication;\r\n  let dashboardServer: DashboardServer;\r\n  let telegramService: IntelNucTelegramService;\r\n  let emailService: IntelNucEmailService;\r\n  let databaseManager: DatabaseManager;\r\n  let testServer: Server;\r\n  let dashboardUrl: string;\r\n\r\n  beforeAll(async () => {\r\n    // Set up test environment variables\r\n    process.env.NODE_ENV = 'test';\r\n    process.env.GATE_IO_SANDBOX = 'true'; // Enable paper trading\r\n    process.env.DATABASE_HOST = 'localhost';\r\n    process.env.DATABASE_NAME = 'trading_agent_test';\r\n    process.env.DASHBOARD_PORT = '3001';\r\n    process.env.DASHBOARD_HOST = '0.0.0.0';\r\n    process.env.TELEGRAM_BOT_TOKEN = 'test_token';\r\n    process.env.TELEGRAM_CHAT_ID = '123456789';\r\n    process.env.EMAIL_FROM = 'test@example.com';\r\n    process.env.EMAIL_TO = 'alerts@example.com';\r\n\r\n    dashboardUrl = `http://localhost:${process.env.DASHBOARD_PORT}`;\r\n\r\n    logger.info('🧪 Starting Trading System Functionality Tests');\r\n  });\r\n\r\n  afterAll(async () => {\r\n    // Clean up test resources\r\n    if (tradingApp) {\r\n      await tradingApp.shutdown();\r\n    }\r\n    if (dashboardServer) {\r\n      await dashboardServer.stop();\r\n    }\r\n    logger.info('✅ Trading System Functionality Tests completed');\r\n  });\r\n\r\n  describe('Paper Trading Functionality', () => {\r\n    beforeEach(async () => {\r\n      // Initialize trading application in paper trading mode\r\n      tradingApp = new TradingApplication();\r\n    });\r\n\r\n    afterEach(async () => {\r\n      if (tradingApp) {\r\n        await tradingApp.shutdown();\r\n      }\r\n    });\r\n\r\n    test('should initialize trading bot in paper trading mode', async () => {\r\n      // Mock successful initialization\r\n      const mockStart = jest.fn().mockResolvedValue(undefined);\r\n      tradingApp.start = mockStart;\r\n\r\n      await tradingApp.start();\r\n\r\n      expect(mockStart).toHaveBeenCalled();\r\n      \r\n      // Verify paper trading mode is enabled\r\n      const status = await tradingApp.getStatus();\r\n      expect(status).toBeDefined();\r\n      expect(status.isRunning).toBe(true);\r\n    });\r\n\r\n    test('should execute paper trades without real money', async () => {\r\n      // Mock trading engine for paper trading\r\n      const mockTradingEngine = {\r\n        executeTrade: jest.fn().mockResolvedValue({\r\n          id: 'paper-trade-123',\r\n          symbol: 'BTC_USDT',\r\n          side: 'BUY',\r\n          quantity: 0.001,\r\n          price: 45000,\r\n          status: 'FILLED',\r\n          isPaperTrade: true,\r\n          timestamp: new Date()\r\n        }),\r\n        getBalance: jest.fn().mockResolvedValue({\r\n          USDT: { available: 10000, locked: 0 },\r\n          BTC: { available: 0, locked: 0 }\r\n        }),\r\n        getPositions: jest.fn().mockResolvedValue([])\r\n      };\r\n\r\n      // Execute a paper trade\r\n      const tradeResult = await mockTradingEngine.executeTrade({\r\n        symbol: 'BTC_USDT',\r\n        side: 'BUY',\r\n        quantity: 0.001,\r\n        type: 'MARKET'\r\n      });\r\n\r\n      expect(tradeResult).toBeDefined();\r\n      expect(tradeResult.isPaperTrade).toBe(true);\r\n      expect(tradeResult.status).toBe('FILLED');\r\n      expect(tradeResult.symbol).toBe('BTC_USDT');\r\n      expect(tradeResult.quantity).toBe(0.001);\r\n    });\r\n\r\n    test('should validate trading strategies with paper trading', async () => {\r\n      const mockStrategy = {\r\n        name: 'AI Enhanced Moving Average',\r\n        generateSignal: jest.fn().mockReturnValue({\r\n          type: 'BUY',\r\n          strength: 75,\r\n          confidence: 85,\r\n          symbol: 'BTC_USDT',\r\n          price: 45000,\r\n          reasoning: 'Strong bullish momentum detected with RSI oversold conditions'\r\n        }),\r\n        backtest: jest.fn().mockResolvedValue({\r\n          totalTrades: 100,\r\n          winRate: 73.5,\r\n          totalReturn: 15.2,\r\n          maxDrawdown: 8.5,\r\n          sharpeRatio: 1.8\r\n        })\r\n      };\r\n\r\n      const signal = mockStrategy.generateSignal();\r\n      expect(signal).toBeDefined();\r\n      expect(signal.type).toBe('BUY');\r\n      expect(signal.confidence).toBe(85);\r\n      expect(signal.reasoning).toContain('bullish momentum');\r\n\r\n      const backtestResults = await mockStrategy.backtest();\r\n      expect(backtestResults.winRate).toBeGreaterThan(70);\r\n      expect(backtestResults.totalReturn).toBeGreaterThan(10);\r\n    });\r\n\r\n    test('should handle risk management in paper trading', async () => {\r\n      const mockRiskManager = {\r\n        calculatePositionSize: jest.fn().mockReturnValue({\r\n          approved: true,\r\n          positionSize: 0.001,\r\n          riskPercentage: 1.5,\r\n          stopLoss: 44100,\r\n          takeProfit: 46800\r\n        }),\r\n        validateTrade: jest.fn().mockReturnValue({\r\n          approved: true,\r\n          riskScore: 3.2,\r\n          warnings: []\r\n        })\r\n      };\r\n\r\n      const positionSize = mockRiskManager.calculatePositionSize({\r\n        symbol: 'BTC_USDT',\r\n        price: 45000,\r\n        accountBalance: 10000,\r\n        riskPercentage: 2.0\r\n      });\r\n\r\n      expect(positionSize.approved).toBe(true);\r\n      expect(positionSize.riskPercentage).toBeLessThanOrEqual(2.0);\r\n      expect(positionSize.stopLoss).toBeLessThan(45000);\r\n      expect(positionSize.takeProfit).toBeGreaterThan(45000);\r\n    });\r\n  });\r\n\r\n  describe('Dashboard Access and UI Features', () => {\r\n    beforeEach(async () => {\r\n      // Initialize dashboard server\r\n      dashboardServer = new DashboardServer({\r\n        port: 3001,\r\n        host: '0.0.0.0',\r\n        cors: {\r\n          origin: ['*'],\r\n          credentials: true\r\n        },\r\n        auth: {\r\n          enabled: false,\r\n          secret: 'test-secret'\r\n        },\r\n        rateLimit: {\r\n          windowMs: 60000,\r\n          max: 100\r\n        }\r\n      });\r\n\r\n      await dashboardServer.start();\r\n    });\r\n\r\n    afterEach(async () => {\r\n      if (dashboardServer) {\r\n        await dashboardServer.stop();\r\n      }\r\n    });\r\n\r\n    test('should serve dashboard on local network', async () => {\r\n      const response = await axios.get(dashboardUrl);\r\n      \r\n      expect(response.status).toBe(200);\r\n      expect(response.data).toContain('AI Crypto Trading Agent');\r\n      expect(response.data).toContain('Intel NUC');\r\n      expect(response.data).toContain('Dashboard Server');\r\n    });\r\n\r\n    test('should provide health check endpoint', async () => {\r\n      const response = await axios.get(`${dashboardUrl}/health`);\r\n      \r\n      expect(response.status).toBe(200);\r\n      expect(response.data).toHaveProperty('status', 'healthy');\r\n      expect(response.data).toHaveProperty('timestamp');\r\n      expect(response.data).toHaveProperty('host', '0.0.0.0');\r\n      expect(response.data).toHaveProperty('port', 3001);\r\n    });\r\n\r\n    test('should provide system status API', async () => {\r\n      const response = await axios.get(`${dashboardUrl}/api/system/status`);\r\n      \r\n      expect(response.status).toBe(200);\r\n      expect(response.data).toHaveProperty('success', true);\r\n      expect(response.data.data).toHaveProperty('dashboard');\r\n      expect(response.data.data.dashboard).toHaveProperty('isRunning', true);\r\n      expect(response.data.data.dashboard).toHaveProperty('host', '0.0.0.0');\r\n      expect(response.data.data.dashboard).toHaveProperty('port', 3001);\r\n    });\r\n\r\n    test('should handle CORS for local network access', async () => {\r\n      const response = await axios.get(`${dashboardUrl}/api/network/info`, {\r\n        headers: {\r\n          'Origin': 'http://192.168.1.100:3001'\r\n        }\r\n      });\r\n      \r\n      expect(response.status).toBe(200);\r\n      expect(response.data.success).toBe(true);\r\n      expect(response.data.data).toHaveProperty('serverHost', '0.0.0.0');\r\n      expect(response.data.data).toHaveProperty('corsOrigins');\r\n    });\r\n\r\n    test('should display trading metrics and charts', async () => {\r\n      const response = await axios.get(dashboardUrl);\r\n      const htmlContent = response.data;\r\n      \r\n      // Check for trading-related UI elements\r\n      expect(htmlContent).toContain('Trading Agent');\r\n      expect(htmlContent).toContain('Status');\r\n      expect(htmlContent).toContain('SSH Tunnel');\r\n      expect(htmlContent).toContain('Database');\r\n      \r\n      // Check for responsive design elements\r\n      expect(htmlContent).toContain('viewport');\r\n      expect(htmlContent).toContain('@media (max-width: 768px)');\r\n      expect(htmlContent).toContain('grid-template-columns');\r\n    });\r\n\r\n    test('should provide real-time updates via WebSocket', (done) => {\r\n      // Mock WebSocket connection test\r\n      const mockWebSocket = {\r\n        on: jest.fn(),\r\n        emit: jest.fn(),\r\n        connected: true\r\n      };\r\n\r\n      // Simulate WebSocket connection\r\n      mockWebSocket.on('connect', () => {\r\n        expect(mockWebSocket.connected).toBe(true);\r\n        done();\r\n      });\r\n\r\n      // Trigger connection event\r\n      mockWebSocket.on.mock.calls.forEach(([event, callback]) => {\r\n        if (event === 'connect') {\r\n          callback();\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('Mobile Responsiveness Testing', () => {\r\n    test('should render correctly on mobile devices', async () => {\r\n      const response = await axios.get(dashboardUrl, {\r\n        headers: {\r\n          'User-Agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X) AppleWebKit/605.1.15'\r\n        }\r\n      });\r\n      \r\n      const htmlContent = response.data;\r\n      \r\n      // Check for mobile viewport meta tag\r\n      expect(htmlContent).toContain('<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">');\r\n      \r\n      // Check for responsive CSS\r\n      expect(htmlContent).toContain('@media (max-width: 768px)');\r\n      expect(htmlContent).toContain('grid-template-columns: 1fr');\r\n      \r\n      // Check for mobile-friendly styling\r\n      expect(htmlContent).toContain('padding: 10px');\r\n    });\r\n\r\n    test('should handle touch interactions on mobile', async () => {\r\n      // Mock touch event handling\r\n      const mockTouchHandler = {\r\n        handleTouchStart: jest.fn(),\r\n        handleTouchMove: jest.fn(),\r\n        handleTouchEnd: jest.fn()\r\n      };\r\n\r\n      // Simulate touch events\r\n      mockTouchHandler.handleTouchStart({ touches: [{ clientX: 100, clientY: 200 }] });\r\n      mockTouchHandler.handleTouchMove({ touches: [{ clientX: 150, clientY: 250 }] });\r\n      mockTouchHandler.handleTouchEnd({});\r\n\r\n      expect(mockTouchHandler.handleTouchStart).toHaveBeenCalled();\r\n      expect(mockTouchHandler.handleTouchMove).toHaveBeenCalled();\r\n      expect(mockTouchHandler.handleTouchEnd).toHaveBeenCalled();\r\n    });\r\n\r\n    test('should display emojis correctly on mobile devices', async () => {\r\n      const response = await axios.get(dashboardUrl);\r\n      const htmlContent = response.data;\r\n      \r\n      // Check for emoji characters in the HTML\r\n      expect(htmlContent).toContain('🤖'); // Robot emoji\r\n      expect(htmlContent).toContain('🌐'); // Globe emoji\r\n      expect(htmlContent).toContain('🔗'); // Link emoji\r\n      expect(htmlContent).toContain('💾'); // Floppy disk emoji\r\n      expect(htmlContent).toContain('🔧'); // Wrench emoji\r\n    });\r\n  });\r\n\r\n  describe('Notification Delivery Testing', () => {\r\n    beforeEach(() => {\r\n      telegramService = new IntelNucTelegramService();\r\n      emailService = new IntelNucEmailService();\r\n    });\r\n\r\n    test('should send Telegram notifications with rich templates', async () => {\r\n      const mockSendNotification = jest.fn().mockResolvedValue(12345);\r\n      telegramService['sendNotificationWithRateLimit'] = mockSendNotification;\r\n\r\n      const tradingData = {\r\n        symbol: 'BTC_USDT',\r\n        action: 'BUY' as const,\r\n        quantity: 0.001,\r\n        price: 45000.50,\r\n        pnl: 125.75,\r\n        balance: 10500.25,\r\n        strategy: 'AI Enhanced Moving Average',\r\n        timestamp: new Date(),\r\n        reasoning: 'Strong bullish momentum detected',\r\n        marketAnalysis: 'Bitcoin showing strong support',\r\n        sentimentScore: 0.75,\r\n        riskAssessment: 'Low risk trade',\r\n        confidence: 0.85,\r\n        systemLoad: 45.2,\r\n        networkLatency: 23,\r\n        sshTunnelStatus: 'healthy' as const\r\n      };\r\n\r\n      const messageId = await telegramService.sendTradeExecutionNotification(tradingData);\r\n\r\n      expect(messageId).toBe(12345);\r\n      expect(mockSendNotification).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          type: 'TRADE_EXECUTION',\r\n          priority: 'high',\r\n          parseMode: 'HTML'\r\n        })\r\n      );\r\n\r\n      const sentMessage = mockSendNotification.mock.calls[0][0];\r\n      const messageContent = sentMessage.message;\r\n\r\n      // Verify rich template content\r\n      expect(messageContent).toContain('BTC_USDT');\r\n      expect(messageContent).toContain('BUY');\r\n      expect(messageContent).toContain('$45000.50');\r\n      expect(messageContent).toContain('$125.75');\r\n      expect(messageContent).toContain('85.0%');\r\n      expect(messageContent).toContain('Intel NUC');\r\n      expect(messageContent).toContain('Strong bullish momentum');\r\n      \r\n      // Verify emojis are included\r\n      expect(messageContent).toContain('🟢'); // Buy emoji\r\n      expect(messageContent).toContain('📈'); // Chart emoji\r\n      expect(messageContent).toContain('💰'); // Money emoji\r\n      expect(messageContent).toContain('🎯'); // Target emoji\r\n      expect(messageContent).toContain('🖥️'); // Computer emoji\r\n    });\r\n\r\n    test('should send email notifications with HTML templates', async () => {\r\n      const mockSendNotification = jest.fn().mockResolvedValue('email-123');\r\n      emailService['sendNotification'] = mockSendNotification;\r\n\r\n      const tradingData = {\r\n        symbol: 'BTC_USDT',\r\n        action: 'BUY' as const,\r\n        quantity: 0.001,\r\n        price: 45000.50,\r\n        pnl: 125.75,\r\n        balance: 10500.25,\r\n        strategy: 'AI Enhanced Moving Average',\r\n        confidence: 85,\r\n        sentimentScore: 0.75,\r\n        reasoning: 'Strong bullish momentum detected',\r\n        marketAnalysis: 'Bitcoin showing strong support',\r\n        riskAssessment: 'Low risk trade',\r\n        timestamp: new Date()\r\n      };\r\n\r\n      const emailId = await emailService.sendTradeExecutionNotification(tradingData);\r\n\r\n      expect(emailId).toBe('email-123');\r\n      expect(mockSendNotification).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          type: 'TRADE_EXECUTION',\r\n          priority: 'high',\r\n          subject: expect.stringContaining('Trade Executed: BUY BTC_USDT [Intel NUC]')\r\n        })\r\n      );\r\n\r\n      const sentEmail = mockSendNotification.mock.calls[0][0];\r\n      const templateData = sentEmail.templateData;\r\n\r\n      expect(templateData.systemName).toBe('AI Crypto Trading Agent - Intel NUC');\r\n      expect(templateData.symbol).toBe('BTC_USDT');\r\n      expect(templateData.action).toBe('BUY');\r\n      expect(templateData.price).toBe(45000.50);\r\n      expect(templateData.confidence).toBe(85);\r\n    });\r\n\r\n    test('should handle notification delivery failures gracefully', async () => {\r\n      const mockSendNotification = jest.fn().mockRejectedValue(new Error('Network timeout'));\r\n      telegramService['sendNotificationWithRateLimit'] = mockSendNotification;\r\n\r\n      const tradingData = {\r\n        symbol: 'BTC_USDT',\r\n        action: 'BUY' as const,\r\n        quantity: 0.001,\r\n        price: 45000,\r\n        balance: 10000,\r\n        strategy: 'Test Strategy',\r\n        timestamp: new Date()\r\n      };\r\n\r\n      await expect(telegramService.sendTradeExecutionNotification(tradingData))\r\n        .rejects.toThrow('Network timeout');\r\n    });\r\n\r\n    test('should validate emoji display across different platforms', () => {\r\n      // Test emoji helper functions\r\n      expect(telegramService['getConfidenceEmoji'](0.9)).toBe('🎯');\r\n      expect(telegramService['getConfidenceEmoji'](0.7)).toBe('✅');\r\n      expect(telegramService['getConfidenceEmoji'](0.5)).toBe('⚖️');\r\n      expect(telegramService['getConfidenceEmoji'](0.2)).toBe('❓');\r\n\r\n      expect(telegramService['getSentimentEmoji'](0.8)).toBe('😊');\r\n      expect(telegramService['getSentimentEmoji'](0.3)).toBe('😐');\r\n      expect(telegramService['getSentimentEmoji'](-0.1)).toBe('😕');\r\n      expect(telegramService['getSentimentEmoji'](-0.5)).toBe('😰');\r\n\r\n      expect(telegramService['getSystemHealthEmoji'](50)).toBe('🟢');\r\n      expect(telegramService['getSystemHealthEmoji'](80)).toBe('🟡');\r\n      expect(telegramService['getSystemHealthEmoji'](95)).toBe('🔴');\r\n    });\r\n\r\n    test('should send system health notifications with Intel NUC metrics', async () => {\r\n      const mockSendNotification = jest.fn().mockResolvedValue(12346);\r\n      telegramService['sendNotificationWithRateLimit'] = mockSendNotification;\r\n\r\n      const systemData = {\r\n        cpuUsage: 75.8,\r\n        ramUsage: 82.3,\r\n        diskUsage: 45.6,\r\n        cpuTemperature: 68.2,\r\n        networkStatus: 'Connected - High Speed',\r\n        uptime: 172800, // 2 days\r\n        activeConnections: 18,\r\n        sshTunnelHealth: 'healthy' as const,\r\n        sshTunnelLatency: 31,\r\n        tradingEngineStatus: 'active' as const,\r\n        databaseConnections: 5\r\n      };\r\n\r\n      const messageId = await telegramService.sendSystemHealth(systemData);\r\n\r\n      expect(messageId).toBe(12346);\r\n      \r\n      const sentMessage = mockSendNotification.mock.calls[0][0];\r\n      const messageContent = sentMessage.message;\r\n\r\n      expect(messageContent).toContain('INTEL NUC SYSTEM HEALTH');\r\n      expect(messageContent).toContain('75.8%'); // CPU usage\r\n      expect(messageContent).toContain('82.3%'); // RAM usage\r\n      expect(messageContent).toContain('68.2°C'); // CPU temperature\r\n      expect(messageContent).toContain('HEALTHY'); // SSH tunnel health\r\n      expect(messageContent).toContain('2d 0h 0m'); // Uptime formatting\r\n    });\r\n  });\r\n\r\n  describe('Database Operations and Data Persistence', () => {\r\n    beforeEach(() => {\r\n      databaseManager = new DatabaseManager({\r\n        type: 'postgresql',\r\n        host: 'localhost',\r\n        port: 5432,\r\n        database: 'trading_agent_test',\r\n        username: 'test_user',\r\n        password: 'test_password'\r\n      });\r\n    });\r\n\r\n    test('should initialize database connection', async () => {\r\n      const mockInitialize = jest.fn().mockResolvedValue(undefined);\r\n      databaseManager.initialize = mockInitialize;\r\n\r\n      await databaseManager.initialize();\r\n\r\n      expect(mockInitialize).toHaveBeenCalled();\r\n    });\r\n\r\n    test('should persist trading data correctly', async () => {\r\n      const mockExecuteQuery = jest.fn().mockResolvedValue({\r\n        rows: [{ id: 1, symbol: 'BTC_USDT', action: 'BUY', quantity: 0.001 }]\r\n      });\r\n      databaseManager.executeQuery = mockExecuteQuery;\r\n\r\n      const tradeData = {\r\n        symbol: 'BTC_USDT',\r\n        action: 'BUY',\r\n        quantity: 0.001,\r\n        price: 45000,\r\n        timestamp: new Date()\r\n      };\r\n\r\n      const result = await databaseManager.executeQuery(\r\n        'INSERT INTO trades (symbol, action, quantity, price, timestamp) VALUES ($1, $2, $3, $4, $5) RETURNING *',\r\n        [tradeData.symbol, tradeData.action, tradeData.quantity, tradeData.price, tradeData.timestamp]\r\n      );\r\n\r\n      expect(mockExecuteQuery).toHaveBeenCalled();\r\n      expect(result.rows[0]).toHaveProperty('symbol', 'BTC_USDT');\r\n      expect(result.rows[0]).toHaveProperty('action', 'BUY');\r\n    });\r\n\r\n    test('should retrieve historical trading data', async () => {\r\n      const mockExecuteQuery = jest.fn().mockResolvedValue({\r\n        rows: [\r\n          { id: 1, symbol: 'BTC_USDT', action: 'BUY', pnl: 125.75, timestamp: new Date() },\r\n          { id: 2, symbol: 'ETH_USDT', action: 'SELL', pnl: -23.50, timestamp: new Date() }\r\n        ]\r\n      });\r\n      databaseManager.executeQuery = mockExecuteQuery;\r\n\r\n      const result = await databaseManager.executeQuery(\r\n        'SELECT * FROM trades WHERE timestamp >= $1 ORDER BY timestamp DESC',\r\n        [new Date(Date.now() - 24 * 60 * 60 * 1000)] // Last 24 hours\r\n      );\r\n\r\n      expect(mockExecuteQuery).toHaveBeenCalled();\r\n      expect(result.rows).toHaveLength(2);\r\n      expect(result.rows[0]).toHaveProperty('symbol', 'BTC_USDT');\r\n      expect(result.rows[0]).toHaveProperty('pnl', 125.75);\r\n    });\r\n\r\n    test('should handle database connection failures', async () => {\r\n      const mockExecuteQuery = jest.fn().mockRejectedValue(new Error('Connection failed'));\r\n      databaseManager.executeQuery = mockExecuteQuery;\r\n\r\n      await expect(databaseManager.executeQuery('SELECT 1'))\r\n        .rejects.toThrow('Connection failed');\r\n    });\r\n\r\n    test('should validate data integrity and constraints', async () => {\r\n      const mockExecuteQuery = jest.fn().mockResolvedValue({\r\n        rows: [{ constraint_name: 'trades_symbol_check', is_valid: true }]\r\n      });\r\n      databaseManager.executeQuery = mockExecuteQuery;\r\n\r\n      const result = await databaseManager.executeQuery(\r\n        'SELECT constraint_name, is_valid FROM information_schema.table_constraints WHERE table_name = $1',\r\n        ['trades']\r\n      );\r\n\r\n      expect(result.rows[0]).toHaveProperty('is_valid', true);\r\n    });\r\n\r\n    test('should perform database health checks', async () => {\r\n      const mockGetHealth = jest.fn().mockResolvedValue({\r\n        status: 'healthy',\r\n        connections: 5,\r\n        responseTime: 15,\r\n        lastCheck: new Date()\r\n      });\r\n      databaseManager.getHealth = mockGetHealth;\r\n\r\n      const health = await databaseManager.getHealth();\r\n\r\n      expect(health.status).toBe('healthy');\r\n      expect(health.connections).toBe(5);\r\n      expect(health.responseTime).toBeLessThan(100);\r\n    });\r\n  });\r\n\r\n  describe('End-to-End System Integration', () => {\r\n    test('should complete full trading workflow', async () => {\r\n      // Mock complete trading workflow\r\n      const mockWorkflow = {\r\n        generateSignal: jest.fn().mockReturnValue({\r\n          type: 'BUY',\r\n          symbol: 'BTC_USDT',\r\n          confidence: 85,\r\n          price: 45000\r\n        }),\r\n        executeTrade: jest.fn().mockResolvedValue({\r\n          id: 'trade-123',\r\n          status: 'FILLED',\r\n          isPaperTrade: true\r\n        }),\r\n        sendNotification: jest.fn().mockResolvedValue(12347),\r\n        persistData: jest.fn().mockResolvedValue({ id: 1 })\r\n      };\r\n\r\n      // Execute workflow steps\r\n      const signal = mockWorkflow.generateSignal();\r\n      const trade = await mockWorkflow.executeTrade(signal);\r\n      const notification = await mockWorkflow.sendNotification(trade);\r\n      const persistence = await mockWorkflow.persistData(trade);\r\n\r\n      expect(signal.type).toBe('BUY');\r\n      expect(trade.status).toBe('FILLED');\r\n      expect(trade.isPaperTrade).toBe(true);\r\n      expect(notification).toBe(12347);\r\n      expect(persistence.id).toBe(1);\r\n    });\r\n\r\n    test('should handle system errors gracefully', async () => {\r\n      const mockErrorHandler = {\r\n        handleTradingError: jest.fn().mockResolvedValue({\r\n          handled: true,\r\n          action: 'RETRY',\r\n          notification: 'sent'\r\n        }),\r\n        handleDashboardError: jest.fn().mockResolvedValue({\r\n          handled: true,\r\n          fallback: 'basic_ui'\r\n        }),\r\n        handleNotificationError: jest.fn().mockResolvedValue({\r\n          handled: true,\r\n          fallback: 'email'\r\n        })\r\n      };\r\n\r\n      const tradingError = await mockErrorHandler.handleTradingError(new Error('API timeout'));\r\n      const dashboardError = await mockErrorHandler.handleDashboardError(new Error('WebSocket failed'));\r\n      const notificationError = await mockErrorHandler.handleNotificationError(new Error('Telegram failed'));\r\n\r\n      expect(tradingError.handled).toBe(true);\r\n      expect(dashboardError.handled).toBe(true);\r\n      expect(notificationError.handled).toBe(true);\r\n    });\r\n\r\n    test('should maintain system performance under load', async () => {\r\n      const startTime = Date.now();\r\n      const operations = [];\r\n\r\n      // Simulate concurrent operations\r\n      for (let i = 0; i < 50; i++) {\r\n        operations.push(Promise.resolve({\r\n          id: i,\r\n          type: 'operation',\r\n          duration: Math.random() * 100\r\n        }));\r\n      }\r\n\r\n      const results = await Promise.all(operations);\r\n      const endTime = Date.now();\r\n      const totalTime = endTime - startTime;\r\n\r\n      expect(results).toHaveLength(50);\r\n      expect(totalTime).toBeLessThan(5000); // Should complete within 5 seconds\r\n    });\r\n  });\r\n});"],"version":3}