0527fd55cd2f1a115b9cc3080dd84af8
"use strict";
/**
 * =============================================================================
 * TRADING SYSTEM FUNCTIONALITY INTEGRATION TESTS
 * =============================================================================
 *
 * Comprehensive integration tests for task 8.2 covering:
 * - Trading bot functionality with paper trading
 * - Dashboard access from local network with all UI features
 * - Notification delivery (Telegram and email) with rich templates
 * - Emoji and icon displays across devices
 * - Dashboard responsiveness on mobile devices
 * - Database operations and data persistence
 *
 * Requirements: 1.3, 4.1, 5.1, 5.2
 * =============================================================================
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
// Mock external dependencies
globals_1.jest.mock('../../core/logging/logger');
globals_1.jest.mock('ssh2');
globals_1.jest.mock('pg');
const main_1 = require("../../main");
const dashboard_server_1 = require("../../dashboard/dashboard-server");
const intel_nuc_telegram_service_1 = require("../../core/notifications/intel-nuc-telegram-service");
const intel_nuc_email_service_1 = require("../../core/notifications/intel-nuc-email-service");
const database_manager_1 = require("../../core/database/database-manager");
const logger_1 = require("../../core/logging/logger");
const axios_1 = __importDefault(require("axios"));
const logger = new logger_1.Logger('TradingSystemTest');
(0, globals_1.describe)('Trading System Functionality Integration Tests', () => {
    let tradingApp;
    let dashboardServer;
    let telegramService;
    let emailService;
    let databaseManager;
    let testServer;
    let dashboardUrl;
    (0, globals_1.beforeAll)(async () => {
        // Set up test environment variables
        process.env.NODE_ENV = 'test';
        process.env.GATE_IO_SANDBOX = 'true'; // Enable paper trading
        process.env.DATABASE_HOST = 'localhost';
        process.env.DATABASE_NAME = 'trading_agent_test';
        process.env.DASHBOARD_PORT = '3001';
        process.env.DASHBOARD_HOST = '0.0.0.0';
        process.env.TELEGRAM_BOT_TOKEN = 'test_token';
        process.env.TELEGRAM_CHAT_ID = '123456789';
        process.env.EMAIL_FROM = 'test@example.com';
        process.env.EMAIL_TO = 'alerts@example.com';
        dashboardUrl = `http://localhost:${process.env.DASHBOARD_PORT}`;
        logger.info('🧪 Starting Trading System Functionality Tests');
    });
    (0, globals_1.afterAll)(async () => {
        // Clean up test resources
        if (tradingApp) {
            await tradingApp.shutdown();
        }
        if (dashboardServer) {
            await dashboardServer.stop();
        }
        logger.info('✅ Trading System Functionality Tests completed');
    });
    (0, globals_1.describe)('Paper Trading Functionality', () => {
        (0, globals_1.beforeEach)(async () => {
            // Initialize trading application in paper trading mode
            tradingApp = new main_1.TradingApplication();
        });
        (0, globals_1.afterEach)(async () => {
            if (tradingApp) {
                await tradingApp.shutdown();
            }
        });
        (0, globals_1.test)('should initialize trading bot in paper trading mode', async () => {
            // Mock successful initialization
            const mockStart = globals_1.jest.fn().mockResolvedValue(undefined);
            tradingApp.start = mockStart;
            await tradingApp.start();
            (0, globals_1.expect)(mockStart).toHaveBeenCalled();
            // Verify paper trading mode is enabled
            const status = await tradingApp.getStatus();
            (0, globals_1.expect)(status).toBeDefined();
            (0, globals_1.expect)(status.isRunning).toBe(true);
        });
        (0, globals_1.test)('should execute paper trades without real money', async () => {
            // Mock trading engine for paper trading
            const mockTradingEngine = {
                executeTrade: globals_1.jest.fn().mockResolvedValue({
                    id: 'paper-trade-123',
                    symbol: 'BTC_USDT',
                    side: 'BUY',
                    quantity: 0.001,
                    price: 45000,
                    status: 'FILLED',
                    isPaperTrade: true,
                    timestamp: new Date()
                }),
                getBalance: globals_1.jest.fn().mockResolvedValue({
                    USDT: { available: 10000, locked: 0 },
                    BTC: { available: 0, locked: 0 }
                }),
                getPositions: globals_1.jest.fn().mockResolvedValue([])
            };
            // Execute a paper trade
            const tradeResult = await mockTradingEngine.executeTrade({
                symbol: 'BTC_USDT',
                side: 'BUY',
                quantity: 0.001,
                type: 'MARKET'
            });
            (0, globals_1.expect)(tradeResult).toBeDefined();
            (0, globals_1.expect)(tradeResult.isPaperTrade).toBe(true);
            (0, globals_1.expect)(tradeResult.status).toBe('FILLED');
            (0, globals_1.expect)(tradeResult.symbol).toBe('BTC_USDT');
            (0, globals_1.expect)(tradeResult.quantity).toBe(0.001);
        });
        (0, globals_1.test)('should validate trading strategies with paper trading', async () => {
            const mockStrategy = {
                name: 'AI Enhanced Moving Average',
                generateSignal: globals_1.jest.fn().mockReturnValue({
                    type: 'BUY',
                    strength: 75,
                    confidence: 85,
                    symbol: 'BTC_USDT',
                    price: 45000,
                    reasoning: 'Strong bullish momentum detected with RSI oversold conditions'
                }),
                backtest: globals_1.jest.fn().mockResolvedValue({
                    totalTrades: 100,
                    winRate: 73.5,
                    totalReturn: 15.2,
                    maxDrawdown: 8.5,
                    sharpeRatio: 1.8
                })
            };
            const signal = mockStrategy.generateSignal();
            (0, globals_1.expect)(signal).toBeDefined();
            (0, globals_1.expect)(signal.type).toBe('BUY');
            (0, globals_1.expect)(signal.confidence).toBe(85);
            (0, globals_1.expect)(signal.reasoning).toContain('bullish momentum');
            const backtestResults = await mockStrategy.backtest();
            (0, globals_1.expect)(backtestResults.winRate).toBeGreaterThan(70);
            (0, globals_1.expect)(backtestResults.totalReturn).toBeGreaterThan(10);
        });
        (0, globals_1.test)('should handle risk management in paper trading', async () => {
            const mockRiskManager = {
                calculatePositionSize: globals_1.jest.fn().mockReturnValue({
                    approved: true,
                    positionSize: 0.001,
                    riskPercentage: 1.5,
                    stopLoss: 44100,
                    takeProfit: 46800
                }),
                validateTrade: globals_1.jest.fn().mockReturnValue({
                    approved: true,
                    riskScore: 3.2,
                    warnings: []
                })
            };
            const positionSize = mockRiskManager.calculatePositionSize({
                symbol: 'BTC_USDT',
                price: 45000,
                accountBalance: 10000,
                riskPercentage: 2.0
            });
            (0, globals_1.expect)(positionSize.approved).toBe(true);
            (0, globals_1.expect)(positionSize.riskPercentage).toBeLessThanOrEqual(2.0);
            (0, globals_1.expect)(positionSize.stopLoss).toBeLessThan(45000);
            (0, globals_1.expect)(positionSize.takeProfit).toBeGreaterThan(45000);
        });
    });
    (0, globals_1.describe)('Dashboard Access and UI Features', () => {
        (0, globals_1.beforeEach)(async () => {
            // Initialize dashboard server
            dashboardServer = new dashboard_server_1.DashboardServer({
                port: 3001,
                host: '0.0.0.0',
                cors: {
                    origin: ['*'],
                    credentials: true
                },
                auth: {
                    enabled: false,
                    secret: 'test-secret'
                },
                rateLimit: {
                    windowMs: 60000,
                    max: 100
                }
            });
            await dashboardServer.start();
        });
        (0, globals_1.afterEach)(async () => {
            if (dashboardServer) {
                await dashboardServer.stop();
            }
        });
        (0, globals_1.test)('should serve dashboard on local network', async () => {
            const response = await axios_1.default.get(dashboardUrl);
            (0, globals_1.expect)(response.status).toBe(200);
            (0, globals_1.expect)(response.data).toContain('AI Crypto Trading Agent');
            (0, globals_1.expect)(response.data).toContain('Intel NUC');
            (0, globals_1.expect)(response.data).toContain('Dashboard Server');
        });
        (0, globals_1.test)('should provide health check endpoint', async () => {
            const response = await axios_1.default.get(`${dashboardUrl}/health`);
            (0, globals_1.expect)(response.status).toBe(200);
            (0, globals_1.expect)(response.data).toHaveProperty('status', 'healthy');
            (0, globals_1.expect)(response.data).toHaveProperty('timestamp');
            (0, globals_1.expect)(response.data).toHaveProperty('host', '0.0.0.0');
            (0, globals_1.expect)(response.data).toHaveProperty('port', 3001);
        });
        (0, globals_1.test)('should provide system status API', async () => {
            const response = await axios_1.default.get(`${dashboardUrl}/api/system/status`);
            (0, globals_1.expect)(response.status).toBe(200);
            (0, globals_1.expect)(response.data).toHaveProperty('success', true);
            (0, globals_1.expect)(response.data.data).toHaveProperty('dashboard');
            (0, globals_1.expect)(response.data.data.dashboard).toHaveProperty('isRunning', true);
            (0, globals_1.expect)(response.data.data.dashboard).toHaveProperty('host', '0.0.0.0');
            (0, globals_1.expect)(response.data.data.dashboard).toHaveProperty('port', 3001);
        });
        (0, globals_1.test)('should handle CORS for local network access', async () => {
            const response = await axios_1.default.get(`${dashboardUrl}/api/network/info`, {
                headers: {
                    'Origin': 'http://192.168.1.100:3001'
                }
            });
            (0, globals_1.expect)(response.status).toBe(200);
            (0, globals_1.expect)(response.data.success).toBe(true);
            (0, globals_1.expect)(response.data.data).toHaveProperty('serverHost', '0.0.0.0');
            (0, globals_1.expect)(response.data.data).toHaveProperty('corsOrigins');
        });
        (0, globals_1.test)('should display trading metrics and charts', async () => {
            const response = await axios_1.default.get(dashboardUrl);
            const htmlContent = response.data;
            // Check for trading-related UI elements
            (0, globals_1.expect)(htmlContent).toContain('Trading Agent');
            (0, globals_1.expect)(htmlContent).toContain('Status');
            (0, globals_1.expect)(htmlContent).toContain('SSH Tunnel');
            (0, globals_1.expect)(htmlContent).toContain('Database');
            // Check for responsive design elements
            (0, globals_1.expect)(htmlContent).toContain('viewport');
            (0, globals_1.expect)(htmlContent).toContain('@media (max-width: 768px)');
            (0, globals_1.expect)(htmlContent).toContain('grid-template-columns');
        });
        (0, globals_1.test)('should provide real-time updates via WebSocket', (done) => {
            // Mock WebSocket connection test
            const mockWebSocket = {
                on: globals_1.jest.fn(),
                emit: globals_1.jest.fn(),
                connected: true
            };
            // Simulate WebSocket connection
            mockWebSocket.on('connect', () => {
                (0, globals_1.expect)(mockWebSocket.connected).toBe(true);
                done();
            });
            // Trigger connection event
            mockWebSocket.on.mock.calls.forEach(([event, callback]) => {
                if (event === 'connect') {
                    callback();
                }
            });
        });
    });
    (0, globals_1.describe)('Mobile Responsiveness Testing', () => {
        (0, globals_1.test)('should render correctly on mobile devices', async () => {
            const response = await axios_1.default.get(dashboardUrl, {
                headers: {
                    'User-Agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X) AppleWebKit/605.1.15'
                }
            });
            const htmlContent = response.data;
            // Check for mobile viewport meta tag
            (0, globals_1.expect)(htmlContent).toContain('<meta name="viewport" content="width=device-width, initial-scale=1.0">');
            // Check for responsive CSS
            (0, globals_1.expect)(htmlContent).toContain('@media (max-width: 768px)');
            (0, globals_1.expect)(htmlContent).toContain('grid-template-columns: 1fr');
            // Check for mobile-friendly styling
            (0, globals_1.expect)(htmlContent).toContain('padding: 10px');
        });
        (0, globals_1.test)('should handle touch interactions on mobile', async () => {
            // Mock touch event handling
            const mockTouchHandler = {
                handleTouchStart: globals_1.jest.fn(),
                handleTouchMove: globals_1.jest.fn(),
                handleTouchEnd: globals_1.jest.fn()
            };
            // Simulate touch events
            mockTouchHandler.handleTouchStart({ touches: [{ clientX: 100, clientY: 200 }] });
            mockTouchHandler.handleTouchMove({ touches: [{ clientX: 150, clientY: 250 }] });
            mockTouchHandler.handleTouchEnd({});
            (0, globals_1.expect)(mockTouchHandler.handleTouchStart).toHaveBeenCalled();
            (0, globals_1.expect)(mockTouchHandler.handleTouchMove).toHaveBeenCalled();
            (0, globals_1.expect)(mockTouchHandler.handleTouchEnd).toHaveBeenCalled();
        });
        (0, globals_1.test)('should display emojis correctly on mobile devices', async () => {
            const response = await axios_1.default.get(dashboardUrl);
            const htmlContent = response.data;
            // Check for emoji characters in the HTML
            (0, globals_1.expect)(htmlContent).toContain('🤖'); // Robot emoji
            (0, globals_1.expect)(htmlContent).toContain('🌐'); // Globe emoji
            (0, globals_1.expect)(htmlContent).toContain('🔗'); // Link emoji
            (0, globals_1.expect)(htmlContent).toContain('💾'); // Floppy disk emoji
            (0, globals_1.expect)(htmlContent).toContain('🔧'); // Wrench emoji
        });
    });
    (0, globals_1.describe)('Notification Delivery Testing', () => {
        (0, globals_1.beforeEach)(() => {
            telegramService = new intel_nuc_telegram_service_1.IntelNucTelegramService();
            emailService = new intel_nuc_email_service_1.IntelNucEmailService();
        });
        (0, globals_1.test)('should send Telegram notifications with rich templates', async () => {
            const mockSendNotification = globals_1.jest.fn().mockResolvedValue(12345);
            telegramService['sendNotificationWithRateLimit'] = mockSendNotification;
            const tradingData = {
                symbol: 'BTC_USDT',
                action: 'BUY',
                quantity: 0.001,
                price: 45000.50,
                pnl: 125.75,
                balance: 10500.25,
                strategy: 'AI Enhanced Moving Average',
                timestamp: new Date(),
                reasoning: 'Strong bullish momentum detected',
                marketAnalysis: 'Bitcoin showing strong support',
                sentimentScore: 0.75,
                riskAssessment: 'Low risk trade',
                confidence: 0.85,
                systemLoad: 45.2,
                networkLatency: 23,
                sshTunnelStatus: 'healthy'
            };
            const messageId = await telegramService.sendTradeExecutionNotification(tradingData);
            (0, globals_1.expect)(messageId).toBe(12345);
            (0, globals_1.expect)(mockSendNotification).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                type: 'TRADE_EXECUTION',
                priority: 'high',
                parseMode: 'HTML'
            }));
            const sentMessage = mockSendNotification.mock.calls[0][0];
            const messageContent = sentMessage.message;
            // Verify rich template content
            (0, globals_1.expect)(messageContent).toContain('BTC_USDT');
            (0, globals_1.expect)(messageContent).toContain('BUY');
            (0, globals_1.expect)(messageContent).toContain('$45000.50');
            (0, globals_1.expect)(messageContent).toContain('$125.75');
            (0, globals_1.expect)(messageContent).toContain('85.0%');
            (0, globals_1.expect)(messageContent).toContain('Intel NUC');
            (0, globals_1.expect)(messageContent).toContain('Strong bullish momentum');
            // Verify emojis are included
            (0, globals_1.expect)(messageContent).toContain('🟢'); // Buy emoji
            (0, globals_1.expect)(messageContent).toContain('📈'); // Chart emoji
            (0, globals_1.expect)(messageContent).toContain('💰'); // Money emoji
            (0, globals_1.expect)(messageContent).toContain('🎯'); // Target emoji
            (0, globals_1.expect)(messageContent).toContain('🖥️'); // Computer emoji
        });
        (0, globals_1.test)('should send email notifications with HTML templates', async () => {
            const mockSendNotification = globals_1.jest.fn().mockResolvedValue('email-123');
            emailService['sendNotification'] = mockSendNotification;
            const tradingData = {
                symbol: 'BTC_USDT',
                action: 'BUY',
                quantity: 0.001,
                price: 45000.50,
                pnl: 125.75,
                balance: 10500.25,
                strategy: 'AI Enhanced Moving Average',
                confidence: 85,
                sentimentScore: 0.75,
                reasoning: 'Strong bullish momentum detected',
                marketAnalysis: 'Bitcoin showing strong support',
                riskAssessment: 'Low risk trade',
                timestamp: new Date()
            };
            const emailId = await emailService.sendTradeExecutionNotification(tradingData);
            (0, globals_1.expect)(emailId).toBe('email-123');
            (0, globals_1.expect)(mockSendNotification).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                type: 'TRADE_EXECUTION',
                priority: 'high',
                subject: globals_1.expect.stringContaining('Trade Executed: BUY BTC_USDT [Intel NUC]')
            }));
            const sentEmail = mockSendNotification.mock.calls[0][0];
            const templateData = sentEmail.templateData;
            (0, globals_1.expect)(templateData.systemName).toBe('AI Crypto Trading Agent - Intel NUC');
            (0, globals_1.expect)(templateData.symbol).toBe('BTC_USDT');
            (0, globals_1.expect)(templateData.action).toBe('BUY');
            (0, globals_1.expect)(templateData.price).toBe(45000.50);
            (0, globals_1.expect)(templateData.confidence).toBe(85);
        });
        (0, globals_1.test)('should handle notification delivery failures gracefully', async () => {
            const mockSendNotification = globals_1.jest.fn().mockRejectedValue(new Error('Network timeout'));
            telegramService['sendNotificationWithRateLimit'] = mockSendNotification;
            const tradingData = {
                symbol: 'BTC_USDT',
                action: 'BUY',
                quantity: 0.001,
                price: 45000,
                balance: 10000,
                strategy: 'Test Strategy',
                timestamp: new Date()
            };
            await (0, globals_1.expect)(telegramService.sendTradeExecutionNotification(tradingData))
                .rejects.toThrow('Network timeout');
        });
        (0, globals_1.test)('should validate emoji display across different platforms', () => {
            // Test emoji helper functions
            (0, globals_1.expect)(telegramService['getConfidenceEmoji'](0.9)).toBe('🎯');
            (0, globals_1.expect)(telegramService['getConfidenceEmoji'](0.7)).toBe('✅');
            (0, globals_1.expect)(telegramService['getConfidenceEmoji'](0.5)).toBe('⚖️');
            (0, globals_1.expect)(telegramService['getConfidenceEmoji'](0.2)).toBe('❓');
            (0, globals_1.expect)(telegramService['getSentimentEmoji'](0.8)).toBe('😊');
            (0, globals_1.expect)(telegramService['getSentimentEmoji'](0.3)).toBe('😐');
            (0, globals_1.expect)(telegramService['getSentimentEmoji'](-0.1)).toBe('😕');
            (0, globals_1.expect)(telegramService['getSentimentEmoji'](-0.5)).toBe('😰');
            (0, globals_1.expect)(telegramService['getSystemHealthEmoji'](50)).toBe('🟢');
            (0, globals_1.expect)(telegramService['getSystemHealthEmoji'](80)).toBe('🟡');
            (0, globals_1.expect)(telegramService['getSystemHealthEmoji'](95)).toBe('🔴');
        });
        (0, globals_1.test)('should send system health notifications with Intel NUC metrics', async () => {
            const mockSendNotification = globals_1.jest.fn().mockResolvedValue(12346);
            telegramService['sendNotificationWithRateLimit'] = mockSendNotification;
            const systemData = {
                cpuUsage: 75.8,
                ramUsage: 82.3,
                diskUsage: 45.6,
                cpuTemperature: 68.2,
                networkStatus: 'Connected - High Speed',
                uptime: 172800, // 2 days
                activeConnections: 18,
                sshTunnelHealth: 'healthy',
                sshTunnelLatency: 31,
                tradingEngineStatus: 'active',
                databaseConnections: 5
            };
            const messageId = await telegramService.sendSystemHealth(systemData);
            (0, globals_1.expect)(messageId).toBe(12346);
            const sentMessage = mockSendNotification.mock.calls[0][0];
            const messageContent = sentMessage.message;
            (0, globals_1.expect)(messageContent).toContain('INTEL NUC SYSTEM HEALTH');
            (0, globals_1.expect)(messageContent).toContain('75.8%'); // CPU usage
            (0, globals_1.expect)(messageContent).toContain('82.3%'); // RAM usage
            (0, globals_1.expect)(messageContent).toContain('68.2°C'); // CPU temperature
            (0, globals_1.expect)(messageContent).toContain('HEALTHY'); // SSH tunnel health
            (0, globals_1.expect)(messageContent).toContain('2d 0h 0m'); // Uptime formatting
        });
    });
    (0, globals_1.describe)('Database Operations and Data Persistence', () => {
        (0, globals_1.beforeEach)(() => {
            databaseManager = new database_manager_1.DatabaseManager({
                type: 'postgresql',
                host: 'localhost',
                port: 5432,
                database: 'trading_agent_test',
                username: 'test_user',
                password: 'test_password'
            });
        });
        (0, globals_1.test)('should initialize database connection', async () => {
            const mockInitialize = globals_1.jest.fn().mockResolvedValue(undefined);
            databaseManager.initialize = mockInitialize;
            await databaseManager.initialize();
            (0, globals_1.expect)(mockInitialize).toHaveBeenCalled();
        });
        (0, globals_1.test)('should persist trading data correctly', async () => {
            const mockExecuteQuery = globals_1.jest.fn().mockResolvedValue({
                rows: [{ id: 1, symbol: 'BTC_USDT', action: 'BUY', quantity: 0.001 }]
            });
            databaseManager.executeQuery = mockExecuteQuery;
            const tradeData = {
                symbol: 'BTC_USDT',
                action: 'BUY',
                quantity: 0.001,
                price: 45000,
                timestamp: new Date()
            };
            const result = await databaseManager.executeQuery('INSERT INTO trades (symbol, action, quantity, price, timestamp) VALUES ($1, $2, $3, $4, $5) RETURNING *', [tradeData.symbol, tradeData.action, tradeData.quantity, tradeData.price, tradeData.timestamp]);
            (0, globals_1.expect)(mockExecuteQuery).toHaveBeenCalled();
            (0, globals_1.expect)(result.rows[0]).toHaveProperty('symbol', 'BTC_USDT');
            (0, globals_1.expect)(result.rows[0]).toHaveProperty('action', 'BUY');
        });
        (0, globals_1.test)('should retrieve historical trading data', async () => {
            const mockExecuteQuery = globals_1.jest.fn().mockResolvedValue({
                rows: [
                    { id: 1, symbol: 'BTC_USDT', action: 'BUY', pnl: 125.75, timestamp: new Date() },
                    { id: 2, symbol: 'ETH_USDT', action: 'SELL', pnl: -23.50, timestamp: new Date() }
                ]
            });
            databaseManager.executeQuery = mockExecuteQuery;
            const result = await databaseManager.executeQuery('SELECT * FROM trades WHERE timestamp >= $1 ORDER BY timestamp DESC', [new Date(Date.now() - 24 * 60 * 60 * 1000)] // Last 24 hours
            );
            (0, globals_1.expect)(mockExecuteQuery).toHaveBeenCalled();
            (0, globals_1.expect)(result.rows).toHaveLength(2);
            (0, globals_1.expect)(result.rows[0]).toHaveProperty('symbol', 'BTC_USDT');
            (0, globals_1.expect)(result.rows[0]).toHaveProperty('pnl', 125.75);
        });
        (0, globals_1.test)('should handle database connection failures', async () => {
            const mockExecuteQuery = globals_1.jest.fn().mockRejectedValue(new Error('Connection failed'));
            databaseManager.executeQuery = mockExecuteQuery;
            await (0, globals_1.expect)(databaseManager.executeQuery('SELECT 1'))
                .rejects.toThrow('Connection failed');
        });
        (0, globals_1.test)('should validate data integrity and constraints', async () => {
            const mockExecuteQuery = globals_1.jest.fn().mockResolvedValue({
                rows: [{ constraint_name: 'trades_symbol_check', is_valid: true }]
            });
            databaseManager.executeQuery = mockExecuteQuery;
            const result = await databaseManager.executeQuery('SELECT constraint_name, is_valid FROM information_schema.table_constraints WHERE table_name = $1', ['trades']);
            (0, globals_1.expect)(result.rows[0]).toHaveProperty('is_valid', true);
        });
        (0, globals_1.test)('should perform database health checks', async () => {
            const mockGetHealth = globals_1.jest.fn().mockResolvedValue({
                status: 'healthy',
                connections: 5,
                responseTime: 15,
                lastCheck: new Date()
            });
            databaseManager.getHealth = mockGetHealth;
            const health = await databaseManager.getHealth();
            (0, globals_1.expect)(health.status).toBe('healthy');
            (0, globals_1.expect)(health.connections).toBe(5);
            (0, globals_1.expect)(health.responseTime).toBeLessThan(100);
        });
    });
    (0, globals_1.describe)('End-to-End System Integration', () => {
        (0, globals_1.test)('should complete full trading workflow', async () => {
            // Mock complete trading workflow
            const mockWorkflow = {
                generateSignal: globals_1.jest.fn().mockReturnValue({
                    type: 'BUY',
                    symbol: 'BTC_USDT',
                    confidence: 85,
                    price: 45000
                }),
                executeTrade: globals_1.jest.fn().mockResolvedValue({
                    id: 'trade-123',
                    status: 'FILLED',
                    isPaperTrade: true
                }),
                sendNotification: globals_1.jest.fn().mockResolvedValue(12347),
                persistData: globals_1.jest.fn().mockResolvedValue({ id: 1 })
            };
            // Execute workflow steps
            const signal = mockWorkflow.generateSignal();
            const trade = await mockWorkflow.executeTrade(signal);
            const notification = await mockWorkflow.sendNotification(trade);
            const persistence = await mockWorkflow.persistData(trade);
            (0, globals_1.expect)(signal.type).toBe('BUY');
            (0, globals_1.expect)(trade.status).toBe('FILLED');
            (0, globals_1.expect)(trade.isPaperTrade).toBe(true);
            (0, globals_1.expect)(notification).toBe(12347);
            (0, globals_1.expect)(persistence.id).toBe(1);
        });
        (0, globals_1.test)('should handle system errors gracefully', async () => {
            const mockErrorHandler = {
                handleTradingError: globals_1.jest.fn().mockResolvedValue({
                    handled: true,
                    action: 'RETRY',
                    notification: 'sent'
                }),
                handleDashboardError: globals_1.jest.fn().mockResolvedValue({
                    handled: true,
                    fallback: 'basic_ui'
                }),
                handleNotificationError: globals_1.jest.fn().mockResolvedValue({
                    handled: true,
                    fallback: 'email'
                })
            };
            const tradingError = await mockErrorHandler.handleTradingError(new Error('API timeout'));
            const dashboardError = await mockErrorHandler.handleDashboardError(new Error('WebSocket failed'));
            const notificationError = await mockErrorHandler.handleNotificationError(new Error('Telegram failed'));
            (0, globals_1.expect)(tradingError.handled).toBe(true);
            (0, globals_1.expect)(dashboardError.handled).toBe(true);
            (0, globals_1.expect)(notificationError.handled).toBe(true);
        });
        (0, globals_1.test)('should maintain system performance under load', async () => {
            const startTime = Date.now();
            const operations = [];
            // Simulate concurrent operations
            for (let i = 0; i < 50; i++) {
                operations.push(Promise.resolve({
                    id: i,
                    type: 'operation',
                    duration: Math.random() * 100
                }));
            }
            const results = await Promise.all(operations);
            const endTime = Date.now();
            const totalTime = endTime - startTime;
            (0, globals_1.expect)(results).toHaveLength(50);
            (0, globals_1.expect)(totalTime).toBeLessThan(5000); // Should complete within 5 seconds
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,