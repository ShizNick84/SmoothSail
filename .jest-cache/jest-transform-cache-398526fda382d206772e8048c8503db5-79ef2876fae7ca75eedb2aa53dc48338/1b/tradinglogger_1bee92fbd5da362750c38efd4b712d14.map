{"version":3,"names":["cov_1y4nxhcc34","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","enhanced_logger_1","require","os_1","__importDefault","TradingLogger","EnhancedLogger","tradeSequence","performanceHistory","Map","errorHistory","constructor","componentName","logTradeExecution","context","emoji","side","LogEmojis","BUY","SELL","message","toUpperCase","amount","symbol","price","toFixed","enrichedMeta","tradeId","sequence","orderType","strategy","confidence","marketConditions","reasoning","classification","timestamp","toISOString","logWithEmoji","trading","logTradeReasoning","reasoningMessage","volume","toLocaleString","volatility","trend","getTrendEmoji","sentiment","entryReason","riskAssessment","expectedOutcome","alternativeActions","map","action","join","component","logMarketAnalysis","trendEmoji","prediction","direction","timeframe","analysis","TREND_UP","logTechnicalAnalysis","technicalMessage","Object","entries","technicalIndicators","indicator","value","volumeAnalysis","metric","supportResistance","support","resistance","r","logStrategyDecision","decisionEmoji","getDecisionEmoji","decision","strategyName","parameters","signals","alternatives","logStrategyReasoning","technical","signal","aiExplanation","primaryFactors","factor","riskFactors","opportunityFactors","alt","probability","logSystemPerformance","statusEmoji","status","SUCCESS","WARNING","ERROR","metrics","thresholds","logDetailedPerformanceMetrics","storePerformanceHistory","metricsMessage","cpu","usage","temperature","frequency","memory","used","total","percentage","swap","disk","iops","network","latency","bandwidth","packetLoss","connections","database","queryTime","cacheHitRatio","info","logErrorWithRecovery","severityEmoji","severity","ALERT","INFO","errorType","error","errorId","stack","recoveryActions","impact","logErrorRecoveryDetails","storeErrorHistory","recoveryMessage","attempted","successful","failed","nextSteps","tradingAffected","systemStability","userExperience","key","JSON","stringify","logConfigurationChange","changeEmoji","changeType","RESTART","changes","length","changeId","reason","approvedBy","audit","auditId","eventType","actor","resource","result","auditData","logConfigurationDetails","configMessage","change","field","oldValue","newValue","requiresRestart","riskLevel","affectedComponents","BULL","BEAR","BALANCE","STOP","history","get","push","Date","now","shift","set","getPerformanceTrends","fromEntries","getErrorPatterns","generateComprehensiveReport","performanceTrends","errorPatterns","systemHealth","getSystemHealth","tradingMetrics","getOperationCounters","cpuInfo","default","cpus","memInfo","process","memoryUsage","loadAvg","loadavg","cores","model","loadAverage","rss","heapTotal","heapUsed","external","system","platform","arch","uptime","hostname","exports","tradingLogger"],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\core\\logging\\trading-logger.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * COMPREHENSIVE TRADING AND SYSTEM LOGGER\r\n * =============================================================================\r\n * \r\n * This module provides detailed logging for all trading operations, market\r\n * analysis, strategy decisions, and system performance with rich context\r\n * and AI-powered explanations.\r\n * \r\n * Features:\r\n * - Detailed trade execution logging with reasoning\r\n * - Market analysis and sentiment logging\r\n * - Strategy decision logs with AI explanations\r\n * - Performance metrics with Intel NUC monitoring\r\n * - Error and exception logging with recovery actions\r\n * - Audit trail for configuration changes\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * =============================================================================\r\n */\r\n\r\nimport { EnhancedLogger, LogEmojis } from './enhanced-logger';\r\nimport { LogMetadata } from './logger';\r\nimport os from 'os';\r\nimport { performance } from 'perf_hooks';\r\nimport { execSync } from 'child_process';\r\n\r\n/**\r\n * Trade execution context interface\r\n */\r\ninterface TradeExecutionContext {\r\n  tradeId: string;\r\n  symbol: string;\r\n  side: 'buy' | 'sell';\r\n  amount: number;\r\n  price?: number;\r\n  orderType: 'market' | 'limit' | 'stop';\r\n  strategy: string;\r\n  confidence: number;\r\n  marketConditions: {\r\n    price: number;\r\n    volume: number;\r\n    volatility: number;\r\n    trend: 'bullish' | 'bearish' | 'neutral';\r\n    sentiment: number;\r\n  };\r\n  reasoning: {\r\n    entryReason: string;\r\n    exitReason?: string;\r\n    riskAssessment: string;\r\n    expectedOutcome: string;\r\n    alternativeActions: string[];\r\n  };\r\n  timestamp: Date;\r\n}\r\n\r\n/**\r\n * Market analysis context interface\r\n */\r\ninterface MarketAnalysisContext {\r\n  symbol: string;\r\n  timeframe: string;\r\n  analysis: {\r\n    technicalIndicators: Record<string, number>;\r\n    sentimentScore: number;\r\n    volumeAnalysis: Record<string, number>;\r\n    priceAction: Record<string, any>;\r\n    supportResistance: {\r\n      support: number[];\r\n      resistance: number[];\r\n    };\r\n  };\r\n  prediction: {\r\n    direction: 'up' | 'down' | 'sideways';\r\n    confidence: number;\r\n    timeHorizon: string;\r\n    targetPrice?: number;\r\n    stopLoss?: number;\r\n  };\r\n  reasoning: string;\r\n  timestamp: Date;\r\n}\r\n\r\n/**\r\n * Strategy decision context interface\r\n */\r\ninterface StrategyDecisionContext {\r\n  strategyName: string;\r\n  symbol: string;\r\n  decision: 'buy' | 'sell' | 'hold' | 'exit';\r\n  confidence: number;\r\n  parameters: Record<string, any>;\r\n  signals: {\r\n    technical: Record<string, number>;\r\n    fundamental: Record<string, any>;\r\n    sentiment: number;\r\n  };\r\n  reasoning: {\r\n    primaryFactors: string[];\r\n    riskFactors: string[];\r\n    opportunityFactors: string[];\r\n    aiExplanation: string;\r\n    confidenceFactors: string[];\r\n  };\r\n  alternatives: {\r\n    action: string;\r\n    probability: number;\r\n    reasoning: string;\r\n  }[];\r\n  timestamp: Date;\r\n}\r\n\r\n/**\r\n * System performance context interface\r\n */\r\ninterface SystemPerformanceContext {\r\n  component: 'intel_nuc' | 'network' | 'database' | 'api' | 'application';\r\n  metrics: {\r\n    cpu?: {\r\n      usage: number;\r\n      temperature?: number;\r\n      frequency?: number;\r\n    };\r\n    memory?: {\r\n      used: number;\r\n      total: number;\r\n      percentage: number;\r\n      swap?: number;\r\n    };\r\n    disk?: {\r\n      used: number;\r\n      total: number;\r\n      percentage: number;\r\n      iops?: number;\r\n    };\r\n    network?: {\r\n      latency: number;\r\n      bandwidth: number;\r\n      packetLoss?: number;\r\n      connections: number;\r\n    };\r\n    database?: {\r\n      connections: number;\r\n      queryTime: number;\r\n      cacheHitRatio?: number;\r\n    };\r\n  };\r\n  thresholds: {\r\n    warning: Record<string, number>;\r\n    critical: Record<string, number>;\r\n  };\r\n  status: 'healthy' | 'warning' | 'critical';\r\n  timestamp: Date;\r\n}\r\n\r\n/**\r\n * Error context interface with recovery actions\r\n */\r\ninterface ErrorContext {\r\n  errorId: string;\r\n  component: string;\r\n  errorType: 'trading' | 'system' | 'network' | 'database' | 'api';\r\n  severity: 'low' | 'medium' | 'high' | 'critical';\r\n  error: Error;\r\n  context: Record<string, any>;\r\n  recoveryActions: {\r\n    attempted: string[];\r\n    successful: string[];\r\n    failed: string[];\r\n    nextSteps: string[];\r\n  };\r\n  impact: {\r\n    tradingAffected: boolean;\r\n    systemStability: 'stable' | 'degraded' | 'unstable';\r\n    userExperience: 'normal' | 'degraded' | 'unavailable';\r\n  };\r\n  timestamp: Date;\r\n}\r\n\r\n/**\r\n * Configuration change audit context\r\n */\r\ninterface ConfigChangeContext {\r\n  changeId: string;\r\n  component: string;\r\n  changeType: 'create' | 'update' | 'delete';\r\n  changes: {\r\n    field: string;\r\n    oldValue: any;\r\n    newValue: any;\r\n  }[];\r\n  reason: string;\r\n  approvedBy: string;\r\n  impact: {\r\n    requiresRestart: boolean;\r\n    affectedComponents: string[];\r\n    riskLevel: 'low' | 'medium' | 'high';\r\n  };\r\n  timestamp: Date;\r\n}\r\n\r\n/**\r\n * Comprehensive trading and system logger\r\n */\r\nexport class TradingLogger extends EnhancedLogger {\r\n  private tradeSequence: number = 0;\r\n  private performanceHistory: Map<string, number[]> = new Map();\r\n  private errorHistory: Map<string, ErrorContext[]> = new Map();\r\n\r\n  constructor(componentName?: string) {\r\n    super(componentName || 'TradingLogger');\r\n  }\r\n\r\n  /**\r\n   * Log detailed trade execution with reasoning\r\n   */\r\n  public logTradeExecution(context: TradeExecutionContext): void {\r\n    this.tradeSequence++;\r\n    \r\n    const emoji = context.side === 'buy' ? LogEmojis.BUY : LogEmojis.SELL;\r\n    const message = `Trade execution: ${context.side.toUpperCase()} ${context.amount} ${context.symbol} @ $${context.price?.toFixed(4) || 'MARKET'}`;\r\n    \r\n    const enrichedMeta: LogMetadata = {\r\n      tradeId: context.tradeId,\r\n      sequence: this.tradeSequence,\r\n      symbol: context.symbol,\r\n      side: context.side,\r\n      amount: context.amount,\r\n      price: context.price,\r\n      orderType: context.orderType,\r\n      strategy: context.strategy,\r\n      confidence: context.confidence,\r\n      marketConditions: context.marketConditions,\r\n      reasoning: context.reasoning,\r\n      classification: 'CONFIDENTIAL',\r\n      timestamp: context.timestamp.toISOString()\r\n    };\r\n\r\n    this.logWithEmoji('info', emoji, message, enrichedMeta);\r\n    this.trading('trade_execution', message, enrichedMeta);\r\n\r\n    // Log detailed reasoning\r\n    this.logTradeReasoning(context);\r\n  }\r\n\r\n  /**\r\n   * Log trade reasoning and AI explanation\r\n   */\r\n  private logTradeReasoning(context: TradeExecutionContext): void {\r\n    const reasoningMessage = `Trade reasoning for ${context.tradeId}:\r\n    \r\n📊 Market Conditions:\r\n  • Price: $${context.marketConditions.price.toFixed(4)}\r\n  • Volume: ${context.marketConditions.volume.toLocaleString()}\r\n  • Volatility: ${(context.marketConditions.volatility * 100).toFixed(2)}%\r\n  • Trend: ${context.marketConditions.trend} ${this.getTrendEmoji(context.marketConditions.trend)}\r\n  • Sentiment: ${(context.marketConditions.sentiment * 100).toFixed(1)}%\r\n\r\n🧠 AI Reasoning:\r\n  • Entry Reason: ${context.reasoning.entryReason}\r\n  • Risk Assessment: ${context.reasoning.riskAssessment}\r\n  • Expected Outcome: ${context.reasoning.expectedOutcome}\r\n  \r\n🎯 Strategy: ${context.strategy} (${(context.confidence * 100).toFixed(1)}% confidence)\r\n\r\n🔄 Alternative Actions Considered:\r\n${context.reasoning.alternativeActions.map(action => `  • ${action}`).join('\\n')}`;\r\n\r\n    this.trading('trade_reasoning', reasoningMessage, {\r\n      tradeId: context.tradeId,\r\n      component: 'ai_decision_engine',\r\n      classification: 'INTERNAL'\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Log market analysis with sentiment and predictions\r\n   */\r\n  public logMarketAnalysis(context: MarketAnalysisContext): void {\r\n    const trendEmoji = this.getTrendEmoji(context.prediction.direction === 'up' ? 'bullish' : \r\n                                        context.prediction.direction === 'down' ? 'bearish' : 'neutral');\r\n    \r\n    const message = `Market analysis for ${context.symbol} (${context.timeframe}): ${context.prediction.direction} ${trendEmoji} (${(context.prediction.confidence * 100).toFixed(1)}% confidence)`;\r\n    \r\n    const enrichedMeta: LogMetadata = {\r\n      symbol: context.symbol,\r\n      timeframe: context.timeframe,\r\n      analysis: context.analysis,\r\n      prediction: context.prediction,\r\n      reasoning: context.reasoning,\r\n      classification: 'INTERNAL',\r\n      timestamp: context.timestamp.toISOString()\r\n    };\r\n\r\n    this.logWithEmoji('info', LogEmojis.TREND_UP, message, enrichedMeta);\r\n    this.trading('market_analysis', message, enrichedMeta);\r\n\r\n    // Log detailed technical analysis\r\n    this.logTechnicalAnalysis(context);\r\n  }\r\n\r\n  /**\r\n   * Log detailed technical analysis\r\n   */\r\n  private logTechnicalAnalysis(context: MarketAnalysisContext): void {\r\n    const technicalMessage = `Technical analysis for ${context.symbol}:\r\n\r\n📈 Technical Indicators:\r\n${Object.entries(context.analysis.technicalIndicators)\r\n  .map(([indicator, value]) => `  • ${indicator}: ${typeof value === 'number' ? value.toFixed(4) : value}`)\r\n  .join('\\n')}\r\n\r\n📊 Volume Analysis:\r\n${Object.entries(context.analysis.volumeAnalysis)\r\n  .map(([metric, value]) => `  • ${metric}: ${typeof value === 'number' ? value.toLocaleString() : value}`)\r\n  .join('\\n')}\r\n\r\n🎯 Support/Resistance Levels:\r\n  • Support: ${context.analysis.supportResistance.support.map(s => `$${s.toFixed(4)}`).join(', ')}\r\n  • Resistance: ${context.analysis.supportResistance.resistance.map(r => `$${r.toFixed(4)}`).join(', ')}\r\n\r\n🧠 AI Analysis: ${context.reasoning}`;\r\n\r\n    this.trading('technical_analysis', technicalMessage, {\r\n      symbol: context.symbol,\r\n      component: 'technical_analyzer',\r\n      classification: 'INTERNAL'\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Log strategy decisions with AI explanations\r\n   */\r\n  public logStrategyDecision(context: StrategyDecisionContext): void {\r\n    const decisionEmoji = this.getDecisionEmoji(context.decision);\r\n    const message = `Strategy decision: ${context.strategyName} → ${context.decision.toUpperCase()} ${context.symbol} (${(context.confidence * 100).toFixed(1)}% confidence)`;\r\n    \r\n    const enrichedMeta: LogMetadata = {\r\n      strategyName: context.strategyName,\r\n      symbol: context.symbol,\r\n      decision: context.decision,\r\n      confidence: context.confidence,\r\n      parameters: context.parameters,\r\n      signals: context.signals,\r\n      reasoning: context.reasoning,\r\n      alternatives: context.alternatives,\r\n      classification: 'INTERNAL',\r\n      timestamp: context.timestamp.toISOString()\r\n    };\r\n\r\n    this.logWithEmoji('info', decisionEmoji, message, enrichedMeta);\r\n    this.trading('strategy_decision', message, enrichedMeta);\r\n\r\n    // Log detailed strategy reasoning\r\n    this.logStrategyReasoning(context);\r\n  }\r\n\r\n  /**\r\n   * Log detailed strategy reasoning\r\n   */\r\n  private logStrategyReasoning(context: StrategyDecisionContext): void {\r\n    const reasoningMessage = `Strategy reasoning for ${context.strategyName}:\r\n\r\n🎯 Decision: ${context.decision.toUpperCase()} (${(context.confidence * 100).toFixed(1)}% confidence)\r\n\r\n📊 Signals:\r\n  • Technical: ${Object.entries(context.signals.technical)\r\n    .map(([signal, value]) => `${signal}=${typeof value === 'number' ? value.toFixed(4) : value}`)\r\n    .join(', ')}\r\n  • Sentiment: ${(context.signals.sentiment * 100).toFixed(1)}%\r\n\r\n🧠 AI Reasoning: ${context.reasoning.aiExplanation}\r\n\r\n✅ Primary Factors:\r\n${context.reasoning.primaryFactors.map(factor => `  • ${factor}`).join('\\n')}\r\n\r\n⚠️ Risk Factors:\r\n${context.reasoning.riskFactors.map(factor => `  • ${factor}`).join('\\n')}\r\n\r\n🚀 Opportunity Factors:\r\n${context.reasoning.opportunityFactors.map(factor => `  • ${factor}`).join('\\n')}\r\n\r\n🎲 Alternative Actions:\r\n${context.alternatives.map(alt => `  • ${alt.action} (${(alt.probability * 100).toFixed(1)}%): ${alt.reasoning}`).join('\\n')}`;\r\n\r\n    this.trading('strategy_reasoning', reasoningMessage, {\r\n      strategyName: context.strategyName,\r\n      symbol: context.symbol,\r\n      component: 'strategy_engine',\r\n      classification: 'INTERNAL'\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Log Intel NUC and system performance metrics\r\n   */\r\n  public logSystemPerformance(context: SystemPerformanceContext): void {\r\n    const statusEmoji = context.status === 'healthy' ? LogEmojis.SUCCESS :\r\n                       context.status === 'warning' ? LogEmojis.WARNING : LogEmojis.ERROR;\r\n    \r\n    const message = `System performance: ${context.component} - ${context.status.toUpperCase()}`;\r\n    \r\n    const enrichedMeta: LogMetadata = {\r\n      component: context.component,\r\n      metrics: context.metrics,\r\n      thresholds: context.thresholds,\r\n      status: context.status,\r\n      classification: 'INTERNAL',\r\n      timestamp: context.timestamp.toISOString()\r\n    };\r\n\r\n    this.logWithEmoji(\r\n      context.status === 'critical' ? 'error' : context.status === 'warning' ? 'warn' : 'info',\r\n      statusEmoji,\r\n      message,\r\n      enrichedMeta\r\n    );\r\n\r\n    // Log detailed performance metrics\r\n    this.logDetailedPerformanceMetrics(context);\r\n    \r\n    // Store performance history\r\n    this.storePerformanceHistory(context);\r\n  }\r\n\r\n  /**\r\n   * Log detailed performance metrics\r\n   */\r\n  private logDetailedPerformanceMetrics(context: SystemPerformanceContext): void {\r\n    let metricsMessage = `Detailed performance metrics for ${context.component}:\\n`;\r\n\r\n    if (context.metrics.cpu) {\r\n      metricsMessage += `\\n⚙️ CPU Metrics:\r\n  • Usage: ${context.metrics.cpu.usage.toFixed(1)}%\r\n  • Temperature: ${context.metrics.cpu.temperature?.toFixed(1) || 'N/A'}°C\r\n  • Frequency: ${context.metrics.cpu.frequency?.toFixed(0) || 'N/A'}MHz`;\r\n    }\r\n\r\n    if (context.metrics.memory) {\r\n      metricsMessage += `\\n🧠 Memory Metrics:\r\n  • Used: ${(context.metrics.memory.used / 1024**3).toFixed(2)}GB\r\n  • Total: ${(context.metrics.memory.total / 1024**3).toFixed(2)}GB\r\n  • Usage: ${context.metrics.memory.percentage.toFixed(1)}%\r\n  • Swap: ${context.metrics.memory.swap ? (context.metrics.memory.swap / 1024**3).toFixed(2) + 'GB' : 'N/A'}`;\r\n    }\r\n\r\n    if (context.metrics.disk) {\r\n      metricsMessage += `\\n💽 Disk Metrics:\r\n  • Used: ${(context.metrics.disk.used / 1024**3).toFixed(2)}GB\r\n  • Total: ${(context.metrics.disk.total / 1024**3).toFixed(2)}GB\r\n  • Usage: ${context.metrics.disk.percentage.toFixed(1)}%\r\n  • IOPS: ${context.metrics.disk.iops?.toLocaleString() || 'N/A'}`;\r\n    }\r\n\r\n    if (context.metrics.network) {\r\n      metricsMessage += `\\n🌐 Network Metrics:\r\n  • Latency: ${context.metrics.network.latency.toFixed(1)}ms\r\n  • Bandwidth: ${(context.metrics.network.bandwidth / 1024**2).toFixed(2)}MB/s\r\n  • Packet Loss: ${context.metrics.network.packetLoss?.toFixed(2) || 'N/A'}%\r\n  • Connections: ${context.metrics.network.connections}`;\r\n    }\r\n\r\n    if (context.metrics.database) {\r\n      metricsMessage += `\\n🗄️ Database Metrics:\r\n  • Connections: ${context.metrics.database.connections}\r\n  • Query Time: ${context.metrics.database.queryTime.toFixed(2)}ms\r\n  • Cache Hit Ratio: ${context.metrics.database.cacheHitRatio?.toFixed(1) || 'N/A'}%`;\r\n    }\r\n\r\n    this.info(metricsMessage, {\r\n      component: context.component,\r\n      classification: 'INTERNAL'\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Log errors with comprehensive context and recovery actions\r\n   */\r\n  public logErrorWithRecovery(context: ErrorContext): void {\r\n    const severityEmoji = context.severity === 'critical' ? LogEmojis.ERROR :\r\n                         context.severity === 'high' ? LogEmojis.ALERT :\r\n                         context.severity === 'medium' ? LogEmojis.WARNING : LogEmojis.INFO;\r\n    \r\n    const message = `${context.errorType.toUpperCase()} error in ${context.component}: ${context.error.message}`;\r\n    \r\n    const enrichedMeta: LogMetadata = {\r\n      errorId: context.errorId,\r\n      component: context.component,\r\n      errorType: context.errorType,\r\n      severity: context.severity,\r\n      error: {\r\n        name: context.error.name,\r\n        message: context.error.message,\r\n        stack: context.error.stack\r\n      },\r\n      context: context.context,\r\n      recoveryActions: context.recoveryActions,\r\n      impact: context.impact,\r\n      classification: 'CONFIDENTIAL',\r\n      timestamp: context.timestamp.toISOString()\r\n    };\r\n\r\n    this.logWithEmoji('error', severityEmoji, message, enrichedMeta);\r\n    \r\n    // Log detailed error context and recovery\r\n    this.logErrorRecoveryDetails(context);\r\n    \r\n    // Store error history\r\n    this.storeErrorHistory(context);\r\n  }\r\n\r\n  /**\r\n   * Log detailed error recovery information\r\n   */\r\n  private logErrorRecoveryDetails(context: ErrorContext): void {\r\n    const recoveryMessage = `Error recovery details for ${context.errorId}:\r\n\r\n❌ Error Details:\r\n  • Type: ${context.errorType}\r\n  • Severity: ${context.severity}\r\n  • Component: ${context.component}\r\n  • Message: ${context.error.message}\r\n\r\n🔧 Recovery Actions:\r\n  • Attempted: ${context.recoveryActions.attempted.join(', ') || 'None'}\r\n  • Successful: ${context.recoveryActions.successful.join(', ') || 'None'}\r\n  • Failed: ${context.recoveryActions.failed.join(', ') || 'None'}\r\n  • Next Steps: ${context.recoveryActions.nextSteps.join(', ') || 'None'}\r\n\r\n📊 Impact Assessment:\r\n  • Trading Affected: ${context.impact.tradingAffected ? 'Yes' : 'No'}\r\n  • System Stability: ${context.impact.systemStability}\r\n  • User Experience: ${context.impact.userExperience}\r\n\r\n🔍 Context:\r\n${Object.entries(context.context)\r\n  .map(([key, value]) => `  • ${key}: ${typeof value === 'object' ? JSON.stringify(value) : value}`)\r\n  .join('\\n')}`;\r\n\r\n    this.error(recoveryMessage, {\r\n      errorId: context.errorId,\r\n      component: context.component,\r\n      classification: 'CONFIDENTIAL'\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Log configuration changes with audit trail\r\n   */\r\n  public logConfigurationChange(context: ConfigChangeContext): void {\r\n    const changeEmoji = context.changeType === 'create' ? LogEmojis.SUCCESS :\r\n                       context.changeType === 'update' ? LogEmojis.RESTART :\r\n                       LogEmojis.ERROR;\r\n    \r\n    const message = `Configuration ${context.changeType}: ${context.component} (${context.changes.length} changes)`;\r\n    \r\n    const enrichedMeta: LogMetadata = {\r\n      changeId: context.changeId,\r\n      component: context.component,\r\n      changeType: context.changeType,\r\n      changes: context.changes,\r\n      reason: context.reason,\r\n      approvedBy: context.approvedBy,\r\n      impact: context.impact,\r\n      classification: 'CONFIDENTIAL',\r\n      timestamp: context.timestamp.toISOString()\r\n    };\r\n\r\n    this.logWithEmoji('info', changeEmoji, message, enrichedMeta);\r\n    this.audit({\r\n      auditId: context.changeId,\r\n      eventType: 'CONFIGURATION_CHANGE',\r\n      actor: context.approvedBy,\r\n      resource: context.component,\r\n      action: context.changeType.toUpperCase(),\r\n      result: 'SUCCESS',\r\n      auditData: enrichedMeta,\r\n      timestamp: context.timestamp\r\n    });\r\n\r\n    // Log detailed configuration changes\r\n    this.logConfigurationDetails(context);\r\n  }\r\n\r\n  /**\r\n   * Log detailed configuration change information\r\n   */\r\n  private logConfigurationDetails(context: ConfigChangeContext): void {\r\n    const configMessage = `Configuration change details for ${context.changeId}:\r\n\r\n🔧 Change Summary:\r\n  • Component: ${context.component}\r\n  • Type: ${context.changeType}\r\n  • Approved By: ${context.approvedBy}\r\n  • Reason: ${context.reason}\r\n\r\n📝 Changes Made:\r\n${context.changes.map(change => \r\n  `  • ${change.field}: ${JSON.stringify(change.oldValue)} → ${JSON.stringify(change.newValue)}`\r\n).join('\\n')}\r\n\r\n⚠️ Impact Assessment:\r\n  • Requires Restart: ${context.impact.requiresRestart ? 'Yes' : 'No'}\r\n  • Risk Level: ${context.impact.riskLevel}\r\n  • Affected Components: ${context.impact.affectedComponents.join(', ') || 'None'}`;\r\n\r\n    this.info(configMessage, {\r\n      changeId: context.changeId,\r\n      component: context.component,\r\n      classification: 'CONFIDENTIAL'\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get trend emoji based on direction\r\n   */\r\n  private getTrendEmoji(trend: string): string {\r\n    switch (trend) {\r\n      case 'bullish': return LogEmojis.BULL;\r\n      case 'bearish': return LogEmojis.BEAR;\r\n      case 'neutral': return LogEmojis.BALANCE;\r\n      default: return LogEmojis.INFO;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get decision emoji based on action\r\n   */\r\n  private getDecisionEmoji(decision: string): string {\r\n    switch (decision) {\r\n      case 'buy': return LogEmojis.BUY;\r\n      case 'sell': return LogEmojis.SELL;\r\n      case 'hold': return LogEmojis.BALANCE;\r\n      case 'exit': return LogEmojis.STOP;\r\n      default: return LogEmojis.INFO;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Store performance history for trend analysis\r\n   */\r\n  private storePerformanceHistory(context: SystemPerformanceContext): void {\r\n    const key = `${context.component}_${context.status}`;\r\n    const history = this.performanceHistory.get(key) || [];\r\n    \r\n    // Store timestamp as performance metric\r\n    history.push(Date.now());\r\n    \r\n    // Keep only last 100 entries\r\n    if (history.length > 100) {\r\n      history.shift();\r\n    }\r\n    \r\n    this.performanceHistory.set(key, history);\r\n  }\r\n\r\n  /**\r\n   * Store error history for pattern analysis\r\n   */\r\n  private storeErrorHistory(context: ErrorContext): void {\r\n    const key = `${context.component}_${context.errorType}`;\r\n    const history = this.errorHistory.get(key) || [];\r\n    \r\n    history.push(context);\r\n    \r\n    // Keep only last 50 errors\r\n    if (history.length > 50) {\r\n      history.shift();\r\n    }\r\n    \r\n    this.errorHistory.set(key, history);\r\n  }\r\n\r\n  /**\r\n   * Get performance trends\r\n   */\r\n  public getPerformanceTrends(): Record<string, number[]> {\r\n    return Object.fromEntries(this.performanceHistory);\r\n  }\r\n\r\n  /**\r\n   * Get error patterns\r\n   */\r\n  public getErrorPatterns(): Record<string, ErrorContext[]> {\r\n    return Object.fromEntries(this.errorHistory);\r\n  }\r\n\r\n  /**\r\n   * Generate comprehensive system report\r\n   */\r\n  public async generateComprehensiveReport(): Promise<{\r\n    timestamp: string;\r\n    performanceTrends: Record<string, number[]>;\r\n    errorPatterns: Record<string, ErrorContext[]>;\r\n    systemHealth: any;\r\n    tradingMetrics: any;\r\n  }> {\r\n    return {\r\n      timestamp: new Date().toISOString(),\r\n      performanceTrends: this.getPerformanceTrends(),\r\n      errorPatterns: this.getErrorPatterns(),\r\n      systemHealth: await this.getSystemHealth(),\r\n      tradingMetrics: this.getOperationCounters()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get current system health\r\n   */\r\n  private async getSystemHealth(): Promise<any> {\r\n    try {\r\n      const cpuInfo = os.cpus();\r\n      const memInfo = process.memoryUsage();\r\n      const loadAvg = os.loadavg();\r\n      \r\n      return {\r\n        cpu: {\r\n          cores: cpuInfo.length,\r\n          model: cpuInfo[0]?.model || 'Unknown',\r\n          loadAverage: loadAvg\r\n        },\r\n        memory: {\r\n          rss: memInfo.rss,\r\n          heapTotal: memInfo.heapTotal,\r\n          heapUsed: memInfo.heapUsed,\r\n          external: memInfo.external\r\n        },\r\n        system: {\r\n          platform: os.platform(),\r\n          arch: os.arch(),\r\n          uptime: os.uptime(),\r\n          hostname: os.hostname()\r\n        }\r\n      };\r\n    } catch (error) {\r\n      return { error: 'Failed to collect system health data' };\r\n    }\r\n  }\r\n}\r\n\r\n// Create and export singleton instance\r\nexport const tradingLogger = new TradingLogger();\r\n\r\n// Export types and interfaces\r\nexport type {\r\n  TradeExecutionContext,\r\n  MarketAnalysisContext,\r\n  StrategyDecisionContext,\r\n  SystemPerformanceContext,\r\n  ErrorContext,\r\n  ConfigChangeContext\r\n};"],"mappings":"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","ignoreList":[]}