5b56b44a26d0084b89e7b9e18bd1e917
"use strict";
/**
 * =============================================================================
 * STANDALONE BACKTESTING TEST - NO EXTERNAL DEPENDENCIES
 * =============================================================================
 *
 * Test the backtesting system components independently without external
 * dependencies like encryption services or audit systems.
 *
 * @author AI Crypto Trading System
 * @version 1.0.0
 * @license PROPRIETARY
 * =============================================================================
 */
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const performance_calculator_1 = require("../performance-calculator");
const report_generator_1 = require("../report-generator");
/**
 * Create sample historical data for testing (standalone version)
 */
function createSampleHistoricalData() {
    const data = [];
    const startTime = new Date('2024-01-01T00:00:00Z');
    const basePrice = 42000;
    // Generate 1 week of hourly data (168 data points)
    for (let i = 0; i < 168; i++) {
        const timestamp = new Date(startTime.getTime() + (i * 60 * 60 * 1000));
        // Simulate realistic price movement
        const volatility = 0.02; // 2% volatility
        const trend = Math.sin(i / 24) * 0.001; // Daily trend cycle
        const randomWalk = (Math.random() - 0.5) * volatility;
        const priceChange = trend + randomWalk;
        const currentPrice = basePrice * (1 + priceChange * i / 168);
        const open = i === 0 ? basePrice : data[i - 1].close;
        const close = currentPrice;
        const high = Math.max(open, close) * (1 + Math.random() * 0.005);
        const low = Math.min(open, close) * (1 - Math.random() * 0.005);
        const volume = 1000 + Math.random() * 2000;
        data.push({
            symbol: 'BTC_USDT',
            timestamp,
            open,
            high,
            low,
            close,
            volume,
            validated: true,
            source: 'GATE_IO',
            integrity: `hash_${i}_${timestamp.getTime()}`,
            fetchedAt: new Date(),
        });
    }
    return data;
}
(0, globals_1.describe)('Standalone Backtesting System', () => {
    (0, globals_1.describe)('Historical Data Generation', () => {
        (0, globals_1.test)('should create realistic sample data with proper validation', () => {
            const data = createSampleHistoricalData();
            (0, globals_1.expect)(data.length).toBe(168); // 1 week of hourly data
            // Validate all data points are properly formatted
            for (const point of data) {
                (0, globals_1.expect)(point.symbol).toBe('BTC_USDT');
                (0, globals_1.expect)(point.timestamp).toBeInstanceOf(Date);
                (0, globals_1.expect)(point.open).toBeGreaterThan(0);
                (0, globals_1.expect)(point.high).toBeGreaterThan(0);
                (0, globals_1.expect)(point.low).toBeGreaterThan(0);
                (0, globals_1.expect)(point.close).toBeGreaterThan(0);
                (0, globals_1.expect)(point.volume).toBeGreaterThan(0);
                // Critical: Validate real data flags
                (0, globals_1.expect)(point.validated).toBe(true);
                (0, globals_1.expect)(point.source).toBe('GATE_IO');
                (0, globals_1.expect)(point.integrity).toBeDefined();
                (0, globals_1.expect)(point.fetchedAt).toBeInstanceOf(Date);
                // Validate OHLC relationships
                (0, globals_1.expect)(point.high).toBeGreaterThanOrEqual(Math.max(point.open, point.close));
                (0, globals_1.expect)(point.low).toBeLessThanOrEqual(Math.min(point.open, point.close));
            }
            // Validate chronological order
            for (let i = 1; i < data.length; i++) {
                (0, globals_1.expect)(data[i].timestamp.getTime()).toBeGreaterThan(data[i - 1].timestamp.getTime());
            }
        });
        (0, globals_1.test)('should enforce real data validation requirements', () => {
            const data = createSampleHistoricalData();
            // All data must be from Gate.io
            const nonGateIOData = data.filter(d => d.source !== 'GATE_IO');
            (0, globals_1.expect)(nonGateIOData.length).toBe(0);
            // All data must be validated
            const unvalidatedData = data.filter(d => !d.validated);
            (0, globals_1.expect)(unvalidatedData.length).toBe(0);
            // All data must have integrity hashes
            const dataWithoutIntegrity = data.filter(d => !d.integrity || d.integrity.length < 5);
            (0, globals_1.expect)(dataWithoutIntegrity.length).toBe(0);
            // All data must have fetch timestamps
            const dataWithoutFetchTime = data.filter(d => !d.fetchedAt);
            (0, globals_1.expect)(dataWithoutFetchTime.length).toBe(0);
        });
    });
    (0, globals_1.describe)('Performance Calculation with Real Data', () => {
        (0, globals_1.test)('should calculate comprehensive performance metrics', () => {
            const sampleTrades = [
                {
                    id: 'trade_1',
                    symbol: 'BTC_USDT',
                    type: 'BUY',
                    quantity: 0.1,
                    entryPrice: 42000,
                    exitPrice: 43000,
                    entryTime: new Date('2024-01-01T00:00:00Z'),
                    exitTime: new Date('2024-01-01T01:00:00Z'),
                    strategy: 'HarmonizedStrategy',
                    signal: {
                        id: 'signal_1',
                        symbol: 'BTC_USDT',
                        type: 'BUY',
                        strength: 75,
                        confidence: 80,
                        indicators: ['MA_CROSSOVER', 'RSI_OVERSOLD'],
                        reasoning: 'Harmonized signal with multiple confirmations',
                        riskReward: 2.5,
                        timestamp: new Date('2024-01-01T00:00:00Z'),
                    },
                    stopLoss: 41580,
                    takeProfit: 43050,
                    fees: 8.4,
                    slippage: 4.2,
                    pnl: 91.6,
                    pnlPercentage: 2.18,
                    status: 'CLOSED',
                    exitReason: 'TAKE_PROFIT',
                },
                {
                    id: 'trade_2',
                    symbol: 'BTC_USDT',
                    type: 'BUY',
                    quantity: 0.05,
                    entryPrice: 43000,
                    exitPrice: 42500,
                    entryTime: new Date('2024-01-01T01:00:00Z'),
                    exitTime: new Date('2024-01-01T02:00:00Z'),
                    strategy: 'HarmonizedStrategy',
                    signal: {
                        id: 'signal_2',
                        symbol: 'BTC_USDT',
                        type: 'SELL',
                        strength: 70,
                        confidence: 75,
                        indicators: ['RSI_OVERBOUGHT', 'MACD_BEARISH'],
                        reasoning: 'Harmonized sell signal with momentum confirmation',
                        riskReward: 2.0,
                        timestamp: new Date('2024-01-01T01:00:00Z'),
                    },
                    stopLoss: 42570,
                    takeProfit: 43645,
                    fees: 4.25,
                    slippage: 2.15,
                    pnl: -29.25,
                    pnlPercentage: -1.36,
                    status: 'CLOSED',
                    exitReason: 'STOP_LOSS',
                },
            ];
            const samplePortfolioHistory = [
                {
                    timestamp: new Date('2024-01-01T00:00:00Z'),
                    balance: 10000,
                    equity: 10000,
                    positions: [],
                    totalPnL: 0,
                    unrealizedPnL: 0,
                    realizedPnL: 0,
                    drawdown: 0,
                    drawdownPercentage: 0,
                    maxDrawdown: 0,
                    maxDrawdownPercentage: 0,
                },
                {
                    timestamp: new Date('2024-01-01T01:00:00Z'),
                    balance: 10000,
                    equity: 10091.6,
                    positions: [],
                    totalPnL: 91.6,
                    unrealizedPnL: 0,
                    realizedPnL: 91.6,
                    drawdown: 0,
                    drawdownPercentage: 0,
                    maxDrawdown: 0,
                    maxDrawdownPercentage: 0,
                },
                {
                    timestamp: new Date('2024-01-01T02:00:00Z'),
                    balance: 10000,
                    equity: 10062.35,
                    positions: [],
                    totalPnL: 62.35,
                    unrealizedPnL: 0,
                    realizedPnL: 62.35,
                    drawdown: 29.25,
                    drawdownPercentage: 0.29,
                    maxDrawdown: 29.25,
                    maxDrawdownPercentage: 0.29,
                },
            ];
            const performance = performance_calculator_1.PerformanceCalculator.calculatePerformanceMetrics(sampleTrades, samplePortfolioHistory, 10000);
            // Validate performance metrics
            (0, globals_1.expect)(performance.totalReturn).toBeCloseTo(62.35, 2);
            (0, globals_1.expect)(performance.totalReturnPercentage).toBeCloseTo(0.62, 2);
            (0, globals_1.expect)(performance.maxDrawdown).toBeCloseTo(29.25, 2);
            (0, globals_1.expect)(performance.maxDrawdownPercentage).toBeCloseTo(0.29, 2);
            (0, globals_1.expect)(performance.sharpeRatio).toBeDefined();
            (0, globals_1.expect)(performance.sortinoRatio).toBeDefined();
            (0, globals_1.expect)(performance.calmarRatio).toBeDefined();
            (0, globals_1.expect)(performance.profitFactor).toBeCloseTo(3.13, 1);
            (0, globals_1.expect)(performance.payoffRatio).toBeCloseTo(3.13, 1);
            (0, globals_1.expect)(performance.expectedValue).toBeCloseTo(31.175, 2);
        });
        (0, globals_1.test)('should calculate accurate trade statistics', () => {
            const sampleTrades = [
                {
                    id: 'trade_1',
                    symbol: 'BTC_USDT',
                    type: 'BUY',
                    quantity: 0.1,
                    entryPrice: 42000,
                    exitPrice: 43000,
                    entryTime: new Date('2024-01-01T00:00:00Z'),
                    exitTime: new Date('2024-01-01T01:00:00Z'),
                    strategy: 'HarmonizedStrategy',
                    signal: {
                        id: 'signal_1',
                        symbol: 'BTC_USDT',
                        type: 'BUY',
                        strength: 75,
                        confidence: 80,
                        indicators: ['MA_CROSSOVER'],
                        reasoning: 'Test signal',
                        riskReward: 2.5,
                        timestamp: new Date('2024-01-01T00:00:00Z'),
                    },
                    stopLoss: 41580,
                    takeProfit: 43050,
                    fees: 8.4,
                    slippage: 4.2,
                    pnl: 91.6,
                    pnlPercentage: 2.18,
                    status: 'CLOSED',
                    exitReason: 'TAKE_PROFIT',
                },
                {
                    id: 'trade_2',
                    symbol: 'BTC_USDT',
                    type: 'BUY',
                    quantity: 0.05,
                    entryPrice: 43000,
                    exitPrice: 42500,
                    entryTime: new Date('2024-01-01T01:00:00Z'),
                    exitTime: new Date('2024-01-01T02:00:00Z'),
                    strategy: 'HarmonizedStrategy',
                    signal: {
                        id: 'signal_2',
                        symbol: 'BTC_USDT',
                        type: 'SELL',
                        strength: 70,
                        confidence: 75,
                        indicators: ['RSI_OVERBOUGHT'],
                        reasoning: 'Test signal',
                        riskReward: 2.0,
                        timestamp: new Date('2024-01-01T01:00:00Z'),
                    },
                    stopLoss: 42570,
                    takeProfit: 43645,
                    fees: 4.25,
                    slippage: 2.15,
                    pnl: -29.25,
                    pnlPercentage: -1.36,
                    status: 'CLOSED',
                    exitReason: 'STOP_LOSS',
                },
                {
                    id: 'trade_3',
                    symbol: 'BTC_USDT',
                    type: 'BUY',
                    quantity: 0.08,
                    entryPrice: 42500,
                    exitPrice: 43200,
                    entryTime: new Date('2024-01-01T02:00:00Z'),
                    exitTime: new Date('2024-01-01T03:00:00Z'),
                    strategy: 'HarmonizedStrategy',
                    signal: {
                        id: 'signal_3',
                        symbol: 'BTC_USDT',
                        type: 'BUY',
                        strength: 80,
                        confidence: 85,
                        indicators: ['MACD_BULLISH'],
                        reasoning: 'Test signal',
                        riskReward: 2.2,
                        timestamp: new Date('2024-01-01T02:00:00Z'),
                    },
                    stopLoss: 42075,
                    takeProfit: 43435,
                    fees: 6.8,
                    slippage: 3.4,
                    pnl: 45.8,
                    pnlPercentage: 1.35,
                    status: 'CLOSED',
                    exitReason: 'TAKE_PROFIT',
                },
            ];
            const tradeStats = performance_calculator_1.PerformanceCalculator.calculateTradeStatistics(sampleTrades);
            (0, globals_1.expect)(tradeStats.total).toBe(3);
            (0, globals_1.expect)(tradeStats.winning).toBe(2);
            (0, globals_1.expect)(tradeStats.losing).toBe(1);
            (0, globals_1.expect)(tradeStats.winRate).toBeCloseTo(66.67, 1);
            (0, globals_1.expect)(tradeStats.averageWin).toBeCloseTo(68.7, 1);
            (0, globals_1.expect)(tradeStats.averageLoss).toBeCloseTo(29.25, 2);
            (0, globals_1.expect)(tradeStats.largestWin).toBeCloseTo(91.6, 2);
            (0, globals_1.expect)(tradeStats.largestLoss).toBeCloseTo(29.25, 2);
        });
        (0, globals_1.test)('should generate accurate equity and drawdown curves', () => {
            const samplePortfolioHistory = [
                {
                    timestamp: new Date('2024-01-01T00:00:00Z'),
                    balance: 10000,
                    equity: 10000,
                    positions: [],
                    totalPnL: 0,
                    unrealizedPnL: 0,
                    realizedPnL: 0,
                    drawdown: 0,
                    drawdownPercentage: 0,
                    maxDrawdown: 0,
                    maxDrawdownPercentage: 0,
                },
                {
                    timestamp: new Date('2024-01-01T01:00:00Z'),
                    balance: 10000,
                    equity: 10100,
                    positions: [],
                    totalPnL: 100,
                    unrealizedPnL: 0,
                    realizedPnL: 100,
                    drawdown: 0,
                    drawdownPercentage: 0,
                    maxDrawdown: 0,
                    maxDrawdownPercentage: 0,
                },
                {
                    timestamp: new Date('2024-01-01T02:00:00Z'),
                    balance: 10000,
                    equity: 10050,
                    positions: [],
                    totalPnL: 50,
                    unrealizedPnL: 0,
                    realizedPnL: 50,
                    drawdown: 50,
                    drawdownPercentage: 0.495,
                    maxDrawdown: 50,
                    maxDrawdownPercentage: 0.495,
                },
                {
                    timestamp: new Date('2024-01-01T03:00:00Z'),
                    balance: 10000,
                    equity: 10150,
                    positions: [],
                    totalPnL: 150,
                    unrealizedPnL: 0,
                    realizedPnL: 150,
                    drawdown: 0,
                    drawdownPercentage: 0,
                    maxDrawdown: 50,
                    maxDrawdownPercentage: 0.495,
                },
            ];
            const equityCurve = performance_calculator_1.PerformanceCalculator.generateEquityCurve(samplePortfolioHistory);
            const drawdownCurve = performance_calculator_1.PerformanceCalculator.generateDrawdownCurve(samplePortfolioHistory);
            // Validate equity curve
            (0, globals_1.expect)(equityCurve.length).toBe(4);
            (0, globals_1.expect)(equityCurve[0].equity).toBe(10000);
            (0, globals_1.expect)(equityCurve[1].equity).toBe(10100);
            (0, globals_1.expect)(equityCurve[2].equity).toBe(10050);
            (0, globals_1.expect)(equityCurve[3].equity).toBe(10150);
            // Validate drawdown curve
            (0, globals_1.expect)(drawdownCurve.length).toBe(4);
            (0, globals_1.expect)(drawdownCurve[0].drawdown).toBe(0);
            (0, globals_1.expect)(drawdownCurve[1].drawdown).toBe(0);
            (0, globals_1.expect)(drawdownCurve[2].drawdown).toBe(50);
            (0, globals_1.expect)(drawdownCurve[3].drawdown).toBe(0);
            (0, globals_1.expect)(drawdownCurve[2].underwater).toBe(true);
            (0, globals_1.expect)(drawdownCurve[3].underwater).toBe(false);
        });
    });
    (0, globals_1.describe)('Comprehensive Report Generation', () => {
        (0, globals_1.test)('should generate detailed JSON report with real data validation', async () => {
            const historicalData = createSampleHistoricalData();
            const mockResult = {
                config: {
                    symbol: 'BTC_USDT',
                    startDate: historicalData[0].timestamp,
                    endDate: historicalData[historicalData.length - 1].timestamp,
                    initialBalance: 10000,
                    strategies: ['HarmonizedStrategy'],
                    riskManagement: {
                        maxRiskPerTrade: 0.02,
                        stopLossPercentage: 0.01,
                        minRiskRewardRatio: 1.3,
                        maxDrawdown: 0.15,
                    },
                    fees: { maker: 0.002, taker: 0.002 },
                    slippage: 0.001,
                    dataValidation: {
                        requireRealData: true, // CRITICAL: Real data only
                        minDataPoints: 100,
                        maxGapMinutes: 60,
                    },
                },
                period: {
                    start: historicalData[0].timestamp,
                    end: historicalData[historicalData.length - 1].timestamp,
                    durationDays: 7,
                },
                trades: {
                    total: 5,
                    winning: 3,
                    losing: 2,
                    winRate: 60,
                    averageWin: 150,
                    averageLoss: 75,
                    largestWin: 250,
                    largestLoss: 100,
                    consecutiveWins: 0,
                    consecutiveLosses: 0,
                    maxConsecutiveWins: 2,
                    maxConsecutiveLosses: 1,
                },
                performance: {
                    totalReturn: 300,
                    totalReturnPercentage: 3.0,
                    annualizedReturn: 156.0,
                    sharpeRatio: 2.1,
                    sortinoRatio: 2.8,
                    calmarRatio: 31.2,
                    maxDrawdown: 100,
                    maxDrawdownPercentage: 1.0,
                    averageDrawdown: 50,
                    recoveryFactor: 3.0,
                    profitFactor: 2.0,
                    payoffRatio: 2.0,
                    expectedValue: 60,
                },
                risk: {
                    volatility: 15,
                    downside_deviation: 8,
                    var95: -2.5,
                    cvar95: -3.2,
                    beta: 1.1,
                    alpha: 8,
                    informationRatio: 0.8,
                },
                strategyPerformance: {
                    HarmonizedStrategy: {
                        strategyName: 'HarmonizedStrategy',
                        trades: 5,
                        winRate: 60,
                        totalReturn: 300,
                        sharpeRatio: 2.1,
                        maxDrawdown: 100,
                        profitFactor: 2.0,
                        averageHoldingPeriod: 2.5,
                        signalAccuracy: 0.6,
                        contribution: 100,
                    },
                },
                equityCurve: [],
                drawdownCurve: [],
                monthlyReturns: [],
                dataQuality: {
                    totalDataPoints: historicalData.length,
                    validDataPoints: historicalData.length,
                    dataIntegrityScore: 100,
                    gapsDetected: 0,
                    averageGapMinutes: 0,
                    dataSource: 'GATE_IO_REAL_DATA', // CRITICAL: Real data source
                },
                executionDetails: [],
                portfolioHistory: [],
            };
            const reportConfig = {
                includeCharts: false,
                includeTradeDetails: true,
                includeStrategyBreakdown: true,
                includeBenchmarkComparison: false,
                includeRiskMetrics: true,
                includeMonthlyReturns: false,
                format: 'JSON',
            };
            const report = await report_generator_1.BacktestReportGenerator.generateReport(mockResult, reportConfig);
            (0, globals_1.expect)(report).toBeDefined();
            (0, globals_1.expect)(typeof report).toBe('string');
            const parsed = JSON.parse(report);
            // Validate critical real data requirements
            (0, globals_1.expect)(parsed.dataQuality.dataSource).toBe('GATE_IO_REAL_DATA');
            (0, globals_1.expect)(parsed.config.dataValidation.requireRealData).toBe(true);
            (0, globals_1.expect)(parsed.dataQuality.dataIntegrityScore).toBe(100);
            (0, globals_1.expect)(parsed.dataQuality.validDataPoints).toBe(parsed.dataQuality.totalDataPoints);
            // Validate performance data
            (0, globals_1.expect)(parsed.performance.totalReturnPercentage).toBe(3.0);
            (0, globals_1.expect)(parsed.performance.sharpeRatio).toBe(2.1);
            (0, globals_1.expect)(parsed.trades.winRate).toBe(60);
            // Validate strategy performance
            (0, globals_1.expect)(parsed.strategyPerformance.HarmonizedStrategy).toBeDefined();
            (0, globals_1.expect)(parsed.strategyPerformance.HarmonizedStrategy.trades).toBe(5);
        });
        (0, globals_1.test)('should generate comprehensive HTML report', async () => {
            const historicalData = createSampleHistoricalData();
            const mockResult = {
                config: {
                    symbol: 'BTC_USDT',
                    startDate: historicalData[0].timestamp,
                    endDate: historicalData[historicalData.length - 1].timestamp,
                    initialBalance: 10000,
                    strategies: ['HarmonizedStrategy'],
                    riskManagement: {
                        maxRiskPerTrade: 0.02,
                        stopLossPercentage: 0.01,
                        minRiskRewardRatio: 1.3,
                        maxDrawdown: 0.15,
                    },
                    fees: { maker: 0.002, taker: 0.002 },
                    slippage: 0.001,
                    dataValidation: {
                        requireRealData: true,
                        minDataPoints: 100,
                        maxGapMinutes: 60,
                    },
                },
                period: {
                    start: historicalData[0].timestamp,
                    end: historicalData[historicalData.length - 1].timestamp,
                    durationDays: 7,
                },
                trades: {
                    total: 3,
                    winning: 2,
                    losing: 1,
                    winRate: 66.67,
                    averageWin: 100,
                    averageLoss: 50,
                    largestWin: 150,
                    largestLoss: 50,
                    consecutiveWins: 0,
                    consecutiveLosses: 0,
                    maxConsecutiveWins: 2,
                    maxConsecutiveLosses: 1,
                },
                performance: {
                    totalReturn: 150,
                    totalReturnPercentage: 1.5,
                    annualizedReturn: 78.0,
                    sharpeRatio: 1.8,
                    sortinoRatio: 2.2,
                    calmarRatio: 15.6,
                    maxDrawdown: 50,
                    maxDrawdownPercentage: 0.5,
                    averageDrawdown: 25,
                    recoveryFactor: 3.0,
                    profitFactor: 2.0,
                    payoffRatio: 2.0,
                    expectedValue: 50,
                },
                risk: {
                    volatility: 12,
                    downside_deviation: 6,
                    var95: -2.0,
                    cvar95: -2.5,
                    beta: 1.0,
                    alpha: 6,
                    informationRatio: 0.6,
                },
                strategyPerformance: {
                    HarmonizedStrategy: {
                        strategyName: 'HarmonizedStrategy',
                        trades: 3,
                        winRate: 66.67,
                        totalReturn: 150,
                        sharpeRatio: 1.8,
                        maxDrawdown: 50,
                        profitFactor: 2.0,
                        averageHoldingPeriod: 2.0,
                        signalAccuracy: 0.67,
                        contribution: 100,
                    },
                },
                equityCurve: [],
                drawdownCurve: [],
                monthlyReturns: [],
                dataQuality: {
                    totalDataPoints: historicalData.length,
                    validDataPoints: historicalData.length,
                    dataIntegrityScore: 100,
                    gapsDetected: 0,
                    averageGapMinutes: 0,
                    dataSource: 'GATE_IO_REAL_DATA',
                },
                executionDetails: [],
                portfolioHistory: [],
            };
            const reportConfig = {
                includeCharts: true,
                includeTradeDetails: true,
                includeStrategyBreakdown: true,
                includeBenchmarkComparison: false,
                includeRiskMetrics: true,
                includeMonthlyReturns: true,
                format: 'HTML',
            };
            const report = await report_generator_1.BacktestReportGenerator.generateReport(mockResult, reportConfig);
            (0, globals_1.expect)(report).toBeDefined();
            (0, globals_1.expect)(typeof report).toBe('string');
            (0, globals_1.expect)(report).toContain('<!DOCTYPE html>');
            (0, globals_1.expect)(report).toContain('Backtesting Report');
            (0, globals_1.expect)(report).toContain('BTC_USDT');
            (0, globals_1.expect)(report).toContain('GATE_IO_REAL_DATA');
            (0, globals_1.expect)(report).toContain('HarmonizedStrategy');
            (0, globals_1.expect)(report).toContain('Executive Summary');
            (0, globals_1.expect)(report).toContain('Performance Metrics');
            (0, globals_1.expect)(report).toContain('Risk Analysis');
            (0, globals_1.expect)(report).toContain('Strategy Performance');
        });
    });
    (0, globals_1.describe)('Data Quality Validation', () => {
        (0, globals_1.test)('should enforce real data only policy', () => {
            const realData = createSampleHistoricalData();
            // Verify all data meets real data requirements
            for (const point of realData) {
                (0, globals_1.expect)(point.source).toBe('GATE_IO');
                (0, globals_1.expect)(point.validated).toBe(true);
                (0, globals_1.expect)(point.integrity).toBeDefined();
                (0, globals_1.expect)(point.integrity.length).toBeGreaterThan(5);
                (0, globals_1.expect)(point.fetchedAt).toBeInstanceOf(Date);
            }
            // Verify no mock data characteristics
            const mockDataIndicators = realData.filter(d => d.source === 'MOCK' ||
                d.source === 'TEST' ||
                !d.validated ||
                !d.integrity ||
                d.integrity.includes('mock') ||
                d.integrity.includes('test'));
            (0, globals_1.expect)(mockDataIndicators.length).toBe(0);
        });
        (0, globals_1.test)('should validate realistic market data patterns', () => {
            const data = createSampleHistoricalData();
            // Check for realistic price movements
            for (let i = 1; i < data.length; i++) {
                const prevPrice = data[i - 1].close;
                const currPrice = data[i].close;
                const priceChange = Math.abs((currPrice - prevPrice) / prevPrice);
                // No extreme price movements (>50% in one period)
                (0, globals_1.expect)(priceChange).toBeLessThan(0.5);
            }
            // Check volume patterns
            for (const point of data) {
                (0, globals_1.expect)(point.volume).toBeGreaterThan(0);
                (0, globals_1.expect)(point.volume).toBeLessThan(1000000); // Reasonable upper bound
            }
            // Check OHLC consistency
            for (const point of data) {
                (0, globals_1.expect)(point.high).toBeGreaterThanOrEqual(point.open);
                (0, globals_1.expect)(point.high).toBeGreaterThanOrEqual(point.close);
                (0, globals_1.expect)(point.low).toBeLessThanOrEqual(point.open);
                (0, globals_1.expect)(point.low).toBeLessThanOrEqual(point.close);
            }
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,