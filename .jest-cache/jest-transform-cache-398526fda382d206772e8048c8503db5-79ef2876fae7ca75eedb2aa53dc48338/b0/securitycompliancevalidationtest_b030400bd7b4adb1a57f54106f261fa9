32b5df7d33312735f57a4650dcb8e54c
"use strict";
/**
 * =============================================================================
 * SECURITY COMPLIANCE VALIDATION TEST SUITE
 * =============================================================================
 *
 * Comprehensive security compliance testing and validation for the AI crypto
 * trading agent. Tests compliance with multiple security standards including
 * OWASP Top 10, ISO 27001, SOC 2, and custom crypto trading security framework.
 *
 * Features:
 * - Multi-standard compliance testing
 * - Automated compliance scoring
 * - Gap analysis and remediation planning
 * - Continuous compliance monitoring
 * - Detailed compliance reporting
 *
 * Requirements: 25.7 - Add security compliance testing and validation
 *
 * @author AI Crypto Trading System
 * @version 1.0.0
 * @license PROPRIETARY
 * =============================================================================
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
// Mock external dependencies
jest.mock('../../core/logging/logger');
const logger_1 = require("../../core/logging/logger");
const compliance_testing_1 = require("../../security/compliance-testing");
const vulnerability_scanner_service_1 = require("../../security/vulnerability-scanner-service");
const threat_detection_engine_1 = require("../../security/threat-detection-engine");
const crypto = __importStar(require("crypto"));
const fs = __importStar(require("fs/promises"));
const path = __importStar(require("path"));
const os = __importStar(require("os"));
describe('Security Compliance Validation Test Suite', () => {
    let complianceTestingService;
    let vulnerabilityScanner;
    let threatDetection;
    let testOutputDir;
    beforeAll(async () => {
        // Set up test environment
        process.env.NODE_ENV = 'test';
        process.env.MASTER_ENCRYPTION_KEY = crypto.randomBytes(32).toString('hex');
        // Create temporary test output directory
        testOutputDir = path.join(os.tmpdir(), 'compliance-test-output');
        await fs.mkdir(testOutputDir, { recursive: true });
    });
    beforeEach(async () => {
        // Initialize services
        complianceTestingService = new compliance_testing_1.ComplianceTestingService(logger_1.logger);
        vulnerabilityScanner = new vulnerability_scanner_service_1.VulnerabilityScannerService(logger_1.logger);
        threatDetection = new threat_detection_engine_1.ThreatDetectionEngine(logger_1.logger);
        // Clear all mocks
        jest.clearAllMocks();
    });
    afterEach(async () => {
        // Clean up test files
        try {
            const files = await fs.readdir(testOutputDir);
            for (const file of files) {
                await fs.unlink(path.join(testOutputDir, file));
            }
        }
        catch (error) {
            // Ignore cleanup errors
        }
    });
    afterAll(async () => {
        // Clean up test environment
        delete process.env.MASTER_ENCRYPTION_KEY;
        delete process.env.NODE_ENV;
        try {
            await fs.rmdir(testOutputDir);
        }
        catch (error) {
            // Ignore cleanup errors
        }
    });
    describe('OWASP Top 10 Compliance Testing', () => {
        let owaspReport;
        beforeEach(async () => {
            owaspReport = await complianceTestingService.executeComplianceTest('OWASP_TOP_10');
        });
        it('should execute OWASP Top 10 compliance test successfully', async () => {
            expect(owaspReport).toBeDefined();
            expect(owaspReport.standardId).toBe('OWASP_TOP_10');
            expect(owaspReport.standardName).toBe('OWASP Top 10');
            expect(owaspReport.reportId).toBeDefined();
            expect(owaspReport.timestamp).toBeInstanceOf(Date);
        });
        it('should test all OWASP Top 10 controls', async () => {
            expect(owaspReport.controlResults).toBeDefined();
            expect(owaspReport.controlResults.length).toBe(10);
            const expectedControls = [
                'A01_2021', // Broken Access Control
                'A02_2021', // Cryptographic Failures
                'A03_2021', // Injection
                'A04_2021', // Insecure Design
                'A05_2021', // Security Misconfiguration
                'A06_2021', // Vulnerable and Outdated Components
                'A07_2021', // Identification and Authentication Failures
                'A08_2021', // Software and Data Integrity Failures
                'A09_2021', // Security Logging and Monitoring Failures
                'A10_2021' // Server-Side Request Forgery
            ];
            const controlIds = owaspReport.controlResults.map(c => c.controlId);
            expectedControls.forEach(expectedId => {
                expect(controlIds).toContain(expectedId);
            });
        });
        it('should calculate overall compliance score correctly', async () => {
            expect(owaspReport.overallScore).toBeGreaterThanOrEqual(0);
            expect(owaspReport.overallScore).toBeLessThanOrEqual(100);
            expect(typeof owaspReport.overallScore).toBe('number');
        });
        it('should determine compliance status based on score', async () => {
            expect(['COMPLIANT', 'NON_COMPLIANT', 'PARTIAL']).toContain(owaspReport.status);
            if (owaspReport.overallScore >= 80) {
                expect(owaspReport.status).toBe('COMPLIANT');
            }
            else if (owaspReport.overallScore >= 56) { // 70% of 80
                expect(owaspReport.status).toBe('PARTIAL');
            }
            else {
                expect(owaspReport.status).toBe('NON_COMPLIANT');
            }
        });
        it('should test broken access control (A01)', async () => {
            const accessControlResult = owaspReport.controlResults.find(c => c.controlId === 'A01_2021');
            expect(accessControlResult).toBeDefined();
            expect(accessControlResult.controlName).toBe('Broken Access Control');
            expect(['PASS', 'FAIL', 'PARTIAL']).toContain(accessControlResult.status);
            expect(accessControlResult.score).toBeGreaterThanOrEqual(0);
            expect(accessControlResult.score).toBeLessThanOrEqual(100);
        });
        it('should test cryptographic failures (A02)', async () => {
            const cryptoResult = owaspReport.controlResults.find(c => c.controlId === 'A02_2021');
            expect(cryptoResult).toBeDefined();
            expect(cryptoResult.controlName).toBe('Cryptographic Failures');
            expect(cryptoResult.remediation).toContainEqual(expect.stringContaining('encryption'));
        });
        it('should test injection vulnerabilities (A03)', async () => {
            const injectionResult = owaspReport.controlResults.find(c => c.controlId === 'A03_2021');
            expect(injectionResult).toBeDefined();
            expect(injectionResult.controlName).toBe('Injection');
            expect(injectionResult.remediation).toContainEqual(expect.stringContaining('parameterized queries'));
        });
        it('should provide gap analysis for non-compliant controls', async () => {
            expect(owaspReport.gapAnalysis).toBeDefined();
            expect(Array.isArray(owaspReport.gapAnalysis)).toBe(true);
            if (owaspReport.status !== 'COMPLIANT') {
                expect(owaspReport.gapAnalysis.length).toBeGreaterThan(0);
                owaspReport.gapAnalysis.forEach(gap => {
                    expect(gap).toHaveProperty('controlId');
                    expect(gap).toHaveProperty('controlName');
                    expect(gap).toHaveProperty('currentScore');
                    expect(gap).toHaveProperty('requiredScore');
                    expect(gap).toHaveProperty('gap');
                    expect(gap).toHaveProperty('priority');
                    expect(gap).toHaveProperty('remediation');
                    expect(['LOW', 'MEDIUM', 'HIGH', 'CRITICAL']).toContain(gap.priority);
                });
            }
        });
        it('should provide actionable recommendations', async () => {
            expect(owaspReport.recommendations).toBeDefined();
            expect(Array.isArray(owaspReport.recommendations)).toBe(true);
            expect(owaspReport.recommendations.length).toBeGreaterThan(0);
            owaspReport.recommendations.forEach(recommendation => {
                expect(typeof recommendation).toBe('string');
                expect(recommendation.length).toBeGreaterThan(0);
            });
        });
    });
    describe('ISO 27001 Compliance Testing', () => {
        let iso27001Report;
        beforeEach(async () => {
            iso27001Report = await complianceTestingService.executeComplianceTest('ISO_27001');
        });
        it('should execute ISO 27001 compliance test successfully', async () => {
            expect(iso27001Report).toBeDefined();
            expect(iso27001Report.standardId).toBe('ISO_27001');
            expect(iso27001Report.standardName).toBe('ISO/IEC 27001');
            expect(iso27001Report.requiredScore).toBe(85);
        });
        it('should test key ISO 27001 controls', async () => {
            const expectedControls = [
                'A.5.1.1', // Information Security Policy
                'A.6.1.1', // Information Security Roles and Responsibilities
                'A.8.1.1', // Inventory of Assets
                'A.9.1.1', // Access Control Policy
                'A.10.1.1' // Cryptographic Controls
            ];
            const controlIds = iso27001Report.controlResults.map(c => c.controlId);
            expectedControls.forEach(expectedId => {
                expect(controlIds).toContain(expectedId);
            });
        });
        it('should test information security policy control', async () => {
            const policyControl = iso27001Report.controlResults.find(c => c.controlId === 'A.5.1.1');
            expect(policyControl).toBeDefined();
            expect(policyControl.controlName).toBe('Information Security Policy');
            expect(policyControl.remediation).toContainEqual(expect.stringContaining('security policy'));
        });
        it('should test access control policy', async () => {
            const accessControl = iso27001Report.controlResults.find(c => c.controlId === 'A.9.1.1');
            expect(accessControl).toBeDefined();
            expect(accessControl.controlName).toBe('Access Control Policy');
            expect(accessControl.remediation).toContainEqual(expect.stringContaining('access control'));
        });
        it('should have higher compliance requirements than OWASP', async () => {
            expect(iso27001Report.requiredScore).toBeGreaterThanOrEqual(85);
        });
    });
    describe('SOC 2 Compliance Testing', () => {
        let soc2Report;
        beforeEach(async () => {
            soc2Report = await complianceTestingService.executeComplianceTest('SOC_2');
        });
        it('should execute SOC 2 compliance test successfully', async () => {
            expect(soc2Report).toBeDefined();
            expect(soc2Report.standardId).toBe('SOC_2');
            expect(soc2Report.standardName).toBe('SOC 2 Type II');
            expect(soc2Report.requiredScore).toBe(90);
        });
        it('should test SOC 2 trust service criteria', async () => {
            const expectedControls = [
                'CC1.1', // Control Environment
                'CC2.1', // Communication and Information
                'CC3.1', // Risk Assessment
                'CC4.1', // Monitoring Activities
                'CC5.1' // Control Activities
            ];
            const controlIds = soc2Report.controlResults.map(c => c.controlId);
            expectedControls.forEach(expectedId => {
                expect(controlIds).toContain(expectedId);
            });
        });
        it('should test control environment', async () => {
            const controlEnv = soc2Report.controlResults.find(c => c.controlId === 'CC1.1');
            expect(controlEnv).toBeDefined();
            expect(controlEnv.controlName).toBe('Control Environment');
            expect(controlEnv.remediation).toContainEqual(expect.stringContaining('code of conduct'));
        });
        it('should have the highest compliance requirements', async () => {
            expect(soc2Report.requiredScore).toBe(90);
        });
    });
    describe('Crypto Trading Security Framework Compliance', () => {
        let cryptoSecurityReport;
        beforeEach(async () => {
            cryptoSecurityReport = await complianceTestingService.executeComplianceTest('CRYPTO_TRADING_SECURITY');
        });
        it('should execute crypto trading security compliance test successfully', async () => {
            expect(cryptoSecurityReport).toBeDefined();
            expect(cryptoSecurityReport.standardId).toBe('CRYPTO_TRADING_SECURITY');
            expect(cryptoSecurityReport.standardName).toBe('Crypto Trading Security Framework');
            expect(cryptoSecurityReport.requiredScore).toBe(95);
        });
        it('should test crypto-specific security controls', async () => {
            const expectedControls = [
                'CTS.1.1', // API Key Security
                'CTS.2.1', // Trading Algorithm Security
                'CTS.3.1', // Risk Management Controls
                'CTS.4.1', // Market Data Integrity
                'CTS.5.1' // System Availability
            ];
            const controlIds = cryptoSecurityReport.controlResults.map(c => c.controlId);
            expectedControls.forEach(expectedId => {
                expect(controlIds).toContain(expectedId);
            });
        });
        it('should test API key security control', async () => {
            const apiKeyControl = cryptoSecurityReport.controlResults.find(c => c.controlId === 'CTS.1.1');
            expect(apiKeyControl).toBeDefined();
            expect(apiKeyControl.controlName).toBe('API Key Security');
            expect(apiKeyControl.remediation).toContainEqual(expect.stringContaining('API keys'));
        });
        it('should test trading algorithm security', async () => {
            const algoControl = cryptoSecurityReport.controlResults.find(c => c.controlId === 'CTS.2.1');
            expect(algoControl).toBeDefined();
            expect(algoControl.controlName).toBe('Trading Algorithm Security');
            expect(algoControl.remediation).toContainEqual(expect.stringContaining('algorithm'));
        });
        it('should test risk management controls', async () => {
            const riskControl = cryptoSecurityReport.controlResults.find(c => c.controlId === 'CTS.3.1');
            expect(riskControl).toBeDefined();
            expect(riskControl.controlName).toBe('Risk Management Controls');
            expect(riskControl.remediation.some(item => item.toLowerCase().includes('risk'))).toBe(true);
        });
        it('should have the most stringent compliance requirements', async () => {
            expect(cryptoSecurityReport.requiredScore).toBe(95);
        });
    });
    describe('Vulnerability Scanner Integration', () => {
        it('should execute comprehensive vulnerability scan', async () => {
            const scanResult = await vulnerabilityScanner.executeComprehensiveVulnerabilityScan();
            expect(scanResult).toBeDefined();
            expect(scanResult.scanId).toBeDefined();
            expect(scanResult.scanType).toBe('comprehensive_scan');
            expect(scanResult.status).toBe('COMPLETED');
            expect(scanResult.findings).toBeDefined();
            expect(Array.isArray(scanResult.findings)).toBe(true);
        });
        it('should scan for dependency vulnerabilities', async () => {
            const scanResult = await vulnerabilityScanner.executeComprehensiveVulnerabilityScan();
            // Check if dependency scanning was performed
            const dependencyFindings = scanResult.findings.filter(f => f.type === 'DEPENDENCY_VULNERABILITY');
            // Should have scanned dependencies (may or may not find vulnerabilities)
            expect(scanResult.findings).toBeDefined();
        });
        it('should scan for code vulnerabilities', async () => {
            const scanResult = await vulnerabilityScanner.executeComprehensiveVulnerabilityScan();
            // Check if code scanning was performed
            const codeFindings = scanResult.findings.filter(f => ['SQL_INJECTION', 'XSS', 'COMMAND_INJECTION', 'HARDCODED_SECRET'].includes(f.type));
            // Code scanning should be included
            expect(scanResult.findings).toBeDefined();
        });
        it('should scan for configuration vulnerabilities', async () => {
            const scanResult = await vulnerabilityScanner.executeComprehensiveVulnerabilityScan();
            // Check if configuration scanning was performed
            const configFindings = scanResult.findings.filter(f => ['CONFIGURATION_ERROR', 'INSECURE_TRANSPORT', 'WEAK_SESSION_SECRET'].includes(f.type));
            // Configuration scanning should be included
            expect(scanResult.findings).toBeDefined();
        });
        it('should provide vulnerability summary with risk scoring', async () => {
            const scanResult = await vulnerabilityScanner.executeComprehensiveVulnerabilityScan();
            expect(scanResult.summary).toBeDefined();
            expect(scanResult.summary.totalFindings).toBeGreaterThanOrEqual(0);
            expect(scanResult.summary.riskScore).toBeGreaterThanOrEqual(0);
            expect(scanResult.summary.riskScore).toBeLessThanOrEqual(100);
            expect(scanResult.summary.complianceScore).toBeGreaterThanOrEqual(0);
            expect(scanResult.summary.complianceScore).toBeLessThanOrEqual(100);
        });
        it('should provide remediation priorities', async () => {
            const scanResult = await vulnerabilityScanner.executeComprehensiveVulnerabilityScan();
            expect(scanResult.summary.remediationPriority).toBeDefined();
            expect(Array.isArray(scanResult.summary.remediationPriority)).toBe(true);
            if (scanResult.summary.remediationPriority.length > 0) {
                scanResult.summary.remediationPriority.forEach(item => {
                    expect(item).toHaveProperty('id');
                    expect(item).toHaveProperty('priority');
                    expect(item).toHaveProperty('title');
                    expect(item).toHaveProperty('description');
                    expect(item).toHaveProperty('effort');
                    expect(item).toHaveProperty('impact');
                    expect(item).toHaveProperty('steps');
                    expect(item).toHaveProperty('estimatedTime');
                    expect(['CRITICAL', 'HIGH', 'MEDIUM', 'LOW']).toContain(item.priority);
                    expect(['LOW', 'MEDIUM', 'HIGH']).toContain(item.effort);
                });
            }
        });
    });
    describe('Cross-Standard Compliance Analysis', () => {
        it('should compare compliance scores across standards', async () => {
            const owaspReport = await complianceTestingService.executeComplianceTest('OWASP_TOP_10');
            const iso27001Report = await complianceTestingService.executeComplianceTest('ISO_27001');
            const soc2Report = await complianceTestingService.executeComplianceTest('SOC_2');
            const cryptoReport = await complianceTestingService.executeComplianceTest('CRYPTO_TRADING_SECURITY');
            // All reports should be valid
            expect(owaspReport.overallScore).toBeGreaterThanOrEqual(0);
            expect(iso27001Report.overallScore).toBeGreaterThanOrEqual(0);
            expect(soc2Report.overallScore).toBeGreaterThanOrEqual(0);
            expect(cryptoReport.overallScore).toBeGreaterThanOrEqual(0);
            // Required scores should be in ascending order of strictness
            expect(owaspReport.requiredScore).toBeLessThanOrEqual(iso27001Report.requiredScore);
            expect(iso27001Report.requiredScore).toBeLessThanOrEqual(soc2Report.requiredScore);
            expect(soc2Report.requiredScore).toBeLessThanOrEqual(cryptoReport.requiredScore);
        });
        it('should identify common compliance gaps across standards', async () => {
            const reports = await Promise.all([
                complianceTestingService.executeComplianceTest('OWASP_TOP_10'),
                complianceTestingService.executeComplianceTest('ISO_27001'),
                complianceTestingService.executeComplianceTest('SOC_2'),
                complianceTestingService.executeComplianceTest('CRYPTO_TRADING_SECURITY')
            ]);
            // Analyze common themes in gap analysis
            const allGaps = reports.flatMap(report => report.gapAnalysis);
            const commonGapTypes = allGaps.reduce((types, gap) => {
                const type = gap.controlName.toLowerCase();
                types[type] = (types[type] || 0) + 1;
                return types;
            }, {});
            // Should have identified some common patterns
            expect(Object.keys(commonGapTypes).length).toBeGreaterThanOrEqual(0);
        });
        it('should provide consolidated recommendations', async () => {
            const reports = await Promise.all([
                complianceTestingService.executeComplianceTest('OWASP_TOP_10'),
                complianceTestingService.executeComplianceTest('ISO_27001'),
                complianceTestingService.executeComplianceTest('SOC_2'),
                complianceTestingService.executeComplianceTest('CRYPTO_TRADING_SECURITY')
            ]);
            // All reports should have recommendations
            reports.forEach(report => {
                expect(report.recommendations).toBeDefined();
                expect(Array.isArray(report.recommendations)).toBe(true);
                expect(report.recommendations.length).toBeGreaterThan(0);
            });
            // Consolidate recommendations
            const allRecommendations = reports.flatMap(report => report.recommendations);
            const uniqueRecommendations = [...new Set(allRecommendations)];
            expect(uniqueRecommendations.length).toBeGreaterThan(0);
        });
    });
    describe('Compliance Reporting and Documentation', () => {
        it('should generate comprehensive compliance reports', async () => {
            const report = await complianceTestingService.executeComplianceTest('OWASP_TOP_10');
            // Validate report structure
            expect(report).toHaveProperty('reportId');
            expect(report).toHaveProperty('standardId');
            expect(report).toHaveProperty('standardName');
            expect(report).toHaveProperty('timestamp');
            expect(report).toHaveProperty('overallScore');
            expect(report).toHaveProperty('requiredScore');
            expect(report).toHaveProperty('status');
            expect(report).toHaveProperty('controlResults');
            expect(report).toHaveProperty('gapAnalysis');
            expect(report).toHaveProperty('recommendations');
            expect(report).toHaveProperty('executionTime');
            // Validate data types
            expect(typeof report.reportId).toBe('string');
            expect(typeof report.standardId).toBe('string');
            expect(typeof report.standardName).toBe('string');
            expect(report.timestamp instanceof Date).toBe(true);
            expect(typeof report.overallScore).toBe('number');
            expect(typeof report.requiredScore).toBe('number');
            expect(typeof report.status).toBe('string');
            expect(Array.isArray(report.controlResults)).toBe(true);
            expect(Array.isArray(report.gapAnalysis)).toBe(true);
            expect(Array.isArray(report.recommendations)).toBe(true);
            expect(typeof report.executionTime).toBe('number');
        });
        it('should save compliance reports to file system', async () => {
            const report = await complianceTestingService.executeComplianceTest('OWASP_TOP_10');
            // Save report to test output directory
            const reportPath = path.join(testOutputDir, `compliance-report-${report.reportId}.json`);
            await fs.writeFile(reportPath, JSON.stringify(report, null, 2));
            // Verify file was created
            const fileExists = await fs.access(reportPath).then(() => true).catch(() => false);
            expect(fileExists).toBe(true);
            // Verify file content
            const savedContent = await fs.readFile(reportPath, 'utf-8');
            const savedReport = JSON.parse(savedContent);
            expect(savedReport.reportId).toBe(report.reportId);
        });
        it('should track compliance trends over time', async () => {
            // Execute multiple compliance tests to simulate trend tracking
            const reports = [];
            for (let i = 0; i < 3; i++) {
                const report = await complianceTestingService.executeComplianceTest('OWASP_TOP_10');
                reports.push(report);
                // Small delay to ensure different timestamps
                await new Promise(resolve => setTimeout(resolve, 10));
            }
            // Verify reports have different timestamps
            const timestamps = reports.map(r => r.timestamp.getTime());
            const uniqueTimestamps = new Set(timestamps);
            expect(uniqueTimestamps.size).toBe(reports.length);
            // Verify all reports are for the same standard
            const standardIds = reports.map(r => r.standardId);
            expect(new Set(standardIds).size).toBe(1);
        });
    });
    describe('Error Handling and Resilience', () => {
        it('should handle unknown compliance standards gracefully', async () => {
            await expect(complianceTestingService.executeComplianceTest('UNKNOWN_STANDARD')).rejects.toThrow('Unknown compliance standard: UNKNOWN_STANDARD');
        });
        it('should handle test method failures gracefully', async () => {
            // Mock a test method to fail
            const originalMethod = complianceTestingService.executeTestMethod;
            complianceTestingService.executeTestMethod = jest.fn()
                .mockRejectedValueOnce(new Error('Test method failed'))
                .mockImplementation(originalMethod);
            const report = await complianceTestingService.executeComplianceTest('OWASP_TOP_10');
            // Should still complete despite individual test failures
            expect(report).toBeDefined();
            expect(report.controlResults.length).toBeGreaterThan(0);
        });
        it('should continue testing after individual control failures', async () => {
            // This test ensures that if one control test fails, others continue
            const report = await complianceTestingService.executeComplianceTest('OWASP_TOP_10');
            // Should have tested all controls
            expect(report.controlResults.length).toBe(10);
            // Each control should have a valid status
            report.controlResults.forEach(control => {
                expect(['PASS', 'FAIL', 'PARTIAL']).toContain(control.status);
            });
        });
        it('should handle resource constraints gracefully', async () => {
            // Simulate resource constraints by running multiple tests concurrently
            const testPromises = [
                complianceTestingService.executeComplianceTest('OWASP_TOP_10'),
                complianceTestingService.executeComplianceTest('ISO_27001'),
                complianceTestingService.executeComplianceTest('SOC_2'),
                vulnerabilityScanner.executeComprehensiveVulnerabilityScan()
            ];
            const results = await Promise.all(testPromises);
            // All tests should complete successfully
            expect(results).toHaveLength(4);
            results.slice(0, 3).forEach(report => {
                expect(report).toHaveProperty('reportId');
                expect(report).toHaveProperty('overallScore');
            });
            // Vulnerability scan should also complete
            expect(results[3]).toHaveProperty('scanId');
            expect(results[3]).toHaveProperty('status', 'COMPLETED');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxOaWNrXFxEZXNrdG9wXFxTbW9vdGhTYWlsXFxzcmNcXHRlc3RzXFxzZWN1cml0eVxcc2VjdXJpdHktY29tcGxpYW5jZS12YWxpZGF0aW9uLnRlc3QudHMiLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBc0JHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQVlILDZCQUE2QjtBQUM3QixJQUFJLENBQUMsSUFBSSxDQUFDLDJCQUEyQixDQUFDLENBQUM7QUFYdkMsc0RBQW1EO0FBQ25ELDBFQUErRjtBQUMvRixnR0FBaUg7QUFFakgsb0ZBQStFO0FBQy9FLCtDQUFpQztBQUNqQyxnREFBa0M7QUFDbEMsMkNBQTZCO0FBQzdCLHVDQUF5QjtBQUt6QixRQUFRLENBQUMsMkNBQTJDLEVBQUUsR0FBRyxFQUFFO0lBQ3pELElBQUksd0JBQWtELENBQUM7SUFDdkQsSUFBSSxvQkFBaUQsQ0FBQztJQUN0RCxJQUFJLGVBQXNDLENBQUM7SUFDM0MsSUFBSSxhQUFxQixDQUFDO0lBRTFCLFNBQVMsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNuQiwwQkFBMEI7UUFDMUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDO1FBQzlCLE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQXFCLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFM0UseUNBQXlDO1FBQ3pDLGFBQWEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsRUFBRSx3QkFBd0IsQ0FBQyxDQUFDO1FBQ2pFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUNyRCxDQUFDLENBQUMsQ0FBQztJQUVILFVBQVUsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNwQixzQkFBc0I7UUFDdEIsd0JBQXdCLEdBQUcsSUFBSSw2Q0FBd0IsQ0FBQyxlQUFNLENBQUMsQ0FBQztRQUNoRSxvQkFBb0IsR0FBRyxJQUFJLDJEQUEyQixDQUFDLGVBQU0sQ0FBQyxDQUFDO1FBQy9ELGVBQWUsR0FBRyxJQUFJLCtDQUFxQixDQUFDLGVBQU0sQ0FBQyxDQUFDO1FBRXBELGtCQUFrQjtRQUNsQixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDdkIsQ0FBQyxDQUFDLENBQUM7SUFFSCxTQUFTLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDbkIsc0JBQXNCO1FBQ3RCLElBQUksQ0FBQztZQUNILE1BQU0sS0FBSyxHQUFHLE1BQU0sRUFBRSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxLQUFLLE1BQU0sSUFBSSxJQUFJLEtBQUssRUFBRSxDQUFDO2dCQUN6QixNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNsRCxDQUFDO1FBQ0gsQ0FBQztRQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7WUFDZix3QkFBd0I7UUFDMUIsQ0FBQztJQUNILENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ2xCLDRCQUE0QjtRQUM1QixPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUM7UUFDekMsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQztRQUU1QixJQUFJLENBQUM7WUFDSCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDaEMsQ0FBQztRQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7WUFDZix3QkFBd0I7UUFDMUIsQ0FBQztJQUNILENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLGlDQUFpQyxFQUFFLEdBQUcsRUFBRTtRQUMvQyxJQUFJLFdBQTZCLENBQUM7UUFFbEMsVUFBVSxDQUFDLEtBQUssSUFBSSxFQUFFO1lBQ3BCLFdBQVcsR0FBRyxNQUFNLHdCQUF3QixDQUFDLHFCQUFxQixDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ3JGLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLDBEQUEwRCxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ3hFLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNsQyxNQUFNLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUNwRCxNQUFNLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUN0RCxNQUFNLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQzNDLE1BQU0sQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3JELENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLHVDQUF1QyxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ3JELE1BQU0sQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDakQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBRW5ELE1BQU0sZ0JBQWdCLEdBQUc7Z0JBQ3ZCLFVBQVUsRUFBRSx3QkFBd0I7Z0JBQ3BDLFVBQVUsRUFBRSx5QkFBeUI7Z0JBQ3JDLFVBQVUsRUFBRSxZQUFZO2dCQUN4QixVQUFVLEVBQUUsa0JBQWtCO2dCQUM5QixVQUFVLEVBQUUsNEJBQTRCO2dCQUN4QyxVQUFVLEVBQUUscUNBQXFDO2dCQUNqRCxVQUFVLEVBQUUsNkNBQTZDO2dCQUN6RCxVQUFVLEVBQUUsdUNBQXVDO2dCQUNuRCxVQUFVLEVBQUUsMkNBQTJDO2dCQUN2RCxVQUFVLENBQUUsOEJBQThCO2FBQzNDLENBQUM7WUFFRixNQUFNLFVBQVUsR0FBRyxXQUFXLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUNwRSxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEVBQUU7Z0JBQ3BDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDM0MsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxxREFBcUQsRUFBRSxLQUFLLElBQUksRUFBRTtZQUNuRSxNQUFNLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzNELE1BQU0sQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUMsbUJBQW1CLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDMUQsTUFBTSxDQUFDLE9BQU8sV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN6RCxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxtREFBbUQsRUFBRSxLQUFLLElBQUksRUFBRTtZQUNqRSxNQUFNLENBQUMsQ0FBQyxXQUFXLEVBQUUsZUFBZSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUVoRixJQUFJLFdBQVcsQ0FBQyxZQUFZLElBQUksRUFBRSxFQUFFLENBQUM7Z0JBQ25DLE1BQU0sQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQy9DLENBQUM7aUJBQU0sSUFBSSxXQUFXLENBQUMsWUFBWSxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsWUFBWTtnQkFDdkQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDN0MsQ0FBQztpQkFBTSxDQUFDO2dCQUNOLE1BQU0sQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1lBQ25ELENBQUM7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyx5Q0FBeUMsRUFBRSxLQUFLLElBQUksRUFBRTtZQUN2RCxNQUFNLG1CQUFtQixHQUFHLFdBQVcsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsS0FBSyxVQUFVLENBQUMsQ0FBQztZQUU3RixNQUFNLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUMxQyxNQUFNLENBQUMsbUJBQW9CLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLENBQUM7WUFDdkUsTUFBTSxDQUFDLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxtQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUMzRSxNQUFNLENBQUMsbUJBQW9CLENBQUMsS0FBSyxDQUFDLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDN0QsTUFBTSxDQUFDLG1CQUFvQixDQUFDLEtBQUssQ0FBQyxDQUFDLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzlELENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLDBDQUEwQyxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ3hELE1BQU0sWUFBWSxHQUFHLFdBQVcsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsS0FBSyxVQUFVLENBQUMsQ0FBQztZQUV0RixNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDbkMsTUFBTSxDQUFDLFlBQWEsQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsd0JBQXdCLENBQUMsQ0FBQztZQUNqRSxNQUFNLENBQUMsWUFBYSxDQUFDLFdBQVcsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztRQUMxRixDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyw2Q0FBNkMsRUFBRSxLQUFLLElBQUksRUFBRTtZQUMzRCxNQUFNLGVBQWUsR0FBRyxXQUFXLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLEtBQUssVUFBVSxDQUFDLENBQUM7WUFFekYsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ3RDLE1BQU0sQ0FBQyxlQUFnQixDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUN2RCxNQUFNLENBQUMsZUFBZ0IsQ0FBQyxXQUFXLENBQUMsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQztRQUN4RyxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyx3REFBd0QsRUFBRSxLQUFLLElBQUksRUFBRTtZQUN0RSxNQUFNLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQzlDLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUUxRCxJQUFJLFdBQVcsQ0FBQyxNQUFNLEtBQUssV0FBVyxFQUFFLENBQUM7Z0JBQ3ZDLE1BQU0sQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFFMUQsV0FBVyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUU7b0JBQ3BDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLENBQUM7b0JBQ3hDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLENBQUM7b0JBQzFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxjQUFjLENBQUMsY0FBYyxDQUFDLENBQUM7b0JBQzNDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFDLENBQUM7b0JBQzVDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7b0JBQ2xDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLENBQUM7b0JBQ3ZDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLENBQUM7b0JBQzFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDeEUsQ0FBQyxDQUFDLENBQUM7WUFDTCxDQUFDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsMkNBQTJDLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDekQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNsRCxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDOUQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRTlELFdBQVcsQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxFQUFFO2dCQUNuRCxNQUFNLENBQUMsT0FBTyxjQUFjLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQzdDLE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ25ELENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyw4QkFBOEIsRUFBRSxHQUFHLEVBQUU7UUFDNUMsSUFBSSxjQUFnQyxDQUFDO1FBRXJDLFVBQVUsQ0FBQyxLQUFLLElBQUksRUFBRTtZQUNwQixjQUFjLEdBQUcsTUFBTSx3QkFBd0IsQ0FBQyxxQkFBcUIsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNyRixDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyx1REFBdUQsRUFBRSxLQUFLLElBQUksRUFBRTtZQUNyRSxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDckMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDcEQsTUFBTSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7WUFDMUQsTUFBTSxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDaEQsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsb0NBQW9DLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDbEQsTUFBTSxnQkFBZ0IsR0FBRztnQkFDdkIsU0FBUyxFQUFFLDhCQUE4QjtnQkFDekMsU0FBUyxFQUFFLGtEQUFrRDtnQkFDN0QsU0FBUyxFQUFFLHNCQUFzQjtnQkFDakMsU0FBUyxFQUFFLHdCQUF3QjtnQkFDbkMsVUFBVSxDQUFDLHlCQUF5QjthQUNyQyxDQUFDO1lBRUYsTUFBTSxVQUFVLEdBQUcsY0FBYyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDdkUsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxFQUFFO2dCQUNwQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQzNDLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsaURBQWlELEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDL0QsTUFBTSxhQUFhLEdBQUcsY0FBYyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxLQUFLLFNBQVMsQ0FBQyxDQUFDO1lBRXpGLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNwQyxNQUFNLENBQUMsYUFBYyxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO1lBQ3ZFLE1BQU0sQ0FBQyxhQUFjLENBQUMsV0FBVyxDQUFDLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUM7UUFDaEcsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsbUNBQW1DLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDakQsTUFBTSxhQUFhLEdBQUcsY0FBYyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxLQUFLLFNBQVMsQ0FBQyxDQUFDO1lBRXpGLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNwQyxNQUFNLENBQUMsYUFBYyxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1lBQ2pFLE1BQU0sQ0FBQyxhQUFjLENBQUMsV0FBVyxDQUFDLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7UUFDL0YsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsdURBQXVELEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDckUsTUFBTSxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxzQkFBc0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNsRSxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLDBCQUEwQixFQUFFLEdBQUcsRUFBRTtRQUN4QyxJQUFJLFVBQTRCLENBQUM7UUFFakMsVUFBVSxDQUFDLEtBQUssSUFBSSxFQUFFO1lBQ3BCLFVBQVUsR0FBRyxNQUFNLHdCQUF3QixDQUFDLHFCQUFxQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzdFLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLG1EQUFtRCxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ2pFLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNqQyxNQUFNLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUM1QyxNQUFNLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztZQUN0RCxNQUFNLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUM1QyxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQywwQ0FBMEMsRUFBRSxLQUFLLElBQUksRUFBRTtZQUN4RCxNQUFNLGdCQUFnQixHQUFHO2dCQUN2QixPQUFPLEVBQUUsc0JBQXNCO2dCQUMvQixPQUFPLEVBQUUsZ0NBQWdDO2dCQUN6QyxPQUFPLEVBQUUsa0JBQWtCO2dCQUMzQixPQUFPLEVBQUUsd0JBQXdCO2dCQUNqQyxPQUFPLENBQUUscUJBQXFCO2FBQy9CLENBQUM7WUFFRixNQUFNLFVBQVUsR0FBRyxVQUFVLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUNuRSxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEVBQUU7Z0JBQ3BDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDM0MsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxpQ0FBaUMsRUFBRSxLQUFLLElBQUksRUFBRTtZQUMvQyxNQUFNLFVBQVUsR0FBRyxVQUFVLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLEtBQUssT0FBTyxDQUFDLENBQUM7WUFFaEYsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ2pDLE1BQU0sQ0FBQyxVQUFXLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLENBQUM7WUFDNUQsTUFBTSxDQUFDLFVBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQztRQUM3RixDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxpREFBaUQsRUFBRSxLQUFLLElBQUksRUFBRTtZQUMvRCxNQUFNLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUM1QyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLDhDQUE4QyxFQUFFLEdBQUcsRUFBRTtRQUM1RCxJQUFJLG9CQUFzQyxDQUFDO1FBRTNDLFVBQVUsQ0FBQyxLQUFLLElBQUksRUFBRTtZQUNwQixvQkFBb0IsR0FBRyxNQUFNLHdCQUF3QixDQUFDLHFCQUFxQixDQUFDLHlCQUF5QixDQUFDLENBQUM7UUFDekcsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMscUVBQXFFLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDbkYsTUFBTSxDQUFDLG9CQUFvQixDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDM0MsTUFBTSxDQUFDLG9CQUFvQixDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1lBQ3hFLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxZQUFZLENBQUMsQ0FBQyxJQUFJLENBQUMsbUNBQW1DLENBQUMsQ0FBQztZQUNwRixNQUFNLENBQUMsb0JBQW9CLENBQUMsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3RELENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLCtDQUErQyxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQzdELE1BQU0sZ0JBQWdCLEdBQUc7Z0JBQ3ZCLFNBQVMsRUFBRSxtQkFBbUI7Z0JBQzlCLFNBQVMsRUFBRSw2QkFBNkI7Z0JBQ3hDLFNBQVMsRUFBRSwyQkFBMkI7Z0JBQ3RDLFNBQVMsRUFBRSx3QkFBd0I7Z0JBQ25DLFNBQVMsQ0FBRSxzQkFBc0I7YUFDbEMsQ0FBQztZQUVGLE1BQU0sVUFBVSxHQUFHLG9CQUFvQixDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDN0UsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxFQUFFO2dCQUNwQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQzNDLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsc0NBQXNDLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDcEQsTUFBTSxhQUFhLEdBQUcsb0JBQW9CLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLEtBQUssU0FBUyxDQUFDLENBQUM7WUFFL0YsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ3BDLE1BQU0sQ0FBQyxhQUFjLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUM7WUFDNUQsTUFBTSxDQUFDLGFBQWMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFDekYsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsd0NBQXdDLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDdEQsTUFBTSxXQUFXLEdBQUcsb0JBQW9CLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLEtBQUssU0FBUyxDQUFDLENBQUM7WUFFN0YsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ2xDLE1BQU0sQ0FBQyxXQUFZLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLDRCQUE0QixDQUFDLENBQUM7WUFDcEUsTUFBTSxDQUFDLFdBQVksQ0FBQyxXQUFXLENBQUMsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7UUFDeEYsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsc0NBQXNDLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDcEQsTUFBTSxXQUFXLEdBQUcsb0JBQW9CLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLEtBQUssU0FBUyxDQUFDLENBQUM7WUFFN0YsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ2xDLE1BQU0sQ0FBQyxXQUFZLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLDBCQUEwQixDQUFDLENBQUM7WUFDbEUsTUFBTSxDQUFDLFdBQVksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2hHLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLHdEQUF3RCxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ3RFLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxhQUFhLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdEQsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxtQ0FBbUMsRUFBRSxHQUFHLEVBQUU7UUFDakQsRUFBRSxDQUFDLGlEQUFpRCxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQy9ELE1BQU0sVUFBVSxHQUFHLE1BQU0sb0JBQW9CLENBQUMscUNBQXFDLEVBQUUsQ0FBQztZQUV0RixNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDakMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUN4QyxNQUFNLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1lBQ3ZELE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQzVDLE1BQU0sQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDMUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3hELENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLDRDQUE0QyxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQzFELE1BQU0sVUFBVSxHQUFHLE1BQU0sb0JBQW9CLENBQUMscUNBQXFDLEVBQUUsQ0FBQztZQUV0Riw2Q0FBNkM7WUFDN0MsTUFBTSxrQkFBa0IsR0FBRyxVQUFVLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUN4RCxDQUFDLENBQUMsSUFBSSxLQUFLLDBCQUEwQixDQUN0QyxDQUFDO1lBRUYseUVBQXlFO1lBQ3pFLE1BQU0sQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDNUMsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsc0NBQXNDLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDcEQsTUFBTSxVQUFVLEdBQUcsTUFBTSxvQkFBb0IsQ0FBQyxxQ0FBcUMsRUFBRSxDQUFDO1lBRXRGLHVDQUF1QztZQUN2QyxNQUFNLFlBQVksR0FBRyxVQUFVLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUNsRCxDQUFDLGVBQWUsRUFBRSxLQUFLLEVBQUUsbUJBQW1CLEVBQUUsa0JBQWtCLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUNuRixDQUFDO1lBRUYsbUNBQW1DO1lBQ25DLE1BQU0sQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDNUMsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsK0NBQStDLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDN0QsTUFBTSxVQUFVLEdBQUcsTUFBTSxvQkFBb0IsQ0FBQyxxQ0FBcUMsRUFBRSxDQUFDO1lBRXRGLGdEQUFnRDtZQUNoRCxNQUFNLGNBQWMsR0FBRyxVQUFVLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUNwRCxDQUFDLHFCQUFxQixFQUFFLG9CQUFvQixFQUFFLHFCQUFxQixDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FDdEYsQ0FBQztZQUVGLDRDQUE0QztZQUM1QyxNQUFNLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQzVDLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLHdEQUF3RCxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ3RFLE1BQU0sVUFBVSxHQUFHLE1BQU0sb0JBQW9CLENBQUMscUNBQXFDLEVBQUUsQ0FBQztZQUV0RixNQUFNLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ3pDLE1BQU0sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ25FLE1BQU0sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQy9ELE1BQU0sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzlELE1BQU0sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3JFLE1BQU0sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3RFLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLHVDQUF1QyxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ3JELE1BQU0sVUFBVSxHQUFHLE1BQU0sb0JBQW9CLENBQUMscUNBQXFDLEVBQUUsQ0FBQztZQUV0RixNQUFNLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQzdELE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUV6RSxJQUFJLFVBQVUsQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDO2dCQUN0RCxVQUFVLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtvQkFDcEQsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztvQkFDbEMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsQ0FBQztvQkFDeEMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztvQkFDckMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUMsQ0FBQztvQkFDM0MsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQztvQkFDdEMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQztvQkFDdEMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztvQkFDckMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxlQUFlLENBQUMsQ0FBQztvQkFDN0MsTUFBTSxDQUFDLENBQUMsVUFBVSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO29CQUN2RSxNQUFNLENBQUMsQ0FBQyxLQUFLLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDM0QsQ0FBQyxDQUFDLENBQUM7WUFDTCxDQUFDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxvQ0FBb0MsRUFBRSxHQUFHLEVBQUU7UUFDbEQsRUFBRSxDQUFDLG1EQUFtRCxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ2pFLE1BQU0sV0FBVyxHQUFHLE1BQU0sd0JBQXdCLENBQUMscUJBQXFCLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDekYsTUFBTSxjQUFjLEdBQUcsTUFBTSx3QkFBd0IsQ0FBQyxxQkFBcUIsQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUN6RixNQUFNLFVBQVUsR0FBRyxNQUFNLHdCQUF3QixDQUFDLHFCQUFxQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ2pGLE1BQU0sWUFBWSxHQUFHLE1BQU0sd0JBQXdCLENBQUMscUJBQXFCLENBQUMseUJBQXlCLENBQUMsQ0FBQztZQUVyRyw4QkFBOEI7WUFDOUIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMzRCxNQUFNLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzlELE1BQU0sQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDMUQsTUFBTSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUU1RCw2REFBNkQ7WUFDN0QsTUFBTSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDcEYsTUFBTSxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDbkYsTUFBTSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDbkYsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMseURBQXlELEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDdkUsTUFBTSxPQUFPLEdBQUcsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDO2dCQUNoQyx3QkFBd0IsQ0FBQyxxQkFBcUIsQ0FBQyxjQUFjLENBQUM7Z0JBQzlELHdCQUF3QixDQUFDLHFCQUFxQixDQUFDLFdBQVcsQ0FBQztnQkFDM0Qsd0JBQXdCLENBQUMscUJBQXFCLENBQUMsT0FBTyxDQUFDO2dCQUN2RCx3QkFBd0IsQ0FBQyxxQkFBcUIsQ0FBQyx5QkFBeUIsQ0FBQzthQUMxRSxDQUFDLENBQUM7WUFFSCx3Q0FBd0M7WUFDeEMsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUM5RCxNQUFNLGNBQWMsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFO2dCQUNuRCxNQUFNLElBQUksR0FBRyxHQUFHLENBQUMsV0FBVyxDQUFDLFdBQVcsRUFBRSxDQUFDO2dCQUMzQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNyQyxPQUFPLEtBQUssQ0FBQztZQUNmLENBQUMsRUFBRSxFQUE0QixDQUFDLENBQUM7WUFFakMsOENBQThDO1lBQzlDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZFLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLDZDQUE2QyxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQzNELE1BQU0sT0FBTyxHQUFHLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQztnQkFDaEMsd0JBQXdCLENBQUMscUJBQXFCLENBQUMsY0FBYyxDQUFDO2dCQUM5RCx3QkFBd0IsQ0FBQyxxQkFBcUIsQ0FBQyxXQUFXLENBQUM7Z0JBQzNELHdCQUF3QixDQUFDLHFCQUFxQixDQUFDLE9BQU8sQ0FBQztnQkFDdkQsd0JBQXdCLENBQUMscUJBQXFCLENBQUMseUJBQXlCLENBQUM7YUFDMUUsQ0FBQyxDQUFDO1lBRUgsMENBQTBDO1lBQzFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUU7Z0JBQ3ZCLE1BQU0sQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7Z0JBQzdDLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDekQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzNELENBQUMsQ0FBQyxDQUFDO1lBRUgsOEJBQThCO1lBQzlCLE1BQU0sa0JBQWtCLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQztZQUM3RSxNQUFNLHFCQUFxQixHQUFHLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUM7WUFFL0QsTUFBTSxDQUFDLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxRCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLHdDQUF3QyxFQUFFLEdBQUcsRUFBRTtRQUN0RCxFQUFFLENBQUMsa0RBQWtELEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDaEUsTUFBTSxNQUFNLEdBQUcsTUFBTSx3QkFBd0IsQ0FBQyxxQkFBcUIsQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUVwRiw0QkFBNEI7WUFDNUIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUMxQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQzVDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxjQUFjLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDOUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUMzQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsY0FBYyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1lBQzlDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFDLENBQUM7WUFDL0MsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUN4QyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsY0FBYyxDQUFDLGdCQUFnQixDQUFDLENBQUM7WUFDaEQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM3QyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsY0FBYyxDQUFDLGlCQUFpQixDQUFDLENBQUM7WUFDakQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLGNBQWMsQ0FBQyxlQUFlLENBQUMsQ0FBQztZQUUvQyxzQkFBc0I7WUFDdEIsTUFBTSxDQUFDLE9BQU8sTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUM5QyxNQUFNLENBQUMsT0FBTyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ2hELE1BQU0sQ0FBQyxPQUFPLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDbEQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLFlBQVksSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3BELE1BQU0sQ0FBQyxPQUFPLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDbEQsTUFBTSxDQUFDLE9BQU8sTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNuRCxNQUFNLENBQUMsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQzVDLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN4RCxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDckQsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3pELE1BQU0sQ0FBQyxPQUFPLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDckQsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsK0NBQStDLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDN0QsTUFBTSxNQUFNLEdBQUcsTUFBTSx3QkFBd0IsQ0FBQyxxQkFBcUIsQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUVwRix1Q0FBdUM7WUFDdkMsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUscUJBQXFCLE1BQU0sQ0FBQyxRQUFRLE9BQU8sQ0FBQyxDQUFDO1lBQ3pGLE1BQU0sRUFBRSxDQUFDLFNBQVMsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFaEUsMEJBQTBCO1lBQzFCLE1BQU0sVUFBVSxHQUFHLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ25GLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFFOUIsc0JBQXNCO1lBQ3RCLE1BQU0sWUFBWSxHQUFHLE1BQU0sRUFBRSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDNUQsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUM3QyxNQUFNLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDckQsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsMENBQTBDLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDeEQsK0RBQStEO1lBQy9ELE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQztZQUVuQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7Z0JBQzNCLE1BQU0sTUFBTSxHQUFHLE1BQU0sd0JBQXdCLENBQUMscUJBQXFCLENBQUMsY0FBYyxDQUFDLENBQUM7Z0JBQ3BGLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBRXJCLDZDQUE2QztnQkFDN0MsTUFBTSxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUN4RCxDQUFDO1lBRUQsMkNBQTJDO1lBQzNDLE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7WUFDM0QsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUM3QyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUVuRCwrQ0FBK0M7WUFDL0MsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUNuRCxNQUFNLENBQUMsSUFBSSxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzVDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsK0JBQStCLEVBQUUsR0FBRyxFQUFFO1FBQzdDLEVBQUUsQ0FBQyx1REFBdUQsRUFBRSxLQUFLLElBQUksRUFBRTtZQUNyRSxNQUFNLE1BQU0sQ0FDVix3QkFBd0IsQ0FBQyxxQkFBcUIsQ0FBQyxrQkFBa0IsQ0FBQyxDQUNuRSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsK0NBQStDLENBQUMsQ0FBQztRQUNyRSxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQywrQ0FBK0MsRUFBRSxLQUFLLElBQUksRUFBRTtZQUM3RCw2QkFBNkI7WUFDN0IsTUFBTSxjQUFjLEdBQUksd0JBQWdDLENBQUMsaUJBQWlCLENBQUM7WUFDMUUsd0JBQWdDLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRTtpQkFDNUQscUJBQXFCLENBQUMsSUFBSSxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQztpQkFDdEQsa0JBQWtCLENBQUMsY0FBYyxDQUFDLENBQUM7WUFFdEMsTUFBTSxNQUFNLEdBQUcsTUFBTSx3QkFBd0IsQ0FBQyxxQkFBcUIsQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUVwRix5REFBeUQ7WUFDekQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQzdCLE1BQU0sQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxRCxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQywyREFBMkQsRUFBRSxLQUFLLElBQUksRUFBRTtZQUN6RSxvRUFBb0U7WUFDcEUsTUFBTSxNQUFNLEdBQUcsTUFBTSx3QkFBd0IsQ0FBQyxxQkFBcUIsQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUVwRixrQ0FBa0M7WUFDbEMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBRTlDLDBDQUEwQztZQUMxQyxNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtnQkFDdEMsTUFBTSxDQUFDLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDaEUsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQywrQ0FBK0MsRUFBRSxLQUFLLElBQUksRUFBRTtZQUM3RCx1RUFBdUU7WUFDdkUsTUFBTSxZQUFZLEdBQUc7Z0JBQ25CLHdCQUF3QixDQUFDLHFCQUFxQixDQUFDLGNBQWMsQ0FBQztnQkFDOUQsd0JBQXdCLENBQUMscUJBQXFCLENBQUMsV0FBVyxDQUFDO2dCQUMzRCx3QkFBd0IsQ0FBQyxxQkFBcUIsQ0FBQyxPQUFPLENBQUM7Z0JBQ3ZELG9CQUFvQixDQUFDLHFDQUFxQyxFQUFFO2FBQzdELENBQUM7WUFFRixNQUFNLE9BQU8sR0FBRyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7WUFFaEQseUNBQXlDO1lBQ3pDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDaEMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFO2dCQUNuQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxDQUFDO2dCQUMxQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsY0FBYyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1lBQ2hELENBQUMsQ0FBQyxDQUFDO1lBRUgsMENBQTBDO1lBQzFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDNUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDM0QsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcTmlja1xcRGVza3RvcFxcU21vb3RoU2FpbFxcc3JjXFx0ZXN0c1xcc2VjdXJpdHlcXHNlY3VyaXR5LWNvbXBsaWFuY2UtdmFsaWRhdGlvbi50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gKiBTRUNVUklUWSBDT01QTElBTkNFIFZBTElEQVRJT04gVEVTVCBTVUlURVxyXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gKiBcclxuICogQ29tcHJlaGVuc2l2ZSBzZWN1cml0eSBjb21wbGlhbmNlIHRlc3RpbmcgYW5kIHZhbGlkYXRpb24gZm9yIHRoZSBBSSBjcnlwdG9cclxuICogdHJhZGluZyBhZ2VudC4gVGVzdHMgY29tcGxpYW5jZSB3aXRoIG11bHRpcGxlIHNlY3VyaXR5IHN0YW5kYXJkcyBpbmNsdWRpbmdcclxuICogT1dBU1AgVG9wIDEwLCBJU08gMjcwMDEsIFNPQyAyLCBhbmQgY3VzdG9tIGNyeXB0byB0cmFkaW5nIHNlY3VyaXR5IGZyYW1ld29yay5cclxuICogXHJcbiAqIEZlYXR1cmVzOlxyXG4gKiAtIE11bHRpLXN0YW5kYXJkIGNvbXBsaWFuY2UgdGVzdGluZ1xyXG4gKiAtIEF1dG9tYXRlZCBjb21wbGlhbmNlIHNjb3JpbmdcclxuICogLSBHYXAgYW5hbHlzaXMgYW5kIHJlbWVkaWF0aW9uIHBsYW5uaW5nXHJcbiAqIC0gQ29udGludW91cyBjb21wbGlhbmNlIG1vbml0b3JpbmdcclxuICogLSBEZXRhaWxlZCBjb21wbGlhbmNlIHJlcG9ydGluZ1xyXG4gKiBcclxuICogUmVxdWlyZW1lbnRzOiAyNS43IC0gQWRkIHNlY3VyaXR5IGNvbXBsaWFuY2UgdGVzdGluZyBhbmQgdmFsaWRhdGlvblxyXG4gKiBcclxuICogQGF1dGhvciBBSSBDcnlwdG8gVHJhZGluZyBTeXN0ZW1cclxuICogQHZlcnNpb24gMS4wLjBcclxuICogQGxpY2Vuc2UgUFJPUFJJRVRBUllcclxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICovXHJcblxyXG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICcuLi8uLi9jb3JlL2xvZ2dpbmcvbG9nZ2VyJztcclxuaW1wb3J0IHsgQ29tcGxpYW5jZVRlc3RpbmdTZXJ2aWNlLCBDb21wbGlhbmNlUmVwb3J0IH0gZnJvbSAnLi4vLi4vc2VjdXJpdHkvY29tcGxpYW5jZS10ZXN0aW5nJztcclxuaW1wb3J0IHsgVnVsbmVyYWJpbGl0eVNjYW5uZXJTZXJ2aWNlLCBWdWxuZXJhYmlsaXR5U2Nhbm5lciB9IGZyb20gJy4uLy4uL3NlY3VyaXR5L3Z1bG5lcmFiaWxpdHktc2Nhbm5lci1zZXJ2aWNlJztcclxuaW1wb3J0IHsgZW5jcnlwdGlvblNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZWN1cml0eS9lbmNyeXB0aW9uLXNlcnZpY2UnO1xyXG5pbXBvcnQgeyBUaHJlYXREZXRlY3Rpb25FbmdpbmUgfSBmcm9tICcuLi8uLi9zZWN1cml0eS90aHJlYXQtZGV0ZWN0aW9uLWVuZ2luZSc7XHJcbmltcG9ydCAqIGFzIGNyeXB0byBmcm9tICdjcnlwdG8nO1xyXG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcy9wcm9taXNlcyc7XHJcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XHJcbmltcG9ydCAqIGFzIG9zIGZyb20gJ29zJztcclxuXHJcbi8vIE1vY2sgZXh0ZXJuYWwgZGVwZW5kZW5jaWVzXHJcbmplc3QubW9jaygnLi4vLi4vY29yZS9sb2dnaW5nL2xvZ2dlcicpO1xyXG5cclxuZGVzY3JpYmUoJ1NlY3VyaXR5IENvbXBsaWFuY2UgVmFsaWRhdGlvbiBUZXN0IFN1aXRlJywgKCkgPT4ge1xyXG4gIGxldCBjb21wbGlhbmNlVGVzdGluZ1NlcnZpY2U6IENvbXBsaWFuY2VUZXN0aW5nU2VydmljZTtcclxuICBsZXQgdnVsbmVyYWJpbGl0eVNjYW5uZXI6IFZ1bG5lcmFiaWxpdHlTY2FubmVyU2VydmljZTtcclxuICBsZXQgdGhyZWF0RGV0ZWN0aW9uOiBUaHJlYXREZXRlY3Rpb25FbmdpbmU7XHJcbiAgbGV0IHRlc3RPdXRwdXREaXI6IHN0cmluZztcclxuXHJcbiAgYmVmb3JlQWxsKGFzeW5jICgpID0+IHtcclxuICAgIC8vIFNldCB1cCB0ZXN0IGVudmlyb25tZW50XHJcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViA9ICd0ZXN0JztcclxuICAgIHByb2Nlc3MuZW52Lk1BU1RFUl9FTkNSWVBUSU9OX0tFWSA9IGNyeXB0by5yYW5kb21CeXRlcygzMikudG9TdHJpbmcoJ2hleCcpO1xyXG4gICAgXHJcbiAgICAvLyBDcmVhdGUgdGVtcG9yYXJ5IHRlc3Qgb3V0cHV0IGRpcmVjdG9yeVxyXG4gICAgdGVzdE91dHB1dERpciA9IHBhdGguam9pbihvcy50bXBkaXIoKSwgJ2NvbXBsaWFuY2UtdGVzdC1vdXRwdXQnKTtcclxuICAgIGF3YWl0IGZzLm1rZGlyKHRlc3RPdXRwdXREaXIsIHsgcmVjdXJzaXZlOiB0cnVlIH0pO1xyXG4gIH0pO1xyXG5cclxuICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcclxuICAgIC8vIEluaXRpYWxpemUgc2VydmljZXNcclxuICAgIGNvbXBsaWFuY2VUZXN0aW5nU2VydmljZSA9IG5ldyBDb21wbGlhbmNlVGVzdGluZ1NlcnZpY2UobG9nZ2VyKTtcclxuICAgIHZ1bG5lcmFiaWxpdHlTY2FubmVyID0gbmV3IFZ1bG5lcmFiaWxpdHlTY2FubmVyU2VydmljZShsb2dnZXIpO1xyXG4gICAgdGhyZWF0RGV0ZWN0aW9uID0gbmV3IFRocmVhdERldGVjdGlvbkVuZ2luZShsb2dnZXIpO1xyXG5cclxuICAgIC8vIENsZWFyIGFsbCBtb2Nrc1xyXG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XHJcbiAgfSk7XHJcblxyXG4gIGFmdGVyRWFjaChhc3luYyAoKSA9PiB7XHJcbiAgICAvLyBDbGVhbiB1cCB0ZXN0IGZpbGVzXHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCBmaWxlcyA9IGF3YWl0IGZzLnJlYWRkaXIodGVzdE91dHB1dERpcik7XHJcbiAgICAgIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykge1xyXG4gICAgICAgIGF3YWl0IGZzLnVubGluayhwYXRoLmpvaW4odGVzdE91dHB1dERpciwgZmlsZSkpO1xyXG4gICAgICB9XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAvLyBJZ25vcmUgY2xlYW51cCBlcnJvcnNcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgYWZ0ZXJBbGwoYXN5bmMgKCkgPT4ge1xyXG4gICAgLy8gQ2xlYW4gdXAgdGVzdCBlbnZpcm9ubWVudFxyXG4gICAgZGVsZXRlIHByb2Nlc3MuZW52Lk1BU1RFUl9FTkNSWVBUSU9OX0tFWTtcclxuICAgIGRlbGV0ZSBwcm9jZXNzLmVudi5OT0RFX0VOVjtcclxuICAgIFxyXG4gICAgdHJ5IHtcclxuICAgICAgYXdhaXQgZnMucm1kaXIodGVzdE91dHB1dERpcik7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAvLyBJZ25vcmUgY2xlYW51cCBlcnJvcnNcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgZGVzY3JpYmUoJ09XQVNQIFRvcCAxMCBDb21wbGlhbmNlIFRlc3RpbmcnLCAoKSA9PiB7XHJcbiAgICBsZXQgb3dhc3BSZXBvcnQ6IENvbXBsaWFuY2VSZXBvcnQ7XHJcblxyXG4gICAgYmVmb3JlRWFjaChhc3luYyAoKSA9PiB7XHJcbiAgICAgIG93YXNwUmVwb3J0ID0gYXdhaXQgY29tcGxpYW5jZVRlc3RpbmdTZXJ2aWNlLmV4ZWN1dGVDb21wbGlhbmNlVGVzdCgnT1dBU1BfVE9QXzEwJyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnc2hvdWxkIGV4ZWN1dGUgT1dBU1AgVG9wIDEwIGNvbXBsaWFuY2UgdGVzdCBzdWNjZXNzZnVsbHknLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGV4cGVjdChvd2FzcFJlcG9ydCkudG9CZURlZmluZWQoKTtcclxuICAgICAgZXhwZWN0KG93YXNwUmVwb3J0LnN0YW5kYXJkSWQpLnRvQmUoJ09XQVNQX1RPUF8xMCcpO1xyXG4gICAgICBleHBlY3Qob3dhc3BSZXBvcnQuc3RhbmRhcmROYW1lKS50b0JlKCdPV0FTUCBUb3AgMTAnKTtcclxuICAgICAgZXhwZWN0KG93YXNwUmVwb3J0LnJlcG9ydElkKS50b0JlRGVmaW5lZCgpO1xyXG4gICAgICBleHBlY3Qob3dhc3BSZXBvcnQudGltZXN0YW1wKS50b0JlSW5zdGFuY2VPZihEYXRlKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdzaG91bGQgdGVzdCBhbGwgT1dBU1AgVG9wIDEwIGNvbnRyb2xzJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBleHBlY3Qob3dhc3BSZXBvcnQuY29udHJvbFJlc3VsdHMpLnRvQmVEZWZpbmVkKCk7XHJcbiAgICAgIGV4cGVjdChvd2FzcFJlcG9ydC5jb250cm9sUmVzdWx0cy5sZW5ndGgpLnRvQmUoMTApO1xyXG5cclxuICAgICAgY29uc3QgZXhwZWN0ZWRDb250cm9scyA9IFtcclxuICAgICAgICAnQTAxXzIwMjEnLCAvLyBCcm9rZW4gQWNjZXNzIENvbnRyb2xcclxuICAgICAgICAnQTAyXzIwMjEnLCAvLyBDcnlwdG9ncmFwaGljIEZhaWx1cmVzXHJcbiAgICAgICAgJ0EwM18yMDIxJywgLy8gSW5qZWN0aW9uXHJcbiAgICAgICAgJ0EwNF8yMDIxJywgLy8gSW5zZWN1cmUgRGVzaWduXHJcbiAgICAgICAgJ0EwNV8yMDIxJywgLy8gU2VjdXJpdHkgTWlzY29uZmlndXJhdGlvblxyXG4gICAgICAgICdBMDZfMjAyMScsIC8vIFZ1bG5lcmFibGUgYW5kIE91dGRhdGVkIENvbXBvbmVudHNcclxuICAgICAgICAnQTA3XzIwMjEnLCAvLyBJZGVudGlmaWNhdGlvbiBhbmQgQXV0aGVudGljYXRpb24gRmFpbHVyZXNcclxuICAgICAgICAnQTA4XzIwMjEnLCAvLyBTb2Z0d2FyZSBhbmQgRGF0YSBJbnRlZ3JpdHkgRmFpbHVyZXNcclxuICAgICAgICAnQTA5XzIwMjEnLCAvLyBTZWN1cml0eSBMb2dnaW5nIGFuZCBNb25pdG9yaW5nIEZhaWx1cmVzXHJcbiAgICAgICAgJ0ExMF8yMDIxJyAgLy8gU2VydmVyLVNpZGUgUmVxdWVzdCBGb3JnZXJ5XHJcbiAgICAgIF07XHJcblxyXG4gICAgICBjb25zdCBjb250cm9sSWRzID0gb3dhc3BSZXBvcnQuY29udHJvbFJlc3VsdHMubWFwKGMgPT4gYy5jb250cm9sSWQpO1xyXG4gICAgICBleHBlY3RlZENvbnRyb2xzLmZvckVhY2goZXhwZWN0ZWRJZCA9PiB7XHJcbiAgICAgICAgZXhwZWN0KGNvbnRyb2xJZHMpLnRvQ29udGFpbihleHBlY3RlZElkKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnc2hvdWxkIGNhbGN1bGF0ZSBvdmVyYWxsIGNvbXBsaWFuY2Ugc2NvcmUgY29ycmVjdGx5JywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBleHBlY3Qob3dhc3BSZXBvcnQub3ZlcmFsbFNjb3JlKS50b0JlR3JlYXRlclRoYW5PckVxdWFsKDApO1xyXG4gICAgICBleHBlY3Qob3dhc3BSZXBvcnQub3ZlcmFsbFNjb3JlKS50b0JlTGVzc1RoYW5PckVxdWFsKDEwMCk7XHJcbiAgICAgIGV4cGVjdCh0eXBlb2Ygb3dhc3BSZXBvcnQub3ZlcmFsbFNjb3JlKS50b0JlKCdudW1iZXInKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdzaG91bGQgZGV0ZXJtaW5lIGNvbXBsaWFuY2Ugc3RhdHVzIGJhc2VkIG9uIHNjb3JlJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBleHBlY3QoWydDT01QTElBTlQnLCAnTk9OX0NPTVBMSUFOVCcsICdQQVJUSUFMJ10pLnRvQ29udGFpbihvd2FzcFJlcG9ydC5zdGF0dXMpO1xyXG4gICAgICBcclxuICAgICAgaWYgKG93YXNwUmVwb3J0Lm92ZXJhbGxTY29yZSA+PSA4MCkge1xyXG4gICAgICAgIGV4cGVjdChvd2FzcFJlcG9ydC5zdGF0dXMpLnRvQmUoJ0NPTVBMSUFOVCcpO1xyXG4gICAgICB9IGVsc2UgaWYgKG93YXNwUmVwb3J0Lm92ZXJhbGxTY29yZSA+PSA1NikgeyAvLyA3MCUgb2YgODBcclxuICAgICAgICBleHBlY3Qob3dhc3BSZXBvcnQuc3RhdHVzKS50b0JlKCdQQVJUSUFMJyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZXhwZWN0KG93YXNwUmVwb3J0LnN0YXR1cykudG9CZSgnTk9OX0NPTVBMSUFOVCcpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnc2hvdWxkIHRlc3QgYnJva2VuIGFjY2VzcyBjb250cm9sIChBMDEpJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBjb25zdCBhY2Nlc3NDb250cm9sUmVzdWx0ID0gb3dhc3BSZXBvcnQuY29udHJvbFJlc3VsdHMuZmluZChjID0+IGMuY29udHJvbElkID09PSAnQTAxXzIwMjEnKTtcclxuICAgICAgXHJcbiAgICAgIGV4cGVjdChhY2Nlc3NDb250cm9sUmVzdWx0KS50b0JlRGVmaW5lZCgpO1xyXG4gICAgICBleHBlY3QoYWNjZXNzQ29udHJvbFJlc3VsdCEuY29udHJvbE5hbWUpLnRvQmUoJ0Jyb2tlbiBBY2Nlc3MgQ29udHJvbCcpO1xyXG4gICAgICBleHBlY3QoWydQQVNTJywgJ0ZBSUwnLCAnUEFSVElBTCddKS50b0NvbnRhaW4oYWNjZXNzQ29udHJvbFJlc3VsdCEuc3RhdHVzKTtcclxuICAgICAgZXhwZWN0KGFjY2Vzc0NvbnRyb2xSZXN1bHQhLnNjb3JlKS50b0JlR3JlYXRlclRoYW5PckVxdWFsKDApO1xyXG4gICAgICBleHBlY3QoYWNjZXNzQ29udHJvbFJlc3VsdCEuc2NvcmUpLnRvQmVMZXNzVGhhbk9yRXF1YWwoMTAwKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdzaG91bGQgdGVzdCBjcnlwdG9ncmFwaGljIGZhaWx1cmVzIChBMDIpJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBjb25zdCBjcnlwdG9SZXN1bHQgPSBvd2FzcFJlcG9ydC5jb250cm9sUmVzdWx0cy5maW5kKGMgPT4gYy5jb250cm9sSWQgPT09ICdBMDJfMjAyMScpO1xyXG4gICAgICBcclxuICAgICAgZXhwZWN0KGNyeXB0b1Jlc3VsdCkudG9CZURlZmluZWQoKTtcclxuICAgICAgZXhwZWN0KGNyeXB0b1Jlc3VsdCEuY29udHJvbE5hbWUpLnRvQmUoJ0NyeXB0b2dyYXBoaWMgRmFpbHVyZXMnKTtcclxuICAgICAgZXhwZWN0KGNyeXB0b1Jlc3VsdCEucmVtZWRpYXRpb24pLnRvQ29udGFpbkVxdWFsKGV4cGVjdC5zdHJpbmdDb250YWluaW5nKCdlbmNyeXB0aW9uJykpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ3Nob3VsZCB0ZXN0IGluamVjdGlvbiB2dWxuZXJhYmlsaXRpZXMgKEEwMyknLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGluamVjdGlvblJlc3VsdCA9IG93YXNwUmVwb3J0LmNvbnRyb2xSZXN1bHRzLmZpbmQoYyA9PiBjLmNvbnRyb2xJZCA9PT0gJ0EwM18yMDIxJyk7XHJcbiAgICAgIFxyXG4gICAgICBleHBlY3QoaW5qZWN0aW9uUmVzdWx0KS50b0JlRGVmaW5lZCgpO1xyXG4gICAgICBleHBlY3QoaW5qZWN0aW9uUmVzdWx0IS5jb250cm9sTmFtZSkudG9CZSgnSW5qZWN0aW9uJyk7XHJcbiAgICAgIGV4cGVjdChpbmplY3Rpb25SZXN1bHQhLnJlbWVkaWF0aW9uKS50b0NvbnRhaW5FcXVhbChleHBlY3Quc3RyaW5nQ29udGFpbmluZygncGFyYW1ldGVyaXplZCBxdWVyaWVzJykpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ3Nob3VsZCBwcm92aWRlIGdhcCBhbmFseXNpcyBmb3Igbm9uLWNvbXBsaWFudCBjb250cm9scycsIGFzeW5jICgpID0+IHtcclxuICAgICAgZXhwZWN0KG93YXNwUmVwb3J0LmdhcEFuYWx5c2lzKS50b0JlRGVmaW5lZCgpO1xyXG4gICAgICBleHBlY3QoQXJyYXkuaXNBcnJheShvd2FzcFJlcG9ydC5nYXBBbmFseXNpcykpLnRvQmUodHJ1ZSk7XHJcblxyXG4gICAgICBpZiAob3dhc3BSZXBvcnQuc3RhdHVzICE9PSAnQ09NUExJQU5UJykge1xyXG4gICAgICAgIGV4cGVjdChvd2FzcFJlcG9ydC5nYXBBbmFseXNpcy5sZW5ndGgpLnRvQmVHcmVhdGVyVGhhbigwKTtcclxuICAgICAgICBcclxuICAgICAgICBvd2FzcFJlcG9ydC5nYXBBbmFseXNpcy5mb3JFYWNoKGdhcCA9PiB7XHJcbiAgICAgICAgICBleHBlY3QoZ2FwKS50b0hhdmVQcm9wZXJ0eSgnY29udHJvbElkJyk7XHJcbiAgICAgICAgICBleHBlY3QoZ2FwKS50b0hhdmVQcm9wZXJ0eSgnY29udHJvbE5hbWUnKTtcclxuICAgICAgICAgIGV4cGVjdChnYXApLnRvSGF2ZVByb3BlcnR5KCdjdXJyZW50U2NvcmUnKTtcclxuICAgICAgICAgIGV4cGVjdChnYXApLnRvSGF2ZVByb3BlcnR5KCdyZXF1aXJlZFNjb3JlJyk7XHJcbiAgICAgICAgICBleHBlY3QoZ2FwKS50b0hhdmVQcm9wZXJ0eSgnZ2FwJyk7XHJcbiAgICAgICAgICBleHBlY3QoZ2FwKS50b0hhdmVQcm9wZXJ0eSgncHJpb3JpdHknKTtcclxuICAgICAgICAgIGV4cGVjdChnYXApLnRvSGF2ZVByb3BlcnR5KCdyZW1lZGlhdGlvbicpO1xyXG4gICAgICAgICAgZXhwZWN0KFsnTE9XJywgJ01FRElVTScsICdISUdIJywgJ0NSSVRJQ0FMJ10pLnRvQ29udGFpbihnYXAucHJpb3JpdHkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnc2hvdWxkIHByb3ZpZGUgYWN0aW9uYWJsZSByZWNvbW1lbmRhdGlvbnMnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGV4cGVjdChvd2FzcFJlcG9ydC5yZWNvbW1lbmRhdGlvbnMpLnRvQmVEZWZpbmVkKCk7XHJcbiAgICAgIGV4cGVjdChBcnJheS5pc0FycmF5KG93YXNwUmVwb3J0LnJlY29tbWVuZGF0aW9ucykpLnRvQmUodHJ1ZSk7XHJcbiAgICAgIGV4cGVjdChvd2FzcFJlcG9ydC5yZWNvbW1lbmRhdGlvbnMubGVuZ3RoKS50b0JlR3JlYXRlclRoYW4oMCk7XHJcblxyXG4gICAgICBvd2FzcFJlcG9ydC5yZWNvbW1lbmRhdGlvbnMuZm9yRWFjaChyZWNvbW1lbmRhdGlvbiA9PiB7XHJcbiAgICAgICAgZXhwZWN0KHR5cGVvZiByZWNvbW1lbmRhdGlvbikudG9CZSgnc3RyaW5nJyk7XHJcbiAgICAgICAgZXhwZWN0KHJlY29tbWVuZGF0aW9uLmxlbmd0aCkudG9CZUdyZWF0ZXJUaGFuKDApO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICBkZXNjcmliZSgnSVNPIDI3MDAxIENvbXBsaWFuY2UgVGVzdGluZycsICgpID0+IHtcclxuICAgIGxldCBpc28yNzAwMVJlcG9ydDogQ29tcGxpYW5jZVJlcG9ydDtcclxuXHJcbiAgICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcclxuICAgICAgaXNvMjcwMDFSZXBvcnQgPSBhd2FpdCBjb21wbGlhbmNlVGVzdGluZ1NlcnZpY2UuZXhlY3V0ZUNvbXBsaWFuY2VUZXN0KCdJU09fMjcwMDEnKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdzaG91bGQgZXhlY3V0ZSBJU08gMjcwMDEgY29tcGxpYW5jZSB0ZXN0IHN1Y2Nlc3NmdWxseScsIGFzeW5jICgpID0+IHtcclxuICAgICAgZXhwZWN0KGlzbzI3MDAxUmVwb3J0KS50b0JlRGVmaW5lZCgpO1xyXG4gICAgICBleHBlY3QoaXNvMjcwMDFSZXBvcnQuc3RhbmRhcmRJZCkudG9CZSgnSVNPXzI3MDAxJyk7XHJcbiAgICAgIGV4cGVjdChpc28yNzAwMVJlcG9ydC5zdGFuZGFyZE5hbWUpLnRvQmUoJ0lTTy9JRUMgMjcwMDEnKTtcclxuICAgICAgZXhwZWN0KGlzbzI3MDAxUmVwb3J0LnJlcXVpcmVkU2NvcmUpLnRvQmUoODUpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ3Nob3VsZCB0ZXN0IGtleSBJU08gMjcwMDEgY29udHJvbHMnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGV4cGVjdGVkQ29udHJvbHMgPSBbXHJcbiAgICAgICAgJ0EuNS4xLjEnLCAvLyBJbmZvcm1hdGlvbiBTZWN1cml0eSBQb2xpY3lcclxuICAgICAgICAnQS42LjEuMScsIC8vIEluZm9ybWF0aW9uIFNlY3VyaXR5IFJvbGVzIGFuZCBSZXNwb25zaWJpbGl0aWVzXHJcbiAgICAgICAgJ0EuOC4xLjEnLCAvLyBJbnZlbnRvcnkgb2YgQXNzZXRzXHJcbiAgICAgICAgJ0EuOS4xLjEnLCAvLyBBY2Nlc3MgQ29udHJvbCBQb2xpY3lcclxuICAgICAgICAnQS4xMC4xLjEnIC8vIENyeXB0b2dyYXBoaWMgQ29udHJvbHNcclxuICAgICAgXTtcclxuXHJcbiAgICAgIGNvbnN0IGNvbnRyb2xJZHMgPSBpc28yNzAwMVJlcG9ydC5jb250cm9sUmVzdWx0cy5tYXAoYyA9PiBjLmNvbnRyb2xJZCk7XHJcbiAgICAgIGV4cGVjdGVkQ29udHJvbHMuZm9yRWFjaChleHBlY3RlZElkID0+IHtcclxuICAgICAgICBleHBlY3QoY29udHJvbElkcykudG9Db250YWluKGV4cGVjdGVkSWQpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdzaG91bGQgdGVzdCBpbmZvcm1hdGlvbiBzZWN1cml0eSBwb2xpY3kgY29udHJvbCcsIGFzeW5jICgpID0+IHtcclxuICAgICAgY29uc3QgcG9saWN5Q29udHJvbCA9IGlzbzI3MDAxUmVwb3J0LmNvbnRyb2xSZXN1bHRzLmZpbmQoYyA9PiBjLmNvbnRyb2xJZCA9PT0gJ0EuNS4xLjEnKTtcclxuICAgICAgXHJcbiAgICAgIGV4cGVjdChwb2xpY3lDb250cm9sKS50b0JlRGVmaW5lZCgpO1xyXG4gICAgICBleHBlY3QocG9saWN5Q29udHJvbCEuY29udHJvbE5hbWUpLnRvQmUoJ0luZm9ybWF0aW9uIFNlY3VyaXR5IFBvbGljeScpO1xyXG4gICAgICBleHBlY3QocG9saWN5Q29udHJvbCEucmVtZWRpYXRpb24pLnRvQ29udGFpbkVxdWFsKGV4cGVjdC5zdHJpbmdDb250YWluaW5nKCdzZWN1cml0eSBwb2xpY3knKSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnc2hvdWxkIHRlc3QgYWNjZXNzIGNvbnRyb2wgcG9saWN5JywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBjb25zdCBhY2Nlc3NDb250cm9sID0gaXNvMjcwMDFSZXBvcnQuY29udHJvbFJlc3VsdHMuZmluZChjID0+IGMuY29udHJvbElkID09PSAnQS45LjEuMScpO1xyXG4gICAgICBcclxuICAgICAgZXhwZWN0KGFjY2Vzc0NvbnRyb2wpLnRvQmVEZWZpbmVkKCk7XHJcbiAgICAgIGV4cGVjdChhY2Nlc3NDb250cm9sIS5jb250cm9sTmFtZSkudG9CZSgnQWNjZXNzIENvbnRyb2wgUG9saWN5Jyk7XHJcbiAgICAgIGV4cGVjdChhY2Nlc3NDb250cm9sIS5yZW1lZGlhdGlvbikudG9Db250YWluRXF1YWwoZXhwZWN0LnN0cmluZ0NvbnRhaW5pbmcoJ2FjY2VzcyBjb250cm9sJykpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ3Nob3VsZCBoYXZlIGhpZ2hlciBjb21wbGlhbmNlIHJlcXVpcmVtZW50cyB0aGFuIE9XQVNQJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBleHBlY3QoaXNvMjcwMDFSZXBvcnQucmVxdWlyZWRTY29yZSkudG9CZUdyZWF0ZXJUaGFuT3JFcXVhbCg4NSk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbiAgZGVzY3JpYmUoJ1NPQyAyIENvbXBsaWFuY2UgVGVzdGluZycsICgpID0+IHtcclxuICAgIGxldCBzb2MyUmVwb3J0OiBDb21wbGlhbmNlUmVwb3J0O1xyXG5cclxuICAgIGJlZm9yZUVhY2goYXN5bmMgKCkgPT4ge1xyXG4gICAgICBzb2MyUmVwb3J0ID0gYXdhaXQgY29tcGxpYW5jZVRlc3RpbmdTZXJ2aWNlLmV4ZWN1dGVDb21wbGlhbmNlVGVzdCgnU09DXzInKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdzaG91bGQgZXhlY3V0ZSBTT0MgMiBjb21wbGlhbmNlIHRlc3Qgc3VjY2Vzc2Z1bGx5JywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBleHBlY3Qoc29jMlJlcG9ydCkudG9CZURlZmluZWQoKTtcclxuICAgICAgZXhwZWN0KHNvYzJSZXBvcnQuc3RhbmRhcmRJZCkudG9CZSgnU09DXzInKTtcclxuICAgICAgZXhwZWN0KHNvYzJSZXBvcnQuc3RhbmRhcmROYW1lKS50b0JlKCdTT0MgMiBUeXBlIElJJyk7XHJcbiAgICAgIGV4cGVjdChzb2MyUmVwb3J0LnJlcXVpcmVkU2NvcmUpLnRvQmUoOTApO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ3Nob3VsZCB0ZXN0IFNPQyAyIHRydXN0IHNlcnZpY2UgY3JpdGVyaWEnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGV4cGVjdGVkQ29udHJvbHMgPSBbXHJcbiAgICAgICAgJ0NDMS4xJywgLy8gQ29udHJvbCBFbnZpcm9ubWVudFxyXG4gICAgICAgICdDQzIuMScsIC8vIENvbW11bmljYXRpb24gYW5kIEluZm9ybWF0aW9uXHJcbiAgICAgICAgJ0NDMy4xJywgLy8gUmlzayBBc3Nlc3NtZW50XHJcbiAgICAgICAgJ0NDNC4xJywgLy8gTW9uaXRvcmluZyBBY3Rpdml0aWVzXHJcbiAgICAgICAgJ0NDNS4xJyAgLy8gQ29udHJvbCBBY3Rpdml0aWVzXHJcbiAgICAgIF07XHJcblxyXG4gICAgICBjb25zdCBjb250cm9sSWRzID0gc29jMlJlcG9ydC5jb250cm9sUmVzdWx0cy5tYXAoYyA9PiBjLmNvbnRyb2xJZCk7XHJcbiAgICAgIGV4cGVjdGVkQ29udHJvbHMuZm9yRWFjaChleHBlY3RlZElkID0+IHtcclxuICAgICAgICBleHBlY3QoY29udHJvbElkcykudG9Db250YWluKGV4cGVjdGVkSWQpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdzaG91bGQgdGVzdCBjb250cm9sIGVudmlyb25tZW50JywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBjb25zdCBjb250cm9sRW52ID0gc29jMlJlcG9ydC5jb250cm9sUmVzdWx0cy5maW5kKGMgPT4gYy5jb250cm9sSWQgPT09ICdDQzEuMScpO1xyXG4gICAgICBcclxuICAgICAgZXhwZWN0KGNvbnRyb2xFbnYpLnRvQmVEZWZpbmVkKCk7XHJcbiAgICAgIGV4cGVjdChjb250cm9sRW52IS5jb250cm9sTmFtZSkudG9CZSgnQ29udHJvbCBFbnZpcm9ubWVudCcpO1xyXG4gICAgICBleHBlY3QoY29udHJvbEVudiEucmVtZWRpYXRpb24pLnRvQ29udGFpbkVxdWFsKGV4cGVjdC5zdHJpbmdDb250YWluaW5nKCdjb2RlIG9mIGNvbmR1Y3QnKSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnc2hvdWxkIGhhdmUgdGhlIGhpZ2hlc3QgY29tcGxpYW5jZSByZXF1aXJlbWVudHMnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGV4cGVjdChzb2MyUmVwb3J0LnJlcXVpcmVkU2NvcmUpLnRvQmUoOTApO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIGRlc2NyaWJlKCdDcnlwdG8gVHJhZGluZyBTZWN1cml0eSBGcmFtZXdvcmsgQ29tcGxpYW5jZScsICgpID0+IHtcclxuICAgIGxldCBjcnlwdG9TZWN1cml0eVJlcG9ydDogQ29tcGxpYW5jZVJlcG9ydDtcclxuXHJcbiAgICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcclxuICAgICAgY3J5cHRvU2VjdXJpdHlSZXBvcnQgPSBhd2FpdCBjb21wbGlhbmNlVGVzdGluZ1NlcnZpY2UuZXhlY3V0ZUNvbXBsaWFuY2VUZXN0KCdDUllQVE9fVFJBRElOR19TRUNVUklUWScpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ3Nob3VsZCBleGVjdXRlIGNyeXB0byB0cmFkaW5nIHNlY3VyaXR5IGNvbXBsaWFuY2UgdGVzdCBzdWNjZXNzZnVsbHknLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGV4cGVjdChjcnlwdG9TZWN1cml0eVJlcG9ydCkudG9CZURlZmluZWQoKTtcclxuICAgICAgZXhwZWN0KGNyeXB0b1NlY3VyaXR5UmVwb3J0LnN0YW5kYXJkSWQpLnRvQmUoJ0NSWVBUT19UUkFESU5HX1NFQ1VSSVRZJyk7XHJcbiAgICAgIGV4cGVjdChjcnlwdG9TZWN1cml0eVJlcG9ydC5zdGFuZGFyZE5hbWUpLnRvQmUoJ0NyeXB0byBUcmFkaW5nIFNlY3VyaXR5IEZyYW1ld29yaycpO1xyXG4gICAgICBleHBlY3QoY3J5cHRvU2VjdXJpdHlSZXBvcnQucmVxdWlyZWRTY29yZSkudG9CZSg5NSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnc2hvdWxkIHRlc3QgY3J5cHRvLXNwZWNpZmljIHNlY3VyaXR5IGNvbnRyb2xzJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBjb25zdCBleHBlY3RlZENvbnRyb2xzID0gW1xyXG4gICAgICAgICdDVFMuMS4xJywgLy8gQVBJIEtleSBTZWN1cml0eVxyXG4gICAgICAgICdDVFMuMi4xJywgLy8gVHJhZGluZyBBbGdvcml0aG0gU2VjdXJpdHlcclxuICAgICAgICAnQ1RTLjMuMScsIC8vIFJpc2sgTWFuYWdlbWVudCBDb250cm9sc1xyXG4gICAgICAgICdDVFMuNC4xJywgLy8gTWFya2V0IERhdGEgSW50ZWdyaXR5XHJcbiAgICAgICAgJ0NUUy41LjEnICAvLyBTeXN0ZW0gQXZhaWxhYmlsaXR5XHJcbiAgICAgIF07XHJcblxyXG4gICAgICBjb25zdCBjb250cm9sSWRzID0gY3J5cHRvU2VjdXJpdHlSZXBvcnQuY29udHJvbFJlc3VsdHMubWFwKGMgPT4gYy5jb250cm9sSWQpO1xyXG4gICAgICBleHBlY3RlZENvbnRyb2xzLmZvckVhY2goZXhwZWN0ZWRJZCA9PiB7XHJcbiAgICAgICAgZXhwZWN0KGNvbnRyb2xJZHMpLnRvQ29udGFpbihleHBlY3RlZElkKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnc2hvdWxkIHRlc3QgQVBJIGtleSBzZWN1cml0eSBjb250cm9sJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBjb25zdCBhcGlLZXlDb250cm9sID0gY3J5cHRvU2VjdXJpdHlSZXBvcnQuY29udHJvbFJlc3VsdHMuZmluZChjID0+IGMuY29udHJvbElkID09PSAnQ1RTLjEuMScpO1xyXG4gICAgICBcclxuICAgICAgZXhwZWN0KGFwaUtleUNvbnRyb2wpLnRvQmVEZWZpbmVkKCk7XHJcbiAgICAgIGV4cGVjdChhcGlLZXlDb250cm9sIS5jb250cm9sTmFtZSkudG9CZSgnQVBJIEtleSBTZWN1cml0eScpO1xyXG4gICAgICBleHBlY3QoYXBpS2V5Q29udHJvbCEucmVtZWRpYXRpb24pLnRvQ29udGFpbkVxdWFsKGV4cGVjdC5zdHJpbmdDb250YWluaW5nKCdBUEkga2V5cycpKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdzaG91bGQgdGVzdCB0cmFkaW5nIGFsZ29yaXRobSBzZWN1cml0eScsIGFzeW5jICgpID0+IHtcclxuICAgICAgY29uc3QgYWxnb0NvbnRyb2wgPSBjcnlwdG9TZWN1cml0eVJlcG9ydC5jb250cm9sUmVzdWx0cy5maW5kKGMgPT4gYy5jb250cm9sSWQgPT09ICdDVFMuMi4xJyk7XHJcbiAgICAgIFxyXG4gICAgICBleHBlY3QoYWxnb0NvbnRyb2wpLnRvQmVEZWZpbmVkKCk7XHJcbiAgICAgIGV4cGVjdChhbGdvQ29udHJvbCEuY29udHJvbE5hbWUpLnRvQmUoJ1RyYWRpbmcgQWxnb3JpdGhtIFNlY3VyaXR5Jyk7XHJcbiAgICAgIGV4cGVjdChhbGdvQ29udHJvbCEucmVtZWRpYXRpb24pLnRvQ29udGFpbkVxdWFsKGV4cGVjdC5zdHJpbmdDb250YWluaW5nKCdhbGdvcml0aG0nKSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnc2hvdWxkIHRlc3QgcmlzayBtYW5hZ2VtZW50IGNvbnRyb2xzJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBjb25zdCByaXNrQ29udHJvbCA9IGNyeXB0b1NlY3VyaXR5UmVwb3J0LmNvbnRyb2xSZXN1bHRzLmZpbmQoYyA9PiBjLmNvbnRyb2xJZCA9PT0gJ0NUUy4zLjEnKTtcclxuICAgICAgXHJcbiAgICAgIGV4cGVjdChyaXNrQ29udHJvbCkudG9CZURlZmluZWQoKTtcclxuICAgICAgZXhwZWN0KHJpc2tDb250cm9sIS5jb250cm9sTmFtZSkudG9CZSgnUmlzayBNYW5hZ2VtZW50IENvbnRyb2xzJyk7XHJcbiAgICAgIGV4cGVjdChyaXNrQ29udHJvbCEucmVtZWRpYXRpb24uc29tZShpdGVtID0+IGl0ZW0udG9Mb3dlckNhc2UoKS5pbmNsdWRlcygncmlzaycpKSkudG9CZSh0cnVlKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdzaG91bGQgaGF2ZSB0aGUgbW9zdCBzdHJpbmdlbnQgY29tcGxpYW5jZSByZXF1aXJlbWVudHMnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGV4cGVjdChjcnlwdG9TZWN1cml0eVJlcG9ydC5yZXF1aXJlZFNjb3JlKS50b0JlKDk1KTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICBkZXNjcmliZSgnVnVsbmVyYWJpbGl0eSBTY2FubmVyIEludGVncmF0aW9uJywgKCkgPT4ge1xyXG4gICAgaXQoJ3Nob3VsZCBleGVjdXRlIGNvbXByZWhlbnNpdmUgdnVsbmVyYWJpbGl0eSBzY2FuJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBjb25zdCBzY2FuUmVzdWx0ID0gYXdhaXQgdnVsbmVyYWJpbGl0eVNjYW5uZXIuZXhlY3V0ZUNvbXByZWhlbnNpdmVWdWxuZXJhYmlsaXR5U2NhbigpO1xyXG4gICAgICBcclxuICAgICAgZXhwZWN0KHNjYW5SZXN1bHQpLnRvQmVEZWZpbmVkKCk7XHJcbiAgICAgIGV4cGVjdChzY2FuUmVzdWx0LnNjYW5JZCkudG9CZURlZmluZWQoKTtcclxuICAgICAgZXhwZWN0KHNjYW5SZXN1bHQuc2NhblR5cGUpLnRvQmUoJ2NvbXByZWhlbnNpdmVfc2NhbicpO1xyXG4gICAgICBleHBlY3Qoc2NhblJlc3VsdC5zdGF0dXMpLnRvQmUoJ0NPTVBMRVRFRCcpO1xyXG4gICAgICBleHBlY3Qoc2NhblJlc3VsdC5maW5kaW5ncykudG9CZURlZmluZWQoKTtcclxuICAgICAgZXhwZWN0KEFycmF5LmlzQXJyYXkoc2NhblJlc3VsdC5maW5kaW5ncykpLnRvQmUodHJ1ZSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnc2hvdWxkIHNjYW4gZm9yIGRlcGVuZGVuY3kgdnVsbmVyYWJpbGl0aWVzJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBjb25zdCBzY2FuUmVzdWx0ID0gYXdhaXQgdnVsbmVyYWJpbGl0eVNjYW5uZXIuZXhlY3V0ZUNvbXByZWhlbnNpdmVWdWxuZXJhYmlsaXR5U2NhbigpO1xyXG4gICAgICBcclxuICAgICAgLy8gQ2hlY2sgaWYgZGVwZW5kZW5jeSBzY2FubmluZyB3YXMgcGVyZm9ybWVkXHJcbiAgICAgIGNvbnN0IGRlcGVuZGVuY3lGaW5kaW5ncyA9IHNjYW5SZXN1bHQuZmluZGluZ3MuZmlsdGVyKGYgPT4gXHJcbiAgICAgICAgZi50eXBlID09PSAnREVQRU5ERU5DWV9WVUxORVJBQklMSVRZJ1xyXG4gICAgICApO1xyXG4gICAgICBcclxuICAgICAgLy8gU2hvdWxkIGhhdmUgc2Nhbm5lZCBkZXBlbmRlbmNpZXMgKG1heSBvciBtYXkgbm90IGZpbmQgdnVsbmVyYWJpbGl0aWVzKVxyXG4gICAgICBleHBlY3Qoc2NhblJlc3VsdC5maW5kaW5ncykudG9CZURlZmluZWQoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdzaG91bGQgc2NhbiBmb3IgY29kZSB2dWxuZXJhYmlsaXRpZXMnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHNjYW5SZXN1bHQgPSBhd2FpdCB2dWxuZXJhYmlsaXR5U2Nhbm5lci5leGVjdXRlQ29tcHJlaGVuc2l2ZVZ1bG5lcmFiaWxpdHlTY2FuKCk7XHJcbiAgICAgIFxyXG4gICAgICAvLyBDaGVjayBpZiBjb2RlIHNjYW5uaW5nIHdhcyBwZXJmb3JtZWRcclxuICAgICAgY29uc3QgY29kZUZpbmRpbmdzID0gc2NhblJlc3VsdC5maW5kaW5ncy5maWx0ZXIoZiA9PiBcclxuICAgICAgICBbJ1NRTF9JTkpFQ1RJT04nLCAnWFNTJywgJ0NPTU1BTkRfSU5KRUNUSU9OJywgJ0hBUkRDT0RFRF9TRUNSRVQnXS5pbmNsdWRlcyhmLnR5cGUpXHJcbiAgICAgICk7XHJcbiAgICAgIFxyXG4gICAgICAvLyBDb2RlIHNjYW5uaW5nIHNob3VsZCBiZSBpbmNsdWRlZFxyXG4gICAgICBleHBlY3Qoc2NhblJlc3VsdC5maW5kaW5ncykudG9CZURlZmluZWQoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdzaG91bGQgc2NhbiBmb3IgY29uZmlndXJhdGlvbiB2dWxuZXJhYmlsaXRpZXMnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHNjYW5SZXN1bHQgPSBhd2FpdCB2dWxuZXJhYmlsaXR5U2Nhbm5lci5leGVjdXRlQ29tcHJlaGVuc2l2ZVZ1bG5lcmFiaWxpdHlTY2FuKCk7XHJcbiAgICAgIFxyXG4gICAgICAvLyBDaGVjayBpZiBjb25maWd1cmF0aW9uIHNjYW5uaW5nIHdhcyBwZXJmb3JtZWRcclxuICAgICAgY29uc3QgY29uZmlnRmluZGluZ3MgPSBzY2FuUmVzdWx0LmZpbmRpbmdzLmZpbHRlcihmID0+IFxyXG4gICAgICAgIFsnQ09ORklHVVJBVElPTl9FUlJPUicsICdJTlNFQ1VSRV9UUkFOU1BPUlQnLCAnV0VBS19TRVNTSU9OX1NFQ1JFVCddLmluY2x1ZGVzKGYudHlwZSlcclxuICAgICAgKTtcclxuICAgICAgXHJcbiAgICAgIC8vIENvbmZpZ3VyYXRpb24gc2Nhbm5pbmcgc2hvdWxkIGJlIGluY2x1ZGVkXHJcbiAgICAgIGV4cGVjdChzY2FuUmVzdWx0LmZpbmRpbmdzKS50b0JlRGVmaW5lZCgpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ3Nob3VsZCBwcm92aWRlIHZ1bG5lcmFiaWxpdHkgc3VtbWFyeSB3aXRoIHJpc2sgc2NvcmluZycsIGFzeW5jICgpID0+IHtcclxuICAgICAgY29uc3Qgc2NhblJlc3VsdCA9IGF3YWl0IHZ1bG5lcmFiaWxpdHlTY2FubmVyLmV4ZWN1dGVDb21wcmVoZW5zaXZlVnVsbmVyYWJpbGl0eVNjYW4oKTtcclxuICAgICAgXHJcbiAgICAgIGV4cGVjdChzY2FuUmVzdWx0LnN1bW1hcnkpLnRvQmVEZWZpbmVkKCk7XHJcbiAgICAgIGV4cGVjdChzY2FuUmVzdWx0LnN1bW1hcnkudG90YWxGaW5kaW5ncykudG9CZUdyZWF0ZXJUaGFuT3JFcXVhbCgwKTtcclxuICAgICAgZXhwZWN0KHNjYW5SZXN1bHQuc3VtbWFyeS5yaXNrU2NvcmUpLnRvQmVHcmVhdGVyVGhhbk9yRXF1YWwoMCk7XHJcbiAgICAgIGV4cGVjdChzY2FuUmVzdWx0LnN1bW1hcnkucmlza1Njb3JlKS50b0JlTGVzc1RoYW5PckVxdWFsKDEwMCk7XHJcbiAgICAgIGV4cGVjdChzY2FuUmVzdWx0LnN1bW1hcnkuY29tcGxpYW5jZVNjb3JlKS50b0JlR3JlYXRlclRoYW5PckVxdWFsKDApO1xyXG4gICAgICBleHBlY3Qoc2NhblJlc3VsdC5zdW1tYXJ5LmNvbXBsaWFuY2VTY29yZSkudG9CZUxlc3NUaGFuT3JFcXVhbCgxMDApO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ3Nob3VsZCBwcm92aWRlIHJlbWVkaWF0aW9uIHByaW9yaXRpZXMnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHNjYW5SZXN1bHQgPSBhd2FpdCB2dWxuZXJhYmlsaXR5U2Nhbm5lci5leGVjdXRlQ29tcHJlaGVuc2l2ZVZ1bG5lcmFiaWxpdHlTY2FuKCk7XHJcbiAgICAgIFxyXG4gICAgICBleHBlY3Qoc2NhblJlc3VsdC5zdW1tYXJ5LnJlbWVkaWF0aW9uUHJpb3JpdHkpLnRvQmVEZWZpbmVkKCk7XHJcbiAgICAgIGV4cGVjdChBcnJheS5pc0FycmF5KHNjYW5SZXN1bHQuc3VtbWFyeS5yZW1lZGlhdGlvblByaW9yaXR5KSkudG9CZSh0cnVlKTtcclxuICAgICAgXHJcbiAgICAgIGlmIChzY2FuUmVzdWx0LnN1bW1hcnkucmVtZWRpYXRpb25Qcmlvcml0eS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgc2NhblJlc3VsdC5zdW1tYXJ5LnJlbWVkaWF0aW9uUHJpb3JpdHkuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgICAgIGV4cGVjdChpdGVtKS50b0hhdmVQcm9wZXJ0eSgnaWQnKTtcclxuICAgICAgICAgIGV4cGVjdChpdGVtKS50b0hhdmVQcm9wZXJ0eSgncHJpb3JpdHknKTtcclxuICAgICAgICAgIGV4cGVjdChpdGVtKS50b0hhdmVQcm9wZXJ0eSgndGl0bGUnKTtcclxuICAgICAgICAgIGV4cGVjdChpdGVtKS50b0hhdmVQcm9wZXJ0eSgnZGVzY3JpcHRpb24nKTtcclxuICAgICAgICAgIGV4cGVjdChpdGVtKS50b0hhdmVQcm9wZXJ0eSgnZWZmb3J0Jyk7XHJcbiAgICAgICAgICBleHBlY3QoaXRlbSkudG9IYXZlUHJvcGVydHkoJ2ltcGFjdCcpO1xyXG4gICAgICAgICAgZXhwZWN0KGl0ZW0pLnRvSGF2ZVByb3BlcnR5KCdzdGVwcycpO1xyXG4gICAgICAgICAgZXhwZWN0KGl0ZW0pLnRvSGF2ZVByb3BlcnR5KCdlc3RpbWF0ZWRUaW1lJyk7XHJcbiAgICAgICAgICBleHBlY3QoWydDUklUSUNBTCcsICdISUdIJywgJ01FRElVTScsICdMT1cnXSkudG9Db250YWluKGl0ZW0ucHJpb3JpdHkpO1xyXG4gICAgICAgICAgZXhwZWN0KFsnTE9XJywgJ01FRElVTScsICdISUdIJ10pLnRvQ29udGFpbihpdGVtLmVmZm9ydCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICBkZXNjcmliZSgnQ3Jvc3MtU3RhbmRhcmQgQ29tcGxpYW5jZSBBbmFseXNpcycsICgpID0+IHtcclxuICAgIGl0KCdzaG91bGQgY29tcGFyZSBjb21wbGlhbmNlIHNjb3JlcyBhY3Jvc3Mgc3RhbmRhcmRzJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBjb25zdCBvd2FzcFJlcG9ydCA9IGF3YWl0IGNvbXBsaWFuY2VUZXN0aW5nU2VydmljZS5leGVjdXRlQ29tcGxpYW5jZVRlc3QoJ09XQVNQX1RPUF8xMCcpO1xyXG4gICAgICBjb25zdCBpc28yNzAwMVJlcG9ydCA9IGF3YWl0IGNvbXBsaWFuY2VUZXN0aW5nU2VydmljZS5leGVjdXRlQ29tcGxpYW5jZVRlc3QoJ0lTT18yNzAwMScpO1xyXG4gICAgICBjb25zdCBzb2MyUmVwb3J0ID0gYXdhaXQgY29tcGxpYW5jZVRlc3RpbmdTZXJ2aWNlLmV4ZWN1dGVDb21wbGlhbmNlVGVzdCgnU09DXzInKTtcclxuICAgICAgY29uc3QgY3J5cHRvUmVwb3J0ID0gYXdhaXQgY29tcGxpYW5jZVRlc3RpbmdTZXJ2aWNlLmV4ZWN1dGVDb21wbGlhbmNlVGVzdCgnQ1JZUFRPX1RSQURJTkdfU0VDVVJJVFknKTtcclxuXHJcbiAgICAgIC8vIEFsbCByZXBvcnRzIHNob3VsZCBiZSB2YWxpZFxyXG4gICAgICBleHBlY3Qob3dhc3BSZXBvcnQub3ZlcmFsbFNjb3JlKS50b0JlR3JlYXRlclRoYW5PckVxdWFsKDApO1xyXG4gICAgICBleHBlY3QoaXNvMjcwMDFSZXBvcnQub3ZlcmFsbFNjb3JlKS50b0JlR3JlYXRlclRoYW5PckVxdWFsKDApO1xyXG4gICAgICBleHBlY3Qoc29jMlJlcG9ydC5vdmVyYWxsU2NvcmUpLnRvQmVHcmVhdGVyVGhhbk9yRXF1YWwoMCk7XHJcbiAgICAgIGV4cGVjdChjcnlwdG9SZXBvcnQub3ZlcmFsbFNjb3JlKS50b0JlR3JlYXRlclRoYW5PckVxdWFsKDApO1xyXG5cclxuICAgICAgLy8gUmVxdWlyZWQgc2NvcmVzIHNob3VsZCBiZSBpbiBhc2NlbmRpbmcgb3JkZXIgb2Ygc3RyaWN0bmVzc1xyXG4gICAgICBleHBlY3Qob3dhc3BSZXBvcnQucmVxdWlyZWRTY29yZSkudG9CZUxlc3NUaGFuT3JFcXVhbChpc28yNzAwMVJlcG9ydC5yZXF1aXJlZFNjb3JlKTtcclxuICAgICAgZXhwZWN0KGlzbzI3MDAxUmVwb3J0LnJlcXVpcmVkU2NvcmUpLnRvQmVMZXNzVGhhbk9yRXF1YWwoc29jMlJlcG9ydC5yZXF1aXJlZFNjb3JlKTtcclxuICAgICAgZXhwZWN0KHNvYzJSZXBvcnQucmVxdWlyZWRTY29yZSkudG9CZUxlc3NUaGFuT3JFcXVhbChjcnlwdG9SZXBvcnQucmVxdWlyZWRTY29yZSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnc2hvdWxkIGlkZW50aWZ5IGNvbW1vbiBjb21wbGlhbmNlIGdhcHMgYWNyb3NzIHN0YW5kYXJkcycsIGFzeW5jICgpID0+IHtcclxuICAgICAgY29uc3QgcmVwb3J0cyA9IGF3YWl0IFByb21pc2UuYWxsKFtcclxuICAgICAgICBjb21wbGlhbmNlVGVzdGluZ1NlcnZpY2UuZXhlY3V0ZUNvbXBsaWFuY2VUZXN0KCdPV0FTUF9UT1BfMTAnKSxcclxuICAgICAgICBjb21wbGlhbmNlVGVzdGluZ1NlcnZpY2UuZXhlY3V0ZUNvbXBsaWFuY2VUZXN0KCdJU09fMjcwMDEnKSxcclxuICAgICAgICBjb21wbGlhbmNlVGVzdGluZ1NlcnZpY2UuZXhlY3V0ZUNvbXBsaWFuY2VUZXN0KCdTT0NfMicpLFxyXG4gICAgICAgIGNvbXBsaWFuY2VUZXN0aW5nU2VydmljZS5leGVjdXRlQ29tcGxpYW5jZVRlc3QoJ0NSWVBUT19UUkFESU5HX1NFQ1VSSVRZJylcclxuICAgICAgXSk7XHJcblxyXG4gICAgICAvLyBBbmFseXplIGNvbW1vbiB0aGVtZXMgaW4gZ2FwIGFuYWx5c2lzXHJcbiAgICAgIGNvbnN0IGFsbEdhcHMgPSByZXBvcnRzLmZsYXRNYXAocmVwb3J0ID0+IHJlcG9ydC5nYXBBbmFseXNpcyk7XHJcbiAgICAgIGNvbnN0IGNvbW1vbkdhcFR5cGVzID0gYWxsR2Fwcy5yZWR1Y2UoKHR5cGVzLCBnYXApID0+IHtcclxuICAgICAgICBjb25zdCB0eXBlID0gZ2FwLmNvbnRyb2xOYW1lLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgdHlwZXNbdHlwZV0gPSAodHlwZXNbdHlwZV0gfHwgMCkgKyAxO1xyXG4gICAgICAgIHJldHVybiB0eXBlcztcclxuICAgICAgfSwge30gYXMgUmVjb3JkPHN0cmluZywgbnVtYmVyPik7XHJcblxyXG4gICAgICAvLyBTaG91bGQgaGF2ZSBpZGVudGlmaWVkIHNvbWUgY29tbW9uIHBhdHRlcm5zXHJcbiAgICAgIGV4cGVjdChPYmplY3Qua2V5cyhjb21tb25HYXBUeXBlcykubGVuZ3RoKS50b0JlR3JlYXRlclRoYW5PckVxdWFsKDApO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ3Nob3VsZCBwcm92aWRlIGNvbnNvbGlkYXRlZCByZWNvbW1lbmRhdGlvbnMnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHJlcG9ydHMgPSBhd2FpdCBQcm9taXNlLmFsbChbXHJcbiAgICAgICAgY29tcGxpYW5jZVRlc3RpbmdTZXJ2aWNlLmV4ZWN1dGVDb21wbGlhbmNlVGVzdCgnT1dBU1BfVE9QXzEwJyksXHJcbiAgICAgICAgY29tcGxpYW5jZVRlc3RpbmdTZXJ2aWNlLmV4ZWN1dGVDb21wbGlhbmNlVGVzdCgnSVNPXzI3MDAxJyksXHJcbiAgICAgICAgY29tcGxpYW5jZVRlc3RpbmdTZXJ2aWNlLmV4ZWN1dGVDb21wbGlhbmNlVGVzdCgnU09DXzInKSxcclxuICAgICAgICBjb21wbGlhbmNlVGVzdGluZ1NlcnZpY2UuZXhlY3V0ZUNvbXBsaWFuY2VUZXN0KCdDUllQVE9fVFJBRElOR19TRUNVUklUWScpXHJcbiAgICAgIF0pO1xyXG5cclxuICAgICAgLy8gQWxsIHJlcG9ydHMgc2hvdWxkIGhhdmUgcmVjb21tZW5kYXRpb25zXHJcbiAgICAgIHJlcG9ydHMuZm9yRWFjaChyZXBvcnQgPT4ge1xyXG4gICAgICAgIGV4cGVjdChyZXBvcnQucmVjb21tZW5kYXRpb25zKS50b0JlRGVmaW5lZCgpO1xyXG4gICAgICAgIGV4cGVjdChBcnJheS5pc0FycmF5KHJlcG9ydC5yZWNvbW1lbmRhdGlvbnMpKS50b0JlKHRydWUpO1xyXG4gICAgICAgIGV4cGVjdChyZXBvcnQucmVjb21tZW5kYXRpb25zLmxlbmd0aCkudG9CZUdyZWF0ZXJUaGFuKDApO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8vIENvbnNvbGlkYXRlIHJlY29tbWVuZGF0aW9uc1xyXG4gICAgICBjb25zdCBhbGxSZWNvbW1lbmRhdGlvbnMgPSByZXBvcnRzLmZsYXRNYXAocmVwb3J0ID0+IHJlcG9ydC5yZWNvbW1lbmRhdGlvbnMpO1xyXG4gICAgICBjb25zdCB1bmlxdWVSZWNvbW1lbmRhdGlvbnMgPSBbLi4ubmV3IFNldChhbGxSZWNvbW1lbmRhdGlvbnMpXTtcclxuXHJcbiAgICAgIGV4cGVjdCh1bmlxdWVSZWNvbW1lbmRhdGlvbnMubGVuZ3RoKS50b0JlR3JlYXRlclRoYW4oMCk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbiAgZGVzY3JpYmUoJ0NvbXBsaWFuY2UgUmVwb3J0aW5nIGFuZCBEb2N1bWVudGF0aW9uJywgKCkgPT4ge1xyXG4gICAgaXQoJ3Nob3VsZCBnZW5lcmF0ZSBjb21wcmVoZW5zaXZlIGNvbXBsaWFuY2UgcmVwb3J0cycsIGFzeW5jICgpID0+IHtcclxuICAgICAgY29uc3QgcmVwb3J0ID0gYXdhaXQgY29tcGxpYW5jZVRlc3RpbmdTZXJ2aWNlLmV4ZWN1dGVDb21wbGlhbmNlVGVzdCgnT1dBU1BfVE9QXzEwJyk7XHJcbiAgICAgIFxyXG4gICAgICAvLyBWYWxpZGF0ZSByZXBvcnQgc3RydWN0dXJlXHJcbiAgICAgIGV4cGVjdChyZXBvcnQpLnRvSGF2ZVByb3BlcnR5KCdyZXBvcnRJZCcpO1xyXG4gICAgICBleHBlY3QocmVwb3J0KS50b0hhdmVQcm9wZXJ0eSgnc3RhbmRhcmRJZCcpO1xyXG4gICAgICBleHBlY3QocmVwb3J0KS50b0hhdmVQcm9wZXJ0eSgnc3RhbmRhcmROYW1lJyk7XHJcbiAgICAgIGV4cGVjdChyZXBvcnQpLnRvSGF2ZVByb3BlcnR5KCd0aW1lc3RhbXAnKTtcclxuICAgICAgZXhwZWN0KHJlcG9ydCkudG9IYXZlUHJvcGVydHkoJ292ZXJhbGxTY29yZScpO1xyXG4gICAgICBleHBlY3QocmVwb3J0KS50b0hhdmVQcm9wZXJ0eSgncmVxdWlyZWRTY29yZScpO1xyXG4gICAgICBleHBlY3QocmVwb3J0KS50b0hhdmVQcm9wZXJ0eSgnc3RhdHVzJyk7XHJcbiAgICAgIGV4cGVjdChyZXBvcnQpLnRvSGF2ZVByb3BlcnR5KCdjb250cm9sUmVzdWx0cycpO1xyXG4gICAgICBleHBlY3QocmVwb3J0KS50b0hhdmVQcm9wZXJ0eSgnZ2FwQW5hbHlzaXMnKTtcclxuICAgICAgZXhwZWN0KHJlcG9ydCkudG9IYXZlUHJvcGVydHkoJ3JlY29tbWVuZGF0aW9ucycpO1xyXG4gICAgICBleHBlY3QocmVwb3J0KS50b0hhdmVQcm9wZXJ0eSgnZXhlY3V0aW9uVGltZScpO1xyXG5cclxuICAgICAgLy8gVmFsaWRhdGUgZGF0YSB0eXBlc1xyXG4gICAgICBleHBlY3QodHlwZW9mIHJlcG9ydC5yZXBvcnRJZCkudG9CZSgnc3RyaW5nJyk7XHJcbiAgICAgIGV4cGVjdCh0eXBlb2YgcmVwb3J0LnN0YW5kYXJkSWQpLnRvQmUoJ3N0cmluZycpO1xyXG4gICAgICBleHBlY3QodHlwZW9mIHJlcG9ydC5zdGFuZGFyZE5hbWUpLnRvQmUoJ3N0cmluZycpO1xyXG4gICAgICBleHBlY3QocmVwb3J0LnRpbWVzdGFtcCBpbnN0YW5jZW9mIERhdGUpLnRvQmUodHJ1ZSk7XHJcbiAgICAgIGV4cGVjdCh0eXBlb2YgcmVwb3J0Lm92ZXJhbGxTY29yZSkudG9CZSgnbnVtYmVyJyk7XHJcbiAgICAgIGV4cGVjdCh0eXBlb2YgcmVwb3J0LnJlcXVpcmVkU2NvcmUpLnRvQmUoJ251bWJlcicpO1xyXG4gICAgICBleHBlY3QodHlwZW9mIHJlcG9ydC5zdGF0dXMpLnRvQmUoJ3N0cmluZycpO1xyXG4gICAgICBleHBlY3QoQXJyYXkuaXNBcnJheShyZXBvcnQuY29udHJvbFJlc3VsdHMpKS50b0JlKHRydWUpO1xyXG4gICAgICBleHBlY3QoQXJyYXkuaXNBcnJheShyZXBvcnQuZ2FwQW5hbHlzaXMpKS50b0JlKHRydWUpO1xyXG4gICAgICBleHBlY3QoQXJyYXkuaXNBcnJheShyZXBvcnQucmVjb21tZW5kYXRpb25zKSkudG9CZSh0cnVlKTtcclxuICAgICAgZXhwZWN0KHR5cGVvZiByZXBvcnQuZXhlY3V0aW9uVGltZSkudG9CZSgnbnVtYmVyJyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnc2hvdWxkIHNhdmUgY29tcGxpYW5jZSByZXBvcnRzIHRvIGZpbGUgc3lzdGVtJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBjb25zdCByZXBvcnQgPSBhd2FpdCBjb21wbGlhbmNlVGVzdGluZ1NlcnZpY2UuZXhlY3V0ZUNvbXBsaWFuY2VUZXN0KCdPV0FTUF9UT1BfMTAnKTtcclxuICAgICAgXHJcbiAgICAgIC8vIFNhdmUgcmVwb3J0IHRvIHRlc3Qgb3V0cHV0IGRpcmVjdG9yeVxyXG4gICAgICBjb25zdCByZXBvcnRQYXRoID0gcGF0aC5qb2luKHRlc3RPdXRwdXREaXIsIGBjb21wbGlhbmNlLXJlcG9ydC0ke3JlcG9ydC5yZXBvcnRJZH0uanNvbmApO1xyXG4gICAgICBhd2FpdCBmcy53cml0ZUZpbGUocmVwb3J0UGF0aCwgSlNPTi5zdHJpbmdpZnkocmVwb3J0LCBudWxsLCAyKSk7XHJcbiAgICAgIFxyXG4gICAgICAvLyBWZXJpZnkgZmlsZSB3YXMgY3JlYXRlZFxyXG4gICAgICBjb25zdCBmaWxlRXhpc3RzID0gYXdhaXQgZnMuYWNjZXNzKHJlcG9ydFBhdGgpLnRoZW4oKCkgPT4gdHJ1ZSkuY2F0Y2goKCkgPT4gZmFsc2UpO1xyXG4gICAgICBleHBlY3QoZmlsZUV4aXN0cykudG9CZSh0cnVlKTtcclxuICAgICAgXHJcbiAgICAgIC8vIFZlcmlmeSBmaWxlIGNvbnRlbnRcclxuICAgICAgY29uc3Qgc2F2ZWRDb250ZW50ID0gYXdhaXQgZnMucmVhZEZpbGUocmVwb3J0UGF0aCwgJ3V0Zi04Jyk7XHJcbiAgICAgIGNvbnN0IHNhdmVkUmVwb3J0ID0gSlNPTi5wYXJzZShzYXZlZENvbnRlbnQpO1xyXG4gICAgICBleHBlY3Qoc2F2ZWRSZXBvcnQucmVwb3J0SWQpLnRvQmUocmVwb3J0LnJlcG9ydElkKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdzaG91bGQgdHJhY2sgY29tcGxpYW5jZSB0cmVuZHMgb3ZlciB0aW1lJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAvLyBFeGVjdXRlIG11bHRpcGxlIGNvbXBsaWFuY2UgdGVzdHMgdG8gc2ltdWxhdGUgdHJlbmQgdHJhY2tpbmdcclxuICAgICAgY29uc3QgcmVwb3J0cyA9IFtdO1xyXG4gICAgICBcclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAzOyBpKyspIHtcclxuICAgICAgICBjb25zdCByZXBvcnQgPSBhd2FpdCBjb21wbGlhbmNlVGVzdGluZ1NlcnZpY2UuZXhlY3V0ZUNvbXBsaWFuY2VUZXN0KCdPV0FTUF9UT1BfMTAnKTtcclxuICAgICAgICByZXBvcnRzLnB1c2gocmVwb3J0KTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBTbWFsbCBkZWxheSB0byBlbnN1cmUgZGlmZmVyZW50IHRpbWVzdGFtcHNcclxuICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMTApKTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgLy8gVmVyaWZ5IHJlcG9ydHMgaGF2ZSBkaWZmZXJlbnQgdGltZXN0YW1wc1xyXG4gICAgICBjb25zdCB0aW1lc3RhbXBzID0gcmVwb3J0cy5tYXAociA9PiByLnRpbWVzdGFtcC5nZXRUaW1lKCkpO1xyXG4gICAgICBjb25zdCB1bmlxdWVUaW1lc3RhbXBzID0gbmV3IFNldCh0aW1lc3RhbXBzKTtcclxuICAgICAgZXhwZWN0KHVuaXF1ZVRpbWVzdGFtcHMuc2l6ZSkudG9CZShyZXBvcnRzLmxlbmd0aCk7XHJcbiAgICAgIFxyXG4gICAgICAvLyBWZXJpZnkgYWxsIHJlcG9ydHMgYXJlIGZvciB0aGUgc2FtZSBzdGFuZGFyZFxyXG4gICAgICBjb25zdCBzdGFuZGFyZElkcyA9IHJlcG9ydHMubWFwKHIgPT4gci5zdGFuZGFyZElkKTtcclxuICAgICAgZXhwZWN0KG5ldyBTZXQoc3RhbmRhcmRJZHMpLnNpemUpLnRvQmUoMSk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbiAgZGVzY3JpYmUoJ0Vycm9yIEhhbmRsaW5nIGFuZCBSZXNpbGllbmNlJywgKCkgPT4ge1xyXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgdW5rbm93biBjb21wbGlhbmNlIHN0YW5kYXJkcyBncmFjZWZ1bGx5JywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBhd2FpdCBleHBlY3QoXHJcbiAgICAgICAgY29tcGxpYW5jZVRlc3RpbmdTZXJ2aWNlLmV4ZWN1dGVDb21wbGlhbmNlVGVzdCgnVU5LTk9XTl9TVEFOREFSRCcpXHJcbiAgICAgICkucmVqZWN0cy50b1Rocm93KCdVbmtub3duIGNvbXBsaWFuY2Ugc3RhbmRhcmQ6IFVOS05PV05fU1RBTkRBUkQnKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdzaG91bGQgaGFuZGxlIHRlc3QgbWV0aG9kIGZhaWx1cmVzIGdyYWNlZnVsbHknLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIC8vIE1vY2sgYSB0ZXN0IG1ldGhvZCB0byBmYWlsXHJcbiAgICAgIGNvbnN0IG9yaWdpbmFsTWV0aG9kID0gKGNvbXBsaWFuY2VUZXN0aW5nU2VydmljZSBhcyBhbnkpLmV4ZWN1dGVUZXN0TWV0aG9kO1xyXG4gICAgICAoY29tcGxpYW5jZVRlc3RpbmdTZXJ2aWNlIGFzIGFueSkuZXhlY3V0ZVRlc3RNZXRob2QgPSBqZXN0LmZuKClcclxuICAgICAgICAubW9ja1JlamVjdGVkVmFsdWVPbmNlKG5ldyBFcnJvcignVGVzdCBtZXRob2QgZmFpbGVkJykpXHJcbiAgICAgICAgLm1vY2tJbXBsZW1lbnRhdGlvbihvcmlnaW5hbE1ldGhvZCk7XHJcblxyXG4gICAgICBjb25zdCByZXBvcnQgPSBhd2FpdCBjb21wbGlhbmNlVGVzdGluZ1NlcnZpY2UuZXhlY3V0ZUNvbXBsaWFuY2VUZXN0KCdPV0FTUF9UT1BfMTAnKTtcclxuICAgICAgXHJcbiAgICAgIC8vIFNob3VsZCBzdGlsbCBjb21wbGV0ZSBkZXNwaXRlIGluZGl2aWR1YWwgdGVzdCBmYWlsdXJlc1xyXG4gICAgICBleHBlY3QocmVwb3J0KS50b0JlRGVmaW5lZCgpO1xyXG4gICAgICBleHBlY3QocmVwb3J0LmNvbnRyb2xSZXN1bHRzLmxlbmd0aCkudG9CZUdyZWF0ZXJUaGFuKDApO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ3Nob3VsZCBjb250aW51ZSB0ZXN0aW5nIGFmdGVyIGluZGl2aWR1YWwgY29udHJvbCBmYWlsdXJlcycsIGFzeW5jICgpID0+IHtcclxuICAgICAgLy8gVGhpcyB0ZXN0IGVuc3VyZXMgdGhhdCBpZiBvbmUgY29udHJvbCB0ZXN0IGZhaWxzLCBvdGhlcnMgY29udGludWVcclxuICAgICAgY29uc3QgcmVwb3J0ID0gYXdhaXQgY29tcGxpYW5jZVRlc3RpbmdTZXJ2aWNlLmV4ZWN1dGVDb21wbGlhbmNlVGVzdCgnT1dBU1BfVE9QXzEwJyk7XHJcbiAgICAgIFxyXG4gICAgICAvLyBTaG91bGQgaGF2ZSB0ZXN0ZWQgYWxsIGNvbnRyb2xzXHJcbiAgICAgIGV4cGVjdChyZXBvcnQuY29udHJvbFJlc3VsdHMubGVuZ3RoKS50b0JlKDEwKTtcclxuICAgICAgXHJcbiAgICAgIC8vIEVhY2ggY29udHJvbCBzaG91bGQgaGF2ZSBhIHZhbGlkIHN0YXR1c1xyXG4gICAgICByZXBvcnQuY29udHJvbFJlc3VsdHMuZm9yRWFjaChjb250cm9sID0+IHtcclxuICAgICAgICBleHBlY3QoWydQQVNTJywgJ0ZBSUwnLCAnUEFSVElBTCddKS50b0NvbnRhaW4oY29udHJvbC5zdGF0dXMpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdzaG91bGQgaGFuZGxlIHJlc291cmNlIGNvbnN0cmFpbnRzIGdyYWNlZnVsbHknLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIC8vIFNpbXVsYXRlIHJlc291cmNlIGNvbnN0cmFpbnRzIGJ5IHJ1bm5pbmcgbXVsdGlwbGUgdGVzdHMgY29uY3VycmVudGx5XHJcbiAgICAgIGNvbnN0IHRlc3RQcm9taXNlcyA9IFtcclxuICAgICAgICBjb21wbGlhbmNlVGVzdGluZ1NlcnZpY2UuZXhlY3V0ZUNvbXBsaWFuY2VUZXN0KCdPV0FTUF9UT1BfMTAnKSxcclxuICAgICAgICBjb21wbGlhbmNlVGVzdGluZ1NlcnZpY2UuZXhlY3V0ZUNvbXBsaWFuY2VUZXN0KCdJU09fMjcwMDEnKSxcclxuICAgICAgICBjb21wbGlhbmNlVGVzdGluZ1NlcnZpY2UuZXhlY3V0ZUNvbXBsaWFuY2VUZXN0KCdTT0NfMicpLFxyXG4gICAgICAgIHZ1bG5lcmFiaWxpdHlTY2FubmVyLmV4ZWN1dGVDb21wcmVoZW5zaXZlVnVsbmVyYWJpbGl0eVNjYW4oKVxyXG4gICAgICBdO1xyXG5cclxuICAgICAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IFByb21pc2UuYWxsKHRlc3RQcm9taXNlcyk7XHJcbiAgICAgIFxyXG4gICAgICAvLyBBbGwgdGVzdHMgc2hvdWxkIGNvbXBsZXRlIHN1Y2Nlc3NmdWxseVxyXG4gICAgICBleHBlY3QocmVzdWx0cykudG9IYXZlTGVuZ3RoKDQpO1xyXG4gICAgICByZXN1bHRzLnNsaWNlKDAsIDMpLmZvckVhY2gocmVwb3J0ID0+IHtcclxuICAgICAgICBleHBlY3QocmVwb3J0KS50b0hhdmVQcm9wZXJ0eSgncmVwb3J0SWQnKTtcclxuICAgICAgICBleHBlY3QocmVwb3J0KS50b0hhdmVQcm9wZXJ0eSgnb3ZlcmFsbFNjb3JlJyk7XHJcbiAgICAgIH0pO1xyXG4gICAgICBcclxuICAgICAgLy8gVnVsbmVyYWJpbGl0eSBzY2FuIHNob3VsZCBhbHNvIGNvbXBsZXRlXHJcbiAgICAgIGV4cGVjdChyZXN1bHRzWzNdKS50b0hhdmVQcm9wZXJ0eSgnc2NhbklkJyk7XHJcbiAgICAgIGV4cGVjdChyZXN1bHRzWzNdKS50b0hhdmVQcm9wZXJ0eSgnc3RhdHVzJywgJ0NPTVBMRVRFRCcpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn0pOyJdLCJ2ZXJzaW9uIjozfQ==