{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\tests\\security\\security-compliance-validation.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\tests\\security\\security-compliance-validation.test.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * SECURITY COMPLIANCE VALIDATION TEST SUITE\r\n * =============================================================================\r\n * \r\n * Comprehensive security compliance testing and validation for the AI crypto\r\n * trading agent. Tests compliance with multiple security standards including\r\n * OWASP Top 10, ISO 27001, SOC 2, and custom crypto trading security framework.\r\n * \r\n * Features:\r\n * - Multi-standard compliance testing\r\n * - Automated compliance scoring\r\n * - Gap analysis and remediation planning\r\n * - Continuous compliance monitoring\r\n * - Detailed compliance reporting\r\n * \r\n * Requirements: 25.7 - Add security compliance testing and validation\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport { logger } from '../../core/logging/logger';\r\nimport { ComplianceTestingService, ComplianceReport } from '../../security/compliance-testing';\r\nimport { VulnerabilityScannerService, VulnerabilityScanner } from '../../security/vulnerability-scanner-service';\r\nimport { encryptionService } from '../../security/encryption-service';\r\nimport { ThreatDetectionEngine } from '../../security/threat-detection-engine';\r\nimport * as crypto from 'crypto';\r\nimport * as fs from 'fs/promises';\r\nimport * as path from 'path';\r\nimport * as os from 'os';\r\n\r\n// Mock external dependencies\r\njest.mock('../../core/logging/logger');\r\n\r\ndescribe('Security Compliance Validation Test Suite', () => {\r\n  let complianceTestingService: ComplianceTestingService;\r\n  let vulnerabilityScanner: VulnerabilityScannerService;\r\n  let threatDetection: ThreatDetectionEngine;\r\n  let testOutputDir: string;\r\n\r\n  beforeAll(async () => {\r\n    // Set up test environment\r\n    process.env.NODE_ENV = 'test';\r\n    process.env.MASTER_ENCRYPTION_KEY = crypto.randomBytes(32).toString('hex');\r\n    \r\n    // Create temporary test output directory\r\n    testOutputDir = path.join(os.tmpdir(), 'compliance-test-output');\r\n    await fs.mkdir(testOutputDir, { recursive: true });\r\n  });\r\n\r\n  beforeEach(async () => {\r\n    // Initialize services\r\n    complianceTestingService = new ComplianceTestingService(logger);\r\n    vulnerabilityScanner = new VulnerabilityScannerService(logger);\r\n    threatDetection = new ThreatDetectionEngine(logger);\r\n\r\n    // Clear all mocks\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  afterEach(async () => {\r\n    // Clean up test files\r\n    try {\r\n      const files = await fs.readdir(testOutputDir);\r\n      for (const file of files) {\r\n        await fs.unlink(path.join(testOutputDir, file));\r\n      }\r\n    } catch (error) {\r\n      // Ignore cleanup errors\r\n    }\r\n  });\r\n\r\n  afterAll(async () => {\r\n    // Clean up test environment\r\n    delete process.env.MASTER_ENCRYPTION_KEY;\r\n    delete process.env.NODE_ENV;\r\n    \r\n    try {\r\n      await fs.rmdir(testOutputDir);\r\n    } catch (error) {\r\n      // Ignore cleanup errors\r\n    }\r\n  });\r\n\r\n  describe('OWASP Top 10 Compliance Testing', () => {\r\n    let owaspReport: ComplianceReport;\r\n\r\n    beforeEach(async () => {\r\n      owaspReport = await complianceTestingService.executeComplianceTest('OWASP_TOP_10');\r\n    });\r\n\r\n    it('should execute OWASP Top 10 compliance test successfully', async () => {\r\n      expect(owaspReport).toBeDefined();\r\n      expect(owaspReport.standardId).toBe('OWASP_TOP_10');\r\n      expect(owaspReport.standardName).toBe('OWASP Top 10');\r\n      expect(owaspReport.reportId).toBeDefined();\r\n      expect(owaspReport.timestamp).toBeInstanceOf(Date);\r\n    });\r\n\r\n    it('should test all OWASP Top 10 controls', async () => {\r\n      expect(owaspReport.controlResults).toBeDefined();\r\n      expect(owaspReport.controlResults.length).toBe(10);\r\n\r\n      const expectedControls = [\r\n        'A01_2021', // Broken Access Control\r\n        'A02_2021', // Cryptographic Failures\r\n        'A03_2021', // Injection\r\n        'A04_2021', // Insecure Design\r\n        'A05_2021', // Security Misconfiguration\r\n        'A06_2021', // Vulnerable and Outdated Components\r\n        'A07_2021', // Identification and Authentication Failures\r\n        'A08_2021', // Software and Data Integrity Failures\r\n        'A09_2021', // Security Logging and Monitoring Failures\r\n        'A10_2021'  // Server-Side Request Forgery\r\n      ];\r\n\r\n      const controlIds = owaspReport.controlResults.map(c => c.controlId);\r\n      expectedControls.forEach(expectedId => {\r\n        expect(controlIds).toContain(expectedId);\r\n      });\r\n    });\r\n\r\n    it('should calculate overall compliance score correctly', async () => {\r\n      expect(owaspReport.overallScore).toBeGreaterThanOrEqual(0);\r\n      expect(owaspReport.overallScore).toBeLessThanOrEqual(100);\r\n      expect(typeof owaspReport.overallScore).toBe('number');\r\n    });\r\n\r\n    it('should determine compliance status based on score', async () => {\r\n      expect(['COMPLIANT', 'NON_COMPLIANT', 'PARTIAL']).toContain(owaspReport.status);\r\n      \r\n      if (owaspReport.overallScore >= 80) {\r\n        expect(owaspReport.status).toBe('COMPLIANT');\r\n      } else if (owaspReport.overallScore >= 56) { // 70% of 80\r\n        expect(owaspReport.status).toBe('PARTIAL');\r\n      } else {\r\n        expect(owaspReport.status).toBe('NON_COMPLIANT');\r\n      }\r\n    });\r\n\r\n    it('should test broken access control (A01)', async () => {\r\n      const accessControlResult = owaspReport.controlResults.find(c => c.controlId === 'A01_2021');\r\n      \r\n      expect(accessControlResult).toBeDefined();\r\n      expect(accessControlResult!.controlName).toBe('Broken Access Control');\r\n      expect(['PASS', 'FAIL', 'PARTIAL']).toContain(accessControlResult!.status);\r\n      expect(accessControlResult!.score).toBeGreaterThanOrEqual(0);\r\n      expect(accessControlResult!.score).toBeLessThanOrEqual(100);\r\n    });\r\n\r\n    it('should test cryptographic failures (A02)', async () => {\r\n      const cryptoResult = owaspReport.controlResults.find(c => c.controlId === 'A02_2021');\r\n      \r\n      expect(cryptoResult).toBeDefined();\r\n      expect(cryptoResult!.controlName).toBe('Cryptographic Failures');\r\n      expect(cryptoResult!.remediation).toContainEqual(expect.stringContaining('encryption'));\r\n    });\r\n\r\n    it('should test injection vulnerabilities (A03)', async () => {\r\n      const injectionResult = owaspReport.controlResults.find(c => c.controlId === 'A03_2021');\r\n      \r\n      expect(injectionResult).toBeDefined();\r\n      expect(injectionResult!.controlName).toBe('Injection');\r\n      expect(injectionResult!.remediation).toContainEqual(expect.stringContaining('parameterized queries'));\r\n    });\r\n\r\n    it('should provide gap analysis for non-compliant controls', async () => {\r\n      expect(owaspReport.gapAnalysis).toBeDefined();\r\n      expect(Array.isArray(owaspReport.gapAnalysis)).toBe(true);\r\n\r\n      if (owaspReport.status !== 'COMPLIANT') {\r\n        expect(owaspReport.gapAnalysis.length).toBeGreaterThan(0);\r\n        \r\n        owaspReport.gapAnalysis.forEach(gap => {\r\n          expect(gap).toHaveProperty('controlId');\r\n          expect(gap).toHaveProperty('controlName');\r\n          expect(gap).toHaveProperty('currentScore');\r\n          expect(gap).toHaveProperty('requiredScore');\r\n          expect(gap).toHaveProperty('gap');\r\n          expect(gap).toHaveProperty('priority');\r\n          expect(gap).toHaveProperty('remediation');\r\n          expect(['LOW', 'MEDIUM', 'HIGH', 'CRITICAL']).toContain(gap.priority);\r\n        });\r\n      }\r\n    });\r\n\r\n    it('should provide actionable recommendations', async () => {\r\n      expect(owaspReport.recommendations).toBeDefined();\r\n      expect(Array.isArray(owaspReport.recommendations)).toBe(true);\r\n      expect(owaspReport.recommendations.length).toBeGreaterThan(0);\r\n\r\n      owaspReport.recommendations.forEach(recommendation => {\r\n        expect(typeof recommendation).toBe('string');\r\n        expect(recommendation.length).toBeGreaterThan(0);\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('ISO 27001 Compliance Testing', () => {\r\n    let iso27001Report: ComplianceReport;\r\n\r\n    beforeEach(async () => {\r\n      iso27001Report = await complianceTestingService.executeComplianceTest('ISO_27001');\r\n    });\r\n\r\n    it('should execute ISO 27001 compliance test successfully', async () => {\r\n      expect(iso27001Report).toBeDefined();\r\n      expect(iso27001Report.standardId).toBe('ISO_27001');\r\n      expect(iso27001Report.standardName).toBe('ISO/IEC 27001');\r\n      expect(iso27001Report.requiredScore).toBe(85);\r\n    });\r\n\r\n    it('should test key ISO 27001 controls', async () => {\r\n      const expectedControls = [\r\n        'A.5.1.1', // Information Security Policy\r\n        'A.6.1.1', // Information Security Roles and Responsibilities\r\n        'A.8.1.1', // Inventory of Assets\r\n        'A.9.1.1', // Access Control Policy\r\n        'A.10.1.1' // Cryptographic Controls\r\n      ];\r\n\r\n      const controlIds = iso27001Report.controlResults.map(c => c.controlId);\r\n      expectedControls.forEach(expectedId => {\r\n        expect(controlIds).toContain(expectedId);\r\n      });\r\n    });\r\n\r\n    it('should test information security policy control', async () => {\r\n      const policyControl = iso27001Report.controlResults.find(c => c.controlId === 'A.5.1.1');\r\n      \r\n      expect(policyControl).toBeDefined();\r\n      expect(policyControl!.controlName).toBe('Information Security Policy');\r\n      expect(policyControl!.remediation).toContainEqual(expect.stringContaining('security policy'));\r\n    });\r\n\r\n    it('should test access control policy', async () => {\r\n      const accessControl = iso27001Report.controlResults.find(c => c.controlId === 'A.9.1.1');\r\n      \r\n      expect(accessControl).toBeDefined();\r\n      expect(accessControl!.controlName).toBe('Access Control Policy');\r\n      expect(accessControl!.remediation).toContainEqual(expect.stringContaining('access control'));\r\n    });\r\n\r\n    it('should have higher compliance requirements than OWASP', async () => {\r\n      expect(iso27001Report.requiredScore).toBeGreaterThanOrEqual(85);\r\n    });\r\n  });\r\n\r\n  describe('SOC 2 Compliance Testing', () => {\r\n    let soc2Report: ComplianceReport;\r\n\r\n    beforeEach(async () => {\r\n      soc2Report = await complianceTestingService.executeComplianceTest('SOC_2');\r\n    });\r\n\r\n    it('should execute SOC 2 compliance test successfully', async () => {\r\n      expect(soc2Report).toBeDefined();\r\n      expect(soc2Report.standardId).toBe('SOC_2');\r\n      expect(soc2Report.standardName).toBe('SOC 2 Type II');\r\n      expect(soc2Report.requiredScore).toBe(90);\r\n    });\r\n\r\n    it('should test SOC 2 trust service criteria', async () => {\r\n      const expectedControls = [\r\n        'CC1.1', // Control Environment\r\n        'CC2.1', // Communication and Information\r\n        'CC3.1', // Risk Assessment\r\n        'CC4.1', // Monitoring Activities\r\n        'CC5.1'  // Control Activities\r\n      ];\r\n\r\n      const controlIds = soc2Report.controlResults.map(c => c.controlId);\r\n      expectedControls.forEach(expectedId => {\r\n        expect(controlIds).toContain(expectedId);\r\n      });\r\n    });\r\n\r\n    it('should test control environment', async () => {\r\n      const controlEnv = soc2Report.controlResults.find(c => c.controlId === 'CC1.1');\r\n      \r\n      expect(controlEnv).toBeDefined();\r\n      expect(controlEnv!.controlName).toBe('Control Environment');\r\n      expect(controlEnv!.remediation).toContainEqual(expect.stringContaining('code of conduct'));\r\n    });\r\n\r\n    it('should have the highest compliance requirements', async () => {\r\n      expect(soc2Report.requiredScore).toBe(90);\r\n    });\r\n  });\r\n\r\n  describe('Crypto Trading Security Framework Compliance', () => {\r\n    let cryptoSecurityReport: ComplianceReport;\r\n\r\n    beforeEach(async () => {\r\n      cryptoSecurityReport = await complianceTestingService.executeComplianceTest('CRYPTO_TRADING_SECURITY');\r\n    });\r\n\r\n    it('should execute crypto trading security compliance test successfully', async () => {\r\n      expect(cryptoSecurityReport).toBeDefined();\r\n      expect(cryptoSecurityReport.standardId).toBe('CRYPTO_TRADING_SECURITY');\r\n      expect(cryptoSecurityReport.standardName).toBe('Crypto Trading Security Framework');\r\n      expect(cryptoSecurityReport.requiredScore).toBe(95);\r\n    });\r\n\r\n    it('should test crypto-specific security controls', async () => {\r\n      const expectedControls = [\r\n        'CTS.1.1', // API Key Security\r\n        'CTS.2.1', // Trading Algorithm Security\r\n        'CTS.3.1', // Risk Management Controls\r\n        'CTS.4.1', // Market Data Integrity\r\n        'CTS.5.1'  // System Availability\r\n      ];\r\n\r\n      const controlIds = cryptoSecurityReport.controlResults.map(c => c.controlId);\r\n      expectedControls.forEach(expectedId => {\r\n        expect(controlIds).toContain(expectedId);\r\n      });\r\n    });\r\n\r\n    it('should test API key security control', async () => {\r\n      const apiKeyControl = cryptoSecurityReport.controlResults.find(c => c.controlId === 'CTS.1.1');\r\n      \r\n      expect(apiKeyControl).toBeDefined();\r\n      expect(apiKeyControl!.controlName).toBe('API Key Security');\r\n      expect(apiKeyControl!.remediation).toContainEqual(expect.stringContaining('API keys'));\r\n    });\r\n\r\n    it('should test trading algorithm security', async () => {\r\n      const algoControl = cryptoSecurityReport.controlResults.find(c => c.controlId === 'CTS.2.1');\r\n      \r\n      expect(algoControl).toBeDefined();\r\n      expect(algoControl!.controlName).toBe('Trading Algorithm Security');\r\n      expect(algoControl!.remediation).toContainEqual(expect.stringContaining('algorithm'));\r\n    });\r\n\r\n    it('should test risk management controls', async () => {\r\n      const riskControl = cryptoSecurityReport.controlResults.find(c => c.controlId === 'CTS.3.1');\r\n      \r\n      expect(riskControl).toBeDefined();\r\n      expect(riskControl!.controlName).toBe('Risk Management Controls');\r\n      expect(riskControl!.remediation.some(item => item.toLowerCase().includes('risk'))).toBe(true);\r\n    });\r\n\r\n    it('should have the most stringent compliance requirements', async () => {\r\n      expect(cryptoSecurityReport.requiredScore).toBe(95);\r\n    });\r\n  });\r\n\r\n  describe('Vulnerability Scanner Integration', () => {\r\n    it('should execute comprehensive vulnerability scan', async () => {\r\n      const scanResult = await vulnerabilityScanner.executeComprehensiveVulnerabilityScan();\r\n      \r\n      expect(scanResult).toBeDefined();\r\n      expect(scanResult.scanId).toBeDefined();\r\n      expect(scanResult.scanType).toBe('comprehensive_scan');\r\n      expect(scanResult.status).toBe('COMPLETED');\r\n      expect(scanResult.findings).toBeDefined();\r\n      expect(Array.isArray(scanResult.findings)).toBe(true);\r\n    });\r\n\r\n    it('should scan for dependency vulnerabilities', async () => {\r\n      const scanResult = await vulnerabilityScanner.executeComprehensiveVulnerabilityScan();\r\n      \r\n      // Check if dependency scanning was performed\r\n      const dependencyFindings = scanResult.findings.filter(f => \r\n        f.type === 'DEPENDENCY_VULNERABILITY'\r\n      );\r\n      \r\n      // Should have scanned dependencies (may or may not find vulnerabilities)\r\n      expect(scanResult.findings).toBeDefined();\r\n    });\r\n\r\n    it('should scan for code vulnerabilities', async () => {\r\n      const scanResult = await vulnerabilityScanner.executeComprehensiveVulnerabilityScan();\r\n      \r\n      // Check if code scanning was performed\r\n      const codeFindings = scanResult.findings.filter(f => \r\n        ['SQL_INJECTION', 'XSS', 'COMMAND_INJECTION', 'HARDCODED_SECRET'].includes(f.type)\r\n      );\r\n      \r\n      // Code scanning should be included\r\n      expect(scanResult.findings).toBeDefined();\r\n    });\r\n\r\n    it('should scan for configuration vulnerabilities', async () => {\r\n      const scanResult = await vulnerabilityScanner.executeComprehensiveVulnerabilityScan();\r\n      \r\n      // Check if configuration scanning was performed\r\n      const configFindings = scanResult.findings.filter(f => \r\n        ['CONFIGURATION_ERROR', 'INSECURE_TRANSPORT', 'WEAK_SESSION_SECRET'].includes(f.type)\r\n      );\r\n      \r\n      // Configuration scanning should be included\r\n      expect(scanResult.findings).toBeDefined();\r\n    });\r\n\r\n    it('should provide vulnerability summary with risk scoring', async () => {\r\n      const scanResult = await vulnerabilityScanner.executeComprehensiveVulnerabilityScan();\r\n      \r\n      expect(scanResult.summary).toBeDefined();\r\n      expect(scanResult.summary.totalFindings).toBeGreaterThanOrEqual(0);\r\n      expect(scanResult.summary.riskScore).toBeGreaterThanOrEqual(0);\r\n      expect(scanResult.summary.riskScore).toBeLessThanOrEqual(100);\r\n      expect(scanResult.summary.complianceScore).toBeGreaterThanOrEqual(0);\r\n      expect(scanResult.summary.complianceScore).toBeLessThanOrEqual(100);\r\n    });\r\n\r\n    it('should provide remediation priorities', async () => {\r\n      const scanResult = await vulnerabilityScanner.executeComprehensiveVulnerabilityScan();\r\n      \r\n      expect(scanResult.summary.remediationPriority).toBeDefined();\r\n      expect(Array.isArray(scanResult.summary.remediationPriority)).toBe(true);\r\n      \r\n      if (scanResult.summary.remediationPriority.length > 0) {\r\n        scanResult.summary.remediationPriority.forEach(item => {\r\n          expect(item).toHaveProperty('id');\r\n          expect(item).toHaveProperty('priority');\r\n          expect(item).toHaveProperty('title');\r\n          expect(item).toHaveProperty('description');\r\n          expect(item).toHaveProperty('effort');\r\n          expect(item).toHaveProperty('impact');\r\n          expect(item).toHaveProperty('steps');\r\n          expect(item).toHaveProperty('estimatedTime');\r\n          expect(['CRITICAL', 'HIGH', 'MEDIUM', 'LOW']).toContain(item.priority);\r\n          expect(['LOW', 'MEDIUM', 'HIGH']).toContain(item.effort);\r\n        });\r\n      }\r\n    });\r\n  });\r\n\r\n  describe('Cross-Standard Compliance Analysis', () => {\r\n    it('should compare compliance scores across standards', async () => {\r\n      const owaspReport = await complianceTestingService.executeComplianceTest('OWASP_TOP_10');\r\n      const iso27001Report = await complianceTestingService.executeComplianceTest('ISO_27001');\r\n      const soc2Report = await complianceTestingService.executeComplianceTest('SOC_2');\r\n      const cryptoReport = await complianceTestingService.executeComplianceTest('CRYPTO_TRADING_SECURITY');\r\n\r\n      // All reports should be valid\r\n      expect(owaspReport.overallScore).toBeGreaterThanOrEqual(0);\r\n      expect(iso27001Report.overallScore).toBeGreaterThanOrEqual(0);\r\n      expect(soc2Report.overallScore).toBeGreaterThanOrEqual(0);\r\n      expect(cryptoReport.overallScore).toBeGreaterThanOrEqual(0);\r\n\r\n      // Required scores should be in ascending order of strictness\r\n      expect(owaspReport.requiredScore).toBeLessThanOrEqual(iso27001Report.requiredScore);\r\n      expect(iso27001Report.requiredScore).toBeLessThanOrEqual(soc2Report.requiredScore);\r\n      expect(soc2Report.requiredScore).toBeLessThanOrEqual(cryptoReport.requiredScore);\r\n    });\r\n\r\n    it('should identify common compliance gaps across standards', async () => {\r\n      const reports = await Promise.all([\r\n        complianceTestingService.executeComplianceTest('OWASP_TOP_10'),\r\n        complianceTestingService.executeComplianceTest('ISO_27001'),\r\n        complianceTestingService.executeComplianceTest('SOC_2'),\r\n        complianceTestingService.executeComplianceTest('CRYPTO_TRADING_SECURITY')\r\n      ]);\r\n\r\n      // Analyze common themes in gap analysis\r\n      const allGaps = reports.flatMap(report => report.gapAnalysis);\r\n      const commonGapTypes = allGaps.reduce((types, gap) => {\r\n        const type = gap.controlName.toLowerCase();\r\n        types[type] = (types[type] || 0) + 1;\r\n        return types;\r\n      }, {} as Record<string, number>);\r\n\r\n      // Should have identified some common patterns\r\n      expect(Object.keys(commonGapTypes).length).toBeGreaterThanOrEqual(0);\r\n    });\r\n\r\n    it('should provide consolidated recommendations', async () => {\r\n      const reports = await Promise.all([\r\n        complianceTestingService.executeComplianceTest('OWASP_TOP_10'),\r\n        complianceTestingService.executeComplianceTest('ISO_27001'),\r\n        complianceTestingService.executeComplianceTest('SOC_2'),\r\n        complianceTestingService.executeComplianceTest('CRYPTO_TRADING_SECURITY')\r\n      ]);\r\n\r\n      // All reports should have recommendations\r\n      reports.forEach(report => {\r\n        expect(report.recommendations).toBeDefined();\r\n        expect(Array.isArray(report.recommendations)).toBe(true);\r\n        expect(report.recommendations.length).toBeGreaterThan(0);\r\n      });\r\n\r\n      // Consolidate recommendations\r\n      const allRecommendations = reports.flatMap(report => report.recommendations);\r\n      const uniqueRecommendations = [...new Set(allRecommendations)];\r\n\r\n      expect(uniqueRecommendations.length).toBeGreaterThan(0);\r\n    });\r\n  });\r\n\r\n  describe('Compliance Reporting and Documentation', () => {\r\n    it('should generate comprehensive compliance reports', async () => {\r\n      const report = await complianceTestingService.executeComplianceTest('OWASP_TOP_10');\r\n      \r\n      // Validate report structure\r\n      expect(report).toHaveProperty('reportId');\r\n      expect(report).toHaveProperty('standardId');\r\n      expect(report).toHaveProperty('standardName');\r\n      expect(report).toHaveProperty('timestamp');\r\n      expect(report).toHaveProperty('overallScore');\r\n      expect(report).toHaveProperty('requiredScore');\r\n      expect(report).toHaveProperty('status');\r\n      expect(report).toHaveProperty('controlResults');\r\n      expect(report).toHaveProperty('gapAnalysis');\r\n      expect(report).toHaveProperty('recommendations');\r\n      expect(report).toHaveProperty('executionTime');\r\n\r\n      // Validate data types\r\n      expect(typeof report.reportId).toBe('string');\r\n      expect(typeof report.standardId).toBe('string');\r\n      expect(typeof report.standardName).toBe('string');\r\n      expect(report.timestamp instanceof Date).toBe(true);\r\n      expect(typeof report.overallScore).toBe('number');\r\n      expect(typeof report.requiredScore).toBe('number');\r\n      expect(typeof report.status).toBe('string');\r\n      expect(Array.isArray(report.controlResults)).toBe(true);\r\n      expect(Array.isArray(report.gapAnalysis)).toBe(true);\r\n      expect(Array.isArray(report.recommendations)).toBe(true);\r\n      expect(typeof report.executionTime).toBe('number');\r\n    });\r\n\r\n    it('should save compliance reports to file system', async () => {\r\n      const report = await complianceTestingService.executeComplianceTest('OWASP_TOP_10');\r\n      \r\n      // Save report to test output directory\r\n      const reportPath = path.join(testOutputDir, `compliance-report-${report.reportId}.json`);\r\n      await fs.writeFile(reportPath, JSON.stringify(report, null, 2));\r\n      \r\n      // Verify file was created\r\n      const fileExists = await fs.access(reportPath).then(() => true).catch(() => false);\r\n      expect(fileExists).toBe(true);\r\n      \r\n      // Verify file content\r\n      const savedContent = await fs.readFile(reportPath, 'utf-8');\r\n      const savedReport = JSON.parse(savedContent);\r\n      expect(savedReport.reportId).toBe(report.reportId);\r\n    });\r\n\r\n    it('should track compliance trends over time', async () => {\r\n      // Execute multiple compliance tests to simulate trend tracking\r\n      const reports = [];\r\n      \r\n      for (let i = 0; i < 3; i++) {\r\n        const report = await complianceTestingService.executeComplianceTest('OWASP_TOP_10');\r\n        reports.push(report);\r\n        \r\n        // Small delay to ensure different timestamps\r\n        await new Promise(resolve => setTimeout(resolve, 10));\r\n      }\r\n      \r\n      // Verify reports have different timestamps\r\n      const timestamps = reports.map(r => r.timestamp.getTime());\r\n      const uniqueTimestamps = new Set(timestamps);\r\n      expect(uniqueTimestamps.size).toBe(reports.length);\r\n      \r\n      // Verify all reports are for the same standard\r\n      const standardIds = reports.map(r => r.standardId);\r\n      expect(new Set(standardIds).size).toBe(1);\r\n    });\r\n  });\r\n\r\n  describe('Error Handling and Resilience', () => {\r\n    it('should handle unknown compliance standards gracefully', async () => {\r\n      await expect(\r\n        complianceTestingService.executeComplianceTest('UNKNOWN_STANDARD')\r\n      ).rejects.toThrow('Unknown compliance standard: UNKNOWN_STANDARD');\r\n    });\r\n\r\n    it('should handle test method failures gracefully', async () => {\r\n      // Mock a test method to fail\r\n      const originalMethod = (complianceTestingService as any).executeTestMethod;\r\n      (complianceTestingService as any).executeTestMethod = jest.fn()\r\n        .mockRejectedValueOnce(new Error('Test method failed'))\r\n        .mockImplementation(originalMethod);\r\n\r\n      const report = await complianceTestingService.executeComplianceTest('OWASP_TOP_10');\r\n      \r\n      // Should still complete despite individual test failures\r\n      expect(report).toBeDefined();\r\n      expect(report.controlResults.length).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('should continue testing after individual control failures', async () => {\r\n      // This test ensures that if one control test fails, others continue\r\n      const report = await complianceTestingService.executeComplianceTest('OWASP_TOP_10');\r\n      \r\n      // Should have tested all controls\r\n      expect(report.controlResults.length).toBe(10);\r\n      \r\n      // Each control should have a valid status\r\n      report.controlResults.forEach(control => {\r\n        expect(['PASS', 'FAIL', 'PARTIAL']).toContain(control.status);\r\n      });\r\n    });\r\n\r\n    it('should handle resource constraints gracefully', async () => {\r\n      // Simulate resource constraints by running multiple tests concurrently\r\n      const testPromises = [\r\n        complianceTestingService.executeComplianceTest('OWASP_TOP_10'),\r\n        complianceTestingService.executeComplianceTest('ISO_27001'),\r\n        complianceTestingService.executeComplianceTest('SOC_2'),\r\n        vulnerabilityScanner.executeComprehensiveVulnerabilityScan()\r\n      ];\r\n\r\n      const results = await Promise.all(testPromises);\r\n      \r\n      // All tests should complete successfully\r\n      expect(results).toHaveLength(4);\r\n      results.slice(0, 3).forEach(report => {\r\n        expect(report).toHaveProperty('reportId');\r\n        expect(report).toHaveProperty('overallScore');\r\n      });\r\n      \r\n      // Vulnerability scan should also complete\r\n      expect(results[3]).toHaveProperty('scanId');\r\n      expect(results[3]).toHaveProperty('status', 'COMPLETED');\r\n    });\r\n  });\r\n});"],"version":3}