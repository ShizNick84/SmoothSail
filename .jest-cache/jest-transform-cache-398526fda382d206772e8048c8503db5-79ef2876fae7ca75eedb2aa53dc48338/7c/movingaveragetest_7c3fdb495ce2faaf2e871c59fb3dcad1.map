{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\strategies\\__tests__\\moving-average.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\strategies\\__tests__\\moving-average.test.ts"],"sourcesContent":["/**\r\n * Unit Tests for Moving Average Strategy\r\n * \r\n * Comprehensive test suite covering all functionality of the MovingAverageStrategy class\r\n * including SMA/EMA calculations, crossover detection, signal generation, and edge cases.\r\n * \r\n * Requirements: 17.1, 17.3, 17.6 - Unit tests for technical indicators\r\n */\r\n\r\nimport { MovingAverageStrategy } from '../moving-average';\r\nimport { MarketData, TradingSignal, MovingAverageSignal } from '../types';\r\n\r\ndescribe('MovingAverageStrategy', () => {\r\n  let strategy: MovingAverageStrategy;\r\n  let mockMarketData: MarketData[];\r\n\r\n  beforeEach(() => {\r\n    strategy = new MovingAverageStrategy();\r\n    \r\n    // Create realistic mock market data for testing\r\n    mockMarketData = [\r\n      { symbol: 'BTC/USDT', timestamp: new Date('2024-01-01'), open: 42000, high: 42500, low: 41500, close: 42200, volume: 1000 },\r\n      { symbol: 'BTC/USDT', timestamp: new Date('2024-01-02'), open: 42200, high: 42800, low: 42000, close: 42600, volume: 1200 },\r\n      { symbol: 'BTC/USDT', timestamp: new Date('2024-01-03'), open: 42600, high: 43000, low: 42400, close: 42800, volume: 1100 },\r\n      { symbol: 'BTC/USDT', timestamp: new Date('2024-01-04'), open: 42800, high: 43200, low: 42600, close: 43000, volume: 1300 },\r\n      { symbol: 'BTC/USDT', timestamp: new Date('2024-01-05'), open: 43000, high: 43400, low: 42800, close: 43200, volume: 1400 },\r\n    ];\r\n  });\r\n\r\n  describe('calculateSMA', () => {\r\n    it('should calculate Simple Moving Average correctly', () => {\r\n      const prices = [10, 12, 14, 16, 18];\r\n      const result = strategy.calculateSMA(prices, 3);\r\n      \r\n      // SMA of last 3 prices: (14 + 16 + 18) / 3 = 16\r\n      expect(result).toBe(16);\r\n    });\r\n\r\n    it('should return null for insufficient data', () => {\r\n      const prices = [10, 12];\r\n      const result = strategy.calculateSMA(prices, 5);\r\n      \r\n      expect(result).toBeNull();\r\n    });\r\n\r\n    it('should handle single period correctly', () => {\r\n      const prices = [100];\r\n      const result = strategy.calculateSMA(prices, 1);\r\n      \r\n      expect(result).toBe(100);\r\n    });\r\n\r\n    it('should handle empty array', () => {\r\n      const prices: number[] = [];\r\n      const result = strategy.calculateSMA(prices, 3);\r\n      \r\n      expect(result).toBeNull();\r\n    });\r\n\r\n    it('should calculate SMA for exact period length', () => {\r\n      const prices = [10, 20, 30];\r\n      const result = strategy.calculateSMA(prices, 3);\r\n      \r\n      expect(result).toBe(20);\r\n    });\r\n  });\r\n\r\n  describe('calculateEMA', () => {\r\n    it('should calculate Exponential Moving Average correctly', () => {\r\n      const prices = [10, 12, 14, 16, 18];\r\n      const result = strategy.calculateEMA(prices, 3);\r\n      \r\n      // EMA calculation with multiplier 2/(3+1) = 0.5\r\n      // Starting with first price: 10\r\n      // EMA = (12 * 0.5) + (10 * 0.5) = 11\r\n      // EMA = (14 * 0.5) + (11 * 0.5) = 12.5\r\n      // EMA = (16 * 0.5) + (12.5 * 0.5) = 14.25\r\n      // EMA = (18 * 0.5) + (14.25 * 0.5) = 16.125\r\n      expect(result).toBeCloseTo(16.125, 3);\r\n    });\r\n\r\n    it('should return null for insufficient data', () => {\r\n      const prices = [10, 12];\r\n      const result = strategy.calculateEMA(prices, 5);\r\n      \r\n      expect(result).toBeNull();\r\n    });\r\n\r\n    it('should handle single price correctly', () => {\r\n      const prices = [100];\r\n      const result = strategy.calculateEMA(prices, 1);\r\n      \r\n      expect(result).toBe(100);\r\n    });\r\n\r\n    it('should be more responsive than SMA to recent price changes', () => {\r\n      const prices = [10, 10, 10, 10, 20]; // Sharp increase at end\r\n      const sma = strategy.calculateSMA(prices, 5);\r\n      const ema = strategy.calculateEMA(prices, 5);\r\n      \r\n      expect(ema).toBeGreaterThan(sma!);\r\n    });\r\n  });\r\n\r\n  describe('calculateEMACrossover', () => {\r\n    it('should calculate both fast and slow EMAs', () => {\r\n      const result = strategy.calculateEMACrossover(mockMarketData, 2, 3);\r\n      \r\n      expect(result.fastEMA).toBeDefined();\r\n      expect(result.slowEMA).toBeDefined();\r\n      expect(typeof result.fastEMA).toBe('number');\r\n      expect(typeof result.slowEMA).toBe('number');\r\n    });\r\n\r\n    it('should return null for insufficient data', () => {\r\n      const shortData = mockMarketData.slice(0, 2);\r\n      const result = strategy.calculateEMACrossover(shortData, 5, 10);\r\n      \r\n      expect(result.fastEMA).toBeNull();\r\n      expect(result.slowEMA).toBeNull();\r\n    });\r\n\r\n    it('should use default periods when not specified', () => {\r\n      const result = strategy.calculateEMACrossover(mockMarketData);\r\n      \r\n      // Should not be null even with default periods if we have enough data\r\n      // But our mock data is too short for default periods (20, 50)\r\n      expect(result.fastEMA).toBeNull();\r\n      expect(result.slowEMA).toBeNull();\r\n    });\r\n  });\r\n\r\n  describe('detectCrossover', () => {\r\n    let extendedMarketData: MarketData[];\r\n\r\n    beforeEach(() => {\r\n      // Create extended data for crossover testing\r\n      extendedMarketData = [];\r\n      for (let i = 0; i < 60; i++) {\r\n        extendedMarketData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(2024, 0, i + 1),\r\n          open: 42000 + i * 10,\r\n          high: 42500 + i * 10,\r\n          low: 41500 + i * 10,\r\n          close: 42000 + i * 10 + (i > 30 ? 100 : 0), // Price jump after day 30\r\n          volume: 1000 + Math.random() * 500\r\n        });\r\n      }\r\n    });\r\n\r\n    it('should detect golden cross (bullish crossover)', () => {\r\n      // Modify data to create a clear golden cross\r\n      const testData = [...extendedMarketData];\r\n      // Create scenario where fast EMA crosses above slow EMA\r\n      for (let i = 50; i < testData.length; i++) {\r\n        testData[i].close = testData[i].close + (i - 49) * 50; // Sharp uptrend\r\n      }\r\n\r\n      const result = strategy.detectCrossover(testData, 5, 10);\r\n      \r\n      expect(result).toBeDefined();\r\n      if (result?.crossover) {\r\n        expect(['GOLDEN_CROSS', 'NONE']).toContain(result.crossover.type);\r\n      }\r\n    });\r\n\r\n    it('should detect death cross (bearish crossover)', () => {\r\n      // Modify data to create a clear death cross\r\n      const testData = [...extendedMarketData];\r\n      // Create scenario where fast EMA crosses below slow EMA\r\n      for (let i = 50; i < testData.length; i++) {\r\n        testData[i].close = testData[i].close - (i - 49) * 50; // Sharp downtrend\r\n      }\r\n\r\n      const result = strategy.detectCrossover(testData, 5, 10);\r\n      \r\n      expect(result).toBeDefined();\r\n      if (result?.crossover) {\r\n        expect(['DEATH_CROSS', 'NONE']).toContain(result.crossover.type);\r\n      }\r\n    });\r\n\r\n    it('should return null for insufficient data', () => {\r\n      const result = strategy.detectCrossover(mockMarketData, 20, 50);\r\n      \r\n      expect(result).toBeNull();\r\n    });\r\n\r\n    it('should include volume confirmation in result', () => {\r\n      const result = strategy.detectCrossover(extendedMarketData, 5, 10);\r\n      \r\n      if (result?.crossover) {\r\n        expect(typeof result.crossover.volumeConfirmed).toBe('boolean');\r\n      }\r\n    });\r\n  });\r\n\r\n  describe('generateSignal', () => {\r\n    let extendedMarketData: MarketData[];\r\n\r\n    beforeEach(() => {\r\n      // Create data that will generate a signal\r\n      extendedMarketData = [];\r\n      for (let i = 0; i < 30; i++) {\r\n        extendedMarketData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(2024, 0, i + 1),\r\n          open: 42000,\r\n          high: 42500,\r\n          low: 41500,\r\n          close: 42000 + (i > 15 ? i * 20 : 0), // Uptrend after day 15\r\n          volume: 1000 + Math.random() * 500\r\n        });\r\n      }\r\n    });\r\n\r\n    it('should generate BUY signal for golden cross', () => {\r\n      // Create strong uptrend for golden cross\r\n      const testData = [...extendedMarketData];\r\n      for (let i = 20; i < testData.length; i++) {\r\n        testData[i].close = testData[i].close + (i - 19) * 100;\r\n        testData[i].volume = 2000; // High volume\r\n      }\r\n\r\n      const result = strategy.generateSignal(testData, 3, 7);\r\n      \r\n      if (result) {\r\n        expect(result.type).toBe('BUY');\r\n        expect(result.symbol).toBe('BTC/USDT');\r\n        expect(result.strength).toBeGreaterThan(0);\r\n        expect(result.confidence).toBeGreaterThan(0);\r\n        expect(result.indicators).toContain('EMA_3');\r\n        expect(result.indicators).toContain('EMA_7');\r\n        expect(result.reasoning).toContain('Golden Cross');\r\n      }\r\n    });\r\n\r\n    it('should generate SELL signal for death cross', () => {\r\n      // Create strong downtrend for death cross\r\n      const testData = [...extendedMarketData];\r\n      for (let i = 20; i < testData.length; i++) {\r\n        testData[i].close = testData[i].close - (i - 19) * 100;\r\n        testData[i].volume = 2000; // High volume\r\n      }\r\n\r\n      const result = strategy.generateSignal(testData, 3, 7);\r\n      \r\n      if (result) {\r\n        expect(result.type).toBe('SELL');\r\n        expect(result.reasoning).toContain('Death Cross');\r\n      }\r\n    });\r\n\r\n    it('should return null when no crossover detected', () => {\r\n      // Flat market data\r\n      const flatData = extendedMarketData.map(data => ({\r\n        ...data,\r\n        close: 42000 // Constant price\r\n      }));\r\n\r\n      const result = strategy.generateSignal(flatData, 3, 7);\r\n      \r\n      expect(result).toBeNull();\r\n    });\r\n\r\n    it('should include proper metadata in signal', () => {\r\n      const testData = [...extendedMarketData];\r\n      for (let i = 20; i < testData.length; i++) {\r\n        testData[i].close = testData[i].close + (i - 19) * 50;\r\n      }\r\n\r\n      const result = strategy.generateSignal(testData, 3, 7);\r\n      \r\n      if (result) {\r\n        expect(result.metadata).toBeDefined();\r\n        expect(result.metadata?.fastEMA).toBeDefined();\r\n        expect(result.metadata?.slowEMA).toBeDefined();\r\n        expect(result.metadata?.volumeConfirmed).toBeDefined();\r\n        expect(result.metadata?.crossoverType).toBeDefined();\r\n      }\r\n    });\r\n\r\n    it('should calculate risk-reward ratio', () => {\r\n      const testData = [...extendedMarketData];\r\n      for (let i = 20; i < testData.length; i++) {\r\n        testData[i].close = testData[i].close + (i - 19) * 50;\r\n      }\r\n\r\n      const result = strategy.generateSignal(testData, 3, 7);\r\n      \r\n      if (result) {\r\n        expect(result.riskReward).toBeGreaterThan(0);\r\n        expect(typeof result.riskReward).toBe('number');\r\n      }\r\n    });\r\n  });\r\n\r\n  describe('evaluateSignalConfidence', () => {\r\n    let mockSignal: TradingSignal;\r\n\r\n    beforeEach(() => {\r\n      mockSignal = {\r\n        id: 'test-signal',\r\n        symbol: 'BTC/USDT',\r\n        type: 'BUY',\r\n        strength: 75,\r\n        confidence: 80,\r\n        indicators: ['EMA_20', 'EMA_50'],\r\n        reasoning: 'Test signal',\r\n        riskReward: 1.5,\r\n        timestamp: new Date(),\r\n        metadata: {\r\n          volumeConfirmed: true\r\n        }\r\n      };\r\n    });\r\n\r\n    it('should evaluate signal confidence correctly', () => {\r\n      const result = strategy.evaluateSignalConfidence(mockMarketData, mockSignal);\r\n      \r\n      expect(result.overall).toBeGreaterThan(0);\r\n      expect(result.overall).toBeLessThanOrEqual(100);\r\n      expect(result.technical).toBe(75); // From signal strength\r\n      expect(result.volume).toBe(80); // High due to volume confirmation\r\n      expect(result.momentum).toBeGreaterThan(0);\r\n      expect(result.factors).toHaveLength(3);\r\n    });\r\n\r\n    it('should penalize signals without volume confirmation', () => {\r\n      mockSignal.metadata = { volumeConfirmed: false };\r\n      \r\n      const result = strategy.evaluateSignalConfidence(mockMarketData, mockSignal);\r\n      \r\n      expect(result.volume).toBe(40); // Lower due to no volume confirmation\r\n    });\r\n\r\n    it('should include descriptive factors', () => {\r\n      const result = strategy.evaluateSignalConfidence(mockMarketData, mockSignal);\r\n      \r\n      expect(result.factors[0]).toContain('EMA crossover strength');\r\n      expect(result.factors[1]).toContain('Volume confirmation');\r\n      expect(result.factors[2]).toContain('Price momentum');\r\n    });\r\n  });\r\n\r\n  describe('Edge Cases and Error Handling', () => {\r\n    it('should handle zero prices gracefully', () => {\r\n      const zeroPrices = [0, 0, 0, 0, 0];\r\n      const smaResult = strategy.calculateSMA(zeroPrices, 3);\r\n      const emaResult = strategy.calculateEMA(zeroPrices, 3);\r\n      \r\n      expect(smaResult).toBe(0);\r\n      expect(emaResult).toBe(0);\r\n    });\r\n\r\n    it('should handle negative prices', () => {\r\n      const negativePrices = [-10, -5, 0, 5, 10];\r\n      const smaResult = strategy.calculateSMA(negativePrices, 5);\r\n      const emaResult = strategy.calculateEMA(negativePrices, 5);\r\n      \r\n      expect(smaResult).toBe(0); // Average of -10 to 10\r\n      expect(emaResult).toBeDefined();\r\n    });\r\n\r\n    it('should handle very large numbers', () => {\r\n      const largePrices = [1e10, 1e10 + 1, 1e10 + 2, 1e10 + 3, 1e10 + 4];\r\n      const result = strategy.calculateSMA(largePrices, 3);\r\n      \r\n      expect(result).toBeCloseTo(1e10 + 3, -8); // Should handle precision\r\n    });\r\n\r\n    it('should handle market data with missing volume', () => {\r\n      const dataWithoutVolume = mockMarketData.map(data => ({\r\n        ...data,\r\n        volume: 0\r\n      }));\r\n\r\n      const result = strategy.generateSignal(dataWithoutVolume, 2, 3);\r\n      \r\n      // Should not crash, may return null or signal without volume confirmation\r\n      expect(result === null || typeof result === 'object').toBe(true);\r\n    });\r\n\r\n    it('should handle identical consecutive prices', () => {\r\n      const flatPrices = [100, 100, 100, 100, 100];\r\n      const smaResult = strategy.calculateSMA(flatPrices, 3);\r\n      const emaResult = strategy.calculateEMA(flatPrices, 3);\r\n      \r\n      expect(smaResult).toBe(100);\r\n      expect(emaResult).toBe(100);\r\n    });\r\n  });\r\n\r\n  describe('Performance and Optimization', () => {\r\n    it('should handle large datasets efficiently', () => {\r\n      // Create large dataset\r\n      const largeDataset: MarketData[] = [];\r\n      for (let i = 0; i < 1000; i++) {\r\n        largeDataset.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(2024, 0, i + 1),\r\n          open: 42000 + Math.random() * 1000,\r\n          high: 42500 + Math.random() * 1000,\r\n          low: 41500 + Math.random() * 1000,\r\n          close: 42000 + Math.random() * 1000,\r\n          volume: 1000 + Math.random() * 500\r\n        });\r\n      }\r\n\r\n      const startTime = Date.now();\r\n      const result = strategy.generateSignal(largeDataset, 20, 50);\r\n      const endTime = Date.now();\r\n\r\n      // Should complete within reasonable time (less than 100ms)\r\n      expect(endTime - startTime).toBeLessThan(100);\r\n    });\r\n\r\n    it('should not modify input data', () => {\r\n      const originalData = [...mockMarketData];\r\n      strategy.generateSignal(mockMarketData, 2, 3);\r\n      \r\n      expect(mockMarketData).toEqual(originalData);\r\n    });\r\n  });\r\n});"],"version":3}