a9cc60468344b0eedcb00aabab654423
"use strict";

/**
 * =============================================================================
 * HISTORICAL DATA FETCHER - REAL MARKET DATA ONLY
 * =============================================================================
 *
 * This module fetches and validates historical market data from Gate.io API
 * for backtesting purposes. CRITICAL: NO MOCK DATA ALLOWED - only real
 * historical market data is used to ensure accurate backtesting results.
 *
 * SECURITY FEATURES:
 * - Data integrity verification with cryptographic hashes
 * - Comprehensive data validation and gap detection
 * - Rate limiting and API health monitoring
 * - Audit logging for all data fetching operations
 *
 * @author AI Crypto Trading System
 * @version 1.0.0
 * @license PROPRIETARY
 * =============================================================================
 */
/* istanbul ignore next */
function cov_1xj8r7cf0m() {
  var path = "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\backtesting\\historical-data-fetcher.ts";
  var hash = "5b04a6e6208eb78aef2fcfa253f26e5c20de2c10";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\backtesting\\historical-data-fetcher.ts",
    statementMap: {
      "0": {
        start: {
          line: 22,
          column: 22
        },
        end: {
          line: 24,
          column: 1
        }
      },
      "1": {
        start: {
          line: 23,
          column: 4
        },
        end: {
          line: 23,
          column: 62
        }
      },
      "2": {
        start: {
          line: 25,
          column: 0
        },
        end: {
          line: 25,
          column: 62
        }
      },
      "3": {
        start: {
          line: 26,
          column: 0
        },
        end: {
          line: 26,
          column: 39
        }
      },
      "4": {
        start: {
          line: 27,
          column: 17
        },
        end: {
          line: 27,
          column: 51
        }
      },
      "5": {
        start: {
          line: 28,
          column: 17
        },
        end: {
          line: 28,
          column: 49
        }
      },
      "6": {
        start: {
          line: 29,
          column: 24
        },
        end: {
          line: 29,
          column: 59
        }
      },
      "7": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 38,
          column: 41
        }
      },
      "8": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 63
        }
      },
      "9": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 31
        }
      },
      "10": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 41,
          column: 88
        }
      },
      "11": {
        start: {
          line: 48,
          column: 26
        },
        end: {
          line: 48,
          column: 36
        }
      },
      "12": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 31
        }
      },
      "13": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 128,
          column: 9
        }
      },
      "14": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 51,
          column: 159
        }
      },
      "15": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 45
        }
      },
      "16": {
        start: {
          line: 55,
          column: 28
        },
        end: {
          line: 55,
          column: 57
        }
      },
      "17": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 56,
          column: 88
        }
      },
      "18": {
        start: {
          line: 58,
          column: 28
        },
        end: {
          line: 58,
          column: 30
        }
      },
      "19": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 84,
          column: 13
        }
      },
      "20": {
        start: {
          line: 59,
          column: 25
        },
        end: {
          line: 59,
          column: 26
        }
      },
      "21": {
        start: {
          line: 60,
          column: 30
        },
        end: {
          line: 60,
          column: 40
        }
      },
      "22": {
        start: {
          line: 61,
          column: 16
        },
        end: {
          line: 61,
          column: 145
        }
      },
      "23": {
        start: {
          line: 62,
          column: 16
        },
        end: {
          line: 83,
          column: 17
        }
      },
      "24": {
        start: {
          line: 63,
          column: 38
        },
        end: {
          line: 63,
          column: 115
        }
      },
      "25": {
        start: {
          line: 64,
          column: 20
        },
        end: {
          line: 64,
          column: 47
        }
      },
      "26": {
        start: {
          line: 65,
          column: 20
        },
        end: {
          line: 65,
          column: 62
        }
      },
      "27": {
        start: {
          line: 67,
          column: 20
        },
        end: {
          line: 69,
          column: 21
        }
      },
      "28": {
        start: {
          line: 68,
          column: 24
        },
        end: {
          line: 68,
          column: 47
        }
      },
      "29": {
        start: {
          line: 72,
          column: 20
        },
        end: {
          line: 72,
          column: 86
        }
      },
      "30": {
        start: {
          line: 73,
          column: 20
        },
        end: {
          line: 73,
          column: 58
        }
      },
      "31": {
        start: {
          line: 75,
          column: 20
        },
        end: {
          line: 82,
          column: 21
        }
      },
      "32": {
        start: {
          line: 76,
          column: 24
        },
        end: {
          line: 76,
          column: 124
        }
      },
      "33": {
        start: {
          line: 77,
          column: 24
        },
        end: {
          line: 77,
          column: 28
        }
      },
      "34": {
        start: {
          line: 78,
          column: 24
        },
        end: {
          line: 78,
          column: 47
        }
      },
      "35": {
        start: {
          line: 81,
          column: 24
        },
        end: {
          line: 81,
          column: 100
        }
      },
      "36": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 86,
          column: 82
        }
      },
      "37": {
        start: {
          line: 86,
          column: 35
        },
        end: {
          line: 86,
          column: 80
        }
      },
      "38": {
        start: {
          line: 88,
          column: 31
        },
        end: {
          line: 88,
          column: 61
        }
      },
      "39": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 89,
          column: 88
        }
      },
      "40": {
        start: {
          line: 91,
          column: 34
        },
        end: {
          line: 93,
          column: 28
        }
      },
      "41": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 72
        }
      },
      "42": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 97
        }
      },
      "43": {
        start: {
          line: 96,
          column: 77
        },
        end: {
          line: 96,
          column: 88
        }
      },
      "44": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 97,
          column: 72
        }
      },
      "45": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 98,
          column: 126
        }
      },
      "46": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 110,
          column: 15
        }
      },
      "47": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 111,
          column: 127
        }
      },
      "48": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 112,
          column: 79
        }
      },
      "49": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 113,
          column: 33
        }
      },
      "50": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 116,
          column: 79
        }
      },
      "51": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 126,
          column: 15
        }
      },
      "52": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 127,
          column: 24
        }
      },
      "53": {
        start: {
          line: 135,
          column: 29
        },
        end: {
          line: 135,
          column: 124
        }
      },
      "54": {
        start: {
          line: 136,
          column: 25
        },
        end: {
          line: 136,
          column: 68
        }
      },
      "55": {
        start: {
          line: 137,
          column: 28
        },
        end: {
          line: 145,
          column: 9
        }
      },
      "56": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 146,
          column: 53
        }
      },
      "57": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 152,
          column: 81
        }
      },
      "58": {
        start: {
          line: 153,
          column: 27
        },
        end: {
          line: 162,
          column: 9
        }
      },
      "59": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 167,
          column: 9
        }
      },
      "60": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 165,
          column: 39
        }
      },
      "61": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 166,
          column: 120
        }
      },
      "62": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 178,
          column: 9
        }
      },
      "63": {
        start: {
          line: 169,
          column: 21
        },
        end: {
          line: 169,
          column: 22
        }
      },
      "64": {
        start: {
          line: 170,
          column: 26
        },
        end: {
          line: 170,
          column: 33
        }
      },
      "65": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 177,
          column: 13
        }
      },
      "66": {
        start: {
          line: 172,
          column: 16
        },
        end: {
          line: 172,
          column: 41
        }
      },
      "67": {
        start: {
          line: 175,
          column: 16
        },
        end: {
          line: 175,
          column: 43
        }
      },
      "68": {
        start: {
          line: 176,
          column: 16
        },
        end: {
          line: 176,
          column: 111
        }
      },
      "69": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 180,
          column: 89
        }
      },
      "70": {
        start: {
          line: 182,
          column: 29
        },
        end: {
          line: 182,
          column: 83
        }
      },
      "71": {
        start: {
          line: 182,
          column: 59
        },
        end: {
          line: 182,
          column: 82
        }
      },
      "72": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 186,
          column: 9
        }
      },
      "73": {
        start: {
          line: 184,
          column: 12
        },
        end: {
          line: 184,
          column: 39
        }
      },
      "74": {
        start: {
          line: 185,
          column: 12
        },
        end: {
          line: 185,
          column: 90
        }
      },
      "75": {
        start: {
          line: 188,
          column: 8
        },
        end: {
          line: 188,
          column: 77
        }
      },
      "76": {
        start: {
          line: 190,
          column: 31
        },
        end: {
          line: 190,
          column: 93
        }
      },
      "77": {
        start: {
          line: 190,
          column: 48
        },
        end: {
          line: 190,
          column: 85
        }
      },
      "78": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 194,
          column: 9
        }
      },
      "79": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 192,
          column: 39
        }
      },
      "80": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 193,
          column: 108
        }
      },
      "81": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 195,
          column: 105
        }
      },
      "82": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 201,
          column: 11
        }
      },
      "83": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 202,
          column: 26
        }
      },
      "84": {
        start: {
          line: 208,
          column: 8
        },
        end: {
          line: 210,
          column: 9
        }
      },
      "85": {
        start: {
          line: 209,
          column: 12
        },
        end: {
          line: 209,
          column: 50
        }
      },
      "86": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 213,
          column: 9
        }
      },
      "87": {
        start: {
          line: 212,
          column: 12
        },
        end: {
          line: 212,
          column: 66
        }
      },
      "88": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 216,
          column: 9
        }
      },
      "89": {
        start: {
          line: 215,
          column: 12
        },
        end: {
          line: 215,
          column: 64
        }
      },
      "90": {
        start: {
          line: 217,
          column: 31
        },
        end: {
          line: 217,
          column: 34
        }
      },
      "91": {
        start: {
          line: 218,
          column: 29
        },
        end: {
          line: 218,
          column: 108
        }
      },
      "92": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 221,
          column: 9
        }
      },
      "93": {
        start: {
          line: 220,
          column: 12
        },
        end: {
          line: 220,
          column: 99
        }
      },
      "94": {
        start: {
          line: 222,
          column: 8
        },
        end: {
          line: 224,
          column: 9
        }
      },
      "95": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 223,
          column: 69
        }
      },
      "96": {
        start: {
          line: 230,
          column: 24
        },
        end: {
          line: 230,
          column: 26
        }
      },
      "97": {
        start: {
          line: 231,
          column: 27
        },
        end: {
          line: 231,
          column: 72
        }
      },
      "98": {
        start: {
          line: 232,
          column: 30
        },
        end: {
          line: 232,
          column: 59
        }
      },
      "99": {
        start: {
          line: 233,
          column: 27
        },
        end: {
          line: 233,
          column: 53
        }
      },
      "100": {
        start: {
          line: 234,
          column: 8
        },
        end: {
          line: 241,
          column: 9
        }
      },
      "101": {
        start: {
          line: 235,
          column: 31
        },
        end: {
          line: 235,
          column: 115
        }
      },
      "102": {
        start: {
          line: 236,
          column: 12
        },
        end: {
          line: 239,
          column: 15
        }
      },
      "103": {
        start: {
          line: 240,
          column: 12
        },
        end: {
          line: 240,
          column: 71
        }
      },
      "104": {
        start: {
          line: 242,
          column: 8
        },
        end: {
          line: 242,
          column: 23
        }
      },
      "105": {
        start: {
          line: 248,
          column: 8
        },
        end: {
          line: 248,
          column: 45
        }
      },
      "106": {
        start: {
          line: 249,
          column: 8
        },
        end: {
          line: 290,
          column: 9
        }
      },
      "107": {
        start: {
          line: 251,
          column: 31
        },
        end: {
          line: 251,
          column: 55
        }
      },
      "108": {
        start: {
          line: 252,
          column: 25
        },
        end: {
          line: 252,
          column: 63
        }
      },
      "109": {
        start: {
          line: 253,
          column: 23
        },
        end: {
          line: 253,
          column: 59
        }
      },
      "110": {
        start: {
          line: 255,
          column: 29
        },
        end: {
          line: 266,
          column: 14
        }
      },
      "111": {
        start: {
          line: 268,
          column: 35
        },
        end: {
          line: 283,
          column: 14
        }
      },
      "112": {
        start: {
          line: 269,
          column: 35
        },
        end: {
          line: 281,
          column: 17
        }
      },
      "113": {
        start: {
          line: 282,
          column: 16
        },
        end: {
          line: 282,
          column: 34
        }
      },
      "114": {
        start: {
          line: 284,
          column: 12
        },
        end: {
          line: 284,
          column: 113
        }
      },
      "115": {
        start: {
          line: 285,
          column: 12
        },
        end: {
          line: 285,
          column: 34
        }
      },
      "116": {
        start: {
          line: 288,
          column: 12
        },
        end: {
          line: 288,
          column: 83
        }
      },
      "117": {
        start: {
          line: 289,
          column: 12
        },
        end: {
          line: 289,
          column: 24
        }
      },
      "118": {
        start: {
          line: 296,
          column: 21
        },
        end: {
          line: 296,
          column: 30
        }
      },
      "119": {
        start: {
          line: 297,
          column: 23
        },
        end: {
          line: 297,
          column: 25
        }
      },
      "120": {
        start: {
          line: 298,
          column: 8
        },
        end: {
          line: 304,
          column: 9
        }
      },
      "121": {
        start: {
          line: 299,
          column: 24
        },
        end: {
          line: 299,
          column: 70
        }
      },
      "122": {
        start: {
          line: 300,
          column: 12
        },
        end: {
          line: 303,
          column: 13
        }
      },
      "123": {
        start: {
          line: 301,
          column: 16
        },
        end: {
          line: 301,
          column: 30
        }
      },
      "124": {
        start: {
          line: 302,
          column: 16
        },
        end: {
          line: 302,
          column: 35
        }
      },
      "125": {
        start: {
          line: 305,
          column: 8
        },
        end: {
          line: 305,
          column: 22
        }
      },
      "126": {
        start: {
          line: 311,
          column: 8
        },
        end: {
          line: 311,
          column: 64
        }
      },
      "127": {
        start: {
          line: 312,
          column: 30
        },
        end: {
          line: 312,
          column: 32
        }
      },
      "128": {
        start: {
          line: 313,
          column: 8
        },
        end: {
          line: 337,
          column: 9
        }
      },
      "129": {
        start: {
          line: 315,
          column: 33
        },
        end: {
          line: 323,
          column: 14
        }
      },
      "130": {
        start: {
          line: 324,
          column: 12
        },
        end: {
          line: 336,
          column: 13
        }
      },
      "131": {
        start: {
          line: 325,
          column: 16
        },
        end: {
          line: 328,
          column: 19
        }
      },
      "132": {
        start: {
          line: 331,
          column: 16
        },
        end: {
          line: 331,
          column: 127
        }
      },
      "133": {
        start: {
          line: 332,
          column: 16
        },
        end: {
          line: 335,
          column: 19
        }
      },
      "134": {
        start: {
          line: 338,
          column: 8
        },
        end: {
          line: 338,
          column: 150
        }
      },
      "135": {
        start: {
          line: 338,
          column: 97
        },
        end: {
          line: 338,
          column: 108
        }
      },
      "136": {
        start: {
          line: 339,
          column: 8
        },
        end: {
          line: 339,
          column: 29
        }
      },
      "137": {
        start: {
          line: 345,
          column: 27
        },
        end: {
          line: 345,
          column: 125
        }
      },
      "138": {
        start: {
          line: 346,
          column: 8
        },
        end: {
          line: 346,
          column: 86
        }
      },
      "139": {
        start: {
          line: 353,
          column: 8
        },
        end: {
          line: 355,
          column: 9
        }
      },
      "140": {
        start: {
          line: 354,
          column: 12
        },
        end: {
          line: 354,
          column: 25
        }
      },
      "141": {
        start: {
          line: 357,
          column: 8
        },
        end: {
          line: 360,
          column: 9
        }
      },
      "142": {
        start: {
          line: 359,
          column: 12
        },
        end: {
          line: 359,
          column: 25
        }
      },
      "143": {
        start: {
          line: 362,
          column: 8
        },
        end: {
          line: 364,
          column: 9
        }
      },
      "144": {
        start: {
          line: 363,
          column: 12
        },
        end: {
          line: 363,
          column: 25
        }
      },
      "145": {
        start: {
          line: 366,
          column: 8
        },
        end: {
          line: 368,
          column: 9
        }
      },
      "146": {
        start: {
          line: 367,
          column: 12
        },
        end: {
          line: 367,
          column: 25
        }
      },
      "147": {
        start: {
          line: 369,
          column: 8
        },
        end: {
          line: 369,
          column: 20
        }
      },
      "148": {
        start: {
          line: 375,
          column: 21
        },
        end: {
          line: 375,
          column: 23
        }
      },
      "149": {
        start: {
          line: 376,
          column: 8
        },
        end: {
          line: 391,
          column: 9
        }
      },
      "150": {
        start: {
          line: 376,
          column: 21
        },
        end: {
          line: 376,
          column: 22
        }
      },
      "151": {
        start: {
          line: 377,
          column: 29
        },
        end: {
          line: 377,
          column: 60
        }
      },
      "152": {
        start: {
          line: 378,
          column: 29
        },
        end: {
          line: 378,
          column: 56
        }
      },
      "153": {
        start: {
          line: 379,
          column: 31
        },
        end: {
          line: 379,
          column: 66
        }
      },
      "154": {
        start: {
          line: 380,
          column: 12
        },
        end: {
          line: 390,
          column: 13
        }
      },
      "155": {
        start: {
          line: 381,
          column: 33
        },
        end: {
          line: 382,
          column: 69
        }
      },
      "156": {
        start: {
          line: 383,
          column: 16
        },
        end: {
          line: 389,
          column: 19
        }
      },
      "157": {
        start: {
          line: 392,
          column: 8
        },
        end: {
          line: 392,
          column: 20
        }
      },
      "158": {
        start: {
          line: 398,
          column: 8
        },
        end: {
          line: 399,
          column: 21
        }
      },
      "159": {
        start: {
          line: 399,
          column: 12
        },
        end: {
          line: 399,
          column: 21
        }
      },
      "160": {
        start: {
          line: 400,
          column: 27
        },
        end: {
          line: 400,
          column: 74
        }
      },
      "161": {
        start: {
          line: 401,
          column: 27
        },
        end: {
          line: 401,
          column: 70
        }
      },
      "162": {
        start: {
          line: 402,
          column: 29
        },
        end: {
          line: 402,
          column: 74
        }
      },
      "163": {
        start: {
          line: 403,
          column: 8
        },
        end: {
          line: 403,
          column: 75
        }
      },
      "164": {
        start: {
          line: 409,
          column: 8
        },
        end: {
          line: 410,
          column: 24
        }
      },
      "165": {
        start: {
          line: 410,
          column: 12
        },
        end: {
          line: 410,
          column: 24
        }
      },
      "166": {
        start: {
          line: 411,
          column: 8
        },
        end: {
          line: 412,
          column: 24
        }
      },
      "167": {
        start: {
          line: 412,
          column: 12
        },
        end: {
          line: 412,
          column: 24
        }
      },
      "168": {
        start: {
          line: 413,
          column: 8
        },
        end: {
          line: 414,
          column: 25
        }
      },
      "169": {
        start: {
          line: 414,
          column: 12
        },
        end: {
          line: 414,
          column: 25
        }
      },
      "170": {
        start: {
          line: 415,
          column: 8
        },
        end: {
          line: 416,
          column: 24
        }
      },
      "171": {
        start: {
          line: 416,
          column: 12
        },
        end: {
          line: 416,
          column: 24
        }
      },
      "172": {
        start: {
          line: 417,
          column: 8
        },
        end: {
          line: 417,
          column: 20
        }
      },
      "173": {
        start: {
          line: 423,
          column: 26
        },
        end: {
          line: 432,
          column: 9
        }
      },
      "174": {
        start: {
          line: 433,
          column: 8
        },
        end: {
          line: 433,
          column: 35
        }
      },
      "175": {
        start: {
          line: 439,
          column: 8
        },
        end: {
          line: 449,
          column: 10
        }
      },
      "176": {
        start: {
          line: 455,
          column: 8
        },
        end: {
          line: 455,
          column: 63
        }
      },
      "177": {
        start: {
          line: 455,
          column: 38
        },
        end: {
          line: 455,
          column: 61
        }
      },
      "178": {
        start: {
          line: 461,
          column: 8
        },
        end: {
          line: 461,
          column: 43
        }
      },
      "179": {
        start: {
          line: 464,
          column: 0
        },
        end: {
          line: 464,
          column: 54
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 22,
            column: 56
          },
          end: {
            line: 22,
            column: 57
          }
        },
        loc: {
          start: {
            line: 22,
            column: 71
          },
          end: {
            line: 24,
            column: 1
          }
        },
        line: 22
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 37,
            column: 4
          },
          end: {
            line: 37,
            column: 5
          }
        },
        loc: {
          start: {
            line: 37,
            column: 30
          },
          end: {
            line: 42,
            column: 5
          }
        },
        line: 37
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 47,
            column: 4
          },
          end: {
            line: 47,
            column: 5
          }
        },
        loc: {
          start: {
            line: 47,
            column: 38
          },
          end: {
            line: 129,
            column: 5
          }
        },
        line: 47
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 86,
            column: 25
          },
          end: {
            line: 86,
            column: 26
          }
        },
        loc: {
          start: {
            line: 86,
            column: 35
          },
          end: {
            line: 86,
            column: 80
          }
        },
        line: 86
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 96,
            column: 72
          },
          end: {
            line: 96,
            column: 73
          }
        },
        loc: {
          start: {
            line: 96,
            column: 77
          },
          end: {
            line: 96,
            column: 88
          }
        },
        line: 96
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 133,
            column: 4
          },
          end: {
            line: 133,
            column: 5
          }
        },
        loc: {
          start: {
            line: 133,
            column: 43
          },
          end: {
            line: 147,
            column: 5
          }
        },
        line: 133
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 151,
            column: 4
          },
          end: {
            line: 151,
            column: 5
          }
        },
        loc: {
          start: {
            line: 151,
            column: 47
          },
          end: {
            line: 203,
            column: 5
          }
        },
        line: 151
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 182,
            column: 52
          },
          end: {
            line: 182,
            column: 53
          }
        },
        loc: {
          start: {
            line: 182,
            column: 59
          },
          end: {
            line: 182,
            column: 82
          }
        },
        line: 182
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 190,
            column: 43
          },
          end: {
            line: 190,
            column: 44
          }
        },
        loc: {
          start: {
            line: 190,
            column: 48
          },
          end: {
            line: 190,
            column: 85
          }
        },
        line: 190
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 207,
            column: 4
          },
          end: {
            line: 207,
            column: 5
          }
        },
        loc: {
          start: {
            line: 207,
            column: 32
          },
          end: {
            line: 225,
            column: 5
          }
        },
        line: 207
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 229,
            column: 4
          },
          end: {
            line: 229,
            column: 5
          }
        },
        loc: {
          start: {
            line: 229,
            column: 29
          },
          end: {
            line: 243,
            column: 5
          }
        },
        line: 229
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 247,
            column: 4
          },
          end: {
            line: 247,
            column: 5
          }
        },
        loc: {
          start: {
            line: 247,
            column: 59
          },
          end: {
            line: 291,
            column: 5
          }
        },
        line: 247
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 268,
            column: 48
          },
          end: {
            line: 268,
            column: 49
          }
        },
        loc: {
          start: {
            line: 268,
            column: 60
          },
          end: {
            line: 283,
            column: 13
          }
        },
        line: 268
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 295,
            column: 4
          },
          end: {
            line: 295,
            column: 5
          }
        },
        loc: {
          start: {
            line: 295,
            column: 27
          },
          end: {
            line: 306,
            column: 5
          }
        },
        line: 295
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 310,
            column: 4
          },
          end: {
            line: 310,
            column: 5
          }
        },
        loc: {
          start: {
            line: 310,
            column: 38
          },
          end: {
            line: 340,
            column: 5
          }
        },
        line: 310
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 338,
            column: 92
          },
          end: {
            line: 338,
            column: 93
          }
        },
        loc: {
          start: {
            line: 338,
            column: 97
          },
          end: {
            line: 338,
            column: 108
          }
        },
        line: 338
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 344,
            column: 4
          },
          end: {
            line: 344,
            column: 5
          }
        },
        loc: {
          start: {
            line: 344,
            column: 30
          },
          end: {
            line: 347,
            column: 5
          }
        },
        line: 344
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 351,
            column: 4
          },
          end: {
            line: 351,
            column: 5
          }
        },
        loc: {
          start: {
            line: 351,
            column: 28
          },
          end: {
            line: 370,
            column: 5
          }
        },
        line: 351
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 374,
            column: 4
          },
          end: {
            line: 374,
            column: 5
          }
        },
        loc: {
          start: {
            line: 374,
            column: 40
          },
          end: {
            line: 393,
            column: 5
          }
        },
        line: 374
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 397,
            column: 4
          },
          end: {
            line: 397,
            column: 5
          }
        },
        loc: {
          start: {
            line: 397,
            column: 40
          },
          end: {
            line: 404,
            column: 5
          }
        },
        line: 397
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 408,
            column: 4
          },
          end: {
            line: 408,
            column: 5
          }
        },
        loc: {
          start: {
            line: 408,
            column: 43
          },
          end: {
            line: 418,
            column: 5
          }
        },
        line: 408
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 422,
            column: 4
          },
          end: {
            line: 422,
            column: 5
          }
        },
        loc: {
          start: {
            line: 422,
            column: 38
          },
          end: {
            line: 434,
            column: 5
          }
        },
        line: 422
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 438,
            column: 4
          },
          end: {
            line: 438,
            column: 5
          }
        },
        loc: {
          start: {
            line: 438,
            column: 22
          },
          end: {
            line: 450,
            column: 5
          }
        },
        line: 438
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 454,
            column: 4
          },
          end: {
            line: 454,
            column: 5
          }
        },
        loc: {
          start: {
            line: 454,
            column: 14
          },
          end: {
            line: 456,
            column: 5
          }
        },
        line: 454
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 455,
            column: 27
          },
          end: {
            line: 455,
            column: 28
          }
        },
        loc: {
          start: {
            line: 455,
            column: 38
          },
          end: {
            line: 455,
            column: 61
          }
        },
        line: 455
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 460,
            column: 4
          },
          end: {
            line: 460,
            column: 5
          }
        },
        loc: {
          start: {
            line: 460,
            column: 25
          },
          end: {
            line: 462,
            column: 5
          }
        },
        line: 460
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 22,
            column: 22
          },
          end: {
            line: 24,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 22,
            column: 23
          },
          end: {
            line: 22,
            column: 27
          }
        }, {
          start: {
            line: 22,
            column: 31
          },
          end: {
            line: 22,
            column: 51
          }
        }, {
          start: {
            line: 22,
            column: 56
          },
          end: {
            line: 24,
            column: 1
          }
        }],
        line: 22
      },
      "1": {
        loc: {
          start: {
            line: 23,
            column: 11
          },
          end: {
            line: 23,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 23,
            column: 37
          },
          end: {
            line: 23,
            column: 40
          }
        }, {
          start: {
            line: 23,
            column: 43
          },
          end: {
            line: 23,
            column: 61
          }
        }],
        line: 23
      },
      "2": {
        loc: {
          start: {
            line: 23,
            column: 12
          },
          end: {
            line: 23,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 23,
            column: 12
          },
          end: {
            line: 23,
            column: 15
          }
        }, {
          start: {
            line: 23,
            column: 19
          },
          end: {
            line: 23,
            column: 33
          }
        }],
        line: 23
      },
      "3": {
        loc: {
          start: {
            line: 67,
            column: 20
          },
          end: {
            line: 69,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 67,
            column: 20
          },
          end: {
            line: 69,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 67
      },
      "4": {
        loc: {
          start: {
            line: 75,
            column: 20
          },
          end: {
            line: 82,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 75,
            column: 20
          },
          end: {
            line: 82,
            column: 21
          }
        }, {
          start: {
            line: 80,
            column: 25
          },
          end: {
            line: 82,
            column: 21
          }
        }],
        line: 75
      },
      "5": {
        loc: {
          start: {
            line: 91,
            column: 34
          },
          end: {
            line: 93,
            column: 28
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 92,
            column: 18
          },
          end: {
            line: 92,
            column: 62
          }
        }, {
          start: {
            line: 93,
            column: 18
          },
          end: {
            line: 93,
            column: 28
          }
        }],
        line: 91
      },
      "6": {
        loc: {
          start: {
            line: 164,
            column: 8
          },
          end: {
            line: 167,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 164,
            column: 8
          },
          end: {
            line: 167,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 164
      },
      "7": {
        loc: {
          start: {
            line: 171,
            column: 12
          },
          end: {
            line: 177,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 171,
            column: 12
          },
          end: {
            line: 177,
            column: 13
          }
        }, {
          start: {
            line: 174,
            column: 17
          },
          end: {
            line: 177,
            column: 13
          }
        }],
        line: 171
      },
      "8": {
        loc: {
          start: {
            line: 183,
            column: 8
          },
          end: {
            line: 186,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 183,
            column: 8
          },
          end: {
            line: 186,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 183
      },
      "9": {
        loc: {
          start: {
            line: 190,
            column: 48
          },
          end: {
            line: 190,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 190,
            column: 48
          },
          end: {
            line: 190,
            column: 70
          }
        }, {
          start: {
            line: 190,
            column: 74
          },
          end: {
            line: 190,
            column: 85
          }
        }],
        line: 190
      },
      "10": {
        loc: {
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 194,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 194,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 191
      },
      "11": {
        loc: {
          start: {
            line: 191,
            column: 12
          },
          end: {
            line: 191,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 191,
            column: 12
          },
          end: {
            line: 191,
            column: 49
          }
        }, {
          start: {
            line: 191,
            column: 53
          },
          end: {
            line: 191,
            column: 81
          }
        }],
        line: 191
      },
      "12": {
        loc: {
          start: {
            line: 195,
            column: 61
          },
          end: {
            line: 195,
            column: 101
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 195,
            column: 82
          },
          end: {
            line: 195,
            column: 89
          }
        }, {
          start: {
            line: 195,
            column: 92
          },
          end: {
            line: 195,
            column: 101
          }
        }],
        line: 195
      },
      "13": {
        loc: {
          start: {
            line: 208,
            column: 8
          },
          end: {
            line: 210,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 208,
            column: 8
          },
          end: {
            line: 210,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 208
      },
      "14": {
        loc: {
          start: {
            line: 208,
            column: 12
          },
          end: {
            line: 208,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 208,
            column: 12
          },
          end: {
            line: 208,
            column: 26
          }
        }, {
          start: {
            line: 208,
            column: 30
          },
          end: {
            line: 208,
            column: 57
          }
        }],
        line: 208
      },
      "15": {
        loc: {
          start: {
            line: 211,
            column: 8
          },
          end: {
            line: 213,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 211,
            column: 8
          },
          end: {
            line: 213,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 211
      },
      "16": {
        loc: {
          start: {
            line: 214,
            column: 8
          },
          end: {
            line: 216,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 214,
            column: 8
          },
          end: {
            line: 216,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 214
      },
      "17": {
        loc: {
          start: {
            line: 219,
            column: 8
          },
          end: {
            line: 221,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 219,
            column: 8
          },
          end: {
            line: 221,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 219
      },
      "18": {
        loc: {
          start: {
            line: 222,
            column: 8
          },
          end: {
            line: 224,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 222,
            column: 8
          },
          end: {
            line: 224,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 222
      },
      "19": {
        loc: {
          start: {
            line: 222,
            column: 12
          },
          end: {
            line: 222,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 222,
            column: 12
          },
          end: {
            line: 222,
            column: 33
          }
        }, {
          start: {
            line: 222,
            column: 37
          },
          end: {
            line: 222,
            column: 60
          }
        }],
        line: 222
      },
      "20": {
        loc: {
          start: {
            line: 300,
            column: 12
          },
          end: {
            line: 303,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 300,
            column: 12
          },
          end: {
            line: 303,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 300
      },
      "21": {
        loc: {
          start: {
            line: 324,
            column: 12
          },
          end: {
            line: 336,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 324,
            column: 12
          },
          end: {
            line: 336,
            column: 13
          }
        }, {
          start: {
            line: 330,
            column: 17
          },
          end: {
            line: 336,
            column: 13
          }
        }],
        line: 324
      },
      "22": {
        loc: {
          start: {
            line: 353,
            column: 8
          },
          end: {
            line: 355,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 353,
            column: 8
          },
          end: {
            line: 355,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 353
      },
      "23": {
        loc: {
          start: {
            line: 353,
            column: 12
          },
          end: {
            line: 353,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 353,
            column: 12
          },
          end: {
            line: 353,
            column: 27
          }
        }, {
          start: {
            line: 353,
            column: 31
          },
          end: {
            line: 353,
            column: 46
          }
        }, {
          start: {
            line: 353,
            column: 50
          },
          end: {
            line: 353,
            column: 64
          }
        }, {
          start: {
            line: 353,
            column: 68
          },
          end: {
            line: 353,
            column: 84
          }
        }],
        line: 353
      },
      "24": {
        loc: {
          start: {
            line: 357,
            column: 8
          },
          end: {
            line: 360,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 357,
            column: 8
          },
          end: {
            line: 360,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 357
      },
      "25": {
        loc: {
          start: {
            line: 357,
            column: 12
          },
          end: {
            line: 358,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 357,
            column: 12
          },
          end: {
            line: 357,
            column: 58
          }
        }, {
          start: {
            line: 358,
            column: 12
          },
          end: {
            line: 358,
            column: 57
          }
        }],
        line: 357
      },
      "26": {
        loc: {
          start: {
            line: 362,
            column: 8
          },
          end: {
            line: 364,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 362,
            column: 8
          },
          end: {
            line: 364,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 362
      },
      "27": {
        loc: {
          start: {
            line: 366,
            column: 8
          },
          end: {
            line: 368,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 366,
            column: 8
          },
          end: {
            line: 368,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 366
      },
      "28": {
        loc: {
          start: {
            line: 366,
            column: 12
          },
          end: {
            line: 366,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 366,
            column: 12
          },
          end: {
            line: 366,
            column: 40
          }
        }, {
          start: {
            line: 366,
            column: 44
          },
          end: {
            line: 366,
            column: 84
          }
        }],
        line: 366
      },
      "29": {
        loc: {
          start: {
            line: 380,
            column: 12
          },
          end: {
            line: 390,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 380,
            column: 12
          },
          end: {
            line: 390,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 380
      },
      "30": {
        loc: {
          start: {
            line: 381,
            column: 33
          },
          end: {
            line: 382,
            column: 69
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 381,
            column: 66
          },
          end: {
            line: 381,
            column: 72
          }
        }, {
          start: {
            line: 382,
            column: 20
          },
          end: {
            line: 382,
            column: 69
          }
        }],
        line: 381
      },
      "31": {
        loc: {
          start: {
            line: 382,
            column: 20
          },
          end: {
            line: 382,
            column: 69
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 382,
            column: 53
          },
          end: {
            line: 382,
            column: 61
          }
        }, {
          start: {
            line: 382,
            column: 64
          },
          end: {
            line: 382,
            column: 69
          }
        }],
        line: 382
      },
      "32": {
        loc: {
          start: {
            line: 398,
            column: 8
          },
          end: {
            line: 399,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 398,
            column: 8
          },
          end: {
            line: 399,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 398
      },
      "33": {
        loc: {
          start: {
            line: 409,
            column: 8
          },
          end: {
            line: 410,
            column: 24
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 409,
            column: 8
          },
          end: {
            line: 410,
            column: 24
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 409
      },
      "34": {
        loc: {
          start: {
            line: 411,
            column: 8
          },
          end: {
            line: 412,
            column: 24
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 411,
            column: 8
          },
          end: {
            line: 412,
            column: 24
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 411
      },
      "35": {
        loc: {
          start: {
            line: 413,
            column: 8
          },
          end: {
            line: 414,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 413,
            column: 8
          },
          end: {
            line: 414,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 413
      },
      "36": {
        loc: {
          start: {
            line: 415,
            column: 8
          },
          end: {
            line: 416,
            column: 24
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 415,
            column: 8
          },
          end: {
            line: 416,
            column: 24
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 415
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0, 0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\backtesting\\historical-data-fetcher.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\backtesting\\historical-data-fetcher.ts"],
      sourcesContent: ["/**\r\n * =============================================================================\r\n * HISTORICAL DATA FETCHER - REAL MARKET DATA ONLY\r\n * =============================================================================\r\n * \r\n * This module fetches and validates historical market data from Gate.io API\r\n * for backtesting purposes. CRITICAL: NO MOCK DATA ALLOWED - only real\r\n * historical market data is used to ensure accurate backtesting results.\r\n * \r\n * SECURITY FEATURES:\r\n * - Data integrity verification with cryptographic hashes\r\n * - Comprehensive data validation and gap detection\r\n * - Rate limiting and API health monitoring\r\n * - Audit logging for all data fetching operations\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport crypto from 'crypto';\r\nimport { logger } from '@/core/logging/logger';\r\nimport { AuditService } from '@/security/audit-service';\r\nimport { GateIOClient } from '../api/gate-io-client';\r\nimport { \r\n  HistoricalMarketData, \r\n  DataValidationResult, \r\n  DataGap,\r\n  BacktestConfig \r\n} from './types';\r\nimport { MarketData } from '../strategies/types';\r\nimport { Candlestick } from '../api/types';\r\n\r\n/**\r\n * Time intervals supported by Gate.io API\r\n */\r\nexport type TimeInterval = '1m' | '5m' | '15m' | '30m' | '1h' | '4h' | '8h' | '1d';\r\n\r\n/**\r\n * Data fetching configuration\r\n */\r\ninterface DataFetchConfig {\r\n  symbol: string;\r\n  interval: TimeInterval;\r\n  startTime: Date;\r\n  endTime: Date;\r\n  maxRetries: number;\r\n  batchSize: number; // Number of candles per request\r\n  validateIntegrity: boolean;\r\n}\r\n\r\n/**\r\n * Data fetching statistics\r\n */\r\ninterface FetchStatistics {\r\n  totalRequests: number;\r\n  successfulRequests: number;\r\n  failedRequests: number;\r\n  totalDataPoints: number;\r\n  validDataPoints: number;\r\n  duplicatesRemoved: number;\r\n  gapsDetected: number;\r\n  fetchDuration: number; // in milliseconds\r\n  averageRequestTime: number;\r\n}\r\n\r\n/**\r\n * Historical Data Fetcher with comprehensive validation\r\n */\r\nexport class HistoricalDataFetcher {\r\n  private gateIOClient: GateIOClient;\r\n  private auditService: AuditService;\r\n  private fetchStatistics: FetchStatistics;\r\n\r\n  constructor(gateIOClient: GateIOClient) {\r\n    this.gateIOClient = gateIOClient;\r\n    this.auditService = new AuditService();\r\n    this.resetStatistics();\r\n    \r\n    logger.info('\uD83D\uDCCA Historical Data Fetcher initialized - REAL DATA ONLY');\r\n  }\r\n\r\n  /**\r\n   * Fetch historical market data for backtesting\r\n   * CRITICAL: Only real market data from Gate.io API - NO MOCK DATA\r\n   */\r\n  public async fetchHistoricalData(config: DataFetchConfig): Promise<HistoricalMarketData[]> {\r\n    const startTime = Date.now();\r\n    this.resetStatistics();\r\n    \r\n    try {\r\n      logger.info(`\uD83D\uDCC8 Fetching historical data for ${config.symbol} from ${config.startTime.toISOString()} to ${config.endTime.toISOString()}`);\r\n      \r\n      // Validate configuration\r\n      this.validateFetchConfig(config);\r\n      \r\n      // Calculate time range and batch requests\r\n      const batches = this.calculateBatches(config);\r\n      logger.info(`\uD83D\uDCE6 Splitting request into ${batches.length} batches`);\r\n      \r\n      // Fetch data in batches to respect API limits\r\n      const allData: HistoricalMarketData[] = [];\r\n      \r\n      for (let i = 0; i < batches.length; i++) {\r\n        const batch = batches[i];\r\n        logger.info(`\uD83D\uDCE5 Fetching batch ${i + 1}/${batches.length}: ${batch.start.toISOString()} to ${batch.end.toISOString()}`);\r\n        \r\n        try {\r\n          const batchData = await this.fetchBatch(config.symbol, config.interval, batch.start, batch.end);\r\n          allData.push(...batchData);\r\n          this.fetchStatistics.successfulRequests++;\r\n          \r\n          // Add delay between batches to respect rate limits\r\n          if (i < batches.length - 1) {\r\n            await this.delay(1000); // 1 second delay\r\n          }\r\n          \r\n        } catch (error) {\r\n          logger.error(`\u274C Failed to fetch batch ${i + 1}:`, error);\r\n          this.fetchStatistics.failedRequests++;\r\n          \r\n          // Retry failed batch\r\n          if (this.fetchStatistics.failedRequests <= config.maxRetries) {\r\n            logger.info(`\uD83D\uDD04 Retrying batch ${i + 1} (attempt ${this.fetchStatistics.failedRequests})`);\r\n            i--; // Retry current batch\r\n            await this.delay(2000); // 2 second delay before retry\r\n          } else {\r\n            throw new Error(`Failed to fetch batch after ${config.maxRetries} retries`);\r\n          }\r\n        }\r\n      }\r\n      \r\n      // Sort data by timestamp\r\n      allData.sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime());\r\n      \r\n      // Remove duplicates\r\n      const uniqueData = this.removeDuplicates(allData);\r\n      this.fetchStatistics.duplicatesRemoved = allData.length - uniqueData.length;\r\n      \r\n      // Validate data integrity\r\n      const validatedData = config.validateIntegrity \r\n        ? await this.validateDataIntegrity(uniqueData)\r\n        : uniqueData;\r\n      \r\n      // Update statistics\r\n      this.fetchStatistics.totalDataPoints = validatedData.length;\r\n      this.fetchStatistics.validDataPoints = validatedData.filter(d => d.validated).length;\r\n      this.fetchStatistics.fetchDuration = Date.now() - startTime;\r\n      this.fetchStatistics.averageRequestTime = this.fetchStatistics.fetchDuration / this.fetchStatistics.totalRequests;\r\n      \r\n      // Log audit event\r\n      await this.auditService.logSecurityEvent({\r\n        type: 'HISTORICAL_DATA_FETCHED',\r\n        severity: 'INFO',\r\n        details: {\r\n          symbol: config.symbol,\r\n          interval: config.interval,\r\n          dataPoints: validatedData.length,\r\n          statistics: this.fetchStatistics,\r\n        },\r\n        timestamp: new Date(),\r\n      });\r\n      \r\n      logger.info(`\u2705 Successfully fetched ${validatedData.length} historical data points for ${config.symbol}`);\r\n      logger.info(`\uD83D\uDCCA Fetch Statistics:`, this.fetchStatistics);\r\n      \r\n      return validatedData;\r\n      \r\n    } catch (error) {\r\n      logger.error('\u274C Failed to fetch historical data:', error);\r\n      \r\n      await this.auditService.logSecurityEvent({\r\n        type: 'HISTORICAL_DATA_FETCH_FAILED',\r\n        severity: 'ERROR',\r\n        details: {\r\n          symbol: config.symbol,\r\n          error: error.message,\r\n          statistics: this.fetchStatistics,\r\n        },\r\n        timestamp: new Date(),\r\n      });\r\n      \r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fetch historical data for backtesting configuration\r\n   */\r\n  public async fetchForBacktest(backtestConfig: BacktestConfig): Promise<HistoricalMarketData[]> {\r\n    // Determine appropriate interval based on backtest duration\r\n    const durationDays = (backtestConfig.endDate.getTime() - backtestConfig.startDate.getTime()) / (1000 * 60 * 60 * 24);\r\n    const interval = this.determineOptimalInterval(durationDays);\r\n    \r\n    const fetchConfig: DataFetchConfig = {\r\n      symbol: backtestConfig.symbol,\r\n      interval,\r\n      startTime: backtestConfig.startDate,\r\n      endTime: backtestConfig.endDate,\r\n      maxRetries: 3,\r\n      batchSize: 1000,\r\n      validateIntegrity: backtestConfig.dataValidation.requireRealData,\r\n    };\r\n    \r\n    return this.fetchHistoricalData(fetchConfig);\r\n  }\r\n\r\n  /**\r\n   * Validate fetched data for backtesting requirements\r\n   */\r\n  public async validateForBacktesting(\r\n    data: HistoricalMarketData[], \r\n    config: BacktestConfig\r\n  ): Promise<DataValidationResult> {\r\n    logger.info('\uD83D\uDD0D Validating historical data for backtesting...');\r\n    \r\n    const validation: DataValidationResult = {\r\n      isValid: true,\r\n      totalPoints: data.length,\r\n      validPoints: 0,\r\n      invalidPoints: 0,\r\n      gaps: [],\r\n      integrityScore: 0,\r\n      errors: [],\r\n      warnings: [],\r\n    };\r\n    \r\n    // Check minimum data points requirement\r\n    if (data.length < config.dataValidation.minDataPoints) {\r\n      validation.isValid = false;\r\n      validation.errors.push(`Insufficient data points: ${data.length} < ${config.dataValidation.minDataPoints}`);\r\n    }\r\n    \r\n    // Validate each data point\r\n    for (let i = 0; i < data.length; i++) {\r\n      const point = data[i];\r\n      \r\n      if (this.isValidDataPoint(point)) {\r\n        validation.validPoints++;\r\n      } else {\r\n        validation.invalidPoints++;\r\n        validation.warnings.push(`Invalid data point at index ${i}: ${point.timestamp.toISOString()}`);\r\n      }\r\n    }\r\n    \r\n    // Detect gaps in data\r\n    validation.gaps = this.detectDataGaps(data, config.dataValidation.maxGapMinutes);\r\n    \r\n    // Check for critical gaps\r\n    const criticalGaps = validation.gaps.filter(gap => gap.severity === 'HIGH');\r\n    if (criticalGaps.length > 0) {\r\n      validation.isValid = false;\r\n      validation.errors.push(`Critical data gaps detected: ${criticalGaps.length}`);\r\n    }\r\n    \r\n    // Calculate integrity score\r\n    validation.integrityScore = this.calculateIntegrityScore(validation);\r\n    \r\n    // Validate data source authenticity\r\n    const realDataPoints = data.filter(d => d.source === 'GATE_IO' && d.validated).length;\r\n    if (config.dataValidation.requireRealData && realDataPoints < data.length) {\r\n      validation.isValid = false;\r\n      validation.errors.push(`Mock or invalid data detected: ${data.length - realDataPoints} points`);\r\n    }\r\n    \r\n    logger.info(`\u2705 Data validation completed: ${validation.isValid ? 'VALID' : 'INVALID'}`);\r\n    logger.info(`\uD83D\uDCCA Validation Results:`, {\r\n      totalPoints: validation.totalPoints,\r\n      validPoints: validation.validPoints,\r\n      gaps: validation.gaps.length,\r\n      integrityScore: validation.integrityScore,\r\n    });\r\n    \r\n    return validation;\r\n  }\r\n\r\n  /**\r\n   * Validate fetch configuration\r\n   */\r\n  private validateFetchConfig(config: DataFetchConfig): void {\r\n    if (!config.symbol || config.symbol.trim() === '') {\r\n      throw new Error('Symbol is required');\r\n    }\r\n    \r\n    if (config.startTime >= config.endTime) {\r\n      throw new Error('Start time must be before end time');\r\n    }\r\n    \r\n    if (config.endTime > new Date()) {\r\n      throw new Error('End time cannot be in the future');\r\n    }\r\n    \r\n    const maxHistoryDays = 365; // 1 year maximum\r\n    const durationDays = (config.endTime.getTime() - config.startTime.getTime()) / (1000 * 60 * 60 * 24);\r\n    if (durationDays > maxHistoryDays) {\r\n      throw new Error(`Date range too large: ${durationDays} days > ${maxHistoryDays} days`);\r\n    }\r\n    \r\n    if (config.batchSize <= 0 || config.batchSize > 1000) {\r\n      throw new Error('Batch size must be between 1 and 1000');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate batches for data fetching\r\n   */\r\n  private calculateBatches(config: DataFetchConfig): Array<{ start: Date; end: Date }> {\r\n    const batches: Array<{ start: Date; end: Date }> = [];\r\n    const intervalMs = this.getIntervalMilliseconds(config.interval);\r\n    const batchDuration = config.batchSize * intervalMs;\r\n    \r\n    let currentStart = new Date(config.startTime);\r\n    \r\n    while (currentStart < config.endTime) {\r\n      const currentEnd = new Date(Math.min(\r\n        currentStart.getTime() + batchDuration,\r\n        config.endTime.getTime()\r\n      ));\r\n      \r\n      batches.push({\r\n        start: new Date(currentStart),\r\n        end: new Date(currentEnd),\r\n      });\r\n      \r\n      currentStart = new Date(currentEnd.getTime() + intervalMs);\r\n    }\r\n    \r\n    return batches;\r\n  }\r\n\r\n  /**\r\n   * Fetch a single batch of data from Gate.io API\r\n   */\r\n  private async fetchBatch(\r\n    symbol: string, \r\n    interval: TimeInterval, \r\n    startTime: Date, \r\n    endTime: Date\r\n  ): Promise<HistoricalMarketData[]> {\r\n    this.fetchStatistics.totalRequests++;\r\n    \r\n    try {\r\n      // Convert to Gate.io API format\r\n      const gateSymbol = symbol.replace('_', '_'); // Ensure correct format\r\n      const from = Math.floor(startTime.getTime() / 1000);\r\n      const to = Math.floor(endTime.getTime() / 1000);\r\n      \r\n      // Make API request for candlestick data\r\n      const response = await this.gateIOClient.makeRequest<Candlestick[]>({\r\n        method: 'GET',\r\n        url: `/spot/candlesticks`,\r\n        params: {\r\n          currency_pair: gateSymbol,\r\n          interval: interval,\r\n          from: from,\r\n          to: to,\r\n        },\r\n        requestType: 'PUBLIC' as any,\r\n        skipAuth: true,\r\n      });\r\n      \r\n      // Convert Gate.io candlestick data to our format\r\n      const historicalData: HistoricalMarketData[] = response.map((candle: Candlestick) => {\r\n        const marketData: HistoricalMarketData = {\r\n          symbol: symbol,\r\n          timestamp: new Date(candle.timestamp * 1000),\r\n          open: parseFloat(candle.open),\r\n          high: parseFloat(candle.high),\r\n          low: parseFloat(candle.low),\r\n          close: parseFloat(candle.close),\r\n          volume: parseFloat(candle.volume),\r\n          validated: true,\r\n          source: 'GATE_IO',\r\n          integrity: this.calculateDataHash(candle),\r\n          fetchedAt: new Date(),\r\n        };\r\n        \r\n        return marketData;\r\n      });\r\n      \r\n      logger.debug(`\uD83D\uDCE5 Fetched ${historicalData.length} data points for ${symbol} (${interval})`);\r\n      \r\n      return historicalData;\r\n      \r\n    } catch (error) {\r\n      logger.error(`\u274C Failed to fetch batch for ${symbol}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove duplicate data points\r\n   */\r\n  private removeDuplicates(data: HistoricalMarketData[]): HistoricalMarketData[] {\r\n    const seen = new Set<string>();\r\n    const unique: HistoricalMarketData[] = [];\r\n    \r\n    for (const point of data) {\r\n      const key = `${point.symbol}_${point.timestamp.getTime()}`;\r\n      if (!seen.has(key)) {\r\n        seen.add(key);\r\n        unique.push(point);\r\n      }\r\n    }\r\n    \r\n    return unique;\r\n  }\r\n\r\n  /**\r\n   * Validate data integrity with cryptographic verification\r\n   */\r\n  private async validateDataIntegrity(data: HistoricalMarketData[]): Promise<HistoricalMarketData[]> {\r\n    logger.info('\uD83D\uDD10 Validating data integrity...');\r\n    \r\n    const validatedData: HistoricalMarketData[] = [];\r\n    \r\n    for (const point of data) {\r\n      // Recalculate hash to verify integrity\r\n      const expectedHash = this.calculateDataHash({\r\n        timestamp: Math.floor(point.timestamp.getTime() / 1000),\r\n        open: point.open.toString(),\r\n        high: point.high.toString(),\r\n        low: point.low.toString(),\r\n        close: point.close.toString(),\r\n        volume: point.volume.toString(),\r\n        quote_volume: '0', // Not used in our calculation\r\n      });\r\n      \r\n      if (point.integrity === expectedHash) {\r\n        validatedData.push({\r\n          ...point,\r\n          validated: true,\r\n        });\r\n      } else {\r\n        logger.warn(`\u26A0\uFE0F Data integrity check failed for ${point.symbol} at ${point.timestamp.toISOString()}`);\r\n        validatedData.push({\r\n          ...point,\r\n          validated: false,\r\n        });\r\n      }\r\n    }\r\n    \r\n    logger.info(`\u2705 Data integrity validation completed: ${validatedData.filter(d => d.validated).length}/${validatedData.length} valid`);\r\n    \r\n    return validatedData;\r\n  }\r\n\r\n  /**\r\n   * Calculate cryptographic hash for data integrity\r\n   */\r\n  private calculateDataHash(candle: any): string {\r\n    const dataString = `${candle.timestamp}_${candle.open}_${candle.high}_${candle.low}_${candle.close}_${candle.volume}`;\r\n    return crypto.createHash('sha256').update(dataString).digest('hex');\r\n  }\r\n\r\n  /**\r\n   * Check if a data point is valid\r\n   */\r\n  private isValidDataPoint(point: HistoricalMarketData): boolean {\r\n    // Check for valid OHLCV data\r\n    if (point.open <= 0 || point.high <= 0 || point.low <= 0 || point.close <= 0) {\r\n      return false;\r\n    }\r\n    \r\n    // Check OHLC relationships\r\n    if (point.high < Math.max(point.open, point.close) || \r\n        point.low > Math.min(point.open, point.close)) {\r\n      return false;\r\n    }\r\n    \r\n    // Check for reasonable volume\r\n    if (point.volume < 0) {\r\n      return false;\r\n    }\r\n    \r\n    // Check timestamp validity\r\n    if (point.timestamp > new Date() || point.timestamp < new Date('2009-01-01')) {\r\n      return false;\r\n    }\r\n    \r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Detect gaps in historical data\r\n   */\r\n  private detectDataGaps(data: HistoricalMarketData[], maxGapMinutes: number): DataGap[] {\r\n    const gaps: DataGap[] = [];\r\n    \r\n    for (let i = 1; i < data.length; i++) {\r\n      const prevTime = data[i - 1].timestamp.getTime();\r\n      const currTime = data[i].timestamp.getTime();\r\n      const gapMinutes = (currTime - prevTime) / (1000 * 60);\r\n      \r\n      if (gapMinutes > maxGapMinutes) {\r\n        const severity = gapMinutes > maxGapMinutes * 3 ? 'HIGH' : \r\n                        gapMinutes > maxGapMinutes * 2 ? 'MEDIUM' : 'LOW';\r\n        \r\n        gaps.push({\r\n          startTime: data[i - 1].timestamp,\r\n          endTime: data[i].timestamp,\r\n          durationMinutes: gapMinutes,\r\n          severity,\r\n          impact: `Missing ${Math.floor(gapMinutes / maxGapMinutes)} expected data points`,\r\n        });\r\n      }\r\n    }\r\n    \r\n    return gaps;\r\n  }\r\n\r\n  /**\r\n   * Calculate data integrity score\r\n   */\r\n  private calculateIntegrityScore(validation: DataValidationResult): number {\r\n    if (validation.totalPoints === 0) return 0;\r\n    \r\n    const validRatio = validation.validPoints / validation.totalPoints;\r\n    const gapPenalty = Math.min(validation.gaps.length * 0.1, 0.5);\r\n    const errorPenalty = Math.min(validation.errors.length * 0.2, 0.8);\r\n    \r\n    return Math.max(0, (validRatio - gapPenalty - errorPenalty) * 100);\r\n  }\r\n\r\n  /**\r\n   * Determine optimal interval based on backtest duration\r\n   */\r\n  private determineOptimalInterval(durationDays: number): TimeInterval {\r\n    if (durationDays <= 7) return '1m';\r\n    if (durationDays <= 30) return '5m';\r\n    if (durationDays <= 90) return '15m';\r\n    if (durationDays <= 180) return '1h';\r\n    return '4h';\r\n  }\r\n\r\n  /**\r\n   * Get interval duration in milliseconds\r\n   */\r\n  private getIntervalMilliseconds(interval: TimeInterval): number {\r\n    const intervals: Record<TimeInterval, number> = {\r\n      '1m': 60 * 1000,\r\n      '5m': 5 * 60 * 1000,\r\n      '15m': 15 * 60 * 1000,\r\n      '30m': 30 * 60 * 1000,\r\n      '1h': 60 * 60 * 1000,\r\n      '4h': 4 * 60 * 60 * 1000,\r\n      '8h': 8 * 60 * 60 * 1000,\r\n      '1d': 24 * 60 * 60 * 1000,\r\n    };\r\n    \r\n    return intervals[interval];\r\n  }\r\n\r\n  /**\r\n   * Reset fetch statistics\r\n   */\r\n  private resetStatistics(): void {\r\n    this.fetchStatistics = {\r\n      totalRequests: 0,\r\n      successfulRequests: 0,\r\n      failedRequests: 0,\r\n      totalDataPoints: 0,\r\n      validDataPoints: 0,\r\n      duplicatesRemoved: 0,\r\n      gapsDetected: 0,\r\n      fetchDuration: 0,\r\n      averageRequestTime: 0,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Delay execution for rate limiting\r\n   */\r\n  private delay(ms: number): Promise<void> {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n  }\r\n\r\n  /**\r\n   * Get fetch statistics\r\n   */\r\n  public getFetchStatistics(): FetchStatistics {\r\n    return { ...this.fetchStatistics };\r\n  }\r\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "5b04a6e6208eb78aef2fcfa253f26e5c20de2c10"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1xj8r7cf0m = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1xj8r7cf0m();
var __importDefault =
/* istanbul ignore next */
(cov_1xj8r7cf0m().s[0]++,
/* istanbul ignore next */
(cov_1xj8r7cf0m().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1xj8r7cf0m().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_1xj8r7cf0m().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_1xj8r7cf0m().f[0]++;
  cov_1xj8r7cf0m().s[1]++;
  return /* istanbul ignore next */(cov_1xj8r7cf0m().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_1xj8r7cf0m().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_1xj8r7cf0m().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_1xj8r7cf0m().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_1xj8r7cf0m().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1xj8r7cf0m().s[3]++;
exports.HistoricalDataFetcher = void 0;
const crypto_1 =
/* istanbul ignore next */
(cov_1xj8r7cf0m().s[4]++, __importDefault(require("crypto")));
const logger_1 =
/* istanbul ignore next */
(cov_1xj8r7cf0m().s[5]++, require("@/core/logging/logger"));
const audit_service_1 =
/* istanbul ignore next */
(cov_1xj8r7cf0m().s[6]++, require("@/security/audit-service"));
/**
 * Historical Data Fetcher with comprehensive validation
 */
class HistoricalDataFetcher {
  gateIOClient;
  auditService;
  fetchStatistics;
  constructor(gateIOClient) {
    /* istanbul ignore next */
    cov_1xj8r7cf0m().f[1]++;
    cov_1xj8r7cf0m().s[7]++;
    this.gateIOClient = gateIOClient;
    /* istanbul ignore next */
    cov_1xj8r7cf0m().s[8]++;
    this.auditService = new audit_service_1.AuditService();
    /* istanbul ignore next */
    cov_1xj8r7cf0m().s[9]++;
    this.resetStatistics();
    /* istanbul ignore next */
    cov_1xj8r7cf0m().s[10]++;
    logger_1.logger.info('📊 Historical Data Fetcher initialized - REAL DATA ONLY');
  }
  /**
   * Fetch historical market data for backtesting
   * CRITICAL: Only real market data from Gate.io API - NO MOCK DATA
   */
  async fetchHistoricalData(config) {
    /* istanbul ignore next */
    cov_1xj8r7cf0m().f[2]++;
    const startTime =
    /* istanbul ignore next */
    (cov_1xj8r7cf0m().s[11]++, Date.now());
    /* istanbul ignore next */
    cov_1xj8r7cf0m().s[12]++;
    this.resetStatistics();
    /* istanbul ignore next */
    cov_1xj8r7cf0m().s[13]++;
    try {
      /* istanbul ignore next */
      cov_1xj8r7cf0m().s[14]++;
      logger_1.logger.info(`📈 Fetching historical data for ${config.symbol} from ${config.startTime.toISOString()} to ${config.endTime.toISOString()}`);
      // Validate configuration
      /* istanbul ignore next */
      cov_1xj8r7cf0m().s[15]++;
      this.validateFetchConfig(config);
      // Calculate time range and batch requests
      const batches =
      /* istanbul ignore next */
      (cov_1xj8r7cf0m().s[16]++, this.calculateBatches(config));
      /* istanbul ignore next */
      cov_1xj8r7cf0m().s[17]++;
      logger_1.logger.info(`📦 Splitting request into ${batches.length} batches`);
      // Fetch data in batches to respect API limits
      const allData =
      /* istanbul ignore next */
      (cov_1xj8r7cf0m().s[18]++, []);
      /* istanbul ignore next */
      cov_1xj8r7cf0m().s[19]++;
      for (let i =
      /* istanbul ignore next */
      (cov_1xj8r7cf0m().s[20]++, 0); i < batches.length; i++) {
        const batch =
        /* istanbul ignore next */
        (cov_1xj8r7cf0m().s[21]++, batches[i]);
        /* istanbul ignore next */
        cov_1xj8r7cf0m().s[22]++;
        logger_1.logger.info(`📥 Fetching batch ${i + 1}/${batches.length}: ${batch.start.toISOString()} to ${batch.end.toISOString()}`);
        /* istanbul ignore next */
        cov_1xj8r7cf0m().s[23]++;
        try {
          const batchData =
          /* istanbul ignore next */
          (cov_1xj8r7cf0m().s[24]++, await this.fetchBatch(config.symbol, config.interval, batch.start, batch.end));
          /* istanbul ignore next */
          cov_1xj8r7cf0m().s[25]++;
          allData.push(...batchData);
          /* istanbul ignore next */
          cov_1xj8r7cf0m().s[26]++;
          this.fetchStatistics.successfulRequests++;
          // Add delay between batches to respect rate limits
          /* istanbul ignore next */
          cov_1xj8r7cf0m().s[27]++;
          if (i < batches.length - 1) {
            /* istanbul ignore next */
            cov_1xj8r7cf0m().b[3][0]++;
            cov_1xj8r7cf0m().s[28]++;
            await this.delay(1000); // 1 second delay
          } else
          /* istanbul ignore next */
          {
            cov_1xj8r7cf0m().b[3][1]++;
          }
        } catch (error) {
          /* istanbul ignore next */
          cov_1xj8r7cf0m().s[29]++;
          logger_1.logger.error(`❌ Failed to fetch batch ${i + 1}:`, error);
          /* istanbul ignore next */
          cov_1xj8r7cf0m().s[30]++;
          this.fetchStatistics.failedRequests++;
          // Retry failed batch
          /* istanbul ignore next */
          cov_1xj8r7cf0m().s[31]++;
          if (this.fetchStatistics.failedRequests <= config.maxRetries) {
            /* istanbul ignore next */
            cov_1xj8r7cf0m().b[4][0]++;
            cov_1xj8r7cf0m().s[32]++;
            logger_1.logger.info(`🔄 Retrying batch ${i + 1} (attempt ${this.fetchStatistics.failedRequests})`);
            /* istanbul ignore next */
            cov_1xj8r7cf0m().s[33]++;
            i--; // Retry current batch
            /* istanbul ignore next */
            cov_1xj8r7cf0m().s[34]++;
            await this.delay(2000); // 2 second delay before retry
          } else {
            /* istanbul ignore next */
            cov_1xj8r7cf0m().b[4][1]++;
            cov_1xj8r7cf0m().s[35]++;
            throw new Error(`Failed to fetch batch after ${config.maxRetries} retries`);
          }
        }
      }
      // Sort data by timestamp
      /* istanbul ignore next */
      cov_1xj8r7cf0m().s[36]++;
      allData.sort((a, b) => {
        /* istanbul ignore next */
        cov_1xj8r7cf0m().f[3]++;
        cov_1xj8r7cf0m().s[37]++;
        return a.timestamp.getTime() - b.timestamp.getTime();
      });
      // Remove duplicates
      const uniqueData =
      /* istanbul ignore next */
      (cov_1xj8r7cf0m().s[38]++, this.removeDuplicates(allData));
      /* istanbul ignore next */
      cov_1xj8r7cf0m().s[39]++;
      this.fetchStatistics.duplicatesRemoved = allData.length - uniqueData.length;
      // Validate data integrity
      const validatedData =
      /* istanbul ignore next */
      (cov_1xj8r7cf0m().s[40]++, config.validateIntegrity ?
      /* istanbul ignore next */
      (cov_1xj8r7cf0m().b[5][0]++, await this.validateDataIntegrity(uniqueData)) :
      /* istanbul ignore next */
      (cov_1xj8r7cf0m().b[5][1]++, uniqueData));
      // Update statistics
      /* istanbul ignore next */
      cov_1xj8r7cf0m().s[41]++;
      this.fetchStatistics.totalDataPoints = validatedData.length;
      /* istanbul ignore next */
      cov_1xj8r7cf0m().s[42]++;
      this.fetchStatistics.validDataPoints = validatedData.filter(d => {
        /* istanbul ignore next */
        cov_1xj8r7cf0m().f[4]++;
        cov_1xj8r7cf0m().s[43]++;
        return d.validated;
      }).length;
      /* istanbul ignore next */
      cov_1xj8r7cf0m().s[44]++;
      this.fetchStatistics.fetchDuration = Date.now() - startTime;
      /* istanbul ignore next */
      cov_1xj8r7cf0m().s[45]++;
      this.fetchStatistics.averageRequestTime = this.fetchStatistics.fetchDuration / this.fetchStatistics.totalRequests;
      // Log audit event
      /* istanbul ignore next */
      cov_1xj8r7cf0m().s[46]++;
      await this.auditService.logSecurityEvent({
        type: 'HISTORICAL_DATA_FETCHED',
        severity: 'INFO',
        details: {
          symbol: config.symbol,
          interval: config.interval,
          dataPoints: validatedData.length,
          statistics: this.fetchStatistics
        },
        timestamp: new Date()
      });
      /* istanbul ignore next */
      cov_1xj8r7cf0m().s[47]++;
      logger_1.logger.info(`✅ Successfully fetched ${validatedData.length} historical data points for ${config.symbol}`);
      /* istanbul ignore next */
      cov_1xj8r7cf0m().s[48]++;
      logger_1.logger.info(`📊 Fetch Statistics:`, this.fetchStatistics);
      /* istanbul ignore next */
      cov_1xj8r7cf0m().s[49]++;
      return validatedData;
    } catch (error) {
      /* istanbul ignore next */
      cov_1xj8r7cf0m().s[50]++;
      logger_1.logger.error('❌ Failed to fetch historical data:', error);
      /* istanbul ignore next */
      cov_1xj8r7cf0m().s[51]++;
      await this.auditService.logSecurityEvent({
        type: 'HISTORICAL_DATA_FETCH_FAILED',
        severity: 'ERROR',
        details: {
          symbol: config.symbol,
          error: error.message,
          statistics: this.fetchStatistics
        },
        timestamp: new Date()
      });
      /* istanbul ignore next */
      cov_1xj8r7cf0m().s[52]++;
      throw error;
    }
  }
  /**
   * Fetch historical data for backtesting configuration
   */
  async fetchForBacktest(backtestConfig) {
    /* istanbul ignore next */
    cov_1xj8r7cf0m().f[5]++;
    // Determine appropriate interval based on backtest duration
    const durationDays =
    /* istanbul ignore next */
    (cov_1xj8r7cf0m().s[53]++, (backtestConfig.endDate.getTime() - backtestConfig.startDate.getTime()) / (1000 * 60 * 60 * 24));
    const interval =
    /* istanbul ignore next */
    (cov_1xj8r7cf0m().s[54]++, this.determineOptimalInterval(durationDays));
    const fetchConfig =
    /* istanbul ignore next */
    (cov_1xj8r7cf0m().s[55]++, {
      symbol: backtestConfig.symbol,
      interval,
      startTime: backtestConfig.startDate,
      endTime: backtestConfig.endDate,
      maxRetries: 3,
      batchSize: 1000,
      validateIntegrity: backtestConfig.dataValidation.requireRealData
    });
    /* istanbul ignore next */
    cov_1xj8r7cf0m().s[56]++;
    return this.fetchHistoricalData(fetchConfig);
  }
  /**
   * Validate fetched data for backtesting requirements
   */
  async validateForBacktesting(data, config) {
    /* istanbul ignore next */
    cov_1xj8r7cf0m().f[6]++;
    cov_1xj8r7cf0m().s[57]++;
    logger_1.logger.info('🔍 Validating historical data for backtesting...');
    const validation =
    /* istanbul ignore next */
    (cov_1xj8r7cf0m().s[58]++, {
      isValid: true,
      totalPoints: data.length,
      validPoints: 0,
      invalidPoints: 0,
      gaps: [],
      integrityScore: 0,
      errors: [],
      warnings: []
    });
    // Check minimum data points requirement
    /* istanbul ignore next */
    cov_1xj8r7cf0m().s[59]++;
    if (data.length < config.dataValidation.minDataPoints) {
      /* istanbul ignore next */
      cov_1xj8r7cf0m().b[6][0]++;
      cov_1xj8r7cf0m().s[60]++;
      validation.isValid = false;
      /* istanbul ignore next */
      cov_1xj8r7cf0m().s[61]++;
      validation.errors.push(`Insufficient data points: ${data.length} < ${config.dataValidation.minDataPoints}`);
    } else
    /* istanbul ignore next */
    {
      cov_1xj8r7cf0m().b[6][1]++;
    }
    // Validate each data point
    cov_1xj8r7cf0m().s[62]++;
    for (let i =
    /* istanbul ignore next */
    (cov_1xj8r7cf0m().s[63]++, 0); i < data.length; i++) {
      const point =
      /* istanbul ignore next */
      (cov_1xj8r7cf0m().s[64]++, data[i]);
      /* istanbul ignore next */
      cov_1xj8r7cf0m().s[65]++;
      if (this.isValidDataPoint(point)) {
        /* istanbul ignore next */
        cov_1xj8r7cf0m().b[7][0]++;
        cov_1xj8r7cf0m().s[66]++;
        validation.validPoints++;
      } else {
        /* istanbul ignore next */
        cov_1xj8r7cf0m().b[7][1]++;
        cov_1xj8r7cf0m().s[67]++;
        validation.invalidPoints++;
        /* istanbul ignore next */
        cov_1xj8r7cf0m().s[68]++;
        validation.warnings.push(`Invalid data point at index ${i}: ${point.timestamp.toISOString()}`);
      }
    }
    // Detect gaps in data
    /* istanbul ignore next */
    cov_1xj8r7cf0m().s[69]++;
    validation.gaps = this.detectDataGaps(data, config.dataValidation.maxGapMinutes);
    // Check for critical gaps
    const criticalGaps =
    /* istanbul ignore next */
    (cov_1xj8r7cf0m().s[70]++, validation.gaps.filter(gap => {
      /* istanbul ignore next */
      cov_1xj8r7cf0m().f[7]++;
      cov_1xj8r7cf0m().s[71]++;
      return gap.severity === 'HIGH';
    }));
    /* istanbul ignore next */
    cov_1xj8r7cf0m().s[72]++;
    if (criticalGaps.length > 0) {
      /* istanbul ignore next */
      cov_1xj8r7cf0m().b[8][0]++;
      cov_1xj8r7cf0m().s[73]++;
      validation.isValid = false;
      /* istanbul ignore next */
      cov_1xj8r7cf0m().s[74]++;
      validation.errors.push(`Critical data gaps detected: ${criticalGaps.length}`);
    } else
    /* istanbul ignore next */
    {
      cov_1xj8r7cf0m().b[8][1]++;
    }
    // Calculate integrity score
    cov_1xj8r7cf0m().s[75]++;
    validation.integrityScore = this.calculateIntegrityScore(validation);
    // Validate data source authenticity
    const realDataPoints =
    /* istanbul ignore next */
    (cov_1xj8r7cf0m().s[76]++, data.filter(d => {
      /* istanbul ignore next */
      cov_1xj8r7cf0m().f[8]++;
      cov_1xj8r7cf0m().s[77]++;
      return /* istanbul ignore next */(cov_1xj8r7cf0m().b[9][0]++, d.source === 'GATE_IO') &&
      /* istanbul ignore next */
      (cov_1xj8r7cf0m().b[9][1]++, d.validated);
    }).length);
    /* istanbul ignore next */
    cov_1xj8r7cf0m().s[78]++;
    if (
    /* istanbul ignore next */
    (cov_1xj8r7cf0m().b[11][0]++, config.dataValidation.requireRealData) &&
    /* istanbul ignore next */
    (cov_1xj8r7cf0m().b[11][1]++, realDataPoints < data.length)) {
      /* istanbul ignore next */
      cov_1xj8r7cf0m().b[10][0]++;
      cov_1xj8r7cf0m().s[79]++;
      validation.isValid = false;
      /* istanbul ignore next */
      cov_1xj8r7cf0m().s[80]++;
      validation.errors.push(`Mock or invalid data detected: ${data.length - realDataPoints} points`);
    } else
    /* istanbul ignore next */
    {
      cov_1xj8r7cf0m().b[10][1]++;
    }
    cov_1xj8r7cf0m().s[81]++;
    logger_1.logger.info(`✅ Data validation completed: ${validation.isValid ?
    /* istanbul ignore next */
    (cov_1xj8r7cf0m().b[12][0]++, 'VALID') :
    /* istanbul ignore next */
    (cov_1xj8r7cf0m().b[12][1]++, 'INVALID')}`);
    /* istanbul ignore next */
    cov_1xj8r7cf0m().s[82]++;
    logger_1.logger.info(`📊 Validation Results:`, {
      totalPoints: validation.totalPoints,
      validPoints: validation.validPoints,
      gaps: validation.gaps.length,
      integrityScore: validation.integrityScore
    });
    /* istanbul ignore next */
    cov_1xj8r7cf0m().s[83]++;
    return validation;
  }
  /**
   * Validate fetch configuration
   */
  validateFetchConfig(config) {
    /* istanbul ignore next */
    cov_1xj8r7cf0m().f[9]++;
    cov_1xj8r7cf0m().s[84]++;
    if (
    /* istanbul ignore next */
    (cov_1xj8r7cf0m().b[14][0]++, !config.symbol) ||
    /* istanbul ignore next */
    (cov_1xj8r7cf0m().b[14][1]++, config.symbol.trim() === '')) {
      /* istanbul ignore next */
      cov_1xj8r7cf0m().b[13][0]++;
      cov_1xj8r7cf0m().s[85]++;
      throw new Error('Symbol is required');
    } else
    /* istanbul ignore next */
    {
      cov_1xj8r7cf0m().b[13][1]++;
    }
    cov_1xj8r7cf0m().s[86]++;
    if (config.startTime >= config.endTime) {
      /* istanbul ignore next */
      cov_1xj8r7cf0m().b[15][0]++;
      cov_1xj8r7cf0m().s[87]++;
      throw new Error('Start time must be before end time');
    } else
    /* istanbul ignore next */
    {
      cov_1xj8r7cf0m().b[15][1]++;
    }
    cov_1xj8r7cf0m().s[88]++;
    if (config.endTime > new Date()) {
      /* istanbul ignore next */
      cov_1xj8r7cf0m().b[16][0]++;
      cov_1xj8r7cf0m().s[89]++;
      throw new Error('End time cannot be in the future');
    } else
    /* istanbul ignore next */
    {
      cov_1xj8r7cf0m().b[16][1]++;
    }
    const maxHistoryDays =
    /* istanbul ignore next */
    (cov_1xj8r7cf0m().s[90]++, 365); // 1 year maximum
    const durationDays =
    /* istanbul ignore next */
    (cov_1xj8r7cf0m().s[91]++, (config.endTime.getTime() - config.startTime.getTime()) / (1000 * 60 * 60 * 24));
    /* istanbul ignore next */
    cov_1xj8r7cf0m().s[92]++;
    if (durationDays > maxHistoryDays) {
      /* istanbul ignore next */
      cov_1xj8r7cf0m().b[17][0]++;
      cov_1xj8r7cf0m().s[93]++;
      throw new Error(`Date range too large: ${durationDays} days > ${maxHistoryDays} days`);
    } else
    /* istanbul ignore next */
    {
      cov_1xj8r7cf0m().b[17][1]++;
    }
    cov_1xj8r7cf0m().s[94]++;
    if (
    /* istanbul ignore next */
    (cov_1xj8r7cf0m().b[19][0]++, config.batchSize <= 0) ||
    /* istanbul ignore next */
    (cov_1xj8r7cf0m().b[19][1]++, config.batchSize > 1000)) {
      /* istanbul ignore next */
      cov_1xj8r7cf0m().b[18][0]++;
      cov_1xj8r7cf0m().s[95]++;
      throw new Error('Batch size must be between 1 and 1000');
    } else
    /* istanbul ignore next */
    {
      cov_1xj8r7cf0m().b[18][1]++;
    }
  }
  /**
   * Calculate batches for data fetching
   */
  calculateBatches(config) {
    /* istanbul ignore next */
    cov_1xj8r7cf0m().f[10]++;
    const batches =
    /* istanbul ignore next */
    (cov_1xj8r7cf0m().s[96]++, []);
    const intervalMs =
    /* istanbul ignore next */
    (cov_1xj8r7cf0m().s[97]++, this.getIntervalMilliseconds(config.interval));
    const batchDuration =
    /* istanbul ignore next */
    (cov_1xj8r7cf0m().s[98]++, config.batchSize * intervalMs);
    let currentStart =
    /* istanbul ignore next */
    (cov_1xj8r7cf0m().s[99]++, new Date(config.startTime));
    /* istanbul ignore next */
    cov_1xj8r7cf0m().s[100]++;
    while (currentStart < config.endTime) {
      const currentEnd =
      /* istanbul ignore next */
      (cov_1xj8r7cf0m().s[101]++, new Date(Math.min(currentStart.getTime() + batchDuration, config.endTime.getTime())));
      /* istanbul ignore next */
      cov_1xj8r7cf0m().s[102]++;
      batches.push({
        start: new Date(currentStart),
        end: new Date(currentEnd)
      });
      /* istanbul ignore next */
      cov_1xj8r7cf0m().s[103]++;
      currentStart = new Date(currentEnd.getTime() + intervalMs);
    }
    /* istanbul ignore next */
    cov_1xj8r7cf0m().s[104]++;
    return batches;
  }
  /**
   * Fetch a single batch of data from Gate.io API
   */
  async fetchBatch(symbol, interval, startTime, endTime) {
    /* istanbul ignore next */
    cov_1xj8r7cf0m().f[11]++;
    cov_1xj8r7cf0m().s[105]++;
    this.fetchStatistics.totalRequests++;
    /* istanbul ignore next */
    cov_1xj8r7cf0m().s[106]++;
    try {
      // Convert to Gate.io API format
      const gateSymbol =
      /* istanbul ignore next */
      (cov_1xj8r7cf0m().s[107]++, symbol.replace('_', '_')); // Ensure correct format
      const from =
      /* istanbul ignore next */
      (cov_1xj8r7cf0m().s[108]++, Math.floor(startTime.getTime() / 1000));
      const to =
      /* istanbul ignore next */
      (cov_1xj8r7cf0m().s[109]++, Math.floor(endTime.getTime() / 1000));
      // Make API request for candlestick data
      const response =
      /* istanbul ignore next */
      (cov_1xj8r7cf0m().s[110]++, await this.gateIOClient.makeRequest({
        method: 'GET',
        url: `/spot/candlesticks`,
        params: {
          currency_pair: gateSymbol,
          interval: interval,
          from: from,
          to: to
        },
        requestType: 'PUBLIC',
        skipAuth: true
      }));
      // Convert Gate.io candlestick data to our format
      const historicalData =
      /* istanbul ignore next */
      (cov_1xj8r7cf0m().s[111]++, response.map(candle => {
        /* istanbul ignore next */
        cov_1xj8r7cf0m().f[12]++;
        const marketData =
        /* istanbul ignore next */
        (cov_1xj8r7cf0m().s[112]++, {
          symbol: symbol,
          timestamp: new Date(candle.timestamp * 1000),
          open: parseFloat(candle.open),
          high: parseFloat(candle.high),
          low: parseFloat(candle.low),
          close: parseFloat(candle.close),
          volume: parseFloat(candle.volume),
          validated: true,
          source: 'GATE_IO',
          integrity: this.calculateDataHash(candle),
          fetchedAt: new Date()
        });
        /* istanbul ignore next */
        cov_1xj8r7cf0m().s[113]++;
        return marketData;
      }));
      /* istanbul ignore next */
      cov_1xj8r7cf0m().s[114]++;
      logger_1.logger.debug(`📥 Fetched ${historicalData.length} data points for ${symbol} (${interval})`);
      /* istanbul ignore next */
      cov_1xj8r7cf0m().s[115]++;
      return historicalData;
    } catch (error) {
      /* istanbul ignore next */
      cov_1xj8r7cf0m().s[116]++;
      logger_1.logger.error(`❌ Failed to fetch batch for ${symbol}:`, error);
      /* istanbul ignore next */
      cov_1xj8r7cf0m().s[117]++;
      throw error;
    }
  }
  /**
   * Remove duplicate data points
   */
  removeDuplicates(data) {
    /* istanbul ignore next */
    cov_1xj8r7cf0m().f[13]++;
    const seen =
    /* istanbul ignore next */
    (cov_1xj8r7cf0m().s[118]++, new Set());
    const unique =
    /* istanbul ignore next */
    (cov_1xj8r7cf0m().s[119]++, []);
    /* istanbul ignore next */
    cov_1xj8r7cf0m().s[120]++;
    for (const point of data) {
      const key =
      /* istanbul ignore next */
      (cov_1xj8r7cf0m().s[121]++, `${point.symbol}_${point.timestamp.getTime()}`);
      /* istanbul ignore next */
      cov_1xj8r7cf0m().s[122]++;
      if (!seen.has(key)) {
        /* istanbul ignore next */
        cov_1xj8r7cf0m().b[20][0]++;
        cov_1xj8r7cf0m().s[123]++;
        seen.add(key);
        /* istanbul ignore next */
        cov_1xj8r7cf0m().s[124]++;
        unique.push(point);
      } else
      /* istanbul ignore next */
      {
        cov_1xj8r7cf0m().b[20][1]++;
      }
    }
    /* istanbul ignore next */
    cov_1xj8r7cf0m().s[125]++;
    return unique;
  }
  /**
   * Validate data integrity with cryptographic verification
   */
  async validateDataIntegrity(data) {
    /* istanbul ignore next */
    cov_1xj8r7cf0m().f[14]++;
    cov_1xj8r7cf0m().s[126]++;
    logger_1.logger.info('🔐 Validating data integrity...');
    const validatedData =
    /* istanbul ignore next */
    (cov_1xj8r7cf0m().s[127]++, []);
    /* istanbul ignore next */
    cov_1xj8r7cf0m().s[128]++;
    for (const point of data) {
      // Recalculate hash to verify integrity
      const expectedHash =
      /* istanbul ignore next */
      (cov_1xj8r7cf0m().s[129]++, this.calculateDataHash({
        timestamp: Math.floor(point.timestamp.getTime() / 1000),
        open: point.open.toString(),
        high: point.high.toString(),
        low: point.low.toString(),
        close: point.close.toString(),
        volume: point.volume.toString(),
        quote_volume: '0' // Not used in our calculation
      }));
      /* istanbul ignore next */
      cov_1xj8r7cf0m().s[130]++;
      if (point.integrity === expectedHash) {
        /* istanbul ignore next */
        cov_1xj8r7cf0m().b[21][0]++;
        cov_1xj8r7cf0m().s[131]++;
        validatedData.push({
          ...point,
          validated: true
        });
      } else {
        /* istanbul ignore next */
        cov_1xj8r7cf0m().b[21][1]++;
        cov_1xj8r7cf0m().s[132]++;
        logger_1.logger.warn(`⚠️ Data integrity check failed for ${point.symbol} at ${point.timestamp.toISOString()}`);
        /* istanbul ignore next */
        cov_1xj8r7cf0m().s[133]++;
        validatedData.push({
          ...point,
          validated: false
        });
      }
    }
    /* istanbul ignore next */
    cov_1xj8r7cf0m().s[134]++;
    logger_1.logger.info(`✅ Data integrity validation completed: ${validatedData.filter(d => {
      /* istanbul ignore next */
      cov_1xj8r7cf0m().f[15]++;
      cov_1xj8r7cf0m().s[135]++;
      return d.validated;
    }).length}/${validatedData.length} valid`);
    /* istanbul ignore next */
    cov_1xj8r7cf0m().s[136]++;
    return validatedData;
  }
  /**
   * Calculate cryptographic hash for data integrity
   */
  calculateDataHash(candle) {
    /* istanbul ignore next */
    cov_1xj8r7cf0m().f[16]++;
    const dataString =
    /* istanbul ignore next */
    (cov_1xj8r7cf0m().s[137]++, `${candle.timestamp}_${candle.open}_${candle.high}_${candle.low}_${candle.close}_${candle.volume}`);
    /* istanbul ignore next */
    cov_1xj8r7cf0m().s[138]++;
    return crypto_1.default.createHash('sha256').update(dataString).digest('hex');
  }
  /**
   * Check if a data point is valid
   */
  isValidDataPoint(point) {
    /* istanbul ignore next */
    cov_1xj8r7cf0m().f[17]++;
    cov_1xj8r7cf0m().s[139]++;
    // Check for valid OHLCV data
    if (
    /* istanbul ignore next */
    (cov_1xj8r7cf0m().b[23][0]++, point.open <= 0) ||
    /* istanbul ignore next */
    (cov_1xj8r7cf0m().b[23][1]++, point.high <= 0) ||
    /* istanbul ignore next */
    (cov_1xj8r7cf0m().b[23][2]++, point.low <= 0) ||
    /* istanbul ignore next */
    (cov_1xj8r7cf0m().b[23][3]++, point.close <= 0)) {
      /* istanbul ignore next */
      cov_1xj8r7cf0m().b[22][0]++;
      cov_1xj8r7cf0m().s[140]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_1xj8r7cf0m().b[22][1]++;
    }
    // Check OHLC relationships
    cov_1xj8r7cf0m().s[141]++;
    if (
    /* istanbul ignore next */
    (cov_1xj8r7cf0m().b[25][0]++, point.high < Math.max(point.open, point.close)) ||
    /* istanbul ignore next */
    (cov_1xj8r7cf0m().b[25][1]++, point.low > Math.min(point.open, point.close))) {
      /* istanbul ignore next */
      cov_1xj8r7cf0m().b[24][0]++;
      cov_1xj8r7cf0m().s[142]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_1xj8r7cf0m().b[24][1]++;
    }
    // Check for reasonable volume
    cov_1xj8r7cf0m().s[143]++;
    if (point.volume < 0) {
      /* istanbul ignore next */
      cov_1xj8r7cf0m().b[26][0]++;
      cov_1xj8r7cf0m().s[144]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_1xj8r7cf0m().b[26][1]++;
    }
    // Check timestamp validity
    cov_1xj8r7cf0m().s[145]++;
    if (
    /* istanbul ignore next */
    (cov_1xj8r7cf0m().b[28][0]++, point.timestamp > new Date()) ||
    /* istanbul ignore next */
    (cov_1xj8r7cf0m().b[28][1]++, point.timestamp < new Date('2009-01-01'))) {
      /* istanbul ignore next */
      cov_1xj8r7cf0m().b[27][0]++;
      cov_1xj8r7cf0m().s[146]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_1xj8r7cf0m().b[27][1]++;
    }
    cov_1xj8r7cf0m().s[147]++;
    return true;
  }
  /**
   * Detect gaps in historical data
   */
  detectDataGaps(data, maxGapMinutes) {
    /* istanbul ignore next */
    cov_1xj8r7cf0m().f[18]++;
    const gaps =
    /* istanbul ignore next */
    (cov_1xj8r7cf0m().s[148]++, []);
    /* istanbul ignore next */
    cov_1xj8r7cf0m().s[149]++;
    for (let i =
    /* istanbul ignore next */
    (cov_1xj8r7cf0m().s[150]++, 1); i < data.length; i++) {
      const prevTime =
      /* istanbul ignore next */
      (cov_1xj8r7cf0m().s[151]++, data[i - 1].timestamp.getTime());
      const currTime =
      /* istanbul ignore next */
      (cov_1xj8r7cf0m().s[152]++, data[i].timestamp.getTime());
      const gapMinutes =
      /* istanbul ignore next */
      (cov_1xj8r7cf0m().s[153]++, (currTime - prevTime) / (1000 * 60));
      /* istanbul ignore next */
      cov_1xj8r7cf0m().s[154]++;
      if (gapMinutes > maxGapMinutes) {
        /* istanbul ignore next */
        cov_1xj8r7cf0m().b[29][0]++;
        const severity =
        /* istanbul ignore next */
        (cov_1xj8r7cf0m().s[155]++, gapMinutes > maxGapMinutes * 3 ?
        /* istanbul ignore next */
        (cov_1xj8r7cf0m().b[30][0]++, 'HIGH') :
        /* istanbul ignore next */
        (cov_1xj8r7cf0m().b[30][1]++, gapMinutes > maxGapMinutes * 2 ?
        /* istanbul ignore next */
        (cov_1xj8r7cf0m().b[31][0]++, 'MEDIUM') :
        /* istanbul ignore next */
        (cov_1xj8r7cf0m().b[31][1]++, 'LOW')));
        /* istanbul ignore next */
        cov_1xj8r7cf0m().s[156]++;
        gaps.push({
          startTime: data[i - 1].timestamp,
          endTime: data[i].timestamp,
          durationMinutes: gapMinutes,
          severity,
          impact: `Missing ${Math.floor(gapMinutes / maxGapMinutes)} expected data points`
        });
      } else
      /* istanbul ignore next */
      {
        cov_1xj8r7cf0m().b[29][1]++;
      }
    }
    /* istanbul ignore next */
    cov_1xj8r7cf0m().s[157]++;
    return gaps;
  }
  /**
   * Calculate data integrity score
   */
  calculateIntegrityScore(validation) {
    /* istanbul ignore next */
    cov_1xj8r7cf0m().f[19]++;
    cov_1xj8r7cf0m().s[158]++;
    if (validation.totalPoints === 0) {
      /* istanbul ignore next */
      cov_1xj8r7cf0m().b[32][0]++;
      cov_1xj8r7cf0m().s[159]++;
      return 0;
    } else
    /* istanbul ignore next */
    {
      cov_1xj8r7cf0m().b[32][1]++;
    }
    const validRatio =
    /* istanbul ignore next */
    (cov_1xj8r7cf0m().s[160]++, validation.validPoints / validation.totalPoints);
    const gapPenalty =
    /* istanbul ignore next */
    (cov_1xj8r7cf0m().s[161]++, Math.min(validation.gaps.length * 0.1, 0.5));
    const errorPenalty =
    /* istanbul ignore next */
    (cov_1xj8r7cf0m().s[162]++, Math.min(validation.errors.length * 0.2, 0.8));
    /* istanbul ignore next */
    cov_1xj8r7cf0m().s[163]++;
    return Math.max(0, (validRatio - gapPenalty - errorPenalty) * 100);
  }
  /**
   * Determine optimal interval based on backtest duration
   */
  determineOptimalInterval(durationDays) {
    /* istanbul ignore next */
    cov_1xj8r7cf0m().f[20]++;
    cov_1xj8r7cf0m().s[164]++;
    if (durationDays <= 7) {
      /* istanbul ignore next */
      cov_1xj8r7cf0m().b[33][0]++;
      cov_1xj8r7cf0m().s[165]++;
      return '1m';
    } else
    /* istanbul ignore next */
    {
      cov_1xj8r7cf0m().b[33][1]++;
    }
    cov_1xj8r7cf0m().s[166]++;
    if (durationDays <= 30) {
      /* istanbul ignore next */
      cov_1xj8r7cf0m().b[34][0]++;
      cov_1xj8r7cf0m().s[167]++;
      return '5m';
    } else
    /* istanbul ignore next */
    {
      cov_1xj8r7cf0m().b[34][1]++;
    }
    cov_1xj8r7cf0m().s[168]++;
    if (durationDays <= 90) {
      /* istanbul ignore next */
      cov_1xj8r7cf0m().b[35][0]++;
      cov_1xj8r7cf0m().s[169]++;
      return '15m';
    } else
    /* istanbul ignore next */
    {
      cov_1xj8r7cf0m().b[35][1]++;
    }
    cov_1xj8r7cf0m().s[170]++;
    if (durationDays <= 180) {
      /* istanbul ignore next */
      cov_1xj8r7cf0m().b[36][0]++;
      cov_1xj8r7cf0m().s[171]++;
      return '1h';
    } else
    /* istanbul ignore next */
    {
      cov_1xj8r7cf0m().b[36][1]++;
    }
    cov_1xj8r7cf0m().s[172]++;
    return '4h';
  }
  /**
   * Get interval duration in milliseconds
   */
  getIntervalMilliseconds(interval) {
    /* istanbul ignore next */
    cov_1xj8r7cf0m().f[21]++;
    const intervals =
    /* istanbul ignore next */
    (cov_1xj8r7cf0m().s[173]++, {
      '1m': 60 * 1000,
      '5m': 5 * 60 * 1000,
      '15m': 15 * 60 * 1000,
      '30m': 30 * 60 * 1000,
      '1h': 60 * 60 * 1000,
      '4h': 4 * 60 * 60 * 1000,
      '8h': 8 * 60 * 60 * 1000,
      '1d': 24 * 60 * 60 * 1000
    });
    /* istanbul ignore next */
    cov_1xj8r7cf0m().s[174]++;
    return intervals[interval];
  }
  /**
   * Reset fetch statistics
   */
  resetStatistics() {
    /* istanbul ignore next */
    cov_1xj8r7cf0m().f[22]++;
    cov_1xj8r7cf0m().s[175]++;
    this.fetchStatistics = {
      totalRequests: 0,
      successfulRequests: 0,
      failedRequests: 0,
      totalDataPoints: 0,
      validDataPoints: 0,
      duplicatesRemoved: 0,
      gapsDetected: 0,
      fetchDuration: 0,
      averageRequestTime: 0
    };
  }
  /**
   * Delay execution for rate limiting
   */
  delay(ms) {
    /* istanbul ignore next */
    cov_1xj8r7cf0m().f[23]++;
    cov_1xj8r7cf0m().s[176]++;
    return new Promise(resolve => {
      /* istanbul ignore next */
      cov_1xj8r7cf0m().f[24]++;
      cov_1xj8r7cf0m().s[177]++;
      return setTimeout(resolve, ms);
    });
  }
  /**
   * Get fetch statistics
   */
  getFetchStatistics() {
    /* istanbul ignore next */
    cov_1xj8r7cf0m().f[25]++;
    cov_1xj8r7cf0m().s[178]++;
    return {
      ...this.fetchStatistics
    };
  }
}
/* istanbul ignore next */
cov_1xj8r7cf0m().s[179]++;
exports.HistoricalDataFetcher = HistoricalDataFetcher;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,