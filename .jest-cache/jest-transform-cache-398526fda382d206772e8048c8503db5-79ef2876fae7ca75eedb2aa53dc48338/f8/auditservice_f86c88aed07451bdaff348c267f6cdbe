7b1c6458e9eee15a9599bad22d121b7b
"use strict";

/**
 * =============================================================================
 * AI CRYPTO TRADING AGENT - COMPREHENSIVE AUDIT SERVICE
 * =============================================================================
 *
 * This service provides tamper-proof audit logging capabilities for the AI
 * crypto trading agent. It maintains comprehensive audit trails for all
 * security events, trading operations, and system activities.
 *
 * CRITICAL SECURITY NOTICE:
 * This service creates legal audit trails for financial operations.
 * All audit logs must be protected from tampering and maintained for
 * compliance with financial regulations.
 *
 * Features:
 * - Tamper-proof audit logging with hash chains
 * - Comprehensive event tracking and correlation
 * - Compliance reporting and data export
 * - Forensic analysis capabilities
 * - Automated integrity verification
 *
 * @author AI Crypto Trading System
 * @version 1.0.0
 * @license PROPRIETARY
 * =============================================================================
 */
/* istanbul ignore next */
function cov_9uxc2hz10() {
  var path = "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\audit-service.ts";
  var hash = "3350c2a10510066e0000f8b332a82597f45f0c41";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\audit-service.ts",
    statementMap: {
      "0": {
        start: {
          line: 28,
          column: 0
        },
        end: {
          line: 28,
          column: 62
        }
      },
      "1": {
        start: {
          line: 29,
          column: 0
        },
        end: {
          line: 29,
          column: 53
        }
      },
      "2": {
        start: {
          line: 30,
          column: 17
        },
        end: {
          line: 30,
          column: 34
        }
      },
      "3": {
        start: {
          line: 31,
          column: 17
        },
        end: {
          line: 31,
          column: 49
        }
      },
      "4": {
        start: {
          line: 32,
          column: 29
        },
        end: {
          line: 32,
          column: 69
        }
      },
      "5": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 32
        }
      },
      "6": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 42,
          column: 32
        }
      },
      "7": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 44,
          column: 36
        }
      },
      "8": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 46,
          column: 38
        }
      },
      "9": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 36
        }
      },
      "10": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 64,
          column: 9
        }
      },
      "11": {
        start: {
          line: 56,
          column: 34
        },
        end: {
          line: 57,
          column: 76
        }
      },
      "12": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 58,
          column: 69
        }
      },
      "13": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 59,
          column: 72
        }
      },
      "14": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 62,
          column: 82
        }
      },
      "15": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 63,
          column: 67
        }
      },
      "16": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 90,
          column: 9
        }
      },
      "17": {
        start: {
          line: 72,
          column: 30
        },
        end: {
          line: 72,
          column: 60
        }
      },
      "18": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 81,
          column: 13
        }
      },
      "19": {
        start: {
          line: 74,
          column: 16
        },
        end: {
          line: 74,
          column: 63
        }
      },
      "20": {
        start: {
          line: 75,
          column: 16
        },
        end: {
          line: 75,
          column: 59
        }
      },
      "21": {
        start: {
          line: 79,
          column: 16
        },
        end: {
          line: 79,
          column: 40
        }
      },
      "22": {
        start: {
          line: 80,
          column: 16
        },
        end: {
          line: 80,
          column: 65
        }
      },
      "23": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 85,
          column: 15
        }
      },
      "24": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 88,
          column: 80
        }
      },
      "25": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 89,
          column: 65
        }
      },
      "26": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 135,
          column: 9
        }
      },
      "27": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 102,
          column: 34
        }
      },
      "28": {
        start: {
          line: 104,
          column: 30
        },
        end: {
          line: 104,
          column: 65
        }
      },
      "29": {
        start: {
          line: 106,
          column: 35
        },
        end: {
          line: 106,
          column: 75
        }
      },
      "30": {
        start: {
          line: 108,
          column: 34
        },
        end: {
          line: 117,
          column: 13
        }
      },
      "31": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 119,
          column: 79
        }
      },
      "32": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 121,
          column: 73
        }
      },
      "33": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 123,
          column: 59
        }
      },
      "34": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 125,
          column: 54
        }
      },
      "35": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 127,
          column: 48
        }
      },
      "36": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 129,
          column: 46
        }
      },
      "37": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 130,
          column: 33
        }
      },
      "38": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 133,
          column: 76
        }
      },
      "39": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 134,
          column: 59
        }
      },
      "40": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 180,
          column: 9
        }
      },
      "41": {
        start: {
          line: 147,
          column: 27
        },
        end: {
          line: 147,
          column: 29
        }
      },
      "42": {
        start: {
          line: 148,
          column: 26
        },
        end: {
          line: 148,
          column: 30
        }
      },
      "43": {
        start: {
          line: 150,
          column: 28
        },
        end: {
          line: 153,
          column: 14
        }
      },
      "44": {
        start: {
          line: 154,
          column: 31
        },
        end: {
          line: 154,
          column: 85
        }
      },
      "45": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 174,
          column: 13
        }
      },
      "46": {
        start: {
          line: 157,
          column: 16
        },
        end: {
          line: 160,
          column: 17
        }
      },
      "47": {
        start: {
          line: 158,
          column: 20
        },
        end: {
          line: 158,
          column: 89
        }
      },
      "48": {
        start: {
          line: 159,
          column: 20
        },
        end: {
          line: 159,
          column: 36
        }
      },
      "49": {
        start: {
          line: 162,
          column: 39
        },
        end: {
          line: 162,
          column: 69
        }
      },
      "50": {
        start: {
          line: 163,
          column: 16
        },
        end: {
          line: 166,
          column: 17
        }
      },
      "51": {
        start: {
          line: 164,
          column: 20
        },
        end: {
          line: 164,
          column: 90
        }
      },
      "52": {
        start: {
          line: 165,
          column: 20
        },
        end: {
          line: 165,
          column: 36
        }
      },
      "53": {
        start: {
          line: 168,
          column: 44
        },
        end: {
          line: 168,
          column: 70
        }
      },
      "54": {
        start: {
          line: 169,
          column: 16
        },
        end: {
          line: 172,
          column: 17
        }
      },
      "55": {
        start: {
          line: 170,
          column: 20
        },
        end: {
          line: 170,
          column: 89
        }
      },
      "56": {
        start: {
          line: 171,
          column: 20
        },
        end: {
          line: 171,
          column: 36
        }
      },
      "57": {
        start: {
          line: 173,
          column: 16
        },
        end: {
          line: 173,
          column: 49
        }
      },
      "58": {
        start: {
          line: 175,
          column: 12
        },
        end: {
          line: 175,
          column: 39
        }
      },
      "59": {
        start: {
          line: 178,
          column: 12
        },
        end: {
          line: 178,
          column: 76
        }
      },
      "60": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 179,
          column: 79
        }
      },
      "61": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 198,
          column: 9
        }
      },
      "62": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 193,
          column: 22
        }
      },
      "63": {
        start: {
          line: 196,
          column: 12
        },
        end: {
          line: 196,
          column: 77
        }
      },
      "64": {
        start: {
          line: 197,
          column: 12
        },
        end: {
          line: 197,
          column: 50
        }
      },
      "65": {
        start: {
          line: 208,
          column: 8
        },
        end: {
          line: 224,
          column: 9
        }
      },
      "66": {
        start: {
          line: 211,
          column: 12
        },
        end: {
          line: 219,
          column: 14
        }
      },
      "67": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 222,
          column: 83
        }
      },
      "68": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 223,
          column: 66
        }
      },
      "69": {
        start: {
          line: 235,
          column: 8
        },
        end: {
          line: 251,
          column: 9
        }
      },
      "70": {
        start: {
          line: 236,
          column: 28
        },
        end: {
          line: 236,
          column: 61
        }
      },
      "71": {
        start: {
          line: 237,
          column: 12
        },
        end: {
          line: 246,
          column: 13
        }
      },
      "72": {
        start: {
          line: 239,
          column: 20
        },
        end: {
          line: 239,
          column: 60
        }
      },
      "73": {
        start: {
          line: 241,
          column: 20
        },
        end: {
          line: 241,
          column: 54
        }
      },
      "74": {
        start: {
          line: 243,
          column: 20
        },
        end: {
          line: 243,
          column: 54
        }
      },
      "75": {
        start: {
          line: 245,
          column: 20
        },
        end: {
          line: 245,
          column: 76
        }
      },
      "76": {
        start: {
          line: 249,
          column: 12
        },
        end: {
          line: 249,
          column: 75
        }
      },
      "77": {
        start: {
          line: 250,
          column: 12
        },
        end: {
          line: 250,
          column: 56
        }
      },
      "78": {
        start: {
          line: 261,
          column: 24
        },
        end: {
          line: 261,
          column: 25
        }
      },
      "79": {
        start: {
          line: 263,
          column: 29
        },
        end: {
          line: 274,
          column: 9
        }
      },
      "80": {
        start: {
          line: 275,
          column: 8
        },
        end: {
          line: 275,
          column: 60
        }
      },
      "81": {
        start: {
          line: 277,
          column: 8
        },
        end: {
          line: 279,
          column: 9
        }
      },
      "82": {
        start: {
          line: 278,
          column: 12
        },
        end: {
          line: 278,
          column: 27
        }
      },
      "83": {
        start: {
          line: 281,
          column: 8
        },
        end: {
          line: 283,
          column: 9
        }
      },
      "84": {
        start: {
          line: 282,
          column: 12
        },
        end: {
          line: 282,
          column: 27
        }
      },
      "85": {
        start: {
          line: 285,
          column: 8
        },
        end: {
          line: 285,
          column: 39
        }
      },
      "86": {
        start: {
          line: 295,
          column: 21
        },
        end: {
          line: 295,
          column: 23
        }
      },
      "87": {
        start: {
          line: 297,
          column: 8
        },
        end: {
          line: 299,
          column: 9
        }
      },
      "88": {
        start: {
          line: 298,
          column: 12
        },
        end: {
          line: 298,
          column: 47
        }
      },
      "89": {
        start: {
          line: 301,
          column: 8
        },
        end: {
          line: 303,
          column: 9
        }
      },
      "90": {
        start: {
          line: 302,
          column: 12
        },
        end: {
          line: 302,
          column: 40
        }
      },
      "91": {
        start: {
          line: 305,
          column: 8
        },
        end: {
          line: 307,
          column: 9
        }
      },
      "92": {
        start: {
          line: 306,
          column: 12
        },
        end: {
          line: 306,
          column: 41
        }
      },
      "93": {
        start: {
          line: 309,
          column: 8
        },
        end: {
          line: 311,
          column: 9
        }
      },
      "94": {
        start: {
          line: 310,
          column: 12
        },
        end: {
          line: 310,
          column: 35
        }
      },
      "95": {
        start: {
          line: 312,
          column: 8
        },
        end: {
          line: 312,
          column: 20
        }
      },
      "96": {
        start: {
          line: 322,
          column: 25
        },
        end: {
          line: 333,
          column: 9
        }
      },
      "97": {
        start: {
          line: 334,
          column: 8
        },
        end: {
          line: 336,
          column: 27
        }
      },
      "98": {
        start: {
          line: 346,
          column: 30
        },
        end: {
          line: 346,
          column: 93
        }
      },
      "99": {
        start: {
          line: 347,
          column: 8
        },
        end: {
          line: 349,
          column: 27
        }
      },
      "100": {
        start: {
          line: 358,
          column: 8
        },
        end: {
          line: 360,
          column: 27
        }
      },
      "101": {
        start: {
          line: 371,
          column: 8
        },
        end: {
          line: 374,
          column: 11
        }
      },
      "102": {
        start: {
          line: 385,
          column: 8
        },
        end: {
          line: 385,
          column: 20
        }
      },
      "103": {
        start: {
          line: 395,
          column: 8
        },
        end: {
          line: 398,
          column: 9
        }
      },
      "104": {
        start: {
          line: 396,
          column: 29
        },
        end: {
          line: 396,
          column: 64
        }
      },
      "105": {
        start: {
          line: 397,
          column: 12
        },
        end: {
          line: 397,
          column: 45
        }
      },
      "106": {
        start: {
          line: 399,
          column: 8
        },
        end: {
          line: 399,
          column: 50
        }
      },
      "107": {
        start: {
          line: 409,
          column: 8
        },
        end: {
          line: 410,
          column: 22
        }
      },
      "108": {
        start: {
          line: 410,
          column: 12
        },
        end: {
          line: 410,
          column: 22
        }
      },
      "109": {
        start: {
          line: 411,
          column: 24
        },
        end: {
          line: 411,
          column: 57
        }
      },
      "110": {
        start: {
          line: 412,
          column: 21
        },
        end: {
          line: 412,
          column: 153
        }
      },
      "111": {
        start: {
          line: 412,
          column: 42
        },
        end: {
          line: 412,
          column: 152
        }
      },
      "112": {
        start: {
          line: 412,
          column: 76
        },
        end: {
          line: 412,
          column: 141
        }
      },
      "113": {
        start: {
          line: 413,
          column: 8
        },
        end: {
          line: 413,
          column: 45
        }
      },
      "114": {
        start: {
          line: 423,
          column: 18
        },
        end: {
          line: 423,
          column: 76
        }
      },
      "115": {
        start: {
          line: 424,
          column: 8
        },
        end: {
          line: 432,
          column: 9
        }
      },
      "116": {
        start: {
          line: 425,
          column: 12
        },
        end: {
          line: 425,
          column: 38
        }
      },
      "117": {
        start: {
          line: 426,
          column: 12
        },
        end: {
          line: 430,
          column: 13
        }
      },
      "118": {
        start: {
          line: 427,
          column: 33
        },
        end: {
          line: 428,
          column: 57
        }
      },
      "119": {
        start: {
          line: 429,
          column: 16
        },
        end: {
          line: 429,
          column: 60
        }
      },
      "120": {
        start: {
          line: 431,
          column: 12
        },
        end: {
          line: 431,
          column: 39
        }
      },
      "121": {
        start: {
          line: 433,
          column: 8
        },
        end: {
          line: 433,
          column: 33
        }
      },
      "122": {
        start: {
          line: 434,
          column: 8
        },
        end: {
          line: 434,
          column: 19
        }
      },
      "123": {
        start: {
          line: 444,
          column: 27
        },
        end: {
          line: 454,
          column: 9
        }
      },
      "124": {
        start: {
          line: 455,
          column: 8
        },
        end: {
          line: 455,
          column: 48
        }
      },
      "125": {
        start: {
          line: 465,
          column: 27
        },
        end: {
          line: 478,
          column: 9
        }
      },
      "126": {
        start: {
          line: 479,
          column: 8
        },
        end: {
          line: 479,
          column: 48
        }
      },
      "127": {
        start: {
          line: 489,
          column: 27
        },
        end: {
          line: 502,
          column: 9
        }
      },
      "128": {
        start: {
          line: 503,
          column: 8
        },
        end: {
          line: 503,
          column: 48
        }
      },
      "129": {
        start: {
          line: 512,
          column: 26
        },
        end: {
          line: 512,
          column: 49
        }
      },
      "130": {
        start: {
          line: 513,
          column: 23
        },
        end: {
          line: 513,
          column: 62
        }
      },
      "131": {
        start: {
          line: 514,
          column: 8
        },
        end: {
          line: 514,
          column: 46
        }
      },
      "132": {
        start: {
          line: 523,
          column: 8
        },
        end: {
          line: 528,
          column: 10
        }
      },
      "133": {
        start: {
          line: 531,
          column: 0
        },
        end: {
          line: 531,
          column: 36
        }
      },
      "134": {
        start: {
          line: 533,
          column: 0
        },
        end: {
          line: 533,
          column: 35
        }
      },
      "135": {
        start: {
          line: 535,
          column: 0
        },
        end: {
          line: 535,
          column: 42
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 38,
            column: 4
          },
          end: {
            line: 38,
            column: 5
          }
        },
        loc: {
          start: {
            line: 38,
            column: 18
          },
          end: {
            line: 49,
            column: 5
          }
        },
        line: 38
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 53,
            column: 4
          },
          end: {
            line: 53,
            column: 5
          }
        },
        loc: {
          start: {
            line: 53,
            column: 35
          },
          end: {
            line: 65,
            column: 5
          }
        },
        line: 53
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 69,
            column: 4
          },
          end: {
            line: 69,
            column: 5
          }
        },
        loc: {
          start: {
            line: 69,
            column: 33
          },
          end: {
            line: 91,
            column: 5
          }
        },
        line: 69
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 99,
            column: 4
          },
          end: {
            line: 99,
            column: 5
          }
        },
        loc: {
          start: {
            line: 99,
            column: 39
          },
          end: {
            line: 136,
            column: 5
          }
        },
        line: 99
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 145,
            column: 4
          },
          end: {
            line: 145,
            column: 5
          }
        },
        loc: {
          start: {
            line: 145,
            column: 55
          },
          end: {
            line: 181,
            column: 5
          }
        },
        line: 145
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 189,
            column: 4
          },
          end: {
            line: 189,
            column: 5
          }
        },
        loc: {
          start: {
            line: 189,
            column: 38
          },
          end: {
            line: 199,
            column: 5
          }
        },
        line: 189
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 207,
            column: 4
          },
          end: {
            line: 207,
            column: 5
          }
        },
        loc: {
          start: {
            line: 207,
            column: 36
          },
          end: {
            line: 225,
            column: 5
          }
        },
        line: 207
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 234,
            column: 4
          },
          end: {
            line: 234,
            column: 5
          }
        },
        loc: {
          start: {
            line: 234,
            column: 50
          },
          end: {
            line: 252,
            column: 5
          }
        },
        line: 234
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 260,
            column: 4
          },
          end: {
            line: 260,
            column: 5
          }
        },
        loc: {
          start: {
            line: 260,
            column: 35
          },
          end: {
            line: 286,
            column: 5
          }
        },
        line: 260
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 294,
            column: 4
          },
          end: {
            line: 294,
            column: 5
          }
        },
        loc: {
          start: {
            line: 294,
            column: 40
          },
          end: {
            line: 313,
            column: 5
          }
        },
        line: 294
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 321,
            column: 4
          },
          end: {
            line: 321,
            column: 5
          }
        },
        loc: {
          start: {
            line: 321,
            column: 30
          },
          end: {
            line: 337,
            column: 5
          }
        },
        line: 321
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 345,
            column: 4
          },
          end: {
            line: 345,
            column: 5
          }
        },
        loc: {
          start: {
            line: 345,
            column: 26
          },
          end: {
            line: 350,
            column: 5
          }
        },
        line: 345
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 357,
            column: 4
          },
          end: {
            line: 357,
            column: 5
          }
        },
        loc: {
          start: {
            line: 357,
            column: 27
          },
          end: {
            line: 361,
            column: 5
          }
        },
        line: 357
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 368,
            column: 4
          },
          end: {
            line: 368,
            column: 5
          }
        },
        loc: {
          start: {
            line: 368,
            column: 33
          },
          end: {
            line: 375,
            column: 5
          }
        },
        line: 368
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 382,
            column: 4
          },
          end: {
            line: 382,
            column: 5
          }
        },
        loc: {
          start: {
            line: 382,
            column: 30
          },
          end: {
            line: 386,
            column: 5
          }
        },
        line: 382
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 393,
            column: 4
          },
          end: {
            line: 393,
            column: 5
          }
        },
        loc: {
          start: {
            line: 393,
            column: 27
          },
          end: {
            line: 400,
            column: 5
          }
        },
        line: 393
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 408,
            column: 4
          },
          end: {
            line: 408,
            column: 5
          }
        },
        loc: {
          start: {
            line: 408,
            column: 26
          },
          end: {
            line: 414,
            column: 5
          }
        },
        line: 408
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 412,
            column: 33
          },
          end: {
            line: 412,
            column: 34
          }
        },
        loc: {
          start: {
            line: 412,
            column: 42
          },
          end: {
            line: 412,
            column: 152
          }
        },
        line: 412
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 412,
            column: 67
          },
          end: {
            line: 412,
            column: 68
          }
        },
        loc: {
          start: {
            line: 412,
            column: 76
          },
          end: {
            line: 412,
            column: 141
          }
        },
        line: 412
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 422,
            column: 4
          },
          end: {
            line: 422,
            column: 5
          }
        },
        loc: {
          start: {
            line: 422,
            column: 26
          },
          end: {
            line: 435,
            column: 5
          }
        },
        line: 422
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 443,
            column: 4
          },
          end: {
            line: 443,
            column: 5
          }
        },
        loc: {
          start: {
            line: 443,
            column: 34
          },
          end: {
            line: 456,
            column: 5
          }
        },
        line: 443
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 464,
            column: 4
          },
          end: {
            line: 464,
            column: 5
          }
        },
        loc: {
          start: {
            line: 464,
            column: 33
          },
          end: {
            line: 480,
            column: 5
          }
        },
        line: 464
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 488,
            column: 4
          },
          end: {
            line: 488,
            column: 5
          }
        },
        loc: {
          start: {
            line: 488,
            column: 35
          },
          end: {
            line: 504,
            column: 5
          }
        },
        line: 488
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 511,
            column: 4
          },
          end: {
            line: 511,
            column: 5
          }
        },
        loc: {
          start: {
            line: 511,
            column: 22
          },
          end: {
            line: 515,
            column: 5
          }
        },
        line: 511
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 522,
            column: 4
          },
          end: {
            line: 522,
            column: 5
          }
        },
        loc: {
          start: {
            line: 522,
            column: 16
          },
          end: {
            line: 529,
            column: 5
          }
        },
        line: 522
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 56,
            column: 34
          },
          end: {
            line: 57,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 56,
            column: 34
          },
          end: {
            line: 56,
            column: 63
          }
        }, {
          start: {
            line: 57,
            column: 16
          },
          end: {
            line: 57,
            column: 76
          }
        }],
        line: 56
      },
      "1": {
        loc: {
          start: {
            line: 73,
            column: 12
          },
          end: {
            line: 81,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 73,
            column: 12
          },
          end: {
            line: 81,
            column: 13
          }
        }, {
          start: {
            line: 77,
            column: 17
          },
          end: {
            line: 81,
            column: 13
          }
        }],
        line: 73
      },
      "2": {
        loc: {
          start: {
            line: 151,
            column: 23
          },
          end: {
            line: 151,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 151,
            column: 37
          },
          end: {
            line: 151,
            column: 71
          }
        }, {
          start: {
            line: 151,
            column: 74
          },
          end: {
            line: 151,
            column: 83
          }
        }],
        line: 151
      },
      "3": {
        loc: {
          start: {
            line: 151,
            column: 52
          },
          end: {
            line: 151,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 151,
            column: 52
          },
          end: {
            line: 151,
            column: 65
          }
        }, {
          start: {
            line: 151,
            column: 69
          },
          end: {
            line: 151,
            column: 70
          }
        }],
        line: 151
      },
      "4": {
        loc: {
          start: {
            line: 152,
            column: 24
          },
          end: {
            line: 152,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 152,
            column: 24
          },
          end: {
            line: 152,
            column: 37
          }
        }, {
          start: {
            line: 152,
            column: 41
          },
          end: {
            line: 152,
            column: 42
          }
        }],
        line: 152
      },
      "5": {
        loc: {
          start: {
            line: 154,
            column: 31
          },
          end: {
            line: 154,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 154,
            column: 53
          },
          end: {
            line: 154,
            column: 80
          }
        }, {
          start: {
            line: 154,
            column: 83
          },
          end: {
            line: 154,
            column: 85
          }
        }],
        line: 154
      },
      "6": {
        loc: {
          start: {
            line: 157,
            column: 16
          },
          end: {
            line: 160,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 157,
            column: 16
          },
          end: {
            line: 160,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 157
      },
      "7": {
        loc: {
          start: {
            line: 163,
            column: 16
          },
          end: {
            line: 166,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 163,
            column: 16
          },
          end: {
            line: 166,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 163
      },
      "8": {
        loc: {
          start: {
            line: 169,
            column: 16
          },
          end: {
            line: 172,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 169,
            column: 16
          },
          end: {
            line: 172,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 169
      },
      "9": {
        loc: {
          start: {
            line: 189,
            column: 26
          },
          end: {
            line: 189,
            column: 36
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 189,
            column: 34
          },
          end: {
            line: 189,
            column: 36
          }
        }],
        line: 189
      },
      "10": {
        loc: {
          start: {
            line: 234,
            column: 33
          },
          end: {
            line: 234,
            column: 48
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 234,
            column: 42
          },
          end: {
            line: 234,
            column: 48
          }
        }],
        line: 234
      },
      "11": {
        loc: {
          start: {
            line: 237,
            column: 12
          },
          end: {
            line: 246,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 238,
            column: 16
          },
          end: {
            line: 239,
            column: 60
          }
        }, {
          start: {
            line: 240,
            column: 16
          },
          end: {
            line: 241,
            column: 54
          }
        }, {
          start: {
            line: 242,
            column: 16
          },
          end: {
            line: 243,
            column: 54
          }
        }, {
          start: {
            line: 244,
            column: 16
          },
          end: {
            line: 245,
            column: 76
          }
        }],
        line: 237
      },
      "12": {
        loc: {
          start: {
            line: 275,
            column: 20
          },
          end: {
            line: 275,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 275,
            column: 20
          },
          end: {
            line: 275,
            column: 54
          }
        }, {
          start: {
            line: 275,
            column: 58
          },
          end: {
            line: 275,
            column: 59
          }
        }],
        line: 275
      },
      "13": {
        loc: {
          start: {
            line: 277,
            column: 8
          },
          end: {
            line: 279,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 277,
            column: 8
          },
          end: {
            line: 279,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 277
      },
      "14": {
        loc: {
          start: {
            line: 281,
            column: 8
          },
          end: {
            line: 283,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 281,
            column: 8
          },
          end: {
            line: 283,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 281
      },
      "15": {
        loc: {
          start: {
            line: 297,
            column: 8
          },
          end: {
            line: 299,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 297,
            column: 8
          },
          end: {
            line: 299,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 297
      },
      "16": {
        loc: {
          start: {
            line: 297,
            column: 12
          },
          end: {
            line: 297,
            column: 91
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 297,
            column: 12
          },
          end: {
            line: 297,
            column: 50
          }
        }, {
          start: {
            line: 297,
            column: 54
          },
          end: {
            line: 297,
            column: 91
          }
        }],
        line: 297
      },
      "17": {
        loc: {
          start: {
            line: 301,
            column: 8
          },
          end: {
            line: 303,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 301,
            column: 8
          },
          end: {
            line: 303,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 301
      },
      "18": {
        loc: {
          start: {
            line: 301,
            column: 12
          },
          end: {
            line: 301,
            column: 95
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 301,
            column: 12
          },
          end: {
            line: 301,
            column: 53
          }
        }, {
          start: {
            line: 301,
            column: 57
          },
          end: {
            line: 301,
            column: 95
          }
        }],
        line: 301
      },
      "19": {
        loc: {
          start: {
            line: 305,
            column: 8
          },
          end: {
            line: 307,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 305,
            column: 8
          },
          end: {
            line: 307,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 305
      },
      "20": {
        loc: {
          start: {
            line: 305,
            column: 12
          },
          end: {
            line: 305,
            column: 96
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 305,
            column: 12
          },
          end: {
            line: 305,
            column: 55
          }
        }, {
          start: {
            line: 305,
            column: 59
          },
          end: {
            line: 305,
            column: 96
          }
        }],
        line: 305
      },
      "21": {
        loc: {
          start: {
            line: 309,
            column: 8
          },
          end: {
            line: 311,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 309,
            column: 8
          },
          end: {
            line: 311,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 309
      },
      "22": {
        loc: {
          start: {
            line: 395,
            column: 8
          },
          end: {
            line: 398,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 395,
            column: 8
          },
          end: {
            line: 398,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 395
      },
      "23": {
        loc: {
          start: {
            line: 409,
            column: 8
          },
          end: {
            line: 410,
            column: 22
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 409,
            column: 8
          },
          end: {
            line: 410,
            column: 22
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 409
      },
      "24": {
        loc: {
          start: {
            line: 412,
            column: 76
          },
          end: {
            line: 412,
            column: 141
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 412,
            column: 104
          },
          end: {
            line: 412,
            column: 125
          }
        }, {
          start: {
            line: 412,
            column: 128
          },
          end: {
            line: 412,
            column: 141
          }
        }],
        line: 412
      },
      "25": {
        loc: {
          start: {
            line: 427,
            column: 33
          },
          end: {
            line: 428,
            column: 57
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 428,
            column: 20
          },
          end: {
            line: 428,
            column: 41
          }
        }, {
          start: {
            line: 428,
            column: 44
          },
          end: {
            line: 428,
            column: 57
          }
        }],
        line: 427
      },
      "26": {
        loc: {
          start: {
            line: 468,
            column: 19
          },
          end: {
            line: 468,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 468,
            column: 19
          },
          end: {
            line: 468,
            column: 33
          }
        }, {
          start: {
            line: 468,
            column: 37
          },
          end: {
            line: 468,
            column: 45
          }
        }],
        line: 468
      },
      "27": {
        loc: {
          start: {
            line: 492,
            column: 19
          },
          end: {
            line: 492,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 492,
            column: 19
          },
          end: {
            line: 492,
            column: 34
          }
        }, {
          start: {
            line: 492,
            column: 38
          },
          end: {
            line: 492,
            column: 46
          }
        }],
        line: 492
      },
      "28": {
        loc: {
          start: {
            line: 495,
            column: 20
          },
          end: {
            line: 495,
            column: 69
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 495,
            column: 48
          },
          end: {
            line: 495,
            column: 57
          }
        }, {
          start: {
            line: 495,
            column: 60
          },
          end: {
            line: 495,
            column: 69
          }
        }],
        line: 495
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0],
      "10": [0],
      "11": [0, 0, 0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "3350c2a10510066e0000f8b332a82597f45f0c41"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_9uxc2hz10 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_9uxc2hz10();
cov_9uxc2hz10().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_9uxc2hz10().s[1]++;
exports.auditService = exports.AuditService = void 0;
const crypto_1 =
/* istanbul ignore next */
(cov_9uxc2hz10().s[2]++, require("crypto"));
const logger_1 =
/* istanbul ignore next */
(cov_9uxc2hz10().s[3]++, require("@/core/logging/logger"));
const encryption_service_1 =
/* istanbul ignore next */
(cov_9uxc2hz10().s[4]++, require("@/security/encryption-service"));
/**
 * Comprehensive audit service with tamper-proof logging
 * Provides secure audit trail capabilities for compliance and forensics
 */
class AuditService {
  constructor() {
    /* istanbul ignore next */
    cov_9uxc2hz10().f[0]++;
    cov_9uxc2hz10().s[5]++;
    /** Current sequence number for audit entries */
    this.sequenceNumber = 0;
    /** Hash of the last audit entry for chain integrity */
    /* istanbul ignore next */
    cov_9uxc2hz10().s[6]++;
    this.lastEntryHash = '';
    /** In-memory audit cache for performance */
    /* istanbul ignore next */
    cov_9uxc2hz10().s[7]++;
    this.auditCache = new Map();
    // Initialize audit signing key
    /* istanbul ignore next */
    cov_9uxc2hz10().s[8]++;
    this.initializeAuditSigning();
    // Load last sequence number and hash
    /* istanbul ignore next */
    cov_9uxc2hz10().s[9]++;
    this.initializeAuditChain();
  }
  /**
   * Initialize audit signing key for tamper-proof signatures
   */
  async initializeAuditSigning() {
    /* istanbul ignore next */
    cov_9uxc2hz10().f[1]++;
    cov_9uxc2hz10().s[10]++;
    try {
      // Generate or retrieve audit signing key
      const signingKeyHex =
      /* istanbul ignore next */
      (cov_9uxc2hz10().s[11]++,
      /* istanbul ignore next */
      (cov_9uxc2hz10().b[0][0]++, process.env.AUDIT_SIGNING_KEY) ||
      /* istanbul ignore next */
      (cov_9uxc2hz10().b[0][1]++, encryption_service_1.encryptionService.generateSecureKey(32)));
      /* istanbul ignore next */
      cov_9uxc2hz10().s[12]++;
      this.auditSigningKey = Buffer.from(signingKeyHex, 'hex');
      /* istanbul ignore next */
      cov_9uxc2hz10().s[13]++;
      logger_1.logger.info('🔐 Audit signing system initialized');
    } catch (error) {
      /* istanbul ignore next */
      cov_9uxc2hz10().s[14]++;
      logger_1.logger.error('❌ Failed to initialize audit signing:', error);
      /* istanbul ignore next */
      cov_9uxc2hz10().s[15]++;
      throw new Error('Audit service initialization failed');
    }
  }
  /**
   * Initialize audit chain by loading last entry
   */
  async initializeAuditChain() {
    /* istanbul ignore next */
    cov_9uxc2hz10().f[2]++;
    cov_9uxc2hz10().s[16]++;
    try {
      // Load last audit entry to continue chain
      const lastEntry =
      /* istanbul ignore next */
      (cov_9uxc2hz10().s[17]++, await this.getLastAuditEntry());
      /* istanbul ignore next */
      cov_9uxc2hz10().s[18]++;
      if (lastEntry) {
        /* istanbul ignore next */
        cov_9uxc2hz10().b[1][0]++;
        cov_9uxc2hz10().s[19]++;
        this.sequenceNumber = lastEntry.sequenceNumber;
        /* istanbul ignore next */
        cov_9uxc2hz10().s[20]++;
        this.lastEntryHash = lastEntry.currentHash;
      } else {
        /* istanbul ignore next */
        cov_9uxc2hz10().b[1][1]++;
        cov_9uxc2hz10().s[21]++;
        // Initialize genesis entry
        this.sequenceNumber = 0;
        /* istanbul ignore next */
        cov_9uxc2hz10().s[22]++;
        this.lastEntryHash = this.calculateGenesisHash();
      }
      /* istanbul ignore next */
      cov_9uxc2hz10().s[23]++;
      logger_1.logger.info('🔗 Audit chain initialized', {
        sequenceNumber: this.sequenceNumber,
        lastHash: this.lastEntryHash.substring(0, 16) + '...'
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_9uxc2hz10().s[24]++;
      logger_1.logger.error('❌ Failed to initialize audit chain:', error);
      /* istanbul ignore next */
      cov_9uxc2hz10().s[25]++;
      throw new Error('Audit chain initialization failed');
    }
  }
  /**
   * Create tamper-proof audit entry
   * Generates audit entry with hash chain and digital signature
   *
   * @param auditEntry - Basic audit entry data
   * @returns Promise<EnhancedAuditEntry> Enhanced audit entry with security fields
   */
  async createAuditEntry(auditEntry) {
    /* istanbul ignore next */
    cov_9uxc2hz10().f[3]++;
    cov_9uxc2hz10().s[26]++;
    try {
      /* istanbul ignore next */
      cov_9uxc2hz10().s[27]++;
      // Increment sequence number
      this.sequenceNumber++;
      // Calculate risk score
      const riskScore =
      /* istanbul ignore next */
      (cov_9uxc2hz10().s[28]++, this.calculateRiskScore(auditEntry));
      // Determine compliance tags
      const complianceTags =
      /* istanbul ignore next */
      (cov_9uxc2hz10().s[29]++, this.determineComplianceTags(auditEntry));
      // Create enhanced audit entry
      const enhancedEntry =
      /* istanbul ignore next */
      (cov_9uxc2hz10().s[30]++, {
        ...auditEntry,
        sequenceNumber: this.sequenceNumber,
        previousHash: this.lastEntryHash,
        currentHash: '',
        // Will be calculated
        signature: '',
        // Will be calculated
        riskScore,
        complianceTags,
        relatedEntries: []
      });
      // Calculate current hash
      /* istanbul ignore next */
      cov_9uxc2hz10().s[31]++;
      enhancedEntry.currentHash = this.calculateEntryHash(enhancedEntry);
      // Generate digital signature
      /* istanbul ignore next */
      cov_9uxc2hz10().s[32]++;
      enhancedEntry.signature = this.signAuditEntry(enhancedEntry);
      // Update last entry hash for chain
      /* istanbul ignore next */
      cov_9uxc2hz10().s[33]++;
      this.lastEntryHash = enhancedEntry.currentHash;
      // Store audit entry
      /* istanbul ignore next */
      cov_9uxc2hz10().s[34]++;
      await this.storeAuditEntry(enhancedEntry);
      // Cache for performance
      /* istanbul ignore next */
      cov_9uxc2hz10().s[35]++;
      this.cacheAuditEntry(enhancedEntry);
      // Log to standard audit logger
      /* istanbul ignore next */
      cov_9uxc2hz10().s[36]++;
      logger_1.logger.audit(auditEntry);
      /* istanbul ignore next */
      cov_9uxc2hz10().s[37]++;
      return enhancedEntry;
    } catch (error) {
      /* istanbul ignore next */
      cov_9uxc2hz10().s[38]++;
      logger_1.logger.error('❌ Failed to create audit entry:', error);
      /* istanbul ignore next */
      cov_9uxc2hz10().s[39]++;
      throw new Error('Audit entry creation failed');
    }
  }
  /**
   * Verify audit chain integrity
   * Checks hash chain and signatures for tampering
   *
   * @param startSequence - Starting sequence number (optional)
   * @param endSequence - Ending sequence number (optional)
   * @returns Promise<{ isValid: boolean; errors: string[] }> Verification result
   */
  async verifyAuditChain(startSequence, endSequence) {
    /* istanbul ignore next */
    cov_9uxc2hz10().f[4]++;
    cov_9uxc2hz10().s[40]++;
    try {
      const errors =
      /* istanbul ignore next */
      (cov_9uxc2hz10().s[41]++, []);
      let isValid =
      /* istanbul ignore next */
      (cov_9uxc2hz10().s[42]++, true);
      // Get audit entries in sequence
      const entries =
      /* istanbul ignore next */
      (cov_9uxc2hz10().s[43]++, await this.getAuditEntries({
        limit: endSequence ?
        /* istanbul ignore next */
        (cov_9uxc2hz10().b[2][0]++, endSequence - (
        /* istanbul ignore next */
        (cov_9uxc2hz10().b[3][0]++, startSequence) ||
        /* istanbul ignore next */
        (cov_9uxc2hz10().b[3][1]++, 0))) :
        /* istanbul ignore next */
        (cov_9uxc2hz10().b[2][1]++, undefined),
        offset:
        /* istanbul ignore next */
        (cov_9uxc2hz10().b[4][0]++, startSequence) ||
        /* istanbul ignore next */
        (cov_9uxc2hz10().b[4][1]++, 0)
      }));
      let previousHash =
      /* istanbul ignore next */
      (cov_9uxc2hz10().s[44]++, startSequence === 0 ?
      /* istanbul ignore next */
      (cov_9uxc2hz10().b[5][0]++, this.calculateGenesisHash()) :
      /* istanbul ignore next */
      (cov_9uxc2hz10().b[5][1]++, ''));
      /* istanbul ignore next */
      cov_9uxc2hz10().s[45]++;
      for (const entry of entries) {
        /* istanbul ignore next */
        cov_9uxc2hz10().s[46]++;
        // Verify hash chain
        if (entry.previousHash !== previousHash) {
          /* istanbul ignore next */
          cov_9uxc2hz10().b[6][0]++;
          cov_9uxc2hz10().s[47]++;
          errors.push(`Hash chain broken at sequence ${entry.sequenceNumber}`);
          /* istanbul ignore next */
          cov_9uxc2hz10().s[48]++;
          isValid = false;
        } else
        /* istanbul ignore next */
        {
          cov_9uxc2hz10().b[6][1]++;
        }
        // Verify entry hash
        const calculatedHash =
        /* istanbul ignore next */
        (cov_9uxc2hz10().s[49]++, this.calculateEntryHash(entry));
        /* istanbul ignore next */
        cov_9uxc2hz10().s[50]++;
        if (entry.currentHash !== calculatedHash) {
          /* istanbul ignore next */
          cov_9uxc2hz10().b[7][0]++;
          cov_9uxc2hz10().s[51]++;
          errors.push(`Entry hash invalid at sequence ${entry.sequenceNumber}`);
          /* istanbul ignore next */
          cov_9uxc2hz10().s[52]++;
          isValid = false;
        } else
        /* istanbul ignore next */
        {
          cov_9uxc2hz10().b[7][1]++;
        }
        // Verify signature
        const calculatedSignature =
        /* istanbul ignore next */
        (cov_9uxc2hz10().s[53]++, this.signAuditEntry(entry));
        /* istanbul ignore next */
        cov_9uxc2hz10().s[54]++;
        if (entry.signature !== calculatedSignature) {
          /* istanbul ignore next */
          cov_9uxc2hz10().b[8][0]++;
          cov_9uxc2hz10().s[55]++;
          errors.push(`Signature invalid at sequence ${entry.sequenceNumber}`);
          /* istanbul ignore next */
          cov_9uxc2hz10().s[56]++;
          isValid = false;
        } else
        /* istanbul ignore next */
        {
          cov_9uxc2hz10().b[8][1]++;
        }
        cov_9uxc2hz10().s[57]++;
        previousHash = entry.currentHash;
      }
      /* istanbul ignore next */
      cov_9uxc2hz10().s[58]++;
      return {
        isValid,
        errors
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_9uxc2hz10().s[59]++;
      logger_1.logger.error('❌ Failed to verify audit chain:', error);
      /* istanbul ignore next */
      cov_9uxc2hz10().s[60]++;
      return {
        isValid: false,
        errors: ['Verification process failed']
      };
    }
  }
  /**
   * Query audit entries with filtering
   * Retrieves audit entries based on specified criteria
   *
   * @param query - Query parameters
   * @returns Promise<EnhancedAuditEntry[]> Matching audit entries
   */
  async getAuditEntries(query =
  /* istanbul ignore next */
  (cov_9uxc2hz10().b[9][0]++, {})) {
    /* istanbul ignore next */
    cov_9uxc2hz10().f[5]++;
    cov_9uxc2hz10().s[61]++;
    try {
      /* istanbul ignore next */
      cov_9uxc2hz10().s[62]++;
      // Implementation would query secure audit database
      // For now, return empty array as placeholder
      return [];
    } catch (error) {
      /* istanbul ignore next */
      cov_9uxc2hz10().s[63]++;
      logger_1.logger.error('❌ Failed to query audit entries:', error);
      /* istanbul ignore next */
      cov_9uxc2hz10().s[64]++;
      throw new Error('Audit query failed');
    }
  }
  /**
   * Generate audit statistics
   * Provides comprehensive statistics about audit data
   *
   * @param query - Optional query to filter statistics
   * @returns Promise<AuditStatistics> Audit statistics
   */
  async getAuditStatistics(query) {
    /* istanbul ignore next */
    cov_9uxc2hz10().f[6]++;
    cov_9uxc2hz10().s[65]++;
    try {
      /* istanbul ignore next */
      cov_9uxc2hz10().s[66]++;
      // Implementation would analyze audit database
      // For now, return placeholder statistics
      return {
        totalEntries: this.sequenceNumber,
        entriesByType: {},
        entriesByResult: {},
        averageRiskScore: 0,
        highRiskEntries: 0,
        failedOperations: 0,
        timeRange: {
          start: new Date(),
          end: new Date()
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_9uxc2hz10().s[67]++;
      logger_1.logger.error('❌ Failed to generate audit statistics:', error);
      /* istanbul ignore next */
      cov_9uxc2hz10().s[68]++;
      throw new Error('Audit statistics generation failed');
    }
  }
  /**
   * Export audit data for compliance
   * Generates audit reports in various formats
   *
   * @param query - Query parameters for export
   * @param format - Export format ('json', 'csv', 'xml')
   * @returns Promise<string> Exported audit data
   */
  async exportAuditData(query, format =
  /* istanbul ignore next */
  (cov_9uxc2hz10().b[10][0]++, 'json')) {
    /* istanbul ignore next */
    cov_9uxc2hz10().f[7]++;
    cov_9uxc2hz10().s[69]++;
    try {
      const entries =
      /* istanbul ignore next */
      (cov_9uxc2hz10().s[70]++, await this.getAuditEntries(query));
      /* istanbul ignore next */
      cov_9uxc2hz10().s[71]++;
      switch (format) {
        case 'json':
          /* istanbul ignore next */
          cov_9uxc2hz10().b[11][0]++;
          cov_9uxc2hz10().s[72]++;
          return JSON.stringify(entries, null, 2);
        case 'csv':
          /* istanbul ignore next */
          cov_9uxc2hz10().b[11][1]++;
          cov_9uxc2hz10().s[73]++;
          return this.convertToCSV(entries);
        case 'xml':
          /* istanbul ignore next */
          cov_9uxc2hz10().b[11][2]++;
          cov_9uxc2hz10().s[74]++;
          return this.convertToXML(entries);
        default:
          /* istanbul ignore next */
          cov_9uxc2hz10().b[11][3]++;
          cov_9uxc2hz10().s[75]++;
          throw new Error(`Unsupported export format: ${format}`);
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_9uxc2hz10().s[76]++;
      logger_1.logger.error('❌ Failed to export audit data:', error);
      /* istanbul ignore next */
      cov_9uxc2hz10().s[77]++;
      throw new Error('Audit data export failed');
    }
  }
  /**
   * Calculate risk score for audit entry
   * Assigns risk score based on event type and context
   *
   * @param auditEntry - Audit entry to score
   * @returns number Risk score (0-10)
   */
  calculateRiskScore(auditEntry) {
    /* istanbul ignore next */
    cov_9uxc2hz10().f[8]++;
    let riskScore =
    /* istanbul ignore next */
    (cov_9uxc2hz10().s[78]++, 0);
    // Base risk by event type
    const eventRiskMap =
    /* istanbul ignore next */
    (cov_9uxc2hz10().s[79]++, {
      'LOGIN_ATTEMPT': 2,
      'LOGIN_SUCCESS': 1,
      'LOGIN_FAILURE': 4,
      'API_ACCESS': 1,
      'TRADE_EXECUTION': 3,
      'FUND_TRANSFER': 8,
      'CREDENTIAL_ACCESS': 6,
      'SYSTEM_CONFIGURATION': 5,
      'SECURITY_INCIDENT': 9,
      'EMERGENCY_SHUTDOWN': 10
    });
    /* istanbul ignore next */
    cov_9uxc2hz10().s[80]++;
    riskScore =
    /* istanbul ignore next */
    (cov_9uxc2hz10().b[12][0]++, eventRiskMap[auditEntry.eventType]) ||
    /* istanbul ignore next */
    (cov_9uxc2hz10().b[12][1]++, 1);
    // Increase risk for failures
    /* istanbul ignore next */
    cov_9uxc2hz10().s[81]++;
    if (auditEntry.result === 'FAILURE') {
      /* istanbul ignore next */
      cov_9uxc2hz10().b[13][0]++;
      cov_9uxc2hz10().s[82]++;
      riskScore += 2;
    } else
    /* istanbul ignore next */
    {
      cov_9uxc2hz10().b[13][1]++;
    }
    // Increase risk for external actors
    cov_9uxc2hz10().s[83]++;
    if (auditEntry.actor !== 'SYSTEM') {
      /* istanbul ignore next */
      cov_9uxc2hz10().b[14][0]++;
      cov_9uxc2hz10().s[84]++;
      riskScore += 1;
    } else
    /* istanbul ignore next */
    {
      cov_9uxc2hz10().b[14][1]++;
    }
    // Cap at maximum risk score
    cov_9uxc2hz10().s[85]++;
    return Math.min(riskScore, 10);
  }
  /**
   * Determine compliance tags for audit entry
   * Assigns relevant compliance tags based on event type
   *
   * @param auditEntry - Audit entry to tag
   * @returns string[] Compliance tags
   */
  determineComplianceTags(auditEntry) {
    /* istanbul ignore next */
    cov_9uxc2hz10().f[9]++;
    const tags =
    /* istanbul ignore next */
    (cov_9uxc2hz10().s[86]++, []);
    // Financial compliance tags
    /* istanbul ignore next */
    cov_9uxc2hz10().s[87]++;
    if (
    /* istanbul ignore next */
    (cov_9uxc2hz10().b[16][0]++, auditEntry.eventType.includes('TRADE')) ||
    /* istanbul ignore next */
    (cov_9uxc2hz10().b[16][1]++, auditEntry.eventType.includes('FUND'))) {
      /* istanbul ignore next */
      cov_9uxc2hz10().b[15][0]++;
      cov_9uxc2hz10().s[88]++;
      tags.push('FINANCIAL_TRANSACTION');
    } else
    /* istanbul ignore next */
    {
      cov_9uxc2hz10().b[15][1]++;
    }
    // Security compliance tags
    cov_9uxc2hz10().s[89]++;
    if (
    /* istanbul ignore next */
    (cov_9uxc2hz10().b[18][0]++, auditEntry.eventType.includes('SECURITY')) ||
    /* istanbul ignore next */
    (cov_9uxc2hz10().b[18][1]++, auditEntry.eventType.includes('LOGIN'))) {
      /* istanbul ignore next */
      cov_9uxc2hz10().b[17][0]++;
      cov_9uxc2hz10().s[90]++;
      tags.push('SECURITY_EVENT');
    } else
    /* istanbul ignore next */
    {
      cov_9uxc2hz10().b[17][1]++;
    }
    // Data protection tags
    cov_9uxc2hz10().s[91]++;
    if (
    /* istanbul ignore next */
    (cov_9uxc2hz10().b[20][0]++, auditEntry.eventType.includes('CREDENTIAL')) ||
    /* istanbul ignore next */
    (cov_9uxc2hz10().b[20][1]++, auditEntry.eventType.includes('DATA'))) {
      /* istanbul ignore next */
      cov_9uxc2hz10().b[19][0]++;
      cov_9uxc2hz10().s[92]++;
      tags.push('DATA_PROTECTION');
    } else
    /* istanbul ignore next */
    {
      cov_9uxc2hz10().b[19][1]++;
    }
    // High-risk tags
    cov_9uxc2hz10().s[93]++;
    if (this.calculateRiskScore(auditEntry) >= 7) {
      /* istanbul ignore next */
      cov_9uxc2hz10().b[21][0]++;
      cov_9uxc2hz10().s[94]++;
      tags.push('HIGH_RISK');
    } else
    /* istanbul ignore next */
    {
      cov_9uxc2hz10().b[21][1]++;
    }
    cov_9uxc2hz10().s[95]++;
    return tags;
  }
  /**
   * Calculate hash for audit entry
   * Generates SHA-256 hash of entry data
   *
   * @param entry - Audit entry to hash
   * @returns string SHA-256 hash
   */
  calculateEntryHash(entry) {
    /* istanbul ignore next */
    cov_9uxc2hz10().f[10]++;
    const hashData =
    /* istanbul ignore next */
    (cov_9uxc2hz10().s[96]++, {
      auditId: entry.auditId,
      eventType: entry.eventType,
      actor: entry.actor,
      resource: entry.resource,
      action: entry.action,
      result: entry.result,
      timestamp: entry.timestamp,
      sequenceNumber: entry.sequenceNumber,
      previousHash: entry.previousHash,
      auditData: entry.auditData
    });
    /* istanbul ignore next */
    cov_9uxc2hz10().s[97]++;
    return (0, crypto_1.createHash)('sha256').update(JSON.stringify(hashData)).digest('hex');
  }
  /**
   * Sign audit entry with HMAC
   * Generates tamper-proof signature for audit entry
   *
   * @param entry - Audit entry to sign
   * @returns string HMAC signature
   */
  signAuditEntry(entry) {
    /* istanbul ignore next */
    cov_9uxc2hz10().f[11]++;
    const signatureData =
    /* istanbul ignore next */
    (cov_9uxc2hz10().s[98]++, `${entry.auditId}:${entry.currentHash}:${entry.sequenceNumber}`);
    /* istanbul ignore next */
    cov_9uxc2hz10().s[99]++;
    return (0, crypto_1.createHmac)('sha256', this.auditSigningKey).update(signatureData).digest('hex');
  }
  /**
   * Calculate genesis hash for audit chain
   * Generates initial hash for audit chain
   *
   * @returns string Genesis hash
   */
  calculateGenesisHash() {
    /* istanbul ignore next */
    cov_9uxc2hz10().f[12]++;
    cov_9uxc2hz10().s[100]++;
    return (0, crypto_1.createHash)('sha256').update('AI_CRYPTO_TRADING_AGENT_AUDIT_GENESIS').digest('hex');
  }
  /**
   * Store audit entry securely
   * Persists audit entry to secure storage
   *
   * @param entry - Enhanced audit entry to store
   */
  async storeAuditEntry(entry) {
    /* istanbul ignore next */
    cov_9uxc2hz10().f[13]++;
    cov_9uxc2hz10().s[101]++;
    // Implementation would store in secure audit database
    // For now, this is a placeholder
    logger_1.logger.debug('Audit entry stored securely', {
      auditId: entry.auditId,
      sequenceNumber: entry.sequenceNumber
    });
  }
  /**
   * Get last audit entry from storage
   * Retrieves the most recent audit entry
   *
   * @returns Promise<EnhancedAuditEntry | null> Last audit entry or null
   */
  async getLastAuditEntry() {
    /* istanbul ignore next */
    cov_9uxc2hz10().f[14]++;
    cov_9uxc2hz10().s[102]++;
    // Implementation would query secure audit database
    // For now, return null as placeholder
    return null;
  }
  /**
   * Cache audit entry for performance
   * Stores audit entry in memory cache
   *
   * @param entry - Audit entry to cache
   */
  cacheAuditEntry(entry) {
    /* istanbul ignore next */
    cov_9uxc2hz10().f[15]++;
    cov_9uxc2hz10().s[103]++;
    // Maintain cache size limit
    if (this.auditCache.size >= AuditService.MAX_CACHE_SIZE) {
      /* istanbul ignore next */
      cov_9uxc2hz10().b[22][0]++;
      const firstKey =
      /* istanbul ignore next */
      (cov_9uxc2hz10().s[104]++, this.auditCache.keys().next().value);
      /* istanbul ignore next */
      cov_9uxc2hz10().s[105]++;
      this.auditCache.delete(firstKey);
    } else
    /* istanbul ignore next */
    {
      cov_9uxc2hz10().b[22][1]++;
    }
    cov_9uxc2hz10().s[106]++;
    this.auditCache.set(entry.auditId, entry);
  }
  /**
   * Convert audit entries to CSV format
   * Generates CSV representation of audit data
   *
   * @param entries - Audit entries to convert
   * @returns string CSV data
   */
  convertToCSV(entries) {
    /* istanbul ignore next */
    cov_9uxc2hz10().f[16]++;
    cov_9uxc2hz10().s[107]++;
    if (entries.length === 0) {
      /* istanbul ignore next */
      cov_9uxc2hz10().b[23][0]++;
      cov_9uxc2hz10().s[108]++;
      return '';
    } else
    /* istanbul ignore next */
    {
      cov_9uxc2hz10().b[23][1]++;
    }
    const headers =
    /* istanbul ignore next */
    (cov_9uxc2hz10().s[109]++, Object.keys(entries[0]).join(','));
    const rows =
    /* istanbul ignore next */
    (cov_9uxc2hz10().s[110]++, entries.map(entry => {
      /* istanbul ignore next */
      cov_9uxc2hz10().f[17]++;
      cov_9uxc2hz10().s[111]++;
      return Object.values(entry).map(value => {
        /* istanbul ignore next */
        cov_9uxc2hz10().f[18]++;
        cov_9uxc2hz10().s[112]++;
        return typeof value === 'object' ?
        /* istanbul ignore next */
        (cov_9uxc2hz10().b[24][0]++, JSON.stringify(value)) :
        /* istanbul ignore next */
        (cov_9uxc2hz10().b[24][1]++, String(value));
      }).join(',');
    }));
    /* istanbul ignore next */
    cov_9uxc2hz10().s[113]++;
    return [headers, ...rows].join('\n');
  }
  /**
   * Convert audit entries to XML format
   * Generates XML representation of audit data
   *
   * @param entries - Audit entries to convert
   * @returns string XML data
   */
  convertToXML(entries) {
    /* istanbul ignore next */
    cov_9uxc2hz10().f[19]++;
    let xml =
    /* istanbul ignore next */
    (cov_9uxc2hz10().s[114]++, '<?xml version="1.0" encoding="UTF-8"?>\n<auditEntries>\n');
    /* istanbul ignore next */
    cov_9uxc2hz10().s[115]++;
    for (const entry of entries) {
      /* istanbul ignore next */
      cov_9uxc2hz10().s[116]++;
      xml += '  <auditEntry>\n';
      /* istanbul ignore next */
      cov_9uxc2hz10().s[117]++;
      for (const [key, value] of Object.entries(entry)) {
        const xmlValue =
        /* istanbul ignore next */
        (cov_9uxc2hz10().s[118]++, typeof value === 'object' ?
        /* istanbul ignore next */
        (cov_9uxc2hz10().b[25][0]++, JSON.stringify(value)) :
        /* istanbul ignore next */
        (cov_9uxc2hz10().b[25][1]++, String(value)));
        /* istanbul ignore next */
        cov_9uxc2hz10().s[119]++;
        xml += `    <${key}>${xmlValue}</${key}>\n`;
      }
      /* istanbul ignore next */
      cov_9uxc2hz10().s[120]++;
      xml += '  </auditEntry>\n';
    }
    /* istanbul ignore next */
    cov_9uxc2hz10().s[121]++;
    xml += '</auditEntries>';
    /* istanbul ignore next */
    cov_9uxc2hz10().s[122]++;
    return xml;
  }
  /**
   * Log security event for audit trail
   * Creates audit entry for security-related events
   *
   * @param event - Security event details
   * @returns Promise<void>
   */
  async logSecurityEvent(event) {
    /* istanbul ignore next */
    cov_9uxc2hz10().f[20]++;
    const auditEntry =
    /* istanbul ignore next */
    (cov_9uxc2hz10().s[123]++, {
      auditId: this.generateAuditId(),
      eventType: event.eventType,
      actor: event.actor,
      resource: event.resource,
      action: event.action,
      result: event.result,
      ipAddress: event.ipAddress,
      auditData: event.auditData,
      timestamp: new Date()
    });
    /* istanbul ignore next */
    cov_9uxc2hz10().s[124]++;
    await this.createAuditEntry(auditEntry);
  }
  /**
   * Log API request for audit trail
   * Creates audit entry for API requests
   *
   * @param request - API request details
   * @returns Promise<void>
   */
  async logAPIRequest(request) {
    /* istanbul ignore next */
    cov_9uxc2hz10().f[21]++;
    const auditEntry =
    /* istanbul ignore next */
    (cov_9uxc2hz10().s[125]++, {
      auditId: this.generateAuditId(),
      eventType: 'API_REQUEST',
      actor:
      /* istanbul ignore next */
      (cov_9uxc2hz10().b[26][0]++, request.userId) ||
      /* istanbul ignore next */
      (cov_9uxc2hz10().b[26][1]++, 'SYSTEM'),
      resource: request.url,
      action: request.method,
      result: 'SUCCESS',
      ipAddress: request.ipAddress,
      auditData: {
        headers: request.headers,
        body: request.body
      },
      timestamp: new Date()
    });
    /* istanbul ignore next */
    cov_9uxc2hz10().s[126]++;
    await this.createAuditEntry(auditEntry);
  }
  /**
   * Log API response for audit trail
   * Creates audit entry for API responses
   *
   * @param response - API response details
   * @returns Promise<void>
   */
  async logAPIResponse(response) {
    /* istanbul ignore next */
    cov_9uxc2hz10().f[22]++;
    const auditEntry =
    /* istanbul ignore next */
    (cov_9uxc2hz10().s[127]++, {
      auditId: this.generateAuditId(),
      eventType: 'API_RESPONSE',
      actor:
      /* istanbul ignore next */
      (cov_9uxc2hz10().b[27][0]++, response.userId) ||
      /* istanbul ignore next */
      (cov_9uxc2hz10().b[27][1]++, 'SYSTEM'),
      resource: response.url,
      action: response.method,
      result: response.statusCode < 400 ?
      /* istanbul ignore next */
      (cov_9uxc2hz10().b[28][0]++, 'SUCCESS') :
      /* istanbul ignore next */
      (cov_9uxc2hz10().b[28][1]++, 'FAILURE'),
      auditData: {
        statusCode: response.statusCode,
        responseTime: response.responseTime,
        error: response.error
      },
      timestamp: new Date()
    });
    /* istanbul ignore next */
    cov_9uxc2hz10().s[128]++;
    await this.createAuditEntry(auditEntry);
  }
  /**
   * Generate unique audit ID
   * Creates a unique identifier for audit entries
   *
   * @returns string Unique audit ID
   */
  generateAuditId() {
    /* istanbul ignore next */
    cov_9uxc2hz10().f[23]++;
    const timestamp =
    /* istanbul ignore next */
    (cov_9uxc2hz10().s[129]++, Date.now().toString(36));
    const random =
    /* istanbul ignore next */
    (cov_9uxc2hz10().s[130]++, Math.random().toString(36).substring(2));
    /* istanbul ignore next */
    cov_9uxc2hz10().s[131]++;
    return `audit_${timestamp}_${random}`;
  }
  /**
   * Get audit service status
   * Returns current status for monitoring
   *
   * @returns Object containing status information
   */
  getStatus() {
    /* istanbul ignore next */
    cov_9uxc2hz10().f[24]++;
    cov_9uxc2hz10().s[132]++;
    return {
      sequenceNumber: this.sequenceNumber,
      cacheSize: this.auditCache.size,
      lastEntryHash: this.lastEntryHash.substring(0, 16) + '...',
      timestamp: Date.now()
    };
  }
}
/* istanbul ignore next */
cov_9uxc2hz10().s[133]++;
exports.AuditService = AuditService;
/** Maximum cache size */
/* istanbul ignore next */
cov_9uxc2hz10().s[134]++;
AuditService.MAX_CACHE_SIZE = 1000;
// Create and export singleton instance
/* istanbul ignore next */
cov_9uxc2hz10().s[135]++;
exports.auditService = new AuditService();
// =============================================================================
// AUDIT SECURITY NOTES
// =============================================================================
// 1. All audit entries are cryptographically signed for tamper detection
// 2. Hash chains ensure audit trail integrity and detect tampering
// 3. Risk scores help prioritize security analysis and response
// 4. Compliance tags enable automated regulatory reporting
// 5. Audit data export supports compliance and forensic analysis
// 6. Chain verification should be performed regularly
// 7. Audit signing keys must be protected and rotated regularly
// 8. All audit operations are themselves audited for accountability
// =============================================================================