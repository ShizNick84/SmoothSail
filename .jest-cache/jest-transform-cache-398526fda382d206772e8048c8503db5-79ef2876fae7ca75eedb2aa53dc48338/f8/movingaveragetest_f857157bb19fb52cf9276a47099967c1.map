{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\tests\\trading\\strategies\\moving-average.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\tests\\trading\\strategies\\moving-average.test.ts"],"sourcesContent":["// =============================================================================\r\n// AI CRYPTO TRADING AGENT - MOVING AVERAGE STRATEGY UNIT TESTS\r\n// =============================================================================\r\n// Comprehensive unit tests for moving average crossover strategy\r\n// Tests all edge cases, boundary conditions, and signal generation\r\n// =============================================================================\r\n\r\nimport { MovingAverageStrategy } from '@/trading/strategies/moving-average';\r\nimport { MovingAverageSignal, TradingSignal } from '@/trading/strategies/types';\r\n\r\ndescribe('MovingAverageStrategy', () => {\r\n  let strategy: MovingAverageStrategy;\r\n\r\n  beforeEach(() => {\r\n    strategy = new MovingAverageStrategy();\r\n  });\r\n\r\n  describe('calculateEMA', () => {\r\n    it('should calculate EMA correctly for valid data', () => {\r\n      const prices = [10, 12, 14, 16, 18, 20, 22, 24, 26, 28];\r\n      const period = 5;\r\n      \r\n      const ema = strategy.calculateEMA(prices, period);\r\n      \r\n      expect(ema).toHaveLength(prices.length);\r\n      expect(ema[0]).toBeNull(); // First values should be null\r\n      expect(ema[4]).toBeCloseTo(14, 2); // First EMA value\r\n      expect(ema[ema.length - 1]).toBeGreaterThan(prices[prices.length - 1] * 0.8);\r\n    });\r\n\r\n    it('should handle insufficient data gracefully', () => {\r\n      const prices = [10, 12, 14];\r\n      const period = 5;\r\n      \r\n      const ema = strategy.calculateEMA(prices, period);\r\n      \r\n      expect(ema).toHaveLength(3);\r\n      expect(ema.every(val => val === null)).toBe(true);\r\n    });\r\n\r\n    it('should handle empty array', () => {\r\n      const prices: number[] = [];\r\n      const period = 5;\r\n      \r\n      const ema = strategy.calculateEMA(prices, period);\r\n      \r\n      expect(ema).toHaveLength(0);\r\n    });\r\n\r\n    it('should handle single price point', () => {\r\n      const prices = [100];\r\n      const period = 1;\r\n      \r\n      const ema = strategy.calculateEMA(prices, period);\r\n      \r\n      expect(ema).toHaveLength(1);\r\n      expect(ema[0]).toBe(100);\r\n    });\r\n  });\r\n\r\n  describe('calculateSMA', () => {\r\n    it('should calculate SMA correctly for valid data', () => {\r\n      const prices = [10, 20, 30, 40, 50];\r\n      const period = 3;\r\n      \r\n      const sma = strategy.calculateSMA(prices, period);\r\n      \r\n      expect(sma).toHaveLength(5);\r\n      expect(sma[0]).toBeNull();\r\n      expect(sma[1]).toBeNull();\r\n      expect(sma[2]).toBe(20); // (10+20+30)/3\r\n      expect(sma[3]).toBe(30); // (20+30+40)/3\r\n      expect(sma[4]).toBe(40); // (30+40+50)/3\r\n    });\r\n\r\n    it('should handle period larger than data length', () => {\r\n      const prices = [10, 20, 30];\r\n      const period = 5;\r\n      \r\n      const sma = strategy.calculateSMA(prices, period);\r\n      \r\n      expect(sma.every(val => val === null)).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('detectCrossover', () => {\r\n    it('should detect bullish crossover', () => {\r\n      const fastMA = [null, null, 10, 12, 15, 18, 22];\r\n      const slowMA = [null, null, null, null, 14, 16, 20];\r\n      \r\n      const crossovers = strategy.detectCrossover(fastMA, slowMA);\r\n      \r\n      expect(crossovers).toHaveLength(7);\r\n      expect(crossovers[4]).toBe('BULLISH'); // Fast crosses above slow\r\n      expect(crossovers[5]).toBe('BULLISH');\r\n      expect(crossovers[6]).toBe('BULLISH');\r\n    });\r\n\r\n    it('should detect bearish crossover', () => {\r\n      const fastMA = [null, null, 20, 18, 15, 12, 10];\r\n      const slowMA = [null, null, null, null, 16, 14, 12];\r\n      \r\n      const crossovers = strategy.detectCrossover(fastMA, slowMA);\r\n      \r\n      expect(crossovers).toHaveLength(7);\r\n      expect(crossovers[4]).toBe('BEARISH'); // Fast crosses below slow\r\n    });\r\n\r\n    it('should handle null values correctly', () => {\r\n      const fastMA = [null, null, 10, 12];\r\n      const slowMA = [null, null, null, 11];\r\n      \r\n      const crossovers = strategy.detectCrossover(fastMA, slowMA);\r\n      \r\n      expect(crossovers[0]).toBeNull();\r\n      expect(crossovers[1]).toBeNull();\r\n      expect(crossovers[2]).toBeNull();\r\n      expect(crossovers[3]).toBe('BULLISH');\r\n    });\r\n  });\r\n\r\n  describe('confirmWithVolume', () => {\r\n    it('should confirm signal with high volume', () => {\r\n      const volumes = [1000, 1200, 1500, 2000, 2500];\r\n      const currentIndex = 4;\r\n      \r\n      const confirmed = strategy.confirmWithVolume(volumes, currentIndex);\r\n      \r\n      expect(confirmed).toBe(true);\r\n    });\r\n\r\n    it('should reject signal with low volume', () => {\r\n      const volumes = [2000, 1800, 1500, 1200, 800];\r\n      const currentIndex = 4;\r\n      \r\n      const confirmed = strategy.confirmWithVolume(volumes, currentIndex);\r\n      \r\n      expect(confirmed).toBe(false);\r\n    });\r\n\r\n    it('should handle insufficient volume data', () => {\r\n      const volumes = [1000, 1200];\r\n      const currentIndex = 1;\r\n      \r\n      const confirmed = strategy.confirmWithVolume(volumes, currentIndex);\r\n      \r\n      expect(confirmed).toBe(false);\r\n    });\r\n  });\r\n\r\n  describe('generateSignal', () => {\r\n    it('should generate BUY signal for bullish crossover with volume confirmation', () => {\r\n      const marketData = {\r\n        symbol: 'BTC/USDT',\r\n        prices: [45000, 46000, 47000, 48000, 49000, 50000, 51000, 52000],\r\n        volumes: [100, 120, 150, 180, 200, 250, 300, 350],\r\n        timestamp: new Date()\r\n      };\r\n      \r\n      const signal = strategy.generateSignal(marketData);\r\n      \r\n      expect(signal).toBeDefined();\r\n      expect(signal.type).toBe('BUY');\r\n      expect(signal.symbol).toBe('BTC/USDT');\r\n      expect(signal.strength).toBeGreaterThan(0);\r\n      expect(signal.confidence).toBeGreaterThan(0);\r\n      expect(signal.indicators).toContain('MA_CROSSOVER');\r\n    });\r\n\r\n    it('should generate SELL signal for bearish crossover', () => {\r\n      const marketData = {\r\n        symbol: 'ETH/USDT',\r\n        prices: [3000, 2950, 2900, 2850, 2800, 2750, 2700, 2650],\r\n        volumes: [100, 120, 150, 180, 200, 250, 300, 350],\r\n        timestamp: new Date()\r\n      };\r\n      \r\n      const signal = strategy.generateSignal(marketData);\r\n      \r\n      expect(signal).toBeDefined();\r\n      expect(signal.type).toBe('SELL');\r\n      expect(signal.symbol).toBe('ETH/USDT');\r\n      expect(signal.strength).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('should return HOLD signal when no clear crossover', () => {\r\n      const marketData = {\r\n        symbol: 'BTC/USDT',\r\n        prices: [50000, 50100, 49900, 50050, 49950, 50025, 49975, 50000],\r\n        volumes: [100, 100, 100, 100, 100, 100, 100, 100],\r\n        timestamp: new Date()\r\n      };\r\n      \r\n      const signal = strategy.generateSignal(marketData);\r\n      \r\n      expect(signal.type).toBe('HOLD');\r\n      expect(signal.strength).toBeLessThan(50);\r\n    });\r\n\r\n    it('should handle insufficient data gracefully', () => {\r\n      const marketData = {\r\n        symbol: 'BTC/USDT',\r\n        prices: [50000, 51000],\r\n        volumes: [100, 120],\r\n        timestamp: new Date()\r\n      };\r\n      \r\n      const signal = strategy.generateSignal(marketData);\r\n      \r\n      expect(signal.type).toBe('HOLD');\r\n      expect(signal.strength).toBe(0);\r\n      expect(signal.confidence).toBe(0);\r\n    });\r\n  });\r\n\r\n  describe('calculateSignalStrength', () => {\r\n    it('should calculate higher strength for larger price movements', () => {\r\n      const prices = [100, 105, 110, 115, 120];\r\n      const crossoverType = 'BULLISH';\r\n      \r\n      const strength = strategy.calculateSignalStrength(prices, crossoverType);\r\n      \r\n      expect(strength).toBeGreaterThan(50);\r\n      expect(strength).toBeLessThanOrEqual(100);\r\n    });\r\n\r\n    it('should calculate lower strength for smaller movements', () => {\r\n      const prices = [100, 100.5, 101, 101.5, 102];\r\n      const crossoverType = 'BULLISH';\r\n      \r\n      const strength = strategy.calculateSignalStrength(prices, crossoverType);\r\n      \r\n      expect(strength).toBeLessThan(50);\r\n      expect(strength).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('should return 0 for invalid crossover type', () => {\r\n      const prices = [100, 105, 110];\r\n      const crossoverType = 'INVALID' as any;\r\n      \r\n      const strength = strategy.calculateSignalStrength(prices, crossoverType);\r\n      \r\n      expect(strength).toBe(0);\r\n    });\r\n  });\r\n\r\n  describe('Edge Cases and Error Handling', () => {\r\n    it('should handle NaN values in prices', () => {\r\n      const marketData = {\r\n        symbol: 'BTC/USDT',\r\n        prices: [50000, NaN, 51000, 52000],\r\n        volumes: [100, 120, 150, 180],\r\n        timestamp: new Date()\r\n      };\r\n      \r\n      expect(() => strategy.generateSignal(marketData)).not.toThrow();\r\n    });\r\n\r\n    it('should handle negative prices', () => {\r\n      const marketData = {\r\n        symbol: 'BTC/USDT',\r\n        prices: [50000, -1000, 51000, 52000],\r\n        volumes: [100, 120, 150, 180],\r\n        timestamp: new Date()\r\n      };\r\n      \r\n      const signal = strategy.generateSignal(marketData);\r\n      expect(signal.type).toBe('HOLD');\r\n    });\r\n\r\n    it('should handle zero volumes', () => {\r\n      const marketData = {\r\n        symbol: 'BTC/USDT',\r\n        prices: [50000, 51000, 52000, 53000],\r\n        volumes: [0, 0, 0, 0],\r\n        timestamp: new Date()\r\n      };\r\n      \r\n      const signal = strategy.generateSignal(marketData);\r\n      expect(signal.confidence).toBeLessThan(50);\r\n    });\r\n\r\n    it('should validate configuration parameters', () => {\r\n      expect(() => new MovingAverageStrategy({ fastPeriod: 0 })).toThrow();\r\n      expect(() => new MovingAverageStrategy({ slowPeriod: 0 })).toThrow();\r\n      expect(() => new MovingAverageStrategy({ fastPeriod: 50, slowPeriod: 20 })).toThrow();\r\n    });\r\n  });\r\n\r\n  describe('Performance Tests', () => {\r\n    it('should handle large datasets efficiently', () => {\r\n      const largeDataset = Array.from({ length: 10000 }, (_, i) => 50000 + Math.random() * 1000);\r\n      const volumes = Array.from({ length: 10000 }, () => 100 + Math.random() * 200);\r\n      \r\n      const marketData = {\r\n        symbol: 'BTC/USDT',\r\n        prices: largeDataset,\r\n        volumes: volumes,\r\n        timestamp: new Date()\r\n      };\r\n      \r\n      const startTime = Date.now();\r\n      const signal = strategy.generateSignal(marketData);\r\n      const endTime = Date.now();\r\n      \r\n      expect(endTime - startTime).toBeLessThan(1000); // Should complete within 1 second\r\n      expect(signal).toBeDefined();\r\n    });\r\n  });\r\n});"],"version":3}