{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\strategies\\__tests__\\breakout.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\strategies\\__tests__\\breakout.test.ts"],"sourcesContent":["/**\r\n * Breakout Strategy Tests\r\n * \r\n * Comprehensive test suite for breakout detection, momentum calculation, and signal generation.\r\n * Tests cover support/resistance detection, volume confirmation, and false breakout filtering.\r\n */\r\n\r\nimport { BreakoutStrategy } from '../breakout';\r\nimport { MarketData } from '../types';\r\n\r\ndescribe('BreakoutStrategy', () => {\r\n  let strategy: BreakoutStrategy;\r\n  let mockMarketData: MarketData[];\r\n\r\n  beforeEach(() => {\r\n    strategy = new BreakoutStrategy();\r\n    \r\n    // Create mock market data with consolidation and breakout pattern\r\n    mockMarketData = [];\r\n    const basePrice = 100;\r\n    const baseVolume = 1000000;\r\n    \r\n    // Create consolidation phase (20 periods)\r\n    for (let i = 0; i < 20; i++) {\r\n      const price = basePrice + Math.sin(i * 0.3) * 2; // Oscillate between 98-102\r\n      mockMarketData.push({\r\n        symbol: 'BTC/USDT',\r\n        timestamp: new Date(Date.now() - (40 - i) * 60000),\r\n        open: price - 0.5,\r\n        high: price + 1,\r\n        low: price - 1,\r\n        close: price,\r\n        volume: baseVolume + Math.random() * 200000\r\n      });\r\n    }\r\n    \r\n    // Create breakout phase (20 periods)\r\n    for (let i = 0; i < 20; i++) {\r\n      const price = 102 + (i * 1.5); // Breakout upward\r\n      mockMarketData.push({\r\n        symbol: 'BTC/USDT',\r\n        timestamp: new Date(Date.now() - (20 - i) * 60000),\r\n        open: price - 0.5,\r\n        high: price + 1,\r\n        low: price - 1,\r\n        close: price,\r\n        volume: baseVolume * (i < 5 ? 2 : 1.2) // Higher volume at start of breakout\r\n      });\r\n    }\r\n  });\r\n\r\n  describe('Support and Resistance Detection', () => {\r\n    test('should detect support and resistance levels', () => {\r\n      const levels = strategy.detectSupportResistance(mockMarketData, 20);\r\n      \r\n      expect(levels.support.length).toBeGreaterThan(0);\r\n      expect(levels.resistance.length).toBeGreaterThan(0);\r\n      expect(levels.consolidationRange).not.toBeNull();\r\n    });\r\n\r\n    test('should return empty arrays for insufficient data', () => {\r\n      const shortData = mockMarketData.slice(0, 5);\r\n      const levels = strategy.detectSupportResistance(shortData, 20);\r\n      \r\n      expect(levels.support).toEqual([]);\r\n      expect(levels.resistance).toEqual([]);\r\n      expect(levels.consolidationRange).toBeNull();\r\n    });\r\n\r\n    test('should identify consolidation range', () => {\r\n      // Create tight consolidation data\r\n      const consolidationData: MarketData[] = [];\r\n      for (let i = 0; i < 30; i++) {\r\n        const price = 100 + Math.sin(i * 0.2) * 1; // Tight range 99-101\r\n        consolidationData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (30 - i) * 60000),\r\n          open: price - 0.2,\r\n          high: price + 0.3,\r\n          low: price - 0.3,\r\n          close: price,\r\n          volume: 1000000\r\n        });\r\n      }\r\n\r\n      const levels = strategy.detectSupportResistance(consolidationData, 20);\r\n      expect(levels.consolidationRange).not.toBeNull();\r\n      expect(levels.consolidationRange!.high).toBeGreaterThan(levels.consolidationRange!.low);\r\n    });\r\n  });\r\n\r\n  describe('Momentum Calculation', () => {\r\n    test('should calculate momentum correctly', () => {\r\n      const momentum = strategy.calculateMomentum(mockMarketData, 14);\r\n      \r\n      expect(momentum).not.toBeNull();\r\n      expect(typeof momentum).toBe('number');\r\n      expect(momentum).toBeGreaterThan(0); // Should be positive due to upward breakout\r\n    });\r\n\r\n    test('should return null for insufficient data', () => {\r\n      const shortData = mockMarketData.slice(0, 10);\r\n      const momentum = strategy.calculateMomentum(shortData, 14);\r\n      expect(momentum).toBeNull();\r\n    });\r\n\r\n    test('should calculate negative momentum for downtrend', () => {\r\n      const downtrendData: MarketData[] = [];\r\n      for (let i = 0; i < 30; i++) {\r\n        const price = 100 - (i * 0.5); // Downtrend\r\n        downtrendData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (30 - i) * 60000),\r\n          open: price - 0.5,\r\n          high: price + 1,\r\n          low: price - 1,\r\n          close: price,\r\n          volume: 1000000\r\n        });\r\n      }\r\n\r\n      const momentum = strategy.calculateMomentum(downtrendData, 14);\r\n      expect(momentum).toBeLessThan(0);\r\n    });\r\n  });\r\n\r\n  describe('Breakout Detection', () => {\r\n    test('should detect upward breakout', () => {\r\n      const breakout = strategy.detectBreakout(mockMarketData, 20);\r\n      \r\n      if (breakout) {\r\n        expect(breakout.direction).toBe('UP');\r\n        expect(breakout.strength).toBeGreaterThan(0);\r\n        expect(breakout.parameters.breakoutLevel).toBeDefined();\r\n        expect(breakout.parameters.breakoutPercentage).toBeGreaterThan(0);\r\n      }\r\n    });\r\n\r\n    test('should detect downward breakout', () => {\r\n      // Create downward breakout data\r\n      const breakdownData: MarketData[] = [];\r\n      \r\n      // Consolidation phase\r\n      for (let i = 0; i < 20; i++) {\r\n        const price = 100 + Math.sin(i * 0.3) * 2;\r\n        breakdownData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (40 - i) * 60000),\r\n          open: price - 0.5,\r\n          high: price + 1,\r\n          low: price - 1,\r\n          close: price,\r\n          volume: 1000000\r\n        });\r\n      }\r\n      \r\n      // Breakdown phase\r\n      for (let i = 0; i < 20; i++) {\r\n        const price = 98 - (i * 1.5); // Breakdown downward\r\n        breakdownData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (20 - i) * 60000),\r\n          open: price - 0.5,\r\n          high: price + 1,\r\n          low: price - 1,\r\n          close: price,\r\n          volume: 1000000 * (i < 5 ? 2 : 1.2)\r\n        });\r\n      }\r\n\r\n      const breakout = strategy.detectBreakout(breakdownData, 20);\r\n      \r\n      if (breakout) {\r\n        expect(breakout.direction).toBe('DOWN');\r\n        expect(breakout.strength).toBeGreaterThan(0);\r\n      }\r\n    });\r\n\r\n    test('should return null for insufficient breakout magnitude', () => {\r\n      // Create data with very small price movements\r\n      const smallMoveData: MarketData[] = [];\r\n      for (let i = 0; i < 40; i++) {\r\n        const price = 100 + Math.sin(i * 0.1) * 0.5; // Very small movements\r\n        smallMoveData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (40 - i) * 60000),\r\n          open: price - 0.1,\r\n          high: price + 0.1,\r\n          low: price - 0.1,\r\n          close: price,\r\n          volume: 1000000\r\n        });\r\n      }\r\n\r\n      const breakout = strategy.detectBreakout(smallMoveData, 20);\r\n      expect(breakout).toBeNull();\r\n    });\r\n\r\n    test('should include volume confirmation', () => {\r\n      const breakout = strategy.detectBreakout(mockMarketData, 20);\r\n      \r\n      if (breakout) {\r\n        expect(typeof breakout.volumeConfirmed).toBe('boolean');\r\n        expect(typeof breakout.falseBreakoutProbability).toBe('number');\r\n        expect(breakout.falseBreakoutProbability).toBeGreaterThanOrEqual(0);\r\n        expect(breakout.falseBreakoutProbability).toBeLessThanOrEqual(100);\r\n      }\r\n    });\r\n  });\r\n\r\n  describe('Trading Signal Generation', () => {\r\n    test('should generate buy signal for upward breakout', () => {\r\n      const signal = strategy.generateSignal(mockMarketData, 20);\r\n      \r\n      if (signal) {\r\n        expect(signal.type).toBe('BUY');\r\n        expect(signal.strength).toBeGreaterThan(0);\r\n        expect(signal.confidence).toBeGreaterThan(0);\r\n        expect(signal.reasoning).toContain('breakout');\r\n        expect(signal.metadata?.direction).toBe('UP');\r\n        expect(signal.metadata?.breakoutLevel).toBeDefined();\r\n      }\r\n    });\r\n\r\n    test('should generate sell signal for downward breakout', () => {\r\n      // Create downward breakout scenario\r\n      const breakdownData: MarketData[] = [];\r\n      \r\n      for (let i = 0; i < 20; i++) {\r\n        const price = 100 + Math.sin(i * 0.3) * 2;\r\n        breakdownData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (40 - i) * 60000),\r\n          open: price - 0.5,\r\n          high: price + 1,\r\n          low: price - 1,\r\n          close: price,\r\n          volume: 1000000\r\n        });\r\n      }\r\n      \r\n      for (let i = 0; i < 20; i++) {\r\n        const price = 98 - (i * 2);\r\n        breakdownData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (20 - i) * 60000),\r\n          open: price - 0.5,\r\n          high: price + 1,\r\n          low: price - 1,\r\n          close: price,\r\n          volume: 1000000 * 2\r\n        });\r\n      }\r\n\r\n      const signal = strategy.generateSignal(breakdownData, 20);\r\n      \r\n      if (signal) {\r\n        expect(signal.type).toBe('SELL');\r\n        expect(signal.strength).toBeGreaterThan(0);\r\n        expect(signal.confidence).toBeGreaterThan(0);\r\n        expect(signal.reasoning).toContain('breakout');\r\n        expect(signal.metadata?.direction).toBe('DOWN');\r\n      }\r\n    });\r\n\r\n    test('should filter out high probability false breakouts', () => {\r\n      // Create data that would result in high false breakout probability\r\n      const falseBreakoutData: MarketData[] = [];\r\n      \r\n      // Create multiple failed breakout attempts\r\n      for (let i = 0; i < 50; i++) {\r\n        let price = 100;\r\n        if (i % 10 === 0) {\r\n          price = 103; // Failed breakout attempts\r\n        } else {\r\n          price = 100 + Math.sin(i * 0.2) * 1;\r\n        }\r\n        \r\n        falseBreakoutData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (50 - i) * 60000),\r\n          open: price - 0.5,\r\n          high: price + 0.5,\r\n          low: price - 0.5,\r\n          close: price - 0.3, // Always close back down\r\n          volume: 500000 // Low volume\r\n        });\r\n      }\r\n\r\n      const signal = strategy.generateSignal(falseBreakoutData, 20);\r\n      // Should likely be null due to high false breakout probability\r\n      if (signal) {\r\n        expect(signal.metadata?.falseBreakoutProbability).toBeLessThan(70);\r\n      }\r\n    });\r\n\r\n    test('should include proper metadata', () => {\r\n      const signal = strategy.generateSignal(mockMarketData, 20);\r\n      \r\n      if (signal) {\r\n        expect(signal.metadata).toBeDefined();\r\n        expect(signal.metadata?.breakoutLevel).toBeDefined();\r\n        expect(signal.metadata?.breakoutPercentage).toBeDefined();\r\n        expect(signal.metadata?.direction).toBeDefined();\r\n        expect(signal.metadata?.volumeConfirmed).toBeDefined();\r\n        expect(signal.metadata?.falseBreakoutProbability).toBeDefined();\r\n        expect(signal.metadata?.momentum).toBeDefined();\r\n        expect(signal.indicators[0]).toContain('BREAKOUT_');\r\n      }\r\n    });\r\n\r\n    test('should calculate risk-reward ratio', () => {\r\n      const signal = strategy.generateSignal(mockMarketData, 20);\r\n      \r\n      if (signal) {\r\n        expect(signal.riskReward).toBeGreaterThan(0);\r\n        expect(typeof signal.riskReward).toBe('number');\r\n      }\r\n    });\r\n  });\r\n\r\n  describe('Signal Confidence Evaluation', () => {\r\n    test('should evaluate signal confidence correctly', () => {\r\n      const signal = strategy.generateSignal(mockMarketData, 20);\r\n      \r\n      if (signal) {\r\n        const confidence = strategy.evaluateSignalConfidence(mockMarketData, signal);\r\n        \r\n        expect(confidence.overall).toBeGreaterThanOrEqual(0);\r\n        expect(confidence.overall).toBeLessThanOrEqual(100);\r\n        expect(confidence.technical).toBeGreaterThanOrEqual(0);\r\n        expect(confidence.technical).toBeLessThanOrEqual(100);\r\n        expect(confidence.volume).toBeGreaterThanOrEqual(0);\r\n        expect(confidence.volume).toBeLessThanOrEqual(100);\r\n        expect(confidence.momentum).toBeGreaterThanOrEqual(0);\r\n        expect(confidence.momentum).toBeLessThanOrEqual(100);\r\n        expect(confidence.factors.length).toBeGreaterThanOrEqual(4);\r\n      }\r\n    });\r\n\r\n    test('should provide detailed factors', () => {\r\n      const signal = strategy.generateSignal(mockMarketData, 20);\r\n      \r\n      if (signal) {\r\n        const confidence = strategy.evaluateSignalConfidence(mockMarketData, signal);\r\n        \r\n        expect(confidence.factors[0]).toContain('Breakout signal strength');\r\n        expect(confidence.factors[1]).toContain('Volume confirmation');\r\n        expect(confidence.factors[2]).toContain('Momentum alignment');\r\n        expect(confidence.factors[3]).toContain('Breakout level');\r\n      }\r\n    });\r\n\r\n    test('should include breakout-specific factors', () => {\r\n      const signal = strategy.generateSignal(mockMarketData, 20);\r\n      \r\n      if (signal) {\r\n        const confidence = strategy.evaluateSignalConfidence(mockMarketData, signal);\r\n        \r\n        const falseBreakoutFactors = confidence.factors.filter(f => f.includes('False breakout'));\r\n        const levelTestFactors = confidence.factors.filter(f => f.includes('Level tested'));\r\n        const magnitudeFactors = confidence.factors.filter(f => f.includes('Breakout magnitude'));\r\n        \r\n        expect(falseBreakoutFactors.length).toBeGreaterThan(0);\r\n        expect(levelTestFactors.length).toBeGreaterThan(0);\r\n        expect(magnitudeFactors.length).toBeGreaterThan(0);\r\n      }\r\n    });\r\n  });\r\n\r\n  describe('Edge Cases', () => {\r\n    test('should handle empty market data', () => {\r\n      const signal = strategy.generateSignal([], 20);\r\n      expect(signal).toBeNull();\r\n    });\r\n\r\n    test('should handle single data point', () => {\r\n      const singleData = [mockMarketData[0]];\r\n      const signal = strategy.generateSignal(singleData, 20);\r\n      expect(signal).toBeNull();\r\n    });\r\n\r\n    test('should handle flat market data', () => {\r\n      const flatData: MarketData[] = [];\r\n      for (let i = 0; i < 40; i++) {\r\n        flatData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (40 - i) * 60000),\r\n          open: 100,\r\n          high: 100,\r\n          low: 100,\r\n          close: 100,\r\n          volume: 1000000\r\n        });\r\n      }\r\n\r\n      const levels = strategy.detectSupportResistance(flatData, 20);\r\n      expect(levels.support.length).toBe(0);\r\n      expect(levels.resistance.length).toBe(0);\r\n    });\r\n\r\n    test('should handle very volatile data', () => {\r\n      const volatileData: MarketData[] = [];\r\n      for (let i = 0; i < 40; i++) {\r\n        const price = 100 + (Math.random() - 0.5) * 50; // Very volatile\r\n        volatileData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (40 - i) * 60000),\r\n          open: price - 5,\r\n          high: price + 10,\r\n          low: price - 10,\r\n          close: price,\r\n          volume: 1000000\r\n        });\r\n      }\r\n\r\n      const levels = strategy.detectSupportResistance(volatileData, 20);\r\n      // Should still return some levels even for volatile data\r\n      expect(levels.support.length + levels.resistance.length).toBeGreaterThanOrEqual(0);\r\n    });\r\n\r\n    test('should handle zero volume data', () => {\r\n      const zeroVolumeData = mockMarketData.map(data => ({\r\n        ...data,\r\n        volume: 0\r\n      }));\r\n\r\n      const signal = strategy.generateSignal(zeroVolumeData, 20);\r\n      if (signal) {\r\n        expect(signal.metadata?.volumeConfirmed).toBe(false);\r\n      }\r\n    });\r\n  });\r\n});"],"version":3}