45847664ac6da0e76dc1c52daa902344
"use strict";

/**
 * Trading Strategy Types
 *
 * Common interfaces and types used across trading strategies
 */
/* istanbul ignore next */
function cov_1kx8wfnrn2() {
  var path = "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\strategies\\types.ts";
  var hash = "a92c1c1c51ffc4a2b27015da4db32efdf035d957";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\strategies\\types.ts",
    statementMap: {
      "0": {
        start: {
          line: 7,
          column: 0
        },
        end: {
          line: 7,
          column: 62
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0
    },
    f: {},
    b: {},
    inputSourceMap: {
      file: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\strategies\\types.ts",
      mappings: ";AAAA;;;;GAIG",
      names: [],
      sources: ["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\strategies\\types.ts"],
      sourcesContent: ["/**\r\n * Trading Strategy Types\r\n * \r\n * Common interfaces and types used across trading strategies\r\n */\r\n\r\nexport interface MarketData {\r\n  symbol: string;\r\n  timestamp: Date;\r\n  open: number;\r\n  high: number;\r\n  low: number;\r\n  close: number;\r\n  volume: number;\r\n}\r\n\r\nexport interface TradingSignal {\r\n  id: string;\r\n  symbol: string;\r\n  type: 'BUY' | 'SELL' | 'HOLD';\r\n  strength: number;\r\n  confidence: number;\r\n  indicators: string[];\r\n  reasoning: string;\r\n  riskReward: number;\r\n  timestamp: Date;\r\n  metadata: Record<string, any>;\r\n}\r\n\r\nexport interface MovingAverageSignal {\r\n  name: string;\r\n  value: number;\r\n  timestamp: Date;\r\n  period: number;\r\n  parameters: {\r\n    fastPeriod: number;\r\n    slowPeriod: number;\r\n    slowEMA: number;\r\n  };\r\n  crossover?: {\r\n    type: 'GOLDEN_CROSS' | 'DEATH_CROSS' | 'NONE';\r\n    strength: number;\r\n    volumeConfirmed: boolean;\r\n  };\r\n}\r\n\r\nexport interface SignalConfidence {\r\n  overall: number;\r\n  technical: number;\r\n  volume: number;\r\n  momentum: number;\r\n  factors: string[];\r\n}\r\n\r\nexport interface MACDSignal {\r\n  name: string;\r\n  value: number;\r\n  timestamp: Date;\r\n  parameters: {\r\n    fastPeriod: number;\r\n    slowPeriod: number;\r\n    signalPeriod: number;\r\n  };\r\n  macd: number;\r\n  signal: number;\r\n  histogram: number;\r\n  crossover?: {\r\n    type: 'BULLISH' | 'BEARISH' | 'NONE';\r\n    strength: number;\r\n  };\r\n}\r\n\r\nexport interface RSISignal {\r\n  name: string;\r\n  value: number;\r\n  timestamp: Date;\r\n  parameters: {\r\n    period: number;\r\n    overboughtLevel: number;\r\n    oversoldLevel: number;\r\n  };\r\n  condition: 'OVERBOUGHT' | 'OVERSOLD' | 'NEUTRAL';\r\n}\r\n\r\nexport interface StrategyConfig {\r\n  fastPeriod?: number;\r\n  slowPeriod?: number;\r\n  signalPeriod?: number;\r\n  period?: number;\r\n  overboughtLevel?: number;\r\n  oversoldLevel?: number;\r\n}\r\n\r\nexport interface StrategyResult {\r\n  signal: TradingSignal | null;\r\n  confidence: SignalConfidence;\r\n  indicators: Record<string, any>;\r\n}\r\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "a92c1c1c51ffc4a2b27015da4db32efdf035d957"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1kx8wfnrn2 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1kx8wfnrn2();
cov_1kx8wfnrn2().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMWt4OHdmbnJuMiIsInBhdGgiLCJoYXNoIiwiZ2xvYmFsIiwiRnVuY3Rpb24iLCJnY3YiLCJjb3ZlcmFnZURhdGEiLCJzdGF0ZW1lbnRNYXAiLCJzdGFydCIsImxpbmUiLCJjb2x1bW4iLCJlbmQiLCJmbk1hcCIsImJyYW5jaE1hcCIsInMiLCJmIiwiYiIsImlucHV0U291cmNlTWFwIiwiZmlsZSIsIm1hcHBpbmdzIiwibmFtZXMiLCJzb3VyY2VzIiwic291cmNlc0NvbnRlbnQiLCJ2ZXJzaW9uIiwiX2NvdmVyYWdlU2NoZW1hIiwiY292ZXJhZ2UiLCJhY3R1YWxDb3ZlcmFnZSJdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcTmlja1xcRGVza3RvcFxcU21vb3RoU2FpbFxcc3JjXFx0cmFkaW5nXFxzdHJhdGVnaWVzXFx0eXBlcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogVHJhZGluZyBTdHJhdGVneSBUeXBlc1xyXG4gKiBcclxuICogQ29tbW9uIGludGVyZmFjZXMgYW5kIHR5cGVzIHVzZWQgYWNyb3NzIHRyYWRpbmcgc3RyYXRlZ2llc1xyXG4gKi9cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgTWFya2V0RGF0YSB7XHJcbiAgc3ltYm9sOiBzdHJpbmc7XHJcbiAgdGltZXN0YW1wOiBEYXRlO1xyXG4gIG9wZW46IG51bWJlcjtcclxuICBoaWdoOiBudW1iZXI7XHJcbiAgbG93OiBudW1iZXI7XHJcbiAgY2xvc2U6IG51bWJlcjtcclxuICB2b2x1bWU6IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBUcmFkaW5nU2lnbmFsIHtcclxuICBpZDogc3RyaW5nO1xyXG4gIHN5bWJvbDogc3RyaW5nO1xyXG4gIHR5cGU6ICdCVVknIHwgJ1NFTEwnIHwgJ0hPTEQnO1xyXG4gIHN0cmVuZ3RoOiBudW1iZXI7XHJcbiAgY29uZmlkZW5jZTogbnVtYmVyO1xyXG4gIGluZGljYXRvcnM6IHN0cmluZ1tdO1xyXG4gIHJlYXNvbmluZzogc3RyaW5nO1xyXG4gIHJpc2tSZXdhcmQ6IG51bWJlcjtcclxuICB0aW1lc3RhbXA6IERhdGU7XHJcbiAgbWV0YWRhdGE6IFJlY29yZDxzdHJpbmcsIGFueT47XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgTW92aW5nQXZlcmFnZVNpZ25hbCB7XHJcbiAgbmFtZTogc3RyaW5nO1xyXG4gIHZhbHVlOiBudW1iZXI7XHJcbiAgdGltZXN0YW1wOiBEYXRlO1xyXG4gIHBlcmlvZDogbnVtYmVyO1xyXG4gIHBhcmFtZXRlcnM6IHtcclxuICAgIGZhc3RQZXJpb2Q6IG51bWJlcjtcclxuICAgIHNsb3dQZXJpb2Q6IG51bWJlcjtcclxuICAgIHNsb3dFTUE6IG51bWJlcjtcclxuICB9O1xyXG4gIGNyb3Nzb3Zlcj86IHtcclxuICAgIHR5cGU6ICdHT0xERU5fQ1JPU1MnIHwgJ0RFQVRIX0NST1NTJyB8ICdOT05FJztcclxuICAgIHN0cmVuZ3RoOiBudW1iZXI7XHJcbiAgICB2b2x1bWVDb25maXJtZWQ6IGJvb2xlYW47XHJcbiAgfTtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTaWduYWxDb25maWRlbmNlIHtcclxuICBvdmVyYWxsOiBudW1iZXI7XHJcbiAgdGVjaG5pY2FsOiBudW1iZXI7XHJcbiAgdm9sdW1lOiBudW1iZXI7XHJcbiAgbW9tZW50dW06IG51bWJlcjtcclxuICBmYWN0b3JzOiBzdHJpbmdbXTtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBNQUNEU2lnbmFsIHtcclxuICBuYW1lOiBzdHJpbmc7XHJcbiAgdmFsdWU6IG51bWJlcjtcclxuICB0aW1lc3RhbXA6IERhdGU7XHJcbiAgcGFyYW1ldGVyczoge1xyXG4gICAgZmFzdFBlcmlvZDogbnVtYmVyO1xyXG4gICAgc2xvd1BlcmlvZDogbnVtYmVyO1xyXG4gICAgc2lnbmFsUGVyaW9kOiBudW1iZXI7XHJcbiAgfTtcclxuICBtYWNkOiBudW1iZXI7XHJcbiAgc2lnbmFsOiBudW1iZXI7XHJcbiAgaGlzdG9ncmFtOiBudW1iZXI7XHJcbiAgY3Jvc3NvdmVyPzoge1xyXG4gICAgdHlwZTogJ0JVTExJU0gnIHwgJ0JFQVJJU0gnIHwgJ05PTkUnO1xyXG4gICAgc3RyZW5ndGg6IG51bWJlcjtcclxuICB9O1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFJTSVNpZ25hbCB7XHJcbiAgbmFtZTogc3RyaW5nO1xyXG4gIHZhbHVlOiBudW1iZXI7XHJcbiAgdGltZXN0YW1wOiBEYXRlO1xyXG4gIHBhcmFtZXRlcnM6IHtcclxuICAgIHBlcmlvZDogbnVtYmVyO1xyXG4gICAgb3ZlcmJvdWdodExldmVsOiBudW1iZXI7XHJcbiAgICBvdmVyc29sZExldmVsOiBudW1iZXI7XHJcbiAgfTtcclxuICBjb25kaXRpb246ICdPVkVSQk9VR0hUJyB8ICdPVkVSU09MRCcgfCAnTkVVVFJBTCc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU3RyYXRlZ3lDb25maWcge1xyXG4gIGZhc3RQZXJpb2Q/OiBudW1iZXI7XHJcbiAgc2xvd1BlcmlvZD86IG51bWJlcjtcclxuICBzaWduYWxQZXJpb2Q/OiBudW1iZXI7XHJcbiAgcGVyaW9kPzogbnVtYmVyO1xyXG4gIG92ZXJib3VnaHRMZXZlbD86IG51bWJlcjtcclxuICBvdmVyc29sZExldmVsPzogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFN0cmF0ZWd5UmVzdWx0IHtcclxuICBzaWduYWw6IFRyYWRpbmdTaWduYWwgfCBudWxsO1xyXG4gIGNvbmZpZGVuY2U6IFNpZ25hbENvbmZpZGVuY2U7XHJcbiAgaW5kaWNhdG9yczogUmVjb3JkPHN0cmluZywgYW55PjtcclxufVxyXG4iXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7O0FBQUE7QUFBQSxTQUFBQSxlQUFBO0VBQUEsSUFBQUMsSUFBQTtFQUFBLElBQUFDLElBQUE7RUFBQSxJQUFBQyxNQUFBLE9BQUFDLFFBQUE7RUFBQSxJQUFBQyxHQUFBO0VBQUEsSUFBQUMsWUFBQTtJQUFBTCxJQUFBO0lBQUFNLFlBQUE7TUFBQTtRQUFBQyxLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtJQUFBO0lBQUFFLEtBQUE7SUFBQUMsU0FBQTtJQUFBQyxDQUFBO01BQUE7SUFBQTtJQUFBQyxDQUFBO0lBQUFDLENBQUE7SUFBQUMsY0FBQTtNQUFBQyxJQUFBO01BQUFDLFFBQUE7TUFBQUMsS0FBQTtNQUFBQyxPQUFBO01BQUFDLGNBQUE7TUFBQUMsT0FBQTtJQUFBO0lBQUFDLGVBQUE7SUFBQXRCLElBQUE7RUFBQTtFQUFBLElBQUF1QixRQUFBLEdBQUF0QixNQUFBLENBQUFFLEdBQUEsTUFBQUYsTUFBQSxDQUFBRSxHQUFBO0VBQUEsS0FBQW9CLFFBQUEsQ0FBQXhCLElBQUEsS0FBQXdCLFFBQUEsQ0FBQXhCLElBQUEsRUFBQUMsSUFBQSxLQUFBQSxJQUFBO0lBQUF1QixRQUFBLENBQUF4QixJQUFBLElBQUFLLFlBQUE7RUFBQTtFQUFBLElBQUFvQixjQUFBLEdBQUFELFFBQUEsQ0FBQXhCLElBQUE7RUFBQSIsImlnbm9yZUxpc3QiOltdfQ==