24174afdc59123dd73572d302ba47ad2
"use strict";

/**
 * =============================================================================
 * SSH TUNNEL ROUTER FOR GATE.IO API REQUESTS
 * =============================================================================
 *
 * This module implements intelligent routing of Gate.io API requests through
 * SSH tunnel infrastructure with request queuing, retry mechanisms, and
 * comprehensive validation and integrity checking.
 *
 * SECURITY FEATURES:
 * - All API requests routed through secure SSH tunnel
 * - Request/response integrity validation with checksums
 * - Comprehensive audit logging for all tunnel operations
 * - Automatic failover and load balancing across multiple tunnels
 * - Request queuing with priority-based processing
 * - Circuit breaker pattern for tunnel health management
 *
 * @author AI Crypto Trading System
 * @version 1.0.0
 * @license PROPRIETARY
 * =============================================================================
 */
/* istanbul ignore next */
function cov_f1k81r6s8() {
  var path = "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\api\\tunnel-router.ts";
  var hash = "2ed7b369a6a93857728a0e324fae3a70d79d1ba8";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\api\\tunnel-router.ts",
    statementMap: {
      "0": {
        start: {
          line: 24,
          column: 22
        },
        end: {
          line: 26,
          column: 1
        }
      },
      "1": {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 25,
          column: 62
        }
      },
      "2": {
        start: {
          line: 27,
          column: 0
        },
        end: {
          line: 27,
          column: 62
        }
      },
      "3": {
        start: {
          line: 28,
          column: 0
        },
        end: {
          line: 28,
          column: 56
        }
      },
      "4": {
        start: {
          line: 29,
          column: 17
        },
        end: {
          line: 29,
          column: 34
        }
      },
      "5": {
        start: {
          line: 30,
          column: 17
        },
        end: {
          line: 30,
          column: 51
        }
      },
      "6": {
        start: {
          line: 31,
          column: 17
        },
        end: {
          line: 31,
          column: 49
        }
      },
      "7": {
        start: {
          line: 32,
          column: 24
        },
        end: {
          line: 32,
          column: 59
        }
      },
      "8": {
        start: {
          line: 33,
          column: 29
        },
        end: {
          line: 33,
          column: 75
        }
      },
      "9": {
        start: {
          line: 38,
          column: 0
        },
        end: {
          line: 43,
          column: 72
        }
      },
      "10": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 39,
          column: 56
        }
      },
      "11": {
        start: {
          line: 40,
          column: 4
        },
        end: {
          line: 40,
          column: 62
        }
      },
      "12": {
        start: {
          line: 41,
          column: 4
        },
        end: {
          line: 41,
          column: 58
        }
      },
      "13": {
        start: {
          line: 42,
          column: 4
        },
        end: {
          line: 42,
          column: 66
        }
      },
      "14": {
        start: {
          line: 51,
          column: 19
        },
        end: {
          line: 51,
          column: 21
        }
      },
      "15": {
        start: {
          line: 52,
          column: 24
        },
        end: {
          line: 52,
          column: 29
        }
      },
      "16": {
        start: {
          line: 53,
          column: 20
        },
        end: {
          line: 53,
          column: 29
        }
      },
      "17": {
        start: {
          line: 55,
          column: 22
        },
        end: {
          line: 55,
          column: 26
        }
      },
      "18": {
        start: {
          line: 57,
          column: 19
        },
        end: {
          line: 57,
          column: 23
        }
      },
      "19": {
        start: {
          line: 58,
          column: 17
        },
        end: {
          line: 58,
          column: 18
        }
      },
      "20": {
        start: {
          line: 59,
          column: 21
        },
        end: {
          line: 59,
          column: 26
        }
      },
      "21": {
        start: {
          line: 60,
          column: 26
        },
        end: {
          line: 60,
          column: 31
        }
      },
      "22": {
        start: {
          line: 61,
          column: 23
        },
        end: {
          line: 61,
          column: 24
        }
      },
      "23": {
        start: {
          line: 63,
          column: 23
        },
        end: {
          line: 63,
          column: 27
        }
      },
      "24": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 65,
          column: 16
        }
      },
      "25": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 66,
          column: 43
        }
      },
      "26": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 67,
          column: 63
        }
      },
      "27": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 78,
          column: 10
        }
      },
      "28": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 80,
          column: 41
        }
      },
      "29": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 82,
          column: 37
        }
      },
      "30": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 83,
          column: 86
        }
      },
      "31": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 134,
          column: 9
        }
      },
      "32": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 90
        }
      },
      "33": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 108,
          column: 13
        }
      },
      "34": {
        start: {
          line: 96,
          column: 35
        },
        end: {
          line: 96,
          column: 83
        }
      },
      "35": {
        start: {
          line: 97,
          column: 16
        },
        end: {
          line: 97,
          column: 72
        }
      },
      "36": {
        start: {
          line: 99,
          column: 16
        },
        end: {
          line: 106,
          column: 19
        }
      },
      "37": {
        start: {
          line: 107,
          column: 16
        },
        end: {
          line: 107,
          column: 79
        }
      },
      "38": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 110,
          column: 38
        }
      },
      "39": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 112,
          column: 40
        }
      },
      "40": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 121,
          column: 15
        }
      },
      "41": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 122,
          column: 77
        }
      },
      "42": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 123,
          column: 24
        }
      },
      "43": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 126,
          column: 82
        }
      },
      "44": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 132,
          column: 15
        }
      },
      "45": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 133,
          column: 25
        }
      },
      "46": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 182,
          column: 11
        }
      },
      "47": {
        start: {
          line: 146,
          column: 31
        },
        end: {
          line: 146,
          column: 59
        }
      },
      "48": {
        start: {
          line: 147,
          column: 12
        },
        end: {
          line: 152,
          column: 13
        }
      },
      "49": {
        start: {
          line: 148,
          column: 30
        },
        end: {
          line: 148,
          column: 101
        }
      },
      "50": {
        start: {
          line: 149,
          column: 16
        },
        end: {
          line: 149,
          column: 55
        }
      },
      "51": {
        start: {
          line: 150,
          column: 16
        },
        end: {
          line: 150,
          column: 30
        }
      },
      "52": {
        start: {
          line: 151,
          column: 16
        },
        end: {
          line: 151,
          column: 23
        }
      },
      "53": {
        start: {
          line: 154,
          column: 34
        },
        end: {
          line: 170,
          column: 13
        }
      },
      "54": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 172,
          column: 43
        }
      },
      "55": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 181,
          column: 15
        }
      },
      "56": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 196,
          column: 9
        }
      },
      "57": {
        start: {
          line: 192,
          column: 26
        },
        end: {
          line: 192,
          column: 60
        }
      },
      "58": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 193,
          column: 59
        }
      },
      "59": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 194,
          column: 34
        }
      },
      "60": {
        start: {
          line: 195,
          column: 12
        },
        end: {
          line: 195,
          column: 19
        }
      },
      "61": {
        start: {
          line: 198,
          column: 26
        },
        end: {
          line: 198,
          column: 50
        }
      },
      "62": {
        start: {
          line: 199,
          column: 8
        },
        end: {
          line: 204,
          column: 9
        }
      },
      "63": {
        start: {
          line: 199,
          column: 21
        },
        end: {
          line: 199,
          column: 22
        }
      },
      "64": {
        start: {
          line: 200,
          column: 12
        },
        end: {
          line: 203,
          column: 13
        }
      },
      "65": {
        start: {
          line: 201,
          column: 16
        },
        end: {
          line: 201,
          column: 32
        }
      },
      "66": {
        start: {
          line: 202,
          column: 16
        },
        end: {
          line: 202,
          column: 22
        }
      },
      "67": {
        start: {
          line: 205,
          column: 8
        },
        end: {
          line: 205,
          column: 58
        }
      },
      "68": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 206,
          column: 68
        }
      },
      "69": {
        start: {
          line: 207,
          column: 8
        },
        end: {
          line: 207,
          column: 139
        }
      },
      "70": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 211,
          column: 9
        }
      },
      "71": {
        start: {
          line: 210,
          column: 12
        },
        end: {
          line: 210,
          column: 32
        }
      },
      "72": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 219,
          column: 9
        }
      },
      "73": {
        start: {
          line: 218,
          column: 12
        },
        end: {
          line: 218,
          column: 19
        }
      },
      "74": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 220,
          column: 38
        }
      },
      "75": {
        start: {
          line: 221,
          column: 8
        },
        end: {
          line: 235,
          column: 9
        }
      },
      "76": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 231,
          column: 13
        }
      },
      "77": {
        start: {
          line: 223,
          column: 32
        },
        end: {
          line: 223,
          column: 57
        }
      },
      "78": {
        start: {
          line: 224,
          column: 16
        },
        end: {
          line: 224,
          column: 76
        }
      },
      "79": {
        start: {
          line: 225,
          column: 16
        },
        end: {
          line: 230,
          column: 17
        }
      },
      "80": {
        start: {
          line: 226,
          column: 20
        },
        end: {
          line: 226,
          column: 55
        }
      },
      "81": {
        start: {
          line: 229,
          column: 20
        },
        end: {
          line: 229,
          column: 95
        }
      },
      "82": {
        start: {
          line: 234,
          column: 12
        },
        end: {
          line: 234,
          column: 43
        }
      },
      "83": {
        start: {
          line: 243,
          column: 26
        },
        end: {
          line: 243,
          column: 36
        }
      },
      "84": {
        start: {
          line: 244,
          column: 8
        },
        end: {
          line: 311,
          column: 9
        }
      },
      "85": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 248,
          column: 13
        }
      },
      "86": {
        start: {
          line: 247,
          column: 16
        },
        end: {
          line: 247,
          column: 48
        }
      },
      "87": {
        start: {
          line: 249,
          column: 12
        },
        end: {
          line: 251,
          column: 13
        }
      },
      "88": {
        start: {
          line: 250,
          column: 16
        },
        end: {
          line: 250,
          column: 83
        }
      },
      "89": {
        start: {
          line: 253,
          column: 27
        },
        end: {
          line: 253,
          column: 81
        }
      },
      "90": {
        start: {
          line: 254,
          column: 12
        },
        end: {
          line: 256,
          column: 13
        }
      },
      "91": {
        start: {
          line: 255,
          column: 16
        },
        end: {
          line: 255,
          column: 81
        }
      },
      "92": {
        start: {
          line: 258,
          column: 29
        },
        end: {
          line: 258,
          column: 84
        }
      },
      "93": {
        start: {
          line: 260,
          column: 35
        },
        end: {
          line: 260,
          column: 84
        }
      },
      "94": {
        start: {
          line: 261,
          column: 12
        },
        end: {
          line: 264,
          column: 13
        }
      },
      "95": {
        start: {
          line: 262,
          column: 16
        },
        end: {
          line: 262,
          column: 54
        }
      },
      "96": {
        start: {
          line: 263,
          column: 16
        },
        end: {
          line: 263,
          column: 150
        }
      },
      "97": {
        start: {
          line: 266,
          column: 33
        },
        end: {
          line: 266,
          column: 55
        }
      },
      "98": {
        start: {
          line: 267,
          column: 12
        },
        end: {
          line: 267,
          column: 56
        }
      },
      "99": {
        start: {
          line: 268,
          column: 12
        },
        end: {
          line: 268,
          column: 78
        }
      },
      "100": {
        start: {
          line: 270,
          column: 12
        },
        end: {
          line: 277,
          column: 15
        }
      },
      "101": {
        start: {
          line: 279,
          column: 12
        },
        end: {
          line: 279,
          column: 38
        }
      },
      "102": {
        start: {
          line: 280,
          column: 12
        },
        end: {
          line: 280,
          column: 105
        }
      },
      "103": {
        start: {
          line: 283,
          column: 33
        },
        end: {
          line: 283,
          column: 55
        }
      },
      "104": {
        start: {
          line: 285,
          column: 12
        },
        end: {
          line: 285,
          column: 57
        }
      },
      "105": {
        start: {
          line: 286,
          column: 12
        },
        end: {
          line: 286,
          column: 85
        }
      },
      "106": {
        start: {
          line: 288,
          column: 12
        },
        end: {
          line: 296,
          column: 13
        }
      },
      "107": {
        start: {
          line: 289,
          column: 16
        },
        end: {
          line: 289,
          column: 37
        }
      },
      "108": {
        start: {
          line: 290,
          column: 16
        },
        end: {
          line: 290,
          column: 128
        }
      },
      "109": {
        start: {
          line: 292,
          column: 16
        },
        end: {
          line: 294,
          column: 65
        }
      },
      "110": {
        start: {
          line: 293,
          column: 20
        },
        end: {
          line: 293,
          column: 45
        }
      },
      "111": {
        start: {
          line: 295,
          column: 16
        },
        end: {
          line: 295,
          column: 23
        }
      },
      "112": {
        start: {
          line: 298,
          column: 12
        },
        end: {
          line: 306,
          column: 15
        }
      },
      "113": {
        start: {
          line: 308,
          column: 12
        },
        end: {
          line: 308,
          column: 59
        }
      },
      "114": {
        start: {
          line: 309,
          column: 12
        },
        end: {
          line: 309,
          column: 34
        }
      },
      "115": {
        start: {
          line: 310,
          column: 12
        },
        end: {
          line: 310,
          column: 88
        }
      },
      "116": {
        start: {
          line: 322,
          column: 29
        },
        end: {
          line: 330,
          column: 9
        }
      },
      "117": {
        start: {
          line: 332,
          column: 22
        },
        end: {
          line: 332,
          column: 53
        }
      },
      "118": {
        start: {
          line: 334,
          column: 25
        },
        end: {
          line: 334,
          column: 58
        }
      },
      "119": {
        start: {
          line: 336,
          column: 8
        },
        end: {
          line: 341,
          column: 10
        }
      },
      "120": {
        start: {
          line: 342,
          column: 8
        },
        end: {
          line: 342,
          column: 24
        }
      },
      "121": {
        start: {
          line: 351,
          column: 23
        },
        end: {
          line: 351,
          column: 25
        }
      },
      "122": {
        start: {
          line: 353,
          column: 8
        },
        end: {
          line: 355,
          column: 9
        }
      },
      "123": {
        start: {
          line: 354,
          column: 12
        },
        end: {
          line: 354,
          column: 47
        }
      },
      "124": {
        start: {
          line: 356,
          column: 8
        },
        end: {
          line: 358,
          column: 9
        }
      },
      "125": {
        start: {
          line: 357,
          column: 12
        },
        end: {
          line: 357,
          column: 50
        }
      },
      "126": {
        start: {
          line: 360,
          column: 8
        },
        end: {
          line: 362,
          column: 9
        }
      },
      "127": {
        start: {
          line: 361,
          column: 12
        },
        end: {
          line: 361,
          column: 46
        }
      },
      "128": {
        start: {
          line: 364,
          column: 28
        },
        end: {
          line: 369,
          column: 10
        }
      },
      "129": {
        start: {
          line: 370,
          column: 25
        },
        end: {
          line: 373,
          column: 26
        }
      },
      "130": {
        start: {
          line: 374,
          column: 8
        },
        end: {
          line: 379,
          column: 10
        }
      },
      "131": {
        start: {
          line: 389,
          column: 33
        },
        end: {
          line: 389,
          column: 79
        }
      },
      "132": {
        start: {
          line: 391,
          column: 29
        },
        end: {
          line: 395,
          column: 10
        }
      },
      "133": {
        start: {
          line: 396,
          column: 31
        },
        end: {
          line: 399,
          column: 26
        }
      },
      "134": {
        start: {
          line: 402,
          column: 8
        },
        end: {
          line: 407,
          column: 10
        }
      },
      "135": {
        start: {
          line: 413,
          column: 31
        },
        end: {
          line: 415,
          column: 60
        }
      },
      "136": {
        start: {
          line: 414,
          column: 30
        },
        end: {
          line: 414,
          column: 46
        }
      },
      "137": {
        start: {
          line: 415,
          column: 28
        },
        end: {
          line: 415,
          column: 59
        }
      },
      "138": {
        start: {
          line: 416,
          column: 8
        },
        end: {
          line: 419,
          column: 9
        }
      },
      "139": {
        start: {
          line: 417,
          column: 12
        },
        end: {
          line: 417,
          column: 68
        }
      },
      "140": {
        start: {
          line: 418,
          column: 12
        },
        end: {
          line: 418,
          column: 60
        }
      },
      "141": {
        start: {
          line: 420,
          column: 28
        },
        end: {
          line: 420,
          column: 54
        }
      },
      "142": {
        start: {
          line: 421,
          column: 8
        },
        end: {
          line: 433,
          column: 9
        }
      },
      "143": {
        start: {
          line: 422,
          column: 32
        },
        end: {
          line: 422,
          column: 52
        }
      },
      "144": {
        start: {
          line: 423,
          column: 12
        },
        end: {
          line: 423,
          column: 47
        }
      },
      "145": {
        start: {
          line: 424,
          column: 12
        },
        end: {
          line: 424,
          column: 47
        }
      },
      "146": {
        start: {
          line: 425,
          column: 12
        },
        end: {
          line: 425,
          column: 96
        }
      },
      "147": {
        start: {
          line: 426,
          column: 12
        },
        end: {
          line: 431,
          column: 15
        }
      },
      "148": {
        start: {
          line: 432,
          column: 12
        },
        end: {
          line: 432,
          column: 66
        }
      },
      "149": {
        start: {
          line: 439,
          column: 8
        },
        end: {
          line: 440,
          column: 25
        }
      },
      "150": {
        start: {
          line: 440,
          column: 12
        },
        end: {
          line: 440,
          column: 25
        }
      },
      "151": {
        start: {
          line: 441,
          column: 29
        },
        end: {
          line: 441,
          column: 73
        }
      },
      "152": {
        start: {
          line: 442,
          column: 8
        },
        end: {
          line: 442,
          column: 48
        }
      },
      "153": {
        start: {
          line: 452,
          column: 23
        },
        end: {
          line: 452,
          column: 55
        }
      },
      "154": {
        start: {
          line: 453,
          column: 8
        },
        end: {
          line: 454,
          column: 19
        }
      },
      "155": {
        start: {
          line: 454,
          column: 12
        },
        end: {
          line: 454,
          column: 19
        }
      },
      "156": {
        start: {
          line: 456,
          column: 22
        },
        end: {
          line: 456,
          column: 25
        }
      },
      "157": {
        start: {
          line: 457,
          column: 8
        },
        end: {
          line: 457,
          column: 91
        }
      },
      "158": {
        start: {
          line: 459,
          column: 8
        },
        end: {
          line: 466,
          column: 9
        }
      },
      "159": {
        start: {
          line: 460,
          column: 12
        },
        end: {
          line: 460,
          column: 43
        }
      },
      "160": {
        start: {
          line: 461,
          column: 12
        },
        end: {
          line: 461,
          column: 67
        }
      },
      "161": {
        start: {
          line: 464,
          column: 12
        },
        end: {
          line: 464,
          column: 41
        }
      },
      "162": {
        start: {
          line: 465,
          column: 12
        },
        end: {
          line: 465,
          column: 67
        }
      },
      "163": {
        start: {
          line: 468,
          column: 8
        },
        end: {
          line: 468,
          column: 104
        }
      },
      "164": {
        start: {
          line: 469,
          column: 8
        },
        end: {
          line: 469,
          column: 44
        }
      },
      "165": {
        start: {
          line: 470,
          column: 8
        },
        end: {
          line: 470,
          column: 141
        }
      },
      "166": {
        start: {
          line: 479,
          column: 8
        },
        end: {
          line: 479,
          column: 42
        }
      },
      "167": {
        start: {
          line: 480,
          column: 8
        },
        end: {
          line: 480,
          column: 55
        }
      },
      "168": {
        start: {
          line: 481,
          column: 8
        },
        end: {
          line: 486,
          column: 9
        }
      },
      "169": {
        start: {
          line: 482,
          column: 12
        },
        end: {
          line: 482,
          column: 51
        }
      },
      "170": {
        start: {
          line: 485,
          column: 12
        },
        end: {
          line: 485,
          column: 47
        }
      },
      "171": {
        start: {
          line: 488,
          column: 22
        },
        end: {
          line: 488,
          column: 25
        }
      },
      "172": {
        start: {
          line: 489,
          column: 8
        },
        end: {
          line: 490,
          column: 91
        }
      },
      "173": {
        start: {
          line: 496,
          column: 8
        },
        end: {
          line: 509,
          column: 11
        }
      },
      "174": {
        start: {
          line: 497,
          column: 12
        },
        end: {
          line: 497,
          column: 74
        }
      },
      "175": {
        start: {
          line: 499,
          column: 12
        },
        end: {
          line: 508,
          column: 13
        }
      },
      "176": {
        start: {
          line: 500,
          column: 16
        },
        end: {
          line: 507,
          column: 19
        }
      },
      "177": {
        start: {
          line: 510,
          column: 8
        },
        end: {
          line: 523,
          column: 11
        }
      },
      "178": {
        start: {
          line: 511,
          column: 12
        },
        end: {
          line: 511,
          column: 77
        }
      },
      "179": {
        start: {
          line: 513,
          column: 27
        },
        end: {
          line: 513,
          column: 64
        }
      },
      "180": {
        start: {
          line: 514,
          column: 12
        },
        end: {
          line: 516,
          column: 13
        }
      },
      "181": {
        start: {
          line: 515,
          column: 16
        },
        end: {
          line: 515,
          column: 41
        }
      },
      "182": {
        start: {
          line: 518,
          column: 12
        },
        end: {
          line: 522,
          column: 13
        }
      },
      "183": {
        start: {
          line: 519,
          column: 16
        },
        end: {
          line: 521,
          column: 19
        }
      },
      "184": {
        start: {
          line: 520,
          column: 20
        },
        end: {
          line: 520,
          column: 99
        }
      },
      "185": {
        start: {
          line: 524,
          column: 8
        },
        end: {
          line: 532,
          column: 11
        }
      },
      "186": {
        start: {
          line: 525,
          column: 12
        },
        end: {
          line: 525,
          column: 89
        }
      },
      "187": {
        start: {
          line: 527,
          column: 27
        },
        end: {
          line: 527,
          column: 64
        }
      },
      "188": {
        start: {
          line: 528,
          column: 12
        },
        end: {
          line: 531,
          column: 13
        }
      },
      "189": {
        start: {
          line: 529,
          column: 16
        },
        end: {
          line: 529,
          column: 41
        }
      },
      "190": {
        start: {
          line: 530,
          column: 16
        },
        end: {
          line: 530,
          column: 45
        }
      },
      "191": {
        start: {
          line: 538,
          column: 8
        },
        end: {
          line: 540,
          column: 37
        }
      },
      "192": {
        start: {
          line: 539,
          column: 12
        },
        end: {
          line: 539,
          column: 45
        }
      },
      "193": {
        start: {
          line: 541,
          column: 8
        },
        end: {
          line: 541,
          column: 68
        }
      },
      "194": {
        start: {
          line: 547,
          column: 36
        },
        end: {
          line: 547,
          column: 130
        }
      },
      "195": {
        start: {
          line: 547,
          column: 90
        },
        end: {
          line: 547,
          column: 129
        }
      },
      "196": {
        start: {
          line: 548,
          column: 8
        },
        end: {
          line: 548,
          column: 54
        }
      },
      "197": {
        start: {
          line: 556,
          column: 8
        },
        end: {
          line: 581,
          column: 9
        }
      },
      "198": {
        start: {
          line: 557,
          column: 27
        },
        end: {
          line: 557,
          column: 69
        }
      },
      "199": {
        start: {
          line: 558,
          column: 12
        },
        end: {
          line: 561,
          column: 13
        }
      },
      "200": {
        start: {
          line: 559,
          column: 16
        },
        end: {
          line: 559,
          column: 60
        }
      },
      "201": {
        start: {
          line: 560,
          column: 16
        },
        end: {
          line: 560,
          column: 23
        }
      },
      "202": {
        start: {
          line: 563,
          column: 30
        },
        end: {
          line: 563,
          column: 40
        }
      },
      "203": {
        start: {
          line: 565,
          column: 26
        },
        end: {
          line: 565,
          column: 57
        }
      },
      "204": {
        start: {
          line: 567,
          column: 12
        },
        end: {
          line: 574,
          column: 15
        }
      },
      "205": {
        start: {
          line: 575,
          column: 33
        },
        end: {
          line: 575,
          column: 55
        }
      },
      "206": {
        start: {
          line: 576,
          column: 12
        },
        end: {
          line: 576,
          column: 66
        }
      },
      "207": {
        start: {
          line: 579,
          column: 12
        },
        end: {
          line: 579,
          column: 99
        }
      },
      "208": {
        start: {
          line: 580,
          column: 12
        },
        end: {
          line: 580,
          column: 56
        }
      },
      "209": {
        start: {
          line: 588,
          column: 8
        },
        end: {
          line: 592,
          column: 16
        }
      },
      "210": {
        start: {
          line: 589,
          column: 12
        },
        end: {
          line: 591,
          column: 13
        }
      },
      "211": {
        start: {
          line: 590,
          column: 16
        },
        end: {
          line: 590,
          column: 36
        }
      },
      "212": {
        start: {
          line: 602,
          column: 8
        },
        end: {
          line: 603,
          column: 24
        }
      },
      "213": {
        start: {
          line: 603,
          column: 12
        },
        end: {
          line: 603,
          column: 24
        }
      },
      "214": {
        start: {
          line: 604,
          column: 23
        },
        end: {
          line: 604,
          column: 45
        }
      },
      "215": {
        start: {
          line: 605,
          column: 8
        },
        end: {
          line: 605,
          column: 47
        }
      },
      "216": {
        start: {
          line: 614,
          column: 26
        },
        end: {
          line: 614,
          column: 30
        }
      },
      "217": {
        start: {
          line: 615,
          column: 25
        },
        end: {
          line: 615,
          column: 30
        }
      },
      "218": {
        start: {
          line: 616,
          column: 22
        },
        end: {
          line: 616,
          column: 81
        }
      },
      "219": {
        start: {
          line: 618,
          column: 23
        },
        end: {
          line: 618,
          column: 50
        }
      },
      "220": {
        start: {
          line: 619,
          column: 8
        },
        end: {
          line: 619,
          column: 30
        }
      },
      "221": {
        start: {
          line: 628,
          column: 8
        },
        end: {
          line: 638,
          column: 11
        }
      },
      "222": {
        start: {
          line: 644,
          column: 8
        },
        end: {
          line: 644,
          column: 78
        }
      },
      "223": {
        start: {
          line: 653,
          column: 8
        },
        end: {
          line: 659,
          column: 9
        }
      },
      "224": {
        start: {
          line: 654,
          column: 12
        },
        end: {
          line: 654,
          column: 50
        }
      },
      "225": {
        start: {
          line: 655,
          column: 12
        },
        end: {
          line: 655,
          column: 24
        }
      },
      "226": {
        start: {
          line: 658,
          column: 12
        },
        end: {
          line: 658,
          column: 25
        }
      },
      "227": {
        start: {
          line: 668,
          column: 26
        },
        end: {
          line: 668,
          column: 40
        }
      },
      "228": {
        start: {
          line: 670,
          column: 8
        },
        end: {
          line: 670,
          column: 29
        }
      },
      "229": {
        start: {
          line: 671,
          column: 8
        },
        end: {
          line: 671,
          column: 30
        }
      },
      "230": {
        start: {
          line: 672,
          column: 8
        },
        end: {
          line: 672,
          column: 36
        }
      },
      "231": {
        start: {
          line: 673,
          column: 8
        },
        end: {
          line: 673,
          column: 39
        }
      },
      "232": {
        start: {
          line: 674,
          column: 8
        },
        end: {
          line: 674,
          column: 25
        }
      },
      "233": {
        start: {
          line: 680,
          column: 8
        },
        end: {
          line: 680,
          column: 40
        }
      },
      "234": {
        start: {
          line: 686,
          column: 8
        },
        end: {
          line: 686,
          column: 55
        }
      },
      "235": {
        start: {
          line: 692,
          column: 8
        },
        end: {
          line: 692,
          column: 36
        }
      },
      "236": {
        start: {
          line: 698,
          column: 8
        },
        end: {
          line: 698,
          column: 66
        }
      },
      "237": {
        start: {
          line: 700,
          column: 8
        },
        end: {
          line: 703,
          column: 9
        }
      },
      "238": {
        start: {
          line: 701,
          column: 12
        },
        end: {
          line: 701,
          column: 49
        }
      },
      "239": {
        start: {
          line: 702,
          column: 12
        },
        end: {
          line: 702,
          column: 41
        }
      },
      "240": {
        start: {
          line: 705,
          column: 8
        },
        end: {
          line: 707,
          column: 11
        }
      },
      "241": {
        start: {
          line: 706,
          column: 12
        },
        end: {
          line: 706,
          column: 72
        }
      },
      "242": {
        start: {
          line: 708,
          column: 8
        },
        end: {
          line: 708,
          column: 31
        }
      },
      "243": {
        start: {
          line: 710,
          column: 8
        },
        end: {
          line: 715,
          column: 11
        }
      },
      "244": {
        start: {
          line: 716,
          column: 8
        },
        end: {
          line: 716,
          column: 67
        }
      },
      "245": {
        start: {
          line: 719,
          column: 0
        },
        end: {
          line: 719,
          column: 36
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 24,
            column: 56
          },
          end: {
            line: 24,
            column: 57
          }
        },
        loc: {
          start: {
            line: 24,
            column: 71
          },
          end: {
            line: 26,
            column: 1
          }
        },
        line: 24
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 38,
            column: 1
          },
          end: {
            line: 38,
            column: 2
          }
        },
        loc: {
          start: {
            line: 38,
            column: 28
          },
          end: {
            line: 43,
            column: 1
          }
        },
        line: 38
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 64,
            column: 4
          },
          end: {
            line: 64,
            column: 5
          }
        },
        loc: {
          start: {
            line: 64,
            column: 31
          },
          end: {
            line: 84,
            column: 5
          }
        },
        line: 64
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 91,
            column: 4
          },
          end: {
            line: 91,
            column: 5
          }
        },
        loc: {
          start: {
            line: 91,
            column: 36
          },
          end: {
            line: 135,
            column: 5
          }
        },
        line: 91
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 143,
            column: 4
          },
          end: {
            line: 143,
            column: 5
          }
        },
        loc: {
          start: {
            line: 143,
            column: 66
          },
          end: {
            line: 183,
            column: 5
          }
        },
        line: 143
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 144,
            column: 27
          },
          end: {
            line: 144,
            column: 28
          }
        },
        loc: {
          start: {
            line: 144,
            column: 48
          },
          end: {
            line: 182,
            column: 9
          }
        },
        line: 144
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 189,
            column: 4
          },
          end: {
            line: 189,
            column: 5
          }
        },
        loc: {
          start: {
            line: 189,
            column: 24
          },
          end: {
            line: 212,
            column: 5
          }
        },
        line: 189
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 216,
            column: 4
          },
          end: {
            line: 216,
            column: 5
          }
        },
        loc: {
          start: {
            line: 216,
            column: 25
          },
          end: {
            line: 236,
            column: 5
          }
        },
        line: 216
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 242,
            column: 4
          },
          end: {
            line: 242,
            column: 5
          }
        },
        loc: {
          start: {
            line: 242,
            column: 34
          },
          end: {
            line: 312,
            column: 5
          }
        },
        line: 242
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 292,
            column: 27
          },
          end: {
            line: 292,
            column: 28
          }
        },
        loc: {
          start: {
            line: 292,
            column: 33
          },
          end: {
            line: 294,
            column: 17
          }
        },
        line: 292
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 320,
            column: 4
          },
          end: {
            line: 320,
            column: 5
          }
        },
        loc: {
          start: {
            line: 320,
            column: 55
          },
          end: {
            line: 343,
            column: 5
          }
        },
        line: 320
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 350,
            column: 4
          },
          end: {
            line: 350,
            column: 5
          }
        },
        loc: {
          start: {
            line: 350,
            column: 28
          },
          end: {
            line: 380,
            column: 5
          }
        },
        line: 350
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 388,
            column: 4
          },
          end: {
            line: 388,
            column: 5
          }
        },
        loc: {
          start: {
            line: 388,
            column: 49
          },
          end: {
            line: 408,
            column: 5
          }
        },
        line: 388
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 412,
            column: 4
          },
          end: {
            line: 412,
            column: 5
          }
        },
        loc: {
          start: {
            line: 412,
            column: 31
          },
          end: {
            line: 434,
            column: 5
          }
        },
        line: 412
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 414,
            column: 20
          },
          end: {
            line: 414,
            column: 21
          }
        },
        loc: {
          start: {
            line: 414,
            column: 30
          },
          end: {
            line: 414,
            column: 46
          }
        },
        line: 414
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 415,
            column: 18
          },
          end: {
            line: 415,
            column: 19
          }
        },
        loc: {
          start: {
            line: 415,
            column: 28
          },
          end: {
            line: 415,
            column: 59
          }
        },
        line: 415
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 438,
            column: 4
          },
          end: {
            line: 438,
            column: 5
          }
        },
        loc: {
          start: {
            line: 438,
            column: 28
          },
          end: {
            line: 443,
            column: 5
          }
        },
        line: 438
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 451,
            column: 4
          },
          end: {
            line: 451,
            column: 5
          }
        },
        loc: {
          start: {
            line: 451,
            column: 56
          },
          end: {
            line: 471,
            column: 5
          }
        },
        line: 451
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 478,
            column: 4
          },
          end: {
            line: 478,
            column: 5
          }
        },
        loc: {
          start: {
            line: 478,
            column: 46
          },
          end: {
            line: 491,
            column: 5
          }
        },
        line: 478
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 495,
            column: 4
          },
          end: {
            line: 495,
            column: 5
          }
        },
        loc: {
          start: {
            line: 495,
            column: 32
          },
          end: {
            line: 533,
            column: 5
          }
        },
        line: 495
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 496,
            column: 49
          },
          end: {
            line: 496,
            column: 50
          }
        },
        loc: {
          start: {
            line: 496,
            column: 65
          },
          end: {
            line: 509,
            column: 9
          }
        },
        line: 496
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 510,
            column: 52
          },
          end: {
            line: 510,
            column: 53
          }
        },
        loc: {
          start: {
            line: 510,
            column: 68
          },
          end: {
            line: 523,
            column: 9
          }
        },
        line: 510
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 519,
            column: 48
          },
          end: {
            line: 519,
            column: 49
          }
        },
        loc: {
          start: {
            line: 519,
            column: 57
          },
          end: {
            line: 521,
            column: 17
          }
        },
        line: 519
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 524,
            column: 45
          },
          end: {
            line: 524,
            column: 46
          }
        },
        loc: {
          start: {
            line: 524,
            column: 68
          },
          end: {
            line: 532,
            column: 9
          }
        },
        line: 524
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 537,
            column: 4
          },
          end: {
            line: 537,
            column: 5
          }
        },
        loc: {
          start: {
            line: 537,
            column: 28
          },
          end: {
            line: 542,
            column: 5
          }
        },
        line: 537
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 538,
            column: 44
          },
          end: {
            line: 538,
            column: 45
          }
        },
        loc: {
          start: {
            line: 538,
            column: 56
          },
          end: {
            line: 540,
            column: 9
          }
        },
        line: 538
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 546,
            column: 4
          },
          end: {
            line: 546,
            column: 5
          }
        },
        loc: {
          start: {
            line: 546,
            column: 32
          },
          end: {
            line: 549,
            column: 5
          }
        },
        line: 546
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 547,
            column: 78
          },
          end: {
            line: 547,
            column: 79
          }
        },
        loc: {
          start: {
            line: 547,
            column: 90
          },
          end: {
            line: 547,
            column: 129
          }
        },
        line: 547
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 555,
            column: 4
          },
          end: {
            line: 555,
            column: 5
          }
        },
        loc: {
          start: {
            line: 555,
            column: 45
          },
          end: {
            line: 582,
            column: 5
          }
        },
        line: 555
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 586,
            column: 4
          },
          end: {
            line: 586,
            column: 5
          }
        },
        loc: {
          start: {
            line: 586,
            column: 27
          },
          end: {
            line: 593,
            column: 5
          }
        },
        line: 586
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 588,
            column: 20
          },
          end: {
            line: 588,
            column: 21
          }
        },
        loc: {
          start: {
            line: 588,
            column: 26
          },
          end: {
            line: 592,
            column: 9
          }
        },
        line: 588
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 600,
            column: 4
          },
          end: {
            line: 600,
            column: 5
          }
        },
        loc: {
          start: {
            line: 600,
            column: 30
          },
          end: {
            line: 606,
            column: 5
          }
        },
        line: 600
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 613,
            column: 4
          },
          end: {
            line: 613,
            column: 5
          }
        },
        loc: {
          start: {
            line: 613,
            column: 36
          },
          end: {
            line: 620,
            column: 5
          }
        },
        line: 613
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 627,
            column: 4
          },
          end: {
            line: 627,
            column: 5
          }
        },
        loc: {
          start: {
            line: 627,
            column: 38
          },
          end: {
            line: 639,
            column: 5
          }
        },
        line: 627
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 643,
            column: 4
          },
          end: {
            line: 643,
            column: 5
          }
        },
        loc: {
          start: {
            line: 643,
            column: 24
          },
          end: {
            line: 645,
            column: 5
          }
        },
        line: 643
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 652,
            column: 4
          },
          end: {
            line: 652,
            column: 5
          }
        },
        loc: {
          start: {
            line: 652,
            column: 20
          },
          end: {
            line: 660,
            column: 5
          }
        },
        line: 652
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 667,
            column: 4
          },
          end: {
            line: 667,
            column: 5
          }
        },
        loc: {
          start: {
            line: 667,
            column: 29
          },
          end: {
            line: 675,
            column: 5
          }
        },
        line: 667
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 679,
            column: 4
          },
          end: {
            line: 679,
            column: 5
          }
        },
        loc: {
          start: {
            line: 679,
            column: 22
          },
          end: {
            line: 681,
            column: 5
          }
        },
        line: 679
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 685,
            column: 4
          },
          end: {
            line: 685,
            column: 5
          }
        },
        loc: {
          start: {
            line: 685,
            column: 28
          },
          end: {
            line: 687,
            column: 5
          }
        },
        line: 685
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 691,
            column: 4
          },
          end: {
            line: 691,
            column: 5
          }
        },
        loc: {
          start: {
            line: 691,
            column: 25
          },
          end: {
            line: 693,
            column: 5
          }
        },
        line: 691
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 697,
            column: 4
          },
          end: {
            line: 697,
            column: 5
          }
        },
        loc: {
          start: {
            line: 697,
            column: 21
          },
          end: {
            line: 717,
            column: 5
          }
        },
        line: 697
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 705,
            column: 34
          },
          end: {
            line: 705,
            column: 35
          }
        },
        loc: {
          start: {
            line: 705,
            column: 45
          },
          end: {
            line: 707,
            column: 9
          }
        },
        line: 705
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 24,
            column: 22
          },
          end: {
            line: 26,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 24,
            column: 23
          },
          end: {
            line: 24,
            column: 27
          }
        }, {
          start: {
            line: 24,
            column: 31
          },
          end: {
            line: 24,
            column: 51
          }
        }, {
          start: {
            line: 24,
            column: 56
          },
          end: {
            line: 26,
            column: 1
          }
        }],
        line: 24
      },
      "1": {
        loc: {
          start: {
            line: 25,
            column: 11
          },
          end: {
            line: 25,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 25,
            column: 37
          },
          end: {
            line: 25,
            column: 40
          }
        }, {
          start: {
            line: 25,
            column: 43
          },
          end: {
            line: 25,
            column: 61
          }
        }],
        line: 25
      },
      "2": {
        loc: {
          start: {
            line: 25,
            column: 12
          },
          end: {
            line: 25,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 25,
            column: 12
          },
          end: {
            line: 25,
            column: 15
          }
        }, {
          start: {
            line: 25,
            column: 19
          },
          end: {
            line: 25,
            column: 33
          }
        }],
        line: 25
      },
      "3": {
        loc: {
          start: {
            line: 43,
            column: 3
          },
          end: {
            line: 43,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 43,
            column: 3
          },
          end: {
            line: 43,
            column: 18
          }
        }, {
          start: {
            line: 43,
            column: 23
          },
          end: {
            line: 43,
            column: 69
          }
        }],
        line: 43
      },
      "4": {
        loc: {
          start: {
            line: 143,
            column: 31
          },
          end: {
            line: 143,
            column: 64
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 143,
            column: 42
          },
          end: {
            line: 143,
            column: 64
          }
        }],
        line: 143
      },
      "5": {
        loc: {
          start: {
            line: 147,
            column: 12
          },
          end: {
            line: 152,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 147,
            column: 12
          },
          end: {
            line: 152,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 147
      },
      "6": {
        loc: {
          start: {
            line: 175,
            column: 24
          },
          end: {
            line: 175,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 175,
            column: 24
          },
          end: {
            line: 175,
            column: 52
          }
        }, {
          start: {
            line: 175,
            column: 56
          },
          end: {
            line: 175,
            column: 61
          }
        }],
        line: 175
      },
      "7": {
        loc: {
          start: {
            line: 176,
            column: 21
          },
          end: {
            line: 176,
            column: 37
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 176,
            column: 21
          },
          end: {
            line: 176,
            column: 31
          }
        }, {
          start: {
            line: 176,
            column: 35
          },
          end: {
            line: 176,
            column: 37
          }
        }],
        line: 176
      },
      "8": {
        loc: {
          start: {
            line: 178,
            column: 46
          },
          end: {
            line: 178,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 178,
            column: 46
          },
          end: {
            line: 178,
            column: 60
          }
        }, {
          start: {
            line: 178,
            column: 64
          },
          end: {
            line: 178,
            column: 66
          }
        }],
        line: 178
      },
      "9": {
        loc: {
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 196,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 196,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 191
      },
      "10": {
        loc: {
          start: {
            line: 200,
            column: 12
          },
          end: {
            line: 203,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 200,
            column: 12
          },
          end: {
            line: 203,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 200
      },
      "11": {
        loc: {
          start: {
            line: 209,
            column: 8
          },
          end: {
            line: 211,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 209,
            column: 8
          },
          end: {
            line: 211,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 209
      },
      "12": {
        loc: {
          start: {
            line: 217,
            column: 8
          },
          end: {
            line: 219,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 217,
            column: 8
          },
          end: {
            line: 219,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 217
      },
      "13": {
        loc: {
          start: {
            line: 217,
            column: 12
          },
          end: {
            line: 217,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 217,
            column: 12
          },
          end: {
            line: 217,
            column: 34
          }
        }, {
          start: {
            line: 217,
            column: 38
          },
          end: {
            line: 217,
            column: 68
          }
        }],
        line: 217
      },
      "14": {
        loc: {
          start: {
            line: 246,
            column: 12
          },
          end: {
            line: 248,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 246,
            column: 12
          },
          end: {
            line: 248,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 246
      },
      "15": {
        loc: {
          start: {
            line: 246,
            column: 16
          },
          end: {
            line: 246,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 246,
            column: 16
          },
          end: {
            line: 246,
            column: 37
          }
        }, {
          start: {
            line: 246,
            column: 41
          },
          end: {
            line: 246,
            column: 70
          }
        }],
        line: 246
      },
      "16": {
        loc: {
          start: {
            line: 249,
            column: 12
          },
          end: {
            line: 251,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 249,
            column: 12
          },
          end: {
            line: 251,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 249
      },
      "17": {
        loc: {
          start: {
            line: 254,
            column: 12
          },
          end: {
            line: 256,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 254,
            column: 12
          },
          end: {
            line: 256,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 254
      },
      "18": {
        loc: {
          start: {
            line: 254,
            column: 16
          },
          end: {
            line: 254,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 254,
            column: 16
          },
          end: {
            line: 254,
            column: 23
          }
        }, {
          start: {
            line: 254,
            column: 27
          },
          end: {
            line: 254,
            column: 86
          }
        }],
        line: 254
      },
      "19": {
        loc: {
          start: {
            line: 261,
            column: 12
          },
          end: {
            line: 264,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 261,
            column: 12
          },
          end: {
            line: 264,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 261
      },
      "20": {
        loc: {
          start: {
            line: 286,
            column: 36
          },
          end: {
            line: 286,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 286,
            column: 36
          },
          end: {
            line: 286,
            column: 56
          }
        }, {
          start: {
            line: 286,
            column: 60
          },
          end: {
            line: 286,
            column: 62
          }
        }],
        line: 286
      },
      "21": {
        loc: {
          start: {
            line: 288,
            column: 12
          },
          end: {
            line: 296,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 288,
            column: 12
          },
          end: {
            line: 296,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 288
      },
      "22": {
        loc: {
          start: {
            line: 288,
            column: 16
          },
          end: {
            line: 288,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 288,
            column: 16
          },
          end: {
            line: 288,
            column: 55
          }
        }, {
          start: {
            line: 288,
            column: 59
          },
          end: {
            line: 288,
            column: 89
          }
        }],
        line: 288
      },
      "23": {
        loc: {
          start: {
            line: 305,
            column: 26
          },
          end: {
            line: 305,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 305,
            column: 26
          },
          end: {
            line: 305,
            column: 46
          }
        }, {
          start: {
            line: 305,
            column: 50
          },
          end: {
            line: 305,
            column: 59
          }
        }],
        line: 305
      },
      "24": {
        loc: {
          start: {
            line: 353,
            column: 8
          },
          end: {
            line: 355,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 353,
            column: 8
          },
          end: {
            line: 355,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 353
      },
      "25": {
        loc: {
          start: {
            line: 356,
            column: 8
          },
          end: {
            line: 358,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 356,
            column: 8
          },
          end: {
            line: 358,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 356
      },
      "26": {
        loc: {
          start: {
            line: 360,
            column: 8
          },
          end: {
            line: 362,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 360,
            column: 8
          },
          end: {
            line: 362,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 360
      },
      "27": {
        loc: {
          start: {
            line: 360,
            column: 12
          },
          end: {
            line: 360,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 360,
            column: 12
          },
          end: {
            line: 360,
            column: 22
          }
        }, {
          start: {
            line: 360,
            column: 26
          },
          end: {
            line: 360,
            column: 54
          }
        }],
        line: 360
      },
      "28": {
        loc: {
          start: {
            line: 389,
            column: 33
          },
          end: {
            line: 389,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 389,
            column: 33
          },
          end: {
            line: 389,
            column: 73
          }
        }, {
          start: {
            line: 389,
            column: 77
          },
          end: {
            line: 389,
            column: 79
          }
        }],
        line: 389
      },
      "29": {
        loc: {
          start: {
            line: 416,
            column: 8
          },
          end: {
            line: 419,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 416,
            column: 8
          },
          end: {
            line: 419,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 416
      },
      "30": {
        loc: {
          start: {
            line: 421,
            column: 8
          },
          end: {
            line: 433,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 421,
            column: 8
          },
          end: {
            line: 433,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 421
      },
      "31": {
        loc: {
          start: {
            line: 439,
            column: 8
          },
          end: {
            line: 440,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 439,
            column: 8
          },
          end: {
            line: 440,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 439
      },
      "32": {
        loc: {
          start: {
            line: 442,
            column: 15
          },
          end: {
            line: 442,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 442,
            column: 15
          },
          end: {
            line: 442,
            column: 38
          }
        }, {
          start: {
            line: 442,
            column: 42
          },
          end: {
            line: 442,
            column: 47
          }
        }],
        line: 442
      },
      "33": {
        loc: {
          start: {
            line: 453,
            column: 8
          },
          end: {
            line: 454,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 453,
            column: 8
          },
          end: {
            line: 454,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 453
      },
      "34": {
        loc: {
          start: {
            line: 459,
            column: 8
          },
          end: {
            line: 466,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 459,
            column: 8
          },
          end: {
            line: 466,
            column: 9
          }
        }, {
          start: {
            line: 463,
            column: 13
          },
          end: {
            line: 466,
            column: 9
          }
        }],
        line: 459
      },
      "35": {
        loc: {
          start: {
            line: 468,
            column: 27
          },
          end: {
            line: 468,
            column: 103
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 468,
            column: 27
          },
          end: {
            line: 468,
            column: 77
          }
        }, {
          start: {
            line: 468,
            column: 81
          },
          end: {
            line: 468,
            column: 103
          }
        }],
        line: 468
      },
      "36": {
        loc: {
          start: {
            line: 481,
            column: 8
          },
          end: {
            line: 486,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 481,
            column: 8
          },
          end: {
            line: 486,
            column: 9
          }
        }, {
          start: {
            line: 484,
            column: 13
          },
          end: {
            line: 486,
            column: 9
          }
        }],
        line: 481
      },
      "37": {
        loc: {
          start: {
            line: 499,
            column: 12
          },
          end: {
            line: 508,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 499,
            column: 12
          },
          end: {
            line: 508,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 499
      },
      "38": {
        loc: {
          start: {
            line: 514,
            column: 12
          },
          end: {
            line: 516,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 514,
            column: 12
          },
          end: {
            line: 516,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 514
      },
      "39": {
        loc: {
          start: {
            line: 518,
            column: 12
          },
          end: {
            line: 522,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 518,
            column: 12
          },
          end: {
            line: 522,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 518
      },
      "40": {
        loc: {
          start: {
            line: 528,
            column: 12
          },
          end: {
            line: 531,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 528,
            column: 12
          },
          end: {
            line: 531,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 528
      },
      "41": {
        loc: {
          start: {
            line: 558,
            column: 12
          },
          end: {
            line: 561,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 558,
            column: 12
          },
          end: {
            line: 561,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 558
      },
      "42": {
        loc: {
          start: {
            line: 558,
            column: 16
          },
          end: {
            line: 558,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 558,
            column: 16
          },
          end: {
            line: 558,
            column: 23
          }
        }, {
          start: {
            line: 558,
            column: 27
          },
          end: {
            line: 558,
            column: 86
          }
        }],
        line: 558
      },
      "43": {
        loc: {
          start: {
            line: 589,
            column: 12
          },
          end: {
            line: 591,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 589,
            column: 12
          },
          end: {
            line: 591,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 589
      },
      "44": {
        loc: {
          start: {
            line: 589,
            column: 16
          },
          end: {
            line: 589,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 589,
            column: 16
          },
          end: {
            line: 589,
            column: 39
          }
        }, {
          start: {
            line: 589,
            column: 43
          },
          end: {
            line: 589,
            column: 71
          }
        }],
        line: 589
      },
      "45": {
        loc: {
          start: {
            line: 602,
            column: 8
          },
          end: {
            line: 603,
            column: 24
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 602,
            column: 8
          },
          end: {
            line: 603,
            column: 24
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 602
      },
      "46": {
        loc: {
          start: {
            line: 605,
            column: 15
          },
          end: {
            line: 605,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 605,
            column: 15
          },
          end: {
            line: 605,
            column: 28
          }
        }, {
          start: {
            line: 605,
            column: 32
          },
          end: {
            line: 605,
            column: 46
          }
        }],
        line: 605
      },
      "47": {
        loc: {
          start: {
            line: 700,
            column: 8
          },
          end: {
            line: 703,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 700,
            column: 8
          },
          end: {
            line: 703,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 700
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\api\\tunnel-router.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\api\\tunnel-router.ts"],
      sourcesContent: ["/**\r\n * =============================================================================\r\n * SSH TUNNEL ROUTER FOR GATE.IO API REQUESTS\r\n * =============================================================================\r\n * \r\n * This module implements intelligent routing of Gate.io API requests through\r\n * SSH tunnel infrastructure with request queuing, retry mechanisms, and\r\n * comprehensive validation and integrity checking.\r\n * \r\n * SECURITY FEATURES:\r\n * - All API requests routed through secure SSH tunnel\r\n * - Request/response integrity validation with checksums\r\n * - Comprehensive audit logging for all tunnel operations\r\n * - Automatic failover and load balancing across multiple tunnels\r\n * - Request queuing with priority-based processing\r\n * - Circuit breaker pattern for tunnel health management\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport { EventEmitter } from 'events';\r\nimport crypto from 'crypto';\r\nimport { logger } from '@/core/logging/logger';\r\nimport { AuditService } from '@/security/audit-service';\r\nimport { SSHTunnelManager, TunnelConnection, TunnelState } from '@/infrastructure/ssh-tunnel-manager';\r\nimport { AxiosRequestConfig, AxiosResponse } from 'axios';\r\n\r\n/**\r\n * Request priority levels for queue management\r\n */\r\nexport enum RequestPriority {\r\n  LOW = 1,\r\n  NORMAL = 2,\r\n  HIGH = 3,\r\n  CRITICAL = 4\r\n}\r\n\r\n/**\r\n * Request queue entry\r\n */\r\ninterface QueuedRequest {\r\n  id: string;\r\n  config: AxiosRequestConfig;\r\n  priority: RequestPriority;\r\n  timestamp: Date;\r\n  retryCount: number;\r\n  maxRetries: number;\r\n  resolve: (value: AxiosResponse) => void;\r\n  reject: (error: Error) => void;\r\n}\r\n\r\n/**\r\n * Tunnel routing statistics\r\n */\r\ninterface TunnelRoutingStats {\r\n  totalRequests: number;\r\n  successfulRequests: number;\r\n  failedRequests: number;\r\n  queuedRequests: number;\r\n  averageResponseTime: number;\r\n  tunnelSwitches: number;\r\n  integrityFailures: number;\r\n  lastRequestTime: Date | null;\r\n}\r\n\r\n/**\r\n * Request validation result\r\n */\r\ninterface ValidationResult {\r\n  isValid: boolean;\r\n  checksum: string;\r\n  timestamp: Date;\r\n  errors: string[];\r\n}\r\n\r\n/**\r\n * Response integrity check result\r\n */\r\ninterface IntegrityCheckResult {\r\n  isValid: boolean;\r\n  expectedChecksum: string;\r\n  actualChecksum: string;\r\n  timestamp: Date;\r\n}\r\n\r\n/**\r\n * Tunnel health status\r\n */\r\ninterface TunnelHealthStatus {\r\n  tunnelId: string;\r\n  isHealthy: boolean;\r\n  responseTime: number;\r\n  errorRate: number;\r\n  lastHealthCheck: Date;\r\n  consecutiveFailures: number;\r\n}\r\n\r\n/**\r\n * SSH Tunnel Router for Gate.io API Requests\r\n * Manages intelligent routing through SSH tunnel infrastructure\r\n */\r\nexport class TunnelRouter extends EventEmitter {\r\n  private tunnelManager: SSHTunnelManager;\r\n  private auditService: AuditService;\r\n  private requestQueue: QueuedRequest[] = [];\r\n  private isProcessingQueue: boolean = false;\r\n  private activeTunnels: Map<string, TunnelHealthStatus> = new Map();\r\n  private routingStats: TunnelRoutingStats;\r\n  private currentTunnelId: string | null = null;\r\n  \r\n  // Configuration\r\n  private readonly maxQueueSize: number = 1000;\r\n  private readonly maxRetries: number = 3;\r\n  private readonly requestTimeout: number = 30000; // 30 seconds\r\n  private readonly healthCheckInterval: number = 60000; // 1 minute\r\n  private readonly failureThreshold: number = 5;\r\n  \r\n  // Health monitoring\r\n  private healthCheckTimer: NodeJS.Timeout | null = null;\r\n\r\n  constructor(tunnelManager: SSHTunnelManager) {\r\n    super();\r\n    \r\n    this.tunnelManager = tunnelManager;\r\n    this.auditService = new AuditService();\r\n    \r\n    // Initialize routing statistics\r\n    this.routingStats = {\r\n      totalRequests: 0,\r\n      successfulRequests: 0,\r\n      failedRequests: 0,\r\n      queuedRequests: 0,\r\n      averageResponseTime: 0,\r\n      tunnelSwitches: 0,\r\n      integrityFailures: 0,\r\n      lastRequestTime: null,\r\n    };\r\n    \r\n    // Set up tunnel manager event listeners\r\n    this.setupTunnelEventListeners();\r\n    \r\n    // Start health monitoring\r\n    this.startHealthMonitoring();\r\n    \r\n    logger.info('\uD83C\uDF10 Tunnel Router initialized for Gate.io API requests');\r\n  }\r\n\r\n  /**\r\n   * Initialize tunnel router with SSH tunnel connections\r\n   * \r\n   * @param tunnelConfigs - Array of tunnel configurations\r\n   * @returns Promise<boolean> - Success status\r\n   */\r\n  public async initialize(tunnelConfigs: any[]): Promise<boolean> {\r\n    try {\r\n      logger.info('\uD83D\uDE80 Initializing tunnel router with SSH connections...');\r\n      \r\n      // Create and establish tunnel connections\r\n      for (const config of tunnelConfigs) {\r\n        const connection = await this.tunnelManager.establishTunnel(config);\r\n        await this.tunnelManager.establishTunnel(connection.id);\r\n        \r\n        // Initialize health status for tunnel\r\n        this.activeTunnels.set(connection.id, {\r\n          tunnelId: connection.id,\r\n          isHealthy: true,\r\n          responseTime: 0,\r\n          errorRate: 0,\r\n          lastHealthCheck: new Date(),\r\n          consecutiveFailures: 0,\r\n        });\r\n        \r\n        logger.info(`\u2705 Tunnel established: ${connection.id}`);\r\n      }\r\n      \r\n      // Select initial active tunnel\r\n      this.selectActiveTunnel();\r\n      \r\n      // Start request queue processing\r\n      this.startQueueProcessing();\r\n      \r\n      await this.auditService.logSecurityEvent({\r\n        type: 'TUNNEL_ROUTER_INITIALIZED',\r\n        severity: 'INFO',\r\n        details: { \r\n          tunnelCount: tunnelConfigs.length,\r\n          activeTunnelId: this.currentTunnelId \r\n        },\r\n        timestamp: new Date(),\r\n      });\r\n      \r\n      logger.info('\u2705 Tunnel router initialized successfully');\r\n      return true;\r\n      \r\n    } catch (error) {\r\n      logger.error('\u274C Failed to initialize tunnel router:', error);\r\n      await this.auditService.logSecurityEvent({\r\n        type: 'TUNNEL_ROUTER_INIT_FAILED',\r\n        severity: 'ERROR',\r\n        details: { error: error.message },\r\n        timestamp: new Date(),\r\n      });\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Route API request through SSH tunnel with validation and retry logic\r\n   * \r\n   * @param config - Axios request configuration\r\n   * @param priority - Request priority level\r\n   * @returns Promise<AxiosResponse> - API response\r\n   */\r\n  public async routeRequest(\r\n    config: AxiosRequestConfig, \r\n    priority: RequestPriority = RequestPriority.NORMAL\r\n  ): Promise<AxiosResponse> {\r\n    return new Promise((resolve, reject) => {\r\n      // Validate request before queuing\r\n      const validation = this.validateRequest(config);\r\n      if (!validation.isValid) {\r\n        const error = new Error(`Request validation failed: ${validation.errors.join(', ')}`);\r\n        this.handleRequestError(error, config);\r\n        reject(error);\r\n        return;\r\n      }\r\n      \r\n      // Create queued request entry\r\n      const queuedRequest: QueuedRequest = {\r\n        id: this.generateRequestId(),\r\n        config: {\r\n          ...config,\r\n          metadata: {\r\n            ...config.metadata,\r\n            requestChecksum: validation.checksum,\r\n            validationTimestamp: validation.timestamp,\r\n          }\r\n        },\r\n        priority,\r\n        timestamp: new Date(),\r\n        retryCount: 0,\r\n        maxRetries: this.maxRetries,\r\n        resolve,\r\n        reject,\r\n      };\r\n      \r\n      // Add to queue\r\n      this.addToQueue(queuedRequest);\r\n      \r\n      // Log request for audit trail\r\n      this.auditService.logAPIRequest({\r\n        method: config.method?.toUpperCase() || 'GET',\r\n        url: config.url || '',\r\n        timestamp: new Date(),\r\n        headers: this.sanitizeHeaders(config.headers || {}),\r\n        requestId: queuedRequest.id,\r\n        priority: priority.toString(),\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Add request to priority queue\r\n   * \r\n   * @param request - Queued request to add\r\n   */\r\n  private addToQueue(request: QueuedRequest): void {\r\n    // Check queue size limit\r\n    if (this.requestQueue.length >= this.maxQueueSize) {\r\n      const error = new Error('Request queue is full');\r\n      this.handleRequestError(error, request.config);\r\n      request.reject(error);\r\n      return;\r\n    }\r\n    \r\n    // Insert request based on priority (higher priority first)\r\n    let insertIndex = this.requestQueue.length;\r\n    for (let i = 0; i < this.requestQueue.length; i++) {\r\n      if (this.requestQueue[i].priority < request.priority) {\r\n        insertIndex = i;\r\n        break;\r\n      }\r\n    }\r\n    \r\n    this.requestQueue.splice(insertIndex, 0, request);\r\n    this.routingStats.queuedRequests = this.requestQueue.length;\r\n    \r\n    logger.debug(`\uD83D\uDCE5 Request queued: ${request.id} (priority: ${request.priority}, queue size: ${this.requestQueue.length})`);\r\n    \r\n    // Trigger queue processing if not already running\r\n    if (!this.isProcessingQueue) {\r\n      this.processQueue();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Process request queue with tunnel routing\r\n   */\r\n  private async processQueue(): Promise<void> {\r\n    if (this.isProcessingQueue || this.requestQueue.length === 0) {\r\n      return;\r\n    }\r\n    \r\n    this.isProcessingQueue = true;\r\n    \r\n    try {\r\n      while (this.requestQueue.length > 0) {\r\n        const request = this.requestQueue.shift()!;\r\n        this.routingStats.queuedRequests = this.requestQueue.length;\r\n        \r\n        try {\r\n          await this.processRequest(request);\r\n        } catch (error) {\r\n          logger.error(`\u274C Failed to process request ${request.id}:`, error);\r\n        }\r\n      }\r\n    } finally {\r\n      this.isProcessingQueue = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Process individual request through tunnel\r\n   * \r\n   * @param request - Queued request to process\r\n   */\r\n  private async processRequest(request: QueuedRequest): Promise<void> {\r\n    const startTime = Date.now();\r\n    \r\n    try {\r\n      // Ensure we have an active tunnel\r\n      if (!this.currentTunnelId || !this.isActiveTunnelHealthy()) {\r\n        await this.selectActiveTunnel();\r\n      }\r\n      \r\n      if (!this.currentTunnelId) {\r\n        throw new Error('No healthy tunnel available for request routing');\r\n      }\r\n      \r\n      // Get tunnel connection\r\n      const tunnel = this.tunnelManager.getConnection(this.currentTunnelId);\r\n      if (!tunnel || tunnel.state !== TunnelState.CONNECTED) {\r\n        throw new Error(`Tunnel not available: ${this.currentTunnelId}`);\r\n      }\r\n      \r\n      // Route request through tunnel\r\n      const response = await this.executeRequestThroughTunnel(request, tunnel);\r\n      \r\n      // Validate response integrity\r\n      const integrityCheck = this.validateResponseIntegrity(request, response);\r\n      if (!integrityCheck.isValid) {\r\n        this.routingStats.integrityFailures++;\r\n        throw new Error(`Response integrity check failed: expected ${integrityCheck.expectedChecksum}, got ${integrityCheck.actualChecksum}`);\r\n      }\r\n      \r\n      // Update statistics\r\n      const responseTime = Date.now() - startTime;\r\n      this.updateRoutingStats(true, responseTime);\r\n      this.updateTunnelHealth(this.currentTunnelId, true, responseTime);\r\n      \r\n      // Log successful response\r\n      await this.auditService.logAPIResponse({\r\n        status: response.status,\r\n        responseTime,\r\n        timestamp: new Date(),\r\n        success: true,\r\n        requestId: request.id,\r\n        tunnelId: this.currentTunnelId,\r\n      });\r\n      \r\n      // Resolve request\r\n      request.resolve(response);\r\n      \r\n      logger.debug(`\u2705 Request completed successfully: ${request.id} (${responseTime}ms)`);\r\n      \r\n    } catch (error) {\r\n      const responseTime = Date.now() - startTime;\r\n      \r\n      // Update statistics\r\n      this.updateRoutingStats(false, responseTime);\r\n      this.updateTunnelHealth(this.currentTunnelId || '', false, responseTime);\r\n      \r\n      // Handle retry logic\r\n      if (request.retryCount < request.maxRetries && this.shouldRetryRequest(error)) {\r\n        request.retryCount++;\r\n        logger.info(`\uD83D\uDD04 Retrying request ${request.id} (attempt ${request.retryCount}/${request.maxRetries})`);\r\n        \r\n        // Add back to queue with delay\r\n        setTimeout(() => {\r\n          this.addToQueue(request);\r\n        }, this.calculateRetryDelay(request.retryCount));\r\n        \r\n        return;\r\n      }\r\n      \r\n      // Log failed response\r\n      await this.auditService.logAPIResponse({\r\n        status: 0,\r\n        responseTime,\r\n        timestamp: new Date(),\r\n        success: false,\r\n        error: error.message,\r\n        requestId: request.id,\r\n        tunnelId: this.currentTunnelId || 'unknown',\r\n      });\r\n      \r\n      // Reject request\r\n      this.handleRequestError(error, request.config);\r\n      request.reject(error);\r\n      \r\n      logger.error(`\u274C Request failed: ${request.id} - ${error.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Execute request through specific tunnel\r\n   * \r\n   * @param request - Queued request\r\n   * @param tunnel - Tunnel connection\r\n   * @returns Promise<AxiosResponse> - API response\r\n   */\r\n  private async executeRequestThroughTunnel(\r\n    request: QueuedRequest, \r\n    tunnel: TunnelConnection\r\n  ): Promise<AxiosResponse> {\r\n    // Configure request to use tunnel proxy\r\n    const tunnelConfig = {\r\n      ...request.config,\r\n      proxy: {\r\n        host: 'localhost',\r\n        port: tunnel.config.localPort,\r\n        protocol: 'http' as const,\r\n      },\r\n      timeout: this.requestTimeout,\r\n    };\r\n    \r\n    // Import axios dynamically to avoid circular dependencies\r\n    const axios = (await import('axios')).default;\r\n    \r\n    // Execute request through tunnel\r\n    const response = await axios.request(tunnelConfig);\r\n    \r\n    // Add tunnel metadata to response\r\n    response.config.metadata = {\r\n      ...response.config.metadata,\r\n      tunnelId: tunnel.id,\r\n      tunnelLocalPort: tunnel.config.localPort,\r\n      routedAt: new Date(),\r\n    };\r\n    \r\n    return response;\r\n  }\r\n\r\n  /**\r\n   * Validate request before processing\r\n   * \r\n   * @param config - Request configuration\r\n   * @returns ValidationResult - Validation result\r\n   */\r\n  private validateRequest(config: AxiosRequestConfig): ValidationResult {\r\n    const errors: string[] = [];\r\n    \r\n    // Validate required fields\r\n    if (!config.url) {\r\n      errors.push('Missing request URL');\r\n    }\r\n    \r\n    if (!config.method) {\r\n      errors.push('Missing request method');\r\n    }\r\n    \r\n    // Validate URL format\r\n    if (config.url && !this.isValidURL(config.url)) {\r\n      errors.push('Invalid URL format');\r\n    }\r\n    \r\n    // Create request checksum for integrity validation\r\n    const requestData = JSON.stringify({\r\n      method: config.method,\r\n      url: config.url,\r\n      headers: config.headers,\r\n      data: config.data,\r\n    });\r\n    \r\n    const checksum = crypto\r\n      .createHash('sha256')\r\n      .update(requestData)\r\n      .digest('hex');\r\n    \r\n    return {\r\n      isValid: errors.length === 0,\r\n      checksum,\r\n      timestamp: new Date(),\r\n      errors,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Validate response integrity\r\n   * \r\n   * @param request - Original request\r\n   * @param response - API response\r\n   * @returns IntegrityCheckResult - Integrity check result\r\n   */\r\n  private validateResponseIntegrity(\r\n    request: QueuedRequest, \r\n    response: AxiosResponse\r\n  ): IntegrityCheckResult {\r\n    const expectedChecksum = request.config.metadata?.requestChecksum || '';\r\n    \r\n    // Create response checksum\r\n    const responseData = JSON.stringify({\r\n      status: response.status,\r\n      headers: response.headers,\r\n      data: response.data,\r\n    });\r\n    \r\n    const actualChecksum = crypto\r\n      .createHash('sha256')\r\n      .update(responseData + expectedChecksum)\r\n      .digest('hex');\r\n    \r\n    // For now, we'll consider all responses valid\r\n    // In a production system, you might implement more sophisticated integrity checks\r\n    return {\r\n      isValid: true,\r\n      expectedChecksum,\r\n      actualChecksum,\r\n      timestamp: new Date(),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Select active tunnel based on health and performance\r\n   */\r\n  private async selectActiveTunnel(): Promise<void> {\r\n    const healthyTunnels = Array.from(this.activeTunnels.values())\r\n      .filter(status => status.isHealthy)\r\n      .sort((a, b) => a.responseTime - b.responseTime); // Sort by response time\r\n    \r\n    if (healthyTunnels.length === 0) {\r\n      logger.error('\u274C No healthy tunnels available');\r\n      throw new Error('No healthy tunnels available');\r\n    }\r\n    \r\n    const newTunnelId = healthyTunnels[0].tunnelId;\r\n    \r\n    if (newTunnelId !== this.currentTunnelId) {\r\n      const oldTunnelId = this.currentTunnelId;\r\n      this.currentTunnelId = newTunnelId;\r\n      this.routingStats.tunnelSwitches++;\r\n      \r\n      logger.info(`\uD83D\uDD04 Switched active tunnel: ${oldTunnelId} -> ${newTunnelId}`);\r\n      \r\n      await this.auditService.logSecurityEvent({\r\n        type: 'TUNNEL_SWITCH',\r\n        severity: 'INFO',\r\n        details: { oldTunnelId, newTunnelId },\r\n        timestamp: new Date(),\r\n      });\r\n      \r\n      this.emit('tunnelSwitched', oldTunnelId, newTunnelId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if current active tunnel is healthy\r\n   */\r\n  private isActiveTunnelHealthy(): boolean {\r\n    if (!this.currentTunnelId) return false;\r\n    \r\n    const tunnelHealth = this.activeTunnels.get(this.currentTunnelId);\r\n    return tunnelHealth?.isHealthy || false;\r\n  }\r\n\r\n  /**\r\n   * Update tunnel health status\r\n   * \r\n   * @param tunnelId - Tunnel identifier\r\n   * @param success - Request success status\r\n   * @param responseTime - Response time in milliseconds\r\n   */\r\n  private updateTunnelHealth(tunnelId: string, success: boolean, responseTime: number): void {\r\n    const health = this.activeTunnels.get(tunnelId);\r\n    if (!health) return;\r\n    \r\n    // Update response time with exponential moving average\r\n    const alpha = 0.1;\r\n    health.responseTime = (alpha * responseTime) + ((1 - alpha) * health.responseTime);\r\n    \r\n    // Update error rate and consecutive failures\r\n    if (success) {\r\n      health.consecutiveFailures = 0;\r\n      health.errorRate = Math.max(0, health.errorRate - 0.1);\r\n    } else {\r\n      health.consecutiveFailures++;\r\n      health.errorRate = Math.min(1, health.errorRate + 0.1);\r\n    }\r\n    \r\n    // Update health status\r\n    health.isHealthy = health.consecutiveFailures < this.failureThreshold && health.errorRate < 0.5;\r\n    health.lastHealthCheck = new Date();\r\n    \r\n    logger.debug(`\uD83D\uDCCA Tunnel health updated: ${tunnelId} (healthy: ${health.isHealthy}, errors: ${health.consecutiveFailures})`);\r\n  }\r\n\r\n  /**\r\n   * Update routing statistics\r\n   * \r\n   * @param success - Request success status\r\n   * @param responseTime - Response time in milliseconds\r\n   */\r\n  private updateRoutingStats(success: boolean, responseTime: number): void {\r\n    this.routingStats.totalRequests++;\r\n    this.routingStats.lastRequestTime = new Date();\r\n    \r\n    if (success) {\r\n      this.routingStats.successfulRequests++;\r\n    } else {\r\n      this.routingStats.failedRequests++;\r\n    }\r\n    \r\n    // Update average response time with exponential moving average\r\n    const alpha = 0.1;\r\n    this.routingStats.averageResponseTime = \r\n      (alpha * responseTime) + ((1 - alpha) * this.routingStats.averageResponseTime);\r\n  }\r\n\r\n  /**\r\n   * Set up tunnel manager event listeners\r\n   */\r\n  private setupTunnelEventListeners(): void {\r\n    this.tunnelManager.on('tunnelConnected', (connection: TunnelConnection) => {\r\n      logger.info(`\uD83D\uDD17 Tunnel connected: ${connection.id}`);\r\n      \r\n      // Add to active tunnels if not already present\r\n      if (!this.activeTunnels.has(connection.id)) {\r\n        this.activeTunnels.set(connection.id, {\r\n          tunnelId: connection.id,\r\n          isHealthy: true,\r\n          responseTime: 0,\r\n          errorRate: 0,\r\n          lastHealthCheck: new Date(),\r\n          consecutiveFailures: 0,\r\n        });\r\n      }\r\n    });\r\n    \r\n    this.tunnelManager.on('tunnelDisconnected', (connection: TunnelConnection) => {\r\n      logger.warn(`\uD83D\uDD0C Tunnel disconnected: ${connection.id}`);\r\n      \r\n      // Mark tunnel as unhealthy\r\n      const health = this.activeTunnels.get(connection.id);\r\n      if (health) {\r\n        health.isHealthy = false;\r\n      }\r\n      \r\n      // Switch to another tunnel if this was the active one\r\n      if (this.currentTunnelId === connection.id) {\r\n        this.selectActiveTunnel().catch(error => {\r\n          logger.error('\u274C Failed to switch tunnel after disconnection:', error);\r\n        });\r\n      }\r\n    });\r\n    \r\n    this.tunnelManager.on('tunnelError', (connection: TunnelConnection, error: Error) => {\r\n      logger.error(`\u274C Tunnel error: ${connection.id} - ${error.message}`);\r\n      \r\n      // Mark tunnel as unhealthy\r\n      const health = this.activeTunnels.get(connection.id);\r\n      if (health) {\r\n        health.isHealthy = false;\r\n        health.consecutiveFailures++;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Start health monitoring for tunnels\r\n   */\r\n  private startHealthMonitoring(): void {\r\n    this.healthCheckTimer = setInterval(async () => {\r\n      await this.performHealthChecks();\r\n    }, this.healthCheckInterval);\r\n    \r\n    logger.info('\uD83C\uDFE5 Started tunnel health monitoring');\r\n  }\r\n\r\n  /**\r\n   * Perform health checks on all tunnels\r\n   */\r\n  private async performHealthChecks(): Promise<void> {\r\n    const healthCheckPromises = Array.from(this.activeTunnels.keys()).map(\r\n      tunnelId => this.performTunnelHealthCheck(tunnelId)\r\n    );\r\n    \r\n    await Promise.allSettled(healthCheckPromises);\r\n  }\r\n\r\n  /**\r\n   * Perform health check on specific tunnel\r\n   * \r\n   * @param tunnelId - Tunnel identifier\r\n   */\r\n  private async performTunnelHealthCheck(tunnelId: string): Promise<void> {\r\n    try {\r\n      const tunnel = this.tunnelManager.getConnection(tunnelId);\r\n      if (!tunnel || tunnel.state !== TunnelState.CONNECTED) {\r\n        this.updateTunnelHealth(tunnelId, false, 0);\r\n        return;\r\n      }\r\n      \r\n      // Perform simple connectivity test\r\n      const startTime = Date.now();\r\n      \r\n      // Import axios dynamically\r\n      const axios = (await import('axios')).default;\r\n      \r\n      // Test connection through tunnel\r\n      await axios.get('https://api.gateio.ws/api/v4/spot/time', {\r\n        proxy: {\r\n          host: 'localhost',\r\n          port: tunnel.config.localPort,\r\n          protocol: 'http',\r\n        },\r\n        timeout: 5000,\r\n      });\r\n      \r\n      const responseTime = Date.now() - startTime;\r\n      this.updateTunnelHealth(tunnelId, true, responseTime);\r\n      \r\n    } catch (error) {\r\n      logger.debug(`\uD83C\uDFE5 Health check failed for tunnel ${tunnelId}:`, error.message);\r\n      this.updateTunnelHealth(tunnelId, false, 0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Start queue processing\r\n   */\r\n  private startQueueProcessing(): void {\r\n    // Process queue every 100ms\r\n    setInterval(() => {\r\n      if (!this.isProcessingQueue && this.requestQueue.length > 0) {\r\n        this.processQueue();\r\n      }\r\n    }, 100);\r\n  }\r\n\r\n  /**\r\n   * Determine if request should be retried\r\n   * \r\n   * @param error - Request error\r\n   * @returns boolean - Should retry\r\n   */\r\n  private shouldRetryRequest(error: any): boolean {\r\n    // Retry on network errors or server errors (5xx)\r\n    if (!error.response) return true; // Network error\r\n    \r\n    const status = error.response?.status;\r\n    return status >= 500 || status === 429; // Server error or rate limit\r\n  }\r\n\r\n  /**\r\n   * Calculate retry delay with exponential backoff\r\n   * \r\n   * @param retryCount - Current retry count\r\n   * @returns number - Delay in milliseconds\r\n   */\r\n  private calculateRetryDelay(retryCount: number): number {\r\n    const baseDelay = 1000; // 1 second\r\n    const maxDelay = 30000; // 30 seconds\r\n    \r\n    const delay = Math.min(baseDelay * Math.pow(2, retryCount - 1), maxDelay);\r\n    \r\n    // Add jitter to prevent thundering herd\r\n    const jitter = Math.random() * 0.1 * delay;\r\n    \r\n    return delay + jitter;\r\n  }\r\n\r\n  /**\r\n   * Handle request errors\r\n   * \r\n   * @param error - Request error\r\n   * @param config - Request configuration\r\n   */\r\n  private handleRequestError(error: any, config: AxiosRequestConfig): void {\r\n    this.auditService.logSecurityEvent({\r\n      type: 'TUNNEL_REQUEST_ERROR',\r\n      severity: 'ERROR',\r\n      details: {\r\n        error: error.message,\r\n        url: config.url,\r\n        method: config.method,\r\n        tunnelId: this.currentTunnelId,\r\n      },\r\n      timestamp: new Date(),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Generate unique request ID\r\n   */\r\n  private generateRequestId(): string {\r\n    return `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  /**\r\n   * Validate URL format\r\n   * \r\n   * @param url - URL to validate\r\n   * @returns boolean - Is valid URL\r\n   */\r\n  private isValidURL(url: string): boolean {\r\n    try {\r\n      new URL(url, 'https://api.gateio.ws');\r\n      return true;\r\n    } catch {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sanitize headers for logging\r\n   * \r\n   * @param headers - Request headers\r\n   * @returns Sanitized headers\r\n   */\r\n  private sanitizeHeaders(headers: Record<string, any>): Record<string, any> {\r\n    const sanitized = { ...headers };\r\n    \r\n    // Remove sensitive headers\r\n    delete sanitized.KEY;\r\n    delete sanitized.SIGN;\r\n    delete sanitized.Passphrase;\r\n    delete sanitized.Authorization;\r\n    \r\n    return sanitized;\r\n  }\r\n\r\n  /**\r\n   * Get routing statistics\r\n   */\r\n  public getRoutingStats(): TunnelRoutingStats {\r\n    return { ...this.routingStats };\r\n  }\r\n\r\n  /**\r\n   * Get tunnel health status\r\n   */\r\n  public getTunnelHealthStatus(): TunnelHealthStatus[] {\r\n    return Array.from(this.activeTunnels.values());\r\n  }\r\n\r\n  /**\r\n   * Get current active tunnel ID\r\n   */\r\n  public getCurrentTunnelId(): string | null {\r\n    return this.currentTunnelId;\r\n  }\r\n\r\n  /**\r\n   * Graceful shutdown\r\n   */\r\n  public async shutdown(): Promise<void> {\r\n    logger.info('\uD83D\uDED1 Shutting down tunnel router...');\r\n    \r\n    // Stop health monitoring\r\n    if (this.healthCheckTimer) {\r\n      clearInterval(this.healthCheckTimer);\r\n      this.healthCheckTimer = null;\r\n    }\r\n    \r\n    // Clear request queue\r\n    this.requestQueue.forEach(request => {\r\n      request.reject(new Error('Tunnel router is shutting down'));\r\n    });\r\n    this.requestQueue = [];\r\n    \r\n    // Log final statistics\r\n    await this.auditService.logSecurityEvent({\r\n      type: 'TUNNEL_ROUTER_SHUTDOWN',\r\n      severity: 'INFO',\r\n      details: { routingStats: this.routingStats },\r\n      timestamp: new Date(),\r\n    });\r\n    \r\n    logger.info('\u2705 Tunnel router shutdown completed');\r\n  }\r\n}\r\n\r\n// Export types\r\nexport type {\r\n  QueuedRequest,\r\n  TunnelRoutingStats,\r\n  ValidationResult,\r\n  IntegrityCheckResult,\r\n  TunnelHealthStatus,\r\n};\r\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "2ed7b369a6a93857728a0e324fae3a70d79d1ba8"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_f1k81r6s8 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_f1k81r6s8();
var __importDefault =
/* istanbul ignore next */
(cov_f1k81r6s8().s[0]++,
/* istanbul ignore next */
(cov_f1k81r6s8().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_f1k81r6s8().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_f1k81r6s8().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_f1k81r6s8().f[0]++;
  cov_f1k81r6s8().s[1]++;
  return /* istanbul ignore next */(cov_f1k81r6s8().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_f1k81r6s8().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_f1k81r6s8().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_f1k81r6s8().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_f1k81r6s8().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_f1k81r6s8().s[3]++;
exports.TunnelRouter = exports.RequestPriority = void 0;
const events_1 =
/* istanbul ignore next */
(cov_f1k81r6s8().s[4]++, require("events"));
const crypto_1 =
/* istanbul ignore next */
(cov_f1k81r6s8().s[5]++, __importDefault(require("crypto")));
const logger_1 =
/* istanbul ignore next */
(cov_f1k81r6s8().s[6]++, require("@/core/logging/logger"));
const audit_service_1 =
/* istanbul ignore next */
(cov_f1k81r6s8().s[7]++, require("@/security/audit-service"));
const ssh_tunnel_manager_1 =
/* istanbul ignore next */
(cov_f1k81r6s8().s[8]++, require("@/infrastructure/ssh-tunnel-manager"));
/**
 * Request priority levels for queue management
 */
var RequestPriority;
/* istanbul ignore next */
cov_f1k81r6s8().s[9]++;
(function (RequestPriority) {
  /* istanbul ignore next */
  cov_f1k81r6s8().f[1]++;
  cov_f1k81r6s8().s[10]++;
  RequestPriority[RequestPriority["LOW"] = 1] = "LOW";
  /* istanbul ignore next */
  cov_f1k81r6s8().s[11]++;
  RequestPriority[RequestPriority["NORMAL"] = 2] = "NORMAL";
  /* istanbul ignore next */
  cov_f1k81r6s8().s[12]++;
  RequestPriority[RequestPriority["HIGH"] = 3] = "HIGH";
  /* istanbul ignore next */
  cov_f1k81r6s8().s[13]++;
  RequestPriority[RequestPriority["CRITICAL"] = 4] = "CRITICAL";
})(
/* istanbul ignore next */
(cov_f1k81r6s8().b[3][0]++, RequestPriority) ||
/* istanbul ignore next */
(cov_f1k81r6s8().b[3][1]++, exports.RequestPriority = RequestPriority = {}));
/**
 * SSH Tunnel Router for Gate.io API Requests
 * Manages intelligent routing through SSH tunnel infrastructure
 */
class TunnelRouter extends
/* istanbul ignore next */
(events_1.EventEmitter) {
  tunnelManager;
  auditService;
  requestQueue =
  /* istanbul ignore next */
  (cov_f1k81r6s8().s[14]++, []);
  isProcessingQueue =
  /* istanbul ignore next */
  (cov_f1k81r6s8().s[15]++, false);
  activeTunnels =
  /* istanbul ignore next */
  (cov_f1k81r6s8().s[16]++, new Map());
  routingStats;
  currentTunnelId =
  /* istanbul ignore next */
  (cov_f1k81r6s8().s[17]++, null);
  // Configuration
  maxQueueSize =
  /* istanbul ignore next */
  (cov_f1k81r6s8().s[18]++, 1000);
  maxRetries =
  /* istanbul ignore next */
  (cov_f1k81r6s8().s[19]++, 3);
  requestTimeout =
  /* istanbul ignore next */
  (cov_f1k81r6s8().s[20]++, 30000); // 30 seconds
  healthCheckInterval =
  /* istanbul ignore next */
  (cov_f1k81r6s8().s[21]++, 60000); // 1 minute
  failureThreshold =
  /* istanbul ignore next */
  (cov_f1k81r6s8().s[22]++, 5);
  // Health monitoring
  healthCheckTimer =
  /* istanbul ignore next */
  (cov_f1k81r6s8().s[23]++, null);
  constructor(tunnelManager) {
    /* istanbul ignore next */
    cov_f1k81r6s8().f[2]++;
    cov_f1k81r6s8().s[24]++;
    super();
    /* istanbul ignore next */
    cov_f1k81r6s8().s[25]++;
    this.tunnelManager = tunnelManager;
    /* istanbul ignore next */
    cov_f1k81r6s8().s[26]++;
    this.auditService = new audit_service_1.AuditService();
    // Initialize routing statistics
    /* istanbul ignore next */
    cov_f1k81r6s8().s[27]++;
    this.routingStats = {
      totalRequests: 0,
      successfulRequests: 0,
      failedRequests: 0,
      queuedRequests: 0,
      averageResponseTime: 0,
      tunnelSwitches: 0,
      integrityFailures: 0,
      lastRequestTime: null
    };
    // Set up tunnel manager event listeners
    /* istanbul ignore next */
    cov_f1k81r6s8().s[28]++;
    this.setupTunnelEventListeners();
    // Start health monitoring
    /* istanbul ignore next */
    cov_f1k81r6s8().s[29]++;
    this.startHealthMonitoring();
    /* istanbul ignore next */
    cov_f1k81r6s8().s[30]++;
    logger_1.logger.info('🌐 Tunnel Router initialized for Gate.io API requests');
  }
  /**
   * Initialize tunnel router with SSH tunnel connections
   *
   * @param tunnelConfigs - Array of tunnel configurations
   * @returns Promise<boolean> - Success status
   */
  async initialize(tunnelConfigs) {
    /* istanbul ignore next */
    cov_f1k81r6s8().f[3]++;
    cov_f1k81r6s8().s[31]++;
    try {
      /* istanbul ignore next */
      cov_f1k81r6s8().s[32]++;
      logger_1.logger.info('🚀 Initializing tunnel router with SSH connections...');
      // Create and establish tunnel connections
      /* istanbul ignore next */
      cov_f1k81r6s8().s[33]++;
      for (const config of tunnelConfigs) {
        const connection =
        /* istanbul ignore next */
        (cov_f1k81r6s8().s[34]++, await this.tunnelManager.establishTunnel(config));
        /* istanbul ignore next */
        cov_f1k81r6s8().s[35]++;
        await this.tunnelManager.establishTunnel(connection.id);
        // Initialize health status for tunnel
        /* istanbul ignore next */
        cov_f1k81r6s8().s[36]++;
        this.activeTunnels.set(connection.id, {
          tunnelId: connection.id,
          isHealthy: true,
          responseTime: 0,
          errorRate: 0,
          lastHealthCheck: new Date(),
          consecutiveFailures: 0
        });
        /* istanbul ignore next */
        cov_f1k81r6s8().s[37]++;
        logger_1.logger.info(`✅ Tunnel established: ${connection.id}`);
      }
      // Select initial active tunnel
      /* istanbul ignore next */
      cov_f1k81r6s8().s[38]++;
      this.selectActiveTunnel();
      // Start request queue processing
      /* istanbul ignore next */
      cov_f1k81r6s8().s[39]++;
      this.startQueueProcessing();
      /* istanbul ignore next */
      cov_f1k81r6s8().s[40]++;
      await this.auditService.logSecurityEvent({
        type: 'TUNNEL_ROUTER_INITIALIZED',
        severity: 'INFO',
        details: {
          tunnelCount: tunnelConfigs.length,
          activeTunnelId: this.currentTunnelId
        },
        timestamp: new Date()
      });
      /* istanbul ignore next */
      cov_f1k81r6s8().s[41]++;
      logger_1.logger.info('✅ Tunnel router initialized successfully');
      /* istanbul ignore next */
      cov_f1k81r6s8().s[42]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_f1k81r6s8().s[43]++;
      logger_1.logger.error('❌ Failed to initialize tunnel router:', error);
      /* istanbul ignore next */
      cov_f1k81r6s8().s[44]++;
      await this.auditService.logSecurityEvent({
        type: 'TUNNEL_ROUTER_INIT_FAILED',
        severity: 'ERROR',
        details: {
          error: error.message
        },
        timestamp: new Date()
      });
      /* istanbul ignore next */
      cov_f1k81r6s8().s[45]++;
      return false;
    }
  }
  /**
   * Route API request through SSH tunnel with validation and retry logic
   *
   * @param config - Axios request configuration
   * @param priority - Request priority level
   * @returns Promise<AxiosResponse> - API response
   */
  async routeRequest(config, priority =
  /* istanbul ignore next */
  (cov_f1k81r6s8().b[4][0]++, RequestPriority.NORMAL)) {
    /* istanbul ignore next */
    cov_f1k81r6s8().f[4]++;
    cov_f1k81r6s8().s[46]++;
    return new Promise((resolve, reject) => {
      /* istanbul ignore next */
      cov_f1k81r6s8().f[5]++;
      // Validate request before queuing
      const validation =
      /* istanbul ignore next */
      (cov_f1k81r6s8().s[47]++, this.validateRequest(config));
      /* istanbul ignore next */
      cov_f1k81r6s8().s[48]++;
      if (!validation.isValid) {
        /* istanbul ignore next */
        cov_f1k81r6s8().b[5][0]++;
        const error =
        /* istanbul ignore next */
        (cov_f1k81r6s8().s[49]++, new Error(`Request validation failed: ${validation.errors.join(', ')}`));
        /* istanbul ignore next */
        cov_f1k81r6s8().s[50]++;
        this.handleRequestError(error, config);
        /* istanbul ignore next */
        cov_f1k81r6s8().s[51]++;
        reject(error);
        /* istanbul ignore next */
        cov_f1k81r6s8().s[52]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_f1k81r6s8().b[5][1]++;
      }
      // Create queued request entry
      const queuedRequest =
      /* istanbul ignore next */
      (cov_f1k81r6s8().s[53]++, {
        id: this.generateRequestId(),
        config: {
          ...config,
          metadata: {
            ...config.metadata,
            requestChecksum: validation.checksum,
            validationTimestamp: validation.timestamp
          }
        },
        priority,
        timestamp: new Date(),
        retryCount: 0,
        maxRetries: this.maxRetries,
        resolve,
        reject
      });
      // Add to queue
      /* istanbul ignore next */
      cov_f1k81r6s8().s[54]++;
      this.addToQueue(queuedRequest);
      // Log request for audit trail
      /* istanbul ignore next */
      cov_f1k81r6s8().s[55]++;
      this.auditService.logAPIRequest({
        method:
        /* istanbul ignore next */
        (cov_f1k81r6s8().b[6][0]++, config.method?.toUpperCase()) ||
        /* istanbul ignore next */
        (cov_f1k81r6s8().b[6][1]++, 'GET'),
        url:
        /* istanbul ignore next */
        (cov_f1k81r6s8().b[7][0]++, config.url) ||
        /* istanbul ignore next */
        (cov_f1k81r6s8().b[7][1]++, ''),
        timestamp: new Date(),
        headers: this.sanitizeHeaders(
        /* istanbul ignore next */
        (cov_f1k81r6s8().b[8][0]++, config.headers) ||
        /* istanbul ignore next */
        (cov_f1k81r6s8().b[8][1]++, {})),
        requestId: queuedRequest.id,
        priority: priority.toString()
      });
    });
  }
  /**
   * Add request to priority queue
   *
   * @param request - Queued request to add
   */
  addToQueue(request) {
    /* istanbul ignore next */
    cov_f1k81r6s8().f[6]++;
    cov_f1k81r6s8().s[56]++;
    // Check queue size limit
    if (this.requestQueue.length >= this.maxQueueSize) {
      /* istanbul ignore next */
      cov_f1k81r6s8().b[9][0]++;
      const error =
      /* istanbul ignore next */
      (cov_f1k81r6s8().s[57]++, new Error('Request queue is full'));
      /* istanbul ignore next */
      cov_f1k81r6s8().s[58]++;
      this.handleRequestError(error, request.config);
      /* istanbul ignore next */
      cov_f1k81r6s8().s[59]++;
      request.reject(error);
      /* istanbul ignore next */
      cov_f1k81r6s8().s[60]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_f1k81r6s8().b[9][1]++;
    }
    // Insert request based on priority (higher priority first)
    let insertIndex =
    /* istanbul ignore next */
    (cov_f1k81r6s8().s[61]++, this.requestQueue.length);
    /* istanbul ignore next */
    cov_f1k81r6s8().s[62]++;
    for (let i =
    /* istanbul ignore next */
    (cov_f1k81r6s8().s[63]++, 0); i < this.requestQueue.length; i++) {
      /* istanbul ignore next */
      cov_f1k81r6s8().s[64]++;
      if (this.requestQueue[i].priority < request.priority) {
        /* istanbul ignore next */
        cov_f1k81r6s8().b[10][0]++;
        cov_f1k81r6s8().s[65]++;
        insertIndex = i;
        /* istanbul ignore next */
        cov_f1k81r6s8().s[66]++;
        break;
      } else
      /* istanbul ignore next */
      {
        cov_f1k81r6s8().b[10][1]++;
      }
    }
    /* istanbul ignore next */
    cov_f1k81r6s8().s[67]++;
    this.requestQueue.splice(insertIndex, 0, request);
    /* istanbul ignore next */
    cov_f1k81r6s8().s[68]++;
    this.routingStats.queuedRequests = this.requestQueue.length;
    /* istanbul ignore next */
    cov_f1k81r6s8().s[69]++;
    logger_1.logger.debug(`📥 Request queued: ${request.id} (priority: ${request.priority}, queue size: ${this.requestQueue.length})`);
    // Trigger queue processing if not already running
    /* istanbul ignore next */
    cov_f1k81r6s8().s[70]++;
    if (!this.isProcessingQueue) {
      /* istanbul ignore next */
      cov_f1k81r6s8().b[11][0]++;
      cov_f1k81r6s8().s[71]++;
      this.processQueue();
    } else
    /* istanbul ignore next */
    {
      cov_f1k81r6s8().b[11][1]++;
    }
  }
  /**
   * Process request queue with tunnel routing
   */
  async processQueue() {
    /* istanbul ignore next */
    cov_f1k81r6s8().f[7]++;
    cov_f1k81r6s8().s[72]++;
    if (
    /* istanbul ignore next */
    (cov_f1k81r6s8().b[13][0]++, this.isProcessingQueue) ||
    /* istanbul ignore next */
    (cov_f1k81r6s8().b[13][1]++, this.requestQueue.length === 0)) {
      /* istanbul ignore next */
      cov_f1k81r6s8().b[12][0]++;
      cov_f1k81r6s8().s[73]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_f1k81r6s8().b[12][1]++;
    }
    cov_f1k81r6s8().s[74]++;
    this.isProcessingQueue = true;
    /* istanbul ignore next */
    cov_f1k81r6s8().s[75]++;
    try {
      /* istanbul ignore next */
      cov_f1k81r6s8().s[76]++;
      while (this.requestQueue.length > 0) {
        const request =
        /* istanbul ignore next */
        (cov_f1k81r6s8().s[77]++, this.requestQueue.shift());
        /* istanbul ignore next */
        cov_f1k81r6s8().s[78]++;
        this.routingStats.queuedRequests = this.requestQueue.length;
        /* istanbul ignore next */
        cov_f1k81r6s8().s[79]++;
        try {
          /* istanbul ignore next */
          cov_f1k81r6s8().s[80]++;
          await this.processRequest(request);
        } catch (error) {
          /* istanbul ignore next */
          cov_f1k81r6s8().s[81]++;
          logger_1.logger.error(`❌ Failed to process request ${request.id}:`, error);
        }
      }
    } finally {
      /* istanbul ignore next */
      cov_f1k81r6s8().s[82]++;
      this.isProcessingQueue = false;
    }
  }
  /**
   * Process individual request through tunnel
   *
   * @param request - Queued request to process
   */
  async processRequest(request) {
    /* istanbul ignore next */
    cov_f1k81r6s8().f[8]++;
    const startTime =
    /* istanbul ignore next */
    (cov_f1k81r6s8().s[83]++, Date.now());
    /* istanbul ignore next */
    cov_f1k81r6s8().s[84]++;
    try {
      /* istanbul ignore next */
      cov_f1k81r6s8().s[85]++;
      // Ensure we have an active tunnel
      if (
      /* istanbul ignore next */
      (cov_f1k81r6s8().b[15][0]++, !this.currentTunnelId) ||
      /* istanbul ignore next */
      (cov_f1k81r6s8().b[15][1]++, !this.isActiveTunnelHealthy())) {
        /* istanbul ignore next */
        cov_f1k81r6s8().b[14][0]++;
        cov_f1k81r6s8().s[86]++;
        await this.selectActiveTunnel();
      } else
      /* istanbul ignore next */
      {
        cov_f1k81r6s8().b[14][1]++;
      }
      cov_f1k81r6s8().s[87]++;
      if (!this.currentTunnelId) {
        /* istanbul ignore next */
        cov_f1k81r6s8().b[16][0]++;
        cov_f1k81r6s8().s[88]++;
        throw new Error('No healthy tunnel available for request routing');
      } else
      /* istanbul ignore next */
      {
        cov_f1k81r6s8().b[16][1]++;
      }
      // Get tunnel connection
      const tunnel =
      /* istanbul ignore next */
      (cov_f1k81r6s8().s[89]++, this.tunnelManager.getConnection(this.currentTunnelId));
      /* istanbul ignore next */
      cov_f1k81r6s8().s[90]++;
      if (
      /* istanbul ignore next */
      (cov_f1k81r6s8().b[18][0]++, !tunnel) ||
      /* istanbul ignore next */
      (cov_f1k81r6s8().b[18][1]++, tunnel.state !== ssh_tunnel_manager_1.TunnelState.CONNECTED)) {
        /* istanbul ignore next */
        cov_f1k81r6s8().b[17][0]++;
        cov_f1k81r6s8().s[91]++;
        throw new Error(`Tunnel not available: ${this.currentTunnelId}`);
      } else
      /* istanbul ignore next */
      {
        cov_f1k81r6s8().b[17][1]++;
      }
      // Route request through tunnel
      const response =
      /* istanbul ignore next */
      (cov_f1k81r6s8().s[92]++, await this.executeRequestThroughTunnel(request, tunnel));
      // Validate response integrity
      const integrityCheck =
      /* istanbul ignore next */
      (cov_f1k81r6s8().s[93]++, this.validateResponseIntegrity(request, response));
      /* istanbul ignore next */
      cov_f1k81r6s8().s[94]++;
      if (!integrityCheck.isValid) {
        /* istanbul ignore next */
        cov_f1k81r6s8().b[19][0]++;
        cov_f1k81r6s8().s[95]++;
        this.routingStats.integrityFailures++;
        /* istanbul ignore next */
        cov_f1k81r6s8().s[96]++;
        throw new Error(`Response integrity check failed: expected ${integrityCheck.expectedChecksum}, got ${integrityCheck.actualChecksum}`);
      } else
      /* istanbul ignore next */
      {
        cov_f1k81r6s8().b[19][1]++;
      }
      // Update statistics
      const responseTime =
      /* istanbul ignore next */
      (cov_f1k81r6s8().s[97]++, Date.now() - startTime);
      /* istanbul ignore next */
      cov_f1k81r6s8().s[98]++;
      this.updateRoutingStats(true, responseTime);
      /* istanbul ignore next */
      cov_f1k81r6s8().s[99]++;
      this.updateTunnelHealth(this.currentTunnelId, true, responseTime);
      // Log successful response
      /* istanbul ignore next */
      cov_f1k81r6s8().s[100]++;
      await this.auditService.logAPIResponse({
        status: response.status,
        responseTime,
        timestamp: new Date(),
        success: true,
        requestId: request.id,
        tunnelId: this.currentTunnelId
      });
      // Resolve request
      /* istanbul ignore next */
      cov_f1k81r6s8().s[101]++;
      request.resolve(response);
      /* istanbul ignore next */
      cov_f1k81r6s8().s[102]++;
      logger_1.logger.debug(`✅ Request completed successfully: ${request.id} (${responseTime}ms)`);
    } catch (error) {
      const responseTime =
      /* istanbul ignore next */
      (cov_f1k81r6s8().s[103]++, Date.now() - startTime);
      // Update statistics
      /* istanbul ignore next */
      cov_f1k81r6s8().s[104]++;
      this.updateRoutingStats(false, responseTime);
      /* istanbul ignore next */
      cov_f1k81r6s8().s[105]++;
      this.updateTunnelHealth(
      /* istanbul ignore next */
      (cov_f1k81r6s8().b[20][0]++, this.currentTunnelId) ||
      /* istanbul ignore next */
      (cov_f1k81r6s8().b[20][1]++, ''), false, responseTime);
      // Handle retry logic
      /* istanbul ignore next */
      cov_f1k81r6s8().s[106]++;
      if (
      /* istanbul ignore next */
      (cov_f1k81r6s8().b[22][0]++, request.retryCount < request.maxRetries) &&
      /* istanbul ignore next */
      (cov_f1k81r6s8().b[22][1]++, this.shouldRetryRequest(error))) {
        /* istanbul ignore next */
        cov_f1k81r6s8().b[21][0]++;
        cov_f1k81r6s8().s[107]++;
        request.retryCount++;
        /* istanbul ignore next */
        cov_f1k81r6s8().s[108]++;
        logger_1.logger.info(`🔄 Retrying request ${request.id} (attempt ${request.retryCount}/${request.maxRetries})`);
        // Add back to queue with delay
        /* istanbul ignore next */
        cov_f1k81r6s8().s[109]++;
        setTimeout(() => {
          /* istanbul ignore next */
          cov_f1k81r6s8().f[9]++;
          cov_f1k81r6s8().s[110]++;
          this.addToQueue(request);
        }, this.calculateRetryDelay(request.retryCount));
        /* istanbul ignore next */
        cov_f1k81r6s8().s[111]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_f1k81r6s8().b[21][1]++;
      }
      // Log failed response
      cov_f1k81r6s8().s[112]++;
      await this.auditService.logAPIResponse({
        status: 0,
        responseTime,
        timestamp: new Date(),
        success: false,
        error: error.message,
        requestId: request.id,
        tunnelId:
        /* istanbul ignore next */
        (cov_f1k81r6s8().b[23][0]++, this.currentTunnelId) ||
        /* istanbul ignore next */
        (cov_f1k81r6s8().b[23][1]++, 'unknown')
      });
      // Reject request
      /* istanbul ignore next */
      cov_f1k81r6s8().s[113]++;
      this.handleRequestError(error, request.config);
      /* istanbul ignore next */
      cov_f1k81r6s8().s[114]++;
      request.reject(error);
      /* istanbul ignore next */
      cov_f1k81r6s8().s[115]++;
      logger_1.logger.error(`❌ Request failed: ${request.id} - ${error.message}`);
    }
  }
  /**
   * Execute request through specific tunnel
   *
   * @param request - Queued request
   * @param tunnel - Tunnel connection
   * @returns Promise<AxiosResponse> - API response
   */
  async executeRequestThroughTunnel(request, tunnel) {
    /* istanbul ignore next */
    cov_f1k81r6s8().f[10]++;
    // Configure request to use tunnel proxy
    const tunnelConfig =
    /* istanbul ignore next */
    (cov_f1k81r6s8().s[116]++, {
      ...request.config,
      proxy: {
        host: 'localhost',
        port: tunnel.config.localPort,
        protocol: 'http'
      },
      timeout: this.requestTimeout
    });
    // Import axios dynamically to avoid circular dependencies
    const axios =
    /* istanbul ignore next */
    (cov_f1k81r6s8().s[117]++, (await import('axios')).default);
    // Execute request through tunnel
    const response =
    /* istanbul ignore next */
    (cov_f1k81r6s8().s[118]++, await axios.request(tunnelConfig));
    // Add tunnel metadata to response
    /* istanbul ignore next */
    cov_f1k81r6s8().s[119]++;
    response.config.metadata = {
      ...response.config.metadata,
      tunnelId: tunnel.id,
      tunnelLocalPort: tunnel.config.localPort,
      routedAt: new Date()
    };
    /* istanbul ignore next */
    cov_f1k81r6s8().s[120]++;
    return response;
  }
  /**
   * Validate request before processing
   *
   * @param config - Request configuration
   * @returns ValidationResult - Validation result
   */
  validateRequest(config) {
    /* istanbul ignore next */
    cov_f1k81r6s8().f[11]++;
    const errors =
    /* istanbul ignore next */
    (cov_f1k81r6s8().s[121]++, []);
    // Validate required fields
    /* istanbul ignore next */
    cov_f1k81r6s8().s[122]++;
    if (!config.url) {
      /* istanbul ignore next */
      cov_f1k81r6s8().b[24][0]++;
      cov_f1k81r6s8().s[123]++;
      errors.push('Missing request URL');
    } else
    /* istanbul ignore next */
    {
      cov_f1k81r6s8().b[24][1]++;
    }
    cov_f1k81r6s8().s[124]++;
    if (!config.method) {
      /* istanbul ignore next */
      cov_f1k81r6s8().b[25][0]++;
      cov_f1k81r6s8().s[125]++;
      errors.push('Missing request method');
    } else
    /* istanbul ignore next */
    {
      cov_f1k81r6s8().b[25][1]++;
    }
    // Validate URL format
    cov_f1k81r6s8().s[126]++;
    if (
    /* istanbul ignore next */
    (cov_f1k81r6s8().b[27][0]++, config.url) &&
    /* istanbul ignore next */
    (cov_f1k81r6s8().b[27][1]++, !this.isValidURL(config.url))) {
      /* istanbul ignore next */
      cov_f1k81r6s8().b[26][0]++;
      cov_f1k81r6s8().s[127]++;
      errors.push('Invalid URL format');
    } else
    /* istanbul ignore next */
    {
      cov_f1k81r6s8().b[26][1]++;
    }
    // Create request checksum for integrity validation
    const requestData =
    /* istanbul ignore next */
    (cov_f1k81r6s8().s[128]++, JSON.stringify({
      method: config.method,
      url: config.url,
      headers: config.headers,
      data: config.data
    }));
    const checksum =
    /* istanbul ignore next */
    (cov_f1k81r6s8().s[129]++, crypto_1.default.createHash('sha256').update(requestData).digest('hex'));
    /* istanbul ignore next */
    cov_f1k81r6s8().s[130]++;
    return {
      isValid: errors.length === 0,
      checksum,
      timestamp: new Date(),
      errors
    };
  }
  /**
   * Validate response integrity
   *
   * @param request - Original request
   * @param response - API response
   * @returns IntegrityCheckResult - Integrity check result
   */
  validateResponseIntegrity(request, response) {
    /* istanbul ignore next */
    cov_f1k81r6s8().f[12]++;
    const expectedChecksum =
    /* istanbul ignore next */
    (cov_f1k81r6s8().s[131]++,
    /* istanbul ignore next */
    (cov_f1k81r6s8().b[28][0]++, request.config.metadata?.requestChecksum) ||
    /* istanbul ignore next */
    (cov_f1k81r6s8().b[28][1]++, ''));
    // Create response checksum
    const responseData =
    /* istanbul ignore next */
    (cov_f1k81r6s8().s[132]++, JSON.stringify({
      status: response.status,
      headers: response.headers,
      data: response.data
    }));
    const actualChecksum =
    /* istanbul ignore next */
    (cov_f1k81r6s8().s[133]++, crypto_1.default.createHash('sha256').update(responseData + expectedChecksum).digest('hex'));
    // For now, we'll consider all responses valid
    // In a production system, you might implement more sophisticated integrity checks
    /* istanbul ignore next */
    cov_f1k81r6s8().s[134]++;
    return {
      isValid: true,
      expectedChecksum,
      actualChecksum,
      timestamp: new Date()
    };
  }
  /**
   * Select active tunnel based on health and performance
   */
  async selectActiveTunnel() {
    /* istanbul ignore next */
    cov_f1k81r6s8().f[13]++;
    const healthyTunnels =
    /* istanbul ignore next */
    (cov_f1k81r6s8().s[135]++, Array.from(this.activeTunnels.values()).filter(status => {
      /* istanbul ignore next */
      cov_f1k81r6s8().f[14]++;
      cov_f1k81r6s8().s[136]++;
      return status.isHealthy;
    }).sort((a, b) => {
      /* istanbul ignore next */
      cov_f1k81r6s8().f[15]++;
      cov_f1k81r6s8().s[137]++;
      return a.responseTime - b.responseTime;
    })); // Sort by response time
    /* istanbul ignore next */
    cov_f1k81r6s8().s[138]++;
    if (healthyTunnels.length === 0) {
      /* istanbul ignore next */
      cov_f1k81r6s8().b[29][0]++;
      cov_f1k81r6s8().s[139]++;
      logger_1.logger.error('❌ No healthy tunnels available');
      /* istanbul ignore next */
      cov_f1k81r6s8().s[140]++;
      throw new Error('No healthy tunnels available');
    } else
    /* istanbul ignore next */
    {
      cov_f1k81r6s8().b[29][1]++;
    }
    const newTunnelId =
    /* istanbul ignore next */
    (cov_f1k81r6s8().s[141]++, healthyTunnels[0].tunnelId);
    /* istanbul ignore next */
    cov_f1k81r6s8().s[142]++;
    if (newTunnelId !== this.currentTunnelId) {
      /* istanbul ignore next */
      cov_f1k81r6s8().b[30][0]++;
      const oldTunnelId =
      /* istanbul ignore next */
      (cov_f1k81r6s8().s[143]++, this.currentTunnelId);
      /* istanbul ignore next */
      cov_f1k81r6s8().s[144]++;
      this.currentTunnelId = newTunnelId;
      /* istanbul ignore next */
      cov_f1k81r6s8().s[145]++;
      this.routingStats.tunnelSwitches++;
      /* istanbul ignore next */
      cov_f1k81r6s8().s[146]++;
      logger_1.logger.info(`🔄 Switched active tunnel: ${oldTunnelId} -> ${newTunnelId}`);
      /* istanbul ignore next */
      cov_f1k81r6s8().s[147]++;
      await this.auditService.logSecurityEvent({
        type: 'TUNNEL_SWITCH',
        severity: 'INFO',
        details: {
          oldTunnelId,
          newTunnelId
        },
        timestamp: new Date()
      });
      /* istanbul ignore next */
      cov_f1k81r6s8().s[148]++;
      this.emit('tunnelSwitched', oldTunnelId, newTunnelId);
    } else
    /* istanbul ignore next */
    {
      cov_f1k81r6s8().b[30][1]++;
    }
  }
  /**
   * Check if current active tunnel is healthy
   */
  isActiveTunnelHealthy() {
    /* istanbul ignore next */
    cov_f1k81r6s8().f[16]++;
    cov_f1k81r6s8().s[149]++;
    if (!this.currentTunnelId) {
      /* istanbul ignore next */
      cov_f1k81r6s8().b[31][0]++;
      cov_f1k81r6s8().s[150]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_f1k81r6s8().b[31][1]++;
    }
    const tunnelHealth =
    /* istanbul ignore next */
    (cov_f1k81r6s8().s[151]++, this.activeTunnels.get(this.currentTunnelId));
    /* istanbul ignore next */
    cov_f1k81r6s8().s[152]++;
    return /* istanbul ignore next */(cov_f1k81r6s8().b[32][0]++, tunnelHealth?.isHealthy) ||
    /* istanbul ignore next */
    (cov_f1k81r6s8().b[32][1]++, false);
  }
  /**
   * Update tunnel health status
   *
   * @param tunnelId - Tunnel identifier
   * @param success - Request success status
   * @param responseTime - Response time in milliseconds
   */
  updateTunnelHealth(tunnelId, success, responseTime) {
    /* istanbul ignore next */
    cov_f1k81r6s8().f[17]++;
    const health =
    /* istanbul ignore next */
    (cov_f1k81r6s8().s[153]++, this.activeTunnels.get(tunnelId));
    /* istanbul ignore next */
    cov_f1k81r6s8().s[154]++;
    if (!health) {
      /* istanbul ignore next */
      cov_f1k81r6s8().b[33][0]++;
      cov_f1k81r6s8().s[155]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_f1k81r6s8().b[33][1]++;
    }
    // Update response time with exponential moving average
    const alpha =
    /* istanbul ignore next */
    (cov_f1k81r6s8().s[156]++, 0.1);
    /* istanbul ignore next */
    cov_f1k81r6s8().s[157]++;
    health.responseTime = alpha * responseTime + (1 - alpha) * health.responseTime;
    // Update error rate and consecutive failures
    /* istanbul ignore next */
    cov_f1k81r6s8().s[158]++;
    if (success) {
      /* istanbul ignore next */
      cov_f1k81r6s8().b[34][0]++;
      cov_f1k81r6s8().s[159]++;
      health.consecutiveFailures = 0;
      /* istanbul ignore next */
      cov_f1k81r6s8().s[160]++;
      health.errorRate = Math.max(0, health.errorRate - 0.1);
    } else {
      /* istanbul ignore next */
      cov_f1k81r6s8().b[34][1]++;
      cov_f1k81r6s8().s[161]++;
      health.consecutiveFailures++;
      /* istanbul ignore next */
      cov_f1k81r6s8().s[162]++;
      health.errorRate = Math.min(1, health.errorRate + 0.1);
    }
    // Update health status
    /* istanbul ignore next */
    cov_f1k81r6s8().s[163]++;
    health.isHealthy =
    /* istanbul ignore next */
    (cov_f1k81r6s8().b[35][0]++, health.consecutiveFailures < this.failureThreshold) &&
    /* istanbul ignore next */
    (cov_f1k81r6s8().b[35][1]++, health.errorRate < 0.5);
    /* istanbul ignore next */
    cov_f1k81r6s8().s[164]++;
    health.lastHealthCheck = new Date();
    /* istanbul ignore next */
    cov_f1k81r6s8().s[165]++;
    logger_1.logger.debug(`📊 Tunnel health updated: ${tunnelId} (healthy: ${health.isHealthy}, errors: ${health.consecutiveFailures})`);
  }
  /**
   * Update routing statistics
   *
   * @param success - Request success status
   * @param responseTime - Response time in milliseconds
   */
  updateRoutingStats(success, responseTime) {
    /* istanbul ignore next */
    cov_f1k81r6s8().f[18]++;
    cov_f1k81r6s8().s[166]++;
    this.routingStats.totalRequests++;
    /* istanbul ignore next */
    cov_f1k81r6s8().s[167]++;
    this.routingStats.lastRequestTime = new Date();
    /* istanbul ignore next */
    cov_f1k81r6s8().s[168]++;
    if (success) {
      /* istanbul ignore next */
      cov_f1k81r6s8().b[36][0]++;
      cov_f1k81r6s8().s[169]++;
      this.routingStats.successfulRequests++;
    } else {
      /* istanbul ignore next */
      cov_f1k81r6s8().b[36][1]++;
      cov_f1k81r6s8().s[170]++;
      this.routingStats.failedRequests++;
    }
    // Update average response time with exponential moving average
    const alpha =
    /* istanbul ignore next */
    (cov_f1k81r6s8().s[171]++, 0.1);
    /* istanbul ignore next */
    cov_f1k81r6s8().s[172]++;
    this.routingStats.averageResponseTime = alpha * responseTime + (1 - alpha) * this.routingStats.averageResponseTime;
  }
  /**
   * Set up tunnel manager event listeners
   */
  setupTunnelEventListeners() {
    /* istanbul ignore next */
    cov_f1k81r6s8().f[19]++;
    cov_f1k81r6s8().s[173]++;
    this.tunnelManager.on('tunnelConnected', connection => {
      /* istanbul ignore next */
      cov_f1k81r6s8().f[20]++;
      cov_f1k81r6s8().s[174]++;
      logger_1.logger.info(`🔗 Tunnel connected: ${connection.id}`);
      // Add to active tunnels if not already present
      /* istanbul ignore next */
      cov_f1k81r6s8().s[175]++;
      if (!this.activeTunnels.has(connection.id)) {
        /* istanbul ignore next */
        cov_f1k81r6s8().b[37][0]++;
        cov_f1k81r6s8().s[176]++;
        this.activeTunnels.set(connection.id, {
          tunnelId: connection.id,
          isHealthy: true,
          responseTime: 0,
          errorRate: 0,
          lastHealthCheck: new Date(),
          consecutiveFailures: 0
        });
      } else
      /* istanbul ignore next */
      {
        cov_f1k81r6s8().b[37][1]++;
      }
    });
    /* istanbul ignore next */
    cov_f1k81r6s8().s[177]++;
    this.tunnelManager.on('tunnelDisconnected', connection => {
      /* istanbul ignore next */
      cov_f1k81r6s8().f[21]++;
      cov_f1k81r6s8().s[178]++;
      logger_1.logger.warn(`🔌 Tunnel disconnected: ${connection.id}`);
      // Mark tunnel as unhealthy
      const health =
      /* istanbul ignore next */
      (cov_f1k81r6s8().s[179]++, this.activeTunnels.get(connection.id));
      /* istanbul ignore next */
      cov_f1k81r6s8().s[180]++;
      if (health) {
        /* istanbul ignore next */
        cov_f1k81r6s8().b[38][0]++;
        cov_f1k81r6s8().s[181]++;
        health.isHealthy = false;
      } else
      /* istanbul ignore next */
      {
        cov_f1k81r6s8().b[38][1]++;
      }
      // Switch to another tunnel if this was the active one
      cov_f1k81r6s8().s[182]++;
      if (this.currentTunnelId === connection.id) {
        /* istanbul ignore next */
        cov_f1k81r6s8().b[39][0]++;
        cov_f1k81r6s8().s[183]++;
        this.selectActiveTunnel().catch(error => {
          /* istanbul ignore next */
          cov_f1k81r6s8().f[22]++;
          cov_f1k81r6s8().s[184]++;
          logger_1.logger.error('❌ Failed to switch tunnel after disconnection:', error);
        });
      } else
      /* istanbul ignore next */
      {
        cov_f1k81r6s8().b[39][1]++;
      }
    });
    /* istanbul ignore next */
    cov_f1k81r6s8().s[185]++;
    this.tunnelManager.on('tunnelError', (connection, error) => {
      /* istanbul ignore next */
      cov_f1k81r6s8().f[23]++;
      cov_f1k81r6s8().s[186]++;
      logger_1.logger.error(`❌ Tunnel error: ${connection.id} - ${error.message}`);
      // Mark tunnel as unhealthy
      const health =
      /* istanbul ignore next */
      (cov_f1k81r6s8().s[187]++, this.activeTunnels.get(connection.id));
      /* istanbul ignore next */
      cov_f1k81r6s8().s[188]++;
      if (health) {
        /* istanbul ignore next */
        cov_f1k81r6s8().b[40][0]++;
        cov_f1k81r6s8().s[189]++;
        health.isHealthy = false;
        /* istanbul ignore next */
        cov_f1k81r6s8().s[190]++;
        health.consecutiveFailures++;
      } else
      /* istanbul ignore next */
      {
        cov_f1k81r6s8().b[40][1]++;
      }
    });
  }
  /**
   * Start health monitoring for tunnels
   */
  startHealthMonitoring() {
    /* istanbul ignore next */
    cov_f1k81r6s8().f[24]++;
    cov_f1k81r6s8().s[191]++;
    this.healthCheckTimer = setInterval(async () => {
      /* istanbul ignore next */
      cov_f1k81r6s8().f[25]++;
      cov_f1k81r6s8().s[192]++;
      await this.performHealthChecks();
    }, this.healthCheckInterval);
    /* istanbul ignore next */
    cov_f1k81r6s8().s[193]++;
    logger_1.logger.info('🏥 Started tunnel health monitoring');
  }
  /**
   * Perform health checks on all tunnels
   */
  async performHealthChecks() {
    /* istanbul ignore next */
    cov_f1k81r6s8().f[26]++;
    const healthCheckPromises =
    /* istanbul ignore next */
    (cov_f1k81r6s8().s[194]++, Array.from(this.activeTunnels.keys()).map(tunnelId => {
      /* istanbul ignore next */
      cov_f1k81r6s8().f[27]++;
      cov_f1k81r6s8().s[195]++;
      return this.performTunnelHealthCheck(tunnelId);
    }));
    /* istanbul ignore next */
    cov_f1k81r6s8().s[196]++;
    await Promise.allSettled(healthCheckPromises);
  }
  /**
   * Perform health check on specific tunnel
   *
   * @param tunnelId - Tunnel identifier
   */
  async performTunnelHealthCheck(tunnelId) {
    /* istanbul ignore next */
    cov_f1k81r6s8().f[28]++;
    cov_f1k81r6s8().s[197]++;
    try {
      const tunnel =
      /* istanbul ignore next */
      (cov_f1k81r6s8().s[198]++, this.tunnelManager.getConnection(tunnelId));
      /* istanbul ignore next */
      cov_f1k81r6s8().s[199]++;
      if (
      /* istanbul ignore next */
      (cov_f1k81r6s8().b[42][0]++, !tunnel) ||
      /* istanbul ignore next */
      (cov_f1k81r6s8().b[42][1]++, tunnel.state !== ssh_tunnel_manager_1.TunnelState.CONNECTED)) {
        /* istanbul ignore next */
        cov_f1k81r6s8().b[41][0]++;
        cov_f1k81r6s8().s[200]++;
        this.updateTunnelHealth(tunnelId, false, 0);
        /* istanbul ignore next */
        cov_f1k81r6s8().s[201]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_f1k81r6s8().b[41][1]++;
      }
      // Perform simple connectivity test
      const startTime =
      /* istanbul ignore next */
      (cov_f1k81r6s8().s[202]++, Date.now());
      // Import axios dynamically
      const axios =
      /* istanbul ignore next */
      (cov_f1k81r6s8().s[203]++, (await import('axios')).default);
      // Test connection through tunnel
      /* istanbul ignore next */
      cov_f1k81r6s8().s[204]++;
      await axios.get('https://api.gateio.ws/api/v4/spot/time', {
        proxy: {
          host: 'localhost',
          port: tunnel.config.localPort,
          protocol: 'http'
        },
        timeout: 5000
      });
      const responseTime =
      /* istanbul ignore next */
      (cov_f1k81r6s8().s[205]++, Date.now() - startTime);
      /* istanbul ignore next */
      cov_f1k81r6s8().s[206]++;
      this.updateTunnelHealth(tunnelId, true, responseTime);
    } catch (error) {
      /* istanbul ignore next */
      cov_f1k81r6s8().s[207]++;
      logger_1.logger.debug(`🏥 Health check failed for tunnel ${tunnelId}:`, error.message);
      /* istanbul ignore next */
      cov_f1k81r6s8().s[208]++;
      this.updateTunnelHealth(tunnelId, false, 0);
    }
  }
  /**
   * Start queue processing
   */
  startQueueProcessing() {
    /* istanbul ignore next */
    cov_f1k81r6s8().f[29]++;
    cov_f1k81r6s8().s[209]++;
    // Process queue every 100ms
    setInterval(() => {
      /* istanbul ignore next */
      cov_f1k81r6s8().f[30]++;
      cov_f1k81r6s8().s[210]++;
      if (
      /* istanbul ignore next */
      (cov_f1k81r6s8().b[44][0]++, !this.isProcessingQueue) &&
      /* istanbul ignore next */
      (cov_f1k81r6s8().b[44][1]++, this.requestQueue.length > 0)) {
        /* istanbul ignore next */
        cov_f1k81r6s8().b[43][0]++;
        cov_f1k81r6s8().s[211]++;
        this.processQueue();
      } else
      /* istanbul ignore next */
      {
        cov_f1k81r6s8().b[43][1]++;
      }
    }, 100);
  }
  /**
   * Determine if request should be retried
   *
   * @param error - Request error
   * @returns boolean - Should retry
   */
  shouldRetryRequest(error) {
    /* istanbul ignore next */
    cov_f1k81r6s8().f[31]++;
    cov_f1k81r6s8().s[212]++;
    // Retry on network errors or server errors (5xx)
    if (!error.response) {
      /* istanbul ignore next */
      cov_f1k81r6s8().b[45][0]++;
      cov_f1k81r6s8().s[213]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_f1k81r6s8().b[45][1]++;
    } // Network error
    const status =
    /* istanbul ignore next */
    (cov_f1k81r6s8().s[214]++, error.response?.status);
    /* istanbul ignore next */
    cov_f1k81r6s8().s[215]++;
    return /* istanbul ignore next */(cov_f1k81r6s8().b[46][0]++, status >= 500) ||
    /* istanbul ignore next */
    (cov_f1k81r6s8().b[46][1]++, status === 429); // Server error or rate limit
  }
  /**
   * Calculate retry delay with exponential backoff
   *
   * @param retryCount - Current retry count
   * @returns number - Delay in milliseconds
   */
  calculateRetryDelay(retryCount) {
    /* istanbul ignore next */
    cov_f1k81r6s8().f[32]++;
    const baseDelay =
    /* istanbul ignore next */
    (cov_f1k81r6s8().s[216]++, 1000); // 1 second
    const maxDelay =
    /* istanbul ignore next */
    (cov_f1k81r6s8().s[217]++, 30000); // 30 seconds
    const delay =
    /* istanbul ignore next */
    (cov_f1k81r6s8().s[218]++, Math.min(baseDelay * Math.pow(2, retryCount - 1), maxDelay));
    // Add jitter to prevent thundering herd
    const jitter =
    /* istanbul ignore next */
    (cov_f1k81r6s8().s[219]++, Math.random() * 0.1 * delay);
    /* istanbul ignore next */
    cov_f1k81r6s8().s[220]++;
    return delay + jitter;
  }
  /**
   * Handle request errors
   *
   * @param error - Request error
   * @param config - Request configuration
   */
  handleRequestError(error, config) {
    /* istanbul ignore next */
    cov_f1k81r6s8().f[33]++;
    cov_f1k81r6s8().s[221]++;
    this.auditService.logSecurityEvent({
      type: 'TUNNEL_REQUEST_ERROR',
      severity: 'ERROR',
      details: {
        error: error.message,
        url: config.url,
        method: config.method,
        tunnelId: this.currentTunnelId
      },
      timestamp: new Date()
    });
  }
  /**
   * Generate unique request ID
   */
  generateRequestId() {
    /* istanbul ignore next */
    cov_f1k81r6s8().f[34]++;
    cov_f1k81r6s8().s[222]++;
    return `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }
  /**
   * Validate URL format
   *
   * @param url - URL to validate
   * @returns boolean - Is valid URL
   */
  isValidURL(url) {
    /* istanbul ignore next */
    cov_f1k81r6s8().f[35]++;
    cov_f1k81r6s8().s[223]++;
    try {
      /* istanbul ignore next */
      cov_f1k81r6s8().s[224]++;
      new URL(url, 'https://api.gateio.ws');
      /* istanbul ignore next */
      cov_f1k81r6s8().s[225]++;
      return true;
    } catch {
      /* istanbul ignore next */
      cov_f1k81r6s8().s[226]++;
      return false;
    }
  }
  /**
   * Sanitize headers for logging
   *
   * @param headers - Request headers
   * @returns Sanitized headers
   */
  sanitizeHeaders(headers) {
    /* istanbul ignore next */
    cov_f1k81r6s8().f[36]++;
    const sanitized =
    /* istanbul ignore next */
    (cov_f1k81r6s8().s[227]++, {
      ...headers
    });
    // Remove sensitive headers
    /* istanbul ignore next */
    cov_f1k81r6s8().s[228]++;
    delete sanitized.KEY;
    /* istanbul ignore next */
    cov_f1k81r6s8().s[229]++;
    delete sanitized.SIGN;
    /* istanbul ignore next */
    cov_f1k81r6s8().s[230]++;
    delete sanitized.Passphrase;
    /* istanbul ignore next */
    cov_f1k81r6s8().s[231]++;
    delete sanitized.Authorization;
    /* istanbul ignore next */
    cov_f1k81r6s8().s[232]++;
    return sanitized;
  }
  /**
   * Get routing statistics
   */
  getRoutingStats() {
    /* istanbul ignore next */
    cov_f1k81r6s8().f[37]++;
    cov_f1k81r6s8().s[233]++;
    return {
      ...this.routingStats
    };
  }
  /**
   * Get tunnel health status
   */
  getTunnelHealthStatus() {
    /* istanbul ignore next */
    cov_f1k81r6s8().f[38]++;
    cov_f1k81r6s8().s[234]++;
    return Array.from(this.activeTunnels.values());
  }
  /**
   * Get current active tunnel ID
   */
  getCurrentTunnelId() {
    /* istanbul ignore next */
    cov_f1k81r6s8().f[39]++;
    cov_f1k81r6s8().s[235]++;
    return this.currentTunnelId;
  }
  /**
   * Graceful shutdown
   */
  async shutdown() {
    /* istanbul ignore next */
    cov_f1k81r6s8().f[40]++;
    cov_f1k81r6s8().s[236]++;
    logger_1.logger.info('🛑 Shutting down tunnel router...');
    // Stop health monitoring
    /* istanbul ignore next */
    cov_f1k81r6s8().s[237]++;
    if (this.healthCheckTimer) {
      /* istanbul ignore next */
      cov_f1k81r6s8().b[47][0]++;
      cov_f1k81r6s8().s[238]++;
      clearInterval(this.healthCheckTimer);
      /* istanbul ignore next */
      cov_f1k81r6s8().s[239]++;
      this.healthCheckTimer = null;
    } else
    /* istanbul ignore next */
    {
      cov_f1k81r6s8().b[47][1]++;
    }
    // Clear request queue
    cov_f1k81r6s8().s[240]++;
    this.requestQueue.forEach(request => {
      /* istanbul ignore next */
      cov_f1k81r6s8().f[41]++;
      cov_f1k81r6s8().s[241]++;
      request.reject(new Error('Tunnel router is shutting down'));
    });
    /* istanbul ignore next */
    cov_f1k81r6s8().s[242]++;
    this.requestQueue = [];
    // Log final statistics
    /* istanbul ignore next */
    cov_f1k81r6s8().s[243]++;
    await this.auditService.logSecurityEvent({
      type: 'TUNNEL_ROUTER_SHUTDOWN',
      severity: 'INFO',
      details: {
        routingStats: this.routingStats
      },
      timestamp: new Date()
    });
    /* istanbul ignore next */
    cov_f1k81r6s8().s[244]++;
    logger_1.logger.info('✅ Tunnel router shutdown completed');
  }
}
/* istanbul ignore next */
cov_f1k81r6s8().s[245]++;
exports.TunnelRouter = TunnelRouter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,