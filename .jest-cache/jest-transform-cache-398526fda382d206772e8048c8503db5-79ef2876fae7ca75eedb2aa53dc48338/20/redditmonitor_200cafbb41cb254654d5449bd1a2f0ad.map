{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\ai\\sentiment\\reddit-monitor.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\ai\\sentiment\\reddit-monitor.ts"],"sourcesContent":["/**\r\n * Reddit Sentiment Monitor\r\n * Implements Reddit API integration for crypto subreddits sentiment analysis\r\n */\r\n\r\nimport Snoowrap from 'snoowrap';\r\nimport Sentiment from 'sentiment';\r\nimport { \r\n  SentimentScore, \r\n  RedditPost, \r\n  RedditConfig, \r\n  SentimentAlert \r\n} from './types';\r\nimport { logger } from '../../core/logging/logger';\r\n\r\nexport class RedditSentimentMonitor {\r\n  private client: Snoowrap;\r\n  private sentiment: Sentiment;\r\n  private logger = logger;\r\n  private isMonitoring: boolean = false;\r\n  private monitoringInterval?: NodeJS.Timeout;\r\n  \r\n  // Crypto-related subreddits to monitor\r\n  private readonly cryptoSubreddits = [\r\n    'cryptocurrency',\r\n    'Bitcoin',\r\n    'ethereum',\r\n    'CryptoCurrency',\r\n    'btc',\r\n    'ethtrader',\r\n    'CryptoMarkets',\r\n    'altcoin',\r\n    'DeFi',\r\n    'NFT',\r\n    'CryptoMoonShots',\r\n    'SatoshiStreetBets',\r\n    'CryptoCurrencyTrading',\r\n    'BitcoinMarkets',\r\n    'ethfinance'\r\n  ];\r\n\r\n  constructor(config: RedditConfig) {\r\n    this.client = new Snoowrap({\r\n      userAgent: config.userAgent,\r\n      clientId: config.clientId,\r\n      clientSecret: config.clientSecret,\r\n      username: config.username,\r\n      password: config.password\r\n    });\r\n    \r\n    this.sentiment = new Sentiment();\r\n    // Logger is initialized as class property\r\n  }\r\n\r\n  /**\r\n   * Start monitoring Reddit sentiment\r\n   */\r\n  async startMonitoring(intervalMinutes: number = 10): Promise<void> {\r\n    if (this.isMonitoring) {\r\n      this.logger.warn('Reddit monitoring is already running');\r\n      return;\r\n    }\r\n\r\n    this.logger.info('Starting Reddit sentiment monitoring');\r\n    this.isMonitoring = true;\r\n\r\n    // Initial analysis\r\n    await this.performSentimentAnalysis();\r\n\r\n    // Set up periodic monitoring\r\n    this.monitoringInterval = setInterval(async () => {\r\n      try {\r\n        await this.performSentimentAnalysis();\r\n      } catch (error) {\r\n        this.logger.error('Error during Reddit sentiment analysis:', error);\r\n      }\r\n    }, intervalMinutes * 60 * 1000);\r\n  }\r\n\r\n  /**\r\n   * Stop monitoring Reddit sentiment\r\n   */\r\n  stopMonitoring(): void {\r\n    if (!this.isMonitoring) {\r\n      this.logger.warn('Reddit monitoring is not running');\r\n      return;\r\n    }\r\n\r\n    this.logger.info('Stopping Reddit sentiment monitoring');\r\n    this.isMonitoring = false;\r\n\r\n    if (this.monitoringInterval) {\r\n      clearInterval(this.monitoringInterval);\r\n      this.monitoringInterval = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Perform comprehensive Reddit sentiment analysis\r\n   */\r\n  private async performSentimentAnalysis(): Promise<SentimentScore> {\r\n    try {\r\n      this.logger.info('Performing Reddit sentiment analysis');\r\n\r\n      // Gather posts and comments from crypto subreddits\r\n      const [hotPosts, newPosts, topPosts] = await Promise.all([\r\n        this.gatherHotPosts(),\r\n        this.gatherNewPosts(),\r\n        this.gatherTopPosts()\r\n      ]);\r\n\r\n      const allPosts = [...hotPosts, ...newPosts, ...topPosts];\r\n      \r\n      // Remove duplicates\r\n      const uniquePosts = this.removeDuplicatePosts(allPosts);\r\n      \r\n      if (uniquePosts.length === 0) {\r\n        this.logger.warn('No Reddit posts found for sentiment analysis');\r\n        return this.createEmptySentimentScore();\r\n      }\r\n\r\n      // Analyze sentiment\r\n      const sentimentScore = await this.analyzePostsSentiment(uniquePosts);\r\n      \r\n      // Detect trends and alerts\r\n      await this.detectSentimentTrends(sentimentScore);\r\n      \r\n      this.logger.info(`Reddit sentiment analysis complete: ${sentimentScore.score.toFixed(2)}`);\r\n      return sentimentScore;\r\n\r\n    } catch (error) {\r\n      this.logger.error('Error in Reddit sentiment analysis:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gather hot posts from crypto subreddits\r\n   */\r\n  private async gatherHotPosts(): Promise<RedditPost[]> {\r\n    const posts: RedditPost[] = [];\r\n    \r\n    try {\r\n      for (const subreddit of this.cryptoSubreddits) {\r\n        try {\r\n          const hotPosts = await this.client.getSubreddit(subreddit).getHot({ limit: 25 });\r\n          \r\n          for (const post of hotPosts) {\r\n            posts.push({\r\n              id: post.id,\r\n              title: post.title,\r\n              content: post.selftext || '',\r\n              author: post.author.name,\r\n              subreddit: subreddit,\r\n              upvotes: post.ups,\r\n              downvotes: post.downs,\r\n              comments: post.num_comments,\r\n              timestamp: new Date(post.created_utc * 1000)\r\n            });\r\n          }\r\n        } catch (error) {\r\n          this.logger.warn(`Error getting hot posts from r/${subreddit}:`, error);\r\n        }\r\n      }\r\n\r\n      this.logger.info(`Gathered ${posts.length} hot posts`);\r\n      return posts;\r\n\r\n    } catch (error) {\r\n      this.logger.error('Error gathering hot posts:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gather new posts from crypto subreddits\r\n   */\r\n  private async gatherNewPosts(): Promise<RedditPost[]> {\r\n    const posts: RedditPost[] = [];\r\n    \r\n    try {\r\n      for (const subreddit of this.cryptoSubreddits) {\r\n        try {\r\n          const newPosts = await this.client.getSubreddit(subreddit).getNew({ limit: 15 });\r\n          \r\n          for (const post of newPosts) {\r\n            posts.push({\r\n              id: post.id,\r\n              title: post.title,\r\n              content: post.selftext || '',\r\n              author: post.author.name,\r\n              subreddit: subreddit,\r\n              upvotes: post.ups,\r\n              downvotes: post.downs,\r\n              comments: post.num_comments,\r\n              timestamp: new Date(post.created_utc * 1000)\r\n            });\r\n          }\r\n        } catch (error) {\r\n          this.logger.warn(`Error getting new posts from r/${subreddit}:`, error);\r\n        }\r\n      }\r\n\r\n      this.logger.info(`Gathered ${posts.length} new posts`);\r\n      return posts;\r\n\r\n    } catch (error) {\r\n      this.logger.error('Error gathering new posts:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gather top posts from crypto subreddits\r\n   */\r\n  private async gatherTopPosts(): Promise<RedditPost[]> {\r\n    const posts: RedditPost[] = [];\r\n    \r\n    try {\r\n      for (const subreddit of this.cryptoSubreddits) {\r\n        try {\r\n          const topPosts = await this.client.getSubreddit(subreddit).getTop({ \r\n            time: 'day', \r\n            limit: 10 \r\n          });\r\n          \r\n          for (const post of topPosts) {\r\n            posts.push({\r\n              id: post.id,\r\n              title: post.title,\r\n              content: post.selftext || '',\r\n              author: post.author.name,\r\n              subreddit: subreddit,\r\n              upvotes: post.ups,\r\n              downvotes: post.downs,\r\n              comments: post.num_comments,\r\n              timestamp: new Date(post.created_utc * 1000)\r\n            });\r\n          }\r\n        } catch (error) {\r\n          this.logger.warn(`Error getting top posts from r/${subreddit}:`, error);\r\n        }\r\n      }\r\n\r\n      this.logger.info(`Gathered ${posts.length} top posts`);\r\n      return posts;\r\n\r\n    } catch (error) {\r\n      this.logger.error('Error gathering top posts:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove duplicate posts based on ID\r\n   */\r\n  private removeDuplicatePosts(posts: RedditPost[]): RedditPost[] {\r\n    const seen = new Set<string>();\r\n    return posts.filter(post => {\r\n      if (seen.has(post.id)) {\r\n        return false;\r\n      }\r\n      seen.add(post.id);\r\n      return true;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Analyze sentiment of collected posts and their comments\r\n   */\r\n  private async analyzePostsSentiment(posts: RedditPost[]): Promise<SentimentScore> {\r\n    let totalScore = 0;\r\n    let totalWeight = 0;\r\n    const keyTopics: string[] = [];\r\n    const topicCounts: Record<string, number> = {};\r\n    const subredditScores: Record<string, number[]> = {};\r\n\r\n    for (const post of posts) {\r\n      try {\r\n        // Analyze post title and content\r\n        const postText = `${post.title} ${post.content}`;\r\n        const postSentiment = this.sentiment.analyze(postText);\r\n        let postScore = postSentiment.score;\r\n        \r\n        // Normalize to -100 to 100 scale\r\n        postScore = Math.max(-100, Math.min(100, postScore * 5));\r\n        \r\n        // Calculate weight based on engagement\r\n        const upvoteRatio = post.upvotes / (post.upvotes + post.downvotes + 1);\r\n        const engagementWeight = Math.log10(post.upvotes + post.comments + 1);\r\n        const qualityWeight = upvoteRatio * 2; // Higher weight for well-received posts\r\n        const weight = engagementWeight + qualityWeight;\r\n        \r\n        totalScore += postScore * weight;\r\n        totalWeight += weight;\r\n        \r\n        // Track subreddit performance\r\n        if (!subredditScores[post.subreddit]) {\r\n          subredditScores[post.subreddit] = [];\r\n        }\r\n        subredditScores[post.subreddit].push(postScore);\r\n        \r\n        // Extract topics from title\r\n        const topics = this.extractTopicsFromText(post.title);\r\n        topics.forEach(topic => {\r\n          topicCounts[topic] = (topicCounts[topic] || 0) + 1;\r\n        });\r\n\r\n        // Analyze top comments for additional sentiment\r\n        await this.analyzePostComments(post.id, post.subreddit);\r\n\r\n      } catch (error) {\r\n        this.logger.warn(`Error analyzing post ${post.id}:`, error);\r\n      }\r\n    }\r\n\r\n    // Get top topics\r\n    const sortedTopics = Object.entries(topicCounts)\r\n      .sort(([,a], [,b]) => b - a)\r\n      .slice(0, 10)\r\n      .map(([topic]) => topic);\r\n\r\n    const finalScore = totalWeight > 0 ? totalScore / totalWeight : 0;\r\n    const confidence = Math.min(100, Math.log10(posts.length + 1) * 25);\r\n\r\n    return {\r\n      source: 'reddit',\r\n      score: Math.round(finalScore * 100) / 100,\r\n      confidence: Math.round(confidence),\r\n      volume: posts.length,\r\n      timestamp: new Date(),\r\n      keyTopics: sortedTopics,\r\n      rawData: {\r\n        totalPosts: posts.length,\r\n        totalWeight,\r\n        subredditScores,\r\n        topicCounts\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Analyze comments for additional sentiment data\r\n   */\r\n  private async analyzePostComments(postId: string, subreddit: string): Promise<void> {\r\n    try {\r\n      // Get top comments for the post\r\n      const submission = await this.client.getSubmission(postId);\r\n      await submission.expandReplies({ limit: 5, depth: 1 });\r\n      \r\n      const comments = submission.comments.slice(0, 10); // Analyze top 10 comments\r\n      \r\n      for (const comment of comments) {\r\n        if (comment.body && comment.body !== '[deleted]' && comment.body !== '[removed]') {\r\n          const commentSentiment = this.sentiment.analyze(comment.body);\r\n          // Comment sentiment could be weighted and added to overall analysis\r\n          // For now, we're just collecting the data\r\n        }\r\n      }\r\n    } catch (error) {\r\n      this.logger.warn(`Error analyzing comments for post ${postId}:`, error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Extract topics from text using simple keyword matching\r\n   */\r\n  private extractTopicsFromText(text: string): string[] {\r\n    const cryptoKeywords = [\r\n      'bitcoin', 'btc', 'ethereum', 'eth', 'crypto', 'cryptocurrency',\r\n      'blockchain', 'defi', 'nft', 'altcoin', 'hodl', 'trading',\r\n      'bull', 'bear', 'moon', 'diamond', 'hands', 'satoshi',\r\n      'pump', 'dump', 'dip', 'ath', 'fomo', 'fud'\r\n    ];\r\n    \r\n    const lowerText = text.toLowerCase();\r\n    return cryptoKeywords.filter(keyword => lowerText.includes(keyword));\r\n  }\r\n\r\n  /**\r\n   * Detect sentiment trends and generate alerts\r\n   */\r\n  private async detectSentimentTrends(currentScore: SentimentScore): Promise<void> {\r\n    const alerts: SentimentAlert[] = [];\r\n\r\n    // Extreme sentiment alerts\r\n    if (currentScore.score > 60) {\r\n      alerts.push({\r\n        id: `reddit_extreme_positive_${Date.now()}`,\r\n        type: 'EXTREME_POSITIVE',\r\n        severity: 'HIGH',\r\n        message: `Extremely positive Reddit sentiment detected: ${currentScore.score}`,\r\n        timestamp: new Date(),\r\n        source: 'reddit',\r\n        data: currentScore\r\n      });\r\n    } else if (currentScore.score < -60) {\r\n      alerts.push({\r\n        id: `reddit_extreme_negative_${Date.now()}`,\r\n        type: 'EXTREME_NEGATIVE',\r\n        severity: 'HIGH',\r\n        message: `Extremely negative Reddit sentiment detected: ${currentScore.score}`,\r\n        timestamp: new Date(),\r\n        source: 'reddit',\r\n        data: currentScore\r\n      });\r\n    }\r\n\r\n    // Volume spike alerts\r\n    if (currentScore.volume > 200) {\r\n      alerts.push({\r\n        id: `reddit_volume_spike_${Date.now()}`,\r\n        type: 'VOLUME_SPIKE',\r\n        severity: 'MEDIUM',\r\n        message: `High Reddit activity detected: ${currentScore.volume} posts`,\r\n        timestamp: new Date(),\r\n        source: 'reddit',\r\n        data: currentScore\r\n      });\r\n    }\r\n\r\n    // Log alerts\r\n    for (const alert of alerts) {\r\n      this.logger.warn(`Reddit Sentiment Alert: ${alert.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create empty sentiment score for error cases\r\n   */\r\n  private createEmptySentimentScore(): SentimentScore {\r\n    return {\r\n      source: 'reddit',\r\n      score: 0,\r\n      confidence: 0,\r\n      volume: 0,\r\n      timestamp: new Date(),\r\n      keyTopics: []\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get current sentiment score\r\n   */\r\n  async getCurrentSentiment(): Promise<SentimentScore> {\r\n    return await this.performSentimentAnalysis();\r\n  }\r\n\r\n  /**\r\n   * Get monitored subreddits\r\n   */\r\n  getMonitoredSubreddits(): string[] {\r\n    return [...this.cryptoSubreddits];\r\n  }\r\n\r\n  /**\r\n   * Add subreddit to monitoring list\r\n   */\r\n  addSubreddit(subreddit: string): void {\r\n    if (!this.cryptoSubreddits.includes(subreddit)) {\r\n      this.cryptoSubreddits.push(subreddit);\r\n      this.logger.info(`Added subreddit to monitoring: r/${subreddit}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove subreddit from monitoring list\r\n   */\r\n  removeSubreddit(subreddit: string): void {\r\n    const index = this.cryptoSubreddits.indexOf(subreddit);\r\n    if (index !== -1) {\r\n      this.cryptoSubreddits.splice(index, 1);\r\n      this.logger.info(`Removed subreddit from monitoring: r/${subreddit}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get sentiment breakdown by subreddit\r\n   */\r\n  async getSubredditSentimentBreakdown(): Promise<Record<string, SentimentScore>> {\r\n    const breakdown: Record<string, SentimentScore> = {};\r\n    \r\n    for (const subreddit of this.cryptoSubreddits.slice(0, 5)) { // Limit to top 5 for performance\r\n      try {\r\n        const posts = await this.client.getSubreddit(subreddit).getHot({ limit: 20 });\r\n        const redditPosts: RedditPost[] = posts.map(post => ({\r\n          id: post.id,\r\n          title: post.title,\r\n          content: post.selftext || '',\r\n          author: post.author.name,\r\n          subreddit: subreddit,\r\n          upvotes: post.ups,\r\n          downvotes: post.downs,\r\n          comments: post.num_comments,\r\n          timestamp: new Date(post.created_utc * 1000)\r\n        }));\r\n        \r\n        breakdown[subreddit] = await this.analyzePostsSentiment(redditPosts);\r\n      } catch (error) {\r\n        this.logger.warn(`Error getting sentiment for r/${subreddit}:`, error);\r\n      }\r\n    }\r\n    \r\n    return breakdown;\r\n  }\r\n}\r\n"],"version":3}