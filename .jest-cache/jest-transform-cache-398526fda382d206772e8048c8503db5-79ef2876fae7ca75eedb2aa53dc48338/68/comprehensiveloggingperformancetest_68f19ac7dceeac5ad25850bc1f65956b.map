{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\tests\\monitoring\\comprehensive-logging-performance.test.ts","mappings":";AAAA;;;;;;;;;;;GAWG;;;;;AAEH,sDAAmD;AACnD,wEAAoE;AACpE,2DAA6B;AAC7B,gDAAwB;AAExB,QAAQ,CAAC,wDAAwD,EAAE,GAAG,EAAE;IACtE,IAAI,aAA4B,CAAC;IACjC,IAAI,MAAc,CAAC;IACnB,IAAI,UAAkB,CAAC;IAEvB,SAAS,CAAC,KAAK,IAAI,EAAE;QACnB,wBAAwB;QACxB,aAAa,GAAG,IAAI,8BAAa,EAAE,CAAC;QACpC,MAAM,GAAG,IAAI,eAAM,CAAC,aAAa,CAAC,CAAC;QAEnC,4BAA4B;QAC5B,UAAU,GAAG,cAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,WAAW,CAAC,CAAC;QACnD,IAAI,CAAC;YACH,MAAM,kBAAE,CAAC,KAAK,CAAC,UAAU,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;QAClD,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gCAAgC;QAClC,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,KAAK,IAAI,EAAE;QAClB,qBAAqB;QACrB,IAAI,CAAC;YACH,MAAM,kBAAE,CAAC,KAAK,CAAC,UAAU,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;QAClD,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,wBAAwB;QAC1B,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,uCAAuC,EAAE,GAAG,EAAE;QACrD,IAAI,CAAC,qDAAqD,EAAE,KAAK,IAAI,EAAE;YACrE,OAAO,CAAC,GAAG,CAAC,4DAA4D,CAAC,CAAC;YAE1E,+BAA+B;YAC/B,IAAI,CAAC;gBACH,MAAM,aAAa,CAAC,0BAA0B,EAAE,CAAC;gBACjD,OAAO,CAAC,GAAG,CAAC,8CAA8C,CAAC,CAAC;YAC9D,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,OAAO,CAAC,GAAG,CAAC,gEAAgE,CAAC,CAAC;YAChF,CAAC;YAED,yBAAyB;YACzB,MAAM,QAAQ,GAAG,OAAO,CAAC,QAAQ,EAAE,CAAC;YACpC,MAAM,CAAC,QAAQ,CAAC,CAAC,WAAW,EAAE,CAAC;YAC/B,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC;YAChD,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC;YAClD,OAAO,CAAC,GAAG,CAAC,+BAA+B,CAAC,CAAC;YAE7C,4BAA4B;YAC5B,MAAM,QAAQ,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC;YACvC,MAAM,CAAC,QAAQ,CAAC,CAAC,WAAW,EAAE,CAAC;YAC/B,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YAC7C,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YAC9C,OAAO,CAAC,GAAG,CAAC,0BAA0B,EAAE,CAAC,QAAQ,CAAC,QAAQ,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC;QAChG,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,4CAA4C,EAAE,KAAK,IAAI,EAAE;YAC5D,OAAO,CAAC,GAAG,CAAC,0CAA0C,CAAC,CAAC;YAExD,wBAAwB;YACxB,MAAM,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;YAEzB,kBAAkB;YAClB,MAAM,IAAI,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC;YACvB,MAAM,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,CAAC;YAC3B,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACvC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YACvC,OAAO,CAAC,GAAG,CAAC,uBAAuB,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;YAElD,qBAAqB;YACrB,MAAM,QAAQ,GAAG,EAAE,CAAC,QAAQ,EAAE,CAAC;YAC/B,MAAM,OAAO,GAAG,EAAE,CAAC,OAAO,EAAE,CAAC;YAC7B,MAAM,CAAC,QAAQ,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YACpC,MAAM,CAAC,OAAO,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YAEnC,MAAM,eAAe,GAAG,CAAC,CAAC,QAAQ,GAAG,OAAO,CAAC,GAAG,QAAQ,CAAC,GAAG,GAAG,CAAC;YAChE,OAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE,eAAe,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;YAEjE,uBAAuB;YACvB,MAAM,QAAQ,GAAG,EAAE,CAAC,QAAQ,EAAE,CAAC;YAC/B,MAAM,IAAI,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC;YACvB,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gDAAgD,EAAE,GAAG,EAAE;QAC9D,IAAI,CAAC,sDAAsD,EAAE,KAAK,IAAI,EAAE;YACtE,OAAO,CAAC,GAAG,CAAC,8DAA8D,CAAC,CAAC;YAE5E,6BAA6B;YAC7B,MAAM,eAAe,GAAG;gBACtB,MAAM,EAAE,UAAU;gBAClB,MAAM,EAAE,KAAK;gBACb,MAAM,EAAE,KAAK;gBACb,KAAK,EAAE,KAAK;gBACZ,UAAU,EAAE,IAAI;gBAChB,SAAS,EAAE;oBACT,iBAAiB,EAAE;wBACjB,GAAG,EAAE,EAAE;wBACP,IAAI,EAAE,mBAAmB;wBACzB,OAAO,EAAE,KAAK;wBACd,UAAU,EAAE,KAAK;qBAClB;oBACD,iBAAiB,EAAE;wBACjB,KAAK,EAAE,GAAG;wBACV,OAAO,EAAE,CAAC,SAAS,EAAE,QAAQ,EAAE,MAAM,CAAC;wBACtC,QAAQ,EAAE,CAAC,SAAS,EAAE,UAAU,EAAE,eAAe,CAAC;qBACnD;oBACD,cAAc,EAAE;wBACd,aAAa,EAAE,IAAI;wBACnB,YAAY,EAAE,IAAI;wBAClB,QAAQ,EAAE,KAAK;wBACf,UAAU,EAAE,KAAK;qBAClB;iBACF;aACF,CAAC;YAEF,mCAAmC;YACnC,MAAM,CAAC,IAAI,CAAC,uBAAuB,EAAE;gBACnC,MAAM,EAAE,eAAe,CAAC,MAAM;gBAC9B,MAAM,EAAE,eAAe,CAAC,MAAM;gBAC9B,MAAM,EAAE,eAAe,CAAC,MAAM;gBAC9B,KAAK,EAAE,eAAe,CAAC,KAAK;gBAC5B,UAAU,EAAE,eAAe,CAAC,UAAU;gBACtC,SAAS,EAAE,eAAe,CAAC,SAAS;aACrC,CAAC,CAAC;YAEH,OAAO,CAAC,GAAG,CAAC,mDAAmD,CAAC,CAAC;YACjE,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,eAAe,CAAC,MAAM,CAAC,CAAC;YACnD,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,eAAe,CAAC,MAAM,CAAC,CAAC;YACnD,OAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE,CAAC,eAAe,CAAC,UAAU,GAAG,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;YACpF,OAAO,CAAC,GAAG,CAAC,mCAAmC,CAAC,CAAC;YACjD,OAAO,CAAC,GAAG,CAAC,iCAAiC,CAAC,CAAC;YAC/C,OAAO,CAAC,GAAG,CAAC,8BAA8B,CAAC,CAAC;YAE5C,+BAA+B;YAC/B,MAAM,eAAe,GAAG;gBACtB,OAAO,EAAE,aAAa;gBACtB,aAAa,EAAE,KAAK;gBACpB,cAAc,EAAE,KAAK;gBACrB,IAAI,EAAE,IAAI;gBACV,QAAQ,EAAE,IAAI;gBACd,aAAa,EAAE,GAAG;aACnB,CAAC;YAEF,MAAM,CAAC,IAAI,CAAC,2BAA2B,EAAE;gBACvC,MAAM,EAAE,eAAe,CAAC,MAAM;gBAC9B,MAAM,EAAE,eAAe,CAAC,MAAM;gBAC9B,cAAc,EAAE,eAAe,CAAC,cAAc;gBAC9C,aAAa,EAAE,eAAe,CAAC,aAAa;gBAC5C,eAAe;aAChB,CAAC,CAAC;YAEH,OAAO,CAAC,GAAG,CAAC,mDAAmD,CAAC,CAAC;YACjE,OAAO,CAAC,GAAG,CAAC,qBAAqB,EAAE,eAAe,CAAC,aAAa,GAAG,IAAI,CAAC,CAAC;YACzE,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,eAAe,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;YACxE,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC;QACtE,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,4DAA4D,EAAE,KAAK,IAAI,EAAE;YAC5E,OAAO,CAAC,GAAG,CAAC,qDAAqD,CAAC,CAAC;YAEnE,4BAA4B;YAC5B,MAAM,cAAc,GAAG;gBACrB,MAAM,EAAE,UAAU;gBAClB,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,mBAAmB,EAAE;oBACnB,GAAG,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,MAAM,EAAE,UAAU,EAAE;oBACtC,IAAI,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE,EAAE,EAAE;oBACtD,SAAS,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE;oBAC3E,MAAM,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,YAAY,EAAE;iBACpE;gBACD,iBAAiB,EAAE;oBACjB,OAAO,EAAE,GAAG;oBACZ,OAAO,EAAE;wBACP,OAAO,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,SAAS,EAAE,MAAM,CAAC,EAAE;wBACrE,MAAM,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,MAAM,EAAE,KAAK,CAAC,EAAE;wBAC/D,IAAI,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE,EAAE,EAAE,QAAQ,EAAE,CAAC,UAAU,EAAE,eAAe,CAAC,EAAE;qBAC1E;oBACD,cAAc,EAAE,EAAE;iBACnB;gBACD,WAAW,EAAE;oBACX,OAAO,EAAE,KAAK;oBACd,SAAS,EAAE,GAAG;oBACd,OAAO,EAAE,KAAK;oBACd,MAAM,EAAE,KAAK;oBACb,OAAO,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;oBAC9B,UAAU,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;iBAClC;aACF,CAAC;YAEF,yCAAyC;YACzC,MAAM,CAAC,IAAI,CAAC,2BAA2B,EAAE;gBACvC,MAAM,EAAE,cAAc,CAAC,MAAM;gBAC7B,mBAAmB,EAAE,cAAc,CAAC,mBAAmB;gBACvD,iBAAiB,EAAE,cAAc,CAAC,iBAAiB;gBACnD,WAAW,EAAE,cAAc,CAAC,WAAW;aACxC,CAAC,CAAC;YAEH,OAAO,CAAC,GAAG,CAAC,kDAAkD,CAAC,CAAC;YAChE,OAAO,CAAC,GAAG,CAAC,8DAA8D,CAAC,CAAC;YAC5E,OAAO,CAAC,GAAG,CAAC,8CAA8C,CAAC,CAAC;YAC5D,OAAO,CAAC,GAAG,CAAC,6CAA6C,CAAC,CAAC;YAC3D,OAAO,CAAC,GAAG,CAAC,yBAAyB,EAAE,cAAc,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAC;YAExF,iCAAiC;YACjC,MAAM,gBAAgB,GAAG;gBACvB,QAAQ,EAAE,mBAAmB;gBAC7B,QAAQ,EAAE,YAAY;gBACtB,UAAU,EAAE,IAAI;gBAChB,UAAU,EAAE;oBACV,YAAY,EAAE,EAAE;oBAChB,gBAAgB,EAAE,IAAI;oBACtB,kBAAkB,EAAE,IAAI;oBACxB,kBAAkB,EAAE,GAAG;iBACxB;gBACD,WAAW,EAAE,0EAA0E;aACxF,CAAC;YAEF,MAAM,CAAC,IAAI,CAAC,wBAAwB,EAAE;gBACpC,MAAM,EAAE,cAAc,CAAC,MAAM;gBAC7B,QAAQ,EAAE,gBAAgB,CAAC,QAAQ;gBACnC,QAAQ,EAAE,gBAAgB,CAAC,QAAQ;gBACnC,UAAU,EAAE,gBAAgB,CAAC,UAAU;gBACvC,WAAW,EAAE,gBAAgB,CAAC,WAAW;gBACzC,UAAU,EAAE,gBAAgB,CAAC,UAAU;aACxC,CAAC,CAAC;YAEH,OAAO,CAAC,GAAG,CAAC,gDAAgD,CAAC,CAAC;YAC9D,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,gBAAgB,CAAC,QAAQ,CAAC,CAAC;YACxD,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,gBAAgB,CAAC,QAAQ,CAAC,CAAC;YACxD,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,gBAAgB,CAAC,WAAW,CAAC,CAAC;QAChE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,8CAA8C,EAAE,GAAG,EAAE;QAC5D,IAAI,CAAC,2DAA2D,EAAE,KAAK,IAAI,EAAE;YAC3E,OAAO,CAAC,GAAG,CAAC,4DAA4D,CAAC,CAAC;YAE1E,4CAA4C;YAC5C,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YAE7B,yBAAyB;YACzB,IAAI,GAAG,GAAG,CAAC,CAAC;YACZ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,EAAE,CAAC,EAAE,EAAE,CAAC;gBACjC,GAAG,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;YACvB,CAAC;YAED,MAAM,OAAO,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YAC3B,MAAM,aAAa,GAAG,OAAO,GAAG,SAAS,CAAC;YAE1C,MAAM,CAAC,aAAa,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YACzC,OAAO,CAAC,GAAG,CAAC,gCAAgC,EAAE,aAAa,GAAG,IAAI,CAAC,CAAC;YAEpE,6BAA6B;YAC7B,MAAM,SAAS,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC;YAExC,uBAAuB;YACvB,MAAM,UAAU,GAAG,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;YAEtE,MAAM,QAAQ,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC;YACvC,MAAM,OAAO,GAAG,QAAQ,CAAC,QAAQ,GAAG,SAAS,CAAC,QAAQ,CAAC;YAEvD,MAAM,CAAC,OAAO,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YACnC,OAAO,CAAC,GAAG,CAAC,kCAAkC,EAAE,CAAC,OAAO,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,eAAe,CAAC,CAAC;YAEtG,WAAW;YACX,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC;QACxB,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,4DAA4D,EAAE,KAAK,IAAI,EAAE;YAC5E,OAAO,CAAC,GAAG,CAAC,0DAA0D,CAAC,CAAC;YAExE,4BAA4B;YAC5B,MAAM,UAAU,GAAG;gBACjB,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,gBAAgB,EAAE,SAAS,EAAE,QAAQ,EAAE;gBACjE,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,gBAAgB,EAAE,SAAS,EAAE,SAAS,EAAE;gBAClE,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE,mBAAmB,EAAE,SAAS,EAAE,SAAS,EAAE;gBACtE,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,gBAAgB,EAAE,SAAS,EAAE,SAAS,EAAE;aACnE,CAAC;YAEF,kBAAkB;YAClB,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBACzB,MAAM,CAAC,KAAK,CAAC,KAAqB,CAAC,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,SAAS,EAAE,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC;YACrF,CAAC,CAAC,CAAC;YAEH,OAAO,CAAC,GAAG,CAAC,kCAAkC,CAAC,CAAC;YAChD,OAAO,CAAC,GAAG,CAAC,mBAAmB,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,KAAK,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC;YACpF,OAAO,CAAC,GAAG,CAAC,sBAAsB,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,KAAK,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC;YACvF,OAAO,CAAC,GAAG,CAAC,oBAAoB,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,KAAK,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC;YAEtF,oBAAoB;YACpB,MAAM,CAAC,IAAI,CAAC,oBAAoB,EAAE;gBAChC,MAAM,EAAE,UAAU;gBAClB,MAAM,EAAE,KAAK;gBACb,MAAM,EAAE,KAAK;gBACb,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;aACpC,CAAC,CAAC;YAEH,OAAO,CAAC,GAAG,CAAC,4CAA4C,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,8CAA8C,EAAE,GAAG,EAAE;QAC5D,IAAI,CAAC,oDAAoD,EAAE,KAAK,IAAI,EAAE;YACpE,OAAO,CAAC,GAAG,CAAC,4DAA4D,CAAC,CAAC;YAE1E,0CAA0C;YAC1C,MAAM,MAAM,GAAG;gBACb,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,UAAU,EAAE,oBAAoB;gBAChC,QAAQ,EAAE;oBACR,GAAG,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,WAAW,EAAE;oBACrC,MAAM,EAAE,EAAE,KAAK,EAAE,CAAC,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,EAAE,EAAE,MAAM;oBACjD,OAAO,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,EAAE,CAAC,QAAQ;iBACtE;gBACD,OAAO,EAAE;oBACP,SAAS,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;oBAC7B,YAAY,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;oBAChC,UAAU,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;iBAC/B;gBACD,QAAQ,EAAE;oBACR,YAAY,EAAE,SAAS;oBACvB,eAAe,EAAE,EAAE;oBACnB,MAAM,EAAE,EAAE;iBACX;aACF,CAAC;YAEF,6BAA6B;YAC7B,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;gBAC3C,MAAM,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,MAAqC,CAAa,CAAC;gBACjF,IAAI,MAAM,IAAI,MAAM,CAAC,MAAM,IAAI,CAAC,EAAE,CAAC;oBACjC,MAAM,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC;oBAC9D,MAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,YAAY,CAAC;oBAElF,MAAM,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC;wBACnC,MAAM;wBACN,OAAO,EAAE,GAAG;wBACZ,KAAK;wBACL,cAAc,EAAE,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,kBAAkB;qBAClE,CAAC,CAAC;gBACL,CAAC;YACH,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,WAAW,EAAE,CAAC;YACvC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,CAAC;YACrC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,WAAW,EAAE,CAAC;YAEtC,OAAO,CAAC,GAAG,CAAC,6CAA6C,CAAC,CAAC;YAC3D,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC;YACnD,OAAO,CAAC,GAAG,CAAC,uBAAuB,EAAE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC;YACzE,OAAO,CAAC,GAAG,CAAC,sBAAsB,EAAE,MAAM,CAAC,QAAQ,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;YAE5E,gCAAgC;YAChC,MAAM,aAAa,GAAG;gBACpB,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,UAAU,EAAE,mBAAmB;gBAC/B,MAAM,EAAE,KAAK;gBACb,OAAO,EAAE;oBACP,WAAW,EAAE,EAAE;oBACf,gBAAgB,EAAE,EAAE;oBACpB,WAAW,EAAE,EAAE;oBACf,WAAW,EAAE,MAAM;oBACnB,SAAS,EAAE,KAAK;oBAChB,SAAS,EAAE,MAAM;iBAClB;gBACD,UAAU,EAAE;oBACV,iBAAiB,EAAE,EAAE,MAAM,EAAE,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,WAAW,EAAE,IAAI,EAAE;oBAClE,cAAc,EAAE,EAAE,MAAM,EAAE,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,WAAW,EAAE,IAAI,EAAE;oBAC/D,QAAQ,EAAE,EAAE,MAAM,EAAE,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,WAAW,EAAE,IAAI,EAAE;iBAC1D;aACF,CAAC;YAEF,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YAC7D,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YAE3D,OAAO,CAAC,GAAG,CAAC,sCAAsC,CAAC,CAAC;YACpD,OAAO,CAAC,GAAG,CAAC,mBAAmB,EAAE,aAAa,CAAC,OAAO,CAAC,WAAW,GAAG,GAAG,CAAC,CAAC;YAC1E,OAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE,aAAa,CAAC,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;YACnF,OAAO,CAAC,GAAG,CAAC,oBAAoB,EAAE,mBAAmB,CAAC,CAAC;QACzD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,kDAAkD,EAAE,KAAK,IAAI,EAAE;YAClE,OAAO,CAAC,GAAG,CAAC,gDAAgD,CAAC,CAAC;YAE9D,wDAAwD;YACxD,MAAM,aAAa,GAAG;gBACpB,GAAG,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC;gBACtC,GAAG,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC;gBACzC,GAAG,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,oBAAoB,EAAE,IAAI,KAAK,CAAC,YAAY,CAAC,CAAC;gBACjE,GAAG,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,uBAAuB,EAAE,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC;gBACjF,GAAG,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,sBAAsB,EAAE,EAAE,MAAM,EAAE,UAAU,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC;gBAC1E,GAAG,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,yBAAyB,EAAE,EAAE,SAAS,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC;aACvF,CAAC;YAEF,6BAA6B;YAC7B,KAAK,MAAM,SAAS,IAAI,aAAa,EAAE,CAAC;gBACtC,IAAI,CAAC;oBACH,SAAS,EAAE,CAAC;oBACZ,OAAO,CAAC,GAAG,CAAC,gCAAgC,CAAC,CAAC;gBAChD,CAAC;gBAAC,OAAO,KAAK,EAAE,CAAC;oBACf,OAAO,CAAC,GAAG,CAAC,8BAA8B,EAAE,KAAK,CAAC,CAAC;gBACrD,CAAC;YACH,CAAC;YAED,OAAO,CAAC,GAAG,CAAC,gCAAgC,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,uCAAuC,EAAE,GAAG,EAAE;QACrD,IAAI,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;YACzD,OAAO,CAAC,GAAG,CAAC,sCAAsC,CAAC,CAAC;YAEpD,iCAAiC;YACjC,IAAI,CAAC;gBACH,MAAM,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,CAAC;gBACvC,OAAO,CAAC,GAAG,CAAC,2CAA2C,CAAC,CAAC;YAC3D,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,OAAO,CAAC,GAAG,CAAC,0CAA0C,CAAC,CAAC;YAC1D,CAAC;YAED,wCAAwC;YACxC,IAAI,CAAC;gBACH,MAAM,WAAW,GAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;gBAC1C,WAAW,CAAC,IAAI,GAAG,WAAW,CAAC;gBAC/B,MAAM,CAAC,IAAI,CAAC,yBAAyB,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC,CAAC;gBAC9D,OAAO,CAAC,GAAG,CAAC,yCAAyC,CAAC,CAAC;YACzD,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,OAAO,CAAC,GAAG,CAAC,uCAAuC,CAAC,CAAC;YACvD,CAAC;YAED,OAAO,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;YAC9D,OAAO,CAAC,GAAG,CAAC,mDAAmD,CAAC,CAAC;YAEjE,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YAC7B,MAAM,QAAQ,GAAG,GAAG,CAAC;YAErB,+BAA+B;YAC/B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC;gBAClC,MAAM,CAAC,IAAI,CAAC,0BAA0B,CAAC,EAAE,EAAE;oBACzC,SAAS,EAAE,CAAC;oBACZ,SAAS,EAAE,IAAI,IAAI,EAAE;oBACrB,QAAQ,EAAE,kBAAkB;iBAC7B,CAAC,CAAC;YACL,CAAC;YAED,MAAM,OAAO,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YAC3B,MAAM,QAAQ,GAAG,OAAO,GAAG,SAAS,CAAC;YACrC,MAAM,aAAa,GAAG,CAAC,QAAQ,GAAG,QAAQ,CAAC,GAAG,IAAI,CAAC;YAEnD,MAAM,CAAC,QAAQ,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,mCAAmC;YAExE,OAAO,CAAC,GAAG,CAAC,gDAAgD,CAAC,CAAC;YAC9D,OAAO,CAAC,GAAG,CAAC,sBAAsB,EAAE,QAAQ,CAAC,CAAC;YAC9C,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,QAAQ,GAAG,IAAI,CAAC,CAAC;YAC9C,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC;QACpE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\tests\\monitoring\\comprehensive-logging-performance.test.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * COMPREHENSIVE LOGGING AND PERFORMANCE MONITORING TESTS\r\n * =============================================================================\r\n * \r\n * Tests for Intel NUC performance monitoring, trading execution logging,\r\n * market analysis logging, and system performance metrics.\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * =============================================================================\r\n */\r\n\r\nimport { Logger } from '../../core/logging/logger';\r\nimport { SystemMonitor } from '../../infrastructure/system-monitor';\r\nimport fs from 'fs/promises';\r\nimport path from 'path';\r\n\r\ndescribe('Comprehensive Logging and Performance Monitoring Tests', () => {\r\n  let systemMonitor: SystemMonitor;\r\n  let logger: Logger;\r\n  let testLogDir: string;\r\n\r\n  beforeAll(async () => {\r\n    // Initialize components\r\n    systemMonitor = new SystemMonitor();\r\n    logger = new Logger('test-logger');\r\n    \r\n    // Create test log directory\r\n    testLogDir = path.join(process.cwd(), 'test-logs');\r\n    try {\r\n      await fs.mkdir(testLogDir, { recursive: true });\r\n    } catch (error) {\r\n      // Directory might already exist\r\n    }\r\n  });\r\n\r\n  afterAll(async () => {\r\n    // Clean up test logs\r\n    try {\r\n      await fs.rmdir(testLogDir, { recursive: true });\r\n    } catch (error) {\r\n      // Ignore cleanup errors\r\n    }\r\n  });\r\n\r\n  describe('Intel NUC Performance Metrics Capture', () => {\r\n    test('should capture system performance metrics correctly', async () => {\r\n      console.log('🔍 Testing Intel NUC system performance metrics capture...');\r\n      \r\n      // Test basic system monitoring\r\n      try {\r\n        await systemMonitor.initializeSystemMonitoring();\r\n        console.log('✅ System monitoring initialized successfully');\r\n      } catch (error) {\r\n        console.log('⚠️ System monitoring initialization skipped (system dependent)');\r\n      }\r\n      \r\n      // Test CPU usage capture\r\n      const cpuUsage = process.cpuUsage();\r\n      expect(cpuUsage).toBeDefined();\r\n      expect(cpuUsage.user).toBeGreaterThanOrEqual(0);\r\n      expect(cpuUsage.system).toBeGreaterThanOrEqual(0);\r\n      console.log('✅ CPU usage metrics available');\r\n      \r\n      // Test memory usage capture\r\n      const memUsage = process.memoryUsage();\r\n      expect(memUsage).toBeDefined();\r\n      expect(memUsage.heapUsed).toBeGreaterThan(0);\r\n      expect(memUsage.heapTotal).toBeGreaterThan(0);\r\n      console.log('✅ Memory usage captured:', (memUsage.heapUsed / 1024 / 1024).toFixed(2) + ' MB');\r\n    });\r\n\r\n    test('should validate system resource monitoring', async () => {\r\n      console.log('🔍 Testing system resource monitoring...');\r\n      \r\n      // Test OS-level metrics\r\n      const os = require('os');\r\n      \r\n      // CPU information\r\n      const cpus = os.cpus();\r\n      expect(cpus).toBeDefined();\r\n      expect(Array.isArray(cpus)).toBe(true);\r\n      expect(cpus.length).toBeGreaterThan(0);\r\n      console.log('✅ CPU cores detected:', cpus.length);\r\n      \r\n      // Memory information\r\n      const totalMem = os.totalmem();\r\n      const freeMem = os.freemem();\r\n      expect(totalMem).toBeGreaterThan(0);\r\n      expect(freeMem).toBeGreaterThan(0);\r\n      \r\n      const memUsagePercent = ((totalMem - freeMem) / totalMem) * 100;\r\n      console.log('✅ Memory usage:', memUsagePercent.toFixed(2) + '%');\r\n      \r\n      // Platform information\r\n      const platform = os.platform();\r\n      const arch = os.arch();\r\n      console.log('✅ Platform:', platform, arch);\r\n    });\r\n  });\r\n\r\n  describe('Trading Execution Logging with Decision Trails', () => {\r\n    test('should log trading decisions with complete reasoning', async () => {\r\n      console.log('🔍 Testing trading execution logging with decision trails...');\r\n      \r\n      // Mock trading decision data\r\n      const tradingDecision = {\r\n        symbol: 'BTC/USDT',\r\n        action: 'buy',\r\n        amount: 0.001,\r\n        price: 45000,\r\n        confidence: 0.85,\r\n        reasoning: {\r\n          technicalAnalysis: {\r\n            rsi: 35,\r\n            macd: 'bullish_crossover',\r\n            support: 44500,\r\n            resistance: 46000\r\n          },\r\n          sentimentAnalysis: {\r\n            score: 0.7,\r\n            sources: ['twitter', 'reddit', 'news'],\r\n            keywords: ['bullish', 'adoption', 'institutional']\r\n          },\r\n          riskAssessment: {\r\n            portfolioRisk: 0.15,\r\n            positionSize: 0.02,\r\n            stopLoss: 43000,\r\n            takeProfit: 47000\r\n          }\r\n        }\r\n      };\r\n      \r\n      // Test basic logging functionality\r\n      logger.info('Trading decision test', {\r\n        symbol: tradingDecision.symbol,\r\n        action: tradingDecision.action,\r\n        amount: tradingDecision.amount,\r\n        price: tradingDecision.price,\r\n        confidence: tradingDecision.confidence,\r\n        reasoning: tradingDecision.reasoning\r\n      });\r\n      \r\n      console.log('✅ Trading decision logged with complete reasoning');\r\n      console.log('  - Symbol:', tradingDecision.symbol);\r\n      console.log('  - Action:', tradingDecision.action);\r\n      console.log('  - Confidence:', (tradingDecision.confidence * 100).toFixed(1) + '%');\r\n      console.log('  - Technical indicators included');\r\n      console.log('  - Sentiment analysis included');\r\n      console.log('  - Risk assessment included');\r\n      \r\n      // Test trade execution logging\r\n      const executionResult = {\r\n        orderId: 'order_12345',\r\n        executedPrice: 45050,\r\n        executedAmount: 0.001,\r\n        fees: 0.45,\r\n        slippage: 0.11,\r\n        executionTime: 150\r\n      };\r\n      \r\n      logger.info('Trade execution completed', {\r\n        symbol: tradingDecision.symbol,\r\n        action: tradingDecision.action,\r\n        executedAmount: executionResult.executedAmount,\r\n        executedPrice: executionResult.executedPrice,\r\n        executionResult\r\n      });\r\n      \r\n      console.log('✅ Trade execution logged with performance metrics');\r\n      console.log('  - Execution time:', executionResult.executionTime + 'ms');\r\n      console.log('  - Slippage:', executionResult.slippage.toFixed(2) + '%');\r\n      console.log('  - Fees:', executionResult.fees.toFixed(2) + ' USDT');\r\n    });\r\n\r\n    test('should log market analysis and sentiment data with context', async () => {\r\n      console.log('🔍 Testing market analysis and sentiment logging...');\r\n      \r\n      // Mock market analysis data\r\n      const marketAnalysis = {\r\n        symbol: 'BTC/USDT',\r\n        timestamp: new Date(),\r\n        technicalIndicators: {\r\n          rsi: { value: 35, signal: 'oversold' },\r\n          macd: { value: 150, signal: 'bullish', histogram: 75 },\r\n          bollinger: { upper: 46500, middle: 45000, lower: 43500, position: 'lower' },\r\n          volume: { current: 1500000, average: 1200000, trend: 'increasing' }\r\n        },\r\n        sentimentAnalysis: {\r\n          overall: 0.7,\r\n          sources: {\r\n            twitter: { score: 0.8, volume: 15000, keywords: ['bullish', 'moon'] },\r\n            reddit: { score: 0.6, volume: 5000, keywords: ['hodl', 'buy'] },\r\n            news: { score: 0.7, volume: 50, keywords: ['adoption', 'institutional'] }\r\n          },\r\n          fearGreedIndex: 65\r\n        },\r\n        priceAction: {\r\n          current: 45000,\r\n          change24h: 2.5,\r\n          high24h: 45500,\r\n          low24h: 43800,\r\n          support: [44500, 43000, 42000],\r\n          resistance: [46000, 47500, 49000]\r\n        }\r\n      };\r\n      \r\n      // Log market analysis using basic logger\r\n      logger.info('Market analysis completed', {\r\n        symbol: marketAnalysis.symbol,\r\n        technicalIndicators: marketAnalysis.technicalIndicators,\r\n        sentimentAnalysis: marketAnalysis.sentimentAnalysis,\r\n        priceAction: marketAnalysis.priceAction\r\n      });\r\n      \r\n      console.log('✅ Market analysis logged with comprehensive data');\r\n      console.log('  - Technical indicators: RSI, MACD, Bollinger Bands, Volume');\r\n      console.log('  - Sentiment sources: Twitter, Reddit, News');\r\n      console.log('  - Price action: Support/Resistance levels');\r\n      console.log('  - Fear & Greed Index:', marketAnalysis.sentimentAnalysis.fearGreedIndex);\r\n      \r\n      // Test strategy decision logging\r\n      const strategyDecision = {\r\n        strategy: 'momentum_reversal',\r\n        decision: 'enter_long',\r\n        confidence: 0.82,\r\n        parameters: {\r\n          rsiThreshold: 30,\r\n          macdConfirmation: true,\r\n          volumeConfirmation: true,\r\n          sentimentThreshold: 0.6\r\n        },\r\n        explanation: 'RSI oversold + MACD bullish crossover + high volume + positive sentiment'\r\n      };\r\n      \r\n      logger.info('Strategy decision made', {\r\n        symbol: marketAnalysis.symbol,\r\n        strategy: strategyDecision.strategy,\r\n        decision: strategyDecision.decision,\r\n        confidence: strategyDecision.confidence,\r\n        explanation: strategyDecision.explanation,\r\n        parameters: strategyDecision.parameters\r\n      });\r\n      \r\n      console.log('✅ Strategy decision logged with AI explanation');\r\n      console.log('  - Strategy:', strategyDecision.strategy);\r\n      console.log('  - Decision:', strategyDecision.decision);\r\n      console.log('  - Explanation:', strategyDecision.explanation);\r\n    });\r\n  });\r\n\r\n  describe('Performance Monitoring Alerts and Thresholds', () => {\r\n    test('should validate basic performance monitoring capabilities', async () => {\r\n      console.log('🔍 Testing performance monitoring alerts and thresholds...');\r\n      \r\n      // Test basic performance metrics collection\r\n      const startTime = Date.now();\r\n      \r\n      // Simulate some CPU work\r\n      let sum = 0;\r\n      for (let i = 0; i < 1000000; i++) {\r\n        sum += Math.random();\r\n      }\r\n      \r\n      const endTime = Date.now();\r\n      const executionTime = endTime - startTime;\r\n      \r\n      expect(executionTime).toBeGreaterThan(0);\r\n      console.log('✅ Performance timing captured:', executionTime + 'ms');\r\n      \r\n      // Test memory usage tracking\r\n      const memBefore = process.memoryUsage();\r\n      \r\n      // Allocate some memory\r\n      const largeArray = new Array(100000).fill(0).map(() => Math.random());\r\n      \r\n      const memAfter = process.memoryUsage();\r\n      const memDiff = memAfter.heapUsed - memBefore.heapUsed;\r\n      \r\n      expect(memDiff).toBeGreaterThan(0);\r\n      console.log('✅ Memory usage tracking working:', (memDiff / 1024 / 1024).toFixed(2) + ' MB allocated');\r\n      \r\n      // Clean up\r\n      largeArray.length = 0;\r\n    });\r\n\r\n    test('should validate log aggregation and analysis functionality', async () => {\r\n      console.log('🔍 Testing log aggregation and analysis functionality...');\r\n      \r\n      // Test multiple log entries\r\n      const logEntries = [\r\n        { level: 'info', message: 'System startup', component: 'system' },\r\n        { level: 'warn', message: 'High CPU usage', component: 'monitor' },\r\n        { level: 'error', message: 'Connection failed', component: 'network' },\r\n        { level: 'info', message: 'Trade executed', component: 'trading' }\r\n      ];\r\n      \r\n      // Log all entries\r\n      logEntries.forEach(entry => {\r\n        logger[entry.level as keyof Logger](entry.message, { component: entry.component });\r\n      });\r\n      \r\n      console.log('✅ Log aggregation test completed');\r\n      console.log('  - Info entries:', logEntries.filter(e => e.level === 'info').length);\r\n      console.log('  - Warning entries:', logEntries.filter(e => e.level === 'warn').length);\r\n      console.log('  - Error entries:', logEntries.filter(e => e.level === 'error').length);\r\n      \r\n      // Test log metadata\r\n      logger.info('Test with metadata', {\r\n        symbol: 'BTC/USDT',\r\n        action: 'buy',\r\n        amount: 0.001,\r\n        timestamp: new Date().toISOString()\r\n      });\r\n      \r\n      console.log('✅ Structured logging with metadata working');\r\n    });\r\n  });\r\n\r\n  describe('Automated Reporting and Analytics Generation', () => {\r\n    test('should generate performance reports with analytics', async () => {\r\n      console.log('🔍 Testing automated reporting and analytics generation...');\r\n      \r\n      // Generate mock system performance report\r\n      const report = {\r\n        timestamp: new Date(),\r\n        reportType: 'system_performance',\r\n        hardware: {\r\n          cpu: { cores: 4, model: 'Intel NUC' },\r\n          memory: { total: 8 * 1024 * 1024 * 1024 }, // 8GB\r\n          storage: { type: 'SSD', capacity: 256 * 1024 * 1024 * 1024 } // 256GB\r\n        },\r\n        metrics: {\r\n          cpu_usage: [25.5, 30.2, 28.1],\r\n          memory_usage: [65.3, 67.8, 66.1],\r\n          disk_usage: [45.2, 45.5, 45.3]\r\n        },\r\n        analysis: {\r\n          systemHealth: 'healthy',\r\n          recommendations: [],\r\n          alerts: []\r\n        }\r\n      };\r\n      \r\n      // Analyze performance trends\r\n      Object.keys(report.metrics).forEach(metric => {\r\n        const values = report.metrics[metric as keyof typeof report.metrics] as number[];\r\n        if (values && values.length >= 2) {\r\n          const avg = values.reduce((a, b) => a + b, 0) / values.length;\r\n          const trend = values[values.length - 1] > values[0] ? 'increasing' : 'decreasing';\r\n          \r\n          report.analysis.recommendations.push({\r\n            metric,\r\n            average: avg,\r\n            trend,\r\n            recommendation: avg > 80 ? 'Monitor closely' : 'Normal operation'\r\n          });\r\n        }\r\n      });\r\n      \r\n      expect(report.timestamp).toBeDefined();\r\n      expect(report.metrics).toBeDefined();\r\n      expect(report.analysis).toBeDefined();\r\n      \r\n      console.log('✅ Performance report generated successfully');\r\n      console.log('  - Report type:', report.reportType);\r\n      console.log('  - Metrics included:', Object.keys(report.metrics).length);\r\n      console.log('  - Recommendations:', report.analysis.recommendations.length);\r\n      \r\n      // Test trading analytics report\r\n      const tradingReport = {\r\n        timestamp: new Date(),\r\n        reportType: 'trading_analytics',\r\n        period: '24h',\r\n        summary: {\r\n          totalTrades: 15,\r\n          successfulTrades: 12,\r\n          successRate: 80,\r\n          totalProfit: 125.50,\r\n          totalFees: 12.30,\r\n          netProfit: 113.20\r\n        },\r\n        strategies: {\r\n          momentum_reversal: { trades: 8, profit: 85.20, successRate: 87.5 },\r\n          mean_reversion: { trades: 4, profit: 28.30, successRate: 75.0 },\r\n          breakout: { trades: 3, profit: 12.00, successRate: 66.7 }\r\n        }\r\n      };\r\n      \r\n      expect(tradingReport.summary.successRate).toBeGreaterThan(0);\r\n      expect(tradingReport.summary.netProfit).toBeGreaterThan(0);\r\n      \r\n      console.log('✅ Trading analytics report generated');\r\n      console.log('  - Success rate:', tradingReport.summary.successRate + '%');\r\n      console.log('  - Net profit:', tradingReport.summary.netProfit.toFixed(2), 'USDT');\r\n      console.log('  - Best strategy:', 'momentum_reversal');\r\n    });\r\n\r\n    test('should validate comprehensive logging continuity', async () => {\r\n      console.log('🔍 Testing comprehensive logging continuity...');\r\n      \r\n      // Test that logging continues during various operations\r\n      const logOperations = [\r\n        () => logger.info('Test info message'),\r\n        () => logger.warn('Test warning message'),\r\n        () => logger.error('Test error message', new Error('Test error')),\r\n        () => logger.info('Trading decision test', { symbol: 'BTC/USDT', action: 'buy' }),\r\n        () => logger.info('Market analysis test', { symbol: 'BTC/USDT', rsi: 35 }),\r\n        () => logger.info('System performance test', { component: 'test', status: 'healthy' })\r\n      ];\r\n      \r\n      // Execute logging operations\r\n      for (const operation of logOperations) {\r\n        try {\r\n          operation();\r\n          console.log('✅ Logging operation successful');\r\n        } catch (error) {\r\n          console.log('⚠️ Logging operation failed:', error);\r\n        }\r\n      }\r\n      \r\n      console.log('✅ Logging continuity validated');\r\n    });\r\n  });\r\n\r\n  describe('System Integration and Error Handling', () => {\r\n    test('should handle logging errors gracefully', async () => {\r\n      console.log('🔍 Testing logging error handling...');\r\n      \r\n      // Test logging with invalid data\r\n      try {\r\n        logger.info('', { invalidData: null });\r\n        console.log('✅ Invalid logging data handled gracefully');\r\n      } catch (error) {\r\n        console.log('✅ Invalid logging data properly rejected');\r\n      }\r\n      \r\n      // Test logging with circular references\r\n      try {\r\n        const circularObj: any = { name: 'test' };\r\n        circularObj.self = circularObj;\r\n        logger.info('Circular reference test', { data: circularObj });\r\n        console.log('✅ Circular reference handled gracefully');\r\n      } catch (error) {\r\n        console.log('✅ Circular reference properly handled');\r\n      }\r\n      \r\n      console.log('✅ Error handling validated');\r\n    });\r\n\r\n    test('should maintain performance during high load', async () => {\r\n      console.log('🔍 Testing performance under high logging load...');\r\n      \r\n      const startTime = Date.now();\r\n      const logCount = 100;\r\n      \r\n      // Generate high volume of logs\r\n      for (let i = 0; i < logCount; i++) {\r\n        logger.info(`High load test message ${i}`, {\r\n          iteration: i,\r\n          timestamp: new Date(),\r\n          testData: 'performance_test'\r\n        });\r\n      }\r\n      \r\n      const endTime = Date.now();\r\n      const duration = endTime - startTime;\r\n      const logsPerSecond = (logCount / duration) * 1000;\r\n      \r\n      expect(duration).toBeLessThan(5000); // Should complete within 5 seconds\r\n      \r\n      console.log('✅ High load logging performance test completed');\r\n      console.log('  - Messages logged:', logCount);\r\n      console.log('  - Duration:', duration + 'ms');\r\n      console.log('  - Rate:', logsPerSecond.toFixed(2), 'logs/second');\r\n    });\r\n  });\r\n});"],"version":3}