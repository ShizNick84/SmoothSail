{"version":3,"names":["cov_2frqskxxpc","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","events_1","require","logger_1","audit_service_1","SecurityMetricsService","EventEmitter","config","kpiHistory","Map","currentKPIs","collectionInterval","serviceStartTime","Date","securityEvents","constructor","retentionPeriod","alertThresholds","securityScoreMin","threatDetectionRateMax","falsePositiveRateMax","responseTimeMax","uptimeMin","trendAnalysisWindow","initializeKPITracking","logger","info","startMetricsCollection","setInterval","collectSecurityMetrics","error","auditService","createAuditEntry","auditId","now","eventType","actor","resource","action","result","timestamp","auditData","startTime","Error","stopMetricsCollection","clearInterval","uptime","getTime","totalDataPoints","getTotalDataPoints","recordSecurityEvent","event","push","length","shift","updateRealTimeMetrics","getCurrentSecurityMetrics","oneHourAgo","recentEvents","filter","totalEvents","threatEvents","eventsBySeverity","forEach","severity","eventsByType","threatDetectionRate","falsePositiveRate","calculateFalsePositiveRate","averageResponseTime","calculateAverageResponseTime","securityScore","calculateSecurityScore","monitoringUptime","calculateUptime","lastUpdate","getSecurityTrendAnalysis","kpiName","windowHours","windowStart","dataPoints","getKPIHistory","trend","strength","confidence","forecast","summary","calculateTrend","generateForecast","direction","generateTrendSummary","generateSecurityPerformanceReport","startDate","endDate","periodEvents","kpiSummaries","calculateKPISummaries","threatAnalysis","analyzeThreatData","systemPerformance","calculateSystemPerformance","recommendations","generateRecommendations","overallScore","calculateOverallSecurityScore","period","getComplianceMetrics","auditCompleteness","calculateAuditCompleteness","dataRetentionCompliance","calculateDataRetentionCompliance","accessControlCompliance","calculateAccessControlCompliance","encryptionCompliance","calculateEncryptionCompliance","incidentResponseCompliance","calculateIncidentResponseCompliance","overallCompliance","violations","identifyComplianceViolations","kpiNames","set","metrics","kpiDataPoints","value","unit","category","metadata","dataPoint","storeKPIDataPoint","checkKPIThresholds","cleanupOldData","eventVolumeKPI","incidentCountKPI","e","history","get","point","thresholds","alertTriggered","alertMessage","warn","message","emit","events","resolvedEvents","status","falsePositives","responseActions","includes","respondedEvents","totalResponseTime","reduce","total","severitySum","sum","averageSeverity","Math","max","totalTime","n","sumX","_","i","sumY","sumXY","sumXX","slope","abs","min","periods","windowSize","recentValues","slice","map","p","averageValue","val","lastTimestamp","intervalMs","forecastTimestamp","currentValue","previousValue","change","round","toFixed","summaries","periodData","values","current","average","firstHalf","floor","secondHalf","firstAvg","secondAvg","threatsByType","threatsBySeverity","sourceCount","severityRange","getSeverityRange","source","topSources","Object","entries","sort","a","count","totalThreats","errorRate","throughput","find","kpi","threatRate","responseTime","cutoffDate","filteredHistory","getStatus","isCollecting","totalKPIs","size","exports","securityMetricsService"],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\security-metrics-service.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * AI CRYPTO TRADING AGENT - SECURITY METRICS AND KPI TRACKING SERVICE\r\n * =============================================================================\r\n * \r\n * This service provides comprehensive security metrics collection, analysis,\r\n * and KPI tracking for the AI crypto trading agent. It monitors security\r\n * performance, threat trends, and system health indicators.\r\n * \r\n * CRITICAL SECURITY NOTICE:\r\n * This service provides essential metrics for security decision-making.\r\n * Accurate metrics are crucial for identifying security trends, measuring\r\n * security effectiveness, and making informed security investments.\r\n * \r\n * Metrics Capabilities:\r\n * - Real-time security KPI tracking\r\n * - Threat trend analysis and forecasting\r\n * - Security performance measurement\r\n * - Compliance metrics and reporting\r\n * - Historical data analysis\r\n * - Automated alerting on metric thresholds\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport { EventEmitter } from 'events';\r\nimport { logger } from '@/core/logging/logger';\r\nimport { auditService } from '@/security/audit-service';\r\nimport { SecurityEvent, SecurityMetrics } from '@/security/security-monitoring-service';\r\n\r\n/**\r\n * Interface for security KPI configuration\r\n */\r\nexport interface SecurityKPIConfig {\r\n  /** KPI collection interval in milliseconds */\r\n  collectionInterval: number;\r\n  /** Historical data retention period in days */\r\n  retentionPeriod: number;\r\n  /** Alert thresholds for KPIs */\r\n  alertThresholds: {\r\n    securityScoreMin: number;\r\n    threatDetectionRateMax: number;\r\n    falsePositiveRateMax: number;\r\n    responseTimeMax: number;\r\n    uptimeMin: number;\r\n  };\r\n  /** Trend analysis window in hours */\r\n  trendAnalysisWindow: number;\r\n}\r\n\r\n/**\r\n * Interface for security KPI data point\r\n */\r\nexport interface SecurityKPIDataPoint {\r\n  /** Timestamp of measurement */\r\n  timestamp: Date;\r\n  /** KPI name */\r\n  kpiName: string;\r\n  /** KPI value */\r\n  value: number;\r\n  /** KPI unit */\r\n  unit: string;\r\n  /** KPI category */\r\n  category: 'performance' | 'threat' | 'compliance' | 'system';\r\n  /** Additional metadata */\r\n  metadata: Record<string, any>;\r\n}\r\n\r\n/**\r\n * Interface for security trend analysis\r\n */\r\nexport interface SecurityTrendAnalysis {\r\n  /** KPI name */\r\n  kpiName: string;\r\n  /** Trend direction */\r\n  trend: 'improving' | 'degrading' | 'stable';\r\n  /** Trend strength (0-1) */\r\n  strength: number;\r\n  /** Trend confidence (0-1) */\r\n  confidence: number;\r\n  /** Historical data points */\r\n  dataPoints: SecurityKPIDataPoint[];\r\n  /** Forecast values */\r\n  forecast: Array<{ timestamp: Date; value: number; confidence: number }>;\r\n  /** Analysis summary */\r\n  summary: string;\r\n}\r\n\r\n/**\r\n * Interface for security performance report\r\n */\r\nexport interface SecurityPerformanceReport {\r\n  /** Report period */\r\n  period: { start: Date; end: Date };\r\n  /** Overall security score */\r\n  overallScore: number;\r\n  /** KPI summaries */\r\n  kpiSummaries: Array<{\r\n    name: string;\r\n    current: number;\r\n    average: number;\r\n    min: number;\r\n    max: number;\r\n    trend: 'up' | 'down' | 'stable';\r\n    status: 'good' | 'warning' | 'critical';\r\n  }>;\r\n  /** Threat analysis */\r\n  threatAnalysis: {\r\n    totalThreats: number;\r\n    threatsByType: Record<string, number>;\r\n    threatsBySeverity: Record<string, number>;\r\n    topSources: Array<{ source: string; count: number }>;\r\n  };\r\n  /** System performance */\r\n  systemPerformance: {\r\n    uptime: number;\r\n    averageResponseTime: number;\r\n    errorRate: number;\r\n    throughput: number;\r\n  };\r\n  /** Recommendations */\r\n  recommendations: string[];\r\n}\r\n\r\n/**\r\n * Interface for compliance metrics\r\n */\r\nexport interface ComplianceMetrics {\r\n  /** Audit trail completeness */\r\n  auditCompleteness: number;\r\n  /** Data retention compliance */\r\n  dataRetentionCompliance: number;\r\n  /** Access control compliance */\r\n  accessControlCompliance: number;\r\n  /** Encryption compliance */\r\n  encryptionCompliance: number;\r\n  /** Incident response compliance */\r\n  incidentResponseCompliance: number;\r\n  /** Overall compliance score */\r\n  overallCompliance: number;\r\n  /** Compliance violations */\r\n  violations: Array<{\r\n    type: string;\r\n    severity: 'low' | 'medium' | 'high';\r\n    description: string;\r\n    timestamp: Date;\r\n  }>;\r\n}\r\n\r\n/**\r\n * Security metrics and KPI tracking service\r\n * Provides comprehensive security performance measurement and analysis\r\n */\r\nexport class SecurityMetricsService extends EventEmitter {\r\n  /** Service configuration */\r\n  private config: SecurityKPIConfig;\r\n  \r\n  /** Historical KPI data */\r\n  private kpiHistory: Map<string, SecurityKPIDataPoint[]> = new Map();\r\n  \r\n  /** Current KPI values */\r\n  private currentKPIs: Map<string, SecurityKPIDataPoint> = new Map();\r\n  \r\n  /** Metrics collection interval */\r\n  private collectionInterval: NodeJS.Timeout | null = null;\r\n  \r\n  /** Service start time */\r\n  private serviceStartTime: Date = new Date();\r\n  \r\n  /** Security events for analysis */\r\n  private securityEvents: SecurityEvent[] = [];\r\n\r\n  constructor(config?: Partial<SecurityKPIConfig>) {\r\n    super();\r\n    \r\n    // Initialize configuration with defaults\r\n    this.config = {\r\n      collectionInterval: 60000, // 1 minute\r\n      retentionPeriod: 90, // 90 days\r\n      alertThresholds: {\r\n        securityScoreMin: 80,\r\n        threatDetectionRateMax: 10, // 10% of events\r\n        falsePositiveRateMax: 5, // 5% false positives\r\n        responseTimeMax: 300, // 5 minutes\r\n        uptimeMin: 99.5 // 99.5% uptime\r\n      },\r\n      trendAnalysisWindow: 24 // 24 hours\r\n    };\r\n    \r\n    // Merge with provided config\r\n    this.config = { ...this.config, ...config };\r\n    \r\n    // Initialize KPI tracking\r\n    this.initializeKPITracking();\r\n    \r\n    logger.info('📊 Security Metrics Service initialized');\r\n  }\r\n\r\n  /**\r\n   * Start metrics collection\r\n   * Begins continuous security metrics collection\r\n   * \r\n   * @returns Promise<void>\r\n   */\r\n  public async startMetricsCollection(): Promise<void> {\r\n    try {\r\n      logger.info('🚀 Starting security metrics collection...');\r\n      \r\n      // Start metrics collection interval\r\n      this.collectionInterval = setInterval(async () => {\r\n        try {\r\n          await this.collectSecurityMetrics();\r\n        } catch (error) {\r\n          logger.error('❌ Metrics collection error:', error);\r\n        }\r\n      }, this.config.collectionInterval);\r\n      \r\n      // Perform initial metrics collection\r\n      await this.collectSecurityMetrics();\r\n      \r\n      // Create audit entry\r\n      await auditService.createAuditEntry({\r\n        auditId: `metrics_start_${Date.now()}`,\r\n        eventType: 'SECURITY_METRICS_START',\r\n        actor: 'SYSTEM',\r\n        resource: 'SECURITY_METRICS_SERVICE',\r\n        action: 'START_COLLECTION',\r\n        result: 'SUCCESS',\r\n        timestamp: new Date(),\r\n        auditData: {\r\n          config: this.config,\r\n          startTime: this.serviceStartTime\r\n        }\r\n      });\r\n      \r\n      logger.info('✅ Security metrics collection started successfully');\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to start metrics collection:', error);\r\n      throw new Error('Security metrics collection startup failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop metrics collection\r\n   * Stops continuous security metrics collection\r\n   * \r\n   * @returns Promise<void>\r\n   */\r\n  public async stopMetricsCollection(): Promise<void> {\r\n    try {\r\n      logger.info('🛑 Stopping security metrics collection...');\r\n      \r\n      // Stop collection interval\r\n      if (this.collectionInterval) {\r\n        clearInterval(this.collectionInterval);\r\n        this.collectionInterval = null;\r\n      }\r\n      \r\n      // Create audit entry\r\n      await auditService.createAuditEntry({\r\n        auditId: `metrics_stop_${Date.now()}`,\r\n        eventType: 'SECURITY_METRICS_STOP',\r\n        actor: 'SYSTEM',\r\n        resource: 'SECURITY_METRICS_SERVICE',\r\n        action: 'STOP_COLLECTION',\r\n        result: 'SUCCESS',\r\n        timestamp: new Date(),\r\n        auditData: {\r\n          uptime: Date.now() - this.serviceStartTime.getTime(),\r\n          totalDataPoints: this.getTotalDataPoints()\r\n        }\r\n      });\r\n      \r\n      logger.info('✅ Security metrics collection stopped successfully');\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to stop metrics collection:', error);\r\n      throw new Error('Security metrics collection shutdown failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Record security event\r\n   * Records security event for metrics analysis\r\n   * \r\n   * @param event - Security event to record\r\n   * @returns Promise<void>\r\n   */\r\n  public async recordSecurityEvent(event: SecurityEvent): Promise<void> {\r\n    try {\r\n      // Add to events history\r\n      this.securityEvents.push(event);\r\n      \r\n      // Maintain event history size (last 10,000 events)\r\n      if (this.securityEvents.length > 10000) {\r\n        this.securityEvents.shift();\r\n      }\r\n      \r\n      // Update real-time metrics\r\n      await this.updateRealTimeMetrics(event);\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to record security event:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get current security metrics\r\n   * Returns current security KPIs and metrics\r\n   * \r\n   * @returns SecurityMetrics Current security metrics\r\n   */\r\n  public getCurrentSecurityMetrics(): SecurityMetrics {\r\n    const now = new Date();\r\n    const oneHourAgo = new Date(now.getTime() - 60 * 60 * 1000);\r\n    \r\n    // Filter recent events\r\n    const recentEvents = this.securityEvents.filter(\r\n      event => event.timestamp >= oneHourAgo\r\n    );\r\n    \r\n    // Calculate metrics\r\n    const totalEvents = recentEvents.length;\r\n    const threatEvents = recentEvents.filter(\r\n      event => event.eventType === 'threat_detected'\r\n    );\r\n    \r\n    // Events by severity\r\n    const eventsBySeverity: Record<number, number> = {};\r\n    recentEvents.forEach(event => {\r\n      eventsBySeverity[event.severity] = (eventsBySeverity[event.severity] || 0) + 1;\r\n    });\r\n    \r\n    // Events by type\r\n    const eventsByType: Record<string, number> = {};\r\n    recentEvents.forEach(event => {\r\n      eventsByType[event.eventType] = (eventsByType[event.eventType] || 0) + 1;\r\n    });\r\n    \r\n    // Calculate rates\r\n    const threatDetectionRate = totalEvents > 0 ? (threatEvents.length / totalEvents) * 100 : 0;\r\n    const falsePositiveRate = this.calculateFalsePositiveRate(recentEvents);\r\n    const averageResponseTime = this.calculateAverageResponseTime(recentEvents);\r\n    const securityScore = this.calculateSecurityScore(recentEvents);\r\n    const monitoringUptime = this.calculateUptime();\r\n    \r\n    return {\r\n      totalEvents,\r\n      eventsBySeverity,\r\n      eventsByType,\r\n      threatDetectionRate,\r\n      falsePositiveRate,\r\n      averageResponseTime,\r\n      securityScore,\r\n      monitoringUptime,\r\n      lastUpdate: now\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get security trend analysis\r\n   * Analyzes security trends over time\r\n   * \r\n   * @param kpiName - KPI to analyze\r\n   * @param windowHours - Analysis window in hours\r\n   * @returns Promise<SecurityTrendAnalysis> Trend analysis\r\n   */\r\n  public async getSecurityTrendAnalysis(\r\n    kpiName: string,\r\n    windowHours: number = this.config.trendAnalysisWindow\r\n  ): Promise<SecurityTrendAnalysis> {\r\n    try {\r\n      const windowStart = new Date(Date.now() - (windowHours * 60 * 60 * 1000));\r\n      const dataPoints = this.getKPIHistory(kpiName, windowStart);\r\n      \r\n      if (dataPoints.length < 3) {\r\n        return {\r\n          kpiName,\r\n          trend: 'stable',\r\n          strength: 0,\r\n          confidence: 0,\r\n          dataPoints,\r\n          forecast: [],\r\n          summary: 'Insufficient data for trend analysis'\r\n        };\r\n      }\r\n      \r\n      // Calculate trend\r\n      const trend = this.calculateTrend(dataPoints);\r\n      const forecast = this.generateForecast(dataPoints, 6); // 6 hour forecast\r\n      \r\n      return {\r\n        kpiName,\r\n        trend: trend.direction,\r\n        strength: trend.strength,\r\n        confidence: trend.confidence,\r\n        dataPoints,\r\n        forecast,\r\n        summary: this.generateTrendSummary(trend, dataPoints)\r\n      };\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to analyze security trend:', error);\r\n      throw new Error('Security trend analysis failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate security performance report\r\n   * Creates comprehensive security performance report\r\n   * \r\n   * @param startDate - Report start date\r\n   * @param endDate - Report end date\r\n   * @returns Promise<SecurityPerformanceReport> Performance report\r\n   */\r\n  public async generateSecurityPerformanceReport(\r\n    startDate: Date,\r\n    endDate: Date\r\n  ): Promise<SecurityPerformanceReport> {\r\n    try {\r\n      const periodEvents = this.securityEvents.filter(\r\n        event => event.timestamp >= startDate && event.timestamp <= endDate\r\n      );\r\n      \r\n      // Calculate KPI summaries\r\n      const kpiSummaries = await this.calculateKPISummaries(startDate, endDate);\r\n      \r\n      // Analyze threats\r\n      const threatAnalysis = this.analyzeThreatData(periodEvents);\r\n      \r\n      // Calculate system performance\r\n      const systemPerformance = this.calculateSystemPerformance(periodEvents);\r\n      \r\n      // Generate recommendations\r\n      const recommendations = this.generateRecommendations(kpiSummaries, threatAnalysis);\r\n      \r\n      // Calculate overall score\r\n      const overallScore = this.calculateOverallSecurityScore(kpiSummaries);\r\n      \r\n      return {\r\n        period: { start: startDate, end: endDate },\r\n        overallScore,\r\n        kpiSummaries,\r\n        threatAnalysis,\r\n        systemPerformance,\r\n        recommendations\r\n      };\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to generate performance report:', error);\r\n      throw new Error('Security performance report generation failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get compliance metrics\r\n   * Returns current compliance metrics and status\r\n   * \r\n   * @returns Promise<ComplianceMetrics> Compliance metrics\r\n   */\r\n  public async getComplianceMetrics(): Promise<ComplianceMetrics> {\r\n    try {\r\n      // Calculate compliance scores\r\n      const auditCompleteness = await this.calculateAuditCompleteness();\r\n      const dataRetentionCompliance = this.calculateDataRetentionCompliance();\r\n      const accessControlCompliance = this.calculateAccessControlCompliance();\r\n      const encryptionCompliance = this.calculateEncryptionCompliance();\r\n      const incidentResponseCompliance = this.calculateIncidentResponseCompliance();\r\n      \r\n      // Calculate overall compliance\r\n      const overallCompliance = (\r\n        auditCompleteness +\r\n        dataRetentionCompliance +\r\n        accessControlCompliance +\r\n        encryptionCompliance +\r\n        incidentResponseCompliance\r\n      ) / 5;\r\n      \r\n      // Identify violations\r\n      const violations = await this.identifyComplianceViolations();\r\n      \r\n      return {\r\n        auditCompleteness,\r\n        dataRetentionCompliance,\r\n        accessControlCompliance,\r\n        encryptionCompliance,\r\n        incidentResponseCompliance,\r\n        overallCompliance,\r\n        violations\r\n      };\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to get compliance metrics:', error);\r\n      throw new Error('Compliance metrics calculation failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialize KPI tracking\r\n   * Sets up KPI tracking infrastructure\r\n   */\r\n  private initializeKPITracking(): void {\r\n    // Initialize KPI history maps\r\n    const kpiNames = [\r\n      'security_score',\r\n      'threat_detection_rate',\r\n      'false_positive_rate',\r\n      'average_response_time',\r\n      'system_uptime',\r\n      'event_volume',\r\n      'incident_count',\r\n      'compliance_score'\r\n    ];\r\n    \r\n    kpiNames.forEach(kpiName => {\r\n      this.kpiHistory.set(kpiName, []);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Collect security metrics\r\n   * Collects current security metrics and KPIs\r\n   * \r\n   * @returns Promise<void>\r\n   */\r\n  private async collectSecurityMetrics(): Promise<void> {\r\n    try {\r\n      const now = new Date();\r\n      const metrics = this.getCurrentSecurityMetrics();\r\n      \r\n      // Create KPI data points\r\n      const kpiDataPoints: SecurityKPIDataPoint[] = [\r\n        {\r\n          timestamp: now,\r\n          kpiName: 'security_score',\r\n          value: metrics.securityScore,\r\n          unit: 'score',\r\n          category: 'performance',\r\n          metadata: { totalEvents: metrics.totalEvents }\r\n        },\r\n        {\r\n          timestamp: now,\r\n          kpiName: 'threat_detection_rate',\r\n          value: metrics.threatDetectionRate,\r\n          unit: 'percentage',\r\n          category: 'threat',\r\n          metadata: { totalEvents: metrics.totalEvents }\r\n        },\r\n        {\r\n          timestamp: now,\r\n          kpiName: 'false_positive_rate',\r\n          value: metrics.falsePositiveRate,\r\n          unit: 'percentage',\r\n          category: 'performance',\r\n          metadata: {}\r\n        },\r\n        {\r\n          timestamp: now,\r\n          kpiName: 'average_response_time',\r\n          value: metrics.averageResponseTime,\r\n          unit: 'seconds',\r\n          category: 'performance',\r\n          metadata: {}\r\n        },\r\n        {\r\n          timestamp: now,\r\n          kpiName: 'system_uptime',\r\n          value: metrics.monitoringUptime,\r\n          unit: 'percentage',\r\n          category: 'system',\r\n          metadata: {}\r\n        }\r\n      ];\r\n      \r\n      // Store KPI data points\r\n      for (const dataPoint of kpiDataPoints) {\r\n        this.storeKPIDataPoint(dataPoint);\r\n        this.currentKPIs.set(dataPoint.kpiName, dataPoint);\r\n        \r\n        // Check alert thresholds\r\n        await this.checkKPIThresholds(dataPoint);\r\n      }\r\n      \r\n      // Clean up old data\r\n      this.cleanupOldData();\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to collect security metrics:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update real-time metrics\r\n   * Updates metrics based on new security event\r\n   * \r\n   * @param event - Security event\r\n   * @returns Promise<void>\r\n   */\r\n  private async updateRealTimeMetrics(event: SecurityEvent): Promise<void> {\r\n    // Update event volume metric\r\n    const eventVolumeKPI: SecurityKPIDataPoint = {\r\n      timestamp: new Date(),\r\n      kpiName: 'event_volume',\r\n      value: this.securityEvents.length,\r\n      unit: 'count',\r\n      category: 'system',\r\n      metadata: { eventType: event.eventType, severity: event.severity }\r\n    };\r\n    \r\n    this.storeKPIDataPoint(eventVolumeKPI);\r\n    this.currentKPIs.set('event_volume', eventVolumeKPI);\r\n    \r\n    // Update incident count for high-severity events\r\n    if (event.severity >= 7) {\r\n      const incidentCountKPI: SecurityKPIDataPoint = {\r\n        timestamp: new Date(),\r\n        kpiName: 'incident_count',\r\n        value: this.securityEvents.filter(e => e.severity >= 7).length,\r\n        unit: 'count',\r\n        category: 'threat',\r\n        metadata: { severity: event.severity }\r\n      };\r\n      \r\n      this.storeKPIDataPoint(incidentCountKPI);\r\n      this.currentKPIs.set('incident_count', incidentCountKPI);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Store KPI data point\r\n   * Stores KPI data point in history\r\n   * \r\n   * @param dataPoint - KPI data point to store\r\n   */\r\n  private storeKPIDataPoint(dataPoint: SecurityKPIDataPoint): void {\r\n    const history = this.kpiHistory.get(dataPoint.kpiName) || [];\r\n    history.push(dataPoint);\r\n    \r\n    // Maintain history size (keep last 10,000 points per KPI)\r\n    if (history.length > 10000) {\r\n      history.shift();\r\n    }\r\n    \r\n    this.kpiHistory.set(dataPoint.kpiName, history);\r\n  }\r\n\r\n  /**\r\n   * Get KPI history\r\n   * Retrieves KPI history for specified period\r\n   * \r\n   * @param kpiName - KPI name\r\n   * @param startDate - Start date\r\n   * @returns SecurityKPIDataPoint[] KPI history\r\n   */\r\n  private getKPIHistory(kpiName: string, startDate: Date): SecurityKPIDataPoint[] {\r\n    const history = this.kpiHistory.get(kpiName) || [];\r\n    return history.filter(point => point.timestamp >= startDate);\r\n  }\r\n\r\n  /**\r\n   * Check KPI thresholds\r\n   * Checks KPI against alert thresholds\r\n   * \r\n   * @param dataPoint - KPI data point\r\n   * @returns Promise<void>\r\n   */\r\n  private async checkKPIThresholds(dataPoint: SecurityKPIDataPoint): Promise<void> {\r\n    const thresholds = this.config.alertThresholds;\r\n    let alertTriggered = false;\r\n    let alertMessage = '';\r\n    \r\n    switch (dataPoint.kpiName) {\r\n      case 'security_score':\r\n        if (dataPoint.value < thresholds.securityScoreMin) {\r\n          alertTriggered = true;\r\n          alertMessage = `Security score (${dataPoint.value}) below threshold (${thresholds.securityScoreMin})`;\r\n        }\r\n        break;\r\n      \r\n      case 'threat_detection_rate':\r\n        if (dataPoint.value > thresholds.threatDetectionRateMax) {\r\n          alertTriggered = true;\r\n          alertMessage = `Threat detection rate (${dataPoint.value}%) above threshold (${thresholds.threatDetectionRateMax}%)`;\r\n        }\r\n        break;\r\n      \r\n      case 'false_positive_rate':\r\n        if (dataPoint.value > thresholds.falsePositiveRateMax) {\r\n          alertTriggered = true;\r\n          alertMessage = `False positive rate (${dataPoint.value}%) above threshold (${thresholds.falsePositiveRateMax}%)`;\r\n        }\r\n        break;\r\n      \r\n      case 'average_response_time':\r\n        if (dataPoint.value > thresholds.responseTimeMax) {\r\n          alertTriggered = true;\r\n          alertMessage = `Average response time (${dataPoint.value}s) above threshold (${thresholds.responseTimeMax}s)`;\r\n        }\r\n        break;\r\n      \r\n      case 'system_uptime':\r\n        if (dataPoint.value < thresholds.uptimeMin) {\r\n          alertTriggered = true;\r\n          alertMessage = `System uptime (${dataPoint.value}%) below threshold (${thresholds.uptimeMin}%)`;\r\n        }\r\n        break;\r\n    }\r\n    \r\n    if (alertTriggered) {\r\n      logger.warn('📊 KPI THRESHOLD ALERT', {\r\n        kpiName: dataPoint.kpiName,\r\n        value: dataPoint.value,\r\n        message: alertMessage\r\n      });\r\n      \r\n      this.emit('kpiAlert', {\r\n        kpiName: dataPoint.kpiName,\r\n        value: dataPoint.value,\r\n        message: alertMessage,\r\n        timestamp: dataPoint.timestamp\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate false positive rate\r\n   * Calculates false positive rate from events\r\n   * \r\n   * @param events - Security events\r\n   * @returns number False positive rate\r\n   */\r\n  private calculateFalsePositiveRate(events: SecurityEvent[]): number {\r\n    const resolvedEvents = events.filter(event => event.status === 'resolved');\r\n    const falsePositives = resolvedEvents.filter(event => \r\n      event.responseActions.includes('Mark as false positive')\r\n    );\r\n    \r\n    return resolvedEvents.length > 0 ? (falsePositives.length / resolvedEvents.length) * 100 : 0;\r\n  }\r\n\r\n  /**\r\n   * Calculate average response time\r\n   * Calculates average response time for events\r\n   * \r\n   * @param events - Security events\r\n   * @returns number Average response time in seconds\r\n   */\r\n  private calculateAverageResponseTime(events: SecurityEvent[]): number {\r\n    const respondedEvents = events.filter(event => \r\n      event.status === 'resolved' || event.status === 'contained'\r\n    );\r\n    \r\n    if (respondedEvents.length === 0) return 0;\r\n    \r\n    const totalResponseTime = respondedEvents.reduce((total, event) => {\r\n      // Simulate response time calculation\r\n      // In real implementation, this would track actual response times\r\n      return total + (event.severity * 30); // Rough estimate based on severity\r\n    }, 0);\r\n    \r\n    return totalResponseTime / respondedEvents.length;\r\n  }\r\n\r\n  /**\r\n   * Calculate security score\r\n   * Calculates overall security score based on events\r\n   * \r\n   * @param events - Security events\r\n   * @returns number Security score (0-100)\r\n   */\r\n  private calculateSecurityScore(events: SecurityEvent[]): number {\r\n    if (events.length === 0) return 100;\r\n    \r\n    const severitySum = events.reduce((sum, event) => sum + event.severity, 0);\r\n    const averageSeverity = severitySum / events.length;\r\n    \r\n    // Convert average severity to security score (inverse relationship)\r\n    return Math.max(0, 100 - (averageSeverity * 10));\r\n  }\r\n\r\n  /**\r\n   * Calculate uptime\r\n   * Calculates system uptime percentage\r\n   * \r\n   * @returns number Uptime percentage\r\n   */\r\n  private calculateUptime(): number {\r\n    const totalTime = Date.now() - this.serviceStartTime.getTime();\r\n    // In real implementation, this would track actual downtime\r\n    // For now, assume 99.9% uptime\r\n    return 99.9;\r\n  }\r\n\r\n  /**\r\n   * Calculate trend\r\n   * Calculates trend direction and strength from data points\r\n   * \r\n   * @param dataPoints - KPI data points\r\n   * @returns Trend analysis\r\n   */\r\n  private calculateTrend(dataPoints: SecurityKPIDataPoint[]): {\r\n    direction: 'improving' | 'degrading' | 'stable';\r\n    strength: number;\r\n    confidence: number;\r\n  } {\r\n    if (dataPoints.length < 2) {\r\n      return { direction: 'stable', strength: 0, confidence: 0 };\r\n    }\r\n    \r\n    // Simple linear regression for trend\r\n    const n = dataPoints.length;\r\n    const sumX = dataPoints.reduce((sum, _, i) => sum + i, 0);\r\n    const sumY = dataPoints.reduce((sum, point) => sum + point.value, 0);\r\n    const sumXY = dataPoints.reduce((sum, point, i) => sum + (i * point.value), 0);\r\n    const sumXX = dataPoints.reduce((sum, _, i) => sum + (i * i), 0);\r\n    \r\n    const slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);\r\n    const strength = Math.abs(slope) / (sumY / n); // Normalized slope\r\n    const confidence = Math.min(n / 10, 1); // Confidence based on data points\r\n    \r\n    let direction: 'improving' | 'degrading' | 'stable' = 'stable';\r\n    if (Math.abs(slope) > 0.1) {\r\n      direction = slope > 0 ? 'improving' : 'degrading';\r\n    }\r\n    \r\n    return { direction, strength, confidence };\r\n  }\r\n\r\n  /**\r\n   * Generate forecast\r\n   * Generates forecast values based on historical data\r\n   * \r\n   * @param dataPoints - Historical data points\r\n   * @param periods - Number of periods to forecast\r\n   * @returns Forecast data\r\n   */\r\n  private generateForecast(\r\n    dataPoints: SecurityKPIDataPoint[],\r\n    periods: number\r\n  ): Array<{ timestamp: Date; value: number; confidence: number }> {\r\n    const forecast: Array<{ timestamp: Date; value: number; confidence: number }> = [];\r\n    \r\n    if (dataPoints.length < 3) return forecast;\r\n    \r\n    // Simple moving average forecast\r\n    const windowSize = Math.min(5, dataPoints.length);\r\n    const recentValues = dataPoints.slice(-windowSize).map(p => p.value);\r\n    const averageValue = recentValues.reduce((sum, val) => sum + val, 0) / recentValues.length;\r\n    \r\n    const lastTimestamp = dataPoints[dataPoints.length - 1].timestamp;\r\n    const intervalMs = dataPoints.length > 1 ? \r\n      dataPoints[dataPoints.length - 1].timestamp.getTime() - \r\n      dataPoints[dataPoints.length - 2].timestamp.getTime() : \r\n      60000; // Default 1 minute\r\n    \r\n    for (let i = 1; i <= periods; i++) {\r\n      const forecastTimestamp = new Date(lastTimestamp.getTime() + (i * intervalMs));\r\n      const confidence = Math.max(0.1, 1 - (i * 0.1)); // Decreasing confidence\r\n      \r\n      forecast.push({\r\n        timestamp: forecastTimestamp,\r\n        value: averageValue,\r\n        confidence\r\n      });\r\n    }\r\n    \r\n    return forecast;\r\n  }\r\n\r\n  /**\r\n   * Generate trend summary\r\n   * Creates human-readable trend summary\r\n   * \r\n   * @param trend - Trend analysis\r\n   * @param dataPoints - Data points\r\n   * @returns string Trend summary\r\n   */\r\n  private generateTrendSummary(\r\n    trend: { direction: string; strength: number; confidence: number },\r\n    dataPoints: SecurityKPIDataPoint[]\r\n  ): string {\r\n    const kpiName = dataPoints[0]?.kpiName || 'Unknown KPI';\r\n    const currentValue = dataPoints[dataPoints.length - 1]?.value || 0;\r\n    const previousValue = dataPoints[0]?.value || 0;\r\n    const change = ((currentValue - previousValue) / previousValue) * 100;\r\n    \r\n    return `${kpiName} is ${trend.direction} with ${Math.round(trend.strength * 100)}% strength ` +\r\n           `and ${Math.round(trend.confidence * 100)}% confidence. ` +\r\n           `Current value: ${currentValue.toFixed(2)}, Change: ${change.toFixed(1)}%`;\r\n  }\r\n\r\n  /**\r\n   * Calculate KPI summaries\r\n   * Calculates KPI summaries for report period\r\n   * \r\n   * @param startDate - Start date\r\n   * @param endDate - End date\r\n   * @returns Promise<Array> KPI summaries\r\n   */\r\n  private async calculateKPISummaries(startDate: Date, endDate: Date): Promise<Array<{\r\n    name: string;\r\n    current: number;\r\n    average: number;\r\n    min: number;\r\n    max: number;\r\n    trend: 'up' | 'down' | 'stable';\r\n    status: 'good' | 'warning' | 'critical';\r\n  }>> {\r\n    const summaries = [];\r\n    \r\n    for (const [kpiName] of this.kpiHistory) {\r\n      const periodData = this.getKPIHistory(kpiName, startDate)\r\n        .filter(point => point.timestamp <= endDate);\r\n      \r\n      if (periodData.length === 0) continue;\r\n      \r\n      const values = periodData.map(point => point.value);\r\n      const current = values[values.length - 1];\r\n      const average = values.reduce((sum, val) => sum + val, 0) / values.length;\r\n      const min = Math.min(...values);\r\n      const max = Math.max(...values);\r\n      \r\n      // Determine trend\r\n      const firstHalf = values.slice(0, Math.floor(values.length / 2));\r\n      const secondHalf = values.slice(Math.floor(values.length / 2));\r\n      const firstAvg = firstHalf.reduce((sum, val) => sum + val, 0) / firstHalf.length;\r\n      const secondAvg = secondHalf.reduce((sum, val) => sum + val, 0) / secondHalf.length;\r\n      \r\n      let trend: 'up' | 'down' | 'stable' = 'stable';\r\n      if (Math.abs(secondAvg - firstAvg) > average * 0.05) {\r\n        trend = secondAvg > firstAvg ? 'up' : 'down';\r\n      }\r\n      \r\n      // Determine status\r\n      let status: 'good' | 'warning' | 'critical' = 'good';\r\n      if (kpiName === 'security_score' && current < 80) status = 'warning';\r\n      if (kpiName === 'security_score' && current < 60) status = 'critical';\r\n      \r\n      summaries.push({\r\n        name: kpiName,\r\n        current,\r\n        average,\r\n        min,\r\n        max,\r\n        trend,\r\n        status\r\n      });\r\n    }\r\n    \r\n    return summaries;\r\n  }\r\n\r\n  /**\r\n   * Analyze threat data\r\n   * Analyzes threat data for report\r\n   * \r\n   * @param events - Security events\r\n   * @returns Threat analysis\r\n   */\r\n  private analyzeThreatData(events: SecurityEvent[]): {\r\n    totalThreats: number;\r\n    threatsByType: Record<string, number>;\r\n    threatsBySeverity: Record<string, number>;\r\n    topSources: Array<{ source: string; count: number }>;\r\n  } {\r\n    const threatEvents = events.filter(event => event.eventType === 'threat_detected');\r\n    \r\n    const threatsByType: Record<string, number> = {};\r\n    const threatsBySeverity: Record<string, number> = {};\r\n    const sourceCount: Record<string, number> = {};\r\n    \r\n    threatEvents.forEach(event => {\r\n      // Count by type\r\n      threatsByType[event.eventType] = (threatsByType[event.eventType] || 0) + 1;\r\n      \r\n      // Count by severity\r\n      const severityRange = this.getSeverityRange(event.severity);\r\n      threatsBySeverity[severityRange] = (threatsBySeverity[severityRange] || 0) + 1;\r\n      \r\n      // Count by source\r\n      sourceCount[event.source] = (sourceCount[event.source] || 0) + 1;\r\n    });\r\n    \r\n    // Get top sources\r\n    const topSources = Object.entries(sourceCount)\r\n      .sort(([,a], [,b]) => b - a)\r\n      .slice(0, 10)\r\n      .map(([source, count]) => ({ source, count }));\r\n    \r\n    return {\r\n      totalThreats: threatEvents.length,\r\n      threatsByType,\r\n      threatsBySeverity,\r\n      topSources\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculate system performance\r\n   * Calculates system performance metrics\r\n   * \r\n   * @param events - Security events\r\n   * @returns System performance metrics\r\n   */\r\n  private calculateSystemPerformance(events: SecurityEvent[]): {\r\n    uptime: number;\r\n    averageResponseTime: number;\r\n    errorRate: number;\r\n    throughput: number;\r\n  } {\r\n    return {\r\n      uptime: this.calculateUptime(),\r\n      averageResponseTime: this.calculateAverageResponseTime(events),\r\n      errorRate: events.filter(e => e.status === 'resolved').length / Math.max(events.length, 1) * 100,\r\n      throughput: events.length / 24 // Events per hour (assuming 24-hour period)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generate recommendations\r\n   * Generates security recommendations based on analysis\r\n   * \r\n   * @param kpiSummaries - KPI summaries\r\n   * @param threatAnalysis - Threat analysis\r\n   * @returns string[] Recommendations\r\n   */\r\n  private generateRecommendations(\r\n    kpiSummaries: any[],\r\n    threatAnalysis: any\r\n  ): string[] {\r\n    const recommendations: string[] = [];\r\n    \r\n    // Check security score\r\n    const securityScore = kpiSummaries.find(kpi => kpi.name === 'security_score');\r\n    if (securityScore && securityScore.current < 80) {\r\n      recommendations.push('Security score is below optimal level. Review and strengthen security controls.');\r\n    }\r\n    \r\n    // Check threat detection rate\r\n    const threatRate = kpiSummaries.find(kpi => kpi.name === 'threat_detection_rate');\r\n    if (threatRate && threatRate.current > 10) {\r\n      recommendations.push('High threat detection rate indicates increased security risks. Investigate threat sources.');\r\n    }\r\n    \r\n    // Check response time\r\n    const responseTime = kpiSummaries.find(kpi => kpi.name === 'average_response_time');\r\n    if (responseTime && responseTime.current > 300) {\r\n      recommendations.push('Average response time is high. Consider automating more response procedures.');\r\n    }\r\n    \r\n    // Check threat patterns\r\n    if (threatAnalysis.totalThreats > 100) {\r\n      recommendations.push('High volume of threats detected. Consider implementing additional preventive measures.');\r\n    }\r\n    \r\n    return recommendations;\r\n  }\r\n\r\n  /**\r\n   * Calculate overall security score\r\n   * Calculates overall security score from KPI summaries\r\n   * \r\n   * @param kpiSummaries - KPI summaries\r\n   * @returns number Overall security score\r\n   */\r\n  private calculateOverallSecurityScore(kpiSummaries: any[]): number {\r\n    const securityScore = kpiSummaries.find(kpi => kpi.name === 'security_score');\r\n    return securityScore ? securityScore.current : 100;\r\n  }\r\n\r\n  /**\r\n   * Calculate audit completeness\r\n   * Calculates audit trail completeness\r\n   * \r\n   * @returns Promise<number> Audit completeness percentage\r\n   */\r\n  private async calculateAuditCompleteness(): Promise<number> {\r\n    // Implementation would check audit trail completeness\r\n    // For now, return a placeholder value\r\n    return 95;\r\n  }\r\n\r\n  /**\r\n   * Calculate data retention compliance\r\n   * Calculates data retention compliance\r\n   * \r\n   * @returns number Data retention compliance percentage\r\n   */\r\n  private calculateDataRetentionCompliance(): number {\r\n    // Implementation would check data retention policies\r\n    // For now, return a placeholder value\r\n    return 98;\r\n  }\r\n\r\n  /**\r\n   * Calculate access control compliance\r\n   * Calculates access control compliance\r\n   * \r\n   * @returns number Access control compliance percentage\r\n   */\r\n  private calculateAccessControlCompliance(): number {\r\n    // Implementation would check access control policies\r\n    // For now, return a placeholder value\r\n    return 92;\r\n  }\r\n\r\n  /**\r\n   * Calculate encryption compliance\r\n   * Calculates encryption compliance\r\n   * \r\n   * @returns number Encryption compliance percentage\r\n   */\r\n  private calculateEncryptionCompliance(): number {\r\n    // Implementation would check encryption usage\r\n    // For now, return a placeholder value\r\n    return 100;\r\n  }\r\n\r\n  /**\r\n   * Calculate incident response compliance\r\n   * Calculates incident response compliance\r\n   * \r\n   * @returns number Incident response compliance percentage\r\n   */\r\n  private calculateIncidentResponseCompliance(): number {\r\n    // Implementation would check incident response procedures\r\n    // For now, return a placeholder value\r\n    return 88;\r\n  }\r\n\r\n  /**\r\n   * Identify compliance violations\r\n   * Identifies compliance violations\r\n   * \r\n   * @returns Promise<Array> Compliance violations\r\n   */\r\n  private async identifyComplianceViolations(): Promise<Array<{\r\n    type: string;\r\n    severity: 'low' | 'medium' | 'high';\r\n    description: string;\r\n    timestamp: Date;\r\n  }>> {\r\n    // Implementation would identify actual violations\r\n    // For now, return empty array\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * Get severity range\r\n   * Maps numeric severity to range\r\n   * \r\n   * @param severity - Numeric severity\r\n   * @returns string Severity range\r\n   */\r\n  private getSeverityRange(severity: number): string {\r\n    if (severity >= 9) return 'Critical (9-10)';\r\n    if (severity >= 7) return 'High (7-8)';\r\n    if (severity >= 5) return 'Medium (5-6)';\r\n    if (severity >= 3) return 'Low (3-4)';\r\n    return 'Minimal (1-2)';\r\n  }\r\n\r\n  /**\r\n   * Get total data points\r\n   * Returns total number of data points across all KPIs\r\n   * \r\n   * @returns number Total data points\r\n   */\r\n  private getTotalDataPoints(): number {\r\n    let total = 0;\r\n    for (const [, history] of this.kpiHistory) {\r\n      total += history.length;\r\n    }\r\n    return total;\r\n  }\r\n\r\n  /**\r\n   * Clean up old data\r\n   * Removes old data points beyond retention period\r\n   */\r\n  private cleanupOldData(): void {\r\n    const cutoffDate = new Date(Date.now() - (this.config.retentionPeriod * 24 * 60 * 60 * 1000));\r\n    \r\n    for (const [kpiName, history] of this.kpiHistory) {\r\n      const filteredHistory = history.filter(point => point.timestamp >= cutoffDate);\r\n      this.kpiHistory.set(kpiName, filteredHistory);\r\n    }\r\n    \r\n    // Clean up security events\r\n    this.securityEvents = this.securityEvents.filter(\r\n      event => event.timestamp >= cutoffDate\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get service status\r\n   * Returns current service status\r\n   * \r\n   * @returns Service status information\r\n   */\r\n  public getStatus(): {\r\n    isCollecting: boolean;\r\n    totalKPIs: number;\r\n    totalDataPoints: number;\r\n    uptime: number;\r\n    timestamp: number;\r\n  } {\r\n    return {\r\n      isCollecting: this.collectionInterval !== null,\r\n      totalKPIs: this.kpiHistory.size,\r\n      totalDataPoints: this.getTotalDataPoints(),\r\n      uptime: Date.now() - this.serviceStartTime.getTime(),\r\n      timestamp: Date.now()\r\n    };\r\n  }\r\n}\r\n\r\n// Create and export singleton instance\r\nexport const securityMetricsService = new SecurityMetricsService();\r\n\r\n// =============================================================================\r\n// SECURITY METRICS NOTES\r\n// =============================================================================\r\n// 1. Comprehensive KPI tracking for all security aspects\r\n// 2. Real-time metrics collection and analysis\r\n// 3. Trend analysis and forecasting capabilities\r\n// 4. Automated alerting on threshold violations\r\n// 5. Compliance metrics and violation tracking\r\n// 6. Performance reporting and recommendations\r\n// 7. Historical data retention and cleanup\r\n// 8. Integration with security monitoring and audit services\r\n// =============================================================================\r\n"],"mappings":"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","ignoreList":[]}