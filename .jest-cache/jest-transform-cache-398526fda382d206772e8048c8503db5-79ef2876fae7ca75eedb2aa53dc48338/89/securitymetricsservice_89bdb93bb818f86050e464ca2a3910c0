56df786cbbb4d39fa2af7d112142594e
"use strict";

/**
 * =============================================================================
 * AI CRYPTO TRADING AGENT - SECURITY METRICS AND KPI TRACKING SERVICE
 * =============================================================================
 *
 * This service provides comprehensive security metrics collection, analysis,
 * and KPI tracking for the AI crypto trading agent. It monitors security
 * performance, threat trends, and system health indicators.
 *
 * CRITICAL SECURITY NOTICE:
 * This service provides essential metrics for security decision-making.
 * Accurate metrics are crucial for identifying security trends, measuring
 * security effectiveness, and making informed security investments.
 *
 * Metrics Capabilities:
 * - Real-time security KPI tracking
 * - Threat trend analysis and forecasting
 * - Security performance measurement
 * - Compliance metrics and reporting
 * - Historical data analysis
 * - Automated alerting on metric thresholds
 *
 * @author AI Crypto Trading System
 * @version 1.0.0
 * @license PROPRIETARY
 * =============================================================================
 */
/* istanbul ignore next */
function cov_2frqskxxpc() {
  var path = "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\security-metrics-service.ts";
  var hash = "25ddbe77721d92dae3b5d27597cf511076051432";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\security-metrics-service.ts",
    statementMap: {
      "0": {
        start: {
          line: 29,
          column: 0
        },
        end: {
          line: 29,
          column: 62
        }
      },
      "1": {
        start: {
          line: 30,
          column: 0
        },
        end: {
          line: 30,
          column: 73
        }
      },
      "2": {
        start: {
          line: 31,
          column: 17
        },
        end: {
          line: 31,
          column: 34
        }
      },
      "3": {
        start: {
          line: 32,
          column: 17
        },
        end: {
          line: 32,
          column: 49
        }
      },
      "4": {
        start: {
          line: 33,
          column: 24
        },
        end: {
          line: 33,
          column: 59
        }
      },
      "5": {
        start: {
          line: 42,
          column: 17
        },
        end: {
          line: 42,
          column: 26
        }
      },
      "6": {
        start: {
          line: 44,
          column: 18
        },
        end: {
          line: 44,
          column: 27
        }
      },
      "7": {
        start: {
          line: 46,
          column: 25
        },
        end: {
          line: 46,
          column: 29
        }
      },
      "8": {
        start: {
          line: 48,
          column: 23
        },
        end: {
          line: 48,
          column: 33
        }
      },
      "9": {
        start: {
          line: 50,
          column: 21
        },
        end: {
          line: 50,
          column: 23
        }
      },
      "10": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 52,
          column: 16
        }
      },
      "11": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 65,
          column: 10
        }
      },
      "12": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 67,
          column: 52
        }
      },
      "13": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 69,
          column: 37
        }
      },
      "14": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 70,
          column: 72
        }
      },
      "15": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 111,
          column: 9
        }
      },
      "16": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 80,
          column: 79
        }
      },
      "17": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 89,
          column: 47
        }
      },
      "18": {
        start: {
          line: 83,
          column: 16
        },
        end: {
          line: 88,
          column: 17
        }
      },
      "19": {
        start: {
          line: 84,
          column: 20
        },
        end: {
          line: 84,
          column: 56
        }
      },
      "20": {
        start: {
          line: 87,
          column: 20
        },
        end: {
          line: 87,
          column: 80
        }
      },
      "21": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 48
        }
      },
      "22": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 105,
          column: 15
        }
      },
      "23": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 106,
          column: 87
        }
      },
      "24": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 109,
          column: 82
        }
      },
      "25": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 110,
          column: 74
        }
      },
      "26": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 146,
          column: 9
        }
      },
      "27": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 121,
          column: 79
        }
      },
      "28": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 126,
          column: 13
        }
      },
      "29": {
        start: {
          line: 124,
          column: 16
        },
        end: {
          line: 124,
          column: 55
        }
      },
      "30": {
        start: {
          line: 125,
          column: 16
        },
        end: {
          line: 125,
          column: 47
        }
      },
      "31": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 140,
          column: 15
        }
      },
      "32": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 141,
          column: 87
        }
      },
      "33": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 144,
          column: 81
        }
      },
      "34": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 145,
          column: 75
        }
      },
      "35": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 168,
          column: 9
        }
      },
      "36": {
        start: {
          line: 158,
          column: 12
        },
        end: {
          line: 158,
          column: 44
        }
      },
      "37": {
        start: {
          line: 160,
          column: 12
        },
        end: {
          line: 162,
          column: 13
        }
      },
      "38": {
        start: {
          line: 161,
          column: 16
        },
        end: {
          line: 161,
          column: 44
        }
      },
      "39": {
        start: {
          line: 164,
          column: 12
        },
        end: {
          line: 164,
          column: 52
        }
      },
      "40": {
        start: {
          line: 167,
          column: 12
        },
        end: {
          line: 167,
          column: 79
        }
      },
      "41": {
        start: {
          line: 177,
          column: 20
        },
        end: {
          line: 177,
          column: 30
        }
      },
      "42": {
        start: {
          line: 178,
          column: 27
        },
        end: {
          line: 178,
          column: 67
        }
      },
      "43": {
        start: {
          line: 180,
          column: 29
        },
        end: {
          line: 180,
          column: 95
        }
      },
      "44": {
        start: {
          line: 180,
          column: 65
        },
        end: {
          line: 180,
          column: 94
        }
      },
      "45": {
        start: {
          line: 182,
          column: 28
        },
        end: {
          line: 182,
          column: 47
        }
      },
      "46": {
        start: {
          line: 183,
          column: 29
        },
        end: {
          line: 183,
          column: 96
        }
      },
      "47": {
        start: {
          line: 183,
          column: 58
        },
        end: {
          line: 183,
          column: 95
        }
      },
      "48": {
        start: {
          line: 185,
          column: 33
        },
        end: {
          line: 185,
          column: 35
        }
      },
      "49": {
        start: {
          line: 186,
          column: 8
        },
        end: {
          line: 188,
          column: 11
        }
      },
      "50": {
        start: {
          line: 187,
          column: 12
        },
        end: {
          line: 187,
          column: 91
        }
      },
      "51": {
        start: {
          line: 190,
          column: 29
        },
        end: {
          line: 190,
          column: 31
        }
      },
      "52": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 193,
          column: 11
        }
      },
      "53": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 192,
          column: 85
        }
      },
      "54": {
        start: {
          line: 195,
          column: 36
        },
        end: {
          line: 195,
          column: 99
        }
      },
      "55": {
        start: {
          line: 196,
          column: 34
        },
        end: {
          line: 196,
          column: 79
        }
      },
      "56": {
        start: {
          line: 197,
          column: 36
        },
        end: {
          line: 197,
          column: 83
        }
      },
      "57": {
        start: {
          line: 198,
          column: 30
        },
        end: {
          line: 198,
          column: 71
        }
      },
      "58": {
        start: {
          line: 199,
          column: 33
        },
        end: {
          line: 199,
          column: 55
        }
      },
      "59": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 210,
          column: 10
        }
      },
      "60": {
        start: {
          line: 221,
          column: 8
        },
        end: {
          line: 251,
          column: 9
        }
      },
      "61": {
        start: {
          line: 222,
          column: 32
        },
        end: {
          line: 222,
          column: 85
        }
      },
      "62": {
        start: {
          line: 223,
          column: 31
        },
        end: {
          line: 223,
          column: 71
        }
      },
      "63": {
        start: {
          line: 224,
          column: 12
        },
        end: {
          line: 234,
          column: 13
        }
      },
      "64": {
        start: {
          line: 225,
          column: 16
        },
        end: {
          line: 233,
          column: 18
        }
      },
      "65": {
        start: {
          line: 236,
          column: 26
        },
        end: {
          line: 236,
          column: 57
        }
      },
      "66": {
        start: {
          line: 237,
          column: 29
        },
        end: {
          line: 237,
          column: 65
        }
      },
      "67": {
        start: {
          line: 238,
          column: 12
        },
        end: {
          line: 246,
          column: 14
        }
      },
      "68": {
        start: {
          line: 249,
          column: 12
        },
        end: {
          line: 249,
          column: 80
        }
      },
      "69": {
        start: {
          line: 250,
          column: 12
        },
        end: {
          line: 250,
          column: 62
        }
      },
      "70": {
        start: {
          line: 262,
          column: 8
        },
        end: {
          line: 286,
          column: 9
        }
      },
      "71": {
        start: {
          line: 263,
          column: 33
        },
        end: {
          line: 263,
          column: 128
        }
      },
      "72": {
        start: {
          line: 263,
          column: 69
        },
        end: {
          line: 263,
          column: 127
        }
      },
      "73": {
        start: {
          line: 265,
          column: 33
        },
        end: {
          line: 265,
          column: 85
        }
      },
      "74": {
        start: {
          line: 267,
          column: 35
        },
        end: {
          line: 267,
          column: 71
        }
      },
      "75": {
        start: {
          line: 269,
          column: 38
        },
        end: {
          line: 269,
          column: 83
        }
      },
      "76": {
        start: {
          line: 271,
          column: 36
        },
        end: {
          line: 271,
          column: 94
        }
      },
      "77": {
        start: {
          line: 273,
          column: 33
        },
        end: {
          line: 273,
          column: 81
        }
      },
      "78": {
        start: {
          line: 274,
          column: 12
        },
        end: {
          line: 281,
          column: 14
        }
      },
      "79": {
        start: {
          line: 284,
          column: 12
        },
        end: {
          line: 284,
          column: 85
        }
      },
      "80": {
        start: {
          line: 285,
          column: 12
        },
        end: {
          line: 285,
          column: 77
        }
      },
      "81": {
        start: {
          line: 295,
          column: 8
        },
        end: {
          line: 323,
          column: 9
        }
      },
      "82": {
        start: {
          line: 297,
          column: 38
        },
        end: {
          line: 297,
          column: 77
        }
      },
      "83": {
        start: {
          line: 298,
          column: 44
        },
        end: {
          line: 298,
          column: 83
        }
      },
      "84": {
        start: {
          line: 299,
          column: 44
        },
        end: {
          line: 299,
          column: 83
        }
      },
      "85": {
        start: {
          line: 300,
          column: 41
        },
        end: {
          line: 300,
          column: 77
        }
      },
      "86": {
        start: {
          line: 301,
          column: 47
        },
        end: {
          line: 301,
          column: 89
        }
      },
      "87": {
        start: {
          line: 303,
          column: 38
        },
        end: {
          line: 307,
          column: 47
        }
      },
      "88": {
        start: {
          line: 309,
          column: 31
        },
        end: {
          line: 309,
          column: 72
        }
      },
      "89": {
        start: {
          line: 310,
          column: 12
        },
        end: {
          line: 318,
          column: 14
        }
      },
      "90": {
        start: {
          line: 321,
          column: 12
        },
        end: {
          line: 321,
          column: 80
        }
      },
      "91": {
        start: {
          line: 322,
          column: 12
        },
        end: {
          line: 322,
          column: 69
        }
      },
      "92": {
        start: {
          line: 331,
          column: 25
        },
        end: {
          line: 340,
          column: 9
        }
      },
      "93": {
        start: {
          line: 341,
          column: 8
        },
        end: {
          line: 343,
          column: 11
        }
      },
      "94": {
        start: {
          line: 342,
          column: 12
        },
        end: {
          line: 342,
          column: 45
        }
      },
      "95": {
        start: {
          line: 352,
          column: 8
        },
        end: {
          line: 410,
          column: 9
        }
      },
      "96": {
        start: {
          line: 353,
          column: 24
        },
        end: {
          line: 353,
          column: 34
        }
      },
      "97": {
        start: {
          line: 354,
          column: 28
        },
        end: {
          line: 354,
          column: 60
        }
      },
      "98": {
        start: {
          line: 356,
          column: 34
        },
        end: {
          line: 397,
          column: 13
        }
      },
      "99": {
        start: {
          line: 399,
          column: 12
        },
        end: {
          line: 404,
          column: 13
        }
      },
      "100": {
        start: {
          line: 400,
          column: 16
        },
        end: {
          line: 400,
          column: 50
        }
      },
      "101": {
        start: {
          line: 401,
          column: 16
        },
        end: {
          line: 401,
          column: 67
        }
      },
      "102": {
        start: {
          line: 403,
          column: 16
        },
        end: {
          line: 403,
          column: 57
        }
      },
      "103": {
        start: {
          line: 406,
          column: 12
        },
        end: {
          line: 406,
          column: 34
        }
      },
      "104": {
        start: {
          line: 409,
          column: 12
        },
        end: {
          line: 409,
          column: 82
        }
      },
      "105": {
        start: {
          line: 421,
          column: 31
        },
        end: {
          line: 428,
          column: 9
        }
      },
      "106": {
        start: {
          line: 429,
          column: 8
        },
        end: {
          line: 429,
          column: 47
        }
      },
      "107": {
        start: {
          line: 430,
          column: 8
        },
        end: {
          line: 430,
          column: 61
        }
      },
      "108": {
        start: {
          line: 432,
          column: 8
        },
        end: {
          line: 443,
          column: 9
        }
      },
      "109": {
        start: {
          line: 433,
          column: 37
        },
        end: {
          line: 440,
          column: 13
        }
      },
      "110": {
        start: {
          line: 436,
          column: 55
        },
        end: {
          line: 436,
          column: 70
        }
      },
      "111": {
        start: {
          line: 441,
          column: 12
        },
        end: {
          line: 441,
          column: 53
        }
      },
      "112": {
        start: {
          line: 442,
          column: 12
        },
        end: {
          line: 442,
          column: 69
        }
      },
      "113": {
        start: {
          line: 452,
          column: 24
        },
        end: {
          line: 452,
          column: 68
        }
      },
      "114": {
        start: {
          line: 453,
          column: 8
        },
        end: {
          line: 453,
          column: 32
        }
      },
      "115": {
        start: {
          line: 455,
          column: 8
        },
        end: {
          line: 457,
          column: 9
        }
      },
      "116": {
        start: {
          line: 456,
          column: 12
        },
        end: {
          line: 456,
          column: 28
        }
      },
      "117": {
        start: {
          line: 458,
          column: 8
        },
        end: {
          line: 458,
          column: 56
        }
      },
      "118": {
        start: {
          line: 469,
          column: 24
        },
        end: {
          line: 469,
          column: 58
        }
      },
      "119": {
        start: {
          line: 470,
          column: 8
        },
        end: {
          line: 470,
          column: 69
        }
      },
      "120": {
        start: {
          line: 470,
          column: 39
        },
        end: {
          line: 470,
          column: 67
        }
      },
      "121": {
        start: {
          line: 480,
          column: 27
        },
        end: {
          line: 480,
          column: 54
        }
      },
      "122": {
        start: {
          line: 481,
          column: 29
        },
        end: {
          line: 481,
          column: 34
        }
      },
      "123": {
        start: {
          line: 482,
          column: 27
        },
        end: {
          line: 482,
          column: 29
        }
      },
      "124": {
        start: {
          line: 483,
          column: 8
        },
        end: {
          line: 514,
          column: 9
        }
      },
      "125": {
        start: {
          line: 485,
          column: 16
        },
        end: {
          line: 488,
          column: 17
        }
      },
      "126": {
        start: {
          line: 486,
          column: 20
        },
        end: {
          line: 486,
          column: 42
        }
      },
      "127": {
        start: {
          line: 487,
          column: 20
        },
        end: {
          line: 487,
          column: 122
        }
      },
      "128": {
        start: {
          line: 489,
          column: 16
        },
        end: {
          line: 489,
          column: 22
        }
      },
      "129": {
        start: {
          line: 491,
          column: 16
        },
        end: {
          line: 494,
          column: 17
        }
      },
      "130": {
        start: {
          line: 492,
          column: 20
        },
        end: {
          line: 492,
          column: 42
        }
      },
      "131": {
        start: {
          line: 493,
          column: 20
        },
        end: {
          line: 493,
          column: 137
        }
      },
      "132": {
        start: {
          line: 495,
          column: 16
        },
        end: {
          line: 495,
          column: 22
        }
      },
      "133": {
        start: {
          line: 497,
          column: 16
        },
        end: {
          line: 500,
          column: 17
        }
      },
      "134": {
        start: {
          line: 498,
          column: 20
        },
        end: {
          line: 498,
          column: 42
        }
      },
      "135": {
        start: {
          line: 499,
          column: 20
        },
        end: {
          line: 499,
          column: 133
        }
      },
      "136": {
        start: {
          line: 501,
          column: 16
        },
        end: {
          line: 501,
          column: 22
        }
      },
      "137": {
        start: {
          line: 503,
          column: 16
        },
        end: {
          line: 506,
          column: 17
        }
      },
      "138": {
        start: {
          line: 504,
          column: 20
        },
        end: {
          line: 504,
          column: 42
        }
      },
      "139": {
        start: {
          line: 505,
          column: 20
        },
        end: {
          line: 505,
          column: 130
        }
      },
      "140": {
        start: {
          line: 507,
          column: 16
        },
        end: {
          line: 507,
          column: 22
        }
      },
      "141": {
        start: {
          line: 509,
          column: 16
        },
        end: {
          line: 512,
          column: 17
        }
      },
      "142": {
        start: {
          line: 510,
          column: 20
        },
        end: {
          line: 510,
          column: 42
        }
      },
      "143": {
        start: {
          line: 511,
          column: 20
        },
        end: {
          line: 511,
          column: 116
        }
      },
      "144": {
        start: {
          line: 513,
          column: 16
        },
        end: {
          line: 513,
          column: 22
        }
      },
      "145": {
        start: {
          line: 515,
          column: 8
        },
        end: {
          line: 527,
          column: 9
        }
      },
      "146": {
        start: {
          line: 516,
          column: 12
        },
        end: {
          line: 520,
          column: 15
        }
      },
      "147": {
        start: {
          line: 521,
          column: 12
        },
        end: {
          line: 526,
          column: 15
        }
      },
      "148": {
        start: {
          line: 537,
          column: 31
        },
        end: {
          line: 537,
          column: 82
        }
      },
      "149": {
        start: {
          line: 537,
          column: 54
        },
        end: {
          line: 537,
          column: 81
        }
      },
      "150": {
        start: {
          line: 538,
          column: 31
        },
        end: {
          line: 538,
          column: 119
        }
      },
      "151": {
        start: {
          line: 538,
          column: 62
        },
        end: {
          line: 538,
          column: 118
        }
      },
      "152": {
        start: {
          line: 539,
          column: 8
        },
        end: {
          line: 539,
          column: 101
        }
      },
      "153": {
        start: {
          line: 549,
          column: 32
        },
        end: {
          line: 549,
          column: 115
        }
      },
      "154": {
        start: {
          line: 549,
          column: 55
        },
        end: {
          line: 549,
          column: 114
        }
      },
      "155": {
        start: {
          line: 550,
          column: 8
        },
        end: {
          line: 551,
          column: 21
        }
      },
      "156": {
        start: {
          line: 551,
          column: 12
        },
        end: {
          line: 551,
          column: 21
        }
      },
      "157": {
        start: {
          line: 552,
          column: 34
        },
        end: {
          line: 556,
          column: 13
        }
      },
      "158": {
        start: {
          line: 555,
          column: 12
        },
        end: {
          line: 555,
          column: 49
        }
      },
      "159": {
        start: {
          line: 557,
          column: 8
        },
        end: {
          line: 557,
          column: 58
        }
      },
      "160": {
        start: {
          line: 567,
          column: 8
        },
        end: {
          line: 568,
          column: 23
        }
      },
      "161": {
        start: {
          line: 568,
          column: 12
        },
        end: {
          line: 568,
          column: 23
        }
      },
      "162": {
        start: {
          line: 569,
          column: 28
        },
        end: {
          line: 569,
          column: 82
        }
      },
      "163": {
        start: {
          line: 569,
          column: 58
        },
        end: {
          line: 569,
          column: 78
        }
      },
      "164": {
        start: {
          line: 570,
          column: 32
        },
        end: {
          line: 570,
          column: 59
        }
      },
      "165": {
        start: {
          line: 572,
          column: 8
        },
        end: {
          line: 572,
          column: 57
        }
      },
      "166": {
        start: {
          line: 581,
          column: 26
        },
        end: {
          line: 581,
          column: 70
        }
      },
      "167": {
        start: {
          line: 584,
          column: 8
        },
        end: {
          line: 584,
          column: 20
        }
      },
      "168": {
        start: {
          line: 594,
          column: 8
        },
        end: {
          line: 596,
          column: 9
        }
      },
      "169": {
        start: {
          line: 595,
          column: 12
        },
        end: {
          line: 595,
          column: 71
        }
      },
      "170": {
        start: {
          line: 598,
          column: 18
        },
        end: {
          line: 598,
          column: 35
        }
      },
      "171": {
        start: {
          line: 599,
          column: 21
        },
        end: {
          line: 599,
          column: 65
        }
      },
      "172": {
        start: {
          line: 599,
          column: 54
        },
        end: {
          line: 599,
          column: 61
        }
      },
      "173": {
        start: {
          line: 600,
          column: 21
        },
        end: {
          line: 600,
          column: 76
        }
      },
      "174": {
        start: {
          line: 600,
          column: 55
        },
        end: {
          line: 600,
          column: 72
        }
      },
      "175": {
        start: {
          line: 601,
          column: 22
        },
        end: {
          line: 601,
          column: 86
        }
      },
      "176": {
        start: {
          line: 601,
          column: 59
        },
        end: {
          line: 601,
          column: 82
        }
      },
      "177": {
        start: {
          line: 602,
          column: 22
        },
        end: {
          line: 602,
          column: 72
        }
      },
      "178": {
        start: {
          line: 602,
          column: 55
        },
        end: {
          line: 602,
          column: 68
        }
      },
      "179": {
        start: {
          line: 603,
          column: 22
        },
        end: {
          line: 603,
          column: 75
        }
      },
      "180": {
        start: {
          line: 604,
          column: 25
        },
        end: {
          line: 604,
          column: 53
        }
      },
      "181": {
        start: {
          line: 605,
          column: 27
        },
        end: {
          line: 605,
          column: 46
        }
      },
      "182": {
        start: {
          line: 606,
          column: 24
        },
        end: {
          line: 606,
          column: 32
        }
      },
      "183": {
        start: {
          line: 607,
          column: 8
        },
        end: {
          line: 609,
          column: 9
        }
      },
      "184": {
        start: {
          line: 608,
          column: 12
        },
        end: {
          line: 608,
          column: 62
        }
      },
      "185": {
        start: {
          line: 610,
          column: 8
        },
        end: {
          line: 610,
          column: 51
        }
      },
      "186": {
        start: {
          line: 621,
          column: 25
        },
        end: {
          line: 621,
          column: 27
        }
      },
      "187": {
        start: {
          line: 622,
          column: 8
        },
        end: {
          line: 623,
          column: 28
        }
      },
      "188": {
        start: {
          line: 623,
          column: 12
        },
        end: {
          line: 623,
          column: 28
        }
      },
      "189": {
        start: {
          line: 625,
          column: 27
        },
        end: {
          line: 625,
          column: 57
        }
      },
      "190": {
        start: {
          line: 626,
          column: 29
        },
        end: {
          line: 626,
          column: 76
        }
      },
      "191": {
        start: {
          line: 626,
          column: 68
        },
        end: {
          line: 626,
          column: 75
        }
      },
      "192": {
        start: {
          line: 627,
          column: 29
        },
        end: {
          line: 627,
          column: 98
        }
      },
      "193": {
        start: {
          line: 627,
          column: 63
        },
        end: {
          line: 627,
          column: 72
        }
      },
      "194": {
        start: {
          line: 628,
          column: 30
        },
        end: {
          line: 628,
          column: 73
        }
      },
      "195": {
        start: {
          line: 629,
          column: 27
        },
        end: {
          line: 632,
          column: 17
        }
      },
      "196": {
        start: {
          line: 633,
          column: 8
        },
        end: {
          line: 641,
          column: 9
        }
      },
      "197": {
        start: {
          line: 633,
          column: 21
        },
        end: {
          line: 633,
          column: 22
        }
      },
      "198": {
        start: {
          line: 634,
          column: 38
        },
        end: {
          line: 634,
          column: 90
        }
      },
      "199": {
        start: {
          line: 635,
          column: 31
        },
        end: {
          line: 635,
          column: 59
        }
      },
      "200": {
        start: {
          line: 636,
          column: 12
        },
        end: {
          line: 640,
          column: 15
        }
      },
      "201": {
        start: {
          line: 642,
          column: 8
        },
        end: {
          line: 642,
          column: 24
        }
      },
      "202": {
        start: {
          line: 653,
          column: 24
        },
        end: {
          line: 653,
          column: 63
        }
      },
      "203": {
        start: {
          line: 654,
          column: 29
        },
        end: {
          line: 654,
          column: 74
        }
      },
      "204": {
        start: {
          line: 655,
          column: 30
        },
        end: {
          line: 655,
          column: 55
        }
      },
      "205": {
        start: {
          line: 656,
          column: 23
        },
        end: {
          line: 656,
          column: 77
        }
      },
      "206": {
        start: {
          line: 657,
          column: 8
        },
        end: {
          line: 659,
          column: 87
        }
      },
      "207": {
        start: {
          line: 670,
          column: 26
        },
        end: {
          line: 670,
          column: 28
        }
      },
      "208": {
        start: {
          line: 671,
          column: 8
        },
        end: {
          line: 705,
          column: 9
        }
      },
      "209": {
        start: {
          line: 672,
          column: 31
        },
        end: {
          line: 673,
          column: 60
        }
      },
      "210": {
        start: {
          line: 673,
          column: 33
        },
        end: {
          line: 673,
          column: 59
        }
      },
      "211": {
        start: {
          line: 674,
          column: 12
        },
        end: {
          line: 675,
          column: 25
        }
      },
      "212": {
        start: {
          line: 675,
          column: 16
        },
        end: {
          line: 675,
          column: 25
        }
      },
      "213": {
        start: {
          line: 676,
          column: 27
        },
        end: {
          line: 676,
          column: 63
        }
      },
      "214": {
        start: {
          line: 676,
          column: 51
        },
        end: {
          line: 676,
          column: 62
        }
      },
      "215": {
        start: {
          line: 677,
          column: 28
        },
        end: {
          line: 677,
          column: 53
        }
      },
      "216": {
        start: {
          line: 678,
          column: 28
        },
        end: {
          line: 678,
          column: 85
        }
      },
      "217": {
        start: {
          line: 678,
          column: 56
        },
        end: {
          line: 678,
          column: 65
        }
      },
      "218": {
        start: {
          line: 679,
          column: 24
        },
        end: {
          line: 679,
          column: 43
        }
      },
      "219": {
        start: {
          line: 680,
          column: 24
        },
        end: {
          line: 680,
          column: 43
        }
      },
      "220": {
        start: {
          line: 682,
          column: 30
        },
        end: {
          line: 682,
          column: 76
        }
      },
      "221": {
        start: {
          line: 683,
          column: 31
        },
        end: {
          line: 683,
          column: 74
        }
      },
      "222": {
        start: {
          line: 684,
          column: 29
        },
        end: {
          line: 684,
          column: 92
        }
      },
      "223": {
        start: {
          line: 684,
          column: 60
        },
        end: {
          line: 684,
          column: 69
        }
      },
      "224": {
        start: {
          line: 685,
          column: 30
        },
        end: {
          line: 685,
          column: 95
        }
      },
      "225": {
        start: {
          line: 685,
          column: 62
        },
        end: {
          line: 685,
          column: 71
        }
      },
      "226": {
        start: {
          line: 686,
          column: 24
        },
        end: {
          line: 686,
          column: 32
        }
      },
      "227": {
        start: {
          line: 687,
          column: 12
        },
        end: {
          line: 689,
          column: 13
        }
      },
      "228": {
        start: {
          line: 688,
          column: 16
        },
        end: {
          line: 688,
          column: 61
        }
      },
      "229": {
        start: {
          line: 691,
          column: 25
        },
        end: {
          line: 691,
          column: 31
        }
      },
      "230": {
        start: {
          line: 692,
          column: 12
        },
        end: {
          line: 693,
          column: 35
        }
      },
      "231": {
        start: {
          line: 693,
          column: 16
        },
        end: {
          line: 693,
          column: 35
        }
      },
      "232": {
        start: {
          line: 694,
          column: 12
        },
        end: {
          line: 695,
          column: 36
        }
      },
      "233": {
        start: {
          line: 695,
          column: 16
        },
        end: {
          line: 695,
          column: 36
        }
      },
      "234": {
        start: {
          line: 696,
          column: 12
        },
        end: {
          line: 704,
          column: 15
        }
      },
      "235": {
        start: {
          line: 706,
          column: 8
        },
        end: {
          line: 706,
          column: 25
        }
      },
      "236": {
        start: {
          line: 716,
          column: 29
        },
        end: {
          line: 716,
          column: 90
        }
      },
      "237": {
        start: {
          line: 716,
          column: 52
        },
        end: {
          line: 716,
          column: 89
        }
      },
      "238": {
        start: {
          line: 717,
          column: 30
        },
        end: {
          line: 717,
          column: 32
        }
      },
      "239": {
        start: {
          line: 718,
          column: 34
        },
        end: {
          line: 718,
          column: 36
        }
      },
      "240": {
        start: {
          line: 719,
          column: 28
        },
        end: {
          line: 719,
          column: 30
        }
      },
      "241": {
        start: {
          line: 720,
          column: 8
        },
        end: {
          line: 728,
          column: 11
        }
      },
      "242": {
        start: {
          line: 722,
          column: 12
        },
        end: {
          line: 722,
          column: 87
        }
      },
      "243": {
        start: {
          line: 724,
          column: 34
        },
        end: {
          line: 724,
          column: 71
        }
      },
      "244": {
        start: {
          line: 725,
          column: 12
        },
        end: {
          line: 725,
          column: 91
        }
      },
      "245": {
        start: {
          line: 727,
          column: 12
        },
        end: {
          line: 727,
          column: 77
        }
      },
      "246": {
        start: {
          line: 730,
          column: 27
        },
        end: {
          line: 733,
          column: 58
        }
      },
      "247": {
        start: {
          line: 731,
          column: 36
        },
        end: {
          line: 731,
          column: 41
        }
      },
      "248": {
        start: {
          line: 733,
          column: 39
        },
        end: {
          line: 733,
          column: 56
        }
      },
      "249": {
        start: {
          line: 734,
          column: 8
        },
        end: {
          line: 739,
          column: 10
        }
      },
      "250": {
        start: {
          line: 749,
          column: 8
        },
        end: {
          line: 754,
          column: 10
        }
      },
      "251": {
        start: {
          line: 752,
          column: 42
        },
        end: {
          line: 752,
          column: 65
        }
      },
      "252": {
        start: {
          line: 765,
          column: 32
        },
        end: {
          line: 765,
          column: 34
        }
      },
      "253": {
        start: {
          line: 767,
          column: 30
        },
        end: {
          line: 767,
          column: 85
        }
      },
      "254": {
        start: {
          line: 767,
          column: 55
        },
        end: {
          line: 767,
          column: 84
        }
      },
      "255": {
        start: {
          line: 768,
          column: 8
        },
        end: {
          line: 770,
          column: 9
        }
      },
      "256": {
        start: {
          line: 769,
          column: 12
        },
        end: {
          line: 769,
          column: 116
        }
      },
      "257": {
        start: {
          line: 772,
          column: 27
        },
        end: {
          line: 772,
          column: 89
        }
      },
      "258": {
        start: {
          line: 772,
          column: 52
        },
        end: {
          line: 772,
          column: 88
        }
      },
      "259": {
        start: {
          line: 773,
          column: 8
        },
        end: {
          line: 775,
          column: 9
        }
      },
      "260": {
        start: {
          line: 774,
          column: 12
        },
        end: {
          line: 774,
          column: 127
        }
      },
      "261": {
        start: {
          line: 777,
          column: 29
        },
        end: {
          line: 777,
          column: 91
        }
      },
      "262": {
        start: {
          line: 777,
          column: 54
        },
        end: {
          line: 777,
          column: 90
        }
      },
      "263": {
        start: {
          line: 778,
          column: 8
        },
        end: {
          line: 780,
          column: 9
        }
      },
      "264": {
        start: {
          line: 779,
          column: 12
        },
        end: {
          line: 779,
          column: 113
        }
      },
      "265": {
        start: {
          line: 782,
          column: 8
        },
        end: {
          line: 784,
          column: 9
        }
      },
      "266": {
        start: {
          line: 783,
          column: 12
        },
        end: {
          line: 783,
          column: 123
        }
      },
      "267": {
        start: {
          line: 785,
          column: 8
        },
        end: {
          line: 785,
          column: 31
        }
      },
      "268": {
        start: {
          line: 795,
          column: 30
        },
        end: {
          line: 795,
          column: 85
        }
      },
      "269": {
        start: {
          line: 795,
          column: 55
        },
        end: {
          line: 795,
          column: 84
        }
      },
      "270": {
        start: {
          line: 796,
          column: 8
        },
        end: {
          line: 796,
          column: 59
        }
      },
      "271": {
        start: {
          line: 807,
          column: 8
        },
        end: {
          line: 807,
          column: 18
        }
      },
      "272": {
        start: {
          line: 818,
          column: 8
        },
        end: {
          line: 818,
          column: 18
        }
      },
      "273": {
        start: {
          line: 829,
          column: 8
        },
        end: {
          line: 829,
          column: 18
        }
      },
      "274": {
        start: {
          line: 840,
          column: 8
        },
        end: {
          line: 840,
          column: 19
        }
      },
      "275": {
        start: {
          line: 851,
          column: 8
        },
        end: {
          line: 851,
          column: 18
        }
      },
      "276": {
        start: {
          line: 862,
          column: 8
        },
        end: {
          line: 862,
          column: 18
        }
      },
      "277": {
        start: {
          line: 872,
          column: 8
        },
        end: {
          line: 873,
          column: 37
        }
      },
      "278": {
        start: {
          line: 873,
          column: 12
        },
        end: {
          line: 873,
          column: 37
        }
      },
      "279": {
        start: {
          line: 874,
          column: 8
        },
        end: {
          line: 875,
          column: 32
        }
      },
      "280": {
        start: {
          line: 875,
          column: 12
        },
        end: {
          line: 875,
          column: 32
        }
      },
      "281": {
        start: {
          line: 876,
          column: 8
        },
        end: {
          line: 877,
          column: 34
        }
      },
      "282": {
        start: {
          line: 877,
          column: 12
        },
        end: {
          line: 877,
          column: 34
        }
      },
      "283": {
        start: {
          line: 878,
          column: 8
        },
        end: {
          line: 879,
          column: 31
        }
      },
      "284": {
        start: {
          line: 879,
          column: 12
        },
        end: {
          line: 879,
          column: 31
        }
      },
      "285": {
        start: {
          line: 880,
          column: 8
        },
        end: {
          line: 880,
          column: 31
        }
      },
      "286": {
        start: {
          line: 889,
          column: 20
        },
        end: {
          line: 889,
          column: 21
        }
      },
      "287": {
        start: {
          line: 890,
          column: 8
        },
        end: {
          line: 892,
          column: 9
        }
      },
      "288": {
        start: {
          line: 891,
          column: 12
        },
        end: {
          line: 891,
          column: 36
        }
      },
      "289": {
        start: {
          line: 893,
          column: 8
        },
        end: {
          line: 893,
          column: 21
        }
      },
      "290": {
        start: {
          line: 900,
          column: 27
        },
        end: {
          line: 900,
          column: 101
        }
      },
      "291": {
        start: {
          line: 901,
          column: 8
        },
        end: {
          line: 904,
          column: 9
        }
      },
      "292": {
        start: {
          line: 902,
          column: 36
        },
        end: {
          line: 902,
          column: 90
        }
      },
      "293": {
        start: {
          line: 902,
          column: 60
        },
        end: {
          line: 902,
          column: 89
        }
      },
      "294": {
        start: {
          line: 903,
          column: 12
        },
        end: {
          line: 903,
          column: 58
        }
      },
      "295": {
        start: {
          line: 906,
          column: 8
        },
        end: {
          line: 906,
          column: 97
        }
      },
      "296": {
        start: {
          line: 906,
          column: 66
        },
        end: {
          line: 906,
          column: 95
        }
      },
      "297": {
        start: {
          line: 915,
          column: 8
        },
        end: {
          line: 921,
          column: 10
        }
      },
      "298": {
        start: {
          line: 924,
          column: 0
        },
        end: {
          line: 924,
          column: 56
        }
      },
      "299": {
        start: {
          line: 926,
          column: 0
        },
        end: {
          line: 926,
          column: 62
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 51,
            column: 4
          },
          end: {
            line: 51,
            column: 5
          }
        },
        loc: {
          start: {
            line: 51,
            column: 24
          },
          end: {
            line: 71,
            column: 5
          }
        },
        line: 51
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 78,
            column: 4
          },
          end: {
            line: 78,
            column: 5
          }
        },
        loc: {
          start: {
            line: 78,
            column: 35
          },
          end: {
            line: 112,
            column: 5
          }
        },
        line: 78
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 82,
            column: 50
          },
          end: {
            line: 82,
            column: 51
          }
        },
        loc: {
          start: {
            line: 82,
            column: 62
          },
          end: {
            line: 89,
            column: 13
          }
        },
        line: 82
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 119,
            column: 4
          },
          end: {
            line: 119,
            column: 5
          }
        },
        loc: {
          start: {
            line: 119,
            column: 34
          },
          end: {
            line: 147,
            column: 5
          }
        },
        line: 119
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 155,
            column: 4
          },
          end: {
            line: 155,
            column: 5
          }
        },
        loc: {
          start: {
            line: 155,
            column: 37
          },
          end: {
            line: 169,
            column: 5
          }
        },
        line: 155
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 176,
            column: 4
          },
          end: {
            line: 176,
            column: 5
          }
        },
        loc: {
          start: {
            line: 176,
            column: 32
          },
          end: {
            line: 211,
            column: 5
          }
        },
        line: 176
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 180,
            column: 56
          },
          end: {
            line: 180,
            column: 57
          }
        },
        loc: {
          start: {
            line: 180,
            column: 65
          },
          end: {
            line: 180,
            column: 94
          }
        },
        line: 180
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 183,
            column: 49
          },
          end: {
            line: 183,
            column: 50
          }
        },
        loc: {
          start: {
            line: 183,
            column: 58
          },
          end: {
            line: 183,
            column: 95
          }
        },
        line: 183
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 186,
            column: 29
          },
          end: {
            line: 186,
            column: 30
          }
        },
        loc: {
          start: {
            line: 186,
            column: 38
          },
          end: {
            line: 188,
            column: 9
          }
        },
        line: 186
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 191,
            column: 29
          },
          end: {
            line: 191,
            column: 30
          }
        },
        loc: {
          start: {
            line: 191,
            column: 38
          },
          end: {
            line: 193,
            column: 9
          }
        },
        line: 191
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 220,
            column: 4
          },
          end: {
            line: 220,
            column: 5
          }
        },
        loc: {
          start: {
            line: 220,
            column: 91
          },
          end: {
            line: 252,
            column: 5
          }
        },
        line: 220
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 261,
            column: 4
          },
          end: {
            line: 261,
            column: 5
          }
        },
        loc: {
          start: {
            line: 261,
            column: 64
          },
          end: {
            line: 287,
            column: 5
          }
        },
        line: 261
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 263,
            column: 60
          },
          end: {
            line: 263,
            column: 61
          }
        },
        loc: {
          start: {
            line: 263,
            column: 69
          },
          end: {
            line: 263,
            column: 127
          }
        },
        line: 263
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 294,
            column: 4
          },
          end: {
            line: 294,
            column: 5
          }
        },
        loc: {
          start: {
            line: 294,
            column: 33
          },
          end: {
            line: 324,
            column: 5
          }
        },
        line: 294
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 329,
            column: 4
          },
          end: {
            line: 329,
            column: 5
          }
        },
        loc: {
          start: {
            line: 329,
            column: 28
          },
          end: {
            line: 344,
            column: 5
          }
        },
        line: 329
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 341,
            column: 25
          },
          end: {
            line: 341,
            column: 26
          }
        },
        loc: {
          start: {
            line: 341,
            column: 36
          },
          end: {
            line: 343,
            column: 9
          }
        },
        line: 341
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 351,
            column: 4
          },
          end: {
            line: 351,
            column: 5
          }
        },
        loc: {
          start: {
            line: 351,
            column: 35
          },
          end: {
            line: 411,
            column: 5
          }
        },
        line: 351
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 419,
            column: 4
          },
          end: {
            line: 419,
            column: 5
          }
        },
        loc: {
          start: {
            line: 419,
            column: 39
          },
          end: {
            line: 444,
            column: 5
          }
        },
        line: 419
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 436,
            column: 50
          },
          end: {
            line: 436,
            column: 51
          }
        },
        loc: {
          start: {
            line: 436,
            column: 55
          },
          end: {
            line: 436,
            column: 70
          }
        },
        line: 436
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 451,
            column: 4
          },
          end: {
            line: 451,
            column: 5
          }
        },
        loc: {
          start: {
            line: 451,
            column: 33
          },
          end: {
            line: 459,
            column: 5
          }
        },
        line: 451
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 468,
            column: 4
          },
          end: {
            line: 468,
            column: 5
          }
        },
        loc: {
          start: {
            line: 468,
            column: 38
          },
          end: {
            line: 471,
            column: 5
          }
        },
        line: 468
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 470,
            column: 30
          },
          end: {
            line: 470,
            column: 31
          }
        },
        loc: {
          start: {
            line: 470,
            column: 39
          },
          end: {
            line: 470,
            column: 67
          }
        },
        line: 470
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 479,
            column: 4
          },
          end: {
            line: 479,
            column: 5
          }
        },
        loc: {
          start: {
            line: 479,
            column: 40
          },
          end: {
            line: 528,
            column: 5
          }
        },
        line: 479
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 536,
            column: 4
          },
          end: {
            line: 536,
            column: 5
          }
        },
        loc: {
          start: {
            line: 536,
            column: 39
          },
          end: {
            line: 540,
            column: 5
          }
        },
        line: 536
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 537,
            column: 45
          },
          end: {
            line: 537,
            column: 46
          }
        },
        loc: {
          start: {
            line: 537,
            column: 54
          },
          end: {
            line: 537,
            column: 81
          }
        },
        line: 537
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 538,
            column: 53
          },
          end: {
            line: 538,
            column: 54
          }
        },
        loc: {
          start: {
            line: 538,
            column: 62
          },
          end: {
            line: 538,
            column: 118
          }
        },
        line: 538
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 548,
            column: 4
          },
          end: {
            line: 548,
            column: 5
          }
        },
        loc: {
          start: {
            line: 548,
            column: 41
          },
          end: {
            line: 558,
            column: 5
          }
        },
        line: 548
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 549,
            column: 46
          },
          end: {
            line: 549,
            column: 47
          }
        },
        loc: {
          start: {
            line: 549,
            column: 55
          },
          end: {
            line: 549,
            column: 114
          }
        },
        line: 549
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 552,
            column: 57
          },
          end: {
            line: 552,
            column: 58
          }
        },
        loc: {
          start: {
            line: 552,
            column: 75
          },
          end: {
            line: 556,
            column: 9
          }
        },
        line: 552
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 566,
            column: 4
          },
          end: {
            line: 566,
            column: 5
          }
        },
        loc: {
          start: {
            line: 566,
            column: 35
          },
          end: {
            line: 573,
            column: 5
          }
        },
        line: 566
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 569,
            column: 42
          },
          end: {
            line: 569,
            column: 43
          }
        },
        loc: {
          start: {
            line: 569,
            column: 58
          },
          end: {
            line: 569,
            column: 78
          }
        },
        line: 569
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 580,
            column: 4
          },
          end: {
            line: 580,
            column: 5
          }
        },
        loc: {
          start: {
            line: 580,
            column: 22
          },
          end: {
            line: 585,
            column: 5
          }
        },
        line: 580
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 593,
            column: 4
          },
          end: {
            line: 593,
            column: 5
          }
        },
        loc: {
          start: {
            line: 593,
            column: 31
          },
          end: {
            line: 611,
            column: 5
          }
        },
        line: 593
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 599,
            column: 39
          },
          end: {
            line: 599,
            column: 40
          }
        },
        loc: {
          start: {
            line: 599,
            column: 54
          },
          end: {
            line: 599,
            column: 61
          }
        },
        line: 599
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 600,
            column: 39
          },
          end: {
            line: 600,
            column: 40
          }
        },
        loc: {
          start: {
            line: 600,
            column: 55
          },
          end: {
            line: 600,
            column: 72
          }
        },
        line: 600
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 601,
            column: 40
          },
          end: {
            line: 601,
            column: 41
          }
        },
        loc: {
          start: {
            line: 601,
            column: 59
          },
          end: {
            line: 601,
            column: 82
          }
        },
        line: 601
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 602,
            column: 40
          },
          end: {
            line: 602,
            column: 41
          }
        },
        loc: {
          start: {
            line: 602,
            column: 55
          },
          end: {
            line: 602,
            column: 68
          }
        },
        line: 602
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 620,
            column: 4
          },
          end: {
            line: 620,
            column: 5
          }
        },
        loc: {
          start: {
            line: 620,
            column: 42
          },
          end: {
            line: 643,
            column: 5
          }
        },
        line: 620
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 626,
            column: 63
          },
          end: {
            line: 626,
            column: 64
          }
        },
        loc: {
          start: {
            line: 626,
            column: 68
          },
          end: {
            line: 626,
            column: 75
          }
        },
        line: 626
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 627,
            column: 49
          },
          end: {
            line: 627,
            column: 50
          }
        },
        loc: {
          start: {
            line: 627,
            column: 63
          },
          end: {
            line: 627,
            column: 72
          }
        },
        line: 627
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 652,
            column: 4
          },
          end: {
            line: 652,
            column: 5
          }
        },
        loc: {
          start: {
            line: 652,
            column: 44
          },
          end: {
            line: 660,
            column: 5
          }
        },
        line: 652
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 669,
            column: 4
          },
          end: {
            line: 669,
            column: 5
          }
        },
        loc: {
          start: {
            line: 669,
            column: 52
          },
          end: {
            line: 707,
            column: 5
          }
        },
        line: 669
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 673,
            column: 24
          },
          end: {
            line: 673,
            column: 25
          }
        },
        loc: {
          start: {
            line: 673,
            column: 33
          },
          end: {
            line: 673,
            column: 59
          }
        },
        line: 673
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 676,
            column: 42
          },
          end: {
            line: 676,
            column: 43
          }
        },
        loc: {
          start: {
            line: 676,
            column: 51
          },
          end: {
            line: 676,
            column: 62
          }
        },
        line: 676
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 678,
            column: 42
          },
          end: {
            line: 678,
            column: 43
          }
        },
        loc: {
          start: {
            line: 678,
            column: 56
          },
          end: {
            line: 678,
            column: 65
          }
        },
        line: 678
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 684,
            column: 46
          },
          end: {
            line: 684,
            column: 47
          }
        },
        loc: {
          start: {
            line: 684,
            column: 60
          },
          end: {
            line: 684,
            column: 69
          }
        },
        line: 684
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 685,
            column: 48
          },
          end: {
            line: 685,
            column: 49
          }
        },
        loc: {
          start: {
            line: 685,
            column: 62
          },
          end: {
            line: 685,
            column: 71
          }
        },
        line: 685
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 715,
            column: 4
          },
          end: {
            line: 715,
            column: 5
          }
        },
        loc: {
          start: {
            line: 715,
            column: 30
          },
          end: {
            line: 740,
            column: 5
          }
        },
        line: 715
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 716,
            column: 43
          },
          end: {
            line: 716,
            column: 44
          }
        },
        loc: {
          start: {
            line: 716,
            column: 52
          },
          end: {
            line: 716,
            column: 89
          }
        },
        line: 716
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 720,
            column: 29
          },
          end: {
            line: 720,
            column: 30
          }
        },
        loc: {
          start: {
            line: 720,
            column: 38
          },
          end: {
            line: 728,
            column: 9
          }
        },
        line: 720
      },
      "50": {
        name: "(anonymous_50)",
        decl: {
          start: {
            line: 731,
            column: 18
          },
          end: {
            line: 731,
            column: 19
          }
        },
        loc: {
          start: {
            line: 731,
            column: 36
          },
          end: {
            line: 731,
            column: 41
          }
        },
        line: 731
      },
      "51": {
        name: "(anonymous_51)",
        decl: {
          start: {
            line: 733,
            column: 17
          },
          end: {
            line: 733,
            column: 18
          }
        },
        loc: {
          start: {
            line: 733,
            column: 39
          },
          end: {
            line: 733,
            column: 56
          }
        },
        line: 733
      },
      "52": {
        name: "(anonymous_52)",
        decl: {
          start: {
            line: 748,
            column: 4
          },
          end: {
            line: 748,
            column: 5
          }
        },
        loc: {
          start: {
            line: 748,
            column: 39
          },
          end: {
            line: 755,
            column: 5
          }
        },
        line: 748
      },
      "53": {
        name: "(anonymous_53)",
        decl: {
          start: {
            line: 752,
            column: 37
          },
          end: {
            line: 752,
            column: 38
          }
        },
        loc: {
          start: {
            line: 752,
            column: 42
          },
          end: {
            line: 752,
            column: 65
          }
        },
        line: 752
      },
      "54": {
        name: "(anonymous_54)",
        decl: {
          start: {
            line: 764,
            column: 4
          },
          end: {
            line: 764,
            column: 5
          }
        },
        loc: {
          start: {
            line: 764,
            column: 58
          },
          end: {
            line: 786,
            column: 5
          }
        },
        line: 764
      },
      "55": {
        name: "(anonymous_55)",
        decl: {
          start: {
            line: 767,
            column: 48
          },
          end: {
            line: 767,
            column: 49
          }
        },
        loc: {
          start: {
            line: 767,
            column: 55
          },
          end: {
            line: 767,
            column: 84
          }
        },
        line: 767
      },
      "56": {
        name: "(anonymous_56)",
        decl: {
          start: {
            line: 772,
            column: 45
          },
          end: {
            line: 772,
            column: 46
          }
        },
        loc: {
          start: {
            line: 772,
            column: 52
          },
          end: {
            line: 772,
            column: 88
          }
        },
        line: 772
      },
      "57": {
        name: "(anonymous_57)",
        decl: {
          start: {
            line: 777,
            column: 47
          },
          end: {
            line: 777,
            column: 48
          }
        },
        loc: {
          start: {
            line: 777,
            column: 54
          },
          end: {
            line: 777,
            column: 90
          }
        },
        line: 777
      },
      "58": {
        name: "(anonymous_58)",
        decl: {
          start: {
            line: 794,
            column: 4
          },
          end: {
            line: 794,
            column: 5
          }
        },
        loc: {
          start: {
            line: 794,
            column: 48
          },
          end: {
            line: 797,
            column: 5
          }
        },
        line: 794
      },
      "59": {
        name: "(anonymous_59)",
        decl: {
          start: {
            line: 795,
            column: 48
          },
          end: {
            line: 795,
            column: 49
          }
        },
        loc: {
          start: {
            line: 795,
            column: 55
          },
          end: {
            line: 795,
            column: 84
          }
        },
        line: 795
      },
      "60": {
        name: "(anonymous_60)",
        decl: {
          start: {
            line: 804,
            column: 4
          },
          end: {
            line: 804,
            column: 5
          }
        },
        loc: {
          start: {
            line: 804,
            column: 39
          },
          end: {
            line: 808,
            column: 5
          }
        },
        line: 804
      },
      "61": {
        name: "(anonymous_61)",
        decl: {
          start: {
            line: 815,
            column: 4
          },
          end: {
            line: 815,
            column: 5
          }
        },
        loc: {
          start: {
            line: 815,
            column: 39
          },
          end: {
            line: 819,
            column: 5
          }
        },
        line: 815
      },
      "62": {
        name: "(anonymous_62)",
        decl: {
          start: {
            line: 826,
            column: 4
          },
          end: {
            line: 826,
            column: 5
          }
        },
        loc: {
          start: {
            line: 826,
            column: 39
          },
          end: {
            line: 830,
            column: 5
          }
        },
        line: 826
      },
      "63": {
        name: "(anonymous_63)",
        decl: {
          start: {
            line: 837,
            column: 4
          },
          end: {
            line: 837,
            column: 5
          }
        },
        loc: {
          start: {
            line: 837,
            column: 36
          },
          end: {
            line: 841,
            column: 5
          }
        },
        line: 837
      },
      "64": {
        name: "(anonymous_64)",
        decl: {
          start: {
            line: 848,
            column: 4
          },
          end: {
            line: 848,
            column: 5
          }
        },
        loc: {
          start: {
            line: 848,
            column: 42
          },
          end: {
            line: 852,
            column: 5
          }
        },
        line: 848
      },
      "65": {
        name: "(anonymous_65)",
        decl: {
          start: {
            line: 859,
            column: 4
          },
          end: {
            line: 859,
            column: 5
          }
        },
        loc: {
          start: {
            line: 859,
            column: 41
          },
          end: {
            line: 863,
            column: 5
          }
        },
        line: 859
      },
      "66": {
        name: "(anonymous_66)",
        decl: {
          start: {
            line: 871,
            column: 4
          },
          end: {
            line: 871,
            column: 5
          }
        },
        loc: {
          start: {
            line: 871,
            column: 31
          },
          end: {
            line: 881,
            column: 5
          }
        },
        line: 871
      },
      "67": {
        name: "(anonymous_67)",
        decl: {
          start: {
            line: 888,
            column: 4
          },
          end: {
            line: 888,
            column: 5
          }
        },
        loc: {
          start: {
            line: 888,
            column: 25
          },
          end: {
            line: 894,
            column: 5
          }
        },
        line: 888
      },
      "68": {
        name: "(anonymous_68)",
        decl: {
          start: {
            line: 899,
            column: 4
          },
          end: {
            line: 899,
            column: 5
          }
        },
        loc: {
          start: {
            line: 899,
            column: 21
          },
          end: {
            line: 907,
            column: 5
          }
        },
        line: 899
      },
      "69": {
        name: "(anonymous_69)",
        decl: {
          start: {
            line: 902,
            column: 51
          },
          end: {
            line: 902,
            column: 52
          }
        },
        loc: {
          start: {
            line: 902,
            column: 60
          },
          end: {
            line: 902,
            column: 89
          }
        },
        line: 902
      },
      "70": {
        name: "(anonymous_70)",
        decl: {
          start: {
            line: 906,
            column: 57
          },
          end: {
            line: 906,
            column: 58
          }
        },
        loc: {
          start: {
            line: 906,
            column: 66
          },
          end: {
            line: 906,
            column: 95
          }
        },
        line: 906
      },
      "71": {
        name: "(anonymous_71)",
        decl: {
          start: {
            line: 914,
            column: 4
          },
          end: {
            line: 914,
            column: 5
          }
        },
        loc: {
          start: {
            line: 914,
            column: 16
          },
          end: {
            line: 922,
            column: 5
          }
        },
        line: 914
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 123,
            column: 12
          },
          end: {
            line: 126,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 123,
            column: 12
          },
          end: {
            line: 126,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 123
      },
      "1": {
        loc: {
          start: {
            line: 160,
            column: 12
          },
          end: {
            line: 162,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 160,
            column: 12
          },
          end: {
            line: 162,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 160
      },
      "2": {
        loc: {
          start: {
            line: 187,
            column: 48
          },
          end: {
            line: 187,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 187,
            column: 48
          },
          end: {
            line: 187,
            column: 80
          }
        }, {
          start: {
            line: 187,
            column: 84
          },
          end: {
            line: 187,
            column: 85
          }
        }],
        line: 187
      },
      "3": {
        loc: {
          start: {
            line: 192,
            column: 45
          },
          end: {
            line: 192,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 192,
            column: 45
          },
          end: {
            line: 192,
            column: 74
          }
        }, {
          start: {
            line: 192,
            column: 78
          },
          end: {
            line: 192,
            column: 79
          }
        }],
        line: 192
      },
      "4": {
        loc: {
          start: {
            line: 195,
            column: 36
          },
          end: {
            line: 195,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 195,
            column: 54
          },
          end: {
            line: 195,
            column: 95
          }
        }, {
          start: {
            line: 195,
            column: 98
          },
          end: {
            line: 195,
            column: 99
          }
        }],
        line: 195
      },
      "5": {
        loc: {
          start: {
            line: 220,
            column: 44
          },
          end: {
            line: 220,
            column: 89
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 220,
            column: 58
          },
          end: {
            line: 220,
            column: 89
          }
        }],
        line: 220
      },
      "6": {
        loc: {
          start: {
            line: 224,
            column: 12
          },
          end: {
            line: 234,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 224,
            column: 12
          },
          end: {
            line: 234,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 224
      },
      "7": {
        loc: {
          start: {
            line: 263,
            column: 69
          },
          end: {
            line: 263,
            column: 127
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 263,
            column: 69
          },
          end: {
            line: 263,
            column: 97
          }
        }, {
          start: {
            line: 263,
            column: 101
          },
          end: {
            line: 263,
            column: 127
          }
        }],
        line: 263
      },
      "8": {
        loc: {
          start: {
            line: 432,
            column: 8
          },
          end: {
            line: 443,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 432,
            column: 8
          },
          end: {
            line: 443,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 432
      },
      "9": {
        loc: {
          start: {
            line: 452,
            column: 24
          },
          end: {
            line: 452,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 452,
            column: 24
          },
          end: {
            line: 452,
            column: 62
          }
        }, {
          start: {
            line: 452,
            column: 66
          },
          end: {
            line: 452,
            column: 68
          }
        }],
        line: 452
      },
      "10": {
        loc: {
          start: {
            line: 455,
            column: 8
          },
          end: {
            line: 457,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 455,
            column: 8
          },
          end: {
            line: 457,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 455
      },
      "11": {
        loc: {
          start: {
            line: 469,
            column: 24
          },
          end: {
            line: 469,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 469,
            column: 24
          },
          end: {
            line: 469,
            column: 52
          }
        }, {
          start: {
            line: 469,
            column: 56
          },
          end: {
            line: 469,
            column: 58
          }
        }],
        line: 469
      },
      "12": {
        loc: {
          start: {
            line: 483,
            column: 8
          },
          end: {
            line: 514,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 484,
            column: 12
          },
          end: {
            line: 489,
            column: 22
          }
        }, {
          start: {
            line: 490,
            column: 12
          },
          end: {
            line: 495,
            column: 22
          }
        }, {
          start: {
            line: 496,
            column: 12
          },
          end: {
            line: 501,
            column: 22
          }
        }, {
          start: {
            line: 502,
            column: 12
          },
          end: {
            line: 507,
            column: 22
          }
        }, {
          start: {
            line: 508,
            column: 12
          },
          end: {
            line: 513,
            column: 22
          }
        }],
        line: 483
      },
      "13": {
        loc: {
          start: {
            line: 485,
            column: 16
          },
          end: {
            line: 488,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 485,
            column: 16
          },
          end: {
            line: 488,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 485
      },
      "14": {
        loc: {
          start: {
            line: 491,
            column: 16
          },
          end: {
            line: 494,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 491,
            column: 16
          },
          end: {
            line: 494,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 491
      },
      "15": {
        loc: {
          start: {
            line: 497,
            column: 16
          },
          end: {
            line: 500,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 497,
            column: 16
          },
          end: {
            line: 500,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 497
      },
      "16": {
        loc: {
          start: {
            line: 503,
            column: 16
          },
          end: {
            line: 506,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 503,
            column: 16
          },
          end: {
            line: 506,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 503
      },
      "17": {
        loc: {
          start: {
            line: 509,
            column: 16
          },
          end: {
            line: 512,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 509,
            column: 16
          },
          end: {
            line: 512,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 509
      },
      "18": {
        loc: {
          start: {
            line: 515,
            column: 8
          },
          end: {
            line: 527,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 515,
            column: 8
          },
          end: {
            line: 527,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 515
      },
      "19": {
        loc: {
          start: {
            line: 539,
            column: 15
          },
          end: {
            line: 539,
            column: 100
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 539,
            column: 43
          },
          end: {
            line: 539,
            column: 96
          }
        }, {
          start: {
            line: 539,
            column: 99
          },
          end: {
            line: 539,
            column: 100
          }
        }],
        line: 539
      },
      "20": {
        loc: {
          start: {
            line: 549,
            column: 55
          },
          end: {
            line: 549,
            column: 114
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 549,
            column: 55
          },
          end: {
            line: 549,
            column: 82
          }
        }, {
          start: {
            line: 549,
            column: 86
          },
          end: {
            line: 549,
            column: 114
          }
        }],
        line: 549
      },
      "21": {
        loc: {
          start: {
            line: 550,
            column: 8
          },
          end: {
            line: 551,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 550,
            column: 8
          },
          end: {
            line: 551,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 550
      },
      "22": {
        loc: {
          start: {
            line: 567,
            column: 8
          },
          end: {
            line: 568,
            column: 23
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 567,
            column: 8
          },
          end: {
            line: 568,
            column: 23
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 567
      },
      "23": {
        loc: {
          start: {
            line: 594,
            column: 8
          },
          end: {
            line: 596,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 594,
            column: 8
          },
          end: {
            line: 596,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 594
      },
      "24": {
        loc: {
          start: {
            line: 607,
            column: 8
          },
          end: {
            line: 609,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 607,
            column: 8
          },
          end: {
            line: 609,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 607
      },
      "25": {
        loc: {
          start: {
            line: 608,
            column: 24
          },
          end: {
            line: 608,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 608,
            column: 36
          },
          end: {
            line: 608,
            column: 47
          }
        }, {
          start: {
            line: 608,
            column: 50
          },
          end: {
            line: 608,
            column: 61
          }
        }],
        line: 608
      },
      "26": {
        loc: {
          start: {
            line: 622,
            column: 8
          },
          end: {
            line: 623,
            column: 28
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 622,
            column: 8
          },
          end: {
            line: 623,
            column: 28
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 622
      },
      "27": {
        loc: {
          start: {
            line: 629,
            column: 27
          },
          end: {
            line: 632,
            column: 17
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 630,
            column: 12
          },
          end: {
            line: 631,
            column: 69
          }
        }, {
          start: {
            line: 632,
            column: 12
          },
          end: {
            line: 632,
            column: 17
          }
        }],
        line: 629
      },
      "28": {
        loc: {
          start: {
            line: 653,
            column: 24
          },
          end: {
            line: 653,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 653,
            column: 24
          },
          end: {
            line: 653,
            column: 46
          }
        }, {
          start: {
            line: 653,
            column: 50
          },
          end: {
            line: 653,
            column: 63
          }
        }],
        line: 653
      },
      "29": {
        loc: {
          start: {
            line: 654,
            column: 29
          },
          end: {
            line: 654,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 654,
            column: 29
          },
          end: {
            line: 654,
            column: 69
          }
        }, {
          start: {
            line: 654,
            column: 73
          },
          end: {
            line: 654,
            column: 74
          }
        }],
        line: 654
      },
      "30": {
        loc: {
          start: {
            line: 655,
            column: 30
          },
          end: {
            line: 655,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 655,
            column: 30
          },
          end: {
            line: 655,
            column: 50
          }
        }, {
          start: {
            line: 655,
            column: 54
          },
          end: {
            line: 655,
            column: 55
          }
        }],
        line: 655
      },
      "31": {
        loc: {
          start: {
            line: 674,
            column: 12
          },
          end: {
            line: 675,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 674,
            column: 12
          },
          end: {
            line: 675,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 674
      },
      "32": {
        loc: {
          start: {
            line: 687,
            column: 12
          },
          end: {
            line: 689,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 687,
            column: 12
          },
          end: {
            line: 689,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 687
      },
      "33": {
        loc: {
          start: {
            line: 688,
            column: 24
          },
          end: {
            line: 688,
            column: 60
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 688,
            column: 47
          },
          end: {
            line: 688,
            column: 51
          }
        }, {
          start: {
            line: 688,
            column: 54
          },
          end: {
            line: 688,
            column: 60
          }
        }],
        line: 688
      },
      "34": {
        loc: {
          start: {
            line: 692,
            column: 12
          },
          end: {
            line: 693,
            column: 35
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 692,
            column: 12
          },
          end: {
            line: 693,
            column: 35
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 692
      },
      "35": {
        loc: {
          start: {
            line: 692,
            column: 16
          },
          end: {
            line: 692,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 692,
            column: 16
          },
          end: {
            line: 692,
            column: 44
          }
        }, {
          start: {
            line: 692,
            column: 48
          },
          end: {
            line: 692,
            column: 60
          }
        }],
        line: 692
      },
      "36": {
        loc: {
          start: {
            line: 694,
            column: 12
          },
          end: {
            line: 695,
            column: 36
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 694,
            column: 12
          },
          end: {
            line: 695,
            column: 36
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 694
      },
      "37": {
        loc: {
          start: {
            line: 694,
            column: 16
          },
          end: {
            line: 694,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 694,
            column: 16
          },
          end: {
            line: 694,
            column: 44
          }
        }, {
          start: {
            line: 694,
            column: 48
          },
          end: {
            line: 694,
            column: 60
          }
        }],
        line: 694
      },
      "38": {
        loc: {
          start: {
            line: 722,
            column: 46
          },
          end: {
            line: 722,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 722,
            column: 46
          },
          end: {
            line: 722,
            column: 76
          }
        }, {
          start: {
            line: 722,
            column: 80
          },
          end: {
            line: 722,
            column: 81
          }
        }],
        line: 722
      },
      "39": {
        loc: {
          start: {
            line: 725,
            column: 48
          },
          end: {
            line: 725,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 725,
            column: 48
          },
          end: {
            line: 725,
            column: 80
          }
        }, {
          start: {
            line: 725,
            column: 84
          },
          end: {
            line: 725,
            column: 85
          }
        }],
        line: 725
      },
      "40": {
        loc: {
          start: {
            line: 727,
            column: 41
          },
          end: {
            line: 727,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 727,
            column: 41
          },
          end: {
            line: 727,
            column: 66
          }
        }, {
          start: {
            line: 727,
            column: 70
          },
          end: {
            line: 727,
            column: 71
          }
        }],
        line: 727
      },
      "41": {
        loc: {
          start: {
            line: 768,
            column: 8
          },
          end: {
            line: 770,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 768,
            column: 8
          },
          end: {
            line: 770,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 768
      },
      "42": {
        loc: {
          start: {
            line: 768,
            column: 12
          },
          end: {
            line: 768,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 768,
            column: 12
          },
          end: {
            line: 768,
            column: 25
          }
        }, {
          start: {
            line: 768,
            column: 29
          },
          end: {
            line: 768,
            column: 55
          }
        }],
        line: 768
      },
      "43": {
        loc: {
          start: {
            line: 773,
            column: 8
          },
          end: {
            line: 775,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 773,
            column: 8
          },
          end: {
            line: 775,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 773
      },
      "44": {
        loc: {
          start: {
            line: 773,
            column: 12
          },
          end: {
            line: 773,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 773,
            column: 12
          },
          end: {
            line: 773,
            column: 22
          }
        }, {
          start: {
            line: 773,
            column: 26
          },
          end: {
            line: 773,
            column: 49
          }
        }],
        line: 773
      },
      "45": {
        loc: {
          start: {
            line: 778,
            column: 8
          },
          end: {
            line: 780,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 778,
            column: 8
          },
          end: {
            line: 780,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 778
      },
      "46": {
        loc: {
          start: {
            line: 778,
            column: 12
          },
          end: {
            line: 778,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 778,
            column: 12
          },
          end: {
            line: 778,
            column: 24
          }
        }, {
          start: {
            line: 778,
            column: 28
          },
          end: {
            line: 778,
            column: 54
          }
        }],
        line: 778
      },
      "47": {
        loc: {
          start: {
            line: 782,
            column: 8
          },
          end: {
            line: 784,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 782,
            column: 8
          },
          end: {
            line: 784,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 782
      },
      "48": {
        loc: {
          start: {
            line: 796,
            column: 15
          },
          end: {
            line: 796,
            column: 58
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 796,
            column: 31
          },
          end: {
            line: 796,
            column: 52
          }
        }, {
          start: {
            line: 796,
            column: 55
          },
          end: {
            line: 796,
            column: 58
          }
        }],
        line: 796
      },
      "49": {
        loc: {
          start: {
            line: 872,
            column: 8
          },
          end: {
            line: 873,
            column: 37
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 872,
            column: 8
          },
          end: {
            line: 873,
            column: 37
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 872
      },
      "50": {
        loc: {
          start: {
            line: 874,
            column: 8
          },
          end: {
            line: 875,
            column: 32
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 874,
            column: 8
          },
          end: {
            line: 875,
            column: 32
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 874
      },
      "51": {
        loc: {
          start: {
            line: 876,
            column: 8
          },
          end: {
            line: 877,
            column: 34
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 876,
            column: 8
          },
          end: {
            line: 877,
            column: 34
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 876
      },
      "52": {
        loc: {
          start: {
            line: 878,
            column: 8
          },
          end: {
            line: 879,
            column: 31
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 878,
            column: 8
          },
          end: {
            line: 879,
            column: 31
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 878
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0,
      "261": 0,
      "262": 0,
      "263": 0,
      "264": 0,
      "265": 0,
      "266": 0,
      "267": 0,
      "268": 0,
      "269": 0,
      "270": 0,
      "271": 0,
      "272": 0,
      "273": 0,
      "274": 0,
      "275": 0,
      "276": 0,
      "277": 0,
      "278": 0,
      "279": 0,
      "280": 0,
      "281": 0,
      "282": 0,
      "283": 0,
      "284": 0,
      "285": 0,
      "286": 0,
      "287": 0,
      "288": 0,
      "289": 0,
      "290": 0,
      "291": 0,
      "292": 0,
      "293": 0,
      "294": 0,
      "295": 0,
      "296": 0,
      "297": 0,
      "298": 0,
      "299": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0, 0, 0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\security-metrics-service.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\security-metrics-service.ts"],
      sourcesContent: ["/**\r\n * =============================================================================\r\n * AI CRYPTO TRADING AGENT - SECURITY METRICS AND KPI TRACKING SERVICE\r\n * =============================================================================\r\n * \r\n * This service provides comprehensive security metrics collection, analysis,\r\n * and KPI tracking for the AI crypto trading agent. It monitors security\r\n * performance, threat trends, and system health indicators.\r\n * \r\n * CRITICAL SECURITY NOTICE:\r\n * This service provides essential metrics for security decision-making.\r\n * Accurate metrics are crucial for identifying security trends, measuring\r\n * security effectiveness, and making informed security investments.\r\n * \r\n * Metrics Capabilities:\r\n * - Real-time security KPI tracking\r\n * - Threat trend analysis and forecasting\r\n * - Security performance measurement\r\n * - Compliance metrics and reporting\r\n * - Historical data analysis\r\n * - Automated alerting on metric thresholds\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport { EventEmitter } from 'events';\r\nimport { logger } from '@/core/logging/logger';\r\nimport { auditService } from '@/security/audit-service';\r\nimport { SecurityEvent, SecurityMetrics } from '@/security/security-monitoring-service';\r\n\r\n/**\r\n * Interface for security KPI configuration\r\n */\r\nexport interface SecurityKPIConfig {\r\n  /** KPI collection interval in milliseconds */\r\n  collectionInterval: number;\r\n  /** Historical data retention period in days */\r\n  retentionPeriod: number;\r\n  /** Alert thresholds for KPIs */\r\n  alertThresholds: {\r\n    securityScoreMin: number;\r\n    threatDetectionRateMax: number;\r\n    falsePositiveRateMax: number;\r\n    responseTimeMax: number;\r\n    uptimeMin: number;\r\n  };\r\n  /** Trend analysis window in hours */\r\n  trendAnalysisWindow: number;\r\n}\r\n\r\n/**\r\n * Interface for security KPI data point\r\n */\r\nexport interface SecurityKPIDataPoint {\r\n  /** Timestamp of measurement */\r\n  timestamp: Date;\r\n  /** KPI name */\r\n  kpiName: string;\r\n  /** KPI value */\r\n  value: number;\r\n  /** KPI unit */\r\n  unit: string;\r\n  /** KPI category */\r\n  category: 'performance' | 'threat' | 'compliance' | 'system';\r\n  /** Additional metadata */\r\n  metadata: Record<string, any>;\r\n}\r\n\r\n/**\r\n * Interface for security trend analysis\r\n */\r\nexport interface SecurityTrendAnalysis {\r\n  /** KPI name */\r\n  kpiName: string;\r\n  /** Trend direction */\r\n  trend: 'improving' | 'degrading' | 'stable';\r\n  /** Trend strength (0-1) */\r\n  strength: number;\r\n  /** Trend confidence (0-1) */\r\n  confidence: number;\r\n  /** Historical data points */\r\n  dataPoints: SecurityKPIDataPoint[];\r\n  /** Forecast values */\r\n  forecast: Array<{ timestamp: Date; value: number; confidence: number }>;\r\n  /** Analysis summary */\r\n  summary: string;\r\n}\r\n\r\n/**\r\n * Interface for security performance report\r\n */\r\nexport interface SecurityPerformanceReport {\r\n  /** Report period */\r\n  period: { start: Date; end: Date };\r\n  /** Overall security score */\r\n  overallScore: number;\r\n  /** KPI summaries */\r\n  kpiSummaries: Array<{\r\n    name: string;\r\n    current: number;\r\n    average: number;\r\n    min: number;\r\n    max: number;\r\n    trend: 'up' | 'down' | 'stable';\r\n    status: 'good' | 'warning' | 'critical';\r\n  }>;\r\n  /** Threat analysis */\r\n  threatAnalysis: {\r\n    totalThreats: number;\r\n    threatsByType: Record<string, number>;\r\n    threatsBySeverity: Record<string, number>;\r\n    topSources: Array<{ source: string; count: number }>;\r\n  };\r\n  /** System performance */\r\n  systemPerformance: {\r\n    uptime: number;\r\n    averageResponseTime: number;\r\n    errorRate: number;\r\n    throughput: number;\r\n  };\r\n  /** Recommendations */\r\n  recommendations: string[];\r\n}\r\n\r\n/**\r\n * Interface for compliance metrics\r\n */\r\nexport interface ComplianceMetrics {\r\n  /** Audit trail completeness */\r\n  auditCompleteness: number;\r\n  /** Data retention compliance */\r\n  dataRetentionCompliance: number;\r\n  /** Access control compliance */\r\n  accessControlCompliance: number;\r\n  /** Encryption compliance */\r\n  encryptionCompliance: number;\r\n  /** Incident response compliance */\r\n  incidentResponseCompliance: number;\r\n  /** Overall compliance score */\r\n  overallCompliance: number;\r\n  /** Compliance violations */\r\n  violations: Array<{\r\n    type: string;\r\n    severity: 'low' | 'medium' | 'high';\r\n    description: string;\r\n    timestamp: Date;\r\n  }>;\r\n}\r\n\r\n/**\r\n * Security metrics and KPI tracking service\r\n * Provides comprehensive security performance measurement and analysis\r\n */\r\nexport class SecurityMetricsService extends EventEmitter {\r\n  /** Service configuration */\r\n  private config: SecurityKPIConfig;\r\n  \r\n  /** Historical KPI data */\r\n  private kpiHistory: Map<string, SecurityKPIDataPoint[]> = new Map();\r\n  \r\n  /** Current KPI values */\r\n  private currentKPIs: Map<string, SecurityKPIDataPoint> = new Map();\r\n  \r\n  /** Metrics collection interval */\r\n  private collectionInterval: NodeJS.Timeout | null = null;\r\n  \r\n  /** Service start time */\r\n  private serviceStartTime: Date = new Date();\r\n  \r\n  /** Security events for analysis */\r\n  private securityEvents: SecurityEvent[] = [];\r\n\r\n  constructor(config?: Partial<SecurityKPIConfig>) {\r\n    super();\r\n    \r\n    // Initialize configuration with defaults\r\n    this.config = {\r\n      collectionInterval: 60000, // 1 minute\r\n      retentionPeriod: 90, // 90 days\r\n      alertThresholds: {\r\n        securityScoreMin: 80,\r\n        threatDetectionRateMax: 10, // 10% of events\r\n        falsePositiveRateMax: 5, // 5% false positives\r\n        responseTimeMax: 300, // 5 minutes\r\n        uptimeMin: 99.5 // 99.5% uptime\r\n      },\r\n      trendAnalysisWindow: 24 // 24 hours\r\n    };\r\n    \r\n    // Merge with provided config\r\n    this.config = { ...this.config, ...config };\r\n    \r\n    // Initialize KPI tracking\r\n    this.initializeKPITracking();\r\n    \r\n    logger.info('\uD83D\uDCCA Security Metrics Service initialized');\r\n  }\r\n\r\n  /**\r\n   * Start metrics collection\r\n   * Begins continuous security metrics collection\r\n   * \r\n   * @returns Promise<void>\r\n   */\r\n  public async startMetricsCollection(): Promise<void> {\r\n    try {\r\n      logger.info('\uD83D\uDE80 Starting security metrics collection...');\r\n      \r\n      // Start metrics collection interval\r\n      this.collectionInterval = setInterval(async () => {\r\n        try {\r\n          await this.collectSecurityMetrics();\r\n        } catch (error) {\r\n          logger.error('\u274C Metrics collection error:', error);\r\n        }\r\n      }, this.config.collectionInterval);\r\n      \r\n      // Perform initial metrics collection\r\n      await this.collectSecurityMetrics();\r\n      \r\n      // Create audit entry\r\n      await auditService.createAuditEntry({\r\n        auditId: `metrics_start_${Date.now()}`,\r\n        eventType: 'SECURITY_METRICS_START',\r\n        actor: 'SYSTEM',\r\n        resource: 'SECURITY_METRICS_SERVICE',\r\n        action: 'START_COLLECTION',\r\n        result: 'SUCCESS',\r\n        timestamp: new Date(),\r\n        auditData: {\r\n          config: this.config,\r\n          startTime: this.serviceStartTime\r\n        }\r\n      });\r\n      \r\n      logger.info('\u2705 Security metrics collection started successfully');\r\n      \r\n    } catch (error) {\r\n      logger.error('\u274C Failed to start metrics collection:', error);\r\n      throw new Error('Security metrics collection startup failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop metrics collection\r\n   * Stops continuous security metrics collection\r\n   * \r\n   * @returns Promise<void>\r\n   */\r\n  public async stopMetricsCollection(): Promise<void> {\r\n    try {\r\n      logger.info('\uD83D\uDED1 Stopping security metrics collection...');\r\n      \r\n      // Stop collection interval\r\n      if (this.collectionInterval) {\r\n        clearInterval(this.collectionInterval);\r\n        this.collectionInterval = null;\r\n      }\r\n      \r\n      // Create audit entry\r\n      await auditService.createAuditEntry({\r\n        auditId: `metrics_stop_${Date.now()}`,\r\n        eventType: 'SECURITY_METRICS_STOP',\r\n        actor: 'SYSTEM',\r\n        resource: 'SECURITY_METRICS_SERVICE',\r\n        action: 'STOP_COLLECTION',\r\n        result: 'SUCCESS',\r\n        timestamp: new Date(),\r\n        auditData: {\r\n          uptime: Date.now() - this.serviceStartTime.getTime(),\r\n          totalDataPoints: this.getTotalDataPoints()\r\n        }\r\n      });\r\n      \r\n      logger.info('\u2705 Security metrics collection stopped successfully');\r\n      \r\n    } catch (error) {\r\n      logger.error('\u274C Failed to stop metrics collection:', error);\r\n      throw new Error('Security metrics collection shutdown failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Record security event\r\n   * Records security event for metrics analysis\r\n   * \r\n   * @param event - Security event to record\r\n   * @returns Promise<void>\r\n   */\r\n  public async recordSecurityEvent(event: SecurityEvent): Promise<void> {\r\n    try {\r\n      // Add to events history\r\n      this.securityEvents.push(event);\r\n      \r\n      // Maintain event history size (last 10,000 events)\r\n      if (this.securityEvents.length > 10000) {\r\n        this.securityEvents.shift();\r\n      }\r\n      \r\n      // Update real-time metrics\r\n      await this.updateRealTimeMetrics(event);\r\n      \r\n    } catch (error) {\r\n      logger.error('\u274C Failed to record security event:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get current security metrics\r\n   * Returns current security KPIs and metrics\r\n   * \r\n   * @returns SecurityMetrics Current security metrics\r\n   */\r\n  public getCurrentSecurityMetrics(): SecurityMetrics {\r\n    const now = new Date();\r\n    const oneHourAgo = new Date(now.getTime() - 60 * 60 * 1000);\r\n    \r\n    // Filter recent events\r\n    const recentEvents = this.securityEvents.filter(\r\n      event => event.timestamp >= oneHourAgo\r\n    );\r\n    \r\n    // Calculate metrics\r\n    const totalEvents = recentEvents.length;\r\n    const threatEvents = recentEvents.filter(\r\n      event => event.eventType === 'threat_detected'\r\n    );\r\n    \r\n    // Events by severity\r\n    const eventsBySeverity: Record<number, number> = {};\r\n    recentEvents.forEach(event => {\r\n      eventsBySeverity[event.severity] = (eventsBySeverity[event.severity] || 0) + 1;\r\n    });\r\n    \r\n    // Events by type\r\n    const eventsByType: Record<string, number> = {};\r\n    recentEvents.forEach(event => {\r\n      eventsByType[event.eventType] = (eventsByType[event.eventType] || 0) + 1;\r\n    });\r\n    \r\n    // Calculate rates\r\n    const threatDetectionRate = totalEvents > 0 ? (threatEvents.length / totalEvents) * 100 : 0;\r\n    const falsePositiveRate = this.calculateFalsePositiveRate(recentEvents);\r\n    const averageResponseTime = this.calculateAverageResponseTime(recentEvents);\r\n    const securityScore = this.calculateSecurityScore(recentEvents);\r\n    const monitoringUptime = this.calculateUptime();\r\n    \r\n    return {\r\n      totalEvents,\r\n      eventsBySeverity,\r\n      eventsByType,\r\n      threatDetectionRate,\r\n      falsePositiveRate,\r\n      averageResponseTime,\r\n      securityScore,\r\n      monitoringUptime,\r\n      lastUpdate: now\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get security trend analysis\r\n   * Analyzes security trends over time\r\n   * \r\n   * @param kpiName - KPI to analyze\r\n   * @param windowHours - Analysis window in hours\r\n   * @returns Promise<SecurityTrendAnalysis> Trend analysis\r\n   */\r\n  public async getSecurityTrendAnalysis(\r\n    kpiName: string,\r\n    windowHours: number = this.config.trendAnalysisWindow\r\n  ): Promise<SecurityTrendAnalysis> {\r\n    try {\r\n      const windowStart = new Date(Date.now() - (windowHours * 60 * 60 * 1000));\r\n      const dataPoints = this.getKPIHistory(kpiName, windowStart);\r\n      \r\n      if (dataPoints.length < 3) {\r\n        return {\r\n          kpiName,\r\n          trend: 'stable',\r\n          strength: 0,\r\n          confidence: 0,\r\n          dataPoints,\r\n          forecast: [],\r\n          summary: 'Insufficient data for trend analysis'\r\n        };\r\n      }\r\n      \r\n      // Calculate trend\r\n      const trend = this.calculateTrend(dataPoints);\r\n      const forecast = this.generateForecast(dataPoints, 6); // 6 hour forecast\r\n      \r\n      return {\r\n        kpiName,\r\n        trend: trend.direction,\r\n        strength: trend.strength,\r\n        confidence: trend.confidence,\r\n        dataPoints,\r\n        forecast,\r\n        summary: this.generateTrendSummary(trend, dataPoints)\r\n      };\r\n      \r\n    } catch (error) {\r\n      logger.error('\u274C Failed to analyze security trend:', error);\r\n      throw new Error('Security trend analysis failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate security performance report\r\n   * Creates comprehensive security performance report\r\n   * \r\n   * @param startDate - Report start date\r\n   * @param endDate - Report end date\r\n   * @returns Promise<SecurityPerformanceReport> Performance report\r\n   */\r\n  public async generateSecurityPerformanceReport(\r\n    startDate: Date,\r\n    endDate: Date\r\n  ): Promise<SecurityPerformanceReport> {\r\n    try {\r\n      const periodEvents = this.securityEvents.filter(\r\n        event => event.timestamp >= startDate && event.timestamp <= endDate\r\n      );\r\n      \r\n      // Calculate KPI summaries\r\n      const kpiSummaries = await this.calculateKPISummaries(startDate, endDate);\r\n      \r\n      // Analyze threats\r\n      const threatAnalysis = this.analyzeThreatData(periodEvents);\r\n      \r\n      // Calculate system performance\r\n      const systemPerformance = this.calculateSystemPerformance(periodEvents);\r\n      \r\n      // Generate recommendations\r\n      const recommendations = this.generateRecommendations(kpiSummaries, threatAnalysis);\r\n      \r\n      // Calculate overall score\r\n      const overallScore = this.calculateOverallSecurityScore(kpiSummaries);\r\n      \r\n      return {\r\n        period: { start: startDate, end: endDate },\r\n        overallScore,\r\n        kpiSummaries,\r\n        threatAnalysis,\r\n        systemPerformance,\r\n        recommendations\r\n      };\r\n      \r\n    } catch (error) {\r\n      logger.error('\u274C Failed to generate performance report:', error);\r\n      throw new Error('Security performance report generation failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get compliance metrics\r\n   * Returns current compliance metrics and status\r\n   * \r\n   * @returns Promise<ComplianceMetrics> Compliance metrics\r\n   */\r\n  public async getComplianceMetrics(): Promise<ComplianceMetrics> {\r\n    try {\r\n      // Calculate compliance scores\r\n      const auditCompleteness = await this.calculateAuditCompleteness();\r\n      const dataRetentionCompliance = this.calculateDataRetentionCompliance();\r\n      const accessControlCompliance = this.calculateAccessControlCompliance();\r\n      const encryptionCompliance = this.calculateEncryptionCompliance();\r\n      const incidentResponseCompliance = this.calculateIncidentResponseCompliance();\r\n      \r\n      // Calculate overall compliance\r\n      const overallCompliance = (\r\n        auditCompleteness +\r\n        dataRetentionCompliance +\r\n        accessControlCompliance +\r\n        encryptionCompliance +\r\n        incidentResponseCompliance\r\n      ) / 5;\r\n      \r\n      // Identify violations\r\n      const violations = await this.identifyComplianceViolations();\r\n      \r\n      return {\r\n        auditCompleteness,\r\n        dataRetentionCompliance,\r\n        accessControlCompliance,\r\n        encryptionCompliance,\r\n        incidentResponseCompliance,\r\n        overallCompliance,\r\n        violations\r\n      };\r\n      \r\n    } catch (error) {\r\n      logger.error('\u274C Failed to get compliance metrics:', error);\r\n      throw new Error('Compliance metrics calculation failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialize KPI tracking\r\n   * Sets up KPI tracking infrastructure\r\n   */\r\n  private initializeKPITracking(): void {\r\n    // Initialize KPI history maps\r\n    const kpiNames = [\r\n      'security_score',\r\n      'threat_detection_rate',\r\n      'false_positive_rate',\r\n      'average_response_time',\r\n      'system_uptime',\r\n      'event_volume',\r\n      'incident_count',\r\n      'compliance_score'\r\n    ];\r\n    \r\n    kpiNames.forEach(kpiName => {\r\n      this.kpiHistory.set(kpiName, []);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Collect security metrics\r\n   * Collects current security metrics and KPIs\r\n   * \r\n   * @returns Promise<void>\r\n   */\r\n  private async collectSecurityMetrics(): Promise<void> {\r\n    try {\r\n      const now = new Date();\r\n      const metrics = this.getCurrentSecurityMetrics();\r\n      \r\n      // Create KPI data points\r\n      const kpiDataPoints: SecurityKPIDataPoint[] = [\r\n        {\r\n          timestamp: now,\r\n          kpiName: 'security_score',\r\n          value: metrics.securityScore,\r\n          unit: 'score',\r\n          category: 'performance',\r\n          metadata: { totalEvents: metrics.totalEvents }\r\n        },\r\n        {\r\n          timestamp: now,\r\n          kpiName: 'threat_detection_rate',\r\n          value: metrics.threatDetectionRate,\r\n          unit: 'percentage',\r\n          category: 'threat',\r\n          metadata: { totalEvents: metrics.totalEvents }\r\n        },\r\n        {\r\n          timestamp: now,\r\n          kpiName: 'false_positive_rate',\r\n          value: metrics.falsePositiveRate,\r\n          unit: 'percentage',\r\n          category: 'performance',\r\n          metadata: {}\r\n        },\r\n        {\r\n          timestamp: now,\r\n          kpiName: 'average_response_time',\r\n          value: metrics.averageResponseTime,\r\n          unit: 'seconds',\r\n          category: 'performance',\r\n          metadata: {}\r\n        },\r\n        {\r\n          timestamp: now,\r\n          kpiName: 'system_uptime',\r\n          value: metrics.monitoringUptime,\r\n          unit: 'percentage',\r\n          category: 'system',\r\n          metadata: {}\r\n        }\r\n      ];\r\n      \r\n      // Store KPI data points\r\n      for (const dataPoint of kpiDataPoints) {\r\n        this.storeKPIDataPoint(dataPoint);\r\n        this.currentKPIs.set(dataPoint.kpiName, dataPoint);\r\n        \r\n        // Check alert thresholds\r\n        await this.checkKPIThresholds(dataPoint);\r\n      }\r\n      \r\n      // Clean up old data\r\n      this.cleanupOldData();\r\n      \r\n    } catch (error) {\r\n      logger.error('\u274C Failed to collect security metrics:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update real-time metrics\r\n   * Updates metrics based on new security event\r\n   * \r\n   * @param event - Security event\r\n   * @returns Promise<void>\r\n   */\r\n  private async updateRealTimeMetrics(event: SecurityEvent): Promise<void> {\r\n    // Update event volume metric\r\n    const eventVolumeKPI: SecurityKPIDataPoint = {\r\n      timestamp: new Date(),\r\n      kpiName: 'event_volume',\r\n      value: this.securityEvents.length,\r\n      unit: 'count',\r\n      category: 'system',\r\n      metadata: { eventType: event.eventType, severity: event.severity }\r\n    };\r\n    \r\n    this.storeKPIDataPoint(eventVolumeKPI);\r\n    this.currentKPIs.set('event_volume', eventVolumeKPI);\r\n    \r\n    // Update incident count for high-severity events\r\n    if (event.severity >= 7) {\r\n      const incidentCountKPI: SecurityKPIDataPoint = {\r\n        timestamp: new Date(),\r\n        kpiName: 'incident_count',\r\n        value: this.securityEvents.filter(e => e.severity >= 7).length,\r\n        unit: 'count',\r\n        category: 'threat',\r\n        metadata: { severity: event.severity }\r\n      };\r\n      \r\n      this.storeKPIDataPoint(incidentCountKPI);\r\n      this.currentKPIs.set('incident_count', incidentCountKPI);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Store KPI data point\r\n   * Stores KPI data point in history\r\n   * \r\n   * @param dataPoint - KPI data point to store\r\n   */\r\n  private storeKPIDataPoint(dataPoint: SecurityKPIDataPoint): void {\r\n    const history = this.kpiHistory.get(dataPoint.kpiName) || [];\r\n    history.push(dataPoint);\r\n    \r\n    // Maintain history size (keep last 10,000 points per KPI)\r\n    if (history.length > 10000) {\r\n      history.shift();\r\n    }\r\n    \r\n    this.kpiHistory.set(dataPoint.kpiName, history);\r\n  }\r\n\r\n  /**\r\n   * Get KPI history\r\n   * Retrieves KPI history for specified period\r\n   * \r\n   * @param kpiName - KPI name\r\n   * @param startDate - Start date\r\n   * @returns SecurityKPIDataPoint[] KPI history\r\n   */\r\n  private getKPIHistory(kpiName: string, startDate: Date): SecurityKPIDataPoint[] {\r\n    const history = this.kpiHistory.get(kpiName) || [];\r\n    return history.filter(point => point.timestamp >= startDate);\r\n  }\r\n\r\n  /**\r\n   * Check KPI thresholds\r\n   * Checks KPI against alert thresholds\r\n   * \r\n   * @param dataPoint - KPI data point\r\n   * @returns Promise<void>\r\n   */\r\n  private async checkKPIThresholds(dataPoint: SecurityKPIDataPoint): Promise<void> {\r\n    const thresholds = this.config.alertThresholds;\r\n    let alertTriggered = false;\r\n    let alertMessage = '';\r\n    \r\n    switch (dataPoint.kpiName) {\r\n      case 'security_score':\r\n        if (dataPoint.value < thresholds.securityScoreMin) {\r\n          alertTriggered = true;\r\n          alertMessage = `Security score (${dataPoint.value}) below threshold (${thresholds.securityScoreMin})`;\r\n        }\r\n        break;\r\n      \r\n      case 'threat_detection_rate':\r\n        if (dataPoint.value > thresholds.threatDetectionRateMax) {\r\n          alertTriggered = true;\r\n          alertMessage = `Threat detection rate (${dataPoint.value}%) above threshold (${thresholds.threatDetectionRateMax}%)`;\r\n        }\r\n        break;\r\n      \r\n      case 'false_positive_rate':\r\n        if (dataPoint.value > thresholds.falsePositiveRateMax) {\r\n          alertTriggered = true;\r\n          alertMessage = `False positive rate (${dataPoint.value}%) above threshold (${thresholds.falsePositiveRateMax}%)`;\r\n        }\r\n        break;\r\n      \r\n      case 'average_response_time':\r\n        if (dataPoint.value > thresholds.responseTimeMax) {\r\n          alertTriggered = true;\r\n          alertMessage = `Average response time (${dataPoint.value}s) above threshold (${thresholds.responseTimeMax}s)`;\r\n        }\r\n        break;\r\n      \r\n      case 'system_uptime':\r\n        if (dataPoint.value < thresholds.uptimeMin) {\r\n          alertTriggered = true;\r\n          alertMessage = `System uptime (${dataPoint.value}%) below threshold (${thresholds.uptimeMin}%)`;\r\n        }\r\n        break;\r\n    }\r\n    \r\n    if (alertTriggered) {\r\n      logger.warn('\uD83D\uDCCA KPI THRESHOLD ALERT', {\r\n        kpiName: dataPoint.kpiName,\r\n        value: dataPoint.value,\r\n        message: alertMessage\r\n      });\r\n      \r\n      this.emit('kpiAlert', {\r\n        kpiName: dataPoint.kpiName,\r\n        value: dataPoint.value,\r\n        message: alertMessage,\r\n        timestamp: dataPoint.timestamp\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate false positive rate\r\n   * Calculates false positive rate from events\r\n   * \r\n   * @param events - Security events\r\n   * @returns number False positive rate\r\n   */\r\n  private calculateFalsePositiveRate(events: SecurityEvent[]): number {\r\n    const resolvedEvents = events.filter(event => event.status === 'resolved');\r\n    const falsePositives = resolvedEvents.filter(event => \r\n      event.responseActions.includes('Mark as false positive')\r\n    );\r\n    \r\n    return resolvedEvents.length > 0 ? (falsePositives.length / resolvedEvents.length) * 100 : 0;\r\n  }\r\n\r\n  /**\r\n   * Calculate average response time\r\n   * Calculates average response time for events\r\n   * \r\n   * @param events - Security events\r\n   * @returns number Average response time in seconds\r\n   */\r\n  private calculateAverageResponseTime(events: SecurityEvent[]): number {\r\n    const respondedEvents = events.filter(event => \r\n      event.status === 'resolved' || event.status === 'contained'\r\n    );\r\n    \r\n    if (respondedEvents.length === 0) return 0;\r\n    \r\n    const totalResponseTime = respondedEvents.reduce((total, event) => {\r\n      // Simulate response time calculation\r\n      // In real implementation, this would track actual response times\r\n      return total + (event.severity * 30); // Rough estimate based on severity\r\n    }, 0);\r\n    \r\n    return totalResponseTime / respondedEvents.length;\r\n  }\r\n\r\n  /**\r\n   * Calculate security score\r\n   * Calculates overall security score based on events\r\n   * \r\n   * @param events - Security events\r\n   * @returns number Security score (0-100)\r\n   */\r\n  private calculateSecurityScore(events: SecurityEvent[]): number {\r\n    if (events.length === 0) return 100;\r\n    \r\n    const severitySum = events.reduce((sum, event) => sum + event.severity, 0);\r\n    const averageSeverity = severitySum / events.length;\r\n    \r\n    // Convert average severity to security score (inverse relationship)\r\n    return Math.max(0, 100 - (averageSeverity * 10));\r\n  }\r\n\r\n  /**\r\n   * Calculate uptime\r\n   * Calculates system uptime percentage\r\n   * \r\n   * @returns number Uptime percentage\r\n   */\r\n  private calculateUptime(): number {\r\n    const totalTime = Date.now() - this.serviceStartTime.getTime();\r\n    // In real implementation, this would track actual downtime\r\n    // For now, assume 99.9% uptime\r\n    return 99.9;\r\n  }\r\n\r\n  /**\r\n   * Calculate trend\r\n   * Calculates trend direction and strength from data points\r\n   * \r\n   * @param dataPoints - KPI data points\r\n   * @returns Trend analysis\r\n   */\r\n  private calculateTrend(dataPoints: SecurityKPIDataPoint[]): {\r\n    direction: 'improving' | 'degrading' | 'stable';\r\n    strength: number;\r\n    confidence: number;\r\n  } {\r\n    if (dataPoints.length < 2) {\r\n      return { direction: 'stable', strength: 0, confidence: 0 };\r\n    }\r\n    \r\n    // Simple linear regression for trend\r\n    const n = dataPoints.length;\r\n    const sumX = dataPoints.reduce((sum, _, i) => sum + i, 0);\r\n    const sumY = dataPoints.reduce((sum, point) => sum + point.value, 0);\r\n    const sumXY = dataPoints.reduce((sum, point, i) => sum + (i * point.value), 0);\r\n    const sumXX = dataPoints.reduce((sum, _, i) => sum + (i * i), 0);\r\n    \r\n    const slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);\r\n    const strength = Math.abs(slope) / (sumY / n); // Normalized slope\r\n    const confidence = Math.min(n / 10, 1); // Confidence based on data points\r\n    \r\n    let direction: 'improving' | 'degrading' | 'stable' = 'stable';\r\n    if (Math.abs(slope) > 0.1) {\r\n      direction = slope > 0 ? 'improving' : 'degrading';\r\n    }\r\n    \r\n    return { direction, strength, confidence };\r\n  }\r\n\r\n  /**\r\n   * Generate forecast\r\n   * Generates forecast values based on historical data\r\n   * \r\n   * @param dataPoints - Historical data points\r\n   * @param periods - Number of periods to forecast\r\n   * @returns Forecast data\r\n   */\r\n  private generateForecast(\r\n    dataPoints: SecurityKPIDataPoint[],\r\n    periods: number\r\n  ): Array<{ timestamp: Date; value: number; confidence: number }> {\r\n    const forecast: Array<{ timestamp: Date; value: number; confidence: number }> = [];\r\n    \r\n    if (dataPoints.length < 3) return forecast;\r\n    \r\n    // Simple moving average forecast\r\n    const windowSize = Math.min(5, dataPoints.length);\r\n    const recentValues = dataPoints.slice(-windowSize).map(p => p.value);\r\n    const averageValue = recentValues.reduce((sum, val) => sum + val, 0) / recentValues.length;\r\n    \r\n    const lastTimestamp = dataPoints[dataPoints.length - 1].timestamp;\r\n    const intervalMs = dataPoints.length > 1 ? \r\n      dataPoints[dataPoints.length - 1].timestamp.getTime() - \r\n      dataPoints[dataPoints.length - 2].timestamp.getTime() : \r\n      60000; // Default 1 minute\r\n    \r\n    for (let i = 1; i <= periods; i++) {\r\n      const forecastTimestamp = new Date(lastTimestamp.getTime() + (i * intervalMs));\r\n      const confidence = Math.max(0.1, 1 - (i * 0.1)); // Decreasing confidence\r\n      \r\n      forecast.push({\r\n        timestamp: forecastTimestamp,\r\n        value: averageValue,\r\n        confidence\r\n      });\r\n    }\r\n    \r\n    return forecast;\r\n  }\r\n\r\n  /**\r\n   * Generate trend summary\r\n   * Creates human-readable trend summary\r\n   * \r\n   * @param trend - Trend analysis\r\n   * @param dataPoints - Data points\r\n   * @returns string Trend summary\r\n   */\r\n  private generateTrendSummary(\r\n    trend: { direction: string; strength: number; confidence: number },\r\n    dataPoints: SecurityKPIDataPoint[]\r\n  ): string {\r\n    const kpiName = dataPoints[0]?.kpiName || 'Unknown KPI';\r\n    const currentValue = dataPoints[dataPoints.length - 1]?.value || 0;\r\n    const previousValue = dataPoints[0]?.value || 0;\r\n    const change = ((currentValue - previousValue) / previousValue) * 100;\r\n    \r\n    return `${kpiName} is ${trend.direction} with ${Math.round(trend.strength * 100)}% strength ` +\r\n           `and ${Math.round(trend.confidence * 100)}% confidence. ` +\r\n           `Current value: ${currentValue.toFixed(2)}, Change: ${change.toFixed(1)}%`;\r\n  }\r\n\r\n  /**\r\n   * Calculate KPI summaries\r\n   * Calculates KPI summaries for report period\r\n   * \r\n   * @param startDate - Start date\r\n   * @param endDate - End date\r\n   * @returns Promise<Array> KPI summaries\r\n   */\r\n  private async calculateKPISummaries(startDate: Date, endDate: Date): Promise<Array<{\r\n    name: string;\r\n    current: number;\r\n    average: number;\r\n    min: number;\r\n    max: number;\r\n    trend: 'up' | 'down' | 'stable';\r\n    status: 'good' | 'warning' | 'critical';\r\n  }>> {\r\n    const summaries = [];\r\n    \r\n    for (const [kpiName] of this.kpiHistory) {\r\n      const periodData = this.getKPIHistory(kpiName, startDate)\r\n        .filter(point => point.timestamp <= endDate);\r\n      \r\n      if (periodData.length === 0) continue;\r\n      \r\n      const values = periodData.map(point => point.value);\r\n      const current = values[values.length - 1];\r\n      const average = values.reduce((sum, val) => sum + val, 0) / values.length;\r\n      const min = Math.min(...values);\r\n      const max = Math.max(...values);\r\n      \r\n      // Determine trend\r\n      const firstHalf = values.slice(0, Math.floor(values.length / 2));\r\n      const secondHalf = values.slice(Math.floor(values.length / 2));\r\n      const firstAvg = firstHalf.reduce((sum, val) => sum + val, 0) / firstHalf.length;\r\n      const secondAvg = secondHalf.reduce((sum, val) => sum + val, 0) / secondHalf.length;\r\n      \r\n      let trend: 'up' | 'down' | 'stable' = 'stable';\r\n      if (Math.abs(secondAvg - firstAvg) > average * 0.05) {\r\n        trend = secondAvg > firstAvg ? 'up' : 'down';\r\n      }\r\n      \r\n      // Determine status\r\n      let status: 'good' | 'warning' | 'critical' = 'good';\r\n      if (kpiName === 'security_score' && current < 80) status = 'warning';\r\n      if (kpiName === 'security_score' && current < 60) status = 'critical';\r\n      \r\n      summaries.push({\r\n        name: kpiName,\r\n        current,\r\n        average,\r\n        min,\r\n        max,\r\n        trend,\r\n        status\r\n      });\r\n    }\r\n    \r\n    return summaries;\r\n  }\r\n\r\n  /**\r\n   * Analyze threat data\r\n   * Analyzes threat data for report\r\n   * \r\n   * @param events - Security events\r\n   * @returns Threat analysis\r\n   */\r\n  private analyzeThreatData(events: SecurityEvent[]): {\r\n    totalThreats: number;\r\n    threatsByType: Record<string, number>;\r\n    threatsBySeverity: Record<string, number>;\r\n    topSources: Array<{ source: string; count: number }>;\r\n  } {\r\n    const threatEvents = events.filter(event => event.eventType === 'threat_detected');\r\n    \r\n    const threatsByType: Record<string, number> = {};\r\n    const threatsBySeverity: Record<string, number> = {};\r\n    const sourceCount: Record<string, number> = {};\r\n    \r\n    threatEvents.forEach(event => {\r\n      // Count by type\r\n      threatsByType[event.eventType] = (threatsByType[event.eventType] || 0) + 1;\r\n      \r\n      // Count by severity\r\n      const severityRange = this.getSeverityRange(event.severity);\r\n      threatsBySeverity[severityRange] = (threatsBySeverity[severityRange] || 0) + 1;\r\n      \r\n      // Count by source\r\n      sourceCount[event.source] = (sourceCount[event.source] || 0) + 1;\r\n    });\r\n    \r\n    // Get top sources\r\n    const topSources = Object.entries(sourceCount)\r\n      .sort(([,a], [,b]) => b - a)\r\n      .slice(0, 10)\r\n      .map(([source, count]) => ({ source, count }));\r\n    \r\n    return {\r\n      totalThreats: threatEvents.length,\r\n      threatsByType,\r\n      threatsBySeverity,\r\n      topSources\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculate system performance\r\n   * Calculates system performance metrics\r\n   * \r\n   * @param events - Security events\r\n   * @returns System performance metrics\r\n   */\r\n  private calculateSystemPerformance(events: SecurityEvent[]): {\r\n    uptime: number;\r\n    averageResponseTime: number;\r\n    errorRate: number;\r\n    throughput: number;\r\n  } {\r\n    return {\r\n      uptime: this.calculateUptime(),\r\n      averageResponseTime: this.calculateAverageResponseTime(events),\r\n      errorRate: events.filter(e => e.status === 'resolved').length / Math.max(events.length, 1) * 100,\r\n      throughput: events.length / 24 // Events per hour (assuming 24-hour period)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generate recommendations\r\n   * Generates security recommendations based on analysis\r\n   * \r\n   * @param kpiSummaries - KPI summaries\r\n   * @param threatAnalysis - Threat analysis\r\n   * @returns string[] Recommendations\r\n   */\r\n  private generateRecommendations(\r\n    kpiSummaries: any[],\r\n    threatAnalysis: any\r\n  ): string[] {\r\n    const recommendations: string[] = [];\r\n    \r\n    // Check security score\r\n    const securityScore = kpiSummaries.find(kpi => kpi.name === 'security_score');\r\n    if (securityScore && securityScore.current < 80) {\r\n      recommendations.push('Security score is below optimal level. Review and strengthen security controls.');\r\n    }\r\n    \r\n    // Check threat detection rate\r\n    const threatRate = kpiSummaries.find(kpi => kpi.name === 'threat_detection_rate');\r\n    if (threatRate && threatRate.current > 10) {\r\n      recommendations.push('High threat detection rate indicates increased security risks. Investigate threat sources.');\r\n    }\r\n    \r\n    // Check response time\r\n    const responseTime = kpiSummaries.find(kpi => kpi.name === 'average_response_time');\r\n    if (responseTime && responseTime.current > 300) {\r\n      recommendations.push('Average response time is high. Consider automating more response procedures.');\r\n    }\r\n    \r\n    // Check threat patterns\r\n    if (threatAnalysis.totalThreats > 100) {\r\n      recommendations.push('High volume of threats detected. Consider implementing additional preventive measures.');\r\n    }\r\n    \r\n    return recommendations;\r\n  }\r\n\r\n  /**\r\n   * Calculate overall security score\r\n   * Calculates overall security score from KPI summaries\r\n   * \r\n   * @param kpiSummaries - KPI summaries\r\n   * @returns number Overall security score\r\n   */\r\n  private calculateOverallSecurityScore(kpiSummaries: any[]): number {\r\n    const securityScore = kpiSummaries.find(kpi => kpi.name === 'security_score');\r\n    return securityScore ? securityScore.current : 100;\r\n  }\r\n\r\n  /**\r\n   * Calculate audit completeness\r\n   * Calculates audit trail completeness\r\n   * \r\n   * @returns Promise<number> Audit completeness percentage\r\n   */\r\n  private async calculateAuditCompleteness(): Promise<number> {\r\n    // Implementation would check audit trail completeness\r\n    // For now, return a placeholder value\r\n    return 95;\r\n  }\r\n\r\n  /**\r\n   * Calculate data retention compliance\r\n   * Calculates data retention compliance\r\n   * \r\n   * @returns number Data retention compliance percentage\r\n   */\r\n  private calculateDataRetentionCompliance(): number {\r\n    // Implementation would check data retention policies\r\n    // For now, return a placeholder value\r\n    return 98;\r\n  }\r\n\r\n  /**\r\n   * Calculate access control compliance\r\n   * Calculates access control compliance\r\n   * \r\n   * @returns number Access control compliance percentage\r\n   */\r\n  private calculateAccessControlCompliance(): number {\r\n    // Implementation would check access control policies\r\n    // For now, return a placeholder value\r\n    return 92;\r\n  }\r\n\r\n  /**\r\n   * Calculate encryption compliance\r\n   * Calculates encryption compliance\r\n   * \r\n   * @returns number Encryption compliance percentage\r\n   */\r\n  private calculateEncryptionCompliance(): number {\r\n    // Implementation would check encryption usage\r\n    // For now, return a placeholder value\r\n    return 100;\r\n  }\r\n\r\n  /**\r\n   * Calculate incident response compliance\r\n   * Calculates incident response compliance\r\n   * \r\n   * @returns number Incident response compliance percentage\r\n   */\r\n  private calculateIncidentResponseCompliance(): number {\r\n    // Implementation would check incident response procedures\r\n    // For now, return a placeholder value\r\n    return 88;\r\n  }\r\n\r\n  /**\r\n   * Identify compliance violations\r\n   * Identifies compliance violations\r\n   * \r\n   * @returns Promise<Array> Compliance violations\r\n   */\r\n  private async identifyComplianceViolations(): Promise<Array<{\r\n    type: string;\r\n    severity: 'low' | 'medium' | 'high';\r\n    description: string;\r\n    timestamp: Date;\r\n  }>> {\r\n    // Implementation would identify actual violations\r\n    // For now, return empty array\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * Get severity range\r\n   * Maps numeric severity to range\r\n   * \r\n   * @param severity - Numeric severity\r\n   * @returns string Severity range\r\n   */\r\n  private getSeverityRange(severity: number): string {\r\n    if (severity >= 9) return 'Critical (9-10)';\r\n    if (severity >= 7) return 'High (7-8)';\r\n    if (severity >= 5) return 'Medium (5-6)';\r\n    if (severity >= 3) return 'Low (3-4)';\r\n    return 'Minimal (1-2)';\r\n  }\r\n\r\n  /**\r\n   * Get total data points\r\n   * Returns total number of data points across all KPIs\r\n   * \r\n   * @returns number Total data points\r\n   */\r\n  private getTotalDataPoints(): number {\r\n    let total = 0;\r\n    for (const [, history] of this.kpiHistory) {\r\n      total += history.length;\r\n    }\r\n    return total;\r\n  }\r\n\r\n  /**\r\n   * Clean up old data\r\n   * Removes old data points beyond retention period\r\n   */\r\n  private cleanupOldData(): void {\r\n    const cutoffDate = new Date(Date.now() - (this.config.retentionPeriod * 24 * 60 * 60 * 1000));\r\n    \r\n    for (const [kpiName, history] of this.kpiHistory) {\r\n      const filteredHistory = history.filter(point => point.timestamp >= cutoffDate);\r\n      this.kpiHistory.set(kpiName, filteredHistory);\r\n    }\r\n    \r\n    // Clean up security events\r\n    this.securityEvents = this.securityEvents.filter(\r\n      event => event.timestamp >= cutoffDate\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get service status\r\n   * Returns current service status\r\n   * \r\n   * @returns Service status information\r\n   */\r\n  public getStatus(): {\r\n    isCollecting: boolean;\r\n    totalKPIs: number;\r\n    totalDataPoints: number;\r\n    uptime: number;\r\n    timestamp: number;\r\n  } {\r\n    return {\r\n      isCollecting: this.collectionInterval !== null,\r\n      totalKPIs: this.kpiHistory.size,\r\n      totalDataPoints: this.getTotalDataPoints(),\r\n      uptime: Date.now() - this.serviceStartTime.getTime(),\r\n      timestamp: Date.now()\r\n    };\r\n  }\r\n}\r\n\r\n// Create and export singleton instance\r\nexport const securityMetricsService = new SecurityMetricsService();\r\n\r\n// =============================================================================\r\n// SECURITY METRICS NOTES\r\n// =============================================================================\r\n// 1. Comprehensive KPI tracking for all security aspects\r\n// 2. Real-time metrics collection and analysis\r\n// 3. Trend analysis and forecasting capabilities\r\n// 4. Automated alerting on threshold violations\r\n// 5. Compliance metrics and violation tracking\r\n// 6. Performance reporting and recommendations\r\n// 7. Historical data retention and cleanup\r\n// 8. Integration with security monitoring and audit services\r\n// =============================================================================\r\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "25ddbe77721d92dae3b5d27597cf511076051432"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2frqskxxpc = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2frqskxxpc();
cov_2frqskxxpc().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2frqskxxpc().s[1]++;
exports.securityMetricsService = exports.SecurityMetricsService = void 0;
const events_1 =
/* istanbul ignore next */
(cov_2frqskxxpc().s[2]++, require("events"));
const logger_1 =
/* istanbul ignore next */
(cov_2frqskxxpc().s[3]++, require("@/core/logging/logger"));
const audit_service_1 =
/* istanbul ignore next */
(cov_2frqskxxpc().s[4]++, require("@/security/audit-service"));
/**
 * Security metrics and KPI tracking service
 * Provides comprehensive security performance measurement and analysis
 */
class SecurityMetricsService extends
/* istanbul ignore next */
(events_1.EventEmitter) {
  /** Service configuration */
  config;
  /** Historical KPI data */
  kpiHistory =
  /* istanbul ignore next */
  (cov_2frqskxxpc().s[5]++, new Map());
  /** Current KPI values */
  currentKPIs =
  /* istanbul ignore next */
  (cov_2frqskxxpc().s[6]++, new Map());
  /** Metrics collection interval */
  collectionInterval =
  /* istanbul ignore next */
  (cov_2frqskxxpc().s[7]++, null);
  /** Service start time */
  serviceStartTime =
  /* istanbul ignore next */
  (cov_2frqskxxpc().s[8]++, new Date());
  /** Security events for analysis */
  securityEvents =
  /* istanbul ignore next */
  (cov_2frqskxxpc().s[9]++, []);
  constructor(config) {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[0]++;
    cov_2frqskxxpc().s[10]++;
    super();
    // Initialize configuration with defaults
    /* istanbul ignore next */
    cov_2frqskxxpc().s[11]++;
    this.config = {
      collectionInterval: 60000,
      // 1 minute
      retentionPeriod: 90,
      // 90 days
      alertThresholds: {
        securityScoreMin: 80,
        threatDetectionRateMax: 10,
        // 10% of events
        falsePositiveRateMax: 5,
        // 5% false positives
        responseTimeMax: 300,
        // 5 minutes
        uptimeMin: 99.5 // 99.5% uptime
      },
      trendAnalysisWindow: 24 // 24 hours
    };
    // Merge with provided config
    /* istanbul ignore next */
    cov_2frqskxxpc().s[12]++;
    this.config = {
      ...this.config,
      ...config
    };
    // Initialize KPI tracking
    /* istanbul ignore next */
    cov_2frqskxxpc().s[13]++;
    this.initializeKPITracking();
    /* istanbul ignore next */
    cov_2frqskxxpc().s[14]++;
    logger_1.logger.info('📊 Security Metrics Service initialized');
  }
  /**
   * Start metrics collection
   * Begins continuous security metrics collection
   *
   * @returns Promise<void>
   */
  async startMetricsCollection() {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[1]++;
    cov_2frqskxxpc().s[15]++;
    try {
      /* istanbul ignore next */
      cov_2frqskxxpc().s[16]++;
      logger_1.logger.info('🚀 Starting security metrics collection...');
      // Start metrics collection interval
      /* istanbul ignore next */
      cov_2frqskxxpc().s[17]++;
      this.collectionInterval = setInterval(async () => {
        /* istanbul ignore next */
        cov_2frqskxxpc().f[2]++;
        cov_2frqskxxpc().s[18]++;
        try {
          /* istanbul ignore next */
          cov_2frqskxxpc().s[19]++;
          await this.collectSecurityMetrics();
        } catch (error) {
          /* istanbul ignore next */
          cov_2frqskxxpc().s[20]++;
          logger_1.logger.error('❌ Metrics collection error:', error);
        }
      }, this.config.collectionInterval);
      // Perform initial metrics collection
      /* istanbul ignore next */
      cov_2frqskxxpc().s[21]++;
      await this.collectSecurityMetrics();
      // Create audit entry
      /* istanbul ignore next */
      cov_2frqskxxpc().s[22]++;
      await audit_service_1.auditService.createAuditEntry({
        auditId: `metrics_start_${Date.now()}`,
        eventType: 'SECURITY_METRICS_START',
        actor: 'SYSTEM',
        resource: 'SECURITY_METRICS_SERVICE',
        action: 'START_COLLECTION',
        result: 'SUCCESS',
        timestamp: new Date(),
        auditData: {
          config: this.config,
          startTime: this.serviceStartTime
        }
      });
      /* istanbul ignore next */
      cov_2frqskxxpc().s[23]++;
      logger_1.logger.info('✅ Security metrics collection started successfully');
    } catch (error) {
      /* istanbul ignore next */
      cov_2frqskxxpc().s[24]++;
      logger_1.logger.error('❌ Failed to start metrics collection:', error);
      /* istanbul ignore next */
      cov_2frqskxxpc().s[25]++;
      throw new Error('Security metrics collection startup failed');
    }
  }
  /**
   * Stop metrics collection
   * Stops continuous security metrics collection
   *
   * @returns Promise<void>
   */
  async stopMetricsCollection() {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[3]++;
    cov_2frqskxxpc().s[26]++;
    try {
      /* istanbul ignore next */
      cov_2frqskxxpc().s[27]++;
      logger_1.logger.info('🛑 Stopping security metrics collection...');
      // Stop collection interval
      /* istanbul ignore next */
      cov_2frqskxxpc().s[28]++;
      if (this.collectionInterval) {
        /* istanbul ignore next */
        cov_2frqskxxpc().b[0][0]++;
        cov_2frqskxxpc().s[29]++;
        clearInterval(this.collectionInterval);
        /* istanbul ignore next */
        cov_2frqskxxpc().s[30]++;
        this.collectionInterval = null;
      } else
      /* istanbul ignore next */
      {
        cov_2frqskxxpc().b[0][1]++;
      }
      // Create audit entry
      cov_2frqskxxpc().s[31]++;
      await audit_service_1.auditService.createAuditEntry({
        auditId: `metrics_stop_${Date.now()}`,
        eventType: 'SECURITY_METRICS_STOP',
        actor: 'SYSTEM',
        resource: 'SECURITY_METRICS_SERVICE',
        action: 'STOP_COLLECTION',
        result: 'SUCCESS',
        timestamp: new Date(),
        auditData: {
          uptime: Date.now() - this.serviceStartTime.getTime(),
          totalDataPoints: this.getTotalDataPoints()
        }
      });
      /* istanbul ignore next */
      cov_2frqskxxpc().s[32]++;
      logger_1.logger.info('✅ Security metrics collection stopped successfully');
    } catch (error) {
      /* istanbul ignore next */
      cov_2frqskxxpc().s[33]++;
      logger_1.logger.error('❌ Failed to stop metrics collection:', error);
      /* istanbul ignore next */
      cov_2frqskxxpc().s[34]++;
      throw new Error('Security metrics collection shutdown failed');
    }
  }
  /**
   * Record security event
   * Records security event for metrics analysis
   *
   * @param event - Security event to record
   * @returns Promise<void>
   */
  async recordSecurityEvent(event) {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[4]++;
    cov_2frqskxxpc().s[35]++;
    try {
      /* istanbul ignore next */
      cov_2frqskxxpc().s[36]++;
      // Add to events history
      this.securityEvents.push(event);
      // Maintain event history size (last 10,000 events)
      /* istanbul ignore next */
      cov_2frqskxxpc().s[37]++;
      if (this.securityEvents.length > 10000) {
        /* istanbul ignore next */
        cov_2frqskxxpc().b[1][0]++;
        cov_2frqskxxpc().s[38]++;
        this.securityEvents.shift();
      } else
      /* istanbul ignore next */
      {
        cov_2frqskxxpc().b[1][1]++;
      }
      // Update real-time metrics
      cov_2frqskxxpc().s[39]++;
      await this.updateRealTimeMetrics(event);
    } catch (error) {
      /* istanbul ignore next */
      cov_2frqskxxpc().s[40]++;
      logger_1.logger.error('❌ Failed to record security event:', error);
    }
  }
  /**
   * Get current security metrics
   * Returns current security KPIs and metrics
   *
   * @returns SecurityMetrics Current security metrics
   */
  getCurrentSecurityMetrics() {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[5]++;
    const now =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[41]++, new Date());
    const oneHourAgo =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[42]++, new Date(now.getTime() - 60 * 60 * 1000));
    // Filter recent events
    const recentEvents =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[43]++, this.securityEvents.filter(event => {
      /* istanbul ignore next */
      cov_2frqskxxpc().f[6]++;
      cov_2frqskxxpc().s[44]++;
      return event.timestamp >= oneHourAgo;
    }));
    // Calculate metrics
    const totalEvents =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[45]++, recentEvents.length);
    const threatEvents =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[46]++, recentEvents.filter(event => {
      /* istanbul ignore next */
      cov_2frqskxxpc().f[7]++;
      cov_2frqskxxpc().s[47]++;
      return event.eventType === 'threat_detected';
    }));
    // Events by severity
    const eventsBySeverity =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[48]++, {});
    /* istanbul ignore next */
    cov_2frqskxxpc().s[49]++;
    recentEvents.forEach(event => {
      /* istanbul ignore next */
      cov_2frqskxxpc().f[8]++;
      cov_2frqskxxpc().s[50]++;
      eventsBySeverity[event.severity] = (
      /* istanbul ignore next */
      (cov_2frqskxxpc().b[2][0]++, eventsBySeverity[event.severity]) ||
      /* istanbul ignore next */
      (cov_2frqskxxpc().b[2][1]++, 0)) + 1;
    });
    // Events by type
    const eventsByType =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[51]++, {});
    /* istanbul ignore next */
    cov_2frqskxxpc().s[52]++;
    recentEvents.forEach(event => {
      /* istanbul ignore next */
      cov_2frqskxxpc().f[9]++;
      cov_2frqskxxpc().s[53]++;
      eventsByType[event.eventType] = (
      /* istanbul ignore next */
      (cov_2frqskxxpc().b[3][0]++, eventsByType[event.eventType]) ||
      /* istanbul ignore next */
      (cov_2frqskxxpc().b[3][1]++, 0)) + 1;
    });
    // Calculate rates
    const threatDetectionRate =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[54]++, totalEvents > 0 ?
    /* istanbul ignore next */
    (cov_2frqskxxpc().b[4][0]++, threatEvents.length / totalEvents * 100) :
    /* istanbul ignore next */
    (cov_2frqskxxpc().b[4][1]++, 0));
    const falsePositiveRate =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[55]++, this.calculateFalsePositiveRate(recentEvents));
    const averageResponseTime =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[56]++, this.calculateAverageResponseTime(recentEvents));
    const securityScore =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[57]++, this.calculateSecurityScore(recentEvents));
    const monitoringUptime =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[58]++, this.calculateUptime());
    /* istanbul ignore next */
    cov_2frqskxxpc().s[59]++;
    return {
      totalEvents,
      eventsBySeverity,
      eventsByType,
      threatDetectionRate,
      falsePositiveRate,
      averageResponseTime,
      securityScore,
      monitoringUptime,
      lastUpdate: now
    };
  }
  /**
   * Get security trend analysis
   * Analyzes security trends over time
   *
   * @param kpiName - KPI to analyze
   * @param windowHours - Analysis window in hours
   * @returns Promise<SecurityTrendAnalysis> Trend analysis
   */
  async getSecurityTrendAnalysis(kpiName, windowHours =
  /* istanbul ignore next */
  (cov_2frqskxxpc().b[5][0]++, this.config.trendAnalysisWindow)) {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[10]++;
    cov_2frqskxxpc().s[60]++;
    try {
      const windowStart =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[61]++, new Date(Date.now() - windowHours * 60 * 60 * 1000));
      const dataPoints =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[62]++, this.getKPIHistory(kpiName, windowStart));
      /* istanbul ignore next */
      cov_2frqskxxpc().s[63]++;
      if (dataPoints.length < 3) {
        /* istanbul ignore next */
        cov_2frqskxxpc().b[6][0]++;
        cov_2frqskxxpc().s[64]++;
        return {
          kpiName,
          trend: 'stable',
          strength: 0,
          confidence: 0,
          dataPoints,
          forecast: [],
          summary: 'Insufficient data for trend analysis'
        };
      } else
      /* istanbul ignore next */
      {
        cov_2frqskxxpc().b[6][1]++;
      }
      // Calculate trend
      const trend =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[65]++, this.calculateTrend(dataPoints));
      const forecast =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[66]++, this.generateForecast(dataPoints, 6)); // 6 hour forecast
      /* istanbul ignore next */
      cov_2frqskxxpc().s[67]++;
      return {
        kpiName,
        trend: trend.direction,
        strength: trend.strength,
        confidence: trend.confidence,
        dataPoints,
        forecast,
        summary: this.generateTrendSummary(trend, dataPoints)
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2frqskxxpc().s[68]++;
      logger_1.logger.error('❌ Failed to analyze security trend:', error);
      /* istanbul ignore next */
      cov_2frqskxxpc().s[69]++;
      throw new Error('Security trend analysis failed');
    }
  }
  /**
   * Generate security performance report
   * Creates comprehensive security performance report
   *
   * @param startDate - Report start date
   * @param endDate - Report end date
   * @returns Promise<SecurityPerformanceReport> Performance report
   */
  async generateSecurityPerformanceReport(startDate, endDate) {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[11]++;
    cov_2frqskxxpc().s[70]++;
    try {
      const periodEvents =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[71]++, this.securityEvents.filter(event => {
        /* istanbul ignore next */
        cov_2frqskxxpc().f[12]++;
        cov_2frqskxxpc().s[72]++;
        return /* istanbul ignore next */(cov_2frqskxxpc().b[7][0]++, event.timestamp >= startDate) &&
        /* istanbul ignore next */
        (cov_2frqskxxpc().b[7][1]++, event.timestamp <= endDate);
      }));
      // Calculate KPI summaries
      const kpiSummaries =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[73]++, await this.calculateKPISummaries(startDate, endDate));
      // Analyze threats
      const threatAnalysis =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[74]++, this.analyzeThreatData(periodEvents));
      // Calculate system performance
      const systemPerformance =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[75]++, this.calculateSystemPerformance(periodEvents));
      // Generate recommendations
      const recommendations =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[76]++, this.generateRecommendations(kpiSummaries, threatAnalysis));
      // Calculate overall score
      const overallScore =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[77]++, this.calculateOverallSecurityScore(kpiSummaries));
      /* istanbul ignore next */
      cov_2frqskxxpc().s[78]++;
      return {
        period: {
          start: startDate,
          end: endDate
        },
        overallScore,
        kpiSummaries,
        threatAnalysis,
        systemPerformance,
        recommendations
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2frqskxxpc().s[79]++;
      logger_1.logger.error('❌ Failed to generate performance report:', error);
      /* istanbul ignore next */
      cov_2frqskxxpc().s[80]++;
      throw new Error('Security performance report generation failed');
    }
  }
  /**
   * Get compliance metrics
   * Returns current compliance metrics and status
   *
   * @returns Promise<ComplianceMetrics> Compliance metrics
   */
  async getComplianceMetrics() {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[13]++;
    cov_2frqskxxpc().s[81]++;
    try {
      // Calculate compliance scores
      const auditCompleteness =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[82]++, await this.calculateAuditCompleteness());
      const dataRetentionCompliance =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[83]++, this.calculateDataRetentionCompliance());
      const accessControlCompliance =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[84]++, this.calculateAccessControlCompliance());
      const encryptionCompliance =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[85]++, this.calculateEncryptionCompliance());
      const incidentResponseCompliance =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[86]++, this.calculateIncidentResponseCompliance());
      // Calculate overall compliance
      const overallCompliance =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[87]++, (auditCompleteness + dataRetentionCompliance + accessControlCompliance + encryptionCompliance + incidentResponseCompliance) / 5);
      // Identify violations
      const violations =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[88]++, await this.identifyComplianceViolations());
      /* istanbul ignore next */
      cov_2frqskxxpc().s[89]++;
      return {
        auditCompleteness,
        dataRetentionCompliance,
        accessControlCompliance,
        encryptionCompliance,
        incidentResponseCompliance,
        overallCompliance,
        violations
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2frqskxxpc().s[90]++;
      logger_1.logger.error('❌ Failed to get compliance metrics:', error);
      /* istanbul ignore next */
      cov_2frqskxxpc().s[91]++;
      throw new Error('Compliance metrics calculation failed');
    }
  }
  /**
   * Initialize KPI tracking
   * Sets up KPI tracking infrastructure
   */
  initializeKPITracking() {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[14]++;
    // Initialize KPI history maps
    const kpiNames =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[92]++, ['security_score', 'threat_detection_rate', 'false_positive_rate', 'average_response_time', 'system_uptime', 'event_volume', 'incident_count', 'compliance_score']);
    /* istanbul ignore next */
    cov_2frqskxxpc().s[93]++;
    kpiNames.forEach(kpiName => {
      /* istanbul ignore next */
      cov_2frqskxxpc().f[15]++;
      cov_2frqskxxpc().s[94]++;
      this.kpiHistory.set(kpiName, []);
    });
  }
  /**
   * Collect security metrics
   * Collects current security metrics and KPIs
   *
   * @returns Promise<void>
   */
  async collectSecurityMetrics() {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[16]++;
    cov_2frqskxxpc().s[95]++;
    try {
      const now =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[96]++, new Date());
      const metrics =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[97]++, this.getCurrentSecurityMetrics());
      // Create KPI data points
      const kpiDataPoints =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[98]++, [{
        timestamp: now,
        kpiName: 'security_score',
        value: metrics.securityScore,
        unit: 'score',
        category: 'performance',
        metadata: {
          totalEvents: metrics.totalEvents
        }
      }, {
        timestamp: now,
        kpiName: 'threat_detection_rate',
        value: metrics.threatDetectionRate,
        unit: 'percentage',
        category: 'threat',
        metadata: {
          totalEvents: metrics.totalEvents
        }
      }, {
        timestamp: now,
        kpiName: 'false_positive_rate',
        value: metrics.falsePositiveRate,
        unit: 'percentage',
        category: 'performance',
        metadata: {}
      }, {
        timestamp: now,
        kpiName: 'average_response_time',
        value: metrics.averageResponseTime,
        unit: 'seconds',
        category: 'performance',
        metadata: {}
      }, {
        timestamp: now,
        kpiName: 'system_uptime',
        value: metrics.monitoringUptime,
        unit: 'percentage',
        category: 'system',
        metadata: {}
      }]);
      // Store KPI data points
      /* istanbul ignore next */
      cov_2frqskxxpc().s[99]++;
      for (const dataPoint of kpiDataPoints) {
        /* istanbul ignore next */
        cov_2frqskxxpc().s[100]++;
        this.storeKPIDataPoint(dataPoint);
        /* istanbul ignore next */
        cov_2frqskxxpc().s[101]++;
        this.currentKPIs.set(dataPoint.kpiName, dataPoint);
        // Check alert thresholds
        /* istanbul ignore next */
        cov_2frqskxxpc().s[102]++;
        await this.checkKPIThresholds(dataPoint);
      }
      // Clean up old data
      /* istanbul ignore next */
      cov_2frqskxxpc().s[103]++;
      this.cleanupOldData();
    } catch (error) {
      /* istanbul ignore next */
      cov_2frqskxxpc().s[104]++;
      logger_1.logger.error('❌ Failed to collect security metrics:', error);
    }
  }
  /**
   * Update real-time metrics
   * Updates metrics based on new security event
   *
   * @param event - Security event
   * @returns Promise<void>
   */
  async updateRealTimeMetrics(event) {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[17]++;
    // Update event volume metric
    const eventVolumeKPI =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[105]++, {
      timestamp: new Date(),
      kpiName: 'event_volume',
      value: this.securityEvents.length,
      unit: 'count',
      category: 'system',
      metadata: {
        eventType: event.eventType,
        severity: event.severity
      }
    });
    /* istanbul ignore next */
    cov_2frqskxxpc().s[106]++;
    this.storeKPIDataPoint(eventVolumeKPI);
    /* istanbul ignore next */
    cov_2frqskxxpc().s[107]++;
    this.currentKPIs.set('event_volume', eventVolumeKPI);
    // Update incident count for high-severity events
    /* istanbul ignore next */
    cov_2frqskxxpc().s[108]++;
    if (event.severity >= 7) {
      /* istanbul ignore next */
      cov_2frqskxxpc().b[8][0]++;
      const incidentCountKPI =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[109]++, {
        timestamp: new Date(),
        kpiName: 'incident_count',
        value: this.securityEvents.filter(e => {
          /* istanbul ignore next */
          cov_2frqskxxpc().f[18]++;
          cov_2frqskxxpc().s[110]++;
          return e.severity >= 7;
        }).length,
        unit: 'count',
        category: 'threat',
        metadata: {
          severity: event.severity
        }
      });
      /* istanbul ignore next */
      cov_2frqskxxpc().s[111]++;
      this.storeKPIDataPoint(incidentCountKPI);
      /* istanbul ignore next */
      cov_2frqskxxpc().s[112]++;
      this.currentKPIs.set('incident_count', incidentCountKPI);
    } else
    /* istanbul ignore next */
    {
      cov_2frqskxxpc().b[8][1]++;
    }
  }
  /**
   * Store KPI data point
   * Stores KPI data point in history
   *
   * @param dataPoint - KPI data point to store
   */
  storeKPIDataPoint(dataPoint) {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[19]++;
    const history =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[113]++,
    /* istanbul ignore next */
    (cov_2frqskxxpc().b[9][0]++, this.kpiHistory.get(dataPoint.kpiName)) ||
    /* istanbul ignore next */
    (cov_2frqskxxpc().b[9][1]++, []));
    /* istanbul ignore next */
    cov_2frqskxxpc().s[114]++;
    history.push(dataPoint);
    // Maintain history size (keep last 10,000 points per KPI)
    /* istanbul ignore next */
    cov_2frqskxxpc().s[115]++;
    if (history.length > 10000) {
      /* istanbul ignore next */
      cov_2frqskxxpc().b[10][0]++;
      cov_2frqskxxpc().s[116]++;
      history.shift();
    } else
    /* istanbul ignore next */
    {
      cov_2frqskxxpc().b[10][1]++;
    }
    cov_2frqskxxpc().s[117]++;
    this.kpiHistory.set(dataPoint.kpiName, history);
  }
  /**
   * Get KPI history
   * Retrieves KPI history for specified period
   *
   * @param kpiName - KPI name
   * @param startDate - Start date
   * @returns SecurityKPIDataPoint[] KPI history
   */
  getKPIHistory(kpiName, startDate) {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[20]++;
    const history =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[118]++,
    /* istanbul ignore next */
    (cov_2frqskxxpc().b[11][0]++, this.kpiHistory.get(kpiName)) ||
    /* istanbul ignore next */
    (cov_2frqskxxpc().b[11][1]++, []));
    /* istanbul ignore next */
    cov_2frqskxxpc().s[119]++;
    return history.filter(point => {
      /* istanbul ignore next */
      cov_2frqskxxpc().f[21]++;
      cov_2frqskxxpc().s[120]++;
      return point.timestamp >= startDate;
    });
  }
  /**
   * Check KPI thresholds
   * Checks KPI against alert thresholds
   *
   * @param dataPoint - KPI data point
   * @returns Promise<void>
   */
  async checkKPIThresholds(dataPoint) {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[22]++;
    const thresholds =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[121]++, this.config.alertThresholds);
    let alertTriggered =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[122]++, false);
    let alertMessage =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[123]++, '');
    /* istanbul ignore next */
    cov_2frqskxxpc().s[124]++;
    switch (dataPoint.kpiName) {
      case 'security_score':
        /* istanbul ignore next */
        cov_2frqskxxpc().b[12][0]++;
        cov_2frqskxxpc().s[125]++;
        if (dataPoint.value < thresholds.securityScoreMin) {
          /* istanbul ignore next */
          cov_2frqskxxpc().b[13][0]++;
          cov_2frqskxxpc().s[126]++;
          alertTriggered = true;
          /* istanbul ignore next */
          cov_2frqskxxpc().s[127]++;
          alertMessage = `Security score (${dataPoint.value}) below threshold (${thresholds.securityScoreMin})`;
        } else
        /* istanbul ignore next */
        {
          cov_2frqskxxpc().b[13][1]++;
        }
        cov_2frqskxxpc().s[128]++;
        break;
      case 'threat_detection_rate':
        /* istanbul ignore next */
        cov_2frqskxxpc().b[12][1]++;
        cov_2frqskxxpc().s[129]++;
        if (dataPoint.value > thresholds.threatDetectionRateMax) {
          /* istanbul ignore next */
          cov_2frqskxxpc().b[14][0]++;
          cov_2frqskxxpc().s[130]++;
          alertTriggered = true;
          /* istanbul ignore next */
          cov_2frqskxxpc().s[131]++;
          alertMessage = `Threat detection rate (${dataPoint.value}%) above threshold (${thresholds.threatDetectionRateMax}%)`;
        } else
        /* istanbul ignore next */
        {
          cov_2frqskxxpc().b[14][1]++;
        }
        cov_2frqskxxpc().s[132]++;
        break;
      case 'false_positive_rate':
        /* istanbul ignore next */
        cov_2frqskxxpc().b[12][2]++;
        cov_2frqskxxpc().s[133]++;
        if (dataPoint.value > thresholds.falsePositiveRateMax) {
          /* istanbul ignore next */
          cov_2frqskxxpc().b[15][0]++;
          cov_2frqskxxpc().s[134]++;
          alertTriggered = true;
          /* istanbul ignore next */
          cov_2frqskxxpc().s[135]++;
          alertMessage = `False positive rate (${dataPoint.value}%) above threshold (${thresholds.falsePositiveRateMax}%)`;
        } else
        /* istanbul ignore next */
        {
          cov_2frqskxxpc().b[15][1]++;
        }
        cov_2frqskxxpc().s[136]++;
        break;
      case 'average_response_time':
        /* istanbul ignore next */
        cov_2frqskxxpc().b[12][3]++;
        cov_2frqskxxpc().s[137]++;
        if (dataPoint.value > thresholds.responseTimeMax) {
          /* istanbul ignore next */
          cov_2frqskxxpc().b[16][0]++;
          cov_2frqskxxpc().s[138]++;
          alertTriggered = true;
          /* istanbul ignore next */
          cov_2frqskxxpc().s[139]++;
          alertMessage = `Average response time (${dataPoint.value}s) above threshold (${thresholds.responseTimeMax}s)`;
        } else
        /* istanbul ignore next */
        {
          cov_2frqskxxpc().b[16][1]++;
        }
        cov_2frqskxxpc().s[140]++;
        break;
      case 'system_uptime':
        /* istanbul ignore next */
        cov_2frqskxxpc().b[12][4]++;
        cov_2frqskxxpc().s[141]++;
        if (dataPoint.value < thresholds.uptimeMin) {
          /* istanbul ignore next */
          cov_2frqskxxpc().b[17][0]++;
          cov_2frqskxxpc().s[142]++;
          alertTriggered = true;
          /* istanbul ignore next */
          cov_2frqskxxpc().s[143]++;
          alertMessage = `System uptime (${dataPoint.value}%) below threshold (${thresholds.uptimeMin}%)`;
        } else
        /* istanbul ignore next */
        {
          cov_2frqskxxpc().b[17][1]++;
        }
        cov_2frqskxxpc().s[144]++;
        break;
    }
    /* istanbul ignore next */
    cov_2frqskxxpc().s[145]++;
    if (alertTriggered) {
      /* istanbul ignore next */
      cov_2frqskxxpc().b[18][0]++;
      cov_2frqskxxpc().s[146]++;
      logger_1.logger.warn('📊 KPI THRESHOLD ALERT', {
        kpiName: dataPoint.kpiName,
        value: dataPoint.value,
        message: alertMessage
      });
      /* istanbul ignore next */
      cov_2frqskxxpc().s[147]++;
      this.emit('kpiAlert', {
        kpiName: dataPoint.kpiName,
        value: dataPoint.value,
        message: alertMessage,
        timestamp: dataPoint.timestamp
      });
    } else
    /* istanbul ignore next */
    {
      cov_2frqskxxpc().b[18][1]++;
    }
  }
  /**
   * Calculate false positive rate
   * Calculates false positive rate from events
   *
   * @param events - Security events
   * @returns number False positive rate
   */
  calculateFalsePositiveRate(events) {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[23]++;
    const resolvedEvents =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[148]++, events.filter(event => {
      /* istanbul ignore next */
      cov_2frqskxxpc().f[24]++;
      cov_2frqskxxpc().s[149]++;
      return event.status === 'resolved';
    }));
    const falsePositives =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[150]++, resolvedEvents.filter(event => {
      /* istanbul ignore next */
      cov_2frqskxxpc().f[25]++;
      cov_2frqskxxpc().s[151]++;
      return event.responseActions.includes('Mark as false positive');
    }));
    /* istanbul ignore next */
    cov_2frqskxxpc().s[152]++;
    return resolvedEvents.length > 0 ?
    /* istanbul ignore next */
    (cov_2frqskxxpc().b[19][0]++, falsePositives.length / resolvedEvents.length * 100) :
    /* istanbul ignore next */
    (cov_2frqskxxpc().b[19][1]++, 0);
  }
  /**
   * Calculate average response time
   * Calculates average response time for events
   *
   * @param events - Security events
   * @returns number Average response time in seconds
   */
  calculateAverageResponseTime(events) {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[26]++;
    const respondedEvents =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[153]++, events.filter(event => {
      /* istanbul ignore next */
      cov_2frqskxxpc().f[27]++;
      cov_2frqskxxpc().s[154]++;
      return /* istanbul ignore next */(cov_2frqskxxpc().b[20][0]++, event.status === 'resolved') ||
      /* istanbul ignore next */
      (cov_2frqskxxpc().b[20][1]++, event.status === 'contained');
    }));
    /* istanbul ignore next */
    cov_2frqskxxpc().s[155]++;
    if (respondedEvents.length === 0) {
      /* istanbul ignore next */
      cov_2frqskxxpc().b[21][0]++;
      cov_2frqskxxpc().s[156]++;
      return 0;
    } else
    /* istanbul ignore next */
    {
      cov_2frqskxxpc().b[21][1]++;
    }
    const totalResponseTime =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[157]++, respondedEvents.reduce((total, event) => {
      /* istanbul ignore next */
      cov_2frqskxxpc().f[28]++;
      cov_2frqskxxpc().s[158]++;
      // Simulate response time calculation
      // In real implementation, this would track actual response times
      return total + event.severity * 30; // Rough estimate based on severity
    }, 0));
    /* istanbul ignore next */
    cov_2frqskxxpc().s[159]++;
    return totalResponseTime / respondedEvents.length;
  }
  /**
   * Calculate security score
   * Calculates overall security score based on events
   *
   * @param events - Security events
   * @returns number Security score (0-100)
   */
  calculateSecurityScore(events) {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[29]++;
    cov_2frqskxxpc().s[160]++;
    if (events.length === 0) {
      /* istanbul ignore next */
      cov_2frqskxxpc().b[22][0]++;
      cov_2frqskxxpc().s[161]++;
      return 100;
    } else
    /* istanbul ignore next */
    {
      cov_2frqskxxpc().b[22][1]++;
    }
    const severitySum =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[162]++, events.reduce((sum, event) => {
      /* istanbul ignore next */
      cov_2frqskxxpc().f[30]++;
      cov_2frqskxxpc().s[163]++;
      return sum + event.severity;
    }, 0));
    const averageSeverity =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[164]++, severitySum / events.length);
    // Convert average severity to security score (inverse relationship)
    /* istanbul ignore next */
    cov_2frqskxxpc().s[165]++;
    return Math.max(0, 100 - averageSeverity * 10);
  }
  /**
   * Calculate uptime
   * Calculates system uptime percentage
   *
   * @returns number Uptime percentage
   */
  calculateUptime() {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[31]++;
    const totalTime =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[166]++, Date.now() - this.serviceStartTime.getTime());
    // In real implementation, this would track actual downtime
    // For now, assume 99.9% uptime
    /* istanbul ignore next */
    cov_2frqskxxpc().s[167]++;
    return 99.9;
  }
  /**
   * Calculate trend
   * Calculates trend direction and strength from data points
   *
   * @param dataPoints - KPI data points
   * @returns Trend analysis
   */
  calculateTrend(dataPoints) {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[32]++;
    cov_2frqskxxpc().s[168]++;
    if (dataPoints.length < 2) {
      /* istanbul ignore next */
      cov_2frqskxxpc().b[23][0]++;
      cov_2frqskxxpc().s[169]++;
      return {
        direction: 'stable',
        strength: 0,
        confidence: 0
      };
    } else
    /* istanbul ignore next */
    {
      cov_2frqskxxpc().b[23][1]++;
    }
    // Simple linear regression for trend
    const n =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[170]++, dataPoints.length);
    const sumX =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[171]++, dataPoints.reduce((sum, _, i) => {
      /* istanbul ignore next */
      cov_2frqskxxpc().f[33]++;
      cov_2frqskxxpc().s[172]++;
      return sum + i;
    }, 0));
    const sumY =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[173]++, dataPoints.reduce((sum, point) => {
      /* istanbul ignore next */
      cov_2frqskxxpc().f[34]++;
      cov_2frqskxxpc().s[174]++;
      return sum + point.value;
    }, 0));
    const sumXY =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[175]++, dataPoints.reduce((sum, point, i) => {
      /* istanbul ignore next */
      cov_2frqskxxpc().f[35]++;
      cov_2frqskxxpc().s[176]++;
      return sum + i * point.value;
    }, 0));
    const sumXX =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[177]++, dataPoints.reduce((sum, _, i) => {
      /* istanbul ignore next */
      cov_2frqskxxpc().f[36]++;
      cov_2frqskxxpc().s[178]++;
      return sum + i * i;
    }, 0));
    const slope =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[179]++, (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX));
    const strength =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[180]++, Math.abs(slope) / (sumY / n)); // Normalized slope
    const confidence =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[181]++, Math.min(n / 10, 1)); // Confidence based on data points
    let direction =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[182]++, 'stable');
    /* istanbul ignore next */
    cov_2frqskxxpc().s[183]++;
    if (Math.abs(slope) > 0.1) {
      /* istanbul ignore next */
      cov_2frqskxxpc().b[24][0]++;
      cov_2frqskxxpc().s[184]++;
      direction = slope > 0 ?
      /* istanbul ignore next */
      (cov_2frqskxxpc().b[25][0]++, 'improving') :
      /* istanbul ignore next */
      (cov_2frqskxxpc().b[25][1]++, 'degrading');
    } else
    /* istanbul ignore next */
    {
      cov_2frqskxxpc().b[24][1]++;
    }
    cov_2frqskxxpc().s[185]++;
    return {
      direction,
      strength,
      confidence
    };
  }
  /**
   * Generate forecast
   * Generates forecast values based on historical data
   *
   * @param dataPoints - Historical data points
   * @param periods - Number of periods to forecast
   * @returns Forecast data
   */
  generateForecast(dataPoints, periods) {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[37]++;
    const forecast =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[186]++, []);
    /* istanbul ignore next */
    cov_2frqskxxpc().s[187]++;
    if (dataPoints.length < 3) {
      /* istanbul ignore next */
      cov_2frqskxxpc().b[26][0]++;
      cov_2frqskxxpc().s[188]++;
      return forecast;
    } else
    /* istanbul ignore next */
    {
      cov_2frqskxxpc().b[26][1]++;
    }
    // Simple moving average forecast
    const windowSize =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[189]++, Math.min(5, dataPoints.length));
    const recentValues =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[190]++, dataPoints.slice(-windowSize).map(p => {
      /* istanbul ignore next */
      cov_2frqskxxpc().f[38]++;
      cov_2frqskxxpc().s[191]++;
      return p.value;
    }));
    const averageValue =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[192]++, recentValues.reduce((sum, val) => {
      /* istanbul ignore next */
      cov_2frqskxxpc().f[39]++;
      cov_2frqskxxpc().s[193]++;
      return sum + val;
    }, 0) / recentValues.length);
    const lastTimestamp =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[194]++, dataPoints[dataPoints.length - 1].timestamp);
    const intervalMs =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[195]++, dataPoints.length > 1 ?
    /* istanbul ignore next */
    (cov_2frqskxxpc().b[27][0]++, dataPoints[dataPoints.length - 1].timestamp.getTime() - dataPoints[dataPoints.length - 2].timestamp.getTime()) :
    /* istanbul ignore next */
    (cov_2frqskxxpc().b[27][1]++, 60000)); // Default 1 minute
    /* istanbul ignore next */
    cov_2frqskxxpc().s[196]++;
    for (let i =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[197]++, 1); i <= periods; i++) {
      const forecastTimestamp =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[198]++, new Date(lastTimestamp.getTime() + i * intervalMs));
      const confidence =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[199]++, Math.max(0.1, 1 - i * 0.1)); // Decreasing confidence
      /* istanbul ignore next */
      cov_2frqskxxpc().s[200]++;
      forecast.push({
        timestamp: forecastTimestamp,
        value: averageValue,
        confidence
      });
    }
    /* istanbul ignore next */
    cov_2frqskxxpc().s[201]++;
    return forecast;
  }
  /**
   * Generate trend summary
   * Creates human-readable trend summary
   *
   * @param trend - Trend analysis
   * @param dataPoints - Data points
   * @returns string Trend summary
   */
  generateTrendSummary(trend, dataPoints) {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[40]++;
    const kpiName =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[202]++,
    /* istanbul ignore next */
    (cov_2frqskxxpc().b[28][0]++, dataPoints[0]?.kpiName) ||
    /* istanbul ignore next */
    (cov_2frqskxxpc().b[28][1]++, 'Unknown KPI'));
    const currentValue =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[203]++,
    /* istanbul ignore next */
    (cov_2frqskxxpc().b[29][0]++, dataPoints[dataPoints.length - 1]?.value) ||
    /* istanbul ignore next */
    (cov_2frqskxxpc().b[29][1]++, 0));
    const previousValue =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[204]++,
    /* istanbul ignore next */
    (cov_2frqskxxpc().b[30][0]++, dataPoints[0]?.value) ||
    /* istanbul ignore next */
    (cov_2frqskxxpc().b[30][1]++, 0));
    const change =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[205]++, (currentValue - previousValue) / previousValue * 100);
    /* istanbul ignore next */
    cov_2frqskxxpc().s[206]++;
    return `${kpiName} is ${trend.direction} with ${Math.round(trend.strength * 100)}% strength ` + `and ${Math.round(trend.confidence * 100)}% confidence. ` + `Current value: ${currentValue.toFixed(2)}, Change: ${change.toFixed(1)}%`;
  }
  /**
   * Calculate KPI summaries
   * Calculates KPI summaries for report period
   *
   * @param startDate - Start date
   * @param endDate - End date
   * @returns Promise<Array> KPI summaries
   */
  async calculateKPISummaries(startDate, endDate) {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[41]++;
    const summaries =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[207]++, []);
    /* istanbul ignore next */
    cov_2frqskxxpc().s[208]++;
    for (const [kpiName] of this.kpiHistory) {
      const periodData =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[209]++, this.getKPIHistory(kpiName, startDate).filter(point => {
        /* istanbul ignore next */
        cov_2frqskxxpc().f[42]++;
        cov_2frqskxxpc().s[210]++;
        return point.timestamp <= endDate;
      }));
      /* istanbul ignore next */
      cov_2frqskxxpc().s[211]++;
      if (periodData.length === 0) {
        /* istanbul ignore next */
        cov_2frqskxxpc().b[31][0]++;
        cov_2frqskxxpc().s[212]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_2frqskxxpc().b[31][1]++;
      }
      const values =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[213]++, periodData.map(point => {
        /* istanbul ignore next */
        cov_2frqskxxpc().f[43]++;
        cov_2frqskxxpc().s[214]++;
        return point.value;
      }));
      const current =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[215]++, values[values.length - 1]);
      const average =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[216]++, values.reduce((sum, val) => {
        /* istanbul ignore next */
        cov_2frqskxxpc().f[44]++;
        cov_2frqskxxpc().s[217]++;
        return sum + val;
      }, 0) / values.length);
      const min =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[218]++, Math.min(...values));
      const max =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[219]++, Math.max(...values));
      // Determine trend
      const firstHalf =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[220]++, values.slice(0, Math.floor(values.length / 2)));
      const secondHalf =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[221]++, values.slice(Math.floor(values.length / 2)));
      const firstAvg =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[222]++, firstHalf.reduce((sum, val) => {
        /* istanbul ignore next */
        cov_2frqskxxpc().f[45]++;
        cov_2frqskxxpc().s[223]++;
        return sum + val;
      }, 0) / firstHalf.length);
      const secondAvg =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[224]++, secondHalf.reduce((sum, val) => {
        /* istanbul ignore next */
        cov_2frqskxxpc().f[46]++;
        cov_2frqskxxpc().s[225]++;
        return sum + val;
      }, 0) / secondHalf.length);
      let trend =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[226]++, 'stable');
      /* istanbul ignore next */
      cov_2frqskxxpc().s[227]++;
      if (Math.abs(secondAvg - firstAvg) > average * 0.05) {
        /* istanbul ignore next */
        cov_2frqskxxpc().b[32][0]++;
        cov_2frqskxxpc().s[228]++;
        trend = secondAvg > firstAvg ?
        /* istanbul ignore next */
        (cov_2frqskxxpc().b[33][0]++, 'up') :
        /* istanbul ignore next */
        (cov_2frqskxxpc().b[33][1]++, 'down');
      } else
      /* istanbul ignore next */
      {
        cov_2frqskxxpc().b[32][1]++;
      }
      // Determine status
      let status =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[229]++, 'good');
      /* istanbul ignore next */
      cov_2frqskxxpc().s[230]++;
      if (
      /* istanbul ignore next */
      (cov_2frqskxxpc().b[35][0]++, kpiName === 'security_score') &&
      /* istanbul ignore next */
      (cov_2frqskxxpc().b[35][1]++, current < 80)) {
        /* istanbul ignore next */
        cov_2frqskxxpc().b[34][0]++;
        cov_2frqskxxpc().s[231]++;
        status = 'warning';
      } else
      /* istanbul ignore next */
      {
        cov_2frqskxxpc().b[34][1]++;
      }
      cov_2frqskxxpc().s[232]++;
      if (
      /* istanbul ignore next */
      (cov_2frqskxxpc().b[37][0]++, kpiName === 'security_score') &&
      /* istanbul ignore next */
      (cov_2frqskxxpc().b[37][1]++, current < 60)) {
        /* istanbul ignore next */
        cov_2frqskxxpc().b[36][0]++;
        cov_2frqskxxpc().s[233]++;
        status = 'critical';
      } else
      /* istanbul ignore next */
      {
        cov_2frqskxxpc().b[36][1]++;
      }
      cov_2frqskxxpc().s[234]++;
      summaries.push({
        name: kpiName,
        current,
        average,
        min,
        max,
        trend,
        status
      });
    }
    /* istanbul ignore next */
    cov_2frqskxxpc().s[235]++;
    return summaries;
  }
  /**
   * Analyze threat data
   * Analyzes threat data for report
   *
   * @param events - Security events
   * @returns Threat analysis
   */
  analyzeThreatData(events) {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[47]++;
    const threatEvents =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[236]++, events.filter(event => {
      /* istanbul ignore next */
      cov_2frqskxxpc().f[48]++;
      cov_2frqskxxpc().s[237]++;
      return event.eventType === 'threat_detected';
    }));
    const threatsByType =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[238]++, {});
    const threatsBySeverity =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[239]++, {});
    const sourceCount =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[240]++, {});
    /* istanbul ignore next */
    cov_2frqskxxpc().s[241]++;
    threatEvents.forEach(event => {
      /* istanbul ignore next */
      cov_2frqskxxpc().f[49]++;
      cov_2frqskxxpc().s[242]++;
      // Count by type
      threatsByType[event.eventType] = (
      /* istanbul ignore next */
      (cov_2frqskxxpc().b[38][0]++, threatsByType[event.eventType]) ||
      /* istanbul ignore next */
      (cov_2frqskxxpc().b[38][1]++, 0)) + 1;
      // Count by severity
      const severityRange =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[243]++, this.getSeverityRange(event.severity));
      /* istanbul ignore next */
      cov_2frqskxxpc().s[244]++;
      threatsBySeverity[severityRange] = (
      /* istanbul ignore next */
      (cov_2frqskxxpc().b[39][0]++, threatsBySeverity[severityRange]) ||
      /* istanbul ignore next */
      (cov_2frqskxxpc().b[39][1]++, 0)) + 1;
      // Count by source
      /* istanbul ignore next */
      cov_2frqskxxpc().s[245]++;
      sourceCount[event.source] = (
      /* istanbul ignore next */
      (cov_2frqskxxpc().b[40][0]++, sourceCount[event.source]) ||
      /* istanbul ignore next */
      (cov_2frqskxxpc().b[40][1]++, 0)) + 1;
    });
    // Get top sources
    const topSources =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[246]++, Object.entries(sourceCount).sort(([, a], [, b]) => {
      /* istanbul ignore next */
      cov_2frqskxxpc().f[50]++;
      cov_2frqskxxpc().s[247]++;
      return b - a;
    }).slice(0, 10).map(([source, count]) => {
      /* istanbul ignore next */
      cov_2frqskxxpc().f[51]++;
      cov_2frqskxxpc().s[248]++;
      return {
        source,
        count
      };
    }));
    /* istanbul ignore next */
    cov_2frqskxxpc().s[249]++;
    return {
      totalThreats: threatEvents.length,
      threatsByType,
      threatsBySeverity,
      topSources
    };
  }
  /**
   * Calculate system performance
   * Calculates system performance metrics
   *
   * @param events - Security events
   * @returns System performance metrics
   */
  calculateSystemPerformance(events) {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[52]++;
    cov_2frqskxxpc().s[250]++;
    return {
      uptime: this.calculateUptime(),
      averageResponseTime: this.calculateAverageResponseTime(events),
      errorRate: events.filter(e => {
        /* istanbul ignore next */
        cov_2frqskxxpc().f[53]++;
        cov_2frqskxxpc().s[251]++;
        return e.status === 'resolved';
      }).length / Math.max(events.length, 1) * 100,
      throughput: events.length / 24 // Events per hour (assuming 24-hour period)
    };
  }
  /**
   * Generate recommendations
   * Generates security recommendations based on analysis
   *
   * @param kpiSummaries - KPI summaries
   * @param threatAnalysis - Threat analysis
   * @returns string[] Recommendations
   */
  generateRecommendations(kpiSummaries, threatAnalysis) {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[54]++;
    const recommendations =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[252]++, []);
    // Check security score
    const securityScore =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[253]++, kpiSummaries.find(kpi => {
      /* istanbul ignore next */
      cov_2frqskxxpc().f[55]++;
      cov_2frqskxxpc().s[254]++;
      return kpi.name === 'security_score';
    }));
    /* istanbul ignore next */
    cov_2frqskxxpc().s[255]++;
    if (
    /* istanbul ignore next */
    (cov_2frqskxxpc().b[42][0]++, securityScore) &&
    /* istanbul ignore next */
    (cov_2frqskxxpc().b[42][1]++, securityScore.current < 80)) {
      /* istanbul ignore next */
      cov_2frqskxxpc().b[41][0]++;
      cov_2frqskxxpc().s[256]++;
      recommendations.push('Security score is below optimal level. Review and strengthen security controls.');
    } else
    /* istanbul ignore next */
    {
      cov_2frqskxxpc().b[41][1]++;
    }
    // Check threat detection rate
    const threatRate =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[257]++, kpiSummaries.find(kpi => {
      /* istanbul ignore next */
      cov_2frqskxxpc().f[56]++;
      cov_2frqskxxpc().s[258]++;
      return kpi.name === 'threat_detection_rate';
    }));
    /* istanbul ignore next */
    cov_2frqskxxpc().s[259]++;
    if (
    /* istanbul ignore next */
    (cov_2frqskxxpc().b[44][0]++, threatRate) &&
    /* istanbul ignore next */
    (cov_2frqskxxpc().b[44][1]++, threatRate.current > 10)) {
      /* istanbul ignore next */
      cov_2frqskxxpc().b[43][0]++;
      cov_2frqskxxpc().s[260]++;
      recommendations.push('High threat detection rate indicates increased security risks. Investigate threat sources.');
    } else
    /* istanbul ignore next */
    {
      cov_2frqskxxpc().b[43][1]++;
    }
    // Check response time
    const responseTime =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[261]++, kpiSummaries.find(kpi => {
      /* istanbul ignore next */
      cov_2frqskxxpc().f[57]++;
      cov_2frqskxxpc().s[262]++;
      return kpi.name === 'average_response_time';
    }));
    /* istanbul ignore next */
    cov_2frqskxxpc().s[263]++;
    if (
    /* istanbul ignore next */
    (cov_2frqskxxpc().b[46][0]++, responseTime) &&
    /* istanbul ignore next */
    (cov_2frqskxxpc().b[46][1]++, responseTime.current > 300)) {
      /* istanbul ignore next */
      cov_2frqskxxpc().b[45][0]++;
      cov_2frqskxxpc().s[264]++;
      recommendations.push('Average response time is high. Consider automating more response procedures.');
    } else
    /* istanbul ignore next */
    {
      cov_2frqskxxpc().b[45][1]++;
    }
    // Check threat patterns
    cov_2frqskxxpc().s[265]++;
    if (threatAnalysis.totalThreats > 100) {
      /* istanbul ignore next */
      cov_2frqskxxpc().b[47][0]++;
      cov_2frqskxxpc().s[266]++;
      recommendations.push('High volume of threats detected. Consider implementing additional preventive measures.');
    } else
    /* istanbul ignore next */
    {
      cov_2frqskxxpc().b[47][1]++;
    }
    cov_2frqskxxpc().s[267]++;
    return recommendations;
  }
  /**
   * Calculate overall security score
   * Calculates overall security score from KPI summaries
   *
   * @param kpiSummaries - KPI summaries
   * @returns number Overall security score
   */
  calculateOverallSecurityScore(kpiSummaries) {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[58]++;
    const securityScore =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[268]++, kpiSummaries.find(kpi => {
      /* istanbul ignore next */
      cov_2frqskxxpc().f[59]++;
      cov_2frqskxxpc().s[269]++;
      return kpi.name === 'security_score';
    }));
    /* istanbul ignore next */
    cov_2frqskxxpc().s[270]++;
    return securityScore ?
    /* istanbul ignore next */
    (cov_2frqskxxpc().b[48][0]++, securityScore.current) :
    /* istanbul ignore next */
    (cov_2frqskxxpc().b[48][1]++, 100);
  }
  /**
   * Calculate audit completeness
   * Calculates audit trail completeness
   *
   * @returns Promise<number> Audit completeness percentage
   */
  async calculateAuditCompleteness() {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[60]++;
    cov_2frqskxxpc().s[271]++;
    // Implementation would check audit trail completeness
    // For now, return a placeholder value
    return 95;
  }
  /**
   * Calculate data retention compliance
   * Calculates data retention compliance
   *
   * @returns number Data retention compliance percentage
   */
  calculateDataRetentionCompliance() {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[61]++;
    cov_2frqskxxpc().s[272]++;
    // Implementation would check data retention policies
    // For now, return a placeholder value
    return 98;
  }
  /**
   * Calculate access control compliance
   * Calculates access control compliance
   *
   * @returns number Access control compliance percentage
   */
  calculateAccessControlCompliance() {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[62]++;
    cov_2frqskxxpc().s[273]++;
    // Implementation would check access control policies
    // For now, return a placeholder value
    return 92;
  }
  /**
   * Calculate encryption compliance
   * Calculates encryption compliance
   *
   * @returns number Encryption compliance percentage
   */
  calculateEncryptionCompliance() {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[63]++;
    cov_2frqskxxpc().s[274]++;
    // Implementation would check encryption usage
    // For now, return a placeholder value
    return 100;
  }
  /**
   * Calculate incident response compliance
   * Calculates incident response compliance
   *
   * @returns number Incident response compliance percentage
   */
  calculateIncidentResponseCompliance() {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[64]++;
    cov_2frqskxxpc().s[275]++;
    // Implementation would check incident response procedures
    // For now, return a placeholder value
    return 88;
  }
  /**
   * Identify compliance violations
   * Identifies compliance violations
   *
   * @returns Promise<Array> Compliance violations
   */
  async identifyComplianceViolations() {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[65]++;
    cov_2frqskxxpc().s[276]++;
    // Implementation would identify actual violations
    // For now, return empty array
    return [];
  }
  /**
   * Get severity range
   * Maps numeric severity to range
   *
   * @param severity - Numeric severity
   * @returns string Severity range
   */
  getSeverityRange(severity) {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[66]++;
    cov_2frqskxxpc().s[277]++;
    if (severity >= 9) {
      /* istanbul ignore next */
      cov_2frqskxxpc().b[49][0]++;
      cov_2frqskxxpc().s[278]++;
      return 'Critical (9-10)';
    } else
    /* istanbul ignore next */
    {
      cov_2frqskxxpc().b[49][1]++;
    }
    cov_2frqskxxpc().s[279]++;
    if (severity >= 7) {
      /* istanbul ignore next */
      cov_2frqskxxpc().b[50][0]++;
      cov_2frqskxxpc().s[280]++;
      return 'High (7-8)';
    } else
    /* istanbul ignore next */
    {
      cov_2frqskxxpc().b[50][1]++;
    }
    cov_2frqskxxpc().s[281]++;
    if (severity >= 5) {
      /* istanbul ignore next */
      cov_2frqskxxpc().b[51][0]++;
      cov_2frqskxxpc().s[282]++;
      return 'Medium (5-6)';
    } else
    /* istanbul ignore next */
    {
      cov_2frqskxxpc().b[51][1]++;
    }
    cov_2frqskxxpc().s[283]++;
    if (severity >= 3) {
      /* istanbul ignore next */
      cov_2frqskxxpc().b[52][0]++;
      cov_2frqskxxpc().s[284]++;
      return 'Low (3-4)';
    } else
    /* istanbul ignore next */
    {
      cov_2frqskxxpc().b[52][1]++;
    }
    cov_2frqskxxpc().s[285]++;
    return 'Minimal (1-2)';
  }
  /**
   * Get total data points
   * Returns total number of data points across all KPIs
   *
   * @returns number Total data points
   */
  getTotalDataPoints() {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[67]++;
    let total =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[286]++, 0);
    /* istanbul ignore next */
    cov_2frqskxxpc().s[287]++;
    for (const [, history] of this.kpiHistory) {
      /* istanbul ignore next */
      cov_2frqskxxpc().s[288]++;
      total += history.length;
    }
    /* istanbul ignore next */
    cov_2frqskxxpc().s[289]++;
    return total;
  }
  /**
   * Clean up old data
   * Removes old data points beyond retention period
   */
  cleanupOldData() {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[68]++;
    const cutoffDate =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[290]++, new Date(Date.now() - this.config.retentionPeriod * 24 * 60 * 60 * 1000));
    /* istanbul ignore next */
    cov_2frqskxxpc().s[291]++;
    for (const [kpiName, history] of this.kpiHistory) {
      const filteredHistory =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[292]++, history.filter(point => {
        /* istanbul ignore next */
        cov_2frqskxxpc().f[69]++;
        cov_2frqskxxpc().s[293]++;
        return point.timestamp >= cutoffDate;
      }));
      /* istanbul ignore next */
      cov_2frqskxxpc().s[294]++;
      this.kpiHistory.set(kpiName, filteredHistory);
    }
    // Clean up security events
    /* istanbul ignore next */
    cov_2frqskxxpc().s[295]++;
    this.securityEvents = this.securityEvents.filter(event => {
      /* istanbul ignore next */
      cov_2frqskxxpc().f[70]++;
      cov_2frqskxxpc().s[296]++;
      return event.timestamp >= cutoffDate;
    });
  }
  /**
   * Get service status
   * Returns current service status
   *
   * @returns Service status information
   */
  getStatus() {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[71]++;
    cov_2frqskxxpc().s[297]++;
    return {
      isCollecting: this.collectionInterval !== null,
      totalKPIs: this.kpiHistory.size,
      totalDataPoints: this.getTotalDataPoints(),
      uptime: Date.now() - this.serviceStartTime.getTime(),
      timestamp: Date.now()
    };
  }
}
/* istanbul ignore next */
cov_2frqskxxpc().s[298]++;
exports.SecurityMetricsService = SecurityMetricsService;
// Create and export singleton instance
/* istanbul ignore next */
cov_2frqskxxpc().s[299]++;
exports.securityMetricsService = new SecurityMetricsService();
// =============================================================================
// SECURITY METRICS NOTES
// =============================================================================
// 1. Comprehensive KPI tracking for all security aspects
// 2. Real-time metrics collection and analysis
// 3. Trend analysis and forecasting capabilities
// 4. Automated alerting on threshold violations
// 5. Compliance metrics and violation tracking
// 6. Performance reporting and recommendations
// 7. Historical data retention and cleanup
// 8. Integration with security monitoring and audit services
// =============================================================================
//# sourceMappingURL=data:application/json;charset=utf-8;base64,