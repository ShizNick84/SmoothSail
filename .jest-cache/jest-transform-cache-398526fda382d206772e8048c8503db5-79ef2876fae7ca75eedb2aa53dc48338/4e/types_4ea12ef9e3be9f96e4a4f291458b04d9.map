{"version":3,"names":["cov_2ch6arhig4","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","branchMap","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage"],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\backtesting\\types.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * BACKTESTING SYSTEM TYPES AND INTERFACES\r\n * =============================================================================\r\n * \r\n * This module defines all TypeScript types and interfaces for the backtesting\r\n * system, ensuring type safety and proper data validation throughout the\r\n * backtesting process. NO MOCK DATA - only real historical market data.\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport { MarketData, TradingSignal, HarmonizedSignal } from '../strategies/types';\r\n\r\n/**\r\n * Historical market data with validation metadata\r\n */\r\nexport interface HistoricalMarketData extends MarketData {\r\n  validated: boolean;\r\n  source: 'GATE_IO' | 'EXTERNAL';\r\n  integrity: string; // Hash for data integrity verification\r\n  fetchedAt: Date;\r\n}\r\n\r\n/**\r\n * Backtesting configuration parameters\r\n */\r\nexport interface BacktestConfig {\r\n  symbol: string;\r\n  startDate: Date;\r\n  endDate: Date;\r\n  initialBalance: number;\r\n  strategies: string[];\r\n  riskManagement: {\r\n    maxRiskPerTrade: number; // Percentage (2-3%)\r\n    stopLossPercentage: number; // -1%\r\n    minRiskRewardRatio: number; // 1.3:1\r\n    maxDrawdown: number; // Maximum allowed drawdown\r\n  };\r\n  fees: {\r\n    maker: number; // Gate.io maker fee\r\n    taker: number; // Gate.io taker fee\r\n  };\r\n  slippage: number; // Expected slippage percentage\r\n  dataValidation: {\r\n    requireRealData: boolean; // Must be true - no mock data\r\n    minDataPoints: number;\r\n    maxGapMinutes: number; // Maximum gap between data points\r\n  };\r\n}\r\n\r\n/**\r\n * Simulated trade execution for backtesting\r\n */\r\nexport interface BacktestTrade {\r\n  id: string;\r\n  symbol: string;\r\n  type: 'BUY' | 'SELL';\r\n  quantity: number;\r\n  entryPrice: number;\r\n  exitPrice?: number;\r\n  entryTime: Date;\r\n  exitTime?: Date;\r\n  strategy: string;\r\n  signal: TradingSignal;\r\n  stopLoss: number;\r\n  takeProfit: number;\r\n  fees: number;\r\n  slippage: number;\r\n  pnl?: number;\r\n  pnlPercentage?: number;\r\n  status: 'OPEN' | 'CLOSED' | 'STOPPED';\r\n  exitReason?: 'TAKE_PROFIT' | 'STOP_LOSS' | 'STRATEGY_EXIT' | 'END_OF_PERIOD';\r\n}\r\n\r\n/**\r\n * Portfolio state during backtesting\r\n */\r\nexport interface BacktestPortfolio {\r\n  timestamp: Date;\r\n  balance: number;\r\n  equity: number; // Balance + unrealized PnL\r\n  positions: BacktestPosition[];\r\n  totalPnL: number;\r\n  unrealizedPnL: number;\r\n  realizedPnL: number;\r\n  drawdown: number;\r\n  drawdownPercentage: number;\r\n  maxDrawdown: number;\r\n  maxDrawdownPercentage: number;\r\n}\r\n\r\n/**\r\n * Position during backtesting\r\n */\r\nexport interface BacktestPosition {\r\n  symbol: string;\r\n  quantity: number;\r\n  averagePrice: number;\r\n  currentPrice: number;\r\n  unrealizedPnL: number;\r\n  unrealizedPnLPercentage: number;\r\n  stopLoss: number;\r\n  takeProfit: number;\r\n  entryTime: Date;\r\n  strategy: string;\r\n}\r\n\r\n/**\r\n * Comprehensive backtesting results\r\n */\r\nexport interface BacktestResult {\r\n  config: BacktestConfig;\r\n  period: {\r\n    start: Date;\r\n    end: Date;\r\n    durationDays: number;\r\n  };\r\n  \r\n  // Trade statistics\r\n  trades: {\r\n    total: number;\r\n    winning: number;\r\n    losing: number;\r\n    winRate: number;\r\n    averageWin: number;\r\n    averageLoss: number;\r\n    largestWin: number;\r\n    largestLoss: number;\r\n    consecutiveWins: number;\r\n    consecutiveLosses: number;\r\n    maxConsecutiveWins: number;\r\n    maxConsecutiveLosses: number;\r\n  };\r\n  \r\n  // Performance metrics\r\n  performance: {\r\n    totalReturn: number;\r\n    totalReturnPercentage: number;\r\n    annualizedReturn: number;\r\n    sharpeRatio: number;\r\n    sortinoRatio: number;\r\n    calmarRatio: number;\r\n    maxDrawdown: number;\r\n    maxDrawdownPercentage: number;\r\n    averageDrawdown: number;\r\n    recoveryFactor: number;\r\n    profitFactor: number;\r\n    payoffRatio: number;\r\n    expectedValue: number;\r\n  };\r\n  \r\n  // Risk metrics\r\n  risk: {\r\n    volatility: number;\r\n    downside_deviation: number;\r\n    var95: number; // Value at Risk 95%\r\n    cvar95: number; // Conditional Value at Risk 95%\r\n    beta: number;\r\n    alpha: number;\r\n    informationRatio: number;\r\n  };\r\n  \r\n  // Strategy breakdown\r\n  strategyPerformance: Record<string, StrategyBacktestResult>;\r\n  \r\n  // Time series data\r\n  equityCurve: EquityPoint[];\r\n  drawdownCurve: DrawdownPoint[];\r\n  monthlyReturns: MonthlyReturn[];\r\n  \r\n  // Data quality metrics\r\n  dataQuality: {\r\n    totalDataPoints: number;\r\n    validDataPoints: number;\r\n    dataIntegrityScore: number;\r\n    gapsDetected: number;\r\n    averageGapMinutes: number;\r\n    dataSource: string;\r\n  };\r\n  \r\n  // Execution details\r\n  executionDetails: BacktestTrade[];\r\n  portfolioHistory: BacktestPortfolio[];\r\n}\r\n\r\n/**\r\n * Strategy-specific backtesting results\r\n */\r\nexport interface StrategyBacktestResult {\r\n  strategyName: string;\r\n  trades: number;\r\n  winRate: number;\r\n  totalReturn: number;\r\n  sharpeRatio: number;\r\n  maxDrawdown: number;\r\n  profitFactor: number;\r\n  averageHoldingPeriod: number; // in hours\r\n  signalAccuracy: number;\r\n  contribution: number; // Contribution to overall performance\r\n}\r\n\r\n/**\r\n * Equity curve data point\r\n */\r\nexport interface EquityPoint {\r\n  timestamp: Date;\r\n  equity: number;\r\n  balance: number;\r\n  unrealizedPnL: number;\r\n  drawdown: number;\r\n  drawdownPercentage: number;\r\n}\r\n\r\n/**\r\n * Drawdown curve data point\r\n */\r\nexport interface DrawdownPoint {\r\n  timestamp: Date;\r\n  drawdown: number;\r\n  drawdownPercentage: number;\r\n  underwater: boolean; // True if in drawdown\r\n  recoveryTime?: number; // Time to recover from this drawdown\r\n}\r\n\r\n/**\r\n * Monthly return data\r\n */\r\nexport interface MonthlyReturn {\r\n  year: number;\r\n  month: number;\r\n  return: number;\r\n  returnPercentage: number;\r\n  trades: number;\r\n  winRate: number;\r\n  maxDrawdown: number;\r\n}\r\n\r\n/**\r\n * Data validation result\r\n */\r\nexport interface DataValidationResult {\r\n  isValid: boolean;\r\n  totalPoints: number;\r\n  validPoints: number;\r\n  invalidPoints: number;\r\n  gaps: DataGap[];\r\n  integrityScore: number;\r\n  errors: string[];\r\n  warnings: string[];\r\n}\r\n\r\n/**\r\n * Data gap information\r\n */\r\nexport interface DataGap {\r\n  startTime: Date;\r\n  endTime: Date;\r\n  durationMinutes: number;\r\n  severity: 'LOW' | 'MEDIUM' | 'HIGH';\r\n  impact: string;\r\n}\r\n\r\n/**\r\n * Backtesting engine state\r\n */\r\nexport interface BacktestEngineState {\r\n  currentTime: Date;\r\n  portfolio: BacktestPortfolio;\r\n  openPositions: Map<string, BacktestPosition>;\r\n  tradeHistory: BacktestTrade[];\r\n  signals: TradingSignal[];\r\n  marketData: HistoricalMarketData[];\r\n  isRunning: boolean;\r\n  progress: number; // 0-100\r\n}\r\n\r\n/**\r\n * Performance benchmark comparison\r\n */\r\nexport interface BenchmarkComparison {\r\n  strategy: {\r\n    totalReturn: number;\r\n    sharpeRatio: number;\r\n    maxDrawdown: number;\r\n    volatility: number;\r\n  };\r\n  benchmark: {\r\n    name: string; // e.g., \"BTC Buy & Hold\"\r\n    totalReturn: number;\r\n    sharpeRatio: number;\r\n    maxDrawdown: number;\r\n    volatility: number;\r\n  };\r\n  outperformance: {\r\n    totalReturn: number;\r\n    sharpeRatio: number;\r\n    riskAdjustedReturn: number;\r\n    informationRatio: number;\r\n  };\r\n}\r\n\r\n/**\r\n * Backtesting report configuration\r\n */\r\nexport interface BacktestReportConfig {\r\n  includeCharts: boolean;\r\n  includeTradeDetails: boolean;\r\n  includeStrategyBreakdown: boolean;\r\n  includeBenchmarkComparison: boolean;\r\n  includeRiskMetrics: boolean;\r\n  includeMonthlyReturns: boolean;\r\n  format: 'JSON' | 'HTML' | 'PDF';\r\n  outputPath?: string;\r\n}\r\n\r\n/**\r\n * Real-time backtesting progress\r\n */\r\nexport interface BacktestProgress {\r\n  currentDate: Date;\r\n  progress: number; // 0-100\r\n  tradesExecuted: number;\r\n  currentEquity: number;\r\n  currentDrawdown: number;\r\n  estimatedTimeRemaining: number; // in milliseconds\r\n  status: 'INITIALIZING' | 'RUNNING' | 'COMPLETED' | 'ERROR' | 'CANCELLED';\r\n  message?: string;\r\n}\r\n\r\n/**\r\n * Backtesting validation rules\r\n */\r\nexport interface ValidationRules {\r\n  // Data validation\r\n  minDataPoints: number;\r\n  maxGapMinutes: number;\r\n  requireRealData: boolean;\r\n  \r\n  // Trade validation\r\n  minTradeAmount: number;\r\n  maxPositionSize: number;\r\n  maxOpenPositions: number;\r\n  \r\n  // Risk validation\r\n  maxRiskPerTrade: number;\r\n  maxTotalRisk: number;\r\n  maxDrawdown: number;\r\n  \r\n  // Performance validation\r\n  minSharpeRatio: number;\r\n  minWinRate: number;\r\n  minProfitFactor: number;\r\n}\r\n\r\n/**\r\n * Strategy harmonization for backtesting\r\n */\r\nexport interface BacktestHarmonization {\r\n  signals: TradingSignal[];\r\n  harmonizedSignal: HarmonizedSignal;\r\n  confidence: number;\r\n  conflicts: string[];\r\n  resolution: 'BUY' | 'SELL' | 'HOLD';\r\n  reasoning: string;\r\n}\r\n"],"mappings":";;AAAA;;;;;;;;;;;;;;AAAA;AAAA,SAAAA,eAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,MAAA,OAAAC,QAAA;EAAA,IAAAC,GAAA;EAAA,IAAAC,YAAA;IAAAL,IAAA;IAAAM,YAAA;MAAA;QAAAC,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;IAAA;IAAAE,KAAA;IAAAC,SAAA;IAAAC,CAAA;MAAA;IAAA;IAAAC,CAAA;IAAAC,CAAA;IAAAC,cAAA;MAAAC,IAAA;MAAAC,QAAA;MAAAC,KAAA;MAAAC,OAAA;MAAAC,cAAA;MAAAC,OAAA;IAAA;IAAAC,eAAA;IAAAtB,IAAA;EAAA;EAAA,IAAAuB,QAAA,GAAAtB,MAAA,CAAAE,GAAA,MAAAF,MAAA,CAAAE,GAAA;EAAA,KAAAoB,QAAA,CAAAxB,IAAA,KAAAwB,QAAA,CAAAxB,IAAA,EAAAC,IAAA,KAAAA,IAAA;IAAAuB,QAAA,CAAAxB,IAAA,IAAAK,YAAA;EAAA;EAAA,IAAAoB,cAAA,GAAAD,QAAA,CAAAxB,IAAA;EAAA","ignoreList":[]}