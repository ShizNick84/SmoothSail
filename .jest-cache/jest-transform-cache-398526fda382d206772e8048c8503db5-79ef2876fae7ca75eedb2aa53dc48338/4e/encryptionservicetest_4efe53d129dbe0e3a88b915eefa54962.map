{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\__tests__\\encryption-service.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\__tests__\\encryption-service.test.ts"],"sourcesContent":["/**\r\n * Unit Tests for Encryption Service\r\n * \r\n * Comprehensive test suite covering military-grade encryption functionality,\r\n * key derivation, credential protection, and security validation.\r\n * \r\n * Requirements: 17.1, 17.3, 17.6 - Unit tests for security and encryption functions\r\n */\r\n\r\nimport { EncryptionService, EncryptedData } from '../encryption-service';\r\nimport { randomBytes } from 'crypto';\r\n\r\n// Mock logger to prevent console output during tests\r\njest.mock('@/core/logging/logger', () => ({\r\n  logger: {\r\n    info: jest.fn(),\r\n    debug: jest.fn(),\r\n    warn: jest.fn(),\r\n    error: jest.fn()\r\n  }\r\n}));\r\n\r\ndescribe('EncryptionService', () => {\r\n  let encryptionService: EncryptionService;\r\n  const testMasterKey = randomBytes(32).toString('hex'); // 64 hex characters\r\n\r\n  beforeEach(() => {\r\n    // Set up test environment with master key\r\n    process.env.MASTER_ENCRYPTION_KEY = testMasterKey;\r\n    encryptionService = new EncryptionService();\r\n  });\r\n\r\n  afterEach(() => {\r\n    // Clean up environment\r\n    delete process.env.MASTER_ENCRYPTION_KEY;\r\n  });\r\n\r\n  describe('Initialization', () => {\r\n    it('should initialize successfully with valid master key', () => {\r\n      expect(() => new EncryptionService()).not.toThrow();\r\n      \r\n      const status = encryptionService.getStatus();\r\n      expect(status.isInitialized).toBe(true);\r\n      expect(status.algorithm).toBe('aes-256-gcm');\r\n    });\r\n\r\n    it('should throw error when master key is not set', () => {\r\n      delete process.env.MASTER_ENCRYPTION_KEY;\r\n      \r\n      expect(() => new EncryptionService()).toThrow('MASTER_ENCRYPTION_KEY environment variable not set');\r\n    });\r\n\r\n    it('should throw error when master key is too short', () => {\r\n      process.env.MASTER_ENCRYPTION_KEY = 'short_key'; // Less than 64 hex characters\r\n      \r\n      expect(() => new EncryptionService()).toThrow('Master encryption key must be at least 32 bytes');\r\n    });\r\n\r\n    it('should throw error when master key is invalid hex', () => {\r\n      process.env.MASTER_ENCRYPTION_KEY = 'invalid_hex_key_that_is_long_enough_but_not_valid_hex_characters_xyz';\r\n      \r\n      expect(() => new EncryptionService()).toThrow();\r\n    });\r\n  });\r\n\r\n  describe('encryptData', () => {\r\n    const testData = 'This is sensitive trading data that needs protection';\r\n\r\n    it('should encrypt data successfully with default parameters', async () => {\r\n      const encrypted = await encryptionService.encryptData(testData);\r\n      \r\n      expect(encrypted).toBeDefined();\r\n      expect(encrypted.encryptedData).toBeDefined();\r\n      expect(encrypted.iv).toBeDefined();\r\n      expect(encrypted.authTag).toBeDefined();\r\n      expect(encrypted.salt).toBeDefined();\r\n      expect(encrypted.algorithm).toBe('aes-256-gcm');\r\n      expect(encrypted.timestamp).toBeGreaterThan(0);\r\n      \r\n      // Verify base64 encoding\r\n      expect(() => Buffer.from(encrypted.encryptedData, 'base64')).not.toThrow();\r\n      expect(() => Buffer.from(encrypted.iv, 'base64')).not.toThrow();\r\n      expect(() => Buffer.from(encrypted.authTag, 'base64')).not.toThrow();\r\n      expect(() => Buffer.from(encrypted.salt, 'base64')).not.toThrow();\r\n    });\r\n\r\n    it('should encrypt data with custom password', async () => {\r\n      const customPassword = 'my_custom_password_123';\r\n      const encrypted = await encryptionService.encryptData(testData, customPassword);\r\n      \r\n      expect(encrypted).toBeDefined();\r\n      expect(encrypted.encryptedData).toBeDefined();\r\n    });\r\n\r\n    it('should encrypt data with custom key derivation parameters', async () => {\r\n      const customParams = {\r\n        iterations: 200000,\r\n        saltLength: 64,\r\n        keyLength: 32,\r\n        hashAlgorithm: 'sha256'\r\n      };\r\n      \r\n      const encrypted = await encryptionService.encryptData(testData, undefined, customParams);\r\n      \r\n      expect(encrypted).toBeDefined();\r\n      expect(Buffer.from(encrypted.salt, 'base64')).toHaveLength(64); // Custom salt length\r\n    });\r\n\r\n    it('should produce different encrypted data for same input', async () => {\r\n      const encrypted1 = await encryptionService.encryptData(testData);\r\n      const encrypted2 = await encryptionService.encryptData(testData);\r\n      \r\n      // Should be different due to random IV and salt\r\n      expect(encrypted1.encryptedData).not.toBe(encrypted2.encryptedData);\r\n      expect(encrypted1.iv).not.toBe(encrypted2.iv);\r\n      expect(encrypted1.salt).not.toBe(encrypted2.salt);\r\n    });\r\n\r\n    it('should handle empty string', async () => {\r\n      const encrypted = await encryptionService.encryptData('');\r\n      \r\n      expect(encrypted).toBeDefined();\r\n      expect(encrypted.encryptedData).toBeDefined();\r\n    });\r\n\r\n    it('should handle very long data', async () => {\r\n      const longData = 'A'.repeat(10000); // 10KB of data\r\n      const encrypted = await encryptionService.encryptData(longData);\r\n      \r\n      expect(encrypted).toBeDefined();\r\n      expect(encrypted.encryptedData).toBeDefined();\r\n    });\r\n\r\n    it('should handle special characters and unicode', async () => {\r\n      const specialData = '🔐💰📈 Special chars: àáâãäå ñ ç €£¥ 中文 العربية';\r\n      const encrypted = await encryptionService.encryptData(specialData);\r\n      \r\n      expect(encrypted).toBeDefined();\r\n      expect(encrypted.encryptedData).toBeDefined();\r\n    });\r\n  });\r\n\r\n  describe('decryptData', () => {\r\n    const testData = 'This is sensitive trading data that needs protection';\r\n\r\n    it('should decrypt data successfully', async () => {\r\n      const encrypted = await encryptionService.encryptData(testData);\r\n      const decrypted = await encryptionService.decryptData(encrypted);\r\n      \r\n      expect(decrypted).toBe(testData);\r\n    });\r\n\r\n    it('should decrypt data with custom password', async () => {\r\n      const customPassword = 'my_custom_password_123';\r\n      const encrypted = await encryptionService.encryptData(testData, customPassword);\r\n      const decrypted = await encryptionService.decryptData(encrypted, customPassword);\r\n      \r\n      expect(decrypted).toBe(testData);\r\n    });\r\n\r\n    it('should fail to decrypt with wrong password', async () => {\r\n      const correctPassword = 'correct_password';\r\n      const wrongPassword = 'wrong_password';\r\n      \r\n      const encrypted = await encryptionService.encryptData(testData, correctPassword);\r\n      \r\n      await expect(encryptionService.decryptData(encrypted, wrongPassword))\r\n        .rejects.toThrow('Failed to decrypt data');\r\n    });\r\n\r\n    it('should fail to decrypt tampered data', async () => {\r\n      const encrypted = await encryptionService.encryptData(testData);\r\n      \r\n      // Tamper with encrypted data\r\n      const tamperedEncrypted = {\r\n        ...encrypted,\r\n        encryptedData: encrypted.encryptedData.slice(0, -4) + 'XXXX' // Change last 4 characters\r\n      };\r\n      \r\n      await expect(encryptionService.decryptData(tamperedEncrypted))\r\n        .rejects.toThrow('Failed to decrypt data');\r\n    });\r\n\r\n    it('should fail to decrypt with tampered auth tag', async () => {\r\n      const encrypted = await encryptionService.encryptData(testData);\r\n      \r\n      // Tamper with auth tag\r\n      const tamperedEncrypted = {\r\n        ...encrypted,\r\n        authTag: encrypted.authTag.slice(0, -4) + 'XXXX'\r\n      };\r\n      \r\n      await expect(encryptionService.decryptData(tamperedEncrypted))\r\n        .rejects.toThrow('Failed to decrypt data');\r\n    });\r\n\r\n    it('should fail to decrypt with invalid encrypted data structure', async () => {\r\n      const invalidEncrypted = {\r\n        encryptedData: 'invalid',\r\n        iv: 'invalid',\r\n        authTag: 'invalid',\r\n        salt: 'invalid',\r\n        algorithm: 'aes-256-gcm',\r\n        timestamp: Date.now()\r\n      } as EncryptedData;\r\n      \r\n      await expect(encryptionService.decryptData(invalidEncrypted))\r\n        .rejects.toThrow();\r\n    });\r\n\r\n    it('should handle empty string decryption', async () => {\r\n      const encrypted = await encryptionService.encryptData('');\r\n      const decrypted = await encryptionService.decryptData(encrypted);\r\n      \r\n      expect(decrypted).toBe('');\r\n    });\r\n\r\n    it('should handle special characters and unicode decryption', async () => {\r\n      const specialData = '🔐💰📈 Special chars: àáâãäå ñ ç €£¥ 中文 العربية';\r\n      const encrypted = await encryptionService.encryptData(specialData);\r\n      const decrypted = await encryptionService.decryptData(encrypted);\r\n      \r\n      expect(decrypted).toBe(specialData);\r\n    });\r\n  });\r\n\r\n  describe('encryptCredentials', () => {\r\n    const testCredentials = {\r\n      apiKey: 'test_api_key_12345',\r\n      secretKey: 'test_secret_key_67890',\r\n      passphrase: 'test_passphrase'\r\n    };\r\n\r\n    it('should encrypt credentials successfully', async () => {\r\n      const encrypted = await encryptionService.encryptCredentials(testCredentials);\r\n      \r\n      expect(encrypted).toBeDefined();\r\n      expect(encrypted.encryptedData).toBeDefined();\r\n      expect(encrypted.algorithm).toBe('aes-256-gcm');\r\n      \r\n      // Should use enhanced security parameters\r\n      expect(Buffer.from(encrypted.salt, 'base64')).toHaveLength(64); // Larger salt\r\n    });\r\n\r\n    it('should handle empty credentials object', async () => {\r\n      const encrypted = await encryptionService.encryptCredentials({});\r\n      \r\n      expect(encrypted).toBeDefined();\r\n      expect(encrypted.encryptedData).toBeDefined();\r\n    });\r\n\r\n    it('should handle credentials with special characters', async () => {\r\n      const specialCredentials = {\r\n        apiKey: 'key_with_special_chars_!@#$%^&*()',\r\n        secretKey: 'secret_with_unicode_🔐💰',\r\n        passphrase: 'passphrase with spaces and symbols'\r\n      };\r\n      \r\n      const encrypted = await encryptionService.encryptCredentials(specialCredentials);\r\n      \r\n      expect(encrypted).toBeDefined();\r\n      expect(encrypted.encryptedData).toBeDefined();\r\n    });\r\n  });\r\n\r\n  describe('decryptCredentials', () => {\r\n    const testCredentials = {\r\n      apiKey: 'test_api_key_12345',\r\n      secretKey: 'test_secret_key_67890',\r\n      passphrase: 'test_passphrase'\r\n    };\r\n\r\n    it('should decrypt credentials successfully', async () => {\r\n      const encrypted = await encryptionService.encryptCredentials(testCredentials);\r\n      const decrypted = await encryptionService.decryptCredentials(encrypted);\r\n      \r\n      expect(decrypted).toEqual(testCredentials);\r\n    });\r\n\r\n    it('should verify credential integrity', async () => {\r\n      const encrypted = await encryptionService.encryptCredentials(testCredentials);\r\n      \r\n      // Decrypt and verify\r\n      const decrypted = await encryptionService.decryptCredentials(encrypted);\r\n      expect(decrypted).toEqual(testCredentials);\r\n    });\r\n\r\n    it('should fail with tampered credentials', async () => {\r\n      const encrypted = await encryptionService.encryptCredentials(testCredentials);\r\n      \r\n      // Tamper with encrypted credentials\r\n      const tamperedEncrypted = {\r\n        ...encrypted,\r\n        encryptedData: encrypted.encryptedData.slice(0, -8) + 'XXXXXXXX'\r\n      };\r\n      \r\n      await expect(encryptionService.decryptCredentials(tamperedEncrypted))\r\n        .rejects.toThrow('Credential decryption failed');\r\n    });\r\n\r\n    it('should handle empty credentials decryption', async () => {\r\n      const encrypted = await encryptionService.encryptCredentials({});\r\n      const decrypted = await encryptionService.decryptCredentials(encrypted);\r\n      \r\n      expect(decrypted).toEqual({});\r\n    });\r\n  });\r\n\r\n  describe('generateSecureKey', () => {\r\n    it('should generate secure key with default length', () => {\r\n      const key = encryptionService.generateSecureKey();\r\n      \r\n      expect(key).toBeDefined();\r\n      expect(typeof key).toBe('string');\r\n      expect(key).toHaveLength(64); // 32 bytes = 64 hex characters\r\n      expect(/^[0-9a-f]+$/i.test(key)).toBe(true); // Valid hex\r\n    });\r\n\r\n    it('should generate secure key with custom length', () => {\r\n      const key = encryptionService.generateSecureKey(16);\r\n      \r\n      expect(key).toBeDefined();\r\n      expect(key).toHaveLength(32); // 16 bytes = 32 hex characters\r\n      expect(/^[0-9a-f]+$/i.test(key)).toBe(true);\r\n    });\r\n\r\n    it('should generate different keys each time', () => {\r\n      const key1 = encryptionService.generateSecureKey();\r\n      const key2 = encryptionService.generateSecureKey();\r\n      \r\n      expect(key1).not.toBe(key2);\r\n    });\r\n\r\n    it('should handle zero length gracefully', () => {\r\n      const key = encryptionService.generateSecureKey(0);\r\n      \r\n      expect(key).toBe('');\r\n    });\r\n\r\n    it('should handle large key lengths', () => {\r\n      const key = encryptionService.generateSecureKey(128); // 1024-bit key\r\n      \r\n      expect(key).toHaveLength(256); // 128 bytes = 256 hex characters\r\n      expect(/^[0-9a-f]+$/i.test(key)).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('secureClear', () => {\r\n    it('should clear buffer contents', () => {\r\n      const buffer = Buffer.from('sensitive data');\r\n      const originalData = buffer.toString();\r\n      \r\n      encryptionService.secureClear(buffer);\r\n      \r\n      expect(buffer.toString()).not.toBe(originalData);\r\n      expect(buffer.every(byte => byte === 0)).toBe(true);\r\n    });\r\n\r\n    it('should handle empty buffer', () => {\r\n      const buffer = Buffer.alloc(0);\r\n      \r\n      expect(() => encryptionService.secureClear(buffer)).not.toThrow();\r\n    });\r\n\r\n    it('should handle null buffer gracefully', () => {\r\n      expect(() => encryptionService.secureClear(null as any)).not.toThrow();\r\n    });\r\n  });\r\n\r\n  describe('getStatus', () => {\r\n    it('should return correct status information', () => {\r\n      const status = encryptionService.getStatus();\r\n      \r\n      expect(status.isInitialized).toBe(true);\r\n      expect(status.algorithm).toBe('aes-256-gcm');\r\n      expect(status.keyDerivationParams).toBeDefined();\r\n      expect(status.keyDerivationParams.iterations).toBe(100000);\r\n      expect(status.keyDerivationParams.saltLength).toBe(32);\r\n      expect(status.keyDerivationParams.keyLength).toBe(32);\r\n      expect(status.keyDerivationParams.hashAlgorithm).toBe('sha256');\r\n      expect(status.timestamp).toBeGreaterThan(0);\r\n    });\r\n  });\r\n\r\n  describe('Data Validation', () => {\r\n    it('should reject encrypted data with missing fields', async () => {\r\n      const incompleteEncrypted = {\r\n        encryptedData: 'test',\r\n        iv: 'test',\r\n        // Missing authTag, salt, algorithm, timestamp\r\n      } as EncryptedData;\r\n      \r\n      await expect(encryptionService.decryptData(incompleteEncrypted))\r\n        .rejects.toThrow('Invalid encrypted data');\r\n    });\r\n\r\n    it('should reject encrypted data with unsupported algorithm', async () => {\r\n      const encrypted = await encryptionService.encryptData('test');\r\n      const invalidEncrypted = {\r\n        ...encrypted,\r\n        algorithm: 'unsupported-algorithm'\r\n      };\r\n      \r\n      await expect(encryptionService.decryptData(invalidEncrypted))\r\n        .rejects.toThrow('Unsupported encryption algorithm');\r\n    });\r\n\r\n    it('should reject encrypted data with future timestamp', async () => {\r\n      const encrypted = await encryptionService.encryptData('test');\r\n      const futureEncrypted = {\r\n        ...encrypted,\r\n        timestamp: Date.now() + 120000 // 2 minutes in future\r\n      };\r\n      \r\n      await expect(encryptionService.decryptData(futureEncrypted))\r\n        .rejects.toThrow('Encrypted data timestamp is in the future');\r\n    });\r\n\r\n    it('should reject encrypted data that is too old', async () => {\r\n      const encrypted = await encryptionService.encryptData('test');\r\n      const oldEncrypted = {\r\n        ...encrypted,\r\n        timestamp: Date.now() - (366 * 24 * 60 * 60 * 1000) // Over 1 year old\r\n      };\r\n      \r\n      await expect(encryptionService.decryptData(oldEncrypted))\r\n        .rejects.toThrow('Encrypted data is too old');\r\n    });\r\n  });\r\n\r\n  describe('Performance and Edge Cases', () => {\r\n    it('should handle large data efficiently', async () => {\r\n      const largeData = 'A'.repeat(100000); // 100KB\r\n      \r\n      const startTime = Date.now();\r\n      const encrypted = await encryptionService.encryptData(largeData);\r\n      const decrypted = await encryptionService.decryptData(encrypted);\r\n      const endTime = Date.now();\r\n      \r\n      expect(decrypted).toBe(largeData);\r\n      expect(endTime - startTime).toBeLessThan(1000); // Should complete within 1 second\r\n    });\r\n\r\n    it('should handle concurrent encryption operations', async () => {\r\n      const testData = 'concurrent test data';\r\n      const promises = [];\r\n      \r\n      // Start 10 concurrent encryption operations\r\n      for (let i = 0; i < 10; i++) {\r\n        promises.push(encryptionService.encryptData(`${testData} ${i}`));\r\n      }\r\n      \r\n      const results = await Promise.all(promises);\r\n      \r\n      expect(results).toHaveLength(10);\r\n      results.forEach((result, index) => {\r\n        expect(result).toBeDefined();\r\n        expect(result.encryptedData).toBeDefined();\r\n      });\r\n    });\r\n\r\n    it('should maintain consistency across encrypt/decrypt cycles', async () => {\r\n      const testData = 'consistency test data';\r\n      \r\n      // Perform multiple encrypt/decrypt cycles\r\n      let currentData = testData;\r\n      for (let i = 0; i < 5; i++) {\r\n        const encrypted = await encryptionService.encryptData(currentData);\r\n        currentData = await encryptionService.decryptData(encrypted);\r\n      }\r\n      \r\n      expect(currentData).toBe(testData);\r\n    });\r\n\r\n    it('should handle binary data correctly', async () => {\r\n      const binaryData = Buffer.from([0, 1, 2, 3, 255, 254, 253]).toString('base64');\r\n      \r\n      const encrypted = await encryptionService.encryptData(binaryData);\r\n      const decrypted = await encryptionService.decryptData(encrypted);\r\n      \r\n      expect(decrypted).toBe(binaryData);\r\n    });\r\n  });\r\n});"],"version":3}