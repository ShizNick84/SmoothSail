{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\tests\\notifications\\notification-template-content-testing.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\tests\\notifications\\notification-template-content-testing.test.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * NOTIFICATION TEMPLATE AND CONTENT TESTING SUITE\r\n * =============================================================================\r\n * \r\n * Comprehensive test suite for validating notification templates, content,\r\n * delivery reliability, emoji display, and cross-platform compatibility\r\n * for Intel NUC deployment.\r\n * \r\n * Task 8.3: Test Notification Templates and Content\r\n * - Test all Telegram notification templates with real trading data\r\n * - Validate email templates render correctly in different email clients\r\n * - Test notification content includes all relevant trading information\r\n * - Verify emoji and formatting display correctly across platforms\r\n * - Test notification escalation and fallback scenarios\r\n * - Validate notification timing and delivery reliability\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0 - Task 8.3 Implementation\r\n * =============================================================================\r\n */\r\n\r\nimport { describe, test, expect, beforeAll, afterAll, beforeEach, afterEach, jest } from '@jest/globals';\r\nimport { IntelNucTelegramService, IntelNucTradingData, IntelNucSystemData } from '../../core/notifications/intel-nuc-telegram-service';\r\nimport { IntelNucEmailService, IntelNucEmailType } from '../../core/notifications/intel-nuc-email-service';\r\nimport { TradingNotifications, TradeExecutionData, PositionData, PerformanceSummaryData } from '../../core/notifications/trading-notifications';\r\nimport { TradingDecisionNotifications, TradingDecisionNotificationData, TradingDecisionType } from '../../core/notifications/trading-decision-notifications';\r\nimport { logger } from '../../core/logging/logger';\r\n\r\n// Mock environment variables for comprehensive testing\r\nconst mockEnvVars = {\r\n  TELEGRAM_BOT_TOKEN: 'test_bot_token_123456789',\r\n  TELEGRAM_CHAT_ID: '123456789',\r\n  TELEGRAM_AUTHORIZED_USERS: '123456789,987654321',\r\n  TELEGRAM_ADMIN_USERS: '123456789',\r\n  EMAIL_SMTP_HOST: 'smtp.gmail.com',\r\n  EMAIL_SMTP_PORT: '587',\r\n  EMAIL_FROM: 'test@example.com',\r\n  EMAIL_PASSWORD: 'test_password',\r\n  EMAIL_TO: 'alerts@example.com',\r\n  EMAIL_SMTP_SECURE: 'true',\r\n  NOTIFICATION_EMAIL: 'notifications@example.com',\r\n  SECURITY_EMAIL: 'security@example.com'\r\n};\r\n\r\n// Test data generators for comprehensive testing\r\nconst generateTradingData = (overrides: Partial<IntelNucTradingData> = {}): IntelNucTradingData => ({\r\n  symbol: 'BTC_USDT',\r\n  action: 'BUY',\r\n  quantity: 0.001,\r\n  price: 45000.50,\r\n  pnl: 125.75,\r\n  balance: 10500.25,\r\n  strategy: 'AI Enhanced Moving Average',\r\n  timestamp: new Date('2024-01-15T10:30:00Z'),\r\n  reasoning: 'Strong bullish momentum detected with RSI oversold conditions and positive sentiment analysis indicating high probability of upward movement.',\r\n  marketAnalysis: 'Bitcoin showing strong support at $44,000 level with increasing volume and positive news sentiment from institutional adoption.',\r\n  sentimentScore: 0.75,\r\n  riskAssessment: 'Low risk trade with 2.5% position size and stop loss at $43,500. Risk-reward ratio of 1:3 provides favorable outcome probability.',\r\n  confidence: 0.85,\r\n  systemLoad: 45.2,\r\n  networkLatency: 23,\r\n  sshTunnelStatus: 'healthy',\r\n  ...overrides\r\n});\r\n\r\nconst generateSystemData = (overrides: Partial<IntelNucSystemData> = {}): IntelNucSystemData => ({\r\n  cpuUsage: 52.3,\r\n  ramUsage: 68.7,\r\n  diskUsage: 34.2,\r\n  cpuTemperature: 61.5,\r\n  networkStatus: 'Connected - High Speed',\r\n  uptime: 86400,\r\n  activeConnections: 12,\r\n  sshTunnelHealth: 'healthy',\r\n  sshTunnelLatency: 28,\r\n  tradingEngineStatus: 'active',\r\n  databaseConnections: 3,\r\n  ...overrides\r\n});\r\n\r\nconst generateTradeExecutionData = (overrides: Partial<TradeExecutionData> = {}): TradeExecutionData => ({\r\n  tradeId: 'trade_123456',\r\n  symbol: 'BTC_USDT',\r\n  action: 'BUY',\r\n  quantity: 0.001,\r\n  price: 45000.50,\r\n  totalValue: 45.00,\r\n  fees: 0.045,\r\n  pnl: 125.75,\r\n  balance: 10500.25,\r\n  strategy: 'AI Enhanced Moving Average',\r\n  confidence: 0.85,\r\n  riskReward: 3.0,\r\n  timestamp: new Date('2024-01-15T10:30:00Z'),\r\n  executionTime: 150,\r\n  ...overrides\r\n});\r\n\r\ndescribe('Notification Template and Content Testing Suite - Task 8.3', () => {\r\n  let telegramService: IntelNucTelegramService;\r\n  let emailService: IntelNucEmailService;\r\n  let tradingNotifications: TradingNotifications;\r\n  let tradingDecisionNotifications: TradingDecisionNotifications;\r\n\r\n  beforeAll(async () => {\r\n    // Set up mock environment variables\r\n    Object.entries(mockEnvVars).forEach(([key, value]) => {\r\n      process.env[key] = value;\r\n    });\r\n\r\n    // Initialize services\r\n    telegramService = new IntelNucTelegramService();\r\n    emailService = new IntelNucEmailService();\r\n    tradingNotifications = new TradingNotifications();\r\n    tradingDecisionNotifications = new TradingDecisionNotifications();\r\n\r\n    logger.info('🧪 Starting Task 8.3: Notification Template and Content Testing Suite');\r\n  });\r\n\r\n  afterAll(async () => {\r\n    // Clean up services\r\n    if (telegramService) {\r\n      await telegramService.stop();\r\n    }\r\n    if (tradingNotifications) {\r\n      await tradingNotifications.stop();\r\n    }\r\n    if (tradingDecisionNotifications) {\r\n      await tradingDecisionNotifications.stop();\r\n    }\r\n    \r\n    logger.info('✅ Task 8.3: Notification Template and Content Testing Suite completed');\r\n  });  \r\ndescribe('8.3.1 - Telegram Notification Templates with Real Trading Data', () => {\r\n    beforeEach(() => {\r\n      // Mock the sendNotificationWithRateLimit method for testing\r\n      jest.spyOn(telegramService as any, 'sendNotificationWithRateLimit').mockResolvedValue(12345);\r\n    });\r\n\r\n    afterEach(() => {\r\n      jest.restoreAllMocks();\r\n    });\r\n\r\n    test('should format trade execution notification with complete trading data', async () => {\r\n      const tradingData = generateTradingData({\r\n        action: 'BUY',\r\n        pnl: 125.75,\r\n        confidence: 0.85,\r\n        sentimentScore: 0.75\r\n      });\r\n\r\n      await telegramService.sendTradeExecutionNotification(tradingData);\r\n\r\n      const mockCall = (telegramService as any).sendNotificationWithRateLimit.mock.calls[0][0];\r\n      const messageContent = mockCall.message;\r\n\r\n      // Verify all essential trading data is included\r\n      expect(messageContent).toContain('BTC_USDT');\r\n      expect(messageContent).toContain('BUY');\r\n      expect(messageContent).toContain('0.001');\r\n      expect(messageContent).toContain('45000.50');\r\n      expect(messageContent).toContain('125.75');\r\n      expect(messageContent).toContain('10500.25');\r\n      expect(messageContent).toContain('AI Enhanced Moving Average');\r\n      expect(messageContent).toContain('85.0%'); // Confidence\r\n      expect(messageContent).toContain('Intel NUC'); // System identifier\r\n\r\n      // Verify AI reasoning and analysis are included\r\n      expect(messageContent).toContain('AI Reasoning');\r\n      expect(messageContent).toContain('Strong bullish momentum');\r\n      expect(messageContent).toContain('Market Analysis');\r\n      expect(messageContent).toContain('Bitcoin showing strong support');\r\n      expect(messageContent).toContain('Risk Assessment');\r\n      expect(messageContent).toContain('Low risk trade');\r\n\r\n      // Verify system status information\r\n      expect(messageContent).toContain('System Status');\r\n      expect(messageContent).toContain('45.2%'); // System load\r\n      expect(messageContent).toContain('HEALTHY'); // SSH tunnel status\r\n      expect(messageContent).toContain('23ms'); // Network latency\r\n\r\n      // Verify emojis are present\r\n      expect(messageContent).toContain('🟢'); // Buy emoji\r\n      expect(messageContent).toContain('📈'); // Action emoji\r\n      expect(messageContent).toContain('💰'); // PnL emoji\r\n      expect(messageContent).toContain('🎯'); // Confidence emoji\r\n      expect(messageContent).toContain('🖥️'); // System status\r\n      expect(messageContent).toContain('😊'); // Sentiment emoji\r\n\r\n      // Verify message structure and formatting\r\n      expect(mockCall.parseMode).toBe('HTML');\r\n      expect(mockCall.type).toBe('TRADE_EXECUTION');\r\n      expect(mockCall.priority).toBe('high');\r\n    });\r\n\r\n    test('should format sell trade notification with negative P&L correctly', async () => {\r\n      const tradingData = generateTradingData({\r\n        action: 'SELL',\r\n        pnl: -45.30,\r\n        confidence: 0.65,\r\n        sentimentScore: -0.2\r\n      });\r\n\r\n      await telegramService.sendTradeExecutionNotification(tradingData);\r\n\r\n      const mockCall = (telegramService as any).sendNotificationWithRateLimit.mock.calls[0][0];\r\n      const messageContent = mockCall.message;\r\n\r\n      // Verify sell-specific formatting\r\n      expect(messageContent).toContain('🔴'); // Sell emoji\r\n      expect(messageContent).toContain('📉'); // Sell action emoji\r\n      expect(messageContent).toContain('SELL');\r\n      expect(messageContent).toContain('-45.30'); // Negative P&L\r\n      expect(messageContent).toContain('65.0%'); // Lower confidence\r\n      expect(messageContent).toContain('😕'); // Negative sentiment emoji\r\n    });\r\n\r\n    test('should format trade opportunity missed notification with detailed reasoning', async () => {\r\n      const missedData = {\r\n        symbol: 'ETH_USDT',\r\n        reason: 'Risk management threshold exceeded - volatility too high',\r\n        marketConditions: 'High volatility detected with conflicting technical indicators. Sentiment analysis shows mixed signals with institutional selling pressure.',\r\n        sentimentScore: 0.15,\r\n        potentialPnL: 89.50,\r\n        timestamp: new Date('2024-01-15T11:45:00Z')\r\n      };\r\n\r\n      await telegramService.sendTradeOpportunityMissedNotification(missedData);\r\n\r\n      const mockCall = (telegramService as any).sendNotificationWithRateLimit.mock.calls[0][0];\r\n      const messageContent = mockCall.message;\r\n\r\n      // Verify missed opportunity content\r\n      expect(messageContent).toContain('TRADE OPPORTUNITY MISSED');\r\n      expect(messageContent).toContain('ETH_USDT');\r\n      expect(messageContent).toContain('Risk management threshold exceeded');\r\n      expect(messageContent).toContain('89.50'); // Potential P&L\r\n      expect(messageContent).toContain('High volatility detected');\r\n      expect(messageContent).toContain('⏸️'); // Missed trade emoji\r\n      expect(messageContent).toContain('Intel NUC');\r\n      expect(messageContent).toContain('😕'); // Neutral/negative sentiment\r\n    });    \r\ntest('should format daily summary with comprehensive Intel NUC metrics', async () => {\r\n      const summaryData = {\r\n        totalTrades: 15,\r\n        winRate: 73.3,\r\n        totalPnL: 245.80,\r\n        bestTrade: 89.50,\r\n        worstTrade: -23.10,\r\n        balance: 10745.80,\r\n        date: new Date('2024-01-15T23:59:00Z'),\r\n        systemPerformance: generateSystemData(),\r\n        strategyBreakdown: {\r\n          'AI Enhanced MA': { trades: 8, pnl: 156.30 },\r\n          'RSI Momentum': { trades: 4, pnl: 78.20 },\r\n          'MACD Crossover': { trades: 3, pnl: 11.30 }\r\n        },\r\n        marketConditions: 'Bullish market conditions with strong institutional buying pressure and positive regulatory developments.'\r\n      };\r\n\r\n      await telegramService.sendDailySummary(summaryData);\r\n\r\n      const mockCall = (telegramService as any).sendNotificationWithRateLimit.mock.calls[0][0];\r\n      const messageContent = mockCall.message;\r\n\r\n      // Verify trading performance metrics\r\n      expect(messageContent).toContain('DAILY TRADING SUMMARY');\r\n      expect(messageContent).toContain('15'); // Total trades\r\n      expect(messageContent).toContain('73.3%'); // Win rate\r\n      expect(messageContent).toContain('245.80'); // Total P&L\r\n      expect(messageContent).toContain('10745.80'); // Balance\r\n\r\n      // Verify Intel NUC performance metrics\r\n      expect(messageContent).toContain('Intel NUC Performance');\r\n      expect(messageContent).toContain('52.3%'); // CPU usage\r\n      expect(messageContent).toContain('68.7%'); // RAM usage\r\n      expect(messageContent).toContain('61.5°C'); // CPU temperature\r\n      expect(messageContent).toContain('HEALTHY'); // SSH tunnel health\r\n      expect(messageContent).toContain('28ms'); // SSH tunnel latency\r\n\r\n      // Verify strategy breakdown\r\n      expect(messageContent).toContain('Strategy Breakdown');\r\n      expect(messageContent).toContain('AI Enhanced MA');\r\n      expect(messageContent).toContain('8 trades');\r\n      expect(messageContent).toContain('156.30');\r\n\r\n      // Verify market conditions\r\n      expect(messageContent).toContain('Market Conditions');\r\n      expect(messageContent).toContain('Bullish market conditions');\r\n\r\n      // Verify emojis and formatting\r\n      expect(messageContent).toContain('📊'); // Summary emoji\r\n      expect(messageContent).toContain('🖥️'); // Intel NUC emoji\r\n      expect(messageContent).toContain('🚀'); // Positive P&L emoji\r\n      expect(messageContent).toContain('🎯'); // Win rate emoji\r\n    });\r\n\r\n    test('should format system health notification with all hardware metrics', async () => {\r\n      const systemData = generateSystemData({\r\n        cpuUsage: 75.8,\r\n        ramUsage: 82.3,\r\n        diskUsage: 45.6,\r\n        cpuTemperature: 68.2,\r\n        sshTunnelHealth: 'healthy',\r\n        sshTunnelLatency: 31\r\n      });\r\n\r\n      await telegramService.sendSystemHealth(systemData);\r\n\r\n      const mockCall = (telegramService as any).sendNotificationWithRateLimit.mock.calls[0][0];\r\n      const messageContent = mockCall.message;\r\n\r\n      // Verify system health content\r\n      expect(messageContent).toContain('INTEL NUC SYSTEM HEALTH');\r\n      expect(messageContent).toContain('75.8%'); // CPU usage\r\n      expect(messageContent).toContain('82.3%'); // RAM usage\r\n      expect(messageContent).toContain('45.6%'); // Disk usage\r\n      expect(messageContent).toContain('68.2°C'); // CPU temperature\r\n      expect(messageContent).toContain('HEALTHY'); // SSH tunnel health\r\n      expect(messageContent).toContain('31ms'); // SSH tunnel latency\r\n      expect(messageContent).toContain('ACTIVE'); // Trading engine status\r\n      expect(messageContent).toContain('1d 0h 0m'); // Uptime formatting\r\n\r\n      // Verify appropriate emojis based on thresholds\r\n      expect(messageContent).toContain('🟡'); // CPU usage (70-90%)\r\n      expect(messageContent).toContain('🟡'); // RAM usage (70-90%)\r\n      expect(messageContent).toContain('🟢'); // Disk usage (<70%)\r\n      expect(messageContent).toContain('🌡️'); // Temperature emoji\r\n      expect(messageContent).toContain('🟢'); // SSH tunnel healthy\r\n    });\r\n\r\n    test('should handle emoji display correctly across different scenarios', () => {\r\n      // Test confidence emojis\r\n      expect(telegramService['getConfidenceEmoji'](0.9)).toBe('🎯');\r\n      expect(telegramService['getConfidenceEmoji'](0.7)).toBe('✅');\r\n      expect(telegramService['getConfidenceEmoji'](0.5)).toBe('⚖️');\r\n      expect(telegramService['getConfidenceEmoji'](0.2)).toBe('❓');\r\n\r\n      // Test sentiment emojis\r\n      expect(telegramService['getSentimentEmoji'](0.8)).toBe('😊');\r\n      expect(telegramService['getSentimentEmoji'](0.3)).toBe('😐');\r\n      expect(telegramService['getSentimentEmoji'](-0.1)).toBe('😕');\r\n      expect(telegramService['getSentimentEmoji'](-0.5)).toBe('😰');\r\n\r\n      // Test system health emojis\r\n      expect(telegramService['getSystemHealthEmoji'](50)).toBe('🟢');\r\n      expect(telegramService['getSystemHealthEmoji'](80)).toBe('🟡');\r\n      expect(telegramService['getSystemHealthEmoji'](95)).toBe('🔴');\r\n\r\n      // Test tunnel status emojis\r\n      expect(telegramService['getTunnelStatusEmoji']('healthy')).toBe('🟢');\r\n      expect(telegramService['getTunnelStatusEmoji']('degraded')).toBe('🟡');\r\n      expect(telegramService['getTunnelStatusEmoji']('failed')).toBe('🔴');\r\n    });\r\n\r\n    test('should format text correctly and handle truncation', () => {\r\n      // Test sentiment score formatting\r\n      expect(telegramService['formatSentimentScore'](0.8)).toBe('Very Positive');\r\n      expect(telegramService['formatSentimentScore'](0.3)).toBe('Positive');\r\n      expect(telegramService['formatSentimentScore'](0.0)).toBe('Neutral');\r\n      expect(telegramService['formatSentimentScore'](-0.3)).toBe('Negative');\r\n      expect(telegramService['formatSentimentScore'](-0.8)).toBe('Very Negative');\r\n\r\n      // Test uptime formatting\r\n      expect(telegramService['formatUptime'](3600)).toBe('1h 0m');\r\n      expect(telegramService['formatUptime'](86400)).toBe('1d 0h 0m');\r\n      expect(telegramService['formatUptime'](90061)).toBe('1d 1h 1m');\r\n      expect(telegramService['formatUptime'](300)).toBe('5m');\r\n\r\n      // Test text truncation\r\n      const longText = 'This is a very long text that should be truncated when it exceeds the maximum length limit to prevent message overflow and ensure readability.';\r\n      const truncated = telegramService['truncateText'](longText, 50);\r\n      \r\n      expect(truncated.length).toBeLessThanOrEqual(50);\r\n      expect(truncated).toContain('...');\r\n      expect(truncated).toBe('This is a very long text that should be trunca...');\r\n    });\r\n  });  descr\r\nibe('8.3.2 - Email Template Rendering and Content Validation', () => {\r\n    beforeEach(() => {\r\n      // Mock the sendNotification method for testing\r\n      jest.spyOn(emailService as any, 'sendNotification').mockResolvedValue('test-message-id-123');\r\n    });\r\n\r\n    afterEach(() => {\r\n      jest.restoreAllMocks();\r\n    });\r\n\r\n    test('should generate HTML trade execution email with complete styling and data', async () => {\r\n      const tradingData = {\r\n        symbol: 'BTC_USDT',\r\n        action: 'BUY' as const,\r\n        quantity: 0.001,\r\n        price: 45000.50,\r\n        pnl: 125.75,\r\n        balance: 10500.25,\r\n        strategy: 'AI Enhanced Moving Average',\r\n        confidence: 85,\r\n        sentimentScore: 0.75,\r\n        reasoning: 'Strong bullish momentum detected with RSI oversold conditions and positive sentiment analysis.',\r\n        marketAnalysis: 'Bitcoin showing strong support at $44,000 level with increasing volume and institutional adoption.',\r\n        riskAssessment: 'Low risk trade with 2.5% position size and stop loss at $43,500.',\r\n        timestamp: new Date('2024-01-15T10:30:00Z')\r\n      };\r\n\r\n      await emailService.sendTradeExecutionNotification(tradingData);\r\n\r\n      const mockCall = (emailService as any).sendNotification.mock.calls[0][0];\r\n\r\n      // Verify email structure\r\n      expect(mockCall.type).toBe(IntelNucEmailType.TRADE_EXECUTION);\r\n      expect(mockCall.priority).toBe('high');\r\n      expect(mockCall.subject).toContain('Trade Executed: BUY BTC_USDT [Intel NUC]');\r\n\r\n      // Verify template data completeness\r\n      const templateData = mockCall.templateData;\r\n      expect(templateData.systemName).toBe('AI Crypto Trading Agent - Intel NUC');\r\n      expect(templateData.symbol).toBe('BTC_USDT');\r\n      expect(templateData.action).toBe('BUY');\r\n      expect(templateData.quantity).toBe(0.001);\r\n      expect(templateData.price).toBe(45000.50);\r\n      expect(templateData.pnl).toBe(125.75);\r\n      expect(templateData.balance).toBe(10500.25);\r\n      expect(templateData.strategy).toBe('AI Enhanced Moving Average');\r\n      expect(templateData.confidence).toBe(85);\r\n      expect(templateData.reasoning).toBe('Strong bullish momentum detected with RSI oversold conditions and positive sentiment analysis.');\r\n      expect(templateData.marketAnalysis).toBe('Bitcoin showing strong support at $44,000 level with increasing volume and institutional adoption.');\r\n      expect(templateData.riskAssessment).toBe('Low risk trade with 2.5% position size and stop loss at $43,500.');\r\n    });\r\n\r\n    test('should generate responsive daily summary email with Intel NUC metrics', async () => {\r\n      const summaryData = {\r\n        totalTrades: 15,\r\n        winRate: 73.3,\r\n        totalPnL: 245.80,\r\n        bestTrade: 89.50,\r\n        worstTrade: -23.10,\r\n        balance: 10745.80,\r\n        date: new Date('2024-01-15T23:59:00Z'),\r\n        systemPerformance: {\r\n          cpuUsage: 52.3,\r\n          ramUsage: 68.7,\r\n          diskUsage: 34.2,\r\n          cpuTemperature: 61.5,\r\n          sshTunnelHealth: 'healthy' as const,\r\n          sshTunnelLatency: 28,\r\n          uptime: 86400\r\n        },\r\n        strategyBreakdown: {\r\n          'AI Enhanced MA': { trades: 8, pnl: 156.30 },\r\n          'RSI Momentum': { trades: 4, pnl: 78.20 }\r\n        },\r\n        marketConditions: 'Bullish market conditions with strong institutional buying pressure.'\r\n      };\r\n\r\n      await emailService.sendDailySummary(summaryData);\r\n\r\n      const mockCall = (emailService as any).sendNotification.mock.calls[0][0];\r\n      const templateData = mockCall.templateData;\r\n\r\n      // Verify daily summary data\r\n      expect(mockCall.type).toBe(IntelNucEmailType.DAILY_SUMMARY);\r\n      expect(mockCall.subject).toContain('Daily Trading Summary');\r\n      expect(templateData.totalTrades).toBe(15);\r\n      expect(templateData.winRate).toBe(73.3);\r\n      expect(templateData.totalPnL).toBe(245.80);\r\n      expect(templateData.cpuUsage).toBe(52.3);\r\n      expect(templateData.sshTunnelHealth).toBe('healthy');\r\n      expect(templateData.strategyBreakdown).toEqual(summaryData.strategyBreakdown);\r\n      expect(templateData.marketConditions).toBe('Bullish market conditions with strong institutional buying pressure.');\r\n    });\r\n\r\n    test('should generate security alert email with dark theme and proper formatting', async () => {\r\n      const securityData = {\r\n        threatLevel: 'HIGH' as const,\r\n        incidentType: 'Unauthorized Access Attempt',\r\n        description: 'Multiple failed login attempts detected from suspicious IP addresses targeting Intel NUC system.',\r\n        affectedSystems: ['Intel NUC Trading System', 'SSH Tunnel', 'Database'],\r\n        timestamp: new Date('2024-01-15T16:45:00Z')\r\n      };\r\n\r\n      await emailService.sendSecurityAlert(securityData);\r\n\r\n      const mockCall = (emailService as any).sendNotification.mock.calls[0][0];\r\n      const templateData = mockCall.templateData;\r\n\r\n      // Verify security alert structure\r\n      expect(mockCall.type).toBe(IntelNucEmailType.SECURITY_ALERT);\r\n      expect(mockCall.priority).toBe('high');\r\n      expect(mockCall.subject).toContain('Security Alert: HIGH');\r\n      expect(templateData.threatLevel).toBe('HIGH');\r\n      expect(templateData.incidentType).toBe('Unauthorized Access Attempt');\r\n      expect(templateData.description).toBe('Multiple failed login attempts detected from suspicious IP addresses targeting Intel NUC system.');\r\n      expect(templateData.affectedSystems).toEqual(['Intel NUC Trading System', 'SSH Tunnel', 'Database']);\r\n      expect(templateData.theme).toBe('dark'); // Security alerts use dark theme\r\n    });\r\n\r\n    test('should handle missing template data gracefully', async () => {\r\n      const incompleteData = {\r\n        symbol: 'ETH_USDT',\r\n        action: 'SELL' as const,\r\n        // Missing other required fields\r\n        timestamp: new Date()\r\n      };\r\n\r\n      // Should not throw error, should handle missing data gracefully\r\n      await expect(emailService.sendTradeExecutionNotification(incompleteData as any)).resolves.toBeDefined();\r\n\r\n      const mockCall = (emailService as any).sendNotification.mock.calls[0][0];\r\n      expect(mockCall.templateData.symbol).toBe('ETH_USDT');\r\n      expect(mockCall.templateData.action).toBe('SELL');\r\n    });\r\n\r\n    test('should process HTML template conditionals correctly', () => {\r\n      const testTemplate = '{{#if pnl}}Profit: ${{pnl}}{{/if}}{{#if reasoning}}Reason: {{reasoning}}{{/if}}';\r\n      const testData = { pnl: 125.75, reasoning: 'Test reasoning' };\r\n\r\n      const result = emailService['processConditionals'](testTemplate, testData as any);\r\n\r\n      expect(result).toContain('Profit: $125.75');\r\n      expect(result).toContain('Reason: Test reasoning');\r\n    });\r\n\r\n    test('should process HTML template loops correctly', () => {\r\n      const testTemplate = '{{#each strategies}}Strategy: {{@key}} - {{this.pnl}}{{/each}}';\r\n      const testData = { \r\n        strategies: { \r\n          'MA Strategy': { pnl: 100 }, \r\n          'RSI Strategy': { pnl: 50 } \r\n        } \r\n      };\r\n\r\n      const result = emailService['processLoops'](testTemplate, testData as any);\r\n\r\n      expect(result).toContain('Strategy: MA Strategy - 100');\r\n      expect(result).toContain('Strategy: RSI Strategy - 50');\r\n    });\r\n  }); \r\n describe('8.3.3 - Notification Delivery and Reliability Testing', () => {\r\n    test('should track delivery status correctly', async () => {\r\n      const tradingData = generateTradingData();\r\n\r\n      // Mock successful delivery\r\n      jest.spyOn(telegramService as any, 'sendNotificationWithRateLimit').mockResolvedValue(12350);\r\n\r\n      const messageId = await telegramService.sendTradeExecutionNotification(tradingData);\r\n\r\n      expect(messageId).toBe(12350);\r\n      expect(telegramService['sendNotificationWithRateLimit']).toHaveBeenCalledTimes(1);\r\n    });\r\n\r\n    test('should handle rate limiting correctly', async () => {\r\n      // Mock rate limit exceeded\r\n      jest.spyOn(telegramService as any, 'sendNotificationWithRateLimit')\r\n        .mockRejectedValueOnce(new Error('Rate limit exceeded'));\r\n\r\n      const tradingData = generateTradingData();\r\n\r\n      await expect(telegramService.sendTradeExecutionNotification(tradingData))\r\n        .rejects.toThrow('Rate limit exceeded');\r\n    });\r\n\r\n    test('should validate notification content length limits', () => {\r\n      const veryLongReasoning = 'A'.repeat(1000);\r\n      const truncated = telegramService['truncateText'](veryLongReasoning, 200);\r\n      \r\n      expect(truncated.length).toBeLessThanOrEqual(200);\r\n      expect(truncated.endsWith('...')).toBe(true);\r\n    });\r\n\r\n    test('should handle network failures gracefully', async () => {\r\n      // Mock network timeout\r\n      jest.spyOn(emailService as any, 'sendNotification')\r\n        .mockRejectedValueOnce(new Error('Network timeout'));\r\n\r\n      const tradingData = {\r\n        symbol: 'BTC_USDT',\r\n        action: 'BUY' as const,\r\n        quantity: 0.001,\r\n        price: 45000,\r\n        balance: 10000,\r\n        strategy: 'Test Strategy',\r\n        timestamp: new Date()\r\n      };\r\n\r\n      await expect(emailService.sendTradeExecutionNotification(tradingData))\r\n        .rejects.toThrow('Network timeout');\r\n    });\r\n\r\n    test('should provide accurate service statistics', () => {\r\n      const stats = telegramService.getStatistics();\r\n      \r\n      expect(stats).toHaveProperty('totalSent');\r\n      expect(stats).toHaveProperty('totalFailed');\r\n      expect(stats).toHaveProperty('authorizedUsers');\r\n      expect(stats).toHaveProperty('adminUsers');\r\n      expect(stats).toHaveProperty('rateLimitHits');\r\n      \r\n      expect(typeof stats.totalSent).toBe('number');\r\n      expect(typeof stats.totalFailed).toBe('number');\r\n      expect(typeof stats.authorizedUsers).toBe('number');\r\n      expect(typeof stats.adminUsers).toBe('number');\r\n    });\r\n  });\r\n\r\n  describe('8.3.4 - Cross-Platform Compatibility and Emoji Display', () => {\r\n    test('should format messages correctly for different devices', () => {\r\n      const testMessage = '🚀 Trade: BTC_USDT 📈 Profit: $125.75 💰';\r\n      \r\n      // Verify emoji characters are properly encoded\r\n      expect(testMessage).toContain('🚀');\r\n      expect(testMessage).toContain('📈');\r\n      expect(testMessage).toContain('💰');\r\n      \r\n      // Verify message structure\r\n      expect(testMessage).toMatch(/🚀.*BTC_USDT.*📈.*\\$125\\.75.*💰/);\r\n    });\r\n\r\n    test('should handle HTML email rendering across email clients', async () => {\r\n      const mockData = {\r\n        symbol: 'BTC_USDT',\r\n        action: 'BUY' as const,\r\n        quantity: 0.001,\r\n        price: 45000,\r\n        pnl: 125.75,\r\n        balance: 10000,\r\n        strategy: 'Test Strategy',\r\n        timestamp: new Date()\r\n      };\r\n\r\n      // Mock HTML generation\r\n      jest.spyOn(emailService as any, 'generateEmailContent').mockResolvedValue(`\r\n        <html>\r\n          <body style=\"font-family: Arial, sans-serif;\">\r\n            <div style=\"max-width: 600px; margin: 0 auto;\">\r\n              <h1>Trade Executed</h1>\r\n              <p>Symbol: BTC_USDT</p>\r\n              <p>P&L: $125.75</p>\r\n            </div>\r\n          </body>\r\n        </html>\r\n      `);\r\n\r\n      jest.spyOn(emailService as any, 'sendNotification').mockResolvedValue('test-id');\r\n\r\n      await emailService.sendTradeExecutionNotification(mockData);\r\n\r\n      // Verify HTML structure is email-client friendly\r\n      const htmlContent = await emailService['generateEmailContent'].mock.results[0].value;\r\n      expect(htmlContent).toContain('<html>');\r\n      expect(htmlContent).toContain('font-family: Arial');\r\n      expect(htmlContent).toContain('max-width: 600px');\r\n      expect(htmlContent).toContain('margin: 0 auto');\r\n    });\r\n\r\n    test('should handle special characters and encoding correctly', () => {\r\n      const testData = {\r\n        symbol: 'BTC/USDT', // Forward slash\r\n        strategy: 'AI & ML Enhanced', // Ampersand\r\n        reasoning: 'Price > $45,000 indicates strong momentum', // Greater than, dollar sign\r\n      };\r\n\r\n      // Test that special characters are handled properly\r\n      expect(testData.symbol).toContain('/');\r\n      expect(testData.strategy).toContain('&');\r\n      expect(testData.reasoning).toContain('>');\r\n      expect(testData.reasoning).toContain('$');\r\n    });\r\n  });  de\r\nscribe('8.3.5 - Notification Escalation and Fallback Scenarios', () => {\r\n    test('should handle notification escalation for critical alerts', async () => {\r\n      const criticalAlert = {\r\n        threatLevel: 'CRITICAL' as const,\r\n        incidentType: 'System Compromise',\r\n        description: 'Unauthorized access detected on Intel NUC system',\r\n        affectedSystems: ['Trading System', 'SSH Tunnel'],\r\n        timestamp: new Date()\r\n      };\r\n\r\n      jest.spyOn(emailService as any, 'sendNotification').mockResolvedValue('critical-alert-id');\r\n\r\n      await emailService.sendSecurityAlert(criticalAlert);\r\n\r\n      const mockCall = (emailService as any).sendNotification.mock.calls[0][0];\r\n      expect(mockCall.priority).toBe('critical');\r\n      expect(mockCall.subject).toContain('CRITICAL');\r\n    });\r\n\r\n    test('should implement fallback mechanisms for failed deliveries', async () => {\r\n      // Mock primary service failure and fallback success\r\n      const mockPrimaryFail = jest.fn().mockRejectedValueOnce(new Error('Primary service failed'));\r\n      const mockFallbackSuccess = jest.fn().mockResolvedValue('fallback-success');\r\n\r\n      // Test fallback logic\r\n      try {\r\n        await mockPrimaryFail();\r\n      } catch (error) {\r\n        const fallbackResult = await mockFallbackSuccess();\r\n        expect(fallbackResult).toBe('fallback-success');\r\n      }\r\n    });\r\n\r\n    test('should validate notification timing and delivery reliability', async () => {\r\n      const startTime = Date.now();\r\n      const notifications = [];\r\n\r\n      // Simulate multiple rapid notifications\r\n      for (let i = 0; i < 5; i++) {\r\n        const tradingData = generateTradingData({\r\n          symbol: `TEST_${i}`,\r\n          price: 45000 + i\r\n        });\r\n        notifications.push(tradingData);\r\n      }\r\n\r\n      jest.spyOn(telegramService as any, 'sendNotificationWithRateLimit').mockResolvedValue(12345);\r\n\r\n      // Send all notifications\r\n      const promises = notifications.map(data => \r\n        telegramService.sendTradeExecutionNotification(data)\r\n      );\r\n\r\n      await Promise.all(promises);\r\n\r\n      const endTime = Date.now();\r\n      const totalTime = endTime - startTime;\r\n\r\n      // Verify all notifications were sent\r\n      expect(telegramService['sendNotificationWithRateLimit']).toHaveBeenCalledTimes(5);\r\n      \r\n      // Verify reasonable performance (should complete within 5 seconds)\r\n      expect(totalTime).toBeLessThan(5000);\r\n    });\r\n  });\r\n\r\n  describe('8.3.6 - Performance and Resource Usage Testing', () => {\r\n    test('should handle high-frequency notifications efficiently', async () => {\r\n      const startTime = Date.now();\r\n      const notifications = [];\r\n\r\n      // Generate 20 notifications for performance testing\r\n      for (let i = 0; i < 20; i++) {\r\n        const tradingData = generateTradingData({\r\n          symbol: `PERF_TEST_${i}`,\r\n          price: 45000 + (i * 10),\r\n          pnl: (i % 2 === 0) ? 50 + i : -(30 + i)\r\n        });\r\n        notifications.push(tradingData);\r\n      }\r\n\r\n      jest.spyOn(telegramService as any, 'sendNotificationWithRateLimit').mockResolvedValue(12345);\r\n\r\n      // Process all notifications\r\n      const results = await Promise.allSettled(\r\n        notifications.map(data => telegramService.sendTradeExecutionNotification(data))\r\n      );\r\n\r\n      const endTime = Date.now();\r\n      const processingTime = endTime - startTime;\r\n\r\n      // Verify performance metrics\r\n      expect(results.length).toBe(20);\r\n      expect(results.every(result => result.status === 'fulfilled')).toBe(true);\r\n      expect(processingTime).toBeLessThan(10000); // Should complete within 10 seconds\r\n      \r\n      // Verify all notifications were processed\r\n      expect(telegramService['sendNotificationWithRateLimit']).toHaveBeenCalledTimes(20);\r\n    });\r\n\r\n    test('should monitor memory usage during notification processing', () => {\r\n      const initialMemory = process.memoryUsage();\r\n      \r\n      // Generate large notification data\r\n      const largeNotificationData = generateTradingData({\r\n        reasoning: 'A'.repeat(5000), // Large reasoning text\r\n        marketAnalysis: 'B'.repeat(3000), // Large market analysis\r\n        riskAssessment: 'C'.repeat(2000) // Large risk assessment\r\n      });\r\n\r\n      // Process notification (mocked)\r\n      jest.spyOn(telegramService as any, 'sendNotificationWithRateLimit').mockResolvedValue(12345);\r\n      \r\n      // Memory should not increase significantly\r\n      const finalMemory = process.memoryUsage();\r\n      const memoryIncrease = finalMemory.heapUsed - initialMemory.heapUsed;\r\n      \r\n      // Memory increase should be reasonable (less than 50MB)\r\n      expect(memoryIncrease).toBeLessThan(50 * 1024 * 1024);\r\n    });\r\n  });\r\n\r\n  describe('8.3.7 - Integration Testing with Trading Notifications', () => {\r\n    beforeEach(() => {\r\n      // Mock the underlying notification services\r\n      jest.spyOn(tradingNotifications as any, 'notificationRouter').mockImplementation({\r\n        sendTradingNotification: jest.fn().mockResolvedValue(undefined),\r\n        sendSystemHealthAlert: jest.fn().mockResolvedValue(undefined),\r\n        routeAlert: jest.fn().mockResolvedValue(undefined)\r\n      });\r\n    });\r\n\r\n    test('should integrate trade execution notifications with trading system', async () => {\r\n      const tradeData = generateTradeExecutionData({\r\n        action: 'BUY',\r\n        pnl: 150.25\r\n      });\r\n\r\n      // Mock the notification methods\r\n      jest.spyOn(tradingNotifications, 'notifyTradeExecution').mockResolvedValue(undefined);\r\n\r\n      await tradingNotifications.notifyTradeExecution(tradeData);\r\n\r\n      expect(tradingNotifications.notifyTradeExecution).toHaveBeenCalledWith(tradeData);\r\n    });\r\n\r\n    test('should validate comprehensive notification content across all templates', async () => {\r\n      // Test data for comprehensive validation\r\n      const testScenarios = [\r\n        {\r\n          name: 'Profitable BUY trade',\r\n          data: generateTradingData({ action: 'BUY', pnl: 125.75, confidence: 0.85 }),\r\n          expectedContent: ['BUY', '125.75', '85.0%', '🟢', '💰']\r\n        },\r\n        {\r\n          name: 'Loss-making SELL trade',\r\n          data: generateTradingData({ action: 'SELL', pnl: -45.30, confidence: 0.60 }),\r\n          expectedContent: ['SELL', '-45.30', '60.0%', '🔴', '📉']\r\n        },\r\n        {\r\n          name: 'High confidence trade',\r\n          data: generateTradingData({ confidence: 0.95, sentimentScore: 0.8 }),\r\n          expectedContent: ['95.0%', '🎯', '😊', 'Very Positive']\r\n        },\r\n        {\r\n          name: 'Low confidence trade',\r\n          data: generateTradingData({ confidence: 0.25, sentimentScore: -0.6 }),\r\n          expectedContent: ['25.0%', '❓', '😰', 'Very Negative']\r\n        }\r\n      ];\r\n\r\n      jest.spyOn(telegramService as any, 'sendNotificationWithRateLimit').mockResolvedValue(12345);\r\n\r\n      for (const scenario of testScenarios) {\r\n        await telegramService.sendTradeExecutionNotification(scenario.data);\r\n        \r\n        const mockCall = (telegramService as any).sendNotificationWithRateLimit.mock.calls.pop()[0];\r\n        const messageContent = mockCall.message;\r\n\r\n        // Verify all expected content is present\r\n        for (const expectedItem of scenario.expectedContent) {\r\n          expect(messageContent).toContain(expectedItem);\r\n        }\r\n\r\n        // Verify message structure\r\n        expect(messageContent).toContain('TRADE EXECUTED');\r\n        expect(messageContent).toContain('Intel NUC');\r\n        expect(messageContent).toContain('System Status');\r\n      }\r\n    });\r\n  });\r\n});"],"version":3}