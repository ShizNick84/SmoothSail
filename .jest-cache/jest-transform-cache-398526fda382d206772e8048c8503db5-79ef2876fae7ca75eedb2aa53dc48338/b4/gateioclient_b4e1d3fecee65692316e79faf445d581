acdce777dae39657dcdf6e997accf562
"use strict";

/**
 * =============================================================================
 * GATE.IO API CLIENT - SECURE CRYPTOCURRENCY EXCHANGE INTEGRATION
 * =============================================================================
 *
 * This module implements a secure, production-ready Gate.io API client with
 * comprehensive security features, rate limiting, and error handling.
 * All requests are routed through SSH tunnel for consistent IP address.
 *
 * SECURITY FEATURES:
 * - Military-grade credential encryption and secure storage
 * - Request signing with HMAC-SHA512 authentication
 * - Rate limiting with intelligent backoff strategies
 * - Circuit breaker pattern for API health monitoring
 * - Comprehensive audit logging for all API interactions
 * - Request/response validation and integrity checking
 *
 * CRITICAL SECURITY NOTICE:
 * This client handles real financial assets and trading operations.
 * All security measures must be maintained and regularly audited.
 *
 * @author AI Crypto Trading System
 * @version 1.0.0
 * @license PROPRIETARY
 * =============================================================================
 */
/* istanbul ignore next */
function cov_1uyuzd78xp() {
  var path = "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\api\\gate-io-client.ts";
  var hash = "51654aee8a2648fd304f434d16a2d05d5dd3ea2c";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\api\\gate-io-client.ts",
    statementMap: {
      "0": {
        start: {
          line: 28,
          column: 22
        },
        end: {
          line: 30,
          column: 1
        }
      },
      "1": {
        start: {
          line: 29,
          column: 4
        },
        end: {
          line: 29,
          column: 62
        }
      },
      "2": {
        start: {
          line: 31,
          column: 0
        },
        end: {
          line: 31,
          column: 62
        }
      },
      "3": {
        start: {
          line: 32,
          column: 0
        },
        end: {
          line: 32,
          column: 82
        }
      },
      "4": {
        start: {
          line: 33,
          column: 16
        },
        end: {
          line: 33,
          column: 49
        }
      },
      "5": {
        start: {
          line: 34,
          column: 17
        },
        end: {
          line: 34,
          column: 51
        }
      },
      "6": {
        start: {
          line: 35,
          column: 32
        },
        end: {
          line: 35,
          column: 64
        }
      },
      "7": {
        start: {
          line: 36,
          column: 17
        },
        end: {
          line: 36,
          column: 49
        }
      },
      "8": {
        start: {
          line: 37,
          column: 29
        },
        end: {
          line: 37,
          column: 69
        }
      },
      "9": {
        start: {
          line: 38,
          column: 24
        },
        end: {
          line: 38,
          column: 59
        }
      },
      "10": {
        start: {
          line: 42,
          column: 23
        },
        end: {
          line: 48,
          column: 1
        }
      },
      "11": {
        start: {
          line: 53,
          column: 20
        },
        end: {
          line: 69,
          column: 1
        }
      },
      "12": {
        start: {
          line: 74,
          column: 0
        },
        end: {
          line: 78,
          column: 84
        }
      },
      "13": {
        start: {
          line: 75,
          column: 4
        },
        end: {
          line: 75,
          column: 45
        }
      },
      "14": {
        start: {
          line: 76,
          column: 4
        },
        end: {
          line: 76,
          column: 41
        }
      },
      "15": {
        start: {
          line: 77,
          column: 4
        },
        end: {
          line: 77,
          column: 51
        }
      },
      "16": {
        start: {
          line: 83,
          column: 0
        },
        end: {
          line: 87,
          column: 60
        }
      },
      "17": {
        start: {
          line: 84,
          column: 4
        },
        end: {
          line: 84,
          column: 37
        }
      },
      "18": {
        start: {
          line: 85,
          column: 4
        },
        end: {
          line: 85,
          column: 39
        }
      },
      "19": {
        start: {
          line: 86,
          column: 4
        },
        end: {
          line: 86,
          column: 37
        }
      },
      "20": {
        start: {
          line: 93,
          column: 18
        },
        end: {
          line: 93,
          column: 22
        }
      },
      "21": {
        start: {
          line: 101,
          column: 26
        },
        end: {
          line: 101,
          column: 52
        }
      },
      "22": {
        start: {
          line: 103,
          column: 19
        },
        end: {
          line: 103,
          column: 20
        }
      },
      "23": {
        start: {
          line: 104,
          column: 22
        },
        end: {
          line: 104,
          column: 26
        }
      },
      "24": {
        start: {
          line: 108,
          column: 18
        },
        end: {
          line: 108,
          column: 22
        }
      },
      "25": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 110,
          column: 78
        }
      },
      "26": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 111,
          column: 63
        }
      },
      "27": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 113,
          column: 99
        }
      },
      "28": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 114,
          column: 101
        }
      },
      "29": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 115,
          column: 98
        }
      },
      "30": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 121,
          column: 10
        }
      },
      "31": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 131,
          column: 10
        }
      },
      "32": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 133,
          column: 56
        }
      },
      "33": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 134,
          column: 89
        }
      },
      "34": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 176,
          column: 9
        }
      },
      "35": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 145,
          column: 74
        }
      },
      "36": {
        start: {
          line: 147,
          column: 12
        },
        end: {
          line: 147,
          column: 41
        }
      },
      "37": {
        start: {
          line: 149,
          column: 12
        },
        end: {
          line: 149,
          column: 54
        }
      },
      "38": {
        start: {
          line: 151,
          column: 30
        },
        end: {
          line: 151,
          column: 61
        }
      },
      "39": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 165,
          column: 13
        }
      },
      "40": {
        start: {
          line: 153,
          column: 16
        },
        end: {
          line: 153,
          column: 86
        }
      },
      "41": {
        start: {
          line: 154,
          column: 16
        },
        end: {
          line: 159,
          column: 19
        }
      },
      "42": {
        start: {
          line: 160,
          column: 16
        },
        end: {
          line: 160,
          column: 28
        }
      },
      "43": {
        start: {
          line: 163,
          column: 16
        },
        end: {
          line: 163,
          column: 82
        }
      },
      "44": {
        start: {
          line: 164,
          column: 16
        },
        end: {
          line: 164,
          column: 29
        }
      },
      "45": {
        start: {
          line: 168,
          column: 12
        },
        end: {
          line: 168,
          column: 87
        }
      },
      "46": {
        start: {
          line: 169,
          column: 12
        },
        end: {
          line: 174,
          column: 15
        }
      },
      "47": {
        start: {
          line: 175,
          column: 12
        },
        end: {
          line: 175,
          column: 25
        }
      },
      "48": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 205,
          column: 9
        }
      },
      "49": {
        start: {
          line: 184,
          column: 41
        },
        end: {
          line: 188,
          column: 13
        }
      },
      "50": {
        start: {
          line: 189,
          column: 12
        },
        end: {
          line: 191,
          column: 13
        }
      },
      "51": {
        start: {
          line: 190,
          column: 16
        },
        end: {
          line: 190,
          column: 84
        }
      },
      "52": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 199,
          column: 14
        }
      },
      "53": {
        start: {
          line: 200,
          column: 12
        },
        end: {
          line: 200,
          column: 97
        }
      },
      "54": {
        start: {
          line: 203,
          column: 12
        },
        end: {
          line: 203,
          column: 86
        }
      },
      "55": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 204,
          column: 62
        }
      },
      "56": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 215,
          column: 10
        }
      },
      "57": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 221,
          column: 10
        }
      },
      "58": {
        start: {
          line: 222,
          column: 8
        },
        end: {
          line: 222,
          column: 104
        }
      },
      "59": {
        start: {
          line: 228,
          column: 25
        },
        end: {
          line: 235,
          column: 10
        }
      },
      "60": {
        start: {
          line: 237,
          column: 8
        },
        end: {
          line: 237,
          column: 136
        }
      },
      "61": {
        start: {
          line: 237,
          column: 54
        },
        end: {
          line: 237,
          column: 91
        }
      },
      "62": {
        start: {
          line: 237,
          column: 104
        },
        end: {
          line: 237,
          column: 134
        }
      },
      "63": {
        start: {
          line: 239,
          column: 8
        },
        end: {
          line: 239,
          column: 143
        }
      },
      "64": {
        start: {
          line: 239,
          column: 57
        },
        end: {
          line: 239,
          column: 97
        }
      },
      "65": {
        start: {
          line: 239,
          column: 110
        },
        end: {
          line: 239,
          column: 141
        }
      },
      "66": {
        start: {
          line: 240,
          column: 8
        },
        end: {
          line: 240,
          column: 24
        }
      },
      "67": {
        start: {
          line: 246,
          column: 26
        },
        end: {
          line: 246,
          column: 36
        }
      },
      "68": {
        start: {
          line: 248,
          column: 8
        },
        end: {
          line: 248,
          column: 40
        }
      },
      "69": {
        start: {
          line: 250,
          column: 8
        },
        end: {
          line: 252,
          column: 9
        }
      },
      "70": {
        start: {
          line: 251,
          column: 12
        },
        end: {
          line: 251,
          column: 26
        }
      },
      "71": {
        start: {
          line: 254,
          column: 8
        },
        end: {
          line: 270,
          column: 9
        }
      },
      "72": {
        start: {
          line: 255,
          column: 30
        },
        end: {
          line: 255,
          column: 70
        }
      },
      "73": {
        start: {
          line: 256,
          column: 27
        },
        end: {
          line: 256,
          column: 64
        }
      },
      "74": {
        start: {
          line: 257,
          column: 24
        },
        end: {
          line: 257,
          column: 40
        }
      },
      "75": {
        start: {
          line: 258,
          column: 25
        },
        end: {
          line: 258,
          column: 71
        }
      },
      "76": {
        start: {
          line: 260,
          column: 30
        },
        end: {
          line: 260,
          column: 80
        }
      },
      "77": {
        start: {
          line: 261,
          column: 12
        },
        end: {
          line: 266,
          column: 14
        }
      },
      "78": {
        start: {
          line: 267,
          column: 12
        },
        end: {
          line: 269,
          column: 13
        }
      },
      "79": {
        start: {
          line: 268,
          column: 16
        },
        end: {
          line: 268,
          column: 75
        }
      },
      "80": {
        start: {
          line: 272,
          column: 8
        },
        end: {
          line: 277,
          column: 11
        }
      },
      "81": {
        start: {
          line: 278,
          column: 8
        },
        end: {
          line: 278,
          column: 22
        }
      },
      "82": {
        start: {
          line: 284,
          column: 8
        },
        end: {
          line: 286,
          column: 9
        }
      },
      "83": {
        start: {
          line: 285,
          column: 12
        },
        end: {
          line: 285,
          column: 79
        }
      },
      "84": {
        start: {
          line: 288,
          column: 32
        },
        end: {
          line: 288,
          column: 76
        }
      },
      "85": {
        start: {
          line: 290,
          column: 26
        },
        end: {
          line: 293,
          column: 26
        }
      },
      "86": {
        start: {
          line: 294,
          column: 8
        },
        end: {
          line: 294,
          column: 25
        }
      },
      "87": {
        start: {
          line: 300,
          column: 24
        },
        end: {
          line: 300,
          column: 34
        }
      },
      "88": {
        start: {
          line: 301,
          column: 26
        },
        end: {
          line: 301,
          column: 72
        }
      },
      "89": {
        start: {
          line: 302,
          column: 29
        },
        end: {
          line: 302,
          column: 48
        }
      },
      "90": {
        start: {
          line: 304,
          column: 8
        },
        end: {
          line: 304,
          column: 53
        }
      },
      "91": {
        start: {
          line: 306,
          column: 8
        },
        end: {
          line: 311,
          column: 11
        }
      },
      "92": {
        start: {
          line: 312,
          column: 8
        },
        end: {
          line: 312,
          column: 24
        }
      },
      "93": {
        start: {
          line: 318,
          column: 8
        },
        end: {
          line: 318,
          column: 69
        }
      },
      "94": {
        start: {
          line: 319,
          column: 8
        },
        end: {
          line: 324,
          column: 11
        }
      },
      "95": {
        start: {
          line: 325,
          column: 8
        },
        end: {
          line: 325,
          column: 20
        }
      },
      "96": {
        start: {
          line: 331,
          column: 29
        },
        end: {
          line: 331,
          column: 91
        }
      },
      "97": {
        start: {
          line: 333,
          column: 8
        },
        end: {
          line: 333,
          column: 54
        }
      },
      "98": {
        start: {
          line: 335,
          column: 8
        },
        end: {
          line: 341,
          column: 11
        }
      },
      "99": {
        start: {
          line: 343,
          column: 8
        },
        end: {
          line: 350,
          column: 9
        }
      },
      "100": {
        start: {
          line: 344,
          column: 12
        },
        end: {
          line: 344,
          column: 90
        }
      },
      "101": {
        start: {
          line: 345,
          column: 12
        },
        end: {
          line: 345,
          column: 51
        }
      },
      "102": {
        start: {
          line: 347,
          column: 13
        },
        end: {
          line: 350,
          column: 9
        }
      },
      "103": {
        start: {
          line: 348,
          column: 12
        },
        end: {
          line: 348,
          column: 87
        }
      },
      "104": {
        start: {
          line: 349,
          column: 12
        },
        end: {
          line: 349,
          column: 45
        }
      },
      "105": {
        start: {
          line: 351,
          column: 8
        },
        end: {
          line: 351,
          column: 20
        }
      },
      "106": {
        start: {
          line: 357,
          column: 27
        },
        end: {
          line: 357,
          column: 65
        }
      },
      "107": {
        start: {
          line: 358,
          column: 28
        },
        end: {
          line: 358,
          column: 75
        }
      },
      "108": {
        start: {
          line: 359,
          column: 8
        },
        end: {
          line: 359,
          column: 84
        }
      },
      "109": {
        start: {
          line: 360,
          column: 8
        },
        end: {
          line: 360,
          column: 71
        }
      },
      "110": {
        start: {
          line: 360,
          column: 37
        },
        end: {
          line: 360,
          column: 69
        }
      },
      "111": {
        start: {
          line: 366,
          column: 8
        },
        end: {
          line: 366,
          column: 43
        }
      },
      "112": {
        start: {
          line: 367,
          column: 8
        },
        end: {
          line: 376,
          column: 9
        }
      },
      "113": {
        start: {
          line: 368,
          column: 12
        },
        end: {
          line: 368,
          column: 52
        }
      },
      "114": {
        start: {
          line: 369,
          column: 12
        },
        end: {
          line: 369,
          column: 66
        }
      },
      "115": {
        start: {
          line: 370,
          column: 12
        },
        end: {
          line: 370,
          column: 44
        }
      },
      "116": {
        start: {
          line: 373,
          column: 12
        },
        end: {
          line: 373,
          column: 48
        }
      },
      "117": {
        start: {
          line: 374,
          column: 12
        },
        end: {
          line: 374,
          column: 62
        }
      },
      "118": {
        start: {
          line: 375,
          column: 12
        },
        end: {
          line: 375,
          column: 45
        }
      },
      "119": {
        start: {
          line: 378,
          column: 22
        },
        end: {
          line: 378,
          column: 25
        }
      },
      "120": {
        start: {
          line: 379,
          column: 8
        },
        end: {
          line: 380,
          column: 92
        }
      },
      "121": {
        start: {
          line: 381,
          column: 8
        },
        end: {
          line: 381,
          column: 74
        }
      },
      "122": {
        start: {
          line: 387,
          column: 20
        },
        end: {
          line: 387,
          column: 30
        }
      },
      "123": {
        start: {
          line: 388,
          column: 8
        },
        end: {
          line: 406,
          column: 9
        }
      },
      "124": {
        start: {
          line: 390,
          column: 12
        },
        end: {
          line: 390,
          column: 34
        }
      },
      "125": {
        start: {
          line: 392,
          column: 12
        },
        end: {
          line: 395,
          column: 13
        }
      },
      "126": {
        start: {
          line: 393,
          column: 16
        },
        end: {
          line: 393,
          column: 70
        }
      },
      "127": {
        start: {
          line: 394,
          column: 16
        },
        end: {
          line: 394,
          column: 82
        }
      },
      "128": {
        start: {
          line: 398,
          column: 12
        },
        end: {
          line: 398,
          column: 32
        }
      },
      "129": {
        start: {
          line: 399,
          column: 12
        },
        end: {
          line: 399,
          column: 39
        }
      },
      "130": {
        start: {
          line: 401,
          column: 12
        },
        end: {
          line: 405,
          column: 13
        }
      },
      "131": {
        start: {
          line: 403,
          column: 16
        },
        end: {
          line: 403,
          column: 68
        }
      },
      "132": {
        start: {
          line: 404,
          column: 16
        },
        end: {
          line: 404,
          column: 86
        }
      },
      "133": {
        start: {
          line: 408,
          column: 8
        },
        end: {
          line: 413,
          column: 9
        }
      },
      "134": {
        start: {
          line: 411,
          column: 12
        },
        end: {
          line: 411,
          column: 69
        }
      },
      "135": {
        start: {
          line: 412,
          column: 12
        },
        end: {
          line: 412,
          column: 88
        }
      },
      "136": {
        start: {
          line: 419,
          column: 8
        },
        end: {
          line: 419,
          column: 69
        }
      },
      "137": {
        start: {
          line: 425,
          column: 8
        },
        end: {
          line: 442,
          column: 9
        }
      },
      "138": {
        start: {
          line: 426,
          column: 12
        },
        end: {
          line: 436,
          column: 13
        }
      },
      "139": {
        start: {
          line: 428,
          column: 20
        },
        end: {
          line: 428,
          column: 67
        }
      },
      "140": {
        start: {
          line: 429,
          column: 20
        },
        end: {
          line: 429,
          column: 26
        }
      },
      "141": {
        start: {
          line: 431,
          column: 20
        },
        end: {
          line: 431,
          column: 69
        }
      },
      "142": {
        start: {
          line: 432,
          column: 20
        },
        end: {
          line: 432,
          column: 26
        }
      },
      "143": {
        start: {
          line: 434,
          column: 20
        },
        end: {
          line: 434,
          column: 66
        }
      },
      "144": {
        start: {
          line: 435,
          column: 20
        },
        end: {
          line: 435,
          column: 26
        }
      },
      "145": {
        start: {
          line: 439,
          column: 33
        },
        end: {
          line: 439,
          column: 68
        }
      },
      "146": {
        start: {
          line: 440,
          column: 12
        },
        end: {
          line: 440,
          column: 85
        }
      },
      "147": {
        start: {
          line: 441,
          column: 12
        },
        end: {
          line: 441,
          column: 76
        }
      },
      "148": {
        start: {
          line: 441,
          column: 41
        },
        end: {
          line: 441,
          column: 74
        }
      },
      "149": {
        start: {
          line: 449,
          column: 8
        },
        end: {
          line: 451,
          column: 9
        }
      },
      "150": {
        start: {
          line: 450,
          column: 12
        },
        end: {
          line: 450,
          column: 86
        }
      },
      "151": {
        start: {
          line: 453,
          column: 28
        },
        end: {
          line: 453,
          column: 69
        }
      },
      "152": {
        start: {
          line: 454,
          column: 8
        },
        end: {
          line: 454,
          column: 47
        }
      },
      "153": {
        start: {
          line: 455,
          column: 8
        },
        end: {
          line: 473,
          column: 9
        }
      },
      "154": {
        start: {
          line: 456,
          column: 29
        },
        end: {
          line: 456,
          column: 69
        }
      },
      "155": {
        start: {
          line: 457,
          column: 12
        },
        end: {
          line: 457,
          column: 33
        }
      },
      "156": {
        start: {
          line: 461,
          column: 31
        },
        end: {
          line: 461,
          column: 53
        }
      },
      "157": {
        start: {
          line: 462,
          column: 12
        },
        end: {
          line: 471,
          column: 13
        }
      },
      "158": {
        start: {
          line: 463,
          column: 16
        },
        end: {
          line: 463,
          column: 118
        }
      },
      "159": {
        start: {
          line: 465,
          column: 30
        },
        end: {
          line: 465,
          column: 82
        }
      },
      "160": {
        start: {
          line: 466,
          column: 16
        },
        end: {
          line: 466,
          column: 73
        }
      },
      "161": {
        start: {
          line: 466,
          column: 45
        },
        end: {
          line: 466,
          column: 71
        }
      },
      "162": {
        start: {
          line: 467,
          column: 16
        },
        end: {
          line: 470,
          column: 19
        }
      },
      "163": {
        start: {
          line: 472,
          column: 12
        },
        end: {
          line: 472,
          column: 24
        }
      },
      "164": {
        start: {
          line: 480,
          column: 8
        },
        end: {
          line: 481,
          column: 24
        }
      },
      "165": {
        start: {
          line: 481,
          column: 12
        },
        end: {
          line: 481,
          column: 24
        }
      },
      "166": {
        start: {
          line: 482,
          column: 23
        },
        end: {
          line: 482,
          column: 44
        }
      },
      "167": {
        start: {
          line: 483,
          column: 8
        },
        end: {
          line: 483,
          column: 47
        }
      },
      "168": {
        start: {
          line: 489,
          column: 8
        },
        end: {
          line: 512,
          column: 9
        }
      },
      "169": {
        start: {
          line: 490,
          column: 12
        },
        end: {
          line: 490,
          column: 78
        }
      },
      "170": {
        start: {
          line: 492,
          column: 12
        },
        end: {
          line: 497,
          column: 15
        }
      },
      "171": {
        start: {
          line: 499,
          column: 12
        },
        end: {
          line: 505,
          column: 13
        }
      },
      "172": {
        start: {
          line: 500,
          column: 16
        },
        end: {
          line: 504,
          column: 19
        }
      },
      "173": {
        start: {
          line: 506,
          column: 12
        },
        end: {
          line: 506,
          column: 70
        }
      },
      "174": {
        start: {
          line: 507,
          column: 12
        },
        end: {
          line: 507,
          column: 24
        }
      },
      "175": {
        start: {
          line: 510,
          column: 12
        },
        end: {
          line: 510,
          column: 87
        }
      },
      "176": {
        start: {
          line: 511,
          column: 12
        },
        end: {
          line: 511,
          column: 25
        }
      },
      "177": {
        start: {
          line: 518,
          column: 8
        },
        end: {
          line: 518,
          column: 41
        }
      },
      "178": {
        start: {
          line: 524,
          column: 26
        },
        end: {
          line: 524,
          column: 40
        }
      },
      "179": {
        start: {
          line: 526,
          column: 8
        },
        end: {
          line: 526,
          column: 29
        }
      },
      "180": {
        start: {
          line: 527,
          column: 8
        },
        end: {
          line: 527,
          column: 30
        }
      },
      "181": {
        start: {
          line: 528,
          column: 8
        },
        end: {
          line: 528,
          column: 36
        }
      },
      "182": {
        start: {
          line: 529,
          column: 8
        },
        end: {
          line: 529,
          column: 25
        }
      },
      "183": {
        start: {
          line: 535,
          column: 8
        },
        end: {
          line: 535,
          column: 71
        }
      },
      "184": {
        start: {
          line: 537,
          column: 8
        },
        end: {
          line: 542,
          column: 11
        }
      },
      "185": {
        start: {
          line: 544,
          column: 8
        },
        end: {
          line: 544,
          column: 32
        }
      },
      "186": {
        start: {
          line: 545,
          column: 8
        },
        end: {
          line: 545,
          column: 72
        }
      },
      "187": {
        start: {
          line: 548,
          column: 0
        },
        end: {
          line: 548,
          column: 36
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 28,
            column: 56
          },
          end: {
            line: 28,
            column: 57
          }
        },
        loc: {
          start: {
            line: 28,
            column: 71
          },
          end: {
            line: 30,
            column: 1
          }
        },
        line: 28
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 74,
            column: 1
          },
          end: {
            line: 74,
            column: 2
          }
        },
        loc: {
          start: {
            line: 74,
            column: 32
          },
          end: {
            line: 78,
            column: 1
          }
        },
        line: 74
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 83,
            column: 1
          },
          end: {
            line: 83,
            column: 2
          }
        },
        loc: {
          start: {
            line: 83,
            column: 24
          },
          end: {
            line: 87,
            column: 1
          }
        },
        line: 83
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 109,
            column: 4
          },
          end: {
            line: 109,
            column: 5
          }
        },
        loc: {
          start: {
            line: 109,
            column: 18
          },
          end: {
            line: 135,
            column: 5
          }
        },
        line: 109
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 143,
            column: 4
          },
          end: {
            line: 143,
            column: 5
          }
        },
        loc: {
          start: {
            line: 143,
            column: 64
          },
          end: {
            line: 177,
            column: 5
          }
        },
        line: 143
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 181,
            column: 4
          },
          end: {
            line: 181,
            column: 5
          }
        },
        loc: {
          start: {
            line: 181,
            column: 28
          },
          end: {
            line: 206,
            column: 5
          }
        },
        line: 181
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 210,
            column: 4
          },
          end: {
            line: 210,
            column: 5
          }
        },
        loc: {
          start: {
            line: 210,
            column: 31
          },
          end: {
            line: 223,
            column: 5
          }
        },
        line: 210
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 227,
            column: 4
          },
          end: {
            line: 227,
            column: 5
          }
        },
        loc: {
          start: {
            line: 227,
            column: 26
          },
          end: {
            line: 241,
            column: 5
          }
        },
        line: 227
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 237,
            column: 42
          },
          end: {
            line: 237,
            column: 43
          }
        },
        loc: {
          start: {
            line: 237,
            column: 54
          },
          end: {
            line: 237,
            column: 91
          }
        },
        line: 237
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 237,
            column: 93
          },
          end: {
            line: 237,
            column: 94
          }
        },
        loc: {
          start: {
            line: 237,
            column: 104
          },
          end: {
            line: 237,
            column: 134
          }
        },
        line: 237
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 239,
            column: 43
          },
          end: {
            line: 239,
            column: 44
          }
        },
        loc: {
          start: {
            line: 239,
            column: 57
          },
          end: {
            line: 239,
            column: 97
          }
        },
        line: 239
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 239,
            column: 99
          },
          end: {
            line: 239,
            column: 100
          }
        },
        loc: {
          start: {
            line: 239,
            column: 110
          },
          end: {
            line: 239,
            column: 141
          }
        },
        line: 239
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 245,
            column: 4
          },
          end: {
            line: 245,
            column: 5
          }
        },
        loc: {
          start: {
            line: 245,
            column: 43
          },
          end: {
            line: 279,
            column: 5
          }
        },
        line: 245
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 283,
            column: 4
          },
          end: {
            line: 283,
            column: 5
          }
        },
        loc: {
          start: {
            line: 283,
            column: 50
          },
          end: {
            line: 295,
            column: 5
          }
        },
        line: 283
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 299,
            column: 4
          },
          end: {
            line: 299,
            column: 5
          }
        },
        loc: {
          start: {
            line: 299,
            column: 46
          },
          end: {
            line: 313,
            column: 5
          }
        },
        line: 299
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 317,
            column: 4
          },
          end: {
            line: 317,
            column: 5
          }
        },
        loc: {
          start: {
            line: 317,
            column: 36
          },
          end: {
            line: 326,
            column: 5
          }
        },
        line: 317
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 330,
            column: 4
          },
          end: {
            line: 330,
            column: 5
          }
        },
        loc: {
          start: {
            line: 330,
            column: 37
          },
          end: {
            line: 352,
            column: 5
          }
        },
        line: 330
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 356,
            column: 4
          },
          end: {
            line: 356,
            column: 5
          }
        },
        loc: {
          start: {
            line: 356,
            column: 38
          },
          end: {
            line: 361,
            column: 5
          }
        },
        line: 356
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 360,
            column: 26
          },
          end: {
            line: 360,
            column: 27
          }
        },
        loc: {
          start: {
            line: 360,
            column: 37
          },
          end: {
            line: 360,
            column: 69
          }
        },
        line: 360
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 365,
            column: 4
          },
          end: {
            line: 365,
            column: 5
          }
        },
        loc: {
          start: {
            line: 365,
            column: 47
          },
          end: {
            line: 382,
            column: 5
          }
        },
        line: 365
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 386,
            column: 4
          },
          end: {
            line: 386,
            column: 5
          }
        },
        loc: {
          start: {
            line: 386,
            column: 34
          },
          end: {
            line: 414,
            column: 5
          }
        },
        line: 386
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 418,
            column: 4
          },
          end: {
            line: 418,
            column: 5
          }
        },
        loc: {
          start: {
            line: 418,
            column: 27
          },
          end: {
            line: 420,
            column: 5
          }
        },
        line: 418
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 424,
            column: 4
          },
          end: {
            line: 424,
            column: 5
          }
        },
        loc: {
          start: {
            line: 424,
            column: 38
          },
          end: {
            line: 443,
            column: 5
          }
        },
        line: 424
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 441,
            column: 30
          },
          end: {
            line: 441,
            column: 31
          }
        },
        loc: {
          start: {
            line: 441,
            column: 41
          },
          end: {
            line: 441,
            column: 74
          }
        },
        line: 441
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 447,
            column: 4
          },
          end: {
            line: 447,
            column: 5
          }
        },
        loc: {
          start: {
            line: 447,
            column: 30
          },
          end: {
            line: 474,
            column: 5
          }
        },
        line: 447
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 466,
            column: 34
          },
          end: {
            line: 466,
            column: 35
          }
        },
        loc: {
          start: {
            line: 466,
            column: 45
          },
          end: {
            line: 466,
            column: 71
          }
        },
        line: 466
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 478,
            column: 4
          },
          end: {
            line: 478,
            column: 5
          }
        },
        loc: {
          start: {
            line: 478,
            column: 23
          },
          end: {
            line: 484,
            column: 5
          }
        },
        line: 478
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 488,
            column: 4
          },
          end: {
            line: 488,
            column: 5
          }
        },
        loc: {
          start: {
            line: 488,
            column: 31
          },
          end: {
            line: 513,
            column: 5
          }
        },
        line: 488
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 517,
            column: 4
          },
          end: {
            line: 517,
            column: 5
          }
        },
        loc: {
          start: {
            line: 517,
            column: 23
          },
          end: {
            line: 519,
            column: 5
          }
        },
        line: 517
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 523,
            column: 4
          },
          end: {
            line: 523,
            column: 5
          }
        },
        loc: {
          start: {
            line: 523,
            column: 29
          },
          end: {
            line: 530,
            column: 5
          }
        },
        line: 523
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 534,
            column: 4
          },
          end: {
            line: 534,
            column: 5
          }
        },
        loc: {
          start: {
            line: 534,
            column: 21
          },
          end: {
            line: 546,
            column: 5
          }
        },
        line: 534
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 28,
            column: 22
          },
          end: {
            line: 30,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 28,
            column: 23
          },
          end: {
            line: 28,
            column: 27
          }
        }, {
          start: {
            line: 28,
            column: 31
          },
          end: {
            line: 28,
            column: 51
          }
        }, {
          start: {
            line: 28,
            column: 56
          },
          end: {
            line: 30,
            column: 1
          }
        }],
        line: 28
      },
      "1": {
        loc: {
          start: {
            line: 29,
            column: 11
          },
          end: {
            line: 29,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 29,
            column: 37
          },
          end: {
            line: 29,
            column: 40
          }
        }, {
          start: {
            line: 29,
            column: 43
          },
          end: {
            line: 29,
            column: 61
          }
        }],
        line: 29
      },
      "2": {
        loc: {
          start: {
            line: 29,
            column: 12
          },
          end: {
            line: 29,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 29,
            column: 12
          },
          end: {
            line: 29,
            column: 15
          }
        }, {
          start: {
            line: 29,
            column: 19
          },
          end: {
            line: 29,
            column: 33
          }
        }],
        line: 29
      },
      "3": {
        loc: {
          start: {
            line: 78,
            column: 3
          },
          end: {
            line: 78,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 78,
            column: 3
          },
          end: {
            line: 78,
            column: 22
          }
        }, {
          start: {
            line: 78,
            column: 27
          },
          end: {
            line: 78,
            column: 81
          }
        }],
        line: 78
      },
      "4": {
        loc: {
          start: {
            line: 87,
            column: 3
          },
          end: {
            line: 87,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 87,
            column: 3
          },
          end: {
            line: 87,
            column: 14
          }
        }, {
          start: {
            line: 87,
            column: 19
          },
          end: {
            line: 87,
            column: 57
          }
        }],
        line: 87
      },
      "5": {
        loc: {
          start: {
            line: 143,
            column: 21
          },
          end: {
            line: 143,
            column: 44
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 143,
            column: 33
          },
          end: {
            line: 143,
            column: 44
          }
        }],
        line: 143
      },
      "6": {
        loc: {
          start: {
            line: 143,
            column: 46
          },
          end: {
            line: 143,
            column: 62
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 143,
            column: 58
          },
          end: {
            line: 143,
            column: 62
          }
        }],
        line: 143
      },
      "7": {
        loc: {
          start: {
            line: 152,
            column: 12
          },
          end: {
            line: 165,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 152,
            column: 12
          },
          end: {
            line: 165,
            column: 13
          }
        }, {
          start: {
            line: 162,
            column: 17
          },
          end: {
            line: 165,
            column: 13
          }
        }],
        line: 152
      },
      "8": {
        loc: {
          start: {
            line: 189,
            column: 12
          },
          end: {
            line: 191,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 189,
            column: 12
          },
          end: {
            line: 191,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 189
      },
      "9": {
        loc: {
          start: {
            line: 189,
            column: 16
          },
          end: {
            line: 189,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 189,
            column: 16
          },
          end: {
            line: 189,
            column: 44
          }
        }, {
          start: {
            line: 189,
            column: 48
          },
          end: {
            line: 189,
            column: 79
          }
        }],
        line: 189
      },
      "10": {
        loc: {
          start: {
            line: 196,
            column: 28
          },
          end: {
            line: 198,
            column: 31
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 197,
            column: 22
          },
          end: {
            line: 197,
            column: 101
          }
        }, {
          start: {
            line: 198,
            column: 22
          },
          end: {
            line: 198,
            column: 31
          }
        }],
        line: 196
      },
      "11": {
        loc: {
          start: {
            line: 250,
            column: 8
          },
          end: {
            line: 252,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 250,
            column: 8
          },
          end: {
            line: 252,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 250
      },
      "12": {
        loc: {
          start: {
            line: 254,
            column: 8
          },
          end: {
            line: 270,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 254,
            column: 8
          },
          end: {
            line: 270,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 254
      },
      "13": {
        loc: {
          start: {
            line: 256,
            column: 27
          },
          end: {
            line: 256,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 256,
            column: 27
          },
          end: {
            line: 256,
            column: 55
          }
        }, {
          start: {
            line: 256,
            column: 59
          },
          end: {
            line: 256,
            column: 64
          }
        }],
        line: 256
      },
      "14": {
        loc: {
          start: {
            line: 257,
            column: 24
          },
          end: {
            line: 257,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 257,
            column: 24
          },
          end: {
            line: 257,
            column: 34
          }
        }, {
          start: {
            line: 257,
            column: 38
          },
          end: {
            line: 257,
            column: 40
          }
        }],
        line: 257
      },
      "15": {
        loc: {
          start: {
            line: 258,
            column: 25
          },
          end: {
            line: 258,
            column: 71
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 258,
            column: 39
          },
          end: {
            line: 258,
            column: 66
          }
        }, {
          start: {
            line: 258,
            column: 69
          },
          end: {
            line: 258,
            column: 71
          }
        }],
        line: 258
      },
      "16": {
        loc: {
          start: {
            line: 267,
            column: 12
          },
          end: {
            line: 269,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 267,
            column: 12
          },
          end: {
            line: 269,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 267
      },
      "17": {
        loc: {
          start: {
            line: 273,
            column: 20
          },
          end: {
            line: 273,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 273,
            column: 20
          },
          end: {
            line: 273,
            column: 48
          }
        }, {
          start: {
            line: 273,
            column: 52
          },
          end: {
            line: 273,
            column: 57
          }
        }],
        line: 273
      },
      "18": {
        loc: {
          start: {
            line: 274,
            column: 17
          },
          end: {
            line: 274,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 274,
            column: 17
          },
          end: {
            line: 274,
            column: 27
          }
        }, {
          start: {
            line: 274,
            column: 31
          },
          end: {
            line: 274,
            column: 33
          }
        }],
        line: 274
      },
      "19": {
        loc: {
          start: {
            line: 276,
            column: 42
          },
          end: {
            line: 276,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 276,
            column: 42
          },
          end: {
            line: 276,
            column: 56
          }
        }, {
          start: {
            line: 276,
            column: 60
          },
          end: {
            line: 276,
            column: 62
          }
        }],
        line: 276
      },
      "20": {
        loc: {
          start: {
            line: 284,
            column: 8
          },
          end: {
            line: 286,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 284,
            column: 8
          },
          end: {
            line: 286,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 284
      },
      "21": {
        loc: {
          start: {
            line: 301,
            column: 26
          },
          end: {
            line: 301,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 301,
            column: 26
          },
          end: {
            line: 301,
            column: 61
          }
        }, {
          start: {
            line: 301,
            column: 65
          },
          end: {
            line: 301,
            column: 72
          }
        }],
        line: 301
      },
      "22": {
        loc: {
          start: {
            line: 331,
            column: 43
          },
          end: {
            line: 331,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 331,
            column: 43
          },
          end: {
            line: 331,
            column: 76
          }
        }, {
          start: {
            line: 331,
            column: 80
          },
          end: {
            line: 331,
            column: 90
          }
        }],
        line: 331
      },
      "23": {
        loc: {
          start: {
            line: 336,
            column: 20
          },
          end: {
            line: 336,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 336,
            column: 20
          },
          end: {
            line: 336,
            column: 42
          }
        }, {
          start: {
            line: 336,
            column: 46
          },
          end: {
            line: 336,
            column: 47
          }
        }],
        line: 336
      },
      "24": {
        loc: {
          start: {
            line: 343,
            column: 8
          },
          end: {
            line: 350,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 343,
            column: 8
          },
          end: {
            line: 350,
            column: 9
          }
        }, {
          start: {
            line: 347,
            column: 13
          },
          end: {
            line: 350,
            column: 9
          }
        }],
        line: 343
      },
      "25": {
        loc: {
          start: {
            line: 347,
            column: 13
          },
          end: {
            line: 350,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 347,
            column: 13
          },
          end: {
            line: 350,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 347
      },
      "26": {
        loc: {
          start: {
            line: 358,
            column: 28
          },
          end: {
            line: 358,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 358,
            column: 41
          },
          end: {
            line: 358,
            column: 68
          }
        }, {
          start: {
            line: 358,
            column: 71
          },
          end: {
            line: 358,
            column: 75
          }
        }],
        line: 358
      },
      "27": {
        loc: {
          start: {
            line: 367,
            column: 8
          },
          end: {
            line: 376,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 367,
            column: 8
          },
          end: {
            line: 376,
            column: 9
          }
        }, {
          start: {
            line: 372,
            column: 13
          },
          end: {
            line: 376,
            column: 9
          }
        }],
        line: 367
      },
      "28": {
        loc: {
          start: {
            line: 388,
            column: 8
          },
          end: {
            line: 406,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 388,
            column: 8
          },
          end: {
            line: 406,
            column: 9
          }
        }, {
          start: {
            line: 397,
            column: 13
          },
          end: {
            line: 406,
            column: 9
          }
        }],
        line: 388
      },
      "29": {
        loc: {
          start: {
            line: 392,
            column: 12
          },
          end: {
            line: 395,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 392,
            column: 12
          },
          end: {
            line: 395,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 392
      },
      "30": {
        loc: {
          start: {
            line: 401,
            column: 12
          },
          end: {
            line: 405,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 401,
            column: 12
          },
          end: {
            line: 405,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 401
      },
      "31": {
        loc: {
          start: {
            line: 401,
            column: 16
          },
          end: {
            line: 402,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 401,
            column: 16
          },
          end: {
            line: 401,
            column: 79
          }
        }, {
          start: {
            line: 402,
            column: 16
          },
          end: {
            line: 402,
            column: 71
          }
        }],
        line: 401
      },
      "32": {
        loc: {
          start: {
            line: 408,
            column: 8
          },
          end: {
            line: 413,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 408,
            column: 8
          },
          end: {
            line: 413,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 408
      },
      "33": {
        loc: {
          start: {
            line: 408,
            column: 12
          },
          end: {
            line: 410,
            column: 104
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 408,
            column: 12
          },
          end: {
            line: 408,
            column: 65
          }
        }, {
          start: {
            line: 409,
            column: 12
          },
          end: {
            line: 409,
            column: 32
          }
        }, {
          start: {
            line: 410,
            column: 12
          },
          end: {
            line: 410,
            column: 104
          }
        }],
        line: 408
      },
      "34": {
        loc: {
          start: {
            line: 426,
            column: 12
          },
          end: {
            line: 436,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 427,
            column: 16
          },
          end: {
            line: 429,
            column: 26
          }
        }, {
          start: {
            line: 430,
            column: 16
          },
          end: {
            line: 432,
            column: 26
          }
        }, {
          start: {
            line: 433,
            column: 16
          },
          end: {
            line: 435,
            column: 26
          }
        }],
        line: 426
      },
      "35": {
        loc: {
          start: {
            line: 439,
            column: 33
          },
          end: {
            line: 439,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 439,
            column: 33
          },
          end: {
            line: 439,
            column: 60
          }
        }, {
          start: {
            line: 439,
            column: 64
          },
          end: {
            line: 439,
            column: 68
          }
        }],
        line: 439
      },
      "36": {
        loc: {
          start: {
            line: 449,
            column: 8
          },
          end: {
            line: 451,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 449,
            column: 8
          },
          end: {
            line: 451,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 449
      },
      "37": {
        loc: {
          start: {
            line: 453,
            column: 28
          },
          end: {
            line: 453,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 453,
            column: 28
          },
          end: {
            line: 453,
            column: 46
          }
        }, {
          start: {
            line: 453,
            column: 50
          },
          end: {
            line: 453,
            column: 69
          }
        }],
        line: 453
      },
      "38": {
        loc: {
          start: {
            line: 461,
            column: 31
          },
          end: {
            line: 461,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 461,
            column: 31
          },
          end: {
            line: 461,
            column: 48
          }
        }, {
          start: {
            line: 461,
            column: 52
          },
          end: {
            line: 461,
            column: 53
          }
        }],
        line: 461
      },
      "39": {
        loc: {
          start: {
            line: 462,
            column: 12
          },
          end: {
            line: 471,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 462,
            column: 12
          },
          end: {
            line: 471,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 462
      },
      "40": {
        loc: {
          start: {
            line: 462,
            column: 16
          },
          end: {
            line: 462,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 462,
            column: 16
          },
          end: {
            line: 462,
            column: 55
          }
        }, {
          start: {
            line: 462,
            column: 59
          },
          end: {
            line: 462,
            column: 82
          }
        }],
        line: 462
      },
      "41": {
        loc: {
          start: {
            line: 480,
            column: 8
          },
          end: {
            line: 481,
            column: 24
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 480,
            column: 8
          },
          end: {
            line: 481,
            column: 24
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 480
      },
      "42": {
        loc: {
          start: {
            line: 483,
            column: 15
          },
          end: {
            line: 483,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 483,
            column: 15
          },
          end: {
            line: 483,
            column: 28
          }
        }, {
          start: {
            line: 483,
            column: 32
          },
          end: {
            line: 483,
            column: 46
          }
        }],
        line: 483
      },
      "43": {
        loc: {
          start: {
            line: 499,
            column: 12
          },
          end: {
            line: 505,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 499,
            column: 12
          },
          end: {
            line: 505,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 499
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0],
      "6": [0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0, 0],
      "34": [0, 0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\api\\gate-io-client.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\api\\gate-io-client.ts"],
      sourcesContent: ["/**\r\n * =============================================================================\r\n * GATE.IO API CLIENT - SECURE CRYPTOCURRENCY EXCHANGE INTEGRATION\r\n * =============================================================================\r\n * \r\n * This module implements a secure, production-ready Gate.io API client with\r\n * comprehensive security features, rate limiting, and error handling.\r\n * All requests are routed through SSH tunnel for consistent IP address.\r\n * \r\n * SECURITY FEATURES:\r\n * - Military-grade credential encryption and secure storage\r\n * - Request signing with HMAC-SHA512 authentication\r\n * - Rate limiting with intelligent backoff strategies\r\n * - Circuit breaker pattern for API health monitoring\r\n * - Comprehensive audit logging for all API interactions\r\n * - Request/response validation and integrity checking\r\n * \r\n * CRITICAL SECURITY NOTICE:\r\n * This client handles real financial assets and trading operations.\r\n * All security measures must be maintained and regularly audited.\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';\r\nimport crypto from 'crypto';\r\nimport { RateLimiterMemory } from 'rate-limiter-flexible';\r\nimport { logger } from '@/core/logging/logger';\r\nimport { CredentialManager } from '@/security/credential-manager';\r\nimport { AuditService } from '@/security/audit-service';\r\n\r\n/**\r\n * Gate.io API endpoints and configuration\r\n */\r\nconst GATE_IO_CONFIG = {\r\n  BASE_URL: 'https://api.gateio.ws',\r\n  API_VERSION: 'v4',\r\n  TIMEOUT: 30000, // 30 seconds\r\n  MAX_RETRIES: 3,\r\n  RETRY_DELAY: 1000, // 1 second base delay\r\n} as const;\r\n\r\n/**\r\n * Rate limiting configuration based on Gate.io API limits\r\n * Conservative limits to ensure we never exceed API quotas\r\n */\r\nconst RATE_LIMITS = {\r\n  // Public endpoints: 900 requests per minute\r\n  PUBLIC: {\r\n    points: 900,\r\n    duration: 60, // 60 seconds\r\n  },\r\n  // Private endpoints: 300 requests per minute\r\n  PRIVATE: {\r\n    points: 300,\r\n    duration: 60, // 60 seconds\r\n  },\r\n  // Order endpoints: 100 requests per minute\r\n  ORDERS: {\r\n    points: 100,\r\n    duration: 60, // 60 seconds\r\n  },\r\n} as const;\r\n\r\n/**\r\n * Circuit breaker states for API health monitoring\r\n */\r\nenum CircuitBreakerState {\r\n  CLOSED = 'CLOSED',     // Normal operation\r\n  OPEN = 'OPEN',         // API is failing, reject requests\r\n  HALF_OPEN = 'HALF_OPEN' // Testing if API has recovered\r\n}\r\n\r\n/**\r\n * API request types for proper rate limiting\r\n */\r\nenum RequestType {\r\n  PUBLIC = 'PUBLIC',\r\n  PRIVATE = 'PRIVATE',\r\n  ORDERS = 'ORDERS'\r\n}\r\n\r\n/**\r\n * Gate.io API credentials interface\r\n */\r\ninterface GateIOCredentials {\r\n  apiKey: string;\r\n  secretKey: string;\r\n  passphrase?: string;\r\n}\r\n\r\n/**\r\n * API request configuration\r\n */\r\ninterface APIRequestConfig extends AxiosRequestConfig {\r\n  requestType?: RequestType;\r\n  skipAuth?: boolean;\r\n  retryCount?: number;\r\n}\r\n\r\n/**\r\n * Circuit breaker configuration\r\n */\r\ninterface CircuitBreakerConfig {\r\n  failureThreshold: number;\r\n  recoveryTimeout: number;\r\n  monitoringPeriod: number;\r\n}\r\n\r\n/**\r\n * API health metrics\r\n */\r\ninterface APIHealthMetrics {\r\n  totalRequests: number;\r\n  successfulRequests: number;\r\n  failedRequests: number;\r\n  averageResponseTime: number;\r\n  lastSuccessfulRequest: Date | null;\r\n  lastFailedRequest: Date | null;\r\n  circuitBreakerState: CircuitBreakerState;\r\n}\r\n\r\n/**\r\n * Secure Gate.io API Client with comprehensive security and monitoring\r\n */\r\nexport class GateIOClient {\r\n  private axiosInstance: AxiosInstance;\r\n  private credentials: GateIOCredentials | null = null;\r\n  private credentialManager: CredentialManager;\r\n  private auditService: AuditService;\r\n  \r\n  // Rate limiters for different endpoint types\r\n  private publicRateLimiter: RateLimiterMemory;\r\n  private privateRateLimiter: RateLimiterMemory;\r\n  private orderRateLimiter: RateLimiterMemory;\r\n  \r\n  // Circuit breaker for API health monitoring\r\n  private circuitBreakerState: CircuitBreakerState = CircuitBreakerState.CLOSED;\r\n  private circuitBreakerConfig: CircuitBreakerConfig;\r\n  private failureCount: number = 0;\r\n  private lastFailureTime: Date | null = null;\r\n  \r\n  // Health metrics tracking\r\n  private healthMetrics: APIHealthMetrics;\r\n  \r\n  // Proxy configuration for SSH tunnel routing\r\n  private proxyConfig: {\r\n    host: string;\r\n    port: number;\r\n    protocol: 'http' | 'https';\r\n  } | null = null;\r\n\r\n  constructor() {\r\n    this.credentialManager = new CredentialManager();\r\n    this.auditService = new AuditService();\r\n    \r\n    // Initialize rate limiters with conservative limits\r\n    this.publicRateLimiter = new RateLimiterMemory(RATE_LIMITS.PUBLIC);\r\n    this.privateRateLimiter = new RateLimiterMemory(RATE_LIMITS.PRIVATE);\r\n    this.orderRateLimiter = new RateLimiterMemory(RATE_LIMITS.ORDERS);\r\n    \r\n    // Configure circuit breaker\r\n    this.circuitBreakerConfig = {\r\n      failureThreshold: 5,      // Open circuit after 5 consecutive failures\r\n      recoveryTimeout: 60000,   // Wait 60 seconds before trying again\r\n      monitoringPeriod: 300000, // Monitor for 5 minutes\r\n    };\r\n    \r\n    // Initialize health metrics\r\n    this.healthMetrics = {\r\n      totalRequests: 0,\r\n      successfulRequests: 0,\r\n      failedRequests: 0,\r\n      averageResponseTime: 0,\r\n      lastSuccessfulRequest: null,\r\n      lastFailedRequest: null,\r\n      circuitBreakerState: CircuitBreakerState.CLOSED,\r\n    };\r\n    \r\n    // Create axios instance with security configurations\r\n    this.axiosInstance = this.createAxiosInstance();\r\n    \r\n    logger.info('\uD83D\uDD10 Gate.io API Client initialized with security features');\r\n  }\r\n\r\n  /**\r\n   * Initialize the API client with credentials and proxy configuration\r\n   * \r\n   * @param proxyHost - SSH tunnel proxy host (usually localhost)\r\n   * @param proxyPort - SSH tunnel proxy port\r\n   * @returns Promise<boolean> - Success status\r\n   */\r\n  public async initialize(proxyHost: string = 'localhost', proxyPort: number = 8080): Promise<boolean> {\r\n    try {\r\n      logger.info('\uD83D\uDE80 Initializing Gate.io API client...');\r\n      \r\n      // Load encrypted credentials\r\n      await this.loadCredentials();\r\n      \r\n      // Configure proxy for SSH tunnel routing\r\n      this.configureProxy(proxyHost, proxyPort);\r\n      \r\n      // Test API connectivity\r\n      const isHealthy = await this.performHealthCheck();\r\n      \r\n      if (isHealthy) {\r\n        logger.info('\u2705 Gate.io API client initialized successfully');\r\n        await this.auditService.logSecurityEvent({\r\n          type: 'API_CLIENT_INITIALIZED',\r\n          severity: 'INFO',\r\n          details: { exchange: 'Gate.io', proxyHost, proxyPort },\r\n          timestamp: new Date(),\r\n        });\r\n        return true;\r\n      } else {\r\n        logger.error('\u274C Gate.io API client health check failed');\r\n        return false;\r\n      }\r\n      \r\n    } catch (error) {\r\n      logger.error('\u274C Failed to initialize Gate.io API client:', error);\r\n      await this.auditService.logSecurityEvent({\r\n        type: 'API_CLIENT_INIT_FAILED',\r\n        severity: 'ERROR',\r\n        details: { error: error.message },\r\n        timestamp: new Date(),\r\n      });\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load and decrypt API credentials from secure storage\r\n   */\r\n  private async loadCredentials(): Promise<void> {\r\n    try {\r\n      // Load encrypted credentials from environment or secure storage\r\n      const encryptedCredentials = {\r\n        apiKey: process.env.GATE_IO_API_KEY,\r\n        secretKey: process.env.GATE_IO_SECRET_KEY,\r\n        passphrase: process.env.GATE_IO_PASSPHRASE,\r\n      };\r\n      \r\n      if (!encryptedCredentials.apiKey || !encryptedCredentials.secretKey) {\r\n        throw new Error('Gate.io API credentials not found in environment');\r\n      }\r\n      \r\n      // Decrypt credentials using credential manager\r\n      this.credentials = {\r\n        apiKey: await this.credentialManager.decryptCredential(encryptedCredentials.apiKey),\r\n        secretKey: await this.credentialManager.decryptCredential(encryptedCredentials.secretKey),\r\n        passphrase: encryptedCredentials.passphrase \r\n          ? await this.credentialManager.decryptCredential(encryptedCredentials.passphrase)\r\n          : undefined,\r\n      };\r\n      \r\n      logger.info('\uD83D\uDD11 Gate.io API credentials loaded and decrypted successfully');\r\n      \r\n    } catch (error) {\r\n      logger.error('\u274C Failed to load Gate.io API credentials:', error);\r\n      throw new Error('Failed to load API credentials');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Configure proxy settings for SSH tunnel routing\r\n   */\r\n  private configureProxy(host: string, port: number): void {\r\n    this.proxyConfig = {\r\n      host,\r\n      port,\r\n      protocol: 'http',\r\n    };\r\n    \r\n    // Update axios instance with proxy configuration\r\n    this.axiosInstance.defaults.proxy = {\r\n      host: this.proxyConfig.host,\r\n      port: this.proxyConfig.port,\r\n      protocol: this.proxyConfig.protocol,\r\n    };\r\n    \r\n    logger.info(`\uD83C\uDF10 Configured API requests to route through SSH tunnel: ${host}:${port}`);\r\n  }\r\n\r\n  /**\r\n   * Create axios instance with security configurations\r\n   */\r\n  private createAxiosInstance(): AxiosInstance {\r\n    const instance = axios.create({\r\n      baseURL: `${GATE_IO_CONFIG.BASE_URL}/api/${GATE_IO_CONFIG.API_VERSION}`,\r\n      timeout: GATE_IO_CONFIG.TIMEOUT,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'User-Agent': 'AI-Crypto-Trading-Agent/1.0.0',\r\n      },\r\n    });\r\n    \r\n    // Add request interceptor for authentication and logging\r\n    instance.interceptors.request.use(\r\n      (config) => this.handleRequestInterceptor(config),\r\n      (error) => this.handleRequestError(error)\r\n    );\r\n    \r\n    // Add response interceptor for logging and error handling\r\n    instance.interceptors.response.use(\r\n      (response) => this.handleResponseInterceptor(response),\r\n      (error) => this.handleResponseError(error)\r\n    );\r\n    \r\n    return instance;\r\n  }\r\n\r\n  /**\r\n   * Handle request interceptor for authentication and logging\r\n   */\r\n  private async handleRequestInterceptor(config: AxiosRequestConfig): Promise<AxiosRequestConfig> {\r\n    const startTime = Date.now();\r\n    \r\n    // Add request timing for metrics\r\n    config.metadata = { startTime };\r\n    \r\n    // Skip authentication for public endpoints\r\n    if (config.skipAuth) {\r\n      return config;\r\n    }\r\n    \r\n    // Add authentication headers for private endpoints\r\n    if (this.credentials) {\r\n      const timestamp = Math.floor(Date.now() / 1000).toString();\r\n      const method = config.method?.toUpperCase() || 'GET';\r\n      const url = config.url || '';\r\n      const body = config.data ? JSON.stringify(config.data) : '';\r\n      \r\n      // Create signature for request authentication\r\n      const signature = this.createSignature(method, url, body, timestamp);\r\n      \r\n      config.headers = {\r\n        ...config.headers,\r\n        'KEY': this.credentials.apiKey,\r\n        'Timestamp': timestamp,\r\n        'SIGN': signature,\r\n      };\r\n      \r\n      if (this.credentials.passphrase) {\r\n        config.headers['Passphrase'] = this.credentials.passphrase;\r\n      }\r\n    }\r\n    \r\n    // Log API request for audit trail\r\n    await this.auditService.logAPIRequest({\r\n      method: config.method?.toUpperCase() || 'GET',\r\n      url: config.url || '',\r\n      timestamp: new Date(),\r\n      headers: this.sanitizeHeaders(config.headers || {}),\r\n    });\r\n    \r\n    return config;\r\n  }\r\n\r\n  /**\r\n   * Create HMAC-SHA512 signature for Gate.io API authentication\r\n   */\r\n  private createSignature(method: string, url: string, body: string, timestamp: string): string {\r\n    if (!this.credentials?.secretKey) {\r\n      throw new Error('Secret key not available for signature creation');\r\n    }\r\n    \r\n    // Create signature string according to Gate.io API specification\r\n    const signatureString = `${method}\\n${url}\\n\\n${body}\\n${timestamp}`;\r\n    \r\n    // Generate HMAC-SHA512 signature\r\n    const signature = crypto\r\n      .createHmac('sha512', this.credentials.secretKey)\r\n      .update(signatureString)\r\n      .digest('hex');\r\n    \r\n    return signature;\r\n  }\r\n\r\n  /**\r\n   * Handle response interceptor for metrics and logging\r\n   */\r\n  private async handleResponseInterceptor(response: AxiosResponse): Promise<AxiosResponse> {\r\n    const endTime = Date.now();\r\n    const startTime = response.config.metadata?.startTime || endTime;\r\n    const responseTime = endTime - startTime;\r\n    \r\n    // Update health metrics\r\n    this.updateHealthMetrics(true, responseTime);\r\n    \r\n    // Log successful API response\r\n    await this.auditService.logAPIResponse({\r\n      status: response.status,\r\n      responseTime,\r\n      timestamp: new Date(),\r\n      success: true,\r\n    });\r\n    \r\n    return response;\r\n  }\r\n\r\n  /**\r\n   * Handle request errors\r\n   */\r\n  private async handleRequestError(error: any): Promise<never> {\r\n    logger.error('\u274C API request error:', error.message);\r\n    \r\n    await this.auditService.logSecurityEvent({\r\n      type: 'API_REQUEST_ERROR',\r\n      severity: 'ERROR',\r\n      details: { error: error.message },\r\n      timestamp: new Date(),\r\n    });\r\n    \r\n    throw error;\r\n  }\r\n\r\n  /**\r\n   * Handle response errors with retry logic and circuit breaker\r\n   */\r\n  private async handleResponseError(error: any): Promise<never> {\r\n    const responseTime = Date.now() - (error.config?.metadata?.startTime || Date.now());\r\n    \r\n    // Update health metrics for failed request\r\n    this.updateHealthMetrics(false, responseTime);\r\n    \r\n    // Log failed API response\r\n    await this.auditService.logAPIResponse({\r\n      status: error.response?.status || 0,\r\n      responseTime,\r\n      timestamp: new Date(),\r\n      success: false,\r\n      error: error.message,\r\n    });\r\n    \r\n    // Handle specific error types\r\n    if (error.response?.status === 429) {\r\n      logger.warn('\u26A0\uFE0F Rate limit exceeded, implementing backoff strategy');\r\n      await this.handleRateLimitError(error);\r\n    } else if (error.response?.status >= 500) {\r\n      logger.error('\u274C Server error detected, updating circuit breaker');\r\n      this.updateCircuitBreaker(false);\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n\r\n  /**\r\n   * Handle rate limit errors with intelligent backoff\r\n   */\r\n  private async handleRateLimitError(error: any): Promise<void> {\r\n    const retryAfter = error.response?.headers['retry-after'];\r\n    const backoffTime = retryAfter ? parseInt(retryAfter) * 1000 : 5000; // 5 seconds default\r\n    \r\n    logger.info(`\u23F3 Implementing rate limit backoff: ${backoffTime}ms`);\r\n    \r\n    await new Promise(resolve => setTimeout(resolve, backoffTime));\r\n  }\r\n\r\n  /**\r\n   * Update health metrics for monitoring\r\n   */\r\n  private updateHealthMetrics(success: boolean, responseTime: number): void {\r\n    this.healthMetrics.totalRequests++;\r\n    \r\n    if (success) {\r\n      this.healthMetrics.successfulRequests++;\r\n      this.healthMetrics.lastSuccessfulRequest = new Date();\r\n      this.updateCircuitBreaker(true);\r\n    } else {\r\n      this.healthMetrics.failedRequests++;\r\n      this.healthMetrics.lastFailedRequest = new Date();\r\n      this.updateCircuitBreaker(false);\r\n    }\r\n    \r\n    // Update average response time using exponential moving average\r\n    const alpha = 0.1; // Smoothing factor\r\n    this.healthMetrics.averageResponseTime = \r\n      (alpha * responseTime) + ((1 - alpha) * this.healthMetrics.averageResponseTime);\r\n    \r\n    this.healthMetrics.circuitBreakerState = this.circuitBreakerState;\r\n  }\r\n\r\n  /**\r\n   * Update circuit breaker state based on request success/failure\r\n   */\r\n  private updateCircuitBreaker(success: boolean): void {\r\n    const now = new Date();\r\n    \r\n    if (success) {\r\n      // Reset failure count on successful request\r\n      this.failureCount = 0;\r\n      \r\n      // Close circuit if it was half-open\r\n      if (this.circuitBreakerState === CircuitBreakerState.HALF_OPEN) {\r\n        this.circuitBreakerState = CircuitBreakerState.CLOSED;\r\n        logger.info('\u2705 Circuit breaker closed - API is healthy');\r\n      }\r\n    } else {\r\n      this.failureCount++;\r\n      this.lastFailureTime = now;\r\n      \r\n      // Open circuit if failure threshold is reached\r\n      if (this.failureCount >= this.circuitBreakerConfig.failureThreshold &&\r\n          this.circuitBreakerState === CircuitBreakerState.CLOSED) {\r\n        this.circuitBreakerState = CircuitBreakerState.OPEN;\r\n        logger.error('\uD83D\uDEA8 Circuit breaker opened - API is unhealthy');\r\n      }\r\n    }\r\n    \r\n    // Check if circuit should move to half-open state\r\n    if (this.circuitBreakerState === CircuitBreakerState.OPEN &&\r\n        this.lastFailureTime &&\r\n        (now.getTime() - this.lastFailureTime.getTime()) > this.circuitBreakerConfig.recoveryTimeout) {\r\n      this.circuitBreakerState = CircuitBreakerState.HALF_OPEN;\r\n      logger.info('\uD83D\uDD04 Circuit breaker half-open - testing API recovery');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if circuit breaker allows requests\r\n   */\r\n  private isCircuitBreakerOpen(): boolean {\r\n    return this.circuitBreakerState === CircuitBreakerState.OPEN;\r\n  }\r\n\r\n  /**\r\n   * Apply rate limiting based on request type\r\n   */\r\n  private async applyRateLimit(requestType: RequestType): Promise<void> {\r\n    try {\r\n      switch (requestType) {\r\n        case RequestType.PUBLIC:\r\n          await this.publicRateLimiter.consume('public');\r\n          break;\r\n        case RequestType.PRIVATE:\r\n          await this.privateRateLimiter.consume('private');\r\n          break;\r\n        case RequestType.ORDERS:\r\n          await this.orderRateLimiter.consume('orders');\r\n          break;\r\n      }\r\n    } catch (rateLimiterRes) {\r\n      const msBeforeNext = rateLimiterRes.msBeforeNext || 1000;\r\n      logger.warn(`\u26A0\uFE0F Rate limit reached, waiting ${msBeforeNext}ms`);\r\n      await new Promise(resolve => setTimeout(resolve, msBeforeNext));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Make authenticated API request with comprehensive error handling\r\n   */\r\n  public async makeRequest<T = any>(config: APIRequestConfig): Promise<T> {\r\n    // Check circuit breaker state\r\n    if (this.isCircuitBreakerOpen()) {\r\n      throw new Error('Circuit breaker is open - API is currently unavailable');\r\n    }\r\n    \r\n    // Apply rate limiting\r\n    const requestType = config.requestType || RequestType.PRIVATE;\r\n    await this.applyRateLimit(requestType);\r\n    \r\n    try {\r\n      const response = await this.axiosInstance.request<T>(config);\r\n      return response.data;\r\n    } catch (error) {\r\n      // Implement retry logic for transient errors\r\n      const retryCount = config.retryCount || 0;\r\n      if (retryCount < GATE_IO_CONFIG.MAX_RETRIES && this.shouldRetry(error)) {\r\n        logger.info(`\uD83D\uDD04 Retrying request (attempt ${retryCount + 1}/${GATE_IO_CONFIG.MAX_RETRIES})`);\r\n        \r\n        // Exponential backoff\r\n        const delay = GATE_IO_CONFIG.RETRY_DELAY * Math.pow(2, retryCount);\r\n        await new Promise(resolve => setTimeout(resolve, delay));\r\n        \r\n        return this.makeRequest<T>({\r\n          ...config,\r\n          retryCount: retryCount + 1,\r\n        });\r\n      }\r\n      \r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Determine if request should be retried based on error type\r\n   */\r\n  private shouldRetry(error: any): boolean {\r\n    // Retry on network errors or server errors (5xx)\r\n    if (!error.response) return true; // Network error\r\n    \r\n    const status = error.response.status;\r\n    return status >= 500 || status === 429; // Server error or rate limit\r\n  }\r\n\r\n  /**\r\n   * Perform comprehensive health check\r\n   */\r\n  public async performHealthCheck(): Promise<boolean> {\r\n    try {\r\n      logger.info('\uD83D\uDD0D Performing Gate.io API health check...');\r\n      \r\n      // Test public endpoint (server time)\r\n      await this.makeRequest({\r\n        method: 'GET',\r\n        url: '/spot/time',\r\n        requestType: RequestType.PUBLIC,\r\n        skipAuth: true,\r\n      });\r\n      \r\n      // Test private endpoint (account info) if credentials are available\r\n      if (this.credentials) {\r\n        await this.makeRequest({\r\n          method: 'GET',\r\n          url: '/spot/accounts',\r\n          requestType: RequestType.PRIVATE,\r\n        });\r\n      }\r\n      \r\n      logger.info('\u2705 Gate.io API health check passed');\r\n      return true;\r\n      \r\n    } catch (error) {\r\n      logger.error('\u274C Gate.io API health check failed:', error.message);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get current API health metrics\r\n   */\r\n  public getHealthMetrics(): APIHealthMetrics {\r\n    return { ...this.healthMetrics };\r\n  }\r\n\r\n  /**\r\n   * Sanitize headers for logging (remove sensitive information)\r\n   */\r\n  private sanitizeHeaders(headers: Record<string, any>): Record<string, any> {\r\n    const sanitized = { ...headers };\r\n    \r\n    // Remove sensitive authentication headers\r\n    delete sanitized.KEY;\r\n    delete sanitized.SIGN;\r\n    delete sanitized.Passphrase;\r\n    \r\n    return sanitized;\r\n  }\r\n\r\n  /**\r\n   * Graceful shutdown of API client\r\n   */\r\n  public async shutdown(): Promise<void> {\r\n    logger.info('\uD83D\uDED1 Shutting down Gate.io API client...');\r\n    \r\n    // Log final health metrics\r\n    await this.auditService.logSecurityEvent({\r\n      type: 'API_CLIENT_SHUTDOWN',\r\n      severity: 'INFO',\r\n      details: { healthMetrics: this.healthMetrics },\r\n      timestamp: new Date(),\r\n    });\r\n    \r\n    // Clear sensitive data\r\n    this.credentials = null;\r\n    \r\n    logger.info('\u2705 Gate.io API client shutdown completed');\r\n  }\r\n}\r\n\r\n// Export types for use in other modules\r\nexport type {\r\n  GateIOCredentials,\r\n  APIRequestConfig,\r\n  APIHealthMetrics,\r\n  CircuitBreakerConfig,\r\n};\r\n\r\nexport { RequestType, CircuitBreakerState };\r\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "51654aee8a2648fd304f434d16a2d05d5dd3ea2c"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1uyuzd78xp = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1uyuzd78xp();
var __importDefault =
/* istanbul ignore next */
(cov_1uyuzd78xp().s[0]++,
/* istanbul ignore next */
(cov_1uyuzd78xp().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1uyuzd78xp().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_1uyuzd78xp().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_1uyuzd78xp().f[0]++;
  cov_1uyuzd78xp().s[1]++;
  return /* istanbul ignore next */(cov_1uyuzd78xp().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_1uyuzd78xp().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_1uyuzd78xp().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_1uyuzd78xp().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_1uyuzd78xp().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1uyuzd78xp().s[3]++;
exports.CircuitBreakerState = exports.RequestType = exports.GateIOClient = void 0;
const axios_1 =
/* istanbul ignore next */
(cov_1uyuzd78xp().s[4]++, __importDefault(require("axios")));
const crypto_1 =
/* istanbul ignore next */
(cov_1uyuzd78xp().s[5]++, __importDefault(require("crypto")));
const rate_limiter_flexible_1 =
/* istanbul ignore next */
(cov_1uyuzd78xp().s[6]++, require("rate-limiter-flexible"));
const logger_1 =
/* istanbul ignore next */
(cov_1uyuzd78xp().s[7]++, require("@/core/logging/logger"));
const credential_manager_1 =
/* istanbul ignore next */
(cov_1uyuzd78xp().s[8]++, require("@/security/credential-manager"));
const audit_service_1 =
/* istanbul ignore next */
(cov_1uyuzd78xp().s[9]++, require("@/security/audit-service"));
/**
 * Gate.io API endpoints and configuration
 */
const GATE_IO_CONFIG =
/* istanbul ignore next */
(cov_1uyuzd78xp().s[10]++, {
  BASE_URL: 'https://api.gateio.ws',
  API_VERSION: 'v4',
  TIMEOUT: 30000,
  // 30 seconds
  MAX_RETRIES: 3,
  RETRY_DELAY: 1000 // 1 second base delay
});
/**
 * Rate limiting configuration based on Gate.io API limits
 * Conservative limits to ensure we never exceed API quotas
 */
const RATE_LIMITS =
/* istanbul ignore next */
(cov_1uyuzd78xp().s[11]++, {
  // Public endpoints: 900 requests per minute
  PUBLIC: {
    points: 900,
    duration: 60 // 60 seconds
  },
  // Private endpoints: 300 requests per minute
  PRIVATE: {
    points: 300,
    duration: 60 // 60 seconds
  },
  // Order endpoints: 100 requests per minute
  ORDERS: {
    points: 100,
    duration: 60 // 60 seconds
  }
});
/**
 * Circuit breaker states for API health monitoring
 */
var CircuitBreakerState;
/* istanbul ignore next */
cov_1uyuzd78xp().s[12]++;
(function (CircuitBreakerState) {
  /* istanbul ignore next */
  cov_1uyuzd78xp().f[1]++;
  cov_1uyuzd78xp().s[13]++;
  CircuitBreakerState["CLOSED"] = "CLOSED";
  /* istanbul ignore next */
  cov_1uyuzd78xp().s[14]++;
  CircuitBreakerState["OPEN"] = "OPEN";
  /* istanbul ignore next */
  cov_1uyuzd78xp().s[15]++;
  CircuitBreakerState["HALF_OPEN"] = "HALF_OPEN"; // Testing if API has recovered
})(
/* istanbul ignore next */
(cov_1uyuzd78xp().b[3][0]++, CircuitBreakerState) ||
/* istanbul ignore next */
(cov_1uyuzd78xp().b[3][1]++, exports.CircuitBreakerState = CircuitBreakerState = {}));
/**
 * API request types for proper rate limiting
 */
var RequestType;
/* istanbul ignore next */
cov_1uyuzd78xp().s[16]++;
(function (RequestType) {
  /* istanbul ignore next */
  cov_1uyuzd78xp().f[2]++;
  cov_1uyuzd78xp().s[17]++;
  RequestType["PUBLIC"] = "PUBLIC";
  /* istanbul ignore next */
  cov_1uyuzd78xp().s[18]++;
  RequestType["PRIVATE"] = "PRIVATE";
  /* istanbul ignore next */
  cov_1uyuzd78xp().s[19]++;
  RequestType["ORDERS"] = "ORDERS";
})(
/* istanbul ignore next */
(cov_1uyuzd78xp().b[4][0]++, RequestType) ||
/* istanbul ignore next */
(cov_1uyuzd78xp().b[4][1]++, exports.RequestType = RequestType = {}));
/**
 * Secure Gate.io API Client with comprehensive security and monitoring
 */
class GateIOClient {
  axiosInstance;
  credentials =
  /* istanbul ignore next */
  (cov_1uyuzd78xp().s[20]++, null);
  credentialManager;
  auditService;
  // Rate limiters for different endpoint types
  publicRateLimiter;
  privateRateLimiter;
  orderRateLimiter;
  // Circuit breaker for API health monitoring
  circuitBreakerState =
  /* istanbul ignore next */
  (cov_1uyuzd78xp().s[21]++, CircuitBreakerState.CLOSED);
  circuitBreakerConfig;
  failureCount =
  /* istanbul ignore next */
  (cov_1uyuzd78xp().s[22]++, 0);
  lastFailureTime =
  /* istanbul ignore next */
  (cov_1uyuzd78xp().s[23]++, null);
  // Health metrics tracking
  healthMetrics;
  // Proxy configuration for SSH tunnel routing
  proxyConfig =
  /* istanbul ignore next */
  (cov_1uyuzd78xp().s[24]++, null);
  constructor() {
    /* istanbul ignore next */
    cov_1uyuzd78xp().f[3]++;
    cov_1uyuzd78xp().s[25]++;
    this.credentialManager = new credential_manager_1.CredentialManager();
    /* istanbul ignore next */
    cov_1uyuzd78xp().s[26]++;
    this.auditService = new audit_service_1.AuditService();
    // Initialize rate limiters with conservative limits
    /* istanbul ignore next */
    cov_1uyuzd78xp().s[27]++;
    this.publicRateLimiter = new rate_limiter_flexible_1.RateLimiterMemory(RATE_LIMITS.PUBLIC);
    /* istanbul ignore next */
    cov_1uyuzd78xp().s[28]++;
    this.privateRateLimiter = new rate_limiter_flexible_1.RateLimiterMemory(RATE_LIMITS.PRIVATE);
    /* istanbul ignore next */
    cov_1uyuzd78xp().s[29]++;
    this.orderRateLimiter = new rate_limiter_flexible_1.RateLimiterMemory(RATE_LIMITS.ORDERS);
    // Configure circuit breaker
    /* istanbul ignore next */
    cov_1uyuzd78xp().s[30]++;
    this.circuitBreakerConfig = {
      failureThreshold: 5,
      // Open circuit after 5 consecutive failures
      recoveryTimeout: 60000,
      // Wait 60 seconds before trying again
      monitoringPeriod: 300000 // Monitor for 5 minutes
    };
    // Initialize health metrics
    /* istanbul ignore next */
    cov_1uyuzd78xp().s[31]++;
    this.healthMetrics = {
      totalRequests: 0,
      successfulRequests: 0,
      failedRequests: 0,
      averageResponseTime: 0,
      lastSuccessfulRequest: null,
      lastFailedRequest: null,
      circuitBreakerState: CircuitBreakerState.CLOSED
    };
    // Create axios instance with security configurations
    /* istanbul ignore next */
    cov_1uyuzd78xp().s[32]++;
    this.axiosInstance = this.createAxiosInstance();
    /* istanbul ignore next */
    cov_1uyuzd78xp().s[33]++;
    logger_1.logger.info('🔐 Gate.io API Client initialized with security features');
  }
  /**
   * Initialize the API client with credentials and proxy configuration
   *
   * @param proxyHost - SSH tunnel proxy host (usually localhost)
   * @param proxyPort - SSH tunnel proxy port
   * @returns Promise<boolean> - Success status
   */
  async initialize(proxyHost =
  /* istanbul ignore next */
  (cov_1uyuzd78xp().b[5][0]++, 'localhost'), proxyPort =
  /* istanbul ignore next */
  (cov_1uyuzd78xp().b[6][0]++, 8080)) {
    /* istanbul ignore next */
    cov_1uyuzd78xp().f[4]++;
    cov_1uyuzd78xp().s[34]++;
    try {
      /* istanbul ignore next */
      cov_1uyuzd78xp().s[35]++;
      logger_1.logger.info('🚀 Initializing Gate.io API client...');
      // Load encrypted credentials
      /* istanbul ignore next */
      cov_1uyuzd78xp().s[36]++;
      await this.loadCredentials();
      // Configure proxy for SSH tunnel routing
      /* istanbul ignore next */
      cov_1uyuzd78xp().s[37]++;
      this.configureProxy(proxyHost, proxyPort);
      // Test API connectivity
      const isHealthy =
      /* istanbul ignore next */
      (cov_1uyuzd78xp().s[38]++, await this.performHealthCheck());
      /* istanbul ignore next */
      cov_1uyuzd78xp().s[39]++;
      if (isHealthy) {
        /* istanbul ignore next */
        cov_1uyuzd78xp().b[7][0]++;
        cov_1uyuzd78xp().s[40]++;
        logger_1.logger.info('✅ Gate.io API client initialized successfully');
        /* istanbul ignore next */
        cov_1uyuzd78xp().s[41]++;
        await this.auditService.logSecurityEvent({
          type: 'API_CLIENT_INITIALIZED',
          severity: 'INFO',
          details: {
            exchange: 'Gate.io',
            proxyHost,
            proxyPort
          },
          timestamp: new Date()
        });
        /* istanbul ignore next */
        cov_1uyuzd78xp().s[42]++;
        return true;
      } else {
        /* istanbul ignore next */
        cov_1uyuzd78xp().b[7][1]++;
        cov_1uyuzd78xp().s[43]++;
        logger_1.logger.error('❌ Gate.io API client health check failed');
        /* istanbul ignore next */
        cov_1uyuzd78xp().s[44]++;
        return false;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1uyuzd78xp().s[45]++;
      logger_1.logger.error('❌ Failed to initialize Gate.io API client:', error);
      /* istanbul ignore next */
      cov_1uyuzd78xp().s[46]++;
      await this.auditService.logSecurityEvent({
        type: 'API_CLIENT_INIT_FAILED',
        severity: 'ERROR',
        details: {
          error: error.message
        },
        timestamp: new Date()
      });
      /* istanbul ignore next */
      cov_1uyuzd78xp().s[47]++;
      return false;
    }
  }
  /**
   * Load and decrypt API credentials from secure storage
   */
  async loadCredentials() {
    /* istanbul ignore next */
    cov_1uyuzd78xp().f[5]++;
    cov_1uyuzd78xp().s[48]++;
    try {
      // Load encrypted credentials from environment or secure storage
      const encryptedCredentials =
      /* istanbul ignore next */
      (cov_1uyuzd78xp().s[49]++, {
        apiKey: process.env.GATE_IO_API_KEY,
        secretKey: process.env.GATE_IO_SECRET_KEY,
        passphrase: process.env.GATE_IO_PASSPHRASE
      });
      /* istanbul ignore next */
      cov_1uyuzd78xp().s[50]++;
      if (
      /* istanbul ignore next */
      (cov_1uyuzd78xp().b[9][0]++, !encryptedCredentials.apiKey) ||
      /* istanbul ignore next */
      (cov_1uyuzd78xp().b[9][1]++, !encryptedCredentials.secretKey)) {
        /* istanbul ignore next */
        cov_1uyuzd78xp().b[8][0]++;
        cov_1uyuzd78xp().s[51]++;
        throw new Error('Gate.io API credentials not found in environment');
      } else
      /* istanbul ignore next */
      {
        cov_1uyuzd78xp().b[8][1]++;
      }
      // Decrypt credentials using credential manager
      cov_1uyuzd78xp().s[52]++;
      this.credentials = {
        apiKey: await this.credentialManager.decryptCredential(encryptedCredentials.apiKey),
        secretKey: await this.credentialManager.decryptCredential(encryptedCredentials.secretKey),
        passphrase: encryptedCredentials.passphrase ?
        /* istanbul ignore next */
        (cov_1uyuzd78xp().b[10][0]++, await this.credentialManager.decryptCredential(encryptedCredentials.passphrase)) :
        /* istanbul ignore next */
        (cov_1uyuzd78xp().b[10][1]++, undefined)
      };
      /* istanbul ignore next */
      cov_1uyuzd78xp().s[53]++;
      logger_1.logger.info('🔑 Gate.io API credentials loaded and decrypted successfully');
    } catch (error) {
      /* istanbul ignore next */
      cov_1uyuzd78xp().s[54]++;
      logger_1.logger.error('❌ Failed to load Gate.io API credentials:', error);
      /* istanbul ignore next */
      cov_1uyuzd78xp().s[55]++;
      throw new Error('Failed to load API credentials');
    }
  }
  /**
   * Configure proxy settings for SSH tunnel routing
   */
  configureProxy(host, port) {
    /* istanbul ignore next */
    cov_1uyuzd78xp().f[6]++;
    cov_1uyuzd78xp().s[56]++;
    this.proxyConfig = {
      host,
      port,
      protocol: 'http'
    };
    // Update axios instance with proxy configuration
    /* istanbul ignore next */
    cov_1uyuzd78xp().s[57]++;
    this.axiosInstance.defaults.proxy = {
      host: this.proxyConfig.host,
      port: this.proxyConfig.port,
      protocol: this.proxyConfig.protocol
    };
    /* istanbul ignore next */
    cov_1uyuzd78xp().s[58]++;
    logger_1.logger.info(`🌐 Configured API requests to route through SSH tunnel: ${host}:${port}`);
  }
  /**
   * Create axios instance with security configurations
   */
  createAxiosInstance() {
    /* istanbul ignore next */
    cov_1uyuzd78xp().f[7]++;
    const instance =
    /* istanbul ignore next */
    (cov_1uyuzd78xp().s[59]++, axios_1.default.create({
      baseURL: `${GATE_IO_CONFIG.BASE_URL}/api/${GATE_IO_CONFIG.API_VERSION}`,
      timeout: GATE_IO_CONFIG.TIMEOUT,
      headers: {
        'Content-Type': 'application/json',
        'User-Agent': 'AI-Crypto-Trading-Agent/1.0.0'
      }
    }));
    // Add request interceptor for authentication and logging
    /* istanbul ignore next */
    cov_1uyuzd78xp().s[60]++;
    instance.interceptors.request.use(config => {
      /* istanbul ignore next */
      cov_1uyuzd78xp().f[8]++;
      cov_1uyuzd78xp().s[61]++;
      return this.handleRequestInterceptor(config);
    }, error => {
      /* istanbul ignore next */
      cov_1uyuzd78xp().f[9]++;
      cov_1uyuzd78xp().s[62]++;
      return this.handleRequestError(error);
    });
    // Add response interceptor for logging and error handling
    /* istanbul ignore next */
    cov_1uyuzd78xp().s[63]++;
    instance.interceptors.response.use(response => {
      /* istanbul ignore next */
      cov_1uyuzd78xp().f[10]++;
      cov_1uyuzd78xp().s[64]++;
      return this.handleResponseInterceptor(response);
    }, error => {
      /* istanbul ignore next */
      cov_1uyuzd78xp().f[11]++;
      cov_1uyuzd78xp().s[65]++;
      return this.handleResponseError(error);
    });
    /* istanbul ignore next */
    cov_1uyuzd78xp().s[66]++;
    return instance;
  }
  /**
   * Handle request interceptor for authentication and logging
   */
  async handleRequestInterceptor(config) {
    /* istanbul ignore next */
    cov_1uyuzd78xp().f[12]++;
    const startTime =
    /* istanbul ignore next */
    (cov_1uyuzd78xp().s[67]++, Date.now());
    // Add request timing for metrics
    /* istanbul ignore next */
    cov_1uyuzd78xp().s[68]++;
    config.metadata = {
      startTime
    };
    // Skip authentication for public endpoints
    /* istanbul ignore next */
    cov_1uyuzd78xp().s[69]++;
    if (config.skipAuth) {
      /* istanbul ignore next */
      cov_1uyuzd78xp().b[11][0]++;
      cov_1uyuzd78xp().s[70]++;
      return config;
    } else
    /* istanbul ignore next */
    {
      cov_1uyuzd78xp().b[11][1]++;
    }
    // Add authentication headers for private endpoints
    cov_1uyuzd78xp().s[71]++;
    if (this.credentials) {
      /* istanbul ignore next */
      cov_1uyuzd78xp().b[12][0]++;
      const timestamp =
      /* istanbul ignore next */
      (cov_1uyuzd78xp().s[72]++, Math.floor(Date.now() / 1000).toString());
      const method =
      /* istanbul ignore next */
      (cov_1uyuzd78xp().s[73]++,
      /* istanbul ignore next */
      (cov_1uyuzd78xp().b[13][0]++, config.method?.toUpperCase()) ||
      /* istanbul ignore next */
      (cov_1uyuzd78xp().b[13][1]++, 'GET'));
      const url =
      /* istanbul ignore next */
      (cov_1uyuzd78xp().s[74]++,
      /* istanbul ignore next */
      (cov_1uyuzd78xp().b[14][0]++, config.url) ||
      /* istanbul ignore next */
      (cov_1uyuzd78xp().b[14][1]++, ''));
      const body =
      /* istanbul ignore next */
      (cov_1uyuzd78xp().s[75]++, config.data ?
      /* istanbul ignore next */
      (cov_1uyuzd78xp().b[15][0]++, JSON.stringify(config.data)) :
      /* istanbul ignore next */
      (cov_1uyuzd78xp().b[15][1]++, ''));
      // Create signature for request authentication
      const signature =
      /* istanbul ignore next */
      (cov_1uyuzd78xp().s[76]++, this.createSignature(method, url, body, timestamp));
      /* istanbul ignore next */
      cov_1uyuzd78xp().s[77]++;
      config.headers = {
        ...config.headers,
        'KEY': this.credentials.apiKey,
        'Timestamp': timestamp,
        'SIGN': signature
      };
      /* istanbul ignore next */
      cov_1uyuzd78xp().s[78]++;
      if (this.credentials.passphrase) {
        /* istanbul ignore next */
        cov_1uyuzd78xp().b[16][0]++;
        cov_1uyuzd78xp().s[79]++;
        config.headers['Passphrase'] = this.credentials.passphrase;
      } else
      /* istanbul ignore next */
      {
        cov_1uyuzd78xp().b[16][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1uyuzd78xp().b[12][1]++;
    }
    // Log API request for audit trail
    cov_1uyuzd78xp().s[80]++;
    await this.auditService.logAPIRequest({
      method:
      /* istanbul ignore next */
      (cov_1uyuzd78xp().b[17][0]++, config.method?.toUpperCase()) ||
      /* istanbul ignore next */
      (cov_1uyuzd78xp().b[17][1]++, 'GET'),
      url:
      /* istanbul ignore next */
      (cov_1uyuzd78xp().b[18][0]++, config.url) ||
      /* istanbul ignore next */
      (cov_1uyuzd78xp().b[18][1]++, ''),
      timestamp: new Date(),
      headers: this.sanitizeHeaders(
      /* istanbul ignore next */
      (cov_1uyuzd78xp().b[19][0]++, config.headers) ||
      /* istanbul ignore next */
      (cov_1uyuzd78xp().b[19][1]++, {}))
    });
    /* istanbul ignore next */
    cov_1uyuzd78xp().s[81]++;
    return config;
  }
  /**
   * Create HMAC-SHA512 signature for Gate.io API authentication
   */
  createSignature(method, url, body, timestamp) {
    /* istanbul ignore next */
    cov_1uyuzd78xp().f[13]++;
    cov_1uyuzd78xp().s[82]++;
    if (!this.credentials?.secretKey) {
      /* istanbul ignore next */
      cov_1uyuzd78xp().b[20][0]++;
      cov_1uyuzd78xp().s[83]++;
      throw new Error('Secret key not available for signature creation');
    } else
    /* istanbul ignore next */
    {
      cov_1uyuzd78xp().b[20][1]++;
    }
    // Create signature string according to Gate.io API specification
    const signatureString =
    /* istanbul ignore next */
    (cov_1uyuzd78xp().s[84]++, `${method}\n${url}\n\n${body}\n${timestamp}`);
    // Generate HMAC-SHA512 signature
    const signature =
    /* istanbul ignore next */
    (cov_1uyuzd78xp().s[85]++, crypto_1.default.createHmac('sha512', this.credentials.secretKey).update(signatureString).digest('hex'));
    /* istanbul ignore next */
    cov_1uyuzd78xp().s[86]++;
    return signature;
  }
  /**
   * Handle response interceptor for metrics and logging
   */
  async handleResponseInterceptor(response) {
    /* istanbul ignore next */
    cov_1uyuzd78xp().f[14]++;
    const endTime =
    /* istanbul ignore next */
    (cov_1uyuzd78xp().s[87]++, Date.now());
    const startTime =
    /* istanbul ignore next */
    (cov_1uyuzd78xp().s[88]++,
    /* istanbul ignore next */
    (cov_1uyuzd78xp().b[21][0]++, response.config.metadata?.startTime) ||
    /* istanbul ignore next */
    (cov_1uyuzd78xp().b[21][1]++, endTime));
    const responseTime =
    /* istanbul ignore next */
    (cov_1uyuzd78xp().s[89]++, endTime - startTime);
    // Update health metrics
    /* istanbul ignore next */
    cov_1uyuzd78xp().s[90]++;
    this.updateHealthMetrics(true, responseTime);
    // Log successful API response
    /* istanbul ignore next */
    cov_1uyuzd78xp().s[91]++;
    await this.auditService.logAPIResponse({
      status: response.status,
      responseTime,
      timestamp: new Date(),
      success: true
    });
    /* istanbul ignore next */
    cov_1uyuzd78xp().s[92]++;
    return response;
  }
  /**
   * Handle request errors
   */
  async handleRequestError(error) {
    /* istanbul ignore next */
    cov_1uyuzd78xp().f[15]++;
    cov_1uyuzd78xp().s[93]++;
    logger_1.logger.error('❌ API request error:', error.message);
    /* istanbul ignore next */
    cov_1uyuzd78xp().s[94]++;
    await this.auditService.logSecurityEvent({
      type: 'API_REQUEST_ERROR',
      severity: 'ERROR',
      details: {
        error: error.message
      },
      timestamp: new Date()
    });
    /* istanbul ignore next */
    cov_1uyuzd78xp().s[95]++;
    throw error;
  }
  /**
   * Handle response errors with retry logic and circuit breaker
   */
  async handleResponseError(error) {
    /* istanbul ignore next */
    cov_1uyuzd78xp().f[16]++;
    const responseTime =
    /* istanbul ignore next */
    (cov_1uyuzd78xp().s[96]++, Date.now() - (
    /* istanbul ignore next */
    (cov_1uyuzd78xp().b[22][0]++, error.config?.metadata?.startTime) ||
    /* istanbul ignore next */
    (cov_1uyuzd78xp().b[22][1]++, Date.now())));
    // Update health metrics for failed request
    /* istanbul ignore next */
    cov_1uyuzd78xp().s[97]++;
    this.updateHealthMetrics(false, responseTime);
    // Log failed API response
    /* istanbul ignore next */
    cov_1uyuzd78xp().s[98]++;
    await this.auditService.logAPIResponse({
      status:
      /* istanbul ignore next */
      (cov_1uyuzd78xp().b[23][0]++, error.response?.status) ||
      /* istanbul ignore next */
      (cov_1uyuzd78xp().b[23][1]++, 0),
      responseTime,
      timestamp: new Date(),
      success: false,
      error: error.message
    });
    // Handle specific error types
    /* istanbul ignore next */
    cov_1uyuzd78xp().s[99]++;
    if (error.response?.status === 429) {
      /* istanbul ignore next */
      cov_1uyuzd78xp().b[24][0]++;
      cov_1uyuzd78xp().s[100]++;
      logger_1.logger.warn('⚠️ Rate limit exceeded, implementing backoff strategy');
      /* istanbul ignore next */
      cov_1uyuzd78xp().s[101]++;
      await this.handleRateLimitError(error);
    } else {
      /* istanbul ignore next */
      cov_1uyuzd78xp().b[24][1]++;
      cov_1uyuzd78xp().s[102]++;
      if (error.response?.status >= 500) {
        /* istanbul ignore next */
        cov_1uyuzd78xp().b[25][0]++;
        cov_1uyuzd78xp().s[103]++;
        logger_1.logger.error('❌ Server error detected, updating circuit breaker');
        /* istanbul ignore next */
        cov_1uyuzd78xp().s[104]++;
        this.updateCircuitBreaker(false);
      } else
      /* istanbul ignore next */
      {
        cov_1uyuzd78xp().b[25][1]++;
      }
    }
    /* istanbul ignore next */
    cov_1uyuzd78xp().s[105]++;
    throw error;
  }
  /**
   * Handle rate limit errors with intelligent backoff
   */
  async handleRateLimitError(error) {
    /* istanbul ignore next */
    cov_1uyuzd78xp().f[17]++;
    const retryAfter =
    /* istanbul ignore next */
    (cov_1uyuzd78xp().s[106]++, error.response?.headers['retry-after']);
    const backoffTime =
    /* istanbul ignore next */
    (cov_1uyuzd78xp().s[107]++, retryAfter ?
    /* istanbul ignore next */
    (cov_1uyuzd78xp().b[26][0]++, parseInt(retryAfter) * 1000) :
    /* istanbul ignore next */
    (cov_1uyuzd78xp().b[26][1]++, 5000)); // 5 seconds default
    /* istanbul ignore next */
    cov_1uyuzd78xp().s[108]++;
    logger_1.logger.info(`⏳ Implementing rate limit backoff: ${backoffTime}ms`);
    /* istanbul ignore next */
    cov_1uyuzd78xp().s[109]++;
    await new Promise(resolve => {
      /* istanbul ignore next */
      cov_1uyuzd78xp().f[18]++;
      cov_1uyuzd78xp().s[110]++;
      return setTimeout(resolve, backoffTime);
    });
  }
  /**
   * Update health metrics for monitoring
   */
  updateHealthMetrics(success, responseTime) {
    /* istanbul ignore next */
    cov_1uyuzd78xp().f[19]++;
    cov_1uyuzd78xp().s[111]++;
    this.healthMetrics.totalRequests++;
    /* istanbul ignore next */
    cov_1uyuzd78xp().s[112]++;
    if (success) {
      /* istanbul ignore next */
      cov_1uyuzd78xp().b[27][0]++;
      cov_1uyuzd78xp().s[113]++;
      this.healthMetrics.successfulRequests++;
      /* istanbul ignore next */
      cov_1uyuzd78xp().s[114]++;
      this.healthMetrics.lastSuccessfulRequest = new Date();
      /* istanbul ignore next */
      cov_1uyuzd78xp().s[115]++;
      this.updateCircuitBreaker(true);
    } else {
      /* istanbul ignore next */
      cov_1uyuzd78xp().b[27][1]++;
      cov_1uyuzd78xp().s[116]++;
      this.healthMetrics.failedRequests++;
      /* istanbul ignore next */
      cov_1uyuzd78xp().s[117]++;
      this.healthMetrics.lastFailedRequest = new Date();
      /* istanbul ignore next */
      cov_1uyuzd78xp().s[118]++;
      this.updateCircuitBreaker(false);
    }
    // Update average response time using exponential moving average
    const alpha =
    /* istanbul ignore next */
    (cov_1uyuzd78xp().s[119]++, 0.1); // Smoothing factor
    /* istanbul ignore next */
    cov_1uyuzd78xp().s[120]++;
    this.healthMetrics.averageResponseTime = alpha * responseTime + (1 - alpha) * this.healthMetrics.averageResponseTime;
    /* istanbul ignore next */
    cov_1uyuzd78xp().s[121]++;
    this.healthMetrics.circuitBreakerState = this.circuitBreakerState;
  }
  /**
   * Update circuit breaker state based on request success/failure
   */
  updateCircuitBreaker(success) {
    /* istanbul ignore next */
    cov_1uyuzd78xp().f[20]++;
    const now =
    /* istanbul ignore next */
    (cov_1uyuzd78xp().s[122]++, new Date());
    /* istanbul ignore next */
    cov_1uyuzd78xp().s[123]++;
    if (success) {
      /* istanbul ignore next */
      cov_1uyuzd78xp().b[28][0]++;
      cov_1uyuzd78xp().s[124]++;
      // Reset failure count on successful request
      this.failureCount = 0;
      // Close circuit if it was half-open
      /* istanbul ignore next */
      cov_1uyuzd78xp().s[125]++;
      if (this.circuitBreakerState === CircuitBreakerState.HALF_OPEN) {
        /* istanbul ignore next */
        cov_1uyuzd78xp().b[29][0]++;
        cov_1uyuzd78xp().s[126]++;
        this.circuitBreakerState = CircuitBreakerState.CLOSED;
        /* istanbul ignore next */
        cov_1uyuzd78xp().s[127]++;
        logger_1.logger.info('✅ Circuit breaker closed - API is healthy');
      } else
      /* istanbul ignore next */
      {
        cov_1uyuzd78xp().b[29][1]++;
      }
    } else {
      /* istanbul ignore next */
      cov_1uyuzd78xp().b[28][1]++;
      cov_1uyuzd78xp().s[128]++;
      this.failureCount++;
      /* istanbul ignore next */
      cov_1uyuzd78xp().s[129]++;
      this.lastFailureTime = now;
      // Open circuit if failure threshold is reached
      /* istanbul ignore next */
      cov_1uyuzd78xp().s[130]++;
      if (
      /* istanbul ignore next */
      (cov_1uyuzd78xp().b[31][0]++, this.failureCount >= this.circuitBreakerConfig.failureThreshold) &&
      /* istanbul ignore next */
      (cov_1uyuzd78xp().b[31][1]++, this.circuitBreakerState === CircuitBreakerState.CLOSED)) {
        /* istanbul ignore next */
        cov_1uyuzd78xp().b[30][0]++;
        cov_1uyuzd78xp().s[131]++;
        this.circuitBreakerState = CircuitBreakerState.OPEN;
        /* istanbul ignore next */
        cov_1uyuzd78xp().s[132]++;
        logger_1.logger.error('🚨 Circuit breaker opened - API is unhealthy');
      } else
      /* istanbul ignore next */
      {
        cov_1uyuzd78xp().b[30][1]++;
      }
    }
    // Check if circuit should move to half-open state
    /* istanbul ignore next */
    cov_1uyuzd78xp().s[133]++;
    if (
    /* istanbul ignore next */
    (cov_1uyuzd78xp().b[33][0]++, this.circuitBreakerState === CircuitBreakerState.OPEN) &&
    /* istanbul ignore next */
    (cov_1uyuzd78xp().b[33][1]++, this.lastFailureTime) &&
    /* istanbul ignore next */
    (cov_1uyuzd78xp().b[33][2]++, now.getTime() - this.lastFailureTime.getTime() > this.circuitBreakerConfig.recoveryTimeout)) {
      /* istanbul ignore next */
      cov_1uyuzd78xp().b[32][0]++;
      cov_1uyuzd78xp().s[134]++;
      this.circuitBreakerState = CircuitBreakerState.HALF_OPEN;
      /* istanbul ignore next */
      cov_1uyuzd78xp().s[135]++;
      logger_1.logger.info('🔄 Circuit breaker half-open - testing API recovery');
    } else
    /* istanbul ignore next */
    {
      cov_1uyuzd78xp().b[32][1]++;
    }
  }
  /**
   * Check if circuit breaker allows requests
   */
  isCircuitBreakerOpen() {
    /* istanbul ignore next */
    cov_1uyuzd78xp().f[21]++;
    cov_1uyuzd78xp().s[136]++;
    return this.circuitBreakerState === CircuitBreakerState.OPEN;
  }
  /**
   * Apply rate limiting based on request type
   */
  async applyRateLimit(requestType) {
    /* istanbul ignore next */
    cov_1uyuzd78xp().f[22]++;
    cov_1uyuzd78xp().s[137]++;
    try {
      /* istanbul ignore next */
      cov_1uyuzd78xp().s[138]++;
      switch (requestType) {
        case RequestType.PUBLIC:
          /* istanbul ignore next */
          cov_1uyuzd78xp().b[34][0]++;
          cov_1uyuzd78xp().s[139]++;
          await this.publicRateLimiter.consume('public');
          /* istanbul ignore next */
          cov_1uyuzd78xp().s[140]++;
          break;
        case RequestType.PRIVATE:
          /* istanbul ignore next */
          cov_1uyuzd78xp().b[34][1]++;
          cov_1uyuzd78xp().s[141]++;
          await this.privateRateLimiter.consume('private');
          /* istanbul ignore next */
          cov_1uyuzd78xp().s[142]++;
          break;
        case RequestType.ORDERS:
          /* istanbul ignore next */
          cov_1uyuzd78xp().b[34][2]++;
          cov_1uyuzd78xp().s[143]++;
          await this.orderRateLimiter.consume('orders');
          /* istanbul ignore next */
          cov_1uyuzd78xp().s[144]++;
          break;
      }
    } catch (rateLimiterRes) {
      const msBeforeNext =
      /* istanbul ignore next */
      (cov_1uyuzd78xp().s[145]++,
      /* istanbul ignore next */
      (cov_1uyuzd78xp().b[35][0]++, rateLimiterRes.msBeforeNext) ||
      /* istanbul ignore next */
      (cov_1uyuzd78xp().b[35][1]++, 1000));
      /* istanbul ignore next */
      cov_1uyuzd78xp().s[146]++;
      logger_1.logger.warn(`⚠️ Rate limit reached, waiting ${msBeforeNext}ms`);
      /* istanbul ignore next */
      cov_1uyuzd78xp().s[147]++;
      await new Promise(resolve => {
        /* istanbul ignore next */
        cov_1uyuzd78xp().f[23]++;
        cov_1uyuzd78xp().s[148]++;
        return setTimeout(resolve, msBeforeNext);
      });
    }
  }
  /**
   * Make authenticated API request with comprehensive error handling
   */
  async makeRequest(config) {
    /* istanbul ignore next */
    cov_1uyuzd78xp().f[24]++;
    cov_1uyuzd78xp().s[149]++;
    // Check circuit breaker state
    if (this.isCircuitBreakerOpen()) {
      /* istanbul ignore next */
      cov_1uyuzd78xp().b[36][0]++;
      cov_1uyuzd78xp().s[150]++;
      throw new Error('Circuit breaker is open - API is currently unavailable');
    } else
    /* istanbul ignore next */
    {
      cov_1uyuzd78xp().b[36][1]++;
    }
    // Apply rate limiting
    const requestType =
    /* istanbul ignore next */
    (cov_1uyuzd78xp().s[151]++,
    /* istanbul ignore next */
    (cov_1uyuzd78xp().b[37][0]++, config.requestType) ||
    /* istanbul ignore next */
    (cov_1uyuzd78xp().b[37][1]++, RequestType.PRIVATE));
    /* istanbul ignore next */
    cov_1uyuzd78xp().s[152]++;
    await this.applyRateLimit(requestType);
    /* istanbul ignore next */
    cov_1uyuzd78xp().s[153]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_1uyuzd78xp().s[154]++, await this.axiosInstance.request(config));
      /* istanbul ignore next */
      cov_1uyuzd78xp().s[155]++;
      return response.data;
    } catch (error) {
      // Implement retry logic for transient errors
      const retryCount =
      /* istanbul ignore next */
      (cov_1uyuzd78xp().s[156]++,
      /* istanbul ignore next */
      (cov_1uyuzd78xp().b[38][0]++, config.retryCount) ||
      /* istanbul ignore next */
      (cov_1uyuzd78xp().b[38][1]++, 0));
      /* istanbul ignore next */
      cov_1uyuzd78xp().s[157]++;
      if (
      /* istanbul ignore next */
      (cov_1uyuzd78xp().b[40][0]++, retryCount < GATE_IO_CONFIG.MAX_RETRIES) &&
      /* istanbul ignore next */
      (cov_1uyuzd78xp().b[40][1]++, this.shouldRetry(error))) {
        /* istanbul ignore next */
        cov_1uyuzd78xp().b[39][0]++;
        cov_1uyuzd78xp().s[158]++;
        logger_1.logger.info(`🔄 Retrying request (attempt ${retryCount + 1}/${GATE_IO_CONFIG.MAX_RETRIES})`);
        // Exponential backoff
        const delay =
        /* istanbul ignore next */
        (cov_1uyuzd78xp().s[159]++, GATE_IO_CONFIG.RETRY_DELAY * Math.pow(2, retryCount));
        /* istanbul ignore next */
        cov_1uyuzd78xp().s[160]++;
        await new Promise(resolve => {
          /* istanbul ignore next */
          cov_1uyuzd78xp().f[25]++;
          cov_1uyuzd78xp().s[161]++;
          return setTimeout(resolve, delay);
        });
        /* istanbul ignore next */
        cov_1uyuzd78xp().s[162]++;
        return this.makeRequest({
          ...config,
          retryCount: retryCount + 1
        });
      } else
      /* istanbul ignore next */
      {
        cov_1uyuzd78xp().b[39][1]++;
      }
      cov_1uyuzd78xp().s[163]++;
      throw error;
    }
  }
  /**
   * Determine if request should be retried based on error type
   */
  shouldRetry(error) {
    /* istanbul ignore next */
    cov_1uyuzd78xp().f[26]++;
    cov_1uyuzd78xp().s[164]++;
    // Retry on network errors or server errors (5xx)
    if (!error.response) {
      /* istanbul ignore next */
      cov_1uyuzd78xp().b[41][0]++;
      cov_1uyuzd78xp().s[165]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_1uyuzd78xp().b[41][1]++;
    } // Network error
    const status =
    /* istanbul ignore next */
    (cov_1uyuzd78xp().s[166]++, error.response.status);
    /* istanbul ignore next */
    cov_1uyuzd78xp().s[167]++;
    return /* istanbul ignore next */(cov_1uyuzd78xp().b[42][0]++, status >= 500) ||
    /* istanbul ignore next */
    (cov_1uyuzd78xp().b[42][1]++, status === 429); // Server error or rate limit
  }
  /**
   * Perform comprehensive health check
   */
  async performHealthCheck() {
    /* istanbul ignore next */
    cov_1uyuzd78xp().f[27]++;
    cov_1uyuzd78xp().s[168]++;
    try {
      /* istanbul ignore next */
      cov_1uyuzd78xp().s[169]++;
      logger_1.logger.info('🔍 Performing Gate.io API health check...');
      // Test public endpoint (server time)
      /* istanbul ignore next */
      cov_1uyuzd78xp().s[170]++;
      await this.makeRequest({
        method: 'GET',
        url: '/spot/time',
        requestType: RequestType.PUBLIC,
        skipAuth: true
      });
      // Test private endpoint (account info) if credentials are available
      /* istanbul ignore next */
      cov_1uyuzd78xp().s[171]++;
      if (this.credentials) {
        /* istanbul ignore next */
        cov_1uyuzd78xp().b[43][0]++;
        cov_1uyuzd78xp().s[172]++;
        await this.makeRequest({
          method: 'GET',
          url: '/spot/accounts',
          requestType: RequestType.PRIVATE
        });
      } else
      /* istanbul ignore next */
      {
        cov_1uyuzd78xp().b[43][1]++;
      }
      cov_1uyuzd78xp().s[173]++;
      logger_1.logger.info('✅ Gate.io API health check passed');
      /* istanbul ignore next */
      cov_1uyuzd78xp().s[174]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_1uyuzd78xp().s[175]++;
      logger_1.logger.error('❌ Gate.io API health check failed:', error.message);
      /* istanbul ignore next */
      cov_1uyuzd78xp().s[176]++;
      return false;
    }
  }
  /**
   * Get current API health metrics
   */
  getHealthMetrics() {
    /* istanbul ignore next */
    cov_1uyuzd78xp().f[28]++;
    cov_1uyuzd78xp().s[177]++;
    return {
      ...this.healthMetrics
    };
  }
  /**
   * Sanitize headers for logging (remove sensitive information)
   */
  sanitizeHeaders(headers) {
    /* istanbul ignore next */
    cov_1uyuzd78xp().f[29]++;
    const sanitized =
    /* istanbul ignore next */
    (cov_1uyuzd78xp().s[178]++, {
      ...headers
    });
    // Remove sensitive authentication headers
    /* istanbul ignore next */
    cov_1uyuzd78xp().s[179]++;
    delete sanitized.KEY;
    /* istanbul ignore next */
    cov_1uyuzd78xp().s[180]++;
    delete sanitized.SIGN;
    /* istanbul ignore next */
    cov_1uyuzd78xp().s[181]++;
    delete sanitized.Passphrase;
    /* istanbul ignore next */
    cov_1uyuzd78xp().s[182]++;
    return sanitized;
  }
  /**
   * Graceful shutdown of API client
   */
  async shutdown() {
    /* istanbul ignore next */
    cov_1uyuzd78xp().f[30]++;
    cov_1uyuzd78xp().s[183]++;
    logger_1.logger.info('🛑 Shutting down Gate.io API client...');
    // Log final health metrics
    /* istanbul ignore next */
    cov_1uyuzd78xp().s[184]++;
    await this.auditService.logSecurityEvent({
      type: 'API_CLIENT_SHUTDOWN',
      severity: 'INFO',
      details: {
        healthMetrics: this.healthMetrics
      },
      timestamp: new Date()
    });
    // Clear sensitive data
    /* istanbul ignore next */
    cov_1uyuzd78xp().s[185]++;
    this.credentials = null;
    /* istanbul ignore next */
    cov_1uyuzd78xp().s[186]++;
    logger_1.logger.info('✅ Gate.io API client shutdown completed');
  }
}
/* istanbul ignore next */
cov_1uyuzd78xp().s[187]++;
exports.GateIOClient = GateIOClient;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMXV5dXpkNzh4cCIsInBhdGgiLCJoYXNoIiwiZ2xvYmFsIiwiRnVuY3Rpb24iLCJnY3YiLCJjb3ZlcmFnZURhdGEiLCJzdGF0ZW1lbnRNYXAiLCJzdGFydCIsImxpbmUiLCJjb2x1bW4iLCJlbmQiLCJmbk1hcCIsIm5hbWUiLCJkZWNsIiwibG9jIiwiYnJhbmNoTWFwIiwidHlwZSIsImxvY2F0aW9ucyIsInVuZGVmaW5lZCIsInMiLCJmIiwiYiIsImlucHV0U291cmNlTWFwIiwiZmlsZSIsIm1hcHBpbmdzIiwibmFtZXMiLCJzb3VyY2VzIiwic291cmNlc0NvbnRlbnQiLCJ2ZXJzaW9uIiwiX2NvdmVyYWdlU2NoZW1hIiwiY292ZXJhZ2UiLCJhY3R1YWxDb3ZlcmFnZSIsImF4aW9zXzEiLCJfX2ltcG9ydERlZmF1bHQiLCJyZXF1aXJlIiwiY3J5cHRvXzEiLCJyYXRlX2xpbWl0ZXJfZmxleGlibGVfMSIsImxvZ2dlcl8xIiwiY3JlZGVudGlhbF9tYW5hZ2VyXzEiLCJhdWRpdF9zZXJ2aWNlXzEiLCJHQVRFX0lPX0NPTkZJRyIsIkJBU0VfVVJMIiwiQVBJX1ZFUlNJT04iLCJUSU1FT1VUIiwiTUFYX1JFVFJJRVMiLCJSRVRSWV9ERUxBWSIsIlJBVEVfTElNSVRTIiwiUFVCTElDIiwicG9pbnRzIiwiZHVyYXRpb24iLCJQUklWQVRFIiwiT1JERVJTIiwiQ2lyY3VpdEJyZWFrZXJTdGF0ZSIsImV4cG9ydHMiLCJSZXF1ZXN0VHlwZSIsIkdhdGVJT0NsaWVudCIsImF4aW9zSW5zdGFuY2UiLCJjcmVkZW50aWFscyIsImNyZWRlbnRpYWxNYW5hZ2VyIiwiYXVkaXRTZXJ2aWNlIiwicHVibGljUmF0ZUxpbWl0ZXIiLCJwcml2YXRlUmF0ZUxpbWl0ZXIiLCJvcmRlclJhdGVMaW1pdGVyIiwiY2lyY3VpdEJyZWFrZXJTdGF0ZSIsIkNMT1NFRCIsImNpcmN1aXRCcmVha2VyQ29uZmlnIiwiZmFpbHVyZUNvdW50IiwibGFzdEZhaWx1cmVUaW1lIiwiaGVhbHRoTWV0cmljcyIsInByb3h5Q29uZmlnIiwiY29uc3RydWN0b3IiLCJDcmVkZW50aWFsTWFuYWdlciIsIkF1ZGl0U2VydmljZSIsIlJhdGVMaW1pdGVyTWVtb3J5IiwiZmFpbHVyZVRocmVzaG9sZCIsInJlY292ZXJ5VGltZW91dCIsIm1vbml0b3JpbmdQZXJpb2QiLCJ0b3RhbFJlcXVlc3RzIiwic3VjY2Vzc2Z1bFJlcXVlc3RzIiwiZmFpbGVkUmVxdWVzdHMiLCJhdmVyYWdlUmVzcG9uc2VUaW1lIiwibGFzdFN1Y2Nlc3NmdWxSZXF1ZXN0IiwibGFzdEZhaWxlZFJlcXVlc3QiLCJjcmVhdGVBeGlvc0luc3RhbmNlIiwibG9nZ2VyIiwiaW5mbyIsImluaXRpYWxpemUiLCJwcm94eUhvc3QiLCJwcm94eVBvcnQiLCJsb2FkQ3JlZGVudGlhbHMiLCJjb25maWd1cmVQcm94eSIsImlzSGVhbHRoeSIsInBlcmZvcm1IZWFsdGhDaGVjayIsImxvZ1NlY3VyaXR5RXZlbnQiLCJzZXZlcml0eSIsImRldGFpbHMiLCJleGNoYW5nZSIsInRpbWVzdGFtcCIsIkRhdGUiLCJlcnJvciIsIm1lc3NhZ2UiLCJlbmNyeXB0ZWRDcmVkZW50aWFscyIsImFwaUtleSIsInByb2Nlc3MiLCJlbnYiLCJHQVRFX0lPX0FQSV9LRVkiLCJzZWNyZXRLZXkiLCJHQVRFX0lPX1NFQ1JFVF9LRVkiLCJwYXNzcGhyYXNlIiwiR0FURV9JT19QQVNTUEhSQVNFIiwiRXJyb3IiLCJkZWNyeXB0Q3JlZGVudGlhbCIsImhvc3QiLCJwb3J0IiwicHJvdG9jb2wiLCJkZWZhdWx0cyIsInByb3h5IiwiaW5zdGFuY2UiLCJkZWZhdWx0IiwiY3JlYXRlIiwiYmFzZVVSTCIsInRpbWVvdXQiLCJoZWFkZXJzIiwiaW50ZXJjZXB0b3JzIiwicmVxdWVzdCIsInVzZSIsImNvbmZpZyIsImhhbmRsZVJlcXVlc3RJbnRlcmNlcHRvciIsImhhbmRsZVJlcXVlc3RFcnJvciIsInJlc3BvbnNlIiwiaGFuZGxlUmVzcG9uc2VJbnRlcmNlcHRvciIsImhhbmRsZVJlc3BvbnNlRXJyb3IiLCJzdGFydFRpbWUiLCJub3ciLCJtZXRhZGF0YSIsInNraXBBdXRoIiwiTWF0aCIsImZsb29yIiwidG9TdHJpbmciLCJtZXRob2QiLCJ0b1VwcGVyQ2FzZSIsInVybCIsImJvZHkiLCJkYXRhIiwiSlNPTiIsInN0cmluZ2lmeSIsInNpZ25hdHVyZSIsImNyZWF0ZVNpZ25hdHVyZSIsImxvZ0FQSVJlcXVlc3QiLCJzYW5pdGl6ZUhlYWRlcnMiLCJzaWduYXR1cmVTdHJpbmciLCJjcmVhdGVIbWFjIiwidXBkYXRlIiwiZGlnZXN0IiwiZW5kVGltZSIsInJlc3BvbnNlVGltZSIsInVwZGF0ZUhlYWx0aE1ldHJpY3MiLCJsb2dBUElSZXNwb25zZSIsInN0YXR1cyIsInN1Y2Nlc3MiLCJ3YXJuIiwiaGFuZGxlUmF0ZUxpbWl0RXJyb3IiLCJ1cGRhdGVDaXJjdWl0QnJlYWtlciIsInJldHJ5QWZ0ZXIiLCJiYWNrb2ZmVGltZSIsInBhcnNlSW50IiwiUHJvbWlzZSIsInJlc29sdmUiLCJzZXRUaW1lb3V0IiwiYWxwaGEiLCJIQUxGX09QRU4iLCJPUEVOIiwiZ2V0VGltZSIsImlzQ2lyY3VpdEJyZWFrZXJPcGVuIiwiYXBwbHlSYXRlTGltaXQiLCJyZXF1ZXN0VHlwZSIsImNvbnN1bWUiLCJyYXRlTGltaXRlclJlcyIsIm1zQmVmb3JlTmV4dCIsIm1ha2VSZXF1ZXN0IiwicmV0cnlDb3VudCIsInNob3VsZFJldHJ5IiwiZGVsYXkiLCJwb3ciLCJnZXRIZWFsdGhNZXRyaWNzIiwic2FuaXRpemVkIiwiS0VZIiwiU0lHTiIsIlBhc3NwaHJhc2UiLCJzaHV0ZG93biJdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcTmlja1xcRGVza3RvcFxcU21vb3RoU2FpbFxcc3JjXFx0cmFkaW5nXFxhcGlcXGdhdGUtaW8tY2xpZW50LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gKiBHQVRFLklPIEFQSSBDTElFTlQgLSBTRUNVUkUgQ1JZUFRPQ1VSUkVOQ1kgRVhDSEFOR0UgSU5URUdSQVRJT05cclxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICogXHJcbiAqIFRoaXMgbW9kdWxlIGltcGxlbWVudHMgYSBzZWN1cmUsIHByb2R1Y3Rpb24tcmVhZHkgR2F0ZS5pbyBBUEkgY2xpZW50IHdpdGhcclxuICogY29tcHJlaGVuc2l2ZSBzZWN1cml0eSBmZWF0dXJlcywgcmF0ZSBsaW1pdGluZywgYW5kIGVycm9yIGhhbmRsaW5nLlxyXG4gKiBBbGwgcmVxdWVzdHMgYXJlIHJvdXRlZCB0aHJvdWdoIFNTSCB0dW5uZWwgZm9yIGNvbnNpc3RlbnQgSVAgYWRkcmVzcy5cclxuICogXHJcbiAqIFNFQ1VSSVRZIEZFQVRVUkVTOlxyXG4gKiAtIE1pbGl0YXJ5LWdyYWRlIGNyZWRlbnRpYWwgZW5jcnlwdGlvbiBhbmQgc2VjdXJlIHN0b3JhZ2VcclxuICogLSBSZXF1ZXN0IHNpZ25pbmcgd2l0aCBITUFDLVNIQTUxMiBhdXRoZW50aWNhdGlvblxyXG4gKiAtIFJhdGUgbGltaXRpbmcgd2l0aCBpbnRlbGxpZ2VudCBiYWNrb2ZmIHN0cmF0ZWdpZXNcclxuICogLSBDaXJjdWl0IGJyZWFrZXIgcGF0dGVybiBmb3IgQVBJIGhlYWx0aCBtb25pdG9yaW5nXHJcbiAqIC0gQ29tcHJlaGVuc2l2ZSBhdWRpdCBsb2dnaW5nIGZvciBhbGwgQVBJIGludGVyYWN0aW9uc1xyXG4gKiAtIFJlcXVlc3QvcmVzcG9uc2UgdmFsaWRhdGlvbiBhbmQgaW50ZWdyaXR5IGNoZWNraW5nXHJcbiAqIFxyXG4gKiBDUklUSUNBTCBTRUNVUklUWSBOT1RJQ0U6XHJcbiAqIFRoaXMgY2xpZW50IGhhbmRsZXMgcmVhbCBmaW5hbmNpYWwgYXNzZXRzIGFuZCB0cmFkaW5nIG9wZXJhdGlvbnMuXHJcbiAqIEFsbCBzZWN1cml0eSBtZWFzdXJlcyBtdXN0IGJlIG1haW50YWluZWQgYW5kIHJlZ3VsYXJseSBhdWRpdGVkLlxyXG4gKiBcclxuICogQGF1dGhvciBBSSBDcnlwdG8gVHJhZGluZyBTeXN0ZW1cclxuICogQHZlcnNpb24gMS4wLjBcclxuICogQGxpY2Vuc2UgUFJPUFJJRVRBUllcclxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICovXHJcblxyXG5pbXBvcnQgYXhpb3MsIHsgQXhpb3NJbnN0YW5jZSwgQXhpb3NSZXF1ZXN0Q29uZmlnLCBBeGlvc1Jlc3BvbnNlIH0gZnJvbSAnYXhpb3MnO1xyXG5pbXBvcnQgY3J5cHRvIGZyb20gJ2NyeXB0byc7XHJcbmltcG9ydCB7IFJhdGVMaW1pdGVyTWVtb3J5IH0gZnJvbSAncmF0ZS1saW1pdGVyLWZsZXhpYmxlJztcclxuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnQC9jb3JlL2xvZ2dpbmcvbG9nZ2VyJztcclxuaW1wb3J0IHsgQ3JlZGVudGlhbE1hbmFnZXIgfSBmcm9tICdAL3NlY3VyaXR5L2NyZWRlbnRpYWwtbWFuYWdlcic7XHJcbmltcG9ydCB7IEF1ZGl0U2VydmljZSB9IGZyb20gJ0Avc2VjdXJpdHkvYXVkaXQtc2VydmljZSc7XHJcblxyXG4vKipcclxuICogR2F0ZS5pbyBBUEkgZW5kcG9pbnRzIGFuZCBjb25maWd1cmF0aW9uXHJcbiAqL1xyXG5jb25zdCBHQVRFX0lPX0NPTkZJRyA9IHtcclxuICBCQVNFX1VSTDogJ2h0dHBzOi8vYXBpLmdhdGVpby53cycsXHJcbiAgQVBJX1ZFUlNJT046ICd2NCcsXHJcbiAgVElNRU9VVDogMzAwMDAsIC8vIDMwIHNlY29uZHNcclxuICBNQVhfUkVUUklFUzogMyxcclxuICBSRVRSWV9ERUxBWTogMTAwMCwgLy8gMSBzZWNvbmQgYmFzZSBkZWxheVxyXG59IGFzIGNvbnN0O1xyXG5cclxuLyoqXHJcbiAqIFJhdGUgbGltaXRpbmcgY29uZmlndXJhdGlvbiBiYXNlZCBvbiBHYXRlLmlvIEFQSSBsaW1pdHNcclxuICogQ29uc2VydmF0aXZlIGxpbWl0cyB0byBlbnN1cmUgd2UgbmV2ZXIgZXhjZWVkIEFQSSBxdW90YXNcclxuICovXHJcbmNvbnN0IFJBVEVfTElNSVRTID0ge1xyXG4gIC8vIFB1YmxpYyBlbmRwb2ludHM6IDkwMCByZXF1ZXN0cyBwZXIgbWludXRlXHJcbiAgUFVCTElDOiB7XHJcbiAgICBwb2ludHM6IDkwMCxcclxuICAgIGR1cmF0aW9uOiA2MCwgLy8gNjAgc2Vjb25kc1xyXG4gIH0sXHJcbiAgLy8gUHJpdmF0ZSBlbmRwb2ludHM6IDMwMCByZXF1ZXN0cyBwZXIgbWludXRlXHJcbiAgUFJJVkFURToge1xyXG4gICAgcG9pbnRzOiAzMDAsXHJcbiAgICBkdXJhdGlvbjogNjAsIC8vIDYwIHNlY29uZHNcclxuICB9LFxyXG4gIC8vIE9yZGVyIGVuZHBvaW50czogMTAwIHJlcXVlc3RzIHBlciBtaW51dGVcclxuICBPUkRFUlM6IHtcclxuICAgIHBvaW50czogMTAwLFxyXG4gICAgZHVyYXRpb246IDYwLCAvLyA2MCBzZWNvbmRzXHJcbiAgfSxcclxufSBhcyBjb25zdDtcclxuXHJcbi8qKlxyXG4gKiBDaXJjdWl0IGJyZWFrZXIgc3RhdGVzIGZvciBBUEkgaGVhbHRoIG1vbml0b3JpbmdcclxuICovXHJcbmVudW0gQ2lyY3VpdEJyZWFrZXJTdGF0ZSB7XHJcbiAgQ0xPU0VEID0gJ0NMT1NFRCcsICAgICAvLyBOb3JtYWwgb3BlcmF0aW9uXHJcbiAgT1BFTiA9ICdPUEVOJywgICAgICAgICAvLyBBUEkgaXMgZmFpbGluZywgcmVqZWN0IHJlcXVlc3RzXHJcbiAgSEFMRl9PUEVOID0gJ0hBTEZfT1BFTicgLy8gVGVzdGluZyBpZiBBUEkgaGFzIHJlY292ZXJlZFxyXG59XHJcblxyXG4vKipcclxuICogQVBJIHJlcXVlc3QgdHlwZXMgZm9yIHByb3BlciByYXRlIGxpbWl0aW5nXHJcbiAqL1xyXG5lbnVtIFJlcXVlc3RUeXBlIHtcclxuICBQVUJMSUMgPSAnUFVCTElDJyxcclxuICBQUklWQVRFID0gJ1BSSVZBVEUnLFxyXG4gIE9SREVSUyA9ICdPUkRFUlMnXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHYXRlLmlvIEFQSSBjcmVkZW50aWFscyBpbnRlcmZhY2VcclxuICovXHJcbmludGVyZmFjZSBHYXRlSU9DcmVkZW50aWFscyB7XHJcbiAgYXBpS2V5OiBzdHJpbmc7XHJcbiAgc2VjcmV0S2V5OiBzdHJpbmc7XHJcbiAgcGFzc3BocmFzZT86IHN0cmluZztcclxufVxyXG5cclxuLyoqXHJcbiAqIEFQSSByZXF1ZXN0IGNvbmZpZ3VyYXRpb25cclxuICovXHJcbmludGVyZmFjZSBBUElSZXF1ZXN0Q29uZmlnIGV4dGVuZHMgQXhpb3NSZXF1ZXN0Q29uZmlnIHtcclxuICByZXF1ZXN0VHlwZT86IFJlcXVlc3RUeXBlO1xyXG4gIHNraXBBdXRoPzogYm9vbGVhbjtcclxuICByZXRyeUNvdW50PzogbnVtYmVyO1xyXG59XHJcblxyXG4vKipcclxuICogQ2lyY3VpdCBicmVha2VyIGNvbmZpZ3VyYXRpb25cclxuICovXHJcbmludGVyZmFjZSBDaXJjdWl0QnJlYWtlckNvbmZpZyB7XHJcbiAgZmFpbHVyZVRocmVzaG9sZDogbnVtYmVyO1xyXG4gIHJlY292ZXJ5VGltZW91dDogbnVtYmVyO1xyXG4gIG1vbml0b3JpbmdQZXJpb2Q6IG51bWJlcjtcclxufVxyXG5cclxuLyoqXHJcbiAqIEFQSSBoZWFsdGggbWV0cmljc1xyXG4gKi9cclxuaW50ZXJmYWNlIEFQSUhlYWx0aE1ldHJpY3Mge1xyXG4gIHRvdGFsUmVxdWVzdHM6IG51bWJlcjtcclxuICBzdWNjZXNzZnVsUmVxdWVzdHM6IG51bWJlcjtcclxuICBmYWlsZWRSZXF1ZXN0czogbnVtYmVyO1xyXG4gIGF2ZXJhZ2VSZXNwb25zZVRpbWU6IG51bWJlcjtcclxuICBsYXN0U3VjY2Vzc2Z1bFJlcXVlc3Q6IERhdGUgfCBudWxsO1xyXG4gIGxhc3RGYWlsZWRSZXF1ZXN0OiBEYXRlIHwgbnVsbDtcclxuICBjaXJjdWl0QnJlYWtlclN0YXRlOiBDaXJjdWl0QnJlYWtlclN0YXRlO1xyXG59XHJcblxyXG4vKipcclxuICogU2VjdXJlIEdhdGUuaW8gQVBJIENsaWVudCB3aXRoIGNvbXByZWhlbnNpdmUgc2VjdXJpdHkgYW5kIG1vbml0b3JpbmdcclxuICovXHJcbmV4cG9ydCBjbGFzcyBHYXRlSU9DbGllbnQge1xyXG4gIHByaXZhdGUgYXhpb3NJbnN0YW5jZTogQXhpb3NJbnN0YW5jZTtcclxuICBwcml2YXRlIGNyZWRlbnRpYWxzOiBHYXRlSU9DcmVkZW50aWFscyB8IG51bGwgPSBudWxsO1xyXG4gIHByaXZhdGUgY3JlZGVudGlhbE1hbmFnZXI6IENyZWRlbnRpYWxNYW5hZ2VyO1xyXG4gIHByaXZhdGUgYXVkaXRTZXJ2aWNlOiBBdWRpdFNlcnZpY2U7XHJcbiAgXHJcbiAgLy8gUmF0ZSBsaW1pdGVycyBmb3IgZGlmZmVyZW50IGVuZHBvaW50IHR5cGVzXHJcbiAgcHJpdmF0ZSBwdWJsaWNSYXRlTGltaXRlcjogUmF0ZUxpbWl0ZXJNZW1vcnk7XHJcbiAgcHJpdmF0ZSBwcml2YXRlUmF0ZUxpbWl0ZXI6IFJhdGVMaW1pdGVyTWVtb3J5O1xyXG4gIHByaXZhdGUgb3JkZXJSYXRlTGltaXRlcjogUmF0ZUxpbWl0ZXJNZW1vcnk7XHJcbiAgXHJcbiAgLy8gQ2lyY3VpdCBicmVha2VyIGZvciBBUEkgaGVhbHRoIG1vbml0b3JpbmdcclxuICBwcml2YXRlIGNpcmN1aXRCcmVha2VyU3RhdGU6IENpcmN1aXRCcmVha2VyU3RhdGUgPSBDaXJjdWl0QnJlYWtlclN0YXRlLkNMT1NFRDtcclxuICBwcml2YXRlIGNpcmN1aXRCcmVha2VyQ29uZmlnOiBDaXJjdWl0QnJlYWtlckNvbmZpZztcclxuICBwcml2YXRlIGZhaWx1cmVDb3VudDogbnVtYmVyID0gMDtcclxuICBwcml2YXRlIGxhc3RGYWlsdXJlVGltZTogRGF0ZSB8IG51bGwgPSBudWxsO1xyXG4gIFxyXG4gIC8vIEhlYWx0aCBtZXRyaWNzIHRyYWNraW5nXHJcbiAgcHJpdmF0ZSBoZWFsdGhNZXRyaWNzOiBBUElIZWFsdGhNZXRyaWNzO1xyXG4gIFxyXG4gIC8vIFByb3h5IGNvbmZpZ3VyYXRpb24gZm9yIFNTSCB0dW5uZWwgcm91dGluZ1xyXG4gIHByaXZhdGUgcHJveHlDb25maWc6IHtcclxuICAgIGhvc3Q6IHN0cmluZztcclxuICAgIHBvcnQ6IG51bWJlcjtcclxuICAgIHByb3RvY29sOiAnaHR0cCcgfCAnaHR0cHMnO1xyXG4gIH0gfCBudWxsID0gbnVsbDtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLmNyZWRlbnRpYWxNYW5hZ2VyID0gbmV3IENyZWRlbnRpYWxNYW5hZ2VyKCk7XHJcbiAgICB0aGlzLmF1ZGl0U2VydmljZSA9IG5ldyBBdWRpdFNlcnZpY2UoKTtcclxuICAgIFxyXG4gICAgLy8gSW5pdGlhbGl6ZSByYXRlIGxpbWl0ZXJzIHdpdGggY29uc2VydmF0aXZlIGxpbWl0c1xyXG4gICAgdGhpcy5wdWJsaWNSYXRlTGltaXRlciA9IG5ldyBSYXRlTGltaXRlck1lbW9yeShSQVRFX0xJTUlUUy5QVUJMSUMpO1xyXG4gICAgdGhpcy5wcml2YXRlUmF0ZUxpbWl0ZXIgPSBuZXcgUmF0ZUxpbWl0ZXJNZW1vcnkoUkFURV9MSU1JVFMuUFJJVkFURSk7XHJcbiAgICB0aGlzLm9yZGVyUmF0ZUxpbWl0ZXIgPSBuZXcgUmF0ZUxpbWl0ZXJNZW1vcnkoUkFURV9MSU1JVFMuT1JERVJTKTtcclxuICAgIFxyXG4gICAgLy8gQ29uZmlndXJlIGNpcmN1aXQgYnJlYWtlclxyXG4gICAgdGhpcy5jaXJjdWl0QnJlYWtlckNvbmZpZyA9IHtcclxuICAgICAgZmFpbHVyZVRocmVzaG9sZDogNSwgICAgICAvLyBPcGVuIGNpcmN1aXQgYWZ0ZXIgNSBjb25zZWN1dGl2ZSBmYWlsdXJlc1xyXG4gICAgICByZWNvdmVyeVRpbWVvdXQ6IDYwMDAwLCAgIC8vIFdhaXQgNjAgc2Vjb25kcyBiZWZvcmUgdHJ5aW5nIGFnYWluXHJcbiAgICAgIG1vbml0b3JpbmdQZXJpb2Q6IDMwMDAwMCwgLy8gTW9uaXRvciBmb3IgNSBtaW51dGVzXHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICAvLyBJbml0aWFsaXplIGhlYWx0aCBtZXRyaWNzXHJcbiAgICB0aGlzLmhlYWx0aE1ldHJpY3MgPSB7XHJcbiAgICAgIHRvdGFsUmVxdWVzdHM6IDAsXHJcbiAgICAgIHN1Y2Nlc3NmdWxSZXF1ZXN0czogMCxcclxuICAgICAgZmFpbGVkUmVxdWVzdHM6IDAsXHJcbiAgICAgIGF2ZXJhZ2VSZXNwb25zZVRpbWU6IDAsXHJcbiAgICAgIGxhc3RTdWNjZXNzZnVsUmVxdWVzdDogbnVsbCxcclxuICAgICAgbGFzdEZhaWxlZFJlcXVlc3Q6IG51bGwsXHJcbiAgICAgIGNpcmN1aXRCcmVha2VyU3RhdGU6IENpcmN1aXRCcmVha2VyU3RhdGUuQ0xPU0VELFxyXG4gICAgfTtcclxuICAgIFxyXG4gICAgLy8gQ3JlYXRlIGF4aW9zIGluc3RhbmNlIHdpdGggc2VjdXJpdHkgY29uZmlndXJhdGlvbnNcclxuICAgIHRoaXMuYXhpb3NJbnN0YW5jZSA9IHRoaXMuY3JlYXRlQXhpb3NJbnN0YW5jZSgpO1xyXG4gICAgXHJcbiAgICBsb2dnZXIuaW5mbygn8J+UkCBHYXRlLmlvIEFQSSBDbGllbnQgaW5pdGlhbGl6ZWQgd2l0aCBzZWN1cml0eSBmZWF0dXJlcycpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSW5pdGlhbGl6ZSB0aGUgQVBJIGNsaWVudCB3aXRoIGNyZWRlbnRpYWxzIGFuZCBwcm94eSBjb25maWd1cmF0aW9uXHJcbiAgICogXHJcbiAgICogQHBhcmFtIHByb3h5SG9zdCAtIFNTSCB0dW5uZWwgcHJveHkgaG9zdCAodXN1YWxseSBsb2NhbGhvc3QpXHJcbiAgICogQHBhcmFtIHByb3h5UG9ydCAtIFNTSCB0dW5uZWwgcHJveHkgcG9ydFxyXG4gICAqIEByZXR1cm5zIFByb21pc2U8Ym9vbGVhbj4gLSBTdWNjZXNzIHN0YXR1c1xyXG4gICAqL1xyXG4gIHB1YmxpYyBhc3luYyBpbml0aWFsaXplKHByb3h5SG9zdDogc3RyaW5nID0gJ2xvY2FsaG9zdCcsIHByb3h5UG9ydDogbnVtYmVyID0gODA4MCk6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgbG9nZ2VyLmluZm8oJ/CfmoAgSW5pdGlhbGl6aW5nIEdhdGUuaW8gQVBJIGNsaWVudC4uLicpO1xyXG4gICAgICBcclxuICAgICAgLy8gTG9hZCBlbmNyeXB0ZWQgY3JlZGVudGlhbHNcclxuICAgICAgYXdhaXQgdGhpcy5sb2FkQ3JlZGVudGlhbHMoKTtcclxuICAgICAgXHJcbiAgICAgIC8vIENvbmZpZ3VyZSBwcm94eSBmb3IgU1NIIHR1bm5lbCByb3V0aW5nXHJcbiAgICAgIHRoaXMuY29uZmlndXJlUHJveHkocHJveHlIb3N0LCBwcm94eVBvcnQpO1xyXG4gICAgICBcclxuICAgICAgLy8gVGVzdCBBUEkgY29ubmVjdGl2aXR5XHJcbiAgICAgIGNvbnN0IGlzSGVhbHRoeSA9IGF3YWl0IHRoaXMucGVyZm9ybUhlYWx0aENoZWNrKCk7XHJcbiAgICAgIFxyXG4gICAgICBpZiAoaXNIZWFsdGh5KSB7XHJcbiAgICAgICAgbG9nZ2VyLmluZm8oJ+KchSBHYXRlLmlvIEFQSSBjbGllbnQgaW5pdGlhbGl6ZWQgc3VjY2Vzc2Z1bGx5Jyk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5hdWRpdFNlcnZpY2UubG9nU2VjdXJpdHlFdmVudCh7XHJcbiAgICAgICAgICB0eXBlOiAnQVBJX0NMSUVOVF9JTklUSUFMSVpFRCcsXHJcbiAgICAgICAgICBzZXZlcml0eTogJ0lORk8nLFxyXG4gICAgICAgICAgZGV0YWlsczogeyBleGNoYW5nZTogJ0dhdGUuaW8nLCBwcm94eUhvc3QsIHByb3h5UG9ydCB9LFxyXG4gICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGxvZ2dlci5lcnJvcign4p2MIEdhdGUuaW8gQVBJIGNsaWVudCBoZWFsdGggY2hlY2sgZmFpbGVkJyk7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgbG9nZ2VyLmVycm9yKCfinYwgRmFpbGVkIHRvIGluaXRpYWxpemUgR2F0ZS5pbyBBUEkgY2xpZW50OicsIGVycm9yKTtcclxuICAgICAgYXdhaXQgdGhpcy5hdWRpdFNlcnZpY2UubG9nU2VjdXJpdHlFdmVudCh7XHJcbiAgICAgICAgdHlwZTogJ0FQSV9DTElFTlRfSU5JVF9GQUlMRUQnLFxyXG4gICAgICAgIHNldmVyaXR5OiAnRVJST1InLFxyXG4gICAgICAgIGRldGFpbHM6IHsgZXJyb3I6IGVycm9yLm1lc3NhZ2UgfSxcclxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXHJcbiAgICAgIH0pO1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBMb2FkIGFuZCBkZWNyeXB0IEFQSSBjcmVkZW50aWFscyBmcm9tIHNlY3VyZSBzdG9yYWdlXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBhc3luYyBsb2FkQ3JlZGVudGlhbHMoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICB0cnkge1xyXG4gICAgICAvLyBMb2FkIGVuY3J5cHRlZCBjcmVkZW50aWFscyBmcm9tIGVudmlyb25tZW50IG9yIHNlY3VyZSBzdG9yYWdlXHJcbiAgICAgIGNvbnN0IGVuY3J5cHRlZENyZWRlbnRpYWxzID0ge1xyXG4gICAgICAgIGFwaUtleTogcHJvY2Vzcy5lbnYuR0FURV9JT19BUElfS0VZLFxyXG4gICAgICAgIHNlY3JldEtleTogcHJvY2Vzcy5lbnYuR0FURV9JT19TRUNSRVRfS0VZLFxyXG4gICAgICAgIHBhc3NwaHJhc2U6IHByb2Nlc3MuZW52LkdBVEVfSU9fUEFTU1BIUkFTRSxcclxuICAgICAgfTtcclxuICAgICAgXHJcbiAgICAgIGlmICghZW5jcnlwdGVkQ3JlZGVudGlhbHMuYXBpS2V5IHx8ICFlbmNyeXB0ZWRDcmVkZW50aWFscy5zZWNyZXRLZXkpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0dhdGUuaW8gQVBJIGNyZWRlbnRpYWxzIG5vdCBmb3VuZCBpbiBlbnZpcm9ubWVudCcpO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICAvLyBEZWNyeXB0IGNyZWRlbnRpYWxzIHVzaW5nIGNyZWRlbnRpYWwgbWFuYWdlclxyXG4gICAgICB0aGlzLmNyZWRlbnRpYWxzID0ge1xyXG4gICAgICAgIGFwaUtleTogYXdhaXQgdGhpcy5jcmVkZW50aWFsTWFuYWdlci5kZWNyeXB0Q3JlZGVudGlhbChlbmNyeXB0ZWRDcmVkZW50aWFscy5hcGlLZXkpLFxyXG4gICAgICAgIHNlY3JldEtleTogYXdhaXQgdGhpcy5jcmVkZW50aWFsTWFuYWdlci5kZWNyeXB0Q3JlZGVudGlhbChlbmNyeXB0ZWRDcmVkZW50aWFscy5zZWNyZXRLZXkpLFxyXG4gICAgICAgIHBhc3NwaHJhc2U6IGVuY3J5cHRlZENyZWRlbnRpYWxzLnBhc3NwaHJhc2UgXHJcbiAgICAgICAgICA/IGF3YWl0IHRoaXMuY3JlZGVudGlhbE1hbmFnZXIuZGVjcnlwdENyZWRlbnRpYWwoZW5jcnlwdGVkQ3JlZGVudGlhbHMucGFzc3BocmFzZSlcclxuICAgICAgICAgIDogdW5kZWZpbmVkLFxyXG4gICAgICB9O1xyXG4gICAgICBcclxuICAgICAgbG9nZ2VyLmluZm8oJ/CflJEgR2F0ZS5pbyBBUEkgY3JlZGVudGlhbHMgbG9hZGVkIGFuZCBkZWNyeXB0ZWQgc3VjY2Vzc2Z1bGx5Jyk7XHJcbiAgICAgIFxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgbG9nZ2VyLmVycm9yKCfinYwgRmFpbGVkIHRvIGxvYWQgR2F0ZS5pbyBBUEkgY3JlZGVudGlhbHM6JywgZXJyb3IpO1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBsb2FkIEFQSSBjcmVkZW50aWFscycpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ29uZmlndXJlIHByb3h5IHNldHRpbmdzIGZvciBTU0ggdHVubmVsIHJvdXRpbmdcclxuICAgKi9cclxuICBwcml2YXRlIGNvbmZpZ3VyZVByb3h5KGhvc3Q6IHN0cmluZywgcG9ydDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICB0aGlzLnByb3h5Q29uZmlnID0ge1xyXG4gICAgICBob3N0LFxyXG4gICAgICBwb3J0LFxyXG4gICAgICBwcm90b2NvbDogJ2h0dHAnLFxyXG4gICAgfTtcclxuICAgIFxyXG4gICAgLy8gVXBkYXRlIGF4aW9zIGluc3RhbmNlIHdpdGggcHJveHkgY29uZmlndXJhdGlvblxyXG4gICAgdGhpcy5heGlvc0luc3RhbmNlLmRlZmF1bHRzLnByb3h5ID0ge1xyXG4gICAgICBob3N0OiB0aGlzLnByb3h5Q29uZmlnLmhvc3QsXHJcbiAgICAgIHBvcnQ6IHRoaXMucHJveHlDb25maWcucG9ydCxcclxuICAgICAgcHJvdG9jb2w6IHRoaXMucHJveHlDb25maWcucHJvdG9jb2wsXHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICBsb2dnZXIuaW5mbyhg8J+MkCBDb25maWd1cmVkIEFQSSByZXF1ZXN0cyB0byByb3V0ZSB0aHJvdWdoIFNTSCB0dW5uZWw6ICR7aG9zdH06JHtwb3J0fWApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlIGF4aW9zIGluc3RhbmNlIHdpdGggc2VjdXJpdHkgY29uZmlndXJhdGlvbnNcclxuICAgKi9cclxuICBwcml2YXRlIGNyZWF0ZUF4aW9zSW5zdGFuY2UoKTogQXhpb3NJbnN0YW5jZSB7XHJcbiAgICBjb25zdCBpbnN0YW5jZSA9IGF4aW9zLmNyZWF0ZSh7XHJcbiAgICAgIGJhc2VVUkw6IGAke0dBVEVfSU9fQ09ORklHLkJBU0VfVVJMfS9hcGkvJHtHQVRFX0lPX0NPTkZJRy5BUElfVkVSU0lPTn1gLFxyXG4gICAgICB0aW1lb3V0OiBHQVRFX0lPX0NPTkZJRy5USU1FT1VULFxyXG4gICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcclxuICAgICAgICAnVXNlci1BZ2VudCc6ICdBSS1DcnlwdG8tVHJhZGluZy1BZ2VudC8xLjAuMCcsXHJcbiAgICAgIH0sXHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgLy8gQWRkIHJlcXVlc3QgaW50ZXJjZXB0b3IgZm9yIGF1dGhlbnRpY2F0aW9uIGFuZCBsb2dnaW5nXHJcbiAgICBpbnN0YW5jZS5pbnRlcmNlcHRvcnMucmVxdWVzdC51c2UoXHJcbiAgICAgIChjb25maWcpID0+IHRoaXMuaGFuZGxlUmVxdWVzdEludGVyY2VwdG9yKGNvbmZpZyksXHJcbiAgICAgIChlcnJvcikgPT4gdGhpcy5oYW5kbGVSZXF1ZXN0RXJyb3IoZXJyb3IpXHJcbiAgICApO1xyXG4gICAgXHJcbiAgICAvLyBBZGQgcmVzcG9uc2UgaW50ZXJjZXB0b3IgZm9yIGxvZ2dpbmcgYW5kIGVycm9yIGhhbmRsaW5nXHJcbiAgICBpbnN0YW5jZS5pbnRlcmNlcHRvcnMucmVzcG9uc2UudXNlKFxyXG4gICAgICAocmVzcG9uc2UpID0+IHRoaXMuaGFuZGxlUmVzcG9uc2VJbnRlcmNlcHRvcihyZXNwb25zZSksXHJcbiAgICAgIChlcnJvcikgPT4gdGhpcy5oYW5kbGVSZXNwb25zZUVycm9yKGVycm9yKVxyXG4gICAgKTtcclxuICAgIFxyXG4gICAgcmV0dXJuIGluc3RhbmNlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSGFuZGxlIHJlcXVlc3QgaW50ZXJjZXB0b3IgZm9yIGF1dGhlbnRpY2F0aW9uIGFuZCBsb2dnaW5nXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBhc3luYyBoYW5kbGVSZXF1ZXN0SW50ZXJjZXB0b3IoY29uZmlnOiBBeGlvc1JlcXVlc3RDb25maWcpOiBQcm9taXNlPEF4aW9zUmVxdWVzdENvbmZpZz4ge1xyXG4gICAgY29uc3Qgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcclxuICAgIFxyXG4gICAgLy8gQWRkIHJlcXVlc3QgdGltaW5nIGZvciBtZXRyaWNzXHJcbiAgICBjb25maWcubWV0YWRhdGEgPSB7IHN0YXJ0VGltZSB9O1xyXG4gICAgXHJcbiAgICAvLyBTa2lwIGF1dGhlbnRpY2F0aW9uIGZvciBwdWJsaWMgZW5kcG9pbnRzXHJcbiAgICBpZiAoY29uZmlnLnNraXBBdXRoKSB7XHJcbiAgICAgIHJldHVybiBjb25maWc7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIEFkZCBhdXRoZW50aWNhdGlvbiBoZWFkZXJzIGZvciBwcml2YXRlIGVuZHBvaW50c1xyXG4gICAgaWYgKHRoaXMuY3JlZGVudGlhbHMpIHtcclxuICAgICAgY29uc3QgdGltZXN0YW1wID0gTWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMTAwMCkudG9TdHJpbmcoKTtcclxuICAgICAgY29uc3QgbWV0aG9kID0gY29uZmlnLm1ldGhvZD8udG9VcHBlckNhc2UoKSB8fCAnR0VUJztcclxuICAgICAgY29uc3QgdXJsID0gY29uZmlnLnVybCB8fCAnJztcclxuICAgICAgY29uc3QgYm9keSA9IGNvbmZpZy5kYXRhID8gSlNPTi5zdHJpbmdpZnkoY29uZmlnLmRhdGEpIDogJyc7XHJcbiAgICAgIFxyXG4gICAgICAvLyBDcmVhdGUgc2lnbmF0dXJlIGZvciByZXF1ZXN0IGF1dGhlbnRpY2F0aW9uXHJcbiAgICAgIGNvbnN0IHNpZ25hdHVyZSA9IHRoaXMuY3JlYXRlU2lnbmF0dXJlKG1ldGhvZCwgdXJsLCBib2R5LCB0aW1lc3RhbXApO1xyXG4gICAgICBcclxuICAgICAgY29uZmlnLmhlYWRlcnMgPSB7XHJcbiAgICAgICAgLi4uY29uZmlnLmhlYWRlcnMsXHJcbiAgICAgICAgJ0tFWSc6IHRoaXMuY3JlZGVudGlhbHMuYXBpS2V5LFxyXG4gICAgICAgICdUaW1lc3RhbXAnOiB0aW1lc3RhbXAsXHJcbiAgICAgICAgJ1NJR04nOiBzaWduYXR1cmUsXHJcbiAgICAgIH07XHJcbiAgICAgIFxyXG4gICAgICBpZiAodGhpcy5jcmVkZW50aWFscy5wYXNzcGhyYXNlKSB7XHJcbiAgICAgICAgY29uZmlnLmhlYWRlcnNbJ1Bhc3NwaHJhc2UnXSA9IHRoaXMuY3JlZGVudGlhbHMucGFzc3BocmFzZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBMb2cgQVBJIHJlcXVlc3QgZm9yIGF1ZGl0IHRyYWlsXHJcbiAgICBhd2FpdCB0aGlzLmF1ZGl0U2VydmljZS5sb2dBUElSZXF1ZXN0KHtcclxuICAgICAgbWV0aG9kOiBjb25maWcubWV0aG9kPy50b1VwcGVyQ2FzZSgpIHx8ICdHRVQnLFxyXG4gICAgICB1cmw6IGNvbmZpZy51cmwgfHwgJycsXHJcbiAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcclxuICAgICAgaGVhZGVyczogdGhpcy5zYW5pdGl6ZUhlYWRlcnMoY29uZmlnLmhlYWRlcnMgfHwge30pLFxyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIHJldHVybiBjb25maWc7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGUgSE1BQy1TSEE1MTIgc2lnbmF0dXJlIGZvciBHYXRlLmlvIEFQSSBhdXRoZW50aWNhdGlvblxyXG4gICAqL1xyXG4gIHByaXZhdGUgY3JlYXRlU2lnbmF0dXJlKG1ldGhvZDogc3RyaW5nLCB1cmw6IHN0cmluZywgYm9keTogc3RyaW5nLCB0aW1lc3RhbXA6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICBpZiAoIXRoaXMuY3JlZGVudGlhbHM/LnNlY3JldEtleSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NlY3JldCBrZXkgbm90IGF2YWlsYWJsZSBmb3Igc2lnbmF0dXJlIGNyZWF0aW9uJyk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIENyZWF0ZSBzaWduYXR1cmUgc3RyaW5nIGFjY29yZGluZyB0byBHYXRlLmlvIEFQSSBzcGVjaWZpY2F0aW9uXHJcbiAgICBjb25zdCBzaWduYXR1cmVTdHJpbmcgPSBgJHttZXRob2R9XFxuJHt1cmx9XFxuXFxuJHtib2R5fVxcbiR7dGltZXN0YW1wfWA7XHJcbiAgICBcclxuICAgIC8vIEdlbmVyYXRlIEhNQUMtU0hBNTEyIHNpZ25hdHVyZVxyXG4gICAgY29uc3Qgc2lnbmF0dXJlID0gY3J5cHRvXHJcbiAgICAgIC5jcmVhdGVIbWFjKCdzaGE1MTInLCB0aGlzLmNyZWRlbnRpYWxzLnNlY3JldEtleSlcclxuICAgICAgLnVwZGF0ZShzaWduYXR1cmVTdHJpbmcpXHJcbiAgICAgIC5kaWdlc3QoJ2hleCcpO1xyXG4gICAgXHJcbiAgICByZXR1cm4gc2lnbmF0dXJlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSGFuZGxlIHJlc3BvbnNlIGludGVyY2VwdG9yIGZvciBtZXRyaWNzIGFuZCBsb2dnaW5nXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBhc3luYyBoYW5kbGVSZXNwb25zZUludGVyY2VwdG9yKHJlc3BvbnNlOiBBeGlvc1Jlc3BvbnNlKTogUHJvbWlzZTxBeGlvc1Jlc3BvbnNlPiB7XHJcbiAgICBjb25zdCBlbmRUaW1lID0gRGF0ZS5ub3coKTtcclxuICAgIGNvbnN0IHN0YXJ0VGltZSA9IHJlc3BvbnNlLmNvbmZpZy5tZXRhZGF0YT8uc3RhcnRUaW1lIHx8IGVuZFRpbWU7XHJcbiAgICBjb25zdCByZXNwb25zZVRpbWUgPSBlbmRUaW1lIC0gc3RhcnRUaW1lO1xyXG4gICAgXHJcbiAgICAvLyBVcGRhdGUgaGVhbHRoIG1ldHJpY3NcclxuICAgIHRoaXMudXBkYXRlSGVhbHRoTWV0cmljcyh0cnVlLCByZXNwb25zZVRpbWUpO1xyXG4gICAgXHJcbiAgICAvLyBMb2cgc3VjY2Vzc2Z1bCBBUEkgcmVzcG9uc2VcclxuICAgIGF3YWl0IHRoaXMuYXVkaXRTZXJ2aWNlLmxvZ0FQSVJlc3BvbnNlKHtcclxuICAgICAgc3RhdHVzOiByZXNwb25zZS5zdGF0dXMsXHJcbiAgICAgIHJlc3BvbnNlVGltZSxcclxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxyXG4gICAgICBzdWNjZXNzOiB0cnVlLFxyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIHJldHVybiByZXNwb25zZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEhhbmRsZSByZXF1ZXN0IGVycm9yc1xyXG4gICAqL1xyXG4gIHByaXZhdGUgYXN5bmMgaGFuZGxlUmVxdWVzdEVycm9yKGVycm9yOiBhbnkpOiBQcm9taXNlPG5ldmVyPiB7XHJcbiAgICBsb2dnZXIuZXJyb3IoJ+KdjCBBUEkgcmVxdWVzdCBlcnJvcjonLCBlcnJvci5tZXNzYWdlKTtcclxuICAgIFxyXG4gICAgYXdhaXQgdGhpcy5hdWRpdFNlcnZpY2UubG9nU2VjdXJpdHlFdmVudCh7XHJcbiAgICAgIHR5cGU6ICdBUElfUkVRVUVTVF9FUlJPUicsXHJcbiAgICAgIHNldmVyaXR5OiAnRVJST1InLFxyXG4gICAgICBkZXRhaWxzOiB7IGVycm9yOiBlcnJvci5tZXNzYWdlIH0sXHJcbiAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICB0aHJvdyBlcnJvcjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEhhbmRsZSByZXNwb25zZSBlcnJvcnMgd2l0aCByZXRyeSBsb2dpYyBhbmQgY2lyY3VpdCBicmVha2VyXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBhc3luYyBoYW5kbGVSZXNwb25zZUVycm9yKGVycm9yOiBhbnkpOiBQcm9taXNlPG5ldmVyPiB7XHJcbiAgICBjb25zdCByZXNwb25zZVRpbWUgPSBEYXRlLm5vdygpIC0gKGVycm9yLmNvbmZpZz8ubWV0YWRhdGE/LnN0YXJ0VGltZSB8fCBEYXRlLm5vdygpKTtcclxuICAgIFxyXG4gICAgLy8gVXBkYXRlIGhlYWx0aCBtZXRyaWNzIGZvciBmYWlsZWQgcmVxdWVzdFxyXG4gICAgdGhpcy51cGRhdGVIZWFsdGhNZXRyaWNzKGZhbHNlLCByZXNwb25zZVRpbWUpO1xyXG4gICAgXHJcbiAgICAvLyBMb2cgZmFpbGVkIEFQSSByZXNwb25zZVxyXG4gICAgYXdhaXQgdGhpcy5hdWRpdFNlcnZpY2UubG9nQVBJUmVzcG9uc2Uoe1xyXG4gICAgICBzdGF0dXM6IGVycm9yLnJlc3BvbnNlPy5zdGF0dXMgfHwgMCxcclxuICAgICAgcmVzcG9uc2VUaW1lLFxyXG4gICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXHJcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICBlcnJvcjogZXJyb3IubWVzc2FnZSxcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICAvLyBIYW5kbGUgc3BlY2lmaWMgZXJyb3IgdHlwZXNcclxuICAgIGlmIChlcnJvci5yZXNwb25zZT8uc3RhdHVzID09PSA0MjkpIHtcclxuICAgICAgbG9nZ2VyLndhcm4oJ+KaoO+4jyBSYXRlIGxpbWl0IGV4Y2VlZGVkLCBpbXBsZW1lbnRpbmcgYmFja29mZiBzdHJhdGVneScpO1xyXG4gICAgICBhd2FpdCB0aGlzLmhhbmRsZVJhdGVMaW1pdEVycm9yKGVycm9yKTtcclxuICAgIH0gZWxzZSBpZiAoZXJyb3IucmVzcG9uc2U/LnN0YXR1cyA+PSA1MDApIHtcclxuICAgICAgbG9nZ2VyLmVycm9yKCfinYwgU2VydmVyIGVycm9yIGRldGVjdGVkLCB1cGRhdGluZyBjaXJjdWl0IGJyZWFrZXInKTtcclxuICAgICAgdGhpcy51cGRhdGVDaXJjdWl0QnJlYWtlcihmYWxzZSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHRocm93IGVycm9yO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSGFuZGxlIHJhdGUgbGltaXQgZXJyb3JzIHdpdGggaW50ZWxsaWdlbnQgYmFja29mZlxyXG4gICAqL1xyXG4gIHByaXZhdGUgYXN5bmMgaGFuZGxlUmF0ZUxpbWl0RXJyb3IoZXJyb3I6IGFueSk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgY29uc3QgcmV0cnlBZnRlciA9IGVycm9yLnJlc3BvbnNlPy5oZWFkZXJzWydyZXRyeS1hZnRlciddO1xyXG4gICAgY29uc3QgYmFja29mZlRpbWUgPSByZXRyeUFmdGVyID8gcGFyc2VJbnQocmV0cnlBZnRlcikgKiAxMDAwIDogNTAwMDsgLy8gNSBzZWNvbmRzIGRlZmF1bHRcclxuICAgIFxyXG4gICAgbG9nZ2VyLmluZm8oYOKPsyBJbXBsZW1lbnRpbmcgcmF0ZSBsaW1pdCBiYWNrb2ZmOiAke2JhY2tvZmZUaW1lfW1zYCk7XHJcbiAgICBcclxuICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCBiYWNrb2ZmVGltZSkpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVXBkYXRlIGhlYWx0aCBtZXRyaWNzIGZvciBtb25pdG9yaW5nXHJcbiAgICovXHJcbiAgcHJpdmF0ZSB1cGRhdGVIZWFsdGhNZXRyaWNzKHN1Y2Nlc3M6IGJvb2xlYW4sIHJlc3BvbnNlVGltZTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICB0aGlzLmhlYWx0aE1ldHJpY3MudG90YWxSZXF1ZXN0cysrO1xyXG4gICAgXHJcbiAgICBpZiAoc3VjY2Vzcykge1xyXG4gICAgICB0aGlzLmhlYWx0aE1ldHJpY3Muc3VjY2Vzc2Z1bFJlcXVlc3RzKys7XHJcbiAgICAgIHRoaXMuaGVhbHRoTWV0cmljcy5sYXN0U3VjY2Vzc2Z1bFJlcXVlc3QgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICB0aGlzLnVwZGF0ZUNpcmN1aXRCcmVha2VyKHRydWUpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5oZWFsdGhNZXRyaWNzLmZhaWxlZFJlcXVlc3RzKys7XHJcbiAgICAgIHRoaXMuaGVhbHRoTWV0cmljcy5sYXN0RmFpbGVkUmVxdWVzdCA9IG5ldyBEYXRlKCk7XHJcbiAgICAgIHRoaXMudXBkYXRlQ2lyY3VpdEJyZWFrZXIoZmFsc2UpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBVcGRhdGUgYXZlcmFnZSByZXNwb25zZSB0aW1lIHVzaW5nIGV4cG9uZW50aWFsIG1vdmluZyBhdmVyYWdlXHJcbiAgICBjb25zdCBhbHBoYSA9IDAuMTsgLy8gU21vb3RoaW5nIGZhY3RvclxyXG4gICAgdGhpcy5oZWFsdGhNZXRyaWNzLmF2ZXJhZ2VSZXNwb25zZVRpbWUgPSBcclxuICAgICAgKGFscGhhICogcmVzcG9uc2VUaW1lKSArICgoMSAtIGFscGhhKSAqIHRoaXMuaGVhbHRoTWV0cmljcy5hdmVyYWdlUmVzcG9uc2VUaW1lKTtcclxuICAgIFxyXG4gICAgdGhpcy5oZWFsdGhNZXRyaWNzLmNpcmN1aXRCcmVha2VyU3RhdGUgPSB0aGlzLmNpcmN1aXRCcmVha2VyU3RhdGU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBVcGRhdGUgY2lyY3VpdCBicmVha2VyIHN0YXRlIGJhc2VkIG9uIHJlcXVlc3Qgc3VjY2Vzcy9mYWlsdXJlXHJcbiAgICovXHJcbiAgcHJpdmF0ZSB1cGRhdGVDaXJjdWl0QnJlYWtlcihzdWNjZXNzOiBib29sZWFuKTogdm9pZCB7XHJcbiAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xyXG4gICAgXHJcbiAgICBpZiAoc3VjY2Vzcykge1xyXG4gICAgICAvLyBSZXNldCBmYWlsdXJlIGNvdW50IG9uIHN1Y2Nlc3NmdWwgcmVxdWVzdFxyXG4gICAgICB0aGlzLmZhaWx1cmVDb3VudCA9IDA7XHJcbiAgICAgIFxyXG4gICAgICAvLyBDbG9zZSBjaXJjdWl0IGlmIGl0IHdhcyBoYWxmLW9wZW5cclxuICAgICAgaWYgKHRoaXMuY2lyY3VpdEJyZWFrZXJTdGF0ZSA9PT0gQ2lyY3VpdEJyZWFrZXJTdGF0ZS5IQUxGX09QRU4pIHtcclxuICAgICAgICB0aGlzLmNpcmN1aXRCcmVha2VyU3RhdGUgPSBDaXJjdWl0QnJlYWtlclN0YXRlLkNMT1NFRDtcclxuICAgICAgICBsb2dnZXIuaW5mbygn4pyFIENpcmN1aXQgYnJlYWtlciBjbG9zZWQgLSBBUEkgaXMgaGVhbHRoeScpO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmZhaWx1cmVDb3VudCsrO1xyXG4gICAgICB0aGlzLmxhc3RGYWlsdXJlVGltZSA9IG5vdztcclxuICAgICAgXHJcbiAgICAgIC8vIE9wZW4gY2lyY3VpdCBpZiBmYWlsdXJlIHRocmVzaG9sZCBpcyByZWFjaGVkXHJcbiAgICAgIGlmICh0aGlzLmZhaWx1cmVDb3VudCA+PSB0aGlzLmNpcmN1aXRCcmVha2VyQ29uZmlnLmZhaWx1cmVUaHJlc2hvbGQgJiZcclxuICAgICAgICAgIHRoaXMuY2lyY3VpdEJyZWFrZXJTdGF0ZSA9PT0gQ2lyY3VpdEJyZWFrZXJTdGF0ZS5DTE9TRUQpIHtcclxuICAgICAgICB0aGlzLmNpcmN1aXRCcmVha2VyU3RhdGUgPSBDaXJjdWl0QnJlYWtlclN0YXRlLk9QRU47XHJcbiAgICAgICAgbG9nZ2VyLmVycm9yKCfwn5qoIENpcmN1aXQgYnJlYWtlciBvcGVuZWQgLSBBUEkgaXMgdW5oZWFsdGh5Jyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8gQ2hlY2sgaWYgY2lyY3VpdCBzaG91bGQgbW92ZSB0byBoYWxmLW9wZW4gc3RhdGVcclxuICAgIGlmICh0aGlzLmNpcmN1aXRCcmVha2VyU3RhdGUgPT09IENpcmN1aXRCcmVha2VyU3RhdGUuT1BFTiAmJlxyXG4gICAgICAgIHRoaXMubGFzdEZhaWx1cmVUaW1lICYmXHJcbiAgICAgICAgKG5vdy5nZXRUaW1lKCkgLSB0aGlzLmxhc3RGYWlsdXJlVGltZS5nZXRUaW1lKCkpID4gdGhpcy5jaXJjdWl0QnJlYWtlckNvbmZpZy5yZWNvdmVyeVRpbWVvdXQpIHtcclxuICAgICAgdGhpcy5jaXJjdWl0QnJlYWtlclN0YXRlID0gQ2lyY3VpdEJyZWFrZXJTdGF0ZS5IQUxGX09QRU47XHJcbiAgICAgIGxvZ2dlci5pbmZvKCfwn5SEIENpcmN1aXQgYnJlYWtlciBoYWxmLW9wZW4gLSB0ZXN0aW5nIEFQSSByZWNvdmVyeScpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2hlY2sgaWYgY2lyY3VpdCBicmVha2VyIGFsbG93cyByZXF1ZXN0c1xyXG4gICAqL1xyXG4gIHByaXZhdGUgaXNDaXJjdWl0QnJlYWtlck9wZW4oKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5jaXJjdWl0QnJlYWtlclN0YXRlID09PSBDaXJjdWl0QnJlYWtlclN0YXRlLk9QRU47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBcHBseSByYXRlIGxpbWl0aW5nIGJhc2VkIG9uIHJlcXVlc3QgdHlwZVxyXG4gICAqL1xyXG4gIHByaXZhdGUgYXN5bmMgYXBwbHlSYXRlTGltaXQocmVxdWVzdFR5cGU6IFJlcXVlc3RUeXBlKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBzd2l0Y2ggKHJlcXVlc3RUeXBlKSB7XHJcbiAgICAgICAgY2FzZSBSZXF1ZXN0VHlwZS5QVUJMSUM6XHJcbiAgICAgICAgICBhd2FpdCB0aGlzLnB1YmxpY1JhdGVMaW1pdGVyLmNvbnN1bWUoJ3B1YmxpYycpO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBSZXF1ZXN0VHlwZS5QUklWQVRFOlxyXG4gICAgICAgICAgYXdhaXQgdGhpcy5wcml2YXRlUmF0ZUxpbWl0ZXIuY29uc3VtZSgncHJpdmF0ZScpO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBSZXF1ZXN0VHlwZS5PUkRFUlM6XHJcbiAgICAgICAgICBhd2FpdCB0aGlzLm9yZGVyUmF0ZUxpbWl0ZXIuY29uc3VtZSgnb3JkZXJzJyk7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfSBjYXRjaCAocmF0ZUxpbWl0ZXJSZXMpIHtcclxuICAgICAgY29uc3QgbXNCZWZvcmVOZXh0ID0gcmF0ZUxpbWl0ZXJSZXMubXNCZWZvcmVOZXh0IHx8IDEwMDA7XHJcbiAgICAgIGxvZ2dlci53YXJuKGDimqDvuI8gUmF0ZSBsaW1pdCByZWFjaGVkLCB3YWl0aW5nICR7bXNCZWZvcmVOZXh0fW1zYCk7XHJcbiAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCBtc0JlZm9yZU5leHQpKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIE1ha2UgYXV0aGVudGljYXRlZCBBUEkgcmVxdWVzdCB3aXRoIGNvbXByZWhlbnNpdmUgZXJyb3IgaGFuZGxpbmdcclxuICAgKi9cclxuICBwdWJsaWMgYXN5bmMgbWFrZVJlcXVlc3Q8VCA9IGFueT4oY29uZmlnOiBBUElSZXF1ZXN0Q29uZmlnKTogUHJvbWlzZTxUPiB7XHJcbiAgICAvLyBDaGVjayBjaXJjdWl0IGJyZWFrZXIgc3RhdGVcclxuICAgIGlmICh0aGlzLmlzQ2lyY3VpdEJyZWFrZXJPcGVuKCkpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDaXJjdWl0IGJyZWFrZXIgaXMgb3BlbiAtIEFQSSBpcyBjdXJyZW50bHkgdW5hdmFpbGFibGUnKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8gQXBwbHkgcmF0ZSBsaW1pdGluZ1xyXG4gICAgY29uc3QgcmVxdWVzdFR5cGUgPSBjb25maWcucmVxdWVzdFR5cGUgfHwgUmVxdWVzdFR5cGUuUFJJVkFURTtcclxuICAgIGF3YWl0IHRoaXMuYXBwbHlSYXRlTGltaXQocmVxdWVzdFR5cGUpO1xyXG4gICAgXHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuYXhpb3NJbnN0YW5jZS5yZXF1ZXN0PFQ+KGNvbmZpZyk7XHJcbiAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgLy8gSW1wbGVtZW50IHJldHJ5IGxvZ2ljIGZvciB0cmFuc2llbnQgZXJyb3JzXHJcbiAgICAgIGNvbnN0IHJldHJ5Q291bnQgPSBjb25maWcucmV0cnlDb3VudCB8fCAwO1xyXG4gICAgICBpZiAocmV0cnlDb3VudCA8IEdBVEVfSU9fQ09ORklHLk1BWF9SRVRSSUVTICYmIHRoaXMuc2hvdWxkUmV0cnkoZXJyb3IpKSB7XHJcbiAgICAgICAgbG9nZ2VyLmluZm8oYPCflIQgUmV0cnlpbmcgcmVxdWVzdCAoYXR0ZW1wdCAke3JldHJ5Q291bnQgKyAxfS8ke0dBVEVfSU9fQ09ORklHLk1BWF9SRVRSSUVTfSlgKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBFeHBvbmVudGlhbCBiYWNrb2ZmXHJcbiAgICAgICAgY29uc3QgZGVsYXkgPSBHQVRFX0lPX0NPTkZJRy5SRVRSWV9ERUxBWSAqIE1hdGgucG93KDIsIHJldHJ5Q291bnQpO1xyXG4gICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCBkZWxheSkpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiB0aGlzLm1ha2VSZXF1ZXN0PFQ+KHtcclxuICAgICAgICAgIC4uLmNvbmZpZyxcclxuICAgICAgICAgIHJldHJ5Q291bnQ6IHJldHJ5Q291bnQgKyAxLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICB0aHJvdyBlcnJvcjtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIERldGVybWluZSBpZiByZXF1ZXN0IHNob3VsZCBiZSByZXRyaWVkIGJhc2VkIG9uIGVycm9yIHR5cGVcclxuICAgKi9cclxuICBwcml2YXRlIHNob3VsZFJldHJ5KGVycm9yOiBhbnkpOiBib29sZWFuIHtcclxuICAgIC8vIFJldHJ5IG9uIG5ldHdvcmsgZXJyb3JzIG9yIHNlcnZlciBlcnJvcnMgKDV4eClcclxuICAgIGlmICghZXJyb3IucmVzcG9uc2UpIHJldHVybiB0cnVlOyAvLyBOZXR3b3JrIGVycm9yXHJcbiAgICBcclxuICAgIGNvbnN0IHN0YXR1cyA9IGVycm9yLnJlc3BvbnNlLnN0YXR1cztcclxuICAgIHJldHVybiBzdGF0dXMgPj0gNTAwIHx8IHN0YXR1cyA9PT0gNDI5OyAvLyBTZXJ2ZXIgZXJyb3Igb3IgcmF0ZSBsaW1pdFxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUGVyZm9ybSBjb21wcmVoZW5zaXZlIGhlYWx0aCBjaGVja1xyXG4gICAqL1xyXG4gIHB1YmxpYyBhc3luYyBwZXJmb3JtSGVhbHRoQ2hlY2soKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBsb2dnZXIuaW5mbygn8J+UjSBQZXJmb3JtaW5nIEdhdGUuaW8gQVBJIGhlYWx0aCBjaGVjay4uLicpO1xyXG4gICAgICBcclxuICAgICAgLy8gVGVzdCBwdWJsaWMgZW5kcG9pbnQgKHNlcnZlciB0aW1lKVxyXG4gICAgICBhd2FpdCB0aGlzLm1ha2VSZXF1ZXN0KHtcclxuICAgICAgICBtZXRob2Q6ICdHRVQnLFxyXG4gICAgICAgIHVybDogJy9zcG90L3RpbWUnLFxyXG4gICAgICAgIHJlcXVlc3RUeXBlOiBSZXF1ZXN0VHlwZS5QVUJMSUMsXHJcbiAgICAgICAgc2tpcEF1dGg6IHRydWUsXHJcbiAgICAgIH0pO1xyXG4gICAgICBcclxuICAgICAgLy8gVGVzdCBwcml2YXRlIGVuZHBvaW50IChhY2NvdW50IGluZm8pIGlmIGNyZWRlbnRpYWxzIGFyZSBhdmFpbGFibGVcclxuICAgICAgaWYgKHRoaXMuY3JlZGVudGlhbHMpIHtcclxuICAgICAgICBhd2FpdCB0aGlzLm1ha2VSZXF1ZXN0KHtcclxuICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXHJcbiAgICAgICAgICB1cmw6ICcvc3BvdC9hY2NvdW50cycsXHJcbiAgICAgICAgICByZXF1ZXN0VHlwZTogUmVxdWVzdFR5cGUuUFJJVkFURSxcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgbG9nZ2VyLmluZm8oJ+KchSBHYXRlLmlvIEFQSSBoZWFsdGggY2hlY2sgcGFzc2VkJyk7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICBcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGxvZ2dlci5lcnJvcign4p2MIEdhdGUuaW8gQVBJIGhlYWx0aCBjaGVjayBmYWlsZWQ6JywgZXJyb3IubWVzc2FnZSk7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCBjdXJyZW50IEFQSSBoZWFsdGggbWV0cmljc1xyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRIZWFsdGhNZXRyaWNzKCk6IEFQSUhlYWx0aE1ldHJpY3Mge1xyXG4gICAgcmV0dXJuIHsgLi4udGhpcy5oZWFsdGhNZXRyaWNzIH07XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTYW5pdGl6ZSBoZWFkZXJzIGZvciBsb2dnaW5nIChyZW1vdmUgc2Vuc2l0aXZlIGluZm9ybWF0aW9uKVxyXG4gICAqL1xyXG4gIHByaXZhdGUgc2FuaXRpemVIZWFkZXJzKGhlYWRlcnM6IFJlY29yZDxzdHJpbmcsIGFueT4pOiBSZWNvcmQ8c3RyaW5nLCBhbnk+IHtcclxuICAgIGNvbnN0IHNhbml0aXplZCA9IHsgLi4uaGVhZGVycyB9O1xyXG4gICAgXHJcbiAgICAvLyBSZW1vdmUgc2Vuc2l0aXZlIGF1dGhlbnRpY2F0aW9uIGhlYWRlcnNcclxuICAgIGRlbGV0ZSBzYW5pdGl6ZWQuS0VZO1xyXG4gICAgZGVsZXRlIHNhbml0aXplZC5TSUdOO1xyXG4gICAgZGVsZXRlIHNhbml0aXplZC5QYXNzcGhyYXNlO1xyXG4gICAgXHJcbiAgICByZXR1cm4gc2FuaXRpemVkO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR3JhY2VmdWwgc2h1dGRvd24gb2YgQVBJIGNsaWVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBhc3luYyBzaHV0ZG93bigpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIGxvZ2dlci5pbmZvKCfwn5uRIFNodXR0aW5nIGRvd24gR2F0ZS5pbyBBUEkgY2xpZW50Li4uJyk7XHJcbiAgICBcclxuICAgIC8vIExvZyBmaW5hbCBoZWFsdGggbWV0cmljc1xyXG4gICAgYXdhaXQgdGhpcy5hdWRpdFNlcnZpY2UubG9nU2VjdXJpdHlFdmVudCh7XHJcbiAgICAgIHR5cGU6ICdBUElfQ0xJRU5UX1NIVVRET1dOJyxcclxuICAgICAgc2V2ZXJpdHk6ICdJTkZPJyxcclxuICAgICAgZGV0YWlsczogeyBoZWFsdGhNZXRyaWNzOiB0aGlzLmhlYWx0aE1ldHJpY3MgfSxcclxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIC8vIENsZWFyIHNlbnNpdGl2ZSBkYXRhXHJcbiAgICB0aGlzLmNyZWRlbnRpYWxzID0gbnVsbDtcclxuICAgIFxyXG4gICAgbG9nZ2VyLmluZm8oJ+KchSBHYXRlLmlvIEFQSSBjbGllbnQgc2h1dGRvd24gY29tcGxldGVkJyk7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBFeHBvcnQgdHlwZXMgZm9yIHVzZSBpbiBvdGhlciBtb2R1bGVzXHJcbmV4cG9ydCB0eXBlIHtcclxuICBHYXRlSU9DcmVkZW50aWFscyxcclxuICBBUElSZXF1ZXN0Q29uZmlnLFxyXG4gIEFQSUhlYWx0aE1ldHJpY3MsXHJcbiAgQ2lyY3VpdEJyZWFrZXJDb25maWcsXHJcbn07XHJcblxyXG5leHBvcnQgeyBSZXF1ZXN0VHlwZSwgQ2lyY3VpdEJyZWFrZXJTdGF0ZSB9O1xyXG4iXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQSxTQUFBQSxlQUFBO0VBQUEsSUFBQUMsSUFBQTtFQUFBLElBQUFDLElBQUE7RUFBQSxJQUFBQyxNQUFBLE9BQUFDLFFBQUE7RUFBQSxJQUFBQyxHQUFBO0VBQUEsSUFBQUMsWUFBQTtJQUFBTCxJQUFBO0lBQUFNLFlBQUE7TUFBQTtRQUFBQyxLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO0lBQUE7SUFBQUUsS0FBQTtNQUFBO1FBQUFDLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtJQUFBO0lBQUFPLFNBQUE7TUFBQTtRQUFBRCxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7VUFBQVIsR0FBQTtZQUFBRixJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1FBQUE7UUFBQVYsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1VBQUFSLEdBQUE7WUFBQUYsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtRQUFBO1FBQUFWLElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtVQUFBUixHQUFBO1lBQUFGLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7UUFBQTtRQUFBVixJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7VUFBQVIsR0FBQTtZQUFBRixJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1FBQUE7UUFBQVYsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1VBQUFSLEdBQUE7WUFBQUYsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtRQUFBO1FBQUFWLElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtVQUFBUixHQUFBO1lBQUFGLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7UUFBQTtRQUFBVixJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7VUFBQVIsR0FBQTtZQUFBRixJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1FBQUE7UUFBQVYsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1VBQUFSLEdBQUE7WUFBQUYsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtRQUFBO1FBQUFWLElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtVQUFBUixHQUFBO1lBQUFGLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7UUFBQTtRQUFBVixJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7VUFBQVIsR0FBQTtZQUFBRixJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1FBQUE7UUFBQVYsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1VBQUFSLEdBQUE7WUFBQUYsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtRQUFBO1FBQUFWLElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtVQUFBUixHQUFBO1lBQUFGLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7UUFBQTtRQUFBVixJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7VUFBQVIsR0FBQTtZQUFBRixJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1FBQUE7UUFBQVYsSUFBQTtNQUFBO0lBQUE7SUFBQVcsQ0FBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7SUFBQTtJQUFBQyxDQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7SUFBQTtJQUFBQyxDQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtJQUFBO0lBQUFDLGNBQUE7TUFBQUMsSUFBQTtNQUFBQyxRQUFBO01BQUFDLEtBQUE7TUFBQUMsT0FBQTtNQUFBQyxjQUFBO01BQUFDLE9BQUE7SUFBQTtJQUFBQyxlQUFB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