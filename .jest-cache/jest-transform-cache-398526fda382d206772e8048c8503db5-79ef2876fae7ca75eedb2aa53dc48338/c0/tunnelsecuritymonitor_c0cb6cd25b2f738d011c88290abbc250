db86a7af63c1a795aee84be1515d320f
"use strict";

/* istanbul ignore next */
function cov_j673vc7wm() {
  var path = "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\tunnel-security-monitor.ts";
  var hash = "2371726b051080bf23e2dd0cf96876cc2ea50a5f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\tunnel-security-monitor.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 89
        }
      },
      "2": {
        start: {
          line: 4,
          column: 17
        },
        end: {
          line: 4,
          column: 34
        }
      },
      "3": {
        start: {
          line: 5,
          column: 17
        },
        end: {
          line: 5,
          column: 34
        }
      },
      "4": {
        start: {
          line: 10,
          column: 0
        },
        end: {
          line: 15,
          column: 60
        }
      },
      "5": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 11,
          column: 31
        }
      },
      "6": {
        start: {
          line: 12,
          column: 4
        },
        end: {
          line: 12,
          column: 37
        }
      },
      "7": {
        start: {
          line: 13,
          column: 4
        },
        end: {
          line: 13,
          column: 33
        }
      },
      "8": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 14,
          column: 41
        }
      },
      "9": {
        start: {
          line: 20,
          column: 0
        },
        end: {
          line: 29,
          column: 78
        }
      },
      "10": {
        start: {
          line: 21,
          column: 4
        },
        end: {
          line: 21,
          column: 69
        }
      },
      "11": {
        start: {
          line: 22,
          column: 4
        },
        end: {
          line: 22,
          column: 67
        }
      },
      "12": {
        start: {
          line: 23,
          column: 4
        },
        end: {
          line: 23,
          column: 73
        }
      },
      "13": {
        start: {
          line: 24,
          column: 4
        },
        end: {
          line: 24,
          column: 79
        }
      },
      "14": {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 25,
          column: 67
        }
      },
      "15": {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 26,
          column: 75
        }
      },
      "16": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 27,
          column: 61
        }
      },
      "17": {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 28,
          column: 71
        }
      },
      "18": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 46,
          column: 16
        }
      },
      "19": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 47,
          column: 29
        }
      },
      "20": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 43
        }
      },
      "21": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 51
        }
      },
      "22": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 50,
          column: 40
        }
      },
      "23": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 51,
          column: 41
        }
      },
      "24": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 52,
          column: 45
        }
      },
      "25": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 53,
          column: 34
        }
      },
      "26": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 65,
          column: 10
        }
      },
      "27": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 77,
          column: 10
        }
      },
      "28": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 79,
          column: 43
        }
      },
      "29": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 80,
          column: 35
        }
      },
      "30": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 81,
          column: 77
        }
      },
      "31": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 90,
          column: 9
        }
      },
      "32": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 88,
          column: 71
        }
      },
      "33": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 89,
          column: 19
        }
      },
      "34": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 91,
          column: 33
        }
      },
      "35": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 92,
          column: 64
        }
      },
      "36": {
        start: {
          line: 94,
          column: 28
        },
        end: {
          line: 94,
          column: 66
        }
      },
      "37": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 97,
          column: 9
        }
      },
      "38": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 58
        }
      },
      "39": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 99,
          column: 42
        }
      },
      "40": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 100,
          column: 47
        }
      },
      "41": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 109,
          column: 9
        }
      },
      "42": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 107,
          column: 67
        }
      },
      "43": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 108,
          column: 19
        }
      },
      "44": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 110,
          column: 34
        }
      },
      "45": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 111,
          column: 64
        }
      },
      "46": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 116,
          column: 9
        }
      },
      "47": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 114,
          column: 36
        }
      },
      "48": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 115,
          column: 58
        }
      },
      "49": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 117,
          column: 47
        }
      },
      "50": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 128,
          column: 9
        }
      },
      "51": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 126,
          column: 80
        }
      },
      "52": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 127,
          column: 19
        }
      },
      "53": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 129,
          column: 89
        }
      },
      "54": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 131,
          column: 51
        }
      },
      "55": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 143,
          column: 9
        }
      },
      "56": {
        start: {
          line: 134,
          column: 29
        },
        end: {
          line: 141,
          column: 51
        }
      },
      "57": {
        start: {
          line: 135,
          column: 16
        },
        end: {
          line: 140,
          column: 17
        }
      },
      "58": {
        start: {
          line: 136,
          column: 20
        },
        end: {
          line: 136,
          column: 60
        }
      },
      "59": {
        start: {
          line: 139,
          column: 20
        },
        end: {
          line: 139,
          column: 103
        }
      },
      "60": {
        start: {
          line: 142,
          column: 12
        },
        end: {
          line: 142,
          column: 65
        }
      },
      "61": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 145,
          column: 71
        }
      },
      "62": {
        start: {
          line: 145,
          column: 25
        },
        end: {
          line: 145,
          column: 63
        }
      },
      "63": {
        start: {
          line: 153,
          column: 25
        },
        end: {
          line: 153,
          column: 67
        }
      },
      "64": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 158,
          column: 9
        }
      },
      "65": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 155,
          column: 36
        }
      },
      "66": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 156,
          column: 58
        }
      },
      "67": {
        start: {
          line: 157,
          column: 12
        },
        end: {
          line: 157,
          column: 92
        }
      },
      "68": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 160,
          column: 50
        }
      },
      "69": {
        start: {
          line: 172,
          column: 22
        },
        end: {
          line: 182,
          column: 9
        }
      },
      "70": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 184,
          column: 49
        }
      },
      "71": {
        start: {
          line: 186,
          column: 8
        },
        end: {
          line: 186,
          column: 42
        }
      },
      "72": {
        start: {
          line: 188,
          column: 8
        },
        end: {
          line: 193,
          column: 11
        }
      },
      "73": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 195,
          column: 42
        }
      },
      "74": {
        start: {
          line: 197,
          column: 8
        },
        end: {
          line: 199,
          column: 9
        }
      },
      "75": {
        start: {
          line: 198,
          column: 12
        },
        end: {
          line: 198,
          column: 49
        }
      },
      "76": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 200,
          column: 21
        }
      },
      "77": {
        start: {
          line: 209,
          column: 22
        },
        end: {
          line: 209,
          column: 54
        }
      },
      "78": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 213,
          column: 9
        }
      },
      "79": {
        start: {
          line: 211,
          column: 12
        },
        end: {
          line: 211,
          column: 69
        }
      },
      "80": {
        start: {
          line: 212,
          column: 12
        },
        end: {
          line: 212,
          column: 19
        }
      },
      "81": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 214,
          column: 30
        }
      },
      "82": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 215,
          column: 38
        }
      },
      "83": {
        start: {
          line: 216,
          column: 8
        },
        end: {
          line: 216,
          column: 48
        }
      },
      "84": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 217,
          column: 46
        }
      },
      "85": {
        start: {
          line: 218,
          column: 8
        },
        end: {
          line: 218,
          column: 97
        }
      },
      "86": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 219,
          column: 85
        }
      },
      "87": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 220,
          column: 50
        }
      },
      "88": {
        start: {
          line: 231,
          column: 21
        },
        end: {
          line: 231,
          column: 61
        }
      },
      "89": {
        start: {
          line: 233,
          column: 8
        },
        end: {
          line: 235,
          column: 9
        }
      },
      "90": {
        start: {
          line: 234,
          column: 12
        },
        end: {
          line: 234,
          column: 81
        }
      },
      "91": {
        start: {
          line: 234,
          column: 44
        },
        end: {
          line: 234,
          column: 79
        }
      },
      "92": {
        start: {
          line: 236,
          column: 8
        },
        end: {
          line: 238,
          column: 9
        }
      },
      "93": {
        start: {
          line: 237,
          column: 12
        },
        end: {
          line: 237,
          column: 79
        }
      },
      "94": {
        start: {
          line: 237,
          column: 44
        },
        end: {
          line: 237,
          column: 77
        }
      },
      "95": {
        start: {
          line: 240,
          column: 8
        },
        end: {
          line: 240,
          column: 77
        }
      },
      "96": {
        start: {
          line: 240,
          column: 30
        },
        end: {
          line: 240,
          column: 75
        }
      },
      "97": {
        start: {
          line: 242,
          column: 8
        },
        end: {
          line: 244,
          column: 9
        }
      },
      "98": {
        start: {
          line: 243,
          column: 12
        },
        end: {
          line: 243,
          column: 44
        }
      },
      "99": {
        start: {
          line: 245,
          column: 8
        },
        end: {
          line: 245,
          column: 22
        }
      },
      "100": {
        start: {
          line: 255,
          column: 25
        },
        end: {
          line: 255,
          column: 69
        }
      },
      "101": {
        start: {
          line: 256,
          column: 8
        },
        end: {
          line: 256,
          column: 62
        }
      },
      "102": {
        start: {
          line: 264,
          column: 8
        },
        end: {
          line: 264,
          column: 43
        }
      },
      "103": {
        start: {
          line: 272,
          column: 27
        },
        end: {
          line: 272,
          column: 73
        }
      },
      "104": {
        start: {
          line: 273,
          column: 8
        },
        end: {
          line: 276,
          column: 9
        }
      },
      "105": {
        start: {
          line: 274,
          column: 12
        },
        end: {
          line: 274,
          column: 88
        }
      },
      "106": {
        start: {
          line: 275,
          column: 12
        },
        end: {
          line: 275,
          column: 19
        }
      },
      "107": {
        start: {
          line: 277,
          column: 8
        },
        end: {
          line: 298,
          column: 9
        }
      },
      "108": {
        start: {
          line: 278,
          column: 12
        },
        end: {
          line: 278,
          column: 90
        }
      },
      "109": {
        start: {
          line: 280,
          column: 12
        },
        end: {
          line: 280,
          column: 60
        }
      },
      "110": {
        start: {
          line: 282,
          column: 12
        },
        end: {
          line: 284,
          column: 13
        }
      },
      "111": {
        start: {
          line: 283,
          column: 16
        },
        end: {
          line: 283,
          column: 56
        }
      },
      "112": {
        start: {
          line: 286,
          column: 12
        },
        end: {
          line: 288,
          column: 13
        }
      },
      "113": {
        start: {
          line: 287,
          column: 16
        },
        end: {
          line: 287,
          column: 56
        }
      },
      "114": {
        start: {
          line: 290,
          column: 12
        },
        end: {
          line: 292,
          column: 13
        }
      },
      "115": {
        start: {
          line: 291,
          column: 16
        },
        end: {
          line: 291,
          column: 58
        }
      },
      "116": {
        start: {
          line: 293,
          column: 12
        },
        end: {
          line: 293,
          column: 63
        }
      },
      "117": {
        start: {
          line: 296,
          column: 12
        },
        end: {
          line: 296,
          column: 92
        }
      },
      "118": {
        start: {
          line: 297,
          column: 12
        },
        end: {
          line: 297,
          column: 255
        }
      },
      "119": {
        start: {
          line: 305,
          column: 8
        },
        end: {
          line: 309,
          column: 11
        }
      },
      "120": {
        start: {
          line: 306,
          column: 12
        },
        end: {
          line: 308,
          column: 13
        }
      },
      "121": {
        start: {
          line: 307,
          column: 16
        },
        end: {
          line: 307,
          column: 62
        }
      },
      "122": {
        start: {
          line: 311,
          column: 8
        },
        end: {
          line: 313,
          column: 11
        }
      },
      "123": {
        start: {
          line: 312,
          column: 12
        },
        end: {
          line: 312,
          column: 57
        }
      },
      "124": {
        start: {
          line: 315,
          column: 8
        },
        end: {
          line: 317,
          column: 11
        }
      },
      "125": {
        start: {
          line: 316,
          column: 12
        },
        end: {
          line: 316,
          column: 179
        }
      },
      "126": {
        start: {
          line: 323,
          column: 8
        },
        end: {
          line: 359,
          column: 10
        }
      },
      "127": {
        start: {
          line: 367,
          column: 27
        },
        end: {
          line: 367,
          column: 73
        }
      },
      "128": {
        start: {
          line: 368,
          column: 8
        },
        end: {
          line: 369,
          column: 19
        }
      },
      "129": {
        start: {
          line: 369,
          column: 12
        },
        end: {
          line: 369,
          column: 19
        }
      },
      "130": {
        start: {
          line: 370,
          column: 8
        },
        end: {
          line: 404,
          column: 9
        }
      },
      "131": {
        start: {
          line: 372,
          column: 29
        },
        end: {
          line: 383,
          column: 13
        }
      },
      "132": {
        start: {
          line: 385,
          column: 12
        },
        end: {
          line: 385,
          column: 82
        }
      },
      "133": {
        start: {
          line: 387,
          column: 12
        },
        end: {
          line: 389,
          column: 13
        }
      },
      "134": {
        start: {
          line: 388,
          column: 16
        },
        end: {
          line: 388,
          column: 228
        }
      },
      "135": {
        start: {
          line: 391,
          column: 36
        },
        end: {
          line: 391,
          column: 80
        }
      },
      "136": {
        start: {
          line: 392,
          column: 12
        },
        end: {
          line: 392,
          column: 43
        }
      },
      "137": {
        start: {
          line: 394,
          column: 35
        },
        end: {
          line: 394,
          column: 39
        }
      },
      "138": {
        start: {
          line: 395,
          column: 12
        },
        end: {
          line: 397,
          column: 13
        }
      },
      "139": {
        start: {
          line: 396,
          column: 16
        },
        end: {
          line: 396,
          column: 83
        }
      },
      "140": {
        start: {
          line: 398,
          column: 12
        },
        end: {
          line: 398,
          column: 68
        }
      },
      "141": {
        start: {
          line: 400,
          column: 12
        },
        end: {
          line: 400,
          column: 48
        }
      },
      "142": {
        start: {
          line: 403,
          column: 12
        },
        end: {
          line: 403,
          column: 95
        }
      },
      "143": {
        start: {
          line: 412,
          column: 8
        },
        end: {
          line: 424,
          column: 9
        }
      },
      "144": {
        start: {
          line: 414,
          column: 12
        },
        end: {
          line: 416,
          column: 13
        }
      },
      "145": {
        start: {
          line: 415,
          column: 16
        },
        end: {
          line: 415,
          column: 189
        }
      },
      "146": {
        start: {
          line: 418,
          column: 12
        },
        end: {
          line: 420,
          column: 13
        }
      },
      "147": {
        start: {
          line: 419,
          column: 16
        },
        end: {
          line: 419,
          column: 204
        }
      },
      "148": {
        start: {
          line: 423,
          column: 12
        },
        end: {
          line: 423,
          column: 95
        }
      },
      "149": {
        start: {
          line: 432,
          column: 8
        },
        end: {
          line: 449,
          column: 9
        }
      },
      "150": {
        start: {
          line: 434,
          column: 31
        },
        end: {
          line: 434,
          column: 70
        }
      },
      "151": {
        start: {
          line: 435,
          column: 12
        },
        end: {
          line: 445,
          column: 13
        }
      },
      "152": {
        start: {
          line: 436,
          column: 16
        },
        end: {
          line: 444,
          column: 17
        }
      },
      "153": {
        start: {
          line: 437,
          column: 20
        },
        end: {
          line: 443,
          column: 21
        }
      },
      "154": {
        start: {
          line: 438,
          column: 24
        },
        end: {
          line: 442,
          column: 27
        }
      },
      "155": {
        start: {
          line: 448,
          column: 12
        },
        end: {
          line: 448,
          column: 99
        }
      },
      "156": {
        start: {
          line: 457,
          column: 8
        },
        end: {
          line: 478,
          column: 9
        }
      },
      "157": {
        start: {
          line: 459,
          column: 32
        },
        end: {
          line: 459,
          column: 78
        }
      },
      "158": {
        start: {
          line: 461,
          column: 36
        },
        end: {
          line: 461,
          column: 81
        }
      },
      "159": {
        start: {
          line: 462,
          column: 37
        },
        end: {
          line: 462,
          column: 80
        }
      },
      "160": {
        start: {
          line: 463,
          column: 12
        },
        end: {
          line: 474,
          column: 13
        }
      },
      "161": {
        start: {
          line: 465,
          column: 39
        },
        end: {
          line: 465,
          column: 116
        }
      },
      "162": {
        start: {
          line: 466,
          column: 16
        },
        end: {
          line: 473,
          column: 17
        }
      },
      "163": {
        start: {
          line: 467,
          column: 20
        },
        end: {
          line: 471,
          column: 23
        }
      },
      "164": {
        start: {
          line: 472,
          column: 20
        },
        end: {
          line: 472,
          column: 63
        }
      },
      "165": {
        start: {
          line: 477,
          column: 12
        },
        end: {
          line: 477,
          column: 100
        }
      },
      "166": {
        start: {
          line: 487,
          column: 25
        },
        end: {
          line: 487,
          column: 27
        }
      },
      "167": {
        start: {
          line: 489,
          column: 8
        },
        end: {
          line: 491,
          column: 9
        }
      },
      "168": {
        start: {
          line: 490,
          column: 12
        },
        end: {
          line: 490,
          column: 49
        }
      },
      "169": {
        start: {
          line: 493,
          column: 28
        },
        end: {
          line: 493,
          column: 81
        }
      },
      "170": {
        start: {
          line: 494,
          column: 8
        },
        end: {
          line: 496,
          column: 9
        }
      },
      "171": {
        start: {
          line: 495,
          column: 12
        },
        end: {
          line: 495,
          column: 50
        }
      },
      "172": {
        start: {
          line: 498,
          column: 8
        },
        end: {
          line: 500,
          column: 9
        }
      },
      "173": {
        start: {
          line: 499,
          column: 12
        },
        end: {
          line: 499,
          column: 57
        }
      },
      "174": {
        start: {
          line: 501,
          column: 8
        },
        end: {
          line: 501,
          column: 24
        }
      },
      "175": {
        start: {
          line: 510,
          column: 27
        },
        end: {
          line: 510,
          column: 73
        }
      },
      "176": {
        start: {
          line: 511,
          column: 8
        },
        end: {
          line: 512,
          column: 22
        }
      },
      "177": {
        start: {
          line: 512,
          column: 12
        },
        end: {
          line: 512,
          column: 22
        }
      },
      "178": {
        start: {
          line: 513,
          column: 21
        },
        end: {
          line: 518,
          column: 10
        }
      },
      "179": {
        start: {
          line: 519,
          column: 8
        },
        end: {
          line: 519,
          column: 77
        }
      },
      "180": {
        start: {
          line: 529,
          column: 8
        },
        end: {
          line: 530,
          column: 21
        }
      },
      "181": {
        start: {
          line: 530,
          column: 12
        },
        end: {
          line: 530,
          column: 21
        }
      },
      "182": {
        start: {
          line: 531,
          column: 26
        },
        end: {
          line: 531,
          column: 27
        }
      },
      "183": {
        start: {
          line: 532,
          column: 8
        },
        end: {
          line: 536,
          column: 9
        }
      },
      "184": {
        start: {
          line: 532,
          column: 21
        },
        end: {
          line: 532,
          column: 22
        }
      },
      "185": {
        start: {
          line: 533,
          column: 12
        },
        end: {
          line: 535,
          column: 13
        }
      },
      "186": {
        start: {
          line: 534,
          column: 16
        },
        end: {
          line: 534,
          column: 30
        }
      },
      "187": {
        start: {
          line: 537,
          column: 8
        },
        end: {
          line: 537,
          column: 42
        }
      },
      "188": {
        start: {
          line: 547,
          column: 8
        },
        end: {
          line: 554,
          column: 10
        }
      },
      "189": {
        start: {
          line: 562,
          column: 8
        },
        end: {
          line: 590,
          column: 9
        }
      },
      "190": {
        start: {
          line: 563,
          column: 36
        },
        end: {
          line: 563,
          column: 38
        }
      },
      "191": {
        start: {
          line: 564,
          column: 12
        },
        end: {
          line: 583,
          column: 13
        }
      },
      "192": {
        start: {
          line: 567,
          column: 20
        },
        end: {
          line: 567,
          column: 82
        }
      },
      "193": {
        start: {
          line: 568,
          column: 20
        },
        end: {
          line: 568,
          column: 66
        }
      },
      "194": {
        start: {
          line: 569,
          column: 20
        },
        end: {
          line: 569,
          column: 26
        }
      },
      "195": {
        start: {
          line: 572,
          column: 20
        },
        end: {
          line: 572,
          column: 72
        }
      },
      "196": {
        start: {
          line: 573,
          column: 20
        },
        end: {
          line: 573,
          column: 59
        }
      },
      "197": {
        start: {
          line: 574,
          column: 20
        },
        end: {
          line: 574,
          column: 26
        }
      },
      "198": {
        start: {
          line: 577,
          column: 20
        },
        end: {
          line: 577,
          column: 65
        }
      },
      "199": {
        start: {
          line: 578,
          column: 20
        },
        end: {
          line: 578,
          column: 26
        }
      },
      "200": {
        start: {
          line: 581,
          column: 20
        },
        end: {
          line: 581,
          column: 64
        }
      },
      "201": {
        start: {
          line: 582,
          column: 20
        },
        end: {
          line: 582,
          column: 26
        }
      },
      "202": {
        start: {
          line: 585,
          column: 12
        },
        end: {
          line: 585,
          column: 52
        }
      },
      "203": {
        start: {
          line: 586,
          column: 12
        },
        end: {
          line: 586,
          column: 104
        }
      },
      "204": {
        start: {
          line: 589,
          column: 12
        },
        end: {
          line: 589,
          column: 88
        }
      },
      "205": {
        start: {
          line: 597,
          column: 8
        },
        end: {
          line: 602,
          column: 26
        }
      },
      "206": {
        start: {
          line: 598,
          column: 32
        },
        end: {
          line: 598,
          column: 70
        }
      },
      "207": {
        start: {
          line: 599,
          column: 12
        },
        end: {
          line: 601,
          column: 13
        }
      },
      "208": {
        start: {
          line: 600,
          column: 16
        },
        end: {
          line: 600,
          column: 56
        }
      },
      "209": {
        start: {
          line: 610,
          column: 8
        },
        end: {
          line: 610,
          column: 43
        }
      },
      "210": {
        start: {
          line: 611,
          column: 8
        },
        end: {
          line: 611,
          column: 45
        }
      },
      "211": {
        start: {
          line: 613,
          column: 26
        },
        end: {
          line: 613,
          column: 80
        }
      },
      "212": {
        start: {
          line: 614,
          column: 8
        },
        end: {
          line: 614,
          column: 73
        }
      },
      "213": {
        start: {
          line: 616,
          column: 28
        },
        end: {
          line: 616,
          column: 96
        }
      },
      "214": {
        start: {
          line: 617,
          column: 8
        },
        end: {
          line: 617,
          column: 89
        }
      },
      "215": {
        start: {
          line: 619,
          column: 8
        },
        end: {
          line: 619,
          column: 44
        }
      },
      "216": {
        start: {
          line: 628,
          column: 28
        },
        end: {
          line: 628,
          column: 76
        }
      },
      "217": {
        start: {
          line: 629,
          column: 27
        },
        end: {
          line: 629,
          column: 82
        }
      },
      "218": {
        start: {
          line: 629,
          column: 58
        },
        end: {
          line: 629,
          column: 78
        }
      },
      "219": {
        start: {
          line: 630,
          column: 8
        },
        end: {
          line: 630,
          column: 112
        }
      },
      "220": {
        start: {
          line: 636,
          column: 20
        },
        end: {
          line: 636,
          column: 23
        }
      },
      "221": {
        start: {
          line: 638,
          column: 8
        },
        end: {
          line: 638,
          column: 57
        }
      },
      "222": {
        start: {
          line: 640,
          column: 8
        },
        end: {
          line: 642,
          column: 9
        }
      },
      "223": {
        start: {
          line: 641,
          column: 12
        },
        end: {
          line: 641,
          column: 75
        }
      },
      "224": {
        start: {
          line: 644,
          column: 8
        },
        end: {
          line: 644,
          column: 62
        }
      },
      "225": {
        start: {
          line: 646,
          column: 31
        },
        end: {
          line: 646,
          column: 102
        }
      },
      "226": {
        start: {
          line: 647,
          column: 8
        },
        end: {
          line: 647,
          column: 37
        }
      },
      "227": {
        start: {
          line: 648,
          column: 8
        },
        end: {
          line: 648,
          column: 85
        }
      },
      "228": {
        start: {
          line: 656,
          column: 8
        },
        end: {
          line: 656,
          column: 78
        }
      },
      "229": {
        start: {
          line: 662,
          column: 8
        },
        end: {
          line: 662,
          column: 30
        }
      },
      "230": {
        start: {
          line: 664,
          column: 27
        },
        end: {
          line: 664,
          column: 72
        }
      },
      "231": {
        start: {
          line: 665,
          column: 8
        },
        end: {
          line: 669,
          column: 9
        }
      },
      "232": {
        start: {
          line: 666,
          column: 12
        },
        end: {
          line: 668,
          column: 13
        }
      },
      "233": {
        start: {
          line: 667,
          column: 16
        },
        end: {
          line: 667,
          column: 52
        }
      },
      "234": {
        start: {
          line: 670,
          column: 8
        },
        end: {
          line: 670,
          column: 37
        }
      },
      "235": {
        start: {
          line: 671,
          column: 8
        },
        end: {
          line: 671,
          column: 70
        }
      },
      "236": {
        start: {
          line: 674,
          column: 0
        },
        end: {
          line: 674,
          column: 54
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 10,
            column: 1
          },
          end: {
            line: 10,
            column: 2
          }
        },
        loc: {
          start: {
            line: 10,
            column: 24
          },
          end: {
            line: 15,
            column: 1
          }
        },
        line: 10
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 20,
            column: 1
          },
          end: {
            line: 20,
            column: 2
          }
        },
        loc: {
          start: {
            line: 20,
            column: 30
          },
          end: {
            line: 29,
            column: 1
          }
        },
        line: 20
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 45,
            column: 4
          },
          end: {
            line: 45,
            column: 5
          }
        },
        loc: {
          start: {
            line: 45,
            column: 66
          },
          end: {
            line: 82,
            column: 5
          }
        },
        line: 45
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 86,
            column: 4
          },
          end: {
            line: 86,
            column: 5
          }
        },
        loc: {
          start: {
            line: 86,
            column: 22
          },
          end: {
            line: 101,
            column: 5
          }
        },
        line: 86
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 105,
            column: 4
          },
          end: {
            line: 105,
            column: 5
          }
        },
        loc: {
          start: {
            line: 105,
            column: 21
          },
          end: {
            line: 118,
            column: 5
          }
        },
        line: 105
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 124,
            column: 4
          },
          end: {
            line: 124,
            column: 5
          }
        },
        loc: {
          start: {
            line: 124,
            column: 44
          },
          end: {
            line: 146,
            column: 5
          }
        },
        line: 124
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 134,
            column: 41
          },
          end: {
            line: 134,
            column: 42
          }
        },
        loc: {
          start: {
            line: 134,
            column: 53
          },
          end: {
            line: 141,
            column: 13
          }
        },
        line: 134
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 145,
            column: 19
          },
          end: {
            line: 145,
            column: 20
          }
        },
        loc: {
          start: {
            line: 145,
            column: 25
          },
          end: {
            line: 145,
            column: 63
          }
        },
        line: 145
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 152,
            column: 4
          },
          end: {
            line: 152,
            column: 5
          }
        },
        loc: {
          start: {
            line: 152,
            column: 43
          },
          end: {
            line: 161,
            column: 5
          }
        },
        line: 152
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 171,
            column: 4
          },
          end: {
            line: 171,
            column: 5
          }
        },
        loc: {
          start: {
            line: 171,
            column: 85
          },
          end: {
            line: 201,
            column: 5
          }
        },
        line: 171
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 208,
            column: 4
          },
          end: {
            line: 208,
            column: 5
          }
        },
        loc: {
          start: {
            line: 208,
            column: 51
          },
          end: {
            line: 221,
            column: 5
          }
        },
        line: 208
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 230,
            column: 4
          },
          end: {
            line: 230,
            column: 5
          }
        },
        loc: {
          start: {
            line: 230,
            column: 56
          },
          end: {
            line: 246,
            column: 5
          }
        },
        line: 230
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 234,
            column: 35
          },
          end: {
            line: 234,
            column: 36
          }
        },
        loc: {
          start: {
            line: 234,
            column: 44
          },
          end: {
            line: 234,
            column: 79
          }
        },
        line: 234
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 237,
            column: 35
          },
          end: {
            line: 237,
            column: 36
          }
        },
        loc: {
          start: {
            line: 237,
            column: 44
          },
          end: {
            line: 237,
            column: 77
          }
        },
        line: 237
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 240,
            column: 20
          },
          end: {
            line: 240,
            column: 21
          }
        },
        loc: {
          start: {
            line: 240,
            column: 30
          },
          end: {
            line: 240,
            column: 75
          }
        },
        line: 240
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 254,
            column: 4
          },
          end: {
            line: 254,
            column: 5
          }
        },
        loc: {
          start: {
            line: 254,
            column: 44
          },
          end: {
            line: 257,
            column: 5
          }
        },
        line: 254
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 263,
            column: 4
          },
          end: {
            line: 263,
            column: 5
          }
        },
        loc: {
          start: {
            line: 263,
            column: 25
          },
          end: {
            line: 265,
            column: 5
          }
        },
        line: 263
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 271,
            column: 4
          },
          end: {
            line: 271,
            column: 5
          }
        },
        loc: {
          start: {
            line: 271,
            column: 44
          },
          end: {
            line: 299,
            column: 5
          }
        },
        line: 271
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 303,
            column: 4
          },
          end: {
            line: 303,
            column: 5
          }
        },
        loc: {
          start: {
            line: 303,
            column: 26
          },
          end: {
            line: 318,
            column: 5
          }
        },
        line: 303
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 305,
            column: 49
          },
          end: {
            line: 305,
            column: 50
          }
        },
        loc: {
          start: {
            line: 305,
            column: 65
          },
          end: {
            line: 309,
            column: 9
          }
        },
        line: 305
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 311,
            column: 52
          },
          end: {
            line: 311,
            column: 53
          }
        },
        loc: {
          start: {
            line: 311,
            column: 68
          },
          end: {
            line: 313,
            column: 9
          }
        },
        line: 311
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 315,
            column: 45
          },
          end: {
            line: 315,
            column: 46
          }
        },
        loc: {
          start: {
            line: 315,
            column: 68
          },
          end: {
            line: 317,
            column: 9
          }
        },
        line: 315
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 322,
            column: 4
          },
          end: {
            line: 322,
            column: 5
          }
        },
        loc: {
          start: {
            line: 322,
            column: 34
          },
          end: {
            line: 360,
            column: 5
          }
        },
        line: 322
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 366,
            column: 4
          },
          end: {
            line: 366,
            column: 5
          }
        },
        loc: {
          start: {
            line: 366,
            column: 39
          },
          end: {
            line: 405,
            column: 5
          }
        },
        line: 366
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 411,
            column: 4
          },
          end: {
            line: 411,
            column: 5
          }
        },
        loc: {
          start: {
            line: 411,
            column: 47
          },
          end: {
            line: 425,
            column: 5
          }
        },
        line: 411
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 431,
            column: 4
          },
          end: {
            line: 431,
            column: 5
          }
        },
        loc: {
          start: {
            line: 431,
            column: 39
          },
          end: {
            line: 450,
            column: 5
          }
        },
        line: 431
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 456,
            column: 4
          },
          end: {
            line: 456,
            column: 5
          }
        },
        loc: {
          start: {
            line: 456,
            column: 41
          },
          end: {
            line: 479,
            column: 5
          }
        },
        line: 456
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 486,
            column: 4
          },
          end: {
            line: 486,
            column: 5
          }
        },
        loc: {
          start: {
            line: 486,
            column: 39
          },
          end: {
            line: 502,
            column: 5
          }
        },
        line: 486
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 509,
            column: 4
          },
          end: {
            line: 509,
            column: 5
          }
        },
        loc: {
          start: {
            line: 509,
            column: 45
          },
          end: {
            line: 520,
            column: 5
          }
        },
        line: 509
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 528,
            column: 4
          },
          end: {
            line: 528,
            column: 5
          }
        },
        loc: {
          start: {
            line: 528,
            column: 42
          },
          end: {
            line: 538,
            column: 5
          }
        },
        line: 528
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 545,
            column: 4
          },
          end: {
            line: 545,
            column: 5
          }
        },
        loc: {
          start: {
            line: 545,
            column: 38
          },
          end: {
            line: 555,
            column: 5
          }
        },
        line: 545
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 561,
            column: 4
          },
          end: {
            line: 561,
            column: 5
          }
        },
        loc: {
          start: {
            line: 561,
            column: 42
          },
          end: {
            line: 591,
            column: 5
          }
        },
        line: 561
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 595,
            column: 4
          },
          end: {
            line: 595,
            column: 5
          }
        },
        loc: {
          start: {
            line: 595,
            column: 33
          },
          end: {
            line: 603,
            column: 5
          }
        },
        line: 595
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 597,
            column: 20
          },
          end: {
            line: 597,
            column: 21
          }
        },
        loc: {
          start: {
            line: 597,
            column: 26
          },
          end: {
            line: 602,
            column: 9
          }
        },
        line: 597
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 609,
            column: 4
          },
          end: {
            line: 609,
            column: 5
          }
        },
        loc: {
          start: {
            line: 609,
            column: 33
          },
          end: {
            line: 620,
            column: 5
          }
        },
        line: 609
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 626,
            column: 4
          },
          end: {
            line: 626,
            column: 5
          }
        },
        loc: {
          start: {
            line: 626,
            column: 35
          },
          end: {
            line: 631,
            column: 5
          }
        },
        line: 626
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 629,
            column: 46
          },
          end: {
            line: 629,
            column: 47
          }
        },
        loc: {
          start: {
            line: 629,
            column: 58
          },
          end: {
            line: 629,
            column: 78
          }
        },
        line: 629
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 635,
            column: 4
          },
          end: {
            line: 635,
            column: 5
          }
        },
        loc: {
          start: {
            line: 635,
            column: 35
          },
          end: {
            line: 649,
            column: 5
          }
        },
        line: 635
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 655,
            column: 4
          },
          end: {
            line: 655,
            column: 5
          }
        },
        loc: {
          start: {
            line: 655,
            column: 22
          },
          end: {
            line: 657,
            column: 5
          }
        },
        line: 655
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 661,
            column: 4
          },
          end: {
            line: 661,
            column: 5
          }
        },
        loc: {
          start: {
            line: 661,
            column: 14
          },
          end: {
            line: 672,
            column: 5
          }
        },
        line: 661
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 15,
            column: 3
          },
          end: {
            line: 15,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 15,
            column: 3
          },
          end: {
            line: 15,
            column: 14
          }
        }, {
          start: {
            line: 15,
            column: 19
          },
          end: {
            line: 15,
            column: 57
          }
        }],
        line: 15
      },
      "1": {
        loc: {
          start: {
            line: 29,
            column: 3
          },
          end: {
            line: 29,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 29,
            column: 3
          },
          end: {
            line: 29,
            column: 20
          }
        }, {
          start: {
            line: 29,
            column: 25
          },
          end: {
            line: 29,
            column: 75
          }
        }],
        line: 29
      },
      "2": {
        loc: {
          start: {
            line: 87,
            column: 8
          },
          end: {
            line: 90,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 87,
            column: 8
          },
          end: {
            line: 90,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 87
      },
      "3": {
        loc: {
          start: {
            line: 106,
            column: 8
          },
          end: {
            line: 109,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 106,
            column: 8
          },
          end: {
            line: 109,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 106
      },
      "4": {
        loc: {
          start: {
            line: 125,
            column: 8
          },
          end: {
            line: 128,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 125,
            column: 8
          },
          end: {
            line: 128,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 125
      },
      "5": {
        loc: {
          start: {
            line: 133,
            column: 8
          },
          end: {
            line: 143,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 133,
            column: 8
          },
          end: {
            line: 143,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 133
      },
      "6": {
        loc: {
          start: {
            line: 154,
            column: 8
          },
          end: {
            line: 158,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 154,
            column: 8
          },
          end: {
            line: 158,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 154
      },
      "7": {
        loc: {
          start: {
            line: 171,
            column: 70
          },
          end: {
            line: 171,
            column: 83
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 171,
            column: 81
          },
          end: {
            line: 171,
            column: 83
          }
        }],
        line: 171
      },
      "8": {
        loc: {
          start: {
            line: 197,
            column: 8
          },
          end: {
            line: 199,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 197,
            column: 8
          },
          end: {
            line: 199,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 197
      },
      "9": {
        loc: {
          start: {
            line: 210,
            column: 8
          },
          end: {
            line: 213,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 210,
            column: 8
          },
          end: {
            line: 213,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 210
      },
      "10": {
        loc: {
          start: {
            line: 233,
            column: 8
          },
          end: {
            line: 235,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 233,
            column: 8
          },
          end: {
            line: 235,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 233
      },
      "11": {
        loc: {
          start: {
            line: 236,
            column: 8
          },
          end: {
            line: 238,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 236,
            column: 8
          },
          end: {
            line: 238,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 236
      },
      "12": {
        loc: {
          start: {
            line: 242,
            column: 8
          },
          end: {
            line: 244,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 242,
            column: 8
          },
          end: {
            line: 244,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 242
      },
      "13": {
        loc: {
          start: {
            line: 255,
            column: 25
          },
          end: {
            line: 255,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 255,
            column: 25
          },
          end: {
            line: 255,
            column: 63
          }
        }, {
          start: {
            line: 255,
            column: 67
          },
          end: {
            line: 255,
            column: 69
          }
        }],
        line: 255
      },
      "14": {
        loc: {
          start: {
            line: 256,
            column: 15
          },
          end: {
            line: 256,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 256,
            column: 23
          },
          end: {
            line: 256,
            column: 45
          }
        }, {
          start: {
            line: 256,
            column: 48
          },
          end: {
            line: 256,
            column: 61
          }
        }],
        line: 256
      },
      "15": {
        loc: {
          start: {
            line: 273,
            column: 8
          },
          end: {
            line: 276,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 273,
            column: 8
          },
          end: {
            line: 276,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 273
      },
      "16": {
        loc: {
          start: {
            line: 282,
            column: 12
          },
          end: {
            line: 284,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 282,
            column: 12
          },
          end: {
            line: 284,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 282
      },
      "17": {
        loc: {
          start: {
            line: 286,
            column: 12
          },
          end: {
            line: 288,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 286,
            column: 12
          },
          end: {
            line: 288,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 286
      },
      "18": {
        loc: {
          start: {
            line: 290,
            column: 12
          },
          end: {
            line: 292,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 290,
            column: 12
          },
          end: {
            line: 292,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 290
      },
      "19": {
        loc: {
          start: {
            line: 297,
            column: 132
          },
          end: {
            line: 297,
            column: 186
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 297,
            column: 157
          },
          end: {
            line: 297,
            column: 170
          }
        }, {
          start: {
            line: 297,
            column: 173
          },
          end: {
            line: 297,
            column: 186
          }
        }],
        line: 297
      },
      "20": {
        loc: {
          start: {
            line: 297,
            column: 199
          },
          end: {
            line: 297,
            column: 251
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 297,
            column: 224
          },
          end: {
            line: 297,
            column: 235
          }
        }, {
          start: {
            line: 297,
            column: 238
          },
          end: {
            line: 297,
            column: 251
          }
        }],
        line: 297
      },
      "21": {
        loc: {
          start: {
            line: 306,
            column: 12
          },
          end: {
            line: 308,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 306,
            column: 12
          },
          end: {
            line: 308,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 306
      },
      "22": {
        loc: {
          start: {
            line: 368,
            column: 8
          },
          end: {
            line: 369,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 368,
            column: 8
          },
          end: {
            line: 369,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 368
      },
      "23": {
        loc: {
          start: {
            line: 387,
            column: 12
          },
          end: {
            line: 389,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 387,
            column: 12
          },
          end: {
            line: 389,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 387
      },
      "24": {
        loc: {
          start: {
            line: 388,
            column: 90
          },
          end: {
            line: 388,
            column: 156
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 388,
            column: 119
          },
          end: {
            line: 388,
            column: 135
          }
        }, {
          start: {
            line: 388,
            column: 138
          },
          end: {
            line: 388,
            column: 156
          }
        }],
        line: 388
      },
      "25": {
        loc: {
          start: {
            line: 391,
            column: 36
          },
          end: {
            line: 391,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 391,
            column: 36
          },
          end: {
            line: 391,
            column: 74
          }
        }, {
          start: {
            line: 391,
            column: 78
          },
          end: {
            line: 391,
            column: 80
          }
        }],
        line: 391
      },
      "26": {
        loc: {
          start: {
            line: 395,
            column: 12
          },
          end: {
            line: 397,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 395,
            column: 12
          },
          end: {
            line: 397,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 395
      },
      "27": {
        loc: {
          start: {
            line: 414,
            column: 12
          },
          end: {
            line: 416,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 414,
            column: 12
          },
          end: {
            line: 416,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 414
      },
      "28": {
        loc: {
          start: {
            line: 414,
            column: 16
          },
          end: {
            line: 414,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 414,
            column: 16
          },
          end: {
            line: 414,
            column: 34
          }
        }, {
          start: {
            line: 414,
            column: 38
          },
          end: {
            line: 414,
            column: 63
          }
        }],
        line: 414
      },
      "29": {
        loc: {
          start: {
            line: 418,
            column: 12
          },
          end: {
            line: 420,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 418,
            column: 12
          },
          end: {
            line: 420,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 418
      },
      "30": {
        loc: {
          start: {
            line: 418,
            column: 16
          },
          end: {
            line: 418,
            column: 94
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 418,
            column: 16
          },
          end: {
            line: 418,
            column: 50
          }
        }, {
          start: {
            line: 418,
            column: 54
          },
          end: {
            line: 418,
            column: 68
          }
        }, {
          start: {
            line: 418,
            column: 72
          },
          end: {
            line: 418,
            column: 94
          }
        }],
        line: 418
      },
      "31": {
        loc: {
          start: {
            line: 437,
            column: 20
          },
          end: {
            line: 443,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 437,
            column: 20
          },
          end: {
            line: 443,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 437
      },
      "32": {
        loc: {
          start: {
            line: 461,
            column: 36
          },
          end: {
            line: 461,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 461,
            column: 36
          },
          end: {
            line: 461,
            column: 75
          }
        }, {
          start: {
            line: 461,
            column: 79
          },
          end: {
            line: 461,
            column: 81
          }
        }],
        line: 461
      },
      "33": {
        loc: {
          start: {
            line: 463,
            column: 12
          },
          end: {
            line: 474,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 463,
            column: 12
          },
          end: {
            line: 474,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 463
      },
      "34": {
        loc: {
          start: {
            line: 463,
            column: 16
          },
          end: {
            line: 463,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 463,
            column: 16
          },
          end: {
            line: 463,
            column: 32
          }
        }, {
          start: {
            line: 463,
            column: 36
          },
          end: {
            line: 463,
            column: 86
          }
        }],
        line: 463
      },
      "35": {
        loc: {
          start: {
            line: 466,
            column: 16
          },
          end: {
            line: 473,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 466,
            column: 16
          },
          end: {
            line: 473,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 466
      },
      "36": {
        loc: {
          start: {
            line: 489,
            column: 8
          },
          end: {
            line: 491,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 489,
            column: 8
          },
          end: {
            line: 491,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 489
      },
      "37": {
        loc: {
          start: {
            line: 489,
            column: 12
          },
          end: {
            line: 489,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 489,
            column: 12
          },
          end: {
            line: 489,
            column: 37
          }
        }, {
          start: {
            line: 489,
            column: 41
          },
          end: {
            line: 489,
            column: 67
          }
        }],
        line: 489
      },
      "38": {
        loc: {
          start: {
            line: 494,
            column: 8
          },
          end: {
            line: 496,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 494,
            column: 8
          },
          end: {
            line: 496,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 494
      },
      "39": {
        loc: {
          start: {
            line: 494,
            column: 12
          },
          end: {
            line: 494,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 494,
            column: 12
          },
          end: {
            line: 494,
            column: 28
          }
        }, {
          start: {
            line: 494,
            column: 32
          },
          end: {
            line: 494,
            column: 49
          }
        }],
        line: 494
      },
      "40": {
        loc: {
          start: {
            line: 498,
            column: 8
          },
          end: {
            line: 500,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 498,
            column: 8
          },
          end: {
            line: 500,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 498
      },
      "41": {
        loc: {
          start: {
            line: 511,
            column: 8
          },
          end: {
            line: 512,
            column: 22
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 511,
            column: 8
          },
          end: {
            line: 512,
            column: 22
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 511
      },
      "42": {
        loc: {
          start: {
            line: 529,
            column: 8
          },
          end: {
            line: 530,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 529,
            column: 8
          },
          end: {
            line: 530,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 529
      },
      "43": {
        loc: {
          start: {
            line: 533,
            column: 12
          },
          end: {
            line: 535,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 533,
            column: 12
          },
          end: {
            line: 535,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 533
      },
      "44": {
        loc: {
          start: {
            line: 552,
            column: 16
          },
          end: {
            line: 552,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 552,
            column: 38
          },
          end: {
            line: 552,
            column: 82
          }
        }, {
          start: {
            line: 552,
            column: 85
          },
          end: {
            line: 552,
            column: 87
          }
        }],
        line: 552
      },
      "45": {
        loc: {
          start: {
            line: 553,
            column: 16
          },
          end: {
            line: 553,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 553,
            column: 38
          },
          end: {
            line: 553,
            column: 79
          }
        }, {
          start: {
            line: 553,
            column: 82
          },
          end: {
            line: 553,
            column: 84
          }
        }],
        line: 553
      },
      "46": {
        loc: {
          start: {
            line: 564,
            column: 12
          },
          end: {
            line: 583,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 565,
            column: 16
          },
          end: {
            line: 569,
            column: 26
          }
        }, {
          start: {
            line: 570,
            column: 16
          },
          end: {
            line: 574,
            column: 26
          }
        }, {
          start: {
            line: 575,
            column: 16
          },
          end: {
            line: 578,
            column: 26
          }
        }, {
          start: {
            line: 579,
            column: 16
          },
          end: {
            line: 582,
            column: 26
          }
        }],
        line: 564
      },
      "47": {
        loc: {
          start: {
            line: 613,
            column: 26
          },
          end: {
            line: 613,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 613,
            column: 26
          },
          end: {
            line: 613,
            column: 75
          }
        }, {
          start: {
            line: 613,
            column: 79
          },
          end: {
            line: 613,
            column: 80
          }
        }],
        line: 613
      },
      "48": {
        loc: {
          start: {
            line: 616,
            column: 28
          },
          end: {
            line: 616,
            column: 96
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 616,
            column: 28
          },
          end: {
            line: 616,
            column: 91
          }
        }, {
          start: {
            line: 616,
            column: 95
          },
          end: {
            line: 616,
            column: 96
          }
        }],
        line: 616
      },
      "49": {
        loc: {
          start: {
            line: 630,
            column: 51
          },
          end: {
            line: 630,
            column: 111
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 630,
            column: 76
          },
          end: {
            line: 630,
            column: 107
          }
        }, {
          start: {
            line: 630,
            column: 110
          },
          end: {
            line: 630,
            column: 111
          }
        }],
        line: 630
      },
      "50": {
        loc: {
          start: {
            line: 640,
            column: 8
          },
          end: {
            line: 642,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 640,
            column: 8
          },
          end: {
            line: 642,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 640
      },
      "51": {
        loc: {
          start: {
            line: 646,
            column: 31
          },
          end: {
            line: 646,
            column: 102
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 646,
            column: 31
          },
          end: {
            line: 646,
            column: 97
          }
        }, {
          start: {
            line: 646,
            column: 101
          },
          end: {
            line: 646,
            column: 102
          }
        }],
        line: 646
      },
      "52": {
        loc: {
          start: {
            line: 666,
            column: 12
          },
          end: {
            line: 668,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 666,
            column: 12
          },
          end: {
            line: 668,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 666
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0, 0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\tunnel-security-monitor.ts",
      mappings: ";;;AAAA,mCAAsC;AACtC,mCAAgD;AAKhD;;GAEG;AACH,IAAY,WAKX;AALD,WAAY,WAAW;IACrB,0BAAW,CAAA;IACX,gCAAiB,CAAA;IACjB,4BAAa,CAAA;IACb,oCAAqB,CAAA;AACvB,CAAC,EALW,WAAW,2BAAX,WAAW,QAKtB;AAED;;GAEG;AACH,IAAY,iBASX;AATD,WAAY,iBAAiB;IAC3B,gEAA2C,CAAA;IAC3C,8DAAyC,CAAA;IACzC,oEAA+C,CAAA;IAC/C,0EAAqD,CAAA;IACrD,8DAAyC,CAAA;IACzC,sEAAiD,CAAA;IACjD,wDAAmC,CAAA;IACnC,kEAA6C,CAAA;AAC/C,CAAC,EATW,iBAAiB,iCAAjB,iBAAiB,QAS5B;AAqFD;;;GAGG;AACH,MAAa,qBAAsB,SAAQ,qBAAY;IAC7C,MAAM,CAAS;IACf,aAAa,CAAmB;IAChC,iBAAiB,CAAoB;IACrC,MAAM,CAAwB;IAC9B,cAAc,CAA6B;IAC3C,eAAe,CAAiC;IAChD,iBAAiB,CAAqB;IACtC,eAAe,CAAkB;IACjC,mBAAmB,CAA8B;IACjD,YAAY,CAAU;IAE9B,YACE,MAAc,EACd,aAA+B,EAC/B,iBAAoC,EACpC,MAAuC;QAEvC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;QAC3C,IAAI,CAAC,cAAc,GAAG,IAAI,GAAG,EAAE,CAAC;QAChC,IAAI,CAAC,eAAe,GAAG,IAAI,GAAG,EAAE,CAAC;QACjC,IAAI,CAAC,mBAAmB,GAAG,IAAI,GAAG,EAAE,CAAC;QACrC,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;QAE1B,wBAAwB;QACxB,IAAI,CAAC,MAAM,GAAG;YACZ,uBAAuB,EAAE,IAAI;YAC7B,wBAAwB,EAAE,IAAI;YAC9B,2BAA2B,EAAE,IAAI;YACjC,uBAAuB,EAAE,KAAK,EAAE,aAAa;YAC7C,eAAe,EAAE,EAAE;YACnB,kBAAkB,EAAE,IAAI;YACxB,qBAAqB,EAAE,KAAK;YAC5B,oBAAoB,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,EAAE,SAAS;YACxD,GAAG,MAAM;SACV,CAAC;QAEF,8BAA8B;QAC9B,IAAI,CAAC,eAAe,GAAG;YACrB,WAAW,EAAE,CAAC;YACd,YAAY,EAAE,IAAI,GAAG,EAAE;YACvB,mBAAmB,EAAE,IAAI,GAAG,EAAE;YAC9B,mBAAmB,EAAE,CAAC;YACtB,mBAAmB,EAAE,CAAC;YACtB,cAAc,EAAE,CAAC;YACjB,aAAa,EAAE,CAAC;YAChB,gBAAgB,EAAE,IAAI,IAAI,EAAE;YAC5B,mBAAmB,EAAE,GAAG;SACzB,CAAC;QAEF,0CAA0C;QAC1C,IAAI,CAAC,2BAA2B,EAAE,CAAC;QAEnC,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAC3B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,qCAAqC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IACvE,CAAC;IAED;;OAEG;IACH,eAAe;QACb,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC;YACtB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,wCAAwC,CAAC,CAAC;YAC3D,OAAO;QACT,CAAC;QAED,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QACzB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,qCAAqC,CAAC,CAAC;QAExD,+BAA+B;QAC/B,MAAM,WAAW,GAAG,IAAI,CAAC,aAAa,CAAC,iBAAiB,EAAE,CAAC;QAC3D,KAAK,MAAM,UAAU,IAAI,WAAW,EAAE,CAAC;YACrC,IAAI,CAAC,yBAAyB,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;QAChD,CAAC;QAED,gCAAgC;QAChC,IAAI,CAAC,0BAA0B,EAAE,CAAC;QAElC,IAAI,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAC;IACzC,CAAC;IAED;;OAEG;IACH,cAAc;QACZ,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;YACvB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,oCAAoC,CAAC,CAAC;YACvD,OAAO;QACT,CAAC;QAED,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;QAC1B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,qCAAqC,CAAC,CAAC;QAExD,iCAAiC;QACjC,KAAK,MAAM,CAAC,YAAY,EAAE,QAAQ,CAAC,IAAI,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,EAAE,CAAC;YAC1E,aAAa,CAAC,QAAQ,CAAC,CAAC;YACxB,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QAChD,CAAC;QAED,IAAI,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAC;IACzC,CAAC;IAED;;;;OAIG;IACH,yBAAyB,CAAC,YAAoB;QAC5C,IAAI,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,YAAY,CAAC,EAAE,CAAC;YAC/C,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,kCAAkC,YAAY,EAAE,CAAC,CAAC;YACpE,OAAO;QACT,CAAC;QAED,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,gDAAgD,YAAY,EAAE,CAAC,CAAC;QAEjF,sCAAsC;QACtC,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;QAE3C,kCAAkC;QAClC,IAAI,IAAI,CAAC,MAAM,CAAC,uBAAuB,EAAE,CAAC;YACxC,MAAM,QAAQ,GAAG,WAAW,CAAC,KAAK,IAAI,EAAE;gBACtC,IAAI,CAAC;oBACH,MAAM,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;gBAC1C,CAAC;gBAAC,OAAO,KAAK,EAAE,CAAC;oBACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,0CAA0C,YAAY,EAAE,EAAE,KAAK,CAAC,CAAC;gBACrF,CAAC;YACH,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC;YAExC,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;QACvD,CAAC;QAED,gCAAgC;QAChC,UAAU,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,EAAE,IAAI,CAAC,CAAC;IACjE,CAAC;IAED;;;;OAIG;IACH,wBAAwB,CAAC,YAAoB;QAC3C,MAAM,QAAQ,GAAG,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QAC5D,IAAI,QAAQ,EAAE,CAAC;YACb,aAAa,CAAC,QAAQ,CAAC,CAAC;YACxB,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;YAC9C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,+CAA+C,YAAY,EAAE,CAAC,CAAC;QAClF,CAAC;QAED,iCAAiC;QACjC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;IAC5C,CAAC;IAED;;;;;;;;OAQG;IACH,mBAAmB,CACjB,YAAoB,EACpB,IAAuB,EACvB,WAAwB,EACxB,WAAmB,EACnB,WAAgC,EAAE;QAElC,MAAM,KAAK,GAAkB;YAC3B,EAAE,EAAE,IAAI,CAAC,eAAe,EAAE;YAC1B,SAAS,EAAE,IAAI,IAAI,EAAE;YACrB,YAAY;YACZ,IAAI;YACJ,WAAW;YACX,WAAW;YACX,QAAQ;YACR,QAAQ,EAAE,KAAK;YACf,eAAe,EAAE,EAAE;SACpB,CAAC;QAEF,cAAc;QACd,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;QAEzC,iBAAiB;QACjB,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC;QAElC,YAAY;QACZ,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,4BAA4B,KAAK,CAAC,EAAE,EAAE,EAAE;YACvD,YAAY;YACZ,IAAI;YACJ,WAAW;YACX,WAAW;SACZ,CAAC,CAAC;QAEH,aAAa;QACb,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;QAElC,wCAAwC;QACxC,IAAI,IAAI,CAAC,MAAM,CAAC,kBAAkB,EAAE,CAAC;YACnC,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,CAAC;QACvC,CAAC;QAED,OAAO,KAAK,CAAC;IACf,CAAC;IAED;;;;;OAKG;IACH,oBAAoB,CAAC,OAAe,EAAE,eAAyB;QAC7D,MAAM,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAC/C,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,6BAA6B,OAAO,EAAE,CAAC,CAAC;YACzD,OAAO;QACT,CAAC;QAED,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC;QACtB,KAAK,CAAC,UAAU,GAAG,IAAI,IAAI,EAAE,CAAC;QAC9B,KAAK,CAAC,eAAe,GAAG,eAAe,CAAC;QAExC,IAAI,CAAC,eAAe,CAAC,cAAc,EAAE,CAAC;QACtC,IAAI,CAAC,eAAe,CAAC,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,eAAe,CAAC,aAAa,GAAG,CAAC,CAAC,CAAC;QAEzF,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,4BAA4B,OAAO,EAAE,EAAE,EAAE,eAAe,EAAE,CAAC,CAAC;QAC7E,IAAI,CAAC,IAAI,CAAC,uBAAuB,EAAE,KAAK,CAAC,CAAC;IAC5C,CAAC;IAED;;;;;;;OAOG;IACH,iBAAiB,CACf,YAAqB,EACrB,WAAyB,EACzB,KAAc;QAEd,IAAI,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC,CAAC;QAEtD,gBAAgB;QAChB,IAAI,YAAY,EAAE,CAAC;YACjB,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,YAAY,KAAK,YAAY,CAAC,CAAC;QACvE,CAAC;QAED,IAAI,WAAW,EAAE,CAAC;YAChB,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,WAAW,KAAK,WAAW,CAAC,CAAC;QACrE,CAAC;QAED,mCAAmC;QACnC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC,CAAC;QAErE,cAAc;QACd,IAAI,KAAK,EAAE,CAAC;YACV,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;QAClC,CAAC;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;IAED;;;;;;OAMG;IACH,kBAAkB,CAAC,YAAoB,EAAE,KAAc;QACrD,MAAM,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;QAC9D,OAAO,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC;IACxD,CAAC;IAED;;;;OAIG;IACH,kBAAkB;QAChB,OAAO,EAAE,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;IACrC,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,mBAAmB,CAAC,YAAoB;QAC5C,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;QAClE,IAAI,CAAC,UAAU,EAAE,CAAC;YAChB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,2CAA2C,YAAY,EAAE,CAAC,CAAC;YAC5E,OAAO;QACT,CAAC;QAED,IAAI,CAAC;YACH,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,4CAA4C,YAAY,EAAE,CAAC,CAAC;YAE9E,6BAA6B;YAC7B,MAAM,IAAI,CAAC,wBAAwB,CAAC,UAAU,CAAC,CAAC;YAEhD,2BAA2B;YAC3B,IAAI,IAAI,CAAC,MAAM,CAAC,uBAAuB,EAAE,CAAC;gBACxC,MAAM,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;YAC1C,CAAC;YAED,+BAA+B;YAC/B,IAAI,IAAI,CAAC,MAAM,CAAC,wBAAwB,EAAE,CAAC;gBACzC,MAAM,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;YAC1C,CAAC;YAED,wBAAwB;YACxB,IAAI,IAAI,CAAC,MAAM,CAAC,2BAA2B,EAAE,CAAC;gBAC5C,MAAM,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC;YAC5C,CAAC;YAED,IAAI,CAAC,eAAe,CAAC,gBAAgB,GAAG,IAAI,IAAI,EAAE,CAAC;QAErD,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,uCAAuC,YAAY,EAAE,EAAE,KAAK,CAAC,CAAC;YAEhF,IAAI,CAAC,mBAAmB,CACtB,YAAY,EACZ,iBAAiB,CAAC,kBAAkB,EACpC,WAAW,CAAC,IAAI,EAChB,yBAAyB,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,EACjF,EAAE,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAChE,CAAC;QACJ,CAAC;IACH,CAAC;IAED;;OAEG;IACK,mBAAmB;QACzB,oCAAoC;QACpC,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,iBAAiB,EAAE,CAAC,UAAU,EAAE,EAAE;YACtD,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC;gBACtB,IAAI,CAAC,yBAAyB,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;YAChD,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,mCAAmC;QACnC,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,oBAAoB,EAAE,CAAC,UAAU,EAAE,EAAE;YACzD,IAAI,CAAC,wBAAwB,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;QAEH,uDAAuD;QACvD,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,aAAa,EAAE,CAAC,UAAU,EAAE,KAAK,EAAE,EAAE;YACzD,IAAI,CAAC,mBAAmB,CACtB,UAAU,CAAC,EAAE,EACb,iBAAiB,CAAC,oBAAoB,EACtC,WAAW,CAAC,MAAM,EAClB,0BAA0B,KAAK,CAAC,OAAO,EAAE,EACzC,EAAE,KAAK,EAAE,KAAK,CAAC,KAAK,EAAE,CACvB,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACK,2BAA2B;QACjC,IAAI,CAAC,iBAAiB,GAAG;YACvB;gBACE,IAAI,EAAE,eAAe;gBACrB,OAAO,EAAE,wBAAwB;gBACjC,WAAW,EAAE,WAAW,CAAC,MAAM;gBAC/B,WAAW,EAAE,iCAAiC;gBAC9C,cAAc,EAAE,iBAAiB;aAClC;YACD;gBACE,IAAI,EAAE,eAAe;gBACrB,OAAO,EAAE,6DAA6D;gBACtE,WAAW,EAAE,WAAW,CAAC,IAAI;gBAC7B,WAAW,EAAE,gCAAgC;gBAC7C,cAAc,EAAE,4BAA4B;aAC7C;YACD;gBACE,IAAI,EAAE,iBAAiB;gBACvB,OAAO,EAAE,kDAAkD;gBAC3D,WAAW,EAAE,WAAW,CAAC,IAAI;gBAC7B,WAAW,EAAE,iCAAiC;gBAC9C,cAAc,EAAE,yBAAyB;aAC1C;YACD;gBACE,IAAI,EAAE,mBAAmB;gBACzB,OAAO,EAAE,4CAA4C;gBACrD,WAAW,EAAE,WAAW,CAAC,QAAQ;gBACjC,WAAW,EAAE,4BAA4B;gBACzC,cAAc,EAAE,kCAAkC;aACnD;YACD;gBACE,IAAI,EAAE,mBAAmB;gBACzB,OAAO,EAAE,4CAA4C;gBACrD,WAAW,EAAE,WAAW,CAAC,IAAI;gBAC7B,WAAW,EAAE,sCAAsC;gBACnD,cAAc,EAAE,6BAA6B;aAC9C;SACF,CAAC;IACJ,CAAC;IAED;;;;OAIG;IACK,KAAK,CAAC,cAAc,CAAC,YAAoB;QAC/C,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;QAClE,IAAI,CAAC,UAAU;YAAE,OAAO;QAExB,IAAI,CAAC;YACH,gGAAgG;YAChG,MAAM,QAAQ,GAAoB;gBAChC,YAAY;gBACZ,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,KAAK,CAAC;gBAC1C,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,KAAK,CAAC;gBAC3C,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC;gBAC1C,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC;gBAC3C,kBAAkB,EAAE,EAAE;gBACtB,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC;gBAC7C,mBAAmB,EAAE,IAAI;gBACzB,iBAAiB,EAAE,IAAI,CAAC,0BAA0B,CAAC,YAAY,CAAC;aACjE,CAAC;YAEF,gCAAgC;YAChC,QAAQ,CAAC,kBAAkB,GAAG,IAAI,CAAC,wBAAwB,CAAC,QAAQ,CAAC,CAAC;YAEtE,sBAAsB;YACtB,IAAI,QAAQ,CAAC,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,eAAe,EAAE,CAAC;gBACxD,IAAI,CAAC,mBAAmB,CACtB,YAAY,EACZ,iBAAiB,CAAC,eAAe,EACjC,QAAQ,CAAC,YAAY,GAAG,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,WAAW,CAAC,MAAM,EAClE,+BAA+B,QAAQ,CAAC,YAAY,EAAE,EACtD,EAAE,QAAQ,EAAE,CACb,CAAC;YACJ,CAAC;YAED,iBAAiB;YACjB,MAAM,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;YACrE,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAE/B,qBAAqB;YACrB,MAAM,cAAc,GAAG,IAAI,CAAC;YAC5B,IAAI,eAAe,CAAC,MAAM,GAAG,cAAc,EAAE,CAAC;gBAC5C,eAAe,CAAC,MAAM,CAAC,CAAC,EAAE,eAAe,CAAC,MAAM,GAAG,cAAc,CAAC,CAAC;YACrE,CAAC;YAED,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,YAAY,EAAE,eAAe,CAAC,CAAC;YAExD,iBAAiB;YACjB,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;QAEtC,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,0CAA0C,YAAY,EAAE,EAAE,KAAK,CAAC,CAAC;QACrF,CAAC;IACH,CAAC;IAED;;;;OAIG;IACK,KAAK,CAAC,wBAAwB,CAAC,UAA4B;QACjE,IAAI,CAAC;YACH,0BAA0B;YAC1B,IAAI,UAAU,CAAC,OAAO,IAAI,UAAU,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;gBACpD,IAAI,CAAC,mBAAmB,CACtB,UAAU,CAAC,EAAE,EACb,iBAAiB,CAAC,oBAAoB,EACtC,WAAW,CAAC,IAAI,EAChB,gDAAgD,EAChD,EAAE,aAAa,EAAE,IAAI,EAAE,CACxB,CAAC;YACJ,CAAC;YAED,0CAA0C;YAC1C,IAAI,UAAU,CAAC,MAAM,CAAC,SAAS,GAAG,IAAI,IAAI,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,MAAM,EAAE,KAAK,CAAC,EAAE,CAAC;gBACnF,IAAI,CAAC,mBAAmB,CACtB,UAAU,CAAC,EAAE,EACb,iBAAiB,CAAC,mBAAmB,EACrC,WAAW,CAAC,MAAM,EAClB,2CAA2C,EAC3C,EAAE,SAAS,EAAE,UAAU,CAAC,MAAM,CAAC,SAAS,EAAE,CAC3C,CAAC;YACJ,CAAC;QAEH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,yCAAyC,UAAU,CAAC,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;QACrF,CAAC;IACH,CAAC;IAED;;;;OAIG;IACK,KAAK,CAAC,gBAAgB,CAAC,UAA4B;QACzD,IAAI,CAAC;YACH,iFAAiF;YACjF,MAAM,UAAU,GAAG,IAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;YAE3D,KAAK,MAAM,QAAQ,IAAI,UAAU,EAAE,CAAC;gBAClC,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,iBAAiB,EAAE,CAAC;oBAC7C,IAAI,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC;wBACnC,IAAI,CAAC,mBAAmB,CACtB,UAAU,CAAC,EAAE,EACb,iBAAiB,CAAC,kBAAkB,EACpC,OAAO,CAAC,WAAW,EACnB,OAAO,CAAC,WAAW,EACnB;4BACE,OAAO,EAAE,OAAO,CAAC,IAAI;4BACrB,QAAQ;4BACR,cAAc,EAAE,OAAO,CAAC,cAAc;yBACvC,CACF,CAAC;oBACJ,CAAC;gBACH,CAAC;YACH,CAAC;QAEH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,6CAA6C,UAAU,CAAC,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;QACzF,CAAC;IACH,CAAC;IAED;;;;OAIG;IACK,KAAK,CAAC,kBAAkB,CAAC,UAA4B;QAC3D,IAAI,CAAC;YACH,wCAAwC;YACxC,MAAM,WAAW,GAAG,IAAI,CAAC,0BAA0B,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;YAEnE,0CAA0C;YAC1C,MAAM,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC;YACtE,MAAM,gBAAgB,GAAG,eAAe,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YAErE,IAAI,gBAAgB,IAAI,gBAAgB,CAAC,iBAAiB,KAAK,WAAW,EAAE,CAAC;gBAC3E,yCAAyC;gBACzC,MAAM,cAAc,GAAG,IAAI,CAAC,uBAAuB,CAAC,gBAAgB,CAAC,iBAAiB,EAAE,WAAW,CAAC,CAAC;gBAErG,IAAI,cAAc,GAAG,GAAG,EAAE,CAAC,CAAC,gBAAgB;oBAC1C,IAAI,CAAC,mBAAmB,CACtB,UAAU,CAAC,EAAE,EACb,iBAAiB,CAAC,wBAAwB,EAC1C,WAAW,CAAC,IAAI,EAChB,mCAAmC,EACnC;wBACE,YAAY,EAAE,gBAAgB,CAAC,iBAAiB;wBAChD,WAAW;wBACX,UAAU,EAAE,cAAc;qBAC3B,CACF,CAAC;oBAEF,IAAI,CAAC,eAAe,CAAC,mBAAmB,EAAE,CAAC;gBAC7C,CAAC;YACH,CAAC;QAEH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,8CAA8C,UAAU,CAAC,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;QAC1F,CAAC;IACH,CAAC;IAED;;;;;OAKG;IACK,wBAAwB,CAAC,QAAyB;QACxD,MAAM,QAAQ,GAAa,EAAE,CAAC;QAE9B,mCAAmC;QACnC,IAAI,QAAQ,CAAC,OAAO,GAAG,MAAM,IAAI,QAAQ,CAAC,QAAQ,GAAG,MAAM,EAAE,CAAC;YAC5D,QAAQ,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;QACvC,CAAC;QAED,mCAAmC;QACnC,MAAM,WAAW,GAAG,QAAQ,CAAC,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;QAC1E,IAAI,WAAW,GAAG,EAAE,IAAI,WAAW,GAAG,GAAG,EAAE,CAAC;YAC1C,QAAQ,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;QACxC,CAAC;QAED,wCAAwC;QACxC,IAAI,QAAQ,CAAC,QAAQ,GAAG,QAAQ,CAAC,OAAO,GAAG,CAAC,EAAE,CAAC;YAC7C,QAAQ,CAAC,IAAI,CAAC,6BAA6B,CAAC,CAAC;QAC/C,CAAC;QAED,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED;;;;;OAKG;IACK,0BAA0B,CAAC,YAAoB;QACrD,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;QAClE,IAAI,CAAC,UAAU;YAAE,OAAO,EAAE,CAAC;QAE3B,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC;YAC1B,YAAY;YACZ,MAAM,EAAE,UAAU,CAAC,MAAM;YACzB,KAAK,EAAE,UAAU,CAAC,KAAK;YACvB,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;SACtB,CAAC,CAAC;QAEH,OAAO,IAAA,mBAAU,EAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACzD,CAAC;IAED;;;;;;OAMG;IACK,uBAAuB,CAAC,KAAa,EAAE,KAAa;QAC1D,IAAI,KAAK,CAAC,MAAM,KAAK,KAAK,CAAC,MAAM;YAAE,OAAO,CAAC,CAAC;QAE5C,IAAI,WAAW,GAAG,CAAC,CAAC;QACpB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACtC,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC;gBAC1B,WAAW,EAAE,CAAC;YAChB,CAAC;QACH,CAAC;QAED,OAAO,WAAW,GAAG,KAAK,CAAC,MAAM,CAAC;IACpC,CAAC;IAED;;;;;OAKG;IACK,mBAAmB,CAAC,YAAoB;QAC9C,6EAA6E;QAC7E,OAAO;YACL,kCAAkC,YAAY,EAAE;YAChD,+BAA+B,YAAY,EAAE;YAC7C,wBAAwB,YAAY,EAAE;YACtC,sDAAsD;YACtD,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,0CAA0C,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;YAC5E,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,uCAAuC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;SAC1E,CAAC;IACJ,CAAC;IAED;;;;OAIG;IACK,KAAK,CAAC,wBAAwB,CAAC,KAAoB;QACzD,IAAI,CAAC;YACH,MAAM,eAAe,GAAa,EAAE,CAAC;YAErC,QAAQ,KAAK,CAAC,WAAW,EAAE,CAAC;gBAC1B,KAAK,WAAW,CAAC,QAAQ;oBACvB,mCAAmC;oBACnC,MAAM,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;oBAC9D,eAAe,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;oBAC9C,MAAM;gBAER,KAAK,WAAW,CAAC,IAAI;oBACnB,mCAAmC;oBACnC,eAAe,CAAC,IAAI,CAAC,6BAA6B,CAAC,CAAC;oBACpD,IAAI,CAAC,IAAI,CAAC,oBAAoB,EAAE,KAAK,CAAC,CAAC;oBACvC,MAAM;gBAER,KAAK,WAAW,CAAC,MAAM;oBACrB,mCAAmC;oBACnC,eAAe,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;oBAC7C,MAAM;gBAER,KAAK,WAAW,CAAC,GAAG;oBAClB,8BAA8B;oBAC9B,eAAe,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;oBAC5C,MAAM;YACV,CAAC;YAED,qCAAqC;YACrC,KAAK,CAAC,eAAe,GAAG,eAAe,CAAC;YAExC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,0CAA0C,KAAK,CAAC,EAAE,EAAE,EAAE,EAAE,eAAe,EAAE,CAAC,CAAC;QAE9F,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,uCAAuC,KAAK,CAAC,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;QAC9E,CAAC;IACH,CAAC;IAED;;OAEG;IACK,0BAA0B;QAChC,yCAAyC;QACzC,WAAW,CAAC,GAAG,EAAE;YACf,MAAM,WAAW,GAAG,IAAI,CAAC,aAAa,CAAC,iBAAiB,EAAE,CAAC;YAC3D,KAAK,MAAM,UAAU,IAAI,WAAW,EAAE,CAAC;gBACrC,IAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;YAC1C,CAAC;QACH,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;IACpB,CAAC;IAED;;;;OAIG;IACK,qBAAqB,CAAC,KAAoB;QAChD,IAAI,CAAC,eAAe,CAAC,WAAW,EAAE,CAAC;QACnC,IAAI,CAAC,eAAe,CAAC,aAAa,EAAE,CAAC;QAErC,2BAA2B;QAC3B,MAAM,SAAS,GAAG,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACzE,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,GAAG,CAAC,CAAC,CAAC;QAEjE,6BAA6B;QAC7B,MAAM,WAAW,GAAG,IAAI,CAAC,eAAe,CAAC,mBAAmB,CAAC,GAAG,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACzF,IAAI,CAAC,eAAe,CAAC,mBAAmB,CAAC,GAAG,CAAC,KAAK,CAAC,WAAW,EAAE,WAAW,GAAG,CAAC,CAAC,CAAC;QAEjF,kCAAkC;QAClC,IAAI,CAAC,4BAA4B,EAAE,CAAC;IACtC,CAAC;IAED;;;;OAIG;IACK,oBAAoB,CAAC,QAAyB;QACpD,8CAA8C;QAC9C,MAAM,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;QACrE,MAAM,UAAU,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;QAC3E,IAAI,CAAC,eAAe,CAAC,mBAAmB,GAAG,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,UAAU,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1G,CAAC;IAED;;OAEG;IACK,4BAA4B;QAClC,IAAI,KAAK,GAAG,GAAG,CAAC;QAEhB,mCAAmC;QACnC,KAAK,IAAI,IAAI,CAAC,eAAe,CAAC,aAAa,GAAG,EAAE,CAAC;QAEjD,wCAAwC;QACxC,IAAI,IAAI,CAAC,eAAe,CAAC,mBAAmB,GAAG,EAAE,EAAE,CAAC;YAClD,KAAK,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,mBAAmB,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC;QACjE,CAAC;QAED,yCAAyC;QACzC,KAAK,IAAI,IAAI,CAAC,eAAe,CAAC,mBAAmB,GAAG,CAAC,CAAC;QAEtD,oCAAoC;QACpC,MAAM,cAAc,GAAG,IAAI,CAAC,eAAe,CAAC,mBAAmB,CAAC,GAAG,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAC/F,KAAK,IAAI,cAAc,GAAG,EAAE,CAAC;QAE7B,IAAI,CAAC,eAAe,CAAC,mBAAmB,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC;IAC/E,CAAC;IAED;;;;OAIG;IACK,eAAe;QACrB,OAAO,OAAO,IAAI,CAAC,GAAG,EAAE,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC;IACxE,CAAC;IAED;;OAEG;IACH,OAAO;QACL,IAAI,CAAC,cAAc,EAAE,CAAC;QAEtB,sBAAsB;QACtB,MAAM,UAAU,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC;QACjE,KAAK,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,IAAI,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,EAAE,CAAC;YAC7D,IAAI,KAAK,CAAC,SAAS,CAAC,OAAO,EAAE,GAAG,UAAU,EAAE,CAAC;gBAC3C,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YACtC,CAAC;QACH,CAAC;QAED,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC;QAC7B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,2CAA2C,CAAC,CAAC;IAChE,CAAC;CACF;AA7xBD,sDA6xBC",
      names: [],
      sources: ["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\tunnel-security-monitor.ts"],
      sourcesContent: ["import { EventEmitter } from 'events';\r\nimport { createHash, createHmac } from 'crypto';\r\nimport { Logger } from '../core/logging/logger';\r\nimport { SSHTunnelManager, TunnelConnection } from './ssh-tunnel-manager';\r\nimport { EncryptionService } from '../security/encryption-service';\r\n\r\n/**\r\n * Security threat levels\r\n */\r\nexport enum ThreatLevel {\r\n  LOW = 'LOW',\r\n  MEDIUM = 'MEDIUM',\r\n  HIGH = 'HIGH',\r\n  CRITICAL = 'CRITICAL'\r\n}\r\n\r\n/**\r\n * Security event types\r\n */\r\nexport enum SecurityEventType {\r\n  UNAUTHORIZED_ACCESS = 'UNAUTHORIZED_ACCESS',\r\n  SUSPICIOUS_TRAFFIC = 'SUSPICIOUS_TRAFFIC',\r\n  TUNNEL_HIJACK_ATTEMPT = 'TUNNEL_HIJACK_ATTEMPT',\r\n  DATA_INTEGRITY_VIOLATION = 'DATA_INTEGRITY_VIOLATION',\r\n  ENCRYPTION_FAILURE = 'ENCRYPTION_FAILURE',\r\n  AUTHENTICATION_FAILURE = 'AUTHENTICATION_FAILURE',\r\n  TRAFFIC_ANOMALY = 'TRAFFIC_ANOMALY',\r\n  CONNECTION_TAMPERING = 'CONNECTION_TAMPERING'\r\n}\r\n\r\n/**\r\n * Security event information\r\n */\r\nexport interface SecurityEvent {\r\n  id: string;\r\n  timestamp: Date;\r\n  connectionId: string;\r\n  type: SecurityEventType;\r\n  threatLevel: ThreatLevel;\r\n  description: string;\r\n  sourceIP?: string;\r\n  targetIP?: string;\r\n  dataSize?: number;\r\n  metadata: Record<string, any>;\r\n  resolved: boolean;\r\n  resolvedAt?: Date;\r\n  responseActions: string[];\r\n}\r\n\r\n/**\r\n * Traffic analysis result\r\n */\r\nexport interface TrafficAnalysis {\r\n  connectionId: string;\r\n  timestamp: Date;\r\n  bytesIn: number;\r\n  bytesOut: number;\r\n  packetsIn: number;\r\n  packetsOut: number;\r\n  suspiciousPatterns: string[];\r\n  anomalyScore: number; // 0-100\r\n  encryptionIntegrity: boolean;\r\n  dataIntegrityHash: string;\r\n}\r\n\r\n/**\r\n * Security monitoring configuration\r\n */\r\nexport interface SecurityMonitorConfig {\r\n  /** Enable traffic monitoring */\r\n  enableTrafficMonitoring: boolean;\r\n  /** Enable intrusion detection */\r\n  enableIntrusionDetection: boolean;\r\n  /** Enable data integrity checking */\r\n  enableDataIntegrityChecking: boolean;\r\n  /** Traffic analysis interval in milliseconds */\r\n  trafficAnalysisInterval: number;\r\n  /** Maximum allowed traffic anomaly score */\r\n  maxAnomalyScore: number;\r\n  /** Enable automatic threat response */\r\n  enableAutoResponse: boolean;\r\n  /** Threat response timeout in milliseconds */\r\n  threatResponseTimeout: number;\r\n  /** Security event retention period in milliseconds */\r\n  eventRetentionPeriod: number;\r\n}\r\n\r\n/**\r\n * Intrusion detection patterns\r\n */\r\nexport interface IntrusionPattern {\r\n  name: string;\r\n  pattern: RegExp;\r\n  threatLevel: ThreatLevel;\r\n  description: string;\r\n  responseAction: string;\r\n}\r\n\r\n/**\r\n * Security metrics\r\n */\r\nexport interface SecurityMetrics {\r\n  totalEvents: number;\r\n  eventsByType: Map<SecurityEventType, number>;\r\n  eventsByThreatLevel: Map<ThreatLevel, number>;\r\n  averageAnomalyScore: number;\r\n  integrityViolations: number;\r\n  resolvedEvents: number;\r\n  activeThreats: number;\r\n  lastSecurityScan: Date;\r\n  systemSecurityScore: number; // 0-100\r\n}\r\n\r\n/**\r\n * Tunnel Security Monitor\r\n * Monitors SSH tunnel security with traffic analysis, intrusion detection, and integrity checking\r\n */\r\nexport class TunnelSecurityMonitor extends EventEmitter {\r\n  private logger: Logger;\r\n  private tunnelManager: SSHTunnelManager;\r\n  private encryptionService: EncryptionService;\r\n  private config: SecurityMonitorConfig;\r\n  private securityEvents: Map<string, SecurityEvent>;\r\n  private trafficAnalysis: Map<string, TrafficAnalysis[]>;\r\n  private intrusionPatterns: IntrusionPattern[];\r\n  private securityMetrics: SecurityMetrics;\r\n  private monitoringIntervals: Map<string, NodeJS.Timeout>;\r\n  private isMonitoring: boolean;\r\n\r\n  constructor(\r\n    logger: Logger,\r\n    tunnelManager: SSHTunnelManager,\r\n    encryptionService: EncryptionService,\r\n    config?: Partial<SecurityMonitorConfig>\r\n  ) {\r\n    super();\r\n    this.logger = logger;\r\n    this.tunnelManager = tunnelManager;\r\n    this.encryptionService = encryptionService;\r\n    this.securityEvents = new Map();\r\n    this.trafficAnalysis = new Map();\r\n    this.monitoringIntervals = new Map();\r\n    this.isMonitoring = false;\r\n\r\n    // Default configuration\r\n    this.config = {\r\n      enableTrafficMonitoring: true,\r\n      enableIntrusionDetection: true,\r\n      enableDataIntegrityChecking: true,\r\n      trafficAnalysisInterval: 30000, // 30 seconds\r\n      maxAnomalyScore: 70,\r\n      enableAutoResponse: true,\r\n      threatResponseTimeout: 10000,\r\n      eventRetentionPeriod: 7 * 24 * 60 * 60 * 1000, // 7 days\r\n      ...config\r\n    };\r\n\r\n    // Initialize security metrics\r\n    this.securityMetrics = {\r\n      totalEvents: 0,\r\n      eventsByType: new Map(),\r\n      eventsByThreatLevel: new Map(),\r\n      averageAnomalyScore: 0,\r\n      integrityViolations: 0,\r\n      resolvedEvents: 0,\r\n      activeThreats: 0,\r\n      lastSecurityScan: new Date(),\r\n      systemSecurityScore: 100\r\n    };\r\n\r\n    // Initialize intrusion detection patterns\r\n    this.initializeIntrusionPatterns();\r\n\r\n    this.setupEventListeners();\r\n    this.logger.info('Tunnel Security Monitor initialized', this.config);\r\n  }\r\n\r\n  /**\r\n   * Start security monitoring\r\n   */\r\n  startMonitoring(): void {\r\n    if (this.isMonitoring) {\r\n      this.logger.warn('Security monitoring is already running');\r\n      return;\r\n    }\r\n\r\n    this.isMonitoring = true;\r\n    this.logger.info('Starting tunnel security monitoring');\r\n\r\n    // Monitor existing connections\r\n    const connections = this.tunnelManager.getAllConnections();\r\n    for (const connection of connections) {\r\n      this.startMonitoringConnection(connection.id);\r\n    }\r\n\r\n    // Start periodic security scans\r\n    this.startPeriodicSecurityScans();\r\n\r\n    this.emit('securityMonitoringStarted');\r\n  }\r\n\r\n  /**\r\n   * Stop security monitoring\r\n   */\r\n  stopMonitoring(): void {\r\n    if (!this.isMonitoring) {\r\n      this.logger.warn('Security monitoring is not running');\r\n      return;\r\n    }\r\n\r\n    this.isMonitoring = false;\r\n    this.logger.info('Stopping tunnel security monitoring');\r\n\r\n    // Clear all monitoring intervals\r\n    for (const [connectionId, interval] of this.monitoringIntervals.entries()) {\r\n      clearInterval(interval);\r\n      this.monitoringIntervals.delete(connectionId);\r\n    }\r\n\r\n    this.emit('securityMonitoringStopped');\r\n  }\r\n\r\n  /**\r\n   * Start monitoring a specific connection\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   */\r\n  startMonitoringConnection(connectionId: string): void {\r\n    if (this.monitoringIntervals.has(connectionId)) {\r\n      this.logger.debug(`Already monitoring connection: ${connectionId}`);\r\n      return;\r\n    }\r\n\r\n    this.logger.info(`Starting security monitoring for connection: ${connectionId}`);\r\n\r\n    // Initialize traffic analysis history\r\n    this.trafficAnalysis.set(connectionId, []);\r\n\r\n    // Start periodic traffic analysis\r\n    if (this.config.enableTrafficMonitoring) {\r\n      const interval = setInterval(async () => {\r\n        try {\r\n          await this.analyzeTraffic(connectionId);\r\n        } catch (error) {\r\n          this.logger.error(`Traffic analysis failed for connection ${connectionId}`, error);\r\n        }\r\n      }, this.config.trafficAnalysisInterval);\r\n\r\n      this.monitoringIntervals.set(connectionId, interval);\r\n    }\r\n\r\n    // Perform initial security scan\r\n    setTimeout(() => this.performSecurityScan(connectionId), 1000);\r\n  }\r\n\r\n  /**\r\n   * Stop monitoring a specific connection\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   */\r\n  stopMonitoringConnection(connectionId: string): void {\r\n    const interval = this.monitoringIntervals.get(connectionId);\r\n    if (interval) {\r\n      clearInterval(interval);\r\n      this.monitoringIntervals.delete(connectionId);\r\n      this.logger.info(`Stopped security monitoring for connection: ${connectionId}`);\r\n    }\r\n\r\n    // Clean up traffic analysis data\r\n    this.trafficAnalysis.delete(connectionId);\r\n  }\r\n\r\n  /**\r\n   * Report security event\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @param type - Security event type\r\n   * @param threatLevel - Threat level\r\n   * @param description - Event description\r\n   * @param metadata - Additional metadata\r\n   */\r\n  reportSecurityEvent(\r\n    connectionId: string,\r\n    type: SecurityEventType,\r\n    threatLevel: ThreatLevel,\r\n    description: string,\r\n    metadata: Record<string, any> = {}\r\n  ): SecurityEvent {\r\n    const event: SecurityEvent = {\r\n      id: this.generateEventId(),\r\n      timestamp: new Date(),\r\n      connectionId,\r\n      type,\r\n      threatLevel,\r\n      description,\r\n      metadata,\r\n      resolved: false,\r\n      responseActions: []\r\n    };\r\n\r\n    // Store event\r\n    this.securityEvents.set(event.id, event);\r\n\r\n    // Update metrics\r\n    this.updateSecurityMetrics(event);\r\n\r\n    // Log event\r\n    this.logger.warn(`Security event detected: ${event.id}`, {\r\n      connectionId,\r\n      type,\r\n      threatLevel,\r\n      description\r\n    });\r\n\r\n    // Emit event\r\n    this.emit('securityEvent', event);\r\n\r\n    // Trigger automatic response if enabled\r\n    if (this.config.enableAutoResponse) {\r\n      this.triggerAutomaticResponse(event);\r\n    }\r\n\r\n    return event;\r\n  }\r\n\r\n  /**\r\n   * Resolve security event\r\n   * \r\n   * @param eventId - Event identifier\r\n   * @param responseActions - Actions taken to resolve the event\r\n   */\r\n  resolveSecurityEvent(eventId: string, responseActions: string[]): void {\r\n    const event = this.securityEvents.get(eventId);\r\n    if (!event) {\r\n      this.logger.warn(`Security event not found: ${eventId}`);\r\n      return;\r\n    }\r\n\r\n    event.resolved = true;\r\n    event.resolvedAt = new Date();\r\n    event.responseActions = responseActions;\r\n\r\n    this.securityMetrics.resolvedEvents++;\r\n    this.securityMetrics.activeThreats = Math.max(0, this.securityMetrics.activeThreats - 1);\r\n\r\n    this.logger.info(`Security event resolved: ${eventId}`, { responseActions });\r\n    this.emit('securityEventResolved', event);\r\n  }\r\n\r\n  /**\r\n   * Get security events\r\n   * \r\n   * @param connectionId - Optional connection filter\r\n   * @param threatLevel - Optional threat level filter\r\n   * @param limit - Maximum number of events to return\r\n   * @returns Array of security events\r\n   */\r\n  getSecurityEvents(\r\n    connectionId?: string,\r\n    threatLevel?: ThreatLevel,\r\n    limit?: number\r\n  ): SecurityEvent[] {\r\n    let events = Array.from(this.securityEvents.values());\r\n\r\n    // Apply filters\r\n    if (connectionId) {\r\n      events = events.filter(event => event.connectionId === connectionId);\r\n    }\r\n\r\n    if (threatLevel) {\r\n      events = events.filter(event => event.threatLevel === threatLevel);\r\n    }\r\n\r\n    // Sort by timestamp (newest first)\r\n    events.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\r\n\r\n    // Apply limit\r\n    if (limit) {\r\n      events = events.slice(0, limit);\r\n    }\r\n\r\n    return events;\r\n  }\r\n\r\n  /**\r\n   * Get traffic analysis data\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @param limit - Maximum number of analysis entries to return\r\n   * @returns Array of traffic analysis results\r\n   */\r\n  getTrafficAnalysis(connectionId: string, limit?: number): TrafficAnalysis[] {\r\n    const analysis = this.trafficAnalysis.get(connectionId) || [];\r\n    return limit ? analysis.slice(-limit) : [...analysis];\r\n  }\r\n\r\n  /**\r\n   * Get security metrics\r\n   * \r\n   * @returns Current security metrics\r\n   */\r\n  getSecurityMetrics(): SecurityMetrics {\r\n    return { ...this.securityMetrics };\r\n  }\r\n\r\n  /**\r\n   * Perform comprehensive security scan\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   */\r\n  async performSecurityScan(connectionId: string): Promise<void> {\r\n    const connection = this.tunnelManager.getConnection(connectionId);\r\n    if (!connection) {\r\n      this.logger.warn(`Connection not found for security scan: ${connectionId}`);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      this.logger.debug(`Performing security scan for connection: ${connectionId}`);\r\n\r\n      // Check connection integrity\r\n      await this.checkConnectionIntegrity(connection);\r\n\r\n      // Analyze traffic patterns\r\n      if (this.config.enableTrafficMonitoring) {\r\n        await this.analyzeTraffic(connectionId);\r\n      }\r\n\r\n      // Check for intrusion attempts\r\n      if (this.config.enableIntrusionDetection) {\r\n        await this.detectIntrusions(connection);\r\n      }\r\n\r\n      // Verify data integrity\r\n      if (this.config.enableDataIntegrityChecking) {\r\n        await this.checkDataIntegrity(connection);\r\n      }\r\n\r\n      this.securityMetrics.lastSecurityScan = new Date();\r\n\r\n    } catch (error) {\r\n      this.logger.error(`Security scan failed for connection ${connectionId}`, error);\r\n      \r\n      this.reportSecurityEvent(\r\n        connectionId,\r\n        SecurityEventType.ENCRYPTION_FAILURE,\r\n        ThreatLevel.HIGH,\r\n        `Security scan failed: ${error instanceof Error ? error.message : String(error)}`,\r\n        { error: error instanceof Error ? error.stack : String(error) }\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Setup event listeners\r\n   */\r\n  private setupEventListeners(): void {\r\n    // Listen for new tunnel connections\r\n    this.tunnelManager.on('tunnelConnected', (connection) => {\r\n      if (this.isMonitoring) {\r\n        this.startMonitoringConnection(connection.id);\r\n      }\r\n    });\r\n\r\n    // Listen for tunnel disconnections\r\n    this.tunnelManager.on('tunnelDisconnected', (connection) => {\r\n      this.stopMonitoringConnection(connection.id);\r\n    });\r\n\r\n    // Listen for tunnel errors (potential security issues)\r\n    this.tunnelManager.on('tunnelError', (connection, error) => {\r\n      this.reportSecurityEvent(\r\n        connection.id,\r\n        SecurityEventType.CONNECTION_TAMPERING,\r\n        ThreatLevel.MEDIUM,\r\n        `Tunnel error detected: ${error.message}`,\r\n        { error: error.stack }\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Initialize intrusion detection patterns\r\n   */\r\n  private initializeIntrusionPatterns(): void {\r\n    this.intrusionPatterns = [\r\n      {\r\n        name: 'Port Scanning',\r\n        pattern: /(?:nmap|masscan|zmap)/i,\r\n        threatLevel: ThreatLevel.MEDIUM,\r\n        description: 'Port scanning activity detected',\r\n        responseAction: 'Block source IP'\r\n      },\r\n      {\r\n        name: 'SQL Injection',\r\n        pattern: /(?:union|select|insert|update|delete|drop|create|alter)\\s+/i,\r\n        threatLevel: ThreatLevel.HIGH,\r\n        description: 'SQL injection attempt detected',\r\n        responseAction: 'Block connection and alert'\r\n      },\r\n      {\r\n        name: 'SSH Brute Force',\r\n        pattern: /(?:ssh|sshd).*(?:failed|invalid|authentication)/i,\r\n        threatLevel: ThreatLevel.HIGH,\r\n        description: 'SSH brute force attack detected',\r\n        responseAction: 'Implement rate limiting'\r\n      },\r\n      {\r\n        name: 'Malware Signature',\r\n        pattern: /(?:malware|virus|trojan|backdoor|rootkit)/i,\r\n        threatLevel: ThreatLevel.CRITICAL,\r\n        description: 'Malware signature detected',\r\n        responseAction: 'Immediate connection termination'\r\n      },\r\n      {\r\n        name: 'Data Exfiltration',\r\n        pattern: /(?:wget|curl|nc|netcat).*(?:http|ftp|tcp)/i,\r\n        threatLevel: ThreatLevel.HIGH,\r\n        description: 'Potential data exfiltration detected',\r\n        responseAction: 'Monitor and analyze traffic'\r\n      }\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Analyze traffic for security threats\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   */\r\n  private async analyzeTraffic(connectionId: string): Promise<void> {\r\n    const connection = this.tunnelManager.getConnection(connectionId);\r\n    if (!connection) return;\r\n\r\n    try {\r\n      // Simulate traffic analysis (in real implementation, this would analyze actual network traffic)\r\n      const analysis: TrafficAnalysis = {\r\n        connectionId,\r\n        timestamp: new Date(),\r\n        bytesIn: Math.floor(Math.random() * 10000),\r\n        bytesOut: Math.floor(Math.random() * 10000),\r\n        packetsIn: Math.floor(Math.random() * 100),\r\n        packetsOut: Math.floor(Math.random() * 100),\r\n        suspiciousPatterns: [],\r\n        anomalyScore: Math.floor(Math.random() * 100),\r\n        encryptionIntegrity: true,\r\n        dataIntegrityHash: this.calculateDataIntegrityHash(connectionId)\r\n      };\r\n\r\n      // Check for suspicious patterns\r\n      analysis.suspiciousPatterns = this.detectSuspiciousPatterns(analysis);\r\n\r\n      // Check anomaly score\r\n      if (analysis.anomalyScore > this.config.maxAnomalyScore) {\r\n        this.reportSecurityEvent(\r\n          connectionId,\r\n          SecurityEventType.TRAFFIC_ANOMALY,\r\n          analysis.anomalyScore > 90 ? ThreatLevel.HIGH : ThreatLevel.MEDIUM,\r\n          `High traffic anomaly score: ${analysis.anomalyScore}`,\r\n          { analysis }\r\n        );\r\n      }\r\n\r\n      // Store analysis\r\n      const analysisHistory = this.trafficAnalysis.get(connectionId) || [];\r\n      analysisHistory.push(analysis);\r\n\r\n      // Limit history size\r\n      const maxHistorySize = 1000;\r\n      if (analysisHistory.length > maxHistorySize) {\r\n        analysisHistory.splice(0, analysisHistory.length - maxHistorySize);\r\n      }\r\n\r\n      this.trafficAnalysis.set(connectionId, analysisHistory);\r\n\r\n      // Update metrics\r\n      this.updateAnomalyMetrics(analysis);\r\n\r\n    } catch (error) {\r\n      this.logger.error(`Traffic analysis failed for connection ${connectionId}`, error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check connection integrity\r\n   * \r\n   * @param connection - Tunnel connection\r\n   */\r\n  private async checkConnectionIntegrity(connection: TunnelConnection): Promise<void> {\r\n    try {\r\n      // Verify connection state\r\n      if (connection.process && connection.process.killed) {\r\n        this.reportSecurityEvent(\r\n          connection.id,\r\n          SecurityEventType.CONNECTION_TAMPERING,\r\n          ThreatLevel.HIGH,\r\n          'Connection process was terminated unexpectedly',\r\n          { processKilled: true }\r\n        );\r\n      }\r\n\r\n      // Check for unusual connection parameters\r\n      if (connection.config.localPort < 1024 && process.getuid && process.getuid() !== 0) {\r\n        this.reportSecurityEvent(\r\n          connection.id,\r\n          SecurityEventType.UNAUTHORIZED_ACCESS,\r\n          ThreatLevel.MEDIUM,\r\n          'Privileged port usage without root access',\r\n          { localPort: connection.config.localPort }\r\n        );\r\n      }\r\n\r\n    } catch (error) {\r\n      this.logger.error(`Connection integrity check failed for ${connection.id}`, error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Detect intrusion attempts\r\n   * \r\n   * @param connection - Tunnel connection\r\n   */\r\n  private async detectIntrusions(connection: TunnelConnection): Promise<void> {\r\n    try {\r\n      // Simulate log analysis (in real implementation, this would analyze actual logs)\r\n      const logEntries = this.getRecentLogEntries(connection.id);\r\n\r\n      for (const logEntry of logEntries) {\r\n        for (const pattern of this.intrusionPatterns) {\r\n          if (pattern.pattern.test(logEntry)) {\r\n            this.reportSecurityEvent(\r\n              connection.id,\r\n              SecurityEventType.SUSPICIOUS_TRAFFIC,\r\n              pattern.threatLevel,\r\n              pattern.description,\r\n              {\r\n                pattern: pattern.name,\r\n                logEntry,\r\n                responseAction: pattern.responseAction\r\n              }\r\n            );\r\n          }\r\n        }\r\n      }\r\n\r\n    } catch (error) {\r\n      this.logger.error(`Intrusion detection failed for connection ${connection.id}`, error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check data integrity\r\n   * \r\n   * @param connection - Tunnel connection\r\n   */\r\n  private async checkDataIntegrity(connection: TunnelConnection): Promise<void> {\r\n    try {\r\n      // Calculate current data integrity hash\r\n      const currentHash = this.calculateDataIntegrityHash(connection.id);\r\n      \r\n      // Get previous hash from traffic analysis\r\n      const analysisHistory = this.trafficAnalysis.get(connection.id) || [];\r\n      const previousAnalysis = analysisHistory[analysisHistory.length - 1];\r\n\r\n      if (previousAnalysis && previousAnalysis.dataIntegrityHash !== currentHash) {\r\n        // Check if the difference is significant\r\n        const hashDifference = this.calculateHashDifference(previousAnalysis.dataIntegrityHash, currentHash);\r\n        \r\n        if (hashDifference > 0.1) { // 10% threshold\r\n          this.reportSecurityEvent(\r\n            connection.id,\r\n            SecurityEventType.DATA_INTEGRITY_VIOLATION,\r\n            ThreatLevel.HIGH,\r\n            'Data integrity violation detected',\r\n            {\r\n              previousHash: previousAnalysis.dataIntegrityHash,\r\n              currentHash,\r\n              difference: hashDifference\r\n            }\r\n          );\r\n\r\n          this.securityMetrics.integrityViolations++;\r\n        }\r\n      }\r\n\r\n    } catch (error) {\r\n      this.logger.error(`Data integrity check failed for connection ${connection.id}`, error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Detect suspicious patterns in traffic analysis\r\n   * \r\n   * @param analysis - Traffic analysis data\r\n   * @returns Array of suspicious pattern names\r\n   */\r\n  private detectSuspiciousPatterns(analysis: TrafficAnalysis): string[] {\r\n    const patterns: string[] = [];\r\n\r\n    // Check for unusual traffic volume\r\n    if (analysis.bytesIn > 100000 || analysis.bytesOut > 100000) {\r\n      patterns.push('High traffic volume');\r\n    }\r\n\r\n    // Check for packet ratio anomalies\r\n    const packetRatio = analysis.packetsIn / Math.max(analysis.packetsOut, 1);\r\n    if (packetRatio > 10 || packetRatio < 0.1) {\r\n      patterns.push('Unusual packet ratio');\r\n    }\r\n\r\n    // Check for potential data exfiltration\r\n    if (analysis.bytesOut > analysis.bytesIn * 2) {\r\n      patterns.push('Potential data exfiltration');\r\n    }\r\n\r\n    return patterns;\r\n  }\r\n\r\n  /**\r\n   * Calculate data integrity hash\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @returns Data integrity hash\r\n   */\r\n  private calculateDataIntegrityHash(connectionId: string): string {\r\n    const connection = this.tunnelManager.getConnection(connectionId);\r\n    if (!connection) return '';\r\n\r\n    const data = JSON.stringify({\r\n      connectionId,\r\n      config: connection.config,\r\n      state: connection.state,\r\n      timestamp: Date.now()\r\n    });\r\n\r\n    return createHash('sha256').update(data).digest('hex');\r\n  }\r\n\r\n  /**\r\n   * Calculate hash difference percentage\r\n   * \r\n   * @param hash1 - First hash\r\n   * @param hash2 - Second hash\r\n   * @returns Difference percentage (0-1)\r\n   */\r\n  private calculateHashDifference(hash1: string, hash2: string): number {\r\n    if (hash1.length !== hash2.length) return 1;\r\n\r\n    let differences = 0;\r\n    for (let i = 0; i < hash1.length; i++) {\r\n      if (hash1[i] !== hash2[i]) {\r\n        differences++;\r\n      }\r\n    }\r\n\r\n    return differences / hash1.length;\r\n  }\r\n\r\n  /**\r\n   * Get recent log entries for analysis\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @returns Array of log entries\r\n   */\r\n  private getRecentLogEntries(connectionId: string): string[] {\r\n    // Simulate log entries (in real implementation, this would read actual logs)\r\n    return [\r\n      `SSH connection established for ${connectionId}`,\r\n      `Data transfer initiated for ${connectionId}`,\r\n      `Normal operation for ${connectionId}`,\r\n      // Add some potentially suspicious entries for testing\r\n      ...(Math.random() > 0.8 ? ['SSH authentication failed for user admin'] : []),\r\n      ...(Math.random() > 0.9 ? ['Port scan detected from 192.168.1.100'] : [])\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Trigger automatic response to security event\r\n   * \r\n   * @param event - Security event\r\n   */\r\n  private async triggerAutomaticResponse(event: SecurityEvent): Promise<void> {\r\n    try {\r\n      const responseActions: string[] = [];\r\n\r\n      switch (event.threatLevel) {\r\n        case ThreatLevel.CRITICAL:\r\n          // Immediate connection termination\r\n          await this.tunnelManager.disconnectTunnel(event.connectionId);\r\n          responseActions.push('Connection terminated');\r\n          break;\r\n\r\n        case ThreatLevel.HIGH:\r\n          // Enhanced monitoring and alerting\r\n          responseActions.push('Enhanced monitoring enabled');\r\n          this.emit('highThreatDetected', event);\r\n          break;\r\n\r\n        case ThreatLevel.MEDIUM:\r\n          // Increased logging and monitoring\r\n          responseActions.push('Increased monitoring');\r\n          break;\r\n\r\n        case ThreatLevel.LOW:\r\n          // Log and continue monitoring\r\n          responseActions.push('Logged for analysis');\r\n          break;\r\n      }\r\n\r\n      // Update event with response actions\r\n      event.responseActions = responseActions;\r\n\r\n      this.logger.info(`Automatic response triggered for event ${event.id}`, { responseActions });\r\n\r\n    } catch (error) {\r\n      this.logger.error(`Automatic response failed for event ${event.id}`, error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Start periodic security scans\r\n   */\r\n  private startPeriodicSecurityScans(): void {\r\n    // Perform security scans every 5 minutes\r\n    setInterval(() => {\r\n      const connections = this.tunnelManager.getAllConnections();\r\n      for (const connection of connections) {\r\n        this.performSecurityScan(connection.id);\r\n      }\r\n    }, 5 * 60 * 1000);\r\n  }\r\n\r\n  /**\r\n   * Update security metrics\r\n   * \r\n   * @param event - Security event\r\n   */\r\n  private updateSecurityMetrics(event: SecurityEvent): void {\r\n    this.securityMetrics.totalEvents++;\r\n    this.securityMetrics.activeThreats++;\r\n\r\n    // Update event type counts\r\n    const typeCount = this.securityMetrics.eventsByType.get(event.type) || 0;\r\n    this.securityMetrics.eventsByType.set(event.type, typeCount + 1);\r\n\r\n    // Update threat level counts\r\n    const threatCount = this.securityMetrics.eventsByThreatLevel.get(event.threatLevel) || 0;\r\n    this.securityMetrics.eventsByThreatLevel.set(event.threatLevel, threatCount + 1);\r\n\r\n    // Calculate system security score\r\n    this.calculateSystemSecurityScore();\r\n  }\r\n\r\n  /**\r\n   * Update anomaly metrics\r\n   * \r\n   * @param analysis - Traffic analysis\r\n   */\r\n  private updateAnomalyMetrics(analysis: TrafficAnalysis): void {\r\n    // Calculate running average of anomaly scores\r\n    const allAnalysis = Array.from(this.trafficAnalysis.values()).flat();\r\n    const totalScore = allAnalysis.reduce((sum, a) => sum + a.anomalyScore, 0);\r\n    this.securityMetrics.averageAnomalyScore = allAnalysis.length > 0 ? totalScore / allAnalysis.length : 0;\r\n  }\r\n\r\n  /**\r\n   * Calculate system security score\r\n   */\r\n  private calculateSystemSecurityScore(): void {\r\n    let score = 100;\r\n\r\n    // Deduct points for active threats\r\n    score -= this.securityMetrics.activeThreats * 10;\r\n\r\n    // Deduct points for high anomaly scores\r\n    if (this.securityMetrics.averageAnomalyScore > 70) {\r\n      score -= (this.securityMetrics.averageAnomalyScore - 70) * 0.5;\r\n    }\r\n\r\n    // Deduct points for integrity violations\r\n    score -= this.securityMetrics.integrityViolations * 5;\r\n\r\n    // Deduct points for critical events\r\n    const criticalEvents = this.securityMetrics.eventsByThreatLevel.get(ThreatLevel.CRITICAL) || 0;\r\n    score -= criticalEvents * 20;\r\n\r\n    this.securityMetrics.systemSecurityScore = Math.max(0, Math.min(100, score));\r\n  }\r\n\r\n  /**\r\n   * Generate unique event ID\r\n   * \r\n   * @returns Unique event identifier\r\n   */\r\n  private generateEventId(): string {\r\n    return `sec_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  /**\r\n   * Cleanup security monitor resources\r\n   */\r\n  cleanup(): void {\r\n    this.stopMonitoring();\r\n    \r\n    // Clean up old events\r\n    const cutoffTime = Date.now() - this.config.eventRetentionPeriod;\r\n    for (const [eventId, event] of this.securityEvents.entries()) {\r\n      if (event.timestamp.getTime() < cutoffTime) {\r\n        this.securityEvents.delete(eventId);\r\n      }\r\n    }\r\n\r\n    this.trafficAnalysis.clear();\r\n    this.logger.info('Tunnel security monitor cleanup completed');\r\n  }\r\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "2371726b051080bf23e2dd0cf96876cc2ea50a5f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_j673vc7wm = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_j673vc7wm();
cov_j673vc7wm().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_j673vc7wm().s[1]++;
exports.TunnelSecurityMonitor = exports.SecurityEventType = exports.ThreatLevel = void 0;
const events_1 =
/* istanbul ignore next */
(cov_j673vc7wm().s[2]++, require("events"));
const crypto_1 =
/* istanbul ignore next */
(cov_j673vc7wm().s[3]++, require("crypto"));
/**
 * Security threat levels
 */
var ThreatLevel;
/* istanbul ignore next */
cov_j673vc7wm().s[4]++;
(function (ThreatLevel) {
  /* istanbul ignore next */
  cov_j673vc7wm().f[0]++;
  cov_j673vc7wm().s[5]++;
  ThreatLevel["LOW"] = "LOW";
  /* istanbul ignore next */
  cov_j673vc7wm().s[6]++;
  ThreatLevel["MEDIUM"] = "MEDIUM";
  /* istanbul ignore next */
  cov_j673vc7wm().s[7]++;
  ThreatLevel["HIGH"] = "HIGH";
  /* istanbul ignore next */
  cov_j673vc7wm().s[8]++;
  ThreatLevel["CRITICAL"] = "CRITICAL";
})(
/* istanbul ignore next */
(cov_j673vc7wm().b[0][0]++, ThreatLevel) ||
/* istanbul ignore next */
(cov_j673vc7wm().b[0][1]++, exports.ThreatLevel = ThreatLevel = {}));
/**
 * Security event types
 */
var SecurityEventType;
/* istanbul ignore next */
cov_j673vc7wm().s[9]++;
(function (SecurityEventType) {
  /* istanbul ignore next */
  cov_j673vc7wm().f[1]++;
  cov_j673vc7wm().s[10]++;
  SecurityEventType["UNAUTHORIZED_ACCESS"] = "UNAUTHORIZED_ACCESS";
  /* istanbul ignore next */
  cov_j673vc7wm().s[11]++;
  SecurityEventType["SUSPICIOUS_TRAFFIC"] = "SUSPICIOUS_TRAFFIC";
  /* istanbul ignore next */
  cov_j673vc7wm().s[12]++;
  SecurityEventType["TUNNEL_HIJACK_ATTEMPT"] = "TUNNEL_HIJACK_ATTEMPT";
  /* istanbul ignore next */
  cov_j673vc7wm().s[13]++;
  SecurityEventType["DATA_INTEGRITY_VIOLATION"] = "DATA_INTEGRITY_VIOLATION";
  /* istanbul ignore next */
  cov_j673vc7wm().s[14]++;
  SecurityEventType["ENCRYPTION_FAILURE"] = "ENCRYPTION_FAILURE";
  /* istanbul ignore next */
  cov_j673vc7wm().s[15]++;
  SecurityEventType["AUTHENTICATION_FAILURE"] = "AUTHENTICATION_FAILURE";
  /* istanbul ignore next */
  cov_j673vc7wm().s[16]++;
  SecurityEventType["TRAFFIC_ANOMALY"] = "TRAFFIC_ANOMALY";
  /* istanbul ignore next */
  cov_j673vc7wm().s[17]++;
  SecurityEventType["CONNECTION_TAMPERING"] = "CONNECTION_TAMPERING";
})(
/* istanbul ignore next */
(cov_j673vc7wm().b[1][0]++, SecurityEventType) ||
/* istanbul ignore next */
(cov_j673vc7wm().b[1][1]++, exports.SecurityEventType = SecurityEventType = {}));
/**
 * Tunnel Security Monitor
 * Monitors SSH tunnel security with traffic analysis, intrusion detection, and integrity checking
 */
class TunnelSecurityMonitor extends
/* istanbul ignore next */
(events_1.EventEmitter) {
  logger;
  tunnelManager;
  encryptionService;
  config;
  securityEvents;
  trafficAnalysis;
  intrusionPatterns;
  securityMetrics;
  monitoringIntervals;
  isMonitoring;
  constructor(logger, tunnelManager, encryptionService, config) {
    /* istanbul ignore next */
    cov_j673vc7wm().f[2]++;
    cov_j673vc7wm().s[18]++;
    super();
    /* istanbul ignore next */
    cov_j673vc7wm().s[19]++;
    this.logger = logger;
    /* istanbul ignore next */
    cov_j673vc7wm().s[20]++;
    this.tunnelManager = tunnelManager;
    /* istanbul ignore next */
    cov_j673vc7wm().s[21]++;
    this.encryptionService = encryptionService;
    /* istanbul ignore next */
    cov_j673vc7wm().s[22]++;
    this.securityEvents = new Map();
    /* istanbul ignore next */
    cov_j673vc7wm().s[23]++;
    this.trafficAnalysis = new Map();
    /* istanbul ignore next */
    cov_j673vc7wm().s[24]++;
    this.monitoringIntervals = new Map();
    /* istanbul ignore next */
    cov_j673vc7wm().s[25]++;
    this.isMonitoring = false;
    // Default configuration
    /* istanbul ignore next */
    cov_j673vc7wm().s[26]++;
    this.config = {
      enableTrafficMonitoring: true,
      enableIntrusionDetection: true,
      enableDataIntegrityChecking: true,
      trafficAnalysisInterval: 30000,
      // 30 seconds
      maxAnomalyScore: 70,
      enableAutoResponse: true,
      threatResponseTimeout: 10000,
      eventRetentionPeriod: 7 * 24 * 60 * 60 * 1000,
      // 7 days
      ...config
    };
    // Initialize security metrics
    /* istanbul ignore next */
    cov_j673vc7wm().s[27]++;
    this.securityMetrics = {
      totalEvents: 0,
      eventsByType: new Map(),
      eventsByThreatLevel: new Map(),
      averageAnomalyScore: 0,
      integrityViolations: 0,
      resolvedEvents: 0,
      activeThreats: 0,
      lastSecurityScan: new Date(),
      systemSecurityScore: 100
    };
    // Initialize intrusion detection patterns
    /* istanbul ignore next */
    cov_j673vc7wm().s[28]++;
    this.initializeIntrusionPatterns();
    /* istanbul ignore next */
    cov_j673vc7wm().s[29]++;
    this.setupEventListeners();
    /* istanbul ignore next */
    cov_j673vc7wm().s[30]++;
    this.logger.info('Tunnel Security Monitor initialized', this.config);
  }
  /**
   * Start security monitoring
   */
  startMonitoring() {
    /* istanbul ignore next */
    cov_j673vc7wm().f[3]++;
    cov_j673vc7wm().s[31]++;
    if (this.isMonitoring) {
      /* istanbul ignore next */
      cov_j673vc7wm().b[2][0]++;
      cov_j673vc7wm().s[32]++;
      this.logger.warn('Security monitoring is already running');
      /* istanbul ignore next */
      cov_j673vc7wm().s[33]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_j673vc7wm().b[2][1]++;
    }
    cov_j673vc7wm().s[34]++;
    this.isMonitoring = true;
    /* istanbul ignore next */
    cov_j673vc7wm().s[35]++;
    this.logger.info('Starting tunnel security monitoring');
    // Monitor existing connections
    const connections =
    /* istanbul ignore next */
    (cov_j673vc7wm().s[36]++, this.tunnelManager.getAllConnections());
    /* istanbul ignore next */
    cov_j673vc7wm().s[37]++;
    for (const connection of connections) {
      /* istanbul ignore next */
      cov_j673vc7wm().s[38]++;
      this.startMonitoringConnection(connection.id);
    }
    // Start periodic security scans
    /* istanbul ignore next */
    cov_j673vc7wm().s[39]++;
    this.startPeriodicSecurityScans();
    /* istanbul ignore next */
    cov_j673vc7wm().s[40]++;
    this.emit('securityMonitoringStarted');
  }
  /**
   * Stop security monitoring
   */
  stopMonitoring() {
    /* istanbul ignore next */
    cov_j673vc7wm().f[4]++;
    cov_j673vc7wm().s[41]++;
    if (!this.isMonitoring) {
      /* istanbul ignore next */
      cov_j673vc7wm().b[3][0]++;
      cov_j673vc7wm().s[42]++;
      this.logger.warn('Security monitoring is not running');
      /* istanbul ignore next */
      cov_j673vc7wm().s[43]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_j673vc7wm().b[3][1]++;
    }
    cov_j673vc7wm().s[44]++;
    this.isMonitoring = false;
    /* istanbul ignore next */
    cov_j673vc7wm().s[45]++;
    this.logger.info('Stopping tunnel security monitoring');
    // Clear all monitoring intervals
    /* istanbul ignore next */
    cov_j673vc7wm().s[46]++;
    for (const [connectionId, interval] of this.monitoringIntervals.entries()) {
      /* istanbul ignore next */
      cov_j673vc7wm().s[47]++;
      clearInterval(interval);
      /* istanbul ignore next */
      cov_j673vc7wm().s[48]++;
      this.monitoringIntervals.delete(connectionId);
    }
    /* istanbul ignore next */
    cov_j673vc7wm().s[49]++;
    this.emit('securityMonitoringStopped');
  }
  /**
   * Start monitoring a specific connection
   *
   * @param connectionId - Connection identifier
   */
  startMonitoringConnection(connectionId) {
    /* istanbul ignore next */
    cov_j673vc7wm().f[5]++;
    cov_j673vc7wm().s[50]++;
    if (this.monitoringIntervals.has(connectionId)) {
      /* istanbul ignore next */
      cov_j673vc7wm().b[4][0]++;
      cov_j673vc7wm().s[51]++;
      this.logger.debug(`Already monitoring connection: ${connectionId}`);
      /* istanbul ignore next */
      cov_j673vc7wm().s[52]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_j673vc7wm().b[4][1]++;
    }
    cov_j673vc7wm().s[53]++;
    this.logger.info(`Starting security monitoring for connection: ${connectionId}`);
    // Initialize traffic analysis history
    /* istanbul ignore next */
    cov_j673vc7wm().s[54]++;
    this.trafficAnalysis.set(connectionId, []);
    // Start periodic traffic analysis
    /* istanbul ignore next */
    cov_j673vc7wm().s[55]++;
    if (this.config.enableTrafficMonitoring) {
      /* istanbul ignore next */
      cov_j673vc7wm().b[5][0]++;
      const interval =
      /* istanbul ignore next */
      (cov_j673vc7wm().s[56]++, setInterval(async () => {
        /* istanbul ignore next */
        cov_j673vc7wm().f[6]++;
        cov_j673vc7wm().s[57]++;
        try {
          /* istanbul ignore next */
          cov_j673vc7wm().s[58]++;
          await this.analyzeTraffic(connectionId);
        } catch (error) {
          /* istanbul ignore next */
          cov_j673vc7wm().s[59]++;
          this.logger.error(`Traffic analysis failed for connection ${connectionId}`, error);
        }
      }, this.config.trafficAnalysisInterval));
      /* istanbul ignore next */
      cov_j673vc7wm().s[60]++;
      this.monitoringIntervals.set(connectionId, interval);
    } else
    /* istanbul ignore next */
    {
      cov_j673vc7wm().b[5][1]++;
    }
    // Perform initial security scan
    cov_j673vc7wm().s[61]++;
    setTimeout(() => {
      /* istanbul ignore next */
      cov_j673vc7wm().f[7]++;
      cov_j673vc7wm().s[62]++;
      return this.performSecurityScan(connectionId);
    }, 1000);
  }
  /**
   * Stop monitoring a specific connection
   *
   * @param connectionId - Connection identifier
   */
  stopMonitoringConnection(connectionId) {
    /* istanbul ignore next */
    cov_j673vc7wm().f[8]++;
    const interval =
    /* istanbul ignore next */
    (cov_j673vc7wm().s[63]++, this.monitoringIntervals.get(connectionId));
    /* istanbul ignore next */
    cov_j673vc7wm().s[64]++;
    if (interval) {
      /* istanbul ignore next */
      cov_j673vc7wm().b[6][0]++;
      cov_j673vc7wm().s[65]++;
      clearInterval(interval);
      /* istanbul ignore next */
      cov_j673vc7wm().s[66]++;
      this.monitoringIntervals.delete(connectionId);
      /* istanbul ignore next */
      cov_j673vc7wm().s[67]++;
      this.logger.info(`Stopped security monitoring for connection: ${connectionId}`);
    } else
    /* istanbul ignore next */
    {
      cov_j673vc7wm().b[6][1]++;
    }
    // Clean up traffic analysis data
    cov_j673vc7wm().s[68]++;
    this.trafficAnalysis.delete(connectionId);
  }
  /**
   * Report security event
   *
   * @param connectionId - Connection identifier
   * @param type - Security event type
   * @param threatLevel - Threat level
   * @param description - Event description
   * @param metadata - Additional metadata
   */
  reportSecurityEvent(connectionId, type, threatLevel, description, metadata =
  /* istanbul ignore next */
  (cov_j673vc7wm().b[7][0]++, {})) {
    /* istanbul ignore next */
    cov_j673vc7wm().f[9]++;
    const event =
    /* istanbul ignore next */
    (cov_j673vc7wm().s[69]++, {
      id: this.generateEventId(),
      timestamp: new Date(),
      connectionId,
      type,
      threatLevel,
      description,
      metadata,
      resolved: false,
      responseActions: []
    });
    // Store event
    /* istanbul ignore next */
    cov_j673vc7wm().s[70]++;
    this.securityEvents.set(event.id, event);
    // Update metrics
    /* istanbul ignore next */
    cov_j673vc7wm().s[71]++;
    this.updateSecurityMetrics(event);
    // Log event
    /* istanbul ignore next */
    cov_j673vc7wm().s[72]++;
    this.logger.warn(`Security event detected: ${event.id}`, {
      connectionId,
      type,
      threatLevel,
      description
    });
    // Emit event
    /* istanbul ignore next */
    cov_j673vc7wm().s[73]++;
    this.emit('securityEvent', event);
    // Trigger automatic response if enabled
    /* istanbul ignore next */
    cov_j673vc7wm().s[74]++;
    if (this.config.enableAutoResponse) {
      /* istanbul ignore next */
      cov_j673vc7wm().b[8][0]++;
      cov_j673vc7wm().s[75]++;
      this.triggerAutomaticResponse(event);
    } else
    /* istanbul ignore next */
    {
      cov_j673vc7wm().b[8][1]++;
    }
    cov_j673vc7wm().s[76]++;
    return event;
  }
  /**
   * Resolve security event
   *
   * @param eventId - Event identifier
   * @param responseActions - Actions taken to resolve the event
   */
  resolveSecurityEvent(eventId, responseActions) {
    /* istanbul ignore next */
    cov_j673vc7wm().f[10]++;
    const event =
    /* istanbul ignore next */
    (cov_j673vc7wm().s[77]++, this.securityEvents.get(eventId));
    /* istanbul ignore next */
    cov_j673vc7wm().s[78]++;
    if (!event) {
      /* istanbul ignore next */
      cov_j673vc7wm().b[9][0]++;
      cov_j673vc7wm().s[79]++;
      this.logger.warn(`Security event not found: ${eventId}`);
      /* istanbul ignore next */
      cov_j673vc7wm().s[80]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_j673vc7wm().b[9][1]++;
    }
    cov_j673vc7wm().s[81]++;
    event.resolved = true;
    /* istanbul ignore next */
    cov_j673vc7wm().s[82]++;
    event.resolvedAt = new Date();
    /* istanbul ignore next */
    cov_j673vc7wm().s[83]++;
    event.responseActions = responseActions;
    /* istanbul ignore next */
    cov_j673vc7wm().s[84]++;
    this.securityMetrics.resolvedEvents++;
    /* istanbul ignore next */
    cov_j673vc7wm().s[85]++;
    this.securityMetrics.activeThreats = Math.max(0, this.securityMetrics.activeThreats - 1);
    /* istanbul ignore next */
    cov_j673vc7wm().s[86]++;
    this.logger.info(`Security event resolved: ${eventId}`, {
      responseActions
    });
    /* istanbul ignore next */
    cov_j673vc7wm().s[87]++;
    this.emit('securityEventResolved', event);
  }
  /**
   * Get security events
   *
   * @param connectionId - Optional connection filter
   * @param threatLevel - Optional threat level filter
   * @param limit - Maximum number of events to return
   * @returns Array of security events
   */
  getSecurityEvents(connectionId, threatLevel, limit) {
    /* istanbul ignore next */
    cov_j673vc7wm().f[11]++;
    let events =
    /* istanbul ignore next */
    (cov_j673vc7wm().s[88]++, Array.from(this.securityEvents.values()));
    // Apply filters
    /* istanbul ignore next */
    cov_j673vc7wm().s[89]++;
    if (connectionId) {
      /* istanbul ignore next */
      cov_j673vc7wm().b[10][0]++;
      cov_j673vc7wm().s[90]++;
      events = events.filter(event => {
        /* istanbul ignore next */
        cov_j673vc7wm().f[12]++;
        cov_j673vc7wm().s[91]++;
        return event.connectionId === connectionId;
      });
    } else
    /* istanbul ignore next */
    {
      cov_j673vc7wm().b[10][1]++;
    }
    cov_j673vc7wm().s[92]++;
    if (threatLevel) {
      /* istanbul ignore next */
      cov_j673vc7wm().b[11][0]++;
      cov_j673vc7wm().s[93]++;
      events = events.filter(event => {
        /* istanbul ignore next */
        cov_j673vc7wm().f[13]++;
        cov_j673vc7wm().s[94]++;
        return event.threatLevel === threatLevel;
      });
    } else
    /* istanbul ignore next */
    {
      cov_j673vc7wm().b[11][1]++;
    }
    // Sort by timestamp (newest first)
    cov_j673vc7wm().s[95]++;
    events.sort((a, b) => {
      /* istanbul ignore next */
      cov_j673vc7wm().f[14]++;
      cov_j673vc7wm().s[96]++;
      return b.timestamp.getTime() - a.timestamp.getTime();
    });
    // Apply limit
    /* istanbul ignore next */
    cov_j673vc7wm().s[97]++;
    if (limit) {
      /* istanbul ignore next */
      cov_j673vc7wm().b[12][0]++;
      cov_j673vc7wm().s[98]++;
      events = events.slice(0, limit);
    } else
    /* istanbul ignore next */
    {
      cov_j673vc7wm().b[12][1]++;
    }
    cov_j673vc7wm().s[99]++;
    return events;
  }
  /**
   * Get traffic analysis data
   *
   * @param connectionId - Connection identifier
   * @param limit - Maximum number of analysis entries to return
   * @returns Array of traffic analysis results
   */
  getTrafficAnalysis(connectionId, limit) {
    /* istanbul ignore next */
    cov_j673vc7wm().f[15]++;
    const analysis =
    /* istanbul ignore next */
    (cov_j673vc7wm().s[100]++,
    /* istanbul ignore next */
    (cov_j673vc7wm().b[13][0]++, this.trafficAnalysis.get(connectionId)) ||
    /* istanbul ignore next */
    (cov_j673vc7wm().b[13][1]++, []));
    /* istanbul ignore next */
    cov_j673vc7wm().s[101]++;
    return limit ?
    /* istanbul ignore next */
    (cov_j673vc7wm().b[14][0]++, analysis.slice(-limit)) :
    /* istanbul ignore next */
    (cov_j673vc7wm().b[14][1]++, [...analysis]);
  }
  /**
   * Get security metrics
   *
   * @returns Current security metrics
   */
  getSecurityMetrics() {
    /* istanbul ignore next */
    cov_j673vc7wm().f[16]++;
    cov_j673vc7wm().s[102]++;
    return {
      ...this.securityMetrics
    };
  }
  /**
   * Perform comprehensive security scan
   *
   * @param connectionId - Connection identifier
   */
  async performSecurityScan(connectionId) {
    /* istanbul ignore next */
    cov_j673vc7wm().f[17]++;
    const connection =
    /* istanbul ignore next */
    (cov_j673vc7wm().s[103]++, this.tunnelManager.getConnection(connectionId));
    /* istanbul ignore next */
    cov_j673vc7wm().s[104]++;
    if (!connection) {
      /* istanbul ignore next */
      cov_j673vc7wm().b[15][0]++;
      cov_j673vc7wm().s[105]++;
      this.logger.warn(`Connection not found for security scan: ${connectionId}`);
      /* istanbul ignore next */
      cov_j673vc7wm().s[106]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_j673vc7wm().b[15][1]++;
    }
    cov_j673vc7wm().s[107]++;
    try {
      /* istanbul ignore next */
      cov_j673vc7wm().s[108]++;
      this.logger.debug(`Performing security scan for connection: ${connectionId}`);
      // Check connection integrity
      /* istanbul ignore next */
      cov_j673vc7wm().s[109]++;
      await this.checkConnectionIntegrity(connection);
      // Analyze traffic patterns
      /* istanbul ignore next */
      cov_j673vc7wm().s[110]++;
      if (this.config.enableTrafficMonitoring) {
        /* istanbul ignore next */
        cov_j673vc7wm().b[16][0]++;
        cov_j673vc7wm().s[111]++;
        await this.analyzeTraffic(connectionId);
      } else
      /* istanbul ignore next */
      {
        cov_j673vc7wm().b[16][1]++;
      }
      // Check for intrusion attempts
      cov_j673vc7wm().s[112]++;
      if (this.config.enableIntrusionDetection) {
        /* istanbul ignore next */
        cov_j673vc7wm().b[17][0]++;
        cov_j673vc7wm().s[113]++;
        await this.detectIntrusions(connection);
      } else
      /* istanbul ignore next */
      {
        cov_j673vc7wm().b[17][1]++;
      }
      // Verify data integrity
      cov_j673vc7wm().s[114]++;
      if (this.config.enableDataIntegrityChecking) {
        /* istanbul ignore next */
        cov_j673vc7wm().b[18][0]++;
        cov_j673vc7wm().s[115]++;
        await this.checkDataIntegrity(connection);
      } else
      /* istanbul ignore next */
      {
        cov_j673vc7wm().b[18][1]++;
      }
      cov_j673vc7wm().s[116]++;
      this.securityMetrics.lastSecurityScan = new Date();
    } catch (error) {
      /* istanbul ignore next */
      cov_j673vc7wm().s[117]++;
      this.logger.error(`Security scan failed for connection ${connectionId}`, error);
      /* istanbul ignore next */
      cov_j673vc7wm().s[118]++;
      this.reportSecurityEvent(connectionId, SecurityEventType.ENCRYPTION_FAILURE, ThreatLevel.HIGH, `Security scan failed: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_j673vc7wm().b[19][0]++, error.message) :
      /* istanbul ignore next */
      (cov_j673vc7wm().b[19][1]++, String(error))}`, {
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_j673vc7wm().b[20][0]++, error.stack) :
        /* istanbul ignore next */
        (cov_j673vc7wm().b[20][1]++, String(error))
      });
    }
  }
  /**
   * Setup event listeners
   */
  setupEventListeners() {
    /* istanbul ignore next */
    cov_j673vc7wm().f[18]++;
    cov_j673vc7wm().s[119]++;
    // Listen for new tunnel connections
    this.tunnelManager.on('tunnelConnected', connection => {
      /* istanbul ignore next */
      cov_j673vc7wm().f[19]++;
      cov_j673vc7wm().s[120]++;
      if (this.isMonitoring) {
        /* istanbul ignore next */
        cov_j673vc7wm().b[21][0]++;
        cov_j673vc7wm().s[121]++;
        this.startMonitoringConnection(connection.id);
      } else
      /* istanbul ignore next */
      {
        cov_j673vc7wm().b[21][1]++;
      }
    });
    // Listen for tunnel disconnections
    /* istanbul ignore next */
    cov_j673vc7wm().s[122]++;
    this.tunnelManager.on('tunnelDisconnected', connection => {
      /* istanbul ignore next */
      cov_j673vc7wm().f[20]++;
      cov_j673vc7wm().s[123]++;
      this.stopMonitoringConnection(connection.id);
    });
    // Listen for tunnel errors (potential security issues)
    /* istanbul ignore next */
    cov_j673vc7wm().s[124]++;
    this.tunnelManager.on('tunnelError', (connection, error) => {
      /* istanbul ignore next */
      cov_j673vc7wm().f[21]++;
      cov_j673vc7wm().s[125]++;
      this.reportSecurityEvent(connection.id, SecurityEventType.CONNECTION_TAMPERING, ThreatLevel.MEDIUM, `Tunnel error detected: ${error.message}`, {
        error: error.stack
      });
    });
  }
  /**
   * Initialize intrusion detection patterns
   */
  initializeIntrusionPatterns() {
    /* istanbul ignore next */
    cov_j673vc7wm().f[22]++;
    cov_j673vc7wm().s[126]++;
    this.intrusionPatterns = [{
      name: 'Port Scanning',
      pattern: /(?:nmap|masscan|zmap)/i,
      threatLevel: ThreatLevel.MEDIUM,
      description: 'Port scanning activity detected',
      responseAction: 'Block source IP'
    }, {
      name: 'SQL Injection',
      pattern: /(?:union|select|insert|update|delete|drop|create|alter)\s+/i,
      threatLevel: ThreatLevel.HIGH,
      description: 'SQL injection attempt detected',
      responseAction: 'Block connection and alert'
    }, {
      name: 'SSH Brute Force',
      pattern: /(?:ssh|sshd).*(?:failed|invalid|authentication)/i,
      threatLevel: ThreatLevel.HIGH,
      description: 'SSH brute force attack detected',
      responseAction: 'Implement rate limiting'
    }, {
      name: 'Malware Signature',
      pattern: /(?:malware|virus|trojan|backdoor|rootkit)/i,
      threatLevel: ThreatLevel.CRITICAL,
      description: 'Malware signature detected',
      responseAction: 'Immediate connection termination'
    }, {
      name: 'Data Exfiltration',
      pattern: /(?:wget|curl|nc|netcat).*(?:http|ftp|tcp)/i,
      threatLevel: ThreatLevel.HIGH,
      description: 'Potential data exfiltration detected',
      responseAction: 'Monitor and analyze traffic'
    }];
  }
  /**
   * Analyze traffic for security threats
   *
   * @param connectionId - Connection identifier
   */
  async analyzeTraffic(connectionId) {
    /* istanbul ignore next */
    cov_j673vc7wm().f[23]++;
    const connection =
    /* istanbul ignore next */
    (cov_j673vc7wm().s[127]++, this.tunnelManager.getConnection(connectionId));
    /* istanbul ignore next */
    cov_j673vc7wm().s[128]++;
    if (!connection) {
      /* istanbul ignore next */
      cov_j673vc7wm().b[22][0]++;
      cov_j673vc7wm().s[129]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_j673vc7wm().b[22][1]++;
    }
    cov_j673vc7wm().s[130]++;
    try {
      // Simulate traffic analysis (in real implementation, this would analyze actual network traffic)
      const analysis =
      /* istanbul ignore next */
      (cov_j673vc7wm().s[131]++, {
        connectionId,
        timestamp: new Date(),
        bytesIn: Math.floor(Math.random() * 10000),
        bytesOut: Math.floor(Math.random() * 10000),
        packetsIn: Math.floor(Math.random() * 100),
        packetsOut: Math.floor(Math.random() * 100),
        suspiciousPatterns: [],
        anomalyScore: Math.floor(Math.random() * 100),
        encryptionIntegrity: true,
        dataIntegrityHash: this.calculateDataIntegrityHash(connectionId)
      });
      // Check for suspicious patterns
      /* istanbul ignore next */
      cov_j673vc7wm().s[132]++;
      analysis.suspiciousPatterns = this.detectSuspiciousPatterns(analysis);
      // Check anomaly score
      /* istanbul ignore next */
      cov_j673vc7wm().s[133]++;
      if (analysis.anomalyScore > this.config.maxAnomalyScore) {
        /* istanbul ignore next */
        cov_j673vc7wm().b[23][0]++;
        cov_j673vc7wm().s[134]++;
        this.reportSecurityEvent(connectionId, SecurityEventType.TRAFFIC_ANOMALY, analysis.anomalyScore > 90 ?
        /* istanbul ignore next */
        (cov_j673vc7wm().b[24][0]++, ThreatLevel.HIGH) :
        /* istanbul ignore next */
        (cov_j673vc7wm().b[24][1]++, ThreatLevel.MEDIUM), `High traffic anomaly score: ${analysis.anomalyScore}`, {
          analysis
        });
      } else
      /* istanbul ignore next */
      {
        cov_j673vc7wm().b[23][1]++;
      }
      // Store analysis
      const analysisHistory =
      /* istanbul ignore next */
      (cov_j673vc7wm().s[135]++,
      /* istanbul ignore next */
      (cov_j673vc7wm().b[25][0]++, this.trafficAnalysis.get(connectionId)) ||
      /* istanbul ignore next */
      (cov_j673vc7wm().b[25][1]++, []));
      /* istanbul ignore next */
      cov_j673vc7wm().s[136]++;
      analysisHistory.push(analysis);
      // Limit history size
      const maxHistorySize =
      /* istanbul ignore next */
      (cov_j673vc7wm().s[137]++, 1000);
      /* istanbul ignore next */
      cov_j673vc7wm().s[138]++;
      if (analysisHistory.length > maxHistorySize) {
        /* istanbul ignore next */
        cov_j673vc7wm().b[26][0]++;
        cov_j673vc7wm().s[139]++;
        analysisHistory.splice(0, analysisHistory.length - maxHistorySize);
      } else
      /* istanbul ignore next */
      {
        cov_j673vc7wm().b[26][1]++;
      }
      cov_j673vc7wm().s[140]++;
      this.trafficAnalysis.set(connectionId, analysisHistory);
      // Update metrics
      /* istanbul ignore next */
      cov_j673vc7wm().s[141]++;
      this.updateAnomalyMetrics(analysis);
    } catch (error) {
      /* istanbul ignore next */
      cov_j673vc7wm().s[142]++;
      this.logger.error(`Traffic analysis failed for connection ${connectionId}`, error);
    }
  }
  /**
   * Check connection integrity
   *
   * @param connection - Tunnel connection
   */
  async checkConnectionIntegrity(connection) {
    /* istanbul ignore next */
    cov_j673vc7wm().f[24]++;
    cov_j673vc7wm().s[143]++;
    try {
      /* istanbul ignore next */
      cov_j673vc7wm().s[144]++;
      // Verify connection state
      if (
      /* istanbul ignore next */
      (cov_j673vc7wm().b[28][0]++, connection.process) &&
      /* istanbul ignore next */
      (cov_j673vc7wm().b[28][1]++, connection.process.killed)) {
        /* istanbul ignore next */
        cov_j673vc7wm().b[27][0]++;
        cov_j673vc7wm().s[145]++;
        this.reportSecurityEvent(connection.id, SecurityEventType.CONNECTION_TAMPERING, ThreatLevel.HIGH, 'Connection process was terminated unexpectedly', {
          processKilled: true
        });
      } else
      /* istanbul ignore next */
      {
        cov_j673vc7wm().b[27][1]++;
      }
      // Check for unusual connection parameters
      cov_j673vc7wm().s[146]++;
      if (
      /* istanbul ignore next */
      (cov_j673vc7wm().b[30][0]++, connection.config.localPort < 1024) &&
      /* istanbul ignore next */
      (cov_j673vc7wm().b[30][1]++, process.getuid) &&
      /* istanbul ignore next */
      (cov_j673vc7wm().b[30][2]++, process.getuid() !== 0)) {
        /* istanbul ignore next */
        cov_j673vc7wm().b[29][0]++;
        cov_j673vc7wm().s[147]++;
        this.reportSecurityEvent(connection.id, SecurityEventType.UNAUTHORIZED_ACCESS, ThreatLevel.MEDIUM, 'Privileged port usage without root access', {
          localPort: connection.config.localPort
        });
      } else
      /* istanbul ignore next */
      {
        cov_j673vc7wm().b[29][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_j673vc7wm().s[148]++;
      this.logger.error(`Connection integrity check failed for ${connection.id}`, error);
    }
  }
  /**
   * Detect intrusion attempts
   *
   * @param connection - Tunnel connection
   */
  async detectIntrusions(connection) {
    /* istanbul ignore next */
    cov_j673vc7wm().f[25]++;
    cov_j673vc7wm().s[149]++;
    try {
      // Simulate log analysis (in real implementation, this would analyze actual logs)
      const logEntries =
      /* istanbul ignore next */
      (cov_j673vc7wm().s[150]++, this.getRecentLogEntries(connection.id));
      /* istanbul ignore next */
      cov_j673vc7wm().s[151]++;
      for (const logEntry of logEntries) {
        /* istanbul ignore next */
        cov_j673vc7wm().s[152]++;
        for (const pattern of this.intrusionPatterns) {
          /* istanbul ignore next */
          cov_j673vc7wm().s[153]++;
          if (pattern.pattern.test(logEntry)) {
            /* istanbul ignore next */
            cov_j673vc7wm().b[31][0]++;
            cov_j673vc7wm().s[154]++;
            this.reportSecurityEvent(connection.id, SecurityEventType.SUSPICIOUS_TRAFFIC, pattern.threatLevel, pattern.description, {
              pattern: pattern.name,
              logEntry,
              responseAction: pattern.responseAction
            });
          } else
          /* istanbul ignore next */
          {
            cov_j673vc7wm().b[31][1]++;
          }
        }
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_j673vc7wm().s[155]++;
      this.logger.error(`Intrusion detection failed for connection ${connection.id}`, error);
    }
  }
  /**
   * Check data integrity
   *
   * @param connection - Tunnel connection
   */
  async checkDataIntegrity(connection) {
    /* istanbul ignore next */
    cov_j673vc7wm().f[26]++;
    cov_j673vc7wm().s[156]++;
    try {
      // Calculate current data integrity hash
      const currentHash =
      /* istanbul ignore next */
      (cov_j673vc7wm().s[157]++, this.calculateDataIntegrityHash(connection.id));
      // Get previous hash from traffic analysis
      const analysisHistory =
      /* istanbul ignore next */
      (cov_j673vc7wm().s[158]++,
      /* istanbul ignore next */
      (cov_j673vc7wm().b[32][0]++, this.trafficAnalysis.get(connection.id)) ||
      /* istanbul ignore next */
      (cov_j673vc7wm().b[32][1]++, []));
      const previousAnalysis =
      /* istanbul ignore next */
      (cov_j673vc7wm().s[159]++, analysisHistory[analysisHistory.length - 1]);
      /* istanbul ignore next */
      cov_j673vc7wm().s[160]++;
      if (
      /* istanbul ignore next */
      (cov_j673vc7wm().b[34][0]++, previousAnalysis) &&
      /* istanbul ignore next */
      (cov_j673vc7wm().b[34][1]++, previousAnalysis.dataIntegrityHash !== currentHash)) {
        /* istanbul ignore next */
        cov_j673vc7wm().b[33][0]++;
        // Check if the difference is significant
        const hashDifference =
        /* istanbul ignore next */
        (cov_j673vc7wm().s[161]++, this.calculateHashDifference(previousAnalysis.dataIntegrityHash, currentHash));
        /* istanbul ignore next */
        cov_j673vc7wm().s[162]++;
        if (hashDifference > 0.1) {
          /* istanbul ignore next */
          cov_j673vc7wm().b[35][0]++;
          cov_j673vc7wm().s[163]++;
          // 10% threshold
          this.reportSecurityEvent(connection.id, SecurityEventType.DATA_INTEGRITY_VIOLATION, ThreatLevel.HIGH, 'Data integrity violation detected', {
            previousHash: previousAnalysis.dataIntegrityHash,
            currentHash,
            difference: hashDifference
          });
          /* istanbul ignore next */
          cov_j673vc7wm().s[164]++;
          this.securityMetrics.integrityViolations++;
        } else
        /* istanbul ignore next */
        {
          cov_j673vc7wm().b[35][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_j673vc7wm().b[33][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_j673vc7wm().s[165]++;
      this.logger.error(`Data integrity check failed for connection ${connection.id}`, error);
    }
  }
  /**
   * Detect suspicious patterns in traffic analysis
   *
   * @param analysis - Traffic analysis data
   * @returns Array of suspicious pattern names
   */
  detectSuspiciousPatterns(analysis) {
    /* istanbul ignore next */
    cov_j673vc7wm().f[27]++;
    const patterns =
    /* istanbul ignore next */
    (cov_j673vc7wm().s[166]++, []);
    // Check for unusual traffic volume
    /* istanbul ignore next */
    cov_j673vc7wm().s[167]++;
    if (
    /* istanbul ignore next */
    (cov_j673vc7wm().b[37][0]++, analysis.bytesIn > 100000) ||
    /* istanbul ignore next */
    (cov_j673vc7wm().b[37][1]++, analysis.bytesOut > 100000)) {
      /* istanbul ignore next */
      cov_j673vc7wm().b[36][0]++;
      cov_j673vc7wm().s[168]++;
      patterns.push('High traffic volume');
    } else
    /* istanbul ignore next */
    {
      cov_j673vc7wm().b[36][1]++;
    }
    // Check for packet ratio anomalies
    const packetRatio =
    /* istanbul ignore next */
    (cov_j673vc7wm().s[169]++, analysis.packetsIn / Math.max(analysis.packetsOut, 1));
    /* istanbul ignore next */
    cov_j673vc7wm().s[170]++;
    if (
    /* istanbul ignore next */
    (cov_j673vc7wm().b[39][0]++, packetRatio > 10) ||
    /* istanbul ignore next */
    (cov_j673vc7wm().b[39][1]++, packetRatio < 0.1)) {
      /* istanbul ignore next */
      cov_j673vc7wm().b[38][0]++;
      cov_j673vc7wm().s[171]++;
      patterns.push('Unusual packet ratio');
    } else
    /* istanbul ignore next */
    {
      cov_j673vc7wm().b[38][1]++;
    }
    // Check for potential data exfiltration
    cov_j673vc7wm().s[172]++;
    if (analysis.bytesOut > analysis.bytesIn * 2) {
      /* istanbul ignore next */
      cov_j673vc7wm().b[40][0]++;
      cov_j673vc7wm().s[173]++;
      patterns.push('Potential data exfiltration');
    } else
    /* istanbul ignore next */
    {
      cov_j673vc7wm().b[40][1]++;
    }
    cov_j673vc7wm().s[174]++;
    return patterns;
  }
  /**
   * Calculate data integrity hash
   *
   * @param connectionId - Connection identifier
   * @returns Data integrity hash
   */
  calculateDataIntegrityHash(connectionId) {
    /* istanbul ignore next */
    cov_j673vc7wm().f[28]++;
    const connection =
    /* istanbul ignore next */
    (cov_j673vc7wm().s[175]++, this.tunnelManager.getConnection(connectionId));
    /* istanbul ignore next */
    cov_j673vc7wm().s[176]++;
    if (!connection) {
      /* istanbul ignore next */
      cov_j673vc7wm().b[41][0]++;
      cov_j673vc7wm().s[177]++;
      return '';
    } else
    /* istanbul ignore next */
    {
      cov_j673vc7wm().b[41][1]++;
    }
    const data =
    /* istanbul ignore next */
    (cov_j673vc7wm().s[178]++, JSON.stringify({
      connectionId,
      config: connection.config,
      state: connection.state,
      timestamp: Date.now()
    }));
    /* istanbul ignore next */
    cov_j673vc7wm().s[179]++;
    return (0, crypto_1.createHash)('sha256').update(data).digest('hex');
  }
  /**
   * Calculate hash difference percentage
   *
   * @param hash1 - First hash
   * @param hash2 - Second hash
   * @returns Difference percentage (0-1)
   */
  calculateHashDifference(hash1, hash2) {
    /* istanbul ignore next */
    cov_j673vc7wm().f[29]++;
    cov_j673vc7wm().s[180]++;
    if (hash1.length !== hash2.length) {
      /* istanbul ignore next */
      cov_j673vc7wm().b[42][0]++;
      cov_j673vc7wm().s[181]++;
      return 1;
    } else
    /* istanbul ignore next */
    {
      cov_j673vc7wm().b[42][1]++;
    }
    let differences =
    /* istanbul ignore next */
    (cov_j673vc7wm().s[182]++, 0);
    /* istanbul ignore next */
    cov_j673vc7wm().s[183]++;
    for (let i =
    /* istanbul ignore next */
    (cov_j673vc7wm().s[184]++, 0); i < hash1.length; i++) {
      /* istanbul ignore next */
      cov_j673vc7wm().s[185]++;
      if (hash1[i] !== hash2[i]) {
        /* istanbul ignore next */
        cov_j673vc7wm().b[43][0]++;
        cov_j673vc7wm().s[186]++;
        differences++;
      } else
      /* istanbul ignore next */
      {
        cov_j673vc7wm().b[43][1]++;
      }
    }
    /* istanbul ignore next */
    cov_j673vc7wm().s[187]++;
    return differences / hash1.length;
  }
  /**
   * Get recent log entries for analysis
   *
   * @param connectionId - Connection identifier
   * @returns Array of log entries
   */
  getRecentLogEntries(connectionId) {
    /* istanbul ignore next */
    cov_j673vc7wm().f[30]++;
    cov_j673vc7wm().s[188]++;
    // Simulate log entries (in real implementation, this would read actual logs)
    return [`SSH connection established for ${connectionId}`, `Data transfer initiated for ${connectionId}`, `Normal operation for ${connectionId}`,
    // Add some potentially suspicious entries for testing
    ...(Math.random() > 0.8 ?
    /* istanbul ignore next */
    (cov_j673vc7wm().b[44][0]++, ['SSH authentication failed for user admin']) :
    /* istanbul ignore next */
    (cov_j673vc7wm().b[44][1]++, [])), ...(Math.random() > 0.9 ?
    /* istanbul ignore next */
    (cov_j673vc7wm().b[45][0]++, ['Port scan detected from 192.168.1.100']) :
    /* istanbul ignore next */
    (cov_j673vc7wm().b[45][1]++, []))];
  }
  /**
   * Trigger automatic response to security event
   *
   * @param event - Security event
   */
  async triggerAutomaticResponse(event) {
    /* istanbul ignore next */
    cov_j673vc7wm().f[31]++;
    cov_j673vc7wm().s[189]++;
    try {
      const responseActions =
      /* istanbul ignore next */
      (cov_j673vc7wm().s[190]++, []);
      /* istanbul ignore next */
      cov_j673vc7wm().s[191]++;
      switch (event.threatLevel) {
        case ThreatLevel.CRITICAL:
          /* istanbul ignore next */
          cov_j673vc7wm().b[46][0]++;
          cov_j673vc7wm().s[192]++;
          // Immediate connection termination
          await this.tunnelManager.disconnectTunnel(event.connectionId);
          /* istanbul ignore next */
          cov_j673vc7wm().s[193]++;
          responseActions.push('Connection terminated');
          /* istanbul ignore next */
          cov_j673vc7wm().s[194]++;
          break;
        case ThreatLevel.HIGH:
          /* istanbul ignore next */
          cov_j673vc7wm().b[46][1]++;
          cov_j673vc7wm().s[195]++;
          // Enhanced monitoring and alerting
          responseActions.push('Enhanced monitoring enabled');
          /* istanbul ignore next */
          cov_j673vc7wm().s[196]++;
          this.emit('highThreatDetected', event);
          /* istanbul ignore next */
          cov_j673vc7wm().s[197]++;
          break;
        case ThreatLevel.MEDIUM:
          /* istanbul ignore next */
          cov_j673vc7wm().b[46][2]++;
          cov_j673vc7wm().s[198]++;
          // Increased logging and monitoring
          responseActions.push('Increased monitoring');
          /* istanbul ignore next */
          cov_j673vc7wm().s[199]++;
          break;
        case ThreatLevel.LOW:
          /* istanbul ignore next */
          cov_j673vc7wm().b[46][3]++;
          cov_j673vc7wm().s[200]++;
          // Log and continue monitoring
          responseActions.push('Logged for analysis');
          /* istanbul ignore next */
          cov_j673vc7wm().s[201]++;
          break;
      }
      // Update event with response actions
      /* istanbul ignore next */
      cov_j673vc7wm().s[202]++;
      event.responseActions = responseActions;
      /* istanbul ignore next */
      cov_j673vc7wm().s[203]++;
      this.logger.info(`Automatic response triggered for event ${event.id}`, {
        responseActions
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_j673vc7wm().s[204]++;
      this.logger.error(`Automatic response failed for event ${event.id}`, error);
    }
  }
  /**
   * Start periodic security scans
   */
  startPeriodicSecurityScans() {
    /* istanbul ignore next */
    cov_j673vc7wm().f[32]++;
    cov_j673vc7wm().s[205]++;
    // Perform security scans every 5 minutes
    setInterval(() => {
      /* istanbul ignore next */
      cov_j673vc7wm().f[33]++;
      const connections =
      /* istanbul ignore next */
      (cov_j673vc7wm().s[206]++, this.tunnelManager.getAllConnections());
      /* istanbul ignore next */
      cov_j673vc7wm().s[207]++;
      for (const connection of connections) {
        /* istanbul ignore next */
        cov_j673vc7wm().s[208]++;
        this.performSecurityScan(connection.id);
      }
    }, 5 * 60 * 1000);
  }
  /**
   * Update security metrics
   *
   * @param event - Security event
   */
  updateSecurityMetrics(event) {
    /* istanbul ignore next */
    cov_j673vc7wm().f[34]++;
    cov_j673vc7wm().s[209]++;
    this.securityMetrics.totalEvents++;
    /* istanbul ignore next */
    cov_j673vc7wm().s[210]++;
    this.securityMetrics.activeThreats++;
    // Update event type counts
    const typeCount =
    /* istanbul ignore next */
    (cov_j673vc7wm().s[211]++,
    /* istanbul ignore next */
    (cov_j673vc7wm().b[47][0]++, this.securityMetrics.eventsByType.get(event.type)) ||
    /* istanbul ignore next */
    (cov_j673vc7wm().b[47][1]++, 0));
    /* istanbul ignore next */
    cov_j673vc7wm().s[212]++;
    this.securityMetrics.eventsByType.set(event.type, typeCount + 1);
    // Update threat level counts
    const threatCount =
    /* istanbul ignore next */
    (cov_j673vc7wm().s[213]++,
    /* istanbul ignore next */
    (cov_j673vc7wm().b[48][0]++, this.securityMetrics.eventsByThreatLevel.get(event.threatLevel)) ||
    /* istanbul ignore next */
    (cov_j673vc7wm().b[48][1]++, 0));
    /* istanbul ignore next */
    cov_j673vc7wm().s[214]++;
    this.securityMetrics.eventsByThreatLevel.set(event.threatLevel, threatCount + 1);
    // Calculate system security score
    /* istanbul ignore next */
    cov_j673vc7wm().s[215]++;
    this.calculateSystemSecurityScore();
  }
  /**
   * Update anomaly metrics
   *
   * @param analysis - Traffic analysis
   */
  updateAnomalyMetrics(analysis) {
    /* istanbul ignore next */
    cov_j673vc7wm().f[35]++;
    // Calculate running average of anomaly scores
    const allAnalysis =
    /* istanbul ignore next */
    (cov_j673vc7wm().s[216]++, Array.from(this.trafficAnalysis.values()).flat());
    const totalScore =
    /* istanbul ignore next */
    (cov_j673vc7wm().s[217]++, allAnalysis.reduce((sum, a) => {
      /* istanbul ignore next */
      cov_j673vc7wm().f[36]++;
      cov_j673vc7wm().s[218]++;
      return sum + a.anomalyScore;
    }, 0));
    /* istanbul ignore next */
    cov_j673vc7wm().s[219]++;
    this.securityMetrics.averageAnomalyScore = allAnalysis.length > 0 ?
    /* istanbul ignore next */
    (cov_j673vc7wm().b[49][0]++, totalScore / allAnalysis.length) :
    /* istanbul ignore next */
    (cov_j673vc7wm().b[49][1]++, 0);
  }
  /**
   * Calculate system security score
   */
  calculateSystemSecurityScore() {
    /* istanbul ignore next */
    cov_j673vc7wm().f[37]++;
    let score =
    /* istanbul ignore next */
    (cov_j673vc7wm().s[220]++, 100);
    // Deduct points for active threats
    /* istanbul ignore next */
    cov_j673vc7wm().s[221]++;
    score -= this.securityMetrics.activeThreats * 10;
    // Deduct points for high anomaly scores
    /* istanbul ignore next */
    cov_j673vc7wm().s[222]++;
    if (this.securityMetrics.averageAnomalyScore > 70) {
      /* istanbul ignore next */
      cov_j673vc7wm().b[50][0]++;
      cov_j673vc7wm().s[223]++;
      score -= (this.securityMetrics.averageAnomalyScore - 70) * 0.5;
    } else
    /* istanbul ignore next */
    {
      cov_j673vc7wm().b[50][1]++;
    }
    // Deduct points for integrity violations
    cov_j673vc7wm().s[224]++;
    score -= this.securityMetrics.integrityViolations * 5;
    // Deduct points for critical events
    const criticalEvents =
    /* istanbul ignore next */
    (cov_j673vc7wm().s[225]++,
    /* istanbul ignore next */
    (cov_j673vc7wm().b[51][0]++, this.securityMetrics.eventsByThreatLevel.get(ThreatLevel.CRITICAL)) ||
    /* istanbul ignore next */
    (cov_j673vc7wm().b[51][1]++, 0));
    /* istanbul ignore next */
    cov_j673vc7wm().s[226]++;
    score -= criticalEvents * 20;
    /* istanbul ignore next */
    cov_j673vc7wm().s[227]++;
    this.securityMetrics.systemSecurityScore = Math.max(0, Math.min(100, score));
  }
  /**
   * Generate unique event ID
   *
   * @returns Unique event identifier
   */
  generateEventId() {
    /* istanbul ignore next */
    cov_j673vc7wm().f[38]++;
    cov_j673vc7wm().s[228]++;
    return `sec_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }
  /**
   * Cleanup security monitor resources
   */
  cleanup() {
    /* istanbul ignore next */
    cov_j673vc7wm().f[39]++;
    cov_j673vc7wm().s[229]++;
    this.stopMonitoring();
    // Clean up old events
    const cutoffTime =
    /* istanbul ignore next */
    (cov_j673vc7wm().s[230]++, Date.now() - this.config.eventRetentionPeriod);
    /* istanbul ignore next */
    cov_j673vc7wm().s[231]++;
    for (const [eventId, event] of this.securityEvents.entries()) {
      /* istanbul ignore next */
      cov_j673vc7wm().s[232]++;
      if (event.timestamp.getTime() < cutoffTime) {
        /* istanbul ignore next */
        cov_j673vc7wm().b[52][0]++;
        cov_j673vc7wm().s[233]++;
        this.securityEvents.delete(eventId);
      } else
      /* istanbul ignore next */
      {
        cov_j673vc7wm().b[52][1]++;
      }
    }
    /* istanbul ignore next */
    cov_j673vc7wm().s[234]++;
    this.trafficAnalysis.clear();
    /* istanbul ignore next */
    cov_j673vc7wm().s[235]++;
    this.logger.info('Tunnel security monitor cleanup completed');
  }
}
/* istanbul ignore next */
cov_j673vc7wm().s[236]++;
exports.TunnelSecurityMonitor = TunnelSecurityMonitor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,