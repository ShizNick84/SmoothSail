b76387004b58462386aca016bfe42ee8
"use strict";

/**
 * =============================================================================
 * NETWORK SERVICE MANAGER WITH COMPREHENSIVE ERROR HANDLING
 * =============================================================================
 *
 * Manages all network services including SSH tunnels, database connections,
 * and API endpoints with integrated error handling and auto-recovery.
 *
 * @author AI Crypto Trading System
 * @version 1.0.0
 * @license PROPRIETARY
 * =============================================================================
 */
/* istanbul ignore next */
function cov_2c4w5gwrlw() {
  var path = "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\network-service-manager.ts";
  var hash = "e5519d52ea90ca0dab4727bf931170a01d446005";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\network-service-manager.ts",
    statementMap: {
      "0": {
        start: {
          line: 15,
          column: 0
        },
        end: {
          line: 15,
          column: 62
        }
      },
      "1": {
        start: {
          line: 16,
          column: 0
        },
        end: {
          line: 16,
          column: 39
        }
      },
      "2": {
        start: {
          line: 17,
          column: 17
        },
        end: {
          line: 17,
          column: 34
        }
      },
      "3": {
        start: {
          line: 18,
          column: 17
        },
        end: {
          line: 18,
          column: 50
        }
      },
      "4": {
        start: {
          line: 19,
          column: 32
        },
        end: {
          line: 19,
          column: 87
        }
      },
      "5": {
        start: {
          line: 20,
          column: 31
        },
        end: {
          line: 20,
          column: 85
        }
      },
      "6": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 16
        }
      },
      "7": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 35
        }
      },
      "8": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 34
        }
      },
      "9": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 39
        }
      },
      "10": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 67
        }
      },
      "11": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 85
        }
      },
      "12": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 82
        }
      },
      "13": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 29
        }
      },
      "14": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 34
        }
      },
      "15": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 66,
          column: 9
        }
      },
      "16": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 38,
          column: 75
        }
      },
      "17": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 40,
          column: 43
        }
      },
      "18": {
        start: {
          line: 42,
          column: 31
        },
        end: {
          line: 42,
          column: 59
        }
      },
      "19": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 45,
          column: 13
        }
      },
      "20": {
        start: {
          line: 44,
          column: 16
        },
        end: {
          line: 44,
          column: 63
        }
      },
      "21": {
        start: {
          line: 47,
          column: 30
        },
        end: {
          line: 47,
          column: 72
        }
      },
      "22": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 50,
          column: 13
        }
      },
      "23": {
        start: {
          line: 49,
          column: 16
        },
        end: {
          line: 49,
          column: 77
        }
      },
      "24": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 52,
          column: 42
        }
      },
      "25": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 38
        }
      },
      "26": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 54,
          column: 83
        }
      },
      "27": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 55,
          column: 24
        }
      },
      "28": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 58,
          column: 88
        }
      },
      "29": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 64,
          column: 15
        }
      },
      "30": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 65,
          column: 25
        }
      },
      "31": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 95,
          column: 9
        }
      },
      "32": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 73,
          column: 61
        }
      },
      "33": {
        start: {
          line: 75,
          column: 40
        },
        end: {
          line: 75,
          column: 109
        }
      },
      "34": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 83,
          column: 13
        }
      },
      "35": {
        start: {
          line: 77,
          column: 16
        },
        end: {
          line: 77,
          column: 70
        }
      },
      "36": {
        start: {
          line: 78,
          column: 16
        },
        end: {
          line: 78,
          column: 69
        }
      },
      "37": {
        start: {
          line: 81,
          column: 16
        },
        end: {
          line: 81,
          column: 69
        }
      },
      "38": {
        start: {
          line: 82,
          column: 16
        },
        end: {
          line: 82,
          column: 74
        }
      },
      "39": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 84,
          column: 24
        }
      },
      "40": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 87,
          column: 67
        }
      },
      "41": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 93,
          column: 15
        }
      },
      "42": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 94,
          column: 25
        }
      },
      "43": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 125,
          column: 9
        }
      },
      "44": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 102,
          column: 73
        }
      },
      "45": {
        start: {
          line: 104,
          column: 30
        },
        end: {
          line: 104,
          column: 89
        }
      },
      "46": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 113,
          column: 13
        }
      },
      "47": {
        start: {
          line: 106,
          column: 16
        },
        end: {
          line: 106,
          column: 64
        }
      },
      "48": {
        start: {
          line: 107,
          column: 16
        },
        end: {
          line: 107,
          column: 70
        }
      },
      "49": {
        start: {
          line: 110,
          column: 16
        },
        end: {
          line: 110,
          column: 66
        }
      },
      "50": {
        start: {
          line: 112,
          column: 16
        },
        end: {
          line: 112,
          column: 135
        }
      },
      "51": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 114,
          column: 29
        }
      },
      "52": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 117,
          column: 74
        }
      },
      "53": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 123,
          column: 15
        }
      },
      "54": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 124,
          column: 25
        }
      },
      "55": {
        start: {
          line: 131,
          column: 25
        },
        end: {
          line: 135,
          column: 9
        }
      },
      "56": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 145,
          column: 11
        }
      },
      "57": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 144,
          column: 15
        }
      },
      "58": {
        start: {
          line: 151,
          column: 24
        },
        end: {
          line: 151,
          column: 54
        }
      },
      "59": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 153,
          column: 19
        }
      },
      "60": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 153,
          column: 19
        }
      },
      "61": {
        start: {
          line: 154,
          column: 27
        },
        end: {
          line: 154,
          column: 55
        }
      },
      "62": {
        start: {
          line: 155,
          column: 8
        },
        end: {
          line: 155,
          column: 32
        }
      },
      "63": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 156,
          column: 39
        }
      },
      "64": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 168,
          column: 9
        }
      },
      "65": {
        start: {
          line: 158,
          column: 12
        },
        end: {
          line: 158,
          column: 38
        }
      },
      "66": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 159,
          column: 33
        }
      },
      "67": {
        start: {
          line: 161,
          column: 13
        },
        end: {
          line: 168,
          column: 9
        }
      },
      "68": {
        start: {
          line: 162,
          column: 12
        },
        end: {
          line: 162,
          column: 35
        }
      },
      "69": {
        start: {
          line: 163,
          column: 12
        },
        end: {
          line: 163,
          column: 42
        }
      },
      "70": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 167,
          column: 13
        }
      },
      "71": {
        start: {
          line: 166,
          column: 16
        },
        end: {
          line: 166,
          column: 44
        }
      },
      "72": {
        start: {
          line: 170,
          column: 8
        },
        end: {
          line: 170,
          column: 70
        }
      },
      "73": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 178,
          column: 55
        }
      },
      "74": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 177,
          column: 45
        }
      },
      "75": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 179,
          column: 66
        }
      },
      "76": {
        start: {
          line: 185,
          column: 25
        },
        end: {
          line: 185,
          column: 57
        }
      },
      "77": {
        start: {
          line: 186,
          column: 8
        },
        end: {
          line: 204,
          column: 9
        }
      },
      "78": {
        start: {
          line: 187,
          column: 12
        },
        end: {
          line: 203,
          column: 13
        }
      },
      "79": {
        start: {
          line: 188,
          column: 34
        },
        end: {
          line: 188,
          column: 94
        }
      },
      "80": {
        start: {
          line: 189,
          column: 16
        },
        end: {
          line: 198,
          column: 17
        }
      },
      "81": {
        start: {
          line: 190,
          column: 20
        },
        end: {
          line: 190,
          column: 69
        }
      },
      "82": {
        start: {
          line: 193,
          column: 20
        },
        end: {
          line: 193,
          column: 94
        }
      },
      "83": {
        start: {
          line: 195,
          column: 20
        },
        end: {
          line: 197,
          column: 21
        }
      },
      "84": {
        start: {
          line: 196,
          column: 24
        },
        end: {
          line: 196,
          column: 71
        }
      },
      "85": {
        start: {
          line: 201,
          column: 16
        },
        end: {
          line: 201,
          column: 84
        }
      },
      "86": {
        start: {
          line: 202,
          column: 16
        },
        end: {
          line: 202,
          column: 79
        }
      },
      "87": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 206,
          column: 44
        }
      },
      "88": {
        start: {
          line: 212,
          column: 24
        },
        end: {
          line: 212,
          column: 54
        }
      },
      "89": {
        start: {
          line: 213,
          column: 8
        },
        end: {
          line: 214,
          column: 19
        }
      },
      "90": {
        start: {
          line: 214,
          column: 12
        },
        end: {
          line: 214,
          column: 19
        }
      },
      "91": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 218,
          column: 9
        }
      },
      "92": {
        start: {
          line: 216,
          column: 12
        },
        end: {
          line: 216,
          column: 86
        }
      },
      "93": {
        start: {
          line: 217,
          column: 12
        },
        end: {
          line: 217,
          column: 19
        }
      },
      "94": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 240,
          column: 9
        }
      },
      "95": {
        start: {
          line: 220,
          column: 12
        },
        end: {
          line: 220,
          column: 77
        }
      },
      "96": {
        start: {
          line: 221,
          column: 12
        },
        end: {
          line: 221,
          column: 64
        }
      },
      "97": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 223,
          column: 104
        }
      },
      "98": {
        start: {
          line: 223,
          column: 41
        },
        end: {
          line: 223,
          column: 102
        }
      },
      "99": {
        start: {
          line: 224,
          column: 12
        },
        end: {
          line: 234,
          column: 13
        }
      },
      "100": {
        start: {
          line: 226,
          column: 20
        },
        end: {
          line: 226,
          column: 50
        }
      },
      "101": {
        start: {
          line: 227,
          column: 20
        },
        end: {
          line: 227,
          column: 26
        }
      },
      "102": {
        start: {
          line: 229,
          column: 20
        },
        end: {
          line: 229,
          column: 59
        }
      },
      "103": {
        start: {
          line: 230,
          column: 20
        },
        end: {
          line: 230,
          column: 26
        }
      },
      "104": {
        start: {
          line: 232,
          column: 20
        },
        end: {
          line: 232,
          column: 54
        }
      },
      "105": {
        start: {
          line: 233,
          column: 20
        },
        end: {
          line: 233,
          column: 26
        }
      },
      "106": {
        start: {
          line: 235,
          column: 12
        },
        end: {
          line: 235,
          column: 73
        }
      },
      "107": {
        start: {
          line: 238,
          column: 12
        },
        end: {
          line: 238,
          column: 78
        }
      },
      "108": {
        start: {
          line: 239,
          column: 12
        },
        end: {
          line: 239,
          column: 75
        }
      },
      "109": {
        start: {
          line: 246,
          column: 24
        },
        end: {
          line: 246,
          column: 93
        }
      },
      "110": {
        start: {
          line: 247,
          column: 8
        },
        end: {
          line: 249,
          column: 9
        }
      },
      "111": {
        start: {
          line: 248,
          column: 12
        },
        end: {
          line: 248,
          column: 58
        }
      },
      "112": {
        start: {
          line: 256,
          column: 8
        },
        end: {
          line: 256,
          column: 68
        }
      },
      "113": {
        start: {
          line: 258,
          column: 8
        },
        end: {
          line: 258,
          column: 64
        }
      },
      "114": {
        start: {
          line: 258,
          column: 37
        },
        end: {
          line: 258,
          column: 62
        }
      },
      "115": {
        start: {
          line: 259,
          column: 26
        },
        end: {
          line: 259,
          column: 85
        }
      },
      "116": {
        start: {
          line: 260,
          column: 8
        },
        end: {
          line: 262,
          column: 9
        }
      },
      "117": {
        start: {
          line: 261,
          column: 12
        },
        end: {
          line: 261,
          column: 67
        }
      },
      "118": {
        start: {
          line: 269,
          column: 26
        },
        end: {
          line: 269,
          column: 83
        }
      },
      "119": {
        start: {
          line: 270,
          column: 8
        },
        end: {
          line: 272,
          column: 9
        }
      },
      "120": {
        start: {
          line: 271,
          column: 12
        },
        end: {
          line: 271,
          column: 96
        }
      },
      "121": {
        start: {
          line: 278,
          column: 34
        },
        end: {
          line: 279,
          column: 93
        }
      },
      "122": {
        start: {
          line: 279,
          column: 31
        },
        end: {
          line: 279,
          column: 92
        }
      },
      "123": {
        start: {
          line: 280,
          column: 8
        },
        end: {
          line: 298,
          column: 9
        }
      },
      "124": {
        start: {
          line: 281,
          column: 12
        },
        end: {
          line: 283,
          column: 15
        }
      },
      "125": {
        start: {
          line: 282,
          column: 62
        },
        end: {
          line: 282,
          column: 68
        }
      },
      "126": {
        start: {
          line: 284,
          column: 12
        },
        end: {
          line: 296,
          column: 15
        }
      },
      "127": {
        start: {
          line: 289,
          column: 67
        },
        end: {
          line: 294,
          column: 21
        }
      },
      "128": {
        start: {
          line: 297,
          column: 12
        },
        end: {
          line: 297,
          column: 61
        }
      },
      "129": {
        start: {
          line: 305,
          column: 8
        },
        end: {
          line: 316,
          column: 11
        }
      },
      "130": {
        start: {
          line: 306,
          column: 12
        },
        end: {
          line: 306,
          column: 62
        }
      },
      "131": {
        start: {
          line: 307,
          column: 12
        },
        end: {
          line: 315,
          column: 15
        }
      },
      "132": {
        start: {
          line: 318,
          column: 8
        },
        end: {
          line: 321,
          column: 11
        }
      },
      "133": {
        start: {
          line: 319,
          column: 12
        },
        end: {
          line: 319,
          column: 71
        }
      },
      "134": {
        start: {
          line: 320,
          column: 12
        },
        end: {
          line: 320,
          column: 61
        }
      },
      "135": {
        start: {
          line: 323,
          column: 8
        },
        end: {
          line: 326,
          column: 11
        }
      },
      "136": {
        start: {
          line: 324,
          column: 12
        },
        end: {
          line: 324,
          column: 79
        }
      },
      "137": {
        start: {
          line: 325,
          column: 12
        },
        end: {
          line: 325,
          column: 59
        }
      },
      "138": {
        start: {
          line: 328,
          column: 8
        },
        end: {
          line: 332,
          column: 11
        }
      },
      "139": {
        start: {
          line: 329,
          column: 12
        },
        end: {
          line: 331,
          column: 13
        }
      },
      "140": {
        start: {
          line: 330,
          column: 16
        },
        end: {
          line: 330,
          column: 57
        }
      },
      "141": {
        start: {
          line: 334,
          column: 8
        },
        end: {
          line: 336,
          column: 11
        }
      },
      "142": {
        start: {
          line: 335,
          column: 12
        },
        end: {
          line: 335,
          column: 51
        }
      },
      "143": {
        start: {
          line: 342,
          column: 8
        },
        end: {
          line: 355,
          column: 9
        }
      },
      "144": {
        start: {
          line: 343,
          column: 12
        },
        end: {
          line: 343,
          column: 78
        }
      },
      "145": {
        start: {
          line: 345,
          column: 12
        },
        end: {
          line: 345,
          column: 34
        }
      },
      "146": {
        start: {
          line: 347,
          column: 12
        },
        end: {
          line: 347,
          column: 68
        }
      },
      "147": {
        start: {
          line: 347,
          column: 41
        },
        end: {
          line: 347,
          column: 66
        }
      },
      "148": {
        start: {
          line: 349,
          column: 12
        },
        end: {
          line: 349,
          column: 36
        }
      },
      "149": {
        start: {
          line: 350,
          column: 12
        },
        end: {
          line: 350,
          column: 75
        }
      },
      "150": {
        start: {
          line: 353,
          column: 12
        },
        end: {
          line: 353,
          column: 73
        }
      },
      "151": {
        start: {
          line: 354,
          column: 12
        },
        end: {
          line: 354,
          column: 24
        }
      },
      "152": {
        start: {
          line: 361,
          column: 8
        },
        end: {
          line: 375,
          column: 9
        }
      },
      "153": {
        start: {
          line: 362,
          column: 12
        },
        end: {
          line: 362,
          column: 68
        }
      },
      "154": {
        start: {
          line: 364,
          column: 38
        },
        end: {
          line: 366,
          column: 38
        }
      },
      "155": {
        start: {
          line: 365,
          column: 41
        },
        end: {
          line: 365,
          column: 69
        }
      },
      "156": {
        start: {
          line: 366,
          column: 33
        },
        end: {
          line: 366,
          column: 37
        }
      },
      "157": {
        start: {
          line: 367,
          column: 12
        },
        end: {
          line: 369,
          column: 13
        }
      },
      "158": {
        start: {
          line: 368,
          column: 16
        },
        end: {
          line: 368,
          column: 63
        }
      },
      "159": {
        start: {
          line: 370,
          column: 12
        },
        end: {
          line: 370,
          column: 65
        }
      },
      "160": {
        start: {
          line: 373,
          column: 12
        },
        end: {
          line: 373,
          column: 71
        }
      },
      "161": {
        start: {
          line: 374,
          column: 12
        },
        end: {
          line: 374,
          column: 24
        }
      },
      "162": {
        start: {
          line: 381,
          column: 25
        },
        end: {
          line: 381,
          column: 59
        }
      },
      "163": {
        start: {
          line: 382,
          column: 32
        },
        end: {
          line: 382,
          column: 83
        }
      },
      "164": {
        start: {
          line: 382,
          column: 53
        },
        end: {
          line: 382,
          column: 75
        }
      },
      "165": {
        start: {
          line: 383,
          column: 30
        },
        end: {
          line: 383,
          column: 73
        }
      },
      "166": {
        start: {
          line: 384,
          column: 8
        },
        end: {
          line: 390,
          column: 10
        }
      },
      "167": {
        start: {
          line: 396,
          column: 8
        },
        end: {
          line: 411,
          column: 9
        }
      },
      "168": {
        start: {
          line: 397,
          column: 12
        },
        end: {
          line: 406,
          column: 13
        }
      },
      "169": {
        start: {
          line: 398,
          column: 16
        },
        end: {
          line: 398,
          column: 82
        }
      },
      "170": {
        start: {
          line: 399,
          column: 16
        },
        end: {
          line: 399,
          column: 63
        }
      },
      "171": {
        start: {
          line: 400,
          column: 16
        },
        end: {
          line: 400,
          column: 28
        }
      },
      "172": {
        start: {
          line: 403,
          column: 16
        },
        end: {
          line: 403,
          column: 80
        }
      },
      "173": {
        start: {
          line: 404,
          column: 16
        },
        end: {
          line: 404,
          column: 55
        }
      },
      "174": {
        start: {
          line: 405,
          column: 16
        },
        end: {
          line: 405,
          column: 28
        }
      },
      "175": {
        start: {
          line: 409,
          column: 12
        },
        end: {
          line: 409,
          column: 69
        }
      },
      "176": {
        start: {
          line: 410,
          column: 12
        },
        end: {
          line: 410,
          column: 25
        }
      },
      "177": {
        start: {
          line: 417,
          column: 8
        },
        end: {
          line: 417,
          column: 72
        }
      },
      "178": {
        start: {
          line: 419,
          column: 8
        },
        end: {
          line: 422,
          column: 9
        }
      },
      "179": {
        start: {
          line: 420,
          column: 12
        },
        end: {
          line: 420,
          column: 51
        }
      },
      "180": {
        start: {
          line: 421,
          column: 12
        },
        end: {
          line: 421,
          column: 43
        }
      },
      "181": {
        start: {
          line: 424,
          column: 8
        },
        end: {
          line: 424,
          column: 50
        }
      },
      "182": {
        start: {
          line: 426,
          column: 8
        },
        end: {
          line: 426,
          column: 30
        }
      },
      "183": {
        start: {
          line: 427,
          column: 8
        },
        end: {
          line: 427,
          column: 35
        }
      },
      "184": {
        start: {
          line: 428,
          column: 8
        },
        end: {
          line: 428,
          column: 73
        }
      },
      "185": {
        start: {
          line: 431,
          column: 0
        },
        end: {
          line: 431,
          column: 54
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 24
          },
          end: {
            line: 32,
            column: 5
          }
        },
        line: 22
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 36,
            column: 5
          }
        },
        loc: {
          start: {
            line: 36,
            column: 23
          },
          end: {
            line: 67,
            column: 5
          }
        },
        line: 36
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 71,
            column: 4
          },
          end: {
            line: 71,
            column: 5
          }
        },
        loc: {
          start: {
            line: 71,
            column: 28
          },
          end: {
            line: 96,
            column: 5
          }
        },
        line: 71
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 100,
            column: 4
          },
          end: {
            line: 100,
            column: 5
          }
        },
        loc: {
          start: {
            line: 100,
            column: 42
          },
          end: {
            line: 126,
            column: 5
          }
        },
        line: 100
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 130,
            column: 4
          },
          end: {
            line: 130,
            column: 5
          }
        },
        loc: {
          start: {
            line: 130,
            column: 30
          },
          end: {
            line: 146,
            column: 5
          }
        },
        line: 130
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 136,
            column: 25
          },
          end: {
            line: 136,
            column: 26
          }
        },
        loc: {
          start: {
            line: 136,
            column: 36
          },
          end: {
            line: 145,
            column: 9
          }
        },
        line: 136
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 150,
            column: 4
          },
          end: {
            line: 150,
            column: 5
          }
        },
        loc: {
          start: {
            line: 150,
            column: 52
          },
          end: {
            line: 171,
            column: 5
          }
        },
        line: 150
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 175,
            column: 4
          },
          end: {
            line: 175,
            column: 5
          }
        },
        loc: {
          start: {
            line: 175,
            column: 29
          },
          end: {
            line: 180,
            column: 5
          }
        },
        line: 175
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 176,
            column: 46
          },
          end: {
            line: 176,
            column: 47
          }
        },
        loc: {
          start: {
            line: 176,
            column: 58
          },
          end: {
            line: 178,
            column: 9
          }
        },
        line: 176
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 184,
            column: 4
          },
          end: {
            line: 184,
            column: 5
          }
        },
        loc: {
          start: {
            line: 184,
            column: 32
          },
          end: {
            line: 207,
            column: 5
          }
        },
        line: 184
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 211,
            column: 4
          },
          end: {
            line: 211,
            column: 5
          }
        },
        loc: {
          start: {
            line: 211,
            column: 46
          },
          end: {
            line: 241,
            column: 5
          }
        },
        line: 211
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 223,
            column: 30
          },
          end: {
            line: 223,
            column: 31
          }
        },
        loc: {
          start: {
            line: 223,
            column: 41
          },
          end: {
            line: 223,
            column: 102
          }
        },
        line: 223
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 245,
            column: 4
          },
          end: {
            line: 245,
            column: 5
          }
        },
        loc: {
          start: {
            line: 245,
            column: 29
          },
          end: {
            line: 250,
            column: 5
          }
        },
        line: 245
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 254,
            column: 4
          },
          end: {
            line: 254,
            column: 5
          }
        },
        loc: {
          start: {
            line: 254,
            column: 38
          },
          end: {
            line: 263,
            column: 5
          }
        },
        line: 254
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 258,
            column: 26
          },
          end: {
            line: 258,
            column: 27
          }
        },
        loc: {
          start: {
            line: 258,
            column: 37
          },
          end: {
            line: 258,
            column: 62
          }
        },
        line: 258
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 267,
            column: 4
          },
          end: {
            line: 267,
            column: 5
          }
        },
        loc: {
          start: {
            line: 267,
            column: 33
          },
          end: {
            line: 273,
            column: 5
          }
        },
        line: 267
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 277,
            column: 4
          },
          end: {
            line: 277,
            column: 5
          }
        },
        loc: {
          start: {
            line: 277,
            column: 35
          },
          end: {
            line: 299,
            column: 5
          }
        },
        line: 277
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 279,
            column: 20
          },
          end: {
            line: 279,
            column: 21
          }
        },
        loc: {
          start: {
            line: 279,
            column: 31
          },
          end: {
            line: 279,
            column: 92
          }
        },
        line: 279
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 282,
            column: 57
          },
          end: {
            line: 282,
            column: 58
          }
        },
        loc: {
          start: {
            line: 282,
            column: 62
          },
          end: {
            line: 282,
            column: 68
          }
        },
        line: 282
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 289,
            column: 61
          },
          end: {
            line: 289,
            column: 62
          }
        },
        loc: {
          start: {
            line: 289,
            column: 67
          },
          end: {
            line: 294,
            column: 21
          }
        },
        line: 289
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 303,
            column: 4
          },
          end: {
            line: 303,
            column: 5
          }
        },
        loc: {
          start: {
            line: 303,
            column: 25
          },
          end: {
            line: 337,
            column: 5
          }
        },
        line: 303
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 305,
            column: 52
          },
          end: {
            line: 305,
            column: 53
          }
        },
        loc: {
          start: {
            line: 305,
            column: 69
          },
          end: {
            line: 316,
            column: 9
          }
        },
        line: 305
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 318,
            column: 57
          },
          end: {
            line: 318,
            column: 58
          }
        },
        loc: {
          start: {
            line: 318,
            column: 74
          },
          end: {
            line: 321,
            column: 9
          }
        },
        line: 318
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 323,
            column: 64
          },
          end: {
            line: 323,
            column: 65
          }
        },
        loc: {
          start: {
            line: 323,
            column: 87
          },
          end: {
            line: 326,
            column: 9
          }
        },
        line: 323
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 328,
            column: 55
          },
          end: {
            line: 328,
            column: 56
          }
        },
        loc: {
          start: {
            line: 328,
            column: 76
          },
          end: {
            line: 332,
            column: 9
          }
        },
        line: 328
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 334,
            column: 55
          },
          end: {
            line: 334,
            column: 56
          }
        },
        loc: {
          start: {
            line: 334,
            column: 67
          },
          end: {
            line: 336,
            column: 9
          }
        },
        line: 334
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 341,
            column: 4
          },
          end: {
            line: 341,
            column: 5
          }
        },
        loc: {
          start: {
            line: 341,
            column: 40
          },
          end: {
            line: 356,
            column: 5
          }
        },
        line: 341
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 347,
            column: 30
          },
          end: {
            line: 347,
            column: 31
          }
        },
        loc: {
          start: {
            line: 347,
            column: 41
          },
          end: {
            line: 347,
            column: 66
          }
        },
        line: 347
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 360,
            column: 4
          },
          end: {
            line: 360,
            column: 5
          }
        },
        loc: {
          start: {
            line: 360,
            column: 38
          },
          end: {
            line: 376,
            column: 5
          }
        },
        line: 360
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 365,
            column: 24
          },
          end: {
            line: 365,
            column: 25
          }
        },
        loc: {
          start: {
            line: 365,
            column: 41
          },
          end: {
            line: 365,
            column: 69
          }
        },
        line: 365
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 366,
            column: 21
          },
          end: {
            line: 366,
            column: 22
          }
        },
        loc: {
          start: {
            line: 366,
            column: 33
          },
          end: {
            line: 366,
            column: 37
          }
        },
        line: 366
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 380,
            column: 4
          },
          end: {
            line: 380,
            column: 5
          }
        },
        loc: {
          start: {
            line: 380,
            column: 23
          },
          end: {
            line: 391,
            column: 5
          }
        },
        line: 380
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 382,
            column: 48
          },
          end: {
            line: 382,
            column: 49
          }
        },
        loc: {
          start: {
            line: 382,
            column: 53
          },
          end: {
            line: 382,
            column: 75
          }
        },
        line: 382
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 395,
            column: 4
          },
          end: {
            line: 395,
            column: 5
          }
        },
        loc: {
          start: {
            line: 395,
            column: 41
          },
          end: {
            line: 412,
            column: 5
          }
        },
        line: 395
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 416,
            column: 4
          },
          end: {
            line: 416,
            column: 5
          }
        },
        loc: {
          start: {
            line: 416,
            column: 21
          },
          end: {
            line: 429,
            column: 5
          }
        },
        line: 416
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 43,
            column: 12
          },
          end: {
            line: 45,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 43,
            column: 12
          },
          end: {
            line: 45,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 43
      },
      "1": {
        loc: {
          start: {
            line: 48,
            column: 12
          },
          end: {
            line: 50,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 48,
            column: 12
          },
          end: {
            line: 50,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 48
      },
      "2": {
        loc: {
          start: {
            line: 76,
            column: 12
          },
          end: {
            line: 83,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 76,
            column: 12
          },
          end: {
            line: 83,
            column: 13
          }
        }, {
          start: {
            line: 80,
            column: 17
          },
          end: {
            line: 83,
            column: 13
          }
        }],
        line: 76
      },
      "3": {
        loc: {
          start: {
            line: 105,
            column: 12
          },
          end: {
            line: 113,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 105,
            column: 12
          },
          end: {
            line: 113,
            column: 13
          }
        }, {
          start: {
            line: 109,
            column: 17
          },
          end: {
            line: 113,
            column: 13
          }
        }],
        line: 105
      },
      "4": {
        loc: {
          start: {
            line: 152,
            column: 8
          },
          end: {
            line: 153,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 152,
            column: 8
          },
          end: {
            line: 153,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 152
      },
      "5": {
        loc: {
          start: {
            line: 157,
            column: 8
          },
          end: {
            line: 168,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 157,
            column: 8
          },
          end: {
            line: 168,
            column: 9
          }
        }, {
          start: {
            line: 161,
            column: 13
          },
          end: {
            line: 168,
            column: 9
          }
        }],
        line: 157
      },
      "6": {
        loc: {
          start: {
            line: 161,
            column: 13
          },
          end: {
            line: 168,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 161,
            column: 13
          },
          end: {
            line: 168,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 161
      },
      "7": {
        loc: {
          start: {
            line: 165,
            column: 12
          },
          end: {
            line: 167,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 165,
            column: 12
          },
          end: {
            line: 167,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 165
      },
      "8": {
        loc: {
          start: {
            line: 189,
            column: 16
          },
          end: {
            line: 198,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 189,
            column: 16
          },
          end: {
            line: 198,
            column: 17
          }
        }, {
          start: {
            line: 192,
            column: 21
          },
          end: {
            line: 198,
            column: 17
          }
        }],
        line: 189
      },
      "9": {
        loc: {
          start: {
            line: 195,
            column: 20
          },
          end: {
            line: 197,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 195,
            column: 20
          },
          end: {
            line: 197,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 195
      },
      "10": {
        loc: {
          start: {
            line: 195,
            column: 24
          },
          end: {
            line: 195,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 195,
            column: 24
          },
          end: {
            line: 195,
            column: 56
          }
        }, {
          start: {
            line: 195,
            column: 60
          },
          end: {
            line: 195,
            column: 86
          }
        }],
        line: 195
      },
      "11": {
        loc: {
          start: {
            line: 213,
            column: 8
          },
          end: {
            line: 214,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 213,
            column: 8
          },
          end: {
            line: 214,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 213
      },
      "12": {
        loc: {
          start: {
            line: 215,
            column: 8
          },
          end: {
            line: 218,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 215,
            column: 8
          },
          end: {
            line: 218,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 215
      },
      "13": {
        loc: {
          start: {
            line: 224,
            column: 12
          },
          end: {
            line: 234,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 225,
            column: 16
          },
          end: {
            line: 227,
            column: 26
          }
        }, {
          start: {
            line: 228,
            column: 16
          },
          end: {
            line: 230,
            column: 26
          }
        }, {
          start: {
            line: 231,
            column: 16
          },
          end: {
            line: 233,
            column: 26
          }
        }],
        line: 224
      },
      "14": {
        loc: {
          start: {
            line: 247,
            column: 8
          },
          end: {
            line: 249,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 247,
            column: 8
          },
          end: {
            line: 249,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 247
      },
      "15": {
        loc: {
          start: {
            line: 260,
            column: 8
          },
          end: {
            line: 262,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 260,
            column: 8
          },
          end: {
            line: 262,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 260
      },
      "16": {
        loc: {
          start: {
            line: 270,
            column: 8
          },
          end: {
            line: 272,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 270,
            column: 8
          },
          end: {
            line: 272,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 270
      },
      "17": {
        loc: {
          start: {
            line: 279,
            column: 31
          },
          end: {
            line: 279,
            column: 92
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 279,
            column: 31
          },
          end: {
            line: 279,
            column: 61
          }
        }, {
          start: {
            line: 279,
            column: 65
          },
          end: {
            line: 279,
            column: 92
          }
        }],
        line: 279
      },
      "18": {
        loc: {
          start: {
            line: 280,
            column: 8
          },
          end: {
            line: 298,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 280,
            column: 8
          },
          end: {
            line: 298,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 280
      },
      "19": {
        loc: {
          start: {
            line: 329,
            column: 12
          },
          end: {
            line: 331,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 329,
            column: 12
          },
          end: {
            line: 331,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 329
      },
      "20": {
        loc: {
          start: {
            line: 397,
            column: 12
          },
          end: {
            line: 406,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 397,
            column: 12
          },
          end: {
            line: 406,
            column: 13
          }
        }, {
          start: {
            line: 402,
            column: 17
          },
          end: {
            line: 406,
            column: 13
          }
        }],
        line: 397
      },
      "21": {
        loc: {
          start: {
            line: 419,
            column: 8
          },
          end: {
            line: 422,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 419,
            column: 8
          },
          end: {
            line: 422,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 419
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "e5519d52ea90ca0dab4727bf931170a01d446005"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2c4w5gwrlw = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2c4w5gwrlw();
cov_2c4w5gwrlw().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2c4w5gwrlw().s[1]++;
exports.NetworkServiceManager = void 0;
const events_1 =
/* istanbul ignore next */
(cov_2c4w5gwrlw().s[2]++, require("events"));
const logger_1 =
/* istanbul ignore next */
(cov_2c4w5gwrlw().s[3]++, require("../core/logging/logger"));
const network_error_handler_1 =
/* istanbul ignore next */
(cov_2c4w5gwrlw().s[4]++, require("../core/error-handling/network-error-handler"));
const system_error_manager_1 =
/* istanbul ignore next */
(cov_2c4w5gwrlw().s[5]++, require("../core/error-handling/system-error-manager"));
class NetworkServiceManager extends
/* istanbul ignore next */
(events_1.EventEmitter) {
  constructor(config) {
    /* istanbul ignore next */
    cov_2c4w5gwrlw().f[0]++;
    cov_2c4w5gwrlw().s[6]++;
    super();
    /* istanbul ignore next */
    cov_2c4w5gwrlw().s[7]++;
    this.isInitialized = false;
    /* istanbul ignore next */
    cov_2c4w5gwrlw().s[8]++;
    this.services = new Map();
    /* istanbul ignore next */
    cov_2c4w5gwrlw().s[9]++;
    this.monitoringInterval = null;
    /* istanbul ignore next */
    cov_2c4w5gwrlw().s[10]++;
    this.logger = new logger_1.Logger('NetworkServiceManager');
    /* istanbul ignore next */
    cov_2c4w5gwrlw().s[11]++;
    this.networkErrorHandler = new network_error_handler_1.NetworkErrorHandler();
    /* istanbul ignore next */
    cov_2c4w5gwrlw().s[12]++;
    this.systemErrorManager = new system_error_manager_1.SystemErrorManager();
    /* istanbul ignore next */
    cov_2c4w5gwrlw().s[13]++;
    this.config = config;
    /* istanbul ignore next */
    cov_2c4w5gwrlw().s[14]++;
    this.setupErrorHandling();
  }
  /**
   * Initialize all network services
   */
  async initialize() {
    /* istanbul ignore next */
    cov_2c4w5gwrlw().f[1]++;
    cov_2c4w5gwrlw().s[15]++;
    try {
      /* istanbul ignore next */
      cov_2c4w5gwrlw().s[16]++;
      this.logger.info('🌐 Initializing Network Service Manager...');
      // Initialize service status tracking
      /* istanbul ignore next */
      cov_2c4w5gwrlw().s[17]++;
      this.initializeServiceStatus();
      // Setup SSH tunnels
      const sshSuccess =
      /* istanbul ignore next */
      (cov_2c4w5gwrlw().s[18]++, await this.setupSSHTunnels());
      /* istanbul ignore next */
      cov_2c4w5gwrlw().s[19]++;
      if (!sshSuccess) {
        /* istanbul ignore next */
        cov_2c4w5gwrlw().b[0][0]++;
        cov_2c4w5gwrlw().s[20]++;
        throw new Error('Failed to setup SSH tunnels');
      } else
      /* istanbul ignore next */
      {
        cov_2c4w5gwrlw().b[0][1]++;
      }
      // Initialize database connections
      const dbSuccess =
      /* istanbul ignore next */
      (cov_2c4w5gwrlw().s[21]++, await this.initializeDatabaseConnections());
      /* istanbul ignore next */
      cov_2c4w5gwrlw().s[22]++;
      if (!dbSuccess) {
        /* istanbul ignore next */
        cov_2c4w5gwrlw().b[1][0]++;
        cov_2c4w5gwrlw().s[23]++;
        throw new Error('Failed to initialize database connections');
      } else
      /* istanbul ignore next */
      {
        cov_2c4w5gwrlw().b[1][1]++;
      }
      // Start monitoring
      cov_2c4w5gwrlw().s[24]++;
      this.startServiceMonitoring();
      /* istanbul ignore next */
      cov_2c4w5gwrlw().s[25]++;
      this.isInitialized = true;
      /* istanbul ignore next */
      cov_2c4w5gwrlw().s[26]++;
      this.logger.info('✅ Network Service Manager initialized successfully');
      /* istanbul ignore next */
      cov_2c4w5gwrlw().s[27]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_2c4w5gwrlw().s[28]++;
      this.logger.error('❌ Failed to initialize Network Service Manager:', error);
      /* istanbul ignore next */
      cov_2c4w5gwrlw().s[29]++;
      await this.systemErrorManager.handleComponentError(system_error_manager_1.SystemComponent.NETWORK_INFRASTRUCTURE, {
        type: 'INITIALIZATION_FAILED',
        severity: 'CRITICAL',
        message: 'Network Service Manager initialization failed',
        details: {
          error: error.message
        }
      });
      /* istanbul ignore next */
      cov_2c4w5gwrlw().s[30]++;
      return false;
    }
  }
  /**
   * Setup SSH tunnels with error handling
   */
  async setupSSHTunnels() {
    /* istanbul ignore next */
    cov_2c4w5gwrlw().f[2]++;
    cov_2c4w5gwrlw().s[31]++;
    try {
      /* istanbul ignore next */
      cov_2c4w5gwrlw().s[32]++;
      this.logger.info('🔐 Setting up SSH tunnels...');
      // Setup Gate.io SSH tunnel
      const gateioTunnelSuccess =
      /* istanbul ignore next */
      (cov_2c4w5gwrlw().s[33]++, await this.networkErrorHandler.setupSSHTunnel(this.config.ssh.gateio));
      /* istanbul ignore next */
      cov_2c4w5gwrlw().s[34]++;
      if (gateioTunnelSuccess) {
        /* istanbul ignore next */
        cov_2c4w5gwrlw().b[2][0]++;
        cov_2c4w5gwrlw().s[35]++;
        this.updateServiceStatus('gate-io-tunnel', 'healthy');
        /* istanbul ignore next */
        cov_2c4w5gwrlw().s[36]++;
        this.logger.info('✅ Gate.io SSH tunnel established');
      } else {
        /* istanbul ignore next */
        cov_2c4w5gwrlw().b[2][1]++;
        cov_2c4w5gwrlw().s[37]++;
        this.updateServiceStatus('gate-io-tunnel', 'failed');
        /* istanbul ignore next */
        cov_2c4w5gwrlw().s[38]++;
        throw new Error('Failed to establish Gate.io SSH tunnel');
      }
      /* istanbul ignore next */
      cov_2c4w5gwrlw().s[39]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_2c4w5gwrlw().s[40]++;
      this.logger.error('❌ SSH tunnel setup failed:', error);
      /* istanbul ignore next */
      cov_2c4w5gwrlw().s[41]++;
      await this.systemErrorManager.handleComponentError(system_error_manager_1.SystemComponent.NETWORK_INFRASTRUCTURE, {
        type: 'SSH_TUNNEL_SETUP_FAILED',
        severity: 'CRITICAL',
        message: 'SSH tunnel setup failed',
        details: {
          error: error.message,
          config: this.config.ssh
        }
      });
      /* istanbul ignore next */
      cov_2c4w5gwrlw().s[42]++;
      return false;
    }
  }
  /**
   * Initialize database connections with error handling
   */
  async initializeDatabaseConnections() {
    /* istanbul ignore next */
    cov_2c4w5gwrlw().f[3]++;
    cov_2c4w5gwrlw().s[43]++;
    try {
      /* istanbul ignore next */
      cov_2c4w5gwrlw().s[44]++;
      this.logger.info('🗄️ Initializing database connections...');
      // Test database connectivity
      const dbHealthy =
      /* istanbul ignore next */
      (cov_2c4w5gwrlw().s[45]++, await this.networkErrorHandler.testConnectivity('database'));
      /* istanbul ignore next */
      cov_2c4w5gwrlw().s[46]++;
      if (dbHealthy) {
        /* istanbul ignore next */
        cov_2c4w5gwrlw().b[3][0]++;
        cov_2c4w5gwrlw().s[47]++;
        this.updateServiceStatus('database', 'healthy');
        /* istanbul ignore next */
        cov_2c4w5gwrlw().s[48]++;
        this.logger.info('✅ Database connection established');
      } else {
        /* istanbul ignore next */
        cov_2c4w5gwrlw().b[3][1]++;
        cov_2c4w5gwrlw().s[49]++;
        this.updateServiceStatus('database', 'unhealthy');
        // Attempt database error recovery
        /* istanbul ignore next */
        cov_2c4w5gwrlw().s[50]++;
        await this.networkErrorHandler.handleDatabaseError(new Error('Database connection test failed'), this.config.database);
      }
      /* istanbul ignore next */
      cov_2c4w5gwrlw().s[51]++;
      return dbHealthy;
    } catch (error) {
      /* istanbul ignore next */
      cov_2c4w5gwrlw().s[52]++;
      this.logger.error('❌ Database initialization failed:', error);
      /* istanbul ignore next */
      cov_2c4w5gwrlw().s[53]++;
      await this.systemErrorManager.handleComponentError(system_error_manager_1.SystemComponent.DATABASE, {
        type: 'DATABASE_INIT_FAILED',
        severity: 'HIGH',
        message: 'Database initialization failed',
        details: {
          error: error.message,
          config: this.config.database
        }
      });
      /* istanbul ignore next */
      cov_2c4w5gwrlw().s[54]++;
      return false;
    }
  }
  /**
   * Initialize service status tracking
   */
  initializeServiceStatus() {
    /* istanbul ignore next */
    cov_2c4w5gwrlw().f[4]++;
    const services =
    /* istanbul ignore next */
    (cov_2c4w5gwrlw().s[55]++, [{
      name: 'gate-io-tunnel',
      type: 'ssh_tunnel'
    }, {
      name: 'database',
      type: 'database'
    }, {
      name: 'ollama',
      type: 'api'
    }]);
    /* istanbul ignore next */
    cov_2c4w5gwrlw().s[56]++;
    services.forEach(service => {
      /* istanbul ignore next */
      cov_2c4w5gwrlw().f[5]++;
      cov_2c4w5gwrlw().s[57]++;
      this.services.set(service.name, {
        name: service.name,
        type: service.type,
        status: 'unhealthy',
        lastCheck: new Date(),
        uptime: 0,
        errorCount: 0
      });
    });
  }
  /**
   * Update service status
   */
  updateServiceStatus(serviceName, status, error) {
    /* istanbul ignore next */
    cov_2c4w5gwrlw().f[6]++;
    const service =
    /* istanbul ignore next */
    (cov_2c4w5gwrlw().s[58]++, this.services.get(serviceName));
    /* istanbul ignore next */
    cov_2c4w5gwrlw().s[59]++;
    if (!service) {
      /* istanbul ignore next */
      cov_2c4w5gwrlw().b[4][0]++;
      cov_2c4w5gwrlw().s[60]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2c4w5gwrlw().b[4][1]++;
    }
    const wasHealthy =
    /* istanbul ignore next */
    (cov_2c4w5gwrlw().s[61]++, service.status === 'healthy');
    /* istanbul ignore next */
    cov_2c4w5gwrlw().s[62]++;
    service.status = status;
    /* istanbul ignore next */
    cov_2c4w5gwrlw().s[63]++;
    service.lastCheck = new Date();
    /* istanbul ignore next */
    cov_2c4w5gwrlw().s[64]++;
    if (error) {
      /* istanbul ignore next */
      cov_2c4w5gwrlw().b[5][0]++;
      cov_2c4w5gwrlw().s[65]++;
      service.lastError = error;
      /* istanbul ignore next */
      cov_2c4w5gwrlw().s[66]++;
      service.errorCount++;
    } else {
      /* istanbul ignore next */
      cov_2c4w5gwrlw().b[5][1]++;
      cov_2c4w5gwrlw().s[67]++;
      if (status === 'healthy') {
        /* istanbul ignore next */
        cov_2c4w5gwrlw().b[6][0]++;
        cov_2c4w5gwrlw().s[68]++;
        service.errorCount = 0;
        /* istanbul ignore next */
        cov_2c4w5gwrlw().s[69]++;
        service.lastError = undefined;
        // Update uptime if transitioning to healthy
        /* istanbul ignore next */
        cov_2c4w5gwrlw().s[70]++;
        if (!wasHealthy) {
          /* istanbul ignore next */
          cov_2c4w5gwrlw().b[7][0]++;
          cov_2c4w5gwrlw().s[71]++;
          service.uptime = Date.now();
        } else
        /* istanbul ignore next */
        {
          cov_2c4w5gwrlw().b[7][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_2c4w5gwrlw().b[6][1]++;
      }
    }
    // Emit status change event
    /* istanbul ignore next */
    cov_2c4w5gwrlw().s[72]++;
    this.emit('serviceStatusChanged', serviceName, status, error);
  }
  /**
   * Start service monitoring
   */
  startServiceMonitoring() {
    /* istanbul ignore next */
    cov_2c4w5gwrlw().f[7]++;
    cov_2c4w5gwrlw().s[73]++;
    this.monitoringInterval = setInterval(async () => {
      /* istanbul ignore next */
      cov_2c4w5gwrlw().f[8]++;
      cov_2c4w5gwrlw().s[74]++;
      await this.performHealthChecks();
    }, this.config.monitoring.healthCheckInterval);
    /* istanbul ignore next */
    cov_2c4w5gwrlw().s[75]++;
    this.logger.info('🔍 Network service monitoring started');
  }
  /**
   * Perform health checks on all services
   */
  async performHealthChecks() {
    /* istanbul ignore next */
    cov_2c4w5gwrlw().f[9]++;
    const services =
    /* istanbul ignore next */
    (cov_2c4w5gwrlw().s[76]++, Array.from(this.services.keys()));
    /* istanbul ignore next */
    cov_2c4w5gwrlw().s[77]++;
    for (const serviceName of services) {
      /* istanbul ignore next */
      cov_2c4w5gwrlw().s[78]++;
      try {
        const isHealthy =
        /* istanbul ignore next */
        (cov_2c4w5gwrlw().s[79]++, await this.networkErrorHandler.testConnectivity(serviceName));
        /* istanbul ignore next */
        cov_2c4w5gwrlw().s[80]++;
        if (isHealthy) {
          /* istanbul ignore next */
          cov_2c4w5gwrlw().b[8][0]++;
          cov_2c4w5gwrlw().s[81]++;
          this.updateServiceStatus(serviceName, 'healthy');
        } else {
          /* istanbul ignore next */
          cov_2c4w5gwrlw().b[8][1]++;
          cov_2c4w5gwrlw().s[82]++;
          this.updateServiceStatus(serviceName, 'unhealthy', 'Health check failed');
          // Attempt recovery for critical services
          /* istanbul ignore next */
          cov_2c4w5gwrlw().s[83]++;
          if (
          /* istanbul ignore next */
          (cov_2c4w5gwrlw().b[10][0]++, serviceName === 'gate-io-tunnel') ||
          /* istanbul ignore next */
          (cov_2c4w5gwrlw().b[10][1]++, serviceName === 'database')) {
            /* istanbul ignore next */
            cov_2c4w5gwrlw().b[9][0]++;
            cov_2c4w5gwrlw().s[84]++;
            await this.attemptServiceRecovery(serviceName);
          } else
          /* istanbul ignore next */
          {
            cov_2c4w5gwrlw().b[9][1]++;
          }
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_2c4w5gwrlw().s[85]++;
        this.logger.error(`Health check failed for ${serviceName}:`, error);
        /* istanbul ignore next */
        cov_2c4w5gwrlw().s[86]++;
        this.updateServiceStatus(serviceName, 'failed', error.message);
      }
    }
    // Check for cascading failures
    /* istanbul ignore next */
    cov_2c4w5gwrlw().s[87]++;
    await this.checkCascadingFailures();
  }
  /**
   * Attempt service recovery
   */
  async attemptServiceRecovery(serviceName) {
    /* istanbul ignore next */
    cov_2c4w5gwrlw().f[10]++;
    const service =
    /* istanbul ignore next */
    (cov_2c4w5gwrlw().s[88]++, this.services.get(serviceName));
    /* istanbul ignore next */
    cov_2c4w5gwrlw().s[89]++;
    if (!service) {
      /* istanbul ignore next */
      cov_2c4w5gwrlw().b[11][0]++;
      cov_2c4w5gwrlw().s[90]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2c4w5gwrlw().b[11][1]++;
    }
    cov_2c4w5gwrlw().s[91]++;
    if (service.errorCount >= this.config.monitoring.maxReconnectionAttempts) {
      /* istanbul ignore next */
      cov_2c4w5gwrlw().b[12][0]++;
      cov_2c4w5gwrlw().s[92]++;
      this.logger.error(`Max reconnection attempts reached for ${serviceName}`);
      /* istanbul ignore next */
      cov_2c4w5gwrlw().s[93]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2c4w5gwrlw().b[12][1]++;
    }
    cov_2c4w5gwrlw().s[94]++;
    try {
      /* istanbul ignore next */
      cov_2c4w5gwrlw().s[95]++;
      this.logger.info(`🔄 Attempting recovery for ${serviceName}...`);
      /* istanbul ignore next */
      cov_2c4w5gwrlw().s[96]++;
      this.updateServiceStatus(serviceName, 'recovering');
      // Wait before retry
      /* istanbul ignore next */
      cov_2c4w5gwrlw().s[97]++;
      await new Promise(resolve => {
        /* istanbul ignore next */
        cov_2c4w5gwrlw().f[11]++;
        cov_2c4w5gwrlw().s[98]++;
        return setTimeout(resolve, this.config.monitoring.reconnectionDelay);
      });
      /* istanbul ignore next */
      cov_2c4w5gwrlw().s[99]++;
      switch (serviceName) {
        case 'gate-io-tunnel':
          /* istanbul ignore next */
          cov_2c4w5gwrlw().b[13][0]++;
          cov_2c4w5gwrlw().s[100]++;
          await this.recoverSSHTunnel();
          /* istanbul ignore next */
          cov_2c4w5gwrlw().s[101]++;
          break;
        case 'database':
          /* istanbul ignore next */
          cov_2c4w5gwrlw().b[13][1]++;
          cov_2c4w5gwrlw().s[102]++;
          await this.recoverDatabaseConnection();
          /* istanbul ignore next */
          cov_2c4w5gwrlw().s[103]++;
          break;
        case 'ollama':
          /* istanbul ignore next */
          cov_2c4w5gwrlw().b[13][2]++;
          cov_2c4w5gwrlw().s[104]++;
          await this.recoverOllamaService();
          /* istanbul ignore next */
          cov_2c4w5gwrlw().s[105]++;
          break;
      }
      /* istanbul ignore next */
      cov_2c4w5gwrlw().s[106]++;
      this.logger.info(`✅ Recovery successful for ${serviceName}`);
    } catch (error) {
      /* istanbul ignore next */
      cov_2c4w5gwrlw().s[107]++;
      this.logger.error(`❌ Recovery failed for ${serviceName}:`, error);
      /* istanbul ignore next */
      cov_2c4w5gwrlw().s[108]++;
      this.updateServiceStatus(serviceName, 'failed', error.message);
    }
  }
  /**
   * Recover SSH tunnel
   */
  async recoverSSHTunnel() {
    /* istanbul ignore next */
    cov_2c4w5gwrlw().f[12]++;
    const success =
    /* istanbul ignore next */
    (cov_2c4w5gwrlw().s[109]++, await this.networkErrorHandler.setupSSHTunnel(this.config.ssh.gateio));
    /* istanbul ignore next */
    cov_2c4w5gwrlw().s[110]++;
    if (!success) {
      /* istanbul ignore next */
      cov_2c4w5gwrlw().b[14][0]++;
      cov_2c4w5gwrlw().s[111]++;
      throw new Error('SSH tunnel recovery failed');
    } else
    /* istanbul ignore next */
    {
      cov_2c4w5gwrlw().b[14][1]++;
    }
  }
  /**
   * Recover database connection
   */
  async recoverDatabaseConnection() {
    /* istanbul ignore next */
    cov_2c4w5gwrlw().f[13]++;
    cov_2c4w5gwrlw().s[112]++;
    // Emit database reconnection event
    this.networkErrorHandler.emit('databaseReconnectionNeeded');
    // Test connectivity after a moment
    /* istanbul ignore next */
    cov_2c4w5gwrlw().s[113]++;
    await new Promise(resolve => {
      /* istanbul ignore next */
      cov_2c4w5gwrlw().f[14]++;
      cov_2c4w5gwrlw().s[114]++;
      return setTimeout(resolve, 2000);
    });
    const isHealthy =
    /* istanbul ignore next */
    (cov_2c4w5gwrlw().s[115]++, await this.networkErrorHandler.testConnectivity('database'));
    /* istanbul ignore next */
    cov_2c4w5gwrlw().s[116]++;
    if (!isHealthy) {
      /* istanbul ignore next */
      cov_2c4w5gwrlw().b[15][0]++;
      cov_2c4w5gwrlw().s[117]++;
      throw new Error('Database connection recovery failed');
    } else
    /* istanbul ignore next */
    {
      cov_2c4w5gwrlw().b[15][1]++;
    }
  }
  /**
   * Recover Ollama service
   */
  async recoverOllamaService() {
    /* istanbul ignore next */
    cov_2c4w5gwrlw().f[15]++;
    // Test Ollama connectivity
    const isHealthy =
    /* istanbul ignore next */
    (cov_2c4w5gwrlw().s[118]++, await this.networkErrorHandler.testConnectivity('ollama'));
    /* istanbul ignore next */
    cov_2c4w5gwrlw().s[119]++;
    if (!isHealthy) {
      /* istanbul ignore next */
      cov_2c4w5gwrlw().b[16][0]++;
      cov_2c4w5gwrlw().s[120]++;
      throw new Error('Ollama service recovery failed - service may need manual restart');
    } else
    /* istanbul ignore next */
    {
      cov_2c4w5gwrlw().b[16][1]++;
    }
  }
  /**
   * Check for cascading failures
   */
  async checkCascadingFailures() {
    /* istanbul ignore next */
    cov_2c4w5gwrlw().f[16]++;
    const unhealthyServices =
    /* istanbul ignore next */
    (cov_2c4w5gwrlw().s[121]++, Array.from(this.services.values()).filter(service => {
      /* istanbul ignore next */
      cov_2c4w5gwrlw().f[17]++;
      cov_2c4w5gwrlw().s[122]++;
      return /* istanbul ignore next */(cov_2c4w5gwrlw().b[17][0]++, service.status === 'unhealthy') ||
      /* istanbul ignore next */
      (cov_2c4w5gwrlw().b[17][1]++, service.status === 'failed');
    }));
    /* istanbul ignore next */
    cov_2c4w5gwrlw().s[123]++;
    if (unhealthyServices.length >= 2) {
      /* istanbul ignore next */
      cov_2c4w5gwrlw().b[18][0]++;
      cov_2c4w5gwrlw().s[124]++;
      this.logger.warn('🚨 Cascading failure detected', {
        unhealthyServices: unhealthyServices.map(s => {
          /* istanbul ignore next */
          cov_2c4w5gwrlw().f[18]++;
          cov_2c4w5gwrlw().s[125]++;
          return s.name;
        })
      });
      /* istanbul ignore next */
      cov_2c4w5gwrlw().s[126]++;
      await this.systemErrorManager.handleComponentError(system_error_manager_1.SystemComponent.NETWORK_INFRASTRUCTURE, {
        type: 'CASCADING_FAILURE',
        severity: 'CRITICAL',
        message: 'Multiple network services failing',
        details: {
          unhealthyServices: unhealthyServices.map(s => {
            /* istanbul ignore next */
            cov_2c4w5gwrlw().f[19]++;
            cov_2c4w5gwrlw().s[127]++;
            return {
              name: s.name,
              status: s.status,
              errorCount: s.errorCount,
              lastError: s.lastError
            };
          })
        }
      });
      /* istanbul ignore next */
      cov_2c4w5gwrlw().s[128]++;
      this.emit('cascadingFailure', unhealthyServices);
    } else
    /* istanbul ignore next */
    {
      cov_2c4w5gwrlw().b[18][1]++;
    }
  }
  /**
   * Setup error handling listeners
   */
  setupErrorHandling() {
    /* istanbul ignore next */
    cov_2c4w5gwrlw().f[20]++;
    cov_2c4w5gwrlw().s[129]++;
    // Listen for network errors
    this.networkErrorHandler.on('networkError', async error => {
      /* istanbul ignore next */
      cov_2c4w5gwrlw().f[21]++;
      cov_2c4w5gwrlw().s[130]++;
      this.logger.warn('Network error detected', error);
      /* istanbul ignore next */
      cov_2c4w5gwrlw().s[131]++;
      await this.systemErrorManager.handleComponentError(system_error_manager_1.SystemComponent.NETWORK_INFRASTRUCTURE, {
        type: error.type,
        severity: 'HIGH',
        message: error.error,
        details: {
          service: error.service,
          errorCount: error.errorCount
        }
      });
    });
    // Listen for tunnel establishment
    /* istanbul ignore next */
    cov_2c4w5gwrlw().s[132]++;
    this.networkErrorHandler.on('tunnelEstablished', serviceName => {
      /* istanbul ignore next */
      cov_2c4w5gwrlw().f[22]++;
      cov_2c4w5gwrlw().s[133]++;
      this.logger.info(`SSH tunnel established: ${serviceName}`);
      /* istanbul ignore next */
      cov_2c4w5gwrlw().s[134]++;
      this.updateServiceStatus(serviceName, 'healthy');
    });
    // Listen for tunnel reconnection needs
    /* istanbul ignore next */
    cov_2c4w5gwrlw().s[135]++;
    this.networkErrorHandler.on('tunnelReconnectionNeeded', async serviceName => {
      /* istanbul ignore next */
      cov_2c4w5gwrlw().f[23]++;
      cov_2c4w5gwrlw().s[136]++;
      this.logger.info(`SSH tunnel reconnection needed: ${serviceName}`);
      /* istanbul ignore next */
      cov_2c4w5gwrlw().s[137]++;
      await this.attemptServiceRecovery(serviceName);
    });
    // Listen for system error manager restart requests
    /* istanbul ignore next */
    cov_2c4w5gwrlw().s[138]++;
    this.systemErrorManager.on('restartComponent', async component => {
      /* istanbul ignore next */
      cov_2c4w5gwrlw().f[24]++;
      cov_2c4w5gwrlw().s[139]++;
      if (component === system_error_manager_1.SystemComponent.NETWORK_INFRASTRUCTURE) {
        /* istanbul ignore next */
        cov_2c4w5gwrlw().b[19][0]++;
        cov_2c4w5gwrlw().s[140]++;
        await this.handleInfrastructureRestart();
      } else
      /* istanbul ignore next */
      {
        cov_2c4w5gwrlw().b[19][1]++;
      }
    });
    // Listen for network reconnection requests
    /* istanbul ignore next */
    cov_2c4w5gwrlw().s[141]++;
    this.systemErrorManager.on('reconnectNetwork', async () => {
      /* istanbul ignore next */
      cov_2c4w5gwrlw().f[25]++;
      cov_2c4w5gwrlw().s[142]++;
      await this.handleNetworkReconnection();
    });
  }
  /**
   * Handle infrastructure restart
   */
  async handleInfrastructureRestart() {
    /* istanbul ignore next */
    cov_2c4w5gwrlw().f[26]++;
    cov_2c4w5gwrlw().s[143]++;
    try {
      /* istanbul ignore next */
      cov_2c4w5gwrlw().s[144]++;
      this.logger.info('🔄 Handling network infrastructure restart...');
      // Shutdown current services
      /* istanbul ignore next */
      cov_2c4w5gwrlw().s[145]++;
      await this.shutdown();
      // Wait for cleanup
      /* istanbul ignore next */
      cov_2c4w5gwrlw().s[146]++;
      await new Promise(resolve => {
        /* istanbul ignore next */
        cov_2c4w5gwrlw().f[27]++;
        cov_2c4w5gwrlw().s[147]++;
        return setTimeout(resolve, 3000);
      });
      // Reinitialize
      /* istanbul ignore next */
      cov_2c4w5gwrlw().s[148]++;
      await this.initialize();
      /* istanbul ignore next */
      cov_2c4w5gwrlw().s[149]++;
      this.logger.info('✅ Network infrastructure restart completed');
    } catch (error) {
      /* istanbul ignore next */
      cov_2c4w5gwrlw().s[150]++;
      this.logger.error('❌ Infrastructure restart failed:', error);
      /* istanbul ignore next */
      cov_2c4w5gwrlw().s[151]++;
      throw error;
    }
  }
  /**
   * Handle network reconnection
   */
  async handleNetworkReconnection() {
    /* istanbul ignore next */
    cov_2c4w5gwrlw().f[28]++;
    cov_2c4w5gwrlw().s[152]++;
    try {
      /* istanbul ignore next */
      cov_2c4w5gwrlw().s[153]++;
      this.logger.info('🔄 Handling network reconnection...');
      // Attempt to recover all unhealthy services
      const unhealthyServices =
      /* istanbul ignore next */
      (cov_2c4w5gwrlw().s[154]++, Array.from(this.services.entries()).filter(([, service]) => {
        /* istanbul ignore next */
        cov_2c4w5gwrlw().f[29]++;
        cov_2c4w5gwrlw().s[155]++;
        return service.status !== 'healthy';
      }).map(([name]) => {
        /* istanbul ignore next */
        cov_2c4w5gwrlw().f[30]++;
        cov_2c4w5gwrlw().s[156]++;
        return name;
      }));
      /* istanbul ignore next */
      cov_2c4w5gwrlw().s[157]++;
      for (const serviceName of unhealthyServices) {
        /* istanbul ignore next */
        cov_2c4w5gwrlw().s[158]++;
        await this.attemptServiceRecovery(serviceName);
      }
      /* istanbul ignore next */
      cov_2c4w5gwrlw().s[159]++;
      this.logger.info('✅ Network reconnection completed');
    } catch (error) {
      /* istanbul ignore next */
      cov_2c4w5gwrlw().s[160]++;
      this.logger.error('❌ Network reconnection failed:', error);
      /* istanbul ignore next */
      cov_2c4w5gwrlw().s[161]++;
      throw error;
    }
  }
  /**
   * Get network service status
   */
  getServiceStatus() {
    /* istanbul ignore next */
    cov_2c4w5gwrlw().f[31]++;
    const services =
    /* istanbul ignore next */
    (cov_2c4w5gwrlw().s[162]++, Array.from(this.services.values()));
    const healthyServices =
    /* istanbul ignore next */
    (cov_2c4w5gwrlw().s[163]++, services.filter(s => {
      /* istanbul ignore next */
      cov_2c4w5gwrlw().f[32]++;
      cov_2c4w5gwrlw().s[164]++;
      return s.status === 'healthy';
    }).length);
    const networkHealth =
    /* istanbul ignore next */
    (cov_2c4w5gwrlw().s[165]++, this.networkErrorHandler.getNetworkStatus());
    /* istanbul ignore next */
    cov_2c4w5gwrlw().s[166]++;
    return {
      isInitialized: this.isInitialized,
      services,
      healthyServices,
      totalServices: services.length,
      networkHealth
    };
  }
  /**
   * Force service reconnection
   */
  async forceReconnection(serviceName) {
    /* istanbul ignore next */
    cov_2c4w5gwrlw().f[33]++;
    cov_2c4w5gwrlw().s[167]++;
    try {
      /* istanbul ignore next */
      cov_2c4w5gwrlw().s[168]++;
      if (serviceName) {
        /* istanbul ignore next */
        cov_2c4w5gwrlw().b[20][0]++;
        cov_2c4w5gwrlw().s[169]++;
        this.logger.info(`🔄 Forcing reconnection for ${serviceName}...`);
        /* istanbul ignore next */
        cov_2c4w5gwrlw().s[170]++;
        await this.attemptServiceRecovery(serviceName);
        /* istanbul ignore next */
        cov_2c4w5gwrlw().s[171]++;
        return true;
      } else {
        /* istanbul ignore next */
        cov_2c4w5gwrlw().b[20][1]++;
        cov_2c4w5gwrlw().s[172]++;
        this.logger.info('🔄 Forcing reconnection for all services...');
        /* istanbul ignore next */
        cov_2c4w5gwrlw().s[173]++;
        await this.handleNetworkReconnection();
        /* istanbul ignore next */
        cov_2c4w5gwrlw().s[174]++;
        return true;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_2c4w5gwrlw().s[175]++;
      this.logger.error('❌ Force reconnection failed:', error);
      /* istanbul ignore next */
      cov_2c4w5gwrlw().s[176]++;
      return false;
    }
  }
  /**
   * Shutdown network service manager
   */
  async shutdown() {
    /* istanbul ignore next */
    cov_2c4w5gwrlw().f[34]++;
    cov_2c4w5gwrlw().s[177]++;
    this.logger.info('🛑 Shutting down Network Service Manager...');
    // Stop monitoring
    /* istanbul ignore next */
    cov_2c4w5gwrlw().s[178]++;
    if (this.monitoringInterval) {
      /* istanbul ignore next */
      cov_2c4w5gwrlw().b[21][0]++;
      cov_2c4w5gwrlw().s[179]++;
      clearInterval(this.monitoringInterval);
      /* istanbul ignore next */
      cov_2c4w5gwrlw().s[180]++;
      this.monitoringInterval = null;
    } else
    /* istanbul ignore next */
    {
      cov_2c4w5gwrlw().b[21][1]++;
    }
    // Shutdown network error handler
    cov_2c4w5gwrlw().s[181]++;
    await this.networkErrorHandler.shutdown();
    // Reset service status
    /* istanbul ignore next */
    cov_2c4w5gwrlw().s[182]++;
    this.services.clear();
    /* istanbul ignore next */
    cov_2c4w5gwrlw().s[183]++;
    this.isInitialized = false;
    /* istanbul ignore next */
    cov_2c4w5gwrlw().s[184]++;
    this.logger.info('✅ Network Service Manager shutdown completed');
  }
}
/* istanbul ignore next */
cov_2c4w5gwrlw().s[185]++;
exports.NetworkServiceManager = NetworkServiceManager;