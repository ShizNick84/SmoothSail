{"version":3,"names":["cov_2mv9rljmpk","actualCoverage","s","events_1","require","ssh_tunnel_manager_1","TunnelStateTracker","EventEmitter","logger","stateHistory","currentStates","stateTimestamps","statistics","constructor","f","Map","info","trackStateChange","connection","previousState","currentState","metadata","connectionId","id","now","Date","previousTimestamp","b","get","duration","getTime","stateChangeEvent","timestamp","set","addToHistory","updateStatistics","from","to","emit","emitStateSpecificEvents","getCurrentState","getStateHistory","limit","history","slice","getStatistics","getAllStatistics","getConnectionsByState","state","connections","entries","push","getSystemHealthMetrics","allStats","Array","values","totalConnections","length","activeConnections","TunnelState","CONNECTED","failedConnections","FAILED","averageReliability","reduce","sum","stats","reliability","systemUptime","totalUptime","clearHistory","delete","clearAllHistory","clear","has","maxHistorySize","splice","totalDowntime","connectionAttempts","successfulConnections","averageConnectionTime","longestConnection","shortestConnection","Infinity","stateDistribution","DISCONNECTED","CONNECTING","RECONNECTING","TERMINATED","totalTime","generateStateReport","recentHistory","healthScore","recentFailures","filter","entry","Math","max","min","exports"],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\tunnel-state-tracker.ts"],"sourcesContent":["import { EventEmitter } from 'events';\r\nimport { Logger } from '../core/logging/logger';\r\nimport { TunnelConnection, TunnelState } from './ssh-tunnel-manager';\r\n\r\n/**\r\n * Connection state change event\r\n */\r\nexport interface StateChangeEvent {\r\n  connectionId: string;\r\n  previousState: TunnelState;\r\n  currentState: TunnelState;\r\n  timestamp: Date;\r\n  duration: number; // Time spent in previous state (ms)\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\n/**\r\n * Connection state history entry\r\n */\r\nexport interface StateHistoryEntry {\r\n  state: TunnelState;\r\n  timestamp: Date;\r\n  duration: number;\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\n/**\r\n * Connection state statistics\r\n */\r\nexport interface StateStatistics {\r\n  connectionId: string;\r\n  totalUptime: number;\r\n  totalDowntime: number;\r\n  connectionAttempts: number;\r\n  successfulConnections: number;\r\n  failedConnections: number;\r\n  averageConnectionTime: number;\r\n  longestConnection: number;\r\n  shortestConnection: number;\r\n  stateDistribution: Record<TunnelState, number>;\r\n  reliability: number; // Percentage (0-100)\r\n}\r\n\r\n/**\r\n * Tunnel State Tracker\r\n * Tracks and manages SSH tunnel connection states with comprehensive history and analytics\r\n */\r\nexport class TunnelStateTracker extends EventEmitter {\r\n  private logger: Logger;\r\n  private stateHistory: Map<string, StateHistoryEntry[]>;\r\n  private currentStates: Map<string, TunnelState>;\r\n  private stateTimestamps: Map<string, Date>;\r\n  private statistics: Map<string, StateStatistics>;\r\n\r\n  constructor(logger: Logger) {\r\n    super();\r\n    this.logger = logger;\r\n    this.stateHistory = new Map();\r\n    this.currentStates = new Map();\r\n    this.stateTimestamps = new Map();\r\n    this.statistics = new Map();\r\n\r\n    this.logger.info('Tunnel State Tracker initialized');\r\n  }\r\n\r\n  /**\r\n   * Track connection state change\r\n   * Records state transitions and updates statistics\r\n   * \r\n   * @param connection - Tunnel connection\r\n   * @param previousState - Previous connection state\r\n   * @param currentState - Current connection state\r\n   * @param metadata - Additional metadata for the state change\r\n   */\r\n  trackStateChange(\r\n    connection: TunnelConnection,\r\n    previousState: TunnelState,\r\n    currentState: TunnelState,\r\n    metadata?: Record<string, any>\r\n  ): void {\r\n    const connectionId = connection.id;\r\n    const now = new Date();\r\n    \r\n    // Calculate duration in previous state\r\n    const previousTimestamp = this.stateTimestamps.get(connectionId) || now;\r\n    const duration = now.getTime() - previousTimestamp.getTime();\r\n\r\n    // Create state change event\r\n    const stateChangeEvent: StateChangeEvent = {\r\n      connectionId,\r\n      previousState,\r\n      currentState,\r\n      timestamp: now,\r\n      duration,\r\n      metadata\r\n    };\r\n\r\n    // Update current state tracking\r\n    this.currentStates.set(connectionId, currentState);\r\n    this.stateTimestamps.set(connectionId, now);\r\n\r\n    // Add to history\r\n    this.addToHistory(connectionId, previousState, previousTimestamp, duration, metadata);\r\n\r\n    // Update statistics\r\n    this.updateStatistics(connectionId, previousState, currentState, duration);\r\n\r\n    // Log state change\r\n    this.logger.info(`Tunnel state changed: ${connectionId}`, {\r\n      from: previousState,\r\n      to: currentState,\r\n      duration: `${duration}ms`,\r\n      metadata\r\n    });\r\n\r\n    // Emit state change event\r\n    this.emit('stateChanged', stateChangeEvent);\r\n\r\n    // Emit specific state events\r\n    this.emitStateSpecificEvents(connection, currentState, stateChangeEvent);\r\n  }\r\n\r\n  /**\r\n   * Get current state of a connection\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @returns Current tunnel state or undefined\r\n   */\r\n  getCurrentState(connectionId: string): TunnelState | undefined {\r\n    return this.currentStates.get(connectionId);\r\n  }\r\n\r\n  /**\r\n   * Get state history for a connection\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @param limit - Maximum number of history entries to return\r\n   * @returns Array of state history entries\r\n   */\r\n  getStateHistory(connectionId: string, limit?: number): StateHistoryEntry[] {\r\n    const history = this.stateHistory.get(connectionId) || [];\r\n    return limit ? history.slice(-limit) : [...history];\r\n  }\r\n\r\n  /**\r\n   * Get connection statistics\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @returns Connection statistics or undefined\r\n   */\r\n  getStatistics(connectionId: string): StateStatistics | undefined {\r\n    return this.statistics.get(connectionId);\r\n  }\r\n\r\n  /**\r\n   * Get all connection statistics\r\n   * \r\n   * @returns Map of all connection statistics\r\n   */\r\n  getAllStatistics(): Map<string, StateStatistics> {\r\n    return new Map(this.statistics);\r\n  }\r\n\r\n  /**\r\n   * Get connections by current state\r\n   * \r\n   * @param state - Tunnel state to filter by\r\n   * @returns Array of connection IDs in the specified state\r\n   */\r\n  getConnectionsByState(state: TunnelState): string[] {\r\n    const connections: string[] = [];\r\n    \r\n    for (const [connectionId, currentState] of this.currentStates.entries()) {\r\n      if (currentState === state) {\r\n        connections.push(connectionId);\r\n      }\r\n    }\r\n    \r\n    return connections;\r\n  }\r\n\r\n  /**\r\n   * Get overall system health metrics\r\n   * \r\n   * @returns System health metrics\r\n   */\r\n  getSystemHealthMetrics(): {\r\n    totalConnections: number;\r\n    activeConnections: number;\r\n    failedConnections: number;\r\n    averageReliability: number;\r\n    systemUptime: number;\r\n  } {\r\n    const allStats = Array.from(this.statistics.values());\r\n    \r\n    const totalConnections = allStats.length;\r\n    const activeConnections = this.getConnectionsByState(TunnelState.CONNECTED).length;\r\n    const failedConnections = this.getConnectionsByState(TunnelState.FAILED).length;\r\n    \r\n    const averageReliability = totalConnections > 0 \r\n      ? allStats.reduce((sum, stats) => sum + stats.reliability, 0) / totalConnections\r\n      : 0;\r\n    \r\n    const systemUptime = totalConnections > 0\r\n      ? allStats.reduce((sum, stats) => sum + stats.totalUptime, 0) / totalConnections\r\n      : 0;\r\n\r\n    return {\r\n      totalConnections,\r\n      activeConnections,\r\n      failedConnections,\r\n      averageReliability,\r\n      systemUptime\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Clear history for a connection\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   */\r\n  clearHistory(connectionId: string): void {\r\n    this.stateHistory.delete(connectionId);\r\n    this.currentStates.delete(connectionId);\r\n    this.stateTimestamps.delete(connectionId);\r\n    this.statistics.delete(connectionId);\r\n    \r\n    this.logger.info(`Cleared state history for connection: ${connectionId}`);\r\n  }\r\n\r\n  /**\r\n   * Clear all history\r\n   */\r\n  clearAllHistory(): void {\r\n    this.stateHistory.clear();\r\n    this.currentStates.clear();\r\n    this.stateTimestamps.clear();\r\n    this.statistics.clear();\r\n    \r\n    this.logger.info('Cleared all state history');\r\n  }\r\n\r\n  /**\r\n   * Add entry to state history\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @param state - Tunnel state\r\n   * @param timestamp - State timestamp\r\n   * @param duration - Duration in state\r\n   * @param metadata - Additional metadata\r\n   */\r\n  private addToHistory(\r\n    connectionId: string,\r\n    state: TunnelState,\r\n    timestamp: Date,\r\n    duration: number,\r\n    metadata?: Record<string, any>\r\n  ): void {\r\n    if (!this.stateHistory.has(connectionId)) {\r\n      this.stateHistory.set(connectionId, []);\r\n    }\r\n\r\n    const history = this.stateHistory.get(connectionId)!;\r\n    history.push({\r\n      state,\r\n      timestamp,\r\n      duration,\r\n      metadata\r\n    });\r\n\r\n    // Limit history size to prevent memory issues\r\n    const maxHistorySize = 1000;\r\n    if (history.length > maxHistorySize) {\r\n      history.splice(0, history.length - maxHistorySize);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update connection statistics\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @param previousState - Previous state\r\n   * @param currentState - Current state\r\n   * @param duration - Duration in previous state\r\n   */\r\n  private updateStatistics(\r\n    connectionId: string,\r\n    previousState: TunnelState,\r\n    currentState: TunnelState,\r\n    duration: number\r\n  ): void {\r\n    if (!this.statistics.has(connectionId)) {\r\n      this.statistics.set(connectionId, {\r\n        connectionId,\r\n        totalUptime: 0,\r\n        totalDowntime: 0,\r\n        connectionAttempts: 0,\r\n        successfulConnections: 0,\r\n        failedConnections: 0,\r\n        averageConnectionTime: 0,\r\n        longestConnection: 0,\r\n        shortestConnection: Infinity,\r\n        stateDistribution: {\r\n          [TunnelState.DISCONNECTED]: 0,\r\n          [TunnelState.CONNECTING]: 0,\r\n          [TunnelState.CONNECTED]: 0,\r\n          [TunnelState.RECONNECTING]: 0,\r\n          [TunnelState.FAILED]: 0,\r\n          [TunnelState.TERMINATED]: 0\r\n        },\r\n        reliability: 0\r\n      });\r\n    }\r\n\r\n    const stats = this.statistics.get(connectionId)!;\r\n\r\n    // Update state distribution\r\n    stats.stateDistribution[previousState] += duration;\r\n\r\n    // Update uptime/downtime\r\n    if (previousState === TunnelState.CONNECTED) {\r\n      stats.totalUptime += duration;\r\n      \r\n      // Update connection duration statistics\r\n      if (duration > stats.longestConnection) {\r\n        stats.longestConnection = duration;\r\n      }\r\n      if (duration < stats.shortestConnection) {\r\n        stats.shortestConnection = duration;\r\n      }\r\n    } else {\r\n      stats.totalDowntime += duration;\r\n    }\r\n\r\n    // Track connection attempts and outcomes\r\n    if (currentState === TunnelState.CONNECTING) {\r\n      stats.connectionAttempts++;\r\n    } else if (currentState === TunnelState.CONNECTED && previousState === TunnelState.CONNECTING) {\r\n      stats.successfulConnections++;\r\n    } else if (currentState === TunnelState.FAILED) {\r\n      stats.failedConnections++;\r\n    }\r\n\r\n    // Calculate average connection time\r\n    if (stats.successfulConnections > 0) {\r\n      stats.averageConnectionTime = stats.totalUptime / stats.successfulConnections;\r\n    }\r\n\r\n    // Calculate reliability percentage\r\n    const totalTime = stats.totalUptime + stats.totalDowntime;\r\n    if (totalTime > 0) {\r\n      stats.reliability = (stats.totalUptime / totalTime) * 100;\r\n    }\r\n\r\n    // Handle edge case for shortest connection\r\n    if (stats.shortestConnection === Infinity) {\r\n      stats.shortestConnection = 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Emit state-specific events\r\n   * \r\n   * @param connection - Tunnel connection\r\n   * @param currentState - Current state\r\n   * @param stateChangeEvent - State change event\r\n   */\r\n  private emitStateSpecificEvents(\r\n    connection: TunnelConnection,\r\n    currentState: TunnelState,\r\n    stateChangeEvent: StateChangeEvent\r\n  ): void {\r\n    switch (currentState) {\r\n      case TunnelState.CONNECTED:\r\n        this.emit('connectionEstablished', connection, stateChangeEvent);\r\n        break;\r\n      \r\n      case TunnelState.DISCONNECTED:\r\n        this.emit('connectionLost', connection, stateChangeEvent);\r\n        break;\r\n      \r\n      case TunnelState.FAILED:\r\n        this.emit('connectionFailed', connection, stateChangeEvent);\r\n        break;\r\n      \r\n      case TunnelState.RECONNECTING:\r\n        this.emit('reconnectionStarted', connection, stateChangeEvent);\r\n        break;\r\n      \r\n      case TunnelState.TERMINATED:\r\n        this.emit('connectionTerminated', connection, stateChangeEvent);\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate state report for a connection\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @returns Detailed state report\r\n   */\r\n  generateStateReport(connectionId: string): {\r\n    connectionId: string;\r\n    currentState: TunnelState | undefined;\r\n    statistics: StateStatistics | undefined;\r\n    recentHistory: StateHistoryEntry[];\r\n    healthScore: number;\r\n  } {\r\n    const currentState = this.getCurrentState(connectionId);\r\n    const statistics = this.getStatistics(connectionId);\r\n    const recentHistory = this.getStateHistory(connectionId, 10);\r\n    \r\n    // Calculate health score based on reliability and recent activity\r\n    let healthScore = 0;\r\n    if (statistics) {\r\n      healthScore = statistics.reliability;\r\n      \r\n      // Adjust based on recent failures\r\n      const recentFailures = recentHistory.filter(\r\n        entry => entry.state === TunnelState.FAILED\r\n      ).length;\r\n      \r\n      if (recentFailures > 0) {\r\n        healthScore = Math.max(0, healthScore - (recentFailures * 10));\r\n      }\r\n      \r\n      // Boost score if currently connected\r\n      if (currentState === TunnelState.CONNECTED) {\r\n        healthScore = Math.min(100, healthScore + 10);\r\n      }\r\n    }\r\n\r\n    return {\r\n      connectionId,\r\n      currentState,\r\n      statistics,\r\n      recentHistory,\r\n      healthScore\r\n    };\r\n  }\r\n}\r\n"],"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","ignoreList":[]}