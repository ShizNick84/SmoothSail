476717137f4886da5a7345fef0db4462
"use strict";

/* istanbul ignore next */
function cov_2mv9rljmpk() {
  var path = "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\tunnel-state-tracker.ts";
  var hash = "0c56762e860afa9b248282584409444595e2e7b8";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\tunnel-state-tracker.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 36
        }
      },
      "2": {
        start: {
          line: 4,
          column: 17
        },
        end: {
          line: 4,
          column: 34
        }
      },
      "3": {
        start: {
          line: 5,
          column: 29
        },
        end: {
          line: 5,
          column: 60
        }
      },
      "4": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 16
        }
      },
      "5": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 29
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 39
        }
      },
      "8": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 41
        }
      },
      "9": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 36
        }
      },
      "10": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 61
        }
      },
      "11": {
        start: {
          line: 35,
          column: 29
        },
        end: {
          line: 35,
          column: 42
        }
      },
      "12": {
        start: {
          line: 36,
          column: 20
        },
        end: {
          line: 36,
          column: 30
        }
      },
      "13": {
        start: {
          line: 38,
          column: 34
        },
        end: {
          line: 38,
          column: 79
        }
      },
      "14": {
        start: {
          line: 39,
          column: 25
        },
        end: {
          line: 39,
          column: 68
        }
      },
      "15": {
        start: {
          line: 41,
          column: 33
        },
        end: {
          line: 48,
          column: 9
        }
      },
      "16": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 50,
          column: 59
        }
      },
      "17": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 51,
          column: 52
        }
      },
      "18": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 53,
          column: 94
        }
      },
      "19": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 55,
          column: 83
        }
      },
      "20": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 62,
          column: 11
        }
      },
      "21": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 64,
          column: 52
        }
      },
      "22": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 66,
          column: 81
        }
      },
      "23": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 75,
          column: 52
        }
      },
      "24": {
        start: {
          line: 85,
          column: 24
        },
        end: {
          line: 85,
          column: 65
        }
      },
      "25": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 86,
          column: 60
        }
      },
      "26": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 95,
          column: 49
        }
      },
      "27": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 103,
          column: 40
        }
      },
      "28": {
        start: {
          line: 112,
          column: 28
        },
        end: {
          line: 112,
          column: 30
        }
      },
      "29": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 117,
          column: 9
        }
      },
      "30": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 116,
          column: 13
        }
      },
      "31": {
        start: {
          line: 115,
          column: 16
        },
        end: {
          line: 115,
          column: 47
        }
      },
      "32": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 118,
          column: 27
        }
      },
      "33": {
        start: {
          line: 126,
          column: 25
        },
        end: {
          line: 126,
          column: 61
        }
      },
      "34": {
        start: {
          line: 127,
          column: 33
        },
        end: {
          line: 127,
          column: 48
        }
      },
      "35": {
        start: {
          line: 128,
          column: 34
        },
        end: {
          line: 128,
          column: 111
        }
      },
      "36": {
        start: {
          line: 129,
          column: 34
        },
        end: {
          line: 129,
          column: 108
        }
      },
      "37": {
        start: {
          line: 130,
          column: 35
        },
        end: {
          line: 132,
          column: 15
        }
      },
      "38": {
        start: {
          line: 131,
          column: 46
        },
        end: {
          line: 131,
          column: 69
        }
      },
      "39": {
        start: {
          line: 133,
          column: 29
        },
        end: {
          line: 135,
          column: 15
        }
      },
      "40": {
        start: {
          line: 134,
          column: 46
        },
        end: {
          line: 134,
          column: 69
        }
      },
      "41": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 142,
          column: 10
        }
      },
      "42": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 150,
          column: 47
        }
      },
      "43": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 151,
          column: 48
        }
      },
      "44": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 152,
          column: 50
        }
      },
      "45": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 153,
          column: 45
        }
      },
      "46": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 154,
          column: 82
        }
      },
      "47": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 160,
          column: 34
        }
      },
      "48": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 161,
          column: 35
        }
      },
      "49": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 162,
          column: 37
        }
      },
      "50": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 163,
          column: 32
        }
      },
      "51": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 164,
          column: 54
        }
      },
      "52": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 178,
          column: 9
        }
      },
      "53": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 177,
          column: 52
        }
      },
      "54": {
        start: {
          line: 179,
          column: 24
        },
        end: {
          line: 179,
          column: 59
        }
      },
      "55": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 185,
          column: 11
        }
      },
      "56": {
        start: {
          line: 187,
          column: 31
        },
        end: {
          line: 187,
          column: 35
        }
      },
      "57": {
        start: {
          line: 188,
          column: 8
        },
        end: {
          line: 190,
          column: 9
        }
      },
      "58": {
        start: {
          line: 189,
          column: 12
        },
        end: {
          line: 189,
          column: 63
        }
      },
      "59": {
        start: {
          line: 201,
          column: 8
        },
        end: {
          line: 222,
          column: 9
        }
      },
      "60": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 221,
          column: 15
        }
      },
      "61": {
        start: {
          line: 223,
          column: 22
        },
        end: {
          line: 223,
          column: 55
        }
      },
      "62": {
        start: {
          line: 225,
          column: 8
        },
        end: {
          line: 225,
          column: 59
        }
      },
      "63": {
        start: {
          line: 227,
          column: 8
        },
        end: {
          line: 239,
          column: 9
        }
      },
      "64": {
        start: {
          line: 228,
          column: 12
        },
        end: {
          line: 228,
          column: 42
        }
      },
      "65": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 232,
          column: 13
        }
      },
      "66": {
        start: {
          line: 231,
          column: 16
        },
        end: {
          line: 231,
          column: 51
        }
      },
      "67": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 235,
          column: 13
        }
      },
      "68": {
        start: {
          line: 234,
          column: 16
        },
        end: {
          line: 234,
          column: 52
        }
      },
      "69": {
        start: {
          line: 238,
          column: 12
        },
        end: {
          line: 238,
          column: 44
        }
      },
      "70": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 249,
          column: 9
        }
      },
      "71": {
        start: {
          line: 242,
          column: 12
        },
        end: {
          line: 242,
          column: 39
        }
      },
      "72": {
        start: {
          line: 244,
          column: 13
        },
        end: {
          line: 249,
          column: 9
        }
      },
      "73": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 245,
          column: 42
        }
      },
      "74": {
        start: {
          line: 247,
          column: 13
        },
        end: {
          line: 249,
          column: 9
        }
      },
      "75": {
        start: {
          line: 248,
          column: 12
        },
        end: {
          line: 248,
          column: 38
        }
      },
      "76": {
        start: {
          line: 251,
          column: 8
        },
        end: {
          line: 253,
          column: 9
        }
      },
      "77": {
        start: {
          line: 252,
          column: 12
        },
        end: {
          line: 252,
          column: 90
        }
      },
      "78": {
        start: {
          line: 255,
          column: 26
        },
        end: {
          line: 255,
          column: 65
        }
      },
      "79": {
        start: {
          line: 256,
          column: 8
        },
        end: {
          line: 258,
          column: 9
        }
      },
      "80": {
        start: {
          line: 257,
          column: 12
        },
        end: {
          line: 257,
          column: 70
        }
      },
      "81": {
        start: {
          line: 260,
          column: 8
        },
        end: {
          line: 262,
          column: 9
        }
      },
      "82": {
        start: {
          line: 261,
          column: 12
        },
        end: {
          line: 261,
          column: 41
        }
      },
      "83": {
        start: {
          line: 272,
          column: 8
        },
        end: {
          line: 288,
          column: 9
        }
      },
      "84": {
        start: {
          line: 274,
          column: 16
        },
        end: {
          line: 274,
          column: 81
        }
      },
      "85": {
        start: {
          line: 275,
          column: 16
        },
        end: {
          line: 275,
          column: 22
        }
      },
      "86": {
        start: {
          line: 277,
          column: 16
        },
        end: {
          line: 277,
          column: 74
        }
      },
      "87": {
        start: {
          line: 278,
          column: 16
        },
        end: {
          line: 278,
          column: 22
        }
      },
      "88": {
        start: {
          line: 280,
          column: 16
        },
        end: {
          line: 280,
          column: 76
        }
      },
      "89": {
        start: {
          line: 281,
          column: 16
        },
        end: {
          line: 281,
          column: 22
        }
      },
      "90": {
        start: {
          line: 283,
          column: 16
        },
        end: {
          line: 283,
          column: 79
        }
      },
      "91": {
        start: {
          line: 284,
          column: 16
        },
        end: {
          line: 284,
          column: 22
        }
      },
      "92": {
        start: {
          line: 286,
          column: 16
        },
        end: {
          line: 286,
          column: 80
        }
      },
      "93": {
        start: {
          line: 287,
          column: 16
        },
        end: {
          line: 287,
          column: 22
        }
      },
      "94": {
        start: {
          line: 297,
          column: 29
        },
        end: {
          line: 297,
          column: 63
        }
      },
      "95": {
        start: {
          line: 298,
          column: 27
        },
        end: {
          line: 298,
          column: 59
        }
      },
      "96": {
        start: {
          line: 299,
          column: 30
        },
        end: {
          line: 299,
          column: 68
        }
      },
      "97": {
        start: {
          line: 301,
          column: 26
        },
        end: {
          line: 301,
          column: 27
        }
      },
      "98": {
        start: {
          line: 302,
          column: 8
        },
        end: {
          line: 313,
          column: 9
        }
      },
      "99": {
        start: {
          line: 303,
          column: 12
        },
        end: {
          line: 303,
          column: 49
        }
      },
      "100": {
        start: {
          line: 305,
          column: 35
        },
        end: {
          line: 305,
          column: 128
        }
      },
      "101": {
        start: {
          line: 305,
          column: 65
        },
        end: {
          line: 305,
          column: 120
        }
      },
      "102": {
        start: {
          line: 306,
          column: 12
        },
        end: {
          line: 308,
          column: 13
        }
      },
      "103": {
        start: {
          line: 307,
          column: 16
        },
        end: {
          line: 307,
          column: 79
        }
      },
      "104": {
        start: {
          line: 310,
          column: 12
        },
        end: {
          line: 312,
          column: 13
        }
      },
      "105": {
        start: {
          line: 311,
          column: 16
        },
        end: {
          line: 311,
          column: 62
        }
      },
      "106": {
        start: {
          line: 314,
          column: 8
        },
        end: {
          line: 320,
          column: 10
        }
      },
      "107": {
        start: {
          line: 323,
          column: 0
        },
        end: {
          line: 323,
          column: 48
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 24
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 16
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 34,
            column: 4
          },
          end: {
            line: 34,
            column: 5
          }
        },
        loc: {
          start: {
            line: 34,
            column: 72
          },
          end: {
            line: 67,
            column: 5
          }
        },
        line: 34
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 74,
            column: 4
          },
          end: {
            line: 74,
            column: 5
          }
        },
        loc: {
          start: {
            line: 74,
            column: 34
          },
          end: {
            line: 76,
            column: 5
          }
        },
        line: 74
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 84,
            column: 4
          },
          end: {
            line: 84,
            column: 5
          }
        },
        loc: {
          start: {
            line: 84,
            column: 41
          },
          end: {
            line: 87,
            column: 5
          }
        },
        line: 84
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 94,
            column: 4
          },
          end: {
            line: 94,
            column: 5
          }
        },
        loc: {
          start: {
            line: 94,
            column: 32
          },
          end: {
            line: 96,
            column: 5
          }
        },
        line: 94
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 102,
            column: 4
          },
          end: {
            line: 102,
            column: 5
          }
        },
        loc: {
          start: {
            line: 102,
            column: 23
          },
          end: {
            line: 104,
            column: 5
          }
        },
        line: 102
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 111,
            column: 4
          },
          end: {
            line: 111,
            column: 5
          }
        },
        loc: {
          start: {
            line: 111,
            column: 33
          },
          end: {
            line: 119,
            column: 5
          }
        },
        line: 111
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 125,
            column: 4
          },
          end: {
            line: 125,
            column: 5
          }
        },
        loc: {
          start: {
            line: 125,
            column: 29
          },
          end: {
            line: 143,
            column: 5
          }
        },
        line: 125
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 131,
            column: 30
          },
          end: {
            line: 131,
            column: 31
          }
        },
        loc: {
          start: {
            line: 131,
            column: 46
          },
          end: {
            line: 131,
            column: 69
          }
        },
        line: 131
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 134,
            column: 30
          },
          end: {
            line: 134,
            column: 31
          }
        },
        loc: {
          start: {
            line: 134,
            column: 46
          },
          end: {
            line: 134,
            column: 69
          }
        },
        line: 134
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 149,
            column: 4
          },
          end: {
            line: 149,
            column: 5
          }
        },
        loc: {
          start: {
            line: 149,
            column: 31
          },
          end: {
            line: 155,
            column: 5
          }
        },
        line: 149
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 159,
            column: 4
          },
          end: {
            line: 159,
            column: 5
          }
        },
        loc: {
          start: {
            line: 159,
            column: 22
          },
          end: {
            line: 165,
            column: 5
          }
        },
        line: 159
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 175,
            column: 4
          },
          end: {
            line: 175,
            column: 5
          }
        },
        loc: {
          start: {
            line: 175,
            column: 69
          },
          end: {
            line: 191,
            column: 5
          }
        },
        line: 175
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 200,
            column: 4
          },
          end: {
            line: 200,
            column: 5
          }
        },
        loc: {
          start: {
            line: 200,
            column: 74
          },
          end: {
            line: 263,
            column: 5
          }
        },
        line: 200
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 271,
            column: 4
          },
          end: {
            line: 271,
            column: 5
          }
        },
        loc: {
          start: {
            line: 271,
            column: 72
          },
          end: {
            line: 289,
            column: 5
          }
        },
        line: 271
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 296,
            column: 4
          },
          end: {
            line: 296,
            column: 5
          }
        },
        loc: {
          start: {
            line: 296,
            column: 38
          },
          end: {
            line: 321,
            column: 5
          }
        },
        line: 296
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 305,
            column: 56
          },
          end: {
            line: 305,
            column: 57
          }
        },
        loc: {
          start: {
            line: 305,
            column: 65
          },
          end: {
            line: 305,
            column: 120
          }
        },
        line: 305
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 38,
            column: 34
          },
          end: {
            line: 38,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 38,
            column: 34
          },
          end: {
            line: 38,
            column: 72
          }
        }, {
          start: {
            line: 38,
            column: 76
          },
          end: {
            line: 38,
            column: 79
          }
        }],
        line: 38
      },
      "1": {
        loc: {
          start: {
            line: 85,
            column: 24
          },
          end: {
            line: 85,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 85,
            column: 24
          },
          end: {
            line: 85,
            column: 59
          }
        }, {
          start: {
            line: 85,
            column: 63
          },
          end: {
            line: 85,
            column: 65
          }
        }],
        line: 85
      },
      "2": {
        loc: {
          start: {
            line: 86,
            column: 15
          },
          end: {
            line: 86,
            column: 59
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 86,
            column: 23
          },
          end: {
            line: 86,
            column: 44
          }
        }, {
          start: {
            line: 86,
            column: 47
          },
          end: {
            line: 86,
            column: 59
          }
        }],
        line: 86
      },
      "3": {
        loc: {
          start: {
            line: 114,
            column: 12
          },
          end: {
            line: 116,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 114,
            column: 12
          },
          end: {
            line: 116,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 114
      },
      "4": {
        loc: {
          start: {
            line: 130,
            column: 35
          },
          end: {
            line: 132,
            column: 15
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 131,
            column: 14
          },
          end: {
            line: 131,
            column: 92
          }
        }, {
          start: {
            line: 132,
            column: 14
          },
          end: {
            line: 132,
            column: 15
          }
        }],
        line: 130
      },
      "5": {
        loc: {
          start: {
            line: 133,
            column: 29
          },
          end: {
            line: 135,
            column: 15
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 134,
            column: 14
          },
          end: {
            line: 134,
            column: 92
          }
        }, {
          start: {
            line: 135,
            column: 14
          },
          end: {
            line: 135,
            column: 15
          }
        }],
        line: 133
      },
      "6": {
        loc: {
          start: {
            line: 176,
            column: 8
          },
          end: {
            line: 178,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 176,
            column: 8
          },
          end: {
            line: 178,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 176
      },
      "7": {
        loc: {
          start: {
            line: 188,
            column: 8
          },
          end: {
            line: 190,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 188,
            column: 8
          },
          end: {
            line: 190,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 188
      },
      "8": {
        loc: {
          start: {
            line: 201,
            column: 8
          },
          end: {
            line: 222,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 201,
            column: 8
          },
          end: {
            line: 222,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 201
      },
      "9": {
        loc: {
          start: {
            line: 227,
            column: 8
          },
          end: {
            line: 239,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 227,
            column: 8
          },
          end: {
            line: 239,
            column: 9
          }
        }, {
          start: {
            line: 237,
            column: 13
          },
          end: {
            line: 239,
            column: 9
          }
        }],
        line: 227
      },
      "10": {
        loc: {
          start: {
            line: 230,
            column: 12
          },
          end: {
            line: 232,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 230,
            column: 12
          },
          end: {
            line: 232,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 230
      },
      "11": {
        loc: {
          start: {
            line: 233,
            column: 12
          },
          end: {
            line: 235,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 233,
            column: 12
          },
          end: {
            line: 235,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 233
      },
      "12": {
        loc: {
          start: {
            line: 241,
            column: 8
          },
          end: {
            line: 249,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 241,
            column: 8
          },
          end: {
            line: 249,
            column: 9
          }
        }, {
          start: {
            line: 244,
            column: 13
          },
          end: {
            line: 249,
            column: 9
          }
        }],
        line: 241
      },
      "13": {
        loc: {
          start: {
            line: 244,
            column: 13
          },
          end: {
            line: 249,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 244,
            column: 13
          },
          end: {
            line: 249,
            column: 9
          }
        }, {
          start: {
            line: 247,
            column: 13
          },
          end: {
            line: 249,
            column: 9
          }
        }],
        line: 244
      },
      "14": {
        loc: {
          start: {
            line: 244,
            column: 17
          },
          end: {
            line: 244,
            column: 141
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 244,
            column: 17
          },
          end: {
            line: 244,
            column: 76
          }
        }, {
          start: {
            line: 244,
            column: 80
          },
          end: {
            line: 244,
            column: 141
          }
        }],
        line: 244
      },
      "15": {
        loc: {
          start: {
            line: 247,
            column: 13
          },
          end: {
            line: 249,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 247,
            column: 13
          },
          end: {
            line: 249,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 247
      },
      "16": {
        loc: {
          start: {
            line: 251,
            column: 8
          },
          end: {
            line: 253,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 251,
            column: 8
          },
          end: {
            line: 253,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 251
      },
      "17": {
        loc: {
          start: {
            line: 256,
            column: 8
          },
          end: {
            line: 258,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 256,
            column: 8
          },
          end: {
            line: 258,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 256
      },
      "18": {
        loc: {
          start: {
            line: 260,
            column: 8
          },
          end: {
            line: 262,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 260,
            column: 8
          },
          end: {
            line: 262,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 260
      },
      "19": {
        loc: {
          start: {
            line: 272,
            column: 8
          },
          end: {
            line: 288,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 273,
            column: 12
          },
          end: {
            line: 275,
            column: 22
          }
        }, {
          start: {
            line: 276,
            column: 12
          },
          end: {
            line: 278,
            column: 22
          }
        }, {
          start: {
            line: 279,
            column: 12
          },
          end: {
            line: 281,
            column: 22
          }
        }, {
          start: {
            line: 282,
            column: 12
          },
          end: {
            line: 284,
            column: 22
          }
        }, {
          start: {
            line: 285,
            column: 12
          },
          end: {
            line: 287,
            column: 22
          }
        }],
        line: 272
      },
      "20": {
        loc: {
          start: {
            line: 302,
            column: 8
          },
          end: {
            line: 313,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 302,
            column: 8
          },
          end: {
            line: 313,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 302
      },
      "21": {
        loc: {
          start: {
            line: 306,
            column: 12
          },
          end: {
            line: 308,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 306,
            column: 12
          },
          end: {
            line: 308,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 306
      },
      "22": {
        loc: {
          start: {
            line: 310,
            column: 12
          },
          end: {
            line: 312,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 310,
            column: 12
          },
          end: {
            line: 312,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 310
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0, 0, 0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\tunnel-state-tracker.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\tunnel-state-tracker.ts"],
      sourcesContent: ["import { EventEmitter } from 'events';\r\nimport { Logger } from '../core/logging/logger';\r\nimport { TunnelConnection, TunnelState } from './ssh-tunnel-manager';\r\n\r\n/**\r\n * Connection state change event\r\n */\r\nexport interface StateChangeEvent {\r\n  connectionId: string;\r\n  previousState: TunnelState;\r\n  currentState: TunnelState;\r\n  timestamp: Date;\r\n  duration: number; // Time spent in previous state (ms)\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\n/**\r\n * Connection state history entry\r\n */\r\nexport interface StateHistoryEntry {\r\n  state: TunnelState;\r\n  timestamp: Date;\r\n  duration: number;\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\n/**\r\n * Connection state statistics\r\n */\r\nexport interface StateStatistics {\r\n  connectionId: string;\r\n  totalUptime: number;\r\n  totalDowntime: number;\r\n  connectionAttempts: number;\r\n  successfulConnections: number;\r\n  failedConnections: number;\r\n  averageConnectionTime: number;\r\n  longestConnection: number;\r\n  shortestConnection: number;\r\n  stateDistribution: Record<TunnelState, number>;\r\n  reliability: number; // Percentage (0-100)\r\n}\r\n\r\n/**\r\n * Tunnel State Tracker\r\n * Tracks and manages SSH tunnel connection states with comprehensive history and analytics\r\n */\r\nexport class TunnelStateTracker extends EventEmitter {\r\n  private logger: Logger;\r\n  private stateHistory: Map<string, StateHistoryEntry[]>;\r\n  private currentStates: Map<string, TunnelState>;\r\n  private stateTimestamps: Map<string, Date>;\r\n  private statistics: Map<string, StateStatistics>;\r\n\r\n  constructor(logger: Logger) {\r\n    super();\r\n    this.logger = logger;\r\n    this.stateHistory = new Map();\r\n    this.currentStates = new Map();\r\n    this.stateTimestamps = new Map();\r\n    this.statistics = new Map();\r\n\r\n    this.logger.info('Tunnel State Tracker initialized');\r\n  }\r\n\r\n  /**\r\n   * Track connection state change\r\n   * Records state transitions and updates statistics\r\n   * \r\n   * @param connection - Tunnel connection\r\n   * @param previousState - Previous connection state\r\n   * @param currentState - Current connection state\r\n   * @param metadata - Additional metadata for the state change\r\n   */\r\n  trackStateChange(\r\n    connection: TunnelConnection,\r\n    previousState: TunnelState,\r\n    currentState: TunnelState,\r\n    metadata?: Record<string, any>\r\n  ): void {\r\n    const connectionId = connection.id;\r\n    const now = new Date();\r\n    \r\n    // Calculate duration in previous state\r\n    const previousTimestamp = this.stateTimestamps.get(connectionId) || now;\r\n    const duration = now.getTime() - previousTimestamp.getTime();\r\n\r\n    // Create state change event\r\n    const stateChangeEvent: StateChangeEvent = {\r\n      connectionId,\r\n      previousState,\r\n      currentState,\r\n      timestamp: now,\r\n      duration,\r\n      metadata\r\n    };\r\n\r\n    // Update current state tracking\r\n    this.currentStates.set(connectionId, currentState);\r\n    this.stateTimestamps.set(connectionId, now);\r\n\r\n    // Add to history\r\n    this.addToHistory(connectionId, previousState, previousTimestamp, duration, metadata);\r\n\r\n    // Update statistics\r\n    this.updateStatistics(connectionId, previousState, currentState, duration);\r\n\r\n    // Log state change\r\n    this.logger.info(`Tunnel state changed: ${connectionId}`, {\r\n      from: previousState,\r\n      to: currentState,\r\n      duration: `${duration}ms`,\r\n      metadata\r\n    });\r\n\r\n    // Emit state change event\r\n    this.emit('stateChanged', stateChangeEvent);\r\n\r\n    // Emit specific state events\r\n    this.emitStateSpecificEvents(connection, currentState, stateChangeEvent);\r\n  }\r\n\r\n  /**\r\n   * Get current state of a connection\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @returns Current tunnel state or undefined\r\n   */\r\n  getCurrentState(connectionId: string): TunnelState | undefined {\r\n    return this.currentStates.get(connectionId);\r\n  }\r\n\r\n  /**\r\n   * Get state history for a connection\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @param limit - Maximum number of history entries to return\r\n   * @returns Array of state history entries\r\n   */\r\n  getStateHistory(connectionId: string, limit?: number): StateHistoryEntry[] {\r\n    const history = this.stateHistory.get(connectionId) || [];\r\n    return limit ? history.slice(-limit) : [...history];\r\n  }\r\n\r\n  /**\r\n   * Get connection statistics\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @returns Connection statistics or undefined\r\n   */\r\n  getStatistics(connectionId: string): StateStatistics | undefined {\r\n    return this.statistics.get(connectionId);\r\n  }\r\n\r\n  /**\r\n   * Get all connection statistics\r\n   * \r\n   * @returns Map of all connection statistics\r\n   */\r\n  getAllStatistics(): Map<string, StateStatistics> {\r\n    return new Map(this.statistics);\r\n  }\r\n\r\n  /**\r\n   * Get connections by current state\r\n   * \r\n   * @param state - Tunnel state to filter by\r\n   * @returns Array of connection IDs in the specified state\r\n   */\r\n  getConnectionsByState(state: TunnelState): string[] {\r\n    const connections: string[] = [];\r\n    \r\n    for (const [connectionId, currentState] of this.currentStates.entries()) {\r\n      if (currentState === state) {\r\n        connections.push(connectionId);\r\n      }\r\n    }\r\n    \r\n    return connections;\r\n  }\r\n\r\n  /**\r\n   * Get overall system health metrics\r\n   * \r\n   * @returns System health metrics\r\n   */\r\n  getSystemHealthMetrics(): {\r\n    totalConnections: number;\r\n    activeConnections: number;\r\n    failedConnections: number;\r\n    averageReliability: number;\r\n    systemUptime: number;\r\n  } {\r\n    const allStats = Array.from(this.statistics.values());\r\n    \r\n    const totalConnections = allStats.length;\r\n    const activeConnections = this.getConnectionsByState(TunnelState.CONNECTED).length;\r\n    const failedConnections = this.getConnectionsByState(TunnelState.FAILED).length;\r\n    \r\n    const averageReliability = totalConnections > 0 \r\n      ? allStats.reduce((sum, stats) => sum + stats.reliability, 0) / totalConnections\r\n      : 0;\r\n    \r\n    const systemUptime = totalConnections > 0\r\n      ? allStats.reduce((sum, stats) => sum + stats.totalUptime, 0) / totalConnections\r\n      : 0;\r\n\r\n    return {\r\n      totalConnections,\r\n      activeConnections,\r\n      failedConnections,\r\n      averageReliability,\r\n      systemUptime\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Clear history for a connection\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   */\r\n  clearHistory(connectionId: string): void {\r\n    this.stateHistory.delete(connectionId);\r\n    this.currentStates.delete(connectionId);\r\n    this.stateTimestamps.delete(connectionId);\r\n    this.statistics.delete(connectionId);\r\n    \r\n    this.logger.info(`Cleared state history for connection: ${connectionId}`);\r\n  }\r\n\r\n  /**\r\n   * Clear all history\r\n   */\r\n  clearAllHistory(): void {\r\n    this.stateHistory.clear();\r\n    this.currentStates.clear();\r\n    this.stateTimestamps.clear();\r\n    this.statistics.clear();\r\n    \r\n    this.logger.info('Cleared all state history');\r\n  }\r\n\r\n  /**\r\n   * Add entry to state history\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @param state - Tunnel state\r\n   * @param timestamp - State timestamp\r\n   * @param duration - Duration in state\r\n   * @param metadata - Additional metadata\r\n   */\r\n  private addToHistory(\r\n    connectionId: string,\r\n    state: TunnelState,\r\n    timestamp: Date,\r\n    duration: number,\r\n    metadata?: Record<string, any>\r\n  ): void {\r\n    if (!this.stateHistory.has(connectionId)) {\r\n      this.stateHistory.set(connectionId, []);\r\n    }\r\n\r\n    const history = this.stateHistory.get(connectionId)!;\r\n    history.push({\r\n      state,\r\n      timestamp,\r\n      duration,\r\n      metadata\r\n    });\r\n\r\n    // Limit history size to prevent memory issues\r\n    const maxHistorySize = 1000;\r\n    if (history.length > maxHistorySize) {\r\n      history.splice(0, history.length - maxHistorySize);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update connection statistics\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @param previousState - Previous state\r\n   * @param currentState - Current state\r\n   * @param duration - Duration in previous state\r\n   */\r\n  private updateStatistics(\r\n    connectionId: string,\r\n    previousState: TunnelState,\r\n    currentState: TunnelState,\r\n    duration: number\r\n  ): void {\r\n    if (!this.statistics.has(connectionId)) {\r\n      this.statistics.set(connectionId, {\r\n        connectionId,\r\n        totalUptime: 0,\r\n        totalDowntime: 0,\r\n        connectionAttempts: 0,\r\n        successfulConnections: 0,\r\n        failedConnections: 0,\r\n        averageConnectionTime: 0,\r\n        longestConnection: 0,\r\n        shortestConnection: Infinity,\r\n        stateDistribution: {\r\n          [TunnelState.DISCONNECTED]: 0,\r\n          [TunnelState.CONNECTING]: 0,\r\n          [TunnelState.CONNECTED]: 0,\r\n          [TunnelState.RECONNECTING]: 0,\r\n          [TunnelState.FAILED]: 0,\r\n          [TunnelState.TERMINATED]: 0\r\n        },\r\n        reliability: 0\r\n      });\r\n    }\r\n\r\n    const stats = this.statistics.get(connectionId)!;\r\n\r\n    // Update state distribution\r\n    stats.stateDistribution[previousState] += duration;\r\n\r\n    // Update uptime/downtime\r\n    if (previousState === TunnelState.CONNECTED) {\r\n      stats.totalUptime += duration;\r\n      \r\n      // Update connection duration statistics\r\n      if (duration > stats.longestConnection) {\r\n        stats.longestConnection = duration;\r\n      }\r\n      if (duration < stats.shortestConnection) {\r\n        stats.shortestConnection = duration;\r\n      }\r\n    } else {\r\n      stats.totalDowntime += duration;\r\n    }\r\n\r\n    // Track connection attempts and outcomes\r\n    if (currentState === TunnelState.CONNECTING) {\r\n      stats.connectionAttempts++;\r\n    } else if (currentState === TunnelState.CONNECTED && previousState === TunnelState.CONNECTING) {\r\n      stats.successfulConnections++;\r\n    } else if (currentState === TunnelState.FAILED) {\r\n      stats.failedConnections++;\r\n    }\r\n\r\n    // Calculate average connection time\r\n    if (stats.successfulConnections > 0) {\r\n      stats.averageConnectionTime = stats.totalUptime / stats.successfulConnections;\r\n    }\r\n\r\n    // Calculate reliability percentage\r\n    const totalTime = stats.totalUptime + stats.totalDowntime;\r\n    if (totalTime > 0) {\r\n      stats.reliability = (stats.totalUptime / totalTime) * 100;\r\n    }\r\n\r\n    // Handle edge case for shortest connection\r\n    if (stats.shortestConnection === Infinity) {\r\n      stats.shortestConnection = 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Emit state-specific events\r\n   * \r\n   * @param connection - Tunnel connection\r\n   * @param currentState - Current state\r\n   * @param stateChangeEvent - State change event\r\n   */\r\n  private emitStateSpecificEvents(\r\n    connection: TunnelConnection,\r\n    currentState: TunnelState,\r\n    stateChangeEvent: StateChangeEvent\r\n  ): void {\r\n    switch (currentState) {\r\n      case TunnelState.CONNECTED:\r\n        this.emit('connectionEstablished', connection, stateChangeEvent);\r\n        break;\r\n      \r\n      case TunnelState.DISCONNECTED:\r\n        this.emit('connectionLost', connection, stateChangeEvent);\r\n        break;\r\n      \r\n      case TunnelState.FAILED:\r\n        this.emit('connectionFailed', connection, stateChangeEvent);\r\n        break;\r\n      \r\n      case TunnelState.RECONNECTING:\r\n        this.emit('reconnectionStarted', connection, stateChangeEvent);\r\n        break;\r\n      \r\n      case TunnelState.TERMINATED:\r\n        this.emit('connectionTerminated', connection, stateChangeEvent);\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate state report for a connection\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @returns Detailed state report\r\n   */\r\n  generateStateReport(connectionId: string): {\r\n    connectionId: string;\r\n    currentState: TunnelState | undefined;\r\n    statistics: StateStatistics | undefined;\r\n    recentHistory: StateHistoryEntry[];\r\n    healthScore: number;\r\n  } {\r\n    const currentState = this.getCurrentState(connectionId);\r\n    const statistics = this.getStatistics(connectionId);\r\n    const recentHistory = this.getStateHistory(connectionId, 10);\r\n    \r\n    // Calculate health score based on reliability and recent activity\r\n    let healthScore = 0;\r\n    if (statistics) {\r\n      healthScore = statistics.reliability;\r\n      \r\n      // Adjust based on recent failures\r\n      const recentFailures = recentHistory.filter(\r\n        entry => entry.state === TunnelState.FAILED\r\n      ).length;\r\n      \r\n      if (recentFailures > 0) {\r\n        healthScore = Math.max(0, healthScore - (recentFailures * 10));\r\n      }\r\n      \r\n      // Boost score if currently connected\r\n      if (currentState === TunnelState.CONNECTED) {\r\n        healthScore = Math.min(100, healthScore + 10);\r\n      }\r\n    }\r\n\r\n    return {\r\n      connectionId,\r\n      currentState,\r\n      statistics,\r\n      recentHistory,\r\n      healthScore\r\n    };\r\n  }\r\n}\r\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "0c56762e860afa9b248282584409444595e2e7b8"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2mv9rljmpk = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2mv9rljmpk();
cov_2mv9rljmpk().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2mv9rljmpk().s[1]++;
exports.TunnelStateTracker = void 0;
const events_1 =
/* istanbul ignore next */
(cov_2mv9rljmpk().s[2]++, require("events"));
const ssh_tunnel_manager_1 =
/* istanbul ignore next */
(cov_2mv9rljmpk().s[3]++, require("./ssh-tunnel-manager"));
/**
 * Tunnel State Tracker
 * Tracks and manages SSH tunnel connection states with comprehensive history and analytics
 */
class TunnelStateTracker extends
/* istanbul ignore next */
(events_1.EventEmitter) {
  logger;
  stateHistory;
  currentStates;
  stateTimestamps;
  statistics;
  constructor(logger) {
    /* istanbul ignore next */
    cov_2mv9rljmpk().f[0]++;
    cov_2mv9rljmpk().s[4]++;
    super();
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[5]++;
    this.logger = logger;
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[6]++;
    this.stateHistory = new Map();
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[7]++;
    this.currentStates = new Map();
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[8]++;
    this.stateTimestamps = new Map();
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[9]++;
    this.statistics = new Map();
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[10]++;
    this.logger.info('Tunnel State Tracker initialized');
  }
  /**
   * Track connection state change
   * Records state transitions and updates statistics
   *
   * @param connection - Tunnel connection
   * @param previousState - Previous connection state
   * @param currentState - Current connection state
   * @param metadata - Additional metadata for the state change
   */
  trackStateChange(connection, previousState, currentState, metadata) {
    /* istanbul ignore next */
    cov_2mv9rljmpk().f[1]++;
    const connectionId =
    /* istanbul ignore next */
    (cov_2mv9rljmpk().s[11]++, connection.id);
    const now =
    /* istanbul ignore next */
    (cov_2mv9rljmpk().s[12]++, new Date());
    // Calculate duration in previous state
    const previousTimestamp =
    /* istanbul ignore next */
    (cov_2mv9rljmpk().s[13]++,
    /* istanbul ignore next */
    (cov_2mv9rljmpk().b[0][0]++, this.stateTimestamps.get(connectionId)) ||
    /* istanbul ignore next */
    (cov_2mv9rljmpk().b[0][1]++, now));
    const duration =
    /* istanbul ignore next */
    (cov_2mv9rljmpk().s[14]++, now.getTime() - previousTimestamp.getTime());
    // Create state change event
    const stateChangeEvent =
    /* istanbul ignore next */
    (cov_2mv9rljmpk().s[15]++, {
      connectionId,
      previousState,
      currentState,
      timestamp: now,
      duration,
      metadata
    });
    // Update current state tracking
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[16]++;
    this.currentStates.set(connectionId, currentState);
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[17]++;
    this.stateTimestamps.set(connectionId, now);
    // Add to history
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[18]++;
    this.addToHistory(connectionId, previousState, previousTimestamp, duration, metadata);
    // Update statistics
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[19]++;
    this.updateStatistics(connectionId, previousState, currentState, duration);
    // Log state change
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[20]++;
    this.logger.info(`Tunnel state changed: ${connectionId}`, {
      from: previousState,
      to: currentState,
      duration: `${duration}ms`,
      metadata
    });
    // Emit state change event
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[21]++;
    this.emit('stateChanged', stateChangeEvent);
    // Emit specific state events
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[22]++;
    this.emitStateSpecificEvents(connection, currentState, stateChangeEvent);
  }
  /**
   * Get current state of a connection
   *
   * @param connectionId - Connection identifier
   * @returns Current tunnel state or undefined
   */
  getCurrentState(connectionId) {
    /* istanbul ignore next */
    cov_2mv9rljmpk().f[2]++;
    cov_2mv9rljmpk().s[23]++;
    return this.currentStates.get(connectionId);
  }
  /**
   * Get state history for a connection
   *
   * @param connectionId - Connection identifier
   * @param limit - Maximum number of history entries to return
   * @returns Array of state history entries
   */
  getStateHistory(connectionId, limit) {
    /* istanbul ignore next */
    cov_2mv9rljmpk().f[3]++;
    const history =
    /* istanbul ignore next */
    (cov_2mv9rljmpk().s[24]++,
    /* istanbul ignore next */
    (cov_2mv9rljmpk().b[1][0]++, this.stateHistory.get(connectionId)) ||
    /* istanbul ignore next */
    (cov_2mv9rljmpk().b[1][1]++, []));
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[25]++;
    return limit ?
    /* istanbul ignore next */
    (cov_2mv9rljmpk().b[2][0]++, history.slice(-limit)) :
    /* istanbul ignore next */
    (cov_2mv9rljmpk().b[2][1]++, [...history]);
  }
  /**
   * Get connection statistics
   *
   * @param connectionId - Connection identifier
   * @returns Connection statistics or undefined
   */
  getStatistics(connectionId) {
    /* istanbul ignore next */
    cov_2mv9rljmpk().f[4]++;
    cov_2mv9rljmpk().s[26]++;
    return this.statistics.get(connectionId);
  }
  /**
   * Get all connection statistics
   *
   * @returns Map of all connection statistics
   */
  getAllStatistics() {
    /* istanbul ignore next */
    cov_2mv9rljmpk().f[5]++;
    cov_2mv9rljmpk().s[27]++;
    return new Map(this.statistics);
  }
  /**
   * Get connections by current state
   *
   * @param state - Tunnel state to filter by
   * @returns Array of connection IDs in the specified state
   */
  getConnectionsByState(state) {
    /* istanbul ignore next */
    cov_2mv9rljmpk().f[6]++;
    const connections =
    /* istanbul ignore next */
    (cov_2mv9rljmpk().s[28]++, []);
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[29]++;
    for (const [connectionId, currentState] of this.currentStates.entries()) {
      /* istanbul ignore next */
      cov_2mv9rljmpk().s[30]++;
      if (currentState === state) {
        /* istanbul ignore next */
        cov_2mv9rljmpk().b[3][0]++;
        cov_2mv9rljmpk().s[31]++;
        connections.push(connectionId);
      } else
      /* istanbul ignore next */
      {
        cov_2mv9rljmpk().b[3][1]++;
      }
    }
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[32]++;
    return connections;
  }
  /**
   * Get overall system health metrics
   *
   * @returns System health metrics
   */
  getSystemHealthMetrics() {
    /* istanbul ignore next */
    cov_2mv9rljmpk().f[7]++;
    const allStats =
    /* istanbul ignore next */
    (cov_2mv9rljmpk().s[33]++, Array.from(this.statistics.values()));
    const totalConnections =
    /* istanbul ignore next */
    (cov_2mv9rljmpk().s[34]++, allStats.length);
    const activeConnections =
    /* istanbul ignore next */
    (cov_2mv9rljmpk().s[35]++, this.getConnectionsByState(ssh_tunnel_manager_1.TunnelState.CONNECTED).length);
    const failedConnections =
    /* istanbul ignore next */
    (cov_2mv9rljmpk().s[36]++, this.getConnectionsByState(ssh_tunnel_manager_1.TunnelState.FAILED).length);
    const averageReliability =
    /* istanbul ignore next */
    (cov_2mv9rljmpk().s[37]++, totalConnections > 0 ?
    /* istanbul ignore next */
    (cov_2mv9rljmpk().b[4][0]++, allStats.reduce((sum, stats) => {
      /* istanbul ignore next */
      cov_2mv9rljmpk().f[8]++;
      cov_2mv9rljmpk().s[38]++;
      return sum + stats.reliability;
    }, 0) / totalConnections) :
    /* istanbul ignore next */
    (cov_2mv9rljmpk().b[4][1]++, 0));
    const systemUptime =
    /* istanbul ignore next */
    (cov_2mv9rljmpk().s[39]++, totalConnections > 0 ?
    /* istanbul ignore next */
    (cov_2mv9rljmpk().b[5][0]++, allStats.reduce((sum, stats) => {
      /* istanbul ignore next */
      cov_2mv9rljmpk().f[9]++;
      cov_2mv9rljmpk().s[40]++;
      return sum + stats.totalUptime;
    }, 0) / totalConnections) :
    /* istanbul ignore next */
    (cov_2mv9rljmpk().b[5][1]++, 0));
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[41]++;
    return {
      totalConnections,
      activeConnections,
      failedConnections,
      averageReliability,
      systemUptime
    };
  }
  /**
   * Clear history for a connection
   *
   * @param connectionId - Connection identifier
   */
  clearHistory(connectionId) {
    /* istanbul ignore next */
    cov_2mv9rljmpk().f[10]++;
    cov_2mv9rljmpk().s[42]++;
    this.stateHistory.delete(connectionId);
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[43]++;
    this.currentStates.delete(connectionId);
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[44]++;
    this.stateTimestamps.delete(connectionId);
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[45]++;
    this.statistics.delete(connectionId);
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[46]++;
    this.logger.info(`Cleared state history for connection: ${connectionId}`);
  }
  /**
   * Clear all history
   */
  clearAllHistory() {
    /* istanbul ignore next */
    cov_2mv9rljmpk().f[11]++;
    cov_2mv9rljmpk().s[47]++;
    this.stateHistory.clear();
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[48]++;
    this.currentStates.clear();
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[49]++;
    this.stateTimestamps.clear();
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[50]++;
    this.statistics.clear();
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[51]++;
    this.logger.info('Cleared all state history');
  }
  /**
   * Add entry to state history
   *
   * @param connectionId - Connection identifier
   * @param state - Tunnel state
   * @param timestamp - State timestamp
   * @param duration - Duration in state
   * @param metadata - Additional metadata
   */
  addToHistory(connectionId, state, timestamp, duration, metadata) {
    /* istanbul ignore next */
    cov_2mv9rljmpk().f[12]++;
    cov_2mv9rljmpk().s[52]++;
    if (!this.stateHistory.has(connectionId)) {
      /* istanbul ignore next */
      cov_2mv9rljmpk().b[6][0]++;
      cov_2mv9rljmpk().s[53]++;
      this.stateHistory.set(connectionId, []);
    } else
    /* istanbul ignore next */
    {
      cov_2mv9rljmpk().b[6][1]++;
    }
    const history =
    /* istanbul ignore next */
    (cov_2mv9rljmpk().s[54]++, this.stateHistory.get(connectionId));
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[55]++;
    history.push({
      state,
      timestamp,
      duration,
      metadata
    });
    // Limit history size to prevent memory issues
    const maxHistorySize =
    /* istanbul ignore next */
    (cov_2mv9rljmpk().s[56]++, 1000);
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[57]++;
    if (history.length > maxHistorySize) {
      /* istanbul ignore next */
      cov_2mv9rljmpk().b[7][0]++;
      cov_2mv9rljmpk().s[58]++;
      history.splice(0, history.length - maxHistorySize);
    } else
    /* istanbul ignore next */
    {
      cov_2mv9rljmpk().b[7][1]++;
    }
  }
  /**
   * Update connection statistics
   *
   * @param connectionId - Connection identifier
   * @param previousState - Previous state
   * @param currentState - Current state
   * @param duration - Duration in previous state
   */
  updateStatistics(connectionId, previousState, currentState, duration) {
    /* istanbul ignore next */
    cov_2mv9rljmpk().f[13]++;
    cov_2mv9rljmpk().s[59]++;
    if (!this.statistics.has(connectionId)) {
      /* istanbul ignore next */
      cov_2mv9rljmpk().b[8][0]++;
      cov_2mv9rljmpk().s[60]++;
      this.statistics.set(connectionId, {
        connectionId,
        totalUptime: 0,
        totalDowntime: 0,
        connectionAttempts: 0,
        successfulConnections: 0,
        failedConnections: 0,
        averageConnectionTime: 0,
        longestConnection: 0,
        shortestConnection: Infinity,
        stateDistribution: {
          [ssh_tunnel_manager_1.TunnelState.DISCONNECTED]: 0,
          [ssh_tunnel_manager_1.TunnelState.CONNECTING]: 0,
          [ssh_tunnel_manager_1.TunnelState.CONNECTED]: 0,
          [ssh_tunnel_manager_1.TunnelState.RECONNECTING]: 0,
          [ssh_tunnel_manager_1.TunnelState.FAILED]: 0,
          [ssh_tunnel_manager_1.TunnelState.TERMINATED]: 0
        },
        reliability: 0
      });
    } else
    /* istanbul ignore next */
    {
      cov_2mv9rljmpk().b[8][1]++;
    }
    const stats =
    /* istanbul ignore next */
    (cov_2mv9rljmpk().s[61]++, this.statistics.get(connectionId));
    // Update state distribution
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[62]++;
    stats.stateDistribution[previousState] += duration;
    // Update uptime/downtime
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[63]++;
    if (previousState === ssh_tunnel_manager_1.TunnelState.CONNECTED) {
      /* istanbul ignore next */
      cov_2mv9rljmpk().b[9][0]++;
      cov_2mv9rljmpk().s[64]++;
      stats.totalUptime += duration;
      // Update connection duration statistics
      /* istanbul ignore next */
      cov_2mv9rljmpk().s[65]++;
      if (duration > stats.longestConnection) {
        /* istanbul ignore next */
        cov_2mv9rljmpk().b[10][0]++;
        cov_2mv9rljmpk().s[66]++;
        stats.longestConnection = duration;
      } else
      /* istanbul ignore next */
      {
        cov_2mv9rljmpk().b[10][1]++;
      }
      cov_2mv9rljmpk().s[67]++;
      if (duration < stats.shortestConnection) {
        /* istanbul ignore next */
        cov_2mv9rljmpk().b[11][0]++;
        cov_2mv9rljmpk().s[68]++;
        stats.shortestConnection = duration;
      } else
      /* istanbul ignore next */
      {
        cov_2mv9rljmpk().b[11][1]++;
      }
    } else {
      /* istanbul ignore next */
      cov_2mv9rljmpk().b[9][1]++;
      cov_2mv9rljmpk().s[69]++;
      stats.totalDowntime += duration;
    }
    // Track connection attempts and outcomes
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[70]++;
    if (currentState === ssh_tunnel_manager_1.TunnelState.CONNECTING) {
      /* istanbul ignore next */
      cov_2mv9rljmpk().b[12][0]++;
      cov_2mv9rljmpk().s[71]++;
      stats.connectionAttempts++;
    } else {
      /* istanbul ignore next */
      cov_2mv9rljmpk().b[12][1]++;
      cov_2mv9rljmpk().s[72]++;
      if (
      /* istanbul ignore next */
      (cov_2mv9rljmpk().b[14][0]++, currentState === ssh_tunnel_manager_1.TunnelState.CONNECTED) &&
      /* istanbul ignore next */
      (cov_2mv9rljmpk().b[14][1]++, previousState === ssh_tunnel_manager_1.TunnelState.CONNECTING)) {
        /* istanbul ignore next */
        cov_2mv9rljmpk().b[13][0]++;
        cov_2mv9rljmpk().s[73]++;
        stats.successfulConnections++;
      } else {
        /* istanbul ignore next */
        cov_2mv9rljmpk().b[13][1]++;
        cov_2mv9rljmpk().s[74]++;
        if (currentState === ssh_tunnel_manager_1.TunnelState.FAILED) {
          /* istanbul ignore next */
          cov_2mv9rljmpk().b[15][0]++;
          cov_2mv9rljmpk().s[75]++;
          stats.failedConnections++;
        } else
        /* istanbul ignore next */
        {
          cov_2mv9rljmpk().b[15][1]++;
        }
      }
    }
    // Calculate average connection time
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[76]++;
    if (stats.successfulConnections > 0) {
      /* istanbul ignore next */
      cov_2mv9rljmpk().b[16][0]++;
      cov_2mv9rljmpk().s[77]++;
      stats.averageConnectionTime = stats.totalUptime / stats.successfulConnections;
    } else
    /* istanbul ignore next */
    {
      cov_2mv9rljmpk().b[16][1]++;
    }
    // Calculate reliability percentage
    const totalTime =
    /* istanbul ignore next */
    (cov_2mv9rljmpk().s[78]++, stats.totalUptime + stats.totalDowntime);
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[79]++;
    if (totalTime > 0) {
      /* istanbul ignore next */
      cov_2mv9rljmpk().b[17][0]++;
      cov_2mv9rljmpk().s[80]++;
      stats.reliability = stats.totalUptime / totalTime * 100;
    } else
    /* istanbul ignore next */
    {
      cov_2mv9rljmpk().b[17][1]++;
    }
    // Handle edge case for shortest connection
    cov_2mv9rljmpk().s[81]++;
    if (stats.shortestConnection === Infinity) {
      /* istanbul ignore next */
      cov_2mv9rljmpk().b[18][0]++;
      cov_2mv9rljmpk().s[82]++;
      stats.shortestConnection = 0;
    } else
    /* istanbul ignore next */
    {
      cov_2mv9rljmpk().b[18][1]++;
    }
  }
  /**
   * Emit state-specific events
   *
   * @param connection - Tunnel connection
   * @param currentState - Current state
   * @param stateChangeEvent - State change event
   */
  emitStateSpecificEvents(connection, currentState, stateChangeEvent) {
    /* istanbul ignore next */
    cov_2mv9rljmpk().f[14]++;
    cov_2mv9rljmpk().s[83]++;
    switch (currentState) {
      case ssh_tunnel_manager_1.TunnelState.CONNECTED:
        /* istanbul ignore next */
        cov_2mv9rljmpk().b[19][0]++;
        cov_2mv9rljmpk().s[84]++;
        this.emit('connectionEstablished', connection, stateChangeEvent);
        /* istanbul ignore next */
        cov_2mv9rljmpk().s[85]++;
        break;
      case ssh_tunnel_manager_1.TunnelState.DISCONNECTED:
        /* istanbul ignore next */
        cov_2mv9rljmpk().b[19][1]++;
        cov_2mv9rljmpk().s[86]++;
        this.emit('connectionLost', connection, stateChangeEvent);
        /* istanbul ignore next */
        cov_2mv9rljmpk().s[87]++;
        break;
      case ssh_tunnel_manager_1.TunnelState.FAILED:
        /* istanbul ignore next */
        cov_2mv9rljmpk().b[19][2]++;
        cov_2mv9rljmpk().s[88]++;
        this.emit('connectionFailed', connection, stateChangeEvent);
        /* istanbul ignore next */
        cov_2mv9rljmpk().s[89]++;
        break;
      case ssh_tunnel_manager_1.TunnelState.RECONNECTING:
        /* istanbul ignore next */
        cov_2mv9rljmpk().b[19][3]++;
        cov_2mv9rljmpk().s[90]++;
        this.emit('reconnectionStarted', connection, stateChangeEvent);
        /* istanbul ignore next */
        cov_2mv9rljmpk().s[91]++;
        break;
      case ssh_tunnel_manager_1.TunnelState.TERMINATED:
        /* istanbul ignore next */
        cov_2mv9rljmpk().b[19][4]++;
        cov_2mv9rljmpk().s[92]++;
        this.emit('connectionTerminated', connection, stateChangeEvent);
        /* istanbul ignore next */
        cov_2mv9rljmpk().s[93]++;
        break;
    }
  }
  /**
   * Generate state report for a connection
   *
   * @param connectionId - Connection identifier
   * @returns Detailed state report
   */
  generateStateReport(connectionId) {
    /* istanbul ignore next */
    cov_2mv9rljmpk().f[15]++;
    const currentState =
    /* istanbul ignore next */
    (cov_2mv9rljmpk().s[94]++, this.getCurrentState(connectionId));
    const statistics =
    /* istanbul ignore next */
    (cov_2mv9rljmpk().s[95]++, this.getStatistics(connectionId));
    const recentHistory =
    /* istanbul ignore next */
    (cov_2mv9rljmpk().s[96]++, this.getStateHistory(connectionId, 10));
    // Calculate health score based on reliability and recent activity
    let healthScore =
    /* istanbul ignore next */
    (cov_2mv9rljmpk().s[97]++, 0);
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[98]++;
    if (statistics) {
      /* istanbul ignore next */
      cov_2mv9rljmpk().b[20][0]++;
      cov_2mv9rljmpk().s[99]++;
      healthScore = statistics.reliability;
      // Adjust based on recent failures
      const recentFailures =
      /* istanbul ignore next */
      (cov_2mv9rljmpk().s[100]++, recentHistory.filter(entry => {
        /* istanbul ignore next */
        cov_2mv9rljmpk().f[16]++;
        cov_2mv9rljmpk().s[101]++;
        return entry.state === ssh_tunnel_manager_1.TunnelState.FAILED;
      }).length);
      /* istanbul ignore next */
      cov_2mv9rljmpk().s[102]++;
      if (recentFailures > 0) {
        /* istanbul ignore next */
        cov_2mv9rljmpk().b[21][0]++;
        cov_2mv9rljmpk().s[103]++;
        healthScore = Math.max(0, healthScore - recentFailures * 10);
      } else
      /* istanbul ignore next */
      {
        cov_2mv9rljmpk().b[21][1]++;
      }
      // Boost score if currently connected
      cov_2mv9rljmpk().s[104]++;
      if (currentState === ssh_tunnel_manager_1.TunnelState.CONNECTED) {
        /* istanbul ignore next */
        cov_2mv9rljmpk().b[22][0]++;
        cov_2mv9rljmpk().s[105]++;
        healthScore = Math.min(100, healthScore + 10);
      } else
      /* istanbul ignore next */
      {
        cov_2mv9rljmpk().b[22][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_2mv9rljmpk().b[20][1]++;
    }
    cov_2mv9rljmpk().s[106]++;
    return {
      connectionId,
      currentState,
      statistics,
      recentHistory,
      healthScore
    };
  }
}
/* istanbul ignore next */
cov_2mv9rljmpk().s[107]++;
exports.TunnelStateTracker = TunnelStateTracker;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,