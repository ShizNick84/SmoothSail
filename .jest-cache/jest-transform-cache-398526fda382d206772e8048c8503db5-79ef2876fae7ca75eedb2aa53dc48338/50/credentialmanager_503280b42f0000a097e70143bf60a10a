de5c47d39084bc274e59addd5e3b9135
"use strict";

/**
 * =============================================================================
 * AI CRYPTO TRADING AGENT - SECURE CREDENTIAL MANAGEMENT SERVICE
 * =============================================================================
 *
 * This service manages all sensitive credentials for the AI crypto trading
 * agent, including API keys, secrets, and authentication tokens. It provides
 * secure storage, retrieval, and rotation of credentials with audit logging.
 *
 * CRITICAL SECURITY NOTICE:
 * This service protects credentials that control access to trading capital.
 * Any compromise could result in total loss of funds. All operations are
 * logged and monitored for security analysis.
 *
 * @author AI Crypto Trading System
 * @version 1.0.0
 * @license PROPRIETARY
 * =============================================================================
 */
/* istanbul ignore next */
function cov_gl0onn3sl() {
  var path = "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\credential-manager.ts";
  var hash = "3c9ebb7891330fb8c550681cf20785673177dda6";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\credential-manager.ts",
    statementMap: {
      "0": {
        start: {
          line: 21,
          column: 0
        },
        end: {
          line: 21,
          column: 62
        }
      },
      "1": {
        start: {
          line: 22,
          column: 0
        },
        end: {
          line: 22,
          column: 88
        }
      },
      "2": {
        start: {
          line: 23,
          column: 29
        },
        end: {
          line: 23,
          column: 69
        }
      },
      "3": {
        start: {
          line: 24,
          column: 22
        },
        end: {
          line: 24,
          column: 55
        }
      },
      "4": {
        start: {
          line: 25,
          column: 17
        },
        end: {
          line: 25,
          column: 49
        }
      },
      "5": {
        start: {
          line: 30,
          column: 0
        },
        end: {
          line: 39,
          column: 69
        }
      },
      "6": {
        start: {
          line: 31,
          column: 4
        },
        end: {
          line: 31,
          column: 42
        }
      },
      "7": {
        start: {
          line: 32,
          column: 4
        },
        end: {
          line: 32,
          column: 48
        }
      },
      "8": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 33,
          column: 56
        }
      },
      "9": {
        start: {
          line: 34,
          column: 4
        },
        end: {
          line: 34,
          column: 48
        }
      },
      "10": {
        start: {
          line: 35,
          column: 4
        },
        end: {
          line: 35,
          column: 56
        }
      },
      "11": {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 36,
          column: 62
        }
      },
      "12": {
        start: {
          line: 37,
          column: 4
        },
        end: {
          line: 37,
          column: 56
        }
      },
      "13": {
        start: {
          line: 38,
          column: 4
        },
        end: {
          line: 38,
          column: 56
        }
      },
      "14": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 47,
          column: 41
        }
      },
      "15": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 39
        }
      },
      "16": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 51,
          column: 33
        }
      },
      "17": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 69,
          column: 9
        }
      },
      "18": {
        start: {
          line: 59,
          column: 33
        },
        end: {
          line: 59,
          column: 110
        }
      },
      "19": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 64,
          column: 13
        }
      },
      "20": {
        start: {
          line: 62,
          column: 16
        },
        end: {
          line: 62,
          column: 131
        }
      },
      "21": {
        start: {
          line: 63,
          column: 16
        },
        end: {
          line: 63,
          column: 83
        }
      },
      "22": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 83
        }
      },
      "23": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 72
        }
      },
      "24": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 127,
          column: 9
        }
      },
      "25": {
        start: {
          line: 83,
          column: 33
        },
        end: {
          line: 83,
          column: 73
        }
      },
      "26": {
        start: {
          line: 85,
          column: 35
        },
        end: {
          line: 85,
          column: 112
        }
      },
      "27": {
        start: {
          line: 86,
          column: 30
        },
        end: {
          line: 86,
          column: 77
        }
      },
      "28": {
        start: {
          line: 86,
          column: 55
        },
        end: {
          line: 86,
          column: 76
        }
      },
      "29": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 89,
          column: 13
        }
      },
      "30": {
        start: {
          line: 88,
          column: 16
        },
        end: {
          line: 88,
          column: 77
        }
      },
      "31": {
        start: {
          line: 91,
          column: 34
        },
        end: {
          line: 91,
          column: 103
        }
      },
      "32": {
        start: {
          line: 93,
          column: 36
        },
        end: {
          line: 101,
          column: 13
        }
      },
      "33": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 103,
          column: 58
        }
      },
      "34": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 110,
          column: 15
        }
      },
      "35": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 121,
          column: 15
        }
      },
      "36": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 122,
          column: 32
        }
      },
      "37": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 125,
          column: 74
        }
      },
      "38": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 126,
          column: 57
        }
      },
      "39": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 168,
          column: 9
        }
      },
      "40": {
        start: {
          line: 139,
          column: 27
        },
        end: {
          line: 139,
          column: 65
        }
      },
      "41": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 142,
          column: 13
        }
      },
      "42": {
        start: {
          line: 141,
          column: 16
        },
        end: {
          line: 141,
          column: 35
        }
      },
      "43": {
        start: {
          line: 144,
          column: 36
        },
        end: {
          line: 144,
          column: 75
        }
      },
      "44": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 147,
          column: 13
        }
      },
      "45": {
        start: {
          line: 146,
          column: 16
        },
        end: {
          line: 146,
          column: 68
        }
      },
      "46": {
        start: {
          line: 149,
          column: 12
        },
        end: {
          line: 151,
          column: 13
        }
      },
      "47": {
        start: {
          line: 150,
          column: 16
        },
        end: {
          line: 150,
          column: 58
        }
      },
      "48": {
        start: {
          line: 153,
          column: 34
        },
        end: {
          line: 153,
          column: 128
        }
      },
      "49": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 155,
          column: 41
        }
      },
      "50": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 156,
          column: 54
        }
      },
      "51": {
        start: {
          line: 157,
          column: 12
        },
        end: {
          line: 157,
          column: 57
        }
      },
      "52": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 162,
          column: 15
        }
      },
      "53": {
        start: {
          line: 163,
          column: 12
        },
        end: {
          line: 163,
          column: 33
        }
      },
      "54": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 166,
          column: 77
        }
      },
      "55": {
        start: {
          line: 167,
          column: 12
        },
        end: {
          line: 167,
          column: 59
        }
      },
      "56": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 199,
          column: 9
        }
      },
      "57": {
        start: {
          line: 179,
          column: 27
        },
        end: {
          line: 179,
          column: 54
        }
      },
      "58": {
        start: {
          line: 180,
          column: 30
        },
        end: {
          line: 180,
          column: 60
        }
      },
      "59": {
        start: {
          line: 181,
          column: 31
        },
        end: {
          line: 181,
          column: 65
        }
      },
      "60": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 184,
          column: 13
        }
      },
      "61": {
        start: {
          line: 183,
          column: 16
        },
        end: {
          line: 183,
          column: 74
        }
      },
      "62": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 189,
          column: 15
        }
      },
      "63": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 194,
          column: 14
        }
      },
      "64": {
        start: {
          line: 197,
          column: 12
        },
        end: {
          line: 197,
          column: 81
        }
      },
      "65": {
        start: {
          line: 198,
          column: 12
        },
        end: {
          line: 198,
          column: 67
        }
      },
      "66": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 234,
          column: 9
        }
      },
      "67": {
        start: {
          line: 211,
          column: 38
        },
        end: {
          line: 211,
          column: 77
        }
      },
      "68": {
        start: {
          line: 212,
          column: 12
        },
        end: {
          line: 214,
          column: 13
        }
      },
      "69": {
        start: {
          line: 213,
          column: 16
        },
        end: {
          line: 213,
          column: 56
        }
      },
      "70": {
        start: {
          line: 216,
          column: 12
        },
        end: {
          line: 216,
          column: 47
        }
      },
      "71": {
        start: {
          line: 217,
          column: 12
        },
        end: {
          line: 217,
          column: 59
        }
      },
      "72": {
        start: {
          line: 219,
          column: 12
        },
        end: {
          line: 219,
          column: 54
        }
      },
      "73": {
        start: {
          line: 221,
          column: 12
        },
        end: {
          line: 226,
          column: 15
        }
      },
      "74": {
        start: {
          line: 229,
          column: 12
        },
        end: {
          line: 229,
          column: 32
        }
      },
      "75": {
        start: {
          line: 232,
          column: 12
        },
        end: {
          line: 232,
          column: 75
        }
      },
      "76": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 233,
          column: 58
        }
      },
      "77": {
        start: {
          line: 245,
          column: 26
        },
        end: {
          line: 245,
          column: 49
        }
      },
      "78": {
        start: {
          line: 246,
          column: 23
        },
        end: {
          line: 246,
          column: 62
        }
      },
      "79": {
        start: {
          line: 247,
          column: 8
        },
        end: {
          line: 247,
          column: 59
        }
      },
      "80": {
        start: {
          line: 258,
          column: 8
        },
        end: {
          line: 260,
          column: 11
        }
      },
      "81": {
        start: {
          line: 272,
          column: 8
        },
        end: {
          line: 272,
          column: 20
        }
      },
      "82": {
        start: {
          line: 283,
          column: 8
        },
        end: {
          line: 285,
          column: 11
        }
      },
      "83": {
        start: {
          line: 292,
          column: 8
        },
        end: {
          line: 299,
          column: 18
        }
      },
      "84": {
        start: {
          line: 293,
          column: 24
        },
        end: {
          line: 293,
          column: 34
        }
      },
      "85": {
        start: {
          line: 294,
          column: 12
        },
        end: {
          line: 298,
          column: 13
        }
      },
      "86": {
        start: {
          line: 295,
          column: 16
        },
        end: {
          line: 297,
          column: 17
        }
      },
      "87": {
        start: {
          line: 296,
          column: 20
        },
        end: {
          line: 296,
          column: 53
        }
      },
      "88": {
        start: {
          line: 308,
          column: 8
        },
        end: {
          line: 311,
          column: 10
        }
      },
      "89": {
        start: {
          line: 314,
          column: 0
        },
        end: {
          line: 314,
          column: 46
        }
      },
      "90": {
        start: {
          line: 316,
          column: 0
        },
        end: {
          line: 316,
          column: 44
        }
      },
      "91": {
        start: {
          line: 318,
          column: 0
        },
        end: {
          line: 318,
          column: 52
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 30,
            column: 1
          },
          end: {
            line: 30,
            column: 2
          }
        },
        loc: {
          start: {
            line: 30,
            column: 27
          },
          end: {
            line: 39,
            column: 1
          }
        },
        line: 30
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 45,
            column: 4
          },
          end: {
            line: 45,
            column: 5
          }
        },
        loc: {
          start: {
            line: 45,
            column: 18
          },
          end: {
            line: 52,
            column: 5
          }
        },
        line: 45
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 56,
            column: 4
          },
          end: {
            line: 56,
            column: 5
          }
        },
        loc: {
          start: {
            line: 56,
            column: 36
          },
          end: {
            line: 70,
            column: 5
          }
        },
        line: 56
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 80,
            column: 4
          },
          end: {
            line: 80,
            column: 5
          }
        },
        loc: {
          start: {
            line: 80,
            column: 47
          },
          end: {
            line: 128,
            column: 5
          }
        },
        line: 80
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 86,
            column: 50
          },
          end: {
            line: 86,
            column: 51
          }
        },
        loc: {
          start: {
            line: 86,
            column: 55
          },
          end: {
            line: 86,
            column: 76
          }
        },
        line: 86
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 136,
            column: 4
          },
          end: {
            line: 136,
            column: 5
          }
        },
        loc: {
          start: {
            line: 136,
            column: 38
          },
          end: {
            line: 169,
            column: 5
          }
        },
        line: 136
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 176,
            column: 4
          },
          end: {
            line: 176,
            column: 5
          }
        },
        loc: {
          start: {
            line: 176,
            column: 33
          },
          end: {
            line: 200,
            column: 5
          }
        },
        line: 176
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 208,
            column: 4
          },
          end: {
            line: 208,
            column: 5
          }
        },
        loc: {
          start: {
            line: 208,
            column: 41
          },
          end: {
            line: 235,
            column: 5
          }
        },
        line: 208
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 244,
            column: 4
          },
          end: {
            line: 244,
            column: 5
          }
        },
        loc: {
          start: {
            line: 244,
            column: 40
          },
          end: {
            line: 248,
            column: 5
          }
        },
        line: 244
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 255,
            column: 4
          },
          end: {
            line: 255,
            column: 5
          }
        },
        loc: {
          start: {
            line: 255,
            column: 45
          },
          end: {
            line: 261,
            column: 5
          }
        },
        line: 255
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 269,
            column: 4
          },
          end: {
            line: 269,
            column: 5
          }
        },
        loc: {
          start: {
            line: 269,
            column: 39
          },
          end: {
            line: 273,
            column: 5
          }
        },
        line: 269
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 280,
            column: 4
          },
          end: {
            line: 280,
            column: 5
          }
        },
        loc: {
          start: {
            line: 280,
            column: 44
          },
          end: {
            line: 286,
            column: 5
          }
        },
        line: 280
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 291,
            column: 4
          },
          end: {
            line: 291,
            column: 5
          }
        },
        loc: {
          start: {
            line: 291,
            column: 24
          },
          end: {
            line: 300,
            column: 5
          }
        },
        line: 291
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 292,
            column: 20
          },
          end: {
            line: 292,
            column: 21
          }
        },
        loc: {
          start: {
            line: 292,
            column: 26
          },
          end: {
            line: 299,
            column: 9
          }
        },
        line: 292
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 307,
            column: 4
          },
          end: {
            line: 307,
            column: 5
          }
        },
        loc: {
          start: {
            line: 307,
            column: 16
          },
          end: {
            line: 312,
            column: 5
          }
        },
        line: 307
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 39,
            column: 3
          },
          end: {
            line: 39,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 39,
            column: 3
          },
          end: {
            line: 39,
            column: 17
          }
        }, {
          start: {
            line: 39,
            column: 22
          },
          end: {
            line: 39,
            column: 66
          }
        }],
        line: 39
      },
      "1": {
        loc: {
          start: {
            line: 60,
            column: 12
          },
          end: {
            line: 64,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 60,
            column: 12
          },
          end: {
            line: 64,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 60
      },
      "2": {
        loc: {
          start: {
            line: 87,
            column: 12
          },
          end: {
            line: 89,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 87,
            column: 12
          },
          end: {
            line: 89,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 87
      },
      "3": {
        loc: {
          start: {
            line: 140,
            column: 12
          },
          end: {
            line: 142,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 140,
            column: 12
          },
          end: {
            line: 142,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 140
      },
      "4": {
        loc: {
          start: {
            line: 140,
            column: 16
          },
          end: {
            line: 140,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 140,
            column: 16
          },
          end: {
            line: 140,
            column: 22
          }
        }, {
          start: {
            line: 140,
            column: 26
          },
          end: {
            line: 140,
            column: 55
          }
        }],
        line: 140
      },
      "5": {
        loc: {
          start: {
            line: 145,
            column: 12
          },
          end: {
            line: 147,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 145,
            column: 12
          },
          end: {
            line: 147,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 145
      },
      "6": {
        loc: {
          start: {
            line: 145,
            column: 16
          },
          end: {
            line: 145,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 145,
            column: 16
          },
          end: {
            line: 145,
            column: 32
          }
        }, {
          start: {
            line: 145,
            column: 36
          },
          end: {
            line: 145,
            column: 61
          }
        }],
        line: 145
      },
      "7": {
        loc: {
          start: {
            line: 149,
            column: 12
          },
          end: {
            line: 151,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 149,
            column: 12
          },
          end: {
            line: 151,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 149
      },
      "8": {
        loc: {
          start: {
            line: 149,
            column: 16
          },
          end: {
            line: 149,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 149,
            column: 16
          },
          end: {
            line: 149,
            column: 41
          }
        }, {
          start: {
            line: 149,
            column: 45
          },
          end: {
            line: 149,
            column: 83
          }
        }],
        line: 149
      },
      "9": {
        loc: {
          start: {
            line: 182,
            column: 12
          },
          end: {
            line: 184,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 182,
            column: 12
          },
          end: {
            line: 184,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 182
      },
      "10": {
        loc: {
          start: {
            line: 182,
            column: 16
          },
          end: {
            line: 182,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 182,
            column: 16
          },
          end: {
            line: 182,
            column: 23
          }
        }, {
          start: {
            line: 182,
            column: 27
          },
          end: {
            line: 182,
            column: 37
          }
        }, {
          start: {
            line: 182,
            column: 41
          },
          end: {
            line: 182,
            column: 52
          }
        }],
        line: 182
      },
      "11": {
        loc: {
          start: {
            line: 212,
            column: 12
          },
          end: {
            line: 214,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 212,
            column: 12
          },
          end: {
            line: 214,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 212
      },
      "12": {
        loc: {
          start: {
            line: 295,
            column: 16
          },
          end: {
            line: 297,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 295,
            column: 16
          },
          end: {
            line: 297,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 295
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "3c9ebb7891330fb8c550681cf20785673177dda6"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_gl0onn3sl = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_gl0onn3sl();
cov_gl0onn3sl().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_gl0onn3sl().s[1]++;
exports.credentialManager = exports.CredentialManager = exports.CredentialType = void 0;
const encryption_service_1 =
/* istanbul ignore next */
(cov_gl0onn3sl().s[2]++, require("@/security/encryption-service"));
const key_manager_1 =
/* istanbul ignore next */
(cov_gl0onn3sl().s[3]++, require("@/security/key-manager"));
const logger_1 =
/* istanbul ignore next */
(cov_gl0onn3sl().s[4]++, require("@/core/logging/logger"));
/**
 * Enumeration of credential types
 */
var CredentialType;
/* istanbul ignore next */
cov_gl0onn3sl().s[5]++;
(function (CredentialType) {
  /* istanbul ignore next */
  cov_gl0onn3sl().f[0]++;
  cov_gl0onn3sl().s[6]++;
  CredentialType["API_KEY"] = "api_key";
  /* istanbul ignore next */
  cov_gl0onn3sl().s[7]++;
  CredentialType["API_SECRET"] = "api_secret";
  /* istanbul ignore next */
  cov_gl0onn3sl().s[8]++;
  CredentialType["API_PASSPHRASE"] = "api_passphrase";
  /* istanbul ignore next */
  cov_gl0onn3sl().s[9]++;
  CredentialType["JWT_SECRET"] = "jwt_secret";
  /* istanbul ignore next */
  cov_gl0onn3sl().s[10]++;
  CredentialType["SESSION_SECRET"] = "session_secret";
  /* istanbul ignore next */
  cov_gl0onn3sl().s[11]++;
  CredentialType["DATABASE_PASSWORD"] = "database_password";
  /* istanbul ignore next */
  cov_gl0onn3sl().s[12]++;
  CredentialType["ENCRYPTION_KEY"] = "encryption_key";
  /* istanbul ignore next */
  cov_gl0onn3sl().s[13]++;
  CredentialType["WEBHOOK_SECRET"] = "webhook_secret";
})(
/* istanbul ignore next */
(cov_gl0onn3sl().b[0][0]++, CredentialType) ||
/* istanbul ignore next */
(cov_gl0onn3sl().b[0][1]++, exports.CredentialType = CredentialType = {}));
/**
 * Secure credential management service
 * Handles all sensitive credential operations with encryption and auditing
 */
class CredentialManager {
  constructor() {
    /* istanbul ignore next */
    cov_gl0onn3sl().f[1]++;
    cov_gl0onn3sl().s[14]++;
    /** In-memory credential cache */
    this.credentialCache = new Map();
    // Initialize credential encryption key
    /* istanbul ignore next */
    cov_gl0onn3sl().s[15]++;
    this.initializeCredentialKey();
    // Start cache cleanup
    /* istanbul ignore next */
    cov_gl0onn3sl().s[16]++;
    this.startCacheCleanup();
  }
  /**
   * Initialize or retrieve credential encryption key
   */
  async initializeCredentialKey() {
    /* istanbul ignore next */
    cov_gl0onn3sl().f[2]++;
    cov_gl0onn3sl().s[17]++;
    try {
      // Try to get existing credential key
      const existingKeys =
      /* istanbul ignore next */
      (cov_gl0onn3sl().s[18]++, await key_manager_1.keyManager.listKeys(key_manager_1.KeyType.API_ENCRYPTION));
      /* istanbul ignore next */
      cov_gl0onn3sl().s[19]++;
      if (existingKeys.length === 0) {
        /* istanbul ignore next */
        cov_gl0onn3sl().b[1][0]++;
        cov_gl0onn3sl().s[20]++;
        // Generate new credential encryption key
        await key_manager_1.keyManager.generateKey(key_manager_1.KeyType.API_ENCRYPTION, 'API credential encryption', 256);
        /* istanbul ignore next */
        cov_gl0onn3sl().s[21]++;
        logger_1.logger.info('🔐 New credential encryption key generated');
      } else
      /* istanbul ignore next */
      {
        cov_gl0onn3sl().b[1][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_gl0onn3sl().s[22]++;
      logger_1.logger.error('❌ Failed to initialize credential key:', error);
      /* istanbul ignore next */
      cov_gl0onn3sl().s[23]++;
      throw new Error('Credential manager initialization failed');
    }
  } /**
      * Store credentials securely
    * Encrypts and stores credentials with metadata
    *
    * @param service - Service name (e.g., 'gate.io')
    * @param type - Type of credential
    * @param data - Credential data to store
    * @returns Promise<string> Credential ID
    */
  async storeCredential(service, type, data) {
    /* istanbul ignore next */
    cov_gl0onn3sl().f[3]++;
    cov_gl0onn3sl().s[24]++;
    try {
      // Generate unique credential ID
      const credentialId =
      /* istanbul ignore next */
      (cov_gl0onn3sl().s[25]++, this.generateCredentialId(service, type));
      // Get credential encryption key
      const credentialKeys =
      /* istanbul ignore next */
      (cov_gl0onn3sl().s[26]++, await key_manager_1.keyManager.listKeys(key_manager_1.KeyType.API_ENCRYPTION));
      const activeKey =
      /* istanbul ignore next */
      (cov_gl0onn3sl().s[27]++, credentialKeys.find(k => {
        /* istanbul ignore next */
        cov_gl0onn3sl().f[4]++;
        cov_gl0onn3sl().s[28]++;
        return k.status === 'active';
      }));
      /* istanbul ignore next */
      cov_gl0onn3sl().s[29]++;
      if (!activeKey) {
        /* istanbul ignore next */
        cov_gl0onn3sl().b[2][0]++;
        cov_gl0onn3sl().s[30]++;
        throw new Error('No active credential encryption key found');
      } else
      /* istanbul ignore next */
      {
        cov_gl0onn3sl().b[2][1]++;
      }
      // Encrypt credential data
      const encryptedData =
      /* istanbul ignore next */
      (cov_gl0onn3sl().s[31]++, await encryption_service_1.encryptionService.encryptCredentials(data));
      // Create credential entry
      const credentialEntry =
      /* istanbul ignore next */
      (cov_gl0onn3sl().s[32]++, {
        credentialId,
        service,
        type,
        encryptedData,
        createdAt: new Date(),
        isActive: true,
        usageCount: 0
      });
      // Store credential (implementation would use secure database)
      /* istanbul ignore next */
      cov_gl0onn3sl().s[33]++;
      await this.persistCredential(credentialEntry);
      // Log credential storage (without sensitive data)
      /* istanbul ignore next */
      cov_gl0onn3sl().s[34]++;
      logger_1.logger.security('CREDENTIAL_STORED', 'Credential stored securely', {
        credentialId,
        service,
        type,
        classification: 'RESTRICTED'
      });
      // Audit log
      /* istanbul ignore next */
      cov_gl0onn3sl().s[35]++;
      logger_1.logger.audit({
        auditId: `cred_store_${credentialId}`,
        eventType: 'CREDENTIAL_STORAGE',
        actor: 'SYSTEM',
        resource: `CREDENTIAL:${credentialId}`,
        action: 'STORE',
        result: 'SUCCESS',
        timestamp: new Date(),
        auditData: {
          service,
          type
        }
      });
      /* istanbul ignore next */
      cov_gl0onn3sl().s[36]++;
      return credentialId;
    } catch (error) {
      /* istanbul ignore next */
      cov_gl0onn3sl().s[37]++;
      logger_1.logger.error('❌ Failed to store credential:', error);
      /* istanbul ignore next */
      cov_gl0onn3sl().s[38]++;
      throw new Error('Credential storage failed');
    }
  }
  /**
   * Retrieve credentials securely
   * Decrypts and returns credential data
   *
   * @param credentialId - Credential identifier
   * @returns Promise<any> Decrypted credential data
   */
  async getCredential(credentialId) {
    /* istanbul ignore next */
    cov_gl0onn3sl().f[5]++;
    cov_gl0onn3sl().s[39]++;
    try {
      // Check cache first
      const cached =
      /* istanbul ignore next */
      (cov_gl0onn3sl().s[40]++, this.credentialCache.get(credentialId));
      /* istanbul ignore next */
      cov_gl0onn3sl().s[41]++;
      if (
      /* istanbul ignore next */
      (cov_gl0onn3sl().b[4][0]++, cached) &&
      /* istanbul ignore next */
      (cov_gl0onn3sl().b[4][1]++, cached.expiresAt > Date.now())) {
        /* istanbul ignore next */
        cov_gl0onn3sl().b[3][0]++;
        cov_gl0onn3sl().s[42]++;
        return cached.data;
      } else
      /* istanbul ignore next */
      {
        cov_gl0onn3sl().b[3][1]++;
      }
      // Load credential from storage
      const credentialEntry =
      /* istanbul ignore next */
      (cov_gl0onn3sl().s[43]++, await this.loadCredential(credentialId));
      /* istanbul ignore next */
      cov_gl0onn3sl().s[44]++;
      if (
      /* istanbul ignore next */
      (cov_gl0onn3sl().b[6][0]++, !credentialEntry) ||
      /* istanbul ignore next */
      (cov_gl0onn3sl().b[6][1]++, !credentialEntry.isActive)) {
        /* istanbul ignore next */
        cov_gl0onn3sl().b[5][0]++;
        cov_gl0onn3sl().s[45]++;
        throw new Error('Credential not found or inactive');
      } else
      /* istanbul ignore next */
      {
        cov_gl0onn3sl().b[5][1]++;
      }
      // Check expiration
      cov_gl0onn3sl().s[46]++;
      if (
      /* istanbul ignore next */
      (cov_gl0onn3sl().b[8][0]++, credentialEntry.expiresAt) &&
      /* istanbul ignore next */
      (cov_gl0onn3sl().b[8][1]++, credentialEntry.expiresAt < new Date())) {
        /* istanbul ignore next */
        cov_gl0onn3sl().b[7][0]++;
        cov_gl0onn3sl().s[47]++;
        throw new Error('Credential has expired');
      } else
      /* istanbul ignore next */
      {
        cov_gl0onn3sl().b[7][1]++;
      }
      // Decrypt credential data
      const decryptedData =
      /* istanbul ignore next */
      (cov_gl0onn3sl().s[48]++, await encryption_service_1.encryptionService.decryptCredentials(credentialEntry.encryptedData));
      // Update usage statistics
      /* istanbul ignore next */
      cov_gl0onn3sl().s[49]++;
      credentialEntry.usageCount++;
      /* istanbul ignore next */
      cov_gl0onn3sl().s[50]++;
      credentialEntry.lastAccessed = new Date();
      /* istanbul ignore next */
      cov_gl0onn3sl().s[51]++;
      await this.updateCredential(credentialEntry);
      // Cache for performance
      /* istanbul ignore next */
      cov_gl0onn3sl().s[52]++;
      this.credentialCache.set(credentialId, {
        data: decryptedData,
        expiresAt: Date.now() + CredentialManager.CACHE_TTL
      });
      /* istanbul ignore next */
      cov_gl0onn3sl().s[53]++;
      return decryptedData;
    } catch (error) {
      /* istanbul ignore next */
      cov_gl0onn3sl().s[54]++;
      logger_1.logger.error('❌ Failed to retrieve credential:', error);
      /* istanbul ignore next */
      cov_gl0onn3sl().s[55]++;
      throw new Error('Credential retrieval failed');
    }
  }
  /**
   * Get Gate.io API credentials
   * Convenience method for retrieving trading API credentials
   *
   * @returns Promise<GateIOCredentials> Gate.io API credentials
   */
  async getGateIOCredentials() {
    /* istanbul ignore next */
    cov_gl0onn3sl().f[6]++;
    cov_gl0onn3sl().s[56]++;
    try {
      // Get credentials from environment or storage
      const apiKey =
      /* istanbul ignore next */
      (cov_gl0onn3sl().s[57]++, process.env.GATE_IO_API_KEY);
      const apiSecret =
      /* istanbul ignore next */
      (cov_gl0onn3sl().s[58]++, process.env.GATE_IO_API_SECRET);
      const passphrase =
      /* istanbul ignore next */
      (cov_gl0onn3sl().s[59]++, process.env.GATE_IO_API_PASSPHRASE);
      /* istanbul ignore next */
      cov_gl0onn3sl().s[60]++;
      if (
      /* istanbul ignore next */
      (cov_gl0onn3sl().b[10][0]++, !apiKey) ||
      /* istanbul ignore next */
      (cov_gl0onn3sl().b[10][1]++, !apiSecret) ||
      /* istanbul ignore next */
      (cov_gl0onn3sl().b[10][2]++, !passphrase)) {
        /* istanbul ignore next */
        cov_gl0onn3sl().b[9][0]++;
        cov_gl0onn3sl().s[61]++;
        throw new Error('Gate.io API credentials not configured');
      } else
      /* istanbul ignore next */
      {
        cov_gl0onn3sl().b[9][1]++;
      }
      // Log credential access (without sensitive data)
      cov_gl0onn3sl().s[62]++;
      logger_1.logger.security('CREDENTIAL_ACCESSED', 'Gate.io credentials accessed', {
        service: 'gate.io',
        classification: 'RESTRICTED'
      });
      /* istanbul ignore next */
      cov_gl0onn3sl().s[63]++;
      return {
        apiKey,
        apiSecret,
        passphrase
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_gl0onn3sl().s[64]++;
      logger_1.logger.error('❌ Failed to get Gate.io credentials:', error);
      /* istanbul ignore next */
      cov_gl0onn3sl().s[65]++;
      throw new Error('Gate.io credential retrieval failed');
    }
  }
  /**
   * Rotate credentials
   * Generates new credentials and marks old ones as deprecated
   *
   * @param credentialId - Credential to rotate
   * @returns Promise<string> New credential ID
   */
  async rotateCredential(credentialId) {
    /* istanbul ignore next */
    cov_gl0onn3sl().f[7]++;
    cov_gl0onn3sl().s[66]++;
    try {
      // Load current credential
      const currentCredential =
      /* istanbul ignore next */
      (cov_gl0onn3sl().s[67]++, await this.loadCredential(credentialId));
      /* istanbul ignore next */
      cov_gl0onn3sl().s[68]++;
      if (!currentCredential) {
        /* istanbul ignore next */
        cov_gl0onn3sl().b[11][0]++;
        cov_gl0onn3sl().s[69]++;
        throw new Error('Credential not found');
      } else
      /* istanbul ignore next */
      {
        cov_gl0onn3sl().b[11][1]++;
      }
      // Mark current credential as deprecated
      cov_gl0onn3sl().s[70]++;
      currentCredential.isActive = false;
      /* istanbul ignore next */
      cov_gl0onn3sl().s[71]++;
      await this.updateCredential(currentCredential);
      // Remove from cache
      /* istanbul ignore next */
      cov_gl0onn3sl().s[72]++;
      this.credentialCache.delete(credentialId);
      // Log credential rotation
      /* istanbul ignore next */
      cov_gl0onn3sl().s[73]++;
      logger_1.logger.security('CREDENTIAL_ROTATED', 'Credential rotated', {
        oldCredentialId: credentialId,
        service: currentCredential.service,
        type: currentCredential.type,
        classification: 'RESTRICTED'
      });
      // Note: New credential would need to be provided by external system
      // This method marks the old one as inactive
      /* istanbul ignore next */
      cov_gl0onn3sl().s[74]++;
      return credentialId; // Would return new credential ID in full implementation
    } catch (error) {
      /* istanbul ignore next */
      cov_gl0onn3sl().s[75]++;
      logger_1.logger.error('❌ Failed to rotate credential:', error);
      /* istanbul ignore next */
      cov_gl0onn3sl().s[76]++;
      throw new Error('Credential rotation failed');
    }
  }
  /**
   * Generate unique credential ID
   * Creates identifier for credential storage
   *
   * @param service - Service name
   * @param type - Credential type
   * @returns string Unique credential ID
   */
  generateCredentialId(service, type) {
    /* istanbul ignore next */
    cov_gl0onn3sl().f[8]++;
    const timestamp =
    /* istanbul ignore next */
    (cov_gl0onn3sl().s[77]++, Date.now().toString(36));
    const random =
    /* istanbul ignore next */
    (cov_gl0onn3sl().s[78]++, Math.random().toString(36).substring(2));
    /* istanbul ignore next */
    cov_gl0onn3sl().s[79]++;
    return `${service}_${type}_${timestamp}_${random}`;
  }
  /**
   * Persist credential to secure storage
   * Stores credential entry securely
   *
   * @param credentialEntry - Credential entry to store
   */
  async persistCredential(credentialEntry) {
    /* istanbul ignore next */
    cov_gl0onn3sl().f[9]++;
    cov_gl0onn3sl().s[80]++;
    // Implementation would store in secure database
    // For now, this is a placeholder
    logger_1.logger.debug('Credential persisted to secure storage', {
      credentialId: credentialEntry.credentialId
    });
  }
  /**
   * Load credential from secure storage
   * Retrieves credential entry from storage
   *
   * @param credentialId - Credential identifier
   * @returns Promise<CredentialEntry | null> Credential entry or null
   */
  async loadCredential(credentialId) {
    /* istanbul ignore next */
    cov_gl0onn3sl().f[10]++;
    cov_gl0onn3sl().s[81]++;
    // Implementation would load from secure database
    // For now, this is a placeholder
    return null;
  }
  /**
   * Update credential in storage
   * Updates credential entry in secure storage
   *
   * @param credentialEntry - Updated credential entry
   */
  async updateCredential(credentialEntry) {
    /* istanbul ignore next */
    cov_gl0onn3sl().f[11]++;
    cov_gl0onn3sl().s[82]++;
    // Implementation would update in secure database
    // For now, this is a placeholder
    logger_1.logger.debug('Credential updated in secure storage', {
      credentialId: credentialEntry.credentialId
    });
  }
  /**
   * Start cache cleanup process
   * Removes expired entries from credential cache
   */
  startCacheCleanup() {
    /* istanbul ignore next */
    cov_gl0onn3sl().f[12]++;
    cov_gl0onn3sl().s[83]++;
    setInterval(() => {
      /* istanbul ignore next */
      cov_gl0onn3sl().f[13]++;
      const now =
      /* istanbul ignore next */
      (cov_gl0onn3sl().s[84]++, Date.now());
      /* istanbul ignore next */
      cov_gl0onn3sl().s[85]++;
      for (const [key, value] of this.credentialCache.entries()) {
        /* istanbul ignore next */
        cov_gl0onn3sl().s[86]++;
        if (value.expiresAt <= now) {
          /* istanbul ignore next */
          cov_gl0onn3sl().b[12][0]++;
          cov_gl0onn3sl().s[87]++;
          this.credentialCache.delete(key);
        } else
        /* istanbul ignore next */
        {
          cov_gl0onn3sl().b[12][1]++;
        }
      }
    }, 60000); // Clean up every minute
  }
  /**
   * Get credential manager status
   * Returns current status for monitoring
   *
   * @returns Object containing status information
   */
  getStatus() {
    /* istanbul ignore next */
    cov_gl0onn3sl().f[14]++;
    cov_gl0onn3sl().s[88]++;
    return {
      cacheSize: this.credentialCache.size,
      timestamp: Date.now()
    };
  }
}
/* istanbul ignore next */
cov_gl0onn3sl().s[89]++;
exports.CredentialManager = CredentialManager;
/** Cache TTL in milliseconds (5 minutes) */
/* istanbul ignore next */
cov_gl0onn3sl().s[90]++;
CredentialManager.CACHE_TTL = 5 * 60 * 1000;
// Create and export singleton instance
/* istanbul ignore next */
cov_gl0onn3sl().s[91]++;
exports.credentialManager = new CredentialManager();
// =============================================================================
// CREDENTIAL SECURITY NOTES
// =============================================================================
// 1. All credentials are encrypted before storage
// 2. Credentials are cached temporarily for performance
// 3. All credential access is logged and audited
// 4. Expired credentials are automatically rejected
// 5. Credential rotation invalidates old credentials
// 6. Cache is automatically cleaned of expired entries
// 7. Never log actual credential values
// 8. Use environment variables for initial credential loading
// =============================================================================