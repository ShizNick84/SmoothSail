{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\tests\\notifications\\notification-system.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\tests\\notifications\\notification-system.test.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * NOTIFICATION SYSTEM TESTS\r\n * =============================================================================\r\n * \r\n * Comprehensive test suite for the notification system of the AI crypto\r\n * trading agent. Tests all notification services, routing, and integration.\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * =============================================================================\r\n */\r\n\r\nimport { describe, test, expect, beforeEach, afterEach, jest } from '@jest/globals';\r\nimport {\r\n  NotificationManager,\r\n  EmailService,\r\n  TelegramService,\r\n  NotificationRouter,\r\n  TradingNotifications,\r\n  EmailNotificationType,\r\n  TelegramNotificationType,\r\n  AlertCategory,\r\n  AlertPriority,\r\n  type TradeExecutionData,\r\n  type PositionData,\r\n  type PerformanceSummaryData,\r\n  type SystemHealthData\r\n} from '@/core/notifications';\r\n\r\n// Mock environment variables\r\nprocess.env.SMTP_HOST = 'smtp.gmail.com';\r\nprocess.env.SMTP_PORT = '587';\r\nprocess.env.SMTP_USER = 'test@example.com';\r\nprocess.env.SMTP_PASS = 'encrypted_password';\r\nprocess.env.SMTP_FROM_ADDRESS = 'trading-agent@example.com';\r\nprocess.env.SMTP_SECURE = 'true';\r\nprocess.env.TELEGRAM_BOT_TOKEN = 'test_bot_token';\r\nprocess.env.TELEGRAM_CHAT_ID = '123456789';\r\nprocess.env.TELEGRAM_AUTHORIZED_USERS = '123456789,987654321';\r\nprocess.env.TELEGRAM_ADMIN_USERS = '123456789';\r\nprocess.env.NOTIFICATION_EMAIL = 'notifications@example.com';\r\n\r\ndescribe('Notification System', () => {\r\n  let notificationManager: NotificationManager;\r\n\r\n  beforeEach(async () => {\r\n    // Mock external dependencies\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  afterEach(async () => {\r\n    if (notificationManager) {\r\n      await notificationManager.stop();\r\n    }\r\n  });\r\n\r\n  describe('NotificationManager', () => {\r\n    test('should initialize with default configuration', async () => {\r\n      notificationManager = new NotificationManager();\r\n      \r\n      // Mock the initialization to avoid actual network calls\r\n      jest.spyOn(notificationManager as any, 'initializeEmailService').mockResolvedValue(undefined);\r\n      jest.spyOn(notificationManager as any, 'initializeTelegramService').mockResolvedValue(undefined);\r\n      jest.spyOn(notificationManager as any, 'initializeNotificationRouter').mockResolvedValue(undefined);\r\n      jest.spyOn(notificationManager as any, 'initializeTradingNotifications').mockResolvedValue(undefined);\r\n      jest.spyOn(notificationManager as any, 'sendStartupNotification').mockResolvedValue(undefined);\r\n\r\n      await notificationManager.initialize();\r\n\r\n      const healthStatus = notificationManager.getHealthStatus();\r\n      expect(healthStatus.size).toBeGreaterThan(0);\r\n    });\r\n\r\n    test('should handle trade execution notification', async () => {\r\n      notificationManager = new NotificationManager();\r\n      \r\n      // Mock initialization\r\n      jest.spyOn(notificationManager as any, 'initializeEmailService').mockResolvedValue(undefined);\r\n      jest.spyOn(notificationManager as any, 'initializeTelegramService').mockResolvedValue(undefined);\r\n      jest.spyOn(notificationManager as any, 'initializeNotificationRouter').mockResolvedValue(undefined);\r\n      jest.spyOn(notificationManager as any, 'initializeTradingNotifications').mockResolvedValue(undefined);\r\n      jest.spyOn(notificationManager as any, 'sendStartupNotification').mockResolvedValue(undefined);\r\n\r\n      await notificationManager.initialize();\r\n\r\n      const tradeData: TradeExecutionData = {\r\n        tradeId: 'test_trade_123',\r\n        symbol: 'BTC/USDT',\r\n        action: 'BUY',\r\n        quantity: 0.1,\r\n        price: 45000,\r\n        totalValue: 4500,\r\n        fees: 4.5,\r\n        pnl: 150,\r\n        balance: 10000,\r\n        strategy: 'MA Crossover',\r\n        confidence: 0.85,\r\n        riskReward: 2.5,\r\n        timestamp: new Date(),\r\n        executionTime: 250\r\n      };\r\n\r\n      // Mock the trading notifications service\r\n      const mockNotifyTradeExecution = jest.fn().mockResolvedValue(undefined);\r\n      (notificationManager as any).tradingNotifications = {\r\n        notifyTradeExecution: mockNotifyTradeExecution\r\n      };\r\n\r\n      await notificationManager.notifyTradeExecution(tradeData);\r\n\r\n      expect(mockNotifyTradeExecution).toHaveBeenCalledWith(tradeData);\r\n    });\r\n\r\n    test('should handle security alerts', async () => {\r\n      notificationManager = new NotificationManager();\r\n      \r\n      // Mock initialization\r\n      jest.spyOn(notificationManager as any, 'initializeEmailService').mockResolvedValue(undefined);\r\n      jest.spyOn(notificationManager as any, 'initializeTelegramService').mockResolvedValue(undefined);\r\n      jest.spyOn(notificationManager as any, 'initializeNotificationRouter').mockResolvedValue(undefined);\r\n      jest.spyOn(notificationManager as any, 'initializeTradingNotifications').mockResolvedValue(undefined);\r\n      jest.spyOn(notificationManager as any, 'sendStartupNotification').mockResolvedValue(undefined);\r\n\r\n      await notificationManager.initialize();\r\n\r\n      const securityData = {\r\n        threatLevel: 'HIGH' as const,\r\n        incidentType: 'Unauthorized Access Attempt',\r\n        description: 'Multiple failed login attempts detected',\r\n        affectedSystems: ['Trading Engine', 'API Gateway']\r\n      };\r\n\r\n      // Mock the notification router\r\n      const mockSendSecurityAlert = jest.fn().mockResolvedValue([]);\r\n      (notificationManager as any).notificationRouter = {\r\n        sendSecurityAlert: mockSendSecurityAlert\r\n      };\r\n\r\n      await notificationManager.sendSecurityAlert(securityData);\r\n\r\n      expect(mockSendSecurityAlert).toHaveBeenCalledWith(securityData);\r\n    });\r\n\r\n    test('should provide health statistics', async () => {\r\n      notificationManager = new NotificationManager();\r\n      \r\n      // Mock initialization\r\n      jest.spyOn(notificationManager as any, 'initializeEmailService').mockResolvedValue(undefined);\r\n      jest.spyOn(notificationManager as any, 'initializeTelegramService').mockResolvedValue(undefined);\r\n      jest.spyOn(notificationManager as any, 'initializeNotificationRouter').mockResolvedValue(undefined);\r\n      jest.spyOn(notificationManager as any, 'initializeTradingNotifications').mockResolvedValue(undefined);\r\n      jest.spyOn(notificationManager as any, 'sendStartupNotification').mockResolvedValue(undefined);\r\n\r\n      await notificationManager.initialize();\r\n\r\n      const statistics = notificationManager.getStatistics();\r\n\r\n      expect(statistics).toHaveProperty('services');\r\n      expect(statistics).toHaveProperty('overallHealth');\r\n      expect(statistics).toHaveProperty('lastHealthCheck');\r\n      expect(typeof statistics.overallHealth).toBe('boolean');\r\n    });\r\n  });\r\n\r\n  describe('EmailService', () => {\r\n    test('should validate SMTP configuration', () => {\r\n      const emailService = new EmailService();\r\n      \r\n      // Test that required environment variables are checked\r\n      expect(process.env.SMTP_HOST).toBeDefined();\r\n      expect(process.env.SMTP_PORT).toBeDefined();\r\n      expect(process.env.SMTP_USER).toBeDefined();\r\n      expect(process.env.SMTP_PASS).toBeDefined();\r\n      expect(process.env.SMTP_FROM_ADDRESS).toBeDefined();\r\n    });\r\n\r\n    test('should generate email content from templates', async () => {\r\n      const emailService = new EmailService();\r\n      \r\n      // Mock the template system\r\n      const mockGenerateEmailContent = jest.fn().mockResolvedValue('<html>Test Email</html>');\r\n      (emailService as any).generateEmailContent = mockGenerateEmailContent;\r\n\r\n      const notification = {\r\n        id: 'test_email_123',\r\n        type: EmailNotificationType.TRADE_EXECUTION,\r\n        priority: 'high' as any,\r\n        to: ['test@example.com'],\r\n        subject: 'Test Trade Notification',\r\n        templateData: {\r\n          systemName: 'AI Crypto Trading Agent',\r\n          timestamp: new Date().toISOString(),\r\n          symbol: 'BTC/USDT',\r\n          action: 'BUY',\r\n          quantity: 0.1,\r\n          price: 45000\r\n        },\r\n        timestamp: new Date()\r\n      };\r\n\r\n      await mockGenerateEmailContent(notification);\r\n\r\n      expect(mockGenerateEmailContent).toHaveBeenCalledWith(notification);\r\n    });\r\n  });\r\n\r\n  describe('TelegramService', () => {\r\n    test('should format trading messages with emojis', () => {\r\n      const telegramService = new TelegramService();\r\n      \r\n      const tradeData = {\r\n        symbol: 'BTC/USDT',\r\n        action: 'BUY' as const,\r\n        quantity: 0.1,\r\n        price: 45000,\r\n        pnl: 150,\r\n        balance: 10000,\r\n        strategy: 'MA Crossover',\r\n        timestamp: new Date()\r\n      };\r\n\r\n      // Test message formatting logic\r\n      const emoji = tradeData.action === 'BUY' ? '🟢' : '🔴';\r\n      const actionEmoji = tradeData.action === 'BUY' ? '📈' : '📉';\r\n      const pnlEmoji = (tradeData.pnl || 0) >= 0 ? '💰' : '📉';\r\n\r\n      expect(emoji).toBe('🟢');\r\n      expect(actionEmoji).toBe('📈');\r\n      expect(pnlEmoji).toBe('💰');\r\n    });\r\n\r\n    test('should validate authorized users', () => {\r\n      const telegramService = new TelegramService();\r\n      \r\n      // Test that authorized users are loaded from environment\r\n      expect(process.env.TELEGRAM_AUTHORIZED_USERS).toBeDefined();\r\n      expect(process.env.TELEGRAM_ADMIN_USERS).toBeDefined();\r\n      \r\n      const authorizedUsers = process.env.TELEGRAM_AUTHORIZED_USERS!.split(',');\r\n      const adminUsers = process.env.TELEGRAM_ADMIN_USERS!.split(',');\r\n      \r\n      expect(authorizedUsers.length).toBeGreaterThan(0);\r\n      expect(adminUsers.length).toBeGreaterThan(0);\r\n    });\r\n  });\r\n\r\n  describe('NotificationRouter', () => {\r\n    test('should route alerts based on priority and category', () => {\r\n      const router = new NotificationRouter();\r\n      \r\n      const alert = {\r\n        id: 'test_alert_123',\r\n        category: AlertCategory.TRADING,\r\n        priority: AlertPriority.HIGH,\r\n        title: 'Test Trading Alert',\r\n        message: 'This is a test trading alert',\r\n        data: { symbol: 'BTC/USDT', action: 'BUY' },\r\n        timestamp: new Date(),\r\n        source: 'test',\r\n        tags: ['test', 'trading']\r\n      };\r\n\r\n      // Test alert structure\r\n      expect(alert.category).toBe(AlertCategory.TRADING);\r\n      expect(alert.priority).toBe(AlertPriority.HIGH);\r\n      expect(alert.data).toHaveProperty('symbol');\r\n      expect(alert.data).toHaveProperty('action');\r\n    });\r\n\r\n    test('should implement rate limiting', () => {\r\n      const router = new NotificationRouter();\r\n      \r\n      const rateLimitRule = {\r\n        enabled: true,\r\n        maxPerMinute: 10,\r\n        maxPerHour: 100,\r\n        maxPerDay: 1000,\r\n        windowMinutes: 60\r\n      };\r\n\r\n      // Test rate limit configuration\r\n      expect(rateLimitRule.enabled).toBe(true);\r\n      expect(rateLimitRule.maxPerMinute).toBe(10);\r\n      expect(rateLimitRule.maxPerHour).toBe(100);\r\n      expect(rateLimitRule.maxPerDay).toBe(1000);\r\n    });\r\n\r\n    test('should handle alert deduplication', () => {\r\n      const router = new NotificationRouter();\r\n      \r\n      const alert1 = {\r\n        id: 'alert_1',\r\n        category: AlertCategory.SYSTEM,\r\n        priority: AlertPriority.NORMAL,\r\n        title: 'High CPU Usage',\r\n        message: 'CPU usage is at 85%',\r\n        data: { cpu: 85 },\r\n        timestamp: new Date(),\r\n        source: 'system-monitor',\r\n        tags: ['system', 'cpu']\r\n      };\r\n\r\n      const alert2 = {\r\n        id: 'alert_2',\r\n        category: AlertCategory.SYSTEM,\r\n        priority: AlertPriority.NORMAL,\r\n        title: 'High CPU Usage',\r\n        message: 'CPU usage is at 85%',\r\n        data: { cpu: 85 },\r\n        timestamp: new Date(),\r\n        source: 'system-monitor',\r\n        tags: ['system', 'cpu']\r\n      };\r\n\r\n      // Test that alerts with same content should be deduplicated\r\n      expect(alert1.title).toBe(alert2.title);\r\n      expect(alert1.message).toBe(alert2.message);\r\n      expect(alert1.source).toBe(alert2.source);\r\n    });\r\n  });\r\n\r\n  describe('TradingNotifications', () => {\r\n    test('should format performance summary data', () => {\r\n      const tradingNotifications = new TradingNotifications();\r\n      \r\n      const performanceData: PerformanceSummaryData = {\r\n        period: 'daily',\r\n        startDate: new Date('2024-01-01'),\r\n        endDate: new Date('2024-01-01'),\r\n        totalTrades: 15,\r\n        winningTrades: 10,\r\n        losingTrades: 5,\r\n        winRate: 66.7,\r\n        totalPnL: 250.50,\r\n        grossProfit: 400.75,\r\n        grossLoss: -150.25,\r\n        profitFactor: 2.67,\r\n        sharpeRatio: 1.85,\r\n        maxDrawdown: -75.25,\r\n        maxDrawdownPercent: -2.5,\r\n        bestTrade: 85.50,\r\n        worstTrade: -45.25,\r\n        averageWin: 40.08,\r\n        averageLoss: -30.05,\r\n        largestWinStreak: 4,\r\n        largestLossStreak: 2,\r\n        currentBalance: 10250.50,\r\n        startingBalance: 10000.00,\r\n        returnPercent: 2.51,\r\n        tradingDays: 1,\r\n        averageTradesPerDay: 15,\r\n        strategies: [\r\n          {\r\n            name: 'MA Crossover',\r\n            trades: 8,\r\n            winRate: 75.0,\r\n            pnl: 180.25,\r\n            profitFactor: 3.2,\r\n            averageReturn: 22.53\r\n          },\r\n          {\r\n            name: 'RSI Momentum',\r\n            trades: 7,\r\n            winRate: 57.1,\r\n            pnl: 70.25,\r\n            profitFactor: 2.1,\r\n            averageReturn: 10.04\r\n          }\r\n        ]\r\n      };\r\n\r\n      // Test performance data structure\r\n      expect(performanceData.totalTrades).toBe(15);\r\n      expect(performanceData.winRate).toBe(66.7);\r\n      expect(performanceData.totalPnL).toBe(250.50);\r\n      expect(performanceData.strategies.length).toBe(2);\r\n      expect(performanceData.strategies[0].name).toBe('MA Crossover');\r\n    });\r\n\r\n    test('should handle system health data', () => {\r\n      const tradingNotifications = new TradingNotifications();\r\n      \r\n      const healthData: SystemHealthData = {\r\n        timestamp: new Date(),\r\n        uptime: 86400, // 24 hours in seconds\r\n        cpu: {\r\n          usage: 45.5,\r\n          temperature: 65.2,\r\n          frequency: 2800\r\n        },\r\n        memory: {\r\n          used: 8192,\r\n          available: 4096,\r\n          usagePercent: 66.7\r\n        },\r\n        disk: {\r\n          used: 128000,\r\n          available: 128000,\r\n          usagePercent: 50.0,\r\n          ioWait: 2.5\r\n        },\r\n        network: {\r\n          latency: 25,\r\n          throughput: 1000,\r\n          packetsLost: 0,\r\n          connectionStatus: 'connected'\r\n        },\r\n        trading: {\r\n          activePositions: 3,\r\n          dailyTrades: 12,\r\n          apiLatency: 150,\r\n          lastTradeTime: new Date()\r\n        }\r\n      };\r\n\r\n      // Test system health data structure\r\n      expect(healthData.cpu.usage).toBe(45.5);\r\n      expect(healthData.memory.usagePercent).toBe(66.7);\r\n      expect(healthData.disk.usagePercent).toBe(50.0);\r\n      expect(healthData.network.connectionStatus).toBe('connected');\r\n      expect(healthData.trading.activePositions).toBe(3);\r\n    });\r\n  });\r\n\r\n  describe('Integration Tests', () => {\r\n    test('should handle complete notification flow', async () => {\r\n      notificationManager = new NotificationManager({\r\n        emailEnabled: true,\r\n        telegramEnabled: true,\r\n        routingEnabled: true,\r\n        tradingNotificationsEnabled: true,\r\n        healthCheckInterval: 1 // 1 minute for testing\r\n      });\r\n\r\n      // Mock all initialization methods\r\n      jest.spyOn(notificationManager as any, 'initializeEmailService').mockResolvedValue(undefined);\r\n      jest.spyOn(notificationManager as any, 'initializeTelegramService').mockResolvedValue(undefined);\r\n      jest.spyOn(notificationManager as any, 'initializeNotificationRouter').mockResolvedValue(undefined);\r\n      jest.spyOn(notificationManager as any, 'initializeTradingNotifications').mockResolvedValue(undefined);\r\n      jest.spyOn(notificationManager as any, 'sendStartupNotification').mockResolvedValue(undefined);\r\n\r\n      await notificationManager.initialize();\r\n\r\n      // Test trade execution flow\r\n      const tradeData: TradeExecutionData = {\r\n        tradeId: 'integration_test_123',\r\n        symbol: 'ETH/USDT',\r\n        action: 'SELL',\r\n        quantity: 2.5,\r\n        price: 2800,\r\n        totalValue: 7000,\r\n        fees: 7.0,\r\n        pnl: -50,\r\n        balance: 9950,\r\n        strategy: 'RSI Divergence',\r\n        confidence: 0.72,\r\n        riskReward: 1.8,\r\n        timestamp: new Date(),\r\n        executionTime: 180\r\n      };\r\n\r\n      // Mock the trading notifications\r\n      const mockNotifyTradeExecution = jest.fn().mockResolvedValue(undefined);\r\n      (notificationManager as any).tradingNotifications = {\r\n        notifyTradeExecution: mockNotifyTradeExecution\r\n      };\r\n\r\n      await notificationManager.notifyTradeExecution(tradeData);\r\n\r\n      expect(mockNotifyTradeExecution).toHaveBeenCalledWith(tradeData);\r\n\r\n      // Test statistics\r\n      const statistics = notificationManager.getStatistics();\r\n      expect(statistics).toHaveProperty('services');\r\n      expect(statistics).toHaveProperty('overallHealth');\r\n    });\r\n\r\n    test('should handle error scenarios gracefully', async () => {\r\n      notificationManager = new NotificationManager();\r\n\r\n      // Mock initialization with some failures\r\n      jest.spyOn(notificationManager as any, 'initializeEmailService').mockRejectedValue(new Error('Email service failed'));\r\n      jest.spyOn(notificationManager as any, 'initializeTelegramService').mockResolvedValue(undefined);\r\n      jest.spyOn(notificationManager as any, 'initializeNotificationRouter').mockResolvedValue(undefined);\r\n      jest.spyOn(notificationManager as any, 'initializeTradingNotifications').mockResolvedValue(undefined);\r\n\r\n      // Should throw error due to email service failure\r\n      await expect(notificationManager.initialize()).rejects.toThrow('Email service failed');\r\n    });\r\n  });\r\n});\r\n\r\ndescribe('Notification System Environment Validation', () => {\r\n  test('should validate required environment variables', () => {\r\n    const requiredVars = [\r\n      'SMTP_HOST',\r\n      'SMTP_PORT',\r\n      'SMTP_USER',\r\n      'SMTP_PASS',\r\n      'SMTP_FROM_ADDRESS',\r\n      'TELEGRAM_BOT_TOKEN',\r\n      'TELEGRAM_CHAT_ID',\r\n      'NOTIFICATION_EMAIL'\r\n    ];\r\n\r\n    for (const varName of requiredVars) {\r\n      expect(process.env[varName]).toBeDefined();\r\n    }\r\n  });\r\n\r\n  test('should validate email configuration format', () => {\r\n    expect(process.env.SMTP_PORT).toMatch(/^\\d+$/);\r\n    expect(process.env.SMTP_FROM_ADDRESS).toMatch(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r\n    expect(process.env.NOTIFICATION_EMAIL).toMatch(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r\n  });\r\n\r\n  test('should validate Telegram configuration format', () => {\r\n    expect(process.env.TELEGRAM_CHAT_ID).toMatch(/^\\d+$/);\r\n    expect(process.env.TELEGRAM_AUTHORIZED_USERS).toMatch(/^\\d+(,\\d+)*$/);\r\n    expect(process.env.TELEGRAM_ADMIN_USERS).toMatch(/^\\d+(,\\d+)*$/);\r\n  });\r\n});"],"version":3}