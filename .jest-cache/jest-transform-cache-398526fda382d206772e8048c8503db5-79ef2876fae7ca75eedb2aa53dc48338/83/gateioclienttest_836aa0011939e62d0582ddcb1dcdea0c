eb2f5b776beb59918c971102644fa4b7
"use strict";
/**
 * =============================================================================
 * GATE.IO API CLIENT TESTS
 * =============================================================================
 *
 * Comprehensive test suite for the Gate.io API client with security,
 * rate limiting, circuit breaker, and error handling validation.
 *
 * @author AI Crypto Trading System
 * @version 1.0.0
 * @license PROPRIETARY
 * =============================================================================
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// Mock dependencies
jest.mock('axios');
jest.mock('@/security/credential-manager');
jest.mock('@/security/audit-service');
jest.mock('@/core/logging/logger');
const gate_io_client_1 = require("../gate-io-client");
const credential_manager_1 = require("@/security/credential-manager");
const audit_service_1 = require("@/security/audit-service");
const axios_1 = __importDefault(require("axios"));
const mockedAxios = axios_1.default;
const MockedCredentialManager = credential_manager_1.CredentialManager;
const MockedAuditService = audit_service_1.AuditService;
describe('GateIOClient', () => {
    let client;
    let mockCredentialManager;
    let mockAuditService;
    let mockAxiosInstance;
    beforeEach(() => {
        // Reset all mocks
        jest.clearAllMocks();
        // Mock axios instance
        mockAxiosInstance = {
            request: jest.fn(),
            defaults: { proxy: null },
            interceptors: {
                request: { use: jest.fn() },
                response: { use: jest.fn() }
            }
        };
        mockedAxios.create.mockReturnValue(mockAxiosInstance);
        // Mock credential manager
        mockCredentialManager = new MockedCredentialManager();
        mockCredentialManager.decryptCredential.mockResolvedValue('decrypted-value');
        // Mock audit service
        mockAuditService = new MockedAuditService();
        mockAuditService.logSecurityEvent.mockResolvedValue();
        mockAuditService.logAPIRequest.mockResolvedValue();
        mockAuditService.logAPIResponse.mockResolvedValue();
        // Set up environment variables
        process.env.GATE_IO_API_KEY = 'encrypted-api-key';
        process.env.GATE_IO_SECRET_KEY = 'encrypted-secret-key';
        process.env.GATE_IO_PASSPHRASE = 'encrypted-passphrase';
        // Create client instance
        client = new gate_io_client_1.GateIOClient();
    });
    afterEach(() => {
        // Clean up environment variables
        delete process.env.GATE_IO_API_KEY;
        delete process.env.GATE_IO_SECRET_KEY;
        delete process.env.GATE_IO_PASSPHRASE;
    });
    describe('Initialization', () => {
        it('should initialize successfully with valid credentials', async () => {
            // Mock successful health check
            mockAxiosInstance.request.mockResolvedValueOnce({
                data: { server_time: Date.now() }
            });
            mockAxiosInstance.request.mockResolvedValueOnce({
                data: [{ currency: 'USDT', available: '1000' }]
            });
            const result = await client.initialize('localhost', 8080);
            expect(result).toBe(true);
            expect(mockCredentialManager.decryptCredential).toHaveBeenCalledTimes(3);
            expect(mockAuditService.logSecurityEvent).toHaveBeenCalledWith(expect.objectContaining({
                type: 'API_CLIENT_INITIALIZED',
                severity: 'INFO'
            }));
        });
        it('should fail initialization with missing credentials', async () => {
            delete process.env.GATE_IO_API_KEY;
            const result = await client.initialize();
            expect(result).toBe(false);
            expect(mockAuditService.logSecurityEvent).toHaveBeenCalledWith(expect.objectContaining({
                type: 'API_CLIENT_INIT_FAILED',
                severity: 'ERROR'
            }));
        });
        it('should configure proxy settings correctly', async () => {
            mockAxiosInstance.request.mockResolvedValue({ data: {} });
            await client.initialize('proxy-host', 9090);
            expect(mockAxiosInstance.defaults.proxy).toEqual({
                host: 'proxy-host',
                port: 9090,
                protocol: 'http'
            });
        });
    });
    describe('Authentication', () => {
        beforeEach(async () => {
            mockAxiosInstance.request.mockResolvedValue({ data: {} });
            await client.initialize();
        });
        it('should create valid HMAC-SHA512 signature', async () => {
            const mockRequest = {
                method: 'GET',
                url: '/spot/accounts',
                requestType: gate_io_client_1.RequestType.PRIVATE
            };
            mockAxiosInstance.request.mockResolvedValueOnce({ data: [] });
            await client.makeRequest(mockRequest);
            // Verify that request interceptor was called
            expect(mockAxiosInstance.interceptors.request.use).toHaveBeenCalled();
        });
        it('should skip authentication for public endpoints', async () => {
            const mockRequest = {
                method: 'GET',
                url: '/spot/time',
                requestType: gate_io_client_1.RequestType.PUBLIC,
                skipAuth: true
            };
            mockAxiosInstance.request.mockResolvedValueOnce({
                data: { server_time: Date.now() }
            });
            await client.makeRequest(mockRequest);
            expect(mockAxiosInstance.request).toHaveBeenCalled();
        });
    });
    describe('Rate Limiting', () => {
        beforeEach(async () => {
            mockAxiosInstance.request.mockResolvedValue({ data: {} });
            await client.initialize();
        });
        it('should apply rate limiting for different request types', async () => {
            const requests = [
                { requestType: gate_io_client_1.RequestType.PUBLIC, url: '/spot/time' },
                { requestType: gate_io_client_1.RequestType.PRIVATE, url: '/spot/accounts' },
                { requestType: gate_io_client_1.RequestType.ORDERS, url: '/spot/orders' }
            ];
            mockAxiosInstance.request.mockResolvedValue({ data: {} });
            for (const request of requests) {
                await client.makeRequest(request);
            }
            expect(mockAxiosInstance.request).toHaveBeenCalledTimes(3);
        });
        it('should handle rate limit exceeded errors', async () => {
            const rateLimitError = {
                response: {
                    status: 429,
                    headers: { 'retry-after': '5' }
                },
                message: 'Rate limit exceeded'
            };
            mockAxiosInstance.request.mockRejectedValueOnce(rateLimitError);
            await expect(client.makeRequest({
                method: 'GET',
                url: '/spot/accounts'
            })).rejects.toThrow('Rate limit exceeded');
        });
    });
    describe('Circuit Breaker', () => {
        beforeEach(async () => {
            mockAxiosInstance.request.mockResolvedValue({ data: {} });
            await client.initialize();
        });
        it('should open circuit breaker after consecutive failures', async () => {
            const serverError = {
                response: { status: 500 },
                message: 'Internal server error'
            };
            // Simulate 5 consecutive failures to trigger circuit breaker
            for (let i = 0; i < 5; i++) {
                mockAxiosInstance.request.mockRejectedValueOnce(serverError);
                try {
                    await client.makeRequest({ method: 'GET', url: '/test' });
                }
                catch (error) {
                    // Expected to fail
                }
            }
            const metrics = client.getHealthMetrics();
            expect(metrics.circuitBreakerState).toBe(gate_io_client_1.CircuitBreakerState.OPEN);
        });
        it('should reject requests when circuit breaker is open', async () => {
            // Force circuit breaker to open state by simulating failures
            const serverError = {
                response: { status: 500 },
                message: 'Internal server error'
            };
            for (let i = 0; i < 5; i++) {
                mockAxiosInstance.request.mockRejectedValueOnce(serverError);
                try {
                    await client.makeRequest({ method: 'GET', url: '/test' });
                }
                catch (error) {
                    // Expected to fail
                }
            }
            // Now circuit breaker should be open and reject new requests
            await expect(client.makeRequest({
                method: 'GET',
                url: '/test'
            })).rejects.toThrow('Circuit breaker is open');
        });
        it('should close circuit breaker after successful request in half-open state', async () => {
            // This test would require more complex timing simulation
            // For now, we'll test that the circuit breaker state changes correctly
            const metrics = client.getHealthMetrics();
            expect(metrics.circuitBreakerState).toBe(gate_io_client_1.CircuitBreakerState.CLOSED);
        });
    });
    describe('Error Handling', () => {
        beforeEach(async () => {
            mockAxiosInstance.request.mockResolvedValue({ data: {} });
            await client.initialize();
        });
        it('should retry requests on transient errors', async () => {
            const networkError = new Error('Network error');
            // First two attempts fail, third succeeds
            mockAxiosInstance.request
                .mockRejectedValueOnce(networkError)
                .mockRejectedValueOnce(networkError)
                .mockResolvedValueOnce({ data: { success: true } });
            const result = await client.makeRequest({
                method: 'GET',
                url: '/spot/time'
            });
            expect(result).toEqual({ success: true });
            expect(mockAxiosInstance.request).toHaveBeenCalledTimes(3);
        });
        it('should not retry on client errors (4xx)', async () => {
            const clientError = {
                response: { status: 400 },
                message: 'Bad request'
            };
            mockAxiosInstance.request.mockRejectedValueOnce(clientError);
            await expect(client.makeRequest({
                method: 'GET',
                url: '/spot/accounts'
            })).rejects.toThrow('Bad request');
            expect(mockAxiosInstance.request).toHaveBeenCalledTimes(1);
        });
        it('should handle authentication errors', async () => {
            const authError = {
                response: { status: 401 },
                message: 'Unauthorized'
            };
            mockAxiosInstance.request.mockRejectedValueOnce(authError);
            await expect(client.makeRequest({
                method: 'GET',
                url: '/spot/accounts'
            })).rejects.toThrow('Unauthorized');
        });
    });
    describe('Health Monitoring', () => {
        beforeEach(async () => {
            mockAxiosInstance.request.mockResolvedValue({ data: {} });
            await client.initialize();
        });
        it('should perform health check successfully', async () => {
            mockAxiosInstance.request
                .mockResolvedValueOnce({ data: { server_time: Date.now() } })
                .mockResolvedValueOnce({ data: [{ currency: 'USDT' }] });
            const isHealthy = await client.performHealthCheck();
            expect(isHealthy).toBe(true);
            expect(mockAxiosInstance.request).toHaveBeenCalledTimes(2);
        });
        it('should fail health check on API errors', async () => {
            mockAxiosInstance.request.mockRejectedValueOnce(new Error('API error'));
            const isHealthy = await client.performHealthCheck();
            expect(isHealthy).toBe(false);
        });
        it('should track health metrics correctly', async () => {
            mockAxiosInstance.request.mockResolvedValueOnce({ data: {} });
            await client.makeRequest({
                method: 'GET',
                url: '/spot/time'
            });
            const metrics = client.getHealthMetrics();
            expect(metrics.totalRequests).toBeGreaterThan(0);
            expect(metrics.successfulRequests).toBeGreaterThan(0);
            expect(metrics.lastSuccessfulRequest).toBeInstanceOf(Date);
        });
    });
    describe('Security Features', () => {
        beforeEach(async () => {
            mockAxiosInstance.request.mockResolvedValue({ data: {} });
            await client.initialize();
        });
        it('should log all API requests for audit trail', async () => {
            await client.makeRequest({
                method: 'GET',
                url: '/spot/accounts'
            });
            expect(mockAuditService.logAPIRequest).toHaveBeenCalled();
            expect(mockAuditService.logAPIResponse).toHaveBeenCalled();
        });
        it('should sanitize sensitive headers in logs', async () => {
            await client.makeRequest({
                method: 'GET',
                url: '/spot/accounts'
            });
            // Verify that sensitive headers are not logged
            const logCall = mockAuditService.logAPIRequest.mock.calls[0][0];
            expect(logCall.headers).not.toHaveProperty('KEY');
            expect(logCall.headers).not.toHaveProperty('SIGN');
            expect(logCall.headers).not.toHaveProperty('Passphrase');
        });
        it('should clear credentials on shutdown', async () => {
            await client.shutdown();
            expect(mockAuditService.logSecurityEvent).toHaveBeenCalledWith(expect.objectContaining({
                type: 'API_CLIENT_SHUTDOWN',
                severity: 'INFO'
            }));
        });
    });
    describe('Request/Response Interceptors', () => {
        beforeEach(async () => {
            mockAxiosInstance.request.mockResolvedValue({ data: {} });
            await client.initialize();
        });
        it('should add authentication headers to private requests', async () => {
            await client.makeRequest({
                method: 'GET',
                url: '/spot/accounts',
                requestType: gate_io_client_1.RequestType.PRIVATE
            });
            // Verify interceptors were set up
            expect(mockAxiosInstance.interceptors.request.use).toHaveBeenCalled();
            expect(mockAxiosInstance.interceptors.response.use).toHaveBeenCalled();
        });
        it('should track response times for metrics', async () => {
            mockAxiosInstance.request.mockResolvedValueOnce({
                data: {},
                config: { metadata: { startTime: Date.now() - 100 } }
            });
            await client.makeRequest({
                method: 'GET',
                url: '/spot/time'
            });
            const metrics = client.getHealthMetrics();
            expect(metrics.averageResponseTime).toBeGreaterThanOrEqual(0);
        });
    });
    describe('Configuration Validation', () => {
        it('should validate required environment variables', async () => {
            delete process.env.GATE_IO_API_KEY;
            delete process.env.GATE_IO_SECRET_KEY;
            const newClient = new gate_io_client_1.GateIOClient();
            const result = await newClient.initialize();
            expect(result).toBe(false);
        });
        it('should handle missing passphrase gracefully', async () => {
            delete process.env.GATE_IO_PASSPHRASE;
            mockAxiosInstance.request.mockResolvedValue({ data: {} });
            const newClient = new gate_io_client_1.GateIOClient();
            const result = await newClient.initialize();
            expect(result).toBe(true);
        });
    });
    describe('Concurrent Request Handling', () => {
        beforeEach(async () => {
            mockAxiosInstance.request.mockResolvedValue({ data: {} });
            await client.initialize();
        });
        it('should handle multiple concurrent requests', async () => {
            const requests = Array(10).fill(null).map(() => client.makeRequest({
                method: 'GET',
                url: '/spot/time',
                requestType: gate_io_client_1.RequestType.PUBLIC,
                skipAuth: true
            }));
            const results = await Promise.all(requests);
            expect(results).toHaveLength(10);
            expect(mockAxiosInstance.request).toHaveBeenCalledTimes(10);
        });
        it('should apply rate limiting across concurrent requests', async () => {
            // This test would require more sophisticated rate limiter mocking
            // For now, we'll verify that requests are processed
            const requests = Array(5).fill(null).map(() => client.makeRequest({
                method: 'GET',
                url: '/spot/accounts',
                requestType: gate_io_client_1.RequestType.PRIVATE
            }));
            await Promise.all(requests);
            expect(mockAxiosInstance.request).toHaveBeenCalledTimes(5);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,