{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\api\\__tests__\\gate-io-client.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\api\\__tests__\\gate-io-client.test.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * GATE.IO API CLIENT TESTS\r\n * =============================================================================\r\n * \r\n * Comprehensive test suite for the Gate.io API client with security,\r\n * rate limiting, circuit breaker, and error handling validation.\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport { GateIOClient, RequestType, CircuitBreakerState } from '../gate-io-client';\r\nimport { CredentialManager } from '@/security/credential-manager';\r\nimport { AuditService } from '@/security/audit-service';\r\nimport axios from 'axios';\r\n\r\n// Mock dependencies\r\njest.mock('axios');\r\njest.mock('@/security/credential-manager');\r\njest.mock('@/security/audit-service');\r\njest.mock('@/core/logging/logger');\r\n\r\nconst mockedAxios = axios as jest.Mocked<typeof axios>;\r\nconst MockedCredentialManager = CredentialManager as jest.MockedClass<typeof CredentialManager>;\r\nconst MockedAuditService = AuditService as jest.MockedClass<typeof AuditService>;\r\n\r\ndescribe('GateIOClient', () => {\r\n  let client: GateIOClient;\r\n  let mockCredentialManager: jest.Mocked<CredentialManager>;\r\n  let mockAuditService: jest.Mocked<AuditService>;\r\n  let mockAxiosInstance: any;\r\n\r\n  beforeEach(() => {\r\n    // Reset all mocks\r\n    jest.clearAllMocks();\r\n    \r\n    // Mock axios instance\r\n    mockAxiosInstance = {\r\n      request: jest.fn(),\r\n      defaults: { proxy: null },\r\n      interceptors: {\r\n        request: { use: jest.fn() },\r\n        response: { use: jest.fn() }\r\n      }\r\n    };\r\n    \r\n    mockedAxios.create.mockReturnValue(mockAxiosInstance);\r\n    \r\n    // Mock credential manager\r\n    mockCredentialManager = new MockedCredentialManager() as jest.Mocked<CredentialManager>;\r\n    mockCredentialManager.decryptCredential.mockResolvedValue('decrypted-value');\r\n    \r\n    // Mock audit service\r\n    mockAuditService = new MockedAuditService() as jest.Mocked<AuditService>;\r\n    mockAuditService.logSecurityEvent.mockResolvedValue();\r\n    mockAuditService.logAPIRequest.mockResolvedValue();\r\n    mockAuditService.logAPIResponse.mockResolvedValue();\r\n    \r\n    // Set up environment variables\r\n    process.env.GATE_IO_API_KEY = 'encrypted-api-key';\r\n    process.env.GATE_IO_SECRET_KEY = 'encrypted-secret-key';\r\n    process.env.GATE_IO_PASSPHRASE = 'encrypted-passphrase';\r\n    \r\n    // Create client instance\r\n    client = new GateIOClient();\r\n  });\r\n\r\n  afterEach(() => {\r\n    // Clean up environment variables\r\n    delete process.env.GATE_IO_API_KEY;\r\n    delete process.env.GATE_IO_SECRET_KEY;\r\n    delete process.env.GATE_IO_PASSPHRASE;\r\n  });\r\n\r\n  describe('Initialization', () => {\r\n    it('should initialize successfully with valid credentials', async () => {\r\n      // Mock successful health check\r\n      mockAxiosInstance.request.mockResolvedValueOnce({\r\n        data: { server_time: Date.now() }\r\n      });\r\n      mockAxiosInstance.request.mockResolvedValueOnce({\r\n        data: [{ currency: 'USDT', available: '1000' }]\r\n      });\r\n\r\n      const result = await client.initialize('localhost', 8080);\r\n\r\n      expect(result).toBe(true);\r\n      expect(mockCredentialManager.decryptCredential).toHaveBeenCalledTimes(3);\r\n      expect(mockAuditService.logSecurityEvent).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          type: 'API_CLIENT_INITIALIZED',\r\n          severity: 'INFO'\r\n        })\r\n      );\r\n    });\r\n\r\n    it('should fail initialization with missing credentials', async () => {\r\n      delete process.env.GATE_IO_API_KEY;\r\n\r\n      const result = await client.initialize();\r\n\r\n      expect(result).toBe(false);\r\n      expect(mockAuditService.logSecurityEvent).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          type: 'API_CLIENT_INIT_FAILED',\r\n          severity: 'ERROR'\r\n        })\r\n      );\r\n    });\r\n\r\n    it('should configure proxy settings correctly', async () => {\r\n      mockAxiosInstance.request.mockResolvedValue({ data: {} });\r\n\r\n      await client.initialize('proxy-host', 9090);\r\n\r\n      expect(mockAxiosInstance.defaults.proxy).toEqual({\r\n        host: 'proxy-host',\r\n        port: 9090,\r\n        protocol: 'http'\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('Authentication', () => {\r\n    beforeEach(async () => {\r\n      mockAxiosInstance.request.mockResolvedValue({ data: {} });\r\n      await client.initialize();\r\n    });\r\n\r\n    it('should create valid HMAC-SHA512 signature', async () => {\r\n      const mockRequest = {\r\n        method: 'GET',\r\n        url: '/spot/accounts',\r\n        requestType: RequestType.PRIVATE\r\n      };\r\n\r\n      mockAxiosInstance.request.mockResolvedValueOnce({ data: [] });\r\n\r\n      await client.makeRequest(mockRequest);\r\n\r\n      // Verify that request interceptor was called\r\n      expect(mockAxiosInstance.interceptors.request.use).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should skip authentication for public endpoints', async () => {\r\n      const mockRequest = {\r\n        method: 'GET',\r\n        url: '/spot/time',\r\n        requestType: RequestType.PUBLIC,\r\n        skipAuth: true\r\n      };\r\n\r\n      mockAxiosInstance.request.mockResolvedValueOnce({\r\n        data: { server_time: Date.now() }\r\n      });\r\n\r\n      await client.makeRequest(mockRequest);\r\n\r\n      expect(mockAxiosInstance.request).toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('Rate Limiting', () => {\r\n    beforeEach(async () => {\r\n      mockAxiosInstance.request.mockResolvedValue({ data: {} });\r\n      await client.initialize();\r\n    });\r\n\r\n    it('should apply rate limiting for different request types', async () => {\r\n      const requests = [\r\n        { requestType: RequestType.PUBLIC, url: '/spot/time' },\r\n        { requestType: RequestType.PRIVATE, url: '/spot/accounts' },\r\n        { requestType: RequestType.ORDERS, url: '/spot/orders' }\r\n      ];\r\n\r\n      mockAxiosInstance.request.mockResolvedValue({ data: {} });\r\n\r\n      for (const request of requests) {\r\n        await client.makeRequest(request);\r\n      }\r\n\r\n      expect(mockAxiosInstance.request).toHaveBeenCalledTimes(3);\r\n    });\r\n\r\n    it('should handle rate limit exceeded errors', async () => {\r\n      const rateLimitError = {\r\n        response: {\r\n          status: 429,\r\n          headers: { 'retry-after': '5' }\r\n        },\r\n        message: 'Rate limit exceeded'\r\n      };\r\n\r\n      mockAxiosInstance.request.mockRejectedValueOnce(rateLimitError);\r\n\r\n      await expect(client.makeRequest({\r\n        method: 'GET',\r\n        url: '/spot/accounts'\r\n      })).rejects.toThrow('Rate limit exceeded');\r\n    });\r\n  });\r\n\r\n  describe('Circuit Breaker', () => {\r\n    beforeEach(async () => {\r\n      mockAxiosInstance.request.mockResolvedValue({ data: {} });\r\n      await client.initialize();\r\n    });\r\n\r\n    it('should open circuit breaker after consecutive failures', async () => {\r\n      const serverError = {\r\n        response: { status: 500 },\r\n        message: 'Internal server error'\r\n      };\r\n\r\n      // Simulate 5 consecutive failures to trigger circuit breaker\r\n      for (let i = 0; i < 5; i++) {\r\n        mockAxiosInstance.request.mockRejectedValueOnce(serverError);\r\n        try {\r\n          await client.makeRequest({ method: 'GET', url: '/test' });\r\n        } catch (error) {\r\n          // Expected to fail\r\n        }\r\n      }\r\n\r\n      const metrics = client.getHealthMetrics();\r\n      expect(metrics.circuitBreakerState).toBe(CircuitBreakerState.OPEN);\r\n    });\r\n\r\n    it('should reject requests when circuit breaker is open', async () => {\r\n      // Force circuit breaker to open state by simulating failures\r\n      const serverError = {\r\n        response: { status: 500 },\r\n        message: 'Internal server error'\r\n      };\r\n\r\n      for (let i = 0; i < 5; i++) {\r\n        mockAxiosInstance.request.mockRejectedValueOnce(serverError);\r\n        try {\r\n          await client.makeRequest({ method: 'GET', url: '/test' });\r\n        } catch (error) {\r\n          // Expected to fail\r\n        }\r\n      }\r\n\r\n      // Now circuit breaker should be open and reject new requests\r\n      await expect(client.makeRequest({\r\n        method: 'GET',\r\n        url: '/test'\r\n      })).rejects.toThrow('Circuit breaker is open');\r\n    });\r\n\r\n    it('should close circuit breaker after successful request in half-open state', async () => {\r\n      // This test would require more complex timing simulation\r\n      // For now, we'll test that the circuit breaker state changes correctly\r\n      const metrics = client.getHealthMetrics();\r\n      expect(metrics.circuitBreakerState).toBe(CircuitBreakerState.CLOSED);\r\n    });\r\n  });\r\n\r\n  describe('Error Handling', () => {\r\n    beforeEach(async () => {\r\n      mockAxiosInstance.request.mockResolvedValue({ data: {} });\r\n      await client.initialize();\r\n    });\r\n\r\n    it('should retry requests on transient errors', async () => {\r\n      const networkError = new Error('Network error');\r\n      \r\n      // First two attempts fail, third succeeds\r\n      mockAxiosInstance.request\r\n        .mockRejectedValueOnce(networkError)\r\n        .mockRejectedValueOnce(networkError)\r\n        .mockResolvedValueOnce({ data: { success: true } });\r\n\r\n      const result = await client.makeRequest({\r\n        method: 'GET',\r\n        url: '/spot/time'\r\n      });\r\n\r\n      expect(result).toEqual({ success: true });\r\n      expect(mockAxiosInstance.request).toHaveBeenCalledTimes(3);\r\n    });\r\n\r\n    it('should not retry on client errors (4xx)', async () => {\r\n      const clientError = {\r\n        response: { status: 400 },\r\n        message: 'Bad request'\r\n      };\r\n\r\n      mockAxiosInstance.request.mockRejectedValueOnce(clientError);\r\n\r\n      await expect(client.makeRequest({\r\n        method: 'GET',\r\n        url: '/spot/accounts'\r\n      })).rejects.toThrow('Bad request');\r\n\r\n      expect(mockAxiosInstance.request).toHaveBeenCalledTimes(1);\r\n    });\r\n\r\n    it('should handle authentication errors', async () => {\r\n      const authError = {\r\n        response: { status: 401 },\r\n        message: 'Unauthorized'\r\n      };\r\n\r\n      mockAxiosInstance.request.mockRejectedValueOnce(authError);\r\n\r\n      await expect(client.makeRequest({\r\n        method: 'GET',\r\n        url: '/spot/accounts'\r\n      })).rejects.toThrow('Unauthorized');\r\n    });\r\n  });\r\n\r\n  describe('Health Monitoring', () => {\r\n    beforeEach(async () => {\r\n      mockAxiosInstance.request.mockResolvedValue({ data: {} });\r\n      await client.initialize();\r\n    });\r\n\r\n    it('should perform health check successfully', async () => {\r\n      mockAxiosInstance.request\r\n        .mockResolvedValueOnce({ data: { server_time: Date.now() } })\r\n        .mockResolvedValueOnce({ data: [{ currency: 'USDT' }] });\r\n\r\n      const isHealthy = await client.performHealthCheck();\r\n\r\n      expect(isHealthy).toBe(true);\r\n      expect(mockAxiosInstance.request).toHaveBeenCalledTimes(2);\r\n    });\r\n\r\n    it('should fail health check on API errors', async () => {\r\n      mockAxiosInstance.request.mockRejectedValueOnce(new Error('API error'));\r\n\r\n      const isHealthy = await client.performHealthCheck();\r\n\r\n      expect(isHealthy).toBe(false);\r\n    });\r\n\r\n    it('should track health metrics correctly', async () => {\r\n      mockAxiosInstance.request.mockResolvedValueOnce({ data: {} });\r\n\r\n      await client.makeRequest({\r\n        method: 'GET',\r\n        url: '/spot/time'\r\n      });\r\n\r\n      const metrics = client.getHealthMetrics();\r\n      expect(metrics.totalRequests).toBeGreaterThan(0);\r\n      expect(metrics.successfulRequests).toBeGreaterThan(0);\r\n      expect(metrics.lastSuccessfulRequest).toBeInstanceOf(Date);\r\n    });\r\n  });\r\n\r\n  describe('Security Features', () => {\r\n    beforeEach(async () => {\r\n      mockAxiosInstance.request.mockResolvedValue({ data: {} });\r\n      await client.initialize();\r\n    });\r\n\r\n    it('should log all API requests for audit trail', async () => {\r\n      await client.makeRequest({\r\n        method: 'GET',\r\n        url: '/spot/accounts'\r\n      });\r\n\r\n      expect(mockAuditService.logAPIRequest).toHaveBeenCalled();\r\n      expect(mockAuditService.logAPIResponse).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should sanitize sensitive headers in logs', async () => {\r\n      await client.makeRequest({\r\n        method: 'GET',\r\n        url: '/spot/accounts'\r\n      });\r\n\r\n      // Verify that sensitive headers are not logged\r\n      const logCall = mockAuditService.logAPIRequest.mock.calls[0][0];\r\n      expect(logCall.headers).not.toHaveProperty('KEY');\r\n      expect(logCall.headers).not.toHaveProperty('SIGN');\r\n      expect(logCall.headers).not.toHaveProperty('Passphrase');\r\n    });\r\n\r\n    it('should clear credentials on shutdown', async () => {\r\n      await client.shutdown();\r\n\r\n      expect(mockAuditService.logSecurityEvent).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          type: 'API_CLIENT_SHUTDOWN',\r\n          severity: 'INFO'\r\n        })\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('Request/Response Interceptors', () => {\r\n    beforeEach(async () => {\r\n      mockAxiosInstance.request.mockResolvedValue({ data: {} });\r\n      await client.initialize();\r\n    });\r\n\r\n    it('should add authentication headers to private requests', async () => {\r\n      await client.makeRequest({\r\n        method: 'GET',\r\n        url: '/spot/accounts',\r\n        requestType: RequestType.PRIVATE\r\n      });\r\n\r\n      // Verify interceptors were set up\r\n      expect(mockAxiosInstance.interceptors.request.use).toHaveBeenCalled();\r\n      expect(mockAxiosInstance.interceptors.response.use).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should track response times for metrics', async () => {\r\n      mockAxiosInstance.request.mockResolvedValueOnce({\r\n        data: {},\r\n        config: { metadata: { startTime: Date.now() - 100 } }\r\n      });\r\n\r\n      await client.makeRequest({\r\n        method: 'GET',\r\n        url: '/spot/time'\r\n      });\r\n\r\n      const metrics = client.getHealthMetrics();\r\n      expect(metrics.averageResponseTime).toBeGreaterThanOrEqual(0);\r\n    });\r\n  });\r\n\r\n  describe('Configuration Validation', () => {\r\n    it('should validate required environment variables', async () => {\r\n      delete process.env.GATE_IO_API_KEY;\r\n      delete process.env.GATE_IO_SECRET_KEY;\r\n\r\n      const newClient = new GateIOClient();\r\n      const result = await newClient.initialize();\r\n\r\n      expect(result).toBe(false);\r\n    });\r\n\r\n    it('should handle missing passphrase gracefully', async () => {\r\n      delete process.env.GATE_IO_PASSPHRASE;\r\n      mockAxiosInstance.request.mockResolvedValue({ data: {} });\r\n\r\n      const newClient = new GateIOClient();\r\n      const result = await newClient.initialize();\r\n\r\n      expect(result).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('Concurrent Request Handling', () => {\r\n    beforeEach(async () => {\r\n      mockAxiosInstance.request.mockResolvedValue({ data: {} });\r\n      await client.initialize();\r\n    });\r\n\r\n    it('should handle multiple concurrent requests', async () => {\r\n      const requests = Array(10).fill(null).map(() => \r\n        client.makeRequest({\r\n          method: 'GET',\r\n          url: '/spot/time',\r\n          requestType: RequestType.PUBLIC,\r\n          skipAuth: true\r\n        })\r\n      );\r\n\r\n      const results = await Promise.all(requests);\r\n      expect(results).toHaveLength(10);\r\n      expect(mockAxiosInstance.request).toHaveBeenCalledTimes(10);\r\n    });\r\n\r\n    it('should apply rate limiting across concurrent requests', async () => {\r\n      // This test would require more sophisticated rate limiter mocking\r\n      // For now, we'll verify that requests are processed\r\n      const requests = Array(5).fill(null).map(() => \r\n        client.makeRequest({\r\n          method: 'GET',\r\n          url: '/spot/accounts',\r\n          requestType: RequestType.PRIVATE\r\n        })\r\n      );\r\n\r\n      await Promise.all(requests);\r\n      expect(mockAxiosInstance.request).toHaveBeenCalledTimes(5);\r\n    });\r\n  });\r\n});"],"version":3}