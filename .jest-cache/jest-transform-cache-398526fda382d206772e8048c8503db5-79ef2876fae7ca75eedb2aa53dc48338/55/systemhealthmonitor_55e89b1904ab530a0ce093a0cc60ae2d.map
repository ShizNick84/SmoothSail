{"version":3,"names":["cov_7n4m2jwp1","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","events_1","require","logger_1","communication_bus_1","SystemHealthStatus","exports","SystemHealthMonitor","EventEmitter","config","componentTrackers","Map","systemMetrics","monitoringInterval","metricsInterval","isMonitoring","overallHealthStatus","HEALTHY","constructor","setupEventHandlers","startMonitoring","logger","warn","info","setInterval","performHealthChecks","checkInterval","collectSystemMetrics","communicationBus","publish","timestamp","Date","priority","MessagePriority","HIGH","source","stopMonitoring","clearInterval","finalStatus","registerComponent","component","id","tracker","currentHealth","componentId","status","score","responseTime","details","issues","recommendations","healthHistory","failureCount","successCount","trend","set","unregisterComponent","has","delete","getSystemHealthStatus","componentCount","size","healthyComponents","totalScore","values","overallScore","overallStatus","unhealthyComponents","lastUpdate","getComponentHealth","get","getComponentHealthHistory","limit","slice","forceHealthCheck","Error","performComponentHealthCheck","getHealthReport","components","criticalIssues","Set","push","issue","severity","recommendation","add","systemStatus","Array","from","healthCheckPromises","then","catch","error","Promise","allSettled","updateOverallHealthStatus","startTime","now","healthCheckPromise","healthCheck","timeoutPromise","_","reject","setTimeout","checkTimeout","componentHealth","race","result","healthy","CRITICAL","convertToHealthIssues","determineHealthStatus","updateComponentTracker","handleUnhealthyComponent","OFFLINE","message","category","description","code","affectedMetrics","suggestedActions","length","historyRetention","calculateHealthTrend","emit","recent","scores","map","h","firstScore","lastScore","enableAlerts","autoRecovery","failureThreshold","attemptComponentRecovery","lastRecoveryAttempt","timeSinceLastRecovery","getTime","recoveryCooldown","reason","cpu","usage","Math","random","temperature","loadAverage","processes","floor","memory","total","used","free","swapUsed","disk","ioRead","ioWrite","network","bytesIn","bytesOut","packetsIn","packetsOut","errors","latency","application","uptime","process","memoryUsage","heapUsed","activeConnections","requestsPerSecond","errorRate","checkMetricAlerts","alerts","alertThresholds","toFixed","metrics","componentStatuses","some","DEGRADED","WARNING","hasCriticalIssues","hasHighIssues","on","health","debug","defaultHealthMonitorConfig","recoveryThreshold"],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\core\\orchestration\\system-health-monitor.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * AI CRYPTO TRADING AGENT - SYSTEM HEALTH MONITOR\r\n * =============================================================================\r\n * \r\n * This module provides comprehensive system health monitoring and status\r\n * reporting for all components in the trading system. It tracks component\r\n * health, system metrics, and provides early warning for potential issues.\r\n * \r\n * CRITICAL SYSTEM NOTICE:\r\n * System health monitoring is essential for maintaining 24/7 trading\r\n * operations. Early detection of issues prevents financial losses and\r\n * ensures system reliability.\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport { EventEmitter } from 'events';\r\nimport { logger } from '@/core/logging/logger';\r\nimport { auditService } from '@/security/audit-service';\r\nimport { SystemComponent, ComponentHealth, ComponentStatus } from './system-orchestrator';\r\nimport { communicationBus, MessagePriority } from './communication-bus';\r\n\r\n/**\r\n * System health status enumeration\r\n */\r\nexport enum SystemHealthStatus {\r\n  HEALTHY = 'HEALTHY',\r\n  WARNING = 'WARNING',\r\n  CRITICAL = 'CRITICAL',\r\n  DEGRADED = 'DEGRADED',\r\n  OFFLINE = 'OFFLINE'\r\n}\r\n\r\n/**\r\n * Health check result interface\r\n */\r\nexport interface HealthCheckResult {\r\n  /** Component identifier */\r\n  componentId: string;\r\n  /** Health status */\r\n  status: SystemHealthStatus;\r\n  /** Health score (0-100) */\r\n  score: number;\r\n  /** Check timestamp */\r\n  timestamp: Date;\r\n  /** Response time in milliseconds */\r\n  responseTime: number;\r\n  /** Health details */\r\n  details: Record<string, any>;\r\n  /** Issues found */\r\n  issues: HealthIssue[];\r\n  /** Recommendations */\r\n  recommendations: string[];\r\n}\r\n\r\n/**\r\n * Health issue interface\r\n */\r\nexport interface HealthIssue {\r\n  /** Issue severity */\r\n  severity: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';\r\n  /** Issue category */\r\n  category: string;\r\n  /** Issue description */\r\n  description: string;\r\n  /** Issue code */\r\n  code: string;\r\n  /** Affected metrics */\r\n  affectedMetrics: string[];\r\n  /** Suggested actions */\r\n  suggestedActions: string[];\r\n  /** Issue timestamp */\r\n  timestamp: Date;\r\n}\r\n\r\n/**\r\n * System metrics interface\r\n */\r\nexport interface SystemMetrics {\r\n  /** CPU metrics */\r\n  cpu: {\r\n    usage: number;\r\n    temperature: number;\r\n    loadAverage: number[];\r\n    processes: number;\r\n  };\r\n  /** Memory metrics */\r\n  memory: {\r\n    total: number;\r\n    used: number;\r\n    free: number;\r\n    usage: number;\r\n    swapUsed: number;\r\n  };\r\n  /** Disk metrics */\r\n  disk: {\r\n    total: number;\r\n    used: number;\r\n    free: number;\r\n    usage: number;\r\n    ioRead: number;\r\n    ioWrite: number;\r\n  };\r\n  /** Network metrics */\r\n  network: {\r\n    bytesIn: number;\r\n    bytesOut: number;\r\n    packetsIn: number;\r\n    packetsOut: number;\r\n    errors: number;\r\n    latency: number;\r\n  };\r\n  /** Application metrics */\r\n  application: {\r\n    uptime: number;\r\n    memoryUsage: number;\r\n    activeConnections: number;\r\n    requestsPerSecond: number;\r\n    errorRate: number;\r\n  };\r\n}\r\n\r\n/**\r\n * Health monitoring configuration\r\n */\r\nexport interface HealthMonitorConfig {\r\n  /** Health check interval in milliseconds */\r\n  checkInterval: number;\r\n  /** Health check timeout in milliseconds */\r\n  checkTimeout: number;\r\n  /** Number of failed checks before marking as unhealthy */\r\n  failureThreshold: number;\r\n  /** Number of successful checks to recover */\r\n  recoveryThreshold: number;\r\n  /** Enable automatic recovery attempts */\r\n  autoRecovery: boolean;\r\n  /** Recovery cooldown period in milliseconds */\r\n  recoveryCooldown: number;\r\n  /** Health history retention count */\r\n  historyRetention: number;\r\n  /** Enable health alerts */\r\n  enableAlerts: boolean;\r\n  /** Alert thresholds */\r\n  alertThresholds: {\r\n    cpu: number;\r\n    memory: number;\r\n    disk: number;\r\n    responseTime: number;\r\n  };\r\n}\r\n\r\n/**\r\n * Component health tracker\r\n */\r\ninterface ComponentHealthTracker {\r\n  /** Component reference */\r\n  component: SystemComponent;\r\n  /** Current health status */\r\n  currentHealth: HealthCheckResult;\r\n  /** Health history */\r\n  healthHistory: HealthCheckResult[];\r\n  /** Consecutive failure count */\r\n  failureCount: number;\r\n  /** Consecutive success count */\r\n  successCount: number;\r\n  /** Last recovery attempt */\r\n  lastRecoveryAttempt?: Date;\r\n  /** Health trend */\r\n  trend: 'IMPROVING' | 'STABLE' | 'DEGRADING';\r\n}\r\n\r\n/**\r\n * System health monitor class\r\n */\r\nexport class SystemHealthMonitor extends EventEmitter {\r\n  private componentTrackers: Map<string, ComponentHealthTracker> = new Map();\r\n  private systemMetrics: SystemMetrics | null = null;\r\n  private monitoringInterval?: NodeJS.Timeout;\r\n  private metricsInterval?: NodeJS.Timeout;\r\n  private isMonitoring: boolean = false;\r\n  private overallHealthStatus: SystemHealthStatus = SystemHealthStatus.HEALTHY;\r\n\r\n  constructor(private config: HealthMonitorConfig) {\r\n    super();\r\n    this.setupEventHandlers();\r\n  }\r\n\r\n  /**\r\n   * Start health monitoring\r\n   */\r\n  public async startMonitoring(): Promise<void> {\r\n    if (this.isMonitoring) {\r\n      logger.warn('⚠️ Health monitoring already running');\r\n      return;\r\n    }\r\n\r\n    logger.info('🏥 Starting system health monitoring...');\r\n\r\n    this.isMonitoring = true;\r\n\r\n    // Start component health checks\r\n    this.monitoringInterval = setInterval(async () => {\r\n      await this.performHealthChecks();\r\n    }, this.config.checkInterval);\r\n\r\n    // Start system metrics collection\r\n    this.metricsInterval = setInterval(async () => {\r\n      await this.collectSystemMetrics();\r\n    }, 5000); // Collect metrics every 5 seconds\r\n\r\n    // Initial health check\r\n    await this.performHealthChecks();\r\n    await this.collectSystemMetrics();\r\n\r\n    // Send startup notification\r\n    await communicationBus.publish('system.health.monitoring.started', {\r\n      timestamp: new Date(),\r\n      config: this.config\r\n    }, {\r\n      priority: MessagePriority.HIGH,\r\n      source: 'system-health-monitor'\r\n    });\r\n\r\n    logger.info('✅ System health monitoring started');\r\n  }\r\n\r\n  /**\r\n   * Stop health monitoring\r\n   */\r\n  public async stopMonitoring(): Promise<void> {\r\n    if (!this.isMonitoring) {\r\n      return;\r\n    }\r\n\r\n    logger.info('🛑 Stopping system health monitoring...');\r\n\r\n    this.isMonitoring = false;\r\n\r\n    // Clear intervals\r\n    if (this.monitoringInterval) {\r\n      clearInterval(this.monitoringInterval);\r\n      this.monitoringInterval = undefined;\r\n    }\r\n\r\n    if (this.metricsInterval) {\r\n      clearInterval(this.metricsInterval);\r\n      this.metricsInterval = undefined;\r\n    }\r\n\r\n    // Send shutdown notification\r\n    await communicationBus.publish('system.health.monitoring.stopped', {\r\n      timestamp: new Date(),\r\n      finalStatus: this.overallHealthStatus\r\n    }, {\r\n      priority: MessagePriority.HIGH,\r\n      source: 'system-health-monitor'\r\n    });\r\n\r\n    logger.info('✅ System health monitoring stopped');\r\n  }\r\n\r\n  /**\r\n   * Register component for health monitoring\r\n   * \r\n   * @param component System component to monitor\r\n   */\r\n  public registerComponent(component: SystemComponent): void {\r\n    logger.info(`📋 Registering component for health monitoring: ${component.id}`);\r\n\r\n    const tracker: ComponentHealthTracker = {\r\n      component,\r\n      currentHealth: {\r\n        componentId: component.id,\r\n        status: SystemHealthStatus.HEALTHY,\r\n        score: 100,\r\n        timestamp: new Date(),\r\n        responseTime: 0,\r\n        details: {},\r\n        issues: [],\r\n        recommendations: []\r\n      },\r\n      healthHistory: [],\r\n      failureCount: 0,\r\n      successCount: 0,\r\n      trend: 'STABLE'\r\n    };\r\n\r\n    this.componentTrackers.set(component.id, tracker);\r\n\r\n    logger.info(`✅ Component registered for health monitoring: ${component.id}`);\r\n  }\r\n\r\n  /**\r\n   * Unregister component from health monitoring\r\n   * \r\n   * @param componentId Component identifier\r\n   */\r\n  public unregisterComponent(componentId: string): void {\r\n    if (this.componentTrackers.has(componentId)) {\r\n      this.componentTrackers.delete(componentId);\r\n      logger.info(`📤 Component unregistered from health monitoring: ${componentId}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get current system health status\r\n   * \r\n   * @returns System health status\r\n   */\r\n  public getSystemHealthStatus(): {\r\n    overallStatus: SystemHealthStatus;\r\n    overallScore: number;\r\n    componentCount: number;\r\n    healthyComponents: number;\r\n    unhealthyComponents: number;\r\n    systemMetrics: SystemMetrics | null;\r\n    lastUpdate: Date;\r\n  } {\r\n    const componentCount = this.componentTrackers.size;\r\n    let healthyComponents = 0;\r\n    let totalScore = 0;\r\n\r\n    for (const tracker of this.componentTrackers.values()) {\r\n      if (tracker.currentHealth.status === SystemHealthStatus.HEALTHY) {\r\n        healthyComponents++;\r\n      }\r\n      totalScore += tracker.currentHealth.score;\r\n    }\r\n\r\n    const overallScore = componentCount > 0 ? totalScore / componentCount : 100;\r\n\r\n    return {\r\n      overallStatus: this.overallHealthStatus,\r\n      overallScore,\r\n      componentCount,\r\n      healthyComponents,\r\n      unhealthyComponents: componentCount - healthyComponents,\r\n      systemMetrics: this.systemMetrics,\r\n      lastUpdate: new Date()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get component health status\r\n   * \r\n   * @param componentId Component identifier\r\n   * @returns Component health status or undefined\r\n   */\r\n  public getComponentHealth(componentId: string): HealthCheckResult | undefined {\r\n    const tracker = this.componentTrackers.get(componentId);\r\n    return tracker?.currentHealth;\r\n  }\r\n\r\n  /**\r\n   * Get component health history\r\n   * \r\n   * @param componentId Component identifier\r\n   * @param limit Maximum number of history entries\r\n   * @returns Array of health check results\r\n   */\r\n  public getComponentHealthHistory(componentId: string, limit: number = 100): HealthCheckResult[] {\r\n    const tracker = this.componentTrackers.get(componentId);\r\n    if (!tracker) {\r\n      return [];\r\n    }\r\n\r\n    return tracker.healthHistory.slice(-limit);\r\n  }\r\n\r\n  /**\r\n   * Force health check for specific component\r\n   * \r\n   * @param componentId Component identifier\r\n   * @returns Promise<HealthCheckResult>\r\n   */\r\n  public async forceHealthCheck(componentId: string): Promise<HealthCheckResult> {\r\n    const tracker = this.componentTrackers.get(componentId);\r\n    if (!tracker) {\r\n      throw new Error(`Component not registered: ${componentId}`);\r\n    }\r\n\r\n    return await this.performComponentHealthCheck(tracker);\r\n  }\r\n\r\n  /**\r\n   * Get system health report\r\n   * \r\n   * @returns Comprehensive health report\r\n   */\r\n  public getHealthReport(): {\r\n    timestamp: Date;\r\n    overallStatus: SystemHealthStatus;\r\n    overallScore: number;\r\n    systemMetrics: SystemMetrics | null;\r\n    components: HealthCheckResult[];\r\n    criticalIssues: HealthIssue[];\r\n    recommendations: string[];\r\n  } {\r\n    const components: HealthCheckResult[] = [];\r\n    const criticalIssues: HealthIssue[] = [];\r\n    const recommendations: Set<string> = new Set();\r\n\r\n    for (const tracker of this.componentTrackers.values()) {\r\n      components.push(tracker.currentHealth);\r\n\r\n      // Collect critical issues\r\n      for (const issue of tracker.currentHealth.issues) {\r\n        if (issue.severity === 'CRITICAL' || issue.severity === 'HIGH') {\r\n          criticalIssues.push(issue);\r\n        }\r\n      }\r\n\r\n      // Collect recommendations\r\n      for (const recommendation of tracker.currentHealth.recommendations) {\r\n        recommendations.add(recommendation);\r\n      }\r\n    }\r\n\r\n    const systemStatus = this.getSystemHealthStatus();\r\n\r\n    return {\r\n      timestamp: new Date(),\r\n      overallStatus: systemStatus.overallStatus,\r\n      overallScore: systemStatus.overallScore,\r\n      systemMetrics: this.systemMetrics,\r\n      components,\r\n      criticalIssues,\r\n      recommendations: Array.from(recommendations)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Perform health checks on all registered components\r\n   */\r\n  private async performHealthChecks(): Promise<void> {\r\n    if (!this.isMonitoring) {\r\n      return;\r\n    }\r\n\r\n    const healthCheckPromises: Promise<void>[] = [];\r\n\r\n    for (const tracker of this.componentTrackers.values()) {\r\n      healthCheckPromises.push(\r\n        this.performComponentHealthCheck(tracker)\r\n          .then(() => {}) // Convert to void\r\n          .catch(error => {\r\n            logger.error(`❌ Health check failed for ${tracker.component.id}:`, error);\r\n          })\r\n      );\r\n    }\r\n\r\n    await Promise.allSettled(healthCheckPromises);\r\n\r\n    // Update overall system health\r\n    this.updateOverallHealthStatus();\r\n  }\r\n\r\n  /**\r\n   * Perform health check for specific component\r\n   * \r\n   * @param tracker Component health tracker\r\n   * @returns Promise<HealthCheckResult>\r\n   */\r\n  private async performComponentHealthCheck(tracker: ComponentHealthTracker): Promise<HealthCheckResult> {\r\n    const startTime = Date.now();\r\n    \r\n    try {\r\n      // Perform health check with timeout\r\n      const healthCheckPromise = tracker.component.healthCheck();\r\n      const timeoutPromise = new Promise<ComponentHealth>((_, reject) => {\r\n        setTimeout(() => {\r\n          reject(new Error('Health check timeout'));\r\n        }, this.config.checkTimeout);\r\n      });\r\n\r\n      const componentHealth = await Promise.race([healthCheckPromise, timeoutPromise]);\r\n      const responseTime = Date.now() - startTime;\r\n\r\n      // Convert to health check result\r\n      const result: HealthCheckResult = {\r\n        componentId: tracker.component.id,\r\n        status: componentHealth.healthy ? SystemHealthStatus.HEALTHY : SystemHealthStatus.CRITICAL,\r\n        score: componentHealth.score,\r\n        timestamp: new Date(),\r\n        responseTime,\r\n        details: componentHealth.details,\r\n        issues: this.convertToHealthIssues(componentHealth.issues),\r\n        recommendations: componentHealth.recommendations\r\n      };\r\n\r\n      // Determine status based on score and issues\r\n      result.status = this.determineHealthStatus(result);\r\n\r\n      // Update tracker\r\n      this.updateComponentTracker(tracker, result);\r\n\r\n      // Handle unhealthy components\r\n      if (result.status !== SystemHealthStatus.HEALTHY) {\r\n        await this.handleUnhealthyComponent(tracker, result);\r\n      }\r\n\r\n      return result;\r\n\r\n    } catch (error) {\r\n      const responseTime = Date.now() - startTime;\r\n      \r\n      const result: HealthCheckResult = {\r\n        componentId: tracker.component.id,\r\n        status: SystemHealthStatus.OFFLINE,\r\n        score: 0,\r\n        timestamp: new Date(),\r\n        responseTime,\r\n        details: { error: error instanceof Error ? error.message : 'Unknown error' },\r\n        issues: [{\r\n          severity: 'CRITICAL',\r\n          category: 'CONNECTIVITY',\r\n          description: 'Component health check failed',\r\n          code: 'HEALTH_CHECK_FAILED',\r\n          affectedMetrics: ['availability'],\r\n          suggestedActions: ['Restart component', 'Check component logs'],\r\n          timestamp: new Date()\r\n        }],\r\n        recommendations: ['Investigate component failure', 'Check system resources']\r\n      };\r\n\r\n      // Update tracker\r\n      this.updateComponentTracker(tracker, result);\r\n\r\n      // Handle failed health check\r\n      await this.handleUnhealthyComponent(tracker, result);\r\n\r\n      return result;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update component tracker with new health result\r\n   * \r\n   * @param tracker Component health tracker\r\n   * @param result Health check result\r\n   */\r\n  private updateComponentTracker(tracker: ComponentHealthTracker, result: HealthCheckResult): void {\r\n    // Update current health\r\n    tracker.currentHealth = result;\r\n\r\n    // Add to history\r\n    tracker.healthHistory.push(result);\r\n\r\n    // Maintain history size\r\n    if (tracker.healthHistory.length > this.config.historyRetention) {\r\n      tracker.healthHistory = tracker.healthHistory.slice(-this.config.historyRetention);\r\n    }\r\n\r\n    // Update failure/success counts\r\n    if (result.status === SystemHealthStatus.HEALTHY) {\r\n      tracker.successCount++;\r\n      tracker.failureCount = 0;\r\n    } else {\r\n      tracker.failureCount++;\r\n      tracker.successCount = 0;\r\n    }\r\n\r\n    // Update trend\r\n    tracker.trend = this.calculateHealthTrend(tracker);\r\n\r\n    // Emit health change event\r\n    this.emit('component:health-changed', tracker.component.id, result);\r\n  }\r\n\r\n  /**\r\n   * Calculate health trend for component\r\n   * \r\n   * @param tracker Component health tracker\r\n   * @returns Health trend\r\n   */\r\n  private calculateHealthTrend(tracker: ComponentHealthTracker): 'IMPROVING' | 'STABLE' | 'DEGRADING' {\r\n    if (tracker.healthHistory.length < 3) {\r\n      return 'STABLE';\r\n    }\r\n\r\n    const recent = tracker.healthHistory.slice(-3);\r\n    const scores = recent.map(h => h.score);\r\n\r\n    const firstScore = scores[0];\r\n    const lastScore = scores[scores.length - 1];\r\n\r\n    if (lastScore > firstScore + 10) {\r\n      return 'IMPROVING';\r\n    } else if (lastScore < firstScore - 10) {\r\n      return 'DEGRADING';\r\n    } else {\r\n      return 'STABLE';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle unhealthy component\r\n   * \r\n   * @param tracker Component health tracker\r\n   * @param result Health check result\r\n   */\r\n  private async handleUnhealthyComponent(\r\n    tracker: ComponentHealthTracker,\r\n    result: HealthCheckResult\r\n  ): Promise<void> {\r\n    // Send health alert\r\n    if (this.config.enableAlerts) {\r\n      await communicationBus.publish('system.health.component.unhealthy', {\r\n        componentId: tracker.component.id,\r\n        status: result.status,\r\n        score: result.score,\r\n        issues: result.issues,\r\n        recommendations: result.recommendations,\r\n        timestamp: result.timestamp\r\n      }, {\r\n        priority: result.status === SystemHealthStatus.CRITICAL ? MessagePriority.CRITICAL : MessagePriority.HIGH,\r\n        source: 'system-health-monitor'\r\n      });\r\n    }\r\n\r\n    // Attempt recovery if enabled\r\n    if (this.config.autoRecovery && tracker.failureCount >= this.config.failureThreshold) {\r\n      await this.attemptComponentRecovery(tracker);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Attempt to recover unhealthy component\r\n   * \r\n   * @param tracker Component health tracker\r\n   */\r\n  private async attemptComponentRecovery(tracker: ComponentHealthTracker): Promise<void> {\r\n    const now = new Date();\r\n    \r\n    // Check cooldown period\r\n    if (tracker.lastRecoveryAttempt) {\r\n      const timeSinceLastRecovery = now.getTime() - tracker.lastRecoveryAttempt.getTime();\r\n      if (timeSinceLastRecovery < this.config.recoveryCooldown) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    logger.warn(`🔄 Attempting recovery for unhealthy component: ${tracker.component.id}`);\r\n    tracker.lastRecoveryAttempt = now;\r\n\r\n    try {\r\n      // Send recovery request\r\n      await communicationBus.publish('system.component.recovery.request', {\r\n        componentId: tracker.component.id,\r\n        reason: 'HEALTH_CHECK_FAILURE',\r\n        timestamp: now\r\n      }, {\r\n        priority: MessagePriority.HIGH,\r\n        source: 'system-health-monitor'\r\n      });\r\n\r\n      logger.info(`✅ Recovery request sent for component: ${tracker.component.id}`);\r\n\r\n    } catch (error) {\r\n      logger.error(`❌ Failed to send recovery request for ${tracker.component.id}:`, error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Collect system metrics\r\n   */\r\n  private async collectSystemMetrics(): Promise<void> {\r\n    try {\r\n      // This would integrate with system monitoring tools\r\n      // For now, we'll create mock metrics\r\n      this.systemMetrics = {\r\n        cpu: {\r\n          usage: Math.random() * 100,\r\n          temperature: 45 + Math.random() * 20,\r\n          loadAverage: [1.2, 1.5, 1.8],\r\n          processes: 150 + Math.floor(Math.random() * 50)\r\n        },\r\n        memory: {\r\n          total: 12 * 1024 * 1024 * 1024, // 12GB\r\n          used: 8 * 1024 * 1024 * 1024,   // 8GB\r\n          free: 4 * 1024 * 1024 * 1024,   // 4GB\r\n          usage: 66.7,\r\n          swapUsed: 0\r\n        },\r\n        disk: {\r\n          total: 256 * 1024 * 1024 * 1024, // 256GB\r\n          used: 128 * 1024 * 1024 * 1024,  // 128GB\r\n          free: 128 * 1024 * 1024 * 1024,  // 128GB\r\n          usage: 50,\r\n          ioRead: 1000,\r\n          ioWrite: 500\r\n        },\r\n        network: {\r\n          bytesIn: 1000000,\r\n          bytesOut: 500000,\r\n          packetsIn: 1000,\r\n          packetsOut: 800,\r\n          errors: 0,\r\n          latency: 10\r\n        },\r\n        application: {\r\n          uptime: process.uptime() * 1000,\r\n          memoryUsage: process.memoryUsage().heapUsed,\r\n          activeConnections: 10,\r\n          requestsPerSecond: 50,\r\n          errorRate: 0.1\r\n        }\r\n      };\r\n\r\n      // Check for metric alerts\r\n      await this.checkMetricAlerts();\r\n\r\n    } catch (error) {\r\n      logger.error('❌ Failed to collect system metrics:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check for metric-based alerts\r\n   */\r\n  private async checkMetricAlerts(): Promise<void> {\r\n    if (!this.systemMetrics || !this.config.enableAlerts) {\r\n      return;\r\n    }\r\n\r\n    const alerts: string[] = [];\r\n\r\n    // Check CPU usage\r\n    if (this.systemMetrics.cpu.usage > this.config.alertThresholds.cpu) {\r\n      alerts.push(`High CPU usage: ${this.systemMetrics.cpu.usage.toFixed(1)}%`);\r\n    }\r\n\r\n    // Check memory usage\r\n    if (this.systemMetrics.memory.usage > this.config.alertThresholds.memory) {\r\n      alerts.push(`High memory usage: ${this.systemMetrics.memory.usage.toFixed(1)}%`);\r\n    }\r\n\r\n    // Check disk usage\r\n    if (this.systemMetrics.disk.usage > this.config.alertThresholds.disk) {\r\n      alerts.push(`High disk usage: ${this.systemMetrics.disk.usage.toFixed(1)}%`);\r\n    }\r\n\r\n    // Send alerts if any\r\n    if (alerts.length > 0) {\r\n      await communicationBus.publish('system.health.metrics.alert', {\r\n        alerts,\r\n        metrics: this.systemMetrics,\r\n        timestamp: new Date()\r\n      }, {\r\n        priority: MessagePriority.HIGH,\r\n        source: 'system-health-monitor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update overall system health status\r\n   */\r\n  private updateOverallHealthStatus(): void {\r\n    const componentStatuses = Array.from(this.componentTrackers.values())\r\n      .map(tracker => tracker.currentHealth.status);\r\n\r\n    if (componentStatuses.length === 0) {\r\n      this.overallHealthStatus = SystemHealthStatus.HEALTHY;\r\n      return;\r\n    }\r\n\r\n    // Determine overall status based on component statuses\r\n    if (componentStatuses.some(status => status === SystemHealthStatus.OFFLINE)) {\r\n      this.overallHealthStatus = SystemHealthStatus.OFFLINE;\r\n    } else if (componentStatuses.some(status => status === SystemHealthStatus.CRITICAL)) {\r\n      this.overallHealthStatus = SystemHealthStatus.CRITICAL;\r\n    } else if (componentStatuses.some(status => status === SystemHealthStatus.DEGRADED)) {\r\n      this.overallHealthStatus = SystemHealthStatus.DEGRADED;\r\n    } else if (componentStatuses.some(status => status === SystemHealthStatus.WARNING)) {\r\n      this.overallHealthStatus = SystemHealthStatus.WARNING;\r\n    } else {\r\n      this.overallHealthStatus = SystemHealthStatus.HEALTHY;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Determine health status based on score and issues\r\n   * \r\n   * @param result Health check result\r\n   * @returns System health status\r\n   */\r\n  private determineHealthStatus(result: HealthCheckResult): SystemHealthStatus {\r\n    // Check for critical issues\r\n    const hasCriticalIssues = result.issues.some(issue => issue.severity === 'CRITICAL');\r\n    if (hasCriticalIssues) {\r\n      return SystemHealthStatus.CRITICAL;\r\n    }\r\n\r\n    // Check for high severity issues\r\n    const hasHighIssues = result.issues.some(issue => issue.severity === 'HIGH');\r\n    if (hasHighIssues) {\r\n      return SystemHealthStatus.DEGRADED;\r\n    }\r\n\r\n    // Check score thresholds\r\n    if (result.score >= 90) {\r\n      return SystemHealthStatus.HEALTHY;\r\n    } else if (result.score >= 70) {\r\n      return SystemHealthStatus.WARNING;\r\n    } else if (result.score >= 50) {\r\n      return SystemHealthStatus.DEGRADED;\r\n    } else {\r\n      return SystemHealthStatus.CRITICAL;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert component issues to health issues\r\n   * \r\n   * @param issues Component issues\r\n   * @returns Array of health issues\r\n   */\r\n  private convertToHealthIssues(issues: string[]): HealthIssue[] {\r\n    return issues.map(issue => ({\r\n      severity: 'MEDIUM' as const,\r\n      category: 'GENERAL',\r\n      description: issue,\r\n      code: 'COMPONENT_ISSUE',\r\n      affectedMetrics: [],\r\n      suggestedActions: ['Investigate issue'],\r\n      timestamp: new Date()\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Setup event handlers\r\n   */\r\n  private setupEventHandlers(): void {\r\n    this.on('component:health-changed', (componentId: string, health: HealthCheckResult) => {\r\n      logger.debug(`🏥 Component health changed: ${componentId} - ${health.status} (${health.score})`);\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Default health monitoring configuration\r\n */\r\nexport const defaultHealthMonitorConfig: HealthMonitorConfig = {\r\n  checkInterval: 30000,        // 30 seconds\r\n  checkTimeout: 10000,         // 10 seconds\r\n  failureThreshold: 3,         // 3 consecutive failures\r\n  recoveryThreshold: 2,        // 2 consecutive successes\r\n  autoRecovery: true,\r\n  recoveryCooldown: 300000,    // 5 minutes\r\n  historyRetention: 100,       // Keep last 100 health checks\r\n  enableAlerts: true,\r\n  alertThresholds: {\r\n    cpu: 80,                   // 80% CPU usage\r\n    memory: 85,                // 85% memory usage\r\n    disk: 90,                  // 90% disk usage\r\n    responseTime: 5000         // 5 second response time\r\n  }\r\n};\r\n\r\n// =============================================================================\r\n// SYSTEM HEALTH MONITORING NOTES\r\n// =============================================================================\r\n// 1. Comprehensive component health monitoring with configurable intervals\r\n// 2. System metrics collection and threshold-based alerting\r\n// 3. Health trend analysis and predictive issue detection\r\n// 4. Automatic recovery attempts with cooldown periods\r\n// 5. Health history tracking for performance analysis\r\n// 6. Event-driven health status changes and notifications\r\n// 7. Integration with communication bus for system-wide alerts\r\n// 8. Configurable thresholds and monitoring parameters\r\n// ============================================================================="],"mappings":"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","ignoreList":[]}