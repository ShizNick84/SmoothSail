edfe1f4bfca80d457c1590ed891b12ad
"use strict";

/**
 * =============================================================================
 * AI CRYPTO TRADING AGENT - AUTO-RESTART AND RECOVERY MANAGER
 * =============================================================================
 *
 * This service provides comprehensive auto-restart and recovery capabilities
 * for the AI crypto trading agent. It manages systemd services, graceful
 * shutdowns, failure detection, and automatic recovery procedures.
 *
 * CRITICAL RELIABILITY NOTICE:
 * This system manages the availability of trading operations. System failures
 * or improper recovery could impact trading decisions and result in financial
 * losses. All recovery procedures are logged and monitored.
 *
 * Hardware Specifications:
 * - Intel NUC with i5 CPU
 * - 12GB RAM
 * - 256GB M.2 SSD
 * - Ubuntu OS with systemd
 *
 * @author AI Crypto Trading System
 * @version 1.0.0
 * @license PROPRIETARY
 * =============================================================================
 */
/* istanbul ignore next */
function cov_nzrg0jhkv() {
  var path = "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\auto-restart-manager.ts";
  var hash = "f0c5ec3e37e2507e09514832b1f77670fe432220";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\auto-restart-manager.ts",
    statementMap: {
      "0": {
        start: {
          line: 27,
          column: 22
        },
        end: {
          line: 37,
          column: 3
        }
      },
      "1": {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 28,
          column: 33
        }
      },
      "2": {
        start: {
          line: 28,
          column: 26
        },
        end: {
          line: 28,
          column: 33
        }
      },
      "3": {
        start: {
          line: 29,
          column: 15
        },
        end: {
          line: 29,
          column: 52
        }
      },
      "4": {
        start: {
          line: 30,
          column: 4
        },
        end: {
          line: 32,
          column: 5
        }
      },
      "5": {
        start: {
          line: 31,
          column: 6
        },
        end: {
          line: 31,
          column: 68
        }
      },
      "6": {
        start: {
          line: 31,
          column: 51
        },
        end: {
          line: 31,
          column: 63
        }
      },
      "7": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 33,
          column: 39
        }
      },
      "8": {
        start: {
          line: 35,
          column: 4
        },
        end: {
          line: 35,
          column: 33
        }
      },
      "9": {
        start: {
          line: 35,
          column: 26
        },
        end: {
          line: 35,
          column: 33
        }
      },
      "10": {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 36,
          column: 17
        }
      },
      "11": {
        start: {
          line: 38,
          column: 25
        },
        end: {
          line: 42,
          column: 2
        }
      },
      "12": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 39,
          column: 72
        }
      },
      "13": {
        start: {
          line: 41,
          column: 4
        },
        end: {
          line: 41,
          column: 21
        }
      },
      "14": {
        start: {
          line: 43,
          column: 19
        },
        end: {
          line: 59,
          column: 4
        }
      },
      "15": {
        start: {
          line: 44,
          column: 18
        },
        end: {
          line: 51,
          column: 5
        }
      },
      "16": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 49,
          column: 10
        }
      },
      "17": {
        start: {
          line: 46,
          column: 21
        },
        end: {
          line: 46,
          column: 23
        }
      },
      "18": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 47,
          column: 95
        }
      },
      "19": {
        start: {
          line: 47,
          column: 29
        },
        end: {
          line: 47,
          column: 95
        }
      },
      "20": {
        start: {
          line: 47,
          column: 77
        },
        end: {
          line: 47,
          column: 95
        }
      },
      "21": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 48,
          column: 22
        }
      },
      "22": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 50,
          column: 26
        }
      },
      "23": {
        start: {
          line: 52,
          column: 4
        },
        end: {
          line: 58,
          column: 6
        }
      },
      "24": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 53,
          column: 46
        }
      },
      "25": {
        start: {
          line: 53,
          column: 35
        },
        end: {
          line: 53,
          column: 46
        }
      },
      "26": {
        start: {
          line: 54,
          column: 21
        },
        end: {
          line: 54,
          column: 23
        }
      },
      "27": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 55,
          column: 137
        }
      },
      "28": {
        start: {
          line: 55,
          column: 25
        },
        end: {
          line: 55,
          column: 137
        }
      },
      "29": {
        start: {
          line: 55,
          column: 38
        },
        end: {
          line: 55,
          column: 50
        }
      },
      "30": {
        start: {
          line: 55,
          column: 56
        },
        end: {
          line: 55,
          column: 57
        }
      },
      "31": {
        start: {
          line: 55,
          column: 78
        },
        end: {
          line: 55,
          column: 137
        }
      },
      "32": {
        start: {
          line: 55,
          column: 102
        },
        end: {
          line: 55,
          column: 137
        }
      },
      "33": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 56,
          column: 40
        }
      },
      "34": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 57,
          column: 22
        }
      },
      "35": {
        start: {
          line: 60,
          column: 0
        },
        end: {
          line: 60,
          column: 62
        }
      },
      "36": {
        start: {
          line: 61,
          column: 0
        },
        end: {
          line: 61,
          column: 36
        }
      },
      "37": {
        start: {
          line: 62,
          column: 17
        },
        end: {
          line: 62,
          column: 34
        }
      },
      "38": {
        start: {
          line: 63,
          column: 17
        },
        end: {
          line: 63,
          column: 49
        }
      },
      "39": {
        start: {
          line: 64,
          column: 24
        },
        end: {
          line: 64,
          column: 59
        }
      },
      "40": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 71,
          column: 16
        }
      },
      "41": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 72,
          column: 34
        }
      },
      "42": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 73,
          column: 40
        }
      },
      "43": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 74,
          column: 39
        }
      },
      "44": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 75,
          column: 36
        }
      },
      "45": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 76,
          column: 46
        }
      },
      "46": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 77,
          column: 72
        }
      },
      "47": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 78,
          column: 56
        }
      },
      "48": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 79,
          column: 72
        }
      },
      "49": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 98,
          column: 10
        }
      },
      "50": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 112,
          column: 10
        }
      },
      "51": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 151,
          column: 9
        }
      },
      "52": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 121,
          column: 88
        }
      },
      "53": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 123,
          column: 52
        }
      },
      "54": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 125,
          column: 56
        }
      },
      "55": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 127,
          column: 53
        }
      },
      "56": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 129,
          column: 47
        }
      },
      "57": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 131,
          column: 49
        }
      },
      "58": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 132,
          column: 83
        }
      },
      "59": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 146,
          column: 15
        }
      },
      "60": {
        start: {
          line: 149,
          column: 12
        },
        end: {
          line: 149,
          column: 88
        }
      },
      "61": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 150,
          column: 73
        }
      },
      "62": {
        start: {
          line: 159,
          column: 37
        },
        end: {
          line: 178,
          column: 9
        }
      },
      "63": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 179,
          column: 75
        }
      },
      "64": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 180,
          column: 65
        }
      },
      "65": {
        start: {
          line: 189,
          column: 32
        },
        end: {
          line: 207,
          column: 9
        }
      },
      "66": {
        start: {
          line: 209,
          column: 36
        },
        end: {
          line: 227,
          column: 9
        }
      },
      "67": {
        start: {
          line: 228,
          column: 8
        },
        end: {
          line: 228,
          column: 65
        }
      },
      "68": {
        start: {
          line: 229,
          column: 8
        },
        end: {
          line: 229,
          column: 73
        }
      },
      "69": {
        start: {
          line: 230,
          column: 8
        },
        end: {
          line: 230,
          column: 60
        }
      },
      "70": {
        start: {
          line: 231,
          column: 8
        },
        end: {
          line: 231,
          column: 64
        }
      },
      "71": {
        start: {
          line: 239,
          column: 8
        },
        end: {
          line: 249,
          column: 11
        }
      },
      "72": {
        start: {
          line: 257,
          column: 8
        },
        end: {
          line: 291,
          column: 9
        }
      },
      "73": {
        start: {
          line: 258,
          column: 12
        },
        end: {
          line: 258,
          column: 75
        }
      },
      "74": {
        start: {
          line: 259,
          column: 12
        },
        end: {
          line: 278,
          column: 13
        }
      },
      "75": {
        start: {
          line: 260,
          column: 43
        },
        end: {
          line: 260,
          column: 82
        }
      },
      "76": {
        start: {
          line: 261,
          column: 40
        },
        end: {
          line: 261,
          column: 84
        }
      },
      "77": {
        start: {
          line: 263,
          column: 16
        },
        end: {
          line: 277,
          column: 17
        }
      },
      "78": {
        start: {
          line: 264,
          column: 46
        },
        end: {
          line: 264,
          column: 109
        }
      },
      "79": {
        start: {
          line: 264,
          column: 81
        },
        end: {
          line: 264,
          column: 108
        }
      },
      "80": {
        start: {
          line: 265,
          column: 41
        },
        end: {
          line: 265,
          column: 115
        }
      },
      "81": {
        start: {
          line: 265,
          column: 76
        },
        end: {
          line: 265,
          column: 114
        }
      },
      "82": {
        start: {
          line: 267,
          column: 37
        },
        end: {
          line: 267,
          column: 66
        }
      },
      "83": {
        start: {
          line: 268,
          column: 20
        },
        end: {
          line: 268,
          column: 64
        }
      },
      "84": {
        start: {
          line: 270,
          column: 20
        },
        end: {
          line: 270,
          column: 90
        }
      },
      "85": {
        start: {
          line: 271,
          column: 20
        },
        end: {
          line: 271,
          column: 85
        }
      },
      "86": {
        start: {
          line: 272,
          column: 20
        },
        end: {
          line: 272,
          column: 87
        }
      },
      "87": {
        start: {
          line: 275,
          column: 20
        },
        end: {
          line: 275,
          column: 104
        }
      },
      "88": {
        start: {
          line: 280,
          column: 12
        },
        end: {
          line: 287,
          column: 13
        }
      },
      "89": {
        start: {
          line: 281,
          column: 37
        },
        end: {
          line: 281,
          column: 111
        }
      },
      "90": {
        start: {
          line: 281,
          column: 72
        },
        end: {
          line: 281,
          column: 110
        }
      },
      "91": {
        start: {
          line: 282,
          column: 16
        },
        end: {
          line: 282,
          column: 76
        }
      },
      "92": {
        start: {
          line: 283,
          column: 16
        },
        end: {
          line: 283,
          column: 66
        }
      },
      "93": {
        start: {
          line: 286,
          column: 16
        },
        end: {
          line: 286,
          column: 83
        }
      },
      "94": {
        start: {
          line: 290,
          column: 12
        },
        end: {
          line: 290,
          column: 88
        }
      },
      "95": {
        start: {
          line: 300,
          column: 32
        },
        end: {
          line: 302,
          column: 23
        }
      },
      "96": {
        start: {
          line: 301,
          column: 35
        },
        end: {
          line: 301,
          column: 64
        }
      },
      "97": {
        start: {
          line: 303,
          column: 29
        },
        end: {
          line: 305,
          column: 16
        }
      },
      "98": {
        start: {
          line: 306,
          column: 25
        },
        end: {
          line: 308,
          column: 16
        }
      },
      "99": {
        start: {
          line: 309,
          column: 22
        },
        end: {
          line: 311,
          column: 16
        }
      },
      "100": {
        start: {
          line: 312,
          column: 23
        },
        end: {
          line: 314,
          column: 16
        }
      },
      "101": {
        start: {
          line: 315,
          column: 8
        },
        end: {
          line: 344,
          column: 2
        }
      },
      "102": {
        start: {
          line: 353,
          column: 8
        },
        end: {
          line: 367,
          column: 9
        }
      },
      "103": {
        start: {
          line: 355,
          column: 16
        },
        end: {
          line: 355,
          column: 85
        }
      },
      "104": {
        start: {
          line: 357,
          column: 33
        },
        end: {
          line: 357,
          column: 75
        }
      },
      "105": {
        start: {
          line: 358,
          column: 32
        },
        end: {
          line: 358,
          column: 64
        }
      },
      "106": {
        start: {
          line: 359,
          column: 31
        },
        end: {
          line: 359,
          column: 86
        }
      },
      "107": {
        start: {
          line: 360,
          column: 34
        },
        end: {
          line: 360,
          column: 73
        }
      },
      "108": {
        start: {
          line: 361,
          column: 35
        },
        end: {
          line: 361,
          column: 73
        }
      },
      "109": {
        start: {
          line: 362,
          column: 16
        },
        end: {
          line: 362,
          column: 123
        }
      },
      "110": {
        start: {
          line: 364,
          column: 16
        },
        end: {
          line: 364,
          column: 102
        }
      },
      "111": {
        start: {
          line: 366,
          column: 16
        },
        end: {
          line: 366,
          column: 85
        }
      },
      "112": {
        start: {
          line: 375,
          column: 8
        },
        end: {
          line: 396,
          column: 9
        }
      },
      "113": {
        start: {
          line: 376,
          column: 12
        },
        end: {
          line: 376,
          column: 80
        }
      },
      "114": {
        start: {
          line: 377,
          column: 12
        },
        end: {
          line: 382,
          column: 13
        }
      },
      "115": {
        start: {
          line: 379,
          column: 16
        },
        end: {
          line: 381,
          column: 17
        }
      },
      "116": {
        start: {
          line: 380,
          column: 20
        },
        end: {
          line: 380,
          column: 55
        }
      },
      "117": {
        start: {
          line: 384,
          column: 12
        },
        end: {
          line: 391,
          column: 64
        }
      },
      "118": {
        start: {
          line: 385,
          column: 16
        },
        end: {
          line: 390,
          column: 17
        }
      },
      "119": {
        start: {
          line: 386,
          column: 20
        },
        end: {
          line: 386,
          column: 57
        }
      },
      "120": {
        start: {
          line: 389,
          column: 20
        },
        end: {
          line: 389,
          column: 79
        }
      },
      "121": {
        start: {
          line: 392,
          column: 12
        },
        end: {
          line: 392,
          column: 75
        }
      },
      "122": {
        start: {
          line: 395,
          column: 12
        },
        end: {
          line: 395,
          column: 81
        }
      },
      "123": {
        start: {
          line: 404,
          column: 25
        },
        end: {
          line: 411,
          column: 59
        }
      },
      "124": {
        start: {
          line: 405,
          column: 12
        },
        end: {
          line: 410,
          column: 13
        }
      },
      "125": {
        start: {
          line: 406,
          column: 16
        },
        end: {
          line: 406,
          column: 59
        }
      },
      "126": {
        start: {
          line: 409,
          column: 16
        },
        end: {
          line: 409,
          column: 90
        }
      },
      "127": {
        start: {
          line: 412,
          column: 8
        },
        end: {
          line: 412,
          column: 61
        }
      },
      "128": {
        start: {
          line: 421,
          column: 8
        },
        end: {
          line: 444,
          column: 9
        }
      },
      "129": {
        start: {
          line: 422,
          column: 27
        },
        end: {
          line: 422,
          column: 63
        }
      },
      "130": {
        start: {
          line: 423,
          column: 12
        },
        end: {
          line: 424,
          column: 23
        }
      },
      "131": {
        start: {
          line: 424,
          column: 16
        },
        end: {
          line: 424,
          column: 23
        }
      },
      "132": {
        start: {
          line: 426,
          column: 30
        },
        end: {
          line: 426,
          column: 72
        }
      },
      "133": {
        start: {
          line: 427,
          column: 12
        },
        end: {
          line: 427,
          column: 48
        }
      },
      "134": {
        start: {
          line: 428,
          column: 12
        },
        end: {
          line: 440,
          column: 13
        }
      },
      "135": {
        start: {
          line: 429,
          column: 16
        },
        end: {
          line: 429,
          column: 48
        }
      },
      "136": {
        start: {
          line: 430,
          column: 16
        },
        end: {
          line: 430,
          column: 47
        }
      },
      "137": {
        start: {
          line: 433,
          column: 16
        },
        end: {
          line: 433,
          column: 50
        }
      },
      "138": {
        start: {
          line: 434,
          column: 16
        },
        end: {
          line: 434,
          column: 45
        }
      },
      "139": {
        start: {
          line: 435,
          column: 16
        },
        end: {
          line: 435,
          column: 168
        }
      },
      "140": {
        start: {
          line: 437,
          column: 16
        },
        end: {
          line: 439,
          column: 17
        }
      },
      "141": {
        start: {
          line: 438,
          column: 20
        },
        end: {
          line: 438,
          column: 104
        }
      },
      "142": {
        start: {
          line: 443,
          column: 12
        },
        end: {
          line: 443,
          column: 85
        }
      },
      "143": {
        start: {
          line: 453,
          column: 8
        },
        end: {
          line: 464,
          column: 9
        }
      },
      "144": {
        start: {
          line: 454,
          column: 33
        },
        end: {
          line: 454,
          column: 107
        }
      },
      "145": {
        start: {
          line: 454,
          column: 68
        },
        end: {
          line: 454,
          column: 106
        }
      },
      "146": {
        start: {
          line: 456,
          column: 27
        },
        end: {
          line: 459,
          column: 14
        }
      },
      "147": {
        start: {
          line: 460,
          column: 12
        },
        end: {
          line: 460,
          column: 46
        }
      },
      "148": {
        start: {
          line: 463,
          column: 12
        },
        end: {
          line: 463,
          column: 25
        }
      },
      "149": {
        start: {
          line: 472,
          column: 8
        },
        end: {
          line: 491,
          column: 9
        }
      },
      "150": {
        start: {
          line: 473,
          column: 12
        },
        end: {
          line: 487,
          column: 13
        }
      },
      "151": {
        start: {
          line: 474,
          column: 31
        },
        end: {
          line: 474,
          column: 67
        }
      },
      "152": {
        start: {
          line: 475,
          column: 16
        },
        end: {
          line: 476,
          column: 29
        }
      },
      "153": {
        start: {
          line: 476,
          column: 20
        },
        end: {
          line: 476,
          column: 29
        }
      },
      "154": {
        start: {
          line: 478,
          column: 16
        },
        end: {
          line: 478,
          column: 60
        }
      },
      "155": {
        start: {
          line: 480,
          column: 16
        },
        end: {
          line: 482,
          column: 17
        }
      },
      "156": {
        start: {
          line: 481,
          column: 20
        },
        end: {
          line: 481,
          column: 63
        }
      },
      "157": {
        start: {
          line: 484,
          column: 16
        },
        end: {
          line: 486,
          column: 17
        }
      },
      "158": {
        start: {
          line: 485,
          column: 20
        },
        end: {
          line: 485,
          column: 59
        }
      },
      "159": {
        start: {
          line: 490,
          column: 12
        },
        end: {
          line: 490,
          column: 71
        }
      },
      "160": {
        start: {
          line: 500,
          column: 8
        },
        end: {
          line: 532,
          column: 9
        }
      },
      "161": {
        start: {
          line: 501,
          column: 33
        },
        end: {
          line: 501,
          column: 107
        }
      },
      "162": {
        start: {
          line: 501,
          column: 68
        },
        end: {
          line: 501,
          column: 106
        }
      },
      "163": {
        start: {
          line: 502,
          column: 27
        },
        end: {
          line: 502,
          column: 63
        }
      },
      "164": {
        start: {
          line: 503,
          column: 12
        },
        end: {
          line: 504,
          column: 23
        }
      },
      "165": {
        start: {
          line: 504,
          column: 16
        },
        end: {
          line: 504,
          column: 23
        }
      },
      "166": {
        start: {
          line: 506,
          column: 27
        },
        end: {
          line: 509,
          column: 14
        }
      },
      "167": {
        start: {
          line: 510,
          column: 26
        },
        end: {
          line: 510,
          column: 44
        }
      },
      "168": {
        start: {
          line: 511,
          column: 32
        },
        end: {
          line: 511,
          column: 98
        }
      },
      "169": {
        start: {
          line: 511,
          column: 51
        },
        end: {
          line: 511,
          column: 82
        }
      },
      "170": {
        start: {
          line: 512,
          column: 29
        },
        end: {
          line: 512,
          column: 92
        }
      },
      "171": {
        start: {
          line: 512,
          column: 48
        },
        end: {
          line: 512,
          column: 76
        }
      },
      "172": {
        start: {
          line: 514,
          column: 12
        },
        end: {
          line: 528,
          column: 13
        }
      },
      "173": {
        start: {
          line: 515,
          column: 16
        },
        end: {
          line: 515,
          column: 42
        }
      },
      "174": {
        start: {
          line: 517,
          column: 17
        },
        end: {
          line: 528,
          column: 13
        }
      },
      "175": {
        start: {
          line: 518,
          column: 16
        },
        end: {
          line: 518,
          column: 41
        }
      },
      "176": {
        start: {
          line: 519,
          column: 16
        },
        end: {
          line: 521,
          column: 17
        }
      },
      "177": {
        start: {
          line: 520,
          column: 20
        },
        end: {
          line: 520,
          column: 85
        }
      },
      "178": {
        start: {
          line: 523,
          column: 17
        },
        end: {
          line: 528,
          column: 13
        }
      },
      "179": {
        start: {
          line: 524,
          column: 16
        },
        end: {
          line: 524,
          column: 45
        }
      },
      "180": {
        start: {
          line: 527,
          column: 16
        },
        end: {
          line: 527,
          column: 42
        }
      },
      "181": {
        start: {
          line: 531,
          column: 12
        },
        end: {
          line: 531,
          column: 90
        }
      },
      "182": {
        start: {
          line: 541,
          column: 8
        },
        end: {
          line: 554,
          column: 9
        }
      },
      "183": {
        start: {
          line: 544,
          column: 12
        },
        end: {
          line: 550,
          column: 13
        }
      },
      "184": {
        start: {
          line: 545,
          column: 36
        },
        end: {
          line: 545,
          column: 57
        }
      },
      "185": {
        start: {
          line: 546,
          column: 43
        },
        end: {
          line: 546,
          column: 95
        }
      },
      "186": {
        start: {
          line: 547,
          column: 16
        },
        end: {
          line: 549,
          column: 17
        }
      },
      "187": {
        start: {
          line: 548,
          column: 20
        },
        end: {
          line: 548,
          column: 122
        }
      },
      "188": {
        start: {
          line: 553,
          column: 12
        },
        end: {
          line: 553,
          column: 94
        }
      },
      "189": {
        start: {
          line: 563,
          column: 8
        },
        end: {
          line: 579,
          column: 9
        }
      },
      "190": {
        start: {
          line: 564,
          column: 33
        },
        end: {
          line: 564,
          column: 107
        }
      },
      "191": {
        start: {
          line: 564,
          column: 68
        },
        end: {
          line: 564,
          column: 106
        }
      },
      "192": {
        start: {
          line: 566,
          column: 27
        },
        end: {
          line: 569,
          column: 14
        }
      },
      "193": {
        start: {
          line: 570,
          column: 12
        },
        end: {
          line: 575,
          column: 13
        }
      },
      "194": {
        start: {
          line: 571,
          column: 16
        },
        end: {
          line: 574,
          column: 17
        }
      },
      "195": {
        start: {
          line: 572,
          column: 20
        },
        end: {
          line: 572,
          column: 99
        }
      },
      "196": {
        start: {
          line: 573,
          column: 20
        },
        end: {
          line: 573,
          column: 26
        }
      },
      "197": {
        start: {
          line: 589,
          column: 8
        },
        end: {
          line: 621,
          column: 9
        }
      },
      "198": {
        start: {
          line: 590,
          column: 27
        },
        end: {
          line: 590,
          column: 63
        }
      },
      "199": {
        start: {
          line: 591,
          column: 12
        },
        end: {
          line: 592,
          column: 23
        }
      },
      "200": {
        start: {
          line: 592,
          column: 16
        },
        end: {
          line: 592,
          column: 23
        }
      },
      "201": {
        start: {
          line: 593,
          column: 12
        },
        end: {
          line: 593,
          column: 98
        }
      },
      "202": {
        start: {
          line: 594,
          column: 12
        },
        end: {
          line: 594,
          column: 46
        }
      },
      "203": {
        start: {
          line: 595,
          column: 12
        },
        end: {
          line: 595,
          column: 34
        }
      },
      "204": {
        start: {
          line: 596,
          column: 12
        },
        end: {
          line: 596,
          column: 44
        }
      },
      "205": {
        start: {
          line: 597,
          column: 12
        },
        end: {
          line: 597,
          column: 75
        }
      },
      "206": {
        start: {
          line: 599,
          column: 12
        },
        end: {
          line: 599,
          column: 67
        }
      },
      "207": {
        start: {
          line: 601,
          column: 12
        },
        end: {
          line: 615,
          column: 15
        }
      },
      "208": {
        start: {
          line: 617,
          column: 12
        },
        end: {
          line: 617,
          column: 74
        }
      },
      "209": {
        start: {
          line: 620,
          column: 12
        },
        end: {
          line: 620,
          column: 90
        }
      },
      "210": {
        start: {
          line: 631,
          column: 8
        },
        end: {
          line: 663,
          column: 9
        }
      },
      "211": {
        start: {
          line: 632,
          column: 33
        },
        end: {
          line: 632,
          column: 107
        }
      },
      "212": {
        start: {
          line: 632,
          column: 68
        },
        end: {
          line: 632,
          column: 106
        }
      },
      "213": {
        start: {
          line: 634,
          column: 12
        },
        end: {
          line: 640,
          column: 13
        }
      },
      "214": {
        start: {
          line: 635,
          column: 16
        },
        end: {
          line: 635,
          column: 98
        }
      },
      "215": {
        start: {
          line: 636,
          column: 16
        },
        end: {
          line: 636,
          column: 72
        }
      },
      "216": {
        start: {
          line: 636,
          column: 45
        },
        end: {
          line: 636,
          column: 70
        }
      },
      "217": {
        start: {
          line: 639,
          column: 16
        },
        end: {
          line: 639,
          column: 97
        }
      },
      "218": {
        start: {
          line: 642,
          column: 12
        },
        end: {
          line: 648,
          column: 13
        }
      },
      "219": {
        start: {
          line: 643,
          column: 16
        },
        end: {
          line: 643,
          column: 82
        }
      },
      "220": {
        start: {
          line: 644,
          column: 16
        },
        end: {
          line: 644,
          column: 72
        }
      },
      "221": {
        start: {
          line: 644,
          column: 45
        },
        end: {
          line: 644,
          column: 70
        }
      },
      "222": {
        start: {
          line: 650,
          column: 12
        },
        end: {
          line: 655,
          column: 13
        }
      },
      "223": {
        start: {
          line: 651,
          column: 16
        },
        end: {
          line: 651,
          column: 90
        }
      },
      "224": {
        start: {
          line: 657,
          column: 12
        },
        end: {
          line: 657,
          column: 79
        }
      },
      "225": {
        start: {
          line: 658,
          column: 12
        },
        end: {
          line: 658,
          column: 84
        }
      },
      "226": {
        start: {
          line: 661,
          column: 12
        },
        end: {
          line: 661,
          column: 90
        }
      },
      "227": {
        start: {
          line: 662,
          column: 12
        },
        end: {
          line: 662,
          column: 24
        }
      },
      "228": {
        start: {
          line: 670,
          column: 8
        },
        end: {
          line: 670,
          column: 76
        }
      },
      "229": {
        start: {
          line: 670,
          column: 36
        },
        end: {
          line: 670,
          column: 74
        }
      },
      "230": {
        start: {
          line: 671,
          column: 8
        },
        end: {
          line: 671,
          column: 74
        }
      },
      "231": {
        start: {
          line: 671,
          column: 35
        },
        end: {
          line: 671,
          column: 72
        }
      },
      "232": {
        start: {
          line: 672,
          column: 8
        },
        end: {
          line: 672,
          column: 74
        }
      },
      "233": {
        start: {
          line: 672,
          column: 35
        },
        end: {
          line: 672,
          column: 72
        }
      },
      "234": {
        start: {
          line: 673,
          column: 8
        },
        end: {
          line: 673,
          column: 72
        }
      },
      "235": {
        start: {
          line: 682,
          column: 8
        },
        end: {
          line: 685,
          column: 9
        }
      },
      "236": {
        start: {
          line: 683,
          column: 12
        },
        end: {
          line: 683,
          column: 68
        }
      },
      "237": {
        start: {
          line: 684,
          column: 12
        },
        end: {
          line: 684,
          column: 19
        }
      },
      "238": {
        start: {
          line: 686,
          column: 8
        },
        end: {
          line: 686,
          column: 35
        }
      },
      "239": {
        start: {
          line: 687,
          column: 8
        },
        end: {
          line: 687,
          column: 83
        }
      },
      "240": {
        start: {
          line: 688,
          column: 8
        },
        end: {
          line: 698,
          column: 9
        }
      },
      "241": {
        start: {
          line: 689,
          column: 36
        },
        end: {
          line: 689,
          column: 66
        }
      },
      "242": {
        start: {
          line: 690,
          column: 35
        },
        end: {
          line: 690,
          column: 147
        }
      },
      "243": {
        start: {
          line: 690,
          column: 62
        },
        end: {
          line: 690,
          column: 146
        }
      },
      "244": {
        start: {
          line: 690,
          column: 79
        },
        end: {
          line: 690,
          column: 116
        }
      },
      "245": {
        start: {
          line: 691,
          column: 12
        },
        end: {
          line: 691,
          column: 66
        }
      },
      "246": {
        start: {
          line: 692,
          column: 12
        },
        end: {
          line: 692,
          column: 66
        }
      },
      "247": {
        start: {
          line: 693,
          column: 12
        },
        end: {
          line: 693,
          column: 28
        }
      },
      "248": {
        start: {
          line: 696,
          column: 12
        },
        end: {
          line: 696,
          column: 72
        }
      },
      "249": {
        start: {
          line: 697,
          column: 12
        },
        end: {
          line: 697,
          column: 28
        }
      },
      "250": {
        start: {
          line: 706,
          column: 8
        },
        end: {
          line: 739,
          column: 9
        }
      },
      "251": {
        start: {
          line: 708,
          column: 12
        },
        end: {
          line: 708,
          column: 34
        }
      },
      "252": {
        start: {
          line: 710,
          column: 12
        },
        end: {
          line: 717,
          column: 13
        }
      },
      "253": {
        start: {
          line: 711,
          column: 16
        },
        end: {
          line: 716,
          column: 17
        }
      },
      "254": {
        start: {
          line: 712,
          column: 20
        },
        end: {
          line: 712,
          column: 33
        }
      },
      "255": {
        start: {
          line: 715,
          column: 20
        },
        end: {
          line: 715,
          column: 76
        }
      },
      "256": {
        start: {
          line: 719,
          column: 12
        },
        end: {
          line: 719,
          column: 41
        }
      },
      "257": {
        start: {
          line: 721,
          column: 12
        },
        end: {
          line: 723,
          column: 13
        }
      },
      "258": {
        start: {
          line: 722,
          column: 16
        },
        end: {
          line: 722,
          column: 55
        }
      },
      "259": {
        start: {
          line: 725,
          column: 12
        },
        end: {
          line: 734,
          column: 15
        }
      },
      "260": {
        start: {
          line: 737,
          column: 12
        },
        end: {
          line: 737,
          column: 83
        }
      },
      "261": {
        start: {
          line: 738,
          column: 12
        },
        end: {
          line: 738,
          column: 24
        }
      },
      "262": {
        start: {
          line: 746,
          column: 8
        },
        end: {
          line: 749,
          column: 9
        }
      },
      "263": {
        start: {
          line: 747,
          column: 12
        },
        end: {
          line: 747,
          column: 51
        }
      },
      "264": {
        start: {
          line: 748,
          column: 12
        },
        end: {
          line: 748,
          column: 43
        }
      },
      "265": {
        start: {
          line: 751,
          column: 8
        },
        end: {
          line: 753,
          column: 9
        }
      },
      "266": {
        start: {
          line: 752,
          column: 12
        },
        end: {
          line: 752,
          column: 36
        }
      },
      "267": {
        start: {
          line: 754,
          column: 8
        },
        end: {
          line: 754,
          column: 42
        }
      },
      "268": {
        start: {
          line: 755,
          column: 8
        },
        end: {
          line: 755,
          column: 54
        }
      },
      "269": {
        start: {
          line: 763,
          column: 8
        },
        end: {
          line: 781,
          column: 9
        }
      },
      "270": {
        start: {
          line: 764,
          column: 33
        },
        end: {
          line: 764,
          column: 107
        }
      },
      "271": {
        start: {
          line: 764,
          column: 68
        },
        end: {
          line: 764,
          column: 106
        }
      },
      "272": {
        start: {
          line: 766,
          column: 33
        },
        end: {
          line: 766,
          column: 92
        }
      },
      "273": {
        start: {
          line: 767,
          column: 12
        },
        end: {
          line: 777,
          column: 13
        }
      },
      "274": {
        start: {
          line: 768,
          column: 16
        },
        end: {
          line: 776,
          column: 17
        }
      },
      "275": {
        start: {
          line: 769,
          column: 20
        },
        end: {
          line: 775,
          column: 21
        }
      },
      "276": {
        start: {
          line: 770,
          column: 24
        },
        end: {
          line: 770,
          column: 106
        }
      },
      "277": {
        start: {
          line: 771,
          column: 24
        },
        end: {
          line: 771,
          column: 82
        }
      },
      "278": {
        start: {
          line: 774,
          column: 24
        },
        end: {
          line: 774,
          column: 97
        }
      },
      "279": {
        start: {
          line: 780,
          column: 12
        },
        end: {
          line: 780,
          column: 71
        }
      },
      "280": {
        start: {
          line: 789,
          column: 8
        },
        end: {
          line: 795,
          column: 9
        }
      },
      "281": {
        start: {
          line: 791,
          column: 12
        },
        end: {
          line: 791,
          column: 67
        }
      },
      "282": {
        start: {
          line: 794,
          column: 12
        },
        end: {
          line: 794,
          column: 85
        }
      },
      "283": {
        start: {
          line: 803,
          column: 8
        },
        end: {
          line: 803,
          column: 53
        }
      },
      "284": {
        start: {
          line: 811,
          column: 8
        },
        end: {
          line: 811,
          column: 44
        }
      },
      "285": {
        start: {
          line: 820,
          column: 8
        },
        end: {
          line: 820,
          column: 60
        }
      },
      "286": {
        start: {
          line: 828,
          column: 31
        },
        end: {
          line: 829,
          column: 65
        }
      },
      "287": {
        start: {
          line: 829,
          column: 30
        },
        end: {
          line: 829,
          column: 57
        }
      },
      "288": {
        start: {
          line: 830,
          column: 31
        },
        end: {
          line: 831,
          column: 64
        }
      },
      "289": {
        start: {
          line: 831,
          column: 30
        },
        end: {
          line: 831,
          column: 56
        }
      },
      "290": {
        start: {
          line: 832,
          column: 30
        },
        end: {
          line: 833,
          column: 66
        }
      },
      "291": {
        start: {
          line: 833,
          column: 37
        },
        end: {
          line: 833,
          column: 62
        }
      },
      "292": {
        start: {
          line: 834,
          column: 8
        },
        end: {
          line: 842,
          column: 10
        }
      },
      "293": {
        start: {
          line: 845,
          column: 0
        },
        end: {
          line: 845,
          column: 48
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 27,
            column: 74
          },
          end: {
            line: 27,
            column: 75
          }
        },
        loc: {
          start: {
            line: 27,
            column: 96
          },
          end: {
            line: 34,
            column: 1
          }
        },
        line: 27
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 31,
            column: 38
          },
          end: {
            line: 31,
            column: 39
          }
        },
        loc: {
          start: {
            line: 31,
            column: 49
          },
          end: {
            line: 31,
            column: 65
          }
        },
        line: 31
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 34,
            column: 6
          },
          end: {
            line: 34,
            column: 7
          }
        },
        loc: {
          start: {
            line: 34,
            column: 28
          },
          end: {
            line: 37,
            column: 1
          }
        },
        line: 34
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 38,
            column: 80
          },
          end: {
            line: 38,
            column: 81
          }
        },
        loc: {
          start: {
            line: 38,
            column: 95
          },
          end: {
            line: 40,
            column: 1
          }
        },
        line: 38
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 40,
            column: 5
          },
          end: {
            line: 40,
            column: 6
          }
        },
        loc: {
          start: {
            line: 40,
            column: 20
          },
          end: {
            line: 42,
            column: 1
          }
        },
        line: 40
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 43,
            column: 51
          },
          end: {
            line: 43,
            column: 52
          }
        },
        loc: {
          start: {
            line: 43,
            column: 63
          },
          end: {
            line: 59,
            column: 1
          }
        },
        line: 43
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 44,
            column: 18
          },
          end: {
            line: 44,
            column: 19
          }
        },
        loc: {
          start: {
            line: 44,
            column: 30
          },
          end: {
            line: 51,
            column: 5
          }
        },
        line: 44
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 45,
            column: 48
          },
          end: {
            line: 45,
            column: 49
          }
        },
        loc: {
          start: {
            line: 45,
            column: 61
          },
          end: {
            line: 49,
            column: 9
          }
        },
        line: 45
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 52,
            column: 11
          },
          end: {
            line: 52,
            column: 12
          }
        },
        loc: {
          start: {
            line: 52,
            column: 26
          },
          end: {
            line: 58,
            column: 5
          }
        },
        line: 52
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 70,
            column: 4
          },
          end: {
            line: 70,
            column: 5
          }
        },
        loc: {
          start: {
            line: 70,
            column: 18
          },
          end: {
            line: 80,
            column: 5
          }
        },
        line: 70
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 86,
            column: 4
          },
          end: {
            line: 86,
            column: 5
          }
        },
        loc: {
          start: {
            line: 86,
            column: 33
          },
          end: {
            line: 99,
            column: 5
          }
        },
        line: 86
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 105,
            column: 4
          },
          end: {
            line: 105,
            column: 5
          }
        },
        loc: {
          start: {
            line: 105,
            column: 25
          },
          end: {
            line: 113,
            column: 5
          }
        },
        line: 105
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 119,
            column: 4
          },
          end: {
            line: 119,
            column: 5
          }
        },
        loc: {
          start: {
            line: 119,
            column: 23
          },
          end: {
            line: 152,
            column: 5
          }
        },
        line: 119
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 158,
            column: 4
          },
          end: {
            line: 158,
            column: 5
          }
        },
        loc: {
          start: {
            line: 158,
            column: 39
          },
          end: {
            line: 181,
            column: 5
          }
        },
        line: 158
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 187,
            column: 4
          },
          end: {
            line: 187,
            column: 5
          }
        },
        loc: {
          start: {
            line: 187,
            column: 43
          },
          end: {
            line: 232,
            column: 5
          }
        },
        line: 187
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 238,
            column: 4
          },
          end: {
            line: 238,
            column: 5
          }
        },
        loc: {
          start: {
            line: 238,
            column: 42
          },
          end: {
            line: 250,
            column: 5
          }
        },
        line: 238
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 256,
            column: 4
          },
          end: {
            line: 256,
            column: 5
          }
        },
        loc: {
          start: {
            line: 256,
            column: 40
          },
          end: {
            line: 292,
            column: 5
          }
        },
        line: 256
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 264,
            column: 75
          },
          end: {
            line: 264,
            column: 76
          }
        },
        loc: {
          start: {
            line: 264,
            column: 81
          },
          end: {
            line: 264,
            column: 108
          }
        },
        line: 264
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 265,
            column: 70
          },
          end: {
            line: 265,
            column: 71
          }
        },
        loc: {
          start: {
            line: 265,
            column: 76
          },
          end: {
            line: 265,
            column: 114
          }
        },
        line: 265
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 281,
            column: 66
          },
          end: {
            line: 281,
            column: 67
          }
        },
        loc: {
          start: {
            line: 281,
            column: 72
          },
          end: {
            line: 281,
            column: 110
          }
        },
        line: 281
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 299,
            column: 4
          },
          end: {
            line: 299,
            column: 5
          }
        },
        loc: {
          start: {
            line: 299,
            column: 39
          },
          end: {
            line: 345,
            column: 5
          }
        },
        line: 299
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 301,
            column: 17
          },
          end: {
            line: 301,
            column: 18
          }
        },
        loc: {
          start: {
            line: 301,
            column: 35
          },
          end: {
            line: 301,
            column: 64
          }
        },
        line: 301
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 352,
            column: 4
          },
          end: {
            line: 352,
            column: 5
          }
        },
        loc: {
          start: {
            line: 352,
            column: 30
          },
          end: {
            line: 368,
            column: 5
          }
        },
        line: 352
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 374,
            column: 4
          },
          end: {
            line: 374,
            column: 5
          }
        },
        loc: {
          start: {
            line: 374,
            column: 34
          },
          end: {
            line: 397,
            column: 5
          }
        },
        line: 374
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 384,
            column: 50
          },
          end: {
            line: 384,
            column: 51
          }
        },
        loc: {
          start: {
            line: 384,
            column: 62
          },
          end: {
            line: 391,
            column: 13
          }
        },
        line: 384
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 403,
            column: 4
          },
          end: {
            line: 403,
            column: 5
          }
        },
        loc: {
          start: {
            line: 403,
            column: 34
          },
          end: {
            line: 413,
            column: 5
          }
        },
        line: 403
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 404,
            column: 37
          },
          end: {
            line: 404,
            column: 38
          }
        },
        loc: {
          start: {
            line: 404,
            column: 49
          },
          end: {
            line: 411,
            column: 9
          }
        },
        line: 404
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 420,
            column: 4
          },
          end: {
            line: 420,
            column: 5
          }
        },
        loc: {
          start: {
            line: 420,
            column: 42
          },
          end: {
            line: 445,
            column: 5
          }
        },
        line: 420
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 452,
            column: 4
          },
          end: {
            line: 452,
            column: 5
          }
        },
        loc: {
          start: {
            line: 452,
            column: 42
          },
          end: {
            line: 465,
            column: 5
          }
        },
        line: 452
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 454,
            column: 62
          },
          end: {
            line: 454,
            column: 63
          }
        },
        loc: {
          start: {
            line: 454,
            column: 68
          },
          end: {
            line: 454,
            column: 106
          }
        },
        line: 454
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 471,
            column: 4
          },
          end: {
            line: 471,
            column: 5
          }
        },
        loc: {
          start: {
            line: 471,
            column: 36
          },
          end: {
            line: 492,
            column: 5
          }
        },
        line: 471
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 499,
            column: 4
          },
          end: {
            line: 499,
            column: 5
          }
        },
        loc: {
          start: {
            line: 499,
            column: 43
          },
          end: {
            line: 533,
            column: 5
          }
        },
        line: 499
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 501,
            column: 62
          },
          end: {
            line: 501,
            column: 63
          }
        },
        loc: {
          start: {
            line: 501,
            column: 68
          },
          end: {
            line: 501,
            column: 106
          }
        },
        line: 501
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 511,
            column: 43
          },
          end: {
            line: 511,
            column: 44
          }
        },
        loc: {
          start: {
            line: 511,
            column: 51
          },
          end: {
            line: 511,
            column: 82
          }
        },
        line: 511
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 512,
            column: 40
          },
          end: {
            line: 512,
            column: 41
          }
        },
        loc: {
          start: {
            line: 512,
            column: 48
          },
          end: {
            line: 512,
            column: 76
          }
        },
        line: 512
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 540,
            column: 4
          },
          end: {
            line: 540,
            column: 5
          }
        },
        loc: {
          start: {
            line: 540,
            column: 42
          },
          end: {
            line: 555,
            column: 5
          }
        },
        line: 540
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 562,
            column: 4
          },
          end: {
            line: 562,
            column: 5
          }
        },
        loc: {
          start: {
            line: 562,
            column: 38
          },
          end: {
            line: 580,
            column: 5
          }
        },
        line: 562
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 564,
            column: 62
          },
          end: {
            line: 564,
            column: 63
          }
        },
        loc: {
          start: {
            line: 564,
            column: 68
          },
          end: {
            line: 564,
            column: 106
          }
        },
        line: 564
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 588,
            column: 4
          },
          end: {
            line: 588,
            column: 5
          }
        },
        loc: {
          start: {
            line: 588,
            column: 54
          },
          end: {
            line: 622,
            column: 5
          }
        },
        line: 588
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 630,
            column: 4
          },
          end: {
            line: 630,
            column: 5
          }
        },
        loc: {
          start: {
            line: 630,
            column: 54
          },
          end: {
            line: 664,
            column: 5
          }
        },
        line: 630
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 632,
            column: 62
          },
          end: {
            line: 632,
            column: 63
          }
        },
        loc: {
          start: {
            line: 632,
            column: 68
          },
          end: {
            line: 632,
            column: 106
          }
        },
        line: 632
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 636,
            column: 34
          },
          end: {
            line: 636,
            column: 35
          }
        },
        loc: {
          start: {
            line: 636,
            column: 45
          },
          end: {
            line: 636,
            column: 70
          }
        },
        line: 636
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 644,
            column: 34
          },
          end: {
            line: 644,
            column: 35
          }
        },
        loc: {
          start: {
            line: 644,
            column: 45
          },
          end: {
            line: 644,
            column: 70
          }
        },
        line: 644
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 668,
            column: 4
          },
          end: {
            line: 668,
            column: 5
          }
        },
        loc: {
          start: {
            line: 668,
            column: 36
          },
          end: {
            line: 674,
            column: 5
          }
        },
        line: 668
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 670,
            column: 30
          },
          end: {
            line: 670,
            column: 31
          }
        },
        loc: {
          start: {
            line: 670,
            column: 36
          },
          end: {
            line: 670,
            column: 74
          }
        },
        line: 670
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 671,
            column: 29
          },
          end: {
            line: 671,
            column: 30
          }
        },
        loc: {
          start: {
            line: 671,
            column: 35
          },
          end: {
            line: 671,
            column: 72
          }
        },
        line: 671
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 672,
            column: 29
          },
          end: {
            line: 672,
            column: 30
          }
        },
        loc: {
          start: {
            line: 672,
            column: 35
          },
          end: {
            line: 672,
            column: 72
          }
        },
        line: 672
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 681,
            column: 4
          },
          end: {
            line: 681,
            column: 5
          }
        },
        loc: {
          start: {
            line: 681,
            column: 41
          },
          end: {
            line: 699,
            column: 5
          }
        },
        line: 681
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 690,
            column: 47
          },
          end: {
            line: 690,
            column: 48
          }
        },
        loc: {
          start: {
            line: 690,
            column: 62
          },
          end: {
            line: 690,
            column: 146
          }
        },
        line: 690
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 690,
            column: 73
          },
          end: {
            line: 690,
            column: 74
          }
        },
        loc: {
          start: {
            line: 690,
            column: 79
          },
          end: {
            line: 690,
            column: 116
          }
        },
        line: 690
      },
      "50": {
        name: "(anonymous_50)",
        decl: {
          start: {
            line: 705,
            column: 4
          },
          end: {
            line: 705,
            column: 5
          }
        },
        loc: {
          start: {
            line: 705,
            column: 36
          },
          end: {
            line: 740,
            column: 5
          }
        },
        line: 705
      },
      "51": {
        name: "(anonymous_51)",
        decl: {
          start: {
            line: 744,
            column: 4
          },
          end: {
            line: 744,
            column: 5
          }
        },
        loc: {
          start: {
            line: 744,
            column: 21
          },
          end: {
            line: 756,
            column: 5
          }
        },
        line: 744
      },
      "52": {
        name: "(anonymous_52)",
        decl: {
          start: {
            line: 762,
            column: 4
          },
          end: {
            line: 762,
            column: 5
          }
        },
        loc: {
          start: {
            line: 762,
            column: 28
          },
          end: {
            line: 782,
            column: 5
          }
        },
        line: 762
      },
      "53": {
        name: "(anonymous_53)",
        decl: {
          start: {
            line: 764,
            column: 62
          },
          end: {
            line: 764,
            column: 63
          }
        },
        loc: {
          start: {
            line: 764,
            column: 68
          },
          end: {
            line: 764,
            column: 106
          }
        },
        line: 764
      },
      "54": {
        name: "(anonymous_54)",
        decl: {
          start: {
            line: 788,
            column: 4
          },
          end: {
            line: 788,
            column: 5
          }
        },
        loc: {
          start: {
            line: 788,
            column: 38
          },
          end: {
            line: 796,
            column: 5
          }
        },
        line: 788
      },
      "55": {
        name: "(anonymous_55)",
        decl: {
          start: {
            line: 802,
            column: 4
          },
          end: {
            line: 802,
            column: 5
          }
        },
        loc: {
          start: {
            line: 802,
            column: 26
          },
          end: {
            line: 804,
            column: 5
          }
        },
        line: 802
      },
      "56": {
        name: "(anonymous_56)",
        decl: {
          start: {
            line: 810,
            column: 4
          },
          end: {
            line: 810,
            column: 5
          }
        },
        loc: {
          start: {
            line: 810,
            column: 24
          },
          end: {
            line: 812,
            column: 5
          }
        },
        line: 810
      },
      "57": {
        name: "(anonymous_57)",
        decl: {
          start: {
            line: 819,
            column: 4
          },
          end: {
            line: 819,
            column: 5
          }
        },
        loc: {
          start: {
            line: 819,
            column: 42
          },
          end: {
            line: 821,
            column: 5
          }
        },
        line: 819
      },
      "58": {
        name: "(anonymous_58)",
        decl: {
          start: {
            line: 827,
            column: 4
          },
          end: {
            line: 827,
            column: 5
          }
        },
        loc: {
          start: {
            line: 827,
            column: 16
          },
          end: {
            line: 843,
            column: 5
          }
        },
        line: 827
      },
      "59": {
        name: "(anonymous_59)",
        decl: {
          start: {
            line: 829,
            column: 20
          },
          end: {
            line: 829,
            column: 21
          }
        },
        loc: {
          start: {
            line: 829,
            column: 30
          },
          end: {
            line: 829,
            column: 57
          }
        },
        line: 829
      },
      "60": {
        name: "(anonymous_60)",
        decl: {
          start: {
            line: 831,
            column: 20
          },
          end: {
            line: 831,
            column: 21
          }
        },
        loc: {
          start: {
            line: 831,
            column: 30
          },
          end: {
            line: 831,
            column: 56
          }
        },
        line: 831
      },
      "61": {
        name: "(anonymous_61)",
        decl: {
          start: {
            line: 833,
            column: 20
          },
          end: {
            line: 833,
            column: 21
          }
        },
        loc: {
          start: {
            line: 833,
            column: 37
          },
          end: {
            line: 833,
            column: 62
          }
        },
        line: 833
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 27,
            column: 22
          },
          end: {
            line: 37,
            column: 3
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 27,
            column: 23
          },
          end: {
            line: 27,
            column: 27
          }
        }, {
          start: {
            line: 27,
            column: 31
          },
          end: {
            line: 27,
            column: 51
          }
        }, {
          start: {
            line: 27,
            column: 57
          },
          end: {
            line: 37,
            column: 2
          }
        }],
        line: 27
      },
      "1": {
        loc: {
          start: {
            line: 27,
            column: 57
          },
          end: {
            line: 37,
            column: 2
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 27,
            column: 74
          },
          end: {
            line: 34,
            column: 1
          }
        }, {
          start: {
            line: 34,
            column: 6
          },
          end: {
            line: 37,
            column: 1
          }
        }],
        line: 27
      },
      "2": {
        loc: {
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 28,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 28,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "3": {
        loc: {
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 32,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 32,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "4": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 13
          }
        }, {
          start: {
            line: 30,
            column: 18
          },
          end: {
            line: 30,
            column: 84
          }
        }],
        line: 30
      },
      "5": {
        loc: {
          start: {
            line: 30,
            column: 18
          },
          end: {
            line: 30,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 30,
            column: 34
          },
          end: {
            line: 30,
            column: 47
          }
        }, {
          start: {
            line: 30,
            column: 50
          },
          end: {
            line: 30,
            column: 84
          }
        }],
        line: 30
      },
      "6": {
        loc: {
          start: {
            line: 30,
            column: 50
          },
          end: {
            line: 30,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 30,
            column: 50
          },
          end: {
            line: 30,
            column: 63
          }
        }, {
          start: {
            line: 30,
            column: 67
          },
          end: {
            line: 30,
            column: 84
          }
        }],
        line: 30
      },
      "7": {
        loc: {
          start: {
            line: 35,
            column: 4
          },
          end: {
            line: 35,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 35,
            column: 4
          },
          end: {
            line: 35,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 35
      },
      "8": {
        loc: {
          start: {
            line: 38,
            column: 25
          },
          end: {
            line: 42,
            column: 2
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 38,
            column: 26
          },
          end: {
            line: 38,
            column: 30
          }
        }, {
          start: {
            line: 38,
            column: 34
          },
          end: {
            line: 38,
            column: 57
          }
        }, {
          start: {
            line: 38,
            column: 63
          },
          end: {
            line: 42,
            column: 1
          }
        }],
        line: 38
      },
      "9": {
        loc: {
          start: {
            line: 38,
            column: 63
          },
          end: {
            line: 42,
            column: 1
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 38,
            column: 80
          },
          end: {
            line: 40,
            column: 1
          }
        }, {
          start: {
            line: 40,
            column: 5
          },
          end: {
            line: 42,
            column: 1
          }
        }],
        line: 38
      },
      "10": {
        loc: {
          start: {
            line: 43,
            column: 19
          },
          end: {
            line: 59,
            column: 4
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 43,
            column: 20
          },
          end: {
            line: 43,
            column: 24
          }
        }, {
          start: {
            line: 43,
            column: 28
          },
          end: {
            line: 43,
            column: 45
          }
        }, {
          start: {
            line: 43,
            column: 50
          },
          end: {
            line: 59,
            column: 4
          }
        }],
        line: 43
      },
      "11": {
        loc: {
          start: {
            line: 45,
            column: 18
          },
          end: {
            line: 49,
            column: 9
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 45,
            column: 18
          },
          end: {
            line: 45,
            column: 44
          }
        }, {
          start: {
            line: 45,
            column: 48
          },
          end: {
            line: 49,
            column: 9
          }
        }],
        line: 45
      },
      "12": {
        loc: {
          start: {
            line: 47,
            column: 29
          },
          end: {
            line: 47,
            column: 95
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 47,
            column: 29
          },
          end: {
            line: 47,
            column: 95
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 47
      },
      "13": {
        loc: {
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 53,
            column: 46
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 53,
            column: 46
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 53
      },
      "14": {
        loc: {
          start: {
            line: 53,
            column: 12
          },
          end: {
            line: 53,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 53,
            column: 12
          },
          end: {
            line: 53,
            column: 15
          }
        }, {
          start: {
            line: 53,
            column: 19
          },
          end: {
            line: 53,
            column: 33
          }
        }],
        line: 53
      },
      "15": {
        loc: {
          start: {
            line: 55,
            column: 8
          },
          end: {
            line: 55,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 55,
            column: 8
          },
          end: {
            line: 55,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 55
      },
      "16": {
        loc: {
          start: {
            line: 55,
            column: 78
          },
          end: {
            line: 55,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 55,
            column: 78
          },
          end: {
            line: 55,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 55
      },
      "17": {
        loc: {
          start: {
            line: 89,
            column: 42
          },
          end: {
            line: 89,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 89,
            column: 42
          },
          end: {
            line: 89,
            column: 78
          }
        }, {
          start: {
            line: 89,
            column: 82
          },
          end: {
            line: 89,
            column: 89
          }
        }],
        line: 89
      },
      "18": {
        loc: {
          start: {
            line: 90,
            column: 41
          },
          end: {
            line: 90,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 90,
            column: 41
          },
          end: {
            line: 90,
            column: 76
          }
        }, {
          start: {
            line: 90,
            column: 80
          },
          end: {
            line: 90,
            column: 86
          }
        }],
        line: 90
      },
      "19": {
        loc: {
          start: {
            line: 91,
            column: 45
          },
          end: {
            line: 91,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 91,
            column: 45
          },
          end: {
            line: 91,
            column: 81
          }
        }, {
          start: {
            line: 91,
            column: 85
          },
          end: {
            line: 91,
            column: 88
          }
        }],
        line: 91
      },
      "20": {
        loc: {
          start: {
            line: 94,
            column: 38
          },
          end: {
            line: 94,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 94,
            column: 38
          },
          end: {
            line: 94,
            column: 74
          }
        }, {
          start: {
            line: 94,
            column: 78
          },
          end: {
            line: 94,
            column: 82
          }
        }],
        line: 94
      },
      "21": {
        loc: {
          start: {
            line: 95,
            column: 35
          },
          end: {
            line: 95,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 95,
            column: 35
          },
          end: {
            line: 95,
            column: 68
          }
        }, {
          start: {
            line: 95,
            column: 72
          },
          end: {
            line: 95,
            column: 76
          }
        }],
        line: 95
      },
      "22": {
        loc: {
          start: {
            line: 97,
            column: 28
          },
          end: {
            line: 97,
            column: 91
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 97,
            column: 28
          },
          end: {
            line: 97,
            column: 54
          }
        }, {
          start: {
            line: 97,
            column: 58
          },
          end: {
            line: 97,
            column: 91
          }
        }],
        line: 97
      },
      "23": {
        loc: {
          start: {
            line: 107,
            column: 30
          },
          end: {
            line: 107,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 107,
            column: 30
          },
          end: {
            line: 107,
            column: 61
          }
        }, {
          start: {
            line: 107,
            column: 65
          },
          end: {
            line: 107,
            column: 72
          }
        }],
        line: 107
      },
      "24": {
        loc: {
          start: {
            line: 169,
            column: 18
          },
          end: {
            line: 169,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 169,
            column: 18
          },
          end: {
            line: 169,
            column: 42
          }
        }, {
          start: {
            line: 169,
            column: 46
          },
          end: {
            line: 169,
            column: 55
          }
        }],
        line: 169
      },
      "25": {
        loc: {
          start: {
            line: 170,
            column: 19
          },
          end: {
            line: 170,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 170,
            column: 19
          },
          end: {
            line: 170,
            column: 44
          }
        }, {
          start: {
            line: 170,
            column: 48
          },
          end: {
            line: 170,
            column: 57
          }
        }],
        line: 170
      },
      "26": {
        loc: {
          start: {
            line: 303,
            column: 29
          },
          end: {
            line: 305,
            column: 16
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 304,
            column: 14
          },
          end: {
            line: 304,
            column: 56
          }
        }, {
          start: {
            line: 305,
            column: 14
          },
          end: {
            line: 305,
            column: 16
          }
        }],
        line: 303
      },
      "27": {
        loc: {
          start: {
            line: 306,
            column: 25
          },
          end: {
            line: 308,
            column: 16
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 307,
            column: 14
          },
          end: {
            line: 307,
            column: 55
          }
        }, {
          start: {
            line: 308,
            column: 14
          },
          end: {
            line: 308,
            column: 16
          }
        }],
        line: 306
      },
      "28": {
        loc: {
          start: {
            line: 309,
            column: 22
          },
          end: {
            line: 311,
            column: 16
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 310,
            column: 14
          },
          end: {
            line: 310,
            column: 49
          }
        }, {
          start: {
            line: 311,
            column: 14
          },
          end: {
            line: 311,
            column: 16
          }
        }],
        line: 309
      },
      "29": {
        loc: {
          start: {
            line: 312,
            column: 23
          },
          end: {
            line: 314,
            column: 16
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 313,
            column: 14
          },
          end: {
            line: 313,
            column: 51
          }
        }, {
          start: {
            line: 314,
            column: 14
          },
          end: {
            line: 314,
            column: 16
          }
        }],
        line: 312
      },
      "30": {
        loc: {
          start: {
            line: 353,
            column: 8
          },
          end: {
            line: 367,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 354,
            column: 12
          },
          end: {
            line: 355,
            column: 85
          }
        }, {
          start: {
            line: 356,
            column: 12
          },
          end: {
            line: 362,
            column: 123
          }
        }, {
          start: {
            line: 363,
            column: 12
          },
          end: {
            line: 364,
            column: 102
          }
        }, {
          start: {
            line: 365,
            column: 12
          },
          end: {
            line: 366,
            column: 85
          }
        }],
        line: 353
      },
      "31": {
        loc: {
          start: {
            line: 357,
            column: 33
          },
          end: {
            line: 357,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 357,
            column: 33
          },
          end: {
            line: 357,
            column: 54
          }
        }, {
          start: {
            line: 357,
            column: 58
          },
          end: {
            line: 357,
            column: 75
          }
        }],
        line: 357
      },
      "32": {
        loc: {
          start: {
            line: 358,
            column: 32
          },
          end: {
            line: 358,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 358,
            column: 32
          },
          end: {
            line: 358,
            column: 52
          }
        }, {
          start: {
            line: 358,
            column: 56
          },
          end: {
            line: 358,
            column: 64
          }
        }],
        line: 358
      },
      "33": {
        loc: {
          start: {
            line: 359,
            column: 31
          },
          end: {
            line: 359,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 359,
            column: 31
          },
          end: {
            line: 359,
            column: 55
          }
        }, {
          start: {
            line: 359,
            column: 59
          },
          end: {
            line: 359,
            column: 86
          }
        }],
        line: 359
      },
      "34": {
        loc: {
          start: {
            line: 360,
            column: 34
          },
          end: {
            line: 360,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 360,
            column: 34
          },
          end: {
            line: 360,
            column: 63
          }
        }, {
          start: {
            line: 360,
            column: 67
          },
          end: {
            line: 360,
            column: 73
          }
        }],
        line: 360
      },
      "35": {
        loc: {
          start: {
            line: 361,
            column: 35
          },
          end: {
            line: 361,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 361,
            column: 35
          },
          end: {
            line: 361,
            column: 65
          }
        }, {
          start: {
            line: 361,
            column: 69
          },
          end: {
            line: 361,
            column: 73
          }
        }],
        line: 361
      },
      "36": {
        loc: {
          start: {
            line: 377,
            column: 12
          },
          end: {
            line: 382,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 377,
            column: 12
          },
          end: {
            line: 382,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 377
      },
      "37": {
        loc: {
          start: {
            line: 423,
            column: 12
          },
          end: {
            line: 424,
            column: 23
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 423,
            column: 12
          },
          end: {
            line: 424,
            column: 23
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 423
      },
      "38": {
        loc: {
          start: {
            line: 428,
            column: 12
          },
          end: {
            line: 440,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 428,
            column: 12
          },
          end: {
            line: 440,
            column: 13
          }
        }, {
          start: {
            line: 432,
            column: 17
          },
          end: {
            line: 440,
            column: 13
          }
        }],
        line: 428
      },
      "39": {
        loc: {
          start: {
            line: 437,
            column: 16
          },
          end: {
            line: 439,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 437,
            column: 16
          },
          end: {
            line: 439,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 437
      },
      "40": {
        loc: {
          start: {
            line: 475,
            column: 16
          },
          end: {
            line: 476,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 475,
            column: 16
          },
          end: {
            line: 476,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 475
      },
      "41": {
        loc: {
          start: {
            line: 480,
            column: 16
          },
          end: {
            line: 482,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 480,
            column: 16
          },
          end: {
            line: 482,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 480
      },
      "42": {
        loc: {
          start: {
            line: 484,
            column: 16
          },
          end: {
            line: 486,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 484,
            column: 16
          },
          end: {
            line: 486,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 484
      },
      "43": {
        loc: {
          start: {
            line: 503,
            column: 12
          },
          end: {
            line: 504,
            column: 23
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 503,
            column: 12
          },
          end: {
            line: 504,
            column: 23
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 503
      },
      "44": {
        loc: {
          start: {
            line: 514,
            column: 12
          },
          end: {
            line: 528,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 514,
            column: 12
          },
          end: {
            line: 528,
            column: 13
          }
        }, {
          start: {
            line: 517,
            column: 17
          },
          end: {
            line: 528,
            column: 13
          }
        }],
        line: 514
      },
      "45": {
        loc: {
          start: {
            line: 514,
            column: 16
          },
          end: {
            line: 514,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 514,
            column: 16
          },
          end: {
            line: 514,
            column: 40
          }
        }, {
          start: {
            line: 514,
            column: 44
          },
          end: {
            line: 514,
            column: 66
          }
        }],
        line: 514
      },
      "46": {
        loc: {
          start: {
            line: 517,
            column: 17
          },
          end: {
            line: 528,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 517,
            column: 17
          },
          end: {
            line: 528,
            column: 13
          }
        }, {
          start: {
            line: 523,
            column: 17
          },
          end: {
            line: 528,
            column: 13
          }
        }],
        line: 517
      },
      "47": {
        loc: {
          start: {
            line: 519,
            column: 16
          },
          end: {
            line: 521,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 519,
            column: 16
          },
          end: {
            line: 521,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 519
      },
      "48": {
        loc: {
          start: {
            line: 523,
            column: 17
          },
          end: {
            line: 528,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 523,
            column: 17
          },
          end: {
            line: 528,
            column: 13
          }
        }, {
          start: {
            line: 526,
            column: 17
          },
          end: {
            line: 528,
            column: 13
          }
        }],
        line: 523
      },
      "49": {
        loc: {
          start: {
            line: 544,
            column: 12
          },
          end: {
            line: 550,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 544,
            column: 12
          },
          end: {
            line: 550,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 544
      },
      "50": {
        loc: {
          start: {
            line: 547,
            column: 16
          },
          end: {
            line: 549,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 547,
            column: 16
          },
          end: {
            line: 549,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 547
      },
      "51": {
        loc: {
          start: {
            line: 571,
            column: 16
          },
          end: {
            line: 574,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 571,
            column: 16
          },
          end: {
            line: 574,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 571
      },
      "52": {
        loc: {
          start: {
            line: 591,
            column: 12
          },
          end: {
            line: 592,
            column: 23
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 591,
            column: 12
          },
          end: {
            line: 592,
            column: 23
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 591
      },
      "53": {
        loc: {
          start: {
            line: 682,
            column: 8
          },
          end: {
            line: 685,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 682,
            column: 8
          },
          end: {
            line: 685,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 682
      },
      "54": {
        loc: {
          start: {
            line: 721,
            column: 12
          },
          end: {
            line: 723,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 721,
            column: 12
          },
          end: {
            line: 723,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 721
      },
      "55": {
        loc: {
          start: {
            line: 746,
            column: 8
          },
          end: {
            line: 749,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 746,
            column: 8
          },
          end: {
            line: 749,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 746
      },
      "56": {
        loc: {
          start: {
            line: 768,
            column: 16
          },
          end: {
            line: 776,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 768,
            column: 16
          },
          end: {
            line: 776,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 768
      },
      "57": {
        loc: {
          start: {
            line: 820,
            column: 15
          },
          end: {
            line: 820,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 820,
            column: 15
          },
          end: {
            line: 820,
            column: 51
          }
        }, {
          start: {
            line: 820,
            column: 55
          },
          end: {
            line: 820,
            column: 59
          }
        }],
        line: 820
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0,
      "261": 0,
      "262": 0,
      "263": 0,
      "264": 0,
      "265": 0,
      "266": 0,
      "267": 0,
      "268": 0,
      "269": 0,
      "270": 0,
      "271": 0,
      "272": 0,
      "273": 0,
      "274": 0,
      "275": 0,
      "276": 0,
      "277": 0,
      "278": 0,
      "279": 0,
      "280": 0,
      "281": 0,
      "282": 0,
      "283": 0,
      "284": 0,
      "285": 0,
      "286": 0,
      "287": 0,
      "288": 0,
      "289": 0,
      "290": 0,
      "291": 0,
      "292": 0,
      "293": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0, 0],
      "9": [0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0, 0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "f0c5ec3e37e2507e09514832b1f77670fe432220"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_nzrg0jhkv = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_nzrg0jhkv();
var __createBinding =
/* istanbul ignore next */
(cov_nzrg0jhkv().s[0]++,
/* istanbul ignore next */
(cov_nzrg0jhkv().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_nzrg0jhkv().b[0][1]++, this.__createBinding) ||
/* istanbul ignore next */
(cov_nzrg0jhkv().b[0][2]++, Object.create ?
/* istanbul ignore next */
(cov_nzrg0jhkv().b[1][0]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_nzrg0jhkv().f[0]++;
  cov_nzrg0jhkv().s[1]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_nzrg0jhkv().b[2][0]++;
    cov_nzrg0jhkv().s[2]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_nzrg0jhkv().b[2][1]++;
  }
  var desc =
  /* istanbul ignore next */
  (cov_nzrg0jhkv().s[3]++, Object.getOwnPropertyDescriptor(m, k));
  /* istanbul ignore next */
  cov_nzrg0jhkv().s[4]++;
  if (
  /* istanbul ignore next */
  (cov_nzrg0jhkv().b[4][0]++, !desc) ||
  /* istanbul ignore next */
  (cov_nzrg0jhkv().b[4][1]++, "get" in desc ?
  /* istanbul ignore next */
  (cov_nzrg0jhkv().b[5][0]++, !m.__esModule) :
  /* istanbul ignore next */
  (cov_nzrg0jhkv().b[5][1]++,
  /* istanbul ignore next */
  (cov_nzrg0jhkv().b[6][0]++, desc.writable) ||
  /* istanbul ignore next */
  (cov_nzrg0jhkv().b[6][1]++, desc.configurable)))) {
    /* istanbul ignore next */
    cov_nzrg0jhkv().b[3][0]++;
    cov_nzrg0jhkv().s[5]++;
    desc = {
      enumerable: true,
      get: function () {
        /* istanbul ignore next */
        cov_nzrg0jhkv().f[1]++;
        cov_nzrg0jhkv().s[6]++;
        return m[k];
      }
    };
  } else
  /* istanbul ignore next */
  {
    cov_nzrg0jhkv().b[3][1]++;
  }
  cov_nzrg0jhkv().s[7]++;
  Object.defineProperty(o, k2, desc);
}) :
/* istanbul ignore next */
(cov_nzrg0jhkv().b[1][1]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_nzrg0jhkv().f[2]++;
  cov_nzrg0jhkv().s[8]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_nzrg0jhkv().b[7][0]++;
    cov_nzrg0jhkv().s[9]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_nzrg0jhkv().b[7][1]++;
  }
  cov_nzrg0jhkv().s[10]++;
  o[k2] = m[k];
})));
var __setModuleDefault =
/* istanbul ignore next */
(cov_nzrg0jhkv().s[11]++,
/* istanbul ignore next */
(cov_nzrg0jhkv().b[8][0]++, this) &&
/* istanbul ignore next */
(cov_nzrg0jhkv().b[8][1]++, this.__setModuleDefault) ||
/* istanbul ignore next */
(cov_nzrg0jhkv().b[8][2]++, Object.create ?
/* istanbul ignore next */
(cov_nzrg0jhkv().b[9][0]++, function (o, v) {
  /* istanbul ignore next */
  cov_nzrg0jhkv().f[3]++;
  cov_nzrg0jhkv().s[12]++;
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
}) :
/* istanbul ignore next */
(cov_nzrg0jhkv().b[9][1]++, function (o, v) {
  /* istanbul ignore next */
  cov_nzrg0jhkv().f[4]++;
  cov_nzrg0jhkv().s[13]++;
  o["default"] = v;
})));
var __importStar =
/* istanbul ignore next */
(cov_nzrg0jhkv().s[14]++,
/* istanbul ignore next */
(cov_nzrg0jhkv().b[10][0]++, this) &&
/* istanbul ignore next */
(cov_nzrg0jhkv().b[10][1]++, this.__importStar) ||
/* istanbul ignore next */
(cov_nzrg0jhkv().b[10][2]++, function () {
  /* istanbul ignore next */
  cov_nzrg0jhkv().f[5]++;
  cov_nzrg0jhkv().s[15]++;
  var ownKeys = function (o) {
    /* istanbul ignore next */
    cov_nzrg0jhkv().f[6]++;
    cov_nzrg0jhkv().s[16]++;
    ownKeys =
    /* istanbul ignore next */
    (cov_nzrg0jhkv().b[11][0]++, Object.getOwnPropertyNames) ||
    /* istanbul ignore next */
    (cov_nzrg0jhkv().b[11][1]++, function (o) {
      /* istanbul ignore next */
      cov_nzrg0jhkv().f[7]++;
      var ar =
      /* istanbul ignore next */
      (cov_nzrg0jhkv().s[17]++, []);
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[18]++;
      for (var k in o) {
        /* istanbul ignore next */
        cov_nzrg0jhkv().s[19]++;
        if (Object.prototype.hasOwnProperty.call(o, k)) {
          /* istanbul ignore next */
          cov_nzrg0jhkv().b[12][0]++;
          cov_nzrg0jhkv().s[20]++;
          ar[ar.length] = k;
        } else
        /* istanbul ignore next */
        {
          cov_nzrg0jhkv().b[12][1]++;
        }
      }
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[21]++;
      return ar;
    });
    /* istanbul ignore next */
    cov_nzrg0jhkv().s[22]++;
    return ownKeys(o);
  };
  /* istanbul ignore next */
  cov_nzrg0jhkv().s[23]++;
  return function (mod) {
    /* istanbul ignore next */
    cov_nzrg0jhkv().f[8]++;
    cov_nzrg0jhkv().s[24]++;
    if (
    /* istanbul ignore next */
    (cov_nzrg0jhkv().b[14][0]++, mod) &&
    /* istanbul ignore next */
    (cov_nzrg0jhkv().b[14][1]++, mod.__esModule)) {
      /* istanbul ignore next */
      cov_nzrg0jhkv().b[13][0]++;
      cov_nzrg0jhkv().s[25]++;
      return mod;
    } else
    /* istanbul ignore next */
    {
      cov_nzrg0jhkv().b[13][1]++;
    }
    var result =
    /* istanbul ignore next */
    (cov_nzrg0jhkv().s[26]++, {});
    /* istanbul ignore next */
    cov_nzrg0jhkv().s[27]++;
    if (mod != null) {
      /* istanbul ignore next */
      cov_nzrg0jhkv().b[15][0]++;
      cov_nzrg0jhkv().s[28]++;
      for (var k =
        /* istanbul ignore next */
        (cov_nzrg0jhkv().s[29]++, ownKeys(mod)), i =
        /* istanbul ignore next */
        (cov_nzrg0jhkv().s[30]++, 0); i < k.length; i++) {
        /* istanbul ignore next */
        cov_nzrg0jhkv().s[31]++;
        if (k[i] !== "default") {
          /* istanbul ignore next */
          cov_nzrg0jhkv().b[16][0]++;
          cov_nzrg0jhkv().s[32]++;
          __createBinding(result, mod, k[i]);
        } else
        /* istanbul ignore next */
        {
          cov_nzrg0jhkv().b[16][1]++;
        }
      }
    } else
    /* istanbul ignore next */
    {
      cov_nzrg0jhkv().b[15][1]++;
    }
    cov_nzrg0jhkv().s[33]++;
    __setModuleDefault(result, mod);
    /* istanbul ignore next */
    cov_nzrg0jhkv().s[34]++;
    return result;
  };
}()));
/* istanbul ignore next */
cov_nzrg0jhkv().s[35]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_nzrg0jhkv().s[36]++;
exports.AutoRestartManager = void 0;
const events_1 =
/* istanbul ignore next */
(cov_nzrg0jhkv().s[37]++, require("events"));
const logger_1 =
/* istanbul ignore next */
(cov_nzrg0jhkv().s[38]++, require("@/core/logging/logger"));
const audit_service_1 =
/* istanbul ignore next */
(cov_nzrg0jhkv().s[39]++, require("@/security/audit-service"));
/**
 * Auto-Restart and Recovery Manager
 * Provides comprehensive system recovery and restart capabilities
 */
class AutoRestartManager extends
/* istanbul ignore next */
(events_1.EventEmitter) {
  constructor() {
    /* istanbul ignore next */
    cov_nzrg0jhkv().f[9]++;
    cov_nzrg0jhkv().s[40]++;
    super();
    /* istanbul ignore next */
    cov_nzrg0jhkv().s[41]++;
    this.services = new Map();
    /* istanbul ignore next */
    cov_nzrg0jhkv().s[42]++;
    this.recoveryStatus = new Map();
    /* istanbul ignore next */
    cov_nzrg0jhkv().s[43]++;
    this.monitoringInterval = null;
    /* istanbul ignore next */
    cov_nzrg0jhkv().s[44]++;
    this.isShuttingDown = false;
    /* istanbul ignore next */
    cov_nzrg0jhkv().s[45]++;
    this.healthCheckIntervals = new Map();
    /* istanbul ignore next */
    cov_nzrg0jhkv().s[46]++;
    this.failureDetectionConfig = this.loadFailureDetectionConfig();
    /* istanbul ignore next */
    cov_nzrg0jhkv().s[47]++;
    this.shutdownConfig = this.loadShutdownConfig();
    /* istanbul ignore next */
    cov_nzrg0jhkv().s[48]++;
    logger_1.logger.info('🔄 Auto-Restart Manager initializing...');
  }
  /**
   * Load failure detection configuration
   *
   * @returns FailureDetectionConfig Configuration object
   */
  loadFailureDetectionConfig() {
    /* istanbul ignore next */
    cov_nzrg0jhkv().f[10]++;
    cov_nzrg0jhkv().s[49]++;
    return {
      enableHealthCheck: process.env.ENABLE_HEALTH_CHECK !== 'false',
      healthCheckInterval: parseInt(
      /* istanbul ignore next */
      (cov_nzrg0jhkv().b[17][0]++, process.env.HEALTH_CHECK_INTERVAL_MS) ||
      /* istanbul ignore next */
      (cov_nzrg0jhkv().b[17][1]++, '30000')),
      healthCheckTimeout: parseInt(
      /* istanbul ignore next */
      (cov_nzrg0jhkv().b[18][0]++, process.env.HEALTH_CHECK_TIMEOUT_MS) ||
      /* istanbul ignore next */
      (cov_nzrg0jhkv().b[18][1]++, '5000')),
      maxConsecutiveFailures: parseInt(
      /* istanbul ignore next */
      (cov_nzrg0jhkv().b[19][0]++, process.env.MAX_CONSECUTIVE_FAILURES) ||
      /* istanbul ignore next */
      (cov_nzrg0jhkv().b[19][1]++, '3')),
      enableProcessMonitoring: process.env.ENABLE_PROCESS_MONITORING !== 'false',
      enableResourceMonitoring: process.env.ENABLE_RESOURCE_MONITORING !== 'false',
      memoryThreshold: parseInt(
      /* istanbul ignore next */
      (cov_nzrg0jhkv().b[20][0]++, process.env.MEMORY_RESTART_THRESHOLD) ||
      /* istanbul ignore next */
      (cov_nzrg0jhkv().b[20][1]++, '90')),
      cpuThreshold: parseInt(
      /* istanbul ignore next */
      (cov_nzrg0jhkv().b[21][0]++, process.env.CPU_RESTART_THRESHOLD) ||
      /* istanbul ignore next */
      (cov_nzrg0jhkv().b[21][1]++, '95')),
      enableLogMonitoring: process.env.ENABLE_LOG_MONITORING !== 'false',
      errorPatterns: (
      /* istanbul ignore next */
      (cov_nzrg0jhkv().b[22][0]++, process.env.ERROR_PATTERNS) ||
      /* istanbul ignore next */
      (cov_nzrg0jhkv().b[22][1]++, 'FATAL,CRITICAL,OutOfMemoryError')).split(',')
    };
  }
  /**
   * Load graceful shutdown configuration
   *
   * @returns ShutdownConfig Configuration object
   */
  loadShutdownConfig() {
    /* istanbul ignore next */
    cov_nzrg0jhkv().f[11]++;
    cov_nzrg0jhkv().s[50]++;
    return {
      timeout: parseInt(
      /* istanbul ignore next */
      (cov_nzrg0jhkv().b[23][0]++, process.env.SHUTDOWN_TIMEOUT_MS) ||
      /* istanbul ignore next */
      (cov_nzrg0jhkv().b[23][1]++, '30000')),
      closePositions: process.env.SHUTDOWN_CLOSE_POSITIONS !== 'false',
      backupData: process.env.SHUTDOWN_BACKUP_DATA !== 'false',
      sendNotifications: process.env.SHUTDOWN_SEND_NOTIFICATIONS !== 'false',
      shutdownHooks: []
    };
  }
  /**
   * Initialize auto-restart and recovery system
   *
   * @returns Promise<void>
   */
  async initialize() {
    /* istanbul ignore next */
    cov_nzrg0jhkv().f[12]++;
    cov_nzrg0jhkv().s[51]++;
    try {
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[52]++;
      logger_1.logger.info('🔄 Initializing auto-restart and recovery system...');
      // Create main trading service configuration
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[53]++;
      await this.createTradingServiceConfig();
      // Create supporting service configurations
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[54]++;
      await this.createSupportingServiceConfigs();
      // Generate systemd service files
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[55]++;
      await this.generateSystemdServiceFiles();
      // Start failure detection monitoring
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[56]++;
      await this.startFailureDetection();
      // Set up graceful shutdown handlers
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[57]++;
      this.setupGracefulShutdownHandlers();
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[58]++;
      logger_1.logger.info('✅ Auto-restart and recovery system initialized');
      // Audit log
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[59]++;
      await audit_service_1.auditService.createAuditEntry({
        auditId: `restart_mgr_init_${Date.now()}`,
        eventType: 'AUTO_RESTART_MANAGER_INIT',
        actor: 'SYSTEM',
        resource: 'AUTO_RESTART_MANAGER',
        action: 'INITIALIZE',
        result: 'SUCCESS',
        timestamp: new Date(),
        auditData: {
          servicesCount: this.services.size,
          failureDetectionEnabled: this.failureDetectionConfig.enableHealthCheck
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[60]++;
      logger_1.logger.error('❌ Failed to initialize auto-restart system:', error);
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[61]++;
      throw new Error('Auto-restart system initialization failed');
    }
  }
  /**
   * Create main trading service configuration
   *
   * @returns Promise<void>
   */
  async createTradingServiceConfig() {
    /* istanbul ignore next */
    cov_nzrg0jhkv().f[13]++;
    const tradingServiceConfig =
    /* istanbul ignore next */
    (cov_nzrg0jhkv().s[62]++, {
      name: 'ai-crypto-trading-agent',
      description: 'AI Cryptocurrency Trading Agent - Main Service',
      execPath: '/usr/bin/node',
      workingDirectory: process.cwd(),
      environment: {
        NODE_ENV: 'production',
        NODE_OPTIONS: '--max-old-space-size=8192',
        PATH: '/usr/local/bin:/usr/bin:/bin'
      },
      user:
      /* istanbul ignore next */
      (cov_nzrg0jhkv().b[24][0]++, process.env.SERVICE_USER) ||
      /* istanbul ignore next */
      (cov_nzrg0jhkv().b[24][1]++, 'trading'),
      group:
      /* istanbul ignore next */
      (cov_nzrg0jhkv().b[25][0]++, process.env.SERVICE_GROUP) ||
      /* istanbul ignore next */
      (cov_nzrg0jhkv().b[25][1]++, 'trading'),
      restartPolicy: 'always',
      restartDelay: 10,
      maxRestartAttempts: 5,
      dependencies: ['network.target', 'ssh-tunnel.service'],
      requires: ['network.target'],
      after: ['network.target', 'ssh-tunnel.service', 'system-monitor.service'],
      before: []
    });
    /* istanbul ignore next */
    cov_nzrg0jhkv().s[63]++;
    this.services.set(tradingServiceConfig.name, tradingServiceConfig);
    /* istanbul ignore next */
    cov_nzrg0jhkv().s[64]++;
    this.initializeRecoveryStatus(tradingServiceConfig.name);
  }
  /**
   * Create supporting service configurations
   *
   * @returns Promise<void>
   */
  async createSupportingServiceConfigs() {
    /* istanbul ignore next */
    cov_nzrg0jhkv().f[14]++;
    // SSH Tunnel Service
    const sshTunnelConfig =
    /* istanbul ignore next */
    (cov_nzrg0jhkv().s[65]++, {
      name: 'ssh-tunnel',
      description: 'SSH Tunnel to Oracle Free Tier',
      execPath: '/usr/bin/ssh',
      workingDirectory: '/home/trading',
      environment: {
        SSH_AUTH_SOCK: '',
        PATH: '/usr/local/bin:/usr/bin:/bin'
      },
      user: 'trading',
      group: 'trading',
      restartPolicy: 'always',
      restartDelay: 5,
      maxRestartAttempts: 10,
      dependencies: ['network.target'],
      requires: ['network.target'],
      after: ['network.target'],
      before: ['ai-crypto-trading-agent.service']
    });
    // System Monitor Service
    const systemMonitorConfig =
    /* istanbul ignore next */
    (cov_nzrg0jhkv().s[66]++, {
      name: 'system-monitor',
      description: 'Intel NUC System Monitor',
      execPath: '/usr/bin/node',
      workingDirectory: process.cwd(),
      environment: {
        NODE_ENV: 'production',
        PATH: '/usr/local/bin:/usr/bin:/bin'
      },
      user: 'trading',
      group: 'trading',
      restartPolicy: 'always',
      restartDelay: 5,
      maxRestartAttempts: 3,
      dependencies: ['network.target'],
      requires: [],
      after: ['network.target'],
      before: ['ai-crypto-trading-agent.service']
    });
    /* istanbul ignore next */
    cov_nzrg0jhkv().s[67]++;
    this.services.set(sshTunnelConfig.name, sshTunnelConfig);
    /* istanbul ignore next */
    cov_nzrg0jhkv().s[68]++;
    this.services.set(systemMonitorConfig.name, systemMonitorConfig);
    /* istanbul ignore next */
    cov_nzrg0jhkv().s[69]++;
    this.initializeRecoveryStatus(sshTunnelConfig.name);
    /* istanbul ignore next */
    cov_nzrg0jhkv().s[70]++;
    this.initializeRecoveryStatus(systemMonitorConfig.name);
  }
  /**
   * Initialize recovery status for a service
   *
   * @param serviceName Service name
   */
  initializeRecoveryStatus(serviceName) {
    /* istanbul ignore next */
    cov_nzrg0jhkv().f[15]++;
    cov_nzrg0jhkv().s[71]++;
    this.recoveryStatus.set(serviceName, {
      serviceName,
      status: 'unknown',
      lastRestart: null,
      restartCount: 0,
      consecutiveFailures: 0,
      lastFailureReason: null,
      recoveryActions: [],
      healthStatus: 'unknown',
      lastHealthCheck: null
    });
  }
  /**
   * Generate systemd service files
   *
   * @returns Promise<void>
   */
  async generateSystemdServiceFiles() {
    /* istanbul ignore next */
    cov_nzrg0jhkv().f[16]++;
    cov_nzrg0jhkv().s[72]++;
    try {
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[73]++;
      logger_1.logger.info('📝 Generating systemd service files...');
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[74]++;
      for (const [serviceName, config] of this.services) {
        const serviceFileContent =
        /* istanbul ignore next */
        (cov_nzrg0jhkv().s[75]++, this.generateServiceFileContent(config));
        const serviceFilePath =
        /* istanbul ignore next */
        (cov_nzrg0jhkv().s[76]++, `/etc/systemd/system/${serviceName}.service`);
        // Write service file (would need sudo permissions)
        /* istanbul ignore next */
        cov_nzrg0jhkv().s[77]++;
        try {
          const {
            writeFileSync
          } =
          /* istanbul ignore next */
          (cov_nzrg0jhkv().s[78]++, await Promise.resolve().then(() => {
            /* istanbul ignore next */
            cov_nzrg0jhkv().f[17]++;
            cov_nzrg0jhkv().s[79]++;
            return __importStar(require('fs'));
          }));
          const {
            execSync
          } =
          /* istanbul ignore next */
          (cov_nzrg0jhkv().s[80]++, await Promise.resolve().then(() => {
            /* istanbul ignore next */
            cov_nzrg0jhkv().f[18]++;
            cov_nzrg0jhkv().s[81]++;
            return __importStar(require('child_process'));
          }));
          // Create temporary file first
          const tempPath =
          /* istanbul ignore next */
          (cov_nzrg0jhkv().s[82]++, `/tmp/${serviceName}.service`);
          /* istanbul ignore next */
          cov_nzrg0jhkv().s[83]++;
          writeFileSync(tempPath, serviceFileContent);
          // Move to systemd directory with sudo
          /* istanbul ignore next */
          cov_nzrg0jhkv().s[84]++;
          execSync(`sudo mv ${tempPath} ${serviceFilePath}`, {
            stdio: 'pipe'
          });
          /* istanbul ignore next */
          cov_nzrg0jhkv().s[85]++;
          execSync(`sudo chmod 644 ${serviceFilePath}`, {
            stdio: 'pipe'
          });
          /* istanbul ignore next */
          cov_nzrg0jhkv().s[86]++;
          logger_1.logger.info(`✅ Created service file: ${serviceFilePath}`);
        } catch (error) {
          /* istanbul ignore next */
          cov_nzrg0jhkv().s[87]++;
          logger_1.logger.warn(`⚠️ Could not create service file for ${serviceName}:`, error);
          // Continue with other services
        }
      }
      // Reload systemd daemon
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[88]++;
      try {
        const {
          execSync
        } =
        /* istanbul ignore next */
        (cov_nzrg0jhkv().s[89]++, await Promise.resolve().then(() => {
          /* istanbul ignore next */
          cov_nzrg0jhkv().f[19]++;
          cov_nzrg0jhkv().s[90]++;
          return __importStar(require('child_process'));
        }));
        /* istanbul ignore next */
        cov_nzrg0jhkv().s[91]++;
        execSync('sudo systemctl daemon-reload', {
          stdio: 'pipe'
        });
        /* istanbul ignore next */
        cov_nzrg0jhkv().s[92]++;
        logger_1.logger.info('✅ Systemd daemon reloaded');
      } catch (error) {
        /* istanbul ignore next */
        cov_nzrg0jhkv().s[93]++;
        logger_1.logger.warn('⚠️ Could not reload systemd daemon:', error);
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[94]++;
      logger_1.logger.error('❌ Failed to generate systemd service files:', error);
    }
  }
  /**
   * Generate systemd service file content
   *
   * @param config Service configuration
   * @returns string Service file content
   */
  generateServiceFileContent(config) {
    /* istanbul ignore next */
    cov_nzrg0jhkv().f[20]++;
    const environmentVars =
    /* istanbul ignore next */
    (cov_nzrg0jhkv().s[95]++, Object.entries(config.environment).map(([key, value]) => {
      /* istanbul ignore next */
      cov_nzrg0jhkv().f[21]++;
      cov_nzrg0jhkv().s[96]++;
      return `Environment=${key}=${value}`;
    }).join('\n'));
    const dependencies =
    /* istanbul ignore next */
    (cov_nzrg0jhkv().s[97]++, config.dependencies.length > 0 ?
    /* istanbul ignore next */
    (cov_nzrg0jhkv().b[26][0]++, `Wants=${config.dependencies.join(' ')}\n`) :
    /* istanbul ignore next */
    (cov_nzrg0jhkv().b[26][1]++, ''));
    const requires =
    /* istanbul ignore next */
    (cov_nzrg0jhkv().s[98]++, config.requires.length > 0 ?
    /* istanbul ignore next */
    (cov_nzrg0jhkv().b[27][0]++, `Requires=${config.requires.join(' ')}\n`) :
    /* istanbul ignore next */
    (cov_nzrg0jhkv().b[27][1]++, ''));
    const after =
    /* istanbul ignore next */
    (cov_nzrg0jhkv().s[99]++, config.after.length > 0 ?
    /* istanbul ignore next */
    (cov_nzrg0jhkv().b[28][0]++, `After=${config.after.join(' ')}\n`) :
    /* istanbul ignore next */
    (cov_nzrg0jhkv().b[28][1]++, ''));
    const before =
    /* istanbul ignore next */
    (cov_nzrg0jhkv().s[100]++, config.before.length > 0 ?
    /* istanbul ignore next */
    (cov_nzrg0jhkv().b[29][0]++, `Before=${config.before.join(' ')}\n`) :
    /* istanbul ignore next */
    (cov_nzrg0jhkv().b[29][1]++, ''));
    /* istanbul ignore next */
    cov_nzrg0jhkv().s[101]++;
    return `[Unit]
Description=${config.description}
${dependencies}${requires}${after}${before}

[Service]
Type=simple
User=${config.user}
Group=${config.group}
WorkingDirectory=${config.workingDirectory}
ExecStart=${this.generateExecStart(config)}
Restart=${config.restartPolicy}
RestartSec=${config.restartDelay}
StartLimitBurst=${config.maxRestartAttempts}
StartLimitIntervalSec=300
${environmentVars}

# Security settings
NoNewPrivileges=true
ProtectSystem=strict
ProtectHome=true
ReadWritePaths=${config.workingDirectory}
PrivateTmp=true

# Resource limits
LimitNOFILE=65536
LimitNPROC=4096

[Install]
WantedBy=multi-user.target
`;
  }
  /**
   * Generate ExecStart command for service
   *
   * @param config Service configuration
   * @returns string ExecStart command
   */
  generateExecStart(config) {
    /* istanbul ignore next */
    cov_nzrg0jhkv().f[22]++;
    cov_nzrg0jhkv().s[102]++;
    switch (config.name) {
      case 'ai-crypto-trading-agent':
        /* istanbul ignore next */
        cov_nzrg0jhkv().b[30][0]++;
        cov_nzrg0jhkv().s[103]++;
        return `${config.execPath} ${config.workingDirectory}/dist/index.js`;
      case 'ssh-tunnel':
        /* istanbul ignore next */
        cov_nzrg0jhkv().b[30][1]++;
        const oracleIP =
        /* istanbul ignore next */
        (cov_nzrg0jhkv().s[104]++,
        /* istanbul ignore next */
        (cov_nzrg0jhkv().b[31][0]++, process.env.ORACLE_IP) ||
        /* istanbul ignore next */
        (cov_nzrg0jhkv().b[31][1]++, '168.138.104.117'));
        const sshUser =
        /* istanbul ignore next */
        (cov_nzrg0jhkv().s[105]++,
        /* istanbul ignore next */
        (cov_nzrg0jhkv().b[32][0]++, process.env.SSH_USER) ||
        /* istanbul ignore next */
        (cov_nzrg0jhkv().b[32][1]++, 'ubuntu'));
        const sshKey =
        /* istanbul ignore next */
        (cov_nzrg0jhkv().s[106]++,
        /* istanbul ignore next */
        (cov_nzrg0jhkv().b[33][0]++, process.env.SSH_KEY_PATH) ||
        /* istanbul ignore next */
        (cov_nzrg0jhkv().b[33][1]++, '/home/trading/.ssh/id_rsa'));
        const localPort =
        /* istanbul ignore next */
        (cov_nzrg0jhkv().s[107]++,
        /* istanbul ignore next */
        (cov_nzrg0jhkv().b[34][0]++, process.env.LOCAL_TUNNEL_PORT) ||
        /* istanbul ignore next */
        (cov_nzrg0jhkv().b[34][1]++, '8080'));
        const remotePort =
        /* istanbul ignore next */
        (cov_nzrg0jhkv().s[108]++,
        /* istanbul ignore next */
        (cov_nzrg0jhkv().b[35][0]++, process.env.REMOTE_TUNNEL_PORT) ||
        /* istanbul ignore next */
        (cov_nzrg0jhkv().b[35][1]++, '80'));
        /* istanbul ignore next */
        cov_nzrg0jhkv().s[109]++;
        return `${config.execPath} -N -L ${localPort}:localhost:${remotePort} -i ${sshKey} ${sshUser}@${oracleIP}`;
      case 'system-monitor':
        /* istanbul ignore next */
        cov_nzrg0jhkv().b[30][2]++;
        cov_nzrg0jhkv().s[110]++;
        return `${config.execPath} ${config.workingDirectory}/dist/scripts/system-monitor.js`;
      default:
        /* istanbul ignore next */
        cov_nzrg0jhkv().b[30][3]++;
        cov_nzrg0jhkv().s[111]++;
        return `${config.execPath} ${config.workingDirectory}/dist/index.js`;
    }
  }
  /**
   * Start failure detection monitoring
   *
   * @returns Promise<void>
   */
  async startFailureDetection() {
    /* istanbul ignore next */
    cov_nzrg0jhkv().f[23]++;
    cov_nzrg0jhkv().s[112]++;
    try {
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[113]++;
      logger_1.logger.info('🔍 Starting failure detection monitoring...');
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[114]++;
      if (this.failureDetectionConfig.enableHealthCheck) {
        /* istanbul ignore next */
        cov_nzrg0jhkv().b[36][0]++;
        cov_nzrg0jhkv().s[115]++;
        // Start health checks for each service
        for (const serviceName of this.services.keys()) {
          /* istanbul ignore next */
          cov_nzrg0jhkv().s[116]++;
          this.startHealthCheck(serviceName);
        }
      } else
      /* istanbul ignore next */
      {
        cov_nzrg0jhkv().b[36][1]++;
      }
      // Start general monitoring
      cov_nzrg0jhkv().s[117]++;
      this.monitoringInterval = setInterval(async () => {
        /* istanbul ignore next */
        cov_nzrg0jhkv().f[24]++;
        cov_nzrg0jhkv().s[118]++;
        try {
          /* istanbul ignore next */
          cov_nzrg0jhkv().s[119]++;
          await this.performFailureDetection();
        } catch (error) {
          /* istanbul ignore next */
          cov_nzrg0jhkv().s[120]++;
          logger_1.logger.error('❌ Failure detection error:', error);
        }
      }, this.failureDetectionConfig.healthCheckInterval);
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[121]++;
      logger_1.logger.info('✅ Failure detection monitoring started');
    } catch (error) {
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[122]++;
      logger_1.logger.error('❌ Failed to start failure detection:', error);
    }
  }
  /**
   * Start health check for a specific service
   *
   * @param serviceName Service name
   */
  startHealthCheck(serviceName) {
    /* istanbul ignore next */
    cov_nzrg0jhkv().f[25]++;
    const interval =
    /* istanbul ignore next */
    (cov_nzrg0jhkv().s[123]++, setInterval(async () => {
      /* istanbul ignore next */
      cov_nzrg0jhkv().f[26]++;
      cov_nzrg0jhkv().s[124]++;
      try {
        /* istanbul ignore next */
        cov_nzrg0jhkv().s[125]++;
        await this.performHealthCheck(serviceName);
      } catch (error) {
        /* istanbul ignore next */
        cov_nzrg0jhkv().s[126]++;
        logger_1.logger.error(`❌ Health check failed for ${serviceName}:`, error);
      }
    }, this.failureDetectionConfig.healthCheckInterval));
    /* istanbul ignore next */
    cov_nzrg0jhkv().s[127]++;
    this.healthCheckIntervals.set(serviceName, interval);
  }
  /**
   * Perform health check for a service
   *
   * @param serviceName Service name
   * @returns Promise<void>
   */
  async performHealthCheck(serviceName) {
    /* istanbul ignore next */
    cov_nzrg0jhkv().f[27]++;
    cov_nzrg0jhkv().s[128]++;
    try {
      const status =
      /* istanbul ignore next */
      (cov_nzrg0jhkv().s[129]++, this.recoveryStatus.get(serviceName));
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[130]++;
      if (!status) {
        /* istanbul ignore next */
        cov_nzrg0jhkv().b[37][0]++;
        cov_nzrg0jhkv().s[131]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_nzrg0jhkv().b[37][1]++;
      }
      // Check service status using systemctl
      const isHealthy =
      /* istanbul ignore next */
      (cov_nzrg0jhkv().s[132]++, await this.checkServiceHealth(serviceName));
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[133]++;
      status.lastHealthCheck = new Date();
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[134]++;
      if (isHealthy) {
        /* istanbul ignore next */
        cov_nzrg0jhkv().b[38][0]++;
        cov_nzrg0jhkv().s[135]++;
        status.healthStatus = 'healthy';
        /* istanbul ignore next */
        cov_nzrg0jhkv().s[136]++;
        status.consecutiveFailures = 0;
      } else {
        /* istanbul ignore next */
        cov_nzrg0jhkv().b[38][1]++;
        cov_nzrg0jhkv().s[137]++;
        status.healthStatus = 'unhealthy';
        /* istanbul ignore next */
        cov_nzrg0jhkv().s[138]++;
        status.consecutiveFailures++;
        /* istanbul ignore next */
        cov_nzrg0jhkv().s[139]++;
        logger_1.logger.warn(`⚠️ Health check failed for ${serviceName} (${status.consecutiveFailures}/${this.failureDetectionConfig.maxConsecutiveFailures})`);
        // Trigger recovery if threshold exceeded
        /* istanbul ignore next */
        cov_nzrg0jhkv().s[140]++;
        if (status.consecutiveFailures >= this.failureDetectionConfig.maxConsecutiveFailures) {
          /* istanbul ignore next */
          cov_nzrg0jhkv().b[39][0]++;
          cov_nzrg0jhkv().s[141]++;
          await this.triggerServiceRecovery(serviceName, 'consecutive_health_check_failures');
        } else
        /* istanbul ignore next */
        {
          cov_nzrg0jhkv().b[39][1]++;
        }
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[142]++;
      logger_1.logger.error(`❌ Health check error for ${serviceName}:`, error);
    }
  }
  /**
   * Check service health using systemctl
   *
   * @param serviceName Service name
   * @returns Promise<boolean> True if healthy
   */
  async checkServiceHealth(serviceName) {
    /* istanbul ignore next */
    cov_nzrg0jhkv().f[28]++;
    cov_nzrg0jhkv().s[143]++;
    try {
      const {
        execSync
      } =
      /* istanbul ignore next */
      (cov_nzrg0jhkv().s[144]++, await Promise.resolve().then(() => {
        /* istanbul ignore next */
        cov_nzrg0jhkv().f[29]++;
        cov_nzrg0jhkv().s[145]++;
        return __importStar(require('child_process'));
      }));
      // Check if service is active
      const result =
      /* istanbul ignore next */
      (cov_nzrg0jhkv().s[146]++, execSync(`systemctl is-active ${serviceName}`, {
        stdio: 'pipe',
        encoding: 'utf8'
      }));
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[147]++;
      return result.trim() === 'active';
    } catch (error) {
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[148]++;
      return false;
    }
  }
  /**
   * Perform comprehensive failure detection
   *
   * @returns Promise<void>
   */
  async performFailureDetection() {
    /* istanbul ignore next */
    cov_nzrg0jhkv().f[30]++;
    cov_nzrg0jhkv().s[149]++;
    try {
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[150]++;
      for (const serviceName of this.services.keys()) {
        const status =
        /* istanbul ignore next */
        (cov_nzrg0jhkv().s[151]++, this.recoveryStatus.get(serviceName));
        /* istanbul ignore next */
        cov_nzrg0jhkv().s[152]++;
        if (!status) {
          /* istanbul ignore next */
          cov_nzrg0jhkv().b[40][0]++;
          cov_nzrg0jhkv().s[153]++;
          continue;
        } else
        /* istanbul ignore next */
        {
          cov_nzrg0jhkv().b[40][1]++;
        }
        // Update service status
        cov_nzrg0jhkv().s[154]++;
        await this.updateServiceStatus(serviceName);
        // Check for resource issues
        /* istanbul ignore next */
        cov_nzrg0jhkv().s[155]++;
        if (this.failureDetectionConfig.enableResourceMonitoring) {
          /* istanbul ignore next */
          cov_nzrg0jhkv().b[41][0]++;
          cov_nzrg0jhkv().s[156]++;
          await this.checkResourceUsage(serviceName);
        } else
        /* istanbul ignore next */
        {
          cov_nzrg0jhkv().b[41][1]++;
        }
        // Check for log errors
        cov_nzrg0jhkv().s[157]++;
        if (this.failureDetectionConfig.enableLogMonitoring) {
          /* istanbul ignore next */
          cov_nzrg0jhkv().b[42][0]++;
          cov_nzrg0jhkv().s[158]++;
          await this.checkLogErrors(serviceName);
        } else
        /* istanbul ignore next */
        {
          cov_nzrg0jhkv().b[42][1]++;
        }
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[159]++;
      logger_1.logger.error('❌ Failure detection error:', error);
    }
  }
  /**
   * Update service status
   *
   * @param serviceName Service name
   * @returns Promise<void>
   */
  async updateServiceStatus(serviceName) {
    /* istanbul ignore next */
    cov_nzrg0jhkv().f[31]++;
    cov_nzrg0jhkv().s[160]++;
    try {
      const {
        execSync
      } =
      /* istanbul ignore next */
      (cov_nzrg0jhkv().s[161]++, await Promise.resolve().then(() => {
        /* istanbul ignore next */
        cov_nzrg0jhkv().f[32]++;
        cov_nzrg0jhkv().s[162]++;
        return __importStar(require('child_process'));
      }));
      const status =
      /* istanbul ignore next */
      (cov_nzrg0jhkv().s[163]++, this.recoveryStatus.get(serviceName));
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[164]++;
      if (!status) {
        /* istanbul ignore next */
        cov_nzrg0jhkv().b[43][0]++;
        cov_nzrg0jhkv().s[165]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_nzrg0jhkv().b[43][1]++;
      }
      // Get service status
      const result =
      /* istanbul ignore next */
      (cov_nzrg0jhkv().s[166]++, execSync(`systemctl show ${serviceName} --property=ActiveState,SubState`, {
        stdio: 'pipe',
        encoding: 'utf8'
      }));
      const lines =
      /* istanbul ignore next */
      (cov_nzrg0jhkv().s[167]++, result.split('\n'));
      const activeState =
      /* istanbul ignore next */
      (cov_nzrg0jhkv().s[168]++, lines.find(line => {
        /* istanbul ignore next */
        cov_nzrg0jhkv().f[33]++;
        cov_nzrg0jhkv().s[169]++;
        return line.startsWith('ActiveState=');
      })?.split('=')[1]);
      const subState =
      /* istanbul ignore next */
      (cov_nzrg0jhkv().s[170]++, lines.find(line => {
        /* istanbul ignore next */
        cov_nzrg0jhkv().f[34]++;
        cov_nzrg0jhkv().s[171]++;
        return line.startsWith('SubState=');
      })?.split('=')[1]);
      // Map systemd states to our status
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[172]++;
      if (
      /* istanbul ignore next */
      (cov_nzrg0jhkv().b[45][0]++, activeState === 'active') &&
      /* istanbul ignore next */
      (cov_nzrg0jhkv().b[45][1]++, subState === 'running')) {
        /* istanbul ignore next */
        cov_nzrg0jhkv().b[44][0]++;
        cov_nzrg0jhkv().s[173]++;
        status.status = 'running';
      } else {
        /* istanbul ignore next */
        cov_nzrg0jhkv().b[44][1]++;
        cov_nzrg0jhkv().s[174]++;
        if (activeState === 'failed') {
          /* istanbul ignore next */
          cov_nzrg0jhkv().b[46][0]++;
          cov_nzrg0jhkv().s[175]++;
          status.status = 'failed';
          /* istanbul ignore next */
          cov_nzrg0jhkv().s[176]++;
          if (status.lastFailureReason !== 'systemd_failed') {
            /* istanbul ignore next */
            cov_nzrg0jhkv().b[47][0]++;
            cov_nzrg0jhkv().s[177]++;
            await this.triggerServiceRecovery(serviceName, 'systemd_failed');
          } else
          /* istanbul ignore next */
          {
            cov_nzrg0jhkv().b[47][1]++;
          }
        } else {
          /* istanbul ignore next */
          cov_nzrg0jhkv().b[46][1]++;
          cov_nzrg0jhkv().s[178]++;
          if (activeState === 'activating') {
            /* istanbul ignore next */
            cov_nzrg0jhkv().b[48][0]++;
            cov_nzrg0jhkv().s[179]++;
            status.status = 'restarting';
          } else {
            /* istanbul ignore next */
            cov_nzrg0jhkv().b[48][1]++;
            cov_nzrg0jhkv().s[180]++;
            status.status = 'stopped';
          }
        }
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[181]++;
      logger_1.logger.error(`❌ Failed to update status for ${serviceName}:`, error);
    }
  }
  /**
   * Check resource usage for a service
   *
   * @param serviceName Service name
   * @returns Promise<void>
   */
  async checkResourceUsage(serviceName) {
    /* istanbul ignore next */
    cov_nzrg0jhkv().f[35]++;
    cov_nzrg0jhkv().s[182]++;
    try {
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[183]++;
      // This would integrate with system monitoring to check resource usage
      // For now, we'll implement a basic check
      if (serviceName === 'ai-crypto-trading-agent') {
        /* istanbul ignore next */
        cov_nzrg0jhkv().b[49][0]++;
        const memoryUsage =
        /* istanbul ignore next */
        (cov_nzrg0jhkv().s[184]++, process.memoryUsage());
        const memoryUsagePercent =
        /* istanbul ignore next */
        (cov_nzrg0jhkv().s[185]++, memoryUsage.heapUsed / memoryUsage.heapTotal * 100);
        /* istanbul ignore next */
        cov_nzrg0jhkv().s[186]++;
        if (memoryUsagePercent > this.failureDetectionConfig.memoryThreshold) {
          /* istanbul ignore next */
          cov_nzrg0jhkv().b[50][0]++;
          cov_nzrg0jhkv().s[187]++;
          await this.triggerServiceRecovery(serviceName, `high_memory_usage_${memoryUsagePercent.toFixed(1)}%`);
        } else
        /* istanbul ignore next */
        {
          cov_nzrg0jhkv().b[50][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_nzrg0jhkv().b[49][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[188]++;
      logger_1.logger.error(`❌ Resource usage check failed for ${serviceName}:`, error);
    }
  }
  /**
   * Check for log errors
   *
   * @param serviceName Service name
   * @returns Promise<void>
   */
  async checkLogErrors(serviceName) {
    /* istanbul ignore next */
    cov_nzrg0jhkv().f[36]++;
    cov_nzrg0jhkv().s[189]++;
    try {
      const {
        execSync
      } =
      /* istanbul ignore next */
      (cov_nzrg0jhkv().s[190]++, await Promise.resolve().then(() => {
        /* istanbul ignore next */
        cov_nzrg0jhkv().f[37]++;
        cov_nzrg0jhkv().s[191]++;
        return __importStar(require('child_process'));
      }));
      // Check recent journal entries for error patterns
      const result =
      /* istanbul ignore next */
      (cov_nzrg0jhkv().s[192]++, execSync(`journalctl -u ${serviceName} --since "5 minutes ago" --no-pager`, {
        stdio: 'pipe',
        encoding: 'utf8'
      }));
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[193]++;
      for (const pattern of this.failureDetectionConfig.errorPatterns) {
        /* istanbul ignore next */
        cov_nzrg0jhkv().s[194]++;
        if (result.includes(pattern)) {
          /* istanbul ignore next */
          cov_nzrg0jhkv().b[51][0]++;
          cov_nzrg0jhkv().s[195]++;
          await this.triggerServiceRecovery(serviceName, `log_error_pattern_${pattern}`);
          /* istanbul ignore next */
          cov_nzrg0jhkv().s[196]++;
          break;
        } else
        /* istanbul ignore next */
        {
          cov_nzrg0jhkv().b[51][1]++;
        }
      }
    } catch (error) {
      // Ignore errors - service might not exist yet
    }
  }
  /**
   * Trigger service recovery
   *
   * @param serviceName Service name
   * @param reason Failure reason
   * @returns Promise<void>
   */
  async triggerServiceRecovery(serviceName, reason) {
    /* istanbul ignore next */
    cov_nzrg0jhkv().f[38]++;
    cov_nzrg0jhkv().s[197]++;
    try {
      const status =
      /* istanbul ignore next */
      (cov_nzrg0jhkv().s[198]++, this.recoveryStatus.get(serviceName));
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[199]++;
      if (!status) {
        /* istanbul ignore next */
        cov_nzrg0jhkv().b[52][0]++;
        cov_nzrg0jhkv().s[200]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_nzrg0jhkv().b[52][1]++;
      }
      cov_nzrg0jhkv().s[201]++;
      logger_1.logger.warn(`🔄 Triggering recovery for ${serviceName} - Reason: ${reason}`);
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[202]++;
      status.lastFailureReason = reason;
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[203]++;
      status.restartCount++;
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[204]++;
      status.lastRestart = new Date();
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[205]++;
      status.recoveryActions.push(`restart_${Date.now()}_${reason}`);
      // Perform recovery actions
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[206]++;
      await this.performRecoveryActions(serviceName, reason);
      // Audit log
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[207]++;
      await audit_service_1.auditService.createAuditEntry({
        auditId: `service_recovery_${serviceName}_${Date.now()}`,
        eventType: 'SERVICE_RECOVERY_TRIGGERED',
        actor: 'AUTO_RESTART_MANAGER',
        resource: `SERVICE_${serviceName.toUpperCase()}`,
        action: 'TRIGGER_RECOVERY',
        result: 'SUCCESS',
        timestamp: new Date(),
        auditData: {
          serviceName,
          reason,
          restartCount: status.restartCount,
          consecutiveFailures: status.consecutiveFailures
        }
      });
      // Emit recovery event
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[208]++;
      this.emit('serviceRecovery', {
        serviceName,
        reason,
        status
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[209]++;
      logger_1.logger.error(`❌ Service recovery failed for ${serviceName}:`, error);
    }
  }
  /**
   * Perform recovery actions for a service
   *
   * @param serviceName Service name
   * @param reason Failure reason
   * @returns Promise<void>
   */
  async performRecoveryActions(serviceName, reason) {
    /* istanbul ignore next */
    cov_nzrg0jhkv().f[39]++;
    cov_nzrg0jhkv().s[210]++;
    try {
      const {
        execSync
      } =
      /* istanbul ignore next */
      (cov_nzrg0jhkv().s[211]++, await Promise.resolve().then(() => {
        /* istanbul ignore next */
        cov_nzrg0jhkv().f[40]++;
        cov_nzrg0jhkv().s[212]++;
        return __importStar(require('child_process'));
      }));
      // Stop service gracefully first
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[213]++;
      try {
        /* istanbul ignore next */
        cov_nzrg0jhkv().s[214]++;
        execSync(`sudo systemctl stop ${serviceName}`, {
          stdio: 'pipe',
          timeout: 10000
        });
        /* istanbul ignore next */
        cov_nzrg0jhkv().s[215]++;
        await new Promise(resolve => {
          /* istanbul ignore next */
          cov_nzrg0jhkv().f[41]++;
          cov_nzrg0jhkv().s[216]++;
          return setTimeout(resolve, 2000);
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_nzrg0jhkv().s[217]++;
        logger_1.logger.warn(`⚠️ Graceful stop failed for ${serviceName}, forcing stop`);
      }
      // Force kill if necessary
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[218]++;
      try {
        /* istanbul ignore next */
        cov_nzrg0jhkv().s[219]++;
        execSync(`sudo systemctl kill ${serviceName}`, {
          stdio: 'pipe'
        });
        /* istanbul ignore next */
        cov_nzrg0jhkv().s[220]++;
        await new Promise(resolve => {
          /* istanbul ignore next */
          cov_nzrg0jhkv().f[42]++;
          cov_nzrg0jhkv().s[221]++;
          return setTimeout(resolve, 1000);
        });
      } catch (error) {
        // Ignore - service might already be stopped
      }
      // Clear any failed state
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[222]++;
      try {
        /* istanbul ignore next */
        cov_nzrg0jhkv().s[223]++;
        execSync(`sudo systemctl reset-failed ${serviceName}`, {
          stdio: 'pipe'
        });
      } catch (error) {
        // Ignore - service might not be in failed state
      }
      // Restart service
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[224]++;
      execSync(`sudo systemctl start ${serviceName}`, {
        stdio: 'pipe'
      });
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[225]++;
      logger_1.logger.info(`✅ Service ${serviceName} restarted successfully`);
    } catch (error) {
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[226]++;
      logger_1.logger.error(`❌ Recovery actions failed for ${serviceName}:`, error);
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[227]++;
      throw error;
    }
  }
  /**
   * Setup graceful shutdown handlers
   */
  setupGracefulShutdownHandlers() {
    /* istanbul ignore next */
    cov_nzrg0jhkv().f[43]++;
    cov_nzrg0jhkv().s[228]++;
    // Handle shutdown signals
    process.on('SIGTERM', () => {
      /* istanbul ignore next */
      cov_nzrg0jhkv().f[44]++;
      cov_nzrg0jhkv().s[229]++;
      return this.handleGracefulShutdown('SIGTERM');
    });
    /* istanbul ignore next */
    cov_nzrg0jhkv().s[230]++;
    process.on('SIGINT', () => {
      /* istanbul ignore next */
      cov_nzrg0jhkv().f[45]++;
      cov_nzrg0jhkv().s[231]++;
      return this.handleGracefulShutdown('SIGINT');
    });
    /* istanbul ignore next */
    cov_nzrg0jhkv().s[232]++;
    process.on('SIGHUP', () => {
      /* istanbul ignore next */
      cov_nzrg0jhkv().f[46]++;
      cov_nzrg0jhkv().s[233]++;
      return this.handleGracefulShutdown('SIGHUP');
    });
    /* istanbul ignore next */
    cov_nzrg0jhkv().s[234]++;
    logger_1.logger.info('✅ Graceful shutdown handlers configured');
  }
  /**
   * Handle graceful shutdown
   *
   * @param signal Shutdown signal
   * @returns Promise<void>
   */
  async handleGracefulShutdown(signal) {
    /* istanbul ignore next */
    cov_nzrg0jhkv().f[47]++;
    cov_nzrg0jhkv().s[235]++;
    if (this.isShuttingDown) {
      /* istanbul ignore next */
      cov_nzrg0jhkv().b[53][0]++;
      cov_nzrg0jhkv().s[236]++;
      logger_1.logger.warn('⚠️ Shutdown already in progress');
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[237]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_nzrg0jhkv().b[53][1]++;
    }
    cov_nzrg0jhkv().s[238]++;
    this.isShuttingDown = true;
    /* istanbul ignore next */
    cov_nzrg0jhkv().s[239]++;
    logger_1.logger.info(`🛑 Graceful shutdown initiated - Signal: ${signal}`);
    /* istanbul ignore next */
    cov_nzrg0jhkv().s[240]++;
    try {
      const shutdownPromise =
      /* istanbul ignore next */
      (cov_nzrg0jhkv().s[241]++, this.performGracefulShutdown());
      const timeoutPromise =
      /* istanbul ignore next */
      (cov_nzrg0jhkv().s[242]++, new Promise((_, reject) => {
        /* istanbul ignore next */
        cov_nzrg0jhkv().f[48]++;
        cov_nzrg0jhkv().s[243]++;
        return setTimeout(() => {
          /* istanbul ignore next */
          cov_nzrg0jhkv().f[49]++;
          cov_nzrg0jhkv().s[244]++;
          return reject(new Error('Shutdown timeout'));
        }, this.shutdownConfig.timeout);
      }));
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[245]++;
      await Promise.race([shutdownPromise, timeoutPromise]);
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[246]++;
      logger_1.logger.info('✅ Graceful shutdown completed');
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[247]++;
      process.exit(0);
    } catch (error) {
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[248]++;
      logger_1.logger.error('❌ Graceful shutdown failed:', error);
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[249]++;
      process.exit(1);
    }
  }
  /**
   * Perform graceful shutdown procedures
   *
   * @returns Promise<void>
   */
  async performGracefulShutdown() {
    /* istanbul ignore next */
    cov_nzrg0jhkv().f[50]++;
    cov_nzrg0jhkv().s[250]++;
    try {
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[251]++;
      // Stop monitoring
      this.stopMonitoring();
      // Execute shutdown hooks
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[252]++;
      for (const hook of this.shutdownConfig.shutdownHooks) {
        /* istanbul ignore next */
        cov_nzrg0jhkv().s[253]++;
        try {
          /* istanbul ignore next */
          cov_nzrg0jhkv().s[254]++;
          await hook();
        } catch (error) {
          /* istanbul ignore next */
          cov_nzrg0jhkv().s[255]++;
          logger_1.logger.error('❌ Shutdown hook failed:', error);
        }
      }
      // Stop all managed services
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[256]++;
      await this.stopAllServices();
      // Send shutdown notifications
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[257]++;
      if (this.shutdownConfig.sendNotifications) {
        /* istanbul ignore next */
        cov_nzrg0jhkv().b[54][0]++;
        cov_nzrg0jhkv().s[258]++;
        await this.sendShutdownNotifications();
      } else
      /* istanbul ignore next */
      {
        cov_nzrg0jhkv().b[54][1]++;
      }
      // Create final audit entry
      cov_nzrg0jhkv().s[259]++;
      await audit_service_1.auditService.createAuditEntry({
        auditId: `graceful_shutdown_${Date.now()}`,
        eventType: 'GRACEFUL_SHUTDOWN_COMPLETED',
        actor: 'AUTO_RESTART_MANAGER',
        resource: 'SYSTEM',
        action: 'GRACEFUL_SHUTDOWN',
        result: 'SUCCESS',
        timestamp: new Date(),
        auditData: {
          shutdownConfig: this.shutdownConfig
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[260]++;
      logger_1.logger.error('❌ Graceful shutdown procedures failed:', error);
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[261]++;
      throw error;
    }
  }
  /**
   * Stop all monitoring activities
   */
  stopMonitoring() {
    /* istanbul ignore next */
    cov_nzrg0jhkv().f[51]++;
    cov_nzrg0jhkv().s[262]++;
    // Stop main monitoring interval
    if (this.monitoringInterval) {
      /* istanbul ignore next */
      cov_nzrg0jhkv().b[55][0]++;
      cov_nzrg0jhkv().s[263]++;
      clearInterval(this.monitoringInterval);
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[264]++;
      this.monitoringInterval = null;
    } else
    /* istanbul ignore next */
    {
      cov_nzrg0jhkv().b[55][1]++;
    }
    // Stop health check intervals
    cov_nzrg0jhkv().s[265]++;
    for (const [serviceName, interval] of this.healthCheckIntervals) {
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[266]++;
      clearInterval(interval);
    }
    /* istanbul ignore next */
    cov_nzrg0jhkv().s[267]++;
    this.healthCheckIntervals.clear();
    /* istanbul ignore next */
    cov_nzrg0jhkv().s[268]++;
    logger_1.logger.info('🛑 Monitoring stopped');
  }
  /**
   * Stop all managed services
   *
   * @returns Promise<void>
   */
  async stopAllServices() {
    /* istanbul ignore next */
    cov_nzrg0jhkv().f[52]++;
    cov_nzrg0jhkv().s[269]++;
    try {
      const {
        execSync
      } =
      /* istanbul ignore next */
      (cov_nzrg0jhkv().s[270]++, await Promise.resolve().then(() => {
        /* istanbul ignore next */
        cov_nzrg0jhkv().f[53]++;
        cov_nzrg0jhkv().s[271]++;
        return __importStar(require('child_process'));
      }));
      // Stop services in reverse dependency order
      const serviceOrder =
      /* istanbul ignore next */
      (cov_nzrg0jhkv().s[272]++, ['ai-crypto-trading-agent', 'system-monitor', 'ssh-tunnel']);
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[273]++;
      for (const serviceName of serviceOrder) {
        /* istanbul ignore next */
        cov_nzrg0jhkv().s[274]++;
        if (this.services.has(serviceName)) {
          /* istanbul ignore next */
          cov_nzrg0jhkv().b[56][0]++;
          cov_nzrg0jhkv().s[275]++;
          try {
            /* istanbul ignore next */
            cov_nzrg0jhkv().s[276]++;
            execSync(`sudo systemctl stop ${serviceName}`, {
              stdio: 'pipe',
              timeout: 10000
            });
            /* istanbul ignore next */
            cov_nzrg0jhkv().s[277]++;
            logger_1.logger.info(`✅ Stopped service: ${serviceName}`);
          } catch (error) {
            /* istanbul ignore next */
            cov_nzrg0jhkv().s[278]++;
            logger_1.logger.warn(`⚠️ Failed to stop service ${serviceName}:`, error);
          }
        } else
        /* istanbul ignore next */
        {
          cov_nzrg0jhkv().b[56][1]++;
        }
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[279]++;
      logger_1.logger.error('❌ Failed to stop services:', error);
    }
  }
  /**
   * Send shutdown notifications
   *
   * @returns Promise<void>
   */
  async sendShutdownNotifications() {
    /* istanbul ignore next */
    cov_nzrg0jhkv().f[54]++;
    cov_nzrg0jhkv().s[280]++;
    try {
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[281]++;
      // This would integrate with notification service
      logger_1.logger.info('📧 Shutdown notifications sent');
    } catch (error) {
      /* istanbul ignore next */
      cov_nzrg0jhkv().s[282]++;
      logger_1.logger.error('❌ Failed to send shutdown notifications:', error);
    }
  }
  /**
   * Add shutdown hook
   *
   * @param hook Shutdown hook function
   */
  addShutdownHook(hook) {
    /* istanbul ignore next */
    cov_nzrg0jhkv().f[55]++;
    cov_nzrg0jhkv().s[283]++;
    this.shutdownConfig.shutdownHooks.push(hook);
  }
  /**
   * Get recovery status for all services
   *
   * @returns Map<string, RecoveryStatus> Recovery status map
   */
  getRecoveryStatus() {
    /* istanbul ignore next */
    cov_nzrg0jhkv().f[56]++;
    cov_nzrg0jhkv().s[284]++;
    return new Map(this.recoveryStatus);
  }
  /**
   * Get recovery status for a specific service
   *
   * @param serviceName Service name
   * @returns RecoveryStatus | null Recovery status
   */
  getServiceRecoveryStatus(serviceName) {
    /* istanbul ignore next */
    cov_nzrg0jhkv().f[57]++;
    cov_nzrg0jhkv().s[285]++;
    return /* istanbul ignore next */(cov_nzrg0jhkv().b[57][0]++, this.recoveryStatus.get(serviceName)) ||
    /* istanbul ignore next */
    (cov_nzrg0jhkv().b[57][1]++, null);
  }
  /**
   * Get manager status
   *
   * @returns Object containing status information
   */
  getStatus() {
    /* istanbul ignore next */
    cov_nzrg0jhkv().f[58]++;
    const activeServices =
    /* istanbul ignore next */
    (cov_nzrg0jhkv().s[286]++, Array.from(this.recoveryStatus.values()).filter(status => {
      /* istanbul ignore next */
      cov_nzrg0jhkv().f[59]++;
      cov_nzrg0jhkv().s[287]++;
      return status.status === 'running';
    }).length);
    const failedServices =
    /* istanbul ignore next */
    (cov_nzrg0jhkv().s[288]++, Array.from(this.recoveryStatus.values()).filter(status => {
      /* istanbul ignore next */
      cov_nzrg0jhkv().f[60]++;
      cov_nzrg0jhkv().s[289]++;
      return status.status === 'failed';
    }).length);
    const totalRestarts =
    /* istanbul ignore next */
    (cov_nzrg0jhkv().s[290]++, Array.from(this.recoveryStatus.values()).reduce((sum, status) => {
      /* istanbul ignore next */
      cov_nzrg0jhkv().f[61]++;
      cov_nzrg0jhkv().s[291]++;
      return sum + status.restartCount;
    }, 0));
    /* istanbul ignore next */
    cov_nzrg0jhkv().s[292]++;
    return {
      isMonitoring: this.monitoringInterval !== null,
      servicesCount: this.services.size,
      activeServices,
      failedServices,
      totalRestarts,
      isShuttingDown: this.isShuttingDown,
      timestamp: Date.now()
    };
  }
}
/* istanbul ignore next */
cov_nzrg0jhkv().s[293]++;
exports.AutoRestartManager = AutoRestartManager;
// =============================================================================
// AUTO-RESTART AND RECOVERY SYSTEM NOTES
// =============================================================================
// 1. Systemd service file generation for automatic startup
// 2. Comprehensive failure detection and health monitoring
// 3. Automatic service recovery with exponential backoff
// 4. Graceful shutdown procedures with position closure
// 5. Dependency management for proper service startup order
// 6. Resource monitoring and automatic restart on threshold breach
// 7. Log monitoring for error pattern detection
// 8. Comprehensive audit logging for all recovery actions
// =============================================================================