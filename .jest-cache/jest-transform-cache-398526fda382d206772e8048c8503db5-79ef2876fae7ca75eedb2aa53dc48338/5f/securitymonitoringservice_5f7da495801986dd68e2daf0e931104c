720fee3a16dd4dbfc729a90c11112ca2
"use strict";

/**
 * =============================================================================
 * AI CRYPTO TRADING AGENT - CONTINUOUS SECURITY MONITORING SERVICE
 * =============================================================================
 *
 * This service provides 24/7 continuous security monitoring capabilities for
 * the AI crypto trading agent. It orchestrates real-time threat detection,
 * security event analysis, and automated incident response.
 *
 * CRITICAL SECURITY NOTICE:
 * This service is the central nervous system for security operations.
 * It must operate continuously without interruption to protect trading capital
 * and system integrity. All security events are monitored, analyzed, and
 * responded to in real-time.
 *
 * Monitoring Capabilities:
 * - 24/7 real-time security event monitoring
 * - Automated threat detection and analysis
 * - Security dashboard with threat visualization
 * - Security metrics and KPI tracking
 * - Incident correlation and pattern analysis
 * - Automated alerting and escalation
 *
 * @author AI Crypto Trading System
 * @version 1.0.0
 * @license PROPRIETARY
 * =============================================================================
 */
/* istanbul ignore next */
function cov_1fe1wefs5z() {
  var path = "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\security-monitoring-service.ts";
  var hash = "c03ed0300fff5ccc8a3cc4a139285a336306ff20";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\security-monitoring-service.ts",
    statementMap: {
      "0": {
        start: {
          line: 30,
          column: 0
        },
        end: {
          line: 30,
          column: 62
        }
      },
      "1": {
        start: {
          line: 31,
          column: 0
        },
        end: {
          line: 31,
          column: 137
        }
      },
      "2": {
        start: {
          line: 32,
          column: 17
        },
        end: {
          line: 32,
          column: 34
        }
      },
      "3": {
        start: {
          line: 33,
          column: 17
        },
        end: {
          line: 33,
          column: 49
        }
      },
      "4": {
        start: {
          line: 34,
          column: 24
        },
        end: {
          line: 34,
          column: 59
        }
      },
      "5": {
        start: {
          line: 35,
          column: 34
        },
        end: {
          line: 35,
          column: 79
        }
      },
      "6": {
        start: {
          line: 40,
          column: 0
        },
        end: {
          line: 51,
          column: 78
        }
      },
      "7": {
        start: {
          line: 41,
          column: 4
        },
        end: {
          line: 41,
          column: 61
        }
      },
      "8": {
        start: {
          line: 42,
          column: 4
        },
        end: {
          line: 42,
          column: 75
        }
      },
      "9": {
        start: {
          line: 43,
          column: 4
        },
        end: {
          line: 43,
          column: 69
        }
      },
      "10": {
        start: {
          line: 44,
          column: 4
        },
        end: {
          line: 44,
          column: 69
        }
      },
      "11": {
        start: {
          line: 45,
          column: 4
        },
        end: {
          line: 45,
          column: 59
        }
      },
      "12": {
        start: {
          line: 46,
          column: 4
        },
        end: {
          line: 46,
          column: 65
        }
      },
      "13": {
        start: {
          line: 47,
          column: 4
        },
        end: {
          line: 47,
          column: 73
        }
      },
      "14": {
        start: {
          line: 48,
          column: 4
        },
        end: {
          line: 48,
          column: 71
        }
      },
      "15": {
        start: {
          line: 49,
          column: 4
        },
        end: {
          line: 49,
          column: 81
        }
      },
      "16": {
        start: {
          line: 50,
          column: 4
        },
        end: {
          line: 50,
          column: 69
        }
      },
      "17": {
        start: {
          line: 56,
          column: 0
        },
        end: {
          line: 63,
          column: 84
        }
      },
      "18": {
        start: {
          line: 57,
          column: 4
        },
        end: {
          line: 57,
          column: 39
        }
      },
      "19": {
        start: {
          line: 58,
          column: 4
        },
        end: {
          line: 58,
          column: 59
        }
      },
      "20": {
        start: {
          line: 59,
          column: 4
        },
        end: {
          line: 59,
          column: 53
        }
      },
      "21": {
        start: {
          line: 60,
          column: 4
        },
        end: {
          line: 60,
          column: 51
        }
      },
      "22": {
        start: {
          line: 61,
          column: 4
        },
        end: {
          line: 61,
          column: 49
        }
      },
      "23": {
        start: {
          line: 62,
          column: 4
        },
        end: {
          line: 62,
          column: 61
        }
      },
      "24": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 70,
          column: 16
        }
      },
      "25": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 72,
          column: 31
        }
      },
      "26": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 74,
          column: 41
        }
      },
      "27": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 76,
          column: 39
        }
      },
      "28": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 77,
          column: 36
        }
      },
      "29": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 78,
          column: 38
        }
      },
      "30": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 80,
          column: 43
        }
      },
      "31": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 82,
          column: 45
        }
      },
      "32": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 97,
          column: 10
        }
      },
      "33": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 99,
          column: 56
        }
      },
      "34": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 101,
          column: 34
        }
      },
      "35": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 102,
          column: 76
        }
      },
      "36": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 138,
          column: 9
        }
      },
      "37": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 112,
          column: 82
        }
      },
      "38": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 114,
          column: 44
        }
      },
      "39": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 116,
          column: 56
        }
      },
      "40": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 118,
          column: 45
        }
      },
      "41": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 132,
          column: 15
        }
      },
      "42": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 133,
          column: 90
        }
      },
      "43": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 136,
          column: 83
        }
      },
      "44": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 137,
          column: 66
        }
      },
      "45": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 170,
          column: 9
        }
      },
      "46": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 148,
          column: 82
        }
      },
      "47": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 150,
          column: 43
        }
      },
      "48": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 164,
          column: 15
        }
      },
      "49": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 165,
          column: 79
        }
      },
      "50": {
        start: {
          line: 168,
          column: 12
        },
        end: {
          line: 168,
          column: 82
        }
      },
      "51": {
        start: {
          line: 169,
          column: 12
        },
        end: {
          line: 169,
          column: 67
        }
      },
      "52": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 223,
          column: 9
        }
      },
      "53": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 182,
          column: 42
        }
      },
      "54": {
        start: {
          line: 184,
          column: 12
        },
        end: {
          line: 184,
          column: 53
        }
      },
      "55": {
        start: {
          line: 186,
          column: 36
        },
        end: {
          line: 186,
          column: 78
        }
      },
      "56": {
        start: {
          line: 187,
          column: 12
        },
        end: {
          line: 187,
          column: 52
        }
      },
      "57": {
        start: {
          line: 189,
          column: 12
        },
        end: {
          line: 189,
          column: 55
        }
      },
      "58": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 191,
          column: 46
        }
      },
      "59": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 193,
          column: 46
        }
      },
      "60": {
        start: {
          line: 195,
          column: 12
        },
        end: {
          line: 208,
          column: 15
        }
      },
      "61": {
        start: {
          line: 211,
          column: 12
        },
        end: {
          line: 211,
          column: 80
        }
      },
      "62": {
        start: {
          line: 213,
          column: 12
        },
        end: {
          line: 222,
          column: 15
        }
      },
      "63": {
        start: {
          line: 232,
          column: 20
        },
        end: {
          line: 232,
          column: 30
        }
      },
      "64": {
        start: {
          line: 233,
          column: 29
        },
        end: {
          line: 235,
          column: 23
        }
      },
      "65": {
        start: {
          line: 234,
          column: 29
        },
        end: {
          line: 234,
          column: 80
        }
      },
      "66": {
        start: {
          line: 237,
          column: 31
        },
        end: {
          line: 237,
          column: 118
        }
      },
      "67": {
        start: {
          line: 237,
          column: 56
        },
        end: {
          line: 237,
          column: 117
        }
      },
      "68": {
        start: {
          line: 238,
          column: 27
        },
        end: {
          line: 238,
          column: 110
        }
      },
      "69": {
        start: {
          line: 238,
          column: 52
        },
        end: {
          line: 238,
          column: 109
        }
      },
      "70": {
        start: {
          line: 239,
          column: 29
        },
        end: {
          line: 239,
          column: 37
        }
      },
      "71": {
        start: {
          line: 240,
          column: 8
        },
        end: {
          line: 245,
          column: 9
        }
      },
      "72": {
        start: {
          line: 241,
          column: 12
        },
        end: {
          line: 241,
          column: 40
        }
      },
      "73": {
        start: {
          line: 243,
          column: 13
        },
        end: {
          line: 245,
          column: 9
        }
      },
      "74": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 244,
          column: 39
        }
      },
      "75": {
        start: {
          line: 247,
          column: 36
        },
        end: {
          line: 247,
          column: 82
        }
      },
      "76": {
        start: {
          line: 249,
          column: 29
        },
        end: {
          line: 249,
          column: 60
        }
      },
      "77": {
        start: {
          line: 250,
          column: 8
        },
        end: {
          line: 257,
          column: 10
        }
      },
      "78": {
        start: {
          line: 266,
          column: 8
        },
        end: {
          line: 266,
          column: 43
        }
      },
      "79": {
        start: {
          line: 275,
          column: 8
        },
        end: {
          line: 285,
          column: 10
        }
      },
      "80": {
        start: {
          line: 293,
          column: 8
        },
        end: {
          line: 315,
          column: 11
        }
      },
      "81": {
        start: {
          line: 294,
          column: 12
        },
        end: {
          line: 314,
          column: 13
        }
      },
      "82": {
        start: {
          line: 296,
          column: 16
        },
        end: {
          line: 302,
          column: 19
        }
      },
      "83": {
        start: {
          line: 304,
          column: 16
        },
        end: {
          line: 306,
          column: 17
        }
      },
      "84": {
        start: {
          line: 305,
          column: 20
        },
        end: {
          line: 305,
          column: 62
        }
      },
      "85": {
        start: {
          line: 308,
          column: 16
        },
        end: {
          line: 310,
          column: 17
        }
      },
      "86": {
        start: {
          line: 309,
          column: 20
        },
        end: {
          line: 309,
          column: 58
        }
      },
      "87": {
        start: {
          line: 313,
          column: 16
        },
        end: {
          line: 313,
          column: 81
        }
      },
      "88": {
        start: {
          line: 323,
          column: 8
        },
        end: {
          line: 330,
          column: 43
        }
      },
      "89": {
        start: {
          line: 324,
          column: 12
        },
        end: {
          line: 329,
          column: 13
        }
      },
      "90": {
        start: {
          line: 325,
          column: 16
        },
        end: {
          line: 325,
          column: 49
        }
      },
      "91": {
        start: {
          line: 328,
          column: 16
        },
        end: {
          line: 328,
          column: 71
        }
      },
      "92": {
        start: {
          line: 332,
          column: 8
        },
        end: {
          line: 339,
          column: 40
        }
      },
      "93": {
        start: {
          line: 333,
          column: 12
        },
        end: {
          line: 338,
          column: 13
        }
      },
      "94": {
        start: {
          line: 334,
          column: 16
        },
        end: {
          line: 334,
          column: 37
        }
      },
      "95": {
        start: {
          line: 337,
          column: 16
        },
        end: {
          line: 337,
          column: 72
        }
      },
      "96": {
        start: {
          line: 341,
          column: 8
        },
        end: {
          line: 348,
          column: 49
        }
      },
      "97": {
        start: {
          line: 342,
          column: 12
        },
        end: {
          line: 347,
          column: 13
        }
      },
      "98": {
        start: {
          line: 343,
          column: 16
        },
        end: {
          line: 343,
          column: 78
        }
      },
      "99": {
        start: {
          line: 346,
          column: 16
        },
        end: {
          line: 346,
          column: 74
        }
      },
      "100": {
        start: {
          line: 355,
          column: 8
        },
        end: {
          line: 358,
          column: 9
        }
      },
      "101": {
        start: {
          line: 356,
          column: 12
        },
        end: {
          line: 356,
          column: 51
        }
      },
      "102": {
        start: {
          line: 357,
          column: 12
        },
        end: {
          line: 357,
          column: 43
        }
      },
      "103": {
        start: {
          line: 359,
          column: 8
        },
        end: {
          line: 362,
          column: 9
        }
      },
      "104": {
        start: {
          line: 360,
          column: 12
        },
        end: {
          line: 360,
          column: 48
        }
      },
      "105": {
        start: {
          line: 361,
          column: 12
        },
        end: {
          line: 361,
          column: 40
        }
      },
      "106": {
        start: {
          line: 363,
          column: 8
        },
        end: {
          line: 366,
          column: 9
        }
      },
      "107": {
        start: {
          line: 364,
          column: 12
        },
        end: {
          line: 364,
          column: 50
        }
      },
      "108": {
        start: {
          line: 365,
          column: 12
        },
        end: {
          line: 365,
          column: 42
        }
      },
      "109": {
        start: {
          line: 374,
          column: 8
        },
        end: {
          line: 393,
          column: 11
        }
      },
      "110": {
        start: {
          line: 375,
          column: 34
        },
        end: {
          line: 391,
          column: 13
        }
      },
      "111": {
        start: {
          line: 392,
          column: 12
        },
        end: {
          line: 392,
          column: 59
        }
      },
      "112": {
        start: {
          line: 395,
          column: 8
        },
        end: {
          line: 404,
          column: 11
        }
      },
      "113": {
        start: {
          line: 396,
          column: 12
        },
        end: {
          line: 401,
          column: 15
        }
      },
      "114": {
        start: {
          line: 403,
          column: 12
        },
        end: {
          line: 403,
          column: 52
        }
      },
      "115": {
        start: {
          line: 413,
          column: 8
        },
        end: {
          line: 425,
          column: 9
        }
      },
      "116": {
        start: {
          line: 415,
          column: 12
        },
        end: {
          line: 415,
          column: 43
        }
      },
      "117": {
        start: {
          line: 417,
          column: 12
        },
        end: {
          line: 417,
          column: 40
        }
      },
      "118": {
        start: {
          line: 419,
          column: 12
        },
        end: {
          line: 419,
          column: 36
        }
      },
      "119": {
        start: {
          line: 421,
          column: 12
        },
        end: {
          line: 421,
          column: 45
        }
      },
      "120": {
        start: {
          line: 424,
          column: 12
        },
        end: {
          line: 424,
          column: 68
        }
      },
      "121": {
        start: {
          line: 434,
          column: 8
        },
        end: {
          line: 434,
          column: 38
        }
      },
      "122": {
        start: {
          line: 436,
          column: 8
        },
        end: {
          line: 438,
          column: 9
        }
      },
      "123": {
        start: {
          line: 437,
          column: 12
        },
        end: {
          line: 437,
          column: 38
        }
      },
      "124": {
        start: {
          line: 440,
          column: 8
        },
        end: {
          line: 442,
          column: 9
        }
      },
      "125": {
        start: {
          line: 441,
          column: 12
        },
        end: {
          line: 441,
          column: 59
        }
      },
      "126": {
        start: {
          line: 452,
          column: 8
        },
        end: {
          line: 468,
          column: 9
        }
      },
      "127": {
        start: {
          line: 453,
          column: 35
        },
        end: {
          line: 453,
          column: 71
        }
      },
      "128": {
        start: {
          line: 454,
          column: 37
        },
        end: {
          line: 454,
          column: 87
        }
      },
      "129": {
        start: {
          line: 456,
          column: 12
        },
        end: {
          line: 456,
          column: 41
        }
      },
      "130": {
        start: {
          line: 458,
          column: 32
        },
        end: {
          line: 458,
          column: 74
        }
      },
      "131": {
        start: {
          line: 459,
          column: 33
        },
        end: {
          line: 459,
          column: 98
        }
      },
      "132": {
        start: {
          line: 459,
          column: 62
        },
        end: {
          line: 459,
          column: 97
        }
      },
      "133": {
        start: {
          line: 460,
          column: 12
        },
        end: {
          line: 460,
          column: 71
        }
      },
      "134": {
        start: {
          line: 462,
          column: 12
        },
        end: {
          line: 464,
          column: 13
        }
      },
      "135": {
        start: {
          line: 463,
          column: 16
        },
        end: {
          line: 463,
          column: 80
        }
      },
      "136": {
        start: {
          line: 467,
          column: 12
        },
        end: {
          line: 467,
          column: 72
        }
      },
      "137": {
        start: {
          line: 478,
          column: 24
        },
        end: {
          line: 478,
          column: 26
        }
      },
      "138": {
        start: {
          line: 480,
          column: 8
        },
        end: {
          line: 502,
          column: 9
        }
      },
      "139": {
        start: {
          line: 482,
          column: 16
        },
        end: {
          line: 482,
          column: 51
        }
      },
      "140": {
        start: {
          line: 483,
          column: 16
        },
        end: {
          line: 485,
          column: 17
        }
      },
      "141": {
        start: {
          line: 484,
          column: 20
        },
        end: {
          line: 484,
          column: 56
        }
      },
      "142": {
        start: {
          line: 486,
          column: 16
        },
        end: {
          line: 488,
          column: 17
        }
      },
      "143": {
        start: {
          line: 487,
          column: 20
        },
        end: {
          line: 487,
          column: 63
        }
      },
      "144": {
        start: {
          line: 489,
          column: 16
        },
        end: {
          line: 489,
          column: 22
        }
      },
      "145": {
        start: {
          line: 491,
          column: 16
        },
        end: {
          line: 491,
          column: 50
        }
      },
      "146": {
        start: {
          line: 492,
          column: 16
        },
        end: {
          line: 494,
          column: 17
        }
      },
      "147": {
        start: {
          line: 493,
          column: 20
        },
        end: {
          line: 493,
          column: 60
        }
      },
      "148": {
        start: {
          line: 495,
          column: 16
        },
        end: {
          line: 495,
          column: 22
        }
      },
      "149": {
        start: {
          line: 497,
          column: 16
        },
        end: {
          line: 497,
          column: 53
        }
      },
      "150": {
        start: {
          line: 498,
          column: 16
        },
        end: {
          line: 498,
          column: 52
        }
      },
      "151": {
        start: {
          line: 499,
          column: 16
        },
        end: {
          line: 499,
          column: 22
        }
      },
      "152": {
        start: {
          line: 501,
          column: 16
        },
        end: {
          line: 501,
          column: 48
        }
      },
      "153": {
        start: {
          line: 503,
          column: 8
        },
        end: {
          line: 503,
          column: 23
        }
      },
      "154": {
        start: {
          line: 513,
          column: 8
        },
        end: {
          line: 544,
          column: 9
        }
      },
      "155": {
        start: {
          line: 514,
          column: 12
        },
        end: {
          line: 540,
          column: 13
        }
      },
      "156": {
        start: {
          line: 515,
          column: 16
        },
        end: {
          line: 539,
          column: 17
        }
      },
      "157": {
        start: {
          line: 517,
          column: 24
        },
        end: {
          line: 521,
          column: 27
        }
      },
      "158": {
        start: {
          line: 522,
          column: 24
        },
        end: {
          line: 522,
          column: 30
        }
      },
      "159": {
        start: {
          line: 524,
          column: 24
        },
        end: {
          line: 524,
          column: 60
        }
      },
      "160": {
        start: {
          line: 525,
          column: 24
        },
        end: {
          line: 525,
          column: 30
        }
      },
      "161": {
        start: {
          line: 527,
          column: 24
        },
        end: {
          line: 527,
          column: 67
        }
      },
      "162": {
        start: {
          line: 528,
          column: 24
        },
        end: {
          line: 528,
          column: 30
        }
      },
      "163": {
        start: {
          line: 531,
          column: 24
        },
        end: {
          line: 531,
          column: 82
        }
      },
      "164": {
        start: {
          line: 532,
          column: 24
        },
        end: {
          line: 532,
          column: 30
        }
      },
      "165": {
        start: {
          line: 535,
          column: 24
        },
        end: {
          line: 535,
          column: 89
        }
      },
      "166": {
        start: {
          line: 536,
          column: 24
        },
        end: {
          line: 536,
          column: 30
        }
      },
      "167": {
        start: {
          line: 538,
          column: 24
        },
        end: {
          line: 538,
          column: 79
        }
      },
      "168": {
        start: {
          line: 543,
          column: 12
        },
        end: {
          line: 543,
          column: 83
        }
      },
      "169": {
        start: {
          line: 553,
          column: 8
        },
        end: {
          line: 553,
          column: 43
        }
      },
      "170": {
        start: {
          line: 555,
          column: 8
        },
        end: {
          line: 556,
          column: 77
        }
      },
      "171": {
        start: {
          line: 558,
          column: 8
        },
        end: {
          line: 559,
          column: 74
        }
      },
      "172": {
        start: {
          line: 561,
          column: 8
        },
        end: {
          line: 561,
          column: 53
        }
      },
      "173": {
        start: {
          line: 571,
          column: 8
        },
        end: {
          line: 576,
          column: 11
        }
      },
      "174": {
        start: {
          line: 578,
          column: 8
        },
        end: {
          line: 578,
          column: 44
        }
      },
      "175": {
        start: {
          line: 580,
          column: 8
        },
        end: {
          line: 580,
          column: 57
        }
      },
      "176": {
        start: {
          line: 590,
          column: 8
        },
        end: {
          line: 595,
          column: 11
        }
      },
      "177": {
        start: {
          line: 597,
          column: 8
        },
        end: {
          line: 597,
          column: 51
        }
      },
      "178": {
        start: {
          line: 599,
          column: 8
        },
        end: {
          line: 599,
          column: 54
        }
      },
      "179": {
        start: {
          line: 610,
          column: 31
        },
        end: {
          line: 624,
          column: 9
        }
      },
      "180": {
        start: {
          line: 625,
          column: 8
        },
        end: {
          line: 625,
          column: 56
        }
      },
      "181": {
        start: {
          line: 636,
          column: 8
        },
        end: {
          line: 640,
          column: 11
        }
      },
      "182": {
        start: {
          line: 642,
          column: 33
        },
        end: {
          line: 656,
          column: 9
        }
      },
      "183": {
        start: {
          line: 645,
          column: 50
        },
        end: {
          line: 645,
          column: 60
        }
      },
      "184": {
        start: {
          line: 650,
          column: 50
        },
        end: {
          line: 650,
          column: 59
        }
      },
      "185": {
        start: {
          line: 657,
          column: 8
        },
        end: {
          line: 657,
          column: 58
        }
      },
      "186": {
        start: {
          line: 668,
          column: 8
        },
        end: {
          line: 672,
          column: 11
        }
      },
      "187": {
        start: {
          line: 682,
          column: 8
        },
        end: {
          line: 686,
          column: 11
        }
      },
      "188": {
        start: {
          line: 705,
          column: 29
        },
        end: {
          line: 705,
          column: 47
        }
      },
      "189": {
        start: {
          line: 706,
          column: 29
        },
        end: {
          line: 706,
          column: 104
        }
      },
      "190": {
        start: {
          line: 706,
          column: 63
        },
        end: {
          line: 706,
          column: 103
        }
      },
      "191": {
        start: {
          line: 707,
          column: 8
        },
        end: {
          line: 712,
          column: 9
        }
      },
      "192": {
        start: {
          line: 708,
          column: 12
        },
        end: {
          line: 711,
          column: 15
        }
      },
      "193": {
        start: {
          line: 719,
          column: 27
        },
        end: {
          line: 719,
          column: 61
        }
      },
      "194": {
        start: {
          line: 721,
          column: 8
        },
        end: {
          line: 721,
          column: 102
        }
      },
      "195": {
        start: {
          line: 721,
          column: 62
        },
        end: {
          line: 721,
          column: 100
        }
      },
      "196": {
        start: {
          line: 723,
          column: 8
        },
        end: {
          line: 728,
          column: 9
        }
      },
      "197": {
        start: {
          line: 724,
          column: 12
        },
        end: {
          line: 727,
          column: 13
        }
      },
      "198": {
        start: {
          line: 726,
          column: 16
        },
        end: {
          line: 726,
          column: 53
        }
      },
      "199": {
        start: {
          line: 730,
          column: 8
        },
        end: {
          line: 738,
          column: 9
        }
      },
      "200": {
        start: {
          line: 731,
          column: 33
        },
        end: {
          line: 731,
          column: 95
        }
      },
      "201": {
        start: {
          line: 731,
          column: 56
        },
        end: {
          line: 731,
          column: 94
        }
      },
      "202": {
        start: {
          line: 732,
          column: 12
        },
        end: {
          line: 737,
          column: 13
        }
      },
      "203": {
        start: {
          line: 733,
          column: 16
        },
        end: {
          line: 733,
          column: 53
        }
      },
      "204": {
        start: {
          line: 736,
          column: 16
        },
        end: {
          line: 736,
          column: 64
        }
      },
      "205": {
        start: {
          line: 754,
          column: 8
        },
        end: {
          line: 755,
          column: 66
        }
      },
      "206": {
        start: {
          line: 757,
          column: 29
        },
        end: {
          line: 757,
          column: 124
        }
      },
      "207": {
        start: {
          line: 757,
          column: 63
        },
        end: {
          line: 757,
          column: 116
        }
      },
      "208": {
        start: {
          line: 758,
          column: 8
        },
        end: {
          line: 760,
          column: 76
        }
      },
      "209": {
        start: {
          line: 762,
          column: 29
        },
        end: {
          line: 763,
          column: 9
        }
      },
      "210": {
        start: {
          line: 762,
          column: 63
        },
        end: {
          line: 762,
          column: 111
        }
      },
      "211": {
        start: {
          line: 764,
          column: 28
        },
        end: {
          line: 764,
          column: 88
        }
      },
      "212": {
        start: {
          line: 764,
          column: 64
        },
        end: {
          line: 764,
          column: 84
        }
      },
      "213": {
        start: {
          line: 765,
          column: 32
        },
        end: {
          line: 765,
          column: 95
        }
      },
      "214": {
        start: {
          line: 766,
          column: 8
        },
        end: {
          line: 766,
          column: 87
        }
      },
      "215": {
        start: {
          line: 768,
          column: 8
        },
        end: {
          line: 768,
          column: 53
        }
      },
      "216": {
        start: {
          line: 778,
          column: 30
        },
        end: {
          line: 778,
          column: 32
        }
      },
      "217": {
        start: {
          line: 779,
          column: 32
        },
        end: {
          line: 779,
          column: 34
        }
      },
      "218": {
        start: {
          line: 780,
          column: 31
        },
        end: {
          line: 780,
          column: 33
        }
      },
      "219": {
        start: {
          line: 782,
          column: 8
        },
        end: {
          line: 785,
          column: 9
        }
      },
      "220": {
        start: {
          line: 783,
          column: 12
        },
        end: {
          line: 783,
          column: 87
        }
      },
      "221": {
        start: {
          line: 784,
          column: 12
        },
        end: {
          line: 784,
          column: 85
        }
      },
      "222": {
        start: {
          line: 787,
          column: 20
        },
        end: {
          line: 787,
          column: 30
        }
      },
      "223": {
        start: {
          line: 788,
          column: 8
        },
        end: {
          line: 795,
          column: 9
        }
      },
      "224": {
        start: {
          line: 788,
          column: 21
        },
        end: {
          line: 788,
          column: 23
        }
      },
      "225": {
        start: {
          line: 789,
          column: 31
        },
        end: {
          line: 789,
          column: 77
        }
      },
      "226": {
        start: {
          line: 790,
          column: 32
        },
        end: {
          line: 790,
          column: 52
        }
      },
      "227": {
        start: {
          line: 791,
          column: 30
        },
        end: {
          line: 791,
          column: 60
        }
      },
      "228": {
        start: {
          line: 792,
          column: 26
        },
        end: {
          line: 793,
          column: 61
        }
      },
      "229": {
        start: {
          line: 792,
          column: 49
        },
        end: {
          line: 793,
          column: 53
        }
      },
      "230": {
        start: {
          line: 794,
          column: 12
        },
        end: {
          line: 794,
          column: 66
        }
      },
      "231": {
        start: {
          line: 796,
          column: 8
        },
        end: {
          line: 796,
          column: 66
        }
      },
      "232": {
        start: {
          line: 805,
          column: 8
        },
        end: {
          line: 814,
          column: 10
        }
      },
      "233": {
        start: {
          line: 823,
          column: 8
        },
        end: {
          line: 830,
          column: 10
        }
      },
      "234": {
        start: {
          line: 833,
          column: 0
        },
        end: {
          line: 833,
          column: 62
        }
      },
      "235": {
        start: {
          line: 835,
          column: 0
        },
        end: {
          line: 835,
          column: 68
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 40,
            column: 1
          },
          end: {
            line: 40,
            column: 2
          }
        },
        loc: {
          start: {
            line: 40,
            column: 30
          },
          end: {
            line: 51,
            column: 1
          }
        },
        line: 40
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 56,
            column: 1
          },
          end: {
            line: 56,
            column: 2
          }
        },
        loc: {
          start: {
            line: 56,
            column: 32
          },
          end: {
            line: 63,
            column: 1
          }
        },
        line: 56
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 69,
            column: 4
          },
          end: {
            line: 69,
            column: 5
          }
        },
        loc: {
          start: {
            line: 69,
            column: 24
          },
          end: {
            line: 103,
            column: 5
          }
        },
        line: 69
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 110,
            column: 4
          },
          end: {
            line: 110,
            column: 5
          }
        },
        loc: {
          start: {
            line: 110,
            column: 28
          },
          end: {
            line: 139,
            column: 5
          }
        },
        line: 110
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 146,
            column: 4
          },
          end: {
            line: 146,
            column: 5
          }
        },
        loc: {
          start: {
            line: 146,
            column: 27
          },
          end: {
            line: 171,
            column: 5
          }
        },
        line: 146
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 179,
            column: 4
          },
          end: {
            line: 179,
            column: 5
          }
        },
        loc: {
          start: {
            line: 179,
            column: 38
          },
          end: {
            line: 224,
            column: 5
          }
        },
        line: 179
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 231,
            column: 4
          },
          end: {
            line: 231,
            column: 5
          }
        },
        loc: {
          start: {
            line: 231,
            column: 31
          },
          end: {
            line: 258,
            column: 5
          }
        },
        line: 231
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 234,
            column: 20
          },
          end: {
            line: 234,
            column: 21
          }
        },
        loc: {
          start: {
            line: 234,
            column: 29
          },
          end: {
            line: 234,
            column: 80
          }
        },
        line: 234
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 237,
            column: 51
          },
          end: {
            line: 237,
            column: 52
          }
        },
        loc: {
          start: {
            line: 237,
            column: 56
          },
          end: {
            line: 237,
            column: 117
          }
        },
        line: 237
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 238,
            column: 47
          },
          end: {
            line: 238,
            column: 48
          }
        },
        loc: {
          start: {
            line: 238,
            column: 52
          },
          end: {
            line: 238,
            column: 109
          }
        },
        line: 238
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 265,
            column: 4
          },
          end: {
            line: 265,
            column: 5
          }
        },
        loc: {
          start: {
            line: 265,
            column: 25
          },
          end: {
            line: 267,
            column: 5
          }
        },
        line: 265
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 274,
            column: 4
          },
          end: {
            line: 274,
            column: 5
          }
        },
        loc: {
          start: {
            line: 274,
            column: 24
          },
          end: {
            line: 286,
            column: 5
          }
        },
        line: 274
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 291,
            column: 4
          },
          end: {
            line: 291,
            column: 5
          }
        },
        loc: {
          start: {
            line: 291,
            column: 25
          },
          end: {
            line: 316,
            column: 5
          }
        },
        line: 291
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 293,
            column: 33
          },
          end: {
            line: 293,
            column: 34
          }
        },
        loc: {
          start: {
            line: 293,
            column: 50
          },
          end: {
            line: 315,
            column: 9
          }
        },
        line: 293
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 321,
            column: 4
          },
          end: {
            line: 321,
            column: 5
          }
        },
        loc: {
          start: {
            line: 321,
            column: 31
          },
          end: {
            line: 349,
            column: 5
          }
        },
        line: 321
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 323,
            column: 46
          },
          end: {
            line: 323,
            column: 47
          }
        },
        loc: {
          start: {
            line: 323,
            column: 58
          },
          end: {
            line: 330,
            column: 9
          }
        },
        line: 323
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 332,
            column: 43
          },
          end: {
            line: 332,
            column: 44
          }
        },
        loc: {
          start: {
            line: 332,
            column: 49
          },
          end: {
            line: 339,
            column: 9
          }
        },
        line: 332
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 341,
            column: 45
          },
          end: {
            line: 341,
            column: 46
          }
        },
        loc: {
          start: {
            line: 341,
            column: 51
          },
          end: {
            line: 348,
            column: 9
          }
        },
        line: 341
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 354,
            column: 4
          },
          end: {
            line: 354,
            column: 5
          }
        },
        loc: {
          start: {
            line: 354,
            column: 30
          },
          end: {
            line: 367,
            column: 5
          }
        },
        line: 354
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 372,
            column: 4
          },
          end: {
            line: 372,
            column: 5
          }
        },
        loc: {
          start: {
            line: 372,
            column: 43
          },
          end: {
            line: 405,
            column: 5
          }
        },
        line: 372
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 374,
            column: 77
          },
          end: {
            line: 374,
            column: 78
          }
        },
        loc: {
          start: {
            line: 374,
            column: 95
          },
          end: {
            line: 393,
            column: 9
          }
        },
        line: 374
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 395,
            column: 81
          },
          end: {
            line: 395,
            column: 82
          }
        },
        loc: {
          start: {
            line: 395,
            column: 99
          },
          end: {
            line: 404,
            column: 9
          }
        },
        line: 395
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 412,
            column: 4
          },
          end: {
            line: 412,
            column: 5
          }
        },
        loc: {
          start: {
            line: 412,
            column: 32
          },
          end: {
            line: 426,
            column: 5
          }
        },
        line: 412
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 433,
            column: 4
          },
          end: {
            line: 433,
            column: 5
          }
        },
        loc: {
          start: {
            line: 433,
            column: 29
          },
          end: {
            line: 443,
            column: 5
          }
        },
        line: 433
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 451,
            column: 4
          },
          end: {
            line: 451,
            column: 5
          }
        },
        loc: {
          start: {
            line: 451,
            column: 40
          },
          end: {
            line: 469,
            column: 5
          }
        },
        line: 451
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 459,
            column: 57
          },
          end: {
            line: 459,
            column: 58
          }
        },
        loc: {
          start: {
            line: 459,
            column: 62
          },
          end: {
            line: 459,
            column: 97
          }
        },
        line: 459
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 477,
            column: 4
          },
          end: {
            line: 477,
            column: 5
          }
        },
        loc: {
          start: {
            line: 477,
            column: 42
          },
          end: {
            line: 504,
            column: 5
          }
        },
        line: 477
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 512,
            column: 4
          },
          end: {
            line: 512,
            column: 5
          }
        },
        loc: {
          start: {
            line: 512,
            column: 42
          },
          end: {
            line: 545,
            column: 5
          }
        },
        line: 512
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 552,
            column: 4
          },
          end: {
            line: 552,
            column: 5
          }
        },
        loc: {
          start: {
            line: 552,
            column: 33
          },
          end: {
            line: 562,
            column: 5
          }
        },
        line: 552
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 570,
            column: 4
          },
          end: {
            line: 570,
            column: 5
          }
        },
        loc: {
          start: {
            line: 570,
            column: 41
          },
          end: {
            line: 581,
            column: 5
          }
        },
        line: 570
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 589,
            column: 4
          },
          end: {
            line: 589,
            column: 5
          }
        },
        loc: {
          start: {
            line: 589,
            column: 37
          },
          end: {
            line: 600,
            column: 5
          }
        },
        line: 589
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 608,
            column: 4
          },
          end: {
            line: 608,
            column: 5
          }
        },
        loc: {
          start: {
            line: 608,
            column: 39
          },
          end: {
            line: 626,
            column: 5
          }
        },
        line: 608
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 635,
            column: 4
          },
          end: {
            line: 635,
            column: 5
          }
        },
        loc: {
          start: {
            line: 635,
            column: 57
          },
          end: {
            line: 658,
            column: 5
          }
        },
        line: 635
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 645,
            column: 45
          },
          end: {
            line: 645,
            column: 46
          }
        },
        loc: {
          start: {
            line: 645,
            column: 50
          },
          end: {
            line: 645,
            column: 60
          }
        },
        line: 645
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 650,
            column: 45
          },
          end: {
            line: 650,
            column: 46
          }
        },
        loc: {
          start: {
            line: 650,
            column: 50
          },
          end: {
            line: 650,
            column: 59
          }
        },
        line: 650
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 666,
            column: 4
          },
          end: {
            line: 666,
            column: 5
          }
        },
        loc: {
          start: {
            line: 666,
            column: 35
          },
          end: {
            line: 673,
            column: 5
          }
        },
        line: 666
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 681,
            column: 4
          },
          end: {
            line: 681,
            column: 5
          }
        },
        loc: {
          start: {
            line: 681,
            column: 42
          },
          end: {
            line: 689,
            column: 5
          }
        },
        line: 681
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 696,
            column: 4
          },
          end: {
            line: 696,
            column: 5
          }
        },
        loc: {
          start: {
            line: 696,
            column: 30
          },
          end: {
            line: 699,
            column: 5
          }
        },
        line: 696
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 704,
            column: 4
          },
          end: {
            line: 704,
            column: 5
          }
        },
        loc: {
          start: {
            line: 704,
            column: 27
          },
          end: {
            line: 713,
            column: 5
          }
        },
        line: 704
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 706,
            column: 54
          },
          end: {
            line: 706,
            column: 55
          }
        },
        loc: {
          start: {
            line: 706,
            column: 63
          },
          end: {
            line: 706,
            column: 103
          }
        },
        line: 706
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 718,
            column: 4
          },
          end: {
            line: 718,
            column: 5
          }
        },
        loc: {
          start: {
            line: 718,
            column: 23
          },
          end: {
            line: 739,
            column: 5
          }
        },
        line: 718
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 721,
            column: 53
          },
          end: {
            line: 721,
            column: 54
          }
        },
        loc: {
          start: {
            line: 721,
            column: 62
          },
          end: {
            line: 721,
            column: 100
          }
        },
        line: 721
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 731,
            column: 47
          },
          end: {
            line: 731,
            column: 48
          }
        },
        loc: {
          start: {
            line: 731,
            column: 56
          },
          end: {
            line: 731,
            column: 94
          }
        },
        line: 731
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 744,
            column: 4
          },
          end: {
            line: 744,
            column: 5
          }
        },
        loc: {
          start: {
            line: 744,
            column: 32
          },
          end: {
            line: 747,
            column: 5
          }
        },
        line: 744
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 752,
            column: 4
          },
          end: {
            line: 752,
            column: 5
          }
        },
        loc: {
          start: {
            line: 752,
            column: 20
          },
          end: {
            line: 769,
            column: 5
          }
        },
        line: 752
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 757,
            column: 54
          },
          end: {
            line: 757,
            column: 55
          }
        },
        loc: {
          start: {
            line: 757,
            column: 63
          },
          end: {
            line: 757,
            column: 116
          }
        },
        line: 757
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 762,
            column: 54
          },
          end: {
            line: 762,
            column: 55
          }
        },
        loc: {
          start: {
            line: 762,
            column: 63
          },
          end: {
            line: 762,
            column: 111
          }
        },
        line: 762
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 764,
            column: 48
          },
          end: {
            line: 764,
            column: 49
          }
        },
        loc: {
          start: {
            line: 764,
            column: 64
          },
          end: {
            line: 764,
            column: 84
          }
        },
        line: 764
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 777,
            column: 4
          },
          end: {
            line: 777,
            column: 5
          }
        },
        loc: {
          start: {
            line: 777,
            column: 40
          },
          end: {
            line: 797,
            column: 5
          }
        },
        line: 777
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 792,
            column: 40
          },
          end: {
            line: 792,
            column: 41
          }
        },
        loc: {
          start: {
            line: 792,
            column: 49
          },
          end: {
            line: 793,
            column: 53
          }
        },
        line: 792
      },
      "50": {
        name: "(anonymous_50)",
        decl: {
          start: {
            line: 804,
            column: 4
          },
          end: {
            line: 804,
            column: 5
          }
        },
        loc: {
          start: {
            line: 804,
            column: 31
          },
          end: {
            line: 815,
            column: 5
          }
        },
        line: 804
      },
      "51": {
        name: "(anonymous_51)",
        decl: {
          start: {
            line: 822,
            column: 4
          },
          end: {
            line: 822,
            column: 5
          }
        },
        loc: {
          start: {
            line: 822,
            column: 16
          },
          end: {
            line: 831,
            column: 5
          }
        },
        line: 822
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 51,
            column: 3
          },
          end: {
            line: 51,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 51,
            column: 3
          },
          end: {
            line: 51,
            column: 20
          }
        }, {
          start: {
            line: 51,
            column: 25
          },
          end: {
            line: 51,
            column: 75
          }
        }],
        line: 51
      },
      "1": {
        loc: {
          start: {
            line: 63,
            column: 3
          },
          end: {
            line: 63,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 63,
            column: 3
          },
          end: {
            line: 63,
            column: 22
          }
        }, {
          start: {
            line: 63,
            column: 27
          },
          end: {
            line: 63,
            column: 81
          }
        }],
        line: 63
      },
      "2": {
        loc: {
          start: {
            line: 240,
            column: 8
          },
          end: {
            line: 245,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 240,
            column: 8
          },
          end: {
            line: 245,
            column: 9
          }
        }, {
          start: {
            line: 243,
            column: 13
          },
          end: {
            line: 245,
            column: 9
          }
        }],
        line: 240
      },
      "3": {
        loc: {
          start: {
            line: 243,
            column: 13
          },
          end: {
            line: 245,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 243,
            column: 13
          },
          end: {
            line: 245,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 243
      },
      "4": {
        loc: {
          start: {
            line: 304,
            column: 16
          },
          end: {
            line: 306,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 304,
            column: 16
          },
          end: {
            line: 306,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 304
      },
      "5": {
        loc: {
          start: {
            line: 308,
            column: 16
          },
          end: {
            line: 310,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 308,
            column: 16
          },
          end: {
            line: 310,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 308
      },
      "6": {
        loc: {
          start: {
            line: 355,
            column: 8
          },
          end: {
            line: 358,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 355,
            column: 8
          },
          end: {
            line: 358,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 355
      },
      "7": {
        loc: {
          start: {
            line: 359,
            column: 8
          },
          end: {
            line: 362,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 359,
            column: 8
          },
          end: {
            line: 362,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 359
      },
      "8": {
        loc: {
          start: {
            line: 363,
            column: 8
          },
          end: {
            line: 366,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 363,
            column: 8
          },
          end: {
            line: 366,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 363
      },
      "9": {
        loc: {
          start: {
            line: 436,
            column: 8
          },
          end: {
            line: 438,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 436,
            column: 8
          },
          end: {
            line: 438,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 436
      },
      "10": {
        loc: {
          start: {
            line: 440,
            column: 8
          },
          end: {
            line: 442,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 440,
            column: 8
          },
          end: {
            line: 442,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 440
      },
      "11": {
        loc: {
          start: {
            line: 454,
            column: 37
          },
          end: {
            line: 454,
            column: 87
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 454,
            column: 37
          },
          end: {
            line: 454,
            column: 81
          }
        }, {
          start: {
            line: 454,
            column: 85
          },
          end: {
            line: 454,
            column: 87
          }
        }],
        line: 454
      },
      "12": {
        loc: {
          start: {
            line: 462,
            column: 12
          },
          end: {
            line: 464,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 462,
            column: 12
          },
          end: {
            line: 464,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 462
      },
      "13": {
        loc: {
          start: {
            line: 480,
            column: 8
          },
          end: {
            line: 502,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 481,
            column: 12
          },
          end: {
            line: 489,
            column: 22
          }
        }, {
          start: {
            line: 490,
            column: 12
          },
          end: {
            line: 495,
            column: 22
          }
        }, {
          start: {
            line: 496,
            column: 12
          },
          end: {
            line: 499,
            column: 22
          }
        }, {
          start: {
            line: 500,
            column: 12
          },
          end: {
            line: 501,
            column: 48
          }
        }],
        line: 480
      },
      "14": {
        loc: {
          start: {
            line: 483,
            column: 16
          },
          end: {
            line: 485,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 483,
            column: 16
          },
          end: {
            line: 485,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 483
      },
      "15": {
        loc: {
          start: {
            line: 486,
            column: 16
          },
          end: {
            line: 488,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 486,
            column: 16
          },
          end: {
            line: 488,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 486
      },
      "16": {
        loc: {
          start: {
            line: 492,
            column: 16
          },
          end: {
            line: 494,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 492,
            column: 16
          },
          end: {
            line: 494,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 492
      },
      "17": {
        loc: {
          start: {
            line: 515,
            column: 16
          },
          end: {
            line: 539,
            column: 17
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 516,
            column: 20
          },
          end: {
            line: 522,
            column: 30
          }
        }, {
          start: {
            line: 523,
            column: 20
          },
          end: {
            line: 525,
            column: 30
          }
        }, {
          start: {
            line: 526,
            column: 20
          },
          end: {
            line: 528,
            column: 30
          }
        }, {
          start: {
            line: 529,
            column: 20
          },
          end: {
            line: 532,
            column: 30
          }
        }, {
          start: {
            line: 533,
            column: 20
          },
          end: {
            line: 536,
            column: 30
          }
        }, {
          start: {
            line: 537,
            column: 20
          },
          end: {
            line: 538,
            column: 79
          }
        }],
        line: 515
      },
      "18": {
        loc: {
          start: {
            line: 556,
            column: 13
          },
          end: {
            line: 556,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 556,
            column: 13
          },
          end: {
            line: 556,
            column: 66
          }
        }, {
          start: {
            line: 556,
            column: 70
          },
          end: {
            line: 556,
            column: 71
          }
        }],
        line: 556
      },
      "19": {
        loc: {
          start: {
            line: 559,
            column: 13
          },
          end: {
            line: 559,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 559,
            column: 13
          },
          end: {
            line: 559,
            column: 63
          }
        }, {
          start: {
            line: 559,
            column: 67
          },
          end: {
            line: 559,
            column: 68
          }
        }],
        line: 559
      },
      "20": {
        loc: {
          start: {
            line: 707,
            column: 8
          },
          end: {
            line: 712,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 707,
            column: 8
          },
          end: {
            line: 712,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 707
      },
      "21": {
        loc: {
          start: {
            line: 724,
            column: 12
          },
          end: {
            line: 727,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 724,
            column: 12
          },
          end: {
            line: 727,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 724
      },
      "22": {
        loc: {
          start: {
            line: 724,
            column: 16
          },
          end: {
            line: 725,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 724,
            column: 16
          },
          end: {
            line: 724,
            column: 64
          }
        }, {
          start: {
            line: 725,
            column: 16
          },
          end: {
            line: 725,
            column: 57
          }
        }],
        line: 724
      },
      "23": {
        loc: {
          start: {
            line: 732,
            column: 12
          },
          end: {
            line: 737,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 732,
            column: 12
          },
          end: {
            line: 737,
            column: 13
          }
        }, {
          start: {
            line: 735,
            column: 17
          },
          end: {
            line: 737,
            column: 13
          }
        }],
        line: 732
      },
      "24": {
        loc: {
          start: {
            line: 759,
            column: 12
          },
          end: {
            line: 760,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 760,
            column: 16
          },
          end: {
            line: 760,
            column: 71
          }
        }, {
          start: {
            line: 760,
            column: 74
          },
          end: {
            line: 760,
            column: 75
          }
        }],
        line: 759
      },
      "25": {
        loc: {
          start: {
            line: 765,
            column: 32
          },
          end: {
            line: 765,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 765,
            column: 58
          },
          end: {
            line: 765,
            column: 91
          }
        }, {
          start: {
            line: 765,
            column: 94
          },
          end: {
            line: 765,
            column: 95
          }
        }],
        line: 765
      },
      "26": {
        loc: {
          start: {
            line: 783,
            column: 46
          },
          end: {
            line: 783,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 783,
            column: 46
          },
          end: {
            line: 783,
            column: 76
          }
        }, {
          start: {
            line: 783,
            column: 80
          },
          end: {
            line: 783,
            column: 81
          }
        }],
        line: 783
      },
      "27": {
        loc: {
          start: {
            line: 784,
            column: 45
          },
          end: {
            line: 784,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 784,
            column: 45
          },
          end: {
            line: 784,
            column: 74
          }
        }, {
          start: {
            line: 784,
            column: 78
          },
          end: {
            line: 784,
            column: 79
          }
        }],
        line: 784
      },
      "28": {
        loc: {
          start: {
            line: 792,
            column: 49
          },
          end: {
            line: 793,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 792,
            column: 49
          },
          end: {
            line: 792,
            column: 89
          }
        }, {
          start: {
            line: 793,
            column: 16
          },
          end: {
            line: 793,
            column: 53
          }
        }],
        line: 792
      },
      "29": {
        loc: {
          start: {
            line: 806,
            column: 30
          },
          end: {
            line: 806,
            column: 76
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 806,
            column: 56
          },
          end: {
            line: 806,
            column: 64
          }
        }, {
          start: {
            line: 806,
            column: 67
          },
          end: {
            line: 806,
            column: 76
          }
        }],
        line: 806
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0, 0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0, 0, 0, 0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c03ed0300fff5ccc8a3cc4a139285a336306ff20"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1fe1wefs5z = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1fe1wefs5z();
cov_1fe1wefs5z().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1fe1wefs5z().s[1]++;
exports.securityMonitoringService = exports.SecurityMonitoringService = exports.SecurityEventStatus = exports.SecurityEventType = void 0;
const events_1 =
/* istanbul ignore next */
(cov_1fe1wefs5z().s[2]++, require("events"));
const logger_1 =
/* istanbul ignore next */
(cov_1fe1wefs5z().s[3]++, require("@/core/logging/logger"));
const audit_service_1 =
/* istanbul ignore next */
(cov_1fe1wefs5z().s[4]++, require("@/security/audit-service"));
const threat_detection_engine_1 =
/* istanbul ignore next */
(cov_1fe1wefs5z().s[5]++, require("@/security/threat-detection-engine"));
/**
 * Enumeration of security event types
 */
var SecurityEventType;
/* istanbul ignore next */
cov_1fe1wefs5z().s[6]++;
(function (SecurityEventType) {
  /* istanbul ignore next */
  cov_1fe1wefs5z().f[0]++;
  cov_1fe1wefs5z().s[7]++;
  SecurityEventType["THREAT_DETECTED"] = "threat_detected";
  /* istanbul ignore next */
  cov_1fe1wefs5z().s[8]++;
  SecurityEventType["AUTHENTICATION_FAILURE"] = "authentication_failure";
  /* istanbul ignore next */
  cov_1fe1wefs5z().s[9]++;
  SecurityEventType["UNAUTHORIZED_ACCESS"] = "unauthorized_access";
  /* istanbul ignore next */
  cov_1fe1wefs5z().s[10]++;
  SecurityEventType["SUSPICIOUS_ACTIVITY"] = "suspicious_activity";
  /* istanbul ignore next */
  cov_1fe1wefs5z().s[11]++;
  SecurityEventType["SYSTEM_ANOMALY"] = "system_anomaly";
  /* istanbul ignore next */
  cov_1fe1wefs5z().s[12]++;
  SecurityEventType["NETWORK_INTRUSION"] = "network_intrusion";
  /* istanbul ignore next */
  cov_1fe1wefs5z().s[13]++;
  SecurityEventType["DATA_ACCESS_VIOLATION"] = "data_access_violation";
  /* istanbul ignore next */
  cov_1fe1wefs5z().s[14]++;
  SecurityEventType["CONFIGURATION_CHANGE"] = "configuration_change";
  /* istanbul ignore next */
  cov_1fe1wefs5z().s[15]++;
  SecurityEventType["SECURITY_POLICY_VIOLATION"] = "security_policy_violation";
  /* istanbul ignore next */
  cov_1fe1wefs5z().s[16]++;
  SecurityEventType["INCIDENT_ESCALATION"] = "incident_escalation";
})(
/* istanbul ignore next */
(cov_1fe1wefs5z().b[0][0]++, SecurityEventType) ||
/* istanbul ignore next */
(cov_1fe1wefs5z().b[0][1]++, exports.SecurityEventType = SecurityEventType = {}));
/**
 * Enumeration of security event status
 */
var SecurityEventStatus;
/* istanbul ignore next */
cov_1fe1wefs5z().s[17]++;
(function (SecurityEventStatus) {
  /* istanbul ignore next */
  cov_1fe1wefs5z().f[1]++;
  cov_1fe1wefs5z().s[18]++;
  SecurityEventStatus["NEW"] = "new";
  /* istanbul ignore next */
  cov_1fe1wefs5z().s[19]++;
  SecurityEventStatus["INVESTIGATING"] = "investigating";
  /* istanbul ignore next */
  cov_1fe1wefs5z().s[20]++;
  SecurityEventStatus["RESPONDING"] = "responding";
  /* istanbul ignore next */
  cov_1fe1wefs5z().s[21]++;
  SecurityEventStatus["CONTAINED"] = "contained";
  /* istanbul ignore next */
  cov_1fe1wefs5z().s[22]++;
  SecurityEventStatus["RESOLVED"] = "resolved";
  /* istanbul ignore next */
  cov_1fe1wefs5z().s[23]++;
  SecurityEventStatus["FALSE_POSITIVE"] = "false_positive";
})(
/* istanbul ignore next */
(cov_1fe1wefs5z().b[1][0]++, SecurityEventStatus) ||
/* istanbul ignore next */
(cov_1fe1wefs5z().b[1][1]++, exports.SecurityEventStatus = SecurityEventStatus = {}));
/**
 * Continuous security monitoring service
 * Provides 24/7 security monitoring and threat analysis
 */
class SecurityMonitoringService extends
/* istanbul ignore next */
(events_1.EventEmitter) {
  constructor(config) {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[2]++;
    cov_1fe1wefs5z().s[24]++;
    super();
    /** Security event history */
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[25]++;
    this.eventHistory = [];
    /** Active security incidents */
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[26]++;
    this.activeIncidents = new Map();
    /** Monitoring intervals */
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[27]++;
    this.monitoringInterval = null;
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[28]++;
    this.metricsInterval = null;
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[29]++;
    this.dashboardInterval = null;
    /** Service start time for uptime calculation */
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[30]++;
    this.serviceStartTime = new Date();
    /** Event correlation patterns */
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[31]++;
    this.correlationPatterns = new Map();
    // Initialize configuration with defaults
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[32]++;
    this.config = {
      monitoringInterval: 5000,
      // 5 seconds
      correlationWindow: 300000,
      // 5 minutes
      maxEventHistory: 10000,
      alertThresholds: {
        criticalThreatScore: 9,
        highThreatScore: 7,
        mediumThreatScore: 5,
        eventVelocityThreshold: 100 // events per minute
      },
      dashboardRefreshInterval: 10000,
      // 10 seconds
      metricsInterval: 60000,
      // 1 minute
      ...config
    };
    // Initialize security metrics
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[33]++;
    this.securityMetrics = this.initializeMetrics();
    // Set up event handlers
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[34]++;
    this.setupEventHandlers();
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[35]++;
    logger_1.logger.info('🛡️ Security Monitoring Service initialized');
  }
  /**
   * Start continuous security monitoring
   * Begins 24/7 security monitoring operations
   *
   * @returns Promise<void>
   */
  async startMonitoring() {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[3]++;
    cov_1fe1wefs5z().s[36]++;
    try {
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[37]++;
      logger_1.logger.info('🚀 Starting continuous security monitoring...');
      // Start monitoring intervals
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[38]++;
      this.startMonitoringIntervals();
      // Initialize threat detection integration
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[39]++;
      this.initializeThreatDetectionIntegration();
      // Perform initial security scan
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[40]++;
      await this.performSecurityScan();
      // Create audit entry
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[41]++;
      await audit_service_1.auditService.createAuditEntry({
        auditId: `sec_mon_start_${Date.now()}`,
        eventType: 'SECURITY_MONITORING_START',
        actor: 'SYSTEM',
        resource: 'SECURITY_MONITORING_SERVICE',
        action: 'START_MONITORING',
        result: 'SUCCESS',
        timestamp: new Date(),
        auditData: {
          config: this.config,
          startTime: this.serviceStartTime
        }
      });
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[42]++;
      logger_1.logger.info('✅ Continuous security monitoring started successfully');
    } catch (error) {
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[43]++;
      logger_1.logger.error('❌ Failed to start security monitoring:', error);
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[44]++;
      throw new Error('Security monitoring startup failed');
    }
  }
  /**
   * Stop continuous security monitoring
   * Gracefully stops all monitoring operations
   *
   * @returns Promise<void>
   */
  async stopMonitoring() {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[4]++;
    cov_1fe1wefs5z().s[45]++;
    try {
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[46]++;
      logger_1.logger.info('🛑 Stopping continuous security monitoring...');
      // Stop monitoring intervals
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[47]++;
      this.stopMonitoringIntervals();
      // Create audit entry
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[48]++;
      await audit_service_1.auditService.createAuditEntry({
        auditId: `sec_mon_stop_${Date.now()}`,
        eventType: 'SECURITY_MONITORING_STOP',
        actor: 'SYSTEM',
        resource: 'SECURITY_MONITORING_SERVICE',
        action: 'STOP_MONITORING',
        result: 'SUCCESS',
        timestamp: new Date(),
        auditData: {
          uptime: Date.now() - this.serviceStartTime.getTime(),
          totalEventsProcessed: this.eventHistory.length
        }
      });
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[49]++;
      logger_1.logger.info('✅ Security monitoring stopped successfully');
    } catch (error) {
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[50]++;
      logger_1.logger.error('❌ Failed to stop security monitoring:', error);
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[51]++;
      throw new Error('Security monitoring shutdown failed');
    }
  }
  /**
   * Process security event
   * Analyzes and responds to security events
   *
   * @param event - Security event to process
   * @returns Promise<void>
   */
  async processSecurityEvent(event) {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[5]++;
    cov_1fe1wefs5z().s[52]++;
    try {
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[53]++;
      // Add to event history
      this.addToEventHistory(event);
      // Perform event correlation
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[54]++;
      await this.correlateSecurityEvent(event);
      // Determine response actions
      const responseActions =
      /* istanbul ignore next */
      (cov_1fe1wefs5z().s[55]++, await this.determineResponseActions(event));
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[56]++;
      event.responseActions = responseActions;
      // Execute automated responses
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[57]++;
      await this.executeAutomatedResponse(event);
      // Update security metrics
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[58]++;
      this.updateSecurityMetrics(event);
      // Emit event for external handlers
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[59]++;
      this.emit('securityEvent', event);
      // Create audit entry
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[60]++;
      await audit_service_1.auditService.createAuditEntry({
        auditId: event.eventId,
        eventType: 'SECURITY_EVENT_PROCESSED',
        actor: 'SECURITY_MONITORING_SERVICE',
        resource: event.target,
        action: 'PROCESS_EVENT',
        result: 'SUCCESS',
        timestamp: new Date(),
        auditData: {
          eventType: event.eventType,
          severity: event.severity,
          responseActions: event.responseActions
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[61]++;
      logger_1.logger.error('❌ Failed to process security event:', error);
      // Create error audit entry
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[62]++;
      await audit_service_1.auditService.createAuditEntry({
        auditId: `error_${event.eventId}`,
        eventType: 'SECURITY_EVENT_PROCESSING_ERROR',
        actor: 'SECURITY_MONITORING_SERVICE',
        resource: event.target,
        action: 'PROCESS_EVENT',
        result: 'FAILURE',
        timestamp: new Date(),
        auditData: {
          error: error.message,
          originalEvent: event
        }
      });
    }
  }
  /**
   * Get security dashboard data
   * Returns comprehensive security status for dashboard
   *
   * @returns SecurityDashboardData Current security dashboard data
   */
  getSecurityDashboardData() {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[6]++;
    const now =
    /* istanbul ignore next */
    (cov_1fe1wefs5z().s[63]++, new Date());
    const recentEvents =
    /* istanbul ignore next */
    (cov_1fe1wefs5z().s[64]++, this.eventHistory.filter(event => {
      /* istanbul ignore next */
      cov_1fe1wefs5z().f[7]++;
      cov_1fe1wefs5z().s[65]++;
      return now.getTime() - event.timestamp.getTime() < 3600000;
    }) // Last hour
    .slice(-50)); // Last 50 events
    // Calculate security status
    const criticalEvents =
    /* istanbul ignore next */
    (cov_1fe1wefs5z().s[66]++, recentEvents.filter(e => {
      /* istanbul ignore next */
      cov_1fe1wefs5z().f[8]++;
      cov_1fe1wefs5z().s[67]++;
      return e.severity >= this.config.alertThresholds.criticalThreatScore;
    }));
    const highEvents =
    /* istanbul ignore next */
    (cov_1fe1wefs5z().s[68]++, recentEvents.filter(e => {
      /* istanbul ignore next */
      cov_1fe1wefs5z().f[9]++;
      cov_1fe1wefs5z().s[69]++;
      return e.severity >= this.config.alertThresholds.highThreatScore;
    }));
    let securityStatus =
    /* istanbul ignore next */
    (cov_1fe1wefs5z().s[70]++, 'SECURE');
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[71]++;
    if (criticalEvents.length > 0) {
      /* istanbul ignore next */
      cov_1fe1wefs5z().b[2][0]++;
      cov_1fe1wefs5z().s[72]++;
      securityStatus = 'CRITICAL';
    } else {
      /* istanbul ignore next */
      cov_1fe1wefs5z().b[2][1]++;
      cov_1fe1wefs5z().s[73]++;
      if (highEvents.length > 0) {
        /* istanbul ignore next */
        cov_1fe1wefs5z().b[3][0]++;
        cov_1fe1wefs5z().s[74]++;
        securityStatus = 'WARNING';
      } else
      /* istanbul ignore next */
      {
        cov_1fe1wefs5z().b[3][1]++;
      }
    }
    // Generate threat visualization data
    const threatVisualization =
    /* istanbul ignore next */
    (cov_1fe1wefs5z().s[75]++, this.generateThreatVisualization(recentEvents));
    // Generate system health data
    const systemHealth =
    /* istanbul ignore next */
    (cov_1fe1wefs5z().s[76]++, this.generateSystemHealthData());
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[77]++;
    return {
      securityStatus,
      activeThreats: this.activeIncidents.size,
      recentEvents,
      metrics: this.securityMetrics,
      threatVisualization,
      systemHealth
    };
  }
  /**
   * Get security metrics
   * Returns current security metrics and KPIs
   *
   * @returns SecurityMetrics Current security metrics
   */
  getSecurityMetrics() {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[10]++;
    cov_1fe1wefs5z().s[78]++;
    return {
      ...this.securityMetrics
    };
  }
  /**
   * Initialize security metrics
   * Sets up initial metrics structure
   *
   * @returns SecurityMetrics Initial metrics
   */
  initializeMetrics() {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[11]++;
    cov_1fe1wefs5z().s[79]++;
    return {
      totalEvents: 0,
      eventsBySeverity: {},
      eventsByType: {},
      threatDetectionRate: 0,
      falsePositiveRate: 0,
      averageResponseTime: 0,
      securityScore: 100,
      monitoringUptime: 0,
      lastUpdate: new Date()
    };
  }
  /**
   * Set up event handlers
   * Configures event handling for security monitoring
   */
  setupEventHandlers() {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[12]++;
    cov_1fe1wefs5z().s[80]++;
    // Handle threat detection events
    this.on('securityEvent', async event => {
      /* istanbul ignore next */
      cov_1fe1wefs5z().f[13]++;
      cov_1fe1wefs5z().s[81]++;
      try {
        /* istanbul ignore next */
        cov_1fe1wefs5z().s[82]++;
        // Log security event
        logger_1.logger.security('SECURITY_EVENT', 'Security event processed', {
          eventId: event.eventId,
          eventType: event.eventType,
          severity: event.severity,
          source: event.source,
          classification: 'RESTRICTED'
        });
        // Handle high-severity events
        /* istanbul ignore next */
        cov_1fe1wefs5z().s[83]++;
        if (event.severity >= this.config.alertThresholds.highThreatScore) {
          /* istanbul ignore next */
          cov_1fe1wefs5z().b[4][0]++;
          cov_1fe1wefs5z().s[84]++;
          await this.handleHighSeverityEvent(event);
        } else
        /* istanbul ignore next */
        {
          cov_1fe1wefs5z().b[4][1]++;
        }
        // Handle critical events
        cov_1fe1wefs5z().s[85]++;
        if (event.severity >= this.config.alertThresholds.criticalThreatScore) {
          /* istanbul ignore next */
          cov_1fe1wefs5z().b[5][0]++;
          cov_1fe1wefs5z().s[86]++;
          await this.handleCriticalEvent(event);
        } else
        /* istanbul ignore next */
        {
          cov_1fe1wefs5z().b[5][1]++;
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_1fe1wefs5z().s[87]++;
        logger_1.logger.error('❌ Error handling security event:', error);
      }
    });
  }
  /**
   * Start monitoring intervals
   * Begins periodic monitoring tasks
   */
  startMonitoringIntervals() {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[14]++;
    cov_1fe1wefs5z().s[88]++;
    // Main monitoring interval
    this.monitoringInterval = setInterval(async () => {
      /* istanbul ignore next */
      cov_1fe1wefs5z().f[15]++;
      cov_1fe1wefs5z().s[89]++;
      try {
        /* istanbul ignore next */
        cov_1fe1wefs5z().s[90]++;
        await this.performSecurityScan();
      } catch (error) {
        /* istanbul ignore next */
        cov_1fe1wefs5z().s[91]++;
        logger_1.logger.error('❌ Security scan error:', error);
      }
    }, this.config.monitoringInterval);
    // Metrics collection interval
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[92]++;
    this.metricsInterval = setInterval(() => {
      /* istanbul ignore next */
      cov_1fe1wefs5z().f[16]++;
      cov_1fe1wefs5z().s[93]++;
      try {
        /* istanbul ignore next */
        cov_1fe1wefs5z().s[94]++;
        this.updateMetrics();
      } catch (error) {
        /* istanbul ignore next */
        cov_1fe1wefs5z().s[95]++;
        logger_1.logger.error('❌ Metrics update error:', error);
      }
    }, this.config.metricsInterval);
    // Dashboard refresh interval
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[96]++;
    this.dashboardInterval = setInterval(() => {
      /* istanbul ignore next */
      cov_1fe1wefs5z().f[17]++;
      cov_1fe1wefs5z().s[97]++;
      try {
        /* istanbul ignore next */
        cov_1fe1wefs5z().s[98]++;
        this.emit('dashboardUpdate', this.getSecurityDashboardData());
      } catch (error) {
        /* istanbul ignore next */
        cov_1fe1wefs5z().s[99]++;
        logger_1.logger.error('❌ Dashboard update error:', error);
      }
    }, this.config.dashboardRefreshInterval);
  }
  /**
   * Stop monitoring intervals
   * Stops all periodic monitoring tasks
   */
  stopMonitoringIntervals() {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[18]++;
    cov_1fe1wefs5z().s[100]++;
    if (this.monitoringInterval) {
      /* istanbul ignore next */
      cov_1fe1wefs5z().b[6][0]++;
      cov_1fe1wefs5z().s[101]++;
      clearInterval(this.monitoringInterval);
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[102]++;
      this.monitoringInterval = null;
    } else
    /* istanbul ignore next */
    {
      cov_1fe1wefs5z().b[6][1]++;
    }
    cov_1fe1wefs5z().s[103]++;
    if (this.metricsInterval) {
      /* istanbul ignore next */
      cov_1fe1wefs5z().b[7][0]++;
      cov_1fe1wefs5z().s[104]++;
      clearInterval(this.metricsInterval);
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[105]++;
      this.metricsInterval = null;
    } else
    /* istanbul ignore next */
    {
      cov_1fe1wefs5z().b[7][1]++;
    }
    cov_1fe1wefs5z().s[106]++;
    if (this.dashboardInterval) {
      /* istanbul ignore next */
      cov_1fe1wefs5z().b[8][0]++;
      cov_1fe1wefs5z().s[107]++;
      clearInterval(this.dashboardInterval);
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[108]++;
      this.dashboardInterval = null;
    } else
    /* istanbul ignore next */
    {
      cov_1fe1wefs5z().b[8][1]++;
    }
  }
  /**
   * Initialize threat detection integration
   * Sets up integration with threat detection engine
   */
  initializeThreatDetectionIntegration() {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[19]++;
    cov_1fe1wefs5z().s[109]++;
    // Listen for threat detection events
    threat_detection_engine_1.threatDetectionEngine.on('threatDetected', async threat => {
      /* istanbul ignore next */
      cov_1fe1wefs5z().f[20]++;
      const securityEvent =
      /* istanbul ignore next */
      (cov_1fe1wefs5z().s[110]++, {
        eventId: threat.detectionId,
        eventType: SecurityEventType.THREAT_DETECTED,
        severity: threat.severity,
        source: threat.source,
        target: threat.target,
        timestamp: threat.timestamp,
        details: {
          threatType: threat.threatType,
          confidence: threat.confidence,
          detectionMethod: threat.detectionMethod,
          rawData: threat.rawData
        },
        threatDetection: threat,
        status: SecurityEventStatus.NEW,
        responseActions: []
      });
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[111]++;
      await this.processSecurityEvent(securityEvent);
    });
    // Listen for high-severity threats
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[112]++;
    threat_detection_engine_1.threatDetectionEngine.on('highSeverityThreat', async threat => {
      /* istanbul ignore next */
      cov_1fe1wefs5z().f[21]++;
      cov_1fe1wefs5z().s[113]++;
      logger_1.logger.warn('🚨 HIGH SEVERITY THREAT DETECTED', {
        detectionId: threat.detectionId,
        threatType: threat.threatType,
        severity: threat.severity,
        source: threat.source
      });
      // Trigger immediate response
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[114]++;
      await this.handleCriticalThreat(threat);
    });
  }
  /**
   * Perform security scan
   * Conducts comprehensive security monitoring scan
   *
   * @returns Promise<void>
   */
  async performSecurityScan() {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[22]++;
    cov_1fe1wefs5z().s[115]++;
    try {
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[116]++;
      // Check system health
      await this.checkSystemHealth();
      // Monitor event velocity
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[117]++;
      this.monitorEventVelocity();
      // Clean up old events
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[118]++;
      this.cleanupOldEvents();
      // Update correlation patterns
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[119]++;
      this.updateCorrelationPatterns();
    } catch (error) {
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[120]++;
      logger_1.logger.error('❌ Security scan failed:', error);
    }
  }
  /**
   * Add event to history
   * Adds security event to monitoring history
   *
   * @param event - Security event to add
   */
  addToEventHistory(event) {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[23]++;
    cov_1fe1wefs5z().s[121]++;
    this.eventHistory.push(event);
    // Maintain history size limit
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[122]++;
    if (this.eventHistory.length > this.config.maxEventHistory) {
      /* istanbul ignore next */
      cov_1fe1wefs5z().b[9][0]++;
      cov_1fe1wefs5z().s[123]++;
      this.eventHistory.shift();
    } else
    /* istanbul ignore next */
    {
      cov_1fe1wefs5z().b[9][1]++;
    }
    // Add to active incidents if high severity
    cov_1fe1wefs5z().s[124]++;
    if (event.severity >= this.config.alertThresholds.highThreatScore) {
      /* istanbul ignore next */
      cov_1fe1wefs5z().b[10][0]++;
      cov_1fe1wefs5z().s[125]++;
      this.activeIncidents.set(event.eventId, event);
    } else
    /* istanbul ignore next */
    {
      cov_1fe1wefs5z().b[10][1]++;
    }
  }
  /**
   * Correlate security event
   * Analyzes event for correlation with other events
   *
   * @param event - Security event to correlate
   * @returns Promise<void>
   */
  async correlateSecurityEvent(event) {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[24]++;
    cov_1fe1wefs5z().s[126]++;
    try {
      const correlationKey =
      /* istanbul ignore next */
      (cov_1fe1wefs5z().s[127]++, `${event.source}_${event.eventType}`);
      const correlatedEvents =
      /* istanbul ignore next */
      (cov_1fe1wefs5z().s[128]++,
      /* istanbul ignore next */
      (cov_1fe1wefs5z().b[11][0]++, this.correlationPatterns.get(correlationKey)) ||
      /* istanbul ignore next */
      (cov_1fe1wefs5z().b[11][1]++, []));
      // Add current event to correlation
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[129]++;
      correlatedEvents.push(event);
      // Keep only events within correlation window
      const windowStart =
      /* istanbul ignore next */
      (cov_1fe1wefs5z().s[130]++, Date.now() - this.config.correlationWindow);
      const recentEvents =
      /* istanbul ignore next */
      (cov_1fe1wefs5z().s[131]++, correlatedEvents.filter(e => {
        /* istanbul ignore next */
        cov_1fe1wefs5z().f[25]++;
        cov_1fe1wefs5z().s[132]++;
        return e.timestamp.getTime() > windowStart;
      }));
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[133]++;
      this.correlationPatterns.set(correlationKey, recentEvents);
      // Check for correlation patterns
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[134]++;
      if (recentEvents.length >= 3) {
        /* istanbul ignore next */
        cov_1fe1wefs5z().b[12][0]++;
        cov_1fe1wefs5z().s[135]++;
        await this.handleCorrelatedEvents(correlationKey, recentEvents);
      } else
      /* istanbul ignore next */
      {
        cov_1fe1wefs5z().b[12][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[136]++;
      logger_1.logger.error('❌ Event correlation failed:', error);
    }
  }
  /**
   * Determine response actions
   * Determines appropriate response actions for security event
   *
   * @param event - Security event
   * @returns Promise<string[]> Response actions
   */
  async determineResponseActions(event) {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[26]++;
    const actions =
    /* istanbul ignore next */
    (cov_1fe1wefs5z().s[137]++, []);
    // Actions based on event type
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[138]++;
    switch (event.eventType) {
      case SecurityEventType.THREAT_DETECTED:
        /* istanbul ignore next */
        cov_1fe1wefs5z().b[13][0]++;
        cov_1fe1wefs5z().s[139]++;
        actions.push('Log threat details');
        /* istanbul ignore next */
        cov_1fe1wefs5z().s[140]++;
        if (event.severity >= 7) {
          /* istanbul ignore next */
          cov_1fe1wefs5z().b[14][0]++;
          cov_1fe1wefs5z().s[141]++;
          actions.push('Alert security team');
        } else
        /* istanbul ignore next */
        {
          cov_1fe1wefs5z().b[14][1]++;
        }
        cov_1fe1wefs5z().s[142]++;
        if (event.severity >= 9) {
          /* istanbul ignore next */
          cov_1fe1wefs5z().b[15][0]++;
          cov_1fe1wefs5z().s[143]++;
          actions.push('Initiate incident response');
        } else
        /* istanbul ignore next */
        {
          cov_1fe1wefs5z().b[15][1]++;
        }
        cov_1fe1wefs5z().s[144]++;
        break;
      case SecurityEventType.AUTHENTICATION_FAILURE:
        /* istanbul ignore next */
        cov_1fe1wefs5z().b[13][1]++;
        cov_1fe1wefs5z().s[145]++;
        actions.push('Monitor source IP');
        /* istanbul ignore next */
        cov_1fe1wefs5z().s[146]++;
        if (event.severity >= 5) {
          /* istanbul ignore next */
          cov_1fe1wefs5z().b[16][0]++;
          cov_1fe1wefs5z().s[147]++;
          actions.push('Implement rate limiting');
        } else
        /* istanbul ignore next */
        {
          cov_1fe1wefs5z().b[16][1]++;
        }
        cov_1fe1wefs5z().s[148]++;
        break;
      case SecurityEventType.UNAUTHORIZED_ACCESS:
        /* istanbul ignore next */
        cov_1fe1wefs5z().b[13][2]++;
        cov_1fe1wefs5z().s[149]++;
        actions.push('Block access attempt');
        /* istanbul ignore next */
        cov_1fe1wefs5z().s[150]++;
        actions.push('Alert security team');
        /* istanbul ignore next */
        cov_1fe1wefs5z().s[151]++;
        break;
      default:
        /* istanbul ignore next */
        cov_1fe1wefs5z().b[13][3]++;
        cov_1fe1wefs5z().s[152]++;
        actions.push('Monitor and log');
    }
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[153]++;
    return actions;
  }
  /**
   * Execute automated response
   * Executes automated response actions for security event
   *
   * @param event - Security event
   * @returns Promise<void>
   */
  async executeAutomatedResponse(event) {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[27]++;
    cov_1fe1wefs5z().s[154]++;
    try {
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[155]++;
      for (const action of event.responseActions) {
        /* istanbul ignore next */
        cov_1fe1wefs5z().s[156]++;
        switch (action) {
          case 'Log threat details':
            /* istanbul ignore next */
            cov_1fe1wefs5z().b[17][0]++;
            cov_1fe1wefs5z().s[157]++;
            logger_1.logger.security('THREAT_DETAILS', 'Detailed threat information', {
              eventId: event.eventId,
              details: event.details,
              classification: 'RESTRICTED'
            });
            /* istanbul ignore next */
            cov_1fe1wefs5z().s[158]++;
            break;
          case 'Alert security team':
            /* istanbul ignore next */
            cov_1fe1wefs5z().b[17][1]++;
            cov_1fe1wefs5z().s[159]++;
            await this.sendSecurityAlert(event);
            /* istanbul ignore next */
            cov_1fe1wefs5z().s[160]++;
            break;
          case 'Initiate incident response':
            /* istanbul ignore next */
            cov_1fe1wefs5z().b[17][2]++;
            cov_1fe1wefs5z().s[161]++;
            await this.initiateIncidentResponse(event);
            /* istanbul ignore next */
            cov_1fe1wefs5z().s[162]++;
            break;
          case 'Monitor source IP':
            /* istanbul ignore next */
            cov_1fe1wefs5z().b[17][3]++;
            cov_1fe1wefs5z().s[163]++;
            // Implementation would add IP to monitoring list
            logger_1.logger.info(`🔍 Monitoring IP: ${event.source}`);
            /* istanbul ignore next */
            cov_1fe1wefs5z().s[164]++;
            break;
          case 'Block access attempt':
            /* istanbul ignore next */
            cov_1fe1wefs5z().b[17][4]++;
            cov_1fe1wefs5z().s[165]++;
            // Implementation would block access
            logger_1.logger.warn(`🚫 Blocking access from: ${event.source}`);
            /* istanbul ignore next */
            cov_1fe1wefs5z().s[166]++;
            break;
          default:
            /* istanbul ignore next */
            cov_1fe1wefs5z().b[17][5]++;
            cov_1fe1wefs5z().s[167]++;
            logger_1.logger.debug(`📝 Response action: ${action}`);
        }
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[168]++;
      logger_1.logger.error('❌ Automated response execution failed:', error);
    }
  }
  /**
   * Update security metrics
   * Updates security metrics based on processed event
   *
   * @param event - Processed security event
   */
  updateSecurityMetrics(event) {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[28]++;
    cov_1fe1wefs5z().s[169]++;
    this.securityMetrics.totalEvents++;
    // Update events by severity
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[170]++;
    this.securityMetrics.eventsBySeverity[event.severity] = (
    /* istanbul ignore next */
    (cov_1fe1wefs5z().b[18][0]++, this.securityMetrics.eventsBySeverity[event.severity]) ||
    /* istanbul ignore next */
    (cov_1fe1wefs5z().b[18][1]++, 0)) + 1;
    // Update events by type
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[171]++;
    this.securityMetrics.eventsByType[event.eventType] = (
    /* istanbul ignore next */
    (cov_1fe1wefs5z().b[19][0]++, this.securityMetrics.eventsByType[event.eventType]) ||
    /* istanbul ignore next */
    (cov_1fe1wefs5z().b[19][1]++, 0)) + 1;
    // Update last update timestamp
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[172]++;
    this.securityMetrics.lastUpdate = new Date();
  }
  /**
   * Handle high-severity event
   * Processes high-severity security events
   *
   * @param event - High-severity security event
   * @returns Promise<void>
   */
  async handleHighSeverityEvent(event) {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[29]++;
    cov_1fe1wefs5z().s[173]++;
    logger_1.logger.warn('⚠️ HIGH SEVERITY SECURITY EVENT', {
      eventId: event.eventId,
      eventType: event.eventType,
      severity: event.severity,
      source: event.source
    });
    // Send immediate alert
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[174]++;
    await this.sendSecurityAlert(event);
    // Update event status
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[175]++;
    event.status = SecurityEventStatus.INVESTIGATING;
  }
  /**
   * Handle critical event
   * Processes critical security events
   *
   * @param event - Critical security event
   * @returns Promise<void>
   */
  async handleCriticalEvent(event) {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[30]++;
    cov_1fe1wefs5z().s[176]++;
    logger_1.logger.error('🚨 CRITICAL SECURITY EVENT', {
      eventId: event.eventId,
      eventType: event.eventType,
      severity: event.severity,
      source: event.source
    });
    // Initiate incident response
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[177]++;
    await this.initiateIncidentResponse(event);
    // Update event status
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[178]++;
    event.status = SecurityEventStatus.RESPONDING;
  }
  /**
   * Handle critical threat
   * Processes critical threat detection events
   *
   * @param threat - Critical threat detection event
   * @returns Promise<void>
   */
  async handleCriticalThreat(threat) {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[31]++;
    // Create emergency security event
    const emergencyEvent =
    /* istanbul ignore next */
    (cov_1fe1wefs5z().s[179]++, {
      eventId: `emergency_${threat.detectionId}`,
      eventType: SecurityEventType.INCIDENT_ESCALATION,
      severity: 10,
      source: threat.source,
      target: threat.target,
      timestamp: new Date(),
      details: {
        originalThreat: threat,
        escalationReason: 'Critical threat severity'
      },
      threatDetection: threat,
      status: SecurityEventStatus.NEW,
      responseActions: ['Initiate emergency response', 'Alert all stakeholders']
    });
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[180]++;
    await this.processSecurityEvent(emergencyEvent);
  }
  /**
   * Handle correlated events
   * Processes correlated security events
   *
   * @param correlationKey - Correlation key
   * @param events - Correlated events
   * @returns Promise<void>
   */
  async handleCorrelatedEvents(correlationKey, events) {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[32]++;
    cov_1fe1wefs5z().s[181]++;
    logger_1.logger.warn('🔗 CORRELATED SECURITY EVENTS DETECTED', {
      correlationKey,
      eventCount: events.length,
      timeSpan: events[events.length - 1].timestamp.getTime() - events[0].timestamp.getTime()
    });
    // Create correlation event
    const correlationEvent =
    /* istanbul ignore next */
    (cov_1fe1wefs5z().s[182]++, {
      eventId: `correlation_${Date.now()}`,
      eventType: SecurityEventType.SUSPICIOUS_ACTIVITY,
      severity: Math.max(...events.map(e => {
        /* istanbul ignore next */
        cov_1fe1wefs5z().f[33]++;
        cov_1fe1wefs5z().s[183]++;
        return e.severity;
      })) + 1,
      source: correlationKey,
      target: 'SYSTEM',
      timestamp: new Date(),
      details: {
        correlatedEvents: events.map(e => {
          /* istanbul ignore next */
          cov_1fe1wefs5z().f[34]++;
          cov_1fe1wefs5z().s[184]++;
          return e.eventId;
        }),
        pattern: correlationKey,
        eventCount: events.length
      },
      status: SecurityEventStatus.NEW,
      responseActions: ['Investigate correlation pattern', 'Monitor for additional events']
    });
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[185]++;
    await this.processSecurityEvent(correlationEvent);
  }
  /**
   * Send security alert
   * Sends security alert notification
   *
   * @param event - Security event to alert about
   * @returns Promise<void>
   */
  async sendSecurityAlert(event) {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[35]++;
    cov_1fe1wefs5z().s[186]++;
    // Implementation would send actual alerts (email, Telegram, etc.)
    logger_1.logger.info('📧 Security alert sent', {
      eventId: event.eventId,
      severity: event.severity,
      eventType: event.eventType
    });
  }
  /**
   * Initiate incident response
   * Starts incident response procedures
   *
   * @param event - Security event triggering incident response
   * @returns Promise<void>
   */
  async initiateIncidentResponse(event) {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[36]++;
    cov_1fe1wefs5z().s[187]++;
    logger_1.logger.error('🚨 INCIDENT RESPONSE INITIATED', {
      eventId: event.eventId,
      severity: event.severity,
      eventType: event.eventType
    });
    // Implementation would trigger incident response procedures
    // This would integrate with the incident response system
  }
  /**
   * Check system health
   * Monitors system health indicators
   *
   * @returns Promise<void>
   */
  async checkSystemHealth() {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[37]++;
  } // Implementation would check various system health indicators
  // CPU usage, memory usage, disk space, network connectivity, etc.
  /**
   * Monitor event velocity
   * Monitors the rate of security events
   */
  monitorEventVelocity() {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[38]++;
    const oneMinuteAgo =
    /* istanbul ignore next */
    (cov_1fe1wefs5z().s[188]++, Date.now() - 60000);
    const recentEvents =
    /* istanbul ignore next */
    (cov_1fe1wefs5z().s[189]++, this.eventHistory.filter(event => {
      /* istanbul ignore next */
      cov_1fe1wefs5z().f[39]++;
      cov_1fe1wefs5z().s[190]++;
      return event.timestamp.getTime() > oneMinuteAgo;
    }));
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[191]++;
    if (recentEvents.length > this.config.alertThresholds.eventVelocityThreshold) {
      /* istanbul ignore next */
      cov_1fe1wefs5z().b[20][0]++;
      cov_1fe1wefs5z().s[192]++;
      logger_1.logger.warn('⚡ HIGH EVENT VELOCITY DETECTED', {
        eventsPerMinute: recentEvents.length,
        threshold: this.config.alertThresholds.eventVelocityThreshold
      });
    } else
    /* istanbul ignore next */
    {
      cov_1fe1wefs5z().b[20][1]++;
    }
  }
  /**
   * Clean up old events
   * Removes old events from memory
   */
  cleanupOldEvents() {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[40]++;
    const cutoffTime =
    /* istanbul ignore next */
    (cov_1fe1wefs5z().s[193]++, Date.now() - 24 * 60 * 60 * 1000); // 24 hours
    // Clean up event history
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[194]++;
    this.eventHistory = this.eventHistory.filter(event => {
      /* istanbul ignore next */
      cov_1fe1wefs5z().f[41]++;
      cov_1fe1wefs5z().s[195]++;
      return event.timestamp.getTime() > cutoffTime;
    });
    // Clean up active incidents (resolved or old)
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[196]++;
    for (const [eventId, incident] of this.activeIncidents.entries()) {
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[197]++;
      if (
      /* istanbul ignore next */
      (cov_1fe1wefs5z().b[22][0]++, incident.status === SecurityEventStatus.RESOLVED) ||
      /* istanbul ignore next */
      (cov_1fe1wefs5z().b[22][1]++, incident.timestamp.getTime() < cutoffTime)) {
        /* istanbul ignore next */
        cov_1fe1wefs5z().b[21][0]++;
        cov_1fe1wefs5z().s[198]++;
        this.activeIncidents.delete(eventId);
      } else
      /* istanbul ignore next */
      {
        cov_1fe1wefs5z().b[21][1]++;
      }
    }
    // Clean up correlation patterns
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[199]++;
    for (const [key, events] of this.correlationPatterns.entries()) {
      const recentEvents =
      /* istanbul ignore next */
      (cov_1fe1wefs5z().s[200]++, events.filter(event => {
        /* istanbul ignore next */
        cov_1fe1wefs5z().f[42]++;
        cov_1fe1wefs5z().s[201]++;
        return event.timestamp.getTime() > cutoffTime;
      }));
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[202]++;
      if (recentEvents.length === 0) {
        /* istanbul ignore next */
        cov_1fe1wefs5z().b[23][0]++;
        cov_1fe1wefs5z().s[203]++;
        this.correlationPatterns.delete(key);
      } else {
        /* istanbul ignore next */
        cov_1fe1wefs5z().b[23][1]++;
        cov_1fe1wefs5z().s[204]++;
        this.correlationPatterns.set(key, recentEvents);
      }
    }
  }
  /**
   * Update correlation patterns
   * Updates event correlation patterns
   */
  updateCorrelationPatterns() {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[43]++;
  } // Implementation would analyze patterns and update correlation rules
  // This could use machine learning for pattern recognition
  /**
   * Update metrics
   * Updates security metrics and KPIs
   */
  updateMetrics() {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[44]++;
    cov_1fe1wefs5z().s[205]++;
    // Calculate monitoring uptime
    this.securityMetrics.monitoringUptime = (Date.now() - this.serviceStartTime.getTime()) / 1000;
    // Calculate threat detection rate
    const totalThreats =
    /* istanbul ignore next */
    (cov_1fe1wefs5z().s[206]++, this.eventHistory.filter(event => {
      /* istanbul ignore next */
      cov_1fe1wefs5z().f[45]++;
      cov_1fe1wefs5z().s[207]++;
      return event.eventType === SecurityEventType.THREAT_DETECTED;
    }).length);
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[208]++;
    this.securityMetrics.threatDetectionRate = this.securityMetrics.totalEvents > 0 ?
    /* istanbul ignore next */
    (cov_1fe1wefs5z().b[24][0]++, totalThreats / this.securityMetrics.totalEvents * 100) :
    /* istanbul ignore next */
    (cov_1fe1wefs5z().b[24][1]++, 0);
    // Calculate security score based on recent events
    const recentEvents =
    /* istanbul ignore next */
    (cov_1fe1wefs5z().s[209]++, this.eventHistory.filter(event => {
      /* istanbul ignore next */
      cov_1fe1wefs5z().f[46]++;
      cov_1fe1wefs5z().s[210]++;
      return Date.now() - event.timestamp.getTime() < 3600000;
    } // Last hour
    ));
    const severitySum =
    /* istanbul ignore next */
    (cov_1fe1wefs5z().s[211]++, recentEvents.reduce((sum, event) => {
      /* istanbul ignore next */
      cov_1fe1wefs5z().f[47]++;
      cov_1fe1wefs5z().s[212]++;
      return sum + event.severity;
    }, 0));
    const averageSeverity =
    /* istanbul ignore next */
    (cov_1fe1wefs5z().s[213]++, recentEvents.length > 0 ?
    /* istanbul ignore next */
    (cov_1fe1wefs5z().b[25][0]++, severitySum / recentEvents.length) :
    /* istanbul ignore next */
    (cov_1fe1wefs5z().b[25][1]++, 0));
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[214]++;
    this.securityMetrics.securityScore = Math.max(0, 100 - averageSeverity * 10);
    // Update timestamp
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[215]++;
    this.securityMetrics.lastUpdate = new Date();
  }
  /**
   * Generate threat visualization data
   * Creates data for threat visualization dashboard
   *
   * @param events - Security events to visualize
   * @returns Threat visualization data
   */
  generateThreatVisualization(events) {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[48]++;
    const threatsByType =
    /* istanbul ignore next */
    (cov_1fe1wefs5z().s[216]++, {});
    const threatsBySource =
    /* istanbul ignore next */
    (cov_1fe1wefs5z().s[217]++, {});
    const threatTimeline =
    /* istanbul ignore next */
    (cov_1fe1wefs5z().s[218]++, []);
    // Count threats by type
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[219]++;
    for (const event of events) {
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[220]++;
      threatsByType[event.eventType] = (
      /* istanbul ignore next */
      (cov_1fe1wefs5z().b[26][0]++, threatsByType[event.eventType]) ||
      /* istanbul ignore next */
      (cov_1fe1wefs5z().b[26][1]++, 0)) + 1;
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[221]++;
      threatsBySource[event.source] = (
      /* istanbul ignore next */
      (cov_1fe1wefs5z().b[27][0]++, threatsBySource[event.source]) ||
      /* istanbul ignore next */
      (cov_1fe1wefs5z().b[27][1]++, 0)) + 1;
    }
    // Generate timeline (hourly buckets for last 24 hours)
    const now =
    /* istanbul ignore next */
    (cov_1fe1wefs5z().s[222]++, new Date());
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[223]++;
    for (let i =
    /* istanbul ignore next */
    (cov_1fe1wefs5z().s[224]++, 23); i >= 0; i--) {
      const bucketTime =
      /* istanbul ignore next */
      (cov_1fe1wefs5z().s[225]++, new Date(now.getTime() - i * 60 * 60 * 1000));
      const bucketStart =
      /* istanbul ignore next */
      (cov_1fe1wefs5z().s[226]++, bucketTime.getTime());
      const bucketEnd =
      /* istanbul ignore next */
      (cov_1fe1wefs5z().s[227]++, bucketStart + 60 * 60 * 1000);
      const count =
      /* istanbul ignore next */
      (cov_1fe1wefs5z().s[228]++, events.filter(event => {
        /* istanbul ignore next */
        cov_1fe1wefs5z().f[49]++;
        cov_1fe1wefs5z().s[229]++;
        return /* istanbul ignore next */(cov_1fe1wefs5z().b[28][0]++, event.timestamp.getTime() >= bucketStart) &&
        /* istanbul ignore next */
        (cov_1fe1wefs5z().b[28][1]++, event.timestamp.getTime() < bucketEnd);
      }).length);
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[230]++;
      threatTimeline.push({
        timestamp: bucketTime,
        count
      });
    }
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[231]++;
    return {
      threatsByType,
      threatsBySource,
      threatTimeline
    };
  }
  /**
   * Generate system health data
   * Creates system health indicators for dashboard
   *
   * @returns System health data
   */
  generateSystemHealthData() {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[50]++;
    cov_1fe1wefs5z().s[232]++;
    return {
      monitoringStatus: this.monitoringInterval ?
      /* istanbul ignore next */
      (cov_1fe1wefs5z().b[29][0]++, 'ACTIVE') :
      /* istanbul ignore next */
      (cov_1fe1wefs5z().b[29][1]++, 'OFFLINE'),
      lastHealthCheck: new Date(),
      componentStatus: {
        'Threat Detection': 'HEALTHY',
        'Event Processing': 'HEALTHY',
        'Audit Logging': 'HEALTHY',
        'Alert System': 'HEALTHY'
      }
    };
  }
  /**
   * Get service status
   * Returns current service status for monitoring
   *
   * @returns Service status information
   */
  getStatus() {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[51]++;
    cov_1fe1wefs5z().s[233]++;
    return {
      isMonitoring: this.monitoringInterval !== null,
      eventHistory: this.eventHistory.length,
      activeIncidents: this.activeIncidents.size,
      correlationPatterns: this.correlationPatterns.size,
      uptime: Date.now() - this.serviceStartTime.getTime(),
      timestamp: Date.now()
    };
  }
}
/* istanbul ignore next */
cov_1fe1wefs5z().s[234]++;
exports.SecurityMonitoringService = SecurityMonitoringService;
// Create and export singleton instance
/* istanbul ignore next */
cov_1fe1wefs5z().s[235]++;
exports.securityMonitoringService = new SecurityMonitoringService();
// =============================================================================
// SECURITY MONITORING NOTES
// =============================================================================
// 1. 24/7 continuous monitoring of all security events and threats
// 2. Real-time threat detection and automated response capabilities
// 3. Event correlation and pattern analysis for advanced threat detection
// 4. Comprehensive security metrics and KPI tracking
// 5. Security dashboard with real-time threat visualization
// 6. Automated incident response and escalation procedures
// 7. Integration with threat detection engine and audit service
// 8. Configurable alert thresholds and response actions
// =============================================================================