{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\system-monitor.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\system-monitor.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * AI CRYPTO TRADING AGENT - INTEL NUC SYSTEM MONITOR\r\n * =============================================================================\r\n * \r\n * This service provides comprehensive hardware monitoring for Intel NUC systems\r\n * running the AI crypto trading agent. It monitors CPU, RAM, SSD, network, and\r\n * thermal conditions to ensure optimal trading performance.\r\n * \r\n * CRITICAL PERFORMANCE NOTICE:\r\n * This system monitors hardware that controls trading operations. Hardware\r\n * failures or performance degradation could impact trading decisions and\r\n * result in financial losses. All metrics are continuously monitored.\r\n * \r\n * Hardware Specifications:\r\n * - Intel NUC with i5 CPU\r\n * - 12GB RAM\r\n * - 256GB M.2 SSD\r\n * - Wireless and Gigabit Ethernet\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport * as si from 'systeminformation';\r\nimport { logger } from '@/core/logging/logger';\r\nimport { auditService } from '@/security/audit-service';\r\n\r\n/**\r\n * Interface for CPU metrics\r\n */\r\nexport interface CPUMetrics {\r\n  /** CPU utilization percentage */\r\n  utilization: number;\r\n  /** CPU temperature in Celsius */\r\n  temperature: number;\r\n  /** CPU frequency in MHz */\r\n  frequency: number;\r\n  /** Load average (1, 5, 15 minutes) */\r\n  loadAverage: number[];\r\n  /** Number of processes */\r\n  processes: number;\r\n  /** CPU cores information */\r\n  cores: {\r\n    physical: number;\r\n    logical: number;\r\n  };\r\n  /** CPU brand and model */\r\n  brand: string;\r\n  /** CPU speed in GHz */\r\n  speed: number;\r\n}\r\n\r\n/**\r\n * Interface for RAM metrics\r\n */\r\nexport interface RAMMetrics {\r\n  /** Total RAM in bytes */\r\n  total: number;\r\n  /** Used RAM in bytes */\r\n  used: number;\r\n  /** Free RAM in bytes */\r\n  free: number;\r\n  /** RAM utilization percentage */\r\n  utilization: number;\r\n  /** Cached memory in bytes */\r\n  cached: number;\r\n  /** Buffer memory in bytes */\r\n  buffers: number;\r\n  /** Available memory in bytes */\r\n  available: number;\r\n  /** Swap usage */\r\n  swap: {\r\n    total: number;\r\n    used: number;\r\n    free: number;\r\n  };\r\n}/**\r\n * \r\nInterface for SSD metrics\r\n */\r\nexport interface SSDMetrics {\r\n  /** Total storage in bytes */\r\n  total: number;\r\n  /** Used storage in bytes */\r\n  used: number;\r\n  /** Free storage in bytes */\r\n  free: number;\r\n  /** Storage utilization percentage */\r\n  utilization: number;\r\n  /** Read IOPS */\r\n  readIOPS: number;\r\n  /** Write IOPS */\r\n  writeIOPS: number;\r\n  /** Read throughput in MB/s */\r\n  readThroughput: number;\r\n  /** Write throughput in MB/s */\r\n  writeThroughput: number;\r\n  /** SSD health percentage */\r\n  health: number;\r\n  /** SSD temperature in Celsius */\r\n  temperature: number;\r\n}\r\n\r\n/**\r\n * Interface for network metrics\r\n */\r\nexport interface NetworkMetrics {\r\n  /** Network interfaces */\r\n  interfaces: NetworkInterface[];\r\n  /** Total bytes received */\r\n  totalBytesReceived: number;\r\n  /** Total bytes sent */\r\n  totalBytesSent: number;\r\n  /** Current download speed in Mbps */\r\n  downloadSpeed: number;\r\n  /** Current upload speed in Mbps */\r\n  uploadSpeed: number;\r\n  /** Network latency in ms */\r\n  latency: number;\r\n  /** Packet loss percentage */\r\n  packetLoss: number;\r\n}\r\n\r\n/**\r\n * Interface for network interface\r\n */\r\nexport interface NetworkInterface {\r\n  /** Interface name */\r\n  name: string;\r\n  /** Interface type (ethernet, wireless) */\r\n  type: string;\r\n  /** IP address */\r\n  ip: string;\r\n  /** MAC address */\r\n  mac: string;\r\n  /** Connection status */\r\n  isUp: boolean;\r\n  /** Link speed in Mbps */\r\n  speed: number;\r\n  /** Bytes received */\r\n  bytesReceived: number;\r\n  /** Bytes sent */\r\n  bytesSent: number;\r\n}\r\n\r\n/**\r\n * Interface for system health status\r\n */\r\nexport interface SystemHealthStatus {\r\n  /** Overall system health score (0-100) */\r\n  overallHealth: number;\r\n  /** Individual component health */\r\n  components: {\r\n    cpu: HealthStatus;\r\n    ram: HealthStatus;\r\n    ssd: HealthStatus;\r\n    network: HealthStatus;\r\n    thermal: HealthStatus;\r\n  };\r\n  /** System alerts */\r\n  alerts: SystemAlert[];\r\n  /** Performance recommendations */\r\n  recommendations: string[];\r\n  /** Last update timestamp */\r\n  lastUpdated: Date;\r\n}/**\r\n * Int\r\nerface for component health status\r\n */\r\nexport interface HealthStatus {\r\n  /** Health score (0-100) */\r\n  score: number;\r\n  /** Status level */\r\n  status: 'EXCELLENT' | 'GOOD' | 'WARNING' | 'CRITICAL';\r\n  /** Status message */\r\n  message: string;\r\n  /** Metric value */\r\n  value: number;\r\n  /** Threshold values */\r\n  thresholds: {\r\n    warning: number;\r\n    critical: number;\r\n  };\r\n}\r\n\r\n/**\r\n * Interface for system alert\r\n */\r\nexport interface SystemAlert {\r\n  /** Alert ID */\r\n  id: string;\r\n  /** Alert type */\r\n  type: 'CPU' | 'RAM' | 'SSD' | 'NETWORK' | 'THERMAL';\r\n  /** Alert severity */\r\n  severity: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';\r\n  /** Alert message */\r\n  message: string;\r\n  /** Current value */\r\n  currentValue: number;\r\n  /** Threshold value */\r\n  threshold: number;\r\n  /** Alert timestamp */\r\n  timestamp: Date;\r\n  /** Whether alert is active */\r\n  isActive: boolean;\r\n}\r\n\r\n/**\r\n * Intel NUC System Monitor\r\n * Provides comprehensive hardware monitoring and performance optimization\r\n */\r\nexport class SystemMonitor {\r\n  /** Monitoring interval in milliseconds */\r\n  private monitoringInterval: NodeJS.Timeout | null = null;\r\n  \r\n  /** Current system metrics */\r\n  private currentMetrics: {\r\n    cpu?: CPUMetrics;\r\n    ram?: RAMMetrics;\r\n    ssd?: SSDMetrics;\r\n    network?: NetworkMetrics;\r\n  } = {};\r\n  \r\n  /** Active system alerts */\r\n  private activeAlerts: Map<string, SystemAlert> = new Map();\r\n  \r\n  /** Monitoring configuration */\r\n  private config = {\r\n    monitoringIntervalMs: 30000, // 30 seconds\r\n    cpuWarningThreshold: parseInt(process.env.CPU_USAGE_WARNING_THRESHOLD || '70'),\r\n    cpuCriticalThreshold: parseInt(process.env.CPU_USAGE_CRITICAL_THRESHOLD || '85'),\r\n    ramWarningThreshold: parseInt(process.env.MEMORY_USAGE_WARNING_THRESHOLD || '75'),\r\n    ramCriticalThreshold: parseInt(process.env.MEMORY_USAGE_CRITICAL_THRESHOLD || '90'),\r\n    ssdWarningThreshold: parseInt(process.env.DISK_USAGE_WARNING_THRESHOLD || '80'),\r\n    ssdCriticalThreshold: parseInt(process.env.DISK_USAGE_CRITICAL_THRESHOLD || '95'),\r\n    tempWarningThreshold: parseInt(process.env.CPU_TEMP_WARNING_THRESHOLD || '70'),\r\n    tempCriticalThreshold: parseInt(process.env.CPU_TEMP_CRITICAL_THRESHOLD || '80'),\r\n    networkLatencyWarning: parseInt(process.env.NETWORK_LATENCY_WARNING_MS || '100'),\r\n    networkLatencyCritical: parseInt(process.env.NETWORK_LATENCY_CRITICAL_MS || '500')\r\n  };\r\n\r\n  constructor() {\r\n    logger.info('🖥️ Intel NUC System Monitor initializing...');\r\n  }\r\n\r\n  /**\r\n   * Start hardware monitoring\r\n   * Begins continuous monitoring of all system components\r\n   * \r\n   * @returns Promise<void>\r\n   */\r\n  public async startHardwareMonitoring(): Promise<void> {\r\n    try {\r\n      logger.info('📊 Starting Intel NUC hardware monitoring...');\r\n      \r\n      // Perform initial system scan\r\n      await this.performSystemScan();\r\n      \r\n      // Start continuous monitoring\r\n      this.monitoringInterval = setInterval(async () => {\r\n        try {\r\n          await this.performSystemScan();\r\n        } catch (error) {\r\n          logger.error('❌ System monitoring error:', error);\r\n        }\r\n      }, this.config.monitoringIntervalMs);\r\n      \r\n      logger.info('✅ Hardware monitoring started successfully');\r\n      \r\n      // Audit log\r\n      await auditService.createAuditEntry({\r\n        auditId: `sys_mon_start_${Date.now()}`,\r\n        eventType: 'SYSTEM_MONITORING_START',\r\n        actor: 'SYSTEM',\r\n        resource: 'HARDWARE_MONITOR',\r\n        action: 'START_MONITORING',\r\n        result: 'SUCCESS',\r\n        timestamp: new Date(),\r\n        auditData: { monitoringInterval: this.config.monitoringIntervalMs }\r\n      });\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to start hardware monitoring:', error);\r\n      throw new Error('Hardware monitoring initialization failed');\r\n    }\r\n  }  /**\r\n  \r\n * Perform comprehensive system scan\r\n   * Collects metrics from all hardware components\r\n   * \r\n   * @returns Promise<void>\r\n   */\r\n  private async performSystemScan(): Promise<void> {\r\n    try {\r\n      // Collect CPU metrics\r\n      this.currentMetrics.cpu = await this.collectCPUMetrics();\r\n      \r\n      // Collect RAM metrics\r\n      this.currentMetrics.ram = await this.collectRAMMetrics();\r\n      \r\n      // Collect SSD metrics\r\n      this.currentMetrics.ssd = await this.collectSSDMetrics();\r\n      \r\n      // Collect network metrics\r\n      this.currentMetrics.network = await this.collectNetworkMetrics();\r\n      \r\n      // Analyze metrics and generate alerts\r\n      await this.analyzeMetricsAndGenerateAlerts();\r\n      \r\n      // Log system status\r\n      this.logSystemStatus();\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ System scan failed:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Collect CPU metrics\r\n   * Gathers comprehensive CPU performance data\r\n   * \r\n   * @returns Promise<CPUMetrics> CPU metrics\r\n   */\r\n  private async collectCPUMetrics(): Promise<CPUMetrics> {\r\n    try {\r\n      const [cpuData, currentLoad, cpuTemp, processes] = await Promise.all([\r\n        si.cpu(),\r\n        si.currentLoad(),\r\n        si.cpuTemperature(),\r\n        si.processes()\r\n      ]);\r\n      \r\n      return {\r\n        utilization: Math.round(currentLoad.currentLoad),\r\n        temperature: cpuTemp.main || 0,\r\n        frequency: cpuData.speed || 0,\r\n        loadAverage: [currentLoad.avgLoad || 0],\r\n        processes: processes.all || 0,\r\n        cores: {\r\n          physical: cpuData.physicalCores || 0,\r\n          logical: cpuData.cores || 0\r\n        },\r\n        brand: cpuData.brand || 'Unknown',\r\n        speed: cpuData.speed || 0\r\n      };\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to collect CPU metrics:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Collect RAM metrics\r\n   * Gathers comprehensive memory usage data\r\n   * \r\n   * @returns Promise<RAMMetrics> RAM metrics\r\n   */\r\n  private async collectRAMMetrics(): Promise<RAMMetrics> {\r\n    try {\r\n      const memData = await si.mem();\r\n      \r\n      return {\r\n        total: memData.total,\r\n        used: memData.used,\r\n        free: memData.free,\r\n        utilization: Math.round((memData.used / memData.total) * 100),\r\n        cached: memData.cached || 0,\r\n        buffers: memData.buffers || 0,\r\n        available: memData.available,\r\n        swap: {\r\n          total: memData.swaptotal || 0,\r\n          used: memData.swapused || 0,\r\n          free: memData.swapfree || 0\r\n        }\r\n      };\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to collect RAM metrics:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Collect SSD metrics\r\n   * Gathers comprehensive storage performance data\r\n   * \r\n   * @returns Promise<SSDMetrics> SSD metrics\r\n   */\r\n  private async collectSSDMetrics(): Promise<SSDMetrics> {\r\n    try {\r\n      const [fsSize, diskIO, blockDevices] = await Promise.all([\r\n        si.fsSize(),\r\n        si.disksIO(),\r\n        si.blockDevices()\r\n      ]);\r\n      \r\n      // Get primary disk (usually the first one)\r\n      const primaryDisk = fsSize[0] || {};\r\n      const primaryBlockDevice = blockDevices[0] || {};\r\n      \r\n      return {\r\n        total: primaryDisk.size || 0,\r\n        used: primaryDisk.used || 0,\r\n        free: primaryDisk.available || 0,\r\n        utilization: Math.round(primaryDisk.use || 0),\r\n        readIOPS: diskIO.rIO || 0,\r\n        writeIOPS: diskIO.wIO || 0,\r\n        readThroughput: (diskIO.rIO_sec || 0) / 1024 / 1024, // Convert to MB/s\r\n        writeThroughput: (diskIO.wIO_sec || 0) / 1024 / 1024, // Convert to MB/s\r\n        health: 100, // Would need SMART data for actual health\r\n        temperature: primaryBlockDevice.temperature || 0\r\n      };\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to collect SSD metrics:', error);\r\n      throw error;\r\n    }\r\n  }  /**\r\n\r\n   * Collect network metrics\r\n   * Gathers comprehensive network performance data\r\n   * \r\n   * @returns Promise<NetworkMetrics> Network metrics\r\n   */\r\n  private async collectNetworkMetrics(): Promise<NetworkMetrics> {\r\n    try {\r\n      const [networkInterfaces, networkStats] = await Promise.all([\r\n        si.networkInterfaces(),\r\n        si.networkStats()\r\n      ]);\r\n      \r\n      const interfaces: NetworkInterface[] = networkInterfaces.map(iface => ({\r\n        name: iface.iface,\r\n        type: iface.type || 'unknown',\r\n        ip: iface.ip4 || '',\r\n        mac: iface.mac || '',\r\n        isUp: !iface.internal && iface.operstate === 'up',\r\n        speed: iface.speed || 0,\r\n        bytesReceived: 0, // Will be updated from networkStats\r\n        bytesSent: 0 // Will be updated from networkStats\r\n      }));\r\n      \r\n      // Update interface statistics\r\n      networkStats.forEach(stat => {\r\n        const iface = interfaces.find(i => i.name === stat.iface);\r\n        if (iface) {\r\n          iface.bytesReceived = stat.rx_bytes || 0;\r\n          iface.bytesSent = stat.tx_bytes || 0;\r\n        }\r\n      });\r\n      \r\n      const totalBytesReceived = networkStats.reduce((sum, stat) => sum + (stat.rx_bytes || 0), 0);\r\n      const totalBytesSent = networkStats.reduce((sum, stat) => sum + (stat.tx_bytes || 0), 0);\r\n      \r\n      // Calculate current speeds (simplified)\r\n      const downloadSpeed = networkStats.reduce((sum, stat) => sum + (stat.rx_sec || 0), 0) / 1024 / 1024 * 8; // Mbps\r\n      const uploadSpeed = networkStats.reduce((sum, stat) => sum + (stat.tx_sec || 0), 0) / 1024 / 1024 * 8; // Mbps\r\n      \r\n      return {\r\n        interfaces,\r\n        totalBytesReceived,\r\n        totalBytesSent,\r\n        downloadSpeed,\r\n        uploadSpeed,\r\n        latency: 0, // Would need ping test for actual latency\r\n        packetLoss: 0 // Would need ping test for packet loss\r\n      };\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to collect network metrics:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Analyze metrics and generate alerts\r\n   * Evaluates system metrics against thresholds and creates alerts\r\n   * \r\n   * @returns Promise<void>\r\n   */\r\n  private async analyzeMetricsAndGenerateAlerts(): Promise<void> {\r\n    try {\r\n      const alerts: SystemAlert[] = [];\r\n      \r\n      // Analyze CPU metrics\r\n      if (this.currentMetrics.cpu) {\r\n        const cpu = this.currentMetrics.cpu;\r\n        \r\n        if (cpu.utilization >= this.config.cpuCriticalThreshold) {\r\n          alerts.push(this.createAlert('CPU', 'CRITICAL', \r\n            `CPU utilization critical: ${cpu.utilization}%`, \r\n            cpu.utilization, this.config.cpuCriticalThreshold));\r\n        } else if (cpu.utilization >= this.config.cpuWarningThreshold) {\r\n          alerts.push(this.createAlert('CPU', 'HIGH', \r\n            `CPU utilization high: ${cpu.utilization}%`, \r\n            cpu.utilization, this.config.cpuWarningThreshold));\r\n        }\r\n        \r\n        if (cpu.temperature >= this.config.tempCriticalThreshold) {\r\n          alerts.push(this.createAlert('THERMAL', 'CRITICAL', \r\n            `CPU temperature critical: ${cpu.temperature}°C`, \r\n            cpu.temperature, this.config.tempCriticalThreshold));\r\n        } else if (cpu.temperature >= this.config.tempWarningThreshold) {\r\n          alerts.push(this.createAlert('THERMAL', 'HIGH', \r\n            `CPU temperature high: ${cpu.temperature}°C`, \r\n            cpu.temperature, this.config.tempWarningThreshold));\r\n        }\r\n      }\r\n      \r\n      // Analyze RAM metrics\r\n      if (this.currentMetrics.ram) {\r\n        const ram = this.currentMetrics.ram;\r\n        \r\n        if (ram.utilization >= this.config.ramCriticalThreshold) {\r\n          alerts.push(this.createAlert('RAM', 'CRITICAL', \r\n            `Memory utilization critical: ${ram.utilization}%`, \r\n            ram.utilization, this.config.ramCriticalThreshold));\r\n        } else if (ram.utilization >= this.config.ramWarningThreshold) {\r\n          alerts.push(this.createAlert('RAM', 'HIGH', \r\n            `Memory utilization high: ${ram.utilization}%`, \r\n            ram.utilization, this.config.ramWarningThreshold));\r\n        }\r\n      }\r\n      \r\n      // Analyze SSD metrics\r\n      if (this.currentMetrics.ssd) {\r\n        const ssd = this.currentMetrics.ssd;\r\n        \r\n        if (ssd.utilization >= this.config.ssdCriticalThreshold) {\r\n          alerts.push(this.createAlert('SSD', 'CRITICAL', \r\n            `Storage utilization critical: ${ssd.utilization}%`, \r\n            ssd.utilization, this.config.ssdCriticalThreshold));\r\n        } else if (ssd.utilization >= this.config.ssdWarningThreshold) {\r\n          alerts.push(this.createAlert('SSD', 'HIGH', \r\n            `Storage utilization high: ${ssd.utilization}%`, \r\n            ssd.utilization, this.config.ssdWarningThreshold));\r\n        }\r\n      }\r\n      \r\n      // Process new alerts\r\n      for (const alert of alerts) {\r\n        await this.processAlert(alert);\r\n      }\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to analyze metrics:', error);\r\n    }\r\n  }  /**\r\n\r\n   * Create system alert\r\n   * Creates a new system alert with specified parameters\r\n   * \r\n   * @param type - Alert type\r\n   * @param severity - Alert severity\r\n   * @param message - Alert message\r\n   * @param currentValue - Current metric value\r\n   * @param threshold - Threshold value\r\n   * @returns SystemAlert New alert\r\n   */\r\n  private createAlert(\r\n    type: 'CPU' | 'RAM' | 'SSD' | 'NETWORK' | 'THERMAL',\r\n    severity: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL',\r\n    message: string,\r\n    currentValue: number,\r\n    threshold: number\r\n  ): SystemAlert {\r\n    return {\r\n      id: `${type.toLowerCase()}_${Date.now()}_${Math.random().toString(36).substring(2)}`,\r\n      type,\r\n      severity,\r\n      message,\r\n      currentValue,\r\n      threshold,\r\n      timestamp: new Date(),\r\n      isActive: true\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Process system alert\r\n   * Handles new alerts and triggers appropriate responses\r\n   * \r\n   * @param alert - System alert to process\r\n   * @returns Promise<void>\r\n   */\r\n  private async processAlert(alert: SystemAlert): Promise<void> {\r\n    try {\r\n      // Check if similar alert already exists\r\n      const existingAlert = Array.from(this.activeAlerts.values())\r\n        .find(a => a.type === alert.type && a.severity === alert.severity && a.isActive);\r\n      \r\n      if (existingAlert) {\r\n        // Update existing alert\r\n        existingAlert.currentValue = alert.currentValue;\r\n        existingAlert.timestamp = alert.timestamp;\r\n        return;\r\n      }\r\n      \r\n      // Add new alert\r\n      this.activeAlerts.set(alert.id, alert);\r\n      \r\n      // Log alert\r\n      logger.warn(`⚠️ System Alert: ${alert.message}`, {\r\n        type: alert.type,\r\n        severity: alert.severity,\r\n        currentValue: alert.currentValue,\r\n        threshold: alert.threshold\r\n      });\r\n      \r\n      // Create audit entry for critical alerts\r\n      if (alert.severity === 'CRITICAL') {\r\n        await auditService.createAuditEntry({\r\n          auditId: `sys_alert_${alert.id}`,\r\n          eventType: 'CRITICAL_SYSTEM_ALERT',\r\n          actor: 'SYSTEM_MONITOR',\r\n          resource: `HARDWARE_${alert.type}`,\r\n          action: 'GENERATE_ALERT',\r\n          result: 'SUCCESS',\r\n          timestamp: alert.timestamp,\r\n          auditData: {\r\n            alertType: alert.type,\r\n            severity: alert.severity,\r\n            currentValue: alert.currentValue,\r\n            threshold: alert.threshold\r\n          }\r\n        });\r\n      }\r\n      \r\n      // TODO: Send notifications for critical alerts\r\n      // This would integrate with notification service\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to process alert:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Log system status\r\n   * Logs current system metrics for monitoring\r\n   */\r\n  private logSystemStatus(): void {\r\n    const { cpu, ram, ssd, network } = this.currentMetrics;\r\n    \r\n    logger.debug('📊 System Status Update', {\r\n      cpu: cpu ? {\r\n        utilization: cpu.utilization,\r\n        temperature: cpu.temperature,\r\n        frequency: cpu.frequency\r\n      } : null,\r\n      ram: ram ? {\r\n        utilization: ram.utilization,\r\n        used: Math.round(ram.used / 1024 / 1024 / 1024 * 100) / 100, // GB\r\n        total: Math.round(ram.total / 1024 / 1024 / 1024 * 100) / 100 // GB\r\n      } : null,\r\n      ssd: ssd ? {\r\n        utilization: ssd.utilization,\r\n        used: Math.round(ssd.used / 1024 / 1024 / 1024 * 100) / 100, // GB\r\n        total: Math.round(ssd.total / 1024 / 1024 / 1024 * 100) / 100 // GB\r\n      } : null,\r\n      network: network ? {\r\n        downloadSpeed: Math.round(network.downloadSpeed * 100) / 100,\r\n        uploadSpeed: Math.round(network.uploadSpeed * 100) / 100,\r\n        activeInterfaces: network.interfaces.filter(i => i.isUp).length\r\n      } : null,\r\n      activeAlerts: this.activeAlerts.size\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get current system health status\r\n   * Returns comprehensive system health information\r\n   * \r\n   * @returns Promise<SystemHealthStatus> System health status\r\n   */\r\n  public async getSystemHealthStatus(): Promise<SystemHealthStatus> {\r\n    try {\r\n      const { cpu, ram, ssd, network } = this.currentMetrics;\r\n      \r\n      // Calculate component health scores\r\n      const cpuHealth = this.calculateComponentHealth(\r\n        cpu?.utilization || 0, \r\n        this.config.cpuWarningThreshold, \r\n        this.config.cpuCriticalThreshold,\r\n        'CPU utilization'\r\n      );\r\n      \r\n      const ramHealth = this.calculateComponentHealth(\r\n        ram?.utilization || 0, \r\n        this.config.ramWarningThreshold, \r\n        this.config.ramCriticalThreshold,\r\n        'Memory utilization'\r\n      );\r\n      \r\n      const ssdHealth = this.calculateComponentHealth(\r\n        ssd?.utilization || 0, \r\n        this.config.ssdWarningThreshold, \r\n        this.config.ssdCriticalThreshold,\r\n        'Storage utilization'\r\n      );\r\n      \r\n      const thermalHealth = this.calculateComponentHealth(\r\n        cpu?.temperature || 0, \r\n        this.config.tempWarningThreshold, \r\n        this.config.tempCriticalThreshold,\r\n        'CPU temperature'\r\n      );\r\n      \r\n      const networkHealth: HealthStatus = {\r\n        score: network?.interfaces.filter(i => i.isUp).length > 0 ? 100 : 0,\r\n        status: network?.interfaces.filter(i => i.isUp).length > 0 ? 'EXCELLENT' : 'CRITICAL',\r\n        message: `${network?.interfaces.filter(i => i.isUp).length || 0} active interfaces`,\r\n        value: network?.interfaces.filter(i => i.isUp).length || 0,\r\n        thresholds: { warning: 1, critical: 0 }\r\n      };\r\n      \r\n      // Calculate overall health score\r\n      const overallHealth = Math.round(\r\n        (cpuHealth.score + ramHealth.score + ssdHealth.score + thermalHealth.score + networkHealth.score) / 5\r\n      );\r\n      \r\n      // Generate recommendations\r\n      const recommendations: string[] = [];\r\n      if (cpuHealth.score < 70) recommendations.push('Consider reducing CPU-intensive operations');\r\n      if (ramHealth.score < 70) recommendations.push('Consider freeing up memory or adding more RAM');\r\n      if (ssdHealth.score < 70) recommendations.push('Consider cleaning up disk space');\r\n      if (thermalHealth.score < 70) recommendations.push('Check system cooling and ventilation');\r\n      if (networkHealth.score < 70) recommendations.push('Check network connectivity');\r\n      \r\n      return {\r\n        overallHealth,\r\n        components: {\r\n          cpu: cpuHealth,\r\n          ram: ramHealth,\r\n          ssd: ssdHealth,\r\n          network: networkHealth,\r\n          thermal: thermalHealth\r\n        },\r\n        alerts: Array.from(this.activeAlerts.values()).filter(a => a.isActive),\r\n        recommendations,\r\n        lastUpdated: new Date()\r\n      };\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to get system health status:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate component health score\r\n   * Determines health score based on current value and thresholds\r\n   * \r\n   * @param currentValue - Current metric value\r\n   * @param warningThreshold - Warning threshold\r\n   * @param criticalThreshold - Critical threshold\r\n   * @param description - Component description\r\n   * @returns HealthStatus Component health status\r\n   */\r\n  private calculateComponentHealth(\r\n    currentValue: number,\r\n    warningThreshold: number,\r\n    criticalThreshold: number,\r\n    description: string\r\n  ): HealthStatus {\r\n    let score: number;\r\n    let status: 'EXCELLENT' | 'GOOD' | 'WARNING' | 'CRITICAL';\r\n    let message: string;\r\n    \r\n    if (currentValue >= criticalThreshold) {\r\n      score = Math.max(0, 100 - ((currentValue - criticalThreshold) / criticalThreshold) * 100);\r\n      status = 'CRITICAL';\r\n      message = `${description} is critical (${currentValue})`;\r\n    } else if (currentValue >= warningThreshold) {\r\n      score = Math.max(30, 100 - ((currentValue - warningThreshold) / (criticalThreshold - warningThreshold)) * 70);\r\n      status = 'WARNING';\r\n      message = `${description} is elevated (${currentValue})`;\r\n    } else if (currentValue >= warningThreshold * 0.7) {\r\n      score = Math.max(70, 100 - (currentValue / warningThreshold) * 30);\r\n      status = 'GOOD';\r\n      message = `${description} is good (${currentValue})`;\r\n    } else {\r\n      score = 100;\r\n      status = 'EXCELLENT';\r\n      message = `${description} is excellent (${currentValue})`;\r\n    }\r\n    \r\n    return {\r\n      score: Math.round(score),\r\n      status,\r\n      message,\r\n      value: currentValue,\r\n      thresholds: {\r\n        warning: warningThreshold,\r\n        critical: criticalThreshold\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Validate system requirements\r\n   * Checks if system meets minimum requirements for trading\r\n   * \r\n   * @returns Promise<{ meetsRequirements: boolean; warnings: string[] }> Validation result\r\n   */\r\n  public async validateSystemRequirements(): Promise<{ meetsRequirements: boolean; warnings: string[] }> {\r\n    try {\r\n      const warnings: string[] = [];\r\n      let meetsRequirements = true;\r\n      \r\n      const { cpu, ram, ssd } = this.currentMetrics;\r\n      \r\n      // Check CPU requirements (i5 or better)\r\n      if (cpu && !cpu.brand.toLowerCase().includes('i5') && !cpu.brand.toLowerCase().includes('i7')) {\r\n        warnings.push(`CPU may not meet requirements: ${cpu.brand} (recommended: Intel i5 or better)`);\r\n      }\r\n      \r\n      // Check RAM requirements (12GB minimum)\r\n      if (ram && ram.total < 12 * 1024 * 1024 * 1024) {\r\n        warnings.push(`RAM below recommended: ${Math.round(ram.total / 1024 / 1024 / 1024)}GB (recommended: 12GB)`);\r\n        meetsRequirements = false;\r\n      }\r\n      \r\n      // Check SSD requirements (256GB minimum)\r\n      if (ssd && ssd.total < 256 * 1024 * 1024 * 1024) {\r\n        warnings.push(`Storage below recommended: ${Math.round(ssd.total / 1024 / 1024 / 1024)}GB (recommended: 256GB)`);\r\n      }\r\n      \r\n      // Check available storage (at least 50GB free)\r\n      if (ssd && ssd.free < 50 * 1024 * 1024 * 1024) {\r\n        warnings.push(`Low storage space: ${Math.round(ssd.free / 1024 / 1024 / 1024)}GB free (recommended: 50GB+)`);\r\n        meetsRequirements = false;\r\n      }\r\n      \r\n      return { meetsRequirements, warnings };\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to validate system requirements:', error);\r\n      return { meetsRequirements: false, warnings: ['System validation failed'] };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get current system metrics\r\n   * Returns the most recent system metrics\r\n   * \r\n   * @returns Current system metrics\r\n   */\r\n  public getCurrentMetrics(): {\r\n    cpu?: CPUMetrics;\r\n    ram?: RAMMetrics;\r\n    ssd?: SSDMetrics;\r\n    network?: NetworkMetrics;\r\n  } {\r\n    return { ...this.currentMetrics };\r\n  }\r\n\r\n  /**\r\n   * Stop hardware monitoring\r\n   * Stops continuous monitoring and cleans up resources\r\n   */\r\n  public stopHardwareMonitoring(): void {\r\n    if (this.monitoringInterval) {\r\n      clearInterval(this.monitoringInterval);\r\n      this.monitoringInterval = null;\r\n      logger.info('🛑 Hardware monitoring stopped');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialize performance optimization\r\n   * Sets up performance optimization integration\r\n   */\r\n  public async initializePerformanceOptimization(): Promise<void> {\r\n    logger.info('⚡ Initializing performance optimization integration...');\r\n    // Performance optimization is handled by PerformanceOptimizer class\r\n    // This method provides integration point for system monitoring\r\n    logger.info('✅ Performance optimization integration ready');\r\n  }\r\n\r\n  /**\r\n   * Setup thermal management\r\n   * Sets up thermal monitoring integration\r\n   */\r\n  public async setupThermalManagement(): Promise<void> {\r\n    logger.info('🌡️ Setting up thermal management integration...');\r\n    // Thermal management is handled by PerformanceOptimizer class\r\n    // This method provides integration point for system monitoring\r\n    logger.info('✅ Thermal management integration ready');\r\n  }\r\n\r\n  /**\r\n   * Get system monitor status\r\n   * Returns current status for monitoring\r\n   * \r\n   * @returns Object containing status information\r\n   */\r\n  public getStatus(): {\r\n    isMonitoring: boolean;\r\n    activeAlerts: number;\r\n    lastScanTime: Date | null;\r\n    monitoringInterval: number;\r\n    timestamp: number;\r\n  } {\r\n    return {\r\n      isMonitoring: this.monitoringInterval !== null,\r\n      activeAlerts: this.activeAlerts.size,\r\n      lastScanTime: null, // Would track last scan time\r\n      monitoringInterval: this.config.monitoringIntervalMs,\r\n      timestamp: Date.now()\r\n    };\r\n  }\r\n}\r\n\r\n// =============================================================================\r\n// INTEL NUC SYSTEM MONITORING NOTES\r\n// =============================================================================\r\n// 1. Continuous monitoring of CPU, RAM, SSD, and network performance\r\n// 2. Real-time alerting for performance issues and hardware problems\r\n// 3. Thermal monitoring to prevent overheating during intensive trading\r\n// 4. Storage monitoring to prevent disk space issues\r\n// 5. Network monitoring for connectivity and performance issues\r\n// 6. System health scoring for overall system assessment\r\n// 7. Hardware requirement validation for optimal trading performance\r\n// 8. Comprehensive logging and audit trails for all monitoring activities\r\n// =============================================================================\r\n"],"version":3}