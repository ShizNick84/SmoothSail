{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\__tests__\\tunnel-security-monitor.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\__tests__\\tunnel-security-monitor.test.ts"],"sourcesContent":["import { TunnelSecurityMonitor, SecurityEventType, ThreatLevel } from '../tunnel-security-monitor';\r\nimport { SSHTunnelManager, TunnelConnection, TunnelState } from '../ssh-tunnel-manager';\r\nimport { EncryptionService } from '../../security/encryption-service';\r\nimport { Logger } from '../../core/logging/logger';\r\n\r\ndescribe('TunnelSecurityMonitor', () => {\r\n  let securityMonitor: TunnelSecurityMonitor;\r\n  let mockLogger: jest.Mocked<Logger>;\r\n  let mockTunnelManager: jest.Mocked<SSHTunnelManager>;\r\n  let mockEncryptionService: jest.Mocked<EncryptionService>;\r\n  let mockConnection: TunnelConnection;\r\n\r\n  beforeEach(() => {\r\n    // Setup mocks\r\n    mockLogger = {\r\n      info: jest.fn(),\r\n      debug: jest.fn(),\r\n      warn: jest.fn(),\r\n      error: jest.fn()\r\n    } as any;\r\n\r\n    mockTunnelManager = {\r\n      getAllConnections: jest.fn(),\r\n      getConnection: jest.fn(),\r\n      disconnectTunnel: jest.fn(),\r\n      on: jest.fn()\r\n    } as any;\r\n\r\n    mockEncryptionService = {} as any;\r\n\r\n    // Create mock connection\r\n    mockConnection = {\r\n      id: 'test-connection-1',\r\n      config: {\r\n        oracleIP: '168.138.104.117',\r\n        sshPort: 22,\r\n        username: 'testuser',\r\n        privateKeyPath: '/path/to/key',\r\n        localPort: 8080,\r\n        remotePort: 3000,\r\n        keepAlive: true,\r\n        compression: true,\r\n        connectionTimeout: 30,\r\n        serverAliveInterval: 60,\r\n        serverAliveCountMax: 3\r\n      },\r\n      process: null,\r\n      state: TunnelState.CONNECTED,\r\n      connectedAt: new Date(),\r\n      lastActivity: new Date(),\r\n      stats: {\r\n        bytesTransferred: 0,\r\n        uptime: 0,\r\n        reconnectAttempts: 0,\r\n        lastError: null,\r\n        qualityScore: 100\r\n      }\r\n    };\r\n\r\n    mockTunnelManager.getAllConnections.mockReturnValue([mockConnection]);\r\n    mockTunnelManager.getConnection.mockReturnValue(mockConnection);\r\n\r\n    // Create security monitor\r\n    securityMonitor = new TunnelSecurityMonitor(\r\n      mockLogger,\r\n      mockTunnelManager,\r\n      mockEncryptionService,\r\n      {\r\n        enableTrafficMonitoring: true,\r\n        enableIntrusionDetection: true,\r\n        enableDataIntegrityChecking: true,\r\n        trafficAnalysisInterval: 1000, // 1 second for testing\r\n        maxAnomalyScore: 70,\r\n        enableAutoResponse: true\r\n      }\r\n    );\r\n  });\r\n\r\n  afterEach(() => {\r\n    securityMonitor.cleanup();\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('initialization', () => {\r\n    it('should initialize with default configuration', () => {\r\n      const defaultMonitor = new TunnelSecurityMonitor(\r\n        mockLogger,\r\n        mockTunnelManager,\r\n        mockEncryptionService\r\n      );\r\n\r\n      expect(mockLogger.info).toHaveBeenCalledWith(\r\n        'Tunnel Security Monitor initialized',\r\n        expect.objectContaining({\r\n          enableTrafficMonitoring: true,\r\n          enableIntrusionDetection: true,\r\n          enableDataIntegrityChecking: true\r\n        })\r\n      );\r\n\r\n      defaultMonitor.cleanup();\r\n    });\r\n  });\r\n\r\n  describe('monitoring lifecycle', () => {\r\n    it('should start monitoring successfully', () => {\r\n      const monitoringStartedSpy = jest.fn();\r\n      securityMonitor.on('securityMonitoringStarted', monitoringStartedSpy);\r\n\r\n      securityMonitor.startMonitoring();\r\n\r\n      expect(mockLogger.info).toHaveBeenCalledWith('Starting tunnel security monitoring');\r\n      expect(monitoringStartedSpy).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should not start monitoring if already running', () => {\r\n      securityMonitor.startMonitoring();\r\n      securityMonitor.startMonitoring();\r\n\r\n      expect(mockLogger.warn).toHaveBeenCalledWith('Security monitoring is already running');\r\n    });\r\n\r\n    it('should stop monitoring successfully', () => {\r\n      const monitoringStoppedSpy = jest.fn();\r\n      securityMonitor.on('securityMonitoringStopped', monitoringStoppedSpy);\r\n\r\n      securityMonitor.startMonitoring();\r\n      securityMonitor.stopMonitoring();\r\n\r\n      expect(mockLogger.info).toHaveBeenCalledWith('Stopping tunnel security monitoring');\r\n      expect(monitoringStoppedSpy).toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('connection monitoring', () => {\r\n    it('should start monitoring a specific connection', () => {\r\n      securityMonitor.startMonitoringConnection(mockConnection.id);\r\n\r\n      expect(mockLogger.info).toHaveBeenCalledWith(\r\n        `Starting security monitoring for connection: ${mockConnection.id}`\r\n      );\r\n    });\r\n\r\n    it('should not start monitoring if already monitoring connection', () => {\r\n      securityMonitor.startMonitoringConnection(mockConnection.id);\r\n      securityMonitor.startMonitoringConnection(mockConnection.id);\r\n\r\n      expect(mockLogger.debug).toHaveBeenCalledWith(\r\n        `Already monitoring connection: ${mockConnection.id}`\r\n      );\r\n    });\r\n\r\n    it('should stop monitoring a specific connection', () => {\r\n      securityMonitor.startMonitoringConnection(mockConnection.id);\r\n      securityMonitor.stopMonitoringConnection(mockConnection.id);\r\n\r\n      expect(mockLogger.info).toHaveBeenCalledWith(\r\n        `Stopped security monitoring for connection: ${mockConnection.id}`\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('security event reporting', () => {\r\n    it('should report security event successfully', () => {\r\n      const securityEventSpy = jest.fn();\r\n      securityMonitor.on('securityEvent', securityEventSpy);\r\n\r\n      const event = securityMonitor.reportSecurityEvent(\r\n        mockConnection.id,\r\n        SecurityEventType.UNAUTHORIZED_ACCESS,\r\n        ThreatLevel.HIGH,\r\n        'Test security event',\r\n        { testData: 'value' }\r\n      );\r\n\r\n      expect(event).toBeDefined();\r\n      expect(event.connectionId).toBe(mockConnection.id);\r\n      expect(event.type).toBe(SecurityEventType.UNAUTHORIZED_ACCESS);\r\n      expect(event.threatLevel).toBe(ThreatLevel.HIGH);\r\n      expect(event.description).toBe('Test security event');\r\n      expect(event.resolved).toBe(false);\r\n\r\n      expect(mockLogger.warn).toHaveBeenCalledWith(\r\n        `Security event detected: ${event.id}`,\r\n        expect.objectContaining({\r\n          connectionId: mockConnection.id,\r\n          type: SecurityEventType.UNAUTHORIZED_ACCESS,\r\n          threatLevel: ThreatLevel.HIGH\r\n        })\r\n      );\r\n\r\n      expect(securityEventSpy).toHaveBeenCalledWith(event);\r\n    });\r\n\r\n    it('should resolve security event', () => {\r\n      const securityEventResolvedSpy = jest.fn();\r\n      securityMonitor.on('securityEventResolved', securityEventResolvedSpy);\r\n\r\n      const event = securityMonitor.reportSecurityEvent(\r\n        mockConnection.id,\r\n        SecurityEventType.SUSPICIOUS_TRAFFIC,\r\n        ThreatLevel.MEDIUM,\r\n        'Test event'\r\n      );\r\n\r\n      const responseActions = ['Blocked IP', 'Increased monitoring'];\r\n      securityMonitor.resolveSecurityEvent(event.id, responseActions);\r\n\r\n      expect(event.resolved).toBe(true);\r\n      expect(event.resolvedAt).toBeInstanceOf(Date);\r\n      expect(event.responseActions).toEqual(responseActions);\r\n\r\n      expect(mockLogger.info).toHaveBeenCalledWith(\r\n        `Security event resolved: ${event.id}`,\r\n        { responseActions }\r\n      );\r\n\r\n      expect(securityEventResolvedSpy).toHaveBeenCalledWith(event);\r\n    });\r\n\r\n    it('should handle resolving non-existent event', () => {\r\n      securityMonitor.resolveSecurityEvent('non-existent-id', ['Action']);\r\n\r\n      expect(mockLogger.warn).toHaveBeenCalledWith(\r\n        'Security event not found: non-existent-id'\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('security event retrieval', () => {\r\n    beforeEach(() => {\r\n      // Create test events\r\n      securityMonitor.reportSecurityEvent(\r\n        mockConnection.id,\r\n        SecurityEventType.UNAUTHORIZED_ACCESS,\r\n        ThreatLevel.HIGH,\r\n        'High threat event'\r\n      );\r\n\r\n      securityMonitor.reportSecurityEvent(\r\n        mockConnection.id,\r\n        SecurityEventType.SUSPICIOUS_TRAFFIC,\r\n        ThreatLevel.MEDIUM,\r\n        'Medium threat event'\r\n      );\r\n\r\n      securityMonitor.reportSecurityEvent(\r\n        'other-connection',\r\n        SecurityEventType.TRAFFIC_ANOMALY,\r\n        ThreatLevel.LOW,\r\n        'Low threat event'\r\n      );\r\n    });\r\n\r\n    it('should get all security events', () => {\r\n      const events = securityMonitor.getSecurityEvents();\r\n      expect(events).toHaveLength(3);\r\n    });\r\n\r\n    it('should filter events by connection ID', () => {\r\n      const events = securityMonitor.getSecurityEvents(mockConnection.id);\r\n      expect(events).toHaveLength(2);\r\n      expect(events.every(e => e.connectionId === mockConnection.id)).toBe(true);\r\n    });\r\n\r\n    it('should filter events by threat level', () => {\r\n      const events = securityMonitor.getSecurityEvents(undefined, ThreatLevel.HIGH);\r\n      expect(events).toHaveLength(1);\r\n      expect(events[0].threatLevel).toBe(ThreatLevel.HIGH);\r\n    });\r\n\r\n    it('should limit number of events returned', () => {\r\n      const events = securityMonitor.getSecurityEvents(undefined, undefined, 2);\r\n      expect(events).toHaveLength(2);\r\n    });\r\n\r\n    it('should return events sorted by timestamp (newest first)', () => {\r\n      const events = securityMonitor.getSecurityEvents();\r\n      expect(events).toHaveLength(3);\r\n      \r\n      for (let i = 1; i < events.length; i++) {\r\n        expect(events[i - 1].timestamp.getTime()).toBeGreaterThanOrEqual(\r\n          events[i].timestamp.getTime()\r\n        );\r\n      }\r\n    });\r\n  });\r\n\r\n  describe('traffic analysis', () => {\r\n    beforeEach(() => {\r\n      securityMonitor.startMonitoringConnection(mockConnection.id);\r\n    });\r\n\r\n    it('should return empty traffic analysis initially', () => {\r\n      const analysis = securityMonitor.getTrafficAnalysis(mockConnection.id);\r\n      expect(analysis).toEqual([]);\r\n    });\r\n\r\n    it('should limit traffic analysis entries', () => {\r\n      const analysis = securityMonitor.getTrafficAnalysis(mockConnection.id, 5);\r\n      expect(analysis.length).toBeLessThanOrEqual(5);\r\n    });\r\n  });\r\n\r\n  describe('security metrics', () => {\r\n    it('should return initial security metrics', () => {\r\n      const metrics = securityMonitor.getSecurityMetrics();\r\n\r\n      expect(metrics).toEqual({\r\n        totalEvents: 0,\r\n        eventsByType: expect.any(Map),\r\n        eventsByThreatLevel: expect.any(Map),\r\n        averageAnomalyScore: 0,\r\n        integrityViolations: 0,\r\n        resolvedEvents: 0,\r\n        activeThreats: 0,\r\n        lastSecurityScan: expect.any(Date),\r\n        systemSecurityScore: 100\r\n      });\r\n    });\r\n\r\n    it('should update metrics when events are reported', () => {\r\n      securityMonitor.reportSecurityEvent(\r\n        mockConnection.id,\r\n        SecurityEventType.UNAUTHORIZED_ACCESS,\r\n        ThreatLevel.HIGH,\r\n        'Test event'\r\n      );\r\n\r\n      const metrics = securityMonitor.getSecurityMetrics();\r\n      expect(metrics.totalEvents).toBe(1);\r\n      expect(metrics.activeThreats).toBe(1);\r\n      expect(metrics.eventsByType.get(SecurityEventType.UNAUTHORIZED_ACCESS)).toBe(1);\r\n      expect(metrics.eventsByThreatLevel.get(ThreatLevel.HIGH)).toBe(1);\r\n    });\r\n\r\n    it('should update metrics when events are resolved', () => {\r\n      const event = securityMonitor.reportSecurityEvent(\r\n        mockConnection.id,\r\n        SecurityEventType.SUSPICIOUS_TRAFFIC,\r\n        ThreatLevel.MEDIUM,\r\n        'Test event'\r\n      );\r\n\r\n      securityMonitor.resolveSecurityEvent(event.id, ['Resolved']);\r\n\r\n      const metrics = securityMonitor.getSecurityMetrics();\r\n      expect(metrics.resolvedEvents).toBe(1);\r\n      expect(metrics.activeThreats).toBe(0);\r\n    });\r\n  });\r\n\r\n  describe('security scan', () => {\r\n    beforeEach(() => {\r\n      securityMonitor.startMonitoringConnection(mockConnection.id);\r\n    });\r\n\r\n    it('should perform security scan successfully', async () => {\r\n      await securityMonitor.performSecurityScan(mockConnection.id);\r\n\r\n      expect(mockLogger.debug).toHaveBeenCalledWith(\r\n        `Performing security scan for connection: ${mockConnection.id}`\r\n      );\r\n    });\r\n\r\n    it('should handle security scan for non-existent connection', async () => {\r\n      mockTunnelManager.getConnection.mockReturnValue(undefined);\r\n\r\n      await securityMonitor.performSecurityScan('non-existent');\r\n\r\n      expect(mockLogger.warn).toHaveBeenCalledWith(\r\n        'Connection not found for security scan: non-existent'\r\n      );\r\n    });\r\n\r\n    it('should handle security scan errors', async () => {\r\n      // Mock an error during scan\r\n      mockTunnelManager.getConnection.mockImplementation(() => {\r\n        throw new Error('Test error');\r\n      });\r\n\r\n      await securityMonitor.performSecurityScan(mockConnection.id);\r\n\r\n      expect(mockLogger.error).toHaveBeenCalledWith(\r\n        `Security scan failed for connection ${mockConnection.id}`,\r\n        expect.any(Error)\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('automatic response', () => {\r\n    it('should trigger automatic response for critical threats', async () => {\r\n      const highThreatSpy = jest.fn();\r\n      securityMonitor.on('highThreatDetected', highThreatSpy);\r\n\r\n      securityMonitor.reportSecurityEvent(\r\n        mockConnection.id,\r\n        SecurityEventType.TUNNEL_HIJACK_ATTEMPT,\r\n        ThreatLevel.CRITICAL,\r\n        'Critical security event'\r\n      );\r\n\r\n      // Wait for async response\r\n      await new Promise(resolve => setTimeout(resolve, 100));\r\n\r\n      expect(mockTunnelManager.disconnectTunnel).toHaveBeenCalledWith(mockConnection.id);\r\n    });\r\n\r\n    it('should trigger high threat detection for high severity events', () => {\r\n      const highThreatSpy = jest.fn();\r\n      securityMonitor.on('highThreatDetected', highThreatSpy);\r\n\r\n      const event = securityMonitor.reportSecurityEvent(\r\n        mockConnection.id,\r\n        SecurityEventType.DATA_INTEGRITY_VIOLATION,\r\n        ThreatLevel.HIGH,\r\n        'High security event'\r\n      );\r\n\r\n      expect(highThreatSpy).toHaveBeenCalledWith(event);\r\n    });\r\n  });\r\n\r\n  describe('cleanup', () => {\r\n    it('should cleanup resources properly', () => {\r\n      securityMonitor.startMonitoring();\r\n      securityMonitor.cleanup();\r\n\r\n      expect(mockLogger.info).toHaveBeenCalledWith('Tunnel security monitor cleanup completed');\r\n    });\r\n\r\n    it('should clean up old events during cleanup', () => {\r\n      // Create an event\r\n      securityMonitor.reportSecurityEvent(\r\n        mockConnection.id,\r\n        SecurityEventType.SUSPICIOUS_TRAFFIC,\r\n        ThreatLevel.LOW,\r\n        'Old event'\r\n      );\r\n\r\n      // Mock old timestamp\r\n      const events = securityMonitor.getSecurityEvents();\r\n      if (events.length > 0) {\r\n        events[0].timestamp = new Date(Date.now() - 8 * 24 * 60 * 60 * 1000); // 8 days ago\r\n      }\r\n\r\n      securityMonitor.cleanup();\r\n\r\n      // Events should be cleaned up (this is a simplified test)\r\n      expect(mockLogger.info).toHaveBeenCalledWith('Tunnel security monitor cleanup completed');\r\n    });\r\n  });\r\n});"],"version":3}