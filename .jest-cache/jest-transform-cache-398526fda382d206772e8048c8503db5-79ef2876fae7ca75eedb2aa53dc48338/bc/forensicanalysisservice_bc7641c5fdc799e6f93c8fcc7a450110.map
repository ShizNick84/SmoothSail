{"version":3,"names":["cov_1s8bbcmgr7","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","events_1","require","crypto_1","logger_1","audit_service_1","ForensicAnalysisService","EventEmitter","config","forensicEvidence","Map","attackTimelines","threatAttributions","forensicReports","custodySigningKey","constructor","evidenceCollection","autoCollectionEnabled","collectionTimeoutMs","maxEvidenceSize","compressionEnabled","encryptionEnabled","chainOfCustody","enabled","digitalSigningEnabled","timestampingEnabled","witnessRequired","analysis","timelineReconstructionEnabled","threatAttributionEnabled","correlationAnalysisEnabled","behavioralAnalysisEnabled","reporting","autoReportGeneration","reportFormats","reportRetentionDays","legalComplianceMode","initializeCustodySigningKey","logger","info","startForensicAnalysis","setupEventHandlers","startPeriodicCleanup","auditService","createAuditEntry","auditId","Date","now","eventType","actor","resource","action","result","timestamp","auditData","error","Error","collectForensicEvidence","incident","evidenceTypes","incidentId","collectedEvidence","evidenceType","evidence","collectEvidenceByType","push","set","evidenceId","sourceEvent","target","evidenceCount","length","emit","reconstructAttackTimeline","incidentEvidence","Array","from","values","filter","metadata","warn","timelineEntries","analysisResults","analyzeEvidenceForTimeline","sort","a","getTime","refinedTimeline","correlateTimelineEvents","performThreatAttribution","timeline","get","attackPatterns","analyzeAttackPatterns","attribution","performAttributionAnalysis","confidence","attributionConfidence","sophistication","threatActor","sophisticationLevel","generateForensicReport","reportType","e","report","createForensicReport","reportId","verifyEvidenceIntegrity","currentHash","calculateEvidenceHash","integrityVerified","integrityStatus","addChainOfCustodyEntry","status","getForensicEvidence","getAttackTimeline","getThreatAttribution","getForensicReport","signingKeyHex","process","env","CUSTODY_SIGNING_KEY","generateSecureKey","Buffer","createHash","update","Math","random","toString","digest","substring","on","data","setInterval","cleanupOldForensicData","substr","description","location","collectedAt","size","collectionMethod","sourceSystem","classification","legalHold","tags","category","severity","entryId","supportingEvidence","mitreAttackTechnique","source","debug","correlatedEntries","entry","index","array","findIndex","abs","forEach","min","techniques","map","technique","indexOf","tactics","tactic","tools","infrastructure","analysisId","aliases","motivation","geography","reasoning","similarAttacks","analysisTimestamp","keyFindings","round","recommendations","title","executiveSummary","attackTimeline","threatAttribution","author","createdDate","lastModified","hashData","JSON","stringify","purpose","signature","signCustodyEntry","signatureData","createHmac","cutoffDate","delete","getStatus","isActive","timelinesCount","attributionsCount","reportsCount","exports","forensicAnalysisService"],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\forensic-analysis-service.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * AI CRYPTO TRADING AGENT - FORENSIC ANALYSIS SERVICE\r\n * =============================================================================\r\n * \r\n * This service provides comprehensive digital forensics capabilities for the\r\n * AI crypto trading agent. It handles evidence collection, attack timeline\r\n * reconstruction, threat attribution, and forensic reporting.\r\n * \r\n * CRITICAL SECURITY NOTICE:\r\n * This service is essential for post-incident analysis and legal compliance.\r\n * All forensic data must be collected and preserved with chain of custody\r\n * integrity to support potential legal proceedings and regulatory compliance.\r\n * \r\n * Forensic Capabilities:\r\n * - Digital forensics data collection\r\n * - Attack timeline reconstruction\r\n * - Threat attribution and analysis\r\n * - Forensic reporting and documentation\r\n * - Chain of custody management\r\n * - Evidence integrity verification\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport { EventEmitter } from 'events';\r\nimport { createHash, createHmac } from 'crypto';\r\nimport { logger } from '@/core/logging/logger';\r\nimport { auditService } from '@/security/audit-service';\r\nimport { SecurityIncident, IncidentEvidence } from '@/security/incident-response-service';\r\nimport { SecurityEvent } from '@/security/security-monitoring-service';\r\nimport { ThreatDetectionEvent } from '@/security/threat-detection-engine';\r\n\r\n/**\r\n * Interface for forensic analysis configuration\r\n */\r\nexport interface ForensicAnalysisConfig {\r\n  /** Evidence collection settings */\r\n  evidenceCollection: {\r\n    autoCollectionEnabled: boolean;\r\n    collectionTimeoutMs: number;\r\n    maxEvidenceSize: number;\r\n    compressionEnabled: boolean;\r\n    encryptionEnabled: boolean;\r\n  };\r\n  /** Chain of custody settings */\r\n  chainOfCustody: {\r\n    enabled: boolean;\r\n    digitalSigningEnabled: boolean;\r\n    timestampingEnabled: boolean;\r\n    witnessRequired: boolean;\r\n  };\r\n  /** Analysis settings */\r\n  analysis: {\r\n    timelineReconstructionEnabled: boolean;\r\n    threatAttributionEnabled: boolean;\r\n    correlationAnalysisEnabled: boolean;\r\n    behavioralAnalysisEnabled: boolean;\r\n  };\r\n  /** Reporting settings */\r\n  reporting: {\r\n    autoReportGeneration: boolean;\r\n    reportFormats: string[];\r\n    reportRetentionDays: number;\r\n    legalComplianceMode: boolean;\r\n  };\r\n}\r\n\r\n/**\r\n * Interface for forensic evidence\r\n */\r\nexport interface ForensicEvidence extends IncidentEvidence {\r\n  /** Chain of custody entries */\r\n  chainOfCustody: ChainOfCustodyEntry[];\r\n  /** Evidence integrity status */\r\n  integrityStatus: 'verified' | 'compromised' | 'unknown';\r\n  /** Evidence classification */\r\n  classification: 'public' | 'internal' | 'confidential' | 'restricted';\r\n  /** Legal hold status */\r\n  legalHold: boolean;\r\n  /** Evidence source system */\r\n  sourceSystem: string;\r\n  /** Collection method */\r\n  collectionMethod: 'automated' | 'manual' | 'remote';\r\n  /** Evidence tags */\r\n  tags: string[];\r\n}\r\n\r\n/**\r\n * Interface for chain of custody entry\r\n */\r\nexport interface ChainOfCustodyEntry {\r\n  /** Entry ID */\r\n  entryId: string;\r\n  /** Timestamp */\r\n  timestamp: Date;\r\n  /** Action performed */\r\n  action: 'collected' | 'transferred' | 'analyzed' | 'stored' | 'accessed' | 'modified';\r\n  /** Person or system performing action */\r\n  actor: string;\r\n  /** Location of evidence */\r\n  location: string;\r\n  /** Purpose of action */\r\n  purpose: string;\r\n  /** Digital signature */\r\n  signature: string;\r\n  /** Witness information */\r\n  witness?: string;\r\n}\r\n\r\n/**\r\n * Interface for attack timeline entry\r\n */\r\nexport interface AttackTimelineEntry {\r\n  /** Timeline entry ID */\r\n  entryId: string;\r\n  /** Timestamp */\r\n  timestamp: Date;\r\n  /** Event type */\r\n  eventType: 'initial_access' | 'execution' | 'persistence' | 'privilege_escalation' | \r\n             'defense_evasion' | 'credential_access' | 'discovery' | 'lateral_movement' | \r\n             'collection' | 'command_control' | 'exfiltration' | 'impact';\r\n  /** Event description */\r\n  description: string;\r\n  /** Evidence supporting this event */\r\n  supportingEvidence: string[];\r\n  /** Confidence level (0-1) */\r\n  confidence: number;\r\n  /** MITRE ATT&CK technique */\r\n  mitreAttackTechnique?: string;\r\n  /** Source of information */\r\n  source: 'log_analysis' | 'network_analysis' | 'file_analysis' | 'memory_analysis' | 'manual_analysis';\r\n}\r\n\r\n/**\r\n * Interface for threat attribution analysis\r\n */\r\nexport interface ThreatAttributionAnalysis {\r\n  /** Analysis ID */\r\n  analysisId: string;\r\n  /** Incident ID */\r\n  incidentId: string;\r\n  /** Threat actor profile */\r\n  threatActor: {\r\n    name?: string;\r\n    aliases: string[];\r\n    sophisticationLevel: 'low' | 'medium' | 'high' | 'advanced';\r\n    motivation: 'financial' | 'espionage' | 'sabotage' | 'activism' | 'unknown';\r\n    geography?: string;\r\n  };\r\n  /** Attack patterns */\r\n  attackPatterns: {\r\n    techniques: string[];\r\n    tools: string[];\r\n    infrastructure: string[];\r\n    tactics: string[];\r\n  };\r\n  /** Attribution confidence */\r\n  attributionConfidence: number;\r\n  /** Attribution reasoning */\r\n  reasoning: string[];\r\n  /** Similar attacks */\r\n  similarAttacks: string[];\r\n  /** Analysis timestamp */\r\n  analysisTimestamp: Date;\r\n}\r\n\r\n/**\r\n * Interface for forensic analysis report\r\n */\r\nexport interface ForensicAnalysisReport {\r\n  /** Report ID */\r\n  reportId: string;\r\n  /** Incident ID */\r\n  incidentId: string;\r\n  /** Report type */\r\n  reportType: 'preliminary' | 'detailed' | 'final' | 'legal';\r\n  /** Report title */\r\n  title: string;\r\n  /** Executive summary */\r\n  executiveSummary: string;\r\n  /** Attack timeline */\r\n  attackTimeline: AttackTimelineEntry[];\r\n  /** Threat attribution */\r\n  threatAttribution?: ThreatAttributionAnalysis;\r\n  /** Key findings */\r\n  keyFindings: string[];\r\n  /** Recommendations */\r\n  recommendations: string[];\r\n  /** Report metadata */\r\n  metadata: {\r\n    author: string;\r\n    reviewedBy?: string;\r\n    createdDate: Date;\r\n    lastModified: Date;\r\n    version: string;\r\n    classification: string;\r\n  };\r\n}\r\n\r\n/**\r\n * Forensic analysis service\r\n * Provides comprehensive digital forensics and incident analysis capabilities\r\n */\r\nexport class ForensicAnalysisService extends EventEmitter {\r\n  /** Service configuration */\r\n  private config: ForensicAnalysisConfig;\r\n  \r\n  /** Forensic evidence storage */\r\n  private forensicEvidence: Map<string, ForensicEvidence> = new Map();\r\n  \r\n  /** Attack timelines */\r\n  private attackTimelines: Map<string, AttackTimelineEntry[]> = new Map();\r\n  \r\n  /** Threat attribution analyses */\r\n  private threatAttributions: Map<string, ThreatAttributionAnalysis> = new Map();\r\n  \r\n  /** Forensic reports */\r\n  private forensicReports: Map<string, ForensicAnalysisReport> = new Map();\r\n  \r\n  /** HMAC key for chain of custody signatures */\r\n  private custodySigningKey: Buffer;\r\n\r\n  constructor(config?: Partial<ForensicAnalysisConfig>) {\r\n    super();\r\n    \r\n    // Initialize configuration with defaults\r\n    this.config = {\r\n      evidenceCollection: {\r\n        autoCollectionEnabled: true,\r\n        collectionTimeoutMs: 300000, // 5 minutes\r\n        maxEvidenceSize: 1024 * 1024 * 1024, // 1GB\r\n        compressionEnabled: true,\r\n        encryptionEnabled: true\r\n      },\r\n      chainOfCustody: {\r\n        enabled: true,\r\n        digitalSigningEnabled: true,\r\n        timestampingEnabled: true,\r\n        witnessRequired: false\r\n      },\r\n      analysis: {\r\n        timelineReconstructionEnabled: true,\r\n        threatAttributionEnabled: true,\r\n        correlationAnalysisEnabled: true,\r\n        behavioralAnalysisEnabled: true\r\n      },\r\n      reporting: {\r\n        autoReportGeneration: true,\r\n        reportFormats: ['json', 'pdf', 'html'],\r\n        reportRetentionDays: 2555, // 7 years\r\n        legalComplianceMode: true\r\n      },\r\n      ...config\r\n    };\r\n    \r\n    // Initialize custody signing key\r\n    this.initializeCustodySigningKey();\r\n    \r\n    logger.info('🔬 Forensic Analysis Service initialized');\r\n  }\r\n\r\n  /**\r\n   * Start forensic analysis service\r\n   * Begins forensic analysis operations\r\n   * \r\n   * @returns Promise<void>\r\n   */\r\n  public async startForensicAnalysis(): Promise<void> {\r\n    try {\r\n      logger.info('🚀 Starting forensic analysis service...');\r\n      \r\n      // Set up event handlers\r\n      this.setupEventHandlers();\r\n      \r\n      // Start periodic cleanup\r\n      this.startPeriodicCleanup();\r\n      \r\n      // Create audit entry\r\n      await auditService.createAuditEntry({\r\n        auditId: `forensic_start_${Date.now()}`,\r\n        eventType: 'FORENSIC_ANALYSIS_START',\r\n        actor: 'SYSTEM',\r\n        resource: 'FORENSIC_ANALYSIS_SERVICE',\r\n        action: 'START_SERVICE',\r\n        result: 'SUCCESS',\r\n        timestamp: new Date(),\r\n        auditData: {\r\n          config: this.config\r\n        }\r\n      });\r\n      \r\n      logger.info('✅ Forensic analysis service started successfully');\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to start forensic analysis service:', error);\r\n      throw new Error('Forensic analysis service startup failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Collect forensic evidence\r\n   * Collects and preserves forensic evidence for incident\r\n   * \r\n   * @param incident - Security incident\r\n   * @param evidenceTypes - Types of evidence to collect\r\n   * @returns Promise<ForensicEvidence[]> Collected evidence\r\n   */\r\n  public async collectForensicEvidence(\r\n    incident: SecurityIncident,\r\n    evidenceTypes: string[] = ['log_file', 'system_snapshot', 'network_capture']\r\n  ): Promise<ForensicEvidence[]> {\r\n    try {\r\n      logger.info('🔍 Collecting forensic evidence', {\r\n        incidentId: incident.incidentId,\r\n        evidenceTypes\r\n      });\r\n      \r\n      const collectedEvidence: ForensicEvidence[] = [];\r\n      \r\n      for (const evidenceType of evidenceTypes) {\r\n        try {\r\n          const evidence = await this.collectEvidenceByType(incident, evidenceType);\r\n          if (evidence) {\r\n            collectedEvidence.push(evidence);\r\n            this.forensicEvidence.set(evidence.evidenceId, evidence);\r\n          }\r\n        } catch (error) {\r\n          logger.error(`❌ Failed to collect ${evidenceType} evidence:`, error);\r\n        }\r\n      }\r\n      \r\n      // Create audit entry\r\n      await auditService.createAuditEntry({\r\n        auditId: `evidence_collection_${incident.incidentId}`,\r\n        eventType: 'FORENSIC_EVIDENCE_COLLECTED',\r\n        actor: 'FORENSIC_ANALYSIS_SERVICE',\r\n        resource: incident.sourceEvent.target,\r\n        action: 'COLLECT_EVIDENCE',\r\n        result: 'SUCCESS',\r\n        timestamp: new Date(),\r\n        auditData: {\r\n          incidentId: incident.incidentId,\r\n          evidenceCount: collectedEvidence.length,\r\n          evidenceTypes\r\n        }\r\n      });\r\n      \r\n      // Emit evidence collected event\r\n      this.emit('evidenceCollected', {\r\n        incidentId: incident.incidentId,\r\n        evidence: collectedEvidence\r\n      });\r\n      \r\n      return collectedEvidence;\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to collect forensic evidence:', error);\r\n      throw new Error('Forensic evidence collection failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reconstruct attack timeline\r\n   * Analyzes evidence to reconstruct attack timeline\r\n   * \r\n   * @param incidentId - Incident identifier\r\n   * @returns Promise<AttackTimelineEntry[]> Reconstructed timeline\r\n   */\r\n  public async reconstructAttackTimeline(incidentId: string): Promise<AttackTimelineEntry[]> {\r\n    try {\r\n      logger.info('⏱️ Reconstructing attack timeline', { incidentId });\r\n      \r\n      // Get all evidence for incident\r\n      const incidentEvidence = Array.from(this.forensicEvidence.values())\r\n        .filter(evidence => evidence.metadata.incidentId === incidentId);\r\n      \r\n      if (incidentEvidence.length === 0) {\r\n        logger.warn('⚠️ No evidence found for timeline reconstruction', { incidentId });\r\n        return [];\r\n      }\r\n      \r\n      const timelineEntries: AttackTimelineEntry[] = [];\r\n      \r\n      // Analyze each piece of evidence\r\n      for (const evidence of incidentEvidence) {\r\n        const analysisResults = await this.analyzeEvidenceForTimeline(evidence);\r\n        timelineEntries.push(...analysisResults);\r\n      }\r\n      \r\n      // Sort timeline by timestamp\r\n      timelineEntries.sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime());\r\n      \r\n      // Correlate and refine timeline\r\n      const refinedTimeline = this.correlateTimelineEvents(timelineEntries);\r\n      \r\n      // Store timeline\r\n      this.attackTimelines.set(incidentId, refinedTimeline);\r\n      \r\n      logger.info('✅ Attack timeline reconstructed', {\r\n        incidentId,\r\n        timelineEntries: refinedTimeline.length\r\n      });\r\n      \r\n      // Create audit entry\r\n      await auditService.createAuditEntry({\r\n        auditId: `timeline_${incidentId}`,\r\n        eventType: 'ATTACK_TIMELINE_RECONSTRUCTED',\r\n        actor: 'FORENSIC_ANALYSIS_SERVICE',\r\n        resource: 'ATTACK_TIMELINE',\r\n        action: 'RECONSTRUCT_TIMELINE',\r\n        result: 'SUCCESS',\r\n        timestamp: new Date(),\r\n        auditData: {\r\n          incidentId,\r\n          timelineEntries: refinedTimeline.length\r\n        }\r\n      });\r\n      \r\n      return refinedTimeline;\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to reconstruct attack timeline:', error);\r\n      throw new Error('Attack timeline reconstruction failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Perform threat attribution analysis\r\n   * Analyzes attack patterns to attribute threat to actor\r\n   * \r\n   * @param incidentId - Incident identifier\r\n   * @returns Promise<ThreatAttributionAnalysis> Attribution analysis\r\n   */\r\n  public async performThreatAttribution(incidentId: string): Promise<ThreatAttributionAnalysis> {\r\n    try {\r\n      logger.info('🎯 Performing threat attribution analysis', { incidentId });\r\n      \r\n      // Get attack timeline\r\n      const timeline = this.attackTimelines.get(incidentId) || [];\r\n      \r\n      // Get evidence for analysis\r\n      const incidentEvidence = Array.from(this.forensicEvidence.values())\r\n        .filter(evidence => evidence.metadata.incidentId === incidentId);\r\n      \r\n      // Analyze attack patterns\r\n      const attackPatterns = this.analyzeAttackPatterns(timeline, incidentEvidence);\r\n      \r\n      // Perform attribution analysis\r\n      const attribution = this.performAttributionAnalysis(incidentId, attackPatterns);\r\n      \r\n      // Store attribution analysis\r\n      this.threatAttributions.set(incidentId, attribution);\r\n      \r\n      logger.info('✅ Threat attribution analysis completed', {\r\n        incidentId,\r\n        confidence: attribution.attributionConfidence,\r\n        sophistication: attribution.threatActor.sophisticationLevel\r\n      });\r\n      \r\n      // Create audit entry\r\n      await auditService.createAuditEntry({\r\n        auditId: `attribution_${incidentId}`,\r\n        eventType: 'THREAT_ATTRIBUTION_COMPLETED',\r\n        actor: 'FORENSIC_ANALYSIS_SERVICE',\r\n        resource: 'THREAT_ATTRIBUTION',\r\n        action: 'PERFORM_ATTRIBUTION',\r\n        result: 'SUCCESS',\r\n        timestamp: new Date(),\r\n        auditData: {\r\n          incidentId,\r\n          confidence: attribution.attributionConfidence,\r\n          sophistication: attribution.threatActor.sophisticationLevel\r\n        }\r\n      });\r\n      \r\n      return attribution;\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to perform threat attribution:', error);\r\n      throw new Error('Threat attribution analysis failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate forensic analysis report\r\n   * Creates comprehensive forensic analysis report\r\n   * \r\n   * @param incidentId - Incident identifier\r\n   * @param reportType - Type of report to generate\r\n   * @returns Promise<ForensicAnalysisReport> Generated report\r\n   */\r\n  public async generateForensicReport(\r\n    incidentId: string,\r\n    reportType: 'preliminary' | 'detailed' | 'final' | 'legal' = 'detailed'\r\n  ): Promise<ForensicAnalysisReport> {\r\n    try {\r\n      logger.info('📄 Generating forensic analysis report', {\r\n        incidentId,\r\n        reportType\r\n      });\r\n      \r\n      // Get incident data\r\n      const timeline = this.attackTimelines.get(incidentId) || [];\r\n      const attribution = this.threatAttributions.get(incidentId);\r\n      const evidence = Array.from(this.forensicEvidence.values())\r\n        .filter(e => e.metadata.incidentId === incidentId);\r\n      \r\n      // Generate report\r\n      const report = this.createForensicReport(incidentId, reportType, {\r\n        timeline,\r\n        attribution,\r\n        evidence\r\n      });\r\n      \r\n      // Store report\r\n      this.forensicReports.set(report.reportId, report);\r\n      \r\n      logger.info('✅ Forensic analysis report generated', {\r\n        reportId: report.reportId,\r\n        incidentId,\r\n        reportType\r\n      });\r\n      \r\n      // Create audit entry\r\n      await auditService.createAuditEntry({\r\n        auditId: report.reportId,\r\n        eventType: 'FORENSIC_REPORT_GENERATED',\r\n        actor: 'FORENSIC_ANALYSIS_SERVICE',\r\n        resource: 'FORENSIC_REPORT',\r\n        action: 'GENERATE_REPORT',\r\n        result: 'SUCCESS',\r\n        timestamp: new Date(),\r\n        auditData: {\r\n          reportId: report.reportId,\r\n          incidentId,\r\n          reportType\r\n        }\r\n      });\r\n      \r\n      return report;\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to generate forensic report:', error);\r\n      throw new Error('Forensic report generation failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verify evidence integrity\r\n   * Verifies the integrity of forensic evidence\r\n   * \r\n   * @param evidenceId - Evidence identifier\r\n   * @returns Promise<boolean> True if integrity verified\r\n   */\r\n  public async verifyEvidenceIntegrity(evidenceId: string): Promise<boolean> {\r\n    try {\r\n      const evidence = this.forensicEvidence.get(evidenceId);\r\n      if (!evidence) {\r\n        throw new Error(`Evidence not found: ${evidenceId}`);\r\n      }\r\n      \r\n      // Verify hash integrity\r\n      const currentHash = await this.calculateEvidenceHash(evidence);\r\n      const integrityVerified = currentHash === evidence.hash;\r\n      \r\n      // Update integrity status\r\n      evidence.integrityStatus = integrityVerified ? 'verified' : 'compromised';\r\n      \r\n      // Add chain of custody entry\r\n      if (this.config.chainOfCustody.enabled) {\r\n        await this.addChainOfCustodyEntry(evidence, 'accessed', 'SYSTEM', 'Integrity verification');\r\n      }\r\n      \r\n      logger.info('🔐 Evidence integrity verification', {\r\n        evidenceId,\r\n        integrityVerified,\r\n        status: evidence.integrityStatus\r\n      });\r\n      \r\n      return integrityVerified;\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to verify evidence integrity:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get forensic evidence\r\n   * Returns forensic evidence by ID\r\n   * \r\n   * @param evidenceId - Evidence identifier\r\n   * @returns ForensicEvidence | null Evidence or null if not found\r\n   */\r\n  public getForensicEvidence(evidenceId: string): ForensicEvidence | null {\r\n    return this.forensicEvidence.get(evidenceId) || null;\r\n  }\r\n\r\n  /**\r\n   * Get attack timeline\r\n   * Returns attack timeline for incident\r\n   * \r\n   * @param incidentId - Incident identifier\r\n   * @returns AttackTimelineEntry[] Attack timeline\r\n   */\r\n  public getAttackTimeline(incidentId: string): AttackTimelineEntry[] {\r\n    return this.attackTimelines.get(incidentId) || [];\r\n  }\r\n\r\n  /**\r\n   * Get threat attribution\r\n   * Returns threat attribution analysis for incident\r\n   * \r\n   * @param incidentId - Incident identifier\r\n   * @returns ThreatAttributionAnalysis | null Attribution analysis or null\r\n   */\r\n  public getThreatAttribution(incidentId: string): ThreatAttributionAnalysis | null {\r\n    return this.threatAttributions.get(incidentId) || null;\r\n  }\r\n\r\n  /**\r\n   * Get forensic report\r\n   * Returns forensic report by ID\r\n   * \r\n   * @param reportId - Report identifier\r\n   * @returns ForensicAnalysisReport | null Report or null if not found\r\n   */\r\n  public getForensicReport(reportId: string): ForensicAnalysisReport | null {\r\n    return this.forensicReports.get(reportId) || null;\r\n  }\r\n\r\n  // Private helper methods\r\n  \r\n  private initializeCustodySigningKey(): void {\r\n    const signingKeyHex = process.env.CUSTODY_SIGNING_KEY || \r\n                         this.generateSecureKey(32);\r\n    \r\n    this.custodySigningKey = Buffer.from(signingKeyHex, 'hex');\r\n  }\r\n\r\n  private generateSecureKey(length: number): string {\r\n    return createHash('sha256')\r\n      .update(Math.random().toString() + Date.now().toString())\r\n      .digest('hex')\r\n      .substring(0, length * 2);\r\n  }\r\n\r\n  private setupEventHandlers(): void {\r\n    this.on('evidenceCollected', async (data: { incidentId: string; evidence: ForensicEvidence[] }) => {\r\n      logger.info('📝 Evidence collection completed', {\r\n        incidentId: data.incidentId,\r\n        evidenceCount: data.evidence.length\r\n      });\r\n      \r\n      // Auto-generate timeline if enabled\r\n      if (this.config.analysis.timelineReconstructionEnabled) {\r\n        try {\r\n          await this.reconstructAttackTimeline(data.incidentId);\r\n        } catch (error) {\r\n          logger.error('❌ Auto timeline reconstruction failed:', error);\r\n        }\r\n      }\r\n      \r\n      // Auto-perform attribution if enabled\r\n      if (this.config.analysis.threatAttributionEnabled) {\r\n        try {\r\n          await this.performThreatAttribution(data.incidentId);\r\n        } catch (error) {\r\n          logger.error('❌ Auto threat attribution failed:', error);\r\n        }\r\n      }\r\n      \r\n      // Auto-generate report if enabled\r\n      if (this.config.reporting.autoReportGeneration) {\r\n        try {\r\n          await this.generateForensicReport(data.incidentId, 'preliminary');\r\n        } catch (error) {\r\n          logger.error('❌ Auto report generation failed:', error);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  private startPeriodicCleanup(): void {\r\n    // Clean up old data every 24 hours\r\n    setInterval(() => {\r\n      this.cleanupOldForensicData();\r\n    }, 24 * 60 * 60 * 1000);\r\n  }\r\n\r\n  private async collectEvidenceByType(\r\n    incident: SecurityIncident,\r\n    evidenceType: string\r\n  ): Promise<ForensicEvidence | null> {\r\n    try {\r\n      const evidenceId = `forensic_${evidenceType}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n      \r\n      // Create forensic evidence\r\n      const evidence: ForensicEvidence = {\r\n        evidenceId,\r\n        type: evidenceType as any,\r\n        description: `Forensic ${evidenceType} evidence for incident ${incident.incidentId}`,\r\n        location: `/forensic/${incident.incidentId}/${evidenceType}/`,\r\n        hash: 'placeholder_hash',\r\n        collectedAt: new Date(),\r\n        size: 0,\r\n        metadata: {\r\n          incidentId: incident.incidentId,\r\n          collectionMethod: 'automated',\r\n          sourceSystem: incident.sourceEvent.target\r\n        },\r\n        chainOfCustody: [],\r\n        integrityStatus: 'verified',\r\n        classification: 'restricted',\r\n        legalHold: this.config.reporting.legalComplianceMode,\r\n        sourceSystem: incident.sourceEvent.target,\r\n        collectionMethod: 'automated',\r\n        tags: [evidenceType, incident.category, `severity_${incident.severity}`]\r\n      };\r\n      \r\n      // Calculate actual hash\r\n      evidence.hash = await this.calculateEvidenceHash(evidence);\r\n      \r\n      // Add initial chain of custody entry\r\n      if (this.config.chainOfCustody.enabled) {\r\n        await this.addChainOfCustodyEntry(\r\n          evidence,\r\n          'collected',\r\n          'FORENSIC_ANALYSIS_SERVICE',\r\n          `Automated collection for incident ${incident.incidentId}`\r\n        );\r\n      }\r\n      \r\n      return evidence;\r\n      \r\n    } catch (error) {\r\n      logger.error(`❌ Failed to collect ${evidenceType} evidence:`, error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private async analyzeEvidenceForTimeline(evidence: ForensicEvidence): Promise<AttackTimelineEntry[]> {\r\n    const timelineEntries: AttackTimelineEntry[] = [];\r\n    \r\n    try {\r\n      // Simulate evidence analysis based on type\r\n      switch (evidence.type) {\r\n        case 'log_file':\r\n          timelineEntries.push({\r\n            entryId: `timeline_${Date.now()}_1`,\r\n            timestamp: evidence.collectedAt,\r\n            eventType: 'initial_access',\r\n            description: 'Suspicious login attempt detected in logs',\r\n            supportingEvidence: [evidence.evidenceId],\r\n            confidence: 0.8,\r\n            mitreAttackTechnique: 'T1078',\r\n            source: 'log_analysis'\r\n          });\r\n          break;\r\n        \r\n        case 'network_capture':\r\n          timelineEntries.push({\r\n            entryId: `timeline_${Date.now()}_2`,\r\n            timestamp: evidence.collectedAt,\r\n            eventType: 'command_control',\r\n            description: 'Suspicious network communication detected',\r\n            supportingEvidence: [evidence.evidenceId],\r\n            confidence: 0.9,\r\n            mitreAttackTechnique: 'T1071',\r\n            source: 'network_analysis'\r\n          });\r\n          break;\r\n        \r\n        case 'system_snapshot':\r\n          timelineEntries.push({\r\n            entryId: `timeline_${Date.now()}_3`,\r\n            timestamp: evidence.collectedAt,\r\n            eventType: 'persistence',\r\n            description: 'Suspicious system modifications detected',\r\n            supportingEvidence: [evidence.evidenceId],\r\n            confidence: 0.7,\r\n            mitreAttackTechnique: 'T1547',\r\n            source: 'file_analysis'\r\n          });\r\n          break;\r\n        \r\n        default:\r\n          logger.debug(`No timeline analysis available for evidence type: ${evidence.type}`);\r\n      }\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Evidence timeline analysis failed:', error);\r\n    }\r\n    \r\n    return timelineEntries;\r\n  }\r\n\r\n  private correlateTimelineEvents(timelineEntries: AttackTimelineEntry[]): AttackTimelineEntry[] {\r\n    // Remove duplicates and correlate related events\r\n    const correlatedEntries = timelineEntries.filter((entry, index, array) => {\r\n      return array.findIndex(e => \r\n        e.eventType === entry.eventType && \r\n        Math.abs(e.timestamp.getTime() - entry.timestamp.getTime()) < 60000\r\n      ) === index;\r\n    });\r\n    \r\n    // Enhance confidence based on supporting evidence\r\n    correlatedEntries.forEach(entry => {\r\n      if (entry.supportingEvidence.length > 1) {\r\n        entry.confidence = Math.min(entry.confidence + 0.1, 1.0);\r\n      }\r\n    });\r\n    \r\n    return correlatedEntries;\r\n  }\r\n\r\n  private analyzeAttackPatterns(\r\n    timeline: AttackTimelineEntry[],\r\n    evidence: ForensicEvidence[]\r\n  ): {\r\n    techniques: string[];\r\n    tools: string[];\r\n    infrastructure: string[];\r\n    tactics: string[];\r\n  } {\r\n    const techniques = timeline\r\n      .filter(entry => entry.mitreAttackTechnique)\r\n      .map(entry => entry.mitreAttackTechnique!)\r\n      .filter((technique, index, array) => array.indexOf(technique) === index);\r\n    \r\n    const tactics = timeline\r\n      .map(entry => entry.eventType)\r\n      .filter((tactic, index, array) => array.indexOf(tactic) === index);\r\n    \r\n    // Simulate tool and infrastructure detection\r\n    const tools = ['custom_malware', 'powershell', 'cmd'];\r\n    const infrastructure = ['tor_network', 'compromised_domain'];\r\n    \r\n    return { techniques, tools, infrastructure, tactics };\r\n  }\r\n\r\n  private performAttributionAnalysis(\r\n    incidentId: string,\r\n    attackPatterns: any\r\n  ): ThreatAttributionAnalysis {\r\n    // Simulate attribution analysis\r\n    const attribution: ThreatAttributionAnalysis = {\r\n      analysisId: `attribution_${Date.now()}`,\r\n      incidentId,\r\n      threatActor: {\r\n        aliases: ['Unknown Actor'],\r\n        sophisticationLevel: 'medium',\r\n        motivation: 'financial',\r\n        geography: 'unknown'\r\n      },\r\n      attackPatterns,\r\n      attributionConfidence: 0.6,\r\n      reasoning: [\r\n        'Attack patterns consistent with financially motivated threat actors',\r\n        'Use of common tools and techniques',\r\n        'Limited sophistication in execution'\r\n      ],\r\n      similarAttacks: [],\r\n      analysisTimestamp: new Date()\r\n    };\r\n    \r\n    // Adjust confidence based on attack patterns\r\n    if (attackPatterns.techniques.length > 5) {\r\n      attribution.attributionConfidence += 0.1;\r\n      attribution.threatActor.sophisticationLevel = 'high';\r\n    }\r\n    \r\n    return attribution;\r\n  }\r\n\r\n  private createForensicReport(\r\n    incidentId: string,\r\n    reportType: string,\r\n    data: {\r\n      timeline: AttackTimelineEntry[];\r\n      attribution?: ThreatAttributionAnalysis;\r\n      evidence: ForensicEvidence[];\r\n    }\r\n  ): ForensicAnalysisReport {\r\n    const reportId = `report_${incidentId}_${Date.now()}`;\r\n    \r\n    // Generate key findings\r\n    const keyFindings = [\r\n      `${data.timeline.length} timeline events reconstructed`,\r\n      `${data.evidence.length} pieces of evidence collected`,\r\n      'Evidence integrity verified',\r\n      'Chain of custody maintained'\r\n    ];\r\n    \r\n    if (data.attribution) {\r\n      keyFindings.push(`Threat attribution confidence: ${Math.round(data.attribution.attributionConfidence * 100)}%`);\r\n    }\r\n    \r\n    // Generate recommendations\r\n    const recommendations = [\r\n      'Implement additional monitoring for detected attack patterns',\r\n      'Review and update security controls based on attack vectors',\r\n      'Conduct security awareness training for identified vulnerabilities',\r\n      'Consider threat hunting activities for similar indicators'\r\n    ];\r\n    \r\n    const report: ForensicAnalysisReport = {\r\n      reportId,\r\n      incidentId,\r\n      reportType: reportType as any,\r\n      title: `Forensic Analysis Report - Incident ${incidentId}`,\r\n      executiveSummary: `This report presents the forensic analysis findings for security incident ${incidentId}. The analysis includes evidence collection, attack timeline reconstruction, and threat attribution.`,\r\n      attackTimeline: data.timeline,\r\n      threatAttribution: data.attribution,\r\n      keyFindings,\r\n      recommendations,\r\n      metadata: {\r\n        author: 'FORENSIC_ANALYSIS_SERVICE',\r\n        createdDate: new Date(),\r\n        lastModified: new Date(),\r\n        version: '1.0',\r\n        classification: 'RESTRICTED'\r\n      }\r\n    };\r\n    \r\n    return report;\r\n  }\r\n\r\n  private async calculateEvidenceHash(evidence: ForensicEvidence): Promise<string> {\r\n    const hashData = {\r\n      evidenceId: evidence.evidenceId,\r\n      type: evidence.type,\r\n      description: evidence.description,\r\n      location: evidence.location,\r\n      collectedAt: evidence.collectedAt,\r\n      metadata: evidence.metadata\r\n    };\r\n    \r\n    return createHash('sha256')\r\n      .update(JSON.stringify(hashData))\r\n      .digest('hex');\r\n  }\r\n\r\n  private async addChainOfCustodyEntry(\r\n    evidence: ForensicEvidence,\r\n    action: ChainOfCustodyEntry['action'],\r\n    actor: string,\r\n    purpose: string\r\n  ): Promise<void> {\r\n    const entry: ChainOfCustodyEntry = {\r\n      entryId: `custody_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n      timestamp: new Date(),\r\n      action,\r\n      actor,\r\n      location: evidence.location,\r\n      purpose,\r\n      signature: this.signCustodyEntry(evidence.evidenceId, action, actor)\r\n    };\r\n    \r\n    evidence.chainOfCustody.push(entry);\r\n  }\r\n\r\n  private signCustodyEntry(evidenceId: string, action: string, actor: string): string {\r\n    const signatureData = `${evidenceId}:${action}:${actor}:${Date.now()}`;\r\n    \r\n    return createHmac('sha256', this.custodySigningKey)\r\n      .update(signatureData)\r\n      .digest('hex');\r\n  }\r\n\r\n  private cleanupOldForensicData(): void {\r\n    const cutoffDate = new Date(Date.now() - (this.config.reporting.reportRetentionDays * 24 * 60 * 60 * 1000));\r\n    \r\n    // Clean up old evidence\r\n    for (const [evidenceId, evidence] of this.forensicEvidence) {\r\n      if (evidence.collectedAt < cutoffDate && !evidence.legalHold) {\r\n        this.forensicEvidence.delete(evidenceId);\r\n      }\r\n    }\r\n    \r\n    // Clean up old reports\r\n    for (const [reportId, report] of this.forensicReports) {\r\n      if (report.metadata.createdDate < cutoffDate) {\r\n        this.forensicReports.delete(reportId);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get service status\r\n   * Returns current service status\r\n   * \r\n   * @returns Service status information\r\n   */\r\n  public getStatus(): {\r\n    isActive: boolean;\r\n    evidenceCount: number;\r\n    timelinesCount: number;\r\n    attributionsCount: number;\r\n    reportsCount: number;\r\n    timestamp: number;\r\n  } {\r\n    return {\r\n      isActive: true,\r\n      evidenceCount: this.forensicEvidence.size,\r\n      timelinesCount: this.attackTimelines.size,\r\n      attributionsCount: this.threatAttributions.size,\r\n      reportsCount: this.forensicReports.size,\r\n      timestamp: Date.now()\r\n    };\r\n  }\r\n}\r\n\r\n// Create and export singleton instance\r\nexport const forensicAnalysisService = new ForensicAnalysisService();\r\n\r\n// =============================================================================\r\n// FORENSIC ANALYSIS NOTES\r\n// =============================================================================\r\n// 1. Comprehensive digital forensics data collection and preservation\r\n// 2. Attack timeline reconstruction with MITRE ATT&CK mapping\r\n// 3. Threat attribution analysis with confidence scoring\r\n// 4. Chain of custody management with digital signatures\r\n// 5. Evidence integrity verification and tamper detection\r\n// 6. Automated forensic reporting with legal compliance\r\n// 7. Integration with incident response and security monitoring\r\n// 8. Configurable retention policies and cleanup procedures\r\n// ============================================================================="],"mappings":"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","ignoreList":[]}