38cc882a306d21fc20a72861481e142f
"use strict";

/**
 * =============================================================================
 * AI CRYPTO TRADING AGENT - SECURITY METRICS AND KPI TRACKING SERVICE
 * =============================================================================
 *
 * This service provides comprehensive security metrics collection, analysis,
 * and KPI tracking for the AI crypto trading agent. It monitors security
 * performance, threat trends, and system health indicators.
 *
 * CRITICAL SECURITY NOTICE:
 * This service provides essential metrics for security decision-making.
 * Accurate metrics are crucial for identifying security trends, measuring
 * security effectiveness, and making informed security investments.
 *
 * Metrics Capabilities:
 * - Real-time security KPI tracking
 * - Threat trend analysis and forecasting
 * - Security performance measurement
 * - Compliance metrics and reporting
 * - Historical data analysis
 * - Automated alerting on metric thresholds
 *
 * @author AI Crypto Trading System
 * @version 1.0.0
 * @license PROPRIETARY
 * =============================================================================
 */
/* istanbul ignore next */
function cov_2frqskxxpc() {
  var path = "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\security-metrics-service.ts";
  var hash = "76ceda6b32270f48e0b996124218bb43c4bccac6";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\security-metrics-service.ts",
    statementMap: {
      "0": {
        start: {
          line: 29,
          column: 0
        },
        end: {
          line: 29,
          column: 62
        }
      },
      "1": {
        start: {
          line: 30,
          column: 0
        },
        end: {
          line: 30,
          column: 73
        }
      },
      "2": {
        start: {
          line: 31,
          column: 17
        },
        end: {
          line: 31,
          column: 34
        }
      },
      "3": {
        start: {
          line: 32,
          column: 17
        },
        end: {
          line: 32,
          column: 49
        }
      },
      "4": {
        start: {
          line: 33,
          column: 24
        },
        end: {
          line: 33,
          column: 59
        }
      },
      "5": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 16
        }
      },
      "6": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 42,
          column: 36
        }
      },
      "7": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 44,
          column: 37
        }
      },
      "8": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 46,
          column: 39
        }
      },
      "9": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 43
        }
      },
      "10": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 50,
          column: 33
        }
      },
      "11": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 63,
          column: 10
        }
      },
      "12": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 65,
          column: 52
        }
      },
      "13": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 67,
          column: 37
        }
      },
      "14": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 68,
          column: 72
        }
      },
      "15": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 109,
          column: 9
        }
      },
      "16": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 78,
          column: 79
        }
      },
      "17": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 87,
          column: 47
        }
      },
      "18": {
        start: {
          line: 81,
          column: 16
        },
        end: {
          line: 86,
          column: 17
        }
      },
      "19": {
        start: {
          line: 82,
          column: 20
        },
        end: {
          line: 82,
          column: 56
        }
      },
      "20": {
        start: {
          line: 85,
          column: 20
        },
        end: {
          line: 85,
          column: 80
        }
      },
      "21": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 89,
          column: 48
        }
      },
      "22": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 103,
          column: 15
        }
      },
      "23": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 104,
          column: 87
        }
      },
      "24": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 107,
          column: 82
        }
      },
      "25": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 108,
          column: 74
        }
      },
      "26": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 144,
          column: 9
        }
      },
      "27": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 119,
          column: 79
        }
      },
      "28": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 124,
          column: 13
        }
      },
      "29": {
        start: {
          line: 122,
          column: 16
        },
        end: {
          line: 122,
          column: 55
        }
      },
      "30": {
        start: {
          line: 123,
          column: 16
        },
        end: {
          line: 123,
          column: 47
        }
      },
      "31": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 138,
          column: 15
        }
      },
      "32": {
        start: {
          line: 139,
          column: 12
        },
        end: {
          line: 139,
          column: 87
        }
      },
      "33": {
        start: {
          line: 142,
          column: 12
        },
        end: {
          line: 142,
          column: 81
        }
      },
      "34": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 143,
          column: 75
        }
      },
      "35": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 166,
          column: 9
        }
      },
      "36": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 156,
          column: 44
        }
      },
      "37": {
        start: {
          line: 158,
          column: 12
        },
        end: {
          line: 160,
          column: 13
        }
      },
      "38": {
        start: {
          line: 159,
          column: 16
        },
        end: {
          line: 159,
          column: 44
        }
      },
      "39": {
        start: {
          line: 162,
          column: 12
        },
        end: {
          line: 162,
          column: 52
        }
      },
      "40": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 165,
          column: 79
        }
      },
      "41": {
        start: {
          line: 175,
          column: 20
        },
        end: {
          line: 175,
          column: 30
        }
      },
      "42": {
        start: {
          line: 176,
          column: 27
        },
        end: {
          line: 176,
          column: 67
        }
      },
      "43": {
        start: {
          line: 178,
          column: 29
        },
        end: {
          line: 178,
          column: 95
        }
      },
      "44": {
        start: {
          line: 178,
          column: 65
        },
        end: {
          line: 178,
          column: 94
        }
      },
      "45": {
        start: {
          line: 180,
          column: 28
        },
        end: {
          line: 180,
          column: 47
        }
      },
      "46": {
        start: {
          line: 181,
          column: 29
        },
        end: {
          line: 181,
          column: 96
        }
      },
      "47": {
        start: {
          line: 181,
          column: 58
        },
        end: {
          line: 181,
          column: 95
        }
      },
      "48": {
        start: {
          line: 183,
          column: 33
        },
        end: {
          line: 183,
          column: 35
        }
      },
      "49": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 186,
          column: 11
        }
      },
      "50": {
        start: {
          line: 185,
          column: 12
        },
        end: {
          line: 185,
          column: 91
        }
      },
      "51": {
        start: {
          line: 188,
          column: 29
        },
        end: {
          line: 188,
          column: 31
        }
      },
      "52": {
        start: {
          line: 189,
          column: 8
        },
        end: {
          line: 191,
          column: 11
        }
      },
      "53": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 190,
          column: 85
        }
      },
      "54": {
        start: {
          line: 193,
          column: 36
        },
        end: {
          line: 193,
          column: 99
        }
      },
      "55": {
        start: {
          line: 194,
          column: 34
        },
        end: {
          line: 194,
          column: 79
        }
      },
      "56": {
        start: {
          line: 195,
          column: 36
        },
        end: {
          line: 195,
          column: 83
        }
      },
      "57": {
        start: {
          line: 196,
          column: 30
        },
        end: {
          line: 196,
          column: 71
        }
      },
      "58": {
        start: {
          line: 197,
          column: 33
        },
        end: {
          line: 197,
          column: 55
        }
      },
      "59": {
        start: {
          line: 198,
          column: 8
        },
        end: {
          line: 208,
          column: 10
        }
      },
      "60": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 249,
          column: 9
        }
      },
      "61": {
        start: {
          line: 220,
          column: 32
        },
        end: {
          line: 220,
          column: 85
        }
      },
      "62": {
        start: {
          line: 221,
          column: 31
        },
        end: {
          line: 221,
          column: 71
        }
      },
      "63": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 232,
          column: 13
        }
      },
      "64": {
        start: {
          line: 223,
          column: 16
        },
        end: {
          line: 231,
          column: 18
        }
      },
      "65": {
        start: {
          line: 234,
          column: 26
        },
        end: {
          line: 234,
          column: 57
        }
      },
      "66": {
        start: {
          line: 235,
          column: 29
        },
        end: {
          line: 235,
          column: 65
        }
      },
      "67": {
        start: {
          line: 236,
          column: 12
        },
        end: {
          line: 244,
          column: 14
        }
      },
      "68": {
        start: {
          line: 247,
          column: 12
        },
        end: {
          line: 247,
          column: 80
        }
      },
      "69": {
        start: {
          line: 248,
          column: 12
        },
        end: {
          line: 248,
          column: 62
        }
      },
      "70": {
        start: {
          line: 260,
          column: 8
        },
        end: {
          line: 284,
          column: 9
        }
      },
      "71": {
        start: {
          line: 261,
          column: 33
        },
        end: {
          line: 261,
          column: 128
        }
      },
      "72": {
        start: {
          line: 261,
          column: 69
        },
        end: {
          line: 261,
          column: 127
        }
      },
      "73": {
        start: {
          line: 263,
          column: 33
        },
        end: {
          line: 263,
          column: 85
        }
      },
      "74": {
        start: {
          line: 265,
          column: 35
        },
        end: {
          line: 265,
          column: 71
        }
      },
      "75": {
        start: {
          line: 267,
          column: 38
        },
        end: {
          line: 267,
          column: 83
        }
      },
      "76": {
        start: {
          line: 269,
          column: 36
        },
        end: {
          line: 269,
          column: 94
        }
      },
      "77": {
        start: {
          line: 271,
          column: 33
        },
        end: {
          line: 271,
          column: 81
        }
      },
      "78": {
        start: {
          line: 272,
          column: 12
        },
        end: {
          line: 279,
          column: 14
        }
      },
      "79": {
        start: {
          line: 282,
          column: 12
        },
        end: {
          line: 282,
          column: 85
        }
      },
      "80": {
        start: {
          line: 283,
          column: 12
        },
        end: {
          line: 283,
          column: 77
        }
      },
      "81": {
        start: {
          line: 293,
          column: 8
        },
        end: {
          line: 321,
          column: 9
        }
      },
      "82": {
        start: {
          line: 295,
          column: 38
        },
        end: {
          line: 295,
          column: 77
        }
      },
      "83": {
        start: {
          line: 296,
          column: 44
        },
        end: {
          line: 296,
          column: 83
        }
      },
      "84": {
        start: {
          line: 297,
          column: 44
        },
        end: {
          line: 297,
          column: 83
        }
      },
      "85": {
        start: {
          line: 298,
          column: 41
        },
        end: {
          line: 298,
          column: 77
        }
      },
      "86": {
        start: {
          line: 299,
          column: 47
        },
        end: {
          line: 299,
          column: 89
        }
      },
      "87": {
        start: {
          line: 301,
          column: 38
        },
        end: {
          line: 305,
          column: 47
        }
      },
      "88": {
        start: {
          line: 307,
          column: 31
        },
        end: {
          line: 307,
          column: 72
        }
      },
      "89": {
        start: {
          line: 308,
          column: 12
        },
        end: {
          line: 316,
          column: 14
        }
      },
      "90": {
        start: {
          line: 319,
          column: 12
        },
        end: {
          line: 319,
          column: 80
        }
      },
      "91": {
        start: {
          line: 320,
          column: 12
        },
        end: {
          line: 320,
          column: 69
        }
      },
      "92": {
        start: {
          line: 329,
          column: 25
        },
        end: {
          line: 338,
          column: 9
        }
      },
      "93": {
        start: {
          line: 339,
          column: 8
        },
        end: {
          line: 341,
          column: 11
        }
      },
      "94": {
        start: {
          line: 340,
          column: 12
        },
        end: {
          line: 340,
          column: 45
        }
      },
      "95": {
        start: {
          line: 350,
          column: 8
        },
        end: {
          line: 408,
          column: 9
        }
      },
      "96": {
        start: {
          line: 351,
          column: 24
        },
        end: {
          line: 351,
          column: 34
        }
      },
      "97": {
        start: {
          line: 352,
          column: 28
        },
        end: {
          line: 352,
          column: 60
        }
      },
      "98": {
        start: {
          line: 354,
          column: 34
        },
        end: {
          line: 395,
          column: 13
        }
      },
      "99": {
        start: {
          line: 397,
          column: 12
        },
        end: {
          line: 402,
          column: 13
        }
      },
      "100": {
        start: {
          line: 398,
          column: 16
        },
        end: {
          line: 398,
          column: 50
        }
      },
      "101": {
        start: {
          line: 399,
          column: 16
        },
        end: {
          line: 399,
          column: 67
        }
      },
      "102": {
        start: {
          line: 401,
          column: 16
        },
        end: {
          line: 401,
          column: 57
        }
      },
      "103": {
        start: {
          line: 404,
          column: 12
        },
        end: {
          line: 404,
          column: 34
        }
      },
      "104": {
        start: {
          line: 407,
          column: 12
        },
        end: {
          line: 407,
          column: 82
        }
      },
      "105": {
        start: {
          line: 419,
          column: 31
        },
        end: {
          line: 426,
          column: 9
        }
      },
      "106": {
        start: {
          line: 427,
          column: 8
        },
        end: {
          line: 427,
          column: 47
        }
      },
      "107": {
        start: {
          line: 428,
          column: 8
        },
        end: {
          line: 428,
          column: 61
        }
      },
      "108": {
        start: {
          line: 430,
          column: 8
        },
        end: {
          line: 441,
          column: 9
        }
      },
      "109": {
        start: {
          line: 431,
          column: 37
        },
        end: {
          line: 438,
          column: 13
        }
      },
      "110": {
        start: {
          line: 434,
          column: 55
        },
        end: {
          line: 434,
          column: 70
        }
      },
      "111": {
        start: {
          line: 439,
          column: 12
        },
        end: {
          line: 439,
          column: 53
        }
      },
      "112": {
        start: {
          line: 440,
          column: 12
        },
        end: {
          line: 440,
          column: 69
        }
      },
      "113": {
        start: {
          line: 450,
          column: 24
        },
        end: {
          line: 450,
          column: 68
        }
      },
      "114": {
        start: {
          line: 451,
          column: 8
        },
        end: {
          line: 451,
          column: 32
        }
      },
      "115": {
        start: {
          line: 453,
          column: 8
        },
        end: {
          line: 455,
          column: 9
        }
      },
      "116": {
        start: {
          line: 454,
          column: 12
        },
        end: {
          line: 454,
          column: 28
        }
      },
      "117": {
        start: {
          line: 456,
          column: 8
        },
        end: {
          line: 456,
          column: 56
        }
      },
      "118": {
        start: {
          line: 467,
          column: 24
        },
        end: {
          line: 467,
          column: 58
        }
      },
      "119": {
        start: {
          line: 468,
          column: 8
        },
        end: {
          line: 468,
          column: 69
        }
      },
      "120": {
        start: {
          line: 468,
          column: 39
        },
        end: {
          line: 468,
          column: 67
        }
      },
      "121": {
        start: {
          line: 478,
          column: 27
        },
        end: {
          line: 478,
          column: 54
        }
      },
      "122": {
        start: {
          line: 479,
          column: 29
        },
        end: {
          line: 479,
          column: 34
        }
      },
      "123": {
        start: {
          line: 480,
          column: 27
        },
        end: {
          line: 480,
          column: 29
        }
      },
      "124": {
        start: {
          line: 481,
          column: 8
        },
        end: {
          line: 512,
          column: 9
        }
      },
      "125": {
        start: {
          line: 483,
          column: 16
        },
        end: {
          line: 486,
          column: 17
        }
      },
      "126": {
        start: {
          line: 484,
          column: 20
        },
        end: {
          line: 484,
          column: 42
        }
      },
      "127": {
        start: {
          line: 485,
          column: 20
        },
        end: {
          line: 485,
          column: 122
        }
      },
      "128": {
        start: {
          line: 487,
          column: 16
        },
        end: {
          line: 487,
          column: 22
        }
      },
      "129": {
        start: {
          line: 489,
          column: 16
        },
        end: {
          line: 492,
          column: 17
        }
      },
      "130": {
        start: {
          line: 490,
          column: 20
        },
        end: {
          line: 490,
          column: 42
        }
      },
      "131": {
        start: {
          line: 491,
          column: 20
        },
        end: {
          line: 491,
          column: 137
        }
      },
      "132": {
        start: {
          line: 493,
          column: 16
        },
        end: {
          line: 493,
          column: 22
        }
      },
      "133": {
        start: {
          line: 495,
          column: 16
        },
        end: {
          line: 498,
          column: 17
        }
      },
      "134": {
        start: {
          line: 496,
          column: 20
        },
        end: {
          line: 496,
          column: 42
        }
      },
      "135": {
        start: {
          line: 497,
          column: 20
        },
        end: {
          line: 497,
          column: 133
        }
      },
      "136": {
        start: {
          line: 499,
          column: 16
        },
        end: {
          line: 499,
          column: 22
        }
      },
      "137": {
        start: {
          line: 501,
          column: 16
        },
        end: {
          line: 504,
          column: 17
        }
      },
      "138": {
        start: {
          line: 502,
          column: 20
        },
        end: {
          line: 502,
          column: 42
        }
      },
      "139": {
        start: {
          line: 503,
          column: 20
        },
        end: {
          line: 503,
          column: 130
        }
      },
      "140": {
        start: {
          line: 505,
          column: 16
        },
        end: {
          line: 505,
          column: 22
        }
      },
      "141": {
        start: {
          line: 507,
          column: 16
        },
        end: {
          line: 510,
          column: 17
        }
      },
      "142": {
        start: {
          line: 508,
          column: 20
        },
        end: {
          line: 508,
          column: 42
        }
      },
      "143": {
        start: {
          line: 509,
          column: 20
        },
        end: {
          line: 509,
          column: 116
        }
      },
      "144": {
        start: {
          line: 511,
          column: 16
        },
        end: {
          line: 511,
          column: 22
        }
      },
      "145": {
        start: {
          line: 513,
          column: 8
        },
        end: {
          line: 525,
          column: 9
        }
      },
      "146": {
        start: {
          line: 514,
          column: 12
        },
        end: {
          line: 518,
          column: 15
        }
      },
      "147": {
        start: {
          line: 519,
          column: 12
        },
        end: {
          line: 524,
          column: 15
        }
      },
      "148": {
        start: {
          line: 535,
          column: 31
        },
        end: {
          line: 535,
          column: 82
        }
      },
      "149": {
        start: {
          line: 535,
          column: 54
        },
        end: {
          line: 535,
          column: 81
        }
      },
      "150": {
        start: {
          line: 536,
          column: 31
        },
        end: {
          line: 536,
          column: 119
        }
      },
      "151": {
        start: {
          line: 536,
          column: 62
        },
        end: {
          line: 536,
          column: 118
        }
      },
      "152": {
        start: {
          line: 537,
          column: 8
        },
        end: {
          line: 537,
          column: 101
        }
      },
      "153": {
        start: {
          line: 547,
          column: 32
        },
        end: {
          line: 547,
          column: 115
        }
      },
      "154": {
        start: {
          line: 547,
          column: 55
        },
        end: {
          line: 547,
          column: 114
        }
      },
      "155": {
        start: {
          line: 548,
          column: 8
        },
        end: {
          line: 549,
          column: 21
        }
      },
      "156": {
        start: {
          line: 549,
          column: 12
        },
        end: {
          line: 549,
          column: 21
        }
      },
      "157": {
        start: {
          line: 550,
          column: 34
        },
        end: {
          line: 554,
          column: 13
        }
      },
      "158": {
        start: {
          line: 553,
          column: 12
        },
        end: {
          line: 553,
          column: 49
        }
      },
      "159": {
        start: {
          line: 555,
          column: 8
        },
        end: {
          line: 555,
          column: 58
        }
      },
      "160": {
        start: {
          line: 565,
          column: 8
        },
        end: {
          line: 566,
          column: 23
        }
      },
      "161": {
        start: {
          line: 566,
          column: 12
        },
        end: {
          line: 566,
          column: 23
        }
      },
      "162": {
        start: {
          line: 567,
          column: 28
        },
        end: {
          line: 567,
          column: 82
        }
      },
      "163": {
        start: {
          line: 567,
          column: 58
        },
        end: {
          line: 567,
          column: 78
        }
      },
      "164": {
        start: {
          line: 568,
          column: 32
        },
        end: {
          line: 568,
          column: 59
        }
      },
      "165": {
        start: {
          line: 570,
          column: 8
        },
        end: {
          line: 570,
          column: 57
        }
      },
      "166": {
        start: {
          line: 579,
          column: 26
        },
        end: {
          line: 579,
          column: 70
        }
      },
      "167": {
        start: {
          line: 582,
          column: 8
        },
        end: {
          line: 582,
          column: 20
        }
      },
      "168": {
        start: {
          line: 592,
          column: 8
        },
        end: {
          line: 594,
          column: 9
        }
      },
      "169": {
        start: {
          line: 593,
          column: 12
        },
        end: {
          line: 593,
          column: 71
        }
      },
      "170": {
        start: {
          line: 596,
          column: 18
        },
        end: {
          line: 596,
          column: 35
        }
      },
      "171": {
        start: {
          line: 597,
          column: 21
        },
        end: {
          line: 597,
          column: 65
        }
      },
      "172": {
        start: {
          line: 597,
          column: 54
        },
        end: {
          line: 597,
          column: 61
        }
      },
      "173": {
        start: {
          line: 598,
          column: 21
        },
        end: {
          line: 598,
          column: 76
        }
      },
      "174": {
        start: {
          line: 598,
          column: 55
        },
        end: {
          line: 598,
          column: 72
        }
      },
      "175": {
        start: {
          line: 599,
          column: 22
        },
        end: {
          line: 599,
          column: 86
        }
      },
      "176": {
        start: {
          line: 599,
          column: 59
        },
        end: {
          line: 599,
          column: 82
        }
      },
      "177": {
        start: {
          line: 600,
          column: 22
        },
        end: {
          line: 600,
          column: 72
        }
      },
      "178": {
        start: {
          line: 600,
          column: 55
        },
        end: {
          line: 600,
          column: 68
        }
      },
      "179": {
        start: {
          line: 601,
          column: 22
        },
        end: {
          line: 601,
          column: 75
        }
      },
      "180": {
        start: {
          line: 602,
          column: 25
        },
        end: {
          line: 602,
          column: 53
        }
      },
      "181": {
        start: {
          line: 603,
          column: 27
        },
        end: {
          line: 603,
          column: 46
        }
      },
      "182": {
        start: {
          line: 604,
          column: 24
        },
        end: {
          line: 604,
          column: 32
        }
      },
      "183": {
        start: {
          line: 605,
          column: 8
        },
        end: {
          line: 607,
          column: 9
        }
      },
      "184": {
        start: {
          line: 606,
          column: 12
        },
        end: {
          line: 606,
          column: 62
        }
      },
      "185": {
        start: {
          line: 608,
          column: 8
        },
        end: {
          line: 608,
          column: 51
        }
      },
      "186": {
        start: {
          line: 619,
          column: 25
        },
        end: {
          line: 619,
          column: 27
        }
      },
      "187": {
        start: {
          line: 620,
          column: 8
        },
        end: {
          line: 621,
          column: 28
        }
      },
      "188": {
        start: {
          line: 621,
          column: 12
        },
        end: {
          line: 621,
          column: 28
        }
      },
      "189": {
        start: {
          line: 623,
          column: 27
        },
        end: {
          line: 623,
          column: 57
        }
      },
      "190": {
        start: {
          line: 624,
          column: 29
        },
        end: {
          line: 624,
          column: 76
        }
      },
      "191": {
        start: {
          line: 624,
          column: 68
        },
        end: {
          line: 624,
          column: 75
        }
      },
      "192": {
        start: {
          line: 625,
          column: 29
        },
        end: {
          line: 625,
          column: 98
        }
      },
      "193": {
        start: {
          line: 625,
          column: 63
        },
        end: {
          line: 625,
          column: 72
        }
      },
      "194": {
        start: {
          line: 626,
          column: 30
        },
        end: {
          line: 626,
          column: 73
        }
      },
      "195": {
        start: {
          line: 627,
          column: 27
        },
        end: {
          line: 630,
          column: 17
        }
      },
      "196": {
        start: {
          line: 631,
          column: 8
        },
        end: {
          line: 639,
          column: 9
        }
      },
      "197": {
        start: {
          line: 631,
          column: 21
        },
        end: {
          line: 631,
          column: 22
        }
      },
      "198": {
        start: {
          line: 632,
          column: 38
        },
        end: {
          line: 632,
          column: 90
        }
      },
      "199": {
        start: {
          line: 633,
          column: 31
        },
        end: {
          line: 633,
          column: 59
        }
      },
      "200": {
        start: {
          line: 634,
          column: 12
        },
        end: {
          line: 638,
          column: 15
        }
      },
      "201": {
        start: {
          line: 640,
          column: 8
        },
        end: {
          line: 640,
          column: 24
        }
      },
      "202": {
        start: {
          line: 651,
          column: 24
        },
        end: {
          line: 651,
          column: 63
        }
      },
      "203": {
        start: {
          line: 652,
          column: 29
        },
        end: {
          line: 652,
          column: 74
        }
      },
      "204": {
        start: {
          line: 653,
          column: 30
        },
        end: {
          line: 653,
          column: 55
        }
      },
      "205": {
        start: {
          line: 654,
          column: 23
        },
        end: {
          line: 654,
          column: 77
        }
      },
      "206": {
        start: {
          line: 655,
          column: 8
        },
        end: {
          line: 657,
          column: 87
        }
      },
      "207": {
        start: {
          line: 668,
          column: 26
        },
        end: {
          line: 668,
          column: 28
        }
      },
      "208": {
        start: {
          line: 669,
          column: 8
        },
        end: {
          line: 703,
          column: 9
        }
      },
      "209": {
        start: {
          line: 670,
          column: 31
        },
        end: {
          line: 671,
          column: 60
        }
      },
      "210": {
        start: {
          line: 671,
          column: 33
        },
        end: {
          line: 671,
          column: 59
        }
      },
      "211": {
        start: {
          line: 672,
          column: 12
        },
        end: {
          line: 673,
          column: 25
        }
      },
      "212": {
        start: {
          line: 673,
          column: 16
        },
        end: {
          line: 673,
          column: 25
        }
      },
      "213": {
        start: {
          line: 674,
          column: 27
        },
        end: {
          line: 674,
          column: 63
        }
      },
      "214": {
        start: {
          line: 674,
          column: 51
        },
        end: {
          line: 674,
          column: 62
        }
      },
      "215": {
        start: {
          line: 675,
          column: 28
        },
        end: {
          line: 675,
          column: 53
        }
      },
      "216": {
        start: {
          line: 676,
          column: 28
        },
        end: {
          line: 676,
          column: 85
        }
      },
      "217": {
        start: {
          line: 676,
          column: 56
        },
        end: {
          line: 676,
          column: 65
        }
      },
      "218": {
        start: {
          line: 677,
          column: 24
        },
        end: {
          line: 677,
          column: 43
        }
      },
      "219": {
        start: {
          line: 678,
          column: 24
        },
        end: {
          line: 678,
          column: 43
        }
      },
      "220": {
        start: {
          line: 680,
          column: 30
        },
        end: {
          line: 680,
          column: 76
        }
      },
      "221": {
        start: {
          line: 681,
          column: 31
        },
        end: {
          line: 681,
          column: 74
        }
      },
      "222": {
        start: {
          line: 682,
          column: 29
        },
        end: {
          line: 682,
          column: 92
        }
      },
      "223": {
        start: {
          line: 682,
          column: 60
        },
        end: {
          line: 682,
          column: 69
        }
      },
      "224": {
        start: {
          line: 683,
          column: 30
        },
        end: {
          line: 683,
          column: 95
        }
      },
      "225": {
        start: {
          line: 683,
          column: 62
        },
        end: {
          line: 683,
          column: 71
        }
      },
      "226": {
        start: {
          line: 684,
          column: 24
        },
        end: {
          line: 684,
          column: 32
        }
      },
      "227": {
        start: {
          line: 685,
          column: 12
        },
        end: {
          line: 687,
          column: 13
        }
      },
      "228": {
        start: {
          line: 686,
          column: 16
        },
        end: {
          line: 686,
          column: 61
        }
      },
      "229": {
        start: {
          line: 689,
          column: 25
        },
        end: {
          line: 689,
          column: 31
        }
      },
      "230": {
        start: {
          line: 690,
          column: 12
        },
        end: {
          line: 691,
          column: 35
        }
      },
      "231": {
        start: {
          line: 691,
          column: 16
        },
        end: {
          line: 691,
          column: 35
        }
      },
      "232": {
        start: {
          line: 692,
          column: 12
        },
        end: {
          line: 693,
          column: 36
        }
      },
      "233": {
        start: {
          line: 693,
          column: 16
        },
        end: {
          line: 693,
          column: 36
        }
      },
      "234": {
        start: {
          line: 694,
          column: 12
        },
        end: {
          line: 702,
          column: 15
        }
      },
      "235": {
        start: {
          line: 704,
          column: 8
        },
        end: {
          line: 704,
          column: 25
        }
      },
      "236": {
        start: {
          line: 714,
          column: 29
        },
        end: {
          line: 714,
          column: 90
        }
      },
      "237": {
        start: {
          line: 714,
          column: 52
        },
        end: {
          line: 714,
          column: 89
        }
      },
      "238": {
        start: {
          line: 715,
          column: 30
        },
        end: {
          line: 715,
          column: 32
        }
      },
      "239": {
        start: {
          line: 716,
          column: 34
        },
        end: {
          line: 716,
          column: 36
        }
      },
      "240": {
        start: {
          line: 717,
          column: 28
        },
        end: {
          line: 717,
          column: 30
        }
      },
      "241": {
        start: {
          line: 718,
          column: 8
        },
        end: {
          line: 726,
          column: 11
        }
      },
      "242": {
        start: {
          line: 720,
          column: 12
        },
        end: {
          line: 720,
          column: 87
        }
      },
      "243": {
        start: {
          line: 722,
          column: 34
        },
        end: {
          line: 722,
          column: 71
        }
      },
      "244": {
        start: {
          line: 723,
          column: 12
        },
        end: {
          line: 723,
          column: 91
        }
      },
      "245": {
        start: {
          line: 725,
          column: 12
        },
        end: {
          line: 725,
          column: 77
        }
      },
      "246": {
        start: {
          line: 728,
          column: 27
        },
        end: {
          line: 731,
          column: 58
        }
      },
      "247": {
        start: {
          line: 729,
          column: 36
        },
        end: {
          line: 729,
          column: 41
        }
      },
      "248": {
        start: {
          line: 731,
          column: 39
        },
        end: {
          line: 731,
          column: 56
        }
      },
      "249": {
        start: {
          line: 732,
          column: 8
        },
        end: {
          line: 737,
          column: 10
        }
      },
      "250": {
        start: {
          line: 747,
          column: 8
        },
        end: {
          line: 752,
          column: 10
        }
      },
      "251": {
        start: {
          line: 750,
          column: 42
        },
        end: {
          line: 750,
          column: 65
        }
      },
      "252": {
        start: {
          line: 763,
          column: 32
        },
        end: {
          line: 763,
          column: 34
        }
      },
      "253": {
        start: {
          line: 765,
          column: 30
        },
        end: {
          line: 765,
          column: 85
        }
      },
      "254": {
        start: {
          line: 765,
          column: 55
        },
        end: {
          line: 765,
          column: 84
        }
      },
      "255": {
        start: {
          line: 766,
          column: 8
        },
        end: {
          line: 768,
          column: 9
        }
      },
      "256": {
        start: {
          line: 767,
          column: 12
        },
        end: {
          line: 767,
          column: 116
        }
      },
      "257": {
        start: {
          line: 770,
          column: 27
        },
        end: {
          line: 770,
          column: 89
        }
      },
      "258": {
        start: {
          line: 770,
          column: 52
        },
        end: {
          line: 770,
          column: 88
        }
      },
      "259": {
        start: {
          line: 771,
          column: 8
        },
        end: {
          line: 773,
          column: 9
        }
      },
      "260": {
        start: {
          line: 772,
          column: 12
        },
        end: {
          line: 772,
          column: 127
        }
      },
      "261": {
        start: {
          line: 775,
          column: 29
        },
        end: {
          line: 775,
          column: 91
        }
      },
      "262": {
        start: {
          line: 775,
          column: 54
        },
        end: {
          line: 775,
          column: 90
        }
      },
      "263": {
        start: {
          line: 776,
          column: 8
        },
        end: {
          line: 778,
          column: 9
        }
      },
      "264": {
        start: {
          line: 777,
          column: 12
        },
        end: {
          line: 777,
          column: 113
        }
      },
      "265": {
        start: {
          line: 780,
          column: 8
        },
        end: {
          line: 782,
          column: 9
        }
      },
      "266": {
        start: {
          line: 781,
          column: 12
        },
        end: {
          line: 781,
          column: 123
        }
      },
      "267": {
        start: {
          line: 783,
          column: 8
        },
        end: {
          line: 783,
          column: 31
        }
      },
      "268": {
        start: {
          line: 793,
          column: 30
        },
        end: {
          line: 793,
          column: 85
        }
      },
      "269": {
        start: {
          line: 793,
          column: 55
        },
        end: {
          line: 793,
          column: 84
        }
      },
      "270": {
        start: {
          line: 794,
          column: 8
        },
        end: {
          line: 794,
          column: 59
        }
      },
      "271": {
        start: {
          line: 805,
          column: 8
        },
        end: {
          line: 805,
          column: 18
        }
      },
      "272": {
        start: {
          line: 816,
          column: 8
        },
        end: {
          line: 816,
          column: 18
        }
      },
      "273": {
        start: {
          line: 827,
          column: 8
        },
        end: {
          line: 827,
          column: 18
        }
      },
      "274": {
        start: {
          line: 838,
          column: 8
        },
        end: {
          line: 838,
          column: 19
        }
      },
      "275": {
        start: {
          line: 849,
          column: 8
        },
        end: {
          line: 849,
          column: 18
        }
      },
      "276": {
        start: {
          line: 860,
          column: 8
        },
        end: {
          line: 860,
          column: 18
        }
      },
      "277": {
        start: {
          line: 870,
          column: 8
        },
        end: {
          line: 871,
          column: 37
        }
      },
      "278": {
        start: {
          line: 871,
          column: 12
        },
        end: {
          line: 871,
          column: 37
        }
      },
      "279": {
        start: {
          line: 872,
          column: 8
        },
        end: {
          line: 873,
          column: 32
        }
      },
      "280": {
        start: {
          line: 873,
          column: 12
        },
        end: {
          line: 873,
          column: 32
        }
      },
      "281": {
        start: {
          line: 874,
          column: 8
        },
        end: {
          line: 875,
          column: 34
        }
      },
      "282": {
        start: {
          line: 875,
          column: 12
        },
        end: {
          line: 875,
          column: 34
        }
      },
      "283": {
        start: {
          line: 876,
          column: 8
        },
        end: {
          line: 877,
          column: 31
        }
      },
      "284": {
        start: {
          line: 877,
          column: 12
        },
        end: {
          line: 877,
          column: 31
        }
      },
      "285": {
        start: {
          line: 878,
          column: 8
        },
        end: {
          line: 878,
          column: 31
        }
      },
      "286": {
        start: {
          line: 887,
          column: 20
        },
        end: {
          line: 887,
          column: 21
        }
      },
      "287": {
        start: {
          line: 888,
          column: 8
        },
        end: {
          line: 890,
          column: 9
        }
      },
      "288": {
        start: {
          line: 889,
          column: 12
        },
        end: {
          line: 889,
          column: 36
        }
      },
      "289": {
        start: {
          line: 891,
          column: 8
        },
        end: {
          line: 891,
          column: 21
        }
      },
      "290": {
        start: {
          line: 898,
          column: 27
        },
        end: {
          line: 898,
          column: 101
        }
      },
      "291": {
        start: {
          line: 899,
          column: 8
        },
        end: {
          line: 902,
          column: 9
        }
      },
      "292": {
        start: {
          line: 900,
          column: 36
        },
        end: {
          line: 900,
          column: 90
        }
      },
      "293": {
        start: {
          line: 900,
          column: 60
        },
        end: {
          line: 900,
          column: 89
        }
      },
      "294": {
        start: {
          line: 901,
          column: 12
        },
        end: {
          line: 901,
          column: 58
        }
      },
      "295": {
        start: {
          line: 904,
          column: 8
        },
        end: {
          line: 904,
          column: 97
        }
      },
      "296": {
        start: {
          line: 904,
          column: 66
        },
        end: {
          line: 904,
          column: 95
        }
      },
      "297": {
        start: {
          line: 913,
          column: 8
        },
        end: {
          line: 919,
          column: 10
        }
      },
      "298": {
        start: {
          line: 922,
          column: 0
        },
        end: {
          line: 922,
          column: 56
        }
      },
      "299": {
        start: {
          line: 924,
          column: 0
        },
        end: {
          line: 924,
          column: 62
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 39,
            column: 5
          }
        },
        loc: {
          start: {
            line: 39,
            column: 24
          },
          end: {
            line: 69,
            column: 5
          }
        },
        line: 39
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 76,
            column: 4
          },
          end: {
            line: 76,
            column: 5
          }
        },
        loc: {
          start: {
            line: 76,
            column: 35
          },
          end: {
            line: 110,
            column: 5
          }
        },
        line: 76
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 80,
            column: 50
          },
          end: {
            line: 80,
            column: 51
          }
        },
        loc: {
          start: {
            line: 80,
            column: 62
          },
          end: {
            line: 87,
            column: 13
          }
        },
        line: 80
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 117,
            column: 4
          },
          end: {
            line: 117,
            column: 5
          }
        },
        loc: {
          start: {
            line: 117,
            column: 34
          },
          end: {
            line: 145,
            column: 5
          }
        },
        line: 117
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 153,
            column: 4
          },
          end: {
            line: 153,
            column: 5
          }
        },
        loc: {
          start: {
            line: 153,
            column: 37
          },
          end: {
            line: 167,
            column: 5
          }
        },
        line: 153
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 174,
            column: 4
          },
          end: {
            line: 174,
            column: 5
          }
        },
        loc: {
          start: {
            line: 174,
            column: 32
          },
          end: {
            line: 209,
            column: 5
          }
        },
        line: 174
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 178,
            column: 56
          },
          end: {
            line: 178,
            column: 57
          }
        },
        loc: {
          start: {
            line: 178,
            column: 65
          },
          end: {
            line: 178,
            column: 94
          }
        },
        line: 178
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 181,
            column: 49
          },
          end: {
            line: 181,
            column: 50
          }
        },
        loc: {
          start: {
            line: 181,
            column: 58
          },
          end: {
            line: 181,
            column: 95
          }
        },
        line: 181
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 184,
            column: 29
          },
          end: {
            line: 184,
            column: 30
          }
        },
        loc: {
          start: {
            line: 184,
            column: 38
          },
          end: {
            line: 186,
            column: 9
          }
        },
        line: 184
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 189,
            column: 29
          },
          end: {
            line: 189,
            column: 30
          }
        },
        loc: {
          start: {
            line: 189,
            column: 38
          },
          end: {
            line: 191,
            column: 9
          }
        },
        line: 189
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 218,
            column: 4
          },
          end: {
            line: 218,
            column: 5
          }
        },
        loc: {
          start: {
            line: 218,
            column: 91
          },
          end: {
            line: 250,
            column: 5
          }
        },
        line: 218
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 259,
            column: 4
          },
          end: {
            line: 259,
            column: 5
          }
        },
        loc: {
          start: {
            line: 259,
            column: 64
          },
          end: {
            line: 285,
            column: 5
          }
        },
        line: 259
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 261,
            column: 60
          },
          end: {
            line: 261,
            column: 61
          }
        },
        loc: {
          start: {
            line: 261,
            column: 69
          },
          end: {
            line: 261,
            column: 127
          }
        },
        line: 261
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 292,
            column: 4
          },
          end: {
            line: 292,
            column: 5
          }
        },
        loc: {
          start: {
            line: 292,
            column: 33
          },
          end: {
            line: 322,
            column: 5
          }
        },
        line: 292
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 327,
            column: 4
          },
          end: {
            line: 327,
            column: 5
          }
        },
        loc: {
          start: {
            line: 327,
            column: 28
          },
          end: {
            line: 342,
            column: 5
          }
        },
        line: 327
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 339,
            column: 25
          },
          end: {
            line: 339,
            column: 26
          }
        },
        loc: {
          start: {
            line: 339,
            column: 36
          },
          end: {
            line: 341,
            column: 9
          }
        },
        line: 339
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 349,
            column: 4
          },
          end: {
            line: 349,
            column: 5
          }
        },
        loc: {
          start: {
            line: 349,
            column: 35
          },
          end: {
            line: 409,
            column: 5
          }
        },
        line: 349
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 417,
            column: 4
          },
          end: {
            line: 417,
            column: 5
          }
        },
        loc: {
          start: {
            line: 417,
            column: 39
          },
          end: {
            line: 442,
            column: 5
          }
        },
        line: 417
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 434,
            column: 50
          },
          end: {
            line: 434,
            column: 51
          }
        },
        loc: {
          start: {
            line: 434,
            column: 55
          },
          end: {
            line: 434,
            column: 70
          }
        },
        line: 434
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 449,
            column: 4
          },
          end: {
            line: 449,
            column: 5
          }
        },
        loc: {
          start: {
            line: 449,
            column: 33
          },
          end: {
            line: 457,
            column: 5
          }
        },
        line: 449
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 466,
            column: 4
          },
          end: {
            line: 466,
            column: 5
          }
        },
        loc: {
          start: {
            line: 466,
            column: 38
          },
          end: {
            line: 469,
            column: 5
          }
        },
        line: 466
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 468,
            column: 30
          },
          end: {
            line: 468,
            column: 31
          }
        },
        loc: {
          start: {
            line: 468,
            column: 39
          },
          end: {
            line: 468,
            column: 67
          }
        },
        line: 468
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 477,
            column: 4
          },
          end: {
            line: 477,
            column: 5
          }
        },
        loc: {
          start: {
            line: 477,
            column: 40
          },
          end: {
            line: 526,
            column: 5
          }
        },
        line: 477
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 534,
            column: 4
          },
          end: {
            line: 534,
            column: 5
          }
        },
        loc: {
          start: {
            line: 534,
            column: 39
          },
          end: {
            line: 538,
            column: 5
          }
        },
        line: 534
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 535,
            column: 45
          },
          end: {
            line: 535,
            column: 46
          }
        },
        loc: {
          start: {
            line: 535,
            column: 54
          },
          end: {
            line: 535,
            column: 81
          }
        },
        line: 535
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 536,
            column: 53
          },
          end: {
            line: 536,
            column: 54
          }
        },
        loc: {
          start: {
            line: 536,
            column: 62
          },
          end: {
            line: 536,
            column: 118
          }
        },
        line: 536
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 546,
            column: 4
          },
          end: {
            line: 546,
            column: 5
          }
        },
        loc: {
          start: {
            line: 546,
            column: 41
          },
          end: {
            line: 556,
            column: 5
          }
        },
        line: 546
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 547,
            column: 46
          },
          end: {
            line: 547,
            column: 47
          }
        },
        loc: {
          start: {
            line: 547,
            column: 55
          },
          end: {
            line: 547,
            column: 114
          }
        },
        line: 547
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 550,
            column: 57
          },
          end: {
            line: 550,
            column: 58
          }
        },
        loc: {
          start: {
            line: 550,
            column: 75
          },
          end: {
            line: 554,
            column: 9
          }
        },
        line: 550
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 564,
            column: 4
          },
          end: {
            line: 564,
            column: 5
          }
        },
        loc: {
          start: {
            line: 564,
            column: 35
          },
          end: {
            line: 571,
            column: 5
          }
        },
        line: 564
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 567,
            column: 42
          },
          end: {
            line: 567,
            column: 43
          }
        },
        loc: {
          start: {
            line: 567,
            column: 58
          },
          end: {
            line: 567,
            column: 78
          }
        },
        line: 567
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 578,
            column: 4
          },
          end: {
            line: 578,
            column: 5
          }
        },
        loc: {
          start: {
            line: 578,
            column: 22
          },
          end: {
            line: 583,
            column: 5
          }
        },
        line: 578
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 591,
            column: 4
          },
          end: {
            line: 591,
            column: 5
          }
        },
        loc: {
          start: {
            line: 591,
            column: 31
          },
          end: {
            line: 609,
            column: 5
          }
        },
        line: 591
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 597,
            column: 39
          },
          end: {
            line: 597,
            column: 40
          }
        },
        loc: {
          start: {
            line: 597,
            column: 54
          },
          end: {
            line: 597,
            column: 61
          }
        },
        line: 597
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 598,
            column: 39
          },
          end: {
            line: 598,
            column: 40
          }
        },
        loc: {
          start: {
            line: 598,
            column: 55
          },
          end: {
            line: 598,
            column: 72
          }
        },
        line: 598
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 599,
            column: 40
          },
          end: {
            line: 599,
            column: 41
          }
        },
        loc: {
          start: {
            line: 599,
            column: 59
          },
          end: {
            line: 599,
            column: 82
          }
        },
        line: 599
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 600,
            column: 40
          },
          end: {
            line: 600,
            column: 41
          }
        },
        loc: {
          start: {
            line: 600,
            column: 55
          },
          end: {
            line: 600,
            column: 68
          }
        },
        line: 600
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 618,
            column: 4
          },
          end: {
            line: 618,
            column: 5
          }
        },
        loc: {
          start: {
            line: 618,
            column: 42
          },
          end: {
            line: 641,
            column: 5
          }
        },
        line: 618
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 624,
            column: 63
          },
          end: {
            line: 624,
            column: 64
          }
        },
        loc: {
          start: {
            line: 624,
            column: 68
          },
          end: {
            line: 624,
            column: 75
          }
        },
        line: 624
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 625,
            column: 49
          },
          end: {
            line: 625,
            column: 50
          }
        },
        loc: {
          start: {
            line: 625,
            column: 63
          },
          end: {
            line: 625,
            column: 72
          }
        },
        line: 625
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 650,
            column: 4
          },
          end: {
            line: 650,
            column: 5
          }
        },
        loc: {
          start: {
            line: 650,
            column: 44
          },
          end: {
            line: 658,
            column: 5
          }
        },
        line: 650
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 667,
            column: 4
          },
          end: {
            line: 667,
            column: 5
          }
        },
        loc: {
          start: {
            line: 667,
            column: 52
          },
          end: {
            line: 705,
            column: 5
          }
        },
        line: 667
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 671,
            column: 24
          },
          end: {
            line: 671,
            column: 25
          }
        },
        loc: {
          start: {
            line: 671,
            column: 33
          },
          end: {
            line: 671,
            column: 59
          }
        },
        line: 671
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 674,
            column: 42
          },
          end: {
            line: 674,
            column: 43
          }
        },
        loc: {
          start: {
            line: 674,
            column: 51
          },
          end: {
            line: 674,
            column: 62
          }
        },
        line: 674
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 676,
            column: 42
          },
          end: {
            line: 676,
            column: 43
          }
        },
        loc: {
          start: {
            line: 676,
            column: 56
          },
          end: {
            line: 676,
            column: 65
          }
        },
        line: 676
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 682,
            column: 46
          },
          end: {
            line: 682,
            column: 47
          }
        },
        loc: {
          start: {
            line: 682,
            column: 60
          },
          end: {
            line: 682,
            column: 69
          }
        },
        line: 682
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 683,
            column: 48
          },
          end: {
            line: 683,
            column: 49
          }
        },
        loc: {
          start: {
            line: 683,
            column: 62
          },
          end: {
            line: 683,
            column: 71
          }
        },
        line: 683
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 713,
            column: 4
          },
          end: {
            line: 713,
            column: 5
          }
        },
        loc: {
          start: {
            line: 713,
            column: 30
          },
          end: {
            line: 738,
            column: 5
          }
        },
        line: 713
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 714,
            column: 43
          },
          end: {
            line: 714,
            column: 44
          }
        },
        loc: {
          start: {
            line: 714,
            column: 52
          },
          end: {
            line: 714,
            column: 89
          }
        },
        line: 714
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 718,
            column: 29
          },
          end: {
            line: 718,
            column: 30
          }
        },
        loc: {
          start: {
            line: 718,
            column: 38
          },
          end: {
            line: 726,
            column: 9
          }
        },
        line: 718
      },
      "50": {
        name: "(anonymous_50)",
        decl: {
          start: {
            line: 729,
            column: 18
          },
          end: {
            line: 729,
            column: 19
          }
        },
        loc: {
          start: {
            line: 729,
            column: 36
          },
          end: {
            line: 729,
            column: 41
          }
        },
        line: 729
      },
      "51": {
        name: "(anonymous_51)",
        decl: {
          start: {
            line: 731,
            column: 17
          },
          end: {
            line: 731,
            column: 18
          }
        },
        loc: {
          start: {
            line: 731,
            column: 39
          },
          end: {
            line: 731,
            column: 56
          }
        },
        line: 731
      },
      "52": {
        name: "(anonymous_52)",
        decl: {
          start: {
            line: 746,
            column: 4
          },
          end: {
            line: 746,
            column: 5
          }
        },
        loc: {
          start: {
            line: 746,
            column: 39
          },
          end: {
            line: 753,
            column: 5
          }
        },
        line: 746
      },
      "53": {
        name: "(anonymous_53)",
        decl: {
          start: {
            line: 750,
            column: 37
          },
          end: {
            line: 750,
            column: 38
          }
        },
        loc: {
          start: {
            line: 750,
            column: 42
          },
          end: {
            line: 750,
            column: 65
          }
        },
        line: 750
      },
      "54": {
        name: "(anonymous_54)",
        decl: {
          start: {
            line: 762,
            column: 4
          },
          end: {
            line: 762,
            column: 5
          }
        },
        loc: {
          start: {
            line: 762,
            column: 58
          },
          end: {
            line: 784,
            column: 5
          }
        },
        line: 762
      },
      "55": {
        name: "(anonymous_55)",
        decl: {
          start: {
            line: 765,
            column: 48
          },
          end: {
            line: 765,
            column: 49
          }
        },
        loc: {
          start: {
            line: 765,
            column: 55
          },
          end: {
            line: 765,
            column: 84
          }
        },
        line: 765
      },
      "56": {
        name: "(anonymous_56)",
        decl: {
          start: {
            line: 770,
            column: 45
          },
          end: {
            line: 770,
            column: 46
          }
        },
        loc: {
          start: {
            line: 770,
            column: 52
          },
          end: {
            line: 770,
            column: 88
          }
        },
        line: 770
      },
      "57": {
        name: "(anonymous_57)",
        decl: {
          start: {
            line: 775,
            column: 47
          },
          end: {
            line: 775,
            column: 48
          }
        },
        loc: {
          start: {
            line: 775,
            column: 54
          },
          end: {
            line: 775,
            column: 90
          }
        },
        line: 775
      },
      "58": {
        name: "(anonymous_58)",
        decl: {
          start: {
            line: 792,
            column: 4
          },
          end: {
            line: 792,
            column: 5
          }
        },
        loc: {
          start: {
            line: 792,
            column: 48
          },
          end: {
            line: 795,
            column: 5
          }
        },
        line: 792
      },
      "59": {
        name: "(anonymous_59)",
        decl: {
          start: {
            line: 793,
            column: 48
          },
          end: {
            line: 793,
            column: 49
          }
        },
        loc: {
          start: {
            line: 793,
            column: 55
          },
          end: {
            line: 793,
            column: 84
          }
        },
        line: 793
      },
      "60": {
        name: "(anonymous_60)",
        decl: {
          start: {
            line: 802,
            column: 4
          },
          end: {
            line: 802,
            column: 5
          }
        },
        loc: {
          start: {
            line: 802,
            column: 39
          },
          end: {
            line: 806,
            column: 5
          }
        },
        line: 802
      },
      "61": {
        name: "(anonymous_61)",
        decl: {
          start: {
            line: 813,
            column: 4
          },
          end: {
            line: 813,
            column: 5
          }
        },
        loc: {
          start: {
            line: 813,
            column: 39
          },
          end: {
            line: 817,
            column: 5
          }
        },
        line: 813
      },
      "62": {
        name: "(anonymous_62)",
        decl: {
          start: {
            line: 824,
            column: 4
          },
          end: {
            line: 824,
            column: 5
          }
        },
        loc: {
          start: {
            line: 824,
            column: 39
          },
          end: {
            line: 828,
            column: 5
          }
        },
        line: 824
      },
      "63": {
        name: "(anonymous_63)",
        decl: {
          start: {
            line: 835,
            column: 4
          },
          end: {
            line: 835,
            column: 5
          }
        },
        loc: {
          start: {
            line: 835,
            column: 36
          },
          end: {
            line: 839,
            column: 5
          }
        },
        line: 835
      },
      "64": {
        name: "(anonymous_64)",
        decl: {
          start: {
            line: 846,
            column: 4
          },
          end: {
            line: 846,
            column: 5
          }
        },
        loc: {
          start: {
            line: 846,
            column: 42
          },
          end: {
            line: 850,
            column: 5
          }
        },
        line: 846
      },
      "65": {
        name: "(anonymous_65)",
        decl: {
          start: {
            line: 857,
            column: 4
          },
          end: {
            line: 857,
            column: 5
          }
        },
        loc: {
          start: {
            line: 857,
            column: 41
          },
          end: {
            line: 861,
            column: 5
          }
        },
        line: 857
      },
      "66": {
        name: "(anonymous_66)",
        decl: {
          start: {
            line: 869,
            column: 4
          },
          end: {
            line: 869,
            column: 5
          }
        },
        loc: {
          start: {
            line: 869,
            column: 31
          },
          end: {
            line: 879,
            column: 5
          }
        },
        line: 869
      },
      "67": {
        name: "(anonymous_67)",
        decl: {
          start: {
            line: 886,
            column: 4
          },
          end: {
            line: 886,
            column: 5
          }
        },
        loc: {
          start: {
            line: 886,
            column: 25
          },
          end: {
            line: 892,
            column: 5
          }
        },
        line: 886
      },
      "68": {
        name: "(anonymous_68)",
        decl: {
          start: {
            line: 897,
            column: 4
          },
          end: {
            line: 897,
            column: 5
          }
        },
        loc: {
          start: {
            line: 897,
            column: 21
          },
          end: {
            line: 905,
            column: 5
          }
        },
        line: 897
      },
      "69": {
        name: "(anonymous_69)",
        decl: {
          start: {
            line: 900,
            column: 51
          },
          end: {
            line: 900,
            column: 52
          }
        },
        loc: {
          start: {
            line: 900,
            column: 60
          },
          end: {
            line: 900,
            column: 89
          }
        },
        line: 900
      },
      "70": {
        name: "(anonymous_70)",
        decl: {
          start: {
            line: 904,
            column: 57
          },
          end: {
            line: 904,
            column: 58
          }
        },
        loc: {
          start: {
            line: 904,
            column: 66
          },
          end: {
            line: 904,
            column: 95
          }
        },
        line: 904
      },
      "71": {
        name: "(anonymous_71)",
        decl: {
          start: {
            line: 912,
            column: 4
          },
          end: {
            line: 912,
            column: 5
          }
        },
        loc: {
          start: {
            line: 912,
            column: 16
          },
          end: {
            line: 920,
            column: 5
          }
        },
        line: 912
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 121,
            column: 12
          },
          end: {
            line: 124,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 121,
            column: 12
          },
          end: {
            line: 124,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 121
      },
      "1": {
        loc: {
          start: {
            line: 158,
            column: 12
          },
          end: {
            line: 160,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 158,
            column: 12
          },
          end: {
            line: 160,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 158
      },
      "2": {
        loc: {
          start: {
            line: 185,
            column: 48
          },
          end: {
            line: 185,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 185,
            column: 48
          },
          end: {
            line: 185,
            column: 80
          }
        }, {
          start: {
            line: 185,
            column: 84
          },
          end: {
            line: 185,
            column: 85
          }
        }],
        line: 185
      },
      "3": {
        loc: {
          start: {
            line: 190,
            column: 45
          },
          end: {
            line: 190,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 190,
            column: 45
          },
          end: {
            line: 190,
            column: 74
          }
        }, {
          start: {
            line: 190,
            column: 78
          },
          end: {
            line: 190,
            column: 79
          }
        }],
        line: 190
      },
      "4": {
        loc: {
          start: {
            line: 193,
            column: 36
          },
          end: {
            line: 193,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 193,
            column: 54
          },
          end: {
            line: 193,
            column: 95
          }
        }, {
          start: {
            line: 193,
            column: 98
          },
          end: {
            line: 193,
            column: 99
          }
        }],
        line: 193
      },
      "5": {
        loc: {
          start: {
            line: 218,
            column: 44
          },
          end: {
            line: 218,
            column: 89
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 218,
            column: 58
          },
          end: {
            line: 218,
            column: 89
          }
        }],
        line: 218
      },
      "6": {
        loc: {
          start: {
            line: 222,
            column: 12
          },
          end: {
            line: 232,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 222,
            column: 12
          },
          end: {
            line: 232,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 222
      },
      "7": {
        loc: {
          start: {
            line: 261,
            column: 69
          },
          end: {
            line: 261,
            column: 127
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 261,
            column: 69
          },
          end: {
            line: 261,
            column: 97
          }
        }, {
          start: {
            line: 261,
            column: 101
          },
          end: {
            line: 261,
            column: 127
          }
        }],
        line: 261
      },
      "8": {
        loc: {
          start: {
            line: 430,
            column: 8
          },
          end: {
            line: 441,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 430,
            column: 8
          },
          end: {
            line: 441,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 430
      },
      "9": {
        loc: {
          start: {
            line: 450,
            column: 24
          },
          end: {
            line: 450,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 450,
            column: 24
          },
          end: {
            line: 450,
            column: 62
          }
        }, {
          start: {
            line: 450,
            column: 66
          },
          end: {
            line: 450,
            column: 68
          }
        }],
        line: 450
      },
      "10": {
        loc: {
          start: {
            line: 453,
            column: 8
          },
          end: {
            line: 455,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 453,
            column: 8
          },
          end: {
            line: 455,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 453
      },
      "11": {
        loc: {
          start: {
            line: 467,
            column: 24
          },
          end: {
            line: 467,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 467,
            column: 24
          },
          end: {
            line: 467,
            column: 52
          }
        }, {
          start: {
            line: 467,
            column: 56
          },
          end: {
            line: 467,
            column: 58
          }
        }],
        line: 467
      },
      "12": {
        loc: {
          start: {
            line: 481,
            column: 8
          },
          end: {
            line: 512,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 482,
            column: 12
          },
          end: {
            line: 487,
            column: 22
          }
        }, {
          start: {
            line: 488,
            column: 12
          },
          end: {
            line: 493,
            column: 22
          }
        }, {
          start: {
            line: 494,
            column: 12
          },
          end: {
            line: 499,
            column: 22
          }
        }, {
          start: {
            line: 500,
            column: 12
          },
          end: {
            line: 505,
            column: 22
          }
        }, {
          start: {
            line: 506,
            column: 12
          },
          end: {
            line: 511,
            column: 22
          }
        }],
        line: 481
      },
      "13": {
        loc: {
          start: {
            line: 483,
            column: 16
          },
          end: {
            line: 486,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 483,
            column: 16
          },
          end: {
            line: 486,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 483
      },
      "14": {
        loc: {
          start: {
            line: 489,
            column: 16
          },
          end: {
            line: 492,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 489,
            column: 16
          },
          end: {
            line: 492,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 489
      },
      "15": {
        loc: {
          start: {
            line: 495,
            column: 16
          },
          end: {
            line: 498,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 495,
            column: 16
          },
          end: {
            line: 498,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 495
      },
      "16": {
        loc: {
          start: {
            line: 501,
            column: 16
          },
          end: {
            line: 504,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 501,
            column: 16
          },
          end: {
            line: 504,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 501
      },
      "17": {
        loc: {
          start: {
            line: 507,
            column: 16
          },
          end: {
            line: 510,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 507,
            column: 16
          },
          end: {
            line: 510,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 507
      },
      "18": {
        loc: {
          start: {
            line: 513,
            column: 8
          },
          end: {
            line: 525,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 513,
            column: 8
          },
          end: {
            line: 525,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 513
      },
      "19": {
        loc: {
          start: {
            line: 537,
            column: 15
          },
          end: {
            line: 537,
            column: 100
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 537,
            column: 43
          },
          end: {
            line: 537,
            column: 96
          }
        }, {
          start: {
            line: 537,
            column: 99
          },
          end: {
            line: 537,
            column: 100
          }
        }],
        line: 537
      },
      "20": {
        loc: {
          start: {
            line: 547,
            column: 55
          },
          end: {
            line: 547,
            column: 114
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 547,
            column: 55
          },
          end: {
            line: 547,
            column: 82
          }
        }, {
          start: {
            line: 547,
            column: 86
          },
          end: {
            line: 547,
            column: 114
          }
        }],
        line: 547
      },
      "21": {
        loc: {
          start: {
            line: 548,
            column: 8
          },
          end: {
            line: 549,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 548,
            column: 8
          },
          end: {
            line: 549,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 548
      },
      "22": {
        loc: {
          start: {
            line: 565,
            column: 8
          },
          end: {
            line: 566,
            column: 23
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 565,
            column: 8
          },
          end: {
            line: 566,
            column: 23
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 565
      },
      "23": {
        loc: {
          start: {
            line: 592,
            column: 8
          },
          end: {
            line: 594,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 592,
            column: 8
          },
          end: {
            line: 594,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 592
      },
      "24": {
        loc: {
          start: {
            line: 605,
            column: 8
          },
          end: {
            line: 607,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 605,
            column: 8
          },
          end: {
            line: 607,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 605
      },
      "25": {
        loc: {
          start: {
            line: 606,
            column: 24
          },
          end: {
            line: 606,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 606,
            column: 36
          },
          end: {
            line: 606,
            column: 47
          }
        }, {
          start: {
            line: 606,
            column: 50
          },
          end: {
            line: 606,
            column: 61
          }
        }],
        line: 606
      },
      "26": {
        loc: {
          start: {
            line: 620,
            column: 8
          },
          end: {
            line: 621,
            column: 28
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 620,
            column: 8
          },
          end: {
            line: 621,
            column: 28
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 620
      },
      "27": {
        loc: {
          start: {
            line: 627,
            column: 27
          },
          end: {
            line: 630,
            column: 17
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 628,
            column: 12
          },
          end: {
            line: 629,
            column: 69
          }
        }, {
          start: {
            line: 630,
            column: 12
          },
          end: {
            line: 630,
            column: 17
          }
        }],
        line: 627
      },
      "28": {
        loc: {
          start: {
            line: 651,
            column: 24
          },
          end: {
            line: 651,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 651,
            column: 24
          },
          end: {
            line: 651,
            column: 46
          }
        }, {
          start: {
            line: 651,
            column: 50
          },
          end: {
            line: 651,
            column: 63
          }
        }],
        line: 651
      },
      "29": {
        loc: {
          start: {
            line: 652,
            column: 29
          },
          end: {
            line: 652,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 652,
            column: 29
          },
          end: {
            line: 652,
            column: 69
          }
        }, {
          start: {
            line: 652,
            column: 73
          },
          end: {
            line: 652,
            column: 74
          }
        }],
        line: 652
      },
      "30": {
        loc: {
          start: {
            line: 653,
            column: 30
          },
          end: {
            line: 653,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 653,
            column: 30
          },
          end: {
            line: 653,
            column: 50
          }
        }, {
          start: {
            line: 653,
            column: 54
          },
          end: {
            line: 653,
            column: 55
          }
        }],
        line: 653
      },
      "31": {
        loc: {
          start: {
            line: 672,
            column: 12
          },
          end: {
            line: 673,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 672,
            column: 12
          },
          end: {
            line: 673,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 672
      },
      "32": {
        loc: {
          start: {
            line: 685,
            column: 12
          },
          end: {
            line: 687,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 685,
            column: 12
          },
          end: {
            line: 687,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 685
      },
      "33": {
        loc: {
          start: {
            line: 686,
            column: 24
          },
          end: {
            line: 686,
            column: 60
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 686,
            column: 47
          },
          end: {
            line: 686,
            column: 51
          }
        }, {
          start: {
            line: 686,
            column: 54
          },
          end: {
            line: 686,
            column: 60
          }
        }],
        line: 686
      },
      "34": {
        loc: {
          start: {
            line: 690,
            column: 12
          },
          end: {
            line: 691,
            column: 35
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 690,
            column: 12
          },
          end: {
            line: 691,
            column: 35
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 690
      },
      "35": {
        loc: {
          start: {
            line: 690,
            column: 16
          },
          end: {
            line: 690,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 690,
            column: 16
          },
          end: {
            line: 690,
            column: 44
          }
        }, {
          start: {
            line: 690,
            column: 48
          },
          end: {
            line: 690,
            column: 60
          }
        }],
        line: 690
      },
      "36": {
        loc: {
          start: {
            line: 692,
            column: 12
          },
          end: {
            line: 693,
            column: 36
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 692,
            column: 12
          },
          end: {
            line: 693,
            column: 36
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 692
      },
      "37": {
        loc: {
          start: {
            line: 692,
            column: 16
          },
          end: {
            line: 692,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 692,
            column: 16
          },
          end: {
            line: 692,
            column: 44
          }
        }, {
          start: {
            line: 692,
            column: 48
          },
          end: {
            line: 692,
            column: 60
          }
        }],
        line: 692
      },
      "38": {
        loc: {
          start: {
            line: 720,
            column: 46
          },
          end: {
            line: 720,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 720,
            column: 46
          },
          end: {
            line: 720,
            column: 76
          }
        }, {
          start: {
            line: 720,
            column: 80
          },
          end: {
            line: 720,
            column: 81
          }
        }],
        line: 720
      },
      "39": {
        loc: {
          start: {
            line: 723,
            column: 48
          },
          end: {
            line: 723,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 723,
            column: 48
          },
          end: {
            line: 723,
            column: 80
          }
        }, {
          start: {
            line: 723,
            column: 84
          },
          end: {
            line: 723,
            column: 85
          }
        }],
        line: 723
      },
      "40": {
        loc: {
          start: {
            line: 725,
            column: 41
          },
          end: {
            line: 725,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 725,
            column: 41
          },
          end: {
            line: 725,
            column: 66
          }
        }, {
          start: {
            line: 725,
            column: 70
          },
          end: {
            line: 725,
            column: 71
          }
        }],
        line: 725
      },
      "41": {
        loc: {
          start: {
            line: 766,
            column: 8
          },
          end: {
            line: 768,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 766,
            column: 8
          },
          end: {
            line: 768,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 766
      },
      "42": {
        loc: {
          start: {
            line: 766,
            column: 12
          },
          end: {
            line: 766,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 766,
            column: 12
          },
          end: {
            line: 766,
            column: 25
          }
        }, {
          start: {
            line: 766,
            column: 29
          },
          end: {
            line: 766,
            column: 55
          }
        }],
        line: 766
      },
      "43": {
        loc: {
          start: {
            line: 771,
            column: 8
          },
          end: {
            line: 773,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 771,
            column: 8
          },
          end: {
            line: 773,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 771
      },
      "44": {
        loc: {
          start: {
            line: 771,
            column: 12
          },
          end: {
            line: 771,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 771,
            column: 12
          },
          end: {
            line: 771,
            column: 22
          }
        }, {
          start: {
            line: 771,
            column: 26
          },
          end: {
            line: 771,
            column: 49
          }
        }],
        line: 771
      },
      "45": {
        loc: {
          start: {
            line: 776,
            column: 8
          },
          end: {
            line: 778,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 776,
            column: 8
          },
          end: {
            line: 778,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 776
      },
      "46": {
        loc: {
          start: {
            line: 776,
            column: 12
          },
          end: {
            line: 776,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 776,
            column: 12
          },
          end: {
            line: 776,
            column: 24
          }
        }, {
          start: {
            line: 776,
            column: 28
          },
          end: {
            line: 776,
            column: 54
          }
        }],
        line: 776
      },
      "47": {
        loc: {
          start: {
            line: 780,
            column: 8
          },
          end: {
            line: 782,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 780,
            column: 8
          },
          end: {
            line: 782,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 780
      },
      "48": {
        loc: {
          start: {
            line: 794,
            column: 15
          },
          end: {
            line: 794,
            column: 58
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 794,
            column: 31
          },
          end: {
            line: 794,
            column: 52
          }
        }, {
          start: {
            line: 794,
            column: 55
          },
          end: {
            line: 794,
            column: 58
          }
        }],
        line: 794
      },
      "49": {
        loc: {
          start: {
            line: 870,
            column: 8
          },
          end: {
            line: 871,
            column: 37
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 870,
            column: 8
          },
          end: {
            line: 871,
            column: 37
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 870
      },
      "50": {
        loc: {
          start: {
            line: 872,
            column: 8
          },
          end: {
            line: 873,
            column: 32
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 872,
            column: 8
          },
          end: {
            line: 873,
            column: 32
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 872
      },
      "51": {
        loc: {
          start: {
            line: 874,
            column: 8
          },
          end: {
            line: 875,
            column: 34
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 874,
            column: 8
          },
          end: {
            line: 875,
            column: 34
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 874
      },
      "52": {
        loc: {
          start: {
            line: 876,
            column: 8
          },
          end: {
            line: 877,
            column: 31
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 876,
            column: 8
          },
          end: {
            line: 877,
            column: 31
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 876
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0,
      "261": 0,
      "262": 0,
      "263": 0,
      "264": 0,
      "265": 0,
      "266": 0,
      "267": 0,
      "268": 0,
      "269": 0,
      "270": 0,
      "271": 0,
      "272": 0,
      "273": 0,
      "274": 0,
      "275": 0,
      "276": 0,
      "277": 0,
      "278": 0,
      "279": 0,
      "280": 0,
      "281": 0,
      "282": 0,
      "283": 0,
      "284": 0,
      "285": 0,
      "286": 0,
      "287": 0,
      "288": 0,
      "289": 0,
      "290": 0,
      "291": 0,
      "292": 0,
      "293": 0,
      "294": 0,
      "295": 0,
      "296": 0,
      "297": 0,
      "298": 0,
      "299": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0, 0, 0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "76ceda6b32270f48e0b996124218bb43c4bccac6"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2frqskxxpc = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2frqskxxpc();
cov_2frqskxxpc().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2frqskxxpc().s[1]++;
exports.securityMetricsService = exports.SecurityMetricsService = void 0;
const events_1 =
/* istanbul ignore next */
(cov_2frqskxxpc().s[2]++, require("events"));
const logger_1 =
/* istanbul ignore next */
(cov_2frqskxxpc().s[3]++, require("@/core/logging/logger"));
const audit_service_1 =
/* istanbul ignore next */
(cov_2frqskxxpc().s[4]++, require("@/security/audit-service"));
/**
 * Security metrics and KPI tracking service
 * Provides comprehensive security performance measurement and analysis
 */
class SecurityMetricsService extends
/* istanbul ignore next */
(events_1.EventEmitter) {
  constructor(config) {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[0]++;
    cov_2frqskxxpc().s[5]++;
    super();
    /** Historical KPI data */
    /* istanbul ignore next */
    cov_2frqskxxpc().s[6]++;
    this.kpiHistory = new Map();
    /** Current KPI values */
    /* istanbul ignore next */
    cov_2frqskxxpc().s[7]++;
    this.currentKPIs = new Map();
    /** Metrics collection interval */
    /* istanbul ignore next */
    cov_2frqskxxpc().s[8]++;
    this.collectionInterval = null;
    /** Service start time */
    /* istanbul ignore next */
    cov_2frqskxxpc().s[9]++;
    this.serviceStartTime = new Date();
    /** Security events for analysis */
    /* istanbul ignore next */
    cov_2frqskxxpc().s[10]++;
    this.securityEvents = [];
    // Initialize configuration with defaults
    /* istanbul ignore next */
    cov_2frqskxxpc().s[11]++;
    this.config = {
      collectionInterval: 60000,
      // 1 minute
      retentionPeriod: 90,
      // 90 days
      alertThresholds: {
        securityScoreMin: 80,
        threatDetectionRateMax: 10,
        // 10% of events
        falsePositiveRateMax: 5,
        // 5% false positives
        responseTimeMax: 300,
        // 5 minutes
        uptimeMin: 99.5 // 99.5% uptime
      },
      trendAnalysisWindow: 24 // 24 hours
    };
    // Merge with provided config
    /* istanbul ignore next */
    cov_2frqskxxpc().s[12]++;
    this.config = {
      ...this.config,
      ...config
    };
    // Initialize KPI tracking
    /* istanbul ignore next */
    cov_2frqskxxpc().s[13]++;
    this.initializeKPITracking();
    /* istanbul ignore next */
    cov_2frqskxxpc().s[14]++;
    logger_1.logger.info('📊 Security Metrics Service initialized');
  }
  /**
   * Start metrics collection
   * Begins continuous security metrics collection
   *
   * @returns Promise<void>
   */
  async startMetricsCollection() {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[1]++;
    cov_2frqskxxpc().s[15]++;
    try {
      /* istanbul ignore next */
      cov_2frqskxxpc().s[16]++;
      logger_1.logger.info('🚀 Starting security metrics collection...');
      // Start metrics collection interval
      /* istanbul ignore next */
      cov_2frqskxxpc().s[17]++;
      this.collectionInterval = setInterval(async () => {
        /* istanbul ignore next */
        cov_2frqskxxpc().f[2]++;
        cov_2frqskxxpc().s[18]++;
        try {
          /* istanbul ignore next */
          cov_2frqskxxpc().s[19]++;
          await this.collectSecurityMetrics();
        } catch (error) {
          /* istanbul ignore next */
          cov_2frqskxxpc().s[20]++;
          logger_1.logger.error('❌ Metrics collection error:', error);
        }
      }, this.config.collectionInterval);
      // Perform initial metrics collection
      /* istanbul ignore next */
      cov_2frqskxxpc().s[21]++;
      await this.collectSecurityMetrics();
      // Create audit entry
      /* istanbul ignore next */
      cov_2frqskxxpc().s[22]++;
      await audit_service_1.auditService.createAuditEntry({
        auditId: `metrics_start_${Date.now()}`,
        eventType: 'SECURITY_METRICS_START',
        actor: 'SYSTEM',
        resource: 'SECURITY_METRICS_SERVICE',
        action: 'START_COLLECTION',
        result: 'SUCCESS',
        timestamp: new Date(),
        auditData: {
          config: this.config,
          startTime: this.serviceStartTime
        }
      });
      /* istanbul ignore next */
      cov_2frqskxxpc().s[23]++;
      logger_1.logger.info('✅ Security metrics collection started successfully');
    } catch (error) {
      /* istanbul ignore next */
      cov_2frqskxxpc().s[24]++;
      logger_1.logger.error('❌ Failed to start metrics collection:', error);
      /* istanbul ignore next */
      cov_2frqskxxpc().s[25]++;
      throw new Error('Security metrics collection startup failed');
    }
  }
  /**
   * Stop metrics collection
   * Stops continuous security metrics collection
   *
   * @returns Promise<void>
   */
  async stopMetricsCollection() {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[3]++;
    cov_2frqskxxpc().s[26]++;
    try {
      /* istanbul ignore next */
      cov_2frqskxxpc().s[27]++;
      logger_1.logger.info('🛑 Stopping security metrics collection...');
      // Stop collection interval
      /* istanbul ignore next */
      cov_2frqskxxpc().s[28]++;
      if (this.collectionInterval) {
        /* istanbul ignore next */
        cov_2frqskxxpc().b[0][0]++;
        cov_2frqskxxpc().s[29]++;
        clearInterval(this.collectionInterval);
        /* istanbul ignore next */
        cov_2frqskxxpc().s[30]++;
        this.collectionInterval = null;
      } else
      /* istanbul ignore next */
      {
        cov_2frqskxxpc().b[0][1]++;
      }
      // Create audit entry
      cov_2frqskxxpc().s[31]++;
      await audit_service_1.auditService.createAuditEntry({
        auditId: `metrics_stop_${Date.now()}`,
        eventType: 'SECURITY_METRICS_STOP',
        actor: 'SYSTEM',
        resource: 'SECURITY_METRICS_SERVICE',
        action: 'STOP_COLLECTION',
        result: 'SUCCESS',
        timestamp: new Date(),
        auditData: {
          uptime: Date.now() - this.serviceStartTime.getTime(),
          totalDataPoints: this.getTotalDataPoints()
        }
      });
      /* istanbul ignore next */
      cov_2frqskxxpc().s[32]++;
      logger_1.logger.info('✅ Security metrics collection stopped successfully');
    } catch (error) {
      /* istanbul ignore next */
      cov_2frqskxxpc().s[33]++;
      logger_1.logger.error('❌ Failed to stop metrics collection:', error);
      /* istanbul ignore next */
      cov_2frqskxxpc().s[34]++;
      throw new Error('Security metrics collection shutdown failed');
    }
  }
  /**
   * Record security event
   * Records security event for metrics analysis
   *
   * @param event - Security event to record
   * @returns Promise<void>
   */
  async recordSecurityEvent(event) {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[4]++;
    cov_2frqskxxpc().s[35]++;
    try {
      /* istanbul ignore next */
      cov_2frqskxxpc().s[36]++;
      // Add to events history
      this.securityEvents.push(event);
      // Maintain event history size (last 10,000 events)
      /* istanbul ignore next */
      cov_2frqskxxpc().s[37]++;
      if (this.securityEvents.length > 10000) {
        /* istanbul ignore next */
        cov_2frqskxxpc().b[1][0]++;
        cov_2frqskxxpc().s[38]++;
        this.securityEvents.shift();
      } else
      /* istanbul ignore next */
      {
        cov_2frqskxxpc().b[1][1]++;
      }
      // Update real-time metrics
      cov_2frqskxxpc().s[39]++;
      await this.updateRealTimeMetrics(event);
    } catch (error) {
      /* istanbul ignore next */
      cov_2frqskxxpc().s[40]++;
      logger_1.logger.error('❌ Failed to record security event:', error);
    }
  }
  /**
   * Get current security metrics
   * Returns current security KPIs and metrics
   *
   * @returns SecurityMetrics Current security metrics
   */
  getCurrentSecurityMetrics() {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[5]++;
    const now =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[41]++, new Date());
    const oneHourAgo =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[42]++, new Date(now.getTime() - 60 * 60 * 1000));
    // Filter recent events
    const recentEvents =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[43]++, this.securityEvents.filter(event => {
      /* istanbul ignore next */
      cov_2frqskxxpc().f[6]++;
      cov_2frqskxxpc().s[44]++;
      return event.timestamp >= oneHourAgo;
    }));
    // Calculate metrics
    const totalEvents =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[45]++, recentEvents.length);
    const threatEvents =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[46]++, recentEvents.filter(event => {
      /* istanbul ignore next */
      cov_2frqskxxpc().f[7]++;
      cov_2frqskxxpc().s[47]++;
      return event.eventType === 'threat_detected';
    }));
    // Events by severity
    const eventsBySeverity =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[48]++, {});
    /* istanbul ignore next */
    cov_2frqskxxpc().s[49]++;
    recentEvents.forEach(event => {
      /* istanbul ignore next */
      cov_2frqskxxpc().f[8]++;
      cov_2frqskxxpc().s[50]++;
      eventsBySeverity[event.severity] = (
      /* istanbul ignore next */
      (cov_2frqskxxpc().b[2][0]++, eventsBySeverity[event.severity]) ||
      /* istanbul ignore next */
      (cov_2frqskxxpc().b[2][1]++, 0)) + 1;
    });
    // Events by type
    const eventsByType =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[51]++, {});
    /* istanbul ignore next */
    cov_2frqskxxpc().s[52]++;
    recentEvents.forEach(event => {
      /* istanbul ignore next */
      cov_2frqskxxpc().f[9]++;
      cov_2frqskxxpc().s[53]++;
      eventsByType[event.eventType] = (
      /* istanbul ignore next */
      (cov_2frqskxxpc().b[3][0]++, eventsByType[event.eventType]) ||
      /* istanbul ignore next */
      (cov_2frqskxxpc().b[3][1]++, 0)) + 1;
    });
    // Calculate rates
    const threatDetectionRate =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[54]++, totalEvents > 0 ?
    /* istanbul ignore next */
    (cov_2frqskxxpc().b[4][0]++, threatEvents.length / totalEvents * 100) :
    /* istanbul ignore next */
    (cov_2frqskxxpc().b[4][1]++, 0));
    const falsePositiveRate =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[55]++, this.calculateFalsePositiveRate(recentEvents));
    const averageResponseTime =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[56]++, this.calculateAverageResponseTime(recentEvents));
    const securityScore =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[57]++, this.calculateSecurityScore(recentEvents));
    const monitoringUptime =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[58]++, this.calculateUptime());
    /* istanbul ignore next */
    cov_2frqskxxpc().s[59]++;
    return {
      totalEvents,
      eventsBySeverity,
      eventsByType,
      threatDetectionRate,
      falsePositiveRate,
      averageResponseTime,
      securityScore,
      monitoringUptime,
      lastUpdate: now
    };
  }
  /**
   * Get security trend analysis
   * Analyzes security trends over time
   *
   * @param kpiName - KPI to analyze
   * @param windowHours - Analysis window in hours
   * @returns Promise<SecurityTrendAnalysis> Trend analysis
   */
  async getSecurityTrendAnalysis(kpiName, windowHours =
  /* istanbul ignore next */
  (cov_2frqskxxpc().b[5][0]++, this.config.trendAnalysisWindow)) {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[10]++;
    cov_2frqskxxpc().s[60]++;
    try {
      const windowStart =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[61]++, new Date(Date.now() - windowHours * 60 * 60 * 1000));
      const dataPoints =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[62]++, this.getKPIHistory(kpiName, windowStart));
      /* istanbul ignore next */
      cov_2frqskxxpc().s[63]++;
      if (dataPoints.length < 3) {
        /* istanbul ignore next */
        cov_2frqskxxpc().b[6][0]++;
        cov_2frqskxxpc().s[64]++;
        return {
          kpiName,
          trend: 'stable',
          strength: 0,
          confidence: 0,
          dataPoints,
          forecast: [],
          summary: 'Insufficient data for trend analysis'
        };
      } else
      /* istanbul ignore next */
      {
        cov_2frqskxxpc().b[6][1]++;
      }
      // Calculate trend
      const trend =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[65]++, this.calculateTrend(dataPoints));
      const forecast =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[66]++, this.generateForecast(dataPoints, 6)); // 6 hour forecast
      /* istanbul ignore next */
      cov_2frqskxxpc().s[67]++;
      return {
        kpiName,
        trend: trend.direction,
        strength: trend.strength,
        confidence: trend.confidence,
        dataPoints,
        forecast,
        summary: this.generateTrendSummary(trend, dataPoints)
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2frqskxxpc().s[68]++;
      logger_1.logger.error('❌ Failed to analyze security trend:', error);
      /* istanbul ignore next */
      cov_2frqskxxpc().s[69]++;
      throw new Error('Security trend analysis failed');
    }
  }
  /**
   * Generate security performance report
   * Creates comprehensive security performance report
   *
   * @param startDate - Report start date
   * @param endDate - Report end date
   * @returns Promise<SecurityPerformanceReport> Performance report
   */
  async generateSecurityPerformanceReport(startDate, endDate) {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[11]++;
    cov_2frqskxxpc().s[70]++;
    try {
      const periodEvents =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[71]++, this.securityEvents.filter(event => {
        /* istanbul ignore next */
        cov_2frqskxxpc().f[12]++;
        cov_2frqskxxpc().s[72]++;
        return /* istanbul ignore next */(cov_2frqskxxpc().b[7][0]++, event.timestamp >= startDate) &&
        /* istanbul ignore next */
        (cov_2frqskxxpc().b[7][1]++, event.timestamp <= endDate);
      }));
      // Calculate KPI summaries
      const kpiSummaries =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[73]++, await this.calculateKPISummaries(startDate, endDate));
      // Analyze threats
      const threatAnalysis =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[74]++, this.analyzeThreatData(periodEvents));
      // Calculate system performance
      const systemPerformance =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[75]++, this.calculateSystemPerformance(periodEvents));
      // Generate recommendations
      const recommendations =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[76]++, this.generateRecommendations(kpiSummaries, threatAnalysis));
      // Calculate overall score
      const overallScore =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[77]++, this.calculateOverallSecurityScore(kpiSummaries));
      /* istanbul ignore next */
      cov_2frqskxxpc().s[78]++;
      return {
        period: {
          start: startDate,
          end: endDate
        },
        overallScore,
        kpiSummaries,
        threatAnalysis,
        systemPerformance,
        recommendations
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2frqskxxpc().s[79]++;
      logger_1.logger.error('❌ Failed to generate performance report:', error);
      /* istanbul ignore next */
      cov_2frqskxxpc().s[80]++;
      throw new Error('Security performance report generation failed');
    }
  }
  /**
   * Get compliance metrics
   * Returns current compliance metrics and status
   *
   * @returns Promise<ComplianceMetrics> Compliance metrics
   */
  async getComplianceMetrics() {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[13]++;
    cov_2frqskxxpc().s[81]++;
    try {
      // Calculate compliance scores
      const auditCompleteness =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[82]++, await this.calculateAuditCompleteness());
      const dataRetentionCompliance =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[83]++, this.calculateDataRetentionCompliance());
      const accessControlCompliance =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[84]++, this.calculateAccessControlCompliance());
      const encryptionCompliance =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[85]++, this.calculateEncryptionCompliance());
      const incidentResponseCompliance =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[86]++, this.calculateIncidentResponseCompliance());
      // Calculate overall compliance
      const overallCompliance =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[87]++, (auditCompleteness + dataRetentionCompliance + accessControlCompliance + encryptionCompliance + incidentResponseCompliance) / 5);
      // Identify violations
      const violations =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[88]++, await this.identifyComplianceViolations());
      /* istanbul ignore next */
      cov_2frqskxxpc().s[89]++;
      return {
        auditCompleteness,
        dataRetentionCompliance,
        accessControlCompliance,
        encryptionCompliance,
        incidentResponseCompliance,
        overallCompliance,
        violations
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2frqskxxpc().s[90]++;
      logger_1.logger.error('❌ Failed to get compliance metrics:', error);
      /* istanbul ignore next */
      cov_2frqskxxpc().s[91]++;
      throw new Error('Compliance metrics calculation failed');
    }
  }
  /**
   * Initialize KPI tracking
   * Sets up KPI tracking infrastructure
   */
  initializeKPITracking() {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[14]++;
    // Initialize KPI history maps
    const kpiNames =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[92]++, ['security_score', 'threat_detection_rate', 'false_positive_rate', 'average_response_time', 'system_uptime', 'event_volume', 'incident_count', 'compliance_score']);
    /* istanbul ignore next */
    cov_2frqskxxpc().s[93]++;
    kpiNames.forEach(kpiName => {
      /* istanbul ignore next */
      cov_2frqskxxpc().f[15]++;
      cov_2frqskxxpc().s[94]++;
      this.kpiHistory.set(kpiName, []);
    });
  }
  /**
   * Collect security metrics
   * Collects current security metrics and KPIs
   *
   * @returns Promise<void>
   */
  async collectSecurityMetrics() {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[16]++;
    cov_2frqskxxpc().s[95]++;
    try {
      const now =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[96]++, new Date());
      const metrics =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[97]++, this.getCurrentSecurityMetrics());
      // Create KPI data points
      const kpiDataPoints =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[98]++, [{
        timestamp: now,
        kpiName: 'security_score',
        value: metrics.securityScore,
        unit: 'score',
        category: 'performance',
        metadata: {
          totalEvents: metrics.totalEvents
        }
      }, {
        timestamp: now,
        kpiName: 'threat_detection_rate',
        value: metrics.threatDetectionRate,
        unit: 'percentage',
        category: 'threat',
        metadata: {
          totalEvents: metrics.totalEvents
        }
      }, {
        timestamp: now,
        kpiName: 'false_positive_rate',
        value: metrics.falsePositiveRate,
        unit: 'percentage',
        category: 'performance',
        metadata: {}
      }, {
        timestamp: now,
        kpiName: 'average_response_time',
        value: metrics.averageResponseTime,
        unit: 'seconds',
        category: 'performance',
        metadata: {}
      }, {
        timestamp: now,
        kpiName: 'system_uptime',
        value: metrics.monitoringUptime,
        unit: 'percentage',
        category: 'system',
        metadata: {}
      }]);
      // Store KPI data points
      /* istanbul ignore next */
      cov_2frqskxxpc().s[99]++;
      for (const dataPoint of kpiDataPoints) {
        /* istanbul ignore next */
        cov_2frqskxxpc().s[100]++;
        this.storeKPIDataPoint(dataPoint);
        /* istanbul ignore next */
        cov_2frqskxxpc().s[101]++;
        this.currentKPIs.set(dataPoint.kpiName, dataPoint);
        // Check alert thresholds
        /* istanbul ignore next */
        cov_2frqskxxpc().s[102]++;
        await this.checkKPIThresholds(dataPoint);
      }
      // Clean up old data
      /* istanbul ignore next */
      cov_2frqskxxpc().s[103]++;
      this.cleanupOldData();
    } catch (error) {
      /* istanbul ignore next */
      cov_2frqskxxpc().s[104]++;
      logger_1.logger.error('❌ Failed to collect security metrics:', error);
    }
  }
  /**
   * Update real-time metrics
   * Updates metrics based on new security event
   *
   * @param event - Security event
   * @returns Promise<void>
   */
  async updateRealTimeMetrics(event) {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[17]++;
    // Update event volume metric
    const eventVolumeKPI =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[105]++, {
      timestamp: new Date(),
      kpiName: 'event_volume',
      value: this.securityEvents.length,
      unit: 'count',
      category: 'system',
      metadata: {
        eventType: event.eventType,
        severity: event.severity
      }
    });
    /* istanbul ignore next */
    cov_2frqskxxpc().s[106]++;
    this.storeKPIDataPoint(eventVolumeKPI);
    /* istanbul ignore next */
    cov_2frqskxxpc().s[107]++;
    this.currentKPIs.set('event_volume', eventVolumeKPI);
    // Update incident count for high-severity events
    /* istanbul ignore next */
    cov_2frqskxxpc().s[108]++;
    if (event.severity >= 7) {
      /* istanbul ignore next */
      cov_2frqskxxpc().b[8][0]++;
      const incidentCountKPI =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[109]++, {
        timestamp: new Date(),
        kpiName: 'incident_count',
        value: this.securityEvents.filter(e => {
          /* istanbul ignore next */
          cov_2frqskxxpc().f[18]++;
          cov_2frqskxxpc().s[110]++;
          return e.severity >= 7;
        }).length,
        unit: 'count',
        category: 'threat',
        metadata: {
          severity: event.severity
        }
      });
      /* istanbul ignore next */
      cov_2frqskxxpc().s[111]++;
      this.storeKPIDataPoint(incidentCountKPI);
      /* istanbul ignore next */
      cov_2frqskxxpc().s[112]++;
      this.currentKPIs.set('incident_count', incidentCountKPI);
    } else
    /* istanbul ignore next */
    {
      cov_2frqskxxpc().b[8][1]++;
    }
  }
  /**
   * Store KPI data point
   * Stores KPI data point in history
   *
   * @param dataPoint - KPI data point to store
   */
  storeKPIDataPoint(dataPoint) {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[19]++;
    const history =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[113]++,
    /* istanbul ignore next */
    (cov_2frqskxxpc().b[9][0]++, this.kpiHistory.get(dataPoint.kpiName)) ||
    /* istanbul ignore next */
    (cov_2frqskxxpc().b[9][1]++, []));
    /* istanbul ignore next */
    cov_2frqskxxpc().s[114]++;
    history.push(dataPoint);
    // Maintain history size (keep last 10,000 points per KPI)
    /* istanbul ignore next */
    cov_2frqskxxpc().s[115]++;
    if (history.length > 10000) {
      /* istanbul ignore next */
      cov_2frqskxxpc().b[10][0]++;
      cov_2frqskxxpc().s[116]++;
      history.shift();
    } else
    /* istanbul ignore next */
    {
      cov_2frqskxxpc().b[10][1]++;
    }
    cov_2frqskxxpc().s[117]++;
    this.kpiHistory.set(dataPoint.kpiName, history);
  }
  /**
   * Get KPI history
   * Retrieves KPI history for specified period
   *
   * @param kpiName - KPI name
   * @param startDate - Start date
   * @returns SecurityKPIDataPoint[] KPI history
   */
  getKPIHistory(kpiName, startDate) {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[20]++;
    const history =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[118]++,
    /* istanbul ignore next */
    (cov_2frqskxxpc().b[11][0]++, this.kpiHistory.get(kpiName)) ||
    /* istanbul ignore next */
    (cov_2frqskxxpc().b[11][1]++, []));
    /* istanbul ignore next */
    cov_2frqskxxpc().s[119]++;
    return history.filter(point => {
      /* istanbul ignore next */
      cov_2frqskxxpc().f[21]++;
      cov_2frqskxxpc().s[120]++;
      return point.timestamp >= startDate;
    });
  }
  /**
   * Check KPI thresholds
   * Checks KPI against alert thresholds
   *
   * @param dataPoint - KPI data point
   * @returns Promise<void>
   */
  async checkKPIThresholds(dataPoint) {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[22]++;
    const thresholds =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[121]++, this.config.alertThresholds);
    let alertTriggered =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[122]++, false);
    let alertMessage =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[123]++, '');
    /* istanbul ignore next */
    cov_2frqskxxpc().s[124]++;
    switch (dataPoint.kpiName) {
      case 'security_score':
        /* istanbul ignore next */
        cov_2frqskxxpc().b[12][0]++;
        cov_2frqskxxpc().s[125]++;
        if (dataPoint.value < thresholds.securityScoreMin) {
          /* istanbul ignore next */
          cov_2frqskxxpc().b[13][0]++;
          cov_2frqskxxpc().s[126]++;
          alertTriggered = true;
          /* istanbul ignore next */
          cov_2frqskxxpc().s[127]++;
          alertMessage = `Security score (${dataPoint.value}) below threshold (${thresholds.securityScoreMin})`;
        } else
        /* istanbul ignore next */
        {
          cov_2frqskxxpc().b[13][1]++;
        }
        cov_2frqskxxpc().s[128]++;
        break;
      case 'threat_detection_rate':
        /* istanbul ignore next */
        cov_2frqskxxpc().b[12][1]++;
        cov_2frqskxxpc().s[129]++;
        if (dataPoint.value > thresholds.threatDetectionRateMax) {
          /* istanbul ignore next */
          cov_2frqskxxpc().b[14][0]++;
          cov_2frqskxxpc().s[130]++;
          alertTriggered = true;
          /* istanbul ignore next */
          cov_2frqskxxpc().s[131]++;
          alertMessage = `Threat detection rate (${dataPoint.value}%) above threshold (${thresholds.threatDetectionRateMax}%)`;
        } else
        /* istanbul ignore next */
        {
          cov_2frqskxxpc().b[14][1]++;
        }
        cov_2frqskxxpc().s[132]++;
        break;
      case 'false_positive_rate':
        /* istanbul ignore next */
        cov_2frqskxxpc().b[12][2]++;
        cov_2frqskxxpc().s[133]++;
        if (dataPoint.value > thresholds.falsePositiveRateMax) {
          /* istanbul ignore next */
          cov_2frqskxxpc().b[15][0]++;
          cov_2frqskxxpc().s[134]++;
          alertTriggered = true;
          /* istanbul ignore next */
          cov_2frqskxxpc().s[135]++;
          alertMessage = `False positive rate (${dataPoint.value}%) above threshold (${thresholds.falsePositiveRateMax}%)`;
        } else
        /* istanbul ignore next */
        {
          cov_2frqskxxpc().b[15][1]++;
        }
        cov_2frqskxxpc().s[136]++;
        break;
      case 'average_response_time':
        /* istanbul ignore next */
        cov_2frqskxxpc().b[12][3]++;
        cov_2frqskxxpc().s[137]++;
        if (dataPoint.value > thresholds.responseTimeMax) {
          /* istanbul ignore next */
          cov_2frqskxxpc().b[16][0]++;
          cov_2frqskxxpc().s[138]++;
          alertTriggered = true;
          /* istanbul ignore next */
          cov_2frqskxxpc().s[139]++;
          alertMessage = `Average response time (${dataPoint.value}s) above threshold (${thresholds.responseTimeMax}s)`;
        } else
        /* istanbul ignore next */
        {
          cov_2frqskxxpc().b[16][1]++;
        }
        cov_2frqskxxpc().s[140]++;
        break;
      case 'system_uptime':
        /* istanbul ignore next */
        cov_2frqskxxpc().b[12][4]++;
        cov_2frqskxxpc().s[141]++;
        if (dataPoint.value < thresholds.uptimeMin) {
          /* istanbul ignore next */
          cov_2frqskxxpc().b[17][0]++;
          cov_2frqskxxpc().s[142]++;
          alertTriggered = true;
          /* istanbul ignore next */
          cov_2frqskxxpc().s[143]++;
          alertMessage = `System uptime (${dataPoint.value}%) below threshold (${thresholds.uptimeMin}%)`;
        } else
        /* istanbul ignore next */
        {
          cov_2frqskxxpc().b[17][1]++;
        }
        cov_2frqskxxpc().s[144]++;
        break;
    }
    /* istanbul ignore next */
    cov_2frqskxxpc().s[145]++;
    if (alertTriggered) {
      /* istanbul ignore next */
      cov_2frqskxxpc().b[18][0]++;
      cov_2frqskxxpc().s[146]++;
      logger_1.logger.warn('📊 KPI THRESHOLD ALERT', {
        kpiName: dataPoint.kpiName,
        value: dataPoint.value,
        message: alertMessage
      });
      /* istanbul ignore next */
      cov_2frqskxxpc().s[147]++;
      this.emit('kpiAlert', {
        kpiName: dataPoint.kpiName,
        value: dataPoint.value,
        message: alertMessage,
        timestamp: dataPoint.timestamp
      });
    } else
    /* istanbul ignore next */
    {
      cov_2frqskxxpc().b[18][1]++;
    }
  }
  /**
   * Calculate false positive rate
   * Calculates false positive rate from events
   *
   * @param events - Security events
   * @returns number False positive rate
   */
  calculateFalsePositiveRate(events) {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[23]++;
    const resolvedEvents =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[148]++, events.filter(event => {
      /* istanbul ignore next */
      cov_2frqskxxpc().f[24]++;
      cov_2frqskxxpc().s[149]++;
      return event.status === 'resolved';
    }));
    const falsePositives =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[150]++, resolvedEvents.filter(event => {
      /* istanbul ignore next */
      cov_2frqskxxpc().f[25]++;
      cov_2frqskxxpc().s[151]++;
      return event.responseActions.includes('Mark as false positive');
    }));
    /* istanbul ignore next */
    cov_2frqskxxpc().s[152]++;
    return resolvedEvents.length > 0 ?
    /* istanbul ignore next */
    (cov_2frqskxxpc().b[19][0]++, falsePositives.length / resolvedEvents.length * 100) :
    /* istanbul ignore next */
    (cov_2frqskxxpc().b[19][1]++, 0);
  }
  /**
   * Calculate average response time
   * Calculates average response time for events
   *
   * @param events - Security events
   * @returns number Average response time in seconds
   */
  calculateAverageResponseTime(events) {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[26]++;
    const respondedEvents =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[153]++, events.filter(event => {
      /* istanbul ignore next */
      cov_2frqskxxpc().f[27]++;
      cov_2frqskxxpc().s[154]++;
      return /* istanbul ignore next */(cov_2frqskxxpc().b[20][0]++, event.status === 'resolved') ||
      /* istanbul ignore next */
      (cov_2frqskxxpc().b[20][1]++, event.status === 'contained');
    }));
    /* istanbul ignore next */
    cov_2frqskxxpc().s[155]++;
    if (respondedEvents.length === 0) {
      /* istanbul ignore next */
      cov_2frqskxxpc().b[21][0]++;
      cov_2frqskxxpc().s[156]++;
      return 0;
    } else
    /* istanbul ignore next */
    {
      cov_2frqskxxpc().b[21][1]++;
    }
    const totalResponseTime =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[157]++, respondedEvents.reduce((total, event) => {
      /* istanbul ignore next */
      cov_2frqskxxpc().f[28]++;
      cov_2frqskxxpc().s[158]++;
      // Simulate response time calculation
      // In real implementation, this would track actual response times
      return total + event.severity * 30; // Rough estimate based on severity
    }, 0));
    /* istanbul ignore next */
    cov_2frqskxxpc().s[159]++;
    return totalResponseTime / respondedEvents.length;
  }
  /**
   * Calculate security score
   * Calculates overall security score based on events
   *
   * @param events - Security events
   * @returns number Security score (0-100)
   */
  calculateSecurityScore(events) {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[29]++;
    cov_2frqskxxpc().s[160]++;
    if (events.length === 0) {
      /* istanbul ignore next */
      cov_2frqskxxpc().b[22][0]++;
      cov_2frqskxxpc().s[161]++;
      return 100;
    } else
    /* istanbul ignore next */
    {
      cov_2frqskxxpc().b[22][1]++;
    }
    const severitySum =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[162]++, events.reduce((sum, event) => {
      /* istanbul ignore next */
      cov_2frqskxxpc().f[30]++;
      cov_2frqskxxpc().s[163]++;
      return sum + event.severity;
    }, 0));
    const averageSeverity =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[164]++, severitySum / events.length);
    // Convert average severity to security score (inverse relationship)
    /* istanbul ignore next */
    cov_2frqskxxpc().s[165]++;
    return Math.max(0, 100 - averageSeverity * 10);
  }
  /**
   * Calculate uptime
   * Calculates system uptime percentage
   *
   * @returns number Uptime percentage
   */
  calculateUptime() {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[31]++;
    const totalTime =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[166]++, Date.now() - this.serviceStartTime.getTime());
    // In real implementation, this would track actual downtime
    // For now, assume 99.9% uptime
    /* istanbul ignore next */
    cov_2frqskxxpc().s[167]++;
    return 99.9;
  }
  /**
   * Calculate trend
   * Calculates trend direction and strength from data points
   *
   * @param dataPoints - KPI data points
   * @returns Trend analysis
   */
  calculateTrend(dataPoints) {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[32]++;
    cov_2frqskxxpc().s[168]++;
    if (dataPoints.length < 2) {
      /* istanbul ignore next */
      cov_2frqskxxpc().b[23][0]++;
      cov_2frqskxxpc().s[169]++;
      return {
        direction: 'stable',
        strength: 0,
        confidence: 0
      };
    } else
    /* istanbul ignore next */
    {
      cov_2frqskxxpc().b[23][1]++;
    }
    // Simple linear regression for trend
    const n =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[170]++, dataPoints.length);
    const sumX =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[171]++, dataPoints.reduce((sum, _, i) => {
      /* istanbul ignore next */
      cov_2frqskxxpc().f[33]++;
      cov_2frqskxxpc().s[172]++;
      return sum + i;
    }, 0));
    const sumY =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[173]++, dataPoints.reduce((sum, point) => {
      /* istanbul ignore next */
      cov_2frqskxxpc().f[34]++;
      cov_2frqskxxpc().s[174]++;
      return sum + point.value;
    }, 0));
    const sumXY =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[175]++, dataPoints.reduce((sum, point, i) => {
      /* istanbul ignore next */
      cov_2frqskxxpc().f[35]++;
      cov_2frqskxxpc().s[176]++;
      return sum + i * point.value;
    }, 0));
    const sumXX =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[177]++, dataPoints.reduce((sum, _, i) => {
      /* istanbul ignore next */
      cov_2frqskxxpc().f[36]++;
      cov_2frqskxxpc().s[178]++;
      return sum + i * i;
    }, 0));
    const slope =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[179]++, (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX));
    const strength =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[180]++, Math.abs(slope) / (sumY / n)); // Normalized slope
    const confidence =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[181]++, Math.min(n / 10, 1)); // Confidence based on data points
    let direction =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[182]++, 'stable');
    /* istanbul ignore next */
    cov_2frqskxxpc().s[183]++;
    if (Math.abs(slope) > 0.1) {
      /* istanbul ignore next */
      cov_2frqskxxpc().b[24][0]++;
      cov_2frqskxxpc().s[184]++;
      direction = slope > 0 ?
      /* istanbul ignore next */
      (cov_2frqskxxpc().b[25][0]++, 'improving') :
      /* istanbul ignore next */
      (cov_2frqskxxpc().b[25][1]++, 'degrading');
    } else
    /* istanbul ignore next */
    {
      cov_2frqskxxpc().b[24][1]++;
    }
    cov_2frqskxxpc().s[185]++;
    return {
      direction,
      strength,
      confidence
    };
  }
  /**
   * Generate forecast
   * Generates forecast values based on historical data
   *
   * @param dataPoints - Historical data points
   * @param periods - Number of periods to forecast
   * @returns Forecast data
   */
  generateForecast(dataPoints, periods) {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[37]++;
    const forecast =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[186]++, []);
    /* istanbul ignore next */
    cov_2frqskxxpc().s[187]++;
    if (dataPoints.length < 3) {
      /* istanbul ignore next */
      cov_2frqskxxpc().b[26][0]++;
      cov_2frqskxxpc().s[188]++;
      return forecast;
    } else
    /* istanbul ignore next */
    {
      cov_2frqskxxpc().b[26][1]++;
    }
    // Simple moving average forecast
    const windowSize =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[189]++, Math.min(5, dataPoints.length));
    const recentValues =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[190]++, dataPoints.slice(-windowSize).map(p => {
      /* istanbul ignore next */
      cov_2frqskxxpc().f[38]++;
      cov_2frqskxxpc().s[191]++;
      return p.value;
    }));
    const averageValue =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[192]++, recentValues.reduce((sum, val) => {
      /* istanbul ignore next */
      cov_2frqskxxpc().f[39]++;
      cov_2frqskxxpc().s[193]++;
      return sum + val;
    }, 0) / recentValues.length);
    const lastTimestamp =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[194]++, dataPoints[dataPoints.length - 1].timestamp);
    const intervalMs =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[195]++, dataPoints.length > 1 ?
    /* istanbul ignore next */
    (cov_2frqskxxpc().b[27][0]++, dataPoints[dataPoints.length - 1].timestamp.getTime() - dataPoints[dataPoints.length - 2].timestamp.getTime()) :
    /* istanbul ignore next */
    (cov_2frqskxxpc().b[27][1]++, 60000)); // Default 1 minute
    /* istanbul ignore next */
    cov_2frqskxxpc().s[196]++;
    for (let i =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[197]++, 1); i <= periods; i++) {
      const forecastTimestamp =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[198]++, new Date(lastTimestamp.getTime() + i * intervalMs));
      const confidence =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[199]++, Math.max(0.1, 1 - i * 0.1)); // Decreasing confidence
      /* istanbul ignore next */
      cov_2frqskxxpc().s[200]++;
      forecast.push({
        timestamp: forecastTimestamp,
        value: averageValue,
        confidence
      });
    }
    /* istanbul ignore next */
    cov_2frqskxxpc().s[201]++;
    return forecast;
  }
  /**
   * Generate trend summary
   * Creates human-readable trend summary
   *
   * @param trend - Trend analysis
   * @param dataPoints - Data points
   * @returns string Trend summary
   */
  generateTrendSummary(trend, dataPoints) {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[40]++;
    const kpiName =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[202]++,
    /* istanbul ignore next */
    (cov_2frqskxxpc().b[28][0]++, dataPoints[0]?.kpiName) ||
    /* istanbul ignore next */
    (cov_2frqskxxpc().b[28][1]++, 'Unknown KPI'));
    const currentValue =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[203]++,
    /* istanbul ignore next */
    (cov_2frqskxxpc().b[29][0]++, dataPoints[dataPoints.length - 1]?.value) ||
    /* istanbul ignore next */
    (cov_2frqskxxpc().b[29][1]++, 0));
    const previousValue =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[204]++,
    /* istanbul ignore next */
    (cov_2frqskxxpc().b[30][0]++, dataPoints[0]?.value) ||
    /* istanbul ignore next */
    (cov_2frqskxxpc().b[30][1]++, 0));
    const change =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[205]++, (currentValue - previousValue) / previousValue * 100);
    /* istanbul ignore next */
    cov_2frqskxxpc().s[206]++;
    return `${kpiName} is ${trend.direction} with ${Math.round(trend.strength * 100)}% strength ` + `and ${Math.round(trend.confidence * 100)}% confidence. ` + `Current value: ${currentValue.toFixed(2)}, Change: ${change.toFixed(1)}%`;
  }
  /**
   * Calculate KPI summaries
   * Calculates KPI summaries for report period
   *
   * @param startDate - Start date
   * @param endDate - End date
   * @returns Promise<Array> KPI summaries
   */
  async calculateKPISummaries(startDate, endDate) {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[41]++;
    const summaries =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[207]++, []);
    /* istanbul ignore next */
    cov_2frqskxxpc().s[208]++;
    for (const [kpiName] of this.kpiHistory) {
      const periodData =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[209]++, this.getKPIHistory(kpiName, startDate).filter(point => {
        /* istanbul ignore next */
        cov_2frqskxxpc().f[42]++;
        cov_2frqskxxpc().s[210]++;
        return point.timestamp <= endDate;
      }));
      /* istanbul ignore next */
      cov_2frqskxxpc().s[211]++;
      if (periodData.length === 0) {
        /* istanbul ignore next */
        cov_2frqskxxpc().b[31][0]++;
        cov_2frqskxxpc().s[212]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_2frqskxxpc().b[31][1]++;
      }
      const values =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[213]++, periodData.map(point => {
        /* istanbul ignore next */
        cov_2frqskxxpc().f[43]++;
        cov_2frqskxxpc().s[214]++;
        return point.value;
      }));
      const current =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[215]++, values[values.length - 1]);
      const average =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[216]++, values.reduce((sum, val) => {
        /* istanbul ignore next */
        cov_2frqskxxpc().f[44]++;
        cov_2frqskxxpc().s[217]++;
        return sum + val;
      }, 0) / values.length);
      const min =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[218]++, Math.min(...values));
      const max =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[219]++, Math.max(...values));
      // Determine trend
      const firstHalf =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[220]++, values.slice(0, Math.floor(values.length / 2)));
      const secondHalf =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[221]++, values.slice(Math.floor(values.length / 2)));
      const firstAvg =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[222]++, firstHalf.reduce((sum, val) => {
        /* istanbul ignore next */
        cov_2frqskxxpc().f[45]++;
        cov_2frqskxxpc().s[223]++;
        return sum + val;
      }, 0) / firstHalf.length);
      const secondAvg =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[224]++, secondHalf.reduce((sum, val) => {
        /* istanbul ignore next */
        cov_2frqskxxpc().f[46]++;
        cov_2frqskxxpc().s[225]++;
        return sum + val;
      }, 0) / secondHalf.length);
      let trend =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[226]++, 'stable');
      /* istanbul ignore next */
      cov_2frqskxxpc().s[227]++;
      if (Math.abs(secondAvg - firstAvg) > average * 0.05) {
        /* istanbul ignore next */
        cov_2frqskxxpc().b[32][0]++;
        cov_2frqskxxpc().s[228]++;
        trend = secondAvg > firstAvg ?
        /* istanbul ignore next */
        (cov_2frqskxxpc().b[33][0]++, 'up') :
        /* istanbul ignore next */
        (cov_2frqskxxpc().b[33][1]++, 'down');
      } else
      /* istanbul ignore next */
      {
        cov_2frqskxxpc().b[32][1]++;
      }
      // Determine status
      let status =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[229]++, 'good');
      /* istanbul ignore next */
      cov_2frqskxxpc().s[230]++;
      if (
      /* istanbul ignore next */
      (cov_2frqskxxpc().b[35][0]++, kpiName === 'security_score') &&
      /* istanbul ignore next */
      (cov_2frqskxxpc().b[35][1]++, current < 80)) {
        /* istanbul ignore next */
        cov_2frqskxxpc().b[34][0]++;
        cov_2frqskxxpc().s[231]++;
        status = 'warning';
      } else
      /* istanbul ignore next */
      {
        cov_2frqskxxpc().b[34][1]++;
      }
      cov_2frqskxxpc().s[232]++;
      if (
      /* istanbul ignore next */
      (cov_2frqskxxpc().b[37][0]++, kpiName === 'security_score') &&
      /* istanbul ignore next */
      (cov_2frqskxxpc().b[37][1]++, current < 60)) {
        /* istanbul ignore next */
        cov_2frqskxxpc().b[36][0]++;
        cov_2frqskxxpc().s[233]++;
        status = 'critical';
      } else
      /* istanbul ignore next */
      {
        cov_2frqskxxpc().b[36][1]++;
      }
      cov_2frqskxxpc().s[234]++;
      summaries.push({
        name: kpiName,
        current,
        average,
        min,
        max,
        trend,
        status
      });
    }
    /* istanbul ignore next */
    cov_2frqskxxpc().s[235]++;
    return summaries;
  }
  /**
   * Analyze threat data
   * Analyzes threat data for report
   *
   * @param events - Security events
   * @returns Threat analysis
   */
  analyzeThreatData(events) {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[47]++;
    const threatEvents =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[236]++, events.filter(event => {
      /* istanbul ignore next */
      cov_2frqskxxpc().f[48]++;
      cov_2frqskxxpc().s[237]++;
      return event.eventType === 'threat_detected';
    }));
    const threatsByType =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[238]++, {});
    const threatsBySeverity =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[239]++, {});
    const sourceCount =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[240]++, {});
    /* istanbul ignore next */
    cov_2frqskxxpc().s[241]++;
    threatEvents.forEach(event => {
      /* istanbul ignore next */
      cov_2frqskxxpc().f[49]++;
      cov_2frqskxxpc().s[242]++;
      // Count by type
      threatsByType[event.eventType] = (
      /* istanbul ignore next */
      (cov_2frqskxxpc().b[38][0]++, threatsByType[event.eventType]) ||
      /* istanbul ignore next */
      (cov_2frqskxxpc().b[38][1]++, 0)) + 1;
      // Count by severity
      const severityRange =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[243]++, this.getSeverityRange(event.severity));
      /* istanbul ignore next */
      cov_2frqskxxpc().s[244]++;
      threatsBySeverity[severityRange] = (
      /* istanbul ignore next */
      (cov_2frqskxxpc().b[39][0]++, threatsBySeverity[severityRange]) ||
      /* istanbul ignore next */
      (cov_2frqskxxpc().b[39][1]++, 0)) + 1;
      // Count by source
      /* istanbul ignore next */
      cov_2frqskxxpc().s[245]++;
      sourceCount[event.source] = (
      /* istanbul ignore next */
      (cov_2frqskxxpc().b[40][0]++, sourceCount[event.source]) ||
      /* istanbul ignore next */
      (cov_2frqskxxpc().b[40][1]++, 0)) + 1;
    });
    // Get top sources
    const topSources =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[246]++, Object.entries(sourceCount).sort(([, a], [, b]) => {
      /* istanbul ignore next */
      cov_2frqskxxpc().f[50]++;
      cov_2frqskxxpc().s[247]++;
      return b - a;
    }).slice(0, 10).map(([source, count]) => {
      /* istanbul ignore next */
      cov_2frqskxxpc().f[51]++;
      cov_2frqskxxpc().s[248]++;
      return {
        source,
        count
      };
    }));
    /* istanbul ignore next */
    cov_2frqskxxpc().s[249]++;
    return {
      totalThreats: threatEvents.length,
      threatsByType,
      threatsBySeverity,
      topSources
    };
  }
  /**
   * Calculate system performance
   * Calculates system performance metrics
   *
   * @param events - Security events
   * @returns System performance metrics
   */
  calculateSystemPerformance(events) {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[52]++;
    cov_2frqskxxpc().s[250]++;
    return {
      uptime: this.calculateUptime(),
      averageResponseTime: this.calculateAverageResponseTime(events),
      errorRate: events.filter(e => {
        /* istanbul ignore next */
        cov_2frqskxxpc().f[53]++;
        cov_2frqskxxpc().s[251]++;
        return e.status === 'resolved';
      }).length / Math.max(events.length, 1) * 100,
      throughput: events.length / 24 // Events per hour (assuming 24-hour period)
    };
  }
  /**
   * Generate recommendations
   * Generates security recommendations based on analysis
   *
   * @param kpiSummaries - KPI summaries
   * @param threatAnalysis - Threat analysis
   * @returns string[] Recommendations
   */
  generateRecommendations(kpiSummaries, threatAnalysis) {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[54]++;
    const recommendations =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[252]++, []);
    // Check security score
    const securityScore =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[253]++, kpiSummaries.find(kpi => {
      /* istanbul ignore next */
      cov_2frqskxxpc().f[55]++;
      cov_2frqskxxpc().s[254]++;
      return kpi.name === 'security_score';
    }));
    /* istanbul ignore next */
    cov_2frqskxxpc().s[255]++;
    if (
    /* istanbul ignore next */
    (cov_2frqskxxpc().b[42][0]++, securityScore) &&
    /* istanbul ignore next */
    (cov_2frqskxxpc().b[42][1]++, securityScore.current < 80)) {
      /* istanbul ignore next */
      cov_2frqskxxpc().b[41][0]++;
      cov_2frqskxxpc().s[256]++;
      recommendations.push('Security score is below optimal level. Review and strengthen security controls.');
    } else
    /* istanbul ignore next */
    {
      cov_2frqskxxpc().b[41][1]++;
    }
    // Check threat detection rate
    const threatRate =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[257]++, kpiSummaries.find(kpi => {
      /* istanbul ignore next */
      cov_2frqskxxpc().f[56]++;
      cov_2frqskxxpc().s[258]++;
      return kpi.name === 'threat_detection_rate';
    }));
    /* istanbul ignore next */
    cov_2frqskxxpc().s[259]++;
    if (
    /* istanbul ignore next */
    (cov_2frqskxxpc().b[44][0]++, threatRate) &&
    /* istanbul ignore next */
    (cov_2frqskxxpc().b[44][1]++, threatRate.current > 10)) {
      /* istanbul ignore next */
      cov_2frqskxxpc().b[43][0]++;
      cov_2frqskxxpc().s[260]++;
      recommendations.push('High threat detection rate indicates increased security risks. Investigate threat sources.');
    } else
    /* istanbul ignore next */
    {
      cov_2frqskxxpc().b[43][1]++;
    }
    // Check response time
    const responseTime =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[261]++, kpiSummaries.find(kpi => {
      /* istanbul ignore next */
      cov_2frqskxxpc().f[57]++;
      cov_2frqskxxpc().s[262]++;
      return kpi.name === 'average_response_time';
    }));
    /* istanbul ignore next */
    cov_2frqskxxpc().s[263]++;
    if (
    /* istanbul ignore next */
    (cov_2frqskxxpc().b[46][0]++, responseTime) &&
    /* istanbul ignore next */
    (cov_2frqskxxpc().b[46][1]++, responseTime.current > 300)) {
      /* istanbul ignore next */
      cov_2frqskxxpc().b[45][0]++;
      cov_2frqskxxpc().s[264]++;
      recommendations.push('Average response time is high. Consider automating more response procedures.');
    } else
    /* istanbul ignore next */
    {
      cov_2frqskxxpc().b[45][1]++;
    }
    // Check threat patterns
    cov_2frqskxxpc().s[265]++;
    if (threatAnalysis.totalThreats > 100) {
      /* istanbul ignore next */
      cov_2frqskxxpc().b[47][0]++;
      cov_2frqskxxpc().s[266]++;
      recommendations.push('High volume of threats detected. Consider implementing additional preventive measures.');
    } else
    /* istanbul ignore next */
    {
      cov_2frqskxxpc().b[47][1]++;
    }
    cov_2frqskxxpc().s[267]++;
    return recommendations;
  }
  /**
   * Calculate overall security score
   * Calculates overall security score from KPI summaries
   *
   * @param kpiSummaries - KPI summaries
   * @returns number Overall security score
   */
  calculateOverallSecurityScore(kpiSummaries) {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[58]++;
    const securityScore =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[268]++, kpiSummaries.find(kpi => {
      /* istanbul ignore next */
      cov_2frqskxxpc().f[59]++;
      cov_2frqskxxpc().s[269]++;
      return kpi.name === 'security_score';
    }));
    /* istanbul ignore next */
    cov_2frqskxxpc().s[270]++;
    return securityScore ?
    /* istanbul ignore next */
    (cov_2frqskxxpc().b[48][0]++, securityScore.current) :
    /* istanbul ignore next */
    (cov_2frqskxxpc().b[48][1]++, 100);
  }
  /**
   * Calculate audit completeness
   * Calculates audit trail completeness
   *
   * @returns Promise<number> Audit completeness percentage
   */
  async calculateAuditCompleteness() {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[60]++;
    cov_2frqskxxpc().s[271]++;
    // Implementation would check audit trail completeness
    // For now, return a placeholder value
    return 95;
  }
  /**
   * Calculate data retention compliance
   * Calculates data retention compliance
   *
   * @returns number Data retention compliance percentage
   */
  calculateDataRetentionCompliance() {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[61]++;
    cov_2frqskxxpc().s[272]++;
    // Implementation would check data retention policies
    // For now, return a placeholder value
    return 98;
  }
  /**
   * Calculate access control compliance
   * Calculates access control compliance
   *
   * @returns number Access control compliance percentage
   */
  calculateAccessControlCompliance() {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[62]++;
    cov_2frqskxxpc().s[273]++;
    // Implementation would check access control policies
    // For now, return a placeholder value
    return 92;
  }
  /**
   * Calculate encryption compliance
   * Calculates encryption compliance
   *
   * @returns number Encryption compliance percentage
   */
  calculateEncryptionCompliance() {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[63]++;
    cov_2frqskxxpc().s[274]++;
    // Implementation would check encryption usage
    // For now, return a placeholder value
    return 100;
  }
  /**
   * Calculate incident response compliance
   * Calculates incident response compliance
   *
   * @returns number Incident response compliance percentage
   */
  calculateIncidentResponseCompliance() {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[64]++;
    cov_2frqskxxpc().s[275]++;
    // Implementation would check incident response procedures
    // For now, return a placeholder value
    return 88;
  }
  /**
   * Identify compliance violations
   * Identifies compliance violations
   *
   * @returns Promise<Array> Compliance violations
   */
  async identifyComplianceViolations() {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[65]++;
    cov_2frqskxxpc().s[276]++;
    // Implementation would identify actual violations
    // For now, return empty array
    return [];
  }
  /**
   * Get severity range
   * Maps numeric severity to range
   *
   * @param severity - Numeric severity
   * @returns string Severity range
   */
  getSeverityRange(severity) {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[66]++;
    cov_2frqskxxpc().s[277]++;
    if (severity >= 9) {
      /* istanbul ignore next */
      cov_2frqskxxpc().b[49][0]++;
      cov_2frqskxxpc().s[278]++;
      return 'Critical (9-10)';
    } else
    /* istanbul ignore next */
    {
      cov_2frqskxxpc().b[49][1]++;
    }
    cov_2frqskxxpc().s[279]++;
    if (severity >= 7) {
      /* istanbul ignore next */
      cov_2frqskxxpc().b[50][0]++;
      cov_2frqskxxpc().s[280]++;
      return 'High (7-8)';
    } else
    /* istanbul ignore next */
    {
      cov_2frqskxxpc().b[50][1]++;
    }
    cov_2frqskxxpc().s[281]++;
    if (severity >= 5) {
      /* istanbul ignore next */
      cov_2frqskxxpc().b[51][0]++;
      cov_2frqskxxpc().s[282]++;
      return 'Medium (5-6)';
    } else
    /* istanbul ignore next */
    {
      cov_2frqskxxpc().b[51][1]++;
    }
    cov_2frqskxxpc().s[283]++;
    if (severity >= 3) {
      /* istanbul ignore next */
      cov_2frqskxxpc().b[52][0]++;
      cov_2frqskxxpc().s[284]++;
      return 'Low (3-4)';
    } else
    /* istanbul ignore next */
    {
      cov_2frqskxxpc().b[52][1]++;
    }
    cov_2frqskxxpc().s[285]++;
    return 'Minimal (1-2)';
  }
  /**
   * Get total data points
   * Returns total number of data points across all KPIs
   *
   * @returns number Total data points
   */
  getTotalDataPoints() {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[67]++;
    let total =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[286]++, 0);
    /* istanbul ignore next */
    cov_2frqskxxpc().s[287]++;
    for (const [, history] of this.kpiHistory) {
      /* istanbul ignore next */
      cov_2frqskxxpc().s[288]++;
      total += history.length;
    }
    /* istanbul ignore next */
    cov_2frqskxxpc().s[289]++;
    return total;
  }
  /**
   * Clean up old data
   * Removes old data points beyond retention period
   */
  cleanupOldData() {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[68]++;
    const cutoffDate =
    /* istanbul ignore next */
    (cov_2frqskxxpc().s[290]++, new Date(Date.now() - this.config.retentionPeriod * 24 * 60 * 60 * 1000));
    /* istanbul ignore next */
    cov_2frqskxxpc().s[291]++;
    for (const [kpiName, history] of this.kpiHistory) {
      const filteredHistory =
      /* istanbul ignore next */
      (cov_2frqskxxpc().s[292]++, history.filter(point => {
        /* istanbul ignore next */
        cov_2frqskxxpc().f[69]++;
        cov_2frqskxxpc().s[293]++;
        return point.timestamp >= cutoffDate;
      }));
      /* istanbul ignore next */
      cov_2frqskxxpc().s[294]++;
      this.kpiHistory.set(kpiName, filteredHistory);
    }
    // Clean up security events
    /* istanbul ignore next */
    cov_2frqskxxpc().s[295]++;
    this.securityEvents = this.securityEvents.filter(event => {
      /* istanbul ignore next */
      cov_2frqskxxpc().f[70]++;
      cov_2frqskxxpc().s[296]++;
      return event.timestamp >= cutoffDate;
    });
  }
  /**
   * Get service status
   * Returns current service status
   *
   * @returns Service status information
   */
  getStatus() {
    /* istanbul ignore next */
    cov_2frqskxxpc().f[71]++;
    cov_2frqskxxpc().s[297]++;
    return {
      isCollecting: this.collectionInterval !== null,
      totalKPIs: this.kpiHistory.size,
      totalDataPoints: this.getTotalDataPoints(),
      uptime: Date.now() - this.serviceStartTime.getTime(),
      timestamp: Date.now()
    };
  }
}
/* istanbul ignore next */
cov_2frqskxxpc().s[298]++;
exports.SecurityMetricsService = SecurityMetricsService;
// Create and export singleton instance
/* istanbul ignore next */
cov_2frqskxxpc().s[299]++;
exports.securityMetricsService = new SecurityMetricsService();
// =============================================================================
// SECURITY METRICS NOTES
// =============================================================================
// 1. Comprehensive KPI tracking for all security aspects
// 2. Real-time metrics collection and analysis
// 3. Trend analysis and forecasting capabilities
// 4. Automated alerting on threshold violations
// 5. Compliance metrics and violation tracking
// 6. Performance reporting and recommendations
// 7. Historical data retention and cleanup
// 8. Integration with security monitoring and audit services
// =============================================================================