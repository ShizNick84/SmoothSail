{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\risk\\__tests__\\position-sizing-engine.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\risk\\__tests__\\position-sizing-engine.test.ts"],"sourcesContent":["/**\r\n * Unit Tests for Position Sizing Engine\r\n * \r\n * Comprehensive test suite covering position sizing calculations,\r\n * risk adjustments, correlation analysis, and validation logic.\r\n * \r\n * Requirements: 17.1, 17.3, 17.6 - Unit tests for risk management functions\r\n */\r\n\r\nimport { PositionSizingEngine } from '../position-sizing-engine';\r\nimport { \r\n  RiskParameters, \r\n  PositionSizeRequest, \r\n  Position,\r\n  PositionSizeResult \r\n} from '../types';\r\n\r\ndescribe('PositionSizingEngine', () => {\r\n  let engine: PositionSizingEngine;\r\n  let defaultRiskParameters: RiskParameters;\r\n  let baseRequest: PositionSizeRequest;\r\n\r\n  beforeEach(() => {\r\n    defaultRiskParameters = {\r\n      maxRiskPerTrade: 2.5, // 2.5% max risk per trade\r\n      minRiskRewardRatio: 1.3, // Minimum 1.3:1 RR ratio\r\n      maxDrawdownThreshold: 15, // 15% max drawdown\r\n      maxCorrelationExposure: 0.7, // 70% max correlation\r\n      volatilityAdjustmentFactor: 0.3 // 30% volatility adjustment\r\n    };\r\n\r\n    engine = new PositionSizingEngine(defaultRiskParameters);\r\n\r\n    baseRequest = {\r\n      symbol: 'BTC',\r\n      accountBalance: 10000, // $10,000 account\r\n      entryPrice: 42000, // $42,000 BTC\r\n      stopLossPrice: 41000, // $1,000 stop loss\r\n      takeProfitPrice: 44300, // $2,300 take profit (2.3:1 RR)\r\n      confidence: 75, // 75% confidence\r\n      volatility: 0.2, // 20% volatility\r\n      existingPositions: []\r\n    };\r\n  });\r\n\r\n  describe('calculatePositionSize', () => {\r\n    it('should calculate correct base position size using 2.5% risk rule', async () => {\r\n      const result = await engine.calculatePositionSize(baseRequest);\r\n      \r\n      // Risk amount = $10,000 * 2.5% = $250\r\n      // Price risk = $42,000 - $41,000 = $1,000\r\n      // Base position size = $250 / $1,000 = 0.25 BTC\r\n      expect(result.riskAmount).toBeCloseTo(250, 0);\r\n      expect(result.riskPercentage).toBeCloseTo(2.38, 1); // Adjusted due to position size capping\r\n      expect(result.approved).toBe(true);\r\n      expect(result.positionSize).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('should apply confidence adjustment correctly', async () => {\r\n      // Test high confidence (should increase position size)\r\n      const highConfidenceRequest = { ...baseRequest, confidence: 90 };\r\n      const highConfidenceResult = await engine.calculatePositionSize(highConfidenceRequest);\r\n\r\n      // Test low confidence (should decrease position size)\r\n      const lowConfidenceRequest = { ...baseRequest, confidence: 40 };\r\n      const lowConfidenceResult = await engine.calculatePositionSize(lowConfidenceRequest);\r\n\r\n      expect(highConfidenceResult.positionSize).toBeGreaterThan(lowConfidenceResult.positionSize);\r\n      expect(highConfidenceResult.confidenceAdjustedSize).toBeGreaterThan(lowConfidenceResult.confidenceAdjustedSize);\r\n    });\r\n\r\n    it('should apply volatility adjustment correctly', async () => {\r\n      // Test high volatility (should decrease position size)\r\n      const highVolatilityRequest = { ...baseRequest, volatility: 0.5 };\r\n      const highVolatilityResult = await engine.calculatePositionSize(highVolatilityRequest);\r\n\r\n      // Test low volatility (should maintain or increase position size)\r\n      const lowVolatilityRequest = { ...baseRequest, volatility: 0.1 };\r\n      const lowVolatilityResult = await engine.calculatePositionSize(lowVolatilityRequest);\r\n\r\n      expect(lowVolatilityResult.positionSize).toBeGreaterThan(highVolatilityResult.positionSize);\r\n    });\r\n\r\n    it('should calculate risk-reward ratio correctly', async () => {\r\n      const result = await engine.calculatePositionSize(baseRequest);\r\n      \r\n      // Risk = $42,000 - $41,000 = $1,000\r\n      // Reward = $44,300 - $42,000 = $2,300\r\n      // RR = $2,300 / $1,000 = 2.3\r\n      expect(result.riskRewardRatio).toBeCloseTo(2.3, 1);\r\n    });\r\n\r\n    it('should reject trades with insufficient risk-reward ratio', async () => {\r\n      const poorRRRequest = {\r\n        ...baseRequest,\r\n        takeProfitPrice: 42500 // Only $500 profit vs $1,000 risk = 0.5:1 RR\r\n      };\r\n\r\n      const result = await engine.calculatePositionSize(poorRRRequest);\r\n      \r\n      expect(result.approved).toBe(false);\r\n      expect(result.rejectionReasons.some(reason => reason.includes('Risk-reward ratio'))).toBe(true);\r\n      expect(result.positionSize).toBe(0);\r\n    });\r\n\r\n    it('should reject trades with excessive risk percentage', async () => {\r\n      const highRiskRequest = {\r\n        ...baseRequest,\r\n        stopLossPrice: 35000 // $7,000 stop loss = 17.5% risk\r\n      };\r\n\r\n      const result = await engine.calculatePositionSize(highRiskRequest);\r\n      \r\n      expect(result.approved).toBe(false);\r\n      expect(result.rejectionReasons.some(reason => reason.includes('Risk percentage'))).toBe(true);\r\n    });\r\n\r\n    it('should handle correlation adjustment with existing positions', async () => {\r\n      const existingPositions: Position[] = [\r\n        {\r\n          id: 'pos1',\r\n          symbol: 'ETH',\r\n          size: 5,\r\n          entryPrice: 2500,\r\n          currentPrice: 2600,\r\n          type: 'LONG',\r\n          unrealizedPnL: 500,\r\n          stopLoss: 2400,\r\n          takeProfit: 2800,\r\n          timestamp: new Date()\r\n        }\r\n      ];\r\n\r\n      const requestWithPositions = {\r\n        ...baseRequest,\r\n        existingPositions\r\n      };\r\n\r\n      const result = await engine.calculatePositionSize(requestWithPositions);\r\n      \r\n      expect(result.correlationAdjustment).toBeLessThanOrEqual(1.0);\r\n      expect(result.positionSize).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('should handle zero stop loss distance', async () => {\r\n      const zeroStopRequest = {\r\n        ...baseRequest,\r\n        stopLossPrice: 42000 // Same as entry price\r\n      };\r\n\r\n      await expect(engine.calculatePositionSize(zeroStopRequest))\r\n        .rejects.toThrow('Stop loss price cannot equal entry price');\r\n    });\r\n\r\n    it('should validate position size is reasonable relative to account', async () => {\r\n      const smallAccountRequest = {\r\n        ...baseRequest,\r\n        accountBalance: 1000, // Small account\r\n        entryPrice: 42000,\r\n        stopLossPrice: 41900 // Small stop loss\r\n      };\r\n\r\n      const result = await engine.calculatePositionSize(smallAccountRequest);\r\n      \r\n      // Should not allow position value > 50% of account\r\n      const positionValue = result.positionSize * smallAccountRequest.entryPrice;\r\n      const positionPercentage = (positionValue / smallAccountRequest.accountBalance) * 100;\r\n      \r\n      if (positionPercentage > 50) {\r\n        expect(result.approved).toBe(false);\r\n        expect(result.rejectionReasons).toContain(\r\n          expect.stringContaining('Position value')\r\n        );\r\n      }\r\n    });\r\n  });\r\n\r\n  describe('Confidence Adjustment', () => {\r\n    it('should increase position size for high confidence', async () => {\r\n      const highConfidenceRequest = { ...baseRequest, confidence: 95 };\r\n      const result = await engine.calculatePositionSize(highConfidenceRequest);\r\n      \r\n      // High confidence should result in larger position (up to 1.5x base)\r\n      expect(result.confidenceAdjustedSize).toBeGreaterThan(result.positionSize * 0.8);\r\n    });\r\n\r\n    it('should decrease position size for low confidence', async () => {\r\n      const lowConfidenceRequest = { ...baseRequest, confidence: 20 };\r\n      const result = await engine.calculatePositionSize(lowConfidenceRequest);\r\n      \r\n      // Low confidence should result in smaller position (down to 0.5x base)\r\n      expect(result.confidenceAdjustedSize).toBeLessThan(result.positionSize * 1.2);\r\n    });\r\n\r\n    it('should handle extreme confidence values', async () => {\r\n      // Test confidence > 100\r\n      const extremeHighRequest = { ...baseRequest, confidence: 150 };\r\n      const extremeHighResult = await engine.calculatePositionSize(extremeHighRequest);\r\n      \r\n      // Test confidence < 0\r\n      const extremeLowRequest = { ...baseRequest, confidence: -20 };\r\n      const extremeLowResult = await engine.calculatePositionSize(extremeLowRequest);\r\n      \r\n      expect(extremeHighResult.positionSize).toBeGreaterThan(0);\r\n      expect(extremeLowResult.positionSize).toBeGreaterThan(0);\r\n    });\r\n  });\r\n\r\n  describe('Volatility Adjustment', () => {\r\n    it('should reduce position size for high volatility', async () => {\r\n      const highVolatilityRequest = { ...baseRequest, volatility: 0.8 };\r\n      const normalVolatilityRequest = { ...baseRequest, volatility: 0.2 };\r\n      \r\n      const highVolResult = await engine.calculatePositionSize(highVolatilityRequest);\r\n      const normalVolResult = await engine.calculatePositionSize(normalVolatilityRequest);\r\n      \r\n      expect(highVolResult.positionSize).toBeLessThan(normalVolResult.positionSize);\r\n    });\r\n\r\n    it('should maintain minimum position size even with extreme volatility', async () => {\r\n      const extremeVolatilityRequest = { ...baseRequest, volatility: 2.0 };\r\n      const result = await engine.calculatePositionSize(extremeVolatilityRequest);\r\n      \r\n      // Should maintain at least 30% of base position size\r\n      expect(result.positionSize).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('should handle zero volatility', async () => {\r\n      const zeroVolatilityRequest = { ...baseRequest, volatility: 0 };\r\n      const result = await engine.calculatePositionSize(zeroVolatilityRequest);\r\n      \r\n      expect(result.positionSize).toBeGreaterThan(0);\r\n      expect(result.approved).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('Correlation Analysis', () => {\r\n    it('should reduce position size for highly correlated assets', async () => {\r\n      const highlyCorrelatedPositions: Position[] = [\r\n        {\r\n          id: 'pos1',\r\n          symbol: 'ETH', // ETH is highly correlated with BTC\r\n          size: 10,\r\n          entryPrice: 2500,\r\n          currentPrice: 2600,\r\n          type: 'LONG',\r\n          unrealizedPnL: 1000,\r\n          stopLoss: 2400,\r\n          takeProfit: 2800,\r\n          timestamp: new Date()\r\n        }\r\n      ];\r\n\r\n      const correlatedRequest = {\r\n        ...baseRequest,\r\n        existingPositions: highlyCorrelatedPositions\r\n      };\r\n\r\n      const result = await engine.calculatePositionSize(correlatedRequest);\r\n      \r\n      expect(result.correlationAdjustment).toBeLessThanOrEqual(1.0);\r\n    });\r\n\r\n    it('should not adjust for uncorrelated assets', async () => {\r\n      const uncorrelatedPositions: Position[] = [\r\n        {\r\n          id: 'pos1',\r\n          symbol: 'GOLD', // Assuming GOLD is not correlated with BTC\r\n          size: 100,\r\n          entryPrice: 2000,\r\n          currentPrice: 2050,\r\n          type: 'LONG',\r\n          unrealizedPnL: 5000,\r\n          stopLoss: 1950,\r\n          takeProfit: 2150,\r\n          timestamp: new Date()\r\n        }\r\n      ];\r\n\r\n      const uncorrelatedRequest = {\r\n        ...baseRequest,\r\n        existingPositions: uncorrelatedPositions\r\n      };\r\n\r\n      const result = await engine.calculatePositionSize(uncorrelatedRequest);\r\n      \r\n      expect(result.correlationAdjustment).toBe(1.0);\r\n    });\r\n\r\n    it('should handle empty existing positions', async () => {\r\n      const result = await engine.calculatePositionSize(baseRequest);\r\n      \r\n      expect(result.correlationAdjustment).toBe(1.0);\r\n      expect(result.approved).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('Risk Parameter Management', () => {\r\n    it('should update risk parameters correctly', () => {\r\n      const newParameters = {\r\n        maxRiskPerTrade: 3.0,\r\n        minRiskRewardRatio: 1.5\r\n      };\r\n\r\n      engine.updateRiskParameters(newParameters);\r\n      const updatedParams = engine.getRiskParameters();\r\n      \r\n      expect(updatedParams.maxRiskPerTrade).toBe(3.0);\r\n      expect(updatedParams.minRiskRewardRatio).toBe(1.5);\r\n      expect(updatedParams.maxDrawdownThreshold).toBe(15); // Should remain unchanged\r\n    });\r\n\r\n    it('should get current risk parameters', () => {\r\n      const params = engine.getRiskParameters();\r\n      \r\n      expect(params).toEqual(defaultRiskParameters);\r\n      expect(params).not.toBe(defaultRiskParameters); // Should be a copy\r\n    });\r\n  });\r\n\r\n  describe('Scenario Analysis', () => {\r\n    it('should calculate multiple scenarios correctly', async () => {\r\n      const scenarios = [\r\n        { confidence: 90, volatility: 0.1 }, // High confidence, low volatility\r\n        { confidence: 50, volatility: 0.3 }, // Medium confidence, medium volatility\r\n        { confidence: 30, volatility: 0.6 }  // Low confidence, high volatility\r\n      ];\r\n\r\n      const results = await engine.calculateScenarioAnalysis(baseRequest, scenarios);\r\n      \r\n      expect(results).toHaveLength(3);\r\n      \r\n      // Results should be ordered by decreasing position size\r\n      expect(results[0].positionSize).toBeGreaterThanOrEqual(results[1].positionSize);\r\n      expect(results[1].positionSize).toBeGreaterThanOrEqual(results[2].positionSize);\r\n      \r\n      // All should have same risk-reward ratio\r\n      results.forEach(result => {\r\n        expect(result.riskRewardRatio).toBeCloseTo(2.3, 1);\r\n      });\r\n    });\r\n\r\n    it('should handle empty scenarios array', async () => {\r\n      const results = await engine.calculateScenarioAnalysis(baseRequest, []);\r\n      \r\n      expect(results).toHaveLength(0);\r\n    });\r\n  });\r\n\r\n  describe('Edge Cases and Error Handling', () => {\r\n    it('should handle negative account balance', async () => {\r\n      const negativeBalanceRequest = {\r\n        ...baseRequest,\r\n        accountBalance: -1000\r\n      };\r\n\r\n      const result = await engine.calculatePositionSize(negativeBalanceRequest);\r\n      \r\n      expect(result.approved).toBe(false);\r\n      expect(result.positionSize).toBe(0);\r\n    });\r\n\r\n    it('should handle zero account balance', async () => {\r\n      const zeroBalanceRequest = {\r\n        ...baseRequest,\r\n        accountBalance: 0\r\n      };\r\n\r\n      const result = await engine.calculatePositionSize(zeroBalanceRequest);\r\n      \r\n      expect(result.approved).toBe(false);\r\n      expect(result.positionSize).toBe(0);\r\n    });\r\n\r\n    it('should handle negative prices', async () => {\r\n      const negativePriceRequest = {\r\n        ...baseRequest,\r\n        entryPrice: -100,\r\n        stopLossPrice: -200,\r\n        takeProfitPrice: 0\r\n      };\r\n\r\n      const result = await engine.calculatePositionSize(negativePriceRequest);\r\n      \r\n      // Should handle gracefully, though may not be approved\r\n      expect(typeof result.positionSize).toBe('number');\r\n    });\r\n\r\n    it('should handle very small price differences', async () => {\r\n      const smallDifferenceRequest = {\r\n        ...baseRequest,\r\n        entryPrice: 42000.00,\r\n        stopLossPrice: 41999.99, // 1 cent difference\r\n        takeProfitPrice: 42000.02\r\n      };\r\n\r\n      const result = await engine.calculatePositionSize(smallDifferenceRequest);\r\n      \r\n      expect(result.positionSize).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('should handle very large position sizes', async () => {\r\n      const largePositionRequest = {\r\n        ...baseRequest,\r\n        accountBalance: 1000000, // $1M account\r\n        stopLossPrice: 41999 // Small stop loss\r\n      };\r\n\r\n      const result = await engine.calculatePositionSize(largePositionRequest);\r\n      \r\n      expect(result.positionSize).toBeGreaterThan(0);\r\n      expect(typeof result.positionSize).toBe('number');\r\n      expect(isFinite(result.positionSize)).toBe(true);\r\n    });\r\n\r\n    it('should handle invalid confidence values gracefully', async () => {\r\n      const invalidConfidenceRequest = {\r\n        ...baseRequest,\r\n        confidence: NaN\r\n      };\r\n\r\n      const result = await engine.calculatePositionSize(invalidConfidenceRequest);\r\n      \r\n      expect(result.positionSize).toBeGreaterThan(0);\r\n      expect(isFinite(result.positionSize)).toBe(true);\r\n    });\r\n\r\n    it('should handle invalid volatility values gracefully', async () => {\r\n      const invalidVolatilityRequest = {\r\n        ...baseRequest,\r\n        volatility: Infinity\r\n      };\r\n\r\n      const result = await engine.calculatePositionSize(invalidVolatilityRequest);\r\n      \r\n      expect(result.positionSize).toBeGreaterThan(0);\r\n      expect(isFinite(result.positionSize)).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('Performance and Optimization', () => {\r\n    it('should handle large numbers of existing positions efficiently', async () => {\r\n      const manyPositions: Position[] = [];\r\n      for (let i = 0; i < 100; i++) {\r\n        manyPositions.push({\r\n          id: `pos${i}`,\r\n          symbol: `ASSET${i}`,\r\n          size: 1,\r\n          entryPrice: 100,\r\n          currentPrice: 105,\r\n          type: 'LONG',\r\n          unrealizedPnL: 5,\r\n          stopLoss: 95,\r\n          takeProfit: 110,\r\n          timestamp: new Date()\r\n        });\r\n      }\r\n\r\n      const manyPositionsRequest = {\r\n        ...baseRequest,\r\n        existingPositions: manyPositions\r\n      };\r\n\r\n      const startTime = Date.now();\r\n      const result = await engine.calculatePositionSize(manyPositionsRequest);\r\n      const endTime = Date.now();\r\n\r\n      expect(endTime - startTime).toBeLessThan(100); // Should complete within 100ms\r\n      expect(result.positionSize).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('should not modify input parameters', async () => {\r\n      const originalRequest = JSON.parse(JSON.stringify(baseRequest));\r\n      await engine.calculatePositionSize(baseRequest);\r\n      \r\n      expect(baseRequest).toEqual(originalRequest);\r\n    });\r\n\r\n    it('should produce consistent results for same input', async () => {\r\n      const result1 = await engine.calculatePositionSize(baseRequest);\r\n      const result2 = await engine.calculatePositionSize(baseRequest);\r\n      \r\n      expect(result1.positionSize).toBe(result2.positionSize);\r\n      expect(result1.riskPercentage).toBe(result2.riskPercentage);\r\n      expect(result1.approved).toBe(result2.approved);\r\n    });\r\n  });\r\n});"],"version":3}