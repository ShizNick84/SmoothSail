{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\api\\__tests__\\tunnel-router.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\api\\__tests__\\tunnel-router.test.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * TUNNEL ROUTER TESTS\r\n * =============================================================================\r\n * \r\n * Comprehensive test suite for the SSH tunnel router with request queuing,\r\n * failover, load balancing, and integrity validation.\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport { TunnelRouter, RequestPriority } from '../tunnel-router';\r\nimport { SSHTunnelManager, TunnelConnection, TunnelState } from '@/infrastructure/ssh-tunnel-manager';\r\nimport { AuditService } from '@/security/audit-service';\r\nimport axios from 'axios';\r\n\r\n// Mock dependencies\r\njest.mock('@/infrastructure/ssh-tunnel-manager');\r\njest.mock('@/security/audit-service');\r\njest.mock('@/core/logging/logger');\r\njest.mock('axios');\r\n\r\nconst MockedSSHTunnelManager = SSHTunnelManager as jest.MockedClass<typeof SSHTunnelManager>;\r\nconst MockedAuditService = AuditService as jest.MockedClass<typeof AuditService>;\r\nconst mockedAxios = axios as jest.Mocked<typeof axios>;\r\n\r\ndescribe('TunnelRouter', () => {\r\n  let router: TunnelRouter;\r\n  let mockTunnelManager: jest.Mocked<SSHTunnelManager>;\r\n  let mockAuditService: jest.Mocked<AuditService>;\r\n  let mockTunnelConnection: TunnelConnection;\r\n\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    \r\n    // Mock tunnel manager\r\n    mockTunnelManager = new MockedSSHTunnelManager({} as any, {} as any) as jest.Mocked<SSHTunnelManager>;\r\n    mockTunnelManager.createTunnel = jest.fn();\r\n    mockTunnelManager.establishTunnel = jest.fn();\r\n    mockTunnelManager.getConnection = jest.fn();\r\n    mockTunnelManager.on = jest.fn();\r\n    \r\n    // Mock audit service\r\n    mockAuditService = new MockedAuditService() as jest.Mocked<AuditService>;\r\n    mockAuditService.logSecurityEvent = jest.fn().mockResolvedValue(undefined);\r\n    mockAuditService.logAPIRequest = jest.fn().mockResolvedValue(undefined);\r\n    mockAuditService.logAPIResponse = jest.fn().mockResolvedValue(undefined);\r\n    \r\n    // Mock tunnel connection\r\n    mockTunnelConnection = {\r\n      id: 'tunnel-1',\r\n      config: {\r\n        oracleIP: '168.138.104.117',\r\n        sshPort: 22,\r\n        username: 'ubuntu',\r\n        privateKeyPath: '/path/to/key',\r\n        localPort: 8080,\r\n        remotePort: 80,\r\n        keepAlive: true,\r\n        compression: true,\r\n        connectionTimeout: 30,\r\n        serverAliveInterval: 60,\r\n        serverAliveCountMax: 3,\r\n      },\r\n      process: null,\r\n      state: TunnelState.CONNECTED,\r\n      connectedAt: new Date(),\r\n      lastActivity: new Date(),\r\n      stats: {\r\n        bytesTransferred: 0,\r\n        uptime: 0,\r\n        reconnectAttempts: 0,\r\n        lastError: null,\r\n        qualityScore: 100,\r\n      },\r\n    };\r\n    \r\n    // Mock axios\r\n    mockedAxios.request = jest.fn();\r\n    \r\n    // Create router instance\r\n    router = new TunnelRouter(mockTunnelManager);\r\n  });\r\n\r\n  describe('Initialization', () => {\r\n    it('should initialize successfully with tunnel configurations', async () => {\r\n      const tunnelConfigs = [\r\n        { oracleIP: '168.138.104.117', username: 'ubuntu', localPort: 8080 }\r\n      ];\r\n      \r\n      mockTunnelManager.createTunnel.mockResolvedValueOnce(mockTunnelConnection);\r\n      mockTunnelManager.establishTunnel.mockResolvedValueOnce(undefined);\r\n      \r\n      const result = await router.initialize(tunnelConfigs);\r\n      \r\n      expect(result).toBe(true);\r\n      expect(mockTunnelManager.createTunnel).toHaveBeenCalledWith(tunnelConfigs[0]);\r\n      expect(mockTunnelManager.establishTunnel).toHaveBeenCalledWith(mockTunnelConnection.id);\r\n      expect(mockAuditService.logSecurityEvent).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          type: 'TUNNEL_ROUTER_INITIALIZED',\r\n          severity: 'INFO'\r\n        })\r\n      );\r\n    });\r\n\r\n    it('should fail initialization on tunnel creation error', async () => {\r\n      const tunnelConfigs = [\r\n        { oracleIP: '168.138.104.117', username: 'ubuntu', localPort: 8080 }\r\n      ];\r\n      \r\n      mockTunnelManager.createTunnel.mockRejectedValueOnce(new Error('Tunnel creation failed'));\r\n      \r\n      const result = await router.initialize(tunnelConfigs);\r\n      \r\n      expect(result).toBe(false);\r\n      expect(mockAuditService.logSecurityEvent).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          type: 'TUNNEL_ROUTER_INIT_FAILED',\r\n          severity: 'ERROR'\r\n        })\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('Request Routing', () => {\r\n    beforeEach(async () => {\r\n      const tunnelConfigs = [{ oracleIP: '168.138.104.117', username: 'ubuntu', localPort: 8080 }];\r\n      mockTunnelManager.createTunnel.mockResolvedValueOnce(mockTunnelConnection);\r\n      mockTunnelManager.establishTunnel.mockResolvedValueOnce(undefined);\r\n      mockTunnelManager.getConnection.mockReturnValue(mockTunnelConnection);\r\n      \r\n      await router.initialize(tunnelConfigs);\r\n    });\r\n\r\n    it('should route request through tunnel successfully', async () => {\r\n      const requestConfig = {\r\n        method: 'GET',\r\n        url: '/spot/time',\r\n        headers: { 'Content-Type': 'application/json' }\r\n      };\r\n      \r\n      const mockResponse = {\r\n        status: 200,\r\n        data: { server_time: Date.now() },\r\n        headers: {},\r\n        config: { metadata: {} }\r\n      };\r\n      \r\n      mockedAxios.request.mockResolvedValueOnce(mockResponse);\r\n      \r\n      const response = await router.routeRequest(requestConfig, RequestPriority.NORMAL);\r\n      \r\n      expect(response).toEqual(mockResponse);\r\n      expect(mockedAxios.request).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          proxy: {\r\n            host: 'localhost',\r\n            port: 8080,\r\n            protocol: 'http'\r\n          }\r\n        })\r\n      );\r\n      expect(mockAuditService.logAPIRequest).toHaveBeenCalled();\r\n      expect(mockAuditService.logAPIResponse).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should validate request before routing', async () => {\r\n      const invalidConfig = {\r\n        method: '',\r\n        url: '',\r\n      };\r\n      \r\n      await expect(router.routeRequest(invalidConfig)).rejects.toThrow('Request validation failed');\r\n    });\r\n\r\n    it('should handle priority queue correctly', async () => {\r\n      const lowPriorityConfig = {\r\n        method: 'GET',\r\n        url: '/spot/accounts',\r\n      };\r\n      \r\n      const highPriorityConfig = {\r\n        method: 'GET',\r\n        url: '/spot/time',\r\n      };\r\n      \r\n      const mockResponse = {\r\n        status: 200,\r\n        data: {},\r\n        headers: {},\r\n        config: { metadata: {} }\r\n      };\r\n      \r\n      mockedAxios.request.mockResolvedValue(mockResponse);\r\n      \r\n      // Queue low priority request first\r\n      const lowPriorityPromise = router.routeRequest(lowPriorityConfig, RequestPriority.LOW);\r\n      \r\n      // Queue high priority request second\r\n      const highPriorityPromise = router.routeRequest(highPriorityConfig, RequestPriority.HIGH);\r\n      \r\n      await Promise.all([lowPriorityPromise, highPriorityPromise]);\r\n      \r\n      expect(mockedAxios.request).toHaveBeenCalledTimes(2);\r\n    });\r\n  });\r\n\r\n  describe('Request Retry Logic', () => {\r\n    beforeEach(async () => {\r\n      const tunnelConfigs = [{ oracleIP: '168.138.104.117', username: 'ubuntu', localPort: 8080 }];\r\n      mockTunnelManager.createTunnel.mockResolvedValueOnce(mockTunnelConnection);\r\n      mockTunnelManager.establishTunnel.mockResolvedValueOnce(undefined);\r\n      mockTunnelManager.getConnection.mockReturnValue(mockTunnelConnection);\r\n      \r\n      await router.initialize(tunnelConfigs);\r\n    });\r\n\r\n    it('should retry requests on transient errors', async () => {\r\n      const requestConfig = {\r\n        method: 'GET',\r\n        url: '/spot/time',\r\n      };\r\n      \r\n      const networkError = new Error('Network error');\r\n      const mockResponse = {\r\n        status: 200,\r\n        data: { server_time: Date.now() },\r\n        headers: {},\r\n        config: { metadata: {} }\r\n      };\r\n      \r\n      // First two attempts fail, third succeeds\r\n      mockedAxios.request\r\n        .mockRejectedValueOnce(networkError)\r\n        .mockRejectedValueOnce(networkError)\r\n        .mockResolvedValueOnce(mockResponse);\r\n      \r\n      const response = await router.routeRequest(requestConfig);\r\n      \r\n      expect(response).toEqual(mockResponse);\r\n      expect(mockedAxios.request).toHaveBeenCalledTimes(3);\r\n    });\r\n\r\n    it('should not retry on client errors (4xx)', async () => {\r\n      const requestConfig = {\r\n        method: 'GET',\r\n        url: '/spot/accounts',\r\n      };\r\n      \r\n      const clientError = {\r\n        response: { status: 400 },\r\n        message: 'Bad request'\r\n      };\r\n      \r\n      mockedAxios.request.mockRejectedValueOnce(clientError);\r\n      \r\n      await expect(router.routeRequest(requestConfig)).rejects.toThrow('Bad request');\r\n      expect(mockedAxios.request).toHaveBeenCalledTimes(1);\r\n    });\r\n\r\n    it('should respect maximum retry attempts', async () => {\r\n      const requestConfig = {\r\n        method: 'GET',\r\n        url: '/spot/time',\r\n      };\r\n      \r\n      const serverError = {\r\n        response: { status: 500 },\r\n        message: 'Internal server error'\r\n      };\r\n      \r\n      mockedAxios.request.mockRejectedValue(serverError);\r\n      \r\n      await expect(router.routeRequest(requestConfig)).rejects.toThrow('Internal server error');\r\n      \r\n      // Should try initial request + 3 retries = 4 total attempts\r\n      expect(mockedAxios.request).toHaveBeenCalledTimes(4);\r\n    });\r\n  });\r\n\r\n  describe('Tunnel Health Management', () => {\r\n    beforeEach(async () => {\r\n      const tunnelConfigs = [\r\n        { oracleIP: '168.138.104.117', username: 'ubuntu', localPort: 8080 },\r\n        { oracleIP: '168.138.104.117', username: 'ubuntu', localPort: 8081 }\r\n      ];\r\n      \r\n      const tunnel1 = { ...mockTunnelConnection, id: 'tunnel-1' };\r\n      const tunnel2 = { ...mockTunnelConnection, id: 'tunnel-2', config: { ...mockTunnelConnection.config, localPort: 8081 } };\r\n      \r\n      mockTunnelManager.createTunnel\r\n        .mockResolvedValueOnce(tunnel1)\r\n        .mockResolvedValueOnce(tunnel2);\r\n      mockTunnelManager.establishTunnel.mockResolvedValue(undefined);\r\n      mockTunnelManager.getConnection\r\n        .mockImplementation((id) => id === 'tunnel-1' ? tunnel1 : tunnel2);\r\n      \r\n      await router.initialize(tunnelConfigs);\r\n    });\r\n\r\n    it('should track tunnel health metrics', async () => {\r\n      const requestConfig = {\r\n        method: 'GET',\r\n        url: '/spot/time',\r\n      };\r\n      \r\n      const mockResponse = {\r\n        status: 200,\r\n        data: { server_time: Date.now() },\r\n        headers: {},\r\n        config: { metadata: {} }\r\n      };\r\n      \r\n      mockedAxios.request.mockResolvedValueOnce(mockResponse);\r\n      \r\n      await router.routeRequest(requestConfig);\r\n      \r\n      const healthStatus = router.getTunnelHealthStatus();\r\n      expect(healthStatus).toHaveLength(2);\r\n      expect(healthStatus[0].isHealthy).toBe(true);\r\n    });\r\n\r\n    it('should switch tunnels when current tunnel becomes unhealthy', async () => {\r\n      const requestConfig = {\r\n        method: 'GET',\r\n        url: '/spot/time',\r\n      };\r\n      \r\n      const serverError = {\r\n        response: { status: 500 },\r\n        message: 'Internal server error'\r\n      };\r\n      \r\n      // Simulate multiple failures to make tunnel unhealthy\r\n      mockedAxios.request\r\n        .mockRejectedValueOnce(serverError)\r\n        .mockRejectedValueOnce(serverError)\r\n        .mockRejectedValueOnce(serverError)\r\n        .mockRejectedValueOnce(serverError)\r\n        .mockRejectedValueOnce(serverError);\r\n      \r\n      try {\r\n        await router.routeRequest(requestConfig);\r\n      } catch (error) {\r\n        // Expected to fail\r\n      }\r\n      \r\n      const healthStatus = router.getTunnelHealthStatus();\r\n      const unhealthyTunnels = healthStatus.filter(status => !status.isHealthy);\r\n      expect(unhealthyTunnels.length).toBeGreaterThan(0);\r\n    });\r\n  });\r\n\r\n  describe('Request Validation and Integrity', () => {\r\n    beforeEach(async () => {\r\n      const tunnelConfigs = [{ oracleIP: '168.138.104.117', username: 'ubuntu', localPort: 8080 }];\r\n      mockTunnelManager.createTunnel.mockResolvedValueOnce(mockTunnelConnection);\r\n      mockTunnelManager.establishTunnel.mockResolvedValueOnce(undefined);\r\n      mockTunnelManager.getConnection.mockReturnValue(mockTunnelConnection);\r\n      \r\n      await router.initialize(tunnelConfigs);\r\n    });\r\n\r\n    it('should validate request format', async () => {\r\n      const invalidConfigs = [\r\n        { method: '', url: '/spot/time' }, // Empty method\r\n        { method: 'GET', url: '' }, // Empty URL\r\n        { method: 'GET', url: 'invalid-url' }, // Invalid URL format\r\n      ];\r\n      \r\n      for (const config of invalidConfigs) {\r\n        await expect(router.routeRequest(config)).rejects.toThrow('Request validation failed');\r\n      }\r\n    });\r\n\r\n    it('should create request checksums for integrity validation', async () => {\r\n      const requestConfig = {\r\n        method: 'GET',\r\n        url: '/spot/time',\r\n        headers: { 'Content-Type': 'application/json' }\r\n      };\r\n      \r\n      const mockResponse = {\r\n        status: 200,\r\n        data: { server_time: Date.now() },\r\n        headers: {},\r\n        config: { metadata: {} }\r\n      };\r\n      \r\n      mockedAxios.request.mockResolvedValueOnce(mockResponse);\r\n      \r\n      await router.routeRequest(requestConfig);\r\n      \r\n      // Verify that request was processed with checksum metadata\r\n      expect(mockedAxios.request).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          metadata: expect.objectContaining({\r\n            requestChecksum: expect.any(String),\r\n            validationTimestamp: expect.any(Date)\r\n          })\r\n        })\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('Queue Management', () => {\r\n    beforeEach(async () => {\r\n      const tunnelConfigs = [{ oracleIP: '168.138.104.117', username: 'ubuntu', localPort: 8080 }];\r\n      mockTunnelManager.createTunnel.mockResolvedValueOnce(mockTunnelConnection);\r\n      mockTunnelManager.establishTunnel.mockResolvedValueOnce(undefined);\r\n      mockTunnelManager.getConnection.mockReturnValue(mockTunnelConnection);\r\n      \r\n      await router.initialize(tunnelConfigs);\r\n    });\r\n\r\n    it('should handle concurrent requests', async () => {\r\n      const requests = Array(10).fill(null).map((_, index) => ({\r\n        method: 'GET',\r\n        url: `/spot/test-${index}`,\r\n      }));\r\n      \r\n      const mockResponse = {\r\n        status: 200,\r\n        data: {},\r\n        headers: {},\r\n        config: { metadata: {} }\r\n      };\r\n      \r\n      mockedAxios.request.mockResolvedValue(mockResponse);\r\n      \r\n      const promises = requests.map(config => router.routeRequest(config));\r\n      const responses = await Promise.all(promises);\r\n      \r\n      expect(responses).toHaveLength(10);\r\n      expect(mockedAxios.request).toHaveBeenCalledTimes(10);\r\n    });\r\n\r\n    it('should process requests in priority order', async () => {\r\n      const requests = [\r\n        { config: { method: 'GET', url: '/low' }, priority: RequestPriority.LOW },\r\n        { config: { method: 'GET', url: '/high' }, priority: RequestPriority.HIGH },\r\n        { config: { method: 'GET', url: '/normal' }, priority: RequestPriority.NORMAL },\r\n        { config: { method: 'GET', url: '/critical' }, priority: RequestPriority.CRITICAL },\r\n      ];\r\n      \r\n      const mockResponse = {\r\n        status: 200,\r\n        data: {},\r\n        headers: {},\r\n        config: { metadata: {} }\r\n      };\r\n      \r\n      mockedAxios.request.mockResolvedValue(mockResponse);\r\n      \r\n      const promises = requests.map(req => router.routeRequest(req.config, req.priority));\r\n      await Promise.all(promises);\r\n      \r\n      expect(mockedAxios.request).toHaveBeenCalledTimes(4);\r\n    });\r\n  });\r\n\r\n  describe('Statistics and Monitoring', () => {\r\n    beforeEach(async () => {\r\n      const tunnelConfigs = [{ oracleIP: '168.138.104.117', username: 'ubuntu', localPort: 8080 }];\r\n      mockTunnelManager.createTunnel.mockResolvedValueOnce(mockTunnelConnection);\r\n      mockTunnelManager.establishTunnel.mockResolvedValueOnce(undefined);\r\n      mockTunnelManager.getConnection.mockReturnValue(mockTunnelConnection);\r\n      \r\n      await router.initialize(tunnelConfigs);\r\n    });\r\n\r\n    it('should track routing statistics', async () => {\r\n      const requestConfig = {\r\n        method: 'GET',\r\n        url: '/spot/time',\r\n      };\r\n      \r\n      const mockResponse = {\r\n        status: 200,\r\n        data: { server_time: Date.now() },\r\n        headers: {},\r\n        config: { metadata: {} }\r\n      };\r\n      \r\n      mockedAxios.request.mockResolvedValueOnce(mockResponse);\r\n      \r\n      await router.routeRequest(requestConfig);\r\n      \r\n      const stats = router.getRoutingStats();\r\n      expect(stats.totalRequests).toBe(1);\r\n      expect(stats.successfulRequests).toBe(1);\r\n      expect(stats.failedRequests).toBe(0);\r\n      expect(stats.lastRequestTime).toBeInstanceOf(Date);\r\n    });\r\n\r\n    it('should provide tunnel health status', async () => {\r\n      const healthStatus = router.getTunnelHealthStatus();\r\n      \r\n      expect(healthStatus).toHaveLength(1);\r\n      expect(healthStatus[0]).toMatchObject({\r\n        tunnelId: expect.any(String),\r\n        isHealthy: expect.any(Boolean),\r\n        responseTime: expect.any(Number),\r\n        errorRate: expect.any(Number),\r\n        lastHealthCheck: expect.any(Date),\r\n        consecutiveFailures: expect.any(Number),\r\n      });\r\n    });\r\n\r\n    it('should return current active tunnel ID', () => {\r\n      const currentTunnelId = router.getCurrentTunnelId();\r\n      expect(currentTunnelId).toBe('tunnel-1');\r\n    });\r\n  });\r\n\r\n  describe('Shutdown', () => {\r\n    beforeEach(async () => {\r\n      const tunnelConfigs = [{ oracleIP: '168.138.104.117', username: 'ubuntu', localPort: 8080 }];\r\n      mockTunnelManager.createTunnel.mockResolvedValueOnce(mockTunnelConnection);\r\n      mockTunnelManager.establishTunnel.mockResolvedValueOnce(undefined);\r\n      mockTunnelManager.getConnection.mockReturnValue(mockTunnelConnection);\r\n      \r\n      await router.initialize(tunnelConfigs);\r\n    });\r\n\r\n    it('should shutdown gracefully', async () => {\r\n      await router.shutdown();\r\n      \r\n      expect(mockAuditService.logSecurityEvent).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          type: 'TUNNEL_ROUTER_SHUTDOWN',\r\n          severity: 'INFO'\r\n        })\r\n      );\r\n    });\r\n\r\n    it('should reject pending requests on shutdown', async () => {\r\n      const requestConfig = {\r\n        method: 'GET',\r\n        url: '/spot/time',\r\n      };\r\n      \r\n      // Don't resolve the axios request to keep it pending\r\n      mockedAxios.request.mockImplementation(() => new Promise(() => {}));\r\n      \r\n      const requestPromise = router.routeRequest(requestConfig);\r\n      \r\n      // Shutdown while request is pending\r\n      await router.shutdown();\r\n      \r\n      await expect(requestPromise).rejects.toThrow('Tunnel router is shutting down');\r\n    });\r\n  });\r\n\r\n  describe('Error Handling', () => {\r\n    beforeEach(async () => {\r\n      const tunnelConfigs = [{ oracleIP: '168.138.104.117', username: 'ubuntu', localPort: 8080 }];\r\n      mockTunnelManager.createTunnel.mockResolvedValueOnce(mockTunnelConnection);\r\n      mockTunnelManager.establishTunnel.mockResolvedValueOnce(undefined);\r\n      mockTunnelManager.getConnection.mockReturnValue(mockTunnelConnection);\r\n      \r\n      await router.initialize(tunnelConfigs);\r\n    });\r\n\r\n    it('should handle tunnel disconnection gracefully', async () => {\r\n      // Simulate tunnel disconnection\r\n      mockTunnelManager.getConnection.mockReturnValue({\r\n        ...mockTunnelConnection,\r\n        state: TunnelState.DISCONNECTED\r\n      });\r\n      \r\n      const requestConfig = {\r\n        method: 'GET',\r\n        url: '/spot/time',\r\n      };\r\n      \r\n      await expect(router.routeRequest(requestConfig)).rejects.toThrow('Tunnel not available');\r\n    });\r\n\r\n    it('should handle no healthy tunnels scenario', async () => {\r\n      // Make all tunnels unhealthy by simulating failures\r\n      const requestConfig = {\r\n        method: 'GET',\r\n        url: '/spot/time',\r\n      };\r\n      \r\n      const serverError = {\r\n        response: { status: 500 },\r\n        message: 'Internal server error'\r\n      };\r\n      \r\n      // Simulate enough failures to make tunnel unhealthy\r\n      for (let i = 0; i < 6; i++) {\r\n        mockedAxios.request.mockRejectedValueOnce(serverError);\r\n        try {\r\n          await router.routeRequest(requestConfig);\r\n        } catch (error) {\r\n          // Expected to fail\r\n        }\r\n      }\r\n      \r\n      // Now all tunnels should be unhealthy\r\n      await expect(router.routeRequest(requestConfig)).rejects.toThrow();\r\n    });\r\n  });\r\n});"],"version":3}