{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\tests\\security\\automated-security-tests.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\tests\\security\\automated-security-tests.test.ts"],"sourcesContent":["/**\r\n * Automated Security Testing Suite\r\n * \r\n * Comprehensive automated security testing including OWASP Top 10,\r\n * API security testing, and continuous security validation.\r\n * \r\n * Requirements: 25.7 - Automated security testing suite\r\n */\r\n\r\nimport { SecurityManager } from '@/security/security-manager';\r\nimport { ThreatDetectionEngine } from '@/security/threat-detection-engine';\r\nimport { EncryptionService } from '@/security/encryption-service';\r\nimport { CredentialManager } from '@/security/credential-manager';\r\nimport { SecurityMonitoringService } from '@/security/security-monitoring-service';\r\nimport crypto from 'crypto';\r\n\r\n// Mock external dependencies\r\njest.mock('@/core/logging/logger', () => ({\r\n  logger: {\r\n    info: jest.fn(),\r\n    debug: jest.fn(),\r\n    warn: jest.fn(),\r\n    error: jest.fn()\r\n  }\r\n}));\r\n\r\ndescribe('Automated Security Testing Suite', () => {\r\n  let securityManager: SecurityManager;\r\n  let threatDetection: ThreatDetectionEngine;\r\n  let encryptionService: EncryptionService;\r\n  let credentialManager: CredentialManager;\r\n  let securityMonitoring: SecurityMonitoringService;\r\n\r\n  beforeEach(() => {\r\n    // Set up test environment with master key\r\n    process.env.MASTER_ENCRYPTION_KEY = crypto.randomBytes(32).toString('hex');\r\n    \r\n    securityManager = new SecurityManager();\r\n    threatDetection = new ThreatDetectionEngine();\r\n    encryptionService = new EncryptionService();\r\n    credentialManager = new CredentialManager();\r\n    securityMonitoring = new SecurityMonitoringService();\r\n  });\r\n\r\n  afterEach(() => {\r\n    delete process.env.MASTER_ENCRYPTION_KEY;\r\n  });\r\n\r\n  describe('OWASP Top 10 Security Testing', () => {\r\n    it('should test for injection vulnerabilities (A03:2021)', async () => {\r\n      const injectionPayloads = [\r\n        // SQL Injection\r\n        \"'; DROP TABLE users; --\",\r\n        \"' OR '1'='1\",\r\n        \"1' UNION SELECT * FROM credentials--\",\r\n        \r\n        // NoSQL Injection\r\n        '{\"$ne\": null}',\r\n        '{\"$gt\": \"\"}',\r\n        '{\"$where\": \"this.password.match(/.*/)\"}',\r\n        \r\n        // Command Injection\r\n        '; cat /etc/passwd',\r\n        '| whoami',\r\n        '&& rm -rf /',\r\n        \r\n        // LDAP Injection\r\n        '*)(&(objectClass=*))',\r\n        '*)(uid=*))(|(uid=*',\r\n        \r\n        // XPath Injection\r\n        \"' or '1'='1\",\r\n        \"'] | //user/*[contains(*,'Admin')] | ['\",\r\n        \r\n        // Template Injection\r\n        '{{7*7}}',\r\n        '${7*7}',\r\n        '<%= 7*7 %>',\r\n        '#{7*7}'\r\n      ];\r\n\r\n      let vulnerabilitiesFound = 0;\r\n      const testResults = [];\r\n\r\n      for (const payload of injectionPayloads) {\r\n        try {\r\n          // Test credential storage with malicious input\r\n          const result = await credentialManager.encryptCredential(payload);\r\n          \r\n          // Verify the payload was properly sanitized/escaped\r\n          const decrypted = await credentialManager.decryptCredential(result);\r\n          \r\n          // Check if the payload was executed (vulnerability)\r\n          if (decrypted !== payload) {\r\n            vulnerabilitiesFound++;\r\n            testResults.push({\r\n              payload,\r\n              vulnerability: 'INJECTION_DETECTED',\r\n              severity: 'HIGH'\r\n            });\r\n          }\r\n          \r\n          // Additional checks for code execution\r\n          if (payload.includes('DROP TABLE') && decrypted.includes('error')) {\r\n            vulnerabilitiesFound++;\r\n            testResults.push({\r\n              payload,\r\n              vulnerability: 'SQL_INJECTION_POSSIBLE',\r\n              severity: 'CRITICAL'\r\n            });\r\n          }\r\n          \r\n        } catch (error) {\r\n          // Errors are expected for malicious input - this is good\r\n          testResults.push({\r\n            payload,\r\n            result: 'BLOCKED',\r\n            severity: 'NONE'\r\n          });\r\n        }\r\n      }\r\n\r\n      // Should not find any injection vulnerabilities\r\n      expect(vulnerabilitiesFound).toBe(0);\r\n      \r\n      // All malicious payloads should be blocked or safely handled\r\n      const blockedPayloads = testResults.filter(r => r.result === 'BLOCKED').length;\r\n      expect(blockedPayloads).toBeGreaterThan(injectionPayloads.length * 0.8); // At least 80% blocked\r\n    });\r\n\r\n    it('should test for broken authentication (A07:2021)', async () => {\r\n      const authenticationTests = [\r\n        // Weak password tests\r\n        { username: 'admin', password: 'admin', expected: 'REJECT' },\r\n        { username: 'admin', password: '123456', expected: 'REJECT' },\r\n        { username: 'admin', password: 'password', expected: 'REJECT' },\r\n        { username: 'root', password: 'root', expected: 'REJECT' },\r\n        \r\n        // Brute force simulation\r\n        { username: 'admin', password: 'wrong1', expected: 'REJECT' },\r\n        { username: 'admin', password: 'wrong2', expected: 'REJECT' },\r\n        { username: 'admin', password: 'wrong3', expected: 'REJECT' },\r\n        { username: 'admin', password: 'wrong4', expected: 'REJECT' },\r\n        { username: 'admin', password: 'wrong5', expected: 'REJECT' },\r\n        \r\n        // Session fixation tests\r\n        { sessionId: 'fixed_session_123', expected: 'REJECT' },\r\n        { sessionId: 'predictable_session_456', expected: 'REJECT' },\r\n        \r\n        // Strong authentication\r\n        { username: 'admin', password: 'StrongP@ssw0rd!2024', expected: 'ACCEPT' }\r\n      ];\r\n\r\n      let authenticationVulnerabilities = 0;\r\n      const authResults = [];\r\n\r\n      for (const test of authenticationTests) {\r\n        try {\r\n          if (test.password) {\r\n            // Test password strength\r\n            const passwordStrength = await this.testPasswordStrength(test.password);\r\n            \r\n            if (passwordStrength.isWeak && test.expected === 'ACCEPT') {\r\n              authenticationVulnerabilities++;\r\n              authResults.push({\r\n                test: test.username,\r\n                vulnerability: 'WEAK_PASSWORD_ACCEPTED',\r\n                severity: 'HIGH'\r\n              });\r\n            }\r\n            \r\n            // Test for brute force protection\r\n            if (test.username === 'admin' && test.password.startsWith('wrong')) {\r\n              const bruteForceDetected = await threatDetection.detectBruteForce({\r\n                username: test.username,\r\n                password: test.password,\r\n                ip: '192.168.1.100',\r\n                timestamp: new Date()\r\n              });\r\n              \r\n              if (!bruteForceDetected) {\r\n                authenticationVulnerabilities++;\r\n                authResults.push({\r\n                  test: test.username,\r\n                  vulnerability: 'BRUTE_FORCE_NOT_DETECTED',\r\n                  severity: 'MEDIUM'\r\n                });\r\n              }\r\n            }\r\n          }\r\n          \r\n          if (test.sessionId) {\r\n            // Test session security\r\n            const sessionSecurity = await this.testSessionSecurity(test.sessionId);\r\n            \r\n            if (!sessionSecurity.isSecure) {\r\n              authenticationVulnerabilities++;\r\n              authResults.push({\r\n                test: test.sessionId,\r\n                vulnerability: 'INSECURE_SESSION',\r\n                severity: 'HIGH'\r\n              });\r\n            }\r\n          }\r\n          \r\n        } catch (error) {\r\n          // Authentication errors are expected for invalid credentials\r\n        }\r\n      }\r\n\r\n      // Should not find authentication vulnerabilities\r\n      expect(authenticationVulnerabilities).toBe(0);\r\n    });\r\n\r\n    it('should test for sensitive data exposure (A02:2021)', async () => {\r\n      const sensitiveDataTests = [\r\n        {\r\n          data: 'GATE_IO_API_KEY=gateio_api_key_12345',\r\n          context: 'environment_variable',\r\n          shouldBeEncrypted: true\r\n        },\r\n        {\r\n          data: 'SECRET_KEY=super_secret_trading_key',\r\n          context: 'configuration_file',\r\n          shouldBeEncrypted: true\r\n        },\r\n        {\r\n          data: 'password=user_password_123',\r\n          context: 'log_entry',\r\n          shouldBeRedacted: true\r\n        },\r\n        {\r\n          data: '4111-1111-1111-1111',\r\n          context: 'credit_card',\r\n          shouldBeRedacted: true\r\n        },\r\n        {\r\n          data: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAB...',\r\n          context: 'private_key',\r\n          shouldBeEncrypted: true\r\n        }\r\n      ];\r\n\r\n      let exposureVulnerabilities = 0;\r\n      const exposureResults = [];\r\n\r\n      for (const test of sensitiveDataTests) {\r\n        try {\r\n          if (test.shouldBeEncrypted) {\r\n            // Test if sensitive data is properly encrypted\r\n            const encrypted = await encryptionService.encryptData(test.data);\r\n            \r\n            // Verify data is actually encrypted\r\n            if (encrypted.encryptedData === test.data) {\r\n              exposureVulnerabilities++;\r\n              exposureResults.push({\r\n                data: test.context,\r\n                vulnerability: 'UNENCRYPTED_SENSITIVE_DATA',\r\n                severity: 'CRITICAL'\r\n              });\r\n            }\r\n            \r\n            // Test if encrypted data can be decrypted\r\n            const decrypted = await encryptionService.decryptData(encrypted);\r\n            if (decrypted !== test.data) {\r\n              exposureVulnerabilities++;\r\n              exposureResults.push({\r\n                data: test.context,\r\n                vulnerability: 'ENCRYPTION_INTEGRITY_FAILURE',\r\n                severity: 'HIGH'\r\n              });\r\n            }\r\n          }\r\n          \r\n          if (test.shouldBeRedacted) {\r\n            // Test if sensitive data is properly redacted in logs\r\n            const redacted = await this.redactSensitiveData(test.data);\r\n            \r\n            if (redacted === test.data) {\r\n              exposureVulnerabilities++;\r\n              exposureResults.push({\r\n                data: test.context,\r\n                vulnerability: 'SENSITIVE_DATA_NOT_REDACTED',\r\n                severity: 'MEDIUM'\r\n              });\r\n            }\r\n            \r\n            // Verify redaction contains masking\r\n            if (!redacted.includes('***') && !redacted.includes('REDACTED')) {\r\n              exposureVulnerabilities++;\r\n              exposureResults.push({\r\n                data: test.context,\r\n                vulnerability: 'IMPROPER_REDACTION',\r\n                severity: 'MEDIUM'\r\n              });\r\n            }\r\n          }\r\n          \r\n        } catch (error) {\r\n          // Encryption/redaction errors might indicate vulnerabilities\r\n          exposureVulnerabilities++;\r\n          exposureResults.push({\r\n            data: test.context,\r\n            vulnerability: 'DATA_PROTECTION_ERROR',\r\n            severity: 'HIGH',\r\n            error: error.message\r\n          });\r\n        }\r\n      }\r\n\r\n      // Should not find data exposure vulnerabilities\r\n      expect(exposureVulnerabilities).toBe(0);\r\n    });\r\n\r\n    it('should test for security misconfiguration (A05:2021)', async () => {\r\n      const configurationTests = [\r\n        // Default credentials\r\n        { type: 'default_credentials', key: 'admin', value: 'admin' },\r\n        { type: 'default_credentials', key: 'root', value: 'root' },\r\n        \r\n        // Insecure protocols\r\n        { type: 'protocol', value: 'http://', expected: 'INSECURE' },\r\n        { type: 'protocol', value: 'ftp://', expected: 'INSECURE' },\r\n        { type: 'protocol', value: 'https://', expected: 'SECURE' },\r\n        \r\n        // Weak encryption\r\n        { type: 'encryption', algorithm: 'DES', expected: 'WEAK' },\r\n        { type: 'encryption', algorithm: 'MD5', expected: 'WEAK' },\r\n        { type: 'encryption', algorithm: 'AES-256-GCM', expected: 'STRONG' },\r\n        \r\n        // Insecure ports\r\n        { type: 'port', value: 23, protocol: 'telnet', expected: 'INSECURE' },\r\n        { type: 'port', value: 21, protocol: 'ftp', expected: 'INSECURE' },\r\n        { type: 'port', value: 22, protocol: 'ssh', expected: 'SECURE' },\r\n        \r\n        // Debug modes\r\n        { type: 'debug', enabled: true, environment: 'production', expected: 'INSECURE' },\r\n        { type: 'debug', enabled: false, environment: 'production', expected: 'SECURE' }\r\n      ];\r\n\r\n      let misconfigurationVulnerabilities = 0;\r\n      const configResults = [];\r\n\r\n      for (const test of configurationTests) {\r\n        try {\r\n          let isVulnerable = false;\r\n          \r\n          switch (test.type) {\r\n            case 'default_credentials':\r\n              // Test for default credentials\r\n              if (test.key === 'admin' && test.value === 'admin') {\r\n                isVulnerable = true;\r\n              }\r\n              break;\r\n              \r\n            case 'protocol':\r\n              // Test for insecure protocols\r\n              if (test.value.startsWith('http://') || test.value.startsWith('ftp://')) {\r\n                isVulnerable = true;\r\n              }\r\n              break;\r\n              \r\n            case 'encryption':\r\n              // Test for weak encryption\r\n              if (test.algorithm === 'DES' || test.algorithm === 'MD5') {\r\n                isVulnerable = true;\r\n              }\r\n              break;\r\n              \r\n            case 'port':\r\n              // Test for insecure ports\r\n              if (test.value === 23 || test.value === 21) {\r\n                isVulnerable = true;\r\n              }\r\n              break;\r\n              \r\n            case 'debug':\r\n              // Test for debug mode in production\r\n              if (test.enabled && test.environment === 'production') {\r\n                isVulnerable = true;\r\n              }\r\n              break;\r\n          }\r\n          \r\n          if (isVulnerable) {\r\n            misconfigurationVulnerabilities++;\r\n            configResults.push({\r\n              test: test.type,\r\n              vulnerability: 'SECURITY_MISCONFIGURATION',\r\n              severity: 'MEDIUM',\r\n              details: test\r\n            });\r\n          }\r\n          \r\n        } catch (error) {\r\n          // Configuration errors might indicate misconfigurations\r\n        }\r\n      }\r\n\r\n      // Should not find misconfiguration vulnerabilities\r\n      expect(misconfigurationVulnerabilities).toBe(0);\r\n    });\r\n\r\n    it('should test for vulnerable components (A06:2021)', async () => {\r\n      const componentTests = [\r\n        // Test for known vulnerable versions\r\n        { component: 'openssl', version: '1.0.1', knownVulnerable: true },\r\n        { component: 'nodejs', version: '10.0.0', knownVulnerable: true },\r\n        { component: 'express', version: '3.0.0', knownVulnerable: true },\r\n        \r\n        // Test for secure versions\r\n        { component: 'openssl', version: '3.0.0', knownVulnerable: false },\r\n        { component: 'nodejs', version: '18.0.0', knownVulnerable: false },\r\n        { component: 'express', version: '4.18.0', knownVulnerable: false }\r\n      ];\r\n\r\n      let vulnerableComponents = 0;\r\n      const componentResults = [];\r\n\r\n      for (const test of componentTests) {\r\n        try {\r\n          // Simulate vulnerability scanning\r\n          const vulnerabilityCheck = await this.checkComponentVulnerabilities(\r\n            test.component,\r\n            test.version\r\n          );\r\n          \r\n          if (vulnerabilityCheck.hasVulnerabilities && !test.knownVulnerable) {\r\n            vulnerableComponents++;\r\n            componentResults.push({\r\n              component: test.component,\r\n              version: test.version,\r\n              vulnerability: 'UNEXPECTED_VULNERABILITY',\r\n              severity: 'HIGH',\r\n              vulnerabilities: vulnerabilityCheck.vulnerabilities\r\n            });\r\n          }\r\n          \r\n          if (!vulnerabilityCheck.hasVulnerabilities && test.knownVulnerable) {\r\n            // This might indicate the vulnerability scanner is not working\r\n            componentResults.push({\r\n              component: test.component,\r\n              version: test.version,\r\n              issue: 'VULNERABILITY_NOT_DETECTED',\r\n              severity: 'LOW'\r\n            });\r\n          }\r\n          \r\n        } catch (error) {\r\n          // Component checking errors\r\n        }\r\n      }\r\n\r\n      // Should detect known vulnerable components\r\n      expect(vulnerableComponents).toBe(0);\r\n    });\r\n  });\r\n\r\n  describe('API Security Testing', () => {\r\n    it('should test API authentication mechanisms', async () => {\r\n      const apiTests = [\r\n        // Missing authentication\r\n        { endpoint: '/api/v4/spot/accounts', auth: null, expected: 'REJECT' },\r\n        { endpoint: '/api/v4/spot/orders', auth: null, expected: 'REJECT' },\r\n        \r\n        // Invalid authentication\r\n        { endpoint: '/api/v4/spot/accounts', auth: 'invalid_token', expected: 'REJECT' },\r\n        { endpoint: '/api/v4/spot/orders', auth: 'expired_token', expected: 'REJECT' },\r\n        \r\n        // Valid authentication\r\n        { endpoint: '/api/v4/spot/time', auth: null, expected: 'ACCEPT' }, // Public endpoint\r\n        { endpoint: '/api/v4/spot/accounts', auth: 'valid_token', expected: 'ACCEPT' }\r\n      ];\r\n\r\n      let apiVulnerabilities = 0;\r\n      const apiResults = [];\r\n\r\n      for (const test of apiTests) {\r\n        try {\r\n          const authResult = await this.testAPIAuthentication(test.endpoint, test.auth);\r\n          \r\n          if (authResult.allowed && test.expected === 'REJECT') {\r\n            apiVulnerabilities++;\r\n            apiResults.push({\r\n              endpoint: test.endpoint,\r\n              vulnerability: 'AUTHENTICATION_BYPASS',\r\n              severity: 'CRITICAL'\r\n            });\r\n          }\r\n          \r\n          if (!authResult.allowed && test.expected === 'ACCEPT') {\r\n            apiVulnerabilities++;\r\n            apiResults.push({\r\n              endpoint: test.endpoint,\r\n              vulnerability: 'VALID_REQUEST_REJECTED',\r\n              severity: 'MEDIUM'\r\n            });\r\n          }\r\n          \r\n        } catch (error) {\r\n          // API errors are expected for invalid requests\r\n        }\r\n      }\r\n\r\n      // Should not find API authentication vulnerabilities\r\n      expect(apiVulnerabilities).toBe(0);\r\n    });\r\n\r\n    it('should test API rate limiting', async () => {\r\n      const rateLimitTests = [\r\n        { endpoint: '/api/v4/spot/orders', limit: 10, timeWindow: 1000 }, // 10 requests per second\r\n        { endpoint: '/api/v4/spot/accounts', limit: 5, timeWindow: 1000 }, // 5 requests per second\r\n        { endpoint: '/api/v4/spot/time', limit: 100, timeWindow: 1000 } // 100 requests per second\r\n      ];\r\n\r\n      let rateLimitVulnerabilities = 0;\r\n      const rateLimitResults = [];\r\n\r\n      for (const test of rateLimitTests) {\r\n        try {\r\n          // Send requests exceeding the rate limit\r\n          const requests = [];\r\n          for (let i = 0; i < test.limit + 5; i++) {\r\n            requests.push(this.makeAPIRequest(test.endpoint));\r\n          }\r\n          \r\n          const results = await Promise.allSettled(requests);\r\n          const successfulRequests = results.filter(r => r.status === 'fulfilled').length;\r\n          \r\n          // Should not allow more requests than the limit\r\n          if (successfulRequests > test.limit) {\r\n            rateLimitVulnerabilities++;\r\n            rateLimitResults.push({\r\n              endpoint: test.endpoint,\r\n              vulnerability: 'RATE_LIMIT_BYPASS',\r\n              severity: 'MEDIUM',\r\n              allowedRequests: successfulRequests,\r\n              expectedLimit: test.limit\r\n            });\r\n          }\r\n          \r\n        } catch (error) {\r\n          // Rate limiting errors are expected\r\n        }\r\n      }\r\n\r\n      // Should not find rate limiting vulnerabilities\r\n      expect(rateLimitVulnerabilities).toBe(0);\r\n    });\r\n\r\n    it('should test API input validation', async () => {\r\n      const inputValidationTests = [\r\n        // SQL injection in API parameters\r\n        { endpoint: '/api/v4/spot/orders', param: 'symbol', value: \"BTC'; DROP TABLE orders; --\" },\r\n        { endpoint: '/api/v4/spot/accounts', param: 'currency', value: \"' OR '1'='1\" },\r\n        \r\n        // XSS in API parameters\r\n        { endpoint: '/api/v4/spot/orders', param: 'client_order_id', value: '<script>alert(\"xss\")</script>' },\r\n        { endpoint: '/api/v4/spot/accounts', param: 'type', value: 'javascript:alert(1)' },\r\n        \r\n        // Command injection\r\n        { endpoint: '/api/v4/spot/orders', param: 'amount', value: '1; cat /etc/passwd' },\r\n        { endpoint: '/api/v4/spot/accounts', param: 'page', value: '1 && rm -rf /' },\r\n        \r\n        // Buffer overflow attempts\r\n        { endpoint: '/api/v4/spot/orders', param: 'symbol', value: 'A'.repeat(10000) },\r\n        { endpoint: '/api/v4/spot/accounts', param: 'currency', value: 'B'.repeat(50000) },\r\n        \r\n        // Invalid data types\r\n        { endpoint: '/api/v4/spot/orders', param: 'amount', value: 'not_a_number' },\r\n        { endpoint: '/api/v4/spot/orders', param: 'price', value: 'invalid_price' }\r\n      ];\r\n\r\n      let inputValidationVulnerabilities = 0;\r\n      const validationResults = [];\r\n\r\n      for (const test of inputValidationTests) {\r\n        try {\r\n          const validationResult = await this.testAPIInputValidation(\r\n            test.endpoint,\r\n            test.param,\r\n            test.value\r\n          );\r\n          \r\n          if (validationResult.accepted) {\r\n            inputValidationVulnerabilities++;\r\n            validationResults.push({\r\n              endpoint: test.endpoint,\r\n              parameter: test.param,\r\n              vulnerability: 'INPUT_VALIDATION_BYPASS',\r\n              severity: 'HIGH',\r\n              maliciousInput: test.value.substring(0, 100) // Truncate for logging\r\n            });\r\n          }\r\n          \r\n        } catch (error) {\r\n          // Input validation errors are expected for malicious input\r\n        }\r\n      }\r\n\r\n      // Should not find input validation vulnerabilities\r\n      expect(inputValidationVulnerabilities).toBe(0);\r\n    });\r\n  });\r\n\r\n  describe('Continuous Security Monitoring', () => {\r\n    it('should perform automated security scans', async () => {\r\n      const scanResults = await securityManager.performSecurityScan();\r\n      \r\n      expect(scanResults).toBeDefined();\r\n      expect(typeof scanResults.isSecure).toBe('boolean');\r\n      expect(typeof scanResults.securityLevel).toBe('number');\r\n      expect(scanResults.securityLevel).toBeGreaterThanOrEqual(1);\r\n      expect(scanResults.securityLevel).toBeLessThanOrEqual(5);\r\n      expect(Array.isArray(scanResults.threats)).toBe(true);\r\n      expect(scanResults.lastScanTime).toBeInstanceOf(Date);\r\n      \r\n      // Security level should be high (4 or 5) for a secure system\r\n      expect(scanResults.securityLevel).toBeGreaterThanOrEqual(4);\r\n      \r\n      // Should not have critical threats\r\n      const criticalThreats = scanResults.threats.filter(t => t.severity >= 8);\r\n      expect(criticalThreats.length).toBe(0);\r\n    });\r\n\r\n    it('should detect security degradation over time', async () => {\r\n      const initialScan = await securityManager.performSecurityScan();\r\n      \r\n      // Simulate security degradation\r\n      await this.simulateSecurityDegradation();\r\n      \r\n      const degradedScan = await securityManager.performSecurityScan();\r\n      \r\n      // Should detect degradation\r\n      expect(degradedScan.securityLevel).toBeLessThanOrEqual(initialScan.securityLevel);\r\n      expect(degradedScan.threats.length).toBeGreaterThanOrEqual(initialScan.threats.length);\r\n      \r\n      // Should provide recommendations for improvement\r\n      expect(Array.isArray(degradedScan.recommendations)).toBe(true);\r\n      if (degradedScan.securityLevel < 4) {\r\n        expect(degradedScan.recommendations.length).toBeGreaterThan(0);\r\n      }\r\n    });\r\n\r\n    it('should validate security metrics and KPIs', async () => {\r\n      const securityMetrics = await securityMonitoring.getSecurityMetrics();\r\n      \r\n      expect(securityMetrics).toBeDefined();\r\n      expect(typeof securityMetrics.threatDetectionRate).toBe('number');\r\n      expect(typeof securityMetrics.falsePositiveRate).toBe('number');\r\n      expect(typeof securityMetrics.incidentResponseTime).toBe('number');\r\n      expect(typeof securityMetrics.systemUptime).toBe('number');\r\n      \r\n      // Validate acceptable security metrics\r\n      expect(securityMetrics.threatDetectionRate).toBeGreaterThan(0.95); // > 95%\r\n      expect(securityMetrics.falsePositiveRate).toBeLessThan(0.05); // < 5%\r\n      expect(securityMetrics.incidentResponseTime).toBeLessThan(300); // < 5 minutes\r\n      expect(securityMetrics.systemUptime).toBeGreaterThan(0.99); // > 99%\r\n    });\r\n  });\r\n});\r\n\r\n// Helper functions for testing\r\nasync function testPasswordStrength(password: string): Promise<{ isWeak: boolean; score: number }> {\r\n    // Implement password strength testing logic\r\n    const hasLowerCase = /[a-z]/.test(password);\r\n    const hasUpperCase = /[A-Z]/.test(password);\r\n    const hasNumbers = /\\d/.test(password);\r\n    const hasSpecialChars = /[!@#$%^&*(),.?\":{}|<>]/.test(password);\r\n    const isLongEnough = password.length >= 12;\r\n    \r\n    const score = [hasLowerCase, hasUpperCase, hasNumbers, hasSpecialChars, isLongEnough]\r\n      .filter(Boolean).length;\r\n    \r\n    return {\r\n      isWeak: score < 4,\r\n      score: score * 20 // Convert to percentage\r\n    };\r\n}\r\n\r\nasync function testSessionSecurity(sessionId: string): Promise<{ isSecure: boolean; issues: string[] }> {\r\n    const issues: string[] = [];\r\n    \r\n    // Check for predictable session IDs\r\n    if (sessionId.includes('predictable') || sessionId.includes('fixed')) {\r\n      issues.push('PREDICTABLE_SESSION_ID');\r\n    }\r\n    \r\n    // Check session ID length\r\n    if (sessionId.length < 32) {\r\n      issues.push('SHORT_SESSION_ID');\r\n    }\r\n    \r\n    // Check for sequential patterns\r\n    if (/\\d{3,}/.test(sessionId)) {\r\n      issues.push('SEQUENTIAL_PATTERN');\r\n    }\r\n    \r\n    return {\r\n      isSecure: issues.length === 0,\r\n      issues\r\n    };\r\n}\r\n\r\nasync function redactSensitiveData(data: string): Promise<string> {\r\n    // Implement data redaction logic\r\n    return data\r\n      .replace(/password=\\w+/gi, 'password=***REDACTED***')\r\n      .replace(/\\d{4}-\\d{4}-\\d{4}-\\d{4}/g, '****-****-****-****')\r\n      .replace(/api_key=\\w+/gi, 'api_key=***REDACTED***')\r\n      .replace(/secret=\\w+/gi, 'secret=***REDACTED***');\r\n}\r\n\r\nasync function checkComponentVulnerabilities(component: string, version: string): Promise<{\r\n    hasVulnerabilities: boolean;\r\n    vulnerabilities: string[];\r\n  }> {\r\n    // Simulate vulnerability database lookup\r\n    const knownVulnerabilities: Record<string, string[]> = {\r\n      'openssl:1.0.1': ['CVE-2014-0160', 'CVE-2014-0224'],\r\n      'nodejs:10.0.0': ['CVE-2018-12115', 'CVE-2018-12116'],\r\n      'express:3.0.0': ['CVE-2014-6393', 'CVE-2015-8851']\r\n    };\r\n    \r\n    const key = `${component}:${version}`;\r\n    const vulnerabilities = knownVulnerabilities[key] || [];\r\n    \r\n    return {\r\n      hasVulnerabilities: vulnerabilities.length > 0,\r\n      vulnerabilities\r\n    };\r\n}\r\n\r\nasync function testAPIAuthentication(endpoint: string, auth: string | null): Promise<{ allowed: boolean }> {\r\n    // Simulate API authentication testing\r\n    const publicEndpoints = ['/api/v4/spot/time'];\r\n    const isPublic = publicEndpoints.includes(endpoint);\r\n    \r\n    if (isPublic) {\r\n      return { allowed: true };\r\n    }\r\n    \r\n    if (!auth || auth === 'invalid_token' || auth === 'expired_token') {\r\n      return { allowed: false };\r\n    }\r\n    \r\n    return { allowed: auth === 'valid_token' };\r\n}\r\n\r\nasync function makeAPIRequest(endpoint: string): Promise<{ success: boolean }> {\r\n    // Simulate API request\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve({ success: true });\r\n      }, Math.random() * 100);\r\n    });\r\n}\r\n\r\nasync function testAPIInputValidation(endpoint: string, param: string, value: string): Promise<{ accepted: boolean }> {\r\n    // Simulate input validation testing\r\n    const maliciousPatterns = [\r\n      /DROP TABLE/i,\r\n      /<script>/i,\r\n      /javascript:/i,\r\n      /; cat /i,\r\n      /&& rm/i\r\n    ];\r\n    \r\n    const isMalicious = maliciousPatterns.some(pattern => pattern.test(value));\r\n    const isTooLong = value.length > 1000;\r\n    \r\n    // Should reject malicious or overly long input\r\n    return { accepted: !isMalicious && !isTooLong };\r\n}\r\n\r\nasync function simulateSecurityDegradation(): Promise<void> {\r\n    // Simulate various security issues for testing\r\n    // This would be used to test the monitoring system's ability to detect degradation\r\n}"],"version":3}