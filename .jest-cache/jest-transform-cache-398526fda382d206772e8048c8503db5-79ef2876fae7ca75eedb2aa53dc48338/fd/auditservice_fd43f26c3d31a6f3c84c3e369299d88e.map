{"version":3,"names":["cov_9uxc2hz10","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","crypto_1","require","logger_1","encryption_service_1","AuditService","sequenceNumber","lastEntryHash","auditSigningKey","auditCache","Map","MAX_CACHE_SIZE","constructor","initializeAuditSigning","initializeAuditChain","signingKeyHex","process","env","AUDIT_SIGNING_KEY","encryptionService","generateSecureKey","Buffer","from","logger","info","error","Error","lastEntry","getLastAuditEntry","currentHash","calculateGenesisHash","lastHash","substring","createAuditEntry","auditEntry","riskScore","calculateRiskScore","complianceTags","determineComplianceTags","enhancedEntry","previousHash","signature","relatedEntries","calculateEntryHash","signAuditEntry","storeAuditEntry","cacheAuditEntry","audit","verifyAuditChain","startSequence","endSequence","errors","isValid","entries","getAuditEntries","limit","offset","entry","push","calculatedHash","calculatedSignature","query","getAuditStatistics","totalEntries","entriesByType","entriesByResult","averageRiskScore","highRiskEntries","failedOperations","timeRange","Date","exportAuditData","format","JSON","stringify","convertToCSV","convertToXML","eventRiskMap","eventType","result","actor","Math","min","tags","includes","hashData","auditId","resource","action","timestamp","auditData","createHash","update","digest","signatureData","createHmac","debug","size","firstKey","keys","next","value","delete","set","length","headers","Object","join","rows","map","values","String","xml","key","xmlValue","getStatus","cacheSize","now","exports","auditService"],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\audit-service.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * AI CRYPTO TRADING AGENT - COMPREHENSIVE AUDIT SERVICE\r\n * =============================================================================\r\n * \r\n * This service provides tamper-proof audit logging capabilities for the AI\r\n * crypto trading agent. It maintains comprehensive audit trails for all\r\n * security events, trading operations, and system activities.\r\n * \r\n * CRITICAL SECURITY NOTICE:\r\n * This service creates legal audit trails for financial operations.\r\n * All audit logs must be protected from tampering and maintained for\r\n * compliance with financial regulations.\r\n * \r\n * Features:\r\n * - Tamper-proof audit logging with hash chains\r\n * - Comprehensive event tracking and correlation\r\n * - Compliance reporting and data export\r\n * - Forensic analysis capabilities\r\n * - Automated integrity verification\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport { createHash, createHmac } from 'crypto';\r\nimport { logger, AuditLogEntry } from '@/core/logging/logger';\r\nimport { encryptionService } from '@/security/encryption-service';\r\n\r\n/**\r\n * Interface for enhanced audit entry\r\n * Extends basic audit entry with additional security fields\r\n */\r\nexport interface EnhancedAuditEntry extends AuditLogEntry {\r\n  /** Sequence number for ordering */\r\n  sequenceNumber: number;\r\n  /** Hash of previous audit entry for chain integrity */\r\n  previousHash: string;\r\n  /** Hash of current entry */\r\n  currentHash: string;\r\n  /** Digital signature of the entry */\r\n  signature: string;\r\n  /** Risk score of the audited action */\r\n  riskScore: number;\r\n  /** Compliance tags */\r\n  complianceTags: string[];\r\n  /** Related audit entries */\r\n  relatedEntries: string[];\r\n}\r\n\r\n/**\r\n * Interface for audit query parameters\r\n */\r\nexport interface AuditQuery {\r\n  /** Start date for query */\r\n  startDate?: Date;\r\n  /** End date for query */\r\n  endDate?: Date;\r\n  /** Event type filter */\r\n  eventType?: string;\r\n  /** Actor filter */\r\n  actor?: string;\r\n  /** Resource filter */\r\n  resource?: string;\r\n  /** Result filter */\r\n  result?: 'SUCCESS' | 'FAILURE' | 'PARTIAL';\r\n  /** Risk score range */\r\n  riskScoreMin?: number;\r\n  /** Risk score range */\r\n  riskScoreMax?: number;\r\n  /** Compliance tags */\r\n  complianceTags?: string[];\r\n  /** Maximum number of results */\r\n  limit?: number;\r\n  /** Offset for pagination */\r\n  offset?: number;\r\n}\r\n\r\n/**\r\n * Interface for audit statistics\r\n */\r\nexport interface AuditStatistics {\r\n  /** Total number of audit entries */\r\n  totalEntries: number;\r\n  /** Entries by event type */\r\n  entriesByType: Record<string, number>;\r\n  /** Entries by result */\r\n  entriesByResult: Record<string, number>;\r\n  /** Average risk score */\r\n  averageRiskScore: number;\r\n  /** High-risk entries count */\r\n  highRiskEntries: number;\r\n  /** Failed operations count */\r\n  failedOperations: number;\r\n  /** Time range of audit data */\r\n  timeRange: { start: Date; end: Date };\r\n}\r\n\r\n/**\r\n * Comprehensive audit service with tamper-proof logging\r\n * Provides secure audit trail capabilities for compliance and forensics\r\n */\r\nexport class AuditService {\r\n  /** Current sequence number for audit entries */\r\n  private sequenceNumber: number = 0;\r\n  \r\n  /** Hash of the last audit entry for chain integrity */\r\n  private lastEntryHash: string = '';\r\n  \r\n  /** HMAC key for audit entry signatures */\r\n  private auditSigningKey: Buffer;\r\n  \r\n  /** In-memory audit cache for performance */\r\n  private auditCache: Map<string, EnhancedAuditEntry> = new Map();\r\n  \r\n  /** Maximum cache size */\r\n  private static readonly MAX_CACHE_SIZE = 1000;\r\n\r\n  constructor() {\r\n    // Initialize audit signing key\r\n    this.initializeAuditSigning();\r\n    \r\n    // Load last sequence number and hash\r\n    this.initializeAuditChain();\r\n  }\r\n\r\n  /**\r\n   * Initialize audit signing key for tamper-proof signatures\r\n   */\r\n  private async initializeAuditSigning(): Promise<void> {\r\n    try {\r\n      // Generate or retrieve audit signing key\r\n      const signingKeyHex = process.env.AUDIT_SIGNING_KEY || \r\n                           encryptionService.generateSecureKey(32);\r\n      \r\n      this.auditSigningKey = Buffer.from(signingKeyHex, 'hex');\r\n      \r\n      logger.info('üîê Audit signing system initialized');\r\n      \r\n    } catch (error) {\r\n      logger.error('‚ùå Failed to initialize audit signing:', error);\r\n      throw new Error('Audit service initialization failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialize audit chain by loading last entry\r\n   */\r\n  private async initializeAuditChain(): Promise<void> {\r\n    try {\r\n      // Load last audit entry to continue chain\r\n      const lastEntry = await this.getLastAuditEntry();\r\n      \r\n      if (lastEntry) {\r\n        this.sequenceNumber = lastEntry.sequenceNumber;\r\n        this.lastEntryHash = lastEntry.currentHash;\r\n      } else {\r\n        // Initialize genesis entry\r\n        this.sequenceNumber = 0;\r\n        this.lastEntryHash = this.calculateGenesisHash();\r\n      }\r\n      \r\n      logger.info('üîó Audit chain initialized', {\r\n        sequenceNumber: this.sequenceNumber,\r\n        lastHash: this.lastEntryHash.substring(0, 16) + '...'\r\n      });\r\n      \r\n    } catch (error) {\r\n      logger.error('‚ùå Failed to initialize audit chain:', error);\r\n      throw new Error('Audit chain initialization failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create tamper-proof audit entry\r\n   * Generates audit entry with hash chain and digital signature\r\n   * \r\n   * @param auditEntry - Basic audit entry data\r\n   * @returns Promise<EnhancedAuditEntry> Enhanced audit entry with security fields\r\n   */\r\n  public async createAuditEntry(auditEntry: AuditLogEntry): Promise<EnhancedAuditEntry> {\r\n    try {\r\n      // Increment sequence number\r\n      this.sequenceNumber++;\r\n      \r\n      // Calculate risk score\r\n      const riskScore = this.calculateRiskScore(auditEntry);\r\n      \r\n      // Determine compliance tags\r\n      const complianceTags = this.determineComplianceTags(auditEntry);\r\n      \r\n      // Create enhanced audit entry\r\n      const enhancedEntry: EnhancedAuditEntry = {\r\n        ...auditEntry,\r\n        sequenceNumber: this.sequenceNumber,\r\n        previousHash: this.lastEntryHash,\r\n        currentHash: '', // Will be calculated\r\n        signature: '', // Will be calculated\r\n        riskScore,\r\n        complianceTags,\r\n        relatedEntries: []\r\n      };\r\n      \r\n      // Calculate current hash\r\n      enhancedEntry.currentHash = this.calculateEntryHash(enhancedEntry);\r\n      \r\n      // Generate digital signature\r\n      enhancedEntry.signature = this.signAuditEntry(enhancedEntry);\r\n      \r\n      // Update last entry hash for chain\r\n      this.lastEntryHash = enhancedEntry.currentHash;\r\n      \r\n      // Store audit entry\r\n      await this.storeAuditEntry(enhancedEntry);\r\n      \r\n      // Cache for performance\r\n      this.cacheAuditEntry(enhancedEntry);\r\n      \r\n      // Log to standard audit logger\r\n      logger.audit(auditEntry);\r\n      \r\n      return enhancedEntry;\r\n      \r\n    } catch (error) {\r\n      logger.error('‚ùå Failed to create audit entry:', error);\r\n      throw new Error('Audit entry creation failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verify audit chain integrity\r\n   * Checks hash chain and signatures for tampering\r\n   * \r\n   * @param startSequence - Starting sequence number (optional)\r\n   * @param endSequence - Ending sequence number (optional)\r\n   * @returns Promise<{ isValid: boolean; errors: string[] }> Verification result\r\n   */\r\n  public async verifyAuditChain(\r\n    startSequence?: number,\r\n    endSequence?: number\r\n  ): Promise<{ isValid: boolean; errors: string[] }> {\r\n    try {\r\n      const errors: string[] = [];\r\n      let isValid = true;\r\n      \r\n      // Get audit entries in sequence\r\n      const entries = await this.getAuditEntries({\r\n        limit: endSequence ? endSequence - (startSequence || 0) : undefined,\r\n        offset: startSequence || 0\r\n      });\r\n      \r\n      let previousHash = startSequence === 0 ? this.calculateGenesisHash() : '';\r\n      \r\n      for (const entry of entries) {\r\n        // Verify hash chain\r\n        if (entry.previousHash !== previousHash) {\r\n          errors.push(`Hash chain broken at sequence ${entry.sequenceNumber}`);\r\n          isValid = false;\r\n        }\r\n        \r\n        // Verify entry hash\r\n        const calculatedHash = this.calculateEntryHash(entry);\r\n        if (entry.currentHash !== calculatedHash) {\r\n          errors.push(`Entry hash invalid at sequence ${entry.sequenceNumber}`);\r\n          isValid = false;\r\n        }\r\n        \r\n        // Verify signature\r\n        const calculatedSignature = this.signAuditEntry(entry);\r\n        if (entry.signature !== calculatedSignature) {\r\n          errors.push(`Signature invalid at sequence ${entry.sequenceNumber}`);\r\n          isValid = false;\r\n        }\r\n        \r\n        previousHash = entry.currentHash;\r\n      }\r\n      \r\n      return { isValid, errors };\r\n      \r\n    } catch (error) {\r\n      logger.error('‚ùå Failed to verify audit chain:', error);\r\n      return { isValid: false, errors: ['Verification process failed'] };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Query audit entries with filtering\r\n   * Retrieves audit entries based on specified criteria\r\n   * \r\n   * @param query - Query parameters\r\n   * @returns Promise<EnhancedAuditEntry[]> Matching audit entries\r\n   */\r\n  public async getAuditEntries(query: AuditQuery = {}): Promise<EnhancedAuditEntry[]> {\r\n    try {\r\n      // Implementation would query secure audit database\r\n      // For now, return empty array as placeholder\r\n      return [];\r\n      \r\n    } catch (error) {\r\n      logger.error('‚ùå Failed to query audit entries:', error);\r\n      throw new Error('Audit query failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate audit statistics\r\n   * Provides comprehensive statistics about audit data\r\n   * \r\n   * @param query - Optional query to filter statistics\r\n   * @returns Promise<AuditStatistics> Audit statistics\r\n   */\r\n  public async getAuditStatistics(query?: AuditQuery): Promise<AuditStatistics> {\r\n    try {\r\n      // Implementation would analyze audit database\r\n      // For now, return placeholder statistics\r\n      return {\r\n        totalEntries: this.sequenceNumber,\r\n        entriesByType: {},\r\n        entriesByResult: {},\r\n        averageRiskScore: 0,\r\n        highRiskEntries: 0,\r\n        failedOperations: 0,\r\n        timeRange: { start: new Date(), end: new Date() }\r\n      };\r\n      \r\n    } catch (error) {\r\n      logger.error('‚ùå Failed to generate audit statistics:', error);\r\n      throw new Error('Audit statistics generation failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Export audit data for compliance\r\n   * Generates audit reports in various formats\r\n   * \r\n   * @param query - Query parameters for export\r\n   * @param format - Export format ('json', 'csv', 'xml')\r\n   * @returns Promise<string> Exported audit data\r\n   */\r\n  public async exportAuditData(\r\n    query: AuditQuery,\r\n    format: 'json' | 'csv' | 'xml' = 'json'\r\n  ): Promise<string> {\r\n    try {\r\n      const entries = await this.getAuditEntries(query);\r\n      \r\n      switch (format) {\r\n        case 'json':\r\n          return JSON.stringify(entries, null, 2);\r\n        \r\n        case 'csv':\r\n          return this.convertToCSV(entries);\r\n        \r\n        case 'xml':\r\n          return this.convertToXML(entries);\r\n        \r\n        default:\r\n          throw new Error(`Unsupported export format: ${format}`);\r\n      }\r\n      \r\n    } catch (error) {\r\n      logger.error('‚ùå Failed to export audit data:', error);\r\n      throw new Error('Audit data export failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate risk score for audit entry\r\n   * Assigns risk score based on event type and context\r\n   * \r\n   * @param auditEntry - Audit entry to score\r\n   * @returns number Risk score (0-10)\r\n   */\r\n  private calculateRiskScore(auditEntry: AuditLogEntry): number {\r\n    let riskScore = 0;\r\n    \r\n    // Base risk by event type\r\n    const eventRiskMap: Record<string, number> = {\r\n      'LOGIN_ATTEMPT': 2,\r\n      'LOGIN_SUCCESS': 1,\r\n      'LOGIN_FAILURE': 4,\r\n      'API_ACCESS': 1,\r\n      'TRADE_EXECUTION': 3,\r\n      'FUND_TRANSFER': 8,\r\n      'CREDENTIAL_ACCESS': 6,\r\n      'SYSTEM_CONFIGURATION': 5,\r\n      'SECURITY_INCIDENT': 9,\r\n      'EMERGENCY_SHUTDOWN': 10\r\n    };\r\n    \r\n    riskScore = eventRiskMap[auditEntry.eventType] || 1;\r\n    \r\n    // Increase risk for failures\r\n    if (auditEntry.result === 'FAILURE') {\r\n      riskScore += 2;\r\n    }\r\n    \r\n    // Increase risk for external actors\r\n    if (auditEntry.actor !== 'SYSTEM') {\r\n      riskScore += 1;\r\n    }\r\n    \r\n    // Cap at maximum risk score\r\n    return Math.min(riskScore, 10);\r\n  }\r\n\r\n  /**\r\n   * Determine compliance tags for audit entry\r\n   * Assigns relevant compliance tags based on event type\r\n   * \r\n   * @param auditEntry - Audit entry to tag\r\n   * @returns string[] Compliance tags\r\n   */\r\n  private determineComplianceTags(auditEntry: AuditLogEntry): string[] {\r\n    const tags: string[] = [];\r\n    \r\n    // Financial compliance tags\r\n    if (auditEntry.eventType.includes('TRADE') || auditEntry.eventType.includes('FUND')) {\r\n      tags.push('FINANCIAL_TRANSACTION');\r\n    }\r\n    \r\n    // Security compliance tags\r\n    if (auditEntry.eventType.includes('SECURITY') || auditEntry.eventType.includes('LOGIN')) {\r\n      tags.push('SECURITY_EVENT');\r\n    }\r\n    \r\n    // Data protection tags\r\n    if (auditEntry.eventType.includes('CREDENTIAL') || auditEntry.eventType.includes('DATA')) {\r\n      tags.push('DATA_PROTECTION');\r\n    }\r\n    \r\n    // High-risk tags\r\n    if (this.calculateRiskScore(auditEntry) >= 7) {\r\n      tags.push('HIGH_RISK');\r\n    }\r\n    \r\n    return tags;\r\n  }\r\n\r\n  /**\r\n   * Calculate hash for audit entry\r\n   * Generates SHA-256 hash of entry data\r\n   * \r\n   * @param entry - Audit entry to hash\r\n   * @returns string SHA-256 hash\r\n   */\r\n  private calculateEntryHash(entry: Partial<EnhancedAuditEntry>): string {\r\n    const hashData = {\r\n      auditId: entry.auditId,\r\n      eventType: entry.eventType,\r\n      actor: entry.actor,\r\n      resource: entry.resource,\r\n      action: entry.action,\r\n      result: entry.result,\r\n      timestamp: entry.timestamp,\r\n      sequenceNumber: entry.sequenceNumber,\r\n      previousHash: entry.previousHash,\r\n      auditData: entry.auditData\r\n    };\r\n    \r\n    return createHash('sha256')\r\n      .update(JSON.stringify(hashData))\r\n      .digest('hex');\r\n  }\r\n\r\n  /**\r\n   * Sign audit entry with HMAC\r\n   * Generates tamper-proof signature for audit entry\r\n   * \r\n   * @param entry - Audit entry to sign\r\n   * @returns string HMAC signature\r\n   */\r\n  private signAuditEntry(entry: Partial<EnhancedAuditEntry>): string {\r\n    const signatureData = `${entry.auditId}:${entry.currentHash}:${entry.sequenceNumber}`;\r\n    \r\n    return createHmac('sha256', this.auditSigningKey)\r\n      .update(signatureData)\r\n      .digest('hex');\r\n  }\r\n\r\n  /**\r\n   * Calculate genesis hash for audit chain\r\n   * Generates initial hash for audit chain\r\n   * \r\n   * @returns string Genesis hash\r\n   */\r\n  private calculateGenesisHash(): string {\r\n    return createHash('sha256')\r\n      .update('AI_CRYPTO_TRADING_AGENT_AUDIT_GENESIS')\r\n      .digest('hex');\r\n  }\r\n\r\n  /**\r\n   * Store audit entry securely\r\n   * Persists audit entry to secure storage\r\n   * \r\n   * @param entry - Enhanced audit entry to store\r\n   */\r\n  private async storeAuditEntry(entry: EnhancedAuditEntry): Promise<void> {\r\n    // Implementation would store in secure audit database\r\n    // For now, this is a placeholder\r\n    logger.debug('Audit entry stored securely', {\r\n      auditId: entry.auditId,\r\n      sequenceNumber: entry.sequenceNumber\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get last audit entry from storage\r\n   * Retrieves the most recent audit entry\r\n   * \r\n   * @returns Promise<EnhancedAuditEntry | null> Last audit entry or null\r\n   */\r\n  private async getLastAuditEntry(): Promise<EnhancedAuditEntry | null> {\r\n    // Implementation would query secure audit database\r\n    // For now, return null as placeholder\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Cache audit entry for performance\r\n   * Stores audit entry in memory cache\r\n   * \r\n   * @param entry - Audit entry to cache\r\n   */\r\n  private cacheAuditEntry(entry: EnhancedAuditEntry): void {\r\n    // Maintain cache size limit\r\n    if (this.auditCache.size >= AuditService.MAX_CACHE_SIZE) {\r\n      const firstKey = this.auditCache.keys().next().value;\r\n      this.auditCache.delete(firstKey);\r\n    }\r\n    \r\n    this.auditCache.set(entry.auditId, entry);\r\n  }\r\n\r\n  /**\r\n   * Convert audit entries to CSV format\r\n   * Generates CSV representation of audit data\r\n   * \r\n   * @param entries - Audit entries to convert\r\n   * @returns string CSV data\r\n   */\r\n  private convertToCSV(entries: EnhancedAuditEntry[]): string {\r\n    if (entries.length === 0) return '';\r\n    \r\n    const headers = Object.keys(entries[0]).join(',');\r\n    const rows = entries.map(entry => \r\n      Object.values(entry).map(value => \r\n        typeof value === 'object' ? JSON.stringify(value) : String(value)\r\n      ).join(',')\r\n    );\r\n    \r\n    return [headers, ...rows].join('\\n');\r\n  }\r\n\r\n  /**\r\n   * Convert audit entries to XML format\r\n   * Generates XML representation of audit data\r\n   * \r\n   * @param entries - Audit entries to convert\r\n   * @returns string XML data\r\n   */\r\n  private convertToXML(entries: EnhancedAuditEntry[]): string {\r\n    let xml = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<auditEntries>\\n';\r\n    \r\n    for (const entry of entries) {\r\n      xml += '  <auditEntry>\\n';\r\n      for (const [key, value] of Object.entries(entry)) {\r\n        const xmlValue = typeof value === 'object' ? \r\n          JSON.stringify(value) : String(value);\r\n        xml += `    <${key}>${xmlValue}</${key}>\\n`;\r\n      }\r\n      xml += '  </auditEntry>\\n';\r\n    }\r\n    \r\n    xml += '</auditEntries>';\r\n    return xml;\r\n  }\r\n\r\n  /**\r\n   * Get audit service status\r\n   * Returns current status for monitoring\r\n   * \r\n   * @returns Object containing status information\r\n   */\r\n  public getStatus(): {\r\n    sequenceNumber: number;\r\n    cacheSize: number;\r\n    lastEntryHash: string;\r\n    timestamp: number;\r\n  } {\r\n    return {\r\n      sequenceNumber: this.sequenceNumber,\r\n      cacheSize: this.auditCache.size,\r\n      lastEntryHash: this.lastEntryHash.substring(0, 16) + '...',\r\n      timestamp: Date.now()\r\n    };\r\n  }\r\n}\r\n\r\n// Create and export singleton instance\r\nexport const auditService = new AuditService();\r\n\r\n// =============================================================================\r\n// AUDIT SECURITY NOTES\r\n// =============================================================================\r\n// 1. All audit entries are cryptographically signed for tamper detection\r\n// 2. Hash chains ensure audit trail integrity and detect tampering\r\n// 3. Risk scores help prioritize security analysis and response\r\n// 4. Compliance tags enable automated regulatory reporting\r\n// 5. Audit data export supports compliance and forensic analysis\r\n// 6. Chain verification should be performed regularly\r\n// 7. Audit signing keys must be protected and rotated regularly\r\n// 8. All audit operations are themselves audited for accountability\r\n// ============================================================================="],"mappings":"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","ignoreList":[]}