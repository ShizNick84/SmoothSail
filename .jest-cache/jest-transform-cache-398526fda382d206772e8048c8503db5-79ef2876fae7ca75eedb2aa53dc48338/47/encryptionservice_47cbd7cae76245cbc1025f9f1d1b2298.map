{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\encryption-service.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\encryption-service.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * AI CRYPTO TRADING AGENT - MILITARY-GRADE ENCRYPTION SERVICE\r\n * =============================================================================\r\n * \r\n * This service provides military-grade encryption capabilities for protecting\r\n * sensitive trading data, API credentials, and financial information.\r\n * \r\n * CRITICAL SECURITY NOTICE:\r\n * This service protects access to real financial assets and trading capital.\r\n * Any modifications must be thoroughly tested and security audited.\r\n * \r\n * Encryption Standards:\r\n * - AES-256-GCM for symmetric encryption\r\n * - RSA-4096 for asymmetric encryption\r\n * - PBKDF2 with 100,000 iterations for key derivation\r\n * - Cryptographically secure random number generation\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport { createCipherGCM, createDecipherGCM, randomBytes, pbkdf2Sync, createHash } from 'crypto';\r\nimport { logger } from '@/core/logging/logger';\r\n\r\n/**\r\n * Interface for encrypted data structure\r\n * Contains all necessary components for secure decryption\r\n */\r\nexport interface EncryptedData {\r\n  /** Base64 encoded encrypted data */\r\n  encryptedData: string;\r\n  /** Base64 encoded initialization vector */\r\n  iv: string;\r\n  /** Base64 encoded authentication tag */\r\n  authTag: string;\r\n  /** Base64 encoded salt used for key derivation */\r\n  salt: string;\r\n  /** Encryption algorithm used */\r\n  algorithm: string;\r\n  /** Timestamp when encryption was performed */\r\n  timestamp: number;\r\n}\r\n\r\n/**\r\n * Interface for key derivation parameters\r\n * Configures the security parameters for key generation\r\n */\r\nexport interface KeyDerivationParams {\r\n  /** Number of PBKDF2 iterations (minimum 100,000) */\r\n  iterations: number;\r\n  /** Salt length in bytes (minimum 32) */\r\n  saltLength: number;\r\n  /** Derived key length in bytes (32 for AES-256) */\r\n  keyLength: number;\r\n  /** Hash algorithm for PBKDF2 */\r\n  hashAlgorithm: string;\r\n}\r\n\r\n/**\r\n * Military-grade encryption service for protecting sensitive trading data\r\n * Implements industry-standard encryption with additional security measures\r\n */\r\nexport class EncryptionService {\r\n  /** Default encryption algorithm */\r\n  private static readonly DEFAULT_ALGORITHM = 'aes-256-gcm';\r\n  \r\n  /** Default key derivation parameters */\r\n  private static readonly DEFAULT_KEY_PARAMS: KeyDerivationParams = {\r\n    iterations: 100000, // NIST recommended minimum\r\n    saltLength: 32,     // 256 bits\r\n    keyLength: 32,      // 256 bits for AES-256\r\n    hashAlgorithm: 'sha256'\r\n  };\r\n\r\n  /** Master encryption key loaded from environment */\r\n  private masterKey: Buffer | null = null;\r\n\r\n  constructor() {\r\n    // Initialize the encryption service\r\n    this.initializeMasterKey();\r\n  }\r\n\r\n  /**\r\n   * Initialize the master encryption key from environment\r\n   * The master key is used for encrypting other keys and sensitive data\r\n   * \r\n   * @throws Error if master key is not configured or invalid\r\n   */\r\n  private initializeMasterKey(): void {\r\n    try {\r\n      const masterKeyHex = process.env.MASTER_ENCRYPTION_KEY;\r\n      \r\n      if (!masterKeyHex) {\r\n        throw new Error('MASTER_ENCRYPTION_KEY environment variable not set');\r\n      }\r\n      \r\n      // Validate master key length (minimum 64 hex characters = 32 bytes)\r\n      if (masterKeyHex.length < 64) {\r\n        throw new Error('Master encryption key must be at least 32 bytes (64 hex characters)');\r\n      }\r\n      \r\n      // Convert hex string to buffer\r\n      this.masterKey = Buffer.from(masterKeyHex, 'hex');\r\n      \r\n      logger.info('🔐 Master encryption key initialized successfully');\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to initialize master encryption key:', error);\r\n      throw new Error('Encryption service initialization failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Encrypt sensitive data using AES-256-GCM with key derivation\r\n   * Provides authenticated encryption with additional data protection\r\n   * \r\n   * @param data - The plaintext data to encrypt\r\n   * @param password - Password for key derivation (optional, uses master key if not provided)\r\n   * @param keyParams - Key derivation parameters (optional, uses defaults)\r\n   * @returns Promise<EncryptedData> The encrypted data structure\r\n   * @throws Error if encryption fails\r\n   */\r\n  public async encryptData(\r\n    data: string,\r\n    password?: string,\r\n    keyParams: Partial<KeyDerivationParams> = {}\r\n  ): Promise<EncryptedData> {\r\n    try {\r\n      // Merge with default parameters\r\n      const params = { ...EncryptionService.DEFAULT_KEY_PARAMS, ...keyParams };\r\n      \r\n      // Generate cryptographically secure random salt\r\n      const salt = randomBytes(params.saltLength);\r\n      \r\n      // Derive encryption key from password or master key\r\n      const key = this.deriveKey(password || this.masterKey!.toString('hex'), salt, params);\r\n      \r\n      // Generate random initialization vector\r\n      const iv = randomBytes(12); // 96 bits for GCM mode\r\n      \r\n      // Create cipher with AES-256-GCM\r\n      const cipher = createCipherGCM(EncryptionService.DEFAULT_ALGORITHM, key, iv);\r\n      \r\n      // Encrypt the data\r\n      let encrypted = cipher.update(data, 'utf8');\r\n      encrypted = Buffer.concat([encrypted, cipher.final()]);\r\n      \r\n      // Get authentication tag\r\n      const authTag = cipher.getAuthTag();\r\n      \r\n      // Create encrypted data structure\r\n      const encryptedData: EncryptedData = {\r\n        encryptedData: encrypted.toString('base64'),\r\n        iv: iv.toString('base64'),\r\n        authTag: authTag.toString('base64'),\r\n        salt: salt.toString('base64'),\r\n        algorithm: EncryptionService.DEFAULT_ALGORITHM,\r\n        timestamp: Date.now()\r\n      };\r\n      \r\n      // Log encryption operation (without sensitive data)\r\n      logger.debug('🔒 Data encrypted successfully', {\r\n        algorithm: encryptedData.algorithm,\r\n        dataLength: data.length,\r\n        timestamp: encryptedData.timestamp\r\n      });\r\n      \r\n      return encryptedData;\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Encryption failed:', error);\r\n      throw new Error('Failed to encrypt data');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Decrypt data using AES-256-GCM with authentication verification\r\n   * Verifies data integrity and authenticity before returning plaintext\r\n   * \r\n   * @param encryptedData - The encrypted data structure\r\n   * @param password - Password for key derivation (optional, uses master key if not provided)\r\n   * @returns Promise<string> The decrypted plaintext data\r\n   * @throws Error if decryption fails or authentication verification fails\r\n   */\r\n  public async decryptData(\r\n    encryptedData: EncryptedData,\r\n    password?: string\r\n  ): Promise<string> {\r\n    try {\r\n      // Validate encrypted data structure\r\n      this.validateEncryptedData(encryptedData);\r\n      \r\n      // Convert base64 components back to buffers\r\n      const encrypted = Buffer.from(encryptedData.encryptedData, 'base64');\r\n      const iv = Buffer.from(encryptedData.iv, 'base64');\r\n      const authTag = Buffer.from(encryptedData.authTag, 'base64');\r\n      const salt = Buffer.from(encryptedData.salt, 'base64');\r\n      \r\n      // Derive the same key used for encryption\r\n      const key = this.deriveKey(\r\n        password || this.masterKey!.toString('hex'),\r\n        salt,\r\n        EncryptionService.DEFAULT_KEY_PARAMS\r\n      );\r\n      \r\n      // Create decipher with AES-256-GCM\r\n      const decipher = createDecipherGCM(encryptedData.algorithm, key, iv);\r\n      decipher.setAuthTag(authTag);\r\n      \r\n      // Decrypt the data\r\n      let decrypted = decipher.update(encrypted);\r\n      decrypted = Buffer.concat([decrypted, decipher.final()]);\r\n      \r\n      // Convert to string\r\n      const plaintext = decrypted.toString('utf8');\r\n      \r\n      // Log decryption operation (without sensitive data)\r\n      logger.debug('🔓 Data decrypted successfully', {\r\n        algorithm: encryptedData.algorithm,\r\n        dataLength: plaintext.length,\r\n        originalTimestamp: encryptedData.timestamp\r\n      });\r\n      \r\n      return plaintext;\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Decryption failed:', error);\r\n      throw new Error('Failed to decrypt data - data may be corrupted or tampered with');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Encrypt API credentials with additional security measures\r\n   * Specialized encryption for protecting trading API keys and secrets\r\n   * \r\n   * @param credentials - Object containing API credentials\r\n   * @returns Promise<EncryptedData> Encrypted credentials\r\n   */\r\n  public async encryptCredentials(credentials: Record<string, string>): Promise<EncryptedData> {\r\n    try {\r\n      // Add timestamp and integrity hash to credentials\r\n      const credentialsWithMetadata = {\r\n        ...credentials,\r\n        _timestamp: Date.now(),\r\n        _integrity: this.calculateIntegrityHash(credentials)\r\n      };\r\n      \r\n      // Serialize credentials to JSON\r\n      const credentialsJson = JSON.stringify(credentialsWithMetadata);\r\n      \r\n      // Encrypt with additional security parameters\r\n      const encrypted = await this.encryptData(credentialsJson, undefined, {\r\n        iterations: 150000, // Higher iterations for credentials\r\n        saltLength: 64      // Larger salt for credentials\r\n      });\r\n      \r\n      logger.info('🔐 API credentials encrypted successfully');\r\n      \r\n      return encrypted;\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to encrypt credentials:', error);\r\n      throw new Error('Credential encryption failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Decrypt API credentials with integrity verification\r\n   * Verifies credential integrity and returns decrypted credentials\r\n   * \r\n   * @param encryptedCredentials - Encrypted credentials data\r\n   * @returns Promise<Record<string, string>> Decrypted credentials\r\n   * @throws Error if decryption fails or integrity check fails\r\n   */\r\n  public async decryptCredentials(\r\n    encryptedCredentials: EncryptedData\r\n  ): Promise<Record<string, string>> {\r\n    try {\r\n      // Decrypt the credentials JSON\r\n      const credentialsJson = await this.decryptData(encryptedCredentials);\r\n      \r\n      // Parse credentials from JSON\r\n      const credentialsWithMetadata = JSON.parse(credentialsJson);\r\n      \r\n      // Extract metadata\r\n      const { _timestamp, _integrity, ...credentials } = credentialsWithMetadata;\r\n      \r\n      // Verify integrity hash\r\n      const expectedIntegrity = this.calculateIntegrityHash(credentials);\r\n      if (_integrity !== expectedIntegrity) {\r\n        throw new Error('Credential integrity verification failed');\r\n      }\r\n      \r\n      // Check credential age (warn if older than 30 days)\r\n      const age = Date.now() - _timestamp;\r\n      const thirtyDays = 30 * 24 * 60 * 60 * 1000;\r\n      \r\n      if (age > thirtyDays) {\r\n        logger.warn('⚠️ Decrypted credentials are older than 30 days', {\r\n          age: Math.floor(age / (24 * 60 * 60 * 1000)),\r\n          timestamp: _timestamp\r\n        });\r\n      }\r\n      \r\n      logger.info('🔓 API credentials decrypted and verified successfully');\r\n      \r\n      return credentials;\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to decrypt credentials:', error);\r\n      throw new Error('Credential decryption failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate a cryptographically secure random key\r\n   * Used for generating new encryption keys and secrets\r\n   * \r\n   * @param length - Key length in bytes (default: 32 for AES-256)\r\n   * @returns string Hex-encoded random key\r\n   */\r\n  public generateSecureKey(length: number = 32): string {\r\n    try {\r\n      const key = randomBytes(length);\r\n      return key.toString('hex');\r\n    } catch (error) {\r\n      logger.error('❌ Failed to generate secure key:', error);\r\n      throw new Error('Key generation failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Derive encryption key from password using PBKDF2\r\n   * Implements secure key derivation with configurable parameters\r\n   * \r\n   * @param password - Password or master key for derivation\r\n   * @param salt - Cryptographic salt\r\n   * @param params - Key derivation parameters\r\n   * @returns Buffer The derived key\r\n   */\r\n  private deriveKey(password: string, salt: Buffer, params: KeyDerivationParams): Buffer {\r\n    return pbkdf2Sync(password, salt, params.iterations, params.keyLength, params.hashAlgorithm);\r\n  }\r\n\r\n  /**\r\n   * Calculate integrity hash for credential verification\r\n   * Creates a hash of credentials for tamper detection\r\n   * \r\n   * @param credentials - Credentials object to hash\r\n   * @returns string SHA-256 hash of credentials\r\n   */\r\n  private calculateIntegrityHash(credentials: Record<string, string>): string {\r\n    // Sort keys for consistent hashing\r\n    const sortedKeys = Object.keys(credentials).sort();\r\n    const sortedCredentials = sortedKeys.map(key => `${key}:${credentials[key]}`).join('|');\r\n    \r\n    return createHash('sha256').update(sortedCredentials).digest('hex');\r\n  }\r\n\r\n  /**\r\n   * Validate encrypted data structure\r\n   * Ensures all required fields are present and valid\r\n   * \r\n   * @param encryptedData - Encrypted data to validate\r\n   * @throws Error if validation fails\r\n   */\r\n  private validateEncryptedData(encryptedData: EncryptedData): void {\r\n    const requiredFields = ['encryptedData', 'iv', 'authTag', 'salt', 'algorithm', 'timestamp'];\r\n    \r\n    for (const field of requiredFields) {\r\n      if (!(field in encryptedData) || !encryptedData[field as keyof EncryptedData]) {\r\n        throw new Error(`Invalid encrypted data: missing ${field}`);\r\n      }\r\n    }\r\n    \r\n    // Validate algorithm\r\n    if (encryptedData.algorithm !== EncryptionService.DEFAULT_ALGORITHM) {\r\n      throw new Error(`Unsupported encryption algorithm: ${encryptedData.algorithm}`);\r\n    }\r\n    \r\n    // Validate timestamp (not too old or in the future)\r\n    const now = Date.now();\r\n    const maxAge = 365 * 24 * 60 * 60 * 1000; // 1 year\r\n    \r\n    if (encryptedData.timestamp > now + 60000) { // 1 minute future tolerance\r\n      throw new Error('Encrypted data timestamp is in the future');\r\n    }\r\n    \r\n    if (now - encryptedData.timestamp > maxAge) {\r\n      throw new Error('Encrypted data is too old');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Securely clear sensitive data from memory\r\n   * Overwrites memory containing sensitive information\r\n   * \r\n   * @param buffer - Buffer to clear\r\n   */\r\n  public secureClear(buffer: Buffer): void {\r\n    if (buffer && buffer.length > 0) {\r\n      buffer.fill(0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get encryption service status and health information\r\n   * Returns current status for monitoring and diagnostics\r\n   * \r\n   * @returns Object containing service status\r\n   */\r\n  public getStatus(): {\r\n    isInitialized: boolean;\r\n    algorithm: string;\r\n    keyDerivationParams: KeyDerivationParams;\r\n    timestamp: number;\r\n  } {\r\n    return {\r\n      isInitialized: this.masterKey !== null,\r\n      algorithm: EncryptionService.DEFAULT_ALGORITHM,\r\n      keyDerivationParams: EncryptionService.DEFAULT_KEY_PARAMS,\r\n      timestamp: Date.now()\r\n    };\r\n  }\r\n}\r\n\r\n// Create and export singleton instance\r\nexport const encryptionService = new EncryptionService();\r\n\r\n// =============================================================================\r\n// SECURITY NOTES AND BEST PRACTICES\r\n// =============================================================================\r\n// 1. Master key must be stored securely and never logged or exposed\r\n// 2. Use different passwords/keys for different types of data when possible\r\n// 3. Regularly rotate encryption keys and credentials\r\n// 4. Monitor for any encryption/decryption failures as potential security incidents\r\n// 5. Keep encryption libraries and dependencies updated\r\n// 6. Perform regular security audits of encryption implementation\r\n// 7. Use hardware security modules (HSM) in production if available\r\n// 8. Implement proper key escrow and recovery procedures\r\n// ============================================================================="],"version":3}