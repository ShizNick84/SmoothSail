cd04b2da8670c4fabfa8a94cf8420d43
"use strict";
/**
 * =============================================================================
 * AI CRYPTO TRADING AGENT - MILITARY-GRADE ENCRYPTION SERVICE
 * =============================================================================
 *
 * This service provides military-grade encryption capabilities for protecting
 * sensitive trading data, API credentials, and financial information.
 *
 * CRITICAL SECURITY NOTICE:
 * This service protects access to real financial assets and trading capital.
 * Any modifications must be thoroughly tested and security audited.
 *
 * Encryption Standards:
 * - AES-256-GCM for symmetric encryption
 * - RSA-4096 for asymmetric encryption
 * - PBKDF2 with 100,000 iterations for key derivation
 * - Cryptographically secure random number generation
 *
 * @author AI Crypto Trading System
 * @version 1.0.0
 * @license PROPRIETARY
 * =============================================================================
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.encryptionService = exports.EncryptionService = void 0;
const crypto_1 = require("crypto");
const logger_1 = require("@/core/logging/logger");
/**
 * Military-grade encryption service for protecting sensitive trading data
 * Implements industry-standard encryption with additional security measures
 */
class EncryptionService {
    /** Default encryption algorithm */
    static DEFAULT_ALGORITHM = 'aes-256-gcm';
    /** Default key derivation parameters */
    static DEFAULT_KEY_PARAMS = {
        iterations: 100000, // NIST recommended minimum
        saltLength: 32, // 256 bits
        keyLength: 32, // 256 bits for AES-256
        hashAlgorithm: 'sha256'
    };
    /** Master encryption key loaded from environment */
    masterKey = null;
    constructor() {
        // Initialize the encryption service
        this.initializeMasterKey();
    }
    /**
     * Initialize the master encryption key from environment
     * The master key is used for encrypting other keys and sensitive data
     *
     * @throws Error if master key is not configured or invalid
     */
    initializeMasterKey() {
        try {
            const masterKeyHex = process.env.MASTER_ENCRYPTION_KEY;
            if (!masterKeyHex) {
                throw new Error('MASTER_ENCRYPTION_KEY environment variable not set');
            }
            // Validate master key length (minimum 64 hex characters = 32 bytes)
            if (masterKeyHex.length < 64) {
                throw new Error('Master encryption key must be at least 32 bytes (64 hex characters)');
            }
            // Convert hex string to buffer
            this.masterKey = Buffer.from(masterKeyHex, 'hex');
            logger_1.logger.info('üîê Master encryption key initialized successfully');
        }
        catch (error) {
            logger_1.logger.error('‚ùå Failed to initialize master encryption key:', error);
            throw new Error('Encryption service initialization failed');
        }
    }
    /**
     * Encrypt sensitive data using AES-256-GCM with key derivation
     * Provides authenticated encryption with additional data protection
     *
     * @param data - The plaintext data to encrypt
     * @param password - Password for key derivation (optional, uses master key if not provided)
     * @param keyParams - Key derivation parameters (optional, uses defaults)
     * @returns Promise<EncryptedData> The encrypted data structure
     * @throws Error if encryption fails
     */
    async encryptData(data, password, keyParams = {}) {
        try {
            // Merge with default parameters
            const params = { ...EncryptionService.DEFAULT_KEY_PARAMS, ...keyParams };
            // Generate cryptographically secure random salt
            const salt = (0, crypto_1.randomBytes)(params.saltLength);
            // Derive encryption key from password or master key
            const key = this.deriveKey(password || this.masterKey.toString('hex'), salt, params);
            // Generate random initialization vector
            const iv = (0, crypto_1.randomBytes)(12); // 96 bits for GCM mode
            // Create cipher with AES-256-GCM
            const cipher = (0, crypto_1.createCipherGCM)(EncryptionService.DEFAULT_ALGORITHM, key, iv);
            // Encrypt the data
            let encrypted = cipher.update(data, 'utf8');
            encrypted = Buffer.concat([encrypted, cipher.final()]);
            // Get authentication tag
            const authTag = cipher.getAuthTag();
            // Create encrypted data structure
            const encryptedData = {
                encryptedData: encrypted.toString('base64'),
                iv: iv.toString('base64'),
                authTag: authTag.toString('base64'),
                salt: salt.toString('base64'),
                algorithm: EncryptionService.DEFAULT_ALGORITHM,
                timestamp: Date.now()
            };
            // Log encryption operation (without sensitive data)
            logger_1.logger.debug('üîí Data encrypted successfully', {
                algorithm: encryptedData.algorithm,
                dataLength: data.length,
                timestamp: encryptedData.timestamp
            });
            return encryptedData;
        }
        catch (error) {
            logger_1.logger.error('‚ùå Encryption failed:', error);
            throw new Error('Failed to encrypt data');
        }
    }
    /**
     * Decrypt data using AES-256-GCM with authentication verification
     * Verifies data integrity and authenticity before returning plaintext
     *
     * @param encryptedData - The encrypted data structure
     * @param password - Password for key derivation (optional, uses master key if not provided)
     * @returns Promise<string> The decrypted plaintext data
     * @throws Error if decryption fails or authentication verification fails
     */
    async decryptData(encryptedData, password) {
        try {
            // Validate encrypted data structure
            this.validateEncryptedData(encryptedData);
            // Convert base64 components back to buffers
            const encrypted = Buffer.from(encryptedData.encryptedData, 'base64');
            const iv = Buffer.from(encryptedData.iv, 'base64');
            const authTag = Buffer.from(encryptedData.authTag, 'base64');
            const salt = Buffer.from(encryptedData.salt, 'base64');
            // Derive the same key used for encryption
            const key = this.deriveKey(password || this.masterKey.toString('hex'), salt, EncryptionService.DEFAULT_KEY_PARAMS);
            // Create decipher with AES-256-GCM
            const decipher = (0, crypto_1.createDecipherGCM)(encryptedData.algorithm, key, iv);
            decipher.setAuthTag(authTag);
            // Decrypt the data
            let decrypted = decipher.update(encrypted);
            decrypted = Buffer.concat([decrypted, decipher.final()]);
            // Convert to string
            const plaintext = decrypted.toString('utf8');
            // Log decryption operation (without sensitive data)
            logger_1.logger.debug('üîì Data decrypted successfully', {
                algorithm: encryptedData.algorithm,
                dataLength: plaintext.length,
                originalTimestamp: encryptedData.timestamp
            });
            return plaintext;
        }
        catch (error) {
            logger_1.logger.error('‚ùå Decryption failed:', error);
            throw new Error('Failed to decrypt data - data may be corrupted or tampered with');
        }
    }
    /**
     * Encrypt API credentials with additional security measures
     * Specialized encryption for protecting trading API keys and secrets
     *
     * @param credentials - Object containing API credentials
     * @returns Promise<EncryptedData> Encrypted credentials
     */
    async encryptCredentials(credentials) {
        try {
            // Add timestamp and integrity hash to credentials
            const credentialsWithMetadata = {
                ...credentials,
                _timestamp: Date.now(),
                _integrity: this.calculateIntegrityHash(credentials)
            };
            // Serialize credentials to JSON
            const credentialsJson = JSON.stringify(credentialsWithMetadata);
            // Encrypt with additional security parameters
            const encrypted = await this.encryptData(credentialsJson, undefined, {
                iterations: 150000, // Higher iterations for credentials
                saltLength: 64 // Larger salt for credentials
            });
            logger_1.logger.info('üîê API credentials encrypted successfully');
            return encrypted;
        }
        catch (error) {
            logger_1.logger.error('‚ùå Failed to encrypt credentials:', error);
            throw new Error('Credential encryption failed');
        }
    }
    /**
     * Decrypt API credentials with integrity verification
     * Verifies credential integrity and returns decrypted credentials
     *
     * @param encryptedCredentials - Encrypted credentials data
     * @returns Promise<Record<string, string>> Decrypted credentials
     * @throws Error if decryption fails or integrity check fails
     */
    async decryptCredentials(encryptedCredentials) {
        try {
            // Decrypt the credentials JSON
            const credentialsJson = await this.decryptData(encryptedCredentials);
            // Parse credentials from JSON
            const credentialsWithMetadata = JSON.parse(credentialsJson);
            // Extract metadata
            const { _timestamp, _integrity, ...credentials } = credentialsWithMetadata;
            // Verify integrity hash
            const expectedIntegrity = this.calculateIntegrityHash(credentials);
            if (_integrity !== expectedIntegrity) {
                throw new Error('Credential integrity verification failed');
            }
            // Check credential age (warn if older than 30 days)
            const age = Date.now() - _timestamp;
            const thirtyDays = 30 * 24 * 60 * 60 * 1000;
            if (age > thirtyDays) {
                logger_1.logger.warn('‚ö†Ô∏è Decrypted credentials are older than 30 days', {
                    age: Math.floor(age / (24 * 60 * 60 * 1000)),
                    timestamp: _timestamp
                });
            }
            logger_1.logger.info('üîì API credentials decrypted and verified successfully');
            return credentials;
        }
        catch (error) {
            logger_1.logger.error('‚ùå Failed to decrypt credentials:', error);
            throw new Error('Credential decryption failed');
        }
    }
    /**
     * Generate a cryptographically secure random key
     * Used for generating new encryption keys and secrets
     *
     * @param length - Key length in bytes (default: 32 for AES-256)
     * @returns string Hex-encoded random key
     */
    generateSecureKey(length = 32) {
        try {
            const key = (0, crypto_1.randomBytes)(length);
            return key.toString('hex');
        }
        catch (error) {
            logger_1.logger.error('‚ùå Failed to generate secure key:', error);
            throw new Error('Key generation failed');
        }
    }
    /**
     * Derive encryption key from password using PBKDF2
     * Implements secure key derivation with configurable parameters
     *
     * @param password - Password or master key for derivation
     * @param salt - Cryptographic salt
     * @param params - Key derivation parameters
     * @returns Buffer The derived key
     */
    deriveKey(password, salt, params) {
        return (0, crypto_1.pbkdf2Sync)(password, salt, params.iterations, params.keyLength, params.hashAlgorithm);
    }
    /**
     * Calculate integrity hash for credential verification
     * Creates a hash of credentials for tamper detection
     *
     * @param credentials - Credentials object to hash
     * @returns string SHA-256 hash of credentials
     */
    calculateIntegrityHash(credentials) {
        // Sort keys for consistent hashing
        const sortedKeys = Object.keys(credentials).sort();
        const sortedCredentials = sortedKeys.map(key => `${key}:${credentials[key]}`).join('|');
        return (0, crypto_1.createHash)('sha256').update(sortedCredentials).digest('hex');
    }
    /**
     * Validate encrypted data structure
     * Ensures all required fields are present and valid
     *
     * @param encryptedData - Encrypted data to validate
     * @throws Error if validation fails
     */
    validateEncryptedData(encryptedData) {
        const requiredFields = ['encryptedData', 'iv', 'authTag', 'salt', 'algorithm', 'timestamp'];
        for (const field of requiredFields) {
            if (!(field in encryptedData) || !encryptedData[field]) {
                throw new Error(`Invalid encrypted data: missing ${field}`);
            }
        }
        // Validate algorithm
        if (encryptedData.algorithm !== EncryptionService.DEFAULT_ALGORITHM) {
            throw new Error(`Unsupported encryption algorithm: ${encryptedData.algorithm}`);
        }
        // Validate timestamp (not too old or in the future)
        const now = Date.now();
        const maxAge = 365 * 24 * 60 * 60 * 1000; // 1 year
        if (encryptedData.timestamp > now + 60000) { // 1 minute future tolerance
            throw new Error('Encrypted data timestamp is in the future');
        }
        if (now - encryptedData.timestamp > maxAge) {
            throw new Error('Encrypted data is too old');
        }
    }
    /**
     * Securely clear sensitive data from memory
     * Overwrites memory containing sensitive information
     *
     * @param buffer - Buffer to clear
     */
    secureClear(buffer) {
        if (buffer && buffer.length > 0) {
            buffer.fill(0);
        }
    }
    /**
     * Get encryption service status and health information
     * Returns current status for monitoring and diagnostics
     *
     * @returns Object containing service status
     */
    getStatus() {
        return {
            isInitialized: this.masterKey !== null,
            algorithm: EncryptionService.DEFAULT_ALGORITHM,
            keyDerivationParams: EncryptionService.DEFAULT_KEY_PARAMS,
            timestamp: Date.now()
        };
    }
}
exports.EncryptionService = EncryptionService;
// Create and export singleton instance
exports.encryptionService = new EncryptionService();
// =============================================================================
// SECURITY NOTES AND BEST PRACTICES
// =============================================================================
// 1. Master key must be stored securely and never logged or exposed
// 2. Use different passwords/keys for different types of data when possible
// 3. Regularly rotate encryption keys and credentials
// 4. Monitor for any encryption/decryption failures as potential security incidents
// 5. Keep encryption libraries and dependencies updated
// 6. Perform regular security audits of encryption implementation
// 7. Use hardware security modules (HSM) in production if available
// 8. Implement proper key escrow and recovery procedures
// =============================================================================
//# sourceMappingURL=data:application/json;charset=utf-8;base64,