5a008178b2dfac4d0610a2f7ff91241f
"use strict";

/**
 * Trading Strategy Types and Interfaces
 *
 * This module defines the core types and interfaces for the trading strategy engine.
 * All strategies implement these interfaces to ensure consistency and interoperability.
 */
/* istanbul ignore next */
function cov_1kx8wfnrn2() {
  var path = "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\strategies\\types.ts";
  var hash = "795992644c98d808f67a732fd8c483606d69f520";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\strategies\\types.ts",
    statementMap: {
      "0": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 8,
          column: 62
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0
    },
    f: {},
    b: {},
    inputSourceMap: {
      file: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\strategies\\types.ts",
      mappings: ";AAAA;;;;;GAKG",
      names: [],
      sources: ["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\strategies\\types.ts"],
      sourcesContent: ["/**\r\n * Trading Strategy Types and Interfaces\r\n * \r\n * This module defines the core types and interfaces for the trading strategy engine.\r\n * All strategies implement these interfaces to ensure consistency and interoperability.\r\n */\r\n\r\nexport interface MarketData {\r\n  symbol: string;\r\n  timestamp: Date;\r\n  open: number;\r\n  high: number;\r\n  low: number;\r\n  close: number;\r\n  volume: number;\r\n}\r\n\r\nexport interface TechnicalIndicator {\r\n  name: string;\r\n  value: number;\r\n  timestamp: Date;\r\n  parameters: Record<string, any>;\r\n}\r\n\r\nexport interface TradingSignal {\r\n  id: string;\r\n  symbol: string;\r\n  type: 'BUY' | 'SELL' | 'HOLD';\r\n  strength: number; // 0-100\r\n  confidence: number; // 0-100\r\n  indicators: string[];\r\n  reasoning: string;\r\n  riskReward: number;\r\n  timestamp: Date;\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\nexport interface SignalConfidence {\r\n  overall: number; // 0-100\r\n  technical: number; // 0-100\r\n  volume: number; // 0-100\r\n  momentum: number; // 0-100\r\n  factors: string[];\r\n}\r\n\r\nexport interface MovingAverageSignal extends TechnicalIndicator {\r\n  name: 'SMA' | 'EMA';\r\n  period: number;\r\n  crossover?: {\r\n    type: 'GOLDEN_CROSS' | 'DEATH_CROSS' | 'NONE';\r\n    strength: number;\r\n    volumeConfirmed: boolean;\r\n  };\r\n}\r\n\r\nexport interface RSISignal extends TechnicalIndicator {\r\n  name: 'RSI';\r\n  period: number;\r\n  overbought: boolean;\r\n  oversold: boolean;\r\n  divergence?: {\r\n    type: 'BULLISH' | 'BEARISH' | 'NONE';\r\n    strength: number;\r\n  };\r\n}\r\n\r\nexport interface MACDSignal extends TechnicalIndicator {\r\n  name: 'MACD';\r\n  macd: number;\r\n  signal: number;\r\n  histogram: number;\r\n  crossover?: {\r\n    type: 'BULLISH' | 'BEARISH' | 'NONE';\r\n    strength: number;\r\n  };\r\n}\r\n\r\nexport interface FibonacciLevels {\r\n  high: number;\r\n  low: number;\r\n  levels: {\r\n    '23.6': number;\r\n    '38.2': number;\r\n    '50.0': number;\r\n    '61.8': number;\r\n    '78.6': number;\r\n  };\r\n  support: number[];\r\n  resistance: number[];\r\n}\r\n\r\nexport interface BreakoutSignal extends TechnicalIndicator {\r\n  name: 'BREAKOUT';\r\n  direction: 'UP' | 'DOWN';\r\n  volumeConfirmed: boolean;\r\n  strength: number;\r\n  falseBreakoutProbability: number;\r\n}\r\n\r\nexport interface HarmonizedSignal {\r\n  symbol: string;\r\n  timestamp: Date;\r\n  overallSignal: 'BUY' | 'SELL' | 'HOLD';\r\n  strength: number; // 0-100\r\n  confidence: number; // 0-100\r\n  indicators: TechnicalIndicator[];\r\n  weights: Record<string, number>;\r\n  conflicts: string[];\r\n  reasoning: string;\r\n}\r\n\r\nexport interface StrategyConfig {\r\n  name: string;\r\n  enabled: boolean;\r\n  weight: number; // 0-1 for harmonization\r\n  parameters: Record<string, any>;\r\n}\r\n\r\nexport interface BacktestResult {\r\n  strategy: string;\r\n  period: {\r\n    start: Date;\r\n    end: Date;\r\n  };\r\n  trades: number;\r\n  winRate: number;\r\n  totalReturn: number;\r\n  sharpeRatio: number;\r\n  maxDrawdown: number;\r\n  profitFactor: number;\r\n  averageWin: number;\r\n  averageLoss: number;\r\n  largestWin: number;\r\n  largestLoss: number;\r\n  consecutiveWins: number;\r\n  consecutiveLosses: number;\r\n}\r\n\r\nexport interface StrategyPerformance {\r\n  accuracy: number;\r\n  profitability: number;\r\n  consistency: number;\r\n  riskAdjustedReturn: number;\r\n  drawdownRecovery: number;\r\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "795992644c98d808f67a732fd8c483606d69f520"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1kx8wfnrn2 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1kx8wfnrn2();
cov_1kx8wfnrn2().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMWt4OHdmbnJuMiIsInBhdGgiLCJoYXNoIiwiZ2xvYmFsIiwiRnVuY3Rpb24iLCJnY3YiLCJjb3ZlcmFnZURhdGEiLCJzdGF0ZW1lbnRNYXAiLCJzdGFydCIsImxpbmUiLCJjb2x1bW4iLCJlbmQiLCJmbk1hcCIsImJyYW5jaE1hcCIsInMiLCJmIiwiYiIsImlucHV0U291cmNlTWFwIiwiZmlsZSIsIm1hcHBpbmdzIiwibmFtZXMiLCJzb3VyY2VzIiwic291cmNlc0NvbnRlbnQiLCJ2ZXJzaW9uIiwiX2NvdmVyYWdlU2NoZW1hIiwiY292ZXJhZ2UiLCJhY3R1YWxDb3ZlcmFnZSJdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcTmlja1xcRGVza3RvcFxcU21vb3RoU2FpbFxcc3JjXFx0cmFkaW5nXFxzdHJhdGVnaWVzXFx0eXBlcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogVHJhZGluZyBTdHJhdGVneSBUeXBlcyBhbmQgSW50ZXJmYWNlc1xyXG4gKiBcclxuICogVGhpcyBtb2R1bGUgZGVmaW5lcyB0aGUgY29yZSB0eXBlcyBhbmQgaW50ZXJmYWNlcyBmb3IgdGhlIHRyYWRpbmcgc3RyYXRlZ3kgZW5naW5lLlxyXG4gKiBBbGwgc3RyYXRlZ2llcyBpbXBsZW1lbnQgdGhlc2UgaW50ZXJmYWNlcyB0byBlbnN1cmUgY29uc2lzdGVuY3kgYW5kIGludGVyb3BlcmFiaWxpdHkuXHJcbiAqL1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBNYXJrZXREYXRhIHtcclxuICBzeW1ib2w6IHN0cmluZztcclxuICB0aW1lc3RhbXA6IERhdGU7XHJcbiAgb3BlbjogbnVtYmVyO1xyXG4gIGhpZ2g6IG51bWJlcjtcclxuICBsb3c6IG51bWJlcjtcclxuICBjbG9zZTogbnVtYmVyO1xyXG4gIHZvbHVtZTogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFRlY2huaWNhbEluZGljYXRvciB7XHJcbiAgbmFtZTogc3RyaW5nO1xyXG4gIHZhbHVlOiBudW1iZXI7XHJcbiAgdGltZXN0YW1wOiBEYXRlO1xyXG4gIHBhcmFtZXRlcnM6IFJlY29yZDxzdHJpbmcsIGFueT47XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVHJhZGluZ1NpZ25hbCB7XHJcbiAgaWQ6IHN0cmluZztcclxuICBzeW1ib2w6IHN0cmluZztcclxuICB0eXBlOiAnQlVZJyB8ICdTRUxMJyB8ICdIT0xEJztcclxuICBzdHJlbmd0aDogbnVtYmVyOyAvLyAwLTEwMFxyXG4gIGNvbmZpZGVuY2U6IG51bWJlcjsgLy8gMC0xMDBcclxuICBpbmRpY2F0b3JzOiBzdHJpbmdbXTtcclxuICByZWFzb25pbmc6IHN0cmluZztcclxuICByaXNrUmV3YXJkOiBudW1iZXI7XHJcbiAgdGltZXN0YW1wOiBEYXRlO1xyXG4gIG1ldGFkYXRhPzogUmVjb3JkPHN0cmluZywgYW55PjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTaWduYWxDb25maWRlbmNlIHtcclxuICBvdmVyYWxsOiBudW1iZXI7IC8vIDAtMTAwXHJcbiAgdGVjaG5pY2FsOiBudW1iZXI7IC8vIDAtMTAwXHJcbiAgdm9sdW1lOiBudW1iZXI7IC8vIDAtMTAwXHJcbiAgbW9tZW50dW06IG51bWJlcjsgLy8gMC0xMDBcclxuICBmYWN0b3JzOiBzdHJpbmdbXTtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBNb3ZpbmdBdmVyYWdlU2lnbmFsIGV4dGVuZHMgVGVjaG5pY2FsSW5kaWNhdG9yIHtcclxuICBuYW1lOiAnU01BJyB8ICdFTUEnO1xyXG4gIHBlcmlvZDogbnVtYmVyO1xyXG4gIGNyb3Nzb3Zlcj86IHtcclxuICAgIHR5cGU6ICdHT0xERU5fQ1JPU1MnIHwgJ0RFQVRIX0NST1NTJyB8ICdOT05FJztcclxuICAgIHN0cmVuZ3RoOiBudW1iZXI7XHJcbiAgICB2b2x1bWVDb25maXJtZWQ6IGJvb2xlYW47XHJcbiAgfTtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBSU0lTaWduYWwgZXh0ZW5kcyBUZWNobmljYWxJbmRpY2F0b3Ige1xyXG4gIG5hbWU6ICdSU0knO1xyXG4gIHBlcmlvZDogbnVtYmVyO1xyXG4gIG92ZXJib3VnaHQ6IGJvb2xlYW47XHJcbiAgb3ZlcnNvbGQ6IGJvb2xlYW47XHJcbiAgZGl2ZXJnZW5jZT86IHtcclxuICAgIHR5cGU6ICdCVUxMSVNIJyB8ICdCRUFSSVNIJyB8ICdOT05FJztcclxuICAgIHN0cmVuZ3RoOiBudW1iZXI7XHJcbiAgfTtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBNQUNEU2lnbmFsIGV4dGVuZHMgVGVjaG5pY2FsSW5kaWNhdG9yIHtcclxuICBuYW1lOiAnTUFDRCc7XHJcbiAgbWFjZDogbnVtYmVyO1xyXG4gIHNpZ25hbDogbnVtYmVyO1xyXG4gIGhpc3RvZ3JhbTogbnVtYmVyO1xyXG4gIGNyb3Nzb3Zlcj86IHtcclxuICAgIHR5cGU6ICdCVUxMSVNIJyB8ICdCRUFSSVNIJyB8ICdOT05FJztcclxuICAgIHN0cmVuZ3RoOiBudW1iZXI7XHJcbiAgfTtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBGaWJvbmFjY2lMZXZlbHMge1xyXG4gIGhpZ2g6IG51bWJlcjtcclxuICBsb3c6IG51bWJlcjtcclxuICBsZXZlbHM6IHtcclxuICAgICcyMy42JzogbnVtYmVyO1xyXG4gICAgJzM4LjInOiBudW1iZXI7XHJcbiAgICAnNTAuMCc6IG51bWJlcjtcclxuICAgICc2MS44JzogbnVtYmVyO1xyXG4gICAgJzc4LjYnOiBudW1iZXI7XHJcbiAgfTtcclxuICBzdXBwb3J0OiBudW1iZXJbXTtcclxuICByZXNpc3RhbmNlOiBudW1iZXJbXTtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBCcmVha291dFNpZ25hbCBleHRlbmRzIFRlY2huaWNhbEluZGljYXRvciB7XHJcbiAgbmFtZTogJ0JSRUFLT1VUJztcclxuICBkaXJlY3Rpb246ICdVUCcgfCAnRE9XTic7XHJcbiAgdm9sdW1lQ29uZmlybWVkOiBib29sZWFuO1xyXG4gIHN0cmVuZ3RoOiBudW1iZXI7XHJcbiAgZmFsc2VCcmVha291dFByb2JhYmlsaXR5OiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSGFybW9uaXplZFNpZ25hbCB7XHJcbiAgc3ltYm9sOiBzdHJpbmc7XHJcbiAgdGltZXN0YW1wOiBEYXRlO1xyXG4gIG92ZXJhbGxTaWduYWw6ICdCVVknIHwgJ1NFTEwnIHwgJ0hPTEQnO1xyXG4gIHN0cmVuZ3RoOiBudW1iZXI7IC8vIDAtMTAwXHJcbiAgY29uZmlkZW5jZTogbnVtYmVyOyAvLyAwLTEwMFxyXG4gIGluZGljYXRvcnM6IFRlY2huaWNhbEluZGljYXRvcltdO1xyXG4gIHdlaWdodHM6IFJlY29yZDxzdHJpbmcsIG51bWJlcj47XHJcbiAgY29uZmxpY3RzOiBzdHJpbmdbXTtcclxuICByZWFzb25pbmc6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTdHJhdGVneUNvbmZpZyB7XHJcbiAgbmFtZTogc3RyaW5nO1xyXG4gIGVuYWJsZWQ6IGJvb2xlYW47XHJcbiAgd2VpZ2h0OiBudW1iZXI7IC8vIDAtMSBmb3IgaGFybW9uaXphdGlvblxyXG4gIHBhcmFtZXRlcnM6IFJlY29yZDxzdHJpbmcsIGFueT47XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQmFja3Rlc3RSZXN1bHQge1xyXG4gIHN0cmF0ZWd5OiBzdHJpbmc7XHJcbiAgcGVyaW9kOiB7XHJcbiAgICBzdGFydDogRGF0ZTtcclxuICAgIGVuZDogRGF0ZTtcclxuICB9O1xyXG4gIHRyYWRlczogbnVtYmVyO1xyXG4gIHdpblJhdGU6IG51bWJlcjtcclxuICB0b3RhbFJldHVybjogbnVtYmVyO1xyXG4gIHNoYXJwZVJhdGlvOiBudW1iZXI7XHJcbiAgbWF4RHJhd2Rvd246IG51bWJlcjtcclxuICBwcm9maXRGYWN0b3I6IG51bWJlcjtcclxuICBhdmVyYWdlV2luOiBudW1iZXI7XHJcbiAgYXZlcmFnZUxvc3M6IG51bWJlcjtcclxuICBsYXJnZXN0V2luOiBudW1iZXI7XHJcbiAgbGFyZ2VzdExvc3M6IG51bWJlcjtcclxuICBjb25zZWN1dGl2ZVdpbnM6IG51bWJlcjtcclxuICBjb25zZWN1dGl2ZUxvc3NlczogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFN0cmF0ZWd5UGVyZm9ybWFuY2Uge1xyXG4gIGFjY3VyYWN5OiBudW1iZXI7XHJcbiAgcHJvZml0YWJpbGl0eTogbnVtYmVyO1xyXG4gIGNvbnNpc3RlbmN5OiBudW1iZXI7XHJcbiAgcmlza0FkanVzdGVkUmV0dXJuOiBudW1iZXI7XHJcbiAgZHJhd2Rvd25SZWNvdmVyeTogbnVtYmVyO1xyXG59Il0sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7QUFBQTtBQUFBLFNBQUFBLGVBQUE7RUFBQSxJQUFBQyxJQUFBO0VBQUEsSUFBQUMsSUFBQTtFQUFBLElBQUFDLE1BQUEsT0FBQUMsUUFBQTtFQUFBLElBQUFDLEdBQUE7RUFBQSxJQUFBQyxZQUFBO0lBQUFMLElBQUE7SUFBQU0sWUFBQTtNQUFBO1FBQUFDLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO0lBQUE7SUFBQUUsS0FBQTtJQUFBQyxTQUFBO0lBQUFDLENBQUE7TUFBQTtJQUFBO0lBQUFDLENBQUE7SUFBQUMsQ0FBQTtJQUFBQyxjQUFBO01BQUFDLElBQUE7TUFBQUMsUUFBQTtNQUFBQyxLQUFBO01BQUFDLE9BQUE7TUFBQUMsY0FBQTtNQUFBQyxPQUFBO0lBQUE7SUFBQUMsZUFBQTtJQUFBdEIsSUFBQTtFQUFBO0VBQUEsSUFBQXVCLFFBQUEsR0FBQXRCLE1BQUEsQ0FBQUUsR0FBQSxNQUFBRixNQUFBLENBQUFFLEdBQUE7RUFBQSxLQUFBb0IsUUFBQSxDQUFBeEIsSUFBQSxLQUFBd0IsUUFBQSxDQUFBeEIsSUFBQSxFQUFBQyxJQUFBLEtBQUFBLElBQUE7SUFBQXVCLFFBQUEsQ0FBQXhCLElBQUEsSUFBQUssWUFBQTtFQUFBO0VBQUEsSUFBQW9CLGNBQUEsR0FBQUQsUUFBQSxDQUFBeEIsSUFBQTtFQUFBIiwiaWdub3JlTGlzdCI6W119