{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\api\\gate-io-client.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\api\\gate-io-client.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * GATE.IO API CLIENT - SECURE CRYPTOCURRENCY EXCHANGE INTEGRATION\r\n * =============================================================================\r\n * \r\n * This module implements a secure, production-ready Gate.io API client with\r\n * comprehensive security features, rate limiting, and error handling.\r\n * All requests are routed through SSH tunnel for consistent IP address.\r\n * \r\n * SECURITY FEATURES:\r\n * - Military-grade credential encryption and secure storage\r\n * - Request signing with HMAC-SHA512 authentication\r\n * - Rate limiting with intelligent backoff strategies\r\n * - Circuit breaker pattern for API health monitoring\r\n * - Comprehensive audit logging for all API interactions\r\n * - Request/response validation and integrity checking\r\n * \r\n * CRITICAL SECURITY NOTICE:\r\n * This client handles real financial assets and trading operations.\r\n * All security measures must be maintained and regularly audited.\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';\r\nimport crypto from 'crypto';\r\nimport { RateLimiterMemory } from 'rate-limiter-flexible';\r\nimport { logger } from '@/core/logging/logger';\r\nimport { CredentialManager } from '@/security/credential-manager';\r\nimport { AuditService } from '@/security/audit-service';\r\n\r\n/**\r\n * Gate.io API endpoints and configuration\r\n */\r\nconst GATE_IO_CONFIG = {\r\n  BASE_URL: 'https://api.gateio.ws',\r\n  API_VERSION: 'v4',\r\n  TIMEOUT: 30000, // 30 seconds\r\n  MAX_RETRIES: 3,\r\n  RETRY_DELAY: 1000, // 1 second base delay\r\n} as const;\r\n\r\n/**\r\n * Rate limiting configuration based on Gate.io API limits\r\n * Conservative limits to ensure we never exceed API quotas\r\n */\r\nconst RATE_LIMITS = {\r\n  // Public endpoints: 900 requests per minute\r\n  PUBLIC: {\r\n    points: 900,\r\n    duration: 60, // 60 seconds\r\n  },\r\n  // Private endpoints: 300 requests per minute\r\n  PRIVATE: {\r\n    points: 300,\r\n    duration: 60, // 60 seconds\r\n  },\r\n  // Order endpoints: 100 requests per minute\r\n  ORDERS: {\r\n    points: 100,\r\n    duration: 60, // 60 seconds\r\n  },\r\n} as const;\r\n\r\n/**\r\n * Circuit breaker states for API health monitoring\r\n */\r\nenum CircuitBreakerState {\r\n  CLOSED = 'CLOSED',     // Normal operation\r\n  OPEN = 'OPEN',         // API is failing, reject requests\r\n  HALF_OPEN = 'HALF_OPEN' // Testing if API has recovered\r\n}\r\n\r\n/**\r\n * API request types for proper rate limiting\r\n */\r\nenum RequestType {\r\n  PUBLIC = 'PUBLIC',\r\n  PRIVATE = 'PRIVATE',\r\n  ORDERS = 'ORDERS'\r\n}\r\n\r\n/**\r\n * Gate.io API credentials interface\r\n */\r\ninterface GateIOCredentials {\r\n  apiKey: string;\r\n  secretKey: string;\r\n  passphrase?: string;\r\n}\r\n\r\n/**\r\n * API request configuration\r\n */\r\ninterface APIRequestConfig extends AxiosRequestConfig {\r\n  requestType?: RequestType;\r\n  skipAuth?: boolean;\r\n  retryCount?: number;\r\n}\r\n\r\n/**\r\n * Circuit breaker configuration\r\n */\r\ninterface CircuitBreakerConfig {\r\n  failureThreshold: number;\r\n  recoveryTimeout: number;\r\n  monitoringPeriod: number;\r\n}\r\n\r\n/**\r\n * API health metrics\r\n */\r\ninterface APIHealthMetrics {\r\n  totalRequests: number;\r\n  successfulRequests: number;\r\n  failedRequests: number;\r\n  averageResponseTime: number;\r\n  lastSuccessfulRequest: Date | null;\r\n  lastFailedRequest: Date | null;\r\n  circuitBreakerState: CircuitBreakerState;\r\n}\r\n\r\n/**\r\n * Secure Gate.io API Client with comprehensive security and monitoring\r\n */\r\nexport class GateIOClient {\r\n  private axiosInstance: AxiosInstance;\r\n  private credentials: GateIOCredentials | null = null;\r\n  private credentialManager: CredentialManager;\r\n  private auditService: AuditService;\r\n  \r\n  // Rate limiters for different endpoint types\r\n  private publicRateLimiter: RateLimiterMemory;\r\n  private privateRateLimiter: RateLimiterMemory;\r\n  private orderRateLimiter: RateLimiterMemory;\r\n  \r\n  // Circuit breaker for API health monitoring\r\n  private circuitBreakerState: CircuitBreakerState = CircuitBreakerState.CLOSED;\r\n  private circuitBreakerConfig: CircuitBreakerConfig;\r\n  private failureCount: number = 0;\r\n  private lastFailureTime: Date | null = null;\r\n  \r\n  // Health metrics tracking\r\n  private healthMetrics: APIHealthMetrics;\r\n  \r\n  // Proxy configuration for SSH tunnel routing\r\n  private proxyConfig: {\r\n    host: string;\r\n    port: number;\r\n    protocol: 'http' | 'https';\r\n  } | null = null;\r\n\r\n  constructor() {\r\n    this.credentialManager = new CredentialManager();\r\n    this.auditService = new AuditService();\r\n    \r\n    // Initialize rate limiters with conservative limits\r\n    this.publicRateLimiter = new RateLimiterMemory(RATE_LIMITS.PUBLIC);\r\n    this.privateRateLimiter = new RateLimiterMemory(RATE_LIMITS.PRIVATE);\r\n    this.orderRateLimiter = new RateLimiterMemory(RATE_LIMITS.ORDERS);\r\n    \r\n    // Configure circuit breaker\r\n    this.circuitBreakerConfig = {\r\n      failureThreshold: 5,      // Open circuit after 5 consecutive failures\r\n      recoveryTimeout: 60000,   // Wait 60 seconds before trying again\r\n      monitoringPeriod: 300000, // Monitor for 5 minutes\r\n    };\r\n    \r\n    // Initialize health metrics\r\n    this.healthMetrics = {\r\n      totalRequests: 0,\r\n      successfulRequests: 0,\r\n      failedRequests: 0,\r\n      averageResponseTime: 0,\r\n      lastSuccessfulRequest: null,\r\n      lastFailedRequest: null,\r\n      circuitBreakerState: CircuitBreakerState.CLOSED,\r\n    };\r\n    \r\n    // Create axios instance with security configurations\r\n    this.axiosInstance = this.createAxiosInstance();\r\n    \r\n    logger.info('🔐 Gate.io API Client initialized with security features');\r\n  }\r\n\r\n  /**\r\n   * Initialize the API client with credentials and proxy configuration\r\n   * \r\n   * @param proxyHost - SSH tunnel proxy host (usually localhost)\r\n   * @param proxyPort - SSH tunnel proxy port\r\n   * @returns Promise<boolean> - Success status\r\n   */\r\n  public async initialize(proxyHost: string = 'localhost', proxyPort: number = 8080): Promise<boolean> {\r\n    try {\r\n      logger.info('🚀 Initializing Gate.io API client...');\r\n      \r\n      // Load encrypted credentials\r\n      await this.loadCredentials();\r\n      \r\n      // Configure proxy for SSH tunnel routing\r\n      this.configureProxy(proxyHost, proxyPort);\r\n      \r\n      // Test API connectivity\r\n      const isHealthy = await this.performHealthCheck();\r\n      \r\n      if (isHealthy) {\r\n        logger.info('✅ Gate.io API client initialized successfully');\r\n        await this.auditService.logSecurityEvent({\r\n          type: 'API_CLIENT_INITIALIZED',\r\n          severity: 'INFO',\r\n          details: { exchange: 'Gate.io', proxyHost, proxyPort },\r\n          timestamp: new Date(),\r\n        });\r\n        return true;\r\n      } else {\r\n        logger.error('❌ Gate.io API client health check failed');\r\n        return false;\r\n      }\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to initialize Gate.io API client:', error);\r\n      await this.auditService.logSecurityEvent({\r\n        type: 'API_CLIENT_INIT_FAILED',\r\n        severity: 'ERROR',\r\n        details: { error: error.message },\r\n        timestamp: new Date(),\r\n      });\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load and decrypt API credentials from secure storage\r\n   */\r\n  private async loadCredentials(): Promise<void> {\r\n    try {\r\n      // Load encrypted credentials from environment or secure storage\r\n      const encryptedCredentials = {\r\n        apiKey: process.env.GATE_IO_API_KEY,\r\n        secretKey: process.env.GATE_IO_SECRET_KEY,\r\n        passphrase: process.env.GATE_IO_PASSPHRASE,\r\n      };\r\n      \r\n      if (!encryptedCredentials.apiKey || !encryptedCredentials.secretKey) {\r\n        throw new Error('Gate.io API credentials not found in environment');\r\n      }\r\n      \r\n      // Decrypt credentials using credential manager\r\n      this.credentials = {\r\n        apiKey: await this.credentialManager.decryptCredential(encryptedCredentials.apiKey),\r\n        secretKey: await this.credentialManager.decryptCredential(encryptedCredentials.secretKey),\r\n        passphrase: encryptedCredentials.passphrase \r\n          ? await this.credentialManager.decryptCredential(encryptedCredentials.passphrase)\r\n          : undefined,\r\n      };\r\n      \r\n      logger.info('🔑 Gate.io API credentials loaded and decrypted successfully');\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to load Gate.io API credentials:', error);\r\n      throw new Error('Failed to load API credentials');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Configure proxy settings for SSH tunnel routing\r\n   */\r\n  private configureProxy(host: string, port: number): void {\r\n    this.proxyConfig = {\r\n      host,\r\n      port,\r\n      protocol: 'http',\r\n    };\r\n    \r\n    // Update axios instance with proxy configuration\r\n    this.axiosInstance.defaults.proxy = {\r\n      host: this.proxyConfig.host,\r\n      port: this.proxyConfig.port,\r\n      protocol: this.proxyConfig.protocol,\r\n    };\r\n    \r\n    logger.info(`🌐 Configured API requests to route through SSH tunnel: ${host}:${port}`);\r\n  }\r\n\r\n  /**\r\n   * Create axios instance with security configurations\r\n   */\r\n  private createAxiosInstance(): AxiosInstance {\r\n    const instance = axios.create({\r\n      baseURL: `${GATE_IO_CONFIG.BASE_URL}/api/${GATE_IO_CONFIG.API_VERSION}`,\r\n      timeout: GATE_IO_CONFIG.TIMEOUT,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'User-Agent': 'AI-Crypto-Trading-Agent/1.0.0',\r\n      },\r\n    });\r\n    \r\n    // Add request interceptor for authentication and logging\r\n    instance.interceptors.request.use(\r\n      (config) => this.handleRequestInterceptor(config),\r\n      (error) => this.handleRequestError(error)\r\n    );\r\n    \r\n    // Add response interceptor for logging and error handling\r\n    instance.interceptors.response.use(\r\n      (response) => this.handleResponseInterceptor(response),\r\n      (error) => this.handleResponseError(error)\r\n    );\r\n    \r\n    return instance;\r\n  }\r\n\r\n  /**\r\n   * Handle request interceptor for authentication and logging\r\n   */\r\n  private async handleRequestInterceptor(config: AxiosRequestConfig): Promise<AxiosRequestConfig> {\r\n    const startTime = Date.now();\r\n    \r\n    // Add request timing for metrics\r\n    config.metadata = { startTime };\r\n    \r\n    // Skip authentication for public endpoints\r\n    if (config.skipAuth) {\r\n      return config;\r\n    }\r\n    \r\n    // Add authentication headers for private endpoints\r\n    if (this.credentials) {\r\n      const timestamp = Math.floor(Date.now() / 1000).toString();\r\n      const method = config.method?.toUpperCase() || 'GET';\r\n      const url = config.url || '';\r\n      const body = config.data ? JSON.stringify(config.data) : '';\r\n      \r\n      // Create signature for request authentication\r\n      const signature = this.createSignature(method, url, body, timestamp);\r\n      \r\n      config.headers = {\r\n        ...config.headers,\r\n        'KEY': this.credentials.apiKey,\r\n        'Timestamp': timestamp,\r\n        'SIGN': signature,\r\n      };\r\n      \r\n      if (this.credentials.passphrase) {\r\n        config.headers['Passphrase'] = this.credentials.passphrase;\r\n      }\r\n    }\r\n    \r\n    // Log API request for audit trail\r\n    await this.auditService.logAPIRequest({\r\n      method: config.method?.toUpperCase() || 'GET',\r\n      url: config.url || '',\r\n      timestamp: new Date(),\r\n      headers: this.sanitizeHeaders(config.headers || {}),\r\n    });\r\n    \r\n    return config;\r\n  }\r\n\r\n  /**\r\n   * Create HMAC-SHA512 signature for Gate.io API authentication\r\n   */\r\n  private createSignature(method: string, url: string, body: string, timestamp: string): string {\r\n    if (!this.credentials?.secretKey) {\r\n      throw new Error('Secret key not available for signature creation');\r\n    }\r\n    \r\n    // Create signature string according to Gate.io API specification\r\n    const signatureString = `${method}\\n${url}\\n\\n${body}\\n${timestamp}`;\r\n    \r\n    // Generate HMAC-SHA512 signature\r\n    const signature = crypto\r\n      .createHmac('sha512', this.credentials.secretKey)\r\n      .update(signatureString)\r\n      .digest('hex');\r\n    \r\n    return signature;\r\n  }\r\n\r\n  /**\r\n   * Handle response interceptor for metrics and logging\r\n   */\r\n  private async handleResponseInterceptor(response: AxiosResponse): Promise<AxiosResponse> {\r\n    const endTime = Date.now();\r\n    const startTime = response.config.metadata?.startTime || endTime;\r\n    const responseTime = endTime - startTime;\r\n    \r\n    // Update health metrics\r\n    this.updateHealthMetrics(true, responseTime);\r\n    \r\n    // Log successful API response\r\n    await this.auditService.logAPIResponse({\r\n      status: response.status,\r\n      responseTime,\r\n      timestamp: new Date(),\r\n      success: true,\r\n    });\r\n    \r\n    return response;\r\n  }\r\n\r\n  /**\r\n   * Handle request errors\r\n   */\r\n  private async handleRequestError(error: any): Promise<never> {\r\n    logger.error('❌ API request error:', error.message);\r\n    \r\n    await this.auditService.logSecurityEvent({\r\n      type: 'API_REQUEST_ERROR',\r\n      severity: 'ERROR',\r\n      details: { error: error.message },\r\n      timestamp: new Date(),\r\n    });\r\n    \r\n    throw error;\r\n  }\r\n\r\n  /**\r\n   * Handle response errors with retry logic and circuit breaker\r\n   */\r\n  private async handleResponseError(error: any): Promise<never> {\r\n    const responseTime = Date.now() - (error.config?.metadata?.startTime || Date.now());\r\n    \r\n    // Update health metrics for failed request\r\n    this.updateHealthMetrics(false, responseTime);\r\n    \r\n    // Log failed API response\r\n    await this.auditService.logAPIResponse({\r\n      status: error.response?.status || 0,\r\n      responseTime,\r\n      timestamp: new Date(),\r\n      success: false,\r\n      error: error.message,\r\n    });\r\n    \r\n    // Handle specific error types\r\n    if (error.response?.status === 429) {\r\n      logger.warn('⚠️ Rate limit exceeded, implementing backoff strategy');\r\n      await this.handleRateLimitError(error);\r\n    } else if (error.response?.status >= 500) {\r\n      logger.error('❌ Server error detected, updating circuit breaker');\r\n      this.updateCircuitBreaker(false);\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n\r\n  /**\r\n   * Handle rate limit errors with intelligent backoff\r\n   */\r\n  private async handleRateLimitError(error: any): Promise<void> {\r\n    const retryAfter = error.response?.headers['retry-after'];\r\n    const backoffTime = retryAfter ? parseInt(retryAfter) * 1000 : 5000; // 5 seconds default\r\n    \r\n    logger.info(`⏳ Implementing rate limit backoff: ${backoffTime}ms`);\r\n    \r\n    await new Promise(resolve => setTimeout(resolve, backoffTime));\r\n  }\r\n\r\n  /**\r\n   * Update health metrics for monitoring\r\n   */\r\n  private updateHealthMetrics(success: boolean, responseTime: number): void {\r\n    this.healthMetrics.totalRequests++;\r\n    \r\n    if (success) {\r\n      this.healthMetrics.successfulRequests++;\r\n      this.healthMetrics.lastSuccessfulRequest = new Date();\r\n      this.updateCircuitBreaker(true);\r\n    } else {\r\n      this.healthMetrics.failedRequests++;\r\n      this.healthMetrics.lastFailedRequest = new Date();\r\n      this.updateCircuitBreaker(false);\r\n    }\r\n    \r\n    // Update average response time using exponential moving average\r\n    const alpha = 0.1; // Smoothing factor\r\n    this.healthMetrics.averageResponseTime = \r\n      (alpha * responseTime) + ((1 - alpha) * this.healthMetrics.averageResponseTime);\r\n    \r\n    this.healthMetrics.circuitBreakerState = this.circuitBreakerState;\r\n  }\r\n\r\n  /**\r\n   * Update circuit breaker state based on request success/failure\r\n   */\r\n  private updateCircuitBreaker(success: boolean): void {\r\n    const now = new Date();\r\n    \r\n    if (success) {\r\n      // Reset failure count on successful request\r\n      this.failureCount = 0;\r\n      \r\n      // Close circuit if it was half-open\r\n      if (this.circuitBreakerState === CircuitBreakerState.HALF_OPEN) {\r\n        this.circuitBreakerState = CircuitBreakerState.CLOSED;\r\n        logger.info('✅ Circuit breaker closed - API is healthy');\r\n      }\r\n    } else {\r\n      this.failureCount++;\r\n      this.lastFailureTime = now;\r\n      \r\n      // Open circuit if failure threshold is reached\r\n      if (this.failureCount >= this.circuitBreakerConfig.failureThreshold &&\r\n          this.circuitBreakerState === CircuitBreakerState.CLOSED) {\r\n        this.circuitBreakerState = CircuitBreakerState.OPEN;\r\n        logger.error('🚨 Circuit breaker opened - API is unhealthy');\r\n      }\r\n    }\r\n    \r\n    // Check if circuit should move to half-open state\r\n    if (this.circuitBreakerState === CircuitBreakerState.OPEN &&\r\n        this.lastFailureTime &&\r\n        (now.getTime() - this.lastFailureTime.getTime()) > this.circuitBreakerConfig.recoveryTimeout) {\r\n      this.circuitBreakerState = CircuitBreakerState.HALF_OPEN;\r\n      logger.info('🔄 Circuit breaker half-open - testing API recovery');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if circuit breaker allows requests\r\n   */\r\n  private isCircuitBreakerOpen(): boolean {\r\n    return this.circuitBreakerState === CircuitBreakerState.OPEN;\r\n  }\r\n\r\n  /**\r\n   * Apply rate limiting based on request type\r\n   */\r\n  private async applyRateLimit(requestType: RequestType): Promise<void> {\r\n    try {\r\n      switch (requestType) {\r\n        case RequestType.PUBLIC:\r\n          await this.publicRateLimiter.consume('public');\r\n          break;\r\n        case RequestType.PRIVATE:\r\n          await this.privateRateLimiter.consume('private');\r\n          break;\r\n        case RequestType.ORDERS:\r\n          await this.orderRateLimiter.consume('orders');\r\n          break;\r\n      }\r\n    } catch (rateLimiterRes) {\r\n      const msBeforeNext = rateLimiterRes.msBeforeNext || 1000;\r\n      logger.warn(`⚠️ Rate limit reached, waiting ${msBeforeNext}ms`);\r\n      await new Promise(resolve => setTimeout(resolve, msBeforeNext));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Make authenticated API request with comprehensive error handling\r\n   */\r\n  public async makeRequest<T = any>(config: APIRequestConfig): Promise<T> {\r\n    // Check circuit breaker state\r\n    if (this.isCircuitBreakerOpen()) {\r\n      throw new Error('Circuit breaker is open - API is currently unavailable');\r\n    }\r\n    \r\n    // Apply rate limiting\r\n    const requestType = config.requestType || RequestType.PRIVATE;\r\n    await this.applyRateLimit(requestType);\r\n    \r\n    try {\r\n      const response = await this.axiosInstance.request<T>(config);\r\n      return response.data;\r\n    } catch (error) {\r\n      // Implement retry logic for transient errors\r\n      const retryCount = config.retryCount || 0;\r\n      if (retryCount < GATE_IO_CONFIG.MAX_RETRIES && this.shouldRetry(error)) {\r\n        logger.info(`🔄 Retrying request (attempt ${retryCount + 1}/${GATE_IO_CONFIG.MAX_RETRIES})`);\r\n        \r\n        // Exponential backoff\r\n        const delay = GATE_IO_CONFIG.RETRY_DELAY * Math.pow(2, retryCount);\r\n        await new Promise(resolve => setTimeout(resolve, delay));\r\n        \r\n        return this.makeRequest<T>({\r\n          ...config,\r\n          retryCount: retryCount + 1,\r\n        });\r\n      }\r\n      \r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Determine if request should be retried based on error type\r\n   */\r\n  private shouldRetry(error: any): boolean {\r\n    // Retry on network errors or server errors (5xx)\r\n    if (!error.response) return true; // Network error\r\n    \r\n    const status = error.response.status;\r\n    return status >= 500 || status === 429; // Server error or rate limit\r\n  }\r\n\r\n  /**\r\n   * Perform comprehensive health check\r\n   */\r\n  public async performHealthCheck(): Promise<boolean> {\r\n    try {\r\n      logger.info('🔍 Performing Gate.io API health check...');\r\n      \r\n      // Test public endpoint (server time)\r\n      await this.makeRequest({\r\n        method: 'GET',\r\n        url: '/spot/time',\r\n        requestType: RequestType.PUBLIC,\r\n        skipAuth: true,\r\n      });\r\n      \r\n      // Test private endpoint (account info) if credentials are available\r\n      if (this.credentials) {\r\n        await this.makeRequest({\r\n          method: 'GET',\r\n          url: '/spot/accounts',\r\n          requestType: RequestType.PRIVATE,\r\n        });\r\n      }\r\n      \r\n      logger.info('✅ Gate.io API health check passed');\r\n      return true;\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Gate.io API health check failed:', error.message);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get current API health metrics\r\n   */\r\n  public getHealthMetrics(): APIHealthMetrics {\r\n    return { ...this.healthMetrics };\r\n  }\r\n\r\n  /**\r\n   * Sanitize headers for logging (remove sensitive information)\r\n   */\r\n  private sanitizeHeaders(headers: Record<string, any>): Record<string, any> {\r\n    const sanitized = { ...headers };\r\n    \r\n    // Remove sensitive authentication headers\r\n    delete sanitized.KEY;\r\n    delete sanitized.SIGN;\r\n    delete sanitized.Passphrase;\r\n    \r\n    return sanitized;\r\n  }\r\n\r\n  /**\r\n   * Graceful shutdown of API client\r\n   */\r\n  public async shutdown(): Promise<void> {\r\n    logger.info('🛑 Shutting down Gate.io API client...');\r\n    \r\n    // Log final health metrics\r\n    await this.auditService.logSecurityEvent({\r\n      type: 'API_CLIENT_SHUTDOWN',\r\n      severity: 'INFO',\r\n      details: { healthMetrics: this.healthMetrics },\r\n      timestamp: new Date(),\r\n    });\r\n    \r\n    // Clear sensitive data\r\n    this.credentials = null;\r\n    \r\n    logger.info('✅ Gate.io API client shutdown completed');\r\n  }\r\n}\r\n\r\n// Export types for use in other modules\r\nexport type {\r\n  GateIOCredentials,\r\n  APIRequestConfig,\r\n  APIHealthMetrics,\r\n  CircuitBreakerConfig,\r\n};\r\n\r\nexport { RequestType, CircuitBreakerState };\r\n"],"version":3}