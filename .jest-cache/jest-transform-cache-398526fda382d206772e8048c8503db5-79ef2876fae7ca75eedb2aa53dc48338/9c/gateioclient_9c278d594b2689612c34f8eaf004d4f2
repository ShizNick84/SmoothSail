33bf8d0a2947a8d2b99e868e5fb36ed5
"use strict";
/**
 * =============================================================================
 * GATE.IO API CLIENT - SECURE CRYPTOCURRENCY EXCHANGE INTEGRATION
 * =============================================================================
 *
 * This module implements a secure, production-ready Gate.io API client with
 * comprehensive security features, rate limiting, and error handling.
 * All requests are routed through SSH tunnel for consistent IP address.
 *
 * SECURITY FEATURES:
 * - Military-grade credential encryption and secure storage
 * - Request signing with HMAC-SHA512 authentication
 * - Rate limiting with intelligent backoff strategies
 * - Circuit breaker pattern for API health monitoring
 * - Comprehensive audit logging for all API interactions
 * - Request/response validation and integrity checking
 *
 * CRITICAL SECURITY NOTICE:
 * This client handles real financial assets and trading operations.
 * All security measures must be maintained and regularly audited.
 *
 * @author AI Crypto Trading System
 * @version 1.0.0
 * @license PROPRIETARY
 * =============================================================================
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CircuitBreakerState = exports.RequestType = exports.GateIOClient = void 0;
const axios_1 = __importDefault(require("axios"));
const crypto_1 = __importDefault(require("crypto"));
const rate_limiter_flexible_1 = require("rate-limiter-flexible");
const logger_1 = require("@/core/logging/logger");
const credential_manager_1 = require("@/security/credential-manager");
const audit_service_1 = require("@/security/audit-service");
/**
 * Gate.io API endpoints and configuration
 */
const GATE_IO_CONFIG = {
    BASE_URL: 'https://api.gateio.ws',
    API_VERSION: 'v4',
    TIMEOUT: 30000, // 30 seconds
    MAX_RETRIES: 3,
    RETRY_DELAY: 1000, // 1 second base delay
};
/**
 * Rate limiting configuration based on Gate.io API limits
 * Conservative limits to ensure we never exceed API quotas
 */
const RATE_LIMITS = {
    // Public endpoints: 900 requests per minute
    PUBLIC: {
        points: 900,
        duration: 60, // 60 seconds
    },
    // Private endpoints: 300 requests per minute
    PRIVATE: {
        points: 300,
        duration: 60, // 60 seconds
    },
    // Order endpoints: 100 requests per minute
    ORDERS: {
        points: 100,
        duration: 60, // 60 seconds
    },
};
/**
 * Circuit breaker states for API health monitoring
 */
var CircuitBreakerState;
(function (CircuitBreakerState) {
    CircuitBreakerState["CLOSED"] = "CLOSED";
    CircuitBreakerState["OPEN"] = "OPEN";
    CircuitBreakerState["HALF_OPEN"] = "HALF_OPEN"; // Testing if API has recovered
})(CircuitBreakerState || (exports.CircuitBreakerState = CircuitBreakerState = {}));
/**
 * API request types for proper rate limiting
 */
var RequestType;
(function (RequestType) {
    RequestType["PUBLIC"] = "PUBLIC";
    RequestType["PRIVATE"] = "PRIVATE";
    RequestType["ORDERS"] = "ORDERS";
})(RequestType || (exports.RequestType = RequestType = {}));
/**
 * Secure Gate.io API Client with comprehensive security and monitoring
 */
class GateIOClient {
    axiosInstance;
    credentials = null;
    credentialManager;
    auditService;
    // Rate limiters for different endpoint types
    publicRateLimiter;
    privateRateLimiter;
    orderRateLimiter;
    // Circuit breaker for API health monitoring
    circuitBreakerState = CircuitBreakerState.CLOSED;
    circuitBreakerConfig;
    failureCount = 0;
    lastFailureTime = null;
    // Health metrics tracking
    healthMetrics;
    // Proxy configuration for SSH tunnel routing
    proxyConfig = null;
    constructor() {
        this.credentialManager = new credential_manager_1.CredentialManager();
        this.auditService = new audit_service_1.AuditService();
        // Initialize rate limiters with conservative limits
        this.publicRateLimiter = new rate_limiter_flexible_1.RateLimiterMemory(RATE_LIMITS.PUBLIC);
        this.privateRateLimiter = new rate_limiter_flexible_1.RateLimiterMemory(RATE_LIMITS.PRIVATE);
        this.orderRateLimiter = new rate_limiter_flexible_1.RateLimiterMemory(RATE_LIMITS.ORDERS);
        // Configure circuit breaker
        this.circuitBreakerConfig = {
            failureThreshold: 5, // Open circuit after 5 consecutive failures
            recoveryTimeout: 60000, // Wait 60 seconds before trying again
            monitoringPeriod: 300000, // Monitor for 5 minutes
        };
        // Initialize health metrics
        this.healthMetrics = {
            totalRequests: 0,
            successfulRequests: 0,
            failedRequests: 0,
            averageResponseTime: 0,
            lastSuccessfulRequest: null,
            lastFailedRequest: null,
            circuitBreakerState: CircuitBreakerState.CLOSED,
        };
        // Create axios instance with security configurations
        this.axiosInstance = this.createAxiosInstance();
        logger_1.logger.info('üîê Gate.io API Client initialized with security features');
    }
    /**
     * Initialize the API client with credentials and proxy configuration
     *
     * @param proxyHost - SSH tunnel proxy host (usually localhost)
     * @param proxyPort - SSH tunnel proxy port
     * @returns Promise<boolean> - Success status
     */
    async initialize(proxyHost = 'localhost', proxyPort = 8080) {
        try {
            logger_1.logger.info('üöÄ Initializing Gate.io API client...');
            // Load encrypted credentials
            await this.loadCredentials();
            // Configure proxy for SSH tunnel routing
            this.configureProxy(proxyHost, proxyPort);
            // Test API connectivity
            const isHealthy = await this.performHealthCheck();
            if (isHealthy) {
                logger_1.logger.info('‚úÖ Gate.io API client initialized successfully');
                await this.auditService.logSecurityEvent({
                    type: 'API_CLIENT_INITIALIZED',
                    severity: 'INFO',
                    details: { exchange: 'Gate.io', proxyHost, proxyPort },
                    timestamp: new Date(),
                });
                return true;
            }
            else {
                logger_1.logger.error('‚ùå Gate.io API client health check failed');
                return false;
            }
        }
        catch (error) {
            logger_1.logger.error('‚ùå Failed to initialize Gate.io API client:', error);
            await this.auditService.logSecurityEvent({
                type: 'API_CLIENT_INIT_FAILED',
                severity: 'ERROR',
                details: { error: error.message },
                timestamp: new Date(),
            });
            return false;
        }
    }
    /**
     * Load and decrypt API credentials from secure storage
     */
    async loadCredentials() {
        try {
            // Load encrypted credentials from environment or secure storage
            const encryptedCredentials = {
                apiKey: process.env.GATE_IO_API_KEY,
                secretKey: process.env.GATE_IO_SECRET_KEY,
                passphrase: process.env.GATE_IO_PASSPHRASE,
            };
            if (!encryptedCredentials.apiKey || !encryptedCredentials.secretKey) {
                throw new Error('Gate.io API credentials not found in environment');
            }
            // Decrypt credentials using credential manager
            this.credentials = {
                apiKey: await this.credentialManager.decryptCredential(encryptedCredentials.apiKey),
                secretKey: await this.credentialManager.decryptCredential(encryptedCredentials.secretKey),
                passphrase: encryptedCredentials.passphrase
                    ? await this.credentialManager.decryptCredential(encryptedCredentials.passphrase)
                    : undefined,
            };
            logger_1.logger.info('üîë Gate.io API credentials loaded and decrypted successfully');
        }
        catch (error) {
            logger_1.logger.error('‚ùå Failed to load Gate.io API credentials:', error);
            throw new Error('Failed to load API credentials');
        }
    }
    /**
     * Configure proxy settings for SSH tunnel routing
     */
    configureProxy(host, port) {
        this.proxyConfig = {
            host,
            port,
            protocol: 'http',
        };
        // Update axios instance with proxy configuration
        this.axiosInstance.defaults.proxy = {
            host: this.proxyConfig.host,
            port: this.proxyConfig.port,
            protocol: this.proxyConfig.protocol,
        };
        logger_1.logger.info(`üåê Configured API requests to route through SSH tunnel: ${host}:${port}`);
    }
    /**
     * Create axios instance with security configurations
     */
    createAxiosInstance() {
        const instance = axios_1.default.create({
            baseURL: `${GATE_IO_CONFIG.BASE_URL}/api/${GATE_IO_CONFIG.API_VERSION}`,
            timeout: GATE_IO_CONFIG.TIMEOUT,
            headers: {
                'Content-Type': 'application/json',
                'User-Agent': 'AI-Crypto-Trading-Agent/1.0.0',
            },
        });
        // Add request interceptor for authentication and logging
        instance.interceptors.request.use((config) => this.handleRequestInterceptor(config), (error) => this.handleRequestError(error));
        // Add response interceptor for logging and error handling
        instance.interceptors.response.use((response) => this.handleResponseInterceptor(response), (error) => this.handleResponseError(error));
        return instance;
    }
    /**
     * Handle request interceptor for authentication and logging
     */
    async handleRequestInterceptor(config) {
        const startTime = Date.now();
        // Add request timing for metrics
        config.metadata = { startTime };
        // Skip authentication for public endpoints
        if (config.skipAuth) {
            return config;
        }
        // Add authentication headers for private endpoints
        if (this.credentials) {
            const timestamp = Math.floor(Date.now() / 1000).toString();
            const method = config.method?.toUpperCase() || 'GET';
            const url = config.url || '';
            const body = config.data ? JSON.stringify(config.data) : '';
            // Create signature for request authentication
            const signature = this.createSignature(method, url, body, timestamp);
            config.headers = {
                ...config.headers,
                'KEY': this.credentials.apiKey,
                'Timestamp': timestamp,
                'SIGN': signature,
            };
            if (this.credentials.passphrase) {
                config.headers['Passphrase'] = this.credentials.passphrase;
            }
        }
        // Log API request for audit trail
        await this.auditService.logAPIRequest({
            method: config.method?.toUpperCase() || 'GET',
            url: config.url || '',
            timestamp: new Date(),
            headers: this.sanitizeHeaders(config.headers || {}),
        });
        return config;
    }
    /**
     * Create HMAC-SHA512 signature for Gate.io API authentication
     */
    createSignature(method, url, body, timestamp) {
        if (!this.credentials?.secretKey) {
            throw new Error('Secret key not available for signature creation');
        }
        // Create signature string according to Gate.io API specification
        const signatureString = `${method}\n${url}\n\n${body}\n${timestamp}`;
        // Generate HMAC-SHA512 signature
        const signature = crypto_1.default
            .createHmac('sha512', this.credentials.secretKey)
            .update(signatureString)
            .digest('hex');
        return signature;
    }
    /**
     * Handle response interceptor for metrics and logging
     */
    async handleResponseInterceptor(response) {
        const endTime = Date.now();
        const startTime = response.config.metadata?.startTime || endTime;
        const responseTime = endTime - startTime;
        // Update health metrics
        this.updateHealthMetrics(true, responseTime);
        // Log successful API response
        await this.auditService.logAPIResponse({
            status: response.status,
            responseTime,
            timestamp: new Date(),
            success: true,
        });
        return response;
    }
    /**
     * Handle request errors
     */
    async handleRequestError(error) {
        logger_1.logger.error('‚ùå API request error:', error.message);
        await this.auditService.logSecurityEvent({
            type: 'API_REQUEST_ERROR',
            severity: 'ERROR',
            details: { error: error.message },
            timestamp: new Date(),
        });
        throw error;
    }
    /**
     * Handle response errors with retry logic and circuit breaker
     */
    async handleResponseError(error) {
        const responseTime = Date.now() - (error.config?.metadata?.startTime || Date.now());
        // Update health metrics for failed request
        this.updateHealthMetrics(false, responseTime);
        // Log failed API response
        await this.auditService.logAPIResponse({
            status: error.response?.status || 0,
            responseTime,
            timestamp: new Date(),
            success: false,
            error: error.message,
        });
        // Handle specific error types
        if (error.response?.status === 429) {
            logger_1.logger.warn('‚ö†Ô∏è Rate limit exceeded, implementing backoff strategy');
            await this.handleRateLimitError(error);
        }
        else if (error.response?.status >= 500) {
            logger_1.logger.error('‚ùå Server error detected, updating circuit breaker');
            this.updateCircuitBreaker(false);
        }
        throw error;
    }
    /**
     * Handle rate limit errors with intelligent backoff
     */
    async handleRateLimitError(error) {
        const retryAfter = error.response?.headers['retry-after'];
        const backoffTime = retryAfter ? parseInt(retryAfter) * 1000 : 5000; // 5 seconds default
        logger_1.logger.info(`‚è≥ Implementing rate limit backoff: ${backoffTime}ms`);
        await new Promise(resolve => setTimeout(resolve, backoffTime));
    }
    /**
     * Update health metrics for monitoring
     */
    updateHealthMetrics(success, responseTime) {
        this.healthMetrics.totalRequests++;
        if (success) {
            this.healthMetrics.successfulRequests++;
            this.healthMetrics.lastSuccessfulRequest = new Date();
            this.updateCircuitBreaker(true);
        }
        else {
            this.healthMetrics.failedRequests++;
            this.healthMetrics.lastFailedRequest = new Date();
            this.updateCircuitBreaker(false);
        }
        // Update average response time using exponential moving average
        const alpha = 0.1; // Smoothing factor
        this.healthMetrics.averageResponseTime =
            (alpha * responseTime) + ((1 - alpha) * this.healthMetrics.averageResponseTime);
        this.healthMetrics.circuitBreakerState = this.circuitBreakerState;
    }
    /**
     * Update circuit breaker state based on request success/failure
     */
    updateCircuitBreaker(success) {
        const now = new Date();
        if (success) {
            // Reset failure count on successful request
            this.failureCount = 0;
            // Close circuit if it was half-open
            if (this.circuitBreakerState === CircuitBreakerState.HALF_OPEN) {
                this.circuitBreakerState = CircuitBreakerState.CLOSED;
                logger_1.logger.info('‚úÖ Circuit breaker closed - API is healthy');
            }
        }
        else {
            this.failureCount++;
            this.lastFailureTime = now;
            // Open circuit if failure threshold is reached
            if (this.failureCount >= this.circuitBreakerConfig.failureThreshold &&
                this.circuitBreakerState === CircuitBreakerState.CLOSED) {
                this.circuitBreakerState = CircuitBreakerState.OPEN;
                logger_1.logger.error('üö® Circuit breaker opened - API is unhealthy');
            }
        }
        // Check if circuit should move to half-open state
        if (this.circuitBreakerState === CircuitBreakerState.OPEN &&
            this.lastFailureTime &&
            (now.getTime() - this.lastFailureTime.getTime()) > this.circuitBreakerConfig.recoveryTimeout) {
            this.circuitBreakerState = CircuitBreakerState.HALF_OPEN;
            logger_1.logger.info('üîÑ Circuit breaker half-open - testing API recovery');
        }
    }
    /**
     * Check if circuit breaker allows requests
     */
    isCircuitBreakerOpen() {
        return this.circuitBreakerState === CircuitBreakerState.OPEN;
    }
    /**
     * Apply rate limiting based on request type
     */
    async applyRateLimit(requestType) {
        try {
            switch (requestType) {
                case RequestType.PUBLIC:
                    await this.publicRateLimiter.consume('public');
                    break;
                case RequestType.PRIVATE:
                    await this.privateRateLimiter.consume('private');
                    break;
                case RequestType.ORDERS:
                    await this.orderRateLimiter.consume('orders');
                    break;
            }
        }
        catch (rateLimiterRes) {
            const msBeforeNext = rateLimiterRes.msBeforeNext || 1000;
            logger_1.logger.warn(`‚ö†Ô∏è Rate limit reached, waiting ${msBeforeNext}ms`);
            await new Promise(resolve => setTimeout(resolve, msBeforeNext));
        }
    }
    /**
     * Make authenticated API request with comprehensive error handling
     */
    async makeRequest(config) {
        // Check circuit breaker state
        if (this.isCircuitBreakerOpen()) {
            throw new Error('Circuit breaker is open - API is currently unavailable');
        }
        // Apply rate limiting
        const requestType = config.requestType || RequestType.PRIVATE;
        await this.applyRateLimit(requestType);
        try {
            const response = await this.axiosInstance.request(config);
            return response.data;
        }
        catch (error) {
            // Implement retry logic for transient errors
            const retryCount = config.retryCount || 0;
            if (retryCount < GATE_IO_CONFIG.MAX_RETRIES && this.shouldRetry(error)) {
                logger_1.logger.info(`üîÑ Retrying request (attempt ${retryCount + 1}/${GATE_IO_CONFIG.MAX_RETRIES})`);
                // Exponential backoff
                const delay = GATE_IO_CONFIG.RETRY_DELAY * Math.pow(2, retryCount);
                await new Promise(resolve => setTimeout(resolve, delay));
                return this.makeRequest({
                    ...config,
                    retryCount: retryCount + 1,
                });
            }
            throw error;
        }
    }
    /**
     * Determine if request should be retried based on error type
     */
    shouldRetry(error) {
        // Retry on network errors or server errors (5xx)
        if (!error.response)
            return true; // Network error
        const status = error.response.status;
        return status >= 500 || status === 429; // Server error or rate limit
    }
    /**
     * Perform comprehensive health check
     */
    async performHealthCheck() {
        try {
            logger_1.logger.info('üîç Performing Gate.io API health check...');
            // Test public endpoint (server time)
            await this.makeRequest({
                method: 'GET',
                url: '/spot/time',
                requestType: RequestType.PUBLIC,
                skipAuth: true,
            });
            // Test private endpoint (account info) if credentials are available
            if (this.credentials) {
                await this.makeRequest({
                    method: 'GET',
                    url: '/spot/accounts',
                    requestType: RequestType.PRIVATE,
                });
            }
            logger_1.logger.info('‚úÖ Gate.io API health check passed');
            return true;
        }
        catch (error) {
            logger_1.logger.error('‚ùå Gate.io API health check failed:', error.message);
            return false;
        }
    }
    /**
     * Get current API health metrics
     */
    getHealthMetrics() {
        return { ...this.healthMetrics };
    }
    /**
     * Sanitize headers for logging (remove sensitive information)
     */
    sanitizeHeaders(headers) {
        const sanitized = { ...headers };
        // Remove sensitive authentication headers
        delete sanitized.KEY;
        delete sanitized.SIGN;
        delete sanitized.Passphrase;
        return sanitized;
    }
    /**
     * Graceful shutdown of API client
     */
    async shutdown() {
        logger_1.logger.info('üõë Shutting down Gate.io API client...');
        // Log final health metrics
        await this.auditService.logSecurityEvent({
            type: 'API_CLIENT_SHUTDOWN',
            severity: 'INFO',
            details: { healthMetrics: this.healthMetrics },
            timestamp: new Date(),
        });
        // Clear sensitive data
        this.credentials = null;
        logger_1.logger.info('‚úÖ Gate.io API client shutdown completed');
    }
}
exports.GateIOClient = GateIOClient;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,