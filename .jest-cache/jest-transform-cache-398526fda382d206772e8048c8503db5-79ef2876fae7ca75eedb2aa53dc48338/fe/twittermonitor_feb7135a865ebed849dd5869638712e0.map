{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\ai\\sentiment\\twitter-monitor.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\ai\\sentiment\\twitter-monitor.ts"],"sourcesContent":["/**\r\n * Twitter Sentiment Monitor\r\n * Implements Twitter API integration for crypto hashtags and influential account monitoring\r\n */\r\n\r\nimport { TwitterApi, TweetV2, UserV2 } from 'twitter-api-v2';\r\nimport Sentiment from 'sentiment';\r\nimport { \r\n  SentimentScore, \r\n  TweetData, \r\n  TwitterConfig, \r\n  InfluentialAccount,\r\n  SentimentAlert \r\n} from './types';\r\nimport { logger } from '../../core/logging/logger';\r\n\r\nexport class TwitterSentimentMonitor {\r\n  private client: TwitterApi;\r\n  private sentiment: Sentiment;\r\n  private logger = logger;\r\n  private isMonitoring: boolean = false;\r\n  private monitoringInterval?: NodeJS.Timeout;\r\n  \r\n  // Crypto-related hashtags to monitor\r\n  private readonly cryptoHashtags = [\r\n    '#Bitcoin', '#BTC', '#Ethereum', '#ETH', '#crypto', '#cryptocurrency',\r\n    '#blockchain', '#DeFi', '#NFT', '#altcoin', '#HODL', '#trading',\r\n    '#cryptotrading', '#bullish', '#bearish', '#moon', '#diamond', '#hands'\r\n  ];\r\n  \r\n  // Influential crypto accounts to monitor\r\n  private influentialAccounts: InfluentialAccount[] = [\r\n    { username: 'elonmusk', platform: 'twitter', followers: 150000000, influence: 95, reliability: 70, specialization: ['bitcoin', 'dogecoin'] },\r\n    { username: 'VitalikButerin', platform: 'twitter', followers: 5000000, influence: 90, reliability: 95, specialization: ['ethereum', 'defi'] },\r\n    { username: 'cz_binance', platform: 'twitter', followers: 8000000, influence: 85, reliability: 80, specialization: ['binance', 'trading'] },\r\n    { username: 'saylor', platform: 'twitter', followers: 3000000, influence: 80, reliability: 85, specialization: ['bitcoin', 'microstrategy'] },\r\n    { username: 'APompliano', platform: 'twitter', followers: 1500000, influence: 75, reliability: 80, specialization: ['bitcoin', 'investment'] }\r\n  ];\r\n\r\n  constructor(config: TwitterConfig) {\r\n    this.client = new TwitterApi({\r\n      appKey: config.apiKey,\r\n      appSecret: config.apiSecret,\r\n      accessToken: config.accessToken,\r\n      accessSecret: config.accessTokenSecret,\r\n    });\r\n    \r\n    this.sentiment = new Sentiment();\r\n    // Logger is initialized as class property\r\n  }\r\n\r\n  /**\r\n   * Start monitoring Twitter sentiment\r\n   */\r\n  async startMonitoring(intervalMinutes: number = 5): Promise<void> {\r\n    if (this.isMonitoring) {\r\n      this.logger.warn('Twitter monitoring is already running');\r\n      return;\r\n    }\r\n\r\n    this.logger.info('Starting Twitter sentiment monitoring');\r\n    this.isMonitoring = true;\r\n\r\n    // Initial analysis\r\n    await this.performSentimentAnalysis();\r\n\r\n    // Set up periodic monitoring\r\n    this.monitoringInterval = setInterval(async () => {\r\n      try {\r\n        await this.performSentimentAnalysis();\r\n      } catch (error) {\r\n        this.logger.error('Error during Twitter sentiment analysis:', error);\r\n      }\r\n    }, intervalMinutes * 60 * 1000);\r\n  }\r\n\r\n  /**\r\n   * Stop monitoring Twitter sentiment\r\n   */\r\n  stopMonitoring(): void {\r\n    if (!this.isMonitoring) {\r\n      this.logger.warn('Twitter monitoring is not running');\r\n      return;\r\n    }\r\n\r\n    this.logger.info('Stopping Twitter sentiment monitoring');\r\n    this.isMonitoring = false;\r\n\r\n    if (this.monitoringInterval) {\r\n      clearInterval(this.monitoringInterval);\r\n      this.monitoringInterval = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Perform comprehensive sentiment analysis\r\n   */\r\n  private async performSentimentAnalysis(): Promise<SentimentScore> {\r\n    try {\r\n      this.logger.info('Performing Twitter sentiment analysis');\r\n\r\n      // Gather tweets from hashtags and influential accounts\r\n      const [hashtagTweets, influencerTweets] = await Promise.all([\r\n        this.gatherHashtagTweets(),\r\n        this.gatherInfluencerTweets()\r\n      ]);\r\n\r\n      const allTweets = [...hashtagTweets, ...influencerTweets];\r\n      \r\n      if (allTweets.length === 0) {\r\n        this.logger.warn('No tweets found for sentiment analysis');\r\n        return this.createEmptySentimentScore();\r\n      }\r\n\r\n      // Analyze sentiment\r\n      const sentimentScore = this.analyzeTweetsSentiment(allTweets);\r\n      \r\n      // Detect trends and alerts\r\n      await this.detectSentimentTrends(sentimentScore);\r\n      \r\n      this.logger.info(`Twitter sentiment analysis complete: ${sentimentScore.score.toFixed(2)}`);\r\n      return sentimentScore;\r\n\r\n    } catch (error) {\r\n      this.logger.error('Error in Twitter sentiment analysis:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gather tweets from crypto hashtags\r\n   */\r\n  private async gatherHashtagTweets(): Promise<TweetData[]> {\r\n    const tweets: TweetData[] = [];\r\n    \r\n    try {\r\n      // Search for recent tweets with crypto hashtags\r\n      const hashtagQuery = this.cryptoHashtags.join(' OR ');\r\n      const searchResults = await this.client.v2.search(hashtagQuery, {\r\n        max_results: 100,\r\n        'tweet.fields': ['created_at', 'public_metrics', 'author_id', 'entities'],\r\n        'user.fields': ['public_metrics'],\r\n        expansions: ['author_id']\r\n      });\r\n\r\n      for (const tweet of searchResults.data || []) {\r\n        const author = searchResults.includes?.users?.find(u => u.id === tweet.author_id);\r\n        \r\n        tweets.push({\r\n          id: tweet.id,\r\n          text: tweet.text,\r\n          author: author?.username || 'unknown',\r\n          followers: author?.public_metrics?.followers_count || 0,\r\n          retweets: tweet.public_metrics?.retweet_count || 0,\r\n          likes: tweet.public_metrics?.like_count || 0,\r\n          timestamp: new Date(tweet.created_at || Date.now()),\r\n          hashtags: tweet.entities?.hashtags?.map(h => h.tag) || [],\r\n          mentions: tweet.entities?.mentions?.map(m => m.username) || []\r\n        });\r\n      }\r\n\r\n      this.logger.info(`Gathered ${tweets.length} hashtag tweets`);\r\n      return tweets;\r\n\r\n    } catch (error) {\r\n      this.logger.error('Error gathering hashtag tweets:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gather tweets from influential accounts\r\n   */\r\n  private async gatherInfluencerTweets(): Promise<TweetData[]> {\r\n    const tweets: TweetData[] = [];\r\n    \r\n    try {\r\n      for (const account of this.influentialAccounts) {\r\n        try {\r\n          // Get user timeline\r\n          const userTweets = await this.client.v2.userTimelineByUsername(account.username, {\r\n            max_results: 20,\r\n            'tweet.fields': ['created_at', 'public_metrics', 'entities'],\r\n            exclude: ['retweets', 'replies']\r\n          });\r\n\r\n          for (const tweet of userTweets.data || []) {\r\n            // Only include crypto-related tweets\r\n            if (this.isCryptoRelated(tweet.text)) {\r\n              tweets.push({\r\n                id: tweet.id,\r\n                text: tweet.text,\r\n                author: account.username,\r\n                followers: account.followers,\r\n                retweets: tweet.public_metrics?.retweet_count || 0,\r\n                likes: tweet.public_metrics?.like_count || 0,\r\n                timestamp: new Date(tweet.created_at || Date.now()),\r\n                hashtags: tweet.entities?.hashtags?.map(h => h.tag) || [],\r\n                mentions: tweet.entities?.mentions?.map(m => m.username) || []\r\n              });\r\n            }\r\n          }\r\n        } catch (error) {\r\n          this.logger.warn(`Error getting tweets from ${account.username}:`, error);\r\n        }\r\n      }\r\n\r\n      this.logger.info(`Gathered ${tweets.length} influencer tweets`);\r\n      return tweets;\r\n\r\n    } catch (error) {\r\n      this.logger.error('Error gathering influencer tweets:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if tweet text is crypto-related\r\n   */\r\n  private isCryptoRelated(text: string): boolean {\r\n    const cryptoKeywords = [\r\n      'bitcoin', 'btc', 'ethereum', 'eth', 'crypto', 'cryptocurrency',\r\n      'blockchain', 'defi', 'nft', 'altcoin', 'hodl', 'trading',\r\n      'bull', 'bear', 'moon', 'diamond', 'hands', 'satoshi'\r\n    ];\r\n    \r\n    const lowerText = text.toLowerCase();\r\n    return cryptoKeywords.some(keyword => lowerText.includes(keyword));\r\n  }\r\n\r\n  /**\r\n   * Analyze sentiment of collected tweets\r\n   */\r\n  private analyzeTweetsSentiment(tweets: TweetData[]): SentimentScore {\r\n    let totalScore = 0;\r\n    let totalWeight = 0;\r\n    const keyTopics: string[] = [];\r\n    const topicCounts: Record<string, number> = {};\r\n\r\n    for (const tweet of tweets) {\r\n      // Calculate base sentiment\r\n      const sentimentResult = this.sentiment.analyze(tweet.text);\r\n      let tweetScore = sentimentResult.score;\r\n      \r\n      // Normalize to -100 to 100 scale\r\n      tweetScore = Math.max(-100, Math.min(100, tweetScore * 10));\r\n      \r\n      // Calculate weight based on engagement and follower count\r\n      const engagementWeight = Math.log10(tweet.likes + tweet.retweets + 1);\r\n      const followerWeight = Math.log10(tweet.followers + 1);\r\n      const weight = engagementWeight + followerWeight;\r\n      \r\n      totalScore += tweetScore * weight;\r\n      totalWeight += weight;\r\n      \r\n      // Track topics\r\n      tweet.hashtags.forEach(hashtag => {\r\n        const topic = hashtag.toLowerCase();\r\n        topicCounts[topic] = (topicCounts[topic] || 0) + 1;\r\n      });\r\n    }\r\n\r\n    // Get top topics\r\n    const sortedTopics = Object.entries(topicCounts)\r\n      .sort(([,a], [,b]) => b - a)\r\n      .slice(0, 10)\r\n      .map(([topic]) => topic);\r\n\r\n    const finalScore = totalWeight > 0 ? totalScore / totalWeight : 0;\r\n    const confidence = Math.min(100, Math.log10(tweets.length + 1) * 30);\r\n\r\n    return {\r\n      source: 'twitter',\r\n      score: Math.round(finalScore * 100) / 100,\r\n      confidence: Math.round(confidence),\r\n      volume: tweets.length,\r\n      timestamp: new Date(),\r\n      keyTopics: sortedTopics,\r\n      rawData: {\r\n        totalTweets: tweets.length,\r\n        totalWeight,\r\n        topicCounts\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Detect sentiment trends and generate alerts\r\n   */\r\n  private async detectSentimentTrends(currentScore: SentimentScore): Promise<void> {\r\n    // This would typically compare with historical data\r\n    // For now, we'll implement basic threshold-based alerts\r\n    \r\n    const alerts: SentimentAlert[] = [];\r\n\r\n    // Extreme sentiment alerts\r\n    if (currentScore.score > 70) {\r\n      alerts.push({\r\n        id: `twitter_extreme_positive_${Date.now()}`,\r\n        type: 'EXTREME_POSITIVE',\r\n        severity: 'HIGH',\r\n        message: `Extremely positive Twitter sentiment detected: ${currentScore.score}`,\r\n        timestamp: new Date(),\r\n        source: 'twitter',\r\n        data: currentScore\r\n      });\r\n    } else if (currentScore.score < -70) {\r\n      alerts.push({\r\n        id: `twitter_extreme_negative_${Date.now()}`,\r\n        type: 'EXTREME_NEGATIVE',\r\n        severity: 'HIGH',\r\n        message: `Extremely negative Twitter sentiment detected: ${currentScore.score}`,\r\n        timestamp: new Date(),\r\n        source: 'twitter',\r\n        data: currentScore\r\n      });\r\n    }\r\n\r\n    // Volume spike alerts\r\n    if (currentScore.volume > 500) {\r\n      alerts.push({\r\n        id: `twitter_volume_spike_${Date.now()}`,\r\n        type: 'VOLUME_SPIKE',\r\n        severity: 'MEDIUM',\r\n        message: `High Twitter activity detected: ${currentScore.volume} tweets`,\r\n        timestamp: new Date(),\r\n        source: 'twitter',\r\n        data: currentScore\r\n      });\r\n    }\r\n\r\n    // Log alerts\r\n    for (const alert of alerts) {\r\n      this.logger.warn(`Twitter Sentiment Alert: ${alert.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create empty sentiment score for error cases\r\n   */\r\n  private createEmptySentimentScore(): SentimentScore {\r\n    return {\r\n      source: 'twitter',\r\n      score: 0,\r\n      confidence: 0,\r\n      volume: 0,\r\n      timestamp: new Date(),\r\n      keyTopics: []\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get current sentiment score\r\n   */\r\n  async getCurrentSentiment(): Promise<SentimentScore> {\r\n    return await this.performSentimentAnalysis();\r\n  }\r\n\r\n  /**\r\n   * Get influential accounts being monitored\r\n   */\r\n  getInfluentialAccounts(): InfluentialAccount[] {\r\n    return [...this.influentialAccounts];\r\n  }\r\n\r\n  /**\r\n   * Add influential account to monitoring list\r\n   */\r\n  addInfluentialAccount(account: InfluentialAccount): void {\r\n    this.influentialAccounts.push(account);\r\n    this.logger.info(`Added influential account: ${account.username}`);\r\n  }\r\n\r\n  /**\r\n   * Remove influential account from monitoring list\r\n   */\r\n  removeInfluentialAccount(username: string): void {\r\n    const index = this.influentialAccounts.findIndex(acc => acc.username === username);\r\n    if (index !== -1) {\r\n      this.influentialAccounts.splice(index, 1);\r\n      this.logger.info(`Removed influential account: ${username}`);\r\n    }\r\n  }\r\n}\r\n"],"version":3}