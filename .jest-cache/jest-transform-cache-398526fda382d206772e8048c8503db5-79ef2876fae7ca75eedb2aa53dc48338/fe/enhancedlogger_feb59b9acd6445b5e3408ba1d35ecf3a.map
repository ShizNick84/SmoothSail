{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\core\\logging\\enhanced-logger.ts","mappings":";AAAA;;;;;;;;;;;;;;;;;;GAkBG;;;;;;AAEH,qCAA+C;AAC/C,kDAA0B;AAE1B;;GAEG;AACU,QAAA,SAAS,GAAG;IACvB,gBAAgB;IAChB,OAAO,EAAE,GAAG;IACZ,KAAK,EAAE,GAAG;IACV,OAAO,EAAE,IAAI;IACb,IAAI,EAAE,IAAI;IACV,KAAK,EAAE,IAAI;IAEX,qBAAqB;IACrB,GAAG,EAAE,IAAI;IACT,IAAI,EAAE,IAAI;IACV,MAAM,EAAE,IAAI;IACZ,IAAI,EAAE,IAAI;IACV,OAAO,EAAE,IAAI;IACb,SAAS,EAAE,IAAI;IAEf,oBAAoB;IACpB,KAAK,EAAE,IAAI;IACX,IAAI,EAAE,IAAI;IACV,OAAO,EAAE,IAAI;IACb,UAAU,EAAE,IAAI;IAChB,QAAQ,EAAE,IAAI;IAEd,2BAA2B;IAC3B,SAAS,EAAE,IAAI;IACf,YAAY,EAAE,IAAI;IAClB,MAAM,EAAE,IAAI;IACZ,GAAG,EAAE,IAAI;IACT,QAAQ,EAAE,KAAK;IAEf,0BAA0B;IAC1B,QAAQ,EAAE,IAAI;IACd,KAAK,EAAE,IAAI;IACX,KAAK,EAAE,IAAI;IACX,OAAO,EAAE,KAAK;IACd,MAAM,EAAE,IAAI;IAEZ,cAAc;IACd,IAAI,EAAE,GAAG;IACT,IAAI,EAAE,IAAI;IACV,MAAM,EAAE,IAAI;IACZ,GAAG,EAAE,IAAI;IACT,IAAI,EAAE,IAAI;IAEV,cAAc;IACd,IAAI,EAAE,IAAI;IACV,IAAI,EAAE,IAAI;IACV,MAAM,EAAE,IAAI;IACZ,KAAK,EAAE,IAAI;IACX,QAAQ,EAAE,IAAI;IACd,UAAU,EAAE,IAAI;IAEhB,gBAAgB;IAChB,QAAQ,EAAE,IAAI;IACd,KAAK,EAAE,IAAI;IACX,IAAI,EAAE,IAAI;IACV,IAAI,EAAE,IAAI;CACF,CAAC;AAEX;;GAEG;AACU,QAAA,SAAS,GAAG;IACvB,KAAK,EAAE,eAAK,CAAC,GAAG;IAChB,IAAI,EAAE,eAAK,CAAC,MAAM;IAClB,IAAI,EAAE,eAAK,CAAC,IAAI;IAChB,KAAK,EAAE,eAAK,CAAC,IAAI;IACjB,OAAO,EAAE,eAAK,CAAC,KAAK;IACpB,OAAO,EAAE,eAAK,CAAC,OAAO;IACtB,QAAQ,EAAE,eAAK,CAAC,IAAI;IACpB,WAAW,EAAE,eAAK,CAAC,KAAK;CAChB,CAAC;AAEX;;GAEG;AACH,MAAa,cAAe,SAAQ,eAAM;IAChC,kBAAkB,GAAwB,IAAI,GAAG,EAAE,CAAC;IACpD,iBAAiB,GAAwB,IAAI,GAAG,EAAE,CAAC;IAE3D,YAAY,aAAsB;QAChC,KAAK,CAAC,aAAa,CAAC,CAAC;IACvB,CAAC;IAED;;OAEG;IACI,YAAY,CACjB,KAA0C,EAC1C,KAAa,EACb,OAAe,EACf,IAAkB;QAElB,MAAM,gBAAgB,GAAG,GAAG,KAAK,IAAI,OAAO,EAAE,CAAC;QAE/C,QAAQ,KAAK,EAAE,CAAC;YACd,KAAK,MAAM;gBACT,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;gBAClC,MAAM;YACR,KAAK,MAAM;gBACT,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;gBAClC,MAAM;YACR,KAAK,OAAO;gBACV,IAAI,CAAC,KAAK,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;gBACnC,MAAM;YACR,KAAK,OAAO;gBACV,IAAI,CAAC,KAAK,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;gBACnC,MAAM;QACV,CAAC;IACH,CAAC;IAED;;OAEG;IACI,mBAAmB,CACxB,SAA+D,EAC/D,MAAc,EACd,MAAe,EACf,KAAc,EACd,MAAe,EACf,IAAkB;QAElB,MAAM,KAAK,GAAG,iBAAS,CAAC,SAAS,CAAC,CAAC;QACnC,IAAI,OAAO,GAAG,GAAG,SAAS,YAAY,CAAC;QAEvC,MAAM,YAAY,GAAgB;YAChC,GAAG,IAAI;YACP,MAAM;YACN,SAAS,EAAE,SAAS,CAAC,WAAW,EAAE;YAClC,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;SACpC,CAAC;QAEF,IAAI,MAAM,KAAK,SAAS,EAAE,CAAC;YACzB,OAAO,IAAI,cAAc,MAAM,EAAE,CAAC;YAClC,YAAY,CAAC,MAAM,GAAG,MAAM,CAAC;QAC/B,CAAC;QAED,IAAI,KAAK,KAAK,SAAS,EAAE,CAAC;YACxB,OAAO,IAAI,cAAc,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC;YAC5C,YAAY,CAAC,KAAK,GAAG,KAAK,CAAC;QAC7B,CAAC;QAED,IAAI,MAAM,KAAK,SAAS,EAAE,CAAC;YACzB,MAAM,WAAW,GAAG,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,iBAAS,CAAC,MAAM,CAAC,CAAC,CAAC,iBAAS,CAAC,IAAI,CAAC;YACnE,OAAO,IAAI,WAAW,WAAW,KAAK,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC;YAC1D,YAAY,CAAC,MAAM,GAAG,MAAM,CAAC;QAC/B,CAAC;QAED,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,WAAW,EAAE,EAAE,GAAG,KAAK,IAAI,OAAO,EAAE,EAAE,YAAY,CAAC,CAAC;QAC3E,IAAI,CAAC,gBAAgB,CAAC,WAAW,SAAS,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;IAC9D,CAAC;IAED;;OAEG;IACI,eAAe,CACpB,MAAoE,EACpE,SAAiB,EACjB,OAA6B,EAC7B,IAAkB;QAElB,MAAM,YAAY,GAAG;YACnB,OAAO,EAAE,iBAAS,CAAC,OAAO;YAC1B,OAAO,EAAE,iBAAS,CAAC,OAAO;YAC1B,QAAQ,EAAE,iBAAS,CAAC,KAAK;YACzB,QAAQ,EAAE,iBAAS,CAAC,KAAK;YACzB,QAAQ,EAAE,iBAAS,CAAC,IAAI;SACzB,CAAC;QAEF,MAAM,KAAK,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC;QACnC,MAAM,OAAO,GAAG,UAAU,MAAM,CAAC,WAAW,EAAE,KAAK,SAAS,EAAE,CAAC;QAE/D,MAAM,YAAY,GAAgB;YAChC,GAAG,IAAI;YACP,SAAS;YACT,MAAM,EAAE,MAAM,CAAC,WAAW,EAAE;YAC5B,OAAO;YACP,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;SACpC,CAAC;QAEF,MAAM,KAAK,GAAG,MAAM,KAAK,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;YAClC,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC;QAEpD,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,YAAY,CAAC,CAAC;IACzD,CAAC;IAED;;OAEG;IACI,cAAc,CACnB,MAAc,EACd,KAAa,EACb,IAAY,EACZ,SAAiD,EACjD,IAAkB;QAElB,IAAI,KAAK,GAAG,iBAAS,CAAC,IAAI,CAAC;QAC3B,IAAI,KAAK,GAA8B,MAAM,CAAC;QAE9C,IAAI,SAAS,EAAE,CAAC;YACd,IAAI,KAAK,IAAI,SAAS,CAAC,QAAQ,EAAE,CAAC;gBAChC,KAAK,GAAG,iBAAS,CAAC,KAAK,CAAC;gBACxB,KAAK,GAAG,OAAO,CAAC;YAClB,CAAC;iBAAM,IAAI,KAAK,IAAI,SAAS,CAAC,OAAO,EAAE,CAAC;gBACtC,KAAK,GAAG,iBAAS,CAAC,OAAO,CAAC;gBAC1B,KAAK,GAAG,MAAM,CAAC;YACjB,CAAC;iBAAM,CAAC;gBACN,KAAK,GAAG,iBAAS,CAAC,OAAO,CAAC;YAC5B,CAAC;QACH,CAAC;QAED,MAAM,OAAO,GAAG,uBAAuB,MAAM,MAAM,KAAK,GAAG,IAAI,EAAE,CAAC;QAElE,MAAM,YAAY,GAAgB;YAChC,GAAG,IAAI;YACP,MAAM;YACN,KAAK;YACL,IAAI;YACJ,SAAS;YACT,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;SACpC,CAAC;QAEF,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,YAAY,CAAC,CAAC;QACvD,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IAC7C,CAAC;IAED;;OAEG;IACI,eAAe,CACpB,OAAe,EACf,MAAiE,EACjE,OAAgB,EAChB,IAAkB;QAElB,MAAM,YAAY,GAAG;YACnB,SAAS,EAAE,iBAAS,CAAC,SAAS;YAC9B,YAAY,EAAE,iBAAS,CAAC,YAAY;YACpC,YAAY,EAAE,iBAAS,CAAC,OAAO;YAC/B,OAAO,EAAE,iBAAS,CAAC,OAAO;SAC3B,CAAC;QAEF,MAAM,KAAK,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC;QACnC,IAAI,OAAO,GAAG,GAAG,OAAO,IAAI,MAAM,CAAC,WAAW,EAAE,EAAE,CAAC;QAEnD,IAAI,OAAO,KAAK,SAAS,EAAE,CAAC;YAC1B,MAAM,YAAY,GAAG,OAAO,GAAG,GAAG,CAAC,CAAC,CAAC,iBAAS,CAAC,IAAI,CAAC,CAAC;gBACjC,OAAO,GAAG,GAAG,CAAC,CAAC,CAAC,iBAAS,CAAC,IAAI,CAAC,CAAC,CAAC,iBAAS,CAAC,IAAI,CAAC;YACpE,OAAO,IAAI,IAAI,YAAY,KAAK,OAAO,KAAK,CAAC;QAC/C,CAAC;QAED,MAAM,YAAY,GAAgB;YAChC,GAAG,IAAI;YACP,OAAO;YACP,MAAM,EAAE,MAAM,CAAC,WAAW,EAAE;YAC5B,OAAO;YACP,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;SACpC,CAAC;QAEF,MAAM,KAAK,GAAG,MAAM,KAAK,cAAc,IAAI,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC;QAClF,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,YAAY,CAAC,CAAC;IACzD,CAAC;IAED;;OAEG;IACI,kBAAkB,CACvB,MAAc,EACd,SAA4C,EAC5C,UAAkB,EAClB,UAAgC,EAChC,IAAkB;QAElB,MAAM,eAAe,GAAG;YACtB,OAAO,EAAE,iBAAS,CAAC,IAAI;YACvB,OAAO,EAAE,iBAAS,CAAC,IAAI;YACvB,OAAO,EAAE,iBAAS,CAAC,OAAO;SAC3B,CAAC;QAEF,MAAM,KAAK,GAAG,eAAe,CAAC,SAAS,CAAC,CAAC;QACzC,MAAM,OAAO,GAAG,wBAAwB,MAAM,KAAK,SAAS,KAAK,CAAC,UAAU,GAAG,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,CAAC;QAE9G,MAAM,YAAY,GAAgB;YAChC,GAAG,IAAI;YACP,MAAM;YACN,SAAS,EAAE,SAAS,CAAC,WAAW,EAAE;YAClC,UAAU;YACV,UAAU;YACV,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;SACpC,CAAC;QAEF,IAAI,CAAC,OAAO,CAAC,iBAAiB,EAAE,GAAG,KAAK,IAAI,OAAO,EAAE,EAAE,YAAY,CAAC,CAAC;IACvE,CAAC;IAED;;OAEG;IACI,eAAe,CACpB,OAAyC,EACzC,MAAoC,EACpC,SAAkB,EAClB,IAAkB;QAElB,MAAM,aAAa,GAAG;YACpB,QAAQ,EAAE,iBAAS,CAAC,QAAQ;YAC5B,KAAK,EAAE,iBAAS,CAAC,KAAK;YACtB,OAAO,EAAE,iBAAS,CAAC,GAAG;SACvB,CAAC;QAEF,MAAM,YAAY,GAAG;YACnB,IAAI,EAAE,iBAAS,CAAC,OAAO;YACvB,MAAM,EAAE,iBAAS,CAAC,KAAK;YACvB,MAAM,EAAE,iBAAS,CAAC,IAAI;SACvB,CAAC;QAEF,MAAM,YAAY,GAAG,aAAa,CAAC,OAAO,CAAC,CAAC;QAC5C,MAAM,WAAW,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC;QAEzC,IAAI,OAAO,GAAG,GAAG,YAAY,IAAI,OAAO,iBAAiB,MAAM,CAAC,WAAW,EAAE,EAAE,CAAC;QAChF,IAAI,SAAS,EAAE,CAAC;YACd,OAAO,IAAI,OAAO,SAAS,EAAE,CAAC;QAChC,CAAC;QAED,MAAM,YAAY,GAAgB;YAChC,GAAG,IAAI;YACP,OAAO,EAAE,OAAO,CAAC,WAAW,EAAE;YAC9B,MAAM,EAAE,MAAM,CAAC,WAAW,EAAE;YAC5B,SAAS;YACT,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;SACpC,CAAC;QAEF,MAAM,KAAK,GAAG,MAAM,KAAK,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC;QACrD,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,WAAW,EAAE,OAAO,EAAE,YAAY,CAAC,CAAC;IAC/D,CAAC;IAED;;OAEG;IACI,gBAAgB,CACrB,SAA4E,EAC5E,QAAgD,EAChD,OAAe,EACf,IAAkB;QAElB,MAAM,cAAc,GAAG;YACrB,GAAG,EAAE,iBAAS,CAAC,IAAI;YACnB,MAAM,EAAE,iBAAS,CAAC,OAAO;YACzB,IAAI,EAAE,iBAAS,CAAC,KAAK;YACrB,QAAQ,EAAE,iBAAS,CAAC,KAAK;SAC1B,CAAC;QAEF,MAAM,KAAK,GAAG,cAAc,CAAC,QAAQ,CAAC,CAAC;QACvC,MAAM,OAAO,GAAG,GAAG,iBAAS,CAAC,QAAQ,oBAAoB,SAAS,MAAM,OAAO,EAAE,CAAC;QAElF,MAAM,YAAY,GAAgB;YAChC,GAAG,IAAI;YACP,SAAS,EAAE,SAAS,CAAC,WAAW,EAAE;YAClC,QAAQ,EAAE,QAAQ,CAAC,WAAW,EAAE;YAChC,cAAc,EAAE,cAAc;YAC9B,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;SACpC,CAAC;QAEF,MAAM,KAAK,GAAG,QAAQ,KAAK,UAAU,IAAI,QAAQ,KAAK,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;YAC3D,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC;QAErD,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,WAAW,EAAE,EAAE,GAAG,KAAK,IAAI,OAAO,EAAE,EAAE,YAAY,CAAC,CAAC;IAC9E,CAAC;IAED;;OAEG;IACI,WAAW,CAChB,SAAiB,EACjB,OAAe,EACf,KAAa,EACb,IAAkB;QAElB,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,GAAG,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC;QACvD,MAAM,WAAW,GAAG,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;QACvD,MAAM,KAAK,GAAG,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC,iBAAS,CAAC,OAAO,CAAC,CAAC,CAAC,iBAAS,CAAC,IAAI,CAAC;QAEtE,MAAM,OAAO,GAAG,GAAG,SAAS,cAAc,WAAW,IAAI,UAAU,MAAM,OAAO,IAAI,KAAK,GAAG,CAAC;QAE7F,MAAM,YAAY,GAAgB;YAChC,GAAG,IAAI;YACP,SAAS;YACT,OAAO;YACP,KAAK;YACL,UAAU;YACV,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;SACpC,CAAC;QAEF,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,YAAY,CAAC,CAAC;IAC1D,CAAC;IAED;;OAEG;IACK,iBAAiB,CAAC,UAAkB,EAAE,QAAgB,EAAE;QAC9D,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,UAAU,GAAG,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC;QACtD,MAAM,KAAK,GAAG,KAAK,GAAG,MAAM,CAAC;QAC7B,OAAO,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAChD,CAAC;IAED;;OAEG;IACK,gBAAgB,CAAC,SAAiB;QACxC,MAAM,OAAO,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAC3D,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,SAAS,EAAE,OAAO,GAAG,CAAC,CAAC,CAAC;IACrD,CAAC;IAED;;OAEG;IACI,qBAAqB;QAC1B,OAAO,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;IACrD,CAAC;IAED;;OAEG;IACI,oBAAoB;QACzB,OAAO,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;IACpD,CAAC;IAED;;OAEG;IACI,YAAY;QACjB,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,CAAC;QAChC,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,CAAC;IACjC,CAAC;IAED;;OAEG;IACI,kBAAkB;QAKvB,OAAO;YACL,OAAO,EAAE,IAAI,CAAC,qBAAqB,EAAE;YACrC,QAAQ,EAAE,IAAI,CAAC,oBAAoB,EAAE;YACrC,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;SACpC,CAAC;IACJ,CAAC;CACF;AApXD,wCAoXC;AAED,6CAA6C;AAChC,QAAA,cAAc,GAAG,IAAI,cAAc,EAAE,CAAC","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\core\\logging\\enhanced-logger.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * ENHANCED LOGGER WITH RICH FORMATTING AND VISUAL INDICATORS\r\n * =============================================================================\r\n * \r\n * This module extends the base logger with rich formatting, emojis, and\r\n * visual indicators for better log readability and monitoring.\r\n * \r\n * Features:\r\n * - Emoji-based status indicators\r\n * - Color-coded log levels\r\n * - Contextual information enrichment\r\n * - Performance metrics integration\r\n * - Visual progress indicators\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * =============================================================================\r\n */\r\n\r\nimport { Logger, LogMetadata } from './logger';\r\nimport chalk from 'chalk';\r\n\r\n/**\r\n * Emoji mappings for different log types and statuses\r\n */\r\nexport const LogEmojis = {\r\n  // System status\r\n  SUCCESS: '✅',\r\n  ERROR: '❌',\r\n  WARNING: '⚠️',\r\n  INFO: 'ℹ️',\r\n  DEBUG: '🔍',\r\n  \r\n  // Trading operations\r\n  BUY: '📈',\r\n  SELL: '📉',\r\n  PROFIT: '💰',\r\n  LOSS: '💸',\r\n  BALANCE: '⚖️',\r\n  PORTFOLIO: '📊',\r\n  \r\n  // System operations\r\n  START: '🚀',\r\n  STOP: '🛑',\r\n  RESTART: '🔄',\r\n  INITIALIZE: '🔧',\r\n  SHUTDOWN: '⏹️',\r\n  \r\n  // Network and connectivity\r\n  CONNECTED: '🔗',\r\n  DISCONNECTED: '🔌',\r\n  TUNNEL: '🚇',\r\n  API: '🌐',\r\n  DATABASE: '🗄️',\r\n  \r\n  // Security and monitoring\r\n  SECURITY: '🔒',\r\n  AUDIT: '📋',\r\n  ALERT: '🚨',\r\n  MONITOR: '👁️',\r\n  BACKUP: '💾',\r\n  \r\n  // Performance\r\n  FAST: '⚡',\r\n  SLOW: '🐌',\r\n  MEMORY: '🧠',\r\n  CPU: '⚙️',\r\n  DISK: '💽',\r\n  \r\n  // Market data\r\n  BULL: '🐂',\r\n  BEAR: '🐻',\r\n  ROCKET: '🚀',\r\n  CRASH: '💥',\r\n  TREND_UP: '📈',\r\n  TREND_DOWN: '📉',\r\n  \r\n  // Notifications\r\n  TELEGRAM: '📱',\r\n  EMAIL: '📧',\r\n  BELL: '🔔',\r\n  MUTE: '🔕'\r\n} as const;\r\n\r\n/**\r\n * Color schemes for different log levels\r\n */\r\nexport const LogColors = {\r\n  ERROR: chalk.red,\r\n  WARN: chalk.yellow,\r\n  INFO: chalk.blue,\r\n  DEBUG: chalk.gray,\r\n  SUCCESS: chalk.green,\r\n  TRADING: chalk.magenta,\r\n  SECURITY: chalk.cyan,\r\n  PERFORMANCE: chalk.white\r\n} as const;\r\n\r\n/**\r\n * Enhanced logger with rich formatting and visual indicators\r\n */\r\nexport class EnhancedLogger extends Logger {\r\n  private performanceMetrics: Map<string, number> = new Map();\r\n  private operationCounters: Map<string, number> = new Map();\r\n\r\n  constructor(componentName?: string) {\r\n    super(componentName);\r\n  }\r\n\r\n  /**\r\n   * Log with emoji and rich formatting\r\n   */\r\n  public logWithEmoji(\r\n    level: 'info' | 'warn' | 'error' | 'debug',\r\n    emoji: string,\r\n    message: string,\r\n    meta?: LogMetadata\r\n  ): void {\r\n    const formattedMessage = `${emoji} ${message}`;\r\n    \r\n    switch (level) {\r\n      case 'info':\r\n        this.info(formattedMessage, meta);\r\n        break;\r\n      case 'warn':\r\n        this.warn(formattedMessage, meta);\r\n        break;\r\n      case 'error':\r\n        this.error(formattedMessage, meta);\r\n        break;\r\n      case 'debug':\r\n        this.debug(formattedMessage, meta);\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Log trading operations with rich context\r\n   */\r\n  public logTradingOperation(\r\n    operation: 'BUY' | 'SELL' | 'PROFIT' | 'LOSS' | 'BALANCE_CHECK',\r\n    symbol: string,\r\n    amount?: number,\r\n    price?: number,\r\n    profit?: number,\r\n    meta?: LogMetadata\r\n  ): void {\r\n    const emoji = LogEmojis[operation];\r\n    let message = `${operation} operation`;\r\n    \r\n    const enrichedMeta: LogMetadata = {\r\n      ...meta,\r\n      symbol,\r\n      operation: operation.toLowerCase(),\r\n      timestamp: new Date().toISOString()\r\n    };\r\n\r\n    if (amount !== undefined) {\r\n      message += ` - Amount: ${amount}`;\r\n      enrichedMeta.amount = amount;\r\n    }\r\n    \r\n    if (price !== undefined) {\r\n      message += ` - Price: $${price.toFixed(4)}`;\r\n      enrichedMeta.price = price;\r\n    }\r\n    \r\n    if (profit !== undefined) {\r\n      const profitEmoji = profit > 0 ? LogEmojis.PROFIT : LogEmojis.LOSS;\r\n      message += ` - P&L: ${profitEmoji} $${profit.toFixed(2)}`;\r\n      enrichedMeta.profit = profit;\r\n    }\r\n\r\n    this.trading(operation.toLowerCase(), `${emoji} ${message}`, enrichedMeta);\r\n    this.incrementCounter(`trading_${operation.toLowerCase()}`);\r\n  }\r\n\r\n  /**\r\n   * Log system status with visual indicators\r\n   */\r\n  public logSystemStatus(\r\n    status: 'HEALTHY' | 'WARNING' | 'CRITICAL' | 'STARTING' | 'STOPPING',\r\n    component: string,\r\n    details?: Record<string, any>,\r\n    meta?: LogMetadata\r\n  ): void {\r\n    const statusEmojis = {\r\n      HEALTHY: LogEmojis.SUCCESS,\r\n      WARNING: LogEmojis.WARNING,\r\n      CRITICAL: LogEmojis.ERROR,\r\n      STARTING: LogEmojis.START,\r\n      STOPPING: LogEmojis.STOP\r\n    };\r\n\r\n    const emoji = statusEmojis[status];\r\n    const message = `System ${status.toLowerCase()}: ${component}`;\r\n    \r\n    const enrichedMeta: LogMetadata = {\r\n      ...meta,\r\n      component,\r\n      status: status.toLowerCase(),\r\n      details,\r\n      timestamp: new Date().toISOString()\r\n    };\r\n\r\n    const level = status === 'CRITICAL' ? 'error' : \r\n                 status === 'WARNING' ? 'warn' : 'info';\r\n    \r\n    this.logWithEmoji(level, emoji, message, enrichedMeta);\r\n  }\r\n\r\n  /**\r\n   * Log performance metrics with visual indicators\r\n   */\r\n  public logPerformance(\r\n    metric: string,\r\n    value: number,\r\n    unit: string,\r\n    threshold?: { warning: number; critical: number },\r\n    meta?: LogMetadata\r\n  ): void {\r\n    let emoji = LogEmojis.INFO;\r\n    let level: 'info' | 'warn' | 'error' = 'info';\r\n    \r\n    if (threshold) {\r\n      if (value >= threshold.critical) {\r\n        emoji = LogEmojis.ERROR;\r\n        level = 'error';\r\n      } else if (value >= threshold.warning) {\r\n        emoji = LogEmojis.WARNING;\r\n        level = 'warn';\r\n      } else {\r\n        emoji = LogEmojis.SUCCESS;\r\n      }\r\n    }\r\n\r\n    const message = `Performance metric: ${metric} = ${value}${unit}`;\r\n    \r\n    const enrichedMeta: LogMetadata = {\r\n      ...meta,\r\n      metric,\r\n      value,\r\n      unit,\r\n      threshold,\r\n      timestamp: new Date().toISOString()\r\n    };\r\n\r\n    this.logWithEmoji(level, emoji, message, enrichedMeta);\r\n    this.performanceMetrics.set(metric, value);\r\n  }\r\n\r\n  /**\r\n   * Log network connectivity status\r\n   */\r\n  public logConnectivity(\r\n    service: string,\r\n    status: 'CONNECTED' | 'DISCONNECTED' | 'RECONNECTING' | 'TIMEOUT',\r\n    latency?: number,\r\n    meta?: LogMetadata\r\n  ): void {\r\n    const statusEmojis = {\r\n      CONNECTED: LogEmojis.CONNECTED,\r\n      DISCONNECTED: LogEmojis.DISCONNECTED,\r\n      RECONNECTING: LogEmojis.RESTART,\r\n      TIMEOUT: LogEmojis.WARNING\r\n    };\r\n\r\n    const emoji = statusEmojis[status];\r\n    let message = `${service} ${status.toLowerCase()}`;\r\n    \r\n    if (latency !== undefined) {\r\n      const latencyEmoji = latency < 100 ? LogEmojis.FAST : \r\n                          latency < 500 ? LogEmojis.INFO : LogEmojis.SLOW;\r\n      message += ` ${latencyEmoji} (${latency}ms)`;\r\n    }\r\n\r\n    const enrichedMeta: LogMetadata = {\r\n      ...meta,\r\n      service,\r\n      status: status.toLowerCase(),\r\n      latency,\r\n      timestamp: new Date().toISOString()\r\n    };\r\n\r\n    const level = status === 'DISCONNECTED' || status === 'TIMEOUT' ? 'warn' : 'info';\r\n    this.logWithEmoji(level, emoji, message, enrichedMeta);\r\n  }\r\n\r\n  /**\r\n   * Log market sentiment and analysis\r\n   */\r\n  public logMarketSentiment(\r\n    symbol: string,\r\n    sentiment: 'BULLISH' | 'BEARISH' | 'NEUTRAL',\r\n    confidence: number,\r\n    indicators?: Record<string, any>,\r\n    meta?: LogMetadata\r\n  ): void {\r\n    const sentimentEmojis = {\r\n      BULLISH: LogEmojis.BULL,\r\n      BEARISH: LogEmojis.BEAR,\r\n      NEUTRAL: LogEmojis.BALANCE\r\n    };\r\n\r\n    const emoji = sentimentEmojis[sentiment];\r\n    const message = `Market sentiment for ${symbol}: ${sentiment} (${(confidence * 100).toFixed(1)}% confidence)`;\r\n    \r\n    const enrichedMeta: LogMetadata = {\r\n      ...meta,\r\n      symbol,\r\n      sentiment: sentiment.toLowerCase(),\r\n      confidence,\r\n      indicators,\r\n      timestamp: new Date().toISOString()\r\n    };\r\n\r\n    this.trading('market_analysis', `${emoji} ${message}`, enrichedMeta);\r\n  }\r\n\r\n  /**\r\n   * Log notification delivery status\r\n   */\r\n  public logNotification(\r\n    channel: 'TELEGRAM' | 'EMAIL' | 'WEBHOOK',\r\n    status: 'SENT' | 'FAILED' | 'QUEUED',\r\n    recipient?: string,\r\n    meta?: LogMetadata\r\n  ): void {\r\n    const channelEmojis = {\r\n      TELEGRAM: LogEmojis.TELEGRAM,\r\n      EMAIL: LogEmojis.EMAIL,\r\n      WEBHOOK: LogEmojis.API\r\n    };\r\n\r\n    const statusEmojis = {\r\n      SENT: LogEmojis.SUCCESS,\r\n      FAILED: LogEmojis.ERROR,\r\n      QUEUED: LogEmojis.INFO\r\n    };\r\n\r\n    const channelEmoji = channelEmojis[channel];\r\n    const statusEmoji = statusEmojis[status];\r\n    \r\n    let message = `${channelEmoji} ${channel} notification ${status.toLowerCase()}`;\r\n    if (recipient) {\r\n      message += ` to ${recipient}`;\r\n    }\r\n\r\n    const enrichedMeta: LogMetadata = {\r\n      ...meta,\r\n      channel: channel.toLowerCase(),\r\n      status: status.toLowerCase(),\r\n      recipient,\r\n      timestamp: new Date().toISOString()\r\n    };\r\n\r\n    const level = status === 'FAILED' ? 'error' : 'info';\r\n    this.logWithEmoji(level, statusEmoji, message, enrichedMeta);\r\n  }\r\n\r\n  /**\r\n   * Log security events with appropriate classification\r\n   */\r\n  public logSecurityEvent(\r\n    eventType: 'LOGIN' | 'LOGOUT' | 'API_ACCESS' | 'UNAUTHORIZED' | 'SUSPICIOUS',\r\n    severity: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL',\r\n    details: string,\r\n    meta?: LogMetadata\r\n  ): void {\r\n    const severityEmojis = {\r\n      LOW: LogEmojis.INFO,\r\n      MEDIUM: LogEmojis.WARNING,\r\n      HIGH: LogEmojis.ALERT,\r\n      CRITICAL: LogEmojis.ERROR\r\n    };\r\n\r\n    const emoji = severityEmojis[severity];\r\n    const message = `${LogEmojis.SECURITY} Security event: ${eventType} - ${details}`;\r\n    \r\n    const enrichedMeta: LogMetadata = {\r\n      ...meta,\r\n      eventType: eventType.toLowerCase(),\r\n      severity: severity.toLowerCase(),\r\n      classification: 'CONFIDENTIAL',\r\n      timestamp: new Date().toISOString()\r\n    };\r\n\r\n    const level = severity === 'CRITICAL' || severity === 'HIGH' ? 'error' : \r\n                 severity === 'MEDIUM' ? 'warn' : 'info';\r\n    \r\n    this.security(eventType.toLowerCase(), `${emoji} ${message}`, enrichedMeta);\r\n  }\r\n\r\n  /**\r\n   * Create a progress indicator for long-running operations\r\n   */\r\n  public logProgress(\r\n    operation: string,\r\n    current: number,\r\n    total: number,\r\n    meta?: LogMetadata\r\n  ): void {\r\n    const percentage = Math.round((current / total) * 100);\r\n    const progressBar = this.createProgressBar(percentage);\r\n    const emoji = percentage === 100 ? LogEmojis.SUCCESS : LogEmojis.INFO;\r\n    \r\n    const message = `${operation} progress: ${progressBar} ${percentage}% (${current}/${total})`;\r\n    \r\n    const enrichedMeta: LogMetadata = {\r\n      ...meta,\r\n      operation,\r\n      current,\r\n      total,\r\n      percentage,\r\n      timestamp: new Date().toISOString()\r\n    };\r\n\r\n    this.logWithEmoji('info', emoji, message, enrichedMeta);\r\n  }\r\n\r\n  /**\r\n   * Create a visual progress bar\r\n   */\r\n  private createProgressBar(percentage: number, width: number = 20): string {\r\n    const filled = Math.round((percentage / 100) * width);\r\n    const empty = width - filled;\r\n    return '█'.repeat(filled) + '░'.repeat(empty);\r\n  }\r\n\r\n  /**\r\n   * Increment operation counter\r\n   */\r\n  private incrementCounter(operation: string): void {\r\n    const current = this.operationCounters.get(operation) || 0;\r\n    this.operationCounters.set(operation, current + 1);\r\n  }\r\n\r\n  /**\r\n   * Get current performance metrics\r\n   */\r\n  public getPerformanceMetrics(): Record<string, number> {\r\n    return Object.fromEntries(this.performanceMetrics);\r\n  }\r\n\r\n  /**\r\n   * Get operation counters\r\n   */\r\n  public getOperationCounters(): Record<string, number> {\r\n    return Object.fromEntries(this.operationCounters);\r\n  }\r\n\r\n  /**\r\n   * Reset all counters and metrics\r\n   */\r\n  public resetMetrics(): void {\r\n    this.performanceMetrics.clear();\r\n    this.operationCounters.clear();\r\n  }\r\n\r\n  /**\r\n   * Generate a summary report of logging activity\r\n   */\r\n  public generateLogSummary(): {\r\n    metrics: Record<string, number>;\r\n    counters: Record<string, number>;\r\n    timestamp: string;\r\n  } {\r\n    return {\r\n      metrics: this.getPerformanceMetrics(),\r\n      counters: this.getOperationCounters(),\r\n      timestamp: new Date().toISOString()\r\n    };\r\n  }\r\n}\r\n\r\n// Create and export enhanced logger instance\r\nexport const enhancedLogger = new EnhancedLogger();\r\n\r\n// Export types and constants\r\nexport type { LogMetadata };\r\nexport { LogEmojis, LogColors };"],"version":3}