96968c6da40a2bcd7bbbbbf6e355030d
"use strict";
/**
 * =============================================================================
 * ENHANCED LOGGER WITH RICH FORMATTING AND VISUAL INDICATORS
 * =============================================================================
 *
 * This module extends the base logger with rich formatting, emojis, and
 * visual indicators for better log readability and monitoring.
 *
 * Features:
 * - Emoji-based status indicators
 * - Color-coded log levels
 * - Contextual information enrichment
 * - Performance metrics integration
 * - Visual progress indicators
 *
 * @author AI Crypto Trading System
 * @version 1.0.0
 * =============================================================================
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.enhancedLogger = exports.EnhancedLogger = exports.LogColors = exports.LogEmojis = void 0;
const logger_1 = require("./logger");
const chalk_1 = __importDefault(require("chalk"));
/**
 * Emoji mappings for different log types and statuses
 */
exports.LogEmojis = {
    // System status
    SUCCESS: '✅',
    ERROR: '❌',
    WARNING: '⚠️',
    INFO: 'ℹ️',
    DEBUG: '🔍',
    // Trading operations
    BUY: '📈',
    SELL: '📉',
    PROFIT: '💰',
    LOSS: '💸',
    BALANCE: '⚖️',
    PORTFOLIO: '📊',
    // System operations
    START: '🚀',
    STOP: '🛑',
    RESTART: '🔄',
    INITIALIZE: '🔧',
    SHUTDOWN: '⏹️',
    // Network and connectivity
    CONNECTED: '🔗',
    DISCONNECTED: '🔌',
    TUNNEL: '🚇',
    API: '🌐',
    DATABASE: '🗄️',
    // Security and monitoring
    SECURITY: '🔒',
    AUDIT: '📋',
    ALERT: '🚨',
    MONITOR: '👁️',
    BACKUP: '💾',
    // Performance
    FAST: '⚡',
    SLOW: '🐌',
    MEMORY: '🧠',
    CPU: '⚙️',
    DISK: '💽',
    // Market data
    BULL: '🐂',
    BEAR: '🐻',
    ROCKET: '🚀',
    CRASH: '💥',
    TREND_UP: '📈',
    TREND_DOWN: '📉',
    // Notifications
    TELEGRAM: '📱',
    EMAIL: '📧',
    BELL: '🔔',
    MUTE: '🔕'
};
/**
 * Color schemes for different log levels
 */
exports.LogColors = {
    ERROR: chalk_1.default.red,
    WARN: chalk_1.default.yellow,
    INFO: chalk_1.default.blue,
    DEBUG: chalk_1.default.gray,
    SUCCESS: chalk_1.default.green,
    TRADING: chalk_1.default.magenta,
    SECURITY: chalk_1.default.cyan,
    PERFORMANCE: chalk_1.default.white
};
/**
 * Enhanced logger with rich formatting and visual indicators
 */
class EnhancedLogger extends logger_1.Logger {
    performanceMetrics = new Map();
    operationCounters = new Map();
    constructor(componentName) {
        super(componentName);
    }
    /**
     * Log with emoji and rich formatting
     */
    logWithEmoji(level, emoji, message, meta) {
        const formattedMessage = `${emoji} ${message}`;
        switch (level) {
            case 'info':
                this.info(formattedMessage, meta);
                break;
            case 'warn':
                this.warn(formattedMessage, meta);
                break;
            case 'error':
                this.error(formattedMessage, meta);
                break;
            case 'debug':
                this.debug(formattedMessage, meta);
                break;
        }
    }
    /**
     * Log trading operations with rich context
     */
    logTradingOperation(operation, symbol, amount, price, profit, meta) {
        const emoji = exports.LogEmojis[operation];
        let message = `${operation} operation`;
        const enrichedMeta = {
            ...meta,
            symbol,
            operation: operation.toLowerCase(),
            timestamp: new Date().toISOString()
        };
        if (amount !== undefined) {
            message += ` - Amount: ${amount}`;
            enrichedMeta.amount = amount;
        }
        if (price !== undefined) {
            message += ` - Price: $${price.toFixed(4)}`;
            enrichedMeta.price = price;
        }
        if (profit !== undefined) {
            const profitEmoji = profit > 0 ? exports.LogEmojis.PROFIT : exports.LogEmojis.LOSS;
            message += ` - P&L: ${profitEmoji} $${profit.toFixed(2)}`;
            enrichedMeta.profit = profit;
        }
        this.trading(operation.toLowerCase(), `${emoji} ${message}`, enrichedMeta);
        this.incrementCounter(`trading_${operation.toLowerCase()}`);
    }
    /**
     * Log system status with visual indicators
     */
    logSystemStatus(status, component, details, meta) {
        const statusEmojis = {
            HEALTHY: exports.LogEmojis.SUCCESS,
            WARNING: exports.LogEmojis.WARNING,
            CRITICAL: exports.LogEmojis.ERROR,
            STARTING: exports.LogEmojis.START,
            STOPPING: exports.LogEmojis.STOP
        };
        const emoji = statusEmojis[status];
        const message = `System ${status.toLowerCase()}: ${component}`;
        const enrichedMeta = {
            ...meta,
            component,
            status: status.toLowerCase(),
            details,
            timestamp: new Date().toISOString()
        };
        const level = status === 'CRITICAL' ? 'error' :
            status === 'WARNING' ? 'warn' : 'info';
        this.logWithEmoji(level, emoji, message, enrichedMeta);
    }
    /**
     * Log performance metrics with visual indicators
     */
    logPerformance(metric, value, unit, threshold, meta) {
        let emoji = exports.LogEmojis.INFO;
        let level = 'info';
        if (threshold) {
            if (value >= threshold.critical) {
                emoji = exports.LogEmojis.ERROR;
                level = 'error';
            }
            else if (value >= threshold.warning) {
                emoji = exports.LogEmojis.WARNING;
                level = 'warn';
            }
            else {
                emoji = exports.LogEmojis.SUCCESS;
            }
        }
        const message = `Performance metric: ${metric} = ${value}${unit}`;
        const enrichedMeta = {
            ...meta,
            metric,
            value,
            unit,
            threshold,
            timestamp: new Date().toISOString()
        };
        this.logWithEmoji(level, emoji, message, enrichedMeta);
        this.performanceMetrics.set(metric, value);
    }
    /**
     * Log network connectivity status
     */
    logConnectivity(service, status, latency, meta) {
        const statusEmojis = {
            CONNECTED: exports.LogEmojis.CONNECTED,
            DISCONNECTED: exports.LogEmojis.DISCONNECTED,
            RECONNECTING: exports.LogEmojis.RESTART,
            TIMEOUT: exports.LogEmojis.WARNING
        };
        const emoji = statusEmojis[status];
        let message = `${service} ${status.toLowerCase()}`;
        if (latency !== undefined) {
            const latencyEmoji = latency < 100 ? exports.LogEmojis.FAST :
                latency < 500 ? exports.LogEmojis.INFO : exports.LogEmojis.SLOW;
            message += ` ${latencyEmoji} (${latency}ms)`;
        }
        const enrichedMeta = {
            ...meta,
            service,
            status: status.toLowerCase(),
            latency,
            timestamp: new Date().toISOString()
        };
        const level = status === 'DISCONNECTED' || status === 'TIMEOUT' ? 'warn' : 'info';
        this.logWithEmoji(level, emoji, message, enrichedMeta);
    }
    /**
     * Log market sentiment and analysis
     */
    logMarketSentiment(symbol, sentiment, confidence, indicators, meta) {
        const sentimentEmojis = {
            BULLISH: exports.LogEmojis.BULL,
            BEARISH: exports.LogEmojis.BEAR,
            NEUTRAL: exports.LogEmojis.BALANCE
        };
        const emoji = sentimentEmojis[sentiment];
        const message = `Market sentiment for ${symbol}: ${sentiment} (${(confidence * 100).toFixed(1)}% confidence)`;
        const enrichedMeta = {
            ...meta,
            symbol,
            sentiment: sentiment.toLowerCase(),
            confidence,
            indicators,
            timestamp: new Date().toISOString()
        };
        this.trading('market_analysis', `${emoji} ${message}`, enrichedMeta);
    }
    /**
     * Log notification delivery status
     */
    logNotification(channel, status, recipient, meta) {
        const channelEmojis = {
            TELEGRAM: exports.LogEmojis.TELEGRAM,
            EMAIL: exports.LogEmojis.EMAIL,
            WEBHOOK: exports.LogEmojis.API
        };
        const statusEmojis = {
            SENT: exports.LogEmojis.SUCCESS,
            FAILED: exports.LogEmojis.ERROR,
            QUEUED: exports.LogEmojis.INFO
        };
        const channelEmoji = channelEmojis[channel];
        const statusEmoji = statusEmojis[status];
        let message = `${channelEmoji} ${channel} notification ${status.toLowerCase()}`;
        if (recipient) {
            message += ` to ${recipient}`;
        }
        const enrichedMeta = {
            ...meta,
            channel: channel.toLowerCase(),
            status: status.toLowerCase(),
            recipient,
            timestamp: new Date().toISOString()
        };
        const level = status === 'FAILED' ? 'error' : 'info';
        this.logWithEmoji(level, statusEmoji, message, enrichedMeta);
    }
    /**
     * Log security events with appropriate classification
     */
    logSecurityEvent(eventType, severity, details, meta) {
        const severityEmojis = {
            LOW: exports.LogEmojis.INFO,
            MEDIUM: exports.LogEmojis.WARNING,
            HIGH: exports.LogEmojis.ALERT,
            CRITICAL: exports.LogEmojis.ERROR
        };
        const emoji = severityEmojis[severity];
        const message = `${exports.LogEmojis.SECURITY} Security event: ${eventType} - ${details}`;
        const enrichedMeta = {
            ...meta,
            eventType: eventType.toLowerCase(),
            severity: severity.toLowerCase(),
            classification: 'CONFIDENTIAL',
            timestamp: new Date().toISOString()
        };
        const level = severity === 'CRITICAL' || severity === 'HIGH' ? 'error' :
            severity === 'MEDIUM' ? 'warn' : 'info';
        this.security(eventType.toLowerCase(), `${emoji} ${message}`, enrichedMeta);
    }
    /**
     * Create a progress indicator for long-running operations
     */
    logProgress(operation, current, total, meta) {
        const percentage = Math.round((current / total) * 100);
        const progressBar = this.createProgressBar(percentage);
        const emoji = percentage === 100 ? exports.LogEmojis.SUCCESS : exports.LogEmojis.INFO;
        const message = `${operation} progress: ${progressBar} ${percentage}% (${current}/${total})`;
        const enrichedMeta = {
            ...meta,
            operation,
            current,
            total,
            percentage,
            timestamp: new Date().toISOString()
        };
        this.logWithEmoji('info', emoji, message, enrichedMeta);
    }
    /**
     * Create a visual progress bar
     */
    createProgressBar(percentage, width = 20) {
        const filled = Math.round((percentage / 100) * width);
        const empty = width - filled;
        return '█'.repeat(filled) + '░'.repeat(empty);
    }
    /**
     * Increment operation counter
     */
    incrementCounter(operation) {
        const current = this.operationCounters.get(operation) || 0;
        this.operationCounters.set(operation, current + 1);
    }
    /**
     * Get current performance metrics
     */
    getPerformanceMetrics() {
        return Object.fromEntries(this.performanceMetrics);
    }
    /**
     * Get operation counters
     */
    getOperationCounters() {
        return Object.fromEntries(this.operationCounters);
    }
    /**
     * Reset all counters and metrics
     */
    resetMetrics() {
        this.performanceMetrics.clear();
        this.operationCounters.clear();
    }
    /**
     * Generate a summary report of logging activity
     */
    generateLogSummary() {
        return {
            metrics: this.getPerformanceMetrics(),
            counters: this.getOperationCounters(),
            timestamp: new Date().toISOString()
        };
    }
}
exports.EnhancedLogger = EnhancedLogger;
// Create and export enhanced logger instance
exports.enhancedLogger = new EnhancedLogger();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,