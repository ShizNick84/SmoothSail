{"version":3,"names":["cov_2qo9c4urn3","actualCoverage","s","events_1","require","ssh_tunnel_manager_1","TunnelHealthMonitor","EventEmitter","logger","tunnelManager","stateTracker","config","healthMetrics","performanceHistory","monitoringIntervals","isMonitoring","constructor","f","Map","checkInterval","maxLatency","maxPacketLoss","minThroughput","failureThreshold","healthCheckTimeout","enablePerformanceMonitoring","info","startMonitoring","b","warn","connections","getAllConnections","connection","startMonitoringConnection","id","on","stopMonitoringConnection","emit","stopMonitoring","connectionId","interval","entries","clearInterval","delete","has","debug","initializeHealthMetrics","setInterval","performHealthCheck","error","set","setTimeout","get","getHealthMetrics","getAllHealthMetrics","getPerformanceHistory","limit","history","slice","getSystemHealthStatus","allMetrics","Array","from","values","totalConnections","length","healthyConnections","filter","m","isHealthy","unhealthyConnections","averageHealthScore","reduce","sum","healthScore","criticalIssues","issues","i","severity","systemHealthScore","Math","max","forceHealthCheck","metrics","latency","throughput","packetLoss","uptime","lastHealthCheck","Date","consecutiveFailures","getConnection","state","TunnelState","CONNECTED","markConnectionUnhealthy","measureLatency","measureThroughput","measurePacketLoss","connectedAt","now","getTime","analyzeHealthIssues","calculateHealthScore","wasHealthy","determineHealthStatus","map","message","storePerformanceMetrics","timestamp","cpuUsage","getCPUUsage","memoryUsage","getMemoryUsage","networkUtilization","getNetworkUtilization","Error","String","startTime","net","Promise","resolve","reject","socket","Socket","timeout","destroy","connect","localPort","clearTimeout","testData","Buffer","alloc","bytesReceived","write","data","duration","packetCount","packetsReceived","min","push","type","score","latencyPenalty","packetLossPenalty","throughputPenalty","hasCriticalIssues","some","reason","performanceMetrics","maxHistorySize","splice","os","cpus","totalIdle","totalTick","cpu","times","idle","totalMem","totalmem","freeMem","freemem","random","cleanup","clear","exports"],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\tunnel-health-monitor.ts"],"sourcesContent":["import { EventEmitter } from 'events';\r\nimport { Logger } from '../core/logging/logger';\r\nimport { TunnelConnection, TunnelState, SSHTunnelManager } from './ssh-tunnel-manager';\r\nimport { TunnelStateTracker } from './tunnel-state-tracker';\r\n\r\n/**\r\n * Tunnel health metrics\r\n */\r\nexport interface TunnelHealthMetrics {\r\n  connectionId: string;\r\n  isHealthy: boolean;\r\n  latency: number; // ms\r\n  throughput: number; // bytes/sec\r\n  packetLoss: number; // percentage\r\n  uptime: number; // ms\r\n  lastHealthCheck: Date;\r\n  consecutiveFailures: number;\r\n  healthScore: number; // 0-100\r\n  issues: HealthIssue[];\r\n}\r\n\r\n/**\r\n * Health issue types\r\n */\r\nexport interface HealthIssue {\r\n  type: 'HIGH_LATENCY' | 'PACKET_LOSS' | 'LOW_THROUGHPUT' | 'CONNECTION_UNSTABLE' | 'AUTHENTICATION_FAILURE';\r\n  severity: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';\r\n  message: string;\r\n  timestamp: Date;\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\n/**\r\n * Health monitoring configuration\r\n */\r\nexport interface HealthMonitorConfig {\r\n  /** Health check interval in milliseconds */\r\n  checkInterval: number;\r\n  /** Maximum acceptable latency in milliseconds */\r\n  maxLatency: number;\r\n  /** Maximum acceptable packet loss percentage */\r\n  maxPacketLoss: number;\r\n  /** Minimum acceptable throughput in bytes/sec */\r\n  minThroughput: number;\r\n  /** Number of consecutive failures before marking unhealthy */\r\n  failureThreshold: number;\r\n  /** Health check timeout in milliseconds */\r\n  healthCheckTimeout: number;\r\n  /** Enable detailed performance monitoring */\r\n  enablePerformanceMonitoring: boolean;\r\n}\r\n\r\n/**\r\n * Performance metrics for tunnel monitoring\r\n */\r\nexport interface PerformanceMetrics {\r\n  timestamp: Date;\r\n  latency: number;\r\n  throughput: number;\r\n  packetLoss: number;\r\n  cpuUsage: number;\r\n  memoryUsage: number;\r\n  networkUtilization: number;\r\n}\r\n\r\n/**\r\n * Tunnel Health Monitor\r\n * Monitors SSH tunnel health with real-time metrics collection and alerting\r\n */\r\nexport class TunnelHealthMonitor extends EventEmitter {\r\n  private logger: Logger;\r\n  private tunnelManager: SSHTunnelManager;\r\n  private stateTracker: TunnelStateTracker;\r\n  private config: HealthMonitorConfig;\r\n  private healthMetrics: Map<string, TunnelHealthMetrics>;\r\n  private performanceHistory: Map<string, PerformanceMetrics[]>;\r\n  private monitoringIntervals: Map<string, NodeJS.Timeout>;\r\n  private isMonitoring: boolean;\r\n\r\n  constructor(\r\n    logger: Logger,\r\n    tunnelManager: SSHTunnelManager,\r\n    stateTracker: TunnelStateTracker,\r\n    config?: Partial<HealthMonitorConfig>\r\n  ) {\r\n    super();\r\n    this.logger = logger;\r\n    this.tunnelManager = tunnelManager;\r\n    this.stateTracker = stateTracker;\r\n    this.healthMetrics = new Map();\r\n    this.performanceHistory = new Map();\r\n    this.monitoringIntervals = new Map();\r\n    this.isMonitoring = false;\r\n\r\n    // Default configuration\r\n    this.config = {\r\n      checkInterval: 30000, // 30 seconds\r\n      maxLatency: 1000, // 1 second\r\n      maxPacketLoss: 5, // 5%\r\n      minThroughput: 1024, // 1 KB/s\r\n      failureThreshold: 3,\r\n      healthCheckTimeout: 10000, // 10 seconds\r\n      enablePerformanceMonitoring: true,\r\n      ...config\r\n    };\r\n\r\n    this.logger.info('Tunnel Health Monitor initialized', this.config);\r\n  }\r\n\r\n  /**\r\n   * Start monitoring all tunnel connections\r\n   */\r\n  startMonitoring(): void {\r\n    if (this.isMonitoring) {\r\n      this.logger.warn('Health monitoring is already running');\r\n      return;\r\n    }\r\n\r\n    this.isMonitoring = true;\r\n    this.logger.info('Starting tunnel health monitoring');\r\n\r\n    // Monitor existing connections\r\n    const connections = this.tunnelManager.getAllConnections();\r\n    for (const connection of connections) {\r\n      this.startMonitoringConnection(connection.id);\r\n    }\r\n\r\n    // Listen for new connections\r\n    this.tunnelManager.on('tunnelConnected', (connection) => {\r\n      this.startMonitoringConnection(connection.id);\r\n    });\r\n\r\n    // Listen for disconnections\r\n    this.tunnelManager.on('tunnelDisconnected', (connection) => {\r\n      this.stopMonitoringConnection(connection.id);\r\n    });\r\n\r\n    this.emit('monitoringStarted');\r\n  }\r\n\r\n  /**\r\n   * Stop monitoring all tunnel connections\r\n   */\r\n  stopMonitoring(): void {\r\n    if (!this.isMonitoring) {\r\n      this.logger.warn('Health monitoring is not running');\r\n      return;\r\n    }\r\n\r\n    this.isMonitoring = false;\r\n    this.logger.info('Stopping tunnel health monitoring');\r\n\r\n    // Clear all monitoring intervals\r\n    for (const [connectionId, interval] of this.monitoringIntervals.entries()) {\r\n      clearInterval(interval);\r\n      this.monitoringIntervals.delete(connectionId);\r\n    }\r\n\r\n    this.emit('monitoringStopped');\r\n  }\r\n\r\n  /**\r\n   * Start monitoring a specific connection\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   */\r\n  startMonitoringConnection(connectionId: string): void {\r\n    if (this.monitoringIntervals.has(connectionId)) {\r\n      this.logger.debug(`Already monitoring connection: ${connectionId}`);\r\n      return;\r\n    }\r\n\r\n    this.logger.info(`Starting health monitoring for connection: ${connectionId}`);\r\n\r\n    // Initialize health metrics\r\n    this.initializeHealthMetrics(connectionId);\r\n\r\n    // Start periodic health checks\r\n    const interval = setInterval(async () => {\r\n      try {\r\n        await this.performHealthCheck(connectionId);\r\n      } catch (error) {\r\n        this.logger.error(`Health check failed for connection ${connectionId}`, error);\r\n      }\r\n    }, this.config.checkInterval);\r\n\r\n    this.monitoringIntervals.set(connectionId, interval);\r\n\r\n    // Perform initial health check\r\n    setTimeout(() => this.performHealthCheck(connectionId), 1000);\r\n  }\r\n\r\n  /**\r\n   * Stop monitoring a specific connection\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   */\r\n  stopMonitoringConnection(connectionId: string): void {\r\n    const interval = this.monitoringIntervals.get(connectionId);\r\n    if (interval) {\r\n      clearInterval(interval);\r\n      this.monitoringIntervals.delete(connectionId);\r\n      this.logger.info(`Stopped health monitoring for connection: ${connectionId}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get health metrics for a connection\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @returns Health metrics or undefined\r\n   */\r\n  getHealthMetrics(connectionId: string): TunnelHealthMetrics | undefined {\r\n    return this.healthMetrics.get(connectionId);\r\n  }\r\n\r\n  /**\r\n   * Get health metrics for all connections\r\n   * \r\n   * @returns Map of all health metrics\r\n   */\r\n  getAllHealthMetrics(): Map<string, TunnelHealthMetrics> {\r\n    return new Map(this.healthMetrics);\r\n  }\r\n\r\n  /**\r\n   * Get performance history for a connection\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @param limit - Maximum number of history entries\r\n   * @returns Array of performance metrics\r\n   */\r\n  getPerformanceHistory(connectionId: string, limit?: number): PerformanceMetrics[] {\r\n    const history = this.performanceHistory.get(connectionId) || [];\r\n    return limit ? history.slice(-limit) : [...history];\r\n  }\r\n\r\n  /**\r\n   * Get overall system health status\r\n   * \r\n   * @returns System health summary\r\n   */\r\n  getSystemHealthStatus(): {\r\n    totalConnections: number;\r\n    healthyConnections: number;\r\n    unhealthyConnections: number;\r\n    averageHealthScore: number;\r\n    criticalIssues: number;\r\n    systemHealthScore: number;\r\n  } {\r\n    const allMetrics = Array.from(this.healthMetrics.values());\r\n    const totalConnections = allMetrics.length;\r\n    const healthyConnections = allMetrics.filter(m => m.isHealthy).length;\r\n    const unhealthyConnections = totalConnections - healthyConnections;\r\n    \r\n    const averageHealthScore = totalConnections > 0\r\n      ? allMetrics.reduce((sum, m) => sum + m.healthScore, 0) / totalConnections\r\n      : 0;\r\n\r\n    const criticalIssues = allMetrics.reduce(\r\n      (sum, m) => sum + m.issues.filter(i => i.severity === 'CRITICAL').length,\r\n      0\r\n    );\r\n\r\n    const systemHealthScore = Math.max(0, averageHealthScore - (criticalIssues * 10));\r\n\r\n    return {\r\n      totalConnections,\r\n      healthyConnections,\r\n      unhealthyConnections,\r\n      averageHealthScore,\r\n      criticalIssues,\r\n      systemHealthScore\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Force health check for a connection\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @returns Health check results\r\n   */\r\n  async forceHealthCheck(connectionId: string): Promise<TunnelHealthMetrics | null> {\r\n    try {\r\n      await this.performHealthCheck(connectionId);\r\n      return this.getHealthMetrics(connectionId) || null;\r\n    } catch (error) {\r\n      this.logger.error(`Forced health check failed for connection ${connectionId}`, error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialize health metrics for a connection\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   */\r\n  private initializeHealthMetrics(connectionId: string): void {\r\n    const metrics: TunnelHealthMetrics = {\r\n      connectionId,\r\n      isHealthy: false,\r\n      latency: 0,\r\n      throughput: 0,\r\n      packetLoss: 0,\r\n      uptime: 0,\r\n      lastHealthCheck: new Date(),\r\n      consecutiveFailures: 0,\r\n      healthScore: 0,\r\n      issues: []\r\n    };\r\n\r\n    this.healthMetrics.set(connectionId, metrics);\r\n    this.performanceHistory.set(connectionId, []);\r\n  }\r\n\r\n  /**\r\n   * Perform comprehensive health check for a connection\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   */\r\n  private async performHealthCheck(connectionId: string): Promise<void> {\r\n    const connection = this.tunnelManager.getConnection(connectionId);\r\n    if (!connection) {\r\n      this.logger.warn(`Connection not found for health check: ${connectionId}`);\r\n      return;\r\n    }\r\n\r\n    const metrics = this.healthMetrics.get(connectionId);\r\n    if (!metrics) {\r\n      this.logger.warn(`Health metrics not found for connection: ${connectionId}`);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Update last health check timestamp\r\n      metrics.lastHealthCheck = new Date();\r\n\r\n      // Check connection state\r\n      if (connection.state !== TunnelState.CONNECTED) {\r\n        this.markConnectionUnhealthy(metrics, 'Connection not in CONNECTED state');\r\n        return;\r\n      }\r\n\r\n      // Perform latency test\r\n      const latency = await this.measureLatency(connection);\r\n      metrics.latency = latency;\r\n\r\n      // Perform throughput test\r\n      const throughput = await this.measureThroughput(connection);\r\n      metrics.throughput = throughput;\r\n\r\n      // Measure packet loss\r\n      const packetLoss = await this.measurePacketLoss(connection);\r\n      metrics.packetLoss = packetLoss;\r\n\r\n      // Calculate uptime\r\n      if (connection.connectedAt) {\r\n        metrics.uptime = Date.now() - connection.connectedAt.getTime();\r\n      }\r\n\r\n      // Analyze health issues\r\n      const issues = this.analyzeHealthIssues(metrics);\r\n      metrics.issues = issues;\r\n\r\n      // Calculate health score\r\n      metrics.healthScore = this.calculateHealthScore(metrics);\r\n\r\n      // Determine overall health status\r\n      const wasHealthy = metrics.isHealthy;\r\n      metrics.isHealthy = this.determineHealthStatus(metrics);\r\n\r\n      // Handle health status changes\r\n      if (metrics.isHealthy) {\r\n        metrics.consecutiveFailures = 0;\r\n        if (!wasHealthy) {\r\n          this.logger.info(`Connection health restored: ${connectionId}`);\r\n          this.emit('connectionHealthy', connection, metrics);\r\n        }\r\n      } else {\r\n        metrics.consecutiveFailures++;\r\n        if (wasHealthy) {\r\n          this.logger.warn(`Connection health degraded: ${connectionId}`, {\r\n            issues: issues.map(i => i.message)\r\n          });\r\n          this.emit('connectionUnhealthy', connection, metrics);\r\n        }\r\n      }\r\n\r\n      // Store performance metrics\r\n      if (this.config.enablePerformanceMonitoring) {\r\n        this.storePerformanceMetrics(connectionId, {\r\n          timestamp: new Date(),\r\n          latency,\r\n          throughput,\r\n          packetLoss,\r\n          cpuUsage: await this.getCPUUsage(),\r\n          memoryUsage: await this.getMemoryUsage(),\r\n          networkUtilization: await this.getNetworkUtilization()\r\n        });\r\n      }\r\n\r\n      // Emit health check completed event\r\n      this.emit('healthCheckCompleted', connection, metrics);\r\n\r\n    } catch (error) {\r\n      this.logger.error(`Health check failed for connection ${connectionId}`, error);\r\n      this.markConnectionUnhealthy(metrics, `Health check error: ${error instanceof Error ? error.message : String(error)}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Measure connection latency using ping-like test\r\n   * \r\n   * @param connection - Tunnel connection\r\n   * @returns Latency in milliseconds\r\n   */\r\n  private async measureLatency(connection: TunnelConnection): Promise<number> {\r\n    const startTime = Date.now();\r\n    \r\n    try {\r\n      // Simple TCP connection test to local tunnel port\r\n      const net = await import('net');\r\n      \r\n      return new Promise<number>((resolve, reject) => {\r\n        const socket = new net.Socket();\r\n        const timeout = setTimeout(() => {\r\n          socket.destroy();\r\n          reject(new Error('Latency measurement timeout'));\r\n        }, this.config.healthCheckTimeout);\r\n\r\n        socket.connect(connection.config.localPort, 'localhost', () => {\r\n          const latency = Date.now() - startTime;\r\n          clearTimeout(timeout);\r\n          socket.destroy();\r\n          resolve(latency);\r\n        });\r\n\r\n        socket.on('error', (error) => {\r\n          clearTimeout(timeout);\r\n          reject(error);\r\n        });\r\n      });\r\n\r\n    } catch (error) {\r\n      this.logger.debug(`Latency measurement failed for ${connection.id}`, error);\r\n      return 9999; // High latency indicates problem\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Measure connection throughput\r\n   * \r\n   * @param connection - Tunnel connection\r\n   * @returns Throughput in bytes per second\r\n   */\r\n  private async measureThroughput(connection: TunnelConnection): Promise<number> {\r\n    try {\r\n      // Simple throughput test by sending small data packet\r\n      const net = await import('net');\r\n      const testData = Buffer.alloc(1024, 'A'); // 1KB test data\r\n      const startTime = Date.now();\r\n\r\n      return new Promise<number>((resolve, reject) => {\r\n        const socket = new net.Socket();\r\n        const timeout = setTimeout(() => {\r\n          socket.destroy();\r\n          reject(new Error('Throughput measurement timeout'));\r\n        }, this.config.healthCheckTimeout);\r\n\r\n        let bytesReceived = 0;\r\n\r\n        socket.connect(connection.config.localPort, 'localhost', () => {\r\n          socket.write(testData);\r\n        });\r\n\r\n        socket.on('data', (data) => {\r\n          bytesReceived += data.length;\r\n          const duration = (Date.now() - startTime) / 1000; // seconds\r\n          const throughput = bytesReceived / duration;\r\n          \r\n          clearTimeout(timeout);\r\n          socket.destroy();\r\n          resolve(throughput);\r\n        });\r\n\r\n        socket.on('error', (error) => {\r\n          clearTimeout(timeout);\r\n          reject(error);\r\n        });\r\n      });\r\n\r\n    } catch (error) {\r\n      this.logger.debug(`Throughput measurement failed for ${connection.id}`, error);\r\n      return 0; // No throughput indicates problem\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Measure packet loss percentage\r\n   * \r\n   * @param connection - Tunnel connection\r\n   * @returns Packet loss percentage\r\n   */\r\n  private async measurePacketLoss(connection: TunnelConnection): Promise<number> {\r\n    try {\r\n      // Simple packet loss test by sending multiple small packets\r\n      const net = await import('net');\r\n      const packetCount = 10;\r\n      let packetsReceived = 0;\r\n\r\n      for (let i = 0; i < packetCount; i++) {\r\n        try {\r\n          await new Promise<void>((resolve, reject) => {\r\n            const socket = new net.Socket();\r\n            const timeout = setTimeout(() => {\r\n              socket.destroy();\r\n              resolve(); // Count as lost packet\r\n            }, 1000);\r\n\r\n            socket.connect(connection.config.localPort, 'localhost', () => {\r\n              packetsReceived++;\r\n              clearTimeout(timeout);\r\n              socket.destroy();\r\n              resolve();\r\n            });\r\n\r\n            socket.on('error', () => {\r\n              clearTimeout(timeout);\r\n              resolve(); // Count as lost packet\r\n            });\r\n          });\r\n        } catch {\r\n          // Packet lost\r\n        }\r\n      }\r\n\r\n      const packetLoss = ((packetCount - packetsReceived) / packetCount) * 100;\r\n      return Math.max(0, Math.min(100, packetLoss));\r\n\r\n    } catch (error) {\r\n      this.logger.debug(`Packet loss measurement failed for ${connection.id}`, error);\r\n      return 100; // Assume 100% loss on error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Analyze health issues based on metrics\r\n   * \r\n   * @param metrics - Health metrics\r\n   * @returns Array of health issues\r\n   */\r\n  private analyzeHealthIssues(metrics: TunnelHealthMetrics): HealthIssue[] {\r\n    const issues: HealthIssue[] = [];\r\n    const now = new Date();\r\n\r\n    // Check latency\r\n    if (metrics.latency > this.config.maxLatency) {\r\n      issues.push({\r\n        type: 'HIGH_LATENCY',\r\n        severity: metrics.latency > this.config.maxLatency * 2 ? 'HIGH' : 'MEDIUM',\r\n        message: `High latency detected: ${metrics.latency}ms (max: ${this.config.maxLatency}ms)`,\r\n        timestamp: now\r\n      });\r\n    }\r\n\r\n    // Check packet loss\r\n    if (metrics.packetLoss > this.config.maxPacketLoss) {\r\n      issues.push({\r\n        type: 'PACKET_LOSS',\r\n        severity: metrics.packetLoss > this.config.maxPacketLoss * 2 ? 'HIGH' : 'MEDIUM',\r\n        message: `High packet loss detected: ${metrics.packetLoss}% (max: ${this.config.maxPacketLoss}%)`,\r\n        timestamp: now\r\n      });\r\n    }\r\n\r\n    // Check throughput\r\n    if (metrics.throughput < this.config.minThroughput) {\r\n      issues.push({\r\n        type: 'LOW_THROUGHPUT',\r\n        severity: metrics.throughput < this.config.minThroughput / 2 ? 'HIGH' : 'MEDIUM',\r\n        message: `Low throughput detected: ${metrics.throughput} bytes/s (min: ${this.config.minThroughput} bytes/s)`,\r\n        timestamp: now\r\n      });\r\n    }\r\n\r\n    // Check connection stability\r\n    if (metrics.consecutiveFailures >= this.config.failureThreshold) {\r\n      issues.push({\r\n        type: 'CONNECTION_UNSTABLE',\r\n        severity: 'CRITICAL',\r\n        message: `Connection unstable: ${metrics.consecutiveFailures} consecutive failures`,\r\n        timestamp: now\r\n      });\r\n    }\r\n\r\n    return issues;\r\n  }\r\n\r\n  /**\r\n   * Calculate health score based on metrics\r\n   * \r\n   * @param metrics - Health metrics\r\n   * @returns Health score (0-100)\r\n   */\r\n  private calculateHealthScore(metrics: TunnelHealthMetrics): number {\r\n    let score = 100;\r\n\r\n    // Deduct points for high latency\r\n    if (metrics.latency > this.config.maxLatency) {\r\n      const latencyPenalty = Math.min(30, (metrics.latency / this.config.maxLatency - 1) * 20);\r\n      score -= latencyPenalty;\r\n    }\r\n\r\n    // Deduct points for packet loss\r\n    if (metrics.packetLoss > this.config.maxPacketLoss) {\r\n      const packetLossPenalty = Math.min(40, metrics.packetLoss * 2);\r\n      score -= packetLossPenalty;\r\n    }\r\n\r\n    // Deduct points for low throughput\r\n    if (metrics.throughput < this.config.minThroughput) {\r\n      const throughputPenalty = Math.min(20, (1 - metrics.throughput / this.config.minThroughput) * 20);\r\n      score -= throughputPenalty;\r\n    }\r\n\r\n    // Deduct points for consecutive failures\r\n    score -= metrics.consecutiveFailures * 10;\r\n\r\n    // Deduct points for critical issues\r\n    const criticalIssues = metrics.issues.filter(i => i.severity === 'CRITICAL').length;\r\n    score -= criticalIssues * 20;\r\n\r\n    return Math.max(0, Math.min(100, score));\r\n  }\r\n\r\n  /**\r\n   * Determine overall health status\r\n   * \r\n   * @param metrics - Health metrics\r\n   * @returns True if connection is healthy\r\n   */\r\n  private determineHealthStatus(metrics: TunnelHealthMetrics): boolean {\r\n    // Connection is unhealthy if there are critical issues\r\n    const hasCriticalIssues = metrics.issues.some(i => i.severity === 'CRITICAL');\r\n    if (hasCriticalIssues) {\r\n      return false;\r\n    }\r\n\r\n    // Connection is unhealthy if health score is too low\r\n    if (metrics.healthScore < 50) {\r\n      return false;\r\n    }\r\n\r\n    // Connection is unhealthy if too many consecutive failures\r\n    if (metrics.consecutiveFailures >= this.config.failureThreshold) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Mark connection as unhealthy\r\n   * \r\n   * @param metrics - Health metrics\r\n   * @param reason - Reason for marking unhealthy\r\n   */\r\n  private markConnectionUnhealthy(metrics: TunnelHealthMetrics, reason: string): void {\r\n    metrics.isHealthy = false;\r\n    metrics.consecutiveFailures++;\r\n    metrics.healthScore = 0;\r\n    metrics.issues = [{\r\n      type: 'CONNECTION_UNSTABLE',\r\n      severity: 'CRITICAL',\r\n      message: reason,\r\n      timestamp: new Date()\r\n    }];\r\n  }\r\n\r\n  /**\r\n   * Store performance metrics in history\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @param performanceMetrics - Performance metrics to store\r\n   */\r\n  private storePerformanceMetrics(connectionId: string, performanceMetrics: PerformanceMetrics): void {\r\n    if (!this.performanceHistory.has(connectionId)) {\r\n      this.performanceHistory.set(connectionId, []);\r\n    }\r\n\r\n    const history = this.performanceHistory.get(connectionId)!;\r\n    history.push(performanceMetrics);\r\n\r\n    // Limit history size to prevent memory issues\r\n    const maxHistorySize = 1000;\r\n    if (history.length > maxHistorySize) {\r\n      history.splice(0, history.length - maxHistorySize);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get current CPU usage\r\n   * \r\n   * @returns CPU usage percentage\r\n   */\r\n  private async getCPUUsage(): Promise<number> {\r\n    try {\r\n      const os = await import('os');\r\n      const cpus = os.cpus();\r\n      \r\n      let totalIdle = 0;\r\n      let totalTick = 0;\r\n      \r\n      for (const cpu of cpus) {\r\n        for (const type in cpu.times) {\r\n          totalTick += cpu.times[type as keyof typeof cpu.times];\r\n        }\r\n        totalIdle += cpu.times.idle;\r\n      }\r\n      \r\n      return 100 - (totalIdle / totalTick * 100);\r\n    } catch {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get current memory usage\r\n   * \r\n   * @returns Memory usage percentage\r\n   */\r\n  private async getMemoryUsage(): Promise<number> {\r\n    try {\r\n      const os = await import('os');\r\n      const totalMem = os.totalmem();\r\n      const freeMem = os.freemem();\r\n      return ((totalMem - freeMem) / totalMem) * 100;\r\n    } catch {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get current network utilization\r\n   * \r\n   * @returns Network utilization percentage\r\n   */\r\n  private async getNetworkUtilization(): Promise<number> {\r\n    // Simplified network utilization calculation\r\n    // In a real implementation, this would measure actual network traffic\r\n    return Math.random() * 10; // Placeholder\r\n  }\r\n\r\n  /**\r\n   * Cleanup monitoring resources\r\n   */\r\n  cleanup(): void {\r\n    this.stopMonitoring();\r\n    this.healthMetrics.clear();\r\n    this.performanceHistory.clear();\r\n    this.logger.info('Tunnel health monitor cleanup completed');\r\n  }\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}