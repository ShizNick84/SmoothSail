{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\ai\\sentiment\\sentiment-engine.ts","mappings":";AAAA;;;GAGG;;;AAEH,uDAA4D;AAC5D,qDAA0D;AAC1D,iDAAsD;AAStD,sDAAmD;AAEnD,MAAa,uBAAuB;IAC1B,cAAc,CAA0B;IACxC,aAAa,CAAyB;IACtC,WAAW,CAAuB;IAClC,MAAM,GAAG,eAAM,CAAC;IAChB,MAAM,CAAkB;IACxB,SAAS,GAAY,KAAK,CAAC;IAC3B,gBAAgB,CAAkB;IAE1C,+CAA+C;IACvC,gBAAgB,GAAwB,EAAE,CAAC;IAClC,cAAc,GAAG,GAAG,CAAC,CAAC,iCAAiC;IAExE,wCAAwC;IACvB,cAAc,GAAG;QAChC,OAAO,EAAE,GAAG,EAAI,yCAAyC;QACzD,MAAM,EAAE,IAAI,EAAI,8CAA8C;QAC9D,IAAI,EAAE,IAAI,CAAM,wDAAwD;KACzE,CAAC;IAEF,YAAY,MAAuB;QACjC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,0CAA0C;QAE1C,sBAAsB;QACtB,IAAI,CAAC,cAAc,GAAG,IAAI,yCAAuB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QAClE,IAAI,CAAC,aAAa,GAAG,IAAI,uCAAsB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAC/D,IAAI,CAAC,WAAW,GAAG,IAAI,mCAAoB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAC3D,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,WAAW,CAAC,kBAA0B,CAAC;QAC3C,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;YACnB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,8CAA8C,CAAC,CAAC;YACjE,OAAO;QACT,CAAC;QAED,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,oCAAoC,CAAC,CAAC;QACvD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QAEtB,4BAA4B;QAC5B,MAAM,OAAO,CAAC,GAAG,CAAC;YAChB,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC,eAAe,CAAC;YACpD,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,eAAe,GAAG,CAAC,CAAC,EAAE,uBAAuB;YAChF,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,eAAe,GAAG,CAAC,CAAC,CAAI,sBAAsB;SAChF,CAAC,CAAC;QAEH,6BAA6B;QAC7B,IAAI,CAAC,gBAAgB,GAAG,WAAW,CAAC,KAAK,IAAI,EAAE;YAC7C,IAAI,CAAC;gBACH,MAAM,IAAI,CAAC,yBAAyB,EAAE,CAAC;YACzC,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,6CAA6C,EAAE,KAAK,CAAC,CAAC;YAC1E,CAAC;QACH,CAAC,EAAE,eAAe,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;QAEhC,mBAAmB;QACnB,MAAM,IAAI,CAAC,yBAAyB,EAAE,CAAC;IACzC,CAAC;IAED;;OAEG;IACH,UAAU;QACR,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;YACpB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,0CAA0C,CAAC,CAAC;YAC7D,OAAO;QACT,CAAC;QAED,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,oCAAoC,CAAC,CAAC;QACvD,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QAEvB,2BAA2B;QAC3B,IAAI,CAAC,cAAc,CAAC,cAAc,EAAE,CAAC;QACrC,IAAI,CAAC,aAAa,CAAC,cAAc,EAAE,CAAC;QACpC,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE,CAAC;QAElC,4BAA4B;QAC5B,IAAI,IAAI,CAAC,gBAAgB,EAAE,CAAC;YAC1B,aAAa,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;YACrC,IAAI,CAAC,gBAAgB,GAAG,SAAS,CAAC;QACpC,CAAC;IACH,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,yBAAyB;QACrC,IAAI,CAAC;YACH,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,0CAA0C,CAAC,CAAC;YAE7D,wCAAwC;YACxC,MAAM,CAAC,YAAY,EAAE,WAAW,EAAE,SAAS,CAAC,GAAG,MAAM,OAAO,CAAC,UAAU,CAAC;gBACtE,IAAI,CAAC,cAAc,CAAC,mBAAmB,EAAE;gBACzC,IAAI,CAAC,aAAa,CAAC,mBAAmB,EAAE;gBACxC,IAAI,CAAC,WAAW,CAAC,mBAAmB,EAAE;aACvC,CAAC,CAAC;YAEH,MAAM,OAAO,GAAqB,EAAE,CAAC;YAErC,0BAA0B;YAC1B,IAAI,YAAY,CAAC,MAAM,KAAK,WAAW,EAAE,CAAC;gBACxC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;YACnC,CAAC;iBAAM,CAAC;gBACN,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,oCAAoC,EAAE,YAAY,CAAC,MAAM,CAAC,CAAC;gBAC5E,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,yBAAyB,CAAC,SAAS,CAAC,CAAC,CAAC;YAC1D,CAAC;YAED,yBAAyB;YACzB,IAAI,WAAW,CAAC,MAAM,KAAK,WAAW,EAAE,CAAC;gBACvC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YAClC,CAAC;iBAAM,CAAC;gBACN,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,mCAAmC,EAAE,WAAW,CAAC,MAAM,CAAC,CAAC;gBAC1E,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,yBAAyB,CAAC,QAAQ,CAAC,CAAC,CAAC;YACzD,CAAC;YAED,uBAAuB;YACvB,IAAI,SAAS,CAAC,MAAM,KAAK,WAAW,EAAE,CAAC;gBACrC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YAChC,CAAC;iBAAM,CAAC;gBACN,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,iCAAiC,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC;gBACtE,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,yBAAyB,CAAC,MAAM,CAAC,CAAC,CAAC;YACvD,CAAC;YAED,+BAA+B;YAC/B,MAAM,iBAAiB,GAAG,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC,CAAC;YAEnE,sCAAsC;YACtC,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,CAAC;YAErC,cAAc;YACd,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,yBAAyB,iBAAiB,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,CAAC,iBAAiB,iBAAiB,CAAC,UAAU,IAAI,CAAC,CAAC;YAEzI,OAAO,iBAAiB,CAAC;QAE3B,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,yCAAyC,EAAE,KAAK,CAAC,CAAC;YACpE,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED;;OAEG;IACK,0BAA0B,CAAC,OAAyB;QAC1D,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,IAAI,IAAI,CAAC,cAAc,CAAC;QAC3D,IAAI,UAAU,GAAG,CAAC,CAAC;QACnB,IAAI,WAAW,GAAG,CAAC,CAAC;QACpB,IAAI,eAAe,GAAG,CAAC,CAAC;QACxB,IAAI,YAAY,GAAG,CAAC,CAAC;QAErB,MAAM,aAAa,GAA2B,EAAE,CAAC;QAEjD,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE,CAAC;YAC7B,MAAM,UAAU,GAAG,OAAO,CAAC,MAAM,CAAC,MAA8B,CAAC,IAAI,GAAG,CAAC;YAEzE,+CAA+C;YAC/C,MAAM,oBAAoB,GAAG,MAAM,CAAC,UAAU,GAAG,GAAG,CAAC;YACrD,MAAM,gBAAgB,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACxE,MAAM,cAAc,GAAG,UAAU,GAAG,oBAAoB,GAAG,gBAAgB,CAAC;YAE5E,IAAI,cAAc,GAAG,CAAC,EAAE,CAAC;gBACvB,UAAU,IAAI,MAAM,CAAC,KAAK,GAAG,cAAc,CAAC;gBAC5C,WAAW,IAAI,cAAc,CAAC;gBAC9B,eAAe,IAAI,MAAM,CAAC,UAAU,CAAC;gBACrC,YAAY,EAAE,CAAC;gBAEf,aAAa,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,cAAc,CAAC;YAChD,CAAC;QACH,CAAC;QAED,MAAM,eAAe,GAAG,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC,UAAU,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;QACvE,MAAM,iBAAiB,GAAG,YAAY,GAAG,CAAC,CAAC,CAAC,CAAC,eAAe,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;QAEhF,OAAO;YACL,eAAe,EAAE,IAAI,CAAC,KAAK,CAAC,eAAe,GAAG,GAAG,CAAC,GAAG,GAAG;YACxD,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC;YACzC,OAAO;YACP,OAAO,EAAE,aAAa;YACtB,SAAS,EAAE,IAAI,IAAI,EAAE;SACtB,CAAC;IACJ,CAAC;IAED;;OAEG;IACK,YAAY,CAAC,SAA4B;QAC/C,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAEtC,gCAAgC;QAChC,IAAI,IAAI,CAAC,gBAAgB,CAAC,MAAM,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;YACvD,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAC;QAChC,CAAC;IACH,CAAC;IAED;;OAEG;IACK,sBAAsB;QAC5B,IAAI,IAAI,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YACrC,OAAO,EAAE,CAAC;QACZ,CAAC;QAED,MAAM,MAAM,GAAqB,EAAE,CAAC;QACpC,MAAM,aAAa,GAAG,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,sCAAsC;QAE9F,IAAI,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC7B,OAAO,MAAM,CAAC;QAChB,CAAC;QAED,yCAAyC;QACzC,MAAM,MAAM,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC;QACzD,MAAM,QAAQ,GAAG,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,UAAU;QAErD,wCAAwC;QACxC,MAAM,EAAE,KAAK,EAAE,WAAW,EAAE,GAAG,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;QAEhE,IAAI,SAAS,GAAsC,SAAS,CAAC;QAC7D,IAAI,KAAK,GAAG,CAAC,IAAI,WAAW,GAAG,GAAG,EAAE,CAAC;YACnC,SAAS,GAAG,SAAS,CAAC;QACxB,CAAC;aAAM,IAAI,KAAK,GAAG,CAAC,CAAC,IAAI,WAAW,GAAG,GAAG,EAAE,CAAC;YAC3C,SAAS,GAAG,SAAS,CAAC;QACxB,CAAC;QAED,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,CAAC;QAC7E,MAAM,UAAU,GAAG,KAAK,GAAG,EAAE,CAAC,CAAC,kBAAkB;QAEjD,4BAA4B;QAC5B,MAAM,iBAAiB,GAAG,IAAI,CAAC,uBAAuB,CAAC,aAAa,CAAC,CAAC;QAEtE,MAAM,CAAC,IAAI,CAAC;YACV,SAAS;YACT,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;YAC9B,QAAQ,EAAE,QAAQ;YAClB,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,GAAG,CAAC,GAAG,GAAG;YAC9C,iBAAiB;SAClB,CAAC,CAAC;QAEH,OAAO,MAAM,CAAC;IAChB,CAAC;IAED;;OAEG;IACK,mBAAmB,CAAC,MAAgB;QAC1C,MAAM,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC;QACxB,MAAM,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;QAEjD,MAAM,IAAI,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;QAC1C,MAAM,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;QAC/C,MAAM,KAAK,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAChE,MAAM,KAAK,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,CAAC,GAAG,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC;QACtD,MAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,CAAC,GAAG,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC;QAE3D,MAAM,KAAK,GAAG,CAAC,CAAC,GAAG,KAAK,GAAG,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC;QAEpE,oCAAoC;QACpC,MAAM,SAAS,GAAG,CAAC,GAAG,KAAK,GAAG,IAAI,GAAG,IAAI,CAAC;QAC1C,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC;QACrF,MAAM,WAAW,GAAG,WAAW,KAAK,CAAC,CAAC,CAAC,CAAC,SAAS,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;QAEpE,OAAO,EAAE,KAAK,EAAE,KAAK,IAAI,CAAC,EAAE,WAAW,EAAE,WAAW,IAAI,CAAC,EAAE,CAAC;IAC9D,CAAC;IAED;;OAEG;IACK,uBAAuB,CAAC,OAA4B;QAC1D,MAAM,MAAM,GAAa,EAAE,CAAC;QAC5B,MAAM,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;QAE1C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACxC,MAAM,OAAO,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;YAC3B,MAAM,QAAQ,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YAChC,MAAM,MAAM,GAAG,OAAO,CAAC,eAAe,GAAG,QAAQ,CAAC,eAAe,CAAC;YAElE,yBAAyB;YACzB,IAAI,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,UAAU,CAAC,WAAW,EAAE,CAAC;gBAC9C,MAAM,CAAC,IAAI,CAAC,mBAAmB,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,UAAU,KAAK,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;YACtG,CAAC;YAED,8BAA8B;YAC9B,IAAI,OAAO,CAAC,eAAe,GAAG,UAAU,CAAC,eAAe,EAAE,CAAC;gBACzD,MAAM,CAAC,IAAI,CAAC,+BAA+B,OAAO,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YACnF,CAAC;iBAAM,IAAI,OAAO,CAAC,eAAe,GAAG,UAAU,CAAC,eAAe,EAAE,CAAC;gBAChE,MAAM,CAAC,IAAI,CAAC,+BAA+B,OAAO,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YACnF,CAAC;YAED,yBAAyB;YACzB,MAAM,WAAW,GAAG,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,MAAM,EAAE,EAAE,CAAC,GAAG,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACpF,IAAI,WAAW,GAAG,UAAU,CAAC,WAAW,EAAE,CAAC;gBACzC,MAAM,CAAC,IAAI,CAAC,yBAAyB,WAAW,cAAc,CAAC,CAAC;YAClE,CAAC;QACH,CAAC;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,uBAAuB;QAC3B,MAAM,iBAAiB,GAAG,MAAM,IAAI,CAAC,yBAAyB,EAAE,CAAC;QACjE,MAAM,MAAM,GAAG,IAAI,CAAC,sBAAsB,EAAE,CAAC;QAC7C,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,uBAAuB,CAAC,iBAAiB,CAAC,CAAC;QACrE,MAAM,eAAe,GAAG,IAAI,CAAC,uBAAuB,CAAC,iBAAiB,EAAE,MAAM,CAAC,CAAC;QAEhF,OAAO;YACL,OAAO,EAAE,iBAAiB;YAC1B,MAAM;YACN,OAAO,EAAE;gBACP,OAAO,EAAE,iBAAiB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,KAAK,SAAS,CAAC,IAAI,IAAI,CAAC,yBAAyB,CAAC,SAAS,CAAC;gBACjH,MAAM,EAAE,iBAAiB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,KAAK,QAAQ,CAAC,IAAI,IAAI,CAAC,yBAAyB,CAAC,QAAQ,CAAC;gBAC9G,IAAI,EAAE,iBAAiB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,KAAK,MAAM,CAAC,IAAI,IAAI,CAAC,yBAAyB,CAAC,MAAM,CAAC;aACzG;YACD,MAAM;YACN,eAAe;SAChB,CAAC;IACJ,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,uBAAuB,CAAC,SAA4B;QAChE,MAAM,MAAM,GAAqB,EAAE,CAAC;QACpC,MAAM,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;QAE1C,2BAA2B;QAC3B,IAAI,SAAS,CAAC,eAAe,GAAG,UAAU,CAAC,eAAe,EAAE,CAAC;YAC3D,MAAM,CAAC,IAAI,CAAC;gBACV,EAAE,EAAE,oBAAoB,IAAI,CAAC,GAAG,EAAE,EAAE;gBACpC,IAAI,EAAE,kBAAkB;gBACxB,QAAQ,EAAE,MAAM;gBAChB,OAAO,EAAE,wCAAwC,SAAS,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;gBACvF,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,MAAM,EAAE,YAAY;gBACpB,IAAI,EAAE,SAAS;aAChB,CAAC,CAAC;QACL,CAAC;aAAM,IAAI,SAAS,CAAC,eAAe,GAAG,UAAU,CAAC,eAAe,EAAE,CAAC;YAClE,MAAM,CAAC,IAAI,CAAC;gBACV,EAAE,EAAE,oBAAoB,IAAI,CAAC,GAAG,EAAE,EAAE;gBACpC,IAAI,EAAE,kBAAkB;gBACxB,QAAQ,EAAE,MAAM;gBAChB,OAAO,EAAE,wCAAwC,SAAS,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;gBACvF,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,MAAM,EAAE,YAAY;gBACpB,IAAI,EAAE,SAAS;aAChB,CAAC,CAAC;QACL,CAAC;QAED,sBAAsB;QACtB,IAAI,IAAI,CAAC,gBAAgB,CAAC,MAAM,IAAI,CAAC,EAAE,CAAC;YACtC,MAAM,QAAQ,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YACzE,MAAM,MAAM,GAAG,SAAS,CAAC,eAAe,GAAG,QAAQ,CAAC,eAAe,CAAC;YAEpE,IAAI,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,UAAU,CAAC,WAAW,EAAE,CAAC;gBAC9C,MAAM,CAAC,IAAI,CAAC;oBACV,EAAE,EAAE,gBAAgB,IAAI,CAAC,GAAG,EAAE,EAAE;oBAChC,IAAI,EAAE,cAAc;oBACpB,QAAQ,EAAE,QAAQ;oBAClB,OAAO,EAAE,2BAA2B,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS;oBACtF,SAAS,EAAE,IAAI,IAAI,EAAE;oBACrB,MAAM,EAAE,YAAY;oBACpB,IAAI,EAAE,EAAE,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,EAAE;iBAC/C,CAAC,CAAC;YACL,CAAC;QACH,CAAC;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;IAED;;OAEG;IACK,uBAAuB,CAAC,SAA4B,EAAE,MAAwB;QACpF,MAAM,eAAe,GAAa,EAAE,CAAC;QACrC,MAAM,KAAK,GAAG,SAAS,CAAC,eAAe,CAAC;QACxC,MAAM,UAAU,GAAG,SAAS,CAAC,UAAU,CAAC;QAExC,kCAAkC;QAClC,IAAI,UAAU,GAAG,EAAE,EAAE,CAAC;YACpB,IAAI,KAAK,GAAG,EAAE,EAAE,CAAC;gBACf,eAAe,CAAC,IAAI,CAAC,wEAAwE,CAAC,CAAC;gBAC/F,eAAe,CAAC,IAAI,CAAC,+DAA+D,CAAC,CAAC;YACxF,CAAC;iBAAM,IAAI,KAAK,GAAG,CAAC,EAAE,EAAE,CAAC;gBACvB,eAAe,CAAC,IAAI,CAAC,sEAAsE,CAAC,CAAC;gBAC7F,eAAe,CAAC,IAAI,CAAC,0DAA0D,CAAC,CAAC;YACnF,CAAC;QACH,CAAC;QAED,8BAA8B;QAC9B,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE,CAAC;YAC3B,IAAI,KAAK,CAAC,QAAQ,GAAG,EAAE,EAAE,CAAC;gBACxB,IAAI,KAAK,CAAC,SAAS,KAAK,SAAS,EAAE,CAAC;oBAClC,eAAe,CAAC,IAAI,CAAC,uDAAuD,CAAC,CAAC;gBAChF,CAAC;qBAAM,IAAI,KAAK,CAAC,SAAS,KAAK,SAAS,EAAE,CAAC;oBACzC,eAAe,CAAC,IAAI,CAAC,gEAAgE,CAAC,CAAC;gBACzF,CAAC;YACH,CAAC;QACH,CAAC;QAED,mDAAmD;QACnD,IAAI,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,EAAE,EAAE,CAAC;YACzB,eAAe,CAAC,IAAI,CAAC,wEAAwE,CAAC,CAAC;QACjG,CAAC;QAED,0BAA0B;QAC1B,IAAI,UAAU,GAAG,EAAE,EAAE,CAAC;YACpB,eAAe,CAAC,IAAI,CAAC,4DAA4D,CAAC,CAAC;QACrF,CAAC;QAED,OAAO,eAAe,CAAC;IACzB,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,mBAAmB;QACvB,OAAO,MAAM,IAAI,CAAC,yBAAyB,EAAE,CAAC;IAChD,CAAC;IAED;;OAEG;IACH,mBAAmB,CAAC,QAAgB,EAAE;QACpC,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,GAAG,EAAE,EAAE,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,CAAC,wBAAwB;QAC9F,OAAO,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,CAAC;IACjD,CAAC;IAED;;OAEG;IACH,oCAAoC,CAAC,eAAuB;QAC1D,IAAI,IAAI,CAAC,gBAAgB,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACvC,OAAO,eAAe,CAAC;QACzB,CAAC;QAED,MAAM,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACjF,MAAM,KAAK,GAAG,gBAAgB,CAAC,eAAe,CAAC;QAC/C,MAAM,UAAU,GAAG,gBAAgB,CAAC,UAAU,CAAC;QAE/C,oDAAoD;QACpD,IAAI,UAAU,GAAG,GAAG,CAAC;QAErB,IAAI,UAAU,GAAG,EAAE,EAAE,CAAC;YACpB,IAAI,KAAK,GAAG,EAAE,EAAE,CAAC;gBACf,8CAA8C;gBAC9C,UAAU,GAAG,CAAC,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,qBAAqB;YAC7D,CAAC;iBAAM,IAAI,KAAK,GAAG,CAAC,EAAE,EAAE,CAAC;gBACvB,8CAA8C;gBAC9C,UAAU,GAAG,CAAC,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,qBAAqB;YAC7D,CAAC;QACH,CAAC;QAED,2BAA2B;QAC3B,MAAM,eAAe,GAAG,UAAU,GAAG,GAAG,CAAC;QACzC,UAAU,GAAG,CAAC,GAAG,CAAC,UAAU,GAAG,CAAC,CAAC,GAAG,eAAe,CAAC;QAEpD,2BAA2B;QAC3B,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;QAEtD,OAAO,eAAe,GAAG,UAAU,CAAC;IACtC,CAAC;IAED;;OAEG;IACK,yBAAyB,CAAC,MAAc;QAC9C,OAAO;YACL,MAAM;YACN,KAAK,EAAE,CAAC;YACR,UAAU,EAAE,CAAC;YACb,MAAM,EAAE,CAAC;YACT,SAAS,EAAE,IAAI,IAAI,EAAE;YACrB,SAAS,EAAE,EAAE;SACd,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,SAAS;QAUP,OAAO;YACL,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,WAAW,EAAE,IAAI,CAAC,gBAAgB,CAAC,MAAM;YACzC,UAAU,EAAE,IAAI,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC;gBAC1C,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,SAAS;gBACnE,CAAC,CAAC,IAAI;YACR,OAAO,EAAE;gBACP,OAAO,EAAE,IAAI,EAAE,oCAAoC;gBACnD,MAAM,EAAE,IAAI;gBACZ,IAAI,EAAE,IAAI;aACX;SACF,CAAC;IACJ,CAAC;CACF;AA1fD,0DA0fC","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\ai\\sentiment\\sentiment-engine.ts"],"sourcesContent":["/**\r\n * Sentiment Analysis Engine\r\n * Main orchestrator for sentiment analysis across Twitter, Reddit, and News sources\r\n */\r\n\r\nimport { TwitterSentimentMonitor } from './twitter-monitor';\r\nimport { RedditSentimentMonitor } from './reddit-monitor';\r\nimport { NewsSentimentMonitor } from './news-monitor';\r\nimport { \r\n  SentimentScore, \r\n  WeightedSentiment, \r\n  SentimentTrend, \r\n  SentimentReport, \r\n  SentimentAlert,\r\n  SentimentConfig \r\n} from './types';\r\nimport { logger } from '../../core/logging/logger';\r\n\r\nexport class SentimentAnalysisEngine {\r\n  private twitterMonitor: TwitterSentimentMonitor;\r\n  private redditMonitor: RedditSentimentMonitor;\r\n  private newsMonitor: NewsSentimentMonitor;\r\n  private logger = logger;\r\n  private config: SentimentConfig;\r\n  private isRunning: boolean = false;\r\n  private analysisInterval?: NodeJS.Timeout;\r\n  \r\n  // Historical sentiment data for trend analysis\r\n  private sentimentHistory: WeightedSentiment[] = [];\r\n  private readonly maxHistorySize = 288; // 24 hours of 5-minute intervals\r\n  \r\n  // Default weights for sentiment sources\r\n  private readonly defaultWeights = {\r\n    twitter: 0.4,   // 40% - High volume, real-time sentiment\r\n    reddit: 0.35,   // 35% - Community discussion, quality content\r\n    news: 0.25      // 25% - Professional analysis, slower but authoritative\r\n  };\r\n\r\n  constructor(config: SentimentConfig) {\r\n    this.config = config;\r\n    // Logger is initialized as class property\r\n    \r\n    // Initialize monitors\r\n    this.twitterMonitor = new TwitterSentimentMonitor(config.twitter);\r\n    this.redditMonitor = new RedditSentimentMonitor(config.reddit);\r\n    this.newsMonitor = new NewsSentimentMonitor(config.news);\r\n  }\r\n\r\n  /**\r\n   * Start the sentiment analysis engine\r\n   */\r\n  async startEngine(intervalMinutes: number = 5): Promise<void> {\r\n    if (this.isRunning) {\r\n      this.logger.warn('Sentiment analysis engine is already running');\r\n      return;\r\n    }\r\n\r\n    this.logger.info('Starting sentiment analysis engine');\r\n    this.isRunning = true;\r\n\r\n    // Start individual monitors\r\n    await Promise.all([\r\n      this.twitterMonitor.startMonitoring(intervalMinutes),\r\n      this.redditMonitor.startMonitoring(intervalMinutes * 2), // Reddit less frequent\r\n      this.newsMonitor.startMonitoring(intervalMinutes * 3)    // News least frequent\r\n    ]);\r\n\r\n    // Start aggregation analysis\r\n    this.analysisInterval = setInterval(async () => {\r\n      try {\r\n        await this.performAggregatedAnalysis();\r\n      } catch (error) {\r\n        this.logger.error('Error during aggregated sentiment analysis:', error);\r\n      }\r\n    }, intervalMinutes * 60 * 1000);\r\n\r\n    // Initial analysis\r\n    await this.performAggregatedAnalysis();\r\n  }\r\n\r\n  /**\r\n   * Stop the sentiment analysis engine\r\n   */\r\n  stopEngine(): void {\r\n    if (!this.isRunning) {\r\n      this.logger.warn('Sentiment analysis engine is not running');\r\n      return;\r\n    }\r\n\r\n    this.logger.info('Stopping sentiment analysis engine');\r\n    this.isRunning = false;\r\n\r\n    // Stop individual monitors\r\n    this.twitterMonitor.stopMonitoring();\r\n    this.redditMonitor.stopMonitoring();\r\n    this.newsMonitor.stopMonitoring();\r\n\r\n    // Stop aggregation analysis\r\n    if (this.analysisInterval) {\r\n      clearInterval(this.analysisInterval);\r\n      this.analysisInterval = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Perform aggregated sentiment analysis across all sources\r\n   */\r\n  private async performAggregatedAnalysis(): Promise<WeightedSentiment> {\r\n    try {\r\n      this.logger.info('Performing aggregated sentiment analysis');\r\n\r\n      // Get sentiment scores from all sources\r\n      const [twitterScore, redditScore, newsScore] = await Promise.allSettled([\r\n        this.twitterMonitor.getCurrentSentiment(),\r\n        this.redditMonitor.getCurrentSentiment(),\r\n        this.newsMonitor.getCurrentSentiment()\r\n      ]);\r\n\r\n      const sources: SentimentScore[] = [];\r\n      \r\n      // Process Twitter results\r\n      if (twitterScore.status === 'fulfilled') {\r\n        sources.push(twitterScore.value);\r\n      } else {\r\n        this.logger.warn('Twitter sentiment analysis failed:', twitterScore.reason);\r\n        sources.push(this.createEmptySentimentScore('twitter'));\r\n      }\r\n\r\n      // Process Reddit results\r\n      if (redditScore.status === 'fulfilled') {\r\n        sources.push(redditScore.value);\r\n      } else {\r\n        this.logger.warn('Reddit sentiment analysis failed:', redditScore.reason);\r\n        sources.push(this.createEmptySentimentScore('reddit'));\r\n      }\r\n\r\n      // Process News results\r\n      if (newsScore.status === 'fulfilled') {\r\n        sources.push(newsScore.value);\r\n      } else {\r\n        this.logger.warn('News sentiment analysis failed:', newsScore.reason);\r\n        sources.push(this.createEmptySentimentScore('news'));\r\n      }\r\n\r\n      // Calculate weighted sentiment\r\n      const weightedSentiment = this.calculateWeightedSentiment(sources);\r\n      \r\n      // Store in history for trend analysis\r\n      this.addToHistory(weightedSentiment);\r\n      \r\n      // Log results\r\n      this.logger.info(`Aggregated sentiment: ${weightedSentiment.aggregatedScore.toFixed(2)} (confidence: ${weightedSentiment.confidence}%)`);\r\n      \r\n      return weightedSentiment;\r\n\r\n    } catch (error) {\r\n      this.logger.error('Error in aggregated sentiment analysis:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate weighted sentiment score from multiple sources\r\n   */\r\n  private calculateWeightedSentiment(sources: SentimentScore[]): WeightedSentiment {\r\n    const weights = this.config.weights || this.defaultWeights;\r\n    let totalScore = 0;\r\n    let totalWeight = 0;\r\n    let totalConfidence = 0;\r\n    let validSources = 0;\r\n\r\n    const sourceWeights: Record<string, number> = {};\r\n\r\n    for (const source of sources) {\r\n      const baseWeight = weights[source.source as keyof typeof weights] || 0.1;\r\n      \r\n      // Adjust weight based on confidence and volume\r\n      const confidenceMultiplier = source.confidence / 100;\r\n      const volumeMultiplier = Math.min(1, Math.log10(source.volume + 1) / 2);\r\n      const adjustedWeight = baseWeight * confidenceMultiplier * volumeMultiplier;\r\n      \r\n      if (adjustedWeight > 0) {\r\n        totalScore += source.score * adjustedWeight;\r\n        totalWeight += adjustedWeight;\r\n        totalConfidence += source.confidence;\r\n        validSources++;\r\n        \r\n        sourceWeights[source.source] = adjustedWeight;\r\n      }\r\n    }\r\n\r\n    const aggregatedScore = totalWeight > 0 ? totalScore / totalWeight : 0;\r\n    const averageConfidence = validSources > 0 ? totalConfidence / validSources : 0;\r\n\r\n    return {\r\n      aggregatedScore: Math.round(aggregatedScore * 100) / 100,\r\n      confidence: Math.round(averageConfidence),\r\n      sources,\r\n      weights: sourceWeights,\r\n      timestamp: new Date()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Add weighted sentiment to history for trend analysis\r\n   */\r\n  private addToHistory(sentiment: WeightedSentiment): void {\r\n    this.sentimentHistory.push(sentiment);\r\n    \r\n    // Maintain maximum history size\r\n    if (this.sentimentHistory.length > this.maxHistorySize) {\r\n      this.sentimentHistory.shift();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Analyze sentiment trends from historical data\r\n   */\r\n  private analyzeSentimentTrends(): SentimentTrend[] {\r\n    if (this.sentimentHistory.length < 3) {\r\n      return [];\r\n    }\r\n\r\n    const trends: SentimentTrend[] = [];\r\n    const recentHistory = this.sentimentHistory.slice(-12); // Last hour (12 * 5-minute intervals)\r\n    \r\n    if (recentHistory.length < 3) {\r\n      return trends;\r\n    }\r\n\r\n    // Calculate trend direction and strength\r\n    const scores = recentHistory.map(h => h.aggregatedScore);\r\n    const timeSpan = recentHistory.length * 5; // minutes\r\n    \r\n    // Linear regression for trend direction\r\n    const { slope, correlation } = this.calculateTrendSlope(scores);\r\n    \r\n    let direction: 'BULLISH' | 'BEARISH' | 'NEUTRAL' = 'NEUTRAL';\r\n    if (slope > 1 && correlation > 0.5) {\r\n      direction = 'BULLISH';\r\n    } else if (slope < -1 && correlation > 0.5) {\r\n      direction = 'BEARISH';\r\n    }\r\n\r\n    const strength = Math.min(100, Math.abs(slope) * Math.abs(correlation) * 10);\r\n    const changeRate = slope * 12; // Change per hour\r\n\r\n    // Detect significant events\r\n    const significantEvents = this.detectSignificantEvents(recentHistory);\r\n\r\n    trends.push({\r\n      direction,\r\n      strength: Math.round(strength),\r\n      duration: timeSpan,\r\n      changeRate: Math.round(changeRate * 100) / 100,\r\n      significantEvents\r\n    });\r\n\r\n    return trends;\r\n  }\r\n\r\n  /**\r\n   * Calculate trend slope using linear regression\r\n   */\r\n  private calculateTrendSlope(scores: number[]): { slope: number; correlation: number } {\r\n    const n = scores.length;\r\n    const x = Array.from({ length: n }, (_, i) => i);\r\n    \r\n    const sumX = x.reduce((a, b) => a + b, 0);\r\n    const sumY = scores.reduce((a, b) => a + b, 0);\r\n    const sumXY = x.reduce((sum, xi, i) => sum + xi * scores[i], 0);\r\n    const sumXX = x.reduce((sum, xi) => sum + xi * xi, 0);\r\n    const sumYY = scores.reduce((sum, yi) => sum + yi * yi, 0);\r\n    \r\n    const slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);\r\n    \r\n    // Calculate correlation coefficient\r\n    const numerator = n * sumXY - sumX * sumY;\r\n    const denominator = Math.sqrt((n * sumXX - sumX * sumX) * (n * sumYY - sumY * sumY));\r\n    const correlation = denominator !== 0 ? numerator / denominator : 0;\r\n    \r\n    return { slope: slope || 0, correlation: correlation || 0 };\r\n  }\r\n\r\n  /**\r\n   * Detect significant sentiment events\r\n   */\r\n  private detectSignificantEvents(history: WeightedSentiment[]): string[] {\r\n    const events: string[] = [];\r\n    const thresholds = this.config.thresholds;\r\n    \r\n    for (let i = 1; i < history.length; i++) {\r\n      const current = history[i];\r\n      const previous = history[i - 1];\r\n      const change = current.aggregatedScore - previous.aggregatedScore;\r\n      \r\n      // Rapid change detection\r\n      if (Math.abs(change) > thresholds.rapidChange) {\r\n        events.push(`Rapid sentiment ${change > 0 ? 'increase' : 'decrease'}: ${change.toFixed(1)} points`);\r\n      }\r\n      \r\n      // Extreme sentiment detection\r\n      if (current.aggregatedScore > thresholds.extremePositive) {\r\n        events.push(`Extreme positive sentiment: ${current.aggregatedScore.toFixed(1)}`);\r\n      } else if (current.aggregatedScore < thresholds.extremeNegative) {\r\n        events.push(`Extreme negative sentiment: ${current.aggregatedScore.toFixed(1)}`);\r\n      }\r\n      \r\n      // Volume spike detection\r\n      const totalVolume = current.sources.reduce((sum, source) => sum + source.volume, 0);\r\n      if (totalVolume > thresholds.volumeSpike) {\r\n        events.push(`High activity volume: ${totalVolume} total items`);\r\n      }\r\n    }\r\n    \r\n    return events;\r\n  }\r\n\r\n  /**\r\n   * Generate comprehensive sentiment report\r\n   */\r\n  async generateSentimentReport(): Promise<SentimentReport> {\r\n    const weightedSentiment = await this.performAggregatedAnalysis();\r\n    const trends = this.analyzeSentimentTrends();\r\n    const alerts = await this.generateSentimentAlerts(weightedSentiment);\r\n    const recommendations = this.generateRecommendations(weightedSentiment, trends);\r\n\r\n    return {\r\n      overall: weightedSentiment,\r\n      trends,\r\n      sources: {\r\n        twitter: weightedSentiment.sources.find(s => s.source === 'twitter') || this.createEmptySentimentScore('twitter'),\r\n        reddit: weightedSentiment.sources.find(s => s.source === 'reddit') || this.createEmptySentimentScore('reddit'),\r\n        news: weightedSentiment.sources.find(s => s.source === 'news') || this.createEmptySentimentScore('news')\r\n      },\r\n      alerts,\r\n      recommendations\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generate sentiment-based alerts\r\n   */\r\n  private async generateSentimentAlerts(sentiment: WeightedSentiment): Promise<SentimentAlert[]> {\r\n    const alerts: SentimentAlert[] = [];\r\n    const thresholds = this.config.thresholds;\r\n\r\n    // Extreme sentiment alerts\r\n    if (sentiment.aggregatedScore > thresholds.extremePositive) {\r\n      alerts.push({\r\n        id: `extreme_positive_${Date.now()}`,\r\n        type: 'EXTREME_POSITIVE',\r\n        severity: 'HIGH',\r\n        message: `Extremely positive market sentiment: ${sentiment.aggregatedScore.toFixed(1)}`,\r\n        timestamp: new Date(),\r\n        source: 'aggregated',\r\n        data: sentiment\r\n      });\r\n    } else if (sentiment.aggregatedScore < thresholds.extremeNegative) {\r\n      alerts.push({\r\n        id: `extreme_negative_${Date.now()}`,\r\n        type: 'EXTREME_NEGATIVE',\r\n        severity: 'HIGH',\r\n        message: `Extremely negative market sentiment: ${sentiment.aggregatedScore.toFixed(1)}`,\r\n        timestamp: new Date(),\r\n        source: 'aggregated',\r\n        data: sentiment\r\n      });\r\n    }\r\n\r\n    // Rapid change alerts\r\n    if (this.sentimentHistory.length >= 2) {\r\n      const previous = this.sentimentHistory[this.sentimentHistory.length - 2];\r\n      const change = sentiment.aggregatedScore - previous.aggregatedScore;\r\n      \r\n      if (Math.abs(change) > thresholds.rapidChange) {\r\n        alerts.push({\r\n          id: `rapid_change_${Date.now()}`,\r\n          type: 'RAPID_CHANGE',\r\n          severity: 'MEDIUM',\r\n          message: `Rapid sentiment change: ${change > 0 ? '+' : ''}${change.toFixed(1)} points`,\r\n          timestamp: new Date(),\r\n          source: 'aggregated',\r\n          data: { current: sentiment, previous, change }\r\n        });\r\n      }\r\n    }\r\n\r\n    return alerts;\r\n  }\r\n\r\n  /**\r\n   * Generate trading recommendations based on sentiment\r\n   */\r\n  private generateRecommendations(sentiment: WeightedSentiment, trends: SentimentTrend[]): string[] {\r\n    const recommendations: string[] = [];\r\n    const score = sentiment.aggregatedScore;\r\n    const confidence = sentiment.confidence;\r\n\r\n    // High confidence recommendations\r\n    if (confidence > 70) {\r\n      if (score > 50) {\r\n        recommendations.push('Strong bullish sentiment detected - Consider increasing position sizes');\r\n        recommendations.push('High positive sentiment may indicate good entry opportunities');\r\n      } else if (score < -50) {\r\n        recommendations.push('Strong bearish sentiment detected - Consider reducing position sizes');\r\n        recommendations.push('High negative sentiment may indicate oversold conditions');\r\n      }\r\n    }\r\n\r\n    // Trend-based recommendations\r\n    for (const trend of trends) {\r\n      if (trend.strength > 60) {\r\n        if (trend.direction === 'BULLISH') {\r\n          recommendations.push(`Strong bullish trend detected - Momentum may continue`);\r\n        } else if (trend.direction === 'BEARISH') {\r\n          recommendations.push(`Strong bearish trend detected - Consider defensive positioning`);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Contrarian recommendations for extreme sentiment\r\n    if (Math.abs(score) > 80) {\r\n      recommendations.push('Extreme sentiment levels may indicate potential reversal opportunities');\r\n    }\r\n\r\n    // Low confidence warnings\r\n    if (confidence < 30) {\r\n      recommendations.push('Low sentiment confidence - Rely more on technical analysis');\r\n    }\r\n\r\n    return recommendations;\r\n  }\r\n\r\n  /**\r\n   * Get current aggregated sentiment\r\n   */\r\n  async getCurrentSentiment(): Promise<WeightedSentiment> {\r\n    return await this.performAggregatedAnalysis();\r\n  }\r\n\r\n  /**\r\n   * Get sentiment history\r\n   */\r\n  getSentimentHistory(hours: number = 24): WeightedSentiment[] {\r\n    const intervals = Math.min(hours * 12, this.sentimentHistory.length); // 12 intervals per hour\r\n    return this.sentimentHistory.slice(-intervals);\r\n  }\r\n\r\n  /**\r\n   * Calculate position sizing adjustment based on sentiment\r\n   */\r\n  calculateSentimentPositionAdjustment(baseSizePercent: number): number {\r\n    if (this.sentimentHistory.length === 0) {\r\n      return baseSizePercent;\r\n    }\r\n\r\n    const currentSentiment = this.sentimentHistory[this.sentimentHistory.length - 1];\r\n    const score = currentSentiment.aggregatedScore;\r\n    const confidence = currentSentiment.confidence;\r\n\r\n    // Base adjustment on sentiment score and confidence\r\n    let adjustment = 1.0;\r\n\r\n    if (confidence > 60) {\r\n      if (score > 30) {\r\n        // Positive sentiment - increase position size\r\n        adjustment = 1 + (score / 100) * 0.5; // Up to 50% increase\r\n      } else if (score < -30) {\r\n        // Negative sentiment - decrease position size\r\n        adjustment = 1 + (score / 100) * 0.3; // Up to 30% decrease\r\n      }\r\n    }\r\n\r\n    // Apply confidence scaling\r\n    const confidenceScale = confidence / 100;\r\n    adjustment = 1 + (adjustment - 1) * confidenceScale;\r\n\r\n    // Ensure reasonable bounds\r\n    adjustment = Math.max(0.5, Math.min(2.0, adjustment));\r\n\r\n    return baseSizePercent * adjustment;\r\n  }\r\n\r\n  /**\r\n   * Create empty sentiment score for error cases\r\n   */\r\n  private createEmptySentimentScore(source: string): SentimentScore {\r\n    return {\r\n      source,\r\n      score: 0,\r\n      confidence: 0,\r\n      volume: 0,\r\n      timestamp: new Date(),\r\n      keyTopics: []\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get engine status\r\n   */\r\n  getStatus(): {\r\n    isRunning: boolean;\r\n    historySize: number;\r\n    lastUpdate: Date | null;\r\n    sources: {\r\n      twitter: boolean;\r\n      reddit: boolean;\r\n      news: boolean;\r\n    };\r\n  } {\r\n    return {\r\n      isRunning: this.isRunning,\r\n      historySize: this.sentimentHistory.length,\r\n      lastUpdate: this.sentimentHistory.length > 0 \r\n        ? this.sentimentHistory[this.sentimentHistory.length - 1].timestamp \r\n        : null,\r\n      sources: {\r\n        twitter: true, // Would check actual monitor status\r\n        reddit: true,\r\n        news: true\r\n      }\r\n    };\r\n  }\r\n}\r\n"],"version":3}