7f4cb4c4543b0e3f819d2a1ff6e2e79a
"use strict";

/**
 * =============================================================================
 * AI CRYPTO TRADING AGENT - MILITARY-GRADE ENCRYPTION SERVICE
 * =============================================================================
 *
 * This service provides military-grade encryption capabilities for protecting
 * sensitive trading data, API credentials, and financial information.
 *
 * CRITICAL SECURITY NOTICE:
 * This service protects access to real financial assets and trading capital.
 * Any modifications must be thoroughly tested and security audited.
 *
 * Encryption Standards:
 * - AES-256-GCM for symmetric encryption
 * - RSA-4096 for asymmetric encryption
 * - PBKDF2 with 100,000 iterations for key derivation
 * - Cryptographically secure random number generation
 *
 * @author AI Crypto Trading System
 * @version 1.0.0
 * @license PROPRIETARY
 * =============================================================================
 */
/* istanbul ignore next */
function cov_mfsmsf4ax() {
  var path = "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\encryption-service.ts";
  var hash = "03e6af4fbc28b3835490c6dceda40f75144150a9";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\encryption-service.ts",
    statementMap: {
      "0": {
        start: {
          line: 25,
          column: 0
        },
        end: {
          line: 25,
          column: 62
        }
      },
      "1": {
        start: {
          line: 26,
          column: 0
        },
        end: {
          line: 26,
          column: 63
        }
      },
      "2": {
        start: {
          line: 27,
          column: 17
        },
        end: {
          line: 27,
          column: 34
        }
      },
      "3": {
        start: {
          line: 28,
          column: 17
        },
        end: {
          line: 28,
          column: 49
        }
      },
      "4": {
        start: {
          line: 35,
          column: 31
        },
        end: {
          line: 35,
          column: 44
        }
      },
      "5": {
        start: {
          line: 37,
          column: 32
        },
        end: {
          line: 42,
          column: 5
        }
      },
      "6": {
        start: {
          line: 44,
          column: 16
        },
        end: {
          line: 44,
          column: 20
        }
      },
      "7": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 47,
          column: 35
        }
      },
      "8": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 72,
          column: 9
        }
      },
      "9": {
        start: {
          line: 57,
          column: 33
        },
        end: {
          line: 57,
          column: 66
        }
      },
      "10": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 60,
          column: 13
        }
      },
      "11": {
        start: {
          line: 59,
          column: 16
        },
        end: {
          line: 59,
          column: 86
        }
      },
      "12": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 64,
          column: 13
        }
      },
      "13": {
        start: {
          line: 63,
          column: 16
        },
        end: {
          line: 63,
          column: 103
        }
      },
      "14": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 66,
          column: 62
        }
      },
      "15": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 86
        }
      },
      "16": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 90
        }
      },
      "17": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 71,
          column: 72
        }
      },
      "18": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 121,
          column: 9
        }
      },
      "19": {
        start: {
          line: 87,
          column: 27
        },
        end: {
          line: 87,
          column: 84
        }
      },
      "20": {
        start: {
          line: 89,
          column: 25
        },
        end: {
          line: 89,
          column: 69
        }
      },
      "21": {
        start: {
          line: 91,
          column: 24
        },
        end: {
          line: 91,
          column: 96
        }
      },
      "22": {
        start: {
          line: 93,
          column: 23
        },
        end: {
          line: 93,
          column: 52
        }
      },
      "23": {
        start: {
          line: 95,
          column: 27
        },
        end: {
          line: 95,
          column: 102
        }
      },
      "24": {
        start: {
          line: 97,
          column: 28
        },
        end: {
          line: 97,
          column: 55
        }
      },
      "25": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 98,
          column: 67
        }
      },
      "26": {
        start: {
          line: 100,
          column: 28
        },
        end: {
          line: 100,
          column: 47
        }
      },
      "27": {
        start: {
          line: 102,
          column: 34
        },
        end: {
          line: 109,
          column: 13
        }
      },
      "28": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 115,
          column: 15
        }
      },
      "29": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 116,
          column: 33
        }
      },
      "30": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 119,
          column: 65
        }
      },
      "31": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 120,
          column: 54
        }
      },
      "32": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 162,
          column: 9
        }
      },
      "33": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 135,
          column: 54
        }
      },
      "34": {
        start: {
          line: 137,
          column: 30
        },
        end: {
          line: 137,
          column: 80
        }
      },
      "35": {
        start: {
          line: 138,
          column: 23
        },
        end: {
          line: 138,
          column: 62
        }
      },
      "36": {
        start: {
          line: 139,
          column: 28
        },
        end: {
          line: 139,
          column: 72
        }
      },
      "37": {
        start: {
          line: 140,
          column: 25
        },
        end: {
          line: 140,
          column: 66
        }
      },
      "38": {
        start: {
          line: 142,
          column: 24
        },
        end: {
          line: 142,
          column: 126
        }
      },
      "39": {
        start: {
          line: 144,
          column: 29
        },
        end: {
          line: 144,
          column: 94
        }
      },
      "40": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 145,
          column: 41
        }
      },
      "41": {
        start: {
          line: 147,
          column: 28
        },
        end: {
          line: 147,
          column: 54
        }
      },
      "42": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 148,
          column: 69
        }
      },
      "43": {
        start: {
          line: 150,
          column: 30
        },
        end: {
          line: 150,
          column: 56
        }
      },
      "44": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 156,
          column: 15
        }
      },
      "45": {
        start: {
          line: 157,
          column: 12
        },
        end: {
          line: 157,
          column: 29
        }
      },
      "46": {
        start: {
          line: 160,
          column: 12
        },
        end: {
          line: 160,
          column: 65
        }
      },
      "47": {
        start: {
          line: 161,
          column: 12
        },
        end: {
          line: 161,
          column: 95
        }
      },
      "48": {
        start: {
          line: 172,
          column: 8
        },
        end: {
          line: 192,
          column: 9
        }
      },
      "49": {
        start: {
          line: 174,
          column: 44
        },
        end: {
          line: 178,
          column: 13
        }
      },
      "50": {
        start: {
          line: 180,
          column: 36
        },
        end: {
          line: 180,
          column: 75
        }
      },
      "51": {
        start: {
          line: 182,
          column: 30
        },
        end: {
          line: 185,
          column: 14
        }
      },
      "52": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 186,
          column: 78
        }
      },
      "53": {
        start: {
          line: 187,
          column: 12
        },
        end: {
          line: 187,
          column: 29
        }
      },
      "54": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 190,
          column: 77
        }
      },
      "55": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 191,
          column: 60
        }
      },
      "56": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 230,
          column: 9
        }
      },
      "57": {
        start: {
          line: 205,
          column: 36
        },
        end: {
          line: 205,
          column: 80
        }
      },
      "58": {
        start: {
          line: 207,
          column: 44
        },
        end: {
          line: 207,
          column: 71
        }
      },
      "59": {
        start: {
          line: 209,
          column: 63
        },
        end: {
          line: 209,
          column: 86
        }
      },
      "60": {
        start: {
          line: 211,
          column: 38
        },
        end: {
          line: 211,
          column: 78
        }
      },
      "61": {
        start: {
          line: 212,
          column: 12
        },
        end: {
          line: 214,
          column: 13
        }
      },
      "62": {
        start: {
          line: 213,
          column: 16
        },
        end: {
          line: 213,
          column: 76
        }
      },
      "63": {
        start: {
          line: 216,
          column: 24
        },
        end: {
          line: 216,
          column: 47
        }
      },
      "64": {
        start: {
          line: 217,
          column: 31
        },
        end: {
          line: 217,
          column: 55
        }
      },
      "65": {
        start: {
          line: 218,
          column: 12
        },
        end: {
          line: 223,
          column: 13
        }
      },
      "66": {
        start: {
          line: 219,
          column: 16
        },
        end: {
          line: 222,
          column: 19
        }
      },
      "67": {
        start: {
          line: 224,
          column: 12
        },
        end: {
          line: 224,
          column: 91
        }
      },
      "68": {
        start: {
          line: 225,
          column: 12
        },
        end: {
          line: 225,
          column: 31
        }
      },
      "69": {
        start: {
          line: 228,
          column: 12
        },
        end: {
          line: 228,
          column: 77
        }
      },
      "70": {
        start: {
          line: 229,
          column: 12
        },
        end: {
          line: 229,
          column: 60
        }
      },
      "71": {
        start: {
          line: 240,
          column: 8
        },
        end: {
          line: 247,
          column: 9
        }
      },
      "72": {
        start: {
          line: 241,
          column: 24
        },
        end: {
          line: 241,
          column: 57
        }
      },
      "73": {
        start: {
          line: 242,
          column: 12
        },
        end: {
          line: 242,
          column: 39
        }
      },
      "74": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 245,
          column: 77
        }
      },
      "75": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 246,
          column: 53
        }
      },
      "76": {
        start: {
          line: 259,
          column: 8
        },
        end: {
          line: 259,
          column: 115
        }
      },
      "77": {
        start: {
          line: 270,
          column: 27
        },
        end: {
          line: 270,
          column: 58
        }
      },
      "78": {
        start: {
          line: 271,
          column: 34
        },
        end: {
          line: 271,
          column: 95
        }
      },
      "79": {
        start: {
          line: 271,
          column: 56
        },
        end: {
          line: 271,
          column: 84
        }
      },
      "80": {
        start: {
          line: 272,
          column: 8
        },
        end: {
          line: 272,
          column: 90
        }
      },
      "81": {
        start: {
          line: 282,
          column: 31
        },
        end: {
          line: 282,
          column: 99
        }
      },
      "82": {
        start: {
          line: 283,
          column: 8
        },
        end: {
          line: 287,
          column: 9
        }
      },
      "83": {
        start: {
          line: 284,
          column: 12
        },
        end: {
          line: 286,
          column: 13
        }
      },
      "84": {
        start: {
          line: 285,
          column: 16
        },
        end: {
          line: 285,
          column: 76
        }
      },
      "85": {
        start: {
          line: 289,
          column: 8
        },
        end: {
          line: 291,
          column: 9
        }
      },
      "86": {
        start: {
          line: 290,
          column: 12
        },
        end: {
          line: 290,
          column: 92
        }
      },
      "87": {
        start: {
          line: 293,
          column: 20
        },
        end: {
          line: 293,
          column: 30
        }
      },
      "88": {
        start: {
          line: 294,
          column: 23
        },
        end: {
          line: 294,
          column: 48
        }
      },
      "89": {
        start: {
          line: 295,
          column: 8
        },
        end: {
          line: 297,
          column: 9
        }
      },
      "90": {
        start: {
          line: 296,
          column: 12
        },
        end: {
          line: 296,
          column: 73
        }
      },
      "91": {
        start: {
          line: 298,
          column: 8
        },
        end: {
          line: 300,
          column: 9
        }
      },
      "92": {
        start: {
          line: 299,
          column: 12
        },
        end: {
          line: 299,
          column: 57
        }
      },
      "93": {
        start: {
          line: 309,
          column: 8
        },
        end: {
          line: 311,
          column: 9
        }
      },
      "94": {
        start: {
          line: 310,
          column: 12
        },
        end: {
          line: 310,
          column: 27
        }
      },
      "95": {
        start: {
          line: 320,
          column: 8
        },
        end: {
          line: 325,
          column: 10
        }
      },
      "96": {
        start: {
          line: 328,
          column: 0
        },
        end: {
          line: 328,
          column: 46
        }
      },
      "97": {
        start: {
          line: 330,
          column: 0
        },
        end: {
          line: 330,
          column: 52
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 45,
            column: 4
          },
          end: {
            line: 45,
            column: 5
          }
        },
        loc: {
          start: {
            line: 45,
            column: 18
          },
          end: {
            line: 48,
            column: 5
          }
        },
        line: 45
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 55,
            column: 4
          },
          end: {
            line: 55,
            column: 5
          }
        },
        loc: {
          start: {
            line: 55,
            column: 26
          },
          end: {
            line: 73,
            column: 5
          }
        },
        line: 55
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 84,
            column: 4
          },
          end: {
            line: 84,
            column: 5
          }
        },
        loc: {
          start: {
            line: 84,
            column: 54
          },
          end: {
            line: 122,
            column: 5
          }
        },
        line: 84
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 132,
            column: 4
          },
          end: {
            line: 132,
            column: 5
          }
        },
        loc: {
          start: {
            line: 132,
            column: 47
          },
          end: {
            line: 163,
            column: 5
          }
        },
        line: 132
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 171,
            column: 4
          },
          end: {
            line: 171,
            column: 5
          }
        },
        loc: {
          start: {
            line: 171,
            column: 42
          },
          end: {
            line: 193,
            column: 5
          }
        },
        line: 171
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 202,
            column: 4
          },
          end: {
            line: 202,
            column: 5
          }
        },
        loc: {
          start: {
            line: 202,
            column: 51
          },
          end: {
            line: 231,
            column: 5
          }
        },
        line: 202
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 239,
            column: 4
          },
          end: {
            line: 239,
            column: 5
          }
        },
        loc: {
          start: {
            line: 239,
            column: 35
          },
          end: {
            line: 248,
            column: 5
          }
        },
        line: 239
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 258,
            column: 4
          },
          end: {
            line: 258,
            column: 5
          }
        },
        loc: {
          start: {
            line: 258,
            column: 38
          },
          end: {
            line: 260,
            column: 5
          }
        },
        line: 258
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 268,
            column: 4
          },
          end: {
            line: 268,
            column: 5
          }
        },
        loc: {
          start: {
            line: 268,
            column: 40
          },
          end: {
            line: 273,
            column: 5
          }
        },
        line: 268
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 271,
            column: 49
          },
          end: {
            line: 271,
            column: 50
          }
        },
        loc: {
          start: {
            line: 271,
            column: 56
          },
          end: {
            line: 271,
            column: 84
          }
        },
        line: 271
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 281,
            column: 4
          },
          end: {
            line: 281,
            column: 5
          }
        },
        loc: {
          start: {
            line: 281,
            column: 41
          },
          end: {
            line: 301,
            column: 5
          }
        },
        line: 281
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 308,
            column: 4
          },
          end: {
            line: 308,
            column: 5
          }
        },
        loc: {
          start: {
            line: 308,
            column: 24
          },
          end: {
            line: 312,
            column: 5
          }
        },
        line: 308
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 319,
            column: 4
          },
          end: {
            line: 319,
            column: 5
          }
        },
        loc: {
          start: {
            line: 319,
            column: 16
          },
          end: {
            line: 326,
            column: 5
          }
        },
        line: 319
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 58,
            column: 12
          },
          end: {
            line: 60,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 58,
            column: 12
          },
          end: {
            line: 60,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 58
      },
      "1": {
        loc: {
          start: {
            line: 62,
            column: 12
          },
          end: {
            line: 64,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 62,
            column: 12
          },
          end: {
            line: 64,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 62
      },
      "2": {
        loc: {
          start: {
            line: 84,
            column: 38
          },
          end: {
            line: 84,
            column: 52
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 84,
            column: 50
          },
          end: {
            line: 84,
            column: 52
          }
        }],
        line: 84
      },
      "3": {
        loc: {
          start: {
            line: 91,
            column: 39
          },
          end: {
            line: 91,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 91,
            column: 39
          },
          end: {
            line: 91,
            column: 47
          }
        }, {
          start: {
            line: 91,
            column: 51
          },
          end: {
            line: 91,
            column: 81
          }
        }],
        line: 91
      },
      "4": {
        loc: {
          start: {
            line: 142,
            column: 39
          },
          end: {
            line: 142,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 142,
            column: 39
          },
          end: {
            line: 142,
            column: 47
          }
        }, {
          start: {
            line: 142,
            column: 51
          },
          end: {
            line: 142,
            column: 81
          }
        }],
        line: 142
      },
      "5": {
        loc: {
          start: {
            line: 212,
            column: 12
          },
          end: {
            line: 214,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 212,
            column: 12
          },
          end: {
            line: 214,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 212
      },
      "6": {
        loc: {
          start: {
            line: 218,
            column: 12
          },
          end: {
            line: 223,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 218,
            column: 12
          },
          end: {
            line: 223,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 218
      },
      "7": {
        loc: {
          start: {
            line: 239,
            column: 22
          },
          end: {
            line: 239,
            column: 33
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 239,
            column: 31
          },
          end: {
            line: 239,
            column: 33
          }
        }],
        line: 239
      },
      "8": {
        loc: {
          start: {
            line: 284,
            column: 12
          },
          end: {
            line: 286,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 284,
            column: 12
          },
          end: {
            line: 286,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 284
      },
      "9": {
        loc: {
          start: {
            line: 284,
            column: 16
          },
          end: {
            line: 284,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 284,
            column: 16
          },
          end: {
            line: 284,
            column: 41
          }
        }, {
          start: {
            line: 284,
            column: 45
          },
          end: {
            line: 284,
            column: 66
          }
        }],
        line: 284
      },
      "10": {
        loc: {
          start: {
            line: 289,
            column: 8
          },
          end: {
            line: 291,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 289,
            column: 8
          },
          end: {
            line: 291,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 289
      },
      "11": {
        loc: {
          start: {
            line: 295,
            column: 8
          },
          end: {
            line: 297,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 295,
            column: 8
          },
          end: {
            line: 297,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 295
      },
      "12": {
        loc: {
          start: {
            line: 298,
            column: 8
          },
          end: {
            line: 300,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 298,
            column: 8
          },
          end: {
            line: 300,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 298
      },
      "13": {
        loc: {
          start: {
            line: 309,
            column: 8
          },
          end: {
            line: 311,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 309,
            column: 8
          },
          end: {
            line: 311,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 309
      },
      "14": {
        loc: {
          start: {
            line: 309,
            column: 12
          },
          end: {
            line: 309,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 309,
            column: 12
          },
          end: {
            line: 309,
            column: 18
          }
        }, {
          start: {
            line: 309,
            column: 22
          },
          end: {
            line: 309,
            column: 39
          }
        }],
        line: 309
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\encryption-service.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\encryption-service.ts"],
      sourcesContent: ["/**\r\n * =============================================================================\r\n * AI CRYPTO TRADING AGENT - MILITARY-GRADE ENCRYPTION SERVICE\r\n * =============================================================================\r\n * \r\n * This service provides military-grade encryption capabilities for protecting\r\n * sensitive trading data, API credentials, and financial information.\r\n * \r\n * CRITICAL SECURITY NOTICE:\r\n * This service protects access to real financial assets and trading capital.\r\n * Any modifications must be thoroughly tested and security audited.\r\n * \r\n * Encryption Standards:\r\n * - AES-256-GCM for symmetric encryption\r\n * - RSA-4096 for asymmetric encryption\r\n * - PBKDF2 with 100,000 iterations for key derivation\r\n * - Cryptographically secure random number generation\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport { createCipherGCM, createDecipherGCM, randomBytes, pbkdf2Sync, createHash } from 'crypto';\r\nimport { logger } from '@/core/logging/logger';\r\n\r\n/**\r\n * Interface for encrypted data structure\r\n * Contains all necessary components for secure decryption\r\n */\r\nexport interface EncryptedData {\r\n  /** Base64 encoded encrypted data */\r\n  encryptedData: string;\r\n  /** Base64 encoded initialization vector */\r\n  iv: string;\r\n  /** Base64 encoded authentication tag */\r\n  authTag: string;\r\n  /** Base64 encoded salt used for key derivation */\r\n  salt: string;\r\n  /** Encryption algorithm used */\r\n  algorithm: string;\r\n  /** Timestamp when encryption was performed */\r\n  timestamp: number;\r\n}\r\n\r\n/**\r\n * Interface for key derivation parameters\r\n * Configures the security parameters for key generation\r\n */\r\nexport interface KeyDerivationParams {\r\n  /** Number of PBKDF2 iterations (minimum 100,000) */\r\n  iterations: number;\r\n  /** Salt length in bytes (minimum 32) */\r\n  saltLength: number;\r\n  /** Derived key length in bytes (32 for AES-256) */\r\n  keyLength: number;\r\n  /** Hash algorithm for PBKDF2 */\r\n  hashAlgorithm: string;\r\n}\r\n\r\n/**\r\n * Military-grade encryption service for protecting sensitive trading data\r\n * Implements industry-standard encryption with additional security measures\r\n */\r\nexport class EncryptionService {\r\n  /** Default encryption algorithm */\r\n  private static readonly DEFAULT_ALGORITHM = 'aes-256-gcm';\r\n  \r\n  /** Default key derivation parameters */\r\n  private static readonly DEFAULT_KEY_PARAMS: KeyDerivationParams = {\r\n    iterations: 100000, // NIST recommended minimum\r\n    saltLength: 32,     // 256 bits\r\n    keyLength: 32,      // 256 bits for AES-256\r\n    hashAlgorithm: 'sha256'\r\n  };\r\n\r\n  /** Master encryption key loaded from environment */\r\n  private masterKey: Buffer | null = null;\r\n\r\n  constructor() {\r\n    // Initialize the encryption service\r\n    this.initializeMasterKey();\r\n  }\r\n\r\n  /**\r\n   * Initialize the master encryption key from environment\r\n   * The master key is used for encrypting other keys and sensitive data\r\n   * \r\n   * @throws Error if master key is not configured or invalid\r\n   */\r\n  private initializeMasterKey(): void {\r\n    try {\r\n      const masterKeyHex = process.env.MASTER_ENCRYPTION_KEY;\r\n      \r\n      if (!masterKeyHex) {\r\n        throw new Error('MASTER_ENCRYPTION_KEY environment variable not set');\r\n      }\r\n      \r\n      // Validate master key length (minimum 64 hex characters = 32 bytes)\r\n      if (masterKeyHex.length < 64) {\r\n        throw new Error('Master encryption key must be at least 32 bytes (64 hex characters)');\r\n      }\r\n      \r\n      // Convert hex string to buffer\r\n      this.masterKey = Buffer.from(masterKeyHex, 'hex');\r\n      \r\n      logger.info('\uD83D\uDD10 Master encryption key initialized successfully');\r\n      \r\n    } catch (error) {\r\n      logger.error('\u274C Failed to initialize master encryption key:', error);\r\n      throw new Error('Encryption service initialization failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Encrypt sensitive data using AES-256-GCM with key derivation\r\n   * Provides authenticated encryption with additional data protection\r\n   * \r\n   * @param data - The plaintext data to encrypt\r\n   * @param password - Password for key derivation (optional, uses master key if not provided)\r\n   * @param keyParams - Key derivation parameters (optional, uses defaults)\r\n   * @returns Promise<EncryptedData> The encrypted data structure\r\n   * @throws Error if encryption fails\r\n   */\r\n  public async encryptData(\r\n    data: string,\r\n    password?: string,\r\n    keyParams: Partial<KeyDerivationParams> = {}\r\n  ): Promise<EncryptedData> {\r\n    try {\r\n      // Merge with default parameters\r\n      const params = { ...EncryptionService.DEFAULT_KEY_PARAMS, ...keyParams };\r\n      \r\n      // Generate cryptographically secure random salt\r\n      const salt = randomBytes(params.saltLength);\r\n      \r\n      // Derive encryption key from password or master key\r\n      const key = this.deriveKey(password || this.masterKey!.toString('hex'), salt, params);\r\n      \r\n      // Generate random initialization vector\r\n      const iv = randomBytes(12); // 96 bits for GCM mode\r\n      \r\n      // Create cipher with AES-256-GCM\r\n      const cipher = createCipherGCM(EncryptionService.DEFAULT_ALGORITHM, key, iv);\r\n      \r\n      // Encrypt the data\r\n      let encrypted = cipher.update(data, 'utf8');\r\n      encrypted = Buffer.concat([encrypted, cipher.final()]);\r\n      \r\n      // Get authentication tag\r\n      const authTag = cipher.getAuthTag();\r\n      \r\n      // Create encrypted data structure\r\n      const encryptedData: EncryptedData = {\r\n        encryptedData: encrypted.toString('base64'),\r\n        iv: iv.toString('base64'),\r\n        authTag: authTag.toString('base64'),\r\n        salt: salt.toString('base64'),\r\n        algorithm: EncryptionService.DEFAULT_ALGORITHM,\r\n        timestamp: Date.now()\r\n      };\r\n      \r\n      // Log encryption operation (without sensitive data)\r\n      logger.debug('\uD83D\uDD12 Data encrypted successfully', {\r\n        algorithm: encryptedData.algorithm,\r\n        dataLength: data.length,\r\n        timestamp: encryptedData.timestamp\r\n      });\r\n      \r\n      return encryptedData;\r\n      \r\n    } catch (error) {\r\n      logger.error('\u274C Encryption failed:', error);\r\n      throw new Error('Failed to encrypt data');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Decrypt data using AES-256-GCM with authentication verification\r\n   * Verifies data integrity and authenticity before returning plaintext\r\n   * \r\n   * @param encryptedData - The encrypted data structure\r\n   * @param password - Password for key derivation (optional, uses master key if not provided)\r\n   * @returns Promise<string> The decrypted plaintext data\r\n   * @throws Error if decryption fails or authentication verification fails\r\n   */\r\n  public async decryptData(\r\n    encryptedData: EncryptedData,\r\n    password?: string\r\n  ): Promise<string> {\r\n    try {\r\n      // Validate encrypted data structure\r\n      this.validateEncryptedData(encryptedData);\r\n      \r\n      // Convert base64 components back to buffers\r\n      const encrypted = Buffer.from(encryptedData.encryptedData, 'base64');\r\n      const iv = Buffer.from(encryptedData.iv, 'base64');\r\n      const authTag = Buffer.from(encryptedData.authTag, 'base64');\r\n      const salt = Buffer.from(encryptedData.salt, 'base64');\r\n      \r\n      // Derive the same key used for encryption\r\n      const key = this.deriveKey(\r\n        password || this.masterKey!.toString('hex'),\r\n        salt,\r\n        EncryptionService.DEFAULT_KEY_PARAMS\r\n      );\r\n      \r\n      // Create decipher with AES-256-GCM\r\n      const decipher = createDecipherGCM(encryptedData.algorithm, key, iv);\r\n      decipher.setAuthTag(authTag);\r\n      \r\n      // Decrypt the data\r\n      let decrypted = decipher.update(encrypted);\r\n      decrypted = Buffer.concat([decrypted, decipher.final()]);\r\n      \r\n      // Convert to string\r\n      const plaintext = decrypted.toString('utf8');\r\n      \r\n      // Log decryption operation (without sensitive data)\r\n      logger.debug('\uD83D\uDD13 Data decrypted successfully', {\r\n        algorithm: encryptedData.algorithm,\r\n        dataLength: plaintext.length,\r\n        originalTimestamp: encryptedData.timestamp\r\n      });\r\n      \r\n      return plaintext;\r\n      \r\n    } catch (error) {\r\n      logger.error('\u274C Decryption failed:', error);\r\n      throw new Error('Failed to decrypt data - data may be corrupted or tampered with');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Encrypt API credentials with additional security measures\r\n   * Specialized encryption for protecting trading API keys and secrets\r\n   * \r\n   * @param credentials - Object containing API credentials\r\n   * @returns Promise<EncryptedData> Encrypted credentials\r\n   */\r\n  public async encryptCredentials(credentials: Record<string, string>): Promise<EncryptedData> {\r\n    try {\r\n      // Add timestamp and integrity hash to credentials\r\n      const credentialsWithMetadata = {\r\n        ...credentials,\r\n        _timestamp: Date.now(),\r\n        _integrity: this.calculateIntegrityHash(credentials)\r\n      };\r\n      \r\n      // Serialize credentials to JSON\r\n      const credentialsJson = JSON.stringify(credentialsWithMetadata);\r\n      \r\n      // Encrypt with additional security parameters\r\n      const encrypted = await this.encryptData(credentialsJson, undefined, {\r\n        iterations: 150000, // Higher iterations for credentials\r\n        saltLength: 64      // Larger salt for credentials\r\n      });\r\n      \r\n      logger.info('\uD83D\uDD10 API credentials encrypted successfully');\r\n      \r\n      return encrypted;\r\n      \r\n    } catch (error) {\r\n      logger.error('\u274C Failed to encrypt credentials:', error);\r\n      throw new Error('Credential encryption failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Decrypt API credentials with integrity verification\r\n   * Verifies credential integrity and returns decrypted credentials\r\n   * \r\n   * @param encryptedCredentials - Encrypted credentials data\r\n   * @returns Promise<Record<string, string>> Decrypted credentials\r\n   * @throws Error if decryption fails or integrity check fails\r\n   */\r\n  public async decryptCredentials(\r\n    encryptedCredentials: EncryptedData\r\n  ): Promise<Record<string, string>> {\r\n    try {\r\n      // Decrypt the credentials JSON\r\n      const credentialsJson = await this.decryptData(encryptedCredentials);\r\n      \r\n      // Parse credentials from JSON\r\n      const credentialsWithMetadata = JSON.parse(credentialsJson);\r\n      \r\n      // Extract metadata\r\n      const { _timestamp, _integrity, ...credentials } = credentialsWithMetadata;\r\n      \r\n      // Verify integrity hash\r\n      const expectedIntegrity = this.calculateIntegrityHash(credentials);\r\n      if (_integrity !== expectedIntegrity) {\r\n        throw new Error('Credential integrity verification failed');\r\n      }\r\n      \r\n      // Check credential age (warn if older than 30 days)\r\n      const age = Date.now() - _timestamp;\r\n      const thirtyDays = 30 * 24 * 60 * 60 * 1000;\r\n      \r\n      if (age > thirtyDays) {\r\n        logger.warn('\u26A0\uFE0F Decrypted credentials are older than 30 days', {\r\n          age: Math.floor(age / (24 * 60 * 60 * 1000)),\r\n          timestamp: _timestamp\r\n        });\r\n      }\r\n      \r\n      logger.info('\uD83D\uDD13 API credentials decrypted and verified successfully');\r\n      \r\n      return credentials;\r\n      \r\n    } catch (error) {\r\n      logger.error('\u274C Failed to decrypt credentials:', error);\r\n      throw new Error('Credential decryption failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate a cryptographically secure random key\r\n   * Used for generating new encryption keys and secrets\r\n   * \r\n   * @param length - Key length in bytes (default: 32 for AES-256)\r\n   * @returns string Hex-encoded random key\r\n   */\r\n  public generateSecureKey(length: number = 32): string {\r\n    try {\r\n      const key = randomBytes(length);\r\n      return key.toString('hex');\r\n    } catch (error) {\r\n      logger.error('\u274C Failed to generate secure key:', error);\r\n      throw new Error('Key generation failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Derive encryption key from password using PBKDF2\r\n   * Implements secure key derivation with configurable parameters\r\n   * \r\n   * @param password - Password or master key for derivation\r\n   * @param salt - Cryptographic salt\r\n   * @param params - Key derivation parameters\r\n   * @returns Buffer The derived key\r\n   */\r\n  private deriveKey(password: string, salt: Buffer, params: KeyDerivationParams): Buffer {\r\n    return pbkdf2Sync(password, salt, params.iterations, params.keyLength, params.hashAlgorithm);\r\n  }\r\n\r\n  /**\r\n   * Calculate integrity hash for credential verification\r\n   * Creates a hash of credentials for tamper detection\r\n   * \r\n   * @param credentials - Credentials object to hash\r\n   * @returns string SHA-256 hash of credentials\r\n   */\r\n  private calculateIntegrityHash(credentials: Record<string, string>): string {\r\n    // Sort keys for consistent hashing\r\n    const sortedKeys = Object.keys(credentials).sort();\r\n    const sortedCredentials = sortedKeys.map(key => `${key}:${credentials[key]}`).join('|');\r\n    \r\n    return createHash('sha256').update(sortedCredentials).digest('hex');\r\n  }\r\n\r\n  /**\r\n   * Validate encrypted data structure\r\n   * Ensures all required fields are present and valid\r\n   * \r\n   * @param encryptedData - Encrypted data to validate\r\n   * @throws Error if validation fails\r\n   */\r\n  private validateEncryptedData(encryptedData: EncryptedData): void {\r\n    const requiredFields = ['encryptedData', 'iv', 'authTag', 'salt', 'algorithm', 'timestamp'];\r\n    \r\n    for (const field of requiredFields) {\r\n      if (!(field in encryptedData) || !encryptedData[field as keyof EncryptedData]) {\r\n        throw new Error(`Invalid encrypted data: missing ${field}`);\r\n      }\r\n    }\r\n    \r\n    // Validate algorithm\r\n    if (encryptedData.algorithm !== EncryptionService.DEFAULT_ALGORITHM) {\r\n      throw new Error(`Unsupported encryption algorithm: ${encryptedData.algorithm}`);\r\n    }\r\n    \r\n    // Validate timestamp (not too old or in the future)\r\n    const now = Date.now();\r\n    const maxAge = 365 * 24 * 60 * 60 * 1000; // 1 year\r\n    \r\n    if (encryptedData.timestamp > now + 60000) { // 1 minute future tolerance\r\n      throw new Error('Encrypted data timestamp is in the future');\r\n    }\r\n    \r\n    if (now - encryptedData.timestamp > maxAge) {\r\n      throw new Error('Encrypted data is too old');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Securely clear sensitive data from memory\r\n   * Overwrites memory containing sensitive information\r\n   * \r\n   * @param buffer - Buffer to clear\r\n   */\r\n  public secureClear(buffer: Buffer): void {\r\n    if (buffer && buffer.length > 0) {\r\n      buffer.fill(0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get encryption service status and health information\r\n   * Returns current status for monitoring and diagnostics\r\n   * \r\n   * @returns Object containing service status\r\n   */\r\n  public getStatus(): {\r\n    isInitialized: boolean;\r\n    algorithm: string;\r\n    keyDerivationParams: KeyDerivationParams;\r\n    timestamp: number;\r\n  } {\r\n    return {\r\n      isInitialized: this.masterKey !== null,\r\n      algorithm: EncryptionService.DEFAULT_ALGORITHM,\r\n      keyDerivationParams: EncryptionService.DEFAULT_KEY_PARAMS,\r\n      timestamp: Date.now()\r\n    };\r\n  }\r\n}\r\n\r\n// Create and export singleton instance\r\nexport const encryptionService = new EncryptionService();\r\n\r\n// =============================================================================\r\n// SECURITY NOTES AND BEST PRACTICES\r\n// =============================================================================\r\n// 1. Master key must be stored securely and never logged or exposed\r\n// 2. Use different passwords/keys for different types of data when possible\r\n// 3. Regularly rotate encryption keys and credentials\r\n// 4. Monitor for any encryption/decryption failures as potential security incidents\r\n// 5. Keep encryption libraries and dependencies updated\r\n// 6. Perform regular security audits of encryption implementation\r\n// 7. Use hardware security modules (HSM) in production if available\r\n// 8. Implement proper key escrow and recovery procedures\r\n// ============================================================================="],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "03e6af4fbc28b3835490c6dceda40f75144150a9"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_mfsmsf4ax = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_mfsmsf4ax();
cov_mfsmsf4ax().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_mfsmsf4ax().s[1]++;
exports.encryptionService = exports.EncryptionService = void 0;
const crypto_1 =
/* istanbul ignore next */
(cov_mfsmsf4ax().s[2]++, require("crypto"));
const logger_1 =
/* istanbul ignore next */
(cov_mfsmsf4ax().s[3]++, require("@/core/logging/logger"));
/**
 * Military-grade encryption service for protecting sensitive trading data
 * Implements industry-standard encryption with additional security measures
 */
class EncryptionService {
  /** Default encryption algorithm */
  static DEFAULT_ALGORITHM =
  /* istanbul ignore next */
  (cov_mfsmsf4ax().s[4]++, 'aes-256-gcm');
  /** Default key derivation parameters */
  static DEFAULT_KEY_PARAMS =
  /* istanbul ignore next */
  (cov_mfsmsf4ax().s[5]++, {
    iterations: 100000,
    // NIST recommended minimum
    saltLength: 32,
    // 256 bits
    keyLength: 32,
    // 256 bits for AES-256
    hashAlgorithm: 'sha256'
  });
  /** Master encryption key loaded from environment */
  masterKey =
  /* istanbul ignore next */
  (cov_mfsmsf4ax().s[6]++, null);
  constructor() {
    /* istanbul ignore next */
    cov_mfsmsf4ax().f[0]++;
    cov_mfsmsf4ax().s[7]++;
    // Initialize the encryption service
    this.initializeMasterKey();
  }
  /**
   * Initialize the master encryption key from environment
   * The master key is used for encrypting other keys and sensitive data
   *
   * @throws Error if master key is not configured or invalid
   */
  initializeMasterKey() {
    /* istanbul ignore next */
    cov_mfsmsf4ax().f[1]++;
    cov_mfsmsf4ax().s[8]++;
    try {
      const masterKeyHex =
      /* istanbul ignore next */
      (cov_mfsmsf4ax().s[9]++, process.env.MASTER_ENCRYPTION_KEY);
      /* istanbul ignore next */
      cov_mfsmsf4ax().s[10]++;
      if (!masterKeyHex) {
        /* istanbul ignore next */
        cov_mfsmsf4ax().b[0][0]++;
        cov_mfsmsf4ax().s[11]++;
        throw new Error('MASTER_ENCRYPTION_KEY environment variable not set');
      } else
      /* istanbul ignore next */
      {
        cov_mfsmsf4ax().b[0][1]++;
      }
      // Validate master key length (minimum 64 hex characters = 32 bytes)
      cov_mfsmsf4ax().s[12]++;
      if (masterKeyHex.length < 64) {
        /* istanbul ignore next */
        cov_mfsmsf4ax().b[1][0]++;
        cov_mfsmsf4ax().s[13]++;
        throw new Error('Master encryption key must be at least 32 bytes (64 hex characters)');
      } else
      /* istanbul ignore next */
      {
        cov_mfsmsf4ax().b[1][1]++;
      }
      // Convert hex string to buffer
      cov_mfsmsf4ax().s[14]++;
      this.masterKey = Buffer.from(masterKeyHex, 'hex');
      /* istanbul ignore next */
      cov_mfsmsf4ax().s[15]++;
      logger_1.logger.info('🔐 Master encryption key initialized successfully');
    } catch (error) {
      /* istanbul ignore next */
      cov_mfsmsf4ax().s[16]++;
      logger_1.logger.error('❌ Failed to initialize master encryption key:', error);
      /* istanbul ignore next */
      cov_mfsmsf4ax().s[17]++;
      throw new Error('Encryption service initialization failed');
    }
  }
  /**
   * Encrypt sensitive data using AES-256-GCM with key derivation
   * Provides authenticated encryption with additional data protection
   *
   * @param data - The plaintext data to encrypt
   * @param password - Password for key derivation (optional, uses master key if not provided)
   * @param keyParams - Key derivation parameters (optional, uses defaults)
   * @returns Promise<EncryptedData> The encrypted data structure
   * @throws Error if encryption fails
   */
  async encryptData(data, password, keyParams =
  /* istanbul ignore next */
  (cov_mfsmsf4ax().b[2][0]++, {})) {
    /* istanbul ignore next */
    cov_mfsmsf4ax().f[2]++;
    cov_mfsmsf4ax().s[18]++;
    try {
      // Merge with default parameters
      const params =
      /* istanbul ignore next */
      (cov_mfsmsf4ax().s[19]++, {
        ...EncryptionService.DEFAULT_KEY_PARAMS,
        ...keyParams
      });
      // Generate cryptographically secure random salt
      const salt =
      /* istanbul ignore next */
      (cov_mfsmsf4ax().s[20]++, (0, crypto_1.randomBytes)(params.saltLength));
      // Derive encryption key from password or master key
      const key =
      /* istanbul ignore next */
      (cov_mfsmsf4ax().s[21]++, this.deriveKey(
      /* istanbul ignore next */
      (cov_mfsmsf4ax().b[3][0]++, password) ||
      /* istanbul ignore next */
      (cov_mfsmsf4ax().b[3][1]++, this.masterKey.toString('hex')), salt, params));
      // Generate random initialization vector
      const iv =
      /* istanbul ignore next */
      (cov_mfsmsf4ax().s[22]++, (0, crypto_1.randomBytes)(12)); // 96 bits for GCM mode
      // Create cipher with AES-256-GCM
      const cipher =
      /* istanbul ignore next */
      (cov_mfsmsf4ax().s[23]++, (0, crypto_1.createCipherGCM)(EncryptionService.DEFAULT_ALGORITHM, key, iv));
      // Encrypt the data
      let encrypted =
      /* istanbul ignore next */
      (cov_mfsmsf4ax().s[24]++, cipher.update(data, 'utf8'));
      /* istanbul ignore next */
      cov_mfsmsf4ax().s[25]++;
      encrypted = Buffer.concat([encrypted, cipher.final()]);
      // Get authentication tag
      const authTag =
      /* istanbul ignore next */
      (cov_mfsmsf4ax().s[26]++, cipher.getAuthTag());
      // Create encrypted data structure
      const encryptedData =
      /* istanbul ignore next */
      (cov_mfsmsf4ax().s[27]++, {
        encryptedData: encrypted.toString('base64'),
        iv: iv.toString('base64'),
        authTag: authTag.toString('base64'),
        salt: salt.toString('base64'),
        algorithm: EncryptionService.DEFAULT_ALGORITHM,
        timestamp: Date.now()
      });
      // Log encryption operation (without sensitive data)
      /* istanbul ignore next */
      cov_mfsmsf4ax().s[28]++;
      logger_1.logger.debug('🔒 Data encrypted successfully', {
        algorithm: encryptedData.algorithm,
        dataLength: data.length,
        timestamp: encryptedData.timestamp
      });
      /* istanbul ignore next */
      cov_mfsmsf4ax().s[29]++;
      return encryptedData;
    } catch (error) {
      /* istanbul ignore next */
      cov_mfsmsf4ax().s[30]++;
      logger_1.logger.error('❌ Encryption failed:', error);
      /* istanbul ignore next */
      cov_mfsmsf4ax().s[31]++;
      throw new Error('Failed to encrypt data');
    }
  }
  /**
   * Decrypt data using AES-256-GCM with authentication verification
   * Verifies data integrity and authenticity before returning plaintext
   *
   * @param encryptedData - The encrypted data structure
   * @param password - Password for key derivation (optional, uses master key if not provided)
   * @returns Promise<string> The decrypted plaintext data
   * @throws Error if decryption fails or authentication verification fails
   */
  async decryptData(encryptedData, password) {
    /* istanbul ignore next */
    cov_mfsmsf4ax().f[3]++;
    cov_mfsmsf4ax().s[32]++;
    try {
      /* istanbul ignore next */
      cov_mfsmsf4ax().s[33]++;
      // Validate encrypted data structure
      this.validateEncryptedData(encryptedData);
      // Convert base64 components back to buffers
      const encrypted =
      /* istanbul ignore next */
      (cov_mfsmsf4ax().s[34]++, Buffer.from(encryptedData.encryptedData, 'base64'));
      const iv =
      /* istanbul ignore next */
      (cov_mfsmsf4ax().s[35]++, Buffer.from(encryptedData.iv, 'base64'));
      const authTag =
      /* istanbul ignore next */
      (cov_mfsmsf4ax().s[36]++, Buffer.from(encryptedData.authTag, 'base64'));
      const salt =
      /* istanbul ignore next */
      (cov_mfsmsf4ax().s[37]++, Buffer.from(encryptedData.salt, 'base64'));
      // Derive the same key used for encryption
      const key =
      /* istanbul ignore next */
      (cov_mfsmsf4ax().s[38]++, this.deriveKey(
      /* istanbul ignore next */
      (cov_mfsmsf4ax().b[4][0]++, password) ||
      /* istanbul ignore next */
      (cov_mfsmsf4ax().b[4][1]++, this.masterKey.toString('hex')), salt, EncryptionService.DEFAULT_KEY_PARAMS));
      // Create decipher with AES-256-GCM
      const decipher =
      /* istanbul ignore next */
      (cov_mfsmsf4ax().s[39]++, (0, crypto_1.createDecipherGCM)(encryptedData.algorithm, key, iv));
      /* istanbul ignore next */
      cov_mfsmsf4ax().s[40]++;
      decipher.setAuthTag(authTag);
      // Decrypt the data
      let decrypted =
      /* istanbul ignore next */
      (cov_mfsmsf4ax().s[41]++, decipher.update(encrypted));
      /* istanbul ignore next */
      cov_mfsmsf4ax().s[42]++;
      decrypted = Buffer.concat([decrypted, decipher.final()]);
      // Convert to string
      const plaintext =
      /* istanbul ignore next */
      (cov_mfsmsf4ax().s[43]++, decrypted.toString('utf8'));
      // Log decryption operation (without sensitive data)
      /* istanbul ignore next */
      cov_mfsmsf4ax().s[44]++;
      logger_1.logger.debug('🔓 Data decrypted successfully', {
        algorithm: encryptedData.algorithm,
        dataLength: plaintext.length,
        originalTimestamp: encryptedData.timestamp
      });
      /* istanbul ignore next */
      cov_mfsmsf4ax().s[45]++;
      return plaintext;
    } catch (error) {
      /* istanbul ignore next */
      cov_mfsmsf4ax().s[46]++;
      logger_1.logger.error('❌ Decryption failed:', error);
      /* istanbul ignore next */
      cov_mfsmsf4ax().s[47]++;
      throw new Error('Failed to decrypt data - data may be corrupted or tampered with');
    }
  }
  /**
   * Encrypt API credentials with additional security measures
   * Specialized encryption for protecting trading API keys and secrets
   *
   * @param credentials - Object containing API credentials
   * @returns Promise<EncryptedData> Encrypted credentials
   */
  async encryptCredentials(credentials) {
    /* istanbul ignore next */
    cov_mfsmsf4ax().f[4]++;
    cov_mfsmsf4ax().s[48]++;
    try {
      // Add timestamp and integrity hash to credentials
      const credentialsWithMetadata =
      /* istanbul ignore next */
      (cov_mfsmsf4ax().s[49]++, {
        ...credentials,
        _timestamp: Date.now(),
        _integrity: this.calculateIntegrityHash(credentials)
      });
      // Serialize credentials to JSON
      const credentialsJson =
      /* istanbul ignore next */
      (cov_mfsmsf4ax().s[50]++, JSON.stringify(credentialsWithMetadata));
      // Encrypt with additional security parameters
      const encrypted =
      /* istanbul ignore next */
      (cov_mfsmsf4ax().s[51]++, await this.encryptData(credentialsJson, undefined, {
        iterations: 150000,
        // Higher iterations for credentials
        saltLength: 64 // Larger salt for credentials
      }));
      /* istanbul ignore next */
      cov_mfsmsf4ax().s[52]++;
      logger_1.logger.info('🔐 API credentials encrypted successfully');
      /* istanbul ignore next */
      cov_mfsmsf4ax().s[53]++;
      return encrypted;
    } catch (error) {
      /* istanbul ignore next */
      cov_mfsmsf4ax().s[54]++;
      logger_1.logger.error('❌ Failed to encrypt credentials:', error);
      /* istanbul ignore next */
      cov_mfsmsf4ax().s[55]++;
      throw new Error('Credential encryption failed');
    }
  }
  /**
   * Decrypt API credentials with integrity verification
   * Verifies credential integrity and returns decrypted credentials
   *
   * @param encryptedCredentials - Encrypted credentials data
   * @returns Promise<Record<string, string>> Decrypted credentials
   * @throws Error if decryption fails or integrity check fails
   */
  async decryptCredentials(encryptedCredentials) {
    /* istanbul ignore next */
    cov_mfsmsf4ax().f[5]++;
    cov_mfsmsf4ax().s[56]++;
    try {
      // Decrypt the credentials JSON
      const credentialsJson =
      /* istanbul ignore next */
      (cov_mfsmsf4ax().s[57]++, await this.decryptData(encryptedCredentials));
      // Parse credentials from JSON
      const credentialsWithMetadata =
      /* istanbul ignore next */
      (cov_mfsmsf4ax().s[58]++, JSON.parse(credentialsJson));
      // Extract metadata
      const {
        _timestamp,
        _integrity,
        ...credentials
      } =
      /* istanbul ignore next */
      (cov_mfsmsf4ax().s[59]++, credentialsWithMetadata);
      // Verify integrity hash
      const expectedIntegrity =
      /* istanbul ignore next */
      (cov_mfsmsf4ax().s[60]++, this.calculateIntegrityHash(credentials));
      /* istanbul ignore next */
      cov_mfsmsf4ax().s[61]++;
      if (_integrity !== expectedIntegrity) {
        /* istanbul ignore next */
        cov_mfsmsf4ax().b[5][0]++;
        cov_mfsmsf4ax().s[62]++;
        throw new Error('Credential integrity verification failed');
      } else
      /* istanbul ignore next */
      {
        cov_mfsmsf4ax().b[5][1]++;
      }
      // Check credential age (warn if older than 30 days)
      const age =
      /* istanbul ignore next */
      (cov_mfsmsf4ax().s[63]++, Date.now() - _timestamp);
      const thirtyDays =
      /* istanbul ignore next */
      (cov_mfsmsf4ax().s[64]++, 30 * 24 * 60 * 60 * 1000);
      /* istanbul ignore next */
      cov_mfsmsf4ax().s[65]++;
      if (age > thirtyDays) {
        /* istanbul ignore next */
        cov_mfsmsf4ax().b[6][0]++;
        cov_mfsmsf4ax().s[66]++;
        logger_1.logger.warn('⚠️ Decrypted credentials are older than 30 days', {
          age: Math.floor(age / (24 * 60 * 60 * 1000)),
          timestamp: _timestamp
        });
      } else
      /* istanbul ignore next */
      {
        cov_mfsmsf4ax().b[6][1]++;
      }
      cov_mfsmsf4ax().s[67]++;
      logger_1.logger.info('🔓 API credentials decrypted and verified successfully');
      /* istanbul ignore next */
      cov_mfsmsf4ax().s[68]++;
      return credentials;
    } catch (error) {
      /* istanbul ignore next */
      cov_mfsmsf4ax().s[69]++;
      logger_1.logger.error('❌ Failed to decrypt credentials:', error);
      /* istanbul ignore next */
      cov_mfsmsf4ax().s[70]++;
      throw new Error('Credential decryption failed');
    }
  }
  /**
   * Generate a cryptographically secure random key
   * Used for generating new encryption keys and secrets
   *
   * @param length - Key length in bytes (default: 32 for AES-256)
   * @returns string Hex-encoded random key
   */
  generateSecureKey(length =
  /* istanbul ignore next */
  (cov_mfsmsf4ax().b[7][0]++, 32)) {
    /* istanbul ignore next */
    cov_mfsmsf4ax().f[6]++;
    cov_mfsmsf4ax().s[71]++;
    try {
      const key =
      /* istanbul ignore next */
      (cov_mfsmsf4ax().s[72]++, (0, crypto_1.randomBytes)(length));
      /* istanbul ignore next */
      cov_mfsmsf4ax().s[73]++;
      return key.toString('hex');
    } catch (error) {
      /* istanbul ignore next */
      cov_mfsmsf4ax().s[74]++;
      logger_1.logger.error('❌ Failed to generate secure key:', error);
      /* istanbul ignore next */
      cov_mfsmsf4ax().s[75]++;
      throw new Error('Key generation failed');
    }
  }
  /**
   * Derive encryption key from password using PBKDF2
   * Implements secure key derivation with configurable parameters
   *
   * @param password - Password or master key for derivation
   * @param salt - Cryptographic salt
   * @param params - Key derivation parameters
   * @returns Buffer The derived key
   */
  deriveKey(password, salt, params) {
    /* istanbul ignore next */
    cov_mfsmsf4ax().f[7]++;
    cov_mfsmsf4ax().s[76]++;
    return (0, crypto_1.pbkdf2Sync)(password, salt, params.iterations, params.keyLength, params.hashAlgorithm);
  }
  /**
   * Calculate integrity hash for credential verification
   * Creates a hash of credentials for tamper detection
   *
   * @param credentials - Credentials object to hash
   * @returns string SHA-256 hash of credentials
   */
  calculateIntegrityHash(credentials) {
    /* istanbul ignore next */
    cov_mfsmsf4ax().f[8]++;
    // Sort keys for consistent hashing
    const sortedKeys =
    /* istanbul ignore next */
    (cov_mfsmsf4ax().s[77]++, Object.keys(credentials).sort());
    const sortedCredentials =
    /* istanbul ignore next */
    (cov_mfsmsf4ax().s[78]++, sortedKeys.map(key => {
      /* istanbul ignore next */
      cov_mfsmsf4ax().f[9]++;
      cov_mfsmsf4ax().s[79]++;
      return `${key}:${credentials[key]}`;
    }).join('|'));
    /* istanbul ignore next */
    cov_mfsmsf4ax().s[80]++;
    return (0, crypto_1.createHash)('sha256').update(sortedCredentials).digest('hex');
  }
  /**
   * Validate encrypted data structure
   * Ensures all required fields are present and valid
   *
   * @param encryptedData - Encrypted data to validate
   * @throws Error if validation fails
   */
  validateEncryptedData(encryptedData) {
    /* istanbul ignore next */
    cov_mfsmsf4ax().f[10]++;
    const requiredFields =
    /* istanbul ignore next */
    (cov_mfsmsf4ax().s[81]++, ['encryptedData', 'iv', 'authTag', 'salt', 'algorithm', 'timestamp']);
    /* istanbul ignore next */
    cov_mfsmsf4ax().s[82]++;
    for (const field of requiredFields) {
      /* istanbul ignore next */
      cov_mfsmsf4ax().s[83]++;
      if (
      /* istanbul ignore next */
      (cov_mfsmsf4ax().b[9][0]++, !(field in encryptedData)) ||
      /* istanbul ignore next */
      (cov_mfsmsf4ax().b[9][1]++, !encryptedData[field])) {
        /* istanbul ignore next */
        cov_mfsmsf4ax().b[8][0]++;
        cov_mfsmsf4ax().s[84]++;
        throw new Error(`Invalid encrypted data: missing ${field}`);
      } else
      /* istanbul ignore next */
      {
        cov_mfsmsf4ax().b[8][1]++;
      }
    }
    // Validate algorithm
    /* istanbul ignore next */
    cov_mfsmsf4ax().s[85]++;
    if (encryptedData.algorithm !== EncryptionService.DEFAULT_ALGORITHM) {
      /* istanbul ignore next */
      cov_mfsmsf4ax().b[10][0]++;
      cov_mfsmsf4ax().s[86]++;
      throw new Error(`Unsupported encryption algorithm: ${encryptedData.algorithm}`);
    } else
    /* istanbul ignore next */
    {
      cov_mfsmsf4ax().b[10][1]++;
    }
    // Validate timestamp (not too old or in the future)
    const now =
    /* istanbul ignore next */
    (cov_mfsmsf4ax().s[87]++, Date.now());
    const maxAge =
    /* istanbul ignore next */
    (cov_mfsmsf4ax().s[88]++, 365 * 24 * 60 * 60 * 1000); // 1 year
    /* istanbul ignore next */
    cov_mfsmsf4ax().s[89]++;
    if (encryptedData.timestamp > now + 60000) {
      /* istanbul ignore next */
      cov_mfsmsf4ax().b[11][0]++;
      cov_mfsmsf4ax().s[90]++;
      // 1 minute future tolerance
      throw new Error('Encrypted data timestamp is in the future');
    } else
    /* istanbul ignore next */
    {
      cov_mfsmsf4ax().b[11][1]++;
    }
    cov_mfsmsf4ax().s[91]++;
    if (now - encryptedData.timestamp > maxAge) {
      /* istanbul ignore next */
      cov_mfsmsf4ax().b[12][0]++;
      cov_mfsmsf4ax().s[92]++;
      throw new Error('Encrypted data is too old');
    } else
    /* istanbul ignore next */
    {
      cov_mfsmsf4ax().b[12][1]++;
    }
  }
  /**
   * Securely clear sensitive data from memory
   * Overwrites memory containing sensitive information
   *
   * @param buffer - Buffer to clear
   */
  secureClear(buffer) {
    /* istanbul ignore next */
    cov_mfsmsf4ax().f[11]++;
    cov_mfsmsf4ax().s[93]++;
    if (
    /* istanbul ignore next */
    (cov_mfsmsf4ax().b[14][0]++, buffer) &&
    /* istanbul ignore next */
    (cov_mfsmsf4ax().b[14][1]++, buffer.length > 0)) {
      /* istanbul ignore next */
      cov_mfsmsf4ax().b[13][0]++;
      cov_mfsmsf4ax().s[94]++;
      buffer.fill(0);
    } else
    /* istanbul ignore next */
    {
      cov_mfsmsf4ax().b[13][1]++;
    }
  }
  /**
   * Get encryption service status and health information
   * Returns current status for monitoring and diagnostics
   *
   * @returns Object containing service status
   */
  getStatus() {
    /* istanbul ignore next */
    cov_mfsmsf4ax().f[12]++;
    cov_mfsmsf4ax().s[95]++;
    return {
      isInitialized: this.masterKey !== null,
      algorithm: EncryptionService.DEFAULT_ALGORITHM,
      keyDerivationParams: EncryptionService.DEFAULT_KEY_PARAMS,
      timestamp: Date.now()
    };
  }
}
/* istanbul ignore next */
cov_mfsmsf4ax().s[96]++;
exports.EncryptionService = EncryptionService;
// Create and export singleton instance
/* istanbul ignore next */
cov_mfsmsf4ax().s[97]++;
exports.encryptionService = new EncryptionService();
// =============================================================================
// SECURITY NOTES AND BEST PRACTICES
// =============================================================================
// 1. Master key must be stored securely and never logged or exposed
// 2. Use different passwords/keys for different types of data when possible
// 3. Regularly rotate encryption keys and credentials
// 4. Monitor for any encryption/decryption failures as potential security incidents
// 5. Keep encryption libraries and dependencies updated
// 6. Perform regular security audits of encryption implementation
// 7. Use hardware security modules (HSM) in production if available
// 8. Implement proper key escrow and recovery procedures
// =============================================================================
//# sourceMappingURL=data:application/json;charset=utf-8;base64,