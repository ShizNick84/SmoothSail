57fa49d14fb108aa923a13c1cf23135d
"use strict";
/**
 * Breakout Strategy Tests
 *
 * Comprehensive test suite for breakout detection, momentum calculation, and signal generation.
 * Tests cover support/resistance detection, volume confirmation, and false breakout filtering.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const breakout_1 = require("../breakout");
describe('BreakoutStrategy', () => {
    let strategy;
    let mockMarketData;
    beforeEach(() => {
        strategy = new breakout_1.BreakoutStrategy();
        // Create mock market data with consolidation and breakout pattern
        mockMarketData = [];
        const basePrice = 100;
        const baseVolume = 1000000;
        // Create consolidation phase (20 periods)
        for (let i = 0; i < 20; i++) {
            const price = basePrice + Math.sin(i * 0.3) * 2; // Oscillate between 98-102
            mockMarketData.push({
                symbol: 'BTC/USDT',
                timestamp: new Date(Date.now() - (40 - i) * 60000),
                open: price - 0.5,
                high: price + 1,
                low: price - 1,
                close: price,
                volume: baseVolume + Math.random() * 200000
            });
        }
        // Create breakout phase (20 periods)
        for (let i = 0; i < 20; i++) {
            const price = 102 + (i * 1.5); // Breakout upward
            mockMarketData.push({
                symbol: 'BTC/USDT',
                timestamp: new Date(Date.now() - (20 - i) * 60000),
                open: price - 0.5,
                high: price + 1,
                low: price - 1,
                close: price,
                volume: baseVolume * (i < 5 ? 2 : 1.2) // Higher volume at start of breakout
            });
        }
    });
    describe('Support and Resistance Detection', () => {
        test('should detect support and resistance levels', () => {
            const levels = strategy.detectSupportResistance(mockMarketData, 20);
            // Should return arrays (may be empty depending on data structure)
            expect(Array.isArray(levels.support)).toBe(true);
            expect(Array.isArray(levels.resistance)).toBe(true);
            expect(levels.support.length + levels.resistance.length).toBeGreaterThanOrEqual(0);
            // Consolidation range may or may not be detected depending on data
            expect(levels.consolidationRange === null || typeof levels.consolidationRange === 'object').toBe(true);
        });
        test('should return empty arrays for insufficient data', () => {
            const shortData = mockMarketData.slice(0, 5);
            const levels = strategy.detectSupportResistance(shortData, 20);
            expect(levels.support).toEqual([]);
            expect(levels.resistance).toEqual([]);
            expect(levels.consolidationRange).toBeNull();
        });
        test('should identify consolidation range', () => {
            // Create tight consolidation data
            const consolidationData = [];
            for (let i = 0; i < 30; i++) {
                const price = 100 + Math.sin(i * 0.2) * 1; // Tight range 99-101
                consolidationData.push({
                    symbol: 'BTC/USDT',
                    timestamp: new Date(Date.now() - (30 - i) * 60000),
                    open: price - 0.2,
                    high: price + 0.3,
                    low: price - 0.3,
                    close: price,
                    volume: 1000000
                });
            }
            const levels = strategy.detectSupportResistance(consolidationData, 20);
            expect(levels.consolidationRange).not.toBeNull();
            expect(levels.consolidationRange.high).toBeGreaterThan(levels.consolidationRange.low);
        });
    });
    describe('Momentum Calculation', () => {
        test('should calculate momentum correctly', () => {
            const momentum = strategy.calculateMomentum(mockMarketData, 14);
            expect(momentum).not.toBeNull();
            expect(typeof momentum).toBe('number');
            expect(momentum).toBeGreaterThan(0); // Should be positive due to upward breakout
        });
        test('should return null for insufficient data', () => {
            const shortData = mockMarketData.slice(0, 10);
            const momentum = strategy.calculateMomentum(shortData, 14);
            expect(momentum).toBeNull();
        });
        test('should calculate negative momentum for downtrend', () => {
            const downtrendData = [];
            for (let i = 0; i < 30; i++) {
                const price = 100 - (i * 0.5); // Downtrend
                downtrendData.push({
                    symbol: 'BTC/USDT',
                    timestamp: new Date(Date.now() - (30 - i) * 60000),
                    open: price - 0.5,
                    high: price + 1,
                    low: price - 1,
                    close: price,
                    volume: 1000000
                });
            }
            const momentum = strategy.calculateMomentum(downtrendData, 14);
            expect(momentum).toBeLessThan(0);
        });
    });
    describe('Breakout Detection', () => {
        test('should detect upward breakout', () => {
            const breakout = strategy.detectBreakout(mockMarketData, 20);
            if (breakout) {
                expect(breakout.direction).toBe('UP');
                expect(breakout.strength).toBeGreaterThan(0);
                expect(breakout.parameters.breakoutLevel).toBeDefined();
                expect(breakout.parameters.breakoutPercentage).toBeGreaterThan(0);
            }
        });
        test('should detect downward breakout', () => {
            // Create downward breakout data
            const breakdownData = [];
            // Consolidation phase
            for (let i = 0; i < 20; i++) {
                const price = 100 + Math.sin(i * 0.3) * 2;
                breakdownData.push({
                    symbol: 'BTC/USDT',
                    timestamp: new Date(Date.now() - (40 - i) * 60000),
                    open: price - 0.5,
                    high: price + 1,
                    low: price - 1,
                    close: price,
                    volume: 1000000
                });
            }
            // Breakdown phase
            for (let i = 0; i < 20; i++) {
                const price = 98 - (i * 1.5); // Breakdown downward
                breakdownData.push({
                    symbol: 'BTC/USDT',
                    timestamp: new Date(Date.now() - (20 - i) * 60000),
                    open: price - 0.5,
                    high: price + 1,
                    low: price - 1,
                    close: price,
                    volume: 1000000 * (i < 5 ? 2 : 1.2)
                });
            }
            const breakout = strategy.detectBreakout(breakdownData, 20);
            if (breakout) {
                expect(breakout.direction).toBe('DOWN');
                expect(breakout.strength).toBeGreaterThan(0);
            }
        });
        test('should return null for insufficient breakout magnitude', () => {
            // Create data with very small price movements
            const smallMoveData = [];
            for (let i = 0; i < 40; i++) {
                const price = 100 + Math.sin(i * 0.1) * 0.5; // Very small movements
                smallMoveData.push({
                    symbol: 'BTC/USDT',
                    timestamp: new Date(Date.now() - (40 - i) * 60000),
                    open: price - 0.1,
                    high: price + 0.1,
                    low: price - 0.1,
                    close: price,
                    volume: 1000000
                });
            }
            const breakout = strategy.detectBreakout(smallMoveData, 20);
            expect(breakout).toBeNull();
        });
        test('should include volume confirmation', () => {
            const breakout = strategy.detectBreakout(mockMarketData, 20);
            if (breakout) {
                expect(typeof breakout.volumeConfirmed).toBe('boolean');
                expect(typeof breakout.falseBreakoutProbability).toBe('number');
                expect(breakout.falseBreakoutProbability).toBeGreaterThanOrEqual(0);
                expect(breakout.falseBreakoutProbability).toBeLessThanOrEqual(100);
            }
        });
    });
    describe('Trading Signal Generation', () => {
        test('should generate buy signal for upward breakout', () => {
            const signal = strategy.generateSignal(mockMarketData, 20);
            if (signal) {
                expect(signal.type).toBe('BUY');
                expect(signal.strength).toBeGreaterThan(0);
                expect(signal.confidence).toBeGreaterThan(0);
                expect(signal.reasoning).toContain('breakout');
                expect(signal.metadata?.direction).toBe('UP');
                expect(signal.metadata?.breakoutLevel).toBeDefined();
            }
        });
        test('should generate sell signal for downward breakout', () => {
            // Create downward breakout scenario
            const breakdownData = [];
            for (let i = 0; i < 20; i++) {
                const price = 100 + Math.sin(i * 0.3) * 2;
                breakdownData.push({
                    symbol: 'BTC/USDT',
                    timestamp: new Date(Date.now() - (40 - i) * 60000),
                    open: price - 0.5,
                    high: price + 1,
                    low: price - 1,
                    close: price,
                    volume: 1000000
                });
            }
            for (let i = 0; i < 20; i++) {
                const price = 98 - (i * 2);
                breakdownData.push({
                    symbol: 'BTC/USDT',
                    timestamp: new Date(Date.now() - (20 - i) * 60000),
                    open: price - 0.5,
                    high: price + 1,
                    low: price - 1,
                    close: price,
                    volume: 1000000 * 2
                });
            }
            const signal = strategy.generateSignal(breakdownData, 20);
            if (signal) {
                expect(signal.type).toBe('SELL');
                expect(signal.strength).toBeGreaterThan(0);
                expect(signal.confidence).toBeGreaterThan(0);
                expect(signal.reasoning).toContain('breakout');
                expect(signal.metadata?.direction).toBe('DOWN');
            }
        });
        test('should filter out high probability false breakouts', () => {
            // Create data that would result in high false breakout probability
            const falseBreakoutData = [];
            // Create multiple failed breakout attempts
            for (let i = 0; i < 50; i++) {
                let price = 100;
                if (i % 10 === 0) {
                    price = 103; // Failed breakout attempts
                }
                else {
                    price = 100 + Math.sin(i * 0.2) * 1;
                }
                falseBreakoutData.push({
                    symbol: 'BTC/USDT',
                    timestamp: new Date(Date.now() - (50 - i) * 60000),
                    open: price - 0.5,
                    high: price + 0.5,
                    low: price - 0.5,
                    close: price - 0.3, // Always close back down
                    volume: 500000 // Low volume
                });
            }
            const signal = strategy.generateSignal(falseBreakoutData, 20);
            // Should likely be null due to high false breakout probability
            if (signal) {
                expect(signal.metadata?.falseBreakoutProbability).toBeLessThan(70);
            }
        });
        test('should include proper metadata', () => {
            const signal = strategy.generateSignal(mockMarketData, 20);
            if (signal) {
                expect(signal.metadata).toBeDefined();
                expect(signal.metadata?.breakoutLevel).toBeDefined();
                expect(signal.metadata?.breakoutPercentage).toBeDefined();
                expect(signal.metadata?.direction).toBeDefined();
                expect(signal.metadata?.volumeConfirmed).toBeDefined();
                expect(signal.metadata?.falseBreakoutProbability).toBeDefined();
                expect(signal.metadata?.momentum).toBeDefined();
                expect(signal.indicators[0]).toContain('BREAKOUT_');
            }
        });
        test('should calculate risk-reward ratio', () => {
            const signal = strategy.generateSignal(mockMarketData, 20);
            if (signal) {
                expect(signal.riskReward).toBeGreaterThan(0);
                expect(typeof signal.riskReward).toBe('number');
            }
        });
    });
    describe('Signal Confidence Evaluation', () => {
        test('should evaluate signal confidence correctly', () => {
            const signal = strategy.generateSignal(mockMarketData, 20);
            if (signal) {
                const confidence = strategy.evaluateSignalConfidence(mockMarketData, signal);
                expect(confidence.overall).toBeGreaterThanOrEqual(0);
                expect(confidence.overall).toBeLessThanOrEqual(100);
                expect(confidence.technical).toBeGreaterThanOrEqual(0);
                expect(confidence.technical).toBeLessThanOrEqual(100);
                expect(confidence.volume).toBeGreaterThanOrEqual(0);
                expect(confidence.volume).toBeLessThanOrEqual(100);
                expect(confidence.momentum).toBeGreaterThanOrEqual(0);
                expect(confidence.momentum).toBeLessThanOrEqual(100);
                expect(confidence.factors.length).toBeGreaterThanOrEqual(4);
            }
        });
        test('should provide detailed factors', () => {
            const signal = strategy.generateSignal(mockMarketData, 20);
            if (signal) {
                const confidence = strategy.evaluateSignalConfidence(mockMarketData, signal);
                expect(confidence.factors[0]).toContain('Breakout signal strength');
                expect(confidence.factors[1]).toContain('Volume confirmation');
                expect(confidence.factors[2]).toContain('Momentum alignment');
                expect(confidence.factors[3]).toContain('Breakout level');
            }
        });
        test('should include breakout-specific factors', () => {
            const signal = strategy.generateSignal(mockMarketData, 20);
            if (signal) {
                const confidence = strategy.evaluateSignalConfidence(mockMarketData, signal);
                const falseBreakoutFactors = confidence.factors.filter(f => f.includes('False breakout'));
                const levelTestFactors = confidence.factors.filter(f => f.includes('Level tested'));
                const magnitudeFactors = confidence.factors.filter(f => f.includes('Breakout magnitude'));
                expect(falseBreakoutFactors.length).toBeGreaterThan(0);
                expect(levelTestFactors.length).toBeGreaterThan(0);
                expect(magnitudeFactors.length).toBeGreaterThan(0);
            }
        });
    });
    describe('Edge Cases', () => {
        test('should handle empty market data', () => {
            const signal = strategy.generateSignal([], 20);
            expect(signal).toBeNull();
        });
        test('should handle single data point', () => {
            const singleData = [mockMarketData[0]];
            const signal = strategy.generateSignal(singleData, 20);
            expect(signal).toBeNull();
        });
        test('should handle flat market data', () => {
            const flatData = [];
            for (let i = 0; i < 40; i++) {
                flatData.push({
                    symbol: 'BTC/USDT',
                    timestamp: new Date(Date.now() - (40 - i) * 60000),
                    open: 100,
                    high: 100,
                    low: 100,
                    close: 100,
                    volume: 1000000
                });
            }
            const levels = strategy.detectSupportResistance(flatData, 20);
            expect(levels.support.length).toBe(0);
            expect(levels.resistance.length).toBe(0);
        });
        test('should handle very volatile data', () => {
            const volatileData = [];
            for (let i = 0; i < 40; i++) {
                const price = 100 + (Math.random() - 0.5) * 50; // Very volatile
                volatileData.push({
                    symbol: 'BTC/USDT',
                    timestamp: new Date(Date.now() - (40 - i) * 60000),
                    open: price - 5,
                    high: price + 10,
                    low: price - 10,
                    close: price,
                    volume: 1000000
                });
            }
            const levels = strategy.detectSupportResistance(volatileData, 20);
            // Should still return some levels even for volatile data
            expect(levels.support.length + levels.resistance.length).toBeGreaterThanOrEqual(0);
        });
        test('should handle zero volume data', () => {
            const zeroVolumeData = mockMarketData.map(data => ({
                ...data,
                volume: 0
            }));
            const signal = strategy.generateSignal(zeroVolumeData, 20);
            if (signal) {
                expect(signal.metadata?.volumeConfirmed).toBe(false);
            }
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,