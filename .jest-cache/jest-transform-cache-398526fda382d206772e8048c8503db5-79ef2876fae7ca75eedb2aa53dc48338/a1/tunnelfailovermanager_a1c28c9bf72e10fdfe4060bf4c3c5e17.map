{"version":3,"names":["cov_1o4inqbypn","actualCoverage","s","events_1","require","ssh_tunnel_manager_1","TunnelFailoverManager","EventEmitter","logger","tunnelManager","healthMonitor","loadBalancer","autoReconnect","config","failoverStats","failoverHistory","backupTunnels","primaryTunnels","failoverInProgress","backupHealthCheckTimer","isEnabled","constructor","f","Map","Set","enabled","minBackupTunnels","maxFailoverAttempts","failoverTimeout","backupHealthCheckInterval","enableProactiveBackups","backupConfigs","failoverPriority","totalFailovers","successfulFailovers","failedFailovers","averageFailoverTime","longestFailoverTime","shortestFailoverTime","Infinity","failoversByConnection","lastFailoverEvent","currentBackupCount","backupUtilization","setupEventListeners","info","enable","b","warn","createBackupTunnels","startBackupHealthMonitoring","emit","disable","clearInterval","disconnectBackupTunnels","performFailover","primaryConnectionId","reason","has","get","failoverPromise","executeFailover","set","result","delete","addPrimaryTunnel","connectionId","add","removePrimaryTunnel","createBackupTunnel","backupConfig","connection","createTunnel","backupStatus","id","isActive","isHealthy","priority","getBackupPriority","createdAt","Date","lastUsed","usageCount","updateBackupStats","activateBackupTunnel","Error","establishTunnel","error","deactivateBackupTunnel","disconnectTunnel","getFailoverStats","getFailoverHistory","limit","slice","getBackupTunnelStatus","on","message","startTime","now","failoverEvent","Math","random","toString","substr","timestamp","backupConnectionId","success","duration","backupTunnel","selectBestBackupTunnel","waitForTunnelReady","updateFailoverStats","String","storeFailoverEvent","excludeConnectionId","availableBackups","Array","from","values","filter","backup","sort","a","length","createEmergencyBackup","getConnection","healthMetrics","getHealthMetrics","healthScore","weight","latency","selectionTime","fallbackBackup","timeoutMs","state","TunnelState","CONNECTED","Promise","resolve","setTimeout","targetBackupCount","max","size","debug","tunnelsToCreate","createPromises","i","push","all","disconnectPromises","keys","map","catch","clear","setInterval","checkBackupHealth","entries","forceReconnection","index","indexOf","totalTime","e","reduce","sum","connectionFailovers","activeBackups","maxHistorySize","splice","cleanup","exports"],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\tunnel-failover-manager.ts"],"sourcesContent":["import { EventEmitter } from 'events';\r\nimport { Logger } from '../core/logging/logger';\r\nimport { SSHTunnelManager, TunnelConnection, TunnelState, TunnelConfig } from './ssh-tunnel-manager';\r\nimport { TunnelHealthMonitor } from './tunnel-health-monitor';\r\nimport { TunnelLoadBalancer, TunnelSelection } from './tunnel-load-balancer';\r\nimport { TunnelAutoReconnect } from './tunnel-auto-reconnect';\r\n\r\n/**\r\n * Failover configuration\r\n */\r\nexport interface FailoverConfig {\r\n  /** Enable automatic failover */\r\n  enabled: boolean;\r\n  /** Minimum number of backup tunnels to maintain */\r\n  minBackupTunnels: number;\r\n  /** Maximum failover attempts per connection */\r\n  maxFailoverAttempts: number;\r\n  /** Failover timeout in milliseconds */\r\n  failoverTimeout: number;\r\n  /** Health check interval for backup tunnels */\r\n  backupHealthCheckInterval: number;\r\n  /** Enable proactive backup tunnel creation */\r\n  enableProactiveBackups: boolean;\r\n  /** Backup tunnel configurations */\r\n  backupConfigs: Partial<TunnelConfig>[];\r\n  /** Failover priority order */\r\n  failoverPriority: string[];\r\n}\r\n\r\n/**\r\n * Failover event information\r\n */\r\nexport interface FailoverEvent {\r\n  id: string;\r\n  timestamp: Date;\r\n  primaryConnectionId: string;\r\n  backupConnectionId: string | null;\r\n  reason: string;\r\n  success: boolean;\r\n  duration: number;\r\n  error?: Error;\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\n/**\r\n * Failover statistics\r\n */\r\nexport interface FailoverStats {\r\n  totalFailovers: number;\r\n  successfulFailovers: number;\r\n  failedFailovers: number;\r\n  averageFailoverTime: number;\r\n  longestFailoverTime: number;\r\n  shortestFailoverTime: number;\r\n  failoversByConnection: Map<string, number>;\r\n  lastFailoverEvent: FailoverEvent | null;\r\n  currentBackupCount: number;\r\n  backupUtilization: number;\r\n}\r\n\r\n/**\r\n * Backup tunnel status\r\n */\r\nexport interface BackupTunnelStatus {\r\n  connectionId: string;\r\n  isActive: boolean;\r\n  isHealthy: boolean;\r\n  priority: number;\r\n  createdAt: Date;\r\n  lastUsed: Date | null;\r\n  usageCount: number;\r\n  config: Partial<TunnelConfig>;\r\n}\r\n\r\n/**\r\n * Tunnel Failover Manager\r\n * Manages automatic failover between primary and backup SSH tunnels\r\n */\r\nexport class TunnelFailoverManager extends EventEmitter {\r\n  private logger: Logger;\r\n  private tunnelManager: SSHTunnelManager;\r\n  private healthMonitor: TunnelHealthMonitor;\r\n  private loadBalancer: TunnelLoadBalancer;\r\n  private autoReconnect: TunnelAutoReconnect;\r\n  private config: FailoverConfig;\r\n  private failoverStats: FailoverStats;\r\n  private failoverHistory: FailoverEvent[];\r\n  private backupTunnels: Map<string, BackupTunnelStatus>;\r\n  private primaryTunnels: Set<string>;\r\n  private failoverInProgress: Map<string, Promise<TunnelSelection | null>>;\r\n  private backupHealthCheckTimer: NodeJS.Timeout | null;\r\n  private isEnabled: boolean;\r\n\r\n  constructor(\r\n    logger: Logger,\r\n    tunnelManager: SSHTunnelManager,\r\n    healthMonitor: TunnelHealthMonitor,\r\n    loadBalancer: TunnelLoadBalancer,\r\n    autoReconnect: TunnelAutoReconnect,\r\n    config?: Partial<FailoverConfig>\r\n  ) {\r\n    super();\r\n    this.logger = logger;\r\n    this.tunnelManager = tunnelManager;\r\n    this.healthMonitor = healthMonitor;\r\n    this.loadBalancer = loadBalancer;\r\n    this.autoReconnect = autoReconnect;\r\n    this.failoverHistory = [];\r\n    this.backupTunnels = new Map();\r\n    this.primaryTunnels = new Set();\r\n    this.failoverInProgress = new Map();\r\n    this.backupHealthCheckTimer = null;\r\n    this.isEnabled = false;\r\n\r\n    // Default configuration\r\n    this.config = {\r\n      enabled: true,\r\n      minBackupTunnels: 1,\r\n      maxFailoverAttempts: 3,\r\n      failoverTimeout: 30000,\r\n      backupHealthCheckInterval: 60000,\r\n      enableProactiveBackups: true,\r\n      backupConfigs: [],\r\n      failoverPriority: [],\r\n      ...config\r\n    };\r\n\r\n    // Initialize statistics\r\n    this.failoverStats = {\r\n      totalFailovers: 0,\r\n      successfulFailovers: 0,\r\n      failedFailovers: 0,\r\n      averageFailoverTime: 0,\r\n      longestFailoverTime: 0,\r\n      shortestFailoverTime: Infinity,\r\n      failoversByConnection: new Map(),\r\n      lastFailoverEvent: null,\r\n      currentBackupCount: 0,\r\n      backupUtilization: 0\r\n    };\r\n\r\n    this.setupEventListeners();\r\n    this.logger.info('Tunnel Failover Manager initialized', this.config);\r\n  }\r\n\r\n  /**\r\n   * Enable failover management\r\n   */\r\n  async enable(): Promise<void> {\r\n    if (this.isEnabled) {\r\n      this.logger.warn('Failover management is already enabled');\r\n      return;\r\n    }\r\n\r\n    this.isEnabled = true;\r\n    this.logger.info('Enabling failover management');\r\n\r\n    // Create backup tunnels if configured\r\n    if (this.config.enableProactiveBackups) {\r\n      await this.createBackupTunnels();\r\n    }\r\n\r\n    // Start backup health monitoring\r\n    this.startBackupHealthMonitoring();\r\n\r\n    this.emit('failoverEnabled');\r\n  }\r\n\r\n  /**\r\n   * Disable failover management\r\n   */\r\n  async disable(): Promise<void> {\r\n    if (!this.isEnabled) {\r\n      this.logger.warn('Failover management is already disabled');\r\n      return;\r\n    }\r\n\r\n    this.isEnabled = false;\r\n    this.logger.info('Disabling failover management');\r\n\r\n    // Stop backup health monitoring\r\n    if (this.backupHealthCheckTimer) {\r\n      clearInterval(this.backupHealthCheckTimer);\r\n      this.backupHealthCheckTimer = null;\r\n    }\r\n\r\n    // Disconnect backup tunnels\r\n    await this.disconnectBackupTunnels();\r\n\r\n    this.emit('failoverDisabled');\r\n  }\r\n\r\n  /**\r\n   * Perform failover from primary to backup tunnel\r\n   * \r\n   * @param primaryConnectionId - Primary connection that failed\r\n   * @param reason - Reason for failover\r\n   * @returns Backup tunnel selection or null if failed\r\n   */\r\n  async performFailover(primaryConnectionId: string, reason: string): Promise<TunnelSelection | null> {\r\n    if (!this.isEnabled) {\r\n      this.logger.warn('Failover is disabled');\r\n      return null;\r\n    }\r\n\r\n    // Check if failover is already in progress for this connection\r\n    if (this.failoverInProgress.has(primaryConnectionId)) {\r\n      this.logger.info(`Failover already in progress for connection: ${primaryConnectionId}`);\r\n      return this.failoverInProgress.get(primaryConnectionId)!;\r\n    }\r\n\r\n    const failoverPromise = this.executeFailover(primaryConnectionId, reason);\r\n    this.failoverInProgress.set(primaryConnectionId, failoverPromise);\r\n\r\n    try {\r\n      const result = await failoverPromise;\r\n      return result;\r\n    } finally {\r\n      this.failoverInProgress.delete(primaryConnectionId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add primary tunnel to failover management\r\n   * \r\n   * @param connectionId - Primary connection ID\r\n   */\r\n  addPrimaryTunnel(connectionId: string): void {\r\n    this.primaryTunnels.add(connectionId);\r\n    this.logger.info(`Added primary tunnel to failover management: ${connectionId}`);\r\n  }\r\n\r\n  /**\r\n   * Remove primary tunnel from failover management\r\n   * \r\n   * @param connectionId - Primary connection ID\r\n   */\r\n  removePrimaryTunnel(connectionId: string): void {\r\n    this.primaryTunnels.delete(connectionId);\r\n    this.logger.info(`Removed primary tunnel from failover management: ${connectionId}`);\r\n  }\r\n\r\n  /**\r\n   * Create backup tunnel with specified configuration\r\n   * \r\n   * @param backupConfig - Backup tunnel configuration\r\n   * @returns Created backup tunnel connection\r\n   */\r\n  async createBackupTunnel(backupConfig: Partial<TunnelConfig>): Promise<TunnelConnection> {\r\n    this.logger.info('Creating backup tunnel', { config: backupConfig });\r\n\r\n    // Create tunnel connection\r\n    const connection = await this.tunnelManager.createTunnel(backupConfig);\r\n\r\n    // Register as backup tunnel\r\n    const backupStatus: BackupTunnelStatus = {\r\n      connectionId: connection.id,\r\n      isActive: false,\r\n      isHealthy: false,\r\n      priority: this.getBackupPriority(connection.id),\r\n      createdAt: new Date(),\r\n      lastUsed: null,\r\n      usageCount: 0,\r\n      config: backupConfig\r\n    };\r\n\r\n    this.backupTunnels.set(connection.id, backupStatus);\r\n    this.updateBackupStats();\r\n\r\n    this.logger.info(`Backup tunnel created: ${connection.id}`);\r\n    this.emit('backupTunnelCreated', connection, backupStatus);\r\n\r\n    return connection;\r\n  }\r\n\r\n  /**\r\n   * Activate backup tunnel\r\n   * \r\n   * @param connectionId - Backup connection ID\r\n   */\r\n  async activateBackupTunnel(connectionId: string): Promise<void> {\r\n    const backupStatus = this.backupTunnels.get(connectionId);\r\n    if (!backupStatus) {\r\n      throw new Error(`Backup tunnel not found: ${connectionId}`);\r\n    }\r\n\r\n    if (backupStatus.isActive) {\r\n      this.logger.warn(`Backup tunnel already active: ${connectionId}`);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      this.logger.info(`Activating backup tunnel: ${connectionId}`);\r\n\r\n      // Establish tunnel connection\r\n      await this.tunnelManager.establishTunnel(connectionId);\r\n\r\n      // Update status\r\n      backupStatus.isActive = true;\r\n      backupStatus.lastUsed = new Date();\r\n      backupStatus.usageCount++;\r\n\r\n      this.updateBackupStats();\r\n\r\n      this.logger.info(`Backup tunnel activated: ${connectionId}`);\r\n      this.emit('backupTunnelActivated', connectionId, backupStatus);\r\n\r\n    } catch (error) {\r\n      this.logger.error(`Failed to activate backup tunnel: ${connectionId}`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deactivate backup tunnel\r\n   * \r\n   * @param connectionId - Backup connection ID\r\n   */\r\n  async deactivateBackupTunnel(connectionId: string): Promise<void> {\r\n    const backupStatus = this.backupTunnels.get(connectionId);\r\n    if (!backupStatus) {\r\n      throw new Error(`Backup tunnel not found: ${connectionId}`);\r\n    }\r\n\r\n    if (!backupStatus.isActive) {\r\n      this.logger.warn(`Backup tunnel already inactive: ${connectionId}`);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      this.logger.info(`Deactivating backup tunnel: ${connectionId}`);\r\n\r\n      // Disconnect tunnel\r\n      await this.tunnelManager.disconnectTunnel(connectionId);\r\n\r\n      // Update status\r\n      backupStatus.isActive = false;\r\n\r\n      this.updateBackupStats();\r\n\r\n      this.logger.info(`Backup tunnel deactivated: ${connectionId}`);\r\n      this.emit('backupTunnelDeactivated', connectionId, backupStatus);\r\n\r\n    } catch (error) {\r\n      this.logger.error(`Failed to deactivate backup tunnel: ${connectionId}`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get failover statistics\r\n   * \r\n   * @returns Current failover statistics\r\n   */\r\n  getFailoverStats(): FailoverStats {\r\n    return { ...this.failoverStats };\r\n  }\r\n\r\n  /**\r\n   * Get failover history\r\n   * \r\n   * @param limit - Maximum number of events to return\r\n   * @returns Array of failover events\r\n   */\r\n  getFailoverHistory(limit?: number): FailoverEvent[] {\r\n    return limit ? this.failoverHistory.slice(-limit) : [...this.failoverHistory];\r\n  }\r\n\r\n  /**\r\n   * Get backup tunnel status\r\n   * \r\n   * @returns Map of backup tunnel statuses\r\n   */\r\n  getBackupTunnelStatus(): Map<string, BackupTunnelStatus> {\r\n    return new Map(this.backupTunnels);\r\n  }\r\n\r\n  /**\r\n   * Setup event listeners\r\n   */\r\n  private setupEventListeners(): void {\r\n    // Listen for tunnel failures\r\n    this.tunnelManager.on('tunnelError', (connection, error) => {\r\n      if (this.primaryTunnels.has(connection.id)) {\r\n        this.performFailover(connection.id, `Tunnel error: ${error.message}`);\r\n      }\r\n    });\r\n\r\n    // Listen for tunnel disconnections\r\n    this.tunnelManager.on('tunnelDisconnected', (connection) => {\r\n      if (this.primaryTunnels.has(connection.id)) {\r\n        this.performFailover(connection.id, 'Tunnel disconnected');\r\n      }\r\n    });\r\n\r\n    // Listen for health issues\r\n    this.healthMonitor.on('connectionUnhealthy', (connection) => {\r\n      if (this.primaryTunnels.has(connection.id)) {\r\n        this.performFailover(connection.id, 'Connection unhealthy');\r\n      }\r\n    });\r\n\r\n    // Listen for backup tunnel connections\r\n    this.tunnelManager.on('tunnelConnected', (connection) => {\r\n      const backupStatus = this.backupTunnels.get(connection.id);\r\n      if (backupStatus) {\r\n        backupStatus.isHealthy = true;\r\n        this.updateBackupStats();\r\n      }\r\n    });\r\n\r\n    // Listen for backup tunnel disconnections\r\n    this.tunnelManager.on('tunnelDisconnected', (connection) => {\r\n      const backupStatus = this.backupTunnels.get(connection.id);\r\n      if (backupStatus) {\r\n        backupStatus.isActive = false;\r\n        backupStatus.isHealthy = false;\r\n        this.updateBackupStats();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Execute failover process\r\n   * \r\n   * @param primaryConnectionId - Primary connection ID\r\n   * @param reason - Reason for failover\r\n   * @returns Backup tunnel selection or null\r\n   */\r\n  private async executeFailover(primaryConnectionId: string, reason: string): Promise<TunnelSelection | null> {\r\n    const startTime = Date.now();\r\n    const failoverEvent: FailoverEvent = {\r\n      id: `failover_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n      timestamp: new Date(),\r\n      primaryConnectionId,\r\n      backupConnectionId: null,\r\n      reason,\r\n      success: false,\r\n      duration: 0\r\n    };\r\n\r\n    try {\r\n      this.logger.warn(`Starting failover for connection: ${primaryConnectionId}`, { reason });\r\n\r\n      // Find best backup tunnel\r\n      const backupTunnel = await this.selectBestBackupTunnel(primaryConnectionId);\r\n      \r\n      if (!backupTunnel) {\r\n        throw new Error('No suitable backup tunnel available');\r\n      }\r\n\r\n      failoverEvent.backupConnectionId = backupTunnel.connection.id;\r\n\r\n      // Activate backup tunnel if not already active\r\n      const backupStatus = this.backupTunnels.get(backupTunnel.connection.id);\r\n      if (backupStatus && !backupStatus.isActive) {\r\n        await this.activateBackupTunnel(backupTunnel.connection.id);\r\n      }\r\n\r\n      // Wait for backup tunnel to be ready\r\n      await this.waitForTunnelReady(backupTunnel.connection.id);\r\n\r\n      // Mark failover as successful\r\n      failoverEvent.success = true;\r\n      failoverEvent.duration = Date.now() - startTime;\r\n\r\n      // Update statistics\r\n      this.updateFailoverStats(failoverEvent);\r\n\r\n      this.logger.info(`Failover successful: ${primaryConnectionId} -> ${backupTunnel.connection.id}`, {\r\n        duration: `${failoverEvent.duration}ms`\r\n      });\r\n\r\n      this.emit('failoverSuccessful', failoverEvent, backupTunnel);\r\n      return backupTunnel;\r\n\r\n    } catch (error) {\r\n      failoverEvent.success = false;\r\n      failoverEvent.error = error instanceof Error ? error : new Error(String(error));\r\n      failoverEvent.duration = Date.now() - startTime;\r\n\r\n      // Update statistics\r\n      this.updateFailoverStats(failoverEvent);\r\n\r\n      this.logger.error(`Failover failed for connection: ${primaryConnectionId}`, error);\r\n      this.emit('failoverFailed', failoverEvent);\r\n\r\n      return null;\r\n\r\n    } finally {\r\n      // Store failover event in history\r\n      this.storeFailoverEvent(failoverEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Select best backup tunnel for failover\r\n   * \r\n   * @param excludeConnectionId - Connection ID to exclude\r\n   * @returns Best backup tunnel selection or null\r\n   */\r\n  private async selectBestBackupTunnel(excludeConnectionId: string): Promise<TunnelSelection | null> {\r\n    // Get available backup tunnels\r\n    const availableBackups = Array.from(this.backupTunnels.values())\r\n      .filter(backup => {\r\n        return backup.connectionId !== excludeConnectionId &&\r\n               (backup.isActive || this.config.enableProactiveBackups);\r\n      })\r\n      .sort((a, b) => a.priority - b.priority); // Sort by priority\r\n\r\n    if (availableBackups.length === 0) {\r\n      // Try to create emergency backup if no backups available\r\n      if (this.config.backupConfigs.length > 0) {\r\n        return this.createEmergencyBackup();\r\n      }\r\n      return null;\r\n    }\r\n\r\n    // Select best backup based on health and priority\r\n    for (const backup of availableBackups) {\r\n      const connection = this.tunnelManager.getConnection(backup.connectionId);\r\n      if (!connection) continue;\r\n\r\n      const healthMetrics = this.healthMonitor.getHealthMetrics(backup.connectionId);\r\n      \r\n      // Check if backup is healthy enough\r\n      if (healthMetrics && healthMetrics.healthScore >= 50) {\r\n        return {\r\n          connection,\r\n          reason: 'Backup tunnel selection',\r\n          weight: 1,\r\n          healthScore: healthMetrics.healthScore,\r\n          latency: healthMetrics.latency,\r\n          selectionTime: new Date()\r\n        };\r\n      }\r\n    }\r\n\r\n    // If no healthy backup found, use the highest priority one\r\n    const fallbackBackup = availableBackups[0];\r\n    const connection = this.tunnelManager.getConnection(fallbackBackup.connectionId);\r\n    \r\n    if (connection) {\r\n      return {\r\n        connection,\r\n        reason: 'Fallback backup tunnel selection',\r\n        weight: 1,\r\n        healthScore: 0,\r\n        latency: 0,\r\n        selectionTime: new Date()\r\n      };\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Create emergency backup tunnel\r\n   * \r\n   * @returns Emergency backup tunnel selection or null\r\n   */\r\n  private async createEmergencyBackup(): Promise<TunnelSelection | null> {\r\n    if (this.config.backupConfigs.length === 0) {\r\n      return null;\r\n    }\r\n\r\n    try {\r\n      this.logger.warn('Creating emergency backup tunnel');\r\n\r\n      // Use first backup configuration\r\n      const backupConfig = this.config.backupConfigs[0];\r\n      const connection = await this.createBackupTunnel(backupConfig);\r\n      \r\n      // Activate immediately\r\n      await this.activateBackupTunnel(connection.id);\r\n\r\n      return {\r\n        connection,\r\n        reason: 'Emergency backup tunnel creation',\r\n        weight: 1,\r\n        healthScore: 50, // Assume moderate health for new tunnel\r\n        latency: 0,\r\n        selectionTime: new Date()\r\n      };\r\n\r\n    } catch (error) {\r\n      this.logger.error('Failed to create emergency backup tunnel', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Wait for tunnel to be ready\r\n   * \r\n   * @param connectionId - Connection ID\r\n   * @param timeoutMs - Timeout in milliseconds\r\n   */\r\n  private async waitForTunnelReady(connectionId: string, timeoutMs: number = this.config.failoverTimeout): Promise<void> {\r\n    const startTime = Date.now();\r\n    \r\n    while (Date.now() - startTime < timeoutMs) {\r\n      const connection = this.tunnelManager.getConnection(connectionId);\r\n      \r\n      if (connection && connection.state === TunnelState.CONNECTED) {\r\n        // Additional health check\r\n        const healthMetrics = this.healthMonitor.getHealthMetrics(connectionId);\r\n        if (healthMetrics && healthMetrics.isHealthy) {\r\n          return;\r\n        }\r\n      }\r\n\r\n      // Wait before next check\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n    }\r\n\r\n    throw new Error(`Tunnel not ready within timeout: ${connectionId}`);\r\n  }\r\n\r\n  /**\r\n   * Create backup tunnels from configuration\r\n   */\r\n  private async createBackupTunnels(): Promise<void> {\r\n    const targetBackupCount = Math.max(this.config.minBackupTunnels, this.config.backupConfigs.length);\r\n    const currentBackupCount = this.backupTunnels.size;\r\n\r\n    if (currentBackupCount >= targetBackupCount) {\r\n      this.logger.debug('Sufficient backup tunnels already exist');\r\n      return;\r\n    }\r\n\r\n    const tunnelsToCreate = targetBackupCount - currentBackupCount;\r\n    this.logger.info(`Creating ${tunnelsToCreate} backup tunnels`);\r\n\r\n    const createPromises = [];\r\n    for (let i = 0; i < tunnelsToCreate && i < this.config.backupConfigs.length; i++) {\r\n      const backupConfig = this.config.backupConfigs[i];\r\n      createPromises.push(this.createBackupTunnel(backupConfig));\r\n    }\r\n\r\n    try {\r\n      await Promise.all(createPromises);\r\n      this.logger.info(`Successfully created ${tunnelsToCreate} backup tunnels`);\r\n    } catch (error) {\r\n      this.logger.error('Failed to create some backup tunnels', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Disconnect all backup tunnels\r\n   */\r\n  private async disconnectBackupTunnels(): Promise<void> {\r\n    const disconnectPromises = Array.from(this.backupTunnels.keys()).map(\r\n      connectionId => this.deactivateBackupTunnel(connectionId).catch(error =>\r\n        this.logger.error(`Error deactivating backup tunnel ${connectionId}`, error)\r\n      )\r\n    );\r\n\r\n    await Promise.all(disconnectPromises);\r\n    this.backupTunnels.clear();\r\n    this.updateBackupStats();\r\n  }\r\n\r\n  /**\r\n   * Start backup health monitoring\r\n   */\r\n  private startBackupHealthMonitoring(): void {\r\n    if (this.backupHealthCheckTimer) {\r\n      clearInterval(this.backupHealthCheckTimer);\r\n    }\r\n\r\n    this.backupHealthCheckTimer = setInterval(() => {\r\n      this.checkBackupHealth();\r\n    }, this.config.backupHealthCheckInterval);\r\n\r\n    this.logger.info('Started backup health monitoring');\r\n  }\r\n\r\n  /**\r\n   * Check health of backup tunnels\r\n   */\r\n  private async checkBackupHealth(): Promise<void> {\r\n    for (const [connectionId, backupStatus] of this.backupTunnels.entries()) {\r\n      try {\r\n        const healthMetrics = this.healthMonitor.getHealthMetrics(connectionId);\r\n        backupStatus.isHealthy = healthMetrics ? healthMetrics.isHealthy : false;\r\n\r\n        // If backup is unhealthy and active, try to reconnect\r\n        if (!backupStatus.isHealthy && backupStatus.isActive) {\r\n          this.logger.warn(`Backup tunnel unhealthy, attempting reconnection: ${connectionId}`);\r\n          await this.autoReconnect.forceReconnection(connectionId, 'Backup health check failure');\r\n        }\r\n\r\n      } catch (error) {\r\n        this.logger.error(`Backup health check failed for ${connectionId}`, error);\r\n        backupStatus.isHealthy = false;\r\n      }\r\n    }\r\n\r\n    this.updateBackupStats();\r\n  }\r\n\r\n  /**\r\n   * Get backup priority for connection\r\n   * \r\n   * @param connectionId - Connection ID\r\n   * @returns Priority number (lower = higher priority)\r\n   */\r\n  private getBackupPriority(connectionId: string): number {\r\n    const index = this.config.failoverPriority.indexOf(connectionId);\r\n    return index >= 0 ? index : 999; // Default low priority\r\n  }\r\n\r\n  /**\r\n   * Update failover statistics\r\n   * \r\n   * @param failoverEvent - Failover event\r\n   */\r\n  private updateFailoverStats(failoverEvent: FailoverEvent): void {\r\n    this.failoverStats.totalFailovers++;\r\n    \r\n    if (failoverEvent.success) {\r\n      this.failoverStats.successfulFailovers++;\r\n    } else {\r\n      this.failedFailovers++;\r\n    }\r\n\r\n    // Update timing statistics\r\n    if (failoverEvent.success) {\r\n      if (failoverEvent.duration > this.failoverStats.longestFailoverTime) {\r\n        this.failoverStats.longestFailoverTime = failoverEvent.duration;\r\n      }\r\n      \r\n      if (failoverEvent.duration < this.failoverStats.shortestFailoverTime) {\r\n        this.failoverStats.shortestFailoverTime = failoverEvent.duration;\r\n      }\r\n\r\n      // Calculate average\r\n      const totalTime = this.failoverHistory\r\n        .filter(e => e.success)\r\n        .reduce((sum, e) => sum + e.duration, 0);\r\n      this.failoverStats.averageFailoverTime = totalTime / this.failoverStats.successfulFailovers;\r\n    }\r\n\r\n    // Update per-connection statistics\r\n    const connectionFailovers = this.failoverStats.failoversByConnection.get(failoverEvent.primaryConnectionId) || 0;\r\n    this.failoverStats.failoversByConnection.set(failoverEvent.primaryConnectionId, connectionFailovers + 1);\r\n\r\n    this.failoverStats.lastFailoverEvent = failoverEvent;\r\n  }\r\n\r\n  /**\r\n   * Update backup statistics\r\n   */\r\n  private updateBackupStats(): void {\r\n    this.failoverStats.currentBackupCount = this.backupTunnels.size;\r\n    \r\n    const activeBackups = Array.from(this.backupTunnels.values()).filter(b => b.isActive).length;\r\n    this.failoverStats.backupUtilization = this.backupTunnels.size > 0 \r\n      ? (activeBackups / this.backupTunnels.size) * 100 \r\n      : 0;\r\n  }\r\n\r\n  /**\r\n   * Store failover event in history\r\n   * \r\n   * @param failoverEvent - Failover event to store\r\n   */\r\n  private storeFailoverEvent(failoverEvent: FailoverEvent): void {\r\n    this.failoverHistory.push(failoverEvent);\r\n\r\n    // Limit history size\r\n    const maxHistorySize = 1000;\r\n    if (this.failoverHistory.length > maxHistorySize) {\r\n      this.failoverHistory.splice(0, this.failoverHistory.length - maxHistorySize);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cleanup failover manager resources\r\n   */\r\n  async cleanup(): Promise<void> {\r\n    await this.disable();\r\n    this.failoverHistory = [];\r\n    this.primaryTunnels.clear();\r\n    this.failoverInProgress.clear();\r\n    this.logger.info('Tunnel failover manager cleanup completed');\r\n  }\r\n}\r\n"],"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","ignoreList":[]}