5f837b578a49fa2e42a9c8b77721e644
"use strict";

/**
 * Automated Security Testing Suite
 *
 * Orchestrates comprehensive security testing including penetration testing,
 * vulnerability scanning, and compliance validation for the AI crypto trading agent.
 *
 * Features:
 * - Automated test scheduling and execution
 * - Continuous security monitoring
 * - Integration with CI/CD pipelines
 * - Comprehensive reporting and alerting
 */
/* istanbul ignore next */
function cov_g4w5h3veu() {
  var path = "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\automated-security-testing.ts";
  var hash = "afa804aee78c2382b9efffc7512cd0ec47609118";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\automated-security-testing.ts",
    statementMap: {
      "0": {
        start: {
          line: 14,
          column: 22
        },
        end: {
          line: 24,
          column: 3
        }
      },
      "1": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 15,
          column: 33
        }
      },
      "2": {
        start: {
          line: 15,
          column: 26
        },
        end: {
          line: 15,
          column: 33
        }
      },
      "3": {
        start: {
          line: 16,
          column: 15
        },
        end: {
          line: 16,
          column: 52
        }
      },
      "4": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 19,
          column: 5
        }
      },
      "5": {
        start: {
          line: 18,
          column: 6
        },
        end: {
          line: 18,
          column: 68
        }
      },
      "6": {
        start: {
          line: 18,
          column: 51
        },
        end: {
          line: 18,
          column: 63
        }
      },
      "7": {
        start: {
          line: 20,
          column: 4
        },
        end: {
          line: 20,
          column: 39
        }
      },
      "8": {
        start: {
          line: 22,
          column: 4
        },
        end: {
          line: 22,
          column: 33
        }
      },
      "9": {
        start: {
          line: 22,
          column: 26
        },
        end: {
          line: 22,
          column: 33
        }
      },
      "10": {
        start: {
          line: 23,
          column: 4
        },
        end: {
          line: 23,
          column: 17
        }
      },
      "11": {
        start: {
          line: 25,
          column: 25
        },
        end: {
          line: 29,
          column: 2
        }
      },
      "12": {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 26,
          column: 72
        }
      },
      "13": {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 28,
          column: 21
        }
      },
      "14": {
        start: {
          line: 30,
          column: 19
        },
        end: {
          line: 46,
          column: 4
        }
      },
      "15": {
        start: {
          line: 31,
          column: 18
        },
        end: {
          line: 38,
          column: 5
        }
      },
      "16": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 36,
          column: 10
        }
      },
      "17": {
        start: {
          line: 33,
          column: 21
        },
        end: {
          line: 33,
          column: 23
        }
      },
      "18": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 34,
          column: 95
        }
      },
      "19": {
        start: {
          line: 34,
          column: 29
        },
        end: {
          line: 34,
          column: 95
        }
      },
      "20": {
        start: {
          line: 34,
          column: 77
        },
        end: {
          line: 34,
          column: 95
        }
      },
      "21": {
        start: {
          line: 35,
          column: 12
        },
        end: {
          line: 35,
          column: 22
        }
      },
      "22": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 26
        }
      },
      "23": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 45,
          column: 6
        }
      },
      "24": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 46
        }
      },
      "25": {
        start: {
          line: 40,
          column: 35
        },
        end: {
          line: 40,
          column: 46
        }
      },
      "26": {
        start: {
          line: 41,
          column: 21
        },
        end: {
          line: 41,
          column: 23
        }
      },
      "27": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 42,
          column: 137
        }
      },
      "28": {
        start: {
          line: 42,
          column: 25
        },
        end: {
          line: 42,
          column: 137
        }
      },
      "29": {
        start: {
          line: 42,
          column: 38
        },
        end: {
          line: 42,
          column: 50
        }
      },
      "30": {
        start: {
          line: 42,
          column: 56
        },
        end: {
          line: 42,
          column: 57
        }
      },
      "31": {
        start: {
          line: 42,
          column: 78
        },
        end: {
          line: 42,
          column: 137
        }
      },
      "32": {
        start: {
          line: 42,
          column: 102
        },
        end: {
          line: 42,
          column: 137
        }
      },
      "33": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 43,
          column: 40
        }
      },
      "34": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 44,
          column: 22
        }
      },
      "35": {
        start: {
          line: 47,
          column: 0
        },
        end: {
          line: 47,
          column: 62
        }
      },
      "36": {
        start: {
          line: 48,
          column: 0
        },
        end: {
          line: 48,
          column: 47
        }
      },
      "37": {
        start: {
          line: 49,
          column: 13
        },
        end: {
          line: 49,
          column: 47
        }
      },
      "38": {
        start: {
          line: 50,
          column: 11
        },
        end: {
          line: 50,
          column: 47
        }
      },
      "39": {
        start: {
          line: 51,
          column: 13
        },
        end: {
          line: 51,
          column: 42
        }
      },
      "40": {
        start: {
          line: 59,
          column: 20
        },
        end: {
          line: 59,
          column: 29
        }
      },
      "41": {
        start: {
          line: 60,
          column: 23
        },
        end: {
          line: 60,
          column: 32
        }
      },
      "42": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 62,
          column: 29
        }
      },
      "43": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 63,
          column: 53
        }
      },
      "44": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 64,
          column: 53
        }
      },
      "45": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 65,
          column: 49
        }
      },
      "46": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 66,
          column: 43
        }
      },
      "47": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 67,
          column: 29
        }
      },
      "48": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 73,
          column: 74
        }
      },
      "49": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 89,
          column: 9
        }
      },
      "50": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 76,
          column: 47
        }
      },
      "51": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 78,
          column: 47
        }
      },
      "52": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 80,
          column: 51
        }
      },
      "53": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 84,
          column: 15
        }
      },
      "54": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 87,
          column: 98
        }
      },
      "55": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 88,
          column: 24
        }
      },
      "56": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 99,
          column: 9
        }
      },
      "57": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 98,
          column: 13
        }
      },
      "58": {
        start: {
          line: 97,
          column: 16
        },
        end: {
          line: 97,
          column: 58
        }
      },
      "59": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 125,
          column: 9
        }
      },
      "60": {
        start: {
          line: 106,
          column: 25
        },
        end: {
          line: 111,
          column: 14
        }
      },
      "61": {
        start: {
          line: 107,
          column: 16
        },
        end: {
          line: 107,
          column: 58
        }
      },
      "62": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 112,
          column: 54
        }
      },
      "63": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 113,
          column: 25
        }
      },
      "64": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 118,
          column: 15
        }
      },
      "65": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 124,
          column: 15
        }
      },
      "66": {
        start: {
          line: 131,
          column: 28
        },
        end: {
          line: 131,
          column: 91
        }
      },
      "67": {
        start: {
          line: 132,
          column: 26
        },
        end: {
          line: 137,
          column: 9
        }
      },
      "68": {
        start: {
          line: 138,
          column: 8
        },
        end: {
          line: 138,
          column: 58
        }
      },
      "69": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 143,
          column: 11
        }
      },
      "70": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 178,
          column: 9
        }
      },
      "71": {
        start: {
          line: 146,
          column: 27
        },
        end: {
          line: 146,
          column: 83
        }
      },
      "72": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 148,
          column: 43
        }
      },
      "73": {
        start: {
          line: 149,
          column: 12
        },
        end: {
          line: 149,
          column: 43
        }
      },
      "74": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 150,
          column: 38
        }
      },
      "75": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 152,
          column: 42
        }
      },
      "76": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 154,
          column: 61
        }
      },
      "77": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 156,
          column: 69
        }
      },
      "78": {
        start: {
          line: 157,
          column: 12
        },
        end: {
          line: 162,
          column: 15
        }
      },
      "79": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 165,
          column: 43
        }
      },
      "80": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 166,
          column: 40
        }
      },
      "81": {
        start: {
          line: 167,
          column: 12
        },
        end: {
          line: 167,
          column: 85
        }
      },
      "82": {
        start: {
          line: 168,
          column: 12
        },
        end: {
          line: 172,
          column: 15
        }
      },
      "83": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 174,
          column: 65
        }
      },
      "84": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 177,
          column: 54
        }
      },
      "85": {
        start: {
          line: 184,
          column: 28
        },
        end: {
          line: 184,
          column: 95
        }
      },
      "86": {
        start: {
          line: 185,
          column: 26
        },
        end: {
          line: 190,
          column: 9
        }
      },
      "87": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 191,
          column: 58
        }
      },
      "88": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 195,
          column: 11
        }
      },
      "89": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 225,
          column: 9
        }
      },
      "90": {
        start: {
          line: 198,
          column: 27
        },
        end: {
          line: 198,
          column: 83
        }
      },
      "91": {
        start: {
          line: 199,
          column: 12
        },
        end: {
          line: 199,
          column: 43
        }
      },
      "92": {
        start: {
          line: 200,
          column: 12
        },
        end: {
          line: 200,
          column: 43
        }
      },
      "93": {
        start: {
          line: 201,
          column: 12
        },
        end: {
          line: 201,
          column: 38
        }
      },
      "94": {
        start: {
          line: 203,
          column: 12
        },
        end: {
          line: 203,
          column: 61
        }
      },
      "95": {
        start: {
          line: 205,
          column: 12
        },
        end: {
          line: 205,
          column: 69
        }
      },
      "96": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 210,
          column: 15
        }
      },
      "97": {
        start: {
          line: 211,
          column: 12
        },
        end: {
          line: 211,
          column: 26
        }
      },
      "98": {
        start: {
          line: 214,
          column: 12
        },
        end: {
          line: 214,
          column: 43
        }
      },
      "99": {
        start: {
          line: 215,
          column: 12
        },
        end: {
          line: 215,
          column: 40
        }
      },
      "100": {
        start: {
          line: 216,
          column: 12
        },
        end: {
          line: 216,
          column: 85
        }
      },
      "101": {
        start: {
          line: 217,
          column: 12
        },
        end: {
          line: 220,
          column: 15
        }
      },
      "102": {
        start: {
          line: 221,
          column: 12
        },
        end: {
          line: 221,
          column: 24
        }
      },
      "103": {
        start: {
          line: 224,
          column: 12
        },
        end: {
          line: 224,
          column: 54
        }
      },
      "104": {
        start: {
          line: 232,
          column: 8
        },
        end: {
          line: 234,
          column: 9
        }
      },
      "105": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 233,
          column: 72
        }
      },
      "106": {
        start: {
          line: 236,
          column: 8
        },
        end: {
          line: 238,
          column: 9
        }
      },
      "107": {
        start: {
          line: 237,
          column: 12
        },
        end: {
          line: 237,
          column: 68
        }
      },
      "108": {
        start: {
          line: 240,
          column: 8
        },
        end: {
          line: 242,
          column: 9
        }
      },
      "109": {
        start: {
          line: 241,
          column: 12
        },
        end: {
          line: 241,
          column: 61
        }
      },
      "110": {
        start: {
          line: 244,
          column: 8
        },
        end: {
          line: 244,
          column: 49
        }
      },
      "111": {
        start: {
          line: 246,
          column: 8
        },
        end: {
          line: 248,
          column: 9
        }
      },
      "112": {
        start: {
          line: 247,
          column: 12
        },
        end: {
          line: 247,
          column: 65
        }
      },
      "113": {
        start: {
          line: 254,
          column: 8
        },
        end: {
          line: 258,
          column: 11
        }
      },
      "114": {
        start: {
          line: 260,
          column: 25
        },
        end: {
          line: 266,
          column: 10
        }
      },
      "115": {
        start: {
          line: 265,
          column: 57
        },
        end: {
          line: 265,
          column: 82
        }
      },
      "116": {
        start: {
          line: 268,
          column: 8
        },
        end: {
          line: 280,
          column: 9
        }
      },
      "117": {
        start: {
          line: 269,
          column: 12
        },
        end: {
          line: 279,
          column: 15
        }
      },
      "118": {
        start: {
          line: 286,
          column: 8
        },
        end: {
          line: 290,
          column: 11
        }
      },
      "119": {
        start: {
          line: 292,
          column: 8
        },
        end: {
          line: 303,
          column: 9
        }
      },
      "120": {
        start: {
          line: 293,
          column: 12
        },
        end: {
          line: 302,
          column: 15
        }
      },
      "121": {
        start: {
          line: 309,
          column: 8
        },
        end: {
          line: 341,
          column: 9
        }
      },
      "122": {
        start: {
          line: 310,
          column: 31
        },
        end: {
          line: 324,
          column: 13
        }
      },
      "123": {
        start: {
          line: 325,
          column: 29
        },
        end: {
          line: 325,
          column: 90
        }
      },
      "124": {
        start: {
          line: 326,
          column: 29
        },
        end: {
          line: 326,
          column: 93
        }
      },
      "125": {
        start: {
          line: 327,
          column: 12
        },
        end: {
          line: 327,
          column: 78
        }
      },
      "126": {
        start: {
          line: 328,
          column: 12
        },
        end: {
          line: 332,
          column: 15
        }
      },
      "127": {
        start: {
          line: 334,
          column: 12
        },
        end: {
          line: 334,
          column: 43
        }
      },
      "128": {
        start: {
          line: 337,
          column: 12
        },
        end: {
          line: 340,
          column: 15
        }
      },
      "129": {
        start: {
          line: 347,
          column: 8
        },
        end: {
          line: 368,
          column: 9
        }
      },
      "130": {
        start: {
          line: 348,
          column: 33
        },
        end: {
          line: 348,
          column: 76
        }
      },
      "131": {
        start: {
          line: 349,
          column: 12
        },
        end: {
          line: 358,
          column: 15
        }
      },
      "132": {
        start: {
          line: 359,
          column: 12
        },
        end: {
          line: 361,
          column: 15
        }
      },
      "133": {
        start: {
          line: 364,
          column: 12
        },
        end: {
          line: 367,
          column: 15
        }
      },
      "134": {
        start: {
          line: 374,
          column: 31
        },
        end: {
          line: 379,
          column: 9
        }
      },
      "135": {
        start: {
          line: 380,
          column: 8
        },
        end: {
          line: 455,
          column: 6
        }
      },
      "136": {
        start: {
          line: 434,
          column: 25
        },
        end: {
          line: 434,
          column: 75
        }
      },
      "137": {
        start: {
          line: 436,
          column: 22
        },
        end: {
          line: 443,
          column: 11
        }
      },
      "138": {
        start: {
          line: 448,
          column: 59
        },
        end: {
          line: 448,
          column: 74
        }
      },
      "139": {
        start: {
          line: 461,
          column: 8
        },
        end: {
          line: 481,
          column: 9
        }
      },
      "140": {
        start: {
          line: 462,
          column: 12
        },
        end: {
          line: 473,
          column: 15
        }
      },
      "141": {
        start: {
          line: 476,
          column: 12
        },
        end: {
          line: 480,
          column: 15
        }
      },
      "142": {
        start: {
          line: 487,
          column: 8
        },
        end: {
          line: 500,
          column: 9
        }
      },
      "143": {
        start: {
          line: 488,
          column: 12
        },
        end: {
          line: 496,
          column: 15
        }
      },
      "144": {
        start: {
          line: 499,
          column: 12
        },
        end: {
          line: 499,
          column: 78
        }
      },
      "145": {
        start: {
          line: 506,
          column: 8
        },
        end: {
          line: 508,
          column: 9
        }
      },
      "146": {
        start: {
          line: 507,
          column: 12
        },
        end: {
          line: 507,
          column: 19
        }
      },
      "147": {
        start: {
          line: 509,
          column: 8
        },
        end: {
          line: 535,
          column: 9
        }
      },
      "148": {
        start: {
          line: 510,
          column: 28
        },
        end: {
          line: 523,
          column: 13
        }
      },
      "149": {
        start: {
          line: 525,
          column: 12
        },
        end: {
          line: 528,
          column: 15
        }
      },
      "150": {
        start: {
          line: 531,
          column: 12
        },
        end: {
          line: 534,
          column: 15
        }
      },
      "151": {
        start: {
          line: 543,
          column: 8
        },
        end: {
          line: 543,
          column: 67
        }
      },
      "152": {
        start: {
          line: 549,
          column: 8
        },
        end: {
          line: 558,
          column: 9
        }
      },
      "153": {
        start: {
          line: 550,
          column: 12
        },
        end: {
          line: 550,
          column: 93
        }
      },
      "154": {
        start: {
          line: 553,
          column: 12
        },
        end: {
          line: 556,
          column: 15
        }
      },
      "155": {
        start: {
          line: 557,
          column: 12
        },
        end: {
          line: 557,
          column: 24
        }
      },
      "156": {
        start: {
          line: 564,
          column: 8
        },
        end: {
          line: 581,
          column: 9
        }
      },
      "157": {
        start: {
          line: 565,
          column: 26
        },
        end: {
          line: 565,
          column: 87
        }
      },
      "158": {
        start: {
          line: 566,
          column: 31
        },
        end: {
          line: 566,
          column: 41
        }
      },
      "159": {
        start: {
          line: 567,
          column: 12
        },
        end: {
          line: 567,
          column: 97
        }
      },
      "160": {
        start: {
          line: 568,
          column: 12
        },
        end: {
          line: 577,
          column: 13
        }
      },
      "161": {
        start: {
          line: 569,
          column: 16
        },
        end: {
          line: 576,
          column: 17
        }
      },
      "162": {
        start: {
          line: 570,
          column: 37
        },
        end: {
          line: 570,
          column: 97
        }
      },
      "163": {
        start: {
          line: 571,
          column: 34
        },
        end: {
          line: 571,
          column: 57
        }
      },
      "164": {
        start: {
          line: 572,
          column: 20
        },
        end: {
          line: 575,
          column: 21
        }
      },
      "165": {
        start: {
          line: 573,
          column: 24
        },
        end: {
          line: 573,
          column: 50
        }
      },
      "166": {
        start: {
          line: 574,
          column: 24
        },
        end: {
          line: 574,
          column: 82
        }
      },
      "167": {
        start: {
          line: 580,
          column: 12
        },
        end: {
          line: 580,
          column: 74
        }
      },
      "168": {
        start: {
          line: 587,
          column: 8
        },
        end: {
          line: 587,
          column: 58
        }
      },
      "169": {
        start: {
          line: 593,
          column: 8
        },
        end: {
          line: 593,
          column: 37
        }
      },
      "170": {
        start: {
          line: 599,
          column: 8
        },
        end: {
          line: 599,
          column: 45
        }
      },
      "171": {
        start: {
          line: 600,
          column: 8
        },
        end: {
          line: 602,
          column: 9
        }
      },
      "172": {
        start: {
          line: 601,
          column: 12
        },
        end: {
          line: 601,
          column: 54
        }
      },
      "173": {
        start: {
          line: 603,
          column: 8
        },
        end: {
          line: 606,
          column: 11
        }
      },
      "174": {
        start: {
          line: 612,
          column: 21
        },
        end: {
          line: 612,
          column: 55
        }
      },
      "175": {
        start: {
          line: 613,
          column: 8
        },
        end: {
          line: 616,
          column: 9
        }
      },
      "176": {
        start: {
          line: 614,
          column: 12
        },
        end: {
          line: 614,
          column: 24
        }
      },
      "177": {
        start: {
          line: 615,
          column: 12
        },
        end: {
          line: 615,
          column: 50
        }
      },
      "178": {
        start: {
          line: 617,
          column: 8
        },
        end: {
          line: 617,
          column: 87
        }
      },
      "179": {
        start: {
          line: 617,
          column: 66
        },
        end: {
          line: 617,
          column: 85
        }
      },
      "180": {
        start: {
          line: 618,
          column: 8
        },
        end: {
          line: 618,
          column: 75
        }
      },
      "181": {
        start: {
          line: 624,
          column: 8
        },
        end: {
          line: 627,
          column: 9
        }
      },
      "182": {
        start: {
          line: 625,
          column: 12
        },
        end: {
          line: 625,
          column: 24
        }
      },
      "183": {
        start: {
          line: 626,
          column: 12
        },
        end: {
          line: 626,
          column: 71
        }
      },
      "184": {
        start: {
          line: 628,
          column: 8
        },
        end: {
          line: 628,
          column: 35
        }
      },
      "185": {
        start: {
          line: 634,
          column: 8
        },
        end: {
          line: 634,
          column: 75
        }
      },
      "186": {
        start: {
          line: 636,
          column: 8
        },
        end: {
          line: 636,
          column: 43
        }
      },
      "187": {
        start: {
          line: 638,
          column: 8
        },
        end: {
          line: 641,
          column: 9
        }
      },
      "188": {
        start: {
          line: 639,
          column: 12
        },
        end: {
          line: 639,
          column: 43
        }
      },
      "189": {
        start: {
          line: 640,
          column: 12
        },
        end: {
          line: 640,
          column: 43
        }
      },
      "190": {
        start: {
          line: 642,
          column: 8
        },
        end: {
          line: 642,
          column: 38
        }
      },
      "191": {
        start: {
          line: 643,
          column: 8
        },
        end: {
          line: 643,
          column: 79
        }
      },
      "192": {
        start: {
          line: 646,
          column: 0
        },
        end: {
          line: 646,
          column: 70
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 14,
            column: 74
          },
          end: {
            line: 14,
            column: 75
          }
        },
        loc: {
          start: {
            line: 14,
            column: 96
          },
          end: {
            line: 21,
            column: 1
          }
        },
        line: 14
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 18,
            column: 38
          },
          end: {
            line: 18,
            column: 39
          }
        },
        loc: {
          start: {
            line: 18,
            column: 49
          },
          end: {
            line: 18,
            column: 65
          }
        },
        line: 18
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 21,
            column: 6
          },
          end: {
            line: 21,
            column: 7
          }
        },
        loc: {
          start: {
            line: 21,
            column: 28
          },
          end: {
            line: 24,
            column: 1
          }
        },
        line: 21
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 25,
            column: 80
          },
          end: {
            line: 25,
            column: 81
          }
        },
        loc: {
          start: {
            line: 25,
            column: 95
          },
          end: {
            line: 27,
            column: 1
          }
        },
        line: 25
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 27,
            column: 5
          },
          end: {
            line: 27,
            column: 6
          }
        },
        loc: {
          start: {
            line: 27,
            column: 20
          },
          end: {
            line: 29,
            column: 1
          }
        },
        line: 27
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 30,
            column: 51
          },
          end: {
            line: 30,
            column: 52
          }
        },
        loc: {
          start: {
            line: 30,
            column: 63
          },
          end: {
            line: 46,
            column: 1
          }
        },
        line: 30
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 31,
            column: 18
          },
          end: {
            line: 31,
            column: 19
          }
        },
        loc: {
          start: {
            line: 31,
            column: 30
          },
          end: {
            line: 38,
            column: 5
          }
        },
        line: 31
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 32,
            column: 48
          },
          end: {
            line: 32,
            column: 49
          }
        },
        loc: {
          start: {
            line: 32,
            column: 61
          },
          end: {
            line: 36,
            column: 9
          }
        },
        line: 32
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 39,
            column: 11
          },
          end: {
            line: 39,
            column: 12
          }
        },
        loc: {
          start: {
            line: 39,
            column: 26
          },
          end: {
            line: 45,
            column: 5
          }
        },
        line: 39
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 61,
            column: 4
          },
          end: {
            line: 61,
            column: 5
          }
        },
        loc: {
          start: {
            line: 61,
            column: 105
          },
          end: {
            line: 68,
            column: 5
          }
        },
        line: 61
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 72,
            column: 4
          },
          end: {
            line: 72,
            column: 5
          }
        },
        loc: {
          start: {
            line: 72,
            column: 23
          },
          end: {
            line: 90,
            column: 5
          }
        },
        line: 72
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 94,
            column: 4
          },
          end: {
            line: 94,
            column: 5
          }
        },
        loc: {
          start: {
            line: 94,
            column: 34
          },
          end: {
            line: 100,
            column: 5
          }
        },
        line: 94
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 104,
            column: 4
          },
          end: {
            line: 104,
            column: 5
          }
        },
        loc: {
          start: {
            line: 104,
            column: 41
          },
          end: {
            line: 126,
            column: 5
          }
        },
        line: 104
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 106,
            column: 64
          },
          end: {
            line: 106,
            column: 65
          }
        },
        loc: {
          start: {
            line: 106,
            column: 76
          },
          end: {
            line: 108,
            column: 13
          }
        },
        line: 106
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 130,
            column: 4
          },
          end: {
            line: 130,
            column: 5
          }
        },
        loc: {
          start: {
            line: 130,
            column: 41
          },
          end: {
            line: 179,
            column: 5
          }
        },
        line: 130
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 183,
            column: 4
          },
          end: {
            line: 183,
            column: 5
          }
        },
        loc: {
          start: {
            line: 183,
            column: 50
          },
          end: {
            line: 226,
            column: 5
          }
        },
        line: 183
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 230,
            column: 4
          },
          end: {
            line: 230,
            column: 5
          }
        },
        loc: {
          start: {
            line: 230,
            column: 56
          },
          end: {
            line: 249,
            column: 5
          }
        },
        line: 230
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 253,
            column: 4
          },
          end: {
            line: 253,
            column: 5
          }
        },
        loc: {
          start: {
            line: 253,
            column: 59
          },
          end: {
            line: 281,
            column: 5
          }
        },
        line: 253
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 265,
            column: 52
          },
          end: {
            line: 265,
            column: 53
          }
        },
        loc: {
          start: {
            line: 265,
            column: 57
          },
          end: {
            line: 265,
            column: 82
          }
        },
        line: 265
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 285,
            column: 4
          },
          end: {
            line: 285,
            column: 5
          }
        },
        loc: {
          start: {
            line: 285,
            column: 55
          },
          end: {
            line: 304,
            column: 5
          }
        },
        line: 285
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 308,
            column: 4
          },
          end: {
            line: 308,
            column: 5
          }
        },
        loc: {
          start: {
            line: 308,
            column: 48
          },
          end: {
            line: 342,
            column: 5
          }
        },
        line: 308
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 346,
            column: 4
          },
          end: {
            line: 346,
            column: 5
          }
        },
        loc: {
          start: {
            line: 346,
            column: 48
          },
          end: {
            line: 369,
            column: 5
          }
        },
        line: 346
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 373,
            column: 4
          },
          end: {
            line: 373,
            column: 5
          }
        },
        loc: {
          start: {
            line: 373,
            column: 43
          },
          end: {
            line: 456,
            column: 5
          }
        },
        line: 373
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 434,
            column: 20
          },
          end: {
            line: 434,
            column: 21
          }
        },
        loc: {
          start: {
            line: 434,
            column: 25
          },
          end: {
            line: 434,
            column: 75
          }
        },
        line: 434
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 436,
            column: 17
          },
          end: {
            line: 436,
            column: 18
          }
        },
        loc: {
          start: {
            line: 436,
            column: 22
          },
          end: {
            line: 443,
            column: 11
          }
        },
        line: 436
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 448,
            column: 54
          },
          end: {
            line: 448,
            column: 55
          }
        },
        loc: {
          start: {
            line: 448,
            column: 59
          },
          end: {
            line: 448,
            column: 74
          }
        },
        line: 448
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 460,
            column: 4
          },
          end: {
            line: 460,
            column: 5
          }
        },
        loc: {
          start: {
            line: 460,
            column: 52
          },
          end: {
            line: 482,
            column: 5
          }
        },
        line: 460
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 486,
            column: 4
          },
          end: {
            line: 486,
            column: 5
          }
        },
        loc: {
          start: {
            line: 486,
            column: 40
          },
          end: {
            line: 501,
            column: 5
          }
        },
        line: 486
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 505,
            column: 4
          },
          end: {
            line: 505,
            column: 5
          }
        },
        loc: {
          start: {
            line: 505,
            column: 52
          },
          end: {
            line: 536,
            column: 5
          }
        },
        line: 505
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 540,
            column: 4
          },
          end: {
            line: 540,
            column: 5
          }
        },
        loc: {
          start: {
            line: 540,
            column: 38
          },
          end: {
            line: 544,
            column: 5
          }
        },
        line: 540
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 548,
            column: 4
          },
          end: {
            line: 548,
            column: 5
          }
        },
        loc: {
          start: {
            line: 548,
            column: 34
          },
          end: {
            line: 559,
            column: 5
          }
        },
        line: 548
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 563,
            column: 4
          },
          end: {
            line: 563,
            column: 5
          }
        },
        loc: {
          start: {
            line: 563,
            column: 30
          },
          end: {
            line: 582,
            column: 5
          }
        },
        line: 563
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 586,
            column: 4
          },
          end: {
            line: 586,
            column: 5
          }
        },
        loc: {
          start: {
            line: 586,
            column: 26
          },
          end: {
            line: 588,
            column: 5
          }
        },
        line: 586
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 592,
            column: 4
          },
          end: {
            line: 592,
            column: 5
          }
        },
        loc: {
          start: {
            line: 592,
            column: 24
          },
          end: {
            line: 594,
            column: 5
          }
        },
        line: 592
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 598,
            column: 4
          },
          end: {
            line: 598,
            column: 5
          }
        },
        loc: {
          start: {
            line: 598,
            column: 44
          },
          end: {
            line: 607,
            column: 5
          }
        },
        line: 598
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 611,
            column: 4
          },
          end: {
            line: 611,
            column: 5
          }
        },
        loc: {
          start: {
            line: 611,
            column: 49
          },
          end: {
            line: 619,
            column: 5
          }
        },
        line: 611
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 617,
            column: 61
          },
          end: {
            line: 617,
            column: 62
          }
        },
        loc: {
          start: {
            line: 617,
            column: 66
          },
          end: {
            line: 617,
            column: 85
          }
        },
        line: 617
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 623,
            column: 4
          },
          end: {
            line: 623,
            column: 5
          }
        },
        loc: {
          start: {
            line: 623,
            column: 34
          },
          end: {
            line: 629,
            column: 5
          }
        },
        line: 623
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 633,
            column: 4
          },
          end: {
            line: 633,
            column: 5
          }
        },
        loc: {
          start: {
            line: 633,
            column: 21
          },
          end: {
            line: 644,
            column: 5
          }
        },
        line: 633
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 14,
            column: 22
          },
          end: {
            line: 24,
            column: 3
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 14,
            column: 23
          },
          end: {
            line: 14,
            column: 27
          }
        }, {
          start: {
            line: 14,
            column: 31
          },
          end: {
            line: 14,
            column: 51
          }
        }, {
          start: {
            line: 14,
            column: 57
          },
          end: {
            line: 24,
            column: 2
          }
        }],
        line: 14
      },
      "1": {
        loc: {
          start: {
            line: 14,
            column: 57
          },
          end: {
            line: 24,
            column: 2
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 14,
            column: 74
          },
          end: {
            line: 21,
            column: 1
          }
        }, {
          start: {
            line: 21,
            column: 6
          },
          end: {
            line: 24,
            column: 1
          }
        }],
        line: 14
      },
      "2": {
        loc: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 15
      },
      "3": {
        loc: {
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 17
      },
      "4": {
        loc: {
          start: {
            line: 17,
            column: 8
          },
          end: {
            line: 17,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 17,
            column: 8
          },
          end: {
            line: 17,
            column: 13
          }
        }, {
          start: {
            line: 17,
            column: 18
          },
          end: {
            line: 17,
            column: 84
          }
        }],
        line: 17
      },
      "5": {
        loc: {
          start: {
            line: 17,
            column: 18
          },
          end: {
            line: 17,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 17,
            column: 34
          },
          end: {
            line: 17,
            column: 47
          }
        }, {
          start: {
            line: 17,
            column: 50
          },
          end: {
            line: 17,
            column: 84
          }
        }],
        line: 17
      },
      "6": {
        loc: {
          start: {
            line: 17,
            column: 50
          },
          end: {
            line: 17,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 17,
            column: 50
          },
          end: {
            line: 17,
            column: 63
          }
        }, {
          start: {
            line: 17,
            column: 67
          },
          end: {
            line: 17,
            column: 84
          }
        }],
        line: 17
      },
      "7": {
        loc: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "8": {
        loc: {
          start: {
            line: 25,
            column: 25
          },
          end: {
            line: 29,
            column: 2
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 25,
            column: 26
          },
          end: {
            line: 25,
            column: 30
          }
        }, {
          start: {
            line: 25,
            column: 34
          },
          end: {
            line: 25,
            column: 57
          }
        }, {
          start: {
            line: 25,
            column: 63
          },
          end: {
            line: 29,
            column: 1
          }
        }],
        line: 25
      },
      "9": {
        loc: {
          start: {
            line: 25,
            column: 63
          },
          end: {
            line: 29,
            column: 1
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 25,
            column: 80
          },
          end: {
            line: 27,
            column: 1
          }
        }, {
          start: {
            line: 27,
            column: 5
          },
          end: {
            line: 29,
            column: 1
          }
        }],
        line: 25
      },
      "10": {
        loc: {
          start: {
            line: 30,
            column: 19
          },
          end: {
            line: 46,
            column: 4
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 30,
            column: 20
          },
          end: {
            line: 30,
            column: 24
          }
        }, {
          start: {
            line: 30,
            column: 28
          },
          end: {
            line: 30,
            column: 45
          }
        }, {
          start: {
            line: 30,
            column: 50
          },
          end: {
            line: 46,
            column: 4
          }
        }],
        line: 30
      },
      "11": {
        loc: {
          start: {
            line: 32,
            column: 18
          },
          end: {
            line: 36,
            column: 9
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 32,
            column: 18
          },
          end: {
            line: 32,
            column: 44
          }
        }, {
          start: {
            line: 32,
            column: 48
          },
          end: {
            line: 36,
            column: 9
          }
        }],
        line: 32
      },
      "12": {
        loc: {
          start: {
            line: 34,
            column: 29
          },
          end: {
            line: 34,
            column: 95
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 34,
            column: 29
          },
          end: {
            line: 34,
            column: 95
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 34
      },
      "13": {
        loc: {
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 40,
            column: 46
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 40,
            column: 46
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 40
      },
      "14": {
        loc: {
          start: {
            line: 40,
            column: 12
          },
          end: {
            line: 40,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 40,
            column: 12
          },
          end: {
            line: 40,
            column: 15
          }
        }, {
          start: {
            line: 40,
            column: 19
          },
          end: {
            line: 40,
            column: 33
          }
        }],
        line: 40
      },
      "15": {
        loc: {
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 42,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 42,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 42
      },
      "16": {
        loc: {
          start: {
            line: 42,
            column: 78
          },
          end: {
            line: 42,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 78
          },
          end: {
            line: 42,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 42
      },
      "17": {
        loc: {
          start: {
            line: 96,
            column: 12
          },
          end: {
            line: 98,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 96,
            column: 12
          },
          end: {
            line: 98,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 96
      },
      "18": {
        loc: {
          start: {
            line: 167,
            column: 30
          },
          end: {
            line: 167,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 167,
            column: 55
          },
          end: {
            line: 167,
            column: 68
          }
        }, {
          start: {
            line: 167,
            column: 71
          },
          end: {
            line: 167,
            column: 84
          }
        }],
        line: 167
      },
      "19": {
        loc: {
          start: {
            line: 194,
            column: 23
          },
          end: {
            line: 194,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 194,
            column: 23
          },
          end: {
            line: 194,
            column: 32
          }
        }, {
          start: {
            line: 194,
            column: 36
          },
          end: {
            line: 194,
            column: 41
          }
        }],
        line: 194
      },
      "20": {
        loc: {
          start: {
            line: 216,
            column: 30
          },
          end: {
            line: 216,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 216,
            column: 55
          },
          end: {
            line: 216,
            column: 68
          }
        }, {
          start: {
            line: 216,
            column: 71
          },
          end: {
            line: 216,
            column: 84
          }
        }],
        line: 216
      },
      "21": {
        loc: {
          start: {
            line: 232,
            column: 8
          },
          end: {
            line: 234,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 232,
            column: 8
          },
          end: {
            line: 234,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 232
      },
      "22": {
        loc: {
          start: {
            line: 236,
            column: 8
          },
          end: {
            line: 238,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 236,
            column: 8
          },
          end: {
            line: 238,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 236
      },
      "23": {
        loc: {
          start: {
            line: 240,
            column: 8
          },
          end: {
            line: 242,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 240,
            column: 8
          },
          end: {
            line: 242,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 240
      },
      "24": {
        loc: {
          start: {
            line: 246,
            column: 8
          },
          end: {
            line: 248,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 246,
            column: 8
          },
          end: {
            line: 248,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 246
      },
      "25": {
        loc: {
          start: {
            line: 268,
            column: 8
          },
          end: {
            line: 280,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 268,
            column: 8
          },
          end: {
            line: 280,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 268
      },
      "26": {
        loc: {
          start: {
            line: 292,
            column: 8
          },
          end: {
            line: 303,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 292,
            column: 8
          },
          end: {
            line: 303,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 292
      },
      "27": {
        loc: {
          start: {
            line: 434,
            column: 25
          },
          end: {
            line: 434,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 434,
            column: 25
          },
          end: {
            line: 434,
            column: 50
          }
        }, {
          start: {
            line: 434,
            column: 54
          },
          end: {
            line: 434,
            column: 75
          }
        }],
        line: 434
      },
      "28": {
        loc: {
          start: {
            line: 506,
            column: 8
          },
          end: {
            line: 508,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 506,
            column: 8
          },
          end: {
            line: 508,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 506
      },
      "29": {
        loc: {
          start: {
            line: 569,
            column: 16
          },
          end: {
            line: 576,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 569,
            column: 16
          },
          end: {
            line: 576,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 569
      },
      "30": {
        loc: {
          start: {
            line: 572,
            column: 20
          },
          end: {
            line: 575,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 572,
            column: 20
          },
          end: {
            line: 575,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 572
      },
      "31": {
        loc: {
          start: {
            line: 600,
            column: 8
          },
          end: {
            line: 602,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 600,
            column: 8
          },
          end: {
            line: 602,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 600
      },
      "32": {
        loc: {
          start: {
            line: 613,
            column: 8
          },
          end: {
            line: 616,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 613,
            column: 8
          },
          end: {
            line: 616,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 613
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0, 0],
      "9": [0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\automated-security-testing.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\automated-security-testing.ts"],
      sourcesContent: ["/**\r\n * Automated Security Testing Suite\r\n * \r\n * Orchestrates comprehensive security testing including penetration testing,\r\n * vulnerability scanning, and compliance validation for the AI crypto trading agent.\r\n * \r\n * Features:\r\n * - Automated test scheduling and execution\r\n * - Continuous security monitoring\r\n * - Integration with CI/CD pipelines\r\n * - Comprehensive reporting and alerting\r\n */\r\n\r\nimport { Logger } from '../core/logging/logger';\r\nimport { PenetrationTestingService, VulnerabilityReport, PenetrationTestConfig } from './penetration-testing-service';\r\nimport { SecurityMonitoringService } from './security-monitoring-service';\r\nimport { IncidentResponseService } from './incident-response-service';\r\nimport { NotificationService } from '../core/notifications/notification-service';\r\nimport * as cron from 'node-cron';\r\nimport * as fs from 'fs/promises';\r\nimport * as path from 'path';\r\n\r\nexport interface SecurityTestSchedule {\r\n  id: string;\r\n  name: string;\r\n  cronExpression: string;\r\n  testTypes: string[];\r\n  enabled: boolean;\r\n  lastRun?: Date;\r\n  nextRun?: Date;\r\n}\r\n\r\nexport interface SecurityTestSuiteConfig {\r\n  schedules: SecurityTestSchedule[];\r\n  reportingConfig: {\r\n    outputDirectory: string;\r\n    retentionDays: number;\r\n    emailReports: boolean;\r\n    slackIntegration: boolean;\r\n  };\r\n  alertingConfig: {\r\n    criticalThreshold: number;\r\n    highThreshold: number;\r\n    emailAlerts: boolean;\r\n    immediateNotification: boolean;\r\n  };\r\n  integrationConfig: {\r\n    cicdIntegration: boolean;\r\n    webhookUrl?: string;\r\n    apiKey?: string;\r\n  };\r\n}\r\n\r\nexport interface SecurityTestExecution {\r\n  executionId: string;\r\n  scheduleId: string;\r\n  startTime: Date;\r\n  endTime?: Date;\r\n  status: 'RUNNING' | 'COMPLETED' | 'FAILED' | 'CANCELLED';\r\n  report?: VulnerabilityReport;\r\n  error?: string;\r\n}\r\n\r\nexport class AutomatedSecurityTestingSuite {\r\n  private logger: Logger;\r\n  private penetrationTesting: PenetrationTestingService;\r\n  private securityMonitoring: SecurityMonitoringService;\r\n  private incidentResponse: IncidentResponseService;\r\n  private notifications: NotificationService;\r\n  private config: SecurityTestSuiteConfig;\r\n  private scheduledJobs: Map<string, cron.ScheduledTask> = new Map();\r\n  private activeExecutions: Map<string, SecurityTestExecution> = new Map();\r\n\r\n  constructor(\r\n    logger: Logger,\r\n    penetrationTesting: PenetrationTestingService,\r\n    securityMonitoring: SecurityMonitoringService,\r\n    incidentResponse: IncidentResponseService,\r\n    notifications: NotificationService,\r\n    config: SecurityTestSuiteConfig\r\n  ) {\r\n    this.logger = logger;\r\n    this.penetrationTesting = penetrationTesting;\r\n    this.securityMonitoring = securityMonitoring;\r\n    this.incidentResponse = incidentResponse;\r\n    this.notifications = notifications;\r\n    this.config = config;\r\n  }\r\n\r\n  /**\r\n   * Initialize the automated security testing suite\r\n   */\r\n  async initialize(): Promise<void> {\r\n    this.logger.info('Initializing automated security testing suite');\r\n\r\n    try {\r\n      // Create output directory if it doesn't exist\r\n      await this.ensureOutputDirectory();\r\n\r\n      // Schedule all enabled security tests\r\n      await this.scheduleSecurityTests();\r\n\r\n      // Start continuous monitoring\r\n      await this.startContinuousMonitoring();\r\n\r\n      this.logger.info('Automated security testing suite initialized successfully', {\r\n        scheduledTests: this.scheduledJobs.size,\r\n        outputDirectory: this.config.reportingConfig.outputDirectory\r\n      });\r\n    } catch (error) {\r\n      this.logger.error('Failed to initialize automated security testing suite', { error });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Schedule all security tests based on configuration\r\n   */\r\n  private async scheduleSecurityTests(): Promise<void> {\r\n    for (const schedule of this.config.schedules) {\r\n      if (schedule.enabled) {\r\n        await this.scheduleSecurityTest(schedule);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Schedule a specific security test\r\n   */\r\n  private async scheduleSecurityTest(schedule: SecurityTestSchedule): Promise<void> {\r\n    try {\r\n      const task = cron.schedule(schedule.cronExpression, async () => {\r\n        await this.executeScheduledTest(schedule);\r\n      }, {\r\n        scheduled: false,\r\n        timezone: 'UTC'\r\n      });\r\n\r\n      this.scheduledJobs.set(schedule.id, task);\r\n      task.start();\r\n\r\n      this.logger.info(`Scheduled security test: ${schedule.name}`, {\r\n        scheduleId: schedule.id,\r\n        cronExpression: schedule.cronExpression,\r\n        testTypes: schedule.testTypes\r\n      });\r\n    } catch (error) {\r\n      this.logger.error(`Failed to schedule security test: ${schedule.name}`, { \r\n        scheduleId: schedule.id, \r\n        error \r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Execute a scheduled security test\r\n   */\r\n  private async executeScheduledTest(schedule: SecurityTestSchedule): Promise<void> {\r\n    const executionId = `exec_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n    \r\n    const execution: SecurityTestExecution = {\r\n      executionId,\r\n      scheduleId: schedule.id,\r\n      startTime: new Date(),\r\n      status: 'RUNNING'\r\n    };\r\n\r\n    this.activeExecutions.set(executionId, execution);\r\n\r\n    this.logger.info(`Starting scheduled security test execution`, {\r\n      executionId,\r\n      scheduleName: schedule.name,\r\n      testTypes: schedule.testTypes\r\n    });\r\n\r\n    try {\r\n      // Execute the security test suite\r\n      const report = await this.penetrationTesting.executeSecurityTestSuite();\r\n\r\n      // Update execution status\r\n      execution.endTime = new Date();\r\n      execution.status = 'COMPLETED';\r\n      execution.report = report;\r\n\r\n      // Update schedule last run time\r\n      schedule.lastRun = new Date();\r\n\r\n      // Save report to disk\r\n      await this.saveSecurityReport(execution, report);\r\n\r\n      // Process results and send alerts if necessary\r\n      await this.processSecurityTestResults(execution, report);\r\n\r\n      this.logger.info(`Security test execution completed successfully`, {\r\n        executionId,\r\n        totalVulnerabilities: report.totalVulnerabilities,\r\n        criticalCount: report.criticalCount,\r\n        complianceScore: report.complianceScore\r\n      });\r\n\r\n    } catch (error) {\r\n      execution.endTime = new Date();\r\n      execution.status = 'FAILED';\r\n      execution.error = error instanceof Error ? error.message : String(error);\r\n\r\n      this.logger.error(`Security test execution failed`, {\r\n        executionId,\r\n        scheduleName: schedule.name,\r\n        error\r\n      });\r\n\r\n      // Send failure notification\r\n      await this.sendFailureNotification(execution, error);\r\n    } finally {\r\n      this.activeExecutions.delete(executionId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Execute security tests on demand\r\n   */\r\n  async executeSecurityTestsOnDemand(testTypes?: string[]): Promise<VulnerabilityReport> {\r\n    const executionId = `ondemand_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n    \r\n    const execution: SecurityTestExecution = {\r\n      executionId,\r\n      scheduleId: 'on-demand',\r\n      startTime: new Date(),\r\n      status: 'RUNNING'\r\n    };\r\n\r\n    this.activeExecutions.set(executionId, execution);\r\n\r\n    this.logger.info(`Starting on-demand security test execution`, {\r\n      executionId,\r\n      testTypes: testTypes || 'all'\r\n    });\r\n\r\n    try {\r\n      // Execute the security test suite\r\n      const report = await this.penetrationTesting.executeSecurityTestSuite();\r\n\r\n      execution.endTime = new Date();\r\n      execution.status = 'COMPLETED';\r\n      execution.report = report;\r\n\r\n      // Save report to disk\r\n      await this.saveSecurityReport(execution, report);\r\n\r\n      // Process results\r\n      await this.processSecurityTestResults(execution, report);\r\n\r\n      this.logger.info(`On-demand security test execution completed`, {\r\n        executionId,\r\n        totalVulnerabilities: report.totalVulnerabilities,\r\n        criticalCount: report.criticalCount\r\n      });\r\n\r\n      return report;\r\n\r\n    } catch (error) {\r\n      execution.endTime = new Date();\r\n      execution.status = 'FAILED';\r\n      execution.error = error instanceof Error ? error.message : String(error);\r\n\r\n      this.logger.error(`On-demand security test execution failed`, {\r\n        executionId,\r\n        error\r\n      });\r\n\r\n      throw error;\r\n    } finally {\r\n      this.activeExecutions.delete(executionId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Process security test results and trigger appropriate actions\r\n   */\r\n  private async processSecurityTestResults(\r\n    execution: SecurityTestExecution,\r\n    report: VulnerabilityReport\r\n  ): Promise<void> {\r\n    // Check if critical vulnerabilities exceed threshold\r\n    if (report.criticalCount >= this.config.alertingConfig.criticalThreshold) {\r\n      await this.handleCriticalVulnerabilities(execution, report);\r\n    }\r\n\r\n    // Check if high vulnerabilities exceed threshold\r\n    if (report.highCount >= this.config.alertingConfig.highThreshold) {\r\n      await this.handleHighVulnerabilities(execution, report);\r\n    }\r\n\r\n    // Send regular report if configured\r\n    if (this.config.reportingConfig.emailReports) {\r\n      await this.sendSecurityReport(execution, report);\r\n    }\r\n\r\n    // Update security metrics\r\n    await this.updateSecurityMetrics(report);\r\n\r\n    // Trigger CI/CD integration if configured\r\n    if (this.config.integrationConfig.cicdIntegration) {\r\n      await this.triggerCICDIntegration(execution, report);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle critical vulnerabilities\r\n   */\r\n  private async handleCriticalVulnerabilities(\r\n    execution: SecurityTestExecution,\r\n    report: VulnerabilityReport\r\n  ): Promise<void> {\r\n    this.logger.warn(`Critical vulnerabilities detected`, {\r\n      executionId: execution.executionId,\r\n      criticalCount: report.criticalCount,\r\n      threshold: this.config.alertingConfig.criticalThreshold\r\n    });\r\n\r\n    // Create security incident\r\n    const incident = await this.incidentResponse.createIncident({\r\n      type: 'CRITICAL_VULNERABILITIES',\r\n      severity: 'CRITICAL',\r\n      description: `${report.criticalCount} critical vulnerabilities detected in security scan`,\r\n      source: 'Automated Security Testing',\r\n      evidence: report.vulnerabilities.filter(v => v.severity === 'CRITICAL')\r\n    });\r\n\r\n    // Send immediate notification if configured\r\n    if (this.config.alertingConfig.immediateNotification) {\r\n      await this.notifications.sendCriticalAlert({\r\n        title: '\uD83D\uDEA8 Critical Security Vulnerabilities Detected',\r\n        message: `Security scan found ${report.criticalCount} critical vulnerabilities requiring immediate attention.`,\r\n        details: {\r\n          executionId: execution.executionId,\r\n          criticalCount: report.criticalCount,\r\n          complianceScore: report.complianceScore,\r\n          incidentId: incident.id\r\n        },\r\n        priority: 'CRITICAL'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle high severity vulnerabilities\r\n   */\r\n  private async handleHighVulnerabilities(\r\n    execution: SecurityTestExecution,\r\n    report: VulnerabilityReport\r\n  ): Promise<void> {\r\n    this.logger.warn(`High severity vulnerabilities detected`, {\r\n      executionId: execution.executionId,\r\n      highCount: report.highCount,\r\n      threshold: this.config.alertingConfig.highThreshold\r\n    });\r\n\r\n    // Send alert notification\r\n    if (this.config.alertingConfig.emailAlerts) {\r\n      await this.notifications.sendAlert({\r\n        title: '\u26A0\uFE0F High Severity Security Vulnerabilities',\r\n        message: `Security scan found ${report.highCount} high severity vulnerabilities.`,\r\n        details: {\r\n          executionId: execution.executionId,\r\n          highCount: report.highCount,\r\n          complianceScore: report.complianceScore\r\n        },\r\n        priority: 'HIGH'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Save security report to disk\r\n   */\r\n  private async saveSecurityReport(\r\n    execution: SecurityTestExecution,\r\n    report: VulnerabilityReport\r\n  ): Promise<void> {\r\n    try {\r\n      const reportData = {\r\n        execution: {\r\n          executionId: execution.executionId,\r\n          scheduleId: execution.scheduleId,\r\n          startTime: execution.startTime,\r\n          endTime: execution.endTime,\r\n          status: execution.status\r\n        },\r\n        report,\r\n        metadata: {\r\n          generatedAt: new Date(),\r\n          version: '1.0',\r\n          format: 'json'\r\n        }\r\n      };\r\n\r\n      const fileName = `security-report-${execution.executionId}-${Date.now()}.json`;\r\n      const filePath = path.join(this.config.reportingConfig.outputDirectory, fileName);\r\n\r\n      await fs.writeFile(filePath, JSON.stringify(reportData, null, 2));\r\n\r\n      this.logger.info(`Security report saved`, {\r\n        executionId: execution.executionId,\r\n        filePath,\r\n        fileSize: JSON.stringify(reportData).length\r\n      });\r\n\r\n      // Clean up old reports if retention policy is configured\r\n      await this.cleanupOldReports();\r\n\r\n    } catch (error) {\r\n      this.logger.error(`Failed to save security report`, {\r\n        executionId: execution.executionId,\r\n        error\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send security report via email\r\n   */\r\n  private async sendSecurityReport(\r\n    execution: SecurityTestExecution,\r\n    report: VulnerabilityReport\r\n  ): Promise<void> {\r\n    try {\r\n      const emailContent = this.generateEmailReport(execution, report);\r\n\r\n      await this.notifications.sendEmail({\r\n        to: 'security-team@company.com',\r\n        subject: `Security Test Report - ${execution.executionId}`,\r\n        html: emailContent,\r\n        attachments: [{\r\n          filename: `security-report-${execution.executionId}.json`,\r\n          content: JSON.stringify(report, null, 2),\r\n          contentType: 'application/json'\r\n        }]\r\n      });\r\n\r\n      this.logger.info(`Security report sent via email`, {\r\n        executionId: execution.executionId\r\n      });\r\n\r\n    } catch (error) {\r\n      this.logger.error(`Failed to send security report via email`, {\r\n        executionId: execution.executionId,\r\n        error\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate HTML email report\r\n   */\r\n  private generateEmailReport(\r\n    execution: SecurityTestExecution,\r\n    report: VulnerabilityReport\r\n  ): string {\r\n    const severityColors = {\r\n      CRITICAL: '#dc3545',\r\n      HIGH: '#fd7e14',\r\n      MEDIUM: '#ffc107',\r\n      LOW: '#28a745'\r\n    };\r\n\r\n    return `\r\n      <!DOCTYPE html>\r\n      <html>\r\n      <head>\r\n        <style>\r\n          body { font-family: Arial, sans-serif; margin: 20px; }\r\n          .header { background-color: #f8f9fa; padding: 20px; border-radius: 5px; }\r\n          .summary { display: flex; justify-content: space-around; margin: 20px 0; }\r\n          .metric { text-align: center; padding: 15px; border-radius: 5px; background-color: #e9ecef; }\r\n          .vulnerability { margin: 10px 0; padding: 15px; border-left: 4px solid #ccc; }\r\n          .critical { border-left-color: ${severityColors.CRITICAL}; }\r\n          .high { border-left-color: ${severityColors.HIGH}; }\r\n          .medium { border-left-color: ${severityColors.MEDIUM}; }\r\n          .low { border-left-color: ${severityColors.LOW}; }\r\n          .recommendations { background-color: #d1ecf1; padding: 15px; border-radius: 5px; }\r\n        </style>\r\n      </head>\r\n      <body>\r\n        <div class=\"header\">\r\n          <h1>\uD83D\uDD12 Security Test Report</h1>\r\n          <p><strong>Execution ID:</strong> ${execution.executionId}</p>\r\n          <p><strong>Execution Time:</strong> ${execution.startTime.toISOString()}</p>\r\n          <p><strong>Status:</strong> ${execution.status}</p>\r\n        </div>\r\n\r\n        <div class=\"summary\">\r\n          <div class=\"metric\">\r\n            <h3>${report.totalVulnerabilities}</h3>\r\n            <p>Total Vulnerabilities</p>\r\n          </div>\r\n          <div class=\"metric\">\r\n            <h3 style=\"color: ${severityColors.CRITICAL}\">${report.criticalCount}</h3>\r\n            <p>Critical</p>\r\n          </div>\r\n          <div class=\"metric\">\r\n            <h3 style=\"color: ${severityColors.HIGH}\">${report.highCount}</h3>\r\n            <p>High</p>\r\n          </div>\r\n          <div class=\"metric\">\r\n            <h3 style=\"color: ${severityColors.MEDIUM}\">${report.mediumCount}</h3>\r\n            <p>Medium</p>\r\n          </div>\r\n          <div class=\"metric\">\r\n            <h3 style=\"color: ${severityColors.LOW}\">${report.lowCount}</h3>\r\n            <p>Low</p>\r\n          </div>\r\n          <div class=\"metric\">\r\n            <h3>${report.complianceScore}%</h3>\r\n            <p>Compliance Score</p>\r\n          </div>\r\n        </div>\r\n\r\n        <h2>\uD83D\uDD0D Top Vulnerabilities</h2>\r\n        ${report.vulnerabilities\r\n          .filter(v => v.severity === 'CRITICAL' || v.severity === 'HIGH')\r\n          .slice(0, 10)\r\n          .map(v => `\r\n            <div class=\"vulnerability ${v.severity.toLowerCase()}\">\r\n              <h4>${v.type} - ${v.severity}</h4>\r\n              <p><strong>Description:</strong> ${v.description}</p>\r\n              <p><strong>Location:</strong> ${v.location}</p>\r\n              <p><strong>Remediation:</strong> ${v.remediation}</p>\r\n            </div>\r\n          `).join('')}\r\n\r\n        <div class=\"recommendations\">\r\n          <h2>\uD83D\uDCA1 Recommendations</h2>\r\n          <ul>\r\n            ${report.recommendations.slice(0, 10).map(r => `<li>${r}</li>`).join('')}\r\n          </ul>\r\n        </div>\r\n\r\n        <p><em>This is an automated security report generated by the AI Crypto Trading Agent Security Testing Suite.</em></p>\r\n      </body>\r\n      </html>\r\n    `;\r\n  }\r\n\r\n  /**\r\n   * Send failure notification\r\n   */\r\n  private async sendFailureNotification(\r\n    execution: SecurityTestExecution,\r\n    error: any\r\n  ): Promise<void> {\r\n    try {\r\n      await this.notifications.sendAlert({\r\n        title: '\u274C Security Test Execution Failed',\r\n        message: `Security test execution ${execution.executionId} failed with error: ${error.message}`,\r\n        details: {\r\n          executionId: execution.executionId,\r\n          scheduleId: execution.scheduleId,\r\n          error: error.message,\r\n          startTime: execution.startTime,\r\n          endTime: execution.endTime\r\n        },\r\n        priority: 'HIGH'\r\n      });\r\n    } catch (notificationError) {\r\n      this.logger.error(`Failed to send failure notification`, {\r\n        executionId: execution.executionId,\r\n        originalError: error,\r\n        notificationError\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update security metrics\r\n   */\r\n  private async updateSecurityMetrics(report: VulnerabilityReport): Promise<void> {\r\n    try {\r\n      await this.securityMonitoring.updateSecurityMetrics({\r\n        timestamp: new Date(),\r\n        totalVulnerabilities: report.totalVulnerabilities,\r\n        criticalCount: report.criticalCount,\r\n        highCount: report.highCount,\r\n        mediumCount: report.mediumCount,\r\n        lowCount: report.lowCount,\r\n        complianceScore: report.complianceScore\r\n      });\r\n    } catch (error) {\r\n      this.logger.error(`Failed to update security metrics`, { error });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trigger CI/CD integration\r\n   */\r\n  private async triggerCICDIntegration(\r\n    execution: SecurityTestExecution,\r\n    report: VulnerabilityReport\r\n  ): Promise<void> {\r\n    if (!this.config.integrationConfig.webhookUrl) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const payload = {\r\n        executionId: execution.executionId,\r\n        timestamp: new Date().toISOString(),\r\n        status: execution.status,\r\n        vulnerabilities: {\r\n          total: report.totalVulnerabilities,\r\n          critical: report.criticalCount,\r\n          high: report.highCount,\r\n          medium: report.mediumCount,\r\n          low: report.lowCount\r\n        },\r\n        complianceScore: report.complianceScore,\r\n        recommendations: report.recommendations.slice(0, 5)\r\n      };\r\n\r\n      // This would make an HTTP request to the CI/CD webhook\r\n      this.logger.info(`Triggering CI/CD integration`, {\r\n        executionId: execution.executionId,\r\n        webhookUrl: this.config.integrationConfig.webhookUrl\r\n      });\r\n\r\n    } catch (error) {\r\n      this.logger.error(`Failed to trigger CI/CD integration`, {\r\n        executionId: execution.executionId,\r\n        error\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Start continuous monitoring\r\n   */\r\n  private async startContinuousMonitoring(): Promise<void> {\r\n    // This would start continuous security monitoring\r\n    // For now, we'll just log that it's started\r\n    this.logger.info('Continuous security monitoring started');\r\n  }\r\n\r\n  /**\r\n   * Ensure output directory exists\r\n   */\r\n  private async ensureOutputDirectory(): Promise<void> {\r\n    try {\r\n      await fs.mkdir(this.config.reportingConfig.outputDirectory, { recursive: true });\r\n    } catch (error) {\r\n      this.logger.error(`Failed to create output directory`, {\r\n        directory: this.config.reportingConfig.outputDirectory,\r\n        error\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clean up old reports based on retention policy\r\n   */\r\n  private async cleanupOldReports(): Promise<void> {\r\n    try {\r\n      const files = await fs.readdir(this.config.reportingConfig.outputDirectory);\r\n      const cutoffDate = new Date();\r\n      cutoffDate.setDate(cutoffDate.getDate() - this.config.reportingConfig.retentionDays);\r\n\r\n      for (const file of files) {\r\n        if (file.startsWith('security-report-')) {\r\n          const filePath = path.join(this.config.reportingConfig.outputDirectory, file);\r\n          const stats = await fs.stat(filePath);\r\n          \r\n          if (stats.mtime < cutoffDate) {\r\n            await fs.unlink(filePath);\r\n            this.logger.info(`Deleted old security report`, { file });\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      this.logger.error(`Failed to cleanup old reports`, { error });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get active executions\r\n   */\r\n  getActiveExecutions(): SecurityTestExecution[] {\r\n    return Array.from(this.activeExecutions.values());\r\n  }\r\n\r\n  /**\r\n   * Get scheduled tests\r\n   */\r\n  getScheduledTests(): SecurityTestSchedule[] {\r\n    return this.config.schedules;\r\n  }\r\n\r\n  /**\r\n   * Add new security test schedule\r\n   */\r\n  async addSecurityTestSchedule(schedule: SecurityTestSchedule): Promise<void> {\r\n    this.config.schedules.push(schedule);\r\n    \r\n    if (schedule.enabled) {\r\n      await this.scheduleSecurityTest(schedule);\r\n    }\r\n\r\n    this.logger.info(`Added new security test schedule`, {\r\n      scheduleId: schedule.id,\r\n      name: schedule.name\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Remove security test schedule\r\n   */\r\n  async removeSecurityTestSchedule(scheduleId: string): Promise<void> {\r\n    const task = this.scheduledJobs.get(scheduleId);\r\n    if (task) {\r\n      task.stop();\r\n      this.scheduledJobs.delete(scheduleId);\r\n    }\r\n\r\n    this.config.schedules = this.config.schedules.filter(s => s.id !== scheduleId);\r\n\r\n    this.logger.info(`Removed security test schedule`, { scheduleId });\r\n  }\r\n\r\n  /**\r\n   * Stop all scheduled tests\r\n   */\r\n  async stopAllScheduledTests(): Promise<void> {\r\n    for (const [scheduleId, task] of this.scheduledJobs) {\r\n      task.stop();\r\n      this.logger.info(`Stopped scheduled test`, { scheduleId });\r\n    }\r\n    \r\n    this.scheduledJobs.clear();\r\n  }\r\n\r\n  /**\r\n   * Shutdown the automated security testing suite\r\n   */\r\n  async shutdown(): Promise<void> {\r\n    this.logger.info('Shutting down automated security testing suite');\r\n\r\n    // Stop all scheduled tests\r\n    await this.stopAllScheduledTests();\r\n\r\n    // Cancel active executions\r\n    for (const execution of this.activeExecutions.values()) {\r\n      execution.status = 'CANCELLED';\r\n      execution.endTime = new Date();\r\n    }\r\n\r\n    this.activeExecutions.clear();\r\n\r\n    this.logger.info('Automated security testing suite shutdown complete');\r\n  }\r\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "afa804aee78c2382b9efffc7512cd0ec47609118"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_g4w5h3veu = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_g4w5h3veu();
var __createBinding =
/* istanbul ignore next */
(cov_g4w5h3veu().s[0]++,
/* istanbul ignore next */
(cov_g4w5h3veu().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_g4w5h3veu().b[0][1]++, this.__createBinding) ||
/* istanbul ignore next */
(cov_g4w5h3veu().b[0][2]++, Object.create ?
/* istanbul ignore next */
(cov_g4w5h3veu().b[1][0]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_g4w5h3veu().f[0]++;
  cov_g4w5h3veu().s[1]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_g4w5h3veu().b[2][0]++;
    cov_g4w5h3veu().s[2]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_g4w5h3veu().b[2][1]++;
  }
  var desc =
  /* istanbul ignore next */
  (cov_g4w5h3veu().s[3]++, Object.getOwnPropertyDescriptor(m, k));
  /* istanbul ignore next */
  cov_g4w5h3veu().s[4]++;
  if (
  /* istanbul ignore next */
  (cov_g4w5h3veu().b[4][0]++, !desc) ||
  /* istanbul ignore next */
  (cov_g4w5h3veu().b[4][1]++, "get" in desc ?
  /* istanbul ignore next */
  (cov_g4w5h3veu().b[5][0]++, !m.__esModule) :
  /* istanbul ignore next */
  (cov_g4w5h3veu().b[5][1]++,
  /* istanbul ignore next */
  (cov_g4w5h3veu().b[6][0]++, desc.writable) ||
  /* istanbul ignore next */
  (cov_g4w5h3veu().b[6][1]++, desc.configurable)))) {
    /* istanbul ignore next */
    cov_g4w5h3veu().b[3][0]++;
    cov_g4w5h3veu().s[5]++;
    desc = {
      enumerable: true,
      get: function () {
        /* istanbul ignore next */
        cov_g4w5h3veu().f[1]++;
        cov_g4w5h3veu().s[6]++;
        return m[k];
      }
    };
  } else
  /* istanbul ignore next */
  {
    cov_g4w5h3veu().b[3][1]++;
  }
  cov_g4w5h3veu().s[7]++;
  Object.defineProperty(o, k2, desc);
}) :
/* istanbul ignore next */
(cov_g4w5h3veu().b[1][1]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_g4w5h3veu().f[2]++;
  cov_g4w5h3veu().s[8]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_g4w5h3veu().b[7][0]++;
    cov_g4w5h3veu().s[9]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_g4w5h3veu().b[7][1]++;
  }
  cov_g4w5h3veu().s[10]++;
  o[k2] = m[k];
})));
var __setModuleDefault =
/* istanbul ignore next */
(cov_g4w5h3veu().s[11]++,
/* istanbul ignore next */
(cov_g4w5h3veu().b[8][0]++, this) &&
/* istanbul ignore next */
(cov_g4w5h3veu().b[8][1]++, this.__setModuleDefault) ||
/* istanbul ignore next */
(cov_g4w5h3veu().b[8][2]++, Object.create ?
/* istanbul ignore next */
(cov_g4w5h3veu().b[9][0]++, function (o, v) {
  /* istanbul ignore next */
  cov_g4w5h3veu().f[3]++;
  cov_g4w5h3veu().s[12]++;
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
}) :
/* istanbul ignore next */
(cov_g4w5h3veu().b[9][1]++, function (o, v) {
  /* istanbul ignore next */
  cov_g4w5h3veu().f[4]++;
  cov_g4w5h3veu().s[13]++;
  o["default"] = v;
})));
var __importStar =
/* istanbul ignore next */
(cov_g4w5h3veu().s[14]++,
/* istanbul ignore next */
(cov_g4w5h3veu().b[10][0]++, this) &&
/* istanbul ignore next */
(cov_g4w5h3veu().b[10][1]++, this.__importStar) ||
/* istanbul ignore next */
(cov_g4w5h3veu().b[10][2]++, function () {
  /* istanbul ignore next */
  cov_g4w5h3veu().f[5]++;
  cov_g4w5h3veu().s[15]++;
  var ownKeys = function (o) {
    /* istanbul ignore next */
    cov_g4w5h3veu().f[6]++;
    cov_g4w5h3veu().s[16]++;
    ownKeys =
    /* istanbul ignore next */
    (cov_g4w5h3veu().b[11][0]++, Object.getOwnPropertyNames) ||
    /* istanbul ignore next */
    (cov_g4w5h3veu().b[11][1]++, function (o) {
      /* istanbul ignore next */
      cov_g4w5h3veu().f[7]++;
      var ar =
      /* istanbul ignore next */
      (cov_g4w5h3veu().s[17]++, []);
      /* istanbul ignore next */
      cov_g4w5h3veu().s[18]++;
      for (var k in o) {
        /* istanbul ignore next */
        cov_g4w5h3veu().s[19]++;
        if (Object.prototype.hasOwnProperty.call(o, k)) {
          /* istanbul ignore next */
          cov_g4w5h3veu().b[12][0]++;
          cov_g4w5h3veu().s[20]++;
          ar[ar.length] = k;
        } else
        /* istanbul ignore next */
        {
          cov_g4w5h3veu().b[12][1]++;
        }
      }
      /* istanbul ignore next */
      cov_g4w5h3veu().s[21]++;
      return ar;
    });
    /* istanbul ignore next */
    cov_g4w5h3veu().s[22]++;
    return ownKeys(o);
  };
  /* istanbul ignore next */
  cov_g4w5h3veu().s[23]++;
  return function (mod) {
    /* istanbul ignore next */
    cov_g4w5h3veu().f[8]++;
    cov_g4w5h3veu().s[24]++;
    if (
    /* istanbul ignore next */
    (cov_g4w5h3veu().b[14][0]++, mod) &&
    /* istanbul ignore next */
    (cov_g4w5h3veu().b[14][1]++, mod.__esModule)) {
      /* istanbul ignore next */
      cov_g4w5h3veu().b[13][0]++;
      cov_g4w5h3veu().s[25]++;
      return mod;
    } else
    /* istanbul ignore next */
    {
      cov_g4w5h3veu().b[13][1]++;
    }
    var result =
    /* istanbul ignore next */
    (cov_g4w5h3veu().s[26]++, {});
    /* istanbul ignore next */
    cov_g4w5h3veu().s[27]++;
    if (mod != null) {
      /* istanbul ignore next */
      cov_g4w5h3veu().b[15][0]++;
      cov_g4w5h3veu().s[28]++;
      for (var k =
        /* istanbul ignore next */
        (cov_g4w5h3veu().s[29]++, ownKeys(mod)), i =
        /* istanbul ignore next */
        (cov_g4w5h3veu().s[30]++, 0); i < k.length; i++) {
        /* istanbul ignore next */
        cov_g4w5h3veu().s[31]++;
        if (k[i] !== "default") {
          /* istanbul ignore next */
          cov_g4w5h3veu().b[16][0]++;
          cov_g4w5h3veu().s[32]++;
          __createBinding(result, mod, k[i]);
        } else
        /* istanbul ignore next */
        {
          cov_g4w5h3veu().b[16][1]++;
        }
      }
    } else
    /* istanbul ignore next */
    {
      cov_g4w5h3veu().b[15][1]++;
    }
    cov_g4w5h3veu().s[33]++;
    __setModuleDefault(result, mod);
    /* istanbul ignore next */
    cov_g4w5h3veu().s[34]++;
    return result;
  };
}()));
/* istanbul ignore next */
cov_g4w5h3veu().s[35]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_g4w5h3veu().s[36]++;
exports.AutomatedSecurityTestingSuite = void 0;
const cron =
/* istanbul ignore next */
(cov_g4w5h3veu().s[37]++, __importStar(require("node-cron")));
const fs =
/* istanbul ignore next */
(cov_g4w5h3veu().s[38]++, __importStar(require("fs/promises")));
const path =
/* istanbul ignore next */
(cov_g4w5h3veu().s[39]++, __importStar(require("path")));
class AutomatedSecurityTestingSuite {
  logger;
  penetrationTesting;
  securityMonitoring;
  incidentResponse;
  notifications;
  config;
  scheduledJobs =
  /* istanbul ignore next */
  (cov_g4w5h3veu().s[40]++, new Map());
  activeExecutions =
  /* istanbul ignore next */
  (cov_g4w5h3veu().s[41]++, new Map());
  constructor(logger, penetrationTesting, securityMonitoring, incidentResponse, notifications, config) {
    /* istanbul ignore next */
    cov_g4w5h3veu().f[9]++;
    cov_g4w5h3veu().s[42]++;
    this.logger = logger;
    /* istanbul ignore next */
    cov_g4w5h3veu().s[43]++;
    this.penetrationTesting = penetrationTesting;
    /* istanbul ignore next */
    cov_g4w5h3veu().s[44]++;
    this.securityMonitoring = securityMonitoring;
    /* istanbul ignore next */
    cov_g4w5h3veu().s[45]++;
    this.incidentResponse = incidentResponse;
    /* istanbul ignore next */
    cov_g4w5h3veu().s[46]++;
    this.notifications = notifications;
    /* istanbul ignore next */
    cov_g4w5h3veu().s[47]++;
    this.config = config;
  }
  /**
   * Initialize the automated security testing suite
   */
  async initialize() {
    /* istanbul ignore next */
    cov_g4w5h3veu().f[10]++;
    cov_g4w5h3veu().s[48]++;
    this.logger.info('Initializing automated security testing suite');
    /* istanbul ignore next */
    cov_g4w5h3veu().s[49]++;
    try {
      /* istanbul ignore next */
      cov_g4w5h3veu().s[50]++;
      // Create output directory if it doesn't exist
      await this.ensureOutputDirectory();
      // Schedule all enabled security tests
      /* istanbul ignore next */
      cov_g4w5h3veu().s[51]++;
      await this.scheduleSecurityTests();
      // Start continuous monitoring
      /* istanbul ignore next */
      cov_g4w5h3veu().s[52]++;
      await this.startContinuousMonitoring();
      /* istanbul ignore next */
      cov_g4w5h3veu().s[53]++;
      this.logger.info('Automated security testing suite initialized successfully', {
        scheduledTests: this.scheduledJobs.size,
        outputDirectory: this.config.reportingConfig.outputDirectory
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_g4w5h3veu().s[54]++;
      this.logger.error('Failed to initialize automated security testing suite', {
        error
      });
      /* istanbul ignore next */
      cov_g4w5h3veu().s[55]++;
      throw error;
    }
  }
  /**
   * Schedule all security tests based on configuration
   */
  async scheduleSecurityTests() {
    /* istanbul ignore next */
    cov_g4w5h3veu().f[11]++;
    cov_g4w5h3veu().s[56]++;
    for (const schedule of this.config.schedules) {
      /* istanbul ignore next */
      cov_g4w5h3veu().s[57]++;
      if (schedule.enabled) {
        /* istanbul ignore next */
        cov_g4w5h3veu().b[17][0]++;
        cov_g4w5h3veu().s[58]++;
        await this.scheduleSecurityTest(schedule);
      } else
      /* istanbul ignore next */
      {
        cov_g4w5h3veu().b[17][1]++;
      }
    }
  }
  /**
   * Schedule a specific security test
   */
  async scheduleSecurityTest(schedule) {
    /* istanbul ignore next */
    cov_g4w5h3veu().f[12]++;
    cov_g4w5h3veu().s[59]++;
    try {
      const task =
      /* istanbul ignore next */
      (cov_g4w5h3veu().s[60]++, cron.schedule(schedule.cronExpression, async () => {
        /* istanbul ignore next */
        cov_g4w5h3veu().f[13]++;
        cov_g4w5h3veu().s[61]++;
        await this.executeScheduledTest(schedule);
      }, {
        scheduled: false,
        timezone: 'UTC'
      }));
      /* istanbul ignore next */
      cov_g4w5h3veu().s[62]++;
      this.scheduledJobs.set(schedule.id, task);
      /* istanbul ignore next */
      cov_g4w5h3veu().s[63]++;
      task.start();
      /* istanbul ignore next */
      cov_g4w5h3veu().s[64]++;
      this.logger.info(`Scheduled security test: ${schedule.name}`, {
        scheduleId: schedule.id,
        cronExpression: schedule.cronExpression,
        testTypes: schedule.testTypes
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_g4w5h3veu().s[65]++;
      this.logger.error(`Failed to schedule security test: ${schedule.name}`, {
        scheduleId: schedule.id,
        error
      });
    }
  }
  /**
   * Execute a scheduled security test
   */
  async executeScheduledTest(schedule) {
    /* istanbul ignore next */
    cov_g4w5h3veu().f[14]++;
    const executionId =
    /* istanbul ignore next */
    (cov_g4w5h3veu().s[66]++, `exec_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);
    const execution =
    /* istanbul ignore next */
    (cov_g4w5h3veu().s[67]++, {
      executionId,
      scheduleId: schedule.id,
      startTime: new Date(),
      status: 'RUNNING'
    });
    /* istanbul ignore next */
    cov_g4w5h3veu().s[68]++;
    this.activeExecutions.set(executionId, execution);
    /* istanbul ignore next */
    cov_g4w5h3veu().s[69]++;
    this.logger.info(`Starting scheduled security test execution`, {
      executionId,
      scheduleName: schedule.name,
      testTypes: schedule.testTypes
    });
    /* istanbul ignore next */
    cov_g4w5h3veu().s[70]++;
    try {
      // Execute the security test suite
      const report =
      /* istanbul ignore next */
      (cov_g4w5h3veu().s[71]++, await this.penetrationTesting.executeSecurityTestSuite());
      // Update execution status
      /* istanbul ignore next */
      cov_g4w5h3veu().s[72]++;
      execution.endTime = new Date();
      /* istanbul ignore next */
      cov_g4w5h3veu().s[73]++;
      execution.status = 'COMPLETED';
      /* istanbul ignore next */
      cov_g4w5h3veu().s[74]++;
      execution.report = report;
      // Update schedule last run time
      /* istanbul ignore next */
      cov_g4w5h3veu().s[75]++;
      schedule.lastRun = new Date();
      // Save report to disk
      /* istanbul ignore next */
      cov_g4w5h3veu().s[76]++;
      await this.saveSecurityReport(execution, report);
      // Process results and send alerts if necessary
      /* istanbul ignore next */
      cov_g4w5h3veu().s[77]++;
      await this.processSecurityTestResults(execution, report);
      /* istanbul ignore next */
      cov_g4w5h3veu().s[78]++;
      this.logger.info(`Security test execution completed successfully`, {
        executionId,
        totalVulnerabilities: report.totalVulnerabilities,
        criticalCount: report.criticalCount,
        complianceScore: report.complianceScore
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_g4w5h3veu().s[79]++;
      execution.endTime = new Date();
      /* istanbul ignore next */
      cov_g4w5h3veu().s[80]++;
      execution.status = 'FAILED';
      /* istanbul ignore next */
      cov_g4w5h3veu().s[81]++;
      execution.error = error instanceof Error ?
      /* istanbul ignore next */
      (cov_g4w5h3veu().b[18][0]++, error.message) :
      /* istanbul ignore next */
      (cov_g4w5h3veu().b[18][1]++, String(error));
      /* istanbul ignore next */
      cov_g4w5h3veu().s[82]++;
      this.logger.error(`Security test execution failed`, {
        executionId,
        scheduleName: schedule.name,
        error
      });
      // Send failure notification
      /* istanbul ignore next */
      cov_g4w5h3veu().s[83]++;
      await this.sendFailureNotification(execution, error);
    } finally {
      /* istanbul ignore next */
      cov_g4w5h3veu().s[84]++;
      this.activeExecutions.delete(executionId);
    }
  }
  /**
   * Execute security tests on demand
   */
  async executeSecurityTestsOnDemand(testTypes) {
    /* istanbul ignore next */
    cov_g4w5h3veu().f[15]++;
    const executionId =
    /* istanbul ignore next */
    (cov_g4w5h3veu().s[85]++, `ondemand_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);
    const execution =
    /* istanbul ignore next */
    (cov_g4w5h3veu().s[86]++, {
      executionId,
      scheduleId: 'on-demand',
      startTime: new Date(),
      status: 'RUNNING'
    });
    /* istanbul ignore next */
    cov_g4w5h3veu().s[87]++;
    this.activeExecutions.set(executionId, execution);
    /* istanbul ignore next */
    cov_g4w5h3veu().s[88]++;
    this.logger.info(`Starting on-demand security test execution`, {
      executionId,
      testTypes:
      /* istanbul ignore next */
      (cov_g4w5h3veu().b[19][0]++, testTypes) ||
      /* istanbul ignore next */
      (cov_g4w5h3veu().b[19][1]++, 'all')
    });
    /* istanbul ignore next */
    cov_g4w5h3veu().s[89]++;
    try {
      // Execute the security test suite
      const report =
      /* istanbul ignore next */
      (cov_g4w5h3veu().s[90]++, await this.penetrationTesting.executeSecurityTestSuite());
      /* istanbul ignore next */
      cov_g4w5h3veu().s[91]++;
      execution.endTime = new Date();
      /* istanbul ignore next */
      cov_g4w5h3veu().s[92]++;
      execution.status = 'COMPLETED';
      /* istanbul ignore next */
      cov_g4w5h3veu().s[93]++;
      execution.report = report;
      // Save report to disk
      /* istanbul ignore next */
      cov_g4w5h3veu().s[94]++;
      await this.saveSecurityReport(execution, report);
      // Process results
      /* istanbul ignore next */
      cov_g4w5h3veu().s[95]++;
      await this.processSecurityTestResults(execution, report);
      /* istanbul ignore next */
      cov_g4w5h3veu().s[96]++;
      this.logger.info(`On-demand security test execution completed`, {
        executionId,
        totalVulnerabilities: report.totalVulnerabilities,
        criticalCount: report.criticalCount
      });
      /* istanbul ignore next */
      cov_g4w5h3veu().s[97]++;
      return report;
    } catch (error) {
      /* istanbul ignore next */
      cov_g4w5h3veu().s[98]++;
      execution.endTime = new Date();
      /* istanbul ignore next */
      cov_g4w5h3veu().s[99]++;
      execution.status = 'FAILED';
      /* istanbul ignore next */
      cov_g4w5h3veu().s[100]++;
      execution.error = error instanceof Error ?
      /* istanbul ignore next */
      (cov_g4w5h3veu().b[20][0]++, error.message) :
      /* istanbul ignore next */
      (cov_g4w5h3veu().b[20][1]++, String(error));
      /* istanbul ignore next */
      cov_g4w5h3veu().s[101]++;
      this.logger.error(`On-demand security test execution failed`, {
        executionId,
        error
      });
      /* istanbul ignore next */
      cov_g4w5h3veu().s[102]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_g4w5h3veu().s[103]++;
      this.activeExecutions.delete(executionId);
    }
  }
  /**
   * Process security test results and trigger appropriate actions
   */
  async processSecurityTestResults(execution, report) {
    /* istanbul ignore next */
    cov_g4w5h3veu().f[16]++;
    cov_g4w5h3veu().s[104]++;
    // Check if critical vulnerabilities exceed threshold
    if (report.criticalCount >= this.config.alertingConfig.criticalThreshold) {
      /* istanbul ignore next */
      cov_g4w5h3veu().b[21][0]++;
      cov_g4w5h3veu().s[105]++;
      await this.handleCriticalVulnerabilities(execution, report);
    } else
    /* istanbul ignore next */
    {
      cov_g4w5h3veu().b[21][1]++;
    }
    // Check if high vulnerabilities exceed threshold
    cov_g4w5h3veu().s[106]++;
    if (report.highCount >= this.config.alertingConfig.highThreshold) {
      /* istanbul ignore next */
      cov_g4w5h3veu().b[22][0]++;
      cov_g4w5h3veu().s[107]++;
      await this.handleHighVulnerabilities(execution, report);
    } else
    /* istanbul ignore next */
    {
      cov_g4w5h3veu().b[22][1]++;
    }
    // Send regular report if configured
    cov_g4w5h3veu().s[108]++;
    if (this.config.reportingConfig.emailReports) {
      /* istanbul ignore next */
      cov_g4w5h3veu().b[23][0]++;
      cov_g4w5h3veu().s[109]++;
      await this.sendSecurityReport(execution, report);
    } else
    /* istanbul ignore next */
    {
      cov_g4w5h3veu().b[23][1]++;
    }
    // Update security metrics
    cov_g4w5h3veu().s[110]++;
    await this.updateSecurityMetrics(report);
    // Trigger CI/CD integration if configured
    /* istanbul ignore next */
    cov_g4w5h3veu().s[111]++;
    if (this.config.integrationConfig.cicdIntegration) {
      /* istanbul ignore next */
      cov_g4w5h3veu().b[24][0]++;
      cov_g4w5h3veu().s[112]++;
      await this.triggerCICDIntegration(execution, report);
    } else
    /* istanbul ignore next */
    {
      cov_g4w5h3veu().b[24][1]++;
    }
  }
  /**
   * Handle critical vulnerabilities
   */
  async handleCriticalVulnerabilities(execution, report) {
    /* istanbul ignore next */
    cov_g4w5h3veu().f[17]++;
    cov_g4w5h3veu().s[113]++;
    this.logger.warn(`Critical vulnerabilities detected`, {
      executionId: execution.executionId,
      criticalCount: report.criticalCount,
      threshold: this.config.alertingConfig.criticalThreshold
    });
    // Create security incident
    const incident =
    /* istanbul ignore next */
    (cov_g4w5h3veu().s[114]++, await this.incidentResponse.createIncident({
      type: 'CRITICAL_VULNERABILITIES',
      severity: 'CRITICAL',
      description: `${report.criticalCount} critical vulnerabilities detected in security scan`,
      source: 'Automated Security Testing',
      evidence: report.vulnerabilities.filter(v => {
        /* istanbul ignore next */
        cov_g4w5h3veu().f[18]++;
        cov_g4w5h3veu().s[115]++;
        return v.severity === 'CRITICAL';
      })
    }));
    // Send immediate notification if configured
    /* istanbul ignore next */
    cov_g4w5h3veu().s[116]++;
    if (this.config.alertingConfig.immediateNotification) {
      /* istanbul ignore next */
      cov_g4w5h3veu().b[25][0]++;
      cov_g4w5h3veu().s[117]++;
      await this.notifications.sendCriticalAlert({
        title: '🚨 Critical Security Vulnerabilities Detected',
        message: `Security scan found ${report.criticalCount} critical vulnerabilities requiring immediate attention.`,
        details: {
          executionId: execution.executionId,
          criticalCount: report.criticalCount,
          complianceScore: report.complianceScore,
          incidentId: incident.id
        },
        priority: 'CRITICAL'
      });
    } else
    /* istanbul ignore next */
    {
      cov_g4w5h3veu().b[25][1]++;
    }
  }
  /**
   * Handle high severity vulnerabilities
   */
  async handleHighVulnerabilities(execution, report) {
    /* istanbul ignore next */
    cov_g4w5h3veu().f[19]++;
    cov_g4w5h3veu().s[118]++;
    this.logger.warn(`High severity vulnerabilities detected`, {
      executionId: execution.executionId,
      highCount: report.highCount,
      threshold: this.config.alertingConfig.highThreshold
    });
    // Send alert notification
    /* istanbul ignore next */
    cov_g4w5h3veu().s[119]++;
    if (this.config.alertingConfig.emailAlerts) {
      /* istanbul ignore next */
      cov_g4w5h3veu().b[26][0]++;
      cov_g4w5h3veu().s[120]++;
      await this.notifications.sendAlert({
        title: '⚠️ High Severity Security Vulnerabilities',
        message: `Security scan found ${report.highCount} high severity vulnerabilities.`,
        details: {
          executionId: execution.executionId,
          highCount: report.highCount,
          complianceScore: report.complianceScore
        },
        priority: 'HIGH'
      });
    } else
    /* istanbul ignore next */
    {
      cov_g4w5h3veu().b[26][1]++;
    }
  }
  /**
   * Save security report to disk
   */
  async saveSecurityReport(execution, report) {
    /* istanbul ignore next */
    cov_g4w5h3veu().f[20]++;
    cov_g4w5h3veu().s[121]++;
    try {
      const reportData =
      /* istanbul ignore next */
      (cov_g4w5h3veu().s[122]++, {
        execution: {
          executionId: execution.executionId,
          scheduleId: execution.scheduleId,
          startTime: execution.startTime,
          endTime: execution.endTime,
          status: execution.status
        },
        report,
        metadata: {
          generatedAt: new Date(),
          version: '1.0',
          format: 'json'
        }
      });
      const fileName =
      /* istanbul ignore next */
      (cov_g4w5h3veu().s[123]++, `security-report-${execution.executionId}-${Date.now()}.json`);
      const filePath =
      /* istanbul ignore next */
      (cov_g4w5h3veu().s[124]++, path.join(this.config.reportingConfig.outputDirectory, fileName));
      /* istanbul ignore next */
      cov_g4w5h3veu().s[125]++;
      await fs.writeFile(filePath, JSON.stringify(reportData, null, 2));
      /* istanbul ignore next */
      cov_g4w5h3veu().s[126]++;
      this.logger.info(`Security report saved`, {
        executionId: execution.executionId,
        filePath,
        fileSize: JSON.stringify(reportData).length
      });
      // Clean up old reports if retention policy is configured
      /* istanbul ignore next */
      cov_g4w5h3veu().s[127]++;
      await this.cleanupOldReports();
    } catch (error) {
      /* istanbul ignore next */
      cov_g4w5h3veu().s[128]++;
      this.logger.error(`Failed to save security report`, {
        executionId: execution.executionId,
        error
      });
    }
  }
  /**
   * Send security report via email
   */
  async sendSecurityReport(execution, report) {
    /* istanbul ignore next */
    cov_g4w5h3veu().f[21]++;
    cov_g4w5h3veu().s[129]++;
    try {
      const emailContent =
      /* istanbul ignore next */
      (cov_g4w5h3veu().s[130]++, this.generateEmailReport(execution, report));
      /* istanbul ignore next */
      cov_g4w5h3veu().s[131]++;
      await this.notifications.sendEmail({
        to: 'security-team@company.com',
        subject: `Security Test Report - ${execution.executionId}`,
        html: emailContent,
        attachments: [{
          filename: `security-report-${execution.executionId}.json`,
          content: JSON.stringify(report, null, 2),
          contentType: 'application/json'
        }]
      });
      /* istanbul ignore next */
      cov_g4w5h3veu().s[132]++;
      this.logger.info(`Security report sent via email`, {
        executionId: execution.executionId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_g4w5h3veu().s[133]++;
      this.logger.error(`Failed to send security report via email`, {
        executionId: execution.executionId,
        error
      });
    }
  }
  /**
   * Generate HTML email report
   */
  generateEmailReport(execution, report) {
    /* istanbul ignore next */
    cov_g4w5h3veu().f[22]++;
    const severityColors =
    /* istanbul ignore next */
    (cov_g4w5h3veu().s[134]++, {
      CRITICAL: '#dc3545',
      HIGH: '#fd7e14',
      MEDIUM: '#ffc107',
      LOW: '#28a745'
    });
    /* istanbul ignore next */
    cov_g4w5h3veu().s[135]++;
    return `
      <!DOCTYPE html>
      <html>
      <head>
        <style>
          body { font-family: Arial, sans-serif; margin: 20px; }
          .header { background-color: #f8f9fa; padding: 20px; border-radius: 5px; }
          .summary { display: flex; justify-content: space-around; margin: 20px 0; }
          .metric { text-align: center; padding: 15px; border-radius: 5px; background-color: #e9ecef; }
          .vulnerability { margin: 10px 0; padding: 15px; border-left: 4px solid #ccc; }
          .critical { border-left-color: ${severityColors.CRITICAL}; }
          .high { border-left-color: ${severityColors.HIGH}; }
          .medium { border-left-color: ${severityColors.MEDIUM}; }
          .low { border-left-color: ${severityColors.LOW}; }
          .recommendations { background-color: #d1ecf1; padding: 15px; border-radius: 5px; }
        </style>
      </head>
      <body>
        <div class="header">
          <h1>🔒 Security Test Report</h1>
          <p><strong>Execution ID:</strong> ${execution.executionId}</p>
          <p><strong>Execution Time:</strong> ${execution.startTime.toISOString()}</p>
          <p><strong>Status:</strong> ${execution.status}</p>
        </div>

        <div class="summary">
          <div class="metric">
            <h3>${report.totalVulnerabilities}</h3>
            <p>Total Vulnerabilities</p>
          </div>
          <div class="metric">
            <h3 style="color: ${severityColors.CRITICAL}">${report.criticalCount}</h3>
            <p>Critical</p>
          </div>
          <div class="metric">
            <h3 style="color: ${severityColors.HIGH}">${report.highCount}</h3>
            <p>High</p>
          </div>
          <div class="metric">
            <h3 style="color: ${severityColors.MEDIUM}">${report.mediumCount}</h3>
            <p>Medium</p>
          </div>
          <div class="metric">
            <h3 style="color: ${severityColors.LOW}">${report.lowCount}</h3>
            <p>Low</p>
          </div>
          <div class="metric">
            <h3>${report.complianceScore}%</h3>
            <p>Compliance Score</p>
          </div>
        </div>

        <h2>🔍 Top Vulnerabilities</h2>
        ${report.vulnerabilities.filter(v => {
      /* istanbul ignore next */
      cov_g4w5h3veu().f[23]++;
      cov_g4w5h3veu().s[136]++;
      return /* istanbul ignore next */(cov_g4w5h3veu().b[27][0]++, v.severity === 'CRITICAL') ||
      /* istanbul ignore next */
      (cov_g4w5h3veu().b[27][1]++, v.severity === 'HIGH');
    }).slice(0, 10).map(v => {
      /* istanbul ignore next */
      cov_g4w5h3veu().f[24]++;
      cov_g4w5h3veu().s[137]++;
      return `
            <div class="vulnerability ${v.severity.toLowerCase()}">
              <h4>${v.type} - ${v.severity}</h4>
              <p><strong>Description:</strong> ${v.description}</p>
              <p><strong>Location:</strong> ${v.location}</p>
              <p><strong>Remediation:</strong> ${v.remediation}</p>
            </div>
          `;
    }).join('')}

        <div class="recommendations">
          <h2>💡 Recommendations</h2>
          <ul>
            ${report.recommendations.slice(0, 10).map(r => {
      /* istanbul ignore next */
      cov_g4w5h3veu().f[25]++;
      cov_g4w5h3veu().s[138]++;
      return `<li>${r}</li>`;
    }).join('')}
          </ul>
        </div>

        <p><em>This is an automated security report generated by the AI Crypto Trading Agent Security Testing Suite.</em></p>
      </body>
      </html>
    `;
  }
  /**
   * Send failure notification
   */
  async sendFailureNotification(execution, error) {
    /* istanbul ignore next */
    cov_g4w5h3veu().f[26]++;
    cov_g4w5h3veu().s[139]++;
    try {
      /* istanbul ignore next */
      cov_g4w5h3veu().s[140]++;
      await this.notifications.sendAlert({
        title: '❌ Security Test Execution Failed',
        message: `Security test execution ${execution.executionId} failed with error: ${error.message}`,
        details: {
          executionId: execution.executionId,
          scheduleId: execution.scheduleId,
          error: error.message,
          startTime: execution.startTime,
          endTime: execution.endTime
        },
        priority: 'HIGH'
      });
    } catch (notificationError) {
      /* istanbul ignore next */
      cov_g4w5h3veu().s[141]++;
      this.logger.error(`Failed to send failure notification`, {
        executionId: execution.executionId,
        originalError: error,
        notificationError
      });
    }
  }
  /**
   * Update security metrics
   */
  async updateSecurityMetrics(report) {
    /* istanbul ignore next */
    cov_g4w5h3veu().f[27]++;
    cov_g4w5h3veu().s[142]++;
    try {
      /* istanbul ignore next */
      cov_g4w5h3veu().s[143]++;
      await this.securityMonitoring.updateSecurityMetrics({
        timestamp: new Date(),
        totalVulnerabilities: report.totalVulnerabilities,
        criticalCount: report.criticalCount,
        highCount: report.highCount,
        mediumCount: report.mediumCount,
        lowCount: report.lowCount,
        complianceScore: report.complianceScore
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_g4w5h3veu().s[144]++;
      this.logger.error(`Failed to update security metrics`, {
        error
      });
    }
  }
  /**
   * Trigger CI/CD integration
   */
  async triggerCICDIntegration(execution, report) {
    /* istanbul ignore next */
    cov_g4w5h3veu().f[28]++;
    cov_g4w5h3veu().s[145]++;
    if (!this.config.integrationConfig.webhookUrl) {
      /* istanbul ignore next */
      cov_g4w5h3veu().b[28][0]++;
      cov_g4w5h3veu().s[146]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_g4w5h3veu().b[28][1]++;
    }
    cov_g4w5h3veu().s[147]++;
    try {
      const payload =
      /* istanbul ignore next */
      (cov_g4w5h3veu().s[148]++, {
        executionId: execution.executionId,
        timestamp: new Date().toISOString(),
        status: execution.status,
        vulnerabilities: {
          total: report.totalVulnerabilities,
          critical: report.criticalCount,
          high: report.highCount,
          medium: report.mediumCount,
          low: report.lowCount
        },
        complianceScore: report.complianceScore,
        recommendations: report.recommendations.slice(0, 5)
      });
      // This would make an HTTP request to the CI/CD webhook
      /* istanbul ignore next */
      cov_g4w5h3veu().s[149]++;
      this.logger.info(`Triggering CI/CD integration`, {
        executionId: execution.executionId,
        webhookUrl: this.config.integrationConfig.webhookUrl
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_g4w5h3veu().s[150]++;
      this.logger.error(`Failed to trigger CI/CD integration`, {
        executionId: execution.executionId,
        error
      });
    }
  }
  /**
   * Start continuous monitoring
   */
  async startContinuousMonitoring() {
    /* istanbul ignore next */
    cov_g4w5h3veu().f[29]++;
    cov_g4w5h3veu().s[151]++;
    // This would start continuous security monitoring
    // For now, we'll just log that it's started
    this.logger.info('Continuous security monitoring started');
  }
  /**
   * Ensure output directory exists
   */
  async ensureOutputDirectory() {
    /* istanbul ignore next */
    cov_g4w5h3veu().f[30]++;
    cov_g4w5h3veu().s[152]++;
    try {
      /* istanbul ignore next */
      cov_g4w5h3veu().s[153]++;
      await fs.mkdir(this.config.reportingConfig.outputDirectory, {
        recursive: true
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_g4w5h3veu().s[154]++;
      this.logger.error(`Failed to create output directory`, {
        directory: this.config.reportingConfig.outputDirectory,
        error
      });
      /* istanbul ignore next */
      cov_g4w5h3veu().s[155]++;
      throw error;
    }
  }
  /**
   * Clean up old reports based on retention policy
   */
  async cleanupOldReports() {
    /* istanbul ignore next */
    cov_g4w5h3veu().f[31]++;
    cov_g4w5h3veu().s[156]++;
    try {
      const files =
      /* istanbul ignore next */
      (cov_g4w5h3veu().s[157]++, await fs.readdir(this.config.reportingConfig.outputDirectory));
      const cutoffDate =
      /* istanbul ignore next */
      (cov_g4w5h3veu().s[158]++, new Date());
      /* istanbul ignore next */
      cov_g4w5h3veu().s[159]++;
      cutoffDate.setDate(cutoffDate.getDate() - this.config.reportingConfig.retentionDays);
      /* istanbul ignore next */
      cov_g4w5h3veu().s[160]++;
      for (const file of files) {
        /* istanbul ignore next */
        cov_g4w5h3veu().s[161]++;
        if (file.startsWith('security-report-')) {
          /* istanbul ignore next */
          cov_g4w5h3veu().b[29][0]++;
          const filePath =
          /* istanbul ignore next */
          (cov_g4w5h3veu().s[162]++, path.join(this.config.reportingConfig.outputDirectory, file));
          const stats =
          /* istanbul ignore next */
          (cov_g4w5h3veu().s[163]++, await fs.stat(filePath));
          /* istanbul ignore next */
          cov_g4w5h3veu().s[164]++;
          if (stats.mtime < cutoffDate) {
            /* istanbul ignore next */
            cov_g4w5h3veu().b[30][0]++;
            cov_g4w5h3veu().s[165]++;
            await fs.unlink(filePath);
            /* istanbul ignore next */
            cov_g4w5h3veu().s[166]++;
            this.logger.info(`Deleted old security report`, {
              file
            });
          } else
          /* istanbul ignore next */
          {
            cov_g4w5h3veu().b[30][1]++;
          }
        } else
        /* istanbul ignore next */
        {
          cov_g4w5h3veu().b[29][1]++;
        }
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_g4w5h3veu().s[167]++;
      this.logger.error(`Failed to cleanup old reports`, {
        error
      });
    }
  }
  /**
   * Get active executions
   */
  getActiveExecutions() {
    /* istanbul ignore next */
    cov_g4w5h3veu().f[32]++;
    cov_g4w5h3veu().s[168]++;
    return Array.from(this.activeExecutions.values());
  }
  /**
   * Get scheduled tests
   */
  getScheduledTests() {
    /* istanbul ignore next */
    cov_g4w5h3veu().f[33]++;
    cov_g4w5h3veu().s[169]++;
    return this.config.schedules;
  }
  /**
   * Add new security test schedule
   */
  async addSecurityTestSchedule(schedule) {
    /* istanbul ignore next */
    cov_g4w5h3veu().f[34]++;
    cov_g4w5h3veu().s[170]++;
    this.config.schedules.push(schedule);
    /* istanbul ignore next */
    cov_g4w5h3veu().s[171]++;
    if (schedule.enabled) {
      /* istanbul ignore next */
      cov_g4w5h3veu().b[31][0]++;
      cov_g4w5h3veu().s[172]++;
      await this.scheduleSecurityTest(schedule);
    } else
    /* istanbul ignore next */
    {
      cov_g4w5h3veu().b[31][1]++;
    }
    cov_g4w5h3veu().s[173]++;
    this.logger.info(`Added new security test schedule`, {
      scheduleId: schedule.id,
      name: schedule.name
    });
  }
  /**
   * Remove security test schedule
   */
  async removeSecurityTestSchedule(scheduleId) {
    /* istanbul ignore next */
    cov_g4w5h3veu().f[35]++;
    const task =
    /* istanbul ignore next */
    (cov_g4w5h3veu().s[174]++, this.scheduledJobs.get(scheduleId));
    /* istanbul ignore next */
    cov_g4w5h3veu().s[175]++;
    if (task) {
      /* istanbul ignore next */
      cov_g4w5h3veu().b[32][0]++;
      cov_g4w5h3veu().s[176]++;
      task.stop();
      /* istanbul ignore next */
      cov_g4w5h3veu().s[177]++;
      this.scheduledJobs.delete(scheduleId);
    } else
    /* istanbul ignore next */
    {
      cov_g4w5h3veu().b[32][1]++;
    }
    cov_g4w5h3veu().s[178]++;
    this.config.schedules = this.config.schedules.filter(s => {
      /* istanbul ignore next */
      cov_g4w5h3veu().f[36]++;
      cov_g4w5h3veu().s[179]++;
      return s.id !== scheduleId;
    });
    /* istanbul ignore next */
    cov_g4w5h3veu().s[180]++;
    this.logger.info(`Removed security test schedule`, {
      scheduleId
    });
  }
  /**
   * Stop all scheduled tests
   */
  async stopAllScheduledTests() {
    /* istanbul ignore next */
    cov_g4w5h3veu().f[37]++;
    cov_g4w5h3veu().s[181]++;
    for (const [scheduleId, task] of this.scheduledJobs) {
      /* istanbul ignore next */
      cov_g4w5h3veu().s[182]++;
      task.stop();
      /* istanbul ignore next */
      cov_g4w5h3veu().s[183]++;
      this.logger.info(`Stopped scheduled test`, {
        scheduleId
      });
    }
    /* istanbul ignore next */
    cov_g4w5h3veu().s[184]++;
    this.scheduledJobs.clear();
  }
  /**
   * Shutdown the automated security testing suite
   */
  async shutdown() {
    /* istanbul ignore next */
    cov_g4w5h3veu().f[38]++;
    cov_g4w5h3veu().s[185]++;
    this.logger.info('Shutting down automated security testing suite');
    // Stop all scheduled tests
    /* istanbul ignore next */
    cov_g4w5h3veu().s[186]++;
    await this.stopAllScheduledTests();
    // Cancel active executions
    /* istanbul ignore next */
    cov_g4w5h3veu().s[187]++;
    for (const execution of this.activeExecutions.values()) {
      /* istanbul ignore next */
      cov_g4w5h3veu().s[188]++;
      execution.status = 'CANCELLED';
      /* istanbul ignore next */
      cov_g4w5h3veu().s[189]++;
      execution.endTime = new Date();
    }
    /* istanbul ignore next */
    cov_g4w5h3veu().s[190]++;
    this.activeExecutions.clear();
    /* istanbul ignore next */
    cov_g4w5h3veu().s[191]++;
    this.logger.info('Automated security testing suite shutdown complete');
  }
}
/* istanbul ignore next */
cov_g4w5h3veu().s[192]++;
exports.AutomatedSecurityTestingSuite = AutomatedSecurityTestingSuite;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,