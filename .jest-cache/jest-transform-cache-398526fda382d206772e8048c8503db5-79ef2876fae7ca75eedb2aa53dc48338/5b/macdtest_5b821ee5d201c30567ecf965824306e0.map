{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\tests\\trading\\strategies\\macd.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\tests\\trading\\strategies\\macd.test.ts"],"sourcesContent":["// =============================================================================\r\n// AI CRYPTO TRADING AGENT - MACD STRATEGY UNIT TESTS\r\n// =============================================================================\r\n// Comprehensive unit tests for MACD trend following strategy\r\n// Tests signal line crossovers, histogram analysis, and divergence detection\r\n// =============================================================================\r\n\r\nimport { MACDStrategy } from '@/trading/strategies/macd';\r\nimport { MACDSignal, TradingSignal } from '@/trading/strategies/types';\r\n\r\ndescribe('MACDStrategy', () => {\r\n  let strategy: MACDStrategy;\r\n\r\n  beforeEach(() => {\r\n    strategy = new MACDStrategy();\r\n  });\r\n\r\n  describe('calculateMACD', () => {\r\n    it('should calculate MACD correctly for trending market', () => {\r\n      // Create uptrending prices\r\n      const prices = Array.from({ length: 50 }, (_, i) => 100 + i * 0.5);\r\n      \r\n      const macd = strategy.calculateMACD(prices);\r\n      \r\n      expect(macd.macdLine).toHaveLength(prices.length);\r\n      expect(macd.signalLine).toHaveLength(prices.length);\r\n      expect(macd.histogram).toHaveLength(prices.length);\r\n      \r\n      // First 26 values should be null (need 26 periods for slow EMA)\r\n      expect(macd.macdLine.slice(0, 26).every(val => val === null)).toBe(true);\r\n      \r\n      // MACD line should be positive in uptrend\r\n      const lastMacd = macd.macdLine[macd.macdLine.length - 1];\r\n      expect(lastMacd).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('should calculate MACD correctly for downtrending market', () => {\r\n      const prices = Array.from({ length: 50 }, (_, i) => 150 - i * 0.5);\r\n      \r\n      const macd = strategy.calculateMACD(prices);\r\n      \r\n      // MACD line should be negative in downtrend\r\n      const lastMacd = macd.macdLine[macd.macdLine.length - 1];\r\n      expect(lastMacd).toBeLessThan(0);\r\n    });\r\n\r\n    it('should handle insufficient data', () => {\r\n      const prices = Array.from({ length: 20 }, (_, i) => 100 + i);\r\n      \r\n      const macd = strategy.calculateMACD(prices);\r\n      \r\n      expect(macd.macdLine.slice(0, 26).every(val => val === null)).toBe(true);\r\n    });\r\n\r\n    it('should calculate histogram correctly', () => {\r\n      const prices = Array.from({ length: 50 }, (_, i) => 100 + Math.sin(i / 5) * 10);\r\n      \r\n      const macd = strategy.calculateMACD(prices);\r\n      \r\n      // Histogram should be MACD line minus signal line\r\n      for (let i = 35; i < macd.histogram.length; i++) { // Start after signal line is available\r\n        if (macd.macdLine[i] !== null && macd.signalLine[i] !== null) {\r\n          expect(macd.histogram[i]).toBeCloseTo(\r\n            macd.macdLine[i]! - macd.signalLine[i]!, \r\n            6\r\n          );\r\n        }\r\n      }\r\n    });\r\n  });\r\n\r\n  describe('detectSignalCrossover', () => {\r\n    it('should detect bullish crossover', () => {\r\n      const macdLine = [null, null, -2, -1, 0, 1, 2];\r\n      const signalLine = [null, null, -1, -0.5, 0.5, 0.8, 1.5];\r\n      \r\n      const crossovers = strategy.detectSignalCrossover(macdLine, signalLine);\r\n      \r\n      expect(crossovers).toHaveLength(7);\r\n      expect(crossovers[4]).toBe('BULLISH'); // MACD crosses above signal\r\n    });\r\n\r\n    it('should detect bearish crossover', () => {\r\n      const macdLine = [null, null, 2, 1, 0, -1, -2];\r\n      const signalLine = [null, null, 1.5, 0.8, 0.5, -0.5, -1];\r\n      \r\n      const crossovers = strategy.detectSignalCrossover(macdLine, signalLine);\r\n      \r\n      expect(crossovers[4]).toBe('BEARISH'); // MACD crosses below signal\r\n    });\r\n\r\n    it('should handle null values correctly', () => {\r\n      const macdLine = [null, null, null, 1, 2];\r\n      const signalLine = [null, null, null, null, 1.5];\r\n      \r\n      const crossovers = strategy.detectSignalCrossover(macdLine, signalLine);\r\n      \r\n      expect(crossovers[0]).toBeNull();\r\n      expect(crossovers[1]).toBeNull();\r\n      expect(crossovers[2]).toBeNull();\r\n      expect(crossovers[3]).toBeNull();\r\n      expect(crossovers[4]).toBe('BULLISH');\r\n    });\r\n\r\n    it('should detect no crossover when lines move parallel', () => {\r\n      const macdLine = [null, null, 1, 2, 3, 4, 5];\r\n      const signalLine = [null, null, 0.5, 1.5, 2.5, 3.5, 4.5];\r\n      \r\n      const crossovers = strategy.detectSignalCrossover(macdLine, signalLine);\r\n      \r\n      expect(crossovers.slice(2).every(val => val === null)).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('analyzeHistogram', () => {\r\n    it('should detect increasing momentum', () => {\r\n      const histogram = [null, null, -2, -1, 0, 1, 2];\r\n      \r\n      const momentum = strategy.analyzeHistogram(histogram);\r\n      \r\n      expect(momentum).toBe('INCREASING');\r\n    });\r\n\r\n    it('should detect decreasing momentum', () => {\r\n      const histogram = [null, null, 2, 1, 0, -1, -2];\r\n      \r\n      const momentum = strategy.analyzeHistogram(histogram);\r\n      \r\n      expect(momentum).toBe('DECREASING');\r\n    });\r\n\r\n    it('should detect neutral momentum', () => {\r\n      const histogram = [null, null, 1, 1, 1, 1, 1];\r\n      \r\n      const momentum = strategy.analyzeHistogram(histogram);\r\n      \r\n      expect(momentum).toBe('NEUTRAL');\r\n    });\r\n\r\n    it('should handle insufficient data', () => {\r\n      const histogram = [null, null, 1];\r\n      \r\n      const momentum = strategy.analyzeHistogram(histogram);\r\n      \r\n      expect(momentum).toBe('NEUTRAL');\r\n    });\r\n  });\r\n\r\n  describe('detectMACDDivergence', () => {\r\n    it('should detect bullish divergence', () => {\r\n      const prices = [100, 95, 90, 85, 80, 85, 90, 95, 100];\r\n      const macdLine = [null, null, null, -2, -3, -2.5, -2, -1.5, -1];\r\n      \r\n      const divergence = strategy.detectMACDDivergence(prices, macdLine);\r\n      \r\n      expect(divergence).toBe('BULLISH'); // Price lower low, MACD higher low\r\n    });\r\n\r\n    it('should detect bearish divergence', () => {\r\n      const prices = [100, 105, 110, 115, 120, 115, 110, 105, 100];\r\n      const macdLine = [null, null, null, 2, 3, 2.5, 2, 1.5, 1];\r\n      \r\n      const divergence = strategy.detectMACDDivergence(prices, macdLine);\r\n      \r\n      expect(divergence).toBe('BEARISH'); // Price higher high, MACD lower high\r\n    });\r\n\r\n    it('should return null when no divergence', () => {\r\n      const prices = [100, 105, 110, 115, 120];\r\n      const macdLine = [null, null, null, 1, 2];\r\n      \r\n      const divergence = strategy.detectMACDDivergence(prices, macdLine);\r\n      \r\n      expect(divergence).toBeNull();\r\n    });\r\n  });\r\n\r\n  describe('generateSignal', () => {\r\n    it('should generate BUY signal for bullish crossover with increasing momentum', () => {\r\n      // Create data that results in bullish MACD crossover\r\n      const prices = Array.from({ length: 50 }, (_, i) => {\r\n        if (i < 25) return 100 - i * 0.5; // Downtrend first\r\n        return 87.5 + (i - 25) * 1; // Then uptrend\r\n      });\r\n      const volumes = Array.from({ length: 50 }, () => 1000);\r\n      \r\n      const marketData = {\r\n        symbol: 'BTC/USDT',\r\n        prices,\r\n        volumes,\r\n        timestamp: new Date()\r\n      };\r\n      \r\n      const signal = strategy.generateSignal(marketData);\r\n      \r\n      expect(signal).toBeDefined();\r\n      expect(signal.type).toBe('BUY');\r\n      expect(signal.symbol).toBe('BTC/USDT');\r\n      expect(signal.indicators).toContain('MACD');\r\n      expect(signal.strength).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('should generate SELL signal for bearish crossover', () => {\r\n      // Create data that results in bearish MACD crossover\r\n      const prices = Array.from({ length: 50 }, (_, i) => {\r\n        if (i < 25) return 100 + i * 0.5; // Uptrend first\r\n        return 112.5 - (i - 25) * 1; // Then downtrend\r\n      });\r\n      const volumes = Array.from({ length: 50 }, () => 1000);\r\n      \r\n      const marketData = {\r\n        symbol: 'ETH/USDT',\r\n        prices,\r\n        volumes,\r\n        timestamp: new Date()\r\n      };\r\n      \r\n      const signal = strategy.generateSignal(marketData);\r\n      \r\n      expect(signal).toBeDefined();\r\n      expect(signal.type).toBe('SELL');\r\n      expect(signal.symbol).toBe('ETH/USDT');\r\n      expect(signal.indicators).toContain('MACD');\r\n    });\r\n\r\n    it('should generate HOLD signal when no clear crossover', () => {\r\n      // Create sideways market\r\n      const prices = Array.from({ length: 50 }, (_, i) => 100 + Math.sin(i / 10) * 2);\r\n      const volumes = Array.from({ length: 50 }, () => 1000);\r\n      \r\n      const marketData = {\r\n        symbol: 'BTC/USDT',\r\n        prices,\r\n        volumes,\r\n        timestamp: new Date()\r\n      };\r\n      \r\n      const signal = strategy.generateSignal(marketData);\r\n      \r\n      expect(signal.type).toBe('HOLD');\r\n      expect(signal.strength).toBeLessThan(70);\r\n    });\r\n\r\n    it('should handle insufficient data gracefully', () => {\r\n      const marketData = {\r\n        symbol: 'BTC/USDT',\r\n        prices: Array.from({ length: 20 }, (_, i) => 100 + i),\r\n        volumes: Array.from({ length: 20 }, () => 1000),\r\n        timestamp: new Date()\r\n      };\r\n      \r\n      const signal = strategy.generateSignal(marketData);\r\n      \r\n      expect(signal.type).toBe('HOLD');\r\n      expect(signal.strength).toBe(0);\r\n      expect(signal.confidence).toBe(0);\r\n    });\r\n\r\n    it('should increase confidence with divergence confirmation', () => {\r\n      // Create bullish divergence scenario with sufficient data\r\n      const prices = Array.from({ length: 50 }, (_, i) => {\r\n        if (i < 25) return 100 - i * 2; // Strong downtrend\r\n        return 50 + (i - 25) * 0.5; // Weak recovery\r\n      });\r\n      const volumes = Array.from({ length: 50 }, () => 1000);\r\n      \r\n      const marketData = {\r\n        symbol: 'BTC/USDT',\r\n        prices,\r\n        volumes,\r\n        timestamp: new Date()\r\n      };\r\n      \r\n      const signal = strategy.generateSignal(marketData);\r\n      \r\n      if (signal.type !== 'HOLD') {\r\n        expect(signal.confidence).toBeGreaterThan(50);\r\n      }\r\n    });\r\n  });\r\n\r\n  describe('calculateSignalStrength', () => {\r\n    it('should calculate higher strength for strong crossovers', () => {\r\n      const macdValue = 2.5;\r\n      const signalValue = 1.0;\r\n      const crossoverType = 'BULLISH';\r\n      const momentum = 'INCREASING';\r\n      \r\n      const strength = strategy.calculateSignalStrength(\r\n        macdValue, \r\n        signalValue, \r\n        crossoverType, \r\n        momentum\r\n      );\r\n      \r\n      expect(strength).toBeGreaterThan(70);\r\n      expect(strength).toBeLessThanOrEqual(100);\r\n    });\r\n\r\n    it('should calculate lower strength for weak crossovers', () => {\r\n      const macdValue = 0.1;\r\n      const signalValue = 0.05;\r\n      const crossoverType = 'BULLISH';\r\n      const momentum = 'NEUTRAL';\r\n      \r\n      const strength = strategy.calculateSignalStrength(\r\n        macdValue, \r\n        signalValue, \r\n        crossoverType, \r\n        momentum\r\n      );\r\n      \r\n      expect(strength).toBeLessThan(50);\r\n      expect(strength).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('should return 0 for invalid crossover type', () => {\r\n      const strength = strategy.calculateSignalStrength(1, 0.5, 'INVALID' as any, 'INCREASING');\r\n      \r\n      expect(strength).toBe(0);\r\n    });\r\n  });\r\n\r\n  describe('Edge Cases and Error Handling', () => {\r\n    it('should handle NaN values in prices', () => {\r\n      const prices = Array.from({ length: 50 }, (_, i) => {\r\n        if (i === 25) return NaN;\r\n        return 100 + i * 0.5;\r\n      });\r\n      const volumes = Array.from({ length: 50 }, () => 1000);\r\n      \r\n      const marketData = {\r\n        symbol: 'BTC/USDT',\r\n        prices,\r\n        volumes,\r\n        timestamp: new Date()\r\n      };\r\n      \r\n      expect(() => strategy.generateSignal(marketData)).not.toThrow();\r\n    });\r\n\r\n    it('should handle extreme price volatility', () => {\r\n      const prices = Array.from({ length: 50 }, (_, i) => {\r\n        return 100 + (Math.random() - 0.5) * 200; // Very volatile\r\n      });\r\n      const volumes = Array.from({ length: 50 }, () => 1000);\r\n      \r\n      const marketData = {\r\n        symbol: 'BTC/USDT',\r\n        prices,\r\n        volumes,\r\n        timestamp: new Date()\r\n      };\r\n      \r\n      expect(() => strategy.generateSignal(marketData)).not.toThrow();\r\n    });\r\n\r\n    it('should validate configuration parameters', () => {\r\n      expect(() => new MACDStrategy({ fastPeriod: 0 })).toThrow();\r\n      expect(() => new MACDStrategy({ slowPeriod: 0 })).toThrow();\r\n      expect(() => new MACDStrategy({ signalPeriod: 0 })).toThrow();\r\n      expect(() => new MACDStrategy({ fastPeriod: 26, slowPeriod: 12 })).toThrow(); // Fast > slow\r\n    });\r\n\r\n    it('should handle identical prices', () => {\r\n      const prices = Array.from({ length: 50 }, () => 100); // No price movement\r\n      const volumes = Array.from({ length: 50 }, () => 1000);\r\n      \r\n      const marketData = {\r\n        symbol: 'BTC/USDT',\r\n        prices,\r\n        volumes,\r\n        timestamp: new Date()\r\n      };\r\n      \r\n      const signal = strategy.generateSignal(marketData);\r\n      \r\n      expect(signal.type).toBe('HOLD');\r\n      expect(signal.strength).toBe(0);\r\n    });\r\n  });\r\n\r\n  describe('Performance Tests', () => {\r\n    it('should handle large datasets efficiently', () => {\r\n      const prices = Array.from({ length: 1000 }, (_, i) => 100 + Math.sin(i / 20) * 50);\r\n      const volumes = Array.from({ length: 1000 }, () => 1000);\r\n      \r\n      const marketData = {\r\n        symbol: 'BTC/USDT',\r\n        prices,\r\n        volumes,\r\n        timestamp: new Date()\r\n      };\r\n      \r\n      const startTime = Date.now();\r\n      const signal = strategy.generateSignal(marketData);\r\n      const endTime = Date.now();\r\n      \r\n      expect(endTime - startTime).toBeLessThan(1000); // Should complete within 1 second\r\n      expect(signal).toBeDefined();\r\n    });\r\n\r\n    it('should produce consistent results for same input', () => {\r\n      const marketData = {\r\n        symbol: 'BTC/USDT',\r\n        prices: Array.from({ length: 50 }, (_, i) => 100 + Math.sin(i / 5) * 10),\r\n        volumes: Array.from({ length: 50 }, () => 1000),\r\n        timestamp: new Date()\r\n      };\r\n      \r\n      const signal1 = strategy.generateSignal(marketData);\r\n      const signal2 = strategy.generateSignal(marketData);\r\n      \r\n      expect(signal1.type).toBe(signal2.type);\r\n      expect(signal1.strength).toBe(signal2.strength);\r\n      expect(signal1.confidence).toBe(signal2.confidence);\r\n    });\r\n  });\r\n});"],"version":3}