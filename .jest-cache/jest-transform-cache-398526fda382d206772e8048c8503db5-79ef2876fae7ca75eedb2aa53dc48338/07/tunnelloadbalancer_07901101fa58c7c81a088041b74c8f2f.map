{"version":3,"names":["cov_1o33sj3qc1","actualCoverage","s","events_1","require","ssh_tunnel_manager_1","LoadBalancingStrategy","f","b","exports","TunnelLoadBalancer","EventEmitter","logger","tunnelManager","healthMonitor","stateTracker","config","tunnelWeights","loadBalancingStats","roundRobinIndex","weightAdjustmentTimer","isEnabled","constructor","Map","minActiveTunnels","maxActiveTunnels","strategy","HEALTH_BASED","healthThreshold","maxLatencyThreshold","enableFailover","failoverTimeout","enableDynamicWeights","weightAdjustmentInterval","totalRequests","requestsPerTunnel","averageResponseTime","failoverCount","lastFailover","activeStrategy","tunnelUtilization","setupEventListeners","info","enable","warn","initializeTunnelWeights","startWeightAdjustment","emit","disable","clearInterval","selectTunnel","excludeConnections","Error","availableTunnels","getAvailableTunnels","length","selectedConnection","selectionReason","ROUND_ROBIN","selectRoundRobin","LEAST_CONNECTIONS","selectLeastConnections","WEIGHTED_ROUND_ROBIN","selectWeightedRoundRobin","selectHealthBased","LATENCY_BASED","selectLatencyBased","RANDOM","selectRandom","healthMetrics","getHealthMetrics","id","tunnelWeight","get","selection","connection","reason","weight","healthScore","latency","selectionTime","Date","updateSelectionStats","debug","allConnections","getAllConnections","filter","includes","state","TunnelState","CONNECTED","performFailover","failedConnectionId","alternativeTunnel","error","getLoadBalancingStats","getTunnelWeights","updateTunnelWeight","connectionId","Math","max","min","lastUpdated","updateStrategy","oldStrategy","on","initializeTunnelWeight","delete","connections","has","baseWeight","performanceMultiplier","healthMultiplier","set","setInterval","adjustTunnelWeights","entries","latencyMultiplier","selected","reduce","least","current","leastRequests","currentRequests","totalWeight","sum","tunnel","random","best","bestHealth","currentHealth","bestLatency","Infinity","currentLatency","randomIndex","floor","tunnelId","requests","utilization","cleanup","clear"],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\tunnel-load-balancer.ts"],"sourcesContent":["import { EventEmitter } from 'events';\r\nimport { Logger } from '../core/logging/logger';\r\nimport { SSHTunnelManager, TunnelConnection, TunnelState } from './ssh-tunnel-manager';\r\nimport { TunnelHealthMonitor, TunnelHealthMetrics } from './tunnel-health-monitor';\r\nimport { TunnelStateTracker } from './tunnel-state-tracker';\r\n\r\n/**\r\n * Load balancing strategy types\r\n */\r\nexport enum LoadBalancingStrategy {\r\n  ROUND_ROBIN = 'ROUND_ROBIN',\r\n  LEAST_CONNECTIONS = 'LEAST_CONNECTIONS',\r\n  WEIGHTED_ROUND_ROBIN = 'WEIGHTED_ROUND_ROBIN',\r\n  HEALTH_BASED = 'HEALTH_BASED',\r\n  LATENCY_BASED = 'LATENCY_BASED',\r\n  RANDOM = 'RANDOM'\r\n}\r\n\r\n/**\r\n * Tunnel pool configuration\r\n */\r\nexport interface TunnelPoolConfig {\r\n  /** Minimum number of active tunnels */\r\n  minActiveTunnels: number;\r\n  /** Maximum number of active tunnels */\r\n  maxActiveTunnels: number;\r\n  /** Load balancing strategy */\r\n  strategy: LoadBalancingStrategy;\r\n  /** Health check threshold for tunnel selection */\r\n  healthThreshold: number;\r\n  /** Maximum latency threshold for tunnel selection */\r\n  maxLatencyThreshold: number;\r\n  /** Enable automatic failover */\r\n  enableFailover: boolean;\r\n  /** Failover timeout in milliseconds */\r\n  failoverTimeout: number;\r\n  /** Enable tunnel weight adjustment based on performance */\r\n  enableDynamicWeights: boolean;\r\n  /** Weight adjustment interval in milliseconds */\r\n  weightAdjustmentInterval: number;\r\n}\r\n\r\n/**\r\n * Tunnel weight information\r\n */\r\nexport interface TunnelWeight {\r\n  connectionId: string;\r\n  weight: number;\r\n  baseWeight: number;\r\n  performanceMultiplier: number;\r\n  healthMultiplier: number;\r\n  lastUpdated: Date;\r\n}\r\n\r\n/**\r\n * Load balancing statistics\r\n */\r\nexport interface LoadBalancingStats {\r\n  totalRequests: number;\r\n  requestsPerTunnel: Map<string, number>;\r\n  averageResponseTime: number;\r\n  failoverCount: number;\r\n  lastFailover: Date | null;\r\n  activeStrategy: LoadBalancingStrategy;\r\n  tunnelUtilization: Map<string, number>;\r\n}\r\n\r\n/**\r\n * Tunnel selection result\r\n */\r\nexport interface TunnelSelection {\r\n  connection: TunnelConnection;\r\n  reason: string;\r\n  weight: number;\r\n  healthScore: number;\r\n  latency: number;\r\n  selectionTime: Date;\r\n}\r\n\r\n/**\r\n * Tunnel Load Balancer\r\n * Implements intelligent load balancing and failover for multiple SSH tunnels\r\n */\r\nexport class TunnelLoadBalancer extends EventEmitter {\r\n  private logger: Logger;\r\n  private tunnelManager: SSHTunnelManager;\r\n  private healthMonitor: TunnelHealthMonitor;\r\n  private stateTracker: TunnelStateTracker;\r\n  private config: TunnelPoolConfig;\r\n  private tunnelWeights: Map<string, TunnelWeight>;\r\n  private loadBalancingStats: LoadBalancingStats;\r\n  private roundRobinIndex: number;\r\n  private weightAdjustmentTimer: NodeJS.Timeout | null;\r\n  private isEnabled: boolean;\r\n\r\n  constructor(\r\n    logger: Logger,\r\n    tunnelManager: SSHTunnelManager,\r\n    healthMonitor: TunnelHealthMonitor,\r\n    stateTracker: TunnelStateTracker,\r\n    config?: Partial<TunnelPoolConfig>\r\n  ) {\r\n    super();\r\n    this.logger = logger;\r\n    this.tunnelManager = tunnelManager;\r\n    this.healthMonitor = healthMonitor;\r\n    this.stateTracker = stateTracker;\r\n    this.tunnelWeights = new Map();\r\n    this.roundRobinIndex = 0;\r\n    this.weightAdjustmentTimer = null;\r\n    this.isEnabled = false;\r\n\r\n    // Default configuration\r\n    this.config = {\r\n      minActiveTunnels: 1,\r\n      maxActiveTunnels: 3,\r\n      strategy: LoadBalancingStrategy.HEALTH_BASED,\r\n      healthThreshold: 70,\r\n      maxLatencyThreshold: 1000,\r\n      enableFailover: true,\r\n      failoverTimeout: 30000,\r\n      enableDynamicWeights: true,\r\n      weightAdjustmentInterval: 60000,\r\n      ...config\r\n    };\r\n\r\n    // Initialize statistics\r\n    this.loadBalancingStats = {\r\n      totalRequests: 0,\r\n      requestsPerTunnel: new Map(),\r\n      averageResponseTime: 0,\r\n      failoverCount: 0,\r\n      lastFailover: null,\r\n      activeStrategy: this.config.strategy,\r\n      tunnelUtilization: new Map()\r\n    };\r\n\r\n    this.setupEventListeners();\r\n    this.logger.info('Tunnel Load Balancer initialized', this.config);\r\n  }\r\n\r\n  /**\r\n   * Enable load balancing\r\n   */\r\n  enable(): void {\r\n    if (this.isEnabled) {\r\n      this.logger.warn('Load balancing is already enabled');\r\n      return;\r\n    }\r\n\r\n    this.isEnabled = true;\r\n    this.logger.info('Load balancing enabled');\r\n\r\n    // Initialize tunnel weights\r\n    this.initializeTunnelWeights();\r\n\r\n    // Start dynamic weight adjustment if enabled\r\n    if (this.config.enableDynamicWeights) {\r\n      this.startWeightAdjustment();\r\n    }\r\n\r\n    this.emit('loadBalancingEnabled');\r\n  }\r\n\r\n  /**\r\n   * Disable load balancing\r\n   */\r\n  disable(): void {\r\n    if (!this.isEnabled) {\r\n      this.logger.warn('Load balancing is already disabled');\r\n      return;\r\n    }\r\n\r\n    this.isEnabled = false;\r\n    this.logger.info('Load balancing disabled');\r\n\r\n    // Stop weight adjustment\r\n    if (this.weightAdjustmentTimer) {\r\n      clearInterval(this.weightAdjustmentTimer);\r\n      this.weightAdjustmentTimer = null;\r\n    }\r\n\r\n    this.emit('loadBalancingDisabled');\r\n  }\r\n\r\n  /**\r\n   * Select the best tunnel for a request\r\n   * \r\n   * @param excludeConnections - Connection IDs to exclude from selection\r\n   * @returns Selected tunnel or null if none available\r\n   */\r\n  selectTunnel(excludeConnections: string[] = []): TunnelSelection | null {\r\n    if (!this.isEnabled) {\r\n      throw new Error('Load balancing is not enabled');\r\n    }\r\n\r\n    const availableTunnels = this.getAvailableTunnels(excludeConnections);\r\n    \r\n    if (availableTunnels.length === 0) {\r\n      this.logger.warn('No available tunnels for selection');\r\n      return null;\r\n    }\r\n\r\n    let selectedConnection: TunnelConnection;\r\n    let selectionReason: string;\r\n\r\n    switch (this.config.strategy) {\r\n      case LoadBalancingStrategy.ROUND_ROBIN:\r\n        selectedConnection = this.selectRoundRobin(availableTunnels);\r\n        selectionReason = 'Round robin selection';\r\n        break;\r\n\r\n      case LoadBalancingStrategy.LEAST_CONNECTIONS:\r\n        selectedConnection = this.selectLeastConnections(availableTunnels);\r\n        selectionReason = 'Least connections selection';\r\n        break;\r\n\r\n      case LoadBalancingStrategy.WEIGHTED_ROUND_ROBIN:\r\n        selectedConnection = this.selectWeightedRoundRobin(availableTunnels);\r\n        selectionReason = 'Weighted round robin selection';\r\n        break;\r\n\r\n      case LoadBalancingStrategy.HEALTH_BASED:\r\n        selectedConnection = this.selectHealthBased(availableTunnels);\r\n        selectionReason = 'Health-based selection';\r\n        break;\r\n\r\n      case LoadBalancingStrategy.LATENCY_BASED:\r\n        selectedConnection = this.selectLatencyBased(availableTunnels);\r\n        selectionReason = 'Latency-based selection';\r\n        break;\r\n\r\n      case LoadBalancingStrategy.RANDOM:\r\n        selectedConnection = this.selectRandom(availableTunnels);\r\n        selectionReason = 'Random selection';\r\n        break;\r\n\r\n      default:\r\n        selectedConnection = availableTunnels[0];\r\n        selectionReason = 'Default selection';\r\n    }\r\n\r\n    // Get additional metrics for the selection\r\n    const healthMetrics = this.healthMonitor.getHealthMetrics(selectedConnection.id);\r\n    const tunnelWeight = this.tunnelWeights.get(selectedConnection.id);\r\n\r\n    const selection: TunnelSelection = {\r\n      connection: selectedConnection,\r\n      reason: selectionReason,\r\n      weight: tunnelWeight?.weight || 1,\r\n      healthScore: healthMetrics?.healthScore || 0,\r\n      latency: healthMetrics?.latency || 0,\r\n      selectionTime: new Date()\r\n    };\r\n\r\n    // Update statistics\r\n    this.updateSelectionStats(selectedConnection.id);\r\n\r\n    this.logger.debug(`Tunnel selected: ${selectedConnection.id}`, {\r\n      strategy: this.config.strategy,\r\n      reason: selectionReason,\r\n      healthScore: selection.healthScore,\r\n      latency: selection.latency\r\n    });\r\n\r\n    this.emit('tunnelSelected', selection);\r\n    return selection;\r\n  }\r\n\r\n  /**\r\n   * Get available tunnels for load balancing\r\n   * \r\n   * @param excludeConnections - Connection IDs to exclude\r\n   * @returns Array of available tunnel connections\r\n   */\r\n  getAvailableTunnels(excludeConnections: string[] = []): TunnelConnection[] {\r\n    const allConnections = this.tunnelManager.getAllConnections();\r\n    \r\n    return allConnections.filter(connection => {\r\n      // Exclude specified connections\r\n      if (excludeConnections.includes(connection.id)) {\r\n        return false;\r\n      }\r\n\r\n      // Must be connected\r\n      if (connection.state !== TunnelState.CONNECTED) {\r\n        return false;\r\n      }\r\n\r\n      // Check health threshold\r\n      const healthMetrics = this.healthMonitor.getHealthMetrics(connection.id);\r\n      if (healthMetrics && healthMetrics.healthScore < this.config.healthThreshold) {\r\n        return false;\r\n      }\r\n\r\n      // Check latency threshold\r\n      if (healthMetrics && healthMetrics.latency > this.config.maxLatencyThreshold) {\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Perform failover to backup tunnels\r\n   * \r\n   * @param failedConnectionId - ID of the failed connection\r\n   * @returns New tunnel selection or null if no alternatives\r\n   */\r\n  async performFailover(failedConnectionId: string): Promise<TunnelSelection | null> {\r\n    if (!this.config.enableFailover) {\r\n      this.logger.warn('Failover is disabled');\r\n      return null;\r\n    }\r\n\r\n    this.logger.warn(`Performing failover from connection: ${failedConnectionId}`);\r\n\r\n    // Update failover statistics\r\n    this.loadBalancingStats.failoverCount++;\r\n    this.loadBalancingStats.lastFailover = new Date();\r\n\r\n    // Select alternative tunnel\r\n    const alternativeTunnel = this.selectTunnel([failedConnectionId]);\r\n    \r\n    if (!alternativeTunnel) {\r\n      this.logger.error('No alternative tunnels available for failover');\r\n      this.emit('failoverFailed', failedConnectionId);\r\n      return null;\r\n    }\r\n\r\n    this.logger.info(`Failover successful: ${failedConnectionId} -> ${alternativeTunnel.connection.id}`);\r\n    this.emit('failoverSuccessful', failedConnectionId, alternativeTunnel);\r\n\r\n    return alternativeTunnel;\r\n  }\r\n\r\n  /**\r\n   * Get load balancing statistics\r\n   * \r\n   * @returns Current load balancing statistics\r\n   */\r\n  getLoadBalancingStats(): LoadBalancingStats {\r\n    return { ...this.loadBalancingStats };\r\n  }\r\n\r\n  /**\r\n   * Get tunnel weights\r\n   * \r\n   * @returns Map of tunnel weights\r\n   */\r\n  getTunnelWeights(): Map<string, TunnelWeight> {\r\n    return new Map(this.tunnelWeights);\r\n  }\r\n\r\n  /**\r\n   * Update tunnel weight manually\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @param weight - New weight value\r\n   */\r\n  updateTunnelWeight(connectionId: string, weight: number): void {\r\n    const tunnelWeight = this.tunnelWeights.get(connectionId);\r\n    if (!tunnelWeight) {\r\n      this.logger.warn(`Tunnel weight not found: ${connectionId}`);\r\n      return;\r\n    }\r\n\r\n    tunnelWeight.weight = Math.max(0.1, Math.min(10, weight)); // Clamp between 0.1 and 10\r\n    tunnelWeight.lastUpdated = new Date();\r\n\r\n    this.logger.info(`Updated tunnel weight: ${connectionId}`, { weight: tunnelWeight.weight });\r\n    this.emit('tunnelWeightUpdated', connectionId, tunnelWeight);\r\n  }\r\n\r\n  /**\r\n   * Update load balancing strategy\r\n   * \r\n   * @param strategy - New load balancing strategy\r\n   */\r\n  updateStrategy(strategy: LoadBalancingStrategy): void {\r\n    const oldStrategy = this.config.strategy;\r\n    this.config.strategy = strategy;\r\n    this.loadBalancingStats.activeStrategy = strategy;\r\n\r\n    // Reset round robin index when changing strategy\r\n    if (strategy === LoadBalancingStrategy.ROUND_ROBIN || strategy === LoadBalancingStrategy.WEIGHTED_ROUND_ROBIN) {\r\n      this.roundRobinIndex = 0;\r\n    }\r\n\r\n    this.logger.info(`Load balancing strategy updated: ${oldStrategy} -> ${strategy}`);\r\n    this.emit('strategyUpdated', oldStrategy, strategy);\r\n  }\r\n\r\n  /**\r\n   * Setup event listeners\r\n   */\r\n  private setupEventListeners(): void {\r\n    // Listen for tunnel connections\r\n    this.tunnelManager.on('tunnelConnected', (connection) => {\r\n      this.initializeTunnelWeight(connection.id);\r\n    });\r\n\r\n    // Listen for tunnel disconnections\r\n    this.tunnelManager.on('tunnelDisconnected', (connection) => {\r\n      this.tunnelWeights.delete(connection.id);\r\n    });\r\n\r\n    // Listen for health changes\r\n    this.healthMonitor.on('connectionUnhealthy', (connection) => {\r\n      if (this.config.enableFailover) {\r\n        this.performFailover(connection.id);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Initialize tunnel weights for all connections\r\n   */\r\n  private initializeTunnelWeights(): void {\r\n    const connections = this.tunnelManager.getAllConnections();\r\n    \r\n    for (const connection of connections) {\r\n      this.initializeTunnelWeight(connection.id);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialize weight for a specific tunnel\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   */\r\n  private initializeTunnelWeight(connectionId: string): void {\r\n    if (this.tunnelWeights.has(connectionId)) {\r\n      return;\r\n    }\r\n\r\n    const weight: TunnelWeight = {\r\n      connectionId,\r\n      weight: 1.0,\r\n      baseWeight: 1.0,\r\n      performanceMultiplier: 1.0,\r\n      healthMultiplier: 1.0,\r\n      lastUpdated: new Date()\r\n    };\r\n\r\n    this.tunnelWeights.set(connectionId, weight);\r\n    this.loadBalancingStats.requestsPerTunnel.set(connectionId, 0);\r\n    this.loadBalancingStats.tunnelUtilization.set(connectionId, 0);\r\n\r\n    this.logger.debug(`Initialized tunnel weight: ${connectionId}`);\r\n  }\r\n\r\n  /**\r\n   * Start dynamic weight adjustment\r\n   */\r\n  private startWeightAdjustment(): void {\r\n    if (this.weightAdjustmentTimer) {\r\n      clearInterval(this.weightAdjustmentTimer);\r\n    }\r\n\r\n    this.weightAdjustmentTimer = setInterval(() => {\r\n      this.adjustTunnelWeights();\r\n    }, this.config.weightAdjustmentInterval);\r\n\r\n    this.logger.info('Started dynamic weight adjustment');\r\n  }\r\n\r\n  /**\r\n   * Adjust tunnel weights based on performance\r\n   */\r\n  private adjustTunnelWeights(): void {\r\n    for (const [connectionId, weight] of this.tunnelWeights.entries()) {\r\n      const healthMetrics = this.healthMonitor.getHealthMetrics(connectionId);\r\n      if (!healthMetrics) continue;\r\n\r\n      // Calculate performance multiplier based on latency and health\r\n      const latencyMultiplier = Math.max(0.1, 1 - (healthMetrics.latency / this.config.maxLatencyThreshold));\r\n      const healthMultiplier = Math.max(0.1, healthMetrics.healthScore / 100);\r\n\r\n      weight.performanceMultiplier = latencyMultiplier;\r\n      weight.healthMultiplier = healthMultiplier;\r\n      weight.weight = weight.baseWeight * weight.performanceMultiplier * weight.healthMultiplier;\r\n      weight.lastUpdated = new Date();\r\n\r\n      this.logger.debug(`Adjusted tunnel weight: ${connectionId}`, {\r\n        weight: weight.weight,\r\n        latencyMultiplier,\r\n        healthMultiplier\r\n      });\r\n    }\r\n\r\n    this.emit('weightsAdjusted', this.tunnelWeights);\r\n  }\r\n\r\n  /**\r\n   * Select tunnel using round robin strategy\r\n   * \r\n   * @param availableTunnels - Available tunnel connections\r\n   * @returns Selected tunnel connection\r\n   */\r\n  private selectRoundRobin(availableTunnels: TunnelConnection[]): TunnelConnection {\r\n    const selected = availableTunnels[this.roundRobinIndex % availableTunnels.length];\r\n    this.roundRobinIndex = (this.roundRobinIndex + 1) % availableTunnels.length;\r\n    return selected;\r\n  }\r\n\r\n  /**\r\n   * Select tunnel using least connections strategy\r\n   * \r\n   * @param availableTunnels - Available tunnel connections\r\n   * @returns Selected tunnel connection\r\n   */\r\n  private selectLeastConnections(availableTunnels: TunnelConnection[]): TunnelConnection {\r\n    return availableTunnels.reduce((least, current) => {\r\n      const leastRequests = this.loadBalancingStats.requestsPerTunnel.get(least.id) || 0;\r\n      const currentRequests = this.loadBalancingStats.requestsPerTunnel.get(current.id) || 0;\r\n      return currentRequests < leastRequests ? current : least;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Select tunnel using weighted round robin strategy\r\n   * \r\n   * @param availableTunnels - Available tunnel connections\r\n   * @returns Selected tunnel connection\r\n   */\r\n  private selectWeightedRoundRobin(availableTunnels: TunnelConnection[]): TunnelConnection {\r\n    // Calculate total weight\r\n    const totalWeight = availableTunnels.reduce((sum, tunnel) => {\r\n      const weight = this.tunnelWeights.get(tunnel.id)?.weight || 1;\r\n      return sum + weight;\r\n    }, 0);\r\n\r\n    // Generate random number\r\n    let random = Math.random() * totalWeight;\r\n\r\n    // Select based on weight\r\n    for (const tunnel of availableTunnels) {\r\n      const weight = this.tunnelWeights.get(tunnel.id)?.weight || 1;\r\n      random -= weight;\r\n      if (random <= 0) {\r\n        return tunnel;\r\n      }\r\n    }\r\n\r\n    // Fallback to first tunnel\r\n    return availableTunnels[0];\r\n  }\r\n\r\n  /**\r\n   * Select tunnel using health-based strategy\r\n   * \r\n   * @param availableTunnels - Available tunnel connections\r\n   * @returns Selected tunnel connection\r\n   */\r\n  private selectHealthBased(availableTunnels: TunnelConnection[]): TunnelConnection {\r\n    return availableTunnels.reduce((best, current) => {\r\n      const bestHealth = this.healthMonitor.getHealthMetrics(best.id)?.healthScore || 0;\r\n      const currentHealth = this.healthMonitor.getHealthMetrics(current.id)?.healthScore || 0;\r\n      return currentHealth > bestHealth ? current : best;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Select tunnel using latency-based strategy\r\n   * \r\n   * @param availableTunnels - Available tunnel connections\r\n   * @returns Selected tunnel connection\r\n   */\r\n  private selectLatencyBased(availableTunnels: TunnelConnection[]): TunnelConnection {\r\n    return availableTunnels.reduce((best, current) => {\r\n      const bestLatency = this.healthMonitor.getHealthMetrics(best.id)?.latency || Infinity;\r\n      const currentLatency = this.healthMonitor.getHealthMetrics(current.id)?.latency || Infinity;\r\n      return currentLatency < bestLatency ? current : best;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Select tunnel using random strategy\r\n   * \r\n   * @param availableTunnels - Available tunnel connections\r\n   * @returns Selected tunnel connection\r\n   */\r\n  private selectRandom(availableTunnels: TunnelConnection[]): TunnelConnection {\r\n    const randomIndex = Math.floor(Math.random() * availableTunnels.length);\r\n    return availableTunnels[randomIndex];\r\n  }\r\n\r\n  /**\r\n   * Update selection statistics\r\n   * \r\n   * @param connectionId - Selected connection ID\r\n   */\r\n  private updateSelectionStats(connectionId: string): void {\r\n    this.loadBalancingStats.totalRequests++;\r\n    \r\n    const currentRequests = this.loadBalancingStats.requestsPerTunnel.get(connectionId) || 0;\r\n    this.loadBalancingStats.requestsPerTunnel.set(connectionId, currentRequests + 1);\r\n\r\n    // Update utilization\r\n    const totalRequests = this.loadBalancingStats.totalRequests;\r\n    for (const [tunnelId, requests] of this.loadBalancingStats.requestsPerTunnel.entries()) {\r\n      const utilization = (requests / totalRequests) * 100;\r\n      this.loadBalancingStats.tunnelUtilization.set(tunnelId, utilization);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cleanup load balancer resources\r\n   */\r\n  cleanup(): void {\r\n    this.disable();\r\n    this.tunnelWeights.clear();\r\n    this.loadBalancingStats.requestsPerTunnel.clear();\r\n    this.loadBalancingStats.tunnelUtilization.clear();\r\n    this.logger.info('Tunnel load balancer cleanup completed');\r\n  }\r\n}\r\n"],"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","ignoreList":[]}