{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\tests\\trading\\strategies\\conflict-resolution-validation.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\tests\\trading\\strategies\\conflict-resolution-validation.test.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * STRATEGY CONFLICT RESOLUTION VALIDATION TESTS\r\n * =============================================================================\r\n * \r\n * Comprehensive tests for strategy conflict detection and resolution mechanisms.\r\n * These tests validate that the harmonization engine correctly identifies,\r\n * analyzes, and resolves conflicts between different trading indicators.\r\n * \r\n * Requirements: 17.9, 17.10 - Conflict detection and resolution testing\r\n * \r\n * CRITICAL FEATURES:\r\n * - Conflict detection accuracy\r\n * - Resolution mechanism validation\r\n * - Weighted scoring conflict resolution\r\n * - Multi-indicator conflict scenarios\r\n * - Edge case handling\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport { describe, test, expect, beforeEach, jest } from '@jest/globals';\r\nimport { StrategyHarmonizationEngine } from '../../../trading/strategies/harmonization';\r\nimport { \r\n  MarketData, \r\n  TradingSignal, \r\n  HarmonizedSignal, \r\n  StrategyConfig \r\n} from '../../../trading/strategies/types';\r\n\r\ndescribe('Strategy Conflict Resolution Validation', () => {\r\n  let harmonizationEngine: StrategyHarmonizationEngine;\r\n  let mockMarketData: MarketData[];\r\n\r\n  beforeEach(() => {\r\n    harmonizationEngine = new StrategyHarmonizationEngine();\r\n    mockMarketData = generateMockMarketData();\r\n  });\r\n\r\n  describe('Conflict Detection Accuracy', () => {\r\n    test('should detect strong opposing signals', () => {\r\n      const strongOpposingSignals: TradingSignal[] = [\r\n        {\r\n          id: '1',\r\n          symbol: 'BTC/USDT',\r\n          type: 'BUY',\r\n          strength: 85,\r\n          confidence: 80,\r\n          indicators: ['RSI'],\r\n          reasoning: 'Strong RSI oversold signal',\r\n          riskReward: 2.5,\r\n          timestamp: new Date()\r\n        },\r\n        {\r\n          id: '2',\r\n          symbol: 'BTC/USDT',\r\n          type: 'SELL',\r\n          strength: 90,\r\n          confidence: 85,\r\n          indicators: ['MACD'],\r\n          reasoning: 'Strong MACD bearish crossover',\r\n          riskReward: 2.2,\r\n          timestamp: new Date()\r\n        }\r\n      ];\r\n\r\n      jest.spyOn(harmonizationEngine, 'generateAllSignals').mockReturnValue(strongOpposingSignals);\r\n\r\n      const harmonizedSignal = harmonizationEngine.harmonizeSignals(mockMarketData);\r\n      \r\n      expect(harmonizedSignal).toBeDefined();\r\n      if (harmonizedSignal) {\r\n        expect(harmonizedSignal.conflicts.length).toBeGreaterThan(0);\r\n        expect(harmonizedSignal.conflicts.some(c => \r\n          c.includes('Strong conflicting signals') || c.includes('conflicting')\r\n        )).toBe(true);\r\n        \r\n        // Should include both indicators in conflict description\r\n        const conflictText = harmonizedSignal.conflicts.join(' ');\r\n        expect(conflictText.includes('RSI') || conflictText.includes('MACD')).toBe(true);\r\n      }\r\n    });\r\n\r\n    test('should detect momentum vs trend conflicts', () => {\r\n      const momentumTrendConflict: TradingSignal[] = [\r\n        {\r\n          id: '1',\r\n          symbol: 'BTC/USDT',\r\n          type: 'BUY',\r\n          strength: 75,\r\n          confidence: 70,\r\n          indicators: ['RSI'], // Momentum indicator\r\n          reasoning: 'RSI showing oversold momentum',\r\n          riskReward: 2.0,\r\n          timestamp: new Date()\r\n        },\r\n        {\r\n          id: '2',\r\n          symbol: 'BTC/USDT',\r\n          type: 'SELL',\r\n          strength: 80,\r\n          confidence: 75,\r\n          indicators: ['EMA'], // Trend indicator\r\n          reasoning: 'EMA showing bearish trend',\r\n          riskReward: 1.8,\r\n          timestamp: new Date()\r\n        }\r\n      ];\r\n\r\n      jest.spyOn(harmonizationEngine, 'generateAllSignals').mockReturnValue(momentumTrendConflict);\r\n\r\n      const harmonizedSignal = harmonizationEngine.harmonizeSignals(mockMarketData);\r\n      \r\n      expect(harmonizedSignal).toBeDefined();\r\n      if (harmonizedSignal) {\r\n        expect(harmonizedSignal.conflicts.some(c => \r\n          c.includes('Momentum vs Trend') || c.includes('momentum') || c.includes('trend')\r\n        )).toBe(true);\r\n      }\r\n    });\r\n\r\n    test('should detect multiple indicator conflicts', () => {\r\n      const multipleConflicts: TradingSignal[] = [\r\n        {\r\n          id: '1',\r\n          symbol: 'BTC/USDT',\r\n          type: 'BUY',\r\n          strength: 80,\r\n          confidence: 75,\r\n          indicators: ['RSI'],\r\n          reasoning: 'RSI oversold',\r\n          riskReward: 2.0,\r\n          timestamp: new Date()\r\n        },\r\n        {\r\n          id: '2',\r\n          symbol: 'BTC/USDT',\r\n          type: 'SELL',\r\n          strength: 85,\r\n          confidence: 80,\r\n          indicators: ['MACD'],\r\n          reasoning: 'MACD bearish',\r\n          riskReward: 1.9,\r\n          timestamp: new Date()\r\n        },\r\n        {\r\n          id: '3',\r\n          symbol: 'BTC/USDT',\r\n          type: 'BUY',\r\n          strength: 70,\r\n          confidence: 65,\r\n          indicators: ['Fibonacci'],\r\n          reasoning: 'Fibonacci support',\r\n          riskReward: 1.8,\r\n          timestamp: new Date()\r\n        },\r\n        {\r\n          id: '4',\r\n          symbol: 'BTC/USDT',\r\n          type: 'SELL',\r\n          strength: 75,\r\n          confidence: 70,\r\n          indicators: ['Breakout'],\r\n          reasoning: 'Breakout failure',\r\n          riskReward: 1.7,\r\n          timestamp: new Date()\r\n        }\r\n      ];\r\n\r\n      jest.spyOn(harmonizationEngine, 'generateAllSignals').mockReturnValue(multipleConflicts);\r\n\r\n      const harmonizedSignal = harmonizationEngine.harmonizeSignals(mockMarketData);\r\n      \r\n      expect(harmonizedSignal).toBeDefined();\r\n      if (harmonizedSignal) {\r\n        // Should detect multiple conflicts\r\n        expect(harmonizedSignal.conflicts.length).toBeGreaterThan(0);\r\n        \r\n        // Should handle complex conflict scenarios\r\n        expect(harmonizedSignal.reasoning).toContain('conflict');\r\n        expect(harmonizedSignal.confidence).toBeLessThan(80); // Confidence should be reduced due to conflicts\r\n      }\r\n    });\r\n\r\n    test('should not detect conflicts in aligned signals', () => {\r\n      const alignedSignals: TradingSignal[] = [\r\n        {\r\n          id: '1',\r\n          symbol: 'BTC/USDT',\r\n          type: 'BUY',\r\n          strength: 75,\r\n          confidence: 70,\r\n          indicators: ['RSI'],\r\n          reasoning: 'RSI oversold',\r\n          riskReward: 2.0,\r\n          timestamp: new Date()\r\n        },\r\n        {\r\n          id: '2',\r\n          symbol: 'BTC/USDT',\r\n          type: 'BUY',\r\n          strength: 80,\r\n          confidence: 75,\r\n          indicators: ['MACD'],\r\n          reasoning: 'MACD bullish crossover',\r\n          riskReward: 1.9,\r\n          timestamp: new Date()\r\n        },\r\n        {\r\n          id: '3',\r\n          symbol: 'BTC/USDT',\r\n          type: 'BUY',\r\n          strength: 70,\r\n          confidence: 65,\r\n          indicators: ['EMA'],\r\n          reasoning: 'EMA bullish trend',\r\n          riskReward: 1.8,\r\n          timestamp: new Date()\r\n        }\r\n      ];\r\n\r\n      jest.spyOn(harmonizationEngine, 'generateAllSignals').mockReturnValue(alignedSignals);\r\n\r\n      const harmonizedSignal = harmonizationEngine.harmonizeSignals(mockMarketData);\r\n      \r\n      expect(harmonizedSignal).toBeDefined();\r\n      if (harmonizedSignal) {\r\n        // Should have minimal or no conflicts\r\n        expect(harmonizedSignal.conflicts.length).toBe(0);\r\n        expect(harmonizedSignal.overallSignal).toBe('BUY');\r\n        expect(harmonizedSignal.confidence).toBeGreaterThan(70); // High confidence due to alignment\r\n      }\r\n    });\r\n\r\n    test('should detect weak signal conflicts', () => {\r\n      const weakConflictingSignals: TradingSignal[] = [\r\n        {\r\n          id: '1',\r\n          symbol: 'BTC/USDT',\r\n          type: 'BUY',\r\n          strength: 45, // Weak signal\r\n          confidence: 50,\r\n          indicators: ['RSI'],\r\n          reasoning: 'Weak RSI signal',\r\n          riskReward: 1.2,\r\n          timestamp: new Date()\r\n        },\r\n        {\r\n          id: '2',\r\n          symbol: 'BTC/USDT',\r\n          type: 'SELL',\r\n          strength: 40, // Weak signal\r\n          confidence: 45,\r\n          indicators: ['MACD'],\r\n          reasoning: 'Weak MACD signal',\r\n          riskReward: 1.1,\r\n          timestamp: new Date()\r\n        }\r\n      ];\r\n\r\n      jest.spyOn(harmonizationEngine, 'generateAllSignals').mockReturnValue(weakConflictingSignals);\r\n\r\n      const harmonizedSignal = harmonizationEngine.harmonizeSignals(mockMarketData);\r\n      \r\n      expect(harmonizedSignal).toBeDefined();\r\n      if (harmonizedSignal) {\r\n        // Should prefer HOLD for weak conflicting signals\r\n        expect(harmonizedSignal.overallSignal).toBe('HOLD');\r\n        expect(harmonizedSignal.confidence).toBeLessThan(60);\r\n      }\r\n    });\r\n  });\r\n\r\n  describe('Resolution Mechanism Validation', () => {\r\n    test('should resolve conflicts through weighted scoring', () => {\r\n      const conflictingSignals: TradingSignal[] = [\r\n        {\r\n          id: '1',\r\n          symbol: 'BTC/USDT',\r\n          type: 'BUY',\r\n          strength: 70,\r\n          confidence: 65,\r\n          indicators: ['RSI'],\r\n          reasoning: 'RSI oversold',\r\n          riskReward: 2.0,\r\n          timestamp: new Date()\r\n        },\r\n        {\r\n          id: '2',\r\n          symbol: 'BTC/USDT',\r\n          type: 'SELL',\r\n          strength: 60,\r\n          confidence: 55,\r\n          indicators: ['MACD'],\r\n          reasoning: 'MACD bearish',\r\n          riskReward: 1.5,\r\n          timestamp: new Date()\r\n        }\r\n      ];\r\n\r\n      jest.spyOn(harmonizationEngine, 'generateAllSignals').mockReturnValue(conflictingSignals);\r\n\r\n      // Test with RSI heavily weighted\r\n      const rsiWeightedConfig = {\r\n        rsi: { name: 'RSI', enabled: true, weight: 0.8, parameters: {} },\r\n        macd: { name: 'MACD', enabled: true, weight: 0.2, parameters: {} }\r\n      };\r\n\r\n      const rsiWeightedSignal = harmonizationEngine.harmonizeSignals(mockMarketData, rsiWeightedConfig);\r\n      \r\n      // Test with MACD heavily weighted\r\n      const macdWeightedConfig = {\r\n        rsi: { name: 'RSI', enabled: true, weight: 0.2, parameters: {} },\r\n        macd: { name: 'MACD', enabled: true, weight: 0.8, parameters: {} }\r\n      };\r\n\r\n      const macdWeightedSignal = harmonizationEngine.harmonizeSignals(mockMarketData, macdWeightedConfig);\r\n      \r\n      expect(rsiWeightedSignal).toBeDefined();\r\n      expect(macdWeightedSignal).toBeDefined();\r\n      \r\n      if (rsiWeightedSignal && macdWeightedSignal) {\r\n        // Both signals should make valid decisions\r\n        expect(['BUY', 'SELL', 'HOLD']).toContain(rsiWeightedSignal.overallSignal);\r\n        expect(['BUY', 'SELL', 'HOLD']).toContain(macdWeightedSignal.overallSignal);\r\n        \r\n        // Weights should be reflected in the harmonized signals\r\n        expect(rsiWeightedSignal.weights).toBeDefined();\r\n        expect(macdWeightedSignal.weights).toBeDefined();\r\n        \r\n        // The weighted signals should have different characteristics\r\n        expect(rsiWeightedSignal.reasoning).toContain('indicators');\r\n        expect(macdWeightedSignal.reasoning).toContain('indicators');\r\n      }\r\n    });\r\n\r\n    test('should resolve conflicts based on signal strength', () => {\r\n      const strengthBasedConflict: TradingSignal[] = [\r\n        {\r\n          id: '1',\r\n          symbol: 'BTC/USDT',\r\n          type: 'BUY',\r\n          strength: 90, // Very strong\r\n          confidence: 85,\r\n          indicators: ['RSI'],\r\n          reasoning: 'Very strong RSI oversold',\r\n          riskReward: 2.5,\r\n          timestamp: new Date()\r\n        },\r\n        {\r\n          id: '2',\r\n          symbol: 'BTC/USDT',\r\n          type: 'SELL',\r\n          strength: 55, // Moderate\r\n          confidence: 50,\r\n          indicators: ['MACD'],\r\n          reasoning: 'Moderate MACD bearish',\r\n          riskReward: 1.3,\r\n          timestamp: new Date()\r\n        }\r\n      ];\r\n\r\n      jest.spyOn(harmonizationEngine, 'generateAllSignals').mockReturnValue(strengthBasedConflict);\r\n\r\n      const harmonizedSignal = harmonizationEngine.harmonizeSignals(mockMarketData);\r\n      \r\n      expect(harmonizedSignal).toBeDefined();\r\n      if (harmonizedSignal) {\r\n        // Should make a decision based on signal strength\r\n        expect(['BUY', 'SELL', 'HOLD']).toContain(harmonizedSignal.overallSignal);\r\n        expect(harmonizedSignal.strength).toBeGreaterThan(0);\r\n        \r\n        // May or may not detect conflicts depending on threshold\r\n        expect(harmonizedSignal.conflicts.length).toBeGreaterThanOrEqual(0);\r\n      }\r\n    });\r\n\r\n    test('should resolve conflicts based on confidence levels', () => {\r\n      const confidenceBasedConflict: TradingSignal[] = [\r\n        {\r\n          id: '1',\r\n          symbol: 'BTC/USDT',\r\n          type: 'BUY',\r\n          strength: 70,\r\n          confidence: 90, // Very high confidence\r\n          indicators: ['RSI'],\r\n          reasoning: 'High confidence RSI signal',\r\n          riskReward: 2.0,\r\n          timestamp: new Date()\r\n        },\r\n        {\r\n          id: '2',\r\n          symbol: 'BTC/USDT',\r\n          type: 'SELL',\r\n          strength: 75,\r\n          confidence: 45, // Low confidence\r\n          indicators: ['MACD'],\r\n          reasoning: 'Low confidence MACD signal',\r\n          riskReward: 1.8,\r\n          timestamp: new Date()\r\n        }\r\n      ];\r\n\r\n      jest.spyOn(harmonizationEngine, 'generateAllSignals').mockReturnValue(confidenceBasedConflict);\r\n\r\n      const harmonizedSignal = harmonizationEngine.harmonizeSignals(mockMarketData);\r\n      \r\n      expect(harmonizedSignal).toBeDefined();\r\n      if (harmonizedSignal) {\r\n        // Should make a decision based on confidence levels\r\n        expect(['BUY', 'SELL', 'HOLD']).toContain(harmonizedSignal.overallSignal);\r\n        expect(harmonizedSignal.confidence).toBeGreaterThan(0);\r\n      }\r\n    });\r\n\r\n    test('should handle equal strength conflicts', () => {\r\n      const equalStrengthConflict: TradingSignal[] = [\r\n        {\r\n          id: '1',\r\n          symbol: 'BTC/USDT',\r\n          type: 'BUY',\r\n          strength: 75,\r\n          confidence: 70,\r\n          indicators: ['RSI'],\r\n          reasoning: 'Equal strength buy signal',\r\n          riskReward: 2.0,\r\n          timestamp: new Date()\r\n        },\r\n        {\r\n          id: '2',\r\n          symbol: 'BTC/USDT',\r\n          type: 'SELL',\r\n          strength: 75,\r\n          confidence: 70,\r\n          indicators: ['MACD'],\r\n          reasoning: 'Equal strength sell signal',\r\n          riskReward: 2.0,\r\n          timestamp: new Date()\r\n        }\r\n      ];\r\n\r\n      jest.spyOn(harmonizationEngine, 'generateAllSignals').mockReturnValue(equalStrengthConflict);\r\n\r\n      const harmonizedSignal = harmonizationEngine.harmonizeSignals(mockMarketData);\r\n      \r\n      expect(harmonizedSignal).toBeDefined();\r\n      if (harmonizedSignal) {\r\n        // Should prefer HOLD when signals are equally strong and conflicting\r\n        expect(harmonizedSignal.overallSignal).toBe('HOLD');\r\n        expect(harmonizedSignal.conflicts.length).toBeGreaterThan(0);\r\n        expect(harmonizedSignal.reasoning).toContain('conflict');\r\n      }\r\n    });\r\n  });\r\n\r\n  describe('Multi-Indicator Conflict Scenarios', () => {\r\n    test('should handle three-way conflicts', () => {\r\n      const threeWayConflict: TradingSignal[] = [\r\n        {\r\n          id: '1',\r\n          symbol: 'BTC/USDT',\r\n          type: 'BUY',\r\n          strength: 70,\r\n          confidence: 65,\r\n          indicators: ['RSI'],\r\n          reasoning: 'RSI buy signal',\r\n          riskReward: 2.0,\r\n          timestamp: new Date()\r\n        },\r\n        {\r\n          id: '2',\r\n          symbol: 'BTC/USDT',\r\n          type: 'SELL',\r\n          strength: 75,\r\n          confidence: 70,\r\n          indicators: ['MACD'],\r\n          reasoning: 'MACD sell signal',\r\n          riskReward: 1.8,\r\n          timestamp: new Date()\r\n        },\r\n        {\r\n          id: '3',\r\n          symbol: 'BTC/USDT',\r\n          type: 'HOLD',\r\n          strength: 65,\r\n          confidence: 60,\r\n          indicators: ['EMA'],\r\n          reasoning: 'EMA neutral signal',\r\n          riskReward: 1.0,\r\n          timestamp: new Date()\r\n        }\r\n      ];\r\n\r\n      jest.spyOn(harmonizationEngine, 'generateAllSignals').mockReturnValue(threeWayConflict);\r\n\r\n      const harmonizedSignal = harmonizationEngine.harmonizeSignals(mockMarketData);\r\n      \r\n      expect(harmonizedSignal).toBeDefined();\r\n      if (harmonizedSignal) {\r\n        // Should handle three-way conflict appropriately\r\n        expect(['BUY', 'SELL', 'HOLD']).toContain(harmonizedSignal.overallSignal);\r\n        expect(harmonizedSignal.conflicts.length).toBeGreaterThanOrEqual(0);\r\n        expect(harmonizedSignal.confidence).toBeGreaterThan(0);\r\n      }\r\n    });\r\n\r\n    test('should handle majority vs minority conflicts', () => {\r\n      const majorityMinorityConflict: TradingSignal[] = [\r\n        {\r\n          id: '1',\r\n          symbol: 'BTC/USDT',\r\n          type: 'BUY',\r\n          strength: 70,\r\n          confidence: 65,\r\n          indicators: ['RSI'],\r\n          reasoning: 'RSI buy signal',\r\n          riskReward: 2.0,\r\n          timestamp: new Date()\r\n        },\r\n        {\r\n          id: '2',\r\n          symbol: 'BTC/USDT',\r\n          type: 'BUY',\r\n          strength: 75,\r\n          confidence: 70,\r\n          indicators: ['MACD'],\r\n          reasoning: 'MACD buy signal',\r\n          riskReward: 1.9,\r\n          timestamp: new Date()\r\n        },\r\n        {\r\n          id: '3',\r\n          symbol: 'BTC/USDT',\r\n          type: 'BUY',\r\n          strength: 68,\r\n          confidence: 63,\r\n          indicators: ['Fibonacci'],\r\n          reasoning: 'Fibonacci buy signal',\r\n          riskReward: 1.8,\r\n          timestamp: new Date()\r\n        },\r\n        {\r\n          id: '4',\r\n          symbol: 'BTC/USDT',\r\n          type: 'SELL',\r\n          strength: 85, // Strong minority signal\r\n          confidence: 80,\r\n          indicators: ['Breakout'],\r\n          reasoning: 'Strong breakout sell signal',\r\n          riskReward: 2.2,\r\n          timestamp: new Date()\r\n        }\r\n      ];\r\n\r\n      jest.spyOn(harmonizationEngine, 'generateAllSignals').mockReturnValue(majorityMinorityConflict);\r\n\r\n      const harmonizedSignal = harmonizationEngine.harmonizeSignals(mockMarketData);\r\n      \r\n      expect(harmonizedSignal).toBeDefined();\r\n      if (harmonizedSignal) {\r\n        // Should consider both majority consensus and minority strength\r\n        expect(['BUY', 'HOLD']).toContain(harmonizedSignal.overallSignal);\r\n        expect(harmonizedSignal.conflicts.length).toBeGreaterThan(0);\r\n        \r\n        // Reasoning should mention the conflict\r\n        expect(harmonizedSignal.reasoning).toContain('conflict');\r\n      }\r\n    });\r\n\r\n    test('should handle cascading conflicts', () => {\r\n      const cascadingConflicts: TradingSignal[] = [\r\n        {\r\n          id: '1',\r\n          symbol: 'BTC/USDT',\r\n          type: 'BUY',\r\n          strength: 80,\r\n          confidence: 75,\r\n          indicators: ['RSI', 'Stochastic'], // Multiple indicators in one signal\r\n          reasoning: 'Multiple momentum indicators bullish',\r\n          riskReward: 2.1,\r\n          timestamp: new Date()\r\n        },\r\n        {\r\n          id: '2',\r\n          symbol: 'BTC/USDT',\r\n          type: 'SELL',\r\n          strength: 85,\r\n          confidence: 80,\r\n          indicators: ['MACD', 'Signal Line'], // Multiple indicators in one signal\r\n          reasoning: 'Multiple trend indicators bearish',\r\n          riskReward: 2.0,\r\n          timestamp: new Date()\r\n        }\r\n      ];\r\n\r\n      jest.spyOn(harmonizationEngine, 'generateAllSignals').mockReturnValue(cascadingConflicts);\r\n\r\n      const harmonizedSignal = harmonizationEngine.harmonizeSignals(mockMarketData);\r\n      \r\n      expect(harmonizedSignal).toBeDefined();\r\n      if (harmonizedSignal) {\r\n        // Should handle complex multi-indicator conflicts\r\n        expect(harmonizedSignal.conflicts.length).toBeGreaterThan(0);\r\n        expect(harmonizedSignal.reasoning).toContain('conflict');\r\n        \r\n        // Should still make a decision\r\n        expect(['BUY', 'SELL', 'HOLD']).toContain(harmonizedSignal.overallSignal);\r\n      }\r\n    });\r\n  });\r\n\r\n  describe('Edge Case Handling', () => {\r\n    test('should handle single signal (no conflicts)', () => {\r\n      const singleSignal: TradingSignal[] = [\r\n        {\r\n          id: '1',\r\n          symbol: 'BTC/USDT',\r\n          type: 'BUY',\r\n          strength: 75,\r\n          confidence: 70,\r\n          indicators: ['RSI'],\r\n          reasoning: 'Single RSI signal',\r\n          riskReward: 2.0,\r\n          timestamp: new Date()\r\n        }\r\n      ];\r\n\r\n      jest.spyOn(harmonizationEngine, 'generateAllSignals').mockReturnValue(singleSignal);\r\n\r\n      const harmonizedSignal = harmonizationEngine.harmonizeSignals(mockMarketData);\r\n      \r\n      expect(harmonizedSignal).toBeDefined();\r\n      if (harmonizedSignal) {\r\n        expect(harmonizedSignal.conflicts.length).toBe(0);\r\n        expect(harmonizedSignal.overallSignal).toBe('BUY');\r\n        expect(harmonizedSignal.confidence).toBeGreaterThan(60); // Allow for confidence calculation variations\r\n      }\r\n    });\r\n\r\n    test('should handle empty signals', () => {\r\n      jest.spyOn(harmonizationEngine, 'generateAllSignals').mockReturnValue([]);\r\n\r\n      const harmonizedSignal = harmonizationEngine.harmonizeSignals(mockMarketData);\r\n      \r\n      expect(harmonizedSignal).toBeNull();\r\n    });\r\n\r\n    test('should handle signals with missing metadata', () => {\r\n      const signalsWithoutMetadata: TradingSignal[] = [\r\n        {\r\n          id: '1',\r\n          symbol: 'BTC/USDT',\r\n          type: 'BUY',\r\n          strength: 75,\r\n          confidence: 70,\r\n          indicators: ['RSI'],\r\n          reasoning: 'RSI signal without metadata',\r\n          riskReward: 2.0,\r\n          timestamp: new Date()\r\n          // No metadata property\r\n        },\r\n        {\r\n          id: '2',\r\n          symbol: 'BTC/USDT',\r\n          type: 'SELL',\r\n          strength: 65,\r\n          confidence: 60,\r\n          indicators: ['MACD'],\r\n          reasoning: 'MACD signal without metadata',\r\n          riskReward: 1.8,\r\n          timestamp: new Date()\r\n          // No metadata property\r\n        }\r\n      ];\r\n\r\n      jest.spyOn(harmonizationEngine, 'generateAllSignals').mockReturnValue(signalsWithoutMetadata);\r\n\r\n      const harmonizedSignal = harmonizationEngine.harmonizeSignals(mockMarketData);\r\n      \r\n      expect(harmonizedSignal).toBeDefined();\r\n      if (harmonizedSignal) {\r\n        // Should handle missing metadata gracefully\r\n        expect(harmonizedSignal.indicators).toBeDefined();\r\n        expect(Array.isArray(harmonizedSignal.indicators)).toBe(true);\r\n        expect(harmonizedSignal.conflicts.length).toBeGreaterThanOrEqual(0);\r\n      }\r\n    });\r\n\r\n    test('should handle extreme signal values', () => {\r\n      const extremeSignals: TradingSignal[] = [\r\n        {\r\n          id: '1',\r\n          symbol: 'BTC/USDT',\r\n          type: 'BUY',\r\n          strength: 100, // Maximum strength\r\n          confidence: 100, // Maximum confidence\r\n          indicators: ['RSI'],\r\n          reasoning: 'Extreme buy signal',\r\n          riskReward: 10.0, // Very high RR\r\n          timestamp: new Date()\r\n        },\r\n        {\r\n          id: '2',\r\n          symbol: 'BTC/USDT',\r\n          type: 'SELL',\r\n          strength: 0, // Minimum strength\r\n          confidence: 0, // Minimum confidence\r\n          indicators: ['MACD'],\r\n          reasoning: 'Extreme sell signal',\r\n          riskReward: 0.1, // Very low RR\r\n          timestamp: new Date()\r\n        }\r\n      ];\r\n\r\n      jest.spyOn(harmonizationEngine, 'generateAllSignals').mockReturnValue(extremeSignals);\r\n\r\n      const harmonizedSignal = harmonizationEngine.harmonizeSignals(mockMarketData);\r\n      \r\n      expect(harmonizedSignal).toBeDefined();\r\n      if (harmonizedSignal) {\r\n        // Should handle extreme values without crashing\r\n        expect(harmonizedSignal.strength).toBeGreaterThanOrEqual(0);\r\n        expect(harmonizedSignal.strength).toBeLessThanOrEqual(100);\r\n        expect(harmonizedSignal.confidence).toBeGreaterThanOrEqual(0);\r\n        expect(harmonizedSignal.confidence).toBeLessThanOrEqual(100);\r\n        \r\n        // Should favor the stronger signal\r\n        expect(harmonizedSignal.overallSignal).toBe('BUY');\r\n      }\r\n    });\r\n\r\n    test('should handle identical signals', () => {\r\n      const identicalSignals: TradingSignal[] = [\r\n        {\r\n          id: '1',\r\n          symbol: 'BTC/USDT',\r\n          type: 'BUY',\r\n          strength: 75,\r\n          confidence: 70,\r\n          indicators: ['RSI'],\r\n          reasoning: 'Identical signal 1',\r\n          riskReward: 2.0,\r\n          timestamp: new Date()\r\n        },\r\n        {\r\n          id: '2',\r\n          symbol: 'BTC/USDT',\r\n          type: 'BUY',\r\n          strength: 75,\r\n          confidence: 70,\r\n          indicators: ['RSI'],\r\n          reasoning: 'Identical signal 2',\r\n          riskReward: 2.0,\r\n          timestamp: new Date()\r\n        }\r\n      ];\r\n\r\n      jest.spyOn(harmonizationEngine, 'generateAllSignals').mockReturnValue(identicalSignals);\r\n\r\n      const harmonizedSignal = harmonizationEngine.harmonizeSignals(mockMarketData);\r\n      \r\n      expect(harmonizedSignal).toBeDefined();\r\n      if (harmonizedSignal) {\r\n        // Should handle identical signals without conflicts\r\n        expect(harmonizedSignal.conflicts.length).toBe(0);\r\n        expect(harmonizedSignal.overallSignal).toBe('BUY');\r\n        expect(harmonizedSignal.confidence).toBeGreaterThan(70); // Should be higher due to consensus\r\n      }\r\n    });\r\n  });\r\n\r\n  describe('Conflict Resolution Performance', () => {\r\n    test('should resolve conflicts efficiently with many signals', () => {\r\n      // Generate many conflicting signals\r\n      const manyConflictingSignals: TradingSignal[] = [];\r\n      \r\n      for (let i = 0; i < 50; i++) {\r\n        manyConflictingSignals.push({\r\n          id: `${i}`,\r\n          symbol: 'BTC/USDT',\r\n          type: i % 2 === 0 ? 'BUY' : 'SELL',\r\n          strength: 50 + Math.random() * 40,\r\n          confidence: 50 + Math.random() * 40,\r\n          indicators: [`Indicator${i % 5}`],\r\n          reasoning: `Signal ${i}`,\r\n          riskReward: 1.5 + Math.random(),\r\n          timestamp: new Date()\r\n        });\r\n      }\r\n\r\n      jest.spyOn(harmonizationEngine, 'generateAllSignals').mockReturnValue(manyConflictingSignals);\r\n\r\n      const startTime = Date.now();\r\n      const harmonizedSignal = harmonizationEngine.harmonizeSignals(mockMarketData);\r\n      const endTime = Date.now();\r\n      \r\n      const processingTime = endTime - startTime;\r\n      \r\n      // Should complete within reasonable time (less than 1 second)\r\n      expect(processingTime).toBeLessThan(1000);\r\n      \r\n      expect(harmonizedSignal).toBeDefined();\r\n      if (harmonizedSignal) {\r\n        expect(harmonizedSignal.conflicts.length).toBeGreaterThan(0);\r\n        expect(['BUY', 'SELL', 'HOLD']).toContain(harmonizedSignal.overallSignal);\r\n      }\r\n    });\r\n\r\n    test('should maintain consistency in conflict resolution', () => {\r\n      const consistentConflictSignals: TradingSignal[] = [\r\n        {\r\n          id: '1',\r\n          symbol: 'BTC/USDT',\r\n          type: 'BUY',\r\n          strength: 70,\r\n          confidence: 65,\r\n          indicators: ['RSI'],\r\n          reasoning: 'Consistent test signal',\r\n          riskReward: 2.0,\r\n          timestamp: new Date()\r\n        },\r\n        {\r\n          id: '2',\r\n          symbol: 'BTC/USDT',\r\n          type: 'SELL',\r\n          strength: 60,\r\n          confidence: 55,\r\n          indicators: ['MACD'],\r\n          reasoning: 'Consistent test signal',\r\n          riskReward: 1.5,\r\n          timestamp: new Date()\r\n        }\r\n      ];\r\n\r\n      jest.spyOn(harmonizationEngine, 'generateAllSignals').mockReturnValue(consistentConflictSignals);\r\n\r\n      // Run harmonization multiple times\r\n      const results = [\r\n        harmonizationEngine.harmonizeSignals(mockMarketData),\r\n        harmonizationEngine.harmonizeSignals(mockMarketData),\r\n        harmonizationEngine.harmonizeSignals(mockMarketData)\r\n      ];\r\n\r\n      // Results should be consistent\r\n      expect(results[0]).toBeDefined();\r\n      expect(results[1]).toBeDefined();\r\n      expect(results[2]).toBeDefined();\r\n      \r\n      if (results[0] && results[1] && results[2]) {\r\n        expect(results[0].overallSignal).toBe(results[1].overallSignal);\r\n        expect(results[1].overallSignal).toBe(results[2].overallSignal);\r\n        \r\n        expect(Math.abs(results[0].strength - results[1].strength)).toBeLessThan(0.1);\r\n        expect(Math.abs(results[0].confidence - results[1].confidence)).toBeLessThan(0.1);\r\n        \r\n        expect(results[0].conflicts.length).toBe(results[1].conflicts.length);\r\n        expect(results[1].conflicts.length).toBe(results[2].conflicts.length);\r\n      }\r\n    });\r\n  });\r\n\r\n  // Helper function to generate mock market data\r\n  function generateMockMarketData(): MarketData[] {\r\n    const data: MarketData[] = [];\r\n    let basePrice = 50000;\r\n    \r\n    for (let i = 0; i < 50; i++) {\r\n      const price = basePrice + (Math.sin(i * 0.1) * 1000) + (Math.random() * 200 - 100);\r\n      data.push({\r\n        symbol: 'BTC/USDT',\r\n        timestamp: new Date(Date.now() - (50 - i) * 60000),\r\n        open: price - 10,\r\n        high: price + 50,\r\n        low: price - 50,\r\n        close: price,\r\n        volume: 1000000 + (Math.random() * 500000)\r\n      });\r\n    }\r\n    \r\n    return data;\r\n  }\r\n});"],"version":3}