7d8d7504c2c361d1d5e1e4449a309732
"use strict";

/* istanbul ignore next */
function cov_1o33sj3qc1() {
  var path = "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\tunnel-load-balancer.ts";
  var hash = "807423b9280b8d624ecca4b7b0a8878486b1f000";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\tunnel-load-balancer.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 68
        }
      },
      "2": {
        start: {
          line: 4,
          column: 17
        },
        end: {
          line: 4,
          column: 34
        }
      },
      "3": {
        start: {
          line: 5,
          column: 29
        },
        end: {
          line: 5,
          column: 60
        }
      },
      "4": {
        start: {
          line: 10,
          column: 0
        },
        end: {
          line: 17,
          column: 90
        }
      },
      "5": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 11,
          column: 57
        }
      },
      "6": {
        start: {
          line: 12,
          column: 4
        },
        end: {
          line: 12,
          column: 69
        }
      },
      "7": {
        start: {
          line: 13,
          column: 4
        },
        end: {
          line: 13,
          column: 75
        }
      },
      "8": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 14,
          column: 59
        }
      },
      "9": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 15,
          column: 61
        }
      },
      "10": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 16,
          column: 47
        }
      },
      "11": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 16
        }
      },
      "12": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 35,
          column: 29
        }
      },
      "13": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 36,
          column: 43
        }
      },
      "14": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 43
        }
      },
      "15": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 38,
          column: 41
        }
      },
      "16": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 39
        }
      },
      "17": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 33
        }
      },
      "18": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 41,
          column: 42
        }
      },
      "19": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 42,
          column: 31
        }
      },
      "20": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 55,
          column: 10
        }
      },
      "21": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 65,
          column: 10
        }
      },
      "22": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 66,
          column: 35
        }
      },
      "23": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 67,
          column: 74
        }
      },
      "24": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 76,
          column: 9
        }
      },
      "25": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 74,
          column: 66
        }
      },
      "26": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 75,
          column: 19
        }
      },
      "27": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 77,
          column: 30
        }
      },
      "28": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 78,
          column: 51
        }
      },
      "29": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 80,
          column: 39
        }
      },
      "30": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 84,
          column: 9
        }
      },
      "31": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 83,
          column: 41
        }
      },
      "32": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 85,
          column: 42
        }
      },
      "33": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 94,
          column: 9
        }
      },
      "34": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 92,
          column: 67
        }
      },
      "35": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 19
        }
      },
      "36": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 95,
          column: 31
        }
      },
      "37": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 96,
          column: 52
        }
      },
      "38": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 101,
          column: 9
        }
      },
      "39": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 99,
          column: 54
        }
      },
      "40": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 100,
          column: 46
        }
      },
      "41": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 102,
          column: 43
        }
      },
      "42": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 113,
          column: 9
        }
      },
      "43": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 112,
          column: 61
        }
      },
      "44": {
        start: {
          line: 114,
          column: 33
        },
        end: {
          line: 114,
          column: 77
        }
      },
      "45": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 118,
          column: 9
        }
      },
      "46": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 116,
          column: 67
        }
      },
      "47": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 117,
          column: 24
        }
      },
      "48": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 149,
          column: 9
        }
      },
      "49": {
        start: {
          line: 123,
          column: 16
        },
        end: {
          line: 123,
          column: 77
        }
      },
      "50": {
        start: {
          line: 124,
          column: 16
        },
        end: {
          line: 124,
          column: 58
        }
      },
      "51": {
        start: {
          line: 125,
          column: 16
        },
        end: {
          line: 125,
          column: 22
        }
      },
      "52": {
        start: {
          line: 127,
          column: 16
        },
        end: {
          line: 127,
          column: 83
        }
      },
      "53": {
        start: {
          line: 128,
          column: 16
        },
        end: {
          line: 128,
          column: 64
        }
      },
      "54": {
        start: {
          line: 129,
          column: 16
        },
        end: {
          line: 129,
          column: 22
        }
      },
      "55": {
        start: {
          line: 131,
          column: 16
        },
        end: {
          line: 131,
          column: 85
        }
      },
      "56": {
        start: {
          line: 132,
          column: 16
        },
        end: {
          line: 132,
          column: 67
        }
      },
      "57": {
        start: {
          line: 133,
          column: 16
        },
        end: {
          line: 133,
          column: 22
        }
      },
      "58": {
        start: {
          line: 135,
          column: 16
        },
        end: {
          line: 135,
          column: 78
        }
      },
      "59": {
        start: {
          line: 136,
          column: 16
        },
        end: {
          line: 136,
          column: 59
        }
      },
      "60": {
        start: {
          line: 137,
          column: 16
        },
        end: {
          line: 137,
          column: 22
        }
      },
      "61": {
        start: {
          line: 139,
          column: 16
        },
        end: {
          line: 139,
          column: 79
        }
      },
      "62": {
        start: {
          line: 140,
          column: 16
        },
        end: {
          line: 140,
          column: 60
        }
      },
      "63": {
        start: {
          line: 141,
          column: 16
        },
        end: {
          line: 141,
          column: 22
        }
      },
      "64": {
        start: {
          line: 143,
          column: 16
        },
        end: {
          line: 143,
          column: 73
        }
      },
      "65": {
        start: {
          line: 144,
          column: 16
        },
        end: {
          line: 144,
          column: 53
        }
      },
      "66": {
        start: {
          line: 145,
          column: 16
        },
        end: {
          line: 145,
          column: 22
        }
      },
      "67": {
        start: {
          line: 147,
          column: 16
        },
        end: {
          line: 147,
          column: 57
        }
      },
      "68": {
        start: {
          line: 148,
          column: 16
        },
        end: {
          line: 148,
          column: 54
        }
      },
      "69": {
        start: {
          line: 151,
          column: 30
        },
        end: {
          line: 151,
          column: 88
        }
      },
      "70": {
        start: {
          line: 152,
          column: 29
        },
        end: {
          line: 152,
          column: 74
        }
      },
      "71": {
        start: {
          line: 153,
          column: 26
        },
        end: {
          line: 160,
          column: 9
        }
      },
      "72": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 162,
          column: 57
        }
      },
      "73": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 168,
          column: 11
        }
      },
      "74": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 169,
          column: 47
        }
      },
      "75": {
        start: {
          line: 170,
          column: 8
        },
        end: {
          line: 170,
          column: 25
        }
      },
      "76": {
        start: {
          line: 179,
          column: 31
        },
        end: {
          line: 179,
          column: 69
        }
      },
      "77": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 199,
          column: 11
        }
      },
      "78": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 184,
          column: 13
        }
      },
      "79": {
        start: {
          line: 183,
          column: 16
        },
        end: {
          line: 183,
          column: 29
        }
      },
      "80": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 188,
          column: 13
        }
      },
      "81": {
        start: {
          line: 187,
          column: 16
        },
        end: {
          line: 187,
          column: 29
        }
      },
      "82": {
        start: {
          line: 190,
          column: 34
        },
        end: {
          line: 190,
          column: 84
        }
      },
      "83": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 193,
          column: 13
        }
      },
      "84": {
        start: {
          line: 192,
          column: 16
        },
        end: {
          line: 192,
          column: 29
        }
      },
      "85": {
        start: {
          line: 195,
          column: 12
        },
        end: {
          line: 197,
          column: 13
        }
      },
      "86": {
        start: {
          line: 196,
          column: 16
        },
        end: {
          line: 196,
          column: 29
        }
      },
      "87": {
        start: {
          line: 198,
          column: 12
        },
        end: {
          line: 198,
          column: 24
        }
      },
      "88": {
        start: {
          line: 208,
          column: 8
        },
        end: {
          line: 211,
          column: 9
        }
      },
      "89": {
        start: {
          line: 209,
          column: 12
        },
        end: {
          line: 209,
          column: 53
        }
      },
      "90": {
        start: {
          line: 210,
          column: 12
        },
        end: {
          line: 210,
          column: 24
        }
      },
      "91": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 212,
          column: 87
        }
      },
      "92": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 214,
          column: 48
        }
      },
      "93": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 215,
          column: 58
        }
      },
      "94": {
        start: {
          line: 217,
          column: 34
        },
        end: {
          line: 217,
          column: 73
        }
      },
      "95": {
        start: {
          line: 218,
          column: 8
        },
        end: {
          line: 222,
          column: 9
        }
      },
      "96": {
        start: {
          line: 219,
          column: 12
        },
        end: {
          line: 219,
          column: 79
        }
      },
      "97": {
        start: {
          line: 220,
          column: 12
        },
        end: {
          line: 220,
          column: 60
        }
      },
      "98": {
        start: {
          line: 221,
          column: 12
        },
        end: {
          line: 221,
          column: 24
        }
      },
      "99": {
        start: {
          line: 223,
          column: 8
        },
        end: {
          line: 223,
          column: 109
        }
      },
      "100": {
        start: {
          line: 224,
          column: 8
        },
        end: {
          line: 224,
          column: 79
        }
      },
      "101": {
        start: {
          line: 225,
          column: 8
        },
        end: {
          line: 225,
          column: 33
        }
      },
      "102": {
        start: {
          line: 233,
          column: 8
        },
        end: {
          line: 233,
          column: 46
        }
      },
      "103": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 241,
          column: 43
        }
      },
      "104": {
        start: {
          line: 250,
          column: 29
        },
        end: {
          line: 250,
          column: 65
        }
      },
      "105": {
        start: {
          line: 251,
          column: 8
        },
        end: {
          line: 254,
          column: 9
        }
      },
      "106": {
        start: {
          line: 252,
          column: 12
        },
        end: {
          line: 252,
          column: 73
        }
      },
      "107": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 253,
          column: 19
        }
      },
      "108": {
        start: {
          line: 255,
          column: 8
        },
        end: {
          line: 255,
          column: 66
        }
      },
      "109": {
        start: {
          line: 256,
          column: 8
        },
        end: {
          line: 256,
          column: 46
        }
      },
      "110": {
        start: {
          line: 257,
          column: 8
        },
        end: {
          line: 257,
          column: 100
        }
      },
      "111": {
        start: {
          line: 258,
          column: 8
        },
        end: {
          line: 258,
          column: 69
        }
      },
      "112": {
        start: {
          line: 266,
          column: 28
        },
        end: {
          line: 266,
          column: 48
        }
      },
      "113": {
        start: {
          line: 267,
          column: 8
        },
        end: {
          line: 267,
          column: 40
        }
      },
      "114": {
        start: {
          line: 268,
          column: 8
        },
        end: {
          line: 268,
          column: 58
        }
      },
      "115": {
        start: {
          line: 270,
          column: 8
        },
        end: {
          line: 272,
          column: 9
        }
      },
      "116": {
        start: {
          line: 271,
          column: 12
        },
        end: {
          line: 271,
          column: 37
        }
      },
      "117": {
        start: {
          line: 273,
          column: 8
        },
        end: {
          line: 273,
          column: 91
        }
      },
      "118": {
        start: {
          line: 274,
          column: 8
        },
        end: {
          line: 274,
          column: 60
        }
      },
      "119": {
        start: {
          line: 281,
          column: 8
        },
        end: {
          line: 283,
          column: 11
        }
      },
      "120": {
        start: {
          line: 282,
          column: 12
        },
        end: {
          line: 282,
          column: 55
        }
      },
      "121": {
        start: {
          line: 285,
          column: 8
        },
        end: {
          line: 287,
          column: 11
        }
      },
      "122": {
        start: {
          line: 286,
          column: 12
        },
        end: {
          line: 286,
          column: 53
        }
      },
      "123": {
        start: {
          line: 289,
          column: 8
        },
        end: {
          line: 293,
          column: 11
        }
      },
      "124": {
        start: {
          line: 290,
          column: 12
        },
        end: {
          line: 292,
          column: 13
        }
      },
      "125": {
        start: {
          line: 291,
          column: 16
        },
        end: {
          line: 291,
          column: 52
        }
      },
      "126": {
        start: {
          line: 299,
          column: 28
        },
        end: {
          line: 299,
          column: 66
        }
      },
      "127": {
        start: {
          line: 300,
          column: 8
        },
        end: {
          line: 302,
          column: 9
        }
      },
      "128": {
        start: {
          line: 301,
          column: 12
        },
        end: {
          line: 301,
          column: 55
        }
      },
      "129": {
        start: {
          line: 310,
          column: 8
        },
        end: {
          line: 312,
          column: 9
        }
      },
      "130": {
        start: {
          line: 311,
          column: 12
        },
        end: {
          line: 311,
          column: 19
        }
      },
      "131": {
        start: {
          line: 313,
          column: 23
        },
        end: {
          line: 320,
          column: 9
        }
      },
      "132": {
        start: {
          line: 321,
          column: 8
        },
        end: {
          line: 321,
          column: 53
        }
      },
      "133": {
        start: {
          line: 322,
          column: 8
        },
        end: {
          line: 322,
          column: 71
        }
      },
      "134": {
        start: {
          line: 323,
          column: 8
        },
        end: {
          line: 323,
          column: 71
        }
      },
      "135": {
        start: {
          line: 324,
          column: 8
        },
        end: {
          line: 324,
          column: 72
        }
      },
      "136": {
        start: {
          line: 330,
          column: 8
        },
        end: {
          line: 332,
          column: 9
        }
      },
      "137": {
        start: {
          line: 331,
          column: 12
        },
        end: {
          line: 331,
          column: 54
        }
      },
      "138": {
        start: {
          line: 333,
          column: 8
        },
        end: {
          line: 335,
          column: 49
        }
      },
      "139": {
        start: {
          line: 334,
          column: 12
        },
        end: {
          line: 334,
          column: 39
        }
      },
      "140": {
        start: {
          line: 336,
          column: 8
        },
        end: {
          line: 336,
          column: 62
        }
      },
      "141": {
        start: {
          line: 342,
          column: 8
        },
        end: {
          line: 358,
          column: 9
        }
      },
      "142": {
        start: {
          line: 343,
          column: 34
        },
        end: {
          line: 343,
          column: 83
        }
      },
      "143": {
        start: {
          line: 344,
          column: 12
        },
        end: {
          line: 345,
          column: 25
        }
      },
      "144": {
        start: {
          line: 345,
          column: 16
        },
        end: {
          line: 345,
          column: 25
        }
      },
      "145": {
        start: {
          line: 347,
          column: 38
        },
        end: {
          line: 347,
          column: 114
        }
      },
      "146": {
        start: {
          line: 348,
          column: 37
        },
        end: {
          line: 348,
          column: 83
        }
      },
      "147": {
        start: {
          line: 349,
          column: 12
        },
        end: {
          line: 349,
          column: 61
        }
      },
      "148": {
        start: {
          line: 350,
          column: 12
        },
        end: {
          line: 350,
          column: 55
        }
      },
      "149": {
        start: {
          line: 351,
          column: 12
        },
        end: {
          line: 351,
          column: 103
        }
      },
      "150": {
        start: {
          line: 352,
          column: 12
        },
        end: {
          line: 352,
          column: 44
        }
      },
      "151": {
        start: {
          line: 353,
          column: 12
        },
        end: {
          line: 357,
          column: 15
        }
      },
      "152": {
        start: {
          line: 359,
          column: 8
        },
        end: {
          line: 359,
          column: 57
        }
      },
      "153": {
        start: {
          line: 368,
          column: 25
        },
        end: {
          line: 368,
          column: 89
        }
      },
      "154": {
        start: {
          line: 369,
          column: 8
        },
        end: {
          line: 369,
          column: 84
        }
      },
      "155": {
        start: {
          line: 370,
          column: 8
        },
        end: {
          line: 370,
          column: 24
        }
      },
      "156": {
        start: {
          line: 379,
          column: 8
        },
        end: {
          line: 383,
          column: 11
        }
      },
      "157": {
        start: {
          line: 380,
          column: 34
        },
        end: {
          line: 380,
          column: 94
        }
      },
      "158": {
        start: {
          line: 381,
          column: 36
        },
        end: {
          line: 381,
          column: 98
        }
      },
      "159": {
        start: {
          line: 382,
          column: 12
        },
        end: {
          line: 382,
          column: 69
        }
      },
      "160": {
        start: {
          line: 393,
          column: 28
        },
        end: {
          line: 396,
          column: 13
        }
      },
      "161": {
        start: {
          line: 394,
          column: 27
        },
        end: {
          line: 394,
          column: 73
        }
      },
      "162": {
        start: {
          line: 395,
          column: 12
        },
        end: {
          line: 395,
          column: 32
        }
      },
      "163": {
        start: {
          line: 398,
          column: 21
        },
        end: {
          line: 398,
          column: 48
        }
      },
      "164": {
        start: {
          line: 400,
          column: 8
        },
        end: {
          line: 406,
          column: 9
        }
      },
      "165": {
        start: {
          line: 401,
          column: 27
        },
        end: {
          line: 401,
          column: 73
        }
      },
      "166": {
        start: {
          line: 402,
          column: 12
        },
        end: {
          line: 402,
          column: 29
        }
      },
      "167": {
        start: {
          line: 403,
          column: 12
        },
        end: {
          line: 405,
          column: 13
        }
      },
      "168": {
        start: {
          line: 404,
          column: 16
        },
        end: {
          line: 404,
          column: 30
        }
      },
      "169": {
        start: {
          line: 408,
          column: 8
        },
        end: {
          line: 408,
          column: 35
        }
      },
      "170": {
        start: {
          line: 417,
          column: 8
        },
        end: {
          line: 421,
          column: 11
        }
      },
      "171": {
        start: {
          line: 418,
          column: 31
        },
        end: {
          line: 418,
          column: 93
        }
      },
      "172": {
        start: {
          line: 419,
          column: 34
        },
        end: {
          line: 419,
          column: 99
        }
      },
      "173": {
        start: {
          line: 420,
          column: 12
        },
        end: {
          line: 420,
          column: 63
        }
      },
      "174": {
        start: {
          line: 430,
          column: 8
        },
        end: {
          line: 434,
          column: 11
        }
      },
      "175": {
        start: {
          line: 431,
          column: 32
        },
        end: {
          line: 431,
          column: 97
        }
      },
      "176": {
        start: {
          line: 432,
          column: 35
        },
        end: {
          line: 432,
          column: 103
        }
      },
      "177": {
        start: {
          line: 433,
          column: 12
        },
        end: {
          line: 433,
          column: 65
        }
      },
      "178": {
        start: {
          line: 443,
          column: 28
        },
        end: {
          line: 443,
          column: 79
        }
      },
      "179": {
        start: {
          line: 444,
          column: 8
        },
        end: {
          line: 444,
          column: 45
        }
      },
      "180": {
        start: {
          line: 452,
          column: 8
        },
        end: {
          line: 452,
          column: 48
        }
      },
      "181": {
        start: {
          line: 453,
          column: 32
        },
        end: {
          line: 453,
          column: 96
        }
      },
      "182": {
        start: {
          line: 454,
          column: 8
        },
        end: {
          line: 454,
          column: 89
        }
      },
      "183": {
        start: {
          line: 456,
          column: 30
        },
        end: {
          line: 456,
          column: 67
        }
      },
      "184": {
        start: {
          line: 457,
          column: 8
        },
        end: {
          line: 460,
          column: 9
        }
      },
      "185": {
        start: {
          line: 458,
          column: 32
        },
        end: {
          line: 458,
          column: 64
        }
      },
      "186": {
        start: {
          line: 459,
          column: 12
        },
        end: {
          line: 459,
          column: 81
        }
      },
      "187": {
        start: {
          line: 466,
          column: 8
        },
        end: {
          line: 466,
          column: 23
        }
      },
      "188": {
        start: {
          line: 467,
          column: 8
        },
        end: {
          line: 467,
          column: 35
        }
      },
      "189": {
        start: {
          line: 468,
          column: 8
        },
        end: {
          line: 468,
          column: 58
        }
      },
      "190": {
        start: {
          line: 469,
          column: 8
        },
        end: {
          line: 469,
          column: 58
        }
      },
      "191": {
        start: {
          line: 470,
          column: 8
        },
        end: {
          line: 470,
          column: 67
        }
      },
      "192": {
        start: {
          line: 473,
          column: 0
        },
        end: {
          line: 473,
          column: 48
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 10,
            column: 1
          },
          end: {
            line: 10,
            column: 2
          }
        },
        loc: {
          start: {
            line: 10,
            column: 34
          },
          end: {
            line: 17,
            column: 1
          }
        },
        line: 10
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 33,
            column: 5
          }
        },
        loc: {
          start: {
            line: 33,
            column: 76
          },
          end: {
            line: 68,
            column: 5
          }
        },
        line: 33
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 72,
            column: 4
          },
          end: {
            line: 72,
            column: 5
          }
        },
        loc: {
          start: {
            line: 72,
            column: 13
          },
          end: {
            line: 86,
            column: 5
          }
        },
        line: 72
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 90,
            column: 4
          },
          end: {
            line: 90,
            column: 5
          }
        },
        loc: {
          start: {
            line: 90,
            column: 14
          },
          end: {
            line: 103,
            column: 5
          }
        },
        line: 90
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 110,
            column: 4
          },
          end: {
            line: 110,
            column: 5
          }
        },
        loc: {
          start: {
            line: 110,
            column: 42
          },
          end: {
            line: 171,
            column: 5
          }
        },
        line: 110
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 178,
            column: 4
          },
          end: {
            line: 178,
            column: 5
          }
        },
        loc: {
          start: {
            line: 178,
            column: 49
          },
          end: {
            line: 200,
            column: 5
          }
        },
        line: 178
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 180,
            column: 37
          },
          end: {
            line: 180,
            column: 38
          }
        },
        loc: {
          start: {
            line: 180,
            column: 51
          },
          end: {
            line: 199,
            column: 9
          }
        },
        line: 180
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 207,
            column: 4
          },
          end: {
            line: 207,
            column: 5
          }
        },
        loc: {
          start: {
            line: 207,
            column: 46
          },
          end: {
            line: 226,
            column: 5
          }
        },
        line: 207
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 232,
            column: 4
          },
          end: {
            line: 232,
            column: 5
          }
        },
        loc: {
          start: {
            line: 232,
            column: 28
          },
          end: {
            line: 234,
            column: 5
          }
        },
        line: 232
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 240,
            column: 4
          },
          end: {
            line: 240,
            column: 5
          }
        },
        loc: {
          start: {
            line: 240,
            column: 23
          },
          end: {
            line: 242,
            column: 5
          }
        },
        line: 240
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 249,
            column: 4
          },
          end: {
            line: 249,
            column: 5
          }
        },
        loc: {
          start: {
            line: 249,
            column: 45
          },
          end: {
            line: 259,
            column: 5
          }
        },
        line: 249
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 265,
            column: 4
          },
          end: {
            line: 265,
            column: 5
          }
        },
        loc: {
          start: {
            line: 265,
            column: 29
          },
          end: {
            line: 275,
            column: 5
          }
        },
        line: 265
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 279,
            column: 4
          },
          end: {
            line: 279,
            column: 5
          }
        },
        loc: {
          start: {
            line: 279,
            column: 26
          },
          end: {
            line: 294,
            column: 5
          }
        },
        line: 279
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 281,
            column: 49
          },
          end: {
            line: 281,
            column: 50
          }
        },
        loc: {
          start: {
            line: 281,
            column: 65
          },
          end: {
            line: 283,
            column: 9
          }
        },
        line: 281
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 285,
            column: 52
          },
          end: {
            line: 285,
            column: 53
          }
        },
        loc: {
          start: {
            line: 285,
            column: 68
          },
          end: {
            line: 287,
            column: 9
          }
        },
        line: 285
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 289,
            column: 53
          },
          end: {
            line: 289,
            column: 54
          }
        },
        loc: {
          start: {
            line: 289,
            column: 69
          },
          end: {
            line: 293,
            column: 9
          }
        },
        line: 289
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 298,
            column: 4
          },
          end: {
            line: 298,
            column: 5
          }
        },
        loc: {
          start: {
            line: 298,
            column: 30
          },
          end: {
            line: 303,
            column: 5
          }
        },
        line: 298
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 309,
            column: 4
          },
          end: {
            line: 309,
            column: 5
          }
        },
        loc: {
          start: {
            line: 309,
            column: 41
          },
          end: {
            line: 325,
            column: 5
          }
        },
        line: 309
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 329,
            column: 4
          },
          end: {
            line: 329,
            column: 5
          }
        },
        loc: {
          start: {
            line: 329,
            column: 28
          },
          end: {
            line: 337,
            column: 5
          }
        },
        line: 329
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 333,
            column: 49
          },
          end: {
            line: 333,
            column: 50
          }
        },
        loc: {
          start: {
            line: 333,
            column: 55
          },
          end: {
            line: 335,
            column: 9
          }
        },
        line: 333
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 341,
            column: 4
          },
          end: {
            line: 341,
            column: 5
          }
        },
        loc: {
          start: {
            line: 341,
            column: 26
          },
          end: {
            line: 360,
            column: 5
          }
        },
        line: 341
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 367,
            column: 4
          },
          end: {
            line: 367,
            column: 5
          }
        },
        loc: {
          start: {
            line: 367,
            column: 39
          },
          end: {
            line: 371,
            column: 5
          }
        },
        line: 367
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 378,
            column: 4
          },
          end: {
            line: 378,
            column: 5
          }
        },
        loc: {
          start: {
            line: 378,
            column: 45
          },
          end: {
            line: 384,
            column: 5
          }
        },
        line: 378
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 379,
            column: 39
          },
          end: {
            line: 379,
            column: 40
          }
        },
        loc: {
          start: {
            line: 379,
            column: 59
          },
          end: {
            line: 383,
            column: 9
          }
        },
        line: 379
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 391,
            column: 4
          },
          end: {
            line: 391,
            column: 5
          }
        },
        loc: {
          start: {
            line: 391,
            column: 47
          },
          end: {
            line: 409,
            column: 5
          }
        },
        line: 391
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 393,
            column: 52
          },
          end: {
            line: 393,
            column: 53
          }
        },
        loc: {
          start: {
            line: 393,
            column: 69
          },
          end: {
            line: 396,
            column: 9
          }
        },
        line: 393
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 416,
            column: 4
          },
          end: {
            line: 416,
            column: 5
          }
        },
        loc: {
          start: {
            line: 416,
            column: 40
          },
          end: {
            line: 422,
            column: 5
          }
        },
        line: 416
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 417,
            column: 39
          },
          end: {
            line: 417,
            column: 40
          }
        },
        loc: {
          start: {
            line: 417,
            column: 58
          },
          end: {
            line: 421,
            column: 9
          }
        },
        line: 417
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 429,
            column: 4
          },
          end: {
            line: 429,
            column: 5
          }
        },
        loc: {
          start: {
            line: 429,
            column: 41
          },
          end: {
            line: 435,
            column: 5
          }
        },
        line: 429
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 430,
            column: 39
          },
          end: {
            line: 430,
            column: 40
          }
        },
        loc: {
          start: {
            line: 430,
            column: 58
          },
          end: {
            line: 434,
            column: 9
          }
        },
        line: 430
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 442,
            column: 4
          },
          end: {
            line: 442,
            column: 5
          }
        },
        loc: {
          start: {
            line: 442,
            column: 35
          },
          end: {
            line: 445,
            column: 5
          }
        },
        line: 442
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 451,
            column: 4
          },
          end: {
            line: 451,
            column: 5
          }
        },
        loc: {
          start: {
            line: 451,
            column: 39
          },
          end: {
            line: 461,
            column: 5
          }
        },
        line: 451
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 465,
            column: 4
          },
          end: {
            line: 465,
            column: 5
          }
        },
        loc: {
          start: {
            line: 465,
            column: 14
          },
          end: {
            line: 471,
            column: 5
          }
        },
        line: 465
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 17,
            column: 3
          },
          end: {
            line: 17,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 17,
            column: 3
          },
          end: {
            line: 17,
            column: 24
          }
        }, {
          start: {
            line: 17,
            column: 29
          },
          end: {
            line: 17,
            column: 87
          }
        }],
        line: 17
      },
      "1": {
        loc: {
          start: {
            line: 73,
            column: 8
          },
          end: {
            line: 76,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 73,
            column: 8
          },
          end: {
            line: 76,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 73
      },
      "2": {
        loc: {
          start: {
            line: 82,
            column: 8
          },
          end: {
            line: 84,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 82,
            column: 8
          },
          end: {
            line: 84,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 82
      },
      "3": {
        loc: {
          start: {
            line: 91,
            column: 8
          },
          end: {
            line: 94,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 91,
            column: 8
          },
          end: {
            line: 94,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 91
      },
      "4": {
        loc: {
          start: {
            line: 98,
            column: 8
          },
          end: {
            line: 101,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 98,
            column: 8
          },
          end: {
            line: 101,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 98
      },
      "5": {
        loc: {
          start: {
            line: 110,
            column: 17
          },
          end: {
            line: 110,
            column: 40
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 110,
            column: 38
          },
          end: {
            line: 110,
            column: 40
          }
        }],
        line: 110
      },
      "6": {
        loc: {
          start: {
            line: 111,
            column: 8
          },
          end: {
            line: 113,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 111,
            column: 8
          },
          end: {
            line: 113,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 111
      },
      "7": {
        loc: {
          start: {
            line: 115,
            column: 8
          },
          end: {
            line: 118,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 115,
            column: 8
          },
          end: {
            line: 118,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 115
      },
      "8": {
        loc: {
          start: {
            line: 121,
            column: 8
          },
          end: {
            line: 149,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 122,
            column: 12
          },
          end: {
            line: 125,
            column: 22
          }
        }, {
          start: {
            line: 126,
            column: 12
          },
          end: {
            line: 129,
            column: 22
          }
        }, {
          start: {
            line: 130,
            column: 12
          },
          end: {
            line: 133,
            column: 22
          }
        }, {
          start: {
            line: 134,
            column: 12
          },
          end: {
            line: 137,
            column: 22
          }
        }, {
          start: {
            line: 138,
            column: 12
          },
          end: {
            line: 141,
            column: 22
          }
        }, {
          start: {
            line: 142,
            column: 12
          },
          end: {
            line: 145,
            column: 22
          }
        }, {
          start: {
            line: 146,
            column: 12
          },
          end: {
            line: 148,
            column: 54
          }
        }],
        line: 121
      },
      "9": {
        loc: {
          start: {
            line: 156,
            column: 20
          },
          end: {
            line: 156,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 156,
            column: 20
          },
          end: {
            line: 156,
            column: 40
          }
        }, {
          start: {
            line: 156,
            column: 44
          },
          end: {
            line: 156,
            column: 45
          }
        }],
        line: 156
      },
      "10": {
        loc: {
          start: {
            line: 157,
            column: 25
          },
          end: {
            line: 157,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 157,
            column: 25
          },
          end: {
            line: 157,
            column: 51
          }
        }, {
          start: {
            line: 157,
            column: 55
          },
          end: {
            line: 157,
            column: 56
          }
        }],
        line: 157
      },
      "11": {
        loc: {
          start: {
            line: 158,
            column: 21
          },
          end: {
            line: 158,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 158,
            column: 21
          },
          end: {
            line: 158,
            column: 43
          }
        }, {
          start: {
            line: 158,
            column: 47
          },
          end: {
            line: 158,
            column: 48
          }
        }],
        line: 158
      },
      "12": {
        loc: {
          start: {
            line: 178,
            column: 24
          },
          end: {
            line: 178,
            column: 47
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 178,
            column: 45
          },
          end: {
            line: 178,
            column: 47
          }
        }],
        line: 178
      },
      "13": {
        loc: {
          start: {
            line: 182,
            column: 12
          },
          end: {
            line: 184,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 182,
            column: 12
          },
          end: {
            line: 184,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 182
      },
      "14": {
        loc: {
          start: {
            line: 186,
            column: 12
          },
          end: {
            line: 188,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 186,
            column: 12
          },
          end: {
            line: 188,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 186
      },
      "15": {
        loc: {
          start: {
            line: 191,
            column: 12
          },
          end: {
            line: 193,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 191,
            column: 12
          },
          end: {
            line: 193,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 191
      },
      "16": {
        loc: {
          start: {
            line: 191,
            column: 16
          },
          end: {
            line: 191,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 191,
            column: 16
          },
          end: {
            line: 191,
            column: 29
          }
        }, {
          start: {
            line: 191,
            column: 33
          },
          end: {
            line: 191,
            column: 88
          }
        }],
        line: 191
      },
      "17": {
        loc: {
          start: {
            line: 195,
            column: 12
          },
          end: {
            line: 197,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 195,
            column: 12
          },
          end: {
            line: 197,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 195
      },
      "18": {
        loc: {
          start: {
            line: 195,
            column: 16
          },
          end: {
            line: 195,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 195,
            column: 16
          },
          end: {
            line: 195,
            column: 29
          }
        }, {
          start: {
            line: 195,
            column: 33
          },
          end: {
            line: 195,
            column: 88
          }
        }],
        line: 195
      },
      "19": {
        loc: {
          start: {
            line: 208,
            column: 8
          },
          end: {
            line: 211,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 208,
            column: 8
          },
          end: {
            line: 211,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 208
      },
      "20": {
        loc: {
          start: {
            line: 218,
            column: 8
          },
          end: {
            line: 222,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 218,
            column: 8
          },
          end: {
            line: 222,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 218
      },
      "21": {
        loc: {
          start: {
            line: 251,
            column: 8
          },
          end: {
            line: 254,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 251,
            column: 8
          },
          end: {
            line: 254,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 251
      },
      "22": {
        loc: {
          start: {
            line: 270,
            column: 8
          },
          end: {
            line: 272,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 270,
            column: 8
          },
          end: {
            line: 272,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 270
      },
      "23": {
        loc: {
          start: {
            line: 270,
            column: 12
          },
          end: {
            line: 270,
            column: 117
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 270,
            column: 12
          },
          end: {
            line: 270,
            column: 58
          }
        }, {
          start: {
            line: 270,
            column: 62
          },
          end: {
            line: 270,
            column: 117
          }
        }],
        line: 270
      },
      "24": {
        loc: {
          start: {
            line: 290,
            column: 12
          },
          end: {
            line: 292,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 290,
            column: 12
          },
          end: {
            line: 292,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 290
      },
      "25": {
        loc: {
          start: {
            line: 310,
            column: 8
          },
          end: {
            line: 312,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 310,
            column: 8
          },
          end: {
            line: 312,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 310
      },
      "26": {
        loc: {
          start: {
            line: 330,
            column: 8
          },
          end: {
            line: 332,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 330,
            column: 8
          },
          end: {
            line: 332,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 330
      },
      "27": {
        loc: {
          start: {
            line: 344,
            column: 12
          },
          end: {
            line: 345,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 344,
            column: 12
          },
          end: {
            line: 345,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 344
      },
      "28": {
        loc: {
          start: {
            line: 380,
            column: 34
          },
          end: {
            line: 380,
            column: 94
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 380,
            column: 34
          },
          end: {
            line: 380,
            column: 89
          }
        }, {
          start: {
            line: 380,
            column: 93
          },
          end: {
            line: 380,
            column: 94
          }
        }],
        line: 380
      },
      "29": {
        loc: {
          start: {
            line: 381,
            column: 36
          },
          end: {
            line: 381,
            column: 98
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 381,
            column: 36
          },
          end: {
            line: 381,
            column: 93
          }
        }, {
          start: {
            line: 381,
            column: 97
          },
          end: {
            line: 381,
            column: 98
          }
        }],
        line: 381
      },
      "30": {
        loc: {
          start: {
            line: 382,
            column: 19
          },
          end: {
            line: 382,
            column: 68
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 382,
            column: 53
          },
          end: {
            line: 382,
            column: 60
          }
        }, {
          start: {
            line: 382,
            column: 63
          },
          end: {
            line: 382,
            column: 68
          }
        }],
        line: 382
      },
      "31": {
        loc: {
          start: {
            line: 394,
            column: 27
          },
          end: {
            line: 394,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 394,
            column: 27
          },
          end: {
            line: 394,
            column: 68
          }
        }, {
          start: {
            line: 394,
            column: 72
          },
          end: {
            line: 394,
            column: 73
          }
        }],
        line: 394
      },
      "32": {
        loc: {
          start: {
            line: 401,
            column: 27
          },
          end: {
            line: 401,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 401,
            column: 27
          },
          end: {
            line: 401,
            column: 68
          }
        }, {
          start: {
            line: 401,
            column: 72
          },
          end: {
            line: 401,
            column: 73
          }
        }],
        line: 401
      },
      "33": {
        loc: {
          start: {
            line: 403,
            column: 12
          },
          end: {
            line: 405,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 403,
            column: 12
          },
          end: {
            line: 405,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 403
      },
      "34": {
        loc: {
          start: {
            line: 418,
            column: 31
          },
          end: {
            line: 418,
            column: 93
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 418,
            column: 31
          },
          end: {
            line: 418,
            column: 88
          }
        }, {
          start: {
            line: 418,
            column: 92
          },
          end: {
            line: 418,
            column: 93
          }
        }],
        line: 418
      },
      "35": {
        loc: {
          start: {
            line: 419,
            column: 34
          },
          end: {
            line: 419,
            column: 99
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 419,
            column: 34
          },
          end: {
            line: 419,
            column: 94
          }
        }, {
          start: {
            line: 419,
            column: 98
          },
          end: {
            line: 419,
            column: 99
          }
        }],
        line: 419
      },
      "36": {
        loc: {
          start: {
            line: 420,
            column: 19
          },
          end: {
            line: 420,
            column: 62
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 420,
            column: 48
          },
          end: {
            line: 420,
            column: 55
          }
        }, {
          start: {
            line: 420,
            column: 58
          },
          end: {
            line: 420,
            column: 62
          }
        }],
        line: 420
      },
      "37": {
        loc: {
          start: {
            line: 431,
            column: 32
          },
          end: {
            line: 431,
            column: 97
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 431,
            column: 32
          },
          end: {
            line: 431,
            column: 85
          }
        }, {
          start: {
            line: 431,
            column: 89
          },
          end: {
            line: 431,
            column: 97
          }
        }],
        line: 431
      },
      "38": {
        loc: {
          start: {
            line: 432,
            column: 35
          },
          end: {
            line: 432,
            column: 103
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 432,
            column: 35
          },
          end: {
            line: 432,
            column: 91
          }
        }, {
          start: {
            line: 432,
            column: 95
          },
          end: {
            line: 432,
            column: 103
          }
        }],
        line: 432
      },
      "39": {
        loc: {
          start: {
            line: 433,
            column: 19
          },
          end: {
            line: 433,
            column: 64
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 433,
            column: 50
          },
          end: {
            line: 433,
            column: 57
          }
        }, {
          start: {
            line: 433,
            column: 60
          },
          end: {
            line: 433,
            column: 64
          }
        }],
        line: 433
      },
      "40": {
        loc: {
          start: {
            line: 453,
            column: 32
          },
          end: {
            line: 453,
            column: 96
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 453,
            column: 32
          },
          end: {
            line: 453,
            column: 91
          }
        }, {
          start: {
            line: 453,
            column: 95
          },
          end: {
            line: 453,
            column: 96
          }
        }],
        line: 453
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0, 0, 0, 0, 0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\tunnel-load-balancer.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\tunnel-load-balancer.ts"],
      sourcesContent: ["import { EventEmitter } from 'events';\r\nimport { Logger } from '../core/logging/logger';\r\nimport { SSHTunnelManager, TunnelConnection, TunnelState } from './ssh-tunnel-manager';\r\nimport { TunnelHealthMonitor, TunnelHealthMetrics } from './tunnel-health-monitor';\r\nimport { TunnelStateTracker } from './tunnel-state-tracker';\r\n\r\n/**\r\n * Load balancing strategy types\r\n */\r\nexport enum LoadBalancingStrategy {\r\n  ROUND_ROBIN = 'ROUND_ROBIN',\r\n  LEAST_CONNECTIONS = 'LEAST_CONNECTIONS',\r\n  WEIGHTED_ROUND_ROBIN = 'WEIGHTED_ROUND_ROBIN',\r\n  HEALTH_BASED = 'HEALTH_BASED',\r\n  LATENCY_BASED = 'LATENCY_BASED',\r\n  RANDOM = 'RANDOM'\r\n}\r\n\r\n/**\r\n * Tunnel pool configuration\r\n */\r\nexport interface TunnelPoolConfig {\r\n  /** Minimum number of active tunnels */\r\n  minActiveTunnels: number;\r\n  /** Maximum number of active tunnels */\r\n  maxActiveTunnels: number;\r\n  /** Load balancing strategy */\r\n  strategy: LoadBalancingStrategy;\r\n  /** Health check threshold for tunnel selection */\r\n  healthThreshold: number;\r\n  /** Maximum latency threshold for tunnel selection */\r\n  maxLatencyThreshold: number;\r\n  /** Enable automatic failover */\r\n  enableFailover: boolean;\r\n  /** Failover timeout in milliseconds */\r\n  failoverTimeout: number;\r\n  /** Enable tunnel weight adjustment based on performance */\r\n  enableDynamicWeights: boolean;\r\n  /** Weight adjustment interval in milliseconds */\r\n  weightAdjustmentInterval: number;\r\n}\r\n\r\n/**\r\n * Tunnel weight information\r\n */\r\nexport interface TunnelWeight {\r\n  connectionId: string;\r\n  weight: number;\r\n  baseWeight: number;\r\n  performanceMultiplier: number;\r\n  healthMultiplier: number;\r\n  lastUpdated: Date;\r\n}\r\n\r\n/**\r\n * Load balancing statistics\r\n */\r\nexport interface LoadBalancingStats {\r\n  totalRequests: number;\r\n  requestsPerTunnel: Map<string, number>;\r\n  averageResponseTime: number;\r\n  failoverCount: number;\r\n  lastFailover: Date | null;\r\n  activeStrategy: LoadBalancingStrategy;\r\n  tunnelUtilization: Map<string, number>;\r\n}\r\n\r\n/**\r\n * Tunnel selection result\r\n */\r\nexport interface TunnelSelection {\r\n  connection: TunnelConnection;\r\n  reason: string;\r\n  weight: number;\r\n  healthScore: number;\r\n  latency: number;\r\n  selectionTime: Date;\r\n}\r\n\r\n/**\r\n * Tunnel Load Balancer\r\n * Implements intelligent load balancing and failover for multiple SSH tunnels\r\n */\r\nexport class TunnelLoadBalancer extends EventEmitter {\r\n  private logger: Logger;\r\n  private tunnelManager: SSHTunnelManager;\r\n  private healthMonitor: TunnelHealthMonitor;\r\n  private stateTracker: TunnelStateTracker;\r\n  private config: TunnelPoolConfig;\r\n  private tunnelWeights: Map<string, TunnelWeight>;\r\n  private loadBalancingStats: LoadBalancingStats;\r\n  private roundRobinIndex: number;\r\n  private weightAdjustmentTimer: NodeJS.Timeout | null;\r\n  private isEnabled: boolean;\r\n\r\n  constructor(\r\n    logger: Logger,\r\n    tunnelManager: SSHTunnelManager,\r\n    healthMonitor: TunnelHealthMonitor,\r\n    stateTracker: TunnelStateTracker,\r\n    config?: Partial<TunnelPoolConfig>\r\n  ) {\r\n    super();\r\n    this.logger = logger;\r\n    this.tunnelManager = tunnelManager;\r\n    this.healthMonitor = healthMonitor;\r\n    this.stateTracker = stateTracker;\r\n    this.tunnelWeights = new Map();\r\n    this.roundRobinIndex = 0;\r\n    this.weightAdjustmentTimer = null;\r\n    this.isEnabled = false;\r\n\r\n    // Default configuration\r\n    this.config = {\r\n      minActiveTunnels: 1,\r\n      maxActiveTunnels: 3,\r\n      strategy: LoadBalancingStrategy.HEALTH_BASED,\r\n      healthThreshold: 70,\r\n      maxLatencyThreshold: 1000,\r\n      enableFailover: true,\r\n      failoverTimeout: 30000,\r\n      enableDynamicWeights: true,\r\n      weightAdjustmentInterval: 60000,\r\n      ...config\r\n    };\r\n\r\n    // Initialize statistics\r\n    this.loadBalancingStats = {\r\n      totalRequests: 0,\r\n      requestsPerTunnel: new Map(),\r\n      averageResponseTime: 0,\r\n      failoverCount: 0,\r\n      lastFailover: null,\r\n      activeStrategy: this.config.strategy,\r\n      tunnelUtilization: new Map()\r\n    };\r\n\r\n    this.setupEventListeners();\r\n    this.logger.info('Tunnel Load Balancer initialized', this.config);\r\n  }\r\n\r\n  /**\r\n   * Enable load balancing\r\n   */\r\n  enable(): void {\r\n    if (this.isEnabled) {\r\n      this.logger.warn('Load balancing is already enabled');\r\n      return;\r\n    }\r\n\r\n    this.isEnabled = true;\r\n    this.logger.info('Load balancing enabled');\r\n\r\n    // Initialize tunnel weights\r\n    this.initializeTunnelWeights();\r\n\r\n    // Start dynamic weight adjustment if enabled\r\n    if (this.config.enableDynamicWeights) {\r\n      this.startWeightAdjustment();\r\n    }\r\n\r\n    this.emit('loadBalancingEnabled');\r\n  }\r\n\r\n  /**\r\n   * Disable load balancing\r\n   */\r\n  disable(): void {\r\n    if (!this.isEnabled) {\r\n      this.logger.warn('Load balancing is already disabled');\r\n      return;\r\n    }\r\n\r\n    this.isEnabled = false;\r\n    this.logger.info('Load balancing disabled');\r\n\r\n    // Stop weight adjustment\r\n    if (this.weightAdjustmentTimer) {\r\n      clearInterval(this.weightAdjustmentTimer);\r\n      this.weightAdjustmentTimer = null;\r\n    }\r\n\r\n    this.emit('loadBalancingDisabled');\r\n  }\r\n\r\n  /**\r\n   * Select the best tunnel for a request\r\n   * \r\n   * @param excludeConnections - Connection IDs to exclude from selection\r\n   * @returns Selected tunnel or null if none available\r\n   */\r\n  selectTunnel(excludeConnections: string[] = []): TunnelSelection | null {\r\n    if (!this.isEnabled) {\r\n      throw new Error('Load balancing is not enabled');\r\n    }\r\n\r\n    const availableTunnels = this.getAvailableTunnels(excludeConnections);\r\n    \r\n    if (availableTunnels.length === 0) {\r\n      this.logger.warn('No available tunnels for selection');\r\n      return null;\r\n    }\r\n\r\n    let selectedConnection: TunnelConnection;\r\n    let selectionReason: string;\r\n\r\n    switch (this.config.strategy) {\r\n      case LoadBalancingStrategy.ROUND_ROBIN:\r\n        selectedConnection = this.selectRoundRobin(availableTunnels);\r\n        selectionReason = 'Round robin selection';\r\n        break;\r\n\r\n      case LoadBalancingStrategy.LEAST_CONNECTIONS:\r\n        selectedConnection = this.selectLeastConnections(availableTunnels);\r\n        selectionReason = 'Least connections selection';\r\n        break;\r\n\r\n      case LoadBalancingStrategy.WEIGHTED_ROUND_ROBIN:\r\n        selectedConnection = this.selectWeightedRoundRobin(availableTunnels);\r\n        selectionReason = 'Weighted round robin selection';\r\n        break;\r\n\r\n      case LoadBalancingStrategy.HEALTH_BASED:\r\n        selectedConnection = this.selectHealthBased(availableTunnels);\r\n        selectionReason = 'Health-based selection';\r\n        break;\r\n\r\n      case LoadBalancingStrategy.LATENCY_BASED:\r\n        selectedConnection = this.selectLatencyBased(availableTunnels);\r\n        selectionReason = 'Latency-based selection';\r\n        break;\r\n\r\n      case LoadBalancingStrategy.RANDOM:\r\n        selectedConnection = this.selectRandom(availableTunnels);\r\n        selectionReason = 'Random selection';\r\n        break;\r\n\r\n      default:\r\n        selectedConnection = availableTunnels[0];\r\n        selectionReason = 'Default selection';\r\n    }\r\n\r\n    // Get additional metrics for the selection\r\n    const healthMetrics = this.healthMonitor.getHealthMetrics(selectedConnection.id);\r\n    const tunnelWeight = this.tunnelWeights.get(selectedConnection.id);\r\n\r\n    const selection: TunnelSelection = {\r\n      connection: selectedConnection,\r\n      reason: selectionReason,\r\n      weight: tunnelWeight?.weight || 1,\r\n      healthScore: healthMetrics?.healthScore || 0,\r\n      latency: healthMetrics?.latency || 0,\r\n      selectionTime: new Date()\r\n    };\r\n\r\n    // Update statistics\r\n    this.updateSelectionStats(selectedConnection.id);\r\n\r\n    this.logger.debug(`Tunnel selected: ${selectedConnection.id}`, {\r\n      strategy: this.config.strategy,\r\n      reason: selectionReason,\r\n      healthScore: selection.healthScore,\r\n      latency: selection.latency\r\n    });\r\n\r\n    this.emit('tunnelSelected', selection);\r\n    return selection;\r\n  }\r\n\r\n  /**\r\n   * Get available tunnels for load balancing\r\n   * \r\n   * @param excludeConnections - Connection IDs to exclude\r\n   * @returns Array of available tunnel connections\r\n   */\r\n  getAvailableTunnels(excludeConnections: string[] = []): TunnelConnection[] {\r\n    const allConnections = this.tunnelManager.getAllConnections();\r\n    \r\n    return allConnections.filter(connection => {\r\n      // Exclude specified connections\r\n      if (excludeConnections.includes(connection.id)) {\r\n        return false;\r\n      }\r\n\r\n      // Must be connected\r\n      if (connection.state !== TunnelState.CONNECTED) {\r\n        return false;\r\n      }\r\n\r\n      // Check health threshold\r\n      const healthMetrics = this.healthMonitor.getHealthMetrics(connection.id);\r\n      if (healthMetrics && healthMetrics.healthScore < this.config.healthThreshold) {\r\n        return false;\r\n      }\r\n\r\n      // Check latency threshold\r\n      if (healthMetrics && healthMetrics.latency > this.config.maxLatencyThreshold) {\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Perform failover to backup tunnels\r\n   * \r\n   * @param failedConnectionId - ID of the failed connection\r\n   * @returns New tunnel selection or null if no alternatives\r\n   */\r\n  async performFailover(failedConnectionId: string): Promise<TunnelSelection | null> {\r\n    if (!this.config.enableFailover) {\r\n      this.logger.warn('Failover is disabled');\r\n      return null;\r\n    }\r\n\r\n    this.logger.warn(`Performing failover from connection: ${failedConnectionId}`);\r\n\r\n    // Update failover statistics\r\n    this.loadBalancingStats.failoverCount++;\r\n    this.loadBalancingStats.lastFailover = new Date();\r\n\r\n    // Select alternative tunnel\r\n    const alternativeTunnel = this.selectTunnel([failedConnectionId]);\r\n    \r\n    if (!alternativeTunnel) {\r\n      this.logger.error('No alternative tunnels available for failover');\r\n      this.emit('failoverFailed', failedConnectionId);\r\n      return null;\r\n    }\r\n\r\n    this.logger.info(`Failover successful: ${failedConnectionId} -> ${alternativeTunnel.connection.id}`);\r\n    this.emit('failoverSuccessful', failedConnectionId, alternativeTunnel);\r\n\r\n    return alternativeTunnel;\r\n  }\r\n\r\n  /**\r\n   * Get load balancing statistics\r\n   * \r\n   * @returns Current load balancing statistics\r\n   */\r\n  getLoadBalancingStats(): LoadBalancingStats {\r\n    return { ...this.loadBalancingStats };\r\n  }\r\n\r\n  /**\r\n   * Get tunnel weights\r\n   * \r\n   * @returns Map of tunnel weights\r\n   */\r\n  getTunnelWeights(): Map<string, TunnelWeight> {\r\n    return new Map(this.tunnelWeights);\r\n  }\r\n\r\n  /**\r\n   * Update tunnel weight manually\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @param weight - New weight value\r\n   */\r\n  updateTunnelWeight(connectionId: string, weight: number): void {\r\n    const tunnelWeight = this.tunnelWeights.get(connectionId);\r\n    if (!tunnelWeight) {\r\n      this.logger.warn(`Tunnel weight not found: ${connectionId}`);\r\n      return;\r\n    }\r\n\r\n    tunnelWeight.weight = Math.max(0.1, Math.min(10, weight)); // Clamp between 0.1 and 10\r\n    tunnelWeight.lastUpdated = new Date();\r\n\r\n    this.logger.info(`Updated tunnel weight: ${connectionId}`, { weight: tunnelWeight.weight });\r\n    this.emit('tunnelWeightUpdated', connectionId, tunnelWeight);\r\n  }\r\n\r\n  /**\r\n   * Update load balancing strategy\r\n   * \r\n   * @param strategy - New load balancing strategy\r\n   */\r\n  updateStrategy(strategy: LoadBalancingStrategy): void {\r\n    const oldStrategy = this.config.strategy;\r\n    this.config.strategy = strategy;\r\n    this.loadBalancingStats.activeStrategy = strategy;\r\n\r\n    // Reset round robin index when changing strategy\r\n    if (strategy === LoadBalancingStrategy.ROUND_ROBIN || strategy === LoadBalancingStrategy.WEIGHTED_ROUND_ROBIN) {\r\n      this.roundRobinIndex = 0;\r\n    }\r\n\r\n    this.logger.info(`Load balancing strategy updated: ${oldStrategy} -> ${strategy}`);\r\n    this.emit('strategyUpdated', oldStrategy, strategy);\r\n  }\r\n\r\n  /**\r\n   * Setup event listeners\r\n   */\r\n  private setupEventListeners(): void {\r\n    // Listen for tunnel connections\r\n    this.tunnelManager.on('tunnelConnected', (connection) => {\r\n      this.initializeTunnelWeight(connection.id);\r\n    });\r\n\r\n    // Listen for tunnel disconnections\r\n    this.tunnelManager.on('tunnelDisconnected', (connection) => {\r\n      this.tunnelWeights.delete(connection.id);\r\n    });\r\n\r\n    // Listen for health changes\r\n    this.healthMonitor.on('connectionUnhealthy', (connection) => {\r\n      if (this.config.enableFailover) {\r\n        this.performFailover(connection.id);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Initialize tunnel weights for all connections\r\n   */\r\n  private initializeTunnelWeights(): void {\r\n    const connections = this.tunnelManager.getAllConnections();\r\n    \r\n    for (const connection of connections) {\r\n      this.initializeTunnelWeight(connection.id);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialize weight for a specific tunnel\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   */\r\n  private initializeTunnelWeight(connectionId: string): void {\r\n    if (this.tunnelWeights.has(connectionId)) {\r\n      return;\r\n    }\r\n\r\n    const weight: TunnelWeight = {\r\n      connectionId,\r\n      weight: 1.0,\r\n      baseWeight: 1.0,\r\n      performanceMultiplier: 1.0,\r\n      healthMultiplier: 1.0,\r\n      lastUpdated: new Date()\r\n    };\r\n\r\n    this.tunnelWeights.set(connectionId, weight);\r\n    this.loadBalancingStats.requestsPerTunnel.set(connectionId, 0);\r\n    this.loadBalancingStats.tunnelUtilization.set(connectionId, 0);\r\n\r\n    this.logger.debug(`Initialized tunnel weight: ${connectionId}`);\r\n  }\r\n\r\n  /**\r\n   * Start dynamic weight adjustment\r\n   */\r\n  private startWeightAdjustment(): void {\r\n    if (this.weightAdjustmentTimer) {\r\n      clearInterval(this.weightAdjustmentTimer);\r\n    }\r\n\r\n    this.weightAdjustmentTimer = setInterval(() => {\r\n      this.adjustTunnelWeights();\r\n    }, this.config.weightAdjustmentInterval);\r\n\r\n    this.logger.info('Started dynamic weight adjustment');\r\n  }\r\n\r\n  /**\r\n   * Adjust tunnel weights based on performance\r\n   */\r\n  private adjustTunnelWeights(): void {\r\n    for (const [connectionId, weight] of this.tunnelWeights.entries()) {\r\n      const healthMetrics = this.healthMonitor.getHealthMetrics(connectionId);\r\n      if (!healthMetrics) continue;\r\n\r\n      // Calculate performance multiplier based on latency and health\r\n      const latencyMultiplier = Math.max(0.1, 1 - (healthMetrics.latency / this.config.maxLatencyThreshold));\r\n      const healthMultiplier = Math.max(0.1, healthMetrics.healthScore / 100);\r\n\r\n      weight.performanceMultiplier = latencyMultiplier;\r\n      weight.healthMultiplier = healthMultiplier;\r\n      weight.weight = weight.baseWeight * weight.performanceMultiplier * weight.healthMultiplier;\r\n      weight.lastUpdated = new Date();\r\n\r\n      this.logger.debug(`Adjusted tunnel weight: ${connectionId}`, {\r\n        weight: weight.weight,\r\n        latencyMultiplier,\r\n        healthMultiplier\r\n      });\r\n    }\r\n\r\n    this.emit('weightsAdjusted', this.tunnelWeights);\r\n  }\r\n\r\n  /**\r\n   * Select tunnel using round robin strategy\r\n   * \r\n   * @param availableTunnels - Available tunnel connections\r\n   * @returns Selected tunnel connection\r\n   */\r\n  private selectRoundRobin(availableTunnels: TunnelConnection[]): TunnelConnection {\r\n    const selected = availableTunnels[this.roundRobinIndex % availableTunnels.length];\r\n    this.roundRobinIndex = (this.roundRobinIndex + 1) % availableTunnels.length;\r\n    return selected;\r\n  }\r\n\r\n  /**\r\n   * Select tunnel using least connections strategy\r\n   * \r\n   * @param availableTunnels - Available tunnel connections\r\n   * @returns Selected tunnel connection\r\n   */\r\n  private selectLeastConnections(availableTunnels: TunnelConnection[]): TunnelConnection {\r\n    return availableTunnels.reduce((least, current) => {\r\n      const leastRequests = this.loadBalancingStats.requestsPerTunnel.get(least.id) || 0;\r\n      const currentRequests = this.loadBalancingStats.requestsPerTunnel.get(current.id) || 0;\r\n      return currentRequests < leastRequests ? current : least;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Select tunnel using weighted round robin strategy\r\n   * \r\n   * @param availableTunnels - Available tunnel connections\r\n   * @returns Selected tunnel connection\r\n   */\r\n  private selectWeightedRoundRobin(availableTunnels: TunnelConnection[]): TunnelConnection {\r\n    // Calculate total weight\r\n    const totalWeight = availableTunnels.reduce((sum, tunnel) => {\r\n      const weight = this.tunnelWeights.get(tunnel.id)?.weight || 1;\r\n      return sum + weight;\r\n    }, 0);\r\n\r\n    // Generate random number\r\n    let random = Math.random() * totalWeight;\r\n\r\n    // Select based on weight\r\n    for (const tunnel of availableTunnels) {\r\n      const weight = this.tunnelWeights.get(tunnel.id)?.weight || 1;\r\n      random -= weight;\r\n      if (random <= 0) {\r\n        return tunnel;\r\n      }\r\n    }\r\n\r\n    // Fallback to first tunnel\r\n    return availableTunnels[0];\r\n  }\r\n\r\n  /**\r\n   * Select tunnel using health-based strategy\r\n   * \r\n   * @param availableTunnels - Available tunnel connections\r\n   * @returns Selected tunnel connection\r\n   */\r\n  private selectHealthBased(availableTunnels: TunnelConnection[]): TunnelConnection {\r\n    return availableTunnels.reduce((best, current) => {\r\n      const bestHealth = this.healthMonitor.getHealthMetrics(best.id)?.healthScore || 0;\r\n      const currentHealth = this.healthMonitor.getHealthMetrics(current.id)?.healthScore || 0;\r\n      return currentHealth > bestHealth ? current : best;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Select tunnel using latency-based strategy\r\n   * \r\n   * @param availableTunnels - Available tunnel connections\r\n   * @returns Selected tunnel connection\r\n   */\r\n  private selectLatencyBased(availableTunnels: TunnelConnection[]): TunnelConnection {\r\n    return availableTunnels.reduce((best, current) => {\r\n      const bestLatency = this.healthMonitor.getHealthMetrics(best.id)?.latency || Infinity;\r\n      const currentLatency = this.healthMonitor.getHealthMetrics(current.id)?.latency || Infinity;\r\n      return currentLatency < bestLatency ? current : best;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Select tunnel using random strategy\r\n   * \r\n   * @param availableTunnels - Available tunnel connections\r\n   * @returns Selected tunnel connection\r\n   */\r\n  private selectRandom(availableTunnels: TunnelConnection[]): TunnelConnection {\r\n    const randomIndex = Math.floor(Math.random() * availableTunnels.length);\r\n    return availableTunnels[randomIndex];\r\n  }\r\n\r\n  /**\r\n   * Update selection statistics\r\n   * \r\n   * @param connectionId - Selected connection ID\r\n   */\r\n  private updateSelectionStats(connectionId: string): void {\r\n    this.loadBalancingStats.totalRequests++;\r\n    \r\n    const currentRequests = this.loadBalancingStats.requestsPerTunnel.get(connectionId) || 0;\r\n    this.loadBalancingStats.requestsPerTunnel.set(connectionId, currentRequests + 1);\r\n\r\n    // Update utilization\r\n    const totalRequests = this.loadBalancingStats.totalRequests;\r\n    for (const [tunnelId, requests] of this.loadBalancingStats.requestsPerTunnel.entries()) {\r\n      const utilization = (requests / totalRequests) * 100;\r\n      this.loadBalancingStats.tunnelUtilization.set(tunnelId, utilization);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cleanup load balancer resources\r\n   */\r\n  cleanup(): void {\r\n    this.disable();\r\n    this.tunnelWeights.clear();\r\n    this.loadBalancingStats.requestsPerTunnel.clear();\r\n    this.loadBalancingStats.tunnelUtilization.clear();\r\n    this.logger.info('Tunnel load balancer cleanup completed');\r\n  }\r\n}\r\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "807423b9280b8d624ecca4b7b0a8878486b1f000"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1o33sj3qc1 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1o33sj3qc1();
cov_1o33sj3qc1().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1o33sj3qc1().s[1]++;
exports.TunnelLoadBalancer = exports.LoadBalancingStrategy = void 0;
const events_1 =
/* istanbul ignore next */
(cov_1o33sj3qc1().s[2]++, require("events"));
const ssh_tunnel_manager_1 =
/* istanbul ignore next */
(cov_1o33sj3qc1().s[3]++, require("./ssh-tunnel-manager"));
/**
 * Load balancing strategy types
 */
var LoadBalancingStrategy;
/* istanbul ignore next */
cov_1o33sj3qc1().s[4]++;
(function (LoadBalancingStrategy) {
  /* istanbul ignore next */
  cov_1o33sj3qc1().f[0]++;
  cov_1o33sj3qc1().s[5]++;
  LoadBalancingStrategy["ROUND_ROBIN"] = "ROUND_ROBIN";
  /* istanbul ignore next */
  cov_1o33sj3qc1().s[6]++;
  LoadBalancingStrategy["LEAST_CONNECTIONS"] = "LEAST_CONNECTIONS";
  /* istanbul ignore next */
  cov_1o33sj3qc1().s[7]++;
  LoadBalancingStrategy["WEIGHTED_ROUND_ROBIN"] = "WEIGHTED_ROUND_ROBIN";
  /* istanbul ignore next */
  cov_1o33sj3qc1().s[8]++;
  LoadBalancingStrategy["HEALTH_BASED"] = "HEALTH_BASED";
  /* istanbul ignore next */
  cov_1o33sj3qc1().s[9]++;
  LoadBalancingStrategy["LATENCY_BASED"] = "LATENCY_BASED";
  /* istanbul ignore next */
  cov_1o33sj3qc1().s[10]++;
  LoadBalancingStrategy["RANDOM"] = "RANDOM";
})(
/* istanbul ignore next */
(cov_1o33sj3qc1().b[0][0]++, LoadBalancingStrategy) ||
/* istanbul ignore next */
(cov_1o33sj3qc1().b[0][1]++, exports.LoadBalancingStrategy = LoadBalancingStrategy = {}));
/**
 * Tunnel Load Balancer
 * Implements intelligent load balancing and failover for multiple SSH tunnels
 */
class TunnelLoadBalancer extends
/* istanbul ignore next */
(events_1.EventEmitter) {
  logger;
  tunnelManager;
  healthMonitor;
  stateTracker;
  config;
  tunnelWeights;
  loadBalancingStats;
  roundRobinIndex;
  weightAdjustmentTimer;
  isEnabled;
  constructor(logger, tunnelManager, healthMonitor, stateTracker, config) {
    /* istanbul ignore next */
    cov_1o33sj3qc1().f[1]++;
    cov_1o33sj3qc1().s[11]++;
    super();
    /* istanbul ignore next */
    cov_1o33sj3qc1().s[12]++;
    this.logger = logger;
    /* istanbul ignore next */
    cov_1o33sj3qc1().s[13]++;
    this.tunnelManager = tunnelManager;
    /* istanbul ignore next */
    cov_1o33sj3qc1().s[14]++;
    this.healthMonitor = healthMonitor;
    /* istanbul ignore next */
    cov_1o33sj3qc1().s[15]++;
    this.stateTracker = stateTracker;
    /* istanbul ignore next */
    cov_1o33sj3qc1().s[16]++;
    this.tunnelWeights = new Map();
    /* istanbul ignore next */
    cov_1o33sj3qc1().s[17]++;
    this.roundRobinIndex = 0;
    /* istanbul ignore next */
    cov_1o33sj3qc1().s[18]++;
    this.weightAdjustmentTimer = null;
    /* istanbul ignore next */
    cov_1o33sj3qc1().s[19]++;
    this.isEnabled = false;
    // Default configuration
    /* istanbul ignore next */
    cov_1o33sj3qc1().s[20]++;
    this.config = {
      minActiveTunnels: 1,
      maxActiveTunnels: 3,
      strategy: LoadBalancingStrategy.HEALTH_BASED,
      healthThreshold: 70,
      maxLatencyThreshold: 1000,
      enableFailover: true,
      failoverTimeout: 30000,
      enableDynamicWeights: true,
      weightAdjustmentInterval: 60000,
      ...config
    };
    // Initialize statistics
    /* istanbul ignore next */
    cov_1o33sj3qc1().s[21]++;
    this.loadBalancingStats = {
      totalRequests: 0,
      requestsPerTunnel: new Map(),
      averageResponseTime: 0,
      failoverCount: 0,
      lastFailover: null,
      activeStrategy: this.config.strategy,
      tunnelUtilization: new Map()
    };
    /* istanbul ignore next */
    cov_1o33sj3qc1().s[22]++;
    this.setupEventListeners();
    /* istanbul ignore next */
    cov_1o33sj3qc1().s[23]++;
    this.logger.info('Tunnel Load Balancer initialized', this.config);
  }
  /**
   * Enable load balancing
   */
  enable() {
    /* istanbul ignore next */
    cov_1o33sj3qc1().f[2]++;
    cov_1o33sj3qc1().s[24]++;
    if (this.isEnabled) {
      /* istanbul ignore next */
      cov_1o33sj3qc1().b[1][0]++;
      cov_1o33sj3qc1().s[25]++;
      this.logger.warn('Load balancing is already enabled');
      /* istanbul ignore next */
      cov_1o33sj3qc1().s[26]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1o33sj3qc1().b[1][1]++;
    }
    cov_1o33sj3qc1().s[27]++;
    this.isEnabled = true;
    /* istanbul ignore next */
    cov_1o33sj3qc1().s[28]++;
    this.logger.info('Load balancing enabled');
    // Initialize tunnel weights
    /* istanbul ignore next */
    cov_1o33sj3qc1().s[29]++;
    this.initializeTunnelWeights();
    // Start dynamic weight adjustment if enabled
    /* istanbul ignore next */
    cov_1o33sj3qc1().s[30]++;
    if (this.config.enableDynamicWeights) {
      /* istanbul ignore next */
      cov_1o33sj3qc1().b[2][0]++;
      cov_1o33sj3qc1().s[31]++;
      this.startWeightAdjustment();
    } else
    /* istanbul ignore next */
    {
      cov_1o33sj3qc1().b[2][1]++;
    }
    cov_1o33sj3qc1().s[32]++;
    this.emit('loadBalancingEnabled');
  }
  /**
   * Disable load balancing
   */
  disable() {
    /* istanbul ignore next */
    cov_1o33sj3qc1().f[3]++;
    cov_1o33sj3qc1().s[33]++;
    if (!this.isEnabled) {
      /* istanbul ignore next */
      cov_1o33sj3qc1().b[3][0]++;
      cov_1o33sj3qc1().s[34]++;
      this.logger.warn('Load balancing is already disabled');
      /* istanbul ignore next */
      cov_1o33sj3qc1().s[35]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1o33sj3qc1().b[3][1]++;
    }
    cov_1o33sj3qc1().s[36]++;
    this.isEnabled = false;
    /* istanbul ignore next */
    cov_1o33sj3qc1().s[37]++;
    this.logger.info('Load balancing disabled');
    // Stop weight adjustment
    /* istanbul ignore next */
    cov_1o33sj3qc1().s[38]++;
    if (this.weightAdjustmentTimer) {
      /* istanbul ignore next */
      cov_1o33sj3qc1().b[4][0]++;
      cov_1o33sj3qc1().s[39]++;
      clearInterval(this.weightAdjustmentTimer);
      /* istanbul ignore next */
      cov_1o33sj3qc1().s[40]++;
      this.weightAdjustmentTimer = null;
    } else
    /* istanbul ignore next */
    {
      cov_1o33sj3qc1().b[4][1]++;
    }
    cov_1o33sj3qc1().s[41]++;
    this.emit('loadBalancingDisabled');
  }
  /**
   * Select the best tunnel for a request
   *
   * @param excludeConnections - Connection IDs to exclude from selection
   * @returns Selected tunnel or null if none available
   */
  selectTunnel(excludeConnections =
  /* istanbul ignore next */
  (cov_1o33sj3qc1().b[5][0]++, [])) {
    /* istanbul ignore next */
    cov_1o33sj3qc1().f[4]++;
    cov_1o33sj3qc1().s[42]++;
    if (!this.isEnabled) {
      /* istanbul ignore next */
      cov_1o33sj3qc1().b[6][0]++;
      cov_1o33sj3qc1().s[43]++;
      throw new Error('Load balancing is not enabled');
    } else
    /* istanbul ignore next */
    {
      cov_1o33sj3qc1().b[6][1]++;
    }
    const availableTunnels =
    /* istanbul ignore next */
    (cov_1o33sj3qc1().s[44]++, this.getAvailableTunnels(excludeConnections));
    /* istanbul ignore next */
    cov_1o33sj3qc1().s[45]++;
    if (availableTunnels.length === 0) {
      /* istanbul ignore next */
      cov_1o33sj3qc1().b[7][0]++;
      cov_1o33sj3qc1().s[46]++;
      this.logger.warn('No available tunnels for selection');
      /* istanbul ignore next */
      cov_1o33sj3qc1().s[47]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_1o33sj3qc1().b[7][1]++;
    }
    let selectedConnection;
    let selectionReason;
    /* istanbul ignore next */
    cov_1o33sj3qc1().s[48]++;
    switch (this.config.strategy) {
      case LoadBalancingStrategy.ROUND_ROBIN:
        /* istanbul ignore next */
        cov_1o33sj3qc1().b[8][0]++;
        cov_1o33sj3qc1().s[49]++;
        selectedConnection = this.selectRoundRobin(availableTunnels);
        /* istanbul ignore next */
        cov_1o33sj3qc1().s[50]++;
        selectionReason = 'Round robin selection';
        /* istanbul ignore next */
        cov_1o33sj3qc1().s[51]++;
        break;
      case LoadBalancingStrategy.LEAST_CONNECTIONS:
        /* istanbul ignore next */
        cov_1o33sj3qc1().b[8][1]++;
        cov_1o33sj3qc1().s[52]++;
        selectedConnection = this.selectLeastConnections(availableTunnels);
        /* istanbul ignore next */
        cov_1o33sj3qc1().s[53]++;
        selectionReason = 'Least connections selection';
        /* istanbul ignore next */
        cov_1o33sj3qc1().s[54]++;
        break;
      case LoadBalancingStrategy.WEIGHTED_ROUND_ROBIN:
        /* istanbul ignore next */
        cov_1o33sj3qc1().b[8][2]++;
        cov_1o33sj3qc1().s[55]++;
        selectedConnection = this.selectWeightedRoundRobin(availableTunnels);
        /* istanbul ignore next */
        cov_1o33sj3qc1().s[56]++;
        selectionReason = 'Weighted round robin selection';
        /* istanbul ignore next */
        cov_1o33sj3qc1().s[57]++;
        break;
      case LoadBalancingStrategy.HEALTH_BASED:
        /* istanbul ignore next */
        cov_1o33sj3qc1().b[8][3]++;
        cov_1o33sj3qc1().s[58]++;
        selectedConnection = this.selectHealthBased(availableTunnels);
        /* istanbul ignore next */
        cov_1o33sj3qc1().s[59]++;
        selectionReason = 'Health-based selection';
        /* istanbul ignore next */
        cov_1o33sj3qc1().s[60]++;
        break;
      case LoadBalancingStrategy.LATENCY_BASED:
        /* istanbul ignore next */
        cov_1o33sj3qc1().b[8][4]++;
        cov_1o33sj3qc1().s[61]++;
        selectedConnection = this.selectLatencyBased(availableTunnels);
        /* istanbul ignore next */
        cov_1o33sj3qc1().s[62]++;
        selectionReason = 'Latency-based selection';
        /* istanbul ignore next */
        cov_1o33sj3qc1().s[63]++;
        break;
      case LoadBalancingStrategy.RANDOM:
        /* istanbul ignore next */
        cov_1o33sj3qc1().b[8][5]++;
        cov_1o33sj3qc1().s[64]++;
        selectedConnection = this.selectRandom(availableTunnels);
        /* istanbul ignore next */
        cov_1o33sj3qc1().s[65]++;
        selectionReason = 'Random selection';
        /* istanbul ignore next */
        cov_1o33sj3qc1().s[66]++;
        break;
      default:
        /* istanbul ignore next */
        cov_1o33sj3qc1().b[8][6]++;
        cov_1o33sj3qc1().s[67]++;
        selectedConnection = availableTunnels[0];
        /* istanbul ignore next */
        cov_1o33sj3qc1().s[68]++;
        selectionReason = 'Default selection';
    }
    // Get additional metrics for the selection
    const healthMetrics =
    /* istanbul ignore next */
    (cov_1o33sj3qc1().s[69]++, this.healthMonitor.getHealthMetrics(selectedConnection.id));
    const tunnelWeight =
    /* istanbul ignore next */
    (cov_1o33sj3qc1().s[70]++, this.tunnelWeights.get(selectedConnection.id));
    const selection =
    /* istanbul ignore next */
    (cov_1o33sj3qc1().s[71]++, {
      connection: selectedConnection,
      reason: selectionReason,
      weight:
      /* istanbul ignore next */
      (cov_1o33sj3qc1().b[9][0]++, tunnelWeight?.weight) ||
      /* istanbul ignore next */
      (cov_1o33sj3qc1().b[9][1]++, 1),
      healthScore:
      /* istanbul ignore next */
      (cov_1o33sj3qc1().b[10][0]++, healthMetrics?.healthScore) ||
      /* istanbul ignore next */
      (cov_1o33sj3qc1().b[10][1]++, 0),
      latency:
      /* istanbul ignore next */
      (cov_1o33sj3qc1().b[11][0]++, healthMetrics?.latency) ||
      /* istanbul ignore next */
      (cov_1o33sj3qc1().b[11][1]++, 0),
      selectionTime: new Date()
    });
    // Update statistics
    /* istanbul ignore next */
    cov_1o33sj3qc1().s[72]++;
    this.updateSelectionStats(selectedConnection.id);
    /* istanbul ignore next */
    cov_1o33sj3qc1().s[73]++;
    this.logger.debug(`Tunnel selected: ${selectedConnection.id}`, {
      strategy: this.config.strategy,
      reason: selectionReason,
      healthScore: selection.healthScore,
      latency: selection.latency
    });
    /* istanbul ignore next */
    cov_1o33sj3qc1().s[74]++;
    this.emit('tunnelSelected', selection);
    /* istanbul ignore next */
    cov_1o33sj3qc1().s[75]++;
    return selection;
  }
  /**
   * Get available tunnels for load balancing
   *
   * @param excludeConnections - Connection IDs to exclude
   * @returns Array of available tunnel connections
   */
  getAvailableTunnels(excludeConnections =
  /* istanbul ignore next */
  (cov_1o33sj3qc1().b[12][0]++, [])) {
    /* istanbul ignore next */
    cov_1o33sj3qc1().f[5]++;
    const allConnections =
    /* istanbul ignore next */
    (cov_1o33sj3qc1().s[76]++, this.tunnelManager.getAllConnections());
    /* istanbul ignore next */
    cov_1o33sj3qc1().s[77]++;
    return allConnections.filter(connection => {
      /* istanbul ignore next */
      cov_1o33sj3qc1().f[6]++;
      cov_1o33sj3qc1().s[78]++;
      // Exclude specified connections
      if (excludeConnections.includes(connection.id)) {
        /* istanbul ignore next */
        cov_1o33sj3qc1().b[13][0]++;
        cov_1o33sj3qc1().s[79]++;
        return false;
      } else
      /* istanbul ignore next */
      {
        cov_1o33sj3qc1().b[13][1]++;
      }
      // Must be connected
      cov_1o33sj3qc1().s[80]++;
      if (connection.state !== ssh_tunnel_manager_1.TunnelState.CONNECTED) {
        /* istanbul ignore next */
        cov_1o33sj3qc1().b[14][0]++;
        cov_1o33sj3qc1().s[81]++;
        return false;
      } else
      /* istanbul ignore next */
      {
        cov_1o33sj3qc1().b[14][1]++;
      }
      // Check health threshold
      const healthMetrics =
      /* istanbul ignore next */
      (cov_1o33sj3qc1().s[82]++, this.healthMonitor.getHealthMetrics(connection.id));
      /* istanbul ignore next */
      cov_1o33sj3qc1().s[83]++;
      if (
      /* istanbul ignore next */
      (cov_1o33sj3qc1().b[16][0]++, healthMetrics) &&
      /* istanbul ignore next */
      (cov_1o33sj3qc1().b[16][1]++, healthMetrics.healthScore < this.config.healthThreshold)) {
        /* istanbul ignore next */
        cov_1o33sj3qc1().b[15][0]++;
        cov_1o33sj3qc1().s[84]++;
        return false;
      } else
      /* istanbul ignore next */
      {
        cov_1o33sj3qc1().b[15][1]++;
      }
      // Check latency threshold
      cov_1o33sj3qc1().s[85]++;
      if (
      /* istanbul ignore next */
      (cov_1o33sj3qc1().b[18][0]++, healthMetrics) &&
      /* istanbul ignore next */
      (cov_1o33sj3qc1().b[18][1]++, healthMetrics.latency > this.config.maxLatencyThreshold)) {
        /* istanbul ignore next */
        cov_1o33sj3qc1().b[17][0]++;
        cov_1o33sj3qc1().s[86]++;
        return false;
      } else
      /* istanbul ignore next */
      {
        cov_1o33sj3qc1().b[17][1]++;
      }
      cov_1o33sj3qc1().s[87]++;
      return true;
    });
  }
  /**
   * Perform failover to backup tunnels
   *
   * @param failedConnectionId - ID of the failed connection
   * @returns New tunnel selection or null if no alternatives
   */
  async performFailover(failedConnectionId) {
    /* istanbul ignore next */
    cov_1o33sj3qc1().f[7]++;
    cov_1o33sj3qc1().s[88]++;
    if (!this.config.enableFailover) {
      /* istanbul ignore next */
      cov_1o33sj3qc1().b[19][0]++;
      cov_1o33sj3qc1().s[89]++;
      this.logger.warn('Failover is disabled');
      /* istanbul ignore next */
      cov_1o33sj3qc1().s[90]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_1o33sj3qc1().b[19][1]++;
    }
    cov_1o33sj3qc1().s[91]++;
    this.logger.warn(`Performing failover from connection: ${failedConnectionId}`);
    // Update failover statistics
    /* istanbul ignore next */
    cov_1o33sj3qc1().s[92]++;
    this.loadBalancingStats.failoverCount++;
    /* istanbul ignore next */
    cov_1o33sj3qc1().s[93]++;
    this.loadBalancingStats.lastFailover = new Date();
    // Select alternative tunnel
    const alternativeTunnel =
    /* istanbul ignore next */
    (cov_1o33sj3qc1().s[94]++, this.selectTunnel([failedConnectionId]));
    /* istanbul ignore next */
    cov_1o33sj3qc1().s[95]++;
    if (!alternativeTunnel) {
      /* istanbul ignore next */
      cov_1o33sj3qc1().b[20][0]++;
      cov_1o33sj3qc1().s[96]++;
      this.logger.error('No alternative tunnels available for failover');
      /* istanbul ignore next */
      cov_1o33sj3qc1().s[97]++;
      this.emit('failoverFailed', failedConnectionId);
      /* istanbul ignore next */
      cov_1o33sj3qc1().s[98]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_1o33sj3qc1().b[20][1]++;
    }
    cov_1o33sj3qc1().s[99]++;
    this.logger.info(`Failover successful: ${failedConnectionId} -> ${alternativeTunnel.connection.id}`);
    /* istanbul ignore next */
    cov_1o33sj3qc1().s[100]++;
    this.emit('failoverSuccessful', failedConnectionId, alternativeTunnel);
    /* istanbul ignore next */
    cov_1o33sj3qc1().s[101]++;
    return alternativeTunnel;
  }
  /**
   * Get load balancing statistics
   *
   * @returns Current load balancing statistics
   */
  getLoadBalancingStats() {
    /* istanbul ignore next */
    cov_1o33sj3qc1().f[8]++;
    cov_1o33sj3qc1().s[102]++;
    return {
      ...this.loadBalancingStats
    };
  }
  /**
   * Get tunnel weights
   *
   * @returns Map of tunnel weights
   */
  getTunnelWeights() {
    /* istanbul ignore next */
    cov_1o33sj3qc1().f[9]++;
    cov_1o33sj3qc1().s[103]++;
    return new Map(this.tunnelWeights);
  }
  /**
   * Update tunnel weight manually
   *
   * @param connectionId - Connection identifier
   * @param weight - New weight value
   */
  updateTunnelWeight(connectionId, weight) {
    /* istanbul ignore next */
    cov_1o33sj3qc1().f[10]++;
    const tunnelWeight =
    /* istanbul ignore next */
    (cov_1o33sj3qc1().s[104]++, this.tunnelWeights.get(connectionId));
    /* istanbul ignore next */
    cov_1o33sj3qc1().s[105]++;
    if (!tunnelWeight) {
      /* istanbul ignore next */
      cov_1o33sj3qc1().b[21][0]++;
      cov_1o33sj3qc1().s[106]++;
      this.logger.warn(`Tunnel weight not found: ${connectionId}`);
      /* istanbul ignore next */
      cov_1o33sj3qc1().s[107]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1o33sj3qc1().b[21][1]++;
    }
    cov_1o33sj3qc1().s[108]++;
    tunnelWeight.weight = Math.max(0.1, Math.min(10, weight)); // Clamp between 0.1 and 10
    /* istanbul ignore next */
    cov_1o33sj3qc1().s[109]++;
    tunnelWeight.lastUpdated = new Date();
    /* istanbul ignore next */
    cov_1o33sj3qc1().s[110]++;
    this.logger.info(`Updated tunnel weight: ${connectionId}`, {
      weight: tunnelWeight.weight
    });
    /* istanbul ignore next */
    cov_1o33sj3qc1().s[111]++;
    this.emit('tunnelWeightUpdated', connectionId, tunnelWeight);
  }
  /**
   * Update load balancing strategy
   *
   * @param strategy - New load balancing strategy
   */
  updateStrategy(strategy) {
    /* istanbul ignore next */
    cov_1o33sj3qc1().f[11]++;
    const oldStrategy =
    /* istanbul ignore next */
    (cov_1o33sj3qc1().s[112]++, this.config.strategy);
    /* istanbul ignore next */
    cov_1o33sj3qc1().s[113]++;
    this.config.strategy = strategy;
    /* istanbul ignore next */
    cov_1o33sj3qc1().s[114]++;
    this.loadBalancingStats.activeStrategy = strategy;
    // Reset round robin index when changing strategy
    /* istanbul ignore next */
    cov_1o33sj3qc1().s[115]++;
    if (
    /* istanbul ignore next */
    (cov_1o33sj3qc1().b[23][0]++, strategy === LoadBalancingStrategy.ROUND_ROBIN) ||
    /* istanbul ignore next */
    (cov_1o33sj3qc1().b[23][1]++, strategy === LoadBalancingStrategy.WEIGHTED_ROUND_ROBIN)) {
      /* istanbul ignore next */
      cov_1o33sj3qc1().b[22][0]++;
      cov_1o33sj3qc1().s[116]++;
      this.roundRobinIndex = 0;
    } else
    /* istanbul ignore next */
    {
      cov_1o33sj3qc1().b[22][1]++;
    }
    cov_1o33sj3qc1().s[117]++;
    this.logger.info(`Load balancing strategy updated: ${oldStrategy} -> ${strategy}`);
    /* istanbul ignore next */
    cov_1o33sj3qc1().s[118]++;
    this.emit('strategyUpdated', oldStrategy, strategy);
  }
  /**
   * Setup event listeners
   */
  setupEventListeners() {
    /* istanbul ignore next */
    cov_1o33sj3qc1().f[12]++;
    cov_1o33sj3qc1().s[119]++;
    // Listen for tunnel connections
    this.tunnelManager.on('tunnelConnected', connection => {
      /* istanbul ignore next */
      cov_1o33sj3qc1().f[13]++;
      cov_1o33sj3qc1().s[120]++;
      this.initializeTunnelWeight(connection.id);
    });
    // Listen for tunnel disconnections
    /* istanbul ignore next */
    cov_1o33sj3qc1().s[121]++;
    this.tunnelManager.on('tunnelDisconnected', connection => {
      /* istanbul ignore next */
      cov_1o33sj3qc1().f[14]++;
      cov_1o33sj3qc1().s[122]++;
      this.tunnelWeights.delete(connection.id);
    });
    // Listen for health changes
    /* istanbul ignore next */
    cov_1o33sj3qc1().s[123]++;
    this.healthMonitor.on('connectionUnhealthy', connection => {
      /* istanbul ignore next */
      cov_1o33sj3qc1().f[15]++;
      cov_1o33sj3qc1().s[124]++;
      if (this.config.enableFailover) {
        /* istanbul ignore next */
        cov_1o33sj3qc1().b[24][0]++;
        cov_1o33sj3qc1().s[125]++;
        this.performFailover(connection.id);
      } else
      /* istanbul ignore next */
      {
        cov_1o33sj3qc1().b[24][1]++;
      }
    });
  }
  /**
   * Initialize tunnel weights for all connections
   */
  initializeTunnelWeights() {
    /* istanbul ignore next */
    cov_1o33sj3qc1().f[16]++;
    const connections =
    /* istanbul ignore next */
    (cov_1o33sj3qc1().s[126]++, this.tunnelManager.getAllConnections());
    /* istanbul ignore next */
    cov_1o33sj3qc1().s[127]++;
    for (const connection of connections) {
      /* istanbul ignore next */
      cov_1o33sj3qc1().s[128]++;
      this.initializeTunnelWeight(connection.id);
    }
  }
  /**
   * Initialize weight for a specific tunnel
   *
   * @param connectionId - Connection identifier
   */
  initializeTunnelWeight(connectionId) {
    /* istanbul ignore next */
    cov_1o33sj3qc1().f[17]++;
    cov_1o33sj3qc1().s[129]++;
    if (this.tunnelWeights.has(connectionId)) {
      /* istanbul ignore next */
      cov_1o33sj3qc1().b[25][0]++;
      cov_1o33sj3qc1().s[130]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1o33sj3qc1().b[25][1]++;
    }
    const weight =
    /* istanbul ignore next */
    (cov_1o33sj3qc1().s[131]++, {
      connectionId,
      weight: 1.0,
      baseWeight: 1.0,
      performanceMultiplier: 1.0,
      healthMultiplier: 1.0,
      lastUpdated: new Date()
    });
    /* istanbul ignore next */
    cov_1o33sj3qc1().s[132]++;
    this.tunnelWeights.set(connectionId, weight);
    /* istanbul ignore next */
    cov_1o33sj3qc1().s[133]++;
    this.loadBalancingStats.requestsPerTunnel.set(connectionId, 0);
    /* istanbul ignore next */
    cov_1o33sj3qc1().s[134]++;
    this.loadBalancingStats.tunnelUtilization.set(connectionId, 0);
    /* istanbul ignore next */
    cov_1o33sj3qc1().s[135]++;
    this.logger.debug(`Initialized tunnel weight: ${connectionId}`);
  }
  /**
   * Start dynamic weight adjustment
   */
  startWeightAdjustment() {
    /* istanbul ignore next */
    cov_1o33sj3qc1().f[18]++;
    cov_1o33sj3qc1().s[136]++;
    if (this.weightAdjustmentTimer) {
      /* istanbul ignore next */
      cov_1o33sj3qc1().b[26][0]++;
      cov_1o33sj3qc1().s[137]++;
      clearInterval(this.weightAdjustmentTimer);
    } else
    /* istanbul ignore next */
    {
      cov_1o33sj3qc1().b[26][1]++;
    }
    cov_1o33sj3qc1().s[138]++;
    this.weightAdjustmentTimer = setInterval(() => {
      /* istanbul ignore next */
      cov_1o33sj3qc1().f[19]++;
      cov_1o33sj3qc1().s[139]++;
      this.adjustTunnelWeights();
    }, this.config.weightAdjustmentInterval);
    /* istanbul ignore next */
    cov_1o33sj3qc1().s[140]++;
    this.logger.info('Started dynamic weight adjustment');
  }
  /**
   * Adjust tunnel weights based on performance
   */
  adjustTunnelWeights() {
    /* istanbul ignore next */
    cov_1o33sj3qc1().f[20]++;
    cov_1o33sj3qc1().s[141]++;
    for (const [connectionId, weight] of this.tunnelWeights.entries()) {
      const healthMetrics =
      /* istanbul ignore next */
      (cov_1o33sj3qc1().s[142]++, this.healthMonitor.getHealthMetrics(connectionId));
      /* istanbul ignore next */
      cov_1o33sj3qc1().s[143]++;
      if (!healthMetrics) {
        /* istanbul ignore next */
        cov_1o33sj3qc1().b[27][0]++;
        cov_1o33sj3qc1().s[144]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_1o33sj3qc1().b[27][1]++;
      }
      // Calculate performance multiplier based on latency and health
      const latencyMultiplier =
      /* istanbul ignore next */
      (cov_1o33sj3qc1().s[145]++, Math.max(0.1, 1 - healthMetrics.latency / this.config.maxLatencyThreshold));
      const healthMultiplier =
      /* istanbul ignore next */
      (cov_1o33sj3qc1().s[146]++, Math.max(0.1, healthMetrics.healthScore / 100));
      /* istanbul ignore next */
      cov_1o33sj3qc1().s[147]++;
      weight.performanceMultiplier = latencyMultiplier;
      /* istanbul ignore next */
      cov_1o33sj3qc1().s[148]++;
      weight.healthMultiplier = healthMultiplier;
      /* istanbul ignore next */
      cov_1o33sj3qc1().s[149]++;
      weight.weight = weight.baseWeight * weight.performanceMultiplier * weight.healthMultiplier;
      /* istanbul ignore next */
      cov_1o33sj3qc1().s[150]++;
      weight.lastUpdated = new Date();
      /* istanbul ignore next */
      cov_1o33sj3qc1().s[151]++;
      this.logger.debug(`Adjusted tunnel weight: ${connectionId}`, {
        weight: weight.weight,
        latencyMultiplier,
        healthMultiplier
      });
    }
    /* istanbul ignore next */
    cov_1o33sj3qc1().s[152]++;
    this.emit('weightsAdjusted', this.tunnelWeights);
  }
  /**
   * Select tunnel using round robin strategy
   *
   * @param availableTunnels - Available tunnel connections
   * @returns Selected tunnel connection
   */
  selectRoundRobin(availableTunnels) {
    /* istanbul ignore next */
    cov_1o33sj3qc1().f[21]++;
    const selected =
    /* istanbul ignore next */
    (cov_1o33sj3qc1().s[153]++, availableTunnels[this.roundRobinIndex % availableTunnels.length]);
    /* istanbul ignore next */
    cov_1o33sj3qc1().s[154]++;
    this.roundRobinIndex = (this.roundRobinIndex + 1) % availableTunnels.length;
    /* istanbul ignore next */
    cov_1o33sj3qc1().s[155]++;
    return selected;
  }
  /**
   * Select tunnel using least connections strategy
   *
   * @param availableTunnels - Available tunnel connections
   * @returns Selected tunnel connection
   */
  selectLeastConnections(availableTunnels) {
    /* istanbul ignore next */
    cov_1o33sj3qc1().f[22]++;
    cov_1o33sj3qc1().s[156]++;
    return availableTunnels.reduce((least, current) => {
      /* istanbul ignore next */
      cov_1o33sj3qc1().f[23]++;
      const leastRequests =
      /* istanbul ignore next */
      (cov_1o33sj3qc1().s[157]++,
      /* istanbul ignore next */
      (cov_1o33sj3qc1().b[28][0]++, this.loadBalancingStats.requestsPerTunnel.get(least.id)) ||
      /* istanbul ignore next */
      (cov_1o33sj3qc1().b[28][1]++, 0));
      const currentRequests =
      /* istanbul ignore next */
      (cov_1o33sj3qc1().s[158]++,
      /* istanbul ignore next */
      (cov_1o33sj3qc1().b[29][0]++, this.loadBalancingStats.requestsPerTunnel.get(current.id)) ||
      /* istanbul ignore next */
      (cov_1o33sj3qc1().b[29][1]++, 0));
      /* istanbul ignore next */
      cov_1o33sj3qc1().s[159]++;
      return currentRequests < leastRequests ?
      /* istanbul ignore next */
      (cov_1o33sj3qc1().b[30][0]++, current) :
      /* istanbul ignore next */
      (cov_1o33sj3qc1().b[30][1]++, least);
    });
  }
  /**
   * Select tunnel using weighted round robin strategy
   *
   * @param availableTunnels - Available tunnel connections
   * @returns Selected tunnel connection
   */
  selectWeightedRoundRobin(availableTunnels) {
    /* istanbul ignore next */
    cov_1o33sj3qc1().f[24]++;
    // Calculate total weight
    const totalWeight =
    /* istanbul ignore next */
    (cov_1o33sj3qc1().s[160]++, availableTunnels.reduce((sum, tunnel) => {
      /* istanbul ignore next */
      cov_1o33sj3qc1().f[25]++;
      const weight =
      /* istanbul ignore next */
      (cov_1o33sj3qc1().s[161]++,
      /* istanbul ignore next */
      (cov_1o33sj3qc1().b[31][0]++, this.tunnelWeights.get(tunnel.id)?.weight) ||
      /* istanbul ignore next */
      (cov_1o33sj3qc1().b[31][1]++, 1));
      /* istanbul ignore next */
      cov_1o33sj3qc1().s[162]++;
      return sum + weight;
    }, 0));
    // Generate random number
    let random =
    /* istanbul ignore next */
    (cov_1o33sj3qc1().s[163]++, Math.random() * totalWeight);
    // Select based on weight
    /* istanbul ignore next */
    cov_1o33sj3qc1().s[164]++;
    for (const tunnel of availableTunnels) {
      const weight =
      /* istanbul ignore next */
      (cov_1o33sj3qc1().s[165]++,
      /* istanbul ignore next */
      (cov_1o33sj3qc1().b[32][0]++, this.tunnelWeights.get(tunnel.id)?.weight) ||
      /* istanbul ignore next */
      (cov_1o33sj3qc1().b[32][1]++, 1));
      /* istanbul ignore next */
      cov_1o33sj3qc1().s[166]++;
      random -= weight;
      /* istanbul ignore next */
      cov_1o33sj3qc1().s[167]++;
      if (random <= 0) {
        /* istanbul ignore next */
        cov_1o33sj3qc1().b[33][0]++;
        cov_1o33sj3qc1().s[168]++;
        return tunnel;
      } else
      /* istanbul ignore next */
      {
        cov_1o33sj3qc1().b[33][1]++;
      }
    }
    // Fallback to first tunnel
    /* istanbul ignore next */
    cov_1o33sj3qc1().s[169]++;
    return availableTunnels[0];
  }
  /**
   * Select tunnel using health-based strategy
   *
   * @param availableTunnels - Available tunnel connections
   * @returns Selected tunnel connection
   */
  selectHealthBased(availableTunnels) {
    /* istanbul ignore next */
    cov_1o33sj3qc1().f[26]++;
    cov_1o33sj3qc1().s[170]++;
    return availableTunnels.reduce((best, current) => {
      /* istanbul ignore next */
      cov_1o33sj3qc1().f[27]++;
      const bestHealth =
      /* istanbul ignore next */
      (cov_1o33sj3qc1().s[171]++,
      /* istanbul ignore next */
      (cov_1o33sj3qc1().b[34][0]++, this.healthMonitor.getHealthMetrics(best.id)?.healthScore) ||
      /* istanbul ignore next */
      (cov_1o33sj3qc1().b[34][1]++, 0));
      const currentHealth =
      /* istanbul ignore next */
      (cov_1o33sj3qc1().s[172]++,
      /* istanbul ignore next */
      (cov_1o33sj3qc1().b[35][0]++, this.healthMonitor.getHealthMetrics(current.id)?.healthScore) ||
      /* istanbul ignore next */
      (cov_1o33sj3qc1().b[35][1]++, 0));
      /* istanbul ignore next */
      cov_1o33sj3qc1().s[173]++;
      return currentHealth > bestHealth ?
      /* istanbul ignore next */
      (cov_1o33sj3qc1().b[36][0]++, current) :
      /* istanbul ignore next */
      (cov_1o33sj3qc1().b[36][1]++, best);
    });
  }
  /**
   * Select tunnel using latency-based strategy
   *
   * @param availableTunnels - Available tunnel connections
   * @returns Selected tunnel connection
   */
  selectLatencyBased(availableTunnels) {
    /* istanbul ignore next */
    cov_1o33sj3qc1().f[28]++;
    cov_1o33sj3qc1().s[174]++;
    return availableTunnels.reduce((best, current) => {
      /* istanbul ignore next */
      cov_1o33sj3qc1().f[29]++;
      const bestLatency =
      /* istanbul ignore next */
      (cov_1o33sj3qc1().s[175]++,
      /* istanbul ignore next */
      (cov_1o33sj3qc1().b[37][0]++, this.healthMonitor.getHealthMetrics(best.id)?.latency) ||
      /* istanbul ignore next */
      (cov_1o33sj3qc1().b[37][1]++, Infinity));
      const currentLatency =
      /* istanbul ignore next */
      (cov_1o33sj3qc1().s[176]++,
      /* istanbul ignore next */
      (cov_1o33sj3qc1().b[38][0]++, this.healthMonitor.getHealthMetrics(current.id)?.latency) ||
      /* istanbul ignore next */
      (cov_1o33sj3qc1().b[38][1]++, Infinity));
      /* istanbul ignore next */
      cov_1o33sj3qc1().s[177]++;
      return currentLatency < bestLatency ?
      /* istanbul ignore next */
      (cov_1o33sj3qc1().b[39][0]++, current) :
      /* istanbul ignore next */
      (cov_1o33sj3qc1().b[39][1]++, best);
    });
  }
  /**
   * Select tunnel using random strategy
   *
   * @param availableTunnels - Available tunnel connections
   * @returns Selected tunnel connection
   */
  selectRandom(availableTunnels) {
    /* istanbul ignore next */
    cov_1o33sj3qc1().f[30]++;
    const randomIndex =
    /* istanbul ignore next */
    (cov_1o33sj3qc1().s[178]++, Math.floor(Math.random() * availableTunnels.length));
    /* istanbul ignore next */
    cov_1o33sj3qc1().s[179]++;
    return availableTunnels[randomIndex];
  }
  /**
   * Update selection statistics
   *
   * @param connectionId - Selected connection ID
   */
  updateSelectionStats(connectionId) {
    /* istanbul ignore next */
    cov_1o33sj3qc1().f[31]++;
    cov_1o33sj3qc1().s[180]++;
    this.loadBalancingStats.totalRequests++;
    const currentRequests =
    /* istanbul ignore next */
    (cov_1o33sj3qc1().s[181]++,
    /* istanbul ignore next */
    (cov_1o33sj3qc1().b[40][0]++, this.loadBalancingStats.requestsPerTunnel.get(connectionId)) ||
    /* istanbul ignore next */
    (cov_1o33sj3qc1().b[40][1]++, 0));
    /* istanbul ignore next */
    cov_1o33sj3qc1().s[182]++;
    this.loadBalancingStats.requestsPerTunnel.set(connectionId, currentRequests + 1);
    // Update utilization
    const totalRequests =
    /* istanbul ignore next */
    (cov_1o33sj3qc1().s[183]++, this.loadBalancingStats.totalRequests);
    /* istanbul ignore next */
    cov_1o33sj3qc1().s[184]++;
    for (const [tunnelId, requests] of this.loadBalancingStats.requestsPerTunnel.entries()) {
      const utilization =
      /* istanbul ignore next */
      (cov_1o33sj3qc1().s[185]++, requests / totalRequests * 100);
      /* istanbul ignore next */
      cov_1o33sj3qc1().s[186]++;
      this.loadBalancingStats.tunnelUtilization.set(tunnelId, utilization);
    }
  }
  /**
   * Cleanup load balancer resources
   */
  cleanup() {
    /* istanbul ignore next */
    cov_1o33sj3qc1().f[32]++;
    cov_1o33sj3qc1().s[187]++;
    this.disable();
    /* istanbul ignore next */
    cov_1o33sj3qc1().s[188]++;
    this.tunnelWeights.clear();
    /* istanbul ignore next */
    cov_1o33sj3qc1().s[189]++;
    this.loadBalancingStats.requestsPerTunnel.clear();
    /* istanbul ignore next */
    cov_1o33sj3qc1().s[190]++;
    this.loadBalancingStats.tunnelUtilization.clear();
    /* istanbul ignore next */
    cov_1o33sj3qc1().s[191]++;
    this.logger.info('Tunnel load balancer cleanup completed');
  }
}
/* istanbul ignore next */
cov_1o33sj3qc1().s[192]++;
exports.TunnelLoadBalancer = TunnelLoadBalancer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,