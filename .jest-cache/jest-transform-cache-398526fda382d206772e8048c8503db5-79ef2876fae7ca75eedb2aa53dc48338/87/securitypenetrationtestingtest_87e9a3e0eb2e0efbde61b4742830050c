58a570da11f7615b6c701d5e2c5d09fe
"use strict";
/**
 * =============================================================================
 * COMPREHENSIVE SECURITY PENETRATION TESTING SUITE
 * =============================================================================
 *
 * Advanced automated security testing suite for the AI crypto trading agent.
 * Implements comprehensive penetration testing, vulnerability scanning, and
 * security compliance validation as required by task 12.3.
 *
 * Features:
 * - Automated penetration testing for API endpoints
 * - Vulnerability scanning and assessment
 * - Security compliance testing and validation
 * - Real-time threat detection testing
 * - Comprehensive security reporting
 *
 * Requirements: 25.7 - Security compliance testing and validation
 *
 * @author AI Crypto Trading System
 * @version 1.0.0
 * @license PROPRIETARY
 * =============================================================================
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
// Mock external dependencies for testing
jest.mock('../../core/logging/logger');
jest.mock('../../core/notifications/notification-service');
jest.mock('axios');
const logger_1 = require("../../core/logging/logger");
const penetration_testing_service_1 = require("../../security/penetration-testing-service");
const automated_security_testing_1 = require("../../security/automated-security-testing");
const compliance_testing_1 = require("../../security/compliance-testing");
const encryption_service_1 = require("../../security/encryption-service");
const threat_detection_engine_1 = require("../../security/threat-detection-engine");
const security_monitoring_service_1 = require("../../security/security-monitoring-service");
const incident_response_service_1 = require("../../security/incident-response-service");
const notification_service_1 = require("../../core/notifications/notification-service");
const crypto = __importStar(require("crypto"));
const fs = __importStar(require("fs/promises"));
const path = __importStar(require("path"));
const os = __importStar(require("os"));
describe('Comprehensive Security Penetration Testing Suite', () => {
    let logger;
    let encryptionService;
    let threatDetection;
    let penetrationTesting;
    let automatedSecurityTesting;
    let complianceTestingService;
    let securityMonitoring;
    let incidentResponse;
    let notifications;
    let testOutputDir;
    beforeAll(async () => {
        // Set up test environment
        process.env.NODE_ENV = 'test';
        process.env.MASTER_ENCRYPTION_KEY = crypto.randomBytes(32).toString('hex');
        // Create temporary test output directory
        testOutputDir = path.join(os.tmpdir(), 'security-test-output');
        await fs.mkdir(testOutputDir, { recursive: true });
    });
    beforeEach(async () => {
        // Initialize services
        logger = new logger_1.Logger();
        encryptionService = new encryption_service_1.EncryptionService(logger);
        threatDetection = new threat_detection_engine_1.ThreatDetectionEngine(logger);
        securityMonitoring = new security_monitoring_service_1.SecurityMonitoringService(logger);
        incidentResponse = new incident_response_service_1.IncidentResponseService(logger, notifications);
        notifications = new notification_service_1.NotificationService(logger);
        // Configure penetration testing
        const penetrationConfig = {
            targetEndpoints: [
                'http://localhost:3000/api/v4/spot/time',
                'http://localhost:3000/api/v4/spot/accounts',
                'http://localhost:3000/api/v4/spot/orders',
                'http://localhost:3000/api/dashboard/status',
                'http://localhost:3000/api/trading/positions'
            ],
            testTypes: [
                'sql_injection',
                'xss',
                'authentication_bypass',
                'authorization_escalation',
                'input_validation',
                'rate_limiting',
                'tls_security'
            ],
            maxConcurrentTests: 5,
            timeoutMs: 30000,
            enableDestructiveTesting: false,
            complianceStandards: ['OWASP_TOP_10', 'ISO_27001', 'SOC_2', 'CRYPTO_TRADING_SECURITY']
        };
        penetrationTesting = new penetration_testing_service_1.PenetrationTestingService(logger, encryptionService, threatDetection, penetrationConfig);
        // Configure automated security testing suite
        const securityTestConfig = {
            schedules: [
                {
                    id: 'daily-security-scan',
                    name: 'Daily Security Scan',
                    cronExpression: '0 2 * * *', // 2 AM daily
                    testTypes: ['penetration', 'vulnerability', 'compliance'],
                    enabled: true
                },
                {
                    id: 'weekly-comprehensive-scan',
                    name: 'Weekly Comprehensive Scan',
                    cronExpression: '0 1 * * 0', // 1 AM every Sunday
                    testTypes: ['full_penetration', 'deep_vulnerability', 'full_compliance'],
                    enabled: true
                }
            ],
            reportingConfig: {
                outputDirectory: testOutputDir,
                retentionDays: 30,
                emailReports: true,
                slackIntegration: false
            },
            alertingConfig: {
                criticalThreshold: 1,
                highThreshold: 3,
                emailAlerts: true,
                immediateNotification: true
            },
            integrationConfig: {
                cicdIntegration: true,
                webhookUrl: 'http://localhost:3000/api/security/webhook',
                apiKey: 'test-api-key'
            }
        };
        automatedSecurityTesting = new automated_security_testing_1.AutomatedSecurityTestingSuite(logger, penetrationTesting, securityMonitoring, incidentResponse, notifications, securityTestConfig);
        complianceTestingService = new compliance_testing_1.ComplianceTestingService(logger);
        // Clear all mocks
        jest.clearAllMocks();
    });
    afterEach(async () => {
        // Clean up test files
        try {
            const files = await fs.readdir(testOutputDir);
            for (const file of files) {
                await fs.unlink(path.join(testOutputDir, file));
            }
        }
        catch (error) {
            // Ignore cleanup errors
        }
    });
    afterAll(async () => {
        // Clean up test environment
        delete process.env.MASTER_ENCRYPTION_KEY;
        delete process.env.NODE_ENV;
        try {
            await fs.rmdir(testOutputDir);
        }
        catch (error) {
            // Ignore cleanup errors
        }
    });
    describe('Automated Security Testing Suite', () => {
        it('should initialize automated security testing suite successfully', async () => {
            await expect(automatedSecurityTesting.initialize()).resolves.not.toThrow();
            expect(logger.info).toHaveBeenCalledWith('Automated security testing suite initialized successfully', expect.any(Object));
        });
        it('should execute on-demand security tests', async () => {
            const mockReport = {
                scanId: 'test-scan-123',
                timestamp: new Date(),
                totalVulnerabilities: 5,
                criticalCount: 1,
                highCount: 2,
                mediumCount: 1,
                lowCount: 1,
                vulnerabilities: [
                    {
                        id: 'vuln-1',
                        type: 'SQL_INJECTION',
                        severity: 'CRITICAL',
                        description: 'SQL injection vulnerability in login endpoint',
                        location: '/api/auth/login',
                        evidence: 'Payload: \' OR 1=1 --',
                        remediation: 'Use parameterized queries'
                    }
                ],
                complianceScore: 75,
                recommendations: [
                    'Implement input validation',
                    'Use parameterized queries',
                    'Add rate limiting'
                ]
            };
            // Mock the penetration testing service
            jest.spyOn(penetrationTesting, 'executeSecurityTestSuite').mockResolvedValue(mockReport);
            const result = await automatedSecurityTesting.executeSecurityTestsOnDemand();
            expect(result).toEqual(mockReport);
            expect(penetrationTesting.executeSecurityTestSuite).toHaveBeenCalled();
            expect(logger.info).toHaveBeenCalledWith('On-demand security test execution completed', expect.objectContaining({
                totalVulnerabilities: 5,
                criticalCount: 1
            }));
        });
        it('should handle critical vulnerabilities appropriately', async () => {
            const criticalReport = {
                scanId: 'critical-scan-456',
                timestamp: new Date(),
                totalVulnerabilities: 3,
                criticalCount: 3,
                highCount: 0,
                mediumCount: 0,
                lowCount: 0,
                vulnerabilities: [
                    {
                        id: 'critical-1',
                        type: 'AUTHENTICATION_BYPASS',
                        severity: 'CRITICAL',
                        description: 'Authentication bypass in trading API',
                        location: '/api/trading/orders',
                        evidence: 'Endpoint accessible without authentication',
                        remediation: 'Implement proper authentication checks'
                    }
                ],
                complianceScore: 30,
                recommendations: ['Immediate security review required']
            };
            jest.spyOn(penetrationTesting, 'executeSecurityTestSuite').mockResolvedValue(criticalReport);
            jest.spyOn(incidentResponse, 'createIncident').mockResolvedValue({
                id: 'incident-123',
                type: 'CRITICAL_VULNERABILITIES',
                severity: 'CRITICAL',
                description: 'Critical vulnerabilities detected',
                source: 'Automated Security Testing',
                timestamp: new Date(),
                status: 'DETECTED',
                evidence: [],
                responseActions: []
            });
            const result = await automatedSecurityTesting.executeSecurityTestsOnDemand();
            expect(result.criticalCount).toBe(3);
            expect(incidentResponse.createIncident).toHaveBeenCalledWith(expect.objectContaining({
                type: 'CRITICAL_VULNERABILITIES',
                severity: 'CRITICAL'
            }));
        });
        it('should generate and save security reports', async () => {
            const mockReport = {
                scanId: 'report-test-789',
                timestamp: new Date(),
                totalVulnerabilities: 2,
                criticalCount: 0,
                highCount: 1,
                mediumCount: 1,
                lowCount: 0,
                vulnerabilities: [],
                complianceScore: 85,
                recommendations: ['Regular security updates']
            };
            jest.spyOn(penetrationTesting, 'executeSecurityTestSuite').mockResolvedValue(mockReport);
            await automatedSecurityTesting.executeSecurityTestsOnDemand();
            // Check if report file was created
            const files = await fs.readdir(testOutputDir);
            const reportFiles = files.filter(f => f.startsWith('security-report-'));
            expect(reportFiles.length).toBeGreaterThan(0);
        });
    });
    describe('Penetration Testing Service', () => {
        it('should execute comprehensive security test suite', async () => {
            const result = await penetrationTesting.executeSecurityTestSuite();
            expect(result).toHaveProperty('scanId');
            expect(result).toHaveProperty('timestamp');
            expect(result).toHaveProperty('totalVulnerabilities');
            expect(result).toHaveProperty('vulnerabilities');
            expect(result).toHaveProperty('complianceScore');
            expect(result).toHaveProperty('recommendations');
            expect(typeof result.totalVulnerabilities).toBe('number');
            expect(Array.isArray(result.vulnerabilities)).toBe(true);
            expect(Array.isArray(result.recommendations)).toBe(true);
        });
        it('should test API endpoints for SQL injection vulnerabilities', async () => {
            // This test would normally make actual HTTP requests
            // For testing purposes, we'll mock the behavior
            const mockSQLInjectionTest = jest.spyOn(penetrationTesting, 'testSQLInjection');
            mockSQLInjectionTest.mockResolvedValue({
                testId: 'sql-test-1',
                testName: 'SQL Injection Test',
                category: 'API_SECURITY',
                status: 'PASS',
                severity: 'LOW',
                description: 'No SQL injection vulnerabilities found',
                findings: [],
                recommendations: [],
                timestamp: new Date(),
                executionTime: 1000
            });
            const result = await penetrationTesting.executeSecurityTestSuite();
            expect(result.vulnerabilities.length).toBeGreaterThanOrEqual(0);
        });
        it('should test authentication bypass vulnerabilities', async () => {
            const mockAuthTest = jest.spyOn(penetrationTesting, 'testAuthenticationBypass');
            mockAuthTest.mockResolvedValue({
                testId: 'auth-test-1',
                testName: 'Authentication Bypass Test',
                category: 'API_SECURITY',
                status: 'PASS',
                severity: 'LOW',
                description: 'Authentication properly enforced',
                findings: [],
                recommendations: [],
                timestamp: new Date(),
                executionTime: 1500
            });
            const result = await penetrationTesting.executeSecurityTestSuite();
            expect(result).toBeDefined();
            expect(result.complianceScore).toBeGreaterThanOrEqual(0);
            expect(result.complianceScore).toBeLessThanOrEqual(100);
        });
        it('should test rate limiting implementation', async () => {
            const mockRateLimitTest = jest.spyOn(penetrationTesting, 'testRateLimiting');
            mockRateLimitTest.mockResolvedValue({
                testId: 'rate-test-1',
                testName: 'Rate Limiting Test',
                category: 'API_SECURITY',
                status: 'PASS',
                severity: 'LOW',
                description: 'Rate limiting properly implemented',
                findings: [],
                recommendations: [],
                timestamp: new Date(),
                executionTime: 2000
            });
            const result = await penetrationTesting.executeSecurityTestSuite();
            expect(result.recommendations).toBeDefined();
            expect(Array.isArray(result.recommendations)).toBe(true);
        });
    });
    describe('Compliance Testing Service', () => {
        it('should execute OWASP Top 10 compliance testing', async () => {
            const result = await complianceTestingService.executeComplianceTest('OWASP_TOP_10');
            expect(result).toHaveProperty('reportId');
            expect(result).toHaveProperty('standardId', 'OWASP_TOP_10');
            expect(result).toHaveProperty('standardName', 'OWASP Top 10');
            expect(result).toHaveProperty('overallScore');
            expect(result).toHaveProperty('status');
            expect(result).toHaveProperty('controlResults');
            expect(result).toHaveProperty('gapAnalysis');
            expect(result).toHaveProperty('recommendations');
            expect(typeof result.overallScore).toBe('number');
            expect(result.overallScore).toBeGreaterThanOrEqual(0);
            expect(result.overallScore).toBeLessThanOrEqual(100);
            expect(['COMPLIANT', 'NON_COMPLIANT', 'PARTIAL']).toContain(result.status);
        });
        it('should execute ISO 27001 compliance testing', async () => {
            const result = await complianceTestingService.executeComplianceTest('ISO_27001');
            expect(result.standardId).toBe('ISO_27001');
            expect(result.standardName).toBe('ISO/IEC 27001');
            expect(result.controlResults.length).toBeGreaterThan(0);
            // Check that each control result has required properties
            result.controlResults.forEach(control => {
                expect(control).toHaveProperty('controlId');
                expect(control).toHaveProperty('controlName');
                expect(control).toHaveProperty('status');
                expect(control).toHaveProperty('score');
                expect(control).toHaveProperty('maxScore');
                expect(['PASS', 'FAIL', 'PARTIAL']).toContain(control.status);
            });
        });
        it('should execute SOC 2 compliance testing', async () => {
            const result = await complianceTestingService.executeComplianceTest('SOC_2');
            expect(result.standardId).toBe('SOC_2');
            expect(result.standardName).toBe('SOC 2 Type II');
            expect(result.requiredScore).toBe(90);
            // SOC 2 should have high compliance requirements
            expect(result.requiredScore).toBeGreaterThanOrEqual(90);
        });
        it('should execute custom crypto trading security compliance testing', async () => {
            const result = await complianceTestingService.executeComplianceTest('CRYPTO_TRADING_SECURITY');
            expect(result.standardId).toBe('CRYPTO_TRADING_SECURITY');
            expect(result.standardName).toBe('Crypto Trading Security Framework');
            expect(result.requiredScore).toBe(95);
            // Check for crypto-specific controls
            const controlIds = result.controlResults.map(c => c.controlId);
            expect(controlIds).toContain('CTS.1.1'); // API Key Security
            expect(controlIds).toContain('CTS.2.1'); // Trading Algorithm Security
            expect(controlIds).toContain('CTS.3.1'); // Risk Management Controls
        });
        it('should generate gap analysis for non-compliant standards', async () => {
            const result = await complianceTestingService.executeComplianceTest('OWASP_TOP_10');
            expect(result.gapAnalysis).toBeDefined();
            expect(Array.isArray(result.gapAnalysis)).toBe(true);
            if (result.status !== 'COMPLIANT') {
                expect(result.gapAnalysis.length).toBeGreaterThan(0);
                result.gapAnalysis.forEach(gap => {
                    expect(gap).toHaveProperty('controlId');
                    expect(gap).toHaveProperty('controlName');
                    expect(gap).toHaveProperty('currentScore');
                    expect(gap).toHaveProperty('requiredScore');
                    expect(gap).toHaveProperty('gap');
                    expect(gap).toHaveProperty('priority');
                    expect(gap).toHaveProperty('remediation');
                    expect(['LOW', 'MEDIUM', 'HIGH', 'CRITICAL']).toContain(gap.priority);
                });
            }
        });
        it('should provide actionable recommendations', async () => {
            const result = await complianceTestingService.executeComplianceTest('OWASP_TOP_10');
            expect(result.recommendations).toBeDefined();
            expect(Array.isArray(result.recommendations)).toBe(true);
            expect(result.recommendations.length).toBeGreaterThan(0);
            // Recommendations should be strings
            result.recommendations.forEach(recommendation => {
                expect(typeof recommendation).toBe('string');
                expect(recommendation.length).toBeGreaterThan(0);
            });
        });
    });
    describe('Vulnerability Scanning', () => {
        it('should scan for dependency vulnerabilities', async () => {
            const result = await penetrationTesting.executeSecurityTestSuite();
            // Check if dependency scanning was performed
            const dependencyVulns = result.vulnerabilities.filter(v => v.type === 'DEPENDENCY_VULNERABILITY');
            // Should have scanned dependencies (may or may not find vulnerabilities)
            expect(result.vulnerabilities).toBeDefined();
        });
        it('should scan for configuration security issues', async () => {
            const result = await penetrationTesting.executeSecurityTestSuite();
            // Check if configuration scanning was performed
            const configVulns = result.vulnerabilities.filter(v => v.type === 'CONFIGURATION' || v.type === 'SECURITY_HEADERS');
            // Configuration scanning should be included in the report
            expect(result.vulnerabilities).toBeDefined();
        });
        it('should scan for hardcoded secrets', async () => {
            const result = await penetrationTesting.executeSecurityTestSuite();
            // Check if secret scanning was performed
            const secretVulns = result.vulnerabilities.filter(v => v.type === 'HARDCODED_SECRET' || v.type === 'CREDENTIAL_EXPOSURE');
            // Secret scanning should be part of the comprehensive scan
            expect(result.vulnerabilities).toBeDefined();
        });
        it('should provide severity-based vulnerability classification', async () => {
            const result = await penetrationTesting.executeSecurityTestSuite();
            // Check vulnerability severity distribution
            expect(result.criticalCount).toBeGreaterThanOrEqual(0);
            expect(result.highCount).toBeGreaterThanOrEqual(0);
            expect(result.mediumCount).toBeGreaterThanOrEqual(0);
            expect(result.lowCount).toBeGreaterThanOrEqual(0);
            // Total should match sum of severity counts
            const severitySum = result.criticalCount + result.highCount +
                result.mediumCount + result.lowCount;
            expect(severitySum).toBe(result.totalVulnerabilities);
        });
    });
    describe('Security Test Integration', () => {
        it('should integrate with threat detection engine', async () => {
            // Test that security testing integrates with threat detection
            const result = await penetrationTesting.executeSecurityTestSuite();
            expect(result).toBeDefined();
            expect(threatDetection).toBeDefined();
        });
        it('should integrate with incident response system', async () => {
            const criticalReport = {
                scanId: 'integration-test',
                timestamp: new Date(),
                totalVulnerabilities: 1,
                criticalCount: 1,
                highCount: 0,
                mediumCount: 0,
                lowCount: 0,
                vulnerabilities: [
                    {
                        id: 'critical-integration',
                        type: 'CRITICAL_VULNERABILITY',
                        severity: 'CRITICAL',
                        description: 'Critical security issue detected',
                        location: 'Test location',
                        evidence: 'Test evidence',
                        remediation: 'Test remediation'
                    }
                ],
                complianceScore: 20,
                recommendations: ['Immediate action required']
            };
            jest.spyOn(penetrationTesting, 'executeSecurityTestSuite').mockResolvedValue(criticalReport);
            jest.spyOn(incidentResponse, 'createIncident').mockResolvedValue({
                id: 'integration-incident',
                type: 'CRITICAL_VULNERABILITIES',
                severity: 'CRITICAL',
                description: 'Integration test incident',
                source: 'Test',
                timestamp: new Date(),
                status: 'DETECTED',
                evidence: [],
                responseActions: []
            });
            await automatedSecurityTesting.executeSecurityTestsOnDemand();
            expect(incidentResponse.createIncident).toHaveBeenCalled();
        });
        it('should integrate with notification system', async () => {
            const highSeverityReport = {
                scanId: 'notification-test',
                timestamp: new Date(),
                totalVulnerabilities: 3,
                criticalCount: 0,
                highCount: 3,
                mediumCount: 0,
                lowCount: 0,
                vulnerabilities: [],
                complianceScore: 60,
                recommendations: ['Address high severity issues']
            };
            jest.spyOn(penetrationTesting, 'executeSecurityTestSuite').mockResolvedValue(highSeverityReport);
            jest.spyOn(notifications, 'sendAlert').mockResolvedValue();
            await automatedSecurityTesting.executeSecurityTestsOnDemand();
            expect(notifications.sendAlert).toHaveBeenCalledWith(expect.objectContaining({
                title: expect.stringContaining('High Severity'),
                priority: 'HIGH'
            }));
        });
    });
    describe('Security Test Reporting', () => {
        it('should generate comprehensive security reports', async () => {
            const result = await penetrationTesting.executeSecurityTestSuite();
            expect(result).toHaveProperty('scanId');
            expect(result).toHaveProperty('timestamp');
            expect(result).toHaveProperty('totalVulnerabilities');
            expect(result).toHaveProperty('criticalCount');
            expect(result).toHaveProperty('highCount');
            expect(result).toHaveProperty('mediumCount');
            expect(result).toHaveProperty('lowCount');
            expect(result).toHaveProperty('vulnerabilities');
            expect(result).toHaveProperty('complianceScore');
            expect(result).toHaveProperty('recommendations');
            // Validate report structure
            expect(typeof result.scanId).toBe('string');
            expect(result.timestamp instanceof Date).toBe(true);
            expect(typeof result.totalVulnerabilities).toBe('number');
            expect(typeof result.complianceScore).toBe('number');
            expect(Array.isArray(result.vulnerabilities)).toBe(true);
            expect(Array.isArray(result.recommendations)).toBe(true);
        });
        it('should save reports to configured output directory', async () => {
            await automatedSecurityTesting.executeSecurityTestsOnDemand();
            // Check if report files were created
            const files = await fs.readdir(testOutputDir);
            const reportFiles = files.filter(f => f.startsWith('security-report-'));
            expect(reportFiles.length).toBeGreaterThan(0);
            // Validate report file content
            if (reportFiles.length > 0) {
                const reportContent = await fs.readFile(path.join(testOutputDir, reportFiles[0]), 'utf-8');
                const reportData = JSON.parse(reportContent);
                expect(reportData).toHaveProperty('execution');
                expect(reportData).toHaveProperty('report');
                expect(reportData).toHaveProperty('metadata');
            }
        });
        it('should clean up old reports based on retention policy', async () => {
            // Create old test files
            const oldFileName = `security-report-old-${Date.now() - 86400000 * 31}.json`; // 31 days old
            await fs.writeFile(path.join(testOutputDir, oldFileName), JSON.stringify({ test: 'old report' }));
            // Execute security test (which should trigger cleanup)
            await automatedSecurityTesting.executeSecurityTestsOnDemand();
            // Wait a bit for cleanup to complete
            await new Promise(resolve => setTimeout(resolve, 1000));
            // Check if old file was cleaned up
            const files = await fs.readdir(testOutputDir);
            expect(files).not.toContain(oldFileName);
        });
    });
    describe('Error Handling and Resilience', () => {
        it('should handle network errors gracefully', async () => {
            // Mock network error
            jest.spyOn(penetrationTesting, 'sendTestRequest').mockRejectedValue(new Error('Network error'));
            const result = await penetrationTesting.executeSecurityTestSuite();
            // Should still return a report even with network errors
            expect(result).toBeDefined();
            expect(result).toHaveProperty('scanId');
        });
        it('should handle timeout errors appropriately', async () => {
            // Mock timeout error
            jest.spyOn(penetrationTesting, 'sendTestRequest').mockImplementation(() => new Promise((_, reject) => setTimeout(() => reject(new Error('Timeout')), 100)));
            const result = await penetrationTesting.executeSecurityTestSuite();
            expect(result).toBeDefined();
            expect(logger.error).toHaveBeenCalled();
        });
        it('should continue testing after individual test failures', async () => {
            // Mock some tests to fail
            let callCount = 0;
            jest.spyOn(penetrationTesting, 'testSQLInjection').mockImplementation(() => {
                callCount++;
                if (callCount === 1) {
                    throw new Error('Test failure');
                }
                return Promise.resolve({
                    testId: 'test-1',
                    testName: 'Test',
                    category: 'API_SECURITY',
                    status: 'PASS',
                    severity: 'LOW',
                    description: 'Test passed',
                    findings: [],
                    recommendations: [],
                    timestamp: new Date(),
                    executionTime: 1000
                });
            });
            const result = await penetrationTesting.executeSecurityTestSuite();
            // Should complete despite individual test failures
            expect(result).toBeDefined();
            expect(result.totalVulnerabilities).toBeGreaterThanOrEqual(0);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,