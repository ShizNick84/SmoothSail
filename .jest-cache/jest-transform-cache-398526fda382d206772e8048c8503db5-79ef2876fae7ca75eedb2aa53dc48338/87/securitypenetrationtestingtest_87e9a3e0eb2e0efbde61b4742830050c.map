{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\tests\\security\\security-penetration-testing.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\tests\\security\\security-penetration-testing.test.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * COMPREHENSIVE SECURITY PENETRATION TESTING SUITE\r\n * =============================================================================\r\n * \r\n * Advanced automated security testing suite for the AI crypto trading agent.\r\n * Implements comprehensive penetration testing, vulnerability scanning, and\r\n * security compliance validation as required by task 12.3.\r\n * \r\n * Features:\r\n * - Automated penetration testing for API endpoints\r\n * - Vulnerability scanning and assessment\r\n * - Security compliance testing and validation\r\n * - Real-time threat detection testing\r\n * - Comprehensive security reporting\r\n * \r\n * Requirements: 25.7 - Security compliance testing and validation\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport { Logger } from '../../core/logging/logger';\r\nimport { PenetrationTestingService, PenetrationTestConfig, VulnerabilityReport } from '../../security/penetration-testing-service';\r\nimport { AutomatedSecurityTestingSuite, SecurityTestSuiteConfig } from '../../security/automated-security-testing';\r\nimport { ComplianceTestingService } from '../../security/compliance-testing';\r\nimport { EncryptionService } from '../../security/encryption-service';\r\nimport { ThreatDetectionEngine } from '../../security/threat-detection-engine';\r\nimport { SecurityMonitoringService } from '../../security/security-monitoring-service';\r\nimport { IncidentResponseService } from '../../security/incident-response-service';\r\nimport { NotificationService } from '../../core/notifications/notification-service';\r\nimport * as crypto from 'crypto';\r\nimport * as fs from 'fs/promises';\r\nimport * as path from 'path';\r\nimport * as os from 'os';\r\n\r\n// Mock external dependencies for testing\r\njest.mock('../../core/logging/logger');\r\njest.mock('../../core/notifications/notification-service');\r\njest.mock('axios');\r\n\r\ndescribe('Comprehensive Security Penetration Testing Suite', () => {\r\n  let logger: Logger;\r\n  let encryptionService: EncryptionService;\r\n  let threatDetection: ThreatDetectionEngine;\r\n  let penetrationTesting: PenetrationTestingService;\r\n  let automatedSecurityTesting: AutomatedSecurityTestingSuite;\r\n  let complianceTestingService: ComplianceTestingService;\r\n  let securityMonitoring: SecurityMonitoringService;\r\n  let incidentResponse: IncidentResponseService;\r\n  let notifications: NotificationService;\r\n  let testOutputDir: string;\r\n\r\n  beforeAll(async () => {\r\n    // Set up test environment\r\n    process.env.NODE_ENV = 'test';\r\n    process.env.MASTER_ENCRYPTION_KEY = crypto.randomBytes(32).toString('hex');\r\n    \r\n    // Create temporary test output directory\r\n    testOutputDir = path.join(os.tmpdir(), 'security-test-output');\r\n    await fs.mkdir(testOutputDir, { recursive: true });\r\n  });\r\n\r\n  beforeEach(async () => {\r\n    // Initialize services\r\n    logger = new Logger();\r\n    encryptionService = new EncryptionService(logger);\r\n    threatDetection = new ThreatDetectionEngine(logger);\r\n    securityMonitoring = new SecurityMonitoringService(logger);\r\n    incidentResponse = new IncidentResponseService(logger, notifications);\r\n    notifications = new NotificationService(logger);\r\n\r\n    // Configure penetration testing\r\n    const penetrationConfig: PenetrationTestConfig = {\r\n      targetEndpoints: [\r\n        'http://localhost:3000/api/v4/spot/time',\r\n        'http://localhost:3000/api/v4/spot/accounts',\r\n        'http://localhost:3000/api/v4/spot/orders',\r\n        'http://localhost:3000/api/dashboard/status',\r\n        'http://localhost:3000/api/trading/positions'\r\n      ],\r\n      testTypes: [\r\n        'sql_injection',\r\n        'xss',\r\n        'authentication_bypass',\r\n        'authorization_escalation',\r\n        'input_validation',\r\n        'rate_limiting',\r\n        'tls_security'\r\n      ],\r\n      maxConcurrentTests: 5,\r\n      timeoutMs: 30000,\r\n      enableDestructiveTesting: false,\r\n      complianceStandards: ['OWASP_TOP_10', 'ISO_27001', 'SOC_2', 'CRYPTO_TRADING_SECURITY']\r\n    };\r\n\r\n    penetrationTesting = new PenetrationTestingService(\r\n      logger,\r\n      encryptionService,\r\n      threatDetection,\r\n      penetrationConfig\r\n    );\r\n\r\n    // Configure automated security testing suite\r\n    const securityTestConfig: SecurityTestSuiteConfig = {\r\n      schedules: [\r\n        {\r\n          id: 'daily-security-scan',\r\n          name: 'Daily Security Scan',\r\n          cronExpression: '0 2 * * *', // 2 AM daily\r\n          testTypes: ['penetration', 'vulnerability', 'compliance'],\r\n          enabled: true\r\n        },\r\n        {\r\n          id: 'weekly-comprehensive-scan',\r\n          name: 'Weekly Comprehensive Scan',\r\n          cronExpression: '0 1 * * 0', // 1 AM every Sunday\r\n          testTypes: ['full_penetration', 'deep_vulnerability', 'full_compliance'],\r\n          enabled: true\r\n        }\r\n      ],\r\n      reportingConfig: {\r\n        outputDirectory: testOutputDir,\r\n        retentionDays: 30,\r\n        emailReports: true,\r\n        slackIntegration: false\r\n      },\r\n      alertingConfig: {\r\n        criticalThreshold: 1,\r\n        highThreshold: 3,\r\n        emailAlerts: true,\r\n        immediateNotification: true\r\n      },\r\n      integrationConfig: {\r\n        cicdIntegration: true,\r\n        webhookUrl: 'http://localhost:3000/api/security/webhook',\r\n        apiKey: 'test-api-key'\r\n      }\r\n    };\r\n\r\n    automatedSecurityTesting = new AutomatedSecurityTestingSuite(\r\n      logger,\r\n      penetrationTesting,\r\n      securityMonitoring,\r\n      incidentResponse,\r\n      notifications,\r\n      securityTestConfig\r\n    );\r\n\r\n    complianceTestingService = new ComplianceTestingService(logger);\r\n\r\n    // Clear all mocks\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  afterEach(async () => {\r\n    // Clean up test files\r\n    try {\r\n      const files = await fs.readdir(testOutputDir);\r\n      for (const file of files) {\r\n        await fs.unlink(path.join(testOutputDir, file));\r\n      }\r\n    } catch (error) {\r\n      // Ignore cleanup errors\r\n    }\r\n  });\r\n\r\n  afterAll(async () => {\r\n    // Clean up test environment\r\n    delete process.env.MASTER_ENCRYPTION_KEY;\r\n    delete process.env.NODE_ENV;\r\n    \r\n    try {\r\n      await fs.rmdir(testOutputDir);\r\n    } catch (error) {\r\n      // Ignore cleanup errors\r\n    }\r\n  });\r\n\r\n  describe('Automated Security Testing Suite', () => {\r\n    it('should initialize automated security testing suite successfully', async () => {\r\n      await expect(automatedSecurityTesting.initialize()).resolves.not.toThrow();\r\n      \r\n      expect(logger.info).toHaveBeenCalledWith(\r\n        'Automated security testing suite initialized successfully',\r\n        expect.any(Object)\r\n      );\r\n    });\r\n\r\n    it('should execute on-demand security tests', async () => {\r\n      const mockReport: VulnerabilityReport = {\r\n        scanId: 'test-scan-123',\r\n        timestamp: new Date(),\r\n        totalVulnerabilities: 5,\r\n        criticalCount: 1,\r\n        highCount: 2,\r\n        mediumCount: 1,\r\n        lowCount: 1,\r\n        vulnerabilities: [\r\n          {\r\n            id: 'vuln-1',\r\n            type: 'SQL_INJECTION',\r\n            severity: 'CRITICAL',\r\n            description: 'SQL injection vulnerability in login endpoint',\r\n            location: '/api/auth/login',\r\n            evidence: 'Payload: \\' OR 1=1 --',\r\n            remediation: 'Use parameterized queries'\r\n          }\r\n        ],\r\n        complianceScore: 75,\r\n        recommendations: [\r\n          'Implement input validation',\r\n          'Use parameterized queries',\r\n          'Add rate limiting'\r\n        ]\r\n      };\r\n\r\n      // Mock the penetration testing service\r\n      jest.spyOn(penetrationTesting, 'executeSecurityTestSuite').mockResolvedValue(mockReport);\r\n\r\n      const result = await automatedSecurityTesting.executeSecurityTestsOnDemand();\r\n\r\n      expect(result).toEqual(mockReport);\r\n      expect(penetrationTesting.executeSecurityTestSuite).toHaveBeenCalled();\r\n      expect(logger.info).toHaveBeenCalledWith(\r\n        'On-demand security test execution completed',\r\n        expect.objectContaining({\r\n          totalVulnerabilities: 5,\r\n          criticalCount: 1\r\n        })\r\n      );\r\n    });\r\n\r\n    it('should handle critical vulnerabilities appropriately', async () => {\r\n      const criticalReport: VulnerabilityReport = {\r\n        scanId: 'critical-scan-456',\r\n        timestamp: new Date(),\r\n        totalVulnerabilities: 3,\r\n        criticalCount: 3,\r\n        highCount: 0,\r\n        mediumCount: 0,\r\n        lowCount: 0,\r\n        vulnerabilities: [\r\n          {\r\n            id: 'critical-1',\r\n            type: 'AUTHENTICATION_BYPASS',\r\n            severity: 'CRITICAL',\r\n            description: 'Authentication bypass in trading API',\r\n            location: '/api/trading/orders',\r\n            evidence: 'Endpoint accessible without authentication',\r\n            remediation: 'Implement proper authentication checks'\r\n          }\r\n        ],\r\n        complianceScore: 30,\r\n        recommendations: ['Immediate security review required']\r\n      };\r\n\r\n      jest.spyOn(penetrationTesting, 'executeSecurityTestSuite').mockResolvedValue(criticalReport);\r\n      jest.spyOn(incidentResponse, 'createIncident').mockResolvedValue({\r\n        id: 'incident-123',\r\n        type: 'CRITICAL_VULNERABILITIES',\r\n        severity: 'CRITICAL',\r\n        description: 'Critical vulnerabilities detected',\r\n        source: 'Automated Security Testing',\r\n        timestamp: new Date(),\r\n        status: 'DETECTED',\r\n        evidence: [],\r\n        responseActions: []\r\n      });\r\n\r\n      const result = await automatedSecurityTesting.executeSecurityTestsOnDemand();\r\n\r\n      expect(result.criticalCount).toBe(3);\r\n      expect(incidentResponse.createIncident).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          type: 'CRITICAL_VULNERABILITIES',\r\n          severity: 'CRITICAL'\r\n        })\r\n      );\r\n    });\r\n\r\n    it('should generate and save security reports', async () => {\r\n      const mockReport: VulnerabilityReport = {\r\n        scanId: 'report-test-789',\r\n        timestamp: new Date(),\r\n        totalVulnerabilities: 2,\r\n        criticalCount: 0,\r\n        highCount: 1,\r\n        mediumCount: 1,\r\n        lowCount: 0,\r\n        vulnerabilities: [],\r\n        complianceScore: 85,\r\n        recommendations: ['Regular security updates']\r\n      };\r\n\r\n      jest.spyOn(penetrationTesting, 'executeSecurityTestSuite').mockResolvedValue(mockReport);\r\n\r\n      await automatedSecurityTesting.executeSecurityTestsOnDemand();\r\n\r\n      // Check if report file was created\r\n      const files = await fs.readdir(testOutputDir);\r\n      const reportFiles = files.filter(f => f.startsWith('security-report-'));\r\n      \r\n      expect(reportFiles.length).toBeGreaterThan(0);\r\n    });\r\n  });\r\n\r\n  describe('Penetration Testing Service', () => {\r\n    it('should execute comprehensive security test suite', async () => {\r\n      const result = await penetrationTesting.executeSecurityTestSuite();\r\n\r\n      expect(result).toHaveProperty('scanId');\r\n      expect(result).toHaveProperty('timestamp');\r\n      expect(result).toHaveProperty('totalVulnerabilities');\r\n      expect(result).toHaveProperty('vulnerabilities');\r\n      expect(result).toHaveProperty('complianceScore');\r\n      expect(result).toHaveProperty('recommendations');\r\n\r\n      expect(typeof result.totalVulnerabilities).toBe('number');\r\n      expect(Array.isArray(result.vulnerabilities)).toBe(true);\r\n      expect(Array.isArray(result.recommendations)).toBe(true);\r\n    });\r\n\r\n    it('should test API endpoints for SQL injection vulnerabilities', async () => {\r\n      // This test would normally make actual HTTP requests\r\n      // For testing purposes, we'll mock the behavior\r\n      const mockSQLInjectionTest = jest.spyOn(penetrationTesting as any, 'testSQLInjection');\r\n      mockSQLInjectionTest.mockResolvedValue({\r\n        testId: 'sql-test-1',\r\n        testName: 'SQL Injection Test',\r\n        category: 'API_SECURITY',\r\n        status: 'PASS',\r\n        severity: 'LOW',\r\n        description: 'No SQL injection vulnerabilities found',\r\n        findings: [],\r\n        recommendations: [],\r\n        timestamp: new Date(),\r\n        executionTime: 1000\r\n      });\r\n\r\n      const result = await penetrationTesting.executeSecurityTestSuite();\r\n\r\n      expect(result.vulnerabilities.length).toBeGreaterThanOrEqual(0);\r\n    });\r\n\r\n    it('should test authentication bypass vulnerabilities', async () => {\r\n      const mockAuthTest = jest.spyOn(penetrationTesting as any, 'testAuthenticationBypass');\r\n      mockAuthTest.mockResolvedValue({\r\n        testId: 'auth-test-1',\r\n        testName: 'Authentication Bypass Test',\r\n        category: 'API_SECURITY',\r\n        status: 'PASS',\r\n        severity: 'LOW',\r\n        description: 'Authentication properly enforced',\r\n        findings: [],\r\n        recommendations: [],\r\n        timestamp: new Date(),\r\n        executionTime: 1500\r\n      });\r\n\r\n      const result = await penetrationTesting.executeSecurityTestSuite();\r\n\r\n      expect(result).toBeDefined();\r\n      expect(result.complianceScore).toBeGreaterThanOrEqual(0);\r\n      expect(result.complianceScore).toBeLessThanOrEqual(100);\r\n    });\r\n\r\n    it('should test rate limiting implementation', async () => {\r\n      const mockRateLimitTest = jest.spyOn(penetrationTesting as any, 'testRateLimiting');\r\n      mockRateLimitTest.mockResolvedValue({\r\n        testId: 'rate-test-1',\r\n        testName: 'Rate Limiting Test',\r\n        category: 'API_SECURITY',\r\n        status: 'PASS',\r\n        severity: 'LOW',\r\n        description: 'Rate limiting properly implemented',\r\n        findings: [],\r\n        recommendations: [],\r\n        timestamp: new Date(),\r\n        executionTime: 2000\r\n      });\r\n\r\n      const result = await penetrationTesting.executeSecurityTestSuite();\r\n\r\n      expect(result.recommendations).toBeDefined();\r\n      expect(Array.isArray(result.recommendations)).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('Compliance Testing Service', () => {\r\n    it('should execute OWASP Top 10 compliance testing', async () => {\r\n      const result = await complianceTestingService.executeComplianceTest('OWASP_TOP_10');\r\n\r\n      expect(result).toHaveProperty('reportId');\r\n      expect(result).toHaveProperty('standardId', 'OWASP_TOP_10');\r\n      expect(result).toHaveProperty('standardName', 'OWASP Top 10');\r\n      expect(result).toHaveProperty('overallScore');\r\n      expect(result).toHaveProperty('status');\r\n      expect(result).toHaveProperty('controlResults');\r\n      expect(result).toHaveProperty('gapAnalysis');\r\n      expect(result).toHaveProperty('recommendations');\r\n\r\n      expect(typeof result.overallScore).toBe('number');\r\n      expect(result.overallScore).toBeGreaterThanOrEqual(0);\r\n      expect(result.overallScore).toBeLessThanOrEqual(100);\r\n      expect(['COMPLIANT', 'NON_COMPLIANT', 'PARTIAL']).toContain(result.status);\r\n    });\r\n\r\n    it('should execute ISO 27001 compliance testing', async () => {\r\n      const result = await complianceTestingService.executeComplianceTest('ISO_27001');\r\n\r\n      expect(result.standardId).toBe('ISO_27001');\r\n      expect(result.standardName).toBe('ISO/IEC 27001');\r\n      expect(result.controlResults.length).toBeGreaterThan(0);\r\n      \r\n      // Check that each control result has required properties\r\n      result.controlResults.forEach(control => {\r\n        expect(control).toHaveProperty('controlId');\r\n        expect(control).toHaveProperty('controlName');\r\n        expect(control).toHaveProperty('status');\r\n        expect(control).toHaveProperty('score');\r\n        expect(control).toHaveProperty('maxScore');\r\n        expect(['PASS', 'FAIL', 'PARTIAL']).toContain(control.status);\r\n      });\r\n    });\r\n\r\n    it('should execute SOC 2 compliance testing', async () => {\r\n      const result = await complianceTestingService.executeComplianceTest('SOC_2');\r\n\r\n      expect(result.standardId).toBe('SOC_2');\r\n      expect(result.standardName).toBe('SOC 2 Type II');\r\n      expect(result.requiredScore).toBe(90);\r\n      \r\n      // SOC 2 should have high compliance requirements\r\n      expect(result.requiredScore).toBeGreaterThanOrEqual(90);\r\n    });\r\n\r\n    it('should execute custom crypto trading security compliance testing', async () => {\r\n      const result = await complianceTestingService.executeComplianceTest('CRYPTO_TRADING_SECURITY');\r\n\r\n      expect(result.standardId).toBe('CRYPTO_TRADING_SECURITY');\r\n      expect(result.standardName).toBe('Crypto Trading Security Framework');\r\n      expect(result.requiredScore).toBe(95);\r\n      \r\n      // Check for crypto-specific controls\r\n      const controlIds = result.controlResults.map(c => c.controlId);\r\n      expect(controlIds).toContain('CTS.1.1'); // API Key Security\r\n      expect(controlIds).toContain('CTS.2.1'); // Trading Algorithm Security\r\n      expect(controlIds).toContain('CTS.3.1'); // Risk Management Controls\r\n    });\r\n\r\n    it('should generate gap analysis for non-compliant standards', async () => {\r\n      const result = await complianceTestingService.executeComplianceTest('OWASP_TOP_10');\r\n\r\n      expect(result.gapAnalysis).toBeDefined();\r\n      expect(Array.isArray(result.gapAnalysis)).toBe(true);\r\n      \r\n      if (result.status !== 'COMPLIANT') {\r\n        expect(result.gapAnalysis.length).toBeGreaterThan(0);\r\n        \r\n        result.gapAnalysis.forEach(gap => {\r\n          expect(gap).toHaveProperty('controlId');\r\n          expect(gap).toHaveProperty('controlName');\r\n          expect(gap).toHaveProperty('currentScore');\r\n          expect(gap).toHaveProperty('requiredScore');\r\n          expect(gap).toHaveProperty('gap');\r\n          expect(gap).toHaveProperty('priority');\r\n          expect(gap).toHaveProperty('remediation');\r\n          expect(['LOW', 'MEDIUM', 'HIGH', 'CRITICAL']).toContain(gap.priority);\r\n        });\r\n      }\r\n    });\r\n\r\n    it('should provide actionable recommendations', async () => {\r\n      const result = await complianceTestingService.executeComplianceTest('OWASP_TOP_10');\r\n\r\n      expect(result.recommendations).toBeDefined();\r\n      expect(Array.isArray(result.recommendations)).toBe(true);\r\n      expect(result.recommendations.length).toBeGreaterThan(0);\r\n      \r\n      // Recommendations should be strings\r\n      result.recommendations.forEach(recommendation => {\r\n        expect(typeof recommendation).toBe('string');\r\n        expect(recommendation.length).toBeGreaterThan(0);\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('Vulnerability Scanning', () => {\r\n    it('should scan for dependency vulnerabilities', async () => {\r\n      const result = await penetrationTesting.executeSecurityTestSuite();\r\n      \r\n      // Check if dependency scanning was performed\r\n      const dependencyVulns = result.vulnerabilities.filter(v => \r\n        v.type === 'DEPENDENCY_VULNERABILITY'\r\n      );\r\n      \r\n      // Should have scanned dependencies (may or may not find vulnerabilities)\r\n      expect(result.vulnerabilities).toBeDefined();\r\n    });\r\n\r\n    it('should scan for configuration security issues', async () => {\r\n      const result = await penetrationTesting.executeSecurityTestSuite();\r\n      \r\n      // Check if configuration scanning was performed\r\n      const configVulns = result.vulnerabilities.filter(v => \r\n        v.type === 'CONFIGURATION' || v.type === 'SECURITY_HEADERS'\r\n      );\r\n      \r\n      // Configuration scanning should be included in the report\r\n      expect(result.vulnerabilities).toBeDefined();\r\n    });\r\n\r\n    it('should scan for hardcoded secrets', async () => {\r\n      const result = await penetrationTesting.executeSecurityTestSuite();\r\n      \r\n      // Check if secret scanning was performed\r\n      const secretVulns = result.vulnerabilities.filter(v => \r\n        v.type === 'HARDCODED_SECRET' || v.type === 'CREDENTIAL_EXPOSURE'\r\n      );\r\n      \r\n      // Secret scanning should be part of the comprehensive scan\r\n      expect(result.vulnerabilities).toBeDefined();\r\n    });\r\n\r\n    it('should provide severity-based vulnerability classification', async () => {\r\n      const result = await penetrationTesting.executeSecurityTestSuite();\r\n      \r\n      // Check vulnerability severity distribution\r\n      expect(result.criticalCount).toBeGreaterThanOrEqual(0);\r\n      expect(result.highCount).toBeGreaterThanOrEqual(0);\r\n      expect(result.mediumCount).toBeGreaterThanOrEqual(0);\r\n      expect(result.lowCount).toBeGreaterThanOrEqual(0);\r\n      \r\n      // Total should match sum of severity counts\r\n      const severitySum = result.criticalCount + result.highCount + \r\n                         result.mediumCount + result.lowCount;\r\n      expect(severitySum).toBe(result.totalVulnerabilities);\r\n    });\r\n  });\r\n\r\n  describe('Security Test Integration', () => {\r\n    it('should integrate with threat detection engine', async () => {\r\n      // Test that security testing integrates with threat detection\r\n      const result = await penetrationTesting.executeSecurityTestSuite();\r\n      \r\n      expect(result).toBeDefined();\r\n      expect(threatDetection).toBeDefined();\r\n    });\r\n\r\n    it('should integrate with incident response system', async () => {\r\n      const criticalReport: VulnerabilityReport = {\r\n        scanId: 'integration-test',\r\n        timestamp: new Date(),\r\n        totalVulnerabilities: 1,\r\n        criticalCount: 1,\r\n        highCount: 0,\r\n        mediumCount: 0,\r\n        lowCount: 0,\r\n        vulnerabilities: [\r\n          {\r\n            id: 'critical-integration',\r\n            type: 'CRITICAL_VULNERABILITY',\r\n            severity: 'CRITICAL',\r\n            description: 'Critical security issue detected',\r\n            location: 'Test location',\r\n            evidence: 'Test evidence',\r\n            remediation: 'Test remediation'\r\n          }\r\n        ],\r\n        complianceScore: 20,\r\n        recommendations: ['Immediate action required']\r\n      };\r\n\r\n      jest.spyOn(penetrationTesting, 'executeSecurityTestSuite').mockResolvedValue(criticalReport);\r\n      jest.spyOn(incidentResponse, 'createIncident').mockResolvedValue({\r\n        id: 'integration-incident',\r\n        type: 'CRITICAL_VULNERABILITIES',\r\n        severity: 'CRITICAL',\r\n        description: 'Integration test incident',\r\n        source: 'Test',\r\n        timestamp: new Date(),\r\n        status: 'DETECTED',\r\n        evidence: [],\r\n        responseActions: []\r\n      });\r\n\r\n      await automatedSecurityTesting.executeSecurityTestsOnDemand();\r\n\r\n      expect(incidentResponse.createIncident).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should integrate with notification system', async () => {\r\n      const highSeverityReport: VulnerabilityReport = {\r\n        scanId: 'notification-test',\r\n        timestamp: new Date(),\r\n        totalVulnerabilities: 3,\r\n        criticalCount: 0,\r\n        highCount: 3,\r\n        mediumCount: 0,\r\n        lowCount: 0,\r\n        vulnerabilities: [],\r\n        complianceScore: 60,\r\n        recommendations: ['Address high severity issues']\r\n      };\r\n\r\n      jest.spyOn(penetrationTesting, 'executeSecurityTestSuite').mockResolvedValue(highSeverityReport);\r\n      jest.spyOn(notifications, 'sendAlert').mockResolvedValue();\r\n\r\n      await automatedSecurityTesting.executeSecurityTestsOnDemand();\r\n\r\n      expect(notifications.sendAlert).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          title: expect.stringContaining('High Severity'),\r\n          priority: 'HIGH'\r\n        })\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('Security Test Reporting', () => {\r\n    it('should generate comprehensive security reports', async () => {\r\n      const result = await penetrationTesting.executeSecurityTestSuite();\r\n\r\n      expect(result).toHaveProperty('scanId');\r\n      expect(result).toHaveProperty('timestamp');\r\n      expect(result).toHaveProperty('totalVulnerabilities');\r\n      expect(result).toHaveProperty('criticalCount');\r\n      expect(result).toHaveProperty('highCount');\r\n      expect(result).toHaveProperty('mediumCount');\r\n      expect(result).toHaveProperty('lowCount');\r\n      expect(result).toHaveProperty('vulnerabilities');\r\n      expect(result).toHaveProperty('complianceScore');\r\n      expect(result).toHaveProperty('recommendations');\r\n\r\n      // Validate report structure\r\n      expect(typeof result.scanId).toBe('string');\r\n      expect(result.timestamp instanceof Date).toBe(true);\r\n      expect(typeof result.totalVulnerabilities).toBe('number');\r\n      expect(typeof result.complianceScore).toBe('number');\r\n      expect(Array.isArray(result.vulnerabilities)).toBe(true);\r\n      expect(Array.isArray(result.recommendations)).toBe(true);\r\n    });\r\n\r\n    it('should save reports to configured output directory', async () => {\r\n      await automatedSecurityTesting.executeSecurityTestsOnDemand();\r\n\r\n      // Check if report files were created\r\n      const files = await fs.readdir(testOutputDir);\r\n      const reportFiles = files.filter(f => f.startsWith('security-report-'));\r\n      \r\n      expect(reportFiles.length).toBeGreaterThan(0);\r\n\r\n      // Validate report file content\r\n      if (reportFiles.length > 0) {\r\n        const reportContent = await fs.readFile(\r\n          path.join(testOutputDir, reportFiles[0]), \r\n          'utf-8'\r\n        );\r\n        const reportData = JSON.parse(reportContent);\r\n        \r\n        expect(reportData).toHaveProperty('execution');\r\n        expect(reportData).toHaveProperty('report');\r\n        expect(reportData).toHaveProperty('metadata');\r\n      }\r\n    });\r\n\r\n    it('should clean up old reports based on retention policy', async () => {\r\n      // Create old test files\r\n      const oldFileName = `security-report-old-${Date.now() - 86400000 * 31}.json`; // 31 days old\r\n      await fs.writeFile(\r\n        path.join(testOutputDir, oldFileName),\r\n        JSON.stringify({ test: 'old report' })\r\n      );\r\n\r\n      // Execute security test (which should trigger cleanup)\r\n      await automatedSecurityTesting.executeSecurityTestsOnDemand();\r\n\r\n      // Wait a bit for cleanup to complete\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n\r\n      // Check if old file was cleaned up\r\n      const files = await fs.readdir(testOutputDir);\r\n      expect(files).not.toContain(oldFileName);\r\n    });\r\n  });\r\n\r\n  describe('Error Handling and Resilience', () => {\r\n    it('should handle network errors gracefully', async () => {\r\n      // Mock network error\r\n      jest.spyOn(penetrationTesting as any, 'sendTestRequest').mockRejectedValue(\r\n        new Error('Network error')\r\n      );\r\n\r\n      const result = await penetrationTesting.executeSecurityTestSuite();\r\n\r\n      // Should still return a report even with network errors\r\n      expect(result).toBeDefined();\r\n      expect(result).toHaveProperty('scanId');\r\n    });\r\n\r\n    it('should handle timeout errors appropriately', async () => {\r\n      // Mock timeout error\r\n      jest.spyOn(penetrationTesting as any, 'sendTestRequest').mockImplementation(\r\n        () => new Promise((_, reject) => \r\n          setTimeout(() => reject(new Error('Timeout')), 100)\r\n        )\r\n      );\r\n\r\n      const result = await penetrationTesting.executeSecurityTestSuite();\r\n\r\n      expect(result).toBeDefined();\r\n      expect(logger.error).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should continue testing after individual test failures', async () => {\r\n      // Mock some tests to fail\r\n      let callCount = 0;\r\n      jest.spyOn(penetrationTesting as any, 'testSQLInjection').mockImplementation(() => {\r\n        callCount++;\r\n        if (callCount === 1) {\r\n          throw new Error('Test failure');\r\n        }\r\n        return Promise.resolve({\r\n          testId: 'test-1',\r\n          testName: 'Test',\r\n          category: 'API_SECURITY',\r\n          status: 'PASS',\r\n          severity: 'LOW',\r\n          description: 'Test passed',\r\n          findings: [],\r\n          recommendations: [],\r\n          timestamp: new Date(),\r\n          executionTime: 1000\r\n        });\r\n      });\r\n\r\n      const result = await penetrationTesting.executeSecurityTestSuite();\r\n\r\n      // Should complete despite individual test failures\r\n      expect(result).toBeDefined();\r\n      expect(result.totalVulnerabilities).toBeGreaterThanOrEqual(0);\r\n    });\r\n  });\r\n});"],"version":3}