bdff00fa2f701aeb9b6f08f9fe246242
"use strict";
/**
 * =============================================================================
 * AI CRYPTO TRADING AGENT - SECURE CREDENTIAL MANAGEMENT SERVICE
 * =============================================================================
 *
 * This service manages all sensitive credentials for the AI crypto trading
 * agent, including API keys, secrets, and authentication tokens. It provides
 * secure storage, retrieval, and rotation of credentials with audit logging.
 *
 * CRITICAL SECURITY NOTICE:
 * This service protects credentials that control access to trading capital.
 * Any compromise could result in total loss of funds. All operations are
 * logged and monitored for security analysis.
 *
 * @author AI Crypto Trading System
 * @version 1.0.0
 * @license PROPRIETARY
 * =============================================================================
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.credentialManager = exports.CredentialManager = exports.CredentialType = void 0;
const encryption_service_1 = require("@/security/encryption-service");
const key_manager_1 = require("@/security/key-manager");
const logger_1 = require("@/core/logging/logger");
/**
 * Enumeration of credential types
 */
var CredentialType;
(function (CredentialType) {
    CredentialType["API_KEY"] = "api_key";
    CredentialType["API_SECRET"] = "api_secret";
    CredentialType["API_PASSPHRASE"] = "api_passphrase";
    CredentialType["JWT_SECRET"] = "jwt_secret";
    CredentialType["SESSION_SECRET"] = "session_secret";
    CredentialType["DATABASE_PASSWORD"] = "database_password";
    CredentialType["ENCRYPTION_KEY"] = "encryption_key";
    CredentialType["WEBHOOK_SECRET"] = "webhook_secret";
})(CredentialType || (exports.CredentialType = CredentialType = {}));
/**
 * Secure credential management service
 * Handles all sensitive credential operations with encryption and auditing
 */
class CredentialManager {
    /** In-memory credential cache */
    credentialCache = new Map();
    /** Cache TTL in milliseconds (5 minutes) */
    static CACHE_TTL = 5 * 60 * 1000;
    constructor() {
        // Initialize credential encryption key
        this.initializeCredentialKey();
        // Start cache cleanup
        this.startCacheCleanup();
    }
    /**
     * Initialize or retrieve credential encryption key
     */
    async initializeCredentialKey() {
        try {
            // Try to get existing credential key
            const existingKeys = await key_manager_1.keyManager.listKeys(key_manager_1.KeyType.API_ENCRYPTION);
            if (existingKeys.length === 0) {
                // Generate new credential encryption key
                await key_manager_1.keyManager.generateKey(key_manager_1.KeyType.API_ENCRYPTION, 'API credential encryption', 256);
                logger_1.logger.info('üîê New credential encryption key generated');
            }
        }
        catch (error) {
            logger_1.logger.error('‚ùå Failed to initialize credential key:', error);
            throw new Error('Credential manager initialization failed');
        }
    } /**
  
     * Store credentials securely
     * Encrypts and stores credentials with metadata
     *
     * @param service - Service name (e.g., 'gate.io')
     * @param type - Type of credential
     * @param data - Credential data to store
     * @returns Promise<string> Credential ID
     */
    async storeCredential(service, type, data) {
        try {
            // Generate unique credential ID
            const credentialId = this.generateCredentialId(service, type);
            // Get credential encryption key
            const credentialKeys = await key_manager_1.keyManager.listKeys(key_manager_1.KeyType.API_ENCRYPTION);
            const activeKey = credentialKeys.find(k => k.status === 'active');
            if (!activeKey) {
                throw new Error('No active credential encryption key found');
            }
            // Encrypt credential data
            const encryptedData = await encryption_service_1.encryptionService.encryptCredentials(data);
            // Create credential entry
            const credentialEntry = {
                credentialId,
                service,
                type,
                encryptedData,
                createdAt: new Date(),
                isActive: true,
                usageCount: 0
            };
            // Store credential (implementation would use secure database)
            await this.persistCredential(credentialEntry);
            // Log credential storage (without sensitive data)
            logger_1.logger.security('CREDENTIAL_STORED', 'Credential stored securely', {
                credentialId,
                service,
                type,
                classification: 'RESTRICTED'
            });
            // Audit log
            logger_1.logger.audit({
                auditId: `cred_store_${credentialId}`,
                eventType: 'CREDENTIAL_STORAGE',
                actor: 'SYSTEM',
                resource: `CREDENTIAL:${credentialId}`,
                action: 'STORE',
                result: 'SUCCESS',
                timestamp: new Date(),
                auditData: { service, type }
            });
            return credentialId;
        }
        catch (error) {
            logger_1.logger.error('‚ùå Failed to store credential:', error);
            throw new Error('Credential storage failed');
        }
    }
    /**
     * Retrieve credentials securely
     * Decrypts and returns credential data
     *
     * @param credentialId - Credential identifier
     * @returns Promise<any> Decrypted credential data
     */
    async getCredential(credentialId) {
        try {
            // Check cache first
            const cached = this.credentialCache.get(credentialId);
            if (cached && cached.expiresAt > Date.now()) {
                return cached.data;
            }
            // Load credential from storage
            const credentialEntry = await this.loadCredential(credentialId);
            if (!credentialEntry || !credentialEntry.isActive) {
                throw new Error('Credential not found or inactive');
            }
            // Check expiration
            if (credentialEntry.expiresAt && credentialEntry.expiresAt < new Date()) {
                throw new Error('Credential has expired');
            }
            // Decrypt credential data
            const decryptedData = await encryption_service_1.encryptionService.decryptCredentials(credentialEntry.encryptedData);
            // Update usage statistics
            credentialEntry.usageCount++;
            credentialEntry.lastAccessed = new Date();
            await this.updateCredential(credentialEntry);
            // Cache for performance
            this.credentialCache.set(credentialId, {
                data: decryptedData,
                expiresAt: Date.now() + CredentialManager.CACHE_TTL
            });
            return decryptedData;
        }
        catch (error) {
            logger_1.logger.error('‚ùå Failed to retrieve credential:', error);
            throw new Error('Credential retrieval failed');
        }
    }
    /**
     * Get Gate.io API credentials
     * Convenience method for retrieving trading API credentials
     *
     * @returns Promise<GateIOCredentials> Gate.io API credentials
     */
    async getGateIOCredentials() {
        try {
            // Get credentials from environment or storage
            const apiKey = process.env.GATE_IO_API_KEY;
            const apiSecret = process.env.GATE_IO_API_SECRET;
            const passphrase = process.env.GATE_IO_API_PASSPHRASE;
            if (!apiKey || !apiSecret || !passphrase) {
                throw new Error('Gate.io API credentials not configured');
            }
            // Log credential access (without sensitive data)
            logger_1.logger.security('CREDENTIAL_ACCESSED', 'Gate.io credentials accessed', {
                service: 'gate.io',
                classification: 'RESTRICTED'
            });
            return {
                apiKey,
                apiSecret,
                passphrase
            };
        }
        catch (error) {
            logger_1.logger.error('‚ùå Failed to get Gate.io credentials:', error);
            throw new Error('Gate.io credential retrieval failed');
        }
    }
    /**
     * Rotate credentials
     * Generates new credentials and marks old ones as deprecated
     *
     * @param credentialId - Credential to rotate
     * @returns Promise<string> New credential ID
     */
    async rotateCredential(credentialId) {
        try {
            // Load current credential
            const currentCredential = await this.loadCredential(credentialId);
            if (!currentCredential) {
                throw new Error('Credential not found');
            }
            // Mark current credential as deprecated
            currentCredential.isActive = false;
            await this.updateCredential(currentCredential);
            // Remove from cache
            this.credentialCache.delete(credentialId);
            // Log credential rotation
            logger_1.logger.security('CREDENTIAL_ROTATED', 'Credential rotated', {
                oldCredentialId: credentialId,
                service: currentCredential.service,
                type: currentCredential.type,
                classification: 'RESTRICTED'
            });
            // Note: New credential would need to be provided by external system
            // This method marks the old one as inactive
            return credentialId; // Would return new credential ID in full implementation
        }
        catch (error) {
            logger_1.logger.error('‚ùå Failed to rotate credential:', error);
            throw new Error('Credential rotation failed');
        }
    }
    /**
     * Generate unique credential ID
     * Creates identifier for credential storage
     *
     * @param service - Service name
     * @param type - Credential type
     * @returns string Unique credential ID
     */
    generateCredentialId(service, type) {
        const timestamp = Date.now().toString(36);
        const random = Math.random().toString(36).substring(2);
        return `${service}_${type}_${timestamp}_${random}`;
    }
    /**
     * Persist credential to secure storage
     * Stores credential entry securely
     *
     * @param credentialEntry - Credential entry to store
     */
    async persistCredential(credentialEntry) {
        // Implementation would store in secure database
        // For now, this is a placeholder
        logger_1.logger.debug('Credential persisted to secure storage', {
            credentialId: credentialEntry.credentialId
        });
    }
    /**
     * Load credential from secure storage
     * Retrieves credential entry from storage
     *
     * @param credentialId - Credential identifier
     * @returns Promise<CredentialEntry | null> Credential entry or null
     */
    async loadCredential(credentialId) {
        // Implementation would load from secure database
        // For now, this is a placeholder
        return null;
    }
    /**
     * Update credential in storage
     * Updates credential entry in secure storage
     *
     * @param credentialEntry - Updated credential entry
     */
    async updateCredential(credentialEntry) {
        // Implementation would update in secure database
        // For now, this is a placeholder
        logger_1.logger.debug('Credential updated in secure storage', {
            credentialId: credentialEntry.credentialId
        });
    }
    /**
     * Start cache cleanup process
     * Removes expired entries from credential cache
     */
    startCacheCleanup() {
        setInterval(() => {
            const now = Date.now();
            for (const [key, value] of this.credentialCache.entries()) {
                if (value.expiresAt <= now) {
                    this.credentialCache.delete(key);
                }
            }
        }, 60000); // Clean up every minute
    }
    /**
     * Get credential manager status
     * Returns current status for monitoring
     *
     * @returns Object containing status information
     */
    getStatus() {
        return {
            cacheSize: this.credentialCache.size,
            timestamp: Date.now()
        };
    }
}
exports.CredentialManager = CredentialManager;
// Create and export singleton instance
exports.credentialManager = new CredentialManager();
// =============================================================================
// CREDENTIAL SECURITY NOTES
// =============================================================================
// 1. All credentials are encrypted before storage
// 2. Credentials are cached temporarily for performance
// 3. All credential access is logged and audited
// 4. Expired credentials are automatically rejected
// 5. Credential rotation invalidates old credentials
// 6. Cache is automatically cleaned of expired entries
// 7. Never log actual credential values
// 8. Use environment variables for initial credential loading
// =============================================================================
//# sourceMappingURL=data:application/json;charset=utf-8;base64,