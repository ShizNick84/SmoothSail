{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\credential-manager.ts","mappings":";AAAA;;;;;;;;;;;;;;;;;;GAkBG;;;AAEH,sEAAiF;AACjF,wDAA6D;AAC7D,kDAA+C;AA2B/C;;GAEG;AACH,IAAY,cASX;AATD,WAAY,cAAc;IACxB,qCAAmB,CAAA;IACnB,2CAAyB,CAAA;IACzB,mDAAiC,CAAA;IACjC,2CAAyB,CAAA;IACzB,mDAAiC,CAAA;IACjC,yDAAuC,CAAA;IACvC,mDAAiC,CAAA;IACjC,mDAAiC,CAAA;AACnC,CAAC,EATW,cAAc,8BAAd,cAAc,QASzB;AAWD;;;GAGG;AACH,MAAa,iBAAiB;IAC5B,iCAAiC;IACzB,eAAe,GAAkD,IAAI,GAAG,EAAE,CAAC;IAEnF,4CAA4C;IACpC,MAAM,CAAU,SAAS,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;IAElD;QACE,uCAAuC;QACvC,IAAI,CAAC,uBAAuB,EAAE,CAAC;QAE/B,sBAAsB;QACtB,IAAI,CAAC,iBAAiB,EAAE,CAAC;IAC3B,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,uBAAuB;QACnC,IAAI,CAAC;YACH,qCAAqC;YACrC,MAAM,YAAY,GAAG,MAAM,wBAAU,CAAC,QAAQ,CAAC,qBAAO,CAAC,cAAc,CAAC,CAAC;YAEvE,IAAI,YAAY,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBAC9B,yCAAyC;gBACzC,MAAM,wBAAU,CAAC,WAAW,CAC1B,qBAAO,CAAC,cAAc,EACtB,2BAA2B,EAC3B,GAAG,CACJ,CAAC;gBACF,eAAM,CAAC,IAAI,CAAC,4CAA4C,CAAC,CAAC;YAC5D,CAAC;QAEH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,eAAM,CAAC,KAAK,CAAC,wCAAwC,EAAE,KAAK,CAAC,CAAC;YAC9D,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAC;QAC9D,CAAC;IACH,CAAC,CAAE;;;;;;;;;OASA;IACI,KAAK,CAAC,eAAe,CAC1B,OAAe,EACf,IAAoB,EACpB,IAAS;QAET,IAAI,CAAC;YACH,gCAAgC;YAChC,MAAM,YAAY,GAAG,IAAI,CAAC,oBAAoB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;YAE9D,gCAAgC;YAChC,MAAM,cAAc,GAAG,MAAM,wBAAU,CAAC,QAAQ,CAAC,qBAAO,CAAC,cAAc,CAAC,CAAC;YACzE,MAAM,SAAS,GAAG,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,KAAK,QAAQ,CAAC,CAAC;YAElE,IAAI,CAAC,SAAS,EAAE,CAAC;gBACf,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;YAC/D,CAAC;YAED,0BAA0B;YAC1B,MAAM,aAAa,GAAG,MAAM,sCAAiB,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;YAEvE,0BAA0B;YAC1B,MAAM,eAAe,GAAoB;gBACvC,YAAY;gBACZ,OAAO;gBACP,IAAI;gBACJ,aAAa;gBACb,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,QAAQ,EAAE,IAAI;gBACd,UAAU,EAAE,CAAC;aACd,CAAC;YAEF,8DAA8D;YAC9D,MAAM,IAAI,CAAC,iBAAiB,CAAC,eAAe,CAAC,CAAC;YAE9C,kDAAkD;YAClD,eAAM,CAAC,QAAQ,CAAC,mBAAmB,EAAE,4BAA4B,EAAE;gBACjE,YAAY;gBACZ,OAAO;gBACP,IAAI;gBACJ,cAAc,EAAE,YAAY;aAC7B,CAAC,CAAC;YAEH,YAAY;YACZ,eAAM,CAAC,KAAK,CAAC;gBACX,OAAO,EAAE,cAAc,YAAY,EAAE;gBACrC,SAAS,EAAE,oBAAoB;gBAC/B,KAAK,EAAE,QAAQ;gBACf,QAAQ,EAAE,cAAc,YAAY,EAAE;gBACtC,MAAM,EAAE,OAAO;gBACf,MAAM,EAAE,SAAS;gBACjB,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,SAAS,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE;aAC7B,CAAC,CAAC;YAEH,OAAO,YAAY,CAAC;QAEtB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,eAAM,CAAC,KAAK,CAAC,+BAA+B,EAAE,KAAK,CAAC,CAAC;YACrD,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;QAC/C,CAAC;IACH,CAAC;IAED;;;;;;OAMG;IACI,KAAK,CAAC,aAAa,CAAC,YAAoB;QAC7C,IAAI,CAAC;YACH,oBAAoB;YACpB,MAAM,MAAM,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;YACtD,IAAI,MAAM,IAAI,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;gBAC5C,OAAO,MAAM,CAAC,IAAI,CAAC;YACrB,CAAC;YAED,+BAA+B;YAC/B,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;YAChE,IAAI,CAAC,eAAe,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,CAAC;gBAClD,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;YACtD,CAAC;YAED,mBAAmB;YACnB,IAAI,eAAe,CAAC,SAAS,IAAI,eAAe,CAAC,SAAS,GAAG,IAAI,IAAI,EAAE,EAAE,CAAC;gBACxE,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;YAC5C,CAAC;YAED,0BAA0B;YAC1B,MAAM,aAAa,GAAG,MAAM,sCAAiB,CAAC,kBAAkB,CAC9D,eAAe,CAAC,aAAa,CAC9B,CAAC;YAEF,0BAA0B;YAC1B,eAAe,CAAC,UAAU,EAAE,CAAC;YAC7B,eAAe,CAAC,YAAY,GAAG,IAAI,IAAI,EAAE,CAAC;YAC1C,MAAM,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,CAAC;YAE7C,wBAAwB;YACxB,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,YAAY,EAAE;gBACrC,IAAI,EAAE,aAAa;gBACnB,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,iBAAiB,CAAC,SAAS;aACpD,CAAC,CAAC;YAEH,OAAO,aAAa,CAAC;QAEvB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,eAAM,CAAC,KAAK,CAAC,kCAAkC,EAAE,KAAK,CAAC,CAAC;YACxD,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;QACjD,CAAC;IACH,CAAC;IAED;;;;;OAKG;IACI,KAAK,CAAC,oBAAoB;QAC/B,IAAI,CAAC;YACH,8CAA8C;YAC9C,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC;YAC3C,MAAM,SAAS,GAAG,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC;YACjD,MAAM,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,sBAAsB,CAAC;YAEtD,IAAI,CAAC,MAAM,IAAI,CAAC,SAAS,IAAI,CAAC,UAAU,EAAE,CAAC;gBACzC,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;YAC5D,CAAC;YAED,iDAAiD;YACjD,eAAM,CAAC,QAAQ,CAAC,qBAAqB,EAAE,8BAA8B,EAAE;gBACrE,OAAO,EAAE,SAAS;gBAClB,cAAc,EAAE,YAAY;aAC7B,CAAC,CAAC;YAEH,OAAO;gBACL,MAAM;gBACN,SAAS;gBACT,UAAU;aACX,CAAC;QAEJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,eAAM,CAAC,KAAK,CAAC,sCAAsC,EAAE,KAAK,CAAC,CAAC;YAC5D,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC;QACzD,CAAC;IACH,CAAC;IAED;;;;;;OAMG;IACI,KAAK,CAAC,gBAAgB,CAAC,YAAoB;QAChD,IAAI,CAAC;YACH,0BAA0B;YAC1B,MAAM,iBAAiB,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;YAClE,IAAI,CAAC,iBAAiB,EAAE,CAAC;gBACvB,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;YAC1C,CAAC;YAED,wCAAwC;YACxC,iBAAiB,CAAC,QAAQ,GAAG,KAAK,CAAC;YACnC,MAAM,IAAI,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,CAAC;YAE/C,oBAAoB;YACpB,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;YAE1C,0BAA0B;YAC1B,eAAM,CAAC,QAAQ,CAAC,oBAAoB,EAAE,oBAAoB,EAAE;gBAC1D,eAAe,EAAE,YAAY;gBAC7B,OAAO,EAAE,iBAAiB,CAAC,OAAO;gBAClC,IAAI,EAAE,iBAAiB,CAAC,IAAI;gBAC5B,cAAc,EAAE,YAAY;aAC7B,CAAC,CAAC;YAEH,oEAAoE;YACpE,4CAA4C;YAE5C,OAAO,YAAY,CAAC,CAAC,wDAAwD;QAE/E,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,eAAM,CAAC,KAAK,CAAC,gCAAgC,EAAE,KAAK,CAAC,CAAC;YACtD,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;QAChD,CAAC;IACH,CAAC;IAED;;;;;;;OAOG;IACK,oBAAoB,CAAC,OAAe,EAAE,IAAoB;QAChE,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QAC1C,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QACvD,OAAO,GAAG,OAAO,IAAI,IAAI,IAAI,SAAS,IAAI,MAAM,EAAE,CAAC;IACrD,CAAC;IAED;;;;;OAKG;IACK,KAAK,CAAC,iBAAiB,CAAC,eAAgC;QAC9D,gDAAgD;QAChD,iCAAiC;QACjC,eAAM,CAAC,KAAK,CAAC,wCAAwC,EAAE;YACrD,YAAY,EAAE,eAAe,CAAC,YAAY;SAC3C,CAAC,CAAC;IACL,CAAC;IAED;;;;;;OAMG;IACK,KAAK,CAAC,cAAc,CAAC,YAAoB;QAC/C,iDAAiD;QACjD,iCAAiC;QACjC,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;;OAKG;IACK,KAAK,CAAC,gBAAgB,CAAC,eAAgC;QAC7D,iDAAiD;QACjD,iCAAiC;QACjC,eAAM,CAAC,KAAK,CAAC,sCAAsC,EAAE;YACnD,YAAY,EAAE,eAAe,CAAC,YAAY;SAC3C,CAAC,CAAC;IACL,CAAC;IAED;;;OAGG;IACK,iBAAiB;QACvB,WAAW,CAAC,GAAG,EAAE;YACf,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YACvB,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,EAAE,CAAC;gBAC1D,IAAI,KAAK,CAAC,SAAS,IAAI,GAAG,EAAE,CAAC;oBAC3B,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;gBACnC,CAAC;YACH,CAAC;QACH,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,wBAAwB;IACrC,CAAC;IAED;;;;;OAKG;IACI,SAAS;QAId,OAAO;YACL,SAAS,EAAE,IAAI,CAAC,eAAe,CAAC,IAAI;YACpC,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;SACtB,CAAC;IACJ,CAAC;;AA/TH,8CAgUC;AAED,uCAAuC;AAC1B,QAAA,iBAAiB,GAAG,IAAI,iBAAiB,EAAE,CAAC;AAEzD,gFAAgF;AAChF,4BAA4B;AAC5B,gFAAgF;AAChF,kDAAkD;AAClD,wDAAwD;AACxD,iDAAiD;AACjD,oDAAoD;AACpD,qDAAqD;AACrD,uDAAuD;AACvD,wCAAwC;AACxC,8DAA8D;AAC9D,gFAAgF","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\credential-manager.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * AI CRYPTO TRADING AGENT - SECURE CREDENTIAL MANAGEMENT SERVICE\r\n * =============================================================================\r\n * \r\n * This service manages all sensitive credentials for the AI crypto trading\r\n * agent, including API keys, secrets, and authentication tokens. It provides\r\n * secure storage, retrieval, and rotation of credentials with audit logging.\r\n * \r\n * CRITICAL SECURITY NOTICE:\r\n * This service protects credentials that control access to trading capital.\r\n * Any compromise could result in total loss of funds. All operations are\r\n * logged and monitored for security analysis.\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport { encryptionService, EncryptedData } from '@/security/encryption-service';\r\nimport { keyManager, KeyType } from '@/security/key-manager';\r\nimport { logger } from '@/core/logging/logger';\r\n\r\n/**\r\n * Interface for credential entry\r\n * Defines structure for stored credentials\r\n */\r\nexport interface CredentialEntry {\r\n  /** Unique credential identifier */\r\n  credentialId: string;\r\n  /** Service or system the credential is for */\r\n  service: string;\r\n  /** Type of credential */\r\n  type: CredentialType;\r\n  /** Encrypted credential data */\r\n  encryptedData: EncryptedData;\r\n  /** Creation timestamp */\r\n  createdAt: Date;\r\n  /** Last access timestamp */\r\n  lastAccessed?: Date;\r\n  /** Expiration timestamp */\r\n  expiresAt?: Date;\r\n  /** Whether credential is active */\r\n  isActive: boolean;\r\n  /** Usage counter */\r\n  usageCount: number;\r\n}\r\n\r\n/**\r\n * Enumeration of credential types\r\n */\r\nexport enum CredentialType {\r\n  API_KEY = 'api_key',\r\n  API_SECRET = 'api_secret',\r\n  API_PASSPHRASE = 'api_passphrase',\r\n  JWT_SECRET = 'jwt_secret',\r\n  SESSION_SECRET = 'session_secret',\r\n  DATABASE_PASSWORD = 'database_password',\r\n  ENCRYPTION_KEY = 'encryption_key',\r\n  WEBHOOK_SECRET = 'webhook_secret'\r\n}\r\n\r\n/**\r\n * Interface for Gate.io API credentials\r\n */\r\nexport interface GateIOCredentials {\r\n  apiKey: string;\r\n  apiSecret: string;\r\n  passphrase: string;\r\n}\r\n\r\n/**\r\n * Secure credential management service\r\n * Handles all sensitive credential operations with encryption and auditing\r\n */\r\nexport class CredentialManager {\r\n  /** In-memory credential cache */\r\n  private credentialCache: Map<string, { data: any; expiresAt: number }> = new Map();\r\n  \r\n  /** Cache TTL in milliseconds (5 minutes) */\r\n  private static readonly CACHE_TTL = 5 * 60 * 1000;\r\n\r\n  constructor() {\r\n    // Initialize credential encryption key\r\n    this.initializeCredentialKey();\r\n    \r\n    // Start cache cleanup\r\n    this.startCacheCleanup();\r\n  }\r\n\r\n  /**\r\n   * Initialize or retrieve credential encryption key\r\n   */\r\n  private async initializeCredentialKey(): Promise<void> {\r\n    try {\r\n      // Try to get existing credential key\r\n      const existingKeys = await keyManager.listKeys(KeyType.API_ENCRYPTION);\r\n      \r\n      if (existingKeys.length === 0) {\r\n        // Generate new credential encryption key\r\n        await keyManager.generateKey(\r\n          KeyType.API_ENCRYPTION,\r\n          'API credential encryption',\r\n          256\r\n        );\r\n        logger.info('🔐 New credential encryption key generated');\r\n      }\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to initialize credential key:', error);\r\n      throw new Error('Credential manager initialization failed');\r\n    }\r\n  }  /**\r\n\r\n   * Store credentials securely\r\n   * Encrypts and stores credentials with metadata\r\n   * \r\n   * @param service - Service name (e.g., 'gate.io')\r\n   * @param type - Type of credential\r\n   * @param data - Credential data to store\r\n   * @returns Promise<string> Credential ID\r\n   */\r\n  public async storeCredential(\r\n    service: string,\r\n    type: CredentialType,\r\n    data: any\r\n  ): Promise<string> {\r\n    try {\r\n      // Generate unique credential ID\r\n      const credentialId = this.generateCredentialId(service, type);\r\n      \r\n      // Get credential encryption key\r\n      const credentialKeys = await keyManager.listKeys(KeyType.API_ENCRYPTION);\r\n      const activeKey = credentialKeys.find(k => k.status === 'active');\r\n      \r\n      if (!activeKey) {\r\n        throw new Error('No active credential encryption key found');\r\n      }\r\n      \r\n      // Encrypt credential data\r\n      const encryptedData = await encryptionService.encryptCredentials(data);\r\n      \r\n      // Create credential entry\r\n      const credentialEntry: CredentialEntry = {\r\n        credentialId,\r\n        service,\r\n        type,\r\n        encryptedData,\r\n        createdAt: new Date(),\r\n        isActive: true,\r\n        usageCount: 0\r\n      };\r\n      \r\n      // Store credential (implementation would use secure database)\r\n      await this.persistCredential(credentialEntry);\r\n      \r\n      // Log credential storage (without sensitive data)\r\n      logger.security('CREDENTIAL_STORED', 'Credential stored securely', {\r\n        credentialId,\r\n        service,\r\n        type,\r\n        classification: 'RESTRICTED'\r\n      });\r\n      \r\n      // Audit log\r\n      logger.audit({\r\n        auditId: `cred_store_${credentialId}`,\r\n        eventType: 'CREDENTIAL_STORAGE',\r\n        actor: 'SYSTEM',\r\n        resource: `CREDENTIAL:${credentialId}`,\r\n        action: 'STORE',\r\n        result: 'SUCCESS',\r\n        timestamp: new Date(),\r\n        auditData: { service, type }\r\n      });\r\n      \r\n      return credentialId;\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to store credential:', error);\r\n      throw new Error('Credential storage failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieve credentials securely\r\n   * Decrypts and returns credential data\r\n   * \r\n   * @param credentialId - Credential identifier\r\n   * @returns Promise<any> Decrypted credential data\r\n   */\r\n  public async getCredential(credentialId: string): Promise<any> {\r\n    try {\r\n      // Check cache first\r\n      const cached = this.credentialCache.get(credentialId);\r\n      if (cached && cached.expiresAt > Date.now()) {\r\n        return cached.data;\r\n      }\r\n      \r\n      // Load credential from storage\r\n      const credentialEntry = await this.loadCredential(credentialId);\r\n      if (!credentialEntry || !credentialEntry.isActive) {\r\n        throw new Error('Credential not found or inactive');\r\n      }\r\n      \r\n      // Check expiration\r\n      if (credentialEntry.expiresAt && credentialEntry.expiresAt < new Date()) {\r\n        throw new Error('Credential has expired');\r\n      }\r\n      \r\n      // Decrypt credential data\r\n      const decryptedData = await encryptionService.decryptCredentials(\r\n        credentialEntry.encryptedData\r\n      );\r\n      \r\n      // Update usage statistics\r\n      credentialEntry.usageCount++;\r\n      credentialEntry.lastAccessed = new Date();\r\n      await this.updateCredential(credentialEntry);\r\n      \r\n      // Cache for performance\r\n      this.credentialCache.set(credentialId, {\r\n        data: decryptedData,\r\n        expiresAt: Date.now() + CredentialManager.CACHE_TTL\r\n      });\r\n      \r\n      return decryptedData;\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to retrieve credential:', error);\r\n      throw new Error('Credential retrieval failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get Gate.io API credentials\r\n   * Convenience method for retrieving trading API credentials\r\n   * \r\n   * @returns Promise<GateIOCredentials> Gate.io API credentials\r\n   */\r\n  public async getGateIOCredentials(): Promise<GateIOCredentials> {\r\n    try {\r\n      // Get credentials from environment or storage\r\n      const apiKey = process.env.GATE_IO_API_KEY;\r\n      const apiSecret = process.env.GATE_IO_API_SECRET;\r\n      const passphrase = process.env.GATE_IO_API_PASSPHRASE;\r\n      \r\n      if (!apiKey || !apiSecret || !passphrase) {\r\n        throw new Error('Gate.io API credentials not configured');\r\n      }\r\n      \r\n      // Log credential access (without sensitive data)\r\n      logger.security('CREDENTIAL_ACCESSED', 'Gate.io credentials accessed', {\r\n        service: 'gate.io',\r\n        classification: 'RESTRICTED'\r\n      });\r\n      \r\n      return {\r\n        apiKey,\r\n        apiSecret,\r\n        passphrase\r\n      };\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to get Gate.io credentials:', error);\r\n      throw new Error('Gate.io credential retrieval failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Rotate credentials\r\n   * Generates new credentials and marks old ones as deprecated\r\n   * \r\n   * @param credentialId - Credential to rotate\r\n   * @returns Promise<string> New credential ID\r\n   */\r\n  public async rotateCredential(credentialId: string): Promise<string> {\r\n    try {\r\n      // Load current credential\r\n      const currentCredential = await this.loadCredential(credentialId);\r\n      if (!currentCredential) {\r\n        throw new Error('Credential not found');\r\n      }\r\n      \r\n      // Mark current credential as deprecated\r\n      currentCredential.isActive = false;\r\n      await this.updateCredential(currentCredential);\r\n      \r\n      // Remove from cache\r\n      this.credentialCache.delete(credentialId);\r\n      \r\n      // Log credential rotation\r\n      logger.security('CREDENTIAL_ROTATED', 'Credential rotated', {\r\n        oldCredentialId: credentialId,\r\n        service: currentCredential.service,\r\n        type: currentCredential.type,\r\n        classification: 'RESTRICTED'\r\n      });\r\n      \r\n      // Note: New credential would need to be provided by external system\r\n      // This method marks the old one as inactive\r\n      \r\n      return credentialId; // Would return new credential ID in full implementation\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to rotate credential:', error);\r\n      throw new Error('Credential rotation failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate unique credential ID\r\n   * Creates identifier for credential storage\r\n   * \r\n   * @param service - Service name\r\n   * @param type - Credential type\r\n   * @returns string Unique credential ID\r\n   */\r\n  private generateCredentialId(service: string, type: CredentialType): string {\r\n    const timestamp = Date.now().toString(36);\r\n    const random = Math.random().toString(36).substring(2);\r\n    return `${service}_${type}_${timestamp}_${random}`;\r\n  }\r\n\r\n  /**\r\n   * Persist credential to secure storage\r\n   * Stores credential entry securely\r\n   * \r\n   * @param credentialEntry - Credential entry to store\r\n   */\r\n  private async persistCredential(credentialEntry: CredentialEntry): Promise<void> {\r\n    // Implementation would store in secure database\r\n    // For now, this is a placeholder\r\n    logger.debug('Credential persisted to secure storage', {\r\n      credentialId: credentialEntry.credentialId\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Load credential from secure storage\r\n   * Retrieves credential entry from storage\r\n   * \r\n   * @param credentialId - Credential identifier\r\n   * @returns Promise<CredentialEntry | null> Credential entry or null\r\n   */\r\n  private async loadCredential(credentialId: string): Promise<CredentialEntry | null> {\r\n    // Implementation would load from secure database\r\n    // For now, this is a placeholder\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Update credential in storage\r\n   * Updates credential entry in secure storage\r\n   * \r\n   * @param credentialEntry - Updated credential entry\r\n   */\r\n  private async updateCredential(credentialEntry: CredentialEntry): Promise<void> {\r\n    // Implementation would update in secure database\r\n    // For now, this is a placeholder\r\n    logger.debug('Credential updated in secure storage', {\r\n      credentialId: credentialEntry.credentialId\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Start cache cleanup process\r\n   * Removes expired entries from credential cache\r\n   */\r\n  private startCacheCleanup(): void {\r\n    setInterval(() => {\r\n      const now = Date.now();\r\n      for (const [key, value] of this.credentialCache.entries()) {\r\n        if (value.expiresAt <= now) {\r\n          this.credentialCache.delete(key);\r\n        }\r\n      }\r\n    }, 60000); // Clean up every minute\r\n  }\r\n\r\n  /**\r\n   * Get credential manager status\r\n   * Returns current status for monitoring\r\n   * \r\n   * @returns Object containing status information\r\n   */\r\n  public getStatus(): {\r\n    cacheSize: number;\r\n    timestamp: number;\r\n  } {\r\n    return {\r\n      cacheSize: this.credentialCache.size,\r\n      timestamp: Date.now()\r\n    };\r\n  }\r\n}\r\n\r\n// Create and export singleton instance\r\nexport const credentialManager = new CredentialManager();\r\n\r\n// =============================================================================\r\n// CREDENTIAL SECURITY NOTES\r\n// =============================================================================\r\n// 1. All credentials are encrypted before storage\r\n// 2. Credentials are cached temporarily for performance\r\n// 3. All credential access is logged and audited\r\n// 4. Expired credentials are automatically rejected\r\n// 5. Credential rotation invalidates old credentials\r\n// 6. Cache is automatically cleaned of expired entries\r\n// 7. Never log actual credential values\r\n// 8. Use environment variables for initial credential loading\r\n// ============================================================================="],"version":3}