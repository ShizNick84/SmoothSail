{"version":3,"names":["cov_1uyuzd78xp","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","axios_1","__importDefault","require","crypto_1","rate_limiter_flexible_1","logger_1","credential_manager_1","audit_service_1","GATE_IO_CONFIG","BASE_URL","API_VERSION","TIMEOUT","MAX_RETRIES","RETRY_DELAY","RATE_LIMITS","PUBLIC","points","duration","PRIVATE","ORDERS","CircuitBreakerState","exports","RequestType","GateIOClient","axiosInstance","credentials","credentialManager","auditService","publicRateLimiter","privateRateLimiter","orderRateLimiter","circuitBreakerState","CLOSED","circuitBreakerConfig","failureCount","lastFailureTime","healthMetrics","proxyConfig","constructor","CredentialManager","AuditService","RateLimiterMemory","failureThreshold","recoveryTimeout","monitoringPeriod","totalRequests","successfulRequests","failedRequests","averageResponseTime","lastSuccessfulRequest","lastFailedRequest","createAxiosInstance","logger","info","initialize","proxyHost","proxyPort","loadCredentials","configureProxy","isHealthy","performHealthCheck","logSecurityEvent","severity","details","exchange","timestamp","Date","error","message","encryptedCredentials","apiKey","process","env","GATE_IO_API_KEY","secretKey","GATE_IO_SECRET_KEY","passphrase","GATE_IO_PASSPHRASE","Error","decryptCredential","host","port","protocol","defaults","proxy","instance","default","create","baseURL","timeout","headers","interceptors","request","use","config","handleRequestInterceptor","handleRequestError","response","handleResponseInterceptor","handleResponseError","startTime","now","metadata","skipAuth","Math","floor","toString","method","toUpperCase","url","body","data","JSON","stringify","signature","createSignature","logAPIRequest","sanitizeHeaders","signatureString","createHmac","update","digest","endTime","responseTime","updateHealthMetrics","logAPIResponse","status","success","warn","handleRateLimitError","updateCircuitBreaker","retryAfter","backoffTime","parseInt","Promise","resolve","setTimeout","alpha","HALF_OPEN","OPEN","getTime","isCircuitBreakerOpen","applyRateLimit","requestType","consume","rateLimiterRes","msBeforeNext","makeRequest","retryCount","shouldRetry","delay","pow","getHealthMetrics","sanitized","KEY","SIGN","Passphrase","shutdown"],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\api\\gate-io-client.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * GATE.IO API CLIENT - SECURE CRYPTOCURRENCY EXCHANGE INTEGRATION\r\n * =============================================================================\r\n * \r\n * This module implements a secure, production-ready Gate.io API client with\r\n * comprehensive security features, rate limiting, and error handling.\r\n * All requests are routed through SSH tunnel for consistent IP address.\r\n * \r\n * SECURITY FEATURES:\r\n * - Military-grade credential encryption and secure storage\r\n * - Request signing with HMAC-SHA512 authentication\r\n * - Rate limiting with intelligent backoff strategies\r\n * - Circuit breaker pattern for API health monitoring\r\n * - Comprehensive audit logging for all API interactions\r\n * - Request/response validation and integrity checking\r\n * \r\n * CRITICAL SECURITY NOTICE:\r\n * This client handles real financial assets and trading operations.\r\n * All security measures must be maintained and regularly audited.\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';\r\nimport crypto from 'crypto';\r\nimport { RateLimiterMemory } from 'rate-limiter-flexible';\r\nimport { logger } from '@/core/logging/logger';\r\nimport { CredentialManager } from '@/security/credential-manager';\r\nimport { AuditService } from '@/security/audit-service';\r\n\r\n/**\r\n * Gate.io API endpoints and configuration\r\n */\r\nconst GATE_IO_CONFIG = {\r\n  BASE_URL: 'https://api.gateio.ws',\r\n  API_VERSION: 'v4',\r\n  TIMEOUT: 30000, // 30 seconds\r\n  MAX_RETRIES: 3,\r\n  RETRY_DELAY: 1000, // 1 second base delay\r\n} as const;\r\n\r\n/**\r\n * Rate limiting configuration based on Gate.io API limits\r\n * Conservative limits to ensure we never exceed API quotas\r\n */\r\nconst RATE_LIMITS = {\r\n  // Public endpoints: 900 requests per minute\r\n  PUBLIC: {\r\n    points: 900,\r\n    duration: 60, // 60 seconds\r\n  },\r\n  // Private endpoints: 300 requests per minute\r\n  PRIVATE: {\r\n    points: 300,\r\n    duration: 60, // 60 seconds\r\n  },\r\n  // Order endpoints: 100 requests per minute\r\n  ORDERS: {\r\n    points: 100,\r\n    duration: 60, // 60 seconds\r\n  },\r\n} as const;\r\n\r\n/**\r\n * Circuit breaker states for API health monitoring\r\n */\r\nenum CircuitBreakerState {\r\n  CLOSED = 'CLOSED',     // Normal operation\r\n  OPEN = 'OPEN',         // API is failing, reject requests\r\n  HALF_OPEN = 'HALF_OPEN' // Testing if API has recovered\r\n}\r\n\r\n/**\r\n * API request types for proper rate limiting\r\n */\r\nenum RequestType {\r\n  PUBLIC = 'PUBLIC',\r\n  PRIVATE = 'PRIVATE',\r\n  ORDERS = 'ORDERS'\r\n}\r\n\r\n/**\r\n * Gate.io API credentials interface\r\n */\r\ninterface GateIOCredentials {\r\n  apiKey: string;\r\n  secretKey: string;\r\n  passphrase?: string;\r\n}\r\n\r\n/**\r\n * API request configuration\r\n */\r\ninterface APIRequestConfig extends AxiosRequestConfig {\r\n  requestType?: RequestType;\r\n  skipAuth?: boolean;\r\n  retryCount?: number;\r\n}\r\n\r\n/**\r\n * Circuit breaker configuration\r\n */\r\ninterface CircuitBreakerConfig {\r\n  failureThreshold: number;\r\n  recoveryTimeout: number;\r\n  monitoringPeriod: number;\r\n}\r\n\r\n/**\r\n * API health metrics\r\n */\r\ninterface APIHealthMetrics {\r\n  totalRequests: number;\r\n  successfulRequests: number;\r\n  failedRequests: number;\r\n  averageResponseTime: number;\r\n  lastSuccessfulRequest: Date | null;\r\n  lastFailedRequest: Date | null;\r\n  circuitBreakerState: CircuitBreakerState;\r\n}\r\n\r\n/**\r\n * Secure Gate.io API Client with comprehensive security and monitoring\r\n */\r\nexport class GateIOClient {\r\n  private axiosInstance: AxiosInstance;\r\n  private credentials: GateIOCredentials | null = null;\r\n  private credentialManager: CredentialManager;\r\n  private auditService: AuditService;\r\n  \r\n  // Rate limiters for different endpoint types\r\n  private publicRateLimiter: RateLimiterMemory;\r\n  private privateRateLimiter: RateLimiterMemory;\r\n  private orderRateLimiter: RateLimiterMemory;\r\n  \r\n  // Circuit breaker for API health monitoring\r\n  private circuitBreakerState: CircuitBreakerState = CircuitBreakerState.CLOSED;\r\n  private circuitBreakerConfig: CircuitBreakerConfig;\r\n  private failureCount: number = 0;\r\n  private lastFailureTime: Date | null = null;\r\n  \r\n  // Health metrics tracking\r\n  private healthMetrics: APIHealthMetrics;\r\n  \r\n  // Proxy configuration for SSH tunnel routing\r\n  private proxyConfig: {\r\n    host: string;\r\n    port: number;\r\n    protocol: 'http' | 'https';\r\n  } | null = null;\r\n\r\n  constructor() {\r\n    this.credentialManager = new CredentialManager();\r\n    this.auditService = new AuditService();\r\n    \r\n    // Initialize rate limiters with conservative limits\r\n    this.publicRateLimiter = new RateLimiterMemory(RATE_LIMITS.PUBLIC);\r\n    this.privateRateLimiter = new RateLimiterMemory(RATE_LIMITS.PRIVATE);\r\n    this.orderRateLimiter = new RateLimiterMemory(RATE_LIMITS.ORDERS);\r\n    \r\n    // Configure circuit breaker\r\n    this.circuitBreakerConfig = {\r\n      failureThreshold: 5,      // Open circuit after 5 consecutive failures\r\n      recoveryTimeout: 60000,   // Wait 60 seconds before trying again\r\n      monitoringPeriod: 300000, // Monitor for 5 minutes\r\n    };\r\n    \r\n    // Initialize health metrics\r\n    this.healthMetrics = {\r\n      totalRequests: 0,\r\n      successfulRequests: 0,\r\n      failedRequests: 0,\r\n      averageResponseTime: 0,\r\n      lastSuccessfulRequest: null,\r\n      lastFailedRequest: null,\r\n      circuitBreakerState: CircuitBreakerState.CLOSED,\r\n    };\r\n    \r\n    // Create axios instance with security configurations\r\n    this.axiosInstance = this.createAxiosInstance();\r\n    \r\n    logger.info('üîê Gate.io API Client initialized with security features');\r\n  }\r\n\r\n  /**\r\n   * Initialize the API client with credentials and proxy configuration\r\n   * \r\n   * @param proxyHost - SSH tunnel proxy host (usually localhost)\r\n   * @param proxyPort - SSH tunnel proxy port\r\n   * @returns Promise<boolean> - Success status\r\n   */\r\n  public async initialize(proxyHost: string = 'localhost', proxyPort: number = 8080): Promise<boolean> {\r\n    try {\r\n      logger.info('üöÄ Initializing Gate.io API client...');\r\n      \r\n      // Load encrypted credentials\r\n      await this.loadCredentials();\r\n      \r\n      // Configure proxy for SSH tunnel routing\r\n      this.configureProxy(proxyHost, proxyPort);\r\n      \r\n      // Test API connectivity\r\n      const isHealthy = await this.performHealthCheck();\r\n      \r\n      if (isHealthy) {\r\n        logger.info('‚úÖ Gate.io API client initialized successfully');\r\n        await this.auditService.logSecurityEvent({\r\n          type: 'API_CLIENT_INITIALIZED',\r\n          severity: 'INFO',\r\n          details: { exchange: 'Gate.io', proxyHost, proxyPort },\r\n          timestamp: new Date(),\r\n        });\r\n        return true;\r\n      } else {\r\n        logger.error('‚ùå Gate.io API client health check failed');\r\n        return false;\r\n      }\r\n      \r\n    } catch (error) {\r\n      logger.error('‚ùå Failed to initialize Gate.io API client:', error);\r\n      await this.auditService.logSecurityEvent({\r\n        type: 'API_CLIENT_INIT_FAILED',\r\n        severity: 'ERROR',\r\n        details: { error: error.message },\r\n        timestamp: new Date(),\r\n      });\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load and decrypt API credentials from secure storage\r\n   */\r\n  private async loadCredentials(): Promise<void> {\r\n    try {\r\n      // Load encrypted credentials from environment or secure storage\r\n      const encryptedCredentials = {\r\n        apiKey: process.env.GATE_IO_API_KEY,\r\n        secretKey: process.env.GATE_IO_SECRET_KEY,\r\n        passphrase: process.env.GATE_IO_PASSPHRASE,\r\n      };\r\n      \r\n      if (!encryptedCredentials.apiKey || !encryptedCredentials.secretKey) {\r\n        throw new Error('Gate.io API credentials not found in environment');\r\n      }\r\n      \r\n      // Decrypt credentials using credential manager\r\n      this.credentials = {\r\n        apiKey: await this.credentialManager.decryptCredential(encryptedCredentials.apiKey),\r\n        secretKey: await this.credentialManager.decryptCredential(encryptedCredentials.secretKey),\r\n        passphrase: encryptedCredentials.passphrase \r\n          ? await this.credentialManager.decryptCredential(encryptedCredentials.passphrase)\r\n          : undefined,\r\n      };\r\n      \r\n      logger.info('üîë Gate.io API credentials loaded and decrypted successfully');\r\n      \r\n    } catch (error) {\r\n      logger.error('‚ùå Failed to load Gate.io API credentials:', error);\r\n      throw new Error('Failed to load API credentials');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Configure proxy settings for SSH tunnel routing\r\n   */\r\n  private configureProxy(host: string, port: number): void {\r\n    this.proxyConfig = {\r\n      host,\r\n      port,\r\n      protocol: 'http',\r\n    };\r\n    \r\n    // Update axios instance with proxy configuration\r\n    this.axiosInstance.defaults.proxy = {\r\n      host: this.proxyConfig.host,\r\n      port: this.proxyConfig.port,\r\n      protocol: this.proxyConfig.protocol,\r\n    };\r\n    \r\n    logger.info(`üåê Configured API requests to route through SSH tunnel: ${host}:${port}`);\r\n  }\r\n\r\n  /**\r\n   * Create axios instance with security configurations\r\n   */\r\n  private createAxiosInstance(): AxiosInstance {\r\n    const instance = axios.create({\r\n      baseURL: `${GATE_IO_CONFIG.BASE_URL}/api/${GATE_IO_CONFIG.API_VERSION}`,\r\n      timeout: GATE_IO_CONFIG.TIMEOUT,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'User-Agent': 'AI-Crypto-Trading-Agent/1.0.0',\r\n      },\r\n    });\r\n    \r\n    // Add request interceptor for authentication and logging\r\n    instance.interceptors.request.use(\r\n      (config) => this.handleRequestInterceptor(config),\r\n      (error) => this.handleRequestError(error)\r\n    );\r\n    \r\n    // Add response interceptor for logging and error handling\r\n    instance.interceptors.response.use(\r\n      (response) => this.handleResponseInterceptor(response),\r\n      (error) => this.handleResponseError(error)\r\n    );\r\n    \r\n    return instance;\r\n  }\r\n\r\n  /**\r\n   * Handle request interceptor for authentication and logging\r\n   */\r\n  private async handleRequestInterceptor(config: AxiosRequestConfig): Promise<AxiosRequestConfig> {\r\n    const startTime = Date.now();\r\n    \r\n    // Add request timing for metrics\r\n    config.metadata = { startTime };\r\n    \r\n    // Skip authentication for public endpoints\r\n    if (config.skipAuth) {\r\n      return config;\r\n    }\r\n    \r\n    // Add authentication headers for private endpoints\r\n    if (this.credentials) {\r\n      const timestamp = Math.floor(Date.now() / 1000).toString();\r\n      const method = config.method?.toUpperCase() || 'GET';\r\n      const url = config.url || '';\r\n      const body = config.data ? JSON.stringify(config.data) : '';\r\n      \r\n      // Create signature for request authentication\r\n      const signature = this.createSignature(method, url, body, timestamp);\r\n      \r\n      config.headers = {\r\n        ...config.headers,\r\n        'KEY': this.credentials.apiKey,\r\n        'Timestamp': timestamp,\r\n        'SIGN': signature,\r\n      };\r\n      \r\n      if (this.credentials.passphrase) {\r\n        config.headers['Passphrase'] = this.credentials.passphrase;\r\n      }\r\n    }\r\n    \r\n    // Log API request for audit trail\r\n    await this.auditService.logAPIRequest({\r\n      method: config.method?.toUpperCase() || 'GET',\r\n      url: config.url || '',\r\n      timestamp: new Date(),\r\n      headers: this.sanitizeHeaders(config.headers || {}),\r\n    });\r\n    \r\n    return config;\r\n  }\r\n\r\n  /**\r\n   * Create HMAC-SHA512 signature for Gate.io API authentication\r\n   */\r\n  private createSignature(method: string, url: string, body: string, timestamp: string): string {\r\n    if (!this.credentials?.secretKey) {\r\n      throw new Error('Secret key not available for signature creation');\r\n    }\r\n    \r\n    // Create signature string according to Gate.io API specification\r\n    const signatureString = `${method}\\n${url}\\n\\n${body}\\n${timestamp}`;\r\n    \r\n    // Generate HMAC-SHA512 signature\r\n    const signature = crypto\r\n      .createHmac('sha512', this.credentials.secretKey)\r\n      .update(signatureString)\r\n      .digest('hex');\r\n    \r\n    return signature;\r\n  }\r\n\r\n  /**\r\n   * Handle response interceptor for metrics and logging\r\n   */\r\n  private async handleResponseInterceptor(response: AxiosResponse): Promise<AxiosResponse> {\r\n    const endTime = Date.now();\r\n    const startTime = response.config.metadata?.startTime || endTime;\r\n    const responseTime = endTime - startTime;\r\n    \r\n    // Update health metrics\r\n    this.updateHealthMetrics(true, responseTime);\r\n    \r\n    // Log successful API response\r\n    await this.auditService.logAPIResponse({\r\n      status: response.status,\r\n      responseTime,\r\n      timestamp: new Date(),\r\n      success: true,\r\n    });\r\n    \r\n    return response;\r\n  }\r\n\r\n  /**\r\n   * Handle request errors\r\n   */\r\n  private async handleRequestError(error: any): Promise<never> {\r\n    logger.error('‚ùå API request error:', error.message);\r\n    \r\n    await this.auditService.logSecurityEvent({\r\n      type: 'API_REQUEST_ERROR',\r\n      severity: 'ERROR',\r\n      details: { error: error.message },\r\n      timestamp: new Date(),\r\n    });\r\n    \r\n    throw error;\r\n  }\r\n\r\n  /**\r\n   * Handle response errors with retry logic and circuit breaker\r\n   */\r\n  private async handleResponseError(error: any): Promise<never> {\r\n    const responseTime = Date.now() - (error.config?.metadata?.startTime || Date.now());\r\n    \r\n    // Update health metrics for failed request\r\n    this.updateHealthMetrics(false, responseTime);\r\n    \r\n    // Log failed API response\r\n    await this.auditService.logAPIResponse({\r\n      status: error.response?.status || 0,\r\n      responseTime,\r\n      timestamp: new Date(),\r\n      success: false,\r\n      error: error.message,\r\n    });\r\n    \r\n    // Handle specific error types\r\n    if (error.response?.status === 429) {\r\n      logger.warn('‚ö†Ô∏è Rate limit exceeded, implementing backoff strategy');\r\n      await this.handleRateLimitError(error);\r\n    } else if (error.response?.status >= 500) {\r\n      logger.error('‚ùå Server error detected, updating circuit breaker');\r\n      this.updateCircuitBreaker(false);\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n\r\n  /**\r\n   * Handle rate limit errors with intelligent backoff\r\n   */\r\n  private async handleRateLimitError(error: any): Promise<void> {\r\n    const retryAfter = error.response?.headers['retry-after'];\r\n    const backoffTime = retryAfter ? parseInt(retryAfter) * 1000 : 5000; // 5 seconds default\r\n    \r\n    logger.info(`‚è≥ Implementing rate limit backoff: ${backoffTime}ms`);\r\n    \r\n    await new Promise(resolve => setTimeout(resolve, backoffTime));\r\n  }\r\n\r\n  /**\r\n   * Update health metrics for monitoring\r\n   */\r\n  private updateHealthMetrics(success: boolean, responseTime: number): void {\r\n    this.healthMetrics.totalRequests++;\r\n    \r\n    if (success) {\r\n      this.healthMetrics.successfulRequests++;\r\n      this.healthMetrics.lastSuccessfulRequest = new Date();\r\n      this.updateCircuitBreaker(true);\r\n    } else {\r\n      this.healthMetrics.failedRequests++;\r\n      this.healthMetrics.lastFailedRequest = new Date();\r\n      this.updateCircuitBreaker(false);\r\n    }\r\n    \r\n    // Update average response time using exponential moving average\r\n    const alpha = 0.1; // Smoothing factor\r\n    this.healthMetrics.averageResponseTime = \r\n      (alpha * responseTime) + ((1 - alpha) * this.healthMetrics.averageResponseTime);\r\n    \r\n    this.healthMetrics.circuitBreakerState = this.circuitBreakerState;\r\n  }\r\n\r\n  /**\r\n   * Update circuit breaker state based on request success/failure\r\n   */\r\n  private updateCircuitBreaker(success: boolean): void {\r\n    const now = new Date();\r\n    \r\n    if (success) {\r\n      // Reset failure count on successful request\r\n      this.failureCount = 0;\r\n      \r\n      // Close circuit if it was half-open\r\n      if (this.circuitBreakerState === CircuitBreakerState.HALF_OPEN) {\r\n        this.circuitBreakerState = CircuitBreakerState.CLOSED;\r\n        logger.info('‚úÖ Circuit breaker closed - API is healthy');\r\n      }\r\n    } else {\r\n      this.failureCount++;\r\n      this.lastFailureTime = now;\r\n      \r\n      // Open circuit if failure threshold is reached\r\n      if (this.failureCount >= this.circuitBreakerConfig.failureThreshold &&\r\n          this.circuitBreakerState === CircuitBreakerState.CLOSED) {\r\n        this.circuitBreakerState = CircuitBreakerState.OPEN;\r\n        logger.error('üö® Circuit breaker opened - API is unhealthy');\r\n      }\r\n    }\r\n    \r\n    // Check if circuit should move to half-open state\r\n    if (this.circuitBreakerState === CircuitBreakerState.OPEN &&\r\n        this.lastFailureTime &&\r\n        (now.getTime() - this.lastFailureTime.getTime()) > this.circuitBreakerConfig.recoveryTimeout) {\r\n      this.circuitBreakerState = CircuitBreakerState.HALF_OPEN;\r\n      logger.info('üîÑ Circuit breaker half-open - testing API recovery');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if circuit breaker allows requests\r\n   */\r\n  private isCircuitBreakerOpen(): boolean {\r\n    return this.circuitBreakerState === CircuitBreakerState.OPEN;\r\n  }\r\n\r\n  /**\r\n   * Apply rate limiting based on request type\r\n   */\r\n  private async applyRateLimit(requestType: RequestType): Promise<void> {\r\n    try {\r\n      switch (requestType) {\r\n        case RequestType.PUBLIC:\r\n          await this.publicRateLimiter.consume('public');\r\n          break;\r\n        case RequestType.PRIVATE:\r\n          await this.privateRateLimiter.consume('private');\r\n          break;\r\n        case RequestType.ORDERS:\r\n          await this.orderRateLimiter.consume('orders');\r\n          break;\r\n      }\r\n    } catch (rateLimiterRes) {\r\n      const msBeforeNext = rateLimiterRes.msBeforeNext || 1000;\r\n      logger.warn(`‚ö†Ô∏è Rate limit reached, waiting ${msBeforeNext}ms`);\r\n      await new Promise(resolve => setTimeout(resolve, msBeforeNext));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Make authenticated API request with comprehensive error handling\r\n   */\r\n  public async makeRequest<T = any>(config: APIRequestConfig): Promise<T> {\r\n    // Check circuit breaker state\r\n    if (this.isCircuitBreakerOpen()) {\r\n      throw new Error('Circuit breaker is open - API is currently unavailable');\r\n    }\r\n    \r\n    // Apply rate limiting\r\n    const requestType = config.requestType || RequestType.PRIVATE;\r\n    await this.applyRateLimit(requestType);\r\n    \r\n    try {\r\n      const response = await this.axiosInstance.request<T>(config);\r\n      return response.data;\r\n    } catch (error) {\r\n      // Implement retry logic for transient errors\r\n      const retryCount = config.retryCount || 0;\r\n      if (retryCount < GATE_IO_CONFIG.MAX_RETRIES && this.shouldRetry(error)) {\r\n        logger.info(`üîÑ Retrying request (attempt ${retryCount + 1}/${GATE_IO_CONFIG.MAX_RETRIES})`);\r\n        \r\n        // Exponential backoff\r\n        const delay = GATE_IO_CONFIG.RETRY_DELAY * Math.pow(2, retryCount);\r\n        await new Promise(resolve => setTimeout(resolve, delay));\r\n        \r\n        return this.makeRequest<T>({\r\n          ...config,\r\n          retryCount: retryCount + 1,\r\n        });\r\n      }\r\n      \r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Determine if request should be retried based on error type\r\n   */\r\n  private shouldRetry(error: any): boolean {\r\n    // Retry on network errors or server errors (5xx)\r\n    if (!error.response) return true; // Network error\r\n    \r\n    const status = error.response.status;\r\n    return status >= 500 || status === 429; // Server error or rate limit\r\n  }\r\n\r\n  /**\r\n   * Perform comprehensive health check\r\n   */\r\n  public async performHealthCheck(): Promise<boolean> {\r\n    try {\r\n      logger.info('üîç Performing Gate.io API health check...');\r\n      \r\n      // Test public endpoint (server time)\r\n      await this.makeRequest({\r\n        method: 'GET',\r\n        url: '/spot/time',\r\n        requestType: RequestType.PUBLIC,\r\n        skipAuth: true,\r\n      });\r\n      \r\n      // Test private endpoint (account info) if credentials are available\r\n      if (this.credentials) {\r\n        await this.makeRequest({\r\n          method: 'GET',\r\n          url: '/spot/accounts',\r\n          requestType: RequestType.PRIVATE,\r\n        });\r\n      }\r\n      \r\n      logger.info('‚úÖ Gate.io API health check passed');\r\n      return true;\r\n      \r\n    } catch (error) {\r\n      logger.error('‚ùå Gate.io API health check failed:', error.message);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get current API health metrics\r\n   */\r\n  public getHealthMetrics(): APIHealthMetrics {\r\n    return { ...this.healthMetrics };\r\n  }\r\n\r\n  /**\r\n   * Sanitize headers for logging (remove sensitive information)\r\n   */\r\n  private sanitizeHeaders(headers: Record<string, any>): Record<string, any> {\r\n    const sanitized = { ...headers };\r\n    \r\n    // Remove sensitive authentication headers\r\n    delete sanitized.KEY;\r\n    delete sanitized.SIGN;\r\n    delete sanitized.Passphrase;\r\n    \r\n    return sanitized;\r\n  }\r\n\r\n  /**\r\n   * Graceful shutdown of API client\r\n   */\r\n  public async shutdown(): Promise<void> {\r\n    logger.info('üõë Shutting down Gate.io API client...');\r\n    \r\n    // Log final health metrics\r\n    await this.auditService.logSecurityEvent({\r\n      type: 'API_CLIENT_SHUTDOWN',\r\n      severity: 'INFO',\r\n      details: { healthMetrics: this.healthMetrics },\r\n      timestamp: new Date(),\r\n    });\r\n    \r\n    // Clear sensitive data\r\n    this.credentials = null;\r\n    \r\n    logger.info('‚úÖ Gate.io API client shutdown completed');\r\n  }\r\n}\r\n\r\n// Export types for use in other modules\r\nexport type {\r\n  GateIOCredentials,\r\n  APIRequestConfig,\r\n  APIHealthMetrics,\r\n  CircuitBreakerConfig,\r\n};\r\n\r\nexport { RequestType, CircuitBreakerState };"],"mappings":"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","ignoreList":[]}