{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\backtesting\\__tests__\\example-backtest.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\backtesting\\__tests__\\example-backtest.test.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * EXAMPLE BACKTESTING SYSTEM TEST\r\n * =============================================================================\r\n * \r\n * Test the complete backtesting example to ensure all components work together\r\n * properly with real data validation and strategy harmonization.\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport { describe, test, expect } from '@jest/globals';\r\nimport { \r\n  ExampleHarmonizedStrategy, \r\n  createSampleHistoricalData \r\n} from '../example-backtest';\r\nimport { PerformanceCalculator } from '../performance-calculator';\r\nimport { BacktestReportGenerator } from '../report-generator';\r\n\r\ndescribe('Example Backtesting System', () => {\r\n  describe('ExampleHarmonizedStrategy', () => {\r\n    test('should generate trading signals from harmonized indicators', async () => {\r\n      const strategy = new ExampleHarmonizedStrategy();\r\n      const sampleData = createSampleHistoricalData();\r\n      \r\n      expect(sampleData.length).toBeGreaterThan(50); // Enough data for indicators\r\n      expect(sampleData[0].source).toBe('GATE_IO');\r\n      expect(sampleData[0].validated).toBe(true);\r\n      \r\n      // Generate signals (this will test the harmonization engine)\r\n      const signals = await strategy.generateSignals(sampleData);\r\n      \r\n      // Should generate some signals\r\n      expect(signals.length).toBeGreaterThanOrEqual(0);\r\n      \r\n      // Validate signal structure\r\n      for (const signal of signals) {\r\n        expect(signal.id).toBeDefined();\r\n        expect(signal.symbol).toBe('BTC_USDT');\r\n        expect(['BUY', 'SELL'].includes(signal.type)).toBe(true);\r\n        expect(signal.strength).toBeGreaterThanOrEqual(0);\r\n        expect(signal.strength).toBeLessThanOrEqual(100);\r\n        expect(signal.confidence).toBeGreaterThanOrEqual(0);\r\n        expect(signal.confidence).toBeLessThanOrEqual(100);\r\n        expect(signal.riskReward).toBeGreaterThanOrEqual(1.3);\r\n        expect(signal.indicators.length).toBeGreaterThan(0);\r\n        expect(signal.reasoning).toBeDefined();\r\n        expect(signal.timestamp).toBeInstanceOf(Date);\r\n      }\r\n    });\r\n  });\r\n\r\n  describe('Sample Data Generation', () => {\r\n    test('should create realistic historical data', () => {\r\n      const data = createSampleHistoricalData();\r\n      \r\n      expect(data.length).toBe(168); // 1 week of hourly data\r\n      \r\n      // Validate data structure\r\n      for (const point of data) {\r\n        expect(point.symbol).toBe('BTC_USDT');\r\n        expect(point.timestamp).toBeInstanceOf(Date);\r\n        expect(point.open).toBeGreaterThan(0);\r\n        expect(point.high).toBeGreaterThan(0);\r\n        expect(point.low).toBeGreaterThan(0);\r\n        expect(point.close).toBeGreaterThan(0);\r\n        expect(point.volume).toBeGreaterThan(0);\r\n        expect(point.validated).toBe(true);\r\n        expect(point.source).toBe('GATE_IO');\r\n        expect(point.integrity).toBeDefined();\r\n        expect(point.fetchedAt).toBeInstanceOf(Date);\r\n        \r\n        // Validate OHLC relationships\r\n        expect(point.high).toBeGreaterThanOrEqual(Math.max(point.open, point.close));\r\n        expect(point.low).toBeLessThanOrEqual(Math.min(point.open, point.close));\r\n      }\r\n      \r\n      // Validate time sequence\r\n      for (let i = 1; i < data.length; i++) {\r\n        expect(data[i].timestamp.getTime()).toBeGreaterThan(data[i - 1].timestamp.getTime());\r\n      }\r\n    });\r\n\r\n    test('should create data with realistic price movements', () => {\r\n      const data = createSampleHistoricalData();\r\n      \r\n      // Calculate price changes\r\n      const priceChanges = [];\r\n      for (let i = 1; i < data.length; i++) {\r\n        const change = (data[i].close - data[i - 1].close) / data[i - 1].close;\r\n        priceChanges.push(Math.abs(change));\r\n      }\r\n      \r\n      // Average price change should be reasonable (less than 5% per hour)\r\n      const avgChange = priceChanges.reduce((sum, change) => sum + change, 0) / priceChanges.length;\r\n      expect(avgChange).toBeLessThan(0.05);\r\n      \r\n      // No extreme price movements (more than 20% in one hour)\r\n      const maxChange = Math.max(...priceChanges);\r\n      expect(maxChange).toBeLessThan(0.20);\r\n    });\r\n  });\r\n\r\n  describe('Integration Test', () => {\r\n    test('should demonstrate complete backtesting workflow', async () => {\r\n      // Create sample data\r\n      const historicalData = createSampleHistoricalData();\r\n      \r\n      // Initialize strategy\r\n      const strategy = new ExampleHarmonizedStrategy();\r\n      \r\n      // Generate signals\r\n      const signals = await strategy.generateSignals(historicalData);\r\n      \r\n      // Create mock trades from signals (simplified)\r\n      const mockTrades = signals.slice(0, 5).map((signal, index) => ({\r\n        id: `trade_${index}`,\r\n        symbol: signal.symbol,\r\n        type: signal.type,\r\n        quantity: 0.1,\r\n        entryPrice: historicalData[50 + index * 10].close,\r\n        exitPrice: historicalData[50 + index * 10].close * (signal.type === 'BUY' ? 1.02 : 0.98),\r\n        entryTime: signal.timestamp,\r\n        exitTime: new Date(signal.timestamp.getTime() + 3600000), // 1 hour later\r\n        strategy: strategy.name,\r\n        signal,\r\n        stopLoss: historicalData[50 + index * 10].close * (signal.type === 'BUY' ? 0.99 : 1.01),\r\n        takeProfit: historicalData[50 + index * 10].close * (signal.type === 'BUY' ? 1.03 : 0.97),\r\n        fees: 8.4,\r\n        slippage: 4.2,\r\n        pnl: signal.type === 'BUY' ? 100 : -50,\r\n        pnlPercentage: signal.type === 'BUY' ? 2.0 : -1.0,\r\n        status: 'CLOSED' as const,\r\n        exitReason: 'TAKE_PROFIT' as const,\r\n      }));\r\n      \r\n      // Create mock portfolio history\r\n      const mockPortfolioHistory = [\r\n        {\r\n          timestamp: historicalData[0].timestamp,\r\n          balance: 10000,\r\n          equity: 10000,\r\n          positions: [],\r\n          totalPnL: 0,\r\n          unrealizedPnL: 0,\r\n          realizedPnL: 0,\r\n          drawdown: 0,\r\n          drawdownPercentage: 0,\r\n          maxDrawdown: 0,\r\n          maxDrawdownPercentage: 0,\r\n        },\r\n        {\r\n          timestamp: historicalData[historicalData.length - 1].timestamp,\r\n          balance: 10000,\r\n          equity: 10200,\r\n          positions: [],\r\n          totalPnL: 200,\r\n          unrealizedPnL: 0,\r\n          realizedPnL: 200,\r\n          drawdown: 0,\r\n          drawdownPercentage: 0,\r\n          maxDrawdown: 0,\r\n          maxDrawdownPercentage: 0,\r\n        },\r\n      ];\r\n      \r\n      // Calculate performance metrics\r\n      const performance = PerformanceCalculator.calculatePerformanceMetrics(\r\n        mockTrades,\r\n        mockPortfolioHistory,\r\n        10000\r\n      );\r\n      \r\n      expect(performance).toBeDefined();\r\n      expect(performance.totalReturn).toBeCloseTo(200, 0);\r\n      expect(performance.totalReturnPercentage).toBeCloseTo(2.0, 1);\r\n      \r\n      // Generate report\r\n      const mockResult = {\r\n        config: {\r\n          symbol: 'BTC_USDT',\r\n          startDate: historicalData[0].timestamp,\r\n          endDate: historicalData[historicalData.length - 1].timestamp,\r\n          initialBalance: 10000,\r\n          strategies: [strategy.name],\r\n          riskManagement: {\r\n            maxRiskPerTrade: 0.02,\r\n            stopLossPercentage: 0.01,\r\n            minRiskRewardRatio: 1.3,\r\n            maxDrawdown: 0.15,\r\n          },\r\n          fees: { maker: 0.002, taker: 0.002 },\r\n          slippage: 0.001,\r\n          dataValidation: {\r\n            requireRealData: true,\r\n            minDataPoints: 100,\r\n            maxGapMinutes: 60,\r\n          },\r\n        },\r\n        period: {\r\n          start: historicalData[0].timestamp,\r\n          end: historicalData[historicalData.length - 1].timestamp,\r\n          durationDays: 7,\r\n        },\r\n        trades: PerformanceCalculator.calculateTradeStatistics(mockTrades),\r\n        performance,\r\n        risk: PerformanceCalculator.calculateRiskMetrics([0.02, -0.01, 0.015, -0.005, 0.01]),\r\n        strategyPerformance: {\r\n          [strategy.name]: {\r\n            strategyName: strategy.name,\r\n            trades: mockTrades.length,\r\n            winRate: 60,\r\n            totalReturn: 200,\r\n            sharpeRatio: 1.5,\r\n            maxDrawdown: 0,\r\n            profitFactor: 2.0,\r\n            averageHoldingPeriod: 1,\r\n            signalAccuracy: 0.6,\r\n            contribution: 100,\r\n          },\r\n        },\r\n        equityCurve: PerformanceCalculator.generateEquityCurve(mockPortfolioHistory),\r\n        drawdownCurve: PerformanceCalculator.generateDrawdownCurve(mockPortfolioHistory),\r\n        monthlyReturns: PerformanceCalculator.generateMonthlyReturns(mockPortfolioHistory, mockTrades),\r\n        dataQuality: {\r\n          totalDataPoints: historicalData.length,\r\n          validDataPoints: historicalData.length,\r\n          dataIntegrityScore: 100,\r\n          gapsDetected: 0,\r\n          averageGapMinutes: 0,\r\n          dataSource: 'GATE_IO_REAL_DATA',\r\n        },\r\n        executionDetails: mockTrades,\r\n        portfolioHistory: mockPortfolioHistory,\r\n      };\r\n      \r\n      const reportConfig = {\r\n        includeCharts: false,\r\n        includeTradeDetails: true,\r\n        includeStrategyBreakdown: true,\r\n        includeBenchmarkComparison: false,\r\n        includeRiskMetrics: true,\r\n        includeMonthlyReturns: false,\r\n        format: 'JSON' as const,\r\n      };\r\n      \r\n      const report = await BacktestReportGenerator.generateReport(mockResult, reportConfig);\r\n      \r\n      expect(report).toBeDefined();\r\n      expect(typeof report).toBe('string');\r\n      \r\n      const parsed = JSON.parse(report);\r\n      expect(parsed.dataQuality.dataSource).toBe('GATE_IO_REAL_DATA');\r\n      expect(parsed.config.dataValidation.requireRealData).toBe(true);\r\n      expect(parsed.strategyPerformance[strategy.name]).toBeDefined();\r\n    });\r\n  });\r\n});"],"version":3}