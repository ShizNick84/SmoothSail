{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\risk\\__tests__\\portfolio-risk-manager.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\risk\\__tests__\\portfolio-risk-manager.test.ts"],"sourcesContent":["/**\r\n * Portfolio Risk Manager Tests\r\n * \r\n * Comprehensive tests for portfolio-level risk management functionality\r\n */\r\n\r\nimport { describe, it, expect, beforeEach } from '@jest/globals';\r\nimport { PortfolioRiskManager, PortfolioRiskConfig } from '../portfolio-risk-manager.js';\r\nimport { Position } from '../types.js';\r\n\r\ndescribe('PortfolioRiskManager', () => {\r\n  let manager: PortfolioRiskManager;\r\n  let defaultConfig: PortfolioRiskConfig;\r\n  let diversifiedPositions: Position[];\r\n  let concentratedPositions: Position[];\r\n\r\n  beforeEach(() => {\r\n    defaultConfig = {\r\n      maxPortfolioCorrelation: 0.7,\r\n      maxSingleAssetExposure: 40, // 40% max single asset\r\n      maxSectorExposure: 60, // 60% max sector\r\n      minDiversificationScore: 50,\r\n      maxPortfolioBeta: 1.5,\r\n      rebalancingThreshold: 5, // 5% deviation threshold\r\n      targetAllocation: new Map([\r\n        ['BTC', 30],\r\n        ['ETH', 25],\r\n        ['ADA', 20],\r\n        ['DOT', 15],\r\n        ['LINK', 10]\r\n      ])\r\n    };\r\n\r\n    manager = new PortfolioRiskManager(defaultConfig);\r\n\r\n    // Diversified portfolio\r\n    diversifiedPositions = [\r\n      {\r\n        id: 'pos1',\r\n        symbol: 'BTC',\r\n        size: 0.3,\r\n        entryPrice: 50000,\r\n        currentPrice: 51000,\r\n        type: 'LONG',\r\n        unrealizedPnL: 300,\r\n        stopLoss: 49000,\r\n        takeProfit: 53000,\r\n        timestamp: new Date()\r\n      },\r\n      {\r\n        id: 'pos2',\r\n        symbol: 'ETH',\r\n        size: 5,\r\n        entryPrice: 3000,\r\n        currentPrice: 3100,\r\n        type: 'LONG',\r\n        unrealizedPnL: 500,\r\n        stopLoss: 2900,\r\n        takeProfit: 3300,\r\n        timestamp: new Date()\r\n      },\r\n      {\r\n        id: 'pos3',\r\n        symbol: 'ADA',\r\n        size: 1000,\r\n        entryPrice: 1.0,\r\n        currentPrice: 1.1,\r\n        type: 'LONG',\r\n        unrealizedPnL: 100,\r\n        stopLoss: 0.95,\r\n        takeProfit: 1.2,\r\n        timestamp: new Date()\r\n      }\r\n    ];\r\n\r\n    // Concentrated portfolio (too much BTC)\r\n    concentratedPositions = [\r\n      {\r\n        id: 'pos1',\r\n        symbol: 'BTC',\r\n        size: 1.0,\r\n        entryPrice: 50000,\r\n        currentPrice: 51000,\r\n        type: 'LONG',\r\n        unrealizedPnL: 1000,\r\n        stopLoss: 49000,\r\n        takeProfit: 53000,\r\n        timestamp: new Date()\r\n      },\r\n      {\r\n        id: 'pos2',\r\n        symbol: 'BTC',\r\n        size: 0.5,\r\n        entryPrice: 49000,\r\n        currentPrice: 51000,\r\n        type: 'LONG',\r\n        unrealizedPnL: 1000,\r\n        stopLoss: 48000,\r\n        takeProfit: 52000,\r\n        timestamp: new Date()\r\n      },\r\n      {\r\n        id: 'pos3',\r\n        symbol: 'ETH',\r\n        size: 2,\r\n        entryPrice: 3000,\r\n        currentPrice: 3100,\r\n        type: 'LONG',\r\n        unrealizedPnL: 200,\r\n        stopLoss: 2900,\r\n        takeProfit: 3300,\r\n        timestamp: new Date()\r\n      }\r\n    ];\r\n  });\r\n\r\n  describe('analyzePortfolioRisk', () => {\r\n    it('should analyze diversified portfolio correctly', async () => {\r\n      const report = await manager.analyzePortfolioRisk(diversifiedPositions);\r\n\r\n      expect(report.metrics.totalValue).toBeGreaterThan(0);\r\n      expect(report.assetExposures.length).toBe(3); // BTC, ETH, ADA\r\n      expect(report.sectorExposures.length).toBeGreaterThan(0);\r\n      expect(report.correlationMatrix).toBeDefined();\r\n      expect(report.overallRiskScore).toBeGreaterThanOrEqual(0);\r\n      expect(report.overallRiskScore).toBeLessThanOrEqual(100);\r\n    });\r\n\r\n    it('should identify concentration risk', async () => {\r\n      const report = await manager.analyzePortfolioRisk(concentratedPositions);\r\n\r\n      // Should have high BTC exposure\r\n      const btcExposure = report.assetExposures.find(a => a.symbol === 'BTC');\r\n      expect(btcExposure).toBeDefined();\r\n      expect(btcExposure!.percentage).toBeGreaterThan(40); // Above max single asset exposure\r\n\r\n      // Should have risk violations\r\n      expect(report.riskViolations.length).toBeGreaterThan(0);\r\n      expect(report.riskViolations.some(v => v.includes('BTC'))).toBe(true);\r\n    });\r\n\r\n    it('should calculate portfolio metrics correctly', async () => {\r\n      const report = await manager.analyzePortfolioRisk(diversifiedPositions);\r\n\r\n      expect(report.metrics.beta).toBeGreaterThan(0);\r\n      expect(report.metrics.volatility).toBeGreaterThan(0);\r\n      expect(report.metrics.diversificationRatio).toBeGreaterThan(0);\r\n      expect(report.metrics.concentrationRisk).toBeGreaterThanOrEqual(0);\r\n      expect(report.metrics.concentrationRisk).toBeLessThanOrEqual(1);\r\n    });\r\n\r\n    it('should calculate asset exposures correctly', async () => {\r\n      const report = await manager.analyzePortfolioRisk(diversifiedPositions);\r\n\r\n      // Check that percentages add up to 100%\r\n      const totalPercentage = report.assetExposures.reduce((sum, asset) => sum + asset.percentage, 0);\r\n      expect(totalPercentage).toBeCloseTo(100, 1);\r\n\r\n      // Check individual asset calculations\r\n      const btcExposure = report.assetExposures.find(a => a.symbol === 'BTC');\r\n      expect(btcExposure).toBeDefined();\r\n      expect(btcExposure!.positionCount).toBe(1);\r\n      expect(btcExposure!.value).toBeCloseTo(0.3 * 51000, 1);\r\n    });\r\n\r\n    it('should calculate sector exposures correctly', async () => {\r\n      const report = await manager.analyzePortfolioRisk(diversifiedPositions);\r\n\r\n      expect(report.sectorExposures.length).toBeGreaterThan(0);\r\n      \r\n      // Should have Digital Gold sector (BTC)\r\n      const digitalGoldSector = report.sectorExposures.find(s => s.sector === 'Digital Gold');\r\n      expect(digitalGoldSector).toBeDefined();\r\n      expect(digitalGoldSector!.assets).toContain('BTC');\r\n\r\n      // Should have Smart Contracts sector (ETH)\r\n      const smartContractsSector = report.sectorExposures.find(s => s.sector === 'Smart Contracts');\r\n      expect(smartContractsSector).toBeDefined();\r\n      expect(smartContractsSector!.assets).toContain('ETH');\r\n    });\r\n\r\n    it('should generate rebalancing recommendations', async () => {\r\n      const report = await manager.analyzePortfolioRisk(concentratedPositions);\r\n\r\n      expect(report.rebalancingRecommendations.length).toBeGreaterThan(0);\r\n\r\n      // Should recommend reducing BTC exposure\r\n      const btcRecommendation = report.rebalancingRecommendations.find(r => r.symbol === 'BTC');\r\n      expect(btcRecommendation).toBeDefined();\r\n      expect(btcRecommendation!.type).toBe('REDUCE_EXPOSURE');\r\n      expect(btcRecommendation!.priority).toMatch(/HIGH|CRITICAL/);\r\n    });\r\n\r\n    it('should handle empty portfolio', async () => {\r\n      const report = await manager.analyzePortfolioRisk([]);\r\n\r\n      expect(report.metrics.totalValue).toBe(0);\r\n      expect(report.assetExposures).toHaveLength(0);\r\n      expect(report.sectorExposures).toHaveLength(0);\r\n      expect(report.riskViolations).toHaveLength(0);\r\n      expect(report.overallRiskScore).toBe(0);\r\n    });\r\n  });\r\n\r\n  describe('correlation analysis', () => {\r\n    it('should calculate correlation matrix', async () => {\r\n      const report = await manager.analyzePortfolioRisk(diversifiedPositions);\r\n\r\n      expect(report.correlationMatrix.correlations.size).toBeGreaterThan(0);\r\n      expect(report.correlationMatrix.portfolioCorrelationRisk).toBeGreaterThanOrEqual(0);\r\n      expect(report.correlationMatrix.diversificationScore).toBeGreaterThanOrEqual(0);\r\n      expect(report.correlationMatrix.diversificationScore).toBeLessThanOrEqual(100);\r\n    });\r\n\r\n    it('should detect high correlation risk', async () => {\r\n      // Create highly correlated portfolio (BTC and ETH)\r\n      const correlatedPositions = [\r\n        {\r\n          ...diversifiedPositions[0], // BTC\r\n          size: 1.0\r\n        },\r\n        {\r\n          ...diversifiedPositions[1], // ETH\r\n          size: 10.0\r\n        }\r\n      ];\r\n\r\n      const report = await manager.analyzePortfolioRisk(correlatedPositions);\r\n\r\n      // Should detect correlation risk\r\n      expect(report.correlationMatrix.portfolioCorrelationRisk).toBeGreaterThan(0);\r\n      \r\n      // May generate diversification recommendations\r\n      const diversifyRec = report.rebalancingRecommendations.find(r => r.type === 'DIVERSIFY');\r\n      if (diversifyRec) {\r\n        expect(diversifyRec.reasoning).toContain('correlation');\r\n      }\r\n    });\r\n  });\r\n\r\n  describe('risk violations', () => {\r\n    it('should identify single asset exposure violations', async () => {\r\n      const report = await manager.analyzePortfolioRisk(concentratedPositions);\r\n\r\n      const exposureViolation = report.riskViolations.find(v => v.includes('exposure') && v.includes('exceeds'));\r\n      expect(exposureViolation).toBeDefined();\r\n    });\r\n\r\n    it('should identify sector exposure violations', async () => {\r\n      // Create portfolio with high sector concentration\r\n      const sectorConcentratedPositions = [\r\n        ...concentratedPositions,\r\n        {\r\n          id: 'pos4',\r\n          symbol: 'ADA', // Another smart contract platform like ETH\r\n          size: 2000,\r\n          entryPrice: 1.0,\r\n          currentPrice: 1.1,\r\n          type: 'LONG' as const,\r\n          unrealizedPnL: 200,\r\n          stopLoss: 0.95,\r\n          takeProfit: 1.2,\r\n          timestamp: new Date()\r\n        }\r\n      ];\r\n\r\n      const report = await manager.analyzePortfolioRisk(sectorConcentratedPositions);\r\n\r\n      // May have sector exposure violations depending on configuration\r\n      const sectorViolations = report.riskViolations.filter(v => v.includes('sector'));\r\n      expect(sectorViolations.length).toBeGreaterThanOrEqual(0);\r\n    });\r\n\r\n    it('should identify diversification violations', async () => {\r\n      // Create poorly diversified portfolio\r\n      const poorlyDiversifiedPositions = [\r\n        {\r\n          ...concentratedPositions[0],\r\n          size: 2.0 // Very large BTC position\r\n        }\r\n      ];\r\n\r\n      const report = await manager.analyzePortfolioRisk(poorlyDiversifiedPositions);\r\n\r\n      expect(report.correlationMatrix.diversificationScore).toBeLessThan(defaultConfig.minDiversificationScore);\r\n      \r\n      const diversificationViolation = report.riskViolations.find(v => v.includes('Diversification'));\r\n      expect(diversificationViolation).toBeDefined();\r\n    });\r\n  });\r\n\r\n  describe('rebalancing recommendations', () => {\r\n    it('should prioritize recommendations correctly', async () => {\r\n      const report = await manager.analyzePortfolioRisk(concentratedPositions);\r\n\r\n      if (report.rebalancingRecommendations.length > 1) {\r\n        const priorities = report.rebalancingRecommendations.map(r => r.priority);\r\n        \r\n        // Should be sorted by priority (CRITICAL > HIGH > MEDIUM > LOW)\r\n        const priorityOrder = { CRITICAL: 4, HIGH: 3, MEDIUM: 2, LOW: 1 };\r\n        for (let i = 1; i < priorities.length; i++) {\r\n          expect(priorityOrder[priorities[i-1]]).toBeGreaterThanOrEqual(priorityOrder[priorities[i]]);\r\n        }\r\n      }\r\n    });\r\n\r\n    it('should calculate estimated impact correctly', async () => {\r\n      const report = await manager.analyzePortfolioRisk(concentratedPositions);\r\n\r\n      report.rebalancingRecommendations.forEach(rec => {\r\n        expect(rec.estimatedImpact).toBeDefined();\r\n        expect(rec.estimatedImpact.portfolioRisk).toBeDefined();\r\n        expect(rec.estimatedImpact.diversificationImprovement).toBeDefined();\r\n        expect(rec.estimatedImpact.correlationReduction).toBeDefined();\r\n      });\r\n    });\r\n\r\n    it('should recommend increasing exposure for underweight assets', async () => {\r\n      // Create portfolio missing target assets\r\n      const underweightPositions = [\r\n        {\r\n          ...diversifiedPositions[0], // Only BTC\r\n          size: 0.1 // Small position\r\n        }\r\n      ];\r\n\r\n      const report = await manager.analyzePortfolioRisk(underweightPositions);\r\n\r\n      // Should recommend increasing exposure to meet targets\r\n      const increaseRecs = report.rebalancingRecommendations.filter(r => r.type === 'INCREASE_EXPOSURE');\r\n      expect(increaseRecs.length).toBeGreaterThan(0);\r\n    });\r\n  });\r\n\r\n  describe('portfolio risk summary', () => {\r\n    it('should generate risk summary for low risk portfolio', async () => {\r\n      const report = await manager.analyzePortfolioRisk(diversifiedPositions);\r\n      const summary = manager.getPortfolioRiskSummary(report);\r\n\r\n      expect(summary.riskLevel).toMatch(/LOW|MEDIUM|HIGH|CRITICAL/);\r\n      expect(summary.keyRisks).toBeDefined();\r\n      expect(summary.topRecommendations).toBeDefined();\r\n      expect(summary.diversificationStatus).toMatch(/GOOD|FAIR|POOR/);\r\n    });\r\n\r\n    it('should generate risk summary for high risk portfolio', async () => {\r\n      const report = await manager.analyzePortfolioRisk(concentratedPositions);\r\n      const summary = manager.getPortfolioRiskSummary(report);\r\n\r\n      expect(summary.riskLevel).toMatch(/MEDIUM|HIGH|CRITICAL/);\r\n      expect(summary.keyRisks.length).toBeGreaterThan(0);\r\n      expect(summary.topRecommendations.length).toBeGreaterThan(0);\r\n    });\r\n  });\r\n\r\n  describe('configuration management', () => {\r\n    it('should update configuration correctly', () => {\r\n      const newConfig = { maxSingleAssetExposure: 50 };\r\n      manager.updateConfig(newConfig);\r\n\r\n      const config = manager.getConfig();\r\n      expect(config.maxSingleAssetExposure).toBe(50);\r\n      expect(config.maxSectorExposure).toBe(60); // Should remain unchanged\r\n    });\r\n\r\n    it('should apply new configuration to analysis', async () => {\r\n      // First analysis with default config\r\n      const report1 = await manager.analyzePortfolioRisk(concentratedPositions);\r\n      const violations1 = report1.riskViolations.length;\r\n\r\n      // Update to more lenient config\r\n      manager.updateConfig({ maxSingleAssetExposure: 80 });\r\n\r\n      // Second analysis should have fewer violations\r\n      const report2 = await manager.analyzePortfolioRisk(concentratedPositions);\r\n      const violations2 = report2.riskViolations.length;\r\n\r\n      expect(violations2).toBeLessThanOrEqual(violations1);\r\n    });\r\n  });\r\n\r\n  describe('edge cases', () => {\r\n    it('should handle single position portfolio', async () => {\r\n      const singlePosition = [diversifiedPositions[0]];\r\n      const report = await manager.analyzePortfolioRisk(singlePosition);\r\n\r\n      expect(report.assetExposures).toHaveLength(1);\r\n      expect(report.assetExposures[0].percentage).toBeCloseTo(100, 1);\r\n      expect(report.metrics.concentrationRisk).toBe(1); // Maximum concentration\r\n    });\r\n\r\n    it('should handle positions with zero value', async () => {\r\n      const zeroValuePositions = [\r\n        {\r\n          ...diversifiedPositions[0],\r\n          size: 0,\r\n          currentPrice: 0,\r\n          unrealizedPnL: 0\r\n        }\r\n      ];\r\n\r\n      const report = await manager.analyzePortfolioRisk(zeroValuePositions);\r\n\r\n      expect(report.metrics.totalValue).toBe(0);\r\n      expect(report.assetExposures).toHaveLength(0);\r\n    });\r\n\r\n    it('should handle very large portfolios', async () => {\r\n      // Create portfolio with many positions\r\n      const largePortfolio: Position[] = [];\r\n      for (let i = 0; i < 50; i++) {\r\n        largePortfolio.push({\r\n          id: `pos${i}`,\r\n          symbol: i % 2 === 0 ? 'BTC' : 'ETH',\r\n          size: 0.01,\r\n          entryPrice: 50000,\r\n          currentPrice: 51000,\r\n          type: 'LONG',\r\n          unrealizedPnL: 10,\r\n          stopLoss: 49000,\r\n          takeProfit: 53000,\r\n          timestamp: new Date()\r\n        });\r\n      }\r\n\r\n      const report = await manager.analyzePortfolioRisk(largePortfolio);\r\n\r\n      expect(report.assetExposures).toHaveLength(2); // BTC and ETH\r\n      expect(report.metrics.totalValue).toBeGreaterThan(0);\r\n    });\r\n  });\r\n});"],"version":3}