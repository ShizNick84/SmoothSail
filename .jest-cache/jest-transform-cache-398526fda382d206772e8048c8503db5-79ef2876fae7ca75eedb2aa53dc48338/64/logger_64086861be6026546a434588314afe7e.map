{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\core\\logging\\logger.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\core\\logging\\logger.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * AI CRYPTO TRADING AGENT - COMPREHENSIVE LOGGING SYSTEM\r\n * =============================================================================\r\n * \r\n * This module provides a comprehensive logging system with security-focused\r\n * features for the AI crypto trading agent. All trading operations, security\r\n * events, and system activities are logged with appropriate detail levels.\r\n * \r\n * CRITICAL SECURITY NOTICE:\r\n * This logging system handles sensitive financial and security data.\r\n * All logs must be protected and never expose sensitive information.\r\n * \r\n * Features:\r\n * - Multiple log levels with appropriate filtering\r\n * - Automatic log rotation and archival\r\n * - Security-aware log sanitization\r\n * - Structured logging with JSON format\r\n * - Separate log files for different components\r\n * - Audit trail capabilities\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport winston from 'winston';\r\nimport DailyRotateFile from 'winston-daily-rotate-file';\r\nimport { resolve } from 'path';\r\nimport { existsSync, mkdirSync } from 'fs';\r\n\r\n/**\r\n * Interface for log metadata\r\n * Provides structured context for log entries\r\n */\r\nexport interface LogMetadata {\r\n  /** Component that generated the log */\r\n  component?: string;\r\n  /** Trading pair if applicable */\r\n  symbol?: string;\r\n  /** User ID if applicable */\r\n  userId?: string;\r\n  /** Session ID for tracking */\r\n  sessionId?: string;\r\n  /** Request ID for API calls */\r\n  requestId?: string;\r\n  /** Additional context data */\r\n  context?: Record<string, any>;\r\n  /** Security classification */\r\n  classification?: 'PUBLIC' | 'INTERNAL' | 'CONFIDENTIAL' | 'RESTRICTED';\r\n}\r\n\r\n/**\r\n * Interface for audit log entries\r\n * Specialized structure for security and compliance logging\r\n */\r\nexport interface AuditLogEntry {\r\n  /** Unique audit event ID */\r\n  auditId: string;\r\n  /** Type of audit event */\r\n  eventType: string;\r\n  /** User or system that performed the action */\r\n  actor: string;\r\n  /** Resource that was affected */\r\n  resource: string;\r\n  /** Action that was performed */\r\n  action: string;\r\n  /** Result of the action */\r\n  result: 'SUCCESS' | 'FAILURE' | 'PARTIAL';\r\n  /** IP address of the actor */\r\n  ipAddress?: string;\r\n  /** Additional audit data */\r\n  auditData?: Record<string, any>;\r\n  /** Timestamp of the event */\r\n  timestamp: Date;\r\n}\r\n\r\n/**\r\n * Comprehensive logging service for the AI crypto trading agent\r\n * Provides secure, structured logging with automatic rotation and sanitization\r\n */\r\nclass Logger {\r\n  private winston: winston.Logger;\r\n  private auditLogger: winston.Logger;\r\n  private securityLogger: winston.Logger;\r\n  private tradingLogger: winston.Logger;\r\n  \r\n  /** Sensitive data patterns to sanitize from logs */\r\n  private static readonly SENSITIVE_PATTERNS = [\r\n    /api[_-]?key[\"\\s]*[:=][\"\\s]*([^\"\\s,}]+)/gi,\r\n    /secret[\"\\s]*[:=][\"\\s]*([^\"\\s,}]+)/gi,\r\n    /password[\"\\s]*[:=][\"\\s]*([^\"\\s,}]+)/gi,\r\n    /token[\"\\s]*[:=][\"\\s]*([^\"\\s,}]+)/gi,\r\n    /authorization[\"\\s]*[:=][\"\\s]*([^\"\\s,}]+)/gi,\r\n    /private[_-]?key[\"\\s]*[:=][\"\\s]*([^\"\\s,}]+)/gi,\r\n    /\\b[A-Za-z0-9]{32,}\\b/g, // Potential API keys or hashes\r\n  ];\r\n\r\n  constructor() {\r\n    // Ensure log directories exist\r\n    this.ensureLogDirectories();\r\n    \r\n    // Initialize main logger\r\n    this.winston = this.createMainLogger();\r\n    \r\n    // Initialize specialized loggers\r\n    this.auditLogger = this.createAuditLogger();\r\n    this.securityLogger = this.createSecurityLogger();\r\n    this.tradingLogger = this.createTradingLogger();\r\n  }\r\n\r\n  /**\r\n   * Ensure all required log directories exist\r\n   * Creates directories with appropriate permissions\r\n   */\r\n  private ensureLogDirectories(): void {\r\n    const logDirs = [\r\n      process.env.LOG_DIR || './logs',\r\n      process.env.AUDIT_LOG_DIR || './logs/audit',\r\n      process.env.SECURITY_LOG_DIR || './logs/security',\r\n      './logs/trading'\r\n    ];\r\n\r\n    for (const dir of logDirs) {\r\n      if (!existsSync(dir)) {\r\n        mkdirSync(dir, { recursive: true, mode: 0o750 });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create the main application logger\r\n   * Handles general application logging with rotation\r\n   * \r\n   * @returns winston.Logger Configured main logger\r\n   */\r\n  private createMainLogger(): winston.Logger {\r\n    return winston.createLogger({\r\n      level: process.env.LOG_LEVEL || 'info',\r\n      format: winston.format.combine(\r\n        winston.format.timestamp(),\r\n        winston.format.errors({ stack: true }),\r\n        winston.format.json(),\r\n        winston.format.printf(this.formatLogMessage.bind(this))\r\n      ),\r\n      transports: [\r\n        // Console output for development\r\n        new winston.transports.Console({\r\n          format: winston.format.combine(\r\n            winston.format.colorize(),\r\n            winston.format.simple(),\r\n            winston.format.printf(this.formatConsoleMessage.bind(this))\r\n          )\r\n        }),\r\n        \r\n        // Daily rotating file for general logs\r\n        new DailyRotateFile({\r\n          filename: resolve(process.env.LOG_DIR || './logs', 'application-%DATE%.log'),\r\n          datePattern: 'YYYY-MM-DD',\r\n          maxSize: '100m',\r\n          maxFiles: '30d',\r\n          zippedArchive: true,\r\n          format: winston.format.combine(\r\n            winston.format.timestamp(),\r\n            winston.format.json()\r\n          )\r\n        }),\r\n        \r\n        // Error-only log file\r\n        new DailyRotateFile({\r\n          filename: resolve(process.env.LOG_DIR || './logs', 'error-%DATE%.log'),\r\n          datePattern: 'YYYY-MM-DD',\r\n          level: 'error',\r\n          maxSize: '100m',\r\n          maxFiles: '90d',\r\n          zippedArchive: true\r\n        })\r\n      ]\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create specialized audit logger for compliance and security\r\n   * Maintains tamper-evident audit trails\r\n   * \r\n   * @returns winston.Logger Configured audit logger\r\n   */\r\n  private createAuditLogger(): winston.Logger {\r\n    return winston.createLogger({\r\n      level: 'info',\r\n      format: winston.format.combine(\r\n        winston.format.timestamp(),\r\n        winston.format.json()\r\n      ),\r\n      transports: [\r\n        new DailyRotateFile({\r\n          filename: resolve(process.env.AUDIT_LOG_DIR || './logs/audit', 'audit-%DATE%.log'),\r\n          datePattern: 'YYYY-MM-DD',\r\n          maxSize: '50m',\r\n          maxFiles: '365d', // Keep audit logs for 1 year\r\n          zippedArchive: true\r\n        })\r\n      ]\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create specialized security logger for threat monitoring\r\n   * Logs all security-related events and incidents\r\n   * \r\n   * @returns winston.Logger Configured security logger\r\n   */\r\n  private createSecurityLogger(): winston.Logger {\r\n    return winston.createLogger({\r\n      level: 'debug',\r\n      format: winston.format.combine(\r\n        winston.format.timestamp(),\r\n        winston.format.json()\r\n      ),\r\n      transports: [\r\n        new DailyRotateFile({\r\n          filename: resolve(process.env.SECURITY_LOG_DIR || './logs/security', 'security-%DATE%.log'),\r\n          datePattern: 'YYYY-MM-DD',\r\n          maxSize: '50m',\r\n          maxFiles: '365d', // Keep security logs for 1 year\r\n          zippedArchive: true\r\n        })\r\n      ]\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create specialized trading logger for financial operations\r\n   * Logs all trading activities and market data\r\n   * \r\n   * @returns winston.Logger Configured trading logger\r\n   */\r\n  private createTradingLogger(): winston.Logger {\r\n    return winston.createLogger({\r\n      level: process.env.TRADING_LOG_LEVEL || 'info',\r\n      format: winston.format.combine(\r\n        winston.format.timestamp(),\r\n        winston.format.json()\r\n      ),\r\n      transports: [\r\n        new DailyRotateFile({\r\n          filename: resolve('./logs/trading', 'trading-%DATE%.log'),\r\n          datePattern: 'YYYY-MM-DD',\r\n          maxSize: '100m',\r\n          maxFiles: '90d', // Keep trading logs for 90 days\r\n          zippedArchive: true\r\n        })\r\n      ]\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Format log messages with sanitization\r\n   * Removes sensitive data and adds structured formatting\r\n   * \r\n   * @param info - Winston log info object\r\n   * @returns string Formatted log message\r\n   */\r\n  private formatLogMessage(info: winston.Logform.TransformableInfo): string {\r\n    const { timestamp, level, message, ...meta } = info;\r\n    \r\n    // Sanitize the message and metadata\r\n    const sanitizedMessage = this.sanitizeSensitiveData(message);\r\n    const sanitizedMeta = this.sanitizeSensitiveData(JSON.stringify(meta));\r\n    \r\n    return JSON.stringify({\r\n      timestamp,\r\n      level,\r\n      message: sanitizedMessage,\r\n      ...JSON.parse(sanitizedMeta)\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Format console messages for development\r\n   * Provides readable console output with colors\r\n   * \r\n   * @param info - Winston log info object\r\n   * @returns string Formatted console message\r\n   */\r\n  private formatConsoleMessage(info: winston.Logform.TransformableInfo): string {\r\n    const { timestamp, level, message, ...meta } = info;\r\n    const sanitizedMessage = this.sanitizeSensitiveData(message);\r\n    \r\n    let output = `${timestamp} [${level.toUpperCase()}]: ${sanitizedMessage}`;\r\n    \r\n    if (Object.keys(meta).length > 0) {\r\n      const sanitizedMeta = this.sanitizeSensitiveData(JSON.stringify(meta, null, 2));\r\n      output += `\\n${sanitizedMeta}`;\r\n    }\r\n    \r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Sanitize sensitive data from log messages\r\n   * Replaces sensitive patterns with masked values\r\n   * \r\n   * @param data - Data to sanitize (string or object)\r\n   * @returns string Sanitized data\r\n   */\r\n  private sanitizeSensitiveData(data: any): string {\r\n    if (typeof data !== 'string') {\r\n      data = JSON.stringify(data);\r\n    }\r\n    \r\n    let sanitized = data;\r\n    \r\n    // Replace sensitive patterns with masked values\r\n    for (const pattern of Logger.SENSITIVE_PATTERNS) {\r\n      sanitized = sanitized.replace(pattern, (match, group1) => {\r\n        if (group1) {\r\n          const maskedValue = '*'.repeat(Math.min(group1.length, 8));\r\n          return match.replace(group1, maskedValue);\r\n        }\r\n        return '***REDACTED***';\r\n      });\r\n    }\r\n    \r\n    return sanitized;\r\n  }\r\n\r\n  /**\r\n   * Log debug messages\r\n   * Used for detailed diagnostic information\r\n   * \r\n   * @param message - Log message\r\n   * @param meta - Additional metadata\r\n   */\r\n  public debug(message: string, meta?: LogMetadata): void {\r\n    this.winston.debug(message, this.enrichMetadata(meta));\r\n  }\r\n\r\n  /**\r\n   * Log info messages\r\n   * Used for general operational information\r\n   * \r\n   * @param message - Log message\r\n   * @param meta - Additional metadata\r\n   */\r\n  public info(message: string, meta?: LogMetadata): void {\r\n    this.winston.info(message, this.enrichMetadata(meta));\r\n  }\r\n\r\n  /**\r\n   * Log warning messages\r\n   * Used for potentially problematic situations\r\n   * \r\n   * @param message - Log message\r\n   * @param meta - Additional metadata\r\n   */\r\n  public warn(message: string, meta?: LogMetadata): void {\r\n    this.winston.warn(message, this.enrichMetadata(meta));\r\n  }\r\n\r\n  /**\r\n   * Log error messages\r\n   * Used for error conditions and exceptions\r\n   * \r\n   * @param message - Log message\r\n   * @param error - Error object or additional metadata\r\n   */\r\n  public error(message: string, error?: Error | LogMetadata): void {\r\n    let meta: LogMetadata = {};\r\n    \r\n    if (error instanceof Error) {\r\n      meta = {\r\n        error: {\r\n          name: error.name,\r\n          message: error.message,\r\n          stack: error.stack\r\n        }\r\n      };\r\n    } else if (error) {\r\n      meta = error;\r\n    }\r\n    \r\n    this.winston.error(message, this.enrichMetadata(meta));\r\n  }\r\n\r\n  /**\r\n   * Log audit events for compliance and security\r\n   * Creates tamper-evident audit trail entries\r\n   * \r\n   * @param auditEntry - Structured audit log entry\r\n   */\r\n  public audit(auditEntry: AuditLogEntry): void {\r\n    const enrichedEntry = {\r\n      ...auditEntry,\r\n      timestamp: auditEntry.timestamp || new Date(),\r\n      auditId: auditEntry.auditId || this.generateAuditId()\r\n    };\r\n    \r\n    this.auditLogger.info('AUDIT_EVENT', enrichedEntry);\r\n  }\r\n\r\n  /**\r\n   * Log security events and incidents\r\n   * Specialized logging for security monitoring\r\n   * \r\n   * @param eventType - Type of security event\r\n   * @param message - Security event message\r\n   * @param meta - Security event metadata\r\n   */\r\n  public security(eventType: string, message: string, meta?: LogMetadata): void {\r\n    const securityMeta = {\r\n      ...this.enrichMetadata(meta),\r\n      eventType,\r\n      securityLevel: meta?.classification || 'INTERNAL',\r\n      timestamp: new Date().toISOString()\r\n    };\r\n    \r\n    this.securityLogger.info(message, securityMeta);\r\n  }\r\n\r\n  /**\r\n   * Log trading operations and market data\r\n   * Specialized logging for financial operations\r\n   * \r\n   * @param operation - Trading operation type\r\n   * @param message - Trading message\r\n   * @param meta - Trading metadata\r\n   */\r\n  public trading(operation: string, message: string, meta?: LogMetadata): void {\r\n    const tradingMeta = {\r\n      ...this.enrichMetadata(meta),\r\n      operation,\r\n      timestamp: new Date().toISOString()\r\n    };\r\n    \r\n    this.tradingLogger.info(message, tradingMeta);\r\n  }\r\n\r\n  /**\r\n   * Enrich metadata with common fields\r\n   * Adds standard fields to all log entries\r\n   * \r\n   * @param meta - Original metadata\r\n   * @returns LogMetadata Enriched metadata\r\n   */\r\n  private enrichMetadata(meta?: LogMetadata): LogMetadata {\r\n    return {\r\n      ...meta,\r\n      pid: process.pid,\r\n      hostname: require('os').hostname(),\r\n      nodeVersion: process.version,\r\n      environment: process.env.NODE_ENV || 'development'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generate unique audit ID\r\n   * Creates a unique identifier for audit trail entries\r\n   * \r\n   * @returns string Unique audit ID\r\n   */\r\n  private generateAuditId(): string {\r\n    const timestamp = Date.now().toString(36);\r\n    const random = Math.random().toString(36).substring(2);\r\n    return `audit_${timestamp}_${random}`;\r\n  }\r\n\r\n  /**\r\n   * Get logger statistics and health information\r\n   * Returns current logging status for monitoring\r\n   * \r\n   * @returns Object containing logger statistics\r\n   */\r\n  public getStats(): {\r\n    mainLogger: any;\r\n    auditLogger: any;\r\n    securityLogger: any;\r\n    tradingLogger: any;\r\n    timestamp: number;\r\n  } {\r\n    return {\r\n      mainLogger: {\r\n        level: this.winston.level,\r\n        transports: this.winston.transports.length\r\n      },\r\n      auditLogger: {\r\n        level: this.auditLogger.level,\r\n        transports: this.auditLogger.transports.length\r\n      },\r\n      securityLogger: {\r\n        level: this.securityLogger.level,\r\n        transports: this.securityLogger.transports.length\r\n      },\r\n      tradingLogger: {\r\n        level: this.tradingLogger.level,\r\n        transports: this.tradingLogger.transports.length\r\n      },\r\n      timestamp: Date.now()\r\n    };\r\n  }\r\n}\r\n\r\n// Create and export singleton logger instance\r\nexport const logger = new Logger();\r\n\r\n// Export types for use in other modules\r\nexport type { LogMetadata, AuditLogEntry };\r\n\r\n// =============================================================================\r\n// LOGGING SECURITY NOTES\r\n// =============================================================================\r\n// 1. All sensitive data is automatically sanitized before logging\r\n// 2. Audit logs are kept for 1 year for compliance requirements\r\n// 3. Security logs are kept for 1 year for incident investigation\r\n// 4. Log files are automatically rotated and compressed\r\n// 5. Log directories have restricted permissions (750)\r\n// 6. Never manually log sensitive information like API keys or passwords\r\n// 7. Use appropriate log levels to control information exposure\r\n// 8. Monitor log files for unauthorized access or tampering\r\n// ============================================================================="],"version":3}