af4828b6dd6fe7aee83fc94f466388c3
"use strict";
/**
 * =============================================================================
 * AI CRYPTO TRADING AGENT - COMPREHENSIVE LOGGING SYSTEM
 * =============================================================================
 *
 * This module provides a comprehensive logging system with security-focused
 * features for the AI crypto trading agent. All trading operations, security
 * events, and system activities are logged with appropriate detail levels.
 *
 * CRITICAL SECURITY NOTICE:
 * This logging system handles sensitive financial and security data.
 * All logs must be protected and never expose sensitive information.
 *
 * Features:
 * - Multiple log levels with appropriate filtering
 * - Automatic log rotation and archival
 * - Security-aware log sanitization
 * - Structured logging with JSON format
 * - Separate log files for different components
 * - Audit trail capabilities
 *
 * @author AI Crypto Trading System
 * @version 1.0.0
 * @license PROPRIETARY
 * =============================================================================
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.logger = void 0;
const winston_1 = __importDefault(require("winston"));
const winston_daily_rotate_file_1 = __importDefault(require("winston-daily-rotate-file"));
const path_1 = require("path");
const fs_1 = require("fs");
/**
 * Comprehensive logging service for the AI crypto trading agent
 * Provides secure, structured logging with automatic rotation and sanitization
 */
class Logger {
    winston;
    auditLogger;
    securityLogger;
    tradingLogger;
    /** Sensitive data patterns to sanitize from logs */
    static SENSITIVE_PATTERNS = [
        /api[_-]?key["\s]*[:=]["\s]*([^"\s,}]+)/gi,
        /secret["\s]*[:=]["\s]*([^"\s,}]+)/gi,
        /password["\s]*[:=]["\s]*([^"\s,}]+)/gi,
        /token["\s]*[:=]["\s]*([^"\s,}]+)/gi,
        /authorization["\s]*[:=]["\s]*([^"\s,}]+)/gi,
        /private[_-]?key["\s]*[:=]["\s]*([^"\s,}]+)/gi,
        /\b[A-Za-z0-9]{32,}\b/g, // Potential API keys or hashes
    ];
    constructor() {
        // Ensure log directories exist
        this.ensureLogDirectories();
        // Initialize main logger
        this.winston = this.createMainLogger();
        // Initialize specialized loggers
        this.auditLogger = this.createAuditLogger();
        this.securityLogger = this.createSecurityLogger();
        this.tradingLogger = this.createTradingLogger();
    }
    /**
     * Ensure all required log directories exist
     * Creates directories with appropriate permissions
     */
    ensureLogDirectories() {
        const logDirs = [
            process.env.LOG_DIR || './logs',
            process.env.AUDIT_LOG_DIR || './logs/audit',
            process.env.SECURITY_LOG_DIR || './logs/security',
            './logs/trading'
        ];
        for (const dir of logDirs) {
            if (!(0, fs_1.existsSync)(dir)) {
                (0, fs_1.mkdirSync)(dir, { recursive: true, mode: 0o750 });
            }
        }
    }
    /**
     * Create the main application logger
     * Handles general application logging with rotation
     *
     * @returns winston.Logger Configured main logger
     */
    createMainLogger() {
        return winston_1.default.createLogger({
            level: process.env.LOG_LEVEL || 'info',
            format: winston_1.default.format.combine(winston_1.default.format.timestamp(), winston_1.default.format.errors({ stack: true }), winston_1.default.format.json(), winston_1.default.format.printf(this.formatLogMessage.bind(this))),
            transports: [
                // Console output for development
                new winston_1.default.transports.Console({
                    format: winston_1.default.format.combine(winston_1.default.format.colorize(), winston_1.default.format.simple(), winston_1.default.format.printf(this.formatConsoleMessage.bind(this)))
                }),
                // Daily rotating file for general logs
                new winston_daily_rotate_file_1.default({
                    filename: (0, path_1.resolve)(process.env.LOG_DIR || './logs', 'application-%DATE%.log'),
                    datePattern: 'YYYY-MM-DD',
                    maxSize: '100m',
                    maxFiles: '30d',
                    zippedArchive: true,
                    format: winston_1.default.format.combine(winston_1.default.format.timestamp(), winston_1.default.format.json())
                }),
                // Error-only log file
                new winston_daily_rotate_file_1.default({
                    filename: (0, path_1.resolve)(process.env.LOG_DIR || './logs', 'error-%DATE%.log'),
                    datePattern: 'YYYY-MM-DD',
                    level: 'error',
                    maxSize: '100m',
                    maxFiles: '90d',
                    zippedArchive: true
                })
            ]
        });
    }
    /**
     * Create specialized audit logger for compliance and security
     * Maintains tamper-evident audit trails
     *
     * @returns winston.Logger Configured audit logger
     */
    createAuditLogger() {
        return winston_1.default.createLogger({
            level: 'info',
            format: winston_1.default.format.combine(winston_1.default.format.timestamp(), winston_1.default.format.json()),
            transports: [
                new winston_daily_rotate_file_1.default({
                    filename: (0, path_1.resolve)(process.env.AUDIT_LOG_DIR || './logs/audit', 'audit-%DATE%.log'),
                    datePattern: 'YYYY-MM-DD',
                    maxSize: '50m',
                    maxFiles: '365d', // Keep audit logs for 1 year
                    zippedArchive: true
                })
            ]
        });
    }
    /**
     * Create specialized security logger for threat monitoring
     * Logs all security-related events and incidents
     *
     * @returns winston.Logger Configured security logger
     */
    createSecurityLogger() {
        return winston_1.default.createLogger({
            level: 'debug',
            format: winston_1.default.format.combine(winston_1.default.format.timestamp(), winston_1.default.format.json()),
            transports: [
                new winston_daily_rotate_file_1.default({
                    filename: (0, path_1.resolve)(process.env.SECURITY_LOG_DIR || './logs/security', 'security-%DATE%.log'),
                    datePattern: 'YYYY-MM-DD',
                    maxSize: '50m',
                    maxFiles: '365d', // Keep security logs for 1 year
                    zippedArchive: true
                })
            ]
        });
    }
    /**
     * Create specialized trading logger for financial operations
     * Logs all trading activities and market data
     *
     * @returns winston.Logger Configured trading logger
     */
    createTradingLogger() {
        return winston_1.default.createLogger({
            level: process.env.TRADING_LOG_LEVEL || 'info',
            format: winston_1.default.format.combine(winston_1.default.format.timestamp(), winston_1.default.format.json()),
            transports: [
                new winston_daily_rotate_file_1.default({
                    filename: (0, path_1.resolve)('./logs/trading', 'trading-%DATE%.log'),
                    datePattern: 'YYYY-MM-DD',
                    maxSize: '100m',
                    maxFiles: '90d', // Keep trading logs for 90 days
                    zippedArchive: true
                })
            ]
        });
    }
    /**
     * Format log messages with sanitization
     * Removes sensitive data and adds structured formatting
     *
     * @param info - Winston log info object
     * @returns string Formatted log message
     */
    formatLogMessage(info) {
        const { timestamp, level, message, ...meta } = info;
        // Sanitize the message and metadata
        const sanitizedMessage = this.sanitizeSensitiveData(message);
        const sanitizedMeta = this.sanitizeSensitiveData(JSON.stringify(meta));
        return JSON.stringify({
            timestamp,
            level,
            message: sanitizedMessage,
            ...JSON.parse(sanitizedMeta)
        });
    }
    /**
     * Format console messages for development
     * Provides readable console output with colors
     *
     * @param info - Winston log info object
     * @returns string Formatted console message
     */
    formatConsoleMessage(info) {
        const { timestamp, level, message, ...meta } = info;
        const sanitizedMessage = this.sanitizeSensitiveData(message);
        let output = `${timestamp} [${level.toUpperCase()}]: ${sanitizedMessage}`;
        if (Object.keys(meta).length > 0) {
            const sanitizedMeta = this.sanitizeSensitiveData(JSON.stringify(meta, null, 2));
            output += `\n${sanitizedMeta}`;
        }
        return output;
    }
    /**
     * Sanitize sensitive data from log messages
     * Replaces sensitive patterns with masked values
     *
     * @param data - Data to sanitize (string or object)
     * @returns string Sanitized data
     */
    sanitizeSensitiveData(data) {
        if (typeof data !== 'string') {
            data = JSON.stringify(data);
        }
        let sanitized = data;
        // Replace sensitive patterns with masked values
        for (const pattern of Logger.SENSITIVE_PATTERNS) {
            sanitized = sanitized.replace(pattern, (match, group1) => {
                if (group1) {
                    const maskedValue = '*'.repeat(Math.min(group1.length, 8));
                    return match.replace(group1, maskedValue);
                }
                return '***REDACTED***';
            });
        }
        return sanitized;
    }
    /**
     * Log debug messages
     * Used for detailed diagnostic information
     *
     * @param message - Log message
     * @param meta - Additional metadata
     */
    debug(message, meta) {
        this.winston.debug(message, this.enrichMetadata(meta));
    }
    /**
     * Log info messages
     * Used for general operational information
     *
     * @param message - Log message
     * @param meta - Additional metadata
     */
    info(message, meta) {
        this.winston.info(message, this.enrichMetadata(meta));
    }
    /**
     * Log warning messages
     * Used for potentially problematic situations
     *
     * @param message - Log message
     * @param meta - Additional metadata
     */
    warn(message, meta) {
        this.winston.warn(message, this.enrichMetadata(meta));
    }
    /**
     * Log error messages
     * Used for error conditions and exceptions
     *
     * @param message - Log message
     * @param error - Error object or additional metadata
     */
    error(message, error) {
        let meta = {};
        if (error instanceof Error) {
            meta = {
                error: {
                    name: error.name,
                    message: error.message,
                    stack: error.stack
                }
            };
        }
        else if (error) {
            meta = error;
        }
        this.winston.error(message, this.enrichMetadata(meta));
    }
    /**
     * Log audit events for compliance and security
     * Creates tamper-evident audit trail entries
     *
     * @param auditEntry - Structured audit log entry
     */
    audit(auditEntry) {
        const enrichedEntry = {
            ...auditEntry,
            timestamp: auditEntry.timestamp || new Date(),
            auditId: auditEntry.auditId || this.generateAuditId()
        };
        this.auditLogger.info('AUDIT_EVENT', enrichedEntry);
    }
    /**
     * Log security events and incidents
     * Specialized logging for security monitoring
     *
     * @param eventType - Type of security event
     * @param message - Security event message
     * @param meta - Security event metadata
     */
    security(eventType, message, meta) {
        const securityMeta = {
            ...this.enrichMetadata(meta),
            eventType,
            securityLevel: meta?.classification || 'INTERNAL',
            timestamp: new Date().toISOString()
        };
        this.securityLogger.info(message, securityMeta);
    }
    /**
     * Log trading operations and market data
     * Specialized logging for financial operations
     *
     * @param operation - Trading operation type
     * @param message - Trading message
     * @param meta - Trading metadata
     */
    trading(operation, message, meta) {
        const tradingMeta = {
            ...this.enrichMetadata(meta),
            operation,
            timestamp: new Date().toISOString()
        };
        this.tradingLogger.info(message, tradingMeta);
    }
    /**
     * Enrich metadata with common fields
     * Adds standard fields to all log entries
     *
     * @param meta - Original metadata
     * @returns LogMetadata Enriched metadata
     */
    enrichMetadata(meta) {
        return {
            ...meta,
            pid: process.pid,
            hostname: require('os').hostname(),
            nodeVersion: process.version,
            environment: process.env.NODE_ENV || 'development'
        };
    }
    /**
     * Generate unique audit ID
     * Creates a unique identifier for audit trail entries
     *
     * @returns string Unique audit ID
     */
    generateAuditId() {
        const timestamp = Date.now().toString(36);
        const random = Math.random().toString(36).substring(2);
        return `audit_${timestamp}_${random}`;
    }
    /**
     * Get logger statistics and health information
     * Returns current logging status for monitoring
     *
     * @returns Object containing logger statistics
     */
    getStats() {
        return {
            mainLogger: {
                level: this.winston.level,
                transports: this.winston.transports.length
            },
            auditLogger: {
                level: this.auditLogger.level,
                transports: this.auditLogger.transports.length
            },
            securityLogger: {
                level: this.securityLogger.level,
                transports: this.securityLogger.transports.length
            },
            tradingLogger: {
                level: this.tradingLogger.level,
                transports: this.tradingLogger.transports.length
            },
            timestamp: Date.now()
        };
    }
}
// Create and export singleton logger instance
exports.logger = new Logger();
// =============================================================================
// LOGGING SECURITY NOTES
// =============================================================================
// 1. All sensitive data is automatically sanitized before logging
// 2. Audit logs are kept for 1 year for compliance requirements
// 3. Security logs are kept for 1 year for incident investigation
// 4. Log files are automatically rotated and compressed
// 5. Log directories have restricted permissions (750)
// 6. Never manually log sensitive information like API keys or passwords
// 7. Use appropriate log levels to control information exposure
// 8. Monitor log files for unauthorized access or tampering
// =============================================================================
//# sourceMappingURL=data:application/json;charset=utf-8;base64,