f1c4afba79657406fff84ad2f354ac2b
"use strict";
/**
 * Vulnerability Scanner Tests
 *
 * Automated vulnerability scanning and security assessment tests
 * for the AI crypto trading system.
 *
 * Requirements: 25.7 - Vulnerability scanning and assessment
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// Mock external dependencies
jest.mock('@/core/logging/logger', () => ({
    logger: {
        info: jest.fn(),
        debug: jest.fn(),
        warn: jest.fn(),
        error: jest.fn()
    }
}));
jest.mock('fs');
jest.mock('path');
const security_manager_1 = require("@/security/security-manager");
const threat_detection_engine_1 = require("@/security/threat-detection-engine");
const crypto_1 = __importDefault(require("crypto"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const mockedFs = fs_1.default;
const mockedPath = path_1.default;
describe('Vulnerability Scanner Tests', () => {
    let securityManager;
    let threatDetection;
    beforeEach(() => {
        // Set up test environment
        process.env.MASTER_ENCRYPTION_KEY = crypto_1.default.randomBytes(32).toString('hex');
        securityManager = new security_manager_1.SecurityManager();
        threatDetection = new threat_detection_engine_1.ThreatDetectionEngine();
        jest.clearAllMocks();
    });
    afterEach(() => {
        delete process.env.MASTER_ENCRYPTION_KEY;
    });
    describe('Code Vulnerability Scanning', () => {
        it('should detect hardcoded secrets in code', async () => {
            const codeSnippets = [
                // API Keys
                'const apiKey = "gateio_api_key_12345";',
                'GATE_IO_SECRET = "super_secret_key_67890"',
                'const password = "weak123";'
            ];
            // Mock vulnerability scanning
            const vulnerabilities = await threatDetection.scanCodeVulnerabilities(codeSnippets);
            expect(vulnerabilities).toBeDefined();
            expect(vulnerabilities.length).toBeGreaterThan(0);
            expect(vulnerabilities.some(v => v.type === 'HARDCODED_SECRET')).toBe(true);
        });
        it('should detect SQL injection vulnerabilities', async () => {
            const sqlQueries = [
                'SELECT * FROM users WHERE id = ' + userId,
                'DELETE FROM orders WHERE user_id = "' + userInput + '"'
            ];
            const vulnerabilities = await threatDetection.scanSQLInjection(sqlQueries);
            expect(vulnerabilities).toBeDefined();
            expect(vulnerabilities.length).toBeGreaterThan(0);
        });
    });
    describe('Dependency Vulnerability Scanning', () => {
        it('should scan package.json for vulnerable dependencies', async () => {
            const mockPackageJson = {
                dependencies: {
                    'vulnerable-package': '1.0.0',
                    'safe-package': '2.0.0'
                }
            };
            mockedFs.readFileSync.mockReturnValue(JSON.stringify(mockPackageJson));
            const vulnerabilities = await securityManager.scanDependencies();
            expect(vulnerabilities).toBeDefined();
            expect(Array.isArray(vulnerabilities)).toBe(true);
        });
    });
    describe('Network Vulnerability Scanning', () => {
        it('should scan for open ports and services', async () => {
            const networkScan = await securityManager.scanNetwork();
            expect(networkScan).toBeDefined();
            expect(networkScan).toHaveProperty('openPorts');
            expect(networkScan).toHaveProperty('services');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,