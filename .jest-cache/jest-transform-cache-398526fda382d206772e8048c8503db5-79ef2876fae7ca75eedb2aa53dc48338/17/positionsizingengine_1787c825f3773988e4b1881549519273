d34331ac79e77bb35c26d85aedf6722a
"use strict";

/**
 * Dynamic Position Sizing Engine
 *
 * Implements sophisticated position sizing based on:
 * - 2-3% risk per trade calculation
 * - Account balance and volatility considerations
 * - Confidence-based position size adjustment
 * - Correlation-based exposure limits
 */
/* istanbul ignore next */
function cov_dp0chv9am() {
  var path = "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\risk\\position-sizing-engine.ts";
  var hash = "d2efcb627cd5ccf776f4578d8dd92cff6ce001d4";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\risk\\position-sizing-engine.ts",
    statementMap: {
      "0": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 11,
          column: 62
        }
      },
      "1": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 12,
          column: 38
        }
      },
      "2": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 45
        }
      },
      "3": {
        start: {
          line: 22,
          column: 33
        },
        end: {
          line: 22,
          column: 130
        }
      },
      "4": {
        start: {
          line: 24,
          column: 39
        },
        end: {
          line: 24,
          column: 107
        }
      },
      "5": {
        start: {
          line: 26,
          column: 39
        },
        end: {
          line: 26,
          column: 113
        }
      },
      "6": {
        start: {
          line: 28,
          column: 38
        },
        end: {
          line: 28,
          column: 122
        }
      },
      "7": {
        start: {
          line: 29,
          column: 32
        },
        end: {
          line: 29,
          column: 78
        }
      },
      "8": {
        start: {
          line: 31,
          column: 34
        },
        end: {
          line: 31,
          column: 102
        }
      },
      "9": {
        start: {
          line: 32,
          column: 31
        },
        end: {
          line: 32,
          column: 103
        }
      },
      "10": {
        start: {
          line: 33,
          column: 29
        },
        end: {
          line: 33,
          column: 78
        }
      },
      "11": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 39,
          column: 9
        }
      },
      "12": {
        start: {
          line: 36,
          column: 12
        },
        end: {
          line: 36,
          column: 105
        }
      },
      "13": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 37,
          column: 104
        }
      },
      "14": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 38,
          column: 79
        }
      },
      "15": {
        start: {
          line: 41,
          column: 30
        },
        end: {
          line: 41,
          column: 68
        }
      },
      "16": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 46,
          column: 9
        }
      },
      "17": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 43,
          column: 76
        }
      },
      "18": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 44,
          column: 104
        }
      },
      "19": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 45,
          column: 79
        }
      },
      "20": {
        start: {
          line: 47,
          column: 32
        },
        end: {
          line: 47,
          column: 129
        }
      },
      "21": {
        start: {
          line: 49,
          column: 27
        },
        end: {
          line: 49,
          column: 113
        }
      },
      "22": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 59,
          column: 10
        }
      },
      "23": {
        start: {
          line: 65,
          column: 27
        },
        end: {
          line: 65,
          column: 87
        }
      },
      "24": {
        start: {
          line: 66,
          column: 26
        },
        end: {
          line: 66,
          column: 62
        }
      },
      "25": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 69,
          column: 9
        }
      },
      "26": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 72
        }
      },
      "27": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 70,
          column: 38
        }
      },
      "28": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 81,
          column: 9
        }
      },
      "29": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 80,
          column: 28
        }
      },
      "30": {
        start: {
          line: 83,
          column: 37
        },
        end: {
          line: 83,
          column: 81
        }
      },
      "31": {
        start: {
          line: 85,
          column: 37
        },
        end: {
          line: 85,
          column: 71
        }
      },
      "32": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 86,
          column: 47
        }
      },
      "33": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 97,
          column: 9
        }
      },
      "34": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 29
        }
      },
      "35": {
        start: {
          line: 99,
          column: 37
        },
        end: {
          line: 99,
          column: 117
        }
      },
      "36": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 100,
          column: 47
        }
      },
      "37": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 109,
          column: 9
        }
      },
      "38": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 108,
          column: 23
        }
      },
      "39": {
        start: {
          line: 111,
          column: 34
        },
        end: {
          line: 111,
          column: 98
        }
      },
      "40": {
        start: {
          line: 113,
          column: 31
        },
        end: {
          line: 113,
          column: 95
        }
      },
      "41": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 118,
          column: 9
        }
      },
      "42": {
        start: {
          line: 116,
          column: 38
        },
        end: {
          line: 116,
          column: 97
        }
      },
      "43": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 117,
          column: 56
        }
      },
      "44": {
        start: {
          line: 119,
          column: 8
        },
        end: {
          line: 119,
          column: 19
        }
      },
      "45": {
        start: {
          line: 125,
          column: 29
        },
        end: {
          line: 125,
          column: 38
        }
      },
      "46": {
        start: {
          line: 128,
          column: 35
        },
        end: {
          line: 131,
          column: 9
        }
      },
      "47": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 135,
          column: 9
        }
      },
      "48": {
        start: {
          line: 133,
          column: 32
        },
        end: {
          line: 133,
          column: 85
        }
      },
      "49": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 134,
          column: 77
        }
      },
      "50": {
        start: {
          line: 136,
          column: 41
        },
        end: {
          line: 136,
          column: 93
        }
      },
      "51": {
        start: {
          line: 137,
          column: 37
        },
        end: {
          line: 137,
          column: 85
        }
      },
      "52": {
        start: {
          line: 138,
          column: 8
        },
        end: {
          line: 143,
          column: 10
        }
      },
      "53": {
        start: {
          line: 149,
          column: 8
        },
        end: {
          line: 150,
          column: 21
        }
      },
      "54": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 150,
          column: 21
        }
      },
      "55": {
        start: {
          line: 151,
          column: 34
        },
        end: {
          line: 151,
          column: 67
        }
      },
      "56": {
        start: {
          line: 152,
          column: 31
        },
        end: {
          line: 152,
          column: 122
        }
      },
      "57": {
        start: {
          line: 152,
          column: 71
        },
        end: {
          line: 152,
          column: 91
        }
      },
      "58": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 153,
          column: 30
        }
      },
      "59": {
        start: {
          line: 159,
          column: 30
        },
        end: {
          line: 159,
          column: 82
        }
      },
      "60": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 160,
          column: 56
        }
      },
      "61": {
        start: {
          line: 166,
          column: 21
        },
        end: {
          line: 166,
          column: 57
        }
      },
      "62": {
        start: {
          line: 167,
          column: 23
        },
        end: {
          line: 167,
          column: 61
        }
      },
      "63": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 169,
          column: 21
        }
      },
      "64": {
        start: {
          line: 169,
          column: 12
        },
        end: {
          line: 169,
          column: 21
        }
      },
      "65": {
        start: {
          line: 170,
          column: 8
        },
        end: {
          line: 170,
          column: 29
        }
      },
      "66": {
        start: {
          line: 176,
          column: 33
        },
        end: {
          line: 176,
          column: 35
        }
      },
      "67": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 180,
          column: 9
        }
      },
      "68": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 179,
          column: 139
        }
      },
      "69": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 184,
          column: 9
        }
      },
      "70": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 183,
          column: 141
        }
      },
      "71": {
        start: {
          line: 186,
          column: 8
        },
        end: {
          line: 188,
          column: 9
        }
      },
      "72": {
        start: {
          line: 187,
          column: 12
        },
        end: {
          line: 187,
          column: 68
        }
      },
      "73": {
        start: {
          line: 190,
          column: 30
        },
        end: {
          line: 190,
          column: 63
        }
      },
      "74": {
        start: {
          line: 191,
          column: 35
        },
        end: {
          line: 191,
          column: 81
        }
      },
      "75": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 194,
          column: 9
        }
      },
      "76": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 193,
          column: 110
        }
      },
      "77": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 198,
          column: 10
        }
      },
      "78": {
        start: {
          line: 204,
          column: 8
        },
        end: {
          line: 204,
          column: 75
        }
      },
      "79": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 210,
          column: 42
        }
      },
      "80": {
        start: {
          line: 216,
          column: 24
        },
        end: {
          line: 216,
          column: 26
        }
      },
      "81": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 225,
          column: 9
        }
      },
      "82": {
        start: {
          line: 218,
          column: 36
        },
        end: {
          line: 222,
          column: 13
        }
      },
      "83": {
        start: {
          line: 223,
          column: 27
        },
        end: {
          line: 223,
          column: 76
        }
      },
      "84": {
        start: {
          line: 224,
          column: 12
        },
        end: {
          line: 224,
          column: 33
        }
      },
      "85": {
        start: {
          line: 226,
          column: 8
        },
        end: {
          line: 226,
          column: 23
        }
      },
      "86": {
        start: {
          line: 229,
          column: 0
        },
        end: {
          line: 229,
          column: 52
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 14,
            column: 4
          },
          end: {
            line: 14,
            column: 5
          }
        },
        loc: {
          start: {
            line: 14,
            column: 32
          },
          end: {
            line: 16,
            column: 5
          }
        },
        line: 14
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 20,
            column: 4
          },
          end: {
            line: 20,
            column: 5
          }
        },
        loc: {
          start: {
            line: 20,
            column: 41
          },
          end: {
            line: 60,
            column: 5
          }
        },
        line: 20
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 64,
            column: 4
          },
          end: {
            line: 64,
            column: 5
          }
        },
        loc: {
          start: {
            line: 64,
            column: 73
          },
          end: {
            line: 71,
            column: 5
          }
        },
        line: 64
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 77,
            column: 4
          },
          end: {
            line: 77,
            column: 5
          }
        },
        loc: {
          start: {
            line: 77,
            column: 52
          },
          end: {
            line: 87,
            column: 5
          }
        },
        line: 77
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 93,
            column: 4
          },
          end: {
            line: 93,
            column: 5
          }
        },
        loc: {
          start: {
            line: 93,
            column: 52
          },
          end: {
            line: 101,
            column: 5
          }
        },
        line: 93
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 106,
            column: 4
          },
          end: {
            line: 106,
            column: 5
          }
        },
        loc: {
          start: {
            line: 106,
            column: 68
          },
          end: {
            line: 120,
            column: 5
          }
        },
        line: 106
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 124,
            column: 4
          },
          end: {
            line: 124,
            column: 5
          }
        },
        loc: {
          start: {
            line: 124,
            column: 67
          },
          end: {
            line: 144,
            column: 5
          }
        },
        line: 124
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 148,
            column: 4
          },
          end: {
            line: 148,
            column: 5
          }
        },
        loc: {
          start: {
            line: 148,
            column: 52
          },
          end: {
            line: 154,
            column: 5
          }
        },
        line: 148
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 152,
            column: 56
          },
          end: {
            line: 152,
            column: 57
          }
        },
        loc: {
          start: {
            line: 152,
            column: 71
          },
          end: {
            line: 152,
            column: 91
          }
        },
        line: 152
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 158,
            column: 4
          },
          end: {
            line: 158,
            column: 5
          }
        },
        loc: {
          start: {
            line: 158,
            column: 48
          },
          end: {
            line: 161,
            column: 5
          }
        },
        line: 158
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 165,
            column: 4
          },
          end: {
            line: 165,
            column: 5
          }
        },
        loc: {
          start: {
            line: 165,
            column: 73
          },
          end: {
            line: 171,
            column: 5
          }
        },
        line: 165
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 175,
            column: 4
          },
          end: {
            line: 175,
            column: 5
          }
        },
        loc: {
          start: {
            line: 175,
            column: 81
          },
          end: {
            line: 199,
            column: 5
          }
        },
        line: 175
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 203,
            column: 4
          },
          end: {
            line: 203,
            column: 5
          }
        },
        loc: {
          start: {
            line: 203,
            column: 40
          },
          end: {
            line: 205,
            column: 5
          }
        },
        line: 203
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 209,
            column: 4
          },
          end: {
            line: 209,
            column: 5
          }
        },
        loc: {
          start: {
            line: 209,
            column: 24
          },
          end: {
            line: 211,
            column: 5
          }
        },
        line: 209
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 215,
            column: 4
          },
          end: {
            line: 215,
            column: 5
          }
        },
        loc: {
          start: {
            line: 215,
            column: 60
          },
          end: {
            line: 227,
            column: 5
          }
        },
        line: 215
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 35,
            column: 8
          },
          end: {
            line: 39,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 35,
            column: 8
          },
          end: {
            line: 39,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 35
      },
      "1": {
        loc: {
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 46,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 46,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 42
      },
      "2": {
        loc: {
          start: {
            line: 51,
            column: 26
          },
          end: {
            line: 51,
            column: 69
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 51,
            column: 48
          },
          end: {
            line: 51,
            column: 65
          }
        }, {
          start: {
            line: 51,
            column: 68
          },
          end: {
            line: 51,
            column: 69
          }
        }],
        line: 51
      },
      "3": {
        loc: {
          start: {
            line: 67,
            column: 8
          },
          end: {
            line: 69,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 67,
            column: 8
          },
          end: {
            line: 69,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 67
      },
      "4": {
        loc: {
          start: {
            line: 79,
            column: 8
          },
          end: {
            line: 81,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 8
          },
          end: {
            line: 81,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 79
      },
      "5": {
        loc: {
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 95
      },
      "6": {
        loc: {
          start: {
            line: 95,
            column: 12
          },
          end: {
            line: 95,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 95,
            column: 12
          },
          end: {
            line: 95,
            column: 29
          }
        }, {
          start: {
            line: 95,
            column: 33
          },
          end: {
            line: 95,
            column: 54
          }
        }],
        line: 95
      },
      "7": {
        loc: {
          start: {
            line: 107,
            column: 8
          },
          end: {
            line: 109,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 107,
            column: 8
          },
          end: {
            line: 109,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 107
      },
      "8": {
        loc: {
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 118,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 118,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 114
      },
      "9": {
        loc: {
          start: {
            line: 133,
            column: 32
          },
          end: {
            line: 133,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 133,
            column: 32
          },
          end: {
            line: 133,
            column: 80
          }
        }, {
          start: {
            line: 133,
            column: 84
          },
          end: {
            line: 133,
            column: 85
          }
        }],
        line: 133
      },
      "10": {
        loc: {
          start: {
            line: 149,
            column: 8
          },
          end: {
            line: 150,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 149,
            column: 8
          },
          end: {
            line: 150,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 149
      },
      "11": {
        loc: {
          start: {
            line: 168,
            column: 8
          },
          end: {
            line: 169,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 168,
            column: 8
          },
          end: {
            line: 169,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 168
      },
      "12": {
        loc: {
          start: {
            line: 178,
            column: 8
          },
          end: {
            line: 180,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 178,
            column: 8
          },
          end: {
            line: 180,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 178
      },
      "13": {
        loc: {
          start: {
            line: 182,
            column: 8
          },
          end: {
            line: 184,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 182,
            column: 8
          },
          end: {
            line: 184,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 182
      },
      "14": {
        loc: {
          start: {
            line: 186,
            column: 8
          },
          end: {
            line: 188,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 186,
            column: 8
          },
          end: {
            line: 188,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 186
      },
      "15": {
        loc: {
          start: {
            line: 192,
            column: 8
          },
          end: {
            line: 194,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 192,
            column: 8
          },
          end: {
            line: 194,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 192
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "d2efcb627cd5ccf776f4578d8dd92cff6ce001d4"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_dp0chv9am = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_dp0chv9am();
cov_dp0chv9am().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_dp0chv9am().s[1]++;
exports.PositionSizingEngine = void 0;
class PositionSizingEngine {
  constructor(riskParameters) {
    /* istanbul ignore next */
    cov_dp0chv9am().f[0]++;
    cov_dp0chv9am().s[2]++;
    this.riskParameters = riskParameters;
  }
  /**
   * Calculate optimal position size based on multiple risk factors
   */
  async calculatePositionSize(request) {
    /* istanbul ignore next */
    cov_dp0chv9am().f[1]++;
    // Calculate base position size using risk percentage
    const basePositionSize =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[3]++, this.calculateBasePositionSize(request.accountBalance, request.entryPrice, request.stopLossPrice));
    // Apply confidence adjustment
    const confidenceAdjustedSize =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[4]++, this.applyConfidenceAdjustment(basePositionSize, request.confidence));
    // Apply volatility adjustment
    const volatilityAdjustedSize =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[5]++, this.applyVolatilityAdjustment(confidenceAdjustedSize, request.volatility));
    // Calculate correlation adjustment
    const correlationAdjustment =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[6]++, await this.calculateCorrelationAdjustment(request.symbol, request.existingPositions));
    let finalPositionSize =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[7]++, volatilityAdjustedSize * correlationAdjustment);
    // Calculate risk metrics
    const accountRiskAmount =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[8]++, request.accountBalance * (this.riskParameters.maxRiskPerTrade / 100));
    let actualRiskAmount =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[9]++, Math.abs(request.entryPrice - request.stopLossPrice) * finalPositionSize);
    let riskPercentage =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[10]++, actualRiskAmount / request.accountBalance * 100);
    // Ensure we don't exceed max risk per trade due to adjustments
    /* istanbul ignore next */
    cov_dp0chv9am().s[11]++;
    if (riskPercentage > this.riskParameters.maxRiskPerTrade) {
      /* istanbul ignore next */
      cov_dp0chv9am().b[0][0]++;
      cov_dp0chv9am().s[12]++;
      finalPositionSize = accountRiskAmount / Math.abs(request.entryPrice - request.stopLossPrice);
      /* istanbul ignore next */
      cov_dp0chv9am().s[13]++;
      actualRiskAmount = Math.abs(request.entryPrice - request.stopLossPrice) * finalPositionSize;
      /* istanbul ignore next */
      cov_dp0chv9am().s[14]++;
      riskPercentage = actualRiskAmount / request.accountBalance * 100;
    } else
    /* istanbul ignore next */
    {
      cov_dp0chv9am().b[0][1]++;
    }
    // Also ensure position value doesn't exceed account balance
    const positionValue =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[15]++, finalPositionSize * request.entryPrice);
    /* istanbul ignore next */
    cov_dp0chv9am().s[16]++;
    if (positionValue > request.accountBalance) {
      /* istanbul ignore next */
      cov_dp0chv9am().b[1][0]++;
      cov_dp0chv9am().s[17]++;
      finalPositionSize = request.accountBalance / request.entryPrice;
      /* istanbul ignore next */
      cov_dp0chv9am().s[18]++;
      actualRiskAmount = Math.abs(request.entryPrice - request.stopLossPrice) * finalPositionSize;
      /* istanbul ignore next */
      cov_dp0chv9am().s[19]++;
      riskPercentage = actualRiskAmount / request.accountBalance * 100;
    } else
    /* istanbul ignore next */
    {
      cov_dp0chv9am().b[1][1]++;
    }
    const riskRewardRatio =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[20]++, this.calculateRiskRewardRatio(request.entryPrice, request.stopLossPrice, request.takeProfitPrice));
    // Validate position size
    const validation =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[21]++, this.validatePositionSize(finalPositionSize, riskPercentage, riskRewardRatio, request));
    /* istanbul ignore next */
    cov_dp0chv9am().s[22]++;
    return {
      positionSize: validation.approved ?
      /* istanbul ignore next */
      (cov_dp0chv9am().b[2][0]++, finalPositionSize) :
      /* istanbul ignore next */
      (cov_dp0chv9am().b[2][1]++, 0),
      riskAmount: accountRiskAmount,
      riskPercentage,
      riskRewardRatio,
      confidenceAdjustedSize,
      correlationAdjustment,
      approved: validation.approved,
      rejectionReasons: validation.rejectionReasons
    };
  }
  /**
   * Calculate base position size using 2-3% risk rule
   */
  calculateBasePositionSize(accountBalance, entryPrice, stopLossPrice) {
    /* istanbul ignore next */
    cov_dp0chv9am().f[2]++;
    const riskAmount =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[23]++, accountBalance * (this.riskParameters.maxRiskPerTrade / 100));
    const priceRisk =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[24]++, Math.abs(entryPrice - stopLossPrice));
    /* istanbul ignore next */
    cov_dp0chv9am().s[25]++;
    if (priceRisk === 0) {
      /* istanbul ignore next */
      cov_dp0chv9am().b[3][0]++;
      cov_dp0chv9am().s[26]++;
      throw new Error('Stop loss price cannot equal entry price');
    } else
    /* istanbul ignore next */
    {
      cov_dp0chv9am().b[3][1]++;
    }
    cov_dp0chv9am().s[27]++;
    return riskAmount / priceRisk;
  }
  /**
   * Apply confidence-based position size adjustment
   * Higher confidence = larger position (up to 150% of base)
   * Lower confidence = smaller position (down to 50% of base)
   */
  applyConfidenceAdjustment(baseSize, confidence) {
    /* istanbul ignore next */
    cov_dp0chv9am().f[3]++;
    cov_dp0chv9am().s[28]++;
    // Handle NaN confidence values
    if (isNaN(confidence)) {
      /* istanbul ignore next */
      cov_dp0chv9am().b[4][0]++;
      cov_dp0chv9am().s[29]++;
      confidence = 50; // Default to neutral confidence
    } else
    /* istanbul ignore next */
    {
      cov_dp0chv9am().b[4][1]++;
    }
    // Normalize confidence to 0-1 range
    const normalizedConfidence =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[30]++, Math.max(0, Math.min(100, confidence)) / 100);
    // Apply confidence multiplier (0.5x to 1.5x)
    const confidenceMultiplier =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[31]++, 0.5 + normalizedConfidence * 1.0);
    /* istanbul ignore next */
    cov_dp0chv9am().s[32]++;
    return baseSize * confidenceMultiplier;
  }
  /**
   * Apply volatility-based position size adjustment
   * Higher volatility = smaller position
   * Lower volatility = larger position
   */
  applyVolatilityAdjustment(baseSize, volatility) {
    /* istanbul ignore next */
    cov_dp0chv9am().f[4]++;
    cov_dp0chv9am().s[33]++;
    // Handle invalid volatility values
    if (
    /* istanbul ignore next */
    (cov_dp0chv9am().b[6][0]++, isNaN(volatility)) ||
    /* istanbul ignore next */
    (cov_dp0chv9am().b[6][1]++, !isFinite(volatility))) {
      /* istanbul ignore next */
      cov_dp0chv9am().b[5][0]++;
      cov_dp0chv9am().s[34]++;
      volatility = 0.2; // Default to moderate volatility
    } else
    /* istanbul ignore next */
    {
      cov_dp0chv9am().b[5][1]++;
    }
    // Volatility adjustment factor (higher volatility reduces position size)
    const volatilityMultiplier =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[35]++, Math.max(0.3, 1 - volatility * this.riskParameters.volatilityAdjustmentFactor));
    /* istanbul ignore next */
    cov_dp0chv9am().s[36]++;
    return baseSize * volatilityMultiplier;
  }
  /**
   * Calculate correlation-based position adjustment
   * Reduces position size if high correlation with existing positions
   */
  async calculateCorrelationAdjustment(symbol, existingPositions) {
    /* istanbul ignore next */
    cov_dp0chv9am().f[5]++;
    cov_dp0chv9am().s[37]++;
    if (existingPositions.length === 0) {
      /* istanbul ignore next */
      cov_dp0chv9am().b[7][0]++;
      cov_dp0chv9am().s[38]++;
      return 1.0; // No adjustment needed
    } else
    /* istanbul ignore next */
    {
      cov_dp0chv9am().b[7][1]++;
    }
    // Calculate correlation with existing positions
    const correlationMatrix =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[39]++, await this.calculateCorrelationMatrix(symbol, existingPositions));
    // Reduce position size based on correlation exposure
    const maxCorrelation =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[40]++, Math.max(...Array.from(correlationMatrix.correlations.values())));
    /* istanbul ignore next */
    cov_dp0chv9am().s[41]++;
    if (maxCorrelation > this.riskParameters.maxCorrelationExposure) {
      /* istanbul ignore next */
      cov_dp0chv9am().b[8][0]++;
      // Reduce position size proportionally to correlation excess
      const correlationExcess =
      /* istanbul ignore next */
      (cov_dp0chv9am().s[42]++, maxCorrelation - this.riskParameters.maxCorrelationExposure);
      /* istanbul ignore next */
      cov_dp0chv9am().s[43]++;
      return Math.max(0.2, 1 - correlationExcess);
    } else
    /* istanbul ignore next */
    {
      cov_dp0chv9am().b[8][1]++;
    }
    cov_dp0chv9am().s[44]++;
    return 1.0;
  }
  /**
   * Calculate correlation matrix between symbols
   */
  async calculateCorrelationMatrix(newSymbol, existingPositions) {
    /* istanbul ignore next */
    cov_dp0chv9am().f[6]++;
    const correlations =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[45]++, new Map());
    // For crypto pairs, use predefined correlation coefficients
    // In production, this would use historical price data
    const cryptoCorrelations =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[46]++, {
      'BTC': {
        'ETH': 0.75,
        'BTC': 1.0
      },
      'ETH': {
        'BTC': 0.75,
        'ETH': 1.0
      }
    });
    /* istanbul ignore next */
    cov_dp0chv9am().s[47]++;
    for (const position of existingPositions) {
      const correlation =
      /* istanbul ignore next */
      (cov_dp0chv9am().s[48]++,
      /* istanbul ignore next */
      (cov_dp0chv9am().b[9][0]++, cryptoCorrelations[newSymbol]?.[position.symbol]) ||
      /* istanbul ignore next */
      (cov_dp0chv9am().b[9][1]++, 0));
      /* istanbul ignore next */
      cov_dp0chv9am().s[49]++;
      correlations.set(`${newSymbol}-${position.symbol}`, correlation);
    }
    const portfolioCorrelationRisk =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[50]++, this.calculatePortfolioCorrelationRisk(correlations));
    const diversificationScore =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[51]++, this.calculateDiversificationScore(correlations));
    /* istanbul ignore next */
    cov_dp0chv9am().s[52]++;
    return {
      correlations,
      portfolioCorrelationRisk,
      diversificationScore,
      recommendations: []
    };
  }
  /**
   * Calculate overall portfolio correlation risk
   */
  calculatePortfolioCorrelationRisk(correlations) {
    /* istanbul ignore next */
    cov_dp0chv9am().f[7]++;
    cov_dp0chv9am().s[53]++;
    if (correlations.size === 0) {
      /* istanbul ignore next */
      cov_dp0chv9am().b[10][0]++;
      cov_dp0chv9am().s[54]++;
      return 0;
    } else
    /* istanbul ignore next */
    {
      cov_dp0chv9am().b[10][1]++;
    }
    const correlationValues =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[55]++, Array.from(correlations.values()));
    const avgCorrelation =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[56]++, correlationValues.reduce((sum, corr) => {
      /* istanbul ignore next */
      cov_dp0chv9am().f[8]++;
      cov_dp0chv9am().s[57]++;
      return sum + Math.abs(corr);
    }, 0) / correlationValues.length);
    /* istanbul ignore next */
    cov_dp0chv9am().s[58]++;
    return avgCorrelation;
  }
  /**
   * Calculate portfolio diversification score
   */
  calculateDiversificationScore(correlations) {
    /* istanbul ignore next */
    cov_dp0chv9am().f[9]++;
    const portfolioRisk =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[59]++, this.calculatePortfolioCorrelationRisk(correlations));
    /* istanbul ignore next */
    cov_dp0chv9am().s[60]++;
    return Math.max(0, 100 - portfolioRisk * 100);
  }
  /**
   * Calculate risk-reward ratio
   */
  calculateRiskRewardRatio(entryPrice, stopLossPrice, takeProfitPrice) {
    /* istanbul ignore next */
    cov_dp0chv9am().f[10]++;
    const risk =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[61]++, Math.abs(entryPrice - stopLossPrice));
    const reward =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[62]++, Math.abs(takeProfitPrice - entryPrice));
    /* istanbul ignore next */
    cov_dp0chv9am().s[63]++;
    if (risk === 0) {
      /* istanbul ignore next */
      cov_dp0chv9am().b[11][0]++;
      cov_dp0chv9am().s[64]++;
      return 0;
    } else
    /* istanbul ignore next */
    {
      cov_dp0chv9am().b[11][1]++;
    }
    cov_dp0chv9am().s[65]++;
    return reward / risk;
  }
  /**
   * Validate position size against risk parameters
   */
  validatePositionSize(positionSize, riskPercentage, riskRewardRatio, request) {
    /* istanbul ignore next */
    cov_dp0chv9am().f[11]++;
    const rejectionReasons =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[66]++, []);
    // Check maximum risk per trade
    /* istanbul ignore next */
    cov_dp0chv9am().s[67]++;
    if (riskPercentage > this.riskParameters.maxRiskPerTrade) {
      /* istanbul ignore next */
      cov_dp0chv9am().b[12][0]++;
      cov_dp0chv9am().s[68]++;
      rejectionReasons.push(`Risk percentage ${riskPercentage.toFixed(2)}% exceeds maximum ${this.riskParameters.maxRiskPerTrade}%`);
    } else
    /* istanbul ignore next */
    {
      cov_dp0chv9am().b[12][1]++;
    }
    // Check minimum risk-reward ratio
    cov_dp0chv9am().s[69]++;
    if (riskRewardRatio < this.riskParameters.minRiskRewardRatio) {
      /* istanbul ignore next */
      cov_dp0chv9am().b[13][0]++;
      cov_dp0chv9am().s[70]++;
      rejectionReasons.push(`Risk-reward ratio ${riskRewardRatio.toFixed(2)} below minimum ${this.riskParameters.minRiskRewardRatio}`);
    } else
    /* istanbul ignore next */
    {
      cov_dp0chv9am().b[13][1]++;
    }
    // Check position size is positive and reasonable
    cov_dp0chv9am().s[71]++;
    if (positionSize <= 0) {
      /* istanbul ignore next */
      cov_dp0chv9am().b[14][0]++;
      cov_dp0chv9am().s[72]++;
      rejectionReasons.push('Position size must be positive');
    } else
    /* istanbul ignore next */
    {
      cov_dp0chv9am().b[14][1]++;
    }
    // Check if position size is too large relative to account (allow up to 100% for crypto)
    const positionValue =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[73]++, positionSize * request.entryPrice);
    const positionPercentage =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[74]++, positionValue / request.accountBalance * 100);
    /* istanbul ignore next */
    cov_dp0chv9am().s[75]++;
    if (positionPercentage > 100) {
      /* istanbul ignore next */
      cov_dp0chv9am().b[15][0]++;
      cov_dp0chv9am().s[76]++;
      rejectionReasons.push(`Position value ${positionPercentage.toFixed(2)}% of account is too large`);
    } else
    /* istanbul ignore next */
    {
      cov_dp0chv9am().b[15][1]++;
    }
    cov_dp0chv9am().s[77]++;
    return {
      approved: rejectionReasons.length === 0,
      rejectionReasons
    };
  }
  /**
   * Update risk parameters
   */
  updateRiskParameters(newParameters) {
    /* istanbul ignore next */
    cov_dp0chv9am().f[12]++;
    cov_dp0chv9am().s[78]++;
    this.riskParameters = {
      ...this.riskParameters,
      ...newParameters
    };
  }
  /**
   * Get current risk parameters
   */
  getRiskParameters() {
    /* istanbul ignore next */
    cov_dp0chv9am().f[13]++;
    cov_dp0chv9am().s[79]++;
    return {
      ...this.riskParameters
    };
  }
  /**
   * Calculate recommended position size for multiple scenarios
   */
  async calculateScenarioAnalysis(baseRequest, scenarios) {
    /* istanbul ignore next */
    cov_dp0chv9am().f[14]++;
    const results =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[80]++, []);
    /* istanbul ignore next */
    cov_dp0chv9am().s[81]++;
    for (const scenario of scenarios) {
      const scenarioRequest =
      /* istanbul ignore next */
      (cov_dp0chv9am().s[82]++, {
        ...baseRequest,
        confidence: scenario.confidence,
        volatility: scenario.volatility
      });
      const result =
      /* istanbul ignore next */
      (cov_dp0chv9am().s[83]++, await this.calculatePositionSize(scenarioRequest));
      /* istanbul ignore next */
      cov_dp0chv9am().s[84]++;
      results.push(result);
    }
    /* istanbul ignore next */
    cov_dp0chv9am().s[85]++;
    return results;
  }
}
/* istanbul ignore next */
cov_dp0chv9am().s[86]++;
exports.PositionSizingEngine = PositionSizingEngine;