8ebe45245e4f82783f67c4148a062762
"use strict";

/**
 * =============================================================================
 * AI CRYPTO TRADING AGENT - SECURE CREDENTIAL MANAGEMENT SERVICE
 * =============================================================================
 *
 * This service manages all sensitive credentials for the AI crypto trading
 * agent, including API keys, secrets, and authentication tokens. It provides
 * secure storage, retrieval, and rotation of credentials with audit logging.
 *
 * CRITICAL SECURITY NOTICE:
 * This service protects credentials that control access to trading capital.
 * Any compromise could result in total loss of funds. All operations are
 * logged and monitored for security analysis.
 *
 * @author AI Crypto Trading System
 * @version 1.0.0
 * @license PROPRIETARY
 * =============================================================================
 */
/* istanbul ignore next */
function cov_gl0onn3sl() {
  var path = "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\credential-manager.ts";
  var hash = "02f8ca51590a73e95f91f6c964f6d2cd0f40a329";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\credential-manager.ts",
    statementMap: {
      "0": {
        start: {
          line: 21,
          column: 0
        },
        end: {
          line: 21,
          column: 62
        }
      },
      "1": {
        start: {
          line: 22,
          column: 0
        },
        end: {
          line: 22,
          column: 88
        }
      },
      "2": {
        start: {
          line: 23,
          column: 29
        },
        end: {
          line: 23,
          column: 69
        }
      },
      "3": {
        start: {
          line: 24,
          column: 22
        },
        end: {
          line: 24,
          column: 55
        }
      },
      "4": {
        start: {
          line: 25,
          column: 17
        },
        end: {
          line: 25,
          column: 49
        }
      },
      "5": {
        start: {
          line: 30,
          column: 0
        },
        end: {
          line: 39,
          column: 69
        }
      },
      "6": {
        start: {
          line: 31,
          column: 4
        },
        end: {
          line: 31,
          column: 42
        }
      },
      "7": {
        start: {
          line: 32,
          column: 4
        },
        end: {
          line: 32,
          column: 48
        }
      },
      "8": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 33,
          column: 56
        }
      },
      "9": {
        start: {
          line: 34,
          column: 4
        },
        end: {
          line: 34,
          column: 48
        }
      },
      "10": {
        start: {
          line: 35,
          column: 4
        },
        end: {
          line: 35,
          column: 56
        }
      },
      "11": {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 36,
          column: 62
        }
      },
      "12": {
        start: {
          line: 37,
          column: 4
        },
        end: {
          line: 37,
          column: 56
        }
      },
      "13": {
        start: {
          line: 38,
          column: 4
        },
        end: {
          line: 38,
          column: 56
        }
      },
      "14": {
        start: {
          line: 46,
          column: 22
        },
        end: {
          line: 46,
          column: 31
        }
      },
      "15": {
        start: {
          line: 48,
          column: 23
        },
        end: {
          line: 48,
          column: 36
        }
      },
      "16": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 51,
          column: 39
        }
      },
      "17": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 53,
          column: 33
        }
      },
      "18": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 71,
          column: 9
        }
      },
      "19": {
        start: {
          line: 61,
          column: 33
        },
        end: {
          line: 61,
          column: 110
        }
      },
      "20": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 66,
          column: 13
        }
      },
      "21": {
        start: {
          line: 64,
          column: 16
        },
        end: {
          line: 64,
          column: 131
        }
      },
      "22": {
        start: {
          line: 65,
          column: 16
        },
        end: {
          line: 65,
          column: 83
        }
      },
      "23": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 83
        }
      },
      "24": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 72
        }
      },
      "25": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 129,
          column: 9
        }
      },
      "26": {
        start: {
          line: 85,
          column: 33
        },
        end: {
          line: 85,
          column: 73
        }
      },
      "27": {
        start: {
          line: 87,
          column: 35
        },
        end: {
          line: 87,
          column: 112
        }
      },
      "28": {
        start: {
          line: 88,
          column: 30
        },
        end: {
          line: 88,
          column: 77
        }
      },
      "29": {
        start: {
          line: 88,
          column: 55
        },
        end: {
          line: 88,
          column: 76
        }
      },
      "30": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 91,
          column: 13
        }
      },
      "31": {
        start: {
          line: 90,
          column: 16
        },
        end: {
          line: 90,
          column: 77
        }
      },
      "32": {
        start: {
          line: 93,
          column: 34
        },
        end: {
          line: 93,
          column: 103
        }
      },
      "33": {
        start: {
          line: 95,
          column: 36
        },
        end: {
          line: 103,
          column: 13
        }
      },
      "34": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 105,
          column: 58
        }
      },
      "35": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 112,
          column: 15
        }
      },
      "36": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 123,
          column: 15
        }
      },
      "37": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 124,
          column: 32
        }
      },
      "38": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 127,
          column: 74
        }
      },
      "39": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 128,
          column: 57
        }
      },
      "40": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 170,
          column: 9
        }
      },
      "41": {
        start: {
          line: 141,
          column: 27
        },
        end: {
          line: 141,
          column: 65
        }
      },
      "42": {
        start: {
          line: 142,
          column: 12
        },
        end: {
          line: 144,
          column: 13
        }
      },
      "43": {
        start: {
          line: 143,
          column: 16
        },
        end: {
          line: 143,
          column: 35
        }
      },
      "44": {
        start: {
          line: 146,
          column: 36
        },
        end: {
          line: 146,
          column: 75
        }
      },
      "45": {
        start: {
          line: 147,
          column: 12
        },
        end: {
          line: 149,
          column: 13
        }
      },
      "46": {
        start: {
          line: 148,
          column: 16
        },
        end: {
          line: 148,
          column: 68
        }
      },
      "47": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 153,
          column: 13
        }
      },
      "48": {
        start: {
          line: 152,
          column: 16
        },
        end: {
          line: 152,
          column: 58
        }
      },
      "49": {
        start: {
          line: 155,
          column: 34
        },
        end: {
          line: 155,
          column: 128
        }
      },
      "50": {
        start: {
          line: 157,
          column: 12
        },
        end: {
          line: 157,
          column: 41
        }
      },
      "51": {
        start: {
          line: 158,
          column: 12
        },
        end: {
          line: 158,
          column: 54
        }
      },
      "52": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 159,
          column: 57
        }
      },
      "53": {
        start: {
          line: 161,
          column: 12
        },
        end: {
          line: 164,
          column: 15
        }
      },
      "54": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 165,
          column: 33
        }
      },
      "55": {
        start: {
          line: 168,
          column: 12
        },
        end: {
          line: 168,
          column: 77
        }
      },
      "56": {
        start: {
          line: 169,
          column: 12
        },
        end: {
          line: 169,
          column: 59
        }
      },
      "57": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 201,
          column: 9
        }
      },
      "58": {
        start: {
          line: 181,
          column: 27
        },
        end: {
          line: 181,
          column: 54
        }
      },
      "59": {
        start: {
          line: 182,
          column: 30
        },
        end: {
          line: 182,
          column: 60
        }
      },
      "60": {
        start: {
          line: 183,
          column: 31
        },
        end: {
          line: 183,
          column: 65
        }
      },
      "61": {
        start: {
          line: 184,
          column: 12
        },
        end: {
          line: 186,
          column: 13
        }
      },
      "62": {
        start: {
          line: 185,
          column: 16
        },
        end: {
          line: 185,
          column: 74
        }
      },
      "63": {
        start: {
          line: 188,
          column: 12
        },
        end: {
          line: 191,
          column: 15
        }
      },
      "64": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 196,
          column: 14
        }
      },
      "65": {
        start: {
          line: 199,
          column: 12
        },
        end: {
          line: 199,
          column: 81
        }
      },
      "66": {
        start: {
          line: 200,
          column: 12
        },
        end: {
          line: 200,
          column: 67
        }
      },
      "67": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 236,
          column: 9
        }
      },
      "68": {
        start: {
          line: 213,
          column: 38
        },
        end: {
          line: 213,
          column: 77
        }
      },
      "69": {
        start: {
          line: 214,
          column: 12
        },
        end: {
          line: 216,
          column: 13
        }
      },
      "70": {
        start: {
          line: 215,
          column: 16
        },
        end: {
          line: 215,
          column: 56
        }
      },
      "71": {
        start: {
          line: 218,
          column: 12
        },
        end: {
          line: 218,
          column: 47
        }
      },
      "72": {
        start: {
          line: 219,
          column: 12
        },
        end: {
          line: 219,
          column: 59
        }
      },
      "73": {
        start: {
          line: 221,
          column: 12
        },
        end: {
          line: 221,
          column: 54
        }
      },
      "74": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 228,
          column: 15
        }
      },
      "75": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 231,
          column: 32
        }
      },
      "76": {
        start: {
          line: 234,
          column: 12
        },
        end: {
          line: 234,
          column: 75
        }
      },
      "77": {
        start: {
          line: 235,
          column: 12
        },
        end: {
          line: 235,
          column: 58
        }
      },
      "78": {
        start: {
          line: 247,
          column: 26
        },
        end: {
          line: 247,
          column: 49
        }
      },
      "79": {
        start: {
          line: 248,
          column: 23
        },
        end: {
          line: 248,
          column: 62
        }
      },
      "80": {
        start: {
          line: 249,
          column: 8
        },
        end: {
          line: 249,
          column: 59
        }
      },
      "81": {
        start: {
          line: 260,
          column: 8
        },
        end: {
          line: 262,
          column: 11
        }
      },
      "82": {
        start: {
          line: 274,
          column: 8
        },
        end: {
          line: 274,
          column: 20
        }
      },
      "83": {
        start: {
          line: 285,
          column: 8
        },
        end: {
          line: 287,
          column: 11
        }
      },
      "84": {
        start: {
          line: 294,
          column: 8
        },
        end: {
          line: 301,
          column: 18
        }
      },
      "85": {
        start: {
          line: 295,
          column: 24
        },
        end: {
          line: 295,
          column: 34
        }
      },
      "86": {
        start: {
          line: 296,
          column: 12
        },
        end: {
          line: 300,
          column: 13
        }
      },
      "87": {
        start: {
          line: 297,
          column: 16
        },
        end: {
          line: 299,
          column: 17
        }
      },
      "88": {
        start: {
          line: 298,
          column: 20
        },
        end: {
          line: 298,
          column: 53
        }
      },
      "89": {
        start: {
          line: 310,
          column: 8
        },
        end: {
          line: 313,
          column: 10
        }
      },
      "90": {
        start: {
          line: 316,
          column: 0
        },
        end: {
          line: 316,
          column: 46
        }
      },
      "91": {
        start: {
          line: 318,
          column: 0
        },
        end: {
          line: 318,
          column: 52
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 30,
            column: 1
          },
          end: {
            line: 30,
            column: 2
          }
        },
        loc: {
          start: {
            line: 30,
            column: 27
          },
          end: {
            line: 39,
            column: 1
          }
        },
        line: 30
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 49,
            column: 4
          },
          end: {
            line: 49,
            column: 5
          }
        },
        loc: {
          start: {
            line: 49,
            column: 18
          },
          end: {
            line: 54,
            column: 5
          }
        },
        line: 49
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 58,
            column: 4
          },
          end: {
            line: 58,
            column: 5
          }
        },
        loc: {
          start: {
            line: 58,
            column: 36
          },
          end: {
            line: 72,
            column: 5
          }
        },
        line: 58
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 82,
            column: 4
          },
          end: {
            line: 82,
            column: 5
          }
        },
        loc: {
          start: {
            line: 82,
            column: 47
          },
          end: {
            line: 130,
            column: 5
          }
        },
        line: 82
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 88,
            column: 50
          },
          end: {
            line: 88,
            column: 51
          }
        },
        loc: {
          start: {
            line: 88,
            column: 55
          },
          end: {
            line: 88,
            column: 76
          }
        },
        line: 88
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 138,
            column: 4
          },
          end: {
            line: 138,
            column: 5
          }
        },
        loc: {
          start: {
            line: 138,
            column: 38
          },
          end: {
            line: 171,
            column: 5
          }
        },
        line: 138
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 178,
            column: 4
          },
          end: {
            line: 178,
            column: 5
          }
        },
        loc: {
          start: {
            line: 178,
            column: 33
          },
          end: {
            line: 202,
            column: 5
          }
        },
        line: 178
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 210,
            column: 4
          },
          end: {
            line: 210,
            column: 5
          }
        },
        loc: {
          start: {
            line: 210,
            column: 41
          },
          end: {
            line: 237,
            column: 5
          }
        },
        line: 210
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 246,
            column: 4
          },
          end: {
            line: 246,
            column: 5
          }
        },
        loc: {
          start: {
            line: 246,
            column: 40
          },
          end: {
            line: 250,
            column: 5
          }
        },
        line: 246
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 257,
            column: 4
          },
          end: {
            line: 257,
            column: 5
          }
        },
        loc: {
          start: {
            line: 257,
            column: 45
          },
          end: {
            line: 263,
            column: 5
          }
        },
        line: 257
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 271,
            column: 4
          },
          end: {
            line: 271,
            column: 5
          }
        },
        loc: {
          start: {
            line: 271,
            column: 39
          },
          end: {
            line: 275,
            column: 5
          }
        },
        line: 271
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 282,
            column: 4
          },
          end: {
            line: 282,
            column: 5
          }
        },
        loc: {
          start: {
            line: 282,
            column: 44
          },
          end: {
            line: 288,
            column: 5
          }
        },
        line: 282
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 293,
            column: 4
          },
          end: {
            line: 293,
            column: 5
          }
        },
        loc: {
          start: {
            line: 293,
            column: 24
          },
          end: {
            line: 302,
            column: 5
          }
        },
        line: 293
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 294,
            column: 20
          },
          end: {
            line: 294,
            column: 21
          }
        },
        loc: {
          start: {
            line: 294,
            column: 26
          },
          end: {
            line: 301,
            column: 9
          }
        },
        line: 294
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 309,
            column: 4
          },
          end: {
            line: 309,
            column: 5
          }
        },
        loc: {
          start: {
            line: 309,
            column: 16
          },
          end: {
            line: 314,
            column: 5
          }
        },
        line: 309
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 39,
            column: 3
          },
          end: {
            line: 39,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 39,
            column: 3
          },
          end: {
            line: 39,
            column: 17
          }
        }, {
          start: {
            line: 39,
            column: 22
          },
          end: {
            line: 39,
            column: 66
          }
        }],
        line: 39
      },
      "1": {
        loc: {
          start: {
            line: 62,
            column: 12
          },
          end: {
            line: 66,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 62,
            column: 12
          },
          end: {
            line: 66,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 62
      },
      "2": {
        loc: {
          start: {
            line: 89,
            column: 12
          },
          end: {
            line: 91,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 89,
            column: 12
          },
          end: {
            line: 91,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 89
      },
      "3": {
        loc: {
          start: {
            line: 142,
            column: 12
          },
          end: {
            line: 144,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 142,
            column: 12
          },
          end: {
            line: 144,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 142
      },
      "4": {
        loc: {
          start: {
            line: 142,
            column: 16
          },
          end: {
            line: 142,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 142,
            column: 16
          },
          end: {
            line: 142,
            column: 22
          }
        }, {
          start: {
            line: 142,
            column: 26
          },
          end: {
            line: 142,
            column: 55
          }
        }],
        line: 142
      },
      "5": {
        loc: {
          start: {
            line: 147,
            column: 12
          },
          end: {
            line: 149,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 147,
            column: 12
          },
          end: {
            line: 149,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 147
      },
      "6": {
        loc: {
          start: {
            line: 147,
            column: 16
          },
          end: {
            line: 147,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 147,
            column: 16
          },
          end: {
            line: 147,
            column: 32
          }
        }, {
          start: {
            line: 147,
            column: 36
          },
          end: {
            line: 147,
            column: 61
          }
        }],
        line: 147
      },
      "7": {
        loc: {
          start: {
            line: 151,
            column: 12
          },
          end: {
            line: 153,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 151,
            column: 12
          },
          end: {
            line: 153,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 151
      },
      "8": {
        loc: {
          start: {
            line: 151,
            column: 16
          },
          end: {
            line: 151,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 151,
            column: 16
          },
          end: {
            line: 151,
            column: 41
          }
        }, {
          start: {
            line: 151,
            column: 45
          },
          end: {
            line: 151,
            column: 83
          }
        }],
        line: 151
      },
      "9": {
        loc: {
          start: {
            line: 184,
            column: 12
          },
          end: {
            line: 186,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 184,
            column: 12
          },
          end: {
            line: 186,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 184
      },
      "10": {
        loc: {
          start: {
            line: 184,
            column: 16
          },
          end: {
            line: 184,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 184,
            column: 16
          },
          end: {
            line: 184,
            column: 23
          }
        }, {
          start: {
            line: 184,
            column: 27
          },
          end: {
            line: 184,
            column: 37
          }
        }, {
          start: {
            line: 184,
            column: 41
          },
          end: {
            line: 184,
            column: 52
          }
        }],
        line: 184
      },
      "11": {
        loc: {
          start: {
            line: 214,
            column: 12
          },
          end: {
            line: 216,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 214,
            column: 12
          },
          end: {
            line: 216,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 214
      },
      "12": {
        loc: {
          start: {
            line: 297,
            column: 16
          },
          end: {
            line: 299,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 297,
            column: 16
          },
          end: {
            line: 299,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 297
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\credential-manager.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\credential-manager.ts"],
      sourcesContent: ["/**\r\n * =============================================================================\r\n * AI CRYPTO TRADING AGENT - SECURE CREDENTIAL MANAGEMENT SERVICE\r\n * =============================================================================\r\n * \r\n * This service manages all sensitive credentials for the AI crypto trading\r\n * agent, including API keys, secrets, and authentication tokens. It provides\r\n * secure storage, retrieval, and rotation of credentials with audit logging.\r\n * \r\n * CRITICAL SECURITY NOTICE:\r\n * This service protects credentials that control access to trading capital.\r\n * Any compromise could result in total loss of funds. All operations are\r\n * logged and monitored for security analysis.\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport { encryptionService, EncryptedData } from '@/security/encryption-service';\r\nimport { keyManager, KeyType } from '@/security/key-manager';\r\nimport { logger } from '@/core/logging/logger';\r\n\r\n/**\r\n * Interface for credential entry\r\n * Defines structure for stored credentials\r\n */\r\nexport interface CredentialEntry {\r\n  /** Unique credential identifier */\r\n  credentialId: string;\r\n  /** Service or system the credential is for */\r\n  service: string;\r\n  /** Type of credential */\r\n  type: CredentialType;\r\n  /** Encrypted credential data */\r\n  encryptedData: EncryptedData;\r\n  /** Creation timestamp */\r\n  createdAt: Date;\r\n  /** Last access timestamp */\r\n  lastAccessed?: Date;\r\n  /** Expiration timestamp */\r\n  expiresAt?: Date;\r\n  /** Whether credential is active */\r\n  isActive: boolean;\r\n  /** Usage counter */\r\n  usageCount: number;\r\n}\r\n\r\n/**\r\n * Enumeration of credential types\r\n */\r\nexport enum CredentialType {\r\n  API_KEY = 'api_key',\r\n  API_SECRET = 'api_secret',\r\n  API_PASSPHRASE = 'api_passphrase',\r\n  JWT_SECRET = 'jwt_secret',\r\n  SESSION_SECRET = 'session_secret',\r\n  DATABASE_PASSWORD = 'database_password',\r\n  ENCRYPTION_KEY = 'encryption_key',\r\n  WEBHOOK_SECRET = 'webhook_secret'\r\n}\r\n\r\n/**\r\n * Interface for Gate.io API credentials\r\n */\r\nexport interface GateIOCredentials {\r\n  apiKey: string;\r\n  apiSecret: string;\r\n  passphrase: string;\r\n}\r\n\r\n/**\r\n * Secure credential management service\r\n * Handles all sensitive credential operations with encryption and auditing\r\n */\r\nexport class CredentialManager {\r\n  /** In-memory credential cache */\r\n  private credentialCache: Map<string, { data: any; expiresAt: number }> = new Map();\r\n  \r\n  /** Cache TTL in milliseconds (5 minutes) */\r\n  private static readonly CACHE_TTL = 5 * 60 * 1000;\r\n\r\n  constructor() {\r\n    // Initialize credential encryption key\r\n    this.initializeCredentialKey();\r\n    \r\n    // Start cache cleanup\r\n    this.startCacheCleanup();\r\n  }\r\n\r\n  /**\r\n   * Initialize or retrieve credential encryption key\r\n   */\r\n  private async initializeCredentialKey(): Promise<void> {\r\n    try {\r\n      // Try to get existing credential key\r\n      const existingKeys = await keyManager.listKeys(KeyType.API_ENCRYPTION);\r\n      \r\n      if (existingKeys.length === 0) {\r\n        // Generate new credential encryption key\r\n        await keyManager.generateKey(\r\n          KeyType.API_ENCRYPTION,\r\n          'API credential encryption',\r\n          256\r\n        );\r\n        logger.info('\uD83D\uDD10 New credential encryption key generated');\r\n      }\r\n      \r\n    } catch (error) {\r\n      logger.error('\u274C Failed to initialize credential key:', error);\r\n      throw new Error('Credential manager initialization failed');\r\n    }\r\n  }  /**\r\n\r\n   * Store credentials securely\r\n   * Encrypts and stores credentials with metadata\r\n   * \r\n   * @param service - Service name (e.g., 'gate.io')\r\n   * @param type - Type of credential\r\n   * @param data - Credential data to store\r\n   * @returns Promise<string> Credential ID\r\n   */\r\n  public async storeCredential(\r\n    service: string,\r\n    type: CredentialType,\r\n    data: any\r\n  ): Promise<string> {\r\n    try {\r\n      // Generate unique credential ID\r\n      const credentialId = this.generateCredentialId(service, type);\r\n      \r\n      // Get credential encryption key\r\n      const credentialKeys = await keyManager.listKeys(KeyType.API_ENCRYPTION);\r\n      const activeKey = credentialKeys.find(k => k.status === 'active');\r\n      \r\n      if (!activeKey) {\r\n        throw new Error('No active credential encryption key found');\r\n      }\r\n      \r\n      // Encrypt credential data\r\n      const encryptedData = await encryptionService.encryptCredentials(data);\r\n      \r\n      // Create credential entry\r\n      const credentialEntry: CredentialEntry = {\r\n        credentialId,\r\n        service,\r\n        type,\r\n        encryptedData,\r\n        createdAt: new Date(),\r\n        isActive: true,\r\n        usageCount: 0\r\n      };\r\n      \r\n      // Store credential (implementation would use secure database)\r\n      await this.persistCredential(credentialEntry);\r\n      \r\n      // Log credential storage (without sensitive data)\r\n      logger.security('CREDENTIAL_STORED', 'Credential stored securely', {\r\n        credentialId,\r\n        service,\r\n        type,\r\n        classification: 'RESTRICTED'\r\n      });\r\n      \r\n      // Audit log\r\n      logger.audit({\r\n        auditId: `cred_store_${credentialId}`,\r\n        eventType: 'CREDENTIAL_STORAGE',\r\n        actor: 'SYSTEM',\r\n        resource: `CREDENTIAL:${credentialId}`,\r\n        action: 'STORE',\r\n        result: 'SUCCESS',\r\n        timestamp: new Date(),\r\n        auditData: { service, type }\r\n      });\r\n      \r\n      return credentialId;\r\n      \r\n    } catch (error) {\r\n      logger.error('\u274C Failed to store credential:', error);\r\n      throw new Error('Credential storage failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieve credentials securely\r\n   * Decrypts and returns credential data\r\n   * \r\n   * @param credentialId - Credential identifier\r\n   * @returns Promise<any> Decrypted credential data\r\n   */\r\n  public async getCredential(credentialId: string): Promise<any> {\r\n    try {\r\n      // Check cache first\r\n      const cached = this.credentialCache.get(credentialId);\r\n      if (cached && cached.expiresAt > Date.now()) {\r\n        return cached.data;\r\n      }\r\n      \r\n      // Load credential from storage\r\n      const credentialEntry = await this.loadCredential(credentialId);\r\n      if (!credentialEntry || !credentialEntry.isActive) {\r\n        throw new Error('Credential not found or inactive');\r\n      }\r\n      \r\n      // Check expiration\r\n      if (credentialEntry.expiresAt && credentialEntry.expiresAt < new Date()) {\r\n        throw new Error('Credential has expired');\r\n      }\r\n      \r\n      // Decrypt credential data\r\n      const decryptedData = await encryptionService.decryptCredentials(\r\n        credentialEntry.encryptedData\r\n      );\r\n      \r\n      // Update usage statistics\r\n      credentialEntry.usageCount++;\r\n      credentialEntry.lastAccessed = new Date();\r\n      await this.updateCredential(credentialEntry);\r\n      \r\n      // Cache for performance\r\n      this.credentialCache.set(credentialId, {\r\n        data: decryptedData,\r\n        expiresAt: Date.now() + CredentialManager.CACHE_TTL\r\n      });\r\n      \r\n      return decryptedData;\r\n      \r\n    } catch (error) {\r\n      logger.error('\u274C Failed to retrieve credential:', error);\r\n      throw new Error('Credential retrieval failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get Gate.io API credentials\r\n   * Convenience method for retrieving trading API credentials\r\n   * \r\n   * @returns Promise<GateIOCredentials> Gate.io API credentials\r\n   */\r\n  public async getGateIOCredentials(): Promise<GateIOCredentials> {\r\n    try {\r\n      // Get credentials from environment or storage\r\n      const apiKey = process.env.GATE_IO_API_KEY;\r\n      const apiSecret = process.env.GATE_IO_API_SECRET;\r\n      const passphrase = process.env.GATE_IO_API_PASSPHRASE;\r\n      \r\n      if (!apiKey || !apiSecret || !passphrase) {\r\n        throw new Error('Gate.io API credentials not configured');\r\n      }\r\n      \r\n      // Log credential access (without sensitive data)\r\n      logger.security('CREDENTIAL_ACCESSED', 'Gate.io credentials accessed', {\r\n        service: 'gate.io',\r\n        classification: 'RESTRICTED'\r\n      });\r\n      \r\n      return {\r\n        apiKey,\r\n        apiSecret,\r\n        passphrase\r\n      };\r\n      \r\n    } catch (error) {\r\n      logger.error('\u274C Failed to get Gate.io credentials:', error);\r\n      throw new Error('Gate.io credential retrieval failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Rotate credentials\r\n   * Generates new credentials and marks old ones as deprecated\r\n   * \r\n   * @param credentialId - Credential to rotate\r\n   * @returns Promise<string> New credential ID\r\n   */\r\n  public async rotateCredential(credentialId: string): Promise<string> {\r\n    try {\r\n      // Load current credential\r\n      const currentCredential = await this.loadCredential(credentialId);\r\n      if (!currentCredential) {\r\n        throw new Error('Credential not found');\r\n      }\r\n      \r\n      // Mark current credential as deprecated\r\n      currentCredential.isActive = false;\r\n      await this.updateCredential(currentCredential);\r\n      \r\n      // Remove from cache\r\n      this.credentialCache.delete(credentialId);\r\n      \r\n      // Log credential rotation\r\n      logger.security('CREDENTIAL_ROTATED', 'Credential rotated', {\r\n        oldCredentialId: credentialId,\r\n        service: currentCredential.service,\r\n        type: currentCredential.type,\r\n        classification: 'RESTRICTED'\r\n      });\r\n      \r\n      // Note: New credential would need to be provided by external system\r\n      // This method marks the old one as inactive\r\n      \r\n      return credentialId; // Would return new credential ID in full implementation\r\n      \r\n    } catch (error) {\r\n      logger.error('\u274C Failed to rotate credential:', error);\r\n      throw new Error('Credential rotation failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate unique credential ID\r\n   * Creates identifier for credential storage\r\n   * \r\n   * @param service - Service name\r\n   * @param type - Credential type\r\n   * @returns string Unique credential ID\r\n   */\r\n  private generateCredentialId(service: string, type: CredentialType): string {\r\n    const timestamp = Date.now().toString(36);\r\n    const random = Math.random().toString(36).substring(2);\r\n    return `${service}_${type}_${timestamp}_${random}`;\r\n  }\r\n\r\n  /**\r\n   * Persist credential to secure storage\r\n   * Stores credential entry securely\r\n   * \r\n   * @param credentialEntry - Credential entry to store\r\n   */\r\n  private async persistCredential(credentialEntry: CredentialEntry): Promise<void> {\r\n    // Implementation would store in secure database\r\n    // For now, this is a placeholder\r\n    logger.debug('Credential persisted to secure storage', {\r\n      credentialId: credentialEntry.credentialId\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Load credential from secure storage\r\n   * Retrieves credential entry from storage\r\n   * \r\n   * @param credentialId - Credential identifier\r\n   * @returns Promise<CredentialEntry | null> Credential entry or null\r\n   */\r\n  private async loadCredential(credentialId: string): Promise<CredentialEntry | null> {\r\n    // Implementation would load from secure database\r\n    // For now, this is a placeholder\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Update credential in storage\r\n   * Updates credential entry in secure storage\r\n   * \r\n   * @param credentialEntry - Updated credential entry\r\n   */\r\n  private async updateCredential(credentialEntry: CredentialEntry): Promise<void> {\r\n    // Implementation would update in secure database\r\n    // For now, this is a placeholder\r\n    logger.debug('Credential updated in secure storage', {\r\n      credentialId: credentialEntry.credentialId\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Start cache cleanup process\r\n   * Removes expired entries from credential cache\r\n   */\r\n  private startCacheCleanup(): void {\r\n    setInterval(() => {\r\n      const now = Date.now();\r\n      for (const [key, value] of this.credentialCache.entries()) {\r\n        if (value.expiresAt <= now) {\r\n          this.credentialCache.delete(key);\r\n        }\r\n      }\r\n    }, 60000); // Clean up every minute\r\n  }\r\n\r\n  /**\r\n   * Get credential manager status\r\n   * Returns current status for monitoring\r\n   * \r\n   * @returns Object containing status information\r\n   */\r\n  public getStatus(): {\r\n    cacheSize: number;\r\n    timestamp: number;\r\n  } {\r\n    return {\r\n      cacheSize: this.credentialCache.size,\r\n      timestamp: Date.now()\r\n    };\r\n  }\r\n}\r\n\r\n// Create and export singleton instance\r\nexport const credentialManager = new CredentialManager();\r\n\r\n// =============================================================================\r\n// CREDENTIAL SECURITY NOTES\r\n// =============================================================================\r\n// 1. All credentials are encrypted before storage\r\n// 2. Credentials are cached temporarily for performance\r\n// 3. All credential access is logged and audited\r\n// 4. Expired credentials are automatically rejected\r\n// 5. Credential rotation invalidates old credentials\r\n// 6. Cache is automatically cleaned of expired entries\r\n// 7. Never log actual credential values\r\n// 8. Use environment variables for initial credential loading\r\n// =============================================================================\r\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "02f8ca51590a73e95f91f6c964f6d2cd0f40a329"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_gl0onn3sl = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_gl0onn3sl();
cov_gl0onn3sl().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_gl0onn3sl().s[1]++;
exports.credentialManager = exports.CredentialManager = exports.CredentialType = void 0;
const encryption_service_1 =
/* istanbul ignore next */
(cov_gl0onn3sl().s[2]++, require("@/security/encryption-service"));
const key_manager_1 =
/* istanbul ignore next */
(cov_gl0onn3sl().s[3]++, require("@/security/key-manager"));
const logger_1 =
/* istanbul ignore next */
(cov_gl0onn3sl().s[4]++, require("@/core/logging/logger"));
/**
 * Enumeration of credential types
 */
var CredentialType;
/* istanbul ignore next */
cov_gl0onn3sl().s[5]++;
(function (CredentialType) {
  /* istanbul ignore next */
  cov_gl0onn3sl().f[0]++;
  cov_gl0onn3sl().s[6]++;
  CredentialType["API_KEY"] = "api_key";
  /* istanbul ignore next */
  cov_gl0onn3sl().s[7]++;
  CredentialType["API_SECRET"] = "api_secret";
  /* istanbul ignore next */
  cov_gl0onn3sl().s[8]++;
  CredentialType["API_PASSPHRASE"] = "api_passphrase";
  /* istanbul ignore next */
  cov_gl0onn3sl().s[9]++;
  CredentialType["JWT_SECRET"] = "jwt_secret";
  /* istanbul ignore next */
  cov_gl0onn3sl().s[10]++;
  CredentialType["SESSION_SECRET"] = "session_secret";
  /* istanbul ignore next */
  cov_gl0onn3sl().s[11]++;
  CredentialType["DATABASE_PASSWORD"] = "database_password";
  /* istanbul ignore next */
  cov_gl0onn3sl().s[12]++;
  CredentialType["ENCRYPTION_KEY"] = "encryption_key";
  /* istanbul ignore next */
  cov_gl0onn3sl().s[13]++;
  CredentialType["WEBHOOK_SECRET"] = "webhook_secret";
})(
/* istanbul ignore next */
(cov_gl0onn3sl().b[0][0]++, CredentialType) ||
/* istanbul ignore next */
(cov_gl0onn3sl().b[0][1]++, exports.CredentialType = CredentialType = {}));
/**
 * Secure credential management service
 * Handles all sensitive credential operations with encryption and auditing
 */
class CredentialManager {
  /** In-memory credential cache */
  credentialCache =
  /* istanbul ignore next */
  (cov_gl0onn3sl().s[14]++, new Map());
  /** Cache TTL in milliseconds (5 minutes) */
  static CACHE_TTL =
  /* istanbul ignore next */
  (cov_gl0onn3sl().s[15]++, 5 * 60 * 1000);
  constructor() {
    /* istanbul ignore next */
    cov_gl0onn3sl().f[1]++;
    cov_gl0onn3sl().s[16]++;
    // Initialize credential encryption key
    this.initializeCredentialKey();
    // Start cache cleanup
    /* istanbul ignore next */
    cov_gl0onn3sl().s[17]++;
    this.startCacheCleanup();
  }
  /**
   * Initialize or retrieve credential encryption key
   */
  async initializeCredentialKey() {
    /* istanbul ignore next */
    cov_gl0onn3sl().f[2]++;
    cov_gl0onn3sl().s[18]++;
    try {
      // Try to get existing credential key
      const existingKeys =
      /* istanbul ignore next */
      (cov_gl0onn3sl().s[19]++, await key_manager_1.keyManager.listKeys(key_manager_1.KeyType.API_ENCRYPTION));
      /* istanbul ignore next */
      cov_gl0onn3sl().s[20]++;
      if (existingKeys.length === 0) {
        /* istanbul ignore next */
        cov_gl0onn3sl().b[1][0]++;
        cov_gl0onn3sl().s[21]++;
        // Generate new credential encryption key
        await key_manager_1.keyManager.generateKey(key_manager_1.KeyType.API_ENCRYPTION, 'API credential encryption', 256);
        /* istanbul ignore next */
        cov_gl0onn3sl().s[22]++;
        logger_1.logger.info('🔐 New credential encryption key generated');
      } else
      /* istanbul ignore next */
      {
        cov_gl0onn3sl().b[1][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_gl0onn3sl().s[23]++;
      logger_1.logger.error('❌ Failed to initialize credential key:', error);
      /* istanbul ignore next */
      cov_gl0onn3sl().s[24]++;
      throw new Error('Credential manager initialization failed');
    }
  } /**
      * Store credentials securely
    * Encrypts and stores credentials with metadata
    *
    * @param service - Service name (e.g., 'gate.io')
    * @param type - Type of credential
    * @param data - Credential data to store
    * @returns Promise<string> Credential ID
    */
  async storeCredential(service, type, data) {
    /* istanbul ignore next */
    cov_gl0onn3sl().f[3]++;
    cov_gl0onn3sl().s[25]++;
    try {
      // Generate unique credential ID
      const credentialId =
      /* istanbul ignore next */
      (cov_gl0onn3sl().s[26]++, this.generateCredentialId(service, type));
      // Get credential encryption key
      const credentialKeys =
      /* istanbul ignore next */
      (cov_gl0onn3sl().s[27]++, await key_manager_1.keyManager.listKeys(key_manager_1.KeyType.API_ENCRYPTION));
      const activeKey =
      /* istanbul ignore next */
      (cov_gl0onn3sl().s[28]++, credentialKeys.find(k => {
        /* istanbul ignore next */
        cov_gl0onn3sl().f[4]++;
        cov_gl0onn3sl().s[29]++;
        return k.status === 'active';
      }));
      /* istanbul ignore next */
      cov_gl0onn3sl().s[30]++;
      if (!activeKey) {
        /* istanbul ignore next */
        cov_gl0onn3sl().b[2][0]++;
        cov_gl0onn3sl().s[31]++;
        throw new Error('No active credential encryption key found');
      } else
      /* istanbul ignore next */
      {
        cov_gl0onn3sl().b[2][1]++;
      }
      // Encrypt credential data
      const encryptedData =
      /* istanbul ignore next */
      (cov_gl0onn3sl().s[32]++, await encryption_service_1.encryptionService.encryptCredentials(data));
      // Create credential entry
      const credentialEntry =
      /* istanbul ignore next */
      (cov_gl0onn3sl().s[33]++, {
        credentialId,
        service,
        type,
        encryptedData,
        createdAt: new Date(),
        isActive: true,
        usageCount: 0
      });
      // Store credential (implementation would use secure database)
      /* istanbul ignore next */
      cov_gl0onn3sl().s[34]++;
      await this.persistCredential(credentialEntry);
      // Log credential storage (without sensitive data)
      /* istanbul ignore next */
      cov_gl0onn3sl().s[35]++;
      logger_1.logger.security('CREDENTIAL_STORED', 'Credential stored securely', {
        credentialId,
        service,
        type,
        classification: 'RESTRICTED'
      });
      // Audit log
      /* istanbul ignore next */
      cov_gl0onn3sl().s[36]++;
      logger_1.logger.audit({
        auditId: `cred_store_${credentialId}`,
        eventType: 'CREDENTIAL_STORAGE',
        actor: 'SYSTEM',
        resource: `CREDENTIAL:${credentialId}`,
        action: 'STORE',
        result: 'SUCCESS',
        timestamp: new Date(),
        auditData: {
          service,
          type
        }
      });
      /* istanbul ignore next */
      cov_gl0onn3sl().s[37]++;
      return credentialId;
    } catch (error) {
      /* istanbul ignore next */
      cov_gl0onn3sl().s[38]++;
      logger_1.logger.error('❌ Failed to store credential:', error);
      /* istanbul ignore next */
      cov_gl0onn3sl().s[39]++;
      throw new Error('Credential storage failed');
    }
  }
  /**
   * Retrieve credentials securely
   * Decrypts and returns credential data
   *
   * @param credentialId - Credential identifier
   * @returns Promise<any> Decrypted credential data
   */
  async getCredential(credentialId) {
    /* istanbul ignore next */
    cov_gl0onn3sl().f[5]++;
    cov_gl0onn3sl().s[40]++;
    try {
      // Check cache first
      const cached =
      /* istanbul ignore next */
      (cov_gl0onn3sl().s[41]++, this.credentialCache.get(credentialId));
      /* istanbul ignore next */
      cov_gl0onn3sl().s[42]++;
      if (
      /* istanbul ignore next */
      (cov_gl0onn3sl().b[4][0]++, cached) &&
      /* istanbul ignore next */
      (cov_gl0onn3sl().b[4][1]++, cached.expiresAt > Date.now())) {
        /* istanbul ignore next */
        cov_gl0onn3sl().b[3][0]++;
        cov_gl0onn3sl().s[43]++;
        return cached.data;
      } else
      /* istanbul ignore next */
      {
        cov_gl0onn3sl().b[3][1]++;
      }
      // Load credential from storage
      const credentialEntry =
      /* istanbul ignore next */
      (cov_gl0onn3sl().s[44]++, await this.loadCredential(credentialId));
      /* istanbul ignore next */
      cov_gl0onn3sl().s[45]++;
      if (
      /* istanbul ignore next */
      (cov_gl0onn3sl().b[6][0]++, !credentialEntry) ||
      /* istanbul ignore next */
      (cov_gl0onn3sl().b[6][1]++, !credentialEntry.isActive)) {
        /* istanbul ignore next */
        cov_gl0onn3sl().b[5][0]++;
        cov_gl0onn3sl().s[46]++;
        throw new Error('Credential not found or inactive');
      } else
      /* istanbul ignore next */
      {
        cov_gl0onn3sl().b[5][1]++;
      }
      // Check expiration
      cov_gl0onn3sl().s[47]++;
      if (
      /* istanbul ignore next */
      (cov_gl0onn3sl().b[8][0]++, credentialEntry.expiresAt) &&
      /* istanbul ignore next */
      (cov_gl0onn3sl().b[8][1]++, credentialEntry.expiresAt < new Date())) {
        /* istanbul ignore next */
        cov_gl0onn3sl().b[7][0]++;
        cov_gl0onn3sl().s[48]++;
        throw new Error('Credential has expired');
      } else
      /* istanbul ignore next */
      {
        cov_gl0onn3sl().b[7][1]++;
      }
      // Decrypt credential data
      const decryptedData =
      /* istanbul ignore next */
      (cov_gl0onn3sl().s[49]++, await encryption_service_1.encryptionService.decryptCredentials(credentialEntry.encryptedData));
      // Update usage statistics
      /* istanbul ignore next */
      cov_gl0onn3sl().s[50]++;
      credentialEntry.usageCount++;
      /* istanbul ignore next */
      cov_gl0onn3sl().s[51]++;
      credentialEntry.lastAccessed = new Date();
      /* istanbul ignore next */
      cov_gl0onn3sl().s[52]++;
      await this.updateCredential(credentialEntry);
      // Cache for performance
      /* istanbul ignore next */
      cov_gl0onn3sl().s[53]++;
      this.credentialCache.set(credentialId, {
        data: decryptedData,
        expiresAt: Date.now() + CredentialManager.CACHE_TTL
      });
      /* istanbul ignore next */
      cov_gl0onn3sl().s[54]++;
      return decryptedData;
    } catch (error) {
      /* istanbul ignore next */
      cov_gl0onn3sl().s[55]++;
      logger_1.logger.error('❌ Failed to retrieve credential:', error);
      /* istanbul ignore next */
      cov_gl0onn3sl().s[56]++;
      throw new Error('Credential retrieval failed');
    }
  }
  /**
   * Get Gate.io API credentials
   * Convenience method for retrieving trading API credentials
   *
   * @returns Promise<GateIOCredentials> Gate.io API credentials
   */
  async getGateIOCredentials() {
    /* istanbul ignore next */
    cov_gl0onn3sl().f[6]++;
    cov_gl0onn3sl().s[57]++;
    try {
      // Get credentials from environment or storage
      const apiKey =
      /* istanbul ignore next */
      (cov_gl0onn3sl().s[58]++, process.env.GATE_IO_API_KEY);
      const apiSecret =
      /* istanbul ignore next */
      (cov_gl0onn3sl().s[59]++, process.env.GATE_IO_API_SECRET);
      const passphrase =
      /* istanbul ignore next */
      (cov_gl0onn3sl().s[60]++, process.env.GATE_IO_API_PASSPHRASE);
      /* istanbul ignore next */
      cov_gl0onn3sl().s[61]++;
      if (
      /* istanbul ignore next */
      (cov_gl0onn3sl().b[10][0]++, !apiKey) ||
      /* istanbul ignore next */
      (cov_gl0onn3sl().b[10][1]++, !apiSecret) ||
      /* istanbul ignore next */
      (cov_gl0onn3sl().b[10][2]++, !passphrase)) {
        /* istanbul ignore next */
        cov_gl0onn3sl().b[9][0]++;
        cov_gl0onn3sl().s[62]++;
        throw new Error('Gate.io API credentials not configured');
      } else
      /* istanbul ignore next */
      {
        cov_gl0onn3sl().b[9][1]++;
      }
      // Log credential access (without sensitive data)
      cov_gl0onn3sl().s[63]++;
      logger_1.logger.security('CREDENTIAL_ACCESSED', 'Gate.io credentials accessed', {
        service: 'gate.io',
        classification: 'RESTRICTED'
      });
      /* istanbul ignore next */
      cov_gl0onn3sl().s[64]++;
      return {
        apiKey,
        apiSecret,
        passphrase
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_gl0onn3sl().s[65]++;
      logger_1.logger.error('❌ Failed to get Gate.io credentials:', error);
      /* istanbul ignore next */
      cov_gl0onn3sl().s[66]++;
      throw new Error('Gate.io credential retrieval failed');
    }
  }
  /**
   * Rotate credentials
   * Generates new credentials and marks old ones as deprecated
   *
   * @param credentialId - Credential to rotate
   * @returns Promise<string> New credential ID
   */
  async rotateCredential(credentialId) {
    /* istanbul ignore next */
    cov_gl0onn3sl().f[7]++;
    cov_gl0onn3sl().s[67]++;
    try {
      // Load current credential
      const currentCredential =
      /* istanbul ignore next */
      (cov_gl0onn3sl().s[68]++, await this.loadCredential(credentialId));
      /* istanbul ignore next */
      cov_gl0onn3sl().s[69]++;
      if (!currentCredential) {
        /* istanbul ignore next */
        cov_gl0onn3sl().b[11][0]++;
        cov_gl0onn3sl().s[70]++;
        throw new Error('Credential not found');
      } else
      /* istanbul ignore next */
      {
        cov_gl0onn3sl().b[11][1]++;
      }
      // Mark current credential as deprecated
      cov_gl0onn3sl().s[71]++;
      currentCredential.isActive = false;
      /* istanbul ignore next */
      cov_gl0onn3sl().s[72]++;
      await this.updateCredential(currentCredential);
      // Remove from cache
      /* istanbul ignore next */
      cov_gl0onn3sl().s[73]++;
      this.credentialCache.delete(credentialId);
      // Log credential rotation
      /* istanbul ignore next */
      cov_gl0onn3sl().s[74]++;
      logger_1.logger.security('CREDENTIAL_ROTATED', 'Credential rotated', {
        oldCredentialId: credentialId,
        service: currentCredential.service,
        type: currentCredential.type,
        classification: 'RESTRICTED'
      });
      // Note: New credential would need to be provided by external system
      // This method marks the old one as inactive
      /* istanbul ignore next */
      cov_gl0onn3sl().s[75]++;
      return credentialId; // Would return new credential ID in full implementation
    } catch (error) {
      /* istanbul ignore next */
      cov_gl0onn3sl().s[76]++;
      logger_1.logger.error('❌ Failed to rotate credential:', error);
      /* istanbul ignore next */
      cov_gl0onn3sl().s[77]++;
      throw new Error('Credential rotation failed');
    }
  }
  /**
   * Generate unique credential ID
   * Creates identifier for credential storage
   *
   * @param service - Service name
   * @param type - Credential type
   * @returns string Unique credential ID
   */
  generateCredentialId(service, type) {
    /* istanbul ignore next */
    cov_gl0onn3sl().f[8]++;
    const timestamp =
    /* istanbul ignore next */
    (cov_gl0onn3sl().s[78]++, Date.now().toString(36));
    const random =
    /* istanbul ignore next */
    (cov_gl0onn3sl().s[79]++, Math.random().toString(36).substring(2));
    /* istanbul ignore next */
    cov_gl0onn3sl().s[80]++;
    return `${service}_${type}_${timestamp}_${random}`;
  }
  /**
   * Persist credential to secure storage
   * Stores credential entry securely
   *
   * @param credentialEntry - Credential entry to store
   */
  async persistCredential(credentialEntry) {
    /* istanbul ignore next */
    cov_gl0onn3sl().f[9]++;
    cov_gl0onn3sl().s[81]++;
    // Implementation would store in secure database
    // For now, this is a placeholder
    logger_1.logger.debug('Credential persisted to secure storage', {
      credentialId: credentialEntry.credentialId
    });
  }
  /**
   * Load credential from secure storage
   * Retrieves credential entry from storage
   *
   * @param credentialId - Credential identifier
   * @returns Promise<CredentialEntry | null> Credential entry or null
   */
  async loadCredential(credentialId) {
    /* istanbul ignore next */
    cov_gl0onn3sl().f[10]++;
    cov_gl0onn3sl().s[82]++;
    // Implementation would load from secure database
    // For now, this is a placeholder
    return null;
  }
  /**
   * Update credential in storage
   * Updates credential entry in secure storage
   *
   * @param credentialEntry - Updated credential entry
   */
  async updateCredential(credentialEntry) {
    /* istanbul ignore next */
    cov_gl0onn3sl().f[11]++;
    cov_gl0onn3sl().s[83]++;
    // Implementation would update in secure database
    // For now, this is a placeholder
    logger_1.logger.debug('Credential updated in secure storage', {
      credentialId: credentialEntry.credentialId
    });
  }
  /**
   * Start cache cleanup process
   * Removes expired entries from credential cache
   */
  startCacheCleanup() {
    /* istanbul ignore next */
    cov_gl0onn3sl().f[12]++;
    cov_gl0onn3sl().s[84]++;
    setInterval(() => {
      /* istanbul ignore next */
      cov_gl0onn3sl().f[13]++;
      const now =
      /* istanbul ignore next */
      (cov_gl0onn3sl().s[85]++, Date.now());
      /* istanbul ignore next */
      cov_gl0onn3sl().s[86]++;
      for (const [key, value] of this.credentialCache.entries()) {
        /* istanbul ignore next */
        cov_gl0onn3sl().s[87]++;
        if (value.expiresAt <= now) {
          /* istanbul ignore next */
          cov_gl0onn3sl().b[12][0]++;
          cov_gl0onn3sl().s[88]++;
          this.credentialCache.delete(key);
        } else
        /* istanbul ignore next */
        {
          cov_gl0onn3sl().b[12][1]++;
        }
      }
    }, 60000); // Clean up every minute
  }
  /**
   * Get credential manager status
   * Returns current status for monitoring
   *
   * @returns Object containing status information
   */
  getStatus() {
    /* istanbul ignore next */
    cov_gl0onn3sl().f[14]++;
    cov_gl0onn3sl().s[89]++;
    return {
      cacheSize: this.credentialCache.size,
      timestamp: Date.now()
    };
  }
}
/* istanbul ignore next */
cov_gl0onn3sl().s[90]++;
exports.CredentialManager = CredentialManager;
// Create and export singleton instance
/* istanbul ignore next */
cov_gl0onn3sl().s[91]++;
exports.credentialManager = new CredentialManager();
// =============================================================================
// CREDENTIAL SECURITY NOTES
// =============================================================================
// 1. All credentials are encrypted before storage
// 2. Credentials are cached temporarily for performance
// 3. All credential access is logged and audited
// 4. Expired credentials are automatically rejected
// 5. Credential rotation invalidates old credentials
// 6. Cache is automatically cleaned of expired entries
// 7. Never log actual credential values
// 8. Use environment variables for initial credential loading
// =============================================================================
//# sourceMappingURL=data:application/json;charset=utf-8;base64,