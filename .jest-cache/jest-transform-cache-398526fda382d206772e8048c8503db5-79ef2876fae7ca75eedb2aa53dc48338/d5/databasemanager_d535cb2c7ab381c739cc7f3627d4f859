afeb26a4c78c60093bcad041e6631f47
"use strict";

/**
 * =============================================================================
 * AI CRYPTO TRADING AGENT - DATABASE MANAGER
 * =============================================================================
 *
 * Core database management service that handles all data persistence,
 * connection management, and database operations for the trading system.
 *
 * Features:
 * - PostgreSQL connection management
 * - Schema management and migrations
 * - Trade history storage
 * - Portfolio state persistence
 * - AI analysis results storage
 * - System metrics logging
 * - Connection pooling
 * - Backup and recovery
 *
 * @author AI Crypto Trading System
 * @version 1.0.0
 * @license PROPRIETARY
 * =============================================================================
 */
/* istanbul ignore next */
function cov_s6xzxixiw() {
  var path = "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\core\\database\\database-manager.ts";
  var hash = "718c7b2701bf11e6f2bbc4e74d3599c6bf683f2b";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\core\\database\\database-manager.ts",
    statementMap: {
      "0": {
        start: {
          line: 25,
          column: 0
        },
        end: {
          line: 25,
          column: 62
        }
      },
      "1": {
        start: {
          line: 26,
          column: 0
        },
        end: {
          line: 26,
          column: 33
        }
      },
      "2": {
        start: {
          line: 27,
          column: 13
        },
        end: {
          line: 27,
          column: 26
        }
      },
      "3": {
        start: {
          line: 28,
          column: 17
        },
        end: {
          line: 28,
          column: 45
        }
      },
      "4": {
        start: {
          line: 36,
          column: 11
        },
        end: {
          line: 36,
          column: 15
        }
      },
      "5": {
        start: {
          line: 37,
          column: 20
        },
        end: {
          line: 37,
          column: 25
        }
      },
      "6": {
        start: {
          line: 38,
          column: 17
        },
        end: {
          line: 38,
          column: 18
        }
      },
      "7": {
        start: {
          line: 39,
          column: 21
        },
        end: {
          line: 39,
          column: 22
        }
      },
      "8": {
        start: {
          line: 40,
          column: 16
        },
        end: {
          line: 40,
          column: 26
        }
      },
      "9": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 42,
          column: 61
        }
      },
      "10": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 43,
          column: 29
        }
      },
      "11": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 48,
          column: 11
        }
      },
      "12": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 72,
          column: 9
        }
      },
      "13": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 55,
          column: 68
        }
      },
      "14": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 61,
          column: 13
        }
      },
      "15": {
        start: {
          line: 57,
          column: 16
        },
        end: {
          line: 57,
          column: 50
        }
      },
      "16": {
        start: {
          line: 60,
          column: 16
        },
        end: {
          line: 60,
          column: 89
        }
      },
      "17": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 63,
          column: 38
        }
      },
      "18": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 65,
          column: 39
        }
      },
      "19": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 66,
          column: 38
        }
      },
      "20": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 75
        }
      },
      "21": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 82
        }
      },
      "22": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 71,
          column: 72
        }
      },
      "23": {
        start: {
          line: 78,
          column: 27
        },
        end: {
          line: 88,
          column: 9
        }
      },
      "24": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 89,
          column: 46
        }
      },
      "25": {
        start: {
          line: 91,
          column: 23
        },
        end: {
          line: 91,
          column: 48
        }
      },
      "26": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 100,
          column: 9
        }
      },
      "27": {
        start: {
          line: 93,
          column: 27
        },
        end: {
          line: 93,
          column: 61
        }
      },
      "28": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 96,
          column: 15
        }
      },
      "29": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 99,
          column: 29
        }
      },
      "30": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 104,
          column: 11
        }
      },
      "31": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 103,
          column: 61
        }
      },
      "32": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 107,
          column: 11
        }
      },
      "33": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 106,
          column: 65
        }
      },
      "34": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 110,
          column: 11
        }
      },
      "35": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 109,
          column: 69
        }
      },
      "36": {
        start: {
          line: 116,
          column: 23
        },
        end: {
          line: 180,
          column: 9
        }
      },
      "37": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 183,
          column: 9
        }
      },
      "38": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 182,
          column: 46
        }
      },
      "39": {
        start: {
          line: 185,
          column: 24
        },
        end: {
          line: 193,
          column: 9
        }
      },
      "40": {
        start: {
          line: 194,
          column: 8
        },
        end: {
          line: 196,
          column: 9
        }
      },
      "41": {
        start: {
          line: 195,
          column: 12
        },
        end: {
          line: 195,
          column: 46
        }
      },
      "42": {
        start: {
          line: 197,
          column: 8
        },
        end: {
          line: 197,
          column: 66
        }
      },
      "43": {
        start: {
          line: 204,
          column: 8
        },
        end: {
          line: 210,
          column: 7
        }
      },
      "44": {
        start: {
          line: 212,
          column: 27
        },
        end: {
          line: 218,
          column: 9
        }
      },
      "45": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 226,
          column: 9
        }
      },
      "46": {
        start: {
          line: 220,
          column: 27
        },
        end: {
          line: 220,
          column: 112
        }
      },
      "47": {
        start: {
          line: 221,
          column: 12
        },
        end: {
          line: 225,
          column: 13
        }
      },
      "48": {
        start: {
          line: 222,
          column: 16
        },
        end: {
          line: 222,
          column: 55
        }
      },
      "49": {
        start: {
          line: 223,
          column: 16
        },
        end: {
          line: 223,
          column: 103
        }
      },
      "50": {
        start: {
          line: 224,
          column: 16
        },
        end: {
          line: 224,
          column: 76
        }
      },
      "51": {
        start: {
          line: 232,
          column: 8
        },
        end: {
          line: 234,
          column: 9
        }
      },
      "52": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 233,
          column: 56
        }
      },
      "53": {
        start: {
          line: 235,
          column: 26
        },
        end: {
          line: 235,
          column: 36
        }
      },
      "54": {
        start: {
          line: 236,
          column: 23
        },
        end: {
          line: 236,
          column: 48
        }
      },
      "55": {
        start: {
          line: 237,
          column: 8
        },
        end: {
          line: 260,
          column: 9
        }
      },
      "56": {
        start: {
          line: 238,
          column: 27
        },
        end: {
          line: 238,
          column: 60
        }
      },
      "57": {
        start: {
          line: 239,
          column: 34
        },
        end: {
          line: 239,
          column: 56
        }
      },
      "58": {
        start: {
          line: 240,
          column: 12
        },
        end: {
          line: 240,
          column: 30
        }
      },
      "59": {
        start: {
          line: 241,
          column: 12
        },
        end: {
          line: 241,
          column: 49
        }
      },
      "60": {
        start: {
          line: 242,
          column: 12
        },
        end: {
          line: 247,
          column: 15
        }
      },
      "61": {
        start: {
          line: 248,
          column: 12
        },
        end: {
          line: 248,
          column: 26
        }
      },
      "62": {
        start: {
          line: 251,
          column: 12
        },
        end: {
          line: 255,
          column: 15
        }
      },
      "63": {
        start: {
          line: 256,
          column: 12
        },
        end: {
          line: 256,
          column: 24
        }
      },
      "64": {
        start: {
          line: 259,
          column: 12
        },
        end: {
          line: 259,
          column: 29
        }
      },
      "65": {
        start: {
          line: 266,
          column: 22
        },
        end: {
          line: 270,
          column: 5
        }
      },
      "66": {
        start: {
          line: 271,
          column: 23
        },
        end: {
          line: 282,
          column: 9
        }
      },
      "67": {
        start: {
          line: 283,
          column: 23
        },
        end: {
          line: 283,
          column: 61
        }
      },
      "68": {
        start: {
          line: 284,
          column: 8
        },
        end: {
          line: 284,
          column: 33
        }
      },
      "69": {
        start: {
          line: 290,
          column: 20
        },
        end: {
          line: 290,
          column: 42
        }
      },
      "70": {
        start: {
          line: 291,
          column: 23
        },
        end: {
          line: 291,
          column: 25
        }
      },
      "71": {
        start: {
          line: 292,
          column: 8
        },
        end: {
          line: 295,
          column: 9
        }
      },
      "72": {
        start: {
          line: 293,
          column: 12
        },
        end: {
          line: 293,
          column: 42
        }
      },
      "73": {
        start: {
          line: 294,
          column: 12
        },
        end: {
          line: 294,
          column: 32
        }
      },
      "74": {
        start: {
          line: 296,
          column: 8
        },
        end: {
          line: 296,
          column: 74
        }
      },
      "75": {
        start: {
          line: 297,
          column: 8
        },
        end: {
          line: 297,
          column: 27
        }
      },
      "76": {
        start: {
          line: 298,
          column: 23
        },
        end: {
          line: 298,
          column: 61
        }
      },
      "77": {
        start: {
          line: 299,
          column: 8
        },
        end: {
          line: 299,
          column: 52
        }
      },
      "78": {
        start: {
          line: 305,
          column: 22
        },
        end: {
          line: 309,
          column: 5
        }
      },
      "79": {
        start: {
          line: 310,
          column: 23
        },
        end: {
          line: 317,
          column: 9
        }
      },
      "80": {
        start: {
          line: 318,
          column: 23
        },
        end: {
          line: 318,
          column: 61
        }
      },
      "81": {
        start: {
          line: 319,
          column: 8
        },
        end: {
          line: 319,
          column: 33
        }
      },
      "82": {
        start: {
          line: 325,
          column: 22
        },
        end: {
          line: 325,
          column: 90
        }
      },
      "83": {
        start: {
          line: 326,
          column: 23
        },
        end: {
          line: 326,
          column: 62
        }
      },
      "84": {
        start: {
          line: 327,
          column: 8
        },
        end: {
          line: 335,
          column: 12
        }
      },
      "85": {
        start: {
          line: 327,
          column: 39
        },
        end: {
          line: 335,
          column: 9
        }
      },
      "86": {
        start: {
          line: 341,
          column: 22
        },
        end: {
          line: 345,
          column: 5
        }
      },
      "87": {
        start: {
          line: 346,
          column: 23
        },
        end: {
          line: 353,
          column: 9
        }
      },
      "88": {
        start: {
          line: 354,
          column: 23
        },
        end: {
          line: 354,
          column: 61
        }
      },
      "89": {
        start: {
          line: 355,
          column: 8
        },
        end: {
          line: 355,
          column: 33
        }
      },
      "90": {
        start: {
          line: 361,
          column: 20
        },
        end: {
          line: 361,
          column: 57
        }
      },
      "91": {
        start: {
          line: 362,
          column: 23
        },
        end: {
          line: 362,
          column: 25
        }
      },
      "92": {
        start: {
          line: 363,
          column: 8
        },
        end: {
          line: 366,
          column: 9
        }
      },
      "93": {
        start: {
          line: 364,
          column: 12
        },
        end: {
          line: 364,
          column: 61
        }
      },
      "94": {
        start: {
          line: 365,
          column: 12
        },
        end: {
          line: 365,
          column: 32
        }
      },
      "95": {
        start: {
          line: 367,
          column: 8
        },
        end: {
          line: 370,
          column: 9
        }
      },
      "96": {
        start: {
          line: 368,
          column: 12
        },
        end: {
          line: 368,
          column: 68
        }
      },
      "97": {
        start: {
          line: 369,
          column: 12
        },
        end: {
          line: 369,
          column: 38
        }
      },
      "98": {
        start: {
          line: 371,
          column: 8
        },
        end: {
          line: 371,
          column: 74
        }
      },
      "99": {
        start: {
          line: 372,
          column: 8
        },
        end: {
          line: 372,
          column: 27
        }
      },
      "100": {
        start: {
          line: 373,
          column: 23
        },
        end: {
          line: 373,
          column: 61
        }
      },
      "101": {
        start: {
          line: 374,
          column: 8
        },
        end: {
          line: 382,
          column: 12
        }
      },
      "102": {
        start: {
          line: 374,
          column: 39
        },
        end: {
          line: 382,
          column: 9
        }
      },
      "103": {
        start: {
          line: 388,
          column: 22
        },
        end: {
          line: 391,
          column: 5
        }
      },
      "104": {
        start: {
          line: 392,
          column: 23
        },
        end: {
          line: 398,
          column: 9
        }
      },
      "105": {
        start: {
          line: 399,
          column: 8
        },
        end: {
          line: 399,
          column: 47
        }
      },
      "106": {
        start: {
          line: 405,
          column: 8
        },
        end: {
          line: 417,
          column: 9
        }
      },
      "107": {
        start: {
          line: 406,
          column: 12
        },
        end: {
          line: 416,
          column: 14
        }
      },
      "108": {
        start: {
          line: 418,
          column: 8
        },
        end: {
          line: 446,
          column: 9
        }
      },
      "109": {
        start: {
          line: 419,
          column: 27
        },
        end: {
          line: 429,
          column: 13
        }
      },
      "110": {
        start: {
          line: 431,
          column: 12
        },
        end: {
          line: 431,
          column: 48
        }
      },
      "111": {
        start: {
          line: 432,
          column: 12
        },
        end: {
          line: 432,
          column: 26
        }
      },
      "112": {
        start: {
          line: 435,
          column: 12
        },
        end: {
          line: 445,
          column: 14
        }
      },
      "113": {
        start: {
          line: 452,
          column: 8
        },
        end: {
          line: 456,
          column: 9
        }
      },
      "114": {
        start: {
          line: 453,
          column: 12
        },
        end: {
          line: 453,
          column: 34
        }
      },
      "115": {
        start: {
          line: 454,
          column: 12
        },
        end: {
          line: 454,
          column: 29
        }
      },
      "116": {
        start: {
          line: 455,
          column: 12
        },
        end: {
          line: 455,
          column: 61
        }
      },
      "117": {
        start: {
          line: 462,
          column: 8
        },
        end: {
          line: 474,
          column: 10
        }
      },
      "118": {
        start: {
          line: 480,
          column: 8
        },
        end: {
          line: 485,
          column: 10
        }
      },
      "119": {
        start: {
          line: 488,
          column: 0
        },
        end: {
          line: 488,
          column: 42
        }
      },
      "120": {
        start: {
          line: 489,
          column: 0
        },
        end: {
          line: 489,
          column: 34
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 41,
            column: 4
          },
          end: {
            line: 41,
            column: 5
          }
        },
        loc: {
          start: {
            line: 41,
            column: 24
          },
          end: {
            line: 49,
            column: 5
          }
        },
        line: 41
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 53,
            column: 4
          },
          end: {
            line: 53,
            column: 5
          }
        },
        loc: {
          start: {
            line: 53,
            column: 23
          },
          end: {
            line: 73,
            column: 5
          }
        },
        line: 53
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 77,
            column: 4
          },
          end: {
            line: 77,
            column: 5
          }
        },
        loc: {
          start: {
            line: 77,
            column: 33
          },
          end: {
            line: 111,
            column: 5
          }
        },
        line: 77
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 102,
            column: 30
          },
          end: {
            line: 102,
            column: 31
          }
        },
        loc: {
          start: {
            line: 102,
            column: 39
          },
          end: {
            line: 104,
            column: 9
          }
        },
        line: 102
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 105,
            column: 32
          },
          end: {
            line: 105,
            column: 33
          }
        },
        loc: {
          start: {
            line: 105,
            column: 38
          },
          end: {
            line: 107,
            column: 9
          }
        },
        line: 105
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 108,
            column: 31
          },
          end: {
            line: 108,
            column: 32
          }
        },
        loc: {
          start: {
            line: 108,
            column: 37
          },
          end: {
            line: 110,
            column: 9
          }
        },
        line: 108
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 115,
            column: 4
          },
          end: {
            line: 115,
            column: 5
          }
        },
        loc: {
          start: {
            line: 115,
            column: 25
          },
          end: {
            line: 198,
            column: 5
          }
        },
        line: 115
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 202,
            column: 4
          },
          end: {
            line: 202,
            column: 5
          }
        },
        loc: {
          start: {
            line: 202,
            column: 26
          },
          end: {
            line: 227,
            column: 5
          }
        },
        line: 202
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 231,
            column: 4
          },
          end: {
            line: 231,
            column: 5
          }
        },
        loc: {
          start: {
            line: 231,
            column: 43
          },
          end: {
            line: 261,
            column: 5
          }
        },
        line: 231
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 265,
            column: 4
          },
          end: {
            line: 265,
            column: 5
          }
        },
        loc: {
          start: {
            line: 265,
            column: 27
          },
          end: {
            line: 285,
            column: 5
          }
        },
        line: 265
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 289,
            column: 4
          },
          end: {
            line: 289,
            column: 5
          }
        },
        loc: {
          start: {
            line: 289,
            column: 47
          },
          end: {
            line: 300,
            column: 5
          }
        },
        line: 289
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 304,
            column: 4
          },
          end: {
            line: 304,
            column: 5
          }
        },
        loc: {
          start: {
            line: 304,
            column: 42
          },
          end: {
            line: 320,
            column: 5
          }
        },
        line: 304
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 324,
            column: 4
          },
          end: {
            line: 324,
            column: 5
          }
        },
        loc: {
          start: {
            line: 324,
            column: 43
          },
          end: {
            line: 336,
            column: 5
          }
        },
        line: 324
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 327,
            column: 31
          },
          end: {
            line: 327,
            column: 32
          }
        },
        loc: {
          start: {
            line: 327,
            column: 39
          },
          end: {
            line: 335,
            column: 9
          }
        },
        line: 327
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 340,
            column: 4
          },
          end: {
            line: 340,
            column: 5
          }
        },
        loc: {
          start: {
            line: 340,
            column: 35
          },
          end: {
            line: 356,
            column: 5
          }
        },
        line: 340
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 360,
            column: 4
          },
          end: {
            line: 360,
            column: 5
          }
        },
        loc: {
          start: {
            line: 360,
            column: 66
          },
          end: {
            line: 383,
            column: 5
          }
        },
        line: 360
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 374,
            column: 31
          },
          end: {
            line: 374,
            column: 32
          }
        },
        loc: {
          start: {
            line: 374,
            column: 39
          },
          end: {
            line: 382,
            column: 9
          }
        },
        line: 374
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 387,
            column: 4
          },
          end: {
            line: 387,
            column: 5
          }
        },
        loc: {
          start: {
            line: 387,
            column: 68
          },
          end: {
            line: 400,
            column: 5
          }
        },
        line: 387
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 404,
            column: 4
          },
          end: {
            line: 404,
            column: 5
          }
        },
        loc: {
          start: {
            line: 404,
            column: 22
          },
          end: {
            line: 447,
            column: 5
          }
        },
        line: 404
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 451,
            column: 4
          },
          end: {
            line: 451,
            column: 5
          }
        },
        loc: {
          start: {
            line: 451,
            column: 23
          },
          end: {
            line: 457,
            column: 5
          }
        },
        line: 451
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 461,
            column: 4
          },
          end: {
            line: 461,
            column: 5
          }
        },
        loc: {
          start: {
            line: 461,
            column: 24
          },
          end: {
            line: 475,
            column: 5
          }
        },
        line: 461
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 479,
            column: 4
          },
          end: {
            line: 479,
            column: 5
          }
        },
        loc: {
          start: {
            line: 479,
            column: 16
          },
          end: {
            line: 486,
            column: 5
          }
        },
        line: 479
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 56,
            column: 12
          },
          end: {
            line: 61,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 56,
            column: 12
          },
          end: {
            line: 61,
            column: 13
          }
        }, {
          start: {
            line: 59,
            column: 17
          },
          end: {
            line: 61,
            column: 13
          }
        }],
        line: 56
      },
      "1": {
        loc: {
          start: {
            line: 85,
            column: 17
          },
          end: {
            line: 85,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 85,
            column: 17
          },
          end: {
            line: 85,
            column: 43
          }
        }, {
          start: {
            line: 85,
            column: 47
          },
          end: {
            line: 85,
            column: 49
          }
        }],
        line: 85
      },
      "2": {
        loc: {
          start: {
            line: 86,
            column: 31
          },
          end: {
            line: 86,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 86,
            column: 31
          },
          end: {
            line: 86,
            column: 54
          }
        }, {
          start: {
            line: 86,
            column: 58
          },
          end: {
            line: 86,
            column: 63
          }
        }],
        line: 86
      },
      "3": {
        loc: {
          start: {
            line: 87,
            column: 37
          },
          end: {
            line: 87,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 87,
            column: 37
          },
          end: {
            line: 87,
            column: 66
          }
        }, {
          start: {
            line: 87,
            column: 70
          },
          end: {
            line: 87,
            column: 75
          }
        }],
        line: 87
      },
      "4": {
        loc: {
          start: {
            line: 221,
            column: 12
          },
          end: {
            line: 225,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 221,
            column: 12
          },
          end: {
            line: 225,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 221
      },
      "5": {
        loc: {
          start: {
            line: 231,
            column: 30
          },
          end: {
            line: 231,
            column: 41
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 231,
            column: 39
          },
          end: {
            line: 231,
            column: 41
          }
        }],
        line: 231
      },
      "6": {
        loc: {
          start: {
            line: 232,
            column: 8
          },
          end: {
            line: 234,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 232,
            column: 8
          },
          end: {
            line: 234,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 232
      },
      "7": {
        loc: {
          start: {
            line: 245,
            column: 22
          },
          end: {
            line: 245,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 245,
            column: 22
          },
          end: {
            line: 245,
            column: 41
          }
        }, {
          start: {
            line: 245,
            column: 45
          },
          end: {
            line: 245,
            column: 46
          }
        }],
        line: 245
      },
      "8": {
        loc: {
          start: {
            line: 276,
            column: 12
          },
          end: {
            line: 276,
            column: 26
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 276,
            column: 12
          },
          end: {
            line: 276,
            column: 21
          }
        }, {
          start: {
            line: 276,
            column: 25
          },
          end: {
            line: 276,
            column: 26
          }
        }],
        line: 276
      },
      "9": {
        loc: {
          start: {
            line: 289,
            column: 34
          },
          end: {
            line: 289,
            column: 45
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 289,
            column: 42
          },
          end: {
            line: 289,
            column: 45
          }
        }],
        line: 289
      },
      "10": {
        loc: {
          start: {
            line: 292,
            column: 8
          },
          end: {
            line: 295,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 292,
            column: 8
          },
          end: {
            line: 295,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 292
      },
      "11": {
        loc: {
          start: {
            line: 324,
            column: 30
          },
          end: {
            line: 324,
            column: 41
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 324,
            column: 38
          },
          end: {
            line: 324,
            column: 41
          }
        }],
        line: 324
      },
      "12": {
        loc: {
          start: {
            line: 360,
            column: 53
          },
          end: {
            line: 360,
            column: 64
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 360,
            column: 61
          },
          end: {
            line: 360,
            column: 64
          }
        }],
        line: 360
      },
      "13": {
        loc: {
          start: {
            line: 363,
            column: 8
          },
          end: {
            line: 366,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 363,
            column: 8
          },
          end: {
            line: 366,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 363
      },
      "14": {
        loc: {
          start: {
            line: 367,
            column: 8
          },
          end: {
            line: 370,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 367,
            column: 8
          },
          end: {
            line: 370,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 367
      },
      "15": {
        loc: {
          start: {
            line: 397,
            column: 12
          },
          end: {
            line: 397,
            column: 54
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 397,
            column: 23
          },
          end: {
            line: 397,
            column: 47
          }
        }, {
          start: {
            line: 397,
            column: 50
          },
          end: {
            line: 397,
            column: 54
          }
        }],
        line: 397
      },
      "16": {
        loc: {
          start: {
            line: 405,
            column: 8
          },
          end: {
            line: 417,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 405,
            column: 8
          },
          end: {
            line: 417,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 405
      },
      "17": {
        loc: {
          start: {
            line: 425,
            column: 34
          },
          end: {
            line: 425,
            column: 97
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 425,
            column: 56
          },
          end: {
            line: 425,
            column: 93
          }
        }, {
          start: {
            line: 425,
            column: 96
          },
          end: {
            line: 425,
            column: 97
          }
        }],
        line: 425
      },
      "18": {
        loc: {
          start: {
            line: 442,
            column: 27
          },
          end: {
            line: 442,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 442,
            column: 52
          },
          end: {
            line: 442,
            column: 65
          }
        }, {
          start: {
            line: 442,
            column: 68
          },
          end: {
            line: 442,
            column: 81
          }
        }],
        line: 442
      },
      "19": {
        loc: {
          start: {
            line: 452,
            column: 8
          },
          end: {
            line: 456,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 452,
            column: 8
          },
          end: {
            line: 456,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 452
      },
      "20": {
        loc: {
          start: {
            line: 468,
            column: 28
          },
          end: {
            line: 468,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 468,
            column: 28
          },
          end: {
            line: 468,
            column: 35
          }
        }, {
          start: {
            line: 468,
            column: 39
          },
          end: {
            line: 468,
            column: 40
          }
        }],
        line: 468
      },
      "21": {
        loc: {
          start: {
            line: 472,
            column: 17
          },
          end: {
            line: 472,
            column: 58
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 472,
            column: 27
          },
          end: {
            line: 472,
            column: 46
          }
        }, {
          start: {
            line: 472,
            column: 49
          },
          end: {
            line: 472,
            column: 58
          }
        }],
        line: 472
      },
      "22": {
        loc: {
          start: {
            line: 482,
            column: 29
          },
          end: {
            line: 482,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 482,
            column: 29
          },
          end: {
            line: 482,
            column: 50
          }
        }, {
          start: {
            line: 482,
            column: 54
          },
          end: {
            line: 482,
            column: 55
          }
        }],
        line: 482
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0],
      "10": [0, 0],
      "11": [0],
      "12": [0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\core\\database\\database-manager.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\core\\database\\database-manager.ts"],
      sourcesContent: ["/**\r\n * =============================================================================\r\n * AI CRYPTO TRADING AGENT - DATABASE MANAGER\r\n * =============================================================================\r\n * \r\n * Core database management service that handles all data persistence,\r\n * connection management, and database operations for the trading system.\r\n * \r\n * Features:\r\n * - PostgreSQL connection management\r\n * - Schema management and migrations\r\n * - Trade history storage\r\n * - Portfolio state persistence\r\n * - AI analysis results storage\r\n * - System metrics logging\r\n * - Connection pooling\r\n * - Backup and recovery\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport { Pool, PoolClient, PoolConfig } from 'pg';\r\nimport { Logger } from '../logging/logger';\r\n\r\n/**\r\n * Database configuration interface\r\n */\r\nexport interface DatabaseConfig {\r\n  type: 'postgresql' | 'sqlite';\r\n  host?: string;\r\n  port?: number;\r\n  database: string;\r\n  username?: string;\r\n  password?: string;\r\n  ssl?: boolean;\r\n  maxConnections?: number;\r\n  idleTimeout?: number;\r\n  connectionTimeout?: number;\r\n}\r\n\r\n/**\r\n * Database health interface\r\n */\r\nexport interface DatabaseHealth {\r\n  isHealthy: boolean;\r\n  connectionCount: number;\r\n  activeConnections: number;\r\n  idleConnections: number;\r\n  totalQueries: number;\r\n  averageQueryTime: number;\r\n  lastError: string | null;\r\n  uptime: number;\r\n  timestamp: Date;\r\n}\r\n\r\n/**\r\n * Trade record interface\r\n */\r\nexport interface TradeRecord {\r\n  id?: string;\r\n  symbol: string;\r\n  side: 'buy' | 'sell';\r\n  amount: number;\r\n  price: number;\r\n  fee: number;\r\n  timestamp: Date;\r\n  orderId: string;\r\n  strategy?: string;\r\n  pnl?: number;\r\n  status: 'pending' | 'filled' | 'cancelled';\r\n}\r\n\r\n/**\r\n * Portfolio snapshot interface\r\n */\r\nexport interface PortfolioSnapshot {\r\n  id?: string;\r\n  timestamp: Date;\r\n  totalValue: number;\r\n  balances: Record<string, number>;\r\n  positions: Record<string, any>;\r\n  pnl: number;\r\n  drawdown: number;\r\n}\r\n\r\n/**\r\n * AI analysis record interface\r\n */\r\nexport interface AIAnalysisRecord {\r\n  id?: string;\r\n  symbol: string;\r\n  timestamp: Date;\r\n  analysisType: string;\r\n  result: any;\r\n  confidence: number;\r\n  executionTime: number;\r\n}\r\n\r\n/**\r\n * Main Database Manager class\r\n * Handles all database operations and connection management\r\n */\r\nexport class DatabaseManager {\r\n  private logger: Logger;\r\n  private config: DatabaseConfig;\r\n  private pool: Pool | null = null;\r\n  private isInitialized: boolean = false;\r\n  private queryCount: number = 0;\r\n  private totalQueryTime: number = 0;\r\n  private startTime: Date = new Date();\r\n\r\n  constructor(config: DatabaseConfig) {\r\n    this.logger = new Logger('DatabaseManager');\r\n    this.config = config;\r\n\r\n    this.logger.info('Database Manager created', {\r\n      type: config.type,\r\n      host: config.host,\r\n      database: config.database\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Initialize the database connection and schema\r\n   */\r\n  async initialize(): Promise<void> {\r\n    try {\r\n      this.logger.info('\uD83D\uDCBE Initializing Database Manager...');\r\n\r\n      if (this.config.type === 'postgresql') {\r\n        await this.initializePostgreSQL();\r\n      } else {\r\n        throw new Error(`Database type ${this.config.type} not yet implemented`);\r\n      }\r\n\r\n      // Create tables if they don't exist\r\n      await this.createTables();\r\n\r\n      // Run any pending migrations\r\n      await this.runMigrations();\r\n\r\n      this.isInitialized = true;\r\n      this.logger.info('\u2705 Database Manager initialization complete');\r\n\r\n    } catch (error) {\r\n      this.logger.error('\u274C Database Manager initialization failed:', error);\r\n      throw new Error(`Database initialization failed: ${error}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialize PostgreSQL connection pool\r\n   */\r\n  private async initializePostgreSQL(): Promise<void> {\r\n    const poolConfig: PoolConfig = {\r\n      host: this.config.host,\r\n      port: this.config.port,\r\n      database: this.config.database,\r\n      user: this.config.username,\r\n      password: this.config.password,\r\n      ssl: this.config.ssl,\r\n      max: this.config.maxConnections || 20,\r\n      idleTimeoutMillis: this.config.idleTimeout || 30000,\r\n      connectionTimeoutMillis: this.config.connectionTimeout || 60000\r\n    };\r\n\r\n    this.pool = new Pool(poolConfig);\r\n\r\n    // Test connection\r\n    const client = await this.pool.connect();\r\n    try {\r\n      const result = await client.query('SELECT NOW()');\r\n      this.logger.info('\u2705 PostgreSQL connection established', {\r\n        serverTime: result.rows[0].now\r\n      });\r\n    } finally {\r\n      client.release();\r\n    }\r\n\r\n    // Set up error handling\r\n    this.pool.on('error', (err) => {\r\n      this.logger.error('PostgreSQL pool error:', err);\r\n    });\r\n\r\n    this.pool.on('connect', () => {\r\n      this.logger.debug('New PostgreSQL client connected');\r\n    });\r\n\r\n    this.pool.on('remove', () => {\r\n      this.logger.debug('PostgreSQL client removed from pool');\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create database tables\r\n   */\r\n  private async createTables(): Promise<void> {\r\n    const tables = [\r\n      // Trades table\r\n      `CREATE TABLE IF NOT EXISTS trades (\r\n        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\r\n        symbol VARCHAR(20) NOT NULL,\r\n        side VARCHAR(4) NOT NULL CHECK (side IN ('buy', 'sell')),\r\n        amount DECIMAL(20, 8) NOT NULL,\r\n        price DECIMAL(20, 8) NOT NULL,\r\n        fee DECIMAL(20, 8) DEFAULT 0,\r\n        timestamp TIMESTAMP WITH TIME ZONE NOT NULL,\r\n        order_id VARCHAR(100) NOT NULL,\r\n        strategy VARCHAR(50),\r\n        pnl DECIMAL(20, 8),\r\n        status VARCHAR(20) NOT NULL DEFAULT 'pending',\r\n        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\r\n        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\r\n      )`,\r\n\r\n      // Portfolio snapshots table\r\n      `CREATE TABLE IF NOT EXISTS portfolio_snapshots (\r\n        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\r\n        timestamp TIMESTAMP WITH TIME ZONE NOT NULL,\r\n        total_value DECIMAL(20, 8) NOT NULL,\r\n        balances JSONB NOT NULL,\r\n        positions JSONB NOT NULL,\r\n        pnl DECIMAL(20, 8) NOT NULL,\r\n        drawdown DECIMAL(10, 4) NOT NULL,\r\n        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\r\n      )`,\r\n\r\n      // AI analysis results table\r\n      `CREATE TABLE IF NOT EXISTS ai_analysis (\r\n        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\r\n        symbol VARCHAR(20) NOT NULL,\r\n        timestamp TIMESTAMP WITH TIME ZONE NOT NULL,\r\n        analysis_type VARCHAR(50) NOT NULL,\r\n        result JSONB NOT NULL,\r\n        confidence DECIMAL(5, 4) NOT NULL,\r\n        execution_time INTEGER NOT NULL,\r\n        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\r\n      )`,\r\n\r\n      // System metrics table\r\n      `CREATE TABLE IF NOT EXISTS system_metrics (\r\n        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\r\n        timestamp TIMESTAMP WITH TIME ZONE NOT NULL,\r\n        metric_type VARCHAR(50) NOT NULL,\r\n        metric_name VARCHAR(100) NOT NULL,\r\n        value DECIMAL(20, 8) NOT NULL,\r\n        metadata JSONB,\r\n        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\r\n      )`,\r\n\r\n      // Orders table\r\n      `CREATE TABLE IF NOT EXISTS orders (\r\n        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\r\n        order_id VARCHAR(100) UNIQUE NOT NULL,\r\n        symbol VARCHAR(20) NOT NULL,\r\n        side VARCHAR(4) NOT NULL CHECK (side IN ('buy', 'sell')),\r\n        type VARCHAR(20) NOT NULL,\r\n        amount DECIMAL(20, 8) NOT NULL,\r\n        price DECIMAL(20, 8),\r\n        filled_amount DECIMAL(20, 8) DEFAULT 0,\r\n        status VARCHAR(20) NOT NULL,\r\n        strategy VARCHAR(50),\r\n        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\r\n        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\r\n      )`\r\n    ];\r\n\r\n    for (const tableSQL of tables) {\r\n      await this.executeQuery(tableSQL);\r\n    }\r\n\r\n    // Create indexes\r\n    const indexes = [\r\n      'CREATE INDEX IF NOT EXISTS idx_trades_symbol_timestamp ON trades(symbol, timestamp)',\r\n      'CREATE INDEX IF NOT EXISTS idx_trades_timestamp ON trades(timestamp)',\r\n      'CREATE INDEX IF NOT EXISTS idx_portfolio_timestamp ON portfolio_snapshots(timestamp)',\r\n      'CREATE INDEX IF NOT EXISTS idx_ai_analysis_symbol_timestamp ON ai_analysis(symbol, timestamp)',\r\n      'CREATE INDEX IF NOT EXISTS idx_system_metrics_timestamp ON system_metrics(timestamp)',\r\n      'CREATE INDEX IF NOT EXISTS idx_orders_status ON orders(status)',\r\n      'CREATE INDEX IF NOT EXISTS idx_orders_symbol ON orders(symbol)'\r\n    ];\r\n\r\n    for (const indexSQL of indexes) {\r\n      await this.executeQuery(indexSQL);\r\n    }\r\n\r\n    this.logger.info('\u2705 Database tables and indexes created');\r\n  }\r\n\r\n  /**\r\n   * Run database migrations\r\n   */\r\n  private async runMigrations(): Promise<void> {\r\n    // Create migrations table if it doesn't exist\r\n    await this.executeQuery(`\r\n      CREATE TABLE IF NOT EXISTS migrations (\r\n        id SERIAL PRIMARY KEY,\r\n        name VARCHAR(255) NOT NULL UNIQUE,\r\n        executed_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\r\n      )\r\n    `);\r\n\r\n    // Add any migrations here\r\n    const migrations = [\r\n      // Example migration\r\n      // {\r\n      //   name: '001_add_user_preferences',\r\n      //   sql: 'ALTER TABLE users ADD COLUMN preferences JSONB DEFAULT \\'{}\\'::jsonb'\r\n      // }\r\n    ];\r\n\r\n    for (const migration of migrations) {\r\n      const exists = await this.executeQuery(\r\n        'SELECT 1 FROM migrations WHERE name = $1',\r\n        [migration.name]\r\n      );\r\n\r\n      if (exists.rows.length === 0) {\r\n        await this.executeQuery(migration.sql);\r\n        await this.executeQuery(\r\n          'INSERT INTO migrations (name) VALUES ($1)',\r\n          [migration.name]\r\n        );\r\n        this.logger.info(`\u2705 Migration executed: ${migration.name}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Execute a database query\r\n   */\r\n  async executeQuery(query: string, params: any[] = []): Promise<any> {\r\n    if (!this.pool) {\r\n      throw new Error('Database not initialized');\r\n    }\r\n\r\n    const startTime = Date.now();\r\n    const client = await this.pool.connect();\r\n\r\n    try {\r\n      const result = await client.query(query, params);\r\n      const executionTime = Date.now() - startTime;\r\n      \r\n      this.queryCount++;\r\n      this.totalQueryTime += executionTime;\r\n\r\n      this.logger.debug('Query executed', {\r\n        query: query.substring(0, 100),\r\n        params: params.length,\r\n        rows: result.rows?.length || 0,\r\n        executionTime\r\n      });\r\n\r\n      return result;\r\n\r\n    } catch (error) {\r\n      this.logger.error('Query execution failed', {\r\n        query: query.substring(0, 100),\r\n        params,\r\n        error: error\r\n      });\r\n      throw error;\r\n    } finally {\r\n      client.release();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Save trade record\r\n   */\r\n  async saveTrade(trade: TradeRecord): Promise<string> {\r\n    const query = `\r\n      INSERT INTO trades (symbol, side, amount, price, fee, timestamp, order_id, strategy, pnl, status)\r\n      VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)\r\n      RETURNING id\r\n    `;\r\n\r\n    const params = [\r\n      trade.symbol,\r\n      trade.side,\r\n      trade.amount,\r\n      trade.price,\r\n      trade.fee || 0,\r\n      trade.timestamp,\r\n      trade.orderId,\r\n      trade.strategy,\r\n      trade.pnl,\r\n      trade.status\r\n    ];\r\n\r\n    const result = await this.executeQuery(query, params);\r\n    return result.rows[0].id;\r\n  }\r\n\r\n  /**\r\n   * Get trade history\r\n   */\r\n  async getTradeHistory(symbol?: string, limit: number = 100): Promise<TradeRecord[]> {\r\n    let query = 'SELECT * FROM trades';\r\n    const params: any[] = [];\r\n\r\n    if (symbol) {\r\n      query += ' WHERE symbol = $1';\r\n      params.push(symbol);\r\n    }\r\n\r\n    query += ' ORDER BY timestamp DESC LIMIT $' + (params.length + 1);\r\n    params.push(limit);\r\n\r\n    const result = await this.executeQuery(query, params);\r\n    return result.rows.map(this.mapTradeRecord);\r\n  }\r\n\r\n  /**\r\n   * Save portfolio snapshot\r\n   */\r\n  async savePortfolioSnapshot(snapshot: PortfolioSnapshot): Promise<string> {\r\n    const query = `\r\n      INSERT INTO portfolio_snapshots (timestamp, total_value, balances, positions, pnl, drawdown)\r\n      VALUES ($1, $2, $3, $4, $5, $6)\r\n      RETURNING id\r\n    `;\r\n\r\n    const params = [\r\n      snapshot.timestamp,\r\n      snapshot.totalValue,\r\n      JSON.stringify(snapshot.balances),\r\n      JSON.stringify(snapshot.positions),\r\n      snapshot.pnl,\r\n      snapshot.drawdown\r\n    ];\r\n\r\n    const result = await this.executeQuery(query, params);\r\n    return result.rows[0].id;\r\n  }\r\n\r\n  /**\r\n   * Get portfolio history\r\n   */\r\n  async getPortfolioHistory(limit: number = 100): Promise<PortfolioSnapshot[]> {\r\n    const query = 'SELECT * FROM portfolio_snapshots ORDER BY timestamp DESC LIMIT $1';\r\n    const result = await this.executeQuery(query, [limit]);\r\n    \r\n    return result.rows.map(row => ({\r\n      id: row.id,\r\n      timestamp: row.timestamp,\r\n      totalValue: parseFloat(row.total_value),\r\n      balances: row.balances,\r\n      positions: row.positions,\r\n      pnl: parseFloat(row.pnl),\r\n      drawdown: parseFloat(row.drawdown)\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Save AI analysis result\r\n   */\r\n  async saveAIAnalysis(analysis: AIAnalysisRecord): Promise<string> {\r\n    const query = `\r\n      INSERT INTO ai_analysis (symbol, timestamp, analysis_type, result, confidence, execution_time)\r\n      VALUES ($1, $2, $3, $4, $5, $6)\r\n      RETURNING id\r\n    `;\r\n\r\n    const params = [\r\n      analysis.symbol,\r\n      analysis.timestamp,\r\n      analysis.analysisType,\r\n      JSON.stringify(analysis.result),\r\n      analysis.confidence,\r\n      analysis.executionTime\r\n    ];\r\n\r\n    const result = await this.executeQuery(query, params);\r\n    return result.rows[0].id;\r\n  }\r\n\r\n  /**\r\n   * Get AI analysis history\r\n   */\r\n  async getAIAnalysisHistory(symbol?: string, analysisType?: string, limit: number = 100): Promise<AIAnalysisRecord[]> {\r\n    let query = 'SELECT * FROM ai_analysis WHERE 1=1';\r\n    const params: any[] = [];\r\n\r\n    if (symbol) {\r\n      query += ' AND symbol = $' + (params.length + 1);\r\n      params.push(symbol);\r\n    }\r\n\r\n    if (analysisType) {\r\n      query += ' AND analysis_type = $' + (params.length + 1);\r\n      params.push(analysisType);\r\n    }\r\n\r\n    query += ' ORDER BY timestamp DESC LIMIT $' + (params.length + 1);\r\n    params.push(limit);\r\n\r\n    const result = await this.executeQuery(query, params);\r\n    \r\n    return result.rows.map(row => ({\r\n      id: row.id,\r\n      symbol: row.symbol,\r\n      timestamp: row.timestamp,\r\n      analysisType: row.analysis_type,\r\n      result: row.result,\r\n      confidence: parseFloat(row.confidence),\r\n      executionTime: row.execution_time\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Save system metric\r\n   */\r\n  async saveSystemMetric(metricType: string, metricName: string, value: number, metadata?: any): Promise<void> {\r\n    const query = `\r\n      INSERT INTO system_metrics (timestamp, metric_type, metric_name, value, metadata)\r\n      VALUES ($1, $2, $3, $4, $5)\r\n    `;\r\n\r\n    const params = [\r\n      new Date(),\r\n      metricType,\r\n      metricName,\r\n      value,\r\n      metadata ? JSON.stringify(metadata) : null\r\n    ];\r\n\r\n    await this.executeQuery(query, params);\r\n  }\r\n\r\n  /**\r\n   * Get database health status\r\n   */\r\n  async getHealth(): Promise<DatabaseHealth> {\r\n    if (!this.pool) {\r\n      return {\r\n        isHealthy: false,\r\n        connectionCount: 0,\r\n        activeConnections: 0,\r\n        idleConnections: 0,\r\n        totalQueries: this.queryCount,\r\n        averageQueryTime: 0,\r\n        lastError: 'Database not initialized',\r\n        uptime: 0,\r\n        timestamp: new Date()\r\n      };\r\n    }\r\n\r\n    try {\r\n      const health: DatabaseHealth = {\r\n        isHealthy: true,\r\n        connectionCount: this.pool.totalCount,\r\n        activeConnections: this.pool.totalCount - this.pool.idleCount,\r\n        idleConnections: this.pool.idleCount,\r\n        totalQueries: this.queryCount,\r\n        averageQueryTime: this.queryCount > 0 ? this.totalQueryTime / this.queryCount : 0,\r\n        lastError: null,\r\n        uptime: Date.now() - this.startTime.getTime(),\r\n        timestamp: new Date()\r\n      };\r\n\r\n      // Test connection\r\n      await this.executeQuery('SELECT 1');\r\n\r\n      return health;\r\n\r\n    } catch (error) {\r\n      return {\r\n        isHealthy: false,\r\n        connectionCount: 0,\r\n        activeConnections: 0,\r\n        idleConnections: 0,\r\n        totalQueries: this.queryCount,\r\n        averageQueryTime: 0,\r\n        lastError: error instanceof Error ? error.message : String(error),\r\n        uptime: Date.now() - this.startTime.getTime(),\r\n        timestamp: new Date()\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Disconnect from database\r\n   */\r\n  async disconnect(): Promise<void> {\r\n    if (this.pool) {\r\n      await this.pool.end();\r\n      this.pool = null;\r\n      this.logger.info('\u2705 Database connection closed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Map database row to trade record\r\n   */\r\n  private mapTradeRecord(row: any): TradeRecord {\r\n    return {\r\n      id: row.id,\r\n      symbol: row.symbol,\r\n      side: row.side,\r\n      amount: parseFloat(row.amount),\r\n      price: parseFloat(row.price),\r\n      fee: parseFloat(row.fee || 0),\r\n      timestamp: row.timestamp,\r\n      orderId: row.order_id,\r\n      strategy: row.strategy,\r\n      pnl: row.pnl ? parseFloat(row.pnl) : undefined,\r\n      status: row.status\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get database manager status for monitoring\r\n   */\r\n  getStatus(): {\r\n    isInitialized: boolean;\r\n    connectionCount: number;\r\n    totalQueries: number;\r\n    timestamp: number;\r\n  } {\r\n    return {\r\n      isInitialized: this.isInitialized,\r\n      connectionCount: this.pool?.totalCount || 0,\r\n      totalQueries: this.queryCount,\r\n      timestamp: Date.now()\r\n    };\r\n  }\r\n}\r\n\r\nexport default DatabaseManager;\r\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "718c7b2701bf11e6f2bbc4e74d3599c6bf683f2b"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_s6xzxixiw = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_s6xzxixiw();
cov_s6xzxixiw().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_s6xzxixiw().s[1]++;
exports.DatabaseManager = void 0;
const pg_1 =
/* istanbul ignore next */
(cov_s6xzxixiw().s[2]++, require("pg"));
const logger_1 =
/* istanbul ignore next */
(cov_s6xzxixiw().s[3]++, require("../logging/logger"));
/**
 * Main Database Manager class
 * Handles all database operations and connection management
 */
class DatabaseManager {
  logger;
  config;
  pool =
  /* istanbul ignore next */
  (cov_s6xzxixiw().s[4]++, null);
  isInitialized =
  /* istanbul ignore next */
  (cov_s6xzxixiw().s[5]++, false);
  queryCount =
  /* istanbul ignore next */
  (cov_s6xzxixiw().s[6]++, 0);
  totalQueryTime =
  /* istanbul ignore next */
  (cov_s6xzxixiw().s[7]++, 0);
  startTime =
  /* istanbul ignore next */
  (cov_s6xzxixiw().s[8]++, new Date());
  constructor(config) {
    /* istanbul ignore next */
    cov_s6xzxixiw().f[0]++;
    cov_s6xzxixiw().s[9]++;
    this.logger = new logger_1.Logger('DatabaseManager');
    /* istanbul ignore next */
    cov_s6xzxixiw().s[10]++;
    this.config = config;
    /* istanbul ignore next */
    cov_s6xzxixiw().s[11]++;
    this.logger.info('Database Manager created', {
      type: config.type,
      host: config.host,
      database: config.database
    });
  }
  /**
   * Initialize the database connection and schema
   */
  async initialize() {
    /* istanbul ignore next */
    cov_s6xzxixiw().f[1]++;
    cov_s6xzxixiw().s[12]++;
    try {
      /* istanbul ignore next */
      cov_s6xzxixiw().s[13]++;
      this.logger.info('💾 Initializing Database Manager...');
      /* istanbul ignore next */
      cov_s6xzxixiw().s[14]++;
      if (this.config.type === 'postgresql') {
        /* istanbul ignore next */
        cov_s6xzxixiw().b[0][0]++;
        cov_s6xzxixiw().s[15]++;
        await this.initializePostgreSQL();
      } else {
        /* istanbul ignore next */
        cov_s6xzxixiw().b[0][1]++;
        cov_s6xzxixiw().s[16]++;
        throw new Error(`Database type ${this.config.type} not yet implemented`);
      }
      // Create tables if they don't exist
      /* istanbul ignore next */
      cov_s6xzxixiw().s[17]++;
      await this.createTables();
      // Run any pending migrations
      /* istanbul ignore next */
      cov_s6xzxixiw().s[18]++;
      await this.runMigrations();
      /* istanbul ignore next */
      cov_s6xzxixiw().s[19]++;
      this.isInitialized = true;
      /* istanbul ignore next */
      cov_s6xzxixiw().s[20]++;
      this.logger.info('✅ Database Manager initialization complete');
    } catch (error) {
      /* istanbul ignore next */
      cov_s6xzxixiw().s[21]++;
      this.logger.error('❌ Database Manager initialization failed:', error);
      /* istanbul ignore next */
      cov_s6xzxixiw().s[22]++;
      throw new Error(`Database initialization failed: ${error}`);
    }
  }
  /**
   * Initialize PostgreSQL connection pool
   */
  async initializePostgreSQL() {
    /* istanbul ignore next */
    cov_s6xzxixiw().f[2]++;
    const poolConfig =
    /* istanbul ignore next */
    (cov_s6xzxixiw().s[23]++, {
      host: this.config.host,
      port: this.config.port,
      database: this.config.database,
      user: this.config.username,
      password: this.config.password,
      ssl: this.config.ssl,
      max:
      /* istanbul ignore next */
      (cov_s6xzxixiw().b[1][0]++, this.config.maxConnections) ||
      /* istanbul ignore next */
      (cov_s6xzxixiw().b[1][1]++, 20),
      idleTimeoutMillis:
      /* istanbul ignore next */
      (cov_s6xzxixiw().b[2][0]++, this.config.idleTimeout) ||
      /* istanbul ignore next */
      (cov_s6xzxixiw().b[2][1]++, 30000),
      connectionTimeoutMillis:
      /* istanbul ignore next */
      (cov_s6xzxixiw().b[3][0]++, this.config.connectionTimeout) ||
      /* istanbul ignore next */
      (cov_s6xzxixiw().b[3][1]++, 60000)
    });
    /* istanbul ignore next */
    cov_s6xzxixiw().s[24]++;
    this.pool = new pg_1.Pool(poolConfig);
    // Test connection
    const client =
    /* istanbul ignore next */
    (cov_s6xzxixiw().s[25]++, await this.pool.connect());
    /* istanbul ignore next */
    cov_s6xzxixiw().s[26]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_s6xzxixiw().s[27]++, await client.query('SELECT NOW()'));
      /* istanbul ignore next */
      cov_s6xzxixiw().s[28]++;
      this.logger.info('✅ PostgreSQL connection established', {
        serverTime: result.rows[0].now
      });
    } finally {
      /* istanbul ignore next */
      cov_s6xzxixiw().s[29]++;
      client.release();
    }
    // Set up error handling
    /* istanbul ignore next */
    cov_s6xzxixiw().s[30]++;
    this.pool.on('error', err => {
      /* istanbul ignore next */
      cov_s6xzxixiw().f[3]++;
      cov_s6xzxixiw().s[31]++;
      this.logger.error('PostgreSQL pool error:', err);
    });
    /* istanbul ignore next */
    cov_s6xzxixiw().s[32]++;
    this.pool.on('connect', () => {
      /* istanbul ignore next */
      cov_s6xzxixiw().f[4]++;
      cov_s6xzxixiw().s[33]++;
      this.logger.debug('New PostgreSQL client connected');
    });
    /* istanbul ignore next */
    cov_s6xzxixiw().s[34]++;
    this.pool.on('remove', () => {
      /* istanbul ignore next */
      cov_s6xzxixiw().f[5]++;
      cov_s6xzxixiw().s[35]++;
      this.logger.debug('PostgreSQL client removed from pool');
    });
  }
  /**
   * Create database tables
   */
  async createTables() {
    /* istanbul ignore next */
    cov_s6xzxixiw().f[6]++;
    const tables =
    /* istanbul ignore next */
    (cov_s6xzxixiw().s[36]++, [
    // Trades table
    `CREATE TABLE IF NOT EXISTS trades (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        symbol VARCHAR(20) NOT NULL,
        side VARCHAR(4) NOT NULL CHECK (side IN ('buy', 'sell')),
        amount DECIMAL(20, 8) NOT NULL,
        price DECIMAL(20, 8) NOT NULL,
        fee DECIMAL(20, 8) DEFAULT 0,
        timestamp TIMESTAMP WITH TIME ZONE NOT NULL,
        order_id VARCHAR(100) NOT NULL,
        strategy VARCHAR(50),
        pnl DECIMAL(20, 8),
        status VARCHAR(20) NOT NULL DEFAULT 'pending',
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
      )`,
    // Portfolio snapshots table
    `CREATE TABLE IF NOT EXISTS portfolio_snapshots (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        timestamp TIMESTAMP WITH TIME ZONE NOT NULL,
        total_value DECIMAL(20, 8) NOT NULL,
        balances JSONB NOT NULL,
        positions JSONB NOT NULL,
        pnl DECIMAL(20, 8) NOT NULL,
        drawdown DECIMAL(10, 4) NOT NULL,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
      )`,
    // AI analysis results table
    `CREATE TABLE IF NOT EXISTS ai_analysis (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        symbol VARCHAR(20) NOT NULL,
        timestamp TIMESTAMP WITH TIME ZONE NOT NULL,
        analysis_type VARCHAR(50) NOT NULL,
        result JSONB NOT NULL,
        confidence DECIMAL(5, 4) NOT NULL,
        execution_time INTEGER NOT NULL,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
      )`,
    // System metrics table
    `CREATE TABLE IF NOT EXISTS system_metrics (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        timestamp TIMESTAMP WITH TIME ZONE NOT NULL,
        metric_type VARCHAR(50) NOT NULL,
        metric_name VARCHAR(100) NOT NULL,
        value DECIMAL(20, 8) NOT NULL,
        metadata JSONB,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
      )`,
    // Orders table
    `CREATE TABLE IF NOT EXISTS orders (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        order_id VARCHAR(100) UNIQUE NOT NULL,
        symbol VARCHAR(20) NOT NULL,
        side VARCHAR(4) NOT NULL CHECK (side IN ('buy', 'sell')),
        type VARCHAR(20) NOT NULL,
        amount DECIMAL(20, 8) NOT NULL,
        price DECIMAL(20, 8),
        filled_amount DECIMAL(20, 8) DEFAULT 0,
        status VARCHAR(20) NOT NULL,
        strategy VARCHAR(50),
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
      )`]);
    /* istanbul ignore next */
    cov_s6xzxixiw().s[37]++;
    for (const tableSQL of tables) {
      /* istanbul ignore next */
      cov_s6xzxixiw().s[38]++;
      await this.executeQuery(tableSQL);
    }
    // Create indexes
    const indexes =
    /* istanbul ignore next */
    (cov_s6xzxixiw().s[39]++, ['CREATE INDEX IF NOT EXISTS idx_trades_symbol_timestamp ON trades(symbol, timestamp)', 'CREATE INDEX IF NOT EXISTS idx_trades_timestamp ON trades(timestamp)', 'CREATE INDEX IF NOT EXISTS idx_portfolio_timestamp ON portfolio_snapshots(timestamp)', 'CREATE INDEX IF NOT EXISTS idx_ai_analysis_symbol_timestamp ON ai_analysis(symbol, timestamp)', 'CREATE INDEX IF NOT EXISTS idx_system_metrics_timestamp ON system_metrics(timestamp)', 'CREATE INDEX IF NOT EXISTS idx_orders_status ON orders(status)', 'CREATE INDEX IF NOT EXISTS idx_orders_symbol ON orders(symbol)']);
    /* istanbul ignore next */
    cov_s6xzxixiw().s[40]++;
    for (const indexSQL of indexes) {
      /* istanbul ignore next */
      cov_s6xzxixiw().s[41]++;
      await this.executeQuery(indexSQL);
    }
    /* istanbul ignore next */
    cov_s6xzxixiw().s[42]++;
    this.logger.info('✅ Database tables and indexes created');
  }
  /**
   * Run database migrations
   */
  async runMigrations() {
    /* istanbul ignore next */
    cov_s6xzxixiw().f[7]++;
    cov_s6xzxixiw().s[43]++;
    // Create migrations table if it doesn't exist
    await this.executeQuery(`
      CREATE TABLE IF NOT EXISTS migrations (
        id SERIAL PRIMARY KEY,
        name VARCHAR(255) NOT NULL UNIQUE,
        executed_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
      )
    `);
    // Add any migrations here
    const migrations =
    /* istanbul ignore next */
    (cov_s6xzxixiw().s[44]++, [] // Example migration
    // {
    //   name: '001_add_user_preferences',
    //   sql: 'ALTER TABLE users ADD COLUMN preferences JSONB DEFAULT \'{}\'::jsonb'
    // }
    );
    /* istanbul ignore next */
    cov_s6xzxixiw().s[45]++;
    for (const migration of migrations) {
      const exists =
      /* istanbul ignore next */
      (cov_s6xzxixiw().s[46]++, await this.executeQuery('SELECT 1 FROM migrations WHERE name = $1', [migration.name]));
      /* istanbul ignore next */
      cov_s6xzxixiw().s[47]++;
      if (exists.rows.length === 0) {
        /* istanbul ignore next */
        cov_s6xzxixiw().b[4][0]++;
        cov_s6xzxixiw().s[48]++;
        await this.executeQuery(migration.sql);
        /* istanbul ignore next */
        cov_s6xzxixiw().s[49]++;
        await this.executeQuery('INSERT INTO migrations (name) VALUES ($1)', [migration.name]);
        /* istanbul ignore next */
        cov_s6xzxixiw().s[50]++;
        this.logger.info(`✅ Migration executed: ${migration.name}`);
      } else
      /* istanbul ignore next */
      {
        cov_s6xzxixiw().b[4][1]++;
      }
    }
  }
  /**
   * Execute a database query
   */
  async executeQuery(query, params =
  /* istanbul ignore next */
  (cov_s6xzxixiw().b[5][0]++, [])) {
    /* istanbul ignore next */
    cov_s6xzxixiw().f[8]++;
    cov_s6xzxixiw().s[51]++;
    if (!this.pool) {
      /* istanbul ignore next */
      cov_s6xzxixiw().b[6][0]++;
      cov_s6xzxixiw().s[52]++;
      throw new Error('Database not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_s6xzxixiw().b[6][1]++;
    }
    const startTime =
    /* istanbul ignore next */
    (cov_s6xzxixiw().s[53]++, Date.now());
    const client =
    /* istanbul ignore next */
    (cov_s6xzxixiw().s[54]++, await this.pool.connect());
    /* istanbul ignore next */
    cov_s6xzxixiw().s[55]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_s6xzxixiw().s[56]++, await client.query(query, params));
      const executionTime =
      /* istanbul ignore next */
      (cov_s6xzxixiw().s[57]++, Date.now() - startTime);
      /* istanbul ignore next */
      cov_s6xzxixiw().s[58]++;
      this.queryCount++;
      /* istanbul ignore next */
      cov_s6xzxixiw().s[59]++;
      this.totalQueryTime += executionTime;
      /* istanbul ignore next */
      cov_s6xzxixiw().s[60]++;
      this.logger.debug('Query executed', {
        query: query.substring(0, 100),
        params: params.length,
        rows:
        /* istanbul ignore next */
        (cov_s6xzxixiw().b[7][0]++, result.rows?.length) ||
        /* istanbul ignore next */
        (cov_s6xzxixiw().b[7][1]++, 0),
        executionTime
      });
      /* istanbul ignore next */
      cov_s6xzxixiw().s[61]++;
      return result;
    } catch (error) {
      /* istanbul ignore next */
      cov_s6xzxixiw().s[62]++;
      this.logger.error('Query execution failed', {
        query: query.substring(0, 100),
        params,
        error: error
      });
      /* istanbul ignore next */
      cov_s6xzxixiw().s[63]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_s6xzxixiw().s[64]++;
      client.release();
    }
  }
  /**
   * Save trade record
   */
  async saveTrade(trade) {
    /* istanbul ignore next */
    cov_s6xzxixiw().f[9]++;
    const query =
    /* istanbul ignore next */
    (cov_s6xzxixiw().s[65]++, `
      INSERT INTO trades (symbol, side, amount, price, fee, timestamp, order_id, strategy, pnl, status)
      VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
      RETURNING id
    `);
    const params =
    /* istanbul ignore next */
    (cov_s6xzxixiw().s[66]++, [trade.symbol, trade.side, trade.amount, trade.price,
    /* istanbul ignore next */
    (cov_s6xzxixiw().b[8][0]++, trade.fee) ||
    /* istanbul ignore next */
    (cov_s6xzxixiw().b[8][1]++, 0), trade.timestamp, trade.orderId, trade.strategy, trade.pnl, trade.status]);
    const result =
    /* istanbul ignore next */
    (cov_s6xzxixiw().s[67]++, await this.executeQuery(query, params));
    /* istanbul ignore next */
    cov_s6xzxixiw().s[68]++;
    return result.rows[0].id;
  }
  /**
   * Get trade history
   */
  async getTradeHistory(symbol, limit =
  /* istanbul ignore next */
  (cov_s6xzxixiw().b[9][0]++, 100)) {
    /* istanbul ignore next */
    cov_s6xzxixiw().f[10]++;
    let query =
    /* istanbul ignore next */
    (cov_s6xzxixiw().s[69]++, 'SELECT * FROM trades');
    const params =
    /* istanbul ignore next */
    (cov_s6xzxixiw().s[70]++, []);
    /* istanbul ignore next */
    cov_s6xzxixiw().s[71]++;
    if (symbol) {
      /* istanbul ignore next */
      cov_s6xzxixiw().b[10][0]++;
      cov_s6xzxixiw().s[72]++;
      query += ' WHERE symbol = $1';
      /* istanbul ignore next */
      cov_s6xzxixiw().s[73]++;
      params.push(symbol);
    } else
    /* istanbul ignore next */
    {
      cov_s6xzxixiw().b[10][1]++;
    }
    cov_s6xzxixiw().s[74]++;
    query += ' ORDER BY timestamp DESC LIMIT $' + (params.length + 1);
    /* istanbul ignore next */
    cov_s6xzxixiw().s[75]++;
    params.push(limit);
    const result =
    /* istanbul ignore next */
    (cov_s6xzxixiw().s[76]++, await this.executeQuery(query, params));
    /* istanbul ignore next */
    cov_s6xzxixiw().s[77]++;
    return result.rows.map(this.mapTradeRecord);
  }
  /**
   * Save portfolio snapshot
   */
  async savePortfolioSnapshot(snapshot) {
    /* istanbul ignore next */
    cov_s6xzxixiw().f[11]++;
    const query =
    /* istanbul ignore next */
    (cov_s6xzxixiw().s[78]++, `
      INSERT INTO portfolio_snapshots (timestamp, total_value, balances, positions, pnl, drawdown)
      VALUES ($1, $2, $3, $4, $5, $6)
      RETURNING id
    `);
    const params =
    /* istanbul ignore next */
    (cov_s6xzxixiw().s[79]++, [snapshot.timestamp, snapshot.totalValue, JSON.stringify(snapshot.balances), JSON.stringify(snapshot.positions), snapshot.pnl, snapshot.drawdown]);
    const result =
    /* istanbul ignore next */
    (cov_s6xzxixiw().s[80]++, await this.executeQuery(query, params));
    /* istanbul ignore next */
    cov_s6xzxixiw().s[81]++;
    return result.rows[0].id;
  }
  /**
   * Get portfolio history
   */
  async getPortfolioHistory(limit =
  /* istanbul ignore next */
  (cov_s6xzxixiw().b[11][0]++, 100)) {
    /* istanbul ignore next */
    cov_s6xzxixiw().f[12]++;
    const query =
    /* istanbul ignore next */
    (cov_s6xzxixiw().s[82]++, 'SELECT * FROM portfolio_snapshots ORDER BY timestamp DESC LIMIT $1');
    const result =
    /* istanbul ignore next */
    (cov_s6xzxixiw().s[83]++, await this.executeQuery(query, [limit]));
    /* istanbul ignore next */
    cov_s6xzxixiw().s[84]++;
    return result.rows.map(row => {
      /* istanbul ignore next */
      cov_s6xzxixiw().f[13]++;
      cov_s6xzxixiw().s[85]++;
      return {
        id: row.id,
        timestamp: row.timestamp,
        totalValue: parseFloat(row.total_value),
        balances: row.balances,
        positions: row.positions,
        pnl: parseFloat(row.pnl),
        drawdown: parseFloat(row.drawdown)
      };
    });
  }
  /**
   * Save AI analysis result
   */
  async saveAIAnalysis(analysis) {
    /* istanbul ignore next */
    cov_s6xzxixiw().f[14]++;
    const query =
    /* istanbul ignore next */
    (cov_s6xzxixiw().s[86]++, `
      INSERT INTO ai_analysis (symbol, timestamp, analysis_type, result, confidence, execution_time)
      VALUES ($1, $2, $3, $4, $5, $6)
      RETURNING id
    `);
    const params =
    /* istanbul ignore next */
    (cov_s6xzxixiw().s[87]++, [analysis.symbol, analysis.timestamp, analysis.analysisType, JSON.stringify(analysis.result), analysis.confidence, analysis.executionTime]);
    const result =
    /* istanbul ignore next */
    (cov_s6xzxixiw().s[88]++, await this.executeQuery(query, params));
    /* istanbul ignore next */
    cov_s6xzxixiw().s[89]++;
    return result.rows[0].id;
  }
  /**
   * Get AI analysis history
   */
  async getAIAnalysisHistory(symbol, analysisType, limit =
  /* istanbul ignore next */
  (cov_s6xzxixiw().b[12][0]++, 100)) {
    /* istanbul ignore next */
    cov_s6xzxixiw().f[15]++;
    let query =
    /* istanbul ignore next */
    (cov_s6xzxixiw().s[90]++, 'SELECT * FROM ai_analysis WHERE 1=1');
    const params =
    /* istanbul ignore next */
    (cov_s6xzxixiw().s[91]++, []);
    /* istanbul ignore next */
    cov_s6xzxixiw().s[92]++;
    if (symbol) {
      /* istanbul ignore next */
      cov_s6xzxixiw().b[13][0]++;
      cov_s6xzxixiw().s[93]++;
      query += ' AND symbol = $' + (params.length + 1);
      /* istanbul ignore next */
      cov_s6xzxixiw().s[94]++;
      params.push(symbol);
    } else
    /* istanbul ignore next */
    {
      cov_s6xzxixiw().b[13][1]++;
    }
    cov_s6xzxixiw().s[95]++;
    if (analysisType) {
      /* istanbul ignore next */
      cov_s6xzxixiw().b[14][0]++;
      cov_s6xzxixiw().s[96]++;
      query += ' AND analysis_type = $' + (params.length + 1);
      /* istanbul ignore next */
      cov_s6xzxixiw().s[97]++;
      params.push(analysisType);
    } else
    /* istanbul ignore next */
    {
      cov_s6xzxixiw().b[14][1]++;
    }
    cov_s6xzxixiw().s[98]++;
    query += ' ORDER BY timestamp DESC LIMIT $' + (params.length + 1);
    /* istanbul ignore next */
    cov_s6xzxixiw().s[99]++;
    params.push(limit);
    const result =
    /* istanbul ignore next */
    (cov_s6xzxixiw().s[100]++, await this.executeQuery(query, params));
    /* istanbul ignore next */
    cov_s6xzxixiw().s[101]++;
    return result.rows.map(row => {
      /* istanbul ignore next */
      cov_s6xzxixiw().f[16]++;
      cov_s6xzxixiw().s[102]++;
      return {
        id: row.id,
        symbol: row.symbol,
        timestamp: row.timestamp,
        analysisType: row.analysis_type,
        result: row.result,
        confidence: parseFloat(row.confidence),
        executionTime: row.execution_time
      };
    });
  }
  /**
   * Save system metric
   */
  async saveSystemMetric(metricType, metricName, value, metadata) {
    /* istanbul ignore next */
    cov_s6xzxixiw().f[17]++;
    const query =
    /* istanbul ignore next */
    (cov_s6xzxixiw().s[103]++, `
      INSERT INTO system_metrics (timestamp, metric_type, metric_name, value, metadata)
      VALUES ($1, $2, $3, $4, $5)
    `);
    const params =
    /* istanbul ignore next */
    (cov_s6xzxixiw().s[104]++, [new Date(), metricType, metricName, value, metadata ?
    /* istanbul ignore next */
    (cov_s6xzxixiw().b[15][0]++, JSON.stringify(metadata)) :
    /* istanbul ignore next */
    (cov_s6xzxixiw().b[15][1]++, null)]);
    /* istanbul ignore next */
    cov_s6xzxixiw().s[105]++;
    await this.executeQuery(query, params);
  }
  /**
   * Get database health status
   */
  async getHealth() {
    /* istanbul ignore next */
    cov_s6xzxixiw().f[18]++;
    cov_s6xzxixiw().s[106]++;
    if (!this.pool) {
      /* istanbul ignore next */
      cov_s6xzxixiw().b[16][0]++;
      cov_s6xzxixiw().s[107]++;
      return {
        isHealthy: false,
        connectionCount: 0,
        activeConnections: 0,
        idleConnections: 0,
        totalQueries: this.queryCount,
        averageQueryTime: 0,
        lastError: 'Database not initialized',
        uptime: 0,
        timestamp: new Date()
      };
    } else
    /* istanbul ignore next */
    {
      cov_s6xzxixiw().b[16][1]++;
    }
    cov_s6xzxixiw().s[108]++;
    try {
      const health =
      /* istanbul ignore next */
      (cov_s6xzxixiw().s[109]++, {
        isHealthy: true,
        connectionCount: this.pool.totalCount,
        activeConnections: this.pool.totalCount - this.pool.idleCount,
        idleConnections: this.pool.idleCount,
        totalQueries: this.queryCount,
        averageQueryTime: this.queryCount > 0 ?
        /* istanbul ignore next */
        (cov_s6xzxixiw().b[17][0]++, this.totalQueryTime / this.queryCount) :
        /* istanbul ignore next */
        (cov_s6xzxixiw().b[17][1]++, 0),
        lastError: null,
        uptime: Date.now() - this.startTime.getTime(),
        timestamp: new Date()
      });
      // Test connection
      /* istanbul ignore next */
      cov_s6xzxixiw().s[110]++;
      await this.executeQuery('SELECT 1');
      /* istanbul ignore next */
      cov_s6xzxixiw().s[111]++;
      return health;
    } catch (error) {
      /* istanbul ignore next */
      cov_s6xzxixiw().s[112]++;
      return {
        isHealthy: false,
        connectionCount: 0,
        activeConnections: 0,
        idleConnections: 0,
        totalQueries: this.queryCount,
        averageQueryTime: 0,
        lastError: error instanceof Error ?
        /* istanbul ignore next */
        (cov_s6xzxixiw().b[18][0]++, error.message) :
        /* istanbul ignore next */
        (cov_s6xzxixiw().b[18][1]++, String(error)),
        uptime: Date.now() - this.startTime.getTime(),
        timestamp: new Date()
      };
    }
  }
  /**
   * Disconnect from database
   */
  async disconnect() {
    /* istanbul ignore next */
    cov_s6xzxixiw().f[19]++;
    cov_s6xzxixiw().s[113]++;
    if (this.pool) {
      /* istanbul ignore next */
      cov_s6xzxixiw().b[19][0]++;
      cov_s6xzxixiw().s[114]++;
      await this.pool.end();
      /* istanbul ignore next */
      cov_s6xzxixiw().s[115]++;
      this.pool = null;
      /* istanbul ignore next */
      cov_s6xzxixiw().s[116]++;
      this.logger.info('✅ Database connection closed');
    } else
    /* istanbul ignore next */
    {
      cov_s6xzxixiw().b[19][1]++;
    }
  }
  /**
   * Map database row to trade record
   */
  mapTradeRecord(row) {
    /* istanbul ignore next */
    cov_s6xzxixiw().f[20]++;
    cov_s6xzxixiw().s[117]++;
    return {
      id: row.id,
      symbol: row.symbol,
      side: row.side,
      amount: parseFloat(row.amount),
      price: parseFloat(row.price),
      fee: parseFloat(
      /* istanbul ignore next */
      (cov_s6xzxixiw().b[20][0]++, row.fee) ||
      /* istanbul ignore next */
      (cov_s6xzxixiw().b[20][1]++, 0)),
      timestamp: row.timestamp,
      orderId: row.order_id,
      strategy: row.strategy,
      pnl: row.pnl ?
      /* istanbul ignore next */
      (cov_s6xzxixiw().b[21][0]++, parseFloat(row.pnl)) :
      /* istanbul ignore next */
      (cov_s6xzxixiw().b[21][1]++, undefined),
      status: row.status
    };
  }
  /**
   * Get database manager status for monitoring
   */
  getStatus() {
    /* istanbul ignore next */
    cov_s6xzxixiw().f[21]++;
    cov_s6xzxixiw().s[118]++;
    return {
      isInitialized: this.isInitialized,
      connectionCount:
      /* istanbul ignore next */
      (cov_s6xzxixiw().b[22][0]++, this.pool?.totalCount) ||
      /* istanbul ignore next */
      (cov_s6xzxixiw().b[22][1]++, 0),
      totalQueries: this.queryCount,
      timestamp: Date.now()
    };
  }
}
/* istanbul ignore next */
cov_s6xzxixiw().s[119]++;
exports.DatabaseManager = DatabaseManager;
/* istanbul ignore next */
cov_s6xzxixiw().s[120]++;
exports.default = DatabaseManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,