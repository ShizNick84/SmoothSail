{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\api\\tunnel-router.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\api\\tunnel-router.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * SSH TUNNEL ROUTER FOR GATE.IO API REQUESTS\r\n * =============================================================================\r\n * \r\n * This module implements intelligent routing of Gate.io API requests through\r\n * SSH tunnel infrastructure with request queuing, retry mechanisms, and\r\n * comprehensive validation and integrity checking.\r\n * \r\n * SECURITY FEATURES:\r\n * - All API requests routed through secure SSH tunnel\r\n * - Request/response integrity validation with checksums\r\n * - Comprehensive audit logging for all tunnel operations\r\n * - Automatic failover and load balancing across multiple tunnels\r\n * - Request queuing with priority-based processing\r\n * - Circuit breaker pattern for tunnel health management\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport { EventEmitter } from 'events';\r\nimport crypto from 'crypto';\r\nimport { logger } from '@/core/logging/logger';\r\nimport { AuditService } from '@/security/audit-service';\r\nimport { SSHTunnelManager, TunnelConnection, TunnelState } from '@/infrastructure/ssh-tunnel-manager';\r\nimport { AxiosRequestConfig, AxiosResponse } from 'axios';\r\n\r\n/**\r\n * Request priority levels for queue management\r\n */\r\nexport enum RequestPriority {\r\n  LOW = 1,\r\n  NORMAL = 2,\r\n  HIGH = 3,\r\n  CRITICAL = 4\r\n}\r\n\r\n/**\r\n * Request queue entry\r\n */\r\ninterface QueuedRequest {\r\n  id: string;\r\n  config: AxiosRequestConfig;\r\n  priority: RequestPriority;\r\n  timestamp: Date;\r\n  retryCount: number;\r\n  maxRetries: number;\r\n  resolve: (value: AxiosResponse) => void;\r\n  reject: (error: Error) => void;\r\n}\r\n\r\n/**\r\n * Tunnel routing statistics\r\n */\r\ninterface TunnelRoutingStats {\r\n  totalRequests: number;\r\n  successfulRequests: number;\r\n  failedRequests: number;\r\n  queuedRequests: number;\r\n  averageResponseTime: number;\r\n  tunnelSwitches: number;\r\n  integrityFailures: number;\r\n  lastRequestTime: Date | null;\r\n}\r\n\r\n/**\r\n * Request validation result\r\n */\r\ninterface ValidationResult {\r\n  isValid: boolean;\r\n  checksum: string;\r\n  timestamp: Date;\r\n  errors: string[];\r\n}\r\n\r\n/**\r\n * Response integrity check result\r\n */\r\ninterface IntegrityCheckResult {\r\n  isValid: boolean;\r\n  expectedChecksum: string;\r\n  actualChecksum: string;\r\n  timestamp: Date;\r\n}\r\n\r\n/**\r\n * Tunnel health status\r\n */\r\ninterface TunnelHealthStatus {\r\n  tunnelId: string;\r\n  isHealthy: boolean;\r\n  responseTime: number;\r\n  errorRate: number;\r\n  lastHealthCheck: Date;\r\n  consecutiveFailures: number;\r\n}\r\n\r\n/**\r\n * SSH Tunnel Router for Gate.io API Requests\r\n * Manages intelligent routing through SSH tunnel infrastructure\r\n */\r\nexport class TunnelRouter extends EventEmitter {\r\n  private tunnelManager: SSHTunnelManager;\r\n  private auditService: AuditService;\r\n  private requestQueue: QueuedRequest[] = [];\r\n  private isProcessingQueue: boolean = false;\r\n  private activeTunnels: Map<string, TunnelHealthStatus> = new Map();\r\n  private routingStats: TunnelRoutingStats;\r\n  private currentTunnelId: string | null = null;\r\n  \r\n  // Configuration\r\n  private readonly maxQueueSize: number = 1000;\r\n  private readonly maxRetries: number = 3;\r\n  private readonly requestTimeout: number = 30000; // 30 seconds\r\n  private readonly healthCheckInterval: number = 60000; // 1 minute\r\n  private readonly failureThreshold: number = 5;\r\n  \r\n  // Health monitoring\r\n  private healthCheckTimer: NodeJS.Timeout | null = null;\r\n\r\n  constructor(tunnelManager: SSHTunnelManager) {\r\n    super();\r\n    \r\n    this.tunnelManager = tunnelManager;\r\n    this.auditService = new AuditService();\r\n    \r\n    // Initialize routing statistics\r\n    this.routingStats = {\r\n      totalRequests: 0,\r\n      successfulRequests: 0,\r\n      failedRequests: 0,\r\n      queuedRequests: 0,\r\n      averageResponseTime: 0,\r\n      tunnelSwitches: 0,\r\n      integrityFailures: 0,\r\n      lastRequestTime: null,\r\n    };\r\n    \r\n    // Set up tunnel manager event listeners\r\n    this.setupTunnelEventListeners();\r\n    \r\n    // Start health monitoring\r\n    this.startHealthMonitoring();\r\n    \r\n    logger.info('🌐 Tunnel Router initialized for Gate.io API requests');\r\n  }\r\n\r\n  /**\r\n   * Initialize tunnel router with SSH tunnel connections\r\n   * \r\n   * @param tunnelConfigs - Array of tunnel configurations\r\n   * @returns Promise<boolean> - Success status\r\n   */\r\n  public async initialize(tunnelConfigs: any[]): Promise<boolean> {\r\n    try {\r\n      logger.info('🚀 Initializing tunnel router with SSH connections...');\r\n      \r\n      // Create and establish tunnel connections\r\n      for (const config of tunnelConfigs) {\r\n        const connection = await this.tunnelManager.createTunnel(config);\r\n        await this.tunnelManager.establishTunnel(connection.id);\r\n        \r\n        // Initialize health status for tunnel\r\n        this.activeTunnels.set(connection.id, {\r\n          tunnelId: connection.id,\r\n          isHealthy: true,\r\n          responseTime: 0,\r\n          errorRate: 0,\r\n          lastHealthCheck: new Date(),\r\n          consecutiveFailures: 0,\r\n        });\r\n        \r\n        logger.info(`✅ Tunnel established: ${connection.id}`);\r\n      }\r\n      \r\n      // Select initial active tunnel\r\n      this.selectActiveTunnel();\r\n      \r\n      // Start request queue processing\r\n      this.startQueueProcessing();\r\n      \r\n      await this.auditService.logSecurityEvent({\r\n        type: 'TUNNEL_ROUTER_INITIALIZED',\r\n        severity: 'INFO',\r\n        details: { \r\n          tunnelCount: tunnelConfigs.length,\r\n          activeTunnelId: this.currentTunnelId \r\n        },\r\n        timestamp: new Date(),\r\n      });\r\n      \r\n      logger.info('✅ Tunnel router initialized successfully');\r\n      return true;\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to initialize tunnel router:', error);\r\n      await this.auditService.logSecurityEvent({\r\n        type: 'TUNNEL_ROUTER_INIT_FAILED',\r\n        severity: 'ERROR',\r\n        details: { error: error.message },\r\n        timestamp: new Date(),\r\n      });\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Route API request through SSH tunnel with validation and retry logic\r\n   * \r\n   * @param config - Axios request configuration\r\n   * @param priority - Request priority level\r\n   * @returns Promise<AxiosResponse> - API response\r\n   */\r\n  public async routeRequest(\r\n    config: AxiosRequestConfig, \r\n    priority: RequestPriority = RequestPriority.NORMAL\r\n  ): Promise<AxiosResponse> {\r\n    return new Promise((resolve, reject) => {\r\n      // Validate request before queuing\r\n      const validation = this.validateRequest(config);\r\n      if (!validation.isValid) {\r\n        const error = new Error(`Request validation failed: ${validation.errors.join(', ')}`);\r\n        this.handleRequestError(error, config);\r\n        reject(error);\r\n        return;\r\n      }\r\n      \r\n      // Create queued request entry\r\n      const queuedRequest: QueuedRequest = {\r\n        id: this.generateRequestId(),\r\n        config: {\r\n          ...config,\r\n          metadata: {\r\n            ...config.metadata,\r\n            requestChecksum: validation.checksum,\r\n            validationTimestamp: validation.timestamp,\r\n          }\r\n        },\r\n        priority,\r\n        timestamp: new Date(),\r\n        retryCount: 0,\r\n        maxRetries: this.maxRetries,\r\n        resolve,\r\n        reject,\r\n      };\r\n      \r\n      // Add to queue\r\n      this.addToQueue(queuedRequest);\r\n      \r\n      // Log request for audit trail\r\n      this.auditService.logAPIRequest({\r\n        method: config.method?.toUpperCase() || 'GET',\r\n        url: config.url || '',\r\n        timestamp: new Date(),\r\n        headers: this.sanitizeHeaders(config.headers || {}),\r\n        requestId: queuedRequest.id,\r\n        priority: priority.toString(),\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Add request to priority queue\r\n   * \r\n   * @param request - Queued request to add\r\n   */\r\n  private addToQueue(request: QueuedRequest): void {\r\n    // Check queue size limit\r\n    if (this.requestQueue.length >= this.maxQueueSize) {\r\n      const error = new Error('Request queue is full');\r\n      this.handleRequestError(error, request.config);\r\n      request.reject(error);\r\n      return;\r\n    }\r\n    \r\n    // Insert request based on priority (higher priority first)\r\n    let insertIndex = this.requestQueue.length;\r\n    for (let i = 0; i < this.requestQueue.length; i++) {\r\n      if (this.requestQueue[i].priority < request.priority) {\r\n        insertIndex = i;\r\n        break;\r\n      }\r\n    }\r\n    \r\n    this.requestQueue.splice(insertIndex, 0, request);\r\n    this.routingStats.queuedRequests = this.requestQueue.length;\r\n    \r\n    logger.debug(`📥 Request queued: ${request.id} (priority: ${request.priority}, queue size: ${this.requestQueue.length})`);\r\n    \r\n    // Trigger queue processing if not already running\r\n    if (!this.isProcessingQueue) {\r\n      this.processQueue();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Process request queue with tunnel routing\r\n   */\r\n  private async processQueue(): Promise<void> {\r\n    if (this.isProcessingQueue || this.requestQueue.length === 0) {\r\n      return;\r\n    }\r\n    \r\n    this.isProcessingQueue = true;\r\n    \r\n    try {\r\n      while (this.requestQueue.length > 0) {\r\n        const request = this.requestQueue.shift()!;\r\n        this.routingStats.queuedRequests = this.requestQueue.length;\r\n        \r\n        try {\r\n          await this.processRequest(request);\r\n        } catch (error) {\r\n          logger.error(`❌ Failed to process request ${request.id}:`, error);\r\n        }\r\n      }\r\n    } finally {\r\n      this.isProcessingQueue = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Process individual request through tunnel\r\n   * \r\n   * @param request - Queued request to process\r\n   */\r\n  private async processRequest(request: QueuedRequest): Promise<void> {\r\n    const startTime = Date.now();\r\n    \r\n    try {\r\n      // Ensure we have an active tunnel\r\n      if (!this.currentTunnelId || !this.isActiveTunnelHealthy()) {\r\n        await this.selectActiveTunnel();\r\n      }\r\n      \r\n      if (!this.currentTunnelId) {\r\n        throw new Error('No healthy tunnel available for request routing');\r\n      }\r\n      \r\n      // Get tunnel connection\r\n      const tunnel = this.tunnelManager.getConnection(this.currentTunnelId);\r\n      if (!tunnel || tunnel.state !== TunnelState.CONNECTED) {\r\n        throw new Error(`Tunnel not available: ${this.currentTunnelId}`);\r\n      }\r\n      \r\n      // Route request through tunnel\r\n      const response = await this.executeRequestThroughTunnel(request, tunnel);\r\n      \r\n      // Validate response integrity\r\n      const integrityCheck = this.validateResponseIntegrity(request, response);\r\n      if (!integrityCheck.isValid) {\r\n        this.routingStats.integrityFailures++;\r\n        throw new Error(`Response integrity check failed: expected ${integrityCheck.expectedChecksum}, got ${integrityCheck.actualChecksum}`);\r\n      }\r\n      \r\n      // Update statistics\r\n      const responseTime = Date.now() - startTime;\r\n      this.updateRoutingStats(true, responseTime);\r\n      this.updateTunnelHealth(this.currentTunnelId, true, responseTime);\r\n      \r\n      // Log successful response\r\n      await this.auditService.logAPIResponse({\r\n        status: response.status,\r\n        responseTime,\r\n        timestamp: new Date(),\r\n        success: true,\r\n        requestId: request.id,\r\n        tunnelId: this.currentTunnelId,\r\n      });\r\n      \r\n      // Resolve request\r\n      request.resolve(response);\r\n      \r\n      logger.debug(`✅ Request completed successfully: ${request.id} (${responseTime}ms)`);\r\n      \r\n    } catch (error) {\r\n      const responseTime = Date.now() - startTime;\r\n      \r\n      // Update statistics\r\n      this.updateRoutingStats(false, responseTime);\r\n      this.updateTunnelHealth(this.currentTunnelId || '', false, responseTime);\r\n      \r\n      // Handle retry logic\r\n      if (request.retryCount < request.maxRetries && this.shouldRetryRequest(error)) {\r\n        request.retryCount++;\r\n        logger.info(`🔄 Retrying request ${request.id} (attempt ${request.retryCount}/${request.maxRetries})`);\r\n        \r\n        // Add back to queue with delay\r\n        setTimeout(() => {\r\n          this.addToQueue(request);\r\n        }, this.calculateRetryDelay(request.retryCount));\r\n        \r\n        return;\r\n      }\r\n      \r\n      // Log failed response\r\n      await this.auditService.logAPIResponse({\r\n        status: 0,\r\n        responseTime,\r\n        timestamp: new Date(),\r\n        success: false,\r\n        error: error.message,\r\n        requestId: request.id,\r\n        tunnelId: this.currentTunnelId || 'unknown',\r\n      });\r\n      \r\n      // Reject request\r\n      this.handleRequestError(error, request.config);\r\n      request.reject(error);\r\n      \r\n      logger.error(`❌ Request failed: ${request.id} - ${error.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Execute request through specific tunnel\r\n   * \r\n   * @param request - Queued request\r\n   * @param tunnel - Tunnel connection\r\n   * @returns Promise<AxiosResponse> - API response\r\n   */\r\n  private async executeRequestThroughTunnel(\r\n    request: QueuedRequest, \r\n    tunnel: TunnelConnection\r\n  ): Promise<AxiosResponse> {\r\n    // Configure request to use tunnel proxy\r\n    const tunnelConfig = {\r\n      ...request.config,\r\n      proxy: {\r\n        host: 'localhost',\r\n        port: tunnel.config.localPort,\r\n        protocol: 'http' as const,\r\n      },\r\n      timeout: this.requestTimeout,\r\n    };\r\n    \r\n    // Import axios dynamically to avoid circular dependencies\r\n    const axios = (await import('axios')).default;\r\n    \r\n    // Execute request through tunnel\r\n    const response = await axios.request(tunnelConfig);\r\n    \r\n    // Add tunnel metadata to response\r\n    response.config.metadata = {\r\n      ...response.config.metadata,\r\n      tunnelId: tunnel.id,\r\n      tunnelLocalPort: tunnel.config.localPort,\r\n      routedAt: new Date(),\r\n    };\r\n    \r\n    return response;\r\n  }\r\n\r\n  /**\r\n   * Validate request before processing\r\n   * \r\n   * @param config - Request configuration\r\n   * @returns ValidationResult - Validation result\r\n   */\r\n  private validateRequest(config: AxiosRequestConfig): ValidationResult {\r\n    const errors: string[] = [];\r\n    \r\n    // Validate required fields\r\n    if (!config.url) {\r\n      errors.push('Missing request URL');\r\n    }\r\n    \r\n    if (!config.method) {\r\n      errors.push('Missing request method');\r\n    }\r\n    \r\n    // Validate URL format\r\n    if (config.url && !this.isValidURL(config.url)) {\r\n      errors.push('Invalid URL format');\r\n    }\r\n    \r\n    // Create request checksum for integrity validation\r\n    const requestData = JSON.stringify({\r\n      method: config.method,\r\n      url: config.url,\r\n      headers: config.headers,\r\n      data: config.data,\r\n    });\r\n    \r\n    const checksum = crypto\r\n      .createHash('sha256')\r\n      .update(requestData)\r\n      .digest('hex');\r\n    \r\n    return {\r\n      isValid: errors.length === 0,\r\n      checksum,\r\n      timestamp: new Date(),\r\n      errors,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Validate response integrity\r\n   * \r\n   * @param request - Original request\r\n   * @param response - API response\r\n   * @returns IntegrityCheckResult - Integrity check result\r\n   */\r\n  private validateResponseIntegrity(\r\n    request: QueuedRequest, \r\n    response: AxiosResponse\r\n  ): IntegrityCheckResult {\r\n    const expectedChecksum = request.config.metadata?.requestChecksum || '';\r\n    \r\n    // Create response checksum\r\n    const responseData = JSON.stringify({\r\n      status: response.status,\r\n      headers: response.headers,\r\n      data: response.data,\r\n    });\r\n    \r\n    const actualChecksum = crypto\r\n      .createHash('sha256')\r\n      .update(responseData + expectedChecksum)\r\n      .digest('hex');\r\n    \r\n    // For now, we'll consider all responses valid\r\n    // In a production system, you might implement more sophisticated integrity checks\r\n    return {\r\n      isValid: true,\r\n      expectedChecksum,\r\n      actualChecksum,\r\n      timestamp: new Date(),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Select active tunnel based on health and performance\r\n   */\r\n  private async selectActiveTunnel(): Promise<void> {\r\n    const healthyTunnels = Array.from(this.activeTunnels.values())\r\n      .filter(status => status.isHealthy)\r\n      .sort((a, b) => a.responseTime - b.responseTime); // Sort by response time\r\n    \r\n    if (healthyTunnels.length === 0) {\r\n      logger.error('❌ No healthy tunnels available');\r\n      throw new Error('No healthy tunnels available');\r\n    }\r\n    \r\n    const newTunnelId = healthyTunnels[0].tunnelId;\r\n    \r\n    if (newTunnelId !== this.currentTunnelId) {\r\n      const oldTunnelId = this.currentTunnelId;\r\n      this.currentTunnelId = newTunnelId;\r\n      this.routingStats.tunnelSwitches++;\r\n      \r\n      logger.info(`🔄 Switched active tunnel: ${oldTunnelId} -> ${newTunnelId}`);\r\n      \r\n      await this.auditService.logSecurityEvent({\r\n        type: 'TUNNEL_SWITCH',\r\n        severity: 'INFO',\r\n        details: { oldTunnelId, newTunnelId },\r\n        timestamp: new Date(),\r\n      });\r\n      \r\n      this.emit('tunnelSwitched', oldTunnelId, newTunnelId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if current active tunnel is healthy\r\n   */\r\n  private isActiveTunnelHealthy(): boolean {\r\n    if (!this.currentTunnelId) return false;\r\n    \r\n    const tunnelHealth = this.activeTunnels.get(this.currentTunnelId);\r\n    return tunnelHealth?.isHealthy || false;\r\n  }\r\n\r\n  /**\r\n   * Update tunnel health status\r\n   * \r\n   * @param tunnelId - Tunnel identifier\r\n   * @param success - Request success status\r\n   * @param responseTime - Response time in milliseconds\r\n   */\r\n  private updateTunnelHealth(tunnelId: string, success: boolean, responseTime: number): void {\r\n    const health = this.activeTunnels.get(tunnelId);\r\n    if (!health) return;\r\n    \r\n    // Update response time with exponential moving average\r\n    const alpha = 0.1;\r\n    health.responseTime = (alpha * responseTime) + ((1 - alpha) * health.responseTime);\r\n    \r\n    // Update error rate and consecutive failures\r\n    if (success) {\r\n      health.consecutiveFailures = 0;\r\n      health.errorRate = Math.max(0, health.errorRate - 0.1);\r\n    } else {\r\n      health.consecutiveFailures++;\r\n      health.errorRate = Math.min(1, health.errorRate + 0.1);\r\n    }\r\n    \r\n    // Update health status\r\n    health.isHealthy = health.consecutiveFailures < this.failureThreshold && health.errorRate < 0.5;\r\n    health.lastHealthCheck = new Date();\r\n    \r\n    logger.debug(`📊 Tunnel health updated: ${tunnelId} (healthy: ${health.isHealthy}, errors: ${health.consecutiveFailures})`);\r\n  }\r\n\r\n  /**\r\n   * Update routing statistics\r\n   * \r\n   * @param success - Request success status\r\n   * @param responseTime - Response time in milliseconds\r\n   */\r\n  private updateRoutingStats(success: boolean, responseTime: number): void {\r\n    this.routingStats.totalRequests++;\r\n    this.routingStats.lastRequestTime = new Date();\r\n    \r\n    if (success) {\r\n      this.routingStats.successfulRequests++;\r\n    } else {\r\n      this.routingStats.failedRequests++;\r\n    }\r\n    \r\n    // Update average response time with exponential moving average\r\n    const alpha = 0.1;\r\n    this.routingStats.averageResponseTime = \r\n      (alpha * responseTime) + ((1 - alpha) * this.routingStats.averageResponseTime);\r\n  }\r\n\r\n  /**\r\n   * Set up tunnel manager event listeners\r\n   */\r\n  private setupTunnelEventListeners(): void {\r\n    this.tunnelManager.on('tunnelConnected', (connection: TunnelConnection) => {\r\n      logger.info(`🔗 Tunnel connected: ${connection.id}`);\r\n      \r\n      // Add to active tunnels if not already present\r\n      if (!this.activeTunnels.has(connection.id)) {\r\n        this.activeTunnels.set(connection.id, {\r\n          tunnelId: connection.id,\r\n          isHealthy: true,\r\n          responseTime: 0,\r\n          errorRate: 0,\r\n          lastHealthCheck: new Date(),\r\n          consecutiveFailures: 0,\r\n        });\r\n      }\r\n    });\r\n    \r\n    this.tunnelManager.on('tunnelDisconnected', (connection: TunnelConnection) => {\r\n      logger.warn(`🔌 Tunnel disconnected: ${connection.id}`);\r\n      \r\n      // Mark tunnel as unhealthy\r\n      const health = this.activeTunnels.get(connection.id);\r\n      if (health) {\r\n        health.isHealthy = false;\r\n      }\r\n      \r\n      // Switch to another tunnel if this was the active one\r\n      if (this.currentTunnelId === connection.id) {\r\n        this.selectActiveTunnel().catch(error => {\r\n          logger.error('❌ Failed to switch tunnel after disconnection:', error);\r\n        });\r\n      }\r\n    });\r\n    \r\n    this.tunnelManager.on('tunnelError', (connection: TunnelConnection, error: Error) => {\r\n      logger.error(`❌ Tunnel error: ${connection.id} - ${error.message}`);\r\n      \r\n      // Mark tunnel as unhealthy\r\n      const health = this.activeTunnels.get(connection.id);\r\n      if (health) {\r\n        health.isHealthy = false;\r\n        health.consecutiveFailures++;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Start health monitoring for tunnels\r\n   */\r\n  private startHealthMonitoring(): void {\r\n    this.healthCheckTimer = setInterval(async () => {\r\n      await this.performHealthChecks();\r\n    }, this.healthCheckInterval);\r\n    \r\n    logger.info('🏥 Started tunnel health monitoring');\r\n  }\r\n\r\n  /**\r\n   * Perform health checks on all tunnels\r\n   */\r\n  private async performHealthChecks(): Promise<void> {\r\n    const healthCheckPromises = Array.from(this.activeTunnels.keys()).map(\r\n      tunnelId => this.performTunnelHealthCheck(tunnelId)\r\n    );\r\n    \r\n    await Promise.allSettled(healthCheckPromises);\r\n  }\r\n\r\n  /**\r\n   * Perform health check on specific tunnel\r\n   * \r\n   * @param tunnelId - Tunnel identifier\r\n   */\r\n  private async performTunnelHealthCheck(tunnelId: string): Promise<void> {\r\n    try {\r\n      const tunnel = this.tunnelManager.getConnection(tunnelId);\r\n      if (!tunnel || tunnel.state !== TunnelState.CONNECTED) {\r\n        this.updateTunnelHealth(tunnelId, false, 0);\r\n        return;\r\n      }\r\n      \r\n      // Perform simple connectivity test\r\n      const startTime = Date.now();\r\n      \r\n      // Import axios dynamically\r\n      const axios = (await import('axios')).default;\r\n      \r\n      // Test connection through tunnel\r\n      await axios.get('https://api.gateio.ws/api/v4/spot/time', {\r\n        proxy: {\r\n          host: 'localhost',\r\n          port: tunnel.config.localPort,\r\n          protocol: 'http',\r\n        },\r\n        timeout: 5000,\r\n      });\r\n      \r\n      const responseTime = Date.now() - startTime;\r\n      this.updateTunnelHealth(tunnelId, true, responseTime);\r\n      \r\n    } catch (error) {\r\n      logger.debug(`🏥 Health check failed for tunnel ${tunnelId}:`, error.message);\r\n      this.updateTunnelHealth(tunnelId, false, 0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Start queue processing\r\n   */\r\n  private startQueueProcessing(): void {\r\n    // Process queue every 100ms\r\n    setInterval(() => {\r\n      if (!this.isProcessingQueue && this.requestQueue.length > 0) {\r\n        this.processQueue();\r\n      }\r\n    }, 100);\r\n  }\r\n\r\n  /**\r\n   * Determine if request should be retried\r\n   * \r\n   * @param error - Request error\r\n   * @returns boolean - Should retry\r\n   */\r\n  private shouldRetryRequest(error: any): boolean {\r\n    // Retry on network errors or server errors (5xx)\r\n    if (!error.response) return true; // Network error\r\n    \r\n    const status = error.response?.status;\r\n    return status >= 500 || status === 429; // Server error or rate limit\r\n  }\r\n\r\n  /**\r\n   * Calculate retry delay with exponential backoff\r\n   * \r\n   * @param retryCount - Current retry count\r\n   * @returns number - Delay in milliseconds\r\n   */\r\n  private calculateRetryDelay(retryCount: number): number {\r\n    const baseDelay = 1000; // 1 second\r\n    const maxDelay = 30000; // 30 seconds\r\n    \r\n    const delay = Math.min(baseDelay * Math.pow(2, retryCount - 1), maxDelay);\r\n    \r\n    // Add jitter to prevent thundering herd\r\n    const jitter = Math.random() * 0.1 * delay;\r\n    \r\n    return delay + jitter;\r\n  }\r\n\r\n  /**\r\n   * Handle request errors\r\n   * \r\n   * @param error - Request error\r\n   * @param config - Request configuration\r\n   */\r\n  private handleRequestError(error: any, config: AxiosRequestConfig): void {\r\n    this.auditService.logSecurityEvent({\r\n      type: 'TUNNEL_REQUEST_ERROR',\r\n      severity: 'ERROR',\r\n      details: {\r\n        error: error.message,\r\n        url: config.url,\r\n        method: config.method,\r\n        tunnelId: this.currentTunnelId,\r\n      },\r\n      timestamp: new Date(),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Generate unique request ID\r\n   */\r\n  private generateRequestId(): string {\r\n    return `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  /**\r\n   * Validate URL format\r\n   * \r\n   * @param url - URL to validate\r\n   * @returns boolean - Is valid URL\r\n   */\r\n  private isValidURL(url: string): boolean {\r\n    try {\r\n      new URL(url, 'https://api.gateio.ws');\r\n      return true;\r\n    } catch {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sanitize headers for logging\r\n   * \r\n   * @param headers - Request headers\r\n   * @returns Sanitized headers\r\n   */\r\n  private sanitizeHeaders(headers: Record<string, any>): Record<string, any> {\r\n    const sanitized = { ...headers };\r\n    \r\n    // Remove sensitive headers\r\n    delete sanitized.KEY;\r\n    delete sanitized.SIGN;\r\n    delete sanitized.Passphrase;\r\n    delete sanitized.Authorization;\r\n    \r\n    return sanitized;\r\n  }\r\n\r\n  /**\r\n   * Get routing statistics\r\n   */\r\n  public getRoutingStats(): TunnelRoutingStats {\r\n    return { ...this.routingStats };\r\n  }\r\n\r\n  /**\r\n   * Get tunnel health status\r\n   */\r\n  public getTunnelHealthStatus(): TunnelHealthStatus[] {\r\n    return Array.from(this.activeTunnels.values());\r\n  }\r\n\r\n  /**\r\n   * Get current active tunnel ID\r\n   */\r\n  public getCurrentTunnelId(): string | null {\r\n    return this.currentTunnelId;\r\n  }\r\n\r\n  /**\r\n   * Graceful shutdown\r\n   */\r\n  public async shutdown(): Promise<void> {\r\n    logger.info('🛑 Shutting down tunnel router...');\r\n    \r\n    // Stop health monitoring\r\n    if (this.healthCheckTimer) {\r\n      clearInterval(this.healthCheckTimer);\r\n      this.healthCheckTimer = null;\r\n    }\r\n    \r\n    // Clear request queue\r\n    this.requestQueue.forEach(request => {\r\n      request.reject(new Error('Tunnel router is shutting down'));\r\n    });\r\n    this.requestQueue = [];\r\n    \r\n    // Log final statistics\r\n    await this.auditService.logSecurityEvent({\r\n      type: 'TUNNEL_ROUTER_SHUTDOWN',\r\n      severity: 'INFO',\r\n      details: { routingStats: this.routingStats },\r\n      timestamp: new Date(),\r\n    });\r\n    \r\n    logger.info('✅ Tunnel router shutdown completed');\r\n  }\r\n}\r\n\r\n// Export types\r\nexport type {\r\n  QueuedRequest,\r\n  TunnelRoutingStats,\r\n  ValidationResult,\r\n  IntegrityCheckResult,\r\n  TunnelHealthStatus,\r\n};"],"version":3}