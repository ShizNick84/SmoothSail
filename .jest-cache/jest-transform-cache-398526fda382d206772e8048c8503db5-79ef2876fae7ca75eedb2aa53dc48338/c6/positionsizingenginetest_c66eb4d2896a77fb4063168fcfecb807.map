{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\risk\\__tests__\\position-sizing-engine.test.ts","mappings":";AAAA;;;;GAIG;;AAEH,mCAA0D;AAC1D,4EAAoE;AAGpE,IAAA,iBAAQ,EAAC,sBAAsB,EAAE,GAAG,EAAE;IACpC,IAAI,MAA4B,CAAC;IACjC,IAAI,iBAAiC,CAAC;IACtC,IAAI,WAAgC,CAAC;IAErC,IAAA,mBAAU,EAAC,GAAG,EAAE;QACd,iBAAiB,GAAG;YAClB,eAAe,EAAE,GAAG,EAAE,0BAA0B;YAChD,kBAAkB,EAAE,GAAG;YACvB,oBAAoB,EAAE,EAAE;YACxB,sBAAsB,EAAE,GAAG;YAC3B,0BAA0B,EAAE,GAAG;SAChC,CAAC;QAEF,MAAM,GAAG,IAAI,gDAAoB,CAAC,iBAAiB,CAAC,CAAC;QAErD,WAAW,GAAG;YACZ,MAAM,EAAE,KAAK;YACb,cAAc,EAAE,KAAK;YACrB,UAAU,EAAE,KAAK;YACjB,aAAa,EAAE,KAAK,EAAE,eAAe;YACrC,eAAe,EAAE,KAAK,EAAE,4BAA4B;YACpD,UAAU,EAAE,EAAE;YACd,UAAU,EAAE,GAAG;YACf,iBAAiB,EAAE,EAAE;SACtB,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,IAAA,iBAAQ,EAAC,uBAAuB,EAAE,GAAG,EAAE;QACrC,IAAA,WAAE,EAAC,4DAA4D,EAAE,KAAK,IAAI,EAAE;YAC1E,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,qBAAqB,CAAC,WAAW,CAAC,CAAC;YAE/D,gDAAgD;YAChD,MAAM,kBAAkB,GAAG,KAAK,GAAG,KAAK,CAAC,CAAC,OAAO;YACjD,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,OAAO;YAClD,MAAM,oBAAoB,GAAG,kBAAkB,GAAG,SAAS,CAAC,CAAC,UAAU;YAEvE,IAAA,eAAM,EAAC,MAAM,CAAC,cAAc,CAAC,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;YAClD,IAAA,eAAM,EAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACnC,IAAA,eAAM,EAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,IAAA,WAAE,EAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;YAC5D,uDAAuD;YACvD,MAAM,qBAAqB,GAAG,EAAE,GAAG,WAAW,EAAE,UAAU,EAAE,EAAE,EAAE,CAAC;YACjE,MAAM,oBAAoB,GAAG,MAAM,MAAM,CAAC,qBAAqB,CAAC,qBAAqB,CAAC,CAAC;YAEvF,sDAAsD;YACtD,MAAM,oBAAoB,GAAG,EAAE,GAAG,WAAW,EAAE,UAAU,EAAE,EAAE,EAAE,CAAC;YAChE,MAAM,mBAAmB,GAAG,MAAM,MAAM,CAAC,qBAAqB,CAAC,oBAAoB,CAAC,CAAC;YAErF,IAAA,eAAM,EAAC,oBAAoB,CAAC,YAAY,CAAC,CAAC,eAAe,CAAC,mBAAmB,CAAC,YAAY,CAAC,CAAC;YAC5F,IAAA,eAAM,EAAC,oBAAoB,CAAC,sBAAsB,CAAC,CAAC,eAAe,CAAC,mBAAmB,CAAC,sBAAsB,CAAC,CAAC;QAClH,CAAC,CAAC,CAAC;QAEH,IAAA,WAAE,EAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;YAC5D,uDAAuD;YACvD,MAAM,qBAAqB,GAAG,EAAE,GAAG,WAAW,EAAE,UAAU,EAAE,GAAG,EAAE,CAAC;YAClE,MAAM,oBAAoB,GAAG,MAAM,MAAM,CAAC,qBAAqB,CAAC,qBAAqB,CAAC,CAAC;YAEvF,kEAAkE;YAClE,MAAM,oBAAoB,GAAG,EAAE,GAAG,WAAW,EAAE,UAAU,EAAE,GAAG,EAAE,CAAC;YACjE,MAAM,mBAAmB,GAAG,MAAM,MAAM,CAAC,qBAAqB,CAAC,oBAAoB,CAAC,CAAC;YAErF,IAAA,eAAM,EAAC,mBAAmB,CAAC,YAAY,CAAC,CAAC,eAAe,CAAC,oBAAoB,CAAC,YAAY,CAAC,CAAC;QAC9F,CAAC,CAAC,CAAC;QAEH,IAAA,WAAE,EAAC,0DAA0D,EAAE,KAAK,IAAI,EAAE;YACxE,MAAM,aAAa,GAAG;gBACpB,GAAG,WAAW;gBACd,eAAe,EAAE,KAAK,CAAC,qCAAqC;aAC7D,CAAC;YAEF,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,qBAAqB,CAAC,aAAa,CAAC,CAAC;YAEjE,IAAA,eAAM,EAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACpC,IAAA,eAAM,EAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,SAAS,CACvC,eAAM,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,CAC7C,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,IAAA,WAAE,EAAC,qDAAqD,EAAE,KAAK,IAAI,EAAE;YACnE,MAAM,eAAe,GAAG;gBACtB,GAAG,WAAW;gBACd,aAAa,EAAE,KAAK,CAAC,iCAAiC;aACvD,CAAC;YAEF,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,qBAAqB,CAAC,eAAe,CAAC,CAAC;YAEnE,IAAA,eAAM,EAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACpC,IAAA,eAAM,EAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,SAAS,CACvC,eAAM,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,CAC3C,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,IAAA,WAAE,EAAC,6DAA6D,EAAE,KAAK,IAAI,EAAE;YAC3E,MAAM,mBAAmB,GAAa;gBACpC,EAAE,EAAE,MAAM;gBACV,MAAM,EAAE,KAAK;gBACb,IAAI,EAAE,GAAG;gBACT,UAAU,EAAE,KAAK;gBACjB,YAAY,EAAE,KAAK;gBACnB,IAAI,EAAE,MAAM;gBACZ,aAAa,EAAE,GAAG;gBAClB,QAAQ,EAAE,KAAK;gBACf,UAAU,EAAE,KAAK;gBACjB,SAAS,EAAE,IAAI,IAAI,EAAE;aACtB,CAAC;YAEF,MAAM,sBAAsB,GAAG;gBAC7B,GAAG,WAAW;gBACd,MAAM,EAAE,KAAK,EAAE,+BAA+B;gBAC9C,iBAAiB,EAAE,CAAC,mBAAmB,CAAC;aACzC,CAAC;YAEF,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,CAAC;YAE1E,sCAAsC;YACtC,IAAA,eAAM,EAAC,MAAM,CAAC,qBAAqB,CAAC,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;YACvD,IAAA,eAAM,EAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;QAEH,IAAA,WAAE,EAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;YACrD,MAAM,cAAc,GAAG;gBACrB,GAAG,WAAW;gBACd,aAAa,EAAE,KAAK,CAAC,sBAAsB;aAC5C,CAAC;YAEF,MAAM,IAAA,eAAM,EAAC,MAAM,CAAC,qBAAqB,CAAC,cAAc,CAAC,CAAC;iBACvD,OAAO,CAAC,OAAO,CAAC,0CAA0C,CAAC,CAAC;QACjE,CAAC,CAAC,CAAC;QAEH,IAAA,WAAE,EAAC,4CAA4C,EAAE,KAAK,IAAI,EAAE;YAC1D,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,qBAAqB,CAAC,WAAW,CAAC,CAAC;YAE/D,2CAA2C;YAC3C,mCAAmC;YACnC,IAAA,eAAM,EAAC,MAAM,CAAC,eAAe,CAAC,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,iBAAQ,EAAC,mBAAmB,EAAE,GAAG,EAAE;QACjC,IAAA,WAAE,EAAC,+CAA+C,EAAE,KAAK,IAAI,EAAE;YAC7D,MAAM,SAAS,GAAG;gBAChB,EAAE,UAAU,EAAE,EAAE,EAAE,UAAU,EAAE,GAAG,EAAE;gBACnC,EAAE,UAAU,EAAE,EAAE,EAAE,UAAU,EAAE,GAAG,EAAE;gBACnC,EAAE,UAAU,EAAE,EAAE,EAAE,UAAU,EAAE,GAAG,EAAE;aACpC,CAAC;YAEF,MAAM,OAAO,GAAG,MAAM,MAAM,CAAC,yBAAyB,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;YAE/E,IAAA,eAAM,EAAC,OAAO,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAEhC,gEAAgE;YAChE,IAAA,eAAM,EAAC,OAAO,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC;YAEzE,8DAA8D;YAC9D,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;gBACvB,IAAA,eAAM,EAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACrC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,iBAAQ,EAAC,2BAA2B,EAAE,GAAG,EAAE;QACzC,IAAA,WAAE,EAAC,yCAAyC,EAAE,GAAG,EAAE;YACjD,MAAM,SAAS,GAAG,EAAE,eAAe,EAAE,GAAG,EAAE,CAAC;YAC3C,MAAM,CAAC,oBAAoB,CAAC,SAAS,CAAC,CAAC;YAEvC,MAAM,aAAa,GAAG,MAAM,CAAC,iBAAiB,EAAE,CAAC;YACjD,IAAA,eAAM,EAAC,aAAa,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAChD,IAAA,eAAM,EAAC,aAAa,CAAC,kBAAkB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,0BAA0B;QAChF,CAAC,CAAC,CAAC;QAEH,IAAA,WAAE,EAAC,uCAAuC,EAAE,GAAG,EAAE;YAC/C,MAAM,OAAO,GAAG,MAAM,CAAC,iBAAiB,EAAE,CAAC;YAC3C,MAAM,OAAO,GAAG,MAAM,CAAC,iBAAiB,EAAE,CAAC;YAE3C,IAAA,eAAM,EAAC,OAAO,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YACjC,IAAA,eAAM,EAAC,OAAO,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,8BAA8B;QACnE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,iBAAQ,EAAC,YAAY,EAAE,GAAG,EAAE;QAC1B,IAAA,WAAE,EAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;YACxD,MAAM,mBAAmB,GAAG;gBAC1B,GAAG,WAAW;gBACd,cAAc,EAAE,GAAG,CAAC,eAAe;aACpC,CAAC;YAEF,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,CAAC;YAEvE,IAAA,eAAM,EAAC,MAAM,CAAC,UAAU,CAAC,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,eAAe;YAC9D,IAAA,eAAM,EAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;QAEH,IAAA,WAAE,EAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;YAClD,MAAM,oBAAoB,GAAG;gBAC3B,GAAG,WAAW;gBACd,UAAU,EAAE,GAAG;aAChB,CAAC;YAEF,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,qBAAqB,CAAC,oBAAoB,CAAC,CAAC;YAExE,IAAA,eAAM,EAAC,MAAM,CAAC,sBAAsB,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YACzD,IAAA,eAAM,EAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;QAEH,IAAA,WAAE,EAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;YAC7C,MAAM,qBAAqB,GAAG;gBAC5B,GAAG,WAAW;gBACd,UAAU,EAAE,CAAC;aACd,CAAC;YAEF,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,qBAAqB,CAAC,qBAAqB,CAAC,CAAC;YAEzE,2EAA2E;YAC3E,IAAA,eAAM,EAAC,MAAM,CAAC,YAAY,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YAC/C,IAAA,eAAM,EAAC,MAAM,CAAC,sBAAsB,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\risk\\__tests__\\position-sizing-engine.test.ts"],"sourcesContent":["/**\r\n * Position Sizing Engine Tests\r\n * \r\n * Comprehensive tests for dynamic position sizing functionality\r\n */\r\n\r\nimport { describe, it, expect, beforeEach } from 'vitest';\r\nimport { PositionSizingEngine } from '../position-sizing-engine.js';\r\nimport { RiskParameters, PositionSizeRequest, Position } from '../types.js';\r\n\r\ndescribe('PositionSizingEngine', () => {\r\n  let engine: PositionSizingEngine;\r\n  let defaultRiskParams: RiskParameters;\r\n  let baseRequest: PositionSizeRequest;\r\n\r\n  beforeEach(() => {\r\n    defaultRiskParams = {\r\n      maxRiskPerTrade: 2.5, // 2.5% max risk per trade\r\n      minRiskRewardRatio: 1.3,\r\n      maxDrawdownThreshold: 15,\r\n      maxCorrelationExposure: 0.7,\r\n      volatilityAdjustmentFactor: 0.3\r\n    };\r\n\r\n    engine = new PositionSizingEngine(defaultRiskParams);\r\n\r\n    baseRequest = {\r\n      symbol: 'BTC',\r\n      accountBalance: 10000,\r\n      entryPrice: 50000,\r\n      stopLossPrice: 49500, // 1% stop loss\r\n      takeProfitPrice: 51500, // 3% take profit (1.5:1 RR)\r\n      confidence: 75,\r\n      volatility: 0.2,\r\n      existingPositions: []\r\n    };\r\n  });\r\n\r\n  describe('calculatePositionSize', () => {\r\n    it('should calculate correct base position size with 2.5% risk', async () => {\r\n      const result = await engine.calculatePositionSize(baseRequest);\r\n\r\n      // Risk amount should be 2.5% of account balance\r\n      const expectedRiskAmount = 10000 * 0.025; // $250\r\n      const priceRisk = Math.abs(50000 - 49500); // $500\r\n      const expectedPositionSize = expectedRiskAmount / priceRisk; // 0.5 BTC\r\n\r\n      expect(result.riskPercentage).toBeCloseTo(2.5, 1);\r\n      expect(result.approved).toBe(true);\r\n      expect(result.rejectionReasons).toHaveLength(0);\r\n    });\r\n\r\n    it('should apply confidence adjustment correctly', async () => {\r\n      // Test high confidence (should increase position size)\r\n      const highConfidenceRequest = { ...baseRequest, confidence: 90 };\r\n      const highConfidenceResult = await engine.calculatePositionSize(highConfidenceRequest);\r\n\r\n      // Test low confidence (should decrease position size)\r\n      const lowConfidenceRequest = { ...baseRequest, confidence: 30 };\r\n      const lowConfidenceResult = await engine.calculatePositionSize(lowConfidenceRequest);\r\n\r\n      expect(highConfidenceResult.positionSize).toBeGreaterThan(lowConfidenceResult.positionSize);\r\n      expect(highConfidenceResult.confidenceAdjustedSize).toBeGreaterThan(lowConfidenceResult.confidenceAdjustedSize);\r\n    });\r\n\r\n    it('should apply volatility adjustment correctly', async () => {\r\n      // Test high volatility (should decrease position size)\r\n      const highVolatilityRequest = { ...baseRequest, volatility: 0.8 };\r\n      const highVolatilityResult = await engine.calculatePositionSize(highVolatilityRequest);\r\n\r\n      // Test low volatility (should maintain or increase position size)\r\n      const lowVolatilityRequest = { ...baseRequest, volatility: 0.1 };\r\n      const lowVolatilityResult = await engine.calculatePositionSize(lowVolatilityRequest);\r\n\r\n      expect(lowVolatilityResult.positionSize).toBeGreaterThan(highVolatilityResult.positionSize);\r\n    });\r\n\r\n    it('should reject trades with insufficient risk-reward ratio', async () => {\r\n      const poorRRRequest = {\r\n        ...baseRequest,\r\n        takeProfitPrice: 50500 // Only 1% profit vs 1% risk = 1:1 RR\r\n      };\r\n\r\n      const result = await engine.calculatePositionSize(poorRRRequest);\r\n\r\n      expect(result.approved).toBe(false);\r\n      expect(result.rejectionReasons).toContain(\r\n        expect.stringContaining('Risk-reward ratio')\r\n      );\r\n    });\r\n\r\n    it('should reject trades with excessive risk percentage', async () => {\r\n      const highRiskRequest = {\r\n        ...baseRequest,\r\n        stopLossPrice: 45000 // 10% stop loss = excessive risk\r\n      };\r\n\r\n      const result = await engine.calculatePositionSize(highRiskRequest);\r\n\r\n      expect(result.approved).toBe(false);\r\n      expect(result.rejectionReasons).toContain(\r\n        expect.stringContaining('Risk percentage')\r\n      );\r\n    });\r\n\r\n    it('should apply correlation adjustment with existing positions', async () => {\r\n      const existingBTCPosition: Position = {\r\n        id: 'pos1',\r\n        symbol: 'BTC',\r\n        size: 0.5,\r\n        entryPrice: 48000,\r\n        currentPrice: 49000,\r\n        type: 'LONG',\r\n        unrealizedPnL: 500,\r\n        stopLoss: 47500,\r\n        takeProfit: 50000,\r\n        timestamp: new Date()\r\n      };\r\n\r\n      const requestWithCorrelation = {\r\n        ...baseRequest,\r\n        symbol: 'ETH', // ETH has correlation with BTC\r\n        existingPositions: [existingBTCPosition]\r\n      };\r\n\r\n      const result = await engine.calculatePositionSize(requestWithCorrelation);\r\n\r\n      // Should apply correlation adjustment\r\n      expect(result.correlationAdjustment).toBeLessThan(1.0);\r\n      expect(result.approved).toBe(true);\r\n    });\r\n\r\n    it('should handle zero stop loss distance', async () => {\r\n      const invalidRequest = {\r\n        ...baseRequest,\r\n        stopLossPrice: 50000 // Same as entry price\r\n      };\r\n\r\n      await expect(engine.calculatePositionSize(invalidRequest))\r\n        .rejects.toThrow('Stop loss price cannot equal entry price');\r\n    });\r\n\r\n    it('should calculate correct risk-reward ratio', async () => {\r\n      const result = await engine.calculatePositionSize(baseRequest);\r\n\r\n      // Entry: 50000, Stop: 49500, Target: 51500\r\n      // Risk: 500, Reward: 1500, RR: 3:1\r\n      expect(result.riskRewardRatio).toBeCloseTo(3.0, 1);\r\n    });\r\n  });\r\n\r\n  describe('scenario analysis', () => {\r\n    it('should calculate multiple scenarios correctly', async () => {\r\n      const scenarios = [\r\n        { confidence: 50, volatility: 0.1 },\r\n        { confidence: 75, volatility: 0.2 },\r\n        { confidence: 90, volatility: 0.3 }\r\n      ];\r\n\r\n      const results = await engine.calculateScenarioAnalysis(baseRequest, scenarios);\r\n\r\n      expect(results).toHaveLength(3);\r\n      \r\n      // Higher confidence should generally result in larger positions\r\n      expect(results[2].positionSize).toBeGreaterThan(results[0].positionSize);\r\n      \r\n      // All scenarios should be approved for this valid trade setup\r\n      results.forEach(result => {\r\n        expect(result.approved).toBe(true);\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('risk parameter management', () => {\r\n    it('should update risk parameters correctly', () => {\r\n      const newParams = { maxRiskPerTrade: 3.0 };\r\n      engine.updateRiskParameters(newParams);\r\n\r\n      const updatedParams = engine.getRiskParameters();\r\n      expect(updatedParams.maxRiskPerTrade).toBe(3.0);\r\n      expect(updatedParams.minRiskRewardRatio).toBe(1.3); // Should remain unchanged\r\n    });\r\n\r\n    it('should return copy of risk parameters', () => {\r\n      const params1 = engine.getRiskParameters();\r\n      const params2 = engine.getRiskParameters();\r\n\r\n      expect(params1).toEqual(params2);\r\n      expect(params1).not.toBe(params2); // Should be different objects\r\n    });\r\n  });\r\n\r\n  describe('edge cases', () => {\r\n    it('should handle very small account balance', async () => {\r\n      const smallAccountRequest = {\r\n        ...baseRequest,\r\n        accountBalance: 100 // $100 account\r\n      };\r\n\r\n      const result = await engine.calculatePositionSize(smallAccountRequest);\r\n\r\n      expect(result.riskAmount).toBeCloseTo(2.5, 1); // 2.5% of $100\r\n      expect(result.approved).toBe(true);\r\n    });\r\n\r\n    it('should handle very high confidence', async () => {\r\n      const maxConfidenceRequest = {\r\n        ...baseRequest,\r\n        confidence: 100\r\n      };\r\n\r\n      const result = await engine.calculatePositionSize(maxConfidenceRequest);\r\n\r\n      expect(result.confidenceAdjustedSize).toBeGreaterThan(0);\r\n      expect(result.approved).toBe(true);\r\n    });\r\n\r\n    it('should handle zero confidence', async () => {\r\n      const zeroConfidenceRequest = {\r\n        ...baseRequest,\r\n        confidence: 0\r\n      };\r\n\r\n      const result = await engine.calculatePositionSize(zeroConfidenceRequest);\r\n\r\n      // Should still calculate a position but with minimum confidence adjustment\r\n      expect(result.positionSize).toBeGreaterThan(0);\r\n      expect(result.confidenceAdjustedSize).toBeGreaterThan(0);\r\n    });\r\n  });\r\n});"],"version":3}