0b3555e0b3cacbbe5c4869136c0ed839
"use strict";

/**
 * =============================================================================
 * AI STRATEGY OPTIMIZATION WITH CODELLAMA
 * =============================================================================
 *
 * This module implements AI-driven trading strategy optimization using
 * CodeLlama 7B for automated strategy code generation, parameter optimization,
 * and dynamic strategy modification based on market conditions.
 *
 * Features:
 * - Automated trading strategy code generation
 * - AI-driven parameter optimization
 * - Dynamic strategy modification based on market conditions
 * - AI code review and optimization suggestions
 * - Automated backtesting with AI-generated strategies
 * - AI-powered risk management code generation
 *
 * @author AI Crypto Trading System
 * @version 1.0.0
 * @license PROPRIETARY
 * =============================================================================
 */
/* istanbul ignore next */
function cov_yhuknkrhf() {
  var path = "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\ai\\ai-strategy-optimizer.ts";
  var hash = "41c1bd05d59bf537794ef67c4b6859e85675a876";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\ai\\ai-strategy-optimizer.ts",
    statementMap: {
      "0": {
        start: {
          line: 24,
          column: 0
        },
        end: {
          line: 24,
          column: 62
        }
      },
      "1": {
        start: {
          line: 25,
          column: 0
        },
        end: {
          line: 25,
          column: 37
        }
      },
      "2": {
        start: {
          line: 26,
          column: 17
        },
        end: {
          line: 26,
          column: 34
        }
      },
      "3": {
        start: {
          line: 27,
          column: 17
        },
        end: {
          line: 27,
          column: 49
        }
      },
      "4": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 16
        }
      },
      "5": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 35
        }
      },
      "6": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 35,
          column: 45
        }
      },
      "7": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 36,
          column: 45
        }
      },
      "8": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 86,
          column: 10
        }
      },
      "9": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 87,
          column: 43
        }
      },
      "10": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 88,
          column: 43
        }
      },
      "11": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 89,
          column: 69
        }
      },
      "12": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 112,
          column: 9
        }
      },
      "13": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 77
        }
      },
      "14": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 100,
          column: 13
        }
      },
      "15": {
        start: {
          line: 99,
          column: 16
        },
        end: {
          line: 99,
          column: 62
        }
      },
      "16": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 102,
          column: 51
        }
      },
      "17": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 104,
          column: 48
        }
      },
      "18": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 105,
          column: 38
        }
      },
      "19": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 106,
          column: 85
        }
      },
      "20": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 107,
          column: 37
        }
      },
      "21": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 110,
          column: 90
        }
      },
      "22": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 111,
          column: 90
        }
      },
      "23": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 137,
          column: 9
        }
      },
      "24": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 119,
          column: 73
        }
      },
      "25": {
        start: {
          line: 120,
          column: 32
        },
        end: {
          line: 125,
          column: 13
        }
      },
      "26": {
        start: {
          line: 126,
          column: 29
        },
        end: {
          line: 126,
          column: 83
        }
      },
      "27": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 132,
          column: 13
        }
      },
      "28": {
        start: {
          line: 128,
          column: 16
        },
        end: {
          line: 128,
          column: 80
        }
      },
      "29": {
        start: {
          line: 131,
          column: 16
        },
        end: {
          line: 131,
          column: 77
        }
      },
      "30": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 135,
          column: 69
        }
      },
      "31": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 136,
          column: 90
        }
      },
      "32": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 187,
          column: 9
        }
      },
      "33": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 144,
          column: 86
        }
      },
      "34": {
        start: {
          line: 145,
          column: 30
        },
        end: {
          line: 145,
          column: 40
        }
      },
      "35": {
        start: {
          line: 147,
          column: 27
        },
        end: {
          line: 147,
          column: 70
        }
      },
      "36": {
        start: {
          line: 149,
          column: 33
        },
        end: {
          line: 155,
          column: 14
        }
      },
      "37": {
        start: {
          line: 157,
          column: 34
        },
        end: {
          line: 157,
          column: 80
        }
      },
      "38": {
        start: {
          line: 159,
          column: 31
        },
        end: {
          line: 159,
          column: 92
        }
      },
      "39": {
        start: {
          line: 161,
          column: 35
        },
        end: {
          line: 161,
          column: 77
        }
      },
      "40": {
        start: {
          line: 163,
          column: 29
        },
        end: {
          line: 176,
          column: 13
        }
      },
      "41": {
        start: {
          line: 178,
          column: 12
        },
        end: {
          line: 178,
          column: 64
        }
      },
      "42": {
        start: {
          line: 179,
          column: 35
        },
        end: {
          line: 179,
          column: 57
        }
      },
      "43": {
        start: {
          line: 180,
          column: 12
        },
        end: {
          line: 180,
          column: 97
        }
      },
      "44": {
        start: {
          line: 181,
          column: 12
        },
        end: {
          line: 181,
          column: 53
        }
      },
      "45": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 182,
          column: 28
        }
      },
      "46": {
        start: {
          line: 185,
          column: 12
        },
        end: {
          line: 185,
          column: 73
        }
      },
      "47": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 186,
          column: 24
        }
      },
      "48": {
        start: {
          line: 193,
          column: 25
        },
        end: {
          line: 193,
          column: 69
        }
      },
      "49": {
        start: {
          line: 194,
          column: 8
        },
        end: {
          line: 227,
          column: 13
        }
      },
      "50": {
        start: {
          line: 234,
          column: 19
        },
        end: {
          line: 234,
          column: 79
        }
      },
      "51": {
        start: {
          line: 236,
          column: 22
        },
        end: {
          line: 236,
          column: 38
        }
      },
      "52": {
        start: {
          line: 237,
          column: 25
        },
        end: {
          line: 237,
          column: 26
        }
      },
      "53": {
        start: {
          line: 238,
          column: 23
        },
        end: {
          line: 238,
          column: 39
        }
      },
      "54": {
        start: {
          line: 240,
          column: 8
        },
        end: {
          line: 245,
          column: 9
        }
      },
      "55": {
        start: {
          line: 240,
          column: 21
        },
        end: {
          line: 240,
          column: 22
        }
      },
      "56": {
        start: {
          line: 241,
          column: 12
        },
        end: {
          line: 244,
          column: 13
        }
      },
      "57": {
        start: {
          line: 242,
          column: 16
        },
        end: {
          line: 242,
          column: 31
        }
      },
      "58": {
        start: {
          line: 243,
          column: 16
        },
        end: {
          line: 243,
          column: 22
        }
      },
      "59": {
        start: {
          line: 247,
          column: 8
        },
        end: {
          line: 252,
          column: 9
        }
      },
      "60": {
        start: {
          line: 247,
          column: 21
        },
        end: {
          line: 247,
          column: 37
        }
      },
      "61": {
        start: {
          line: 248,
          column: 12
        },
        end: {
          line: 251,
          column: 13
        }
      },
      "62": {
        start: {
          line: 249,
          column: 16
        },
        end: {
          line: 249,
          column: 29
        }
      },
      "63": {
        start: {
          line: 250,
          column: 16
        },
        end: {
          line: 250,
          column: 22
        }
      },
      "64": {
        start: {
          line: 253,
          column: 8
        },
        end: {
          line: 253,
          column: 64
        }
      },
      "65": {
        start: {
          line: 259,
          column: 8
        },
        end: {
          line: 300,
          column: 9
        }
      },
      "66": {
        start: {
          line: 260,
          column: 27
        },
        end: {
          line: 276,
          column: 14
        }
      },
      "67": {
        start: {
          line: 277,
          column: 29
        },
        end: {
          line: 283,
          column: 14
        }
      },
      "68": {
        start: {
          line: 285,
          column: 12
        },
        end: {
          line: 293,
          column: 13
        }
      },
      "69": {
        start: {
          line: 286,
          column: 34
        },
        end: {
          line: 286,
          column: 71
        }
      },
      "70": {
        start: {
          line: 287,
          column: 16
        },
        end: {
          line: 289,
          column: 17
        }
      },
      "71": {
        start: {
          line: 288,
          column: 20
        },
        end: {
          line: 288,
          column: 52
        }
      },
      "72": {
        start: {
          line: 292,
          column: 16
        },
        end: {
          line: 292,
          column: 99
        }
      },
      "73": {
        start: {
          line: 295,
          column: 12
        },
        end: {
          line: 295,
          column: 67
        }
      },
      "74": {
        start: {
          line: 298,
          column: 12
        },
        end: {
          line: 298,
          column: 75
        }
      },
      "75": {
        start: {
          line: 299,
          column: 12
        },
        end: {
          line: 299,
          column: 67
        }
      },
      "76": {
        start: {
          line: 306,
          column: 25
        },
        end: {
          line: 311,
          column: 9
        }
      },
      "77": {
        start: {
          line: 313,
          column: 8
        },
        end: {
          line: 330,
          column: 9
        }
      },
      "78": {
        start: {
          line: 315,
          column: 16
        },
        end: {
          line: 320,
          column: 18
        }
      },
      "79": {
        start: {
          line: 322,
          column: 16
        },
        end: {
          line: 327,
          column: 18
        }
      },
      "80": {
        start: {
          line: 329,
          column: 16
        },
        end: {
          line: 329,
          column: 32
        }
      },
      "81": {
        start: {
          line: 336,
          column: 8
        },
        end: {
          line: 378,
          column: 9
        }
      },
      "82": {
        start: {
          line: 337,
          column: 12
        },
        end: {
          line: 337,
          column: 84
        }
      },
      "83": {
        start: {
          line: 338,
          column: 37
        },
        end: {
          line: 338,
          column: 85
        }
      },
      "84": {
        start: {
          line: 339,
          column: 12
        },
        end: {
          line: 341,
          column: 13
        }
      },
      "85": {
        start: {
          line: 340,
          column: 16
        },
        end: {
          line: 340,
          column: 76
        }
      },
      "86": {
        start: {
          line: 343,
          column: 27
        },
        end: {
          line: 343,
          column: 64
        }
      },
      "87": {
        start: {
          line: 345,
          column: 38
        },
        end: {
          line: 351,
          column: 14
        }
      },
      "88": {
        start: {
          line: 353,
          column: 34
        },
        end: {
          line: 353,
          column: 85
        }
      },
      "89": {
        start: {
          line: 355,
          column: 38
        },
        end: {
          line: 366,
          column: 13
        }
      },
      "90": {
        start: {
          line: 368,
          column: 12
        },
        end: {
          line: 368,
          column: 82
        }
      },
      "91": {
        start: {
          line: 370,
          column: 12
        },
        end: {
          line: 370,
          column: 106
        }
      },
      "92": {
        start: {
          line: 371,
          column: 12
        },
        end: {
          line: 371,
          column: 84
        }
      },
      "93": {
        start: {
          line: 372,
          column: 12
        },
        end: {
          line: 372,
          column: 62
        }
      },
      "94": {
        start: {
          line: 373,
          column: 12
        },
        end: {
          line: 373,
          column: 37
        }
      },
      "95": {
        start: {
          line: 376,
          column: 12
        },
        end: {
          line: 376,
          column: 73
        }
      },
      "96": {
        start: {
          line: 377,
          column: 12
        },
        end: {
          line: 377,
          column: 24
        }
      },
      "97": {
        start: {
          line: 384,
          column: 8
        },
        end: {
          line: 408,
          column: 13
        }
      },
      "98": {
        start: {
          line: 397,
          column: 69
        },
        end: {
          line: 397,
          column: 76
        }
      },
      "99": {
        start: {
          line: 397,
          column: 97
        },
        end: {
          line: 397,
          column: 108
        }
      },
      "100": {
        start: {
          line: 414,
          column: 8
        },
        end: {
          line: 471,
          column: 9
        }
      },
      "101": {
        start: {
          line: 415,
          column: 12
        },
        end: {
          line: 415,
          column: 81
        }
      },
      "102": {
        start: {
          line: 416,
          column: 29
        },
        end: {
          line: 416,
          column: 69
        }
      },
      "103": {
        start: {
          line: 417,
          column: 12
        },
        end: {
          line: 419,
          column: 13
        }
      },
      "104": {
        start: {
          line: 418,
          column: 16
        },
        end: {
          line: 418,
          column: 68
        }
      },
      "105": {
        start: {
          line: 421,
          column: 27
        },
        end: {
          line: 454,
          column: 14
        }
      },
      "106": {
        start: {
          line: 455,
          column: 29
        },
        end: {
          line: 461,
          column: 14
        }
      },
      "107": {
        start: {
          line: 463,
          column: 33
        },
        end: {
          line: 463,
          column: 79
        }
      },
      "108": {
        start: {
          line: 464,
          column: 12
        },
        end: {
          line: 464,
          column: 94
        }
      },
      "109": {
        start: {
          line: 465,
          column: 12
        },
        end: {
          line: 465,
          column: 76
        }
      },
      "110": {
        start: {
          line: 466,
          column: 12
        },
        end: {
          line: 466,
          column: 32
        }
      },
      "111": {
        start: {
          line: 469,
          column: 12
        },
        end: {
          line: 469,
          column: 77
        }
      },
      "112": {
        start: {
          line: 470,
          column: 12
        },
        end: {
          line: 470,
          column: 24
        }
      },
      "113": {
        start: {
          line: 478,
          column: 23
        },
        end: {
          line: 487,
          column: 9
        }
      },
      "114": {
        start: {
          line: 488,
          column: 8
        },
        end: {
          line: 515,
          column: 9
        }
      },
      "115": {
        start: {
          line: 490,
          column: 31
        },
        end: {
          line: 490,
          column: 72
        }
      },
      "116": {
        start: {
          line: 491,
          column: 12
        },
        end: {
          line: 493,
          column: 13
        }
      },
      "117": {
        start: {
          line: 492,
          column: 16
        },
        end: {
          line: 492,
          column: 62
        }
      },
      "118": {
        start: {
          line: 495,
          column: 34
        },
        end: {
          line: 495,
          column: 107
        }
      },
      "119": {
        start: {
          line: 496,
          column: 12
        },
        end: {
          line: 506,
          column: 13
        }
      },
      "120": {
        start: {
          line: 497,
          column: 35
        },
        end: {
          line: 497,
          column: 91
        }
      },
      "121": {
        start: {
          line: 497,
          column: 79
        },
        end: {
          line: 497,
          column: 90
        }
      },
      "122": {
        start: {
          line: 499,
          column: 16
        },
        end: {
          line: 505,
          column: 20
        }
      },
      "123": {
        start: {
          line: 499,
          column: 77
        },
        end: {
          line: 505,
          column: 17
        }
      },
      "124": {
        start: {
          line: 508,
          column: 30
        },
        end: {
          line: 508,
          column: 63
        }
      },
      "125": {
        start: {
          line: 509,
          column: 12
        },
        end: {
          line: 511,
          column: 13
        }
      },
      "126": {
        start: {
          line: 510,
          column: 16
        },
        end: {
          line: 510,
          column: 73
        }
      },
      "127": {
        start: {
          line: 514,
          column: 12
        },
        end: {
          line: 514,
          column: 82
        }
      },
      "128": {
        start: {
          line: 516,
          column: 8
        },
        end: {
          line: 516,
          column: 22
        }
      },
      "129": {
        start: {
          line: 522,
          column: 8
        },
        end: {
          line: 562,
          column: 9
        }
      },
      "130": {
        start: {
          line: 523,
          column: 12
        },
        end: {
          line: 523,
          column: 95
        }
      },
      "131": {
        start: {
          line: 524,
          column: 29
        },
        end: {
          line: 524,
          column: 69
        }
      },
      "132": {
        start: {
          line: 525,
          column: 12
        },
        end: {
          line: 527,
          column: 13
        }
      },
      "133": {
        start: {
          line: 526,
          column: 16
        },
        end: {
          line: 526,
          column: 68
        }
      },
      "134": {
        start: {
          line: 528,
          column: 27
        },
        end: {
          line: 546,
          column: 14
        }
      },
      "135": {
        start: {
          line: 547,
          column: 29
        },
        end: {
          line: 553,
          column: 14
        }
      },
      "136": {
        start: {
          line: 554,
          column: 33
        },
        end: {
          line: 554,
          column: 75
        }
      },
      "137": {
        start: {
          line: 555,
          column: 12
        },
        end: {
          line: 555,
          column: 90
        }
      },
      "138": {
        start: {
          line: 556,
          column: 12
        },
        end: {
          line: 556,
          column: 83
        }
      },
      "139": {
        start: {
          line: 557,
          column: 12
        },
        end: {
          line: 557,
          column: 32
        }
      },
      "140": {
        start: {
          line: 560,
          column: 12
        },
        end: {
          line: 560,
          column: 78
        }
      },
      "141": {
        start: {
          line: 561,
          column: 12
        },
        end: {
          line: 561,
          column: 24
        }
      },
      "142": {
        start: {
          line: 568,
          column: 8
        },
        end: {
          line: 568,
          column: 83
        }
      },
      "143": {
        start: {
          line: 571,
          column: 26
        },
        end: {
          line: 578,
          column: 9
        }
      },
      "144": {
        start: {
          line: 579,
          column: 8
        },
        end: {
          line: 579,
          column: 77
        }
      },
      "145": {
        start: {
          line: 582,
          column: 8
        },
        end: {
          line: 582,
          column: 171
        }
      },
      "146": {
        start: {
          line: 585,
          column: 22
        },
        end: {
          line: 585,
          column: 66
        }
      },
      "147": {
        start: {
          line: 585,
          column: 54
        },
        end: {
          line: 585,
          column: 65
        }
      },
      "148": {
        start: {
          line: 586,
          column: 24
        },
        end: {
          line: 586,
          column: 58
        }
      },
      "149": {
        start: {
          line: 587,
          column: 27
        },
        end: {
          line: 587,
          column: 78
        }
      },
      "150": {
        start: {
          line: 588,
          column: 32
        },
        end: {
          line: 588,
          column: 79
        }
      },
      "151": {
        start: {
          line: 589,
          column: 8
        },
        end: {
          line: 590,
          column: 25
        }
      },
      "152": {
        start: {
          line: 590,
          column: 12
        },
        end: {
          line: 590,
          column: 25
        }
      },
      "153": {
        start: {
          line: 591,
          column: 8
        },
        end: {
          line: 592,
          column: 28
        }
      },
      "154": {
        start: {
          line: 592,
          column: 12
        },
        end: {
          line: 592,
          column: 28
        }
      },
      "155": {
        start: {
          line: 593,
          column: 8
        },
        end: {
          line: 593,
          column: 22
        }
      },
      "156": {
        start: {
          line: 596,
          column: 25
        },
        end: {
          line: 612,
          column: 9
        }
      },
      "157": {
        start: {
          line: 613,
          column: 8
        },
        end: {
          line: 613,
          column: 73
        }
      },
      "158": {
        start: {
          line: 616,
          column: 8
        },
        end: {
          line: 618,
          column: 9
        }
      },
      "159": {
        start: {
          line: 617,
          column: 12
        },
        end: {
          line: 617,
          column: 57
        }
      },
      "160": {
        start: {
          line: 619,
          column: 8
        },
        end: {
          line: 623,
          column: 11
        }
      },
      "161": {
        start: {
          line: 629,
          column: 8
        },
        end: {
          line: 635,
          column: 9
        }
      },
      "162": {
        start: {
          line: 631,
          column: 12
        },
        end: {
          line: 631,
          column: 80
        }
      },
      "163": {
        start: {
          line: 634,
          column: 12
        },
        end: {
          line: 634,
          column: 82
        }
      },
      "164": {
        start: {
          line: 641,
          column: 8
        },
        end: {
          line: 641,
          column: 61
        }
      },
      "165": {
        start: {
          line: 647,
          column: 8
        },
        end: {
          line: 647,
          column: 56
        }
      },
      "166": {
        start: {
          line: 653,
          column: 8
        },
        end: {
          line: 653,
          column: 62
        }
      },
      "167": {
        start: {
          line: 659,
          column: 24
        },
        end: {
          line: 659,
          column: 67
        }
      },
      "168": {
        start: {
          line: 660,
          column: 8
        },
        end: {
          line: 663,
          column: 9
        }
      },
      "169": {
        start: {
          line: 661,
          column: 12
        },
        end: {
          line: 661,
          column: 56
        }
      },
      "170": {
        start: {
          line: 662,
          column: 12
        },
        end: {
          line: 662,
          column: 57
        }
      },
      "171": {
        start: {
          line: 664,
          column: 8
        },
        end: {
          line: 664,
          column: 23
        }
      },
      "172": {
        start: {
          line: 670,
          column: 8
        },
        end: {
          line: 680,
          column: 9
        }
      },
      "173": {
        start: {
          line: 671,
          column: 12
        },
        end: {
          line: 671,
          column: 78
        }
      },
      "174": {
        start: {
          line: 674,
          column: 12
        },
        end: {
          line: 674,
          column: 39
        }
      },
      "175": {
        start: {
          line: 675,
          column: 12
        },
        end: {
          line: 675,
          column: 79
        }
      },
      "176": {
        start: {
          line: 678,
          column: 12
        },
        end: {
          line: 678,
          column: 88
        }
      },
      "177": {
        start: {
          line: 679,
          column: 12
        },
        end: {
          line: 679,
          column: 24
        }
      },
      "178": {
        start: {
          line: 683,
          column: 0
        },
        end: {
          line: 683,
          column: 50
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 32,
            column: 4
          },
          end: {
            line: 32,
            column: 5
          }
        },
        loc: {
          start: {
            line: 32,
            column: 46
          },
          end: {
            line: 90,
            column: 5
          }
        },
        line: 32
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 94,
            column: 4
          },
          end: {
            line: 94,
            column: 5
          }
        },
        loc: {
          start: {
            line: 94,
            column: 23
          },
          end: {
            line: 113,
            column: 5
          }
        },
        line: 94
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 117,
            column: 4
          },
          end: {
            line: 117,
            column: 5
          }
        },
        loc: {
          start: {
            line: 117,
            column: 38
          },
          end: {
            line: 138,
            column: 5
          }
        },
        line: 117
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 142,
            column: 4
          },
          end: {
            line: 142,
            column: 5
          }
        },
        loc: {
          start: {
            line: 142,
            column: 36
          },
          end: {
            line: 188,
            column: 5
          }
        },
        line: 142
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 192,
            column: 4
          },
          end: {
            line: 192,
            column: 5
          }
        },
        loc: {
          start: {
            line: 192,
            column: 43
          },
          end: {
            line: 228,
            column: 5
          }
        },
        line: 192
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 232,
            column: 4
          },
          end: {
            line: 232,
            column: 5
          }
        },
        loc: {
          start: {
            line: 232,
            column: 34
          },
          end: {
            line: 254,
            column: 5
          }
        },
        line: 232
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 258,
            column: 4
          },
          end: {
            line: 258,
            column: 5
          }
        },
        loc: {
          start: {
            line: 258,
            column: 52
          },
          end: {
            line: 301,
            column: 5
          }
        },
        line: 258
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 305,
            column: 4
          },
          end: {
            line: 305,
            column: 5
          }
        },
        loc: {
          start: {
            line: 305,
            column: 42
          },
          end: {
            line: 331,
            column: 5
          }
        },
        line: 305
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 335,
            column: 4
          },
          end: {
            line: 335,
            column: 5
          }
        },
        loc: {
          start: {
            line: 335,
            column: 36
          },
          end: {
            line: 379,
            column: 5
          }
        },
        line: 335
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 383,
            column: 4
          },
          end: {
            line: 383,
            column: 5
          }
        },
        loc: {
          start: {
            line: 383,
            column: 37
          },
          end: {
            line: 409,
            column: 5
          }
        },
        line: 383
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 397,
            column: 51
          },
          end: {
            line: 397,
            column: 52
          }
        },
        loc: {
          start: {
            line: 397,
            column: 69
          },
          end: {
            line: 397,
            column: 76
          }
        },
        line: 397
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 397,
            column: 82
          },
          end: {
            line: 397,
            column: 83
          }
        },
        loc: {
          start: {
            line: 397,
            column: 97
          },
          end: {
            line: 397,
            column: 108
          }
        },
        line: 397
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 413,
            column: 4
          },
          end: {
            line: 413,
            column: 5
          }
        },
        loc: {
          start: {
            line: 413,
            column: 41
          },
          end: {
            line: 472,
            column: 5
          }
        },
        line: 413
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 476,
            column: 4
          },
          end: {
            line: 476,
            column: 5
          }
        },
        loc: {
          start: {
            line: 476,
            column: 38
          },
          end: {
            line: 517,
            column: 5
          }
        },
        line: 476
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 497,
            column: 71
          },
          end: {
            line: 497,
            column: 72
          }
        },
        loc: {
          start: {
            line: 497,
            column: 79
          },
          end: {
            line: 497,
            column: 90
          }
        },
        line: 497
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 499,
            column: 59
          },
          end: {
            line: 499,
            column: 60
          }
        },
        loc: {
          start: {
            line: 499,
            column: 77
          },
          end: {
            line: 505,
            column: 17
          }
        },
        line: 499
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 521,
            column: 4
          },
          end: {
            line: 521,
            column: 5
          }
        },
        loc: {
          start: {
            line: 521,
            column: 43
          },
          end: {
            line: 563,
            column: 5
          }
        },
        line: 521
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 567,
            column: 4
          },
          end: {
            line: 567,
            column: 5
          }
        },
        loc: {
          start: {
            line: 567,
            column: 25
          },
          end: {
            line: 569,
            column: 5
          }
        },
        line: 567
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 570,
            column: 4
          },
          end: {
            line: 570,
            column: 5
          }
        },
        loc: {
          start: {
            line: 570,
            column: 34
          },
          end: {
            line: 580,
            column: 5
          }
        },
        line: 570
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 581,
            column: 4
          },
          end: {
            line: 581,
            column: 5
          }
        },
        loc: {
          start: {
            line: 581,
            column: 41
          },
          end: {
            line: 583,
            column: 5
          }
        },
        line: 581
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 584,
            column: 4
          },
          end: {
            line: 584,
            column: 5
          }
        },
        loc: {
          start: {
            line: 584,
            column: 31
          },
          end: {
            line: 594,
            column: 5
          }
        },
        line: 584
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 585,
            column: 46
          },
          end: {
            line: 585,
            column: 47
          }
        },
        loc: {
          start: {
            line: 585,
            column: 54
          },
          end: {
            line: 585,
            column: 65
          }
        },
        line: 585
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 595,
            column: 4
          },
          end: {
            line: 595,
            column: 5
          }
        },
        loc: {
          start: {
            line: 595,
            column: 39
          },
          end: {
            line: 614,
            column: 5
          }
        },
        line: 595
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 615,
            column: 4
          },
          end: {
            line: 615,
            column: 5
          }
        },
        loc: {
          start: {
            line: 615,
            column: 57
          },
          end: {
            line: 624,
            column: 5
          }
        },
        line: 615
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 628,
            column: 4
          },
          end: {
            line: 628,
            column: 5
          }
        },
        loc: {
          start: {
            line: 628,
            column: 35
          },
          end: {
            line: 636,
            column: 5
          }
        },
        line: 628
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 640,
            column: 4
          },
          end: {
            line: 640,
            column: 5
          }
        },
        loc: {
          start: {
            line: 640,
            column: 29
          },
          end: {
            line: 642,
            column: 5
          }
        },
        line: 640
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 646,
            column: 4
          },
          end: {
            line: 646,
            column: 5
          }
        },
        loc: {
          start: {
            line: 646,
            column: 28
          },
          end: {
            line: 648,
            column: 5
          }
        },
        line: 646
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 652,
            column: 4
          },
          end: {
            line: 652,
            column: 5
          }
        },
        loc: {
          start: {
            line: 652,
            column: 39
          },
          end: {
            line: 654,
            column: 5
          }
        },
        line: 652
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 658,
            column: 4
          },
          end: {
            line: 658,
            column: 5
          }
        },
        loc: {
          start: {
            line: 658,
            column: 31
          },
          end: {
            line: 665,
            column: 5
          }
        },
        line: 658
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 669,
            column: 4
          },
          end: {
            line: 669,
            column: 5
          }
        },
        loc: {
          start: {
            line: 669,
            column: 21
          },
          end: {
            line: 681,
            column: 5
          }
        },
        line: 669
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 98,
            column: 12
          },
          end: {
            line: 100,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 98,
            column: 12
          },
          end: {
            line: 100,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 98
      },
      "1": {
        loc: {
          start: {
            line: 127,
            column: 12
          },
          end: {
            line: 132,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 127,
            column: 12
          },
          end: {
            line: 132,
            column: 13
          }
        }, {
          start: {
            line: 130,
            column: 17
          },
          end: {
            line: 132,
            column: 13
          }
        }],
        line: 127
      },
      "2": {
        loc: {
          start: {
            line: 127,
            column: 16
          },
          end: {
            line: 127,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 127,
            column: 16
          },
          end: {
            line: 127,
            column: 48
          }
        }, {
          start: {
            line: 127,
            column: 52
          },
          end: {
            line: 127,
            column: 89
          }
        }],
        line: 127
      },
      "3": {
        loc: {
          start: {
            line: 209,
            column: 2
          },
          end: {
            line: 209,
            column: 100
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 209,
            column: 31
          },
          end: {
            line: 209,
            column: 95
          }
        }, {
          start: {
            line: 209,
            column: 98
          },
          end: {
            line: 209,
            column: 100
          }
        }],
        line: 209
      },
      "4": {
        loc: {
          start: {
            line: 212,
            column: 2
          },
          end: {
            line: 212,
            column: 26
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 212,
            column: 2
          },
          end: {
            line: 212,
            column: 20
          }
        }, {
          start: {
            line: 212,
            column: 24
          },
          end: {
            line: 212,
            column: 26
          }
        }],
        line: 212
      },
      "5": {
        loc: {
          start: {
            line: 241,
            column: 12
          },
          end: {
            line: 244,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 241,
            column: 12
          },
          end: {
            line: 244,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 241
      },
      "6": {
        loc: {
          start: {
            line: 241,
            column: 16
          },
          end: {
            line: 241,
            column: 93
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 241,
            column: 16
          },
          end: {
            line: 241,
            column: 52
          }
        }, {
          start: {
            line: 241,
            column: 56
          },
          end: {
            line: 241,
            column: 93
          }
        }],
        line: 241
      },
      "7": {
        loc: {
          start: {
            line: 248,
            column: 12
          },
          end: {
            line: 251,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 248,
            column: 12
          },
          end: {
            line: 251,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 248
      },
      "8": {
        loc: {
          start: {
            line: 248,
            column: 16
          },
          end: {
            line: 248,
            column: 128
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 248,
            column: 16
          },
          end: {
            line: 248,
            column: 31
          }
        }, {
          start: {
            line: 248,
            column: 36
          },
          end: {
            line: 248,
            column: 63
          }
        }, {
          start: {
            line: 248,
            column: 67
          },
          end: {
            line: 248,
            column: 96
          }
        }, {
          start: {
            line: 248,
            column: 100
          },
          end: {
            line: 248,
            column: 127
          }
        }],
        line: 248
      },
      "9": {
        loc: {
          start: {
            line: 287,
            column: 16
          },
          end: {
            line: 289,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 287,
            column: 16
          },
          end: {
            line: 289,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 287
      },
      "10": {
        loc: {
          start: {
            line: 313,
            column: 8
          },
          end: {
            line: 330,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 314,
            column: 12
          },
          end: {
            line: 320,
            column: 18
          }
        }, {
          start: {
            line: 321,
            column: 12
          },
          end: {
            line: 327,
            column: 18
          }
        }, {
          start: {
            line: 328,
            column: 12
          },
          end: {
            line: 329,
            column: 32
          }
        }],
        line: 313
      },
      "11": {
        loc: {
          start: {
            line: 339,
            column: 12
          },
          end: {
            line: 341,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 339,
            column: 12
          },
          end: {
            line: 341,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 339
      },
      "12": {
        loc: {
          start: {
            line: 417,
            column: 12
          },
          end: {
            line: 419,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 417,
            column: 12
          },
          end: {
            line: 419,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 417
      },
      "13": {
        loc: {
          start: {
            line: 491,
            column: 12
          },
          end: {
            line: 493,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 491,
            column: 12
          },
          end: {
            line: 493,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 491
      },
      "14": {
        loc: {
          start: {
            line: 496,
            column: 12
          },
          end: {
            line: 506,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 496,
            column: 12
          },
          end: {
            line: 506,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 496
      },
      "15": {
        loc: {
          start: {
            line: 509,
            column: 12
          },
          end: {
            line: 511,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 509,
            column: 12
          },
          end: {
            line: 511,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 509
      },
      "16": {
        loc: {
          start: {
            line: 525,
            column: 12
          },
          end: {
            line: 527,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 525,
            column: 12
          },
          end: {
            line: 527,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 525
      },
      "17": {
        loc: {
          start: {
            line: 586,
            column: 25
          },
          end: {
            line: 586,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 586,
            column: 25
          },
          end: {
            line: 586,
            column: 44
          }
        }, {
          start: {
            line: 586,
            column: 48
          },
          end: {
            line: 586,
            column: 50
          }
        }],
        line: 586
      },
      "18": {
        loc: {
          start: {
            line: 587,
            column: 28
          },
          end: {
            line: 587,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 587,
            column: 28
          },
          end: {
            line: 587,
            column: 64
          }
        }, {
          start: {
            line: 587,
            column: 68
          },
          end: {
            line: 587,
            column: 70
          }
        }],
        line: 587
      },
      "19": {
        loc: {
          start: {
            line: 589,
            column: 8
          },
          end: {
            line: 590,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 589,
            column: 8
          },
          end: {
            line: 590,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 589
      },
      "20": {
        loc: {
          start: {
            line: 591,
            column: 8
          },
          end: {
            line: 592,
            column: 28
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 591,
            column: 8
          },
          end: {
            line: 592,
            column: 28
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 591
      },
      "21": {
        loc: {
          start: {
            line: 613,
            column: 15
          },
          end: {
            line: 613,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 613,
            column: 15
          },
          end: {
            line: 613,
            column: 37
          }
        }, {
          start: {
            line: 613,
            column: 41
          },
          end: {
            line: 613,
            column: 72
          }
        }],
        line: 613
      },
      "22": {
        loc: {
          start: {
            line: 616,
            column: 8
          },
          end: {
            line: 618,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 616,
            column: 8
          },
          end: {
            line: 618,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 616
      },
      "23": {
        loc: {
          start: {
            line: 653,
            column: 15
          },
          end: {
            line: 653,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 653,
            column: 15
          },
          end: {
            line: 653,
            column: 55
          }
        }, {
          start: {
            line: 653,
            column: 59
          },
          end: {
            line: 653,
            column: 61
          }
        }],
        line: 653
      },
      "24": {
        loc: {
          start: {
            line: 660,
            column: 8
          },
          end: {
            line: 663,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 660,
            column: 8
          },
          end: {
            line: 663,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 660
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0, 0, 0],
      "9": [0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "41c1bd05d59bf537794ef67c4b6859e85675a876"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_yhuknkrhf = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_yhuknkrhf();
cov_yhuknkrhf().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_yhuknkrhf().s[1]++;
exports.AIStrategyOptimizer = void 0;
const events_1 =
/* istanbul ignore next */
(cov_yhuknkrhf().s[2]++, require("events"));
const logger_1 =
/* istanbul ignore next */
(cov_yhuknkrhf().s[3]++, require("@/core/logging/logger"));
/**
 * AI Strategy Optimizer using CodeLlama 7B
 */
class AIStrategyOptimizer extends
/* istanbul ignore next */
(events_1.EventEmitter) {
  constructor(ollamaManager, systemMonitor) {
    /* istanbul ignore next */
    cov_yhuknkrhf().f[0]++;
    cov_yhuknkrhf().s[4]++;
    super();
    /* istanbul ignore next */
    cov_yhuknkrhf().s[5]++;
    this.isInitialized = false;
    /* istanbul ignore next */
    cov_yhuknkrhf().s[6]++;
    this.generatedStrategies = new Map();
    /* istanbul ignore next */
    cov_yhuknkrhf().s[7]++;
    this.optimizationHistory = new Map();
    // Strategy templates for different types
    /* istanbul ignore next */
    cov_yhuknkrhf().s[8]++;
    this.strategyTemplates = {
      momentum: {
        description: 'Momentum-based strategy that follows strong price movements',
        baseCode: `
class MomentumStrategy:
    def __init__(self, lookback_period=14, momentum_threshold=0.02):
        self.lookback_period = lookback_period
        self.momentum_threshold = momentum_threshold
        
    def calculate_momentum(self, prices):
        if len(prices) < self.lookback_period:
            return 0
        return (prices[-1] - prices[-self.lookback_period]) / prices[-self.lookback_period]
    
    def generate_signal(self, market_data):
        momentum = self.calculate_momentum(market_data['close'])
        if momentum > self.momentum_threshold:
            return 'BUY'
        elif momentum < -self.momentum_threshold:
            return 'SELL'
        return 'HOLD'
      `
      },
      mean_reversion: {
        description: 'Mean reversion strategy that trades against extreme price movements',
        baseCode: `
class MeanReversionStrategy:
    def __init__(self, lookback_period=20, std_dev_threshold=2.0):
        self.lookback_period = lookback_period
        self.std_dev_threshold = std_dev_threshold
        
    def calculate_z_score(self, prices):
        if len(prices) < self.lookback_period:
            return 0
        mean = sum(prices[-self.lookback_period:]) / self.lookback_period
        variance = sum([(p - mean) ** 2 for p in prices[-self.lookback_period:]]) / self.lookback_period
        std_dev = variance ** 0.5
        return (prices[-1] - mean) / std_dev if std_dev > 0 else 0
    
    def generate_signal(self, market_data):
        z_score = self.calculate_z_score(market_data['close'])
        if z_score > self.std_dev_threshold:
            return 'SELL'
        elif z_score < -self.std_dev_threshold:
            return 'BUY'
        return 'HOLD'
      `
      }
    };
    /* istanbul ignore next */
    cov_yhuknkrhf().s[9]++;
    this.ollamaManager = ollamaManager;
    /* istanbul ignore next */
    cov_yhuknkrhf().s[10]++;
    this.systemMonitor = systemMonitor;
    /* istanbul ignore next */
    cov_yhuknkrhf().s[11]++;
    logger_1.logger.info('🤖 AI Strategy Optimizer initialized');
  }
  /**
   * Initialize the strategy optimizer
   */
  async initialize() {
    /* istanbul ignore next */
    cov_yhuknkrhf().f[1]++;
    cov_yhuknkrhf().s[12]++;
    try {
      /* istanbul ignore next */
      cov_yhuknkrhf().s[13]++;
      logger_1.logger.info('🚀 Initializing AI Strategy Optimizer...');
      // Ensure Ollama manager is available
      /* istanbul ignore next */
      cov_yhuknkrhf().s[14]++;
      if (!this.ollamaManager) {
        /* istanbul ignore next */
        cov_yhuknkrhf().b[0][0]++;
        cov_yhuknkrhf().s[15]++;
        throw new Error('Ollama Manager is required');
      } else
      /* istanbul ignore next */
      {
        cov_yhuknkrhf().b[0][1]++;
      }
      // Test CodeLlama availability
      cov_yhuknkrhf().s[16]++;
      await this.testCodeLlamaAvailability();
      // Load existing strategies if available
      /* istanbul ignore next */
      cov_yhuknkrhf().s[17]++;
      await this.loadExistingStrategies();
      /* istanbul ignore next */
      cov_yhuknkrhf().s[18]++;
      this.isInitialized = true;
      /* istanbul ignore next */
      cov_yhuknkrhf().s[19]++;
      logger_1.logger.info('✅ AI Strategy Optimizer initialized successfully');
      /* istanbul ignore next */
      cov_yhuknkrhf().s[20]++;
      this.emit('initialized');
    } catch (error) {
      /* istanbul ignore next */
      cov_yhuknkrhf().s[21]++;
      logger_1.logger.error('❌ Failed to initialize AI Strategy Optimizer:', error);
      /* istanbul ignore next */
      cov_yhuknkrhf().s[22]++;
      throw new Error(`Strategy Optimizer initialization failed: ${error.message}`);
    }
  }
  /**
   * Test CodeLlama model availability
   */
  async testCodeLlamaAvailability() {
    /* istanbul ignore next */
    cov_yhuknkrhf().f[2]++;
    cov_yhuknkrhf().s[23]++;
    try {
      /* istanbul ignore next */
      cov_yhuknkrhf().s[24]++;
      logger_1.logger.info('🧪 Testing CodeLlama availability...');
      const testRequest =
      /* istanbul ignore next */
      (cov_yhuknkrhf().s[25]++, {
        prompt: 'Generate a simple Python function that calculates moving average. Respond with just the code.',
        modelType: 'code',
        priority: 'medium',
        maxTokens: 200
      });
      const response =
      /* istanbul ignore next */
      (cov_yhuknkrhf().s[26]++, await this.ollamaManager.generateAnalysis(testRequest));
      /* istanbul ignore next */
      cov_yhuknkrhf().s[27]++;
      if (
      /* istanbul ignore next */
      (cov_yhuknkrhf().b[2][0]++, response.content.includes('def')) ||
      /* istanbul ignore next */
      (cov_yhuknkrhf().b[2][1]++, response.content.includes('function'))) {
        /* istanbul ignore next */
        cov_yhuknkrhf().b[1][0]++;
        cov_yhuknkrhf().s[28]++;
        logger_1.logger.info('✅ CodeLlama is available and responding');
      } else {
        /* istanbul ignore next */
        cov_yhuknkrhf().b[1][1]++;
        cov_yhuknkrhf().s[29]++;
        logger_1.logger.warn('⚠️ CodeLlama response may be limited');
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_yhuknkrhf().s[30]++;
      logger_1.logger.error('❌ CodeLlama test failed:', error);
      /* istanbul ignore next */
      cov_yhuknkrhf().s[31]++;
      throw new Error('CodeLlama model is not available for strategy optimization');
    }
  }
  /**
   * Generate a new trading strategy using AI
   */
  async generateStrategy(request) {
    /* istanbul ignore next */
    cov_yhuknkrhf().f[3]++;
    cov_yhuknkrhf().s[32]++;
    try {
      /* istanbul ignore next */
      cov_yhuknkrhf().s[33]++;
      logger_1.logger.info(`🤖 Generating ${request.strategyType} strategy...`);
      const startTime =
      /* istanbul ignore next */
      (cov_yhuknkrhf().s[34]++, Date.now());
      // Build strategy generation prompt
      const prompt =
      /* istanbul ignore next */
      (cov_yhuknkrhf().s[35]++, this.buildStrategyGenerationPrompt(request));
      // Generate strategy code using CodeLlama
      const codeResponse =
      /* istanbul ignore next */
      (cov_yhuknkrhf().s[36]++, await this.ollamaManager.generateAnalysis({
        prompt,
        modelType: 'code',
        priority: 'high',
        maxTokens: 2048,
        temperature: 0.3
      }));
      // Extract and clean the generated code
      const generatedCode =
      /* istanbul ignore next */
      (cov_yhuknkrhf().s[37]++, this.extractAndCleanCode(codeResponse.content));
      // Generate strategy parameters
      const parameters =
      /* istanbul ignore next */
      (cov_yhuknkrhf().s[38]++, await this.generateStrategyParameters(request, generatedCode));
      // Generate risk management rules
      const riskManagement =
      /* istanbul ignore next */
      (cov_yhuknkrhf().s[39]++, await this.generateRiskManagement(request));
      // Create strategy object
      const strategy =
      /* istanbul ignore next */
      (cov_yhuknkrhf().s[40]++, {
        id: this.generateStrategyId(),
        name: this.generateStrategyName(request),
        description: this.generateStrategyDescription(request),
        code: generatedCode,
        parameters,
        riskManagement,
        metadata: {
          generatedAt: new Date(),
          modelUsed: codeResponse.modelUsed,
          optimizationScore: 0,
          // Will be calculated after backtesting
          complexity: this.assessCodeComplexity(generatedCode)
        }
      });
      // Store the generated strategy
      /* istanbul ignore next */
      cov_yhuknkrhf().s[41]++;
      this.generatedStrategies.set(strategy.id, strategy);
      const processingTime =
      /* istanbul ignore next */
      (cov_yhuknkrhf().s[42]++, Date.now() - startTime);
      /* istanbul ignore next */
      cov_yhuknkrhf().s[43]++;
      logger_1.logger.info(`✅ Strategy generated: ${strategy.name} (${processingTime}ms)`);
      /* istanbul ignore next */
      cov_yhuknkrhf().s[44]++;
      this.emit('strategyGenerated', strategy);
      /* istanbul ignore next */
      cov_yhuknkrhf().s[45]++;
      return strategy;
    } catch (error) {
      /* istanbul ignore next */
      cov_yhuknkrhf().s[46]++;
      logger_1.logger.error('❌ Error generating strategy:', error);
      /* istanbul ignore next */
      cov_yhuknkrhf().s[47]++;
      throw error;
    }
  }
  /**
   * Build strategy generation prompt for CodeLlama
   */
  buildStrategyGenerationPrompt(request) {
    /* istanbul ignore next */
    cov_yhuknkrhf().f[4]++;
    const template =
    /* istanbul ignore next */
    (cov_yhuknkrhf().s[48]++, this.strategyTemplates[request.strategyType]);
    /* istanbul ignore next */
    cov_yhuknkrhf().s[49]++;
    return `
Generate a complete Python trading strategy class for ${request.strategyType} trading with the following requirements:

Strategy Type: ${request.strategyType}
Market Conditions: ${JSON.stringify(request.marketConditions)}
Risk Profile: ${request.riskProfile}
Timeframe: ${request.timeframe}
Symbols: ${request.symbols.join(', ')}

Constraints:
- Maximum drawdown: ${request.constraints.maxDrawdown}%
- Maximum position size: ${request.constraints.maxPositionSize}%
- Minimum win rate: ${request.constraints.minWinRate}%
- Maximum trades per day: ${request.constraints.maxTrades}

${request.customRequirements ?
    /* istanbul ignore next */
    (cov_yhuknkrhf().b[3][0]++, `Custom Requirements:\n${request.customRequirements.join('\n')}`) :
    /* istanbul ignore next */
    (cov_yhuknkrhf().b[3][1]++, '')}

Base Template:
${
    /* istanbul ignore next */
    (cov_yhuknkrhf().b[4][0]++, template?.baseCode) ||
    /* istanbul ignore next */
    (cov_yhuknkrhf().b[4][1]++, '')}

Generate a complete, production-ready strategy class that includes:
1. Proper initialization with configurable parameters
2. Signal generation logic optimized for the specified market conditions
3. Position sizing calculations
4. Risk management integration
5. Performance tracking methods
6. Error handling and validation
7. Clear documentation and comments

The code should be efficient, readable, and follow Python best practices.
Focus on the specific strategy type and market conditions provided.

Respond with only the Python code, properly formatted and commented.
    `.trim();
  }
  /**
   * Extract and clean generated code
   */
  extractAndCleanCode(response) {
    /* istanbul ignore next */
    cov_yhuknkrhf().f[5]++;
    // Remove markdown code blocks if present
    let code =
    /* istanbul ignore next */
    (cov_yhuknkrhf().s[50]++, response.replace(/```python\n?/g, '').replace(/```\n?/g, ''));
    // Remove any explanatory text before or after code
    const lines =
    /* istanbul ignore next */
    (cov_yhuknkrhf().s[51]++, code.split('\n'));
    let startIndex =
    /* istanbul ignore next */
    (cov_yhuknkrhf().s[52]++, 0);
    let endIndex =
    /* istanbul ignore next */
    (cov_yhuknkrhf().s[53]++, lines.length - 1);
    // Find the start of the class definition
    /* istanbul ignore next */
    cov_yhuknkrhf().s[54]++;
    for (let i =
    /* istanbul ignore next */
    (cov_yhuknkrhf().s[55]++, 0); i < lines.length; i++) {
      /* istanbul ignore next */
      cov_yhuknkrhf().s[56]++;
      if (
      /* istanbul ignore next */
      (cov_yhuknkrhf().b[6][0]++, lines[i].trim().startsWith('class ')) ||
      /* istanbul ignore next */
      (cov_yhuknkrhf().b[6][1]++, lines[i].trim().startsWith('import '))) {
        /* istanbul ignore next */
        cov_yhuknkrhf().b[5][0]++;
        cov_yhuknkrhf().s[57]++;
        startIndex = i;
        /* istanbul ignore next */
        cov_yhuknkrhf().s[58]++;
        break;
      } else
      /* istanbul ignore next */
      {
        cov_yhuknkrhf().b[5][1]++;
      }
    }
    // Find the end of the code (last non-empty line with proper indentation)
    /* istanbul ignore next */
    cov_yhuknkrhf().s[59]++;
    for (let i =
    /* istanbul ignore next */
    (cov_yhuknkrhf().s[60]++, lines.length - 1); i >= 0; i--) {
      /* istanbul ignore next */
      cov_yhuknkrhf().s[61]++;
      if (
      /* istanbul ignore next */
      (cov_yhuknkrhf().b[8][0]++, lines[i].trim()) && (
      /* istanbul ignore next */
      (cov_yhuknkrhf().b[8][1]++, lines[i].startsWith('    ')) ||
      /* istanbul ignore next */
      (cov_yhuknkrhf().b[8][2]++, lines[i].startsWith('class ')) ||
      /* istanbul ignore next */
      (cov_yhuknkrhf().b[8][3]++, lines[i].startsWith('def ')))) {
        /* istanbul ignore next */
        cov_yhuknkrhf().b[7][0]++;
        cov_yhuknkrhf().s[62]++;
        endIndex = i;
        /* istanbul ignore next */
        cov_yhuknkrhf().s[63]++;
        break;
      } else
      /* istanbul ignore next */
      {
        cov_yhuknkrhf().b[7][1]++;
      }
    }
    /* istanbul ignore next */
    cov_yhuknkrhf().s[64]++;
    return lines.slice(startIndex, endIndex + 1).join('\n');
  }
  /**
   * Generate strategy parameters using AI
   */
  async generateStrategyParameters(request, code) {
    /* istanbul ignore next */
    cov_yhuknkrhf().f[6]++;
    cov_yhuknkrhf().s[65]++;
    try {
      const prompt =
      /* istanbul ignore next */
      (cov_yhuknkrhf().s[66]++, `
Analyze this trading strategy code and suggest optimal parameters for ${request.strategyType} trading:

${code}

Market Conditions: ${JSON.stringify(request.marketConditions)}
Risk Profile: ${request.riskProfile}
Timeframe: ${request.timeframe}

Provide optimal parameter values in JSON format. Consider:
1. Market volatility and trend
2. Risk profile requirements
3. Timeframe characteristics
4. Historical performance patterns

Respond with only a JSON object containing parameter names and values.
      `.trim());
      const response =
      /* istanbul ignore next */
      (cov_yhuknkrhf().s[67]++, await this.ollamaManager.generateAnalysis({
        prompt,
        modelType: 'code',
        priority: 'medium',
        maxTokens: 500,
        temperature: 0.2
      }));
      // Try to parse JSON from response
      /* istanbul ignore next */
      cov_yhuknkrhf().s[68]++;
      try {
        const jsonMatch =
        /* istanbul ignore next */
        (cov_yhuknkrhf().s[69]++, response.content.match(/\{[\s\S]*\}/));
        /* istanbul ignore next */
        cov_yhuknkrhf().s[70]++;
        if (jsonMatch) {
          /* istanbul ignore next */
          cov_yhuknkrhf().b[9][0]++;
          cov_yhuknkrhf().s[71]++;
          return JSON.parse(jsonMatch[0]);
        } else
        /* istanbul ignore next */
        {
          cov_yhuknkrhf().b[9][1]++;
        }
      } catch (parseError) {
        /* istanbul ignore next */
        cov_yhuknkrhf().s[72]++;
        logger_1.logger.warn('⚠️ Could not parse AI-generated parameters, using defaults');
      }
      // Fallback to default parameters
      /* istanbul ignore next */
      cov_yhuknkrhf().s[73]++;
      return this.getDefaultParameters(request.strategyType);
    } catch (error) {
      /* istanbul ignore next */
      cov_yhuknkrhf().s[74]++;
      logger_1.logger.error('❌ Error generating parameters:', error);
      /* istanbul ignore next */
      cov_yhuknkrhf().s[75]++;
      return this.getDefaultParameters(request.strategyType);
    }
  }
  /**
   * Generate risk management rules
   */
  async generateRiskManagement(request) {
    /* istanbul ignore next */
    cov_yhuknkrhf().f[7]++;
    const baseRisk =
    /* istanbul ignore next */
    (cov_yhuknkrhf().s[76]++, {
      stopLoss: 0.02,
      // 2%
      takeProfit: 0.06,
      // 6%
      positionSizing: 'fixed_percentage',
      maxDrawdown: request.constraints.maxDrawdown / 100
    });
    // Adjust based on risk profile
    /* istanbul ignore next */
    cov_yhuknkrhf().s[77]++;
    switch (request.riskProfile) {
      case 'CONSERVATIVE':
        /* istanbul ignore next */
        cov_yhuknkrhf().b[10][0]++;
        cov_yhuknkrhf().s[78]++;
        return {
          ...baseRisk,
          stopLoss: 0.015,
          // 1.5%
          takeProfit: 0.03,
          // 3%
          maxDrawdown: Math.min(baseRisk.maxDrawdown, 0.05) // Max 5%
        };
      case 'AGGRESSIVE':
        /* istanbul ignore next */
        cov_yhuknkrhf().b[10][1]++;
        cov_yhuknkrhf().s[79]++;
        return {
          ...baseRisk,
          stopLoss: 0.03,
          // 3%
          takeProfit: 0.09,
          // 9%
          maxDrawdown: Math.min(baseRisk.maxDrawdown, 0.15) // Max 15%
        };
      default:
        /* istanbul ignore next */
        cov_yhuknkrhf().b[10][2]++;
        cov_yhuknkrhf().s[80]++;
        return baseRisk;
    }
  }
  /**
   * Optimize existing strategy using AI
   */
  async optimizeStrategy(request) {
    /* istanbul ignore next */
    cov_yhuknkrhf().f[8]++;
    cov_yhuknkrhf().s[81]++;
    try {
      /* istanbul ignore next */
      cov_yhuknkrhf().s[82]++;
      logger_1.logger.info(`🔧 Optimizing strategy ${request.strategyId}...`);
      const existingStrategy =
      /* istanbul ignore next */
      (cov_yhuknkrhf().s[83]++, this.generatedStrategies.get(request.strategyId));
      /* istanbul ignore next */
      cov_yhuknkrhf().s[84]++;
      if (!existingStrategy) {
        /* istanbul ignore next */
        cov_yhuknkrhf().b[11][0]++;
        cov_yhuknkrhf().s[85]++;
        throw new Error(`Strategy ${request.strategyId} not found`);
      } else
      /* istanbul ignore next */
      {
        cov_yhuknkrhf().b[11][1]++;
      }
      // Build optimization prompt
      const prompt =
      /* istanbul ignore next */
      (cov_yhuknkrhf().s[86]++, this.buildOptimizationPrompt(request));
      // Generate optimized code
      const optimizedResponse =
      /* istanbul ignore next */
      (cov_yhuknkrhf().s[87]++, await this.ollamaManager.generateAnalysis({
        prompt,
        modelType: 'code',
        priority: 'high',
        maxTokens: 2048,
        temperature: 0.2
      }));
      // Extract optimized code
      const optimizedCode =
      /* istanbul ignore next */
      (cov_yhuknkrhf().s[88]++, this.extractAndCleanCode(optimizedResponse.content));
      // Create optimized strategy
      const optimizedStrategy =
      /* istanbul ignore next */
      (cov_yhuknkrhf().s[89]++, {
        ...existingStrategy,
        id: this.generateStrategyId(),
        name: `${existingStrategy.name} (Optimized)`,
        code: optimizedCode,
        metadata: {
          ...existingStrategy.metadata,
          generatedAt: new Date(),
          modelUsed: optimizedResponse.modelUsed,
          complexity: this.assessCodeComplexity(optimizedCode)
        }
      });
      // Store optimized strategy
      /* istanbul ignore next */
      cov_yhuknkrhf().s[90]++;
      this.generatedStrategies.set(optimizedStrategy.id, optimizedStrategy);
      // Record optimization history
      /* istanbul ignore next */
      cov_yhuknkrhf().s[91]++;
      this.recordOptimization(request.strategyId, optimizedStrategy.id, request.performanceMetrics);
      /* istanbul ignore next */
      cov_yhuknkrhf().s[92]++;
      logger_1.logger.info(`✅ Strategy optimized: ${optimizedStrategy.name}`);
      /* istanbul ignore next */
      cov_yhuknkrhf().s[93]++;
      this.emit('strategyOptimized', optimizedStrategy);
      /* istanbul ignore next */
      cov_yhuknkrhf().s[94]++;
      return optimizedStrategy;
    } catch (error) {
      /* istanbul ignore next */
      cov_yhuknkrhf().s[95]++;
      logger_1.logger.error('❌ Error optimizing strategy:', error);
      /* istanbul ignore next */
      cov_yhuknkrhf().s[96]++;
      throw error;
    }
  }
  /**
   * Build optimization prompt
   */
  buildOptimizationPrompt(request) {
    /* istanbul ignore next */
    cov_yhuknkrhf().f[9]++;
    cov_yhuknkrhf().s[97]++;
    return `
Optimize this trading strategy code to improve performance:

Current Code:
${request.currentCode}

Current Performance Metrics:
- Win Rate: ${request.performanceMetrics.winRate}%
- Profit Factor: ${request.performanceMetrics.profitFactor}
- Sharpe Ratio: ${request.performanceMetrics.sharpeRatio}
- Max Drawdown: ${request.performanceMetrics.maxDrawdown}%

Optimization Goals:
${Object.entries(request.optimizationGoals).filter(([_, enabled]) => {
      /* istanbul ignore next */
      cov_yhuknkrhf().f[10]++;
      cov_yhuknkrhf().s[98]++;
      return enabled;
    }).map(([goal, _]) => {
      /* istanbul ignore next */
      cov_yhuknkrhf().f[11]++;
      cov_yhuknkrhf().s[99]++;
      return `- ${goal}`;
    }).join('\n')}

Provide an optimized version of the code that:
1. Addresses the performance issues identified
2. Implements improvements for the specified goals
3. Maintains code readability and maintainability
4. Adds better error handling and validation
5. Includes performance optimizations
6. Adds adaptive parameters based on market conditions

Respond with only the optimized Python code, properly formatted and commented.
    `.trim();
  }
  /**
   * Perform AI code review
   */
  async reviewStrategyCode(strategyId) {
    /* istanbul ignore next */
    cov_yhuknkrhf().f[12]++;
    cov_yhuknkrhf().s[100]++;
    try {
      /* istanbul ignore next */
      cov_yhuknkrhf().s[101]++;
      logger_1.logger.info(`🔍 Reviewing strategy code: ${strategyId}...`);
      const strategy =
      /* istanbul ignore next */
      (cov_yhuknkrhf().s[102]++, this.generatedStrategies.get(strategyId));
      /* istanbul ignore next */
      cov_yhuknkrhf().s[103]++;
      if (!strategy) {
        /* istanbul ignore next */
        cov_yhuknkrhf().b[12][0]++;
        cov_yhuknkrhf().s[104]++;
        throw new Error(`Strategy ${strategyId} not found`);
      } else
      /* istanbul ignore next */
      {
        cov_yhuknkrhf().b[12][1]++;
      }
      // Build code review prompt
      const prompt =
      /* istanbul ignore next */
      (cov_yhuknkrhf().s[105]++, `
Perform a comprehensive code review of this trading strategy:

${strategy.code}

Analyze the code for:
1. Performance issues and optimizations
2. Security vulnerabilities
3. Logic errors or edge cases
4. Code style and readability
5. Risk management implementation
6. Error handling completeness

Provide detailed feedback in the following format:
OVERALL_SCORE: [0-100]

ISSUES:
- SEVERITY: [LOW/MEDIUM/HIGH/CRITICAL]
- TYPE: [PERFORMANCE/SECURITY/LOGIC/STYLE]
- DESCRIPTION: [Issue description]
- SUGGESTION: [How to fix]
- LINE: [Line number if applicable]

OPTIMIZATIONS:
- TYPE: [PERFORMANCE/READABILITY/MAINTAINABILITY]
- DESCRIPTION: [Optimization description]
- IMPACT: [LOW/MEDIUM/HIGH]
- CODE: [Suggested code improvement]

RISK_ASSESSMENT:
- LEVEL: [LOW/MEDIUM/HIGH/CRITICAL]
- FACTORS: [Risk factors identified]
- MITIGATIONS: [Suggested mitigations]
      `.trim());
      const response =
      /* istanbul ignore next */
      (cov_yhuknkrhf().s[106]++, await this.ollamaManager.generateAnalysis({
        prompt,
        modelType: 'code',
        priority: 'medium',
        maxTokens: 1500,
        temperature: 0.1
      }));
      // Parse the review response
      const reviewResult =
      /* istanbul ignore next */
      (cov_yhuknkrhf().s[107]++, this.parseCodeReviewResponse(response.content));
      /* istanbul ignore next */
      cov_yhuknkrhf().s[108]++;
      logger_1.logger.info(`✅ Code review completed: ${reviewResult.overallScore}/100`);
      /* istanbul ignore next */
      cov_yhuknkrhf().s[109]++;
      this.emit('codeReviewed', {
        strategyId,
        review: reviewResult
      });
      /* istanbul ignore next */
      cov_yhuknkrhf().s[110]++;
      return reviewResult;
    } catch (error) {
      /* istanbul ignore next */
      cov_yhuknkrhf().s[111]++;
      logger_1.logger.error('❌ Error reviewing strategy code:', error);
      /* istanbul ignore next */
      cov_yhuknkrhf().s[112]++;
      throw error;
    }
  }
  /**
   * Parse code review response from AI
   */
  parseCodeReviewResponse(response) {
    /* istanbul ignore next */
    cov_yhuknkrhf().f[13]++;
    // Default result structure
    const result =
    /* istanbul ignore next */
    (cov_yhuknkrhf().s[113]++, {
      overallScore: 75,
      issues: [],
      optimizations: [],
      riskAssessment: {
        level: 'MEDIUM',
        factors: [],
        mitigations: []
      }
    });
    /* istanbul ignore next */
    cov_yhuknkrhf().s[114]++;
    try {
      // Extract overall score
      const scoreMatch =
      /* istanbul ignore next */
      (cov_yhuknkrhf().s[115]++, response.match(/OVERALL_SCORE:\s*(\d+)/i));
      /* istanbul ignore next */
      cov_yhuknkrhf().s[116]++;
      if (scoreMatch) {
        /* istanbul ignore next */
        cov_yhuknkrhf().b[13][0]++;
        cov_yhuknkrhf().s[117]++;
        result.overallScore = parseInt(scoreMatch[1]);
      } else
      /* istanbul ignore next */
      {
        cov_yhuknkrhf().b[13][1]++;
      }
      // Extract issues (simplified parsing)
      const issuesSection =
      /* istanbul ignore next */
      (cov_yhuknkrhf().s[118]++, response.match(/ISSUES:([\s\S]*?)(?:OPTIMIZATIONS:|RISK_ASSESSMENT:|$)/i));
      /* istanbul ignore next */
      cov_yhuknkrhf().s[119]++;
      if (issuesSection) {
        /* istanbul ignore next */
        cov_yhuknkrhf().b[14][0]++;
        const issueLines =
        /* istanbul ignore next */
        (cov_yhuknkrhf().s[120]++, issuesSection[1].split('\n').filter(line => {
          /* istanbul ignore next */
          cov_yhuknkrhf().f[14]++;
          cov_yhuknkrhf().s[121]++;
          return line.trim();
        }));
        // Parse individual issues (simplified)
        /* istanbul ignore next */
        cov_yhuknkrhf().s[122]++;
        result.issues = issueLines.slice(0, 5).map((line, index) => {
          /* istanbul ignore next */
          cov_yhuknkrhf().f[15]++;
          cov_yhuknkrhf().s[123]++;
          return {
            severity: 'MEDIUM',
            type: 'LOGIC',
            description: line.trim(),
            suggestion: 'Review and improve this aspect',
            lineNumber: index + 1
          };
        });
      } else
      /* istanbul ignore next */
      {
        cov_yhuknkrhf().b[14][1]++;
      }
      // Extract risk assessment level
      const riskMatch =
      /* istanbul ignore next */
      (cov_yhuknkrhf().s[124]++, response.match(/LEVEL:\s*(\w+)/i));
      /* istanbul ignore next */
      cov_yhuknkrhf().s[125]++;
      if (riskMatch) {
        /* istanbul ignore next */
        cov_yhuknkrhf().b[15][0]++;
        cov_yhuknkrhf().s[126]++;
        result.riskAssessment.level = riskMatch[1].toUpperCase();
      } else
      /* istanbul ignore next */
      {
        cov_yhuknkrhf().b[15][1]++;
      }
    } catch (parseError) {
      /* istanbul ignore next */
      cov_yhuknkrhf().s[127]++;
      logger_1.logger.warn('⚠️ Could not fully parse code review response');
    }
    /* istanbul ignore next */
    cov_yhuknkrhf().s[128]++;
    return result;
  }
  /**
   * Generate strategy backtesting code
   */
  async generateBacktestCode(strategyId) {
    /* istanbul ignore next */
    cov_yhuknkrhf().f[16]++;
    cov_yhuknkrhf().s[129]++;
    try {
      /* istanbul ignore next */
      cov_yhuknkrhf().s[130]++;
      logger_1.logger.info(`📊 Generating backtest code for strategy: ${strategyId}...`);
      const strategy =
      /* istanbul ignore next */
      (cov_yhuknkrhf().s[131]++, this.generatedStrategies.get(strategyId));
      /* istanbul ignore next */
      cov_yhuknkrhf().s[132]++;
      if (!strategy) {
        /* istanbul ignore next */
        cov_yhuknkrhf().b[16][0]++;
        cov_yhuknkrhf().s[133]++;
        throw new Error(`Strategy ${strategyId} not found`);
      } else
      /* istanbul ignore next */
      {
        cov_yhuknkrhf().b[16][1]++;
      }
      const prompt =
      /* istanbul ignore next */
      (cov_yhuknkrhf().s[134]++, `
Generate a comprehensive backtesting framework for this trading strategy:

${strategy.code}

The backtesting code should include:
1. Data loading and preprocessing
2. Strategy execution simulation
3. Performance metrics calculation (win rate, profit factor, Sharpe ratio, max drawdown)
4. Trade logging and analysis
5. Visualization of results
6. Risk metrics calculation
7. Statistical significance testing

Provide complete Python code that can be run independently to backtest the strategy.
Include proper error handling and data validation.

Respond with only the Python backtesting code.
      `.trim());
      const response =
      /* istanbul ignore next */
      (cov_yhuknkrhf().s[135]++, await this.ollamaManager.generateAnalysis({
        prompt,
        modelType: 'code',
        priority: 'medium',
        maxTokens: 2048,
        temperature: 0.2
      }));
      const backtestCode =
      /* istanbul ignore next */
      (cov_yhuknkrhf().s[136]++, this.extractAndCleanCode(response.content));
      /* istanbul ignore next */
      cov_yhuknkrhf().s[137]++;
      logger_1.logger.info(`✅ Backtest code generated for strategy: ${strategyId}`);
      /* istanbul ignore next */
      cov_yhuknkrhf().s[138]++;
      this.emit('backtestCodeGenerated', {
        strategyId,
        code: backtestCode
      });
      /* istanbul ignore next */
      cov_yhuknkrhf().s[139]++;
      return backtestCode;
    } catch (error) {
      /* istanbul ignore next */
      cov_yhuknkrhf().s[140]++;
      logger_1.logger.error('❌ Error generating backtest code:', error);
      /* istanbul ignore next */
      cov_yhuknkrhf().s[141]++;
      throw error;
    }
  }
  /**
   * Generate utility functions and helpers
   */
  generateStrategyId() {
    /* istanbul ignore next */
    cov_yhuknkrhf().f[17]++;
    cov_yhuknkrhf().s[142]++;
    return `strategy_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }
  generateStrategyName(request) {
    /* istanbul ignore next */
    cov_yhuknkrhf().f[18]++;
    const typeNames =
    /* istanbul ignore next */
    (cov_yhuknkrhf().s[143]++, {
      momentum: 'Momentum Trader',
      mean_reversion: 'Mean Reversion',
      breakout: 'Breakout Hunter',
      scalping: 'Scalping Bot',
      swing: 'Swing Trader',
      arbitrage: 'Arbitrage Finder'
    });
    /* istanbul ignore next */
    cov_yhuknkrhf().s[144]++;
    return `${typeNames[request.strategyType]} (${request.riskProfile})`;
  }
  generateStrategyDescription(request) {
    /* istanbul ignore next */
    cov_yhuknkrhf().f[19]++;
    cov_yhuknkrhf().s[145]++;
    return `AI-generated ${request.strategyType} strategy optimized for ${request.riskProfile.toLowerCase()} risk profile and ${request.timeframe} timeframe trading.`;
  }
  assessCodeComplexity(code) {
    /* istanbul ignore next */
    cov_yhuknkrhf().f[20]++;
    const lines =
    /* istanbul ignore next */
    (cov_yhuknkrhf().s[146]++, code.split('\n').filter(line => {
      /* istanbul ignore next */
      cov_yhuknkrhf().f[21]++;
      cov_yhuknkrhf().s[147]++;
      return line.trim();
    }));
    const methods =
    /* istanbul ignore next */
    (cov_yhuknkrhf().s[148]++, (
    /* istanbul ignore next */
    (cov_yhuknkrhf().b[17][0]++, code.match(/def /g)) ||
    /* istanbul ignore next */
    (cov_yhuknkrhf().b[17][1]++, [])).length);
    const conditions =
    /* istanbul ignore next */
    (cov_yhuknkrhf().s[149]++, (
    /* istanbul ignore next */
    (cov_yhuknkrhf().b[18][0]++, code.match(/if |elif |while |for /g)) ||
    /* istanbul ignore next */
    (cov_yhuknkrhf().b[18][1]++, [])).length);
    const complexityScore =
    /* istanbul ignore next */
    (cov_yhuknkrhf().s[150]++, lines.length + methods * 5 + conditions * 2);
    /* istanbul ignore next */
    cov_yhuknkrhf().s[151]++;
    if (complexityScore < 50) {
      /* istanbul ignore next */
      cov_yhuknkrhf().b[19][0]++;
      cov_yhuknkrhf().s[152]++;
      return 'LOW';
    } else
    /* istanbul ignore next */
    {
      cov_yhuknkrhf().b[19][1]++;
    }
    cov_yhuknkrhf().s[153]++;
    if (complexityScore < 150) {
      /* istanbul ignore next */
      cov_yhuknkrhf().b[20][0]++;
      cov_yhuknkrhf().s[154]++;
      return 'MEDIUM';
    } else
    /* istanbul ignore next */
    {
      cov_yhuknkrhf().b[20][1]++;
    }
    cov_yhuknkrhf().s[155]++;
    return 'HIGH';
  }
  getDefaultParameters(strategyType) {
    /* istanbul ignore next */
    cov_yhuknkrhf().f[22]++;
    const defaults =
    /* istanbul ignore next */
    (cov_yhuknkrhf().s[156]++, {
      momentum: {
        lookback_period: 14,
        momentum_threshold: 0.02,
        volume_threshold: 1.5
      },
      mean_reversion: {
        lookback_period: 20,
        std_dev_threshold: 2.0,
        mean_reversion_period: 5
      },
      breakout: {
        lookback_period: 20,
        breakout_threshold: 0.03,
        volume_confirmation: true
      }
    });
    /* istanbul ignore next */
    cov_yhuknkrhf().s[157]++;
    return /* istanbul ignore next */(cov_yhuknkrhf().b[21][0]++, defaults[strategyType]) ||
    /* istanbul ignore next */
    (cov_yhuknkrhf().b[21][1]++, {
      period: 14,
      threshold: 0.02
    });
  }
  recordOptimization(originalId, optimizedId, metrics) {
    /* istanbul ignore next */
    cov_yhuknkrhf().f[23]++;
    cov_yhuknkrhf().s[158]++;
    if (!this.optimizationHistory.has(originalId)) {
      /* istanbul ignore next */
      cov_yhuknkrhf().b[22][0]++;
      cov_yhuknkrhf().s[159]++;
      this.optimizationHistory.set(originalId, []);
    } else
    /* istanbul ignore next */
    {
      cov_yhuknkrhf().b[22][1]++;
    }
    cov_yhuknkrhf().s[160]++;
    this.optimizationHistory.get(originalId).push({
      optimizedId,
      timestamp: new Date(),
      originalMetrics: metrics
    });
  }
  /**
   * Load existing strategies from storage
   */
  async loadExistingStrategies() {
    /* istanbul ignore next */
    cov_yhuknkrhf().f[24]++;
    cov_yhuknkrhf().s[161]++;
    try {
      /* istanbul ignore next */
      cov_yhuknkrhf().s[162]++;
      // In production, this would load from persistent storage
      logger_1.logger.info('📂 Existing strategies loaded (placeholder)');
    } catch (error) {
      /* istanbul ignore next */
      cov_yhuknkrhf().s[163]++;
      logger_1.logger.warn('⚠️ Could not load existing strategies:', error);
    }
  }
  /**
   * Get all generated strategies
   */
  getGeneratedStrategies() {
    /* istanbul ignore next */
    cov_yhuknkrhf().f[25]++;
    cov_yhuknkrhf().s[164]++;
    return Array.from(this.generatedStrategies.values());
  }
  /**
   * Get strategy by ID
   */
  getStrategy(strategyId) {
    /* istanbul ignore next */
    cov_yhuknkrhf().f[26]++;
    cov_yhuknkrhf().s[165]++;
    return this.generatedStrategies.get(strategyId);
  }
  /**
   * Get optimization history for a strategy
   */
  getOptimizationHistory(strategyId) {
    /* istanbul ignore next */
    cov_yhuknkrhf().f[27]++;
    cov_yhuknkrhf().s[166]++;
    return /* istanbul ignore next */(cov_yhuknkrhf().b[23][0]++, this.optimizationHistory.get(strategyId)) ||
    /* istanbul ignore next */
    (cov_yhuknkrhf().b[23][1]++, []);
  }
  /**
   * Delete a strategy
   */
  deleteStrategy(strategyId) {
    /* istanbul ignore next */
    cov_yhuknkrhf().f[28]++;
    const deleted =
    /* istanbul ignore next */
    (cov_yhuknkrhf().s[167]++, this.generatedStrategies.delete(strategyId));
    /* istanbul ignore next */
    cov_yhuknkrhf().s[168]++;
    if (deleted) {
      /* istanbul ignore next */
      cov_yhuknkrhf().b[24][0]++;
      cov_yhuknkrhf().s[169]++;
      this.optimizationHistory.delete(strategyId);
      /* istanbul ignore next */
      cov_yhuknkrhf().s[170]++;
      this.emit('strategyDeleted', {
        strategyId
      });
    } else
    /* istanbul ignore next */
    {
      cov_yhuknkrhf().b[24][1]++;
    }
    cov_yhuknkrhf().s[171]++;
    return deleted;
  }
  /**
   * Shutdown the strategy optimizer
   */
  async shutdown() {
    /* istanbul ignore next */
    cov_yhuknkrhf().f[29]++;
    cov_yhuknkrhf().s[172]++;
    try {
      /* istanbul ignore next */
      cov_yhuknkrhf().s[173]++;
      logger_1.logger.info('🛑 Shutting down AI Strategy Optimizer...');
      // Save strategies if needed
      // await this.saveStrategies();
      /* istanbul ignore next */
      cov_yhuknkrhf().s[174]++;
      this.isInitialized = false;
      /* istanbul ignore next */
      cov_yhuknkrhf().s[175]++;
      logger_1.logger.info('✅ AI Strategy Optimizer shutdown completed');
    } catch (error) {
      /* istanbul ignore next */
      cov_yhuknkrhf().s[176]++;
      logger_1.logger.error('❌ Error during Strategy Optimizer shutdown:', error);
      /* istanbul ignore next */
      cov_yhuknkrhf().s[177]++;
      throw error;
    }
  }
}
/* istanbul ignore next */
cov_yhuknkrhf().s[178]++;
exports.AIStrategyOptimizer = AIStrategyOptimizer;