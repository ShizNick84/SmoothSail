86e8119ce15a3a46fb5743d08d54cee0
"use strict";

/**
 * =============================================================================
 * SECURITY TEST ORCHESTRATOR
 * =============================================================================
 *
 * Central orchestrator for all security testing activities in the AI crypto
 * trading agent. Coordinates penetration testing, vulnerability scanning,
 * compliance testing, and security monitoring to provide comprehensive
 * security validation.
 *
 * Features:
 * - Centralized security test coordination
 * - Parallel and sequential test execution
 * - Comprehensive security reporting
 * - Risk-based test prioritization
 * - Automated remediation workflows
 * - Integration with CI/CD pipelines
 *
 * Requirements: 25.7 - Comprehensive security testing orchestration
 *
 * @author AI Crypto Trading System
 * @version 1.0.0
 * @license PROPRIETARY
 * =============================================================================
 */
/* istanbul ignore next */
function cov_2iypd10nex() {
  var path = "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\security-test-orchestrator.ts";
  var hash = "ec900e70dc4c35d56a3106b9eae8629e3c35e860";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\security-test-orchestrator.ts",
    statementMap: {
      "0": {
        start: {
          line: 27,
          column: 22
        },
        end: {
          line: 37,
          column: 3
        }
      },
      "1": {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 28,
          column: 33
        }
      },
      "2": {
        start: {
          line: 28,
          column: 26
        },
        end: {
          line: 28,
          column: 33
        }
      },
      "3": {
        start: {
          line: 29,
          column: 15
        },
        end: {
          line: 29,
          column: 52
        }
      },
      "4": {
        start: {
          line: 30,
          column: 4
        },
        end: {
          line: 32,
          column: 5
        }
      },
      "5": {
        start: {
          line: 31,
          column: 6
        },
        end: {
          line: 31,
          column: 68
        }
      },
      "6": {
        start: {
          line: 31,
          column: 51
        },
        end: {
          line: 31,
          column: 63
        }
      },
      "7": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 33,
          column: 39
        }
      },
      "8": {
        start: {
          line: 35,
          column: 4
        },
        end: {
          line: 35,
          column: 33
        }
      },
      "9": {
        start: {
          line: 35,
          column: 26
        },
        end: {
          line: 35,
          column: 33
        }
      },
      "10": {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 36,
          column: 17
        }
      },
      "11": {
        start: {
          line: 38,
          column: 25
        },
        end: {
          line: 42,
          column: 2
        }
      },
      "12": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 39,
          column: 72
        }
      },
      "13": {
        start: {
          line: 41,
          column: 4
        },
        end: {
          line: 41,
          column: 21
        }
      },
      "14": {
        start: {
          line: 43,
          column: 19
        },
        end: {
          line: 59,
          column: 4
        }
      },
      "15": {
        start: {
          line: 44,
          column: 18
        },
        end: {
          line: 51,
          column: 5
        }
      },
      "16": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 49,
          column: 10
        }
      },
      "17": {
        start: {
          line: 46,
          column: 21
        },
        end: {
          line: 46,
          column: 23
        }
      },
      "18": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 47,
          column: 95
        }
      },
      "19": {
        start: {
          line: 47,
          column: 29
        },
        end: {
          line: 47,
          column: 95
        }
      },
      "20": {
        start: {
          line: 47,
          column: 77
        },
        end: {
          line: 47,
          column: 95
        }
      },
      "21": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 48,
          column: 22
        }
      },
      "22": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 50,
          column: 26
        }
      },
      "23": {
        start: {
          line: 52,
          column: 4
        },
        end: {
          line: 58,
          column: 6
        }
      },
      "24": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 53,
          column: 46
        }
      },
      "25": {
        start: {
          line: 53,
          column: 35
        },
        end: {
          line: 53,
          column: 46
        }
      },
      "26": {
        start: {
          line: 54,
          column: 21
        },
        end: {
          line: 54,
          column: 23
        }
      },
      "27": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 55,
          column: 137
        }
      },
      "28": {
        start: {
          line: 55,
          column: 25
        },
        end: {
          line: 55,
          column: 137
        }
      },
      "29": {
        start: {
          line: 55,
          column: 38
        },
        end: {
          line: 55,
          column: 50
        }
      },
      "30": {
        start: {
          line: 55,
          column: 56
        },
        end: {
          line: 55,
          column: 57
        }
      },
      "31": {
        start: {
          line: 55,
          column: 78
        },
        end: {
          line: 55,
          column: 137
        }
      },
      "32": {
        start: {
          line: 55,
          column: 102
        },
        end: {
          line: 55,
          column: 137
        }
      },
      "33": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 56,
          column: 40
        }
      },
      "34": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 57,
          column: 22
        }
      },
      "35": {
        start: {
          line: 60,
          column: 0
        },
        end: {
          line: 60,
          column: 62
        }
      },
      "36": {
        start: {
          line: 61,
          column: 0
        },
        end: {
          line: 61,
          column: 69
        }
      },
      "37": {
        start: {
          line: 62,
          column: 15
        },
        end: {
          line: 62,
          column: 46
        }
      },
      "38": {
        start: {
          line: 64,
          column: 0
        },
        end: {
          line: 73,
          column: 75
        }
      },
      "39": {
        start: {
          line: 65,
          column: 4
        },
        end: {
          line: 65,
          column: 68
        }
      },
      "40": {
        start: {
          line: 66,
          column: 4
        },
        end: {
          line: 66,
          column: 74
        }
      },
      "41": {
        start: {
          line: 67,
          column: 4
        },
        end: {
          line: 67,
          column: 66
        }
      },
      "42": {
        start: {
          line: 68,
          column: 4
        },
        end: {
          line: 68,
          column: 62
        }
      },
      "43": {
        start: {
          line: 69,
          column: 4
        },
        end: {
          line: 69,
          column: 56
        }
      },
      "44": {
        start: {
          line: 70,
          column: 4
        },
        end: {
          line: 70,
          column: 70
        }
      },
      "45": {
        start: {
          line: 71,
          column: 4
        },
        end: {
          line: 71,
          column: 62
        }
      },
      "46": {
        start: {
          line: 72,
          column: 4
        },
        end: {
          line: 72,
          column: 60
        }
      },
      "47": {
        start: {
          line: 83,
          column: 17
        },
        end: {
          line: 83,
          column: 26
        }
      },
      "48": {
        start: {
          line: 84,
          column: 23
        },
        end: {
          line: 84,
          column: 32
        }
      },
      "49": {
        start: {
          line: 85,
          column: 23
        },
        end: {
          line: 85,
          column: 25
        }
      },
      "50": {
        start: {
          line: 86,
          column: 21
        },
        end: {
          line: 86,
          column: 23
        }
      },
      "51": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 88,
          column: 29
        }
      },
      "52": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 89,
          column: 53
        }
      },
      "53": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 90,
          column: 57
        }
      },
      "54": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 91,
          column: 51
        }
      },
      "55": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 92,
          column: 49
        }
      },
      "56": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 93,
          column: 47
        }
      },
      "57": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 94,
          column: 49
        }
      },
      "58": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 95,
          column: 43
        }
      },
      "59": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 96,
          column: 43
        }
      },
      "60": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 118,
          column: 11
        }
      },
      "61": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 137,
          column: 11
        }
      },
      "62": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 154,
          column: 11
        }
      },
      "63": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 170,
          column: 11
        }
      },
      "64": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 173,
          column: 11
        }
      },
      "65": {
        start: {
          line: 179,
          column: 22
        },
        end: {
          line: 179,
          column: 50
        }
      },
      "66": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 182,
          column: 9
        }
      },
      "67": {
        start: {
          line: 181,
          column: 12
        },
        end: {
          line: 181,
          column: 73
        }
      },
      "68": {
        start: {
          line: 183,
          column: 28
        },
        end: {
          line: 183,
          column: 89
        }
      },
      "69": {
        start: {
          line: 184,
          column: 26
        },
        end: {
          line: 207,
          column: 9
        }
      },
      "70": {
        start: {
          line: 208,
          column: 8
        },
        end: {
          line: 208,
          column: 58
        }
      },
      "71": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 213,
          column: 11
        }
      },
      "72": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 254,
          column: 9
        }
      },
      "73": {
        start: {
          line: 216,
          column: 12
        },
        end: {
          line: 221,
          column: 13
        }
      },
      "74": {
        start: {
          line: 217,
          column: 16
        },
        end: {
          line: 217,
          column: 68
        }
      },
      "75": {
        start: {
          line: 220,
          column: 16
        },
        end: {
          line: 220,
          column: 70
        }
      },
      "76": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 223,
          column: 51
        }
      },
      "77": {
        start: {
          line: 225,
          column: 12
        },
        end: {
          line: 225,
          column: 58
        }
      },
      "78": {
        start: {
          line: 226,
          column: 12
        },
        end: {
          line: 226,
          column: 58
        }
      },
      "79": {
        start: {
          line: 228,
          column: 12
        },
        end: {
          line: 228,
          column: 61
        }
      },
      "80": {
        start: {
          line: 229,
          column: 12
        },
        end: {
          line: 229,
          column: 43
        }
      },
      "81": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 230,
          column: 43
        }
      },
      "82": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 236,
          column: 15
        }
      },
      "83": {
        start: {
          line: 239,
          column: 12
        },
        end: {
          line: 239,
          column: 40
        }
      },
      "84": {
        start: {
          line: 240,
          column: 12
        },
        end: {
          line: 240,
          column: 43
        }
      },
      "85": {
        start: {
          line: 241,
          column: 12
        },
        end: {
          line: 244,
          column: 15
        }
      },
      "86": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 246,
          column: 65
        }
      },
      "87": {
        start: {
          line: 247,
          column: 12
        },
        end: {
          line: 247,
          column: 24
        }
      },
      "88": {
        start: {
          line: 250,
          column: 12
        },
        end: {
          line: 250,
          column: 54
        }
      },
      "89": {
        start: {
          line: 251,
          column: 12
        },
        end: {
          line: 251,
          column: 50
        }
      },
      "90": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 253,
          column: 49
        }
      },
      "91": {
        start: {
          line: 255,
          column: 8
        },
        end: {
          line: 255,
          column: 25
        }
      },
      "92": {
        start: {
          line: 261,
          column: 29
        },
        end: {
          line: 261,
          column: 119
        }
      },
      "93": {
        start: {
          line: 261,
          column: 61
        },
        end: {
          line: 261,
          column: 118
        }
      },
      "94": {
        start: {
          line: 262,
          column: 24
        },
        end: {
          line: 262,
          column: 62
        }
      },
      "95": {
        start: {
          line: 263,
          column: 8
        },
        end: {
          line: 282,
          column: 11
        }
      },
      "96": {
        start: {
          line: 264,
          column: 12
        },
        end: {
          line: 281,
          column: 13
        }
      },
      "97": {
        start: {
          line: 265,
          column: 16
        },
        end: {
          line: 265,
          column: 57
        }
      },
      "98": {
        start: {
          line: 268,
          column: 16
        },
        end: {
          line: 271,
          column: 19
        }
      },
      "99": {
        start: {
          line: 272,
          column: 16
        },
        end: {
          line: 280,
          column: 19
        }
      },
      "100": {
        start: {
          line: 288,
          column: 8
        },
        end: {
          line: 308,
          column: 9
        }
      },
      "101": {
        start: {
          line: 289,
          column: 12
        },
        end: {
          line: 307,
          column: 13
        }
      },
      "102": {
        start: {
          line: 290,
          column: 31
        },
        end: {
          line: 290,
          column: 94
        }
      },
      "103": {
        start: {
          line: 291,
          column: 16
        },
        end: {
          line: 291,
          column: 51
        }
      },
      "104": {
        start: {
          line: 294,
          column: 16
        },
        end: {
          line: 297,
          column: 19
        }
      },
      "105": {
        start: {
          line: 298,
          column: 16
        },
        end: {
          line: 306,
          column: 19
        }
      },
      "106": {
        start: {
          line: 314,
          column: 26
        },
        end: {
          line: 314,
          column: 36
        }
      },
      "107": {
        start: {
          line: 315,
          column: 8
        },
        end: {
          line: 315,
          column: 80
        }
      },
      "108": {
        start: {
          line: 316,
          column: 8
        },
        end: {
          line: 348,
          column: 9
        }
      },
      "109": {
        start: {
          line: 317,
          column: 12
        },
        end: {
          line: 336,
          column: 13
        }
      },
      "110": {
        start: {
          line: 319,
          column: 20
        },
        end: {
          line: 319,
          column: 74
        }
      },
      "111": {
        start: {
          line: 321,
          column: 20
        },
        end: {
          line: 321,
          column: 80
        }
      },
      "112": {
        start: {
          line: 323,
          column: 20
        },
        end: {
          line: 323,
          column: 76
        }
      },
      "113": {
        start: {
          line: 325,
          column: 20
        },
        end: {
          line: 325,
          column: 74
        }
      },
      "114": {
        start: {
          line: 327,
          column: 20
        },
        end: {
          line: 327,
          column: 71
        }
      },
      "115": {
        start: {
          line: 329,
          column: 20
        },
        end: {
          line: 329,
          column: 78
        }
      },
      "116": {
        start: {
          line: 331,
          column: 20
        },
        end: {
          line: 331,
          column: 78
        }
      },
      "117": {
        start: {
          line: 333,
          column: 20
        },
        end: {
          line: 333,
          column: 73
        }
      },
      "118": {
        start: {
          line: 335,
          column: 20
        },
        end: {
          line: 335,
          column: 79
        }
      },
      "119": {
        start: {
          line: 339,
          column: 12
        },
        end: {
          line: 347,
          column: 14
        }
      },
      "120": {
        start: {
          line: 354,
          column: 26
        },
        end: {
          line: 354,
          column: 36
        }
      },
      "121": {
        start: {
          line: 355,
          column: 23
        },
        end: {
          line: 355,
          column: 79
        }
      },
      "122": {
        start: {
          line: 356,
          column: 8
        },
        end: {
          line: 364,
          column: 10
        }
      },
      "123": {
        start: {
          line: 370,
          column: 26
        },
        end: {
          line: 370,
          column: 36
        }
      },
      "124": {
        start: {
          line: 371,
          column: 24
        },
        end: {
          line: 371,
          column: 95
        }
      },
      "125": {
        start: {
          line: 372,
          column: 8
        },
        end: {
          line: 381,
          column: 10
        }
      },
      "126": {
        start: {
          line: 387,
          column: 26
        },
        end: {
          line: 387,
          column: 36
        }
      },
      "127": {
        start: {
          line: 389,
          column: 26
        },
        end: {
          line: 389,
          column: 91
        }
      },
      "128": {
        start: {
          line: 390,
          column: 24
        },
        end: {
          line: 390,
          column: 124
        }
      },
      "129": {
        start: {
          line: 390,
          column: 68
        },
        end: {
          line: 390,
          column: 122
        }
      },
      "130": {
        start: {
          line: 391,
          column: 29
        },
        end: {
          line: 391,
          column: 107
        }
      },
      "131": {
        start: {
          line: 391,
          column: 61
        },
        end: {
          line: 391,
          column: 86
        }
      },
      "132": {
        start: {
          line: 392,
          column: 30
        },
        end: {
          line: 392,
          column: 96
        }
      },
      "133": {
        start: {
          line: 392,
          column: 55
        },
        end: {
          line: 392,
          column: 88
        }
      },
      "134": {
        start: {
          line: 393,
          column: 8
        },
        end: {
          line: 401,
          column: 10
        }
      },
      "135": {
        start: {
          line: 398,
          column: 48
        },
        end: {
          line: 398,
          column: 66
        }
      },
      "136": {
        start: {
          line: 407,
          column: 26
        },
        end: {
          line: 407,
          column: 36
        }
      },
      "137": {
        start: {
          line: 410,
          column: 25
        },
        end: {
          line: 410,
          column: 27
        }
      },
      "138": {
        start: {
          line: 411,
          column: 26
        },
        end: {
          line: 411,
          column: 56
        }
      },
      "139": {
        start: {
          line: 412,
          column: 8
        },
        end: {
          line: 420,
          column: 10
        }
      },
      "140": {
        start: {
          line: 426,
          column: 26
        },
        end: {
          line: 426,
          column: 36
        }
      },
      "141": {
        start: {
          line: 429,
          column: 25
        },
        end: {
          line: 429,
          column: 27
        }
      },
      "142": {
        start: {
          line: 430,
          column: 26
        },
        end: {
          line: 430,
          column: 56
        }
      },
      "143": {
        start: {
          line: 431,
          column: 8
        },
        end: {
          line: 439,
          column: 10
        }
      },
      "144": {
        start: {
          line: 445,
          column: 26
        },
        end: {
          line: 445,
          column: 36
        }
      },
      "145": {
        start: {
          line: 447,
          column: 25
        },
        end: {
          line: 447,
          column: 27
        }
      },
      "146": {
        start: {
          line: 448,
          column: 26
        },
        end: {
          line: 448,
          column: 56
        }
      },
      "147": {
        start: {
          line: 449,
          column: 8
        },
        end: {
          line: 457,
          column: 10
        }
      },
      "148": {
        start: {
          line: 463,
          column: 26
        },
        end: {
          line: 463,
          column: 36
        }
      },
      "149": {
        start: {
          line: 465,
          column: 25
        },
        end: {
          line: 465,
          column: 27
        }
      },
      "150": {
        start: {
          line: 466,
          column: 26
        },
        end: {
          line: 466,
          column: 56
        }
      },
      "151": {
        start: {
          line: 467,
          column: 8
        },
        end: {
          line: 475,
          column: 10
        }
      },
      "152": {
        start: {
          line: 481,
          column: 26
        },
        end: {
          line: 481,
          column: 36
        }
      },
      "153": {
        start: {
          line: 483,
          column: 25
        },
        end: {
          line: 483,
          column: 27
        }
      },
      "154": {
        start: {
          line: 484,
          column: 26
        },
        end: {
          line: 484,
          column: 56
        }
      },
      "155": {
        start: {
          line: 485,
          column: 8
        },
        end: {
          line: 493,
          column: 10
        }
      },
      "156": {
        start: {
          line: 499,
          column: 28
        },
        end: {
          line: 499,
          column: 49
        }
      },
      "157": {
        start: {
          line: 501,
          column: 31
        },
        end: {
          line: 501,
          column: 93
        }
      },
      "158": {
        start: {
          line: 501,
          column: 67
        },
        end: {
          line: 501,
          column: 89
        }
      },
      "159": {
        start: {
          line: 502,
          column: 8
        },
        end: {
          line: 502,
          column: 102
        }
      },
      "160": {
        start: {
          line: 504,
          column: 8
        },
        end: {
          line: 504,
          column: 82
        }
      },
      "161": {
        start: {
          line: 506,
          column: 28
        },
        end: {
          line: 506,
          column: 74
        }
      },
      "162": {
        start: {
          line: 506,
          column: 58
        },
        end: {
          line: 506,
          column: 73
        }
      },
      "163": {
        start: {
          line: 507,
          column: 8
        },
        end: {
          line: 507,
          column: 95
        }
      },
      "164": {
        start: {
          line: 507,
          column: 61
        },
        end: {
          line: 507,
          column: 86
        }
      },
      "165": {
        start: {
          line: 508,
          column: 8
        },
        end: {
          line: 508,
          column: 87
        }
      },
      "166": {
        start: {
          line: 508,
          column: 57
        },
        end: {
          line: 508,
          column: 78
        }
      },
      "167": {
        start: {
          line: 509,
          column: 8
        },
        end: {
          line: 509,
          column: 91
        }
      },
      "168": {
        start: {
          line: 509,
          column: 59
        },
        end: {
          line: 509,
          column: 82
        }
      },
      "169": {
        start: {
          line: 510,
          column: 8
        },
        end: {
          line: 510,
          column: 85
        }
      },
      "170": {
        start: {
          line: 510,
          column: 56
        },
        end: {
          line: 510,
          column: 76
        }
      },
      "171": {
        start: {
          line: 516,
          column: 32
        },
        end: {
          line: 516,
          column: 41
        }
      },
      "172": {
        start: {
          line: 518,
          column: 8
        },
        end: {
          line: 555,
          column: 11
        }
      },
      "173": {
        start: {
          line: 519,
          column: 12
        },
        end: {
          line: 554,
          column: 13
        }
      },
      "174": {
        start: {
          line: 520,
          column: 16
        },
        end: {
          line: 553,
          column: 17
        }
      },
      "175": {
        start: {
          line: 522,
          column: 24
        },
        end: {
          line: 522,
          column: 105
        }
      },
      "176": {
        start: {
          line: 523,
          column: 24
        },
        end: {
          line: 523,
          column: 106
        }
      },
      "177": {
        start: {
          line: 524,
          column: 24
        },
        end: {
          line: 524,
          column: 30
        }
      },
      "178": {
        start: {
          line: 526,
          column: 24
        },
        end: {
          line: 526,
          column: 104
        }
      },
      "179": {
        start: {
          line: 527,
          column: 24
        },
        end: {
          line: 527,
          column: 108
        }
      },
      "180": {
        start: {
          line: 528,
          column: 24
        },
        end: {
          line: 528,
          column: 30
        }
      },
      "181": {
        start: {
          line: 530,
          column: 24
        },
        end: {
          line: 530,
          column: 103
        }
      },
      "182": {
        start: {
          line: 531,
          column: 24
        },
        end: {
          line: 531,
          column: 116
        }
      },
      "183": {
        start: {
          line: 532,
          column: 24
        },
        end: {
          line: 532,
          column: 30
        }
      },
      "184": {
        start: {
          line: 534,
          column: 24
        },
        end: {
          line: 534,
          column: 96
        }
      },
      "185": {
        start: {
          line: 535,
          column: 24
        },
        end: {
          line: 535,
          column: 93
        }
      },
      "186": {
        start: {
          line: 536,
          column: 24
        },
        end: {
          line: 536,
          column: 30
        }
      },
      "187": {
        start: {
          line: 538,
          column: 24
        },
        end: {
          line: 538,
          column: 102
        }
      },
      "188": {
        start: {
          line: 539,
          column: 24
        },
        end: {
          line: 539,
          column: 94
        }
      },
      "189": {
        start: {
          line: 540,
          column: 24
        },
        end: {
          line: 540,
          column: 30
        }
      },
      "190": {
        start: {
          line: 542,
          column: 24
        },
        end: {
          line: 542,
          column: 92
        }
      },
      "191": {
        start: {
          line: 543,
          column: 24
        },
        end: {
          line: 543,
          column: 97
        }
      },
      "192": {
        start: {
          line: 544,
          column: 24
        },
        end: {
          line: 544,
          column: 30
        }
      },
      "193": {
        start: {
          line: 546,
          column: 24
        },
        end: {
          line: 546,
          column: 99
        }
      },
      "194": {
        start: {
          line: 547,
          column: 24
        },
        end: {
          line: 547,
          column: 98
        }
      },
      "195": {
        start: {
          line: 548,
          column: 24
        },
        end: {
          line: 548,
          column: 30
        }
      },
      "196": {
        start: {
          line: 550,
          column: 24
        },
        end: {
          line: 550,
          column: 107
        }
      },
      "197": {
        start: {
          line: 551,
          column: 24
        },
        end: {
          line: 551,
          column: 89
        }
      },
      "198": {
        start: {
          line: 552,
          column: 24
        },
        end: {
          line: 552,
          column: 30
        }
      },
      "199": {
        start: {
          line: 557,
          column: 8
        },
        end: {
          line: 564,
          column: 9
        }
      },
      "200": {
        start: {
          line: 558,
          column: 12
        },
        end: {
          line: 558,
          column: 86
        }
      },
      "201": {
        start: {
          line: 559,
          column: 12
        },
        end: {
          line: 559,
          column: 79
        }
      },
      "202": {
        start: {
          line: 561,
          column: 13
        },
        end: {
          line: 564,
          column: 9
        }
      },
      "203": {
        start: {
          line: 562,
          column: 12
        },
        end: {
          line: 562,
          column: 94
        }
      },
      "204": {
        start: {
          line: 563,
          column: 12
        },
        end: {
          line: 563,
          column: 71
        }
      },
      "205": {
        start: {
          line: 565,
          column: 8
        },
        end: {
          line: 565,
          column: 64
        }
      },
      "206": {
        start: {
          line: 571,
          column: 22
        },
        end: {
          line: 571,
          column: 24
        }
      },
      "207": {
        start: {
          line: 573,
          column: 30
        },
        end: {
          line: 573,
          column: 78
        }
      },
      "208": {
        start: {
          line: 574,
          column: 26
        },
        end: {
          line: 574,
          column: 70
        }
      },
      "209": {
        start: {
          line: 575,
          column: 28
        },
        end: {
          line: 575,
          column: 74
        }
      },
      "210": {
        start: {
          line: 576,
          column: 8
        },
        end: {
          line: 576,
          column: 67
        }
      },
      "211": {
        start: {
          line: 578,
          column: 28
        },
        end: {
          line: 581,
          column: 13
        }
      },
      "212": {
        start: {
          line: 579,
          column: 32
        },
        end: {
          line: 579,
          column: 93
        }
      },
      "213": {
        start: {
          line: 580,
          column: 12
        },
        end: {
          line: 580,
          column: 37
        }
      },
      "214": {
        start: {
          line: 582,
          column: 34
        },
        end: {
          line: 582,
          column: 85
        }
      },
      "215": {
        start: {
          line: 582,
          column: 52
        },
        end: {
          line: 582,
          column: 77
        }
      },
      "216": {
        start: {
          line: 583,
          column: 30
        },
        end: {
          line: 583,
          column: 77
        }
      },
      "217": {
        start: {
          line: 583,
          column: 48
        },
        end: {
          line: 583,
          column: 69
        }
      },
      "218": {
        start: {
          line: 584,
          column: 8
        },
        end: {
          line: 593,
          column: 10
        }
      },
      "219": {
        start: {
          line: 599,
          column: 22
        },
        end: {
          line: 599,
          column: 24
        }
      },
      "220": {
        start: {
          line: 600,
          column: 8
        },
        end: {
          line: 618,
          column: 9
        }
      },
      "221": {
        start: {
          line: 601,
          column: 12
        },
        end: {
          line: 617,
          column: 15
        }
      },
      "222": {
        start: {
          line: 619,
          column: 8
        },
        end: {
          line: 619,
          column: 21
        }
      },
      "223": {
        start: {
          line: 625,
          column: 22
        },
        end: {
          line: 625,
          column: 24
        }
      },
      "224": {
        start: {
          line: 626,
          column: 8
        },
        end: {
          line: 643,
          column: 9
        }
      },
      "225": {
        start: {
          line: 627,
          column: 12
        },
        end: {
          line: 642,
          column: 15
        }
      },
      "226": {
        start: {
          line: 644,
          column: 8
        },
        end: {
          line: 644,
          column: 21
        }
      },
      "227": {
        start: {
          line: 650,
          column: 22
        },
        end: {
          line: 650,
          column: 24
        }
      },
      "228": {
        start: {
          line: 651,
          column: 8
        },
        end: {
          line: 667,
          column: 9
        }
      },
      "229": {
        start: {
          line: 652,
          column: 12
        },
        end: {
          line: 666,
          column: 15
        }
      },
      "230": {
        start: {
          line: 668,
          column: 8
        },
        end: {
          line: 668,
          column: 21
        }
      },
      "231": {
        start: {
          line: 674,
          column: 8
        },
        end: {
          line: 674,
          column: 87
        }
      },
      "232": {
        start: {
          line: 677,
          column: 21
        },
        end: {
          line: 677,
          column: 52
        }
      },
      "233": {
        start: {
          line: 678,
          column: 8
        },
        end: {
          line: 679,
          column: 27
        }
      },
      "234": {
        start: {
          line: 679,
          column: 12
        },
        end: {
          line: 679,
          column: 27
        }
      },
      "235": {
        start: {
          line: 680,
          column: 8
        },
        end: {
          line: 681,
          column: 34
        }
      },
      "236": {
        start: {
          line: 681,
          column: 12
        },
        end: {
          line: 681,
          column: 34
        }
      },
      "237": {
        start: {
          line: 682,
          column: 8
        },
        end: {
          line: 683,
          column: 50
        }
      },
      "238": {
        start: {
          line: 683,
          column: 12
        },
        end: {
          line: 683,
          column: 50
        }
      },
      "239": {
        start: {
          line: 684,
          column: 8
        },
        end: {
          line: 684,
          column: 48
        }
      },
      "240": {
        start: {
          line: 688,
          column: 8
        },
        end: {
          line: 688,
          column: 79
        }
      },
      "241": {
        start: {
          line: 688,
          column: 33
        },
        end: {
          line: 688,
          column: 58
        }
      },
      "242": {
        start: {
          line: 688,
          column: 69
        },
        end: {
          line: 688,
          column: 77
        }
      },
      "243": {
        start: {
          line: 692,
          column: 29
        },
        end: {
          line: 693,
          column: 68
        }
      },
      "244": {
        start: {
          line: 694,
          column: 8
        },
        end: {
          line: 694,
          column: 43
        }
      },
      "245": {
        start: {
          line: 698,
          column: 8
        },
        end: {
          line: 709,
          column: 9
        }
      },
      "246": {
        start: {
          line: 699,
          column: 12
        },
        end: {
          line: 708,
          column: 15
        }
      },
      "247": {
        start: {
          line: 711,
          column: 8
        },
        end: {
          line: 719,
          column: 9
        }
      },
      "248": {
        start: {
          line: 712,
          column: 12
        },
        end: {
          line: 718,
          column: 15
        }
      },
      "249": {
        start: {
          line: 722,
          column: 8
        },
        end: {
          line: 731,
          column: 11
        }
      },
      "250": {
        start: {
          line: 734,
          column: 26
        },
        end: {
          line: 741,
          column: 9
        }
      },
      "251": {
        start: {
          line: 742,
          column: 8
        },
        end: {
          line: 742,
          column: 44
        }
      },
      "252": {
        start: {
          line: 744,
          column: 30
        },
        end: {
          line: 744,
          column: 40
        }
      },
      "253": {
        start: {
          line: 745,
          column: 8
        },
        end: {
          line: 745,
          column: 60
        }
      },
      "254": {
        start: {
          line: 746,
          column: 8
        },
        end: {
          line: 746,
          column: 95
        }
      },
      "255": {
        start: {
          line: 746,
          column: 66
        },
        end: {
          line: 746,
          column: 93
        }
      },
      "256": {
        start: {
          line: 755,
          column: 33
        },
        end: {
          line: 755,
          column: 65
        }
      },
      "257": {
        start: {
          line: 756,
          column: 32
        },
        end: {
          line: 756,
          column: 77
        }
      },
      "258": {
        start: {
          line: 757,
          column: 8
        },
        end: {
          line: 776,
          column: 10
        }
      },
      "259": {
        start: {
          line: 779,
          column: 8
        },
        end: {
          line: 780,
          column: 30
        }
      },
      "260": {
        start: {
          line: 780,
          column: 12
        },
        end: {
          line: 780,
          column: 30
        }
      },
      "261": {
        start: {
          line: 781,
          column: 8
        },
        end: {
          line: 782,
          column: 26
        }
      },
      "262": {
        start: {
          line: 782,
          column: 12
        },
        end: {
          line: 782,
          column: 26
        }
      },
      "263": {
        start: {
          line: 783,
          column: 8
        },
        end: {
          line: 784,
          column: 28
        }
      },
      "264": {
        start: {
          line: 784,
          column: 12
        },
        end: {
          line: 784,
          column: 28
        }
      },
      "265": {
        start: {
          line: 785,
          column: 8
        },
        end: {
          line: 785,
          column: 21
        }
      },
      "266": {
        start: {
          line: 791,
          column: 8
        },
        end: {
          line: 791,
          column: 58
        }
      },
      "267": {
        start: {
          line: 797,
          column: 8
        },
        end: {
          line: 797,
          column: 37
        }
      },
      "268": {
        start: {
          line: 803,
          column: 26
        },
        end: {
          line: 803,
          column: 64
        }
      },
      "269": {
        start: {
          line: 804,
          column: 8
        },
        end: {
          line: 811,
          column: 9
        }
      },
      "270": {
        start: {
          line: 805,
          column: 12
        },
        end: {
          line: 805,
          column: 43
        }
      },
      "271": {
        start: {
          line: 806,
          column: 12
        },
        end: {
          line: 806,
          column: 43
        }
      },
      "272": {
        start: {
          line: 807,
          column: 12
        },
        end: {
          line: 807,
          column: 54
        }
      },
      "273": {
        start: {
          line: 808,
          column: 12
        },
        end: {
          line: 808,
          column: 50
        }
      },
      "274": {
        start: {
          line: 809,
          column: 12
        },
        end: {
          line: 809,
          column: 83
        }
      },
      "275": {
        start: {
          line: 810,
          column: 12
        },
        end: {
          line: 810,
          column: 24
        }
      },
      "276": {
        start: {
          line: 812,
          column: 8
        },
        end: {
          line: 812,
          column: 21
        }
      },
      "277": {
        start: {
          line: 818,
          column: 8
        },
        end: {
          line: 818,
          column: 50
        }
      },
      "278": {
        start: {
          line: 819,
          column: 8
        },
        end: {
          line: 819,
          column: 89
        }
      },
      "279": {
        start: {
          line: 825,
          column: 24
        },
        end: {
          line: 825,
          column: 55
        }
      },
      "280": {
        start: {
          line: 826,
          column: 8
        },
        end: {
          line: 828,
          column: 9
        }
      },
      "281": {
        start: {
          line: 827,
          column: 12
        },
        end: {
          line: 827,
          column: 73
        }
      },
      "282": {
        start: {
          line: 829,
          column: 8
        },
        end: {
          line: 829,
          column: 23
        }
      },
      "283": {
        start: {
          line: 835,
          column: 8
        },
        end: {
          line: 835,
          column: 52
        }
      },
      "284": {
        start: {
          line: 838,
          column: 0
        },
        end: {
          line: 838,
          column: 60
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 27,
            column: 74
          },
          end: {
            line: 27,
            column: 75
          }
        },
        loc: {
          start: {
            line: 27,
            column: 96
          },
          end: {
            line: 34,
            column: 1
          }
        },
        line: 27
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 31,
            column: 38
          },
          end: {
            line: 31,
            column: 39
          }
        },
        loc: {
          start: {
            line: 31,
            column: 49
          },
          end: {
            line: 31,
            column: 65
          }
        },
        line: 31
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 34,
            column: 6
          },
          end: {
            line: 34,
            column: 7
          }
        },
        loc: {
          start: {
            line: 34,
            column: 28
          },
          end: {
            line: 37,
            column: 1
          }
        },
        line: 34
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 38,
            column: 80
          },
          end: {
            line: 38,
            column: 81
          }
        },
        loc: {
          start: {
            line: 38,
            column: 95
          },
          end: {
            line: 40,
            column: 1
          }
        },
        line: 38
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 40,
            column: 5
          },
          end: {
            line: 40,
            column: 6
          }
        },
        loc: {
          start: {
            line: 40,
            column: 20
          },
          end: {
            line: 42,
            column: 1
          }
        },
        line: 40
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 43,
            column: 51
          },
          end: {
            line: 43,
            column: 52
          }
        },
        loc: {
          start: {
            line: 43,
            column: 63
          },
          end: {
            line: 59,
            column: 1
          }
        },
        line: 43
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 44,
            column: 18
          },
          end: {
            line: 44,
            column: 19
          }
        },
        loc: {
          start: {
            line: 44,
            column: 30
          },
          end: {
            line: 51,
            column: 5
          }
        },
        line: 44
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 45,
            column: 48
          },
          end: {
            line: 45,
            column: 49
          }
        },
        loc: {
          start: {
            line: 45,
            column: 61
          },
          end: {
            line: 49,
            column: 9
          }
        },
        line: 45
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 52,
            column: 11
          },
          end: {
            line: 52,
            column: 12
          }
        },
        loc: {
          start: {
            line: 52,
            column: 26
          },
          end: {
            line: 58,
            column: 5
          }
        },
        line: 52
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 64,
            column: 1
          },
          end: {
            line: 64,
            column: 2
          }
        },
        loc: {
          start: {
            line: 64,
            column: 29
          },
          end: {
            line: 73,
            column: 1
          }
        },
        line: 64
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 87,
            column: 4
          },
          end: {
            line: 87,
            column: 5
          }
        },
        loc: {
          start: {
            line: 87,
            column: 153
          },
          end: {
            line: 97,
            column: 5
          }
        },
        line: 87
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 101,
            column: 4
          },
          end: {
            line: 101,
            column: 5
          }
        },
        loc: {
          start: {
            line: 101,
            column: 34
          },
          end: {
            line: 174,
            column: 5
          }
        },
        line: 101
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 178,
            column: 4
          },
          end: {
            line: 178,
            column: 5
          }
        },
        loc: {
          start: {
            line: 178,
            column: 44
          },
          end: {
            line: 256,
            column: 5
          }
        },
        line: 178
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 260,
            column: 4
          },
          end: {
            line: 260,
            column: 5
          }
        },
        loc: {
          start: {
            line: 260,
            column: 51
          },
          end: {
            line: 283,
            column: 5
          }
        },
        line: 260
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 261,
            column: 49
          },
          end: {
            line: 261,
            column: 50
          }
        },
        loc: {
          start: {
            line: 261,
            column: 61
          },
          end: {
            line: 261,
            column: 118
          }
        },
        line: 261
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 263,
            column: 24
          },
          end: {
            line: 263,
            column: 25
          }
        },
        loc: {
          start: {
            line: 263,
            column: 43
          },
          end: {
            line: 282,
            column: 9
          }
        },
        line: 263
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 287,
            column: 4
          },
          end: {
            line: 287,
            column: 5
          }
        },
        loc: {
          start: {
            line: 287,
            column: 53
          },
          end: {
            line: 309,
            column: 5
          }
        },
        line: 287
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 313,
            column: 4
          },
          end: {
            line: 313,
            column: 5
          }
        },
        loc: {
          start: {
            line: 313,
            column: 53
          },
          end: {
            line: 349,
            column: 5
          }
        },
        line: 313
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 353,
            column: 4
          },
          end: {
            line: 353,
            column: 5
          }
        },
        loc: {
          start: {
            line: 353,
            column: 46
          },
          end: {
            line: 365,
            column: 5
          }
        },
        line: 353
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 369,
            column: 4
          },
          end: {
            line: 369,
            column: 5
          }
        },
        loc: {
          start: {
            line: 369,
            column: 52
          },
          end: {
            line: 382,
            column: 5
          }
        },
        line: 369
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 386,
            column: 4
          },
          end: {
            line: 386,
            column: 5
          }
        },
        loc: {
          start: {
            line: 386,
            column: 48
          },
          end: {
            line: 402,
            column: 5
          }
        },
        line: 386
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 390,
            column: 56
          },
          end: {
            line: 390,
            column: 57
          }
        },
        loc: {
          start: {
            line: 390,
            column: 68
          },
          end: {
            line: 390,
            column: 122
          }
        },
        line: 390
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 391,
            column: 44
          },
          end: {
            line: 391,
            column: 45
          }
        },
        loc: {
          start: {
            line: 391,
            column: 61
          },
          end: {
            line: 391,
            column: 86
          }
        },
        line: 391
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 392,
            column: 45
          },
          end: {
            line: 392,
            column: 46
          }
        },
        loc: {
          start: {
            line: 392,
            column: 55
          },
          end: {
            line: 392,
            column: 88
          }
        },
        line: 392
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 398,
            column: 38
          },
          end: {
            line: 398,
            column: 39
          }
        },
        loc: {
          start: {
            line: 398,
            column: 48
          },
          end: {
            line: 398,
            column: 66
          }
        },
        line: 398
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 406,
            column: 4
          },
          end: {
            line: 406,
            column: 5
          }
        },
        loc: {
          start: {
            line: 406,
            column: 46
          },
          end: {
            line: 421,
            column: 5
          }
        },
        line: 406
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 425,
            column: 4
          },
          end: {
            line: 425,
            column: 5
          }
        },
        loc: {
          start: {
            line: 425,
            column: 43
          },
          end: {
            line: 440,
            column: 5
          }
        },
        line: 425
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 444,
            column: 4
          },
          end: {
            line: 444,
            column: 5
          }
        },
        loc: {
          start: {
            line: 444,
            column: 50
          },
          end: {
            line: 458,
            column: 5
          }
        },
        line: 444
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 462,
            column: 4
          },
          end: {
            line: 462,
            column: 5
          }
        },
        loc: {
          start: {
            line: 462,
            column: 50
          },
          end: {
            line: 476,
            column: 5
          }
        },
        line: 462
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 480,
            column: 4
          },
          end: {
            line: 480,
            column: 5
          }
        },
        loc: {
          start: {
            line: 480,
            column: 45
          },
          end: {
            line: 494,
            column: 5
          }
        },
        line: 480
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 498,
            column: 4
          },
          end: {
            line: 498,
            column: 5
          }
        },
        loc: {
          start: {
            line: 498,
            column: 38
          },
          end: {
            line: 511,
            column: 5
          }
        },
        line: 498
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 501,
            column: 50
          },
          end: {
            line: 501,
            column: 51
          }
        },
        loc: {
          start: {
            line: 501,
            column: 67
          },
          end: {
            line: 501,
            column: 89
          }
        },
        line: 501
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 506,
            column: 48
          },
          end: {
            line: 506,
            column: 49
          }
        },
        loc: {
          start: {
            line: 506,
            column: 58
          },
          end: {
            line: 506,
            column: 73
          }
        },
        line: 506
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 507,
            column: 56
          },
          end: {
            line: 507,
            column: 57
          }
        },
        loc: {
          start: {
            line: 507,
            column: 61
          },
          end: {
            line: 507,
            column: 86
          }
        },
        line: 507
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 508,
            column: 52
          },
          end: {
            line: 508,
            column: 53
          }
        },
        loc: {
          start: {
            line: 508,
            column: 57
          },
          end: {
            line: 508,
            column: 78
          }
        },
        line: 508
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 509,
            column: 54
          },
          end: {
            line: 509,
            column: 55
          }
        },
        loc: {
          start: {
            line: 509,
            column: 59
          },
          end: {
            line: 509,
            column: 82
          }
        },
        line: 509
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 510,
            column: 51
          },
          end: {
            line: 510,
            column: 52
          }
        },
        loc: {
          start: {
            line: 510,
            column: 56
          },
          end: {
            line: 510,
            column: 76
          }
        },
        line: 510
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 515,
            column: 4
          },
          end: {
            line: 515,
            column: 5
          }
        },
        loc: {
          start: {
            line: 515,
            column: 45
          },
          end: {
            line: 566,
            column: 5
          }
        },
        line: 515
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 518,
            column: 38
          },
          end: {
            line: 518,
            column: 39
          }
        },
        loc: {
          start: {
            line: 518,
            column: 48
          },
          end: {
            line: 555,
            column: 9
          }
        },
        line: 518
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 570,
            column: 4
          },
          end: {
            line: 570,
            column: 5
          }
        },
        loc: {
          start: {
            line: 570,
            column: 45
          },
          end: {
            line: 594,
            column: 5
          }
        },
        line: 570
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 578,
            column: 41
          },
          end: {
            line: 578,
            column: 42
          }
        },
        loc: {
          start: {
            line: 578,
            column: 56
          },
          end: {
            line: 581,
            column: 9
          }
        },
        line: 578
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 582,
            column: 47
          },
          end: {
            line: 582,
            column: 48
          }
        },
        loc: {
          start: {
            line: 582,
            column: 52
          },
          end: {
            line: 582,
            column: 77
          }
        },
        line: 582
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 583,
            column: 43
          },
          end: {
            line: 583,
            column: 44
          }
        },
        loc: {
          start: {
            line: 583,
            column: 48
          },
          end: {
            line: 583,
            column: 69
          }
        },
        line: 583
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 598,
            column: 4
          },
          end: {
            line: 598,
            column: 5
          }
        },
        loc: {
          start: {
            line: 598,
            column: 48
          },
          end: {
            line: 620,
            column: 5
          }
        },
        line: 598
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 624,
            column: 4
          },
          end: {
            line: 624,
            column: 5
          }
        },
        loc: {
          start: {
            line: 624,
            column: 44
          },
          end: {
            line: 645,
            column: 5
          }
        },
        line: 624
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 649,
            column: 4
          },
          end: {
            line: 649,
            column: 5
          }
        },
        loc: {
          start: {
            line: 649,
            column: 46
          },
          end: {
            line: 669,
            column: 5
          }
        },
        line: 649
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 673,
            column: 4
          },
          end: {
            line: 673,
            column: 5
          }
        },
        loc: {
          start: {
            line: 673,
            column: 52
          },
          end: {
            line: 675,
            column: 5
          }
        },
        line: 673
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 676,
            column: 4
          },
          end: {
            line: 676,
            column: 5
          }
        },
        loc: {
          start: {
            line: 676,
            column: 40
          },
          end: {
            line: 685,
            column: 5
          }
        },
        line: 676
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 686,
            column: 4
          },
          end: {
            line: 686,
            column: 5
          }
        },
        loc: {
          start: {
            line: 686,
            column: 32
          },
          end: {
            line: 689,
            column: 5
          }
        },
        line: 686
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 688,
            column: 28
          },
          end: {
            line: 688,
            column: 29
          }
        },
        loc: {
          start: {
            line: 688,
            column: 33
          },
          end: {
            line: 688,
            column: 58
          }
        },
        line: 688
      },
      "50": {
        name: "(anonymous_50)",
        decl: {
          start: {
            line: 688,
            column: 64
          },
          end: {
            line: 688,
            column: 65
          }
        },
        loc: {
          start: {
            line: 688,
            column: 69
          },
          end: {
            line: 688,
            column: 77
          }
        },
        line: 688
      },
      "51": {
        name: "(anonymous_51)",
        decl: {
          start: {
            line: 690,
            column: 4
          },
          end: {
            line: 690,
            column: 5
          }
        },
        loc: {
          start: {
            line: 690,
            column: 38
          },
          end: {
            line: 695,
            column: 5
          }
        },
        line: 690
      },
      "52": {
        name: "(anonymous_52)",
        decl: {
          start: {
            line: 696,
            column: 4
          },
          end: {
            line: 696,
            column: 5
          }
        },
        loc: {
          start: {
            line: 696,
            column: 48
          },
          end: {
            line: 720,
            column: 5
          }
        },
        line: 696
      },
      "53": {
        name: "(anonymous_53)",
        decl: {
          start: {
            line: 721,
            column: 4
          },
          end: {
            line: 721,
            column: 5
          }
        },
        loc: {
          start: {
            line: 721,
            column: 52
          },
          end: {
            line: 732,
            column: 5
          }
        },
        line: 721
      },
      "54": {
        name: "(anonymous_54)",
        decl: {
          start: {
            line: 733,
            column: 4
          },
          end: {
            line: 733,
            column: 5
          }
        },
        loc: {
          start: {
            line: 733,
            column: 36
          },
          end: {
            line: 747,
            column: 5
          }
        },
        line: 733
      },
      "55": {
        name: "(anonymous_55)",
        decl: {
          start: {
            line: 746,
            column: 57
          },
          end: {
            line: 746,
            column: 58
          }
        },
        loc: {
          start: {
            line: 746,
            column: 66
          },
          end: {
            line: 746,
            column: 93
          }
        },
        line: 746
      },
      "56": {
        name: "(anonymous_56)",
        decl: {
          start: {
            line: 754,
            column: 4
          },
          end: {
            line: 754,
            column: 5
          }
        },
        loc: {
          start: {
            line: 754,
            column: 27
          },
          end: {
            line: 777,
            column: 5
          }
        },
        line: 754
      },
      "57": {
        name: "(anonymous_57)",
        decl: {
          start: {
            line: 778,
            column: 4
          },
          end: {
            line: 778,
            column: 5
          }
        },
        loc: {
          start: {
            line: 778,
            column: 34
          },
          end: {
            line: 786,
            column: 5
          }
        },
        line: 778
      },
      "58": {
        name: "(anonymous_58)",
        decl: {
          start: {
            line: 790,
            column: 4
          },
          end: {
            line: 790,
            column: 5
          }
        },
        loc: {
          start: {
            line: 790,
            column: 26
          },
          end: {
            line: 792,
            column: 5
          }
        },
        line: 790
      },
      "59": {
        name: "(anonymous_59)",
        decl: {
          start: {
            line: 796,
            column: 4
          },
          end: {
            line: 796,
            column: 5
          }
        },
        loc: {
          start: {
            line: 796,
            column: 26
          },
          end: {
            line: 798,
            column: 5
          }
        },
        line: 796
      },
      "60": {
        name: "(anonymous_60)",
        decl: {
          start: {
            line: 802,
            column: 4
          },
          end: {
            line: 802,
            column: 5
          }
        },
        loc: {
          start: {
            line: 802,
            column: 39
          },
          end: {
            line: 813,
            column: 5
          }
        },
        line: 802
      },
      "61": {
        name: "(anonymous_61)",
        decl: {
          start: {
            line: 817,
            column: 4
          },
          end: {
            line: 817,
            column: 5
          }
        },
        loc: {
          start: {
            line: 817,
            column: 24
          },
          end: {
            line: 820,
            column: 5
          }
        },
        line: 817
      },
      "62": {
        name: "(anonymous_62)",
        decl: {
          start: {
            line: 824,
            column: 4
          },
          end: {
            line: 824,
            column: 5
          }
        },
        loc: {
          start: {
            line: 824,
            column: 29
          },
          end: {
            line: 830,
            column: 5
          }
        },
        line: 824
      },
      "63": {
        name: "(anonymous_63)",
        decl: {
          start: {
            line: 834,
            column: 4
          },
          end: {
            line: 834,
            column: 5
          }
        },
        loc: {
          start: {
            line: 834,
            column: 20
          },
          end: {
            line: 836,
            column: 5
          }
        },
        line: 834
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 27,
            column: 22
          },
          end: {
            line: 37,
            column: 3
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 27,
            column: 23
          },
          end: {
            line: 27,
            column: 27
          }
        }, {
          start: {
            line: 27,
            column: 31
          },
          end: {
            line: 27,
            column: 51
          }
        }, {
          start: {
            line: 27,
            column: 57
          },
          end: {
            line: 37,
            column: 2
          }
        }],
        line: 27
      },
      "1": {
        loc: {
          start: {
            line: 27,
            column: 57
          },
          end: {
            line: 37,
            column: 2
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 27,
            column: 74
          },
          end: {
            line: 34,
            column: 1
          }
        }, {
          start: {
            line: 34,
            column: 6
          },
          end: {
            line: 37,
            column: 1
          }
        }],
        line: 27
      },
      "2": {
        loc: {
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 28,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 28,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "3": {
        loc: {
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 32,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 32,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "4": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 13
          }
        }, {
          start: {
            line: 30,
            column: 18
          },
          end: {
            line: 30,
            column: 84
          }
        }],
        line: 30
      },
      "5": {
        loc: {
          start: {
            line: 30,
            column: 18
          },
          end: {
            line: 30,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 30,
            column: 34
          },
          end: {
            line: 30,
            column: 47
          }
        }, {
          start: {
            line: 30,
            column: 50
          },
          end: {
            line: 30,
            column: 84
          }
        }],
        line: 30
      },
      "6": {
        loc: {
          start: {
            line: 30,
            column: 50
          },
          end: {
            line: 30,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 30,
            column: 50
          },
          end: {
            line: 30,
            column: 63
          }
        }, {
          start: {
            line: 30,
            column: 67
          },
          end: {
            line: 30,
            column: 84
          }
        }],
        line: 30
      },
      "7": {
        loc: {
          start: {
            line: 35,
            column: 4
          },
          end: {
            line: 35,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 35,
            column: 4
          },
          end: {
            line: 35,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 35
      },
      "8": {
        loc: {
          start: {
            line: 38,
            column: 25
          },
          end: {
            line: 42,
            column: 2
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 38,
            column: 26
          },
          end: {
            line: 38,
            column: 30
          }
        }, {
          start: {
            line: 38,
            column: 34
          },
          end: {
            line: 38,
            column: 57
          }
        }, {
          start: {
            line: 38,
            column: 63
          },
          end: {
            line: 42,
            column: 1
          }
        }],
        line: 38
      },
      "9": {
        loc: {
          start: {
            line: 38,
            column: 63
          },
          end: {
            line: 42,
            column: 1
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 38,
            column: 80
          },
          end: {
            line: 40,
            column: 1
          }
        }, {
          start: {
            line: 40,
            column: 5
          },
          end: {
            line: 42,
            column: 1
          }
        }],
        line: 38
      },
      "10": {
        loc: {
          start: {
            line: 43,
            column: 19
          },
          end: {
            line: 59,
            column: 4
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 43,
            column: 20
          },
          end: {
            line: 43,
            column: 24
          }
        }, {
          start: {
            line: 43,
            column: 28
          },
          end: {
            line: 43,
            column: 45
          }
        }, {
          start: {
            line: 43,
            column: 50
          },
          end: {
            line: 59,
            column: 4
          }
        }],
        line: 43
      },
      "11": {
        loc: {
          start: {
            line: 45,
            column: 18
          },
          end: {
            line: 49,
            column: 9
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 45,
            column: 18
          },
          end: {
            line: 45,
            column: 44
          }
        }, {
          start: {
            line: 45,
            column: 48
          },
          end: {
            line: 49,
            column: 9
          }
        }],
        line: 45
      },
      "12": {
        loc: {
          start: {
            line: 47,
            column: 29
          },
          end: {
            line: 47,
            column: 95
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 47,
            column: 29
          },
          end: {
            line: 47,
            column: 95
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 47
      },
      "13": {
        loc: {
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 53,
            column: 46
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 53,
            column: 46
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 53
      },
      "14": {
        loc: {
          start: {
            line: 53,
            column: 12
          },
          end: {
            line: 53,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 53,
            column: 12
          },
          end: {
            line: 53,
            column: 15
          }
        }, {
          start: {
            line: 53,
            column: 19
          },
          end: {
            line: 53,
            column: 33
          }
        }],
        line: 53
      },
      "15": {
        loc: {
          start: {
            line: 55,
            column: 8
          },
          end: {
            line: 55,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 55,
            column: 8
          },
          end: {
            line: 55,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 55
      },
      "16": {
        loc: {
          start: {
            line: 55,
            column: 78
          },
          end: {
            line: 55,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 55,
            column: 78
          },
          end: {
            line: 55,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 55
      },
      "17": {
        loc: {
          start: {
            line: 73,
            column: 3
          },
          end: {
            line: 73,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 73,
            column: 3
          },
          end: {
            line: 73,
            column: 19
          }
        }, {
          start: {
            line: 73,
            column: 24
          },
          end: {
            line: 73,
            column: 72
          }
        }],
        line: 73
      },
      "18": {
        loc: {
          start: {
            line: 180,
            column: 8
          },
          end: {
            line: 182,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 180,
            column: 8
          },
          end: {
            line: 182,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 180
      },
      "19": {
        loc: {
          start: {
            line: 216,
            column: 12
          },
          end: {
            line: 221,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 216,
            column: 12
          },
          end: {
            line: 221,
            column: 13
          }
        }, {
          start: {
            line: 219,
            column: 17
          },
          end: {
            line: 221,
            column: 13
          }
        }],
        line: 216
      },
      "20": {
        loc: {
          start: {
            line: 243,
            column: 23
          },
          end: {
            line: 243,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 243,
            column: 48
          },
          end: {
            line: 243,
            column: 61
          }
        }, {
          start: {
            line: 243,
            column: 64
          },
          end: {
            line: 243,
            column: 77
          }
        }],
        line: 243
      },
      "21": {
        loc: {
          start: {
            line: 264,
            column: 12
          },
          end: {
            line: 281,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 264,
            column: 12
          },
          end: {
            line: 281,
            column: 13
          }
        }, {
          start: {
            line: 267,
            column: 17
          },
          end: {
            line: 281,
            column: 13
          }
        }],
        line: 264
      },
      "22": {
        loc: {
          start: {
            line: 296,
            column: 27
          },
          end: {
            line: 296,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 296,
            column: 52
          },
          end: {
            line: 296,
            column: 65
          }
        }, {
          start: {
            line: 296,
            column: 68
          },
          end: {
            line: 296,
            column: 81
          }
        }],
        line: 296
      },
      "23": {
        loc: {
          start: {
            line: 305,
            column: 38
          },
          end: {
            line: 305,
            column: 92
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 305,
            column: 63
          },
          end: {
            line: 305,
            column: 76
          }
        }, {
          start: {
            line: 305,
            column: 79
          },
          end: {
            line: 305,
            column: 92
          }
        }],
        line: 305
      },
      "24": {
        loc: {
          start: {
            line: 317,
            column: 12
          },
          end: {
            line: 336,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 318,
            column: 16
          },
          end: {
            line: 319,
            column: 74
          }
        }, {
          start: {
            line: 320,
            column: 16
          },
          end: {
            line: 321,
            column: 80
          }
        }, {
          start: {
            line: 322,
            column: 16
          },
          end: {
            line: 323,
            column: 76
          }
        }, {
          start: {
            line: 324,
            column: 16
          },
          end: {
            line: 325,
            column: 74
          }
        }, {
          start: {
            line: 326,
            column: 16
          },
          end: {
            line: 327,
            column: 71
          }
        }, {
          start: {
            line: 328,
            column: 16
          },
          end: {
            line: 329,
            column: 78
          }
        }, {
          start: {
            line: 330,
            column: 16
          },
          end: {
            line: 331,
            column: 78
          }
        }, {
          start: {
            line: 332,
            column: 16
          },
          end: {
            line: 333,
            column: 73
          }
        }, {
          start: {
            line: 334,
            column: 16
          },
          end: {
            line: 335,
            column: 79
          }
        }],
        line: 317
      },
      "25": {
        loc: {
          start: {
            line: 346,
            column: 34
          },
          end: {
            line: 346,
            column: 88
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 346,
            column: 59
          },
          end: {
            line: 346,
            column: 72
          }
        }, {
          start: {
            line: 346,
            column: 75
          },
          end: {
            line: 346,
            column: 88
          }
        }],
        line: 346
      },
      "26": {
        loc: {
          start: {
            line: 359,
            column: 20
          },
          end: {
            line: 359,
            column: 97
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 359,
            column: 47
          },
          end: {
            line: 359,
            column: 53
          }
        }, {
          start: {
            line: 359,
            column: 56
          },
          end: {
            line: 359,
            column: 97
          }
        }],
        line: 359
      },
      "27": {
        loc: {
          start: {
            line: 359,
            column: 56
          },
          end: {
            line: 359,
            column: 97
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 359,
            column: 79
          },
          end: {
            line: 359,
            column: 88
          }
        }, {
          start: {
            line: 359,
            column: 91
          },
          end: {
            line: 359,
            column: 97
          }
        }],
        line: 359
      },
      "28": {
        loc: {
          start: {
            line: 375,
            column: 20
          },
          end: {
            line: 376,
            column: 66
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 375,
            column: 56
          },
          end: {
            line: 375,
            column: 62
          }
        }, {
          start: {
            line: 376,
            column: 16
          },
          end: {
            line: 376,
            column: 66
          }
        }],
        line: 375
      },
      "29": {
        loc: {
          start: {
            line: 376,
            column: 16
          },
          end: {
            line: 376,
            column: 66
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 376,
            column: 48
          },
          end: {
            line: 376,
            column: 57
          }
        }, {
          start: {
            line: 376,
            column: 60
          },
          end: {
            line: 376,
            column: 66
          }
        }],
        line: 376
      },
      "30": {
        loc: {
          start: {
            line: 396,
            column: 20
          },
          end: {
            line: 396,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 396,
            column: 40
          },
          end: {
            line: 396,
            column: 46
          }
        }, {
          start: {
            line: 396,
            column: 49
          },
          end: {
            line: 396,
            column: 87
          }
        }],
        line: 396
      },
      "31": {
        loc: {
          start: {
            line: 396,
            column: 49
          },
          end: {
            line: 396,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 396,
            column: 69
          },
          end: {
            line: 396,
            column: 78
          }
        }, {
          start: {
            line: 396,
            column: 81
          },
          end: {
            line: 396,
            column: 87
          }
        }],
        line: 396
      },
      "32": {
        loc: {
          start: {
            line: 415,
            column: 20
          },
          end: {
            line: 415,
            column: 55
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 415,
            column: 37
          },
          end: {
            line: 415,
            column: 46
          }
        }, {
          start: {
            line: 415,
            column: 49
          },
          end: {
            line: 415,
            column: 55
          }
        }],
        line: 415
      },
      "33": {
        loc: {
          start: {
            line: 434,
            column: 20
          },
          end: {
            line: 434,
            column: 55
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 434,
            column: 37
          },
          end: {
            line: 434,
            column: 46
          }
        }, {
          start: {
            line: 434,
            column: 49
          },
          end: {
            line: 434,
            column: 55
          }
        }],
        line: 434
      },
      "34": {
        loc: {
          start: {
            line: 452,
            column: 20
          },
          end: {
            line: 452,
            column: 55
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 452,
            column: 37
          },
          end: {
            line: 452,
            column: 46
          }
        }, {
          start: {
            line: 452,
            column: 49
          },
          end: {
            line: 452,
            column: 55
          }
        }],
        line: 452
      },
      "35": {
        loc: {
          start: {
            line: 470,
            column: 20
          },
          end: {
            line: 470,
            column: 55
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 470,
            column: 37
          },
          end: {
            line: 470,
            column: 46
          }
        }, {
          start: {
            line: 470,
            column: 49
          },
          end: {
            line: 470,
            column: 55
          }
        }],
        line: 470
      },
      "36": {
        loc: {
          start: {
            line: 488,
            column: 20
          },
          end: {
            line: 488,
            column: 55
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 488,
            column: 37
          },
          end: {
            line: 488,
            column: 46
          }
        }, {
          start: {
            line: 488,
            column: 49
          },
          end: {
            line: 488,
            column: 55
          }
        }],
        line: 488
      },
      "37": {
        loc: {
          start: {
            line: 502,
            column: 37
          },
          end: {
            line: 502,
            column: 101
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 502,
            column: 62
          },
          end: {
            line: 502,
            column: 97
          }
        }, {
          start: {
            line: 502,
            column: 100
          },
          end: {
            line: 502,
            column: 101
          }
        }],
        line: 502
      },
      "38": {
        loc: {
          start: {
            line: 519,
            column: 12
          },
          end: {
            line: 554,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 519,
            column: 12
          },
          end: {
            line: 554,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 519
      },
      "39": {
        loc: {
          start: {
            line: 519,
            column: 16
          },
          end: {
            line: 519,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 519,
            column: 16
          },
          end: {
            line: 519,
            column: 40
          }
        }, {
          start: {
            line: 519,
            column: 44
          },
          end: {
            line: 519,
            column: 71
          }
        }],
        line: 519
      },
      "40": {
        loc: {
          start: {
            line: 520,
            column: 16
          },
          end: {
            line: 553,
            column: 17
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 521,
            column: 20
          },
          end: {
            line: 524,
            column: 30
          }
        }, {
          start: {
            line: 525,
            column: 20
          },
          end: {
            line: 528,
            column: 30
          }
        }, {
          start: {
            line: 529,
            column: 20
          },
          end: {
            line: 532,
            column: 30
          }
        }, {
          start: {
            line: 533,
            column: 20
          },
          end: {
            line: 536,
            column: 30
          }
        }, {
          start: {
            line: 537,
            column: 20
          },
          end: {
            line: 540,
            column: 30
          }
        }, {
          start: {
            line: 541,
            column: 20
          },
          end: {
            line: 544,
            column: 30
          }
        }, {
          start: {
            line: 545,
            column: 20
          },
          end: {
            line: 548,
            column: 30
          }
        }, {
          start: {
            line: 549,
            column: 20
          },
          end: {
            line: 552,
            column: 30
          }
        }],
        line: 520
      },
      "41": {
        loc: {
          start: {
            line: 557,
            column: 8
          },
          end: {
            line: 564,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 557,
            column: 8
          },
          end: {
            line: 564,
            column: 9
          }
        }, {
          start: {
            line: 561,
            column: 13
          },
          end: {
            line: 564,
            column: 9
          }
        }],
        line: 557
      },
      "42": {
        loc: {
          start: {
            line: 561,
            column: 13
          },
          end: {
            line: 564,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 561,
            column: 13
          },
          end: {
            line: 564,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 561
      },
      "43": {
        loc: {
          start: {
            line: 579,
            column: 32
          },
          end: {
            line: 579,
            column: 93
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 579,
            column: 57
          },
          end: {
            line: 579,
            column: 58
          }
        }, {
          start: {
            line: 579,
            column: 61
          },
          end: {
            line: 579,
            column: 93
          }
        }],
        line: 579
      },
      "44": {
        loc: {
          start: {
            line: 579,
            column: 61
          },
          end: {
            line: 579,
            column: 93
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 579,
            column: 88
          },
          end: {
            line: 579,
            column: 89
          }
        }, {
          start: {
            line: 579,
            column: 92
          },
          end: {
            line: 579,
            column: 93
          }
        }],
        line: 579
      },
      "45": {
        loc: {
          start: {
            line: 586,
            column: 22
          },
          end: {
            line: 586,
            column: 97
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 586,
            column: 46
          },
          end: {
            line: 586,
            column: 57
          }
        }, {
          start: {
            line: 586,
            column: 60
          },
          end: {
            line: 586,
            column: 97
          }
        }],
        line: 586
      },
      "46": {
        loc: {
          start: {
            line: 586,
            column: 60
          },
          end: {
            line: 586,
            column: 97
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 586,
            column: 80
          },
          end: {
            line: 586,
            column: 86
          }
        }, {
          start: {
            line: 586,
            column: 89
          },
          end: {
            line: 586,
            column: 97
          }
        }],
        line: 586
      },
      "47": {
        loc: {
          start: {
            line: 600,
            column: 8
          },
          end: {
            line: 618,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 600,
            column: 8
          },
          end: {
            line: 618,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 600
      },
      "48": {
        loc: {
          start: {
            line: 626,
            column: 8
          },
          end: {
            line: 643,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 626,
            column: 8
          },
          end: {
            line: 643,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 626
      },
      "49": {
        loc: {
          start: {
            line: 651,
            column: 8
          },
          end: {
            line: 667,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 651,
            column: 8
          },
          end: {
            line: 667,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 651
      },
      "50": {
        loc: {
          start: {
            line: 678,
            column: 8
          },
          end: {
            line: 679,
            column: 27
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 678,
            column: 8
          },
          end: {
            line: 679,
            column: 27
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 678
      },
      "51": {
        loc: {
          start: {
            line: 680,
            column: 8
          },
          end: {
            line: 681,
            column: 34
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 680,
            column: 8
          },
          end: {
            line: 681,
            column: 34
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 680
      },
      "52": {
        loc: {
          start: {
            line: 682,
            column: 8
          },
          end: {
            line: 683,
            column: 50
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 682,
            column: 8
          },
          end: {
            line: 683,
            column: 50
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 682
      },
      "53": {
        loc: {
          start: {
            line: 698,
            column: 8
          },
          end: {
            line: 709,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 698,
            column: 8
          },
          end: {
            line: 709,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 698
      },
      "54": {
        loc: {
          start: {
            line: 711,
            column: 8
          },
          end: {
            line: 719,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 711,
            column: 8
          },
          end: {
            line: 719,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 711
      },
      "55": {
        loc: {
          start: {
            line: 759,
            column: 34
          },
          end: {
            line: 759,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 759,
            column: 34
          },
          end: {
            line: 759,
            column: 66
          }
        }, {
          start: {
            line: 759,
            column: 70
          },
          end: {
            line: 759,
            column: 71
          }
        }],
        line: 759
      },
      "56": {
        loc: {
          start: {
            line: 760,
            column: 47
          },
          end: {
            line: 760,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 760,
            column: 47
          },
          end: {
            line: 760,
            column: 80
          }
        }, {
          start: {
            line: 760,
            column: 84
          },
          end: {
            line: 760,
            column: 85
          }
        }],
        line: 760
      },
      "57": {
        loc: {
          start: {
            line: 763,
            column: 26
          },
          end: {
            line: 763,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 763,
            column: 26
          },
          end: {
            line: 763,
            column: 59
          }
        }, {
          start: {
            line: 763,
            column: 63
          },
          end: {
            line: 763,
            column: 64
          }
        }],
        line: 763
      },
      "58": {
        loc: {
          start: {
            line: 764,
            column: 22
          },
          end: {
            line: 764,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 764,
            column: 22
          },
          end: {
            line: 764,
            column: 51
          }
        }, {
          start: {
            line: 764,
            column: 55
          },
          end: {
            line: 764,
            column: 56
          }
        }],
        line: 764
      },
      "59": {
        loc: {
          start: {
            line: 765,
            column: 24
          },
          end: {
            line: 765,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 765,
            column: 24
          },
          end: {
            line: 765,
            column: 55
          }
        }, {
          start: {
            line: 765,
            column: 59
          },
          end: {
            line: 765,
            column: 60
          }
        }],
        line: 765
      },
      "60": {
        loc: {
          start: {
            line: 766,
            column: 21
          },
          end: {
            line: 766,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 766,
            column: 21
          },
          end: {
            line: 766,
            column: 49
          }
        }, {
          start: {
            line: 766,
            column: 53
          },
          end: {
            line: 766,
            column: 54
          }
        }],
        line: 766
      },
      "61": {
        loc: {
          start: {
            line: 779,
            column: 8
          },
          end: {
            line: 780,
            column: 30
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 779,
            column: 8
          },
          end: {
            line: 780,
            column: 30
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 779
      },
      "62": {
        loc: {
          start: {
            line: 781,
            column: 8
          },
          end: {
            line: 782,
            column: 26
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 781,
            column: 8
          },
          end: {
            line: 782,
            column: 26
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 781
      },
      "63": {
        loc: {
          start: {
            line: 783,
            column: 8
          },
          end: {
            line: 784,
            column: 28
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 783,
            column: 8
          },
          end: {
            line: 784,
            column: 28
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 783
      },
      "64": {
        loc: {
          start: {
            line: 804,
            column: 8
          },
          end: {
            line: 811,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 804,
            column: 8
          },
          end: {
            line: 811,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 804
      },
      "65": {
        loc: {
          start: {
            line: 804,
            column: 12
          },
          end: {
            line: 804,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 804,
            column: 12
          },
          end: {
            line: 804,
            column: 21
          }
        }, {
          start: {
            line: 804,
            column: 25
          },
          end: {
            line: 804,
            column: 55
          }
        }],
        line: 804
      },
      "66": {
        loc: {
          start: {
            line: 826,
            column: 8
          },
          end: {
            line: 828,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 826,
            column: 8
          },
          end: {
            line: 828,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 826
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0,
      "261": 0,
      "262": 0,
      "263": 0,
      "264": 0,
      "265": 0,
      "266": 0,
      "267": 0,
      "268": 0,
      "269": 0,
      "270": 0,
      "271": 0,
      "272": 0,
      "273": 0,
      "274": 0,
      "275": 0,
      "276": 0,
      "277": 0,
      "278": 0,
      "279": 0,
      "280": 0,
      "281": 0,
      "282": 0,
      "283": 0,
      "284": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0, 0],
      "9": [0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0, 0, 0, 0, 0, 0, 0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0, 0, 0, 0, 0, 0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0],
      "66": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\security-test-orchestrator.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\security-test-orchestrator.ts"],
      sourcesContent: ["/**\r\n * =============================================================================\r\n * SECURITY TEST ORCHESTRATOR\r\n * =============================================================================\r\n * \r\n * Central orchestrator for all security testing activities in the AI crypto\r\n * trading agent. Coordinates penetration testing, vulnerability scanning,\r\n * compliance testing, and security monitoring to provide comprehensive\r\n * security validation.\r\n * \r\n * Features:\r\n * - Centralized security test coordination\r\n * - Parallel and sequential test execution\r\n * - Comprehensive security reporting\r\n * - Risk-based test prioritization\r\n * - Automated remediation workflows\r\n * - Integration with CI/CD pipelines\r\n * \r\n * Requirements: 25.7 - Comprehensive security testing orchestration\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport { Logger } from '../core/logging/logger';\r\nimport { PenetrationTestingService, VulnerabilityReport } from './penetration-testing-service';\r\nimport { VulnerabilityScannerService, VulnerabilityScanner } from './vulnerability-scanner-service';\r\nimport { ComplianceTestingService, ComplianceReport } from './compliance-testing';\r\nimport { AutomatedSecurityTestingSuite } from './automated-security-testing';\r\nimport { ThreatDetectionEngine } from './threat-detection-engine';\r\nimport { IncidentResponseService } from './incident-response-service';\r\nimport { NotificationService } from '../core/notifications/notification-service';\r\nimport * as crypto from 'crypto';\r\nimport * as fs from 'fs/promises';\r\nimport * as path from 'path';\r\n\r\nexport interface SecurityTestSuite {\r\n  suiteId: string;\r\n  name: string;\r\n  description: string;\r\n  testTypes: SecurityTestType[];\r\n  priority: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';\r\n  schedule?: string; // Cron expression\r\n  enabled: boolean;\r\n  parallelExecution: boolean;\r\n  maxExecutionTime: number; // milliseconds\r\n  retryCount: number;\r\n}\r\n\r\nexport enum SecurityTestType {\r\n  PENETRATION_TESTING = 'penetration_testing',\r\n  VULNERABILITY_SCANNING = 'vulnerability_scanning',\r\n  COMPLIANCE_TESTING = 'compliance_testing',\r\n  DEPENDENCY_AUDIT = 'dependency_audit',\r\n  CODE_ANALYSIS = 'code_analysis',\r\n  CONFIGURATION_REVIEW = 'configuration_review',\r\n  NETWORK_SECURITY = 'network_security',\r\n  THREAT_MODELING = 'threat_modeling'\r\n}\r\n\r\nexport interface SecurityTestExecution {\r\n  executionId: string;\r\n  suiteId: string;\r\n  startTime: Date;\r\n  endTime?: Date;\r\n  status: 'PENDING' | 'RUNNING' | 'COMPLETED' | 'FAILED' | 'CANCELLED';\r\n  testResults: SecurityTestResult[];\r\n  overallRiskScore: number;\r\n  complianceScore: number;\r\n  criticalFindings: number;\r\n  highFindings: number;\r\n  mediumFindings: number;\r\n  lowFindings: number;\r\n  recommendations: string[];\r\n  remediationPlan: RemediationPlan;\r\n}\r\n\r\nexport interface SecurityTestResult {\r\n  testType: SecurityTestType;\r\n  testId: string;\r\n  status: 'PASS' | 'FAIL' | 'WARNING' | 'ERROR';\r\n  executionTime: number;\r\n  findings: any[];\r\n  riskScore: number;\r\n  details: any;\r\n}\r\n\r\nexport interface RemediationPlan {\r\n  planId: string;\r\n  priority: 'IMMEDIATE' | 'HIGH' | 'MEDIUM' | 'LOW';\r\n  estimatedEffort: string;\r\n  estimatedCost: string;\r\n  timeline: string;\r\n  tasks: RemediationTask[];\r\n  dependencies: string[];\r\n  riskReduction: number;\r\n}\r\n\r\nexport interface RemediationTask {\r\n  taskId: string;\r\n  title: string;\r\n  description: string;\r\n  priority: 'CRITICAL' | 'HIGH' | 'MEDIUM' | 'LOW';\r\n  effort: 'LOW' | 'MEDIUM' | 'HIGH';\r\n  assignee?: string;\r\n  dueDate?: Date;\r\n  status: 'PENDING' | 'IN_PROGRESS' | 'COMPLETED' | 'BLOCKED';\r\n  dependencies: string[];\r\n  steps: string[];\r\n}\r\n\r\nexport interface SecurityDashboard {\r\n  lastUpdated: Date;\r\n  overallSecurityScore: number;\r\n  riskLevel: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';\r\n  activeThreats: number;\r\n  vulnerabilities: {\r\n    critical: number;\r\n    high: number;\r\n    medium: number;\r\n    low: number;\r\n  };\r\n  complianceStatus: {\r\n    owasp: number;\r\n    iso27001: number;\r\n    soc2: number;\r\n    cryptoSecurity: number;\r\n  };\r\n  recentExecutions: SecurityTestExecution[];\r\n  trendData: SecurityTrendData[];\r\n}\r\n\r\nexport interface SecurityTrendData {\r\n  date: Date;\r\n  securityScore: number;\r\n  vulnerabilityCount: number;\r\n  complianceScore: number;\r\n  riskScore: number;\r\n}\r\n\r\nexport class SecurityTestOrchestrator {\r\n  private logger: Logger;\r\n  private penetrationTesting: PenetrationTestingService;\r\n  private vulnerabilityScanner: VulnerabilityScannerService;\r\n  private complianceTesting: ComplianceTestingService;\r\n  private automatedTesting: AutomatedSecurityTestingSuite;\r\n  private threatDetection: ThreatDetectionEngine;\r\n  private incidentResponse: IncidentResponseService;\r\n  private notifications: NotificationService;\r\n\r\n  private testSuites: Map<string, SecurityTestSuite> = new Map();\r\n  private activeExecutions: Map<string, SecurityTestExecution> = new Map();\r\n  private executionHistory: SecurityTestExecution[] = [];\r\n  private securityTrends: SecurityTrendData[] = [];\r\n\r\n  constructor(\r\n    logger: Logger,\r\n    penetrationTesting: PenetrationTestingService,\r\n    vulnerabilityScanner: VulnerabilityScannerService,\r\n    complianceTesting: ComplianceTestingService,\r\n    automatedTesting: AutomatedSecurityTestingSuite,\r\n    threatDetection: ThreatDetectionEngine,\r\n    incidentResponse: IncidentResponseService,\r\n    notifications: NotificationService\r\n  ) {\r\n    this.logger = logger;\r\n    this.penetrationTesting = penetrationTesting;\r\n    this.vulnerabilityScanner = vulnerabilityScanner;\r\n    this.complianceTesting = complianceTesting;\r\n    this.automatedTesting = automatedTesting;\r\n    this.threatDetection = threatDetection;\r\n    this.incidentResponse = incidentResponse;\r\n    this.notifications = notifications;\r\n\r\n    this.initializeDefaultTestSuites();\r\n  }\r\n\r\n  /**\r\n   * Initialize default security test suites\r\n   */\r\n  private initializeDefaultTestSuites(): void {\r\n    // Daily security scan\r\n    this.testSuites.set('daily-security-scan', {\r\n      suiteId: 'daily-security-scan',\r\n      name: 'Daily Security Scan',\r\n      description: 'Comprehensive daily security testing including vulnerability scanning and compliance checks',\r\n      testTypes: [\r\n        SecurityTestType.VULNERABILITY_SCANNING,\r\n        SecurityTestType.DEPENDENCY_AUDIT,\r\n        SecurityTestType.CONFIGURATION_REVIEW\r\n      ],\r\n      priority: 'HIGH',\r\n      schedule: '0 2 * * *', // 2 AM daily\r\n      enabled: true,\r\n      parallelExecution: true,\r\n      maxExecutionTime: 1800000, // 30 minutes\r\n      retryCount: 2\r\n    });\r\n\r\n    // Weekly comprehensive security assessment\r\n    this.testSuites.set('weekly-comprehensive-scan', {\r\n      suiteId: 'weekly-comprehensive-scan',\r\n      name: 'Weekly Comprehensive Security Assessment',\r\n      description: 'Full security assessment including penetration testing and compliance validation',\r\n      testTypes: [\r\n        SecurityTestType.PENETRATION_TESTING,\r\n        SecurityTestType.VULNERABILITY_SCANNING,\r\n        SecurityTestType.COMPLIANCE_TESTING,\r\n        SecurityTestType.CODE_ANALYSIS,\r\n        SecurityTestType.NETWORK_SECURITY\r\n      ],\r\n      priority: 'CRITICAL',\r\n      schedule: '0 1 * * 0', // 1 AM every Sunday\r\n      enabled: true,\r\n      parallelExecution: false,\r\n      maxExecutionTime: 7200000, // 2 hours\r\n      retryCount: 1\r\n    });\r\n\r\n    // Pre-deployment security validation\r\n    this.testSuites.set('pre-deployment-validation', {\r\n      suiteId: 'pre-deployment-validation',\r\n      name: 'Pre-Deployment Security Validation',\r\n      description: 'Security validation before production deployment',\r\n      testTypes: [\r\n        SecurityTestType.PENETRATION_TESTING,\r\n        SecurityTestType.VULNERABILITY_SCANNING,\r\n        SecurityTestType.COMPLIANCE_TESTING,\r\n        SecurityTestType.CODE_ANALYSIS\r\n      ],\r\n      priority: 'CRITICAL',\r\n      enabled: true,\r\n      parallelExecution: true,\r\n      maxExecutionTime: 3600000, // 1 hour\r\n      retryCount: 0\r\n    });\r\n\r\n    // Incident response security check\r\n    this.testSuites.set('incident-response-check', {\r\n      suiteId: 'incident-response-check',\r\n      name: 'Incident Response Security Check',\r\n      description: 'Rapid security assessment triggered by security incidents',\r\n      testTypes: [\r\n        SecurityTestType.VULNERABILITY_SCANNING,\r\n        SecurityTestType.THREAT_MODELING,\r\n        SecurityTestType.NETWORK_SECURITY\r\n      ],\r\n      priority: 'CRITICAL',\r\n      enabled: true,\r\n      parallelExecution: true,\r\n      maxExecutionTime: 900000, // 15 minutes\r\n      retryCount: 0\r\n    });\r\n\r\n    this.logger.info('Default security test suites initialized', {\r\n      suiteCount: this.testSuites.size\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Execute security test suite\r\n   */\r\n  async executeSecurityTestSuite(suiteId: string): Promise<SecurityTestExecution> {\r\n    const suite = this.testSuites.get(suiteId);\r\n    if (!suite) {\r\n      throw new Error(`Security test suite not found: ${suiteId}`);\r\n    }\r\n\r\n    const executionId = `exec_${Date.now()}_${crypto.randomBytes(4).toString('hex')}`;\r\n    \r\n    const execution: SecurityTestExecution = {\r\n      executionId,\r\n      suiteId,\r\n      startTime: new Date(),\r\n      status: 'RUNNING',\r\n      testResults: [],\r\n      overallRiskScore: 0,\r\n      complianceScore: 0,\r\n      criticalFindings: 0,\r\n      highFindings: 0,\r\n      mediumFindings: 0,\r\n      lowFindings: 0,\r\n      recommendations: [],\r\n      remediationPlan: {\r\n        planId: `plan_${executionId}`,\r\n        priority: 'MEDIUM',\r\n        estimatedEffort: 'TBD',\r\n        estimatedCost: 'TBD',\r\n        timeline: 'TBD',\r\n        tasks: [],\r\n        dependencies: [],\r\n        riskReduction: 0\r\n      }\r\n    };\r\n\r\n    this.activeExecutions.set(executionId, execution);\r\n\r\n    this.logger.info('Starting security test suite execution', {\r\n      executionId,\r\n      suiteId,\r\n      testTypes: suite.testTypes\r\n    });\r\n\r\n    try {\r\n      // Execute tests based on suite configuration\r\n      if (suite.parallelExecution) {\r\n        await this.executeTestsInParallel(suite, execution);\r\n      } else {\r\n        await this.executeTestsSequentially(suite, execution);\r\n      }\r\n\r\n      // Calculate overall scores and findings\r\n      this.calculateOverallScores(execution);\r\n\r\n      // Generate recommendations and remediation plan\r\n      await this.generateRecommendations(execution);\r\n      await this.generateRemediationPlan(execution);\r\n\r\n      // Process results and trigger alerts if necessary\r\n      await this.processSecurityTestResults(execution);\r\n\r\n      execution.status = 'COMPLETED';\r\n      execution.endTime = new Date();\r\n\r\n      this.logger.info('Security test suite execution completed', {\r\n        executionId,\r\n        overallRiskScore: execution.overallRiskScore,\r\n        criticalFindings: execution.criticalFindings,\r\n        complianceScore: execution.complianceScore\r\n      });\r\n\r\n    } catch (error) {\r\n      execution.status = 'FAILED';\r\n      execution.endTime = new Date();\r\n      \r\n      this.logger.error('Security test suite execution failed', {\r\n        executionId,\r\n        error: error instanceof Error ? error.message : String(error)\r\n      });\r\n\r\n      // Send failure notification\r\n      await this.sendFailureNotification(execution, error);\r\n      \r\n      throw error;\r\n    } finally {\r\n      this.activeExecutions.delete(executionId);\r\n      this.executionHistory.push(execution);\r\n      \r\n      // Update security trends\r\n      this.updateSecurityTrends(execution);\r\n    }\r\n\r\n    return execution;\r\n  }\r\n\r\n  /**\r\n   * Execute tests in parallel\r\n   */\r\n  private async executeTestsInParallel(\r\n    suite: SecurityTestSuite, \r\n    execution: SecurityTestExecution\r\n  ): Promise<void> {\r\n    const testPromises = suite.testTypes.map(testType => \r\n      this.executeSecurityTest(testType, execution.executionId)\r\n    );\r\n\r\n    const results = await Promise.allSettled(testPromises);\r\n    \r\n    results.forEach((result, index) => {\r\n      if (result.status === 'fulfilled') {\r\n        execution.testResults.push(result.value);\r\n      } else {\r\n        this.logger.error('Security test failed', {\r\n          testType: suite.testTypes[index],\r\n          error: result.reason\r\n        });\r\n        \r\n        execution.testResults.push({\r\n          testType: suite.testTypes[index],\r\n          testId: `failed_${Date.now()}`,\r\n          status: 'ERROR',\r\n          executionTime: 0,\r\n          findings: [],\r\n          riskScore: 0,\r\n          details: { error: result.reason.message }\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Execute tests sequentially\r\n   */\r\n  private async executeTestsSequentially(\r\n    suite: SecurityTestSuite, \r\n    execution: SecurityTestExecution\r\n  ): Promise<void> {\r\n    for (const testType of suite.testTypes) {\r\n      try {\r\n        const result = await this.executeSecurityTest(testType, execution.executionId);\r\n        execution.testResults.push(result);\r\n      } catch (error) {\r\n        this.logger.error('Security test failed', {\r\n          testType,\r\n          error: error instanceof Error ? error.message : String(error)\r\n        });\r\n        \r\n        execution.testResults.push({\r\n          testType,\r\n          testId: `failed_${Date.now()}`,\r\n          status: 'ERROR',\r\n          executionTime: 0,\r\n          findings: [],\r\n          riskScore: 0,\r\n          details: { error: error instanceof Error ? error.message : String(error) }\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Execute individual security test\r\n   */\r\n  private async executeSecurityTest(\r\n    testType: SecurityTestType, \r\n    executionId: string\r\n  ): Promise<SecurityTestResult> {\r\n    const startTime = Date.now();\r\n    \r\n    this.logger.debug('Executing security test', { testType, executionId });\r\n\r\n    try {\r\n      switch (testType) {\r\n        case SecurityTestType.PENETRATION_TESTING:\r\n          return await this.executePenetrationTest(executionId);\r\n          \r\n        case SecurityTestType.VULNERABILITY_SCANNING:\r\n          return await this.executeVulnerabilityScanning(executionId);\r\n          \r\n        case SecurityTestType.COMPLIANCE_TESTING:\r\n          return await this.executeComplianceTesting(executionId);\r\n          \r\n        case SecurityTestType.DEPENDENCY_AUDIT:\r\n          return await this.executeDependencyAudit(executionId);\r\n          \r\n        case SecurityTestType.CODE_ANALYSIS:\r\n          return await this.executeCodeAnalysis(executionId);\r\n          \r\n        case SecurityTestType.CONFIGURATION_REVIEW:\r\n          return await this.executeConfigurationReview(executionId);\r\n          \r\n        case SecurityTestType.NETWORK_SECURITY:\r\n          return await this.executeNetworkSecurityTest(executionId);\r\n          \r\n        case SecurityTestType.THREAT_MODELING:\r\n          return await this.executeThreatModeling(executionId);\r\n          \r\n        default:\r\n          throw new Error(`Unknown security test type: ${testType}`);\r\n      }\r\n    } catch (error) {\r\n      return {\r\n        testType,\r\n        testId: `error_${Date.now()}`,\r\n        status: 'ERROR',\r\n        executionTime: Date.now() - startTime,\r\n        findings: [],\r\n        riskScore: 0,\r\n        details: { error: error instanceof Error ? error.message : String(error) }\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Execute penetration testing\r\n   */\r\n  private async executePenetrationTest(executionId: string): Promise<SecurityTestResult> {\r\n    const startTime = Date.now();\r\n    \r\n    const report = await this.penetrationTesting.executeSecurityTestSuite();\r\n    \r\n    return {\r\n      testType: SecurityTestType.PENETRATION_TESTING,\r\n      testId: report.scanId,\r\n      status: report.criticalCount > 0 ? 'FAIL' : report.highCount > 0 ? 'WARNING' : 'PASS',\r\n      executionTime: Date.now() - startTime,\r\n      findings: report.vulnerabilities,\r\n      riskScore: this.calculateRiskScore(report.criticalCount, report.highCount, report.mediumCount, report.lowCount),\r\n      details: report\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Execute vulnerability scanning\r\n   */\r\n  private async executeVulnerabilityScanning(executionId: string): Promise<SecurityTestResult> {\r\n    const startTime = Date.now();\r\n    \r\n    const scanner = await this.vulnerabilityScanner.executeComprehensiveVulnerabilityScan();\r\n    \r\n    return {\r\n      testType: SecurityTestType.VULNERABILITY_SCANNING,\r\n      testId: scanner.scanId,\r\n      status: scanner.summary.criticalCount > 0 ? 'FAIL' : \r\n             scanner.summary.highCount > 0 ? 'WARNING' : 'PASS',\r\n      executionTime: Date.now() - startTime,\r\n      findings: scanner.findings,\r\n      riskScore: scanner.summary.riskScore,\r\n      details: scanner\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Execute compliance testing\r\n   */\r\n  private async executeComplianceTesting(executionId: string): Promise<SecurityTestResult> {\r\n    const startTime = Date.now();\r\n    \r\n    // Test all compliance standards\r\n    const standards = ['OWASP_TOP_10', 'ISO_27001', 'SOC_2', 'CRYPTO_TRADING_SECURITY'];\r\n    const reports = await Promise.all(\r\n      standards.map(standard => this.complianceTesting.executeComplianceTest(standard))\r\n    );\r\n    \r\n    const averageScore = reports.reduce((sum, report) => sum + report.overallScore, 0) / reports.length;\r\n    const failedReports = reports.filter(report => report.status === 'NON_COMPLIANT').length;\r\n    \r\n    return {\r\n      testType: SecurityTestType.COMPLIANCE_TESTING,\r\n      testId: `compliance_${Date.now()}`,\r\n      status: failedReports > 0 ? 'FAIL' : averageScore < 80 ? 'WARNING' : 'PASS',\r\n      executionTime: Date.now() - startTime,\r\n      findings: reports.flatMap(report => report.gapAnalysis),\r\n      riskScore: Math.max(0, 100 - averageScore),\r\n      details: { reports, averageScore }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Execute dependency audit\r\n   */\r\n  private async executeDependencyAudit(executionId: string): Promise<SecurityTestResult> {\r\n    const startTime = Date.now();\r\n    \r\n    // This would integrate with npm audit or similar tools\r\n    // For now, we'll simulate the audit\r\n    const findings = [];\r\n    const riskScore = Math.floor(Math.random() * 30); // Simulate low to medium risk\r\n    \r\n    return {\r\n      testType: SecurityTestType.DEPENDENCY_AUDIT,\r\n      testId: `dep_audit_${Date.now()}`,\r\n      status: riskScore > 20 ? 'WARNING' : 'PASS',\r\n      executionTime: Date.now() - startTime,\r\n      findings,\r\n      riskScore,\r\n      details: { auditResults: 'Dependency audit completed' }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Execute code analysis\r\n   */\r\n  private async executeCodeAnalysis(executionId: string): Promise<SecurityTestResult> {\r\n    const startTime = Date.now();\r\n    \r\n    // This would integrate with static analysis tools\r\n    // For now, we'll simulate the analysis\r\n    const findings = [];\r\n    const riskScore = Math.floor(Math.random() * 25); // Simulate low risk\r\n    \r\n    return {\r\n      testType: SecurityTestType.CODE_ANALYSIS,\r\n      testId: `code_analysis_${Date.now()}`,\r\n      status: riskScore > 15 ? 'WARNING' : 'PASS',\r\n      executionTime: Date.now() - startTime,\r\n      findings,\r\n      riskScore,\r\n      details: { analysisResults: 'Code analysis completed' }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Execute configuration review\r\n   */\r\n  private async executeConfigurationReview(executionId: string): Promise<SecurityTestResult> {\r\n    const startTime = Date.now();\r\n    \r\n    // This would review system and application configurations\r\n    const findings = [];\r\n    const riskScore = Math.floor(Math.random() * 20); // Simulate low risk\r\n    \r\n    return {\r\n      testType: SecurityTestType.CONFIGURATION_REVIEW,\r\n      testId: `config_review_${Date.now()}`,\r\n      status: riskScore > 10 ? 'WARNING' : 'PASS',\r\n      executionTime: Date.now() - startTime,\r\n      findings,\r\n      riskScore,\r\n      details: { reviewResults: 'Configuration review completed' }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Execute network security test\r\n   */\r\n  private async executeNetworkSecurityTest(executionId: string): Promise<SecurityTestResult> {\r\n    const startTime = Date.now();\r\n    \r\n    // This would test network security configurations\r\n    const findings = [];\r\n    const riskScore = Math.floor(Math.random() * 35); // Simulate low to medium risk\r\n    \r\n    return {\r\n      testType: SecurityTestType.NETWORK_SECURITY,\r\n      testId: `network_test_${Date.now()}`,\r\n      status: riskScore > 25 ? 'WARNING' : 'PASS',\r\n      executionTime: Date.now() - startTime,\r\n      findings,\r\n      riskScore,\r\n      details: { networkResults: 'Network security test completed' }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Execute threat modeling\r\n   */\r\n  private async executeThreatModeling(executionId: string): Promise<SecurityTestResult> {\r\n    const startTime = Date.now();\r\n    \r\n    // This would perform threat modeling analysis\r\n    const findings = [];\r\n    const riskScore = Math.floor(Math.random() * 40); // Simulate medium risk\r\n    \r\n    return {\r\n      testType: SecurityTestType.THREAT_MODELING,\r\n      testId: `threat_model_${Date.now()}`,\r\n      status: riskScore > 30 ? 'WARNING' : 'PASS',\r\n      executionTime: Date.now() - startTime,\r\n      findings,\r\n      riskScore,\r\n      details: { threatResults: 'Threat modeling completed' }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculate overall scores and findings\r\n   */\r\n  private calculateOverallScores(execution: SecurityTestExecution): void {\r\n    const testResults = execution.testResults;\r\n    \r\n    // Calculate overall risk score (weighted average)\r\n    const totalRiskScore = testResults.reduce((sum, result) => sum + result.riskScore, 0);\r\n    execution.overallRiskScore = testResults.length > 0 ? totalRiskScore / testResults.length : 0;\r\n    \r\n    // Calculate compliance score (inverse of risk score)\r\n    execution.complianceScore = Math.max(0, 100 - execution.overallRiskScore);\r\n    \r\n    // Count findings by severity\r\n    const allFindings = testResults.flatMap(result => result.findings);\r\n    execution.criticalFindings = allFindings.filter(f => f.severity === 'CRITICAL').length;\r\n    execution.highFindings = allFindings.filter(f => f.severity === 'HIGH').length;\r\n    execution.mediumFindings = allFindings.filter(f => f.severity === 'MEDIUM').length;\r\n    execution.lowFindings = allFindings.filter(f => f.severity === 'LOW').length;\r\n  }\r\n\r\n  /**\r\n   * Generate recommendations based on test results\r\n   */\r\n  private async generateRecommendations(execution: SecurityTestExecution): Promise<void> {\r\n    const recommendations = new Set<string>();\r\n    \r\n    // Add recommendations based on test results\r\n    execution.testResults.forEach(result => {\r\n      if (result.status === 'FAIL' || result.status === 'WARNING') {\r\n        switch (result.testType) {\r\n          case SecurityTestType.PENETRATION_TESTING:\r\n            recommendations.add('Address critical penetration testing findings immediately');\r\n            recommendations.add('Implement additional security controls for high-risk areas');\r\n            break;\r\n          case SecurityTestType.VULNERABILITY_SCANNING:\r\n            recommendations.add('Update vulnerable dependencies to latest secure versions');\r\n            recommendations.add('Implement automated vulnerability scanning in CI/CD pipeline');\r\n            break;\r\n          case SecurityTestType.COMPLIANCE_TESTING:\r\n            recommendations.add('Address compliance gaps to meet regulatory requirements');\r\n            recommendations.add('Implement missing security controls identified in compliance testing');\r\n            break;\r\n          case SecurityTestType.DEPENDENCY_AUDIT:\r\n            recommendations.add('Review and update project dependencies regularly');\r\n            recommendations.add('Implement dependency vulnerability monitoring');\r\n            break;\r\n          case SecurityTestType.CODE_ANALYSIS:\r\n            recommendations.add('Fix code security issues identified in static analysis');\r\n            recommendations.add('Implement secure coding practices and training');\r\n            break;\r\n          case SecurityTestType.CONFIGURATION_REVIEW:\r\n            recommendations.add('Harden system and application configurations');\r\n            recommendations.add('Implement configuration management and monitoring');\r\n            break;\r\n          case SecurityTestType.NETWORK_SECURITY:\r\n            recommendations.add('Strengthen network security controls and monitoring');\r\n            recommendations.add('Implement network segmentation and access controls');\r\n            break;\r\n          case SecurityTestType.THREAT_MODELING:\r\n            recommendations.add('Address identified threats with appropriate countermeasures');\r\n            recommendations.add('Update threat model based on new findings');\r\n            break;\r\n        }\r\n      }\r\n    });\r\n    \r\n    // Add general recommendations based on overall risk score\r\n    if (execution.overallRiskScore > 70) {\r\n      recommendations.add('Immediate security review and remediation required');\r\n      recommendations.add('Consider engaging external security experts');\r\n    } else if (execution.overallRiskScore > 40) {\r\n      recommendations.add('Prioritize security improvements in next development cycle');\r\n      recommendations.add('Increase security testing frequency');\r\n    }\r\n    \r\n    execution.recommendations = Array.from(recommendations);\r\n  }\r\n\r\n  /**\r\n   * Generate remediation plan\r\n   */\r\n  private async generateRemediationPlan(execution: SecurityTestExecution): Promise<void> {\r\n    const tasks: RemediationTask[] = [];\r\n    \r\n    // Generate tasks based on critical and high findings\r\n    const criticalTasks = this.generateCriticalRemediationTasks(execution);\r\n    const highTasks = this.generateHighRemediationTasks(execution);\r\n    const mediumTasks = this.generateMediumRemediationTasks(execution);\r\n    \r\n    tasks.push(...criticalTasks, ...highTasks, ...mediumTasks);\r\n    \r\n    // Calculate overall plan metrics\r\n    const totalEffort = tasks.reduce((sum, task) => {\r\n      const effortHours = task.effort === 'HIGH' ? 8 : task.effort === 'MEDIUM' ? 4 : 2;\r\n      return sum + effortHours;\r\n    }, 0);\r\n    \r\n    const criticalTaskCount = tasks.filter(t => t.priority === 'CRITICAL').length;\r\n    const highTaskCount = tasks.filter(t => t.priority === 'HIGH').length;\r\n    \r\n    execution.remediationPlan = {\r\n      planId: `plan_${execution.executionId}`,\r\n      priority: criticalTaskCount > 0 ? 'IMMEDIATE' : highTaskCount > 0 ? 'HIGH' : 'MEDIUM',\r\n      estimatedEffort: `${totalEffort} hours`,\r\n      estimatedCost: `$${totalEffort * 150}`, // Assuming $150/hour\r\n      timeline: this.calculateTimeline(totalEffort),\r\n      tasks,\r\n      dependencies: this.identifyDependencies(tasks),\r\n      riskReduction: this.calculateRiskReduction(execution)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generate critical remediation tasks\r\n   */\r\n  private generateCriticalRemediationTasks(execution: SecurityTestExecution): RemediationTask[] {\r\n    const tasks: RemediationTask[] = [];\r\n    \r\n    if (execution.criticalFindings > 0) {\r\n      tasks.push({\r\n        taskId: `critical_${Date.now()}`,\r\n        title: 'Address Critical Security Vulnerabilities',\r\n        description: `Fix ${execution.criticalFindings} critical security vulnerabilities`,\r\n        priority: 'CRITICAL',\r\n        effort: 'HIGH',\r\n        status: 'PENDING',\r\n        dependencies: [],\r\n        steps: [\r\n          'Review all critical findings',\r\n          'Prioritize by exploitability and impact',\r\n          'Implement fixes for each vulnerability',\r\n          'Test fixes in staging environment',\r\n          'Deploy fixes to production',\r\n          'Verify fixes with security testing'\r\n        ]\r\n      });\r\n    }\r\n    \r\n    return tasks;\r\n  }\r\n\r\n  /**\r\n   * Generate high priority remediation tasks\r\n   */\r\n  private generateHighRemediationTasks(execution: SecurityTestExecution): RemediationTask[] {\r\n    const tasks: RemediationTask[] = [];\r\n    \r\n    if (execution.highFindings > 0) {\r\n      tasks.push({\r\n        taskId: `high_${Date.now()}`,\r\n        title: 'Address High Priority Security Issues',\r\n        description: `Fix ${execution.highFindings} high priority security issues`,\r\n        priority: 'HIGH',\r\n        effort: 'MEDIUM',\r\n        status: 'PENDING',\r\n        dependencies: [],\r\n        steps: [\r\n          'Review high priority findings',\r\n          'Plan remediation approach',\r\n          'Implement security improvements',\r\n          'Test changes thoroughly',\r\n          'Deploy to production'\r\n        ]\r\n      });\r\n    }\r\n    \r\n    return tasks;\r\n  }\r\n\r\n  /**\r\n   * Generate medium priority remediation tasks\r\n   */\r\n  private generateMediumRemediationTasks(execution: SecurityTestExecution): RemediationTask[] {\r\n    const tasks: RemediationTask[] = [];\r\n    \r\n    if (execution.mediumFindings > 0) {\r\n      tasks.push({\r\n        taskId: `medium_${Date.now()}`,\r\n        title: 'Address Medium Priority Security Improvements',\r\n        description: `Implement ${execution.mediumFindings} medium priority security improvements`,\r\n        priority: 'MEDIUM',\r\n        effort: 'LOW',\r\n        status: 'PENDING',\r\n        dependencies: [],\r\n        steps: [\r\n          'Review medium priority findings',\r\n          'Schedule improvements in next sprint',\r\n          'Implement security enhancements',\r\n          'Validate improvements'\r\n        ]\r\n      });\r\n    }\r\n    \r\n    return tasks;\r\n  }\r\n\r\n  /**\r\n   * Helper methods\r\n   */\r\n  private calculateRiskScore(critical: number, high: number, medium: number, low: number): number {\r\n    return Math.min(100, (critical * 25) + (high * 10) + (medium * 5) + (low * 1));\r\n  }\r\n\r\n  private calculateTimeline(totalEffortHours: number): string {\r\n    const days = Math.ceil(totalEffortHours / 8);\r\n    if (days <= 1) return '1 day';\r\n    if (days <= 7) return `${days} days`;\r\n    if (days <= 30) return `${Math.ceil(days / 7)} weeks`;\r\n    return `${Math.ceil(days / 30)} months`;\r\n  }\r\n\r\n  private identifyDependencies(tasks: RemediationTask[]): string[] {\r\n    // Simple dependency identification - in practice, this would be more sophisticated\r\n    return tasks.filter(t => t.priority === 'CRITICAL').map(t => t.taskId);\r\n  }\r\n\r\n  private calculateRiskReduction(execution: SecurityTestExecution): number {\r\n    // Estimate risk reduction based on findings severity\r\n    const maxReduction = execution.criticalFindings * 25 + execution.highFindings * 10 + \r\n                        execution.mediumFindings * 5 + execution.lowFindings * 1;\r\n    return Math.min(100, maxReduction);\r\n  }\r\n\r\n  private async processSecurityTestResults(execution: SecurityTestExecution): Promise<void> {\r\n    // Send alerts for critical findings\r\n    if (execution.criticalFindings > 0) {\r\n      await this.notifications.sendCriticalAlert({\r\n        title: '\uD83D\uDEA8 Critical Security Vulnerabilities Detected',\r\n        message: `Security testing found ${execution.criticalFindings} critical vulnerabilities requiring immediate attention.`,\r\n        details: {\r\n          executionId: execution.executionId,\r\n          criticalFindings: execution.criticalFindings,\r\n          overallRiskScore: execution.overallRiskScore\r\n        },\r\n        priority: 'CRITICAL'\r\n      });\r\n    }\r\n    \r\n    // Create incident for high-risk findings\r\n    if (execution.overallRiskScore > 70) {\r\n      await this.incidentResponse.createIncident({\r\n        type: 'HIGH_RISK_SECURITY_FINDINGS',\r\n        severity: 'HIGH',\r\n        description: `Security testing revealed high-risk findings (risk score: ${execution.overallRiskScore})`,\r\n        source: 'Security Test Orchestrator',\r\n        evidence: execution.testResults\r\n      });\r\n    }\r\n  }\r\n\r\n  private async sendFailureNotification(execution: SecurityTestExecution, error: any): Promise<void> {\r\n    await this.notifications.sendAlert({\r\n      title: '\u274C Security Test Suite Failed',\r\n      message: `Security test suite ${execution.suiteId} failed: ${error.message}`,\r\n      details: {\r\n        executionId: execution.executionId,\r\n        suiteId: execution.suiteId,\r\n        error: error.message\r\n      },\r\n      priority: 'HIGH'\r\n    });\r\n  }\r\n\r\n  private updateSecurityTrends(execution: SecurityTestExecution): void {\r\n    const trendData: SecurityTrendData = {\r\n      date: new Date(),\r\n      securityScore: execution.complianceScore,\r\n      vulnerabilityCount: execution.criticalFindings + execution.highFindings + \r\n                         execution.mediumFindings + execution.lowFindings,\r\n      complianceScore: execution.complianceScore,\r\n      riskScore: execution.overallRiskScore\r\n    };\r\n    \r\n    this.securityTrends.push(trendData);\r\n    \r\n    // Keep only last 30 days of trend data\r\n    const thirtyDaysAgo = new Date();\r\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\r\n    this.securityTrends = this.securityTrends.filter(trend => trend.date >= thirtyDaysAgo);\r\n  }\r\n\r\n  /**\r\n   * Public API methods\r\n   */\r\n\r\n  /**\r\n   * Get security dashboard data\r\n   */\r\n  getSecurityDashboard(): SecurityDashboard {\r\n    const recentExecutions = this.executionHistory.slice(-10);\r\n    const latestExecution = recentExecutions[recentExecutions.length - 1];\r\n    \r\n    return {\r\n      lastUpdated: new Date(),\r\n      overallSecurityScore: latestExecution?.complianceScore || 0,\r\n      riskLevel: this.determineRiskLevel(latestExecution?.overallRiskScore || 0),\r\n      activeThreats: this.activeExecutions.size,\r\n      vulnerabilities: {\r\n        critical: latestExecution?.criticalFindings || 0,\r\n        high: latestExecution?.highFindings || 0,\r\n        medium: latestExecution?.mediumFindings || 0,\r\n        low: latestExecution?.lowFindings || 0\r\n      },\r\n      complianceStatus: {\r\n        owasp: 85, // These would be calculated from actual compliance tests\r\n        iso27001: 80,\r\n        soc2: 75,\r\n        cryptoSecurity: 90\r\n      },\r\n      recentExecutions,\r\n      trendData: this.securityTrends\r\n    };\r\n  }\r\n\r\n  private determineRiskLevel(riskScore: number): 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL' {\r\n    if (riskScore >= 80) return 'CRITICAL';\r\n    if (riskScore >= 60) return 'HIGH';\r\n    if (riskScore >= 30) return 'MEDIUM';\r\n    return 'LOW';\r\n  }\r\n\r\n  /**\r\n   * Get active executions\r\n   */\r\n  getActiveExecutions(): SecurityTestExecution[] {\r\n    return Array.from(this.activeExecutions.values());\r\n  }\r\n\r\n  /**\r\n   * Get execution history\r\n   */\r\n  getExecutionHistory(): SecurityTestExecution[] {\r\n    return this.executionHistory;\r\n  }\r\n\r\n  /**\r\n   * Cancel active execution\r\n   */\r\n  async cancelExecution(executionId: string): Promise<boolean> {\r\n    const execution = this.activeExecutions.get(executionId);\r\n    \r\n    if (execution && execution.status === 'RUNNING') {\r\n      execution.status = 'CANCELLED';\r\n      execution.endTime = new Date();\r\n      this.activeExecutions.delete(executionId);\r\n      this.executionHistory.push(execution);\r\n      \r\n      this.logger.info('Security test execution cancelled', { executionId });\r\n      return true;\r\n    }\r\n    \r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Add custom test suite\r\n   */\r\n  addTestSuite(suite: SecurityTestSuite): void {\r\n    this.testSuites.set(suite.suiteId, suite);\r\n    this.logger.info('Custom security test suite added', { suiteId: suite.suiteId });\r\n  }\r\n\r\n  /**\r\n   * Remove test suite\r\n   */\r\n  removeTestSuite(suiteId: string): boolean {\r\n    const removed = this.testSuites.delete(suiteId);\r\n    if (removed) {\r\n      this.logger.info('Security test suite removed', { suiteId });\r\n    }\r\n    return removed;\r\n  }\r\n\r\n  /**\r\n   * Get available test suites\r\n   */\r\n  getTestSuites(): SecurityTestSuite[] {\r\n    return Array.from(this.testSuites.values());\r\n  }\r\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "ec900e70dc4c35d56a3106b9eae8629e3c35e860"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2iypd10nex = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2iypd10nex();
var __createBinding =
/* istanbul ignore next */
(cov_2iypd10nex().s[0]++,
/* istanbul ignore next */
(cov_2iypd10nex().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_2iypd10nex().b[0][1]++, this.__createBinding) ||
/* istanbul ignore next */
(cov_2iypd10nex().b[0][2]++, Object.create ?
/* istanbul ignore next */
(cov_2iypd10nex().b[1][0]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_2iypd10nex().f[0]++;
  cov_2iypd10nex().s[1]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_2iypd10nex().b[2][0]++;
    cov_2iypd10nex().s[2]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_2iypd10nex().b[2][1]++;
  }
  var desc =
  /* istanbul ignore next */
  (cov_2iypd10nex().s[3]++, Object.getOwnPropertyDescriptor(m, k));
  /* istanbul ignore next */
  cov_2iypd10nex().s[4]++;
  if (
  /* istanbul ignore next */
  (cov_2iypd10nex().b[4][0]++, !desc) ||
  /* istanbul ignore next */
  (cov_2iypd10nex().b[4][1]++, "get" in desc ?
  /* istanbul ignore next */
  (cov_2iypd10nex().b[5][0]++, !m.__esModule) :
  /* istanbul ignore next */
  (cov_2iypd10nex().b[5][1]++,
  /* istanbul ignore next */
  (cov_2iypd10nex().b[6][0]++, desc.writable) ||
  /* istanbul ignore next */
  (cov_2iypd10nex().b[6][1]++, desc.configurable)))) {
    /* istanbul ignore next */
    cov_2iypd10nex().b[3][0]++;
    cov_2iypd10nex().s[5]++;
    desc = {
      enumerable: true,
      get: function () {
        /* istanbul ignore next */
        cov_2iypd10nex().f[1]++;
        cov_2iypd10nex().s[6]++;
        return m[k];
      }
    };
  } else
  /* istanbul ignore next */
  {
    cov_2iypd10nex().b[3][1]++;
  }
  cov_2iypd10nex().s[7]++;
  Object.defineProperty(o, k2, desc);
}) :
/* istanbul ignore next */
(cov_2iypd10nex().b[1][1]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_2iypd10nex().f[2]++;
  cov_2iypd10nex().s[8]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_2iypd10nex().b[7][0]++;
    cov_2iypd10nex().s[9]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_2iypd10nex().b[7][1]++;
  }
  cov_2iypd10nex().s[10]++;
  o[k2] = m[k];
})));
var __setModuleDefault =
/* istanbul ignore next */
(cov_2iypd10nex().s[11]++,
/* istanbul ignore next */
(cov_2iypd10nex().b[8][0]++, this) &&
/* istanbul ignore next */
(cov_2iypd10nex().b[8][1]++, this.__setModuleDefault) ||
/* istanbul ignore next */
(cov_2iypd10nex().b[8][2]++, Object.create ?
/* istanbul ignore next */
(cov_2iypd10nex().b[9][0]++, function (o, v) {
  /* istanbul ignore next */
  cov_2iypd10nex().f[3]++;
  cov_2iypd10nex().s[12]++;
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
}) :
/* istanbul ignore next */
(cov_2iypd10nex().b[9][1]++, function (o, v) {
  /* istanbul ignore next */
  cov_2iypd10nex().f[4]++;
  cov_2iypd10nex().s[13]++;
  o["default"] = v;
})));
var __importStar =
/* istanbul ignore next */
(cov_2iypd10nex().s[14]++,
/* istanbul ignore next */
(cov_2iypd10nex().b[10][0]++, this) &&
/* istanbul ignore next */
(cov_2iypd10nex().b[10][1]++, this.__importStar) ||
/* istanbul ignore next */
(cov_2iypd10nex().b[10][2]++, function () {
  /* istanbul ignore next */
  cov_2iypd10nex().f[5]++;
  cov_2iypd10nex().s[15]++;
  var ownKeys = function (o) {
    /* istanbul ignore next */
    cov_2iypd10nex().f[6]++;
    cov_2iypd10nex().s[16]++;
    ownKeys =
    /* istanbul ignore next */
    (cov_2iypd10nex().b[11][0]++, Object.getOwnPropertyNames) ||
    /* istanbul ignore next */
    (cov_2iypd10nex().b[11][1]++, function (o) {
      /* istanbul ignore next */
      cov_2iypd10nex().f[7]++;
      var ar =
      /* istanbul ignore next */
      (cov_2iypd10nex().s[17]++, []);
      /* istanbul ignore next */
      cov_2iypd10nex().s[18]++;
      for (var k in o) {
        /* istanbul ignore next */
        cov_2iypd10nex().s[19]++;
        if (Object.prototype.hasOwnProperty.call(o, k)) {
          /* istanbul ignore next */
          cov_2iypd10nex().b[12][0]++;
          cov_2iypd10nex().s[20]++;
          ar[ar.length] = k;
        } else
        /* istanbul ignore next */
        {
          cov_2iypd10nex().b[12][1]++;
        }
      }
      /* istanbul ignore next */
      cov_2iypd10nex().s[21]++;
      return ar;
    });
    /* istanbul ignore next */
    cov_2iypd10nex().s[22]++;
    return ownKeys(o);
  };
  /* istanbul ignore next */
  cov_2iypd10nex().s[23]++;
  return function (mod) {
    /* istanbul ignore next */
    cov_2iypd10nex().f[8]++;
    cov_2iypd10nex().s[24]++;
    if (
    /* istanbul ignore next */
    (cov_2iypd10nex().b[14][0]++, mod) &&
    /* istanbul ignore next */
    (cov_2iypd10nex().b[14][1]++, mod.__esModule)) {
      /* istanbul ignore next */
      cov_2iypd10nex().b[13][0]++;
      cov_2iypd10nex().s[25]++;
      return mod;
    } else
    /* istanbul ignore next */
    {
      cov_2iypd10nex().b[13][1]++;
    }
    var result =
    /* istanbul ignore next */
    (cov_2iypd10nex().s[26]++, {});
    /* istanbul ignore next */
    cov_2iypd10nex().s[27]++;
    if (mod != null) {
      /* istanbul ignore next */
      cov_2iypd10nex().b[15][0]++;
      cov_2iypd10nex().s[28]++;
      for (var k =
        /* istanbul ignore next */
        (cov_2iypd10nex().s[29]++, ownKeys(mod)), i =
        /* istanbul ignore next */
        (cov_2iypd10nex().s[30]++, 0); i < k.length; i++) {
        /* istanbul ignore next */
        cov_2iypd10nex().s[31]++;
        if (k[i] !== "default") {
          /* istanbul ignore next */
          cov_2iypd10nex().b[16][0]++;
          cov_2iypd10nex().s[32]++;
          __createBinding(result, mod, k[i]);
        } else
        /* istanbul ignore next */
        {
          cov_2iypd10nex().b[16][1]++;
        }
      }
    } else
    /* istanbul ignore next */
    {
      cov_2iypd10nex().b[15][1]++;
    }
    cov_2iypd10nex().s[33]++;
    __setModuleDefault(result, mod);
    /* istanbul ignore next */
    cov_2iypd10nex().s[34]++;
    return result;
  };
}()));
/* istanbul ignore next */
cov_2iypd10nex().s[35]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2iypd10nex().s[36]++;
exports.SecurityTestOrchestrator = exports.SecurityTestType = void 0;
const crypto =
/* istanbul ignore next */
(cov_2iypd10nex().s[37]++, __importStar(require("crypto")));
var SecurityTestType;
/* istanbul ignore next */
cov_2iypd10nex().s[38]++;
(function (SecurityTestType) {
  /* istanbul ignore next */
  cov_2iypd10nex().f[9]++;
  cov_2iypd10nex().s[39]++;
  SecurityTestType["PENETRATION_TESTING"] = "penetration_testing";
  /* istanbul ignore next */
  cov_2iypd10nex().s[40]++;
  SecurityTestType["VULNERABILITY_SCANNING"] = "vulnerability_scanning";
  /* istanbul ignore next */
  cov_2iypd10nex().s[41]++;
  SecurityTestType["COMPLIANCE_TESTING"] = "compliance_testing";
  /* istanbul ignore next */
  cov_2iypd10nex().s[42]++;
  SecurityTestType["DEPENDENCY_AUDIT"] = "dependency_audit";
  /* istanbul ignore next */
  cov_2iypd10nex().s[43]++;
  SecurityTestType["CODE_ANALYSIS"] = "code_analysis";
  /* istanbul ignore next */
  cov_2iypd10nex().s[44]++;
  SecurityTestType["CONFIGURATION_REVIEW"] = "configuration_review";
  /* istanbul ignore next */
  cov_2iypd10nex().s[45]++;
  SecurityTestType["NETWORK_SECURITY"] = "network_security";
  /* istanbul ignore next */
  cov_2iypd10nex().s[46]++;
  SecurityTestType["THREAT_MODELING"] = "threat_modeling";
})(
/* istanbul ignore next */
(cov_2iypd10nex().b[17][0]++, SecurityTestType) ||
/* istanbul ignore next */
(cov_2iypd10nex().b[17][1]++, exports.SecurityTestType = SecurityTestType = {}));
class SecurityTestOrchestrator {
  logger;
  penetrationTesting;
  vulnerabilityScanner;
  complianceTesting;
  automatedTesting;
  threatDetection;
  incidentResponse;
  notifications;
  testSuites =
  /* istanbul ignore next */
  (cov_2iypd10nex().s[47]++, new Map());
  activeExecutions =
  /* istanbul ignore next */
  (cov_2iypd10nex().s[48]++, new Map());
  executionHistory =
  /* istanbul ignore next */
  (cov_2iypd10nex().s[49]++, []);
  securityTrends =
  /* istanbul ignore next */
  (cov_2iypd10nex().s[50]++, []);
  constructor(logger, penetrationTesting, vulnerabilityScanner, complianceTesting, automatedTesting, threatDetection, incidentResponse, notifications) {
    /* istanbul ignore next */
    cov_2iypd10nex().f[10]++;
    cov_2iypd10nex().s[51]++;
    this.logger = logger;
    /* istanbul ignore next */
    cov_2iypd10nex().s[52]++;
    this.penetrationTesting = penetrationTesting;
    /* istanbul ignore next */
    cov_2iypd10nex().s[53]++;
    this.vulnerabilityScanner = vulnerabilityScanner;
    /* istanbul ignore next */
    cov_2iypd10nex().s[54]++;
    this.complianceTesting = complianceTesting;
    /* istanbul ignore next */
    cov_2iypd10nex().s[55]++;
    this.automatedTesting = automatedTesting;
    /* istanbul ignore next */
    cov_2iypd10nex().s[56]++;
    this.threatDetection = threatDetection;
    /* istanbul ignore next */
    cov_2iypd10nex().s[57]++;
    this.incidentResponse = incidentResponse;
    /* istanbul ignore next */
    cov_2iypd10nex().s[58]++;
    this.notifications = notifications;
    /* istanbul ignore next */
    cov_2iypd10nex().s[59]++;
    this.initializeDefaultTestSuites();
  }
  /**
   * Initialize default security test suites
   */
  initializeDefaultTestSuites() {
    /* istanbul ignore next */
    cov_2iypd10nex().f[11]++;
    cov_2iypd10nex().s[60]++;
    // Daily security scan
    this.testSuites.set('daily-security-scan', {
      suiteId: 'daily-security-scan',
      name: 'Daily Security Scan',
      description: 'Comprehensive daily security testing including vulnerability scanning and compliance checks',
      testTypes: [SecurityTestType.VULNERABILITY_SCANNING, SecurityTestType.DEPENDENCY_AUDIT, SecurityTestType.CONFIGURATION_REVIEW],
      priority: 'HIGH',
      schedule: '0 2 * * *',
      // 2 AM daily
      enabled: true,
      parallelExecution: true,
      maxExecutionTime: 1800000,
      // 30 minutes
      retryCount: 2
    });
    // Weekly comprehensive security assessment
    /* istanbul ignore next */
    cov_2iypd10nex().s[61]++;
    this.testSuites.set('weekly-comprehensive-scan', {
      suiteId: 'weekly-comprehensive-scan',
      name: 'Weekly Comprehensive Security Assessment',
      description: 'Full security assessment including penetration testing and compliance validation',
      testTypes: [SecurityTestType.PENETRATION_TESTING, SecurityTestType.VULNERABILITY_SCANNING, SecurityTestType.COMPLIANCE_TESTING, SecurityTestType.CODE_ANALYSIS, SecurityTestType.NETWORK_SECURITY],
      priority: 'CRITICAL',
      schedule: '0 1 * * 0',
      // 1 AM every Sunday
      enabled: true,
      parallelExecution: false,
      maxExecutionTime: 7200000,
      // 2 hours
      retryCount: 1
    });
    // Pre-deployment security validation
    /* istanbul ignore next */
    cov_2iypd10nex().s[62]++;
    this.testSuites.set('pre-deployment-validation', {
      suiteId: 'pre-deployment-validation',
      name: 'Pre-Deployment Security Validation',
      description: 'Security validation before production deployment',
      testTypes: [SecurityTestType.PENETRATION_TESTING, SecurityTestType.VULNERABILITY_SCANNING, SecurityTestType.COMPLIANCE_TESTING, SecurityTestType.CODE_ANALYSIS],
      priority: 'CRITICAL',
      enabled: true,
      parallelExecution: true,
      maxExecutionTime: 3600000,
      // 1 hour
      retryCount: 0
    });
    // Incident response security check
    /* istanbul ignore next */
    cov_2iypd10nex().s[63]++;
    this.testSuites.set('incident-response-check', {
      suiteId: 'incident-response-check',
      name: 'Incident Response Security Check',
      description: 'Rapid security assessment triggered by security incidents',
      testTypes: [SecurityTestType.VULNERABILITY_SCANNING, SecurityTestType.THREAT_MODELING, SecurityTestType.NETWORK_SECURITY],
      priority: 'CRITICAL',
      enabled: true,
      parallelExecution: true,
      maxExecutionTime: 900000,
      // 15 minutes
      retryCount: 0
    });
    /* istanbul ignore next */
    cov_2iypd10nex().s[64]++;
    this.logger.info('Default security test suites initialized', {
      suiteCount: this.testSuites.size
    });
  }
  /**
   * Execute security test suite
   */
  async executeSecurityTestSuite(suiteId) {
    /* istanbul ignore next */
    cov_2iypd10nex().f[12]++;
    const suite =
    /* istanbul ignore next */
    (cov_2iypd10nex().s[65]++, this.testSuites.get(suiteId));
    /* istanbul ignore next */
    cov_2iypd10nex().s[66]++;
    if (!suite) {
      /* istanbul ignore next */
      cov_2iypd10nex().b[18][0]++;
      cov_2iypd10nex().s[67]++;
      throw new Error(`Security test suite not found: ${suiteId}`);
    } else
    /* istanbul ignore next */
    {
      cov_2iypd10nex().b[18][1]++;
    }
    const executionId =
    /* istanbul ignore next */
    (cov_2iypd10nex().s[68]++, `exec_${Date.now()}_${crypto.randomBytes(4).toString('hex')}`);
    const execution =
    /* istanbul ignore next */
    (cov_2iypd10nex().s[69]++, {
      executionId,
      suiteId,
      startTime: new Date(),
      status: 'RUNNING',
      testResults: [],
      overallRiskScore: 0,
      complianceScore: 0,
      criticalFindings: 0,
      highFindings: 0,
      mediumFindings: 0,
      lowFindings: 0,
      recommendations: [],
      remediationPlan: {
        planId: `plan_${executionId}`,
        priority: 'MEDIUM',
        estimatedEffort: 'TBD',
        estimatedCost: 'TBD',
        timeline: 'TBD',
        tasks: [],
        dependencies: [],
        riskReduction: 0
      }
    });
    /* istanbul ignore next */
    cov_2iypd10nex().s[70]++;
    this.activeExecutions.set(executionId, execution);
    /* istanbul ignore next */
    cov_2iypd10nex().s[71]++;
    this.logger.info('Starting security test suite execution', {
      executionId,
      suiteId,
      testTypes: suite.testTypes
    });
    /* istanbul ignore next */
    cov_2iypd10nex().s[72]++;
    try {
      /* istanbul ignore next */
      cov_2iypd10nex().s[73]++;
      // Execute tests based on suite configuration
      if (suite.parallelExecution) {
        /* istanbul ignore next */
        cov_2iypd10nex().b[19][0]++;
        cov_2iypd10nex().s[74]++;
        await this.executeTestsInParallel(suite, execution);
      } else {
        /* istanbul ignore next */
        cov_2iypd10nex().b[19][1]++;
        cov_2iypd10nex().s[75]++;
        await this.executeTestsSequentially(suite, execution);
      }
      // Calculate overall scores and findings
      /* istanbul ignore next */
      cov_2iypd10nex().s[76]++;
      this.calculateOverallScores(execution);
      // Generate recommendations and remediation plan
      /* istanbul ignore next */
      cov_2iypd10nex().s[77]++;
      await this.generateRecommendations(execution);
      /* istanbul ignore next */
      cov_2iypd10nex().s[78]++;
      await this.generateRemediationPlan(execution);
      // Process results and trigger alerts if necessary
      /* istanbul ignore next */
      cov_2iypd10nex().s[79]++;
      await this.processSecurityTestResults(execution);
      /* istanbul ignore next */
      cov_2iypd10nex().s[80]++;
      execution.status = 'COMPLETED';
      /* istanbul ignore next */
      cov_2iypd10nex().s[81]++;
      execution.endTime = new Date();
      /* istanbul ignore next */
      cov_2iypd10nex().s[82]++;
      this.logger.info('Security test suite execution completed', {
        executionId,
        overallRiskScore: execution.overallRiskScore,
        criticalFindings: execution.criticalFindings,
        complianceScore: execution.complianceScore
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2iypd10nex().s[83]++;
      execution.status = 'FAILED';
      /* istanbul ignore next */
      cov_2iypd10nex().s[84]++;
      execution.endTime = new Date();
      /* istanbul ignore next */
      cov_2iypd10nex().s[85]++;
      this.logger.error('Security test suite execution failed', {
        executionId,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_2iypd10nex().b[20][0]++, error.message) :
        /* istanbul ignore next */
        (cov_2iypd10nex().b[20][1]++, String(error))
      });
      // Send failure notification
      /* istanbul ignore next */
      cov_2iypd10nex().s[86]++;
      await this.sendFailureNotification(execution, error);
      /* istanbul ignore next */
      cov_2iypd10nex().s[87]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_2iypd10nex().s[88]++;
      this.activeExecutions.delete(executionId);
      /* istanbul ignore next */
      cov_2iypd10nex().s[89]++;
      this.executionHistory.push(execution);
      // Update security trends
      /* istanbul ignore next */
      cov_2iypd10nex().s[90]++;
      this.updateSecurityTrends(execution);
    }
    /* istanbul ignore next */
    cov_2iypd10nex().s[91]++;
    return execution;
  }
  /**
   * Execute tests in parallel
   */
  async executeTestsInParallel(suite, execution) {
    /* istanbul ignore next */
    cov_2iypd10nex().f[13]++;
    const testPromises =
    /* istanbul ignore next */
    (cov_2iypd10nex().s[92]++, suite.testTypes.map(testType => {
      /* istanbul ignore next */
      cov_2iypd10nex().f[14]++;
      cov_2iypd10nex().s[93]++;
      return this.executeSecurityTest(testType, execution.executionId);
    }));
    const results =
    /* istanbul ignore next */
    (cov_2iypd10nex().s[94]++, await Promise.allSettled(testPromises));
    /* istanbul ignore next */
    cov_2iypd10nex().s[95]++;
    results.forEach((result, index) => {
      /* istanbul ignore next */
      cov_2iypd10nex().f[15]++;
      cov_2iypd10nex().s[96]++;
      if (result.status === 'fulfilled') {
        /* istanbul ignore next */
        cov_2iypd10nex().b[21][0]++;
        cov_2iypd10nex().s[97]++;
        execution.testResults.push(result.value);
      } else {
        /* istanbul ignore next */
        cov_2iypd10nex().b[21][1]++;
        cov_2iypd10nex().s[98]++;
        this.logger.error('Security test failed', {
          testType: suite.testTypes[index],
          error: result.reason
        });
        /* istanbul ignore next */
        cov_2iypd10nex().s[99]++;
        execution.testResults.push({
          testType: suite.testTypes[index],
          testId: `failed_${Date.now()}`,
          status: 'ERROR',
          executionTime: 0,
          findings: [],
          riskScore: 0,
          details: {
            error: result.reason.message
          }
        });
      }
    });
  }
  /**
   * Execute tests sequentially
   */
  async executeTestsSequentially(suite, execution) {
    /* istanbul ignore next */
    cov_2iypd10nex().f[16]++;
    cov_2iypd10nex().s[100]++;
    for (const testType of suite.testTypes) {
      /* istanbul ignore next */
      cov_2iypd10nex().s[101]++;
      try {
        const result =
        /* istanbul ignore next */
        (cov_2iypd10nex().s[102]++, await this.executeSecurityTest(testType, execution.executionId));
        /* istanbul ignore next */
        cov_2iypd10nex().s[103]++;
        execution.testResults.push(result);
      } catch (error) {
        /* istanbul ignore next */
        cov_2iypd10nex().s[104]++;
        this.logger.error('Security test failed', {
          testType,
          error: error instanceof Error ?
          /* istanbul ignore next */
          (cov_2iypd10nex().b[22][0]++, error.message) :
          /* istanbul ignore next */
          (cov_2iypd10nex().b[22][1]++, String(error))
        });
        /* istanbul ignore next */
        cov_2iypd10nex().s[105]++;
        execution.testResults.push({
          testType,
          testId: `failed_${Date.now()}`,
          status: 'ERROR',
          executionTime: 0,
          findings: [],
          riskScore: 0,
          details: {
            error: error instanceof Error ?
            /* istanbul ignore next */
            (cov_2iypd10nex().b[23][0]++, error.message) :
            /* istanbul ignore next */
            (cov_2iypd10nex().b[23][1]++, String(error))
          }
        });
      }
    }
  }
  /**
   * Execute individual security test
   */
  async executeSecurityTest(testType, executionId) {
    /* istanbul ignore next */
    cov_2iypd10nex().f[17]++;
    const startTime =
    /* istanbul ignore next */
    (cov_2iypd10nex().s[106]++, Date.now());
    /* istanbul ignore next */
    cov_2iypd10nex().s[107]++;
    this.logger.debug('Executing security test', {
      testType,
      executionId
    });
    /* istanbul ignore next */
    cov_2iypd10nex().s[108]++;
    try {
      /* istanbul ignore next */
      cov_2iypd10nex().s[109]++;
      switch (testType) {
        case SecurityTestType.PENETRATION_TESTING:
          /* istanbul ignore next */
          cov_2iypd10nex().b[24][0]++;
          cov_2iypd10nex().s[110]++;
          return await this.executePenetrationTest(executionId);
        case SecurityTestType.VULNERABILITY_SCANNING:
          /* istanbul ignore next */
          cov_2iypd10nex().b[24][1]++;
          cov_2iypd10nex().s[111]++;
          return await this.executeVulnerabilityScanning(executionId);
        case SecurityTestType.COMPLIANCE_TESTING:
          /* istanbul ignore next */
          cov_2iypd10nex().b[24][2]++;
          cov_2iypd10nex().s[112]++;
          return await this.executeComplianceTesting(executionId);
        case SecurityTestType.DEPENDENCY_AUDIT:
          /* istanbul ignore next */
          cov_2iypd10nex().b[24][3]++;
          cov_2iypd10nex().s[113]++;
          return await this.executeDependencyAudit(executionId);
        case SecurityTestType.CODE_ANALYSIS:
          /* istanbul ignore next */
          cov_2iypd10nex().b[24][4]++;
          cov_2iypd10nex().s[114]++;
          return await this.executeCodeAnalysis(executionId);
        case SecurityTestType.CONFIGURATION_REVIEW:
          /* istanbul ignore next */
          cov_2iypd10nex().b[24][5]++;
          cov_2iypd10nex().s[115]++;
          return await this.executeConfigurationReview(executionId);
        case SecurityTestType.NETWORK_SECURITY:
          /* istanbul ignore next */
          cov_2iypd10nex().b[24][6]++;
          cov_2iypd10nex().s[116]++;
          return await this.executeNetworkSecurityTest(executionId);
        case SecurityTestType.THREAT_MODELING:
          /* istanbul ignore next */
          cov_2iypd10nex().b[24][7]++;
          cov_2iypd10nex().s[117]++;
          return await this.executeThreatModeling(executionId);
        default:
          /* istanbul ignore next */
          cov_2iypd10nex().b[24][8]++;
          cov_2iypd10nex().s[118]++;
          throw new Error(`Unknown security test type: ${testType}`);
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_2iypd10nex().s[119]++;
      return {
        testType,
        testId: `error_${Date.now()}`,
        status: 'ERROR',
        executionTime: Date.now() - startTime,
        findings: [],
        riskScore: 0,
        details: {
          error: error instanceof Error ?
          /* istanbul ignore next */
          (cov_2iypd10nex().b[25][0]++, error.message) :
          /* istanbul ignore next */
          (cov_2iypd10nex().b[25][1]++, String(error))
        }
      };
    }
  }
  /**
   * Execute penetration testing
   */
  async executePenetrationTest(executionId) {
    /* istanbul ignore next */
    cov_2iypd10nex().f[18]++;
    const startTime =
    /* istanbul ignore next */
    (cov_2iypd10nex().s[120]++, Date.now());
    const report =
    /* istanbul ignore next */
    (cov_2iypd10nex().s[121]++, await this.penetrationTesting.executeSecurityTestSuite());
    /* istanbul ignore next */
    cov_2iypd10nex().s[122]++;
    return {
      testType: SecurityTestType.PENETRATION_TESTING,
      testId: report.scanId,
      status: report.criticalCount > 0 ?
      /* istanbul ignore next */
      (cov_2iypd10nex().b[26][0]++, 'FAIL') :
      /* istanbul ignore next */
      (cov_2iypd10nex().b[26][1]++, report.highCount > 0 ?
      /* istanbul ignore next */
      (cov_2iypd10nex().b[27][0]++, 'WARNING') :
      /* istanbul ignore next */
      (cov_2iypd10nex().b[27][1]++, 'PASS')),
      executionTime: Date.now() - startTime,
      findings: report.vulnerabilities,
      riskScore: this.calculateRiskScore(report.criticalCount, report.highCount, report.mediumCount, report.lowCount),
      details: report
    };
  }
  /**
   * Execute vulnerability scanning
   */
  async executeVulnerabilityScanning(executionId) {
    /* istanbul ignore next */
    cov_2iypd10nex().f[19]++;
    const startTime =
    /* istanbul ignore next */
    (cov_2iypd10nex().s[123]++, Date.now());
    const scanner =
    /* istanbul ignore next */
    (cov_2iypd10nex().s[124]++, await this.vulnerabilityScanner.executeComprehensiveVulnerabilityScan());
    /* istanbul ignore next */
    cov_2iypd10nex().s[125]++;
    return {
      testType: SecurityTestType.VULNERABILITY_SCANNING,
      testId: scanner.scanId,
      status: scanner.summary.criticalCount > 0 ?
      /* istanbul ignore next */
      (cov_2iypd10nex().b[28][0]++, 'FAIL') :
      /* istanbul ignore next */
      (cov_2iypd10nex().b[28][1]++, scanner.summary.highCount > 0 ?
      /* istanbul ignore next */
      (cov_2iypd10nex().b[29][0]++, 'WARNING') :
      /* istanbul ignore next */
      (cov_2iypd10nex().b[29][1]++, 'PASS')),
      executionTime: Date.now() - startTime,
      findings: scanner.findings,
      riskScore: scanner.summary.riskScore,
      details: scanner
    };
  }
  /**
   * Execute compliance testing
   */
  async executeComplianceTesting(executionId) {
    /* istanbul ignore next */
    cov_2iypd10nex().f[20]++;
    const startTime =
    /* istanbul ignore next */
    (cov_2iypd10nex().s[126]++, Date.now());
    // Test all compliance standards
    const standards =
    /* istanbul ignore next */
    (cov_2iypd10nex().s[127]++, ['OWASP_TOP_10', 'ISO_27001', 'SOC_2', 'CRYPTO_TRADING_SECURITY']);
    const reports =
    /* istanbul ignore next */
    (cov_2iypd10nex().s[128]++, await Promise.all(standards.map(standard => {
      /* istanbul ignore next */
      cov_2iypd10nex().f[21]++;
      cov_2iypd10nex().s[129]++;
      return this.complianceTesting.executeComplianceTest(standard);
    })));
    const averageScore =
    /* istanbul ignore next */
    (cov_2iypd10nex().s[130]++, reports.reduce((sum, report) => {
      /* istanbul ignore next */
      cov_2iypd10nex().f[22]++;
      cov_2iypd10nex().s[131]++;
      return sum + report.overallScore;
    }, 0) / reports.length);
    const failedReports =
    /* istanbul ignore next */
    (cov_2iypd10nex().s[132]++, reports.filter(report => {
      /* istanbul ignore next */
      cov_2iypd10nex().f[23]++;
      cov_2iypd10nex().s[133]++;
      return report.status === 'NON_COMPLIANT';
    }).length);
    /* istanbul ignore next */
    cov_2iypd10nex().s[134]++;
    return {
      testType: SecurityTestType.COMPLIANCE_TESTING,
      testId: `compliance_${Date.now()}`,
      status: failedReports > 0 ?
      /* istanbul ignore next */
      (cov_2iypd10nex().b[30][0]++, 'FAIL') :
      /* istanbul ignore next */
      (cov_2iypd10nex().b[30][1]++, averageScore < 80 ?
      /* istanbul ignore next */
      (cov_2iypd10nex().b[31][0]++, 'WARNING') :
      /* istanbul ignore next */
      (cov_2iypd10nex().b[31][1]++, 'PASS')),
      executionTime: Date.now() - startTime,
      findings: reports.flatMap(report => {
        /* istanbul ignore next */
        cov_2iypd10nex().f[24]++;
        cov_2iypd10nex().s[135]++;
        return report.gapAnalysis;
      }),
      riskScore: Math.max(0, 100 - averageScore),
      details: {
        reports,
        averageScore
      }
    };
  }
  /**
   * Execute dependency audit
   */
  async executeDependencyAudit(executionId) {
    /* istanbul ignore next */
    cov_2iypd10nex().f[25]++;
    const startTime =
    /* istanbul ignore next */
    (cov_2iypd10nex().s[136]++, Date.now());
    // This would integrate with npm audit or similar tools
    // For now, we'll simulate the audit
    const findings =
    /* istanbul ignore next */
    (cov_2iypd10nex().s[137]++, []);
    const riskScore =
    /* istanbul ignore next */
    (cov_2iypd10nex().s[138]++, Math.floor(Math.random() * 30)); // Simulate low to medium risk
    /* istanbul ignore next */
    cov_2iypd10nex().s[139]++;
    return {
      testType: SecurityTestType.DEPENDENCY_AUDIT,
      testId: `dep_audit_${Date.now()}`,
      status: riskScore > 20 ?
      /* istanbul ignore next */
      (cov_2iypd10nex().b[32][0]++, 'WARNING') :
      /* istanbul ignore next */
      (cov_2iypd10nex().b[32][1]++, 'PASS'),
      executionTime: Date.now() - startTime,
      findings,
      riskScore,
      details: {
        auditResults: 'Dependency audit completed'
      }
    };
  }
  /**
   * Execute code analysis
   */
  async executeCodeAnalysis(executionId) {
    /* istanbul ignore next */
    cov_2iypd10nex().f[26]++;
    const startTime =
    /* istanbul ignore next */
    (cov_2iypd10nex().s[140]++, Date.now());
    // This would integrate with static analysis tools
    // For now, we'll simulate the analysis
    const findings =
    /* istanbul ignore next */
    (cov_2iypd10nex().s[141]++, []);
    const riskScore =
    /* istanbul ignore next */
    (cov_2iypd10nex().s[142]++, Math.floor(Math.random() * 25)); // Simulate low risk
    /* istanbul ignore next */
    cov_2iypd10nex().s[143]++;
    return {
      testType: SecurityTestType.CODE_ANALYSIS,
      testId: `code_analysis_${Date.now()}`,
      status: riskScore > 15 ?
      /* istanbul ignore next */
      (cov_2iypd10nex().b[33][0]++, 'WARNING') :
      /* istanbul ignore next */
      (cov_2iypd10nex().b[33][1]++, 'PASS'),
      executionTime: Date.now() - startTime,
      findings,
      riskScore,
      details: {
        analysisResults: 'Code analysis completed'
      }
    };
  }
  /**
   * Execute configuration review
   */
  async executeConfigurationReview(executionId) {
    /* istanbul ignore next */
    cov_2iypd10nex().f[27]++;
    const startTime =
    /* istanbul ignore next */
    (cov_2iypd10nex().s[144]++, Date.now());
    // This would review system and application configurations
    const findings =
    /* istanbul ignore next */
    (cov_2iypd10nex().s[145]++, []);
    const riskScore =
    /* istanbul ignore next */
    (cov_2iypd10nex().s[146]++, Math.floor(Math.random() * 20)); // Simulate low risk
    /* istanbul ignore next */
    cov_2iypd10nex().s[147]++;
    return {
      testType: SecurityTestType.CONFIGURATION_REVIEW,
      testId: `config_review_${Date.now()}`,
      status: riskScore > 10 ?
      /* istanbul ignore next */
      (cov_2iypd10nex().b[34][0]++, 'WARNING') :
      /* istanbul ignore next */
      (cov_2iypd10nex().b[34][1]++, 'PASS'),
      executionTime: Date.now() - startTime,
      findings,
      riskScore,
      details: {
        reviewResults: 'Configuration review completed'
      }
    };
  }
  /**
   * Execute network security test
   */
  async executeNetworkSecurityTest(executionId) {
    /* istanbul ignore next */
    cov_2iypd10nex().f[28]++;
    const startTime =
    /* istanbul ignore next */
    (cov_2iypd10nex().s[148]++, Date.now());
    // This would test network security configurations
    const findings =
    /* istanbul ignore next */
    (cov_2iypd10nex().s[149]++, []);
    const riskScore =
    /* istanbul ignore next */
    (cov_2iypd10nex().s[150]++, Math.floor(Math.random() * 35)); // Simulate low to medium risk
    /* istanbul ignore next */
    cov_2iypd10nex().s[151]++;
    return {
      testType: SecurityTestType.NETWORK_SECURITY,
      testId: `network_test_${Date.now()}`,
      status: riskScore > 25 ?
      /* istanbul ignore next */
      (cov_2iypd10nex().b[35][0]++, 'WARNING') :
      /* istanbul ignore next */
      (cov_2iypd10nex().b[35][1]++, 'PASS'),
      executionTime: Date.now() - startTime,
      findings,
      riskScore,
      details: {
        networkResults: 'Network security test completed'
      }
    };
  }
  /**
   * Execute threat modeling
   */
  async executeThreatModeling(executionId) {
    /* istanbul ignore next */
    cov_2iypd10nex().f[29]++;
    const startTime =
    /* istanbul ignore next */
    (cov_2iypd10nex().s[152]++, Date.now());
    // This would perform threat modeling analysis
    const findings =
    /* istanbul ignore next */
    (cov_2iypd10nex().s[153]++, []);
    const riskScore =
    /* istanbul ignore next */
    (cov_2iypd10nex().s[154]++, Math.floor(Math.random() * 40)); // Simulate medium risk
    /* istanbul ignore next */
    cov_2iypd10nex().s[155]++;
    return {
      testType: SecurityTestType.THREAT_MODELING,
      testId: `threat_model_${Date.now()}`,
      status: riskScore > 30 ?
      /* istanbul ignore next */
      (cov_2iypd10nex().b[36][0]++, 'WARNING') :
      /* istanbul ignore next */
      (cov_2iypd10nex().b[36][1]++, 'PASS'),
      executionTime: Date.now() - startTime,
      findings,
      riskScore,
      details: {
        threatResults: 'Threat modeling completed'
      }
    };
  }
  /**
   * Calculate overall scores and findings
   */
  calculateOverallScores(execution) {
    /* istanbul ignore next */
    cov_2iypd10nex().f[30]++;
    const testResults =
    /* istanbul ignore next */
    (cov_2iypd10nex().s[156]++, execution.testResults);
    // Calculate overall risk score (weighted average)
    const totalRiskScore =
    /* istanbul ignore next */
    (cov_2iypd10nex().s[157]++, testResults.reduce((sum, result) => {
      /* istanbul ignore next */
      cov_2iypd10nex().f[31]++;
      cov_2iypd10nex().s[158]++;
      return sum + result.riskScore;
    }, 0));
    /* istanbul ignore next */
    cov_2iypd10nex().s[159]++;
    execution.overallRiskScore = testResults.length > 0 ?
    /* istanbul ignore next */
    (cov_2iypd10nex().b[37][0]++, totalRiskScore / testResults.length) :
    /* istanbul ignore next */
    (cov_2iypd10nex().b[37][1]++, 0);
    // Calculate compliance score (inverse of risk score)
    /* istanbul ignore next */
    cov_2iypd10nex().s[160]++;
    execution.complianceScore = Math.max(0, 100 - execution.overallRiskScore);
    // Count findings by severity
    const allFindings =
    /* istanbul ignore next */
    (cov_2iypd10nex().s[161]++, testResults.flatMap(result => {
      /* istanbul ignore next */
      cov_2iypd10nex().f[32]++;
      cov_2iypd10nex().s[162]++;
      return result.findings;
    }));
    /* istanbul ignore next */
    cov_2iypd10nex().s[163]++;
    execution.criticalFindings = allFindings.filter(f => {
      /* istanbul ignore next */
      cov_2iypd10nex().f[33]++;
      cov_2iypd10nex().s[164]++;
      return f.severity === 'CRITICAL';
    }).length;
    /* istanbul ignore next */
    cov_2iypd10nex().s[165]++;
    execution.highFindings = allFindings.filter(f => {
      /* istanbul ignore next */
      cov_2iypd10nex().f[34]++;
      cov_2iypd10nex().s[166]++;
      return f.severity === 'HIGH';
    }).length;
    /* istanbul ignore next */
    cov_2iypd10nex().s[167]++;
    execution.mediumFindings = allFindings.filter(f => {
      /* istanbul ignore next */
      cov_2iypd10nex().f[35]++;
      cov_2iypd10nex().s[168]++;
      return f.severity === 'MEDIUM';
    }).length;
    /* istanbul ignore next */
    cov_2iypd10nex().s[169]++;
    execution.lowFindings = allFindings.filter(f => {
      /* istanbul ignore next */
      cov_2iypd10nex().f[36]++;
      cov_2iypd10nex().s[170]++;
      return f.severity === 'LOW';
    }).length;
  }
  /**
   * Generate recommendations based on test results
   */
  async generateRecommendations(execution) {
    /* istanbul ignore next */
    cov_2iypd10nex().f[37]++;
    const recommendations =
    /* istanbul ignore next */
    (cov_2iypd10nex().s[171]++, new Set());
    // Add recommendations based on test results
    /* istanbul ignore next */
    cov_2iypd10nex().s[172]++;
    execution.testResults.forEach(result => {
      /* istanbul ignore next */
      cov_2iypd10nex().f[38]++;
      cov_2iypd10nex().s[173]++;
      if (
      /* istanbul ignore next */
      (cov_2iypd10nex().b[39][0]++, result.status === 'FAIL') ||
      /* istanbul ignore next */
      (cov_2iypd10nex().b[39][1]++, result.status === 'WARNING')) {
        /* istanbul ignore next */
        cov_2iypd10nex().b[38][0]++;
        cov_2iypd10nex().s[174]++;
        switch (result.testType) {
          case SecurityTestType.PENETRATION_TESTING:
            /* istanbul ignore next */
            cov_2iypd10nex().b[40][0]++;
            cov_2iypd10nex().s[175]++;
            recommendations.add('Address critical penetration testing findings immediately');
            /* istanbul ignore next */
            cov_2iypd10nex().s[176]++;
            recommendations.add('Implement additional security controls for high-risk areas');
            /* istanbul ignore next */
            cov_2iypd10nex().s[177]++;
            break;
          case SecurityTestType.VULNERABILITY_SCANNING:
            /* istanbul ignore next */
            cov_2iypd10nex().b[40][1]++;
            cov_2iypd10nex().s[178]++;
            recommendations.add('Update vulnerable dependencies to latest secure versions');
            /* istanbul ignore next */
            cov_2iypd10nex().s[179]++;
            recommendations.add('Implement automated vulnerability scanning in CI/CD pipeline');
            /* istanbul ignore next */
            cov_2iypd10nex().s[180]++;
            break;
          case SecurityTestType.COMPLIANCE_TESTING:
            /* istanbul ignore next */
            cov_2iypd10nex().b[40][2]++;
            cov_2iypd10nex().s[181]++;
            recommendations.add('Address compliance gaps to meet regulatory requirements');
            /* istanbul ignore next */
            cov_2iypd10nex().s[182]++;
            recommendations.add('Implement missing security controls identified in compliance testing');
            /* istanbul ignore next */
            cov_2iypd10nex().s[183]++;
            break;
          case SecurityTestType.DEPENDENCY_AUDIT:
            /* istanbul ignore next */
            cov_2iypd10nex().b[40][3]++;
            cov_2iypd10nex().s[184]++;
            recommendations.add('Review and update project dependencies regularly');
            /* istanbul ignore next */
            cov_2iypd10nex().s[185]++;
            recommendations.add('Implement dependency vulnerability monitoring');
            /* istanbul ignore next */
            cov_2iypd10nex().s[186]++;
            break;
          case SecurityTestType.CODE_ANALYSIS:
            /* istanbul ignore next */
            cov_2iypd10nex().b[40][4]++;
            cov_2iypd10nex().s[187]++;
            recommendations.add('Fix code security issues identified in static analysis');
            /* istanbul ignore next */
            cov_2iypd10nex().s[188]++;
            recommendations.add('Implement secure coding practices and training');
            /* istanbul ignore next */
            cov_2iypd10nex().s[189]++;
            break;
          case SecurityTestType.CONFIGURATION_REVIEW:
            /* istanbul ignore next */
            cov_2iypd10nex().b[40][5]++;
            cov_2iypd10nex().s[190]++;
            recommendations.add('Harden system and application configurations');
            /* istanbul ignore next */
            cov_2iypd10nex().s[191]++;
            recommendations.add('Implement configuration management and monitoring');
            /* istanbul ignore next */
            cov_2iypd10nex().s[192]++;
            break;
          case SecurityTestType.NETWORK_SECURITY:
            /* istanbul ignore next */
            cov_2iypd10nex().b[40][6]++;
            cov_2iypd10nex().s[193]++;
            recommendations.add('Strengthen network security controls and monitoring');
            /* istanbul ignore next */
            cov_2iypd10nex().s[194]++;
            recommendations.add('Implement network segmentation and access controls');
            /* istanbul ignore next */
            cov_2iypd10nex().s[195]++;
            break;
          case SecurityTestType.THREAT_MODELING:
            /* istanbul ignore next */
            cov_2iypd10nex().b[40][7]++;
            cov_2iypd10nex().s[196]++;
            recommendations.add('Address identified threats with appropriate countermeasures');
            /* istanbul ignore next */
            cov_2iypd10nex().s[197]++;
            recommendations.add('Update threat model based on new findings');
            /* istanbul ignore next */
            cov_2iypd10nex().s[198]++;
            break;
        }
      } else
      /* istanbul ignore next */
      {
        cov_2iypd10nex().b[38][1]++;
      }
    });
    // Add general recommendations based on overall risk score
    /* istanbul ignore next */
    cov_2iypd10nex().s[199]++;
    if (execution.overallRiskScore > 70) {
      /* istanbul ignore next */
      cov_2iypd10nex().b[41][0]++;
      cov_2iypd10nex().s[200]++;
      recommendations.add('Immediate security review and remediation required');
      /* istanbul ignore next */
      cov_2iypd10nex().s[201]++;
      recommendations.add('Consider engaging external security experts');
    } else {
      /* istanbul ignore next */
      cov_2iypd10nex().b[41][1]++;
      cov_2iypd10nex().s[202]++;
      if (execution.overallRiskScore > 40) {
        /* istanbul ignore next */
        cov_2iypd10nex().b[42][0]++;
        cov_2iypd10nex().s[203]++;
        recommendations.add('Prioritize security improvements in next development cycle');
        /* istanbul ignore next */
        cov_2iypd10nex().s[204]++;
        recommendations.add('Increase security testing frequency');
      } else
      /* istanbul ignore next */
      {
        cov_2iypd10nex().b[42][1]++;
      }
    }
    /* istanbul ignore next */
    cov_2iypd10nex().s[205]++;
    execution.recommendations = Array.from(recommendations);
  }
  /**
   * Generate remediation plan
   */
  async generateRemediationPlan(execution) {
    /* istanbul ignore next */
    cov_2iypd10nex().f[39]++;
    const tasks =
    /* istanbul ignore next */
    (cov_2iypd10nex().s[206]++, []);
    // Generate tasks based on critical and high findings
    const criticalTasks =
    /* istanbul ignore next */
    (cov_2iypd10nex().s[207]++, this.generateCriticalRemediationTasks(execution));
    const highTasks =
    /* istanbul ignore next */
    (cov_2iypd10nex().s[208]++, this.generateHighRemediationTasks(execution));
    const mediumTasks =
    /* istanbul ignore next */
    (cov_2iypd10nex().s[209]++, this.generateMediumRemediationTasks(execution));
    /* istanbul ignore next */
    cov_2iypd10nex().s[210]++;
    tasks.push(...criticalTasks, ...highTasks, ...mediumTasks);
    // Calculate overall plan metrics
    const totalEffort =
    /* istanbul ignore next */
    (cov_2iypd10nex().s[211]++, tasks.reduce((sum, task) => {
      /* istanbul ignore next */
      cov_2iypd10nex().f[40]++;
      const effortHours =
      /* istanbul ignore next */
      (cov_2iypd10nex().s[212]++, task.effort === 'HIGH' ?
      /* istanbul ignore next */
      (cov_2iypd10nex().b[43][0]++, 8) :
      /* istanbul ignore next */
      (cov_2iypd10nex().b[43][1]++, task.effort === 'MEDIUM' ?
      /* istanbul ignore next */
      (cov_2iypd10nex().b[44][0]++, 4) :
      /* istanbul ignore next */
      (cov_2iypd10nex().b[44][1]++, 2)));
      /* istanbul ignore next */
      cov_2iypd10nex().s[213]++;
      return sum + effortHours;
    }, 0));
    const criticalTaskCount =
    /* istanbul ignore next */
    (cov_2iypd10nex().s[214]++, tasks.filter(t => {
      /* istanbul ignore next */
      cov_2iypd10nex().f[41]++;
      cov_2iypd10nex().s[215]++;
      return t.priority === 'CRITICAL';
    }).length);
    const highTaskCount =
    /* istanbul ignore next */
    (cov_2iypd10nex().s[216]++, tasks.filter(t => {
      /* istanbul ignore next */
      cov_2iypd10nex().f[42]++;
      cov_2iypd10nex().s[217]++;
      return t.priority === 'HIGH';
    }).length);
    /* istanbul ignore next */
    cov_2iypd10nex().s[218]++;
    execution.remediationPlan = {
      planId: `plan_${execution.executionId}`,
      priority: criticalTaskCount > 0 ?
      /* istanbul ignore next */
      (cov_2iypd10nex().b[45][0]++, 'IMMEDIATE') :
      /* istanbul ignore next */
      (cov_2iypd10nex().b[45][1]++, highTaskCount > 0 ?
      /* istanbul ignore next */
      (cov_2iypd10nex().b[46][0]++, 'HIGH') :
      /* istanbul ignore next */
      (cov_2iypd10nex().b[46][1]++, 'MEDIUM')),
      estimatedEffort: `${totalEffort} hours`,
      estimatedCost: `$${totalEffort * 150}`,
      // Assuming $150/hour
      timeline: this.calculateTimeline(totalEffort),
      tasks,
      dependencies: this.identifyDependencies(tasks),
      riskReduction: this.calculateRiskReduction(execution)
    };
  }
  /**
   * Generate critical remediation tasks
   */
  generateCriticalRemediationTasks(execution) {
    /* istanbul ignore next */
    cov_2iypd10nex().f[43]++;
    const tasks =
    /* istanbul ignore next */
    (cov_2iypd10nex().s[219]++, []);
    /* istanbul ignore next */
    cov_2iypd10nex().s[220]++;
    if (execution.criticalFindings > 0) {
      /* istanbul ignore next */
      cov_2iypd10nex().b[47][0]++;
      cov_2iypd10nex().s[221]++;
      tasks.push({
        taskId: `critical_${Date.now()}`,
        title: 'Address Critical Security Vulnerabilities',
        description: `Fix ${execution.criticalFindings} critical security vulnerabilities`,
        priority: 'CRITICAL',
        effort: 'HIGH',
        status: 'PENDING',
        dependencies: [],
        steps: ['Review all critical findings', 'Prioritize by exploitability and impact', 'Implement fixes for each vulnerability', 'Test fixes in staging environment', 'Deploy fixes to production', 'Verify fixes with security testing']
      });
    } else
    /* istanbul ignore next */
    {
      cov_2iypd10nex().b[47][1]++;
    }
    cov_2iypd10nex().s[222]++;
    return tasks;
  }
  /**
   * Generate high priority remediation tasks
   */
  generateHighRemediationTasks(execution) {
    /* istanbul ignore next */
    cov_2iypd10nex().f[44]++;
    const tasks =
    /* istanbul ignore next */
    (cov_2iypd10nex().s[223]++, []);
    /* istanbul ignore next */
    cov_2iypd10nex().s[224]++;
    if (execution.highFindings > 0) {
      /* istanbul ignore next */
      cov_2iypd10nex().b[48][0]++;
      cov_2iypd10nex().s[225]++;
      tasks.push({
        taskId: `high_${Date.now()}`,
        title: 'Address High Priority Security Issues',
        description: `Fix ${execution.highFindings} high priority security issues`,
        priority: 'HIGH',
        effort: 'MEDIUM',
        status: 'PENDING',
        dependencies: [],
        steps: ['Review high priority findings', 'Plan remediation approach', 'Implement security improvements', 'Test changes thoroughly', 'Deploy to production']
      });
    } else
    /* istanbul ignore next */
    {
      cov_2iypd10nex().b[48][1]++;
    }
    cov_2iypd10nex().s[226]++;
    return tasks;
  }
  /**
   * Generate medium priority remediation tasks
   */
  generateMediumRemediationTasks(execution) {
    /* istanbul ignore next */
    cov_2iypd10nex().f[45]++;
    const tasks =
    /* istanbul ignore next */
    (cov_2iypd10nex().s[227]++, []);
    /* istanbul ignore next */
    cov_2iypd10nex().s[228]++;
    if (execution.mediumFindings > 0) {
      /* istanbul ignore next */
      cov_2iypd10nex().b[49][0]++;
      cov_2iypd10nex().s[229]++;
      tasks.push({
        taskId: `medium_${Date.now()}`,
        title: 'Address Medium Priority Security Improvements',
        description: `Implement ${execution.mediumFindings} medium priority security improvements`,
        priority: 'MEDIUM',
        effort: 'LOW',
        status: 'PENDING',
        dependencies: [],
        steps: ['Review medium priority findings', 'Schedule improvements in next sprint', 'Implement security enhancements', 'Validate improvements']
      });
    } else
    /* istanbul ignore next */
    {
      cov_2iypd10nex().b[49][1]++;
    }
    cov_2iypd10nex().s[230]++;
    return tasks;
  }
  /**
   * Helper methods
   */
  calculateRiskScore(critical, high, medium, low) {
    /* istanbul ignore next */
    cov_2iypd10nex().f[46]++;
    cov_2iypd10nex().s[231]++;
    return Math.min(100, critical * 25 + high * 10 + medium * 5 + low * 1);
  }
  calculateTimeline(totalEffortHours) {
    /* istanbul ignore next */
    cov_2iypd10nex().f[47]++;
    const days =
    /* istanbul ignore next */
    (cov_2iypd10nex().s[232]++, Math.ceil(totalEffortHours / 8));
    /* istanbul ignore next */
    cov_2iypd10nex().s[233]++;
    if (days <= 1) {
      /* istanbul ignore next */
      cov_2iypd10nex().b[50][0]++;
      cov_2iypd10nex().s[234]++;
      return '1 day';
    } else
    /* istanbul ignore next */
    {
      cov_2iypd10nex().b[50][1]++;
    }
    cov_2iypd10nex().s[235]++;
    if (days <= 7) {
      /* istanbul ignore next */
      cov_2iypd10nex().b[51][0]++;
      cov_2iypd10nex().s[236]++;
      return `${days} days`;
    } else
    /* istanbul ignore next */
    {
      cov_2iypd10nex().b[51][1]++;
    }
    cov_2iypd10nex().s[237]++;
    if (days <= 30) {
      /* istanbul ignore next */
      cov_2iypd10nex().b[52][0]++;
      cov_2iypd10nex().s[238]++;
      return `${Math.ceil(days / 7)} weeks`;
    } else
    /* istanbul ignore next */
    {
      cov_2iypd10nex().b[52][1]++;
    }
    cov_2iypd10nex().s[239]++;
    return `${Math.ceil(days / 30)} months`;
  }
  identifyDependencies(tasks) {
    /* istanbul ignore next */
    cov_2iypd10nex().f[48]++;
    cov_2iypd10nex().s[240]++;
    // Simple dependency identification - in practice, this would be more sophisticated
    return tasks.filter(t => {
      /* istanbul ignore next */
      cov_2iypd10nex().f[49]++;
      cov_2iypd10nex().s[241]++;
      return t.priority === 'CRITICAL';
    }).map(t => {
      /* istanbul ignore next */
      cov_2iypd10nex().f[50]++;
      cov_2iypd10nex().s[242]++;
      return t.taskId;
    });
  }
  calculateRiskReduction(execution) {
    /* istanbul ignore next */
    cov_2iypd10nex().f[51]++;
    // Estimate risk reduction based on findings severity
    const maxReduction =
    /* istanbul ignore next */
    (cov_2iypd10nex().s[243]++, execution.criticalFindings * 25 + execution.highFindings * 10 + execution.mediumFindings * 5 + execution.lowFindings * 1);
    /* istanbul ignore next */
    cov_2iypd10nex().s[244]++;
    return Math.min(100, maxReduction);
  }
  async processSecurityTestResults(execution) {
    /* istanbul ignore next */
    cov_2iypd10nex().f[52]++;
    cov_2iypd10nex().s[245]++;
    // Send alerts for critical findings
    if (execution.criticalFindings > 0) {
      /* istanbul ignore next */
      cov_2iypd10nex().b[53][0]++;
      cov_2iypd10nex().s[246]++;
      await this.notifications.sendCriticalAlert({
        title: '🚨 Critical Security Vulnerabilities Detected',
        message: `Security testing found ${execution.criticalFindings} critical vulnerabilities requiring immediate attention.`,
        details: {
          executionId: execution.executionId,
          criticalFindings: execution.criticalFindings,
          overallRiskScore: execution.overallRiskScore
        },
        priority: 'CRITICAL'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2iypd10nex().b[53][1]++;
    }
    // Create incident for high-risk findings
    cov_2iypd10nex().s[247]++;
    if (execution.overallRiskScore > 70) {
      /* istanbul ignore next */
      cov_2iypd10nex().b[54][0]++;
      cov_2iypd10nex().s[248]++;
      await this.incidentResponse.createIncident({
        type: 'HIGH_RISK_SECURITY_FINDINGS',
        severity: 'HIGH',
        description: `Security testing revealed high-risk findings (risk score: ${execution.overallRiskScore})`,
        source: 'Security Test Orchestrator',
        evidence: execution.testResults
      });
    } else
    /* istanbul ignore next */
    {
      cov_2iypd10nex().b[54][1]++;
    }
  }
  async sendFailureNotification(execution, error) {
    /* istanbul ignore next */
    cov_2iypd10nex().f[53]++;
    cov_2iypd10nex().s[249]++;
    await this.notifications.sendAlert({
      title: '❌ Security Test Suite Failed',
      message: `Security test suite ${execution.suiteId} failed: ${error.message}`,
      details: {
        executionId: execution.executionId,
        suiteId: execution.suiteId,
        error: error.message
      },
      priority: 'HIGH'
    });
  }
  updateSecurityTrends(execution) {
    /* istanbul ignore next */
    cov_2iypd10nex().f[54]++;
    const trendData =
    /* istanbul ignore next */
    (cov_2iypd10nex().s[250]++, {
      date: new Date(),
      securityScore: execution.complianceScore,
      vulnerabilityCount: execution.criticalFindings + execution.highFindings + execution.mediumFindings + execution.lowFindings,
      complianceScore: execution.complianceScore,
      riskScore: execution.overallRiskScore
    });
    /* istanbul ignore next */
    cov_2iypd10nex().s[251]++;
    this.securityTrends.push(trendData);
    // Keep only last 30 days of trend data
    const thirtyDaysAgo =
    /* istanbul ignore next */
    (cov_2iypd10nex().s[252]++, new Date());
    /* istanbul ignore next */
    cov_2iypd10nex().s[253]++;
    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
    /* istanbul ignore next */
    cov_2iypd10nex().s[254]++;
    this.securityTrends = this.securityTrends.filter(trend => {
      /* istanbul ignore next */
      cov_2iypd10nex().f[55]++;
      cov_2iypd10nex().s[255]++;
      return trend.date >= thirtyDaysAgo;
    });
  }
  /**
   * Public API methods
   */
  /**
   * Get security dashboard data
   */
  getSecurityDashboard() {
    /* istanbul ignore next */
    cov_2iypd10nex().f[56]++;
    const recentExecutions =
    /* istanbul ignore next */
    (cov_2iypd10nex().s[256]++, this.executionHistory.slice(-10));
    const latestExecution =
    /* istanbul ignore next */
    (cov_2iypd10nex().s[257]++, recentExecutions[recentExecutions.length - 1]);
    /* istanbul ignore next */
    cov_2iypd10nex().s[258]++;
    return {
      lastUpdated: new Date(),
      overallSecurityScore:
      /* istanbul ignore next */
      (cov_2iypd10nex().b[55][0]++, latestExecution?.complianceScore) ||
      /* istanbul ignore next */
      (cov_2iypd10nex().b[55][1]++, 0),
      riskLevel: this.determineRiskLevel(
      /* istanbul ignore next */
      (cov_2iypd10nex().b[56][0]++, latestExecution?.overallRiskScore) ||
      /* istanbul ignore next */
      (cov_2iypd10nex().b[56][1]++, 0)),
      activeThreats: this.activeExecutions.size,
      vulnerabilities: {
        critical:
        /* istanbul ignore next */
        (cov_2iypd10nex().b[57][0]++, latestExecution?.criticalFindings) ||
        /* istanbul ignore next */
        (cov_2iypd10nex().b[57][1]++, 0),
        high:
        /* istanbul ignore next */
        (cov_2iypd10nex().b[58][0]++, latestExecution?.highFindings) ||
        /* istanbul ignore next */
        (cov_2iypd10nex().b[58][1]++, 0),
        medium:
        /* istanbul ignore next */
        (cov_2iypd10nex().b[59][0]++, latestExecution?.mediumFindings) ||
        /* istanbul ignore next */
        (cov_2iypd10nex().b[59][1]++, 0),
        low:
        /* istanbul ignore next */
        (cov_2iypd10nex().b[60][0]++, latestExecution?.lowFindings) ||
        /* istanbul ignore next */
        (cov_2iypd10nex().b[60][1]++, 0)
      },
      complianceStatus: {
        owasp: 85,
        // These would be calculated from actual compliance tests
        iso27001: 80,
        soc2: 75,
        cryptoSecurity: 90
      },
      recentExecutions,
      trendData: this.securityTrends
    };
  }
  determineRiskLevel(riskScore) {
    /* istanbul ignore next */
    cov_2iypd10nex().f[57]++;
    cov_2iypd10nex().s[259]++;
    if (riskScore >= 80) {
      /* istanbul ignore next */
      cov_2iypd10nex().b[61][0]++;
      cov_2iypd10nex().s[260]++;
      return 'CRITICAL';
    } else
    /* istanbul ignore next */
    {
      cov_2iypd10nex().b[61][1]++;
    }
    cov_2iypd10nex().s[261]++;
    if (riskScore >= 60) {
      /* istanbul ignore next */
      cov_2iypd10nex().b[62][0]++;
      cov_2iypd10nex().s[262]++;
      return 'HIGH';
    } else
    /* istanbul ignore next */
    {
      cov_2iypd10nex().b[62][1]++;
    }
    cov_2iypd10nex().s[263]++;
    if (riskScore >= 30) {
      /* istanbul ignore next */
      cov_2iypd10nex().b[63][0]++;
      cov_2iypd10nex().s[264]++;
      return 'MEDIUM';
    } else
    /* istanbul ignore next */
    {
      cov_2iypd10nex().b[63][1]++;
    }
    cov_2iypd10nex().s[265]++;
    return 'LOW';
  }
  /**
   * Get active executions
   */
  getActiveExecutions() {
    /* istanbul ignore next */
    cov_2iypd10nex().f[58]++;
    cov_2iypd10nex().s[266]++;
    return Array.from(this.activeExecutions.values());
  }
  /**
   * Get execution history
   */
  getExecutionHistory() {
    /* istanbul ignore next */
    cov_2iypd10nex().f[59]++;
    cov_2iypd10nex().s[267]++;
    return this.executionHistory;
  }
  /**
   * Cancel active execution
   */
  async cancelExecution(executionId) {
    /* istanbul ignore next */
    cov_2iypd10nex().f[60]++;
    const execution =
    /* istanbul ignore next */
    (cov_2iypd10nex().s[268]++, this.activeExecutions.get(executionId));
    /* istanbul ignore next */
    cov_2iypd10nex().s[269]++;
    if (
    /* istanbul ignore next */
    (cov_2iypd10nex().b[65][0]++, execution) &&
    /* istanbul ignore next */
    (cov_2iypd10nex().b[65][1]++, execution.status === 'RUNNING')) {
      /* istanbul ignore next */
      cov_2iypd10nex().b[64][0]++;
      cov_2iypd10nex().s[270]++;
      execution.status = 'CANCELLED';
      /* istanbul ignore next */
      cov_2iypd10nex().s[271]++;
      execution.endTime = new Date();
      /* istanbul ignore next */
      cov_2iypd10nex().s[272]++;
      this.activeExecutions.delete(executionId);
      /* istanbul ignore next */
      cov_2iypd10nex().s[273]++;
      this.executionHistory.push(execution);
      /* istanbul ignore next */
      cov_2iypd10nex().s[274]++;
      this.logger.info('Security test execution cancelled', {
        executionId
      });
      /* istanbul ignore next */
      cov_2iypd10nex().s[275]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_2iypd10nex().b[64][1]++;
    }
    cov_2iypd10nex().s[276]++;
    return false;
  }
  /**
   * Add custom test suite
   */
  addTestSuite(suite) {
    /* istanbul ignore next */
    cov_2iypd10nex().f[61]++;
    cov_2iypd10nex().s[277]++;
    this.testSuites.set(suite.suiteId, suite);
    /* istanbul ignore next */
    cov_2iypd10nex().s[278]++;
    this.logger.info('Custom security test suite added', {
      suiteId: suite.suiteId
    });
  }
  /**
   * Remove test suite
   */
  removeTestSuite(suiteId) {
    /* istanbul ignore next */
    cov_2iypd10nex().f[62]++;
    const removed =
    /* istanbul ignore next */
    (cov_2iypd10nex().s[279]++, this.testSuites.delete(suiteId));
    /* istanbul ignore next */
    cov_2iypd10nex().s[280]++;
    if (removed) {
      /* istanbul ignore next */
      cov_2iypd10nex().b[66][0]++;
      cov_2iypd10nex().s[281]++;
      this.logger.info('Security test suite removed', {
        suiteId
      });
    } else
    /* istanbul ignore next */
    {
      cov_2iypd10nex().b[66][1]++;
    }
    cov_2iypd10nex().s[282]++;
    return removed;
  }
  /**
   * Get available test suites
   */
  getTestSuites() {
    /* istanbul ignore next */
    cov_2iypd10nex().f[63]++;
    cov_2iypd10nex().s[283]++;
    return Array.from(this.testSuites.values());
  }
}
/* istanbul ignore next */
cov_2iypd10nex().s[284]++;
exports.SecurityTestOrchestrator = SecurityTestOrchestrator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,