{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\strategies\\__tests__\\harmonization.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\strategies\\__tests__\\harmonization.test.ts"],"sourcesContent":["/**\r\n * Strategy Harmonization Engine Tests\r\n * \r\n * Comprehensive tests for weighted signal scoring, conflict resolution,\r\n * composite signal strength calculation, and strategy confidence validation.\r\n * \r\n * Requirements: 4.8, 17.10 - Strategy harmonization testing and validation\r\n */\r\n\r\nimport { StrategyHarmonizationEngine } from '../harmonization';\r\nimport { MarketData, TradingSignal, HarmonizedSignal, StrategyConfig } from '../types';\r\n\r\ndescribe('StrategyHarmonizationEngine', () => {\r\n  let harmonizationEngine: StrategyHarmonizationEngine;\r\n  let mockMarketData: MarketData[];\r\n\r\n  beforeEach(() => {\r\n    harmonizationEngine = new StrategyHarmonizationEngine();\r\n    \r\n    // Create mock market data for testing\r\n    mockMarketData = [];\r\n    const basePrice = 50000;\r\n    const baseVolume = 1000000;\r\n    \r\n    for (let i = 0; i < 100; i++) {\r\n      const price = basePrice + (Math.sin(i * 0.1) * 1000) + (Math.random() * 200 - 100);\r\n      mockMarketData.push({\r\n        symbol: 'BTC/USDT',\r\n        timestamp: new Date(Date.now() - (100 - i) * 60000), // 1 minute intervals\r\n        open: price - 10,\r\n        high: price + 50,\r\n        low: price - 50,\r\n        close: price,\r\n        volume: baseVolume + (Math.random() * 500000)\r\n      });\r\n    }\r\n  });\r\n\r\n  describe('generateAllSignals', () => {\r\n    it('should generate signals from all enabled strategies', () => {\r\n      const signals = harmonizationEngine.generateAllSignals(mockMarketData);\r\n      \r\n      expect(signals).toBeDefined();\r\n      expect(Array.isArray(signals)).toBe(true);\r\n      \r\n      // Should have signals from multiple strategies\r\n      const strategyTypes = new Set(signals.map(s => s.indicators.join(',')));\r\n      expect(strategyTypes.size).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('should respect strategy configuration', () => {\r\n      const configs = {\r\n        movingAverage: { name: 'MA', enabled: false, weight: 0, parameters: {} },\r\n        rsi: { name: 'RSI', enabled: true, weight: 1, parameters: {} }\r\n      };\r\n\r\n      const signals = harmonizationEngine.generateAllSignals(mockMarketData, configs);\r\n      \r\n      // Should not have moving average signals when disabled\r\n      const maSignals = signals.filter(s => \r\n        s.indicators.some(i => i.includes('MA') || i.includes('EMA'))\r\n      );\r\n      expect(maSignals.length).toBe(0);\r\n    });\r\n\r\n    it('should handle empty market data gracefully', () => {\r\n      const signals = harmonizationEngine.generateAllSignals([]);\r\n      expect(signals).toEqual([]);\r\n    });\r\n\r\n    it('should handle insufficient market data', () => {\r\n      const limitedData = mockMarketData.slice(0, 5);\r\n      const signals = harmonizationEngine.generateAllSignals(limitedData);\r\n      \r\n      // Should still return an array, even if empty\r\n      expect(Array.isArray(signals)).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('harmonizeSignals', () => {\r\n    it('should create harmonized signal from multiple indicators', () => {\r\n      const harmonizedSignal = harmonizationEngine.harmonizeSignals(mockMarketData);\r\n      \r\n      expect(harmonizedSignal).toBeDefined();\r\n      if (harmonizedSignal) {\r\n        expect(harmonizedSignal.symbol).toBe('BTC/USDT');\r\n        expect(harmonizedSignal.overallSignal).toMatch(/^(BUY|SELL|HOLD)$/);\r\n        expect(harmonizedSignal.strength).toBeGreaterThanOrEqual(0);\r\n        expect(harmonizedSignal.strength).toBeLessThanOrEqual(100);\r\n        expect(harmonizedSignal.confidence).toBeGreaterThanOrEqual(0);\r\n        expect(harmonizedSignal.confidence).toBeLessThanOrEqual(100);\r\n        expect(Array.isArray(harmonizedSignal.indicators)).toBe(true);\r\n        expect(Array.isArray(harmonizedSignal.conflicts)).toBe(true);\r\n        expect(typeof harmonizedSignal.reasoning).toBe('string');\r\n      }\r\n    });\r\n\r\n    it('should apply custom weights correctly', () => {\r\n      const configs = {\r\n        rsi: { name: 'RSI', enabled: true, weight: 0.8, parameters: {} },\r\n        macd: { name: 'MACD', enabled: true, weight: 0.2, parameters: {} }\r\n      };\r\n\r\n      const harmonizedSignal = harmonizationEngine.harmonizeSignals(mockMarketData, configs);\r\n      \r\n      if (harmonizedSignal) {\r\n        // Weights should be normalized and applied\r\n        expect(harmonizedSignal.weights).toBeDefined();\r\n        expect(typeof harmonizedSignal.weights).toBe('object');\r\n      }\r\n    });\r\n\r\n    it('should detect signal conflicts', () => {\r\n      // Create mock signals with conflicts\r\n      const mockSignals: TradingSignal[] = [\r\n        {\r\n          id: '1',\r\n          symbol: 'BTC/USDT',\r\n          type: 'BUY',\r\n          strength: 80,\r\n          confidence: 75,\r\n          indicators: ['RSI'],\r\n          reasoning: 'RSI oversold',\r\n          riskReward: 2.0,\r\n          timestamp: new Date()\r\n        },\r\n        {\r\n          id: '2',\r\n          symbol: 'BTC/USDT',\r\n          type: 'SELL',\r\n          strength: 85,\r\n          confidence: 80,\r\n          indicators: ['MACD'],\r\n          reasoning: 'MACD bearish crossover',\r\n          riskReward: 1.5,\r\n          timestamp: new Date()\r\n        }\r\n      ];\r\n\r\n      // Mock the generateAllSignals method to return conflicting signals\r\n      jest.spyOn(harmonizationEngine, 'generateAllSignals').mockReturnValue(mockSignals);\r\n\r\n      const harmonizedSignal = harmonizationEngine.harmonizeSignals(mockMarketData);\r\n      \r\n      if (harmonizedSignal) {\r\n        expect(harmonizedSignal.conflicts.length).toBeGreaterThan(0);\r\n        expect(harmonizedSignal.reasoning).toContain('conflict');\r\n      }\r\n    });\r\n\r\n    it('should return null for empty signals', () => {\r\n      jest.spyOn(harmonizationEngine, 'generateAllSignals').mockReturnValue([]);\r\n      \r\n      const harmonizedSignal = harmonizationEngine.harmonizeSignals(mockMarketData);\r\n      expect(harmonizedSignal).toBeNull();\r\n    });\r\n\r\n    it('should prefer HOLD when signals are weak or conflicting', () => {\r\n      const weakSignals: TradingSignal[] = [\r\n        {\r\n          id: '1',\r\n          symbol: 'BTC/USDT',\r\n          type: 'BUY',\r\n          strength: 30,\r\n          confidence: 40,\r\n          indicators: ['RSI'],\r\n          reasoning: 'Weak buy signal',\r\n          riskReward: 1.2,\r\n          timestamp: new Date()\r\n        },\r\n        {\r\n          id: '2',\r\n          symbol: 'BTC/USDT',\r\n          type: 'SELL',\r\n          strength: 35,\r\n          confidence: 45,\r\n          indicators: ['MACD'],\r\n          reasoning: 'Weak sell signal',\r\n          riskReward: 1.1,\r\n          timestamp: new Date()\r\n        }\r\n      ];\r\n\r\n      jest.spyOn(harmonizationEngine, 'generateAllSignals').mockReturnValue(weakSignals);\r\n\r\n      const harmonizedSignal = harmonizationEngine.harmonizeSignals(mockMarketData);\r\n      \r\n      if (harmonizedSignal) {\r\n        expect(harmonizedSignal.overallSignal).toBe('HOLD');\r\n      }\r\n    });\r\n  });\r\n\r\n  describe('validateSignalHarmony', () => {\r\n    let mockHarmonizedSignal: HarmonizedSignal;\r\n\r\n    beforeEach(() => {\r\n      mockHarmonizedSignal = {\r\n        symbol: 'BTC/USDT',\r\n        timestamp: new Date(),\r\n        overallSignal: 'BUY',\r\n        strength: 75,\r\n        confidence: 80,\r\n        indicators: [\r\n          { name: 'RSI', value: 30, timestamp: new Date(), parameters: {} },\r\n          { name: 'MACD', value: 0.5, timestamp: new Date(), parameters: {} },\r\n          { name: 'EMA', value: 50000, timestamp: new Date(), parameters: {} }\r\n        ],\r\n        weights: { rsi: 0.4, macd: 0.3, movingAverage: 0.3 },\r\n        conflicts: [],\r\n        reasoning: 'Strong buy signal with good consensus'\r\n      };\r\n    });\r\n\r\n    it('should validate high-quality signals as valid', () => {\r\n      const validation = harmonizationEngine.validateSignalHarmony(mockHarmonizedSignal);\r\n      \r\n      expect(validation.isValid).toBe(true);\r\n      expect(validation.issues.length).toBe(0);\r\n      expect(validation.recommendations.length).toBe(0);\r\n    });\r\n\r\n    it('should detect low confidence signals', () => {\r\n      mockHarmonizedSignal.confidence = 45;\r\n      \r\n      const validation = harmonizationEngine.validateSignalHarmony(mockHarmonizedSignal);\r\n      \r\n      expect(validation.isValid).toBe(false);\r\n      expect(validation.issues).toContain(expect.stringContaining('Low confidence'));\r\n      expect(validation.recommendations).toContain(expect.stringContaining('higher confidence'));\r\n    });\r\n\r\n    it('should detect signal conflicts', () => {\r\n      mockHarmonizedSignal.conflicts = ['RSI vs MACD conflict'];\r\n      \r\n      const validation = harmonizationEngine.validateSignalHarmony(mockHarmonizedSignal);\r\n      \r\n      expect(validation.isValid).toBe(false);\r\n      expect(validation.issues).toContain(expect.stringContaining('conflicts detected'));\r\n      expect(validation.recommendations).toContain(expect.stringContaining('Review conflicting'));\r\n    });\r\n\r\n    it('should detect weak signal strength', () => {\r\n      mockHarmonizedSignal.strength = 35;\r\n      \r\n      const validation = harmonizationEngine.validateSignalHarmony(mockHarmonizedSignal);\r\n      \r\n      expect(validation.isValid).toBe(false);\r\n      expect(validation.issues).toContain(expect.stringContaining('Weak signal strength'));\r\n      expect(validation.recommendations).toContain(expect.stringContaining('reducing position size'));\r\n    });\r\n\r\n    it('should detect limited indicator diversity', () => {\r\n      mockHarmonizedSignal.indicators = [\r\n        { name: 'RSI', value: 30, timestamp: new Date(), parameters: {} }\r\n      ];\r\n      \r\n      const validation = harmonizationEngine.validateSignalHarmony(mockHarmonizedSignal);\r\n      \r\n      expect(validation.isValid).toBe(false);\r\n      expect(validation.issues).toContain(expect.stringContaining('Limited indicator diversity'));\r\n      expect(validation.recommendations).toContain(expect.stringContaining('multiple different types'));\r\n    });\r\n\r\n    it('should allow HOLD signals with low strength', () => {\r\n      mockHarmonizedSignal.overallSignal = 'HOLD';\r\n      mockHarmonizedSignal.strength = 35;\r\n      \r\n      const validation = harmonizationEngine.validateSignalHarmony(mockHarmonizedSignal);\r\n      \r\n      // Should not flag weak strength for HOLD signals\r\n      const weakStrengthIssues = validation.issues.filter(issue => \r\n        issue.includes('Weak signal strength')\r\n      );\r\n      expect(weakStrengthIssues.length).toBe(0);\r\n    });\r\n  });\r\n\r\n  describe('weighted scoring', () => {\r\n    it('should calculate weighted scores correctly', () => {\r\n      const strongBuySignals: TradingSignal[] = [\r\n        {\r\n          id: '1',\r\n          symbol: 'BTC/USDT',\r\n          type: 'BUY',\r\n          strength: 90,\r\n          confidence: 85,\r\n          indicators: ['RSI'],\r\n          reasoning: 'Strong RSI oversold',\r\n          riskReward: 2.5,\r\n          timestamp: new Date()\r\n        },\r\n        {\r\n          id: '2',\r\n          symbol: 'BTC/USDT',\r\n          type: 'BUY',\r\n          strength: 80,\r\n          confidence: 75,\r\n          indicators: ['MACD'],\r\n          reasoning: 'MACD bullish crossover',\r\n          riskReward: 2.0,\r\n          timestamp: new Date()\r\n        }\r\n      ];\r\n\r\n      jest.spyOn(harmonizationEngine, 'generateAllSignals').mockReturnValue(strongBuySignals);\r\n\r\n      const harmonizedSignal = harmonizationEngine.harmonizeSignals(mockMarketData);\r\n      \r\n      if (harmonizedSignal) {\r\n        expect(harmonizedSignal.overallSignal).toBe('BUY');\r\n        expect(harmonizedSignal.strength).toBeGreaterThan(70);\r\n        expect(harmonizedSignal.confidence).toBeGreaterThan(70);\r\n      }\r\n    });\r\n\r\n    it('should handle mixed signal types correctly', () => {\r\n      const mixedSignals: TradingSignal[] = [\r\n        {\r\n          id: '1',\r\n          symbol: 'BTC/USDT',\r\n          type: 'BUY',\r\n          strength: 70,\r\n          confidence: 65,\r\n          indicators: ['RSI'],\r\n          reasoning: 'RSI oversold',\r\n          riskReward: 2.0,\r\n          timestamp: new Date()\r\n        },\r\n        {\r\n          id: '2',\r\n          symbol: 'BTC/USDT',\r\n          type: 'SELL',\r\n          strength: 60,\r\n          confidence: 55,\r\n          indicators: ['MACD'],\r\n          reasoning: 'MACD bearish',\r\n          riskReward: 1.5,\r\n          timestamp: new Date()\r\n        },\r\n        {\r\n          id: '3',\r\n          symbol: 'BTC/USDT',\r\n          type: 'HOLD',\r\n          strength: 50,\r\n          confidence: 60,\r\n          indicators: ['EMA'],\r\n          reasoning: 'Sideways trend',\r\n          riskReward: 1.0,\r\n          timestamp: new Date()\r\n        }\r\n      ];\r\n\r\n      jest.spyOn(harmonizationEngine, 'generateAllSignals').mockReturnValue(mixedSignals);\r\n\r\n      const harmonizedSignal = harmonizationEngine.harmonizeSignals(mockMarketData);\r\n      \r\n      if (harmonizedSignal) {\r\n        // Should make a decision based on weighted scoring\r\n        expect(['BUY', 'SELL', 'HOLD']).toContain(harmonizedSignal.overallSignal);\r\n        expect(harmonizedSignal.reasoning).toContain('indicators');\r\n      }\r\n    });\r\n  });\r\n\r\n  describe('conflict detection', () => {\r\n    it('should detect momentum vs trend conflicts', () => {\r\n      const conflictingSignals: TradingSignal[] = [\r\n        {\r\n          id: '1',\r\n          symbol: 'BTC/USDT',\r\n          type: 'BUY',\r\n          strength: 80,\r\n          confidence: 75,\r\n          indicators: ['RSI'],\r\n          reasoning: 'RSI oversold',\r\n          riskReward: 2.0,\r\n          timestamp: new Date()\r\n        },\r\n        {\r\n          id: '2',\r\n          symbol: 'BTC/USDT',\r\n          type: 'SELL',\r\n          strength: 75,\r\n          confidence: 70,\r\n          indicators: ['EMA'],\r\n          reasoning: 'EMA bearish trend',\r\n          riskReward: 1.8,\r\n          timestamp: new Date()\r\n        }\r\n      ];\r\n\r\n      jest.spyOn(harmonizationEngine, 'generateAllSignals').mockReturnValue(conflictingSignals);\r\n\r\n      const harmonizedSignal = harmonizationEngine.harmonizeSignals(mockMarketData);\r\n      \r\n      if (harmonizedSignal) {\r\n        expect(harmonizedSignal.conflicts.length).toBeGreaterThan(0);\r\n        expect(harmonizedSignal.conflicts.some(c => c.includes('Momentum vs Trend'))).toBe(true);\r\n      }\r\n    });\r\n\r\n    it('should detect strong opposing signals', () => {\r\n      const opposingSignals: TradingSignal[] = [\r\n        {\r\n          id: '1',\r\n          symbol: 'BTC/USDT',\r\n          type: 'BUY',\r\n          strength: 85,\r\n          confidence: 80,\r\n          indicators: ['RSI'],\r\n          reasoning: 'Strong RSI oversold',\r\n          riskReward: 2.5,\r\n          timestamp: new Date()\r\n        },\r\n        {\r\n          id: '2',\r\n          symbol: 'BTC/USDT',\r\n          type: 'SELL',\r\n          strength: 90,\r\n          confidence: 85,\r\n          indicators: ['MACD'],\r\n          reasoning: 'Strong MACD bearish',\r\n          riskReward: 2.2,\r\n          timestamp: new Date()\r\n        }\r\n      ];\r\n\r\n      jest.spyOn(harmonizationEngine, 'generateAllSignals').mockReturnValue(opposingSignals);\r\n\r\n      const harmonizedSignal = harmonizationEngine.harmonizeSignals(mockMarketData);\r\n      \r\n      if (harmonizedSignal) {\r\n        expect(harmonizedSignal.conflicts.length).toBeGreaterThan(0);\r\n        expect(harmonizedSignal.conflicts.some(c => c.includes('Strong conflicting signals'))).toBe(true);\r\n      }\r\n    });\r\n  });\r\n\r\n  describe('edge cases', () => {\r\n    it('should handle single signal gracefully', () => {\r\n      const singleSignal: TradingSignal[] = [\r\n        {\r\n          id: '1',\r\n          symbol: 'BTC/USDT',\r\n          type: 'BUY',\r\n          strength: 75,\r\n          confidence: 70,\r\n          indicators: ['RSI'],\r\n          reasoning: 'RSI oversold',\r\n          riskReward: 2.0,\r\n          timestamp: new Date()\r\n        }\r\n      ];\r\n\r\n      jest.spyOn(harmonizationEngine, 'generateAllSignals').mockReturnValue(singleSignal);\r\n\r\n      const harmonizedSignal = harmonizationEngine.harmonizeSignals(mockMarketData);\r\n      \r\n      if (harmonizedSignal) {\r\n        expect(harmonizedSignal.overallSignal).toBe('BUY');\r\n        expect(harmonizedSignal.conflicts.length).toBe(0);\r\n      }\r\n    });\r\n\r\n    it('should handle signals with missing metadata', () => {\r\n      const signalsWithoutMetadata: TradingSignal[] = [\r\n        {\r\n          id: '1',\r\n          symbol: 'BTC/USDT',\r\n          type: 'BUY',\r\n          strength: 75,\r\n          confidence: 70,\r\n          indicators: ['RSI'],\r\n          reasoning: 'RSI oversold',\r\n          riskReward: 2.0,\r\n          timestamp: new Date()\r\n          // No metadata property\r\n        }\r\n      ];\r\n\r\n      jest.spyOn(harmonizationEngine, 'generateAllSignals').mockReturnValue(signalsWithoutMetadata);\r\n\r\n      const harmonizedSignal = harmonizationEngine.harmonizeSignals(mockMarketData);\r\n      \r\n      expect(harmonizedSignal).toBeDefined();\r\n      if (harmonizedSignal) {\r\n        expect(harmonizedSignal.indicators).toBeDefined();\r\n        expect(Array.isArray(harmonizedSignal.indicators)).toBe(true);\r\n      }\r\n    });\r\n\r\n    it('should handle zero-weight strategies', () => {\r\n      const configs = {\r\n        rsi: { name: 'RSI', enabled: true, weight: 0, parameters: {} },\r\n        macd: { name: 'MACD', enabled: true, weight: 1, parameters: {} }\r\n      };\r\n\r\n      const harmonizedSignal = harmonizationEngine.harmonizeSignals(mockMarketData, configs);\r\n      \r\n      // Should still work even with zero weights\r\n      expect(harmonizedSignal).toBeDefined();\r\n    });\r\n  });\r\n\r\n  describe('performance', () => {\r\n    it('should handle large datasets efficiently', () => {\r\n      // Create large dataset\r\n      const largeDataset: MarketData[] = [];\r\n      for (let i = 0; i < 1000; i++) {\r\n        largeDataset.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - i * 60000),\r\n          open: 50000 + Math.random() * 1000,\r\n          high: 50500 + Math.random() * 1000,\r\n          low: 49500 + Math.random() * 1000,\r\n          close: 50000 + Math.random() * 1000,\r\n          volume: 1000000 + Math.random() * 500000\r\n        });\r\n      }\r\n\r\n      const startTime = Date.now();\r\n      const harmonizedSignal = harmonizationEngine.harmonizeSignals(largeDataset);\r\n      const endTime = Date.now();\r\n\r\n      // Should complete within reasonable time (less than 1 second)\r\n      expect(endTime - startTime).toBeLessThan(1000);\r\n      expect(harmonizedSignal).toBeDefined();\r\n    });\r\n  });\r\n});"],"version":3}