{"version":3,"names":["cov_1xj8r7cf0m","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","crypto_1","__importDefault","require","logger_1","audit_service_1","HistoricalDataFetcher","gateIOClient","auditService","fetchStatistics","constructor","AuditService","resetStatistics","logger","info","fetchHistoricalData","config","startTime","Date","now","symbol","toISOString","endTime","validateFetchConfig","batches","calculateBatches","length","allData","i","batch","batchData","fetchBatch","interval","push","successfulRequests","delay","error","failedRequests","maxRetries","Error","sort","a","timestamp","getTime","uniqueData","removeDuplicates","duplicatesRemoved","validatedData","validateIntegrity","validateDataIntegrity","totalDataPoints","validDataPoints","filter","d","validated","fetchDuration","averageRequestTime","totalRequests","logSecurityEvent","severity","details","dataPoints","statistics","message","fetchForBacktest","backtestConfig","durationDays","endDate","startDate","determineOptimalInterval","fetchConfig","batchSize","dataValidation","requireRealData","validateForBacktesting","data","validation","isValid","totalPoints","validPoints","invalidPoints","gaps","integrityScore","errors","warnings","mockDataPoints","source","mockPoint","slice","minDataPoints","point","isValidDataPoint","isRealMarketData","detectDataGaps","maxGapMinutes","criticalGaps","gap","calculateIntegrityScore","dataQualityScore","calculateDataQualityScore","realDataPoints","realDataPercentage","toFixed","integrity","fetchedAt","hasRealisticMarketPatterns","priceRange","high","low","midPrice","Math","max","open","close","min","volume","qualityScore","completenessScore","prices","map","outliers","detectPriceOutliers","outlierPenalty","temporalGaps","gapPenalty","round","sortedPrices","q1","floor","q3","iqr","lowerBound","upperBound","trim","maxHistoryDays","intervalMs","getIntervalMilliseconds","batchDuration","currentStart","currentEnd","gateSymbol","replace","from","to","response","makeRequest","method","url","params","currency_pair","requestType","skipAuth","historicalData","candle","marketData","parseFloat","calculateDataHash","debug","seen","Set","unique","key","has","add","expectedHash","toString","quote_volume","warn","dataString","default","createHash","update","digest","prevTime","currTime","gapMinutes","durationMinutes","impact","validRatio","errorPenalty","intervals","gapsDetected","ms","Promise","resolve","setTimeout","getFetchStatistics","exports"],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\backtesting\\historical-data-fetcher.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * HISTORICAL DATA FETCHER - REAL MARKET DATA ONLY\r\n * =============================================================================\r\n * \r\n * This module fetches and validates historical market data from Gate.io API\r\n * for backtesting purposes. CRITICAL: NO MOCK DATA ALLOWED - only real\r\n * historical market data is used to ensure accurate backtesting results.\r\n * \r\n * SECURITY FEATURES:\r\n * - Data integrity verification with cryptographic hashes\r\n * - Comprehensive data validation and gap detection\r\n * - Rate limiting and API health monitoring\r\n * - Audit logging for all data fetching operations\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport crypto from 'crypto';\r\nimport { logger } from '@/core/logging/logger';\r\nimport { AuditService } from '@/security/audit-service';\r\nimport { GateIOClient } from '../api/gate-io-client';\r\nimport { \r\n  HistoricalMarketData, \r\n  DataValidationResult, \r\n  DataGap,\r\n  BacktestConfig \r\n} from './types';\r\nimport { MarketData } from '../strategies/types';\r\nimport { Candlestick } from '../api/types';\r\n\r\n/**\r\n * Time intervals supported by Gate.io API\r\n */\r\nexport type TimeInterval = '1m' | '5m' | '15m' | '30m' | '1h' | '4h' | '8h' | '1d';\r\n\r\n/**\r\n * Data fetching configuration\r\n */\r\ninterface DataFetchConfig {\r\n  symbol: string;\r\n  interval: TimeInterval;\r\n  startTime: Date;\r\n  endTime: Date;\r\n  maxRetries: number;\r\n  batchSize: number; // Number of candles per request\r\n  validateIntegrity: boolean;\r\n}\r\n\r\n/**\r\n * Data fetching statistics\r\n */\r\ninterface FetchStatistics {\r\n  totalRequests: number;\r\n  successfulRequests: number;\r\n  failedRequests: number;\r\n  totalDataPoints: number;\r\n  validDataPoints: number;\r\n  duplicatesRemoved: number;\r\n  gapsDetected: number;\r\n  fetchDuration: number; // in milliseconds\r\n  averageRequestTime: number;\r\n}\r\n\r\n/**\r\n * Historical Data Fetcher with comprehensive validation\r\n */\r\nexport class HistoricalDataFetcher {\r\n  private gateIOClient: GateIOClient;\r\n  private auditService: AuditService;\r\n  private fetchStatistics: FetchStatistics;\r\n\r\n  constructor(gateIOClient: GateIOClient) {\r\n    this.gateIOClient = gateIOClient;\r\n    this.auditService = new AuditService();\r\n    this.resetStatistics();\r\n    \r\n    logger.info('üìä Historical Data Fetcher initialized - REAL DATA ONLY');\r\n  }\r\n\r\n  /**\r\n   * Fetch historical market data for backtesting\r\n   * CRITICAL: Only real market data from Gate.io API - NO MOCK DATA\r\n   */\r\n  public async fetchHistoricalData(config: DataFetchConfig): Promise<HistoricalMarketData[]> {\r\n    const startTime = Date.now();\r\n    this.resetStatistics();\r\n    \r\n    try {\r\n      logger.info(`üìà Fetching historical data for ${config.symbol} from ${config.startTime.toISOString()} to ${config.endTime.toISOString()}`);\r\n      \r\n      // Validate configuration\r\n      this.validateFetchConfig(config);\r\n      \r\n      // Calculate time range and batch requests\r\n      const batches = this.calculateBatches(config);\r\n      logger.info(`üì¶ Splitting request into ${batches.length} batches`);\r\n      \r\n      // Fetch data in batches to respect API limits\r\n      const allData: HistoricalMarketData[] = [];\r\n      \r\n      for (let i = 0; i < batches.length; i++) {\r\n        const batch = batches[i];\r\n        logger.info(`üì• Fetching batch ${i + 1}/${batches.length}: ${batch.start.toISOString()} to ${batch.end.toISOString()}`);\r\n        \r\n        try {\r\n          const batchData = await this.fetchBatch(config.symbol, config.interval, batch.start, batch.end);\r\n          allData.push(...batchData);\r\n          this.fetchStatistics.successfulRequests++;\r\n          \r\n          // Add delay between batches to respect rate limits\r\n          if (i < batches.length - 1) {\r\n            await this.delay(1000); // 1 second delay\r\n          }\r\n          \r\n        } catch (error) {\r\n          logger.error(`‚ùå Failed to fetch batch ${i + 1}:`, error);\r\n          this.fetchStatistics.failedRequests++;\r\n          \r\n          // Retry failed batch\r\n          if (this.fetchStatistics.failedRequests <= config.maxRetries) {\r\n            logger.info(`üîÑ Retrying batch ${i + 1} (attempt ${this.fetchStatistics.failedRequests})`);\r\n            i--; // Retry current batch\r\n            await this.delay(2000); // 2 second delay before retry\r\n          } else {\r\n            throw new Error(`Failed to fetch batch after ${config.maxRetries} retries`);\r\n          }\r\n        }\r\n      }\r\n      \r\n      // Sort data by timestamp\r\n      allData.sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime());\r\n      \r\n      // Remove duplicates\r\n      const uniqueData = this.removeDuplicates(allData);\r\n      this.fetchStatistics.duplicatesRemoved = allData.length - uniqueData.length;\r\n      \r\n      // Validate data integrity\r\n      const validatedData = config.validateIntegrity \r\n        ? await this.validateDataIntegrity(uniqueData)\r\n        : uniqueData;\r\n      \r\n      // Update statistics\r\n      this.fetchStatistics.totalDataPoints = validatedData.length;\r\n      this.fetchStatistics.validDataPoints = validatedData.filter(d => d.validated).length;\r\n      this.fetchStatistics.fetchDuration = Date.now() - startTime;\r\n      this.fetchStatistics.averageRequestTime = this.fetchStatistics.fetchDuration / this.fetchStatistics.totalRequests;\r\n      \r\n      // Log audit event\r\n      await this.auditService.logSecurityEvent({\r\n        type: 'HISTORICAL_DATA_FETCHED',\r\n        severity: 'INFO',\r\n        details: {\r\n          symbol: config.symbol,\r\n          interval: config.interval,\r\n          dataPoints: validatedData.length,\r\n          statistics: this.fetchStatistics,\r\n        },\r\n        timestamp: new Date(),\r\n      });\r\n      \r\n      logger.info(`‚úÖ Successfully fetched ${validatedData.length} historical data points for ${config.symbol}`);\r\n      logger.info(`üìä Fetch Statistics:`, this.fetchStatistics);\r\n      \r\n      return validatedData;\r\n      \r\n    } catch (error) {\r\n      logger.error('‚ùå Failed to fetch historical data:', error);\r\n      \r\n      await this.auditService.logSecurityEvent({\r\n        type: 'HISTORICAL_DATA_FETCH_FAILED',\r\n        severity: 'ERROR',\r\n        details: {\r\n          symbol: config.symbol,\r\n          error: error.message,\r\n          statistics: this.fetchStatistics,\r\n        },\r\n        timestamp: new Date(),\r\n      });\r\n      \r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fetch historical data for backtesting configuration\r\n   */\r\n  public async fetchForBacktest(backtestConfig: BacktestConfig): Promise<HistoricalMarketData[]> {\r\n    // Determine appropriate interval based on backtest duration\r\n    const durationDays = (backtestConfig.endDate.getTime() - backtestConfig.startDate.getTime()) / (1000 * 60 * 60 * 24);\r\n    const interval = this.determineOptimalInterval(durationDays);\r\n    \r\n    const fetchConfig: DataFetchConfig = {\r\n      symbol: backtestConfig.symbol,\r\n      interval,\r\n      startTime: backtestConfig.startDate,\r\n      endTime: backtestConfig.endDate,\r\n      maxRetries: 3,\r\n      batchSize: 1000,\r\n      validateIntegrity: backtestConfig.dataValidation.requireRealData,\r\n    };\r\n    \r\n    return this.fetchHistoricalData(fetchConfig);\r\n  }\r\n\r\n  /**\r\n   * Validate fetched data for backtesting requirements\r\n   * CRITICAL: Enforces NO MOCK DATA policy\r\n   */\r\n  public async validateForBacktesting(\r\n    data: HistoricalMarketData[], \r\n    config: BacktestConfig\r\n  ): Promise<DataValidationResult> {\r\n    logger.info('üîç Validating historical data for backtesting - REAL DATA ONLY...');\r\n    \r\n    const validation: DataValidationResult = {\r\n      isValid: true,\r\n      totalPoints: data.length,\r\n      validPoints: 0,\r\n      invalidPoints: 0,\r\n      gaps: [],\r\n      integrityScore: 0,\r\n      errors: [],\r\n      warnings: [],\r\n    };\r\n    \r\n    // CRITICAL: Enforce real data only policy\r\n    if (config.dataValidation.requireRealData) {\r\n      const mockDataPoints = data.filter(d => d.source !== 'GATE_IO' || !d.validated);\r\n      if (mockDataPoints.length > 0) {\r\n        validation.isValid = false;\r\n        validation.errors.push(`CRITICAL: Mock data detected - ${mockDataPoints.length} invalid points. Only real Gate.io data allowed.`);\r\n        \r\n        // Log details of mock data for debugging\r\n        for (const mockPoint of mockDataPoints.slice(0, 5)) { // Log first 5 for debugging\r\n          logger.error(`‚ùå Mock data point: ${mockPoint.symbol} at ${mockPoint.timestamp.toISOString()}, source: ${mockPoint.source}, validated: ${mockPoint.validated}`);\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Check minimum data points requirement\r\n    if (data.length < config.dataValidation.minDataPoints) {\r\n      validation.isValid = false;\r\n      validation.errors.push(`Insufficient data points: ${data.length} < ${config.dataValidation.minDataPoints}`);\r\n    }\r\n    \r\n    // Validate each data point for market data integrity\r\n    for (let i = 0; i < data.length; i++) {\r\n      const point = data[i];\r\n      \r\n      if (this.isValidDataPoint(point) && this.isRealMarketData(point)) {\r\n        validation.validPoints++;\r\n      } else {\r\n        validation.invalidPoints++;\r\n        validation.warnings.push(`Invalid data point at index ${i}: ${point.timestamp.toISOString()}`);\r\n      }\r\n    }\r\n    \r\n    // Detect gaps in data\r\n    validation.gaps = this.detectDataGaps(data, config.dataValidation.maxGapMinutes);\r\n    \r\n    // Check for critical gaps that could affect backtesting accuracy\r\n    const criticalGaps = validation.gaps.filter(gap => gap.severity === 'HIGH');\r\n    if (criticalGaps.length > 0) {\r\n      validation.isValid = false;\r\n      validation.errors.push(`Critical data gaps detected: ${criticalGaps.length} gaps > ${config.dataValidation.maxGapMinutes * 3} minutes`);\r\n    }\r\n    \r\n    // Calculate integrity score\r\n    validation.integrityScore = this.calculateIntegrityScore(validation);\r\n    \r\n    // Additional validation for backtesting quality\r\n    const dataQualityScore = this.calculateDataQualityScore(data);\r\n    if (dataQualityScore < 90) {\r\n      validation.warnings.push(`Data quality score below threshold: ${dataQualityScore}% < 90%`);\r\n    }\r\n    \r\n    // Validate data source authenticity (redundant check for extra security)\r\n    const realDataPoints = data.filter(d => d.source === 'GATE_IO' && d.validated).length;\r\n    if (config.dataValidation.requireRealData && realDataPoints < data.length) {\r\n      validation.isValid = false;\r\n      validation.errors.push(`SECURITY VIOLATION: Mock or tampered data detected: ${data.length - realDataPoints} suspicious points`);\r\n    }\r\n    \r\n    // Log comprehensive validation results\r\n    logger.info(`‚úÖ Data validation completed: ${validation.isValid ? 'VALID' : 'INVALID'}`);\r\n    logger.info(`üìä Validation Results:`, {\r\n      totalPoints: validation.totalPoints,\r\n      validPoints: validation.validPoints,\r\n      invalidPoints: validation.invalidPoints,\r\n      gaps: validation.gaps.length,\r\n      integrityScore: validation.integrityScore,\r\n      dataQualityScore,\r\n      realDataPercentage: (realDataPoints / data.length * 100).toFixed(2) + '%',\r\n    });\r\n    \r\n    if (!validation.isValid) {\r\n      logger.error('‚ùå Data validation failed:', validation.errors);\r\n    }\r\n    \r\n    return validation;\r\n  }\r\n\r\n  /**\r\n   * Verify that data point is real market data from Gate.io\r\n   */\r\n  private isRealMarketData(point: HistoricalMarketData): boolean {\r\n    // Check source authenticity\r\n    if (point.source !== 'GATE_IO') {\r\n      return false;\r\n    }\r\n    \r\n    // Check validation flag\r\n    if (!point.validated) {\r\n      return false;\r\n    }\r\n    \r\n    // Check integrity hash exists\r\n    if (!point.integrity || point.integrity.length < 10) {\r\n      return false;\r\n    }\r\n    \r\n    // Check fetch timestamp is reasonable\r\n    if (!point.fetchedAt || point.fetchedAt > new Date()) {\r\n      return false;\r\n    }\r\n    \r\n    // Additional checks for realistic market data patterns\r\n    if (!this.hasRealisticMarketPatterns(point)) {\r\n      return false;\r\n    }\r\n    \r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Check if data point has realistic market patterns\r\n   */\r\n  private hasRealisticMarketPatterns(point: HistoricalMarketData): boolean {\r\n    // Check for unrealistic price movements (> 50% in one candle)\r\n    const priceRange = point.high - point.low;\r\n    const midPrice = (point.high + point.low) / 2;\r\n    if (priceRange / midPrice > 0.5) {\r\n      return false;\r\n    }\r\n    \r\n    // Check OHLC relationships are valid\r\n    if (point.high < Math.max(point.open, point.close) || \r\n        point.low > Math.min(point.open, point.close)) {\r\n      return false;\r\n    }\r\n    \r\n    // Check for reasonable volume (not zero or extremely high)\r\n    if (point.volume <= 0 || point.volume > 1e12) {\r\n      return false;\r\n    }\r\n    \r\n    // Check prices are positive and reasonable\r\n    if (point.open <= 0 || point.high <= 0 || point.low <= 0 || point.close <= 0) {\r\n      return false;\r\n    }\r\n    \r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Calculate overall data quality score\r\n   */\r\n  private calculateDataQualityScore(data: HistoricalMarketData[]): number {\r\n    if (data.length === 0) return 0;\r\n    \r\n    let qualityScore = 100;\r\n    \r\n    // Check for data completeness\r\n    const validPoints = data.filter(d => this.isValidDataPoint(d) && this.isRealMarketData(d)).length;\r\n    const completenessScore = (validPoints / data.length) * 100;\r\n    qualityScore = Math.min(qualityScore, completenessScore);\r\n    \r\n    // Check for data consistency (no extreme outliers)\r\n    const prices = data.map(d => d.close);\r\n    const outliers = this.detectPriceOutliers(prices);\r\n    const outlierPenalty = (outliers.length / data.length) * 50;\r\n    qualityScore -= outlierPenalty;\r\n    \r\n    // Check for temporal consistency\r\n    const temporalGaps = this.detectDataGaps(data, 60); // 1 hour max gap\r\n    const gapPenalty = Math.min(temporalGaps.length * 5, 30);\r\n    qualityScore -= gapPenalty;\r\n    \r\n    return Math.max(0, Math.round(qualityScore));\r\n  }\r\n\r\n  /**\r\n   * Detect price outliers that might indicate bad data\r\n   */\r\n  private detectPriceOutliers(prices: number[]): number[] {\r\n    if (prices.length < 10) return [];\r\n    \r\n    const outliers: number[] = [];\r\n    const sortedPrices = [...prices].sort((a, b) => a - b);\r\n    const q1 = sortedPrices[Math.floor(sortedPrices.length * 0.25)];\r\n    const q3 = sortedPrices[Math.floor(sortedPrices.length * 0.75)];\r\n    const iqr = q3 - q1;\r\n    const lowerBound = q1 - 1.5 * iqr;\r\n    const upperBound = q3 + 1.5 * iqr;\r\n    \r\n    for (let i = 0; i < prices.length; i++) {\r\n      if (prices[i] < lowerBound || prices[i] > upperBound) {\r\n        outliers.push(i);\r\n      }\r\n    }\r\n    \r\n    return outliers;\r\n  }\r\n\r\n  /**\r\n   * Validate fetch configuration\r\n   */\r\n  private validateFetchConfig(config: DataFetchConfig): void {\r\n    if (!config.symbol || config.symbol.trim() === '') {\r\n      throw new Error('Symbol is required');\r\n    }\r\n    \r\n    if (config.startTime >= config.endTime) {\r\n      throw new Error('Start time must be before end time');\r\n    }\r\n    \r\n    if (config.endTime > new Date()) {\r\n      throw new Error('End time cannot be in the future');\r\n    }\r\n    \r\n    const maxHistoryDays = 365; // 1 year maximum\r\n    const durationDays = (config.endTime.getTime() - config.startTime.getTime()) / (1000 * 60 * 60 * 24);\r\n    if (durationDays > maxHistoryDays) {\r\n      throw new Error(`Date range too large: ${durationDays} days > ${maxHistoryDays} days`);\r\n    }\r\n    \r\n    if (config.batchSize <= 0 || config.batchSize > 1000) {\r\n      throw new Error('Batch size must be between 1 and 1000');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate batches for data fetching\r\n   */\r\n  private calculateBatches(config: DataFetchConfig): Array<{ start: Date; end: Date }> {\r\n    const batches: Array<{ start: Date; end: Date }> = [];\r\n    const intervalMs = this.getIntervalMilliseconds(config.interval);\r\n    const batchDuration = config.batchSize * intervalMs;\r\n    \r\n    let currentStart = new Date(config.startTime);\r\n    \r\n    while (currentStart < config.endTime) {\r\n      const currentEnd = new Date(Math.min(\r\n        currentStart.getTime() + batchDuration,\r\n        config.endTime.getTime()\r\n      ));\r\n      \r\n      batches.push({\r\n        start: new Date(currentStart),\r\n        end: new Date(currentEnd),\r\n      });\r\n      \r\n      currentStart = new Date(currentEnd.getTime() + intervalMs);\r\n    }\r\n    \r\n    return batches;\r\n  }\r\n\r\n  /**\r\n   * Fetch a single batch of data from Gate.io API\r\n   */\r\n  private async fetchBatch(\r\n    symbol: string, \r\n    interval: TimeInterval, \r\n    startTime: Date, \r\n    endTime: Date\r\n  ): Promise<HistoricalMarketData[]> {\r\n    this.fetchStatistics.totalRequests++;\r\n    \r\n    try {\r\n      // Convert to Gate.io API format\r\n      const gateSymbol = symbol.replace('_', '_'); // Ensure correct format\r\n      const from = Math.floor(startTime.getTime() / 1000);\r\n      const to = Math.floor(endTime.getTime() / 1000);\r\n      \r\n      // Make API request for candlestick data\r\n      const response = await this.gateIOClient.makeRequest<Candlestick[]>({\r\n        method: 'GET',\r\n        url: `/spot/candlesticks`,\r\n        params: {\r\n          currency_pair: gateSymbol,\r\n          interval: interval,\r\n          from: from,\r\n          to: to,\r\n        },\r\n        requestType: 'PUBLIC' as any,\r\n        skipAuth: true,\r\n      });\r\n      \r\n      // Convert Gate.io candlestick data to our format\r\n      const historicalData: HistoricalMarketData[] = response.map((candle: Candlestick) => {\r\n        const marketData: HistoricalMarketData = {\r\n          symbol: symbol,\r\n          timestamp: new Date(candle.timestamp * 1000),\r\n          open: parseFloat(candle.open),\r\n          high: parseFloat(candle.high),\r\n          low: parseFloat(candle.low),\r\n          close: parseFloat(candle.close),\r\n          volume: parseFloat(candle.volume),\r\n          validated: true,\r\n          source: 'GATE_IO',\r\n          integrity: this.calculateDataHash(candle),\r\n          fetchedAt: new Date(),\r\n        };\r\n        \r\n        return marketData;\r\n      });\r\n      \r\n      logger.debug(`üì• Fetched ${historicalData.length} data points for ${symbol} (${interval})`);\r\n      \r\n      return historicalData;\r\n      \r\n    } catch (error) {\r\n      logger.error(`‚ùå Failed to fetch batch for ${symbol}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove duplicate data points\r\n   */\r\n  private removeDuplicates(data: HistoricalMarketData[]): HistoricalMarketData[] {\r\n    const seen = new Set<string>();\r\n    const unique: HistoricalMarketData[] = [];\r\n    \r\n    for (const point of data) {\r\n      const key = `${point.symbol}_${point.timestamp.getTime()}`;\r\n      if (!seen.has(key)) {\r\n        seen.add(key);\r\n        unique.push(point);\r\n      }\r\n    }\r\n    \r\n    return unique;\r\n  }\r\n\r\n  /**\r\n   * Validate data integrity with cryptographic verification\r\n   */\r\n  private async validateDataIntegrity(data: HistoricalMarketData[]): Promise<HistoricalMarketData[]> {\r\n    logger.info('üîê Validating data integrity...');\r\n    \r\n    const validatedData: HistoricalMarketData[] = [];\r\n    \r\n    for (const point of data) {\r\n      // Recalculate hash to verify integrity\r\n      const expectedHash = this.calculateDataHash({\r\n        timestamp: Math.floor(point.timestamp.getTime() / 1000),\r\n        open: point.open.toString(),\r\n        high: point.high.toString(),\r\n        low: point.low.toString(),\r\n        close: point.close.toString(),\r\n        volume: point.volume.toString(),\r\n        quote_volume: '0', // Not used in our calculation\r\n      });\r\n      \r\n      if (point.integrity === expectedHash) {\r\n        validatedData.push({\r\n          ...point,\r\n          validated: true,\r\n        });\r\n      } else {\r\n        logger.warn(`‚ö†Ô∏è Data integrity check failed for ${point.symbol} at ${point.timestamp.toISOString()}`);\r\n        validatedData.push({\r\n          ...point,\r\n          validated: false,\r\n        });\r\n      }\r\n    }\r\n    \r\n    logger.info(`‚úÖ Data integrity validation completed: ${validatedData.filter(d => d.validated).length}/${validatedData.length} valid`);\r\n    \r\n    return validatedData;\r\n  }\r\n\r\n  /**\r\n   * Calculate cryptographic hash for data integrity\r\n   */\r\n  private calculateDataHash(candle: any): string {\r\n    const dataString = `${candle.timestamp}_${candle.open}_${candle.high}_${candle.low}_${candle.close}_${candle.volume}`;\r\n    return crypto.createHash('sha256').update(dataString).digest('hex');\r\n  }\r\n\r\n  /**\r\n   * Check if a data point is valid\r\n   */\r\n  private isValidDataPoint(point: HistoricalMarketData): boolean {\r\n    // Check for valid OHLCV data\r\n    if (point.open <= 0 || point.high <= 0 || point.low <= 0 || point.close <= 0) {\r\n      return false;\r\n    }\r\n    \r\n    // Check OHLC relationships\r\n    if (point.high < Math.max(point.open, point.close) || \r\n        point.low > Math.min(point.open, point.close)) {\r\n      return false;\r\n    }\r\n    \r\n    // Check for reasonable volume\r\n    if (point.volume < 0) {\r\n      return false;\r\n    }\r\n    \r\n    // Check timestamp validity\r\n    if (point.timestamp > new Date() || point.timestamp < new Date('2009-01-01')) {\r\n      return false;\r\n    }\r\n    \r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Detect gaps in historical data\r\n   */\r\n  private detectDataGaps(data: HistoricalMarketData[], maxGapMinutes: number): DataGap[] {\r\n    const gaps: DataGap[] = [];\r\n    \r\n    for (let i = 1; i < data.length; i++) {\r\n      const prevTime = data[i - 1].timestamp.getTime();\r\n      const currTime = data[i].timestamp.getTime();\r\n      const gapMinutes = (currTime - prevTime) / (1000 * 60);\r\n      \r\n      if (gapMinutes > maxGapMinutes) {\r\n        const severity = gapMinutes > maxGapMinutes * 3 ? 'HIGH' : \r\n                        gapMinutes > maxGapMinutes * 2 ? 'MEDIUM' : 'LOW';\r\n        \r\n        gaps.push({\r\n          startTime: data[i - 1].timestamp,\r\n          endTime: data[i].timestamp,\r\n          durationMinutes: gapMinutes,\r\n          severity,\r\n          impact: `Missing ${Math.floor(gapMinutes / maxGapMinutes)} expected data points`,\r\n        });\r\n      }\r\n    }\r\n    \r\n    return gaps;\r\n  }\r\n\r\n  /**\r\n   * Calculate data integrity score\r\n   */\r\n  private calculateIntegrityScore(validation: DataValidationResult): number {\r\n    if (validation.totalPoints === 0) return 0;\r\n    \r\n    const validRatio = validation.validPoints / validation.totalPoints;\r\n    const gapPenalty = Math.min(validation.gaps.length * 0.1, 0.5);\r\n    const errorPenalty = Math.min(validation.errors.length * 0.2, 0.8);\r\n    \r\n    return Math.max(0, (validRatio - gapPenalty - errorPenalty) * 100);\r\n  }\r\n\r\n  /**\r\n   * Determine optimal interval based on backtest duration\r\n   */\r\n  private determineOptimalInterval(durationDays: number): TimeInterval {\r\n    if (durationDays <= 7) return '1m';\r\n    if (durationDays <= 30) return '5m';\r\n    if (durationDays <= 90) return '15m';\r\n    if (durationDays <= 180) return '1h';\r\n    return '4h';\r\n  }\r\n\r\n  /**\r\n   * Get interval duration in milliseconds\r\n   */\r\n  private getIntervalMilliseconds(interval: TimeInterval): number {\r\n    const intervals: Record<TimeInterval, number> = {\r\n      '1m': 60 * 1000,\r\n      '5m': 5 * 60 * 1000,\r\n      '15m': 15 * 60 * 1000,\r\n      '30m': 30 * 60 * 1000,\r\n      '1h': 60 * 60 * 1000,\r\n      '4h': 4 * 60 * 60 * 1000,\r\n      '8h': 8 * 60 * 60 * 1000,\r\n      '1d': 24 * 60 * 60 * 1000,\r\n    };\r\n    \r\n    return intervals[interval];\r\n  }\r\n\r\n  /**\r\n   * Reset fetch statistics\r\n   */\r\n  private resetStatistics(): void {\r\n    this.fetchStatistics = {\r\n      totalRequests: 0,\r\n      successfulRequests: 0,\r\n      failedRequests: 0,\r\n      totalDataPoints: 0,\r\n      validDataPoints: 0,\r\n      duplicatesRemoved: 0,\r\n      gapsDetected: 0,\r\n      fetchDuration: 0,\r\n      averageRequestTime: 0,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Delay execution for rate limiting\r\n   */\r\n  private delay(ms: number): Promise<void> {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n  }\r\n\r\n  /**\r\n   * Get fetch statistics\r\n   */\r\n  public getFetchStatistics(): FetchStatistics {\r\n    return { ...this.fetchStatistics };\r\n  }\r\n}\r\n"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;AAAA;AAAA,SAAAA,ecAAA;MAAAC,IAAA;MAAAC,QAAA;MAAAC,KAAA;MAAAC,OAAA;MAAAC,cAAA;MAAAC,OAAA;IAAA;IAAAC,eAAA;IAAA5B,IAAA;EAAA;EAAA,IAAA6B,QAAA,GAAA5B,MAAA,CAAAE,GAAA,MAAAF,MAAA,CAAAE,GAAA;EAAA,KAAA0B,QAAA,CAAA9B,IAAA,KAAA8B,QAAA,CAAA9B,IAAA,EAAAC,IAAA,KAAAA,IAAA;IAAA6B,QAAA,CAAA9B,IAAA,IAAAK,YAAA;EAAA;EAAA,IAAA0B,cAAA,GAAAD,QAAA,CAAA9B,IAAA;EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBA,MAAAgC,QAAA;AAAA;AAAA,CAAAjC,cAAA,GAAAoB,CAAA,OAAAc,eAAA,CAAAC,OAAA;AACA,MAAAC,QAAA;AAAA;AAAA,CAAApC,cAAA,GAAAoB,CAAA,OAAAe,OAAA;AACA,MAAAE,eAAA;AAAA;AAAA,CAAArC,cAAA,GAAAoB,CAAA,OAAAe,OAAA;AA4CA;;;AAGA,MAAaG,qBAAqB;EACxBC,YAAY;EACZC,YAAY;EACZC,eAAe;EAEvBC,YAAYH,YAA0B;IAAA;IAAAvC,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IACpC,IAAI,CAACmB,YAAY,GAAGA,YAAY;IAAC;IAAAvC,cAAA,GAAAoB,CAAA;IACjC,IAAI,CAACoB,YAAY,GAAG,IAAIH,eAAA,CAAAM,YAAY,EAAE;IAAC;IAAA3C,cAAA,GAAAoB,CAAA;IACvC,IAAI,CAACwB,eAAe,EAAE;IAAC;IAAA5C,cAAA,GAAAoB,CAAA;IAEvBgB,QAAA,CAAAS,MAAM,CAACC,IAAI,CAAC,yDAAyD,CAAC;EACxE;EAEA;;;;EAIO,MAAMC,mBAAmBA,CAACC,MAAuB;IAAA;IAAAhD,cAAA,GAAAqB,CAAA;IACtD,MAAM4B,SAAS;IAAA;IAAA,CAAAjD,cAAA,GAAAoB,CAAA,QAAG8B,IAAI,CAACC,GAAG,EAAE;IAAC;IAAAnD,cAAA,GAAAoB,CAAA;IAC7B,IAAI,CAACwB,eAAe,EAAE;IAAC;IAAA5C,cAAA,GAAAoB,CAAA;IAEvB,IAAI;MAAA;MAAApB,cAAA,GAAAoB,CAAA;MACFgB,QAAA,CAAAS,MAAM,CAACC,IAAI,CAAC,mCAAmCE,MAAM,CAACI,MAAM,SAASJ,MAAM,CAACC,SAAS,CAACI,WAAW,EAAE,OAAOL,MAAM,CAACM,OAAO,CAACD,WAAW,EAAE,EAAE,CAAC;MAEzI;MAAA;MAAArD,cAAA,GAAAoB,CAAA;MACA,IAAI,CAACmC,mBAAmB,CAACP,MAAM,CAAC;MAEhC;MACA,MAAMQ,OAAO;MAAA;MAAA,CAAAxD,cAAA,GAAAoB,CAAA,QAAG,IAAI,CAACqC,gBAAgB,CAACT,MAAM,CAAC;MAAC;MAAAhD,cAAA,GAAAoB,CAAA;MAC9CgB,QAAA,CAAAS,MAAM,CAACC,IAAI,CAAC,6BAA6BU,OAAO,CAACE,MAAM,UAAU,CAAC;MAElE;MACA,MAAMC,OAAO;MAAA;MAAA,CAAA3D,cAAA,GAAAoB,CAAA,QAA2B,EAAE;MAAC;MAAApB,cAAA,GAAAoB,CAAA;MAE3C,KAAK,IAAIwC,CAAC;MAAA;MAAA,CAAA5D,cAAA,GAAAoB,CAAA,QAAG,CAAC,GAAEwC,CAAC,GAAGJ,OAAO,CAACE,MAAM,EAAEE,CAAC,EAAE,EAAE;QACvC,MAAMC,KAAK;QAAA;QAAA,CAAA7D,cAAA,GAAAoB,CAAA,QAAGoC,OAAO,CAACI,CAAC,CAAC;QAAC;QAAA5D,cAAA,GAAAoB,CAAA;QACzBgB,QAAA,CAAAS,MAAM,CAACC,IAAI,CAAC,qBAAqBc,CAAC,GAAG,CAAC,IAAIJ,OAAO,CAACE,MAAM,KAAKG,KAAK,CAACrD,KAAK,CAAC6C,WAAW,EAAE,OAAOQ,KAAK,CAAClD,GAAG,CAAC0C,WAAW,EAAE,EAAE,CAAC;QAAC;QAAArD,cAAA,GAAAoB,CAAA;QAExH,IAAI;UACF,MAAM0C,SAAS;UAAA;UAAA,CAAA9D,cAAA,GAAAoB,CAAA,QAAG,MAAM,IAAI,CAAC2C,UAAU,CAACf,MAAM,CAACI,MAAM,EAAEJ,MAAM,CAACgB,QAAQ,EAAEH,KAAK,CAACrD,KAAK,EAAEqD,KAAK,CAAClD,GAAG,CAAC;UAAC;UAAAX,cAAA,GAAAoB,CAAA;UAChGuC,OAAO,CAACM,IAAI,CAAC,GAAGH,SAAS,CAAC;UAAC;UAAA9D,cAAA,GAAAoB,CAAA;UAC3B,IAAI,CAACqB,eAAe,CAACyB,kBAAkB,EAAE;UAEzC;UAAA;UAAAlE,cAAA,GAAAoB,CAAA;UACA,IAAIwC,CAAC,GAAGJ,OAAO,CAACE,MAAM,GAAG,CAAC,EAAE;YAAA;YAAA1D,cAAA,GAAAsB,CAAA;YAAAtB,cAAA,GAAAoB,CAAA;YAC1B,MAAM,IAAI,CAAC+C,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;UAC1B,CAAC;UAAA;UAAA;YAAAnE,cAAA,GAAAsB,CAAA;UAAA;QAEH,CAAC,CAAC,OAAO8C,KAAK,EAAE;UAAA;UAAApE,cAAA,GAAAoB,CAAA;UACdgB,QAAA,CAAAS,MAAM,CAACuB,KAAK,CAAC,2BAA2BR,CAAC,GAAG,CAAC,GAAG,EAAEQ,KAAK,CAAC;UAAC;UAAApE,cAAA,GAAAoB,CAAA;UACzD,IAAI,CAACqB,eAAe,CAAC4B,cAAc,EAAE;UAErC;UAAA;UAAArE,cAAA,GAAAoB,CAAA;UACA,IAAI,IAAI,CAACqB,eAAe,CAAC4B,cAAc,IAAIrB,MAAM,CAACsB,UAAU,EAAE;YAAA;YAAAtE,cAAA,GAAAsB,CAAA;YAAAtB,cAAA,GAAAoB,CAAA;YAC5DgB,QAAA,CAAAS,MAAM,CAACC,IAAI,CAAC,qBAAqBc,CAAC,GAAG,CAAC,aAAa,IAAI,CAACnB,eAAe,CAAC4B,cAAc,GAAG,CAAC;YAAC;YAAArE,cAAA,GAAAoB,CAAA;YAC3FwC,CAAC,EAAE,CAAC,CAAC;YAAA;YAAA5D,cAAA,GAAAoB,CAAA;YACL,MAAM,IAAI,CAAC+C,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;UAC1B,CAAC,MAAM;YAAA;YAAAnE,cAAA,GAAAsB,CAAA;YAAAtB,cAAA,GAAAoB,CAAA;YACL,MAAM,IAAImD,KAAK,CAAC,+BAA+BvB,MAAM,CAACsB,UAAU,UAAU,CAAC;UAC7E;QACF;MACF;MAEA;MAAA;MAAAtE,cAAA,GAAAoB,CAAA;MACAuC,OAAO,CAACa,IAAI,CAAC,CAACC,CAAC,EAAEnD,CAAC,KAAK;QAAA;QAAAtB,cAAA,GAAAqB,CAAA;QAAArB,cAAA,GAAAoB,CAAA;QAAA,OAAAqD,CAAC,CAACC,SAAS,CAACC,OAAO,EAAE,GAAGrD,CAAC,CAACoD,SAAS,CAACC,OAAO,EAAE;MAAF,CAAE,CAAC;MAErE;MACA,MAAMC,UAAU;MAAA;MAAA,CAAA5E,cAAA,GAAAoB,CAAA,QAAG,IAAI,CAACyD,gBAAgB,CAAClB,OAAO,CAAC;MAAC;MAAA3D,cAAA,GAAAoB,CAAA;MAClD,IAAI,CAACqB,eAAe,CAACqC,iBAAiB,GAAGnB,OAAO,CAACD,MAAM,GAAGkB,UAAU,CAAClB,MAAM;MAE3E;MACA,MAAMqB,aAAa;MAAA;MAAA,CAAA/E,cAAA,GAAAoB,CAAA,QAAG4B,MAAM,CAACgC,iBAAiB;MAAA;MAAA,CAAAhF,cAAA,GAAAsB,CAAA,UAC1C,MAAM,IAAI,CAAC2D,qBAAqB,CAACL,UAAU,CAAC;MAAA;MAAA,CAAA5E,cAAA,GAAAsB,CAAA,UAC5CsD,UAAU;MAEd;MAAA;MAAA5E,cAAA,GAAAoB,CAAA;MACA,IAAI,CAACqB,eAAe,CAACyC,eAAe,GAAGH,aAAa,CAACrB,MAAM;MAAC;MAAA1D,cAAA,GAAAoB,CAAA;MAC5D,IAAI,CAACqB,eAAe,CAAC0C,eAAe,GAAGJ,aAAa,CAACK,MAAM,CAACC,CAAC,IAAI;QAAA;QAAArF,cAAA,GAAAqB,CAAA;QAAArB,cAAA,GAAAoB,CAAA;QAAA,OAAAiE,CAAC,CAACC,SAAS;MAAT,CAAS,CAAC,CAAC5B,MAAM;MAAC;MAAA1D,cAAA,GAAAoB,CAAA;MACrF,IAAI,CAACqB,eAAe,CAAC8C,aAAa,GAAGrC,IAAI,CAACC,GAAG,EAAE,GAAGF,SAAS;MAAC;MAAAjD,cAAA,GAAAoB,CAAA;MAC5D,IAAI,CAACqB,eAAe,CAAC+C,kBAAkB,GAAG,IAAI,CAAC/C,eAAe,CAAC8C,aAAa,GAAG,IAAI,CAAC9C,eAAe,CAACgD,aAAa;MAEjH;MAAA;MAAAzF,cAAA,GAAAoB,CAAA;MACA,MAAM,IAAI,CAACoB,YAAY,CAACkD,gBAAgB,CAAC;QACvCzE,IAAI,EAAE,yBAAyB;QAC/B0E,QAAQ,EAAE,MAAM;QAChBC,OAAO,EAAE;UACPxC,MAAM,EAAEJ,MAAM,CAACI,MAAM;UACrBY,QAAQ,EAAEhB,MAAM,CAACgB,QAAQ;UACzB6B,UAAU,EAAEd,aAAa,CAACrB,MAAM;UAChCoC,UAAU,EAAE,IAAI,CAACrD;SAClB;QACDiC,SAAS,EAAE,IAAIxB,IAAI;OACpB,CAAC;MAAC;MAAAlD,cAAA,GAAAoB,CAAA;MAEHgB,QAAA,CAAAS,MAAM,CAACC,IAAI,CAAC,0BAA0BiC,aAAa,CAACrB,MAAM,+BAA+BV,MAAM,CAACI,MAAM,EAAE,CAAC;MAAC;MAAApD,cAAA,GAAAoB,CAAA;MAC1GgB,QAAA,CAAAS,MAAM,CAACC,IAAI,CAAC,sBAAsB,EAAE,IAAI,CAACL,eAAe,CAAC;MAAC;MAAAzC,cAAA,GAAAoB,CAAA;MAE1D,OAAO2D,aAAa;IAEtB,CAAC,CAAC,OAAOX,KAAK,EAAE;MAAA;MAAApE,cAAA,GAAAoB,CAAA;MACdgB,QAAA,CAAAS,MAAM,CAACuB,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;MAAC;MAAApE,cAAA,GAAAoB,CAAA;MAE1D,MAAM,IAAI,CAACoB,YAAY,CAACkD,gBAAgB,CAAC;QACvCzE,IAAI,EAAE,8BAA8B;QACpC0E,QAAQ,EAAE,OAAO;QACjBC,OAAO,EAAE;UACPxC,MAAM,EAAEJ,MAAM,CAACI,MAAM;UACrBgB,KAAK,EAAEA,KAAK,CAAC2B,OAAO;UACpBD,UAAU,EAAE,IAAI,CAACrD;SAClB;QACDiC,SAAS,EAAE,IAAIxB,IAAI;OACpB,CAAC;MAAC;MAAAlD,cAAA,GAAAoB,CAAA;MAEH,MAAMgD,KAAK;IACb;EACF;EAEA;;;EAGO,MAAM4B,gBAAgBA,CAACC,cAA8B;IAAA;IAAAjG,cAAA,GAAAqB,CAAA;IAC1D;IACA,MAAM6E,YAAY;IAAA;IAAA,CAAAlG,cAAA,GAAAoB,CAAA,QAAG,CAAC6E,cAAc,CAACE,OAAO,CAACxB,OAAO,EAAE,GAAGsB,cAAc,CAACG,SAAS,CAACzB,OAAO,EAAE,KAAK,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;IACpH,MAAMX,QAAQ;IAAA;IAAA,CAAAhE,cAAA,GAAAoB,CAAA,QAAG,IAAI,CAACiF,wBAAwB,CAACH,YAAY,CAAC;IAE5D,MAAMI,WAAW;IAAA;IAAA,CAAAtG,cAAA,GAAAoB,CAAA,QAAoB;MACnCgC,MAAM,EAAE6C,cAAc,CAAC7C,MAAM;MAC7BY,QAAQ;MACRf,SAAS,EAAEgD,cAAc,CAACG,SAAS;MACnC9C,OAAO,EAAE2C,cAAc,CAACE,OAAO;MAC/B7B,UAAU,EAAE,CAAC;MACbiC,SAAS,EAAE,IAAI;MACfvB,iBAAiB,EAAEiB,cAAc,CAACO,cAAc,CAACC;KAClD;IAAC;IAAAzG,cAAA,GAAAoB,CAAA;IAEF,OAAO,IAAI,CAAC2B,mBAAmB,CAACuD,WAAW,CAAC;EAC9C;EAEA;;;;EAIO,MAAMI,sBAAsBA,CACjCC,IAA4B,EAC5B3D,MAAsB;IAAA;IAAAhD,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IAEtBgB,QAAA,CAAAS,MAAM,CAACC,IAAI,CAAC,mEAAmE,CAAC;IAEhF,MAAM8D,UAAU;IAAA;IAAA,CAAA5G,cAAA,GAAAoB,CAAA,QAAyB;MACvCyF,OAAO,EAAE,IAAI;MACbC,WAAW,EAAEH,IAAI,CAACjD,MAAM;MACxBqD,WAAW,EAAE,CAAC;MACdC,aAAa,EAAE,CAAC;MAChBC,IAAI,EAAE,EAAE;MACRC,cAAc,EAAE,CAAC;MACjBC,MAAM,EAAE,EAAE;MACVC,QAAQ,EAAE;KACX;IAED;IAAA;IAAApH,cAAA,GAAAoB,CAAA;IACA,IAAI4B,MAAM,CAACwD,cAAc,CAACC,eAAe,EAAE;MAAA;MAAAzG,cAAA,GAAAsB,CAAA;MACzC,MAAM+F,cAAc;MAAA;MAAA,CAAArH,cAAA,GAAAoB,CAAA,QAAGuF,IAAI,CAACvB,MAAM,CAACC,CAAC,IAAI;QAAA;QAAArF,cAAA,GAAAqB,CAAA;QAAArB,cAAA,GAAAoB,CAAA;QAAA,kCAAApB,cAAA,GAAAsB,CAAA,UAAA+D,CAAC,CAACiC,MAAM,KAAK,SAAS;QAAA;QAAA,CAAAtH,cAAA,GAAAsB,CAAA,UAAI,CAAC+D,CAAC,CAACC,SAAS;MAAT,CAAS,CAAC;MAAC;MAAAtF,cAAA,GAAAoB,CAAA;MAChF,IAAIiG,cAAc,CAAC3D,MAAM,GAAG,CAAC,EAAE;QAAA;QAAA1D,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QAC7BwF,UAAU,CAACC,OAAO,GAAG,KAAK;QAAC;QAAA7G,cAAA,GAAAoB,CAAA;QAC3BwF,UAAU,CAACO,MAAM,CAAClD,IAAI,CAAC,kCAAkCoD,cAAc,CAAC3D,MAAM,kDAAkD,CAAC;QAEjI;QAAA;QAAA1D,cAAA,GAAAoB,CAAA;QACA,KAAK,MAAMmG,SAAS,IAAIF,cAAc,CAACG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;UAAA;UAAAxH,cAAA,GAAAoB,CAAA;UAAE;UACpDgB,QAAA,CAAAS,MAAM,CAACuB,KAAK,CAAC,sBAAsBmD,SAAS,CAACnE,MAAM,OAAOmE,SAAS,CAAC7C,SAAS,CAACrB,WAAW,EAAE,aAAakE,SAAS,CAACD,MAAM,gBAAgBC,SAAS,CAACjC,SAAS,EAAE,CAAC;QAChK;MACF,CAAC;MAAA;MAAA;QAAAtF,cAAA,GAAAsB,CAAA;MAAA;IACH,CAAC;IAAA;IAAA;MAAAtB,cAAA,GAAAsB,CAAA;IAAA;IAED;IAAAtB,cAAA,GAAAoB,CAAA;IACA,IAAIuF,IAAI,CAACjD,MAAM,GAAGV,MAAM,CAACwD,cAAc,CAACiB,aAAa,EAAE;MAAA;MAAAzH,cAAA,GAAAsB,CAAA;MAAAtB,cAAA,GAAAoB,CAAA;MACrDwF,UAAU,CAACC,OAAO,GAAG,KAAK;MAAC;MAAA7G,cAAA,GAAAoB,CAAA;MAC3BwF,UAAU,CAACO,MAAM,CAAClD,IAAI,CAAC,6BAA6B0C,IAAI,CAACjD,MAAM,MAAMV,MAAM,CAACwD,cAAc,CAACiB,aAAa,EAAE,CAAC;IAC7G,CAAC;IAAA;IAAA;MAAAzH,cAAA,GAAAsB,CAAA;IAAA;IAED;IAAAtB,cAAA,GAAAoB,CAAA;IACA,KAAK,IAAIwC,CAAC;IAAA;IAAA,CAAA5D,cAAA,GAAAoB,CAAA,QAAG,CAAC,GAAEwC,CAAC,GAAG+C,IAAI,CAACjD,MAAM,EAAEE,CAAC,EAAE,EAAE;MACpC,MAAM8D,KAAK;MAAA;MAAA,CAAA1H,cAAA,GAAAoB,CAAA,QAAGuF,IAAI,CAAC/C,CAAC,CAAC;MAAC;MAAA5D,cAAA,GAAAoB,CAAA;MAEtB;MAAI;MAAA,CAAApB,cAAA,GAAAsB,CAAA,eAAI,CAACqG,gBAAgB,CAACD,KAAK,CAAC;MAAA;MAAA,CAAA1H,cAAA,GAAAsB,CAAA,WAAI,IAAI,CAACsG,gBAAgB,CAACF,KAAK,CAAC,GAAE;QAAA;QAAA1H,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QAChEwF,UAAU,CAACG,WAAW,EAAE;MAC1B,CAAC,MAAM;QAAA;QAAA/G,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACLwF,UAAU,CAACI,aAAa,EAAE;QAAC;QAAAhH,cAAA,GAAAoB,CAAA;QAC3BwF,UAAU,CAACQ,QAAQ,CAACnD,IAAI,CAAC,+BAA+BL,CAAC,KAAK8D,KAAK,CAAChD,SAAS,CAACrB,WAAW,EAAE,EAAE,CAAC;MAChG;IACF;IAEA;IAAA;IAAArD,cAAA,GAAAoB,CAAA;IACAwF,UAAU,CAACK,IAAI,GAAG,IAAI,CAACY,cAAc,CAAClB,IAAI,EAAE3D,MAAM,CAACwD,cAAc,CAACsB,aAAa,CAAC;IAEhF;IACA,MAAMC,YAAY;IAAA;IAAA,CAAA/H,cAAA,GAAAoB,CAAA,QAAGwF,UAAU,CAACK,IAAI,CAAC7B,MAAM,CAAC4C,GAAG,IAAI;MAAA;MAAAhI,cAAA,GAAAqB,CAAA;MAAArB,cAAA,GAAAoB,CAAA;MAAA,OAAA4G,GAAG,CAACrC,QAAQ,KAAK,MAAM;IAAN,CAAM,CAAC;IAAC;IAAA3F,cAAA,GAAAoB,CAAA;IAC5E,IAAI2G,YAAY,CAACrE,MAAM,GAAG,CAAC,EAAE;MAAA;MAAA1D,cAAA,GAAAsB,CAAA;MAAAtB,cAAA,GAAAoB,CAAA;MAC3BwF,UAAU,CAACC,OAAO,GAAG,KAAK;MAAC;MAAA7G,cAAA,GAAAoB,CAAA;MAC3BwF,UAAU,CAACO,MAAM,CAAClD,IAAI,CAAC,gCAAgC8D,YAAY,CAACrE,MAAM,WAAWV,MAAM,CAACwD,cAAc,CAACsB,aAAa,GAAG,CAAC,UAAU,CAAC;IACzI,CAAC;IAAA;IAAA;MAAA9H,cAAA,GAAAsB,CAAA;IAAA;IAED;IAAAtB,cAAA,GAAAoB,CAAA;IACAwF,UAAU,CAACM,cAAc,GAAG,IAAI,CAACe,uBAAuB,CAACrB,UAAU,CAAC;IAEpE;IACA,MAAMsB,gBAAgB;IAAA;IAAA,CAAAlI,cAAA,GAAAoB,CAAA,QAAG,IAAI,CAAC+G,yBAAyB,CAACxB,IAAI,CAAC;IAAC;IAAA3G,cAAA,GAAAoB,CAAA;IAC9D,IAAI8G,gBAAgB,GAAG,EAAE,EAAE;MAAA;MAAAlI,cAAA,GAAAsB,CAAA;MAAAtB,cAAA,GAAAoB,CAAA;MACzBwF,UAAU,CAACQ,QAAQ,CAACnD,IAAI,CAAC,uCAAuCiE,gBAAgB,SAAS,CAAC;IAC5F,CAAC;IAAA;IAAA;MAAAlI,cAAA,GAAAsB,CAAA;IAAA;IAED;IACA,MAAM8G,cAAc;IAAA;IAAA,CAAApI,cAAA,GAAAoB,CAAA,QAAGuF,IAAI,CAACvB,MAAM,CAACC,CAAC,IAAI;MAAA;MAAArF,cAAA,GAAAqB,CAAA;MAAArB,cAAA,GAAAoB,CAAA;MAAA,kCAAApB,cAAA,GAAAsB,CAAA,WAAA+D,CAAC,CAACiC,MAAM,KAAK,SAAS;MAAA;MAAA,CAAAtH,cAAA,GAAAsB,CAAA,WAAI+D,CAAC,CAACC,SAAS;IAAT,CAAS,CAAC,CAAC5B,MAAM;IAAC;IAAA1D,cAAA,GAAAoB,CAAA;IACtF;IAAI;IAAA,CAAApB,cAAA,GAAAsB,CAAA,WAAA0B,MAAM,CAACwD,cAAc,CAACC,eAAe;IAAA;IAAA,CAAAzG,cAAA,GAAAsB,CAAA,WAAI8G,cAAc,GAAGzB,IAAI,CAACjD,MAAM,GAAE;MAAA;MAAA1D,cAAA,GAAAsB,CAAA;MAAAtB,cAAA,GAAAoB,CAAA;MACzEwF,UAAU,CAACC,OAAO,GAAG,KAAK;MAAC;MAAA7G,cAAA,GAAAoB,CAAA;MAC3BwF,UAAU,CAACO,MAAM,CAAClD,IAAI,CAAC,uDAAuD0C,IAAI,CAACjD,MAAM,GAAG0E,cAAc,oBAAoB,CAAC;IACjI,CAAC;IAAA;IAAA;MAAApI,cAAA,GAAAsB,CAAA;IAAA;IAED;IAAAtB,cAAA,GAAAoB,CAAA;IACAgB,QAAA,CAAAS,MAAM,CAACC,IAAI,CAAC,gCAAgC8D,UAAU,CAACC,OAAO;IAAA;IAAA,CAAA7G,cAAA,GAAAsB,CAAA,WAAG,OAAO;IAAA;IAAA,CAAAtB,cAAA,GAAAsB,CAAA,WAAG,SAAS,GAAE,CAAC;IAAC;IAAAtB,cAAA,GAAAoB,CAAA;IACxFgB,QAAA,CAAAS,MAAM,CAACC,IAAI,CAAC,wBAAwB,EAAE;MACpCgE,WAAW,EAAEF,UAAU,CAACE,WAAW;MACnCC,WAAW,EAAEH,UAAU,CAACG,WAAW;MACnCC,aAAa,EAAEJ,UAAU,CAACI,aAAa;MACvCC,IAAI,EAAEL,UAAU,CAACK,IAAI,CAACvD,MAAM;MAC5BwD,cAAc,EAAEN,UAAU,CAACM,cAAc;MACzCgB,gBAAgB;MAChBG,kBAAkB,EAAE,CAACD,cAAc,GAAGzB,IAAI,CAACjD,MAAM,GAAG,GAAG,EAAE4E,OAAO,CAAC,CAAC,CAAC,GAAG;KACvE,CAAC;IAAC;IAAAtI,cAAA,GAAAoB,CAAA;IAEH,IAAI,CAACwF,UAAU,CAACC,OAAO,EAAE;MAAA;MAAA7G,cAAA,GAAAsB,CAAA;MAAAtB,cAAA,GAAAoB,CAAA;MACvBgB,QAAA,CAAAS,MAAM,CAACuB,KAAK,CAAC,2BAA2B,EAAEwC,UAAU,CAACO,MAAM,CAAC;IAC9D,CAAC;IAAA;IAAA;MAAAnH,cAAA,GAAAsB,CAAA;IAAA;IAAAtB,cAAA,GAAAoB,CAAA;IAED,OAAOwF,UAAU;EACnB;EAEA;;;EAGQgB,gBAAgBA,CAACF,KAA2B;IAAA;IAAA1H,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IAClD;IACA,IAAIsG,KAAK,CAACJ,MAAM,KAAK,SAAS,EAAE;MAAA;MAAAtH,cAAA,GAAAsB,CAAA;MAAAtB,cAAA,GAAAoB,CAAA;MAC9B,OAAO,KAAK;IACd,CAAC;IAAA;IAAA;MAAApB,cAAA,GAAAsB,CAAA;IAAA;IAED;IAAAtB,cAAA,GAAAoB,CAAA;IACA,IAAI,CAACsG,KAAK,CAACpC,SAAS,EAAE;MAAA;MAAAtF,cAAA,GAAAsB,CAAA;MAAAtB,cAAA,GAAAoB,CAAA;MACpB,OAAO,KAAK;IACd,CAAC;IAAA;IAAA;MAAApB,cAAA,GAAAsB,CAAA;IAAA;IAED;IAAAtB,cAAA,GAAAoB,CAAA;IACA;IAAI;IAAA,CAAApB,cAAA,GAAAsB,CAAA,YAACoG,KAAK,CAACa,SAAS;IAAA;IAAA,CAAAvI,cAAA,GAAAsB,CAAA,WAAIoG,KAAK,CAACa,SAAS,CAAC7E,MAAM,GAAG,EAAE,GAAE;MAAA;MAAA1D,cAAA,GAAAsB,CAAA;MAAAtB,cAAA,GAAAoB,CAAA;MACnD,OAAO,KAAK;IACd,CAAC;IAAA;IAAA;MAAApB,cAAA,GAAAsB,CAAA;IAAA;IAED;IAAAtB,cAAA,GAAAoB,CAAA;IACA;IAAI;IAAA,CAAApB,cAAA,GAAAsB,CAAA,YAACoG,KAAK,CAACc,SAAS;IAAA;IAAA,CAAAxI,cAAA,GAAAsB,CAAA,WAAIoG,KAAK,CAACc,SAAS,GAAG,IAAItF,IAAI,EAAE,GAAE;MAAA;MAAAlD,cAAA,GAAAsB,CAAA;MAAAtB,cAAA,GAAAoB,CAAA;MACpD,OAAO,KAAK;IACd,CAAC;IAAA;IAAA;MAAApB,cAAA,GAAAsB,CAAA;IAAA;IAED;IAAAtB,cAAA,GAAAoB,CAAA;IACA,IAAI,CAAC,IAAI,CAACqH,0BAA0B,CAACf,KAAK,CAAC,EAAE;MAAA;MAAA1H,cAAA,GAAAsB,CAAA;MAAAtB,cAAA,GAAAoB,CAAA;MAC3C,OAAO,KAAK;IACd,CAAC;IAAA;IAAA;MAAApB,cAAA,GAAAsB,CAAA;IAAA;IAAAtB,cAAA,GAAAoB,CAAA;IAED,OAAO,IAAI;EACb;EAEA;;;EAGQqH,0BAA0BA,CAACf,KAA2B;IAAA;IAAA1H,cAAA,GAAAqB,CAAA;IAC5D;IACA,MAAMqH,UAAU;IAAA;IAAA,CAAA1I,cAAA,GAAAoB,CAAA,SAAGsG,KAAK,CAACiB,IAAI,GAAGjB,KAAK,CAACkB,GAAG;IACzC,MAAMC,QAAQ;IAAA;IAAA,CAAA7I,cAAA,GAAAoB,CAAA,SAAG,CAACsG,KAAK,CAACiB,IAAI,GAAGjB,KAAK,CAACkB,GAAG,IAAI,CAAC;IAAC;IAAA5I,cAAA,GAAAoB,CAAA;IAC9C,IAAIsH,UAAU,GAAGG,QAAQ,GAAG,GAAG,EAAE;MAAA;MAAA7I,cAAA,GAAAsB,CAAA;MAAAtB,cAAA,GAAAoB,CAAA;MAC/B,OAAO,KAAK;IACd,CAAC;IAAA;IAAA;MAAApB,cAAA,GAAAsB,CAAA;IAAA;IAED;IAAAtB,cAAA,GAAAoB,CAAA;IACA;IAAI;IAAA,CAAApB,cAAA,GAAAsB,CAAA,WAAAoG,KAAK,CAACiB,IAAI,GAAGG,IAAI,CAACC,GAAG,CAACrB,KAAK,CAACsB,IAAI,EAAEtB,KAAK,CAACuB,KAAK,CAAC;IAAA;IAAA,CAAAjJ,cAAA,GAAAsB,CAAA,WAC9CoG,KAAK,CAACkB,GAAG,GAAGE,IAAI,CAACI,GAAG,CAACxB,KAAK,CAACsB,IAAI,EAAEtB,KAAK,CAACuB,KAAK,CAAC,GAAE;MAAA;MAAAjJ,cAAA,GAAAsB,CAAA;MAAAtB,cAAA,GAAAoB,CAAA;MACjD,OAAO,KAAK;IACd,CAAC;IAAA;IAAA;MAAApB,cAAA,GAAAsB,CAAA;IAAA;IAED;IAAAtB,cAAA,GAAAoB,CAAA;IACA;IAAI;IAAA,CAAApB,cAAA,GAAAsB,CAAA,WAAAoG,KAAK,CAACyB,MAAM,IAAI,CAAC;IAAA;IAAA,CAAAnJ,cAAA,GAAAsB,CAAA,WAAIoG,KAAK,CAACyB,MAAM,GAAG,IAAI,GAAE;MAAA;MAAAnJ,cAAA,GAAAsB,CAAA;MAAAtB,cAAA,GAAAoB,CAAA;MAC5C,OAAO,KAAK;IACd,CAAC;IAAA;IAAA;MAAApB,cAAA,GAAAsB,CAAA;IAAA;IAED;IAAAtB,cAAA,GAAAoB,CAAA;IACA;IAAI;IAAA,CAAApB,cAAA,GAAAsB,CAAA,WAAAoG,KAAK,CAACsB,IAAI,IAAI,CAAC;IAAA;IAAA,CAAAhJ,cAAA,GAAAsB,CAAA,WAAIoG,KAAK,CAACiB,IAAI,IAAI,CAAC;IAAA;IAAA,CAAA3I,cAAA,GAAAsB,CAAA,WAAIoG,KAAK,CAACkB,GAAG,IAAI,CAAC;IAAA;IAAA,CAAA5I,cAAA,GAAAsB,CAAA,WAAIoG,KAAK,CAACuB,KAAK,IAAI,CAAC,GAAE;MAAA;MAAAjJ,cAAA,GAAAsB,CAAA;MAAAtB,cAAA,GAAAoB,CAAA;MAC5E,OAAO,KAAK;IACd,CAAC;IAAA;IAAA;MAAApB,cAAA,GAAAsB,CAAA;IAAA;IAAAtB,cAAA,GAAAoB,CAAA;IAED,OAAO,IAAI;EACb;EAEA;;;EAGQ+G,yBAAyBA,CAACxB,IAA4B;IAAA;IAAA3G,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IAC5D,IAAIuF,IAAI,CAACjD,MAAM,KAAK,CAAC,EAAE;MAAA;MAAA1D,cAAA,GAAAsB,CAAA;MAAAtB,cAAA,GAAAoB,CAAA;MAAA,OAAO,CAAC;IAAA,CAAC;IAAA;IAAA;MAAApB,cAAA,GAAAsB,CAAA;IAAA;IAEhC,IAAI8H,YAAY;IAAA;IAAA,CAAApJ,cAAA,GAAAoB,CAAA,SAAG,GAAG;IAEtB;IACA,MAAM2F,WAAW;IAAA;IAAA,CAAA/G,cAAA,GAAAoB,CAAA,SAAGuF,IAAI,CAACvB,MAAM,CAACC,CAAC,IAAI;MAAA;MAAArF,cAAA,GAAAqB,CAAA;MAAArB,cAAA,GAAAoB,CAAA;MAAA,kCAAApB,cAAA,GAAAsB,CAAA,eAAI,CAACqG,gBAAgB,CAACtC,CAAC,CAAC;MAAA;MAAA,CAAArF,cAAA,GAAAsB,CAAA,WAAI,IAAI,CAACsG,gBAAgB,CAACvC,CAAC,CAAC;IAAD,CAAC,CAAC,CAAC3B,MAAM;IACjG,MAAM2F,iBAAiB;IAAA;IAAA,CAAArJ,cAAA,GAAAoB,CAAA,SAAI2F,WAAW,GAAGJ,IAAI,CAACjD,MAAM,GAAI,GAAG;IAAC;IAAA1D,cAAA,GAAAoB,CAAA;IAC5DgI,YAAY,GAAGN,IAAI,CAACI,GAAG,CAACE,YAAY,EAAEC,iBAAiB,CAAC;IAExD;IACA,MAAMC,MAAM;IAAA;IAAA,CAAAtJ,cAAA,GAAAoB,CAAA,SAAGuF,IAAI,CAAC4C,GAAG,CAAClE,CAAC,IAAI;MAAA;MAAArF,cAAA,GAAAqB,CAAA;MAAArB,cAAA,GAAAoB,CAAA;MAAA,OAAAiE,CAAC,CAAC4D,KAAK;IAAL,CAAK,CAAC;IACrC,MAAMO,QAAQ;IAAA;IAAA,CAAAxJ,cAAA,GAAAoB,CAAA,SAAG,IAAI,CAACqI,mBAAmB,CAACH,MAAM,CAAC;IACjD,MAAMI,cAAc;IAAA;IAAA,CAAA1J,cAAA,GAAAoB,CAAA,SAAIoI,QAAQ,CAAC9F,MAAM,GAAGiD,IAAI,CAACjD,MAAM,GAAI,EAAE;IAAC;IAAA1D,cAAA,GAAAoB,CAAA;IAC5DgI,YAAY,IAAIM,cAAc;IAE9B;IACA,MAAMC,YAAY;IAAA;IAAA,CAAA3J,cAAA,GAAAoB,CAAA,SAAG,IAAI,CAACyG,cAAc,CAAClB,IAAI,EAAE,EAAE,CAAC,EAAC,CAAC;IACpD,MAAMiD,UAAU;IAAA;IAAA,CAAA5J,cAAA,GAAAoB,CAAA,SAAG0H,IAAI,CAACI,GAAG,CAACS,YAAY,CAACjG,MAAM,GAAG,CAAC,EAAE,EAAE,CAAC;IAAC;IAAA1D,cAAA,GAAAoB,CAAA;IACzDgI,YAAY,IAAIQ,UAAU;IAAC;IAAA5J,cAAA,GAAAoB,CAAA;IAE3B,OAAO0H,IAAI,CAACC,GAAG,CAAC,CAAC,EAAED,IAAI,CAACe,KAAK,CAACT,YAAY,CAAC,CAAC;EAC9C;EAEA;;;EAGQK,mBAAmBA,CAACH,MAAgB;IAAA;IAAAtJ,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IAC1C,IAAIkI,MAAM,CAAC5F,MAAM,GAAG,EAAE,EAAE;MAAA;MAAA1D,cAAA,GAAAsB,CAAA;MAAAtB,cAAA,GAAAoB,CAAA;MAAA,OAAO,EAAE;IAAA,CAAC;IAAA;IAAA;MAAApB,cAAA,GAAAsB,CAAA;IAAA;IAElC,MAAMkI,QAAQ;IAAA;IAAA,CAAAxJ,cAAA,GAAAoB,CAAA,SAAa,EAAE;IAC7B,MAAM0I,YAAY;IAAA;IAAA,CAAA9J,cAAA,GAAAoB,CAAA,SAAG,CAAC,GAAGkI,MAAM,CAAC,CAAC9E,IAAI,CAAC,CAACC,CAAC,EAAEnD,CAAC,KAAK;MAAA;MAAAtB,cAAA,GAAAqB,CAAA;MAAArB,cAAA,GAAAoB,CAAA;MAAA,OAAAqD,CAAC,GAAGnD,CAAC;IAAD,CAAC,CAAC;IACtD,MAAMyI,EAAE;IAAA;IAAA,CAAA/J,cAAA,GAAAoB,CAAA,SAAG0I,YAAY,CAAChB,IAAI,CAACkB,KAAK,CAACF,YAAY,CAACpG,MAAM,GAAG,IAAI,CAAC,CAAC;IAC/D,MAAMuG,EAAE;IAAA;IAAA,CAAAjK,cAAA,GAAAoB,CAAA,SAAG0I,YAAY,CAAChB,IAAI,CAACkB,KAAK,CAACF,YAAY,CAACpG,MAAM,GAAG,IAAI,CAAC,CAAC;IAC/D,MAAMwG,GAAG;IAAA;IAAA,CAAAlK,cAAA,GAAAoB,CAAA,SAAG6I,EAAE,GAAGF,EAAE;IACnB,MAAMI,UAAU;IAAA;IAAA,CAAAnK,cAAA,GAAAoB,CAAA,SAAG2I,EAAE,GAAG,GAAG,GAAGG,GAAG;IACjC,MAAME,UAAU;IAAA;IAAA,CAAApK,cAAA,GAAAoB,CAAA,SAAG6I,EAAE,GAAG,GAAG,GAAGC,GAAG;IAAC;IAAAlK,cAAA,GAAAoB,CAAA;IAElC,KAAK,IAAIwC,CAAC;IAAA;IAAA,CAAA5D,cAAA,GAAAoB,CAAA,SAAG,CAAC,GAAEwC,CAAC,GAAG0F,MAAM,CAAC5F,MAAM,EAAEE,CAAC,EAAE,EAAE;MAAA;MAAA5D,cAAA,GAAAoB,CAAA;MACtC;MAAI;MAAA,CAAApB,cAAA,GAAAsB,CAAA,WAAAgI,MAAM,CAAC1F,CAAC,CAAC,GAAGuG,UAAU;MAAA;MAAA,CAAAnK,cAAA,GAAAsB,CAAA,WAAIgI,MAAM,CAAC1F,CAAC,CAAC,GAAGwG,UAAU,GAAE;QAAA;QAAApK,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACpDoI,QAAQ,CAACvF,IAAI,CAACL,CAAC,CAAC;MAClB,CAAC;MAAA;MAAA;QAAA5D,cAAA,GAAAsB,CAAA;MAAA;IACH;IAAC;IAAAtB,cAAA,GAAAoB,CAAA;IAED,OAAOoI,QAAQ;EACjB;EAEA;;;EAGQjG,mBAAmBA,CAACP,MAAuB;IAAA;IAAAhD,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IACjD;IAAI;IAAA,CAAApB,cAAA,GAAAsB,CAAA,YAAC0B,MAAM,CAACI,MAAM;IAAA;IAAA,CAAApD,cAAA,GAAAsB,CAAA,WAAI0B,MAAM,CAACI,MAAM,CAACiH,IAAI,EAAE,KAAK,EAAE,GAAE;MAAA;MAAArK,cAAA,GAAAsB,CAAA;MAAAtB,cAAA,GAAAoB,CAAA;MACjD,MAAM,IAAImD,KAAK,CAAC,oBAAoB,CAAC;IACvC,CAAC;IAAA;IAAA;MAAAvE,cAAA,GAAAsB,CAAA;IAAA;IAAAtB,cAAA,GAAAoB,CAAA;IAED,IAAI4B,MAAM,CAACC,SAAS,IAAID,MAAM,CAACM,OAAO,EAAE;MAAA;MAAAtD,cAAA,GAAAsB,CAAA;MAAAtB,cAAA,GAAAoB,CAAA;MACtC,MAAM,IAAImD,KAAK,CAAC,oCAAoC,CAAC;IACvD,CAAC;IAAA;IAAA;MAAAvE,cAAA,GAAAsB,CAAA;IAAA;IAAAtB,cAAA,GAAAoB,CAAA;IAED,IAAI4B,MAAM,CAACM,OAAO,GAAG,IAAIJ,IAAI,EAAE,EAAE;MAAA;MAAAlD,cAAA,GAAAsB,CAAA;MAAAtB,cAAA,GAAAoB,CAAA;MAC/B,MAAM,IAAImD,KAAK,CAAC,kCAAkC,CAAC;IACrD,CAAC;IAAA;IAAA;MAAAvE,cAAA,GAAAsB,CAAA;IAAA;IAED,MAAMgJ,cAAc;IAAA;IAAA,CAAAtK,cAAA,GAAAoB,CAAA,SAAG,GAAG,EAAC,CAAC;IAC5B,MAAM8E,YAAY;IAAA;IAAA,CAAAlG,cAAA,GAAAoB,CAAA,SAAG,CAAC4B,MAAM,CAACM,OAAO,CAACqB,OAAO,EAAE,GAAG3B,MAAM,CAACC,SAAS,CAAC0B,OAAO,EAAE,KAAK,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;IAAC;IAAA3E,cAAA,GAAAoB,CAAA;IACrG,IAAI8E,YAAY,GAAGoE,cAAc,EAAE;MAAA;MAAAtK,cAAA,GAAAsB,CAAA;MAAAtB,cAAA,GAAAoB,CAAA;MACjC,MAAM,IAAImD,KAAK,CAAC,yBAAyB2B,YAAY,WAAWoE,cAAc,OAAO,CAAC;IACxF,CAAC;IAAA;IAAA;MAAAtK,cAAA,GAAAsB,CAAA;IAAA;IAAAtB,cAAA,GAAAoB,CAAA;IAED;IAAI;IAAA,CAAApB,cAAA,GAAAsB,CAAA,WAAA0B,MAAM,CAACuD,SAAS,IAAI,CAAC;IAAA;IAAA,CAAAvG,cAAA,GAAAsB,CAAA,WAAI0B,MAAM,CAACuD,SAAS,GAAG,IAAI,GAAE;MAAA;MAAAvG,cAAA,GAAAsB,CAAA;MAAAtB,cAAA,GAAAoB,CAAA;MACpD,MAAM,IAAImD,KAAK,CAAC,uCAAuC,CAAC;IAC1D,CAAC;IAAA;IAAA;MAAAvE,cAAA,GAAAsB,CAAA;IAAA;EACH;EAEA;;;EAGQmC,gBAAgBA,CAACT,MAAuB;IAAA;IAAAhD,cAAA,GAAAqB,CAAA;IAC9C,MAAMmC,OAAO;IAAA;IAAA,CAAAxD,cAAA,GAAAoB,CAAA,SAAsC,EAAE;IACrD,MAAMmJ,UAAU;IAAA;IAAA,CAAAvK,cAAA,GAAAoB,CAAA,SAAG,IAAI,CAACoJ,uBAAuB,CAACxH,MAAM,CAACgB,QAAQ,CAAC;IAChE,MAAMyG,aAAa;IAAA;IAAA,CAAAzK,cAAA,GAAAoB,CAAA,SAAG4B,MAAM,CAACuD,SAAS,GAAGgE,UAAU;IAEnD,IAAIG,YAAY;IAAA;IAAA,CAAA1K,cAAA,GAAAoB,CAAA,SAAG,IAAI8B,IAAI,CAACF,MAAM,CAACC,SAAS,CAAC;IAAC;IAAAjD,cAAA,GAAAoB,CAAA;IAE9C,OAAOsJ,YAAY,GAAG1H,MAAM,CAACM,OAAO,EAAE;MACpC,MAAMqH,UAAU;MAAA;MAAA,CAAA3K,cAAA,GAAAoB,CAAA,SAAG,IAAI8B,IAAI,CAAC4F,IAAI,CAACI,GAAG,CAClCwB,YAAY,CAAC/F,OAAO,EAAE,GAAG8F,aAAa,EACtCzH,MAAM,CAACM,OAAO,CAACqB,OAAO,EAAE,CACzB,CAAC;MAAC;MAAA3E,cAAA,GAAAoB,CAAA;MAEHoC,OAAO,CAACS,IAAI,CAAC;QACXzD,KAAK,EAAE,IAAI0C,IAAI,CAACwH,YAAY,CAAC;QAC7B/J,GAAG,EAAE,IAAIuC,IAAI,CAACyH,UAAU;OACzB,CAAC;MAAC;MAAA3K,cAAA,GAAAoB,CAAA;MAEHsJ,YAAY,GAAG,IAAIxH,IAAI,CAACyH,UAAU,CAAChG,OAAO,EAAE,GAAG4F,UAAU,CAAC;IAC5D;IAAC;IAAAvK,cAAA,GAAAoB,CAAA;IAED,OAAOoC,OAAO;EAChB;EAEA;;;EAGQ,MAAMO,UAAUA,CACtBX,MAAc,EACdY,QAAsB,EACtBf,SAAe,EACfK,OAAa;IAAA;IAAAtD,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IAEb,IAAI,CAACqB,eAAe,CAACgD,aAAa,EAAE;IAAC;IAAAzF,cAAA,GAAAoB,CAAA;IAErC,IAAI;MACF;MACA,MAAMwJ,UAAU;MAAA;MAAA,CAAA5K,cAAA,GAAAoB,CAAA,SAAGgC,MAAM,CAACyH,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,EAAC,CAAC;MAC7C,MAAMC,IAAI;MAAA;MAAA,CAAA9K,cAAA,GAAAoB,CAAA,SAAG0H,IAAI,CAACkB,KAAK,CAAC/G,SAAS,CAAC0B,OAAO,EAAE,GAAG,IAAI,CAAC;MACnD,MAAMoG,EAAE;MAAA;MAAA,CAAA/K,cAAA,GAAAoB,CAAA,SAAG0H,IAAI,CAACkB,KAAK,CAAC1G,OAAO,CAACqB,OAAO,EAAE,GAAG,IAAI,CAAC;MAE/C;MACA,MAAMqG,QAAQ;MAAA;MAAA,CAAAhL,cAAA,GAAAoB,CAAA,SAAG,MAAM,IAAI,CAACmB,YAAY,CAAC0I,WAAW,CAAgB;QAClEC,MAAM,EAAE,KAAK;QACbC,GAAG,EAAE,oBAAoB;QACzBC,MAAM,EAAE;UACNC,aAAa,EAAET,UAAU;UACzB5G,QAAQ,EAAEA,QAAQ;UAClB8G,IAAI,EAAEA,IAAI;UACVC,EAAE,EAAEA;SACL;QACDO,WAAW,EAAE,QAAe;QAC5BC,QAAQ,EAAE;OACX,CAAC;MAEF;MACA,MAAMC,cAAc;MAAA;MAAA,CAAAxL,cAAA,GAAAoB,CAAA,SAA2B4J,QAAQ,CAACzB,GAAG,CAAEkC,MAAmB,IAAI;QAAA;QAAAzL,cAAA,GAAAqB,CAAA;QAClF,MAAMqK,UAAU;QAAA;QAAA,CAAA1L,cAAA,GAAAoB,CAAA,SAAyB;UACvCgC,MAAM,EAAEA,MAAM;UACdsB,SAAS,EAAE,IAAIxB,IAAI,CAACuI,MAAM,CAAC/G,SAAS,GAAG,IAAI,CAAC;UAC5CsE,IAAI,EAAE2C,UAAU,CAACF,MAAM,CAACzC,IAAI,CAAC;UAC7BL,IAAI,EAAEgD,UAAU,CAACF,MAAM,CAAC9C,IAAI,CAAC;UAC7BC,GAAG,EAAE+C,UAAU,CAACF,MAAM,CAAC7C,GAAG,CAAC;UAC3BK,KAAK,EAAE0C,UAAU,CAACF,MAAM,CAACxC,KAAK,CAAC;UAC/BE,MAAM,EAAEwC,UAAU,CAACF,MAAM,CAACtC,MAAM,CAAC;UACjC7D,SAAS,EAAE,IAAI;UACfgC,MAAM,EAAE,SAAS;UACjBiB,SAAS,EAAE,IAAI,CAACqD,iBAAiB,CAACH,MAAM,CAAC;UACzCjD,SAAS,EAAE,IAAItF,IAAI;SACpB;QAAC;QAAAlD,cAAA,GAAAoB,CAAA;QAEF,OAAOsK,UAAU;MACnB,CAAC,CAAC;MAAC;MAAA1L,cAAA,GAAAoB,CAAA;MAEHgB,QAAA,CAAAS,MAAM,CAACgJ,KAAK,CAAC,cAAcL,cAAc,CAAC9H,MAAM,oBAAoBN,MAAM,KAAKY,QAAQ,GAAG,CAAC;MAAC;MAAAhE,cAAA,GAAAoB,CAAA;MAE5F,OAAOoK,cAAc;IAEvB,CAAC,CAAC,OAAOpH,KAAK,EAAE;MAAA;MAAApE,cAAA,GAAAoB,CAAA;MACdgB,QAAA,CAAAS,MAAM,CAACuB,KAAK,CAAC,+BAA+BhB,MAAM,GAAG,EAAEgB,KAAK,CAAC;MAAC;MAAApE,cAAA,GAAAoB,CAAA;MAC9D,MAAMgD,KAAK;IACb;EACF;EAEA;;;EAGQS,gBAAgBA,CAAC8B,IAA4B;IAAA;IAAA3G,cAAA,GAAAqB,CAAA;IACnD,MAAMyK,IAAI;IAAA;IAAA,CAAA9L,cAAA,GAAAoB,CAAA,SAAG,IAAI2K,GAAG,EAAU;IAC9B,MAAMC,MAAM;IAAA;IAAA,CAAAhM,cAAA,GAAAoB,CAAA,SAA2B,EAAE;IAAC;IAAApB,cAAA,GAAAoB,CAAA;IAE1C,KAAK,MAAMsG,KAAK,IAAIf,IAAI,EAAE;MACxB,MAAMsF,GAAG;MAAA;MAAA,CAAAjM,cAAA,GAAAoB,CAAA,SAAG,GAAGsG,KAAK,CAACtE,MAAM,IAAIsE,KAAK,CAAChD,SAAS,CAACC,OAAO,EAAE,EAAE;MAAC;MAAA3E,cAAA,GAAAoB,CAAA;MAC3D,IAAI,CAAC0K,IAAI,CAACI,GAAG,CAACD,GAAG,CAAC,EAAE;QAAA;QAAAjM,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QAClB0K,IAAI,CAACK,GAAG,CAACF,GAAG,CAAC;QAAC;QAAAjM,cAAA,GAAAoB,CAAA;QACd4K,MAAM,CAAC/H,IAAI,CAACyD,KAAK,CAAC;MACpB,CAAC;MAAA;MAAA;QAAA1H,cAAA,GAAAsB,CAAA;MAAA;IACH;IAAC;IAAAtB,cAAA,GAAAoB,CAAA;IAED,OAAO4K,MAAM;EACf;EAEA;;;EAGQ,MAAM/G,qBAAqBA,CAAC0B,IAA4B;IAAA;IAAA3G,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IAC9DgB,QAAA,CAAAS,MAAM,CAACC,IAAI,CAAC,iCAAiC,CAAC;IAE9C,MAAMiC,aAAa;IAAA;IAAA,CAAA/E,cAAA,GAAAoB,CAAA,SAA2B,EAAE;IAAC;IAAApB,cAAA,GAAAoB,CAAA;IAEjD,KAAK,MAAMsG,KAAK,IAAIf,IAAI,EAAE;MACxB;MACA,MAAMyF,YAAY;MAAA;MAAA,CAAApM,cAAA,GAAAoB,CAAA,SAAG,IAAI,CAACwK,iBAAiB,CAAC;QAC1ClH,SAAS,EAAEoE,IAAI,CAACkB,KAAK,CAACtC,KAAK,CAAChD,SAAS,CAACC,OAAO,EAAE,GAAG,IAAI,CAAC;QACvDqE,IAAI,EAAEtB,KAAK,CAACsB,IAAI,CAACqD,QAAQ,EAAE;QAC3B1D,IAAI,EAAEjB,KAAK,CAACiB,IAAI,CAAC0D,QAAQ,EAAE;QAC3BzD,GAAG,EAAElB,KAAK,CAACkB,GAAG,CAACyD,QAAQ,EAAE;QACzBpD,KAAK,EAAEvB,KAAK,CAACuB,KAAK,CAACoD,QAAQ,EAAE;QAC7BlD,MAAM,EAAEzB,KAAK,CAACyB,MAAM,CAACkD,QAAQ,EAAE;QAC/BC,YAAY,EAAE,GAAG,CAAE;OACpB,CAAC;MAAC;MAAAtM,cAAA,GAAAoB,CAAA;MAEH,IAAIsG,KAAK,CAACa,SAAS,KAAK6D,YAAY,EAAE;QAAA;QAAApM,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACpC2D,aAAa,CAACd,IAAI,CAAC;UACjB,GAAGyD,KAAK;UACRpC,SAAS,EAAE;SACZ,CAAC;MACJ,CAAC,MAAM;QAAA;QAAAtF,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACLgB,QAAA,CAAAS,MAAM,CAAC0J,IAAI,CAAC,sCAAsC7E,KAAK,CAACtE,MAAM,OAAOsE,KAAK,CAAChD,SAAS,CAACrB,WAAW,EAAE,EAAE,CAAC;QAAC;QAAArD,cAAA,GAAAoB,CAAA;QACtG2D,aAAa,CAACd,IAAI,CAAC;UACjB,GAAGyD,KAAK;UACRpC,SAAS,EAAE;SACZ,CAAC;MACJ;IACF;IAAC;IAAAtF,cAAA,GAAAoB,CAAA;IAEDgB,QAAA,CAAAS,MAAM,CAACC,IAAI,CAAC,0CAA0CiC,aAAa,CAACK,MAAM,CAACC,CAAC,IAAI;MAAA;MAAArF,cAAA,GAAAqB,CAAA;MAAArB,cAAA,GAAAoB,CAAA;MAAA,OAAAiE,CAAC,CAACC,SAAS;IAAT,CAAS,CAAC,CAAC5B,MAAM,IAAIqB,aAAa,CAACrB,MAAM,QAAQ,CAAC;IAAC;IAAA1D,cAAA,GAAAoB,CAAA;IAErI,OAAO2D,aAAa;EACtB;EAEA;;;EAGQ6G,iBAAiBA,CAACH,MAAW;IAAA;IAAAzL,cAAA,GAAAqB,CAAA;IACnC,MAAMmL,UAAU;IAAA;IAAA,CAAAxM,cAAA,GAAAoB,CAAA,SAAG,GAAGqK,MAAM,CAAC/G,SAAS,IAAI+G,MAAM,CAACzC,IAAI,IAAIyC,MAAM,CAAC9C,IAAI,IAAI8C,MAAM,CAAC7C,GAAG,IAAI6C,MAAM,CAACxC,KAAK,IAAIwC,MAAM,CAACtC,MAAM,EAAE;IAAC;IAAAnJ,cAAA,GAAAoB,CAAA;IACtH,OAAOa,QAAA,CAAAwK,OAAM,CAACC,UAAU,CAAC,QAAQ,CAAC,CAACC,MAAM,CAACH,UAAU,CAAC,CAACI,MAAM,CAAC,KAAK,CAAC;EACrE;EAEA;;;EAGQjF,gBAAgBA,CAACD,KAA2B;IAAA;IAAA1H,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IAClD;IACA;IAAI;IAAA,CAAApB,cAAA,GAAAsB,CAAA,WAAAoG,KAAK,CAACsB,IAAI,IAAI,CAAC;IAAA;IAAA,CAAAhJ,cAAA,GAAAsB,CAAA,WAAIoG,KAAK,CAACiB,IAAI,IAAI,CAAC;IAAA;IAAA,CAAA3I,cAAA,GAAAsB,CAAA,WAAIoG,KAAK,CAACkB,GAAG,IAAI,CAAC;IAAA;IAAA,CAAA5I,cAAA,GAAAsB,CAAA,WAAIoG,KAAK,CAACuB,KAAK,IAAI,CAAC,GAAE;MAAA;MAAAjJ,cAAA,GAAAsB,CAAA;MAAAtB,cAAA,GAAAoB,CAAA;MAC5E,OAAO,KAAK;IACd,CAAC;IAAA;IAAA;MAAApB,cAAA,GAAAsB,CAAA;IAAA;IAED;IAAAtB,cAAA,GAAAoB,CAAA;IACA;IAAI;IAAA,CAAApB,cAAA,GAAAsB,CAAA,WAAAoG,KAAK,CAACiB,IAAI,GAAGG,IAAI,CAACC,GAAG,CAACrB,KAAK,CAACsB,IAAI,EAAEtB,KAAK,CAACuB,KAAK,CAAC;IAAA;IAAA,CAAAjJ,cAAA,GAAAsB,CAAA,WAC9CoG,KAAK,CAACkB,GAAG,GAAGE,IAAI,CAACI,GAAG,CAACxB,KAAK,CAACsB,IAAI,EAAEtB,KAAK,CAACuB,KAAK,CAAC,GAAE;MAAA;MAAAjJ,cAAA,GAAAsB,CAAA;MAAAtB,cAAA,GAAAoB,CAAA;MACjD,OAAO,KAAK;IACd,CAAC;IAAA;IAAA;MAAApB,cAAA,GAAAsB,CAAA;IAAA;IAED;IAAAtB,cAAA,GAAAoB,CAAA;IACA,IAAIsG,KAAK,CAACyB,MAAM,GAAG,CAAC,EAAE;MAAA;MAAAnJ,cAAA,GAAAsB,CAAA;MAAAtB,cAAA,GAAAoB,CAAA;MACpB,OAAO,KAAK;IACd,CAAC;IAAA;IAAA;MAAApB,cAAA,GAAAsB,CAAA;IAAA;IAED;IAAAtB,cAAA,GAAAoB,CAAA;IACA;IAAI;IAAA,CAAApB,cAAA,GAAAsB,CAAA,WAAAoG,KAAK,CAAChD,SAAS,GAAG,IAAIxB,IAAI,EAAE;IAAA;IAAA,CAAAlD,cAAA,GAAAsB,CAAA,WAAIoG,KAAK,CAAChD,SAAS,GAAG,IAAIxB,IAAI,CAAC,YAAY,CAAC,GAAE;MAAA;MAAAlD,cAAA,GAAAsB,CAAA;MAAAtB,cAAA,GAAAoB,CAAA;MAC5E,OAAO,KAAK;IACd,CAAC;IAAA;IAAA;MAAApB,cAAA,GAAAsB,CAAA;IAAA;IAAAtB,cAAA,GAAAoB,CAAA;IAED,OAAO,IAAI;EACb;EAEA;;;EAGQyG,cAAcA,CAAClB,IAA4B,EAAEmB,aAAqB;IAAA;IAAA9H,cAAA,GAAAqB,CAAA;IACxE,MAAM4F,IAAI;IAAA;IAAA,CAAAjH,cAAA,GAAAoB,CAAA,SAAc,EAAE;IAAC;IAAApB,cAAA,GAAAoB,CAAA;IAE3B,KAAK,IAAIwC,CAAC;IAAA;IAAA,CAAA5D,cAAA,GAAAoB,CAAA,SAAG,CAAC,GAAEwC,CAAC,GAAG+C,IAAI,CAACjD,MAAM,EAAEE,CAAC,EAAE,EAAE;MACpC,MAAMiJ,QAAQ;MAAA;MAAA,CAAA7M,cAAA,GAAAoB,CAAA,SAAGuF,IAAI,CAAC/C,CAAC,GAAG,CAAC,CAAC,CAACc,SAAS,CAACC,OAAO,EAAE;MAChD,MAAMmI,QAAQ;MAAA;MAAA,CAAA9M,cAAA,GAAAoB,CAAA,SAAGuF,IAAI,CAAC/C,CAAC,CAAC,CAACc,SAAS,CAACC,OAAO,EAAE;MAC5C,MAAMoI,UAAU;MAAA;MAAA,CAAA/M,cAAA,GAAAoB,CAAA,SAAG,CAAC0L,QAAQ,GAAGD,QAAQ,KAAK,IAAI,GAAG,EAAE,CAAC;MAAC;MAAA7M,cAAA,GAAAoB,CAAA;MAEvD,IAAI2L,UAAU,GAAGjF,aAAa,EAAE;QAAA;QAAA9H,cAAA,GAAAsB,CAAA;QAC9B,MAAMqE,QAAQ;QAAA;QAAA,CAAA3F,cAAA,GAAAoB,CAAA,SAAG2L,UAAU,GAAGjF,aAAa,GAAG,CAAC;QAAA;QAAA,CAAA9H,cAAA,GAAAsB,CAAA,WAAG,MAAM;QAAA;QAAA,CAAAtB,cAAA,GAAAsB,CAAA,WACxCyL,UAAU,GAAGjF,aAAa,GAAG,CAAC;QAAA;QAAA,CAAA9H,cAAA,GAAAsB,CAAA,WAAG,QAAQ;QAAA;QAAA,CAAAtB,cAAA,GAAAsB,CAAA,WAAG,KAAK;QAAC;QAAAtB,cAAA,GAAAoB,CAAA;QAElE6F,IAAI,CAAChD,IAAI,CAAC;UACRhB,SAAS,EAAE0D,IAAI,CAAC/C,CAAC,GAAG,CAAC,CAAC,CAACc,SAAS;UAChCpB,OAAO,EAAEqD,IAAI,CAAC/C,CAAC,CAAC,CAACc,SAAS;UAC1BsI,eAAe,EAAED,UAAU;UAC3BpH,QAAQ;UACRsH,MAAM,EAAE,WAAWnE,IAAI,CAACkB,KAAK,CAAC+C,UAAU,GAAGjF,aAAa,CAAC;SAC1D,CAAC;MACJ,CAAC;MAAA;MAAA;QAAA9H,cAAA,GAAAsB,CAAA;MAAA;IACH;IAAC;IAAAtB,cAAA,GAAAoB,CAAA;IAED,OAAO6F,IAAI;EACb;EAEA;;;EAGQgB,uBAAuBA,CAACrB,UAAgC;IAAA;IAAA5G,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IAC9D,IAAIwF,UAAU,CAACE,WAAW,KAAK,CAAC,EAAE;MAAA;MAAA9G,cAAA,GAAAsB,CAAA;MAAAtB,cAAA,GAAAoB,CAAA;MAAA,OAAO,CAAC;IAAA,CAAC;IAAA;IAAA;MAAApB,cAAA,GAAAsB,CAAA;IAAA;IAE3C,MAAM4L,UAAU;IAAA;IAAA,CAAAlN,cAAA,GAAAoB,CAAA,SAAGwF,UAAU,CAACG,WAAW,GAAGH,UAAU,CAACE,WAAW;IAClE,MAAM8C,UAAU;IAAA;IAAA,CAAA5J,cAAA,GAAAoB,CAAA,SAAG0H,IAAI,CAACI,GAAG,CAACtC,UAAU,CAACK,IAAI,CAACvD,MAAM,GAAG,GAAG,EAAE,GAAG,CAAC;IAC9D,MAAMyJ,YAAY;IAAA;IAAA,CAAAnN,cAAA,GAAAoB,CAAA,SAAG0H,IAAI,CAACI,GAAG,CAACtC,UAAU,CAACO,MAAM,CAACzD,MAAM,GAAG,GAAG,EAAE,GAAG,CAAC;IAAC;IAAA1D,cAAA,GAAAoB,CAAA;IAEnE,OAAO0H,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE,CAACmE,UAAU,GAAGtD,UAAU,GAAGuD,YAAY,IAAI,GAAG,CAAC;EACpE;EAEA;;;EAGQ9G,wBAAwBA,CAACH,YAAoB;IAAA;IAAAlG,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IACnD,IAAI8E,YAAY,IAAI,CAAC,EAAE;MAAA;MAAAlG,cAAA,GAAAsB,CAAA;MAAAtB,cAAA,GAAAoB,CAAA;MAAA,OAAO,IAAI;IAAA,CAAC;IAAA;IAAA;MAAApB,cAAA,GAAAsB,CAAA;IAAA;IAAAtB,cAAA,GAAAoB,CAAA;IACnC,IAAI8E,YAAY,IAAI,EAAE,EAAE;MAAA;MAAAlG,cAAA,GAAAsB,CAAA;MAAAtB,cAAA,GAAAoB,CAAA;MAAA,OAAO,IAAI;IAAA,CAAC;IAAA;IAAA;MAAApB,cAAA,GAAAsB,CAAA;IAAA;IAAAtB,cAAA,GAAAoB,CAAA;IACpC,IAAI8E,YAAY,IAAI,EAAE,EAAE;MAAA;MAAAlG,cAAA,GAAAsB,CAAA;MAAAtB,cAAA,GAAAoB,CAAA;MAAA,OAAO,KAAK;IAAA,CAAC;IAAA;IAAA;MAAApB,cAAA,GAAAsB,CAAA;IAAA;IAAAtB,cAAA,GAAAoB,CAAA;IACrC,IAAI8E,YAAY,IAAI,GAAG,EAAE;MAAA;MAAAlG,cAAA,GAAAsB,CAAA;MAAAtB,cAAA,GAAAoB,CAAA;MAAA,OAAO,IAAI;IAAA,CAAC;IAAA;IAAA;MAAApB,cAAA,GAAAsB,CAAA;IAAA;IAAAtB,cAAA,GAAAoB,CAAA;IACrC,OAAO,IAAI;EACb;EAEA;;;EAGQoJ,uBAAuBA,CAACxG,QAAsB;IAAA;IAAAhE,cAAA,GAAAqB,CAAA;IACpD,MAAM+L,SAAS;IAAA;IAAA,CAAApN,cAAA,GAAAoB,CAAA,SAAiC;MAC9C,IAAI,EAAE,EAAE,GAAG,IAAI;MACf,IAAI,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI;MACnB,KAAK,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI;MACrB,KAAK,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI;MACrB,IAAI,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI;MACpB,IAAI,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;MACxB,IAAI,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;MACxB,IAAI,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;KACtB;IAAC;IAAApB,cAAA,GAAAoB,CAAA;IAEF,OAAOgM,SAAS,CAACpJ,QAAQ,CAAC;EAC5B;EAEA;;;EAGQpB,eAAeA,CAAA;IAAA;IAAA5C,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IACrB,IAAI,CAACqB,eAAe,GAAG;MACrBgD,aAAa,EAAE,CAAC;MAChBvB,kBAAkB,EAAE,CAAC;MACrBG,cAAc,EAAE,CAAC;MACjBa,eAAe,EAAE,CAAC;MAClBC,eAAe,EAAE,CAAC;MAClBL,iBAAiB,EAAE,CAAC;MACpBuI,YAAY,EAAE,CAAC;MACf9H,aAAa,EAAE,CAAC;MAChBC,kBAAkB,EAAE;KACrB;EACH;EAEA;;;EAGQrB,KAAKA,CAACmJ,EAAU;IAAA;IAAAtN,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IACtB,OAAO,IAAImM,OAAO,CAACC,OAAO,IAAI;MAAA;MAAAxN,cAAA,GAAAqB,CAAA;MAAArB,cAAA,GAAAoB,CAAA;MAAA,OAAAqM,UAAU,CAACD,OAAO,EAAEF,EAAE,CAAC;IAAD,CAAC,CAAC;EACxD;EAEA;;;EAGOI,kBAAkBA,CAAA;IAAA;IAAA1N,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IACvB,OAAO;MAAE,GAAG,IAAI,CAACqB;IAAe,CAAE;EACpC;;AACD;AAAAzC,cAAA,GAAAoB,CAAA;AA/oBDuM,OAAA,CAAArL,qBAAA,GAAAA,qBAAA","ignoreList":[]}