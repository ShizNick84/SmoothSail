80d7b5ca769146e7231080fb6276dec9
"use strict";
/**
 * Jest setup file for AI Crypto Trading Agent tests
 */
Object.defineProperty(exports, "__esModule", { value: true });
// Mock external dependencies that cause issues in tests
jest.mock('../../security/encryption-service', () => ({
    EncryptionService: jest.fn().mockImplementation(() => ({
        initializeMasterKey: jest.fn(),
        encryptData: jest.fn().mockResolvedValue('encrypted_data'),
        decryptData: jest.fn().mockResolvedValue('decrypted_data'),
        generateKey: jest.fn().mockReturnValue('generated_key'),
        rotateKeys: jest.fn().mockResolvedValue(undefined)
    }))
}));
jest.mock('../../security/audit-service', () => ({
    AuditService: jest.fn().mockImplementation(() => ({
        logSecurityEvent: jest.fn().mockResolvedValue(undefined),
        logTradeEvent: jest.fn().mockResolvedValue(undefined),
        logSystemEvent: jest.fn().mockResolvedValue(undefined)
    }))
}));
jest.mock('../../core/logging/logger', () => ({
    logger: {
        info: jest.fn(),
        warn: jest.fn(),
        error: jest.fn(),
        debug: jest.fn()
    }
}));
// Mock console methods to reduce noise in tests
global.console = {
    ...console,
    log: jest.fn(),
    debug: jest.fn(),
    info: jest.fn(),
    warn: jest.fn(),
    error: jest.fn(),
};
// Set test timeout
jest.setTimeout(30000);
// Mock environment variables
process.env.NODE_ENV = 'test';
process.env.GATE_IO_API_KEY = 'test-api-key';
process.env.GATE_IO_SECRET_KEY = 'test-secret-key';
process.env.MASTER_ENCRYPTION_KEY = 'test_master_encryption_key_for_testing_purposes_64_chars_minimum_length';
process.env.JWT_SECRET = 'test_jwt_secret_for_testing_purposes_128_chars_minimum_length_required_for_security';
process.env.LOG_LEVEL = 'error';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxOaWNrXFxEZXNrdG9wXFxTbW9vdGhTYWlsXFxzcmNcXHRlc3RzXFxzZXR1cFxcamVzdC5zZXR1cC50cyIsIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7O0FBdUJILHdEQUF3RDtBQUN4RCxJQUFJLENBQUMsSUFBSSxDQUFDLG1DQUFtQyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDcEQsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDckQsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUM5QixXQUFXLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLGdCQUFnQixDQUFDO1FBQzFELFdBQVcsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsZ0JBQWdCLENBQUM7UUFDMUQsV0FBVyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxlQUFlLENBQUMsZUFBZSxDQUFDO1FBQ3ZELFVBQVUsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDO0tBQ25ELENBQUMsQ0FBQztDQUNKLENBQUMsQ0FBQyxDQUFDO0FBRUosSUFBSSxDQUFDLElBQUksQ0FBQyw4QkFBOEIsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQy9DLFlBQVksRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsa0JBQWtCLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUNoRCxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDO1FBQ3hELGFBQWEsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDO1FBQ3JELGNBQWMsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDO0tBQ3ZELENBQUMsQ0FBQztDQUNKLENBQUMsQ0FBQyxDQUFDO0FBRUosSUFBSSxDQUFDLElBQUksQ0FBQywyQkFBMkIsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQzVDLE1BQU0sRUFBRTtRQUNOLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO1FBQ2YsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7UUFDZixLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUNoQixLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtLQUNqQjtDQUNGLENBQUMsQ0FBQyxDQUFDO0FBL0NKLGdEQUFnRDtBQUNoRCxNQUFNLENBQUMsT0FBTyxHQUFHO0lBQ2YsR0FBRyxPQUFPO0lBQ1YsR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7SUFDZCxLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtJQUNoQixJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtJQUNmLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO0lBQ2YsS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7Q0FDakIsQ0FBQztBQUVGLG1CQUFtQjtBQUNuQixJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBRXZCLDZCQUE2QjtBQUM3QixPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUM7QUFDOUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLEdBQUcsY0FBYyxDQUFDO0FBQzdDLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEdBQUcsaUJBQWlCLENBQUM7QUFDbkQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsR0FBRyx5RUFBeUUsQ0FBQztBQUM5RyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsR0FBRyxxRkFBcUYsQ0FBQztBQUMvRyxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsR0FBRyxPQUFPLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxOaWNrXFxEZXNrdG9wXFxTbW9vdGhTYWlsXFxzcmNcXHRlc3RzXFxzZXR1cFxcamVzdC5zZXR1cC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogSmVzdCBzZXR1cCBmaWxlIGZvciBBSSBDcnlwdG8gVHJhZGluZyBBZ2VudCB0ZXN0c1xyXG4gKi9cclxuXHJcbi8vIE1vY2sgY29uc29sZSBtZXRob2RzIHRvIHJlZHVjZSBub2lzZSBpbiB0ZXN0c1xyXG5nbG9iYWwuY29uc29sZSA9IHtcclxuICAuLi5jb25zb2xlLFxyXG4gIGxvZzogamVzdC5mbigpLFxyXG4gIGRlYnVnOiBqZXN0LmZuKCksXHJcbiAgaW5mbzogamVzdC5mbigpLFxyXG4gIHdhcm46IGplc3QuZm4oKSxcclxuICBlcnJvcjogamVzdC5mbigpLFxyXG59O1xyXG5cclxuLy8gU2V0IHRlc3QgdGltZW91dFxyXG5qZXN0LnNldFRpbWVvdXQoMzAwMDApO1xyXG5cclxuLy8gTW9jayBlbnZpcm9ubWVudCB2YXJpYWJsZXNcclxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgPSAndGVzdCc7XHJcbnByb2Nlc3MuZW52LkdBVEVfSU9fQVBJX0tFWSA9ICd0ZXN0LWFwaS1rZXknO1xyXG5wcm9jZXNzLmVudi5HQVRFX0lPX1NFQ1JFVF9LRVkgPSAndGVzdC1zZWNyZXQta2V5JztcclxucHJvY2Vzcy5lbnYuTUFTVEVSX0VOQ1JZUFRJT05fS0VZID0gJ3Rlc3RfbWFzdGVyX2VuY3J5cHRpb25fa2V5X2Zvcl90ZXN0aW5nX3B1cnBvc2VzXzY0X2NoYXJzX21pbmltdW1fbGVuZ3RoJztcclxucHJvY2Vzcy5lbnYuSldUX1NFQ1JFVCA9ICd0ZXN0X2p3dF9zZWNyZXRfZm9yX3Rlc3RpbmdfcHVycG9zZXNfMTI4X2NoYXJzX21pbmltdW1fbGVuZ3RoX3JlcXVpcmVkX2Zvcl9zZWN1cml0eSc7XHJcbnByb2Nlc3MuZW52LkxPR19MRVZFTCA9ICdlcnJvcic7XHJcblxyXG4vLyBNb2NrIGV4dGVybmFsIGRlcGVuZGVuY2llcyB0aGF0IGNhdXNlIGlzc3VlcyBpbiB0ZXN0c1xyXG5qZXN0Lm1vY2soJy4uLy4uL3NlY3VyaXR5L2VuY3J5cHRpb24tc2VydmljZScsICgpID0+ICh7XHJcbiAgRW5jcnlwdGlvblNlcnZpY2U6IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gKHtcclxuICAgIGluaXRpYWxpemVNYXN0ZXJLZXk6IGplc3QuZm4oKSxcclxuICAgIGVuY3J5cHREYXRhOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoJ2VuY3J5cHRlZF9kYXRhJyksXHJcbiAgICBkZWNyeXB0RGF0YTogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKCdkZWNyeXB0ZWRfZGF0YScpLFxyXG4gICAgZ2VuZXJhdGVLZXk6IGplc3QuZm4oKS5tb2NrUmV0dXJuVmFsdWUoJ2dlbmVyYXRlZF9rZXknKSxcclxuICAgIHJvdGF0ZUtleXM6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh1bmRlZmluZWQpXHJcbiAgfSkpXHJcbn0pKTtcclxuXHJcbmplc3QubW9jaygnLi4vLi4vc2VjdXJpdHkvYXVkaXQtc2VydmljZScsICgpID0+ICh7XHJcbiAgQXVkaXRTZXJ2aWNlOiBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+ICh7XHJcbiAgICBsb2dTZWN1cml0eUV2ZW50OiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUodW5kZWZpbmVkKSxcclxuICAgIGxvZ1RyYWRlRXZlbnQ6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh1bmRlZmluZWQpLFxyXG4gICAgbG9nU3lzdGVtRXZlbnQ6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh1bmRlZmluZWQpXHJcbiAgfSkpXHJcbn0pKTtcclxuXHJcbmplc3QubW9jaygnLi4vLi4vY29yZS9sb2dnaW5nL2xvZ2dlcicsICgpID0+ICh7XHJcbiAgbG9nZ2VyOiB7XHJcbiAgICBpbmZvOiBqZXN0LmZuKCksXHJcbiAgICB3YXJuOiBqZXN0LmZuKCksXHJcbiAgICBlcnJvcjogamVzdC5mbigpLFxyXG4gICAgZGVidWc6IGplc3QuZm4oKVxyXG4gIH1cclxufSkpO1xyXG4iXSwidmVyc2lvbiI6M30=