{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\tunnel-load-balancer.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\tunnel-load-balancer.ts"],"sourcesContent":["import { EventEmitter } from 'events';\r\nimport { Logger } from '../core/logging/logger';\r\nimport { SSHTunnelManager, TunnelConnection, TunnelState } from './ssh-tunnel-manager';\r\nimport { TunnelHealthMonitor, TunnelHealthMetrics } from './tunnel-health-monitor';\r\nimport { TunnelStateTracker } from './tunnel-state-tracker';\r\n\r\n/**\r\n * Load balancing strategy types\r\n */\r\nexport enum LoadBalancingStrategy {\r\n  ROUND_ROBIN = 'ROUND_ROBIN',\r\n  LEAST_CONNECTIONS = 'LEAST_CONNECTIONS',\r\n  WEIGHTED_ROUND_ROBIN = 'WEIGHTED_ROUND_ROBIN',\r\n  HEALTH_BASED = 'HEALTH_BASED',\r\n  LATENCY_BASED = 'LATENCY_BASED',\r\n  RANDOM = 'RANDOM'\r\n}\r\n\r\n/**\r\n * Tunnel pool configuration\r\n */\r\nexport interface TunnelPoolConfig {\r\n  /** Minimum number of active tunnels */\r\n  minActiveTunnels: number;\r\n  /** Maximum number of active tunnels */\r\n  maxActiveTunnels: number;\r\n  /** Load balancing strategy */\r\n  strategy: LoadBalancingStrategy;\r\n  /** Health check threshold for tunnel selection */\r\n  healthThreshold: number;\r\n  /** Maximum latency threshold for tunnel selection */\r\n  maxLatencyThreshold: number;\r\n  /** Enable automatic failover */\r\n  enableFailover: boolean;\r\n  /** Failover timeout in milliseconds */\r\n  failoverTimeout: number;\r\n  /** Enable tunnel weight adjustment based on performance */\r\n  enableDynamicWeights: boolean;\r\n  /** Weight adjustment interval in milliseconds */\r\n  weightAdjustmentInterval: number;\r\n}\r\n\r\n/**\r\n * Tunnel weight information\r\n */\r\nexport interface TunnelWeight {\r\n  connectionId: string;\r\n  weight: number;\r\n  baseWeight: number;\r\n  performanceMultiplier: number;\r\n  healthMultiplier: number;\r\n  lastUpdated: Date;\r\n}\r\n\r\n/**\r\n * Load balancing statistics\r\n */\r\nexport interface LoadBalancingStats {\r\n  totalRequests: number;\r\n  requestsPerTunnel: Map<string, number>;\r\n  averageResponseTime: number;\r\n  failoverCount: number;\r\n  lastFailover: Date | null;\r\n  activeStrategy: LoadBalancingStrategy;\r\n  tunnelUtilization: Map<string, number>;\r\n}\r\n\r\n/**\r\n * Tunnel selection result\r\n */\r\nexport interface TunnelSelection {\r\n  connection: TunnelConnection;\r\n  reason: string;\r\n  weight: number;\r\n  healthScore: number;\r\n  latency: number;\r\n  selectionTime: Date;\r\n}\r\n\r\n/**\r\n * Tunnel Load Balancer\r\n * Implements intelligent load balancing and failover for multiple SSH tunnels\r\n */\r\nexport class TunnelLoadBalancer extends EventEmitter {\r\n  private logger: Logger;\r\n  private tunnelManager: SSHTunnelManager;\r\n  private healthMonitor: TunnelHealthMonitor;\r\n  private stateTracker: TunnelStateTracker;\r\n  private config: TunnelPoolConfig;\r\n  private tunnelWeights: Map<string, TunnelWeight>;\r\n  private loadBalancingStats: LoadBalancingStats;\r\n  private roundRobinIndex: number;\r\n  private weightAdjustmentTimer: NodeJS.Timeout | null;\r\n  private isEnabled: boolean;\r\n\r\n  constructor(\r\n    logger: Logger,\r\n    tunnelManager: SSHTunnelManager,\r\n    healthMonitor: TunnelHealthMonitor,\r\n    stateTracker: TunnelStateTracker,\r\n    config?: Partial<TunnelPoolConfig>\r\n  ) {\r\n    super();\r\n    this.logger = logger;\r\n    this.tunnelManager = tunnelManager;\r\n    this.healthMonitor = healthMonitor;\r\n    this.stateTracker = stateTracker;\r\n    this.tunnelWeights = new Map();\r\n    this.roundRobinIndex = 0;\r\n    this.weightAdjustmentTimer = null;\r\n    this.isEnabled = false;\r\n\r\n    // Default configuration\r\n    this.config = {\r\n      minActiveTunnels: 1,\r\n      maxActiveTunnels: 3,\r\n      strategy: LoadBalancingStrategy.HEALTH_BASED,\r\n      healthThreshold: 70,\r\n      maxLatencyThreshold: 1000,\r\n      enableFailover: true,\r\n      failoverTimeout: 30000,\r\n      enableDynamicWeights: true,\r\n      weightAdjustmentInterval: 60000,\r\n      ...config\r\n    };\r\n\r\n    // Initialize statistics\r\n    this.loadBalancingStats = {\r\n      totalRequests: 0,\r\n      requestsPerTunnel: new Map(),\r\n      averageResponseTime: 0,\r\n      failoverCount: 0,\r\n      lastFailover: null,\r\n      activeStrategy: this.config.strategy,\r\n      tunnelUtilization: new Map()\r\n    };\r\n\r\n    this.setupEventListeners();\r\n    this.logger.info('Tunnel Load Balancer initialized', this.config);\r\n  }\r\n\r\n  /**\r\n   * Enable load balancing\r\n   */\r\n  enable(): void {\r\n    if (this.isEnabled) {\r\n      this.logger.warn('Load balancing is already enabled');\r\n      return;\r\n    }\r\n\r\n    this.isEnabled = true;\r\n    this.logger.info('Load balancing enabled');\r\n\r\n    // Initialize tunnel weights\r\n    this.initializeTunnelWeights();\r\n\r\n    // Start dynamic weight adjustment if enabled\r\n    if (this.config.enableDynamicWeights) {\r\n      this.startWeightAdjustment();\r\n    }\r\n\r\n    this.emit('loadBalancingEnabled');\r\n  }\r\n\r\n  /**\r\n   * Disable load balancing\r\n   */\r\n  disable(): void {\r\n    if (!this.isEnabled) {\r\n      this.logger.warn('Load balancing is already disabled');\r\n      return;\r\n    }\r\n\r\n    this.isEnabled = false;\r\n    this.logger.info('Load balancing disabled');\r\n\r\n    // Stop weight adjustment\r\n    if (this.weightAdjustmentTimer) {\r\n      clearInterval(this.weightAdjustmentTimer);\r\n      this.weightAdjustmentTimer = null;\r\n    }\r\n\r\n    this.emit('loadBalancingDisabled');\r\n  }\r\n\r\n  /**\r\n   * Select the best tunnel for a request\r\n   * \r\n   * @param excludeConnections - Connection IDs to exclude from selection\r\n   * @returns Selected tunnel or null if none available\r\n   */\r\n  selectTunnel(excludeConnections: string[] = []): TunnelSelection | null {\r\n    if (!this.isEnabled) {\r\n      throw new Error('Load balancing is not enabled');\r\n    }\r\n\r\n    const availableTunnels = this.getAvailableTunnels(excludeConnections);\r\n    \r\n    if (availableTunnels.length === 0) {\r\n      this.logger.warn('No available tunnels for selection');\r\n      return null;\r\n    }\r\n\r\n    let selectedConnection: TunnelConnection;\r\n    let selectionReason: string;\r\n\r\n    switch (this.config.strategy) {\r\n      case LoadBalancingStrategy.ROUND_ROBIN:\r\n        selectedConnection = this.selectRoundRobin(availableTunnels);\r\n        selectionReason = 'Round robin selection';\r\n        break;\r\n\r\n      case LoadBalancingStrategy.LEAST_CONNECTIONS:\r\n        selectedConnection = this.selectLeastConnections(availableTunnels);\r\n        selectionReason = 'Least connections selection';\r\n        break;\r\n\r\n      case LoadBalancingStrategy.WEIGHTED_ROUND_ROBIN:\r\n        selectedConnection = this.selectWeightedRoundRobin(availableTunnels);\r\n        selectionReason = 'Weighted round robin selection';\r\n        break;\r\n\r\n      case LoadBalancingStrategy.HEALTH_BASED:\r\n        selectedConnection = this.selectHealthBased(availableTunnels);\r\n        selectionReason = 'Health-based selection';\r\n        break;\r\n\r\n      case LoadBalancingStrategy.LATENCY_BASED:\r\n        selectedConnection = this.selectLatencyBased(availableTunnels);\r\n        selectionReason = 'Latency-based selection';\r\n        break;\r\n\r\n      case LoadBalancingStrategy.RANDOM:\r\n        selectedConnection = this.selectRandom(availableTunnels);\r\n        selectionReason = 'Random selection';\r\n        break;\r\n\r\n      default:\r\n        selectedConnection = availableTunnels[0];\r\n        selectionReason = 'Default selection';\r\n    }\r\n\r\n    // Get additional metrics for the selection\r\n    const healthMetrics = this.healthMonitor.getHealthMetrics(selectedConnection.id);\r\n    const tunnelWeight = this.tunnelWeights.get(selectedConnection.id);\r\n\r\n    const selection: TunnelSelection = {\r\n      connection: selectedConnection,\r\n      reason: selectionReason,\r\n      weight: tunnelWeight?.weight || 1,\r\n      healthScore: healthMetrics?.healthScore || 0,\r\n      latency: healthMetrics?.latency || 0,\r\n      selectionTime: new Date()\r\n    };\r\n\r\n    // Update statistics\r\n    this.updateSelectionStats(selectedConnection.id);\r\n\r\n    this.logger.debug(`Tunnel selected: ${selectedConnection.id}`, {\r\n      strategy: this.config.strategy,\r\n      reason: selectionReason,\r\n      healthScore: selection.healthScore,\r\n      latency: selection.latency\r\n    });\r\n\r\n    this.emit('tunnelSelected', selection);\r\n    return selection;\r\n  }\r\n\r\n  /**\r\n   * Get available tunnels for load balancing\r\n   * \r\n   * @param excludeConnections - Connection IDs to exclude\r\n   * @returns Array of available tunnel connections\r\n   */\r\n  getAvailableTunnels(excludeConnections: string[] = []): TunnelConnection[] {\r\n    const allConnections = this.tunnelManager.getAllConnections();\r\n    \r\n    return allConnections.filter(connection => {\r\n      // Exclude specified connections\r\n      if (excludeConnections.includes(connection.id)) {\r\n        return false;\r\n      }\r\n\r\n      // Must be connected\r\n      if (connection.state !== TunnelState.CONNECTED) {\r\n        return false;\r\n      }\r\n\r\n      // Check health threshold\r\n      const healthMetrics = this.healthMonitor.getHealthMetrics(connection.id);\r\n      if (healthMetrics && healthMetrics.healthScore < this.config.healthThreshold) {\r\n        return false;\r\n      }\r\n\r\n      // Check latency threshold\r\n      if (healthMetrics && healthMetrics.latency > this.config.maxLatencyThreshold) {\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Perform failover to backup tunnels\r\n   * \r\n   * @param failedConnectionId - ID of the failed connection\r\n   * @returns New tunnel selection or null if no alternatives\r\n   */\r\n  async performFailover(failedConnectionId: string): Promise<TunnelSelection | null> {\r\n    if (!this.config.enableFailover) {\r\n      this.logger.warn('Failover is disabled');\r\n      return null;\r\n    }\r\n\r\n    this.logger.warn(`Performing failover from connection: ${failedConnectionId}`);\r\n\r\n    // Update failover statistics\r\n    this.loadBalancingStats.failoverCount++;\r\n    this.loadBalancingStats.lastFailover = new Date();\r\n\r\n    // Select alternative tunnel\r\n    const alternativeTunnel = this.selectTunnel([failedConnectionId]);\r\n    \r\n    if (!alternativeTunnel) {\r\n      this.logger.error('No alternative tunnels available for failover');\r\n      this.emit('failoverFailed', failedConnectionId);\r\n      return null;\r\n    }\r\n\r\n    this.logger.info(`Failover successful: ${failedConnectionId} -> ${alternativeTunnel.connection.id}`);\r\n    this.emit('failoverSuccessful', failedConnectionId, alternativeTunnel);\r\n\r\n    return alternativeTunnel;\r\n  }\r\n\r\n  /**\r\n   * Get load balancing statistics\r\n   * \r\n   * @returns Current load balancing statistics\r\n   */\r\n  getLoadBalancingStats(): LoadBalancingStats {\r\n    return { ...this.loadBalancingStats };\r\n  }\r\n\r\n  /**\r\n   * Get tunnel weights\r\n   * \r\n   * @returns Map of tunnel weights\r\n   */\r\n  getTunnelWeights(): Map<string, TunnelWeight> {\r\n    return new Map(this.tunnelWeights);\r\n  }\r\n\r\n  /**\r\n   * Update tunnel weight manually\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @param weight - New weight value\r\n   */\r\n  updateTunnelWeight(connectionId: string, weight: number): void {\r\n    const tunnelWeight = this.tunnelWeights.get(connectionId);\r\n    if (!tunnelWeight) {\r\n      this.logger.warn(`Tunnel weight not found: ${connectionId}`);\r\n      return;\r\n    }\r\n\r\n    tunnelWeight.weight = Math.max(0.1, Math.min(10, weight)); // Clamp between 0.1 and 10\r\n    tunnelWeight.lastUpdated = new Date();\r\n\r\n    this.logger.info(`Updated tunnel weight: ${connectionId}`, { weight: tunnelWeight.weight });\r\n    this.emit('tunnelWeightUpdated', connectionId, tunnelWeight);\r\n  }\r\n\r\n  /**\r\n   * Update load balancing strategy\r\n   * \r\n   * @param strategy - New load balancing strategy\r\n   */\r\n  updateStrategy(strategy: LoadBalancingStrategy): void {\r\n    const oldStrategy = this.config.strategy;\r\n    this.config.strategy = strategy;\r\n    this.loadBalancingStats.activeStrategy = strategy;\r\n\r\n    // Reset round robin index when changing strategy\r\n    if (strategy === LoadBalancingStrategy.ROUND_ROBIN || strategy === LoadBalancingStrategy.WEIGHTED_ROUND_ROBIN) {\r\n      this.roundRobinIndex = 0;\r\n    }\r\n\r\n    this.logger.info(`Load balancing strategy updated: ${oldStrategy} -> ${strategy}`);\r\n    this.emit('strategyUpdated', oldStrategy, strategy);\r\n  }\r\n\r\n  /**\r\n   * Setup event listeners\r\n   */\r\n  private setupEventListeners(): void {\r\n    // Listen for tunnel connections\r\n    this.tunnelManager.on('tunnelConnected', (connection) => {\r\n      this.initializeTunnelWeight(connection.id);\r\n    });\r\n\r\n    // Listen for tunnel disconnections\r\n    this.tunnelManager.on('tunnelDisconnected', (connection) => {\r\n      this.tunnelWeights.delete(connection.id);\r\n    });\r\n\r\n    // Listen for health changes\r\n    this.healthMonitor.on('connectionUnhealthy', (connection) => {\r\n      if (this.config.enableFailover) {\r\n        this.performFailover(connection.id);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Initialize tunnel weights for all connections\r\n   */\r\n  private initializeTunnelWeights(): void {\r\n    const connections = this.tunnelManager.getAllConnections();\r\n    \r\n    for (const connection of connections) {\r\n      this.initializeTunnelWeight(connection.id);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialize weight for a specific tunnel\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   */\r\n  private initializeTunnelWeight(connectionId: string): void {\r\n    if (this.tunnelWeights.has(connectionId)) {\r\n      return;\r\n    }\r\n\r\n    const weight: TunnelWeight = {\r\n      connectionId,\r\n      weight: 1.0,\r\n      baseWeight: 1.0,\r\n      performanceMultiplier: 1.0,\r\n      healthMultiplier: 1.0,\r\n      lastUpdated: new Date()\r\n    };\r\n\r\n    this.tunnelWeights.set(connectionId, weight);\r\n    this.loadBalancingStats.requestsPerTunnel.set(connectionId, 0);\r\n    this.loadBalancingStats.tunnelUtilization.set(connectionId, 0);\r\n\r\n    this.logger.debug(`Initialized tunnel weight: ${connectionId}`);\r\n  }\r\n\r\n  /**\r\n   * Start dynamic weight adjustment\r\n   */\r\n  private startWeightAdjustment(): void {\r\n    if (this.weightAdjustmentTimer) {\r\n      clearInterval(this.weightAdjustmentTimer);\r\n    }\r\n\r\n    this.weightAdjustmentTimer = setInterval(() => {\r\n      this.adjustTunnelWeights();\r\n    }, this.config.weightAdjustmentInterval);\r\n\r\n    this.logger.info('Started dynamic weight adjustment');\r\n  }\r\n\r\n  /**\r\n   * Adjust tunnel weights based on performance\r\n   */\r\n  private adjustTunnelWeights(): void {\r\n    for (const [connectionId, weight] of this.tunnelWeights.entries()) {\r\n      const healthMetrics = this.healthMonitor.getHealthMetrics(connectionId);\r\n      if (!healthMetrics) continue;\r\n\r\n      // Calculate performance multiplier based on latency and health\r\n      const latencyMultiplier = Math.max(0.1, 1 - (healthMetrics.latency / this.config.maxLatencyThreshold));\r\n      const healthMultiplier = Math.max(0.1, healthMetrics.healthScore / 100);\r\n\r\n      weight.performanceMultiplier = latencyMultiplier;\r\n      weight.healthMultiplier = healthMultiplier;\r\n      weight.weight = weight.baseWeight * weight.performanceMultiplier * weight.healthMultiplier;\r\n      weight.lastUpdated = new Date();\r\n\r\n      this.logger.debug(`Adjusted tunnel weight: ${connectionId}`, {\r\n        weight: weight.weight,\r\n        latencyMultiplier,\r\n        healthMultiplier\r\n      });\r\n    }\r\n\r\n    this.emit('weightsAdjusted', this.tunnelWeights);\r\n  }\r\n\r\n  /**\r\n   * Select tunnel using round robin strategy\r\n   * \r\n   * @param availableTunnels - Available tunnel connections\r\n   * @returns Selected tunnel connection\r\n   */\r\n  private selectRoundRobin(availableTunnels: TunnelConnection[]): TunnelConnection {\r\n    const selected = availableTunnels[this.roundRobinIndex % availableTunnels.length];\r\n    this.roundRobinIndex = (this.roundRobinIndex + 1) % availableTunnels.length;\r\n    return selected;\r\n  }\r\n\r\n  /**\r\n   * Select tunnel using least connections strategy\r\n   * \r\n   * @param availableTunnels - Available tunnel connections\r\n   * @returns Selected tunnel connection\r\n   */\r\n  private selectLeastConnections(availableTunnels: TunnelConnection[]): TunnelConnection {\r\n    return availableTunnels.reduce((least, current) => {\r\n      const leastRequests = this.loadBalancingStats.requestsPerTunnel.get(least.id) || 0;\r\n      const currentRequests = this.loadBalancingStats.requestsPerTunnel.get(current.id) || 0;\r\n      return currentRequests < leastRequests ? current : least;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Select tunnel using weighted round robin strategy\r\n   * \r\n   * @param availableTunnels - Available tunnel connections\r\n   * @returns Selected tunnel connection\r\n   */\r\n  private selectWeightedRoundRobin(availableTunnels: TunnelConnection[]): TunnelConnection {\r\n    // Calculate total weight\r\n    const totalWeight = availableTunnels.reduce((sum, tunnel) => {\r\n      const weight = this.tunnelWeights.get(tunnel.id)?.weight || 1;\r\n      return sum + weight;\r\n    }, 0);\r\n\r\n    // Generate random number\r\n    let random = Math.random() * totalWeight;\r\n\r\n    // Select based on weight\r\n    for (const tunnel of availableTunnels) {\r\n      const weight = this.tunnelWeights.get(tunnel.id)?.weight || 1;\r\n      random -= weight;\r\n      if (random <= 0) {\r\n        return tunnel;\r\n      }\r\n    }\r\n\r\n    // Fallback to first tunnel\r\n    return availableTunnels[0];\r\n  }\r\n\r\n  /**\r\n   * Select tunnel using health-based strategy\r\n   * \r\n   * @param availableTunnels - Available tunnel connections\r\n   * @returns Selected tunnel connection\r\n   */\r\n  private selectHealthBased(availableTunnels: TunnelConnection[]): TunnelConnection {\r\n    return availableTunnels.reduce((best, current) => {\r\n      const bestHealth = this.healthMonitor.getHealthMetrics(best.id)?.healthScore || 0;\r\n      const currentHealth = this.healthMonitor.getHealthMetrics(current.id)?.healthScore || 0;\r\n      return currentHealth > bestHealth ? current : best;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Select tunnel using latency-based strategy\r\n   * \r\n   * @param availableTunnels - Available tunnel connections\r\n   * @returns Selected tunnel connection\r\n   */\r\n  private selectLatencyBased(availableTunnels: TunnelConnection[]): TunnelConnection {\r\n    return availableTunnels.reduce((best, current) => {\r\n      const bestLatency = this.healthMonitor.getHealthMetrics(best.id)?.latency || Infinity;\r\n      const currentLatency = this.healthMonitor.getHealthMetrics(current.id)?.latency || Infinity;\r\n      return currentLatency < bestLatency ? current : best;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Select tunnel using random strategy\r\n   * \r\n   * @param availableTunnels - Available tunnel connections\r\n   * @returns Selected tunnel connection\r\n   */\r\n  private selectRandom(availableTunnels: TunnelConnection[]): TunnelConnection {\r\n    const randomIndex = Math.floor(Math.random() * availableTunnels.length);\r\n    return availableTunnels[randomIndex];\r\n  }\r\n\r\n  /**\r\n   * Update selection statistics\r\n   * \r\n   * @param connectionId - Selected connection ID\r\n   */\r\n  private updateSelectionStats(connectionId: string): void {\r\n    this.loadBalancingStats.totalRequests++;\r\n    \r\n    const currentRequests = this.loadBalancingStats.requestsPerTunnel.get(connectionId) || 0;\r\n    this.loadBalancingStats.requestsPerTunnel.set(connectionId, currentRequests + 1);\r\n\r\n    // Update utilization\r\n    const totalRequests = this.loadBalancingStats.totalRequests;\r\n    for (const [tunnelId, requests] of this.loadBalancingStats.requestsPerTunnel.entries()) {\r\n      const utilization = (requests / totalRequests) * 100;\r\n      this.loadBalancingStats.tunnelUtilization.set(tunnelId, utilization);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cleanup load balancer resources\r\n   */\r\n  cleanup(): void {\r\n    this.disable();\r\n    this.tunnelWeights.clear();\r\n    this.loadBalancingStats.requestsPerTunnel.clear();\r\n    this.loadBalancingStats.tunnelUtilization.clear();\r\n    this.logger.info('Tunnel load balancer cleanup completed');\r\n  }\r\n}"],"version":3}