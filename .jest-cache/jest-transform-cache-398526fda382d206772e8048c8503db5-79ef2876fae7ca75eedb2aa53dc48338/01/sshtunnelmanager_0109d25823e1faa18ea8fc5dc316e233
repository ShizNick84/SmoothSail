790dbb819752f503397a8eccce1bb4cc
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SSHTunnelManager = exports.TunnelState = void 0;
const events_1 = require("events");
const child_process_1 = require("child_process");
const fs_1 = require("fs");
/**
 * Tunnel connection states
 */
var TunnelState;
(function (TunnelState) {
    TunnelState["DISCONNECTED"] = "DISCONNECTED";
    TunnelState["CONNECTING"] = "CONNECTING";
    TunnelState["CONNECTED"] = "CONNECTED";
    TunnelState["RECONNECTING"] = "RECONNECTING";
    TunnelState["FAILED"] = "FAILED";
    TunnelState["TERMINATED"] = "TERMINATED";
})(TunnelState || (exports.TunnelState = TunnelState = {}));
/**
 * SSH Tunnel Manager
 * Manages SSH tunnel connections to Oracle Free Tier with authentication,
 * state management, and connection validation
 */
class SSHTunnelManager extends events_1.EventEmitter {
    logger;
    encryptionService;
    connections;
    defaultConfig;
    constructor(logger, encryptionService) {
        super();
        this.logger = logger;
        this.encryptionService = encryptionService;
        this.connections = new Map();
        // Default configuration for Oracle Free Tier
        this.defaultConfig = {
            oracleIP: '168.138.104.117',
            sshPort: 22,
            keepAlive: true,
            compression: true,
            connectionTimeout: 30,
            serverAliveInterval: 60,
            serverAliveCountMax: 3
        };
        this.logger.info('SSH Tunnel Manager initialized');
    }
    /**
     * Create a new SSH tunnel connection to Oracle Free Tier
     * Implements secure authentication with private key management
     *
     * @param config - Tunnel configuration parameters
     * @returns Promise resolving to tunnel connection
     */
    async createTunnel(config) {
        const fullConfig = { ...this.defaultConfig, ...config };
        // Validate configuration
        await this.validateTunnelConfig(fullConfig);
        // Generate unique connection ID
        const connectionId = this.generateConnectionId();
        // Create connection object
        const connection = {
            id: connectionId,
            config: fullConfig,
            process: null,
            state: TunnelState.DISCONNECTED,
            connectedAt: null,
            lastActivity: new Date(),
            stats: {
                bytesTransferred: 0,
                uptime: 0,
                reconnectAttempts: 0,
                lastError: null,
                qualityScore: 0
            }
        };
        // Store connection
        this.connections.set(connectionId, connection);
        this.logger.info(`Created SSH tunnel connection: ${connectionId}`, {
            oracleIP: fullConfig.oracleIP,
            localPort: fullConfig.localPort,
            remotePort: fullConfig.remotePort
        });
        return connection;
    }
    /**
     * Establish SSH tunnel connection
     * Implements connection authentication and state management
     *
     * @param connectionId - Connection identifier
     * @returns Promise resolving when connection is established
     */
    async establishTunnel(connectionId) {
        const connection = this.connections.get(connectionId);
        if (!connection) {
            throw new Error(`Connection not found: ${connectionId}`);
        }
        if (connection.state === TunnelState.CONNECTED) {
            this.logger.warn(`Tunnel already connected: ${connectionId}`);
            return;
        }
        try {
            // Update state to connecting
            this.updateConnectionState(connection, TunnelState.CONNECTING);
            // Validate private key exists and is accessible
            await this.validatePrivateKey(connection.config.privateKeyPath);
            // Build SSH command arguments
            const sshArgs = this.buildSSHArguments(connection.config);
            this.logger.info(`Establishing SSH tunnel: ${connectionId}`, {
                command: 'ssh',
                args: sshArgs.filter(arg => !arg.includes('IdentityFile')) // Don't log private key path
            });
            // Spawn SSH process
            const sshProcess = (0, child_process_1.spawn)('ssh', sshArgs, {
                stdio: ['pipe', 'pipe', 'pipe'],
                detached: false
            });
            connection.process = sshProcess;
            // Set up process event handlers
            this.setupProcessHandlers(connection);
            // Wait for connection establishment
            await this.waitForConnection(connection);
            // Update connection state
            this.updateConnectionState(connection, TunnelState.CONNECTED);
            connection.connectedAt = new Date();
            this.logger.info(`SSH tunnel established successfully: ${connectionId}`);
            this.emit('tunnelConnected', connection);
        }
        catch (error) {
            this.logger.error(`Failed to establish SSH tunnel: ${connectionId}`, error);
            this.updateConnectionState(connection, TunnelState.FAILED);
            connection.stats.lastError = error instanceof Error ? error.message : String(error);
            this.emit('tunnelError', connection, error);
            throw error;
        }
    }
    /**
     * Disconnect SSH tunnel
     * Gracefully terminates the SSH connection
     *
     * @param connectionId - Connection identifier
     * @returns Promise resolving when disconnected
     */
    async disconnectTunnel(connectionId) {
        const connection = this.connections.get(connectionId);
        if (!connection) {
            throw new Error(`Connection not found: ${connectionId}`);
        }
        if (connection.state === TunnelState.DISCONNECTED) {
            this.logger.warn(`Tunnel already disconnected: ${connectionId}`);
            return;
        }
        try {
            this.logger.info(`Disconnecting SSH tunnel: ${connectionId}`);
            if (connection.process) {
                // Graceful termination
                connection.process.kill('SIGTERM');
                // Wait for process to exit
                await new Promise((resolve) => {
                    const timeout = setTimeout(() => {
                        // Force kill if graceful termination fails
                        if (connection.process && !connection.process.killed) {
                            connection.process.kill('SIGKILL');
                        }
                        resolve();
                    }, 5000);
                    connection.process.on('exit', () => {
                        clearTimeout(timeout);
                        resolve();
                    });
                });
            }
            this.updateConnectionState(connection, TunnelState.DISCONNECTED);
            connection.process = null;
            connection.connectedAt = null;
            this.logger.info(`SSH tunnel disconnected: ${connectionId}`);
            this.emit('tunnelDisconnected', connection);
        }
        catch (error) {
            this.logger.error(`Error disconnecting SSH tunnel: ${connectionId}`, error);
            throw error;
        }
    }
    /**
     * Get connection by ID
     *
     * @param connectionId - Connection identifier
     * @returns Tunnel connection or undefined
     */
    getConnection(connectionId) {
        return this.connections.get(connectionId);
    }
    /**
     * Get all connections
     *
     * @returns Array of all tunnel connections
     */
    getAllConnections() {
        return Array.from(this.connections.values());
    }
    /**
     * Get active connections
     *
     * @returns Array of connected tunnel connections
     */
    getActiveConnections() {
        return this.getAllConnections().filter(conn => conn.state === TunnelState.CONNECTED);
    }
    /**
     * Validate tunnel configuration
     * Ensures all required parameters are present and valid
     *
     * @param config - Tunnel configuration to validate
     */
    async validateTunnelConfig(config) {
        const requiredFields = [
            'oracleIP', 'username', 'privateKeyPath', 'localPort', 'remotePort'
        ];
        for (const field of requiredFields) {
            if (!config[field]) {
                throw new Error(`Missing required tunnel configuration: ${field}`);
            }
        }
        // Validate IP address format
        if (!this.isValidIP(config.oracleIP)) {
            throw new Error(`Invalid Oracle IP address: ${config.oracleIP}`);
        }
        // Validate port ranges
        if (config.localPort < 1 || config.localPort > 65535) {
            throw new Error(`Invalid local port: ${config.localPort}`);
        }
        if (config.remotePort < 1 || config.remotePort > 65535) {
            throw new Error(`Invalid remote port: ${config.remotePort}`);
        }
        this.logger.debug('Tunnel configuration validated successfully');
    }
    /**
     * Validate private key file exists and is accessible
     *
     * @param privateKeyPath - Path to private key file
     */
    async validatePrivateKey(privateKeyPath) {
        try {
            const stats = await fs_1.promises.stat(privateKeyPath);
            if (!stats.isFile()) {
                throw new Error(`Private key path is not a file: ${privateKeyPath}`);
            }
            // Check file permissions (should be readable by owner only)
            await fs_1.promises.access(privateKeyPath, fs_1.promises.constants.R_OK);
            this.logger.debug(`Private key validated: ${privateKeyPath}`);
        }
        catch (error) {
            throw new Error(`Private key validation failed: ${error instanceof Error ? error.message : String(error)}`);
        }
    }
    /**
     * Build SSH command arguments
     *
     * @param config - Tunnel configuration
     * @returns Array of SSH command arguments
     */
    buildSSHArguments(config) {
        const args = [
            '-N', // No remote command execution
            '-T', // Disable pseudo-terminal allocation
            '-o', 'StrictHostKeyChecking=no', // Accept new host keys
            '-o', 'UserKnownHostsFile=/dev/null', // Don't save host keys
            '-o', `ConnectTimeout=${config.connectionTimeout}`,
            '-o', `ServerAliveInterval=${config.serverAliveInterval}`,
            '-o', `ServerAliveCountMax=${config.serverAliveCountMax}`,
            '-i', config.privateKeyPath, // Identity file
            '-p', config.sshPort.toString(), // SSH port
            '-L', `${config.localPort}:localhost:${config.remotePort}`, // Local port forwarding
        ];
        // Add compression if enabled
        if (config.compression) {
            args.push('-C');
        }
        // Add keep-alive if enabled
        if (config.keepAlive) {
            args.push('-o', 'TCPKeepAlive=yes');
        }
        // Add connection target
        args.push(`${config.username}@${config.oracleIP}`);
        return args;
    }
    /**
     * Set up SSH process event handlers
     *
     * @param connection - Tunnel connection
     */
    setupProcessHandlers(connection) {
        if (!connection.process)
            return;
        const process = connection.process;
        process.stdout?.on('data', (data) => {
            this.logger.debug(`SSH stdout [${connection.id}]: ${data.toString().trim()}`);
        });
        process.stderr?.on('data', (data) => {
            const message = data.toString().trim();
            this.logger.debug(`SSH stderr [${connection.id}]: ${message}`);
            // Check for connection success indicators
            if (message.includes('Local forwarding listening')) {
                this.emit('tunnelReady', connection);
            }
        });
        process.on('exit', (code, signal) => {
            this.logger.info(`SSH process exited [${connection.id}]`, { code, signal });
            if (connection.state === TunnelState.CONNECTED) {
                this.updateConnectionState(connection, TunnelState.DISCONNECTED);
                this.emit('tunnelDisconnected', connection);
            }
            connection.process = null;
        });
        process.on('error', (error) => {
            this.logger.error(`SSH process error [${connection.id}]`, error);
            this.updateConnectionState(connection, TunnelState.FAILED);
            connection.stats.lastError = error.message;
            this.emit('tunnelError', connection, error);
        });
    }
    /**
     * Wait for SSH tunnel connection to be established
     *
     * @param connection - Tunnel connection
     * @param timeoutMs - Timeout in milliseconds
     */
    async waitForConnection(connection, timeoutMs = 30000) {
        return new Promise((resolve, reject) => {
            const timeout = setTimeout(() => {
                reject(new Error(`SSH tunnel connection timeout: ${connection.id}`));
            }, timeoutMs);
            const onReady = () => {
                clearTimeout(timeout);
                this.removeListener('tunnelError', onError);
                resolve();
            };
            const onError = (conn, error) => {
                if (conn.id === connection.id) {
                    clearTimeout(timeout);
                    this.removeListener('tunnelReady', onReady);
                    reject(error);
                }
            };
            this.once('tunnelReady', onReady);
            this.once('tunnelError', onError);
        });
    }
    /**
     * Update connection state and emit events
     *
     * @param connection - Tunnel connection
     * @param newState - New connection state
     */
    updateConnectionState(connection, newState) {
        const oldState = connection.state;
        connection.state = newState;
        connection.lastActivity = new Date();
        this.logger.debug(`Tunnel state changed [${connection.id}]: ${oldState} -> ${newState}`);
        this.emit('stateChanged', connection, oldState, newState);
    }
    /**
     * Generate unique connection ID
     *
     * @returns Unique connection identifier
     */
    generateConnectionId() {
        return `tunnel_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }
    /**
     * Validate IP address format
     *
     * @param ip - IP address to validate
     * @returns True if valid IP address
     */
    isValidIP(ip) {
        const ipRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;
        return ipRegex.test(ip);
    }
    /**
     * Cleanup all connections on shutdown
     */
    async cleanup() {
        this.logger.info('Cleaning up SSH tunnel connections');
        const disconnectPromises = Array.from(this.connections.keys()).map(connectionId => this.disconnectTunnel(connectionId).catch(error => this.logger.error(`Error disconnecting tunnel ${connectionId}`, error)));
        await Promise.all(disconnectPromises);
        this.connections.clear();
        this.logger.info('SSH tunnel cleanup completed');
    }
}
exports.SSHTunnelManager = SSHTunnelManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,