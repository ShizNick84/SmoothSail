{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\strategies\\__tests__\\rsi.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\strategies\\__tests__\\rsi.test.ts"],"sourcesContent":["/**\r\n * Unit Tests for RSI Strategy\r\n * \r\n * Comprehensive test suite covering RSI calculation, divergence detection,\r\n * signal generation, and all edge cases for the RSIStrategy class.\r\n * \r\n * Requirements: 17.1, 17.3, 17.6 - Unit tests for technical indicators\r\n */\r\n\r\nimport { RSIStrategy } from '../rsi';\r\nimport { MarketData, TradingSignal, RSISignal } from '../types';\r\n\r\ndescribe('RSIStrategy', () => {\r\n  let strategy: RSIStrategy;\r\n  let mockMarketData: MarketData[];\r\n\r\n  beforeEach(() => {\r\n    strategy = new RSIStrategy();\r\n    \r\n    // Create realistic mock market data for RSI testing\r\n    mockMarketData = [];\r\n    const basePrice = 42000;\r\n    \r\n    // Generate 30 days of data with varying price movements\r\n    for (let i = 0; i < 30; i++) {\r\n      const priceChange = (Math.random() - 0.5) * 1000; // Random price changes\r\n      const close = basePrice + priceChange + (i * 10); // Slight upward trend\r\n      \r\n      mockMarketData.push({\r\n        symbol: 'BTC/USDT',\r\n        timestamp: new Date(2024, 0, i + 1),\r\n        open: close - 100,\r\n        high: close + 200,\r\n        low: close - 200,\r\n        close: close,\r\n        volume: 1000 + Math.random() * 500\r\n      });\r\n    }\r\n  });\r\n\r\n  describe('calculateRSI', () => {\r\n    it('should calculate RSI correctly for standard 14-period', () => {\r\n      // Create data with known pattern for RSI calculation\r\n      const testData: MarketData[] = [];\r\n      const prices = [44, 44.34, 44.09, 44.15, 43.61, 44.33, 44.83, 45.85, 46.08, 45.89, 46.03, 46.83, 46.69, 46.45, 46.59];\r\n      \r\n      for (let i = 0; i < prices.length; i++) {\r\n        testData.push({\r\n          symbol: 'TEST',\r\n          timestamp: new Date(2024, 0, i + 1),\r\n          open: prices[i],\r\n          high: prices[i] + 0.5,\r\n          low: prices[i] - 0.5,\r\n          close: prices[i],\r\n          volume: 1000\r\n        });\r\n      }\r\n\r\n      const result = strategy.calculateRSI(testData, 14);\r\n      \r\n      expect(result).toBeDefined();\r\n      expect(result).toBeGreaterThan(0);\r\n      expect(result).toBeLessThan(100);\r\n      expect(typeof result).toBe('number');\r\n    });\r\n\r\n    it('should return null for insufficient data', () => {\r\n      const shortData = mockMarketData.slice(0, 10);\r\n      const result = strategy.calculateRSI(shortData, 14);\r\n      \r\n      expect(result).toBeNull();\r\n    });\r\n\r\n    it('should handle minimum required data (period + 1)', () => {\r\n      const minData = mockMarketData.slice(0, 15); // 14 + 1\r\n      const result = strategy.calculateRSI(minData, 14);\r\n      \r\n      expect(result).toBeDefined();\r\n      expect(typeof result).toBe('number');\r\n    });\r\n\r\n    it('should return 100 for all gains (no losses)', () => {\r\n      const testData: MarketData[] = [];\r\n      for (let i = 0; i < 20; i++) {\r\n        testData.push({\r\n          symbol: 'TEST',\r\n          timestamp: new Date(2024, 0, i + 1),\r\n          open: 100 + i,\r\n          high: 100 + i + 1,\r\n          low: 100 + i - 0.5,\r\n          close: 100 + i + 1, // Always increasing\r\n          volume: 1000\r\n        });\r\n      }\r\n\r\n      const result = strategy.calculateRSI(testData, 14);\r\n      \r\n      expect(result).toBe(100);\r\n    });\r\n\r\n    it('should return 0 for all losses (no gains)', () => {\r\n      const testData: MarketData[] = [];\r\n      for (let i = 0; i < 20; i++) {\r\n        testData.push({\r\n          symbol: 'TEST',\r\n          timestamp: new Date(2024, 0, i + 1),\r\n          open: 100 - i,\r\n          high: 100 - i + 0.5,\r\n          low: 100 - i - 1,\r\n          close: 100 - i - 1, // Always decreasing\r\n          volume: 1000\r\n        });\r\n      }\r\n\r\n      const result = strategy.calculateRSI(testData, 14);\r\n      \r\n      expect(result).toBe(0);\r\n    });\r\n\r\n    it('should handle different periods correctly', () => {\r\n      const result7 = strategy.calculateRSI(mockMarketData, 7);\r\n      const result21 = strategy.calculateRSI(mockMarketData, 21);\r\n      \r\n      expect(result7).toBeDefined();\r\n      expect(result21).toBeDefined();\r\n      expect(result7).not.toBe(result21); // Different periods should give different results\r\n    });\r\n\r\n    it('should round to 2 decimal places', () => {\r\n      const result = strategy.calculateRSI(mockMarketData, 14);\r\n      \r\n      if (result !== null) {\r\n        const decimalPlaces = (result.toString().split('.')[1] || '').length;\r\n        expect(decimalPlaces).toBeLessThanOrEqual(2);\r\n      }\r\n    });\r\n  });\r\n\r\n  describe('detectDivergence', () => {\r\n    let divergenceData: MarketData[];\r\n\r\n    beforeEach(() => {\r\n      // Create data with potential divergence patterns\r\n      divergenceData = [];\r\n      for (let i = 0; i < 50; i++) {\r\n        let close: number;\r\n        \r\n        if (i < 25) {\r\n          // First half: declining prices\r\n          close = 45000 - (i * 100);\r\n        } else {\r\n          // Second half: slightly higher lows (potential bullish divergence)\r\n          close = 42500 + ((i - 25) * 50);\r\n        }\r\n        \r\n        divergenceData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(2024, 0, i + 1),\r\n          open: close - 50,\r\n          high: close + 100,\r\n          low: close - 100,\r\n          close: close,\r\n          volume: 1000 + Math.random() * 500\r\n        });\r\n      }\r\n    });\r\n\r\n    it('should detect bullish divergence', () => {\r\n      // Create clear bullish divergence pattern\r\n      const testData = [...divergenceData];\r\n      \r\n      // Modify to create lower price lows but higher RSI lows\r\n      for (let i = 40; i < testData.length; i++) {\r\n        testData[i].close = 42000 - (i - 40) * 20; // Lower lows in price\r\n      }\r\n\r\n      const result = strategy.detectDivergence(testData, 14);\r\n      \r\n      expect(['BULLISH', 'NONE']).toContain(result.type);\r\n      if (result.type === 'BULLISH') {\r\n        expect(result.strength).toBeGreaterThan(0);\r\n        expect(result.strength).toBeLessThanOrEqual(100);\r\n      }\r\n    });\r\n\r\n    it('should detect bearish divergence', () => {\r\n      // Create clear bearish divergence pattern\r\n      const testData = [...divergenceData];\r\n      \r\n      // Modify to create higher price highs but lower RSI highs\r\n      for (let i = 40; i < testData.length; i++) {\r\n        testData[i].close = 45000 + (i - 40) * 50; // Higher highs in price\r\n      }\r\n\r\n      const result = strategy.detectDivergence(testData, 14);\r\n      \r\n      expect(['BEARISH', 'NONE']).toContain(result.type);\r\n      if (result.type === 'BEARISH') {\r\n        expect(result.strength).toBeGreaterThan(0);\r\n        expect(result.strength).toBeLessThanOrEqual(100);\r\n      }\r\n    });\r\n\r\n    it('should return NONE for insufficient data', () => {\r\n      const shortData = mockMarketData.slice(0, 20);\r\n      const result = strategy.detectDivergence(shortData, 14);\r\n      \r\n      expect(result.type).toBe('NONE');\r\n      expect(result.strength).toBe(0);\r\n    });\r\n\r\n    it('should return NONE when no divergence exists', () => {\r\n      // Create data with no divergence (price and RSI move together)\r\n      const noDivergenceData = mockMarketData.map((data, i) => ({\r\n        ...data,\r\n        close: 42000 + i * 10 // Steady uptrend\r\n      }));\r\n\r\n      const result = strategy.detectDivergence(noDivergenceData, 14);\r\n      \r\n      expect(result.type).toBe('NONE');\r\n    });\r\n  });\r\n\r\n  describe('generateRSISignal', () => {\r\n    it('should generate RSI signal with correct properties', () => {\r\n      const result = strategy.generateRSISignal(mockMarketData, 14);\r\n      \r\n      expect(result).toBeDefined();\r\n      if (result) {\r\n        expect(result.name).toBe('RSI');\r\n        expect(result.value).toBeGreaterThanOrEqual(0);\r\n        expect(result.value).toBeLessThanOrEqual(100);\r\n        expect(result.period).toBe(14);\r\n        expect(result.parameters).toHaveProperty('overboughtThreshold');\r\n        expect(result.parameters).toHaveProperty('oversoldThreshold');\r\n        expect(typeof result.overbought).toBe('boolean');\r\n        expect(typeof result.oversold).toBe('boolean');\r\n      }\r\n    });\r\n\r\n    it('should identify overbought conditions', () => {\r\n      // Create overbought scenario\r\n      const overboughtData = mockMarketData.map((data, i) => ({\r\n        ...data,\r\n        close: 42000 + i * 200 // Strong uptrend to create overbought RSI\r\n      }));\r\n\r\n      const result = strategy.generateRSISignal(overboughtData, 14);\r\n      \r\n      if (result && result.value >= 70) {\r\n        expect(result.overbought).toBe(true);\r\n        expect(result.oversold).toBe(false);\r\n      }\r\n    });\r\n\r\n    it('should identify oversold conditions', () => {\r\n      // Create oversold scenario\r\n      const oversoldData = mockMarketData.map((data, i) => ({\r\n        ...data,\r\n        close: 45000 - i * 200 // Strong downtrend to create oversold RSI\r\n      }));\r\n\r\n      const result = strategy.generateRSISignal(oversoldData, 14);\r\n      \r\n      if (result && result.value <= 30) {\r\n        expect(result.oversold).toBe(true);\r\n        expect(result.overbought).toBe(false);\r\n      }\r\n    });\r\n\r\n    it('should return null for insufficient data', () => {\r\n      const shortData = mockMarketData.slice(0, 10);\r\n      const result = strategy.generateRSISignal(shortData, 14);\r\n      \r\n      expect(result).toBeNull();\r\n    });\r\n\r\n    it('should include divergence information when present', () => {\r\n      // Use extended data that might show divergence\r\n      const extendedData = [...mockMarketData];\r\n      for (let i = 0; i < 30; i++) {\r\n        extendedData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(2024, 0, 30 + i + 1),\r\n          open: 42000,\r\n          high: 42500,\r\n          low: 41500,\r\n          close: 42000 + Math.sin(i * 0.3) * 1000, // Oscillating pattern\r\n          volume: 1000\r\n        });\r\n      }\r\n\r\n      const result = strategy.generateRSISignal(extendedData, 14);\r\n      \r\n      if (result && result.divergence) {\r\n        expect(['BULLISH', 'BEARISH']).toContain(result.divergence.type);\r\n        expect(result.divergence.strength).toBeGreaterThan(0);\r\n      }\r\n    });\r\n  });\r\n\r\n  describe('generateSignal', () => {\r\n    it('should generate BUY signal for oversold conditions', () => {\r\n      // Create strong oversold scenario\r\n      const oversoldData = mockMarketData.map((data, i) => ({\r\n        ...data,\r\n        close: 45000 - i * 300 // Strong downtrend\r\n      }));\r\n\r\n      const result = strategy.generateSignal(oversoldData, 14);\r\n      \r\n      if (result) {\r\n        expect(result.type).toBe('BUY');\r\n        expect(result.symbol).toBe('BTC/USDT');\r\n        expect(result.strength).toBeGreaterThan(0);\r\n        expect(result.confidence).toBeGreaterThan(0);\r\n        expect(result.indicators).toContain('RSI_14');\r\n        expect(result.reasoning).toContain('oversold');\r\n        expect(result.metadata?.rsi).toBeLessThanOrEqual(30);\r\n      }\r\n    });\r\n\r\n    it('should generate SELL signal for overbought conditions', () => {\r\n      // Create strong overbought scenario\r\n      const overboughtData = mockMarketData.map((data, i) => ({\r\n        ...data,\r\n        close: 40000 + i * 300 // Strong uptrend\r\n      }));\r\n\r\n      const result = strategy.generateSignal(overboughtData, 14);\r\n      \r\n      if (result) {\r\n        expect(result.type).toBe('SELL');\r\n        expect(result.reasoning).toContain('overbought');\r\n        expect(result.metadata?.rsi).toBeGreaterThanOrEqual(70);\r\n      }\r\n    });\r\n\r\n    it('should return null for neutral RSI conditions', () => {\r\n      // Create neutral RSI scenario (around 50)\r\n      const neutralData = mockMarketData.map((data, i) => ({\r\n        ...data,\r\n        close: 42000 + (Math.random() - 0.5) * 100 // Small random movements\r\n      }));\r\n\r\n      const result = strategy.generateSignal(neutralData, 14);\r\n      \r\n      // Should return null or have low strength\r\n      if (result) {\r\n        expect(result.strength).toBeLessThan(50);\r\n      }\r\n    });\r\n\r\n    it('should include proper metadata', () => {\r\n      const oversoldData = mockMarketData.map((data, i) => ({\r\n        ...data,\r\n        close: 45000 - i * 300\r\n      }));\r\n\r\n      const result = strategy.generateSignal(oversoldData, 14);\r\n      \r\n      if (result) {\r\n        expect(result.metadata).toBeDefined();\r\n        expect(result.metadata?.rsi).toBeDefined();\r\n        expect(result.metadata?.overbought).toBeDefined();\r\n        expect(result.metadata?.oversold).toBeDefined();\r\n        expect(result.metadata?.extremeLevel).toBeDefined();\r\n      }\r\n    });\r\n\r\n    it('should calculate risk-reward ratio', () => {\r\n      const oversoldData = mockMarketData.map((data, i) => ({\r\n        ...data,\r\n        close: 45000 - i * 200\r\n      }));\r\n\r\n      const result = strategy.generateSignal(oversoldData, 14);\r\n      \r\n      if (result) {\r\n        expect(result.riskReward).toBeGreaterThan(0);\r\n        expect(typeof result.riskReward).toBe('number');\r\n      }\r\n    });\r\n\r\n    it('should boost strength for extreme RSI levels', () => {\r\n      // Create extreme oversold scenario (RSI < 20)\r\n      const extremeOversoldData = mockMarketData.map((data, i) => ({\r\n        ...data,\r\n        close: 50000 - i * 500 // Very strong downtrend\r\n      }));\r\n\r\n      const result = strategy.generateSignal(extremeOversoldData, 14);\r\n      \r\n      if (result && result.metadata?.rsi <= 20) {\r\n        expect(result.strength).toBeGreaterThan(70); // Should have high strength\r\n        expect(result.metadata.extremeLevel).toBe(true);\r\n      }\r\n    });\r\n  });\r\n\r\n  describe('evaluateSignalConfidence', () => {\r\n    let mockSignal: TradingSignal;\r\n\r\n    beforeEach(() => {\r\n      mockSignal = {\r\n        id: 'test-rsi-signal',\r\n        symbol: 'BTC/USDT',\r\n        type: 'BUY',\r\n        strength: 80,\r\n        confidence: 75,\r\n        indicators: ['RSI_14'],\r\n        reasoning: 'RSI oversold test signal',\r\n        riskReward: 1.8,\r\n        timestamp: new Date(),\r\n        metadata: {\r\n          rsi: 25,\r\n          overbought: false,\r\n          oversold: true,\r\n          extremeLevel: true\r\n        }\r\n      };\r\n    });\r\n\r\n    it('should evaluate signal confidence correctly', () => {\r\n      const result = strategy.evaluateSignalConfidence(mockMarketData, mockSignal);\r\n      \r\n      expect(result.overall).toBeGreaterThan(0);\r\n      expect(result.overall).toBeLessThanOrEqual(100);\r\n      expect(result.technical).toBe(80); // From signal strength\r\n      expect(result.volume).toBeGreaterThan(0);\r\n      expect(result.momentum).toBeGreaterThan(0);\r\n      expect(result.factors).toHaveLength(4);\r\n    });\r\n\r\n    it('should include RSI level in factors', () => {\r\n      const result = strategy.evaluateSignalConfidence(mockMarketData, mockSignal);\r\n      \r\n      const rsiFactorExists = result.factors.some(factor => \r\n        factor.includes('RSI level') && factor.includes('oversold')\r\n      );\r\n      expect(rsiFactorExists).toBe(true);\r\n    });\r\n\r\n    it('should include divergence information when present', () => {\r\n      mockSignal.metadata = {\r\n        ...mockSignal.metadata,\r\n        divergence: { type: 'BULLISH', strength: 75 }\r\n      };\r\n\r\n      const result = strategy.evaluateSignalConfidence(mockMarketData, mockSignal);\r\n      \r\n      const divergenceFactorExists = result.factors.some(factor => \r\n        factor.includes('Divergence') && factor.includes('BULLISH')\r\n      );\r\n      expect(divergenceFactorExists).toBe(true);\r\n    });\r\n\r\n    it('should boost confidence for high volume', () => {\r\n      // Create high volume scenario\r\n      const highVolumeData = mockMarketData.map(data => ({\r\n        ...data,\r\n        volume: 3000 // High volume\r\n      }));\r\n\r\n      const result = strategy.evaluateSignalConfidence(highVolumeData, mockSignal);\r\n      \r\n      expect(result.volume).toBeGreaterThan(60);\r\n    });\r\n  });\r\n\r\n  describe('Edge Cases and Error Handling', () => {\r\n    it('should handle identical consecutive prices', () => {\r\n      const flatData = mockMarketData.map(data => ({\r\n        ...data,\r\n        close: 42000 // All same price\r\n      }));\r\n\r\n      const result = strategy.calculateRSI(flatData, 14);\r\n      \r\n      // RSI should be around 50 for no price movement\r\n      expect(result).toBeCloseTo(50, 10);\r\n    });\r\n\r\n    it('should handle zero prices gracefully', () => {\r\n      const zeroData = mockMarketData.map(data => ({\r\n        ...data,\r\n        close: 0\r\n      }));\r\n\r\n      const result = strategy.calculateRSI(zeroData, 14);\r\n      \r\n      expect(result).toBeDefined();\r\n      expect(typeof result).toBe('number');\r\n    });\r\n\r\n    it('should handle negative prices', () => {\r\n      const negativeData = mockMarketData.map((data, i) => ({\r\n        ...data,\r\n        close: -1000 + i * 10 // Negative prices trending up\r\n      }));\r\n\r\n      const result = strategy.calculateRSI(negativeData, 14);\r\n      \r\n      expect(result).toBeDefined();\r\n      expect(result).toBeGreaterThanOrEqual(0);\r\n      expect(result).toBeLessThanOrEqual(100);\r\n    });\r\n\r\n    it('should handle very large price movements', () => {\r\n      const volatileData = mockMarketData.map((data, i) => ({\r\n        ...data,\r\n        close: 42000 + (Math.random() - 0.5) * 10000 // High volatility\r\n      }));\r\n\r\n      const result = strategy.calculateRSI(volatileData, 14);\r\n      \r\n      expect(result).toBeDefined();\r\n      expect(result).toBeGreaterThanOrEqual(0);\r\n      expect(result).toBeLessThanOrEqual(100);\r\n    });\r\n\r\n    it('should handle empty market data array', () => {\r\n      const result = strategy.calculateRSI([], 14);\r\n      \r\n      expect(result).toBeNull();\r\n    });\r\n\r\n    it('should handle single data point', () => {\r\n      const singleData = [mockMarketData[0]];\r\n      const result = strategy.calculateRSI(singleData, 14);\r\n      \r\n      expect(result).toBeNull();\r\n    });\r\n\r\n    it('should handle period larger than data length', () => {\r\n      const result = strategy.calculateRSI(mockMarketData, 100);\r\n      \r\n      expect(result).toBeNull();\r\n    });\r\n\r\n    it('should handle zero period', () => {\r\n      const result = strategy.calculateRSI(mockMarketData, 0);\r\n      \r\n      expect(result).toBeNull();\r\n    });\r\n\r\n    it('should handle negative period', () => {\r\n      const result = strategy.calculateRSI(mockMarketData, -5);\r\n      \r\n      expect(result).toBeNull();\r\n    });\r\n  });\r\n\r\n  describe('Performance and Optimization', () => {\r\n    it('should handle large datasets efficiently', () => {\r\n      // Create large dataset\r\n      const largeDataset: MarketData[] = [];\r\n      for (let i = 0; i < 1000; i++) {\r\n        largeDataset.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(2024, 0, i + 1),\r\n          open: 42000 + Math.random() * 1000,\r\n          high: 42500 + Math.random() * 1000,\r\n          low: 41500 + Math.random() * 1000,\r\n          close: 42000 + Math.random() * 1000,\r\n          volume: 1000 + Math.random() * 500\r\n        });\r\n      }\r\n\r\n      const startTime = Date.now();\r\n      const result = strategy.generateSignal(largeDataset, 14);\r\n      const endTime = Date.now();\r\n\r\n      // Should complete within reasonable time (less than 50ms)\r\n      expect(endTime - startTime).toBeLessThan(50);\r\n    });\r\n\r\n    it('should not modify input data', () => {\r\n      const originalData = JSON.parse(JSON.stringify(mockMarketData));\r\n      strategy.generateSignal(mockMarketData, 14);\r\n      \r\n      expect(mockMarketData).toEqual(originalData);\r\n    });\r\n\r\n    it('should produce consistent results for same input', () => {\r\n      const result1 = strategy.calculateRSI(mockMarketData, 14);\r\n      const result2 = strategy.calculateRSI(mockMarketData, 14);\r\n      \r\n      expect(result1).toBe(result2);\r\n    });\r\n  });\r\n});"],"version":3}