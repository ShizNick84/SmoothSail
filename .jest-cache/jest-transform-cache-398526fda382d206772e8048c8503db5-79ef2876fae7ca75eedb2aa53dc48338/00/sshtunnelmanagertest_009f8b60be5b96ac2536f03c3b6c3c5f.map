{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\__tests__\\ssh-tunnel-manager.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\__tests__\\ssh-tunnel-manager.test.ts"],"sourcesContent":["import { SSHTunnelManager, TunnelConfig, TunnelState } from '../ssh-tunnel-manager';\r\nimport { Logger } from '../../core/logging/logger';\r\nimport { EncryptionService } from '../../security/encryption-service';\r\nimport { promises as fs } from 'fs';\r\nimport { spawn } from 'child_process';\r\nimport { EventEmitter } from 'events';\r\n\r\n// Mock dependencies\r\njest.mock('fs', () => ({\r\n  promises: {\r\n    stat: jest.fn(),\r\n    access: jest.fn()\r\n  }\r\n}));\r\n\r\njest.mock('child_process', () => ({\r\n  spawn: jest.fn()\r\n}));\r\n\r\n// Mock process for SSH\r\nclass MockChildProcess extends EventEmitter {\r\n  stdout = new EventEmitter();\r\n  stderr = new EventEmitter();\r\n  killed = false;\r\n  \r\n  kill(signal?: string) {\r\n    this.killed = true;\r\n    setTimeout(() => this.emit('exit', 0, signal), 10);\r\n  }\r\n}\r\n\r\ndescribe('SSHTunnelManager', () => {\r\n  let tunnelManager: SSHTunnelManager;\r\n  let mockLogger: jest.Mocked<Logger>;\r\n  let mockEncryptionService: jest.Mocked<EncryptionService>;\r\n  let mockFs: jest.Mocked<typeof fs>;\r\n  let mockSpawn: jest.MockedFunction<typeof spawn>;\r\n\r\n  beforeEach(() => {\r\n    // Setup mocks\r\n    mockLogger = {\r\n      info: jest.fn(),\r\n      debug: jest.fn(),\r\n      warn: jest.fn(),\r\n      error: jest.fn()\r\n    } as any;\r\n\r\n    mockEncryptionService = {} as any;\r\n\r\n    mockFs = fs as jest.Mocked<typeof fs>;\r\n    mockSpawn = spawn as jest.MockedFunction<typeof spawn>;\r\n\r\n    // Create tunnel manager instance\r\n    tunnelManager = new SSHTunnelManager(mockLogger, mockEncryptionService);\r\n  });\r\n\r\n  afterEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('createTunnel', () => {\r\n    const validConfig: Partial<TunnelConfig> = {\r\n      username: 'testuser',\r\n      privateKeyPath: '/path/to/key',\r\n      localPort: 8080,\r\n      remotePort: 3000\r\n    };\r\n\r\n    beforeEach(() => {\r\n      // Mock file system calls for validation\r\n      mockFs.stat.mockResolvedValue({\r\n        isFile: () => true\r\n      } as any);\r\n      mockFs.access.mockResolvedValue(undefined);\r\n    });\r\n\r\n    it('should create a tunnel with valid configuration', async () => {\r\n      const connection = await tunnelManager.createTunnel(validConfig);\r\n\r\n      expect(connection).toBeDefined();\r\n      expect(connection.id).toMatch(/^tunnel_\\d+_[a-z0-9]+$/);\r\n      expect(connection.config.oracleIP).toBe('168.138.104.117');\r\n      expect(connection.config.username).toBe('testuser');\r\n      expect(connection.state).toBe(TunnelState.DISCONNECTED);\r\n      expect(mockLogger.info).toHaveBeenCalledWith(\r\n        expect.stringContaining('Created SSH tunnel connection'),\r\n        expect.any(Object)\r\n      );\r\n    });\r\n\r\n    it('should apply default configuration values', async () => {\r\n      const connection = await tunnelManager.createTunnel(validConfig);\r\n\r\n      expect(connection.config.oracleIP).toBe('168.138.104.117');\r\n      expect(connection.config.sshPort).toBe(22);\r\n      expect(connection.config.keepAlive).toBe(true);\r\n      expect(connection.config.compression).toBe(true);\r\n      expect(connection.config.connectionTimeout).toBe(30);\r\n    });\r\n\r\n    it('should reject invalid configuration', async () => {\r\n      const invalidConfig = {\r\n        username: 'testuser',\r\n        // Missing required fields\r\n      };\r\n\r\n      await expect(tunnelManager.createTunnel(invalidConfig)).rejects.toThrow(\r\n        'Missing required tunnel configuration'\r\n      );\r\n    });\r\n\r\n    it('should reject invalid IP address', async () => {\r\n      const invalidConfig = {\r\n        ...validConfig,\r\n        oracleIP: 'invalid-ip'\r\n      };\r\n\r\n      await expect(tunnelManager.createTunnel(invalidConfig)).rejects.toThrow(\r\n        'Invalid Oracle IP address'\r\n      );\r\n    });\r\n\r\n    it('should reject invalid ports', async () => {\r\n      const invalidConfig = {\r\n        ...validConfig,\r\n        localPort: 70000 // Invalid port\r\n      };\r\n\r\n      await expect(tunnelManager.createTunnel(invalidConfig)).rejects.toThrow(\r\n        'Invalid local port'\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('establishTunnel', () => {\r\n    let connection: any;\r\n    let mockProcess: MockChildProcess;\r\n\r\n    beforeEach(async () => {\r\n      // Mock file system calls\r\n      mockFs.stat.mockResolvedValue({\r\n        isFile: () => true\r\n      } as any);\r\n      mockFs.access.mockResolvedValue(undefined);\r\n\r\n      // Create a test connection\r\n      connection = await tunnelManager.createTunnel({\r\n        username: 'testuser',\r\n        privateKeyPath: '/path/to/key',\r\n        localPort: 8080,\r\n        remotePort: 3000\r\n      });\r\n\r\n      // Setup mock SSH process\r\n      mockProcess = new MockChildProcess();\r\n      mockSpawn.mockReturnValue(mockProcess as any);\r\n    });\r\n\r\n    it('should establish tunnel successfully', async () => {\r\n      // Start establishment\r\n      const establishPromise = tunnelManager.establishTunnel(connection.id);\r\n\r\n      // Simulate successful connection\r\n      setTimeout(() => {\r\n        mockProcess.stderr.emit('data', 'Local forwarding listening on 8080');\r\n      }, 10);\r\n\r\n      await establishPromise;\r\n\r\n      const updatedConnection = tunnelManager.getConnection(connection.id);\r\n      expect(updatedConnection?.state).toBe(TunnelState.CONNECTED);\r\n      expect(updatedConnection?.connectedAt).toBeInstanceOf(Date);\r\n      expect(mockLogger.info).toHaveBeenCalledWith(\r\n        expect.stringContaining('SSH tunnel established successfully')\r\n      );\r\n    });\r\n\r\n    it('should handle connection timeout', async () => {\r\n      const establishPromise = tunnelManager.establishTunnel(connection.id);\r\n\r\n      // Don't emit success signal - should timeout\r\n      await expect(establishPromise).rejects.toThrow('SSH tunnel connection timeout');\r\n\r\n      const updatedConnection = tunnelManager.getConnection(connection.id);\r\n      expect(updatedConnection?.state).toBe(TunnelState.FAILED);\r\n    });\r\n\r\n    it('should handle SSH process errors', async () => {\r\n      const establishPromise = tunnelManager.establishTunnel(connection.id);\r\n\r\n      // Simulate process error\r\n      setTimeout(() => {\r\n        mockProcess.emit('error', new Error('SSH connection failed'));\r\n      }, 10);\r\n\r\n      await expect(establishPromise).rejects.toThrow('SSH connection failed');\r\n\r\n      const updatedConnection = tunnelManager.getConnection(connection.id);\r\n      expect(updatedConnection?.state).toBe(TunnelState.FAILED);\r\n    });\r\n\r\n    it('should reject establishment for non-existent connection', async () => {\r\n      await expect(tunnelManager.establishTunnel('invalid-id')).rejects.toThrow(\r\n        'Connection not found'\r\n      );\r\n    });\r\n\r\n    it('should handle already connected tunnel', async () => {\r\n      // Manually set state to connected\r\n      connection.state = TunnelState.CONNECTED;\r\n\r\n      await tunnelManager.establishTunnel(connection.id);\r\n\r\n      expect(mockLogger.warn).toHaveBeenCalledWith(\r\n        expect.stringContaining('Tunnel already connected')\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('disconnectTunnel', () => {\r\n    let connection: any;\r\n    let mockProcess: MockChildProcess;\r\n\r\n    beforeEach(async () => {\r\n      // Mock file system calls\r\n      mockFs.stat.mockResolvedValue({\r\n        isFile: () => true\r\n      } as any);\r\n      mockFs.access.mockResolvedValue(undefined);\r\n\r\n      // Create and establish connection\r\n      connection = await tunnelManager.createTunnel({\r\n        username: 'testuser',\r\n        privateKeyPath: '/path/to/key',\r\n        localPort: 8080,\r\n        remotePort: 3000\r\n      });\r\n\r\n      mockProcess = new MockChildProcess();\r\n      mockSpawn.mockReturnValue(mockProcess as any);\r\n\r\n      // Establish tunnel\r\n      const establishPromise = tunnelManager.establishTunnel(connection.id);\r\n      setTimeout(() => {\r\n        mockProcess.stderr.emit('data', 'Local forwarding listening on 8080');\r\n      }, 10);\r\n      await establishPromise;\r\n    });\r\n\r\n    it('should disconnect tunnel gracefully', async () => {\r\n      await tunnelManager.disconnectTunnel(connection.id);\r\n\r\n      const updatedConnection = tunnelManager.getConnection(connection.id);\r\n      expect(updatedConnection?.state).toBe(TunnelState.DISCONNECTED);\r\n      expect(updatedConnection?.process).toBeNull();\r\n      expect(updatedConnection?.connectedAt).toBeNull();\r\n      expect(mockLogger.info).toHaveBeenCalledWith(\r\n        expect.stringContaining('SSH tunnel disconnected')\r\n      );\r\n    });\r\n\r\n    it('should handle already disconnected tunnel', async () => {\r\n      // Disconnect once\r\n      await tunnelManager.disconnectTunnel(connection.id);\r\n\r\n      // Try to disconnect again\r\n      await tunnelManager.disconnectTunnel(connection.id);\r\n\r\n      expect(mockLogger.warn).toHaveBeenCalledWith(\r\n        expect.stringContaining('Tunnel already disconnected')\r\n      );\r\n    });\r\n\r\n    it('should reject disconnection for non-existent connection', async () => {\r\n      await expect(tunnelManager.disconnectTunnel('invalid-id')).rejects.toThrow(\r\n        'Connection not found'\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('connection management', () => {\r\n    let connection1: any;\r\n    let connection2: any;\r\n\r\n    beforeEach(async () => {\r\n      // Mock file system calls\r\n      mockFs.stat.mockResolvedValue({\r\n        isFile: () => true\r\n      } as any);\r\n      mockFs.access.mockResolvedValue(undefined);\r\n\r\n      // Create test connections\r\n      connection1 = await tunnelManager.createTunnel({\r\n        username: 'user1',\r\n        privateKeyPath: '/path/to/key1',\r\n        localPort: 8080,\r\n        remotePort: 3000\r\n      });\r\n\r\n      connection2 = await tunnelManager.createTunnel({\r\n        username: 'user2',\r\n        privateKeyPath: '/path/to/key2',\r\n        localPort: 8081,\r\n        remotePort: 3001\r\n      });\r\n    });\r\n\r\n    it('should get connection by ID', () => {\r\n      const retrieved = tunnelManager.getConnection(connection1.id);\r\n      expect(retrieved).toBe(connection1);\r\n    });\r\n\r\n    it('should return undefined for non-existent connection', () => {\r\n      const retrieved = tunnelManager.getConnection('invalid-id');\r\n      expect(retrieved).toBeUndefined();\r\n    });\r\n\r\n    it('should get all connections', () => {\r\n      const allConnections = tunnelManager.getAllConnections();\r\n      expect(allConnections).toHaveLength(2);\r\n      expect(allConnections).toContain(connection1);\r\n      expect(allConnections).toContain(connection2);\r\n    });\r\n\r\n    it('should get active connections', async () => {\r\n      // Mock SSH process for connection1\r\n      const mockProcess = new MockChildProcess();\r\n      mockSpawn.mockReturnValue(mockProcess as any);\r\n\r\n      // Establish connection1\r\n      const establishPromise = tunnelManager.establishTunnel(connection1.id);\r\n      setTimeout(() => {\r\n        mockProcess.stderr.emit('data', 'Local forwarding listening on 8080');\r\n      }, 10);\r\n      await establishPromise;\r\n\r\n      const activeConnections = tunnelManager.getActiveConnections();\r\n      expect(activeConnections).toHaveLength(1);\r\n      expect(activeConnections[0]).toBe(connection1);\r\n    });\r\n  });\r\n\r\n  describe('cleanup', () => {\r\n    it('should cleanup all connections', async () => {\r\n      // Mock file system calls\r\n      mockFs.stat.mockResolvedValue({\r\n        isFile: () => true\r\n      } as any);\r\n      mockFs.access.mockResolvedValue(undefined);\r\n\r\n      // Create connections\r\n      const connection1 = await tunnelManager.createTunnel({\r\n        username: 'user1',\r\n        privateKeyPath: '/path/to/key1',\r\n        localPort: 8080,\r\n        remotePort: 3000\r\n      });\r\n\r\n      const connection2 = await tunnelManager.createTunnel({\r\n        username: 'user2',\r\n        privateKeyPath: '/path/to/key2',\r\n        localPort: 8081,\r\n        remotePort: 3001\r\n      });\r\n\r\n      // Establish connections\r\n      const mockProcess1 = new MockChildProcess();\r\n      const mockProcess2 = new MockChildProcess();\r\n      mockSpawn\r\n        .mockReturnValueOnce(mockProcess1 as any)\r\n        .mockReturnValueOnce(mockProcess2 as any);\r\n\r\n      const establish1 = tunnelManager.establishTunnel(connection1.id);\r\n      const establish2 = tunnelManager.establishTunnel(connection2.id);\r\n\r\n      setTimeout(() => {\r\n        mockProcess1.stderr.emit('data', 'Local forwarding listening on 8080');\r\n        mockProcess2.stderr.emit('data', 'Local forwarding listening on 8081');\r\n      }, 10);\r\n\r\n      await Promise.all([establish1, establish2]);\r\n\r\n      // Cleanup\r\n      await tunnelManager.cleanup();\r\n\r\n      // Verify all connections are cleaned up\r\n      expect(tunnelManager.getAllConnections()).toHaveLength(0);\r\n      expect(mockLogger.info).toHaveBeenCalledWith('SSH tunnel cleanup completed');\r\n    });\r\n  });\r\n\r\n  describe('event emission', () => {\r\n    let connection: any;\r\n    let mockProcess: MockChildProcess;\r\n\r\n    beforeEach(async () => {\r\n      // Mock file system calls\r\n      mockFs.stat.mockResolvedValue({\r\n        isFile: () => true\r\n      } as any);\r\n      mockFs.access.mockResolvedValue(undefined);\r\n\r\n      connection = await tunnelManager.createTunnel({\r\n        username: 'testuser',\r\n        privateKeyPath: '/path/to/key',\r\n        localPort: 8080,\r\n        remotePort: 3000\r\n      });\r\n\r\n      mockProcess = new MockChildProcess();\r\n      mockSpawn.mockReturnValue(mockProcess as any);\r\n    });\r\n\r\n    it('should emit tunnelConnected event', async () => {\r\n      const connectedSpy = jest.fn();\r\n      tunnelManager.on('tunnelConnected', connectedSpy);\r\n\r\n      const establishPromise = tunnelManager.establishTunnel(connection.id);\r\n      setTimeout(() => {\r\n        mockProcess.stderr.emit('data', 'Local forwarding listening on 8080');\r\n      }, 10);\r\n      await establishPromise;\r\n\r\n      expect(connectedSpy).toHaveBeenCalledWith(connection);\r\n    });\r\n\r\n    it('should emit tunnelError event', async () => {\r\n      const errorSpy = jest.fn();\r\n      tunnelManager.on('tunnelError', errorSpy);\r\n\r\n      const establishPromise = tunnelManager.establishTunnel(connection.id);\r\n      const testError = new Error('Test error');\r\n      \r\n      setTimeout(() => {\r\n        mockProcess.emit('error', testError);\r\n      }, 10);\r\n\r\n      await expect(establishPromise).rejects.toThrow('Test error');\r\n      expect(errorSpy).toHaveBeenCalledWith(connection, testError);\r\n    });\r\n\r\n    it('should emit stateChanged event', async () => {\r\n      const stateChangedSpy = jest.fn();\r\n      tunnelManager.on('stateChanged', stateChangedSpy);\r\n\r\n      const establishPromise = tunnelManager.establishTunnel(connection.id);\r\n      setTimeout(() => {\r\n        mockProcess.stderr.emit('data', 'Local forwarding listening on 8080');\r\n      }, 10);\r\n      await establishPromise;\r\n\r\n      expect(stateChangedSpy).toHaveBeenCalledWith(\r\n        connection,\r\n        TunnelState.DISCONNECTED,\r\n        TunnelState.CONNECTING\r\n      );\r\n    });\r\n  });\r\n});"],"version":3}