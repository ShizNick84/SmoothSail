3492541cd6895a96df037050b4c449d0
"use strict";
/**
 * Security Compliance Validation Tests
 *
 * Comprehensive compliance testing for financial regulations,
 * data protection laws, and security standards.
 *
 * Requirements: 25.7 - Security compliance testing and validation
 */
Object.defineProperty(exports, "__esModule", { value: true });
const encryption_service_1 = require("@/security/encryption-service");
describe('Security Compliance Validation', () => {
    let encryptionService;
    beforeAll(async () => {
        // Set up test environment
        process.env.NODE_ENV = 'test';
        process.env.MASTER_ENCRYPTION_KEY = 'a'.repeat(64); // 64 hex chars = 32 bytes
        // Initialize encryption service
        encryptionService = new encryption_service_1.EncryptionService();
        await encryptionService.initialize();
    });
    describe('Basic Compliance Tests', () => {
        it('should have encryption service available', () => {
            expect(encryptionService).toBeDefined();
            const status = encryptionService.getStatus();
            expect(status.isInitialized).toBe(true);
        });
        it('should use secure encryption algorithms', () => {
            const status = encryptionService.getStatus();
            expect(status.algorithm).toBe('aes-256-gcm');
        });
        it('should have proper key derivation parameters', () => {
            const status = encryptionService.getStatus();
            expect(status.keyDerivationParams.iterations).toBeGreaterThanOrEqual(100000);
            expect(status.keyDerivationParams.keyLength).toBe(32);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxOaWNrXFxEZXNrdG9wXFxTbW9vdGhTYWlsXFxzcmNcXHRlc3RzXFxzZWN1cml0eVxcY29tcGxpYW5jZS12YWxpZGF0aW9uLnRlc3QudHMiLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7O0dBT0c7O0FBRUgsc0VBQWtFO0FBRWxFLFFBQVEsQ0FBQyxnQ0FBZ0MsRUFBRSxHQUFHLEVBQUU7SUFDOUMsSUFBSSxpQkFBb0MsQ0FBQztJQUV6QyxTQUFTLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDbkIsMEJBQTBCO1FBQzFCLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQztRQUM5QixPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFxQixHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQywwQkFBMEI7UUFFOUUsZ0NBQWdDO1FBQ2hDLGlCQUFpQixHQUFHLElBQUksc0NBQWlCLEVBQUUsQ0FBQztRQUM1QyxNQUFNLGlCQUFpQixDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ3ZDLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLHdCQUF3QixFQUFFLEdBQUcsRUFBRTtRQUN0QyxFQUFFLENBQUMsMENBQTBDLEVBQUUsR0FBRyxFQUFFO1lBQ2xELE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ3hDLE1BQU0sTUFBTSxHQUFHLGlCQUFpQixDQUFDLFNBQVMsRUFBRSxDQUFDO1lBQzdDLE1BQU0sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzFDLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLHlDQUF5QyxFQUFFLEdBQUcsRUFBRTtZQUNqRCxNQUFNLE1BQU0sR0FBRyxpQkFBaUIsQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUM3QyxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUMvQyxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyw4Q0FBOEMsRUFBRSxHQUFHLEVBQUU7WUFDdEQsTUFBTSxNQUFNLEdBQUcsaUJBQWlCLENBQUMsU0FBUyxFQUFFLENBQUM7WUFDN0MsTUFBTSxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxVQUFVLENBQUMsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUM3RSxNQUFNLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN4RCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxOaWNrXFxEZXNrdG9wXFxTbW9vdGhTYWlsXFxzcmNcXHRlc3RzXFxzZWN1cml0eVxcY29tcGxpYW5jZS12YWxpZGF0aW9uLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIFNlY3VyaXR5IENvbXBsaWFuY2UgVmFsaWRhdGlvbiBUZXN0c1xyXG4gKiBcclxuICogQ29tcHJlaGVuc2l2ZSBjb21wbGlhbmNlIHRlc3RpbmcgZm9yIGZpbmFuY2lhbCByZWd1bGF0aW9ucyxcclxuICogZGF0YSBwcm90ZWN0aW9uIGxhd3MsIGFuZCBzZWN1cml0eSBzdGFuZGFyZHMuXHJcbiAqIFxyXG4gKiBSZXF1aXJlbWVudHM6IDI1LjcgLSBTZWN1cml0eSBjb21wbGlhbmNlIHRlc3RpbmcgYW5kIHZhbGlkYXRpb25cclxuICovXHJcblxyXG5pbXBvcnQgeyBFbmNyeXB0aW9uU2VydmljZSB9IGZyb20gJ0Avc2VjdXJpdHkvZW5jcnlwdGlvbi1zZXJ2aWNlJztcclxuXHJcbmRlc2NyaWJlKCdTZWN1cml0eSBDb21wbGlhbmNlIFZhbGlkYXRpb24nLCAoKSA9PiB7XHJcbiAgbGV0IGVuY3J5cHRpb25TZXJ2aWNlOiBFbmNyeXB0aW9uU2VydmljZTtcclxuXHJcbiAgYmVmb3JlQWxsKGFzeW5jICgpID0+IHtcclxuICAgIC8vIFNldCB1cCB0ZXN0IGVudmlyb25tZW50XHJcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViA9ICd0ZXN0JztcclxuICAgIHByb2Nlc3MuZW52Lk1BU1RFUl9FTkNSWVBUSU9OX0tFWSA9ICdhJy5yZXBlYXQoNjQpOyAvLyA2NCBoZXggY2hhcnMgPSAzMiBieXRlc1xyXG4gICAgXHJcbiAgICAvLyBJbml0aWFsaXplIGVuY3J5cHRpb24gc2VydmljZVxyXG4gICAgZW5jcnlwdGlvblNlcnZpY2UgPSBuZXcgRW5jcnlwdGlvblNlcnZpY2UoKTtcclxuICAgIGF3YWl0IGVuY3J5cHRpb25TZXJ2aWNlLmluaXRpYWxpemUoKTtcclxuICB9KTtcclxuXHJcbiAgZGVzY3JpYmUoJ0Jhc2ljIENvbXBsaWFuY2UgVGVzdHMnLCAoKSA9PiB7XHJcbiAgICBpdCgnc2hvdWxkIGhhdmUgZW5jcnlwdGlvbiBzZXJ2aWNlIGF2YWlsYWJsZScsICgpID0+IHtcclxuICAgICAgZXhwZWN0KGVuY3J5cHRpb25TZXJ2aWNlKS50b0JlRGVmaW5lZCgpO1xyXG4gICAgICBjb25zdCBzdGF0dXMgPSBlbmNyeXB0aW9uU2VydmljZS5nZXRTdGF0dXMoKTtcclxuICAgICAgZXhwZWN0KHN0YXR1cy5pc0luaXRpYWxpemVkKS50b0JlKHRydWUpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ3Nob3VsZCB1c2Ugc2VjdXJlIGVuY3J5cHRpb24gYWxnb3JpdGhtcycsICgpID0+IHtcclxuICAgICAgY29uc3Qgc3RhdHVzID0gZW5jcnlwdGlvblNlcnZpY2UuZ2V0U3RhdHVzKCk7XHJcbiAgICAgIGV4cGVjdChzdGF0dXMuYWxnb3JpdGhtKS50b0JlKCdhZXMtMjU2LWdjbScpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ3Nob3VsZCBoYXZlIHByb3BlciBrZXkgZGVyaXZhdGlvbiBwYXJhbWV0ZXJzJywgKCkgPT4ge1xyXG4gICAgICBjb25zdCBzdGF0dXMgPSBlbmNyeXB0aW9uU2VydmljZS5nZXRTdGF0dXMoKTtcclxuICAgICAgZXhwZWN0KHN0YXR1cy5rZXlEZXJpdmF0aW9uUGFyYW1zLml0ZXJhdGlvbnMpLnRvQmVHcmVhdGVyVGhhbk9yRXF1YWwoMTAwMDAwKTtcclxuICAgICAgZXhwZWN0KHN0YXR1cy5rZXlEZXJpdmF0aW9uUGFyYW1zLmtleUxlbmd0aCkudG9CZSgzMik7XHJcbiAgICB9KTtcclxuICB9KTtcclxufSk7Il0sInZlcnNpb24iOjN9