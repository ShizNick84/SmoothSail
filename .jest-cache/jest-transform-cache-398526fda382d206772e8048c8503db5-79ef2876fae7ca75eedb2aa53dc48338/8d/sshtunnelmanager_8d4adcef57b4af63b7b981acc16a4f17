7258203279cc2d2cfdc674788ffa201c
"use strict";

/* istanbul ignore next */
function cov_2pgvlnd7u9() {
  var path = "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\ssh-tunnel-manager.ts";
  var hash = "f73ca73e647147a4cb20b048b1b4419b42f64fa4";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\ssh-tunnel-manager.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 56
        }
      },
      "2": {
        start: {
          line: 4,
          column: 17
        },
        end: {
          line: 4,
          column: 34
        }
      },
      "3": {
        start: {
          line: 5,
          column: 24
        },
        end: {
          line: 5,
          column: 48
        }
      },
      "4": {
        start: {
          line: 6,
          column: 13
        },
        end: {
          line: 6,
          column: 26
        }
      },
      "5": {
        start: {
          line: 7,
          column: 17
        },
        end: {
          line: 7,
          column: 50
        }
      },
      "6": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 19,
          column: 60
        }
      },
      "7": {
        start: {
          line: 13,
          column: 4
        },
        end: {
          line: 13,
          column: 49
        }
      },
      "8": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 14,
          column: 45
        }
      },
      "9": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 15,
          column: 43
        }
      },
      "10": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 16,
          column: 49
        }
      },
      "11": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 17,
          column: 37
        }
      },
      "12": {
        start: {
          line: 18,
          column: 4
        },
        end: {
          line: 18,
          column: 45
        }
      },
      "13": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 16
        }
      },
      "14": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 62
        }
      },
      "15": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 37
        }
      },
      "16": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 59
        }
      },
      "17": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 41,
          column: 48
        }
      },
      "18": {
        start: {
          line: 43,
          column: 29
        },
        end: {
          line: 43,
          column: 56
        }
      },
      "19": {
        start: {
          line: 45,
          column: 27
        },
        end: {
          line: 59,
          column: 9
        }
      },
      "20": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 61,
          column: 55
        }
      },
      "21": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 99,
          column: 9
        }
      },
      "22": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 64,
          column: 75
        }
      },
      "23": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 68,
          column: 13
        }
      },
      "24": {
        start: {
          line: 67,
          column: 16
        },
        end: {
          line: 67,
          column: 69
        }
      },
      "25": {
        start: {
          line: 70,
          column: 28
        },
        end: {
          line: 70,
          column: 58
        }
      },
      "26": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 75,
          column: 15
        }
      },
      "27": {
        start: {
          line: 77,
          column: 31
        },
        end: {
          line: 80,
          column: 14
        }
      },
      "28": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 81,
          column: 44
        }
      },
      "29": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 83,
          column: 50
        }
      },
      "30": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 85,
          column: 53
        }
      },
      "31": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 87,
          column: 74
        }
      },
      "32": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 88,
          column: 48
        }
      },
      "33": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 89,
          column: 85
        }
      },
      "34": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 90,
          column: 53
        }
      },
      "35": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 30
        }
      },
      "36": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 94,
          column: 88
        }
      },
      "37": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 71
        }
      },
      "38": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 96
        }
      },
      "39": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 97,
          column: 56
        }
      },
      "40": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 98,
          column: 24
        }
      },
      "41": {
        start: {
          line: 109,
          column: 27
        },
        end: {
          line: 109,
          column: 61
        }
      },
      "42": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 112,
          column: 9
        }
      },
      "43": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 111,
          column: 69
        }
      },
      "44": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 116,
          column: 9
        }
      },
      "45": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 114,
          column: 77
        }
      },
      "46": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 115,
          column: 19
        }
      },
      "47": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 146,
          column: 9
        }
      },
      "48": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 118,
          column: 74
        }
      },
      "49": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 136,
          column: 13
        }
      },
      "50": {
        start: {
          line: 121,
          column: 16
        },
        end: {
          line: 121,
          column: 51
        }
      },
      "51": {
        start: {
          line: 123,
          column: 16
        },
        end: {
          line: 135,
          column: 19
        }
      },
      "52": {
        start: {
          line: 124,
          column: 36
        },
        end: {
          line: 130,
          column: 28
        }
      },
      "53": {
        start: {
          line: 126,
          column: 24
        },
        end: {
          line: 128,
          column: 25
        }
      },
      "54": {
        start: {
          line: 127,
          column: 28
        },
        end: {
          line: 127,
          column: 63
        }
      },
      "55": {
        start: {
          line: 129,
          column: 24
        },
        end: {
          line: 129,
          column: 34
        }
      },
      "56": {
        start: {
          line: 131,
          column: 20
        },
        end: {
          line: 134,
          column: 23
        }
      },
      "57": {
        start: {
          line: 132,
          column: 24
        },
        end: {
          line: 132,
          column: 46
        }
      },
      "58": {
        start: {
          line: 133,
          column: 24
        },
        end: {
          line: 133,
          column: 34
        }
      },
      "59": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 137,
          column: 77
        }
      },
      "60": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 138,
          column: 38
        }
      },
      "61": {
        start: {
          line: 139,
          column: 12
        },
        end: {
          line: 139,
          column: 42
        }
      },
      "62": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 140,
          column: 73
        }
      },
      "63": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 141,
          column: 56
        }
      },
      "64": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 144,
          column: 88
        }
      },
      "65": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 145,
          column: 24
        }
      },
      "66": {
        start: {
          line: 155,
          column: 8
        },
        end: {
          line: 155,
          column: 50
        }
      },
      "67": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 163,
          column: 53
        }
      },
      "68": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 171,
          column: 93
        }
      },
      "69": {
        start: {
          line: 171,
          column: 55
        },
        end: {
          line: 171,
          column: 91
        }
      },
      "70": {
        start: {
          line: 180,
          column: 31
        },
        end: {
          line: 182,
          column: 9
        }
      },
      "71": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 187,
          column: 9
        }
      },
      "72": {
        start: {
          line: 184,
          column: 12
        },
        end: {
          line: 186,
          column: 13
        }
      },
      "73": {
        start: {
          line: 185,
          column: 16
        },
        end: {
          line: 185,
          column: 83
        }
      },
      "74": {
        start: {
          line: 189,
          column: 8
        },
        end: {
          line: 191,
          column: 9
        }
      },
      "75": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 190,
          column: 78
        }
      },
      "76": {
        start: {
          line: 193,
          column: 8
        },
        end: {
          line: 195,
          column: 9
        }
      },
      "77": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 194,
          column: 71
        }
      },
      "78": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 198,
          column: 9
        }
      },
      "79": {
        start: {
          line: 197,
          column: 12
        },
        end: {
          line: 197,
          column: 73
        }
      },
      "80": {
        start: {
          line: 199,
          column: 8
        },
        end: {
          line: 199,
          column: 73
        }
      },
      "81": {
        start: {
          line: 207,
          column: 8
        },
        end: {
          line: 218,
          column: 9
        }
      },
      "82": {
        start: {
          line: 208,
          column: 26
        },
        end: {
          line: 208,
          column: 66
        }
      },
      "83": {
        start: {
          line: 209,
          column: 12
        },
        end: {
          line: 211,
          column: 13
        }
      },
      "84": {
        start: {
          line: 210,
          column: 16
        },
        end: {
          line: 210,
          column: 85
        }
      },
      "85": {
        start: {
          line: 213,
          column: 12
        },
        end: {
          line: 213,
          column: 76
        }
      },
      "86": {
        start: {
          line: 214,
          column: 12
        },
        end: {
          line: 214,
          column: 74
        }
      },
      "87": {
        start: {
          line: 217,
          column: 12
        },
        end: {
          line: 217,
          column: 120
        }
      },
      "88": {
        start: {
          line: 227,
          column: 21
        },
        end: {
          line: 237,
          column: 9
        }
      },
      "89": {
        start: {
          line: 239,
          column: 8
        },
        end: {
          line: 241,
          column: 9
        }
      },
      "90": {
        start: {
          line: 240,
          column: 12
        },
        end: {
          line: 240,
          column: 51
        }
      },
      "91": {
        start: {
          line: 243,
          column: 8
        },
        end: {
          line: 245,
          column: 9
        }
      },
      "92": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 244,
          column: 28
        }
      },
      "93": {
        start: {
          line: 247,
          column: 8
        },
        end: {
          line: 249,
          column: 9
        }
      },
      "94": {
        start: {
          line: 248,
          column: 12
        },
        end: {
          line: 248,
          column: 48
        }
      },
      "95": {
        start: {
          line: 251,
          column: 8
        },
        end: {
          line: 251,
          column: 61
        }
      },
      "96": {
        start: {
          line: 252,
          column: 8
        },
        end: {
          line: 252,
          column: 20
        }
      },
      "97": {
        start: {
          line: 260,
          column: 8
        },
        end: {
          line: 261,
          column: 19
        }
      },
      "98": {
        start: {
          line: 261,
          column: 12
        },
        end: {
          line: 261,
          column: 19
        }
      },
      "99": {
        start: {
          line: 262,
          column: 24
        },
        end: {
          line: 262,
          column: 42
        }
      },
      "100": {
        start: {
          line: 263,
          column: 8
        },
        end: {
          line: 265,
          column: 11
        }
      },
      "101": {
        start: {
          line: 264,
          column: 12
        },
        end: {
          line: 264,
          column: 90
        }
      },
      "102": {
        start: {
          line: 266,
          column: 8
        },
        end: {
          line: 273,
          column: 11
        }
      },
      "103": {
        start: {
          line: 267,
          column: 28
        },
        end: {
          line: 267,
          column: 50
        }
      },
      "104": {
        start: {
          line: 268,
          column: 12
        },
        end: {
          line: 268,
          column: 75
        }
      },
      "105": {
        start: {
          line: 270,
          column: 12
        },
        end: {
          line: 272,
          column: 13
        }
      },
      "106": {
        start: {
          line: 271,
          column: 16
        },
        end: {
          line: 271,
          column: 53
        }
      },
      "107": {
        start: {
          line: 274,
          column: 8
        },
        end: {
          line: 281,
          column: 11
        }
      },
      "108": {
        start: {
          line: 275,
          column: 12
        },
        end: {
          line: 275,
          column: 88
        }
      },
      "109": {
        start: {
          line: 276,
          column: 12
        },
        end: {
          line: 279,
          column: 13
        }
      },
      "110": {
        start: {
          line: 277,
          column: 16
        },
        end: {
          line: 277,
          column: 81
        }
      },
      "111": {
        start: {
          line: 278,
          column: 16
        },
        end: {
          line: 278,
          column: 60
        }
      },
      "112": {
        start: {
          line: 280,
          column: 12
        },
        end: {
          line: 280,
          column: 38
        }
      },
      "113": {
        start: {
          line: 282,
          column: 8
        },
        end: {
          line: 287,
          column: 11
        }
      },
      "114": {
        start: {
          line: 283,
          column: 12
        },
        end: {
          line: 283,
          column: 77
        }
      },
      "115": {
        start: {
          line: 284,
          column: 12
        },
        end: {
          line: 284,
          column: 71
        }
      },
      "116": {
        start: {
          line: 285,
          column: 12
        },
        end: {
          line: 285,
          column: 55
        }
      },
      "117": {
        start: {
          line: 286,
          column: 12
        },
        end: {
          line: 286,
          column: 56
        }
      },
      "118": {
        start: {
          line: 296,
          column: 8
        },
        end: {
          line: 314,
          column: 11
        }
      },
      "119": {
        start: {
          line: 297,
          column: 28
        },
        end: {
          line: 299,
          column: 25
        }
      },
      "120": {
        start: {
          line: 298,
          column: 16
        },
        end: {
          line: 298,
          column: 85
        }
      },
      "121": {
        start: {
          line: 300,
          column: 28
        },
        end: {
          line: 304,
          column: 13
        }
      },
      "122": {
        start: {
          line: 301,
          column: 16
        },
        end: {
          line: 301,
          column: 38
        }
      },
      "123": {
        start: {
          line: 302,
          column: 16
        },
        end: {
          line: 302,
          column: 60
        }
      },
      "124": {
        start: {
          line: 303,
          column: 16
        },
        end: {
          line: 303,
          column: 26
        }
      },
      "125": {
        start: {
          line: 305,
          column: 28
        },
        end: {
          line: 311,
          column: 13
        }
      },
      "126": {
        start: {
          line: 306,
          column: 16
        },
        end: {
          line: 310,
          column: 17
        }
      },
      "127": {
        start: {
          line: 307,
          column: 20
        },
        end: {
          line: 307,
          column: 42
        }
      },
      "128": {
        start: {
          line: 308,
          column: 20
        },
        end: {
          line: 308,
          column: 64
        }
      },
      "129": {
        start: {
          line: 309,
          column: 20
        },
        end: {
          line: 309,
          column: 34
        }
      },
      "130": {
        start: {
          line: 312,
          column: 12
        },
        end: {
          line: 312,
          column: 46
        }
      },
      "131": {
        start: {
          line: 313,
          column: 12
        },
        end: {
          line: 313,
          column: 46
        }
      },
      "132": {
        start: {
          line: 323,
          column: 25
        },
        end: {
          line: 323,
          column: 41
        }
      },
      "133": {
        start: {
          line: 324,
          column: 8
        },
        end: {
          line: 324,
          column: 36
        }
      },
      "134": {
        start: {
          line: 325,
          column: 8
        },
        end: {
          line: 325,
          column: 45
        }
      },
      "135": {
        start: {
          line: 326,
          column: 8
        },
        end: {
          line: 326,
          column: 97
        }
      },
      "136": {
        start: {
          line: 327,
          column: 8
        },
        end: {
          line: 327,
          column: 66
        }
      },
      "137": {
        start: {
          line: 335,
          column: 8
        },
        end: {
          line: 335,
          column: 81
        }
      },
      "138": {
        start: {
          line: 344,
          column: 24
        },
        end: {
          line: 344,
          column: 117
        }
      },
      "139": {
        start: {
          line: 345,
          column: 8
        },
        end: {
          line: 345,
          column: 32
        }
      },
      "140": {
        start: {
          line: 351,
          column: 28
        },
        end: {
          line: 351,
          column: 65
        }
      },
      "141": {
        start: {
          line: 352,
          column: 8
        },
        end: {
          line: 362,
          column: 10
        }
      },
      "142": {
        start: {
          line: 354,
          column: 55
        },
        end: {
          line: 354,
          column: 88
        }
      },
      "143": {
        start: {
          line: 355,
          column: 47
        },
        end: {
          line: 361,
          column: 13
        }
      },
      "144": {
        start: {
          line: 368,
          column: 8
        },
        end: {
          line: 368,
          column: 63
        }
      },
      "145": {
        start: {
          line: 369,
          column: 35
        },
        end: {
          line: 369,
          column: 214
        }
      },
      "146": {
        start: {
          line: 369,
          column: 91
        },
        end: {
          line: 369,
          column: 213
        }
      },
      "147": {
        start: {
          line: 369,
          column: 142
        },
        end: {
          line: 369,
          column: 212
        }
      },
      "148": {
        start: {
          line: 370,
          column: 8
        },
        end: {
          line: 370,
          column: 46
        }
      },
      "149": {
        start: {
          line: 371,
          column: 8
        },
        end: {
          line: 371,
          column: 33
        }
      },
      "150": {
        start: {
          line: 372,
          column: 8
        },
        end: {
          line: 372,
          column: 57
        }
      },
      "151": {
        start: {
          line: 375,
          column: 0
        },
        end: {
          line: 375,
          column: 44
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 12,
            column: 1
          },
          end: {
            line: 12,
            column: 2
          }
        },
        loc: {
          start: {
            line: 12,
            column: 24
          },
          end: {
            line: 19,
            column: 1
          }
        },
        line: 12
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 28,
            column: 5
          }
        },
        loc: {
          start: {
            line: 28,
            column: 18
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 28
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 39,
            column: 5
          }
        },
        loc: {
          start: {
            line: 39,
            column: 34
          },
          end: {
            line: 100,
            column: 5
          }
        },
        line: 39
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 108,
            column: 4
          },
          end: {
            line: 108,
            column: 5
          }
        },
        loc: {
          start: {
            line: 108,
            column: 41
          },
          end: {
            line: 147,
            column: 5
          }
        },
        line: 108
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 123,
            column: 34
          },
          end: {
            line: 123,
            column: 35
          }
        },
        loc: {
          start: {
            line: 123,
            column: 47
          },
          end: {
            line: 135,
            column: 17
          }
        },
        line: 123
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 124,
            column: 47
          },
          end: {
            line: 124,
            column: 48
          }
        },
        loc: {
          start: {
            line: 124,
            column: 53
          },
          end: {
            line: 130,
            column: 21
          }
        },
        line: 124
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 131,
            column: 50
          },
          end: {
            line: 131,
            column: 51
          }
        },
        loc: {
          start: {
            line: 131,
            column: 56
          },
          end: {
            line: 134,
            column: 21
          }
        },
        line: 131
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 154,
            column: 4
          },
          end: {
            line: 154,
            column: 5
          }
        },
        loc: {
          start: {
            line: 154,
            column: 32
          },
          end: {
            line: 156,
            column: 5
          }
        },
        line: 154
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 162,
            column: 4
          },
          end: {
            line: 162,
            column: 5
          }
        },
        loc: {
          start: {
            line: 162,
            column: 24
          },
          end: {
            line: 164,
            column: 5
          }
        },
        line: 162
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 170,
            column: 4
          },
          end: {
            line: 170,
            column: 5
          }
        },
        loc: {
          start: {
            line: 170,
            column: 27
          },
          end: {
            line: 172,
            column: 5
          }
        },
        line: 170
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 171,
            column: 47
          },
          end: {
            line: 171,
            column: 48
          }
        },
        loc: {
          start: {
            line: 171,
            column: 55
          },
          end: {
            line: 171,
            column: 91
          }
        },
        line: 171
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 179,
            column: 4
          },
          end: {
            line: 179,
            column: 5
          }
        },
        loc: {
          start: {
            line: 179,
            column: 39
          },
          end: {
            line: 200,
            column: 5
          }
        },
        line: 179
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 206,
            column: 4
          },
          end: {
            line: 206,
            column: 5
          }
        },
        loc: {
          start: {
            line: 206,
            column: 45
          },
          end: {
            line: 219,
            column: 5
          }
        },
        line: 206
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 226,
            column: 4
          },
          end: {
            line: 226,
            column: 5
          }
        },
        loc: {
          start: {
            line: 226,
            column: 30
          },
          end: {
            line: 253,
            column: 5
          }
        },
        line: 226
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 259,
            column: 4
          },
          end: {
            line: 259,
            column: 5
          }
        },
        loc: {
          start: {
            line: 259,
            column: 37
          },
          end: {
            line: 288,
            column: 5
          }
        },
        line: 259
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 263,
            column: 35
          },
          end: {
            line: 263,
            column: 36
          }
        },
        loc: {
          start: {
            line: 263,
            column: 45
          },
          end: {
            line: 265,
            column: 9
          }
        },
        line: 263
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 266,
            column: 35
          },
          end: {
            line: 266,
            column: 36
          }
        },
        loc: {
          start: {
            line: 266,
            column: 45
          },
          end: {
            line: 273,
            column: 9
          }
        },
        line: 266
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 274,
            column: 27
          },
          end: {
            line: 274,
            column: 28
          }
        },
        loc: {
          start: {
            line: 274,
            column: 45
          },
          end: {
            line: 281,
            column: 9
          }
        },
        line: 274
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 282,
            column: 28
          },
          end: {
            line: 282,
            column: 29
          }
        },
        loc: {
          start: {
            line: 282,
            column: 39
          },
          end: {
            line: 287,
            column: 9
          }
        },
        line: 282
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 295,
            column: 4
          },
          end: {
            line: 295,
            column: 5
          }
        },
        loc: {
          start: {
            line: 295,
            column: 59
          },
          end: {
            line: 315,
            column: 5
          }
        },
        line: 295
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 296,
            column: 27
          },
          end: {
            line: 296,
            column: 28
          }
        },
        loc: {
          start: {
            line: 296,
            column: 48
          },
          end: {
            line: 314,
            column: 9
          }
        },
        line: 296
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 297,
            column: 39
          },
          end: {
            line: 297,
            column: 40
          }
        },
        loc: {
          start: {
            line: 297,
            column: 45
          },
          end: {
            line: 299,
            column: 13
          }
        },
        line: 297
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 300,
            column: 28
          },
          end: {
            line: 300,
            column: 29
          }
        },
        loc: {
          start: {
            line: 300,
            column: 34
          },
          end: {
            line: 304,
            column: 13
          }
        },
        line: 300
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 305,
            column: 28
          },
          end: {
            line: 305,
            column: 29
          }
        },
        loc: {
          start: {
            line: 305,
            column: 45
          },
          end: {
            line: 311,
            column: 13
          }
        },
        line: 305
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 322,
            column: 4
          },
          end: {
            line: 322,
            column: 5
          }
        },
        loc: {
          start: {
            line: 322,
            column: 48
          },
          end: {
            line: 328,
            column: 5
          }
        },
        line: 322
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 334,
            column: 4
          },
          end: {
            line: 334,
            column: 5
          }
        },
        loc: {
          start: {
            line: 334,
            column: 27
          },
          end: {
            line: 336,
            column: 5
          }
        },
        line: 334
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 343,
            column: 4
          },
          end: {
            line: 343,
            column: 5
          }
        },
        loc: {
          start: {
            line: 343,
            column: 18
          },
          end: {
            line: 346,
            column: 5
          }
        },
        line: 343
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 350,
            column: 4
          },
          end: {
            line: 350,
            column: 5
          }
        },
        loc: {
          start: {
            line: 350,
            column: 32
          },
          end: {
            line: 363,
            column: 5
          }
        },
        line: 350
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 354,
            column: 50
          },
          end: {
            line: 354,
            column: 51
          }
        },
        loc: {
          start: {
            line: 354,
            column: 55
          },
          end: {
            line: 354,
            column: 88
          }
        },
        line: 354
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 355,
            column: 41
          },
          end: {
            line: 355,
            column: 42
          }
        },
        loc: {
          start: {
            line: 355,
            column: 47
          },
          end: {
            line: 361,
            column: 13
          }
        },
        line: 355
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 367,
            column: 4
          },
          end: {
            line: 367,
            column: 5
          }
        },
        loc: {
          start: {
            line: 367,
            column: 20
          },
          end: {
            line: 373,
            column: 5
          }
        },
        line: 367
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 369,
            column: 75
          },
          end: {
            line: 369,
            column: 76
          }
        },
        loc: {
          start: {
            line: 369,
            column: 91
          },
          end: {
            line: 369,
            column: 213
          }
        },
        line: 369
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 369,
            column: 133
          },
          end: {
            line: 369,
            column: 134
          }
        },
        loc: {
          start: {
            line: 369,
            column: 142
          },
          end: {
            line: 369,
            column: 212
          }
        },
        line: 369
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 19,
            column: 3
          },
          end: {
            line: 19,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 19,
            column: 3
          },
          end: {
            line: 19,
            column: 14
          }
        }, {
          start: {
            line: 19,
            column: 19
          },
          end: {
            line: 19,
            column: 57
          }
        }],
        line: 19
      },
      "1": {
        loc: {
          start: {
            line: 66,
            column: 12
          },
          end: {
            line: 68,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 66,
            column: 12
          },
          end: {
            line: 68,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 66
      },
      "2": {
        loc: {
          start: {
            line: 96,
            column: 41
          },
          end: {
            line: 96,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 96,
            column: 66
          },
          end: {
            line: 96,
            column: 79
          }
        }, {
          start: {
            line: 96,
            column: 82
          },
          end: {
            line: 96,
            column: 95
          }
        }],
        line: 96
      },
      "3": {
        loc: {
          start: {
            line: 110,
            column: 8
          },
          end: {
            line: 112,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 110,
            column: 8
          },
          end: {
            line: 112,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 110
      },
      "4": {
        loc: {
          start: {
            line: 113,
            column: 8
          },
          end: {
            line: 116,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 113,
            column: 8
          },
          end: {
            line: 116,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 113
      },
      "5": {
        loc: {
          start: {
            line: 119,
            column: 12
          },
          end: {
            line: 136,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 119,
            column: 12
          },
          end: {
            line: 136,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 119
      },
      "6": {
        loc: {
          start: {
            line: 126,
            column: 24
          },
          end: {
            line: 128,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 126,
            column: 24
          },
          end: {
            line: 128,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 126
      },
      "7": {
        loc: {
          start: {
            line: 126,
            column: 28
          },
          end: {
            line: 126,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 126,
            column: 28
          },
          end: {
            line: 126,
            column: 46
          }
        }, {
          start: {
            line: 126,
            column: 50
          },
          end: {
            line: 126,
            column: 76
          }
        }],
        line: 126
      },
      "8": {
        loc: {
          start: {
            line: 184,
            column: 12
          },
          end: {
            line: 186,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 184,
            column: 12
          },
          end: {
            line: 186,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 184
      },
      "9": {
        loc: {
          start: {
            line: 189,
            column: 8
          },
          end: {
            line: 191,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 189,
            column: 8
          },
          end: {
            line: 191,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 189
      },
      "10": {
        loc: {
          start: {
            line: 193,
            column: 8
          },
          end: {
            line: 195,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 193,
            column: 8
          },
          end: {
            line: 195,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 193
      },
      "11": {
        loc: {
          start: {
            line: 193,
            column: 12
          },
          end: {
            line: 193,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 193,
            column: 12
          },
          end: {
            line: 193,
            column: 32
          }
        }, {
          start: {
            line: 193,
            column: 36
          },
          end: {
            line: 193,
            column: 60
          }
        }],
        line: 193
      },
      "12": {
        loc: {
          start: {
            line: 196,
            column: 8
          },
          end: {
            line: 198,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 196,
            column: 8
          },
          end: {
            line: 198,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 196
      },
      "13": {
        loc: {
          start: {
            line: 196,
            column: 12
          },
          end: {
            line: 196,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 196,
            column: 12
          },
          end: {
            line: 196,
            column: 33
          }
        }, {
          start: {
            line: 196,
            column: 37
          },
          end: {
            line: 196,
            column: 62
          }
        }],
        line: 196
      },
      "14": {
        loc: {
          start: {
            line: 209,
            column: 12
          },
          end: {
            line: 211,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 209,
            column: 12
          },
          end: {
            line: 211,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 209
      },
      "15": {
        loc: {
          start: {
            line: 217,
            column: 62
          },
          end: {
            line: 217,
            column: 116
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 217,
            column: 87
          },
          end: {
            line: 217,
            column: 100
          }
        }, {
          start: {
            line: 217,
            column: 103
          },
          end: {
            line: 217,
            column: 116
          }
        }],
        line: 217
      },
      "16": {
        loc: {
          start: {
            line: 239,
            column: 8
          },
          end: {
            line: 241,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 239,
            column: 8
          },
          end: {
            line: 241,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 239
      },
      "17": {
        loc: {
          start: {
            line: 243,
            column: 8
          },
          end: {
            line: 245,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 243,
            column: 8
          },
          end: {
            line: 245,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 243
      },
      "18": {
        loc: {
          start: {
            line: 247,
            column: 8
          },
          end: {
            line: 249,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 247,
            column: 8
          },
          end: {
            line: 249,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 247
      },
      "19": {
        loc: {
          start: {
            line: 260,
            column: 8
          },
          end: {
            line: 261,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 260,
            column: 8
          },
          end: {
            line: 261,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 260
      },
      "20": {
        loc: {
          start: {
            line: 270,
            column: 12
          },
          end: {
            line: 272,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 270,
            column: 12
          },
          end: {
            line: 272,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 270
      },
      "21": {
        loc: {
          start: {
            line: 276,
            column: 12
          },
          end: {
            line: 279,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 276,
            column: 12
          },
          end: {
            line: 279,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 276
      },
      "22": {
        loc: {
          start: {
            line: 295,
            column: 40
          },
          end: {
            line: 295,
            column: 57
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 295,
            column: 52
          },
          end: {
            line: 295,
            column: 57
          }
        }],
        line: 295
      },
      "23": {
        loc: {
          start: {
            line: 306,
            column: 16
          },
          end: {
            line: 310,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 306,
            column: 16
          },
          end: {
            line: 310,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 306
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0],
      "23": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\ssh-tunnel-manager.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\ssh-tunnel-manager.ts"],
      sourcesContent: ["import { EventEmitter } from 'events';\r\nimport { spawn, ChildProcess } from 'child_process';\r\nimport { promises as fs, constants as fsConstants } from 'fs';\r\nimport { join } from 'path';\r\nimport { Logger } from '../core/logging/logger';\r\nimport { EncryptionService } from '../security/encryption-service';\r\n\r\n/**\r\n * SSH Tunnel Configuration interface\r\n * Defines all parameters needed to establish a secure SSH tunnel to Oracle Free Tier\r\n */\r\nexport interface TunnelConfig {\r\n  /** Tunnel name identifier */\r\n  name: string;\r\n  /** Remote host to tunnel to */\r\n  remoteHost: string;\r\n  /** Remote port to tunnel to */\r\n  remotePort: number;\r\n  /** Local port for tunnel */\r\n  localPort: number;\r\n  /** SSH host (Oracle Free Tier IP) */\r\n  sshHost: string;\r\n  /** SSH port (default: 22) */\r\n  sshPort: number;\r\n  /** SSH username for Oracle instance */\r\n  sshUsername: string;\r\n  /** Path to private key file */\r\n  privateKeyPath?: string;\r\n  /** Private key content */\r\n  privateKey?: string;\r\n  /** Maximum retry attempts */\r\n  maxRetries: number;\r\n  /** Retry delay in milliseconds */\r\n  retryDelay: number;\r\n  /** Health check interval in milliseconds */\r\n  healthCheckInterval: number;\r\n  /** Enable SSH compression */\r\n  compression: boolean;\r\n  /** Enable SSH keep-alive */\r\n  keepAlive: boolean;\r\n}\r\n\r\n/**\r\n * SSH Tunnel Connection interface\r\n * Represents an active SSH tunnel connection with state management\r\n */\r\nexport interface TunnelConnection {\r\n  /** Unique connection identifier */\r\n  id: string;\r\n  /** Connection configuration */\r\n  config: TunnelConfig;\r\n  /** SSH process handle */\r\n  process: ChildProcess | null;\r\n  /** Connection state */\r\n  state: TunnelState;\r\n  /** Connection establishment timestamp */\r\n  connectedAt: Date | null;\r\n  /** Last activity timestamp */\r\n  lastActivity: Date;\r\n  /** Connection statistics */\r\n  stats: TunnelStats;\r\n}\r\n\r\n/**\r\n * Tunnel connection states\r\n */\r\nexport enum TunnelState {\r\n  DISCONNECTED = 'DISCONNECTED',\r\n  CONNECTING = 'CONNECTING',\r\n  CONNECTED = 'CONNECTED',\r\n  RECONNECTING = 'RECONNECTING',\r\n  FAILED = 'FAILED',\r\n  TERMINATED = 'TERMINATED'\r\n}\r\n\r\n/**\r\n * Tunnel connection statistics\r\n */\r\nexport interface TunnelStats {\r\n  /** Total bytes transferred */\r\n  bytesTransferred: number;\r\n  /** Connection uptime in milliseconds */\r\n  uptime: number;\r\n  /** Number of reconnection attempts */\r\n  reconnectAttempts: number;\r\n  /** Last error message */\r\n  lastError: string | null;\r\n  /** Connection quality score (0-100) */\r\n  qualityScore: number;\r\n}\r\n\r\n/**\r\n * SSH Tunnel Manager\r\n * Manages SSH tunnel connections to Oracle Free Tier with authentication,\r\n * state management, and connection validation\r\n */\r\nexport class SSHTunnelManager extends EventEmitter {\r\n  private logger: Logger;\r\n  private connections: Map<string, TunnelConnection>;\r\n\r\n  constructor() {\r\n    super();\r\n    this.logger = new Logger('SSHTunnelManager');\r\n    this.connections = new Map();\r\n    \r\n    this.logger.info('SSH Tunnel Manager initialized');\r\n  }\r\n\r\n  /**\r\n   * Establish SSH tunnel connection\r\n   * @param config - Tunnel configuration parameters\r\n   * @returns Promise resolving to tunnel connection\r\n   */\r\n  async establishTunnel(config: TunnelConfig): Promise<TunnelConnection> {\r\n    // Validate configuration\r\n    await this.validateTunnelConfig(config);\r\n    \r\n    // Generate unique connection ID\r\n    const connectionId = this.generateConnectionId();\r\n    \r\n    // Create connection object\r\n    const connection: TunnelConnection = {\r\n      id: connectionId,\r\n      config: config,\r\n      process: null,\r\n      state: TunnelState.DISCONNECTED,\r\n      connectedAt: null,\r\n      lastActivity: new Date(),\r\n      stats: {\r\n        bytesTransferred: 0,\r\n        uptime: 0,\r\n        reconnectAttempts: 0,\r\n        lastError: null,\r\n        qualityScore: 0\r\n      }\r\n    };\r\n\r\n    // Store connection\r\n    this.connections.set(connectionId, connection);\r\n    \r\n    try {\r\n      // Update state to connecting\r\n      this.updateConnectionState(connection, TunnelState.CONNECTING);\r\n      \r\n      // Validate private key exists and is accessible\r\n      if (config.privateKeyPath) {\r\n        await this.validatePrivateKey(config.privateKeyPath);\r\n      }\r\n      \r\n      // Build SSH command arguments\r\n      const sshArgs = this.buildSSHArguments(config);\r\n      \r\n      this.logger.info(`Establishing SSH tunnel: ${connectionId}`, {\r\n        remoteHost: config.remoteHost,\r\n        localPort: config.localPort,\r\n        remotePort: config.remotePort\r\n      });\r\n\r\n      // Spawn SSH process\r\n      const sshProcess = spawn('ssh', sshArgs, {\r\n        stdio: ['pipe', 'pipe', 'pipe'],\r\n        detached: false\r\n      });\r\n\r\n      connection.process = sshProcess;\r\n\r\n      // Set up process event handlers\r\n      this.setupProcessHandlers(connection);\r\n\r\n      // Wait for connection establishment\r\n      await this.waitForConnection(connection);\r\n      \r\n      // Update connection state\r\n      this.updateConnectionState(connection, TunnelState.CONNECTED);\r\n      connection.connectedAt = new Date();\r\n      \r\n      this.logger.info(`SSH tunnel established successfully: ${connectionId}`);\r\n      this.emit('tunnelConnected', connection);\r\n\r\n      return connection;\r\n\r\n    } catch (error) {\r\n      this.logger.error(`Failed to establish SSH tunnel: ${connectionId}`, error);\r\n      this.updateConnectionState(connection, TunnelState.FAILED);\r\n      connection.stats.lastError = error instanceof Error ? error.message : String(error);\r\n      this.emit('tunnelError', connection, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Disconnect SSH tunnel\r\n   * Gracefully terminates the SSH connection\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @returns Promise resolving when disconnected\r\n   */\r\n  async disconnectTunnel(connectionId: string): Promise<void> {\r\n    const connection = this.connections.get(connectionId);\r\n    if (!connection) {\r\n      throw new Error(`Connection not found: ${connectionId}`);\r\n    }\r\n\r\n    if (connection.state === TunnelState.DISCONNECTED) {\r\n      this.logger.warn(`Tunnel already disconnected: ${connectionId}`);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      this.logger.info(`Disconnecting SSH tunnel: ${connectionId}`);\r\n      \r\n      if (connection.process) {\r\n        // Graceful termination\r\n        connection.process.kill('SIGTERM');\r\n        \r\n        // Wait for process to exit\r\n        await new Promise<void>((resolve) => {\r\n          const timeout = setTimeout(() => {\r\n            // Force kill if graceful termination fails\r\n            if (connection.process && !connection.process.killed) {\r\n              connection.process.kill('SIGKILL');\r\n            }\r\n            resolve();\r\n          }, 5000);\r\n\r\n          connection.process!.on('exit', () => {\r\n            clearTimeout(timeout);\r\n            resolve();\r\n          });\r\n        });\r\n      }\r\n\r\n      this.updateConnectionState(connection, TunnelState.DISCONNECTED);\r\n      connection.process = null;\r\n      connection.connectedAt = null;\r\n      \r\n      this.logger.info(`SSH tunnel disconnected: ${connectionId}`);\r\n      this.emit('tunnelDisconnected', connection);\r\n\r\n    } catch (error) {\r\n      this.logger.error(`Error disconnecting SSH tunnel: ${connectionId}`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get connection by ID\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @returns Tunnel connection or undefined\r\n   */\r\n  getConnection(connectionId: string): TunnelConnection | undefined {\r\n    return this.connections.get(connectionId);\r\n  }\r\n\r\n  /**\r\n   * Get all connections\r\n   * \r\n   * @returns Array of all tunnel connections\r\n   */\r\n  getAllConnections(): TunnelConnection[] {\r\n    return Array.from(this.connections.values());\r\n  }\r\n\r\n  /**\r\n   * Get active connections\r\n   * \r\n   * @returns Array of connected tunnel connections\r\n   */\r\n  getActiveConnections(): TunnelConnection[] {\r\n    return this.getAllConnections().filter(\r\n      conn => conn.state === TunnelState.CONNECTED\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Validate tunnel configuration\r\n   * Ensures all required parameters are present and valid\r\n   * \r\n   * @param config - Tunnel configuration to validate\r\n   */\r\n  private async validateTunnelConfig(config: TunnelConfig): Promise<void> {\r\n    const requiredFields: (keyof TunnelConfig)[] = [\r\n      'name', 'remoteHost', 'sshHost', 'sshUsername', 'localPort', 'remotePort'\r\n    ];\r\n\r\n    for (const field of requiredFields) {\r\n      if (!config[field]) {\r\n        throw new Error(`Missing required tunnel configuration: ${field}`);\r\n      }\r\n    }\r\n\r\n    // Validate IP address format for SSH host\r\n    if (!this.isValidIP(config.sshHost)) {\r\n      throw new Error(`Invalid SSH host IP address: ${config.sshHost}`);\r\n    }\r\n\r\n    // Validate port ranges\r\n    if (config.localPort < 1 || config.localPort > 65535) {\r\n      throw new Error(`Invalid local port: ${config.localPort}`);\r\n    }\r\n\r\n    if (config.remotePort < 1 || config.remotePort > 65535) {\r\n      throw new Error(`Invalid remote port: ${config.remotePort}`);\r\n    }\r\n\r\n    this.logger.debug('Tunnel configuration validated successfully');\r\n  }\r\n\r\n  /**\r\n   * Validate private key file exists and is accessible\r\n   * \r\n   * @param privateKeyPath - Path to private key file\r\n   */\r\n  private async validatePrivateKey(privateKeyPath: string): Promise<void> {\r\n    try {\r\n      const stats = await fs.stat(privateKeyPath);\r\n      \r\n      if (!stats.isFile()) {\r\n        throw new Error(`Private key path is not a file: ${privateKeyPath}`);\r\n      }\r\n\r\n      // Check file permissions (should be readable by owner only)\r\n      await fs.access(privateKeyPath, fsConstants.R_OK);\r\n      \r\n      this.logger.debug(`Private key validated: ${privateKeyPath}`);\r\n      \r\n    } catch (error) {\r\n      throw new Error(`Private key validation failed: ${error instanceof Error ? error.message : String(error)}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Build SSH command arguments\r\n   * \r\n   * @param config - Tunnel configuration\r\n   * @returns Array of SSH command arguments\r\n   */\r\n  private buildSSHArguments(config: TunnelConfig): string[] {\r\n    const args = [\r\n      '-N', // No remote command execution\r\n      '-T', // Disable pseudo-terminal allocation\r\n      '-o', 'StrictHostKeyChecking=no', // Accept new host keys\r\n      '-o', 'UserKnownHostsFile=/dev/null', // Don't save host keys\r\n      '-o', 'ConnectTimeout=30',\r\n      '-o', 'ServerAliveInterval=60',\r\n      '-o', 'ServerAliveCountMax=3',\r\n      '-p', config.sshPort.toString(), // SSH port\r\n      '-L', `${config.localPort}:${config.remoteHost}:${config.remotePort}`, // Local port forwarding\r\n    ];\r\n\r\n    // Add private key\r\n    if (config.privateKeyPath) {\r\n      args.push('-i', config.privateKeyPath);\r\n    }\r\n\r\n    // Add compression if enabled\r\n    if (config.compression) {\r\n      args.push('-C');\r\n    }\r\n\r\n    // Add keep-alive if enabled\r\n    if (config.keepAlive) {\r\n      args.push('-o', 'TCPKeepAlive=yes');\r\n    }\r\n\r\n    // Add connection target\r\n    args.push(`${config.sshUsername}@${config.sshHost}`);\r\n\r\n    return args;\r\n  }\r\n\r\n  /**\r\n   * Set up SSH process event handlers\r\n   * \r\n   * @param connection - Tunnel connection\r\n   */\r\n  private setupProcessHandlers(connection: TunnelConnection): void {\r\n    if (!connection.process) return;\r\n\r\n    const process = connection.process;\r\n\r\n    process.stdout?.on('data', (data) => {\r\n      this.logger.debug(`SSH stdout [${connection.id}]: ${data.toString().trim()}`);\r\n    });\r\n\r\n    process.stderr?.on('data', (data) => {\r\n      const message = data.toString().trim();\r\n      this.logger.debug(`SSH stderr [${connection.id}]: ${message}`);\r\n      \r\n      // Check for connection success indicators\r\n      if (message.includes('Local forwarding listening')) {\r\n        this.emit('tunnelReady', connection);\r\n      }\r\n    });\r\n\r\n    process.on('exit', (code, signal) => {\r\n      this.logger.info(`SSH process exited [${connection.id}]`, { code, signal });\r\n      \r\n      if (connection.state === TunnelState.CONNECTED) {\r\n        this.updateConnectionState(connection, TunnelState.DISCONNECTED);\r\n        this.emit('tunnelDisconnected', connection);\r\n      }\r\n      \r\n      connection.process = null;\r\n    });\r\n\r\n    process.on('error', (error) => {\r\n      this.logger.error(`SSH process error [${connection.id}]`, error);\r\n      this.updateConnectionState(connection, TunnelState.FAILED);\r\n      connection.stats.lastError = error.message;\r\n      this.emit('tunnelError', connection, error);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Wait for SSH tunnel connection to be established\r\n   * \r\n   * @param connection - Tunnel connection\r\n   * @param timeoutMs - Timeout in milliseconds\r\n   */\r\n  private async waitForConnection(connection: TunnelConnection, timeoutMs: number = 30000): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      const timeout = setTimeout(() => {\r\n        reject(new Error(`SSH tunnel connection timeout: ${connection.id}`));\r\n      }, timeoutMs);\r\n\r\n      const onReady = () => {\r\n        clearTimeout(timeout);\r\n        this.removeListener('tunnelError', onError);\r\n        resolve();\r\n      };\r\n\r\n      const onError = (conn: TunnelConnection, error: Error) => {\r\n        if (conn.id === connection.id) {\r\n          clearTimeout(timeout);\r\n          this.removeListener('tunnelReady', onReady);\r\n          reject(error);\r\n        }\r\n      };\r\n\r\n      this.once('tunnelReady', onReady);\r\n      this.once('tunnelError', onError);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update connection state and emit events\r\n   * \r\n   * @param connection - Tunnel connection\r\n   * @param newState - New connection state\r\n   */\r\n  private updateConnectionState(connection: TunnelConnection, newState: TunnelState): void {\r\n    const oldState = connection.state;\r\n    connection.state = newState;\r\n    connection.lastActivity = new Date();\r\n\r\n    this.logger.debug(`Tunnel state changed [${connection.id}]: ${oldState} -> ${newState}`);\r\n    this.emit('stateChanged', connection, oldState, newState);\r\n  }\r\n\r\n  /**\r\n   * Generate unique connection ID\r\n   * \r\n   * @returns Unique connection identifier\r\n   */\r\n  private generateConnectionId(): string {\r\n    return `tunnel_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  /**\r\n   * Validate IP address format\r\n   * \r\n   * @param ip - IP address to validate\r\n   * @returns True if valid IP address\r\n   */\r\n  private isValidIP(ip: string): boolean {\r\n    const ipRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;\r\n    return ipRegex.test(ip);\r\n  }\r\n\r\n  /**\r\n   * Get connection status for all tunnels\r\n   */\r\n  async getConnectionStatus(): Promise<any> {\r\n    const connections = Array.from(this.connections.values());\r\n    return {\r\n      totalConnections: connections.length,\r\n      activeConnections: connections.filter(c => c.state === TunnelState.CONNECTED).length,\r\n      connections: connections.map(c => ({\r\n        id: c.id,\r\n        name: c.config.name,\r\n        state: c.state,\r\n        connectedAt: c.connectedAt,\r\n        lastActivity: c.lastActivity\r\n      }))\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Cleanup all connections on shutdown\r\n   */\r\n  async cleanup(): Promise<void> {\r\n    this.logger.info('Cleaning up SSH tunnel connections');\r\n    \r\n    const disconnectPromises = Array.from(this.connections.keys()).map(\r\n      connectionId => this.disconnectTunnel(connectionId).catch(error => \r\n        this.logger.error(`Error disconnecting tunnel ${connectionId}`, error)\r\n      )\r\n    );\r\n\r\n    await Promise.all(disconnectPromises);\r\n    this.connections.clear();\r\n    \r\n    this.logger.info('SSH tunnel cleanup completed');\r\n  }\r\n}\r\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "f73ca73e647147a4cb20b048b1b4419b42f64fa4"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2pgvlnd7u9 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2pgvlnd7u9();
cov_2pgvlnd7u9().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2pgvlnd7u9().s[1]++;
exports.SSHTunnelManager = exports.TunnelState = void 0;
const events_1 =
/* istanbul ignore next */
(cov_2pgvlnd7u9().s[2]++, require("events"));
const child_process_1 =
/* istanbul ignore next */
(cov_2pgvlnd7u9().s[3]++, require("child_process"));
const fs_1 =
/* istanbul ignore next */
(cov_2pgvlnd7u9().s[4]++, require("fs"));
const logger_1 =
/* istanbul ignore next */
(cov_2pgvlnd7u9().s[5]++, require("../core/logging/logger"));
/**
 * Tunnel connection states
 */
var TunnelState;
/* istanbul ignore next */
cov_2pgvlnd7u9().s[6]++;
(function (TunnelState) {
  /* istanbul ignore next */
  cov_2pgvlnd7u9().f[0]++;
  cov_2pgvlnd7u9().s[7]++;
  TunnelState["DISCONNECTED"] = "DISCONNECTED";
  /* istanbul ignore next */
  cov_2pgvlnd7u9().s[8]++;
  TunnelState["CONNECTING"] = "CONNECTING";
  /* istanbul ignore next */
  cov_2pgvlnd7u9().s[9]++;
  TunnelState["CONNECTED"] = "CONNECTED";
  /* istanbul ignore next */
  cov_2pgvlnd7u9().s[10]++;
  TunnelState["RECONNECTING"] = "RECONNECTING";
  /* istanbul ignore next */
  cov_2pgvlnd7u9().s[11]++;
  TunnelState["FAILED"] = "FAILED";
  /* istanbul ignore next */
  cov_2pgvlnd7u9().s[12]++;
  TunnelState["TERMINATED"] = "TERMINATED";
})(
/* istanbul ignore next */
(cov_2pgvlnd7u9().b[0][0]++, TunnelState) ||
/* istanbul ignore next */
(cov_2pgvlnd7u9().b[0][1]++, exports.TunnelState = TunnelState = {}));
/**
 * SSH Tunnel Manager
 * Manages SSH tunnel connections to Oracle Free Tier with authentication,
 * state management, and connection validation
 */
class SSHTunnelManager extends
/* istanbul ignore next */
(events_1.EventEmitter) {
  logger;
  connections;
  constructor() {
    /* istanbul ignore next */
    cov_2pgvlnd7u9().f[1]++;
    cov_2pgvlnd7u9().s[13]++;
    super();
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[14]++;
    this.logger = new logger_1.Logger('SSHTunnelManager');
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[15]++;
    this.connections = new Map();
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[16]++;
    this.logger.info('SSH Tunnel Manager initialized');
  }
  /**
   * Establish SSH tunnel connection
   * @param config - Tunnel configuration parameters
   * @returns Promise resolving to tunnel connection
   */
  async establishTunnel(config) {
    /* istanbul ignore next */
    cov_2pgvlnd7u9().f[2]++;
    cov_2pgvlnd7u9().s[17]++;
    // Validate configuration
    await this.validateTunnelConfig(config);
    // Generate unique connection ID
    const connectionId =
    /* istanbul ignore next */
    (cov_2pgvlnd7u9().s[18]++, this.generateConnectionId());
    // Create connection object
    const connection =
    /* istanbul ignore next */
    (cov_2pgvlnd7u9().s[19]++, {
      id: connectionId,
      config: config,
      process: null,
      state: TunnelState.DISCONNECTED,
      connectedAt: null,
      lastActivity: new Date(),
      stats: {
        bytesTransferred: 0,
        uptime: 0,
        reconnectAttempts: 0,
        lastError: null,
        qualityScore: 0
      }
    });
    // Store connection
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[20]++;
    this.connections.set(connectionId, connection);
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[21]++;
    try {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[22]++;
      // Update state to connecting
      this.updateConnectionState(connection, TunnelState.CONNECTING);
      // Validate private key exists and is accessible
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[23]++;
      if (config.privateKeyPath) {
        /* istanbul ignore next */
        cov_2pgvlnd7u9().b[1][0]++;
        cov_2pgvlnd7u9().s[24]++;
        await this.validatePrivateKey(config.privateKeyPath);
      } else
      /* istanbul ignore next */
      {
        cov_2pgvlnd7u9().b[1][1]++;
      }
      // Build SSH command arguments
      const sshArgs =
      /* istanbul ignore next */
      (cov_2pgvlnd7u9().s[25]++, this.buildSSHArguments(config));
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[26]++;
      this.logger.info(`Establishing SSH tunnel: ${connectionId}`, {
        remoteHost: config.remoteHost,
        localPort: config.localPort,
        remotePort: config.remotePort
      });
      // Spawn SSH process
      const sshProcess =
      /* istanbul ignore next */
      (cov_2pgvlnd7u9().s[27]++, (0, child_process_1.spawn)('ssh', sshArgs, {
        stdio: ['pipe', 'pipe', 'pipe'],
        detached: false
      }));
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[28]++;
      connection.process = sshProcess;
      // Set up process event handlers
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[29]++;
      this.setupProcessHandlers(connection);
      // Wait for connection establishment
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[30]++;
      await this.waitForConnection(connection);
      // Update connection state
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[31]++;
      this.updateConnectionState(connection, TunnelState.CONNECTED);
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[32]++;
      connection.connectedAt = new Date();
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[33]++;
      this.logger.info(`SSH tunnel established successfully: ${connectionId}`);
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[34]++;
      this.emit('tunnelConnected', connection);
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[35]++;
      return connection;
    } catch (error) {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[36]++;
      this.logger.error(`Failed to establish SSH tunnel: ${connectionId}`, error);
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[37]++;
      this.updateConnectionState(connection, TunnelState.FAILED);
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[38]++;
      connection.stats.lastError = error instanceof Error ?
      /* istanbul ignore next */
      (cov_2pgvlnd7u9().b[2][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2pgvlnd7u9().b[2][1]++, String(error));
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[39]++;
      this.emit('tunnelError', connection, error);
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[40]++;
      throw error;
    }
  }
  /**
   * Disconnect SSH tunnel
   * Gracefully terminates the SSH connection
   *
   * @param connectionId - Connection identifier
   * @returns Promise resolving when disconnected
   */
  async disconnectTunnel(connectionId) {
    /* istanbul ignore next */
    cov_2pgvlnd7u9().f[3]++;
    const connection =
    /* istanbul ignore next */
    (cov_2pgvlnd7u9().s[41]++, this.connections.get(connectionId));
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[42]++;
    if (!connection) {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().b[3][0]++;
      cov_2pgvlnd7u9().s[43]++;
      throw new Error(`Connection not found: ${connectionId}`);
    } else
    /* istanbul ignore next */
    {
      cov_2pgvlnd7u9().b[3][1]++;
    }
    cov_2pgvlnd7u9().s[44]++;
    if (connection.state === TunnelState.DISCONNECTED) {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().b[4][0]++;
      cov_2pgvlnd7u9().s[45]++;
      this.logger.warn(`Tunnel already disconnected: ${connectionId}`);
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[46]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2pgvlnd7u9().b[4][1]++;
    }
    cov_2pgvlnd7u9().s[47]++;
    try {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[48]++;
      this.logger.info(`Disconnecting SSH tunnel: ${connectionId}`);
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[49]++;
      if (connection.process) {
        /* istanbul ignore next */
        cov_2pgvlnd7u9().b[5][0]++;
        cov_2pgvlnd7u9().s[50]++;
        // Graceful termination
        connection.process.kill('SIGTERM');
        // Wait for process to exit
        /* istanbul ignore next */
        cov_2pgvlnd7u9().s[51]++;
        await new Promise(resolve => {
          /* istanbul ignore next */
          cov_2pgvlnd7u9().f[4]++;
          const timeout =
          /* istanbul ignore next */
          (cov_2pgvlnd7u9().s[52]++, setTimeout(() => {
            /* istanbul ignore next */
            cov_2pgvlnd7u9().f[5]++;
            cov_2pgvlnd7u9().s[53]++;
            // Force kill if graceful termination fails
            if (
            /* istanbul ignore next */
            (cov_2pgvlnd7u9().b[7][0]++, connection.process) &&
            /* istanbul ignore next */
            (cov_2pgvlnd7u9().b[7][1]++, !connection.process.killed)) {
              /* istanbul ignore next */
              cov_2pgvlnd7u9().b[6][0]++;
              cov_2pgvlnd7u9().s[54]++;
              connection.process.kill('SIGKILL');
            } else
            /* istanbul ignore next */
            {
              cov_2pgvlnd7u9().b[6][1]++;
            }
            cov_2pgvlnd7u9().s[55]++;
            resolve();
          }, 5000));
          /* istanbul ignore next */
          cov_2pgvlnd7u9().s[56]++;
          connection.process.on('exit', () => {
            /* istanbul ignore next */
            cov_2pgvlnd7u9().f[6]++;
            cov_2pgvlnd7u9().s[57]++;
            clearTimeout(timeout);
            /* istanbul ignore next */
            cov_2pgvlnd7u9().s[58]++;
            resolve();
          });
        });
      } else
      /* istanbul ignore next */
      {
        cov_2pgvlnd7u9().b[5][1]++;
      }
      cov_2pgvlnd7u9().s[59]++;
      this.updateConnectionState(connection, TunnelState.DISCONNECTED);
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[60]++;
      connection.process = null;
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[61]++;
      connection.connectedAt = null;
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[62]++;
      this.logger.info(`SSH tunnel disconnected: ${connectionId}`);
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[63]++;
      this.emit('tunnelDisconnected', connection);
    } catch (error) {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[64]++;
      this.logger.error(`Error disconnecting SSH tunnel: ${connectionId}`, error);
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[65]++;
      throw error;
    }
  }
  /**
   * Get connection by ID
   *
   * @param connectionId - Connection identifier
   * @returns Tunnel connection or undefined
   */
  getConnection(connectionId) {
    /* istanbul ignore next */
    cov_2pgvlnd7u9().f[7]++;
    cov_2pgvlnd7u9().s[66]++;
    return this.connections.get(connectionId);
  }
  /**
   * Get all connections
   *
   * @returns Array of all tunnel connections
   */
  getAllConnections() {
    /* istanbul ignore next */
    cov_2pgvlnd7u9().f[8]++;
    cov_2pgvlnd7u9().s[67]++;
    return Array.from(this.connections.values());
  }
  /**
   * Get active connections
   *
   * @returns Array of connected tunnel connections
   */
  getActiveConnections() {
    /* istanbul ignore next */
    cov_2pgvlnd7u9().f[9]++;
    cov_2pgvlnd7u9().s[68]++;
    return this.getAllConnections().filter(conn => {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().f[10]++;
      cov_2pgvlnd7u9().s[69]++;
      return conn.state === TunnelState.CONNECTED;
    });
  }
  /**
   * Validate tunnel configuration
   * Ensures all required parameters are present and valid
   *
   * @param config - Tunnel configuration to validate
   */
  async validateTunnelConfig(config) {
    /* istanbul ignore next */
    cov_2pgvlnd7u9().f[11]++;
    const requiredFields =
    /* istanbul ignore next */
    (cov_2pgvlnd7u9().s[70]++, ['name', 'remoteHost', 'sshHost', 'sshUsername', 'localPort', 'remotePort']);
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[71]++;
    for (const field of requiredFields) {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[72]++;
      if (!config[field]) {
        /* istanbul ignore next */
        cov_2pgvlnd7u9().b[8][0]++;
        cov_2pgvlnd7u9().s[73]++;
        throw new Error(`Missing required tunnel configuration: ${field}`);
      } else
      /* istanbul ignore next */
      {
        cov_2pgvlnd7u9().b[8][1]++;
      }
    }
    // Validate IP address format for SSH host
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[74]++;
    if (!this.isValidIP(config.sshHost)) {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().b[9][0]++;
      cov_2pgvlnd7u9().s[75]++;
      throw new Error(`Invalid SSH host IP address: ${config.sshHost}`);
    } else
    /* istanbul ignore next */
    {
      cov_2pgvlnd7u9().b[9][1]++;
    }
    // Validate port ranges
    cov_2pgvlnd7u9().s[76]++;
    if (
    /* istanbul ignore next */
    (cov_2pgvlnd7u9().b[11][0]++, config.localPort < 1) ||
    /* istanbul ignore next */
    (cov_2pgvlnd7u9().b[11][1]++, config.localPort > 65535)) {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().b[10][0]++;
      cov_2pgvlnd7u9().s[77]++;
      throw new Error(`Invalid local port: ${config.localPort}`);
    } else
    /* istanbul ignore next */
    {
      cov_2pgvlnd7u9().b[10][1]++;
    }
    cov_2pgvlnd7u9().s[78]++;
    if (
    /* istanbul ignore next */
    (cov_2pgvlnd7u9().b[13][0]++, config.remotePort < 1) ||
    /* istanbul ignore next */
    (cov_2pgvlnd7u9().b[13][1]++, config.remotePort > 65535)) {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().b[12][0]++;
      cov_2pgvlnd7u9().s[79]++;
      throw new Error(`Invalid remote port: ${config.remotePort}`);
    } else
    /* istanbul ignore next */
    {
      cov_2pgvlnd7u9().b[12][1]++;
    }
    cov_2pgvlnd7u9().s[80]++;
    this.logger.debug('Tunnel configuration validated successfully');
  }
  /**
   * Validate private key file exists and is accessible
   *
   * @param privateKeyPath - Path to private key file
   */
  async validatePrivateKey(privateKeyPath) {
    /* istanbul ignore next */
    cov_2pgvlnd7u9().f[12]++;
    cov_2pgvlnd7u9().s[81]++;
    try {
      const stats =
      /* istanbul ignore next */
      (cov_2pgvlnd7u9().s[82]++, await fs_1.promises.stat(privateKeyPath));
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[83]++;
      if (!stats.isFile()) {
        /* istanbul ignore next */
        cov_2pgvlnd7u9().b[14][0]++;
        cov_2pgvlnd7u9().s[84]++;
        throw new Error(`Private key path is not a file: ${privateKeyPath}`);
      } else
      /* istanbul ignore next */
      {
        cov_2pgvlnd7u9().b[14][1]++;
      }
      // Check file permissions (should be readable by owner only)
      cov_2pgvlnd7u9().s[85]++;
      await fs_1.promises.access(privateKeyPath, fs_1.constants.R_OK);
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[86]++;
      this.logger.debug(`Private key validated: ${privateKeyPath}`);
    } catch (error) {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[87]++;
      throw new Error(`Private key validation failed: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_2pgvlnd7u9().b[15][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2pgvlnd7u9().b[15][1]++, String(error))}`);
    }
  }
  /**
   * Build SSH command arguments
   *
   * @param config - Tunnel configuration
   * @returns Array of SSH command arguments
   */
  buildSSHArguments(config) {
    /* istanbul ignore next */
    cov_2pgvlnd7u9().f[13]++;
    const args =
    /* istanbul ignore next */
    (cov_2pgvlnd7u9().s[88]++, ['-N',
    // No remote command execution
    '-T',
    // Disable pseudo-terminal allocation
    '-o', 'StrictHostKeyChecking=no',
    // Accept new host keys
    '-o', 'UserKnownHostsFile=/dev/null',
    // Don't save host keys
    '-o', 'ConnectTimeout=30', '-o', 'ServerAliveInterval=60', '-o', 'ServerAliveCountMax=3', '-p', config.sshPort.toString(),
    // SSH port
    '-L', `${config.localPort}:${config.remoteHost}:${config.remotePort}` // Local port forwarding
    ]);
    // Add private key
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[89]++;
    if (config.privateKeyPath) {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().b[16][0]++;
      cov_2pgvlnd7u9().s[90]++;
      args.push('-i', config.privateKeyPath);
    } else
    /* istanbul ignore next */
    {
      cov_2pgvlnd7u9().b[16][1]++;
    }
    // Add compression if enabled
    cov_2pgvlnd7u9().s[91]++;
    if (config.compression) {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().b[17][0]++;
      cov_2pgvlnd7u9().s[92]++;
      args.push('-C');
    } else
    /* istanbul ignore next */
    {
      cov_2pgvlnd7u9().b[17][1]++;
    }
    // Add keep-alive if enabled
    cov_2pgvlnd7u9().s[93]++;
    if (config.keepAlive) {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().b[18][0]++;
      cov_2pgvlnd7u9().s[94]++;
      args.push('-o', 'TCPKeepAlive=yes');
    } else
    /* istanbul ignore next */
    {
      cov_2pgvlnd7u9().b[18][1]++;
    }
    // Add connection target
    cov_2pgvlnd7u9().s[95]++;
    args.push(`${config.sshUsername}@${config.sshHost}`);
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[96]++;
    return args;
  }
  /**
   * Set up SSH process event handlers
   *
   * @param connection - Tunnel connection
   */
  setupProcessHandlers(connection) {
    /* istanbul ignore next */
    cov_2pgvlnd7u9().f[14]++;
    cov_2pgvlnd7u9().s[97]++;
    if (!connection.process) {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().b[19][0]++;
      cov_2pgvlnd7u9().s[98]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2pgvlnd7u9().b[19][1]++;
    }
    const process =
    /* istanbul ignore next */
    (cov_2pgvlnd7u9().s[99]++, connection.process);
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[100]++;
    process.stdout?.on('data', data => {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().f[15]++;
      cov_2pgvlnd7u9().s[101]++;
      this.logger.debug(`SSH stdout [${connection.id}]: ${data.toString().trim()}`);
    });
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[102]++;
    process.stderr?.on('data', data => {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().f[16]++;
      const message =
      /* istanbul ignore next */
      (cov_2pgvlnd7u9().s[103]++, data.toString().trim());
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[104]++;
      this.logger.debug(`SSH stderr [${connection.id}]: ${message}`);
      // Check for connection success indicators
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[105]++;
      if (message.includes('Local forwarding listening')) {
        /* istanbul ignore next */
        cov_2pgvlnd7u9().b[20][0]++;
        cov_2pgvlnd7u9().s[106]++;
        this.emit('tunnelReady', connection);
      } else
      /* istanbul ignore next */
      {
        cov_2pgvlnd7u9().b[20][1]++;
      }
    });
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[107]++;
    process.on('exit', (code, signal) => {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().f[17]++;
      cov_2pgvlnd7u9().s[108]++;
      this.logger.info(`SSH process exited [${connection.id}]`, {
        code,
        signal
      });
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[109]++;
      if (connection.state === TunnelState.CONNECTED) {
        /* istanbul ignore next */
        cov_2pgvlnd7u9().b[21][0]++;
        cov_2pgvlnd7u9().s[110]++;
        this.updateConnectionState(connection, TunnelState.DISCONNECTED);
        /* istanbul ignore next */
        cov_2pgvlnd7u9().s[111]++;
        this.emit('tunnelDisconnected', connection);
      } else
      /* istanbul ignore next */
      {
        cov_2pgvlnd7u9().b[21][1]++;
      }
      cov_2pgvlnd7u9().s[112]++;
      connection.process = null;
    });
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[113]++;
    process.on('error', error => {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().f[18]++;
      cov_2pgvlnd7u9().s[114]++;
      this.logger.error(`SSH process error [${connection.id}]`, error);
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[115]++;
      this.updateConnectionState(connection, TunnelState.FAILED);
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[116]++;
      connection.stats.lastError = error.message;
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[117]++;
      this.emit('tunnelError', connection, error);
    });
  }
  /**
   * Wait for SSH tunnel connection to be established
   *
   * @param connection - Tunnel connection
   * @param timeoutMs - Timeout in milliseconds
   */
  async waitForConnection(connection, timeoutMs =
  /* istanbul ignore next */
  (cov_2pgvlnd7u9().b[22][0]++, 30000)) {
    /* istanbul ignore next */
    cov_2pgvlnd7u9().f[19]++;
    cov_2pgvlnd7u9().s[118]++;
    return new Promise((resolve, reject) => {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().f[20]++;
      const timeout =
      /* istanbul ignore next */
      (cov_2pgvlnd7u9().s[119]++, setTimeout(() => {
        /* istanbul ignore next */
        cov_2pgvlnd7u9().f[21]++;
        cov_2pgvlnd7u9().s[120]++;
        reject(new Error(`SSH tunnel connection timeout: ${connection.id}`));
      }, timeoutMs));
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[121]++;
      const onReady = () => {
        /* istanbul ignore next */
        cov_2pgvlnd7u9().f[22]++;
        cov_2pgvlnd7u9().s[122]++;
        clearTimeout(timeout);
        /* istanbul ignore next */
        cov_2pgvlnd7u9().s[123]++;
        this.removeListener('tunnelError', onError);
        /* istanbul ignore next */
        cov_2pgvlnd7u9().s[124]++;
        resolve();
      };
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[125]++;
      const onError = (conn, error) => {
        /* istanbul ignore next */
        cov_2pgvlnd7u9().f[23]++;
        cov_2pgvlnd7u9().s[126]++;
        if (conn.id === connection.id) {
          /* istanbul ignore next */
          cov_2pgvlnd7u9().b[23][0]++;
          cov_2pgvlnd7u9().s[127]++;
          clearTimeout(timeout);
          /* istanbul ignore next */
          cov_2pgvlnd7u9().s[128]++;
          this.removeListener('tunnelReady', onReady);
          /* istanbul ignore next */
          cov_2pgvlnd7u9().s[129]++;
          reject(error);
        } else
        /* istanbul ignore next */
        {
          cov_2pgvlnd7u9().b[23][1]++;
        }
      };
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[130]++;
      this.once('tunnelReady', onReady);
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[131]++;
      this.once('tunnelError', onError);
    });
  }
  /**
   * Update connection state and emit events
   *
   * @param connection - Tunnel connection
   * @param newState - New connection state
   */
  updateConnectionState(connection, newState) {
    /* istanbul ignore next */
    cov_2pgvlnd7u9().f[24]++;
    const oldState =
    /* istanbul ignore next */
    (cov_2pgvlnd7u9().s[132]++, connection.state);
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[133]++;
    connection.state = newState;
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[134]++;
    connection.lastActivity = new Date();
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[135]++;
    this.logger.debug(`Tunnel state changed [${connection.id}]: ${oldState} -> ${newState}`);
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[136]++;
    this.emit('stateChanged', connection, oldState, newState);
  }
  /**
   * Generate unique connection ID
   *
   * @returns Unique connection identifier
   */
  generateConnectionId() {
    /* istanbul ignore next */
    cov_2pgvlnd7u9().f[25]++;
    cov_2pgvlnd7u9().s[137]++;
    return `tunnel_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }
  /**
   * Validate IP address format
   *
   * @param ip - IP address to validate
   * @returns True if valid IP address
   */
  isValidIP(ip) {
    /* istanbul ignore next */
    cov_2pgvlnd7u9().f[26]++;
    const ipRegex =
    /* istanbul ignore next */
    (cov_2pgvlnd7u9().s[138]++, /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/);
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[139]++;
    return ipRegex.test(ip);
  }
  /**
   * Get connection status for all tunnels
   */
  async getConnectionStatus() {
    /* istanbul ignore next */
    cov_2pgvlnd7u9().f[27]++;
    const connections =
    /* istanbul ignore next */
    (cov_2pgvlnd7u9().s[140]++, Array.from(this.connections.values()));
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[141]++;
    return {
      totalConnections: connections.length,
      activeConnections: connections.filter(c => {
        /* istanbul ignore next */
        cov_2pgvlnd7u9().f[28]++;
        cov_2pgvlnd7u9().s[142]++;
        return c.state === TunnelState.CONNECTED;
      }).length,
      connections: connections.map(c => {
        /* istanbul ignore next */
        cov_2pgvlnd7u9().f[29]++;
        cov_2pgvlnd7u9().s[143]++;
        return {
          id: c.id,
          name: c.config.name,
          state: c.state,
          connectedAt: c.connectedAt,
          lastActivity: c.lastActivity
        };
      })
    };
  }
  /**
   * Cleanup all connections on shutdown
   */
  async cleanup() {
    /* istanbul ignore next */
    cov_2pgvlnd7u9().f[30]++;
    cov_2pgvlnd7u9().s[144]++;
    this.logger.info('Cleaning up SSH tunnel connections');
    const disconnectPromises =
    /* istanbul ignore next */
    (cov_2pgvlnd7u9().s[145]++, Array.from(this.connections.keys()).map(connectionId => {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().f[31]++;
      cov_2pgvlnd7u9().s[146]++;
      return this.disconnectTunnel(connectionId).catch(error => {
        /* istanbul ignore next */
        cov_2pgvlnd7u9().f[32]++;
        cov_2pgvlnd7u9().s[147]++;
        return this.logger.error(`Error disconnecting tunnel ${connectionId}`, error);
      });
    }));
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[148]++;
    await Promise.all(disconnectPromises);
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[149]++;
    this.connections.clear();
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[150]++;
    this.logger.info('SSH tunnel cleanup completed');
  }
}
/* istanbul ignore next */
cov_2pgvlnd7u9().s[151]++;
exports.SSHTunnelManager = SSHTunnelManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,