{"version":3,"names":["cov_2pgvlnd7u9","actualCoverage","s","events_1","require","child_process_1","fs_1","logger_1","TunnelState","f","b","exports","SSHTunnelManager","EventEmitter","logger","connections","constructor","Logger","Map","info","establishTunnel","config","validateTunnelConfig","connectionId","generateConnectionId","connection","id","process","state","DISCONNECTED","connectedAt","lastActivity","Date","stats","bytesTransferred","uptime","reconnectAttempts","lastError","qualityScore","set","updateConnectionState","CONNECTING","privateKeyPath","validatePrivateKey","sshArgs","buildSSHArguments","remoteHost","localPort","remotePort","sshProcess","spawn","stdio","detached","setupProcessHandlers","waitForConnection","CONNECTED","emit","error","FAILED","Error","message","String","disconnectTunnel","get","warn","kill","Promise","resolve","timeout","setTimeout","killed","on","clearTimeout","getConnection","getAllConnections","Array","from","values","getActiveConnections","filter","conn","requiredFields","field","isValidIP","sshHost","debug","promises","stat","isFile","access","constants","R_OK","args","sshPort","toString","push","compression","keepAlive","sshUsername","stdout","data","trim","stderr","includes","code","signal","timeoutMs","reject","onReady","removeListener","onError","once","newState","oldState","now","Math","random","substr","ip","ipRegex","test","getConnectionStatus","totalConnections","length","activeConnections","c","map","name","cleanup","disconnectPromises","keys","catch","all","clear"],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\ssh-tunnel-manager.ts"],"sourcesContent":["import { EventEmitter } from 'events';\r\nimport { spawn, ChildProcess } from 'child_process';\r\nimport { promises as fs, constants as fsConstants } from 'fs';\r\nimport { join } from 'path';\r\nimport { Logger } from '../core/logging/logger';\r\nimport { EncryptionService } from '../security/encryption-service';\r\n\r\n/**\r\n * SSH Tunnel Configuration interface\r\n * Defines all parameters needed to establish a secure SSH tunnel to Oracle Free Tier\r\n */\r\nexport interface TunnelConfig {\r\n  /** Tunnel name identifier */\r\n  name: string;\r\n  /** Remote host to tunnel to */\r\n  remoteHost: string;\r\n  /** Remote port to tunnel to */\r\n  remotePort: number;\r\n  /** Local port for tunnel */\r\n  localPort: number;\r\n  /** SSH host (Oracle Free Tier IP) */\r\n  sshHost: string;\r\n  /** SSH port (default: 22) */\r\n  sshPort: number;\r\n  /** SSH username for Oracle instance */\r\n  sshUsername: string;\r\n  /** Path to private key file */\r\n  privateKeyPath?: string;\r\n  /** Private key content */\r\n  privateKey?: string;\r\n  /** Maximum retry attempts */\r\n  maxRetries: number;\r\n  /** Retry delay in milliseconds */\r\n  retryDelay: number;\r\n  /** Health check interval in milliseconds */\r\n  healthCheckInterval: number;\r\n  /** Enable SSH compression */\r\n  compression: boolean;\r\n  /** Enable SSH keep-alive */\r\n  keepAlive: boolean;\r\n}\r\n\r\n/**\r\n * SSH Tunnel Connection interface\r\n * Represents an active SSH tunnel connection with state management\r\n */\r\nexport interface TunnelConnection {\r\n  /** Unique connection identifier */\r\n  id: string;\r\n  /** Connection configuration */\r\n  config: TunnelConfig;\r\n  /** SSH process handle */\r\n  process: ChildProcess | null;\r\n  /** Connection state */\r\n  state: TunnelState;\r\n  /** Connection establishment timestamp */\r\n  connectedAt: Date | null;\r\n  /** Last activity timestamp */\r\n  lastActivity: Date;\r\n  /** Connection statistics */\r\n  stats: TunnelStats;\r\n}\r\n\r\n/**\r\n * Tunnel connection states\r\n */\r\nexport enum TunnelState {\r\n  DISCONNECTED = 'DISCONNECTED',\r\n  CONNECTING = 'CONNECTING',\r\n  CONNECTED = 'CONNECTED',\r\n  RECONNECTING = 'RECONNECTING',\r\n  FAILED = 'FAILED',\r\n  TERMINATED = 'TERMINATED'\r\n}\r\n\r\n/**\r\n * Tunnel connection statistics\r\n */\r\nexport interface TunnelStats {\r\n  /** Total bytes transferred */\r\n  bytesTransferred: number;\r\n  /** Connection uptime in milliseconds */\r\n  uptime: number;\r\n  /** Number of reconnection attempts */\r\n  reconnectAttempts: number;\r\n  /** Last error message */\r\n  lastError: string | null;\r\n  /** Connection quality score (0-100) */\r\n  qualityScore: number;\r\n}\r\n\r\n/**\r\n * SSH Tunnel Manager\r\n * Manages SSH tunnel connections to Oracle Free Tier with authentication,\r\n * state management, and connection validation\r\n */\r\nexport class SSHTunnelManager extends EventEmitter {\r\n  private logger: Logger;\r\n  private connections: Map<string, TunnelConnection>;\r\n\r\n  constructor() {\r\n    super();\r\n    this.logger = new Logger('SSHTunnelManager');\r\n    this.connections = new Map();\r\n    \r\n    this.logger.info('SSH Tunnel Manager initialized');\r\n  }\r\n\r\n  /**\r\n   * Establish SSH tunnel connection\r\n   * @param config - Tunnel configuration parameters\r\n   * @returns Promise resolving to tunnel connection\r\n   */\r\n  async establishTunnel(config: TunnelConfig): Promise<TunnelConnection> {\r\n    // Validate configuration\r\n    await this.validateTunnelConfig(config);\r\n    \r\n    // Generate unique connection ID\r\n    const connectionId = this.generateConnectionId();\r\n    \r\n    // Create connection object\r\n    const connection: TunnelConnection = {\r\n      id: connectionId,\r\n      config: config,\r\n      process: null,\r\n      state: TunnelState.DISCONNECTED,\r\n      connectedAt: null,\r\n      lastActivity: new Date(),\r\n      stats: {\r\n        bytesTransferred: 0,\r\n        uptime: 0,\r\n        reconnectAttempts: 0,\r\n        lastError: null,\r\n        qualityScore: 0\r\n      }\r\n    };\r\n\r\n    // Store connection\r\n    this.connections.set(connectionId, connection);\r\n    \r\n    try {\r\n      // Update state to connecting\r\n      this.updateConnectionState(connection, TunnelState.CONNECTING);\r\n      \r\n      // Validate private key exists and is accessible\r\n      if (config.privateKeyPath) {\r\n        await this.validatePrivateKey(config.privateKeyPath);\r\n      }\r\n      \r\n      // Build SSH command arguments\r\n      const sshArgs = this.buildSSHArguments(config);\r\n      \r\n      this.logger.info(`Establishing SSH tunnel: ${connectionId}`, {\r\n        remoteHost: config.remoteHost,\r\n        localPort: config.localPort,\r\n        remotePort: config.remotePort\r\n      });\r\n\r\n      // Spawn SSH process\r\n      const sshProcess = spawn('ssh', sshArgs, {\r\n        stdio: ['pipe', 'pipe', 'pipe'],\r\n        detached: false\r\n      });\r\n\r\n      connection.process = sshProcess;\r\n\r\n      // Set up process event handlers\r\n      this.setupProcessHandlers(connection);\r\n\r\n      // Wait for connection establishment\r\n      await this.waitForConnection(connection);\r\n      \r\n      // Update connection state\r\n      this.updateConnectionState(connection, TunnelState.CONNECTED);\r\n      connection.connectedAt = new Date();\r\n      \r\n      this.logger.info(`SSH tunnel established successfully: ${connectionId}`);\r\n      this.emit('tunnelConnected', connection);\r\n\r\n      return connection;\r\n\r\n    } catch (error) {\r\n      this.logger.error(`Failed to establish SSH tunnel: ${connectionId}`, error);\r\n      this.updateConnectionState(connection, TunnelState.FAILED);\r\n      connection.stats.lastError = error instanceof Error ? error.message : String(error);\r\n      this.emit('tunnelError', connection, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Disconnect SSH tunnel\r\n   * Gracefully terminates the SSH connection\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @returns Promise resolving when disconnected\r\n   */\r\n  async disconnectTunnel(connectionId: string): Promise<void> {\r\n    const connection = this.connections.get(connectionId);\r\n    if (!connection) {\r\n      throw new Error(`Connection not found: ${connectionId}`);\r\n    }\r\n\r\n    if (connection.state === TunnelState.DISCONNECTED) {\r\n      this.logger.warn(`Tunnel already disconnected: ${connectionId}`);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      this.logger.info(`Disconnecting SSH tunnel: ${connectionId}`);\r\n      \r\n      if (connection.process) {\r\n        // Graceful termination\r\n        connection.process.kill('SIGTERM');\r\n        \r\n        // Wait for process to exit\r\n        await new Promise<void>((resolve) => {\r\n          const timeout = setTimeout(() => {\r\n            // Force kill if graceful termination fails\r\n            if (connection.process && !connection.process.killed) {\r\n              connection.process.kill('SIGKILL');\r\n            }\r\n            resolve();\r\n          }, 5000);\r\n\r\n          connection.process!.on('exit', () => {\r\n            clearTimeout(timeout);\r\n            resolve();\r\n          });\r\n        });\r\n      }\r\n\r\n      this.updateConnectionState(connection, TunnelState.DISCONNECTED);\r\n      connection.process = null;\r\n      connection.connectedAt = null;\r\n      \r\n      this.logger.info(`SSH tunnel disconnected: ${connectionId}`);\r\n      this.emit('tunnelDisconnected', connection);\r\n\r\n    } catch (error) {\r\n      this.logger.error(`Error disconnecting SSH tunnel: ${connectionId}`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get connection by ID\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @returns Tunnel connection or undefined\r\n   */\r\n  getConnection(connectionId: string): TunnelConnection | undefined {\r\n    return this.connections.get(connectionId);\r\n  }\r\n\r\n  /**\r\n   * Get all connections\r\n   * \r\n   * @returns Array of all tunnel connections\r\n   */\r\n  getAllConnections(): TunnelConnection[] {\r\n    return Array.from(this.connections.values());\r\n  }\r\n\r\n  /**\r\n   * Get active connections\r\n   * \r\n   * @returns Array of connected tunnel connections\r\n   */\r\n  getActiveConnections(): TunnelConnection[] {\r\n    return this.getAllConnections().filter(\r\n      conn => conn.state === TunnelState.CONNECTED\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Validate tunnel configuration\r\n   * Ensures all required parameters are present and valid\r\n   * \r\n   * @param config - Tunnel configuration to validate\r\n   */\r\n  private async validateTunnelConfig(config: TunnelConfig): Promise<void> {\r\n    const requiredFields: (keyof TunnelConfig)[] = [\r\n      'name', 'remoteHost', 'sshHost', 'sshUsername', 'localPort', 'remotePort'\r\n    ];\r\n\r\n    for (const field of requiredFields) {\r\n      if (!config[field]) {\r\n        throw new Error(`Missing required tunnel configuration: ${field}`);\r\n      }\r\n    }\r\n\r\n    // Validate IP address format for SSH host\r\n    if (!this.isValidIP(config.sshHost)) {\r\n      throw new Error(`Invalid SSH host IP address: ${config.sshHost}`);\r\n    }\r\n\r\n    // Validate port ranges\r\n    if (config.localPort < 1 || config.localPort > 65535) {\r\n      throw new Error(`Invalid local port: ${config.localPort}`);\r\n    }\r\n\r\n    if (config.remotePort < 1 || config.remotePort > 65535) {\r\n      throw new Error(`Invalid remote port: ${config.remotePort}`);\r\n    }\r\n\r\n    this.logger.debug('Tunnel configuration validated successfully');\r\n  }\r\n\r\n  /**\r\n   * Validate private key file exists and is accessible\r\n   * \r\n   * @param privateKeyPath - Path to private key file\r\n   */\r\n  private async validatePrivateKey(privateKeyPath: string): Promise<void> {\r\n    try {\r\n      const stats = await fs.stat(privateKeyPath);\r\n      \r\n      if (!stats.isFile()) {\r\n        throw new Error(`Private key path is not a file: ${privateKeyPath}`);\r\n      }\r\n\r\n      // Check file permissions (should be readable by owner only)\r\n      await fs.access(privateKeyPath, fsConstants.R_OK);\r\n      \r\n      this.logger.debug(`Private key validated: ${privateKeyPath}`);\r\n      \r\n    } catch (error) {\r\n      throw new Error(`Private key validation failed: ${error instanceof Error ? error.message : String(error)}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Build SSH command arguments\r\n   * \r\n   * @param config - Tunnel configuration\r\n   * @returns Array of SSH command arguments\r\n   */\r\n  private buildSSHArguments(config: TunnelConfig): string[] {\r\n    const args = [\r\n      '-N', // No remote command execution\r\n      '-T', // Disable pseudo-terminal allocation\r\n      '-o', 'StrictHostKeyChecking=no', // Accept new host keys\r\n      '-o', 'UserKnownHostsFile=/dev/null', // Don't save host keys\r\n      '-o', 'ConnectTimeout=30',\r\n      '-o', 'ServerAliveInterval=60',\r\n      '-o', 'ServerAliveCountMax=3',\r\n      '-p', config.sshPort.toString(), // SSH port\r\n      '-L', `${config.localPort}:${config.remoteHost}:${config.remotePort}`, // Local port forwarding\r\n    ];\r\n\r\n    // Add private key\r\n    if (config.privateKeyPath) {\r\n      args.push('-i', config.privateKeyPath);\r\n    }\r\n\r\n    // Add compression if enabled\r\n    if (config.compression) {\r\n      args.push('-C');\r\n    }\r\n\r\n    // Add keep-alive if enabled\r\n    if (config.keepAlive) {\r\n      args.push('-o', 'TCPKeepAlive=yes');\r\n    }\r\n\r\n    // Add connection target\r\n    args.push(`${config.sshUsername}@${config.sshHost}`);\r\n\r\n    return args;\r\n  }\r\n\r\n  /**\r\n   * Set up SSH process event handlers\r\n   * \r\n   * @param connection - Tunnel connection\r\n   */\r\n  private setupProcessHandlers(connection: TunnelConnection): void {\r\n    if (!connection.process) return;\r\n\r\n    const process = connection.process;\r\n\r\n    process.stdout?.on('data', (data) => {\r\n      this.logger.debug(`SSH stdout [${connection.id}]: ${data.toString().trim()}`);\r\n    });\r\n\r\n    process.stderr?.on('data', (data) => {\r\n      const message = data.toString().trim();\r\n      this.logger.debug(`SSH stderr [${connection.id}]: ${message}`);\r\n      \r\n      // Check for connection success indicators\r\n      if (message.includes('Local forwarding listening')) {\r\n        this.emit('tunnelReady', connection);\r\n      }\r\n    });\r\n\r\n    process.on('exit', (code, signal) => {\r\n      this.logger.info(`SSH process exited [${connection.id}]`, { code, signal });\r\n      \r\n      if (connection.state === TunnelState.CONNECTED) {\r\n        this.updateConnectionState(connection, TunnelState.DISCONNECTED);\r\n        this.emit('tunnelDisconnected', connection);\r\n      }\r\n      \r\n      connection.process = null;\r\n    });\r\n\r\n    process.on('error', (error) => {\r\n      this.logger.error(`SSH process error [${connection.id}]`, error);\r\n      this.updateConnectionState(connection, TunnelState.FAILED);\r\n      connection.stats.lastError = error.message;\r\n      this.emit('tunnelError', connection, error);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Wait for SSH tunnel connection to be established\r\n   * \r\n   * @param connection - Tunnel connection\r\n   * @param timeoutMs - Timeout in milliseconds\r\n   */\r\n  private async waitForConnection(connection: TunnelConnection, timeoutMs: number = 30000): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      const timeout = setTimeout(() => {\r\n        reject(new Error(`SSH tunnel connection timeout: ${connection.id}`));\r\n      }, timeoutMs);\r\n\r\n      const onReady = () => {\r\n        clearTimeout(timeout);\r\n        this.removeListener('tunnelError', onError);\r\n        resolve();\r\n      };\r\n\r\n      const onError = (conn: TunnelConnection, error: Error) => {\r\n        if (conn.id === connection.id) {\r\n          clearTimeout(timeout);\r\n          this.removeListener('tunnelReady', onReady);\r\n          reject(error);\r\n        }\r\n      };\r\n\r\n      this.once('tunnelReady', onReady);\r\n      this.once('tunnelError', onError);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update connection state and emit events\r\n   * \r\n   * @param connection - Tunnel connection\r\n   * @param newState - New connection state\r\n   */\r\n  private updateConnectionState(connection: TunnelConnection, newState: TunnelState): void {\r\n    const oldState = connection.state;\r\n    connection.state = newState;\r\n    connection.lastActivity = new Date();\r\n\r\n    this.logger.debug(`Tunnel state changed [${connection.id}]: ${oldState} -> ${newState}`);\r\n    this.emit('stateChanged', connection, oldState, newState);\r\n  }\r\n\r\n  /**\r\n   * Generate unique connection ID\r\n   * \r\n   * @returns Unique connection identifier\r\n   */\r\n  private generateConnectionId(): string {\r\n    return `tunnel_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  /**\r\n   * Validate IP address format\r\n   * \r\n   * @param ip - IP address to validate\r\n   * @returns True if valid IP address\r\n   */\r\n  private isValidIP(ip: string): boolean {\r\n    const ipRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;\r\n    return ipRegex.test(ip);\r\n  }\r\n\r\n  /**\r\n   * Get connection status for all tunnels\r\n   */\r\n  async getConnectionStatus(): Promise<any> {\r\n    const connections = Array.from(this.connections.values());\r\n    return {\r\n      totalConnections: connections.length,\r\n      activeConnections: connections.filter(c => c.state === TunnelState.CONNECTED).length,\r\n      connections: connections.map(c => ({\r\n        id: c.id,\r\n        name: c.config.name,\r\n        state: c.state,\r\n        connectedAt: c.connectedAt,\r\n        lastActivity: c.lastActivity\r\n      }))\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Cleanup all connections on shutdown\r\n   */\r\n  async cleanup(): Promise<void> {\r\n    this.logger.info('Cleaning up SSH tunnel connections');\r\n    \r\n    const disconnectPromises = Array.from(this.connections.keys()).map(\r\n      connectionId => this.disconnectTunnel(connectionId).catch(error => \r\n        this.logger.error(`Error disconnecting tunnel ${connectionId}`, error)\r\n      )\r\n    );\r\n\r\n    await Promise.all(disconnectPromises);\r\n    this.connections.clear();\r\n    \r\n    this.logger.info('SSH tunnel cleanup completed');\r\n  }\r\n}\r\n"],"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","ignoreList":[]}