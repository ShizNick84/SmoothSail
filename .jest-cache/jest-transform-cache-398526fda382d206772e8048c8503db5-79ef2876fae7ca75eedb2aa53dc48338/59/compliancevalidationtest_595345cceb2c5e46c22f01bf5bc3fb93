4636aa7ab82f52d2cc3641ffef7070be
"use strict";
/**
 * Security Compliance Validation Tests
 *
 * Comprehensive compliance testing for financial regulations,
 * data protection laws, and security standards.
 *
 * Requirements: 25.7 - Security compliance testing and validation
 */
Object.defineProperty(exports, "__esModule", { value: true });
const encryption_service_1 = require("@/security/encryption-service");
describe('Security Compliance Validation', () => {
    beforeAll(() => {
        // Set up test environment
        process.env.NODE_ENV = 'test';
        process.env.MASTER_ENCRYPTION_KEY = 'a'.repeat(64); // 64 hex chars = 32 bytes
    });
    describe('Basic Compliance Tests', () => {
        it('should have encryption service available', () => {
            expect(encryption_service_1.encryptionService).toBeDefined();
            const status = encryption_service_1.encryptionService.getStatus();
            expect(status.isInitialized).toBe(true);
        });
        it('should use secure encryption algorithms', () => {
            const status = encryption_service_1.encryptionService.getStatus();
            expect(status.algorithm).toBe('aes-256-gcm');
        });
        it('should have proper key derivation parameters', () => {
            const status = encryption_service_1.encryptionService.getStatus();
            expect(status.keyDerivationParams.iterations).toBeGreaterThanOrEqual(100000);
            expect(status.keyDerivationParams.keyLength).toBe(32);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxOaWNrXFxEZXNrdG9wXFxTbW9vdGhTYWlsXFxzcmNcXHRlc3RzXFxzZWN1cml0eVxcY29tcGxpYW5jZS12YWxpZGF0aW9uLnRlc3QudHMiLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7O0dBT0c7O0FBRUgsc0VBQWtFO0FBRWxFLFFBQVEsQ0FBQyxnQ0FBZ0MsRUFBRSxHQUFHLEVBQUU7SUFDOUMsU0FBUyxDQUFDLEdBQUcsRUFBRTtRQUNiLDBCQUEwQjtRQUMxQixPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUM7UUFDOUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsMEJBQTBCO0lBQ2hGLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLHdCQUF3QixFQUFFLEdBQUcsRUFBRTtRQUN0QyxFQUFFLENBQUMsMENBQTBDLEVBQUUsR0FBRyxFQUFFO1lBQ2xELE1BQU0sQ0FBQyxzQ0FBaUIsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ3hDLE1BQU0sTUFBTSxHQUFHLHNDQUFpQixDQUFDLFNBQVMsRUFBRSxDQUFDO1lBQzdDLE1BQU0sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzFDLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLHlDQUF5QyxFQUFFLEdBQUcsRUFBRTtZQUNqRCxNQUFNLE1BQU0sR0FBRyxzQ0FBaUIsQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUM3QyxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUMvQyxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyw4Q0FBOEMsRUFBRSxHQUFHLEVBQUU7WUFDdEQsTUFBTSxNQUFNLEdBQUcsc0NBQWlCLENBQUMsU0FBUyxFQUFFLENBQUM7WUFDN0MsTUFBTSxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxVQUFVLENBQUMsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUM3RSxNQUFNLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN4RCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxOaWNrXFxEZXNrdG9wXFxTbW9vdGhTYWlsXFxzcmNcXHRlc3RzXFxzZWN1cml0eVxcY29tcGxpYW5jZS12YWxpZGF0aW9uLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIFNlY3VyaXR5IENvbXBsaWFuY2UgVmFsaWRhdGlvbiBUZXN0c1xyXG4gKiBcclxuICogQ29tcHJlaGVuc2l2ZSBjb21wbGlhbmNlIHRlc3RpbmcgZm9yIGZpbmFuY2lhbCByZWd1bGF0aW9ucyxcclxuICogZGF0YSBwcm90ZWN0aW9uIGxhd3MsIGFuZCBzZWN1cml0eSBzdGFuZGFyZHMuXHJcbiAqIFxyXG4gKiBSZXF1aXJlbWVudHM6IDI1LjcgLSBTZWN1cml0eSBjb21wbGlhbmNlIHRlc3RpbmcgYW5kIHZhbGlkYXRpb25cclxuICovXHJcblxyXG5pbXBvcnQgeyBlbmNyeXB0aW9uU2VydmljZSB9IGZyb20gJ0Avc2VjdXJpdHkvZW5jcnlwdGlvbi1zZXJ2aWNlJztcclxuXHJcbmRlc2NyaWJlKCdTZWN1cml0eSBDb21wbGlhbmNlIFZhbGlkYXRpb24nLCAoKSA9PiB7XHJcbiAgYmVmb3JlQWxsKCgpID0+IHtcclxuICAgIC8vIFNldCB1cCB0ZXN0IGVudmlyb25tZW50XHJcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViA9ICd0ZXN0JztcclxuICAgIHByb2Nlc3MuZW52Lk1BU1RFUl9FTkNSWVBUSU9OX0tFWSA9ICdhJy5yZXBlYXQoNjQpOyAvLyA2NCBoZXggY2hhcnMgPSAzMiBieXRlc1xyXG4gIH0pO1xyXG5cclxuICBkZXNjcmliZSgnQmFzaWMgQ29tcGxpYW5jZSBUZXN0cycsICgpID0+IHtcclxuICAgIGl0KCdzaG91bGQgaGF2ZSBlbmNyeXB0aW9uIHNlcnZpY2UgYXZhaWxhYmxlJywgKCkgPT4ge1xyXG4gICAgICBleHBlY3QoZW5jcnlwdGlvblNlcnZpY2UpLnRvQmVEZWZpbmVkKCk7XHJcbiAgICAgIGNvbnN0IHN0YXR1cyA9IGVuY3J5cHRpb25TZXJ2aWNlLmdldFN0YXR1cygpO1xyXG4gICAgICBleHBlY3Qoc3RhdHVzLmlzSW5pdGlhbGl6ZWQpLnRvQmUodHJ1ZSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnc2hvdWxkIHVzZSBzZWN1cmUgZW5jcnlwdGlvbiBhbGdvcml0aG1zJywgKCkgPT4ge1xyXG4gICAgICBjb25zdCBzdGF0dXMgPSBlbmNyeXB0aW9uU2VydmljZS5nZXRTdGF0dXMoKTtcclxuICAgICAgZXhwZWN0KHN0YXR1cy5hbGdvcml0aG0pLnRvQmUoJ2Flcy0yNTYtZ2NtJyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnc2hvdWxkIGhhdmUgcHJvcGVyIGtleSBkZXJpdmF0aW9uIHBhcmFtZXRlcnMnLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHN0YXR1cyA9IGVuY3J5cHRpb25TZXJ2aWNlLmdldFN0YXR1cygpO1xyXG4gICAgICBleHBlY3Qoc3RhdHVzLmtleURlcml2YXRpb25QYXJhbXMuaXRlcmF0aW9ucykudG9CZUdyZWF0ZXJUaGFuT3JFcXVhbCgxMDAwMDApO1xyXG4gICAgICBleHBlY3Qoc3RhdHVzLmtleURlcml2YXRpb25QYXJhbXMua2V5TGVuZ3RoKS50b0JlKDMyKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG59KTsiXSwidmVyc2lvbiI6M30=