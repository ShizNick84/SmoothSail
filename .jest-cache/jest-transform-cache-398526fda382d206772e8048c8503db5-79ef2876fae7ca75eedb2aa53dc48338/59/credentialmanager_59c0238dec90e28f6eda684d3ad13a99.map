{"version":3,"names":["cov_gl0onn3sl","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","encryption_service_1","require","key_manager_1","logger_1","CredentialType","exports","CredentialManager","credentialCache","Map","CACHE_TTL","constructor","initializeCredentialKey","startCacheCleanup","existingKeys","keyManager","listKeys","KeyType","API_ENCRYPTION","length","generateKey","logger","info","error","Error","storeCredential","service","data","credentialId","generateCredentialId","credentialKeys","activeKey","find","k","status","encryptedData","encryptionService","encryptCredentials","credentialEntry","createdAt","Date","isActive","usageCount","persistCredential","security","classification","audit","auditId","eventType","actor","resource","action","result","timestamp","auditData","getCredential","cached","get","expiresAt","now","loadCredential","decryptedData","decryptCredentials","lastAccessed","updateCredential","set","getGateIOCredentials","apiKey","process","env","GATE_IO_API_KEY","apiSecret","GATE_IO_API_SECRET","passphrase","GATE_IO_API_PASSPHRASE","rotateCredential","currentCredential","delete","oldCredentialId","toString","random","Math","substring","debug","setInterval","key","value","entries","getStatus","cacheSize","size","credentialManager"],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\credential-manager.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * AI CRYPTO TRADING AGENT - SECURE CREDENTIAL MANAGEMENT SERVICE\r\n * =============================================================================\r\n * \r\n * This service manages all sensitive credentials for the AI crypto trading\r\n * agent, including API keys, secrets, and authentication tokens. It provides\r\n * secure storage, retrieval, and rotation of credentials with audit logging.\r\n * \r\n * CRITICAL SECURITY NOTICE:\r\n * This service protects credentials that control access to trading capital.\r\n * Any compromise could result in total loss of funds. All operations are\r\n * logged and monitored for security analysis.\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport { encryptionService, EncryptedData } from '@/security/encryption-service';\r\nimport { keyManager, KeyType } from '@/security/key-manager';\r\nimport { logger } from '@/core/logging/logger';\r\n\r\n/**\r\n * Interface for credential entry\r\n * Defines structure for stored credentials\r\n */\r\nexport interface CredentialEntry {\r\n  /** Unique credential identifier */\r\n  credentialId: string;\r\n  /** Service or system the credential is for */\r\n  service: string;\r\n  /** Type of credential */\r\n  type: CredentialType;\r\n  /** Encrypted credential data */\r\n  encryptedData: EncryptedData;\r\n  /** Creation timestamp */\r\n  createdAt: Date;\r\n  /** Last access timestamp */\r\n  lastAccessed?: Date;\r\n  /** Expiration timestamp */\r\n  expiresAt?: Date;\r\n  /** Whether credential is active */\r\n  isActive: boolean;\r\n  /** Usage counter */\r\n  usageCount: number;\r\n}\r\n\r\n/**\r\n * Enumeration of credential types\r\n */\r\nexport enum CredentialType {\r\n  API_KEY = 'api_key',\r\n  API_SECRET = 'api_secret',\r\n  API_PASSPHRASE = 'api_passphrase',\r\n  JWT_SECRET = 'jwt_secret',\r\n  SESSION_SECRET = 'session_secret',\r\n  DATABASE_PASSWORD = 'database_password',\r\n  ENCRYPTION_KEY = 'encryption_key',\r\n  WEBHOOK_SECRET = 'webhook_secret'\r\n}\r\n\r\n/**\r\n * Interface for Gate.io API credentials\r\n */\r\nexport interface GateIOCredentials {\r\n  apiKey: string;\r\n  apiSecret: string;\r\n  passphrase: string;\r\n}\r\n\r\n/**\r\n * Secure credential management service\r\n * Handles all sensitive credential operations with encryption and auditing\r\n */\r\nexport class CredentialManager {\r\n  /** In-memory credential cache */\r\n  private credentialCache: Map<string, { data: any; expiresAt: number }> = new Map();\r\n  \r\n  /** Cache TTL in milliseconds (5 minutes) */\r\n  private static readonly CACHE_TTL = 5 * 60 * 1000;\r\n\r\n  constructor() {\r\n    // Initialize credential encryption key\r\n    this.initializeCredentialKey();\r\n    \r\n    // Start cache cleanup\r\n    this.startCacheCleanup();\r\n  }\r\n\r\n  /**\r\n   * Initialize or retrieve credential encryption key\r\n   */\r\n  private async initializeCredentialKey(): Promise<void> {\r\n    try {\r\n      // Try to get existing credential key\r\n      const existingKeys = await keyManager.listKeys(KeyType.API_ENCRYPTION);\r\n      \r\n      if (existingKeys.length === 0) {\r\n        // Generate new credential encryption key\r\n        await keyManager.generateKey(\r\n          KeyType.API_ENCRYPTION,\r\n          'API credential encryption',\r\n          256\r\n        );\r\n        logger.info('üîê New credential encryption key generated');\r\n      }\r\n      \r\n    } catch (error) {\r\n      logger.error('‚ùå Failed to initialize credential key:', error);\r\n      throw new Error('Credential manager initialization failed');\r\n    }\r\n  }  /**\r\n\r\n   * Store credentials securely\r\n   * Encrypts and stores credentials with metadata\r\n   * \r\n   * @param service - Service name (e.g., 'gate.io')\r\n   * @param type - Type of credential\r\n   * @param data - Credential data to store\r\n   * @returns Promise<string> Credential ID\r\n   */\r\n  public async storeCredential(\r\n    service: string,\r\n    type: CredentialType,\r\n    data: any\r\n  ): Promise<string> {\r\n    try {\r\n      // Generate unique credential ID\r\n      const credentialId = this.generateCredentialId(service, type);\r\n      \r\n      // Get credential encryption key\r\n      const credentialKeys = await keyManager.listKeys(KeyType.API_ENCRYPTION);\r\n      const activeKey = credentialKeys.find(k => k.status === 'active');\r\n      \r\n      if (!activeKey) {\r\n        throw new Error('No active credential encryption key found');\r\n      }\r\n      \r\n      // Encrypt credential data\r\n      const encryptedData = await encryptionService.encryptCredentials(data);\r\n      \r\n      // Create credential entry\r\n      const credentialEntry: CredentialEntry = {\r\n        credentialId,\r\n        service,\r\n        type,\r\n        encryptedData,\r\n        createdAt: new Date(),\r\n        isActive: true,\r\n        usageCount: 0\r\n      };\r\n      \r\n      // Store credential (implementation would use secure database)\r\n      await this.persistCredential(credentialEntry);\r\n      \r\n      // Log credential storage (without sensitive data)\r\n      logger.security('CREDENTIAL_STORED', 'Credential stored securely', {\r\n        credentialId,\r\n        service,\r\n        type,\r\n        classification: 'RESTRICTED'\r\n      });\r\n      \r\n      // Audit log\r\n      logger.audit({\r\n        auditId: `cred_store_${credentialId}`,\r\n        eventType: 'CREDENTIAL_STORAGE',\r\n        actor: 'SYSTEM',\r\n        resource: `CREDENTIAL:${credentialId}`,\r\n        action: 'STORE',\r\n        result: 'SUCCESS',\r\n        timestamp: new Date(),\r\n        auditData: { service, type }\r\n      });\r\n      \r\n      return credentialId;\r\n      \r\n    } catch (error) {\r\n      logger.error('‚ùå Failed to store credential:', error);\r\n      throw new Error('Credential storage failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieve credentials securely\r\n   * Decrypts and returns credential data\r\n   * \r\n   * @param credentialId - Credential identifier\r\n   * @returns Promise<any> Decrypted credential data\r\n   */\r\n  public async getCredential(credentialId: string): Promise<any> {\r\n    try {\r\n      // Check cache first\r\n      const cached = this.credentialCache.get(credentialId);\r\n      if (cached && cached.expiresAt > Date.now()) {\r\n        return cached.data;\r\n      }\r\n      \r\n      // Load credential from storage\r\n      const credentialEntry = await this.loadCredential(credentialId);\r\n      if (!credentialEntry || !credentialEntry.isActive) {\r\n        throw new Error('Credential not found or inactive');\r\n      }\r\n      \r\n      // Check expiration\r\n      if (credentialEntry.expiresAt && credentialEntry.expiresAt < new Date()) {\r\n        throw new Error('Credential has expired');\r\n      }\r\n      \r\n      // Decrypt credential data\r\n      const decryptedData = await encryptionService.decryptCredentials(\r\n        credentialEntry.encryptedData\r\n      );\r\n      \r\n      // Update usage statistics\r\n      credentialEntry.usageCount++;\r\n      credentialEntry.lastAccessed = new Date();\r\n      await this.updateCredential(credentialEntry);\r\n      \r\n      // Cache for performance\r\n      this.credentialCache.set(credentialId, {\r\n        data: decryptedData,\r\n        expiresAt: Date.now() + CredentialManager.CACHE_TTL\r\n      });\r\n      \r\n      return decryptedData;\r\n      \r\n    } catch (error) {\r\n      logger.error('‚ùå Failed to retrieve credential:', error);\r\n      throw new Error('Credential retrieval failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get Gate.io API credentials\r\n   * Convenience method for retrieving trading API credentials\r\n   * \r\n   * @returns Promise<GateIOCredentials> Gate.io API credentials\r\n   */\r\n  public async getGateIOCredentials(): Promise<GateIOCredentials> {\r\n    try {\r\n      // Get credentials from environment or storage\r\n      const apiKey = process.env.GATE_IO_API_KEY;\r\n      const apiSecret = process.env.GATE_IO_API_SECRET;\r\n      const passphrase = process.env.GATE_IO_API_PASSPHRASE;\r\n      \r\n      if (!apiKey || !apiSecret || !passphrase) {\r\n        throw new Error('Gate.io API credentials not configured');\r\n      }\r\n      \r\n      // Log credential access (without sensitive data)\r\n      logger.security('CREDENTIAL_ACCESSED', 'Gate.io credentials accessed', {\r\n        service: 'gate.io',\r\n        classification: 'RESTRICTED'\r\n      });\r\n      \r\n      return {\r\n        apiKey,\r\n        apiSecret,\r\n        passphrase\r\n      };\r\n      \r\n    } catch (error) {\r\n      logger.error('‚ùå Failed to get Gate.io credentials:', error);\r\n      throw new Error('Gate.io credential retrieval failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Rotate credentials\r\n   * Generates new credentials and marks old ones as deprecated\r\n   * \r\n   * @param credentialId - Credential to rotate\r\n   * @returns Promise<string> New credential ID\r\n   */\r\n  public async rotateCredential(credentialId: string): Promise<string> {\r\n    try {\r\n      // Load current credential\r\n      const currentCredential = await this.loadCredential(credentialId);\r\n      if (!currentCredential) {\r\n        throw new Error('Credential not found');\r\n      }\r\n      \r\n      // Mark current credential as deprecated\r\n      currentCredential.isActive = false;\r\n      await this.updateCredential(currentCredential);\r\n      \r\n      // Remove from cache\r\n      this.credentialCache.delete(credentialId);\r\n      \r\n      // Log credential rotation\r\n      logger.security('CREDENTIAL_ROTATED', 'Credential rotated', {\r\n        oldCredentialId: credentialId,\r\n        service: currentCredential.service,\r\n        type: currentCredential.type,\r\n        classification: 'RESTRICTED'\r\n      });\r\n      \r\n      // Note: New credential would need to be provided by external system\r\n      // This method marks the old one as inactive\r\n      \r\n      return credentialId; // Would return new credential ID in full implementation\r\n      \r\n    } catch (error) {\r\n      logger.error('‚ùå Failed to rotate credential:', error);\r\n      throw new Error('Credential rotation failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate unique credential ID\r\n   * Creates identifier for credential storage\r\n   * \r\n   * @param service - Service name\r\n   * @param type - Credential type\r\n   * @returns string Unique credential ID\r\n   */\r\n  private generateCredentialId(service: string, type: CredentialType): string {\r\n    const timestamp = Date.now().toString(36);\r\n    const random = Math.random().toString(36).substring(2);\r\n    return `${service}_${type}_${timestamp}_${random}`;\r\n  }\r\n\r\n  /**\r\n   * Persist credential to secure storage\r\n   * Stores credential entry securely\r\n   * \r\n   * @param credentialEntry - Credential entry to store\r\n   */\r\n  private async persistCredential(credentialEntry: CredentialEntry): Promise<void> {\r\n    // Implementation would store in secure database\r\n    // For now, this is a placeholder\r\n    logger.debug('Credential persisted to secure storage', {\r\n      credentialId: credentialEntry.credentialId\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Load credential from secure storage\r\n   * Retrieves credential entry from storage\r\n   * \r\n   * @param credentialId - Credential identifier\r\n   * @returns Promise<CredentialEntry | null> Credential entry or null\r\n   */\r\n  private async loadCredential(credentialId: string): Promise<CredentialEntry | null> {\r\n    // Implementation would load from secure database\r\n    // For now, this is a placeholder\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Update credential in storage\r\n   * Updates credential entry in secure storage\r\n   * \r\n   * @param credentialEntry - Updated credential entry\r\n   */\r\n  private async updateCredential(credentialEntry: CredentialEntry): Promise<void> {\r\n    // Implementation would update in secure database\r\n    // For now, this is a placeholder\r\n    logger.debug('Credential updated in secure storage', {\r\n      credentialId: credentialEntry.credentialId\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Start cache cleanup process\r\n   * Removes expired entries from credential cache\r\n   */\r\n  private startCacheCleanup(): void {\r\n    setInterval(() => {\r\n      const now = Date.now();\r\n      for (const [key, value] of this.credentialCache.entries()) {\r\n        if (value.expiresAt <= now) {\r\n          this.credentialCache.delete(key);\r\n        }\r\n      }\r\n    }, 60000); // Clean up every minute\r\n  }\r\n\r\n  /**\r\n   * Get credential manager status\r\n   * Returns current status for monitoring\r\n   * \r\n   * @returns Object containing status information\r\n   */\r\n  public getStatus(): {\r\n    cacheSize: number;\r\n    timestamp: number;\r\n  } {\r\n    return {\r\n      cacheSize: this.credentialCache.size,\r\n      timestamp: Date.now()\r\n    };\r\n  }\r\n}\r\n\r\n// Create and export singleton instance\r\nexport const credentialManager = new CredentialManager();\r\n\r\n// =============================================================================\r\n// CREDENTIAL SECURITY NOTES\r\n// =============================================================================\r\n// 1. All credentials are encrypted before storage\r\n// 2. Credentials are cached temporarily for performance\r\n// 3. All credential access is logged and audited\r\n// 4. Expired credentials are automatically rejected\r\n// 5. Credential rotation invalidates old credentials\r\n// 6. Cache is automatically cleaned of expired entries\r\n// 7. Never log actual credential values\r\n// 8. Use environment variables for initial credential loading\r\n// ============================================================================="],"mappings":"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","ignoreList":[]}