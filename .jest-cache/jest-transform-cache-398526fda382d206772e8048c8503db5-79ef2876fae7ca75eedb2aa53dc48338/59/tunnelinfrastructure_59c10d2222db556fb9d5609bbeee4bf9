e5bde05c91b2e431653c1321146fe4fd
"use strict";

/* istanbul ignore next */
function cov_1lxt9ntsas() {
  var path = "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\tunnel-infrastructure.ts";
  var hash = "911fce3fc2a10b9a06b10bb863052af1c2147b47";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\tunnel-infrastructure.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 38
        }
      },
      "2": {
        start: {
          line: 4,
          column: 0
        },
        end: {
          line: 4,
          column: 76
        }
      },
      "3": {
        start: {
          line: 5,
          column: 17
        },
        end: {
          line: 5,
          column: 34
        }
      },
      "4": {
        start: {
          line: 6,
          column: 29
        },
        end: {
          line: 6,
          column: 60
        }
      },
      "5": {
        start: {
          line: 7,
          column: 32
        },
        end: {
          line: 7,
          column: 66
        }
      },
      "6": {
        start: {
          line: 8,
          column: 31
        },
        end: {
          line: 8,
          column: 64
        }
      },
      "7": {
        start: {
          line: 9,
          column: 32
        },
        end: {
          line: 9,
          column: 66
        }
      },
      "8": {
        start: {
          line: 10,
          column: 31
        },
        end: {
          line: 10,
          column: 64
        }
      },
      "9": {
        start: {
          line: 11,
          column: 34
        },
        end: {
          line: 11,
          column: 70
        }
      },
      "10": {
        start: {
          line: 12,
          column: 34
        },
        end: {
          line: 12,
          column: 70
        }
      },
      "11": {
        start: {
          line: 13,
          column: 39
        },
        end: {
          line: 13,
          column: 80
        }
      },
      "12": {
        start: {
          line: 31,
          column: 20
        },
        end: {
          line: 31,
          column: 25
        }
      },
      "13": {
        start: {
          line: 32,
          column: 16
        },
        end: {
          line: 32,
          column: 21
        }
      },
      "14": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 16
        }
      },
      "15": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 35,
          column: 29
        }
      },
      "16": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 36,
          column: 51
        }
      },
      "17": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 40,
          column: 10
        }
      },
      "18": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 41,
          column: 36
        }
      },
      "19": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 42,
          column: 66
        }
      },
      "20": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 108
        }
      },
      "21": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 51,
          column: 87
        }
      },
      "22": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 53,
          column: 156
        }
      },
      "23": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 55,
          column: 176
        }
      },
      "24": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 57,
          column: 172
        }
      },
      "25": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 59,
          column: 197
        }
      },
      "26": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 61,
          column: 162
        }
      },
      "27": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 63,
          column: 193
        }
      },
      "28": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 64,
          column: 36
        }
      },
      "29": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 65,
          column: 34
        }
      },
      "30": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 66,
          column: 77
        }
      },
      "31": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 74,
          column: 9
        }
      },
      "32": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 73,
          column: 69
        }
      },
      "33": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 78,
          column: 9
        }
      },
      "34": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 76,
          column: 73
        }
      },
      "35": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 77,
          column: 19
        }
      },
      "36": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 99,
          column: 9
        }
      },
      "37": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 80,
          column: 66
        }
      },
      "38": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 82,
          column: 49
        }
      },
      "39": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 86,
          column: 13
        }
      },
      "40": {
        start: {
          line: 85,
          column: 16
        },
        end: {
          line: 85,
          column: 45
        }
      },
      "41": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 88,
          column: 39
        }
      },
      "42": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 89,
          column: 48
        }
      },
      "43": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 40
        }
      },
      "44": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 92,
          column: 34
        }
      },
      "45": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 75
        }
      },
      "46": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 94,
          column: 47
        }
      },
      "47": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 97,
          column: 78
        }
      },
      "48": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 98,
          column: 24
        }
      },
      "49": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 108,
          column: 9
        }
      },
      "50": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 106,
          column: 69
        }
      },
      "51": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 107,
          column: 19
        }
      },
      "52": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 129,
          column: 9
        }
      },
      "53": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 110,
          column: 66
        }
      },
      "54": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 112,
          column: 41
        }
      },
      "55": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 114,
          column: 40
        }
      },
      "56": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 115,
          column: 49
        }
      },
      "57": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 119,
          column: 13
        }
      },
      "58": {
        start: {
          line: 118,
          column: 16
        },
        end: {
          line: 118,
          column: 44
        }
      },
      "59": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 121,
          column: 47
        }
      },
      "60": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 122,
          column: 35
        }
      },
      "61": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 123,
          column: 75
        }
      },
      "62": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 124,
          column: 47
        }
      },
      "63": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 127,
          column: 77
        }
      },
      "64": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 128,
          column: 24
        }
      },
      "65": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 135,
          column: 34
        }
      },
      "66": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 141,
          column: 34
        }
      },
      "67": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 147,
          column: 33
        }
      },
      "68": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 153,
          column: 34
        }
      },
      "69": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 159,
          column: 33
        }
      },
      "70": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 165,
          column: 36
        }
      },
      "71": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 171,
          column: 36
        }
      },
      "72": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 177,
          column: 41
        }
      },
      "73": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 190,
          column: 10
        }
      },
      "74": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 196,
          column: 92
        }
      },
      "75": {
        start: {
          line: 197,
          column: 35
        },
        end: {
          line: 212,
          column: 10
        }
      },
      "76": {
        start: {
          line: 198,
          column: 12
        },
        end: {
          line: 211,
          column: 13
        }
      },
      "77": {
        start: {
          line: 200,
          column: 35
        },
        end: {
          line: 200,
          column: 86
        }
      },
      "78": {
        start: {
          line: 202,
          column: 16
        },
        end: {
          line: 202,
          column: 72
        }
      },
      "79": {
        start: {
          line: 204,
          column: 16
        },
        end: {
          line: 204,
          column: 69
        }
      },
      "80": {
        start: {
          line: 205,
          column: 16
        },
        end: {
          line: 205,
          column: 97
        }
      },
      "81": {
        start: {
          line: 206,
          column: 16
        },
        end: {
          line: 206,
          column: 34
        }
      },
      "82": {
        start: {
          line: 209,
          column: 16
        },
        end: {
          line: 209,
          column: 92
        }
      },
      "83": {
        start: {
          line: 210,
          column: 16
        },
        end: {
          line: 210,
          column: 28
        }
      },
      "84": {
        start: {
          line: 213,
          column: 8
        },
        end: {
          line: 213,
          column: 46
        }
      },
      "85": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 214,
          column: 76
        }
      },
      "86": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 220,
          column: 62
        }
      },
      "87": {
        start: {
          line: 222,
          column: 8
        },
        end: {
          line: 222,
          column: 45
        }
      },
      "88": {
        start: {
          line: 224,
          column: 8
        },
        end: {
          line: 224,
          column: 47
        }
      },
      "89": {
        start: {
          line: 226,
          column: 8
        },
        end: {
          line: 226,
          column: 52
        }
      },
      "90": {
        start: {
          line: 227,
          column: 8
        },
        end: {
          line: 227,
          column: 62
        }
      },
      "91": {
        start: {
          line: 233,
          column: 8
        },
        end: {
          line: 233,
          column: 62
        }
      },
      "92": {
        start: {
          line: 235,
          column: 8
        },
        end: {
          line: 235,
          column: 51
        }
      },
      "93": {
        start: {
          line: 237,
          column: 8
        },
        end: {
          line: 237,
          column: 46
        }
      },
      "94": {
        start: {
          line: 239,
          column: 8
        },
        end: {
          line: 239,
          column: 44
        }
      },
      "95": {
        start: {
          line: 240,
          column: 8
        },
        end: {
          line: 240,
          column: 62
        }
      },
      "96": {
        start: {
          line: 247,
          column: 8
        },
        end: {
          line: 249,
          column: 11
        }
      },
      "97": {
        start: {
          line: 248,
          column: 12
        },
        end: {
          line: 248,
          column: 53
        }
      },
      "98": {
        start: {
          line: 250,
          column: 8
        },
        end: {
          line: 252,
          column: 11
        }
      },
      "99": {
        start: {
          line: 251,
          column: 12
        },
        end: {
          line: 251,
          column: 56
        }
      },
      "100": {
        start: {
          line: 253,
          column: 8
        },
        end: {
          line: 255,
          column: 11
        }
      },
      "101": {
        start: {
          line: 254,
          column: 12
        },
        end: {
          line: 254,
          column: 56
        }
      },
      "102": {
        start: {
          line: 257,
          column: 8
        },
        end: {
          line: 259,
          column: 11
        }
      },
      "103": {
        start: {
          line: 258,
          column: 12
        },
        end: {
          line: 258,
          column: 66
        }
      },
      "104": {
        start: {
          line: 260,
          column: 8
        },
        end: {
          line: 262,
          column: 11
        }
      },
      "105": {
        start: {
          line: 261,
          column: 12
        },
        end: {
          line: 261,
          column: 64
        }
      },
      "106": {
        start: {
          line: 264,
          column: 8
        },
        end: {
          line: 266,
          column: 11
        }
      },
      "107": {
        start: {
          line: 265,
          column: 12
        },
        end: {
          line: 265,
          column: 46
        }
      },
      "108": {
        start: {
          line: 267,
          column: 8
        },
        end: {
          line: 269,
          column: 11
        }
      },
      "109": {
        start: {
          line: 268,
          column: 12
        },
        end: {
          line: 268,
          column: 51
        }
      },
      "110": {
        start: {
          line: 271,
          column: 8
        },
        end: {
          line: 273,
          column: 11
        }
      },
      "111": {
        start: {
          line: 272,
          column: 12
        },
        end: {
          line: 272,
          column: 62
        }
      },
      "112": {
        start: {
          line: 274,
          column: 8
        },
        end: {
          line: 276,
          column: 11
        }
      },
      "113": {
        start: {
          line: 275,
          column: 12
        },
        end: {
          line: 275,
          column: 47
        }
      },
      "114": {
        start: {
          line: 278,
          column: 8
        },
        end: {
          line: 280,
          column: 11
        }
      },
      "115": {
        start: {
          line: 279,
          column: 12
        },
        end: {
          line: 279,
          column: 49
        }
      },
      "116": {
        start: {
          line: 281,
          column: 8
        },
        end: {
          line: 283,
          column: 11
        }
      },
      "117": {
        start: {
          line: 282,
          column: 12
        },
        end: {
          line: 282,
          column: 49
        }
      },
      "118": {
        start: {
          line: 289,
          column: 8
        },
        end: {
          line: 307,
          column: 9
        }
      },
      "119": {
        start: {
          line: 290,
          column: 12
        },
        end: {
          line: 292,
          column: 13
        }
      },
      "120": {
        start: {
          line: 291,
          column: 16
        },
        end: {
          line: 291,
          column: 34
        }
      },
      "121": {
        start: {
          line: 294,
          column: 12
        },
        end: {
          line: 294,
          column: 47
        }
      },
      "122": {
        start: {
          line: 295,
          column: 12
        },
        end: {
          line: 295,
          column: 41
        }
      },
      "123": {
        start: {
          line: 296,
          column: 12
        },
        end: {
          line: 296,
          column: 48
        }
      },
      "124": {
        start: {
          line: 297,
          column: 12
        },
        end: {
          line: 297,
          column: 41
        }
      },
      "125": {
        start: {
          line: 298,
          column: 12
        },
        end: {
          line: 298,
          column: 40
        }
      },
      "126": {
        start: {
          line: 299,
          column: 12
        },
        end: {
          line: 299,
          column: 49
        }
      },
      "127": {
        start: {
          line: 300,
          column: 12
        },
        end: {
          line: 300,
          column: 43
        }
      },
      "128": {
        start: {
          line: 301,
          column: 12
        },
        end: {
          line: 301,
          column: 48
        }
      },
      "129": {
        start: {
          line: 302,
          column: 12
        },
        end: {
          line: 302,
          column: 72
        }
      },
      "130": {
        start: {
          line: 305,
          column: 12
        },
        end: {
          line: 305,
          column: 83
        }
      },
      "131": {
        start: {
          line: 306,
          column: 12
        },
        end: {
          line: 306,
          column: 24
        }
      },
      "132": {
        start: {
          line: 310,
          column: 0
        },
        end: {
          line: 310,
          column: 52
        }
      },
      "133": {
        start: {
          line: 315,
          column: 26
        },
        end: {
          line: 371,
          column: 5
        }
      },
      "134": {
        start: {
          line: 372,
          column: 25
        },
        end: {
          line: 376,
          column: 5
        }
      },
      "135": {
        start: {
          line: 377,
          column: 4
        },
        end: {
          line: 377,
          column: 77
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 33,
            column: 5
          }
        },
        loc: {
          start: {
            line: 33,
            column: 51
          },
          end: {
            line: 43,
            column: 5
          }
        },
        line: 33
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 47,
            column: 4
          },
          end: {
            line: 47,
            column: 5
          }
        },
        loc: {
          start: {
            line: 47,
            column: 27
          },
          end: {
            line: 67,
            column: 5
          }
        },
        line: 47
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 71,
            column: 4
          },
          end: {
            line: 71,
            column: 5
          }
        },
        loc: {
          start: {
            line: 71,
            column: 18
          },
          end: {
            line: 100,
            column: 5
          }
        },
        line: 71
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 104,
            column: 4
          },
          end: {
            line: 104,
            column: 5
          }
        },
        loc: {
          start: {
            line: 104,
            column: 17
          },
          end: {
            line: 130,
            column: 5
          }
        },
        line: 104
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 134,
            column: 4
          },
          end: {
            line: 134,
            column: 5
          }
        },
        loc: {
          start: {
            line: 134,
            column: 23
          },
          end: {
            line: 136,
            column: 5
          }
        },
        line: 134
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 140,
            column: 4
          },
          end: {
            line: 140,
            column: 5
          }
        },
        loc: {
          start: {
            line: 140,
            column: 23
          },
          end: {
            line: 142,
            column: 5
          }
        },
        line: 140
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 146,
            column: 4
          },
          end: {
            line: 146,
            column: 5
          }
        },
        loc: {
          start: {
            line: 146,
            column: 22
          },
          end: {
            line: 148,
            column: 5
          }
        },
        line: 146
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 152,
            column: 4
          },
          end: {
            line: 152,
            column: 5
          }
        },
        loc: {
          start: {
            line: 152,
            column: 23
          },
          end: {
            line: 154,
            column: 5
          }
        },
        line: 152
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 158,
            column: 4
          },
          end: {
            line: 158,
            column: 5
          }
        },
        loc: {
          start: {
            line: 158,
            column: 22
          },
          end: {
            line: 160,
            column: 5
          }
        },
        line: 158
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 164,
            column: 4
          },
          end: {
            line: 164,
            column: 5
          }
        },
        loc: {
          start: {
            line: 164,
            column: 25
          },
          end: {
            line: 166,
            column: 5
          }
        },
        line: 164
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 170,
            column: 4
          },
          end: {
            line: 170,
            column: 5
          }
        },
        loc: {
          start: {
            line: 170,
            column: 25
          },
          end: {
            line: 172,
            column: 5
          }
        },
        line: 170
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 176,
            column: 4
          },
          end: {
            line: 176,
            column: 5
          }
        },
        loc: {
          start: {
            line: 176,
            column: 30
          },
          end: {
            line: 178,
            column: 5
          }
        },
        line: 176
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 182,
            column: 4
          },
          end: {
            line: 182,
            column: 5
          }
        },
        loc: {
          start: {
            line: 182,
            column: 16
          },
          end: {
            line: 191,
            column: 5
          }
        },
        line: 182
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 195,
            column: 4
          },
          end: {
            line: 195,
            column: 5
          }
        },
        loc: {
          start: {
            line: 195,
            column: 36
          },
          end: {
            line: 215,
            column: 5
          }
        },
        line: 195
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 197,
            column: 65
          },
          end: {
            line: 197,
            column: 66
          }
        },
        loc: {
          start: {
            line: 197,
            column: 96
          },
          end: {
            line: 212,
            column: 9
          }
        },
        line: 197
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 219,
            column: 4
          },
          end: {
            line: 219,
            column: 5
          }
        },
        loc: {
          start: {
            line: 219,
            column: 28
          },
          end: {
            line: 228,
            column: 5
          }
        },
        line: 219
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 232,
            column: 4
          },
          end: {
            line: 232,
            column: 5
          }
        },
        loc: {
          start: {
            line: 232,
            column: 27
          },
          end: {
            line: 241,
            column: 5
          }
        },
        line: 232
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 245,
            column: 4
          },
          end: {
            line: 245,
            column: 5
          }
        },
        loc: {
          start: {
            line: 245,
            column: 27
          },
          end: {
            line: 284,
            column: 5
          }
        },
        line: 245
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 247,
            column: 49
          },
          end: {
            line: 247,
            column: 50
          }
        },
        loc: {
          start: {
            line: 247,
            column: 65
          },
          end: {
            line: 249,
            column: 9
          }
        },
        line: 247
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 250,
            column: 52
          },
          end: {
            line: 250,
            column: 53
          }
        },
        loc: {
          start: {
            line: 250,
            column: 68
          },
          end: {
            line: 252,
            column: 9
          }
        },
        line: 250
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 253,
            column: 45
          },
          end: {
            line: 253,
            column: 46
          }
        },
        loc: {
          start: {
            line: 253,
            column: 68
          },
          end: {
            line: 255,
            column: 9
          }
        },
        line: 253
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 257,
            column: 53
          },
          end: {
            line: 257,
            column: 54
          }
        },
        loc: {
          start: {
            line: 257,
            column: 78
          },
          end: {
            line: 259,
            column: 9
          }
        },
        line: 257
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 260,
            column: 51
          },
          end: {
            line: 260,
            column: 52
          }
        },
        loc: {
          start: {
            line: 260,
            column: 76
          },
          end: {
            line: 262,
            column: 9
          }
        },
        line: 260
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 264,
            column: 49
          },
          end: {
            line: 264,
            column: 50
          }
        },
        loc: {
          start: {
            line: 264,
            column: 60
          },
          end: {
            line: 266,
            column: 9
          }
        },
        line: 264
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 267,
            column: 54
          },
          end: {
            line: 267,
            column: 55
          }
        },
        loc: {
          start: {
            line: 267,
            column: 65
          },
          end: {
            line: 269,
            column: 9
          }
        },
        line: 267
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 271,
            column: 54
          },
          end: {
            line: 271,
            column: 55
          }
        },
        loc: {
          start: {
            line: 271,
            column: 76
          },
          end: {
            line: 273,
            column: 9
          }
        },
        line: 271
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 274,
            column: 50
          },
          end: {
            line: 274,
            column: 51
          }
        },
        loc: {
          start: {
            line: 274,
            column: 61
          },
          end: {
            line: 276,
            column: 9
          }
        },
        line: 274
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 278,
            column: 57
          },
          end: {
            line: 278,
            column: 58
          }
        },
        loc: {
          start: {
            line: 278,
            column: 68
          },
          end: {
            line: 280,
            column: 9
          }
        },
        line: 278
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 281,
            column: 56
          },
          end: {
            line: 281,
            column: 57
          }
        },
        loc: {
          start: {
            line: 281,
            column: 68
          },
          end: {
            line: 283,
            column: 9
          }
        },
        line: 281
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 288,
            column: 4
          },
          end: {
            line: 288,
            column: 5
          }
        },
        loc: {
          start: {
            line: 288,
            column: 20
          },
          end: {
            line: 308,
            column: 5
          }
        },
        line: 288
      },
      "30": {
        name: "createOracleTunnelInfrastructure",
        decl: {
          start: {
            line: 314,
            column: 9
          },
          end: {
            line: 314,
            column: 41
          }
        },
        loc: {
          start: {
            line: 314,
            column: 83
          },
          end: {
            line: 378,
            column: 1
          }
        },
        line: 314
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 72,
            column: 8
          },
          end: {
            line: 74,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 72,
            column: 8
          },
          end: {
            line: 74,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 72
      },
      "1": {
        loc: {
          start: {
            line: 75,
            column: 8
          },
          end: {
            line: 78,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 75,
            column: 8
          },
          end: {
            line: 78,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 75
      },
      "2": {
        loc: {
          start: {
            line: 84,
            column: 12
          },
          end: {
            line: 86,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 84,
            column: 12
          },
          end: {
            line: 86,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 84
      },
      "3": {
        loc: {
          start: {
            line: 105,
            column: 8
          },
          end: {
            line: 108,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 105,
            column: 8
          },
          end: {
            line: 108,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 105
      },
      "4": {
        loc: {
          start: {
            line: 117,
            column: 12
          },
          end: {
            line: 119,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 117,
            column: 12
          },
          end: {
            line: 119,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 117
      },
      "5": {
        loc: {
          start: {
            line: 290,
            column: 12
          },
          end: {
            line: 292,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 290,
            column: 12
          },
          end: {
            line: 292,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 290
      },
      "6": {
        loc: {
          start: {
            line: 320,
            column: 26
          },
          end: {
            line: 320,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 320,
            column: 26
          },
          end: {
            line: 320,
            column: 57
          }
        }, {
          start: {
            line: 320,
            column: 61
          },
          end: {
            line: 320,
            column: 69
          }
        }],
        line: 320
      },
      "7": {
        loc: {
          start: {
            line: 321,
            column: 32
          },
          end: {
            line: 321,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 321,
            column: 32
          },
          end: {
            line: 321,
            column: 63
          }
        }, {
          start: {
            line: 321,
            column: 67
          },
          end: {
            line: 321,
            column: 86
          }
        }],
        line: 321
      },
      "8": {
        loc: {
          start: {
            line: 375,
            column: 23
          },
          end: {
            line: 375,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 375,
            column: 23
          },
          end: {
            line: 375,
            column: 50
          }
        }, {
          start: {
            line: 375,
            column: 54
          },
          end: {
            line: 375,
            column: 81
          }
        }],
        line: 375
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\tunnel-infrastructure.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\tunnel-infrastructure.ts"],
      sourcesContent: ["import { EventEmitter } from 'events';\r\nimport { Logger } from '../core/logging/logger';\r\nimport { EncryptionService } from '../security/encryption-service';\r\nimport { SSHTunnelManager, TunnelConfig } from './ssh-tunnel-manager';\r\nimport { TunnelHealthMonitor, HealthMonitorConfig } from './tunnel-health-monitor';\r\nimport { TunnelStateTracker } from './tunnel-state-tracker';\r\nimport { TunnelAutoReconnect, ReconnectionConfig } from './tunnel-auto-reconnect';\r\nimport { TunnelLoadBalancer, TunnelPoolConfig, LoadBalancingStrategy } from './tunnel-load-balancer';\r\nimport { TunnelFailoverManager, FailoverConfig } from './tunnel-failover-manager';\r\nimport { TunnelSecurityMonitor, SecurityMonitorConfig } from './tunnel-security-monitor';\r\nimport { TunnelPerformanceAnalytics, AnalyticsConfig } from './tunnel-performance-analytics';\r\n\r\n/**\r\n * Tunnel infrastructure configuration\r\n */\r\nexport interface TunnelInfrastructureConfig {\r\n  /** SSH tunnel configurations */\r\n  tunnelConfigs: Partial<TunnelConfig>[];\r\n  /** Health monitoring configuration */\r\n  healthMonitor?: Partial<HealthMonitorConfig>;\r\n  /** Auto-reconnection configuration */\r\n  autoReconnect?: Partial<ReconnectionConfig>;\r\n  /** Load balancing configuration */\r\n  loadBalancer?: Partial<TunnelPoolConfig>;\r\n  /** Failover configuration */\r\n  failover?: Partial<FailoverConfig>;\r\n  /** Security monitoring configuration */\r\n  security?: Partial<SecurityMonitorConfig>;\r\n  /** Performance analytics configuration */\r\n  analytics?: Partial<AnalyticsConfig>;\r\n  /** Enable all monitoring by default */\r\n  enableMonitoring?: boolean;\r\n}\r\n\r\n/**\r\n * Tunnel Infrastructure Manager\r\n * Orchestrates all SSH tunnel components for Oracle Free Tier integration\r\n */\r\nexport class TunnelInfrastructure extends EventEmitter {\r\n  private logger: Logger;\r\n  private encryptionService: EncryptionService;\r\n  private config: TunnelInfrastructureConfig;\r\n\r\n  // Core components\r\n  private tunnelManager: SSHTunnelManager;\r\n  private healthMonitor: TunnelHealthMonitor;\r\n  private stateTracker: TunnelStateTracker;\r\n  private autoReconnect: TunnelAutoReconnect;\r\n  private loadBalancer: TunnelLoadBalancer;\r\n  private failoverManager: TunnelFailoverManager;\r\n  private securityMonitor: TunnelSecurityMonitor;\r\n  private performanceAnalytics: TunnelPerformanceAnalytics;\r\n\r\n  private isInitialized: boolean = false;\r\n  private isRunning: boolean = false;\r\n\r\n  constructor(\r\n    logger: Logger,\r\n    encryptionService: EncryptionService,\r\n    config: TunnelInfrastructureConfig\r\n  ) {\r\n    super();\r\n    this.logger = logger;\r\n    this.encryptionService = encryptionService;\r\n    this.config = {\r\n      enableMonitoring: true,\r\n      ...config\r\n    };\r\n\r\n    this.initializeComponents();\r\n    this.logger.info('Tunnel Infrastructure Manager created');\r\n  }\r\n\r\n  /**\r\n   * Initialize all tunnel infrastructure components\r\n   */\r\n  private initializeComponents(): void {\r\n    // Core tunnel manager\r\n    this.tunnelManager = new SSHTunnelManager(this.logger, this.encryptionService);\r\n\r\n    // State tracking\r\n    this.stateTracker = new TunnelStateTracker(this.logger);\r\n\r\n    // Health monitoring\r\n    this.healthMonitor = new TunnelHealthMonitor(\r\n      this.logger,\r\n      this.tunnelManager,\r\n      this.stateTracker,\r\n      this.config.healthMonitor\r\n    );\r\n\r\n    // Auto-reconnection\r\n    this.autoReconnect = new TunnelAutoReconnect(\r\n      this.logger,\r\n      this.tunnelManager,\r\n      this.healthMonitor,\r\n      this.stateTracker,\r\n      this.config.autoReconnect\r\n    );\r\n\r\n    // Load balancing\r\n    this.loadBalancer = new TunnelLoadBalancer(\r\n      this.logger,\r\n      this.tunnelManager,\r\n      this.healthMonitor,\r\n      this.stateTracker,\r\n      this.config.loadBalancer\r\n    );\r\n\r\n    // Failover management\r\n    this.failoverManager = new TunnelFailoverManager(\r\n      this.logger,\r\n      this.tunnelManager,\r\n      this.healthMonitor,\r\n      this.loadBalancer,\r\n      this.autoReconnect,\r\n      this.config.failover\r\n    );\r\n\r\n    // Security monitoring\r\n    this.securityMonitor = new TunnelSecurityMonitor(\r\n      this.logger,\r\n      this.tunnelManager,\r\n      this.encryptionService,\r\n      this.config.security\r\n    );\r\n\r\n    // Performance analytics\r\n    this.performanceAnalytics = new TunnelPerformanceAnalytics(\r\n      this.logger,\r\n      this.tunnelManager,\r\n      this.healthMonitor,\r\n      this.stateTracker,\r\n      this.config.analytics\r\n    );\r\n\r\n    this.setupEventForwarding();\r\n    this.isInitialized = true;\r\n    this.logger.info('All tunnel infrastructure components initialized');\r\n  }\r\n\r\n  /**\r\n   * Start the tunnel infrastructure\r\n   */\r\n  async start(): Promise<void> {\r\n    if (!this.isInitialized) {\r\n      throw new Error('Tunnel infrastructure not initialized');\r\n    }\r\n\r\n    if (this.isRunning) {\r\n      this.logger.warn('Tunnel infrastructure is already running');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      this.logger.info('Starting tunnel infrastructure...');\r\n\r\n      // Create and establish tunnel connections\r\n      await this.createTunnelConnections();\r\n\r\n      // Start monitoring components if enabled\r\n      if (this.config.enableMonitoring) {\r\n        await this.startMonitoring();\r\n      }\r\n\r\n      // Enable load balancing and failover\r\n      this.loadBalancer.enable();\r\n      await this.failoverManager.enable();\r\n\r\n      // Enable auto-reconnection\r\n      this.autoReconnect.enable();\r\n\r\n      this.isRunning = true;\r\n      this.logger.info('Tunnel infrastructure started successfully');\r\n      this.emit('infrastructureStarted');\r\n\r\n    } catch (error) {\r\n      this.logger.error('Failed to start tunnel infrastructure', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop the tunnel infrastructure\r\n   */\r\n  async stop(): Promise<void> {\r\n    if (!this.isRunning) {\r\n      this.logger.warn('Tunnel infrastructure is not running');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      this.logger.info('Stopping tunnel infrastructure...');\r\n\r\n      // Disable auto-reconnection\r\n      this.autoReconnect.disable();\r\n\r\n      // Disable load balancing and failover\r\n      this.loadBalancer.disable();\r\n      await this.failoverManager.disable();\r\n\r\n      // Stop monitoring components\r\n      if (this.config.enableMonitoring) {\r\n        await this.stopMonitoring();\r\n      }\r\n\r\n      // Cleanup tunnel connections\r\n      await this.tunnelManager.cleanup();\r\n\r\n      this.isRunning = false;\r\n      this.logger.info('Tunnel infrastructure stopped successfully');\r\n      this.emit('infrastructureStopped');\r\n\r\n    } catch (error) {\r\n      this.logger.error('Failed to stop tunnel infrastructure', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get tunnel manager instance\r\n   */\r\n  getTunnelManager(): SSHTunnelManager {\r\n    return this.tunnelManager;\r\n  }\r\n\r\n  /**\r\n   * Get health monitor instance\r\n   */\r\n  getHealthMonitor(): TunnelHealthMonitor {\r\n    return this.healthMonitor;\r\n  }\r\n\r\n  /**\r\n   * Get state tracker instance\r\n   */\r\n  getStateTracker(): TunnelStateTracker {\r\n    return this.stateTracker;\r\n  }\r\n\r\n  /**\r\n   * Get auto-reconnect instance\r\n   */\r\n  getAutoReconnect(): TunnelAutoReconnect {\r\n    return this.autoReconnect;\r\n  }\r\n\r\n  /**\r\n   * Get load balancer instance\r\n   */\r\n  getLoadBalancer(): TunnelLoadBalancer {\r\n    return this.loadBalancer;\r\n  }\r\n\r\n  /**\r\n   * Get failover manager instance\r\n   */\r\n  getFailoverManager(): TunnelFailoverManager {\r\n    return this.failoverManager;\r\n  }\r\n\r\n  /**\r\n   * Get security monitor instance\r\n   */\r\n  getSecurityMonitor(): TunnelSecurityMonitor {\r\n    return this.securityMonitor;\r\n  }\r\n\r\n  /**\r\n   * Get performance analytics instance\r\n   */\r\n  getPerformanceAnalytics(): TunnelPerformanceAnalytics {\r\n    return this.performanceAnalytics;\r\n  }\r\n\r\n  /**\r\n   * Get infrastructure status\r\n   */\r\n  getStatus(): {\r\n    isInitialized: boolean;\r\n    isRunning: boolean;\r\n    tunnelCount: number;\r\n    activeTunnels: number;\r\n    systemHealth: any;\r\n    securityMetrics: any;\r\n  } {\r\n    return {\r\n      isInitialized: this.isInitialized,\r\n      isRunning: this.isRunning,\r\n      tunnelCount: this.tunnelManager.getAllConnections().length,\r\n      activeTunnels: this.tunnelManager.getActiveConnections().length,\r\n      systemHealth: this.healthMonitor.getSystemHealthStatus(),\r\n      securityMetrics: this.securityMonitor.getSecurityMetrics()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Create tunnel connections from configuration\r\n   */\r\n  private async createTunnelConnections(): Promise<void> {\r\n    this.logger.info(`Creating ${this.config.tunnelConfigs.length} tunnel connections`);\r\n\r\n    const connectionPromises = this.config.tunnelConfigs.map(async (tunnelConfig, index) => {\r\n      try {\r\n        // Create tunnel connection\r\n        const connection = await this.tunnelManager.createTunnel(tunnelConfig);\r\n        \r\n        // Establish connection\r\n        await this.tunnelManager.establishTunnel(connection.id);\r\n        \r\n        // Add to failover management as primary tunnel\r\n        this.failoverManager.addPrimaryTunnel(connection.id);\r\n\r\n        this.logger.info(`Tunnel connection ${index + 1} established: ${connection.id}`);\r\n        return connection;\r\n\r\n      } catch (error) {\r\n        this.logger.error(`Failed to create tunnel connection ${index + 1}`, error);\r\n        throw error;\r\n      }\r\n    });\r\n\r\n    await Promise.all(connectionPromises);\r\n    this.logger.info('All tunnel connections established successfully');\r\n  }\r\n\r\n  /**\r\n   * Start monitoring components\r\n   */\r\n  private async startMonitoring(): Promise<void> {\r\n    this.logger.info('Starting monitoring components...');\r\n\r\n    // Start health monitoring\r\n    this.healthMonitor.startMonitoring();\r\n\r\n    // Start security monitoring\r\n    this.securityMonitor.startMonitoring();\r\n\r\n    // Start performance analytics\r\n    this.performanceAnalytics.startCollection();\r\n\r\n    this.logger.info('All monitoring components started');\r\n  }\r\n\r\n  /**\r\n   * Stop monitoring components\r\n   */\r\n  private async stopMonitoring(): Promise<void> {\r\n    this.logger.info('Stopping monitoring components...');\r\n\r\n    // Stop performance analytics\r\n    this.performanceAnalytics.stopCollection();\r\n\r\n    // Stop security monitoring\r\n    this.securityMonitor.stopMonitoring();\r\n\r\n    // Stop health monitoring\r\n    this.healthMonitor.stopMonitoring();\r\n\r\n    this.logger.info('All monitoring components stopped');\r\n  }\r\n\r\n  /**\r\n   * Setup event forwarding from components\r\n   */\r\n  private setupEventForwarding(): void {\r\n    // Forward tunnel manager events\r\n    this.tunnelManager.on('tunnelConnected', (connection) => {\r\n      this.emit('tunnelConnected', connection);\r\n    });\r\n\r\n    this.tunnelManager.on('tunnelDisconnected', (connection) => {\r\n      this.emit('tunnelDisconnected', connection);\r\n    });\r\n\r\n    this.tunnelManager.on('tunnelError', (connection, error) => {\r\n      this.emit('tunnelError', connection, error);\r\n    });\r\n\r\n    // Forward health monitor events\r\n    this.healthMonitor.on('connectionUnhealthy', (connection, metrics) => {\r\n      this.emit('connectionUnhealthy', connection, metrics);\r\n    });\r\n\r\n    this.healthMonitor.on('connectionHealthy', (connection, metrics) => {\r\n      this.emit('connectionHealthy', connection, metrics);\r\n    });\r\n\r\n    // Forward security monitor events\r\n    this.securityMonitor.on('securityEvent', (event) => {\r\n      this.emit('securityEvent', event);\r\n    });\r\n\r\n    this.securityMonitor.on('highThreatDetected', (event) => {\r\n      this.emit('highThreatDetected', event);\r\n    });\r\n\r\n    // Forward failover events\r\n    this.failoverManager.on('failoverSuccessful', (event, selection) => {\r\n      this.emit('failoverSuccessful', event, selection);\r\n    });\r\n\r\n    this.failoverManager.on('failoverFailed', (event) => {\r\n      this.emit('failoverFailed', event);\r\n    });\r\n\r\n    // Forward performance analytics events\r\n    this.performanceAnalytics.on('performanceAlert', (alert) => {\r\n      this.emit('performanceAlert', alert);\r\n    });\r\n\r\n    this.performanceAnalytics.on('reportGenerated', (report) => {\r\n      this.emit('reportGenerated', report);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Cleanup all resources\r\n   */\r\n  async cleanup(): Promise<void> {\r\n    try {\r\n      if (this.isRunning) {\r\n        await this.stop();\r\n      }\r\n\r\n      // Cleanup all components\r\n      await this.tunnelManager.cleanup();\r\n      this.healthMonitor.cleanup();\r\n      this.stateTracker.clearAllHistory();\r\n      this.autoReconnect.cleanup();\r\n      this.loadBalancer.cleanup();\r\n      await this.failoverManager.cleanup();\r\n      this.securityMonitor.cleanup();\r\n      this.performanceAnalytics.cleanup();\r\n\r\n      this.logger.info('Tunnel infrastructure cleanup completed');\r\n\r\n    } catch (error) {\r\n      this.logger.error('Error during tunnel infrastructure cleanup', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Factory function to create tunnel infrastructure with Oracle Free Tier defaults\r\n */\r\nexport function createOracleTunnelInfrastructure(\r\n  logger: Logger,\r\n  encryptionService: EncryptionService,\r\n  customConfig?: Partial<TunnelInfrastructureConfig>\r\n): TunnelInfrastructure {\r\n  const defaultConfig: TunnelInfrastructureConfig = {\r\n    tunnelConfigs: [\r\n      {\r\n        oracleIP: '168.138.104.117',\r\n        sshPort: 22,\r\n        username: process.env.ORACLE_SSH_USERNAME || 'ubuntu',\r\n        privateKeyPath: process.env.ORACLE_SSH_KEY_PATH || '~/.ssh/oracle_key',\r\n        localPort: 8080,\r\n        remotePort: 3000,\r\n        keepAlive: true,\r\n        compression: true,\r\n        connectionTimeout: 30,\r\n        serverAliveInterval: 60,\r\n        serverAliveCountMax: 3\r\n      }\r\n    ],\r\n    healthMonitor: {\r\n      checkInterval: 30000,\r\n      maxLatency: 1000,\r\n      maxPacketLoss: 5,\r\n      minThroughput: 1024,\r\n      failureThreshold: 3\r\n    },\r\n    autoReconnect: {\r\n      enabled: true,\r\n      initialRetryDelay: 5000,\r\n      maxRetryDelay: 300000,\r\n      maxRetryAttempts: 10,\r\n      backoffMultiplier: 2\r\n    },\r\n    loadBalancer: {\r\n      minActiveTunnels: 1,\r\n      maxActiveTunnels: 3,\r\n      strategy: LoadBalancingStrategy.HEALTH_BASED,\r\n      enableFailover: true,\r\n      enableDynamicWeights: true\r\n    },\r\n    failover: {\r\n      enabled: true,\r\n      minBackupTunnels: 1,\r\n      maxFailoverAttempts: 3,\r\n      enableProactiveBackups: true\r\n    },\r\n    security: {\r\n      enableTrafficMonitoring: true,\r\n      enableIntrusionDetection: true,\r\n      enableDataIntegrityChecking: true,\r\n      enableAutoResponse: true\r\n    },\r\n    analytics: {\r\n      collectionInterval: 60000,\r\n      enableTrendAnalysis: true,\r\n      enablePerformanceAlerts: true,\r\n      enableAutoReporting: true\r\n    },\r\n    enableMonitoring: true\r\n  };\r\n\r\n  const mergedConfig = {\r\n    ...defaultConfig,\r\n    ...customConfig,\r\n    tunnelConfigs: customConfig?.tunnelConfigs || defaultConfig.tunnelConfigs\r\n  };\r\n\r\n  return new TunnelInfrastructure(logger, encryptionService, mergedConfig);\r\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "911fce3fc2a10b9a06b10bb863052af1c2147b47"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1lxt9ntsas = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1lxt9ntsas();
cov_1lxt9ntsas().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1lxt9ntsas().s[1]++;
exports.TunnelInfrastructure = void 0;
/* istanbul ignore next */
cov_1lxt9ntsas().s[2]++;
exports.createOracleTunnelInfrastructure = createOracleTunnelInfrastructure;
const events_1 =
/* istanbul ignore next */
(cov_1lxt9ntsas().s[3]++, require("events"));
const ssh_tunnel_manager_1 =
/* istanbul ignore next */
(cov_1lxt9ntsas().s[4]++, require("./ssh-tunnel-manager"));
const tunnel_health_monitor_1 =
/* istanbul ignore next */
(cov_1lxt9ntsas().s[5]++, require("./tunnel-health-monitor"));
const tunnel_state_tracker_1 =
/* istanbul ignore next */
(cov_1lxt9ntsas().s[6]++, require("./tunnel-state-tracker"));
const tunnel_auto_reconnect_1 =
/* istanbul ignore next */
(cov_1lxt9ntsas().s[7]++, require("./tunnel-auto-reconnect"));
const tunnel_load_balancer_1 =
/* istanbul ignore next */
(cov_1lxt9ntsas().s[8]++, require("./tunnel-load-balancer"));
const tunnel_failover_manager_1 =
/* istanbul ignore next */
(cov_1lxt9ntsas().s[9]++, require("./tunnel-failover-manager"));
const tunnel_security_monitor_1 =
/* istanbul ignore next */
(cov_1lxt9ntsas().s[10]++, require("./tunnel-security-monitor"));
const tunnel_performance_analytics_1 =
/* istanbul ignore next */
(cov_1lxt9ntsas().s[11]++, require("./tunnel-performance-analytics"));
/**
 * Tunnel Infrastructure Manager
 * Orchestrates all SSH tunnel components for Oracle Free Tier integration
 */
class TunnelInfrastructure extends
/* istanbul ignore next */
(events_1.EventEmitter) {
  logger;
  encryptionService;
  config;
  // Core components
  tunnelManager;
  healthMonitor;
  stateTracker;
  autoReconnect;
  loadBalancer;
  failoverManager;
  securityMonitor;
  performanceAnalytics;
  isInitialized =
  /* istanbul ignore next */
  (cov_1lxt9ntsas().s[12]++, false);
  isRunning =
  /* istanbul ignore next */
  (cov_1lxt9ntsas().s[13]++, false);
  constructor(logger, encryptionService, config) {
    /* istanbul ignore next */
    cov_1lxt9ntsas().f[0]++;
    cov_1lxt9ntsas().s[14]++;
    super();
    /* istanbul ignore next */
    cov_1lxt9ntsas().s[15]++;
    this.logger = logger;
    /* istanbul ignore next */
    cov_1lxt9ntsas().s[16]++;
    this.encryptionService = encryptionService;
    /* istanbul ignore next */
    cov_1lxt9ntsas().s[17]++;
    this.config = {
      enableMonitoring: true,
      ...config
    };
    /* istanbul ignore next */
    cov_1lxt9ntsas().s[18]++;
    this.initializeComponents();
    /* istanbul ignore next */
    cov_1lxt9ntsas().s[19]++;
    this.logger.info('Tunnel Infrastructure Manager created');
  }
  /**
   * Initialize all tunnel infrastructure components
   */
  initializeComponents() {
    /* istanbul ignore next */
    cov_1lxt9ntsas().f[1]++;
    cov_1lxt9ntsas().s[20]++;
    // Core tunnel manager
    this.tunnelManager = new ssh_tunnel_manager_1.SSHTunnelManager(this.logger, this.encryptionService);
    // State tracking
    /* istanbul ignore next */
    cov_1lxt9ntsas().s[21]++;
    this.stateTracker = new tunnel_state_tracker_1.TunnelStateTracker(this.logger);
    // Health monitoring
    /* istanbul ignore next */
    cov_1lxt9ntsas().s[22]++;
    this.healthMonitor = new tunnel_health_monitor_1.TunnelHealthMonitor(this.logger, this.tunnelManager, this.stateTracker, this.config.healthMonitor);
    // Auto-reconnection
    /* istanbul ignore next */
    cov_1lxt9ntsas().s[23]++;
    this.autoReconnect = new tunnel_auto_reconnect_1.TunnelAutoReconnect(this.logger, this.tunnelManager, this.healthMonitor, this.stateTracker, this.config.autoReconnect);
    // Load balancing
    /* istanbul ignore next */
    cov_1lxt9ntsas().s[24]++;
    this.loadBalancer = new tunnel_load_balancer_1.TunnelLoadBalancer(this.logger, this.tunnelManager, this.healthMonitor, this.stateTracker, this.config.loadBalancer);
    // Failover management
    /* istanbul ignore next */
    cov_1lxt9ntsas().s[25]++;
    this.failoverManager = new tunnel_failover_manager_1.TunnelFailoverManager(this.logger, this.tunnelManager, this.healthMonitor, this.loadBalancer, this.autoReconnect, this.config.failover);
    // Security monitoring
    /* istanbul ignore next */
    cov_1lxt9ntsas().s[26]++;
    this.securityMonitor = new tunnel_security_monitor_1.TunnelSecurityMonitor(this.logger, this.tunnelManager, this.encryptionService, this.config.security);
    // Performance analytics
    /* istanbul ignore next */
    cov_1lxt9ntsas().s[27]++;
    this.performanceAnalytics = new tunnel_performance_analytics_1.TunnelPerformanceAnalytics(this.logger, this.tunnelManager, this.healthMonitor, this.stateTracker, this.config.analytics);
    /* istanbul ignore next */
    cov_1lxt9ntsas().s[28]++;
    this.setupEventForwarding();
    /* istanbul ignore next */
    cov_1lxt9ntsas().s[29]++;
    this.isInitialized = true;
    /* istanbul ignore next */
    cov_1lxt9ntsas().s[30]++;
    this.logger.info('All tunnel infrastructure components initialized');
  }
  /**
   * Start the tunnel infrastructure
   */
  async start() {
    /* istanbul ignore next */
    cov_1lxt9ntsas().f[2]++;
    cov_1lxt9ntsas().s[31]++;
    if (!this.isInitialized) {
      /* istanbul ignore next */
      cov_1lxt9ntsas().b[0][0]++;
      cov_1lxt9ntsas().s[32]++;
      throw new Error('Tunnel infrastructure not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_1lxt9ntsas().b[0][1]++;
    }
    cov_1lxt9ntsas().s[33]++;
    if (this.isRunning) {
      /* istanbul ignore next */
      cov_1lxt9ntsas().b[1][0]++;
      cov_1lxt9ntsas().s[34]++;
      this.logger.warn('Tunnel infrastructure is already running');
      /* istanbul ignore next */
      cov_1lxt9ntsas().s[35]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1lxt9ntsas().b[1][1]++;
    }
    cov_1lxt9ntsas().s[36]++;
    try {
      /* istanbul ignore next */
      cov_1lxt9ntsas().s[37]++;
      this.logger.info('Starting tunnel infrastructure...');
      // Create and establish tunnel connections
      /* istanbul ignore next */
      cov_1lxt9ntsas().s[38]++;
      await this.createTunnelConnections();
      // Start monitoring components if enabled
      /* istanbul ignore next */
      cov_1lxt9ntsas().s[39]++;
      if (this.config.enableMonitoring) {
        /* istanbul ignore next */
        cov_1lxt9ntsas().b[2][0]++;
        cov_1lxt9ntsas().s[40]++;
        await this.startMonitoring();
      } else
      /* istanbul ignore next */
      {
        cov_1lxt9ntsas().b[2][1]++;
      }
      // Enable load balancing and failover
      cov_1lxt9ntsas().s[41]++;
      this.loadBalancer.enable();
      /* istanbul ignore next */
      cov_1lxt9ntsas().s[42]++;
      await this.failoverManager.enable();
      // Enable auto-reconnection
      /* istanbul ignore next */
      cov_1lxt9ntsas().s[43]++;
      this.autoReconnect.enable();
      /* istanbul ignore next */
      cov_1lxt9ntsas().s[44]++;
      this.isRunning = true;
      /* istanbul ignore next */
      cov_1lxt9ntsas().s[45]++;
      this.logger.info('Tunnel infrastructure started successfully');
      /* istanbul ignore next */
      cov_1lxt9ntsas().s[46]++;
      this.emit('infrastructureStarted');
    } catch (error) {
      /* istanbul ignore next */
      cov_1lxt9ntsas().s[47]++;
      this.logger.error('Failed to start tunnel infrastructure', error);
      /* istanbul ignore next */
      cov_1lxt9ntsas().s[48]++;
      throw error;
    }
  }
  /**
   * Stop the tunnel infrastructure
   */
  async stop() {
    /* istanbul ignore next */
    cov_1lxt9ntsas().f[3]++;
    cov_1lxt9ntsas().s[49]++;
    if (!this.isRunning) {
      /* istanbul ignore next */
      cov_1lxt9ntsas().b[3][0]++;
      cov_1lxt9ntsas().s[50]++;
      this.logger.warn('Tunnel infrastructure is not running');
      /* istanbul ignore next */
      cov_1lxt9ntsas().s[51]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1lxt9ntsas().b[3][1]++;
    }
    cov_1lxt9ntsas().s[52]++;
    try {
      /* istanbul ignore next */
      cov_1lxt9ntsas().s[53]++;
      this.logger.info('Stopping tunnel infrastructure...');
      // Disable auto-reconnection
      /* istanbul ignore next */
      cov_1lxt9ntsas().s[54]++;
      this.autoReconnect.disable();
      // Disable load balancing and failover
      /* istanbul ignore next */
      cov_1lxt9ntsas().s[55]++;
      this.loadBalancer.disable();
      /* istanbul ignore next */
      cov_1lxt9ntsas().s[56]++;
      await this.failoverManager.disable();
      // Stop monitoring components
      /* istanbul ignore next */
      cov_1lxt9ntsas().s[57]++;
      if (this.config.enableMonitoring) {
        /* istanbul ignore next */
        cov_1lxt9ntsas().b[4][0]++;
        cov_1lxt9ntsas().s[58]++;
        await this.stopMonitoring();
      } else
      /* istanbul ignore next */
      {
        cov_1lxt9ntsas().b[4][1]++;
      }
      // Cleanup tunnel connections
      cov_1lxt9ntsas().s[59]++;
      await this.tunnelManager.cleanup();
      /* istanbul ignore next */
      cov_1lxt9ntsas().s[60]++;
      this.isRunning = false;
      /* istanbul ignore next */
      cov_1lxt9ntsas().s[61]++;
      this.logger.info('Tunnel infrastructure stopped successfully');
      /* istanbul ignore next */
      cov_1lxt9ntsas().s[62]++;
      this.emit('infrastructureStopped');
    } catch (error) {
      /* istanbul ignore next */
      cov_1lxt9ntsas().s[63]++;
      this.logger.error('Failed to stop tunnel infrastructure', error);
      /* istanbul ignore next */
      cov_1lxt9ntsas().s[64]++;
      throw error;
    }
  }
  /**
   * Get tunnel manager instance
   */
  getTunnelManager() {
    /* istanbul ignore next */
    cov_1lxt9ntsas().f[4]++;
    cov_1lxt9ntsas().s[65]++;
    return this.tunnelManager;
  }
  /**
   * Get health monitor instance
   */
  getHealthMonitor() {
    /* istanbul ignore next */
    cov_1lxt9ntsas().f[5]++;
    cov_1lxt9ntsas().s[66]++;
    return this.healthMonitor;
  }
  /**
   * Get state tracker instance
   */
  getStateTracker() {
    /* istanbul ignore next */
    cov_1lxt9ntsas().f[6]++;
    cov_1lxt9ntsas().s[67]++;
    return this.stateTracker;
  }
  /**
   * Get auto-reconnect instance
   */
  getAutoReconnect() {
    /* istanbul ignore next */
    cov_1lxt9ntsas().f[7]++;
    cov_1lxt9ntsas().s[68]++;
    return this.autoReconnect;
  }
  /**
   * Get load balancer instance
   */
  getLoadBalancer() {
    /* istanbul ignore next */
    cov_1lxt9ntsas().f[8]++;
    cov_1lxt9ntsas().s[69]++;
    return this.loadBalancer;
  }
  /**
   * Get failover manager instance
   */
  getFailoverManager() {
    /* istanbul ignore next */
    cov_1lxt9ntsas().f[9]++;
    cov_1lxt9ntsas().s[70]++;
    return this.failoverManager;
  }
  /**
   * Get security monitor instance
   */
  getSecurityMonitor() {
    /* istanbul ignore next */
    cov_1lxt9ntsas().f[10]++;
    cov_1lxt9ntsas().s[71]++;
    return this.securityMonitor;
  }
  /**
   * Get performance analytics instance
   */
  getPerformanceAnalytics() {
    /* istanbul ignore next */
    cov_1lxt9ntsas().f[11]++;
    cov_1lxt9ntsas().s[72]++;
    return this.performanceAnalytics;
  }
  /**
   * Get infrastructure status
   */
  getStatus() {
    /* istanbul ignore next */
    cov_1lxt9ntsas().f[12]++;
    cov_1lxt9ntsas().s[73]++;
    return {
      isInitialized: this.isInitialized,
      isRunning: this.isRunning,
      tunnelCount: this.tunnelManager.getAllConnections().length,
      activeTunnels: this.tunnelManager.getActiveConnections().length,
      systemHealth: this.healthMonitor.getSystemHealthStatus(),
      securityMetrics: this.securityMonitor.getSecurityMetrics()
    };
  }
  /**
   * Create tunnel connections from configuration
   */
  async createTunnelConnections() {
    /* istanbul ignore next */
    cov_1lxt9ntsas().f[13]++;
    cov_1lxt9ntsas().s[74]++;
    this.logger.info(`Creating ${this.config.tunnelConfigs.length} tunnel connections`);
    const connectionPromises =
    /* istanbul ignore next */
    (cov_1lxt9ntsas().s[75]++, this.config.tunnelConfigs.map(async (tunnelConfig, index) => {
      /* istanbul ignore next */
      cov_1lxt9ntsas().f[14]++;
      cov_1lxt9ntsas().s[76]++;
      try {
        // Create tunnel connection
        const connection =
        /* istanbul ignore next */
        (cov_1lxt9ntsas().s[77]++, await this.tunnelManager.createTunnel(tunnelConfig));
        // Establish connection
        /* istanbul ignore next */
        cov_1lxt9ntsas().s[78]++;
        await this.tunnelManager.establishTunnel(connection.id);
        // Add to failover management as primary tunnel
        /* istanbul ignore next */
        cov_1lxt9ntsas().s[79]++;
        this.failoverManager.addPrimaryTunnel(connection.id);
        /* istanbul ignore next */
        cov_1lxt9ntsas().s[80]++;
        this.logger.info(`Tunnel connection ${index + 1} established: ${connection.id}`);
        /* istanbul ignore next */
        cov_1lxt9ntsas().s[81]++;
        return connection;
      } catch (error) {
        /* istanbul ignore next */
        cov_1lxt9ntsas().s[82]++;
        this.logger.error(`Failed to create tunnel connection ${index + 1}`, error);
        /* istanbul ignore next */
        cov_1lxt9ntsas().s[83]++;
        throw error;
      }
    }));
    /* istanbul ignore next */
    cov_1lxt9ntsas().s[84]++;
    await Promise.all(connectionPromises);
    /* istanbul ignore next */
    cov_1lxt9ntsas().s[85]++;
    this.logger.info('All tunnel connections established successfully');
  }
  /**
   * Start monitoring components
   */
  async startMonitoring() {
    /* istanbul ignore next */
    cov_1lxt9ntsas().f[15]++;
    cov_1lxt9ntsas().s[86]++;
    this.logger.info('Starting monitoring components...');
    // Start health monitoring
    /* istanbul ignore next */
    cov_1lxt9ntsas().s[87]++;
    this.healthMonitor.startMonitoring();
    // Start security monitoring
    /* istanbul ignore next */
    cov_1lxt9ntsas().s[88]++;
    this.securityMonitor.startMonitoring();
    // Start performance analytics
    /* istanbul ignore next */
    cov_1lxt9ntsas().s[89]++;
    this.performanceAnalytics.startCollection();
    /* istanbul ignore next */
    cov_1lxt9ntsas().s[90]++;
    this.logger.info('All monitoring components started');
  }
  /**
   * Stop monitoring components
   */
  async stopMonitoring() {
    /* istanbul ignore next */
    cov_1lxt9ntsas().f[16]++;
    cov_1lxt9ntsas().s[91]++;
    this.logger.info('Stopping monitoring components...');
    // Stop performance analytics
    /* istanbul ignore next */
    cov_1lxt9ntsas().s[92]++;
    this.performanceAnalytics.stopCollection();
    // Stop security monitoring
    /* istanbul ignore next */
    cov_1lxt9ntsas().s[93]++;
    this.securityMonitor.stopMonitoring();
    // Stop health monitoring
    /* istanbul ignore next */
    cov_1lxt9ntsas().s[94]++;
    this.healthMonitor.stopMonitoring();
    /* istanbul ignore next */
    cov_1lxt9ntsas().s[95]++;
    this.logger.info('All monitoring components stopped');
  }
  /**
   * Setup event forwarding from components
   */
  setupEventForwarding() {
    /* istanbul ignore next */
    cov_1lxt9ntsas().f[17]++;
    cov_1lxt9ntsas().s[96]++;
    // Forward tunnel manager events
    this.tunnelManager.on('tunnelConnected', connection => {
      /* istanbul ignore next */
      cov_1lxt9ntsas().f[18]++;
      cov_1lxt9ntsas().s[97]++;
      this.emit('tunnelConnected', connection);
    });
    /* istanbul ignore next */
    cov_1lxt9ntsas().s[98]++;
    this.tunnelManager.on('tunnelDisconnected', connection => {
      /* istanbul ignore next */
      cov_1lxt9ntsas().f[19]++;
      cov_1lxt9ntsas().s[99]++;
      this.emit('tunnelDisconnected', connection);
    });
    /* istanbul ignore next */
    cov_1lxt9ntsas().s[100]++;
    this.tunnelManager.on('tunnelError', (connection, error) => {
      /* istanbul ignore next */
      cov_1lxt9ntsas().f[20]++;
      cov_1lxt9ntsas().s[101]++;
      this.emit('tunnelError', connection, error);
    });
    // Forward health monitor events
    /* istanbul ignore next */
    cov_1lxt9ntsas().s[102]++;
    this.healthMonitor.on('connectionUnhealthy', (connection, metrics) => {
      /* istanbul ignore next */
      cov_1lxt9ntsas().f[21]++;
      cov_1lxt9ntsas().s[103]++;
      this.emit('connectionUnhealthy', connection, metrics);
    });
    /* istanbul ignore next */
    cov_1lxt9ntsas().s[104]++;
    this.healthMonitor.on('connectionHealthy', (connection, metrics) => {
      /* istanbul ignore next */
      cov_1lxt9ntsas().f[22]++;
      cov_1lxt9ntsas().s[105]++;
      this.emit('connectionHealthy', connection, metrics);
    });
    // Forward security monitor events
    /* istanbul ignore next */
    cov_1lxt9ntsas().s[106]++;
    this.securityMonitor.on('securityEvent', event => {
      /* istanbul ignore next */
      cov_1lxt9ntsas().f[23]++;
      cov_1lxt9ntsas().s[107]++;
      this.emit('securityEvent', event);
    });
    /* istanbul ignore next */
    cov_1lxt9ntsas().s[108]++;
    this.securityMonitor.on('highThreatDetected', event => {
      /* istanbul ignore next */
      cov_1lxt9ntsas().f[24]++;
      cov_1lxt9ntsas().s[109]++;
      this.emit('highThreatDetected', event);
    });
    // Forward failover events
    /* istanbul ignore next */
    cov_1lxt9ntsas().s[110]++;
    this.failoverManager.on('failoverSuccessful', (event, selection) => {
      /* istanbul ignore next */
      cov_1lxt9ntsas().f[25]++;
      cov_1lxt9ntsas().s[111]++;
      this.emit('failoverSuccessful', event, selection);
    });
    /* istanbul ignore next */
    cov_1lxt9ntsas().s[112]++;
    this.failoverManager.on('failoverFailed', event => {
      /* istanbul ignore next */
      cov_1lxt9ntsas().f[26]++;
      cov_1lxt9ntsas().s[113]++;
      this.emit('failoverFailed', event);
    });
    // Forward performance analytics events
    /* istanbul ignore next */
    cov_1lxt9ntsas().s[114]++;
    this.performanceAnalytics.on('performanceAlert', alert => {
      /* istanbul ignore next */
      cov_1lxt9ntsas().f[27]++;
      cov_1lxt9ntsas().s[115]++;
      this.emit('performanceAlert', alert);
    });
    /* istanbul ignore next */
    cov_1lxt9ntsas().s[116]++;
    this.performanceAnalytics.on('reportGenerated', report => {
      /* istanbul ignore next */
      cov_1lxt9ntsas().f[28]++;
      cov_1lxt9ntsas().s[117]++;
      this.emit('reportGenerated', report);
    });
  }
  /**
   * Cleanup all resources
   */
  async cleanup() {
    /* istanbul ignore next */
    cov_1lxt9ntsas().f[29]++;
    cov_1lxt9ntsas().s[118]++;
    try {
      /* istanbul ignore next */
      cov_1lxt9ntsas().s[119]++;
      if (this.isRunning) {
        /* istanbul ignore next */
        cov_1lxt9ntsas().b[5][0]++;
        cov_1lxt9ntsas().s[120]++;
        await this.stop();
      } else
      /* istanbul ignore next */
      {
        cov_1lxt9ntsas().b[5][1]++;
      }
      // Cleanup all components
      cov_1lxt9ntsas().s[121]++;
      await this.tunnelManager.cleanup();
      /* istanbul ignore next */
      cov_1lxt9ntsas().s[122]++;
      this.healthMonitor.cleanup();
      /* istanbul ignore next */
      cov_1lxt9ntsas().s[123]++;
      this.stateTracker.clearAllHistory();
      /* istanbul ignore next */
      cov_1lxt9ntsas().s[124]++;
      this.autoReconnect.cleanup();
      /* istanbul ignore next */
      cov_1lxt9ntsas().s[125]++;
      this.loadBalancer.cleanup();
      /* istanbul ignore next */
      cov_1lxt9ntsas().s[126]++;
      await this.failoverManager.cleanup();
      /* istanbul ignore next */
      cov_1lxt9ntsas().s[127]++;
      this.securityMonitor.cleanup();
      /* istanbul ignore next */
      cov_1lxt9ntsas().s[128]++;
      this.performanceAnalytics.cleanup();
      /* istanbul ignore next */
      cov_1lxt9ntsas().s[129]++;
      this.logger.info('Tunnel infrastructure cleanup completed');
    } catch (error) {
      /* istanbul ignore next */
      cov_1lxt9ntsas().s[130]++;
      this.logger.error('Error during tunnel infrastructure cleanup', error);
      /* istanbul ignore next */
      cov_1lxt9ntsas().s[131]++;
      throw error;
    }
  }
}
/* istanbul ignore next */
cov_1lxt9ntsas().s[132]++;
exports.TunnelInfrastructure = TunnelInfrastructure;
/**
 * Factory function to create tunnel infrastructure with Oracle Free Tier defaults
 */
function createOracleTunnelInfrastructure(logger, encryptionService, customConfig) {
  /* istanbul ignore next */
  cov_1lxt9ntsas().f[30]++;
  const defaultConfig =
  /* istanbul ignore next */
  (cov_1lxt9ntsas().s[133]++, {
    tunnelConfigs: [{
      oracleIP: '168.138.104.117',
      sshPort: 22,
      username:
      /* istanbul ignore next */
      (cov_1lxt9ntsas().b[6][0]++, process.env.ORACLE_SSH_USERNAME) ||
      /* istanbul ignore next */
      (cov_1lxt9ntsas().b[6][1]++, 'ubuntu'),
      privateKeyPath:
      /* istanbul ignore next */
      (cov_1lxt9ntsas().b[7][0]++, process.env.ORACLE_SSH_KEY_PATH) ||
      /* istanbul ignore next */
      (cov_1lxt9ntsas().b[7][1]++, '~/.ssh/oracle_key'),
      localPort: 8080,
      remotePort: 3000,
      keepAlive: true,
      compression: true,
      connectionTimeout: 30,
      serverAliveInterval: 60,
      serverAliveCountMax: 3
    }],
    healthMonitor: {
      checkInterval: 30000,
      maxLatency: 1000,
      maxPacketLoss: 5,
      minThroughput: 1024,
      failureThreshold: 3
    },
    autoReconnect: {
      enabled: true,
      initialRetryDelay: 5000,
      maxRetryDelay: 300000,
      maxRetryAttempts: 10,
      backoffMultiplier: 2
    },
    loadBalancer: {
      minActiveTunnels: 1,
      maxActiveTunnels: 3,
      strategy: tunnel_load_balancer_1.LoadBalancingStrategy.HEALTH_BASED,
      enableFailover: true,
      enableDynamicWeights: true
    },
    failover: {
      enabled: true,
      minBackupTunnels: 1,
      maxFailoverAttempts: 3,
      enableProactiveBackups: true
    },
    security: {
      enableTrafficMonitoring: true,
      enableIntrusionDetection: true,
      enableDataIntegrityChecking: true,
      enableAutoResponse: true
    },
    analytics: {
      collectionInterval: 60000,
      enableTrendAnalysis: true,
      enablePerformanceAlerts: true,
      enableAutoReporting: true
    },
    enableMonitoring: true
  });
  const mergedConfig =
  /* istanbul ignore next */
  (cov_1lxt9ntsas().s[134]++, {
    ...defaultConfig,
    ...customConfig,
    tunnelConfigs:
    /* istanbul ignore next */
    (cov_1lxt9ntsas().b[8][0]++, customConfig?.tunnelConfigs) ||
    /* istanbul ignore next */
    (cov_1lxt9ntsas().b[8][1]++, defaultConfig.tunnelConfigs)
  });
  /* istanbul ignore next */
  cov_1lxt9ntsas().s[135]++;
  return new TunnelInfrastructure(logger, encryptionService, mergedConfig);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,