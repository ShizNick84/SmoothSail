{"version":3,"names":["cov_1txzwp6zc9","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","events_1","require","logger_1","LLMFallbackManager","EventEmitter","modelManager","resourceMonitor","fallbackStrategies","circuitBreakers","Map","emergencyMode","isInitialized","fallbackHistory","maxHistorySize","CIRCUIT_BREAKER_CONFIG","failureThreshold","successThreshold","timeout","monitoringWindow","constructor","enabled","triggers","actions","tradingImpact","notificationLevel","initializeDefaultStrategies","setupEventListeners","logger","info","priority","conditions","threshold","operator","description","action","parameters","targetType","maxRetries","cooldownPeriod","cpuThreads","maxTokens","disableAI","notifyAdmin","clearCache","validateIntegrity","length","on","metrics","handleResourceEvent","memoryPressure","cpuUsage","error","handleModelError","modelName","initialize","availableModels","getAvailableModels","initializeCircuitBreaker","emit","set","state","failureCount","lastFailureTime","nextRetryTime","successCount","totalRequests","eventType","value","applicableStrategies","findApplicableStrategies","strategy","executeFallbackStrategy","recordFailure","message","fallbackError","applicable","filter","some","condition","sort","a","context","startTime","Date","now","isInCooldown","success","strategyUsed","actionTaken","previousState","newState","executionTime","result","executeAction","fallbackResult","recordFallbackResult","executeSwitchModel","executeReduceParameters","executeDisableAI","executeEmergencyMode","executeRestartModel","Error","currentModel","getCurrentActiveModel","targetModel","findSmallerModel","findFasterModel","findMoreAccurateModel","canUseModel","loadModel","previousModel","newModel","adjustments","parameterAdjustments","warn","aiDisabled","disableReason","unloadModel","modelRestarted","cacheCleared","modelSizes","currentSize","Infinity","model","modelSize","performanceHistory","getModelPerformanceHistory","fastestModel","fastestTime","performance","averageInferenceTime","mostAccurateModel","highestAccuracy","averageAccuracy","circuitBreaker","get","recordSuccess","push","slice","getFallbackHistory","limit","getCircuitBreakerStates","getEmergencyModeStatus","exitEmergencyMode","triggerFallback","strategyName","find","addFallbackStrategy","removeFallbackStrategy","index","findIndex","splice","getFallbackStrategies","shutdown","clear","exports"],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\ai\\fallback-manager.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * FALLBACK MANAGER - LLM FAILOVER AND RECOVERY SYSTEM\r\n * =============================================================================\r\n * \r\n * This module implements comprehensive fallback mechanisms for LLM operations\r\n * on Intel NUC hardware. It handles model failures, resource constraints,\r\n * and provides graceful degradation to ensure continuous trading operations.\r\n * \r\n * Key Features:\r\n * - Automatic model switching on failures\r\n * - Graceful degradation strategies\r\n * - Circuit breaker patterns for stability\r\n * - Emergency fallback to rule-based systems\r\n * - Performance-based model selection\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport { EventEmitter } from 'events';\r\nimport { logger } from '@/core/logging/logger';\r\nimport { ModelManager } from './model-manager';\r\nimport { LLMResourceMonitor } from './resource-monitor';\r\nimport type { LLMModelConfig } from './llm-engine';\r\n\r\n/**\r\n * Interface for fallback strategy configuration\r\n */\r\ninterface FallbackStrategy {\r\n  name: string;\r\n  priority: number; // 1-10, higher is preferred\r\n  conditions: FallbackCondition[];\r\n  action: FallbackAction;\r\n  maxRetries: number;\r\n  cooldownPeriod: number; // milliseconds\r\n  description: string;\r\n}\r\n\r\n/**\r\n * Interface for fallback conditions\r\n */\r\ninterface FallbackCondition {\r\n  type: 'MEMORY_PRESSURE' | 'CPU_OVERLOAD' | 'THERMAL_THROTTLING' | 'MODEL_ERROR' | 'TIMEOUT' | 'ACCURACY_DROP';\r\n  threshold: number;\r\n  operator: 'GT' | 'LT' | 'EQ' | 'GTE' | 'LTE';\r\n  description: string;\r\n}\r\n\r\n/**\r\n * Interface for fallback actions\r\n */\r\ninterface FallbackAction {\r\n  type: 'SWITCH_MODEL' | 'REDUCE_PARAMETERS' | 'DISABLE_AI' | 'EMERGENCY_MODE' | 'RESTART_MODEL';\r\n  parameters: Record<string, any>;\r\n  description: string;\r\n}\r\n\r\n/**\r\n * Interface for circuit breaker state\r\n */\r\ninterface CircuitBreakerState {\r\n  modelName: string;\r\n  state: 'CLOSED' | 'OPEN' | 'HALF_OPEN';\r\n  failureCount: number;\r\n  lastFailureTime: Date | null;\r\n  nextRetryTime: Date | null;\r\n  successCount: number;\r\n  totalRequests: number;\r\n}\r\n\r\n/**\r\n * Interface for fallback execution result\r\n */\r\ninterface FallbackResult {\r\n  success: boolean;\r\n  strategyUsed: string;\r\n  actionTaken: string;\r\n  previousState: any;\r\n  newState: any;\r\n  executionTime: number;\r\n  error?: string;\r\n}\r\n\r\n/**\r\n * Interface for emergency mode configuration\r\n */\r\ninterface EmergencyModeConfig {\r\n  enabled: boolean;\r\n  triggers: string[];\r\n  actions: string[];\r\n  tradingImpact: 'NONE' | 'REDUCED' | 'SUSPENDED';\r\n  notificationLevel: 'INFO' | 'WARNING' | 'CRITICAL';\r\n}\r\n\r\n/**\r\n * Fallback Manager class for LLM operations\r\n * Provides comprehensive failover and recovery mechanisms\r\n */\r\nexport class LLMFallbackManager extends EventEmitter {\r\n  private modelManager: ModelManager;\r\n  private resourceMonitor: LLMResourceMonitor;\r\n  private fallbackStrategies: FallbackStrategy[] = [];\r\n  private circuitBreakers: Map<string, CircuitBreakerState> = new Map();\r\n  private emergencyMode: EmergencyModeConfig;\r\n  private isInitialized: boolean = false;\r\n  private fallbackHistory: FallbackResult[] = [];\r\n  private maxHistorySize: number = 100;\r\n\r\n  // Circuit breaker thresholds\r\n  private readonly CIRCUIT_BREAKER_CONFIG = {\r\n    failureThreshold: 5, // Open circuit after 5 failures\r\n    successThreshold: 3, // Close circuit after 3 successes in half-open state\r\n    timeout: 60000, // 1 minute timeout before trying half-open\r\n    monitoringWindow: 300000 // 5 minutes monitoring window\r\n  };\r\n\r\n  constructor(modelManager: ModelManager, resourceMonitor: LLMResourceMonitor) {\r\n    super();\r\n    this.modelManager = modelManager;\r\n    this.resourceMonitor = resourceMonitor;\r\n    \r\n    // Default emergency mode configuration\r\n    this.emergencyMode = {\r\n      enabled: false,\r\n      triggers: [],\r\n      actions: [],\r\n      tradingImpact: 'NONE',\r\n      notificationLevel: 'INFO'\r\n    };\r\n\r\n    this.initializeDefaultStrategies();\r\n    this.setupEventListeners();\r\n\r\n    logger.info('üõ°Ô∏è LLM Fallback Manager initialized');\r\n  }\r\n\r\n  /**\r\n   * Initialize default fallback strategies\r\n   */\r\n  private initializeDefaultStrategies(): void {\r\n    this.fallbackStrategies = [\r\n      // Memory pressure fallback\r\n      {\r\n        name: 'memory_pressure_model_switch',\r\n        priority: 9,\r\n        conditions: [\r\n          {\r\n            type: 'MEMORY_PRESSURE',\r\n            threshold: 80, // 80% memory usage\r\n            operator: 'GT',\r\n            description: 'Memory usage above 80%'\r\n          }\r\n        ],\r\n        action: {\r\n          type: 'SWITCH_MODEL',\r\n          parameters: { targetType: 'smaller' },\r\n          description: 'Switch to smaller model'\r\n        },\r\n        maxRetries: 3,\r\n        cooldownPeriod: 30000, // 30 seconds\r\n        description: 'Switch to smaller model when memory pressure is high'\r\n      },\r\n\r\n      // CPU overload fallback\r\n      {\r\n        name: 'cpu_overload_parameter_reduction',\r\n        priority: 8,\r\n        conditions: [\r\n          {\r\n            type: 'CPU_OVERLOAD',\r\n            threshold: 90, // 90% CPU usage\r\n            operator: 'GT',\r\n            description: 'CPU usage above 90%'\r\n          }\r\n        ],\r\n        action: {\r\n          type: 'REDUCE_PARAMETERS',\r\n          parameters: { \r\n            cpuThreads: 'reduce_by_half',\r\n            maxTokens: 'reduce_by_25_percent'\r\n          },\r\n          description: 'Reduce CPU threads and token limits'\r\n        },\r\n        maxRetries: 2,\r\n        cooldownPeriod: 15000, // 15 seconds\r\n        description: 'Reduce model parameters when CPU is overloaded'\r\n      },\r\n\r\n      // Thermal throttling fallback\r\n      {\r\n        name: 'thermal_throttling_emergency',\r\n        priority: 10,\r\n        conditions: [\r\n          {\r\n            type: 'THERMAL_THROTTLING',\r\n            threshold: 1, // Any thermal throttling\r\n            operator: 'GTE',\r\n            description: 'Thermal throttling detected'\r\n          }\r\n        ],\r\n        action: {\r\n          type: 'EMERGENCY_MODE',\r\n          parameters: { \r\n            disableAI: true,\r\n            notifyAdmin: true,\r\n            tradingImpact: 'REDUCED'\r\n          },\r\n          description: 'Enter emergency mode due to thermal issues'\r\n        },\r\n        maxRetries: 1,\r\n        cooldownPeriod: 120000, // 2 minutes\r\n        description: 'Emergency response to thermal throttling'\r\n      },\r\n\r\n      // Model error fallback\r\n      {\r\n        name: 'model_error_restart',\r\n        priority: 7,\r\n        conditions: [\r\n          {\r\n            type: 'MODEL_ERROR',\r\n            threshold: 3, // 3 consecutive errors\r\n            operator: 'GTE',\r\n            description: 'Multiple model errors detected'\r\n          }\r\n        ],\r\n        action: {\r\n          type: 'RESTART_MODEL',\r\n          parameters: { \r\n            clearCache: true,\r\n            validateIntegrity: true\r\n          },\r\n          description: 'Restart model with cache clearing'\r\n        },\r\n        maxRetries: 2,\r\n        cooldownPeriod: 60000, // 1 minute\r\n        description: 'Restart model after multiple errors'\r\n      },\r\n\r\n      // Timeout fallback\r\n      {\r\n        name: 'timeout_model_switch',\r\n        priority: 6,\r\n        conditions: [\r\n          {\r\n            type: 'TIMEOUT',\r\n            threshold: 10000, // 10 seconds\r\n            operator: 'GT',\r\n            description: 'Inference timeout exceeded'\r\n          }\r\n        ],\r\n        action: {\r\n          type: 'SWITCH_MODEL',\r\n          parameters: { targetType: 'faster' },\r\n          description: 'Switch to faster model'\r\n        },\r\n        maxRetries: 2,\r\n        cooldownPeriod: 45000, // 45 seconds\r\n        description: 'Switch to faster model on timeout'\r\n      },\r\n\r\n      // Accuracy drop fallback\r\n      {\r\n        name: 'accuracy_drop_model_switch',\r\n        priority: 5,\r\n        conditions: [\r\n          {\r\n            type: 'ACCURACY_DROP',\r\n            threshold: 70, // Below 70% accuracy\r\n            operator: 'LT',\r\n            description: 'Model accuracy below acceptable threshold'\r\n          }\r\n        ],\r\n        action: {\r\n          type: 'SWITCH_MODEL',\r\n          parameters: { targetType: 'more_accurate' },\r\n          description: 'Switch to more accurate model'\r\n        },\r\n        maxRetries: 2,\r\n        cooldownPeriod: 300000, // 5 minutes\r\n        description: 'Switch to more accurate model when performance drops'\r\n      }\r\n    ];\r\n\r\n    logger.info(`üõ°Ô∏è Initialized ${this.fallbackStrategies.length} fallback strategies`);\r\n  }\r\n\r\n  /**\r\n   * Set up event listeners for monitoring systems\r\n   */\r\n  private setupEventListeners(): void {\r\n    // Listen to resource monitor events\r\n    this.resourceMonitor.on('criticalMemoryPressure', (metrics) => {\r\n      this.handleResourceEvent('MEMORY_PRESSURE', metrics.memoryPressure === 'CRITICAL' ? 100 : 80);\r\n    });\r\n\r\n    this.resourceMonitor.on('criticalCpuUsage', (metrics) => {\r\n      this.handleResourceEvent('CPU_OVERLOAD', metrics.cpuUsage);\r\n    });\r\n\r\n    this.resourceMonitor.on('thermalThrottling', (metrics) => {\r\n      this.handleResourceEvent('THERMAL_THROTTLING', 1);\r\n    });\r\n\r\n    // Listen to model manager events\r\n    this.modelManager.on('modelError', (error) => {\r\n      this.handleModelError(error.modelName, error.error);\r\n    });\r\n\r\n    logger.info('üîó Event listeners set up for fallback management');\r\n  }\r\n\r\n  /**\r\n   * Initialize the fallback manager\r\n   */\r\n  public async initialize(): Promise<void> {\r\n    try {\r\n      logger.info('üöÄ Initializing LLM Fallback Manager...');\r\n\r\n      // Initialize circuit breakers for available models\r\n      const availableModels = this.modelManager.getAvailableModels();\r\n      for (const modelName of availableModels) {\r\n        this.initializeCircuitBreaker(modelName);\r\n      }\r\n\r\n      this.isInitialized = true;\r\n      logger.info('‚úÖ LLM Fallback Manager initialized successfully');\r\n\r\n      this.emit('initialized');\r\n\r\n    } catch (error) {\r\n      logger.error('‚ùå Failed to initialize LLM Fallback Manager:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialize circuit breaker for a model\r\n   */\r\n  private initializeCircuitBreaker(modelName: string): void {\r\n    this.circuitBreakers.set(modelName, {\r\n      modelName,\r\n      state: 'CLOSED',\r\n      failureCount: 0,\r\n      lastFailureTime: null,\r\n      nextRetryTime: null,\r\n      successCount: 0,\r\n      totalRequests: 0\r\n    });\r\n\r\n    logger.info(`üîå Circuit breaker initialized for model: ${modelName}`);\r\n  }\r\n\r\n  /**\r\n   * Handle resource-related events\r\n   */\r\n  private async handleResourceEvent(eventType: string, value: number): Promise<void> {\r\n    try {\r\n      logger.info(`‚ö†Ô∏è Resource event detected: ${eventType} = ${value}`);\r\n\r\n      // Find applicable fallback strategies\r\n      const applicableStrategies = this.findApplicableStrategies(eventType as any, value);\r\n\r\n      if (applicableStrategies.length === 0) {\r\n        logger.info('‚ÑπÔ∏è No applicable fallback strategies found');\r\n        return;\r\n      }\r\n\r\n      // Execute the highest priority strategy\r\n      const strategy = applicableStrategies[0];\r\n      await this.executeFallbackStrategy(strategy, { eventType, value });\r\n\r\n    } catch (error) {\r\n      logger.error('‚ùå Error handling resource event:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle model errors\r\n   */\r\n  private async handleModelError(modelName: string, error: Error): Promise<void> {\r\n    try {\r\n      logger.error(`‚ùå Model error detected for ${modelName}:`, error);\r\n\r\n      // Update circuit breaker\r\n      await this.recordFailure(modelName);\r\n\r\n      // Find applicable fallback strategies\r\n      const applicableStrategies = this.findApplicableStrategies('MODEL_ERROR', 1);\r\n\r\n      if (applicableStrategies.length > 0) {\r\n        const strategy = applicableStrategies[0];\r\n        await this.executeFallbackStrategy(strategy, { modelName, error: error.message });\r\n      }\r\n\r\n    } catch (fallbackError) {\r\n      logger.error('‚ùå Error in model error handling:', fallbackError);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Find applicable fallback strategies for given conditions\r\n   */\r\n  private findApplicableStrategies(eventType: FallbackCondition['type'], value: number): FallbackStrategy[] {\r\n    const applicable = this.fallbackStrategies.filter(strategy => {\r\n      return strategy.conditions.some(condition => {\r\n        if (condition.type !== eventType) return false;\r\n\r\n        switch (condition.operator) {\r\n          case 'GT': return value > condition.threshold;\r\n          case 'LT': return value < condition.threshold;\r\n          case 'EQ': return value === condition.threshold;\r\n          case 'GTE': return value >= condition.threshold;\r\n          case 'LTE': return value <= condition.threshold;\r\n          default: return false;\r\n        }\r\n      });\r\n    });\r\n\r\n    // Sort by priority (highest first)\r\n    return applicable.sort((a, b) => b.priority - a.priority);\r\n  }\r\n\r\n  /**\r\n   * Execute a fallback strategy\r\n   */\r\n  private async executeFallbackStrategy(\r\n    strategy: FallbackStrategy, \r\n    context: Record<string, any>\r\n  ): Promise<FallbackResult> {\r\n    const startTime = Date.now();\r\n    \r\n    try {\r\n      logger.info(`üîÑ Executing fallback strategy: ${strategy.name}`);\r\n\r\n      // Check cooldown period\r\n      if (await this.isInCooldown(strategy)) {\r\n        logger.info(`‚è≥ Strategy ${strategy.name} is in cooldown period`);\r\n        return {\r\n          success: false,\r\n          strategyUsed: strategy.name,\r\n          actionTaken: 'SKIPPED_COOLDOWN',\r\n          previousState: context,\r\n          newState: context,\r\n          executionTime: Date.now() - startTime,\r\n          error: 'Strategy in cooldown period'\r\n        };\r\n      }\r\n\r\n      // Execute the action\r\n      const result = await this.executeAction(strategy.action, context);\r\n\r\n      const fallbackResult: FallbackResult = {\r\n        success: result.success,\r\n        strategyUsed: strategy.name,\r\n        actionTaken: strategy.action.type,\r\n        previousState: context,\r\n        newState: result.newState,\r\n        executionTime: Date.now() - startTime,\r\n        error: result.error\r\n      };\r\n\r\n      // Record the result\r\n      this.recordFallbackResult(fallbackResult);\r\n\r\n      if (result.success) {\r\n        logger.info(`‚úÖ Fallback strategy ${strategy.name} executed successfully`);\r\n        this.emit('fallbackSuccess', fallbackResult);\r\n      } else {\r\n        logger.error(`‚ùå Fallback strategy ${strategy.name} failed:`, result.error);\r\n        this.emit('fallbackFailure', fallbackResult);\r\n      }\r\n\r\n      return fallbackResult;\r\n\r\n    } catch (error) {\r\n      const fallbackResult: FallbackResult = {\r\n        success: false,\r\n        strategyUsed: strategy.name,\r\n        actionTaken: strategy.action.type,\r\n        previousState: context,\r\n        newState: context,\r\n        executionTime: Date.now() - startTime,\r\n        error: error.message\r\n      };\r\n\r\n      this.recordFallbackResult(fallbackResult);\r\n      logger.error(`‚ùå Error executing fallback strategy ${strategy.name}:`, error);\r\n      \r\n      return fallbackResult;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Execute a specific fallback action\r\n   */\r\n  private async executeAction(action: FallbackAction, context: Record<string, any>): Promise<{\r\n    success: boolean;\r\n    newState: any;\r\n    error?: string;\r\n  }> {\r\n    try {\r\n      switch (action.type) {\r\n        case 'SWITCH_MODEL':\r\n          return await this.executeSwitchModel(action.parameters, context);\r\n          \r\n        case 'REDUCE_PARAMETERS':\r\n          return await this.executeReduceParameters(action.parameters, context);\r\n          \r\n        case 'DISABLE_AI':\r\n          return await this.executeDisableAI(action.parameters, context);\r\n          \r\n        case 'EMERGENCY_MODE':\r\n          return await this.executeEmergencyMode(action.parameters, context);\r\n          \r\n        case 'RESTART_MODEL':\r\n          return await this.executeRestartModel(action.parameters, context);\r\n          \r\n        default:\r\n          throw new Error(`Unknown action type: ${action.type}`);\r\n      }\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        newState: context,\r\n        error: error.message\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Execute model switching action\r\n   */\r\n  private async executeSwitchModel(parameters: any, context: any): Promise<{\r\n    success: boolean;\r\n    newState: any;\r\n    error?: string;\r\n  }> {\r\n    try {\r\n      const currentModel = this.modelManager.getCurrentActiveModel();\r\n      let targetModel: string | null = null;\r\n\r\n      // Determine target model based on parameters\r\n      if (parameters.targetType === 'smaller') {\r\n        targetModel = await this.findSmallerModel(currentModel);\r\n      } else if (parameters.targetType === 'faster') {\r\n        targetModel = await this.findFasterModel(currentModel);\r\n      } else if (parameters.targetType === 'more_accurate') {\r\n        targetModel = await this.findMoreAccurateModel(currentModel);\r\n      }\r\n\r\n      if (!targetModel) {\r\n        return {\r\n          success: false,\r\n          newState: context,\r\n          error: 'No suitable alternative model found'\r\n        };\r\n      }\r\n\r\n      // Check circuit breaker for target model\r\n      if (!this.canUseModel(targetModel)) {\r\n        return {\r\n          success: false,\r\n          newState: context,\r\n          error: `Target model ${targetModel} circuit breaker is open`\r\n        };\r\n      }\r\n\r\n      // Perform the switch\r\n      await this.modelManager.loadModel(targetModel);\r\n\r\n      logger.info(`üîÑ Successfully switched from ${currentModel} to ${targetModel}`);\r\n\r\n      return {\r\n        success: true,\r\n        newState: {\r\n          ...context,\r\n          previousModel: currentModel,\r\n          newModel: targetModel\r\n        }\r\n      };\r\n\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        newState: context,\r\n        error: error.message\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Execute parameter reduction action\r\n   */\r\n  private async executeReduceParameters(parameters: any, context: any): Promise<{\r\n    success: boolean;\r\n    newState: any;\r\n    error?: string;\r\n  }> {\r\n    try {\r\n      // This would adjust model parameters in production\r\n      logger.info('üîß Reducing model parameters:', parameters);\r\n\r\n      // Mock implementation - in production, this would actually adjust parameters\r\n      const adjustments = {\r\n        cpuThreads: parameters.cpuThreads === 'reduce_by_half' ? 'reduced by 50%' : 'adjusted',\r\n        maxTokens: parameters.maxTokens === 'reduce_by_25_percent' ? 'reduced by 25%' : 'adjusted'\r\n      };\r\n\r\n      return {\r\n        success: true,\r\n        newState: {\r\n          ...context,\r\n          parameterAdjustments: adjustments\r\n        }\r\n      };\r\n\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        newState: context,\r\n        error: error.message\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Execute disable AI action\r\n   */\r\n  private async executeDisableAI(parameters: any, context: any): Promise<{\r\n    success: boolean;\r\n    newState: any;\r\n    error?: string;\r\n  }> {\r\n    try {\r\n      logger.warn('‚ö†Ô∏è Disabling AI operations due to fallback trigger');\r\n\r\n      // This would disable AI operations in production\r\n      // For now, just log the action\r\n      \r\n      return {\r\n        success: true,\r\n        newState: {\r\n          ...context,\r\n          aiDisabled: true,\r\n          disableReason: 'Fallback trigger'\r\n        }\r\n      };\r\n\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        newState: context,\r\n        error: error.message\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Execute emergency mode action\r\n   */\r\n  private async executeEmergencyMode(parameters: any, context: any): Promise<{\r\n    success: boolean;\r\n    newState: any;\r\n    error?: string;\r\n  }> {\r\n    try {\r\n      logger.error('üö® ENTERING EMERGENCY MODE');\r\n\r\n      this.emergencyMode = {\r\n        enabled: true,\r\n        triggers: [context.eventType || 'unknown'],\r\n        actions: ['AI_DISABLED', 'TRADING_REDUCED'],\r\n        tradingImpact: parameters.tradingImpact || 'REDUCED',\r\n        notificationLevel: 'CRITICAL'\r\n      };\r\n\r\n      // Emit emergency mode event\r\n      this.emit('emergencyMode', this.emergencyMode);\r\n\r\n      return {\r\n        success: true,\r\n        newState: {\r\n          ...context,\r\n          emergencyMode: this.emergencyMode\r\n        }\r\n      };\r\n\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        newState: context,\r\n        error: error.message\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Execute model restart action\r\n   */\r\n  private async executeRestartModel(parameters: any, context: any): Promise<{\r\n    success: boolean;\r\n    newState: any;\r\n    error?: string;\r\n  }> {\r\n    try {\r\n      const currentModel = this.modelManager.getCurrentActiveModel();\r\n      \r\n      if (!currentModel) {\r\n        return {\r\n          success: false,\r\n          newState: context,\r\n          error: 'No active model to restart'\r\n        };\r\n      }\r\n\r\n      logger.info(`üîÑ Restarting model: ${currentModel}`);\r\n\r\n      // Unload and reload the model\r\n      await this.modelManager.unloadModel(currentModel);\r\n      \r\n      if (parameters.clearCache) {\r\n        // Clear any cached data\r\n        logger.info('üßπ Clearing model cache');\r\n      }\r\n\r\n      await this.modelManager.loadModel(currentModel);\r\n\r\n      return {\r\n        success: true,\r\n        newState: {\r\n          ...context,\r\n          modelRestarted: currentModel,\r\n          cacheCleared: parameters.clearCache\r\n        }\r\n      };\r\n\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        newState: context,\r\n        error: error.message\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Find a smaller model than the current one\r\n   */\r\n  private async findSmallerModel(currentModel: string | null): Promise<string | null> {\r\n    const availableModels = this.modelManager.getAvailableModels();\r\n    \r\n    // Mock implementation - in production, this would check actual model sizes\r\n    const modelSizes = {\r\n      'phi-3-mini-4k-instruct-q4': 2048,\r\n      'llama-3.2-1b-instruct-q8': 1536,\r\n      'tinyllama-1.1b-chat-q4': 768\r\n    };\r\n\r\n    const currentSize = currentModel ? modelSizes[currentModel] || 0 : Infinity;\r\n    \r\n    for (const model of availableModels) {\r\n      const modelSize = modelSizes[model] || 0;\r\n      if (modelSize < currentSize && this.canUseModel(model)) {\r\n        return model;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Find a faster model than the current one\r\n   */\r\n  private async findFasterModel(currentModel: string | null): Promise<string | null> {\r\n    // Mock implementation - in production, this would check actual performance metrics\r\n    const performanceHistory = this.modelManager.getModelPerformanceHistory();\r\n    \r\n    let fastestModel = null;\r\n    let fastestTime = Infinity;\r\n\r\n    for (const performance of performanceHistory) {\r\n      if (performance.modelName !== currentModel && \r\n          performance.averageInferenceTime < fastestTime &&\r\n          this.canUseModel(performance.modelName)) {\r\n        fastestModel = performance.modelName;\r\n        fastestTime = performance.averageInferenceTime;\r\n      }\r\n    }\r\n\r\n    return fastestModel;\r\n  }\r\n\r\n  /**\r\n   * Find a more accurate model than the current one\r\n   */\r\n  private async findMoreAccurateModel(currentModel: string | null): Promise<string | null> {\r\n    // Mock implementation - in production, this would check actual accuracy metrics\r\n    const performanceHistory = this.modelManager.getModelPerformanceHistory();\r\n    \r\n    let mostAccurateModel = null;\r\n    let highestAccuracy = 0;\r\n\r\n    for (const performance of performanceHistory) {\r\n      if (performance.modelName !== currentModel && \r\n          performance.averageAccuracy > highestAccuracy &&\r\n          this.canUseModel(performance.modelName)) {\r\n        mostAccurateModel = performance.modelName;\r\n        highestAccuracy = performance.averageAccuracy;\r\n      }\r\n    }\r\n\r\n    return mostAccurateModel;\r\n  }\r\n\r\n  /**\r\n   * Check if a model can be used (circuit breaker check)\r\n   */\r\n  private canUseModel(modelName: string): boolean {\r\n    const circuitBreaker = this.circuitBreakers.get(modelName);\r\n    \r\n    if (!circuitBreaker) {\r\n      return true; // No circuit breaker, assume it's usable\r\n    }\r\n\r\n    if (circuitBreaker.state === 'CLOSED') {\r\n      return true;\r\n    }\r\n\r\n    if (circuitBreaker.state === 'OPEN') {\r\n      // Check if we can try half-open\r\n      if (circuitBreaker.nextRetryTime && new Date() >= circuitBreaker.nextRetryTime) {\r\n        circuitBreaker.state = 'HALF_OPEN';\r\n        circuitBreaker.successCount = 0;\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n\r\n    if (circuitBreaker.state === 'HALF_OPEN') {\r\n      return true; // Allow limited requests in half-open state\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Record a failure for circuit breaker\r\n   */\r\n  private async recordFailure(modelName: string): Promise<void> {\r\n    const circuitBreaker = this.circuitBreakers.get(modelName);\r\n    \r\n    if (!circuitBreaker) {\r\n      this.initializeCircuitBreaker(modelName);\r\n      return;\r\n    }\r\n\r\n    circuitBreaker.failureCount++;\r\n    circuitBreaker.lastFailureTime = new Date();\r\n    circuitBreaker.totalRequests++;\r\n\r\n    // Check if we should open the circuit\r\n    if (circuitBreaker.failureCount >= this.CIRCUIT_BREAKER_CONFIG.failureThreshold) {\r\n      circuitBreaker.state = 'OPEN';\r\n      circuitBreaker.nextRetryTime = new Date(Date.now() + this.CIRCUIT_BREAKER_CONFIG.timeout);\r\n      \r\n      logger.warn(`üîå Circuit breaker OPENED for model: ${modelName}`);\r\n      this.emit('circuitBreakerOpened', { modelName, circuitBreaker });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Record a success for circuit breaker\r\n   */\r\n  private async recordSuccess(modelName: string): Promise<void> {\r\n    const circuitBreaker = this.circuitBreakers.get(modelName);\r\n    \r\n    if (!circuitBreaker) {\r\n      return;\r\n    }\r\n\r\n    circuitBreaker.successCount++;\r\n    circuitBreaker.totalRequests++;\r\n\r\n    if (circuitBreaker.state === 'HALF_OPEN') {\r\n      if (circuitBreaker.successCount >= this.CIRCUIT_BREAKER_CONFIG.successThreshold) {\r\n        circuitBreaker.state = 'CLOSED';\r\n        circuitBreaker.failureCount = 0;\r\n        \r\n        logger.info(`üîå Circuit breaker CLOSED for model: ${modelName}`);\r\n        this.emit('circuitBreakerClosed', { modelName, circuitBreaker });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if a strategy is in cooldown period\r\n   */\r\n  private async isInCooldown(strategy: FallbackStrategy): Promise<boolean> {\r\n    // This would check actual cooldown state in production\r\n    // For now, return false (no cooldown)\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Record fallback result in history\r\n   */\r\n  private recordFallbackResult(result: FallbackResult): void {\r\n    this.fallbackHistory.push(result);\r\n    \r\n    if (this.fallbackHistory.length > this.maxHistorySize) {\r\n      this.fallbackHistory = this.fallbackHistory.slice(-this.maxHistorySize);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get fallback history\r\n   */\r\n  public getFallbackHistory(limit?: number): FallbackResult[] {\r\n    if (limit) {\r\n      return this.fallbackHistory.slice(-limit);\r\n    }\r\n    return [...this.fallbackHistory];\r\n  }\r\n\r\n  /**\r\n   * Get circuit breaker states\r\n   */\r\n  public getCircuitBreakerStates(): Map<string, CircuitBreakerState> {\r\n    return new Map(this.circuitBreakers);\r\n  }\r\n\r\n  /**\r\n   * Get emergency mode status\r\n   */\r\n  public getEmergencyModeStatus(): EmergencyModeConfig {\r\n    return { ...this.emergencyMode };\r\n  }\r\n\r\n  /**\r\n   * Exit emergency mode\r\n   */\r\n  public async exitEmergencyMode(): Promise<void> {\r\n    logger.info('üîÑ Exiting emergency mode');\r\n    \r\n    this.emergencyMode = {\r\n      enabled: false,\r\n      triggers: [],\r\n      actions: [],\r\n      tradingImpact: 'NONE',\r\n      notificationLevel: 'INFO'\r\n    };\r\n\r\n    this.emit('emergencyModeExited');\r\n  }\r\n\r\n  /**\r\n   * Manually trigger a fallback strategy\r\n   */\r\n  public async triggerFallback(strategyName: string, context: Record<string, any> = {}): Promise<FallbackResult> {\r\n    const strategy = this.fallbackStrategies.find(s => s.name === strategyName);\r\n    \r\n    if (!strategy) {\r\n      throw new Error(`Fallback strategy not found: ${strategyName}`);\r\n    }\r\n\r\n    return await this.executeFallbackStrategy(strategy, context);\r\n  }\r\n\r\n  /**\r\n   * Add custom fallback strategy\r\n   */\r\n  public addFallbackStrategy(strategy: FallbackStrategy): void {\r\n    this.fallbackStrategies.push(strategy);\r\n    this.fallbackStrategies.sort((a, b) => b.priority - a.priority);\r\n    \r\n    logger.info(`‚ûï Added custom fallback strategy: ${strategy.name}`);\r\n  }\r\n\r\n  /**\r\n   * Remove fallback strategy\r\n   */\r\n  public removeFallbackStrategy(strategyName: string): boolean {\r\n    const index = this.fallbackStrategies.findIndex(s => s.name === strategyName);\r\n    \r\n    if (index >= 0) {\r\n      this.fallbackStrategies.splice(index, 1);\r\n      logger.info(`‚ûñ Removed fallback strategy: ${strategyName}`);\r\n      return true;\r\n    }\r\n    \r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Get all fallback strategies\r\n   */\r\n  public getFallbackStrategies(): FallbackStrategy[] {\r\n    return [...this.fallbackStrategies];\r\n  }\r\n\r\n  /**\r\n   * Shutdown the fallback manager\r\n   */\r\n  public async shutdown(): Promise<void> {\r\n    try {\r\n      logger.info('üõë Shutting down LLM Fallback Manager...');\r\n\r\n      // Clear all data\r\n      this.circuitBreakers.clear();\r\n      this.fallbackHistory = [];\r\n      this.fallbackStrategies = [];\r\n\r\n      this.isInitialized = false;\r\n      \r\n      logger.info('‚úÖ LLM Fallback Manager shutdown completed');\r\n\r\n    } catch (error) {\r\n      logger.error('‚ùå Error during LLM Fallback Manager shutdown:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\n// Export types\r\nexport type {\r\n  FallbackStrategy,\r\n  FallbackCondition,\r\n  FallbackAction,\r\n  CircuitBreakerState,\r\n  FallbackResult,\r\n  EmergencyModeConfig\r\n};"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA,SAAAA,ecAAA;MAAAC,IAAA;MAAAC,QAAA;MAAAC,KAAA;MAAAC,OAAA;MAAAC,cAAA;MAAAC,OAAA;IAAA;IAAAC,eAAA;IAAA5B,IAAA;EAAA;EAAA,IAAA6B,QAAA,GAAA5B,MAAA,CAAAE,GAAA,MAAAF,MAAA,CAAAE,GAAA;EAAA,KAAA0B,QAAA,CAAA9B,IAAA,KAAA8B,QAAA,CAAA9B,IAAA,EAAAC,IAAA,KAAAA,IAAA;IAAA6B,QAAA,CAAA9B,IAAA,IAAAK,YAAA;EAAA;EAAA,IAAA0B,cAAA,GAAAD,QAAA,CAAA9B,IAAA;EAAA;;;;;;;;;;;;;;;;AAsBA,MAAAgC,QAAA;AAAA;AAAA,CAAAjC,cAAA,GAAAoB,CAAA,OAAAc,OAAA;AACA,MAAAC,QAAA;AAAA;AAAA,CAAAnC,cAAA,GAAAoB,CAAA,OAAAc,OAAA;AA0EA;;;;AAIA,MAAaE,kBAAmB;AAAA;AAAA,CAAQH,QAAA,CAAAI,YAAY;EAC1CC,YAAY;EACZC,eAAe;EACfC,kBAAkB;EAAA;EAAA,CAAAxC,cAAA,GAAAoB,CAAA,OAAuB,EAAE;EAC3CqB,eAAe;EAAA;EAAA,CAAAzC,cAAA,GAAAoB,CAAA,OAAqC,IAAIsB,GAAG,EAAE;EAC7DC,aAAa;EACbC,aAAa;EAAA;EAAA,CAAA5C,cAAA,GAAAoB,CAAA,OAAY,KAAK;EAC9ByB,eAAe;EAAA;EAAA,CAAA7C,cAAA,GAAAoB,CAAA,OAAqB,EAAE;EACtC0B,cAAc;EAAA;EAAA,CAAA9C,cAAA,GAAAoB,CAAA,OAAW,GAAG;EAEpC;EACiB2B,sBAAsB;EAAA;EAAA,CAAA/C,cAAA,GAAAoB,CAAA,OAAG;IACxC4B,gBAAgB,EAAE,CAAC;IAAE;IACrBC,gBAAgB,EAAE,CAAC;IAAE;IACrBC,OAAO,EAAE,KAAK;IAAE;IAChBC,gBAAgB,EAAE,MAAM,CAAC;GAC1B;EAEDC,YAAYd,YAA0B,EAAEC,eAAmC;IAAA;IAAAvC,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IACzE,KAAK,EAAE;IAAC;IAAApB,cAAA,GAAAoB,CAAA;IACR,IAAI,CAACkB,YAAY,GAAGA,YAAY;IAAC;IAAAtC,cAAA,GAAAoB,CAAA;IACjC,IAAI,CAACmB,eAAe,GAAGA,eAAe;IAEtC;IAAA;IAAAvC,cAAA,GAAAoB,CAAA;IACA,IAAI,CAACuB,aAAa,GAAG;MACnBU,OAAO,EAAE,KAAK;MACdC,QAAQ,EAAE,EAAE;MACZC,OAAO,EAAE,EAAE;MACXC,aAAa,EAAE,MAAM;MACrBC,iBAAiB,EAAE;KACpB;IAAC;IAAAzD,cAAA,GAAAoB,CAAA;IAEF,IAAI,CAACsC,2BAA2B,EAAE;IAAC;IAAA1D,cAAA,GAAAoB,CAAA;IACnC,IAAI,CAACuC,mBAAmB,EAAE;IAAC;IAAA3D,cAAA,GAAAoB,CAAA;IAE3Be,QAAA,CAAAyB,MAAM,CAACC,IAAI,CAAC,sCAAsC,CAAC;EACrD;EAEA;;;EAGQH,2BAA2BA,CAAA;IAAA;IAAA1D,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IACjC,IAAI,CAACoB,kBAAkB,GAAG;IACxB;IACA;MACE3B,IAAI,EAAE,8BAA8B;MACpCiD,QAAQ,EAAE,CAAC;MACXC,UAAU,EAAE,CACV;QACE9C,IAAI,EAAE,iBAAiB;QACvB+C,SAAS,EAAE,EAAE;QAAE;QACfC,QAAQ,EAAE,IAAI;QACdC,WAAW,EAAE;OACd,CACF;MACDC,MAAM,EAAE;QACNlD,IAAI,EAAE,cAAc;QACpBmD,UAAU,EAAE;UAAEC,UAAU,EAAE;QAAS,CAAE;QACrCH,WAAW,EAAE;OACd;MACDI,UAAU,EAAE,CAAC;MACbC,cAAc,EAAE,KAAK;MAAE;MACvBL,WAAW,EAAE;KACd;IAED;IACA;MACErD,IAAI,EAAE,kCAAkC;MACxCiD,QAAQ,EAAE,CAAC;MACXC,UAAU,EAAE,CACV;QACE9C,IAAI,EAAE,cAAc;QACpB+C,SAAS,EAAE,EAAE;QAAE;QACfC,QAAQ,EAAE,IAAI;QACdC,WAAW,EAAE;OACd,CACF;MACDC,MAAM,EAAE;QACNlD,IAAI,EAAE,mBAAmB;QACzBmD,UAAU,EAAE;UACVI,UAAU,EAAE,gBAAgB;UAC5BC,SAAS,EAAE;SACZ;QACDP,WAAW,EAAE;OACd;MACDI,UAAU,EAAE,CAAC;MACbC,cAAc,EAAE,KAAK;MAAE;MACvBL,WAAW,EAAE;KACd;IAED;IACA;MACErD,IAAI,EAAE,8BAA8B;MACpCiD,QAAQ,EAAE,EAAE;MACZC,UAAU,EAAE,CACV;QACE9C,IAAI,EAAE,oBAAoB;QAC1B+C,SAAS,EAAE,CAAC;QAAE;QACdC,QAAQ,EAAE,KAAK;QACfC,WAAW,EAAE;OACd,CACF;MACDC,MAAM,EAAE;QACNlD,IAAI,EAAE,gBAAgB;QACtBmD,UAAU,EAAE;UACVM,SAAS,EAAE,IAAI;UACfC,WAAW,EAAE,IAAI;UACjBnB,aAAa,EAAE;SAChB;QACDU,WAAW,EAAE;OACd;MACDI,UAAU,EAAE,CAAC;MACbC,cAAc,EAAE,MAAM;MAAE;MACxBL,WAAW,EAAE;KACd;IAED;IACA;MACErD,IAAI,EAAE,qBAAqB;MAC3BiD,QAAQ,EAAE,CAAC;MACXC,UAAU,EAAE,CACV;QACE9C,IAAI,EAAE,aAAa;QACnB+C,SAAS,EAAE,CAAC;QAAE;QACdC,QAAQ,EAAE,KAAK;QACfC,WAAW,EAAE;OACd,CACF;MACDC,MAAM,EAAE;QACNlD,IAAI,EAAE,eAAe;QACrBmD,UAAU,EAAE;UACVQ,UAAU,EAAE,IAAI;UAChBC,iBAAiB,EAAE;SACpB;QACDX,WAAW,EAAE;OACd;MACDI,UAAU,EAAE,CAAC;MACbC,cAAc,EAAE,KAAK;MAAE;MACvBL,WAAW,EAAE;KACd;IAED;IACA;MACErD,IAAI,EAAE,sBAAsB;MAC5BiD,QAAQ,EAAE,CAAC;MACXC,UAAU,EAAE,CACV;QACE9C,IAAI,EAAE,SAAS;QACf+C,SAAS,EAAE,KAAK;QAAE;QAClBC,QAAQ,EAAE,IAAI;QACdC,WAAW,EAAE;OACd,CACF;MACDC,MAAM,EAAE;QACNlD,IAAI,EAAE,cAAc;QACpBmD,UAAU,EAAE;UAAEC,UAAU,EAAE;QAAQ,CAAE;QACpCH,WAAW,EAAE;OACd;MACDI,UAAU,EAAE,CAAC;MACbC,cAAc,EAAE,KAAK;MAAE;MACvBL,WAAW,EAAE;KACd;IAED;IACA;MACErD,IAAI,EAAE,4BAA4B;MAClCiD,QAAQ,EAAE,CAAC;MACXC,UAAU,EAAE,CACV;QACE9C,IAAI,EAAE,eAAe;QACrB+C,SAAS,EAAE,EAAE;QAAE;QACfC,QAAQ,EAAE,IAAI;QACdC,WAAW,EAAE;OACd,CACF;MACDC,MAAM,EAAE;QACNlD,IAAI,EAAE,cAAc;QACpBmD,UAAU,EAAE;UAAEC,UAAU,EAAE;QAAe,CAAE;QAC3CH,WAAW,EAAE;OACd;MACDI,UAAU,EAAE,CAAC;MACbC,cAAc,EAAE,MAAM;MAAE;MACxBL,WAAW,EAAE;KACd,CACF;IAAC;IAAAlE,cAAA,GAAAoB,CAAA;IAEFe,QAAA,CAAAyB,MAAM,CAACC,IAAI,CAAC,mBAAmB,IAAI,CAACrB,kBAAkB,CAACsC,MAAM,sBAAsB,CAAC;EACtF;EAEA;;;EAGQnB,mBAAmBA,CAAA;IAAA;IAAA3D,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IACzB;IACA,IAAI,CAACmB,eAAe,CAACwC,EAAE,CAAC,wBAAwB,EAAGC,OAAO,IAAI;MAAA;MAAAhF,cAAA,GAAAqB,CAAA;MAAArB,cAAA,GAAAoB,CAAA;MAC5D,IAAI,CAAC6D,mBAAmB,CAAC,iBAAiB,EAAED,OAAO,CAACE,cAAc,KAAK,UAAU;MAAA;MAAA,CAAAlF,cAAA,GAAAsB,CAAA,UAAG,GAAG;MAAA;MAAA,CAAAtB,cAAA,GAAAsB,CAAA,UAAG,EAAE,EAAC;IAC/F,CAAC,CAAC;IAAC;IAAAtB,cAAA,GAAAoB,CAAA;IAEH,IAAI,CAACmB,eAAe,CAACwC,EAAE,CAAC,kBAAkB,EAAGC,OAAO,IAAI;MAAA;MAAAhF,cAAA,GAAAqB,CAAA;MAAArB,cAAA,GAAAoB,CAAA;MACtD,IAAI,CAAC6D,mBAAmB,CAAC,cAAc,EAAED,OAAO,CAACG,QAAQ,CAAC;IAC5D,CAAC,CAAC;IAAC;IAAAnF,cAAA,GAAAoB,CAAA;IAEH,IAAI,CAACmB,eAAe,CAACwC,EAAE,CAAC,mBAAmB,EAAGC,OAAO,IAAI;MAAA;MAAAhF,cAAA,GAAAqB,CAAA;MAAArB,cAAA,GAAAoB,CAAA;MACvD,IAAI,CAAC6D,mBAAmB,CAAC,oBAAoB,EAAE,CAAC,CAAC;IACnD,CAAC,CAAC;IAEF;IAAA;IAAAjF,cAAA,GAAAoB,CAAA;IACA,IAAI,CAACkB,YAAY,CAACyC,EAAE,CAAC,YAAY,EAAGK,KAAK,IAAI;MAAA;MAAApF,cAAA,GAAAqB,CAAA;MAAArB,cAAA,GAAAoB,CAAA;MAC3C,IAAI,CAACiE,gBAAgB,CAACD,KAAK,CAACE,SAAS,EAAEF,KAAK,CAACA,KAAK,CAAC;IACrD,CAAC,CAAC;IAAC;IAAApF,cAAA,GAAAoB,CAAA;IAEHe,QAAA,CAAAyB,MAAM,CAACC,IAAI,CAAC,mDAAmD,CAAC;EAClE;EAEA;;;EAGO,MAAM0B,UAAUA,CAAA;IAAA;IAAAvF,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IACrB,IAAI;MAAA;MAAApB,cAAA,GAAAoB,CAAA;MACFe,QAAA,CAAAyB,MAAM,CAACC,IAAI,CAAC,yCAAyC,CAAC;MAEtD;MACA,MAAM2B,eAAe;MAAA;MAAA,CAAAxF,cAAA,GAAAoB,CAAA,QAAG,IAAI,CAACkB,YAAY,CAACmD,kBAAkB,EAAE;MAAC;MAAAzF,cAAA,GAAAoB,CAAA;MAC/D,KAAK,MAAMkE,SAAS,IAAIE,eAAe,EAAE;QAAA;QAAAxF,cAAA,GAAAoB,CAAA;QACvC,IAAI,CAACsE,wBAAwB,CAACJ,SAAS,CAAC;MAC1C;MAAC;MAAAtF,cAAA,GAAAoB,CAAA;MAED,IAAI,CAACwB,aAAa,GAAG,IAAI;MAAC;MAAA5C,cAAA,GAAAoB,CAAA;MAC1Be,QAAA,CAAAyB,MAAM,CAACC,IAAI,CAAC,iDAAiD,CAAC;MAAC;MAAA7D,cAAA,GAAAoB,CAAA;MAE/D,IAAI,CAACuE,IAAI,CAAC,aAAa,CAAC;IAE1B,CAAC,CAAC,OAAOP,KAAK,EAAE;MAAA;MAAApF,cAAA,GAAAoB,CAAA;MACde,QAAA,CAAAyB,MAAM,CAACwB,KAAK,CAAC,8CAA8C,EAAEA,KAAK,CAAC;MAAC;MAAApF,cAAA,GAAAoB,CAAA;MACpE,MAAMgE,KAAK;IACb;EACF;EAEA;;;EAGQM,wBAAwBA,CAACJ,SAAiB;IAAA;IAAAtF,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IAChD,IAAI,CAACqB,eAAe,CAACmD,GAAG,CAACN,SAAS,EAAE;MAClCA,SAAS;MACTO,KAAK,EAAE,QAAQ;MACfC,YAAY,EAAE,CAAC;MACfC,eAAe,EAAE,IAAI;MACrBC,aAAa,EAAE,IAAI;MACnBC,YAAY,EAAE,CAAC;MACfC,aAAa,EAAE;KAChB,CAAC;IAAC;IAAAlG,cAAA,GAAAoB,CAAA;IAEHe,QAAA,CAAAyB,MAAM,CAACC,IAAI,CAAC,6CAA6CyB,SAAS,EAAE,CAAC;EACvE;EAEA;;;EAGQ,MAAML,mBAAmBA,CAACkB,SAAiB,EAAEC,KAAa;IAAA;IAAApG,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IAChE,IAAI;MAAA;MAAApB,cAAA,GAAAoB,CAAA;MACFe,QAAA,CAAAyB,MAAM,CAACC,IAAI,CAAC,+BAA+BsC,SAAS,MAAMC,KAAK,EAAE,CAAC;MAElE;MACA,MAAMC,oBAAoB;MAAA;MAAA,CAAArG,cAAA,GAAAoB,CAAA,QAAG,IAAI,CAACkF,wBAAwB,CAACH,SAAgB,EAAEC,KAAK,CAAC;MAAC;MAAApG,cAAA,GAAAoB,CAAA;MAEpF,IAAIiF,oBAAoB,CAACvB,MAAM,KAAK,CAAC,EAAE;QAAA;QAAA9E,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACrCe,QAAA,CAAAyB,MAAM,CAACC,IAAI,CAAC,4CAA4C,CAAC;QAAC;QAAA7D,cAAA,GAAAoB,CAAA;QAC1D;MACF,CAAC;MAAA;MAAA;QAAApB,cAAA,GAAAsB,CAAA;MAAA;MAED;MACA,MAAMiF,QAAQ;MAAA;MAAA,CAAAvG,cAAA,GAAAoB,CAAA,QAAGiF,oBAAoB,CAAC,CAAC,CAAC;MAAC;MAAArG,cAAA,GAAAoB,CAAA;MACzC,MAAM,IAAI,CAACoF,uBAAuB,CAACD,QAAQ,EAAE;QAAEJ,SAAS;QAAEC;MAAK,CAAE,CAAC;IAEpE,CAAC,CAAC,OAAOhB,KAAK,EAAE;MAAA;MAAApF,cAAA,GAAAoB,CAAA;MACde,QAAA,CAAAyB,MAAM,CAACwB,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IACzD;EACF;EAEA;;;EAGQ,MAAMC,gBAAgBA,CAACC,SAAiB,EAAEF,KAAY;IAAA;IAAApF,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IAC5D,IAAI;MAAA;MAAApB,cAAA,GAAAoB,CAAA;MACFe,QAAA,CAAAyB,MAAM,CAACwB,KAAK,CAAC,8BAA8BE,SAAS,GAAG,EAAEF,KAAK,CAAC;MAE/D;MAAA;MAAApF,cAAA,GAAAoB,CAAA;MACA,MAAM,IAAI,CAACqF,aAAa,CAACnB,SAAS,CAAC;MAEnC;MACA,MAAMe,oBAAoB;MAAA;MAAA,CAAArG,cAAA,GAAAoB,CAAA,QAAG,IAAI,CAACkF,wBAAwB,CAAC,aAAa,EAAE,CAAC,CAAC;MAAC;MAAAtG,cAAA,GAAAoB,CAAA;MAE7E,IAAIiF,oBAAoB,CAACvB,MAAM,GAAG,CAAC,EAAE;QAAA;QAAA9E,cAAA,GAAAsB,CAAA;QACnC,MAAMiF,QAAQ;QAAA;QAAA,CAAAvG,cAAA,GAAAoB,CAAA,QAAGiF,oBAAoB,CAAC,CAAC,CAAC;QAAC;QAAArG,cAAA,GAAAoB,CAAA;QACzC,MAAM,IAAI,CAACoF,uBAAuB,CAACD,QAAQ,EAAE;UAAEjB,SAAS;UAAEF,KAAK,EAAEA,KAAK,CAACsB;QAAO,CAAE,CAAC;MACnF,CAAC;MAAA;MAAA;QAAA1G,cAAA,GAAAsB,CAAA;MAAA;IAEH,CAAC,CAAC,OAAOqF,aAAa,EAAE;MAAA;MAAA3G,cAAA,GAAAoB,CAAA;MACtBe,QAAA,CAAAyB,MAAM,CAACwB,KAAK,CAAC,kCAAkC,EAAEuB,aAAa,CAAC;IACjE;EACF;EAEA;;;EAGQL,wBAAwBA,CAACH,SAAoC,EAAEC,KAAa;IAAA;IAAApG,cAAA,GAAAqB,CAAA;IAClF,MAAMuF,UAAU;IAAA;IAAA,CAAA5G,cAAA,GAAAoB,CAAA,QAAG,IAAI,CAACoB,kBAAkB,CAACqE,MAAM,CAACN,QAAQ,IAAG;MAAA;MAAAvG,cAAA,GAAAqB,CAAA;MAAArB,cAAA,GAAAoB,CAAA;MAC3D,OAAOmF,QAAQ,CAACxC,UAAU,CAAC+C,IAAI,CAACC,SAAS,IAAG;QAAA;QAAA/G,cAAA,GAAAqB,CAAA;QAAArB,cAAA,GAAAoB,CAAA;QAC1C,IAAI2F,SAAS,CAAC9F,IAAI,KAAKkF,SAAS,EAAE;UAAA;UAAAnG,cAAA,GAAAsB,CAAA;UAAAtB,cAAA,GAAAoB,CAAA;UAAA,OAAO,KAAK;QAAA,CAAC;QAAA;QAAA;UAAApB,cAAA,GAAAsB,CAAA;QAAA;QAAAtB,cAAA,GAAAoB,CAAA;QAE/C,QAAQ2F,SAAS,CAAC9C,QAAQ;UACxB,KAAK,IAAI;YAAA;YAAAjE,cAAA,GAAAsB,CAAA;YAAAtB,cAAA,GAAAoB,CAAA;YAAE,OAAOgF,KAAK,GAAGW,SAAS,CAAC/C,SAAS;UAC7C,KAAK,IAAI;YAAA;YAAAhE,cAAA,GAAAsB,CAAA;YAAAtB,cAAA,GAAAoB,CAAA;YAAE,OAAOgF,KAAK,GAAGW,SAAS,CAAC/C,SAAS;UAC7C,KAAK,IAAI;YAAA;YAAAhE,cAAA,GAAAsB,CAAA;YAAAtB,cAAA,GAAAoB,CAAA;YAAE,OAAOgF,KAAK,KAAKW,SAAS,CAAC/C,SAAS;UAC/C,KAAK,KAAK;YAAA;YAAAhE,cAAA,GAAAsB,CAAA;YAAAtB,cAAA,GAAAoB,CAAA;YAAE,OAAOgF,KAAK,IAAIW,SAAS,CAAC/C,SAAS;UAC/C,KAAK,KAAK;YAAA;YAAAhE,cAAA,GAAAsB,CAAA;YAAAtB,cAAA,GAAAoB,CAAA;YAAE,OAAOgF,KAAK,IAAIW,SAAS,CAAC/C,SAAS;UAC/C;YAAA;YAAAhE,cAAA,GAAAsB,CAAA;YAAAtB,cAAA,GAAAoB,CAAA;YAAS,OAAO,KAAK;QACvB;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF;IAAA;IAAApB,cAAA,GAAAoB,CAAA;IACA,OAAOwF,UAAU,CAACI,IAAI,CAAC,CAACC,CAAC,EAAE3F,CAAC,KAAK;MAAA;MAAAtB,cAAA,GAAAqB,CAAA;MAAArB,cAAA,GAAAoB,CAAA;MAAA,OAAAE,CAAC,CAACwC,QAAQ,GAAGmD,CAAC,CAACnD,QAAQ;IAAR,CAAQ,CAAC;EAC3D;EAEA;;;EAGQ,MAAM0C,uBAAuBA,CACnCD,QAA0B,EAC1BW,OAA4B;IAAA;IAAAlH,cAAA,GAAAqB,CAAA;IAE5B,MAAM8F,SAAS;IAAA;IAAA,CAAAnH,cAAA,GAAAoB,CAAA,QAAGgG,IAAI,CAACC,GAAG,EAAE;IAAC;IAAArH,cAAA,GAAAoB,CAAA;IAE7B,IAAI;MAAA;MAAApB,cAAA,GAAAoB,CAAA;MACFe,QAAA,CAAAyB,MAAM,CAACC,IAAI,CAAC,mCAAmC0C,QAAQ,CAAC1F,IAAI,EAAE,CAAC;MAE/D;MAAA;MAAAb,cAAA,GAAAoB,CAAA;MACA,IAAI,MAAM,IAAI,CAACkG,YAAY,CAACf,QAAQ,CAAC,EAAE;QAAA;QAAAvG,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACrCe,QAAA,CAAAyB,MAAM,CAACC,IAAI,CAAC,cAAc0C,QAAQ,CAAC1F,IAAI,wBAAwB,CAAC;QAAC;QAAAb,cAAA,GAAAoB,CAAA;QACjE,OAAO;UACLmG,OAAO,EAAE,KAAK;UACdC,YAAY,EAAEjB,QAAQ,CAAC1F,IAAI;UAC3B4G,WAAW,EAAE,kBAAkB;UAC/BC,aAAa,EAAER,OAAO;UACtBS,QAAQ,EAAET,OAAO;UACjBU,aAAa,EAAER,IAAI,CAACC,GAAG,EAAE,GAAGF,SAAS;UACrC/B,KAAK,EAAE;SACR;MACH,CAAC;MAAA;MAAA;QAAApF,cAAA,GAAAsB,CAAA;MAAA;MAED;MACA,MAAMuG,MAAM;MAAA;MAAA,CAAA7H,cAAA,GAAAoB,CAAA,QAAG,MAAM,IAAI,CAAC0G,aAAa,CAACvB,QAAQ,CAACpC,MAAM,EAAE+C,OAAO,CAAC;MAEjE,MAAMa,cAAc;MAAA;MAAA,CAAA/H,cAAA,GAAAoB,CAAA,QAAmB;QACrCmG,OAAO,EAAEM,MAAM,CAACN,OAAO;QACvBC,YAAY,EAAEjB,QAAQ,CAAC1F,IAAI;QAC3B4G,WAAW,EAAElB,QAAQ,CAACpC,MAAM,CAAClD,IAAI;QACjCyG,aAAa,EAAER,OAAO;QACtBS,QAAQ,EAAEE,MAAM,CAACF,QAAQ;QACzBC,aAAa,EAAER,IAAI,CAACC,GAAG,EAAE,GAAGF,SAAS;QACrC/B,KAAK,EAAEyC,MAAM,CAACzC;OACf;MAED;MAAA;MAAApF,cAAA,GAAAoB,CAAA;MACA,IAAI,CAAC4G,oBAAoB,CAACD,cAAc,CAAC;MAAC;MAAA/H,cAAA,GAAAoB,CAAA;MAE1C,IAAIyG,MAAM,CAACN,OAAO,EAAE;QAAA;QAAAvH,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QAClBe,QAAA,CAAAyB,MAAM,CAACC,IAAI,CAAC,uBAAuB0C,QAAQ,CAAC1F,IAAI,wBAAwB,CAAC;QAAC;QAAAb,cAAA,GAAAoB,CAAA;QAC1E,IAAI,CAACuE,IAAI,CAAC,iBAAiB,EAAEoC,cAAc,CAAC;MAC9C,CAAC,MAAM;QAAA;QAAA/H,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACLe,QAAA,CAAAyB,MAAM,CAACwB,KAAK,CAAC,uBAAuBmB,QAAQ,CAAC1F,IAAI,UAAU,EAAEgH,MAAM,CAACzC,KAAK,CAAC;QAAC;QAAApF,cAAA,GAAAoB,CAAA;QAC3E,IAAI,CAACuE,IAAI,CAAC,iBAAiB,EAAEoC,cAAc,CAAC;MAC9C;MAAC;MAAA/H,cAAA,GAAAoB,CAAA;MAED,OAAO2G,cAAc;IAEvB,CAAC,CAAC,OAAO3C,KAAK,EAAE;MACd,MAAM2C,cAAc;MAAA;MAAA,CAAA/H,cAAA,GAAAoB,CAAA,QAAmB;QACrCmG,OAAO,EAAE,KAAK;QACdC,YAAY,EAAEjB,QAAQ,CAAC1F,IAAI;QAC3B4G,WAAW,EAAElB,QAAQ,CAACpC,MAAM,CAAClD,IAAI;QACjCyG,aAAa,EAAER,OAAO;QACtBS,QAAQ,EAAET,OAAO;QACjBU,aAAa,EAAER,IAAI,CAACC,GAAG,EAAE,GAAGF,SAAS;QACrC/B,KAAK,EAAEA,KAAK,CAACsB;OACd;MAAC;MAAA1G,cAAA,GAAAoB,CAAA;MAEF,IAAI,CAAC4G,oBAAoB,CAACD,cAAc,CAAC;MAAC;MAAA/H,cAAA,GAAAoB,CAAA;MAC1Ce,QAAA,CAAAyB,MAAM,CAACwB,KAAK,CAAC,uCAAuCmB,QAAQ,CAAC1F,IAAI,GAAG,EAAEuE,KAAK,CAAC;MAAC;MAAApF,cAAA,GAAAoB,CAAA;MAE7E,OAAO2G,cAAc;IACvB;EACF;EAEA;;;EAGQ,MAAMD,aAAaA,CAAC3D,MAAsB,EAAE+C,OAA4B;IAAA;IAAAlH,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IAK9E,IAAI;MAAA;MAAApB,cAAA,GAAAoB,CAAA;MACF,QAAQ+C,MAAM,CAAClD,IAAI;QACjB,KAAK,cAAc;UAAA;UAAAjB,cAAA,GAAAsB,CAAA;UAAAtB,cAAA,GAAAoB,CAAA;UACjB,OAAO,MAAM,IAAI,CAAC6G,kBAAkB,CAAC9D,MAAM,CAACC,UAAU,EAAE8C,OAAO,CAAC;QAElE,KAAK,mBAAmB;UAAA;UAAAlH,cAAA,GAAAsB,CAAA;UAAAtB,cAAA,GAAAoB,CAAA;UACtB,OAAO,MAAM,IAAI,CAAC8G,uBAAuB,CAAC/D,MAAM,CAACC,UAAU,EAAE8C,OAAO,CAAC;QAEvE,KAAK,YAAY;UAAA;UAAAlH,cAAA,GAAAsB,CAAA;UAAAtB,cAAA,GAAAoB,CAAA;UACf,OAAO,MAAM,IAAI,CAAC+G,gBAAgB,CAAChE,MAAM,CAACC,UAAU,EAAE8C,OAAO,CAAC;QAEhE,KAAK,gBAAgB;UAAA;UAAAlH,cAAA,GAAAsB,CAAA;UAAAtB,cAAA,GAAAoB,CAAA;UACnB,OAAO,MAAM,IAAI,CAACgH,oBAAoB,CAACjE,MAAM,CAACC,UAAU,EAAE8C,OAAO,CAAC;QAEpE,KAAK,eAAe;UAAA;UAAAlH,cAAA,GAAAsB,CAAA;UAAAtB,cAAA,GAAAoB,CAAA;UAClB,OAAO,MAAM,IAAI,CAACiH,mBAAmB,CAAClE,MAAM,CAACC,UAAU,EAAE8C,OAAO,CAAC;QAEnE;UAAA;UAAAlH,cAAA,GAAAsB,CAAA;UAAAtB,cAAA,GAAAoB,CAAA;UACE,MAAM,IAAIkH,KAAK,CAAC,wBAAwBnE,MAAM,CAAClD,IAAI,EAAE,CAAC;MAC1D;IACF,CAAC,CAAC,OAAOmE,KAAK,EAAE;MAAA;MAAApF,cAAA,GAAAoB,CAAA;MACd,OAAO;QACLmG,OAAO,EAAE,KAAK;QACdI,QAAQ,EAAET,OAAO;QACjB9B,KAAK,EAAEA,KAAK,CAACsB;OACd;IACH;EACF;EAEA;;;EAGQ,MAAMuB,kBAAkBA,CAAC7D,UAAe,EAAE8C,OAAY;IAAA;IAAAlH,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IAK5D,IAAI;MACF,MAAMmH,YAAY;MAAA;MAAA,CAAAvI,cAAA,GAAAoB,CAAA,QAAG,IAAI,CAACkB,YAAY,CAACkG,qBAAqB,EAAE;MAC9D,IAAIC,WAAW;MAAA;MAAA,CAAAzI,cAAA,GAAAoB,CAAA,SAAkB,IAAI;MAErC;MAAA;MAAApB,cAAA,GAAAoB,CAAA;MACA,IAAIgD,UAAU,CAACC,UAAU,KAAK,SAAS,EAAE;QAAA;QAAArE,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACvCqH,WAAW,GAAG,MAAM,IAAI,CAACC,gBAAgB,CAACH,YAAY,CAAC;MACzD,CAAC,MAAM;QAAA;QAAAvI,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QAAA,IAAIgD,UAAU,CAACC,UAAU,KAAK,QAAQ,EAAE;UAAA;UAAArE,cAAA,GAAAsB,CAAA;UAAAtB,cAAA,GAAAoB,CAAA;UAC7CqH,WAAW,GAAG,MAAM,IAAI,CAACE,eAAe,CAACJ,YAAY,CAAC;QACxD,CAAC,MAAM;UAAA;UAAAvI,cAAA,GAAAsB,CAAA;UAAAtB,cAAA,GAAAoB,CAAA;UAAA,IAAIgD,UAAU,CAACC,UAAU,KAAK,eAAe,EAAE;YAAA;YAAArE,cAAA,GAAAsB,CAAA;YAAAtB,cAAA,GAAAoB,CAAA;YACpDqH,WAAW,GAAG,MAAM,IAAI,CAACG,qBAAqB,CAACL,YAAY,CAAC;UAC9D,CAAC;UAAA;UAAA;YAAAvI,cAAA,GAAAsB,CAAA;UAAA;QAAD;MAAA;MAAC;MAAAtB,cAAA,GAAAoB,CAAA;MAED,IAAI,CAACqH,WAAW,EAAE;QAAA;QAAAzI,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QAChB,OAAO;UACLmG,OAAO,EAAE,KAAK;UACdI,QAAQ,EAAET,OAAO;UACjB9B,KAAK,EAAE;SACR;MACH,CAAC;MAAA;MAAA;QAAApF,cAAA,GAAAsB,CAAA;MAAA;MAED;MAAAtB,cAAA,GAAAoB,CAAA;MACA,IAAI,CAAC,IAAI,CAACyH,WAAW,CAACJ,WAAW,CAAC,EAAE;QAAA;QAAAzI,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QAClC,OAAO;UACLmG,OAAO,EAAE,KAAK;UACdI,QAAQ,EAAET,OAAO;UACjB9B,KAAK,EAAE,gBAAgBqD,WAAW;SACnC;MACH,CAAC;MAAA;MAAA;QAAAzI,cAAA,GAAAsB,CAAA;MAAA;MAED;MAAAtB,cAAA,GAAAoB,CAAA;MACA,MAAM,IAAI,CAACkB,YAAY,CAACwG,SAAS,CAACL,WAAW,CAAC;MAAC;MAAAzI,cAAA,GAAAoB,CAAA;MAE/Ce,QAAA,CAAAyB,MAAM,CAACC,IAAI,CAAC,iCAAiC0E,YAAY,OAAOE,WAAW,EAAE,CAAC;MAAC;MAAAzI,cAAA,GAAAoB,CAAA;MAE/E,OAAO;QACLmG,OAAO,EAAE,IAAI;QACbI,QAAQ,EAAE;UACR,GAAGT,OAAO;UACV6B,aAAa,EAAER,YAAY;UAC3BS,QAAQ,EAAEP;;OAEb;IAEH,CAAC,CAAC,OAAOrD,KAAK,EAAE;MAAA;MAAApF,cAAA,GAAAoB,CAAA;MACd,OAAO;QACLmG,OAAO,EAAE,KAAK;QACdI,QAAQ,EAAET,OAAO;QACjB9B,KAAK,EAAEA,KAAK,CAACsB;OACd;IACH;EACF;EAEA;;;EAGQ,MAAMwB,uBAAuBA,CAAC9D,UAAe,EAAE8C,OAAY;IAAA;IAAAlH,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IAKjE,IAAI;MAAA;MAAApB,cAAA,GAAAoB,CAAA;MACF;MACAe,QAAA,CAAAyB,MAAM,CAACC,IAAI,CAAC,+BAA+B,EAAEO,UAAU,CAAC;MAExD;MACA,MAAM6E,WAAW;MAAA;MAAA,CAAAjJ,cAAA,GAAAoB,CAAA,SAAG;QAClBoD,UAAU,EAAEJ,UAAU,CAACI,UAAU,KAAK,gBAAgB;QAAA;QAAA,CAAAxE,cAAA,GAAAsB,CAAA,WAAG,gBAAgB;QAAA;QAAA,CAAAtB,cAAA,GAAAsB,CAAA,WAAG,UAAU;QACtFmD,SAAS,EAAEL,UAAU,CAACK,SAAS,KAAK,sBAAsB;QAAA;QAAA,CAAAzE,cAAA,GAAAsB,CAAA,WAAG,gBAAgB;QAAA;QAAA,CAAAtB,cAAA,GAAAsB,CAAA,WAAG,UAAU;OAC3F;MAAC;MAAAtB,cAAA,GAAAoB,CAAA;MAEF,OAAO;QACLmG,OAAO,EAAE,IAAI;QACbI,QAAQ,EAAE;UACR,GAAGT,OAAO;UACVgC,oBAAoB,EAAED;;OAEzB;IAEH,CAAC,CAAC,OAAO7D,KAAK,EAAE;MAAA;MAAApF,cAAA,GAAAoB,CAAA;MACd,OAAO;QACLmG,OAAO,EAAE,KAAK;QACdI,QAAQ,EAAET,OAAO;QACjB9B,KAAK,EAAEA,KAAK,CAACsB;OACd;IACH;EACF;EAEA;;;EAGQ,MAAMyB,gBAAgBA,CAAC/D,UAAe,EAAE8C,OAAY;IAAA;IAAAlH,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IAK1D,IAAI;MAAA;MAAApB,cAAA,GAAAoB,CAAA;MACFe,QAAA,CAAAyB,MAAM,CAACuF,IAAI,CAAC,oDAAoD,CAAC;MAEjE;MACA;MAAA;MAAAnJ,cAAA,GAAAoB,CAAA;MAEA,OAAO;QACLmG,OAAO,EAAE,IAAI;QACbI,QAAQ,EAAE;UACR,GAAGT,OAAO;UACVkC,UAAU,EAAE,IAAI;UAChBC,aAAa,EAAE;;OAElB;IAEH,CAAC,CAAC,OAAOjE,KAAK,EAAE;MAAA;MAAApF,cAAA,GAAAoB,CAAA;MACd,OAAO;QACLmG,OAAO,EAAE,KAAK;QACdI,QAAQ,EAAET,OAAO;QACjB9B,KAAK,EAAEA,KAAK,CAACsB;OACd;IACH;EACF;EAEA;;;EAGQ,MAAM0B,oBAAoBA,CAAChE,UAAe,EAAE8C,OAAY;IAAA;IAAAlH,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IAK9D,IAAI;MAAA;MAAApB,cAAA,GAAAoB,CAAA;MACFe,QAAA,CAAAyB,MAAM,CAACwB,KAAK,CAAC,4BAA4B,CAAC;MAAC;MAAApF,cAAA,GAAAoB,CAAA;MAE3C,IAAI,CAACuB,aAAa,GAAG;QACnBU,OAAO,EAAE,IAAI;QACbC,QAAQ,EAAE;QAAC;QAAA,CAAAtD,cAAA,GAAAsB,CAAA,WAAA4F,OAAO,CAACf,SAAS;QAAA;QAAA,CAAAnG,cAAA,GAAAsB,CAAA,WAAI,SAAS,EAAC;QAC1CiC,OAAO,EAAE,CAAC,aAAa,EAAE,iBAAiB,CAAC;QAC3CC,aAAa;QAAE;QAAA,CAAAxD,cAAA,GAAAsB,CAAA,WAAA8C,UAAU,CAACZ,aAAa;QAAA;QAAA,CAAAxD,cAAA,GAAAsB,CAAA,WAAI,SAAS;QACpDmC,iBAAiB,EAAE;OACpB;MAED;MAAA;MAAAzD,cAAA,GAAAoB,CAAA;MACA,IAAI,CAACuE,IAAI,CAAC,eAAe,EAAE,IAAI,CAAChD,aAAa,CAAC;MAAC;MAAA3C,cAAA,GAAAoB,CAAA;MAE/C,OAAO;QACLmG,OAAO,EAAE,IAAI;QACbI,QAAQ,EAAE;UACR,GAAGT,OAAO;UACVvE,aAAa,EAAE,IAAI,CAACA;;OAEvB;IAEH,CAAC,CAAC,OAAOyC,KAAK,EAAE;MAAA;MAAApF,cAAA,GAAAoB,CAAA;MACd,OAAO;QACLmG,OAAO,EAAE,KAAK;QACdI,QAAQ,EAAET,OAAO;QACjB9B,KAAK,EAAEA,KAAK,CAACsB;OACd;IACH;EACF;EAEA;;;EAGQ,MAAM2B,mBAAmBA,CAACjE,UAAe,EAAE8C,OAAY;IAAA;IAAAlH,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IAK7D,IAAI;MACF,MAAMmH,YAAY;MAAA;MAAA,CAAAvI,cAAA,GAAAoB,CAAA,SAAG,IAAI,CAACkB,YAAY,CAACkG,qBAAqB,EAAE;MAAC;MAAAxI,cAAA,GAAAoB,CAAA;MAE/D,IAAI,CAACmH,YAAY,EAAE;QAAA;QAAAvI,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACjB,OAAO;UACLmG,OAAO,EAAE,KAAK;UACdI,QAAQ,EAAET,OAAO;UACjB9B,KAAK,EAAE;SACR;MACH,CAAC;MAAA;MAAA;QAAApF,cAAA,GAAAsB,CAAA;MAAA;MAAAtB,cAAA,GAAAoB,CAAA;MAEDe,QAAA,CAAAyB,MAAM,CAACC,IAAI,CAAC,wBAAwB0E,YAAY,EAAE,CAAC;MAEnD;MAAA;MAAAvI,cAAA,GAAAoB,CAAA;MACA,MAAM,IAAI,CAACkB,YAAY,CAACgH,WAAW,CAACf,YAAY,CAAC;MAAC;MAAAvI,cAAA,GAAAoB,CAAA;MAElD,IAAIgD,UAAU,CAACQ,UAAU,EAAE;QAAA;QAAA5E,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACzB;QACAe,QAAA,CAAAyB,MAAM,CAACC,IAAI,CAAC,yBAAyB,CAAC;MACxC,CAAC;MAAA;MAAA;QAAA7D,cAAA,GAAAsB,CAAA;MAAA;MAAAtB,cAAA,GAAAoB,CAAA;MAED,MAAM,IAAI,CAACkB,YAAY,CAACwG,SAAS,CAACP,YAAY,CAAC;MAAC;MAAAvI,cAAA,GAAAoB,CAAA;MAEhD,OAAO;QACLmG,OAAO,EAAE,IAAI;QACbI,QAAQ,EAAE;UACR,GAAGT,OAAO;UACVqC,cAAc,EAAEhB,YAAY;UAC5BiB,YAAY,EAAEpF,UAAU,CAACQ;;OAE5B;IAEH,CAAC,CAAC,OAAOQ,KAAK,EAAE;MAAA;MAAApF,cAAA,GAAAoB,CAAA;MACd,OAAO;QACLmG,OAAO,EAAE,KAAK;QACdI,QAAQ,EAAET,OAAO;QACjB9B,KAAK,EAAEA,KAAK,CAACsB;OACd;IACH;EACF;EAEA;;;EAGQ,MAAMgC,gBAAgBA,CAACH,YAA2B;IAAA;IAAAvI,cAAA,GAAAqB,CAAA;IACxD,MAAMmE,eAAe;IAAA;IAAA,CAAAxF,cAAA,GAAAoB,CAAA,SAAG,IAAI,CAACkB,YAAY,CAACmD,kBAAkB,EAAE;IAE9D;IACA,MAAMgE,UAAU;IAAA;IAAA,CAAAzJ,cAAA,GAAAoB,CAAA,SAAG;MACjB,2BAA2B,EAAE,IAAI;MACjC,0BAA0B,EAAE,IAAI;MAChC,wBAAwB,EAAE;KAC3B;IAED,MAAMsI,WAAW;IAAA;IAAA,CAAA1J,cAAA,GAAAoB,CAAA,SAAGmH,YAAY;IAAA;IAAA,CAAAvI,cAAA,GAAAsB,CAAA;IAAG;IAAA,CAAAtB,cAAA,GAAAsB,CAAA,WAAAmI,UAAU,CAAClB,YAAY,CAAC;IAAA;IAAA,CAAAvI,cAAA,GAAAsB,CAAA,WAAI,CAAC;IAAA;IAAA,CAAAtB,cAAA,GAAAsB,CAAA,WAAGqI,QAAQ;IAAC;IAAA3J,cAAA,GAAAoB,CAAA;IAE5E,KAAK,MAAMwI,KAAK,IAAIpE,eAAe,EAAE;MACnC,MAAMqE,SAAS;MAAA;MAAA,CAAA7J,cAAA,GAAAoB,CAAA;MAAG;MAAA,CAAApB,cAAA,GAAAsB,CAAA,WAAAmI,UAAU,CAACG,KAAK,CAAC;MAAA;MAAA,CAAA5J,cAAA,GAAAsB,CAAA,WAAI,CAAC;MAAC;MAAAtB,cAAA,GAAAoB,CAAA;MACzC;MAAI;MAAA,CAAApB,cAAA,GAAAsB,CAAA,WAAAuI,SAAS,GAAGH,WAAW;MAAA;MAAA,CAAA1J,cAAA,GAAAsB,CAAA,WAAI,IAAI,CAACuH,WAAW,CAACe,KAAK,CAAC,GAAE;QAAA;QAAA5J,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACtD,OAAOwI,KAAK;MACd,CAAC;MAAA;MAAA;QAAA5J,cAAA,GAAAsB,CAAA;MAAA;IACH;IAAC;IAAAtB,cAAA,GAAAoB,CAAA;IAED,OAAO,IAAI;EACb;EAEA;;;EAGQ,MAAMuH,eAAeA,CAACJ,YAA2B;IAAA;IAAAvI,cAAA,GAAAqB,CAAA;IACvD;IACA,MAAMyI,kBAAkB;IAAA;IAAA,CAAA9J,cAAA,GAAAoB,CAAA,SAAG,IAAI,CAACkB,YAAY,CAACyH,0BAA0B,EAAE;IAEzE,IAAIC,YAAY;IAAA;IAAA,CAAAhK,cAAA,GAAAoB,CAAA,SAAG,IAAI;IACvB,IAAI6I,WAAW;IAAA;IAAA,CAAAjK,cAAA,GAAAoB,CAAA,SAAGuI,QAAQ;IAAC;IAAA3J,cAAA,GAAAoB,CAAA;IAE3B,KAAK,MAAM8I,WAAW,IAAIJ,kBAAkB,EAAE;MAAA;MAAA9J,cAAA,GAAAoB,CAAA;MAC5C;MAAI;MAAA,CAAApB,cAAA,GAAAsB,CAAA,WAAA4I,WAAW,CAAC5E,SAAS,KAAKiD,YAAY;MAAA;MAAA,CAAAvI,cAAA,GAAAsB,CAAA,WACtC4I,WAAW,CAACC,oBAAoB,GAAGF,WAAW;MAAA;MAAA,CAAAjK,cAAA,GAAAsB,CAAA,WAC9C,IAAI,CAACuH,WAAW,CAACqB,WAAW,CAAC5E,SAAS,CAAC,GAAE;QAAA;QAAAtF,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QAC3C4I,YAAY,GAAGE,WAAW,CAAC5E,SAAS;QAAC;QAAAtF,cAAA,GAAAoB,CAAA;QACrC6I,WAAW,GAAGC,WAAW,CAACC,oBAAoB;MAChD,CAAC;MAAA;MAAA;QAAAnK,cAAA,GAAAsB,CAAA;MAAA;IACH;IAAC;IAAAtB,cAAA,GAAAoB,CAAA;IAED,OAAO4I,YAAY;EACrB;EAEA;;;EAGQ,MAAMpB,qBAAqBA,CAACL,YAA2B;IAAA;IAAAvI,cAAA,GAAAqB,CAAA;IAC7D;IACA,MAAMyI,kBAAkB;IAAA;IAAA,CAAA9J,cAAA,GAAAoB,CAAA,SAAG,IAAI,CAACkB,YAAY,CAACyH,0BAA0B,EAAE;IAEzE,IAAIK,iBAAiB;IAAA;IAAA,CAAApK,cAAA,GAAAoB,CAAA,SAAG,IAAI;IAC5B,IAAIiJ,eAAe;IAAA;IAAA,CAAArK,cAAA,GAAAoB,CAAA,SAAG,CAAC;IAAC;IAAApB,cAAA,GAAAoB,CAAA;IAExB,KAAK,MAAM8I,WAAW,IAAIJ,kBAAkB,EAAE;MAAA;MAAA9J,cAAA,GAAAoB,CAAA;MAC5C;MAAI;MAAA,CAAApB,cAAA,GAAAsB,CAAA,WAAA4I,WAAW,CAAC5E,SAAS,KAAKiD,YAAY;MAAA;MAAA,CAAAvI,cAAA,GAAAsB,CAAA,WACtC4I,WAAW,CAACI,eAAe,GAAGD,eAAe;MAAA;MAAA,CAAArK,cAAA,GAAAsB,CAAA,WAC7C,IAAI,CAACuH,WAAW,CAACqB,WAAW,CAAC5E,SAAS,CAAC,GAAE;QAAA;QAAAtF,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QAC3CgJ,iBAAiB,GAAGF,WAAW,CAAC5E,SAAS;QAAC;QAAAtF,cAAA,GAAAoB,CAAA;QAC1CiJ,eAAe,GAAGH,WAAW,CAACI,eAAe;MAC/C,CAAC;MAAA;MAAA;QAAAtK,cAAA,GAAAsB,CAAA;MAAA;IACH;IAAC;IAAAtB,cAAA,GAAAoB,CAAA;IAED,OAAOgJ,iBAAiB;EAC1B;EAEA;;;EAGQvB,WAAWA,CAACvD,SAAiB;IAAA;IAAAtF,cAAA,GAAAqB,CAAA;IACnC,MAAMkJ,cAAc;IAAA;IAAA,CAAAvK,cAAA,GAAAoB,CAAA,SAAG,IAAI,CAACqB,eAAe,CAAC+H,GAAG,CAAClF,SAAS,CAAC;IAAC;IAAAtF,cAAA,GAAAoB,CAAA;IAE3D,IAAI,CAACmJ,cAAc,EAAE;MAAA;MAAAvK,cAAA,GAAAsB,CAAA;MAAAtB,cAAA,GAAAoB,CAAA;MACnB,OAAO,IAAI,CAAC,CAAC;IACf,CAAC;IAAA;IAAA;MAAApB,cAAA,GAAAsB,CAAA;IAAA;IAAAtB,cAAA,GAAAoB,CAAA;IAED,IAAImJ,cAAc,CAAC1E,KAAK,KAAK,QAAQ,EAAE;MAAA;MAAA7F,cAAA,GAAAsB,CAAA;MAAAtB,cAAA,GAAAoB,CAAA;MACrC,OAAO,IAAI;IACb,CAAC;IAAA;IAAA;MAAApB,cAAA,GAAAsB,CAAA;IAAA;IAAAtB,cAAA,GAAAoB,CAAA;IAED,IAAImJ,cAAc,CAAC1E,KAAK,KAAK,MAAM,EAAE;MAAA;MAAA7F,cAAA,GAAAsB,CAAA;MAAAtB,cAAA,GAAAoB,CAAA;MACnC;MACA;MAAI;MAAA,CAAApB,cAAA,GAAAsB,CAAA,WAAAiJ,cAAc,CAACvE,aAAa;MAAA;MAAA,CAAAhG,cAAA,GAAAsB,CAAA,WAAI,IAAI8F,IAAI,EAAE,IAAImD,cAAc,CAACvE,aAAa,GAAE;QAAA;QAAAhG,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QAC9EmJ,cAAc,CAAC1E,KAAK,GAAG,WAAW;QAAC;QAAA7F,cAAA,GAAAoB,CAAA;QACnCmJ,cAAc,CAACtE,YAAY,GAAG,CAAC;QAAC;QAAAjG,cAAA,GAAAoB,CAAA;QAChC,OAAO,IAAI;MACb,CAAC;MAAA;MAAA;QAAApB,cAAA,GAAAsB,CAAA;MAAA;MAAAtB,cAAA,GAAAoB,CAAA;MACD,OAAO,KAAK;IACd,CAAC;IAAA;IAAA;MAAApB,cAAA,GAAAsB,CAAA;IAAA;IAAAtB,cAAA,GAAAoB,CAAA;IAED,IAAImJ,cAAc,CAAC1E,KAAK,KAAK,WAAW,EAAE;MAAA;MAAA7F,cAAA,GAAAsB,CAAA;MAAAtB,cAAA,GAAAoB,CAAA;MACxC,OAAO,IAAI,CAAC,CAAC;IACf,CAAC;IAAA;IAAA;MAAApB,cAAA,GAAAsB,CAAA;IAAA;IAAAtB,cAAA,GAAAoB,CAAA;IAED,OAAO,KAAK;EACd;EAEA;;;EAGQ,MAAMqF,aAAaA,CAACnB,SAAiB;IAAA;IAAAtF,cAAA,GAAAqB,CAAA;IAC3C,MAAMkJ,cAAc;IAAA;IAAA,CAAAvK,cAAA,GAAAoB,CAAA,SAAG,IAAI,CAACqB,eAAe,CAAC+H,GAAG,CAAClF,SAAS,CAAC;IAAC;IAAAtF,cAAA,GAAAoB,CAAA;IAE3D,IAAI,CAACmJ,cAAc,EAAE;MAAA;MAAAvK,cAAA,GAAAsB,CAAA;MAAAtB,cAAA,GAAAoB,CAAA;MACnB,IAAI,CAACsE,wBAAwB,CAACJ,SAAS,CAAC;MAAC;MAAAtF,cAAA,GAAAoB,CAAA;MACzC;IACF,CAAC;IAAA;IAAA;MAAApB,cAAA,GAAAsB,CAAA;IAAA;IAAAtB,cAAA,GAAAoB,CAAA;IAEDmJ,cAAc,CAACzE,YAAY,EAAE;IAAC;IAAA9F,cAAA,GAAAoB,CAAA;IAC9BmJ,cAAc,CAACxE,eAAe,GAAG,IAAIqB,IAAI,EAAE;IAAC;IAAApH,cAAA,GAAAoB,CAAA;IAC5CmJ,cAAc,CAACrE,aAAa,EAAE;IAE9B;IAAA;IAAAlG,cAAA,GAAAoB,CAAA;IACA,IAAImJ,cAAc,CAACzE,YAAY,IAAI,IAAI,CAAC/C,sBAAsB,CAACC,gBAAgB,EAAE;MAAA;MAAAhD,cAAA,GAAAsB,CAAA;MAAAtB,cAAA,GAAAoB,CAAA;MAC/EmJ,cAAc,CAAC1E,KAAK,GAAG,MAAM;MAAC;MAAA7F,cAAA,GAAAoB,CAAA;MAC9BmJ,cAAc,CAACvE,aAAa,GAAG,IAAIoB,IAAI,CAACA,IAAI,CAACC,GAAG,EAAE,GAAG,IAAI,CAACtE,sBAAsB,CAACG,OAAO,CAAC;MAAC;MAAAlD,cAAA,GAAAoB,CAAA;MAE1Fe,QAAA,CAAAyB,MAAM,CAACuF,IAAI,CAAC,wCAAwC7D,SAAS,EAAE,CAAC;MAAC;MAAAtF,cAAA,GAAAoB,CAAA;MACjE,IAAI,CAACuE,IAAI,CAAC,sBAAsB,EAAE;QAAEL,SAAS;QAAEiF;MAAc,CAAE,CAAC;IAClE,CAAC;IAAA;IAAA;MAAAvK,cAAA,GAAAsB,CAAA;IAAA;EACH;EAEA;;;EAGQ,MAAMmJ,aAAaA,CAACnF,SAAiB;IAAA;IAAAtF,cAAA,GAAAqB,CAAA;IAC3C,MAAMkJ,cAAc;IAAA;IAAA,CAAAvK,cAAA,GAAAoB,CAAA,SAAG,IAAI,CAACqB,eAAe,CAAC+H,GAAG,CAAClF,SAAS,CAAC;IAAC;IAAAtF,cAAA,GAAAoB,CAAA;IAE3D,IAAI,CAACmJ,cAAc,EAAE;MAAA;MAAAvK,cAAA,GAAAsB,CAAA;MAAAtB,cAAA,GAAAoB,CAAA;MACnB;IACF,CAAC;IAAA;IAAA;MAAApB,cAAA,GAAAsB,CAAA;IAAA;IAAAtB,cAAA,GAAAoB,CAAA;IAEDmJ,cAAc,CAACtE,YAAY,EAAE;IAAC;IAAAjG,cAAA,GAAAoB,CAAA;IAC9BmJ,cAAc,CAACrE,aAAa,EAAE;IAAC;IAAAlG,cAAA,GAAAoB,CAAA;IAE/B,IAAImJ,cAAc,CAAC1E,KAAK,KAAK,WAAW,EAAE;MAAA;MAAA7F,cAAA,GAAAsB,CAAA;MAAAtB,cAAA,GAAAoB,CAAA;MACxC,IAAImJ,cAAc,CAACtE,YAAY,IAAI,IAAI,CAAClD,sBAAsB,CAACE,gBAAgB,EAAE;QAAA;QAAAjD,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QAC/EmJ,cAAc,CAAC1E,KAAK,GAAG,QAAQ;QAAC;QAAA7F,cAAA,GAAAoB,CAAA;QAChCmJ,cAAc,CAACzE,YAAY,GAAG,CAAC;QAAC;QAAA9F,cAAA,GAAAoB,CAAA;QAEhCe,QAAA,CAAAyB,MAAM,CAACC,IAAI,CAAC,wCAAwCyB,SAAS,EAAE,CAAC;QAAC;QAAAtF,cAAA,GAAAoB,CAAA;QACjE,IAAI,CAACuE,IAAI,CAAC,sBAAsB,EAAE;UAAEL,SAAS;UAAEiF;QAAc,CAAE,CAAC;MAClE,CAAC;MAAA;MAAA;QAAAvK,cAAA,GAAAsB,CAAA;MAAA;IACH,CAAC;IAAA;IAAA;MAAAtB,cAAA,GAAAsB,CAAA;IAAA;EACH;EAEA;;;EAGQ,MAAMgG,YAAYA,CAACf,QAA0B;IAAA;IAAAvG,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IACnD;IACA;IACA,OAAO,KAAK;EACd;EAEA;;;EAGQ4G,oBAAoBA,CAACH,MAAsB;IAAA;IAAA7H,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IACjD,IAAI,CAACyB,eAAe,CAAC6H,IAAI,CAAC7C,MAAM,CAAC;IAAC;IAAA7H,cAAA,GAAAoB,CAAA;IAElC,IAAI,IAAI,CAACyB,eAAe,CAACiC,MAAM,GAAG,IAAI,CAAChC,cAAc,EAAE;MAAA;MAAA9C,cAAA,GAAAsB,CAAA;MAAAtB,cAAA,GAAAoB,CAAA;MACrD,IAAI,CAACyB,eAAe,GAAG,IAAI,CAACA,eAAe,CAAC8H,KAAK,CAAC,CAAC,IAAI,CAAC7H,cAAc,CAAC;IACzE,CAAC;IAAA;IAAA;MAAA9C,cAAA,GAAAsB,CAAA;IAAA;EACH;EAEA;;;EAGOsJ,kBAAkBA,CAACC,KAAc;IAAA;IAAA7K,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IACtC,IAAIyJ,KAAK,EAAE;MAAA;MAAA7K,cAAA,GAAAsB,CAAA;MAAAtB,cAAA,GAAAoB,CAAA;MACT,OAAO,IAAI,CAACyB,eAAe,CAAC8H,KAAK,CAAC,CAACE,KAAK,CAAC;IAC3C,CAAC;IAAA;IAAA;MAAA7K,cAAA,GAAAsB,CAAA;IAAA;IAAAtB,cAAA,GAAAoB,CAAA;IACD,OAAO,CAAC,GAAG,IAAI,CAACyB,eAAe,CAAC;EAClC;EAEA;;;EAGOiI,uBAAuBA,CAAA;IAAA;IAAA9K,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IAC5B,OAAO,IAAIsB,GAAG,CAAC,IAAI,CAACD,eAAe,CAAC;EACtC;EAEA;;;EAGOsI,sBAAsBA,CAAA;IAAA;IAAA/K,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IAC3B,OAAO;MAAE,GAAG,IAAI,CAACuB;IAAa,CAAE;EAClC;EAEA;;;EAGO,MAAMqI,iBAAiBA,CAAA;IAAA;IAAAhL,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IAC5Be,QAAA,CAAAyB,MAAM,CAACC,IAAI,CAAC,2BAA2B,CAAC;IAAC;IAAA7D,cAAA,GAAAoB,CAAA;IAEzC,IAAI,CAACuB,aAAa,GAAG;MACnBU,OAAO,EAAE,KAAK;MACdC,QAAQ,EAAE,EAAE;MACZC,OAAO,EAAE,EAAE;MACXC,aAAa,EAAE,MAAM;MACrBC,iBAAiB,EAAE;KACpB;IAAC;IAAAzD,cAAA,GAAAoB,CAAA;IAEF,IAAI,CAACuE,IAAI,CAAC,qBAAqB,CAAC;EAClC;EAEA;;;EAGO,MAAMsF,eAAeA,CAACC,YAAoB,EAAEhE,OAAA;EAAA;EAAA,CAAAlH,cAAA,GAAAsB,CAAA,WAA+B,EAAE;IAAA;IAAAtB,cAAA,GAAAqB,CAAA;IAClF,MAAMkF,QAAQ;IAAA;IAAA,CAAAvG,cAAA,GAAAoB,CAAA,SAAG,IAAI,CAACoB,kBAAkB,CAAC2I,IAAI,CAAC/J,CAAC,IAAI;MAAA;MAAApB,cAAA,GAAAqB,CAAA;MAAArB,cAAA,GAAAoB,CAAA;MAAA,OAAAA,CAAC,CAACP,IAAI,KAAKqK,YAAY;IAAZ,CAAY,CAAC;IAAC;IAAAlL,cAAA,GAAAoB,CAAA;IAE5E,IAAI,CAACmF,QAAQ,EAAE;MAAA;MAAAvG,cAAA,GAAAsB,CAAA;MAAAtB,cAAA,GAAAoB,CAAA;MACb,MAAM,IAAIkH,KAAK,CAAC,gCAAgC4C,YAAY,EAAE,CAAC;IACjE,CAAC;IAAA;IAAA;MAAAlL,cAAA,GAAAsB,CAAA;IAAA;IAAAtB,cAAA,GAAAoB,CAAA;IAED,OAAO,MAAM,IAAI,CAACoF,uBAAuB,CAACD,QAAQ,EAAEW,OAAO,CAAC;EAC9D;EAEA;;;EAGOkE,mBAAmBA,CAAC7E,QAA0B;IAAA;IAAAvG,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IACnD,IAAI,CAACoB,kBAAkB,CAACkI,IAAI,CAACnE,QAAQ,CAAC;IAAC;IAAAvG,cAAA,GAAAoB,CAAA;IACvC,IAAI,CAACoB,kBAAkB,CAACwE,IAAI,CAAC,CAACC,CAAC,EAAE3F,CAAC,KAAK;MAAA;MAAAtB,cAAA,GAAAqB,CAAA;MAAArB,cAAA,GAAAoB,CAAA;MAAA,OAAAE,CAAC,CAACwC,QAAQ,GAAGmD,CAAC,CAACnD,QAAQ;IAAR,CAAQ,CAAC;IAAC;IAAA9D,cAAA,GAAAoB,CAAA;IAEhEe,QAAA,CAAAyB,MAAM,CAACC,IAAI,CAAC,qCAAqC0C,QAAQ,CAAC1F,IAAI,EAAE,CAAC;EACnE;EAEA;;;EAGOwK,sBAAsBA,CAACH,YAAoB;IAAA;IAAAlL,cAAA,GAAAqB,CAAA;IAChD,MAAMiK,KAAK;IAAA;IAAA,CAAAtL,cAAA,GAAAoB,CAAA,SAAG,IAAI,CAACoB,kBAAkB,CAAC+I,SAAS,CAACnK,CAAC,IAAI;MAAA;MAAApB,cAAA,GAAAqB,CAAA;MAAArB,cAAA,GAAAoB,CAAA;MAAA,OAAAA,CAAC,CAACP,IAAI,KAAKqK,YAAY;IAAZ,CAAY,CAAC;IAAC;IAAAlL,cAAA,GAAAoB,CAAA;IAE9E,IAAIkK,KAAK,IAAI,CAAC,EAAE;MAAA;MAAAtL,cAAA,GAAAsB,CAAA;MAAAtB,cAAA,GAAAoB,CAAA;MACd,IAAI,CAACoB,kBAAkB,CAACgJ,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;MAAC;MAAAtL,cAAA,GAAAoB,CAAA;MACzCe,QAAA,CAAAyB,MAAM,CAACC,IAAI,CAAC,gCAAgCqH,YAAY,EAAE,CAAC;MAAC;MAAAlL,cAAA,GAAAoB,CAAA;MAC5D,OAAO,IAAI;IACb,CAAC;IAAA;IAAA;MAAApB,cAAA,GAAAsB,CAAA;IAAA;IAAAtB,cAAA,GAAAoB,CAAA;IAED,OAAO,KAAK;EACd;EAEA;;;EAGOqK,qBAAqBA,CAAA;IAAA;IAAAzL,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IAC1B,OAAO,CAAC,GAAG,IAAI,CAACoB,kBAAkB,CAAC;EACrC;EAEA;;;EAGO,MAAMkJ,QAAQA,CAAA;IAAA;IAAA1L,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IACnB,IAAI;MAAA;MAAApB,cAAA,GAAAoB,CAAA;MACFe,QAAA,CAAAyB,MAAM,CAACC,IAAI,CAAC,0CAA0C,CAAC;MAEvD;MAAA;MAAA7D,cAAA,GAAAoB,CAAA;MACA,IAAI,CAACqB,eAAe,CAACkJ,KAAK,EAAE;MAAC;MAAA3L,cAAA,GAAAoB,CAAA;MAC7B,IAAI,CAACyB,eAAe,GAAG,EAAE;MAAC;MAAA7C,cAAA,GAAAoB,CAAA;MAC1B,IAAI,CAACoB,kBAAkB,GAAG,EAAE;MAAC;MAAAxC,cAAA,GAAAoB,CAAA;MAE7B,IAAI,CAACwB,aAAa,GAAG,KAAK;MAAC;MAAA5C,cAAA,GAAAoB,CAAA;MAE3Be,QAAA,CAAAyB,MAAM,CAACC,IAAI,CAAC,2CAA2C,CAAC;IAE1D,CAAC,CAAC,OAAOuB,KAAK,EAAE;MAAA;MAAApF,cAAA,GAAAoB,CAAA;MACde,QAAA,CAAAyB,MAAM,CAACwB,KAAK,CAAC,+CAA+C,EAAEA,KAAK,CAAC;MAAC;MAAApF,cAAA,GAAAoB,CAAA;MACrE,MAAMgE,KAAK;IACb;EACF;;AACD;AAAApF,cAAA,GAAAoB,CAAA;AA55BDwK,OAAA,CAAAxJ,kBAAA,GAAAA,kBAAA","ignoreList":[]}