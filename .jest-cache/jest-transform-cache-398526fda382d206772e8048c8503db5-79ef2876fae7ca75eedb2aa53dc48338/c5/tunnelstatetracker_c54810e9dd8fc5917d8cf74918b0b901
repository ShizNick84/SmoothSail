657e0f8afdd66a1964e7f7d12c18fb66
"use strict";

/* istanbul ignore next */
function cov_2mv9rljmpk() {
  var path = "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\tunnel-state-tracker.ts";
  var hash = "4b25a4a4d2636f6f65f8f9a4561c9ad1fb67e7b2";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\tunnel-state-tracker.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 36
        }
      },
      "2": {
        start: {
          line: 4,
          column: 17
        },
        end: {
          line: 4,
          column: 34
        }
      },
      "3": {
        start: {
          line: 5,
          column: 29
        },
        end: {
          line: 5,
          column: 60
        }
      },
      "4": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 16
        }
      },
      "5": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 29
        }
      },
      "6": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 38
        }
      },
      "7": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 39
        }
      },
      "8": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 41
        }
      },
      "9": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 36
        }
      },
      "10": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 61
        }
      },
      "11": {
        start: {
          line: 30,
          column: 29
        },
        end: {
          line: 30,
          column: 42
        }
      },
      "12": {
        start: {
          line: 31,
          column: 20
        },
        end: {
          line: 31,
          column: 30
        }
      },
      "13": {
        start: {
          line: 33,
          column: 34
        },
        end: {
          line: 33,
          column: 79
        }
      },
      "14": {
        start: {
          line: 34,
          column: 25
        },
        end: {
          line: 34,
          column: 68
        }
      },
      "15": {
        start: {
          line: 36,
          column: 33
        },
        end: {
          line: 43,
          column: 9
        }
      },
      "16": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 45,
          column: 59
        }
      },
      "17": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 46,
          column: 52
        }
      },
      "18": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 94
        }
      },
      "19": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 50,
          column: 83
        }
      },
      "20": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 57,
          column: 11
        }
      },
      "21": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 59,
          column: 52
        }
      },
      "22": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 61,
          column: 81
        }
      },
      "23": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 70,
          column: 52
        }
      },
      "24": {
        start: {
          line: 80,
          column: 24
        },
        end: {
          line: 80,
          column: 65
        }
      },
      "25": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 81,
          column: 60
        }
      },
      "26": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 90,
          column: 49
        }
      },
      "27": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 98,
          column: 40
        }
      },
      "28": {
        start: {
          line: 107,
          column: 28
        },
        end: {
          line: 107,
          column: 30
        }
      },
      "29": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 112,
          column: 9
        }
      },
      "30": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 111,
          column: 13
        }
      },
      "31": {
        start: {
          line: 110,
          column: 16
        },
        end: {
          line: 110,
          column: 47
        }
      },
      "32": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 113,
          column: 27
        }
      },
      "33": {
        start: {
          line: 121,
          column: 25
        },
        end: {
          line: 121,
          column: 61
        }
      },
      "34": {
        start: {
          line: 122,
          column: 33
        },
        end: {
          line: 122,
          column: 48
        }
      },
      "35": {
        start: {
          line: 123,
          column: 34
        },
        end: {
          line: 123,
          column: 111
        }
      },
      "36": {
        start: {
          line: 124,
          column: 34
        },
        end: {
          line: 124,
          column: 108
        }
      },
      "37": {
        start: {
          line: 125,
          column: 35
        },
        end: {
          line: 127,
          column: 15
        }
      },
      "38": {
        start: {
          line: 126,
          column: 46
        },
        end: {
          line: 126,
          column: 69
        }
      },
      "39": {
        start: {
          line: 128,
          column: 29
        },
        end: {
          line: 130,
          column: 15
        }
      },
      "40": {
        start: {
          line: 129,
          column: 46
        },
        end: {
          line: 129,
          column: 69
        }
      },
      "41": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 137,
          column: 10
        }
      },
      "42": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 145,
          column: 47
        }
      },
      "43": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 146,
          column: 48
        }
      },
      "44": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 147,
          column: 50
        }
      },
      "45": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 148,
          column: 45
        }
      },
      "46": {
        start: {
          line: 149,
          column: 8
        },
        end: {
          line: 149,
          column: 82
        }
      },
      "47": {
        start: {
          line: 155,
          column: 8
        },
        end: {
          line: 155,
          column: 34
        }
      },
      "48": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 156,
          column: 35
        }
      },
      "49": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 157,
          column: 37
        }
      },
      "50": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 158,
          column: 32
        }
      },
      "51": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 159,
          column: 54
        }
      },
      "52": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 173,
          column: 9
        }
      },
      "53": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 172,
          column: 52
        }
      },
      "54": {
        start: {
          line: 174,
          column: 24
        },
        end: {
          line: 174,
          column: 59
        }
      },
      "55": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 180,
          column: 11
        }
      },
      "56": {
        start: {
          line: 182,
          column: 31
        },
        end: {
          line: 182,
          column: 35
        }
      },
      "57": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 185,
          column: 9
        }
      },
      "58": {
        start: {
          line: 184,
          column: 12
        },
        end: {
          line: 184,
          column: 63
        }
      },
      "59": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 217,
          column: 9
        }
      },
      "60": {
        start: {
          line: 197,
          column: 12
        },
        end: {
          line: 216,
          column: 15
        }
      },
      "61": {
        start: {
          line: 218,
          column: 22
        },
        end: {
          line: 218,
          column: 55
        }
      },
      "62": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 220,
          column: 59
        }
      },
      "63": {
        start: {
          line: 222,
          column: 8
        },
        end: {
          line: 234,
          column: 9
        }
      },
      "64": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 223,
          column: 42
        }
      },
      "65": {
        start: {
          line: 225,
          column: 12
        },
        end: {
          line: 227,
          column: 13
        }
      },
      "66": {
        start: {
          line: 226,
          column: 16
        },
        end: {
          line: 226,
          column: 51
        }
      },
      "67": {
        start: {
          line: 228,
          column: 12
        },
        end: {
          line: 230,
          column: 13
        }
      },
      "68": {
        start: {
          line: 229,
          column: 16
        },
        end: {
          line: 229,
          column: 52
        }
      },
      "69": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 233,
          column: 44
        }
      },
      "70": {
        start: {
          line: 236,
          column: 8
        },
        end: {
          line: 244,
          column: 9
        }
      },
      "71": {
        start: {
          line: 237,
          column: 12
        },
        end: {
          line: 237,
          column: 39
        }
      },
      "72": {
        start: {
          line: 239,
          column: 13
        },
        end: {
          line: 244,
          column: 9
        }
      },
      "73": {
        start: {
          line: 240,
          column: 12
        },
        end: {
          line: 240,
          column: 42
        }
      },
      "74": {
        start: {
          line: 242,
          column: 13
        },
        end: {
          line: 244,
          column: 9
        }
      },
      "75": {
        start: {
          line: 243,
          column: 12
        },
        end: {
          line: 243,
          column: 38
        }
      },
      "76": {
        start: {
          line: 246,
          column: 8
        },
        end: {
          line: 248,
          column: 9
        }
      },
      "77": {
        start: {
          line: 247,
          column: 12
        },
        end: {
          line: 247,
          column: 90
        }
      },
      "78": {
        start: {
          line: 250,
          column: 26
        },
        end: {
          line: 250,
          column: 65
        }
      },
      "79": {
        start: {
          line: 251,
          column: 8
        },
        end: {
          line: 253,
          column: 9
        }
      },
      "80": {
        start: {
          line: 252,
          column: 12
        },
        end: {
          line: 252,
          column: 70
        }
      },
      "81": {
        start: {
          line: 255,
          column: 8
        },
        end: {
          line: 257,
          column: 9
        }
      },
      "82": {
        start: {
          line: 256,
          column: 12
        },
        end: {
          line: 256,
          column: 41
        }
      },
      "83": {
        start: {
          line: 267,
          column: 8
        },
        end: {
          line: 283,
          column: 9
        }
      },
      "84": {
        start: {
          line: 269,
          column: 16
        },
        end: {
          line: 269,
          column: 81
        }
      },
      "85": {
        start: {
          line: 270,
          column: 16
        },
        end: {
          line: 270,
          column: 22
        }
      },
      "86": {
        start: {
          line: 272,
          column: 16
        },
        end: {
          line: 272,
          column: 74
        }
      },
      "87": {
        start: {
          line: 273,
          column: 16
        },
        end: {
          line: 273,
          column: 22
        }
      },
      "88": {
        start: {
          line: 275,
          column: 16
        },
        end: {
          line: 275,
          column: 76
        }
      },
      "89": {
        start: {
          line: 276,
          column: 16
        },
        end: {
          line: 276,
          column: 22
        }
      },
      "90": {
        start: {
          line: 278,
          column: 16
        },
        end: {
          line: 278,
          column: 79
        }
      },
      "91": {
        start: {
          line: 279,
          column: 16
        },
        end: {
          line: 279,
          column: 22
        }
      },
      "92": {
        start: {
          line: 281,
          column: 16
        },
        end: {
          line: 281,
          column: 80
        }
      },
      "93": {
        start: {
          line: 282,
          column: 16
        },
        end: {
          line: 282,
          column: 22
        }
      },
      "94": {
        start: {
          line: 292,
          column: 29
        },
        end: {
          line: 292,
          column: 63
        }
      },
      "95": {
        start: {
          line: 293,
          column: 27
        },
        end: {
          line: 293,
          column: 59
        }
      },
      "96": {
        start: {
          line: 294,
          column: 30
        },
        end: {
          line: 294,
          column: 68
        }
      },
      "97": {
        start: {
          line: 296,
          column: 26
        },
        end: {
          line: 296,
          column: 27
        }
      },
      "98": {
        start: {
          line: 297,
          column: 8
        },
        end: {
          line: 308,
          column: 9
        }
      },
      "99": {
        start: {
          line: 298,
          column: 12
        },
        end: {
          line: 298,
          column: 49
        }
      },
      "100": {
        start: {
          line: 300,
          column: 35
        },
        end: {
          line: 300,
          column: 128
        }
      },
      "101": {
        start: {
          line: 300,
          column: 65
        },
        end: {
          line: 300,
          column: 120
        }
      },
      "102": {
        start: {
          line: 301,
          column: 12
        },
        end: {
          line: 303,
          column: 13
        }
      },
      "103": {
        start: {
          line: 302,
          column: 16
        },
        end: {
          line: 302,
          column: 79
        }
      },
      "104": {
        start: {
          line: 305,
          column: 12
        },
        end: {
          line: 307,
          column: 13
        }
      },
      "105": {
        start: {
          line: 306,
          column: 16
        },
        end: {
          line: 306,
          column: 62
        }
      },
      "106": {
        start: {
          line: 309,
          column: 8
        },
        end: {
          line: 315,
          column: 10
        }
      },
      "107": {
        start: {
          line: 318,
          column: 0
        },
        end: {
          line: 318,
          column: 48
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 11,
            column: 5
          }
        },
        loc: {
          start: {
            line: 11,
            column: 24
          },
          end: {
            line: 19,
            column: 5
          }
        },
        line: 11
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 29,
            column: 4
          },
          end: {
            line: 29,
            column: 5
          }
        },
        loc: {
          start: {
            line: 29,
            column: 72
          },
          end: {
            line: 62,
            column: 5
          }
        },
        line: 29
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 69,
            column: 4
          },
          end: {
            line: 69,
            column: 5
          }
        },
        loc: {
          start: {
            line: 69,
            column: 34
          },
          end: {
            line: 71,
            column: 5
          }
        },
        line: 69
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 79,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        },
        loc: {
          start: {
            line: 79,
            column: 41
          },
          end: {
            line: 82,
            column: 5
          }
        },
        line: 79
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 89,
            column: 4
          },
          end: {
            line: 89,
            column: 5
          }
        },
        loc: {
          start: {
            line: 89,
            column: 32
          },
          end: {
            line: 91,
            column: 5
          }
        },
        line: 89
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 97,
            column: 4
          },
          end: {
            line: 97,
            column: 5
          }
        },
        loc: {
          start: {
            line: 97,
            column: 23
          },
          end: {
            line: 99,
            column: 5
          }
        },
        line: 97
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 106,
            column: 4
          },
          end: {
            line: 106,
            column: 5
          }
        },
        loc: {
          start: {
            line: 106,
            column: 33
          },
          end: {
            line: 114,
            column: 5
          }
        },
        line: 106
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 120,
            column: 4
          },
          end: {
            line: 120,
            column: 5
          }
        },
        loc: {
          start: {
            line: 120,
            column: 29
          },
          end: {
            line: 138,
            column: 5
          }
        },
        line: 120
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 126,
            column: 30
          },
          end: {
            line: 126,
            column: 31
          }
        },
        loc: {
          start: {
            line: 126,
            column: 46
          },
          end: {
            line: 126,
            column: 69
          }
        },
        line: 126
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 129,
            column: 30
          },
          end: {
            line: 129,
            column: 31
          }
        },
        loc: {
          start: {
            line: 129,
            column: 46
          },
          end: {
            line: 129,
            column: 69
          }
        },
        line: 129
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 144,
            column: 4
          },
          end: {
            line: 144,
            column: 5
          }
        },
        loc: {
          start: {
            line: 144,
            column: 31
          },
          end: {
            line: 150,
            column: 5
          }
        },
        line: 144
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 154,
            column: 4
          },
          end: {
            line: 154,
            column: 5
          }
        },
        loc: {
          start: {
            line: 154,
            column: 22
          },
          end: {
            line: 160,
            column: 5
          }
        },
        line: 154
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 170,
            column: 4
          },
          end: {
            line: 170,
            column: 5
          }
        },
        loc: {
          start: {
            line: 170,
            column: 69
          },
          end: {
            line: 186,
            column: 5
          }
        },
        line: 170
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 195,
            column: 4
          },
          end: {
            line: 195,
            column: 5
          }
        },
        loc: {
          start: {
            line: 195,
            column: 74
          },
          end: {
            line: 258,
            column: 5
          }
        },
        line: 195
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 266,
            column: 4
          },
          end: {
            line: 266,
            column: 5
          }
        },
        loc: {
          start: {
            line: 266,
            column: 72
          },
          end: {
            line: 284,
            column: 5
          }
        },
        line: 266
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 291,
            column: 4
          },
          end: {
            line: 291,
            column: 5
          }
        },
        loc: {
          start: {
            line: 291,
            column: 38
          },
          end: {
            line: 316,
            column: 5
          }
        },
        line: 291
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 300,
            column: 56
          },
          end: {
            line: 300,
            column: 57
          }
        },
        loc: {
          start: {
            line: 300,
            column: 65
          },
          end: {
            line: 300,
            column: 120
          }
        },
        line: 300
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 33,
            column: 34
          },
          end: {
            line: 33,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 33,
            column: 34
          },
          end: {
            line: 33,
            column: 72
          }
        }, {
          start: {
            line: 33,
            column: 76
          },
          end: {
            line: 33,
            column: 79
          }
        }],
        line: 33
      },
      "1": {
        loc: {
          start: {
            line: 80,
            column: 24
          },
          end: {
            line: 80,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 80,
            column: 24
          },
          end: {
            line: 80,
            column: 59
          }
        }, {
          start: {
            line: 80,
            column: 63
          },
          end: {
            line: 80,
            column: 65
          }
        }],
        line: 80
      },
      "2": {
        loc: {
          start: {
            line: 81,
            column: 15
          },
          end: {
            line: 81,
            column: 59
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 81,
            column: 23
          },
          end: {
            line: 81,
            column: 44
          }
        }, {
          start: {
            line: 81,
            column: 47
          },
          end: {
            line: 81,
            column: 59
          }
        }],
        line: 81
      },
      "3": {
        loc: {
          start: {
            line: 109,
            column: 12
          },
          end: {
            line: 111,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 109,
            column: 12
          },
          end: {
            line: 111,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 109
      },
      "4": {
        loc: {
          start: {
            line: 125,
            column: 35
          },
          end: {
            line: 127,
            column: 15
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 126,
            column: 14
          },
          end: {
            line: 126,
            column: 92
          }
        }, {
          start: {
            line: 127,
            column: 14
          },
          end: {
            line: 127,
            column: 15
          }
        }],
        line: 125
      },
      "5": {
        loc: {
          start: {
            line: 128,
            column: 29
          },
          end: {
            line: 130,
            column: 15
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 129,
            column: 14
          },
          end: {
            line: 129,
            column: 92
          }
        }, {
          start: {
            line: 130,
            column: 14
          },
          end: {
            line: 130,
            column: 15
          }
        }],
        line: 128
      },
      "6": {
        loc: {
          start: {
            line: 171,
            column: 8
          },
          end: {
            line: 173,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 171,
            column: 8
          },
          end: {
            line: 173,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 171
      },
      "7": {
        loc: {
          start: {
            line: 183,
            column: 8
          },
          end: {
            line: 185,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 183,
            column: 8
          },
          end: {
            line: 185,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 183
      },
      "8": {
        loc: {
          start: {
            line: 196,
            column: 8
          },
          end: {
            line: 217,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 196,
            column: 8
          },
          end: {
            line: 217,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 196
      },
      "9": {
        loc: {
          start: {
            line: 222,
            column: 8
          },
          end: {
            line: 234,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 222,
            column: 8
          },
          end: {
            line: 234,
            column: 9
          }
        }, {
          start: {
            line: 232,
            column: 13
          },
          end: {
            line: 234,
            column: 9
          }
        }],
        line: 222
      },
      "10": {
        loc: {
          start: {
            line: 225,
            column: 12
          },
          end: {
            line: 227,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 225,
            column: 12
          },
          end: {
            line: 227,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 225
      },
      "11": {
        loc: {
          start: {
            line: 228,
            column: 12
          },
          end: {
            line: 230,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 228,
            column: 12
          },
          end: {
            line: 230,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 228
      },
      "12": {
        loc: {
          start: {
            line: 236,
            column: 8
          },
          end: {
            line: 244,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 236,
            column: 8
          },
          end: {
            line: 244,
            column: 9
          }
        }, {
          start: {
            line: 239,
            column: 13
          },
          end: {
            line: 244,
            column: 9
          }
        }],
        line: 236
      },
      "13": {
        loc: {
          start: {
            line: 239,
            column: 13
          },
          end: {
            line: 244,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 239,
            column: 13
          },
          end: {
            line: 244,
            column: 9
          }
        }, {
          start: {
            line: 242,
            column: 13
          },
          end: {
            line: 244,
            column: 9
          }
        }],
        line: 239
      },
      "14": {
        loc: {
          start: {
            line: 239,
            column: 17
          },
          end: {
            line: 239,
            column: 141
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 239,
            column: 17
          },
          end: {
            line: 239,
            column: 76
          }
        }, {
          start: {
            line: 239,
            column: 80
          },
          end: {
            line: 239,
            column: 141
          }
        }],
        line: 239
      },
      "15": {
        loc: {
          start: {
            line: 242,
            column: 13
          },
          end: {
            line: 244,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 242,
            column: 13
          },
          end: {
            line: 244,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 242
      },
      "16": {
        loc: {
          start: {
            line: 246,
            column: 8
          },
          end: {
            line: 248,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 246,
            column: 8
          },
          end: {
            line: 248,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 246
      },
      "17": {
        loc: {
          start: {
            line: 251,
            column: 8
          },
          end: {
            line: 253,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 251,
            column: 8
          },
          end: {
            line: 253,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 251
      },
      "18": {
        loc: {
          start: {
            line: 255,
            column: 8
          },
          end: {
            line: 257,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 255,
            column: 8
          },
          end: {
            line: 257,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 255
      },
      "19": {
        loc: {
          start: {
            line: 267,
            column: 8
          },
          end: {
            line: 283,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 268,
            column: 12
          },
          end: {
            line: 270,
            column: 22
          }
        }, {
          start: {
            line: 271,
            column: 12
          },
          end: {
            line: 273,
            column: 22
          }
        }, {
          start: {
            line: 274,
            column: 12
          },
          end: {
            line: 276,
            column: 22
          }
        }, {
          start: {
            line: 277,
            column: 12
          },
          end: {
            line: 279,
            column: 22
          }
        }, {
          start: {
            line: 280,
            column: 12
          },
          end: {
            line: 282,
            column: 22
          }
        }],
        line: 267
      },
      "20": {
        loc: {
          start: {
            line: 297,
            column: 8
          },
          end: {
            line: 308,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 297,
            column: 8
          },
          end: {
            line: 308,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 297
      },
      "21": {
        loc: {
          start: {
            line: 301,
            column: 12
          },
          end: {
            line: 303,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 301,
            column: 12
          },
          end: {
            line: 303,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 301
      },
      "22": {
        loc: {
          start: {
            line: 305,
            column: 12
          },
          end: {
            line: 307,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 305,
            column: 12
          },
          end: {
            line: 307,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 305
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0, 0, 0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "4b25a4a4d2636f6f65f8f9a4561c9ad1fb67e7b2"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2mv9rljmpk = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2mv9rljmpk();
cov_2mv9rljmpk().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2mv9rljmpk().s[1]++;
exports.TunnelStateTracker = void 0;
const events_1 =
/* istanbul ignore next */
(cov_2mv9rljmpk().s[2]++, require("events"));
const ssh_tunnel_manager_1 =
/* istanbul ignore next */
(cov_2mv9rljmpk().s[3]++, require("./ssh-tunnel-manager"));
/**
 * Tunnel State Tracker
 * Tracks and manages SSH tunnel connection states with comprehensive history and analytics
 */
class TunnelStateTracker extends
/* istanbul ignore next */
(events_1.EventEmitter) {
  constructor(logger) {
    /* istanbul ignore next */
    cov_2mv9rljmpk().f[0]++;
    cov_2mv9rljmpk().s[4]++;
    super();
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[5]++;
    this.logger = logger;
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[6]++;
    this.stateHistory = new Map();
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[7]++;
    this.currentStates = new Map();
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[8]++;
    this.stateTimestamps = new Map();
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[9]++;
    this.statistics = new Map();
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[10]++;
    this.logger.info('Tunnel State Tracker initialized');
  }
  /**
   * Track connection state change
   * Records state transitions and updates statistics
   *
   * @param connection - Tunnel connection
   * @param previousState - Previous connection state
   * @param currentState - Current connection state
   * @param metadata - Additional metadata for the state change
   */
  trackStateChange(connection, previousState, currentState, metadata) {
    /* istanbul ignore next */
    cov_2mv9rljmpk().f[1]++;
    const connectionId =
    /* istanbul ignore next */
    (cov_2mv9rljmpk().s[11]++, connection.id);
    const now =
    /* istanbul ignore next */
    (cov_2mv9rljmpk().s[12]++, new Date());
    // Calculate duration in previous state
    const previousTimestamp =
    /* istanbul ignore next */
    (cov_2mv9rljmpk().s[13]++,
    /* istanbul ignore next */
    (cov_2mv9rljmpk().b[0][0]++, this.stateTimestamps.get(connectionId)) ||
    /* istanbul ignore next */
    (cov_2mv9rljmpk().b[0][1]++, now));
    const duration =
    /* istanbul ignore next */
    (cov_2mv9rljmpk().s[14]++, now.getTime() - previousTimestamp.getTime());
    // Create state change event
    const stateChangeEvent =
    /* istanbul ignore next */
    (cov_2mv9rljmpk().s[15]++, {
      connectionId,
      previousState,
      currentState,
      timestamp: now,
      duration,
      metadata
    });
    // Update current state tracking
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[16]++;
    this.currentStates.set(connectionId, currentState);
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[17]++;
    this.stateTimestamps.set(connectionId, now);
    // Add to history
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[18]++;
    this.addToHistory(connectionId, previousState, previousTimestamp, duration, metadata);
    // Update statistics
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[19]++;
    this.updateStatistics(connectionId, previousState, currentState, duration);
    // Log state change
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[20]++;
    this.logger.info(`Tunnel state changed: ${connectionId}`, {
      from: previousState,
      to: currentState,
      duration: `${duration}ms`,
      metadata
    });
    // Emit state change event
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[21]++;
    this.emit('stateChanged', stateChangeEvent);
    // Emit specific state events
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[22]++;
    this.emitStateSpecificEvents(connection, currentState, stateChangeEvent);
  }
  /**
   * Get current state of a connection
   *
   * @param connectionId - Connection identifier
   * @returns Current tunnel state or undefined
   */
  getCurrentState(connectionId) {
    /* istanbul ignore next */
    cov_2mv9rljmpk().f[2]++;
    cov_2mv9rljmpk().s[23]++;
    return this.currentStates.get(connectionId);
  }
  /**
   * Get state history for a connection
   *
   * @param connectionId - Connection identifier
   * @param limit - Maximum number of history entries to return
   * @returns Array of state history entries
   */
  getStateHistory(connectionId, limit) {
    /* istanbul ignore next */
    cov_2mv9rljmpk().f[3]++;
    const history =
    /* istanbul ignore next */
    (cov_2mv9rljmpk().s[24]++,
    /* istanbul ignore next */
    (cov_2mv9rljmpk().b[1][0]++, this.stateHistory.get(connectionId)) ||
    /* istanbul ignore next */
    (cov_2mv9rljmpk().b[1][1]++, []));
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[25]++;
    return limit ?
    /* istanbul ignore next */
    (cov_2mv9rljmpk().b[2][0]++, history.slice(-limit)) :
    /* istanbul ignore next */
    (cov_2mv9rljmpk().b[2][1]++, [...history]);
  }
  /**
   * Get connection statistics
   *
   * @param connectionId - Connection identifier
   * @returns Connection statistics or undefined
   */
  getStatistics(connectionId) {
    /* istanbul ignore next */
    cov_2mv9rljmpk().f[4]++;
    cov_2mv9rljmpk().s[26]++;
    return this.statistics.get(connectionId);
  }
  /**
   * Get all connection statistics
   *
   * @returns Map of all connection statistics
   */
  getAllStatistics() {
    /* istanbul ignore next */
    cov_2mv9rljmpk().f[5]++;
    cov_2mv9rljmpk().s[27]++;
    return new Map(this.statistics);
  }
  /**
   * Get connections by current state
   *
   * @param state - Tunnel state to filter by
   * @returns Array of connection IDs in the specified state
   */
  getConnectionsByState(state) {
    /* istanbul ignore next */
    cov_2mv9rljmpk().f[6]++;
    const connections =
    /* istanbul ignore next */
    (cov_2mv9rljmpk().s[28]++, []);
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[29]++;
    for (const [connectionId, currentState] of this.currentStates.entries()) {
      /* istanbul ignore next */
      cov_2mv9rljmpk().s[30]++;
      if (currentState === state) {
        /* istanbul ignore next */
        cov_2mv9rljmpk().b[3][0]++;
        cov_2mv9rljmpk().s[31]++;
        connections.push(connectionId);
      } else
      /* istanbul ignore next */
      {
        cov_2mv9rljmpk().b[3][1]++;
      }
    }
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[32]++;
    return connections;
  }
  /**
   * Get overall system health metrics
   *
   * @returns System health metrics
   */
  getSystemHealthMetrics() {
    /* istanbul ignore next */
    cov_2mv9rljmpk().f[7]++;
    const allStats =
    /* istanbul ignore next */
    (cov_2mv9rljmpk().s[33]++, Array.from(this.statistics.values()));
    const totalConnections =
    /* istanbul ignore next */
    (cov_2mv9rljmpk().s[34]++, allStats.length);
    const activeConnections =
    /* istanbul ignore next */
    (cov_2mv9rljmpk().s[35]++, this.getConnectionsByState(ssh_tunnel_manager_1.TunnelState.CONNECTED).length);
    const failedConnections =
    /* istanbul ignore next */
    (cov_2mv9rljmpk().s[36]++, this.getConnectionsByState(ssh_tunnel_manager_1.TunnelState.FAILED).length);
    const averageReliability =
    /* istanbul ignore next */
    (cov_2mv9rljmpk().s[37]++, totalConnections > 0 ?
    /* istanbul ignore next */
    (cov_2mv9rljmpk().b[4][0]++, allStats.reduce((sum, stats) => {
      /* istanbul ignore next */
      cov_2mv9rljmpk().f[8]++;
      cov_2mv9rljmpk().s[38]++;
      return sum + stats.reliability;
    }, 0) / totalConnections) :
    /* istanbul ignore next */
    (cov_2mv9rljmpk().b[4][1]++, 0));
    const systemUptime =
    /* istanbul ignore next */
    (cov_2mv9rljmpk().s[39]++, totalConnections > 0 ?
    /* istanbul ignore next */
    (cov_2mv9rljmpk().b[5][0]++, allStats.reduce((sum, stats) => {
      /* istanbul ignore next */
      cov_2mv9rljmpk().f[9]++;
      cov_2mv9rljmpk().s[40]++;
      return sum + stats.totalUptime;
    }, 0) / totalConnections) :
    /* istanbul ignore next */
    (cov_2mv9rljmpk().b[5][1]++, 0));
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[41]++;
    return {
      totalConnections,
      activeConnections,
      failedConnections,
      averageReliability,
      systemUptime
    };
  }
  /**
   * Clear history for a connection
   *
   * @param connectionId - Connection identifier
   */
  clearHistory(connectionId) {
    /* istanbul ignore next */
    cov_2mv9rljmpk().f[10]++;
    cov_2mv9rljmpk().s[42]++;
    this.stateHistory.delete(connectionId);
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[43]++;
    this.currentStates.delete(connectionId);
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[44]++;
    this.stateTimestamps.delete(connectionId);
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[45]++;
    this.statistics.delete(connectionId);
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[46]++;
    this.logger.info(`Cleared state history for connection: ${connectionId}`);
  }
  /**
   * Clear all history
   */
  clearAllHistory() {
    /* istanbul ignore next */
    cov_2mv9rljmpk().f[11]++;
    cov_2mv9rljmpk().s[47]++;
    this.stateHistory.clear();
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[48]++;
    this.currentStates.clear();
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[49]++;
    this.stateTimestamps.clear();
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[50]++;
    this.statistics.clear();
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[51]++;
    this.logger.info('Cleared all state history');
  }
  /**
   * Add entry to state history
   *
   * @param connectionId - Connection identifier
   * @param state - Tunnel state
   * @param timestamp - State timestamp
   * @param duration - Duration in state
   * @param metadata - Additional metadata
   */
  addToHistory(connectionId, state, timestamp, duration, metadata) {
    /* istanbul ignore next */
    cov_2mv9rljmpk().f[12]++;
    cov_2mv9rljmpk().s[52]++;
    if (!this.stateHistory.has(connectionId)) {
      /* istanbul ignore next */
      cov_2mv9rljmpk().b[6][0]++;
      cov_2mv9rljmpk().s[53]++;
      this.stateHistory.set(connectionId, []);
    } else
    /* istanbul ignore next */
    {
      cov_2mv9rljmpk().b[6][1]++;
    }
    const history =
    /* istanbul ignore next */
    (cov_2mv9rljmpk().s[54]++, this.stateHistory.get(connectionId));
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[55]++;
    history.push({
      state,
      timestamp,
      duration,
      metadata
    });
    // Limit history size to prevent memory issues
    const maxHistorySize =
    /* istanbul ignore next */
    (cov_2mv9rljmpk().s[56]++, 1000);
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[57]++;
    if (history.length > maxHistorySize) {
      /* istanbul ignore next */
      cov_2mv9rljmpk().b[7][0]++;
      cov_2mv9rljmpk().s[58]++;
      history.splice(0, history.length - maxHistorySize);
    } else
    /* istanbul ignore next */
    {
      cov_2mv9rljmpk().b[7][1]++;
    }
  }
  /**
   * Update connection statistics
   *
   * @param connectionId - Connection identifier
   * @param previousState - Previous state
   * @param currentState - Current state
   * @param duration - Duration in previous state
   */
  updateStatistics(connectionId, previousState, currentState, duration) {
    /* istanbul ignore next */
    cov_2mv9rljmpk().f[13]++;
    cov_2mv9rljmpk().s[59]++;
    if (!this.statistics.has(connectionId)) {
      /* istanbul ignore next */
      cov_2mv9rljmpk().b[8][0]++;
      cov_2mv9rljmpk().s[60]++;
      this.statistics.set(connectionId, {
        connectionId,
        totalUptime: 0,
        totalDowntime: 0,
        connectionAttempts: 0,
        successfulConnections: 0,
        failedConnections: 0,
        averageConnectionTime: 0,
        longestConnection: 0,
        shortestConnection: Infinity,
        stateDistribution: {
          [ssh_tunnel_manager_1.TunnelState.DISCONNECTED]: 0,
          [ssh_tunnel_manager_1.TunnelState.CONNECTING]: 0,
          [ssh_tunnel_manager_1.TunnelState.CONNECTED]: 0,
          [ssh_tunnel_manager_1.TunnelState.RECONNECTING]: 0,
          [ssh_tunnel_manager_1.TunnelState.FAILED]: 0,
          [ssh_tunnel_manager_1.TunnelState.TERMINATED]: 0
        },
        reliability: 0
      });
    } else
    /* istanbul ignore next */
    {
      cov_2mv9rljmpk().b[8][1]++;
    }
    const stats =
    /* istanbul ignore next */
    (cov_2mv9rljmpk().s[61]++, this.statistics.get(connectionId));
    // Update state distribution
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[62]++;
    stats.stateDistribution[previousState] += duration;
    // Update uptime/downtime
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[63]++;
    if (previousState === ssh_tunnel_manager_1.TunnelState.CONNECTED) {
      /* istanbul ignore next */
      cov_2mv9rljmpk().b[9][0]++;
      cov_2mv9rljmpk().s[64]++;
      stats.totalUptime += duration;
      // Update connection duration statistics
      /* istanbul ignore next */
      cov_2mv9rljmpk().s[65]++;
      if (duration > stats.longestConnection) {
        /* istanbul ignore next */
        cov_2mv9rljmpk().b[10][0]++;
        cov_2mv9rljmpk().s[66]++;
        stats.longestConnection = duration;
      } else
      /* istanbul ignore next */
      {
        cov_2mv9rljmpk().b[10][1]++;
      }
      cov_2mv9rljmpk().s[67]++;
      if (duration < stats.shortestConnection) {
        /* istanbul ignore next */
        cov_2mv9rljmpk().b[11][0]++;
        cov_2mv9rljmpk().s[68]++;
        stats.shortestConnection = duration;
      } else
      /* istanbul ignore next */
      {
        cov_2mv9rljmpk().b[11][1]++;
      }
    } else {
      /* istanbul ignore next */
      cov_2mv9rljmpk().b[9][1]++;
      cov_2mv9rljmpk().s[69]++;
      stats.totalDowntime += duration;
    }
    // Track connection attempts and outcomes
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[70]++;
    if (currentState === ssh_tunnel_manager_1.TunnelState.CONNECTING) {
      /* istanbul ignore next */
      cov_2mv9rljmpk().b[12][0]++;
      cov_2mv9rljmpk().s[71]++;
      stats.connectionAttempts++;
    } else {
      /* istanbul ignore next */
      cov_2mv9rljmpk().b[12][1]++;
      cov_2mv9rljmpk().s[72]++;
      if (
      /* istanbul ignore next */
      (cov_2mv9rljmpk().b[14][0]++, currentState === ssh_tunnel_manager_1.TunnelState.CONNECTED) &&
      /* istanbul ignore next */
      (cov_2mv9rljmpk().b[14][1]++, previousState === ssh_tunnel_manager_1.TunnelState.CONNECTING)) {
        /* istanbul ignore next */
        cov_2mv9rljmpk().b[13][0]++;
        cov_2mv9rljmpk().s[73]++;
        stats.successfulConnections++;
      } else {
        /* istanbul ignore next */
        cov_2mv9rljmpk().b[13][1]++;
        cov_2mv9rljmpk().s[74]++;
        if (currentState === ssh_tunnel_manager_1.TunnelState.FAILED) {
          /* istanbul ignore next */
          cov_2mv9rljmpk().b[15][0]++;
          cov_2mv9rljmpk().s[75]++;
          stats.failedConnections++;
        } else
        /* istanbul ignore next */
        {
          cov_2mv9rljmpk().b[15][1]++;
        }
      }
    }
    // Calculate average connection time
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[76]++;
    if (stats.successfulConnections > 0) {
      /* istanbul ignore next */
      cov_2mv9rljmpk().b[16][0]++;
      cov_2mv9rljmpk().s[77]++;
      stats.averageConnectionTime = stats.totalUptime / stats.successfulConnections;
    } else
    /* istanbul ignore next */
    {
      cov_2mv9rljmpk().b[16][1]++;
    }
    // Calculate reliability percentage
    const totalTime =
    /* istanbul ignore next */
    (cov_2mv9rljmpk().s[78]++, stats.totalUptime + stats.totalDowntime);
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[79]++;
    if (totalTime > 0) {
      /* istanbul ignore next */
      cov_2mv9rljmpk().b[17][0]++;
      cov_2mv9rljmpk().s[80]++;
      stats.reliability = stats.totalUptime / totalTime * 100;
    } else
    /* istanbul ignore next */
    {
      cov_2mv9rljmpk().b[17][1]++;
    }
    // Handle edge case for shortest connection
    cov_2mv9rljmpk().s[81]++;
    if (stats.shortestConnection === Infinity) {
      /* istanbul ignore next */
      cov_2mv9rljmpk().b[18][0]++;
      cov_2mv9rljmpk().s[82]++;
      stats.shortestConnection = 0;
    } else
    /* istanbul ignore next */
    {
      cov_2mv9rljmpk().b[18][1]++;
    }
  }
  /**
   * Emit state-specific events
   *
   * @param connection - Tunnel connection
   * @param currentState - Current state
   * @param stateChangeEvent - State change event
   */
  emitStateSpecificEvents(connection, currentState, stateChangeEvent) {
    /* istanbul ignore next */
    cov_2mv9rljmpk().f[14]++;
    cov_2mv9rljmpk().s[83]++;
    switch (currentState) {
      case ssh_tunnel_manager_1.TunnelState.CONNECTED:
        /* istanbul ignore next */
        cov_2mv9rljmpk().b[19][0]++;
        cov_2mv9rljmpk().s[84]++;
        this.emit('connectionEstablished', connection, stateChangeEvent);
        /* istanbul ignore next */
        cov_2mv9rljmpk().s[85]++;
        break;
      case ssh_tunnel_manager_1.TunnelState.DISCONNECTED:
        /* istanbul ignore next */
        cov_2mv9rljmpk().b[19][1]++;
        cov_2mv9rljmpk().s[86]++;
        this.emit('connectionLost', connection, stateChangeEvent);
        /* istanbul ignore next */
        cov_2mv9rljmpk().s[87]++;
        break;
      case ssh_tunnel_manager_1.TunnelState.FAILED:
        /* istanbul ignore next */
        cov_2mv9rljmpk().b[19][2]++;
        cov_2mv9rljmpk().s[88]++;
        this.emit('connectionFailed', connection, stateChangeEvent);
        /* istanbul ignore next */
        cov_2mv9rljmpk().s[89]++;
        break;
      case ssh_tunnel_manager_1.TunnelState.RECONNECTING:
        /* istanbul ignore next */
        cov_2mv9rljmpk().b[19][3]++;
        cov_2mv9rljmpk().s[90]++;
        this.emit('reconnectionStarted', connection, stateChangeEvent);
        /* istanbul ignore next */
        cov_2mv9rljmpk().s[91]++;
        break;
      case ssh_tunnel_manager_1.TunnelState.TERMINATED:
        /* istanbul ignore next */
        cov_2mv9rljmpk().b[19][4]++;
        cov_2mv9rljmpk().s[92]++;
        this.emit('connectionTerminated', connection, stateChangeEvent);
        /* istanbul ignore next */
        cov_2mv9rljmpk().s[93]++;
        break;
    }
  }
  /**
   * Generate state report for a connection
   *
   * @param connectionId - Connection identifier
   * @returns Detailed state report
   */
  generateStateReport(connectionId) {
    /* istanbul ignore next */
    cov_2mv9rljmpk().f[15]++;
    const currentState =
    /* istanbul ignore next */
    (cov_2mv9rljmpk().s[94]++, this.getCurrentState(connectionId));
    const statistics =
    /* istanbul ignore next */
    (cov_2mv9rljmpk().s[95]++, this.getStatistics(connectionId));
    const recentHistory =
    /* istanbul ignore next */
    (cov_2mv9rljmpk().s[96]++, this.getStateHistory(connectionId, 10));
    // Calculate health score based on reliability and recent activity
    let healthScore =
    /* istanbul ignore next */
    (cov_2mv9rljmpk().s[97]++, 0);
    /* istanbul ignore next */
    cov_2mv9rljmpk().s[98]++;
    if (statistics) {
      /* istanbul ignore next */
      cov_2mv9rljmpk().b[20][0]++;
      cov_2mv9rljmpk().s[99]++;
      healthScore = statistics.reliability;
      // Adjust based on recent failures
      const recentFailures =
      /* istanbul ignore next */
      (cov_2mv9rljmpk().s[100]++, recentHistory.filter(entry => {
        /* istanbul ignore next */
        cov_2mv9rljmpk().f[16]++;
        cov_2mv9rljmpk().s[101]++;
        return entry.state === ssh_tunnel_manager_1.TunnelState.FAILED;
      }).length);
      /* istanbul ignore next */
      cov_2mv9rljmpk().s[102]++;
      if (recentFailures > 0) {
        /* istanbul ignore next */
        cov_2mv9rljmpk().b[21][0]++;
        cov_2mv9rljmpk().s[103]++;
        healthScore = Math.max(0, healthScore - recentFailures * 10);
      } else
      /* istanbul ignore next */
      {
        cov_2mv9rljmpk().b[21][1]++;
      }
      // Boost score if currently connected
      cov_2mv9rljmpk().s[104]++;
      if (currentState === ssh_tunnel_manager_1.TunnelState.CONNECTED) {
        /* istanbul ignore next */
        cov_2mv9rljmpk().b[22][0]++;
        cov_2mv9rljmpk().s[105]++;
        healthScore = Math.min(100, healthScore + 10);
      } else
      /* istanbul ignore next */
      {
        cov_2mv9rljmpk().b[22][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_2mv9rljmpk().b[20][1]++;
    }
    cov_2mv9rljmpk().s[106]++;
    return {
      connectionId,
      currentState,
      statistics,
      recentHistory,
      healthScore
    };
  }
}
/* istanbul ignore next */
cov_2mv9rljmpk().s[107]++;
exports.TunnelStateTracker = TunnelStateTracker;