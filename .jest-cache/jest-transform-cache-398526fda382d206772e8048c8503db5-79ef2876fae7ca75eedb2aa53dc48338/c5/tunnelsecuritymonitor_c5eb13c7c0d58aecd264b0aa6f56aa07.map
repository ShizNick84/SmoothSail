{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\tunnel-security-monitor.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\tunnel-security-monitor.ts"],"sourcesContent":["import { EventEmitter } from 'events';\r\nimport { createHash, createHmac } from 'crypto';\r\nimport { Logger } from '../core/logging/logger';\r\nimport { SSHTunnelManager, TunnelConnection } from './ssh-tunnel-manager';\r\nimport { EncryptionService } from '../security/encryption-service';\r\n\r\n/**\r\n * Security threat levels\r\n */\r\nexport enum ThreatLevel {\r\n  LOW = 'LOW',\r\n  MEDIUM = 'MEDIUM',\r\n  HIGH = 'HIGH',\r\n  CRITICAL = 'CRITICAL'\r\n}\r\n\r\n/**\r\n * Security event types\r\n */\r\nexport enum SecurityEventType {\r\n  UNAUTHORIZED_ACCESS = 'UNAUTHORIZED_ACCESS',\r\n  SUSPICIOUS_TRAFFIC = 'SUSPICIOUS_TRAFFIC',\r\n  TUNNEL_HIJACK_ATTEMPT = 'TUNNEL_HIJACK_ATTEMPT',\r\n  DATA_INTEGRITY_VIOLATION = 'DATA_INTEGRITY_VIOLATION',\r\n  ENCRYPTION_FAILURE = 'ENCRYPTION_FAILURE',\r\n  AUTHENTICATION_FAILURE = 'AUTHENTICATION_FAILURE',\r\n  TRAFFIC_ANOMALY = 'TRAFFIC_ANOMALY',\r\n  CONNECTION_TAMPERING = 'CONNECTION_TAMPERING'\r\n}\r\n\r\n/**\r\n * Security event information\r\n */\r\nexport interface SecurityEvent {\r\n  id: string;\r\n  timestamp: Date;\r\n  connectionId: string;\r\n  type: SecurityEventType;\r\n  threatLevel: ThreatLevel;\r\n  description: string;\r\n  sourceIP?: string;\r\n  targetIP?: string;\r\n  dataSize?: number;\r\n  metadata: Record<string, any>;\r\n  resolved: boolean;\r\n  resolvedAt?: Date;\r\n  responseActions: string[];\r\n}\r\n\r\n/**\r\n * Traffic analysis result\r\n */\r\nexport interface TrafficAnalysis {\r\n  connectionId: string;\r\n  timestamp: Date;\r\n  bytesIn: number;\r\n  bytesOut: number;\r\n  packetsIn: number;\r\n  packetsOut: number;\r\n  suspiciousPatterns: string[];\r\n  anomalyScore: number; // 0-100\r\n  encryptionIntegrity: boolean;\r\n  dataIntegrityHash: string;\r\n}\r\n\r\n/**\r\n * Security monitoring configuration\r\n */\r\nexport interface SecurityMonitorConfig {\r\n  /** Enable traffic monitoring */\r\n  enableTrafficMonitoring: boolean;\r\n  /** Enable intrusion detection */\r\n  enableIntrusionDetection: boolean;\r\n  /** Enable data integrity checking */\r\n  enableDataIntegrityChecking: boolean;\r\n  /** Traffic analysis interval in milliseconds */\r\n  trafficAnalysisInterval: number;\r\n  /** Maximum allowed traffic anomaly score */\r\n  maxAnomalyScore: number;\r\n  /** Enable automatic threat response */\r\n  enableAutoResponse: boolean;\r\n  /** Threat response timeout in milliseconds */\r\n  threatResponseTimeout: number;\r\n  /** Security event retention period in milliseconds */\r\n  eventRetentionPeriod: number;\r\n}\r\n\r\n/**\r\n * Intrusion detection patterns\r\n */\r\nexport interface IntrusionPattern {\r\n  name: string;\r\n  pattern: RegExp;\r\n  threatLevel: ThreatLevel;\r\n  description: string;\r\n  responseAction: string;\r\n}\r\n\r\n/**\r\n * Security metrics\r\n */\r\nexport interface SecurityMetrics {\r\n  totalEvents: number;\r\n  eventsByType: Map<SecurityEventType, number>;\r\n  eventsByThreatLevel: Map<ThreatLevel, number>;\r\n  averageAnomalyScore: number;\r\n  integrityViolations: number;\r\n  resolvedEvents: number;\r\n  activeThreats: number;\r\n  lastSecurityScan: Date;\r\n  systemSecurityScore: number; // 0-100\r\n}\r\n\r\n/**\r\n * Tunnel Security Monitor\r\n * Monitors SSH tunnel security with traffic analysis, intrusion detection, and integrity checking\r\n */\r\nexport class TunnelSecurityMonitor extends EventEmitter {\r\n  private logger: Logger;\r\n  private tunnelManager: SSHTunnelManager;\r\n  private encryptionService: EncryptionService;\r\n  private config: SecurityMonitorConfig;\r\n  private securityEvents: Map<string, SecurityEvent>;\r\n  private trafficAnalysis: Map<string, TrafficAnalysis[]>;\r\n  private intrusionPatterns: IntrusionPattern[];\r\n  private securityMetrics: SecurityMetrics;\r\n  private monitoringIntervals: Map<string, NodeJS.Timeout>;\r\n  private isMonitoring: boolean;\r\n\r\n  constructor(\r\n    logger: Logger,\r\n    tunnelManager: SSHTunnelManager,\r\n    encryptionService: EncryptionService,\r\n    config?: Partial<SecurityMonitorConfig>\r\n  ) {\r\n    super();\r\n    this.logger = logger;\r\n    this.tunnelManager = tunnelManager;\r\n    this.encryptionService = encryptionService;\r\n    this.securityEvents = new Map();\r\n    this.trafficAnalysis = new Map();\r\n    this.monitoringIntervals = new Map();\r\n    this.isMonitoring = false;\r\n\r\n    // Default configuration\r\n    this.config = {\r\n      enableTrafficMonitoring: true,\r\n      enableIntrusionDetection: true,\r\n      enableDataIntegrityChecking: true,\r\n      trafficAnalysisInterval: 30000, // 30 seconds\r\n      maxAnomalyScore: 70,\r\n      enableAutoResponse: true,\r\n      threatResponseTimeout: 10000,\r\n      eventRetentionPeriod: 7 * 24 * 60 * 60 * 1000, // 7 days\r\n      ...config\r\n    };\r\n\r\n    // Initialize security metrics\r\n    this.securityMetrics = {\r\n      totalEvents: 0,\r\n      eventsByType: new Map(),\r\n      eventsByThreatLevel: new Map(),\r\n      averageAnomalyScore: 0,\r\n      integrityViolations: 0,\r\n      resolvedEvents: 0,\r\n      activeThreats: 0,\r\n      lastSecurityScan: new Date(),\r\n      systemSecurityScore: 100\r\n    };\r\n\r\n    // Initialize intrusion detection patterns\r\n    this.initializeIntrusionPatterns();\r\n\r\n    this.setupEventListeners();\r\n    this.logger.info('Tunnel Security Monitor initialized', this.config);\r\n  }\r\n\r\n  /**\r\n   * Start security monitoring\r\n   */\r\n  startMonitoring(): void {\r\n    if (this.isMonitoring) {\r\n      this.logger.warn('Security monitoring is already running');\r\n      return;\r\n    }\r\n\r\n    this.isMonitoring = true;\r\n    this.logger.info('Starting tunnel security monitoring');\r\n\r\n    // Monitor existing connections\r\n    const connections = this.tunnelManager.getAllConnections();\r\n    for (const connection of connections) {\r\n      this.startMonitoringConnection(connection.id);\r\n    }\r\n\r\n    // Start periodic security scans\r\n    this.startPeriodicSecurityScans();\r\n\r\n    this.emit('securityMonitoringStarted');\r\n  }\r\n\r\n  /**\r\n   * Stop security monitoring\r\n   */\r\n  stopMonitoring(): void {\r\n    if (!this.isMonitoring) {\r\n      this.logger.warn('Security monitoring is not running');\r\n      return;\r\n    }\r\n\r\n    this.isMonitoring = false;\r\n    this.logger.info('Stopping tunnel security monitoring');\r\n\r\n    // Clear all monitoring intervals\r\n    for (const [connectionId, interval] of this.monitoringIntervals.entries()) {\r\n      clearInterval(interval);\r\n      this.monitoringIntervals.delete(connectionId);\r\n    }\r\n\r\n    this.emit('securityMonitoringStopped');\r\n  }\r\n\r\n  /**\r\n   * Start monitoring a specific connection\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   */\r\n  startMonitoringConnection(connectionId: string): void {\r\n    if (this.monitoringIntervals.has(connectionId)) {\r\n      this.logger.debug(`Already monitoring connection: ${connectionId}`);\r\n      return;\r\n    }\r\n\r\n    this.logger.info(`Starting security monitoring for connection: ${connectionId}`);\r\n\r\n    // Initialize traffic analysis history\r\n    this.trafficAnalysis.set(connectionId, []);\r\n\r\n    // Start periodic traffic analysis\r\n    if (this.config.enableTrafficMonitoring) {\r\n      const interval = setInterval(async () => {\r\n        try {\r\n          await this.analyzeTraffic(connectionId);\r\n        } catch (error) {\r\n          this.logger.error(`Traffic analysis failed for connection ${connectionId}`, error);\r\n        }\r\n      }, this.config.trafficAnalysisInterval);\r\n\r\n      this.monitoringIntervals.set(connectionId, interval);\r\n    }\r\n\r\n    // Perform initial security scan\r\n    setTimeout(() => this.performSecurityScan(connectionId), 1000);\r\n  }\r\n\r\n  /**\r\n   * Stop monitoring a specific connection\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   */\r\n  stopMonitoringConnection(connectionId: string): void {\r\n    const interval = this.monitoringIntervals.get(connectionId);\r\n    if (interval) {\r\n      clearInterval(interval);\r\n      this.monitoringIntervals.delete(connectionId);\r\n      this.logger.info(`Stopped security monitoring for connection: ${connectionId}`);\r\n    }\r\n\r\n    // Clean up traffic analysis data\r\n    this.trafficAnalysis.delete(connectionId);\r\n  }\r\n\r\n  /**\r\n   * Report security event\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @param type - Security event type\r\n   * @param threatLevel - Threat level\r\n   * @param description - Event description\r\n   * @param metadata - Additional metadata\r\n   */\r\n  reportSecurityEvent(\r\n    connectionId: string,\r\n    type: SecurityEventType,\r\n    threatLevel: ThreatLevel,\r\n    description: string,\r\n    metadata: Record<string, any> = {}\r\n  ): SecurityEvent {\r\n    const event: SecurityEvent = {\r\n      id: this.generateEventId(),\r\n      timestamp: new Date(),\r\n      connectionId,\r\n      type,\r\n      threatLevel,\r\n      description,\r\n      metadata,\r\n      resolved: false,\r\n      responseActions: []\r\n    };\r\n\r\n    // Store event\r\n    this.securityEvents.set(event.id, event);\r\n\r\n    // Update metrics\r\n    this.updateSecurityMetrics(event);\r\n\r\n    // Log event\r\n    this.logger.warn(`Security event detected: ${event.id}`, {\r\n      connectionId,\r\n      type,\r\n      threatLevel,\r\n      description\r\n    });\r\n\r\n    // Emit event\r\n    this.emit('securityEvent', event);\r\n\r\n    // Trigger automatic response if enabled\r\n    if (this.config.enableAutoResponse) {\r\n      this.triggerAutomaticResponse(event);\r\n    }\r\n\r\n    return event;\r\n  }\r\n\r\n  /**\r\n   * Resolve security event\r\n   * \r\n   * @param eventId - Event identifier\r\n   * @param responseActions - Actions taken to resolve the event\r\n   */\r\n  resolveSecurityEvent(eventId: string, responseActions: string[]): void {\r\n    const event = this.securityEvents.get(eventId);\r\n    if (!event) {\r\n      this.logger.warn(`Security event not found: ${eventId}`);\r\n      return;\r\n    }\r\n\r\n    event.resolved = true;\r\n    event.resolvedAt = new Date();\r\n    event.responseActions = responseActions;\r\n\r\n    this.securityMetrics.resolvedEvents++;\r\n    this.securityMetrics.activeThreats = Math.max(0, this.securityMetrics.activeThreats - 1);\r\n\r\n    this.logger.info(`Security event resolved: ${eventId}`, { responseActions });\r\n    this.emit('securityEventResolved', event);\r\n  }\r\n\r\n  /**\r\n   * Get security events\r\n   * \r\n   * @param connectionId - Optional connection filter\r\n   * @param threatLevel - Optional threat level filter\r\n   * @param limit - Maximum number of events to return\r\n   * @returns Array of security events\r\n   */\r\n  getSecurityEvents(\r\n    connectionId?: string,\r\n    threatLevel?: ThreatLevel,\r\n    limit?: number\r\n  ): SecurityEvent[] {\r\n    let events = Array.from(this.securityEvents.values());\r\n\r\n    // Apply filters\r\n    if (connectionId) {\r\n      events = events.filter(event => event.connectionId === connectionId);\r\n    }\r\n\r\n    if (threatLevel) {\r\n      events = events.filter(event => event.threatLevel === threatLevel);\r\n    }\r\n\r\n    // Sort by timestamp (newest first)\r\n    events.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\r\n\r\n    // Apply limit\r\n    if (limit) {\r\n      events = events.slice(0, limit);\r\n    }\r\n\r\n    return events;\r\n  }\r\n\r\n  /**\r\n   * Get traffic analysis data\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @param limit - Maximum number of analysis entries to return\r\n   * @returns Array of traffic analysis results\r\n   */\r\n  getTrafficAnalysis(connectionId: string, limit?: number): TrafficAnalysis[] {\r\n    const analysis = this.trafficAnalysis.get(connectionId) || [];\r\n    return limit ? analysis.slice(-limit) : [...analysis];\r\n  }\r\n\r\n  /**\r\n   * Get security metrics\r\n   * \r\n   * @returns Current security metrics\r\n   */\r\n  getSecurityMetrics(): SecurityMetrics {\r\n    return { ...this.securityMetrics };\r\n  }\r\n\r\n  /**\r\n   * Perform comprehensive security scan\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   */\r\n  async performSecurityScan(connectionId: string): Promise<void> {\r\n    const connection = this.tunnelManager.getConnection(connectionId);\r\n    if (!connection) {\r\n      this.logger.warn(`Connection not found for security scan: ${connectionId}`);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      this.logger.debug(`Performing security scan for connection: ${connectionId}`);\r\n\r\n      // Check connection integrity\r\n      await this.checkConnectionIntegrity(connection);\r\n\r\n      // Analyze traffic patterns\r\n      if (this.config.enableTrafficMonitoring) {\r\n        await this.analyzeTraffic(connectionId);\r\n      }\r\n\r\n      // Check for intrusion attempts\r\n      if (this.config.enableIntrusionDetection) {\r\n        await this.detectIntrusions(connection);\r\n      }\r\n\r\n      // Verify data integrity\r\n      if (this.config.enableDataIntegrityChecking) {\r\n        await this.checkDataIntegrity(connection);\r\n      }\r\n\r\n      this.securityMetrics.lastSecurityScan = new Date();\r\n\r\n    } catch (error) {\r\n      this.logger.error(`Security scan failed for connection ${connectionId}`, error);\r\n      \r\n      this.reportSecurityEvent(\r\n        connectionId,\r\n        SecurityEventType.ENCRYPTION_FAILURE,\r\n        ThreatLevel.HIGH,\r\n        `Security scan failed: ${error instanceof Error ? error.message : String(error)}`,\r\n        { error: error instanceof Error ? error.stack : String(error) }\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Setup event listeners\r\n   */\r\n  private setupEventListeners(): void {\r\n    // Listen for new tunnel connections\r\n    this.tunnelManager.on('tunnelConnected', (connection) => {\r\n      if (this.isMonitoring) {\r\n        this.startMonitoringConnection(connection.id);\r\n      }\r\n    });\r\n\r\n    // Listen for tunnel disconnections\r\n    this.tunnelManager.on('tunnelDisconnected', (connection) => {\r\n      this.stopMonitoringConnection(connection.id);\r\n    });\r\n\r\n    // Listen for tunnel errors (potential security issues)\r\n    this.tunnelManager.on('tunnelError', (connection, error) => {\r\n      this.reportSecurityEvent(\r\n        connection.id,\r\n        SecurityEventType.CONNECTION_TAMPERING,\r\n        ThreatLevel.MEDIUM,\r\n        `Tunnel error detected: ${error.message}`,\r\n        { error: error.stack }\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Initialize intrusion detection patterns\r\n   */\r\n  private initializeIntrusionPatterns(): void {\r\n    this.intrusionPatterns = [\r\n      {\r\n        name: 'Port Scanning',\r\n        pattern: /(?:nmap|masscan|zmap)/i,\r\n        threatLevel: ThreatLevel.MEDIUM,\r\n        description: 'Port scanning activity detected',\r\n        responseAction: 'Block source IP'\r\n      },\r\n      {\r\n        name: 'SQL Injection',\r\n        pattern: /(?:union|select|insert|update|delete|drop|create|alter)\\s+/i,\r\n        threatLevel: ThreatLevel.HIGH,\r\n        description: 'SQL injection attempt detected',\r\n        responseAction: 'Block connection and alert'\r\n      },\r\n      {\r\n        name: 'SSH Brute Force',\r\n        pattern: /(?:ssh|sshd).*(?:failed|invalid|authentication)/i,\r\n        threatLevel: ThreatLevel.HIGH,\r\n        description: 'SSH brute force attack detected',\r\n        responseAction: 'Implement rate limiting'\r\n      },\r\n      {\r\n        name: 'Malware Signature',\r\n        pattern: /(?:malware|virus|trojan|backdoor|rootkit)/i,\r\n        threatLevel: ThreatLevel.CRITICAL,\r\n        description: 'Malware signature detected',\r\n        responseAction: 'Immediate connection termination'\r\n      },\r\n      {\r\n        name: 'Data Exfiltration',\r\n        pattern: /(?:wget|curl|nc|netcat).*(?:http|ftp|tcp)/i,\r\n        threatLevel: ThreatLevel.HIGH,\r\n        description: 'Potential data exfiltration detected',\r\n        responseAction: 'Monitor and analyze traffic'\r\n      }\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Analyze traffic for security threats\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   */\r\n  private async analyzeTraffic(connectionId: string): Promise<void> {\r\n    const connection = this.tunnelManager.getConnection(connectionId);\r\n    if (!connection) return;\r\n\r\n    try {\r\n      // Simulate traffic analysis (in real implementation, this would analyze actual network traffic)\r\n      const analysis: TrafficAnalysis = {\r\n        connectionId,\r\n        timestamp: new Date(),\r\n        bytesIn: Math.floor(Math.random() * 10000),\r\n        bytesOut: Math.floor(Math.random() * 10000),\r\n        packetsIn: Math.floor(Math.random() * 100),\r\n        packetsOut: Math.floor(Math.random() * 100),\r\n        suspiciousPatterns: [],\r\n        anomalyScore: Math.floor(Math.random() * 100),\r\n        encryptionIntegrity: true,\r\n        dataIntegrityHash: this.calculateDataIntegrityHash(connectionId)\r\n      };\r\n\r\n      // Check for suspicious patterns\r\n      analysis.suspiciousPatterns = this.detectSuspiciousPatterns(analysis);\r\n\r\n      // Check anomaly score\r\n      if (analysis.anomalyScore > this.config.maxAnomalyScore) {\r\n        this.reportSecurityEvent(\r\n          connectionId,\r\n          SecurityEventType.TRAFFIC_ANOMALY,\r\n          analysis.anomalyScore > 90 ? ThreatLevel.HIGH : ThreatLevel.MEDIUM,\r\n          `High traffic anomaly score: ${analysis.anomalyScore}`,\r\n          { analysis }\r\n        );\r\n      }\r\n\r\n      // Store analysis\r\n      const analysisHistory = this.trafficAnalysis.get(connectionId) || [];\r\n      analysisHistory.push(analysis);\r\n\r\n      // Limit history size\r\n      const maxHistorySize = 1000;\r\n      if (analysisHistory.length > maxHistorySize) {\r\n        analysisHistory.splice(0, analysisHistory.length - maxHistorySize);\r\n      }\r\n\r\n      this.trafficAnalysis.set(connectionId, analysisHistory);\r\n\r\n      // Update metrics\r\n      this.updateAnomalyMetrics(analysis);\r\n\r\n    } catch (error) {\r\n      this.logger.error(`Traffic analysis failed for connection ${connectionId}`, error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check connection integrity\r\n   * \r\n   * @param connection - Tunnel connection\r\n   */\r\n  private async checkConnectionIntegrity(connection: TunnelConnection): Promise<void> {\r\n    try {\r\n      // Verify connection state\r\n      if (connection.process && connection.process.killed) {\r\n        this.reportSecurityEvent(\r\n          connection.id,\r\n          SecurityEventType.CONNECTION_TAMPERING,\r\n          ThreatLevel.HIGH,\r\n          'Connection process was terminated unexpectedly',\r\n          { processKilled: true }\r\n        );\r\n      }\r\n\r\n      // Check for unusual connection parameters\r\n      if (connection.config.localPort < 1024 && process.getuid && process.getuid() !== 0) {\r\n        this.reportSecurityEvent(\r\n          connection.id,\r\n          SecurityEventType.UNAUTHORIZED_ACCESS,\r\n          ThreatLevel.MEDIUM,\r\n          'Privileged port usage without root access',\r\n          { localPort: connection.config.localPort }\r\n        );\r\n      }\r\n\r\n    } catch (error) {\r\n      this.logger.error(`Connection integrity check failed for ${connection.id}`, error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Detect intrusion attempts\r\n   * \r\n   * @param connection - Tunnel connection\r\n   */\r\n  private async detectIntrusions(connection: TunnelConnection): Promise<void> {\r\n    try {\r\n      // Simulate log analysis (in real implementation, this would analyze actual logs)\r\n      const logEntries = this.getRecentLogEntries(connection.id);\r\n\r\n      for (const logEntry of logEntries) {\r\n        for (const pattern of this.intrusionPatterns) {\r\n          if (pattern.pattern.test(logEntry)) {\r\n            this.reportSecurityEvent(\r\n              connection.id,\r\n              SecurityEventType.SUSPICIOUS_TRAFFIC,\r\n              pattern.threatLevel,\r\n              pattern.description,\r\n              {\r\n                pattern: pattern.name,\r\n                logEntry,\r\n                responseAction: pattern.responseAction\r\n              }\r\n            );\r\n          }\r\n        }\r\n      }\r\n\r\n    } catch (error) {\r\n      this.logger.error(`Intrusion detection failed for connection ${connection.id}`, error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check data integrity\r\n   * \r\n   * @param connection - Tunnel connection\r\n   */\r\n  private async checkDataIntegrity(connection: TunnelConnection): Promise<void> {\r\n    try {\r\n      // Calculate current data integrity hash\r\n      const currentHash = this.calculateDataIntegrityHash(connection.id);\r\n      \r\n      // Get previous hash from traffic analysis\r\n      const analysisHistory = this.trafficAnalysis.get(connection.id) || [];\r\n      const previousAnalysis = analysisHistory[analysisHistory.length - 1];\r\n\r\n      if (previousAnalysis && previousAnalysis.dataIntegrityHash !== currentHash) {\r\n        // Check if the difference is significant\r\n        const hashDifference = this.calculateHashDifference(previousAnalysis.dataIntegrityHash, currentHash);\r\n        \r\n        if (hashDifference > 0.1) { // 10% threshold\r\n          this.reportSecurityEvent(\r\n            connection.id,\r\n            SecurityEventType.DATA_INTEGRITY_VIOLATION,\r\n            ThreatLevel.HIGH,\r\n            'Data integrity violation detected',\r\n            {\r\n              previousHash: previousAnalysis.dataIntegrityHash,\r\n              currentHash,\r\n              difference: hashDifference\r\n            }\r\n          );\r\n\r\n          this.securityMetrics.integrityViolations++;\r\n        }\r\n      }\r\n\r\n    } catch (error) {\r\n      this.logger.error(`Data integrity check failed for connection ${connection.id}`, error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Detect suspicious patterns in traffic analysis\r\n   * \r\n   * @param analysis - Traffic analysis data\r\n   * @returns Array of suspicious pattern names\r\n   */\r\n  private detectSuspiciousPatterns(analysis: TrafficAnalysis): string[] {\r\n    const patterns: string[] = [];\r\n\r\n    // Check for unusual traffic volume\r\n    if (analysis.bytesIn > 100000 || analysis.bytesOut > 100000) {\r\n      patterns.push('High traffic volume');\r\n    }\r\n\r\n    // Check for packet ratio anomalies\r\n    const packetRatio = analysis.packetsIn / Math.max(analysis.packetsOut, 1);\r\n    if (packetRatio > 10 || packetRatio < 0.1) {\r\n      patterns.push('Unusual packet ratio');\r\n    }\r\n\r\n    // Check for potential data exfiltration\r\n    if (analysis.bytesOut > analysis.bytesIn * 2) {\r\n      patterns.push('Potential data exfiltration');\r\n    }\r\n\r\n    return patterns;\r\n  }\r\n\r\n  /**\r\n   * Calculate data integrity hash\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @returns Data integrity hash\r\n   */\r\n  private calculateDataIntegrityHash(connectionId: string): string {\r\n    const connection = this.tunnelManager.getConnection(connectionId);\r\n    if (!connection) return '';\r\n\r\n    const data = JSON.stringify({\r\n      connectionId,\r\n      config: connection.config,\r\n      state: connection.state,\r\n      timestamp: Date.now()\r\n    });\r\n\r\n    return createHash('sha256').update(data).digest('hex');\r\n  }\r\n\r\n  /**\r\n   * Calculate hash difference percentage\r\n   * \r\n   * @param hash1 - First hash\r\n   * @param hash2 - Second hash\r\n   * @returns Difference percentage (0-1)\r\n   */\r\n  private calculateHashDifference(hash1: string, hash2: string): number {\r\n    if (hash1.length !== hash2.length) return 1;\r\n\r\n    let differences = 0;\r\n    for (let i = 0; i < hash1.length; i++) {\r\n      if (hash1[i] !== hash2[i]) {\r\n        differences++;\r\n      }\r\n    }\r\n\r\n    return differences / hash1.length;\r\n  }\r\n\r\n  /**\r\n   * Get recent log entries for analysis\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @returns Array of log entries\r\n   */\r\n  private getRecentLogEntries(connectionId: string): string[] {\r\n    // Simulate log entries (in real implementation, this would read actual logs)\r\n    return [\r\n      `SSH connection established for ${connectionId}`,\r\n      `Data transfer initiated for ${connectionId}`,\r\n      `Normal operation for ${connectionId}`,\r\n      // Add some potentially suspicious entries for testing\r\n      ...(Math.random() > 0.8 ? ['SSH authentication failed for user admin'] : []),\r\n      ...(Math.random() > 0.9 ? ['Port scan detected from 192.168.1.100'] : [])\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Trigger automatic response to security event\r\n   * \r\n   * @param event - Security event\r\n   */\r\n  private async triggerAutomaticResponse(event: SecurityEvent): Promise<void> {\r\n    try {\r\n      const responseActions: string[] = [];\r\n\r\n      switch (event.threatLevel) {\r\n        case ThreatLevel.CRITICAL:\r\n          // Immediate connection termination\r\n          await this.tunnelManager.disconnectTunnel(event.connectionId);\r\n          responseActions.push('Connection terminated');\r\n          break;\r\n\r\n        case ThreatLevel.HIGH:\r\n          // Enhanced monitoring and alerting\r\n          responseActions.push('Enhanced monitoring enabled');\r\n          this.emit('highThreatDetected', event);\r\n          break;\r\n\r\n        case ThreatLevel.MEDIUM:\r\n          // Increased logging and monitoring\r\n          responseActions.push('Increased monitoring');\r\n          break;\r\n\r\n        case ThreatLevel.LOW:\r\n          // Log and continue monitoring\r\n          responseActions.push('Logged for analysis');\r\n          break;\r\n      }\r\n\r\n      // Update event with response actions\r\n      event.responseActions = responseActions;\r\n\r\n      this.logger.info(`Automatic response triggered for event ${event.id}`, { responseActions });\r\n\r\n    } catch (error) {\r\n      this.logger.error(`Automatic response failed for event ${event.id}`, error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Start periodic security scans\r\n   */\r\n  private startPeriodicSecurityScans(): void {\r\n    // Perform security scans every 5 minutes\r\n    setInterval(() => {\r\n      const connections = this.tunnelManager.getAllConnections();\r\n      for (const connection of connections) {\r\n        this.performSecurityScan(connection.id);\r\n      }\r\n    }, 5 * 60 * 1000);\r\n  }\r\n\r\n  /**\r\n   * Update security metrics\r\n   * \r\n   * @param event - Security event\r\n   */\r\n  private updateSecurityMetrics(event: SecurityEvent): void {\r\n    this.securityMetrics.totalEvents++;\r\n    this.securityMetrics.activeThreats++;\r\n\r\n    // Update event type counts\r\n    const typeCount = this.securityMetrics.eventsByType.get(event.type) || 0;\r\n    this.securityMetrics.eventsByType.set(event.type, typeCount + 1);\r\n\r\n    // Update threat level counts\r\n    const threatCount = this.securityMetrics.eventsByThreatLevel.get(event.threatLevel) || 0;\r\n    this.securityMetrics.eventsByThreatLevel.set(event.threatLevel, threatCount + 1);\r\n\r\n    // Calculate system security score\r\n    this.calculateSystemSecurityScore();\r\n  }\r\n\r\n  /**\r\n   * Update anomaly metrics\r\n   * \r\n   * @param analysis - Traffic analysis\r\n   */\r\n  private updateAnomalyMetrics(analysis: TrafficAnalysis): void {\r\n    // Calculate running average of anomaly scores\r\n    const allAnalysis = Array.from(this.trafficAnalysis.values()).flat();\r\n    const totalScore = allAnalysis.reduce((sum, a) => sum + a.anomalyScore, 0);\r\n    this.securityMetrics.averageAnomalyScore = allAnalysis.length > 0 ? totalScore / allAnalysis.length : 0;\r\n  }\r\n\r\n  /**\r\n   * Calculate system security score\r\n   */\r\n  private calculateSystemSecurityScore(): void {\r\n    let score = 100;\r\n\r\n    // Deduct points for active threats\r\n    score -= this.securityMetrics.activeThreats * 10;\r\n\r\n    // Deduct points for high anomaly scores\r\n    if (this.securityMetrics.averageAnomalyScore > 70) {\r\n      score -= (this.securityMetrics.averageAnomalyScore - 70) * 0.5;\r\n    }\r\n\r\n    // Deduct points for integrity violations\r\n    score -= this.securityMetrics.integrityViolations * 5;\r\n\r\n    // Deduct points for critical events\r\n    const criticalEvents = this.securityMetrics.eventsByThreatLevel.get(ThreatLevel.CRITICAL) || 0;\r\n    score -= criticalEvents * 20;\r\n\r\n    this.securityMetrics.systemSecurityScore = Math.max(0, Math.min(100, score));\r\n  }\r\n\r\n  /**\r\n   * Generate unique event ID\r\n   * \r\n   * @returns Unique event identifier\r\n   */\r\n  private generateEventId(): string {\r\n    return `sec_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  /**\r\n   * Cleanup security monitor resources\r\n   */\r\n  cleanup(): void {\r\n    this.stopMonitoring();\r\n    \r\n    // Clean up old events\r\n    const cutoffTime = Date.now() - this.config.eventRetentionPeriod;\r\n    for (const [eventId, event] of this.securityEvents.entries()) {\r\n      if (event.timestamp.getTime() < cutoffTime) {\r\n        this.securityEvents.delete(eventId);\r\n      }\r\n    }\r\n\r\n    this.trafficAnalysis.clear();\r\n    this.logger.info('Tunnel security monitor cleanup completed');\r\n  }\r\n}"],"version":3}