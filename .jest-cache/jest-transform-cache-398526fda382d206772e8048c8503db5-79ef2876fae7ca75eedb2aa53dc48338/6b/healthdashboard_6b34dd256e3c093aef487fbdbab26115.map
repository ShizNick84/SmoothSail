{"version":3,"names":["cov_274xqcznom","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","express_1","require","logger_1","monitoring_automation_1","backup_recovery_1","database_setup_1","child_process_1","fs_1","HealthDashboard","router","startTime","constructor","Router","Date","setupRoutes","get","getHealthStatus","bind","getSystemHealth","getApplicationHealth","getDatabaseHealth","getSecurityHealth","getTradingHealth","getMetrics","getPerformanceMetrics","getResourceMetrics","getMetricsHistory","getAlerts","getActiveAlerts","post","acknowledgeAlert","getMaintenanceStatus","getMaintenanceTasks","runMaintenanceTask","getBackupStatus","getBackupHistory","createBackup","getRecoveryPlans","executeRecovery","restartSystem","shutdownSystem","getSystemLogs","req","res","healthStatus","overall","timestamp","uptime","now","getTime","getVersion","environment","process","env","NODE_ENV","components","system","checkSystemHealth","application","checkApplicationHealth","database","checkDatabaseHealth","security","checkSecurityHealth","trading","checkTradingHealth","metrics","performance","getPerformanceMetricsData","resources","getResourceMetricsData","alerts","getAlertSummaryData","maintenance","getMaintenanceStatusData","componentStatuses","Object","values","map","c","status","includes","json","error","logger","message","cpu","usage","memory","percentage","disk","details","lastCheck","processes","getProcessStatus","apiHealth","checkApiHealth","dashboardHealth","checkDashboardHealth","runningProcesses","filter","p","totalProcesses","length","running","total","api","dashboard","isValid","databaseSetup","validateIntegrity","stats","getStatistics","firewallActive","ufwStatus","execSync","encoding","fail2banActive","fail2banStatus","trim","securityUpdates","updates","parseInt","firewall","fail2ban","activeTrades","riskExposure","lastTradeTime","responseTime","stdio","throughput","errorRate","availability","cpuUsage","parseFloat","cpuCores","cpuTemp","memInfo","split","memTotal","memUsed","diskInfo","diskTotal","diskUsed","networkIn","networkOut","netStats","temperature","cores","used","network","bytesIn","bytesOut","active","critical","warnings","recent","backupHistory","backupRecovery","maintenanceTasks","monitoringAutomation","lastBackup","availableUpdates","Math","max","secUpdates","nextBackup","scheduledTasks","task","nextRun","enabled","systemUpdates","available","pm2List","JSON","parse","existsSync","packageJson","readFileSync","systemHealth","appHealth","dbHealth","securityHealth","tradingHealth","performanceMetrics","resourceMetrics","history","limit","query","slice","activeAlerts","alertId","params","id","success","maintenanceStatus","tasks","taskName","config","getConfig","totalBackups","result","performFullBackup","plans","planName","plan","lines","logType","logs","getRouter","exports","healthDashboard"],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\deployment\\health-dashboard.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * AI CRYPTO TRADING AGENT - SYSTEM HEALTH DASHBOARD API\r\n * =============================================================================\r\n * \r\n * This module provides a comprehensive health dashboard API for monitoring\r\n * system status, performance metrics, and deployment health.\r\n */\r\n\r\nimport { Router, Request, Response } from 'express';\r\nimport { logger } from '../core/logger';\r\nimport { monitoringAutomation } from './monitoring-automation';\r\nimport { backupRecovery } from './backup-recovery';\r\nimport { databaseSetup } from './database-setup';\r\nimport { execSync } from 'child_process';\r\nimport { existsSync, readFileSync } from 'fs';\r\n\r\ninterface HealthStatus {\r\n  overall: 'HEALTHY' | 'WARNING' | 'CRITICAL' | 'ERROR';\r\n  timestamp: Date;\r\n  uptime: number;\r\n  version: string;\r\n  environment: string;\r\n  components: {\r\n    system: ComponentHealth;\r\n    application: ComponentHealth;\r\n    database: ComponentHealth;\r\n    security: ComponentHealth;\r\n    trading: ComponentHealth;\r\n  };\r\n  metrics: {\r\n    performance: PerformanceMetrics;\r\n    resources: ResourceMetrics;\r\n    alerts: AlertSummary;\r\n  };\r\n  maintenance: MaintenanceStatus;\r\n}\r\n\r\ninterface ComponentHealth {\r\n  status: 'HEALTHY' | 'WARNING' | 'CRITICAL' | 'ERROR';\r\n  message: string;\r\n  details: any;\r\n  lastCheck: Date;\r\n}\r\n\r\ninterface PerformanceMetrics {\r\n  responseTime: number;\r\n  throughput: number;\r\n  errorRate: number;\r\n  availability: number;\r\n}\r\n\r\ninterface ResourceMetrics {\r\n  cpu: {\r\n    usage: number;\r\n    temperature: number;\r\n    cores: number;\r\n  };\r\n  memory: {\r\n    used: number;\r\n    total: number;\r\n    percentage: number;\r\n  };\r\n  disk: {\r\n    used: number;\r\n    total: number;\r\n    percentage: number;\r\n  };\r\n  network: {\r\n    bytesIn: number;\r\n    bytesOut: number;\r\n  };\r\n}\r\n\r\ninterface AlertSummary {\r\n  active: number;\r\n  critical: number;\r\n  warnings: number;\r\n  recent: Array<{\r\n    timestamp: Date;\r\n    level: string;\r\n    message: string;\r\n  }>;\r\n}\r\n\r\ninterface MaintenanceStatus {\r\n  lastBackup: Date | null;\r\n  nextBackup: Date | null;\r\n  scheduledTasks: Array<{\r\n    name: string;\r\n    nextRun: Date;\r\n    enabled: boolean;\r\n  }>;\r\n  systemUpdates: {\r\n    available: number;\r\n    security: number;\r\n    lastCheck: Date;\r\n  };\r\n}\r\n\r\nexport class HealthDashboard {\r\n  private router: Router;\r\n  private startTime: Date;\r\n\r\n  constructor() {\r\n    this.router = Router();\r\n    this.startTime = new Date();\r\n    this.setupRoutes();\r\n  }\r\n\r\n  /**\r\n   * Setup API routes\r\n   */\r\n  private setupRoutes(): void {\r\n    // Main health endpoint\r\n    this.router.get('/health', this.getHealthStatus.bind(this));\r\n    \r\n    // Detailed component health\r\n    this.router.get('/health/system', this.getSystemHealth.bind(this));\r\n    this.router.get('/health/application', this.getApplicationHealth.bind(this));\r\n    this.router.get('/health/database', this.getDatabaseHealth.bind(this));\r\n    this.router.get('/health/security', this.getSecurityHealth.bind(this));\r\n    this.router.get('/health/trading', this.getTradingHealth.bind(this));\r\n\r\n    // Metrics endpoints\r\n    this.router.get('/metrics', this.getMetrics.bind(this));\r\n    this.router.get('/metrics/performance', this.getPerformanceMetrics.bind(this));\r\n    this.router.get('/metrics/resources', this.getResourceMetrics.bind(this));\r\n    this.router.get('/metrics/history', this.getMetricsHistory.bind(this));\r\n\r\n    // Alerts endpoints\r\n    this.router.get('/alerts', this.getAlerts.bind(this));\r\n    this.router.get('/alerts/active', this.getActiveAlerts.bind(this));\r\n    this.router.post('/alerts/:id/acknowledge', this.acknowledgeAlert.bind(this));\r\n\r\n    // Maintenance endpoints\r\n    this.router.get('/maintenance', this.getMaintenanceStatus.bind(this));\r\n    this.router.get('/maintenance/tasks', this.getMaintenanceTasks.bind(this));\r\n    this.router.post('/maintenance/tasks/:name/run', this.runMaintenanceTask.bind(this));\r\n\r\n    // Backup endpoints\r\n    this.router.get('/backups', this.getBackupStatus.bind(this));\r\n    this.router.get('/backups/history', this.getBackupHistory.bind(this));\r\n    this.router.post('/backups/create', this.createBackup.bind(this));\r\n\r\n    // Recovery endpoints\r\n    this.router.get('/recovery/plans', this.getRecoveryPlans.bind(this));\r\n    this.router.post('/recovery/execute/:plan', this.executeRecovery.bind(this));\r\n\r\n    // System control endpoints\r\n    this.router.post('/system/restart', this.restartSystem.bind(this));\r\n    this.router.post('/system/shutdown', this.shutdownSystem.bind(this));\r\n    this.router.get('/system/logs', this.getSystemLogs.bind(this));\r\n  }\r\n\r\n  /**\r\n   * Get overall health status\r\n   */\r\n  private async getHealthStatus(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const healthStatus: HealthStatus = {\r\n        overall: 'HEALTHY',\r\n        timestamp: new Date(),\r\n        uptime: Date.now() - this.startTime.getTime(),\r\n        version: this.getVersion(),\r\n        environment: process.env.NODE_ENV || 'development',\r\n        components: {\r\n          system: await this.checkSystemHealth(),\r\n          application: await this.checkApplicationHealth(),\r\n          database: await this.checkDatabaseHealth(),\r\n          security: await this.checkSecurityHealth(),\r\n          trading: await this.checkTradingHealth()\r\n        },\r\n        metrics: {\r\n          performance: await this.getPerformanceMetricsData(),\r\n          resources: await this.getResourceMetricsData(),\r\n          alerts: await this.getAlertSummaryData()\r\n        },\r\n        maintenance: await this.getMaintenanceStatusData()\r\n      };\r\n\r\n      // Determine overall status\r\n      const componentStatuses = Object.values(healthStatus.components).map(c => c.status);\r\n      if (componentStatuses.includes('CRITICAL') || componentStatuses.includes('ERROR')) {\r\n        healthStatus.overall = 'CRITICAL';\r\n      } else if (componentStatuses.includes('WARNING')) {\r\n        healthStatus.overall = 'WARNING';\r\n      }\r\n\r\n      res.json(healthStatus);\r\n\r\n    } catch (error) {\r\n      logger.error('Health status check failed:', error);\r\n      res.status(500).json({\r\n        overall: 'ERROR',\r\n        timestamp: new Date(),\r\n        error: error.message\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Component health check methods\r\n   */\r\n  private async checkSystemHealth(): Promise<ComponentHealth> {\r\n    try {\r\n      const metrics = await this.getResourceMetricsData();\r\n      \r\n      let status: ComponentHealth['status'] = 'HEALTHY';\r\n      let message = 'System resources are within normal limits';\r\n\r\n      if (metrics.cpu.usage > 85 || metrics.memory.percentage > 90 || metrics.disk.percentage > 90) {\r\n        status = 'CRITICAL';\r\n        message = 'System resources are critically high';\r\n      } else if (metrics.cpu.usage > 70 || metrics.memory.percentage > 80 || metrics.disk.percentage > 80) {\r\n        status = 'WARNING';\r\n        message = 'System resources are elevated';\r\n      }\r\n\r\n      return {\r\n        status,\r\n        message,\r\n        details: metrics,\r\n        lastCheck: new Date()\r\n      };\r\n\r\n    } catch (error) {\r\n      return {\r\n        status: 'ERROR',\r\n        message: `System health check failed: ${error.message}`,\r\n        details: null,\r\n        lastCheck: new Date()\r\n      };\r\n    }\r\n  }\r\n\r\n  private async checkApplicationHealth(): Promise<ComponentHealth> {\r\n    try {\r\n      const processes = await this.getProcessStatus();\r\n      const apiHealth = await this.checkApiHealth();\r\n      const dashboardHealth = await this.checkDashboardHealth();\r\n\r\n      const runningProcesses = processes.filter(p => p.status === 'online');\r\n      const totalProcesses = processes.length;\r\n\r\n      let status: ComponentHealth['status'] = 'HEALTHY';\r\n      let message = 'All application services are running normally';\r\n\r\n      if (!apiHealth || runningProcesses.length === 0) {\r\n        status = 'CRITICAL';\r\n        message = 'Critical application services are down';\r\n      } else if (runningProcesses.length < totalProcesses || !dashboardHealth) {\r\n        status = 'WARNING';\r\n        message = 'Some application services have issues';\r\n      }\r\n\r\n      return {\r\n        status,\r\n        message,\r\n        details: {\r\n          processes: {\r\n            running: runningProcesses.length,\r\n            total: totalProcesses\r\n          },\r\n          api: apiHealth,\r\n          dashboard: dashboardHealth\r\n        },\r\n        lastCheck: new Date()\r\n      };\r\n\r\n    } catch (error) {\r\n      return {\r\n        status: 'ERROR',\r\n        message: `Application health check failed: ${error.message}`,\r\n        details: null,\r\n        lastCheck: new Date()\r\n      };\r\n    }\r\n  }\r\n\r\n  private async checkDatabaseHealth(): Promise<ComponentHealth> {\r\n    try {\r\n      const isValid = await databaseSetup.validateIntegrity();\r\n      const stats = await databaseSetup.getStatistics();\r\n\r\n      return {\r\n        status: isValid ? 'HEALTHY' : 'CRITICAL',\r\n        message: isValid ? 'Database is healthy' : 'Database integrity issues detected',\r\n        details: stats,\r\n        lastCheck: new Date()\r\n      };\r\n\r\n    } catch (error) {\r\n      return {\r\n        status: 'ERROR',\r\n        message: `Database health check failed: ${error.message}`,\r\n        details: null,\r\n        lastCheck: new Date()\r\n      };\r\n    }\r\n  }\r\n\r\n  private async checkSecurityHealth(): Promise<ComponentHealth> {\r\n    try {\r\n      // Check firewall status\r\n      let firewallActive = false;\r\n      try {\r\n        const ufwStatus = execSync('sudo ufw status', { encoding: 'utf-8' });\r\n        firewallActive = ufwStatus.includes('Status: active');\r\n      } catch {\r\n        // UFW not available\r\n      }\r\n\r\n      // Check fail2ban status\r\n      let fail2banActive = false;\r\n      try {\r\n        const fail2banStatus = execSync('sudo systemctl is-active fail2ban', { encoding: 'utf-8' });\r\n        fail2banActive = fail2banStatus.trim() === 'active';\r\n      } catch {\r\n        // Fail2ban not available\r\n      }\r\n\r\n      // Check for security updates\r\n      let securityUpdates = 0;\r\n      try {\r\n        const updates = execSync('apt list --upgradable 2>/dev/null | grep -i security | wc -l', { encoding: 'utf-8' });\r\n        securityUpdates = parseInt(updates.trim()) || 0;\r\n      } catch {\r\n        // Cannot check updates\r\n      }\r\n\r\n      let status: ComponentHealth['status'] = 'HEALTHY';\r\n      let message = 'Security systems are functioning normally';\r\n\r\n      if (!firewallActive || securityUpdates > 10) {\r\n        status = 'CRITICAL';\r\n        message = 'Critical security issues detected';\r\n      } else if (!fail2banActive || securityUpdates > 0) {\r\n        status = 'WARNING';\r\n        message = 'Security warnings detected';\r\n      }\r\n\r\n      return {\r\n        status,\r\n        message,\r\n        details: {\r\n          firewall: firewallActive,\r\n          fail2ban: fail2banActive,\r\n          securityUpdates\r\n        },\r\n        lastCheck: new Date()\r\n      };\r\n\r\n    } catch (error) {\r\n      return {\r\n        status: 'ERROR',\r\n        message: `Security health check failed: ${error.message}`,\r\n        details: null,\r\n        lastCheck: new Date()\r\n      };\r\n    }\r\n  }\r\n\r\n  private async checkTradingHealth(): Promise<ComponentHealth> {\r\n    try {\r\n      // This would check trading-specific health metrics\r\n      // For now, return a basic status\r\n      return {\r\n        status: 'HEALTHY',\r\n        message: 'Trading systems are operational',\r\n        details: {\r\n          activeTrades: 0,\r\n          riskExposure: 0,\r\n          lastTradeTime: null\r\n        },\r\n        lastCheck: new Date()\r\n      };\r\n\r\n    } catch (error) {\r\n      return {\r\n        status: 'ERROR',\r\n        message: `Trading health check failed: ${error.message}`,\r\n        details: null,\r\n        lastCheck: new Date()\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Metrics collection methods\r\n   */\r\n  private async getPerformanceMetricsData(): Promise<PerformanceMetrics> {\r\n    // Get response time\r\n    let responseTime = 0;\r\n    try {\r\n      const start = Date.now();\r\n      execSync('curl -s http://localhost:3001/api/v1/health', { stdio: 'pipe' });\r\n      responseTime = Date.now() - start;\r\n    } catch {\r\n      responseTime = -1; // Service unavailable\r\n    }\r\n\r\n    return {\r\n      responseTime,\r\n      throughput: 0, // Would be calculated from request logs\r\n      errorRate: 0, // Would be calculated from error logs\r\n      availability: responseTime > 0 ? 100 : 0\r\n    };\r\n  }\r\n\r\n  private async getResourceMetricsData(): Promise<ResourceMetrics> {\r\n    try {\r\n      // CPU metrics\r\n      const cpuUsage = parseFloat(execSync(\"top -bn1 | grep 'Cpu(s)' | awk '{print $2}' | cut -d'%' -f1\", { encoding: 'utf-8' }).trim());\r\n      const cpuCores = parseInt(execSync('nproc', { encoding: 'utf-8' }).trim());\r\n      \r\n      let cpuTemp = 0;\r\n      try {\r\n        cpuTemp = parseFloat(execSync(\"sensors | grep 'Core 0' | awk '{print $3}' | cut -d'+' -f2 | cut -d'°' -f1\", { encoding: 'utf-8' }).trim()) || 0;\r\n      } catch {\r\n        // Temperature sensor not available\r\n      }\r\n\r\n      // Memory metrics\r\n      const memInfo = execSync('free -b', { encoding: 'utf-8' }).split('\\n')[1].split(/\\s+/);\r\n      const memTotal = parseInt(memInfo[1]);\r\n      const memUsed = parseInt(memInfo[2]);\r\n\r\n      // Disk metrics\r\n      const diskInfo = execSync(\"df -B1 / | tail -1\", { encoding: 'utf-8' }).split(/\\s+/);\r\n      const diskTotal = parseInt(diskInfo[1]);\r\n      const diskUsed = parseInt(diskInfo[2]);\r\n\r\n      // Network metrics (simplified)\r\n      let networkIn = 0, networkOut = 0;\r\n      try {\r\n        const netStats = execSync(\"cat /proc/net/dev | grep -E 'eth0|wlan0' | head -1\", { encoding: 'utf-8' }).trim();\r\n        if (netStats) {\r\n          const stats = netStats.split(/\\s+/);\r\n          networkIn = parseInt(stats[1]) || 0;\r\n          networkOut = parseInt(stats[9]) || 0;\r\n        }\r\n      } catch {\r\n        // Network stats not available\r\n      }\r\n\r\n      return {\r\n        cpu: {\r\n          usage: cpuUsage,\r\n          temperature: cpuTemp,\r\n          cores: cpuCores\r\n        },\r\n        memory: {\r\n          used: memUsed,\r\n          total: memTotal,\r\n          percentage: (memUsed / memTotal) * 100\r\n        },\r\n        disk: {\r\n          used: diskUsed,\r\n          total: diskTotal,\r\n          percentage: (diskUsed / diskTotal) * 100\r\n        },\r\n        network: {\r\n          bytesIn: networkIn,\r\n          bytesOut: networkOut\r\n        }\r\n      };\r\n\r\n    } catch (error) {\r\n      logger.error('Error collecting resource metrics:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private async getAlertSummaryData(): Promise<AlertSummary> {\r\n    // This would integrate with the monitoring system\r\n    return {\r\n      active: 0,\r\n      critical: 0,\r\n      warnings: 0,\r\n      recent: []\r\n    };\r\n  }\r\n\r\n  private async getMaintenanceStatusData(): Promise<MaintenanceStatus> {\r\n    const backupHistory = backupRecovery.getBackupHistory();\r\n    const maintenanceTasks = monitoringAutomation.getMaintenanceStatus();\r\n\r\n    const lastBackup = backupHistory.length > 0 ? backupHistory[backupHistory.length - 1].timestamp : null;\r\n\r\n    // Check for system updates\r\n    let availableUpdates = 0;\r\n    let securityUpdates = 0;\r\n    try {\r\n      const updates = execSync('apt list --upgradable 2>/dev/null | wc -l', { encoding: 'utf-8' });\r\n      availableUpdates = Math.max(0, parseInt(updates.trim()) - 1); // Subtract header line\r\n\r\n      const secUpdates = execSync('apt list --upgradable 2>/dev/null | grep -i security | wc -l', { encoding: 'utf-8' });\r\n      securityUpdates = parseInt(secUpdates.trim()) || 0;\r\n    } catch {\r\n      // Cannot check updates\r\n    }\r\n\r\n    return {\r\n      lastBackup,\r\n      nextBackup: null, // Would be calculated from backup schedule\r\n      scheduledTasks: maintenanceTasks.map(task => ({\r\n        name: task.name,\r\n        nextRun: task.nextRun || new Date(),\r\n        enabled: task.enabled\r\n      })),\r\n      systemUpdates: {\r\n        available: availableUpdates,\r\n        security: securityUpdates,\r\n        lastCheck: new Date()\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Helper methods\r\n   */\r\n  private async getProcessStatus(): Promise<any[]> {\r\n    try {\r\n      const pm2List = execSync('pm2 jlist', { encoding: 'utf-8' });\r\n      return JSON.parse(pm2List);\r\n    } catch {\r\n      return [];\r\n    }\r\n  }\r\n\r\n  private async checkApiHealth(): Promise<boolean> {\r\n    try {\r\n      execSync('curl -f http://localhost:3001/api/v1/health', { stdio: 'pipe' });\r\n      return true;\r\n    } catch {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  private async checkDashboardHealth(): Promise<boolean> {\r\n    try {\r\n      execSync('curl -f http://localhost:3002', { stdio: 'pipe' });\r\n      return true;\r\n    } catch {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  private getVersion(): string {\r\n    try {\r\n      if (existsSync('package.json')) {\r\n        const packageJson = JSON.parse(readFileSync('package.json', 'utf-8'));\r\n        return packageJson.version || '1.0.0';\r\n      }\r\n    } catch {\r\n      // Ignore errors\r\n    }\r\n    return '1.0.0';\r\n  }\r\n\r\n  /**\r\n   * API endpoint implementations\r\n   */\r\n  private async getSystemHealth(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const systemHealth = await this.checkSystemHealth();\r\n      res.json(systemHealth);\r\n    } catch (error) {\r\n      res.status(500).json({ error: error.message });\r\n    }\r\n  }\r\n\r\n  private async getApplicationHealth(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const appHealth = await this.checkApplicationHealth();\r\n      res.json(appHealth);\r\n    } catch (error) {\r\n      res.status(500).json({ error: error.message });\r\n    }\r\n  }\r\n\r\n  private async getDatabaseHealth(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const dbHealth = await this.checkDatabaseHealth();\r\n      res.json(dbHealth);\r\n    } catch (error) {\r\n      res.status(500).json({ error: error.message });\r\n    }\r\n  }\r\n\r\n  private async getSecurityHealth(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const securityHealth = await this.checkSecurityHealth();\r\n      res.json(securityHealth);\r\n    } catch (error) {\r\n      res.status(500).json({ error: error.message });\r\n    }\r\n  }\r\n\r\n  private async getTradingHealth(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const tradingHealth = await this.checkTradingHealth();\r\n      res.json(tradingHealth);\r\n    } catch (error) {\r\n      res.status(500).json({ error: error.message });\r\n    }\r\n  }\r\n\r\n  private async getMetrics(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const metrics = monitoringAutomation.getMetrics();\r\n      res.json(metrics);\r\n    } catch (error) {\r\n      res.status(500).json({ error: error.message });\r\n    }\r\n  }\r\n\r\n  private async getPerformanceMetrics(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const performanceMetrics = await this.getPerformanceMetricsData();\r\n      res.json(performanceMetrics);\r\n    } catch (error) {\r\n      res.status(500).json({ error: error.message });\r\n    }\r\n  }\r\n\r\n  private async getResourceMetrics(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const resourceMetrics = await this.getResourceMetricsData();\r\n      res.json(resourceMetrics);\r\n    } catch (error) {\r\n      res.status(500).json({ error: error.message });\r\n    }\r\n  }\r\n\r\n  private async getMetricsHistory(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const history = monitoringAutomation.getMetrics();\r\n      const limit = parseInt(req.query.limit as string) || 100;\r\n      res.json(history.slice(-limit));\r\n    } catch (error) {\r\n      res.status(500).json({ error: error.message });\r\n    }\r\n  }\r\n\r\n  private async getAlerts(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      // This would integrate with the alerting system\r\n      res.json({ alerts: [] });\r\n    } catch (error) {\r\n      res.status(500).json({ error: error.message });\r\n    }\r\n  }\r\n\r\n  private async getActiveAlerts(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      // This would return only active alerts\r\n      res.json({ activeAlerts: [] });\r\n    } catch (error) {\r\n      res.status(500).json({ error: error.message });\r\n    }\r\n  }\r\n\r\n  private async acknowledgeAlert(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const alertId = req.params.id;\r\n      // This would acknowledge the alert\r\n      res.json({ success: true, alertId });\r\n    } catch (error) {\r\n      res.status(500).json({ error: error.message });\r\n    }\r\n  }\r\n\r\n  private async getMaintenanceStatus(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const maintenanceStatus = await this.getMaintenanceStatusData();\r\n      res.json(maintenanceStatus);\r\n    } catch (error) {\r\n      res.status(500).json({ error: error.message });\r\n    }\r\n  }\r\n\r\n  private async getMaintenanceTasks(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const tasks = monitoringAutomation.getMaintenanceStatus();\r\n      res.json(tasks);\r\n    } catch (error) {\r\n      res.status(500).json({ error: error.message });\r\n    }\r\n  }\r\n\r\n  private async runMaintenanceTask(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const taskName = req.params.name;\r\n      // This would trigger the maintenance task\r\n      res.json({ success: true, task: taskName, status: 'started' });\r\n    } catch (error) {\r\n      res.status(500).json({ error: error.message });\r\n    }\r\n  }\r\n\r\n  private async getBackupStatus(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const config = backupRecovery.getConfig();\r\n      const history = backupRecovery.getBackupHistory();\r\n      const lastBackup = history.length > 0 ? history[history.length - 1] : null;\r\n\r\n      res.json({\r\n        config,\r\n        lastBackup,\r\n        totalBackups: history.length\r\n      });\r\n    } catch (error) {\r\n      res.status(500).json({ error: error.message });\r\n    }\r\n  }\r\n\r\n  private async getBackupHistory(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const history = backupRecovery.getBackupHistory();\r\n      const limit = parseInt(req.query.limit as string) || 50;\r\n      res.json(history.slice(-limit));\r\n    } catch (error) {\r\n      res.status(500).json({ error: error.message });\r\n    }\r\n  }\r\n\r\n  private async createBackup(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const result = await backupRecovery.performFullBackup();\r\n      res.json(result);\r\n    } catch (error) {\r\n      res.status(500).json({ error: error.message });\r\n    }\r\n  }\r\n\r\n  private async getRecoveryPlans(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const plans = backupRecovery.getRecoveryPlans();\r\n      res.json(plans);\r\n    } catch (error) {\r\n      res.status(500).json({ error: error.message });\r\n    }\r\n  }\r\n\r\n  private async executeRecovery(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const planName = req.params.plan;\r\n      const result = await backupRecovery.executeRecovery(planName);\r\n      res.json(result);\r\n    } catch (error) {\r\n      res.status(500).json({ error: error.message });\r\n    }\r\n  }\r\n\r\n  private async restartSystem(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      // This would restart the system services\r\n      execSync('pm2 restart all');\r\n      res.json({ success: true, message: 'System restart initiated' });\r\n    } catch (error) {\r\n      res.status(500).json({ error: error.message });\r\n    }\r\n  }\r\n\r\n  private async shutdownSystem(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      // This would gracefully shutdown the system\r\n      execSync('pm2 stop all');\r\n      res.json({ success: true, message: 'System shutdown initiated' });\r\n    } catch (error) {\r\n      res.status(500).json({ error: error.message });\r\n    }\r\n  }\r\n\r\n  private async getSystemLogs(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const lines = parseInt(req.query.lines as string) || 100;\r\n      const logType = req.query.type as string || 'application';\r\n      \r\n      let logs = '';\r\n      switch (logType) {\r\n        case 'application':\r\n          logs = execSync(`pm2 logs --lines ${lines} --nostream`, { encoding: 'utf-8' });\r\n          break;\r\n        case 'system':\r\n          logs = execSync(`journalctl -n ${lines} --no-pager`, { encoding: 'utf-8' });\r\n          break;\r\n        case 'security':\r\n          logs = execSync(`tail -n ${lines} /var/log/auth.log`, { encoding: 'utf-8' });\r\n          break;\r\n        default:\r\n          logs = execSync(`pm2 logs --lines ${lines} --nostream`, { encoding: 'utf-8' });\r\n      }\r\n\r\n      res.json({ logs: logs.split('\\n') });\r\n    } catch (error) {\r\n      res.status(500).json({ error: error.message });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get router instance\r\n   */\r\n  getRouter(): Router {\r\n    return this.router;\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const healthDashboard = new HealthDashboard();"],"mappings":"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","ignoreList":[]}