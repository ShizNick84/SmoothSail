11c87f9f5ffb909458d5807a78201c3a
"use strict";

/**
 * Notification Service
 *
 * Central notification service for the AI crypto trading agent.
 * Handles email, Telegram, and other notification channels.
 */
/* istanbul ignore next */
function cov_oxd48l9x6() {
  var path = "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\core\\notifications\\notification-service.ts";
  var hash = "7608bedee2f811b3f02338717f8ba3a89b7a675c";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\core\\notifications\\notification-service.ts",
    statementMap: {
      "0": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 8,
          column: 62
        }
      },
      "1": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 37
        }
      },
      "2": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 29
        }
      },
      "3": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 16,
          column: 10
        }
      },
      "4": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 22,
          column: 11
        }
      },
      "5": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 33
        }
      },
      "6": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 30,
          column: 11
        }
      },
      "7": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 33
        }
      },
      "8": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 38,
          column: 11
        }
      },
      "9": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 33
        }
      },
      "10": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 45,
          column: 11
        }
      },
      "11": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 47,
          column: 33
        }
      },
      "12": {
        start: {
          line: 50,
          column: 0
        },
        end: {
          line: 50,
          column: 50
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 11,
            column: 5
          }
        },
        loc: {
          start: {
            line: 11,
            column: 32
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 11
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 34
          },
          end: {
            line: 25,
            column: 5
          }
        },
        line: 18
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 26,
            column: 5
          }
        },
        loc: {
          start: {
            line: 26,
            column: 42
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 26
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 34,
            column: 4
          },
          end: {
            line: 34,
            column: 5
          }
        },
        loc: {
          start: {
            line: 34,
            column: 27
          },
          end: {
            line: 41,
            column: 5
          }
        },
        line: 34
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 42,
            column: 4
          },
          end: {
            line: 42,
            column: 5
          }
        },
        loc: {
          start: {
            line: 42,
            column: 32
          },
          end: {
            line: 48,
            column: 5
          }
        },
        line: 42
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 13,
            column: 22
          },
          end: {
            line: 16,
            column: 9
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 13,
            column: 22
          },
          end: {
            line: 13,
            column: 28
          }
        }, {
          start: {
            line: 13,
            column: 32
          },
          end: {
            line: 16,
            column: 9
          }
        }],
        line: 13
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "7608bedee2f811b3f02338717f8ba3a89b7a675c"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_oxd48l9x6 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_oxd48l9x6();
cov_oxd48l9x6().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_oxd48l9x6().s[1]++;
exports.NotificationService = void 0;
class NotificationService {
  constructor(logger, config) {
    /* istanbul ignore next */
    cov_oxd48l9x6().f[0]++;
    cov_oxd48l9x6().s[2]++;
    this.logger = logger;
    /* istanbul ignore next */
    cov_oxd48l9x6().s[3]++;
    this.config =
    /* istanbul ignore next */
    (cov_oxd48l9x6().b[0][0]++, config) ||
    /* istanbul ignore next */
    (cov_oxd48l9x6().b[0][1]++, {
      email: {
        enabled: false,
        smtp: {
          host: '',
          port: 587,
          secure: false,
          auth: {
            user: '',
            pass: ''
          }
        }
      },
      telegram: {
        enabled: false,
        botToken: '',
        chatId: ''
      }
    });
  }
  async sendAlert(notification) {
    /* istanbul ignore next */
    cov_oxd48l9x6().f[1]++;
    cov_oxd48l9x6().s[4]++;
    this.logger.info('Sending alert notification', {
      title: notification.title,
      priority: notification.priority
    });
    // Mock implementation for testing
    /* istanbul ignore next */
    cov_oxd48l9x6().s[5]++;
    return Promise.resolve();
  }
  async sendCriticalAlert(notification) {
    /* istanbul ignore next */
    cov_oxd48l9x6().f[2]++;
    cov_oxd48l9x6().s[6]++;
    this.logger.warn('Sending critical alert notification', {
      title: notification.title,
      priority: notification.priority
    });
    // Mock implementation for testing
    /* istanbul ignore next */
    cov_oxd48l9x6().s[7]++;
    return Promise.resolve();
  }
  async sendEmail(email) {
    /* istanbul ignore next */
    cov_oxd48l9x6().f[3]++;
    cov_oxd48l9x6().s[8]++;
    this.logger.info('Sending email notification', {
      to: email.to,
      subject: email.subject
    });
    // Mock implementation for testing
    /* istanbul ignore next */
    cov_oxd48l9x6().s[9]++;
    return Promise.resolve();
  }
  async sendTelegram(message) {
    /* istanbul ignore next */
    cov_oxd48l9x6().f[4]++;
    cov_oxd48l9x6().s[10]++;
    this.logger.info('Sending Telegram notification', {
      message: message.substring(0, 100)
    });
    // Mock implementation for testing
    /* istanbul ignore next */
    cov_oxd48l9x6().s[11]++;
    return Promise.resolve();
  }
}
/* istanbul ignore next */
cov_oxd48l9x6().s[12]++;
exports.NotificationService = NotificationService;