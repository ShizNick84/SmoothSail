076989368802da68940ee6a796300173
"use strict";

/**
 * =============================================================================
 * AI CRYPTO TRADING AGENT - FORENSIC ANALYSIS SERVICE
 * =============================================================================
 *
 * This service provides comprehensive digital forensics capabilities for the
 * AI crypto trading agent. It handles evidence collection, attack timeline
 * reconstruction, threat attribution, and forensic reporting.
 *
 * CRITICAL SECURITY NOTICE:
 * This service is essential for post-incident analysis and legal compliance.
 * All forensic data must be collected and preserved with chain of custody
 * integrity to support potential legal proceedings and regulatory compliance.
 *
 * Forensic Capabilities:
 * - Digital forensics data collection
 * - Attack timeline reconstruction
 * - Threat attribution and analysis
 * - Forensic reporting and documentation
 * - Chain of custody management
 * - Evidence integrity verification
 *
 * @author AI Crypto Trading System
 * @version 1.0.0
 * @license PROPRIETARY
 * =============================================================================
 */
/* istanbul ignore next */
function cov_1s8bbcmgr7() {
  var path = "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\forensic-analysis-service.ts";
  var hash = "c2716cff299935309aefd18432894701a558732d";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\forensic-analysis-service.ts",
    statementMap: {
      "0": {
        start: {
          line: 29,
          column: 0
        },
        end: {
          line: 29,
          column: 62
        }
      },
      "1": {
        start: {
          line: 30,
          column: 0
        },
        end: {
          line: 30,
          column: 75
        }
      },
      "2": {
        start: {
          line: 31,
          column: 17
        },
        end: {
          line: 31,
          column: 34
        }
      },
      "3": {
        start: {
          line: 32,
          column: 17
        },
        end: {
          line: 32,
          column: 34
        }
      },
      "4": {
        start: {
          line: 33,
          column: 17
        },
        end: {
          line: 33,
          column: 49
        }
      },
      "5": {
        start: {
          line: 34,
          column: 24
        },
        end: {
          line: 34,
          column: 59
        }
      },
      "6": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 41,
          column: 16
        }
      },
      "7": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 43,
          column: 42
        }
      },
      "8": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 45,
          column: 41
        }
      },
      "9": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 47,
          column: 44
        }
      },
      "10": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 41
        }
      },
      "11": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 78,
          column: 10
        }
      },
      "12": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 80,
          column: 43
        }
      },
      "13": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 81,
          column: 73
        }
      },
      "14": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 114,
          column: 9
        }
      },
      "15": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 77
        }
      },
      "16": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 38
        }
      },
      "17": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 40
        }
      },
      "18": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 108,
          column: 15
        }
      },
      "19": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 109,
          column: 85
        }
      },
      "20": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 112,
          column: 89
        }
      },
      "21": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 113,
          column: 72
        }
      },
      "22": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 168,
          column: 9
        }
      },
      "23": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 129,
          column: 15
        }
      },
      "24": {
        start: {
          line: 130,
          column: 38
        },
        end: {
          line: 130,
          column: 40
        }
      },
      "25": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 142,
          column: 13
        }
      },
      "26": {
        start: {
          line: 132,
          column: 16
        },
        end: {
          line: 141,
          column: 17
        }
      },
      "27": {
        start: {
          line: 133,
          column: 37
        },
        end: {
          line: 133,
          column: 93
        }
      },
      "28": {
        start: {
          line: 134,
          column: 20
        },
        end: {
          line: 137,
          column: 21
        }
      },
      "29": {
        start: {
          line: 135,
          column: 24
        },
        end: {
          line: 135,
          column: 57
        }
      },
      "30": {
        start: {
          line: 136,
          column: 24
        },
        end: {
          line: 136,
          column: 81
        }
      },
      "31": {
        start: {
          line: 140,
          column: 20
        },
        end: {
          line: 140,
          column: 98
        }
      },
      "32": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 157,
          column: 15
        }
      },
      "33": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 162,
          column: 15
        }
      },
      "34": {
        start: {
          line: 163,
          column: 12
        },
        end: {
          line: 163,
          column: 37
        }
      },
      "35": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 166,
          column: 83
        }
      },
      "36": {
        start: {
          line: 167,
          column: 12
        },
        end: {
          line: 167,
          column: 67
        }
      },
      "37": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 222,
          column: 9
        }
      },
      "38": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 179,
          column: 86
        }
      },
      "39": {
        start: {
          line: 181,
          column: 37
        },
        end: {
          line: 182,
          column: 80
        }
      },
      "40": {
        start: {
          line: 182,
          column: 36
        },
        end: {
          line: 182,
          column: 79
        }
      },
      "41": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 186,
          column: 13
        }
      },
      "42": {
        start: {
          line: 184,
          column: 16
        },
        end: {
          line: 184,
          column: 105
        }
      },
      "43": {
        start: {
          line: 185,
          column: 16
        },
        end: {
          line: 185,
          column: 26
        }
      },
      "44": {
        start: {
          line: 187,
          column: 36
        },
        end: {
          line: 187,
          column: 38
        }
      },
      "45": {
        start: {
          line: 189,
          column: 12
        },
        end: {
          line: 192,
          column: 13
        }
      },
      "46": {
        start: {
          line: 190,
          column: 40
        },
        end: {
          line: 190,
          column: 87
        }
      },
      "47": {
        start: {
          line: 191,
          column: 16
        },
        end: {
          line: 191,
          column: 57
        }
      },
      "48": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 194,
          column: 90
        }
      },
      "49": {
        start: {
          line: 194,
          column: 43
        },
        end: {
          line: 194,
          column: 88
        }
      },
      "50": {
        start: {
          line: 196,
          column: 36
        },
        end: {
          line: 196,
          column: 81
        }
      },
      "51": {
        start: {
          line: 198,
          column: 12
        },
        end: {
          line: 198,
          column: 66
        }
      },
      "52": {
        start: {
          line: 199,
          column: 12
        },
        end: {
          line: 202,
          column: 15
        }
      },
      "53": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 216,
          column: 15
        }
      },
      "54": {
        start: {
          line: 217,
          column: 12
        },
        end: {
          line: 217,
          column: 35
        }
      },
      "55": {
        start: {
          line: 220,
          column: 12
        },
        end: {
          line: 220,
          column: 85
        }
      },
      "56": {
        start: {
          line: 221,
          column: 12
        },
        end: {
          line: 221,
          column: 69
        }
      },
      "57": {
        start: {
          line: 232,
          column: 8
        },
        end: {
          line: 270,
          column: 9
        }
      },
      "58": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 233,
          column: 94
        }
      },
      "59": {
        start: {
          line: 235,
          column: 29
        },
        end: {
          line: 235,
          column: 71
        }
      },
      "60": {
        start: {
          line: 237,
          column: 37
        },
        end: {
          line: 238,
          column: 80
        }
      },
      "61": {
        start: {
          line: 238,
          column: 36
        },
        end: {
          line: 238,
          column: 79
        }
      },
      "62": {
        start: {
          line: 240,
          column: 35
        },
        end: {
          line: 240,
          column: 89
        }
      },
      "63": {
        start: {
          line: 242,
          column: 32
        },
        end: {
          line: 242,
          column: 91
        }
      },
      "64": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 244,
          column: 65
        }
      },
      "65": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 249,
          column: 15
        }
      },
      "66": {
        start: {
          line: 251,
          column: 12
        },
        end: {
          line: 264,
          column: 15
        }
      },
      "67": {
        start: {
          line: 265,
          column: 12
        },
        end: {
          line: 265,
          column: 31
        }
      },
      "68": {
        start: {
          line: 268,
          column: 12
        },
        end: {
          line: 268,
          column: 84
        }
      },
      "69": {
        start: {
          line: 269,
          column: 12
        },
        end: {
          line: 269,
          column: 66
        }
      },
      "70": {
        start: {
          line: 281,
          column: 8
        },
        end: {
          line: 324,
          column: 9
        }
      },
      "71": {
        start: {
          line: 282,
          column: 12
        },
        end: {
          line: 285,
          column: 15
        }
      },
      "72": {
        start: {
          line: 287,
          column: 29
        },
        end: {
          line: 287,
          column: 71
        }
      },
      "73": {
        start: {
          line: 288,
          column: 32
        },
        end: {
          line: 288,
          column: 71
        }
      },
      "74": {
        start: {
          line: 289,
          column: 29
        },
        end: {
          line: 290,
          column: 66
        }
      },
      "75": {
        start: {
          line: 290,
          column: 29
        },
        end: {
          line: 290,
          column: 65
        }
      },
      "76": {
        start: {
          line: 292,
          column: 27
        },
        end: {
          line: 296,
          column: 14
        }
      },
      "77": {
        start: {
          line: 298,
          column: 12
        },
        end: {
          line: 298,
          column: 62
        }
      },
      "78": {
        start: {
          line: 299,
          column: 12
        },
        end: {
          line: 303,
          column: 15
        }
      },
      "79": {
        start: {
          line: 305,
          column: 12
        },
        end: {
          line: 318,
          column: 15
        }
      },
      "80": {
        start: {
          line: 319,
          column: 12
        },
        end: {
          line: 319,
          column: 26
        }
      },
      "81": {
        start: {
          line: 322,
          column: 12
        },
        end: {
          line: 322,
          column: 82
        }
      },
      "82": {
        start: {
          line: 323,
          column: 12
        },
        end: {
          line: 323,
          column: 65
        }
      },
      "83": {
        start: {
          line: 334,
          column: 8
        },
        end: {
          line: 358,
          column: 9
        }
      },
      "84": {
        start: {
          line: 335,
          column: 29
        },
        end: {
          line: 335,
          column: 66
        }
      },
      "85": {
        start: {
          line: 336,
          column: 12
        },
        end: {
          line: 338,
          column: 13
        }
      },
      "86": {
        start: {
          line: 337,
          column: 16
        },
        end: {
          line: 337,
          column: 69
        }
      },
      "87": {
        start: {
          line: 340,
          column: 32
        },
        end: {
          line: 340,
          column: 74
        }
      },
      "88": {
        start: {
          line: 341,
          column: 38
        },
        end: {
          line: 341,
          column: 67
        }
      },
      "89": {
        start: {
          line: 343,
          column: 12
        },
        end: {
          line: 343,
          column: 86
        }
      },
      "90": {
        start: {
          line: 345,
          column: 12
        },
        end: {
          line: 347,
          column: 13
        }
      },
      "91": {
        start: {
          line: 346,
          column: 16
        },
        end: {
          line: 346,
          column: 108
        }
      },
      "92": {
        start: {
          line: 348,
          column: 12
        },
        end: {
          line: 352,
          column: 15
        }
      },
      "93": {
        start: {
          line: 353,
          column: 12
        },
        end: {
          line: 353,
          column: 37
        }
      },
      "94": {
        start: {
          line: 356,
          column: 12
        },
        end: {
          line: 356,
          column: 83
        }
      },
      "95": {
        start: {
          line: 357,
          column: 12
        },
        end: {
          line: 357,
          column: 25
        }
      },
      "96": {
        start: {
          line: 368,
          column: 8
        },
        end: {
          line: 368,
          column: 61
        }
      },
      "97": {
        start: {
          line: 378,
          column: 8
        },
        end: {
          line: 378,
          column: 58
        }
      },
      "98": {
        start: {
          line: 388,
          column: 8
        },
        end: {
          line: 388,
          column: 63
        }
      },
      "99": {
        start: {
          line: 398,
          column: 8
        },
        end: {
          line: 398,
          column: 58
        }
      },
      "100": {
        start: {
          line: 402,
          column: 30
        },
        end: {
          line: 403,
          column: 38
        }
      },
      "101": {
        start: {
          line: 404,
          column: 8
        },
        end: {
          line: 404,
          column: 67
        }
      },
      "102": {
        start: {
          line: 407,
          column: 8
        },
        end: {
          line: 410,
          column: 38
        }
      },
      "103": {
        start: {
          line: 413,
          column: 8
        },
        end: {
          line: 445,
          column: 11
        }
      },
      "104": {
        start: {
          line: 414,
          column: 12
        },
        end: {
          line: 417,
          column: 15
        }
      },
      "105": {
        start: {
          line: 419,
          column: 12
        },
        end: {
          line: 426,
          column: 13
        }
      },
      "106": {
        start: {
          line: 420,
          column: 16
        },
        end: {
          line: 425,
          column: 17
        }
      },
      "107": {
        start: {
          line: 421,
          column: 20
        },
        end: {
          line: 421,
          column: 74
        }
      },
      "108": {
        start: {
          line: 424,
          column: 20
        },
        end: {
          line: 424,
          column: 91
        }
      },
      "109": {
        start: {
          line: 428,
          column: 12
        },
        end: {
          line: 435,
          column: 13
        }
      },
      "110": {
        start: {
          line: 429,
          column: 16
        },
        end: {
          line: 434,
          column: 17
        }
      },
      "111": {
        start: {
          line: 430,
          column: 20
        },
        end: {
          line: 430,
          column: 73
        }
      },
      "112": {
        start: {
          line: 433,
          column: 20
        },
        end: {
          line: 433,
          column: 86
        }
      },
      "113": {
        start: {
          line: 437,
          column: 12
        },
        end: {
          line: 444,
          column: 13
        }
      },
      "114": {
        start: {
          line: 438,
          column: 16
        },
        end: {
          line: 443,
          column: 17
        }
      },
      "115": {
        start: {
          line: 439,
          column: 20
        },
        end: {
          line: 439,
          column: 86
        }
      },
      "116": {
        start: {
          line: 442,
          column: 20
        },
        end: {
          line: 442,
          column: 85
        }
      },
      "117": {
        start: {
          line: 449,
          column: 8
        },
        end: {
          line: 451,
          column: 32
        }
      },
      "118": {
        start: {
          line: 450,
          column: 12
        },
        end: {
          line: 450,
          column: 42
        }
      },
      "119": {
        start: {
          line: 454,
          column: 8
        },
        end: {
          line: 489,
          column: 9
        }
      },
      "120": {
        start: {
          line: 455,
          column: 31
        },
        end: {
          line: 455,
          column: 114
        }
      },
      "121": {
        start: {
          line: 457,
          column: 29
        },
        end: {
          line: 477,
          column: 13
        }
      },
      "122": {
        start: {
          line: 479,
          column: 12
        },
        end: {
          line: 479,
          column: 71
        }
      },
      "123": {
        start: {
          line: 481,
          column: 12
        },
        end: {
          line: 483,
          column: 13
        }
      },
      "124": {
        start: {
          line: 482,
          column: 16
        },
        end: {
          line: 482,
          column: 162
        }
      },
      "125": {
        start: {
          line: 484,
          column: 12
        },
        end: {
          line: 484,
          column: 28
        }
      },
      "126": {
        start: {
          line: 487,
          column: 12
        },
        end: {
          line: 487,
          column: 90
        }
      },
      "127": {
        start: {
          line: 488,
          column: 12
        },
        end: {
          line: 488,
          column: 24
        }
      },
      "128": {
        start: {
          line: 492,
          column: 32
        },
        end: {
          line: 492,
          column: 34
        }
      },
      "129": {
        start: {
          line: 493,
          column: 8
        },
        end: {
          line: 538,
          column: 9
        }
      },
      "130": {
        start: {
          line: 495,
          column: 12
        },
        end: {
          line: 534,
          column: 13
        }
      },
      "131": {
        start: {
          line: 497,
          column: 20
        },
        end: {
          line: 506,
          column: 23
        }
      },
      "132": {
        start: {
          line: 507,
          column: 20
        },
        end: {
          line: 507,
          column: 26
        }
      },
      "133": {
        start: {
          line: 509,
          column: 20
        },
        end: {
          line: 518,
          column: 23
        }
      },
      "134": {
        start: {
          line: 519,
          column: 20
        },
        end: {
          line: 519,
          column: 26
        }
      },
      "135": {
        start: {
          line: 521,
          column: 20
        },
        end: {
          line: 530,
          column: 23
        }
      },
      "136": {
        start: {
          line: 531,
          column: 20
        },
        end: {
          line: 531,
          column: 26
        }
      },
      "137": {
        start: {
          line: 533,
          column: 20
        },
        end: {
          line: 533,
          column: 112
        }
      },
      "138": {
        start: {
          line: 537,
          column: 12
        },
        end: {
          line: 537,
          column: 81
        }
      },
      "139": {
        start: {
          line: 539,
          column: 8
        },
        end: {
          line: 539,
          column: 31
        }
      },
      "140": {
        start: {
          line: 543,
          column: 34
        },
        end: {
          line: 546,
          column: 10
        }
      },
      "141": {
        start: {
          line: 544,
          column: 12
        },
        end: {
          line: 545,
          column: 95
        }
      },
      "142": {
        start: {
          line: 544,
          column: 40
        },
        end: {
          line: 545,
          column: 83
        }
      },
      "143": {
        start: {
          line: 548,
          column: 8
        },
        end: {
          line: 552,
          column: 11
        }
      },
      "144": {
        start: {
          line: 549,
          column: 12
        },
        end: {
          line: 551,
          column: 13
        }
      },
      "145": {
        start: {
          line: 550,
          column: 16
        },
        end: {
          line: 550,
          column: 73
        }
      },
      "146": {
        start: {
          line: 553,
          column: 8
        },
        end: {
          line: 553,
          column: 33
        }
      },
      "147": {
        start: {
          line: 556,
          column: 27
        },
        end: {
          line: 559,
          column: 84
        }
      },
      "148": {
        start: {
          line: 557,
          column: 29
        },
        end: {
          line: 557,
          column: 55
        }
      },
      "149": {
        start: {
          line: 558,
          column: 26
        },
        end: {
          line: 558,
          column: 52
        }
      },
      "150": {
        start: {
          line: 559,
          column: 49
        },
        end: {
          line: 559,
          column: 83
        }
      },
      "151": {
        start: {
          line: 560,
          column: 24
        },
        end: {
          line: 562,
          column: 78
        }
      },
      "152": {
        start: {
          line: 561,
          column: 26
        },
        end: {
          line: 561,
          column: 41
        }
      },
      "153": {
        start: {
          line: 562,
          column: 46
        },
        end: {
          line: 562,
          column: 77
        }
      },
      "154": {
        start: {
          line: 564,
          column: 22
        },
        end: {
          line: 564,
          column: 61
        }
      },
      "155": {
        start: {
          line: 565,
          column: 31
        },
        end: {
          line: 565,
          column: 68
        }
      },
      "156": {
        start: {
          line: 566,
          column: 8
        },
        end: {
          line: 566,
          column: 62
        }
      },
      "157": {
        start: {
          line: 570,
          column: 28
        },
        end: {
          line: 588,
          column: 9
        }
      },
      "158": {
        start: {
          line: 590,
          column: 8
        },
        end: {
          line: 593,
          column: 9
        }
      },
      "159": {
        start: {
          line: 591,
          column: 12
        },
        end: {
          line: 591,
          column: 53
        }
      },
      "160": {
        start: {
          line: 592,
          column: 12
        },
        end: {
          line: 592,
          column: 65
        }
      },
      "161": {
        start: {
          line: 594,
          column: 8
        },
        end: {
          line: 594,
          column: 27
        }
      },
      "162": {
        start: {
          line: 597,
          column: 25
        },
        end: {
          line: 597,
          column: 61
        }
      },
      "163": {
        start: {
          line: 599,
          column: 28
        },
        end: {
          line: 604,
          column: 9
        }
      },
      "164": {
        start: {
          line: 605,
          column: 8
        },
        end: {
          line: 607,
          column: 9
        }
      },
      "165": {
        start: {
          line: 606,
          column: 12
        },
        end: {
          line: 606,
          column: 124
        }
      },
      "166": {
        start: {
          line: 609,
          column: 32
        },
        end: {
          line: 614,
          column: 9
        }
      },
      "167": {
        start: {
          line: 615,
          column: 23
        },
        end: {
          line: 632,
          column: 9
        }
      },
      "168": {
        start: {
          line: 633,
          column: 8
        },
        end: {
          line: 633,
          column: 22
        }
      },
      "169": {
        start: {
          line: 636,
          column: 25
        },
        end: {
          line: 643,
          column: 9
        }
      },
      "170": {
        start: {
          line: 644,
          column: 8
        },
        end: {
          line: 646,
          column: 27
        }
      },
      "171": {
        start: {
          line: 649,
          column: 22
        },
        end: {
          line: 657,
          column: 9
        }
      },
      "172": {
        start: {
          line: 658,
          column: 8
        },
        end: {
          line: 658,
          column: 44
        }
      },
      "173": {
        start: {
          line: 661,
          column: 30
        },
        end: {
          line: 661,
          column: 78
        }
      },
      "174": {
        start: {
          line: 662,
          column: 8
        },
        end: {
          line: 664,
          column: 27
        }
      },
      "175": {
        start: {
          line: 667,
          column: 27
        },
        end: {
          line: 667,
          column: 115
        }
      },
      "176": {
        start: {
          line: 669,
          column: 8
        },
        end: {
          line: 673,
          column: 9
        }
      },
      "177": {
        start: {
          line: 670,
          column: 12
        },
        end: {
          line: 672,
          column: 13
        }
      },
      "178": {
        start: {
          line: 671,
          column: 16
        },
        end: {
          line: 671,
          column: 57
        }
      },
      "179": {
        start: {
          line: 675,
          column: 8
        },
        end: {
          line: 679,
          column: 9
        }
      },
      "180": {
        start: {
          line: 676,
          column: 12
        },
        end: {
          line: 678,
          column: 13
        }
      },
      "181": {
        start: {
          line: 677,
          column: 16
        },
        end: {
          line: 677,
          column: 54
        }
      },
      "182": {
        start: {
          line: 688,
          column: 8
        },
        end: {
          line: 695,
          column: 10
        }
      },
      "183": {
        start: {
          line: 698,
          column: 0
        },
        end: {
          line: 698,
          column: 58
        }
      },
      "184": {
        start: {
          line: 700,
          column: 0
        },
        end: {
          line: 700,
          column: 64
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 40,
            column: 4
          },
          end: {
            line: 40,
            column: 5
          }
        },
        loc: {
          start: {
            line: 40,
            column: 24
          },
          end: {
            line: 82,
            column: 5
          }
        },
        line: 40
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 89,
            column: 4
          },
          end: {
            line: 89,
            column: 5
          }
        },
        loc: {
          start: {
            line: 89,
            column: 34
          },
          end: {
            line: 115,
            column: 5
          }
        },
        line: 89
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 124,
            column: 4
          },
          end: {
            line: 124,
            column: 5
          }
        },
        loc: {
          start: {
            line: 124,
            column: 112
          },
          end: {
            line: 169,
            column: 5
          }
        },
        line: 124
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 177,
            column: 4
          },
          end: {
            line: 177,
            column: 5
          }
        },
        loc: {
          start: {
            line: 177,
            column: 48
          },
          end: {
            line: 223,
            column: 5
          }
        },
        line: 177
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 182,
            column: 24
          },
          end: {
            line: 182,
            column: 25
          }
        },
        loc: {
          start: {
            line: 182,
            column: 36
          },
          end: {
            line: 182,
            column: 79
          }
        },
        line: 182
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 194,
            column: 33
          },
          end: {
            line: 194,
            column: 34
          }
        },
        loc: {
          start: {
            line: 194,
            column: 43
          },
          end: {
            line: 194,
            column: 88
          }
        },
        line: 194
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 231,
            column: 4
          },
          end: {
            line: 231,
            column: 5
          }
        },
        loc: {
          start: {
            line: 231,
            column: 47
          },
          end: {
            line: 271,
            column: 5
          }
        },
        line: 231
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 238,
            column: 24
          },
          end: {
            line: 238,
            column: 25
          }
        },
        loc: {
          start: {
            line: 238,
            column: 36
          },
          end: {
            line: 238,
            column: 79
          }
        },
        line: 238
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 280,
            column: 4
          },
          end: {
            line: 280,
            column: 5
          }
        },
        loc: {
          start: {
            line: 280,
            column: 70
          },
          end: {
            line: 325,
            column: 5
          }
        },
        line: 280
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 290,
            column: 24
          },
          end: {
            line: 290,
            column: 25
          }
        },
        loc: {
          start: {
            line: 290,
            column: 29
          },
          end: {
            line: 290,
            column: 65
          }
        },
        line: 290
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 333,
            column: 4
          },
          end: {
            line: 333,
            column: 5
          }
        },
        loc: {
          start: {
            line: 333,
            column: 46
          },
          end: {
            line: 359,
            column: 5
          }
        },
        line: 333
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 367,
            column: 4
          },
          end: {
            line: 367,
            column: 5
          }
        },
        loc: {
          start: {
            line: 367,
            column: 36
          },
          end: {
            line: 369,
            column: 5
          }
        },
        line: 367
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 377,
            column: 4
          },
          end: {
            line: 377,
            column: 5
          }
        },
        loc: {
          start: {
            line: 377,
            column: 34
          },
          end: {
            line: 379,
            column: 5
          }
        },
        line: 377
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 387,
            column: 4
          },
          end: {
            line: 387,
            column: 5
          }
        },
        loc: {
          start: {
            line: 387,
            column: 37
          },
          end: {
            line: 389,
            column: 5
          }
        },
        line: 387
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 397,
            column: 4
          },
          end: {
            line: 397,
            column: 5
          }
        },
        loc: {
          start: {
            line: 397,
            column: 32
          },
          end: {
            line: 399,
            column: 5
          }
        },
        line: 397
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 401,
            column: 4
          },
          end: {
            line: 401,
            column: 5
          }
        },
        loc: {
          start: {
            line: 401,
            column: 34
          },
          end: {
            line: 405,
            column: 5
          }
        },
        line: 401
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 406,
            column: 4
          },
          end: {
            line: 406,
            column: 5
          }
        },
        loc: {
          start: {
            line: 406,
            column: 30
          },
          end: {
            line: 411,
            column: 5
          }
        },
        line: 406
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 412,
            column: 4
          },
          end: {
            line: 412,
            column: 5
          }
        },
        loc: {
          start: {
            line: 412,
            column: 25
          },
          end: {
            line: 446,
            column: 5
          }
        },
        line: 412
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 413,
            column: 37
          },
          end: {
            line: 413,
            column: 38
          }
        },
        loc: {
          start: {
            line: 413,
            column: 53
          },
          end: {
            line: 445,
            column: 9
          }
        },
        line: 413
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 447,
            column: 4
          },
          end: {
            line: 447,
            column: 5
          }
        },
        loc: {
          start: {
            line: 447,
            column: 27
          },
          end: {
            line: 452,
            column: 5
          }
        },
        line: 447
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 449,
            column: 20
          },
          end: {
            line: 449,
            column: 21
          }
        },
        loc: {
          start: {
            line: 449,
            column: 26
          },
          end: {
            line: 451,
            column: 9
          }
        },
        line: 449
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 453,
            column: 4
          },
          end: {
            line: 453,
            column: 5
          }
        },
        loc: {
          start: {
            line: 453,
            column: 56
          },
          end: {
            line: 490,
            column: 5
          }
        },
        line: 453
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 491,
            column: 4
          },
          end: {
            line: 491,
            column: 5
          }
        },
        loc: {
          start: {
            line: 491,
            column: 47
          },
          end: {
            line: 540,
            column: 5
          }
        },
        line: 491
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 541,
            column: 4
          },
          end: {
            line: 541,
            column: 5
          }
        },
        loc: {
          start: {
            line: 541,
            column: 45
          },
          end: {
            line: 554,
            column: 5
          }
        },
        line: 541
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 543,
            column: 57
          },
          end: {
            line: 543,
            column: 58
          }
        },
        loc: {
          start: {
            line: 543,
            column: 82
          },
          end: {
            line: 546,
            column: 9
          }
        },
        line: 543
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 544,
            column: 35
          },
          end: {
            line: 544,
            column: 36
          }
        },
        loc: {
          start: {
            line: 544,
            column: 40
          },
          end: {
            line: 545,
            column: 83
          }
        },
        line: 544
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 548,
            column: 34
          },
          end: {
            line: 548,
            column: 35
          }
        },
        loc: {
          start: {
            line: 548,
            column: 43
          },
          end: {
            line: 552,
            column: 9
          }
        },
        line: 548
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 555,
            column: 4
          },
          end: {
            line: 555,
            column: 5
          }
        },
        loc: {
          start: {
            line: 555,
            column: 46
          },
          end: {
            line: 567,
            column: 5
          }
        },
        line: 555
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 557,
            column: 20
          },
          end: {
            line: 557,
            column: 21
          }
        },
        loc: {
          start: {
            line: 557,
            column: 29
          },
          end: {
            line: 557,
            column: 55
          }
        },
        line: 557
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 558,
            column: 17
          },
          end: {
            line: 558,
            column: 18
          }
        },
        loc: {
          start: {
            line: 558,
            column: 26
          },
          end: {
            line: 558,
            column: 52
          }
        },
        line: 558
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 559,
            column: 20
          },
          end: {
            line: 559,
            column: 21
          }
        },
        loc: {
          start: {
            line: 559,
            column: 49
          },
          end: {
            line: 559,
            column: 83
          }
        },
        line: 559
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 561,
            column: 17
          },
          end: {
            line: 561,
            column: 18
          }
        },
        loc: {
          start: {
            line: 561,
            column: 26
          },
          end: {
            line: 561,
            column: 41
          }
        },
        line: 561
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 562,
            column: 20
          },
          end: {
            line: 562,
            column: 21
          }
        },
        loc: {
          start: {
            line: 562,
            column: 46
          },
          end: {
            line: 562,
            column: 77
          }
        },
        line: 562
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 568,
            column: 4
          },
          end: {
            line: 568,
            column: 5
          }
        },
        loc: {
          start: {
            line: 568,
            column: 59
          },
          end: {
            line: 595,
            column: 5
          }
        },
        line: 568
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 596,
            column: 4
          },
          end: {
            line: 596,
            column: 5
          }
        },
        loc: {
          start: {
            line: 596,
            column: 55
          },
          end: {
            line: 634,
            column: 5
          }
        },
        line: 596
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 635,
            column: 4
          },
          end: {
            line: 635,
            column: 5
          }
        },
        loc: {
          start: {
            line: 635,
            column: 42
          },
          end: {
            line: 647,
            column: 5
          }
        },
        line: 635
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 648,
            column: 4
          },
          end: {
            line: 648,
            column: 5
          }
        },
        loc: {
          start: {
            line: 648,
            column: 67
          },
          end: {
            line: 659,
            column: 5
          }
        },
        line: 648
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 660,
            column: 4
          },
          end: {
            line: 660,
            column: 5
          }
        },
        loc: {
          start: {
            line: 660,
            column: 48
          },
          end: {
            line: 665,
            column: 5
          }
        },
        line: 660
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 666,
            column: 4
          },
          end: {
            line: 666,
            column: 5
          }
        },
        loc: {
          start: {
            line: 666,
            column: 29
          },
          end: {
            line: 680,
            column: 5
          }
        },
        line: 666
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 687,
            column: 4
          },
          end: {
            line: 687,
            column: 5
          }
        },
        loc: {
          start: {
            line: 687,
            column: 16
          },
          end: {
            line: 696,
            column: 5
          }
        },
        line: 687
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 124,
            column: 44
          },
          end: {
            line: 124,
            column: 110
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 124,
            column: 60
          },
          end: {
            line: 124,
            column: 110
          }
        }],
        line: 124
      },
      "1": {
        loc: {
          start: {
            line: 134,
            column: 20
          },
          end: {
            line: 137,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 134,
            column: 20
          },
          end: {
            line: 137,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 134
      },
      "2": {
        loc: {
          start: {
            line: 183,
            column: 12
          },
          end: {
            line: 186,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 183,
            column: 12
          },
          end: {
            line: 186,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 183
      },
      "3": {
        loc: {
          start: {
            line: 235,
            column: 29
          },
          end: {
            line: 235,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 235,
            column: 29
          },
          end: {
            line: 235,
            column: 65
          }
        }, {
          start: {
            line: 235,
            column: 69
          },
          end: {
            line: 235,
            column: 71
          }
        }],
        line: 235
      },
      "4": {
        loc: {
          start: {
            line: 280,
            column: 45
          },
          end: {
            line: 280,
            column: 68
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 280,
            column: 58
          },
          end: {
            line: 280,
            column: 68
          }
        }],
        line: 280
      },
      "5": {
        loc: {
          start: {
            line: 287,
            column: 29
          },
          end: {
            line: 287,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 287,
            column: 29
          },
          end: {
            line: 287,
            column: 65
          }
        }, {
          start: {
            line: 287,
            column: 69
          },
          end: {
            line: 287,
            column: 71
          }
        }],
        line: 287
      },
      "6": {
        loc: {
          start: {
            line: 336,
            column: 12
          },
          end: {
            line: 338,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 336,
            column: 12
          },
          end: {
            line: 338,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 336
      },
      "7": {
        loc: {
          start: {
            line: 343,
            column: 39
          },
          end: {
            line: 343,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 343,
            column: 59
          },
          end: {
            line: 343,
            column: 69
          }
        }, {
          start: {
            line: 343,
            column: 72
          },
          end: {
            line: 343,
            column: 85
          }
        }],
        line: 343
      },
      "8": {
        loc: {
          start: {
            line: 345,
            column: 12
          },
          end: {
            line: 347,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 345,
            column: 12
          },
          end: {
            line: 347,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 345
      },
      "9": {
        loc: {
          start: {
            line: 368,
            column: 15
          },
          end: {
            line: 368,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 368,
            column: 15
          },
          end: {
            line: 368,
            column: 52
          }
        }, {
          start: {
            line: 368,
            column: 56
          },
          end: {
            line: 368,
            column: 60
          }
        }],
        line: 368
      },
      "10": {
        loc: {
          start: {
            line: 378,
            column: 15
          },
          end: {
            line: 378,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 378,
            column: 15
          },
          end: {
            line: 378,
            column: 51
          }
        }, {
          start: {
            line: 378,
            column: 55
          },
          end: {
            line: 378,
            column: 57
          }
        }],
        line: 378
      },
      "11": {
        loc: {
          start: {
            line: 388,
            column: 15
          },
          end: {
            line: 388,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 388,
            column: 15
          },
          end: {
            line: 388,
            column: 54
          }
        }, {
          start: {
            line: 388,
            column: 58
          },
          end: {
            line: 388,
            column: 62
          }
        }],
        line: 388
      },
      "12": {
        loc: {
          start: {
            line: 398,
            column: 15
          },
          end: {
            line: 398,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 398,
            column: 15
          },
          end: {
            line: 398,
            column: 49
          }
        }, {
          start: {
            line: 398,
            column: 53
          },
          end: {
            line: 398,
            column: 57
          }
        }],
        line: 398
      },
      "13": {
        loc: {
          start: {
            line: 402,
            column: 30
          },
          end: {
            line: 403,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 402,
            column: 30
          },
          end: {
            line: 402,
            column: 61
          }
        }, {
          start: {
            line: 403,
            column: 12
          },
          end: {
            line: 403,
            column: 38
          }
        }],
        line: 402
      },
      "14": {
        loc: {
          start: {
            line: 419,
            column: 12
          },
          end: {
            line: 426,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 419,
            column: 12
          },
          end: {
            line: 426,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 419
      },
      "15": {
        loc: {
          start: {
            line: 428,
            column: 12
          },
          end: {
            line: 435,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 428,
            column: 12
          },
          end: {
            line: 435,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 428
      },
      "16": {
        loc: {
          start: {
            line: 437,
            column: 12
          },
          end: {
            line: 444,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 437,
            column: 12
          },
          end: {
            line: 444,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 437
      },
      "17": {
        loc: {
          start: {
            line: 481,
            column: 12
          },
          end: {
            line: 483,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 481,
            column: 12
          },
          end: {
            line: 483,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 481
      },
      "18": {
        loc: {
          start: {
            line: 495,
            column: 12
          },
          end: {
            line: 534,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 496,
            column: 16
          },
          end: {
            line: 507,
            column: 26
          }
        }, {
          start: {
            line: 508,
            column: 16
          },
          end: {
            line: 519,
            column: 26
          }
        }, {
          start: {
            line: 520,
            column: 16
          },
          end: {
            line: 531,
            column: 26
          }
        }, {
          start: {
            line: 532,
            column: 16
          },
          end: {
            line: 533,
            column: 112
          }
        }],
        line: 495
      },
      "19": {
        loc: {
          start: {
            line: 544,
            column: 40
          },
          end: {
            line: 545,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 544,
            column: 40
          },
          end: {
            line: 544,
            column: 71
          }
        }, {
          start: {
            line: 545,
            column: 16
          },
          end: {
            line: 545,
            column: 83
          }
        }],
        line: 544
      },
      "20": {
        loc: {
          start: {
            line: 549,
            column: 12
          },
          end: {
            line: 551,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 549,
            column: 12
          },
          end: {
            line: 551,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 549
      },
      "21": {
        loc: {
          start: {
            line: 590,
            column: 8
          },
          end: {
            line: 593,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 590,
            column: 8
          },
          end: {
            line: 593,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 590
      },
      "22": {
        loc: {
          start: {
            line: 605,
            column: 8
          },
          end: {
            line: 607,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 605,
            column: 8
          },
          end: {
            line: 607,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 605
      },
      "23": {
        loc: {
          start: {
            line: 670,
            column: 12
          },
          end: {
            line: 672,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 670,
            column: 12
          },
          end: {
            line: 672,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 670
      },
      "24": {
        loc: {
          start: {
            line: 670,
            column: 16
          },
          end: {
            line: 670,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 670,
            column: 16
          },
          end: {
            line: 670,
            column: 49
          }
        }, {
          start: {
            line: 670,
            column: 53
          },
          end: {
            line: 670,
            column: 72
          }
        }],
        line: 670
      },
      "25": {
        loc: {
          start: {
            line: 676,
            column: 12
          },
          end: {
            line: 678,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 676,
            column: 12
          },
          end: {
            line: 678,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 676
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0, 0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c2716cff299935309aefd18432894701a558732d"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1s8bbcmgr7 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1s8bbcmgr7();
cov_1s8bbcmgr7().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1s8bbcmgr7().s[1]++;
exports.forensicAnalysisService = exports.ForensicAnalysisService = void 0;
const events_1 =
/* istanbul ignore next */
(cov_1s8bbcmgr7().s[2]++, require("events"));
const crypto_1 =
/* istanbul ignore next */
(cov_1s8bbcmgr7().s[3]++, require("crypto"));
const logger_1 =
/* istanbul ignore next */
(cov_1s8bbcmgr7().s[4]++, require("@/core/logging/logger"));
const audit_service_1 =
/* istanbul ignore next */
(cov_1s8bbcmgr7().s[5]++, require("@/security/audit-service"));
/**
 * Forensic analysis service
 * Provides comprehensive digital forensics and incident analysis capabilities
 */
class ForensicAnalysisService extends
/* istanbul ignore next */
(events_1.EventEmitter) {
  constructor(config) {
    /* istanbul ignore next */
    cov_1s8bbcmgr7().f[0]++;
    cov_1s8bbcmgr7().s[6]++;
    super();
    /** Forensic evidence storage */
    /* istanbul ignore next */
    cov_1s8bbcmgr7().s[7]++;
    this.forensicEvidence = new Map();
    /** Attack timelines */
    /* istanbul ignore next */
    cov_1s8bbcmgr7().s[8]++;
    this.attackTimelines = new Map();
    /** Threat attribution analyses */
    /* istanbul ignore next */
    cov_1s8bbcmgr7().s[9]++;
    this.threatAttributions = new Map();
    /** Forensic reports */
    /* istanbul ignore next */
    cov_1s8bbcmgr7().s[10]++;
    this.forensicReports = new Map();
    // Initialize configuration with defaults
    /* istanbul ignore next */
    cov_1s8bbcmgr7().s[11]++;
    this.config = {
      evidenceCollection: {
        autoCollectionEnabled: true,
        collectionTimeoutMs: 300000,
        // 5 minutes
        maxEvidenceSize: 1024 * 1024 * 1024,
        // 1GB
        compressionEnabled: true,
        encryptionEnabled: true
      },
      chainOfCustody: {
        enabled: true,
        digitalSigningEnabled: true,
        timestampingEnabled: true,
        witnessRequired: false
      },
      analysis: {
        timelineReconstructionEnabled: true,
        threatAttributionEnabled: true,
        correlationAnalysisEnabled: true,
        behavioralAnalysisEnabled: true
      },
      reporting: {
        autoReportGeneration: true,
        reportFormats: ['json', 'pdf', 'html'],
        reportRetentionDays: 2555,
        // 7 years
        legalComplianceMode: true
      },
      ...config
    };
    // Initialize custody signing key
    /* istanbul ignore next */
    cov_1s8bbcmgr7().s[12]++;
    this.initializeCustodySigningKey();
    /* istanbul ignore next */
    cov_1s8bbcmgr7().s[13]++;
    logger_1.logger.info('🔬 Forensic Analysis Service initialized');
  }
  /**
   * Start forensic analysis service
   * Begins forensic analysis operations
   *
   * @returns Promise<void>
   */
  async startForensicAnalysis() {
    /* istanbul ignore next */
    cov_1s8bbcmgr7().f[1]++;
    cov_1s8bbcmgr7().s[14]++;
    try {
      /* istanbul ignore next */
      cov_1s8bbcmgr7().s[15]++;
      logger_1.logger.info('🚀 Starting forensic analysis service...');
      // Set up event handlers
      /* istanbul ignore next */
      cov_1s8bbcmgr7().s[16]++;
      this.setupEventHandlers();
      // Start periodic cleanup
      /* istanbul ignore next */
      cov_1s8bbcmgr7().s[17]++;
      this.startPeriodicCleanup();
      // Create audit entry
      /* istanbul ignore next */
      cov_1s8bbcmgr7().s[18]++;
      await audit_service_1.auditService.createAuditEntry({
        auditId: `forensic_start_${Date.now()}`,
        eventType: 'FORENSIC_ANALYSIS_START',
        actor: 'SYSTEM',
        resource: 'FORENSIC_ANALYSIS_SERVICE',
        action: 'START_SERVICE',
        result: 'SUCCESS',
        timestamp: new Date(),
        auditData: {
          config: this.config
        }
      });
      /* istanbul ignore next */
      cov_1s8bbcmgr7().s[19]++;
      logger_1.logger.info('✅ Forensic analysis service started successfully');
    } catch (error) {
      /* istanbul ignore next */
      cov_1s8bbcmgr7().s[20]++;
      logger_1.logger.error('❌ Failed to start forensic analysis service:', error);
      /* istanbul ignore next */
      cov_1s8bbcmgr7().s[21]++;
      throw new Error('Forensic analysis service startup failed');
    }
  }
  /**
   * Collect forensic evidence
   * Collects and preserves forensic evidence for incident
   *
   * @param incident - Security incident
   * @param evidenceTypes - Types of evidence to collect
   * @returns Promise<ForensicEvidence[]> Collected evidence
   */
  async collectForensicEvidence(incident, evidenceTypes =
  /* istanbul ignore next */
  (cov_1s8bbcmgr7().b[0][0]++, ['log_file', 'system_snapshot', 'network_capture'])) {
    /* istanbul ignore next */
    cov_1s8bbcmgr7().f[2]++;
    cov_1s8bbcmgr7().s[22]++;
    try {
      /* istanbul ignore next */
      cov_1s8bbcmgr7().s[23]++;
      logger_1.logger.info('🔍 Collecting forensic evidence', {
        incidentId: incident.incidentId,
        evidenceTypes
      });
      const collectedEvidence =
      /* istanbul ignore next */
      (cov_1s8bbcmgr7().s[24]++, []);
      /* istanbul ignore next */
      cov_1s8bbcmgr7().s[25]++;
      for (const evidenceType of evidenceTypes) {
        /* istanbul ignore next */
        cov_1s8bbcmgr7().s[26]++;
        try {
          const evidence =
          /* istanbul ignore next */
          (cov_1s8bbcmgr7().s[27]++, await this.collectEvidenceByType(incident, evidenceType));
          /* istanbul ignore next */
          cov_1s8bbcmgr7().s[28]++;
          if (evidence) {
            /* istanbul ignore next */
            cov_1s8bbcmgr7().b[1][0]++;
            cov_1s8bbcmgr7().s[29]++;
            collectedEvidence.push(evidence);
            /* istanbul ignore next */
            cov_1s8bbcmgr7().s[30]++;
            this.forensicEvidence.set(evidence.evidenceId, evidence);
          } else
          /* istanbul ignore next */
          {
            cov_1s8bbcmgr7().b[1][1]++;
          }
        } catch (error) {
          /* istanbul ignore next */
          cov_1s8bbcmgr7().s[31]++;
          logger_1.logger.error(`❌ Failed to collect ${evidenceType} evidence:`, error);
        }
      }
      // Create audit entry
      /* istanbul ignore next */
      cov_1s8bbcmgr7().s[32]++;
      await audit_service_1.auditService.createAuditEntry({
        auditId: `evidence_collection_${incident.incidentId}`,
        eventType: 'FORENSIC_EVIDENCE_COLLECTED',
        actor: 'FORENSIC_ANALYSIS_SERVICE',
        resource: incident.sourceEvent.target,
        action: 'COLLECT_EVIDENCE',
        result: 'SUCCESS',
        timestamp: new Date(),
        auditData: {
          incidentId: incident.incidentId,
          evidenceCount: collectedEvidence.length,
          evidenceTypes
        }
      });
      // Emit evidence collected event
      /* istanbul ignore next */
      cov_1s8bbcmgr7().s[33]++;
      this.emit('evidenceCollected', {
        incidentId: incident.incidentId,
        evidence: collectedEvidence
      });
      /* istanbul ignore next */
      cov_1s8bbcmgr7().s[34]++;
      return collectedEvidence;
    } catch (error) {
      /* istanbul ignore next */
      cov_1s8bbcmgr7().s[35]++;
      logger_1.logger.error('❌ Failed to collect forensic evidence:', error);
      /* istanbul ignore next */
      cov_1s8bbcmgr7().s[36]++;
      throw new Error('Forensic evidence collection failed');
    }
  }
  /**
   * Reconstruct attack timeline
   * Analyzes evidence to reconstruct attack timeline
   *
   * @param incidentId - Incident identifier
   * @returns Promise<AttackTimelineEntry[]> Reconstructed timeline
   */
  async reconstructAttackTimeline(incidentId) {
    /* istanbul ignore next */
    cov_1s8bbcmgr7().f[3]++;
    cov_1s8bbcmgr7().s[37]++;
    try {
      /* istanbul ignore next */
      cov_1s8bbcmgr7().s[38]++;
      logger_1.logger.info('⏱️ Reconstructing attack timeline', {
        incidentId
      });
      // Get all evidence for incident
      const incidentEvidence =
      /* istanbul ignore next */
      (cov_1s8bbcmgr7().s[39]++, Array.from(this.forensicEvidence.values()).filter(evidence => {
        /* istanbul ignore next */
        cov_1s8bbcmgr7().f[4]++;
        cov_1s8bbcmgr7().s[40]++;
        return evidence.metadata.incidentId === incidentId;
      }));
      /* istanbul ignore next */
      cov_1s8bbcmgr7().s[41]++;
      if (incidentEvidence.length === 0) {
        /* istanbul ignore next */
        cov_1s8bbcmgr7().b[2][0]++;
        cov_1s8bbcmgr7().s[42]++;
        logger_1.logger.warn('⚠️ No evidence found for timeline reconstruction', {
          incidentId
        });
        /* istanbul ignore next */
        cov_1s8bbcmgr7().s[43]++;
        return [];
      } else
      /* istanbul ignore next */
      {
        cov_1s8bbcmgr7().b[2][1]++;
      }
      const timelineEntries =
      /* istanbul ignore next */
      (cov_1s8bbcmgr7().s[44]++, []);
      // Analyze each piece of evidence
      /* istanbul ignore next */
      cov_1s8bbcmgr7().s[45]++;
      for (const evidence of incidentEvidence) {
        const analysisResults =
        /* istanbul ignore next */
        (cov_1s8bbcmgr7().s[46]++, await this.analyzeEvidenceForTimeline(evidence));
        /* istanbul ignore next */
        cov_1s8bbcmgr7().s[47]++;
        timelineEntries.push(...analysisResults);
      }
      // Sort timeline by timestamp
      /* istanbul ignore next */
      cov_1s8bbcmgr7().s[48]++;
      timelineEntries.sort((a, b) => {
        /* istanbul ignore next */
        cov_1s8bbcmgr7().f[5]++;
        cov_1s8bbcmgr7().s[49]++;
        return a.timestamp.getTime() - b.timestamp.getTime();
      });
      // Correlate and refine timeline
      const refinedTimeline =
      /* istanbul ignore next */
      (cov_1s8bbcmgr7().s[50]++, this.correlateTimelineEvents(timelineEntries));
      // Store timeline
      /* istanbul ignore next */
      cov_1s8bbcmgr7().s[51]++;
      this.attackTimelines.set(incidentId, refinedTimeline);
      /* istanbul ignore next */
      cov_1s8bbcmgr7().s[52]++;
      logger_1.logger.info('✅ Attack timeline reconstructed', {
        incidentId,
        timelineEntries: refinedTimeline.length
      });
      // Create audit entry
      /* istanbul ignore next */
      cov_1s8bbcmgr7().s[53]++;
      await audit_service_1.auditService.createAuditEntry({
        auditId: `timeline_${incidentId}`,
        eventType: 'ATTACK_TIMELINE_RECONSTRUCTED',
        actor: 'FORENSIC_ANALYSIS_SERVICE',
        resource: 'ATTACK_TIMELINE',
        action: 'RECONSTRUCT_TIMELINE',
        result: 'SUCCESS',
        timestamp: new Date(),
        auditData: {
          incidentId,
          timelineEntries: refinedTimeline.length
        }
      });
      /* istanbul ignore next */
      cov_1s8bbcmgr7().s[54]++;
      return refinedTimeline;
    } catch (error) {
      /* istanbul ignore next */
      cov_1s8bbcmgr7().s[55]++;
      logger_1.logger.error('❌ Failed to reconstruct attack timeline:', error);
      /* istanbul ignore next */
      cov_1s8bbcmgr7().s[56]++;
      throw new Error('Attack timeline reconstruction failed');
    }
  }
  /**
   * Perform threat attribution analysis
   * Analyzes attack patterns to attribute threat to actor
   *
   * @param incidentId - Incident identifier
   * @returns Promise<ThreatAttributionAnalysis> Attribution analysis
   */
  async performThreatAttribution(incidentId) {
    /* istanbul ignore next */
    cov_1s8bbcmgr7().f[6]++;
    cov_1s8bbcmgr7().s[57]++;
    try {
      /* istanbul ignore next */
      cov_1s8bbcmgr7().s[58]++;
      logger_1.logger.info('🎯 Performing threat attribution analysis', {
        incidentId
      });
      // Get attack timeline
      const timeline =
      /* istanbul ignore next */
      (cov_1s8bbcmgr7().s[59]++,
      /* istanbul ignore next */
      (cov_1s8bbcmgr7().b[3][0]++, this.attackTimelines.get(incidentId)) ||
      /* istanbul ignore next */
      (cov_1s8bbcmgr7().b[3][1]++, []));
      // Get evidence for analysis
      const incidentEvidence =
      /* istanbul ignore next */
      (cov_1s8bbcmgr7().s[60]++, Array.from(this.forensicEvidence.values()).filter(evidence => {
        /* istanbul ignore next */
        cov_1s8bbcmgr7().f[7]++;
        cov_1s8bbcmgr7().s[61]++;
        return evidence.metadata.incidentId === incidentId;
      }));
      // Analyze attack patterns
      const attackPatterns =
      /* istanbul ignore next */
      (cov_1s8bbcmgr7().s[62]++, this.analyzeAttackPatterns(timeline, incidentEvidence));
      // Perform attribution analysis
      const attribution =
      /* istanbul ignore next */
      (cov_1s8bbcmgr7().s[63]++, this.performAttributionAnalysis(incidentId, attackPatterns));
      // Store attribution analysis
      /* istanbul ignore next */
      cov_1s8bbcmgr7().s[64]++;
      this.threatAttributions.set(incidentId, attribution);
      /* istanbul ignore next */
      cov_1s8bbcmgr7().s[65]++;
      logger_1.logger.info('✅ Threat attribution analysis completed', {
        incidentId,
        confidence: attribution.attributionConfidence,
        sophistication: attribution.threatActor.sophisticationLevel
      });
      // Create audit entry
      /* istanbul ignore next */
      cov_1s8bbcmgr7().s[66]++;
      await audit_service_1.auditService.createAuditEntry({
        auditId: `attribution_${incidentId}`,
        eventType: 'THREAT_ATTRIBUTION_COMPLETED',
        actor: 'FORENSIC_ANALYSIS_SERVICE',
        resource: 'THREAT_ATTRIBUTION',
        action: 'PERFORM_ATTRIBUTION',
        result: 'SUCCESS',
        timestamp: new Date(),
        auditData: {
          incidentId,
          confidence: attribution.attributionConfidence,
          sophistication: attribution.threatActor.sophisticationLevel
        }
      });
      /* istanbul ignore next */
      cov_1s8bbcmgr7().s[67]++;
      return attribution;
    } catch (error) {
      /* istanbul ignore next */
      cov_1s8bbcmgr7().s[68]++;
      logger_1.logger.error('❌ Failed to perform threat attribution:', error);
      /* istanbul ignore next */
      cov_1s8bbcmgr7().s[69]++;
      throw new Error('Threat attribution analysis failed');
    }
  }
  /**
   * Generate forensic analysis report
   * Creates comprehensive forensic analysis report
   *
   * @param incidentId - Incident identifier
   * @param reportType - Type of report to generate
   * @returns Promise<ForensicAnalysisReport> Generated report
   */
  async generateForensicReport(incidentId, reportType =
  /* istanbul ignore next */
  (cov_1s8bbcmgr7().b[4][0]++, 'detailed')) {
    /* istanbul ignore next */
    cov_1s8bbcmgr7().f[8]++;
    cov_1s8bbcmgr7().s[70]++;
    try {
      /* istanbul ignore next */
      cov_1s8bbcmgr7().s[71]++;
      logger_1.logger.info('📄 Generating forensic analysis report', {
        incidentId,
        reportType
      });
      // Get incident data
      const timeline =
      /* istanbul ignore next */
      (cov_1s8bbcmgr7().s[72]++,
      /* istanbul ignore next */
      (cov_1s8bbcmgr7().b[5][0]++, this.attackTimelines.get(incidentId)) ||
      /* istanbul ignore next */
      (cov_1s8bbcmgr7().b[5][1]++, []));
      const attribution =
      /* istanbul ignore next */
      (cov_1s8bbcmgr7().s[73]++, this.threatAttributions.get(incidentId));
      const evidence =
      /* istanbul ignore next */
      (cov_1s8bbcmgr7().s[74]++, Array.from(this.forensicEvidence.values()).filter(e => {
        /* istanbul ignore next */
        cov_1s8bbcmgr7().f[9]++;
        cov_1s8bbcmgr7().s[75]++;
        return e.metadata.incidentId === incidentId;
      }));
      // Generate report
      const report =
      /* istanbul ignore next */
      (cov_1s8bbcmgr7().s[76]++, this.createForensicReport(incidentId, reportType, {
        timeline,
        attribution,
        evidence
      }));
      // Store report
      /* istanbul ignore next */
      cov_1s8bbcmgr7().s[77]++;
      this.forensicReports.set(report.reportId, report);
      /* istanbul ignore next */
      cov_1s8bbcmgr7().s[78]++;
      logger_1.logger.info('✅ Forensic analysis report generated', {
        reportId: report.reportId,
        incidentId,
        reportType
      });
      // Create audit entry
      /* istanbul ignore next */
      cov_1s8bbcmgr7().s[79]++;
      await audit_service_1.auditService.createAuditEntry({
        auditId: report.reportId,
        eventType: 'FORENSIC_REPORT_GENERATED',
        actor: 'FORENSIC_ANALYSIS_SERVICE',
        resource: 'FORENSIC_REPORT',
        action: 'GENERATE_REPORT',
        result: 'SUCCESS',
        timestamp: new Date(),
        auditData: {
          reportId: report.reportId,
          incidentId,
          reportType
        }
      });
      /* istanbul ignore next */
      cov_1s8bbcmgr7().s[80]++;
      return report;
    } catch (error) {
      /* istanbul ignore next */
      cov_1s8bbcmgr7().s[81]++;
      logger_1.logger.error('❌ Failed to generate forensic report:', error);
      /* istanbul ignore next */
      cov_1s8bbcmgr7().s[82]++;
      throw new Error('Forensic report generation failed');
    }
  }
  /**
   * Verify evidence integrity
   * Verifies the integrity of forensic evidence
   *
   * @param evidenceId - Evidence identifier
   * @returns Promise<boolean> True if integrity verified
   */
  async verifyEvidenceIntegrity(evidenceId) {
    /* istanbul ignore next */
    cov_1s8bbcmgr7().f[10]++;
    cov_1s8bbcmgr7().s[83]++;
    try {
      const evidence =
      /* istanbul ignore next */
      (cov_1s8bbcmgr7().s[84]++, this.forensicEvidence.get(evidenceId));
      /* istanbul ignore next */
      cov_1s8bbcmgr7().s[85]++;
      if (!evidence) {
        /* istanbul ignore next */
        cov_1s8bbcmgr7().b[6][0]++;
        cov_1s8bbcmgr7().s[86]++;
        throw new Error(`Evidence not found: ${evidenceId}`);
      } else
      /* istanbul ignore next */
      {
        cov_1s8bbcmgr7().b[6][1]++;
      }
      // Verify hash integrity
      const currentHash =
      /* istanbul ignore next */
      (cov_1s8bbcmgr7().s[87]++, await this.calculateEvidenceHash(evidence));
      const integrityVerified =
      /* istanbul ignore next */
      (cov_1s8bbcmgr7().s[88]++, currentHash === evidence.hash);
      // Update integrity status
      /* istanbul ignore next */
      cov_1s8bbcmgr7().s[89]++;
      evidence.integrityStatus = integrityVerified ?
      /* istanbul ignore next */
      (cov_1s8bbcmgr7().b[7][0]++, 'verified') :
      /* istanbul ignore next */
      (cov_1s8bbcmgr7().b[7][1]++, 'compromised');
      // Add chain of custody entry
      /* istanbul ignore next */
      cov_1s8bbcmgr7().s[90]++;
      if (this.config.chainOfCustody.enabled) {
        /* istanbul ignore next */
        cov_1s8bbcmgr7().b[8][0]++;
        cov_1s8bbcmgr7().s[91]++;
        await this.addChainOfCustodyEntry(evidence, 'accessed', 'SYSTEM', 'Integrity verification');
      } else
      /* istanbul ignore next */
      {
        cov_1s8bbcmgr7().b[8][1]++;
      }
      cov_1s8bbcmgr7().s[92]++;
      logger_1.logger.info('🔐 Evidence integrity verification', {
        evidenceId,
        integrityVerified,
        status: evidence.integrityStatus
      });
      /* istanbul ignore next */
      cov_1s8bbcmgr7().s[93]++;
      return integrityVerified;
    } catch (error) {
      /* istanbul ignore next */
      cov_1s8bbcmgr7().s[94]++;
      logger_1.logger.error('❌ Failed to verify evidence integrity:', error);
      /* istanbul ignore next */
      cov_1s8bbcmgr7().s[95]++;
      return false;
    }
  }
  /**
   * Get forensic evidence
   * Returns forensic evidence by ID
   *
   * @param evidenceId - Evidence identifier
   * @returns ForensicEvidence | null Evidence or null if not found
   */
  getForensicEvidence(evidenceId) {
    /* istanbul ignore next */
    cov_1s8bbcmgr7().f[11]++;
    cov_1s8bbcmgr7().s[96]++;
    return /* istanbul ignore next */(cov_1s8bbcmgr7().b[9][0]++, this.forensicEvidence.get(evidenceId)) ||
    /* istanbul ignore next */
    (cov_1s8bbcmgr7().b[9][1]++, null);
  }
  /**
   * Get attack timeline
   * Returns attack timeline for incident
   *
   * @param incidentId - Incident identifier
   * @returns AttackTimelineEntry[] Attack timeline
   */
  getAttackTimeline(incidentId) {
    /* istanbul ignore next */
    cov_1s8bbcmgr7().f[12]++;
    cov_1s8bbcmgr7().s[97]++;
    return /* istanbul ignore next */(cov_1s8bbcmgr7().b[10][0]++, this.attackTimelines.get(incidentId)) ||
    /* istanbul ignore next */
    (cov_1s8bbcmgr7().b[10][1]++, []);
  }
  /**
   * Get threat attribution
   * Returns threat attribution analysis for incident
   *
   * @param incidentId - Incident identifier
   * @returns ThreatAttributionAnalysis | null Attribution analysis or null
   */
  getThreatAttribution(incidentId) {
    /* istanbul ignore next */
    cov_1s8bbcmgr7().f[13]++;
    cov_1s8bbcmgr7().s[98]++;
    return /* istanbul ignore next */(cov_1s8bbcmgr7().b[11][0]++, this.threatAttributions.get(incidentId)) ||
    /* istanbul ignore next */
    (cov_1s8bbcmgr7().b[11][1]++, null);
  }
  /**
   * Get forensic report
   * Returns forensic report by ID
   *
   * @param reportId - Report identifier
   * @returns ForensicAnalysisReport | null Report or null if not found
   */
  getForensicReport(reportId) {
    /* istanbul ignore next */
    cov_1s8bbcmgr7().f[14]++;
    cov_1s8bbcmgr7().s[99]++;
    return /* istanbul ignore next */(cov_1s8bbcmgr7().b[12][0]++, this.forensicReports.get(reportId)) ||
    /* istanbul ignore next */
    (cov_1s8bbcmgr7().b[12][1]++, null);
  }
  // Private helper methods
  initializeCustodySigningKey() {
    /* istanbul ignore next */
    cov_1s8bbcmgr7().f[15]++;
    const signingKeyHex =
    /* istanbul ignore next */
    (cov_1s8bbcmgr7().s[100]++,
    /* istanbul ignore next */
    (cov_1s8bbcmgr7().b[13][0]++, process.env.CUSTODY_SIGNING_KEY) ||
    /* istanbul ignore next */
    (cov_1s8bbcmgr7().b[13][1]++, this.generateSecureKey(32)));
    /* istanbul ignore next */
    cov_1s8bbcmgr7().s[101]++;
    this.custodySigningKey = Buffer.from(signingKeyHex, 'hex');
  }
  generateSecureKey(length) {
    /* istanbul ignore next */
    cov_1s8bbcmgr7().f[16]++;
    cov_1s8bbcmgr7().s[102]++;
    return (0, crypto_1.createHash)('sha256').update(Math.random().toString() + Date.now().toString()).digest('hex').substring(0, length * 2);
  }
  setupEventHandlers() {
    /* istanbul ignore next */
    cov_1s8bbcmgr7().f[17]++;
    cov_1s8bbcmgr7().s[103]++;
    this.on('evidenceCollected', async data => {
      /* istanbul ignore next */
      cov_1s8bbcmgr7().f[18]++;
      cov_1s8bbcmgr7().s[104]++;
      logger_1.logger.info('📝 Evidence collection completed', {
        incidentId: data.incidentId,
        evidenceCount: data.evidence.length
      });
      // Auto-generate timeline if enabled
      /* istanbul ignore next */
      cov_1s8bbcmgr7().s[105]++;
      if (this.config.analysis.timelineReconstructionEnabled) {
        /* istanbul ignore next */
        cov_1s8bbcmgr7().b[14][0]++;
        cov_1s8bbcmgr7().s[106]++;
        try {
          /* istanbul ignore next */
          cov_1s8bbcmgr7().s[107]++;
          await this.reconstructAttackTimeline(data.incidentId);
        } catch (error) {
          /* istanbul ignore next */
          cov_1s8bbcmgr7().s[108]++;
          logger_1.logger.error('❌ Auto timeline reconstruction failed:', error);
        }
      } else
      /* istanbul ignore next */
      {
        cov_1s8bbcmgr7().b[14][1]++;
      }
      // Auto-perform attribution if enabled
      cov_1s8bbcmgr7().s[109]++;
      if (this.config.analysis.threatAttributionEnabled) {
        /* istanbul ignore next */
        cov_1s8bbcmgr7().b[15][0]++;
        cov_1s8bbcmgr7().s[110]++;
        try {
          /* istanbul ignore next */
          cov_1s8bbcmgr7().s[111]++;
          await this.performThreatAttribution(data.incidentId);
        } catch (error) {
          /* istanbul ignore next */
          cov_1s8bbcmgr7().s[112]++;
          logger_1.logger.error('❌ Auto threat attribution failed:', error);
        }
      } else
      /* istanbul ignore next */
      {
        cov_1s8bbcmgr7().b[15][1]++;
      }
      // Auto-generate report if enabled
      cov_1s8bbcmgr7().s[113]++;
      if (this.config.reporting.autoReportGeneration) {
        /* istanbul ignore next */
        cov_1s8bbcmgr7().b[16][0]++;
        cov_1s8bbcmgr7().s[114]++;
        try {
          /* istanbul ignore next */
          cov_1s8bbcmgr7().s[115]++;
          await this.generateForensicReport(data.incidentId, 'preliminary');
        } catch (error) {
          /* istanbul ignore next */
          cov_1s8bbcmgr7().s[116]++;
          logger_1.logger.error('❌ Auto report generation failed:', error);
        }
      } else
      /* istanbul ignore next */
      {
        cov_1s8bbcmgr7().b[16][1]++;
      }
    });
  }
  startPeriodicCleanup() {
    /* istanbul ignore next */
    cov_1s8bbcmgr7().f[19]++;
    cov_1s8bbcmgr7().s[117]++;
    // Clean up old data every 24 hours
    setInterval(() => {
      /* istanbul ignore next */
      cov_1s8bbcmgr7().f[20]++;
      cov_1s8bbcmgr7().s[118]++;
      this.cleanupOldForensicData();
    }, 24 * 60 * 60 * 1000);
  }
  async collectEvidenceByType(incident, evidenceType) {
    /* istanbul ignore next */
    cov_1s8bbcmgr7().f[21]++;
    cov_1s8bbcmgr7().s[119]++;
    try {
      const evidenceId =
      /* istanbul ignore next */
      (cov_1s8bbcmgr7().s[120]++, `forensic_${evidenceType}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);
      // Create forensic evidence
      const evidence =
      /* istanbul ignore next */
      (cov_1s8bbcmgr7().s[121]++, {
        evidenceId,
        type: evidenceType,
        description: `Forensic ${evidenceType} evidence for incident ${incident.incidentId}`,
        location: `/forensic/${incident.incidentId}/${evidenceType}/`,
        hash: 'placeholder_hash',
        collectedAt: new Date(),
        size: 0,
        metadata: {
          incidentId: incident.incidentId,
          collectionMethod: 'automated',
          sourceSystem: incident.sourceEvent.target
        },
        chainOfCustody: [],
        integrityStatus: 'verified',
        classification: 'restricted',
        legalHold: this.config.reporting.legalComplianceMode,
        sourceSystem: incident.sourceEvent.target,
        collectionMethod: 'automated',
        tags: [evidenceType, incident.category, `severity_${incident.severity}`]
      });
      // Calculate actual hash
      /* istanbul ignore next */
      cov_1s8bbcmgr7().s[122]++;
      evidence.hash = await this.calculateEvidenceHash(evidence);
      // Add initial chain of custody entry
      /* istanbul ignore next */
      cov_1s8bbcmgr7().s[123]++;
      if (this.config.chainOfCustody.enabled) {
        /* istanbul ignore next */
        cov_1s8bbcmgr7().b[17][0]++;
        cov_1s8bbcmgr7().s[124]++;
        await this.addChainOfCustodyEntry(evidence, 'collected', 'FORENSIC_ANALYSIS_SERVICE', `Automated collection for incident ${incident.incidentId}`);
      } else
      /* istanbul ignore next */
      {
        cov_1s8bbcmgr7().b[17][1]++;
      }
      cov_1s8bbcmgr7().s[125]++;
      return evidence;
    } catch (error) {
      /* istanbul ignore next */
      cov_1s8bbcmgr7().s[126]++;
      logger_1.logger.error(`❌ Failed to collect ${evidenceType} evidence:`, error);
      /* istanbul ignore next */
      cov_1s8bbcmgr7().s[127]++;
      return null;
    }
  }
  async analyzeEvidenceForTimeline(evidence) {
    /* istanbul ignore next */
    cov_1s8bbcmgr7().f[22]++;
    const timelineEntries =
    /* istanbul ignore next */
    (cov_1s8bbcmgr7().s[128]++, []);
    /* istanbul ignore next */
    cov_1s8bbcmgr7().s[129]++;
    try {
      /* istanbul ignore next */
      cov_1s8bbcmgr7().s[130]++;
      // Simulate evidence analysis based on type
      switch (evidence.type) {
        case 'log_file':
          /* istanbul ignore next */
          cov_1s8bbcmgr7().b[18][0]++;
          cov_1s8bbcmgr7().s[131]++;
          timelineEntries.push({
            entryId: `timeline_${Date.now()}_1`,
            timestamp: evidence.collectedAt,
            eventType: 'initial_access',
            description: 'Suspicious login attempt detected in logs',
            supportingEvidence: [evidence.evidenceId],
            confidence: 0.8,
            mitreAttackTechnique: 'T1078',
            source: 'log_analysis'
          });
          /* istanbul ignore next */
          cov_1s8bbcmgr7().s[132]++;
          break;
        case 'network_capture':
          /* istanbul ignore next */
          cov_1s8bbcmgr7().b[18][1]++;
          cov_1s8bbcmgr7().s[133]++;
          timelineEntries.push({
            entryId: `timeline_${Date.now()}_2`,
            timestamp: evidence.collectedAt,
            eventType: 'command_control',
            description: 'Suspicious network communication detected',
            supportingEvidence: [evidence.evidenceId],
            confidence: 0.9,
            mitreAttackTechnique: 'T1071',
            source: 'network_analysis'
          });
          /* istanbul ignore next */
          cov_1s8bbcmgr7().s[134]++;
          break;
        case 'system_snapshot':
          /* istanbul ignore next */
          cov_1s8bbcmgr7().b[18][2]++;
          cov_1s8bbcmgr7().s[135]++;
          timelineEntries.push({
            entryId: `timeline_${Date.now()}_3`,
            timestamp: evidence.collectedAt,
            eventType: 'persistence',
            description: 'Suspicious system modifications detected',
            supportingEvidence: [evidence.evidenceId],
            confidence: 0.7,
            mitreAttackTechnique: 'T1547',
            source: 'file_analysis'
          });
          /* istanbul ignore next */
          cov_1s8bbcmgr7().s[136]++;
          break;
        default:
          /* istanbul ignore next */
          cov_1s8bbcmgr7().b[18][3]++;
          cov_1s8bbcmgr7().s[137]++;
          logger_1.logger.debug(`No timeline analysis available for evidence type: ${evidence.type}`);
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1s8bbcmgr7().s[138]++;
      logger_1.logger.error('❌ Evidence timeline analysis failed:', error);
    }
    /* istanbul ignore next */
    cov_1s8bbcmgr7().s[139]++;
    return timelineEntries;
  }
  correlateTimelineEvents(timelineEntries) {
    /* istanbul ignore next */
    cov_1s8bbcmgr7().f[23]++;
    // Remove duplicates and correlate related events
    const correlatedEntries =
    /* istanbul ignore next */
    (cov_1s8bbcmgr7().s[140]++, timelineEntries.filter((entry, index, array) => {
      /* istanbul ignore next */
      cov_1s8bbcmgr7().f[24]++;
      cov_1s8bbcmgr7().s[141]++;
      return array.findIndex(e => {
        /* istanbul ignore next */
        cov_1s8bbcmgr7().f[25]++;
        cov_1s8bbcmgr7().s[142]++;
        return /* istanbul ignore next */(cov_1s8bbcmgr7().b[19][0]++, e.eventType === entry.eventType) &&
        /* istanbul ignore next */
        (cov_1s8bbcmgr7().b[19][1]++, Math.abs(e.timestamp.getTime() - entry.timestamp.getTime()) < 60000);
      }) === index;
    }));
    // Enhance confidence based on supporting evidence
    /* istanbul ignore next */
    cov_1s8bbcmgr7().s[143]++;
    correlatedEntries.forEach(entry => {
      /* istanbul ignore next */
      cov_1s8bbcmgr7().f[26]++;
      cov_1s8bbcmgr7().s[144]++;
      if (entry.supportingEvidence.length > 1) {
        /* istanbul ignore next */
        cov_1s8bbcmgr7().b[20][0]++;
        cov_1s8bbcmgr7().s[145]++;
        entry.confidence = Math.min(entry.confidence + 0.1, 1.0);
      } else
      /* istanbul ignore next */
      {
        cov_1s8bbcmgr7().b[20][1]++;
      }
    });
    /* istanbul ignore next */
    cov_1s8bbcmgr7().s[146]++;
    return correlatedEntries;
  }
  analyzeAttackPatterns(timeline, evidence) {
    /* istanbul ignore next */
    cov_1s8bbcmgr7().f[27]++;
    const techniques =
    /* istanbul ignore next */
    (cov_1s8bbcmgr7().s[147]++, timeline.filter(entry => {
      /* istanbul ignore next */
      cov_1s8bbcmgr7().f[28]++;
      cov_1s8bbcmgr7().s[148]++;
      return entry.mitreAttackTechnique;
    }).map(entry => {
      /* istanbul ignore next */
      cov_1s8bbcmgr7().f[29]++;
      cov_1s8bbcmgr7().s[149]++;
      return entry.mitreAttackTechnique;
    }).filter((technique, index, array) => {
      /* istanbul ignore next */
      cov_1s8bbcmgr7().f[30]++;
      cov_1s8bbcmgr7().s[150]++;
      return array.indexOf(technique) === index;
    }));
    const tactics =
    /* istanbul ignore next */
    (cov_1s8bbcmgr7().s[151]++, timeline.map(entry => {
      /* istanbul ignore next */
      cov_1s8bbcmgr7().f[31]++;
      cov_1s8bbcmgr7().s[152]++;
      return entry.eventType;
    }).filter((tactic, index, array) => {
      /* istanbul ignore next */
      cov_1s8bbcmgr7().f[32]++;
      cov_1s8bbcmgr7().s[153]++;
      return array.indexOf(tactic) === index;
    }));
    // Simulate tool and infrastructure detection
    const tools =
    /* istanbul ignore next */
    (cov_1s8bbcmgr7().s[154]++, ['custom_malware', 'powershell', 'cmd']);
    const infrastructure =
    /* istanbul ignore next */
    (cov_1s8bbcmgr7().s[155]++, ['tor_network', 'compromised_domain']);
    /* istanbul ignore next */
    cov_1s8bbcmgr7().s[156]++;
    return {
      techniques,
      tools,
      infrastructure,
      tactics
    };
  }
  performAttributionAnalysis(incidentId, attackPatterns) {
    /* istanbul ignore next */
    cov_1s8bbcmgr7().f[33]++;
    // Simulate attribution analysis
    const attribution =
    /* istanbul ignore next */
    (cov_1s8bbcmgr7().s[157]++, {
      analysisId: `attribution_${Date.now()}`,
      incidentId,
      threatActor: {
        aliases: ['Unknown Actor'],
        sophisticationLevel: 'medium',
        motivation: 'financial',
        geography: 'unknown'
      },
      attackPatterns,
      attributionConfidence: 0.6,
      reasoning: ['Attack patterns consistent with financially motivated threat actors', 'Use of common tools and techniques', 'Limited sophistication in execution'],
      similarAttacks: [],
      analysisTimestamp: new Date()
    });
    // Adjust confidence based on attack patterns
    /* istanbul ignore next */
    cov_1s8bbcmgr7().s[158]++;
    if (attackPatterns.techniques.length > 5) {
      /* istanbul ignore next */
      cov_1s8bbcmgr7().b[21][0]++;
      cov_1s8bbcmgr7().s[159]++;
      attribution.attributionConfidence += 0.1;
      /* istanbul ignore next */
      cov_1s8bbcmgr7().s[160]++;
      attribution.threatActor.sophisticationLevel = 'high';
    } else
    /* istanbul ignore next */
    {
      cov_1s8bbcmgr7().b[21][1]++;
    }
    cov_1s8bbcmgr7().s[161]++;
    return attribution;
  }
  createForensicReport(incidentId, reportType, data) {
    /* istanbul ignore next */
    cov_1s8bbcmgr7().f[34]++;
    const reportId =
    /* istanbul ignore next */
    (cov_1s8bbcmgr7().s[162]++, `report_${incidentId}_${Date.now()}`);
    // Generate key findings
    const keyFindings =
    /* istanbul ignore next */
    (cov_1s8bbcmgr7().s[163]++, [`${data.timeline.length} timeline events reconstructed`, `${data.evidence.length} pieces of evidence collected`, 'Evidence integrity verified', 'Chain of custody maintained']);
    /* istanbul ignore next */
    cov_1s8bbcmgr7().s[164]++;
    if (data.attribution) {
      /* istanbul ignore next */
      cov_1s8bbcmgr7().b[22][0]++;
      cov_1s8bbcmgr7().s[165]++;
      keyFindings.push(`Threat attribution confidence: ${Math.round(data.attribution.attributionConfidence * 100)}%`);
    } else
    /* istanbul ignore next */
    {
      cov_1s8bbcmgr7().b[22][1]++;
    }
    // Generate recommendations
    const recommendations =
    /* istanbul ignore next */
    (cov_1s8bbcmgr7().s[166]++, ['Implement additional monitoring for detected attack patterns', 'Review and update security controls based on attack vectors', 'Conduct security awareness training for identified vulnerabilities', 'Consider threat hunting activities for similar indicators']);
    const report =
    /* istanbul ignore next */
    (cov_1s8bbcmgr7().s[167]++, {
      reportId,
      incidentId,
      reportType: reportType,
      title: `Forensic Analysis Report - Incident ${incidentId}`,
      executiveSummary: `This report presents the forensic analysis findings for security incident ${incidentId}. The analysis includes evidence collection, attack timeline reconstruction, and threat attribution.`,
      attackTimeline: data.timeline,
      threatAttribution: data.attribution,
      keyFindings,
      recommendations,
      metadata: {
        author: 'FORENSIC_ANALYSIS_SERVICE',
        createdDate: new Date(),
        lastModified: new Date(),
        version: '1.0',
        classification: 'RESTRICTED'
      }
    });
    /* istanbul ignore next */
    cov_1s8bbcmgr7().s[168]++;
    return report;
  }
  async calculateEvidenceHash(evidence) {
    /* istanbul ignore next */
    cov_1s8bbcmgr7().f[35]++;
    const hashData =
    /* istanbul ignore next */
    (cov_1s8bbcmgr7().s[169]++, {
      evidenceId: evidence.evidenceId,
      type: evidence.type,
      description: evidence.description,
      location: evidence.location,
      collectedAt: evidence.collectedAt,
      metadata: evidence.metadata
    });
    /* istanbul ignore next */
    cov_1s8bbcmgr7().s[170]++;
    return (0, crypto_1.createHash)('sha256').update(JSON.stringify(hashData)).digest('hex');
  }
  async addChainOfCustodyEntry(evidence, action, actor, purpose) {
    /* istanbul ignore next */
    cov_1s8bbcmgr7().f[36]++;
    const entry =
    /* istanbul ignore next */
    (cov_1s8bbcmgr7().s[171]++, {
      entryId: `custody_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      timestamp: new Date(),
      action,
      actor,
      location: evidence.location,
      purpose,
      signature: this.signCustodyEntry(evidence.evidenceId, action, actor)
    });
    /* istanbul ignore next */
    cov_1s8bbcmgr7().s[172]++;
    evidence.chainOfCustody.push(entry);
  }
  signCustodyEntry(evidenceId, action, actor) {
    /* istanbul ignore next */
    cov_1s8bbcmgr7().f[37]++;
    const signatureData =
    /* istanbul ignore next */
    (cov_1s8bbcmgr7().s[173]++, `${evidenceId}:${action}:${actor}:${Date.now()}`);
    /* istanbul ignore next */
    cov_1s8bbcmgr7().s[174]++;
    return (0, crypto_1.createHmac)('sha256', this.custodySigningKey).update(signatureData).digest('hex');
  }
  cleanupOldForensicData() {
    /* istanbul ignore next */
    cov_1s8bbcmgr7().f[38]++;
    const cutoffDate =
    /* istanbul ignore next */
    (cov_1s8bbcmgr7().s[175]++, new Date(Date.now() - this.config.reporting.reportRetentionDays * 24 * 60 * 60 * 1000));
    // Clean up old evidence
    /* istanbul ignore next */
    cov_1s8bbcmgr7().s[176]++;
    for (const [evidenceId, evidence] of this.forensicEvidence) {
      /* istanbul ignore next */
      cov_1s8bbcmgr7().s[177]++;
      if (
      /* istanbul ignore next */
      (cov_1s8bbcmgr7().b[24][0]++, evidence.collectedAt < cutoffDate) &&
      /* istanbul ignore next */
      (cov_1s8bbcmgr7().b[24][1]++, !evidence.legalHold)) {
        /* istanbul ignore next */
        cov_1s8bbcmgr7().b[23][0]++;
        cov_1s8bbcmgr7().s[178]++;
        this.forensicEvidence.delete(evidenceId);
      } else
      /* istanbul ignore next */
      {
        cov_1s8bbcmgr7().b[23][1]++;
      }
    }
    // Clean up old reports
    /* istanbul ignore next */
    cov_1s8bbcmgr7().s[179]++;
    for (const [reportId, report] of this.forensicReports) {
      /* istanbul ignore next */
      cov_1s8bbcmgr7().s[180]++;
      if (report.metadata.createdDate < cutoffDate) {
        /* istanbul ignore next */
        cov_1s8bbcmgr7().b[25][0]++;
        cov_1s8bbcmgr7().s[181]++;
        this.forensicReports.delete(reportId);
      } else
      /* istanbul ignore next */
      {
        cov_1s8bbcmgr7().b[25][1]++;
      }
    }
  }
  /**
   * Get service status
   * Returns current service status
   *
   * @returns Service status information
   */
  getStatus() {
    /* istanbul ignore next */
    cov_1s8bbcmgr7().f[39]++;
    cov_1s8bbcmgr7().s[182]++;
    return {
      isActive: true,
      evidenceCount: this.forensicEvidence.size,
      timelinesCount: this.attackTimelines.size,
      attributionsCount: this.threatAttributions.size,
      reportsCount: this.forensicReports.size,
      timestamp: Date.now()
    };
  }
}
/* istanbul ignore next */
cov_1s8bbcmgr7().s[183]++;
exports.ForensicAnalysisService = ForensicAnalysisService;
// Create and export singleton instance
/* istanbul ignore next */
cov_1s8bbcmgr7().s[184]++;
exports.forensicAnalysisService = new ForensicAnalysisService();
// =============================================================================
// FORENSIC ANALYSIS NOTES
// =============================================================================
// 1. Comprehensive digital forensics data collection and preservation
// 2. Attack timeline reconstruction with MITRE ATT&CK mapping
// 3. Threat attribution analysis with confidence scoring
// 4. Chain of custody management with digital signatures
// 5. Evidence integrity verification and tamper detection
// 6. Automated forensic reporting with legal compliance
// 7. Integration with incident response and security monitoring
// 8. Configurable retention policies and cleanup procedures
// =============================================================================