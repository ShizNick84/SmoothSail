{"version":3,"names":["cov_1l4ww0hrmr","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","dotenv_1","require","path_1","logger_1","security_manager_1","system_monitor_1","trading_engine_1","tunnel_manager_1","environment_validator_1","orchestration_1","AITradingAgent","orchestrator","healthMonitor","isShuttingDown","constructor","SystemOrchestrator","defaultOrchestrationConfig","SystemHealthMonitor","defaultHealthMonitorConfig","registerDependencies","registerComponents","initialize","logger","info","loadConfiguration","startSystem","startMonitoring","setupShutdownHandlers","error","emergencyShutdown","registerSingleton","DependencyTokens","SECURITY_MANAGER","SecurityManager","SYSTEM_MONITOR","SystemMonitor","TUNNEL_MANAGER","TunnelManager","TRADING_ENGINE","TradingEngine","securityComponent","createComponentWrapper","systemMonitorComponent","tunnelComponent","tradingComponent","registerComponent","id","dependencyToken","dependencies","priority","status","instance","dependencyManager","resolve","shutdown","healthCheck","healthy","score","details","lastCheck","Date","issues","recommendations","config","process","cwd","validationResult","validateEnvironment","isValid","errors","Error","on","handleShutdown","reason","promise","signal","warn","stopMonitoring","stopSystem","communicationBus","exit","publish","timestamp","source","Promise","once","exports","main","tradingAgent","import","meta","url","argv","catch","console"],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\index.ts"],"sourcesContent":["#!/usr/bin/env node\r\n\r\n/**\r\n * =============================================================================\r\n * AI CRYPTO TRADING AGENT - MAIN ENTRY POINT\r\n * =============================================================================\r\n * \r\n * This is the main entry point for the AI-powered cryptocurrency trading agent.\r\n * The system is designed with security-first principles, focusing on capital\r\n * preservation and profit maximization through sophisticated trading strategies.\r\n * \r\n * CRITICAL SECURITY NOTICE:\r\n * This system handles real financial assets and trading operations.\r\n * All security measures must be maintained and regularly audited.\r\n * \r\n * Hardware Requirements:\r\n * - Intel NUC with i5 CPU\r\n * - 12GB RAM minimum\r\n * - 256GB M.2 SSD\r\n * - Stable internet connection (wireless + ethernet)\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport { config } from 'dotenv';\r\nimport { resolve } from 'path';\r\nimport { logger } from '@/core/logging/logger';\r\nimport { SecurityManager } from '@/security/security-manager';\r\nimport { SystemMonitor } from '@/infrastructure/system-monitor';\r\nimport { TradingEngine } from '@/trading/trading-engine';\r\nimport { TunnelManager } from '@/infrastructure/tunnel/tunnel-manager';\r\nimport { validateEnvironment } from '@/config/environment-validator';\r\nimport { gracefulShutdown } from '@/core/shutdown/graceful-shutdown';\r\nimport { \r\n  SystemOrchestrator, \r\n  SystemHealthMonitor,\r\n  dependencyManager,\r\n  communicationBus,\r\n  defaultOrchestrationConfig,\r\n  defaultHealthMonitorConfig,\r\n  DependencyTokens,\r\n  registerSingleton\r\n} from '@/core/orchestration';\r\n\r\n/**\r\n * Main application class that orchestrates all system components\r\n * Implements security-first initialization and proper error handling\r\n */\r\nclass AITradingAgent {\r\n  private orchestrator: SystemOrchestrator;\r\n  private healthMonitor: SystemHealthMonitor;\r\n  private isShuttingDown: boolean = false;\r\n\r\n  constructor() {\r\n    // Initialize orchestration components\r\n    this.orchestrator = new SystemOrchestrator(defaultOrchestrationConfig);\r\n    this.healthMonitor = new SystemHealthMonitor(defaultHealthMonitorConfig);\r\n    \r\n    // Register dependencies\r\n    this.registerDependencies();\r\n    \r\n    // Register components with orchestrator\r\n    this.registerComponents();\r\n  }\r\n\r\n  /**\r\n   * Initialize the trading agent with comprehensive security checks\r\n   * This method performs all necessary startup procedures in the correct order\r\n   * \r\n   * @returns Promise<void> Resolves when initialization is complete\r\n   * @throws Error if any critical initialization step fails\r\n   */\r\n  public async initialize(): Promise<void> {\r\n    try {\r\n      logger.info('🚀 Starting AI Crypto Trading Agent initialization...');\r\n      \r\n      // Step 1: Load and validate environment configuration\r\n      await this.loadConfiguration();\r\n      \r\n      // Step 2: Start system orchestration\r\n      await this.orchestrator.startSystem();\r\n      \r\n      // Step 3: Start health monitoring\r\n      await this.healthMonitor.startMonitoring();\r\n      \r\n      // Step 4: Set up graceful shutdown handlers\r\n      this.setupShutdownHandlers();\r\n      \r\n      logger.info('✅ AI Crypto Trading Agent initialized successfully');\r\n      logger.info('🎯 System ready for 24/7 trading operations');\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to initialize AI Crypto Trading Agent:', error);\r\n      await this.emergencyShutdown();\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Register system dependencies with the dependency manager\r\n   */\r\n  private registerDependencies(): void {\r\n    logger.info('📋 Registering system dependencies...');\r\n\r\n    // Register core services\r\n    registerSingleton(\r\n      DependencyTokens.SECURITY_MANAGER,\r\n      () => new SecurityManager(),\r\n      [],\r\n      ['core', 'security'],\r\n      1 // Highest priority\r\n    );\r\n\r\n    registerSingleton(\r\n      DependencyTokens.SYSTEM_MONITOR,\r\n      () => new SystemMonitor(),\r\n      [],\r\n      ['core', 'infrastructure'],\r\n      2\r\n    );\r\n\r\n    registerSingleton(\r\n      DependencyTokens.TUNNEL_MANAGER,\r\n      () => new TunnelManager(),\r\n      [DependencyTokens.SECURITY_MANAGER],\r\n      ['core', 'infrastructure'],\r\n      3\r\n    );\r\n\r\n    registerSingleton(\r\n      DependencyTokens.TRADING_ENGINE,\r\n      () => new TradingEngine(),\r\n      [DependencyTokens.SECURITY_MANAGER, DependencyTokens.TUNNEL_MANAGER],\r\n      ['core', 'trading'],\r\n      4\r\n    );\r\n\r\n    logger.info('✅ System dependencies registered');\r\n  }\r\n\r\n  /**\r\n   * Register system components with the orchestrator\r\n   */\r\n  private registerComponents(): void {\r\n    logger.info('📋 Registering system components...');\r\n\r\n    // Create component wrappers that implement SystemComponent interface\r\n    const securityComponent = this.createComponentWrapper(\r\n      'security-manager',\r\n      DependencyTokens.SECURITY_MANAGER,\r\n      [],\r\n      1\r\n    );\r\n\r\n    const systemMonitorComponent = this.createComponentWrapper(\r\n      'system-monitor',\r\n      DependencyTokens.SYSTEM_MONITOR,\r\n      ['security-manager'],\r\n      2\r\n    );\r\n\r\n    const tunnelComponent = this.createComponentWrapper(\r\n      'tunnel-manager',\r\n      DependencyTokens.TUNNEL_MANAGER,\r\n      ['security-manager'],\r\n      3\r\n    );\r\n\r\n    const tradingComponent = this.createComponentWrapper(\r\n      'trading-engine',\r\n      DependencyTokens.TRADING_ENGINE,\r\n      ['security-manager', 'tunnel-manager'],\r\n      4\r\n    );\r\n\r\n    // Register components\r\n    this.orchestrator.registerComponent(securityComponent);\r\n    this.orchestrator.registerComponent(systemMonitorComponent);\r\n    this.orchestrator.registerComponent(tunnelComponent);\r\n    this.orchestrator.registerComponent(tradingComponent);\r\n\r\n    // Register components for health monitoring\r\n    this.healthMonitor.registerComponent(securityComponent);\r\n    this.healthMonitor.registerComponent(systemMonitorComponent);\r\n    this.healthMonitor.registerComponent(tunnelComponent);\r\n    this.healthMonitor.registerComponent(tradingComponent);\r\n\r\n    logger.info('✅ System components registered');\r\n  }\r\n\r\n  /**\r\n   * Create a component wrapper that implements SystemComponent interface\r\n   */\r\n  private createComponentWrapper(\r\n    id: string,\r\n    dependencyToken: any,\r\n    dependencies: string[],\r\n    priority: number\r\n  ): any {\r\n    return {\r\n      id,\r\n      dependencies,\r\n      priority,\r\n      status: 'UNINITIALIZED' as any,\r\n      name: id,\r\n      \r\n      async initialize(): Promise<void> {\r\n        const instance = await dependencyManager.resolve(dependencyToken);\r\n        if (instance && typeof instance.initialize === 'function') {\r\n          await instance.initialize();\r\n        }\r\n        this.status = 'RUNNING';\r\n      },\r\n\r\n      async shutdown(): Promise<void> {\r\n        const instance = await dependencyManager.resolve(dependencyToken);\r\n        if (instance && typeof instance.shutdown === 'function') {\r\n          await instance.shutdown();\r\n        }\r\n        this.status = 'STOPPED';\r\n      },\r\n\r\n      async healthCheck(): Promise<any> {\r\n        const instance = await dependencyManager.resolve(dependencyToken);\r\n        if (instance && typeof instance.healthCheck === 'function') {\r\n          return await instance.healthCheck();\r\n        }\r\n        return {\r\n          healthy: true,\r\n          score: 100,\r\n          details: {},\r\n          lastCheck: new Date(),\r\n          issues: [],\r\n          recommendations: []\r\n        };\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Load and validate environment configuration\r\n   * Ensures all required environment variables are present and valid\r\n   */\r\n  private async loadConfiguration(): Promise<void> {\r\n    logger.info('📋 Loading configuration...');\r\n    \r\n    // Load environment variables from .env file\r\n    config({ path: resolve(process.cwd(), '.env') });\r\n    \r\n    // Validate all required environment variables\r\n    const validationResult = await validateEnvironment();\r\n    \r\n    if (!validationResult.isValid) {\r\n      logger.error('❌ Environment validation failed:', validationResult.errors);\r\n      throw new Error('Invalid environment configuration');\r\n    }\r\n    \r\n    logger.info('✅ Configuration loaded and validated successfully');\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Set up graceful shutdown handlers for clean system termination\r\n   * Ensures all positions are safely closed and data is preserved\r\n   */\r\n  private setupShutdownHandlers(): void {\r\n    // Handle various shutdown signals\r\n    process.on('SIGTERM', () => this.handleShutdown('SIGTERM'));\r\n    process.on('SIGINT', () => this.handleShutdown('SIGINT'));\r\n    process.on('SIGHUP', () => this.handleShutdown('SIGHUP'));\r\n    \r\n    // Handle uncaught exceptions and rejections\r\n    process.on('uncaughtException', (error) => {\r\n      logger.error('❌ Uncaught exception:', error);\r\n      this.handleShutdown('UNCAUGHT_EXCEPTION');\r\n    });\r\n    \r\n    process.on('unhandledRejection', (reason, promise) => {\r\n      logger.error('❌ Unhandled rejection at:', promise, 'reason:', reason);\r\n      this.handleShutdown('UNHANDLED_REJECTION');\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Handle shutdown signals with proper cleanup\r\n   * Ensures safe termination of all trading operations\r\n   * \r\n   * @param signal - The shutdown signal received\r\n   */\r\n  private async handleShutdown(signal: string): Promise<void> {\r\n    if (this.isShuttingDown) {\r\n      logger.warn('⚠️ Shutdown already in progress, ignoring signal:', signal);\r\n      return;\r\n    }\r\n    \r\n    this.isShuttingDown = true;\r\n    logger.info(`🛑 Received shutdown signal: ${signal}`);\r\n    \r\n    try {\r\n      // Stop health monitoring\r\n      await this.healthMonitor.stopMonitoring();\r\n      \r\n      // Stop system orchestration\r\n      await this.orchestrator.stopSystem();\r\n      \r\n      // Shutdown communication bus\r\n      await communicationBus.shutdown();\r\n      \r\n      // Shutdown dependency manager\r\n      await dependencyManager.shutdown();\r\n      \r\n      logger.info('✅ Graceful shutdown completed successfully');\r\n      process.exit(0);\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Error during graceful shutdown:', error);\r\n      await this.emergencyShutdown();\r\n      process.exit(1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Emergency shutdown procedure for critical failures\r\n   * Immediately stops all operations and secures assets\r\n   */\r\n  private async emergencyShutdown(): Promise<void> {\r\n    logger.error('🚨 EMERGENCY SHUTDOWN INITIATED');\r\n    \r\n    try {\r\n      // Stop all orchestration immediately\r\n      await this.orchestrator.stopSystem();\r\n      \r\n      // Send emergency notifications via communication bus\r\n      await communicationBus.publish('system.emergency.shutdown', {\r\n        timestamp: new Date(),\r\n        reason: 'EMERGENCY_SHUTDOWN'\r\n      }, {\r\n        priority: 4, // EMERGENCY priority\r\n        source: 'ai-trading-agent'\r\n      });\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Error during emergency shutdown:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Start the main trading loop\r\n   * Begins continuous trading operations with monitoring\r\n   */\r\n  public async start(): Promise<void> {\r\n    logger.info('🎯 Starting AI Crypto Trading Agent main loop...');\r\n    \r\n    // The orchestrator has already started all components\r\n    // Just wait for system ready event\r\n    await new Promise<void>((resolve) => {\r\n      this.orchestrator.once('system:ready', () => {\r\n        resolve();\r\n      });\r\n    });\r\n    \r\n    logger.info('🚀 AI Crypto Trading Agent is now running 24/7');\r\n    logger.info('💰 Focus: Capital preservation and profit maximization');\r\n    logger.info('🎯 Goal: Building generational wealth through compound returns');\r\n  }\r\n}\r\n\r\n/**\r\n * Main execution function\r\n * Entry point for the entire trading system\r\n */\r\nasync function main(): Promise<void> {\r\n  try {\r\n    // Create and initialize the trading agent\r\n    const tradingAgent = new AITradingAgent();\r\n    await tradingAgent.initialize();\r\n    \r\n    // Start trading operations\r\n    await tradingAgent.start();\r\n    \r\n  } catch (error) {\r\n    logger.error('❌ Fatal error in main execution:', error);\r\n    process.exit(1);\r\n  }\r\n}\r\n\r\n// Start the application if this file is run directly\r\nif (import.meta.url === `file://${process.argv[1]}`) {\r\n  main().catch((error) => {\r\n    console.error('Fatal startup error:', error);\r\n    process.exit(1);\r\n  });\r\n}\r\n\r\nexport { AITradingAgent };\r\n\r\n// =============================================================================\r\n// SECURITY AND OPERATIONAL NOTES\r\n// =============================================================================\r\n// 1. This system handles real financial assets - security is paramount\r\n// 2. All errors are logged and monitored for security analysis\r\n// 3. Graceful shutdown ensures no trading positions are left unmanaged\r\n// 4. Emergency shutdown procedures protect capital in critical situations\r\n// 5. System is designed for 24/7 operation with automatic recovery\r\n// 6. Regular security audits and updates are essential\r\n// 7. Monitor system logs continuously for any suspicious activity\r\n// ============================================================================="],"mappings":";;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA,SAAAA,ecAAA;MAAAC,IAAA;MAAAC,QAAA;MAAAC,KAAA;MAAAC,OAAA;MAAAC,cAAA;MAAAC,OAAA;IAAA;IAAAC,eAAA;IAAA5B,IAAA;EAAA;EAAA,IAAA6B,QAAA,GAAA5B,MAAA,CAAAE,GAAA,MAAAF,MAAA,CAAAE,GAAA;EAAA,KAAA0B,QAAA,CAAA9B,IAAA,KAAA8B,QAAA,CAAA9B,IAAA,EAAAC,IAAA,KAAAA,IAAA;IAAA6B,QAAA,CAAA9B,IAAA,IAAAK,YAAA;EAAA;EAAA,IAAA0B,cAAA,GAAAD,QAAA,CAAA9B,IAAA;EAAA;;;;;;;;;;;;;;;;AAyBA,MAAAgC,QAAA;AAAA;AAAA,CAAAjC,cAAA,GAAAoB,CAAA,OAAAc,OAAA;AACA,MAAAC,MAAA;AAAA;AAAA,CAAAnC,cAAA,GAAAoB,CAAA,OAAAc,OAAA;AACA,MAAAE,QAAA;AAAA;AAAA,CAAApC,cAAA,GAAAoB,CAAA,OAAAc,OAAA;AACA,MAAAG,kBAAA;AAAA;AAAA,CAAArC,cAAA,GAAAoB,CAAA,OAAAc,OAAA;AACA,MAAAI,gBAAA;AAAA;AAAA,CAAAtC,cAAA,GAAAoB,CAAA,OAAAc,OAAA;AACA,MAAAK,gBAAA;AAAA;AAAA,CAAAvC,cAAA,GAAAoB,CAAA,OAAAc,OAAA;AACA,MAAAM,gBAAA;AAAA;AAAA,CAAAxC,cAAA,GAAAoB,CAAA,OAAAc,OAAA;AACA,MAAAO,uBAAA;AAAA;AAAA,CAAAzC,cAAA,GAAAoB,CAAA,OAAAc,OAAA;AAEA,MAAAQ,eAAA;AAAA;AAAA,CAAA1C,cAAA,GAAAoB,CAAA,QAAAc,OAAA;AAWA;;;;AAIA,MAAMS,cAAc;EACVC,YAAY;EACZC,aAAa;EACbC,cAAc;EAAA;EAAA,CAAA9C,cAAA,GAAAoB,CAAA,QAAY,KAAK;EAEvC2B,YAAA;IAAA;IAAA/C,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IACE;IACA,IAAI,CAACwB,YAAY,GAAG,IAAIF,eAAA,CAAAM,kBAAkB,CAACN,eAAA,CAAAO,0BAA0B,CAAC;IAAC;IAAAjD,cAAA,GAAAoB,CAAA;IACvE,IAAI,CAACyB,aAAa,GAAG,IAAIH,eAAA,CAAAQ,mBAAmB,CAACR,eAAA,CAAAS,0BAA0B,CAAC;IAExE;IAAA;IAAAnD,cAAA,GAAAoB,CAAA;IACA,IAAI,CAACgC,oBAAoB,EAAE;IAE3B;IAAA;IAAApD,cAAA,GAAAoB,CAAA;IACA,IAAI,CAACiC,kBAAkB,EAAE;EAC3B;EAEA;;;;;;;EAOO,MAAMC,UAAUA,CAAA;IAAA;IAAAtD,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IACrB,IAAI;MAAA;MAAApB,cAAA,GAAAoB,CAAA;MACFgB,QAAA,CAAAmB,MAAM,CAACC,IAAI,CAAC,uDAAuD,CAAC;MAEpE;MAAA;MAAAxD,cAAA,GAAAoB,CAAA;MACA,MAAM,IAAI,CAACqC,iBAAiB,EAAE;MAE9B;MAAA;MAAAzD,cAAA,GAAAoB,CAAA;MACA,MAAM,IAAI,CAACwB,YAAY,CAACc,WAAW,EAAE;MAErC;MAAA;MAAA1D,cAAA,GAAAoB,CAAA;MACA,MAAM,IAAI,CAACyB,aAAa,CAACc,eAAe,EAAE;MAE1C;MAAA;MAAA3D,cAAA,GAAAoB,CAAA;MACA,IAAI,CAACwC,qBAAqB,EAAE;MAAC;MAAA5D,cAAA,GAAAoB,CAAA;MAE7BgB,QAAA,CAAAmB,MAAM,CAACC,IAAI,CAAC,oDAAoD,CAAC;MAAC;MAAAxD,cAAA,GAAAoB,CAAA;MAClEgB,QAAA,CAAAmB,MAAM,CAACC,IAAI,CAAC,6CAA6C,CAAC;IAE5D,CAAC,CAAC,OAAOK,KAAK,EAAE;MAAA;MAAA7D,cAAA,GAAAoB,CAAA;MACdgB,QAAA,CAAAmB,MAAM,CAACM,KAAK,CAAC,iDAAiD,EAAEA,KAAK,CAAC;MAAC;MAAA7D,cAAA,GAAAoB,CAAA;MACvE,MAAM,IAAI,CAAC0C,iBAAiB,EAAE;MAAC;MAAA9D,cAAA,GAAAoB,CAAA;MAC/B,MAAMyC,KAAK;IACb;EACF;EAEA;;;EAGQT,oBAAoBA,CAAA;IAAA;IAAApD,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IAC1BgB,QAAA,CAAAmB,MAAM,CAACC,IAAI,CAAC,uCAAuC,CAAC;IAEpD;IAAA;IAAAxD,cAAA,GAAAoB,CAAA;IACA,IAAAsB,eAAA,CAAAqB,iBAAiB,EACfrB,eAAA,CAAAsB,gBAAgB,CAACC,gBAAgB,EACjC,MAAM;MAAA;MAAAjE,cAAA,GAAAqB,CAAA;MAAArB,cAAA,GAAAoB,CAAA;MAAA,WAAIiB,kBAAA,CAAA6B,eAAe,EAAE;IAAF,CAAE,EAC3B,EAAE,EACF,CAAC,MAAM,EAAE,UAAU,CAAC,EACpB,CAAC,CAAC;KACH;IAAC;IAAAlE,cAAA,GAAAoB,CAAA;IAEF,IAAAsB,eAAA,CAAAqB,iBAAiB,EACfrB,eAAA,CAAAsB,gBAAgB,CAACG,cAAc,EAC/B,MAAM;MAAA;MAAAnE,cAAA,GAAAqB,CAAA;MAAArB,cAAA,GAAAoB,CAAA;MAAA,WAAIkB,gBAAA,CAAA8B,aAAa,EAAE;IAAF,CAAE,EACzB,EAAE,EACF,CAAC,MAAM,EAAE,gBAAgB,CAAC,EAC1B,CAAC,CACF;IAAC;IAAApE,cAAA,GAAAoB,CAAA;IAEF,IAAAsB,eAAA,CAAAqB,iBAAiB,EACfrB,eAAA,CAAAsB,gBAAgB,CAACK,cAAc,EAC/B,MAAM;MAAA;MAAArE,cAAA,GAAAqB,CAAA;MAAArB,cAAA,GAAAoB,CAAA;MAAA,WAAIoB,gBAAA,CAAA8B,aAAa,EAAE;IAAF,CAAE,EACzB,CAAC5B,eAAA,CAAAsB,gBAAgB,CAACC,gBAAgB,CAAC,EACnC,CAAC,MAAM,EAAE,gBAAgB,CAAC,EAC1B,CAAC,CACF;IAAC;IAAAjE,cAAA,GAAAoB,CAAA;IAEF,IAAAsB,eAAA,CAAAqB,iBAAiB,EACfrB,eAAA,CAAAsB,gBAAgB,CAACO,cAAc,EAC/B,MAAM;MAAA;MAAAvE,cAAA,GAAAqB,CAAA;MAAArB,cAAA,GAAAoB,CAAA;MAAA,WAAImB,gBAAA,CAAAiC,aAAa,EAAE;IAAF,CAAE,EACzB,CAAC9B,eAAA,CAAAsB,gBAAgB,CAACC,gBAAgB,EAAEvB,eAAA,CAAAsB,gBAAgB,CAACK,cAAc,CAAC,EACpE,CAAC,MAAM,EAAE,SAAS,CAAC,EACnB,CAAC,CACF;IAAC;IAAArE,cAAA,GAAAoB,CAAA;IAEFgB,QAAA,CAAAmB,MAAM,CAACC,IAAI,CAAC,kCAAkC,CAAC;EACjD;EAEA;;;EAGQH,kBAAkBA,CAAA;IAAA;IAAArD,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IACxBgB,QAAA,CAAAmB,MAAM,CAACC,IAAI,CAAC,qCAAqC,CAAC;IAElD;IACA,MAAMiB,iBAAiB;IAAA;IAAA,CAAAzE,cAAA,GAAAoB,CAAA,QAAG,IAAI,CAACsD,sBAAsB,CACnD,kBAAkB,EAClBhC,eAAA,CAAAsB,gBAAgB,CAACC,gBAAgB,EACjC,EAAE,EACF,CAAC,CACF;IAED,MAAMU,sBAAsB;IAAA;IAAA,CAAA3E,cAAA,GAAAoB,CAAA,QAAG,IAAI,CAACsD,sBAAsB,CACxD,gBAAgB,EAChBhC,eAAA,CAAAsB,gBAAgB,CAACG,cAAc,EAC/B,CAAC,kBAAkB,CAAC,EACpB,CAAC,CACF;IAED,MAAMS,eAAe;IAAA;IAAA,CAAA5E,cAAA,GAAAoB,CAAA,QAAG,IAAI,CAACsD,sBAAsB,CACjD,gBAAgB,EAChBhC,eAAA,CAAAsB,gBAAgB,CAACK,cAAc,EAC/B,CAAC,kBAAkB,CAAC,EACpB,CAAC,CACF;IAED,MAAMQ,gBAAgB;IAAA;IAAA,CAAA7E,cAAA,GAAAoB,CAAA,QAAG,IAAI,CAACsD,sBAAsB,CAClD,gBAAgB,EAChBhC,eAAA,CAAAsB,gBAAgB,CAACO,cAAc,EAC/B,CAAC,kBAAkB,EAAE,gBAAgB,CAAC,EACtC,CAAC,CACF;IAED;IAAA;IAAAvE,cAAA,GAAAoB,CAAA;IACA,IAAI,CAACwB,YAAY,CAACkC,iBAAiB,CAACL,iBAAiB,CAAC;IAAC;IAAAzE,cAAA,GAAAoB,CAAA;IACvD,IAAI,CAACwB,YAAY,CAACkC,iBAAiB,CAACH,sBAAsB,CAAC;IAAC;IAAA3E,cAAA,GAAAoB,CAAA;IAC5D,IAAI,CAACwB,YAAY,CAACkC,iBAAiB,CAACF,eAAe,CAAC;IAAC;IAAA5E,cAAA,GAAAoB,CAAA;IACrD,IAAI,CAACwB,YAAY,CAACkC,iBAAiB,CAACD,gBAAgB,CAAC;IAErD;IAAA;IAAA7E,cAAA,GAAAoB,CAAA;IACA,IAAI,CAACyB,aAAa,CAACiC,iBAAiB,CAACL,iBAAiB,CAAC;IAAC;IAAAzE,cAAA,GAAAoB,CAAA;IACxD,IAAI,CAACyB,aAAa,CAACiC,iBAAiB,CAACH,sBAAsB,CAAC;IAAC;IAAA3E,cAAA,GAAAoB,CAAA;IAC7D,IAAI,CAACyB,aAAa,CAACiC,iBAAiB,CAACF,eAAe,CAAC;IAAC;IAAA5E,cAAA,GAAAoB,CAAA;IACtD,IAAI,CAACyB,aAAa,CAACiC,iBAAiB,CAACD,gBAAgB,CAAC;IAAC;IAAA7E,cAAA,GAAAoB,CAAA;IAEvDgB,QAAA,CAAAmB,MAAM,CAACC,IAAI,CAAC,gCAAgC,CAAC;EAC/C;EAEA;;;EAGQkB,sBAAsBA,CAC5BK,EAAU,EACVC,eAAoB,EACpBC,YAAsB,EACtBC,QAAgB;IAAA;IAAAlF,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IAEhB,OAAO;MACL2D,EAAE;MACFE,YAAY;MACZC,QAAQ;MACRC,MAAM,EAAE,eAAsB;MAC9BtE,IAAI,EAAEkE,EAAE;MAER,MAAMzB,UAAUA,CAAA;QAAA;QAAAtD,cAAA,GAAAqB,CAAA;QACd,MAAM+D,QAAQ;QAAA;QAAA,CAAApF,cAAA,GAAAoB,CAAA,QAAG,MAAMsB,eAAA,CAAA2C,iBAAiB,CAACC,OAAO,CAACN,eAAe,CAAC;QAAC;QAAAhF,cAAA,GAAAoB,CAAA;QAClE;QAAI;QAAA,CAAApB,cAAA,GAAAsB,CAAA,UAAA8D,QAAQ;QAAA;QAAA,CAAApF,cAAA,GAAAsB,CAAA,UAAI,OAAO8D,QAAQ,CAAC9B,UAAU,KAAK,UAAU,GAAE;UAAA;UAAAtD,cAAA,GAAAsB,CAAA;UAAAtB,cAAA,GAAAoB,CAAA;UACzD,MAAMgE,QAAQ,CAAC9B,UAAU,EAAE;QAC7B,CAAC;QAAA;QAAA;UAAAtD,cAAA,GAAAsB,CAAA;QAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACD,IAAI,CAAC+D,MAAM,GAAG,SAAS;MACzB,CAAC;MAED,MAAMI,QAAQA,CAAA;QAAA;QAAAvF,cAAA,GAAAqB,CAAA;QACZ,MAAM+D,QAAQ;QAAA;QAAA,CAAApF,cAAA,GAAAoB,CAAA,QAAG,MAAMsB,eAAA,CAAA2C,iBAAiB,CAACC,OAAO,CAACN,eAAe,CAAC;QAAC;QAAAhF,cAAA,GAAAoB,CAAA;QAClE;QAAI;QAAA,CAAApB,cAAA,GAAAsB,CAAA,UAAA8D,QAAQ;QAAA;QAAA,CAAApF,cAAA,GAAAsB,CAAA,UAAI,OAAO8D,QAAQ,CAACG,QAAQ,KAAK,UAAU,GAAE;UAAA;UAAAvF,cAAA,GAAAsB,CAAA;UAAAtB,cAAA,GAAAoB,CAAA;UACvD,MAAMgE,QAAQ,CAACG,QAAQ,EAAE;QAC3B,CAAC;QAAA;QAAA;UAAAvF,cAAA,GAAAsB,CAAA;QAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACD,IAAI,CAAC+D,MAAM,GAAG,SAAS;MACzB,CAAC;MAED,MAAMK,WAAWA,CAAA;QAAA;QAAAxF,cAAA,GAAAqB,CAAA;QACf,MAAM+D,QAAQ;QAAA;QAAA,CAAApF,cAAA,GAAAoB,CAAA,QAAG,MAAMsB,eAAA,CAAA2C,iBAAiB,CAACC,OAAO,CAACN,eAAe,CAAC;QAAC;QAAAhF,cAAA,GAAAoB,CAAA;QAClE;QAAI;QAAA,CAAApB,cAAA,GAAAsB,CAAA,UAAA8D,QAAQ;QAAA;QAAA,CAAApF,cAAA,GAAAsB,CAAA,UAAI,OAAO8D,QAAQ,CAACI,WAAW,KAAK,UAAU,GAAE;UAAA;UAAAxF,cAAA,GAAAsB,CAAA;UAAAtB,cAAA,GAAAoB,CAAA;UAC1D,OAAO,MAAMgE,QAAQ,CAACI,WAAW,EAAE;QACrC,CAAC;QAAA;QAAA;UAAAxF,cAAA,GAAAsB,CAAA;QAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACD,OAAO;UACLqE,OAAO,EAAE,IAAI;UACbC,KAAK,EAAE,GAAG;UACVC,OAAO,EAAE,EAAE;UACXC,SAAS,EAAE,IAAIC,IAAI,EAAE;UACrBC,MAAM,EAAE,EAAE;UACVC,eAAe,EAAE;SAClB;MACH;KACD;EACH;EAEA;;;;EAIQ,MAAMtC,iBAAiBA,CAAA;IAAA;IAAAzD,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IAC7BgB,QAAA,CAAAmB,MAAM,CAACC,IAAI,CAAC,6BAA6B,CAAC;IAE1C;IAAA;IAAAxD,cAAA,GAAAoB,CAAA;IACA,IAAAa,QAAA,CAAA+D,MAAM,EAAC;MAAE/F,IAAI,EAAE,IAAAkC,MAAA,CAAAmD,OAAO,EAACW,OAAO,CAACC,GAAG,EAAE,EAAE,MAAM;IAAC,CAAE,CAAC;IAEhD;IACA,MAAMC,gBAAgB;IAAA;IAAA,CAAAnG,cAAA,GAAAoB,CAAA,QAAG,MAAM,IAAAqB,uBAAA,CAAA2D,mBAAmB,GAAE;IAAC;IAAApG,cAAA,GAAAoB,CAAA;IAErD,IAAI,CAAC+E,gBAAgB,CAACE,OAAO,EAAE;MAAA;MAAArG,cAAA,GAAAsB,CAAA;MAAAtB,cAAA,GAAAoB,CAAA;MAC7BgB,QAAA,CAAAmB,MAAM,CAACM,KAAK,CAAC,kCAAkC,EAAEsC,gBAAgB,CAACG,MAAM,CAAC;MAAC;MAAAtG,cAAA,GAAAoB,CAAA;MAC1E,MAAM,IAAImF,KAAK,CAAC,mCAAmC,CAAC;IACtD,CAAC;IAAA;IAAA;MAAAvG,cAAA,GAAAsB,CAAA;IAAA;IAAAtB,cAAA,GAAAoB,CAAA;IAEDgB,QAAA,CAAAmB,MAAM,CAACC,IAAI,CAAC,mDAAmD,CAAC;EAClE;EAIA;;;;EAIQI,qBAAqBA,CAAA;IAAA;IAAA5D,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IAC3B;IACA6E,OAAO,CAACO,EAAE,CAAC,SAAS,EAAE,MAAM;MAAA;MAAAxG,cAAA,GAAAqB,CAAA;MAAArB,cAAA,GAAAoB,CAAA;MAAA,WAAI,CAACqF,cAAc,CAAC,SAAS,CAAC;IAAD,CAAC,CAAC;IAAC;IAAAzG,cAAA,GAAAoB,CAAA;IAC5D6E,OAAO,CAACO,EAAE,CAAC,QAAQ,EAAE,MAAM;MAAA;MAAAxG,cAAA,GAAAqB,CAAA;MAAArB,cAAA,GAAAoB,CAAA;MAAA,WAAI,CAACqF,cAAc,CAAC,QAAQ,CAAC;IAAD,CAAC,CAAC;IAAC;IAAAzG,cAAA,GAAAoB,CAAA;IAC1D6E,OAAO,CAACO,EAAE,CAAC,QAAQ,EAAE,MAAM;MAAA;MAAAxG,cAAA,GAAAqB,CAAA;MAAArB,cAAA,GAAAoB,CAAA;MAAA,WAAI,CAACqF,cAAc,CAAC,QAAQ,CAAC;IAAD,CAAC,CAAC;IAEzD;IAAA;IAAAzG,cAAA,GAAAoB,CAAA;IACA6E,OAAO,CAACO,EAAE,CAAC,mBAAmB,EAAG3C,KAAK,IAAI;MAAA;MAAA7D,cAAA,GAAAqB,CAAA;MAAArB,cAAA,GAAAoB,CAAA;MACxCgB,QAAA,CAAAmB,MAAM,CAACM,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAAC;MAAA7D,cAAA,GAAAoB,CAAA;MAC7C,IAAI,CAACqF,cAAc,CAAC,oBAAoB,CAAC;IAC3C,CAAC,CAAC;IAAC;IAAAzG,cAAA,GAAAoB,CAAA;IAEH6E,OAAO,CAACO,EAAE,CAAC,oBAAoB,EAAE,CAACE,MAAM,EAAEC,OAAO,KAAI;MAAA;MAAA3G,cAAA,GAAAqB,CAAA;MAAArB,cAAA,GAAAoB,CAAA;MACnDgB,QAAA,CAAAmB,MAAM,CAACM,KAAK,CAAC,2BAA2B,EAAE8C,OAAO,EAAE,SAAS,EAAED,MAAM,CAAC;MAAC;MAAA1G,cAAA,GAAAoB,CAAA;MACtE,IAAI,CAACqF,cAAc,CAAC,qBAAqB,CAAC;IAC5C,CAAC,CAAC;EACJ;EAEA;;;;;;EAMQ,MAAMA,cAAcA,CAACG,MAAc;IAAA;IAAA5G,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IACzC,IAAI,IAAI,CAAC0B,cAAc,EAAE;MAAA;MAAA9C,cAAA,GAAAsB,CAAA;MAAAtB,cAAA,GAAAoB,CAAA;MACvBgB,QAAA,CAAAmB,MAAM,CAACsD,IAAI,CAAC,mDAAmD,EAAED,MAAM,CAAC;MAAC;MAAA5G,cAAA,GAAAoB,CAAA;MACzE;IACF,CAAC;IAAA;IAAA;MAAApB,cAAA,GAAAsB,CAAA;IAAA;IAAAtB,cAAA,GAAAoB,CAAA;IAED,IAAI,CAAC0B,cAAc,GAAG,IAAI;IAAC;IAAA9C,cAAA,GAAAoB,CAAA;IAC3BgB,QAAA,CAAAmB,MAAM,CAACC,IAAI,CAAC,gCAAgCoD,MAAM,EAAE,CAAC;IAAC;IAAA5G,cAAA,GAAAoB,CAAA;IAEtD,IAAI;MAAA;MAAApB,cAAA,GAAAoB,CAAA;MACF;MACA,MAAM,IAAI,CAACyB,aAAa,CAACiE,cAAc,EAAE;MAEzC;MAAA;MAAA9G,cAAA,GAAAoB,CAAA;MACA,MAAM,IAAI,CAACwB,YAAY,CAACmE,UAAU,EAAE;MAEpC;MAAA;MAAA/G,cAAA,GAAAoB,CAAA;MACA,MAAMsB,eAAA,CAAAsE,gBAAgB,CAACzB,QAAQ,EAAE;MAEjC;MAAA;MAAAvF,cAAA,GAAAoB,CAAA;MACA,MAAMsB,eAAA,CAAA2C,iBAAiB,CAACE,QAAQ,EAAE;MAAC;MAAAvF,cAAA,GAAAoB,CAAA;MAEnCgB,QAAA,CAAAmB,MAAM,CAACC,IAAI,CAAC,4CAA4C,CAAC;MAAC;MAAAxD,cAAA,GAAAoB,CAAA;MAC1D6E,OAAO,CAACgB,IAAI,CAAC,CAAC,CAAC;IAEjB,CAAC,CAAC,OAAOpD,KAAK,EAAE;MAAA;MAAA7D,cAAA,GAAAoB,CAAA;MACdgB,QAAA,CAAAmB,MAAM,CAACM,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MAAC;MAAA7D,cAAA,GAAAoB,CAAA;MACzD,MAAM,IAAI,CAAC0C,iBAAiB,EAAE;MAAC;MAAA9D,cAAA,GAAAoB,CAAA;MAC/B6E,OAAO,CAACgB,IAAI,CAAC,CAAC,CAAC;IACjB;EACF;EAEA;;;;EAIQ,MAAMnD,iBAAiBA,CAAA;IAAA;IAAA9D,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IAC7BgB,QAAA,CAAAmB,MAAM,CAACM,KAAK,CAAC,iCAAiC,CAAC;IAAC;IAAA7D,cAAA,GAAAoB,CAAA;IAEhD,IAAI;MAAA;MAAApB,cAAA,GAAAoB,CAAA;MACF;MACA,MAAM,IAAI,CAACwB,YAAY,CAACmE,UAAU,EAAE;MAEpC;MAAA;MAAA/G,cAAA,GAAAoB,CAAA;MACA,MAAMsB,eAAA,CAAAsE,gBAAgB,CAACE,OAAO,CAAC,2BAA2B,EAAE;QAC1DC,SAAS,EAAE,IAAItB,IAAI,EAAE;QACrBa,MAAM,EAAE;OACT,EAAE;QACDxB,QAAQ,EAAE,CAAC;QAAE;QACbkC,MAAM,EAAE;OACT,CAAC;IAEJ,CAAC,CAAC,OAAOvD,KAAK,EAAE;MAAA;MAAA7D,cAAA,GAAAoB,CAAA;MACdgB,QAAA,CAAAmB,MAAM,CAACM,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;IAC3D;EACF;EAEA;;;;EAIO,MAAMrD,KAAKA,CAAA;IAAA;IAAAR,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IAChBgB,QAAA,CAAAmB,MAAM,CAACC,IAAI,CAAC,kDAAkD,CAAC;IAE/D;IACA;IAAA;IAAAxD,cAAA,GAAAoB,CAAA;IACA,MAAM,IAAIiG,OAAO,CAAQ/B,OAAO,IAAI;MAAA;MAAAtF,cAAA,GAAAqB,CAAA;MAAArB,cAAA,GAAAoB,CAAA;MAClC,IAAI,CAACwB,YAAY,CAAC0E,IAAI,CAAC,cAAc,EAAE,MAAK;QAAA;QAAAtH,cAAA,GAAAqB,CAAA;QAAArB,cAAA,GAAAoB,CAAA;QAC1CkE,OAAO,EAAE;MACX,CAAC,CAAC;IACJ,CAAC,CAAC;IAAC;IAAAtF,cAAA,GAAAoB,CAAA;IAEHgB,QAAA,CAAAmB,MAAM,CAACC,IAAI,CAAC,gDAAgD,CAAC;IAAC;IAAAxD,cAAA,GAAAoB,CAAA;IAC9DgB,QAAA,CAAAmB,MAAM,CAACC,IAAI,CAAC,wDAAwD,CAAC;IAAC;IAAAxD,cAAA,GAAAoB,CAAA;IACtEgB,QAAA,CAAAmB,MAAM,CAACC,IAAI,CAAC,gEAAgE,CAAC;EAC/E;;AACD;AAAAxD,cAAA,GAAAoB,CAAA;AA6BQmG,OAAA,CAAA5E,cAAA,GAAAA,cAAA;AA3BT;;;;AAIA,eAAe6E,IAAIA,CAAA;EAAA;EAAAxH,cAAA,GAAAqB,CAAA;EAAArB,cAAA,GAAAoB,CAAA;EACjB,IAAI;IACF;IACA,MAAMqG,YAAY;IAAA;IAAA,CAAAzH,cAAA,GAAAoB,CAAA,SAAG,IAAIuB,cAAc,EAAE;IAAC;IAAA3C,cAAA,GAAAoB,CAAA;IAC1C,MAAMqG,YAAY,CAACnE,UAAU,EAAE;IAE/B;IAAA;IAAAtD,cAAA,GAAAoB,CAAA;IACA,MAAMqG,YAAY,CAACjH,KAAK,EAAE;EAE5B,CAAC,CAAC,OAAOqD,KAAK,EAAE;IAAA;IAAA7D,cAAA,GAAAoB,CAAA;IACdgB,QAAA,CAAAmB,MAAM,CAACM,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IAAC;IAAA7D,cAAA,GAAAoB,CAAA;IACxD6E,OAAO,CAACgB,IAAI,CAAC,CAAC,CAAC;EACjB;AACF;AAEA;AAAA;AAAAjH,cAAA,GAAAoB,CAAA;AACA,IAAIsG,MAAM,CAACC,IAAI,CAACC,GAAG,KAAK,UAAU3B,OAAO,CAAC4B,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE;EAAA;EAAA7H,cAAA,GAAAsB,CAAA;EAAAtB,cAAA,GAAAoB,CAAA;EACnDoG,IAAI,EAAE,CAACM,KAAK,CAAEjE,KAAK,IAAI;IAAA;IAAA7D,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IACrB2G,OAAO,CAAClE,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAAC;IAAA7D,cAAA,GAAAoB,CAAA;IAC7C6E,OAAO,CAACgB,IAAI,CAAC,CAAC,CAAC;EACjB,CAAC,CAAC;AACJ,CAAC;AAAA;AAAA;EAAAjH,cAAA,GAAAsB,CAAA;AAAA;AAID;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]}