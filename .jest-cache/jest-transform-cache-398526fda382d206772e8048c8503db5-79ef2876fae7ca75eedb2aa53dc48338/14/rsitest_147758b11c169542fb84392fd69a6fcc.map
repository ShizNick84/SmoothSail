{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\tests\\trading\\strategies\\rsi.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\tests\\trading\\strategies\\rsi.test.ts"],"sourcesContent":["// =============================================================================\r\n// AI CRYPTO TRADING AGENT - RSI STRATEGY UNIT TESTS\r\n// =============================================================================\r\n// Comprehensive unit tests for RSI momentum strategy\r\n// Tests overbought/oversold conditions, divergence detection, and signal generation\r\n// =============================================================================\r\n\r\nimport { RSIStrategy } from '@/trading/strategies/rsi';\r\nimport { RSISignal, TradingSignal } from '@/trading/strategies/types';\r\n\r\ndescribe('RSIStrategy', () => {\r\n  let strategy: RSIStrategy;\r\n\r\n  beforeEach(() => {\r\n    strategy = new RSIStrategy();\r\n  });\r\n\r\n  describe('calculateRSI', () => {\r\n    it('should calculate RSI correctly for trending up market', () => {\r\n      // Prices trending upward should result in RSI > 50\r\n      const prices = [100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128];\r\n      \r\n      const rsi = strategy.calculateRSI(prices, 14);\r\n      \r\n      expect(rsi).toHaveLength(prices.length);\r\n      expect(rsi.slice(0, 14).every(val => val === null)).toBe(true); // First 14 values null\r\n      expect(rsi[14]).toBeGreaterThan(50); // RSI should be > 50 for uptrend\r\n      expect(rsi[14]).toBeLessThan(100); // RSI should be < 100\r\n    });\r\n\r\n    it('should calculate RSI correctly for trending down market', () => {\r\n      // Prices trending downward should result in RSI < 50\r\n      const prices = [128, 126, 124, 122, 120, 118, 116, 114, 112, 110, 108, 106, 104, 102, 100];\r\n      \r\n      const rsi = strategy.calculateRSI(prices, 14);\r\n      \r\n      expect(rsi[14]).toBeLessThan(50); // RSI should be < 50 for downtrend\r\n      expect(rsi[14]).toBeGreaterThan(0); // RSI should be > 0\r\n    });\r\n\r\n    it('should handle sideways market correctly', () => {\r\n      const prices = [100, 101, 99, 100, 102, 98, 100, 101, 99, 100, 102, 98, 100, 101, 99];\r\n      \r\n      const rsi = strategy.calculateRSI(prices, 14);\r\n      \r\n      expect(rsi[14]).toBeGreaterThan(40);\r\n      expect(rsi[14]).toBeLessThan(60); // RSI should be around 50 for sideways\r\n    });\r\n\r\n    it('should handle insufficient data', () => {\r\n      const prices = [100, 102, 104, 106, 108];\r\n      \r\n      const rsi = strategy.calculateRSI(prices, 14);\r\n      \r\n      expect(rsi.every(val => val === null)).toBe(true);\r\n    });\r\n\r\n    it('should handle edge case with identical prices', () => {\r\n      const prices = Array(20).fill(100); // All prices the same\r\n      \r\n      const rsi = strategy.calculateRSI(prices, 14);\r\n      \r\n      expect(rsi[14]).toBe(50); // RSI should be 50 when no price movement\r\n    });\r\n  });\r\n\r\n  describe('detectOverboughtOversold', () => {\r\n    it('should detect overbought condition', () => {\r\n      const rsiValues = [null, null, 65, 70, 75, 80, 85];\r\n      \r\n      const conditions = strategy.detectOverboughtOversold(rsiValues, 70, 30);\r\n      \r\n      expect(conditions).toHaveLength(7);\r\n      expect(conditions[3]).toBe('OVERBOUGHT');\r\n      expect(conditions[4]).toBe('OVERBOUGHT');\r\n      expect(conditions[5]).toBe('OVERBOUGHT');\r\n      expect(conditions[6]).toBe('OVERBOUGHT');\r\n    });\r\n\r\n    it('should detect oversold condition', () => {\r\n      const rsiValues = [null, null, 35, 30, 25, 20, 15];\r\n      \r\n      const conditions = strategy.detectOverboughtOversold(rsiValues, 70, 30);\r\n      \r\n      expect(conditions[3]).toBe('OVERSOLD');\r\n      expect(conditions[4]).toBe('OVERSOLD');\r\n      expect(conditions[5]).toBe('OVERSOLD');\r\n      expect(conditions[6]).toBe('OVERSOLD');\r\n    });\r\n\r\n    it('should detect neutral condition', () => {\r\n      const rsiValues = [null, null, 45, 50, 55, 60, 65];\r\n      \r\n      const conditions = strategy.detectOverboughtOversold(rsiValues, 70, 30);\r\n      \r\n      expect(conditions[2]).toBe('NEUTRAL');\r\n      expect(conditions[3]).toBe('NEUTRAL');\r\n      expect(conditions[4]).toBe('NEUTRAL');\r\n      expect(conditions[5]).toBe('NEUTRAL');\r\n      expect(conditions[6]).toBe('NEUTRAL');\r\n    });\r\n\r\n    it('should handle null RSI values', () => {\r\n      const rsiValues = [null, null, null, null];\r\n      \r\n      const conditions = strategy.detectOverboughtOversold(rsiValues, 70, 30);\r\n      \r\n      expect(conditions.every(val => val === null)).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('detectDivergence', () => {\r\n    it('should detect bullish divergence', () => {\r\n      const prices = [100, 95, 90, 85, 80, 85, 90, 95, 100];\r\n      const rsiValues = [null, null, null, null, 25, 30, 35, 40, 45];\r\n      \r\n      const divergence = strategy.detectDivergence(prices, rsiValues);\r\n      \r\n      expect(divergence).toBe('BULLISH'); // Price makes lower low, RSI makes higher low\r\n    });\r\n\r\n    it('should detect bearish divergence', () => {\r\n      const prices = [100, 105, 110, 115, 120, 115, 110, 105, 100];\r\n      const rsiValues = [null, null, null, null, 75, 70, 65, 60, 55];\r\n      \r\n      const divergence = strategy.detectDivergence(prices, rsiValues);\r\n      \r\n      expect(divergence).toBe('BEARISH'); // Price makes higher high, RSI makes lower high\r\n    });\r\n\r\n    it('should return null when no divergence', () => {\r\n      const prices = [100, 105, 110, 115, 120];\r\n      const rsiValues = [null, null, null, 60, 65];\r\n      \r\n      const divergence = strategy.detectDivergence(prices, rsiValues);\r\n      \r\n      expect(divergence).toBeNull();\r\n    });\r\n\r\n    it('should handle insufficient data', () => {\r\n      const prices = [100, 105];\r\n      const rsiValues = [null, 60];\r\n      \r\n      const divergence = strategy.detectDivergence(prices, rsiValues);\r\n      \r\n      expect(divergence).toBeNull();\r\n    });\r\n  });\r\n\r\n  describe('generateSignal', () => {\r\n    it('should generate SELL signal for overbought condition', () => {\r\n      // Create data that will result in overbought RSI\r\n      const prices = Array.from({ length: 20 }, (_, i) => 100 + i * 2); // Strong uptrend\r\n      const volumes = Array.from({ length: 20 }, () => 1000);\r\n      \r\n      const marketData = {\r\n        symbol: 'BTC/USDT',\r\n        prices,\r\n        volumes,\r\n        timestamp: new Date()\r\n      };\r\n      \r\n      const signal = strategy.generateSignal(marketData);\r\n      \r\n      expect(signal).toBeDefined();\r\n      expect(signal.type).toBe('SELL');\r\n      expect(signal.symbol).toBe('BTC/USDT');\r\n      expect(signal.indicators).toContain('RSI');\r\n      expect(signal.strength).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('should generate BUY signal for oversold condition', () => {\r\n      // Create data that will result in oversold RSI\r\n      const prices = Array.from({ length: 20 }, (_, i) => 100 - i * 2); // Strong downtrend\r\n      const volumes = Array.from({ length: 20 }, () => 1000);\r\n      \r\n      const marketData = {\r\n        symbol: 'ETH/USDT',\r\n        prices,\r\n        volumes,\r\n        timestamp: new Date()\r\n      };\r\n      \r\n      const signal = strategy.generateSignal(marketData);\r\n      \r\n      expect(signal).toBeDefined();\r\n      expect(signal.type).toBe('BUY');\r\n      expect(signal.symbol).toBe('ETH/USDT');\r\n      expect(signal.indicators).toContain('RSI');\r\n    });\r\n\r\n    it('should generate HOLD signal for neutral RSI', () => {\r\n      // Create sideways market data\r\n      const prices = Array.from({ length: 20 }, (_, i) => 100 + Math.sin(i) * 2);\r\n      const volumes = Array.from({ length: 20 }, () => 1000);\r\n      \r\n      const marketData = {\r\n        symbol: 'BTC/USDT',\r\n        prices,\r\n        volumes,\r\n        timestamp: new Date()\r\n      };\r\n      \r\n      const signal = strategy.generateSignal(marketData);\r\n      \r\n      expect(signal.type).toBe('HOLD');\r\n      expect(signal.strength).toBeLessThan(70);\r\n    });\r\n\r\n    it('should handle insufficient data gracefully', () => {\r\n      const marketData = {\r\n        symbol: 'BTC/USDT',\r\n        prices: [100, 102, 104],\r\n        volumes: [1000, 1100, 1200],\r\n        timestamp: new Date()\r\n      };\r\n      \r\n      const signal = strategy.generateSignal(marketData);\r\n      \r\n      expect(signal.type).toBe('HOLD');\r\n      expect(signal.strength).toBe(0);\r\n      expect(signal.confidence).toBe(0);\r\n    });\r\n\r\n    it('should increase confidence with divergence confirmation', () => {\r\n      // Create bullish divergence scenario\r\n      const prices = [100, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 32, 34, 36, 38, 40];\r\n      const volumes = Array.from({ length: 20 }, () => 1000);\r\n      \r\n      const marketData = {\r\n        symbol: 'BTC/USDT',\r\n        prices,\r\n        volumes,\r\n        timestamp: new Date()\r\n      };\r\n      \r\n      const signal = strategy.generateSignal(marketData);\r\n      \r\n      expect(signal.confidence).toBeGreaterThan(60); // Higher confidence with divergence\r\n    });\r\n  });\r\n\r\n  describe('calculateSignalStrength', () => {\r\n    it('should calculate higher strength for extreme RSI values', () => {\r\n      const rsiValue = 85; // Very overbought\r\n      const condition = 'OVERBOUGHT';\r\n      \r\n      const strength = strategy.calculateSignalStrength(rsiValue, condition);\r\n      \r\n      expect(strength).toBeGreaterThan(70);\r\n      expect(strength).toBeLessThanOrEqual(100);\r\n    });\r\n\r\n    it('should calculate lower strength for moderate RSI values', () => {\r\n      const rsiValue = 72; // Slightly overbought\r\n      const condition = 'OVERBOUGHT';\r\n      \r\n      const strength = strategy.calculateSignalStrength(rsiValue, condition);\r\n      \r\n      expect(strength).toBeLessThan(70);\r\n      expect(strength).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('should return 0 for neutral condition', () => {\r\n      const rsiValue = 50;\r\n      const condition = 'NEUTRAL';\r\n      \r\n      const strength = strategy.calculateSignalStrength(rsiValue, condition);\r\n      \r\n      expect(strength).toBe(0);\r\n    });\r\n  });\r\n\r\n  describe('Edge Cases and Error Handling', () => {\r\n    it('should handle NaN values in prices', () => {\r\n      const marketData = {\r\n        symbol: 'BTC/USDT',\r\n        prices: [100, NaN, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130],\r\n        volumes: Array.from({ length: 17 }, () => 1000),\r\n        timestamp: new Date()\r\n      };\r\n      \r\n      expect(() => strategy.generateSignal(marketData)).not.toThrow();\r\n    });\r\n\r\n    it('should handle extreme price movements', () => {\r\n      const prices = [100, 200, 50, 300, 25, 400, 10]; // Extreme volatility\r\n      const volumes = Array.from({ length: 7 }, () => 1000);\r\n      \r\n      const marketData = {\r\n        symbol: 'BTC/USDT',\r\n        prices,\r\n        volumes,\r\n        timestamp: new Date()\r\n      };\r\n      \r\n      expect(() => strategy.generateSignal(marketData)).not.toThrow();\r\n    });\r\n\r\n    it('should validate configuration parameters', () => {\r\n      expect(() => new RSIStrategy({ period: 0 })).toThrow();\r\n      expect(() => new RSIStrategy({ period: -1 })).toThrow();\r\n      expect(() => new RSIStrategy({ overboughtThreshold: 50 })).toThrow(); // Should be > 50\r\n      expect(() => new RSIStrategy({ oversoldThreshold: 60 })).toThrow(); // Should be < 50\r\n    });\r\n\r\n    it('should handle configuration with invalid thresholds', () => {\r\n      expect(() => new RSIStrategy({ \r\n        overboughtThreshold: 30, \r\n        oversoldThreshold: 70 \r\n      })).toThrow(); // Overbought should be > oversold\r\n    });\r\n  });\r\n\r\n  describe('Performance and Accuracy Tests', () => {\r\n    it('should maintain accuracy with large datasets', () => {\r\n      const prices = Array.from({ length: 1000 }, (_, i) => 100 + Math.sin(i / 10) * 20);\r\n      const volumes = Array.from({ length: 1000 }, () => 1000);\r\n      \r\n      const marketData = {\r\n        symbol: 'BTC/USDT',\r\n        prices,\r\n        volumes,\r\n        timestamp: new Date()\r\n      };\r\n      \r\n      const startTime = Date.now();\r\n      const signal = strategy.generateSignal(marketData);\r\n      const endTime = Date.now();\r\n      \r\n      expect(endTime - startTime).toBeLessThan(500); // Should complete within 500ms\r\n      expect(signal).toBeDefined();\r\n      expect(signal.strength).toBeGreaterThanOrEqual(0);\r\n      expect(signal.strength).toBeLessThanOrEqual(100);\r\n    });\r\n\r\n    it('should produce consistent results for same input', () => {\r\n      const marketData = {\r\n        symbol: 'BTC/USDT',\r\n        prices: Array.from({ length: 20 }, (_, i) => 100 + i),\r\n        volumes: Array.from({ length: 20 }, () => 1000),\r\n        timestamp: new Date()\r\n      };\r\n      \r\n      const signal1 = strategy.generateSignal(marketData);\r\n      const signal2 = strategy.generateSignal(marketData);\r\n      \r\n      expect(signal1.type).toBe(signal2.type);\r\n      expect(signal1.strength).toBe(signal2.strength);\r\n      expect(signal1.confidence).toBe(signal2.confidence);\r\n    });\r\n  });\r\n});"],"version":3}