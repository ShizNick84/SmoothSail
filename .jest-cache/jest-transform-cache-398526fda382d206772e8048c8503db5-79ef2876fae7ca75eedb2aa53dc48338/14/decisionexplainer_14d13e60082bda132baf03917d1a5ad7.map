{"version":3,"names":["cov_2pjlbret7n","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","events_1","require","logger_1","DecisionExplainer","EventEmitter","llmEngine","isInitialized","explanationHistory","maxHistorySize","explanationTemplates","Map","EXPLANATION_CONFIG","maxReasoningSteps","minConfidenceForDecision","maxAlternativeDecisions","detailLevel","includeScenarios","includeRiskReward","includeAlternatives","constructor","initializeTemplates","logger","info","set","category","template","requiredFields","optionalFields","size","initialize","isReady","Error","emit","error","explainDecision","decisionInput","decision","symbol","decisionId","generateDecisionId","reasoningChain","buildReasoningChain","confidenceBreakdown","calculateConfidenceBreakdown","scenarioAnalysis","generateScenarioAnalysis","riskRewardExplanation","createRiskRewardExplanation","alternativeDecisions","generateAlternativeDecisions","summary","generateDecisionSummary","explanation","timestamp","Date","keyMetricsToWatch","identifyKeyMetrics","exitCriteria","defineExitCriteria","reviewSchedule","determineReviewSchedule","dataSourcesUsed","getDataSources","modelsUsed","expectedOutcome","generateExpectedOutcome","addToHistory","getTime","simpleHash","substring","toUpperCase","str","i","length","char","charCodeAt","Math","abs","toString","steps","stepNumber","technicalFactors","signals","push","description","evidence","weight","confidence","strength","impact","determineImpact","quantification","marketAnalysis","sentiment","trendAnalysis","overall","volatilityAnalysis","classification","overallConfidence","riskFactors","riskReward","stopLoss","positionSize","externalFactors","news","determineSentimentImpact","strategyConfidence","marketRegime","regime","components","technical","fundamental","risk","timing","step","totalWeight","reduce","sum","weightedConfidence","uncertaintyFactors","confidenceDrivers","toLowerCase","round","dataQuality","currentPrice","price","bullishScenario","probability","expectedReturn","keyFactors","bearishScenario","neutralScenario","mostLikelyOutcome","maxProbability","max","quantity","positionValue","riskAmount","rewardPotential","takeProfit","ratio","expectedValue","factor","mitigation","rewardDrivers","driver","potential","likelihood","breakEvenAnalysis","breakEvenPrice","timeToBreakEven","probabilityOfBreakEven","alternatives","currentDecision","reasoning","whyNotChosen","slice","prompt","buildSummaryPrompt","llmResponse","getLLMSummary","generateTemplateSummary","strategy","toFixed","map","index","join","get","replace","metrics","criteria","volatility","mostLikely","scenario","getExplanationHistory","limit","history","filter","getExplanationById","find","updateExplanationOutcome","actualOutcome","outcomeAnalysis","generateSimpleExplanation","alternativeScenarios","shutdown","exports"],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\ai\\decision-explainer.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * DECISION EXPLAINER - AI-POWERED TRADING DECISION EXPLANATION SYSTEM\r\n * =============================================================================\r\n * \r\n * This module provides comprehensive explanations for trading decisions using\r\n * AI and natural language processing. It creates human-readable reasoning\r\n * chains, confidence scoring, and audit trails for all trading decisions\r\n * made by the system.\r\n * \r\n * Key Features:\r\n * - Natural language explanations for trading decisions\r\n * - Reasoning chain construction and validation\r\n * - Confidence scoring and uncertainty quantification\r\n * - Decision audit trails and justifications\r\n * - Multi-factor analysis and weight attribution\r\n * - Risk-reward explanation and scenario analysis\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport { EventEmitter } from 'events';\r\nimport { logger } from '@/core/logging/logger';\r\nimport { LLMEngine } from './llm-engine';\r\nimport type { TradingDecisionExplanation } from './llm-engine';\r\nimport type { MarketAnalysis } from './llm-engine';\r\nimport type { ComprehensiveMarketAnalysis } from './market-analyzer';\r\n\r\n/**\r\n * Interface for trading decision input\r\n */\r\ninterface TradingDecisionInput {\r\n  symbol: string;\r\n  decision: 'BUY' | 'SELL' | 'HOLD';\r\n  quantity: number;\r\n  price: number;\r\n  timestamp: Date;\r\n  \r\n  // Strategy information\r\n  strategy: string;\r\n  strategyConfidence: number;\r\n  \r\n  // Market analysis\r\n  marketAnalysis: ComprehensiveMarketAnalysis;\r\n  \r\n  // Technical factors\r\n  technicalFactors: {\r\n    indicators: Record<string, number>;\r\n    signals: string[];\r\n    strength: number;\r\n  };\r\n  \r\n  // Risk management\r\n  riskFactors: {\r\n    stopLoss: number;\r\n    takeProfit: number;\r\n    riskReward: number;\r\n    positionSize: number;\r\n  };\r\n  \r\n  // External factors\r\n  externalFactors?: {\r\n    sentiment: number;\r\n    news: string[];\r\n    marketConditions: string;\r\n  };\r\n}\r\n\r\n/**\r\n * Interface for reasoning chain step\r\n */\r\ninterface ReasoningStep {\r\n  stepNumber: number;\r\n  category: 'TECHNICAL' | 'FUNDAMENTAL' | 'SENTIMENT' | 'RISK' | 'MARKET_STRUCTURE' | 'TIMING';\r\n  description: string;\r\n  evidence: string[];\r\n  weight: number; // 0-100, importance in final decision\r\n  confidence: number; // 0-100, confidence in this step\r\n  impact: 'POSITIVE' | 'NEGATIVE' | 'NEUTRAL';\r\n  quantification?: number; // Numerical impact if applicable\r\n}\r\n\r\n/**\r\n * Interface for decision confidence breakdown\r\n */\r\ninterface ConfidenceBreakdown {\r\n  overall: number; // 0-100\r\n  components: {\r\n    technical: number;\r\n    fundamental: number;\r\n    sentiment: number;\r\n    risk: number;\r\n    timing: number;\r\n  };\r\n  uncertaintyFactors: string[];\r\n  confidenceDrivers: string[];\r\n  dataQuality: number; // 0-100\r\n}\r\n\r\n/**\r\n * Interface for scenario analysis\r\n */\r\ninterface ScenarioAnalysis {\r\n  bullishScenario: {\r\n    probability: number; // 0-100\r\n    expectedReturn: number; // percentage\r\n    description: string;\r\n    keyFactors: string[];\r\n  };\r\n  bearishScenario: {\r\n    probability: number; // 0-100\r\n    expectedReturn: number; // percentage\r\n    description: string;\r\n    keyFactors: string[];\r\n  };\r\n  neutralScenario: {\r\n    probability: number; // 0-100\r\n    expectedReturn: number; // percentage\r\n    description: string;\r\n    keyFactors: string[];\r\n  };\r\n  mostLikelyOutcome: 'BULLISH' | 'BEARISH' | 'NEUTRAL';\r\n}\r\n\r\n/**\r\n * Interface for risk-reward explanation\r\n */\r\ninterface RiskRewardExplanation {\r\n  riskAmount: number; // Dollar amount at risk\r\n  rewardPotential: number; // Dollar amount potential reward\r\n  ratio: number; // Risk-reward ratio\r\n  probability: number; // Probability of success (0-100)\r\n  expectedValue: number; // Expected value of trade\r\n  \r\n  riskFactors: {\r\n    factor: string;\r\n    impact: number; // 0-100\r\n    mitigation: string;\r\n  }[];\r\n  \r\n  rewardDrivers: {\r\n    driver: string;\r\n    potential: number; // 0-100\r\n    likelihood: number; // 0-100\r\n  }[];\r\n  \r\n  breakEvenAnalysis: {\r\n    breakEvenPrice: number;\r\n    timeToBreakEven: string;\r\n    probabilityOfBreakEven: number;\r\n  };\r\n}\r\n\r\n/**\r\n * Interface for comprehensive decision explanation\r\n */\r\ninterface ComprehensiveDecisionExplanation {\r\n  // Basic information\r\n  decisionId: string;\r\n  symbol: string;\r\n  decision: 'BUY' | 'SELL' | 'HOLD';\r\n  timestamp: Date;\r\n  \r\n  // Core explanation\r\n  summary: string;\r\n  reasoningChain: ReasoningStep[];\r\n  confidenceBreakdown: ConfidenceBreakdown;\r\n  \r\n  // Analysis components\r\n  scenarioAnalysis: ScenarioAnalysis;\r\n  riskRewardExplanation: RiskRewardExplanation;\r\n  \r\n  // Alternative considerations\r\n  alternativeDecisions: {\r\n    decision: 'BUY' | 'SELL' | 'HOLD';\r\n    reasoning: string;\r\n    confidence: number;\r\n    whyNotChosen: string;\r\n  }[];\r\n  \r\n  // Monitoring and follow-up\r\n  keyMetricsToWatch: string[];\r\n  exitCriteria: string[];\r\n  reviewSchedule: string;\r\n  \r\n  // Audit information\r\n  dataSourcesUsed: string[];\r\n  modelsUsed: string[];\r\n  humanOverrideReason?: string;\r\n  \r\n  // Performance tracking\r\n  expectedOutcome: string;\r\n  actualOutcome?: string;\r\n  outcomeAnalysis?: string;\r\n}\r\n\r\n/**\r\n * Interface for explanation template\r\n */\r\ninterface ExplanationTemplate {\r\n  name: string;\r\n  category: 'BUY' | 'SELL' | 'HOLD';\r\n  template: string;\r\n  requiredFields: string[];\r\n  optionalFields: string[];\r\n}\r\n\r\n/**\r\n * Decision Explainer class for trading decision explanations\r\n */\r\nexport class DecisionExplainer extends EventEmitter {\r\n  private llmEngine: LLMEngine;\r\n  private isInitialized: boolean = false;\r\n  private explanationHistory: ComprehensiveDecisionExplanation[] = [];\r\n  private maxHistorySize: number = 1000;\r\n  private explanationTemplates: Map<string, ExplanationTemplate> = new Map();\r\n\r\n  // Explanation configuration\r\n  private readonly EXPLANATION_CONFIG = {\r\n    maxReasoningSteps: 10,\r\n    minConfidenceForDecision: 60,\r\n    maxAlternativeDecisions: 3,\r\n    detailLevel: 'COMPREHENSIVE', // 'BASIC' | 'DETAILED' | 'COMPREHENSIVE'\r\n    includeScenarios: true,\r\n    includeRiskReward: true,\r\n    includeAlternatives: true\r\n  };\r\n\r\n  constructor(llmEngine: LLMEngine) {\r\n    super();\r\n    this.llmEngine = llmEngine;\r\n    \r\n    this.initializeTemplates();\r\n    \r\n    logger.info('📝 Decision Explainer initialized');\r\n  }\r\n\r\n  /**\r\n   * Initialize explanation templates\r\n   */\r\n  private initializeTemplates(): void {\r\n    // Buy decision template\r\n    this.explanationTemplates.set('BUY', {\r\n      name: 'Buy Decision Template',\r\n      category: 'BUY',\r\n      template: `Based on comprehensive analysis, I recommend BUYING {symbol} at {price} for the following reasons:\r\n\r\nPRIMARY FACTORS:\r\n{primaryFactors}\r\n\r\nTECHNICAL ANALYSIS:\r\n{technicalAnalysis}\r\n\r\nRISK MANAGEMENT:\r\n- Stop Loss: {stopLoss}\r\n- Take Profit: {takeProfit}\r\n- Risk-Reward Ratio: {riskReward}\r\n- Position Size: {positionSize}% of portfolio\r\n\r\nCONFIDENCE: {confidence}% based on {confidenceFactors}\r\n\r\nEXPECTED OUTCOME: {expectedOutcome}`,\r\n      requiredFields: ['symbol', 'price', 'primaryFactors', 'technicalAnalysis', 'stopLoss', 'takeProfit', 'riskReward', 'positionSize', 'confidence', 'confidenceFactors', 'expectedOutcome'],\r\n      optionalFields: ['sentiment', 'news', 'marketConditions']\r\n    });\r\n\r\n    // Sell decision template\r\n    this.explanationTemplates.set('SELL', {\r\n      name: 'Sell Decision Template',\r\n      category: 'SELL',\r\n      template: `Based on comprehensive analysis, I recommend SELLING {symbol} at {price} for the following reasons:\r\n\r\nPRIMARY FACTORS:\r\n{primaryFactors}\r\n\r\nTECHNICAL ANALYSIS:\r\n{technicalAnalysis}\r\n\r\nRISK MANAGEMENT:\r\n- Stop Loss: {stopLoss}\r\n- Take Profit: {takeProfit}\r\n- Risk-Reward Ratio: {riskReward}\r\n- Position Size: {positionSize}% of portfolio\r\n\r\nCONFIDENCE: {confidence}% based on {confidenceFactors}\r\n\r\nEXPECTED OUTCOME: {expectedOutcome}`,\r\n      requiredFields: ['symbol', 'price', 'primaryFactors', 'technicalAnalysis', 'stopLoss', 'takeProfit', 'riskReward', 'positionSize', 'confidence', 'confidenceFactors', 'expectedOutcome'],\r\n      optionalFields: ['sentiment', 'news', 'marketConditions']\r\n    });\r\n\r\n    // Hold decision template\r\n    this.explanationTemplates.set('HOLD', {\r\n      name: 'Hold Decision Template',\r\n      category: 'HOLD',\r\n      template: `Based on comprehensive analysis, I recommend HOLDING current positions in {symbol} for the following reasons:\r\n\r\nPRIMARY FACTORS:\r\n{primaryFactors}\r\n\r\nCURRENT ANALYSIS:\r\n{currentAnalysis}\r\n\r\nMONITORING CRITERIA:\r\n{monitoringCriteria}\r\n\r\nCONFIDENCE: {confidence}% based on {confidenceFactors}\r\n\r\nNEXT REVIEW: {nextReview}`,\r\n      requiredFields: ['symbol', 'primaryFactors', 'currentAnalysis', 'monitoringCriteria', 'confidence', 'confidenceFactors', 'nextReview'],\r\n      optionalFields: ['sentiment', 'news', 'marketConditions']\r\n    });\r\n\r\n    logger.info(`📋 Initialized ${this.explanationTemplates.size} explanation templates`);\r\n  }\r\n\r\n  /**\r\n   * Initialize the decision explainer\r\n   */\r\n  public async initialize(): Promise<void> {\r\n    try {\r\n      logger.info('🚀 Initializing Decision Explainer...');\r\n\r\n      // Verify LLM engine is ready\r\n      if (!this.llmEngine.isReady()) {\r\n        throw new Error('LLM Engine is not ready');\r\n      }\r\n\r\n      this.isInitialized = true;\r\n      logger.info('✅ Decision Explainer initialized successfully');\r\n\r\n      this.emit('initialized');\r\n\r\n    } catch (error) {\r\n      logger.error('❌ Failed to initialize Decision Explainer:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate comprehensive explanation for a trading decision\r\n   */\r\n  public async explainDecision(decisionInput: TradingDecisionInput): Promise<ComprehensiveDecisionExplanation> {\r\n    try {\r\n      if (!this.isInitialized) {\r\n        throw new Error('Decision Explainer not initialized');\r\n      }\r\n\r\n      logger.info(`📝 Generating explanation for ${decisionInput.decision} decision on ${decisionInput.symbol}...`);\r\n\r\n      const decisionId = this.generateDecisionId(decisionInput);\r\n\r\n      // Build reasoning chain\r\n      const reasoningChain = await this.buildReasoningChain(decisionInput);\r\n\r\n      // Calculate confidence breakdown\r\n      const confidenceBreakdown = this.calculateConfidenceBreakdown(decisionInput, reasoningChain);\r\n\r\n      // Generate scenario analysis\r\n      const scenarioAnalysis = await this.generateScenarioAnalysis(decisionInput);\r\n\r\n      // Create risk-reward explanation\r\n      const riskRewardExplanation = this.createRiskRewardExplanation(decisionInput);\r\n\r\n      // Generate alternative decisions\r\n      const alternativeDecisions = await this.generateAlternativeDecisions(decisionInput);\r\n\r\n      // Create summary using LLM\r\n      const summary = await this.generateDecisionSummary(decisionInput, reasoningChain);\r\n\r\n      // Compile comprehensive explanation\r\n      const explanation: ComprehensiveDecisionExplanation = {\r\n        decisionId,\r\n        symbol: decisionInput.symbol,\r\n        decision: decisionInput.decision,\r\n        timestamp: new Date(),\r\n        \r\n        summary,\r\n        reasoningChain,\r\n        confidenceBreakdown,\r\n        \r\n        scenarioAnalysis,\r\n        riskRewardExplanation,\r\n        \r\n        alternativeDecisions,\r\n        \r\n        keyMetricsToWatch: this.identifyKeyMetrics(decisionInput),\r\n        exitCriteria: this.defineExitCriteria(decisionInput),\r\n        reviewSchedule: this.determineReviewSchedule(decisionInput),\r\n        \r\n        dataSourcesUsed: this.getDataSources(decisionInput),\r\n        modelsUsed: ['LLM', 'Technical Analysis', 'Risk Management', 'Market Analysis'],\r\n        \r\n        expectedOutcome: this.generateExpectedOutcome(decisionInput, scenarioAnalysis)\r\n      };\r\n\r\n      // Add to history\r\n      this.addToHistory(explanation);\r\n\r\n      logger.info(`✅ Decision explanation generated for ${decisionInput.symbol} (ID: ${decisionId})`);\r\n      \r\n      this.emit('explanationGenerated', explanation);\r\n\r\n      return explanation;\r\n\r\n    } catch (error) {\r\n      logger.error('❌ Error generating decision explanation:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate unique decision ID\r\n   */\r\n  private generateDecisionId(decisionInput: TradingDecisionInput): string {\r\n    const timestamp = decisionInput.timestamp.getTime();\r\n    const hash = this.simpleHash(`${decisionInput.symbol}_${decisionInput.decision}_${timestamp}`);\r\n    return `DEC_${hash.substring(0, 8).toUpperCase()}`;\r\n  }\r\n\r\n  /**\r\n   * Simple hash function for ID generation\r\n   */\r\n  private simpleHash(str: string): string {\r\n    let hash = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n      const char = str.charCodeAt(i);\r\n      hash = ((hash << 5) - hash) + char;\r\n      hash = hash & hash; // Convert to 32-bit integer\r\n    }\r\n    return Math.abs(hash).toString(16);\r\n  }\r\n\r\n  /**\r\n   * Build reasoning chain for the decision\r\n   */\r\n  private async buildReasoningChain(decisionInput: TradingDecisionInput): Promise<ReasoningStep[]> {\r\n    const steps: ReasoningStep[] = [];\r\n    let stepNumber = 1;\r\n\r\n    // Technical analysis step\r\n    if (decisionInput.technicalFactors.signals.length > 0) {\r\n      steps.push({\r\n        stepNumber: stepNumber++,\r\n        category: 'TECHNICAL',\r\n        description: 'Technical indicators analysis',\r\n        evidence: decisionInput.technicalFactors.signals,\r\n        weight: 30,\r\n        confidence: decisionInput.technicalFactors.strength,\r\n        impact: this.determineImpact(decisionInput.decision, decisionInput.technicalFactors.strength),\r\n        quantification: decisionInput.technicalFactors.strength\r\n      });\r\n    }\r\n\r\n    // Market analysis step\r\n    const marketAnalysis = decisionInput.marketAnalysis;\r\n    steps.push({\r\n      stepNumber: stepNumber++,\r\n      category: 'FUNDAMENTAL',\r\n      description: 'Market conditions and trend analysis',\r\n      evidence: [\r\n        `Market sentiment: ${marketAnalysis.marketAnalysis.sentiment}`,\r\n        `Trend: ${marketAnalysis.trendAnalysis.overall}`,\r\n        `Volatility: ${marketAnalysis.volatilityAnalysis.classification}`\r\n      ],\r\n      weight: 25,\r\n      confidence: marketAnalysis.overallConfidence,\r\n      impact: this.determineImpact(decisionInput.decision, marketAnalysis.overallConfidence),\r\n      quantification: marketAnalysis.marketAnalysis.sentiment\r\n    });\r\n\r\n    // Risk management step\r\n    steps.push({\r\n      stepNumber: stepNumber++,\r\n      category: 'RISK',\r\n      description: 'Risk-reward assessment',\r\n      evidence: [\r\n        `Risk-reward ratio: ${decisionInput.riskFactors.riskReward}:1`,\r\n        `Stop loss: ${decisionInput.riskFactors.stopLoss}`,\r\n        `Position size: ${decisionInput.riskFactors.positionSize}%`\r\n      ],\r\n      weight: 20,\r\n      confidence: decisionInput.riskFactors.riskReward >= 1.3 ? 85 : 60,\r\n      impact: decisionInput.riskFactors.riskReward >= 1.3 ? 'POSITIVE' : 'NEGATIVE',\r\n      quantification: decisionInput.riskFactors.riskReward\r\n    });\r\n\r\n    // Sentiment analysis step (if available)\r\n    if (decisionInput.externalFactors?.sentiment !== undefined) {\r\n      steps.push({\r\n        stepNumber: stepNumber++,\r\n        category: 'SENTIMENT',\r\n        description: 'Market sentiment analysis',\r\n        evidence: [\r\n          `Overall sentiment: ${decisionInput.externalFactors.sentiment}`,\r\n          ...(decisionInput.externalFactors.news || [])\r\n        ],\r\n        weight: 15,\r\n        confidence: Math.abs(decisionInput.externalFactors.sentiment) > 50 ? 80 : 60,\r\n        impact: this.determineSentimentImpact(decisionInput.decision, decisionInput.externalFactors.sentiment),\r\n        quantification: decisionInput.externalFactors.sentiment\r\n      });\r\n    }\r\n\r\n    // Timing analysis step\r\n    steps.push({\r\n      stepNumber: stepNumber++,\r\n      category: 'TIMING',\r\n      description: 'Market timing and entry/exit optimization',\r\n      evidence: [\r\n        `Strategy confidence: ${decisionInput.strategyConfidence}%`,\r\n        `Market regime: ${marketAnalysis.marketRegime.regime}`,\r\n        `Volatility level: ${marketAnalysis.volatilityAnalysis.classification}`\r\n      ],\r\n      weight: 10,\r\n      confidence: decisionInput.strategyConfidence,\r\n      impact: this.determineImpact(decisionInput.decision, decisionInput.strategyConfidence),\r\n      quantification: decisionInput.strategyConfidence\r\n    });\r\n\r\n    return steps;\r\n  }\r\n\r\n  /**\r\n   * Determine impact based on decision and strength\r\n   */\r\n  private determineImpact(decision: 'BUY' | 'SELL' | 'HOLD', strength: number): 'POSITIVE' | 'NEGATIVE' | 'NEUTRAL' {\r\n    if (decision === 'HOLD') return 'NEUTRAL';\r\n    \r\n    if (strength > 70) return 'POSITIVE';\r\n    if (strength < 40) return 'NEGATIVE';\r\n    return 'NEUTRAL';\r\n  }\r\n\r\n  /**\r\n   * Determine sentiment impact on decision\r\n   */\r\n  private determineSentimentImpact(decision: 'BUY' | 'SELL' | 'HOLD', sentiment: number): 'POSITIVE' | 'NEGATIVE' | 'NEUTRAL' {\r\n    if (decision === 'HOLD') return 'NEUTRAL';\r\n    \r\n    if (decision === 'BUY' && sentiment > 20) return 'POSITIVE';\r\n    if (decision === 'BUY' && sentiment < -20) return 'NEGATIVE';\r\n    if (decision === 'SELL' && sentiment < -20) return 'POSITIVE';\r\n    if (decision === 'SELL' && sentiment > 20) return 'NEGATIVE';\r\n    \r\n    return 'NEUTRAL';\r\n  }\r\n\r\n  /**\r\n   * Calculate confidence breakdown\r\n   */\r\n  private calculateConfidenceBreakdown(\r\n    decisionInput: TradingDecisionInput,\r\n    reasoningChain: ReasoningStep[]\r\n  ): ConfidenceBreakdown {\r\n    const components = {\r\n      technical: 0,\r\n      fundamental: 0,\r\n      sentiment: 0,\r\n      risk: 0,\r\n      timing: 0\r\n    };\r\n\r\n    // Calculate component confidences from reasoning chain\r\n    for (const step of reasoningChain) {\r\n      switch (step.category) {\r\n        case 'TECHNICAL':\r\n          components.technical = step.confidence;\r\n          break;\r\n        case 'FUNDAMENTAL':\r\n          components.fundamental = step.confidence;\r\n          break;\r\n        case 'SENTIMENT':\r\n          components.sentiment = step.confidence;\r\n          break;\r\n        case 'RISK':\r\n          components.risk = step.confidence;\r\n          break;\r\n        case 'TIMING':\r\n          components.timing = step.confidence;\r\n          break;\r\n      }\r\n    }\r\n\r\n    // Calculate weighted overall confidence\r\n    const totalWeight = reasoningChain.reduce((sum, step) => sum + step.weight, 0);\r\n    const weightedConfidence = reasoningChain.reduce((sum, step) => \r\n      sum + (step.confidence * step.weight), 0) / totalWeight;\r\n\r\n    // Identify uncertainty factors\r\n    const uncertaintyFactors: string[] = [];\r\n    const confidenceDrivers: string[] = [];\r\n\r\n    for (const step of reasoningChain) {\r\n      if (step.confidence < 60) {\r\n        uncertaintyFactors.push(`Low confidence in ${step.category.toLowerCase()} analysis`);\r\n      } else if (step.confidence > 80) {\r\n        confidenceDrivers.push(`Strong ${step.category.toLowerCase()} signals`);\r\n      }\r\n    }\r\n\r\n    return {\r\n      overall: Math.round(weightedConfidence),\r\n      components,\r\n      uncertaintyFactors,\r\n      confidenceDrivers,\r\n      dataQuality: decisionInput.marketAnalysis.dataQuality\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generate scenario analysis\r\n   */\r\n  private async generateScenarioAnalysis(decisionInput: TradingDecisionInput): Promise<ScenarioAnalysis> {\r\n    const marketAnalysis = decisionInput.marketAnalysis;\r\n    const currentPrice = decisionInput.price;\r\n\r\n    // Bullish scenario\r\n    const bullishScenario = {\r\n      probability: marketAnalysis.trendAnalysis.overall === 'BULLISH' ? 60 : 30,\r\n      expectedReturn: 15, // Mock 15% return\r\n      description: 'Technical breakout with strong volume confirmation and positive sentiment',\r\n      keyFactors: [\r\n        'Technical indicators align bullishly',\r\n        'Volume confirms price movement',\r\n        'Market sentiment improves',\r\n        'Risk-reward ratio favorable'\r\n      ]\r\n    };\r\n\r\n    // Bearish scenario\r\n    const bearishScenario = {\r\n      probability: marketAnalysis.trendAnalysis.overall === 'BEARISH' ? 60 : 25,\r\n      expectedReturn: -10, // Mock -10% return\r\n      description: 'Technical breakdown with selling pressure and negative sentiment',\r\n      keyFactors: [\r\n        'Technical indicators turn bearish',\r\n        'Volume on declines increases',\r\n        'Market sentiment deteriorates',\r\n        'Support levels break'\r\n      ]\r\n    };\r\n\r\n    // Neutral scenario\r\n    const neutralScenario = {\r\n      probability: 100 - bullishScenario.probability - bearishScenario.probability,\r\n      expectedReturn: 2, // Mock 2% return\r\n      description: 'Sideways trading within established range',\r\n      keyFactors: [\r\n        'Mixed technical signals',\r\n        'Low volatility environment',\r\n        'Neutral market sentiment',\r\n        'Range-bound trading'\r\n      ]\r\n    };\r\n\r\n    // Determine most likely outcome\r\n    let mostLikelyOutcome: 'BULLISH' | 'BEARISH' | 'NEUTRAL' = 'NEUTRAL';\r\n    const maxProbability = Math.max(bullishScenario.probability, bearishScenario.probability, neutralScenario.probability);\r\n    \r\n    if (maxProbability === bullishScenario.probability) mostLikelyOutcome = 'BULLISH';\r\n    else if (maxProbability === bearishScenario.probability) mostLikelyOutcome = 'BEARISH';\r\n\r\n    return {\r\n      bullishScenario,\r\n      bearishScenario,\r\n      neutralScenario,\r\n      mostLikelyOutcome\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Create risk-reward explanation\r\n   */\r\n  private createRiskRewardExplanation(decisionInput: TradingDecisionInput): RiskRewardExplanation {\r\n    const { riskFactors, quantity, price } = decisionInput;\r\n    const positionValue = quantity * price;\r\n    \r\n    const riskAmount = positionValue * (Math.abs(price - riskFactors.stopLoss) / price);\r\n    const rewardPotential = positionValue * (Math.abs(riskFactors.takeProfit - price) / price);\r\n    \r\n    return {\r\n      riskAmount,\r\n      rewardPotential,\r\n      ratio: riskFactors.riskReward,\r\n      probability: 65, // Mock probability\r\n      expectedValue: (rewardPotential * 0.65) - (riskAmount * 0.35),\r\n      \r\n      riskFactors: [\r\n        {\r\n          factor: 'Market volatility',\r\n          impact: 70,\r\n          mitigation: 'Appropriate position sizing and stop loss'\r\n        },\r\n        {\r\n          factor: 'Adverse price movement',\r\n          impact: 85,\r\n          mitigation: 'Technical stop loss at key support/resistance'\r\n        },\r\n        {\r\n          factor: 'Liquidity risk',\r\n          impact: 30,\r\n          mitigation: 'Trading liquid markets with tight spreads'\r\n        }\r\n      ],\r\n      \r\n      rewardDrivers: [\r\n        {\r\n          driver: 'Technical breakout',\r\n          potential: 80,\r\n          likelihood: 70\r\n        },\r\n        {\r\n          driver: 'Positive sentiment shift',\r\n          potential: 60,\r\n          likelihood: 50\r\n        },\r\n        {\r\n          driver: 'Volume confirmation',\r\n          potential: 70,\r\n          likelihood: 65\r\n        }\r\n      ],\r\n      \r\n      breakEvenAnalysis: {\r\n        breakEvenPrice: price + (price * 0.001), // Mock 0.1% for fees\r\n        timeToBreakEven: '1-3 days',\r\n        probabilityOfBreakEven: 75\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generate alternative decisions\r\n   */\r\n  private async generateAlternativeDecisions(decisionInput: TradingDecisionInput): Promise<{\r\n    decision: 'BUY' | 'SELL' | 'HOLD';\r\n    reasoning: string;\r\n    confidence: number;\r\n    whyNotChosen: string;\r\n  }[]> {\r\n    const alternatives: any[] = [];\r\n    const currentDecision = decisionInput.decision;\r\n\r\n    // Generate alternatives based on current decision\r\n    if (currentDecision !== 'HOLD') {\r\n      alternatives.push({\r\n        decision: 'HOLD',\r\n        reasoning: 'Wait for clearer signals and better risk-reward setup',\r\n        confidence: 60,\r\n        whyNotChosen: 'Current setup provides acceptable risk-reward with sufficient confidence'\r\n      });\r\n    }\r\n\r\n    if (currentDecision !== 'BUY') {\r\n      alternatives.push({\r\n        decision: 'BUY',\r\n        reasoning: 'Technical indicators show potential upside with improving sentiment',\r\n        confidence: currentDecision === 'SELL' ? 40 : 70,\r\n        whyNotChosen: currentDecision === 'SELL' ? \r\n          'Bearish signals outweigh bullish factors' : \r\n          'Risk management suggests waiting for better entry'\r\n      });\r\n    }\r\n\r\n    if (currentDecision !== 'SELL') {\r\n      alternatives.push({\r\n        decision: 'SELL',\r\n        reasoning: 'Risk factors suggest potential downside with deteriorating conditions',\r\n        confidence: currentDecision === 'BUY' ? 35 : 65,\r\n        whyNotChosen: currentDecision === 'BUY' ? \r\n          'Bullish signals outweigh bearish factors' : \r\n          'No immediate selling pressure detected'\r\n      });\r\n    }\r\n\r\n    return alternatives.slice(0, this.EXPLANATION_CONFIG.maxAlternativeDecisions);\r\n  }\r\n\r\n  /**\r\n   * Generate decision summary using LLM\r\n   */\r\n  private async generateDecisionSummary(\r\n    decisionInput: TradingDecisionInput,\r\n    reasoningChain: ReasoningStep[]\r\n  ): Promise<string> {\r\n    try {\r\n      // Build prompt for LLM\r\n      const prompt = this.buildSummaryPrompt(decisionInput, reasoningChain);\r\n      \r\n      // Get LLM response (mock implementation)\r\n      const llmResponse = await this.getLLMSummary(prompt);\r\n      \r\n      return llmResponse;\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Error generating LLM summary:', error);\r\n      \r\n      // Fallback to template-based summary\r\n      return this.generateTemplateSummary(decisionInput, reasoningChain);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Build prompt for LLM summary generation\r\n   */\r\n  private buildSummaryPrompt(\r\n    decisionInput: TradingDecisionInput,\r\n    reasoningChain: ReasoningStep[]\r\n  ): string {\r\n    const { symbol, decision, price, strategy } = decisionInput;\r\n    \r\n    let prompt = `Generate a clear, concise summary for the following trading decision:\r\n\r\nDECISION: ${decision} ${symbol} at $${price.toFixed(2)}\r\nSTRATEGY: ${strategy}\r\n\r\nREASONING CHAIN:\r\n${reasoningChain.map((step, index) => \r\n  `${index + 1}. ${step.category}: ${step.description} (Confidence: ${step.confidence}%, Weight: ${step.weight}%)`\r\n).join('\\n')}\r\n\r\nRISK MANAGEMENT:\r\n- Stop Loss: $${decisionInput.riskFactors.stopLoss.toFixed(2)}\r\n- Take Profit: $${decisionInput.riskFactors.takeProfit.toFixed(2)}\r\n- Risk-Reward: ${decisionInput.riskFactors.riskReward}:1\r\n- Position Size: ${decisionInput.riskFactors.positionSize}%\r\n\r\nPlease provide a professional, clear explanation that:\r\n1. Summarizes the key reasons for this decision\r\n2. Highlights the most important factors\r\n3. Explains the risk management approach\r\n4. Sets appropriate expectations\r\n\r\nKeep it concise but comprehensive, suitable for both technical and non-technical audiences.`;\r\n\r\n    return prompt;\r\n  }\r\n\r\n  /**\r\n   * Get LLM summary (mock implementation)\r\n   */\r\n  private async getLLMSummary(prompt: string): Promise<string> {\r\n    // Mock LLM response\r\n    return `Based on comprehensive technical and fundamental analysis, I recommend this trading decision with high confidence. The primary drivers include strong technical alignment, favorable risk-reward ratio, and supportive market conditions. Risk management is appropriately structured with defined stop loss and take profit levels. This decision aligns with our capital preservation strategy while maximizing profit potential through systematic analysis.`;\r\n  }\r\n\r\n  /**\r\n   * Generate template-based summary as fallback\r\n   */\r\n  private generateTemplateSummary(\r\n    decisionInput: TradingDecisionInput,\r\n    reasoningChain: ReasoningStep[]\r\n  ): string {\r\n    const template = this.explanationTemplates.get(decisionInput.decision);\r\n    if (!template) {\r\n      return `${decisionInput.decision} decision for ${decisionInput.symbol} based on systematic analysis.`;\r\n    }\r\n\r\n    // Simple template substitution (in production, this would be more sophisticated)\r\n    let summary = template.template;\r\n    \r\n    summary = summary.replace('{symbol}', decisionInput.symbol);\r\n    summary = summary.replace('{price}', decisionInput.price.toFixed(2));\r\n    summary = summary.replace('{stopLoss}', decisionInput.riskFactors.stopLoss.toFixed(2));\r\n    summary = summary.replace('{takeProfit}', decisionInput.riskFactors.takeProfit.toFixed(2));\r\n    summary = summary.replace('{riskReward}', decisionInput.riskFactors.riskReward.toString());\r\n    summary = summary.replace('{positionSize}', decisionInput.riskFactors.positionSize.toString());\r\n    \r\n    return summary;\r\n  }\r\n\r\n  /**\r\n   * Identify key metrics to monitor\r\n   */\r\n  private identifyKeyMetrics(decisionInput: TradingDecisionInput): string[] {\r\n    const metrics = [\r\n      'Price action relative to entry point',\r\n      'Volume confirmation of price movements',\r\n      'Technical indicator alignment',\r\n      'Risk-reward ratio maintenance'\r\n    ];\r\n\r\n    // Add decision-specific metrics\r\n    if (decisionInput.decision === 'BUY') {\r\n      metrics.push('Support level holding', 'Bullish momentum continuation');\r\n    } else if (decisionInput.decision === 'SELL') {\r\n      metrics.push('Resistance level rejection', 'Bearish momentum continuation');\r\n    }\r\n\r\n    // Add market-specific metrics\r\n    if (decisionInput.marketAnalysis.volatilityAnalysis.classification === 'HIGH') {\r\n      metrics.push('Volatility normalization', 'Risk management effectiveness');\r\n    }\r\n\r\n    return metrics;\r\n  }\r\n\r\n  /**\r\n   * Define exit criteria\r\n   */\r\n  private defineExitCriteria(decisionInput: TradingDecisionInput): string[] {\r\n    const criteria = [\r\n      `Stop loss triggered at $${decisionInput.riskFactors.stopLoss.toFixed(2)}`,\r\n      `Take profit reached at $${decisionInput.riskFactors.takeProfit.toFixed(2)}`,\r\n      'Technical setup invalidation',\r\n      'Risk-reward ratio deterioration'\r\n    ];\r\n\r\n    // Add decision-specific criteria\r\n    if (decisionInput.decision === 'BUY') {\r\n      criteria.push('Break below key support levels', 'Bearish divergence in indicators');\r\n    } else if (decisionInput.decision === 'SELL') {\r\n      criteria.push('Break above key resistance levels', 'Bullish divergence in indicators');\r\n    }\r\n\r\n    return criteria;\r\n  }\r\n\r\n  /**\r\n   * Determine review schedule\r\n   */\r\n  private determineReviewSchedule(decisionInput: TradingDecisionInput): string {\r\n    const volatility = decisionInput.marketAnalysis.volatilityAnalysis.classification;\r\n    \r\n    if (volatility === 'HIGH' || volatility === 'EXTREMELY_HIGH') {\r\n      return 'Every 4 hours during market hours';\r\n    } else if (volatility === 'MEDIUM') {\r\n      return 'Twice daily (morning and evening)';\r\n    } else {\r\n      return 'Daily review with weekly comprehensive analysis';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get data sources used\r\n   */\r\n  private getDataSources(decisionInput: TradingDecisionInput): string[] {\r\n    const sources = [\r\n      'Gate.io market data',\r\n      'Technical indicators',\r\n      'Risk management system',\r\n      'Market analysis engine'\r\n    ];\r\n\r\n    if (decisionInput.externalFactors?.sentiment !== undefined) {\r\n      sources.push('Sentiment analysis', 'Social media monitoring');\r\n    }\r\n\r\n    if (decisionInput.externalFactors?.news?.length) {\r\n      sources.push('News analysis', 'Fundamental data');\r\n    }\r\n\r\n    return sources;\r\n  }\r\n\r\n  /**\r\n   * Generate expected outcome\r\n   */\r\n  private generateExpectedOutcome(\r\n    decisionInput: TradingDecisionInput,\r\n    scenarioAnalysis: ScenarioAnalysis\r\n  ): string {\r\n    const mostLikely = scenarioAnalysis.mostLikelyOutcome;\r\n    const scenario = scenarioAnalysis[`${mostLikely.toLowerCase()}Scenario` as keyof ScenarioAnalysis] as any;\r\n    \r\n    return `Most likely outcome (${scenario.probability}% probability): ${scenario.description} with expected return of ${scenario.expectedReturn > 0 ? '+' : ''}${scenario.expectedReturn}%`;\r\n  }\r\n\r\n  /**\r\n   * Add explanation to history\r\n   */\r\n  private addToHistory(explanation: ComprehensiveDecisionExplanation): void {\r\n    this.explanationHistory.push(explanation);\r\n    \r\n    if (this.explanationHistory.length > this.maxHistorySize) {\r\n      this.explanationHistory = this.explanationHistory.slice(-this.maxHistorySize);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get explanation history\r\n   */\r\n  public getExplanationHistory(symbol?: string, limit?: number): ComprehensiveDecisionExplanation[] {\r\n    let history = this.explanationHistory;\r\n    \r\n    if (symbol) {\r\n      history = history.filter(explanation => explanation.symbol === symbol);\r\n    }\r\n    \r\n    if (limit) {\r\n      history = history.slice(-limit);\r\n    }\r\n    \r\n    return history;\r\n  }\r\n\r\n  /**\r\n   * Get explanation by ID\r\n   */\r\n  public getExplanationById(decisionId: string): ComprehensiveDecisionExplanation | null {\r\n    return this.explanationHistory.find(explanation => explanation.decisionId === decisionId) || null;\r\n  }\r\n\r\n  /**\r\n   * Update explanation with actual outcome\r\n   */\r\n  public async updateExplanationOutcome(\r\n    decisionId: string,\r\n    actualOutcome: string,\r\n    outcomeAnalysis?: string\r\n  ): Promise<void> {\r\n    const explanation = this.getExplanationById(decisionId);\r\n    \r\n    if (explanation) {\r\n      explanation.actualOutcome = actualOutcome;\r\n      explanation.outcomeAnalysis = outcomeAnalysis;\r\n      \r\n      logger.info(`📊 Updated outcome for decision ${decisionId}: ${actualOutcome}`);\r\n      \r\n      this.emit('outcomeUpdated', { decisionId, actualOutcome, outcomeAnalysis });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate simple explanation (for quick decisions)\r\n   */\r\n  public async generateSimpleExplanation(decisionInput: TradingDecisionInput): Promise<TradingDecisionExplanation> {\r\n    const reasoningChain = await this.buildReasoningChain(decisionInput);\r\n    const confidenceBreakdown = this.calculateConfidenceBreakdown(decisionInput, reasoningChain);\r\n    \r\n    return {\r\n      decision: decisionInput.decision,\r\n      reasoning: reasoningChain.map(step => step.description),\r\n      confidence: confidenceBreakdown.overall,\r\n      riskFactors: reasoningChain\r\n        .filter(step => step.impact === 'NEGATIVE')\r\n        .map(step => step.description),\r\n      expectedOutcome: this.generateExpectedOutcome(\r\n        decisionInput,\r\n        await this.generateScenarioAnalysis(decisionInput)\r\n      ),\r\n      alternativeScenarios: [\r\n        'Market conditions could change rapidly',\r\n        'Technical levels may not hold as expected',\r\n        'External factors could impact sentiment'\r\n      ],\r\n      timestamp: new Date()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Shutdown the decision explainer\r\n   */\r\n  public async shutdown(): Promise<void> {\r\n    try {\r\n      logger.info('🛑 Shutting down Decision Explainer...');\r\n      \r\n      // Clear history\r\n      this.explanationHistory = [];\r\n      \r\n      this.isInitialized = false;\r\n      \r\n      logger.info('✅ Decision Explainer shutdown completed');\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Error during Decision Explainer shutdown:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\n// Export types\r\nexport type {\r\n  TradingDecisionInput,\r\n  ReasoningStep,\r\n  ConfidenceBreakdown,\r\n  ScenarioAnalysis,\r\n  RiskRewardExplanation,\r\n  ComprehensiveDecisionExplanation,\r\n  ExplanationTemplate\r\n};\r\n"],"mappings":"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","ignoreList":[]}