{"version":3,"names":["cov_1fe1wefs5z","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","events_1","require","logger_1","audit_service_1","threat_detection_engine_1","SecurityEventType","exports","SecurityEventStatus","SecurityMonitoringService","EventEmitter","config","eventHistory","activeIncidents","Map","securityMetrics","monitoringInterval","metricsInterval","dashboardInterval","serviceStartTime","Date","correlationPatterns","constructor","correlationWindow","maxEventHistory","alertThresholds","criticalThreatScore","highThreatScore","mediumThreatScore","eventVelocityThreshold","dashboardRefreshInterval","initializeMetrics","setupEventHandlers","logger","info","startMonitoring","startMonitoringIntervals","initializeThreatDetectionIntegration","performSecurityScan","auditService","createAuditEntry","auditId","now","eventType","actor","resource","action","result","timestamp","auditData","startTime","error","Error","stopMonitoring","stopMonitoringIntervals","uptime","getTime","totalEventsProcessed","length","processSecurityEvent","event","addToEventHistory","correlateSecurityEvent","responseActions","determineResponseActions","executeAutomatedResponse","updateSecurityMetrics","emit","eventId","target","severity","message","originalEvent","getSecurityDashboardData","recentEvents","filter","slice","criticalEvents","e","highEvents","securityStatus","threatVisualization","generateThreatVisualization","systemHealth","generateSystemHealthData","activeThreats","size","metrics","getSecurityMetrics","totalEvents","eventsBySeverity","eventsByType","threatDetectionRate","falsePositiveRate","averageResponseTime","securityScore","monitoringUptime","lastUpdate","on","security","source","classification","handleHighSeverityEvent","handleCriticalEvent","setInterval","updateMetrics","clearInterval","threatDetectionEngine","threat","securityEvent","detectionId","THREAT_DETECTED","details","threatType","confidence","detectionMethod","rawData","threatDetection","status","NEW","warn","handleCriticalThreat","checkSystemHealth","monitorEventVelocity","cleanupOldEvents","updateCorrelationPatterns","push","shift","set","correlationKey","correlatedEvents","get","windowStart","handleCorrelatedEvents","actions","AUTHENTICATION_FAILURE","UNAUTHORIZED_ACCESS","sendSecurityAlert","initiateIncidentResponse","debug","INVESTIGATING","RESPONDING","emergencyEvent","INCIDENT_ESCALATION","originalThreat","escalationReason","events","eventCount","timeSpan","correlationEvent","SUSPICIOUS_ACTIVITY","Math","max","map","pattern","oneMinuteAgo","eventsPerMinute","threshold","cutoffTime","incident","entries","RESOLVED","delete","key","totalThreats","severitySum","reduce","sum","averageSeverity","threatsByType","threatsBySource","threatTimeline","i","bucketTime","bucketStart","bucketEnd","count","monitoringStatus","lastHealthCheck","componentStatus","getStatus","isMonitoring","securityMonitoringService"],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\security-monitoring-service.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * AI CRYPTO TRADING AGENT - CONTINUOUS SECURITY MONITORING SERVICE\r\n * =============================================================================\r\n * \r\n * This service provides 24/7 continuous security monitoring capabilities for\r\n * the AI crypto trading agent. It orchestrates real-time threat detection,\r\n * security event analysis, and automated incident response.\r\n * \r\n * CRITICAL SECURITY NOTICE:\r\n * This service is the central nervous system for security operations.\r\n * It must operate continuously without interruption to protect trading capital\r\n * and system integrity. All security events are monitored, analyzed, and\r\n * responded to in real-time.\r\n * \r\n * Monitoring Capabilities:\r\n * - 24/7 real-time security event monitoring\r\n * - Automated threat detection and analysis\r\n * - Security dashboard with threat visualization\r\n * - Security metrics and KPI tracking\r\n * - Incident correlation and pattern analysis\r\n * - Automated alerting and escalation\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport { EventEmitter } from 'events';\r\nimport { logger } from '@/core/logging/logger';\r\nimport { auditService } from '@/security/audit-service';\r\nimport { threatDetectionEngine, ThreatDetectionEvent, ThreatType } from '@/security/threat-detection-engine';\r\n\r\n/**\r\n * Interface for security monitoring configuration\r\n */\r\nexport interface SecurityMonitoringConfig {\r\n  /** Monitoring interval in milliseconds */\r\n  monitoringInterval: number;\r\n  /** Threat correlation window in milliseconds */\r\n  correlationWindow: number;\r\n  /** Maximum events to store in memory */\r\n  maxEventHistory: number;\r\n  /** Alert thresholds */\r\n  alertThresholds: {\r\n    criticalThreatScore: number;\r\n    highThreatScore: number;\r\n    mediumThreatScore: number;\r\n    eventVelocityThreshold: number;\r\n  };\r\n  /** Dashboard refresh interval */\r\n  dashboardRefreshInterval: number;\r\n  /** Metrics collection interval */\r\n  metricsInterval: number;\r\n}\r\n\r\n/**\r\n * Interface for security event\r\n */\r\nexport interface SecurityEvent {\r\n  /** Unique event identifier */\r\n  eventId: string;\r\n  /** Event type */\r\n  eventType: SecurityEventType;\r\n  /** Event severity (1-10) */\r\n  severity: number;\r\n  /** Event source */\r\n  source: string;\r\n  /** Event target */\r\n  target: string;\r\n  /** Event timestamp */\r\n  timestamp: Date;\r\n  /** Event details */\r\n  details: Record<string, any>;\r\n  /** Related threat detection */\r\n  threatDetection?: ThreatDetectionEvent;\r\n  /** Event status */\r\n  status: SecurityEventStatus;\r\n  /** Response actions taken */\r\n  responseActions: string[];\r\n}\r\n\r\n/**\r\n * Enumeration of security event types\r\n */\r\nexport enum SecurityEventType {\r\n  THREAT_DETECTED = 'threat_detected',\r\n  AUTHENTICATION_FAILURE = 'authentication_failure',\r\n  UNAUTHORIZED_ACCESS = 'unauthorized_access',\r\n  SUSPICIOUS_ACTIVITY = 'suspicious_activity',\r\n  SYSTEM_ANOMALY = 'system_anomaly',\r\n  NETWORK_INTRUSION = 'network_intrusion',\r\n  DATA_ACCESS_VIOLATION = 'data_access_violation',\r\n  CONFIGURATION_CHANGE = 'configuration_change',\r\n  SECURITY_POLICY_VIOLATION = 'security_policy_violation',\r\n  INCIDENT_ESCALATION = 'incident_escalation'\r\n}\r\n\r\n/**\r\n * Enumeration of security event status\r\n */\r\nexport enum SecurityEventStatus {\r\n  NEW = 'new',\r\n  INVESTIGATING = 'investigating',\r\n  RESPONDING = 'responding',\r\n  CONTAINED = 'contained',\r\n  RESOLVED = 'resolved',\r\n  FALSE_POSITIVE = 'false_positive'\r\n}\r\n\r\n/**\r\n * Interface for security metrics\r\n */\r\nexport interface SecurityMetrics {\r\n  /** Total events in monitoring period */\r\n  totalEvents: number;\r\n  /** Events by severity */\r\n  eventsBySeverity: Record<number, number>;\r\n  /** Events by type */\r\n  eventsByType: Record<string, number>;\r\n  /** Threat detection rate */\r\n  threatDetectionRate: number;\r\n  /** False positive rate */\r\n  falsePositiveRate: number;\r\n  /** Average response time */\r\n  averageResponseTime: number;\r\n  /** System security score */\r\n  securityScore: number;\r\n  /** Monitoring uptime */\r\n  monitoringUptime: number;\r\n  /** Last update timestamp */\r\n  lastUpdate: Date;\r\n}\r\n\r\n/**\r\n * Interface for security dashboard data\r\n */\r\nexport interface SecurityDashboardData {\r\n  /** Current security status */\r\n  securityStatus: 'SECURE' | 'WARNING' | 'CRITICAL';\r\n  /** Active threats count */\r\n  activeThreats: number;\r\n  /** Recent events */\r\n  recentEvents: SecurityEvent[];\r\n  /** Security metrics */\r\n  metrics: SecurityMetrics;\r\n  /** Threat visualization data */\r\n  threatVisualization: {\r\n    threatsByType: Record<string, number>;\r\n    threatsBySource: Record<string, number>;\r\n    threatTimeline: Array<{ timestamp: Date; count: number }>;\r\n  };\r\n  /** System health indicators */\r\n  systemHealth: {\r\n    monitoringStatus: 'ACTIVE' | 'DEGRADED' | 'OFFLINE';\r\n    lastHealthCheck: Date;\r\n    componentStatus: Record<string, 'HEALTHY' | 'WARNING' | 'CRITICAL'>;\r\n  };\r\n}\r\n\r\n/**\r\n * Continuous security monitoring service\r\n * Provides 24/7 security monitoring and threat analysis\r\n */\r\nexport class SecurityMonitoringService extends EventEmitter {\r\n  /** Service configuration */\r\n  private config: SecurityMonitoringConfig;\r\n  \r\n  /** Security event history */\r\n  private eventHistory: SecurityEvent[] = [];\r\n  \r\n  /** Active security incidents */\r\n  private activeIncidents: Map<string, SecurityEvent> = new Map();\r\n  \r\n  /** Security metrics */\r\n  private securityMetrics: SecurityMetrics;\r\n  \r\n  /** Monitoring intervals */\r\n  private monitoringInterval: NodeJS.Timeout | null = null;\r\n  private metricsInterval: NodeJS.Timeout | null = null;\r\n  private dashboardInterval: NodeJS.Timeout | null = null;\r\n  \r\n  /** Service start time for uptime calculation */\r\n  private serviceStartTime: Date = new Date();\r\n  \r\n  /** Event correlation patterns */\r\n  private correlationPatterns: Map<string, SecurityEvent[]> = new Map();\r\n\r\n  constructor(config?: Partial<SecurityMonitoringConfig>) {\r\n    super();\r\n    \r\n    // Initialize configuration with defaults\r\n    this.config = {\r\n      monitoringInterval: 5000, // 5 seconds\r\n      correlationWindow: 300000, // 5 minutes\r\n      maxEventHistory: 10000,\r\n      alertThresholds: {\r\n        criticalThreatScore: 9,\r\n        highThreatScore: 7,\r\n        mediumThreatScore: 5,\r\n        eventVelocityThreshold: 100 // events per minute\r\n      },\r\n      dashboardRefreshInterval: 10000, // 10 seconds\r\n      metricsInterval: 60000, // 1 minute\r\n      ...config\r\n    };\r\n    \r\n    // Initialize security metrics\r\n    this.securityMetrics = this.initializeMetrics();\r\n    \r\n    // Set up event handlers\r\n    this.setupEventHandlers();\r\n    \r\n    logger.info('🛡️ Security Monitoring Service initialized');\r\n  }\r\n\r\n  /**\r\n   * Start continuous security monitoring\r\n   * Begins 24/7 security monitoring operations\r\n   * \r\n   * @returns Promise<void>\r\n   */\r\n  public async startMonitoring(): Promise<void> {\r\n    try {\r\n      logger.info('🚀 Starting continuous security monitoring...');\r\n      \r\n      // Start monitoring intervals\r\n      this.startMonitoringIntervals();\r\n      \r\n      // Initialize threat detection integration\r\n      this.initializeThreatDetectionIntegration();\r\n      \r\n      // Perform initial security scan\r\n      await this.performSecurityScan();\r\n      \r\n      // Create audit entry\r\n      await auditService.createAuditEntry({\r\n        auditId: `sec_mon_start_${Date.now()}`,\r\n        eventType: 'SECURITY_MONITORING_START',\r\n        actor: 'SYSTEM',\r\n        resource: 'SECURITY_MONITORING_SERVICE',\r\n        action: 'START_MONITORING',\r\n        result: 'SUCCESS',\r\n        timestamp: new Date(),\r\n        auditData: {\r\n          config: this.config,\r\n          startTime: this.serviceStartTime\r\n        }\r\n      });\r\n      \r\n      logger.info('✅ Continuous security monitoring started successfully');\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to start security monitoring:', error);\r\n      throw new Error('Security monitoring startup failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop continuous security monitoring\r\n   * Gracefully stops all monitoring operations\r\n   * \r\n   * @returns Promise<void>\r\n   */\r\n  public async stopMonitoring(): Promise<void> {\r\n    try {\r\n      logger.info('🛑 Stopping continuous security monitoring...');\r\n      \r\n      // Stop monitoring intervals\r\n      this.stopMonitoringIntervals();\r\n      \r\n      // Create audit entry\r\n      await auditService.createAuditEntry({\r\n        auditId: `sec_mon_stop_${Date.now()}`,\r\n        eventType: 'SECURITY_MONITORING_STOP',\r\n        actor: 'SYSTEM',\r\n        resource: 'SECURITY_MONITORING_SERVICE',\r\n        action: 'STOP_MONITORING',\r\n        result: 'SUCCESS',\r\n        timestamp: new Date(),\r\n        auditData: {\r\n          uptime: Date.now() - this.serviceStartTime.getTime(),\r\n          totalEventsProcessed: this.eventHistory.length\r\n        }\r\n      });\r\n      \r\n      logger.info('✅ Security monitoring stopped successfully');\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to stop security monitoring:', error);\r\n      throw new Error('Security monitoring shutdown failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Process security event\r\n   * Analyzes and responds to security events\r\n   * \r\n   * @param event - Security event to process\r\n   * @returns Promise<void>\r\n   */\r\n  public async processSecurityEvent(event: SecurityEvent): Promise<void> {\r\n    try {\r\n      // Add to event history\r\n      this.addToEventHistory(event);\r\n      \r\n      // Perform event correlation\r\n      await this.correlateSecurityEvent(event);\r\n      \r\n      // Determine response actions\r\n      const responseActions = await this.determineResponseActions(event);\r\n      event.responseActions = responseActions;\r\n      \r\n      // Execute automated responses\r\n      await this.executeAutomatedResponse(event);\r\n      \r\n      // Update security metrics\r\n      this.updateSecurityMetrics(event);\r\n      \r\n      // Emit event for external handlers\r\n      this.emit('securityEvent', event);\r\n      \r\n      // Create audit entry\r\n      await auditService.createAuditEntry({\r\n        auditId: event.eventId,\r\n        eventType: 'SECURITY_EVENT_PROCESSED',\r\n        actor: 'SECURITY_MONITORING_SERVICE',\r\n        resource: event.target,\r\n        action: 'PROCESS_EVENT',\r\n        result: 'SUCCESS',\r\n        timestamp: new Date(),\r\n        auditData: {\r\n          eventType: event.eventType,\r\n          severity: event.severity,\r\n          responseActions: event.responseActions\r\n        }\r\n      });\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to process security event:', error);\r\n      \r\n      // Create error audit entry\r\n      await auditService.createAuditEntry({\r\n        auditId: `error_${event.eventId}`,\r\n        eventType: 'SECURITY_EVENT_PROCESSING_ERROR',\r\n        actor: 'SECURITY_MONITORING_SERVICE',\r\n        resource: event.target,\r\n        action: 'PROCESS_EVENT',\r\n        result: 'FAILURE',\r\n        timestamp: new Date(),\r\n        auditData: { error: error.message, originalEvent: event }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get security dashboard data\r\n   * Returns comprehensive security status for dashboard\r\n   * \r\n   * @returns SecurityDashboardData Current security dashboard data\r\n   */\r\n  public getSecurityDashboardData(): SecurityDashboardData {\r\n    const now = new Date();\r\n    const recentEvents = this.eventHistory\r\n      .filter(event => now.getTime() - event.timestamp.getTime() < 3600000) // Last hour\r\n      .slice(-50); // Last 50 events\r\n    \r\n    // Calculate security status\r\n    const criticalEvents = recentEvents.filter(e => e.severity >= this.config.alertThresholds.criticalThreatScore);\r\n    const highEvents = recentEvents.filter(e => e.severity >= this.config.alertThresholds.highThreatScore);\r\n    \r\n    let securityStatus: 'SECURE' | 'WARNING' | 'CRITICAL' = 'SECURE';\r\n    if (criticalEvents.length > 0) {\r\n      securityStatus = 'CRITICAL';\r\n    } else if (highEvents.length > 0) {\r\n      securityStatus = 'WARNING';\r\n    }\r\n    \r\n    // Generate threat visualization data\r\n    const threatVisualization = this.generateThreatVisualization(recentEvents);\r\n    \r\n    // Generate system health data\r\n    const systemHealth = this.generateSystemHealthData();\r\n    \r\n    return {\r\n      securityStatus,\r\n      activeThreats: this.activeIncidents.size,\r\n      recentEvents,\r\n      metrics: this.securityMetrics,\r\n      threatVisualization,\r\n      systemHealth\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get security metrics\r\n   * Returns current security metrics and KPIs\r\n   * \r\n   * @returns SecurityMetrics Current security metrics\r\n   */\r\n  public getSecurityMetrics(): SecurityMetrics {\r\n    return { ...this.securityMetrics };\r\n  }\r\n\r\n  /**\r\n   * Initialize security metrics\r\n   * Sets up initial metrics structure\r\n   * \r\n   * @returns SecurityMetrics Initial metrics\r\n   */\r\n  private initializeMetrics(): SecurityMetrics {\r\n    return {\r\n      totalEvents: 0,\r\n      eventsBySeverity: {},\r\n      eventsByType: {},\r\n      threatDetectionRate: 0,\r\n      falsePositiveRate: 0,\r\n      averageResponseTime: 0,\r\n      securityScore: 100,\r\n      monitoringUptime: 0,\r\n      lastUpdate: new Date()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Set up event handlers\r\n   * Configures event handling for security monitoring\r\n   */\r\n  private setupEventHandlers(): void {\r\n    // Handle threat detection events\r\n    this.on('securityEvent', async (event: SecurityEvent) => {\r\n      try {\r\n        // Log security event\r\n        logger.security('SECURITY_EVENT', 'Security event processed', {\r\n          eventId: event.eventId,\r\n          eventType: event.eventType,\r\n          severity: event.severity,\r\n          source: event.source,\r\n          classification: 'RESTRICTED'\r\n        });\r\n        \r\n        // Handle high-severity events\r\n        if (event.severity >= this.config.alertThresholds.highThreatScore) {\r\n          await this.handleHighSeverityEvent(event);\r\n        }\r\n        \r\n        // Handle critical events\r\n        if (event.severity >= this.config.alertThresholds.criticalThreatScore) {\r\n          await this.handleCriticalEvent(event);\r\n        }\r\n        \r\n      } catch (error) {\r\n        logger.error('❌ Error handling security event:', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Start monitoring intervals\r\n   * Begins periodic monitoring tasks\r\n   */\r\n  private startMonitoringIntervals(): void {\r\n    // Main monitoring interval\r\n    this.monitoringInterval = setInterval(async () => {\r\n      try {\r\n        await this.performSecurityScan();\r\n      } catch (error) {\r\n        logger.error('❌ Security scan error:', error);\r\n      }\r\n    }, this.config.monitoringInterval);\r\n    \r\n    // Metrics collection interval\r\n    this.metricsInterval = setInterval(() => {\r\n      try {\r\n        this.updateMetrics();\r\n      } catch (error) {\r\n        logger.error('❌ Metrics update error:', error);\r\n      }\r\n    }, this.config.metricsInterval);\r\n    \r\n    // Dashboard refresh interval\r\n    this.dashboardInterval = setInterval(() => {\r\n      try {\r\n        this.emit('dashboardUpdate', this.getSecurityDashboardData());\r\n      } catch (error) {\r\n        logger.error('❌ Dashboard update error:', error);\r\n      }\r\n    }, this.config.dashboardRefreshInterval);\r\n  }\r\n\r\n  /**\r\n   * Stop monitoring intervals\r\n   * Stops all periodic monitoring tasks\r\n   */\r\n  private stopMonitoringIntervals(): void {\r\n    if (this.monitoringInterval) {\r\n      clearInterval(this.monitoringInterval);\r\n      this.monitoringInterval = null;\r\n    }\r\n    \r\n    if (this.metricsInterval) {\r\n      clearInterval(this.metricsInterval);\r\n      this.metricsInterval = null;\r\n    }\r\n    \r\n    if (this.dashboardInterval) {\r\n      clearInterval(this.dashboardInterval);\r\n      this.dashboardInterval = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialize threat detection integration\r\n   * Sets up integration with threat detection engine\r\n   */\r\n  private initializeThreatDetectionIntegration(): void {\r\n    // Listen for threat detection events\r\n    threatDetectionEngine.on('threatDetected', async (threat: ThreatDetectionEvent) => {\r\n      const securityEvent: SecurityEvent = {\r\n        eventId: threat.detectionId,\r\n        eventType: SecurityEventType.THREAT_DETECTED,\r\n        severity: threat.severity,\r\n        source: threat.source,\r\n        target: threat.target,\r\n        timestamp: threat.timestamp,\r\n        details: {\r\n          threatType: threat.threatType,\r\n          confidence: threat.confidence,\r\n          detectionMethod: threat.detectionMethod,\r\n          rawData: threat.rawData\r\n        },\r\n        threatDetection: threat,\r\n        status: SecurityEventStatus.NEW,\r\n        responseActions: []\r\n      };\r\n      \r\n      await this.processSecurityEvent(securityEvent);\r\n    });\r\n    \r\n    // Listen for high-severity threats\r\n    threatDetectionEngine.on('highSeverityThreat', async (threat: ThreatDetectionEvent) => {\r\n      logger.warn('🚨 HIGH SEVERITY THREAT DETECTED', {\r\n        detectionId: threat.detectionId,\r\n        threatType: threat.threatType,\r\n        severity: threat.severity,\r\n        source: threat.source\r\n      });\r\n      \r\n      // Trigger immediate response\r\n      await this.handleCriticalThreat(threat);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Perform security scan\r\n   * Conducts comprehensive security monitoring scan\r\n   * \r\n   * @returns Promise<void>\r\n   */\r\n  private async performSecurityScan(): Promise<void> {\r\n    try {\r\n      // Check system health\r\n      await this.checkSystemHealth();\r\n      \r\n      // Monitor event velocity\r\n      this.monitorEventVelocity();\r\n      \r\n      // Clean up old events\r\n      this.cleanupOldEvents();\r\n      \r\n      // Update correlation patterns\r\n      this.updateCorrelationPatterns();\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Security scan failed:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add event to history\r\n   * Adds security event to monitoring history\r\n   * \r\n   * @param event - Security event to add\r\n   */\r\n  private addToEventHistory(event: SecurityEvent): void {\r\n    this.eventHistory.push(event);\r\n    \r\n    // Maintain history size limit\r\n    if (this.eventHistory.length > this.config.maxEventHistory) {\r\n      this.eventHistory.shift();\r\n    }\r\n    \r\n    // Add to active incidents if high severity\r\n    if (event.severity >= this.config.alertThresholds.highThreatScore) {\r\n      this.activeIncidents.set(event.eventId, event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Correlate security event\r\n   * Analyzes event for correlation with other events\r\n   * \r\n   * @param event - Security event to correlate\r\n   * @returns Promise<void>\r\n   */\r\n  private async correlateSecurityEvent(event: SecurityEvent): Promise<void> {\r\n    try {\r\n      const correlationKey = `${event.source}_${event.eventType}`;\r\n      const correlatedEvents = this.correlationPatterns.get(correlationKey) || [];\r\n      \r\n      // Add current event to correlation\r\n      correlatedEvents.push(event);\r\n      \r\n      // Keep only events within correlation window\r\n      const windowStart = Date.now() - this.config.correlationWindow;\r\n      const recentEvents = correlatedEvents.filter(\r\n        e => e.timestamp.getTime() > windowStart\r\n      );\r\n      \r\n      this.correlationPatterns.set(correlationKey, recentEvents);\r\n      \r\n      // Check for correlation patterns\r\n      if (recentEvents.length >= 3) {\r\n        await this.handleCorrelatedEvents(correlationKey, recentEvents);\r\n      }\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Event correlation failed:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Determine response actions\r\n   * Determines appropriate response actions for security event\r\n   * \r\n   * @param event - Security event\r\n   * @returns Promise<string[]> Response actions\r\n   */\r\n  private async determineResponseActions(event: SecurityEvent): Promise<string[]> {\r\n    const actions: string[] = [];\r\n    \r\n    // Actions based on event type\r\n    switch (event.eventType) {\r\n      case SecurityEventType.THREAT_DETECTED:\r\n        actions.push('Log threat details');\r\n        if (event.severity >= 7) {\r\n          actions.push('Alert security team');\r\n        }\r\n        if (event.severity >= 9) {\r\n          actions.push('Initiate incident response');\r\n        }\r\n        break;\r\n      \r\n      case SecurityEventType.AUTHENTICATION_FAILURE:\r\n        actions.push('Monitor source IP');\r\n        if (event.severity >= 5) {\r\n          actions.push('Implement rate limiting');\r\n        }\r\n        break;\r\n      \r\n      case SecurityEventType.UNAUTHORIZED_ACCESS:\r\n        actions.push('Block access attempt');\r\n        actions.push('Alert security team');\r\n        break;\r\n      \r\n      default:\r\n        actions.push('Monitor and log');\r\n    }\r\n    \r\n    return actions;\r\n  }\r\n\r\n  /**\r\n   * Execute automated response\r\n   * Executes automated response actions for security event\r\n   * \r\n   * @param event - Security event\r\n   * @returns Promise<void>\r\n   */\r\n  private async executeAutomatedResponse(event: SecurityEvent): Promise<void> {\r\n    try {\r\n      for (const action of event.responseActions) {\r\n        switch (action) {\r\n          case 'Log threat details':\r\n            logger.security('THREAT_DETAILS', 'Detailed threat information', {\r\n              eventId: event.eventId,\r\n              details: event.details,\r\n              classification: 'RESTRICTED'\r\n            });\r\n            break;\r\n          \r\n          case 'Alert security team':\r\n            await this.sendSecurityAlert(event);\r\n            break;\r\n          \r\n          case 'Initiate incident response':\r\n            await this.initiateIncidentResponse(event);\r\n            break;\r\n          \r\n          case 'Monitor source IP':\r\n            // Implementation would add IP to monitoring list\r\n            logger.info(`🔍 Monitoring IP: ${event.source}`);\r\n            break;\r\n          \r\n          case 'Block access attempt':\r\n            // Implementation would block access\r\n            logger.warn(`🚫 Blocking access from: ${event.source}`);\r\n            break;\r\n          \r\n          default:\r\n            logger.debug(`📝 Response action: ${action}`);\r\n        }\r\n      }\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Automated response execution failed:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update security metrics\r\n   * Updates security metrics based on processed event\r\n   * \r\n   * @param event - Processed security event\r\n   */\r\n  private updateSecurityMetrics(event: SecurityEvent): void {\r\n    this.securityMetrics.totalEvents++;\r\n    \r\n    // Update events by severity\r\n    this.securityMetrics.eventsBySeverity[event.severity] = \r\n      (this.securityMetrics.eventsBySeverity[event.severity] || 0) + 1;\r\n    \r\n    // Update events by type\r\n    this.securityMetrics.eventsByType[event.eventType] = \r\n      (this.securityMetrics.eventsByType[event.eventType] || 0) + 1;\r\n    \r\n    // Update last update timestamp\r\n    this.securityMetrics.lastUpdate = new Date();\r\n  }\r\n\r\n  /**\r\n   * Handle high-severity event\r\n   * Processes high-severity security events\r\n   * \r\n   * @param event - High-severity security event\r\n   * @returns Promise<void>\r\n   */\r\n  private async handleHighSeverityEvent(event: SecurityEvent): Promise<void> {\r\n    logger.warn('⚠️ HIGH SEVERITY SECURITY EVENT', {\r\n      eventId: event.eventId,\r\n      eventType: event.eventType,\r\n      severity: event.severity,\r\n      source: event.source\r\n    });\r\n    \r\n    // Send immediate alert\r\n    await this.sendSecurityAlert(event);\r\n    \r\n    // Update event status\r\n    event.status = SecurityEventStatus.INVESTIGATING;\r\n  }\r\n\r\n  /**\r\n   * Handle critical event\r\n   * Processes critical security events\r\n   * \r\n   * @param event - Critical security event\r\n   * @returns Promise<void>\r\n   */\r\n  private async handleCriticalEvent(event: SecurityEvent): Promise<void> {\r\n    logger.error('🚨 CRITICAL SECURITY EVENT', {\r\n      eventId: event.eventId,\r\n      eventType: event.eventType,\r\n      severity: event.severity,\r\n      source: event.source\r\n    });\r\n    \r\n    // Initiate incident response\r\n    await this.initiateIncidentResponse(event);\r\n    \r\n    // Update event status\r\n    event.status = SecurityEventStatus.RESPONDING;\r\n  }\r\n\r\n  /**\r\n   * Handle critical threat\r\n   * Processes critical threat detection events\r\n   * \r\n   * @param threat - Critical threat detection event\r\n   * @returns Promise<void>\r\n   */\r\n  private async handleCriticalThreat(threat: ThreatDetectionEvent): Promise<void> {\r\n    // Create emergency security event\r\n    const emergencyEvent: SecurityEvent = {\r\n      eventId: `emergency_${threat.detectionId}`,\r\n      eventType: SecurityEventType.INCIDENT_ESCALATION,\r\n      severity: 10,\r\n      source: threat.source,\r\n      target: threat.target,\r\n      timestamp: new Date(),\r\n      details: {\r\n        originalThreat: threat,\r\n        escalationReason: 'Critical threat severity'\r\n      },\r\n      threatDetection: threat,\r\n      status: SecurityEventStatus.NEW,\r\n      responseActions: ['Initiate emergency response', 'Alert all stakeholders']\r\n    };\r\n    \r\n    await this.processSecurityEvent(emergencyEvent);\r\n  }\r\n\r\n  /**\r\n   * Handle correlated events\r\n   * Processes correlated security events\r\n   * \r\n   * @param correlationKey - Correlation key\r\n   * @param events - Correlated events\r\n   * @returns Promise<void>\r\n   */\r\n  private async handleCorrelatedEvents(correlationKey: string, events: SecurityEvent[]): Promise<void> {\r\n    logger.warn('🔗 CORRELATED SECURITY EVENTS DETECTED', {\r\n      correlationKey,\r\n      eventCount: events.length,\r\n      timeSpan: events[events.length - 1].timestamp.getTime() - events[0].timestamp.getTime()\r\n    });\r\n    \r\n    // Create correlation event\r\n    const correlationEvent: SecurityEvent = {\r\n      eventId: `correlation_${Date.now()}`,\r\n      eventType: SecurityEventType.SUSPICIOUS_ACTIVITY,\r\n      severity: Math.max(...events.map(e => e.severity)) + 1,\r\n      source: correlationKey,\r\n      target: 'SYSTEM',\r\n      timestamp: new Date(),\r\n      details: {\r\n        correlatedEvents: events.map(e => e.eventId),\r\n        pattern: correlationKey,\r\n        eventCount: events.length\r\n      },\r\n      status: SecurityEventStatus.NEW,\r\n      responseActions: ['Investigate correlation pattern', 'Monitor for additional events']\r\n    };\r\n    \r\n    await this.processSecurityEvent(correlationEvent);\r\n  }\r\n\r\n  /**\r\n   * Send security alert\r\n   * Sends security alert notification\r\n   * \r\n   * @param event - Security event to alert about\r\n   * @returns Promise<void>\r\n   */\r\n  private async sendSecurityAlert(event: SecurityEvent): Promise<void> {\r\n    // Implementation would send actual alerts (email, Telegram, etc.)\r\n    logger.info('📧 Security alert sent', {\r\n      eventId: event.eventId,\r\n      severity: event.severity,\r\n      eventType: event.eventType\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Initiate incident response\r\n   * Starts incident response procedures\r\n   * \r\n   * @param event - Security event triggering incident response\r\n   * @returns Promise<void>\r\n   */\r\n  private async initiateIncidentResponse(event: SecurityEvent): Promise<void> {\r\n    logger.error('🚨 INCIDENT RESPONSE INITIATED', {\r\n      eventId: event.eventId,\r\n      severity: event.severity,\r\n      eventType: event.eventType\r\n    });\r\n    \r\n    // Implementation would trigger incident response procedures\r\n    // This would integrate with the incident response system\r\n  }\r\n\r\n  /**\r\n   * Check system health\r\n   * Monitors system health indicators\r\n   * \r\n   * @returns Promise<void>\r\n   */\r\n  private async checkSystemHealth(): Promise<void> {\r\n    // Implementation would check various system health indicators\r\n    // CPU usage, memory usage, disk space, network connectivity, etc.\r\n  }\r\n\r\n  /**\r\n   * Monitor event velocity\r\n   * Monitors the rate of security events\r\n   */\r\n  private monitorEventVelocity(): void {\r\n    const oneMinuteAgo = Date.now() - 60000;\r\n    const recentEvents = this.eventHistory.filter(\r\n      event => event.timestamp.getTime() > oneMinuteAgo\r\n    );\r\n    \r\n    if (recentEvents.length > this.config.alertThresholds.eventVelocityThreshold) {\r\n      logger.warn('⚡ HIGH EVENT VELOCITY DETECTED', {\r\n        eventsPerMinute: recentEvents.length,\r\n        threshold: this.config.alertThresholds.eventVelocityThreshold\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clean up old events\r\n   * Removes old events from memory\r\n   */\r\n  private cleanupOldEvents(): void {\r\n    const cutoffTime = Date.now() - (24 * 60 * 60 * 1000); // 24 hours\r\n    \r\n    // Clean up event history\r\n    this.eventHistory = this.eventHistory.filter(\r\n      event => event.timestamp.getTime() > cutoffTime\r\n    );\r\n    \r\n    // Clean up active incidents (resolved or old)\r\n    for (const [eventId, incident] of this.activeIncidents.entries()) {\r\n      if (incident.status === SecurityEventStatus.RESOLVED || \r\n          incident.timestamp.getTime() < cutoffTime) {\r\n        this.activeIncidents.delete(eventId);\r\n      }\r\n    }\r\n    \r\n    // Clean up correlation patterns\r\n    for (const [key, events] of this.correlationPatterns.entries()) {\r\n      const recentEvents = events.filter(\r\n        event => event.timestamp.getTime() > cutoffTime\r\n      );\r\n      \r\n      if (recentEvents.length === 0) {\r\n        this.correlationPatterns.delete(key);\r\n      } else {\r\n        this.correlationPatterns.set(key, recentEvents);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update correlation patterns\r\n   * Updates event correlation patterns\r\n   */\r\n  private updateCorrelationPatterns(): void {\r\n    // Implementation would analyze patterns and update correlation rules\r\n    // This could use machine learning for pattern recognition\r\n  }\r\n\r\n  /**\r\n   * Update metrics\r\n   * Updates security metrics and KPIs\r\n   */\r\n  private updateMetrics(): void {\r\n    // Calculate monitoring uptime\r\n    this.securityMetrics.monitoringUptime = \r\n      (Date.now() - this.serviceStartTime.getTime()) / 1000;\r\n    \r\n    // Calculate threat detection rate\r\n    const totalThreats = this.eventHistory.filter(\r\n      event => event.eventType === SecurityEventType.THREAT_DETECTED\r\n    ).length;\r\n    \r\n    this.securityMetrics.threatDetectionRate = \r\n      this.securityMetrics.totalEvents > 0 ? \r\n      (totalThreats / this.securityMetrics.totalEvents) * 100 : 0;\r\n    \r\n    // Calculate security score based on recent events\r\n    const recentEvents = this.eventHistory.filter(\r\n      event => Date.now() - event.timestamp.getTime() < 3600000 // Last hour\r\n    );\r\n    \r\n    const severitySum = recentEvents.reduce((sum, event) => sum + event.severity, 0);\r\n    const averageSeverity = recentEvents.length > 0 ? severitySum / recentEvents.length : 0;\r\n    \r\n    this.securityMetrics.securityScore = Math.max(0, 100 - (averageSeverity * 10));\r\n    \r\n    // Update timestamp\r\n    this.securityMetrics.lastUpdate = new Date();\r\n  }\r\n\r\n  /**\r\n   * Generate threat visualization data\r\n   * Creates data for threat visualization dashboard\r\n   * \r\n   * @param events - Security events to visualize\r\n   * @returns Threat visualization data\r\n   */\r\n  private generateThreatVisualization(events: SecurityEvent[]): {\r\n    threatsByType: Record<string, number>;\r\n    threatsBySource: Record<string, number>;\r\n    threatTimeline: Array<{ timestamp: Date; count: number }>;\r\n  } {\r\n    const threatsByType: Record<string, number> = {};\r\n    const threatsBySource: Record<string, number> = {};\r\n    const threatTimeline: Array<{ timestamp: Date; count: number }> = [];\r\n    \r\n    // Count threats by type\r\n    for (const event of events) {\r\n      threatsByType[event.eventType] = (threatsByType[event.eventType] || 0) + 1;\r\n      threatsBySource[event.source] = (threatsBySource[event.source] || 0) + 1;\r\n    }\r\n    \r\n    // Generate timeline (hourly buckets for last 24 hours)\r\n    const now = new Date();\r\n    for (let i = 23; i >= 0; i--) {\r\n      const bucketTime = new Date(now.getTime() - (i * 60 * 60 * 1000));\r\n      const bucketStart = bucketTime.getTime();\r\n      const bucketEnd = bucketStart + (60 * 60 * 1000);\r\n      \r\n      const count = events.filter(\r\n        event => event.timestamp.getTime() >= bucketStart && \r\n                event.timestamp.getTime() < bucketEnd\r\n      ).length;\r\n      \r\n      threatTimeline.push({ timestamp: bucketTime, count });\r\n    }\r\n    \r\n    return { threatsByType, threatsBySource, threatTimeline };\r\n  }\r\n\r\n  /**\r\n   * Generate system health data\r\n   * Creates system health indicators for dashboard\r\n   * \r\n   * @returns System health data\r\n   */\r\n  private generateSystemHealthData(): {\r\n    monitoringStatus: 'ACTIVE' | 'DEGRADED' | 'OFFLINE';\r\n    lastHealthCheck: Date;\r\n    componentStatus: Record<string, 'HEALTHY' | 'WARNING' | 'CRITICAL'>;\r\n  } {\r\n    return {\r\n      monitoringStatus: this.monitoringInterval ? 'ACTIVE' : 'OFFLINE',\r\n      lastHealthCheck: new Date(),\r\n      componentStatus: {\r\n        'Threat Detection': 'HEALTHY',\r\n        'Event Processing': 'HEALTHY',\r\n        'Audit Logging': 'HEALTHY',\r\n        'Alert System': 'HEALTHY'\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get service status\r\n   * Returns current service status for monitoring\r\n   * \r\n   * @returns Service status information\r\n   */\r\n  public getStatus(): {\r\n    isMonitoring: boolean;\r\n    eventHistory: number;\r\n    activeIncidents: number;\r\n    correlationPatterns: number;\r\n    uptime: number;\r\n    timestamp: number;\r\n  } {\r\n    return {\r\n      isMonitoring: this.monitoringInterval !== null,\r\n      eventHistory: this.eventHistory.length,\r\n      activeIncidents: this.activeIncidents.size,\r\n      correlationPatterns: this.correlationPatterns.size,\r\n      uptime: Date.now() - this.serviceStartTime.getTime(),\r\n      timestamp: Date.now()\r\n    };\r\n  }\r\n}\r\n\r\n// Create and export singleton instance\r\nexport const securityMonitoringService = new SecurityMonitoringService();\r\n\r\n// =============================================================================\r\n// SECURITY MONITORING NOTES\r\n// =============================================================================\r\n// 1. 24/7 continuous monitoring of all security events and threats\r\n// 2. Real-time threat detection and automated response capabilities\r\n// 3. Event correlation and pattern analysis for advanced threat detection\r\n// 4. Comprehensive security metrics and KPI tracking\r\n// 5. Security dashboard with real-time threat visualization\r\n// 6. Automated incident response and escalation procedures\r\n// 7. Integration with threat detection engine and audit service\r\n// 8. Configurable alert thresholds and response actions\r\n// ============================================================================="],"mappings":"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","ignoreList":[]}