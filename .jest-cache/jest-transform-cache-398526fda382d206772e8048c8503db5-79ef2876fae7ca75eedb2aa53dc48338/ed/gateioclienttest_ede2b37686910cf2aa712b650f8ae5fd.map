{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\api\\__tests__\\gate-io-client.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\api\\__tests__\\gate-io-client.test.ts"],"sourcesContent":["/**\r\n * Unit Tests for Gate.io API Client\r\n * \r\n * Comprehensive test suite covering API client functionality,\r\n * authentication, rate limiting, circuit breaker, and error handling.\r\n * \r\n * Requirements: 17.1, 17.3, 17.6 - Unit tests for API integration and error handling\r\n */\r\n\r\nimport { GateIOClient, RequestType, CircuitBreakerState } from '../gate-io-client';\r\nimport axios from 'axios';\r\nimport { CredentialManager } from '@/security/credential-manager';\r\nimport { AuditService } from '@/security/audit-service';\r\n\r\n// Mock external dependencies\r\njest.mock('axios');\r\njest.mock('@/security/credential-manager');\r\njest.mock('@/security/audit-service');\r\njest.mock('@/core/logging/logger', () => ({\r\n  logger: {\r\n    info: jest.fn(),\r\n    debug: jest.fn(),\r\n    warn: jest.fn(),\r\n    error: jest.fn()\r\n  }\r\n}));\r\n\r\nconst mockedAxios = axios as jest.Mocked<typeof axios>;\r\nconst MockedCredentialManager = CredentialManager as jest.MockedClass<typeof CredentialManager>;\r\nconst MockedAuditService = AuditService as jest.MockedClass<typeof AuditService>;\r\n\r\ndescribe('GateIOClient', () => {\r\n  let client: GateIOClient;\r\n  let mockAxiosInstance: any;\r\n  let mockCredentialManager: jest.Mocked<CredentialManager>;\r\n  let mockAuditService: jest.Mocked<AuditService>;\r\n\r\n  beforeEach(() => {\r\n    // Reset all mocks\r\n    jest.clearAllMocks();\r\n\r\n    // Mock axios instance\r\n    mockAxiosInstance = {\r\n      request: jest.fn(),\r\n      defaults: { proxy: {} },\r\n      interceptors: {\r\n        request: { use: jest.fn() },\r\n        response: { use: jest.fn() }\r\n      }\r\n    };\r\n    mockedAxios.create.mockReturnValue(mockAxiosInstance);\r\n\r\n    // Mock credential manager\r\n    mockCredentialManager = {\r\n      decryptCredential: jest.fn().mockResolvedValue('decrypted-credential')\r\n    } as any;\r\n    MockedCredentialManager.mockImplementation(() => mockCredentialManager);\r\n\r\n    // Mock audit service\r\n    mockAuditService = {\r\n      logSecurityEvent: jest.fn().mockResolvedValue(undefined),\r\n      logAPIRequest: jest.fn().mockResolvedValue(undefined),\r\n      logAPIResponse: jest.fn().mockResolvedValue(undefined)\r\n    } as any;\r\n    MockedAuditService.mockImplementation(() => mockAuditService);\r\n\r\n    // Set up test environment variables\r\n    process.env.GATE_IO_API_KEY = 'encrypted-api-key';\r\n    process.env.GATE_IO_SECRET_KEY = 'encrypted-secret-key';\r\n    process.env.GATE_IO_PASSPHRASE = 'encrypted-passphrase';\r\n\r\n    client = new GateIOClient();\r\n  });\r\n\r\n  afterEach(() => {\r\n    // Clean up environment variables\r\n    delete process.env.GATE_IO_API_KEY;\r\n    delete process.env.GATE_IO_SECRET_KEY;\r\n    delete process.env.GATE_IO_PASSPHRASE;\r\n  });\r\n\r\n  describe('Constructor', () => {\r\n    it('should initialize with default configuration', () => {\r\n      expect(client).toBeInstanceOf(GateIOClient);\r\n      expect(mockedAxios.create).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          baseURL: 'https://api.gateio.ws/api/v4',\r\n          timeout: 30000,\r\n          headers: expect.objectContaining({\r\n            'Content-Type': 'application/json',\r\n            'User-Agent': 'AI-Crypto-Trading-Agent/1.0.0'\r\n          })\r\n        })\r\n      );\r\n    });\r\n\r\n    it('should set up request and response interceptors', () => {\r\n      expect(mockAxiosInstance.interceptors.request.use).toHaveBeenCalled();\r\n      expect(mockAxiosInstance.interceptors.response.use).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should initialize credential manager and audit service', () => {\r\n      expect(MockedCredentialManager).toHaveBeenCalled();\r\n      expect(MockedAuditService).toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('initialize', () => {\r\n    it('should initialize successfully with valid credentials', async () => {\r\n      // Mock successful health check\r\n      mockAxiosInstance.request.mockResolvedValueOnce({\r\n        data: { server_time: Date.now() }\r\n      });\r\n      mockAxiosInstance.request.mockResolvedValueOnce({\r\n        data: [{ currency: 'USDT', available: '1000' }]\r\n      });\r\n\r\n      const result = await client.initialize('localhost', 8080);\r\n\r\n      expect(result).toBe(true);\r\n      expect(mockCredentialManager.decryptCredential).toHaveBeenCalledTimes(3);\r\n      expect(mockAuditService.logSecurityEvent).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          type: 'API_CLIENT_INITIALIZED',\r\n          severity: 'INFO'\r\n        })\r\n      );\r\n    });\r\n\r\n    it('should fail initialization when credentials are missing', async () => {\r\n      delete process.env.GATE_IO_API_KEY;\r\n\r\n      const result = await client.initialize();\r\n\r\n      expect(result).toBe(false);\r\n      expect(mockAuditService.logSecurityEvent).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          type: 'API_CLIENT_INIT_FAILED',\r\n          severity: 'ERROR'\r\n        })\r\n      );\r\n    });\r\n\r\n    it('should configure proxy settings correctly', async () => {\r\n      // Mock successful health check\r\n      mockAxiosInstance.request.mockResolvedValue({ data: {} });\r\n\r\n      await client.initialize('proxy-host', 9090);\r\n\r\n      expect(mockAxiosInstance.defaults.proxy).toEqual({\r\n        host: 'proxy-host',\r\n        port: 9090,\r\n        protocol: 'http'\r\n      });\r\n    });\r\n\r\n    it('should fail initialization when health check fails', async () => {\r\n      // Mock failed health check\r\n      mockAxiosInstance.request.mockRejectedValue(new Error('Network error'));\r\n\r\n      const result = await client.initialize();\r\n\r\n      expect(result).toBe(false);\r\n    });\r\n  });\r\n\r\n  describe('makeRequest', () => {\r\n    beforeEach(async () => {\r\n      // Initialize client for request tests\r\n      mockAxiosInstance.request.mockResolvedValue({ data: {} });\r\n      await client.initialize();\r\n      jest.clearAllMocks();\r\n    });\r\n\r\n    it('should make successful API request', async () => {\r\n      const mockResponse = { data: { result: 'success' } };\r\n      mockAxiosInstance.request.mockResolvedValue(mockResponse);\r\n\r\n      const result = await client.makeRequest({\r\n        method: 'GET',\r\n        url: '/test',\r\n        requestType: RequestType.PUBLIC\r\n      });\r\n\r\n      expect(result).toEqual({ result: 'success' });\r\n      expect(mockAxiosInstance.request).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          method: 'GET',\r\n          url: '/test',\r\n          requestType: RequestType.PUBLIC\r\n        })\r\n      );\r\n    });\r\n\r\n    it('should handle rate limiting correctly', async () => {\r\n      // Mock rate limiter rejection then success\r\n      const rateLimitError = { msBeforeNext: 1000 };\r\n      mockAxiosInstance.request\r\n        .mockRejectedValueOnce(rateLimitError)\r\n        .mockResolvedValueOnce({ data: { result: 'success' } });\r\n\r\n      // Mock setTimeout to resolve immediately for testing\r\n      jest.spyOn(global, 'setTimeout').mockImplementation((callback: any) => {\r\n        callback();\r\n        return {} as any;\r\n      });\r\n\r\n      const result = await client.makeRequest({\r\n        method: 'GET',\r\n        url: '/test',\r\n        requestType: RequestType.ORDERS\r\n      });\r\n\r\n      expect(result).toEqual({ result: 'success' });\r\n      expect(setTimeout).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should implement retry logic for transient errors', async () => {\r\n      const networkError = new Error('Network error');\r\n      mockAxiosInstance.request\r\n        .mockRejectedValueOnce(networkError)\r\n        .mockRejectedValueOnce(networkError)\r\n        .mockResolvedValueOnce({ data: { result: 'success' } });\r\n\r\n      // Mock setTimeout for retry delays\r\n      jest.spyOn(global, 'setTimeout').mockImplementation((callback: any) => {\r\n        callback();\r\n        return {} as any;\r\n      });\r\n\r\n      const result = await client.makeRequest({\r\n        method: 'GET',\r\n        url: '/test'\r\n      });\r\n\r\n      expect(result).toEqual({ result: 'success' });\r\n      expect(mockAxiosInstance.request).toHaveBeenCalledTimes(3);\r\n    });\r\n\r\n    it('should fail after maximum retries', async () => {\r\n      const networkError = new Error('Persistent network error');\r\n      mockAxiosInstance.request.mockRejectedValue(networkError);\r\n\r\n      // Mock setTimeout for retry delays\r\n      jest.spyOn(global, 'setTimeout').mockImplementation((callback: any) => {\r\n        callback();\r\n        return {} as any;\r\n      });\r\n\r\n      await expect(client.makeRequest({\r\n        method: 'GET',\r\n        url: '/test'\r\n      })).rejects.toThrow('Persistent network error');\r\n\r\n      expect(mockAxiosInstance.request).toHaveBeenCalledTimes(4); // Initial + 3 retries\r\n    });\r\n\r\n    it('should not retry on client errors (4xx)', async () => {\r\n      const clientError = {\r\n        response: { status: 400 },\r\n        message: 'Bad request'\r\n      };\r\n      mockAxiosInstance.request.mockRejectedValue(clientError);\r\n\r\n      await expect(client.makeRequest({\r\n        method: 'GET',\r\n        url: '/test'\r\n      })).rejects.toMatchObject({ message: 'Bad request' });\r\n\r\n      expect(mockAxiosInstance.request).toHaveBeenCalledTimes(1); // No retries\r\n    });\r\n\r\n    it('should respect circuit breaker when open', async () => {\r\n      // Force circuit breaker to open by simulating failures\r\n      const serverError = { response: { status: 500 }, message: 'Server error' };\r\n      \r\n      // Simulate multiple failures to open circuit breaker\r\n      for (let i = 0; i < 5; i++) {\r\n        mockAxiosInstance.request.mockRejectedValueOnce(serverError);\r\n        try {\r\n          await client.makeRequest({ method: 'GET', url: '/test' });\r\n        } catch (error) {\r\n          // Expected to fail\r\n        }\r\n      }\r\n\r\n      // Now circuit breaker should be open\r\n      await expect(client.makeRequest({\r\n        method: 'GET',\r\n        url: '/test'\r\n      })).rejects.toThrow('Circuit breaker is open');\r\n    });\r\n  });\r\n\r\n  describe('Authentication', () => {\r\n    beforeEach(async () => {\r\n      mockAxiosInstance.request.mockResolvedValue({ data: {} });\r\n      await client.initialize();\r\n    });\r\n\r\n    it('should create correct HMAC signature', async () => {\r\n      // Mock the request interceptor to capture the signature\r\n      let capturedConfig: any;\r\n      mockAxiosInstance.interceptors.request.use.mockImplementation((interceptor) => {\r\n        // Store the interceptor for manual execution\r\n        capturedConfig = interceptor;\r\n      });\r\n\r\n      const testConfig = {\r\n        method: 'POST',\r\n        url: '/spot/orders',\r\n        data: { symbol: 'BTC_USDT', amount: '0.1' }\r\n      };\r\n\r\n      // Execute the request interceptor manually\r\n      if (capturedConfig) {\r\n        const result = await capturedConfig(testConfig);\r\n        \r\n        expect(result.headers).toHaveProperty('KEY');\r\n        expect(result.headers).toHaveProperty('Timestamp');\r\n        expect(result.headers).toHaveProperty('SIGN');\r\n        expect(typeof result.headers.SIGN).toBe('string');\r\n        expect(result.headers.SIGN).toHaveLength(128); // SHA512 hex length\r\n      }\r\n    });\r\n\r\n    it('should skip authentication for public endpoints', async () => {\r\n      let capturedConfig: any;\r\n      mockAxiosInstance.interceptors.request.use.mockImplementation((interceptor) => {\r\n        capturedConfig = interceptor;\r\n      });\r\n\r\n      const testConfig = {\r\n        method: 'GET',\r\n        url: '/spot/time',\r\n        skipAuth: true\r\n      };\r\n\r\n      if (capturedConfig) {\r\n        const result = await capturedConfig(testConfig);\r\n        \r\n        expect(result.headers).not.toHaveProperty('KEY');\r\n        expect(result.headers).not.toHaveProperty('SIGN');\r\n      }\r\n    });\r\n  });\r\n\r\n  describe('Health Monitoring', () => {\r\n    beforeEach(async () => {\r\n      mockAxiosInstance.request.mockResolvedValue({ data: {} });\r\n      await client.initialize();\r\n    });\r\n\r\n    it('should perform health check successfully', async () => {\r\n      mockAxiosInstance.request\r\n        .mockResolvedValueOnce({ data: { server_time: Date.now() } })\r\n        .mockResolvedValueOnce({ data: [{ currency: 'USDT' }] });\r\n\r\n      const isHealthy = await client.performHealthCheck();\r\n\r\n      expect(isHealthy).toBe(true);\r\n      expect(mockAxiosInstance.request).toHaveBeenCalledTimes(2);\r\n    });\r\n\r\n    it('should return health metrics', async () => {\r\n      const metrics = client.getHealthMetrics();\r\n\r\n      expect(metrics).toHaveProperty('totalRequests');\r\n      expect(metrics).toHaveProperty('successfulRequests');\r\n      expect(metrics).toHaveProperty('failedRequests');\r\n      expect(metrics).toHaveProperty('averageResponseTime');\r\n      expect(metrics).toHaveProperty('circuitBreakerState');\r\n      expect(typeof metrics.totalRequests).toBe('number');\r\n    });\r\n\r\n    it('should update metrics on successful requests', async () => {\r\n      mockAxiosInstance.request.mockResolvedValue({ data: { result: 'success' } });\r\n\r\n      await client.makeRequest({ method: 'GET', url: '/test' });\r\n\r\n      const metrics = client.getHealthMetrics();\r\n      expect(metrics.totalRequests).toBeGreaterThan(0);\r\n      expect(metrics.successfulRequests).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('should update metrics on failed requests', async () => {\r\n      mockAxiosInstance.request.mockRejectedValue(new Error('Test error'));\r\n\r\n      try {\r\n        await client.makeRequest({ method: 'GET', url: '/test' });\r\n      } catch (error) {\r\n        // Expected to fail\r\n      }\r\n\r\n      const metrics = client.getHealthMetrics();\r\n      expect(metrics.failedRequests).toBeGreaterThan(0);\r\n    });\r\n  });\r\n\r\n  describe('Circuit Breaker', () => {\r\n    beforeEach(async () => {\r\n      mockAxiosInstance.request.mockResolvedValue({ data: {} });\r\n      await client.initialize();\r\n      jest.clearAllMocks();\r\n    });\r\n\r\n    it('should open circuit breaker after consecutive failures', async () => {\r\n      const serverError = { response: { status: 500 }, message: 'Server error' };\r\n      mockAxiosInstance.request.mockRejectedValue(serverError);\r\n\r\n      // Simulate 5 consecutive failures to trigger circuit breaker\r\n      for (let i = 0; i < 5; i++) {\r\n        try {\r\n          await client.makeRequest({ method: 'GET', url: '/test' });\r\n        } catch (error) {\r\n          // Expected to fail\r\n        }\r\n      }\r\n\r\n      const metrics = client.getHealthMetrics();\r\n      expect(metrics.circuitBreakerState).toBe(CircuitBreakerState.OPEN);\r\n    });\r\n\r\n    it('should prevent requests when circuit breaker is open', async () => {\r\n      // Force circuit breaker open\r\n      const serverError = { response: { status: 500 }, message: 'Server error' };\r\n      mockAxiosInstance.request.mockRejectedValue(serverError);\r\n\r\n      for (let i = 0; i < 5; i++) {\r\n        try {\r\n          await client.makeRequest({ method: 'GET', url: '/test' });\r\n        } catch (error) {\r\n          // Expected to fail\r\n        }\r\n      }\r\n\r\n      // Now requests should be blocked by circuit breaker\r\n      await expect(client.makeRequest({\r\n        method: 'GET',\r\n        url: '/test'\r\n      })).rejects.toThrow('Circuit breaker is open');\r\n    });\r\n  });\r\n\r\n  describe('Error Handling', () => {\r\n    beforeEach(async () => {\r\n      mockAxiosInstance.request.mockResolvedValue({ data: {} });\r\n      await client.initialize();\r\n      jest.clearAllMocks();\r\n    });\r\n\r\n    it('should handle network errors gracefully', async () => {\r\n      const networkError = new Error('Network timeout');\r\n      mockAxiosInstance.request.mockRejectedValue(networkError);\r\n\r\n      await expect(client.makeRequest({\r\n        method: 'GET',\r\n        url: '/test'\r\n      })).rejects.toThrow('Network timeout');\r\n    });\r\n\r\n    it('should handle rate limit errors with backoff', async () => {\r\n      const rateLimitError = {\r\n        response: { \r\n          status: 429,\r\n          headers: { 'retry-after': '5' }\r\n        },\r\n        message: 'Rate limit exceeded'\r\n      };\r\n      \r\n      mockAxiosInstance.request\r\n        .mockRejectedValueOnce(rateLimitError)\r\n        .mockResolvedValueOnce({ data: { result: 'success' } });\r\n\r\n      // Mock setTimeout\r\n      jest.spyOn(global, 'setTimeout').mockImplementation((callback: any) => {\r\n        callback();\r\n        return {} as any;\r\n      });\r\n\r\n      const result = await client.makeRequest({\r\n        method: 'GET',\r\n        url: '/test'\r\n      });\r\n\r\n      expect(result).toEqual({ result: 'success' });\r\n      expect(setTimeout).toHaveBeenCalledWith(expect.any(Function), 5000);\r\n    });\r\n\r\n    it('should handle authentication errors', async () => {\r\n      const authError = {\r\n        response: { status: 401 },\r\n        message: 'Unauthorized'\r\n      };\r\n      mockAxiosInstance.request.mockRejectedValue(authError);\r\n\r\n      await expect(client.makeRequest({\r\n        method: 'GET',\r\n        url: '/test'\r\n      })).rejects.toMatchObject({ message: 'Unauthorized' });\r\n    });\r\n  });\r\n\r\n  describe('Shutdown', () => {\r\n    it('should shutdown gracefully', async () => {\r\n      mockAxiosInstance.request.mockResolvedValue({ data: {} });\r\n      await client.initialize();\r\n\r\n      await client.shutdown();\r\n\r\n      expect(mockAuditService.logSecurityEvent).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          type: 'API_CLIENT_SHUTDOWN',\r\n          severity: 'INFO'\r\n        })\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('Edge Cases', () => {\r\n    it('should handle missing response data', async () => {\r\n      mockAxiosInstance.request.mockResolvedValue({});\r\n      await client.initialize();\r\n\r\n      const result = await client.makeRequest({\r\n        method: 'GET',\r\n        url: '/test'\r\n      });\r\n\r\n      expect(result).toBeUndefined();\r\n    });\r\n\r\n    it('should handle malformed error responses', async () => {\r\n      const malformedError = {\r\n        response: null,\r\n        message: 'Malformed error'\r\n      };\r\n      mockAxiosInstance.request.mockRejectedValue(malformedError);\r\n      await client.initialize();\r\n\r\n      await expect(client.makeRequest({\r\n        method: 'GET',\r\n        url: '/test'\r\n      })).rejects.toMatchObject({ message: 'Malformed error' });\r\n    });\r\n\r\n    it('should handle concurrent requests', async () => {\r\n      mockAxiosInstance.request.mockResolvedValue({ data: { result: 'success' } });\r\n      await client.initialize();\r\n\r\n      const promises = [];\r\n      for (let i = 0; i < 10; i++) {\r\n        promises.push(client.makeRequest({\r\n          method: 'GET',\r\n          url: `/test${i}`\r\n        }));\r\n      }\r\n\r\n      const results = await Promise.all(promises);\r\n      expect(results).toHaveLength(10);\r\n      results.forEach(result => {\r\n        expect(result).toEqual({ result: 'success' });\r\n      });\r\n    });\r\n  });\r\n});"],"version":3}