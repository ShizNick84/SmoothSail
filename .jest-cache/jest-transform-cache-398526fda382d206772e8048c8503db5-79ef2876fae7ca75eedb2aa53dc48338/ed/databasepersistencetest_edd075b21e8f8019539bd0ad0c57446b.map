{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\tests\\database\\database-persistence.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\tests\\database\\database-persistence.test.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * DATABASE OPERATIONS AND DATA PERSISTENCE TESTING\r\n * =============================================================================\r\n * \r\n * Comprehensive tests for database operations, data persistence, and\r\n * data integrity validation for the Intel NUC deployment.\r\n * \r\n * Requirements: 3.2, 5.4\r\n * =============================================================================\r\n */\r\n\r\nimport { describe, test, expect, beforeAll, afterAll, beforeEach, afterEach, jest } from '@jest/globals';\r\nimport { DatabaseManager } from '../../core/database/database-manager';\r\nimport { Logger } from '../../core/logging/logger';\r\n\r\n// Mock pg module\r\njest.mock('pg', () => ({\r\n  Pool: jest.fn().mockImplementation(() => ({\r\n    connect: jest.fn().mockResolvedValue({\r\n      query: jest.fn(),\r\n      release: jest.fn()\r\n    }),\r\n    query: jest.fn(),\r\n    end: jest.fn()\r\n  }))\r\n}));\r\n\r\nconst logger = new Logger('DatabaseTest');\r\n\r\ndescribe('Database Operations and Data Persistence Tests', () => {\r\n  let databaseManager: DatabaseManager;\r\n  let mockPool: any;\r\n  let mockClient: any;\r\n\r\n  beforeAll(() => {\r\n    // Set up test environment\r\n    process.env.NODE_ENV = 'test';\r\n    process.env.DATABASE_HOST = 'localhost';\r\n    process.env.DATABASE_PORT = '5432';\r\n    process.env.DATABASE_NAME = 'trading_agent_test';\r\n    process.env.DATABASE_USER = 'test_user';\r\n    process.env.DATABASE_PASSWORD = 'test_password';\r\n  });\r\n\r\n  beforeEach(() => {\r\n    // Create fresh mocks for each test\r\n    mockClient = {\r\n      query: jest.fn(),\r\n      release: jest.fn()\r\n    };\r\n\r\n    mockPool = {\r\n      connect: jest.fn().mockResolvedValue(mockClient),\r\n      query: jest.fn(),\r\n      end: jest.fn()\r\n    };\r\n\r\n    // Mock the Pool constructor\r\n    const { Pool } = require('pg');\r\n    Pool.mockImplementation(() => mockPool);\r\n\r\n    databaseManager = new DatabaseManager({\r\n      type: 'postgresql',\r\n      host: 'localhost',\r\n      port: 5432,\r\n      database: 'trading_agent_test',\r\n      username: 'test_user',\r\n      password: 'test_password',\r\n      ssl: false,\r\n      maxConnections: 10,\r\n      idleTimeout: 30000,\r\n      connectionTimeout: 60000\r\n    });\r\n  });\r\n\r\n  afterEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('Database Connection Management', () => {\r\n    test('should initialize database connection successfully', async () => {\r\n      mockPool.query.mockResolvedValue({ rows: [{ version: 'PostgreSQL 13.0' }] });\r\n\r\n      await databaseManager.initialize();\r\n\r\n      expect(mockPool.query).toHaveBeenCalledWith('SELECT version()');\r\n    });\r\n\r\n    test('should handle connection failures gracefully', async () => {\r\n      mockPool.query.mockRejectedValue(new Error('Connection refused'));\r\n\r\n      await expect(databaseManager.initialize()).rejects.toThrow('Connection refused');\r\n    });\r\n\r\n    test('should manage connection pool correctly', async () => {\r\n      mockPool.connect.mockResolvedValue(mockClient);\r\n      mockClient.query.mockResolvedValue({ rows: [{ count: '5' }] });\r\n\r\n      const result = await databaseManager.executeQuery('SELECT COUNT(*) FROM trades');\r\n\r\n      expect(mockPool.connect).toHaveBeenCalled();\r\n      expect(mockClient.query).toHaveBeenCalledWith('SELECT COUNT(*) FROM trades', undefined);\r\n      expect(mockClient.release).toHaveBeenCalled();\r\n    });\r\n\r\n    test('should handle connection pool exhaustion', async () => {\r\n      mockPool.connect.mockRejectedValue(new Error('Pool exhausted'));\r\n\r\n      await expect(databaseManager.executeQuery('SELECT 1')).rejects.toThrow('Pool exhausted');\r\n    });\r\n  });\r\n\r\n  describe('Trading Data Persistence', () => {\r\n    test('should persist trade execution data', async () => {\r\n      const tradeData = {\r\n        id: 'trade-123',\r\n        symbol: 'BTC_USDT',\r\n        side: 'BUY',\r\n        quantity: 0.001,\r\n        price: 45000.50,\r\n        status: 'FILLED',\r\n        timestamp: new Date('2024-01-15T10:30:00Z'),\r\n        strategy: 'AI Enhanced Moving Average',\r\n        pnl: 125.75,\r\n        fees: 2.25,\r\n        is_paper_trade: true\r\n      };\r\n\r\n      mockClient.query.mockResolvedValue({\r\n        rows: [{ ...tradeData, id: 1 }],\r\n        rowCount: 1\r\n      });\r\n\r\n      const result = await databaseManager.executeQuery(\r\n        `INSERT INTO trades (trade_id, symbol, side, quantity, price, status, timestamp, strategy, pnl, fees, is_paper_trade) \r\n         VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) RETURNING *`,\r\n        [\r\n          tradeData.id,\r\n          tradeData.symbol,\r\n          tradeData.side,\r\n          tradeData.quantity,\r\n          tradeData.price,\r\n          tradeData.status,\r\n          tradeData.timestamp,\r\n          tradeData.strategy,\r\n          tradeData.pnl,\r\n          tradeData.fees,\r\n          tradeData.is_paper_trade\r\n        ]\r\n      );\r\n\r\n      expect(result.rows[0]).toMatchObject({\r\n        trade_id: 'trade-123',\r\n        symbol: 'BTC_USDT',\r\n        side: 'BUY',\r\n        quantity: 0.001,\r\n        price: 45000.50,\r\n        is_paper_trade: true\r\n      });\r\n      expect(result.rowCount).toBe(1);\r\n    });\r\n\r\n    test('should retrieve historical trading data', async () => {\r\n      const mockTrades = [\r\n        {\r\n          id: 1,\r\n          trade_id: 'trade-123',\r\n          symbol: 'BTC_USDT',\r\n          side: 'BUY',\r\n          quantity: 0.001,\r\n          price: 45000.50,\r\n          pnl: 125.75,\r\n          timestamp: new Date('2024-01-15T10:30:00Z')\r\n        },\r\n        {\r\n          id: 2,\r\n          trade_id: 'trade-124',\r\n          symbol: 'ETH_USDT',\r\n          side: 'SELL',\r\n          quantity: 0.1,\r\n          price: 2500.00,\r\n          pnl: -23.50,\r\n          timestamp: new Date('2024-01-15T11:45:00Z')\r\n        }\r\n      ];\r\n\r\n      mockClient.query.mockResolvedValue({\r\n        rows: mockTrades,\r\n        rowCount: 2\r\n      });\r\n\r\n      const result = await databaseManager.executeQuery(\r\n        'SELECT * FROM trades WHERE timestamp >= $1 ORDER BY timestamp DESC LIMIT $2',\r\n        [new Date('2024-01-15T00:00:00Z'), 10]\r\n      );\r\n\r\n      expect(result.rows).toHaveLength(2);\r\n      expect(result.rows[0].symbol).toBe('BTC_USDT');\r\n      expect(result.rows[1].symbol).toBe('ETH_USDT');\r\n    });\r\n\r\n    test('should calculate trading statistics', async () => {\r\n      const mockStats = {\r\n        total_trades: 150,\r\n        winning_trades: 110,\r\n        losing_trades: 40,\r\n        total_pnl: 2450.75,\r\n        best_trade: 189.50,\r\n        worst_trade: -45.20,\r\n        avg_trade_duration: 3600000, // 1 hour in milliseconds\r\n        win_rate: 73.33\r\n      };\r\n\r\n      mockClient.query.mockResolvedValue({\r\n        rows: [mockStats],\r\n        rowCount: 1\r\n      });\r\n\r\n      const result = await databaseManager.executeQuery(`\r\n        SELECT \r\n          COUNT(*) as total_trades,\r\n          COUNT(CASE WHEN pnl > 0 THEN 1 END) as winning_trades,\r\n          COUNT(CASE WHEN pnl < 0 THEN 1 END) as losing_trades,\r\n          SUM(pnl) as total_pnl,\r\n          MAX(pnl) as best_trade,\r\n          MIN(pnl) as worst_trade,\r\n          AVG(EXTRACT(EPOCH FROM (updated_at - timestamp)) * 1000) as avg_trade_duration,\r\n          ROUND((COUNT(CASE WHEN pnl > 0 THEN 1 END) * 100.0 / COUNT(*)), 2) as win_rate\r\n        FROM trades \r\n        WHERE timestamp >= $1\r\n      `, [new Date('2024-01-01T00:00:00Z')]);\r\n\r\n      expect(result.rows[0]).toMatchObject({\r\n        total_trades: 150,\r\n        win_rate: 73.33,\r\n        total_pnl: 2450.75\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('System Metrics Persistence', () => {\r\n    test('should persist Intel NUC system metrics', async () => {\r\n      const systemMetrics = {\r\n        timestamp: new Date('2024-01-15T12:00:00Z'),\r\n        cpu_usage: 75.8,\r\n        ram_usage: 82.3,\r\n        disk_usage: 45.6,\r\n        cpu_temperature: 68.2,\r\n        network_latency: 31,\r\n        ssh_tunnel_status: 'healthy',\r\n        active_connections: 18,\r\n        database_connections: 5,\r\n        trading_engine_status: 'active'\r\n      };\r\n\r\n      mockClient.query.mockResolvedValue({\r\n        rows: [{ ...systemMetrics, id: 1 }],\r\n        rowCount: 1\r\n      });\r\n\r\n      const result = await databaseManager.executeQuery(\r\n        `INSERT INTO system_metrics \r\n         (timestamp, cpu_usage, ram_usage, disk_usage, cpu_temperature, network_latency, \r\n          ssh_tunnel_status, active_connections, database_connections, trading_engine_status) \r\n         VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) RETURNING *`,\r\n        [\r\n          systemMetrics.timestamp,\r\n          systemMetrics.cpu_usage,\r\n          systemMetrics.ram_usage,\r\n          systemMetrics.disk_usage,\r\n          systemMetrics.cpu_temperature,\r\n          systemMetrics.network_latency,\r\n          systemMetrics.ssh_tunnel_status,\r\n          systemMetrics.active_connections,\r\n          systemMetrics.database_connections,\r\n          systemMetrics.trading_engine_status\r\n        ]\r\n      );\r\n\r\n      expect(result.rows[0]).toMatchObject({\r\n        cpu_usage: 75.8,\r\n        ram_usage: 82.3,\r\n        ssh_tunnel_status: 'healthy'\r\n      });\r\n    });\r\n\r\n    test('should retrieve system performance history', async () => {\r\n      const mockMetrics = Array.from({ length: 24 }, (_, i) => ({\r\n        id: i + 1,\r\n        timestamp: new Date(Date.now() - (23 - i) * 60 * 60 * 1000), // Last 24 hours\r\n        cpu_usage: 50 + Math.random() * 30,\r\n        ram_usage: 60 + Math.random() * 20,\r\n        disk_usage: 40 + Math.random() * 10,\r\n        cpu_temperature: 55 + Math.random() * 15\r\n      }));\r\n\r\n      mockClient.query.mockResolvedValue({\r\n        rows: mockMetrics,\r\n        rowCount: 24\r\n      });\r\n\r\n      const result = await databaseManager.executeQuery(\r\n        'SELECT * FROM system_metrics WHERE timestamp >= $1 ORDER BY timestamp ASC',\r\n        [new Date(Date.now() - 24 * 60 * 60 * 1000)]\r\n      );\r\n\r\n      expect(result.rows).toHaveLength(24);\r\n      expect(result.rows[0]).toHaveProperty('cpu_usage');\r\n      expect(result.rows[0]).toHaveProperty('ram_usage');\r\n      expect(result.rows[0]).toHaveProperty('cpu_temperature');\r\n    });\r\n  });\r\n\r\n  describe('Configuration and Settings Persistence', () => {\r\n    test('should persist trading configuration', async () => {\r\n      const config = {\r\n        key: 'risk_management',\r\n        value: JSON.stringify({\r\n          max_position_size: 1000,\r\n          max_daily_loss: 0.02,\r\n          stop_loss_percentage: 1,\r\n          take_profit_percentage: 3\r\n        }),\r\n        updated_at: new Date(),\r\n        updated_by: 'system'\r\n      };\r\n\r\n      mockClient.query.mockResolvedValue({\r\n        rows: [config],\r\n        rowCount: 1\r\n      });\r\n\r\n      const result = await databaseManager.executeQuery(\r\n        'INSERT INTO configuration (key, value, updated_at, updated_by) VALUES ($1, $2, $3, $4) ON CONFLICT (key) DO UPDATE SET value = $2, updated_at = $3 RETURNING *',\r\n        [config.key, config.value, config.updated_at, config.updated_by]\r\n      );\r\n\r\n      expect(result.rows[0].key).toBe('risk_management');\r\n      expect(JSON.parse(result.rows[0].value)).toMatchObject({\r\n        max_position_size: 1000,\r\n        max_daily_loss: 0.02\r\n      });\r\n    });\r\n\r\n    test('should retrieve configuration settings', async () => {\r\n      const mockConfigs = [\r\n        {\r\n          key: 'risk_management',\r\n          value: '{\"max_position_size\": 1000, \"stop_loss_percentage\": 1}',\r\n          updated_at: new Date()\r\n        },\r\n        {\r\n          key: 'notification_settings',\r\n          value: '{\"telegram_enabled\": true, \"email_enabled\": true}',\r\n          updated_at: new Date()\r\n        }\r\n      ];\r\n\r\n      mockClient.query.mockResolvedValue({\r\n        rows: mockConfigs,\r\n        rowCount: 2\r\n      });\r\n\r\n      const result = await databaseManager.executeQuery('SELECT * FROM configuration');\r\n\r\n      expect(result.rows).toHaveLength(2);\r\n      expect(result.rows[0].key).toBe('risk_management');\r\n      expect(result.rows[1].key).toBe('notification_settings');\r\n    });\r\n  });\r\n\r\n  describe('Data Integrity and Validation', () => {\r\n    test('should enforce database constraints', async () => {\r\n      // Test unique constraint violation\r\n      mockClient.query.mockRejectedValue({\r\n        code: '23505', // PostgreSQL unique violation error code\r\n        constraint: 'trades_trade_id_unique'\r\n      });\r\n\r\n      await expect(databaseManager.executeQuery(\r\n        'INSERT INTO trades (trade_id, symbol, side, quantity, price) VALUES ($1, $2, $3, $4, $5)',\r\n        ['duplicate-id', 'BTC_USDT', 'BUY', 0.001, 45000]\r\n      )).rejects.toMatchObject({\r\n        code: '23505',\r\n        constraint: 'trades_trade_id_unique'\r\n      });\r\n    });\r\n\r\n    test('should validate data types and ranges', async () => {\r\n      // Test invalid data type\r\n      mockClient.query.mockRejectedValue({\r\n        code: '22P02', // PostgreSQL invalid text representation\r\n        message: 'invalid input syntax for type numeric'\r\n      });\r\n\r\n      await expect(databaseManager.executeQuery(\r\n        'INSERT INTO trades (trade_id, symbol, side, quantity, price) VALUES ($1, $2, $3, $4, $5)',\r\n        ['trade-123', 'BTC_USDT', 'BUY', 'invalid-quantity', 45000]\r\n      )).rejects.toMatchObject({\r\n        code: '22P02'\r\n      });\r\n    });\r\n\r\n    test('should handle transaction rollbacks', async () => {\r\n      const mockTransaction = {\r\n        query: jest.fn(),\r\n        rollback: jest.fn(),\r\n        commit: jest.fn(),\r\n        release: jest.fn()\r\n      };\r\n\r\n      mockPool.connect.mockResolvedValue(mockTransaction);\r\n      mockTransaction.query\r\n        .mockResolvedValueOnce({ rows: [], rowCount: 0 }) // BEGIN\r\n        .mockRejectedValueOnce(new Error('Constraint violation')); // INSERT fails\r\n\r\n      const transactionFn = async (client: any) => {\r\n        await client.query('BEGIN');\r\n        await client.query('INSERT INTO trades (trade_id, symbol) VALUES ($1, $2)', ['test', 'BTC_USDT']);\r\n        await client.query('COMMIT');\r\n      };\r\n\r\n      await expect(transactionFn(mockTransaction)).rejects.toThrow('Constraint violation');\r\n    });\r\n  });\r\n\r\n  describe('Database Health and Monitoring', () => {\r\n    test('should perform health checks', async () => {\r\n      const healthData = {\r\n        status: 'healthy',\r\n        connections: 5,\r\n        max_connections: 100,\r\n        response_time: 15,\r\n        last_check: new Date()\r\n      };\r\n\r\n      mockClient.query\r\n        .mockResolvedValueOnce({ rows: [{ count: '5' }] }) // Active connections\r\n        .mockResolvedValueOnce({ rows: [{ setting: '100' }] }) // Max connections\r\n        .mockResolvedValueOnce({ rows: [{ now: new Date() }] }); // Current time\r\n\r\n      const startTime = Date.now();\r\n      const health = await databaseManager.getHealth();\r\n      const responseTime = Date.now() - startTime;\r\n\r\n      expect(health).toMatchObject({\r\n        status: 'healthy',\r\n        responseTime: expect.any(Number)\r\n      });\r\n      expect(health.responseTime).toBeLessThan(1000);\r\n    });\r\n\r\n    test('should detect performance issues', async () => {\r\n      // Mock slow query response\r\n      mockClient.query.mockImplementation(() => \r\n        new Promise(resolve => setTimeout(() => resolve({ rows: [] }), 2000))\r\n      );\r\n\r\n      const startTime = Date.now();\r\n      await databaseManager.executeQuery('SELECT pg_sleep(2)');\r\n      const duration = Date.now() - startTime;\r\n\r\n      expect(duration).toBeGreaterThan(1900); // Should take at least 2 seconds\r\n    });\r\n\r\n    test('should monitor connection pool usage', async () => {\r\n      const poolStats = {\r\n        total_connections: 10,\r\n        idle_connections: 3,\r\n        active_connections: 7,\r\n        waiting_connections: 0\r\n      };\r\n\r\n      mockClient.query.mockResolvedValue({\r\n        rows: [poolStats],\r\n        rowCount: 1\r\n      });\r\n\r\n      const result = await databaseManager.executeQuery(`\r\n        SELECT \r\n          count(*) as total_connections,\r\n          count(*) FILTER (WHERE state = 'idle') as idle_connections,\r\n          count(*) FILTER (WHERE state = 'active') as active_connections,\r\n          count(*) FILTER (WHERE state = 'waiting') as waiting_connections\r\n        FROM pg_stat_activity \r\n        WHERE datname = current_database()\r\n      `);\r\n\r\n      expect(result.rows[0]).toMatchObject({\r\n        total_connections: 10,\r\n        active_connections: 7\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('Data Backup and Recovery', () => {\r\n    test('should create data backups', async () => {\r\n      const backupData = {\r\n        backup_id: 'backup-20240115-120000',\r\n        tables: ['trades', 'system_metrics', 'configuration'],\r\n        size_bytes: 1048576, // 1MB\r\n        created_at: new Date(),\r\n        status: 'completed'\r\n      };\r\n\r\n      mockClient.query.mockResolvedValue({\r\n        rows: [backupData],\r\n        rowCount: 1\r\n      });\r\n\r\n      const result = await databaseManager.executeQuery(\r\n        'INSERT INTO backups (backup_id, tables, size_bytes, created_at, status) VALUES ($1, $2, $3, $4, $5) RETURNING *',\r\n        [backupData.backup_id, backupData.tables, backupData.size_bytes, backupData.created_at, backupData.status]\r\n      );\r\n\r\n      expect(result.rows[0]).toMatchObject({\r\n        backup_id: 'backup-20240115-120000',\r\n        status: 'completed'\r\n      });\r\n    });\r\n\r\n    test('should verify backup integrity', async () => {\r\n      const checksumData = {\r\n        table_name: 'trades',\r\n        row_count: 1500,\r\n        checksum: 'abc123def456',\r\n        verified_at: new Date()\r\n      };\r\n\r\n      mockClient.query.mockResolvedValue({\r\n        rows: [checksumData],\r\n        rowCount: 1\r\n      });\r\n\r\n      const result = await databaseManager.executeQuery(\r\n        'SELECT table_name, count(*) as row_count, md5(string_agg(md5(t.*::text), \\'\\' ORDER BY id)) as checksum FROM trades t GROUP BY table_name',\r\n        []\r\n      );\r\n\r\n      expect(result.rows[0]).toHaveProperty('table_name', 'trades');\r\n      expect(result.rows[0]).toHaveProperty('row_count');\r\n      expect(result.rows[0]).toHaveProperty('checksum');\r\n    });\r\n  });\r\n\r\n  describe('Concurrent Operations', () => {\r\n    test('should handle concurrent database operations', async () => {\r\n      const operations = [];\r\n      \r\n      // Create multiple concurrent operations\r\n      for (let i = 0; i < 10; i++) {\r\n        mockClient.query.mockResolvedValue({\r\n          rows: [{ id: i, result: `operation-${i}` }],\r\n          rowCount: 1\r\n        });\r\n\r\n        operations.push(\r\n          databaseManager.executeQuery('SELECT $1 as result', [`operation-${i}`])\r\n        );\r\n      }\r\n\r\n      const results = await Promise.all(operations);\r\n\r\n      expect(results).toHaveLength(10);\r\n      results.forEach((result, index) => {\r\n        expect(result.rows[0]).toHaveProperty('result', `operation-${index}`);\r\n      });\r\n    });\r\n\r\n    test('should handle connection pool under load', async () => {\r\n      const heavyOperations = [];\r\n\r\n      // Simulate heavy database load\r\n      for (let i = 0; i < 50; i++) {\r\n        mockClient.query.mockResolvedValue({\r\n          rows: [{ operation_id: i }],\r\n          rowCount: 1\r\n        });\r\n\r\n        heavyOperations.push(\r\n          databaseManager.executeQuery('SELECT pg_sleep(0.1), $1 as operation_id', [i])\r\n        );\r\n      }\r\n\r\n      const startTime = Date.now();\r\n      const results = await Promise.all(heavyOperations);\r\n      const duration = Date.now() - startTime;\r\n\r\n      expect(results).toHaveLength(50);\r\n      expect(duration).toBeLessThan(10000); // Should complete within 10 seconds\r\n    });\r\n  });\r\n});"],"version":3}