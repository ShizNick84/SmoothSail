5576e3248fc5b3a488d5c62033e30669
"use strict";

/**
 * =============================================================================
 * AI CRYPTO TRADING AGENT - MILITARY-GRADE KEY MANAGEMENT SERVICE
 * =============================================================================
 *
 * This service provides secure key management capabilities for the AI crypto
 * trading agent. It handles encryption key generation, rotation, storage, and
 * lifecycle management with military-grade security standards.
 *
 * CRITICAL SECURITY NOTICE:
 * This service protects the keys that secure access to trading capital and
 * sensitive financial data. Any compromise of this service could result in
 * total loss of funds. All operations must be audited and monitored.
 *
 * Security Features:
 * - Hardware-based key generation when available
 * - Automatic key rotation with configurable intervals
 * - Secure key storage with multiple encryption layers
 * - Key escrow and recovery capabilities
 * - Comprehensive audit logging of all key operations
 *
 * @author AI Crypto Trading System
 * @version 1.0.0
 * @license PROPRIETARY
 * =============================================================================
 */
/* istanbul ignore next */
function cov_2d7cimrxhs() {
  var path = "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\key-manager.ts";
  var hash = "6f771bf8b4a4748ab91efaad2a21bf3b41f7eaad";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\key-manager.ts",
    statementMap: {
      "0": {
        start: {
          line: 28,
          column: 0
        },
        end: {
          line: 28,
          column: 62
        }
      },
      "1": {
        start: {
          line: 29,
          column: 0
        },
        end: {
          line: 29,
          column: 87
        }
      },
      "2": {
        start: {
          line: 30,
          column: 17
        },
        end: {
          line: 30,
          column: 34
        }
      },
      "3": {
        start: {
          line: 31,
          column: 29
        },
        end: {
          line: 31,
          column: 69
        }
      },
      "4": {
        start: {
          line: 32,
          column: 17
        },
        end: {
          line: 32,
          column: 49
        }
      },
      "5": {
        start: {
          line: 33,
          column: 13
        },
        end: {
          line: 33,
          column: 26
        }
      },
      "6": {
        start: {
          line: 34,
          column: 15
        },
        end: {
          line: 34,
          column: 30
        }
      },
      "7": {
        start: {
          line: 40,
          column: 0
        },
        end: {
          line: 48,
          column: 48
        }
      },
      "8": {
        start: {
          line: 41,
          column: 4
        },
        end: {
          line: 41,
          column: 33
        }
      },
      "9": {
        start: {
          line: 42,
          column: 4
        },
        end: {
          line: 42,
          column: 49
        }
      },
      "10": {
        start: {
          line: 43,
          column: 4
        },
        end: {
          line: 43,
          column: 35
        }
      },
      "11": {
        start: {
          line: 44,
          column: 4
        },
        end: {
          line: 44,
          column: 37
        }
      },
      "12": {
        start: {
          line: 45,
          column: 4
        },
        end: {
          line: 45,
          column: 33
        }
      },
      "13": {
        start: {
          line: 46,
          column: 4
        },
        end: {
          line: 46,
          column: 31
        }
      },
      "14": {
        start: {
          line: 47,
          column: 4
        },
        end: {
          line: 47,
          column: 47
        }
      },
      "15": {
        start: {
          line: 54,
          column: 0
        },
        end: {
          line: 60,
          column: 54
        }
      },
      "16": {
        start: {
          line: 55,
          column: 4
        },
        end: {
          line: 55,
          column: 35
        }
      },
      "17": {
        start: {
          line: 56,
          column: 4
        },
        end: {
          line: 56,
          column: 55
        }
      },
      "18": {
        start: {
          line: 57,
          column: 4
        },
        end: {
          line: 57,
          column: 43
        }
      },
      "19": {
        start: {
          line: 58,
          column: 4
        },
        end: {
          line: 58,
          column: 37
        }
      },
      "20": {
        start: {
          line: 59,
          column: 4
        },
        end: {
          line: 59,
          column: 45
        }
      },
      "21": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 68,
          column: 34
        }
      },
      "22": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 70,
          column: 73
        }
      },
      "23": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 71,
          column: 36
        }
      },
      "24": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 73,
          column: 42
        }
      },
      "25": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 99,
          column: 9
        }
      },
      "26": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 84,
          column: 13
        }
      },
      "27": {
        start: {
          line: 82,
          column: 16
        },
        end: {
          line: 82,
          column: 91
        }
      },
      "28": {
        start: {
          line: 83,
          column: 16
        },
        end: {
          line: 83,
          column: 104
        }
      },
      "29": {
        start: {
          line: 86,
          column: 26
        },
        end: {
          line: 86,
          column: 69
        }
      },
      "30": {
        start: {
          line: 87,
          column: 25
        },
        end: {
          line: 87,
          column: 56
        }
      },
      "31": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 94,
          column: 13
        }
      },
      "32": {
        start: {
          line: 89,
          column: 16
        },
        end: {
          line: 93,
          column: 19
        }
      },
      "33": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 97,
          column: 80
        }
      },
      "34": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 98,
          column: 65
        }
      },
      "35": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 161,
          column: 9
        }
      },
      "36": {
        start: {
          line: 113,
          column: 26
        },
        end: {
          line: 113,
          column: 53
        }
      },
      "37": {
        start: {
          line: 115,
          column: 29
        },
        end: {
          line: 115,
          column: 41
        }
      },
      "38": {
        start: {
          line: 116,
          column: 30
        },
        end: {
          line: 116,
          column: 65
        }
      },
      "39": {
        start: {
          line: 118,
          column: 29
        },
        end: {
          line: 127,
          column: 13
        }
      },
      "40": {
        start: {
          line: 129,
          column: 27
        },
        end: {
          line: 129,
          column: 58
        }
      },
      "41": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 132,
          column: 13
        }
      },
      "42": {
        start: {
          line: 131,
          column: 16
        },
        end: {
          line: 131,
          column: 87
        }
      },
      "43": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 134,
          column: 60
        }
      },
      "44": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 136,
          column: 67
        }
      },
      "45": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 144,
          column: 15
        }
      },
      "46": {
        start: {
          line: 146,
          column: 12
        },
        end: {
          line: 155,
          column: 15
        }
      },
      "47": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 156,
          column: 25
        }
      },
      "48": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 159,
          column: 69
        }
      },
      "49": {
        start: {
          line: 160,
          column: 12
        },
        end: {
          line: 160,
          column: 68
        }
      },
      "50": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 195,
          column: 9
        }
      },
      "51": {
        start: {
          line: 173,
          column: 27
        },
        end: {
          line: 173,
          column: 51
        }
      },
      "52": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 179,
          column: 13
        }
      },
      "53": {
        start: {
          line: 176,
          column: 16
        },
        end: {
          line: 176,
          column: 45
        }
      },
      "54": {
        start: {
          line: 177,
          column: 16
        },
        end: {
          line: 177,
          column: 69
        }
      },
      "55": {
        start: {
          line: 178,
          column: 16
        },
        end: {
          line: 178,
          column: 30
        }
      },
      "56": {
        start: {
          line: 181,
          column: 28
        },
        end: {
          line: 181,
          column: 53
        }
      },
      "57": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 184,
          column: 13
        }
      },
      "58": {
        start: {
          line: 183,
          column: 16
        },
        end: {
          line: 183,
          column: 28
        }
      },
      "59": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 186,
          column: 42
        }
      },
      "60": {
        start: {
          line: 187,
          column: 12
        },
        end: {
          line: 187,
          column: 66
        }
      },
      "61": {
        start: {
          line: 189,
          column: 12
        },
        end: {
          line: 189,
          column: 46
        }
      },
      "62": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 190,
          column: 27
        }
      },
      "63": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 193,
          column: 68
        }
      },
      "64": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 194,
          column: 68
        }
      },
      "65": {
        start: {
          line: 205,
          column: 8
        },
        end: {
          line: 242,
          column: 9
        }
      },
      "66": {
        start: {
          line: 207,
          column: 31
        },
        end: {
          line: 207,
          column: 55
        }
      },
      "67": {
        start: {
          line: 208,
          column: 12
        },
        end: {
          line: 210,
          column: 13
        }
      },
      "68": {
        start: {
          line: 209,
          column: 16
        },
        end: {
          line: 209,
          column: 59
        }
      },
      "69": {
        start: {
          line: 212,
          column: 29
        },
        end: {
          line: 212,
          column: 139
        }
      },
      "70": {
        start: {
          line: 214,
          column: 12
        },
        end: {
          line: 214,
          column: 62
        }
      },
      "71": {
        start: {
          line: 215,
          column: 12
        },
        end: {
          line: 215,
          column: 57
        }
      },
      "72": {
        start: {
          line: 216,
          column: 12
        },
        end: {
          line: 216,
          column: 69
        }
      },
      "73": {
        start: {
          line: 218,
          column: 12
        },
        end: {
          line: 218,
          column: 40
        }
      },
      "74": {
        start: {
          line: 220,
          column: 12
        },
        end: {
          line: 225,
          column: 15
        }
      },
      "75": {
        start: {
          line: 227,
          column: 12
        },
        end: {
          line: 236,
          column: 15
        }
      },
      "76": {
        start: {
          line: 237,
          column: 12
        },
        end: {
          line: 237,
          column: 28
        }
      },
      "77": {
        start: {
          line: 240,
          column: 12
        },
        end: {
          line: 240,
          column: 67
        }
      },
      "78": {
        start: {
          line: 241,
          column: 12
        },
        end: {
          line: 241,
          column: 66
        }
      },
      "79": {
        start: {
          line: 252,
          column: 8
        },
        end: {
          line: 287,
          column: 9
        }
      },
      "80": {
        start: {
          line: 254,
          column: 31
        },
        end: {
          line: 254,
          column: 55
        }
      },
      "81": {
        start: {
          line: 255,
          column: 12
        },
        end: {
          line: 257,
          column: 13
        }
      },
      "82": {
        start: {
          line: 256,
          column: 16
        },
        end: {
          line: 256,
          column: 59
        }
      },
      "83": {
        start: {
          line: 259,
          column: 12
        },
        end: {
          line: 259,
          column: 59
        }
      },
      "84": {
        start: {
          line: 260,
          column: 12
        },
        end: {
          line: 260,
          column: 69
        }
      },
      "85": {
        start: {
          line: 262,
          column: 12
        },
        end: {
          line: 262,
          column: 40
        }
      },
      "86": {
        start: {
          line: 264,
          column: 12
        },
        end: {
          line: 264,
          column: 79
        }
      },
      "87": {
        start: {
          line: 266,
          column: 12
        },
        end: {
          line: 271,
          column: 15
        }
      },
      "88": {
        start: {
          line: 273,
          column: 12
        },
        end: {
          line: 282,
          column: 15
        }
      },
      "89": {
        start: {
          line: 285,
          column: 12
        },
        end: {
          line: 285,
          column: 69
        }
      },
      "90": {
        start: {
          line: 286,
          column: 12
        },
        end: {
          line: 286,
          column: 66
        }
      },
      "91": {
        start: {
          line: 297,
          column: 8
        },
        end: {
          line: 317,
          column: 9
        }
      },
      "92": {
        start: {
          line: 298,
          column: 29
        },
        end: {
          line: 299,
          column: 56
        }
      },
      "93": {
        start: {
          line: 299,
          column: 34
        },
        end: {
          line: 299,
          column: 55
        }
      },
      "94": {
        start: {
          line: 300,
          column: 25
        },
        end: {
          line: 300,
          column: 27
        }
      },
      "95": {
        start: {
          line: 301,
          column: 12
        },
        end: {
          line: 311,
          column: 13
        }
      },
      "96": {
        start: {
          line: 302,
          column: 16
        },
        end: {
          line: 310,
          column: 17
        }
      },
      "97": {
        start: {
          line: 303,
          column: 36
        },
        end: {
          line: 303,
          column: 80
        }
      },
      "98": {
        start: {
          line: 304,
          column: 20
        },
        end: {
          line: 306,
          column: 21
        }
      },
      "99": {
        start: {
          line: 305,
          column: 24
        },
        end: {
          line: 305,
          column: 52
        }
      },
      "100": {
        start: {
          line: 309,
          column: 20
        },
        end: {
          line: 309,
          column: 92
        }
      },
      "101": {
        start: {
          line: 312,
          column: 12
        },
        end: {
          line: 312,
          column: 86
        }
      },
      "102": {
        start: {
          line: 312,
          column: 39
        },
        end: {
          line: 312,
          column: 84
        }
      },
      "103": {
        start: {
          line: 315,
          column: 12
        },
        end: {
          line: 315,
          column: 67
        }
      },
      "104": {
        start: {
          line: 316,
          column: 12
        },
        end: {
          line: 316,
          column: 65
        }
      },
      "105": {
        start: {
          line: 326,
          column: 8
        },
        end: {
          line: 357,
          column: 9
        }
      },
      "106": {
        start: {
          line: 327,
          column: 28
        },
        end: {
          line: 327,
          column: 49
        }
      },
      "107": {
        start: {
          line: 328,
          column: 40
        },
        end: {
          line: 328,
          column: 42
        }
      },
      "108": {
        start: {
          line: 329,
          column: 12
        },
        end: {
          line: 351,
          column: 13
        }
      },
      "109": {
        start: {
          line: 330,
          column: 16
        },
        end: {
          line: 332,
          column: 17
        }
      },
      "110": {
        start: {
          line: 331,
          column: 20
        },
        end: {
          line: 331,
          column: 29
        }
      },
      "111": {
        start: {
          line: 333,
          column: 31
        },
        end: {
          line: 333,
          column: 74
        }
      },
      "112": {
        start: {
          line: 334,
          column: 16
        },
        end: {
          line: 336,
          column: 17
        }
      },
      "113": {
        start: {
          line: 335,
          column: 20
        },
        end: {
          line: 335,
          column: 29
        }
      },
      "114": {
        start: {
          line: 337,
          column: 28
        },
        end: {
          line: 337,
          column: 38
        }
      },
      "115": {
        start: {
          line: 338,
          column: 31
        },
        end: {
          line: 338,
          column: 68
        }
      },
      "116": {
        start: {
          line: 339,
          column: 37
        },
        end: {
          line: 339,
          column: 106
        }
      },
      "117": {
        start: {
          line: 340,
          column: 42
        },
        end: {
          line: 340,
          column: 60
        }
      },
      "118": {
        start: {
          line: 342,
          column: 38
        },
        end: {
          line: 345,
          column: 90
        }
      },
      "119": {
        start: {
          line: 346,
          column: 16
        },
        end: {
          line: 350,
          column: 17
        }
      },
      "120": {
        start: {
          line: 347,
          column: 20
        },
        end: {
          line: 347,
          column: 68
        }
      },
      "121": {
        start: {
          line: 348,
          column: 20
        },
        end: {
          line: 348,
          column: 81
        }
      },
      "122": {
        start: {
          line: 349,
          column: 20
        },
        end: {
          line: 349,
          column: 58
        }
      },
      "123": {
        start: {
          line: 352,
          column: 12
        },
        end: {
          line: 352,
          column: 39
        }
      },
      "124": {
        start: {
          line: 355,
          column: 12
        },
        end: {
          line: 355,
          column: 81
        }
      },
      "125": {
        start: {
          line: 356,
          column: 12
        },
        end: {
          line: 356,
          column: 67
        }
      },
      "126": {
        start: {
          line: 368,
          column: 8
        },
        end: {
          line: 390,
          column: 9
        }
      },
      "127": {
        start: {
          line: 370,
          column: 33
        },
        end: {
          line: 370,
          column: 116
        }
      },
      "128": {
        start: {
          line: 372,
          column: 34
        },
        end: {
          line: 375,
          column: 30
        }
      },
      "129": {
        start: {
          line: 377,
          column: 33
        },
        end: {
          line: 382,
          column: 13
        }
      },
      "130": {
        start: {
          line: 384,
          column: 32
        },
        end: {
          line: 384,
          column: 88
        }
      },
      "131": {
        start: {
          line: 385,
          column: 12
        },
        end: {
          line: 385,
          column: 96
        }
      },
      "132": {
        start: {
          line: 388,
          column: 12
        },
        end: {
          line: 388,
          column: 67
        }
      },
      "133": {
        start: {
          line: 389,
          column: 12
        },
        end: {
          line: 389,
          column: 50
        }
      },
      "134": {
        start: {
          line: 400,
          column: 8
        },
        end: {
          line: 427,
          column: 9
        }
      },
      "135": {
        start: {
          line: 401,
          column: 32
        },
        end: {
          line: 401,
          column: 88
        }
      },
      "136": {
        start: {
          line: 402,
          column: 12
        },
        end: {
          line: 404,
          column: 13
        }
      },
      "137": {
        start: {
          line: 403,
          column: 16
        },
        end: {
          line: 403,
          column: 28
        }
      },
      "138": {
        start: {
          line: 406,
          column: 32
        },
        end: {
          line: 406,
          column: 75
        }
      },
      "139": {
        start: {
          line: 407,
          column: 33
        },
        end: {
          line: 407,
          column: 56
        }
      },
      "140": {
        start: {
          line: 409,
          column: 27
        },
        end: {
          line: 409,
          column: 110
        }
      },
      "141": {
        start: {
          line: 410,
          column: 30
        },
        end: {
          line: 410,
          column: 56
        }
      },
      "142": {
        start: {
          line: 412,
          column: 33
        },
        end: {
          line: 415,
          column: 30
        }
      },
      "143": {
        start: {
          line: 416,
          column: 12
        },
        end: {
          line: 418,
          column: 13
        }
      },
      "144": {
        start: {
          line: 417,
          column: 16
        },
        end: {
          line: 417,
          column: 69
        }
      },
      "145": {
        start: {
          line: 419,
          column: 12
        },
        end: {
          line: 422,
          column: 14
        }
      },
      "146": {
        start: {
          line: 425,
          column: 12
        },
        end: {
          line: 425,
          column: 66
        }
      },
      "147": {
        start: {
          line: 426,
          column: 12
        },
        end: {
          line: 426,
          column: 50
        }
      },
      "148": {
        start: {
          line: 437,
          column: 8
        },
        end: {
          line: 453,
          column: 9
        }
      },
      "149": {
        start: {
          line: 438,
          column: 28
        },
        end: {
          line: 438,
          column: 53
        }
      },
      "150": {
        start: {
          line: 439,
          column: 12
        },
        end: {
          line: 441,
          column: 13
        }
      },
      "151": {
        start: {
          line: 440,
          column: 16
        },
        end: {
          line: 440,
          column: 59
        }
      },
      "152": {
        start: {
          line: 443,
          column: 12
        },
        end: {
          line: 443,
          column: 62
        }
      },
      "153": {
        start: {
          line: 445,
          column: 27
        },
        end: {
          line: 445,
          column: 51
        }
      },
      "154": {
        start: {
          line: 446,
          column: 12
        },
        end: {
          line: 448,
          column: 13
        }
      },
      "155": {
        start: {
          line: 447,
          column: 16
        },
        end: {
          line: 447,
          column: 43
        }
      },
      "156": {
        start: {
          line: 451,
          column: 12
        },
        end: {
          line: 451,
          column: 77
        }
      },
      "157": {
        start: {
          line: 452,
          column: 12
        },
        end: {
          line: 452,
          column: 58
        }
      },
      "158": {
        start: {
          line: 463,
          column: 26
        },
        end: {
          line: 463,
          column: 49
        }
      },
      "159": {
        start: {
          line: 464,
          column: 23
        },
        end: {
          line: 464,
          column: 67
        }
      },
      "160": {
        start: {
          line: 465,
          column: 8
        },
        end: {
          line: 465,
          column: 51
        }
      },
      "161": {
        start: {
          line: 475,
          column: 8
        },
        end: {
          line: 475,
          column: 103
        }
      },
      "162": {
        start: {
          line: 475,
          column: 67
        },
        end: {
          line: 475,
          column: 93
        }
      },
      "163": {
        start: {
          line: 483,
          column: 8
        },
        end: {
          line: 508,
          column: 27
        }
      },
      "164": {
        start: {
          line: 484,
          column: 12
        },
        end: {
          line: 507,
          column: 13
        }
      },
      "165": {
        start: {
          line: 485,
          column: 44
        },
        end: {
          line: 485,
          column: 77
        }
      },
      "166": {
        start: {
          line: 486,
          column: 16
        },
        end: {
          line: 503,
          column: 17
        }
      },
      "167": {
        start: {
          line: 487,
          column: 20
        },
        end: {
          line: 490,
          column: 23
        }
      },
      "168": {
        start: {
          line: 489,
          column: 60
        },
        end: {
          line: 489,
          column: 98
        }
      },
      "169": {
        start: {
          line: 492,
          column: 20
        },
        end: {
          line: 502,
          column: 21
        }
      },
      "170": {
        start: {
          line: 493,
          column: 24
        },
        end: {
          line: 501,
          column: 25
        }
      },
      "171": {
        start: {
          line: 494,
          column: 28
        },
        end: {
          line: 500,
          column: 29
        }
      },
      "172": {
        start: {
          line: 495,
          column: 32
        },
        end: {
          line: 495,
          column: 72
        }
      },
      "173": {
        start: {
          line: 496,
          column: 32
        },
        end: {
          line: 496,
          column: 115
        }
      },
      "174": {
        start: {
          line: 499,
          column: 32
        },
        end: {
          line: 499,
          column: 126
        }
      },
      "175": {
        start: {
          line: 506,
          column: 16
        },
        end: {
          line: 506,
          column: 81
        }
      },
      "176": {
        start: {
          line: 517,
          column: 8
        },
        end: {
          line: 538,
          column: 9
        }
      },
      "177": {
        start: {
          line: 518,
          column: 28
        },
        end: {
          line: 518,
          column: 49
        }
      },
      "178": {
        start: {
          line: 519,
          column: 40
        },
        end: {
          line: 519,
          column: 73
        }
      },
      "179": {
        start: {
          line: 520,
          column: 31
        },
        end: {
          line: 520,
          column: 33
        }
      },
      "180": {
        start: {
          line: 521,
          column: 33
        },
        end: {
          line: 521,
          column: 35
        }
      },
      "181": {
        start: {
          line: 522,
          column: 12
        },
        end: {
          line: 525,
          column: 13
        }
      },
      "182": {
        start: {
          line: 523,
          column: 16
        },
        end: {
          line: 523,
          column: 77
        }
      },
      "183": {
        start: {
          line: 524,
          column: 16
        },
        end: {
          line: 524,
          column: 79
        }
      },
      "184": {
        start: {
          line: 526,
          column: 12
        },
        end: {
          line: 533,
          column: 14
        }
      },
      "185": {
        start: {
          line: 536,
          column: 12
        },
        end: {
          line: 536,
          column: 80
        }
      },
      "186": {
        start: {
          line: 537,
          column: 12
        },
        end: {
          line: 537,
          column: 64
        }
      },
      "187": {
        start: {
          line: 541,
          column: 0
        },
        end: {
          line: 541,
          column: 32
        }
      },
      "188": {
        start: {
          line: 543,
          column: 0
        },
        end: {
          line: 574,
          column: 2
        }
      },
      "189": {
        start: {
          line: 576,
          column: 0
        },
        end: {
          line: 576,
          column: 38
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 40,
            column: 1
          },
          end: {
            line: 40,
            column: 2
          }
        },
        loc: {
          start: {
            line: 40,
            column: 20
          },
          end: {
            line: 48,
            column: 1
          }
        },
        line: 40
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 54,
            column: 1
          },
          end: {
            line: 54,
            column: 2
          }
        },
        loc: {
          start: {
            line: 54,
            column: 22
          },
          end: {
            line: 60,
            column: 1
          }
        },
        line: 54
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 66,
            column: 4
          },
          end: {
            line: 66,
            column: 5
          }
        },
        loc: {
          start: {
            line: 66,
            column: 18
          },
          end: {
            line: 74,
            column: 5
          }
        },
        line: 66
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 79,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        },
        loc: {
          start: {
            line: 79,
            column: 27
          },
          end: {
            line: 100,
            column: 5
          }
        },
        line: 79
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 110,
            column: 4
          },
          end: {
            line: 110,
            column: 5
          }
        },
        loc: {
          start: {
            line: 110,
            column: 56
          },
          end: {
            line: 162,
            column: 5
          }
        },
        line: 110
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 170,
            column: 4
          },
          end: {
            line: 170,
            column: 5
          }
        },
        loc: {
          start: {
            line: 170,
            column: 24
          },
          end: {
            line: 196,
            column: 5
          }
        },
        line: 170
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 204,
            column: 4
          },
          end: {
            line: 204,
            column: 5
          }
        },
        loc: {
          start: {
            line: 204,
            column: 27
          },
          end: {
            line: 243,
            column: 5
          }
        },
        line: 204
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 251,
            column: 4
          },
          end: {
            line: 251,
            column: 5
          }
        },
        loc: {
          start: {
            line: 251,
            column: 35
          },
          end: {
            line: 288,
            column: 5
          }
        },
        line: 251
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 296,
            column: 4
          },
          end: {
            line: 296,
            column: 5
          }
        },
        loc: {
          start: {
            line: 296,
            column: 28
          },
          end: {
            line: 318,
            column: 5
          }
        },
        line: 296
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 299,
            column: 24
          },
          end: {
            line: 299,
            column: 25
          }
        },
        loc: {
          start: {
            line: 299,
            column: 34
          },
          end: {
            line: 299,
            column: 55
          }
        },
        line: 299
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 312,
            column: 29
          },
          end: {
            line: 312,
            column: 30
          }
        },
        loc: {
          start: {
            line: 312,
            column: 39
          },
          end: {
            line: 312,
            column: 84
          }
        },
        line: 312
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 325,
            column: 4
          },
          end: {
            line: 325,
            column: 5
          }
        },
        loc: {
          start: {
            line: 325,
            column: 33
          },
          end: {
            line: 358,
            column: 5
          }
        },
        line: 325
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 367,
            column: 4
          },
          end: {
            line: 367,
            column: 5
          }
        },
        loc: {
          start: {
            line: 367,
            column: 47
          },
          end: {
            line: 391,
            column: 5
          }
        },
        line: 367
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 399,
            column: 4
          },
          end: {
            line: 399,
            column: 5
          }
        },
        loc: {
          start: {
            line: 399,
            column: 25
          },
          end: {
            line: 428,
            column: 5
          }
        },
        line: 399
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 436,
            column: 4
          },
          end: {
            line: 436,
            column: 5
          }
        },
        loc: {
          start: {
            line: 436,
            column: 45
          },
          end: {
            line: 454,
            column: 5
          }
        },
        line: 436
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 462,
            column: 4
          },
          end: {
            line: 462,
            column: 5
          }
        },
        loc: {
          start: {
            line: 462,
            column: 27
          },
          end: {
            line: 466,
            column: 5
          }
        },
        line: 462
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 474,
            column: 4
          },
          end: {
            line: 474,
            column: 5
          }
        },
        loc: {
          start: {
            line: 474,
            column: 31
          },
          end: {
            line: 476,
            column: 5
          }
        },
        line: 474
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 475,
            column: 57
          },
          end: {
            line: 475,
            column: 58
          }
        },
        loc: {
          start: {
            line: 475,
            column: 67
          },
          end: {
            line: 475,
            column: 93
          }
        },
        line: 475
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 481,
            column: 4
          },
          end: {
            line: 481,
            column: 5
          }
        },
        loc: {
          start: {
            line: 481,
            column: 33
          },
          end: {
            line: 509,
            column: 5
          }
        },
        line: 481
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 483,
            column: 20
          },
          end: {
            line: 483,
            column: 21
          }
        },
        loc: {
          start: {
            line: 483,
            column: 32
          },
          end: {
            line: 508,
            column: 9
          }
        },
        line: 483
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 489,
            column: 54
          },
          end: {
            line: 489,
            column: 55
          }
        },
        loc: {
          start: {
            line: 489,
            column: 60
          },
          end: {
            line: 489,
            column: 98
          }
        },
        line: 489
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 516,
            column: 4
          },
          end: {
            line: 516,
            column: 5
          }
        },
        loc: {
          start: {
            line: 516,
            column: 22
          },
          end: {
            line: 539,
            column: 5
          }
        },
        line: 516
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 48,
            column: 3
          },
          end: {
            line: 48,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 48,
            column: 3
          },
          end: {
            line: 48,
            column: 10
          }
        }, {
          start: {
            line: 48,
            column: 15
          },
          end: {
            line: 48,
            column: 45
          }
        }],
        line: 48
      },
      "1": {
        loc: {
          start: {
            line: 60,
            column: 3
          },
          end: {
            line: 60,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 60,
            column: 3
          },
          end: {
            line: 60,
            column: 12
          }
        }, {
          start: {
            line: 60,
            column: 17
          },
          end: {
            line: 60,
            column: 51
          }
        }],
        line: 60
      },
      "2": {
        loc: {
          start: {
            line: 81,
            column: 12
          },
          end: {
            line: 84,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 81,
            column: 12
          },
          end: {
            line: 84,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 81
      },
      "3": {
        loc: {
          start: {
            line: 88,
            column: 12
          },
          end: {
            line: 94,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 88,
            column: 12
          },
          end: {
            line: 94,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 88
      },
      "4": {
        loc: {
          start: {
            line: 110,
            column: 40
          },
          end: {
            line: 110,
            column: 54
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 110,
            column: 51
          },
          end: {
            line: 110,
            column: 54
          }
        }],
        line: 110
      },
      "5": {
        loc: {
          start: {
            line: 130,
            column: 12
          },
          end: {
            line: 132,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 130,
            column: 12
          },
          end: {
            line: 132,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 130
      },
      "6": {
        loc: {
          start: {
            line: 174,
            column: 12
          },
          end: {
            line: 179,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 174,
            column: 12
          },
          end: {
            line: 179,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 174
      },
      "7": {
        loc: {
          start: {
            line: 182,
            column: 12
          },
          end: {
            line: 184,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 182,
            column: 12
          },
          end: {
            line: 184,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 182
      },
      "8": {
        loc: {
          start: {
            line: 208,
            column: 12
          },
          end: {
            line: 210,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 208,
            column: 12
          },
          end: {
            line: 210,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 208
      },
      "9": {
        loc: {
          start: {
            line: 255,
            column: 12
          },
          end: {
            line: 257,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 255,
            column: 12
          },
          end: {
            line: 257,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 255
      },
      "10": {
        loc: {
          start: {
            line: 304,
            column: 20
          },
          end: {
            line: 306,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 304,
            column: 20
          },
          end: {
            line: 306,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 304
      },
      "11": {
        loc: {
          start: {
            line: 304,
            column: 24
          },
          end: {
            line: 304,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 304,
            column: 24
          },
          end: {
            line: 304,
            column: 31
          }
        }, {
          start: {
            line: 304,
            column: 36
          },
          end: {
            line: 304,
            column: 44
          }
        }, {
          start: {
            line: 304,
            column: 48
          },
          end: {
            line: 304,
            column: 84
          }
        }],
        line: 304
      },
      "12": {
        loc: {
          start: {
            line: 330,
            column: 16
          },
          end: {
            line: 332,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 330,
            column: 16
          },
          end: {
            line: 332,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 330
      },
      "13": {
        loc: {
          start: {
            line: 334,
            column: 16
          },
          end: {
            line: 336,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 334,
            column: 16
          },
          end: {
            line: 336,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 334
      },
      "14": {
        loc: {
          start: {
            line: 339,
            column: 37
          },
          end: {
            line: 339,
            column: 106
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 339,
            column: 37
          },
          end: {
            line: 339,
            column: 71
          }
        }, {
          start: {
            line: 339,
            column: 75
          },
          end: {
            line: 339,
            column: 106
          }
        }],
        line: 339
      },
      "15": {
        loc: {
          start: {
            line: 342,
            column: 38
          },
          end: {
            line: 345,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 342,
            column: 38
          },
          end: {
            line: 342,
            column: 60
          }
        }, {
          start: {
            line: 343,
            column: 20
          },
          end: {
            line: 343,
            column: 63
          }
        }, {
          start: {
            line: 344,
            column: 21
          },
          end: {
            line: 344,
            column: 36
          }
        }, {
          start: {
            line: 344,
            column: 40
          },
          end: {
            line: 344,
            column: 80
          }
        }, {
          start: {
            line: 345,
            column: 21
          },
          end: {
            line: 345,
            column: 45
          }
        }, {
          start: {
            line: 345,
            column: 49
          },
          end: {
            line: 345,
            column: 89
          }
        }],
        line: 342
      },
      "16": {
        loc: {
          start: {
            line: 346,
            column: 16
          },
          end: {
            line: 350,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 346,
            column: 16
          },
          end: {
            line: 350,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 346
      },
      "17": {
        loc: {
          start: {
            line: 402,
            column: 12
          },
          end: {
            line: 404,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 402,
            column: 12
          },
          end: {
            line: 404,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 402
      },
      "18": {
        loc: {
          start: {
            line: 416,
            column: 12
          },
          end: {
            line: 418,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 416,
            column: 12
          },
          end: {
            line: 418,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 416
      },
      "19": {
        loc: {
          start: {
            line: 439,
            column: 12
          },
          end: {
            line: 441,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 439,
            column: 12
          },
          end: {
            line: 441,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 439
      },
      "20": {
        loc: {
          start: {
            line: 446,
            column: 12
          },
          end: {
            line: 448,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 446,
            column: 12
          },
          end: {
            line: 448,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 446
      },
      "21": {
        loc: {
          start: {
            line: 475,
            column: 15
          },
          end: {
            line: 475,
            column: 102
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 475,
            column: 15
          },
          end: {
            line: 475,
            column: 94
          }
        }, {
          start: {
            line: 475,
            column: 98
          },
          end: {
            line: 475,
            column: 102
          }
        }],
        line: 475
      },
      "22": {
        loc: {
          start: {
            line: 486,
            column: 16
          },
          end: {
            line: 503,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 486,
            column: 16
          },
          end: {
            line: 503,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 486
      },
      "23": {
        loc: {
          start: {
            line: 493,
            column: 24
          },
          end: {
            line: 501,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 493,
            column: 24
          },
          end: {
            line: 501,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 493
      },
      "24": {
        loc: {
          start: {
            line: 523,
            column: 43
          },
          end: {
            line: 523,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 523,
            column: 43
          },
          end: {
            line: 523,
            column: 66
          }
        }, {
          start: {
            line: 523,
            column: 70
          },
          end: {
            line: 523,
            column: 71
          }
        }],
        line: 523
      },
      "25": {
        loc: {
          start: {
            line: 524,
            column: 44
          },
          end: {
            line: 524,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 524,
            column: 44
          },
          end: {
            line: 524,
            column: 68
          }
        }, {
          start: {
            line: 524,
            column: 72
          },
          end: {
            line: 524,
            column: 73
          }
        }],
        line: 524
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0, 0, 0, 0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "6f771bf8b4a4748ab91efaad2a21bf3b41f7eaad"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2d7cimrxhs = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2d7cimrxhs();
cov_2d7cimrxhs().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2d7cimrxhs().s[1]++;
exports.keyManager = exports.KeyManager = exports.KeyStatus = exports.KeyType = void 0;
const crypto_1 =
/* istanbul ignore next */
(cov_2d7cimrxhs().s[2]++, require("crypto"));
const encryption_service_1 =
/* istanbul ignore next */
(cov_2d7cimrxhs().s[3]++, require("@/security/encryption-service"));
const logger_1 =
/* istanbul ignore next */
(cov_2d7cimrxhs().s[4]++, require("@/core/logging/logger"));
const fs_1 =
/* istanbul ignore next */
(cov_2d7cimrxhs().s[5]++, require("fs"));
const path_1 =
/* istanbul ignore next */
(cov_2d7cimrxhs().s[6]++, require("path"));
/**
 * Enumeration of key types
 * Defines different categories of keys managed by the system
 */
var KeyType;
/* istanbul ignore next */
cov_2d7cimrxhs().s[7]++;
(function (KeyType) {
  /* istanbul ignore next */
  cov_2d7cimrxhs().f[0]++;
  cov_2d7cimrxhs().s[8]++;
  KeyType["MASTER"] = "master";
  /* istanbul ignore next */
  cov_2d7cimrxhs().s[9]++;
  KeyType["API_ENCRYPTION"] = "api_encryption";
  /* istanbul ignore next */
  cov_2d7cimrxhs().s[10]++;
  KeyType["SESSION"] = "session";
  /* istanbul ignore next */
  cov_2d7cimrxhs().s[11]++;
  KeyType["DATABASE"] = "database";
  /* istanbul ignore next */
  cov_2d7cimrxhs().s[12]++;
  KeyType["BACKUP"] = "backup";
  /* istanbul ignore next */
  cov_2d7cimrxhs().s[13]++;
  KeyType["AUDIT"] = "audit";
  /* istanbul ignore next */
  cov_2d7cimrxhs().s[14]++;
  KeyType["COMMUNICATION"] = "communication";
})(
/* istanbul ignore next */
(cov_2d7cimrxhs().b[0][0]++, KeyType) ||
/* istanbul ignore next */
(cov_2d7cimrxhs().b[0][1]++, exports.KeyType = KeyType = {}));
/**
 * Enumeration of key status values
 * Tracks the lifecycle state of each key
 */
var KeyStatus;
/* istanbul ignore next */
cov_2d7cimrxhs().s[15]++;
(function (KeyStatus) {
  /* istanbul ignore next */
  cov_2d7cimrxhs().f[1]++;
  cov_2d7cimrxhs().s[16]++;
  KeyStatus["ACTIVE"] = "active";
  /* istanbul ignore next */
  cov_2d7cimrxhs().s[17]++;
  KeyStatus["PENDING_ROTATION"] = "pending_rotation";
  /* istanbul ignore next */
  cov_2d7cimrxhs().s[18]++;
  KeyStatus["DEPRECATED"] = "deprecated";
  /* istanbul ignore next */
  cov_2d7cimrxhs().s[19]++;
  KeyStatus["REVOKED"] = "revoked";
  /* istanbul ignore next */
  cov_2d7cimrxhs().s[20]++;
  KeyStatus["COMPROMISED"] = "compromised";
})(
/* istanbul ignore next */
(cov_2d7cimrxhs().b[1][0]++, KeyStatus) ||
/* istanbul ignore next */
(cov_2d7cimrxhs().b[1][1]++, exports.KeyStatus = KeyStatus = {}));
/**
 * Military-grade key management service
 * Provides comprehensive key lifecycle management with security focus
 */
class KeyManager {
  constructor() {
    /* istanbul ignore next */
    cov_2d7cimrxhs().f[2]++;
    cov_2d7cimrxhs().s[21]++;
    /** In-memory key cache for performance */
    this.keyCache = new Map();
    // Initialize key storage directory
    /* istanbul ignore next */
    cov_2d7cimrxhs().s[22]++;
    this.keyStoragePath = (0, path_1.resolve)(process.cwd(), 'keys');
    /* istanbul ignore next */
    cov_2d7cimrxhs().s[23]++;
    this.initializeKeyStorage();
    // Start key rotation monitoring
    /* istanbul ignore next */
    cov_2d7cimrxhs().s[24]++;
    this.startKeyRotationMonitoring();
  }
  /**
   * Initialize secure key storage directory
   * Creates directory with restricted permissions if it doesn't exist
   */
  initializeKeyStorage() {
    /* istanbul ignore next */
    cov_2d7cimrxhs().f[3]++;
    cov_2d7cimrxhs().s[25]++;
    try {
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[26]++;
      if (!(0, fs_1.existsSync)(this.keyStoragePath)) {
        /* istanbul ignore next */
        cov_2d7cimrxhs().b[2][0]++;
        cov_2d7cimrxhs().s[27]++;
        (0, fs_1.mkdirSync)(this.keyStoragePath, {
          recursive: true,
          mode: 0o700
        });
        /* istanbul ignore next */
        cov_2d7cimrxhs().s[28]++;
        logger_1.logger.info('🔐 Key storage directory created', {
          path: this.keyStoragePath
        });
      } else
      /* istanbul ignore next */
      {
        cov_2d7cimrxhs().b[2][1]++;
      }
      // Verify directory permissions
      const stats =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[29]++, require('fs').statSync(this.keyStoragePath));
      const mode =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[30]++, stats.mode & parseInt('777', 8));
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[31]++;
      if (mode !== parseInt('700', 8)) {
        /* istanbul ignore next */
        cov_2d7cimrxhs().b[3][0]++;
        cov_2d7cimrxhs().s[32]++;
        logger_1.logger.warn('⚠️ Key storage directory has incorrect permissions', {
          path: this.keyStoragePath,
          currentMode: mode.toString(8),
          expectedMode: '700'
        });
      } else
      /* istanbul ignore next */
      {
        cov_2d7cimrxhs().b[3][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[33]++;
      logger_1.logger.error('❌ Failed to initialize key storage:', error);
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[34]++;
      throw new Error('Key storage initialization failed');
    }
  }
  /**
   * Generate a new cryptographically secure key
   * Creates a new key with specified type and strength
   *
   * @param keyType - Type of key to generate
   * @param purpose - Purpose description for the key
   * @param strength - Key strength in bits (default: 256)
   * @returns Promise<string> The generated key ID
   */
  async generateKey(keyType, purpose, strength =
  /* istanbul ignore next */
  (cov_2d7cimrxhs().b[4][0]++, 256)) {
    /* istanbul ignore next */
    cov_2d7cimrxhs().f[4]++;
    cov_2d7cimrxhs().s[35]++;
    try {
      // Generate unique key ID
      const keyId =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[36]++, this.generateKeyId(keyType));
      // Generate cryptographically secure key
      const keyBytes =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[37]++, strength / 8);
      const keyBuffer =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[38]++, (0, crypto_1.randomBytes)(keyBytes));
      // Create key metadata
      const metadata =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[39]++, {
        keyId,
        keyType,
        purpose,
        createdAt: new Date(),
        status: KeyStatus.ACTIVE,
        version: 1,
        strength,
        usageCount: 0
      });
      // Set next rotation based on policy
      const policy =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[40]++, this.getRotationPolicy(keyType));
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[41]++;
      if (policy) {
        /* istanbul ignore next */
        cov_2d7cimrxhs().b[5][0]++;
        cov_2d7cimrxhs().s[42]++;
        metadata.nextRotation = new Date(Date.now() + policy.rotationInterval);
      } else
      /* istanbul ignore next */
      {
        cov_2d7cimrxhs().b[5][1]++;
      }
      // Store key securely
      cov_2d7cimrxhs().s[43]++;
      await this.storeKey(keyId, keyBuffer, metadata);
      // Cache key for performance
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[44]++;
      this.keyCache.set(keyId, {
        key: keyBuffer,
        metadata
      });
      // Log key generation (without sensitive data)
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[45]++;
      logger_1.logger.security('KEY_GENERATED', 'New cryptographic key generated', {
        keyId,
        keyType,
        purpose,
        strength,
        classification: 'RESTRICTED'
      });
      // Audit log
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[46]++;
      logger_1.logger.audit({
        auditId: `key_gen_${keyId}`,
        eventType: 'KEY_GENERATION',
        actor: 'SYSTEM',
        resource: `KEY:${keyId}`,
        action: 'GENERATE',
        result: 'SUCCESS',
        timestamp: new Date(),
        auditData: {
          keyType,
          purpose,
          strength
        }
      });
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[47]++;
      return keyId;
    } catch (error) {
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[48]++;
      logger_1.logger.error('❌ Key generation failed:', error);
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[49]++;
      throw new Error('Failed to generate cryptographic key');
    }
  }
  /**
   * Retrieve a key by ID
   * Returns the key data and metadata for the specified key ID
   *
   * @param keyId - Unique key identifier
   * @returns Promise<{ key: Buffer; metadata: KeyMetadata } | null> Key data or null if not found
   */
  async getKey(keyId) {
    /* istanbul ignore next */
    cov_2d7cimrxhs().f[5]++;
    cov_2d7cimrxhs().s[50]++;
    try {
      // Check cache first
      const cached =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[51]++, this.keyCache.get(keyId));
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[52]++;
      if (cached) {
        /* istanbul ignore next */
        cov_2d7cimrxhs().b[6][0]++;
        cov_2d7cimrxhs().s[53]++;
        // Update usage count
        cached.metadata.usageCount++;
        /* istanbul ignore next */
        cov_2d7cimrxhs().s[54]++;
        await this.updateKeyMetadata(keyId, cached.metadata);
        /* istanbul ignore next */
        cov_2d7cimrxhs().s[55]++;
        return cached;
      } else
      /* istanbul ignore next */
      {
        cov_2d7cimrxhs().b[6][1]++;
      }
      // Load from storage
      const keyData =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[56]++, await this.loadKey(keyId));
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[57]++;
      if (!keyData) {
        /* istanbul ignore next */
        cov_2d7cimrxhs().b[7][0]++;
        cov_2d7cimrxhs().s[58]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_2d7cimrxhs().b[7][1]++;
      }
      // Update usage count
      cov_2d7cimrxhs().s[59]++;
      keyData.metadata.usageCount++;
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[60]++;
      await this.updateKeyMetadata(keyId, keyData.metadata);
      // Cache for future use
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[61]++;
      this.keyCache.set(keyId, keyData);
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[62]++;
      return keyData;
    } catch (error) {
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[63]++;
      logger_1.logger.error('❌ Key retrieval failed:', error);
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[64]++;
      throw new Error('Failed to retrieve cryptographic key');
    }
  }
  /**
   * Rotate a key to a new version
   * Generates a new key and marks the old one as deprecated
   *
   * @param keyId - Key ID to rotate
   * @returns Promise<string> New key ID
   */
  async rotateKey(keyId) {
    /* istanbul ignore next */
    cov_2d7cimrxhs().f[6]++;
    cov_2d7cimrxhs().s[65]++;
    try {
      // Get current key
      const currentKey =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[66]++, await this.getKey(keyId));
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[67]++;
      if (!currentKey) {
        /* istanbul ignore next */
        cov_2d7cimrxhs().b[8][0]++;
        cov_2d7cimrxhs().s[68]++;
        throw new Error(`Key not found: ${keyId}`);
      } else
      /* istanbul ignore next */
      {
        cov_2d7cimrxhs().b[8][1]++;
      }
      // Generate new key with same parameters
      const newKeyId =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[69]++, await this.generateKey(currentKey.metadata.keyType, currentKey.metadata.purpose, currentKey.metadata.strength));
      // Mark old key as deprecated
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[70]++;
      currentKey.metadata.status = KeyStatus.DEPRECATED;
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[71]++;
      currentKey.metadata.lastRotated = new Date();
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[72]++;
      await this.updateKeyMetadata(keyId, currentKey.metadata);
      // Remove from cache to force reload
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[73]++;
      this.keyCache.delete(keyId);
      // Log key rotation
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[74]++;
      logger_1.logger.security('KEY_ROTATED', 'Cryptographic key rotated', {
        oldKeyId: keyId,
        newKeyId,
        keyType: currentKey.metadata.keyType,
        classification: 'RESTRICTED'
      });
      // Audit log
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[75]++;
      logger_1.logger.audit({
        auditId: `key_rot_${keyId}`,
        eventType: 'KEY_ROTATION',
        actor: 'SYSTEM',
        resource: `KEY:${keyId}`,
        action: 'ROTATE',
        result: 'SUCCESS',
        timestamp: new Date(),
        auditData: {
          oldKeyId: keyId,
          newKeyId
        }
      });
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[76]++;
      return newKeyId;
    } catch (error) {
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[77]++;
      logger_1.logger.error('❌ Key rotation failed:', error);
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[78]++;
      throw new Error('Failed to rotate cryptographic key');
    }
  }
  /**
   * Revoke a key immediately
   * Marks a key as revoked and removes it from cache
   *
   * @param keyId - Key ID to revoke
   * @param reason - Reason for revocation
   */
  async revokeKey(keyId, reason) {
    /* istanbul ignore next */
    cov_2d7cimrxhs().f[7]++;
    cov_2d7cimrxhs().s[79]++;
    try {
      // Get current key
      const currentKey =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[80]++, await this.getKey(keyId));
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[81]++;
      if (!currentKey) {
        /* istanbul ignore next */
        cov_2d7cimrxhs().b[9][0]++;
        cov_2d7cimrxhs().s[82]++;
        throw new Error(`Key not found: ${keyId}`);
      } else
      /* istanbul ignore next */
      {
        cov_2d7cimrxhs().b[9][1]++;
      }
      // Mark key as revoked
      cov_2d7cimrxhs().s[83]++;
      currentKey.metadata.status = KeyStatus.REVOKED;
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[84]++;
      await this.updateKeyMetadata(keyId, currentKey.metadata);
      // Remove from cache
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[85]++;
      this.keyCache.delete(keyId);
      // Clear key from memory
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[86]++;
      encryption_service_1.encryptionService.secureClear(currentKey.key);
      // Log key revocation
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[87]++;
      logger_1.logger.security('KEY_REVOKED', 'Cryptographic key revoked', {
        keyId,
        reason,
        keyType: currentKey.metadata.keyType,
        classification: 'RESTRICTED'
      });
      // Audit log
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[88]++;
      logger_1.logger.audit({
        auditId: `key_rev_${keyId}`,
        eventType: 'KEY_REVOCATION',
        actor: 'SYSTEM',
        resource: `KEY:${keyId}`,
        action: 'REVOKE',
        result: 'SUCCESS',
        timestamp: new Date(),
        auditData: {
          reason
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[89]++;
      logger_1.logger.error('❌ Key revocation failed:', error);
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[90]++;
      throw new Error('Failed to revoke cryptographic key');
    }
  }
  /**
   * List all keys with their metadata
   * Returns metadata for all keys (without key data)
   *
   * @param keyType - Optional filter by key type
   * @returns Promise<KeyMetadata[]> Array of key metadata
   */
  async listKeys(keyType) {
    /* istanbul ignore next */
    cov_2d7cimrxhs().f[8]++;
    cov_2d7cimrxhs().s[91]++;
    try {
      const keyFiles =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[92]++, require('fs').readdirSync(this.keyStoragePath).filter(file => {
        /* istanbul ignore next */
        cov_2d7cimrxhs().f[9]++;
        cov_2d7cimrxhs().s[93]++;
        return file.endsWith('.key');
      }));
      const keys =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[94]++, []);
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[95]++;
      for (const file of keyFiles) {
        /* istanbul ignore next */
        cov_2d7cimrxhs().s[96]++;
        try {
          const keyData =
          /* istanbul ignore next */
          (cov_2d7cimrxhs().s[97]++, await this.loadKey(file.replace('.key', '')));
          /* istanbul ignore next */
          cov_2d7cimrxhs().s[98]++;
          if (
          /* istanbul ignore next */
          (cov_2d7cimrxhs().b[11][0]++, keyData) && (
          /* istanbul ignore next */
          (cov_2d7cimrxhs().b[11][1]++, !keyType) ||
          /* istanbul ignore next */
          (cov_2d7cimrxhs().b[11][2]++, keyData.metadata.keyType === keyType))) {
            /* istanbul ignore next */
            cov_2d7cimrxhs().b[10][0]++;
            cov_2d7cimrxhs().s[99]++;
            keys.push(keyData.metadata);
          } else
          /* istanbul ignore next */
          {
            cov_2d7cimrxhs().b[10][1]++;
          }
        } catch (error) {
          /* istanbul ignore next */
          cov_2d7cimrxhs().s[100]++;
          logger_1.logger.warn('⚠️ Failed to load key metadata', {
            file,
            error
          });
        }
      }
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[101]++;
      return keys.sort((a, b) => {
        /* istanbul ignore next */
        cov_2d7cimrxhs().f[10]++;
        cov_2d7cimrxhs().s[102]++;
        return b.createdAt.getTime() - a.createdAt.getTime();
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[103]++;
      logger_1.logger.error('❌ Failed to list keys:', error);
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[104]++;
      throw new Error('Failed to list cryptographic keys');
    }
  }
  /**
   * Check if keys need rotation
   * Identifies keys that should be rotated based on policies
   *
   * @returns Promise<KeyMetadata[]> Keys that need rotation
   */
  async checkKeysForRotation() {
    /* istanbul ignore next */
    cov_2d7cimrxhs().f[11]++;
    cov_2d7cimrxhs().s[105]++;
    try {
      const allKeys =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[106]++, await this.listKeys());
      const keysNeedingRotation =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[107]++, []);
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[108]++;
      for (const keyMetadata of allKeys) {
        /* istanbul ignore next */
        cov_2d7cimrxhs().s[109]++;
        if (keyMetadata.status !== KeyStatus.ACTIVE) {
          /* istanbul ignore next */
          cov_2d7cimrxhs().b[12][0]++;
          cov_2d7cimrxhs().s[110]++;
          continue;
        } else
        /* istanbul ignore next */
        {
          cov_2d7cimrxhs().b[12][1]++;
        }
        const policy =
        /* istanbul ignore next */
        (cov_2d7cimrxhs().s[111]++, this.getRotationPolicy(keyMetadata.keyType));
        /* istanbul ignore next */
        cov_2d7cimrxhs().s[112]++;
        if (!policy) {
          /* istanbul ignore next */
          cov_2d7cimrxhs().b[13][0]++;
          cov_2d7cimrxhs().s[113]++;
          continue;
        } else
        /* istanbul ignore next */
        {
          cov_2d7cimrxhs().b[13][1]++;
        }
        const now =
        /* istanbul ignore next */
        (cov_2d7cimrxhs().s[114]++, Date.now());
        const keyAge =
        /* istanbul ignore next */
        (cov_2d7cimrxhs().s[115]++, now - keyMetadata.createdAt.getTime());
        const lastRotation =
        /* istanbul ignore next */
        (cov_2d7cimrxhs().s[116]++,
        /* istanbul ignore next */
        (cov_2d7cimrxhs().b[14][0]++, keyMetadata.lastRotated?.getTime()) ||
        /* istanbul ignore next */
        (cov_2d7cimrxhs().b[14][1]++, keyMetadata.createdAt.getTime()));
        const timeSinceRotation =
        /* istanbul ignore next */
        (cov_2d7cimrxhs().s[117]++, now - lastRotation);
        // Check if rotation is needed
        const needsRotation =
        /* istanbul ignore next */
        (cov_2d7cimrxhs().s[118]++,
        /* istanbul ignore next */
        (cov_2d7cimrxhs().b[15][0]++, keyAge > policy.maxAge) ||
        /* istanbul ignore next */
        (cov_2d7cimrxhs().b[15][1]++, timeSinceRotation > policy.rotationInterval) ||
        /* istanbul ignore next */
        (cov_2d7cimrxhs().b[15][2]++, policy.maxUsage) &&
        /* istanbul ignore next */
        (cov_2d7cimrxhs().b[15][3]++, keyMetadata.usageCount > policy.maxUsage) ||
        /* istanbul ignore next */
        (cov_2d7cimrxhs().b[15][4]++, keyMetadata.nextRotation) &&
        /* istanbul ignore next */
        (cov_2d7cimrxhs().b[15][5]++, now > keyMetadata.nextRotation.getTime()));
        /* istanbul ignore next */
        cov_2d7cimrxhs().s[119]++;
        if (needsRotation) {
          /* istanbul ignore next */
          cov_2d7cimrxhs().b[16][0]++;
          cov_2d7cimrxhs().s[120]++;
          keyMetadata.status = KeyStatus.PENDING_ROTATION;
          /* istanbul ignore next */
          cov_2d7cimrxhs().s[121]++;
          await this.updateKeyMetadata(keyMetadata.keyId, keyMetadata);
          /* istanbul ignore next */
          cov_2d7cimrxhs().s[122]++;
          keysNeedingRotation.push(keyMetadata);
        } else
        /* istanbul ignore next */
        {
          cov_2d7cimrxhs().b[16][1]++;
        }
      }
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[123]++;
      return keysNeedingRotation;
    } catch (error) {
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[124]++;
      logger_1.logger.error('❌ Failed to check keys for rotation:', error);
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[125]++;
      throw new Error('Failed to check key rotation status');
    }
  }
  /**
   * Store a key securely to disk
   * Encrypts and stores key with metadata and integrity checking
   *
   * @param keyId - Unique key identifier
   * @param keyBuffer - Key data to store
   * @param metadata - Key metadata
   */
  async storeKey(keyId, keyBuffer, metadata) {
    /* istanbul ignore next */
    cov_2d7cimrxhs().f[12]++;
    cov_2d7cimrxhs().s[126]++;
    try {
      // Encrypt the key data
      const encryptedKey =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[127]++, await encryption_service_1.encryptionService.encryptData(keyBuffer.toString('hex')));
      // Calculate integrity hash
      const integrityHash =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[128]++, (0, crypto_1.createHash)('sha256').update(keyBuffer).update(JSON.stringify(metadata)).digest('hex'));
      // Create storage entry
      const storageEntry =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[129]++, {
        metadata,
        encryptedKey,
        integrityHash,
        storedAt: new Date()
      });
      // Write to secure storage
      const keyFilePath =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[130]++, (0, path_1.resolve)(this.keyStoragePath, `${keyId}.key`));
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[131]++;
      (0, fs_1.writeFileSync)(keyFilePath, JSON.stringify(storageEntry), {
        mode: 0o600
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[132]++;
      logger_1.logger.error('❌ Failed to store key:', error);
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[133]++;
      throw new Error('Key storage failed');
    }
  }
  /**
   * Load a key securely from disk
   * Decrypts and verifies integrity of stored key
   *
   * @param keyId - Unique key identifier
   * @returns Promise<{ key: Buffer; metadata: KeyMetadata } | null> Key data or null
   */
  async loadKey(keyId) {
    /* istanbul ignore next */
    cov_2d7cimrxhs().f[13]++;
    cov_2d7cimrxhs().s[134]++;
    try {
      const keyFilePath =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[135]++, (0, path_1.resolve)(this.keyStoragePath, `${keyId}.key`));
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[136]++;
      if (!(0, fs_1.existsSync)(keyFilePath)) {
        /* istanbul ignore next */
        cov_2d7cimrxhs().b[17][0]++;
        cov_2d7cimrxhs().s[137]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_2d7cimrxhs().b[17][1]++;
      }
      // Read storage entry
      const storageData =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[138]++, (0, fs_1.readFileSync)(keyFilePath, 'utf8'));
      const storageEntry =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[139]++, JSON.parse(storageData));
      // Decrypt key data
      const keyHex =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[140]++, await encryption_service_1.encryptionService.decryptData(storageEntry.encryptedKey));
      const keyBuffer =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[141]++, Buffer.from(keyHex, 'hex'));
      // Verify integrity
      const expectedHash =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[142]++, (0, crypto_1.createHash)('sha256').update(keyBuffer).update(JSON.stringify(storageEntry.metadata)).digest('hex'));
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[143]++;
      if (!(0, crypto_1.timingSafeEqual)(Buffer.from(storageEntry.integrityHash, 'hex'), Buffer.from(expectedHash, 'hex'))) {
        /* istanbul ignore next */
        cov_2d7cimrxhs().b[18][0]++;
        cov_2d7cimrxhs().s[144]++;
        throw new Error('Key integrity verification failed');
      } else
      /* istanbul ignore next */
      {
        cov_2d7cimrxhs().b[18][1]++;
      }
      cov_2d7cimrxhs().s[145]++;
      return {
        key: keyBuffer,
        metadata: storageEntry.metadata
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[146]++;
      logger_1.logger.error('❌ Failed to load key:', error);
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[147]++;
      throw new Error('Key loading failed');
    }
  }
  /**
   * Update key metadata
   * Updates stored metadata for a key
   *
   * @param keyId - Key identifier
   * @param metadata - Updated metadata
   */
  async updateKeyMetadata(keyId, metadata) {
    /* istanbul ignore next */
    cov_2d7cimrxhs().f[14]++;
    cov_2d7cimrxhs().s[148]++;
    try {
      const keyData =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[149]++, await this.loadKey(keyId));
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[150]++;
      if (!keyData) {
        /* istanbul ignore next */
        cov_2d7cimrxhs().b[19][0]++;
        cov_2d7cimrxhs().s[151]++;
        throw new Error(`Key not found: ${keyId}`);
      } else
      /* istanbul ignore next */
      {
        cov_2d7cimrxhs().b[19][1]++;
      }
      // Update metadata and re-store
      cov_2d7cimrxhs().s[152]++;
      await this.storeKey(keyId, keyData.key, metadata);
      // Update cache if present
      const cached =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[153]++, this.keyCache.get(keyId));
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[154]++;
      if (cached) {
        /* istanbul ignore next */
        cov_2d7cimrxhs().b[20][0]++;
        cov_2d7cimrxhs().s[155]++;
        cached.metadata = metadata;
      } else
      /* istanbul ignore next */
      {
        cov_2d7cimrxhs().b[20][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[156]++;
      logger_1.logger.error('❌ Failed to update key metadata:', error);
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[157]++;
      throw new Error('Key metadata update failed');
    }
  }
  /**
   * Generate unique key ID
   * Creates a unique identifier for a new key
   *
   * @param keyType - Type of key
   * @returns string Unique key ID
   */
  generateKeyId(keyType) {
    /* istanbul ignore next */
    cov_2d7cimrxhs().f[15]++;
    const timestamp =
    /* istanbul ignore next */
    (cov_2d7cimrxhs().s[158]++, Date.now().toString(36));
    const random =
    /* istanbul ignore next */
    (cov_2d7cimrxhs().s[159]++, (0, crypto_1.randomBytes)(8).toString('hex'));
    /* istanbul ignore next */
    cov_2d7cimrxhs().s[160]++;
    return `${keyType}_${timestamp}_${random}`;
  }
  /**
   * Get rotation policy for key type
   * Returns the rotation policy for a specific key type
   *
   * @param keyType - Key type to get policy for
   * @returns KeyRotationPolicy | null Policy or null if not found
   */
  getRotationPolicy(keyType) {
    /* istanbul ignore next */
    cov_2d7cimrxhs().f[16]++;
    cov_2d7cimrxhs().s[161]++;
    return /* istanbul ignore next */(cov_2d7cimrxhs().b[21][0]++, KeyManager.DEFAULT_ROTATION_POLICIES.find(policy => {
      /* istanbul ignore next */
      cov_2d7cimrxhs().f[17]++;
      cov_2d7cimrxhs().s[162]++;
      return policy.keyType === keyType;
    })) ||
    /* istanbul ignore next */
    (cov_2d7cimrxhs().b[21][1]++, null);
  }
  /**
   * Start key rotation monitoring
   * Begins periodic checking for keys that need rotation
   */
  startKeyRotationMonitoring() {
    /* istanbul ignore next */
    cov_2d7cimrxhs().f[18]++;
    cov_2d7cimrxhs().s[163]++;
    // Check for key rotation every hour
    setInterval(async () => {
      /* istanbul ignore next */
      cov_2d7cimrxhs().f[19]++;
      cov_2d7cimrxhs().s[164]++;
      try {
        const keysNeedingRotation =
        /* istanbul ignore next */
        (cov_2d7cimrxhs().s[165]++, await this.checkKeysForRotation());
        /* istanbul ignore next */
        cov_2d7cimrxhs().s[166]++;
        if (keysNeedingRotation.length > 0) {
          /* istanbul ignore next */
          cov_2d7cimrxhs().b[22][0]++;
          cov_2d7cimrxhs().s[167]++;
          logger_1.logger.warn('⚠️ Keys requiring rotation detected', {
            count: keysNeedingRotation.length,
            keys: keysNeedingRotation.map(k => {
              /* istanbul ignore next */
              cov_2d7cimrxhs().f[20]++;
              cov_2d7cimrxhs().s[168]++;
              return {
                keyId: k.keyId,
                keyType: k.keyType
              };
            })
          });
          // Auto-rotate non-critical keys
          /* istanbul ignore next */
          cov_2d7cimrxhs().s[169]++;
          for (const keyMetadata of keysNeedingRotation) {
            /* istanbul ignore next */
            cov_2d7cimrxhs().s[170]++;
            if (keyMetadata.keyType !== KeyType.MASTER) {
              /* istanbul ignore next */
              cov_2d7cimrxhs().b[23][0]++;
              cov_2d7cimrxhs().s[171]++;
              try {
                /* istanbul ignore next */
                cov_2d7cimrxhs().s[172]++;
                await this.rotateKey(keyMetadata.keyId);
                /* istanbul ignore next */
                cov_2d7cimrxhs().s[173]++;
                logger_1.logger.info('🔄 Key automatically rotated', {
                  keyId: keyMetadata.keyId
                });
              } catch (error) {
                /* istanbul ignore next */
                cov_2d7cimrxhs().s[174]++;
                logger_1.logger.error('❌ Automatic key rotation failed', {
                  keyId: keyMetadata.keyId,
                  error
                });
              }
            } else
            /* istanbul ignore next */
            {
              cov_2d7cimrxhs().b[23][1]++;
            }
          }
        } else
        /* istanbul ignore next */
        {
          cov_2d7cimrxhs().b[22][1]++;
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_2d7cimrxhs().s[175]++;
        logger_1.logger.error('❌ Key rotation monitoring error:', error);
      }
    }, 60 * 60 * 1000); // 1 hour
  }
  /**
   * Get key manager status and statistics
   * Returns current status for monitoring and diagnostics
   *
   * @returns Object containing key manager status
   */
  async getStatus() {
    /* istanbul ignore next */
    cov_2d7cimrxhs().f[21]++;
    cov_2d7cimrxhs().s[176]++;
    try {
      const allKeys =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[177]++, await this.listKeys());
      const keysNeedingRotation =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[178]++, await this.checkKeysForRotation());
      const keysByType =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[179]++, {});
      const keysByStatus =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[180]++, {});
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[181]++;
      for (const key of allKeys) {
        /* istanbul ignore next */
        cov_2d7cimrxhs().s[182]++;
        keysByType[key.keyType] = (
        /* istanbul ignore next */
        (cov_2d7cimrxhs().b[24][0]++, keysByType[key.keyType]) ||
        /* istanbul ignore next */
        (cov_2d7cimrxhs().b[24][1]++, 0)) + 1;
        /* istanbul ignore next */
        cov_2d7cimrxhs().s[183]++;
        keysByStatus[key.status] = (
        /* istanbul ignore next */
        (cov_2d7cimrxhs().b[25][0]++, keysByStatus[key.status]) ||
        /* istanbul ignore next */
        (cov_2d7cimrxhs().b[25][1]++, 0)) + 1;
      }
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[184]++;
      return {
        totalKeys: allKeys.length,
        keysByType,
        keysByStatus,
        cacheSize: this.keyCache.size,
        keysNeedingRotation: keysNeedingRotation.length,
        timestamp: Date.now()
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[185]++;
      logger_1.logger.error('❌ Failed to get key manager status:', error);
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[186]++;
      throw new Error('Failed to get key manager status');
    }
  }
}
/* istanbul ignore next */
cov_2d7cimrxhs().s[187]++;
exports.KeyManager = KeyManager;
/** Default key rotation policies */
/* istanbul ignore next */
cov_2d7cimrxhs().s[188]++;
KeyManager.DEFAULT_ROTATION_POLICIES = [{
  keyType: KeyType.MASTER,
  rotationInterval: 90 * 24 * 60 * 60 * 1000,
  // 90 days
  maxAge: 365 * 24 * 60 * 60 * 1000,
  // 1 year
  rotateOnSecurityEvent: true,
  gracePeriod: 7 * 24 * 60 * 60 * 1000 // 7 days
}, {
  keyType: KeyType.API_ENCRYPTION,
  rotationInterval: 30 * 24 * 60 * 60 * 1000,
  // 30 days
  maxAge: 90 * 24 * 60 * 60 * 1000,
  // 90 days
  maxUsage: 1000000,
  // 1 million operations
  rotateOnSecurityEvent: true,
  gracePeriod: 24 * 60 * 60 * 1000 // 24 hours
}, {
  keyType: KeyType.SESSION,
  rotationInterval: 24 * 60 * 60 * 1000,
  // 24 hours
  maxAge: 7 * 24 * 60 * 60 * 1000,
  // 7 days
  maxUsage: 10000,
  // 10k sessions
  rotateOnSecurityEvent: true,
  gracePeriod: 60 * 60 * 1000 // 1 hour
}, {
  keyType: KeyType.DATABASE,
  rotationInterval: 60 * 24 * 60 * 60 * 1000,
  // 60 days
  maxAge: 180 * 24 * 60 * 60 * 1000,
  // 180 days
  rotateOnSecurityEvent: true,
  gracePeriod: 3 * 24 * 60 * 60 * 1000 // 3 days
}];
// Create and export singleton instance
/* istanbul ignore next */
cov_2d7cimrxhs().s[189]++;
exports.keyManager = new KeyManager();
// =============================================================================
// KEY MANAGEMENT SECURITY NOTES
// =============================================================================
// 1. All keys are stored encrypted with the master encryption key
// 2. Key files have restricted permissions (600) for security
// 3. Keys are automatically rotated based on configurable policies
// 4. All key operations are logged and audited
// 5. Key integrity is verified on every load operation
// 6. Sensitive key data is cleared from memory after use
// 7. Key cache improves performance but maintains security
// 8. Master keys require manual rotation for maximum security
// =============================================================================