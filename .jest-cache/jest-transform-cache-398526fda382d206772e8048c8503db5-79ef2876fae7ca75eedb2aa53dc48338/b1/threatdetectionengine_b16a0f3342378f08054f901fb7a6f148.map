{"version":3,"names":["cov_2ez44ly61a","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","events_1","require","logger_1","audit_service_1","ThreatType","exports","ThreatDetectionEngine","EventEmitter","behavioralBaselines","Map","networkActivities","failedLoginAttempts","apiCallTracking","suspiciousIPs","Set","detectionRules","bruteForce","maxFailedAttempts","timeWindow","blockDuration","apiAbuse","maxCallsPerMinute","maxCallsPerHour","suspiciousPatterns","networkAnomaly","maxConnectionsPerIP","suspiciousUserAgents","suspiciousPaths","constructor","initializeDetectionEngine","startContinuousMonitoring","logger","info","loadBehavioralBaselines","initializeDetectionAlgorithms","setupEventHandlers","error","Error","analyzeNetworkActivity","activity","threats","push","oneHourAgo","Date","now","filter","a","timestamp","getTime","bruteForceThreats","detectBruteForceAttack","apiAbuseThreats","detectAPIAbuse","scanningThreats","detectNetworkScanning","ddosThreats","detectDDoSAttack","threat","emit","analyzeBehavioralAnomaly","userId","baseline","get","createInitialBaseline","set","deviationScore","calculateBehavioralDeviation","thresholds","anomalyThreshold","detectionId","generateDetectionId","threatType","UNUSUAL_LOGIN_PATTERN","severity","Math","min","floor","confidence","maxDeviationScore","source","target","rawData","detectionMethod","recommendedActions","updateBehavioralBaseline","analyzeTradingActivity","tradingData","volume","normalVolume","SUSPICIOUS_TRADING_ACTIVITY","currentHour","getHours","normalTradingHours","includes","statusCode","sourceIP","attempts","count","lastAttempt","BRUTE_FORCE_ATTACK","add","startsWith","tracking","calls","windowStart","API_ABUSE","pattern","test","userAgent","NETWORK_SCANNING","recentActivities","connectionCounts","recentActivity","currentIPCount","DDOS_ATTACK","connectionCount","entityId","normalPatterns","loginTimes","apiCallFrequency","tradingVolume","geographicLocations","deviceFingerprints","suspiciousActivityThreshold","lastUpdated","loginTime","length","avgLoginTime","reduce","timeDeviation","abs","location","deviceFingerprint","shift","debug","on","security","classification","auditService","createAuditEntry","auditId","eventType","actor","resource","action","result","auditData","setInterval","cleanupOldData","saveBehavioralBaselines","ip","entries","delete","toString","random","substring","getStatus","size","threatDetectionEngine"],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\threat-detection-engine.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * AI CRYPTO TRADING AGENT - ADVANCED THREAT DETECTION ENGINE\r\n * =============================================================================\r\n * \r\n * This service provides real-time threat detection and analysis capabilities\r\n * for the AI crypto trading agent. It monitors system activities, network\r\n * traffic, and user behavior to identify potential security threats.\r\n * \r\n * CRITICAL SECURITY NOTICE:\r\n * This engine is the first line of defense against threats to trading capital.\r\n * It must operate continuously and respond immediately to detected threats.\r\n * All threat detections are logged and trigger automated response procedures.\r\n * \r\n * Detection Capabilities:\r\n * - Real-time behavioral analysis\r\n * - Network intrusion detection\r\n * - API abuse detection\r\n * - Credential compromise detection\r\n * - System integrity monitoring\r\n * - Machine learning-based anomaly detection\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport { EventEmitter } from 'events';\r\nimport { logger } from '@/core/logging/logger';\r\nimport { auditService } from '@/security/audit-service';\r\n\r\n/**\r\n * Interface for threat detection event\r\n */\r\nexport interface ThreatDetectionEvent {\r\n  /** Unique threat detection ID */\r\n  detectionId: string;\r\n  /** Type of threat detected */\r\n  threatType: ThreatType;\r\n  /** Severity level (1-10) */\r\n  severity: number;\r\n  /** Confidence level (0-1) */\r\n  confidence: number;\r\n  /** Source of the threat */\r\n  source: string;\r\n  /** Target of the threat */\r\n  target: string;\r\n  /** Detection timestamp */\r\n  timestamp: Date;\r\n  /** Raw event data */\r\n  rawData: any;\r\n  /** Detection method used */\r\n  detectionMethod: string;\r\n  /** Recommended actions */\r\n  recommendedActions: string[];\r\n}\r\n\r\n/**\r\n * Enumeration of threat types\r\n */\r\nexport enum ThreatType {\r\n  BRUTE_FORCE_ATTACK = 'brute_force_attack',\r\n  CREDENTIAL_STUFFING = 'credential_stuffing',\r\n  API_ABUSE = 'api_abuse',\r\n  UNUSUAL_LOGIN_PATTERN = 'unusual_login_pattern',\r\n  SUSPICIOUS_TRADING_ACTIVITY = 'suspicious_trading_activity',\r\n  SYSTEM_INTRUSION = 'system_intrusion',\r\n  DATA_EXFILTRATION = 'data_exfiltration',\r\n  MALWARE_ACTIVITY = 'malware_activity',\r\n  NETWORK_SCANNING = 'network_scanning',\r\n  PRIVILEGE_ESCALATION = 'privilege_escalation',\r\n  INSIDER_THREAT = 'insider_threat',\r\n  DDOS_ATTACK = 'ddos_attack'\r\n}\r\n\r\n/**\r\n * Interface for behavioral baseline\r\n */\r\nexport interface BehavioralBaseline {\r\n  /** User or system identifier */\r\n  entityId: string;\r\n  /** Normal activity patterns */\r\n  normalPatterns: {\r\n    loginTimes: number[];\r\n    apiCallFrequency: number;\r\n    tradingVolume: number;\r\n    geographicLocations: string[];\r\n    deviceFingerprints: string[];\r\n  };\r\n  /** Statistical thresholds */\r\n  thresholds: {\r\n    maxDeviationScore: number;\r\n    anomalyThreshold: number;\r\n    suspiciousActivityThreshold: number;\r\n  };\r\n  /** Last update timestamp */\r\n  lastUpdated: Date;\r\n}\r\n\r\n/**\r\n * Interface for network activity monitoring\r\n */\r\nexport interface NetworkActivity {\r\n  /** Source IP address */\r\n  sourceIP: string;\r\n  /** Destination IP address */\r\n  destinationIP: string;\r\n  /** Port number */\r\n  port: number;\r\n  /** Protocol (TCP, UDP, etc.) */\r\n  protocol: string;\r\n  /** Request method (for HTTP) */\r\n  method?: string;\r\n  /** Request path (for HTTP) */\r\n  path?: string;\r\n  /** User agent */\r\n  userAgent?: string;\r\n  /** Request size in bytes */\r\n  requestSize: number;\r\n  /** Response size in bytes */\r\n  responseSize: number;\r\n  /** Response status code */\r\n  statusCode?: number;\r\n  /** Request timestamp */\r\n  timestamp: Date;\r\n}\r\n\r\n/**\r\n * Advanced threat detection engine\r\n * Provides comprehensive threat detection and analysis capabilities\r\n */\r\nexport class ThreatDetectionEngine extends EventEmitter {\r\n  /** Behavioral baselines for entities */\r\n  private behavioralBaselines: Map<string, BehavioralBaseline> = new Map();\r\n  \r\n  /** Recent network activities for analysis */\r\n  private networkActivities: NetworkActivity[] = [];\r\n  \r\n  /** Failed login attempts tracking */\r\n  private failedLoginAttempts: Map<string, { count: number; lastAttempt: Date }> = new Map();\r\n  \r\n  /** API call frequency tracking */\r\n  private apiCallTracking: Map<string, { calls: number; windowStart: Date }> = new Map();\r\n  \r\n  /** Suspicious IP addresses */\r\n  private suspiciousIPs: Set<string> = new Set();\r\n  \r\n  /** Detection rules and thresholds */\r\n  private detectionRules = {\r\n    bruteForce: {\r\n      maxFailedAttempts: 5,\r\n      timeWindow: 15 * 60 * 1000, // 15 minutes\r\n      blockDuration: 60 * 60 * 1000 // 1 hour\r\n    },\r\n    apiAbuse: {\r\n      maxCallsPerMinute: 60,\r\n      maxCallsPerHour: 1000,\r\n      suspiciousPatterns: [\r\n        /\\/api\\/.*\\/credentials/,\r\n        /\\/api\\/.*\\/admin/,\r\n        /\\/api\\/.*\\/config/\r\n      ]\r\n    },\r\n    networkAnomaly: {\r\n      maxConnectionsPerIP: 100,\r\n      suspiciousUserAgents: [\r\n        /bot/i,\r\n        /crawler/i,\r\n        /scanner/i,\r\n        /exploit/i\r\n      ],\r\n      suspiciousPaths: [\r\n        /\\.php$/,\r\n        /\\.asp$/,\r\n        /admin/,\r\n        /config/,\r\n        /backup/\r\n      ]\r\n    }\r\n  };\r\n\r\n  constructor() {\r\n    super();\r\n    \r\n    // Initialize threat detection engine\r\n    this.initializeDetectionEngine();\r\n    \r\n    // Start monitoring processes\r\n    this.startContinuousMonitoring();\r\n  }\r\n\r\n  /**\r\n   * Initialize threat detection engine\r\n   * Sets up detection rules and baseline learning\r\n   */\r\n  private initializeDetectionEngine(): void {\r\n    try {\r\n      logger.info('üõ°Ô∏è Initializing threat detection engine...');\r\n      \r\n      // Load existing behavioral baselines\r\n      this.loadBehavioralBaselines();\r\n      \r\n      // Initialize detection algorithms\r\n      this.initializeDetectionAlgorithms();\r\n      \r\n      // Set up event handlers\r\n      this.setupEventHandlers();\r\n      \r\n      logger.info('‚úÖ Threat detection engine initialized successfully');\r\n      \r\n    } catch (error) {\r\n      logger.error('‚ùå Failed to initialize threat detection engine:', error);\r\n      throw new Error('Threat detection engine initialization failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Analyze network activity for threats\r\n   * Examines network traffic patterns for suspicious activity\r\n   * \r\n   * @param activity - Network activity to analyze\r\n   * @returns Promise<ThreatDetectionEvent[]> Detected threats\r\n   */\r\n  public async analyzeNetworkActivity(activity: NetworkActivity): Promise<ThreatDetectionEvent[]> {\r\n    const threats: ThreatDetectionEvent[] = [];\r\n    \r\n    try {\r\n      // Store activity for pattern analysis\r\n      this.networkActivities.push(activity);\r\n      \r\n      // Keep only recent activities (last hour)\r\n      const oneHourAgo = Date.now() - 60 * 60 * 1000;\r\n      this.networkActivities = this.networkActivities.filter(\r\n        a => a.timestamp.getTime() > oneHourAgo\r\n      );\r\n      \r\n      // Check for brute force attacks\r\n      const bruteForceThreats = await this.detectBruteForceAttack(activity);\r\n      threats.push(...bruteForceThreats);\r\n      \r\n      // Check for API abuse\r\n      const apiAbuseThreats = await this.detectAPIAbuse(activity);\r\n      threats.push(...apiAbuseThreats);\r\n      \r\n      // Check for network scanning\r\n      const scanningThreats = await this.detectNetworkScanning(activity);\r\n      threats.push(...scanningThreats);\r\n      \r\n      // Check for DDoS patterns\r\n      const ddosThreats = await this.detectDDoSAttack(activity);\r\n      threats.push(...ddosThreats);\r\n      \r\n      // Emit threat events\r\n      for (const threat of threats) {\r\n        this.emit('threatDetected', threat);\r\n      }\r\n      \r\n      return threats;\r\n      \r\n    } catch (error) {\r\n      logger.error('‚ùå Network activity analysis failed:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Analyze user behavior for anomalies\r\n   * Detects unusual patterns in user activity\r\n   * \r\n   * @param userId - User identifier\r\n   * @param activity - User activity data\r\n   * @returns Promise<ThreatDetectionEvent[]> Detected behavioral threats\r\n   */\r\n  public async analyzeBehavioralAnomaly(\r\n    userId: string,\r\n    activity: any\r\n  ): Promise<ThreatDetectionEvent[]> {\r\n    const threats: ThreatDetectionEvent[] = [];\r\n    \r\n    try {\r\n      // Get or create behavioral baseline\r\n      let baseline = this.behavioralBaselines.get(userId);\r\n      if (!baseline) {\r\n        baseline = this.createInitialBaseline(userId);\r\n        this.behavioralBaselines.set(userId, baseline);\r\n      }\r\n      \r\n      // Calculate deviation from normal behavior\r\n      const deviationScore = this.calculateBehavioralDeviation(activity, baseline);\r\n      \r\n      // Check if deviation exceeds threshold\r\n      if (deviationScore > baseline.thresholds.anomalyThreshold) {\r\n        const threat: ThreatDetectionEvent = {\r\n          detectionId: this.generateDetectionId(),\r\n          threatType: ThreatType.UNUSUAL_LOGIN_PATTERN,\r\n          severity: Math.min(Math.floor(deviationScore * 2), 10),\r\n          confidence: Math.min(deviationScore / baseline.thresholds.maxDeviationScore, 1),\r\n          source: userId,\r\n          target: 'USER_ACCOUNT',\r\n          timestamp: new Date(),\r\n          rawData: activity,\r\n          detectionMethod: 'behavioral_analysis',\r\n          recommendedActions: [\r\n            'Verify user identity',\r\n            'Monitor subsequent activities',\r\n            'Consider additional authentication'\r\n          ]\r\n        };\r\n        \r\n        threats.push(threat);\r\n      }\r\n      \r\n      // Update baseline with new activity\r\n      this.updateBehavioralBaseline(userId, activity);\r\n      \r\n      return threats;\r\n      \r\n    } catch (error) {\r\n      logger.error('‚ùå Behavioral analysis failed:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Analyze trading activity for suspicious patterns\r\n   * Detects unusual trading behavior that might indicate compromise\r\n   * \r\n   * @param tradingData - Trading activity data\r\n   * @returns Promise<ThreatDetectionEvent[]> Detected trading threats\r\n   */\r\n  public async analyzeTradingActivity(tradingData: any): Promise<ThreatDetectionEvent[]> {\r\n    const threats: ThreatDetectionEvent[] = [];\r\n    \r\n    try {\r\n      // Check for unusual trading volumes\r\n      if (tradingData.volume > tradingData.normalVolume * 5) {\r\n        threats.push({\r\n          detectionId: this.generateDetectionId(),\r\n          threatType: ThreatType.SUSPICIOUS_TRADING_ACTIVITY,\r\n          severity: 7,\r\n          confidence: 0.8,\r\n          source: tradingData.userId || 'SYSTEM',\r\n          target: 'TRADING_ACCOUNT',\r\n          timestamp: new Date(),\r\n          rawData: tradingData,\r\n          detectionMethod: 'trading_volume_analysis',\r\n          recommendedActions: [\r\n            'Verify trading authorization',\r\n            'Check for account compromise',\r\n            'Review recent access logs'\r\n          ]\r\n        });\r\n      }\r\n      \r\n      // Check for unusual trading times\r\n      const currentHour = new Date().getHours();\r\n      if (tradingData.normalTradingHours && \r\n          !tradingData.normalTradingHours.includes(currentHour)) {\r\n        threats.push({\r\n          detectionId: this.generateDetectionId(),\r\n          threatType: ThreatType.SUSPICIOUS_TRADING_ACTIVITY,\r\n          severity: 5,\r\n          confidence: 0.6,\r\n          source: tradingData.userId || 'SYSTEM',\r\n          target: 'TRADING_ACCOUNT',\r\n          timestamp: new Date(),\r\n          rawData: tradingData,\r\n          detectionMethod: 'trading_time_analysis',\r\n          recommendedActions: [\r\n            'Verify user is authorized to trade at this time',\r\n            'Check for automated trading bot compromise'\r\n          ]\r\n        });\r\n      }\r\n      \r\n      return threats;\r\n      \r\n    } catch (error) {\r\n      logger.error('‚ùå Trading activity analysis failed:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Detect brute force attacks\r\n   * Identifies repeated failed login attempts\r\n   * \r\n   * @param activity - Network activity\r\n   * @returns Promise<ThreatDetectionEvent[]> Brute force threats\r\n   */\r\n  private async detectBruteForceAttack(activity: NetworkActivity): Promise<ThreatDetectionEvent[]> {\r\n    const threats: ThreatDetectionEvent[] = [];\r\n    \r\n    // Check for failed login attempts\r\n    if (activity.path?.includes('/login') && activity.statusCode === 401) {\r\n      const sourceIP = activity.sourceIP;\r\n      const now = Date.now();\r\n      \r\n      // Get or initialize failed attempts tracking\r\n      let attempts = this.failedLoginAttempts.get(sourceIP) || { count: 0, lastAttempt: new Date(0) };\r\n      \r\n      // Reset counter if outside time window\r\n      if (now - attempts.lastAttempt.getTime() > this.detectionRules.bruteForce.timeWindow) {\r\n        attempts.count = 0;\r\n      }\r\n      \r\n      attempts.count++;\r\n      attempts.lastAttempt = new Date();\r\n      this.failedLoginAttempts.set(sourceIP, attempts);\r\n      \r\n      // Check if threshold exceeded\r\n      if (attempts.count >= this.detectionRules.bruteForce.maxFailedAttempts) {\r\n        threats.push({\r\n          detectionId: this.generateDetectionId(),\r\n          threatType: ThreatType.BRUTE_FORCE_ATTACK,\r\n          severity: 8,\r\n          confidence: 0.9,\r\n          source: sourceIP,\r\n          target: 'LOGIN_ENDPOINT',\r\n          timestamp: new Date(),\r\n          rawData: activity,\r\n          detectionMethod: 'failed_login_analysis',\r\n          recommendedActions: [\r\n            'Block source IP address',\r\n            'Implement CAPTCHA',\r\n            'Alert security team',\r\n            'Monitor for additional attempts'\r\n          ]\r\n        });\r\n        \r\n        // Add to suspicious IPs\r\n        this.suspiciousIPs.add(sourceIP);\r\n      }\r\n    }\r\n    \r\n    return threats;\r\n  }\r\n\r\n  /**\r\n   * Detect API abuse patterns\r\n   * Identifies excessive or suspicious API usage\r\n   * \r\n   * @param activity - Network activity\r\n   * @returns Promise<ThreatDetectionEvent[]> API abuse threats\r\n   */\r\n  private async detectAPIAbuse(activity: NetworkActivity): Promise<ThreatDetectionEvent[]> {\r\n    const threats: ThreatDetectionEvent[] = [];\r\n    \r\n    if (activity.path?.startsWith('/api/')) {\r\n      const sourceIP = activity.sourceIP;\r\n      const now = Date.now();\r\n      \r\n      // Track API calls per IP\r\n      let tracking = this.apiCallTracking.get(sourceIP) || { calls: 0, windowStart: new Date() };\r\n      \r\n      // Reset window if needed (1 minute windows)\r\n      if (now - tracking.windowStart.getTime() > 60 * 1000) {\r\n        tracking.calls = 0;\r\n        tracking.windowStart = new Date();\r\n      }\r\n      \r\n      tracking.calls++;\r\n      this.apiCallTracking.set(sourceIP, tracking);\r\n      \r\n      // Check for rate limit violations\r\n      if (tracking.calls > this.detectionRules.apiAbuse.maxCallsPerMinute) {\r\n        threats.push({\r\n          detectionId: this.generateDetectionId(),\r\n          threatType: ThreatType.API_ABUSE,\r\n          severity: 6,\r\n          confidence: 0.8,\r\n          source: sourceIP,\r\n          target: 'API_ENDPOINT',\r\n          timestamp: new Date(),\r\n          rawData: activity,\r\n          detectionMethod: 'api_rate_analysis',\r\n          recommendedActions: [\r\n            'Implement rate limiting',\r\n            'Monitor API usage patterns',\r\n            'Consider temporary IP blocking'\r\n          ]\r\n        });\r\n      }\r\n      \r\n      // Check for suspicious API paths\r\n      for (const pattern of this.detectionRules.apiAbuse.suspiciousPatterns) {\r\n        if (pattern.test(activity.path)) {\r\n          threats.push({\r\n            detectionId: this.generateDetectionId(),\r\n            threatType: ThreatType.API_ABUSE,\r\n            severity: 9,\r\n            confidence: 0.95,\r\n            source: sourceIP,\r\n            target: activity.path,\r\n            timestamp: new Date(),\r\n            rawData: activity,\r\n            detectionMethod: 'suspicious_path_analysis',\r\n            recommendedActions: [\r\n              'Block access to sensitive endpoints',\r\n              'Alert security team immediately',\r\n              'Review access logs',\r\n              'Check for data exfiltration'\r\n            ]\r\n          });\r\n        }\r\n      }\r\n    }\r\n    \r\n    return threats;\r\n  }\r\n\r\n  /**\r\n   * Detect network scanning attempts\r\n   * Identifies port scanning and reconnaissance activities\r\n   * \r\n   * @param activity - Network activity\r\n   * @returns Promise<ThreatDetectionEvent[]> Network scanning threats\r\n   */\r\n  private async detectNetworkScanning(activity: NetworkActivity): Promise<ThreatDetectionEvent[]> {\r\n    const threats: ThreatDetectionEvent[] = [];\r\n    \r\n    // Check for suspicious user agents\r\n    if (activity.userAgent) {\r\n      for (const pattern of this.detectionRules.networkAnomaly.suspiciousUserAgents) {\r\n        if (pattern.test(activity.userAgent)) {\r\n          threats.push({\r\n            detectionId: this.generateDetectionId(),\r\n            threatType: ThreatType.NETWORK_SCANNING,\r\n            severity: 5,\r\n            confidence: 0.7,\r\n            source: activity.sourceIP,\r\n            target: 'NETWORK_INFRASTRUCTURE',\r\n            timestamp: new Date(),\r\n            rawData: activity,\r\n            detectionMethod: 'user_agent_analysis',\r\n            recommendedActions: [\r\n              'Monitor source IP for additional suspicious activity',\r\n              'Consider blocking automated tools'\r\n            ]\r\n          });\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Check for suspicious paths\r\n    if (activity.path) {\r\n      for (const pattern of this.detectionRules.networkAnomaly.suspiciousPaths) {\r\n        if (pattern.test(activity.path)) {\r\n          threats.push({\r\n            detectionId: this.generateDetectionId(),\r\n            threatType: ThreatType.NETWORK_SCANNING,\r\n            severity: 7,\r\n            confidence: 0.8,\r\n            source: activity.sourceIP,\r\n            target: activity.path,\r\n            timestamp: new Date(),\r\n            rawData: activity,\r\n            detectionMethod: 'suspicious_path_scanning',\r\n            recommendedActions: [\r\n              'Block access to sensitive paths',\r\n              'Monitor for additional scanning attempts',\r\n              'Alert security team'\r\n            ]\r\n          });\r\n        }\r\n      }\r\n    }\r\n    \r\n    return threats;\r\n  }\r\n\r\n  /**\r\n   * Detect DDoS attack patterns\r\n   * Identifies distributed denial of service attacks\r\n   * \r\n   * @param activity - Network activity\r\n   * @returns Promise<ThreatDetectionEvent[]> DDoS threats\r\n   */\r\n  private async detectDDoSAttack(activity: NetworkActivity): Promise<ThreatDetectionEvent[]> {\r\n    const threats: ThreatDetectionEvent[] = [];\r\n    \r\n    // Count connections per IP in recent activities\r\n    const recentActivities = this.networkActivities.filter(\r\n      a => Date.now() - a.timestamp.getTime() < 5 * 60 * 1000 // Last 5 minutes\r\n    );\r\n    \r\n    const connectionCounts = new Map<string, number>();\r\n    for (const recentActivity of recentActivities) {\r\n      const count = connectionCounts.get(recentActivity.sourceIP) || 0;\r\n      connectionCounts.set(recentActivity.sourceIP, count + 1);\r\n    }\r\n    \r\n    // Check for excessive connections from single IP\r\n    const currentIPCount = connectionCounts.get(activity.sourceIP) || 0;\r\n    if (currentIPCount > this.detectionRules.networkAnomaly.maxConnectionsPerIP) {\r\n      threats.push({\r\n        detectionId: this.generateDetectionId(),\r\n        threatType: ThreatType.DDOS_ATTACK,\r\n        severity: 9,\r\n        confidence: 0.85,\r\n        source: activity.sourceIP,\r\n        target: 'NETWORK_INFRASTRUCTURE',\r\n        timestamp: new Date(),\r\n        rawData: { connectionCount: currentIPCount, ...activity },\r\n        detectionMethod: 'connection_volume_analysis',\r\n        recommendedActions: [\r\n          'Implement DDoS protection',\r\n          'Block source IP immediately',\r\n          'Alert infrastructure team',\r\n          'Monitor network capacity'\r\n        ]\r\n      });\r\n    }\r\n    \r\n    return threats;\r\n  }\r\n\r\n  /**\r\n   * Create initial behavioral baseline for new entity\r\n   * Establishes normal behavior patterns\r\n   * \r\n   * @param entityId - Entity identifier\r\n   * @returns BehavioralBaseline Initial baseline\r\n   */\r\n  private createInitialBaseline(entityId: string): BehavioralBaseline {\r\n    return {\r\n      entityId,\r\n      normalPatterns: {\r\n        loginTimes: [],\r\n        apiCallFrequency: 0,\r\n        tradingVolume: 0,\r\n        geographicLocations: [],\r\n        deviceFingerprints: []\r\n      },\r\n      thresholds: {\r\n        maxDeviationScore: 5.0,\r\n        anomalyThreshold: 3.0,\r\n        suspiciousActivityThreshold: 7.0\r\n      },\r\n      lastUpdated: new Date()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculate behavioral deviation score\r\n   * Measures how much current activity deviates from normal patterns\r\n   * \r\n   * @param activity - Current activity\r\n   * @param baseline - Behavioral baseline\r\n   * @returns number Deviation score\r\n   */\r\n  private calculateBehavioralDeviation(activity: any, baseline: BehavioralBaseline): number {\r\n    let deviationScore = 0;\r\n    \r\n    // Time-based deviation\r\n    if (activity.loginTime && baseline.normalPatterns.loginTimes.length > 0) {\r\n      const avgLoginTime = baseline.normalPatterns.loginTimes.reduce((a, b) => a + b, 0) / \r\n                          baseline.normalPatterns.loginTimes.length;\r\n      const timeDeviation = Math.abs(activity.loginTime - avgLoginTime) / (60 * 60 * 1000); // Hours\r\n      deviationScore += Math.min(timeDeviation, 3);\r\n    }\r\n    \r\n    // Geographic deviation\r\n    if (activity.location && baseline.normalPatterns.geographicLocations.length > 0) {\r\n      if (!baseline.normalPatterns.geographicLocations.includes(activity.location)) {\r\n        deviationScore += 2;\r\n      }\r\n    }\r\n    \r\n    // Device fingerprint deviation\r\n    if (activity.deviceFingerprint && baseline.normalPatterns.deviceFingerprints.length > 0) {\r\n      if (!baseline.normalPatterns.deviceFingerprints.includes(activity.deviceFingerprint)) {\r\n        deviationScore += 1.5;\r\n      }\r\n    }\r\n    \r\n    return deviationScore;\r\n  }\r\n\r\n  /**\r\n   * Update behavioral baseline with new activity\r\n   * Incorporates new activity into normal behavior patterns\r\n   * \r\n   * @param entityId - Entity identifier\r\n   * @param activity - New activity data\r\n   */\r\n  private updateBehavioralBaseline(entityId: string, activity: any): void {\r\n    const baseline = this.behavioralBaselines.get(entityId);\r\n    if (!baseline) return;\r\n    \r\n    // Update login times (keep last 30)\r\n    if (activity.loginTime) {\r\n      baseline.normalPatterns.loginTimes.push(activity.loginTime);\r\n      if (baseline.normalPatterns.loginTimes.length > 30) {\r\n        baseline.normalPatterns.loginTimes.shift();\r\n      }\r\n    }\r\n    \r\n    // Update geographic locations (keep unique, max 10)\r\n    if (activity.location && !baseline.normalPatterns.geographicLocations.includes(activity.location)) {\r\n      baseline.normalPatterns.geographicLocations.push(activity.location);\r\n      if (baseline.normalPatterns.geographicLocations.length > 10) {\r\n        baseline.normalPatterns.geographicLocations.shift();\r\n      }\r\n    }\r\n    \r\n    // Update device fingerprints (keep unique, max 5)\r\n    if (activity.deviceFingerprint && !baseline.normalPatterns.deviceFingerprints.includes(activity.deviceFingerprint)) {\r\n      baseline.normalPatterns.deviceFingerprints.push(activity.deviceFingerprint);\r\n      if (baseline.normalPatterns.deviceFingerprints.length > 5) {\r\n        baseline.normalPatterns.deviceFingerprints.shift();\r\n      }\r\n    }\r\n    \r\n    baseline.lastUpdated = new Date();\r\n  }\r\n\r\n  /**\r\n   * Load behavioral baselines from storage\r\n   * Retrieves existing behavioral patterns\r\n   */\r\n  private loadBehavioralBaselines(): void {\r\n    // Implementation would load from secure storage\r\n    // For now, this is a placeholder\r\n    logger.debug('Loading behavioral baselines from storage');\r\n  }\r\n\r\n  /**\r\n   * Initialize detection algorithms\r\n   * Sets up machine learning models and detection rules\r\n   */\r\n  private initializeDetectionAlgorithms(): void {\r\n    // Implementation would initialize ML models\r\n    // For now, this is a placeholder\r\n    logger.debug('Initializing threat detection algorithms');\r\n  }\r\n\r\n  /**\r\n   * Set up event handlers\r\n   * Configures event handling for threat responses\r\n   */\r\n  private setupEventHandlers(): void {\r\n    this.on('threatDetected', async (threat: ThreatDetectionEvent) => {\r\n      try {\r\n        // Log threat detection\r\n        logger.security('THREAT_DETECTED', 'Security threat detected', {\r\n          detectionId: threat.detectionId,\r\n          threatType: threat.threatType,\r\n          severity: threat.severity,\r\n          source: threat.source,\r\n          classification: 'RESTRICTED'\r\n        });\r\n        \r\n        // Create audit entry\r\n        await auditService.createAuditEntry({\r\n          auditId: threat.detectionId,\r\n          eventType: 'THREAT_DETECTION',\r\n          actor: 'THREAT_DETECTION_ENGINE',\r\n          resource: threat.target,\r\n          action: 'DETECT_THREAT',\r\n          result: 'SUCCESS',\r\n          timestamp: threat.timestamp,\r\n          auditData: {\r\n            threatType: threat.threatType,\r\n            severity: threat.severity,\r\n            confidence: threat.confidence,\r\n            detectionMethod: threat.detectionMethod\r\n          }\r\n        });\r\n        \r\n        // Trigger automated response for high-severity threats\r\n        if (threat.severity >= 8) {\r\n          this.emit('highSeverityThreat', threat);\r\n        }\r\n        \r\n      } catch (error) {\r\n        logger.error('‚ùå Error handling threat detection:', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Start continuous monitoring processes\r\n   * Begins background monitoring and analysis\r\n   */\r\n  private startContinuousMonitoring(): void {\r\n    // Clean up old data every 5 minutes\r\n    setInterval(() => {\r\n      this.cleanupOldData();\r\n    }, 5 * 60 * 1000);\r\n    \r\n    // Update behavioral baselines every hour\r\n    setInterval(() => {\r\n      this.saveBehavioralBaselines();\r\n    }, 60 * 60 * 1000);\r\n  }\r\n\r\n  /**\r\n   * Clean up old monitoring data\r\n   * Removes expired data to prevent memory leaks\r\n   */\r\n  private cleanupOldData(): void {\r\n    const oneHourAgo = Date.now() - 60 * 60 * 1000;\r\n    \r\n    // Clean up failed login attempts\r\n    for (const [ip, attempts] of this.failedLoginAttempts.entries()) {\r\n      if (attempts.lastAttempt.getTime() < oneHourAgo) {\r\n        this.failedLoginAttempts.delete(ip);\r\n      }\r\n    }\r\n    \r\n    // Clean up API call tracking\r\n    for (const [ip, tracking] of this.apiCallTracking.entries()) {\r\n      if (tracking.windowStart.getTime() < oneHourAgo) {\r\n        this.apiCallTracking.delete(ip);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Save behavioral baselines to storage\r\n   * Persists behavioral patterns for future use\r\n   */\r\n  private saveBehavioralBaselines(): void {\r\n    // Implementation would save to secure storage\r\n    // For now, this is a placeholder\r\n    logger.debug('Saving behavioral baselines to storage');\r\n  }\r\n\r\n  /**\r\n   * Generate unique detection ID\r\n   * Creates identifier for threat detection events\r\n   * \r\n   * @returns string Unique detection ID\r\n   */\r\n  private generateDetectionId(): string {\r\n    const timestamp = Date.now().toString(36);\r\n    const random = Math.random().toString(36).substring(2);\r\n    return `threat_${timestamp}_${random}`;\r\n  }\r\n\r\n  /**\r\n   * Get threat detection engine status\r\n   * Returns current status for monitoring\r\n   * \r\n   * @returns Object containing status information\r\n   */\r\n  public getStatus(): {\r\n    behavioralBaselines: number;\r\n    suspiciousIPs: number;\r\n    recentActivities: number;\r\n    failedLoginAttempts: number;\r\n    timestamp: number;\r\n  } {\r\n    return {\r\n      behavioralBaselines: this.behavioralBaselines.size,\r\n      suspiciousIPs: this.suspiciousIPs.size,\r\n      recentActivities: this.networkActivities.length,\r\n      failedLoginAttempts: this.failedLoginAttempts.size,\r\n      timestamp: Date.now()\r\n    };\r\n  }\r\n}\r\n\r\n// Create and export singleton instance\r\nexport const threatDetectionEngine = new ThreatDetectionEngine();\r\n\r\n// =============================================================================\r\n// THREAT DETECTION SECURITY NOTES\r\n// =============================================================================\r\n// 1. Continuous monitoring of all system activities and network traffic\r\n// 2. Machine learning-based behavioral analysis for anomaly detection\r\n// 3. Real-time threat detection with automated response capabilities\r\n// 4. Comprehensive logging and audit trails for all threat detections\r\n// 5. Behavioral baselines are continuously updated and refined\r\n// 6. Multiple detection methods provide comprehensive threat coverage\r\n// 7. High-severity threats trigger immediate automated responses\r\n// 8. All threat data is securely stored and regularly cleaned up\r\n// =============================================================================\r\n"],"mappings":"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","ignoreList":[]}