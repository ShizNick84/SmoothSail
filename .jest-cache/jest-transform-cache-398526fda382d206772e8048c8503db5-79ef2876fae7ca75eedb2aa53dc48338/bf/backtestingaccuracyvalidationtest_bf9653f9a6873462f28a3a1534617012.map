{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\tests\\trading\\backtesting\\backtesting-accuracy-validation.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\tests\\trading\\backtesting\\backtesting-accuracy-validation.test.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * BACKTESTING ACCURACY AND RELIABILITY VALIDATION TESTS\r\n * =============================================================================\r\n * \r\n * Comprehensive tests to validate backtesting accuracy, reliability, and\r\n * performance metrics calculation. These tests ensure that the backtesting\r\n * engine produces accurate and consistent results with real market data.\r\n * \r\n * Requirements: 17.9, 17.10 - Backtesting accuracy and reliability validation\r\n * \r\n * CRITICAL FEATURES:\r\n * - Backtesting accuracy validation\r\n * - Performance metrics reliability testing\r\n * - Real data validation (no mock data)\r\n * - Execution simulation accuracy\r\n * - Risk management enforcement validation\r\n * - Statistical significance testing\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport { describe, test, expect, beforeEach, jest } from '@jest/globals';\r\nimport { BacktestingEngine } from '../../../trading/backtesting/backtesting-engine';\r\nimport { PerformanceCalculator } from '../../../trading/backtesting/performance-calculator';\r\nimport { HistoricalDataFetcher } from '../../../trading/backtesting/historical-data-fetcher';\r\nimport { \r\n  BacktestConfig, \r\n  BacktestResult,\r\n  BacktestTrade,\r\n  BacktestPortfolio,\r\n  HistoricalMarketData \r\n} from '../../../trading/backtesting/types';\r\nimport { TradingSignal } from '../../../trading/strategies/types';\r\nimport { GateIOClient } from '../../../trading/api/gate-io-client';\r\n\r\n// Mock GateIOClient for testing\r\nconst mockGateIOClient = {\r\n  makeRequest: jest.fn(),\r\n  getHistoricalData: jest.fn(),\r\n} as unknown as GateIOClient;\r\n\r\ndescribe('Backtesting Accuracy and Reliability Validation', () => {\r\n  let backtestingEngine: BacktestingEngine;\r\n  let historicalDataFetcher: HistoricalDataFetcher;\r\n  let sampleHistoricalData: HistoricalMarketData[];\r\n\r\n  beforeEach(() => {\r\n    backtestingEngine = new BacktestingEngine(mockGateIOClient);\r\n    historicalDataFetcher = new HistoricalDataFetcher(mockGateIOClient);\r\n    sampleHistoricalData = generateRealisticHistoricalData();\r\n  });\r\n\r\n  describe('Data Validation and Integrity', () => {\r\n    test('should validate real market data requirements', async () => {\r\n      const config: BacktestConfig = {\r\n        symbol: 'BTC_USDT',\r\n        startDate: new Date('2024-01-01'),\r\n        endDate: new Date('2024-01-31'),\r\n        initialBalance: 10000,\r\n        strategies: ['TestStrategy'],\r\n        slippage: 0.001,\r\n        fees: { maker: 0.002, taker: 0.002 },\r\n        riskManagement: {\r\n          maxRiskPerTrade: 0.02,\r\n          stopLossPercentage: 0.01,\r\n          minRiskRewardRatio: 1.3,\r\n          maxDrawdown: 0.2\r\n        }\r\n      };\r\n\r\n      const validation = await historicalDataFetcher.validateForBacktesting(sampleHistoricalData, config);\r\n      \r\n      expect(validation).toHaveProperty('isValid');\r\n      expect(validation).toHaveProperty('errors');\r\n      expect(validation).toHaveProperty('warnings');\r\n      expect(validation).toHaveProperty('totalPoints');\r\n      expect(validation).toHaveProperty('validPoints');\r\n      expect(validation).toHaveProperty('integrityScore');\r\n      expect(validation).toHaveProperty('gaps');\r\n      \r\n      // Validate data integrity requirements\r\n      expect(validation.totalPoints).toBeGreaterThan(0);\r\n      expect(validation.validPoints).toBeGreaterThan(0);\r\n      expect(validation.integrityScore).toBeGreaterThanOrEqual(0);\r\n      expect(validation.integrityScore).toBeLessThanOrEqual(100);\r\n      \r\n      // All data points should be validated as real\r\n      sampleHistoricalData.forEach(dataPoint => {\r\n        expect(dataPoint.validated).toBe(true);\r\n        expect(dataPoint.source).toBe('GATE_IO');\r\n        expect(dataPoint.integrity).toBeDefined();\r\n      });\r\n    });\r\n\r\n    test('should detect and reject mock data', async () => {\r\n      // Create mock data that should be rejected\r\n      const mockData: HistoricalMarketData[] = [\r\n        {\r\n          symbol: 'BTC_USDT',\r\n          timestamp: new Date('2024-01-01'),\r\n          open: 50000,\r\n          high: 50000,\r\n          low: 50000,\r\n          close: 50000, // Unrealistic - no price movement\r\n          volume: 1000000,\r\n          validated: false, // Not validated\r\n          source: 'MOCK',\r\n          integrity: 'mock_hash'\r\n        }\r\n      ];\r\n\r\n      const config: BacktestConfig = {\r\n        symbol: 'BTC_USDT',\r\n        startDate: new Date('2024-01-01'),\r\n        endDate: new Date('2024-01-31'),\r\n        initialBalance: 10000,\r\n        strategies: ['TestStrategy'],\r\n        slippage: 0.001,\r\n        fees: { maker: 0.002, taker: 0.002 },\r\n        riskManagement: {\r\n          maxRiskPerTrade: 0.02,\r\n          stopLossPercentage: 0.01,\r\n          minRiskRewardRatio: 1.3,\r\n          maxDrawdown: 0.2\r\n        }\r\n      };\r\n\r\n      const validation = await historicalDataFetcher.validateForBacktesting(mockData, config);\r\n      \r\n      expect(validation.isValid).toBe(false);\r\n      expect(validation.errors.some(error => error.includes('mock') || error.includes('validated'))).toBe(true);\r\n    });\r\n\r\n    test('should validate data completeness and gaps', async () => {\r\n      // Create data with gaps\r\n      const dataWithGaps: HistoricalMarketData[] = [\r\n        ...sampleHistoricalData.slice(0, 10),\r\n        // Gap here - missing 2 hours of data\r\n        ...sampleHistoricalData.slice(13, 20)\r\n      ];\r\n\r\n      const config: BacktestConfig = {\r\n        symbol: 'BTC_USDT',\r\n        startDate: new Date('2024-01-01'),\r\n        endDate: new Date('2024-01-31'),\r\n        initialBalance: 10000,\r\n        strategies: ['TestStrategy'],\r\n        slippage: 0.001,\r\n        fees: { maker: 0.002, taker: 0.002 },\r\n        riskManagement: {\r\n          maxRiskPerTrade: 0.02,\r\n          stopLossPercentage: 0.01,\r\n          minRiskRewardRatio: 1.3,\r\n          maxDrawdown: 0.2\r\n        }\r\n      };\r\n\r\n      const validation = await historicalDataFetcher.validateForBacktesting(dataWithGaps, config);\r\n      \r\n      expect(validation.gaps.length).toBeGreaterThan(0);\r\n      \r\n      // Large gaps should trigger warnings or errors\r\n      const largeGaps = validation.gaps.filter(gap => gap.durationMinutes > 60);\r\n      if (largeGaps.length > 0) {\r\n        expect(validation.warnings.length > 0 || validation.errors.length > 0).toBe(true);\r\n      }\r\n    });\r\n\r\n    test('should validate price data realism', async () => {\r\n      // Create unrealistic price data\r\n      const unrealisticData: HistoricalMarketData[] = [\r\n        {\r\n          symbol: 'BTC_USDT',\r\n          timestamp: new Date('2024-01-01T00:00:00Z'),\r\n          open: 50000,\r\n          high: 45000, // High < Open (impossible)\r\n          low: 55000,  // Low > Open (impossible)\r\n          close: 52000,\r\n          volume: 1000000,\r\n          validated: true,\r\n          source: 'GATE_IO',\r\n          integrity: 'test_hash'\r\n        }\r\n      ];\r\n\r\n      const config: BacktestConfig = {\r\n        symbol: 'BTC_USDT',\r\n        startDate: new Date('2024-01-01'),\r\n        endDate: new Date('2024-01-31'),\r\n        initialBalance: 10000,\r\n        strategies: ['TestStrategy'],\r\n        slippage: 0.001,\r\n        fees: { maker: 0.002, taker: 0.002 },\r\n        riskManagement: {\r\n          maxRiskPerTrade: 0.02,\r\n          stopLossPercentage: 0.01,\r\n          minRiskRewardRatio: 1.3,\r\n          maxDrawdown: 0.2\r\n        }\r\n      };\r\n\r\n      const validation = await historicalDataFetcher.validateForBacktesting(unrealisticData, config);\r\n      \r\n      expect(validation.isValid).toBe(false);\r\n      expect(validation.errors.some(error => \r\n        error.includes('high') || error.includes('low') || error.includes('price')\r\n      )).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('Performance Metrics Accuracy', () => {\r\n    test('should calculate accurate return metrics', () => {\r\n      const sampleTrades: BacktestTrade[] = [\r\n        createSampleTrade('1', 'BUY', 0.1, 50000, 52000, 190), // +3.8% return\r\n        createSampleTrade('2', 'BUY', 0.1, 52000, 51000, -110), // -2.1% return\r\n        createSampleTrade('3', 'BUY', 0.1, 51000, 53000, 190), // +3.9% return\r\n      ];\r\n\r\n      const samplePortfolio: BacktestPortfolio[] = [\r\n        createSamplePortfolio(new Date('2024-01-01'), 10000, 10000),\r\n        createSamplePortfolio(new Date('2024-01-31'), 10000, 10270) // Total: +270\r\n      ];\r\n\r\n      const performance = PerformanceCalculator.calculatePerformanceMetrics(\r\n        sampleTrades,\r\n        samplePortfolio,\r\n        10000\r\n      );\r\n\r\n      // Validate return calculations\r\n      expect(performance.totalReturn).toBe(270);\r\n      expect(performance.totalReturnPercentage).toBe(2.7);\r\n      \r\n      // Validate annualized return calculation\r\n      expect(performance.annualizedReturn).toBeGreaterThan(0);\r\n      expect(performance.annualizedReturn).toBeLessThan(100); // Reasonable bounds\r\n    });\r\n\r\n    test('should calculate accurate risk metrics', () => {\r\n      // Create returns with known statistical properties\r\n      const returns = [0.02, -0.01, 0.03, -0.015, 0.025, -0.005, 0.01]; // Mixed returns\r\n      \r\n      const riskMetrics = PerformanceCalculator.calculateRiskMetrics(returns);\r\n      \r\n      // Validate risk metric calculations\r\n      expect(riskMetrics.volatility).toBeGreaterThan(0);\r\n      expect(riskMetrics.downside_deviation).toBeGreaterThan(0);\r\n      expect(riskMetrics.var95).toBeLessThan(0); // VaR should be negative\r\n      expect(riskMetrics.cvar95).toBeLessThan(0); // CVaR should be negative\r\n      \r\n      // Downside deviation should be less than or equal to total volatility\r\n      expect(riskMetrics.downside_deviation).toBeLessThanOrEqual(riskMetrics.volatility);\r\n    });\r\n\r\n    test('should calculate accurate Sharpe ratio', () => {\r\n      // Create portfolio with known returns\r\n      const portfolioHistory: BacktestPortfolio[] = [];\r\n      let equity = 10000;\r\n      const dailyReturns = [0.01, 0.02, -0.005, 0.015, 0.008]; // 1%, 2%, -0.5%, 1.5%, 0.8%\r\n      \r\n      portfolioHistory.push(createSamplePortfolio(new Date('2024-01-01'), 10000, equity));\r\n      \r\n      for (let i = 0; i < dailyReturns.length; i++) {\r\n        equity *= (1 + dailyReturns[i]);\r\n        portfolioHistory.push(createSamplePortfolio(\r\n          new Date(Date.now() + (i + 1) * 24 * 60 * 60 * 1000),\r\n          10000,\r\n          equity\r\n        ));\r\n      }\r\n\r\n      const performance = PerformanceCalculator.calculatePerformanceMetrics(\r\n        [],\r\n        portfolioHistory,\r\n        10000\r\n      );\r\n\r\n      // Sharpe ratio should be reasonable for positive returns with moderate volatility\r\n      expect(performance.sharpeRatio).toBeGreaterThan(-5);\r\n      expect(performance.sharpeRatio).toBeLessThan(10);\r\n      \r\n      // For positive average returns, Sharpe should generally be positive\r\n      const avgReturn = dailyReturns.reduce((sum, r) => sum + r, 0) / dailyReturns.length;\r\n      if (avgReturn > 0.05) { // 5% risk-free rate assumption\r\n        expect(performance.sharpeRatio).toBeGreaterThan(0);\r\n      }\r\n    });\r\n\r\n    test('should calculate accurate drawdown metrics', () => {\r\n      // Create portfolio with known drawdown pattern\r\n      const portfolioHistory: BacktestPortfolio[] = [\r\n        createSamplePortfolio(new Date('2024-01-01'), 10000, 10000), // Start\r\n        createSamplePortfolio(new Date('2024-01-02'), 10000, 11000), // +10%\r\n        createSamplePortfolio(new Date('2024-01-03'), 10000, 10500), // -4.5% from peak\r\n        createSamplePortfolio(new Date('2024-01-04'), 10000, 9500),  // -13.6% from peak\r\n        createSamplePortfolio(new Date('2024-01-05'), 10000, 10800), // Recovery\r\n      ];\r\n\r\n      // Manually calculate drawdowns\r\n      let maxEquity = 10000;\r\n      for (const portfolio of portfolioHistory) {\r\n        if (portfolio.equity > maxEquity) {\r\n          maxEquity = portfolio.equity;\r\n        }\r\n        portfolio.drawdown = Math.max(0, maxEquity - portfolio.equity);\r\n        portfolio.drawdownPercentage = maxEquity > 0 ? (portfolio.drawdown / maxEquity) * 100 : 0;\r\n        portfolio.maxDrawdown = Math.max(portfolio.maxDrawdown, portfolio.drawdown);\r\n        portfolio.maxDrawdownPercentage = Math.max(portfolio.maxDrawdownPercentage, portfolio.drawdownPercentage);\r\n      }\r\n\r\n      const performance = PerformanceCalculator.calculatePerformanceMetrics(\r\n        [],\r\n        portfolioHistory,\r\n        10000\r\n      );\r\n\r\n      // Maximum drawdown should be 1500 (from 11000 to 9500)\r\n      expect(performance.maxDrawdown).toBe(1500);\r\n      expect(Math.abs(performance.maxDrawdownPercentage - 13.636363636363637)).toBeLessThan(0.01);\r\n    });\r\n\r\n    test('should calculate accurate trade statistics', () => {\r\n      const sampleTrades: BacktestTrade[] = [\r\n        createSampleTrade('1', 'BUY', 0.1, 50000, 52000, 190),  // Win: +190\r\n        createSampleTrade('2', 'BUY', 0.1, 52000, 51000, -110), // Loss: -110\r\n        createSampleTrade('3', 'BUY', 0.1, 51000, 53000, 190),  // Win: +190\r\n        createSampleTrade('4', 'BUY', 0.1, 53000, 52500, -60),  // Loss: -60\r\n        createSampleTrade('5', 'BUY', 0.1, 52500, 54000, 140),  // Win: +140\r\n      ];\r\n\r\n      const tradeStats = PerformanceCalculator.calculateTradeStatistics(sampleTrades);\r\n\r\n      // Validate trade statistics\r\n      expect(tradeStats.total).toBe(5);\r\n      expect(tradeStats.winning).toBe(3);\r\n      expect(tradeStats.losing).toBe(2);\r\n      expect(tradeStats.winRate).toBe(60); // 3/5 = 60%\r\n      \r\n      // Average win: (190 + 190 + 140) / 3 = 173.33\r\n      expect(Math.abs(tradeStats.averageWin - 173.33)).toBeLessThan(0.01);\r\n      \r\n      // Average loss: (110 + 60) / 2 = 85\r\n      expect(tradeStats.averageLoss).toBe(85);\r\n      \r\n      // Largest win and loss\r\n      expect(tradeStats.largestWin).toBe(190);\r\n      expect(tradeStats.largestLoss).toBe(110);\r\n    });\r\n  });\r\n\r\n  describe('Execution Simulation Accuracy', () => {\r\n    test('should apply realistic slippage calculations', async () => {\r\n      const mockStrategy = {\r\n        name: 'SlippageTestStrategy',\r\n        generateSignals: jest.fn().mockResolvedValue([\r\n          {\r\n            id: '1',\r\n            symbol: 'BTC/USDT',\r\n            type: 'BUY',\r\n            strength: 80,\r\n            confidence: 75,\r\n            indicators: ['RSI'],\r\n            reasoning: 'Slippage test signal',\r\n            riskReward: 2.0,\r\n            timestamp: new Date('2024-01-15T12:00:00Z')\r\n          }\r\n        ])\r\n      };\r\n\r\n      backtestingEngine.registerStrategy(mockStrategy);\r\n\r\n      const config: BacktestConfig = {\r\n        symbol: 'BTC_USDT',\r\n        startDate: new Date('2024-01-01'),\r\n        endDate: new Date('2024-01-31'),\r\n        initialBalance: 10000,\r\n        strategies: ['SlippageTestStrategy'],\r\n        slippage: 0.002, // 0.2% slippage\r\n        fees: { maker: 0.001, taker: 0.002 },\r\n        riskManagement: {\r\n          maxRiskPerTrade: 0.02,\r\n          stopLossPercentage: 0.01,\r\n          minRiskRewardRatio: 1.3,\r\n          maxDrawdown: 0.2\r\n        }\r\n      };\r\n\r\n      // Mock data fetcher\r\n      jest.spyOn(backtestingEngine['dataFetcher'], 'fetchForBacktest').mockResolvedValue(sampleHistoricalData);\r\n      jest.spyOn(backtestingEngine['dataFetcher'], 'validateForBacktesting').mockResolvedValue({\r\n        isValid: true,\r\n        errors: [],\r\n        warnings: [],\r\n        totalPoints: sampleHistoricalData.length,\r\n        validPoints: sampleHistoricalData.length,\r\n        integrityScore: 100,\r\n        gaps: []\r\n      });\r\n\r\n      const result = await backtestingEngine.runBacktest(config);\r\n\r\n      // Validate slippage application\r\n      if (result.executionDetails.length > 0) {\r\n        const trade = result.executionDetails[0];\r\n        \r\n        // Find corresponding market data\r\n        const marketData = sampleHistoricalData.find(d => \r\n          Math.abs(d.timestamp.getTime() - trade.entryTime.getTime()) < 60000 // Within 1 minute\r\n        );\r\n        \r\n        if (marketData) {\r\n          const expectedSlippage = marketData.close * config.slippage;\r\n          \r\n          // Slippage should be applied correctly\r\n          expect(trade.slippage).toBeGreaterThan(0);\r\n          expect(Math.abs(trade.slippage - expectedSlippage)).toBeLessThan(expectedSlippage * 0.1);\r\n          \r\n          // Entry price should include slippage\r\n          if (trade.type === 'BUY') {\r\n            expect(trade.entryPrice).toBeGreaterThan(marketData.close);\r\n          } else {\r\n            expect(trade.entryPrice).toBeLessThan(marketData.close);\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    test('should apply realistic fee calculations', async () => {\r\n      const mockStrategy = {\r\n        name: 'FeeTestStrategy',\r\n        generateSignals: jest.fn().mockResolvedValue([\r\n          {\r\n            id: '1',\r\n            symbol: 'BTC/USDT',\r\n            type: 'BUY',\r\n            strength: 80,\r\n            confidence: 75,\r\n            indicators: ['RSI'],\r\n            reasoning: 'Fee test signal',\r\n            riskReward: 2.0,\r\n            timestamp: new Date('2024-01-15T12:00:00Z')\r\n          }\r\n        ])\r\n      };\r\n\r\n      backtestingEngine.registerStrategy(mockStrategy);\r\n\r\n      const config: BacktestConfig = {\r\n        symbol: 'BTC_USDT',\r\n        startDate: new Date('2024-01-01'),\r\n        endDate: new Date('2024-01-31'),\r\n        initialBalance: 10000,\r\n        strategies: ['FeeTestStrategy'],\r\n        slippage: 0.001,\r\n        fees: { maker: 0.001, taker: 0.002 }, // 0.1% maker, 0.2% taker\r\n        riskManagement: {\r\n          maxRiskPerTrade: 0.02,\r\n          stopLossPercentage: 0.01,\r\n          minRiskRewardRatio: 1.3,\r\n          maxDrawdown: 0.2\r\n        }\r\n      };\r\n\r\n      jest.spyOn(backtestingEngine['dataFetcher'], 'fetchForBacktest').mockResolvedValue(sampleHistoricalData);\r\n      jest.spyOn(backtestingEngine['dataFetcher'], 'validateForBacktesting').mockResolvedValue({\r\n        isValid: true,\r\n        errors: [],\r\n        warnings: [],\r\n        totalPoints: sampleHistoricalData.length,\r\n        validPoints: sampleHistoricalData.length,\r\n        integrityScore: 100,\r\n        gaps: []\r\n      });\r\n\r\n      const result = await backtestingEngine.runBacktest(config);\r\n\r\n      // Validate fee calculations\r\n      if (result.executionDetails.length > 0) {\r\n        const trade = result.executionDetails[0];\r\n        \r\n        // Calculate expected fees\r\n        const positionValue = trade.quantity * trade.entryPrice;\r\n        const expectedFee = positionValue * config.fees.taker; // Assuming taker fee for market orders\r\n        \r\n        expect(trade.fees).toBeGreaterThan(0);\r\n        expect(Math.abs(trade.fees - expectedFee)).toBeLessThan(expectedFee * 0.01); // Within 1% tolerance\r\n      }\r\n    });\r\n\r\n    test('should simulate realistic order rejection', async () => {\r\n      const mockStrategy = {\r\n        name: 'RejectionTestStrategy',\r\n        generateSignals: jest.fn().mockResolvedValue(\r\n          // Generate many signals to test rejection probability\r\n          Array.from({ length: 100 }, (_, i) => ({\r\n            id: `${i}`,\r\n            symbol: 'BTC/USDT',\r\n            type: 'BUY' as const,\r\n            strength: 80,\r\n            confidence: 75,\r\n            indicators: ['RSI'],\r\n            reasoning: `Test signal ${i}`,\r\n            riskReward: 2.0,\r\n            timestamp: new Date(Date.now() + i * 60000)\r\n          }))\r\n        )\r\n      };\r\n\r\n      backtestingEngine.registerStrategy(mockStrategy);\r\n\r\n      const config: BacktestConfig = {\r\n        symbol: 'BTC_USDT',\r\n        startDate: new Date('2024-01-01'),\r\n        endDate: new Date('2024-01-31'),\r\n        initialBalance: 10000,\r\n        strategies: ['RejectionTestStrategy'],\r\n        slippage: 0.001,\r\n        fees: { maker: 0.001, taker: 0.002 },\r\n        riskManagement: {\r\n          maxRiskPerTrade: 0.02,\r\n          stopLossPercentage: 0.01,\r\n          minRiskRewardRatio: 1.3,\r\n          maxDrawdown: 0.2\r\n        }\r\n      };\r\n\r\n      // Create extended historical data for all signals\r\n      const extendedData = Array.from({ length: 100 }, (_, i) => ({\r\n        symbol: 'BTC_USDT',\r\n        timestamp: new Date(Date.now() + i * 60000),\r\n        open: 50000 + Math.random() * 1000,\r\n        high: 50500 + Math.random() * 1000,\r\n        low: 49500 + Math.random() * 1000,\r\n        close: 50000 + Math.random() * 1000,\r\n        volume: 1000000 + Math.random() * 500000,\r\n        validated: true,\r\n        source: 'GATE_IO' as const,\r\n        integrity: `hash_${i}`\r\n      }));\r\n\r\n      jest.spyOn(backtestingEngine['dataFetcher'], 'fetchForBacktest').mockResolvedValue(extendedData);\r\n      jest.spyOn(backtestingEngine['dataFetcher'], 'validateForBacktesting').mockResolvedValue({\r\n        isValid: true,\r\n        errors: [],\r\n        warnings: [],\r\n        totalPoints: extendedData.length,\r\n        validPoints: extendedData.length,\r\n        integrityScore: 100,\r\n        gaps: []\r\n      });\r\n\r\n      const result = await backtestingEngine.runBacktest(config);\r\n\r\n      // Some orders should be rejected (rejection probability is typically 1-5%)\r\n      const signalCount = 100;\r\n      const executedCount = result.executionDetails.length;\r\n      const rejectionRate = (signalCount - executedCount) / signalCount;\r\n      \r\n      // Rejection rate should be reasonable (0-10%)\r\n      expect(rejectionRate).toBeGreaterThanOrEqual(0);\r\n      expect(rejectionRate).toBeLessThan(0.1);\r\n    });\r\n  });\r\n\r\n  describe('Risk Management Enforcement', () => {\r\n    test('should enforce maximum risk per trade', async () => {\r\n      const mockStrategy = {\r\n        name: 'RiskTestStrategy',\r\n        generateSignals: jest.fn().mockResolvedValue([\r\n          {\r\n            id: '1',\r\n            symbol: 'BTC/USDT',\r\n            type: 'BUY',\r\n            strength: 90,\r\n            confidence: 85,\r\n            indicators: ['RSI'],\r\n            reasoning: 'High risk test',\r\n            riskReward: 2.0,\r\n            timestamp: new Date('2024-01-15T12:00:00Z')\r\n          }\r\n        ])\r\n      };\r\n\r\n      backtestingEngine.registerStrategy(mockStrategy);\r\n\r\n      const config: BacktestConfig = {\r\n        symbol: 'BTC_USDT',\r\n        startDate: new Date('2024-01-01'),\r\n        endDate: new Date('2024-01-31'),\r\n        initialBalance: 10000,\r\n        strategies: ['RiskTestStrategy'],\r\n        slippage: 0.001,\r\n        fees: { maker: 0.001, taker: 0.002 },\r\n        riskManagement: {\r\n          maxRiskPerTrade: 0.01, // 1% max risk\r\n          stopLossPercentage: 0.01, // 1% stop loss\r\n          minRiskRewardRatio: 1.3,\r\n          maxDrawdown: 0.2\r\n        }\r\n      };\r\n\r\n      jest.spyOn(backtestingEngine['dataFetcher'], 'fetchForBacktest').mockResolvedValue(sampleHistoricalData);\r\n      jest.spyOn(backtestingEngine['dataFetcher'], 'validateForBacktesting').mockResolvedValue({\r\n        isValid: true,\r\n        errors: [],\r\n        warnings: [],\r\n        totalPoints: sampleHistoricalData.length,\r\n        validPoints: sampleHistoricalData.length,\r\n        integrityScore: 100,\r\n        gaps: []\r\n      });\r\n\r\n      const result = await backtestingEngine.runBacktest(config);\r\n\r\n      // Validate risk per trade enforcement\r\n      if (result.executionDetails.length > 0) {\r\n        for (const trade of result.executionDetails) {\r\n          const positionValue = trade.quantity * trade.entryPrice;\r\n          const riskAmount = Math.abs(trade.entryPrice - trade.stopLoss) * trade.quantity;\r\n          const riskPercentage = riskAmount / config.initialBalance;\r\n          \r\n          // Risk should not exceed maximum\r\n          expect(riskPercentage).toBeLessThanOrEqual(config.riskManagement.maxRiskPerTrade * 1.1); // 10% tolerance\r\n        }\r\n      }\r\n    });\r\n\r\n    test('should enforce minimum risk-reward ratio', async () => {\r\n      const mockStrategy = {\r\n        name: 'RRTestStrategy',\r\n        generateSignals: jest.fn().mockResolvedValue([\r\n          {\r\n            id: '1',\r\n            symbol: 'BTC/USDT',\r\n            type: 'BUY',\r\n            strength: 80,\r\n            confidence: 75,\r\n            indicators: ['RSI'],\r\n            reasoning: 'Poor RR test',\r\n            riskReward: 0.8, // Below minimum\r\n            timestamp: new Date('2024-01-15T12:00:00Z')\r\n          },\r\n          {\r\n            id: '2',\r\n            symbol: 'BTC/USDT',\r\n            type: 'BUY',\r\n            strength: 80,\r\n            confidence: 75,\r\n            indicators: ['MACD'],\r\n            reasoning: 'Good RR test',\r\n            riskReward: 2.0, // Above minimum\r\n            timestamp: new Date('2024-01-16T12:00:00Z')\r\n          }\r\n        ])\r\n      };\r\n\r\n      backtestingEngine.registerStrategy(mockStrategy);\r\n\r\n      const config: BacktestConfig = {\r\n        symbol: 'BTC_USDT',\r\n        startDate: new Date('2024-01-01'),\r\n        endDate: new Date('2024-01-31'),\r\n        initialBalance: 10000,\r\n        strategies: ['RRTestStrategy'],\r\n        slippage: 0.001,\r\n        fees: { maker: 0.001, taker: 0.002 },\r\n        riskManagement: {\r\n          maxRiskPerTrade: 0.02,\r\n          stopLossPercentage: 0.01,\r\n          minRiskRewardRatio: 1.3, // Minimum 1.3:1\r\n          maxDrawdown: 0.2\r\n        }\r\n      };\r\n\r\n      jest.spyOn(backtestingEngine['dataFetcher'], 'fetchForBacktest').mockResolvedValue(sampleHistoricalData);\r\n      jest.spyOn(backtestingEngine['dataFetcher'], 'validateForBacktesting').mockResolvedValue({\r\n        isValid: true,\r\n        errors: [],\r\n        warnings: [],\r\n        totalPoints: sampleHistoricalData.length,\r\n        validPoints: sampleHistoricalData.length,\r\n        integrityScore: 100,\r\n        gaps: []\r\n      });\r\n\r\n      const result = await backtestingEngine.runBacktest(config);\r\n\r\n      // Only the signal with good RR should be executed\r\n      expect(result.trades.total).toBeLessThanOrEqual(1);\r\n      \r\n      // If any trades were executed, they should meet RR requirements\r\n      if (result.executionDetails.length > 0) {\r\n        for (const trade of result.executionDetails) {\r\n          const riskAmount = Math.abs(trade.entryPrice - trade.stopLoss);\r\n          const rewardAmount = Math.abs(trade.takeProfit - trade.entryPrice);\r\n          const actualRR = rewardAmount / riskAmount;\r\n          \r\n          expect(actualRR).toBeGreaterThanOrEqual(config.riskManagement.minRiskRewardRatio * 0.9); // 10% tolerance\r\n        }\r\n      }\r\n    });\r\n\r\n    test('should enforce maximum drawdown limits', async () => {\r\n      const mockStrategy = {\r\n        name: 'DrawdownTestStrategy',\r\n        generateSignals: jest.fn().mockResolvedValue([\r\n          // Generate signals that would cause large drawdown\r\n          {\r\n            id: '1',\r\n            symbol: 'BTC/USDT',\r\n            type: 'BUY',\r\n            strength: 80,\r\n            confidence: 75,\r\n            indicators: ['RSI'],\r\n            reasoning: 'Drawdown test 1',\r\n            riskReward: 2.0,\r\n            timestamp: new Date('2024-01-15T12:00:00Z')\r\n          }\r\n        ])\r\n      };\r\n\r\n      backtestingEngine.registerStrategy(mockStrategy);\r\n\r\n      const config: BacktestConfig = {\r\n        symbol: 'BTC_USDT',\r\n        startDate: new Date('2024-01-01'),\r\n        endDate: new Date('2024-01-31'),\r\n        initialBalance: 10000,\r\n        strategies: ['DrawdownTestStrategy'],\r\n        slippage: 0.001,\r\n        fees: { maker: 0.001, taker: 0.002 },\r\n        riskManagement: {\r\n          maxRiskPerTrade: 0.02,\r\n          stopLossPercentage: 0.01,\r\n          minRiskRewardRatio: 1.3,\r\n          maxDrawdown: 0.05 // 5% maximum drawdown\r\n        }\r\n      };\r\n\r\n      // Create data that would cause drawdown\r\n      const drawdownData = sampleHistoricalData.map((data, index) => ({\r\n        ...data,\r\n        close: data.close * (1 - index * 0.001) // Gradual decline\r\n      }));\r\n\r\n      jest.spyOn(backtestingEngine['dataFetcher'], 'fetchForBacktest').mockResolvedValue(drawdownData);\r\n      jest.spyOn(backtestingEngine['dataFetcher'], 'validateForBacktesting').mockResolvedValue({\r\n        isValid: true,\r\n        errors: [],\r\n        warnings: [],\r\n        totalPoints: drawdownData.length,\r\n        validPoints: drawdownData.length,\r\n        integrityScore: 100,\r\n        gaps: []\r\n      });\r\n\r\n      const result = await backtestingEngine.runBacktest(config);\r\n\r\n      // Maximum drawdown should not exceed the limit significantly\r\n      expect(result.performance.maxDrawdownPercentage).toBeLessThan(config.riskManagement.maxDrawdown * 100 * 1.5); // 50% tolerance for emergency stops\r\n    });\r\n  });\r\n\r\n  describe('Statistical Significance Testing', () => {\r\n    test('should validate statistical significance of results', async () => {\r\n      const mockStrategy = {\r\n        name: 'StatTestStrategy',\r\n        generateSignals: jest.fn().mockResolvedValue([\r\n          // Generate enough signals for statistical significance\r\n          ...Array.from({ length: 50 }, (_, i) => ({\r\n            id: `${i}`,\r\n            symbol: 'BTC/USDT',\r\n            type: (i % 2 === 0 ? 'BUY' : 'SELL') as 'BUY' | 'SELL',\r\n            strength: 70 + Math.random() * 20,\r\n            confidence: 65 + Math.random() * 20,\r\n            indicators: ['RSI'],\r\n            reasoning: `Statistical test signal ${i}`,\r\n            riskReward: 1.5 + Math.random(),\r\n            timestamp: new Date(Date.now() + i * 3600000) // 1 hour apart\r\n          }))\r\n        ])\r\n      };\r\n\r\n      backtestingEngine.registerStrategy(mockStrategy);\r\n\r\n      const config: BacktestConfig = {\r\n        symbol: 'BTC_USDT',\r\n        startDate: new Date('2024-01-01'),\r\n        endDate: new Date('2024-03-01'), // 2 months\r\n        initialBalance: 10000,\r\n        strategies: ['StatTestStrategy'],\r\n        slippage: 0.001,\r\n        fees: { maker: 0.001, taker: 0.002 },\r\n        riskManagement: {\r\n          maxRiskPerTrade: 0.02,\r\n          stopLossPercentage: 0.01,\r\n          minRiskRewardRatio: 1.3,\r\n          maxDrawdown: 0.2\r\n        }\r\n      };\r\n\r\n      // Create extended historical data\r\n      const extendedData = Array.from({ length: 1440 }, (_, i) => ({ // 60 days * 24 hours\r\n        symbol: 'BTC_USDT',\r\n        timestamp: new Date(Date.now() + i * 3600000),\r\n        open: 50000 + Math.sin(i * 0.01) * 2000 + Math.random() * 1000,\r\n        high: 50000 + Math.sin(i * 0.01) * 2000 + Math.random() * 1000 + 500,\r\n        low: 50000 + Math.sin(i * 0.01) * 2000 + Math.random() * 1000 - 500,\r\n        close: 50000 + Math.sin(i * 0.01) * 2000 + Math.random() * 1000,\r\n        volume: 1000000 + Math.random() * 500000,\r\n        validated: true,\r\n        source: 'GATE_IO' as const,\r\n        integrity: `hash_${i}`\r\n      }));\r\n\r\n      jest.spyOn(backtestingEngine['dataFetcher'], 'fetchForBacktest').mockResolvedValue(extendedData);\r\n      jest.spyOn(backtestingEngine['dataFetcher'], 'validateForBacktesting').mockResolvedValue({\r\n        isValid: true,\r\n        errors: [],\r\n        warnings: [],\r\n        totalPoints: extendedData.length,\r\n        validPoints: extendedData.length,\r\n        integrityScore: 100,\r\n        gaps: []\r\n      });\r\n\r\n      const result = await backtestingEngine.runBacktest(config);\r\n\r\n      // Validate statistical significance\r\n      expect(result.trades.total).toBeGreaterThan(10); // Minimum trades for significance\r\n      \r\n      if (result.trades.total > 30) {\r\n        // With enough trades, we can validate statistical properties\r\n        expect(result.performance.sharpeRatio).toBeGreaterThan(-3);\r\n        expect(result.performance.sharpeRatio).toBeLessThan(5);\r\n        \r\n        // Win rate should be within reasonable bounds\r\n        expect(result.trades.winRate).toBeGreaterThanOrEqual(0);\r\n        expect(result.trades.winRate).toBeLessThanOrEqual(100);\r\n        \r\n        // Profit factor should be reasonable\r\n        expect(result.performance.profitFactor).toBeGreaterThan(0);\r\n        expect(result.performance.profitFactor).toBeLessThan(10);\r\n      }\r\n    });\r\n\r\n    test('should validate consistency across multiple backtest runs', async () => {\r\n      const mockStrategy = {\r\n        name: 'ConsistencyStrategy',\r\n        generateSignals: jest.fn().mockResolvedValue([\r\n          {\r\n            id: '1',\r\n            symbol: 'BTC/USDT',\r\n            type: 'BUY',\r\n            strength: 75,\r\n            confidence: 70,\r\n            indicators: ['RSI'],\r\n            reasoning: 'Consistency test',\r\n            riskReward: 2.0,\r\n            timestamp: new Date('2024-01-15T12:00:00Z')\r\n          }\r\n        ])\r\n      };\r\n\r\n      backtestingEngine.registerStrategy(mockStrategy);\r\n\r\n      const config: BacktestConfig = {\r\n        symbol: 'BTC_USDT',\r\n        startDate: new Date('2024-01-01'),\r\n        endDate: new Date('2024-01-31'),\r\n        initialBalance: 10000,\r\n        strategies: ['ConsistencyStrategy'],\r\n        slippage: 0.001,\r\n        fees: { maker: 0.001, taker: 0.002 },\r\n        riskManagement: {\r\n          maxRiskPerTrade: 0.02,\r\n          stopLossPercentage: 0.01,\r\n          minRiskRewardRatio: 1.3,\r\n          maxDrawdown: 0.2\r\n        }\r\n      };\r\n\r\n      jest.spyOn(backtestingEngine['dataFetcher'], 'fetchForBacktest').mockResolvedValue(sampleHistoricalData);\r\n      jest.spyOn(backtestingEngine['dataFetcher'], 'validateForBacktesting').mockResolvedValue({\r\n        isValid: true,\r\n        errors: [],\r\n        warnings: [],\r\n        totalPoints: sampleHistoricalData.length,\r\n        validPoints: sampleHistoricalData.length,\r\n        integrityScore: 100,\r\n        gaps: []\r\n      });\r\n\r\n      // Run multiple backtests\r\n      const results = await Promise.all([\r\n        backtestingEngine.runBacktest(config),\r\n        backtestingEngine.runBacktest(config),\r\n        backtestingEngine.runBacktest(config)\r\n      ]);\r\n\r\n      // Results should be identical for deterministic backtesting\r\n      const [result1, result2, result3] = results;\r\n      \r\n      expect(result1.performance.totalReturnPercentage).toBe(result2.performance.totalReturnPercentage);\r\n      expect(result2.performance.totalReturnPercentage).toBe(result3.performance.totalReturnPercentage);\r\n      \r\n      expect(result1.trades.total).toBe(result2.trades.total);\r\n      expect(result2.trades.total).toBe(result3.trades.total);\r\n      \r\n      expect(result1.performance.maxDrawdownPercentage).toBe(result2.performance.maxDrawdownPercentage);\r\n      expect(result2.performance.maxDrawdownPercentage).toBe(result3.performance.maxDrawdownPercentage);\r\n    });\r\n  });\r\n\r\n  // Helper functions\r\n  function generateRealisticHistoricalData(): HistoricalMarketData[] {\r\n    const data: HistoricalMarketData[] = [];\r\n    let basePrice = 50000;\r\n    const baseVolume = 1000000;\r\n    \r\n    for (let i = 0; i < 100; i++) {\r\n      // Create realistic price movements with volatility and trends\r\n      const volatility = 0.02;\r\n      const trend = Math.sin(i * 0.05) * 0.001;\r\n      const randomWalk = (Math.random() - 0.5) * volatility;\r\n      \r\n      const priceChange = basePrice * (trend + randomWalk);\r\n      basePrice += priceChange;\r\n      \r\n      const open = basePrice - (Math.random() - 0.5) * basePrice * 0.005;\r\n      const close = basePrice + (Math.random() - 0.5) * basePrice * 0.005;\r\n      const high = Math.max(open, close) + Math.random() * basePrice * 0.01;\r\n      const low = Math.min(open, close) - Math.random() * basePrice * 0.01;\r\n      const volume = baseVolume * (0.5 + Math.random());\r\n      \r\n      data.push({\r\n        symbol: 'BTC_USDT',\r\n        timestamp: new Date(Date.now() - (100 - i) * 3600000), // 1 hour intervals\r\n        open,\r\n        high,\r\n        low,\r\n        close,\r\n        volume,\r\n        validated: true,\r\n        source: 'GATE_IO',\r\n        integrity: `hash_${i}`\r\n      });\r\n    }\r\n    \r\n    return data;\r\n  }\r\n\r\n  function createSampleTrade(\r\n    id: string,\r\n    type: 'BUY' | 'SELL',\r\n    quantity: number,\r\n    entryPrice: number,\r\n    exitPrice: number,\r\n    pnl: number\r\n  ): BacktestTrade {\r\n    return {\r\n      id,\r\n      symbol: 'BTC/USDT',\r\n      type,\r\n      quantity,\r\n      entryPrice,\r\n      exitPrice,\r\n      entryTime: new Date('2024-01-01'),\r\n      exitTime: new Date('2024-01-02'),\r\n      strategy: 'TestStrategy',\r\n      signal: {} as TradingSignal,\r\n      stopLoss: type === 'BUY' ? entryPrice * 0.99 : entryPrice * 1.01,\r\n      takeProfit: type === 'BUY' ? entryPrice * 1.02 : entryPrice * 0.98,\r\n      fees: 10,\r\n      slippage: 5,\r\n      status: 'CLOSED',\r\n      pnl,\r\n      pnlPercentage: (pnl / (entryPrice * quantity)) * 100\r\n    };\r\n  }\r\n\r\n  function createSamplePortfolio(\r\n    timestamp: Date,\r\n    balance: number,\r\n    equity: number\r\n  ): BacktestPortfolio {\r\n    return {\r\n      timestamp,\r\n      balance,\r\n      equity,\r\n      positions: [],\r\n      totalPnL: equity - balance,\r\n      unrealizedPnL: 0,\r\n      realizedPnL: equity - balance,\r\n      drawdown: 0,\r\n      drawdownPercentage: 0,\r\n      maxDrawdown: 0,\r\n      maxDrawdownPercentage: 0\r\n    };\r\n  }\r\n});"],"version":3}