d94fcf7d9698460ab28a415470dd5352
"use strict";
/**
 * =============================================================================
 * COMPREHENSIVE LOGGING AND PERFORMANCE MONITORING TESTS
 * =============================================================================
 *
 * Tests for Intel NUC performance monitoring, trading execution logging,
 * market analysis logging, and system performance metrics.
 *
 * @author AI Crypto Trading System
 * @version 1.0.0
 * =============================================================================
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const performance_monitor_1 = require("../../core/monitoring/performance-monitor");
const trading_logger_1 = require("../../core/logging/trading-logger");
const log_integration_1 = require("../../core/logging/log-integration");
const system_monitor_1 = require("../../infrastructure/system-monitor");
const performance_optimizer_1 = require("../../infrastructure/performance-optimizer");
const promises_1 = __importDefault(require("fs/promises"));
const path_1 = __importDefault(require("path"));
describe('Comprehensive Logging and Performance Monitoring Tests', () => {
    let systemMonitor;
    let performanceOptimizer;
    let testLogDir;
    beforeAll(async () => {
        // Initialize components
        systemMonitor = new system_monitor_1.SystemMonitor();
        performanceOptimizer = new performance_optimizer_1.PerformanceOptimizer(systemMonitor);
        // Create test log directory
        testLogDir = path_1.default.join(process.cwd(), 'test-logs');
        try {
            await promises_1.default.mkdir(testLogDir, { recursive: true });
        }
        catch (error) {
            // Directory might already exist
        }
    });
    afterAll(async () => {
        // Stop monitoring
        performance_monitor_1.performanceMonitor.stopMonitoring();
        // Clean up test logs
        try {
            await promises_1.default.rmdir(testLogDir, { recursive: true });
        }
        catch (error) {
            // Ignore cleanup errors
        }
    });
    describe('Intel NUC Performance Metrics Capture', () => {
        test('should capture CPU performance metrics correctly', async () => {
            console.log('üîç Testing Intel NUC CPU performance metrics capture...');
            // Start performance monitoring
            await performance_monitor_1.performanceMonitor.startMonitoring(5000);
            // Wait for initial metrics collection
            await new Promise(resolve => setTimeout(resolve, 6000));
            // Get performance history
            const history = performance_monitor_1.performanceMonitor.getPerformanceHistory();
            // Validate CPU metrics are captured
            expect(history.cpu_usage).toBeDefined();
            expect(Array.isArray(history.cpu_usage)).toBe(true);
            if (history.cpu_usage.length > 0) {
                const cpuUsage = history.cpu_usage[history.cpu_usage.length - 1];
                expect(cpuUsage).toBeGreaterThanOrEqual(0);
                expect(cpuUsage).toBeLessThanOrEqual(100);
                console.log('‚úÖ CPU usage captured:', cpuUsage.toFixed(2) + '%');
            }
            // Check if temperature is captured (Intel NUC specific)
            if (history.cpu_temperature && history.cpu_temperature.length > 0) {
                const temperature = history.cpu_temperature[history.cpu_temperature.length - 1];
                expect(temperature).toBeGreaterThan(0);
                expect(temperature).toBeLessThan(150);
                console.log('‚úÖ CPU temperature captured:', temperature.toFixed(1) + '¬∞C');
            }
            else {
                console.log('‚ö†Ô∏è CPU temperature not available (system dependent)');
            }
        });
        test('should capture memory performance metrics correctly', async () => {
            console.log('üîç Testing Intel NUC memory performance metrics capture...');
            const history = performance_monitor_1.performanceMonitor.getPerformanceHistory();
            // Validate memory metrics are captured
            expect(history.memory_usage).toBeDefined();
            expect(Array.isArray(history.memory_usage)).toBe(true);
            if (history.memory_usage.length > 0) {
                const memoryUsage = history.memory_usage[history.memory_usage.length - 1];
                expect(memoryUsage).toBeGreaterThanOrEqual(0);
                expect(memoryUsage).toBeLessThanOrEqual(100);
                console.log('‚úÖ Memory usage captured:', memoryUsage.toFixed(2) + '%');
            }
            // Check hardware info
            const hardwareInfo = performance_monitor_1.performanceMonitor.getHardwareInfo();
            if (hardwareInfo) {
                expect(hardwareInfo.memory.total).toBeGreaterThan(0);
                console.log('‚úÖ Total memory detected:', (hardwareInfo.memory.total / 1024 / 1024 / 1024).toFixed(2) + ' GB');
                if (hardwareInfo.memory.type !== 'Unknown') {
                    console.log('‚úÖ Memory type detected:', hardwareInfo.memory.type);
                }
            }
        });
        test('should capture disk performance metrics correctly', async () => {
            console.log('üîç Testing Intel NUC disk performance metrics capture...');
            const history = performance_monitor_1.performanceMonitor.getPerformanceHistory();
            // Validate disk metrics are captured
            expect(history.disk_usage).toBeDefined();
            expect(Array.isArray(history.disk_usage)).toBe(true);
            if (history.disk_usage.length > 0) {
                const diskUsage = history.disk_usage[history.disk_usage.length - 1];
                expect(diskUsage).toBeGreaterThanOrEqual(0);
                expect(diskUsage).toBeLessThanOrEqual(100);
                console.log('‚úÖ Disk usage captured:', diskUsage.toFixed(2) + '%');
            }
            // Check hardware info for storage
            const hardwareInfo = performance_monitor_1.performanceMonitor.getHardwareInfo();
            if (hardwareInfo && hardwareInfo.storage.capacity > 0) {
                console.log('‚úÖ Storage capacity detected:', (hardwareInfo.storage.capacity / 1024 / 1024 / 1024).toFixed(2) + ' GB');
                console.log('‚úÖ Storage type detected:', hardwareInfo.storage.type);
            }
        });
        test('should capture network performance metrics correctly', async () => {
            console.log('üîç Testing Intel NUC network performance metrics capture...');
            const history = performance_monitor_1.performanceMonitor.getPerformanceHistory();
            // Validate network metrics are captured
            expect(history.network_latency).toBeDefined();
            expect(Array.isArray(history.network_latency)).toBe(true);
            if (history.network_latency.length > 0) {
                const networkLatency = history.network_latency[history.network_latency.length - 1];
                expect(networkLatency).toBeGreaterThanOrEqual(0);
                console.log('‚úÖ Network latency captured:', networkLatency.toFixed(2) + 'ms');
            }
            // Check SSH tunnel latency if available
            if (history.ssh_tunnel_latency && history.ssh_tunnel_latency.length > 0) {
                const tunnelLatency = history.ssh_tunnel_latency[history.ssh_tunnel_latency.length - 1];
                expect(tunnelLatency).toBeGreaterThanOrEqual(0);
                console.log('‚úÖ SSH tunnel latency captured:', tunnelLatency.toFixed(2) + 'ms');
            }
            // Check API latency
            if (history.api_latency && history.api_latency.length > 0) {
                const apiLatency = history.api_latency[history.api_latency.length - 1];
                expect(apiLatency).toBeGreaterThanOrEqual(0);
                console.log('‚úÖ API latency captured:', apiLatency.toFixed(2) + 'ms');
            }
        });
    });
    describe('Trading Execution Logging with Decision Trails', () => {
        test('should log trading decisions with complete reasoning', async () => {
            console.log('üîç Testing trading execution logging with decision trails...');
            // Mock trading decision data
            const tradingDecision = {
                symbol: 'BTC/USDT',
                action: 'buy',
                amount: 0.001,
                price: 45000,
                confidence: 0.85,
                reasoning: {
                    technicalAnalysis: {
                        rsi: 35,
                        macd: 'bullish_crossover',
                        support: 44500,
                        resistance: 46000
                    },
                    sentimentAnalysis: {
                        score: 0.7,
                        sources: ['twitter', 'reddit', 'news'],
                        keywords: ['bullish', 'adoption', 'institutional']
                    },
                    riskAssessment: {
                        portfolioRisk: 0.15,
                        positionSize: 0.02,
                        stopLoss: 43000,
                        takeProfit: 47000
                    }
                },
                marketConditions: {
                    volatility: 0.25,
                    volume: 1500000,
                    trend: 'upward',
                    timeframe: '1h'
                }
            };
            // Log the trading decision
            trading_logger_1.tradingLogger.logTradingDecision(tradingDecision.symbol, tradingDecision.action, tradingDecision.amount, tradingDecision.price, tradingDecision.reasoning, tradingDecision.confidence);
            console.log('‚úÖ Trading decision logged with complete reasoning');
            console.log('  - Symbol:', tradingDecision.symbol);
            console.log('  - Action:', tradingDecision.action);
            console.log('  - Confidence:', (tradingDecision.confidence * 100).toFixed(1) + '%');
            console.log('  - Technical indicators included');
            console.log('  - Sentiment analysis included');
            console.log('  - Risk assessment included');
            // Test trade execution logging
            const executionResult = {
                orderId: 'order_12345',
                executedPrice: 45050,
                executedAmount: 0.001,
                fees: 0.45,
                slippage: 0.11,
                executionTime: 150
            };
            trading_logger_1.tradingLogger.logTradeExecution(tradingDecision.symbol, tradingDecision.action, executionResult.executedAmount, executionResult.executedPrice, executionResult);
            console.log('‚úÖ Trade execution logged with performance metrics');
            console.log('  - Execution time:', executionResult.executionTime + 'ms');
            console.log('  - Slippage:', executionResult.slippage.toFixed(2) + '%');
            console.log('  - Fees:', executionResult.fees.toFixed(2) + ' USDT');
        });
        test('should log market analysis and sentiment data with context', async () => {
            console.log('üîç Testing market analysis and sentiment logging...');
            // Mock market analysis data
            const marketAnalysis = {
                symbol: 'BTC/USDT',
                timestamp: new Date(),
                technicalIndicators: {
                    rsi: { value: 35, signal: 'oversold' },
                    macd: { value: 150, signal: 'bullish', histogram: 75 },
                    bollinger: { upper: 46500, middle: 45000, lower: 43500, position: 'lower' },
                    volume: { current: 1500000, average: 1200000, trend: 'increasing' }
                },
                sentimentAnalysis: {
                    overall: 0.7,
                    sources: {
                        twitter: { score: 0.8, volume: 15000, keywords: ['bullish', 'moon'] },
                        reddit: { score: 0.6, volume: 5000, keywords: ['hodl', 'buy'] },
                        news: { score: 0.7, volume: 50, keywords: ['adoption', 'institutional'] }
                    },
                    fearGreedIndex: 65
                },
                priceAction: {
                    current: 45000,
                    change24h: 2.5,
                    high24h: 45500,
                    low24h: 43800,
                    support: [44500, 43000, 42000],
                    resistance: [46000, 47500, 49000]
                }
            };
            // Log market analysis
            trading_logger_1.tradingLogger.logMarketAnalysis(marketAnalysis.symbol, marketAnalysis.technicalIndicators, marketAnalysis.sentimentAnalysis, marketAnalysis.priceAction);
            console.log('‚úÖ Market analysis logged with comprehensive data');
            console.log('  - Technical indicators: RSI, MACD, Bollinger Bands, Volume');
            console.log('  - Sentiment sources: Twitter, Reddit, News');
            console.log('  - Price action: Support/Resistance levels');
            console.log('  - Fear & Greed Index:', marketAnalysis.sentimentAnalysis.fearGreedIndex);
            // Test strategy decision logging
            const strategyDecision = {
                strategy: 'momentum_reversal',
                decision: 'enter_long',
                confidence: 0.82,
                parameters: {
                    rsiThreshold: 30,
                    macdConfirmation: true,
                    volumeConfirmation: true,
                    sentimentThreshold: 0.6
                },
                explanation: 'RSI oversold + MACD bullish crossover + high volume + positive sentiment'
            };
            trading_logger_1.tradingLogger.logStrategyDecision(marketAnalysis.symbol, strategyDecision.strategy, strategyDecision.decision, strategyDecision.confidence, strategyDecision.explanation, strategyDecision.parameters);
            console.log('‚úÖ Strategy decision logged with AI explanation');
            console.log('  - Strategy:', strategyDecision.strategy);
            console.log('  - Decision:', strategyDecision.decision);
            console.log('  - Explanation:', strategyDecision.explanation);
        });
    });
    describe('Performance Monitoring Alerts and Thresholds', () => {
        test('should trigger performance alerts when thresholds are exceeded', async () => {
            console.log('üîç Testing performance monitoring alerts and thresholds...');
            let alertTriggered = false;
            let alertData = null;
            // Set up alert listener
            performance_monitor_1.performanceMonitor.on('performance_warning', (data) => {
                alertTriggered = true;
                alertData = data;
                console.log('‚ö†Ô∏è Performance warning triggered:', data.component);
            });
            performance_monitor_1.performanceMonitor.on('critical_performance', (data) => {
                alertTriggered = true;
                alertData = data;
                console.log('üö® Critical performance alert triggered:', data.component);
            });
            // Update thresholds to trigger alerts more easily
            performance_monitor_1.performanceMonitor.updateThresholds({
                cpu: { warning: 10, critical: 20 },
                memory: { warning: 10, critical: 20 }
            });
            // Wait for monitoring cycle
            await new Promise(resolve => setTimeout(resolve, 6000));
            if (alertTriggered) {
                expect(alertData).toBeDefined();
                expect(alertData.component).toBeDefined();
                expect(alertData.status).toMatch(/warning|critical/);
                console.log('‚úÖ Performance alert system working correctly');
            }
            else {
                console.log('‚ÑπÔ∏è No performance alerts triggered (system performing well)');
            }
            // Reset thresholds to normal values
            performance_monitor_1.performanceMonitor.updateThresholds({
                cpu: { warning: 70, critical: 90 },
                memory: { warning: 80, critical: 95 }
            });
        });
        test('should validate log aggregation and analysis functionality', async () => {
            console.log('üîç Testing log aggregation and analysis functionality...');
            // Test log integration service
            const logStats = await log_integration_1.logIntegration.getLogStatistics();
            if (logStats) {
                expect(logStats).toBeDefined();
                console.log('‚úÖ Log statistics available');
                if (logStats.errorCount !== undefined) {
                    console.log('  - Error count:', logStats.errorCount);
                }
                if (logStats.warningCount !== undefined) {
                    console.log('  - Warning count:', logStats.warningCount);
                }
                if (logStats.totalEntries !== undefined) {
                    console.log('  - Total entries:', logStats.totalEntries);
                }
            }
            else {
                console.log('‚ÑπÔ∏è Log statistics not available (implementation dependent)');
            }
            // Test performance history aggregation
            const performanceHistory = performance_monitor_1.performanceMonitor.getPerformanceHistory();
            expect(performanceHistory).toBeDefined();
            expect(typeof performanceHistory).toBe('object');
            const metrics = Object.keys(performanceHistory);
            console.log('‚úÖ Performance metrics aggregated:', metrics.length, 'types');
            metrics.forEach(metric => {
                const values = performanceHistory[metric];
                if (values && values.length > 0) {
                    const avg = values.reduce((a, b) => a + b, 0) / values.length;
                    const min = Math.min(...values);
                    const max = Math.max(...values);
                    console.log(`  - ${metric}: avg=${avg.toFixed(2)}, min=${min.toFixed(2)}, max=${max.toFixed(2)}`);
                }
            });
        });
    });
    describe('Automated Reporting and Analytics Generation', () => {
        test('should generate performance reports with analytics', async () => {
            console.log('üîç Testing automated reporting and analytics generation...');
            // Generate system performance report
            const performanceHistory = performance_monitor_1.performanceMonitor.getPerformanceHistory();
            const hardwareInfo = performance_monitor_1.performanceMonitor.getHardwareInfo();
            const report = {
                timestamp: new Date(),
                reportType: 'system_performance',
                hardware: hardwareInfo,
                metrics: performanceHistory,
                analysis: {
                    systemHealth: 'healthy',
                    recommendations: [],
                    alerts: []
                }
            };
            // Analyze performance trends
            Object.keys(performanceHistory).forEach(metric => {
                const values = performanceHistory[metric];
                if (values && values.length >= 2) {
                    const recent = values.slice(-5);
                    const avg = recent.reduce((a, b) => a + b, 0) / recent.length;
                    const trend = recent[recent.length - 1] > recent[0] ? 'increasing' : 'decreasing';
                    report.analysis.recommendations.push({
                        metric,
                        average: avg,
                        trend,
                        recommendation: avg > 80 ? 'Monitor closely' : 'Normal operation'
                    });
                }
            });
            expect(report.timestamp).toBeDefined();
            expect(report.metrics).toBeDefined();
            expect(report.analysis).toBeDefined();
            console.log('‚úÖ Performance report generated successfully');
            console.log('  - Report type:', report.reportType);
            console.log('  - Metrics included:', Object.keys(report.metrics).length);
            console.log('  - Recommendations:', report.analysis.recommendations.length);
            // Test trading analytics report
            const tradingReport = {
                timestamp: new Date(),
                reportType: 'trading_analytics',
                period: '24h',
                summary: {
                    totalTrades: 15,
                    successfulTrades: 12,
                    successRate: 80,
                    totalProfit: 125.50,
                    totalFees: 12.30,
                    netProfit: 113.20
                },
                strategies: {
                    momentum_reversal: { trades: 8, profit: 85.20, successRate: 87.5 },
                    mean_reversion: { trades: 4, profit: 28.30, successRate: 75.0 },
                    breakout: { trades: 3, profit: 12.00, successRate: 66.7 }
                },
                marketConditions: {
                    avgVolatility: 0.25,
                    avgVolume: 1200000,
                    dominantTrend: 'sideways'
                }
            };
            expect(tradingReport.summary.successRate).toBeGreaterThan(0);
            expect(tradingReport.summary.netProfit).toBeGreaterThan(0);
            console.log('‚úÖ Trading analytics report generated');
            console.log('  - Success rate:', tradingReport.summary.successRate + '%');
            console.log('  - Net profit:', tradingReport.summary.netProfit.toFixed(2), 'USDT');
            console.log('  - Best strategy:', 'momentum_reversal');
        });
        test('should validate comprehensive logging continuity', async () => {
            console.log('üîç Testing comprehensive logging continuity...');
            // Test that logging continues during various operations
            const logOperations = [
                () => trading_logger_1.tradingLogger.info('Test info message'),
                () => trading_logger_1.tradingLogger.warn('Test warning message'),
                () => trading_logger_1.tradingLogger.error('Test error message', new Error('Test error')),
                () => trading_logger_1.tradingLogger.logTradingDecision('BTC/USDT', 'buy', 0.001, 45000, {}, 0.8),
                () => trading_logger_1.tradingLogger.logMarketAnalysis('BTC/USDT', {}, {}, {}),
                () => trading_logger_1.tradingLogger.logSystemPerformance({
                    component: 'test',
                    metrics: {},
                    thresholds: {},
                    status: 'healthy',
                    timestamp: new Date()
                })
            ];
            // Execute logging operations
            for (const operation of logOperations) {
                try {
                    operation();
                    console.log('‚úÖ Logging operation successful');
                }
                catch (error) {
                    console.log('‚ö†Ô∏è Logging operation failed:', error);
                }
            }
            // Test performance monitoring continuity
            const isMonitoring = performance_monitor_1.performanceMonitor.isMonitoringActive();
            expect(typeof isMonitoring).toBe('boolean');
            if (isMonitoring) {
                console.log('‚úÖ Performance monitoring is active and continuous');
            }
            else {
                console.log('‚ÑπÔ∏è Performance monitoring not currently active');
            }
            console.log('‚úÖ Logging continuity validated');
        });
    });
    describe('System Integration and Error Handling', () => {
        test('should handle logging errors gracefully', async () => {
            console.log('üîç Testing logging error handling...');
            // Test logging with invalid data
            try {
                trading_logger_1.tradingLogger.logTradingDecision('', 'invalid', -1, 0, null, 2);
                console.log('‚úÖ Invalid trading decision handled gracefully');
            }
            catch (error) {
                console.log('‚úÖ Invalid trading decision properly rejected');
            }
            // Test performance monitoring with invalid thresholds
            try {
                performance_monitor_1.performanceMonitor.updateThresholds({
                    cpu: { warning: -1, critical: -1 }
                });
                console.log('‚úÖ Invalid thresholds handled gracefully');
            }
            catch (error) {
                console.log('‚úÖ Invalid thresholds properly rejected');
            }
            console.log('‚úÖ Error handling validated');
        });
        test('should maintain performance during high load', async () => {
            console.log('üîç Testing performance under high logging load...');
            const startTime = Date.now();
            const logCount = 100;
            // Generate high volume of logs
            for (let i = 0; i < logCount; i++) {
                trading_logger_1.tradingLogger.info(`High load test message ${i}`, {
                    iteration: i,
                    timestamp: new Date(),
                    testData: 'performance_test'
                });
            }
            const endTime = Date.now();
            const duration = endTime - startTime;
            const logsPerSecond = (logCount / duration) * 1000;
            expect(duration).toBeLessThan(5000); // Should complete within 5 seconds
            console.log('‚úÖ High load logging performance test completed');
            console.log('  - Messages logged:', logCount);
            console.log('  - Duration:', duration + 'ms');
            console.log('  - Rate:', logsPerSecond.toFixed(2), 'logs/second');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,