{"version":3,"names":["fs_1","cov_gufsogc7m","s","require","path_1","TunnelConfigValidator","logger","constructor","f","validateConfiguration","config","result","isValid","errors","warnings","validateRequiredFields","validateOracleIP","oracleIP","validatePorts","validateSSHConfiguration","privateKeyPath","b","validatePrivateKey","validateTimeoutSettings","length","validatedConfig","normalizeConfiguration","info","errorCount","warningCount","error","push","Error","message","String","requiredFields","field","ipRegex","test","expectedOracleIP","isPrivateIP","sshPort","undefined","isValidPort","localPort","remotePort","username","spawn","sshCheck","stdio","Promise","resolve","reject","timeout","setTimeout","kill","on","code","clearTimeout","absolutePath","stats","promises","stat","isFile","access","constants","R_OK","size","keyContent","readFile","isValidPrivateKeyFormat","process","platform","mode","parseInt","connectionTimeout","serverAliveInterval","serverAliveCountMax","keepAlive","compression","ip","parts","split","map","Number","port","isInteger","validHeaders","some","header","includes","exports"],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\tunnel-config-validator.ts"],"sourcesContent":["import { promises as fs } from 'fs';\r\nimport { resolve } from 'path';\r\nimport { Logger } from '../core/logging/logger';\r\n\r\n/**\r\n * Tunnel Configuration Validation Result\r\n */\r\nexport interface ValidationResult {\r\n  /** Whether validation passed */\r\n  isValid: boolean;\r\n  /** Validation errors */\r\n  errors: string[];\r\n  /** Validation warnings */\r\n  warnings: string[];\r\n  /** Validated configuration */\r\n  validatedConfig?: TunnelConfigInput;\r\n}\r\n\r\n/**\r\n * Input configuration for tunnel validation\r\n */\r\nexport interface TunnelConfigInput {\r\n  oracleIP?: string;\r\n  sshPort?: number;\r\n  username?: string;\r\n  privateKeyPath?: string;\r\n  localPort?: number;\r\n  remotePort?: number;\r\n  keepAlive?: boolean;\r\n  compression?: boolean;\r\n  connectionTimeout?: number;\r\n  serverAliveInterval?: number;\r\n  serverAliveCountMax?: number;\r\n}\r\n\r\n/**\r\n * Tunnel Configuration Validator\r\n * Validates SSH tunnel configuration parameters and ensures system readiness\r\n */\r\nexport class TunnelConfigValidator {\r\n  private logger: Logger;\r\n\r\n  constructor(logger: Logger) {\r\n    this.logger = logger;\r\n  }\r\n\r\n  /**\r\n   * Validate complete tunnel configuration\r\n   * Performs comprehensive validation of all tunnel parameters\r\n   * \r\n   * @param config - Configuration to validate\r\n   * @returns Validation result with errors and warnings\r\n   */\r\n  async validateConfiguration(config: TunnelConfigInput): Promise<ValidationResult> {\r\n    const result: ValidationResult = {\r\n      isValid: true,\r\n      errors: [],\r\n      warnings: []\r\n    };\r\n\r\n    try {\r\n      // Validate required fields\r\n      this.validateRequiredFields(config, result);\r\n      \r\n      // Validate Oracle IP address\r\n      this.validateOracleIP(config.oracleIP, result);\r\n      \r\n      // Validate ports\r\n      this.validatePorts(config, result);\r\n      \r\n      // Validate SSH configuration\r\n      await this.validateSSHConfiguration(config, result);\r\n      \r\n      // Validate private key\r\n      if (config.privateKeyPath) {\r\n        await this.validatePrivateKey(config.privateKeyPath, result);\r\n      }\r\n      \r\n      // Validate timeout settings\r\n      this.validateTimeoutSettings(config, result);\r\n      \r\n      // Set final validation status\r\n      result.isValid = result.errors.length === 0;\r\n      \r\n      if (result.isValid) {\r\n        result.validatedConfig = this.normalizeConfiguration(config);\r\n      }\r\n\r\n      this.logger.info('Tunnel configuration validation completed', {\r\n        isValid: result.isValid,\r\n        errorCount: result.errors.length,\r\n        warningCount: result.warnings.length\r\n      });\r\n\r\n    } catch (error) {\r\n      result.isValid = false;\r\n      result.errors.push(`Validation error: ${error instanceof Error ? error.message : String(error)}`);\r\n      this.logger.error('Tunnel configuration validation failed', error);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Validate required configuration fields\r\n   * \r\n   * @param config - Configuration to validate\r\n   * @param result - Validation result to update\r\n   */\r\n  private validateRequiredFields(config: TunnelConfigInput, result: ValidationResult): void {\r\n    const requiredFields: (keyof TunnelConfigInput)[] = [\r\n      'oracleIP',\r\n      'username',\r\n      'privateKeyPath',\r\n      'localPort',\r\n      'remotePort'\r\n    ];\r\n\r\n    for (const field of requiredFields) {\r\n      if (!config[field]) {\r\n        result.errors.push(`Missing required field: ${field}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate Oracle Free Tier IP address\r\n   * \r\n   * @param oracleIP - IP address to validate\r\n   * @param result - Validation result to update\r\n   */\r\n  private validateOracleIP(oracleIP: string | undefined, result: ValidationResult): void {\r\n    if (!oracleIP) return;\r\n\r\n    // Validate IP format\r\n    const ipRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;\r\n    \r\n    if (!ipRegex.test(oracleIP)) {\r\n      result.errors.push(`Invalid IP address format: ${oracleIP}`);\r\n      return;\r\n    }\r\n\r\n    // Check if it's the expected Oracle Free Tier IP\r\n    const expectedOracleIP = '168.138.104.117';\r\n    if (oracleIP !== expectedOracleIP) {\r\n      result.warnings.push(`IP address ${oracleIP} differs from expected Oracle Free Tier IP: ${expectedOracleIP}`);\r\n    }\r\n\r\n    // Validate it's not a private/local IP\r\n    if (this.isPrivateIP(oracleIP)) {\r\n      result.warnings.push(`IP address ${oracleIP} appears to be a private IP address`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate port configurations\r\n   * \r\n   * @param config - Configuration to validate\r\n   * @param result - Validation result to update\r\n   */\r\n  private validatePorts(config: TunnelConfigInput, result: ValidationResult): void {\r\n    // Validate SSH port\r\n    if (config.sshPort !== undefined) {\r\n      if (!this.isValidPort(config.sshPort)) {\r\n        result.errors.push(`Invalid SSH port: ${config.sshPort}`);\r\n      } else if (config.sshPort !== 22) {\r\n        result.warnings.push(`Non-standard SSH port: ${config.sshPort}`);\r\n      }\r\n    }\r\n\r\n    // Validate local port\r\n    if (config.localPort !== undefined) {\r\n      if (!this.isValidPort(config.localPort)) {\r\n        result.errors.push(`Invalid local port: ${config.localPort}`);\r\n      } else if (config.localPort < 1024) {\r\n        result.warnings.push(`Local port ${config.localPort} requires elevated privileges`);\r\n      }\r\n    }\r\n\r\n    // Validate remote port\r\n    if (config.remotePort !== undefined) {\r\n      if (!this.isValidPort(config.remotePort)) {\r\n        result.errors.push(`Invalid remote port: ${config.remotePort}`);\r\n      }\r\n    }\r\n\r\n    // Check for port conflicts\r\n    if (config.localPort && config.remotePort && config.localPort === config.remotePort) {\r\n      result.warnings.push('Local and remote ports are the same, ensure this is intentional');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate SSH configuration parameters\r\n   * \r\n   * @param config - Configuration to validate\r\n   * @param result - Validation result to update\r\n   */\r\n  private async validateSSHConfiguration(config: TunnelConfigInput, result: ValidationResult): Promise<void> {\r\n    // Validate username\r\n    if (config.username) {\r\n      if (!/^[a-zA-Z0-9_-]+$/.test(config.username)) {\r\n        result.errors.push(`Invalid username format: ${config.username}`);\r\n      }\r\n    }\r\n\r\n    // Check SSH client availability\r\n    try {\r\n      const { spawn } = await import('child_process');\r\n      const sshCheck = spawn('ssh', ['-V'], { stdio: 'pipe' });\r\n      \r\n      await new Promise<void>((resolve, reject) => {\r\n        const timeout = setTimeout(() => {\r\n          sshCheck.kill();\r\n          reject(new Error('SSH client check timeout'));\r\n        }, 5000);\r\n\r\n        sshCheck.on('exit', (code) => {\r\n          clearTimeout(timeout);\r\n          if (code === 0 || code === null) {\r\n            resolve();\r\n          } else {\r\n            reject(new Error(`SSH client check failed with code: ${code}`));\r\n          }\r\n        });\r\n\r\n        sshCheck.on('error', (error) => {\r\n          clearTimeout(timeout);\r\n          reject(error);\r\n        });\r\n      });\r\n\r\n    } catch (error) {\r\n      result.warnings.push(`SSH client availability check failed: ${error instanceof Error ? error.message : String(error)}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate private key file\r\n   * \r\n   * @param privateKeyPath - Path to private key file\r\n   * @param result - Validation result to update\r\n   */\r\n  private async validatePrivateKey(privateKeyPath: string, result: ValidationResult): Promise<void> {\r\n    try {\r\n      // Resolve absolute path\r\n      const absolutePath = resolve(privateKeyPath);\r\n      \r\n      // Check if file exists\r\n      const stats = await fs.stat(absolutePath);\r\n      \r\n      if (!stats.isFile()) {\r\n        result.errors.push(`Private key path is not a file: ${privateKeyPath}`);\r\n        return;\r\n      }\r\n\r\n      // Check file permissions\r\n      try {\r\n        await fs.access(absolutePath, fs.constants.R_OK);\r\n      } catch {\r\n        result.errors.push(`Private key file is not readable: ${privateKeyPath}`);\r\n        return;\r\n      }\r\n\r\n      // Check file size (should not be empty)\r\n      if (stats.size === 0) {\r\n        result.errors.push(`Private key file is empty: ${privateKeyPath}`);\r\n        return;\r\n      }\r\n\r\n      // Validate key format\r\n      const keyContent = await fs.readFile(absolutePath, 'utf8');\r\n      if (!this.isValidPrivateKeyFormat(keyContent)) {\r\n        result.errors.push(`Invalid private key format: ${privateKeyPath}`);\r\n        return;\r\n      }\r\n\r\n      // Check file permissions (Unix-like systems)\r\n      if (process.platform !== 'win32') {\r\n        const mode = stats.mode & parseInt('777', 8);\r\n        if (mode & parseInt('077', 8)) {\r\n          result.warnings.push(`Private key file has overly permissive permissions: ${privateKeyPath}`);\r\n        }\r\n      }\r\n\r\n    } catch (error) {\r\n      result.errors.push(`Private key validation failed: ${error instanceof Error ? error.message : String(error)}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate timeout and connection settings\r\n   * \r\n   * @param config - Configuration to validate\r\n   * @param result - Validation result to update\r\n   */\r\n  private validateTimeoutSettings(config: TunnelConfigInput, result: ValidationResult): void {\r\n    // Validate connection timeout\r\n    if (config.connectionTimeout !== undefined) {\r\n      if (config.connectionTimeout < 1 || config.connectionTimeout > 300) {\r\n        result.errors.push(`Connection timeout must be between 1 and 300 seconds: ${config.connectionTimeout}`);\r\n      } else if (config.connectionTimeout < 10) {\r\n        result.warnings.push(`Connection timeout is very short: ${config.connectionTimeout}s`);\r\n      }\r\n    }\r\n\r\n    // Validate server alive interval\r\n    if (config.serverAliveInterval !== undefined) {\r\n      if (config.serverAliveInterval < 1 || config.serverAliveInterval > 3600) {\r\n        result.errors.push(`Server alive interval must be between 1 and 3600 seconds: ${config.serverAliveInterval}`);\r\n      }\r\n    }\r\n\r\n    // Validate server alive count max\r\n    if (config.serverAliveCountMax !== undefined) {\r\n      if (config.serverAliveCountMax < 1 || config.serverAliveCountMax > 10) {\r\n        result.errors.push(`Server alive count max must be between 1 and 10: ${config.serverAliveCountMax}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Normalize configuration with defaults\r\n   * \r\n   * @param config - Input configuration\r\n   * @returns Normalized configuration\r\n   */\r\n  private normalizeConfiguration(config: TunnelConfigInput): TunnelConfigInput {\r\n    return {\r\n      oracleIP: config.oracleIP || '168.138.104.117',\r\n      sshPort: config.sshPort || 22,\r\n      username: config.username,\r\n      privateKeyPath: config.privateKeyPath,\r\n      localPort: config.localPort,\r\n      remotePort: config.remotePort,\r\n      keepAlive: config.keepAlive !== false, // Default to true\r\n      compression: config.compression !== false, // Default to true\r\n      connectionTimeout: config.connectionTimeout || 30,\r\n      serverAliveInterval: config.serverAliveInterval || 60,\r\n      serverAliveCountMax: config.serverAliveCountMax || 3\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Check if IP address is private\r\n   * \r\n   * @param ip - IP address to check\r\n   * @returns True if private IP\r\n   */\r\n  private isPrivateIP(ip: string): boolean {\r\n    const parts = ip.split('.').map(Number);\r\n    \r\n    // 10.0.0.0/8\r\n    if (parts[0] === 10) return true;\r\n    \r\n    // 172.16.0.0/12\r\n    if (parts[0] === 172 && parts[1] >= 16 && parts[1] <= 31) return true;\r\n    \r\n    // 192.168.0.0/16\r\n    if (parts[0] === 192 && parts[1] === 168) return true;\r\n    \r\n    // 127.0.0.0/8 (localhost)\r\n    if (parts[0] === 127) return true;\r\n    \r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Validate port number\r\n   * \r\n   * @param port - Port number to validate\r\n   * @returns True if valid port\r\n   */\r\n  private isValidPort(port: number): boolean {\r\n    return Number.isInteger(port) && port >= 1 && port <= 65535;\r\n  }\r\n\r\n  /**\r\n   * Validate private key format\r\n   * \r\n   * @param keyContent - Private key content\r\n   * @returns True if valid format\r\n   */\r\n  private isValidPrivateKeyFormat(keyContent: string): boolean {\r\n    // Check for common private key headers\r\n    const validHeaders = [\r\n      '-----BEGIN RSA PRIVATE KEY-----',\r\n      '-----BEGIN DSA PRIVATE KEY-----',\r\n      '-----BEGIN EC PRIVATE KEY-----',\r\n      '-----BEGIN OPENSSH PRIVATE KEY-----',\r\n      '-----BEGIN PRIVATE KEY-----'\r\n    ];\r\n\r\n    return validHeaders.some(header => keyContent.includes(header));\r\n  }\r\n}\r\n"],"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","ignoreList":[]}