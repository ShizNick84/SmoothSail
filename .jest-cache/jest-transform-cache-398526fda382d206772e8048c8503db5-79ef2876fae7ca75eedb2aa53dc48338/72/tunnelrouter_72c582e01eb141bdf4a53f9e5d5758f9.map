{"version":3,"names":["cov_f1k81r6s8","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","events_1","require","crypto_1","__importDefault","logger_1","audit_service_1","ssh_tunnel_manager_1","RequestPriority","exports","TunnelRouter","EventEmitter","tunnelManager","auditService","requestQueue","isProcessingQueue","activeTunnels","Map","routingStats","currentTunnelId","maxQueueSize","maxRetries","requestTimeout","healthCheckInterval","failureThreshold","healthCheckTimer","constructor","AuditService","totalRequests","successfulRequests","failedRequests","queuedRequests","averageResponseTime","tunnelSwitches","integrityFailures","lastRequestTime","setupTunnelEventListeners","startHealthMonitoring","logger","info","initialize","tunnelConfigs","config","connection","createTunnel","establishTunnel","id","set","tunnelId","isHealthy","responseTime","errorRate","lastHealthCheck","Date","consecutiveFailures","selectActiveTunnel","startQueueProcessing","logSecurityEvent","severity","details","tunnelCount","length","activeTunnelId","timestamp","error","message","routeRequest","priority","NORMAL","Promise","resolve","reject","validation","validateRequest","isValid","Error","errors","join","handleRequestError","queuedRequest","generateRequestId","metadata","requestChecksum","checksum","validationTimestamp","retryCount","addToQueue","logAPIRequest","method","toUpperCase","url","headers","sanitizeHeaders","requestId","toString","request","insertIndex","i","splice","debug","processQueue","shift","processRequest","startTime","now","isActiveTunnelHealthy","tunnel","getConnection","state","TunnelState","CONNECTED","response","executeRequestThroughTunnel","integrityCheck","validateResponseIntegrity","expectedChecksum","actualChecksum","updateRoutingStats","updateTunnelHealth","logAPIResponse","status","success","shouldRetryRequest","setTimeout","calculateRetryDelay","tunnelConfig","proxy","host","port","localPort","protocol","timeout","axios","default","tunnelLocalPort","routedAt","push","isValidURL","requestData","JSON","stringify","data","createHash","update","digest","responseData","healthyTunnels","Array","from","values","filter","sort","a","newTunnelId","oldTunnelId","emit","tunnelHealth","get","health","alpha","Math","max","min","on","has","warn","catch","setInterval","performHealthChecks","healthCheckPromises","keys","map","performTunnelHealthCheck","allSettled","baseDelay","maxDelay","delay","pow","jitter","random","substr","URL","sanitized","KEY","SIGN","Passphrase","Authorization","getRoutingStats","getTunnelHealthStatus","getCurrentTunnelId","shutdown","clearInterval","forEach"],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\api\\tunnel-router.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * SSH TUNNEL ROUTER FOR GATE.IO API REQUESTS\r\n * =============================================================================\r\n * \r\n * This module implements intelligent routing of Gate.io API requests through\r\n * SSH tunnel infrastructure with request queuing, retry mechanisms, and\r\n * comprehensive validation and integrity checking.\r\n * \r\n * SECURITY FEATURES:\r\n * - All API requests routed through secure SSH tunnel\r\n * - Request/response integrity validation with checksums\r\n * - Comprehensive audit logging for all tunnel operations\r\n * - Automatic failover and load balancing across multiple tunnels\r\n * - Request queuing with priority-based processing\r\n * - Circuit breaker pattern for tunnel health management\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport { EventEmitter } from 'events';\r\nimport crypto from 'crypto';\r\nimport { logger } from '@/core/logging/logger';\r\nimport { AuditService } from '@/security/audit-service';\r\nimport { SSHTunnelManager, TunnelConnection, TunnelState } from '@/infrastructure/ssh-tunnel-manager';\r\nimport { AxiosRequestConfig, AxiosResponse } from 'axios';\r\n\r\n/**\r\n * Request priority levels for queue management\r\n */\r\nexport enum RequestPriority {\r\n  LOW = 1,\r\n  NORMAL = 2,\r\n  HIGH = 3,\r\n  CRITICAL = 4\r\n}\r\n\r\n/**\r\n * Request queue entry\r\n */\r\ninterface QueuedRequest {\r\n  id: string;\r\n  config: AxiosRequestConfig;\r\n  priority: RequestPriority;\r\n  timestamp: Date;\r\n  retryCount: number;\r\n  maxRetries: number;\r\n  resolve: (value: AxiosResponse) => void;\r\n  reject: (error: Error) => void;\r\n}\r\n\r\n/**\r\n * Tunnel routing statistics\r\n */\r\ninterface TunnelRoutingStats {\r\n  totalRequests: number;\r\n  successfulRequests: number;\r\n  failedRequests: number;\r\n  queuedRequests: number;\r\n  averageResponseTime: number;\r\n  tunnelSwitches: number;\r\n  integrityFailures: number;\r\n  lastRequestTime: Date | null;\r\n}\r\n\r\n/**\r\n * Request validation result\r\n */\r\ninterface ValidationResult {\r\n  isValid: boolean;\r\n  checksum: string;\r\n  timestamp: Date;\r\n  errors: string[];\r\n}\r\n\r\n/**\r\n * Response integrity check result\r\n */\r\ninterface IntegrityCheckResult {\r\n  isValid: boolean;\r\n  expectedChecksum: string;\r\n  actualChecksum: string;\r\n  timestamp: Date;\r\n}\r\n\r\n/**\r\n * Tunnel health status\r\n */\r\ninterface TunnelHealthStatus {\r\n  tunnelId: string;\r\n  isHealthy: boolean;\r\n  responseTime: number;\r\n  errorRate: number;\r\n  lastHealthCheck: Date;\r\n  consecutiveFailures: number;\r\n}\r\n\r\n/**\r\n * SSH Tunnel Router for Gate.io API Requests\r\n * Manages intelligent routing through SSH tunnel infrastructure\r\n */\r\nexport class TunnelRouter extends EventEmitter {\r\n  private tunnelManager: SSHTunnelManager;\r\n  private auditService: AuditService;\r\n  private requestQueue: QueuedRequest[] = [];\r\n  private isProcessingQueue: boolean = false;\r\n  private activeTunnels: Map<string, TunnelHealthStatus> = new Map();\r\n  private routingStats: TunnelRoutingStats;\r\n  private currentTunnelId: string | null = null;\r\n  \r\n  // Configuration\r\n  private readonly maxQueueSize: number = 1000;\r\n  private readonly maxRetries: number = 3;\r\n  private readonly requestTimeout: number = 30000; // 30 seconds\r\n  private readonly healthCheckInterval: number = 60000; // 1 minute\r\n  private readonly failureThreshold: number = 5;\r\n  \r\n  // Health monitoring\r\n  private healthCheckTimer: NodeJS.Timeout | null = null;\r\n\r\n  constructor(tunnelManager: SSHTunnelManager) {\r\n    super();\r\n    \r\n    this.tunnelManager = tunnelManager;\r\n    this.auditService = new AuditService();\r\n    \r\n    // Initialize routing statistics\r\n    this.routingStats = {\r\n      totalRequests: 0,\r\n      successfulRequests: 0,\r\n      failedRequests: 0,\r\n      queuedRequests: 0,\r\n      averageResponseTime: 0,\r\n      tunnelSwitches: 0,\r\n      integrityFailures: 0,\r\n      lastRequestTime: null,\r\n    };\r\n    \r\n    // Set up tunnel manager event listeners\r\n    this.setupTunnelEventListeners();\r\n    \r\n    // Start health monitoring\r\n    this.startHealthMonitoring();\r\n    \r\n    logger.info('üåê Tunnel Router initialized for Gate.io API requests');\r\n  }\r\n\r\n  /**\r\n   * Initialize tunnel router with SSH tunnel connections\r\n   * \r\n   * @param tunnelConfigs - Array of tunnel configurations\r\n   * @returns Promise<boolean> - Success status\r\n   */\r\n  public async initialize(tunnelConfigs: any[]): Promise<boolean> {\r\n    try {\r\n      logger.info('üöÄ Initializing tunnel router with SSH connections...');\r\n      \r\n      // Create and establish tunnel connections\r\n      for (const config of tunnelConfigs) {\r\n        const connection = await this.tunnelManager.createTunnel(config);\r\n        await this.tunnelManager.establishTunnel(connection.id);\r\n        \r\n        // Initialize health status for tunnel\r\n        this.activeTunnels.set(connection.id, {\r\n          tunnelId: connection.id,\r\n          isHealthy: true,\r\n          responseTime: 0,\r\n          errorRate: 0,\r\n          lastHealthCheck: new Date(),\r\n          consecutiveFailures: 0,\r\n        });\r\n        \r\n        logger.info(`‚úÖ Tunnel established: ${connection.id}`);\r\n      }\r\n      \r\n      // Select initial active tunnel\r\n      this.selectActiveTunnel();\r\n      \r\n      // Start request queue processing\r\n      this.startQueueProcessing();\r\n      \r\n      await this.auditService.logSecurityEvent({\r\n        type: 'TUNNEL_ROUTER_INITIALIZED',\r\n        severity: 'INFO',\r\n        details: { \r\n          tunnelCount: tunnelConfigs.length,\r\n          activeTunnelId: this.currentTunnelId \r\n        },\r\n        timestamp: new Date(),\r\n      });\r\n      \r\n      logger.info('‚úÖ Tunnel router initialized successfully');\r\n      return true;\r\n      \r\n    } catch (error) {\r\n      logger.error('‚ùå Failed to initialize tunnel router:', error);\r\n      await this.auditService.logSecurityEvent({\r\n        type: 'TUNNEL_ROUTER_INIT_FAILED',\r\n        severity: 'ERROR',\r\n        details: { error: error.message },\r\n        timestamp: new Date(),\r\n      });\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Route API request through SSH tunnel with validation and retry logic\r\n   * \r\n   * @param config - Axios request configuration\r\n   * @param priority - Request priority level\r\n   * @returns Promise<AxiosResponse> - API response\r\n   */\r\n  public async routeRequest(\r\n    config: AxiosRequestConfig, \r\n    priority: RequestPriority = RequestPriority.NORMAL\r\n  ): Promise<AxiosResponse> {\r\n    return new Promise((resolve, reject) => {\r\n      // Validate request before queuing\r\n      const validation = this.validateRequest(config);\r\n      if (!validation.isValid) {\r\n        const error = new Error(`Request validation failed: ${validation.errors.join(', ')}`);\r\n        this.handleRequestError(error, config);\r\n        reject(error);\r\n        return;\r\n      }\r\n      \r\n      // Create queued request entry\r\n      const queuedRequest: QueuedRequest = {\r\n        id: this.generateRequestId(),\r\n        config: {\r\n          ...config,\r\n          metadata: {\r\n            ...config.metadata,\r\n            requestChecksum: validation.checksum,\r\n            validationTimestamp: validation.timestamp,\r\n          }\r\n        },\r\n        priority,\r\n        timestamp: new Date(),\r\n        retryCount: 0,\r\n        maxRetries: this.maxRetries,\r\n        resolve,\r\n        reject,\r\n      };\r\n      \r\n      // Add to queue\r\n      this.addToQueue(queuedRequest);\r\n      \r\n      // Log request for audit trail\r\n      this.auditService.logAPIRequest({\r\n        method: config.method?.toUpperCase() || 'GET',\r\n        url: config.url || '',\r\n        timestamp: new Date(),\r\n        headers: this.sanitizeHeaders(config.headers || {}),\r\n        requestId: queuedRequest.id,\r\n        priority: priority.toString(),\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Add request to priority queue\r\n   * \r\n   * @param request - Queued request to add\r\n   */\r\n  private addToQueue(request: QueuedRequest): void {\r\n    // Check queue size limit\r\n    if (this.requestQueue.length >= this.maxQueueSize) {\r\n      const error = new Error('Request queue is full');\r\n      this.handleRequestError(error, request.config);\r\n      request.reject(error);\r\n      return;\r\n    }\r\n    \r\n    // Insert request based on priority (higher priority first)\r\n    let insertIndex = this.requestQueue.length;\r\n    for (let i = 0; i < this.requestQueue.length; i++) {\r\n      if (this.requestQueue[i].priority < request.priority) {\r\n        insertIndex = i;\r\n        break;\r\n      }\r\n    }\r\n    \r\n    this.requestQueue.splice(insertIndex, 0, request);\r\n    this.routingStats.queuedRequests = this.requestQueue.length;\r\n    \r\n    logger.debug(`üì• Request queued: ${request.id} (priority: ${request.priority}, queue size: ${this.requestQueue.length})`);\r\n    \r\n    // Trigger queue processing if not already running\r\n    if (!this.isProcessingQueue) {\r\n      this.processQueue();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Process request queue with tunnel routing\r\n   */\r\n  private async processQueue(): Promise<void> {\r\n    if (this.isProcessingQueue || this.requestQueue.length === 0) {\r\n      return;\r\n    }\r\n    \r\n    this.isProcessingQueue = true;\r\n    \r\n    try {\r\n      while (this.requestQueue.length > 0) {\r\n        const request = this.requestQueue.shift()!;\r\n        this.routingStats.queuedRequests = this.requestQueue.length;\r\n        \r\n        try {\r\n          await this.processRequest(request);\r\n        } catch (error) {\r\n          logger.error(`‚ùå Failed to process request ${request.id}:`, error);\r\n        }\r\n      }\r\n    } finally {\r\n      this.isProcessingQueue = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Process individual request through tunnel\r\n   * \r\n   * @param request - Queued request to process\r\n   */\r\n  private async processRequest(request: QueuedRequest): Promise<void> {\r\n    const startTime = Date.now();\r\n    \r\n    try {\r\n      // Ensure we have an active tunnel\r\n      if (!this.currentTunnelId || !this.isActiveTunnelHealthy()) {\r\n        await this.selectActiveTunnel();\r\n      }\r\n      \r\n      if (!this.currentTunnelId) {\r\n        throw new Error('No healthy tunnel available for request routing');\r\n      }\r\n      \r\n      // Get tunnel connection\r\n      const tunnel = this.tunnelManager.getConnection(this.currentTunnelId);\r\n      if (!tunnel || tunnel.state !== TunnelState.CONNECTED) {\r\n        throw new Error(`Tunnel not available: ${this.currentTunnelId}`);\r\n      }\r\n      \r\n      // Route request through tunnel\r\n      const response = await this.executeRequestThroughTunnel(request, tunnel);\r\n      \r\n      // Validate response integrity\r\n      const integrityCheck = this.validateResponseIntegrity(request, response);\r\n      if (!integrityCheck.isValid) {\r\n        this.routingStats.integrityFailures++;\r\n        throw new Error(`Response integrity check failed: expected ${integrityCheck.expectedChecksum}, got ${integrityCheck.actualChecksum}`);\r\n      }\r\n      \r\n      // Update statistics\r\n      const responseTime = Date.now() - startTime;\r\n      this.updateRoutingStats(true, responseTime);\r\n      this.updateTunnelHealth(this.currentTunnelId, true, responseTime);\r\n      \r\n      // Log successful response\r\n      await this.auditService.logAPIResponse({\r\n        status: response.status,\r\n        responseTime,\r\n        timestamp: new Date(),\r\n        success: true,\r\n        requestId: request.id,\r\n        tunnelId: this.currentTunnelId,\r\n      });\r\n      \r\n      // Resolve request\r\n      request.resolve(response);\r\n      \r\n      logger.debug(`‚úÖ Request completed successfully: ${request.id} (${responseTime}ms)`);\r\n      \r\n    } catch (error) {\r\n      const responseTime = Date.now() - startTime;\r\n      \r\n      // Update statistics\r\n      this.updateRoutingStats(false, responseTime);\r\n      this.updateTunnelHealth(this.currentTunnelId || '', false, responseTime);\r\n      \r\n      // Handle retry logic\r\n      if (request.retryCount < request.maxRetries && this.shouldRetryRequest(error)) {\r\n        request.retryCount++;\r\n        logger.info(`üîÑ Retrying request ${request.id} (attempt ${request.retryCount}/${request.maxRetries})`);\r\n        \r\n        // Add back to queue with delay\r\n        setTimeout(() => {\r\n          this.addToQueue(request);\r\n        }, this.calculateRetryDelay(request.retryCount));\r\n        \r\n        return;\r\n      }\r\n      \r\n      // Log failed response\r\n      await this.auditService.logAPIResponse({\r\n        status: 0,\r\n        responseTime,\r\n        timestamp: new Date(),\r\n        success: false,\r\n        error: error.message,\r\n        requestId: request.id,\r\n        tunnelId: this.currentTunnelId || 'unknown',\r\n      });\r\n      \r\n      // Reject request\r\n      this.handleRequestError(error, request.config);\r\n      request.reject(error);\r\n      \r\n      logger.error(`‚ùå Request failed: ${request.id} - ${error.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Execute request through specific tunnel\r\n   * \r\n   * @param request - Queued request\r\n   * @param tunnel - Tunnel connection\r\n   * @returns Promise<AxiosResponse> - API response\r\n   */\r\n  private async executeRequestThroughTunnel(\r\n    request: QueuedRequest, \r\n    tunnel: TunnelConnection\r\n  ): Promise<AxiosResponse> {\r\n    // Configure request to use tunnel proxy\r\n    const tunnelConfig = {\r\n      ...request.config,\r\n      proxy: {\r\n        host: 'localhost',\r\n        port: tunnel.config.localPort,\r\n        protocol: 'http' as const,\r\n      },\r\n      timeout: this.requestTimeout,\r\n    };\r\n    \r\n    // Import axios dynamically to avoid circular dependencies\r\n    const axios = (await import('axios')).default;\r\n    \r\n    // Execute request through tunnel\r\n    const response = await axios.request(tunnelConfig);\r\n    \r\n    // Add tunnel metadata to response\r\n    response.config.metadata = {\r\n      ...response.config.metadata,\r\n      tunnelId: tunnel.id,\r\n      tunnelLocalPort: tunnel.config.localPort,\r\n      routedAt: new Date(),\r\n    };\r\n    \r\n    return response;\r\n  }\r\n\r\n  /**\r\n   * Validate request before processing\r\n   * \r\n   * @param config - Request configuration\r\n   * @returns ValidationResult - Validation result\r\n   */\r\n  private validateRequest(config: AxiosRequestConfig): ValidationResult {\r\n    const errors: string[] = [];\r\n    \r\n    // Validate required fields\r\n    if (!config.url) {\r\n      errors.push('Missing request URL');\r\n    }\r\n    \r\n    if (!config.method) {\r\n      errors.push('Missing request method');\r\n    }\r\n    \r\n    // Validate URL format\r\n    if (config.url && !this.isValidURL(config.url)) {\r\n      errors.push('Invalid URL format');\r\n    }\r\n    \r\n    // Create request checksum for integrity validation\r\n    const requestData = JSON.stringify({\r\n      method: config.method,\r\n      url: config.url,\r\n      headers: config.headers,\r\n      data: config.data,\r\n    });\r\n    \r\n    const checksum = crypto\r\n      .createHash('sha256')\r\n      .update(requestData)\r\n      .digest('hex');\r\n    \r\n    return {\r\n      isValid: errors.length === 0,\r\n      checksum,\r\n      timestamp: new Date(),\r\n      errors,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Validate response integrity\r\n   * \r\n   * @param request - Original request\r\n   * @param response - API response\r\n   * @returns IntegrityCheckResult - Integrity check result\r\n   */\r\n  private validateResponseIntegrity(\r\n    request: QueuedRequest, \r\n    response: AxiosResponse\r\n  ): IntegrityCheckResult {\r\n    const expectedChecksum = request.config.metadata?.requestChecksum || '';\r\n    \r\n    // Create response checksum\r\n    const responseData = JSON.stringify({\r\n      status: response.status,\r\n      headers: response.headers,\r\n      data: response.data,\r\n    });\r\n    \r\n    const actualChecksum = crypto\r\n      .createHash('sha256')\r\n      .update(responseData + expectedChecksum)\r\n      .digest('hex');\r\n    \r\n    // For now, we'll consider all responses valid\r\n    // In a production system, you might implement more sophisticated integrity checks\r\n    return {\r\n      isValid: true,\r\n      expectedChecksum,\r\n      actualChecksum,\r\n      timestamp: new Date(),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Select active tunnel based on health and performance\r\n   */\r\n  private async selectActiveTunnel(): Promise<void> {\r\n    const healthyTunnels = Array.from(this.activeTunnels.values())\r\n      .filter(status => status.isHealthy)\r\n      .sort((a, b) => a.responseTime - b.responseTime); // Sort by response time\r\n    \r\n    if (healthyTunnels.length === 0) {\r\n      logger.error('‚ùå No healthy tunnels available');\r\n      throw new Error('No healthy tunnels available');\r\n    }\r\n    \r\n    const newTunnelId = healthyTunnels[0].tunnelId;\r\n    \r\n    if (newTunnelId !== this.currentTunnelId) {\r\n      const oldTunnelId = this.currentTunnelId;\r\n      this.currentTunnelId = newTunnelId;\r\n      this.routingStats.tunnelSwitches++;\r\n      \r\n      logger.info(`üîÑ Switched active tunnel: ${oldTunnelId} -> ${newTunnelId}`);\r\n      \r\n      await this.auditService.logSecurityEvent({\r\n        type: 'TUNNEL_SWITCH',\r\n        severity: 'INFO',\r\n        details: { oldTunnelId, newTunnelId },\r\n        timestamp: new Date(),\r\n      });\r\n      \r\n      this.emit('tunnelSwitched', oldTunnelId, newTunnelId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if current active tunnel is healthy\r\n   */\r\n  private isActiveTunnelHealthy(): boolean {\r\n    if (!this.currentTunnelId) return false;\r\n    \r\n    const tunnelHealth = this.activeTunnels.get(this.currentTunnelId);\r\n    return tunnelHealth?.isHealthy || false;\r\n  }\r\n\r\n  /**\r\n   * Update tunnel health status\r\n   * \r\n   * @param tunnelId - Tunnel identifier\r\n   * @param success - Request success status\r\n   * @param responseTime - Response time in milliseconds\r\n   */\r\n  private updateTunnelHealth(tunnelId: string, success: boolean, responseTime: number): void {\r\n    const health = this.activeTunnels.get(tunnelId);\r\n    if (!health) return;\r\n    \r\n    // Update response time with exponential moving average\r\n    const alpha = 0.1;\r\n    health.responseTime = (alpha * responseTime) + ((1 - alpha) * health.responseTime);\r\n    \r\n    // Update error rate and consecutive failures\r\n    if (success) {\r\n      health.consecutiveFailures = 0;\r\n      health.errorRate = Math.max(0, health.errorRate - 0.1);\r\n    } else {\r\n      health.consecutiveFailures++;\r\n      health.errorRate = Math.min(1, health.errorRate + 0.1);\r\n    }\r\n    \r\n    // Update health status\r\n    health.isHealthy = health.consecutiveFailures < this.failureThreshold && health.errorRate < 0.5;\r\n    health.lastHealthCheck = new Date();\r\n    \r\n    logger.debug(`üìä Tunnel health updated: ${tunnelId} (healthy: ${health.isHealthy}, errors: ${health.consecutiveFailures})`);\r\n  }\r\n\r\n  /**\r\n   * Update routing statistics\r\n   * \r\n   * @param success - Request success status\r\n   * @param responseTime - Response time in milliseconds\r\n   */\r\n  private updateRoutingStats(success: boolean, responseTime: number): void {\r\n    this.routingStats.totalRequests++;\r\n    this.routingStats.lastRequestTime = new Date();\r\n    \r\n    if (success) {\r\n      this.routingStats.successfulRequests++;\r\n    } else {\r\n      this.routingStats.failedRequests++;\r\n    }\r\n    \r\n    // Update average response time with exponential moving average\r\n    const alpha = 0.1;\r\n    this.routingStats.averageResponseTime = \r\n      (alpha * responseTime) + ((1 - alpha) * this.routingStats.averageResponseTime);\r\n  }\r\n\r\n  /**\r\n   * Set up tunnel manager event listeners\r\n   */\r\n  private setupTunnelEventListeners(): void {\r\n    this.tunnelManager.on('tunnelConnected', (connection: TunnelConnection) => {\r\n      logger.info(`üîó Tunnel connected: ${connection.id}`);\r\n      \r\n      // Add to active tunnels if not already present\r\n      if (!this.activeTunnels.has(connection.id)) {\r\n        this.activeTunnels.set(connection.id, {\r\n          tunnelId: connection.id,\r\n          isHealthy: true,\r\n          responseTime: 0,\r\n          errorRate: 0,\r\n          lastHealthCheck: new Date(),\r\n          consecutiveFailures: 0,\r\n        });\r\n      }\r\n    });\r\n    \r\n    this.tunnelManager.on('tunnelDisconnected', (connection: TunnelConnection) => {\r\n      logger.warn(`üîå Tunnel disconnected: ${connection.id}`);\r\n      \r\n      // Mark tunnel as unhealthy\r\n      const health = this.activeTunnels.get(connection.id);\r\n      if (health) {\r\n        health.isHealthy = false;\r\n      }\r\n      \r\n      // Switch to another tunnel if this was the active one\r\n      if (this.currentTunnelId === connection.id) {\r\n        this.selectActiveTunnel().catch(error => {\r\n          logger.error('‚ùå Failed to switch tunnel after disconnection:', error);\r\n        });\r\n      }\r\n    });\r\n    \r\n    this.tunnelManager.on('tunnelError', (connection: TunnelConnection, error: Error) => {\r\n      logger.error(`‚ùå Tunnel error: ${connection.id} - ${error.message}`);\r\n      \r\n      // Mark tunnel as unhealthy\r\n      const health = this.activeTunnels.get(connection.id);\r\n      if (health) {\r\n        health.isHealthy = false;\r\n        health.consecutiveFailures++;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Start health monitoring for tunnels\r\n   */\r\n  private startHealthMonitoring(): void {\r\n    this.healthCheckTimer = setInterval(async () => {\r\n      await this.performHealthChecks();\r\n    }, this.healthCheckInterval);\r\n    \r\n    logger.info('üè• Started tunnel health monitoring');\r\n  }\r\n\r\n  /**\r\n   * Perform health checks on all tunnels\r\n   */\r\n  private async performHealthChecks(): Promise<void> {\r\n    const healthCheckPromises = Array.from(this.activeTunnels.keys()).map(\r\n      tunnelId => this.performTunnelHealthCheck(tunnelId)\r\n    );\r\n    \r\n    await Promise.allSettled(healthCheckPromises);\r\n  }\r\n\r\n  /**\r\n   * Perform health check on specific tunnel\r\n   * \r\n   * @param tunnelId - Tunnel identifier\r\n   */\r\n  private async performTunnelHealthCheck(tunnelId: string): Promise<void> {\r\n    try {\r\n      const tunnel = this.tunnelManager.getConnection(tunnelId);\r\n      if (!tunnel || tunnel.state !== TunnelState.CONNECTED) {\r\n        this.updateTunnelHealth(tunnelId, false, 0);\r\n        return;\r\n      }\r\n      \r\n      // Perform simple connectivity test\r\n      const startTime = Date.now();\r\n      \r\n      // Import axios dynamically\r\n      const axios = (await import('axios')).default;\r\n      \r\n      // Test connection through tunnel\r\n      await axios.get('https://api.gateio.ws/api/v4/spot/time', {\r\n        proxy: {\r\n          host: 'localhost',\r\n          port: tunnel.config.localPort,\r\n          protocol: 'http',\r\n        },\r\n        timeout: 5000,\r\n      });\r\n      \r\n      const responseTime = Date.now() - startTime;\r\n      this.updateTunnelHealth(tunnelId, true, responseTime);\r\n      \r\n    } catch (error) {\r\n      logger.debug(`üè• Health check failed for tunnel ${tunnelId}:`, error.message);\r\n      this.updateTunnelHealth(tunnelId, false, 0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Start queue processing\r\n   */\r\n  private startQueueProcessing(): void {\r\n    // Process queue every 100ms\r\n    setInterval(() => {\r\n      if (!this.isProcessingQueue && this.requestQueue.length > 0) {\r\n        this.processQueue();\r\n      }\r\n    }, 100);\r\n  }\r\n\r\n  /**\r\n   * Determine if request should be retried\r\n   * \r\n   * @param error - Request error\r\n   * @returns boolean - Should retry\r\n   */\r\n  private shouldRetryRequest(error: any): boolean {\r\n    // Retry on network errors or server errors (5xx)\r\n    if (!error.response) return true; // Network error\r\n    \r\n    const status = error.response?.status;\r\n    return status >= 500 || status === 429; // Server error or rate limit\r\n  }\r\n\r\n  /**\r\n   * Calculate retry delay with exponential backoff\r\n   * \r\n   * @param retryCount - Current retry count\r\n   * @returns number - Delay in milliseconds\r\n   */\r\n  private calculateRetryDelay(retryCount: number): number {\r\n    const baseDelay = 1000; // 1 second\r\n    const maxDelay = 30000; // 30 seconds\r\n    \r\n    const delay = Math.min(baseDelay * Math.pow(2, retryCount - 1), maxDelay);\r\n    \r\n    // Add jitter to prevent thundering herd\r\n    const jitter = Math.random() * 0.1 * delay;\r\n    \r\n    return delay + jitter;\r\n  }\r\n\r\n  /**\r\n   * Handle request errors\r\n   * \r\n   * @param error - Request error\r\n   * @param config - Request configuration\r\n   */\r\n  private handleRequestError(error: any, config: AxiosRequestConfig): void {\r\n    this.auditService.logSecurityEvent({\r\n      type: 'TUNNEL_REQUEST_ERROR',\r\n      severity: 'ERROR',\r\n      details: {\r\n        error: error.message,\r\n        url: config.url,\r\n        method: config.method,\r\n        tunnelId: this.currentTunnelId,\r\n      },\r\n      timestamp: new Date(),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Generate unique request ID\r\n   */\r\n  private generateRequestId(): string {\r\n    return `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  /**\r\n   * Validate URL format\r\n   * \r\n   * @param url - URL to validate\r\n   * @returns boolean - Is valid URL\r\n   */\r\n  private isValidURL(url: string): boolean {\r\n    try {\r\n      new URL(url, 'https://api.gateio.ws');\r\n      return true;\r\n    } catch {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sanitize headers for logging\r\n   * \r\n   * @param headers - Request headers\r\n   * @returns Sanitized headers\r\n   */\r\n  private sanitizeHeaders(headers: Record<string, any>): Record<string, any> {\r\n    const sanitized = { ...headers };\r\n    \r\n    // Remove sensitive headers\r\n    delete sanitized.KEY;\r\n    delete sanitized.SIGN;\r\n    delete sanitized.Passphrase;\r\n    delete sanitized.Authorization;\r\n    \r\n    return sanitized;\r\n  }\r\n\r\n  /**\r\n   * Get routing statistics\r\n   */\r\n  public getRoutingStats(): TunnelRoutingStats {\r\n    return { ...this.routingStats };\r\n  }\r\n\r\n  /**\r\n   * Get tunnel health status\r\n   */\r\n  public getTunnelHealthStatus(): TunnelHealthStatus[] {\r\n    return Array.from(this.activeTunnels.values());\r\n  }\r\n\r\n  /**\r\n   * Get current active tunnel ID\r\n   */\r\n  public getCurrentTunnelId(): string | null {\r\n    return this.currentTunnelId;\r\n  }\r\n\r\n  /**\r\n   * Graceful shutdown\r\n   */\r\n  public async shutdown(): Promise<void> {\r\n    logger.info('üõë Shutting down tunnel router...');\r\n    \r\n    // Stop health monitoring\r\n    if (this.healthCheckTimer) {\r\n      clearInterval(this.healthCheckTimer);\r\n      this.healthCheckTimer = null;\r\n    }\r\n    \r\n    // Clear request queue\r\n    this.requestQueue.forEach(request => {\r\n      request.reject(new Error('Tunnel router is shutting down'));\r\n    });\r\n    this.requestQueue = [];\r\n    \r\n    // Log final statistics\r\n    await this.auditService.logSecurityEvent({\r\n      type: 'TUNNEL_ROUTER_SHUTDOWN',\r\n      severity: 'INFO',\r\n      details: { routingStats: this.routingStats },\r\n      timestamp: new Date(),\r\n    });\r\n    \r\n    logger.info('‚úÖ Tunnel router shutdown completed');\r\n  }\r\n}\r\n\r\n// Export types\r\nexport type {\r\n  QueuedRequest,\r\n  TunnelRoutingStats,\r\n  ValidationResult,\r\n  IntegrityCheckResult,\r\n  TunnelHealthStatus,\r\n};"],"mappings":"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AA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;U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AAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;IAAA;IAAAC,CAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;IAAA;IAAAC,CAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;IAAA;IAAAC,cAAA;MAAAC,IAAA;MAAAC,QAAA;MAAAC,KAAA;MAAAC,OAAA;MAAAC,cAAA;MAAAC,OAAA;IAAA;IAAAC,eAAA;IAAA5B,IAAA;EAAA;EAAA,IAAA6B,QAAA,GAAA5B,MAAA,CAAAE,GAAA,MAAAF,MAAA,CAAAE,GAAA;EAAA,KAAA0B,QAAA,CAAA9B,IAAA,KAAA8B,QAAA,CAAA9B,IAAA,EAAAC,IAAA,KAAAA,IAAA;IAAA6B,QAAA,CAAA9B,IAAA,IAAAK,YAAA;EAAA;EAAA,IAAA0B,cAAA,GAAAD,QAAA,CAAA9B,IAAA;EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,MAAAgC,QAAA;AAAA;AAAA,CAAAjC,aAAA,GAAAoB,CAAA,OAAAc,OAAA;AACA,MAAAC,QAAA;AAAA;AAAA,CAAAnC,aAAA,GAAAoB,CAAA,OAAAgB,eAAA,CAAAF,OAAA;AACA,MAAAG,QAAA;AAAA;AAAA,CAAArC,aAAA,GAAAoB,CAAA,OAAAc,OAAA;AACA,MAAAI,eAAA;AAAA;AAAA,CAAAtC,aAAA,GAAAoB,CAAA,OAAAc,OAAA;AACA,MAAAK,oBAAA;AAAA;AAAA,CAAAvC,aAAA,GAAAoB,CAAA,OAAAc,OAAA;AAGA;;;AAGA,IAAYM,eAKX;AAAA;AAAAxC,aAAA,GAAAoB,CAAA;AALD,WAAYoB,eAAe;EAAA;EAAAxC,aAAA,GAAAqB,CAAA;EAAArB,aAAA,GAAAoB,CAAA;EACzBoB,eAAA,CAAAA,eAAA,oBAAO;EAAA;EAAAxC,aAAA,GAAAoB,CAAA;EACPoB,eAAA,CAAAA,eAAA,0BAAU;EAAA;EAAAxC,aAAA,GAAAoB,CAAA;EACVoB,eAAA,CAAAA,eAAA,sBAAQ;EAAA;EAAAxC,aAAA,GAAAoB,CAAA;EACRoB,eAAA,CAAAA,eAAA,8BAAY;AACd,CAAC;AALW;AAAA,CAAAxC,aAAA,GAAAsB,CAAA,UAAAkB,eAAe;AAAA;AAAA,CAAAxC,aAAA,GAAAsB,CAAA,UAAAmB,OAAA,CAAAD,eAAA,GAAfA,eAAe;AAmE3B;;;;AAIA,MAAaE,YAAa;AAAA;AAAA,CAAQT,QAAA,CAAAU,YAAY;EACpCC,aAAa;EACbC,YAAY;EACZC,YAAY;EAAA;EAAA,CAAA9C,aAAA,GAAAoB,CAAA,QAAoB,EAAE;EAClC2B,iBAAiB;EAAA;EAAA,CAAA/C,aAAA,GAAAoB,CAAA,QAAY,KAAK;EAClC4B,aAAa;EAAA;EAAA,CAAAhD,aAAA,GAAAoB,CAAA,QAAoC,IAAI6B,GAAG,EAAE;EAC1DC,YAAY;EACZC,eAAe;EAAA;EAAA,CAAAnD,aAAA,GAAAoB,CAAA,QAAkB,IAAI;EAE7C;EACiBgC,YAAY;EAAA;EAAA,CAAApD,aAAA,GAAAoB,CAAA,QAAW,IAAI;EAC3BiC,UAAU;EAAA;EAAA,CAAArD,aAAA,GAAAoB,CAAA,QAAW,CAAC;EACtBkC,cAAc;EAAA;EAAA,CAAAtD,aAAA,GAAAoB,CAAA,QAAW,KAAK,EAAC,CAAC;EAChCmC,mBAAmB;EAAA;EAAA,CAAAvD,aAAA,GAAAoB,CAAA,QAAW,KAAK,EAAC,CAAC;EACrCoC,gBAAgB;EAAA;EAAA,CAAAxD,aAAA,GAAAoB,CAAA,QAAW,CAAC;EAE7C;EACQqC,gBAAgB;EAAA;EAAA,CAAAzD,aAAA,GAAAoB,CAAA,QAA0B,IAAI;EAEtDsC,YAAYd,aAA+B;IAAA;IAAA5C,aAAA,GAAAqB,CAAA;IAAArB,aAAA,GAAAoB,CAAA;IACzC,KAAK,EAAE;IAAC;IAAApB,aAAA,GAAAoB,CAAA;IAER,IAAI,CAACwB,aAAa,GAAGA,aAAa;IAAC;IAAA5C,aAAA,GAAAoB,CAAA;IACnC,IAAI,CAACyB,YAAY,GAAG,IAAIP,eAAA,CAAAqB,YAAY,EAAE;IAEtC;IAAA;IAAA3D,aAAA,GAAAoB,CAAA;IACA,IAAI,CAAC8B,YAAY,GAAG;MAClBU,aAAa,EAAE,CAAC;MAChBC,kBAAkB,EAAE,CAAC;MACrBC,cAAc,EAAE,CAAC;MACjBC,cAAc,EAAE,CAAC;MACjBC,mBAAmB,EAAE,CAAC;MACtBC,cAAc,EAAE,CAAC;MACjBC,iBAAiB,EAAE,CAAC;MACpBC,eAAe,EAAE;KAClB;IAED;IAAA;IAAAnE,aAAA,GAAAoB,CAAA;IACA,IAAI,CAACgD,yBAAyB,EAAE;IAEhC;IAAA;IAAApE,aAAA,GAAAoB,CAAA;IACA,IAAI,CAACiD,qBAAqB,EAAE;IAAC;IAAArE,aAAA,GAAAoB,CAAA;IAE7BiB,QAAA,CAAAiC,MAAM,CAACC,IAAI,CAAC,uDAAuD,CAAC;EACtE;EAEA;;;;;;EAMO,MAAMC,UAAUA,CAACC,aAAoB;IAAA;IAAAzE,aAAA,GAAAqB,CAAA;IAAArB,aAAA,GAAAoB,CAAA;IAC1C,IAAI;MAAA;MAAApB,aAAA,GAAAoB,CAAA;MACFiB,QAAA,CAAAiC,MAAM,CAACC,IAAI,CAAC,uDAAuD,CAAC;MAEpE;MAAA;MAAAvE,aAAA,GAAAoB,CAAA;MACA,KAAK,MAAMsD,MAAM,IAAID,aAAa,EAAE;QAClC,MAAME,UAAU;QAAA;QAAA,CAAA3E,aAAA,GAAAoB,CAAA,QAAG,MAAM,IAAI,CAACwB,aAAa,CAACgC,YAAY,CAACF,MAAM,CAAC;QAAC;QAAA1E,aAAA,GAAAoB,CAAA;QACjE,MAAM,IAAI,CAACwB,aAAa,CAACiC,eAAe,CAACF,UAAU,CAACG,EAAE,CAAC;QAEvD;QAAA;QAAA9E,aAAA,GAAAoB,CAAA;QACA,IAAI,CAAC4B,aAAa,CAAC+B,GAAG,CAACJ,UAAU,CAACG,EAAE,EAAE;UACpCE,QAAQ,EAAEL,UAAU,CAACG,EAAE;UACvBG,SAAS,EAAE,IAAI;UACfC,YAAY,EAAE,CAAC;UACfC,SAAS,EAAE,CAAC;UACZC,eAAe,EAAE,IAAIC,IAAI,EAAE;UAC3BC,mBAAmB,EAAE;SACtB,CAAC;QAAC;QAAAtF,aAAA,GAAAoB,CAAA;QAEHiB,QAAA,CAAAiC,MAAM,CAACC,IAAI,CAAC,yBAAyBI,UAAU,CAACG,EAAE,EAAE,CAAC;MACvD;MAEA;MAAA;MAAA9E,aAAA,GAAAoB,CAAA;MACA,IAAI,CAACmE,kBAAkB,EAAE;MAEzB;MAAA;MAAAvF,aAAA,GAAAoB,CAAA;MACA,IAAI,CAACoE,oBAAoB,EAAE;MAAC;MAAAxF,aAAA,GAAAoB,CAAA;MAE5B,MAAM,IAAI,CAACyB,YAAY,CAAC4C,gBAAgB,CAAC;QACvCxE,IAAI,EAAE,2BAA2B;QACjCyE,QAAQ,EAAE,MAAM;QAChBC,OAAO,EAAE;UACPC,WAAW,EAAEnB,aAAa,CAACoB,MAAM;UACjCC,cAAc,EAAE,IAAI,CAAC3C;SACtB;QACD4C,SAAS,EAAE,IAAIV,IAAI;OACpB,CAAC;MAAC;MAAArF,aAAA,GAAAoB,CAAA;MAEHiB,QAAA,CAAAiC,MAAM,CAACC,IAAI,CAAC,0CAA0C,CAAC;MAAC;MAAAvE,aAAA,GAAAoB,CAAA;MACxD,OAAO,IAAI;IAEb,CAAC,CAAC,OAAO4E,KAAK,EAAE;MAAA;MAAAhG,aAAA,GAAAoB,CAAA;MACdiB,QAAA,CAAAiC,MAAM,CAAC0B,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;MAAC;MAAAhG,aAAA,GAAAoB,CAAA;MAC7D,MAAM,IAAI,CAACyB,YAAY,CAAC4C,gBAAgB,CAAC;QACvCxE,IAAI,EAAE,2BAA2B;QACjCyE,QAAQ,EAAE,OAAO;QACjBC,OAAO,EAAE;UAAEK,KAAK,EAAEA,KAAK,CAACC;QAAO,CAAE;QACjCF,SAAS,EAAE,IAAIV,IAAI;OACpB,CAAC;MAAC;MAAArF,aAAA,GAAAoB,CAAA;MACH,OAAO,KAAK;IACd;EACF;EAEA;;;;;;;EAOO,MAAM8E,YAAYA,CACvBxB,MAA0B,EAC1ByB,QAAA;EAAA;EAAA,CAAAnG,aAAA,GAAAsB,CAAA,UAA4BkB,eAAe,CAAC4D,MAAM;IAAA;IAAApG,aAAA,GAAAqB,CAAA;IAAArB,aAAA,GAAAoB,CAAA;IAElD,OAAO,IAAIiF,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;MAAA;MAAAvG,aAAA,GAAAqB,CAAA;MACrC;MACA,MAAMmF,UAAU;MAAA;MAAA,CAAAxG,aAAA,GAAAoB,CAAA,QAAG,IAAI,CAACqF,eAAe,CAAC/B,MAAM,CAAC;MAAC;MAAA1E,aAAA,GAAAoB,CAAA;MAChD,IAAI,CAACoF,UAAU,CAACE,OAAO,EAAE;QAAA;QAAA1G,aAAA,GAAAsB,CAAA;QACvB,MAAM0E,KAAK;QAAA;QAAA,CAAAhG,aAAA,GAAAoB,CAAA,QAAG,IAAIuF,KAAK,CAAC,8BAA8BH,UAAU,CAACI,MAAM,CAACC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;QAAC;QAAA7G,aAAA,GAAAoB,CAAA;QACtF,IAAI,CAAC0F,kBAAkB,CAACd,KAAK,EAAEtB,MAAM,CAAC;QAAC;QAAA1E,aAAA,GAAAoB,CAAA;QACvCmF,MAAM,CAACP,KAAK,CAAC;QAAC;QAAAhG,aAAA,GAAAoB,CAAA;QACd;MACF,CAAC;MAAA;MAAA;QAAApB,aAAA,GAAAsB,CAAA;MAAA;MAED;MACA,MAAMyF,aAAa;MAAA;MAAA,CAAA/G,aAAA,GAAAoB,CAAA,QAAkB;QACnC0D,EAAE,EAAE,IAAI,CAACkC,iBAAiB,EAAE;QAC5BtC,MAAM,EAAE;UACN,GAAGA,MAAM;UACTuC,QAAQ,EAAE;YACR,GAAGvC,MAAM,CAACuC,QAAQ;YAClBC,eAAe,EAAEV,UAAU,CAACW,QAAQ;YACpCC,mBAAmB,EAAEZ,UAAU,CAACT;;SAEnC;QACDI,QAAQ;QACRJ,SAAS,EAAE,IAAIV,IAAI,EAAE;QACrBgC,UAAU,EAAE,CAAC;QACbhE,UAAU,EAAE,IAAI,CAACA,UAAU;QAC3BiD,OAAO;QACPC;OACD;MAED;MAAA;MAAAvG,aAAA,GAAAoB,CAAA;MACA,IAAI,CAACkG,UAAU,CAACP,aAAa,CAAC;MAE9B;MAAA;MAAA/G,aAAA,GAAAoB,CAAA;MACA,IAAI,CAACyB,YAAY,CAAC0E,aAAa,CAAC;QAC9BC,MAAM;QAAE;QAAA,CAAAxH,aAAA,GAAAsB,CAAA,UAAAoD,MAAM,CAAC8C,MAAM,EAAEC,WAAW,EAAE;QAAA;QAAA,CAAAzH,aAAA,GAAAsB,CAAA,UAAI,KAAK;QAC7CoG,GAAG;QAAE;QAAA,CAAA1H,aAAA,GAAAsB,CAAA,UAAAoD,MAAM,CAACgD,GAAG;QAAA;QAAA,CAAA1H,aAAA,GAAAsB,CAAA,UAAI,EAAE;QACrByE,SAAS,EAAE,IAAIV,IAAI,EAAE;QACrBsC,OAAO,EAAE,IAAI,CAACC,eAAe;QAAC;QAAA,CAAA5H,aAAA,GAAAsB,CAAA,UAAAoD,MAAM,CAACiD,OAAO;QAAA;QAAA,CAAA3H,aAAA,GAAAsB,CAAA,UAAI,EAAE,EAAC;QACnDuG,SAAS,EAAEd,aAAa,CAACjC,EAAE;QAC3BqB,QAAQ,EAAEA,QAAQ,CAAC2B,QAAQ;OAC5B,CAAC;IACJ,CAAC,CAAC;EACJ;EAEA;;;;;EAKQR,UAAUA,CAACS,OAAsB;IAAA;IAAA/H,aAAA,GAAAqB,CAAA;IAAArB,aAAA,GAAAoB,CAAA;IACvC;IACA,IAAI,IAAI,CAAC0B,YAAY,CAAC+C,MAAM,IAAI,IAAI,CAACzC,YAAY,EAAE;MAAA;MAAApD,aAAA,GAAAsB,CAAA;MACjD,MAAM0E,KAAK;MAAA;MAAA,CAAAhG,aAAA,GAAAoB,CAAA,QAAG,IAAIuF,KAAK,CAAC,uBAAuB,CAAC;MAAC;MAAA3G,aAAA,GAAAoB,CAAA;MACjD,IAAI,CAAC0F,kBAAkB,CAACd,KAAK,EAAE+B,OAAO,CAACrD,MAAM,CAAC;MAAC;MAAA1E,aAAA,GAAAoB,CAAA;MAC/C2G,OAAO,CAACxB,MAAM,CAACP,KAAK,CAAC;MAAC;MAAAhG,aAAA,GAAAoB,CAAA;MACtB;IACF,CAAC;IAAA;IAAA;MAAApB,aAAA,GAAAsB,CAAA;IAAA;IAED;IACA,IAAI0G,WAAW;IAAA;IAAA,CAAAhI,aAAA,GAAAoB,CAAA,QAAG,IAAI,CAAC0B,YAAY,CAAC+C,MAAM;IAAC;IAAA7F,aAAA,GAAAoB,CAAA;IAC3C,KAAK,IAAI6G,CAAC;IAAA;IAAA,CAAAjI,aAAA,GAAAoB,CAAA,QAAG,CAAC,GAAE6G,CAAC,GAAG,IAAI,CAACnF,YAAY,CAAC+C,MAAM,EAAEoC,CAAC,EAAE,EAAE;MAAA;MAAAjI,aAAA,GAAAoB,CAAA;MACjD,IAAI,IAAI,CAAC0B,YAAY,CAACmF,CAAC,CAAC,CAAC9B,QAAQ,GAAG4B,OAAO,CAAC5B,QAAQ,EAAE;QAAA;QAAAnG,aAAA,GAAAsB,CAAA;QAAAtB,aAAA,GAAAoB,CAAA;QACpD4G,WAAW,GAAGC,CAAC;QAAC;QAAAjI,aAAA,GAAAoB,CAAA;QAChB;MACF,CAAC;MAAA;MAAA;QAAApB,aAAA,GAAAsB,CAAA;MAAA;IACH;IAAC;IAAAtB,aAAA,GAAAoB,CAAA;IAED,IAAI,CAAC0B,YAAY,CAACoF,MAAM,CAACF,WAAW,EAAE,CAAC,EAAED,OAAO,CAAC;IAAC;IAAA/H,aAAA,GAAAoB,CAAA;IAClD,IAAI,CAAC8B,YAAY,CAACa,cAAc,GAAG,IAAI,CAACjB,YAAY,CAAC+C,MAAM;IAAC;IAAA7F,aAAA,GAAAoB,CAAA;IAE5DiB,QAAA,CAAAiC,MAAM,CAAC6D,KAAK,CAAC,sBAAsBJ,OAAO,CAACjD,EAAE,eAAeiD,OAAO,CAAC5B,QAAQ,iBAAiB,IAAI,CAACrD,YAAY,CAAC+C,MAAM,GAAG,CAAC;IAEzH;IAAA;IAAA7F,aAAA,GAAAoB,CAAA;IACA,IAAI,CAAC,IAAI,CAAC2B,iBAAiB,EAAE;MAAA;MAAA/C,aAAA,GAAAsB,CAAA;MAAAtB,aAAA,GAAAoB,CAAA;MAC3B,IAAI,CAACgH,YAAY,EAAE;IACrB,CAAC;IAAA;IAAA;MAAApI,aAAA,GAAAsB,CAAA;IAAA;EACH;EAEA;;;EAGQ,MAAM8G,YAAYA,CAAA;IAAA;IAAApI,aAAA,GAAAqB,CAAA;IAAArB,aAAA,GAAAoB,CAAA;IACxB;IAAI;IAAA,CAAApB,aAAA,GAAAsB,CAAA,eAAI,CAACyB,iBAAiB;IAAA;IAAA,CAAA/C,aAAA,GAAAsB,CAAA,WAAI,IAAI,CAACwB,YAAY,CAAC+C,MAAM,KAAK,CAAC,GAAE;MAAA;MAAA7F,aAAA,GAAAsB,CAAA;MAAAtB,aAAA,GAAAoB,CAAA;MAC5D;IACF,CAAC;IAAA;IAAA;MAAApB,aAAA,GAAAsB,CAAA;IAAA;IAAAtB,aAAA,GAAAoB,CAAA;IAED,IAAI,CAAC2B,iBAAiB,GAAG,IAAI;IAAC;IAAA/C,aAAA,GAAAoB,CAAA;IAE9B,IAAI;MAAA;MAAApB,aAAA,GAAAoB,CAAA;MACF,OAAO,IAAI,CAAC0B,YAAY,CAAC+C,MAAM,GAAG,CAAC,EAAE;QACnC,MAAMkC,OAAO;QAAA;QAAA,CAAA/H,aAAA,GAAAoB,CAAA,QAAG,IAAI,CAAC0B,YAAY,CAACuF,KAAK,EAAG;QAAC;QAAArI,aAAA,GAAAoB,CAAA;QAC3C,IAAI,CAAC8B,YAAY,CAACa,cAAc,GAAG,IAAI,CAACjB,YAAY,CAAC+C,MAAM;QAAC;QAAA7F,aAAA,GAAAoB,CAAA;QAE5D,IAAI;UAAA;UAAApB,aAAA,GAAAoB,CAAA;UACF,MAAM,IAAI,CAACkH,cAAc,CAACP,OAAO,CAAC;QACpC,CAAC,CAAC,OAAO/B,KAAK,EAAE;UAAA;UAAAhG,aAAA,GAAAoB,CAAA;UACdiB,QAAA,CAAAiC,MAAM,CAAC0B,KAAK,CAAC,+BAA+B+B,OAAO,CAACjD,EAAE,GAAG,EAAEkB,KAAK,CAAC;QACnE;MACF;IACF,CAAC,SAAS;MAAA;MAAAhG,aAAA,GAAAoB,CAAA;MACR,IAAI,CAAC2B,iBAAiB,GAAG,KAAK;IAChC;EACF;EAEA;;;;;EAKQ,MAAMuF,cAAcA,CAACP,OAAsB;IAAA;IAAA/H,aAAA,GAAAqB,CAAA;IACjD,MAAMkH,SAAS;IAAA;IAAA,CAAAvI,aAAA,GAAAoB,CAAA,QAAGiE,IAAI,CAACmD,GAAG,EAAE;IAAC;IAAAxI,aAAA,GAAAoB,CAAA;IAE7B,IAAI;MAAA;MAAApB,aAAA,GAAAoB,CAAA;MACF;MACA;MAAI;MAAA,CAAApB,aAAA,GAAAsB,CAAA,YAAC,IAAI,CAAC6B,eAAe;MAAA;MAAA,CAAAnD,aAAA,GAAAsB,CAAA,WAAI,CAAC,IAAI,CAACmH,qBAAqB,EAAE,GAAE;QAAA;QAAAzI,aAAA,GAAAsB,CAAA;QAAAtB,aAAA,GAAAoB,CAAA;QAC1D,MAAM,IAAI,CAACmE,kBAAkB,EAAE;MACjC,CAAC;MAAA;MAAA;QAAAvF,aAAA,GAAAsB,CAAA;MAAA;MAAAtB,aAAA,GAAAoB,CAAA;MAED,IAAI,CAAC,IAAI,CAAC+B,eAAe,EAAE;QAAA;QAAAnD,aAAA,GAAAsB,CAAA;QAAAtB,aAAA,GAAAoB,CAAA;QACzB,MAAM,IAAIuF,KAAK,CAAC,iDAAiD,CAAC;MACpE,CAAC;MAAA;MAAA;QAAA3G,aAAA,GAAAsB,CAAA;MAAA;MAED;MACA,MAAMoH,MAAM;MAAA;MAAA,CAAA1I,aAAA,GAAAoB,CAAA,QAAG,IAAI,CAACwB,aAAa,CAAC+F,aAAa,CAAC,IAAI,CAACxF,eAAe,CAAC;MAAC;MAAAnD,aAAA,GAAAoB,CAAA;MACtE;MAAI;MAAA,CAAApB,aAAA,GAAAsB,CAAA,YAACoH,MAAM;MAAA;MAAA,CAAA1I,aAAA,GAAAsB,CAAA,WAAIoH,MAAM,CAACE,KAAK,KAAKrG,oBAAA,CAAAsG,WAAW,CAACC,SAAS,GAAE;QAAA;QAAA9I,aAAA,GAAAsB,CAAA;QAAAtB,aAAA,GAAAoB,CAAA;QACrD,MAAM,IAAIuF,KAAK,CAAC,yBAAyB,IAAI,CAACxD,eAAe,EAAE,CAAC;MAClE,CAAC;MAAA;MAAA;QAAAnD,aAAA,GAAAsB,CAAA;MAAA;MAED;MACA,MAAMyH,QAAQ;MAAA;MAAA,CAAA/I,aAAA,GAAAoB,CAAA,QAAG,MAAM,IAAI,CAAC4H,2BAA2B,CAACjB,OAAO,EAAEW,MAAM,CAAC;MAExE;MACA,MAAMO,cAAc;MAAA;MAAA,CAAAjJ,aAAA,GAAAoB,CAAA,QAAG,IAAI,CAAC8H,yBAAyB,CAACnB,OAAO,EAAEgB,QAAQ,CAAC;MAAC;MAAA/I,aAAA,GAAAoB,CAAA;MACzE,IAAI,CAAC6H,cAAc,CAACvC,OAAO,EAAE;QAAA;QAAA1G,aAAA,GAAAsB,CAAA;QAAAtB,aAAA,GAAAoB,CAAA;QAC3B,IAAI,CAAC8B,YAAY,CAACgB,iBAAiB,EAAE;QAAC;QAAAlE,aAAA,GAAAoB,CAAA;QACtC,MAAM,IAAIuF,KAAK,CAAC,6CAA6CsC,cAAc,CAACE,gBAAgB,SAASF,cAAc,CAACG,cAAc,EAAE,CAAC;MACvI,CAAC;MAAA;MAAA;QAAApJ,aAAA,GAAAsB,CAAA;MAAA;MAED;MACA,MAAM4D,YAAY;MAAA;MAAA,CAAAlF,aAAA,GAAAoB,CAAA,QAAGiE,IAAI,CAACmD,GAAG,EAAE,GAAGD,SAAS;MAAC;MAAAvI,aAAA,GAAAoB,CAAA;MAC5C,IAAI,CAACiI,kBAAkB,CAAC,IAAI,EAAEnE,YAAY,CAAC;MAAC;MAAAlF,aAAA,GAAAoB,CAAA;MAC5C,IAAI,CAACkI,kBAAkB,CAAC,IAAI,CAACnG,eAAe,EAAE,IAAI,EAAE+B,YAAY,CAAC;MAEjE;MAAA;MAAAlF,aAAA,GAAAoB,CAAA;MACA,MAAM,IAAI,CAACyB,YAAY,CAAC0G,cAAc,CAAC;QACrCC,MAAM,EAAET,QAAQ,CAACS,MAAM;QACvBtE,YAAY;QACZa,SAAS,EAAE,IAAIV,IAAI,EAAE;QACrBoE,OAAO,EAAE,IAAI;QACb5B,SAAS,EAAEE,OAAO,CAACjD,EAAE;QACrBE,QAAQ,EAAE,IAAI,CAAC7B;OAChB,CAAC;MAEF;MAAA;MAAAnD,aAAA,GAAAoB,CAAA;MACA2G,OAAO,CAACzB,OAAO,CAACyC,QAAQ,CAAC;MAAC;MAAA/I,aAAA,GAAAoB,CAAA;MAE1BiB,QAAA,CAAAiC,MAAM,CAAC6D,KAAK,CAAC,qCAAqCJ,OAAO,CAACjD,EAAE,KAAKI,YAAY,KAAK,CAAC;IAErF,CAAC,CAAC,OAAOc,KAAK,EAAE;MACd,MAAMd,YAAY;MAAA;MAAA,CAAAlF,aAAA,GAAAoB,CAAA,SAAGiE,IAAI,CAACmD,GAAG,EAAE,GAAGD,SAAS;MAE3C;MAAA;MAAAvI,aAAA,GAAAoB,CAAA;MACA,IAAI,CAACiI,kBAAkB,CAAC,KAAK,EAAEnE,YAAY,CAAC;MAAC;MAAAlF,aAAA,GAAAoB,CAAA;MAC7C,IAAI,CAACkI,kBAAkB;MAAC;MAAA,CAAAtJ,aAAA,GAAAsB,CAAA,eAAI,CAAC6B,eAAe;MAAA;MAAA,CAAAnD,aAAA,GAAAsB,CAAA,WAAI,EAAE,GAAE,KAAK,EAAE4D,YAAY,CAAC;MAExE;MAAA;MAAAlF,aAAA,GAAAoB,CAAA;MACA;MAAI;MAAA,CAAApB,aAAA,GAAAsB,CAAA,WAAAyG,OAAO,CAACV,UAAU,GAAGU,OAAO,CAAC1E,UAAU;MAAA;MAAA,CAAArD,aAAA,GAAAsB,CAAA,WAAI,IAAI,CAACoI,kBAAkB,CAAC1D,KAAK,CAAC,GAAE;QAAA;QAAAhG,aAAA,GAAAsB,CAAA;QAAAtB,aAAA,GAAAoB,CAAA;QAC7E2G,OAAO,CAACV,UAAU,EAAE;QAAC;QAAArH,aAAA,GAAAoB,CAAA;QACrBiB,QAAA,CAAAiC,MAAM,CAACC,IAAI,CAAC,uBAAuBwD,OAAO,CAACjD,EAAE,aAAaiD,OAAO,CAACV,UAAU,IAAIU,OAAO,CAAC1E,UAAU,GAAG,CAAC;QAEtG;QAAA;QAAArD,aAAA,GAAAoB,CAAA;QACAuI,UAAU,CAAC,MAAK;UAAA;UAAA3J,aAAA,GAAAqB,CAAA;UAAArB,aAAA,GAAAoB,CAAA;UACd,IAAI,CAACkG,UAAU,CAACS,OAAO,CAAC;QAC1B,CAAC,EAAE,IAAI,CAAC6B,mBAAmB,CAAC7B,OAAO,CAACV,UAAU,CAAC,CAAC;QAAC;QAAArH,aAAA,GAAAoB,CAAA;QAEjD;MACF,CAAC;MAAA;MAAA;QAAApB,aAAA,GAAAsB,CAAA;MAAA;MAED;MAAAtB,aAAA,GAAAoB,CAAA;MACA,MAAM,IAAI,CAACyB,YAAY,CAAC0G,cAAc,CAAC;QACrCC,MAAM,EAAE,CAAC;QACTtE,YAAY;QACZa,SAAS,EAAE,IAAIV,IAAI,EAAE;QACrBoE,OAAO,EAAE,KAAK;QACdzD,KAAK,EAAEA,KAAK,CAACC,OAAO;QACpB4B,SAAS,EAAEE,OAAO,CAACjD,EAAE;QACrBE,QAAQ;QAAE;QAAA,CAAAhF,aAAA,GAAAsB,CAAA,eAAI,CAAC6B,eAAe;QAAA;QAAA,CAAAnD,aAAA,GAAAsB,CAAA,WAAI,SAAS;OAC5C,CAAC;MAEF;MAAA;MAAAtB,aAAA,GAAAoB,CAAA;MACA,IAAI,CAAC0F,kBAAkB,CAACd,KAAK,EAAE+B,OAAO,CAACrD,MAAM,CAAC;MAAC;MAAA1E,aAAA,GAAAoB,CAAA;MAC/C2G,OAAO,CAACxB,MAAM,CAACP,KAAK,CAAC;MAAC;MAAAhG,aAAA,GAAAoB,CAAA;MAEtBiB,QAAA,CAAAiC,MAAM,CAAC0B,KAAK,CAAC,qBAAqB+B,OAAO,CAACjD,EAAE,MAAMkB,KAAK,CAACC,OAAO,EAAE,CAAC;IACpE;EACF;EAEA;;;;;;;EAOQ,MAAM+C,2BAA2BA,CACvCjB,OAAsB,EACtBW,MAAwB;IAAA;IAAA1I,aAAA,GAAAqB,CAAA;IAExB;IACA,MAAMwI,YAAY;IAAA;IAAA,CAAA7J,aAAA,GAAAoB,CAAA,SAAG;MACnB,GAAG2G,OAAO,CAACrD,MAAM;MACjBoF,KAAK,EAAE;QACLC,IAAI,EAAE,WAAW;QACjBC,IAAI,EAAEtB,MAAM,CAAChE,MAAM,CAACuF,SAAS;QAC7BC,QAAQ,EAAE;OACX;MACDC,OAAO,EAAE,IAAI,CAAC7G;KACf;IAED;IACA,MAAM8G,KAAK;IAAA;IAAA,CAAApK,aAAA,GAAAoB,CAAA,SAAG,CAAC,MAAM,MAAM,CAAC,OAAO,CAAC,EAAEiJ,OAAO;IAE7C;IACA,MAAMtB,QAAQ;IAAA;IAAA,CAAA/I,aAAA,GAAAoB,CAAA,SAAG,MAAMgJ,KAAK,CAACrC,OAAO,CAAC8B,YAAY,CAAC;IAElD;IAAA;IAAA7J,aAAA,GAAAoB,CAAA;IACA2H,QAAQ,CAACrE,MAAM,CAACuC,QAAQ,GAAG;MACzB,GAAG8B,QAAQ,CAACrE,MAAM,CAACuC,QAAQ;MAC3BjC,QAAQ,EAAE0D,MAAM,CAAC5D,EAAE;MACnBwF,eAAe,EAAE5B,MAAM,CAAChE,MAAM,CAACuF,SAAS;MACxCM,QAAQ,EAAE,IAAIlF,IAAI;KACnB;IAAC;IAAArF,aAAA,GAAAoB,CAAA;IAEF,OAAO2H,QAAQ;EACjB;EAEA;;;;;;EAMQtC,eAAeA,CAAC/B,MAA0B;IAAA;IAAA1E,aAAA,GAAAqB,CAAA;IAChD,MAAMuF,MAAM;IAAA;IAAA,CAAA5G,aAAA,GAAAoB,CAAA,SAAa,EAAE;IAE3B;IAAA;IAAApB,aAAA,GAAAoB,CAAA;IACA,IAAI,CAACsD,MAAM,CAACgD,GAAG,EAAE;MAAA;MAAA1H,aAAA,GAAAsB,CAAA;MAAAtB,aAAA,GAAAoB,CAAA;MACfwF,MAAM,CAAC4D,IAAI,CAAC,qBAAqB,CAAC;IACpC,CAAC;IAAA;IAAA;MAAAxK,aAAA,GAAAsB,CAAA;IAAA;IAAAtB,aAAA,GAAAoB,CAAA;IAED,IAAI,CAACsD,MAAM,CAAC8C,MAAM,EAAE;MAAA;MAAAxH,aAAA,GAAAsB,CAAA;MAAAtB,aAAA,GAAAoB,CAAA;MAClBwF,MAAM,CAAC4D,IAAI,CAAC,wBAAwB,CAAC;IACvC,CAAC;IAAA;IAAA;MAAAxK,aAAA,GAAAsB,CAAA;IAAA;IAED;IAAAtB,aAAA,GAAAoB,CAAA;IACA;IAAI;IAAA,CAAApB,aAAA,GAAAsB,CAAA,WAAAoD,MAAM,CAACgD,GAAG;IAAA;IAAA,CAAA1H,aAAA,GAAAsB,CAAA,WAAI,CAAC,IAAI,CAACmJ,UAAU,CAAC/F,MAAM,CAACgD,GAAG,CAAC,GAAE;MAAA;MAAA1H,aAAA,GAAAsB,CAAA;MAAAtB,aAAA,GAAAoB,CAAA;MAC9CwF,MAAM,CAAC4D,IAAI,CAAC,oBAAoB,CAAC;IACnC,CAAC;IAAA;IAAA;MAAAxK,aAAA,GAAAsB,CAAA;IAAA;IAED;IACA,MAAMoJ,WAAW;IAAA;IAAA,CAAA1K,aAAA,GAAAoB,CAAA,SAAGuJ,IAAI,CAACC,SAAS,CAAC;MACjCpD,MAAM,EAAE9C,MAAM,CAAC8C,MAAM;MACrBE,GAAG,EAAEhD,MAAM,CAACgD,GAAG;MACfC,OAAO,EAAEjD,MAAM,CAACiD,OAAO;MACvBkD,IAAI,EAAEnG,MAAM,CAACmG;KACd,CAAC;IAEF,MAAM1D,QAAQ;IAAA;IAAA,CAAAnH,aAAA,GAAAoB,CAAA,SAAGe,QAAA,CAAAkI,OAAM,CACpBS,UAAU,CAAC,QAAQ,CAAC,CACpBC,MAAM,CAACL,WAAW,CAAC,CACnBM,MAAM,CAAC,KAAK,CAAC;IAAC;IAAAhL,aAAA,GAAAoB,CAAA;IAEjB,OAAO;MACLsF,OAAO,EAAEE,MAAM,CAACf,MAAM,KAAK,CAAC;MAC5BsB,QAAQ;MACRpB,SAAS,EAAE,IAAIV,IAAI,EAAE;MACrBuB;KACD;EACH;EAEA;;;;;;;EAOQsC,yBAAyBA,CAC/BnB,OAAsB,EACtBgB,QAAuB;IAAA;IAAA/I,aAAA,GAAAqB,CAAA;IAEvB,MAAM8H,gBAAgB;IAAA;IAAA,CAAAnJ,aAAA,GAAAoB,CAAA;IAAG;IAAA,CAAApB,aAAA,GAAAsB,CAAA,WAAAyG,OAAO,CAACrD,MAAM,CAACuC,QAAQ,EAAEC,eAAe;IAAA;IAAA,CAAAlH,aAAA,GAAAsB,CAAA,WAAI,EAAE;IAEvE;IACA,MAAM2J,YAAY;IAAA;IAAA,CAAAjL,aAAA,GAAAoB,CAAA,SAAGuJ,IAAI,CAACC,SAAS,CAAC;MAClCpB,MAAM,EAAET,QAAQ,CAACS,MAAM;MACvB7B,OAAO,EAAEoB,QAAQ,CAACpB,OAAO;MACzBkD,IAAI,EAAE9B,QAAQ,CAAC8B;KAChB,CAAC;IAEF,MAAMzB,cAAc;IAAA;IAAA,CAAApJ,aAAA,GAAAoB,CAAA,SAAGe,QAAA,CAAAkI,OAAM,CAC1BS,UAAU,CAAC,QAAQ,CAAC,CACpBC,MAAM,CAACE,YAAY,GAAG9B,gBAAgB,CAAC,CACvC6B,MAAM,CAAC,KAAK,CAAC;IAEhB;IACA;IAAA;IAAAhL,aAAA,GAAAoB,CAAA;IACA,OAAO;MACLsF,OAAO,EAAE,IAAI;MACbyC,gBAAgB;MAChBC,cAAc;MACdrD,SAAS,EAAE,IAAIV,IAAI;KACpB;EACH;EAEA;;;EAGQ,MAAME,kBAAkBA,CAAA;IAAA;IAAAvF,aAAA,GAAAqB,CAAA;IAC9B,MAAM6J,cAAc;IAAA;IAAA,CAAAlL,aAAA,GAAAoB,CAAA,SAAG+J,KAAK,CAACC,IAAI,CAAC,IAAI,CAACpI,aAAa,CAACqI,MAAM,EAAE,CAAC,CAC3DC,MAAM,CAAC9B,MAAM,IAAI;MAAA;MAAAxJ,aAAA,GAAAqB,CAAA;MAAArB,aAAA,GAAAoB,CAAA;MAAA,OAAAoI,MAAM,CAACvE,SAAS;IAAT,CAAS,CAAC,CAClCsG,IAAI,CAAC,CAACC,CAAC,EAAElK,CAAC,KAAK;MAAA;MAAAtB,aAAA,GAAAqB,CAAA;MAAArB,aAAA,GAAAoB,CAAA;MAAA,OAAAoK,CAAC,CAACtG,YAAY,GAAG5D,CAAC,CAAC4D,YAAY;IAAZ,CAAY,CAAC,EAAC,CAAC;IAAA;IAAAlF,aAAA,GAAAoB,CAAA;IAEpD,IAAI8J,cAAc,CAACrF,MAAM,KAAK,CAAC,EAAE;MAAA;MAAA7F,aAAA,GAAAsB,CAAA;MAAAtB,aAAA,GAAAoB,CAAA;MAC/BiB,QAAA,CAAAiC,MAAM,CAAC0B,KAAK,CAAC,gCAAgC,CAAC;MAAC;MAAAhG,aAAA,GAAAoB,CAAA;MAC/C,MAAM,IAAIuF,KAAK,CAAC,8BAA8B,CAAC;IACjD,CAAC;IAAA;IAAA;MAAA3G,aAAA,GAAAsB,CAAA;IAAA;IAED,MAAMmK,WAAW;IAAA;IAAA,CAAAzL,aAAA,GAAAoB,CAAA,SAAG8J,cAAc,CAAC,CAAC,CAAC,CAAClG,QAAQ;IAAC;IAAAhF,aAAA,GAAAoB,CAAA;IAE/C,IAAIqK,WAAW,KAAK,IAAI,CAACtI,eAAe,EAAE;MAAA;MAAAnD,aAAA,GAAAsB,CAAA;MACxC,MAAMoK,WAAW;MAAA;MAAA,CAAA1L,aAAA,GAAAoB,CAAA,SAAG,IAAI,CAAC+B,eAAe;MAAC;MAAAnD,aAAA,GAAAoB,CAAA;MACzC,IAAI,CAAC+B,eAAe,GAAGsI,WAAW;MAAC;MAAAzL,aAAA,GAAAoB,CAAA;MACnC,IAAI,CAAC8B,YAAY,CAACe,cAAc,EAAE;MAAC;MAAAjE,aAAA,GAAAoB,CAAA;MAEnCiB,QAAA,CAAAiC,MAAM,CAACC,IAAI,CAAC,8BAA8BmH,WAAW,OAAOD,WAAW,EAAE,CAAC;MAAC;MAAAzL,aAAA,GAAAoB,CAAA;MAE3E,MAAM,IAAI,CAACyB,YAAY,CAAC4C,gBAAgB,CAAC;QACvCxE,IAAI,EAAE,eAAe;QACrByE,QAAQ,EAAE,MAAM;QAChBC,OAAO,EAAE;UAAE+F,WAAW;UAAED;QAAW,CAAE;QACrC1F,SAAS,EAAE,IAAIV,IAAI;OACpB,CAAC;MAAC;MAAArF,aAAA,GAAAoB,CAAA;MAEH,IAAI,CAACuK,IAAI,CAAC,gBAAgB,EAAED,WAAW,EAAED,WAAW,CAAC;IACvD,CAAC;IAAA;IAAA;MAAAzL,aAAA,GAAAsB,CAAA;IAAA;EACH;EAEA;;;EAGQmH,qBAAqBA,CAAA;IAAA;IAAAzI,aAAA,GAAAqB,CAAA;IAAArB,aAAA,GAAAoB,CAAA;IAC3B,IAAI,CAAC,IAAI,CAAC+B,eAAe,EAAE;MAAA;MAAAnD,aAAA,GAAAsB,CAAA;MAAAtB,aAAA,GAAAoB,CAAA;MAAA,OAAO,KAAK;IAAA,CAAC;IAAA;IAAA;MAAApB,aAAA,GAAAsB,CAAA;IAAA;IAExC,MAAMsK,YAAY;IAAA;IAAA,CAAA5L,aAAA,GAAAoB,CAAA,SAAG,IAAI,CAAC4B,aAAa,CAAC6I,GAAG,CAAC,IAAI,CAAC1I,eAAe,CAAC;IAAC;IAAAnD,aAAA,GAAAoB,CAAA;IAClE,OAAO,2BAAApB,aAAA,GAAAsB,CAAA,WAAAsK,YAAY,EAAE3G,SAAS;IAAA;IAAA,CAAAjF,aAAA,GAAAsB,CAAA,WAAI,KAAK;EACzC;EAEA;;;;;;;EAOQgI,kBAAkBA,CAACtE,QAAgB,EAAEyE,OAAgB,EAAEvE,YAAoB;IAAA;IAAAlF,aAAA,GAAAqB,CAAA;IACjF,MAAMyK,MAAM;IAAA;IAAA,CAAA9L,aAAA,GAAAoB,CAAA,SAAG,IAAI,CAAC4B,aAAa,CAAC6I,GAAG,CAAC7G,QAAQ,CAAC;IAAC;IAAAhF,aAAA,GAAAoB,CAAA;IAChD,IAAI,CAAC0K,MAAM,EAAE;MAAA;MAAA9L,aAAA,GAAAsB,CAAA;MAAAtB,aAAA,GAAAoB,CAAA;MAAA;IAAA,CAAO;IAAA;IAAA;MAAApB,aAAA,GAAAsB,CAAA;IAAA;IAEpB;IACA,MAAMyK,KAAK;IAAA;IAAA,CAAA/L,aAAA,GAAAoB,CAAA,SAAG,GAAG;IAAC;IAAApB,aAAA,GAAAoB,CAAA;IAClB0K,MAAM,CAAC5G,YAAY,GAAI6G,KAAK,GAAG7G,YAAY,GAAK,CAAC,CAAC,GAAG6G,KAAK,IAAID,MAAM,CAAC5G,YAAa;IAElF;IAAA;IAAAlF,aAAA,GAAAoB,CAAA;IACA,IAAIqI,OAAO,EAAE;MAAA;MAAAzJ,aAAA,GAAAsB,CAAA;MAAAtB,aAAA,GAAAoB,CAAA;MACX0K,MAAM,CAACxG,mBAAmB,GAAG,CAAC;MAAC;MAAAtF,aAAA,GAAAoB,CAAA;MAC/B0K,MAAM,CAAC3G,SAAS,GAAG6G,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEH,MAAM,CAAC3G,SAAS,GAAG,GAAG,CAAC;IACxD,CAAC,MAAM;MAAA;MAAAnF,aAAA,GAAAsB,CAAA;MAAAtB,aAAA,GAAAoB,CAAA;MACL0K,MAAM,CAACxG,mBAAmB,EAAE;MAAC;MAAAtF,aAAA,GAAAoB,CAAA;MAC7B0K,MAAM,CAAC3G,SAAS,GAAG6G,IAAI,CAACE,GAAG,CAAC,CAAC,EAAEJ,MAAM,CAAC3G,SAAS,GAAG,GAAG,CAAC;IACxD;IAEA;IAAA;IAAAnF,aAAA,GAAAoB,CAAA;IACA0K,MAAM,CAAC7G,SAAS;IAAG;IAAA,CAAAjF,aAAA,GAAAsB,CAAA,WAAAwK,MAAM,CAACxG,mBAAmB,GAAG,IAAI,CAAC9B,gBAAgB;IAAA;IAAA,CAAAxD,aAAA,GAAAsB,CAAA,WAAIwK,MAAM,CAAC3G,SAAS,GAAG,GAAG;IAAC;IAAAnF,aAAA,GAAAoB,CAAA;IAChG0K,MAAM,CAAC1G,eAAe,GAAG,IAAIC,IAAI,EAAE;IAAC;IAAArF,aAAA,GAAAoB,CAAA;IAEpCiB,QAAA,CAAAiC,MAAM,CAAC6D,KAAK,CAAC,6BAA6BnD,QAAQ,cAAc8G,MAAM,CAAC7G,SAAS,aAAa6G,MAAM,CAACxG,mBAAmB,GAAG,CAAC;EAC7H;EAEA;;;;;;EAMQ+D,kBAAkBA,CAACI,OAAgB,EAAEvE,YAAoB;IAAA;IAAAlF,aAAA,GAAAqB,CAAA;IAAArB,aAAA,GAAAoB,CAAA;IAC/D,IAAI,CAAC8B,YAAY,CAACU,aAAa,EAAE;IAAC;IAAA5D,aAAA,GAAAoB,CAAA;IAClC,IAAI,CAAC8B,YAAY,CAACiB,eAAe,GAAG,IAAIkB,IAAI,EAAE;IAAC;IAAArF,aAAA,GAAAoB,CAAA;IAE/C,IAAIqI,OAAO,EAAE;MAAA;MAAAzJ,aAAA,GAAAsB,CAAA;MAAAtB,aAAA,GAAAoB,CAAA;MACX,IAAI,CAAC8B,YAAY,CAACW,kBAAkB,EAAE;IACxC,CAAC,MAAM;MAAA;MAAA7D,aAAA,GAAAsB,CAAA;MAAAtB,aAAA,GAAAoB,CAAA;MACL,IAAI,CAAC8B,YAAY,CAACY,cAAc,EAAE;IACpC;IAEA;IACA,MAAMiI,KAAK;IAAA;IAAA,CAAA/L,aAAA,GAAAoB,CAAA,SAAG,GAAG;IAAC;IAAApB,aAAA,GAAAoB,CAAA;IAClB,IAAI,CAAC8B,YAAY,CAACc,mBAAmB,GAClC+H,KAAK,GAAG7G,YAAY,GAAK,CAAC,CAAC,GAAG6G,KAAK,IAAI,IAAI,CAAC7I,YAAY,CAACc,mBAAoB;EAClF;EAEA;;;EAGQI,yBAAyBA,CAAA;IAAA;IAAApE,aAAA,GAAAqB,CAAA;IAAArB,aAAA,GAAAoB,CAAA;IAC/B,IAAI,CAACwB,aAAa,CAACuJ,EAAE,CAAC,iBAAiB,EAAGxH,UAA4B,IAAI;MAAA;MAAA3E,aAAA,GAAAqB,CAAA;MAAArB,aAAA,GAAAoB,CAAA;MACxEiB,QAAA,CAAAiC,MAAM,CAACC,IAAI,CAAC,wBAAwBI,UAAU,CAACG,EAAE,EAAE,CAAC;MAEpD;MAAA;MAAA9E,aAAA,GAAAoB,CAAA;MACA,IAAI,CAAC,IAAI,CAAC4B,aAAa,CAACoJ,GAAG,CAACzH,UAAU,CAACG,EAAE,CAAC,EAAE;QAAA;QAAA9E,aAAA,GAAAsB,CAAA;QAAAtB,aAAA,GAAAoB,CAAA;QAC1C,IAAI,CAAC4B,aAAa,CAAC+B,GAAG,CAACJ,UAAU,CAACG,EAAE,EAAE;UACpCE,QAAQ,EAAEL,UAAU,CAACG,EAAE;UACvBG,SAAS,EAAE,IAAI;UACfC,YAAY,EAAE,CAAC;UACfC,SAAS,EAAE,CAAC;UACZC,eAAe,EAAE,IAAIC,IAAI,EAAE;UAC3BC,mBAAmB,EAAE;SACtB,CAAC;MACJ,CAAC;MAAA;MAAA;QAAAtF,aAAA,GAAAsB,CAAA;MAAA;IACH,CAAC,CAAC;IAAC;IAAAtB,aAAA,GAAAoB,CAAA;IAEH,IAAI,CAACwB,aAAa,CAACuJ,EAAE,CAAC,oBAAoB,EAAGxH,UAA4B,IAAI;MAAA;MAAA3E,aAAA,GAAAqB,CAAA;MAAArB,aAAA,GAAAoB,CAAA;MAC3EiB,QAAA,CAAAiC,MAAM,CAAC+H,IAAI,CAAC,2BAA2B1H,UAAU,CAACG,EAAE,EAAE,CAAC;MAEvD;MACA,MAAMgH,MAAM;MAAA;MAAA,CAAA9L,aAAA,GAAAoB,CAAA,SAAG,IAAI,CAAC4B,aAAa,CAAC6I,GAAG,CAAClH,UAAU,CAACG,EAAE,CAAC;MAAC;MAAA9E,aAAA,GAAAoB,CAAA;MACrD,IAAI0K,MAAM,EAAE;QAAA;QAAA9L,aAAA,GAAAsB,CAAA;QAAAtB,aAAA,GAAAoB,CAAA;QACV0K,MAAM,CAAC7G,SAAS,GAAG,KAAK;MAC1B,CAAC;MAAA;MAAA;QAAAjF,aAAA,GAAAsB,CAAA;MAAA;MAED;MAAAtB,aAAA,GAAAoB,CAAA;MACA,IAAI,IAAI,CAAC+B,eAAe,KAAKwB,UAAU,CAACG,EAAE,EAAE;QAAA;QAAA9E,aAAA,GAAAsB,CAAA;QAAAtB,aAAA,GAAAoB,CAAA;QAC1C,IAAI,CAACmE,kBAAkB,EAAE,CAAC+G,KAAK,CAACtG,KAAK,IAAG;UAAA;UAAAhG,aAAA,GAAAqB,CAAA;UAAArB,aAAA,GAAAoB,CAAA;UACtCiB,QAAA,CAAAiC,MAAM,CAAC0B,KAAK,CAAC,gDAAgD,EAAEA,KAAK,CAAC;QACvE,CAAC,CAAC;MACJ,CAAC;MAAA;MAAA;QAAAhG,aAAA,GAAAsB,CAAA;MAAA;IACH,CAAC,CAAC;IAAC;IAAAtB,aAAA,GAAAoB,CAAA;IAEH,IAAI,CAACwB,aAAa,CAACuJ,EAAE,CAAC,aAAa,EAAE,CAACxH,UAA4B,EAAEqB,KAAY,KAAI;MAAA;MAAAhG,aAAA,GAAAqB,CAAA;MAAArB,aAAA,GAAAoB,CAAA;MAClFiB,QAAA,CAAAiC,MAAM,CAAC0B,KAAK,CAAC,mBAAmBrB,UAAU,CAACG,EAAE,MAAMkB,KAAK,CAACC,OAAO,EAAE,CAAC;MAEnE;MACA,MAAM6F,MAAM;MAAA;MAAA,CAAA9L,aAAA,GAAAoB,CAAA,SAAG,IAAI,CAAC4B,aAAa,CAAC6I,GAAG,CAAClH,UAAU,CAACG,EAAE,CAAC;MAAC;MAAA9E,aAAA,GAAAoB,CAAA;MACrD,IAAI0K,MAAM,EAAE;QAAA;QAAA9L,aAAA,GAAAsB,CAAA;QAAAtB,aAAA,GAAAoB,CAAA;QACV0K,MAAM,CAAC7G,SAAS,GAAG,KAAK;QAAC;QAAAjF,aAAA,GAAAoB,CAAA;QACzB0K,MAAM,CAACxG,mBAAmB,EAAE;MAC9B,CAAC;MAAA;MAAA;QAAAtF,aAAA,GAAAsB,CAAA;MAAA;IACH,CAAC,CAAC;EACJ;EAEA;;;EAGQ+C,qBAAqBA,CAAA;IAAA;IAAArE,aAAA,GAAAqB,CAAA;IAAArB,aAAA,GAAAoB,CAAA;IAC3B,IAAI,CAACqC,gBAAgB,GAAG8I,WAAW,CAAC,YAAW;MAAA;MAAAvM,aAAA,GAAAqB,CAAA;MAAArB,aAAA,GAAAoB,CAAA;MAC7C,MAAM,IAAI,CAACoL,mBAAmB,EAAE;IAClC,CAAC,EAAE,IAAI,CAACjJ,mBAAmB,CAAC;IAAC;IAAAvD,aAAA,GAAAoB,CAAA;IAE7BiB,QAAA,CAAAiC,MAAM,CAACC,IAAI,CAAC,qCAAqC,CAAC;EACpD;EAEA;;;EAGQ,MAAMiI,mBAAmBA,CAAA;IAAA;IAAAxM,aAAA,GAAAqB,CAAA;IAC/B,MAAMoL,mBAAmB;IAAA;IAAA,CAAAzM,aAAA,GAAAoB,CAAA,SAAG+J,KAAK,CAACC,IAAI,CAAC,IAAI,CAACpI,aAAa,CAAC0J,IAAI,EAAE,CAAC,CAACC,GAAG,CACnE3H,QAAQ,IAAI;MAAA;MAAAhF,aAAA,GAAAqB,CAAA;MAAArB,aAAA,GAAAoB,CAAA;MAAA,WAAI,CAACwL,wBAAwB,CAAC5H,QAAQ,CAAC;IAAD,CAAC,CACpD;IAAC;IAAAhF,aAAA,GAAAoB,CAAA;IAEF,MAAMiF,OAAO,CAACwG,UAAU,CAACJ,mBAAmB,CAAC;EAC/C;EAEA;;;;;EAKQ,MAAMG,wBAAwBA,CAAC5H,QAAgB;IAAA;IAAAhF,aAAA,GAAAqB,CAAA;IAAArB,aAAA,GAAAoB,CAAA;IACrD,IAAI;MACF,MAAMsH,MAAM;MAAA;MAAA,CAAA1I,aAAA,GAAAoB,CAAA,SAAG,IAAI,CAACwB,aAAa,CAAC+F,aAAa,CAAC3D,QAAQ,CAAC;MAAC;MAAAhF,aAAA,GAAAoB,CAAA;MAC1D;MAAI;MAAA,CAAApB,aAAA,GAAAsB,CAAA,YAACoH,MAAM;MAAA;MAAA,CAAA1I,aAAA,GAAAsB,CAAA,WAAIoH,MAAM,CAACE,KAAK,KAAKrG,oBAAA,CAAAsG,WAAW,CAACC,SAAS,GAAE;QAAA;QAAA9I,aAAA,GAAAsB,CAAA;QAAAtB,aAAA,GAAAoB,CAAA;QACrD,IAAI,CAACkI,kBAAkB,CAACtE,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC;QAAC;QAAAhF,aAAA,GAAAoB,CAAA;QAC5C;MACF,CAAC;MAAA;MAAA;QAAApB,aAAA,GAAAsB,CAAA;MAAA;MAED;MACA,MAAMiH,SAAS;MAAA;MAAA,CAAAvI,aAAA,GAAAoB,CAAA,SAAGiE,IAAI,CAACmD,GAAG,EAAE;MAE5B;MACA,MAAM4B,KAAK;MAAA;MAAA,CAAApK,aAAA,GAAAoB,CAAA,SAAG,CAAC,MAAM,MAAM,CAAC,OAAO,CAAC,EAAEiJ,OAAO;MAE7C;MAAA;MAAArK,aAAA,GAAAoB,CAAA;MACA,MAAMgJ,KAAK,CAACyB,GAAG,CAAC,wCAAwC,EAAE;QACxD/B,KAAK,EAAE;UACLC,IAAI,EAAE,WAAW;UACjBC,IAAI,EAAEtB,MAAM,CAAChE,MAAM,CAACuF,SAAS;UAC7BC,QAAQ,EAAE;SACX;QACDC,OAAO,EAAE;OACV,CAAC;MAEF,MAAMjF,YAAY;MAAA;MAAA,CAAAlF,aAAA,GAAAoB,CAAA,SAAGiE,IAAI,CAACmD,GAAG,EAAE,GAAGD,SAAS;MAAC;MAAAvI,aAAA,GAAAoB,CAAA;MAC5C,IAAI,CAACkI,kBAAkB,CAACtE,QAAQ,EAAE,IAAI,EAAEE,YAAY,CAAC;IAEvD,CAAC,CAAC,OAAOc,KAAK,EAAE;MAAA;MAAAhG,aAAA,GAAAoB,CAAA;MACdiB,QAAA,CAAAiC,MAAM,CAAC6D,KAAK,CAAC,qCAAqCnD,QAAQ,GAAG,EAAEgB,KAAK,CAACC,OAAO,CAAC;MAAC;MAAAjG,aAAA,GAAAoB,CAAA;MAC9E,IAAI,CAACkI,kBAAkB,CAACtE,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC;IAC7C;EACF;EAEA;;;EAGQQ,oBAAoBA,CAAA;IAAA;IAAAxF,aAAA,GAAAqB,CAAA;IAAArB,aAAA,GAAAoB,CAAA;IAC1B;IACAmL,WAAW,CAAC,MAAK;MAAA;MAAAvM,aAAA,GAAAqB,CAAA;MAAArB,aAAA,GAAAoB,CAAA;MACf;MAAI;MAAA,CAAApB,aAAA,GAAAsB,CAAA,YAAC,IAAI,CAACyB,iBAAiB;MAAA;MAAA,CAAA/C,aAAA,GAAAsB,CAAA,WAAI,IAAI,CAACwB,YAAY,CAAC+C,MAAM,GAAG,CAAC,GAAE;QAAA;QAAA7F,aAAA,GAAAsB,CAAA;QAAAtB,aAAA,GAAAoB,CAAA;QAC3D,IAAI,CAACgH,YAAY,EAAE;MACrB,CAAC;MAAA;MAAA;QAAApI,aAAA,GAAAsB,CAAA;MAAA;IACH,CAAC,EAAE,GAAG,CAAC;EACT;EAEA;;;;;;EAMQoI,kBAAkBA,CAAC1D,KAAU;IAAA;IAAAhG,aAAA,GAAAqB,CAAA;IAAArB,aAAA,GAAAoB,CAAA;IACnC;IACA,IAAI,CAAC4E,KAAK,CAAC+C,QAAQ,EAAE;MAAA;MAAA/I,aAAA,GAAAsB,CAAA;MAAAtB,aAAA,GAAAoB,CAAA;MAAA,OAAO,IAAI;IAAA,CAAC;IAAA;IAAA;MAAApB,aAAA,GAAAsB,CAAA;IAAA,EAAC;IAElC,MAAMkI,MAAM;IAAA;IAAA,CAAAxJ,aAAA,GAAAoB,CAAA,SAAG4E,KAAK,CAAC+C,QAAQ,EAAES,MAAM;IAAC;IAAAxJ,aAAA,GAAAoB,CAAA;IACtC,OAAO,2BAAApB,aAAA,GAAAsB,CAAA,WAAAkI,MAAM,IAAI,GAAG;IAAA;IAAA,CAAAxJ,aAAA,GAAAsB,CAAA,WAAIkI,MAAM,KAAK,GAAG,EAAC,CAAC;EAC1C;EAEA;;;;;;EAMQI,mBAAmBA,CAACvC,UAAkB;IAAA;IAAArH,aAAA,GAAAqB,CAAA;IAC5C,MAAMyL,SAAS;IAAA;IAAA,CAAA9M,aAAA,GAAAoB,CAAA,SAAG,IAAI,EAAC,CAAC;IACxB,MAAM2L,QAAQ;IAAA;IAAA,CAAA/M,aAAA,GAAAoB,CAAA,SAAG,KAAK,EAAC,CAAC;IAExB,MAAM4L,KAAK;IAAA;IAAA,CAAAhN,aAAA,GAAAoB,CAAA,SAAG4K,IAAI,CAACE,GAAG,CAACY,SAAS,GAAGd,IAAI,CAACiB,GAAG,CAAC,CAAC,EAAE5F,UAAU,GAAG,CAAC,CAAC,EAAE0F,QAAQ,CAAC;IAEzE;IACA,MAAMG,MAAM;IAAA;IAAA,CAAAlN,aAAA,GAAAoB,CAAA,SAAG4K,IAAI,CAACmB,MAAM,EAAE,GAAG,GAAG,GAAGH,KAAK;IAAC;IAAAhN,aAAA,GAAAoB,CAAA;IAE3C,OAAO4L,KAAK,GAAGE,MAAM;EACvB;EAEA;;;;;;EAMQpG,kBAAkBA,CAACd,KAAU,EAAEtB,MAA0B;IAAA;IAAA1E,aAAA,GAAAqB,CAAA;IAAArB,aAAA,GAAAoB,CAAA;IAC/D,IAAI,CAACyB,YAAY,CAAC4C,gBAAgB,CAAC;MACjCxE,IAAI,EAAE,sBAAsB;MAC5ByE,QAAQ,EAAE,OAAO;MACjBC,OAAO,EAAE;QACPK,KAAK,EAAEA,KAAK,CAACC,OAAO;QACpByB,GAAG,EAAEhD,MAAM,CAACgD,GAAG;QACfF,MAAM,EAAE9C,MAAM,CAAC8C,MAAM;QACrBxC,QAAQ,EAAE,IAAI,CAAC7B;OAChB;MACD4C,SAAS,EAAE,IAAIV,IAAI;KACpB,CAAC;EACJ;EAEA;;;EAGQ2B,iBAAiBA,CAAA;IAAA;IAAAhH,aAAA,GAAAqB,CAAA;IAAArB,aAAA,GAAAoB,CAAA;IACvB,OAAO,OAAOiE,IAAI,CAACmD,GAAG,EAAE,IAAIwD,IAAI,CAACmB,MAAM,EAAE,CAACrF,QAAQ,CAAC,EAAE,CAAC,CAACsF,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;EACvE;EAEA;;;;;;EAMQ3C,UAAUA,CAAC/C,GAAW;IAAA;IAAA1H,aAAA,GAAAqB,CAAA;IAAArB,aAAA,GAAAoB,CAAA;IAC5B,IAAI;MAAA;MAAApB,aAAA,GAAAoB,CAAA;MACF,IAAIiM,GAAG,CAAC3F,GAAG,EAAE,uBAAuB,CAAC;MAAC;MAAA1H,aAAA,GAAAoB,CAAA;MACtC,OAAO,IAAI;IACb,CAAC,CAAC,MAAM;MAAA;MAAApB,aAAA,GAAAoB,CAAA;MACN,OAAO,KAAK;IACd;EACF;EAEA;;;;;;EAMQwG,eAAeA,CAACD,OAA4B;IAAA;IAAA3H,aAAA,GAAAqB,CAAA;IAClD,MAAMiM,SAAS;IAAA;IAAA,CAAAtN,aAAA,GAAAoB,CAAA,SAAG;MAAE,GAAGuG;IAAO,CAAE;IAEhC;IAAA;IAAA3H,aAAA,GAAAoB,CAAA;IACA,OAAOkM,SAAS,CAACC,GAAG;IAAC;IAAAvN,aAAA,GAAAoB,CAAA;IACrB,OAAOkM,SAAS,CAACE,IAAI;IAAC;IAAAxN,aAAA,GAAAoB,CAAA;IACtB,OAAOkM,SAAS,CAACG,UAAU;IAAC;IAAAzN,aAAA,GAAAoB,CAAA;IAC5B,OAAOkM,SAAS,CAACI,aAAa;IAAC;IAAA1N,aAAA,GAAAoB,CAAA;IAE/B,OAAOkM,SAAS;EAClB;EAEA;;;EAGOK,eAAeA,CAAA;IAAA;IAAA3N,aAAA,GAAAqB,CAAA;IAAArB,aAAA,GAAAoB,CAAA;IACpB,OAAO;MAAE,GAAG,IAAI,CAAC8B;IAAY,CAAE;EACjC;EAEA;;;EAGO0K,qBAAqBA,CAAA;IAAA;IAAA5N,aAAA,GAAAqB,CAAA;IAAArB,aAAA,GAAAoB,CAAA;IAC1B,OAAO+J,KAAK,CAACC,IAAI,CAAC,IAAI,CAACpI,aAAa,CAACqI,MAAM,EAAE,CAAC;EAChD;EAEA;;;EAGOwC,kBAAkBA,CAAA;IAAA;IAAA7N,aAAA,GAAAqB,CAAA;IAAArB,aAAA,GAAAoB,CAAA;IACvB,OAAO,IAAI,CAAC+B,eAAe;EAC7B;EAEA;;;EAGO,MAAM2K,QAAQA,CAAA;IAAA;IAAA9N,aAAA,GAAAqB,CAAA;IAAArB,aAAA,GAAAoB,CAAA;IACnBiB,QAAA,CAAAiC,MAAM,CAACC,IAAI,CAAC,mCAAmC,CAAC;IAEhD;IAAA;IAAAvE,aAAA,GAAAoB,CAAA;IACA,IAAI,IAAI,CAACqC,gBAAgB,EAAE;MAAA;MAAAzD,aAAA,GAAAsB,CAAA;MAAAtB,aAAA,GAAAoB,CAAA;MACzB2M,aAAa,CAAC,IAAI,CAACtK,gBAAgB,CAAC;MAAC;MAAAzD,aAAA,GAAAoB,CAAA;MACrC,IAAI,CAACqC,gBAAgB,GAAG,IAAI;IAC9B,CAAC;IAAA;IAAA;MAAAzD,aAAA,GAAAsB,CAAA;IAAA;IAED;IAAAtB,aAAA,GAAAoB,CAAA;IACA,IAAI,CAAC0B,YAAY,CAACkL,OAAO,CAACjG,OAAO,IAAG;MAAA;MAAA/H,aAAA,GAAAqB,CAAA;MAAArB,aAAA,GAAAoB,CAAA;MAClC2G,OAAO,CAACxB,MAAM,CAAC,IAAII,KAAK,CAAC,gCAAgC,CAAC,CAAC;IAC7D,CAAC,CAAC;IAAC;IAAA3G,aAAA,GAAAoB,CAAA;IACH,IAAI,CAAC0B,YAAY,GAAG,EAAE;IAEtB;IAAA;IAAA9C,aAAA,GAAAoB,CAAA;IACA,MAAM,IAAI,CAACyB,YAAY,CAAC4C,gBAAgB,CAAC;MACvCxE,IAAI,EAAE,wBAAwB;MAC9ByE,QAAQ,EAAE,MAAM;MAChBC,OAAO,EAAE;QAAEzC,YAAY,EAAE,IAAI,CAACA;MAAY,CAAE;MAC5C6C,SAAS,EAAE,IAAIV,IAAI;KACpB,CAAC;IAAC;IAAArF,aAAA,GAAAoB,CAAA;IAEHiB,QAAA,CAAAiC,MAAM,CAACC,IAAI,CAAC,oCAAoC,CAAC;EACnD;;AACD;AAAAvE,aAAA,GAAAoB,CAAA;AArxBDqB,OAAA,CAAAC,YAAA,GAAAA,YAAA","ignoreList":[]}