{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\performance-optimizer.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\performance-optimizer.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * AI CRYPTO TRADING AGENT - SYSTEM PERFORMANCE OPTIMIZER\r\n * =============================================================================\r\n * \r\n * This service provides comprehensive performance optimization for Intel NUC\r\n * systems running the AI crypto trading agent. It implements low-latency\r\n * trading optimizations, thermal management, and resource allocation.\r\n * \r\n * CRITICAL PERFORMANCE NOTICE:\r\n * This system optimizes hardware performance for trading operations. Poor\r\n * performance could impact trading decisions and result in financial losses.\r\n * All optimizations are continuously monitored and adjusted.\r\n * \r\n * Hardware Specifications:\r\n * - Intel NUC with i5 CPU\r\n * - 12GB RAM\r\n * - 256GB M.2 SSD\r\n * - Wireless and Gigabit Ethernet\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport * as si from 'systeminformation';\r\nimport { logger } from '@/core/logging/logger';\r\nimport { auditService } from '@/security/audit-service';\r\nimport { SystemMonitor, CPUMetrics, RAMMetrics, SSDMetrics } from './system-monitor';\r\n\r\n/**\r\n * Interface for performance optimization configuration\r\n */\r\nexport interface PerformanceConfig {\r\n  /** Enable CPU performance optimization */\r\n  enableCPUOptimization: boolean;\r\n  /** Enable memory optimization */\r\n  enableMemoryOptimization: boolean;\r\n  /** Enable I/O optimization */\r\n  enableIOOptimization: boolean;\r\n  /** Enable network optimization */\r\n  enableNetworkOptimization: boolean;\r\n  /** Enable thermal management */\r\n  enableThermalManagement: boolean;\r\n  /** CPU governor mode */\r\n  cpuGovernor: 'performance' | 'powersave' | 'ondemand' | 'conservative';\r\n  /** Memory swappiness (0-100) */\r\n  memorySwappiness: number;\r\n  /** I/O scheduler */\r\n  ioScheduler: 'noop' | 'deadline' | 'cfq' | 'mq-deadline';\r\n  /** Network buffer sizes */\r\n  networkBufferSize: number;\r\n  /** Thermal throttling threshold */\r\n  thermalThrottleTemp: number;\r\n  /** Performance monitoring interval */\r\n  monitoringIntervalMs: number;\r\n}\r\n\r\n/**\r\n * Interface for performance metrics\r\n */\r\nexport interface PerformanceMetrics {\r\n  /** Overall performance score (0-100) */\r\n  overallScore: number;\r\n  /** CPU performance score */\r\n  cpuScore: number;\r\n  /** Memory performance score */\r\n  memoryScore: number;\r\n  /** I/O performance score */\r\n  ioScore: number;\r\n  /** Network performance score */\r\n  networkScore: number;\r\n  /** Thermal performance score */\r\n  thermalScore: number;\r\n  /** Latency metrics */\r\n  latency: {\r\n    /** Average system latency in microseconds */\r\n    average: number;\r\n    /** Maximum system latency in microseconds */\r\n    maximum: number;\r\n    /** 95th percentile latency */\r\n    p95: number;\r\n    /** 99th percentile latency */\r\n    p99: number;\r\n  };\r\n  /** Throughput metrics */\r\n  throughput: {\r\n    /** CPU operations per second */\r\n    cpuOps: number;\r\n    /** Memory bandwidth in MB/s */\r\n    memoryBandwidth: number;\r\n    /** Disk I/O operations per second */\r\n    diskIOPS: number;\r\n    /** Network throughput in Mbps */\r\n    networkThroughput: number;\r\n  };\r\n  /** Last measurement timestamp */\r\n  timestamp: Date;\r\n}\r\n\r\n/**\r\n * Interface for optimization recommendation\r\n */\r\nexport interface OptimizationRecommendation {\r\n  /** Recommendation ID */\r\n  id: string;\r\n  /** Recommendation type */\r\n  type: 'CPU' | 'MEMORY' | 'IO' | 'NETWORK' | 'THERMAL';\r\n  /** Priority level */\r\n  priority: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';\r\n  /** Recommendation title */\r\n  title: string;\r\n  /** Detailed description */\r\n  description: string;\r\n  /** Expected performance improvement */\r\n  expectedImprovement: number;\r\n  /** Implementation complexity */\r\n  complexity: 'EASY' | 'MEDIUM' | 'HARD';\r\n  /** Auto-apply capability */\r\n  canAutoApply: boolean;\r\n  /** Implementation command/action */\r\n  implementation?: string;\r\n  /** Timestamp */\r\n  timestamp: Date;\r\n}\r\n\r\n/**\r\n * Interface for thermal management status\r\n */\r\nexport interface ThermalStatus {\r\n  /** Current CPU temperature */\r\n  currentTemp: number;\r\n  /** Maximum safe temperature */\r\n  maxSafeTemp: number;\r\n  /** Thermal throttling active */\r\n  isThrottling: boolean;\r\n  /** Cooling effectiveness (0-100) */\r\n  coolingEffectiveness: number;\r\n  /** Thermal alerts */\r\n  alerts: string[];\r\n  /** Recommended actions */\r\n  recommendations: string[];\r\n}\r\n\r\n/**\r\n * System Performance Optimizer\r\n * Provides comprehensive performance optimization for trading operations\r\n */\r\nexport class PerformanceOptimizer {\r\n  private systemMonitor: SystemMonitor;\r\n  private config: PerformanceConfig;\r\n  private optimizationInterval: NodeJS.Timeout | null = null;\r\n  private performanceHistory: PerformanceMetrics[] = [];\r\n  private latencyMeasurements: number[] = [];\r\n  private isOptimizing: boolean = false;\r\n\r\n  constructor(systemMonitor: SystemMonitor) {\r\n    this.systemMonitor = systemMonitor;\r\n    this.config = this.loadConfiguration();\r\n    logger.info('⚡ Performance Optimizer initializing...');\r\n  }\r\n\r\n  /**\r\n   * Load performance optimization configuration\r\n   * \r\n   * @returns PerformanceConfig Configuration object\r\n   */\r\n  private loadConfiguration(): PerformanceConfig {\r\n    return {\r\n      enableCPUOptimization: process.env.ENABLE_CPU_OPTIMIZATION === 'true',\r\n      enableMemoryOptimization: process.env.ENABLE_MEMORY_OPTIMIZATION === 'true',\r\n      enableIOOptimization: process.env.ENABLE_IO_OPTIMIZATION === 'true',\r\n      enableNetworkOptimization: process.env.ENABLE_NETWORK_OPTIMIZATION === 'true',\r\n      enableThermalManagement: process.env.ENABLE_THERMAL_MANAGEMENT !== 'false',\r\n      cpuGovernor: (process.env.CPU_GOVERNOR as any) || 'performance',\r\n      memorySwappiness: parseInt(process.env.MEMORY_SWAPPINESS || '10'),\r\n      ioScheduler: (process.env.IO_SCHEDULER as any) || 'mq-deadline',\r\n      networkBufferSize: parseInt(process.env.NETWORK_BUFFER_SIZE || '16777216'),\r\n      thermalThrottleTemp: parseInt(process.env.THERMAL_THROTTLE_TEMP || '75'),\r\n      monitoringIntervalMs: parseInt(process.env.PERF_MONITORING_INTERVAL_MS || '60000')\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Initialize performance optimization\r\n   * Sets up all optimization systems and starts monitoring\r\n   * \r\n   * @returns Promise<void>\r\n   */\r\n  public async initializePerformanceOptimization(): Promise<void> {\r\n    try {\r\n      logger.info('⚡ Initializing performance optimization...');\r\n\r\n      // Apply initial optimizations\r\n      await this.applyInitialOptimizations();\r\n\r\n      // Start performance monitoring\r\n      await this.startPerformanceMonitoring();\r\n\r\n      // Set up thermal management\r\n      await this.setupThermalManagement();\r\n\r\n      logger.info('✅ Performance optimization initialized successfully');\r\n\r\n      // Audit log\r\n      await auditService.createAuditEntry({\r\n        auditId: `perf_opt_init_${Date.now()}`,\r\n        eventType: 'PERFORMANCE_OPTIMIZATION_INIT',\r\n        actor: 'SYSTEM',\r\n        resource: 'PERFORMANCE_OPTIMIZER',\r\n        action: 'INITIALIZE',\r\n        result: 'SUCCESS',\r\n        timestamp: new Date(),\r\n        auditData: { config: this.config }\r\n      });\r\n\r\n    } catch (error) {\r\n      logger.error('❌ Failed to initialize performance optimization:', error);\r\n      throw new Error('Performance optimization initialization failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Apply initial system optimizations\r\n   * Configures system for optimal trading performance\r\n   * \r\n   * @returns Promise<void>\r\n   */\r\n  private async applyInitialOptimizations(): Promise<void> {\r\n    try {\r\n      logger.info('🔧 Applying initial system optimizations...');\r\n\r\n      const optimizations: Promise<void>[] = [];\r\n\r\n      // CPU optimizations\r\n      if (this.config.enableCPUOptimization) {\r\n        optimizations.push(this.optimizeCPUPerformance());\r\n      }\r\n\r\n      // Memory optimizations\r\n      if (this.config.enableMemoryOptimization) {\r\n        optimizations.push(this.optimizeMemoryPerformance());\r\n      }\r\n\r\n      // I/O optimizations\r\n      if (this.config.enableIOOptimization) {\r\n        optimizations.push(this.optimizeIOPerformance());\r\n      }\r\n\r\n      // Network optimizations\r\n      if (this.config.enableNetworkOptimization) {\r\n        optimizations.push(this.optimizeNetworkPerformance());\r\n      }\r\n\r\n      // Apply all optimizations concurrently\r\n      await Promise.all(optimizations);\r\n\r\n      logger.info('✅ Initial optimizations applied successfully');\r\n\r\n    } catch (error) {\r\n      logger.error('❌ Failed to apply initial optimizations:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Optimize CPU performance for low-latency trading\r\n   * \r\n   * @returns Promise<void>\r\n   */\r\n  private async optimizeCPUPerformance(): Promise<void> {\r\n    try {\r\n      logger.info('🔧 Optimizing CPU performance...');\r\n\r\n      // Set CPU governor to performance mode\r\n      try {\r\n        const { execSync } = await import('child_process');\r\n        execSync(`echo ${this.config.cpuGovernor} | sudo tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor`, \r\n          { stdio: 'pipe' });\r\n        logger.info(`✅ CPU governor set to: ${this.config.cpuGovernor}`);\r\n      } catch (error) {\r\n        logger.warn('⚠️ Could not set CPU governor (may require sudo):', error);\r\n      }\r\n\r\n      // Disable CPU idle states for consistent performance\r\n      try {\r\n        const { execSync } = await import('child_process');\r\n        execSync('sudo cpupower idle-set -D 0', { stdio: 'pipe' });\r\n        logger.info('✅ CPU idle states optimized');\r\n      } catch (error) {\r\n        logger.warn('⚠️ Could not optimize CPU idle states:', error);\r\n      }\r\n\r\n      // Set CPU affinity for trading processes\r\n      await this.setCPUAffinity();\r\n\r\n    } catch (error) {\r\n      logger.error('❌ CPU optimization failed:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set CPU affinity for optimal performance\r\n   * \r\n   * @returns Promise<void>\r\n   */\r\n  private async setCPUAffinity(): Promise<void> {\r\n    try {\r\n      const cpuInfo = await si.cpu();\r\n      const coreCount = cpuInfo.cores;\r\n\r\n      if (coreCount >= 4) {\r\n        // Reserve cores 0-1 for trading operations, 2-3 for system\r\n        process.env.TRADING_CPU_CORES = '0,1';\r\n        process.env.SYSTEM_CPU_CORES = '2,3';\r\n        logger.info('✅ CPU affinity configured for trading optimization');\r\n      }\r\n\r\n    } catch (error) {\r\n      logger.warn('⚠️ Could not set CPU affinity:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Optimize memory performance\r\n   * \r\n   * @returns Promise<void>\r\n   */\r\n  private async optimizeMemoryPerformance(): Promise<void> {\r\n    try {\r\n      logger.info('🔧 Optimizing memory performance...');\r\n\r\n      // Set memory swappiness for trading workload\r\n      try {\r\n        const { execSync } = await import('child_process');\r\n        execSync(`echo ${this.config.memorySwappiness} | sudo tee /proc/sys/vm/swappiness`, \r\n          { stdio: 'pipe' });\r\n        logger.info(`✅ Memory swappiness set to: ${this.config.memorySwappiness}`);\r\n      } catch (error) {\r\n        logger.warn('⚠️ Could not set memory swappiness:', error);\r\n      }\r\n\r\n      // Optimize memory allocation\r\n      try {\r\n        const { execSync } = await import('child_process');\r\n        // Reduce memory overcommit for stability\r\n        execSync('echo 2 | sudo tee /proc/sys/vm/overcommit_memory', { stdio: 'pipe' });\r\n        // Optimize dirty page writeback\r\n        execSync('echo 5 | sudo tee /proc/sys/vm/dirty_background_ratio', { stdio: 'pipe' });\r\n        execSync('echo 10 | sudo tee /proc/sys/vm/dirty_ratio', { stdio: 'pipe' });\r\n        logger.info('✅ Memory allocation optimized');\r\n      } catch (error) {\r\n        logger.warn('⚠️ Could not optimize memory allocation:', error);\r\n      }\r\n\r\n      // Configure Node.js memory settings\r\n      this.optimizeNodeJSMemory();\r\n\r\n    } catch (error) {\r\n      logger.error('❌ Memory optimization failed:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Optimize Node.js memory settings\r\n   */\r\n  private optimizeNodeJSMemory(): void {\r\n    try {\r\n      // Set optimal heap sizes for trading application\r\n      const totalMemoryGB = Math.floor(require('os').totalmem() / 1024 / 1024 / 1024);\r\n      const maxHeapSize = Math.floor(totalMemoryGB * 0.6); // Use 60% of total memory\r\n\r\n      process.env.NODE_OPTIONS = `--max-old-space-size=${maxHeapSize * 1024}`;\r\n      \r\n      // Enable garbage collection optimizations\r\n      if (process.env.NODE_ENV === 'production') {\r\n        process.env.NODE_OPTIONS += ' --optimize-for-size';\r\n      }\r\n\r\n      logger.info(`✅ Node.js memory optimized: ${maxHeapSize}GB heap`);\r\n\r\n    } catch (error) {\r\n      logger.warn('⚠️ Could not optimize Node.js memory:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Optimize I/O performance\r\n   * \r\n   * @returns Promise<void>\r\n   */\r\n  private async optimizeIOPerformance(): Promise<void> {\r\n    try {\r\n      logger.info('🔧 Optimizing I/O performance...');\r\n\r\n      // Set I/O scheduler for SSD optimization\r\n      try {\r\n        const { execSync } = await import('child_process');\r\n        const blockDevices = await si.blockDevices();\r\n        \r\n        for (const device of blockDevices) {\r\n          if (device.type === 'disk' && !device.removable) {\r\n            try {\r\n              execSync(`echo ${this.config.ioScheduler} | sudo tee /sys/block/${device.name}/queue/scheduler`, \r\n                { stdio: 'pipe' });\r\n              logger.info(`✅ I/O scheduler set to ${this.config.ioScheduler} for ${device.name}`);\r\n            } catch (error) {\r\n              logger.warn(`⚠️ Could not set I/O scheduler for ${device.name}:`, error);\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        logger.warn('⚠️ Could not optimize I/O scheduler:', error);\r\n      }\r\n\r\n      // Optimize file system parameters\r\n      await this.optimizeFileSystem();\r\n\r\n    } catch (error) {\r\n      logger.error('❌ I/O optimization failed:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Optimize file system parameters\r\n   * \r\n   * @returns Promise<void>\r\n   */\r\n  private async optimizeFileSystem(): Promise<void> {\r\n    try {\r\n      const { execSync } = await import('child_process');\r\n\r\n      // Optimize read-ahead for sequential I/O\r\n      execSync('sudo blockdev --setra 256 /dev/sda', { stdio: 'pipe' });\r\n      \r\n      // Optimize file system cache\r\n      execSync('echo 1 | sudo tee /proc/sys/vm/vfs_cache_pressure', { stdio: 'pipe' });\r\n      \r\n      logger.info('✅ File system optimized');\r\n\r\n    } catch (error) {\r\n      logger.warn('⚠️ Could not optimize file system:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Optimize network performance\r\n   * \r\n   * @returns Promise<void>\r\n   */\r\n  private async optimizeNetworkPerformance(): Promise<void> {\r\n    try {\r\n      logger.info('🔧 Optimizing network performance...');\r\n\r\n      const { execSync } = await import('child_process');\r\n\r\n      // Optimize TCP settings for low latency\r\n      const tcpOptimizations = [\r\n        'net.core.rmem_max = 16777216',\r\n        'net.core.wmem_max = 16777216',\r\n        'net.ipv4.tcp_rmem = 4096 87380 16777216',\r\n        'net.ipv4.tcp_wmem = 4096 65536 16777216',\r\n        'net.ipv4.tcp_congestion_control = bbr',\r\n        'net.ipv4.tcp_fastopen = 3',\r\n        'net.ipv4.tcp_low_latency = 1',\r\n        'net.core.netdev_max_backlog = 5000'\r\n      ];\r\n\r\n      for (const optimization of tcpOptimizations) {\r\n        try {\r\n          execSync(`echo \"${optimization}\" | sudo tee -a /etc/sysctl.conf`, { stdio: 'pipe' });\r\n        } catch (error) {\r\n          logger.warn(`⚠️ Could not apply network optimization: ${optimization}`);\r\n        }\r\n      }\r\n\r\n      // Apply sysctl changes\r\n      try {\r\n        execSync('sudo sysctl -p', { stdio: 'pipe' });\r\n        logger.info('✅ Network performance optimized');\r\n      } catch (error) {\r\n        logger.warn('⚠️ Could not apply sysctl changes:', error);\r\n      }\r\n\r\n    } catch (error) {\r\n      logger.error('❌ Network optimization failed:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Setup thermal management\r\n   * \r\n   * @returns Promise<void>\r\n   */\r\n  public async setupThermalManagement(): Promise<void> {\r\n    try {\r\n      logger.info('🌡️ Setting up thermal management...');\r\n\r\n      // Start thermal monitoring\r\n      setInterval(async () => {\r\n        await this.monitorThermalConditions();\r\n      }, 10000); // Check every 10 seconds\r\n\r\n      logger.info('✅ Thermal management setup complete');\r\n\r\n    } catch (error) {\r\n      logger.error('❌ Thermal management setup failed:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Monitor thermal conditions and apply throttling if needed\r\n   * \r\n   * @returns Promise<void>\r\n   */\r\n  private async monitorThermalConditions(): Promise<void> {\r\n    try {\r\n      const cpuTemp = await si.cpuTemperature();\r\n      const currentTemp = cpuTemp.main || 0;\r\n\r\n      if (currentTemp >= this.config.thermalThrottleTemp) {\r\n        await this.applyThermalThrottling(currentTemp);\r\n      } else if (currentTemp < this.config.thermalThrottleTemp - 5) {\r\n        // Remove throttling if temperature is safe\r\n        await this.removeThermalThrottling();\r\n      }\r\n\r\n    } catch (error) {\r\n      logger.error('❌ Thermal monitoring failed:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Apply thermal throttling to prevent overheating\r\n   * \r\n   * @param currentTemp Current CPU temperature\r\n   * @returns Promise<void>\r\n   */\r\n  private async applyThermalThrottling(currentTemp: number): Promise<void> {\r\n    try {\r\n      logger.warn(`🌡️ Applying thermal throttling - CPU temp: ${currentTemp}°C`);\r\n\r\n      // Reduce CPU frequency\r\n      const { execSync } = await import('child_process');\r\n      try {\r\n        execSync('echo powersave | sudo tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor', \r\n          { stdio: 'pipe' });\r\n      } catch (error) {\r\n        logger.warn('⚠️ Could not apply CPU throttling:', error);\r\n      }\r\n\r\n      // Audit critical thermal event\r\n      await auditService.createAuditEntry({\r\n        auditId: `thermal_throttle_${Date.now()}`,\r\n        eventType: 'THERMAL_THROTTLING_APPLIED',\r\n        actor: 'PERFORMANCE_OPTIMIZER',\r\n        resource: 'CPU_THERMAL',\r\n        action: 'APPLY_THROTTLING',\r\n        result: 'SUCCESS',\r\n        timestamp: new Date(),\r\n        auditData: { currentTemp, threshold: this.config.thermalThrottleTemp }\r\n      });\r\n\r\n    } catch (error) {\r\n      logger.error('❌ Failed to apply thermal throttling:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove thermal throttling when temperature is safe\r\n   * \r\n   * @returns Promise<void>\r\n   */\r\n  private async removeThermalThrottling(): Promise<void> {\r\n    try {\r\n      if (this.config.enableCPUOptimization) {\r\n        const { execSync } = await import('child_process');\r\n        try {\r\n          execSync(`echo ${this.config.cpuGovernor} | sudo tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor`, \r\n            { stdio: 'pipe' });\r\n          logger.info('✅ Thermal throttling removed - normal performance restored');\r\n        } catch (error) {\r\n          logger.warn('⚠️ Could not remove CPU throttling:', error);\r\n        }\r\n      }\r\n\r\n    } catch (error) {\r\n      logger.error('❌ Failed to remove thermal throttling:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Start performance monitoring\r\n   * \r\n   * @returns Promise<void>\r\n   */\r\n  private async startPerformanceMonitoring(): Promise<void> {\r\n    try {\r\n      logger.info('📊 Starting performance monitoring...');\r\n\r\n      this.optimizationInterval = setInterval(async () => {\r\n        try {\r\n          await this.measurePerformance();\r\n          await this.generateOptimizationRecommendations();\r\n        } catch (error) {\r\n          logger.error('❌ Performance monitoring error:', error);\r\n        }\r\n      }, this.config.monitoringIntervalMs);\r\n\r\n      logger.info('✅ Performance monitoring started');\r\n\r\n    } catch (error) {\r\n      logger.error('❌ Failed to start performance monitoring:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Measure system performance metrics\r\n   * \r\n   * @returns Promise<PerformanceMetrics>\r\n   */\r\n  public async measurePerformance(): Promise<PerformanceMetrics> {\r\n    try {\r\n      const startTime = process.hrtime.bigint();\r\n      \r\n      // Get current system metrics\r\n      const metrics = this.systemMonitor.getCurrentMetrics();\r\n      \r\n      // Calculate performance scores\r\n      const cpuScore = this.calculateCPUScore(metrics.cpu);\r\n      const memoryScore = this.calculateMemoryScore(metrics.ram);\r\n      const ioScore = this.calculateIOScore(metrics.ssd);\r\n      const networkScore = this.calculateNetworkScore(metrics.network);\r\n      const thermalScore = await this.calculateThermalScore();\r\n\r\n      // Measure latency\r\n      const latency = await this.measureSystemLatency();\r\n      this.latencyMeasurements.push(latency);\r\n      \r\n      // Keep only last 1000 measurements\r\n      if (this.latencyMeasurements.length > 1000) {\r\n        this.latencyMeasurements = this.latencyMeasurements.slice(-1000);\r\n      }\r\n\r\n      // Calculate latency statistics\r\n      const sortedLatencies = [...this.latencyMeasurements].sort((a, b) => a - b);\r\n      const latencyStats = {\r\n        average: this.latencyMeasurements.reduce((a, b) => a + b, 0) / this.latencyMeasurements.length,\r\n        maximum: Math.max(...this.latencyMeasurements),\r\n        p95: sortedLatencies[Math.floor(sortedLatencies.length * 0.95)] || 0,\r\n        p99: sortedLatencies[Math.floor(sortedLatencies.length * 0.99)] || 0\r\n      };\r\n\r\n      // Calculate throughput metrics\r\n      const throughput = {\r\n        cpuOps: this.calculateCPUThroughput(metrics.cpu),\r\n        memoryBandwidth: this.calculateMemoryBandwidth(metrics.ram),\r\n        diskIOPS: metrics.ssd?.readIOPS || 0 + metrics.ssd?.writeIOPS || 0,\r\n        networkThroughput: (metrics.network?.downloadSpeed || 0) + (metrics.network?.uploadSpeed || 0)\r\n      };\r\n\r\n      const overallScore = Math.round((cpuScore + memoryScore + ioScore + networkScore + thermalScore) / 5);\r\n\r\n      const performanceMetrics: PerformanceMetrics = {\r\n        overallScore,\r\n        cpuScore,\r\n        memoryScore,\r\n        ioScore,\r\n        networkScore,\r\n        thermalScore,\r\n        latency: latencyStats,\r\n        throughput,\r\n        timestamp: new Date()\r\n      };\r\n\r\n      // Store in history\r\n      this.performanceHistory.push(performanceMetrics);\r\n      if (this.performanceHistory.length > 100) {\r\n        this.performanceHistory = this.performanceHistory.slice(-100);\r\n      }\r\n\r\n      const endTime = process.hrtime.bigint();\r\n      const measurementTime = Number(endTime - startTime) / 1000000; // Convert to milliseconds\r\n\r\n      logger.debug('📊 Performance measurement completed', {\r\n        overallScore,\r\n        measurementTime: `${measurementTime.toFixed(2)}ms`,\r\n        latency: latencyStats\r\n      });\r\n\r\n      return performanceMetrics;\r\n\r\n    } catch (error) {\r\n      logger.error('❌ Performance measurement failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate CPU performance score\r\n   * \r\n   * @param cpu CPU metrics\r\n   * @returns number Performance score (0-100)\r\n   */\r\n  private calculateCPUScore(cpu?: CPUMetrics): number {\r\n    if (!cpu) return 0;\r\n\r\n    // Lower utilization and temperature = higher score\r\n    const utilizationScore = Math.max(0, 100 - cpu.utilization);\r\n    const temperatureScore = Math.max(0, 100 - (cpu.temperature / 80) * 100);\r\n    const frequencyScore = Math.min(100, (cpu.frequency / 3000) * 100); // Assume 3GHz target\r\n\r\n    return Math.round((utilizationScore + temperatureScore + frequencyScore) / 3);\r\n  }\r\n\r\n  /**\r\n   * Calculate memory performance score\r\n   * \r\n   * @param ram RAM metrics\r\n   * @returns number Performance score (0-100)\r\n   */\r\n  private calculateMemoryScore(ram?: RAMMetrics): number {\r\n    if (!ram) return 0;\r\n\r\n    // Lower utilization = higher score, but some usage is expected\r\n    const utilizationScore = ram.utilization < 50 ? 100 : Math.max(0, 100 - (ram.utilization - 50) * 2);\r\n    const availabilityScore = Math.min(100, (ram.available / ram.total) * 200);\r\n\r\n    return Math.round((utilizationScore + availabilityScore) / 2);\r\n  }\r\n\r\n  /**\r\n   * Calculate I/O performance score\r\n   * \r\n   * @param ssd SSD metrics\r\n   * @returns number Performance score (0-100)\r\n   */\r\n  private calculateIOScore(ssd?: SSDMetrics): number {\r\n    if (!ssd) return 0;\r\n\r\n    // Higher throughput and lower utilization = higher score\r\n    const utilizationScore = Math.max(0, 100 - ssd.utilization);\r\n    const throughputScore = Math.min(100, ((ssd.readThroughput + ssd.writeThroughput) / 500) * 100);\r\n    const healthScore = ssd.health;\r\n\r\n    return Math.round((utilizationScore + throughputScore + healthScore) / 3);\r\n  }\r\n\r\n  /**\r\n   * Calculate network performance score\r\n   * \r\n   * @param network Network metrics\r\n   * @returns number Performance score (0-100)\r\n   */\r\n  private calculateNetworkScore(network?: any): number {\r\n    if (!network) return 0;\r\n\r\n    const activeInterfaces = network.interfaces?.filter((i: any) => i.isUp).length || 0;\r\n    const connectivityScore = activeInterfaces > 0 ? 100 : 0;\r\n    const speedScore = Math.min(100, ((network.downloadSpeed + network.uploadSpeed) / 100) * 100);\r\n\r\n    return Math.round((connectivityScore + speedScore) / 2);\r\n  }\r\n\r\n  /**\r\n   * Calculate thermal performance score\r\n   * \r\n   * @returns Promise<number> Performance score (0-100)\r\n   */\r\n  private async calculateThermalScore(): Promise<number> {\r\n    try {\r\n      const cpuTemp = await si.cpuTemperature();\r\n      const currentTemp = cpuTemp.main || 0;\r\n\r\n      // Lower temperature = higher score\r\n      if (currentTemp < 50) return 100;\r\n      if (currentTemp < 60) return 90;\r\n      if (currentTemp < 70) return 70;\r\n      if (currentTemp < 80) return 50;\r\n      return 20;\r\n\r\n    } catch (error) {\r\n      return 50; // Default score if measurement fails\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Measure system latency\r\n   * \r\n   * @returns Promise<number> Latency in microseconds\r\n   */\r\n  private async measureSystemLatency(): Promise<number> {\r\n    const start = process.hrtime.bigint();\r\n    \r\n    // Perform a small I/O operation to measure system responsiveness\r\n    await new Promise(resolve => setImmediate(resolve));\r\n    \r\n    const end = process.hrtime.bigint();\r\n    return Number(end - start) / 1000; // Convert to microseconds\r\n  }\r\n\r\n  /**\r\n   * Calculate CPU throughput\r\n   * \r\n   * @param cpu CPU metrics\r\n   * @returns number Operations per second\r\n   */\r\n  private calculateCPUThroughput(cpu?: CPUMetrics): number {\r\n    if (!cpu) return 0;\r\n    \r\n    // Estimate based on frequency and utilization\r\n    return Math.round((cpu.frequency * cpu.cores.logical * (cpu.utilization / 100)) / 1000);\r\n  }\r\n\r\n  /**\r\n   * Calculate memory bandwidth\r\n   * \r\n   * @param ram RAM metrics\r\n   * @returns number Bandwidth in MB/s\r\n   */\r\n  private calculateMemoryBandwidth(ram?: RAMMetrics): number {\r\n    if (!ram) return 0;\r\n    \r\n    // Estimate based on memory usage patterns\r\n    return Math.round((ram.used / ram.total) * 25600); // Assume DDR4-3200 theoretical max\r\n  }\r\n\r\n  /**\r\n   * Generate optimization recommendations\r\n   * \r\n   * @returns Promise<OptimizationRecommendation[]>\r\n   */\r\n  public async generateOptimizationRecommendations(): Promise<OptimizationRecommendation[]> {\r\n    try {\r\n      const recommendations: OptimizationRecommendation[] = [];\r\n      const metrics = this.systemMonitor.getCurrentMetrics();\r\n      const latestPerformance = this.performanceHistory[this.performanceHistory.length - 1];\r\n\r\n      // CPU recommendations\r\n      if (metrics.cpu && metrics.cpu.utilization > 80) {\r\n        recommendations.push({\r\n          id: `cpu_high_util_${Date.now()}`,\r\n          type: 'CPU',\r\n          priority: 'HIGH',\r\n          title: 'High CPU Utilization',\r\n          description: `CPU utilization is ${metrics.cpu.utilization}%. Consider reducing background processes or upgrading CPU.`,\r\n          expectedImprovement: 15,\r\n          complexity: 'MEDIUM',\r\n          canAutoApply: false,\r\n          timestamp: new Date()\r\n        });\r\n      }\r\n\r\n      // Memory recommendations\r\n      if (metrics.ram && metrics.ram.utilization > 85) {\r\n        recommendations.push({\r\n          id: `memory_high_util_${Date.now()}`,\r\n          type: 'MEMORY',\r\n          priority: 'HIGH',\r\n          title: 'High Memory Utilization',\r\n          description: `Memory utilization is ${metrics.ram.utilization}%. Consider adding more RAM or optimizing memory usage.`,\r\n          expectedImprovement: 20,\r\n          complexity: 'EASY',\r\n          canAutoApply: false,\r\n          timestamp: new Date()\r\n        });\r\n      }\r\n\r\n      // Thermal recommendations\r\n      if (metrics.cpu && metrics.cpu.temperature > 70) {\r\n        recommendations.push({\r\n          id: `thermal_high_temp_${Date.now()}`,\r\n          type: 'THERMAL',\r\n          priority: 'CRITICAL',\r\n          title: 'High CPU Temperature',\r\n          description: `CPU temperature is ${metrics.cpu.temperature}°C. Check cooling system and ventilation.`,\r\n          expectedImprovement: 25,\r\n          complexity: 'MEDIUM',\r\n          canAutoApply: true,\r\n          implementation: 'apply_thermal_throttling',\r\n          timestamp: new Date()\r\n        });\r\n      }\r\n\r\n      // Performance recommendations\r\n      if (latestPerformance && latestPerformance.overallScore < 70) {\r\n        recommendations.push({\r\n          id: `perf_low_score_${Date.now()}`,\r\n          type: 'CPU',\r\n          priority: 'MEDIUM',\r\n          title: 'Low Performance Score',\r\n          description: `Overall performance score is ${latestPerformance.overallScore}%. System optimization recommended.`,\r\n          expectedImprovement: 30,\r\n          complexity: 'MEDIUM',\r\n          canAutoApply: true,\r\n          implementation: 'reapply_optimizations',\r\n          timestamp: new Date()\r\n        });\r\n      }\r\n\r\n      return recommendations;\r\n\r\n    } catch (error) {\r\n      logger.error('❌ Failed to generate optimization recommendations:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get current thermal status\r\n   * \r\n   * @returns Promise<ThermalStatus>\r\n   */\r\n  public async getThermalStatus(): Promise<ThermalStatus> {\r\n    try {\r\n      const cpuTemp = await si.cpuTemperature();\r\n      const currentTemp = cpuTemp.main || 0;\r\n      const maxSafeTemp = this.config.thermalThrottleTemp;\r\n      const isThrottling = currentTemp >= maxSafeTemp;\r\n\r\n      const alerts: string[] = [];\r\n      const recommendations: string[] = [];\r\n\r\n      if (currentTemp > 80) {\r\n        alerts.push('Critical temperature - immediate action required');\r\n        recommendations.push('Check system cooling and ventilation');\r\n        recommendations.push('Reduce system load');\r\n      } else if (currentTemp > 70) {\r\n        alerts.push('High temperature - monitoring required');\r\n        recommendations.push('Verify cooling system operation');\r\n      }\r\n\r\n      const coolingEffectiveness = Math.max(0, 100 - ((currentTemp - 30) / 50) * 100);\r\n\r\n      return {\r\n        currentTemp,\r\n        maxSafeTemp,\r\n        isThrottling,\r\n        coolingEffectiveness: Math.round(coolingEffectiveness),\r\n        alerts,\r\n        recommendations\r\n      };\r\n\r\n    } catch (error) {\r\n      logger.error('❌ Failed to get thermal status:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get performance history\r\n   * \r\n   * @returns PerformanceMetrics[] Performance history\r\n   */\r\n  public getPerformanceHistory(): PerformanceMetrics[] {\r\n    return [...this.performanceHistory];\r\n  }\r\n\r\n  /**\r\n   * Get current performance metrics\r\n   * \r\n   * @returns PerformanceMetrics | null Current metrics\r\n   */\r\n  public getCurrentPerformanceMetrics(): PerformanceMetrics | null {\r\n    return this.performanceHistory[this.performanceHistory.length - 1] || null;\r\n  }\r\n\r\n  /**\r\n   * Stop performance optimization\r\n   */\r\n  public stopPerformanceOptimization(): void {\r\n    if (this.optimizationInterval) {\r\n      clearInterval(this.optimizationInterval);\r\n      this.optimizationInterval = null;\r\n      logger.info('🛑 Performance optimization stopped');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get optimizer status\r\n   * \r\n   * @returns Object containing status information\r\n   */\r\n  public getStatus(): {\r\n    isOptimizing: boolean;\r\n    config: PerformanceConfig;\r\n    performanceHistory: number;\r\n    latestScore: number | null;\r\n    timestamp: number;\r\n  } {\r\n    const latestMetrics = this.getCurrentPerformanceMetrics();\r\n    \r\n    return {\r\n      isOptimizing: this.optimizationInterval !== null,\r\n      config: this.config,\r\n      performanceHistory: this.performanceHistory.length,\r\n      latestScore: latestMetrics?.overallScore || null,\r\n      timestamp: Date.now()\r\n    };\r\n  }\r\n}\r\n\r\n// =============================================================================\r\n// PERFORMANCE OPTIMIZATION NOTES\r\n// =============================================================================\r\n// 1. Low-latency optimizations for high-frequency trading operations\r\n// 2. Thermal management to prevent performance degradation\r\n// 3. Resource allocation optimization for consistent performance\r\n// 4. Real-time performance monitoring and adjustment\r\n// 5. Automatic optimization recommendations and implementation\r\n// 6. System health scoring for performance assessment\r\n// 7. Comprehensive logging and audit trails for all optimizations\r\n// 8. Hardware-specific optimizations for Intel NUC platform\r\n// =============================================================================\r\n"],"version":3}