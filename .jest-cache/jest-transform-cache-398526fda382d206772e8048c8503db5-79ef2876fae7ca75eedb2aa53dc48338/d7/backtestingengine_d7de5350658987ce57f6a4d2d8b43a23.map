{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\backtesting\\backtesting-engine.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\backtesting\\backtesting-engine.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * BACKTESTING ENGINE - REALISTIC EXECUTION SIMULATION\r\n * =============================================================================\r\n * \r\n * This module implements a comprehensive backtesting engine that simulates\r\n * realistic trading execution with proper slippage, fees, and market impact.\r\n * The engine processes historical market data and executes trading strategies\r\n * to validate their performance under real market conditions.\r\n * \r\n * CRITICAL FEATURES:\r\n * - NO MOCK DATA - only real historical market data\r\n * - Realistic execution simulation with slippage and fees\r\n * - Comprehensive risk management integration\r\n * - Strategy harmonization and signal processing\r\n * - Real-time progress tracking and reporting\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport { EventEmitter } from 'events';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { logger } from '@/core/logging/logger';\r\nimport { AuditService } from '@/security/audit-service';\r\nimport { HistoricalDataFetcher } from './historical-data-fetcher';\r\nimport { PerformanceCalculator } from './performance-calculator';\r\nimport { \r\n  BacktestConfig,\r\n  BacktestResult,\r\n  BacktestTrade,\r\n  BacktestPortfolio,\r\n  BacktestPosition,\r\n  BacktestEngineState,\r\n  BacktestProgress,\r\n  HistoricalMarketData,\r\n  ValidationRules,\r\n  StrategyBacktestResult,\r\n  DataValidationResult\r\n} from './types';\r\nimport { TradingSignal, HarmonizedSignal } from '../strategies/types';\r\nimport { GateIOClient } from '../api/gate-io-client';\r\n\r\n/**\r\n * Strategy interface for backtesting\r\n */\r\ninterface BacktestStrategy {\r\n  name: string;\r\n  generateSignals(marketData: HistoricalMarketData[]): Promise<TradingSignal[]>;\r\n  harmonizeSignals?(signals: TradingSignal[]): Promise<HarmonizedSignal>;\r\n}\r\n\r\n/**\r\n * Execution simulation parameters\r\n */\r\ninterface ExecutionSimulation {\r\n  slippage: number; // Percentage slippage\r\n  marketImpact: number; // Additional impact for large orders\r\n  latency: number; // Execution delay in milliseconds\r\n  partialFills: boolean; // Allow partial order fills\r\n  rejectProbability: number; // Probability of order rejection\r\n}\r\n\r\n/**\r\n * Comprehensive Backtesting Engine\r\n */\r\nexport class BacktestingEngine extends EventEmitter {\r\n  private dataFetcher: HistoricalDataFetcher;\r\n  private auditService: AuditService;\r\n  private state: BacktestEngineState;\r\n  private strategies: Map<string, BacktestStrategy>;\r\n  private validationRules: ValidationRules;\r\n\r\n  constructor(gateIOClient: GateIOClient) {\r\n    super();\r\n    \r\n    this.dataFetcher = new HistoricalDataFetcher(gateIOClient);\r\n    this.auditService = new AuditService();\r\n    this.strategies = new Map();\r\n    \r\n    // Initialize state\r\n    this.state = {\r\n      currentTime: new Date(),\r\n      portfolio: this.createInitialPortfolio(new Date(), 0),\r\n      openPositions: new Map(),\r\n      tradeHistory: [],\r\n      signals: [],\r\n      marketData: [],\r\n      isRunning: false,\r\n      progress: 0,\r\n    };\r\n    \r\n    // Set validation rules\r\n    this.validationRules = {\r\n      minDataPoints: 100,\r\n      maxGapMinutes: 60,\r\n      requireRealData: true,\r\n      minTradeAmount: 10,\r\n      maxPositionSize: 0.1, // 10% of portfolio\r\n      maxOpenPositions: 5,\r\n      maxRiskPerTrade: 0.03, // 3%\r\n      maxTotalRisk: 0.15, // 15%\r\n      maxDrawdown: 0.2, // 20%\r\n      minSharpeRatio: 0.5,\r\n      minWinRate: 0.4, // 40%\r\n      minProfitFactor: 1.2,\r\n    };\r\n    \r\n    logger.info('🚀 Backtesting Engine initialized - REAL DATA ONLY');\r\n  }\r\n\r\n  /**\r\n   * Register a trading strategy for backtesting\r\n   */\r\n  public registerStrategy(strategy: BacktestStrategy): void {\r\n    this.strategies.set(strategy.name, strategy);\r\n    logger.info(`📊 Strategy registered: ${strategy.name}`);\r\n  }\r\n\r\n  /**\r\n   * Run comprehensive backtesting\r\n   */\r\n  public async runBacktest(config: BacktestConfig): Promise<BacktestResult> {\r\n    const startTime = Date.now();\r\n    \r\n    try {\r\n      logger.info(`🎯 Starting backtesting for ${config.symbol} from ${config.startDate.toISOString()} to ${config.endDate.toISOString()}`);\r\n      \r\n      // Validate configuration\r\n      this.validateBacktestConfig(config);\r\n      \r\n      // Initialize state\r\n      this.initializeBacktestState(config);\r\n      \r\n      // Fetch and validate historical data\r\n      this.emit('progress', { status: 'INITIALIZING', progress: 0, message: 'Fetching historical data...' });\r\n      const historicalData = await this.dataFetcher.fetchForBacktest(config);\r\n      \r\n      // Validate data quality\r\n      const dataValidation = await this.dataFetcher.validateForBacktesting(historicalData, config);\r\n      if (!dataValidation.isValid) {\r\n        throw new Error(`Data validation failed: ${dataValidation.errors.join(', ')}`);\r\n      }\r\n      \r\n      this.state.marketData = historicalData;\r\n      logger.info(`📈 Loaded ${historicalData.length} historical data points`);\r\n      \r\n      // Generate trading signals for all strategies\r\n      this.emit('progress', { status: 'RUNNING', progress: 10, message: 'Generating trading signals...' });\r\n      const allSignals = await this.generateAllSignals(historicalData, config.strategies);\r\n      \r\n      // Run simulation\r\n      this.emit('progress', { status: 'RUNNING', progress: 20, message: 'Running simulation...' });\r\n      const portfolioHistory = await this.runSimulation(historicalData, allSignals, config);\r\n      \r\n      // Calculate performance metrics\r\n      this.emit('progress', { status: 'RUNNING', progress: 80, message: 'Calculating performance metrics...' });\r\n      const result = await this.calculateBacktestResults(config, portfolioHistory, dataValidation);\r\n      \r\n      // Log audit event\r\n      await this.auditService.logSecurityEvent({\r\n        type: 'BACKTEST_COMPLETED',\r\n        severity: 'INFO',\r\n        details: {\r\n          symbol: config.symbol,\r\n          duration: Date.now() - startTime,\r\n          trades: result.trades.total,\r\n          performance: result.performance,\r\n        },\r\n        timestamp: new Date(),\r\n      });\r\n      \r\n      this.emit('progress', { status: 'COMPLETED', progress: 100, message: 'Backtesting completed successfully' });\r\n      \r\n      logger.info(`✅ Backtesting completed in ${Date.now() - startTime}ms`);\r\n      logger.info(`📊 Results: ${result.trades.total} trades, ${result.performance.totalReturnPercentage.toFixed(2)}% return, ${result.performance.sharpeRatio.toFixed(2)} Sharpe ratio`);\r\n      \r\n      return result;\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Backtesting failed:', error);\r\n      \r\n      await this.auditService.logSecurityEvent({\r\n        type: 'BACKTEST_FAILED',\r\n        severity: 'ERROR',\r\n        details: {\r\n          symbol: config.symbol,\r\n          error: error.message,\r\n          duration: Date.now() - startTime,\r\n        },\r\n        timestamp: new Date(),\r\n      });\r\n      \r\n      this.emit('progress', { status: 'ERROR', progress: 0, message: `Backtesting failed: ${error.message}` });\r\n      throw error;\r\n      \r\n    } finally {\r\n      this.state.isRunning = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate signals from all registered strategies\r\n   */\r\n  private async generateAllSignals(\r\n    historicalData: HistoricalMarketData[],\r\n    strategyNames: string[]\r\n  ): Promise<Map<string, TradingSignal[]>> {\r\n    const allSignals = new Map<string, TradingSignal[]>();\r\n    \r\n    for (const strategyName of strategyNames) {\r\n      const strategy = this.strategies.get(strategyName);\r\n      if (!strategy) {\r\n        logger.warn(`⚠️ Strategy not found: ${strategyName}`);\r\n        continue;\r\n      }\r\n      \r\n      try {\r\n        logger.info(`🔄 Generating signals for strategy: ${strategyName}`);\r\n        const signals = await strategy.generateSignals(historicalData);\r\n        allSignals.set(strategyName, signals);\r\n        logger.info(`✅ Generated ${signals.length} signals for ${strategyName}`);\r\n        \r\n      } catch (error) {\r\n        logger.error(`❌ Failed to generate signals for ${strategyName}:`, error);\r\n        allSignals.set(strategyName, []);\r\n      }\r\n    }\r\n    \r\n    return allSignals;\r\n  }\r\n\r\n  /**\r\n   * Run the main simulation loop\r\n   */\r\n  private async runSimulation(\r\n    historicalData: HistoricalMarketData[],\r\n    allSignals: Map<string, TradingSignal[]>,\r\n    config: BacktestConfig\r\n  ): Promise<BacktestPortfolio[]> {\r\n    const portfolioHistory: BacktestPortfolio[] = [];\r\n    const executionSim: ExecutionSimulation = {\r\n      slippage: config.slippage,\r\n      marketImpact: 0.001, // 0.1% additional impact\r\n      latency: 100, // 100ms execution delay\r\n      partialFills: true,\r\n      rejectProbability: 0.01, // 1% rejection rate\r\n    };\r\n    \r\n    // Combine and sort all signals by timestamp\r\n    const allSignalsList: Array<{ signal: TradingSignal; strategy: string }> = [];\r\n    for (const [strategy, signals] of allSignals) {\r\n      for (const signal of signals) {\r\n        allSignalsList.push({ signal, strategy });\r\n      }\r\n    }\r\n    allSignalsList.sort((a, b) => a.signal.timestamp.getTime() - b.signal.timestamp.getTime());\r\n    \r\n    let signalIndex = 0;\r\n    let maxEquity = config.initialBalance;\r\n    \r\n    // Process each data point\r\n    for (let i = 0; i < historicalData.length; i++) {\r\n      const marketData = historicalData[i];\r\n      this.state.currentTime = marketData.timestamp;\r\n      \r\n      // Update portfolio with current market prices\r\n      this.updatePortfolioValues(marketData);\r\n      \r\n      // Process signals at current timestamp\r\n      while (signalIndex < allSignalsList.length && \r\n             allSignalsList[signalIndex].signal.timestamp <= marketData.timestamp) {\r\n        \r\n        const { signal, strategy } = allSignalsList[signalIndex];\r\n        await this.processSignal(signal, strategy, marketData, config, executionSim);\r\n        signalIndex++;\r\n      }\r\n      \r\n      // Update stop losses and take profits\r\n      await this.updateStopLossesAndTakeProfits(marketData, config);\r\n      \r\n      // Calculate current portfolio state\r\n      const currentPortfolio = this.calculateCurrentPortfolio(marketData, maxEquity);\r\n      portfolioHistory.push(currentPortfolio);\r\n      \r\n      // Update max equity for drawdown calculation\r\n      if (currentPortfolio.equity > maxEquity) {\r\n        maxEquity = currentPortfolio.equity;\r\n      }\r\n      \r\n      // Update progress\r\n      const progress = 20 + Math.floor((i / historicalData.length) * 60);\r\n      if (i % Math.floor(historicalData.length / 20) === 0) {\r\n        this.emit('progress', { \r\n          status: 'RUNNING', \r\n          progress, \r\n          message: `Processing ${marketData.timestamp.toISOString()}...` \r\n        });\r\n      }\r\n      \r\n      // Risk management checks\r\n      if (currentPortfolio.drawdownPercentage > config.riskManagement.maxDrawdown * 100) {\r\n        logger.warn(`⚠️ Maximum drawdown exceeded: ${currentPortfolio.drawdownPercentage.toFixed(2)}%`);\r\n        // Close all positions in emergency\r\n        await this.closeAllPositions(marketData, 'EMERGENCY_STOP');\r\n      }\r\n    }\r\n    \r\n    // Close any remaining open positions at the end\r\n    if (this.state.openPositions.size > 0) {\r\n      const lastMarketData = historicalData[historicalData.length - 1];\r\n      await this.closeAllPositions(lastMarketData, 'END_OF_PERIOD');\r\n      \r\n      // Add final portfolio state\r\n      const finalPortfolio = this.calculateCurrentPortfolio(lastMarketData, maxEquity);\r\n      portfolioHistory.push(finalPortfolio);\r\n    }\r\n    \r\n    return portfolioHistory;\r\n  }\r\n\r\n  /**\r\n   * Process a trading signal\r\n   */\r\n  private async processSignal(\r\n    signal: TradingSignal,\r\n    strategy: string,\r\n    marketData: HistoricalMarketData,\r\n    config: BacktestConfig,\r\n    executionSim: ExecutionSimulation\r\n  ): Promise<void> {\r\n    try {\r\n      // Skip HOLD signals\r\n      if (signal.type === 'HOLD') return;\r\n      \r\n      // Validate signal\r\n      if (!this.validateSignal(signal, config)) {\r\n        logger.debug(`⚠️ Signal validation failed for ${signal.id}`);\r\n        return;\r\n      }\r\n      \r\n      // Calculate position size based on risk management\r\n      const positionSize = this.calculatePositionSize(signal, config, marketData);\r\n      if (positionSize <= 0) {\r\n        logger.debug(`⚠️ Position size too small for signal ${signal.id}`);\r\n        return;\r\n      }\r\n      \r\n      // Simulate execution with realistic conditions\r\n      const executedTrade = await this.simulateExecution(\r\n        signal,\r\n        strategy,\r\n        positionSize,\r\n        marketData,\r\n        config,\r\n        executionSim\r\n      );\r\n      \r\n      if (executedTrade) {\r\n        this.state.tradeHistory.push(executedTrade);\r\n        \r\n        if (signal.type === 'BUY') {\r\n          // Open new position\r\n          const position: BacktestPosition = {\r\n            symbol: signal.symbol,\r\n            quantity: executedTrade.quantity,\r\n            averagePrice: executedTrade.entryPrice,\r\n            currentPrice: marketData.close,\r\n            unrealizedPnL: 0,\r\n            unrealizedPnLPercentage: 0,\r\n            stopLoss: executedTrade.stopLoss,\r\n            takeProfit: executedTrade.takeProfit,\r\n            entryTime: executedTrade.entryTime,\r\n            strategy,\r\n          };\r\n          \r\n          this.state.openPositions.set(executedTrade.id, position);\r\n          \r\n        } else if (signal.type === 'SELL') {\r\n          // Close existing position\r\n          const positionId = this.findPositionToClose(signal.symbol);\r\n          if (positionId) {\r\n            this.state.openPositions.delete(positionId);\r\n            \r\n            // Update trade with exit information\r\n            const tradeIndex = this.state.tradeHistory.findIndex(t => t.id === positionId);\r\n            if (tradeIndex >= 0) {\r\n              const trade = this.state.tradeHistory[tradeIndex];\r\n              trade.exitPrice = executedTrade.entryPrice; // Exit price is entry price of sell order\r\n              trade.exitTime = executedTrade.entryTime;\r\n              trade.status = 'CLOSED';\r\n              trade.exitReason = 'STRATEGY_EXIT';\r\n              trade.pnl = this.calculateTradePnL(trade);\r\n              trade.pnlPercentage = trade.pnl / (trade.entryPrice * trade.quantity) * 100;\r\n            }\r\n          }\r\n        }\r\n        \r\n        logger.debug(`✅ Executed ${signal.type} signal for ${signal.symbol}: ${positionSize} @ ${executedTrade.entryPrice}`);\r\n      }\r\n      \r\n    } catch (error) {\r\n      logger.error(`❌ Failed to process signal ${signal.id}:`, error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Simulate realistic trade execution\r\n   */\r\n  private async simulateExecution(\r\n    signal: TradingSignal,\r\n    strategy: string,\r\n    positionSize: number,\r\n    marketData: HistoricalMarketData,\r\n    config: BacktestConfig,\r\n    executionSim: ExecutionSimulation\r\n  ): Promise<BacktestTrade | null> {\r\n    // Simulate order rejection\r\n    if (Math.random() < executionSim.rejectProbability) {\r\n      logger.debug(`❌ Order rejected for signal ${signal.id}`);\r\n      return null;\r\n    }\r\n    \r\n    // Calculate execution price with slippage\r\n    const basePrice = signal.type === 'BUY' ? marketData.close : marketData.close;\r\n    const slippageAmount = basePrice * executionSim.slippage;\r\n    const marketImpactAmount = basePrice * executionSim.marketImpact * Math.min(positionSize / 1000, 1);\r\n    \r\n    const executionPrice = signal.type === 'BUY' \r\n      ? basePrice + slippageAmount + marketImpactAmount\r\n      : basePrice - slippageAmount - marketImpactAmount;\r\n    \r\n    // Calculate fees\r\n    const feeRate = signal.type === 'BUY' ? config.fees.taker : config.fees.maker;\r\n    const fees = positionSize * executionPrice * feeRate;\r\n    \r\n    // Calculate stop loss and take profit levels\r\n    const stopLoss = signal.type === 'BUY' \r\n      ? executionPrice * (1 - config.riskManagement.stopLossPercentage)\r\n      : executionPrice * (1 + config.riskManagement.stopLossPercentage);\r\n    \r\n    const riskAmount = Math.abs(executionPrice - stopLoss) * positionSize;\r\n    const rewardAmount = riskAmount * config.riskManagement.minRiskRewardRatio;\r\n    const takeProfit = signal.type === 'BUY'\r\n      ? executionPrice + (rewardAmount / positionSize)\r\n      : executionPrice - (rewardAmount / positionSize);\r\n    \r\n    // Create trade record\r\n    const trade: BacktestTrade = {\r\n      id: uuidv4(),\r\n      symbol: signal.symbol,\r\n      type: signal.type,\r\n      quantity: positionSize,\r\n      entryPrice: executionPrice,\r\n      entryTime: new Date(marketData.timestamp.getTime() + executionSim.latency),\r\n      strategy,\r\n      signal,\r\n      stopLoss,\r\n      takeProfit,\r\n      fees,\r\n      slippage: slippageAmount,\r\n      status: 'OPEN',\r\n    };\r\n    \r\n    return trade;\r\n  }\r\n\r\n  /**\r\n   * Update stop losses and take profits\r\n   */\r\n  private async updateStopLossesAndTakeProfits(\r\n    marketData: HistoricalMarketData,\r\n    config: BacktestConfig\r\n  ): Promise<void> {\r\n    const positionsToClose: string[] = [];\r\n    \r\n    for (const [positionId, position] of this.state.openPositions) {\r\n      const currentPrice = marketData.close;\r\n      \r\n      // Check stop loss\r\n      if ((position.quantity > 0 && currentPrice <= position.stopLoss) ||\r\n          (position.quantity < 0 && currentPrice >= position.stopLoss)) {\r\n        positionsToClose.push(positionId);\r\n        \r\n        // Update trade record\r\n        const tradeIndex = this.state.tradeHistory.findIndex(t => t.id === positionId);\r\n        if (tradeIndex >= 0) {\r\n          const trade = this.state.tradeHistory[tradeIndex];\r\n          trade.exitPrice = position.stopLoss;\r\n          trade.exitTime = marketData.timestamp;\r\n          trade.status = 'STOPPED';\r\n          trade.exitReason = 'STOP_LOSS';\r\n          trade.pnl = this.calculateTradePnL(trade);\r\n          trade.pnlPercentage = trade.pnl / (trade.entryPrice * trade.quantity) * 100;\r\n        }\r\n        \r\n        continue;\r\n      }\r\n      \r\n      // Check take profit\r\n      if ((position.quantity > 0 && currentPrice >= position.takeProfit) ||\r\n          (position.quantity < 0 && currentPrice <= position.takeProfit)) {\r\n        positionsToClose.push(positionId);\r\n        \r\n        // Update trade record\r\n        const tradeIndex = this.state.tradeHistory.findIndex(t => t.id === positionId);\r\n        if (tradeIndex >= 0) {\r\n          const trade = this.state.tradeHistory[tradeIndex];\r\n          trade.exitPrice = position.takeProfit;\r\n          trade.exitTime = marketData.timestamp;\r\n          trade.status = 'CLOSED';\r\n          trade.exitReason = 'TAKE_PROFIT';\r\n          trade.pnl = this.calculateTradePnL(trade);\r\n          trade.pnlPercentage = trade.pnl / (trade.entryPrice * trade.quantity) * 100;\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Remove closed positions\r\n    for (const positionId of positionsToClose) {\r\n      this.state.openPositions.delete(positionId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Close all open positions\r\n   */\r\n  private async closeAllPositions(marketData: HistoricalMarketData, reason: string): Promise<void> {\r\n    for (const [positionId, position] of this.state.openPositions) {\r\n      // Update trade record\r\n      const tradeIndex = this.state.tradeHistory.findIndex(t => t.id === positionId);\r\n      if (tradeIndex >= 0) {\r\n        const trade = this.state.tradeHistory[tradeIndex];\r\n        trade.exitPrice = marketData.close;\r\n        trade.exitTime = marketData.timestamp;\r\n        trade.status = 'CLOSED';\r\n        trade.exitReason = reason as any;\r\n        trade.pnl = this.calculateTradePnL(trade);\r\n        trade.pnlPercentage = trade.pnl / (trade.entryPrice * trade.quantity) * 100;\r\n      }\r\n    }\r\n    \r\n    this.state.openPositions.clear();\r\n    logger.info(`🔒 Closed all positions due to: ${reason}`);\r\n  }\r\n\r\n  /**\r\n   * Calculate comprehensive backtest results\r\n   */\r\n  private async calculateBacktestResults(\r\n    config: BacktestConfig,\r\n    portfolioHistory: BacktestPortfolio[],\r\n    dataValidation: DataValidationResult\r\n  ): Promise<BacktestResult> {\r\n    const period = {\r\n      start: config.startDate,\r\n      end: config.endDate,\r\n      durationDays: (config.endDate.getTime() - config.startDate.getTime()) / (1000 * 60 * 60 * 24),\r\n    };\r\n    \r\n    // Calculate performance metrics\r\n    const performance = PerformanceCalculator.calculatePerformanceMetrics(\r\n      this.state.tradeHistory,\r\n      portfolioHistory,\r\n      config.initialBalance\r\n    );\r\n    \r\n    // Calculate risk metrics\r\n    const returns = this.calculateReturns(portfolioHistory);\r\n    const risk = PerformanceCalculator.calculateRiskMetrics(returns);\r\n    \r\n    // Calculate trade statistics\r\n    const trades = PerformanceCalculator.calculateTradeStatistics(this.state.tradeHistory);\r\n    \r\n    // Generate strategy performance breakdown\r\n    const strategyPerformance = this.calculateStrategyPerformance(config.strategies);\r\n    \r\n    // Generate time series data\r\n    const equityCurve = PerformanceCalculator.generateEquityCurve(portfolioHistory);\r\n    const drawdownCurve = PerformanceCalculator.generateDrawdownCurve(portfolioHistory);\r\n    const monthlyReturns = PerformanceCalculator.generateMonthlyReturns(portfolioHistory, this.state.tradeHistory);\r\n    \r\n    const result: BacktestResult = {\r\n      config,\r\n      period,\r\n      trades,\r\n      performance,\r\n      risk,\r\n      strategyPerformance,\r\n      equityCurve,\r\n      drawdownCurve,\r\n      monthlyReturns,\r\n      dataQuality: {\r\n        totalDataPoints: dataValidation.totalPoints,\r\n        validDataPoints: dataValidation.validPoints,\r\n        dataIntegrityScore: dataValidation.integrityScore,\r\n        gapsDetected: dataValidation.gaps.length,\r\n        averageGapMinutes: dataValidation.gaps.length > 0 \r\n          ? dataValidation.gaps.reduce((sum, gap) => sum + gap.durationMinutes, 0) / dataValidation.gaps.length\r\n          : 0,\r\n        dataSource: 'GATE_IO_REAL_DATA',\r\n      },\r\n      executionDetails: this.state.tradeHistory,\r\n      portfolioHistory,\r\n    };\r\n    \r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Helper methods\r\n   */\r\n  private validateBacktestConfig(config: BacktestConfig): void {\r\n    if (!config.symbol || config.symbol.trim() === '') {\r\n      throw new Error('Symbol is required');\r\n    }\r\n    \r\n    if (config.startDate >= config.endDate) {\r\n      throw new Error('Start date must be before end date');\r\n    }\r\n    \r\n    if (config.initialBalance <= 0) {\r\n      throw new Error('Initial balance must be positive');\r\n    }\r\n    \r\n    if (config.strategies.length === 0) {\r\n      throw new Error('At least one strategy must be specified');\r\n    }\r\n    \r\n    // Validate strategies exist\r\n    for (const strategyName of config.strategies) {\r\n      if (!this.strategies.has(strategyName)) {\r\n        throw new Error(`Strategy not found: ${strategyName}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeBacktestState(config: BacktestConfig): void {\r\n    this.state = {\r\n      currentTime: config.startDate,\r\n      portfolio: this.createInitialPortfolio(config.startDate, config.initialBalance),\r\n      openPositions: new Map(),\r\n      tradeHistory: [],\r\n      signals: [],\r\n      marketData: [],\r\n      isRunning: true,\r\n      progress: 0,\r\n    };\r\n  }\r\n\r\n  private createInitialPortfolio(timestamp: Date, balance: number): BacktestPortfolio {\r\n    return {\r\n      timestamp,\r\n      balance,\r\n      equity: balance,\r\n      positions: [],\r\n      totalPnL: 0,\r\n      unrealizedPnL: 0,\r\n      realizedPnL: 0,\r\n      drawdown: 0,\r\n      drawdownPercentage: 0,\r\n      maxDrawdown: 0,\r\n      maxDrawdownPercentage: 0,\r\n    };\r\n  }\r\n\r\n  private validateSignal(signal: TradingSignal, config: BacktestConfig): boolean {\r\n    // Check signal strength and confidence\r\n    if (signal.strength < 50 || signal.confidence < 60) {\r\n      return false;\r\n    }\r\n    \r\n    // Check risk-reward ratio\r\n    if (signal.riskReward < config.riskManagement.minRiskRewardRatio) {\r\n      return false;\r\n    }\r\n    \r\n    return true;\r\n  }\r\n\r\n  private calculatePositionSize(\r\n    signal: TradingSignal,\r\n    config: BacktestConfig,\r\n    marketData: HistoricalMarketData\r\n  ): number {\r\n    const availableBalance = this.state.portfolio.balance;\r\n    const riskAmount = availableBalance * config.riskManagement.maxRiskPerTrade;\r\n    \r\n    // Calculate position size based on stop loss distance\r\n    const stopLossDistance = config.riskManagement.stopLossPercentage;\r\n    const positionValue = riskAmount / stopLossDistance;\r\n    const positionSize = positionValue / marketData.close;\r\n    \r\n    // Apply confidence-based sizing\r\n    const confidenceMultiplier = signal.confidence / 100;\r\n    const adjustedSize = positionSize * confidenceMultiplier;\r\n    \r\n    // Ensure minimum trade amount\r\n    const minSize = config.riskManagement.maxRiskPerTrade * availableBalance / marketData.close;\r\n    \r\n    return Math.max(adjustedSize, minSize);\r\n  }\r\n\r\n  private updatePortfolioValues(marketData: HistoricalMarketData): void {\r\n    // Update position values\r\n    for (const [positionId, position] of this.state.openPositions) {\r\n      if (position.symbol === marketData.symbol) {\r\n        position.currentPrice = marketData.close;\r\n        position.unrealizedPnL = (marketData.close - position.averagePrice) * position.quantity;\r\n        position.unrealizedPnLPercentage = (position.unrealizedPnL / (position.averagePrice * Math.abs(position.quantity))) * 100;\r\n      }\r\n    }\r\n  }\r\n\r\n  private calculateCurrentPortfolio(marketData: HistoricalMarketData, maxEquity: number): BacktestPortfolio {\r\n    const positions: BacktestPosition[] = Array.from(this.state.openPositions.values());\r\n    const unrealizedPnL = positions.reduce((sum, pos) => sum + pos.unrealizedPnL, 0);\r\n    const realizedPnL = this.state.tradeHistory\r\n      .filter(t => t.status === 'CLOSED' && t.pnl !== undefined)\r\n      .reduce((sum, t) => sum + t.pnl!, 0);\r\n    \r\n    const equity = this.state.portfolio.balance + unrealizedPnL + realizedPnL;\r\n    const drawdown = Math.max(0, maxEquity - equity);\r\n    const drawdownPercentage = maxEquity > 0 ? (drawdown / maxEquity) * 100 : 0;\r\n    \r\n    return {\r\n      timestamp: marketData.timestamp,\r\n      balance: this.state.portfolio.balance,\r\n      equity,\r\n      positions,\r\n      totalPnL: unrealizedPnL + realizedPnL,\r\n      unrealizedPnL,\r\n      realizedPnL,\r\n      drawdown,\r\n      drawdownPercentage,\r\n      maxDrawdown: Math.max(this.state.portfolio.maxDrawdown, drawdown),\r\n      maxDrawdownPercentage: Math.max(this.state.portfolio.maxDrawdownPercentage, drawdownPercentage),\r\n    };\r\n  }\r\n\r\n  private calculateTradePnL(trade: BacktestTrade): number {\r\n    if (!trade.exitPrice) return 0;\r\n    \r\n    const pnl = trade.type === 'BUY'\r\n      ? (trade.exitPrice - trade.entryPrice) * trade.quantity\r\n      : (trade.entryPrice - trade.exitPrice) * trade.quantity;\r\n    \r\n    return pnl - trade.fees;\r\n  }\r\n\r\n  private findPositionToClose(symbol: string): string | null {\r\n    for (const [positionId, position] of this.state.openPositions) {\r\n      if (position.symbol === symbol) {\r\n        return positionId;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private calculateReturns(portfolioHistory: BacktestPortfolio[]): number[] {\r\n    const returns: number[] = [];\r\n    \r\n    for (let i = 1; i < portfolioHistory.length; i++) {\r\n      const prevEquity = portfolioHistory[i - 1].equity;\r\n      const currEquity = portfolioHistory[i].equity;\r\n      \r\n      if (prevEquity > 0) {\r\n        const returnRate = (currEquity - prevEquity) / prevEquity;\r\n        returns.push(returnRate);\r\n      }\r\n    }\r\n    \r\n    return returns;\r\n  }\r\n\r\n  private calculateStrategyPerformance(strategyNames: string[]): Record<string, StrategyBacktestResult> {\r\n    const strategyPerformance: Record<string, StrategyBacktestResult> = {};\r\n    \r\n    for (const strategyName of strategyNames) {\r\n      const strategyTrades = this.state.tradeHistory.filter(t => t.strategy === strategyName);\r\n      const closedTrades = strategyTrades.filter(t => t.status === 'CLOSED' && t.pnl !== undefined);\r\n      \r\n      const winningTrades = closedTrades.filter(t => t.pnl! > 0);\r\n      const winRate = closedTrades.length > 0 ? (winningTrades.length / closedTrades.length) * 100 : 0;\r\n      \r\n      const totalReturn = closedTrades.reduce((sum, t) => sum + t.pnl!, 0);\r\n      const grossProfit = winningTrades.reduce((sum, t) => sum + t.pnl!, 0);\r\n      const grossLoss = Math.abs(closedTrades.filter(t => t.pnl! < 0).reduce((sum, t) => sum + t.pnl!, 0));\r\n      const profitFactor = grossLoss > 0 ? grossProfit / grossLoss : grossProfit > 0 ? Infinity : 0;\r\n      \r\n      // Calculate average holding period\r\n      const holdingPeriods = closedTrades\r\n        .filter(t => t.exitTime)\r\n        .map(t => (t.exitTime!.getTime() - t.entryTime.getTime()) / (1000 * 60 * 60)); // in hours\r\n      const averageHoldingPeriod = holdingPeriods.length > 0 \r\n        ? holdingPeriods.reduce((sum, h) => sum + h, 0) / holdingPeriods.length \r\n        : 0;\r\n      \r\n      strategyPerformance[strategyName] = {\r\n        strategyName,\r\n        trades: closedTrades.length,\r\n        winRate,\r\n        totalReturn,\r\n        sharpeRatio: 0, // Would need returns series for each strategy\r\n        maxDrawdown: 0, // Would need to track per-strategy drawdown\r\n        profitFactor,\r\n        averageHoldingPeriod,\r\n        signalAccuracy: winRate / 100,\r\n        contribution: 0, // Would need to calculate contribution to overall performance\r\n      };\r\n    }\r\n    \r\n    return strategyPerformance;\r\n  }\r\n\r\n  /**\r\n   * Get current backtesting state\r\n   */\r\n  public getState(): BacktestEngineState {\r\n    return { ...this.state };\r\n  }\r\n\r\n  /**\r\n   * Stop running backtest\r\n   */\r\n  public stop(): void {\r\n    this.state.isRunning = false;\r\n    this.emit('progress', { status: 'CANCELLED', progress: 0, message: 'Backtesting cancelled by user' });\r\n    logger.info('🛑 Backtesting stopped by user');\r\n  }\r\n\r\n  /**\r\n   * Validate that only real data is used (no mock data)\r\n   */\r\n  private validateRealDataOnly(data: HistoricalMarketData[]): void {\r\n    for (const point of data) {\r\n      if (point.source !== 'GATE_IO' || !point.validated) {\r\n        throw new Error(`Mock or invalid data detected: ${point.symbol} at ${point.timestamp.toISOString()}`);\r\n      }\r\n    }\r\n    \r\n    logger.info('✅ Real data validation passed - no mock data detected');\r\n  }\r\n\r\n  /**\r\n   * Enhanced strategy validation with real data requirements\r\n   */\r\n  private validateStrategyWithRealData(\r\n    strategy: BacktestStrategy,\r\n    historicalData: HistoricalMarketData[]\r\n  ): void {\r\n    // Ensure strategy can handle real data format\r\n    if (!strategy.generateSignals) {\r\n      throw new Error(`Strategy ${strategy.name} missing generateSignals method`);\r\n    }\r\n    \r\n    // Validate data integrity for strategy\r\n    this.validateRealDataOnly(historicalData);\r\n    \r\n    logger.info(`✅ Strategy ${strategy.name} validated with real data`);\r\n  }\r\n\r\n  /**\r\n   * Stop running backtest\r\n   */\r\n  public stop(): void {\r\n    this.state.isRunning = false;\r\n    this.emit('progress', { status: 'CANCELLED', progress: 0, message: 'Backtesting stopped by user' });\r\n    logger.info('🛑 Backtesting stopped by user');\r\n  }\r\n}\r\n"],"version":3}