{"version":3,"names":["cov_1nhvlyjug3","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","events_1","require","logger_1","llm_engine_1","market_analyzer_1","anomaly_detector_1","adaptive_learner_1","resource_monitor_1","AIEngine","EventEmitter","logger","config","llmEngine","marketAnalyzer","anomalyDetector","adaptiveLearner","resourceMonitor","isInitialized","isRunning","analysisInterval","healthCheckInterval","constructor","Logger","LLMEngine","provider","llmProvider","modelName","apiKey","maxTokens","temperature","MarketAnalyzer","AnomalyDetector","AdaptiveLearner","ResourceMonitor","resourceLimits","info","model","learningEnabled","enableLearning","anomalyDetectionEnabled","enableAnomalyDetection","initialize","testAICapabilities","emit","error","Error","warn","startContinuousAnalysis","startHealthMonitoring","shutdown","clearInterval","stop","saveModel","analyzeMarket","symbol","marketData","debug","analysis","analyze","anomalies","detectAnomalies","length","riskAssessment","level","factors","push","map","a","description","learningInsights","getInsights","prediction","confidence","confidenceMultiplier","sentiment","score","trend","technicalAnalysis","direction","generateTradeSignal","signal","action","reasoning","timeframe","timestamp","Date","Math","min","entryPrice","price","stopLoss","takeProfit","learnFromTrade","tradeResult","success","profitable","getSystemHealth","health","isHealthy","components","performance","responseTime","accuracy","memoryUsage","cpuUsage","lastUpdate","errors","warnings","resourceStats","getStats","measureResponseTime","Object","values","every","status","maxMemoryMB","maxCpuPercent","testResponse","generateResponse","setInterval","symbols","mockMarketData","volume","startTime","now","getStatus","exports","default"],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\ai\\ai-engine.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * AI CRYPTO TRADING AGENT - AI ENGINE\r\n * =============================================================================\r\n * \r\n * Core AI engine that provides intelligent market analysis, trade signal\r\n * generation, and adaptive learning capabilities using Google Gemini AI.\r\n * \r\n * Features:\r\n * - Market sentiment analysis\r\n * - Trade signal generation\r\n * - Risk assessment\r\n * - Performance prediction\r\n * - Adaptive learning\r\n * - Anomaly detection\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport { EventEmitter } from 'events';\r\nimport { Logger } from '../core/logging/logger';\r\nimport { LLMEngine } from './llm-engine';\r\nimport { MarketAnalyzer } from './market-analyzer';\r\nimport { AnomalyDetector } from './anomaly-detector';\r\nimport { AdaptiveLearner } from './adaptive-learner';\r\nimport { ResourceMonitor } from './resource-monitor';\r\n\r\n/**\r\n * AI Engine configuration interface\r\n */\r\nexport interface AIEngineConfig {\r\n  llmProvider: 'google' | 'openai' | 'anthropic';\r\n  modelName: string;\r\n  apiKey: string;\r\n  maxTokens: number;\r\n  temperature: number;\r\n  enableLearning: boolean;\r\n  enableAnomalyDetection: boolean;\r\n  resourceLimits: {\r\n    maxMemoryMB: number;\r\n    maxCpuPercent: number;\r\n  };\r\n}\r\n\r\n/**\r\n * Market analysis result interface\r\n */\r\nexport interface MarketAnalysis {\r\n  symbol: string;\r\n  timestamp: Date;\r\n  sentiment: {\r\n    score: number; // -1 to 1\r\n    confidence: number; // 0 to 1\r\n    factors: string[];\r\n  };\r\n  technicalAnalysis: {\r\n    trend: 'bullish' | 'bearish' | 'neutral';\r\n    strength: number; // 0 to 1\r\n    support: number;\r\n    resistance: number;\r\n    indicators: Record<string, number>;\r\n  };\r\n  fundamentalAnalysis: {\r\n    score: number; // -1 to 1\r\n    factors: string[];\r\n  };\r\n  prediction: {\r\n    direction: 'up' | 'down' | 'sideways';\r\n    confidence: number; // 0 to 1\r\n    timeframe: string;\r\n    targetPrice?: number;\r\n  };\r\n  riskAssessment: {\r\n    level: 'low' | 'medium' | 'high';\r\n    factors: string[];\r\n    score: number; // 0 to 1\r\n  };\r\n}\r\n\r\n/**\r\n * Trade signal interface\r\n */\r\nexport interface TradeSignal {\r\n  symbol: string;\r\n  action: 'buy' | 'sell' | 'hold';\r\n  confidence: number; // 0 to 1\r\n  reasoning: string[];\r\n  entryPrice?: number;\r\n  stopLoss?: number;\r\n  takeProfit?: number;\r\n  positionSize?: number;\r\n  timeframe: string;\r\n  timestamp: Date;\r\n}\r\n\r\n/**\r\n * AI system health interface\r\n */\r\nexport interface AISystemHealth {\r\n  isHealthy: boolean;\r\n  components: {\r\n    llmEngine: boolean;\r\n    marketAnalyzer: boolean;\r\n    anomalyDetector: boolean;\r\n    adaptiveLearner: boolean;\r\n    resourceMonitor: boolean;\r\n  };\r\n  performance: {\r\n    responseTime: number;\r\n    accuracy: number;\r\n    memoryUsage: number;\r\n    cpuUsage: number;\r\n  };\r\n  lastUpdate: Date;\r\n  errors: string[];\r\n  warnings: string[];\r\n}\r\n\r\n/**\r\n * Main AI Engine class\r\n * Orchestrates all AI components and provides intelligent trading insights\r\n */\r\nexport class AIEngine extends EventEmitter {\r\n  private logger: Logger;\r\n  private config: AIEngineConfig;\r\n  private llmEngine: LLMEngine;\r\n  private marketAnalyzer: MarketAnalyzer;\r\n  private anomalyDetector: AnomalyDetector;\r\n  private adaptiveLearner: AdaptiveLearner;\r\n  private resourceMonitor: ResourceMonitor;\r\n  private isInitialized: boolean = false;\r\n  private isRunning: boolean = false;\r\n  private analysisInterval: NodeJS.Timeout | null = null;\r\n  private healthCheckInterval: NodeJS.Timeout | null = null;\r\n\r\n  constructor(config: AIEngineConfig) {\r\n    super();\r\n    this.logger = new Logger('AIEngine');\r\n    this.config = config;\r\n\r\n    // Initialize AI components\r\n    this.llmEngine = new LLMEngine({\r\n      provider: config.llmProvider,\r\n      modelName: config.modelName,\r\n      apiKey: config.apiKey,\r\n      maxTokens: config.maxTokens,\r\n      temperature: config.temperature\r\n    });\r\n\r\n    this.marketAnalyzer = new MarketAnalyzer(this.llmEngine);\r\n    this.anomalyDetector = new AnomalyDetector();\r\n    this.adaptiveLearner = new AdaptiveLearner();\r\n    this.resourceMonitor = new ResourceMonitor(config.resourceLimits);\r\n\r\n    this.logger.info('AI Engine created', {\r\n      provider: config.llmProvider,\r\n      model: config.modelName,\r\n      learningEnabled: config.enableLearning,\r\n      anomalyDetectionEnabled: config.enableAnomalyDetection\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Initialize the AI Engine\r\n   * Sets up all AI components and validates connections\r\n   */\r\n  async initialize(): Promise<void> {\r\n    try {\r\n      this.logger.info('ü§ñ Initializing AI Engine...');\r\n\r\n      // Initialize LLM engine\r\n      await this.llmEngine.initialize();\r\n      this.logger.info('‚úÖ LLM engine initialized');\r\n\r\n      // Initialize market analyzer\r\n      await this.marketAnalyzer.initialize();\r\n      this.logger.info('‚úÖ Market analyzer initialized');\r\n\r\n      // Initialize anomaly detector if enabled\r\n      if (this.config.enableAnomalyDetection) {\r\n        await this.anomalyDetector.initialize();\r\n        this.logger.info('‚úÖ Anomaly detector initialized');\r\n      }\r\n\r\n      // Initialize adaptive learner if enabled\r\n      if (this.config.enableLearning) {\r\n        await this.adaptiveLearner.initialize();\r\n        this.logger.info('‚úÖ Adaptive learner initialized');\r\n      }\r\n\r\n      // Initialize resource monitor\r\n      await this.resourceMonitor.initialize();\r\n      this.logger.info('‚úÖ Resource monitor initialized');\r\n\r\n      // Test AI capabilities\r\n      await this.testAICapabilities();\r\n      this.logger.info('‚úÖ AI capabilities verified');\r\n\r\n      this.isInitialized = true;\r\n      this.logger.info('‚úÖ AI Engine initialization complete');\r\n\r\n      this.emit('initialized');\r\n\r\n    } catch (error) {\r\n      this.logger.error('‚ùå AI Engine initialization failed:', error);\r\n      throw new Error(`AI Engine initialization failed: ${error}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Start AI operations\r\n   * Begins continuous market analysis and learning\r\n   */\r\n  async start(): Promise<void> {\r\n    if (!this.isInitialized) {\r\n      throw new Error('AI Engine must be initialized before starting');\r\n    }\r\n\r\n    if (this.isRunning) {\r\n      this.logger.warn('AI Engine is already running');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      this.logger.info('üöÄ Starting AI Engine...');\r\n\r\n      // Start continuous market analysis\r\n      this.startContinuousAnalysis();\r\n\r\n      // Start health monitoring\r\n      this.startHealthMonitoring();\r\n\r\n      // Start resource monitoring\r\n      await this.resourceMonitor.start();\r\n\r\n      this.isRunning = true;\r\n      this.logger.info('‚úÖ AI Engine started successfully');\r\n\r\n      this.emit('started');\r\n\r\n    } catch (error) {\r\n      this.logger.error('‚ùå Failed to start AI Engine:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop AI operations\r\n   * Gracefully shuts down all AI activities\r\n   */\r\n  async shutdown(): Promise<void> {\r\n    if (!this.isRunning) {\r\n      this.logger.warn('AI Engine is not running');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      this.logger.info('üõë Shutting down AI Engine...');\r\n\r\n      // Stop continuous analysis\r\n      if (this.analysisInterval) {\r\n        clearInterval(this.analysisInterval);\r\n        this.analysisInterval = null;\r\n      }\r\n\r\n      // Stop health monitoring\r\n      if (this.healthCheckInterval) {\r\n        clearInterval(this.healthCheckInterval);\r\n        this.healthCheckInterval = null;\r\n      }\r\n\r\n      // Stop resource monitoring\r\n      await this.resourceMonitor.stop();\r\n\r\n      // Save learning data if enabled\r\n      if (this.config.enableLearning) {\r\n        await this.adaptiveLearner.saveModel();\r\n      }\r\n\r\n      this.isRunning = false;\r\n      this.logger.info('‚úÖ AI Engine shutdown complete');\r\n\r\n      this.emit('shutdown');\r\n\r\n    } catch (error) {\r\n      this.logger.error('‚ùå Error during AI Engine shutdown:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Analyze market conditions for a specific symbol\r\n   */\r\n  async analyzeMarket(symbol: string, marketData: any): Promise<MarketAnalysis> {\r\n    try {\r\n      this.logger.debug(`Analyzing market for ${symbol}`);\r\n\r\n      // Perform comprehensive market analysis\r\n      const analysis = await this.marketAnalyzer.analyze(symbol, marketData);\r\n\r\n      // Check for anomalies if enabled\r\n      if (this.config.enableAnomalyDetection) {\r\n        const anomalies = await this.anomalyDetector.detectAnomalies(marketData);\r\n        if (anomalies.length > 0) {\r\n          analysis.riskAssessment.level = 'high';\r\n          analysis.riskAssessment.factors.push(...anomalies.map(a => a.description));\r\n        }\r\n      }\r\n\r\n      // Apply learning insights if enabled\r\n      if (this.config.enableLearning) {\r\n        const learningInsights = await this.adaptiveLearner.getInsights(symbol);\r\n        analysis.prediction.confidence *= learningInsights.confidenceMultiplier;\r\n      }\r\n\r\n      this.logger.debug(`Market analysis complete for ${symbol}`, {\r\n        sentiment: analysis.sentiment.score,\r\n        trend: analysis.technicalAnalysis.trend,\r\n        prediction: analysis.prediction.direction\r\n      });\r\n\r\n      this.emit('marketAnalysis', analysis);\r\n      return analysis;\r\n\r\n    } catch (error) {\r\n      this.logger.error(`Market analysis failed for ${symbol}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate trading signal based on market analysis\r\n   */\r\n  async generateTradeSignal(symbol: string, marketData: any): Promise<TradeSignal> {\r\n    try {\r\n      this.logger.debug(`Generating trade signal for ${symbol}`);\r\n\r\n      // Get market analysis\r\n      const analysis = await this.analyzeMarket(symbol, marketData);\r\n\r\n      // Generate trade signal based on analysis\r\n      const signal: TradeSignal = {\r\n        symbol,\r\n        action: 'hold',\r\n        confidence: 0,\r\n        reasoning: [],\r\n        timeframe: '1h',\r\n        timestamp: new Date()\r\n      };\r\n\r\n      // Determine action based on analysis\r\n      if (analysis.sentiment.score > 0.3 && analysis.technicalAnalysis.trend === 'bullish') {\r\n        signal.action = 'buy';\r\n        signal.confidence = Math.min(analysis.sentiment.confidence, analysis.prediction.confidence);\r\n        signal.reasoning.push('Bullish sentiment and technical trend');\r\n        signal.entryPrice = marketData.price;\r\n        signal.stopLoss = marketData.price * (1 - 0.02); // 2% stop loss\r\n        signal.takeProfit = marketData.price * (1 + 0.06); // 6% take profit\r\n      } else if (analysis.sentiment.score < -0.3 && analysis.technicalAnalysis.trend === 'bearish') {\r\n        signal.action = 'sell';\r\n        signal.confidence = Math.min(analysis.sentiment.confidence, analysis.prediction.confidence);\r\n        signal.reasoning.push('Bearish sentiment and technical trend');\r\n        signal.entryPrice = marketData.price;\r\n        signal.stopLoss = marketData.price * (1 + 0.02); // 2% stop loss\r\n        signal.takeProfit = marketData.price * (1 - 0.06); // 6% take profit\r\n      }\r\n\r\n      // Adjust confidence based on risk assessment\r\n      if (analysis.riskAssessment.level === 'high') {\r\n        signal.confidence *= 0.5;\r\n        signal.reasoning.push('High risk detected - reduced confidence');\r\n      }\r\n\r\n      this.logger.debug(`Trade signal generated for ${symbol}`, {\r\n        action: signal.action,\r\n        confidence: signal.confidence\r\n      });\r\n\r\n      this.emit('tradeSignal', signal);\r\n      return signal;\r\n\r\n    } catch (error) {\r\n      this.logger.error(`Trade signal generation failed for ${symbol}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Learn from trade results to improve future predictions\r\n   */\r\n  async learnFromTrade(tradeResult: any): Promise<void> {\r\n    if (!this.config.enableLearning) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await this.adaptiveLearner.learnFromTrade(tradeResult);\r\n      this.logger.debug('Learning from trade result', {\r\n        symbol: tradeResult.symbol,\r\n        success: tradeResult.profitable\r\n      });\r\n\r\n    } catch (error) {\r\n      this.logger.error('Learning from trade failed:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get AI system health status\r\n   */\r\n  async getSystemHealth(): Promise<AISystemHealth> {\r\n    const health: AISystemHealth = {\r\n      isHealthy: true,\r\n      components: {\r\n        llmEngine: false,\r\n        marketAnalyzer: false,\r\n        anomalyDetector: false,\r\n        adaptiveLearner: false,\r\n        resourceMonitor: false\r\n      },\r\n      performance: {\r\n        responseTime: 0,\r\n        accuracy: 0,\r\n        memoryUsage: 0,\r\n        cpuUsage: 0\r\n      },\r\n      lastUpdate: new Date(),\r\n      errors: [],\r\n      warnings: []\r\n    };\r\n\r\n    try {\r\n      // Check component health\r\n      health.components.llmEngine = await this.llmEngine.isHealthy();\r\n      health.components.marketAnalyzer = this.marketAnalyzer.isHealthy();\r\n      health.components.anomalyDetector = this.config.enableAnomalyDetection ? \r\n        this.anomalyDetector.isHealthy() : true;\r\n      health.components.adaptiveLearner = this.config.enableLearning ? \r\n        this.adaptiveLearner.isHealthy() : true;\r\n      health.components.resourceMonitor = this.resourceMonitor.isHealthy();\r\n\r\n      // Get performance metrics\r\n      const resourceStats = await this.resourceMonitor.getStats();\r\n      health.performance.memoryUsage = resourceStats.memoryUsage;\r\n      health.performance.cpuUsage = resourceStats.cpuUsage;\r\n      health.performance.responseTime = await this.measureResponseTime();\r\n\r\n      // Overall health\r\n      health.isHealthy = Object.values(health.components).every(status => status);\r\n\r\n      if (!health.isHealthy) {\r\n        health.errors.push('One or more AI components are unhealthy');\r\n      }\r\n\r\n      // Check resource limits\r\n      if (health.performance.memoryUsage > this.config.resourceLimits.maxMemoryMB) {\r\n        health.warnings.push('Memory usage exceeds limit');\r\n      }\r\n\r\n      if (health.performance.cpuUsage > this.config.resourceLimits.maxCpuPercent) {\r\n        health.warnings.push('CPU usage exceeds limit');\r\n      }\r\n\r\n    } catch (error) {\r\n      health.isHealthy = false;\r\n      health.errors.push(`Health check failed: ${error}`);\r\n    }\r\n\r\n    return health;\r\n  }\r\n\r\n  /**\r\n   * Test AI capabilities\r\n   */\r\n  private async testAICapabilities(): Promise<void> {\r\n    try {\r\n      // Test LLM engine\r\n      const testResponse = await this.llmEngine.generateResponse(\r\n        'Analyze the current Bitcoin market sentiment in one sentence.'\r\n      );\r\n\r\n      if (!testResponse || testResponse.length < 10) {\r\n        throw new Error('LLM engine test failed - invalid response');\r\n      }\r\n\r\n      this.logger.info('AI capabilities test passed');\r\n\r\n    } catch (error) {\r\n      this.logger.error('AI capabilities test failed:', error);\r\n      throw new Error(`AI capabilities test failed: ${error}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Start continuous market analysis\r\n   */\r\n  private startContinuousAnalysis(): void {\r\n    this.analysisInterval = setInterval(async () => {\r\n      try {\r\n        // Analyze major trading pairs\r\n        const symbols = ['BTC_USDT', 'ETH_USDT'];\r\n        \r\n        for (const symbol of symbols) {\r\n          // This would get real market data\r\n          const mockMarketData = {\r\n            symbol,\r\n            price: 50000,\r\n            volume: 1000000,\r\n            timestamp: new Date()\r\n          };\r\n\r\n          await this.analyzeMarket(symbol, mockMarketData);\r\n        }\r\n\r\n      } catch (error) {\r\n        this.logger.error('Continuous analysis error:', error);\r\n      }\r\n    }, 300000); // Analyze every 5 minutes\r\n\r\n    this.logger.info('Continuous market analysis started');\r\n  }\r\n\r\n  /**\r\n   * Start health monitoring\r\n   */\r\n  private startHealthMonitoring(): void {\r\n    this.healthCheckInterval = setInterval(async () => {\r\n      try {\r\n        const health = await this.getSystemHealth();\r\n        if (!health.isHealthy) {\r\n          this.logger.warn('AI system health check failed', health.errors);\r\n          this.emit('healthWarning', health);\r\n        }\r\n      } catch (error) {\r\n        this.logger.error('AI health monitoring error:', error);\r\n      }\r\n    }, 120000); // Check every 2 minutes\r\n\r\n    this.logger.info('AI health monitoring started');\r\n  }\r\n\r\n  /**\r\n   * Measure AI response time\r\n   */\r\n  private async measureResponseTime(): Promise<number> {\r\n    const startTime = Date.now();\r\n    try {\r\n      await this.llmEngine.generateResponse('Test response time');\r\n      return Date.now() - startTime;\r\n    } catch (error) {\r\n      return -1;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get AI engine status for monitoring\r\n   */\r\n  getStatus(): {\r\n    isRunning: boolean;\r\n    isInitialized: boolean;\r\n    learningEnabled: boolean;\r\n    anomalyDetectionEnabled: boolean;\r\n    timestamp: number;\r\n  } {\r\n    return {\r\n      isRunning: this.isRunning,\r\n      isInitialized: this.isInitialized,\r\n      learningEnabled: this.config.enableLearning,\r\n      anomalyDetectionEnabled: this.config.enableAnomalyDetection,\r\n      timestamp: Date.now()\r\n    };\r\n  }\r\n}\r\n\r\nexport default AIEngine;\r\n"],"mappings":"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","ignoreList":[]}