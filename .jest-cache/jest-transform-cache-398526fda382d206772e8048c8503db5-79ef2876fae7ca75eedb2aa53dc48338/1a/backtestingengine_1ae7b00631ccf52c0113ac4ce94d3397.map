{"version":3,"names":["cov_2168gut2mt","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","events_1","require","uuid_1","logger_1","audit_service_1","historical_data_fetcher_1","performance_calculator_1","BacktestingEngine","EventEmitter","dataFetcher","auditService","state","strategies","validationRules","constructor","gateIOClient","HistoricalDataFetcher","AuditService","Map","currentTime","Date","portfolio","createInitialPortfolio","openPositions","tradeHistory","signals","marketData","isRunning","progress","minDataPoints","maxGapMinutes","requireRealData","minTradeAmount","maxPositionSize","maxOpenPositions","maxRiskPerTrade","maxTotalRisk","maxDrawdown","minSharpeRatio","minWinRate","minProfitFactor","logger","info","registerStrategy","strategy","set","runBacktest","config","startTime","now","symbol","startDate","toISOString","endDate","validateBacktestConfig","initializeBacktestState","emit","status","message","historicalData","fetchForBacktest","dataValidation","validateForBacktesting","isValid","Error","errors","join","length","allSignals","generateAllSignals","portfolioHistory","runSimulation","result","calculateBacktestResults","logSecurityEvent","severity","details","duration","trades","total","performance","timestamp","totalReturnPercentage","toFixed","sharpeRatio","error","strategyNames","strategyName","get","warn","generateSignals","executionSim","slippage","marketImpact","latency","partialFills","rejectProbability","allSignalsList","signal","push","sort","a","getTime","signalIndex","maxEquity","initialBalance","i","updatePortfolioValues","processSignal","updateStopLossesAndTakeProfits","currentPortfolio","calculateCurrentPortfolio","equity","Math","floor","drawdownPercentage","riskManagement","closeAllPositions","size","lastMarketData","finalPortfolio","validateSignal","debug","id","positionSize","calculatePositionSize","executedTrade","simulateExecution","position","quantity","averagePrice","entryPrice","currentPrice","close","unrealizedPnL","unrealizedPnLPercentage","stopLoss","takeProfit","entryTime","positionId","findPositionToClose","delete","tradeIndex","findIndex","t","trade","exitPrice","exitTime","exitReason","pnl","calculateTradePnL","pnlPercentage","random","basePrice","slippageAmount","marketImpactAmount","min","executionPrice","feeRate","fees","taker","maker","stopLossPercentage","riskAmount","abs","rewardAmount","minRiskRewardRatio","v4","positionsToClose","reason","clear","period","durationDays","PerformanceCalculator","calculatePerformanceMetrics","returns","calculateReturns","risk","calculateRiskMetrics","calculateTradeStatistics","strategyPerformance","calculateStrategyPerformance","equityCurve","generateEquityCurve","drawdownCurve","generateDrawdownCurve","monthlyReturns","generateMonthlyReturns","dataQuality","totalDataPoints","totalPoints","validDataPoints","validPoints","dataIntegrityScore","integrityScore","gapsDetected","gaps","averageGapMinutes","reduce","sum","gap","durationMinutes","dataSource","executionDetails","trim","has","balance","positions","totalPnL","realizedPnL","drawdown","maxDrawdownPercentage","strength","confidence","riskReward","availableBalance","stopLossDistance","positionValue","confidenceMultiplier","adjustedSize","minSize","max","Array","from","values","pos","filter","prevEquity","currEquity","returnRate","strategyTrades","closedTrades","winningTrades","winRate","totalReturn","grossProfit","grossLoss","profitFactor","Infinity","holdingPeriods","map","averageHoldingPeriod","h","signalAccuracy","contribution","getState","stop","validateRealDataOnly","data","point","source","validated","validateStrategyWithRealData","exports"],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\backtesting\\backtesting-engine.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * BACKTESTING ENGINE - REALISTIC EXECUTION SIMULATION\r\n * =============================================================================\r\n * \r\n * This module implements a comprehensive backtesting engine that simulates\r\n * realistic trading execution with proper slippage, fees, and market impact.\r\n * The engine processes historical market data and executes trading strategies\r\n * to validate their performance under real market conditions.\r\n * \r\n * CRITICAL FEATURES:\r\n * - NO MOCK DATA - only real historical market data\r\n * - Realistic execution simulation with slippage and fees\r\n * - Comprehensive risk management integration\r\n * - Strategy harmonization and signal processing\r\n * - Real-time progress tracking and reporting\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport { EventEmitter } from 'events';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { logger } from '@/core/logging/logger';\r\nimport { AuditService } from '@/security/audit-service';\r\nimport { HistoricalDataFetcher } from './historical-data-fetcher';\r\nimport { PerformanceCalculator } from './performance-calculator';\r\nimport { \r\n  BacktestConfig,\r\n  BacktestResult,\r\n  BacktestTrade,\r\n  BacktestPortfolio,\r\n  BacktestPosition,\r\n  BacktestEngineState,\r\n  BacktestProgress,\r\n  HistoricalMarketData,\r\n  ValidationRules,\r\n  StrategyBacktestResult,\r\n  DataValidationResult\r\n} from './types';\r\nimport { TradingSignal, HarmonizedSignal } from '../strategies/types';\r\nimport { GateIOClient } from '../api/gate-io-client';\r\n\r\n/**\r\n * Strategy interface for backtesting\r\n */\r\ninterface BacktestStrategy {\r\n  name: string;\r\n  generateSignals(marketData: HistoricalMarketData[]): Promise<TradingSignal[]>;\r\n  harmonizeSignals?(signals: TradingSignal[]): Promise<HarmonizedSignal>;\r\n}\r\n\r\n/**\r\n * Execution simulation parameters\r\n */\r\ninterface ExecutionSimulation {\r\n  slippage: number; // Percentage slippage\r\n  marketImpact: number; // Additional impact for large orders\r\n  latency: number; // Execution delay in milliseconds\r\n  partialFills: boolean; // Allow partial order fills\r\n  rejectProbability: number; // Probability of order rejection\r\n}\r\n\r\n/**\r\n * Comprehensive Backtesting Engine\r\n */\r\nexport class BacktestingEngine extends EventEmitter {\r\n  private dataFetcher: HistoricalDataFetcher;\r\n  private auditService: AuditService;\r\n  private state: BacktestEngineState;\r\n  private strategies: Map<string, BacktestStrategy>;\r\n  private validationRules: ValidationRules;\r\n\r\n  constructor(gateIOClient: GateIOClient) {\r\n    super();\r\n    \r\n    this.dataFetcher = new HistoricalDataFetcher(gateIOClient);\r\n    this.auditService = new AuditService();\r\n    this.strategies = new Map();\r\n    \r\n    // Initialize state\r\n    this.state = {\r\n      currentTime: new Date(),\r\n      portfolio: this.createInitialPortfolio(new Date(), 0),\r\n      openPositions: new Map(),\r\n      tradeHistory: [],\r\n      signals: [],\r\n      marketData: [],\r\n      isRunning: false,\r\n      progress: 0,\r\n    };\r\n    \r\n    // Set validation rules\r\n    this.validationRules = {\r\n      minDataPoints: 100,\r\n      maxGapMinutes: 60,\r\n      requireRealData: true,\r\n      minTradeAmount: 10,\r\n      maxPositionSize: 0.1, // 10% of portfolio\r\n      maxOpenPositions: 5,\r\n      maxRiskPerTrade: 0.03, // 3%\r\n      maxTotalRisk: 0.15, // 15%\r\n      maxDrawdown: 0.2, // 20%\r\n      minSharpeRatio: 0.5,\r\n      minWinRate: 0.4, // 40%\r\n      minProfitFactor: 1.2,\r\n    };\r\n    \r\n    logger.info('🚀 Backtesting Engine initialized - REAL DATA ONLY');\r\n  }\r\n\r\n  /**\r\n   * Register a trading strategy for backtesting\r\n   */\r\n  public registerStrategy(strategy: BacktestStrategy): void {\r\n    this.strategies.set(strategy.name, strategy);\r\n    logger.info(`📊 Strategy registered: ${strategy.name}`);\r\n  }\r\n\r\n  /**\r\n   * Run comprehensive backtesting\r\n   */\r\n  public async runBacktest(config: BacktestConfig): Promise<BacktestResult> {\r\n    const startTime = Date.now();\r\n    \r\n    try {\r\n      logger.info(`🎯 Starting backtesting for ${config.symbol} from ${config.startDate.toISOString()} to ${config.endDate.toISOString()}`);\r\n      \r\n      // Validate configuration\r\n      this.validateBacktestConfig(config);\r\n      \r\n      // Initialize state\r\n      this.initializeBacktestState(config);\r\n      \r\n      // Fetch and validate historical data\r\n      this.emit('progress', { status: 'INITIALIZING', progress: 0, message: 'Fetching historical data...' });\r\n      const historicalData = await this.dataFetcher.fetchForBacktest(config);\r\n      \r\n      // Validate data quality\r\n      const dataValidation = await this.dataFetcher.validateForBacktesting(historicalData, config);\r\n      if (!dataValidation.isValid) {\r\n        throw new Error(`Data validation failed: ${dataValidation.errors.join(', ')}`);\r\n      }\r\n      \r\n      this.state.marketData = historicalData;\r\n      logger.info(`📈 Loaded ${historicalData.length} historical data points`);\r\n      \r\n      // Generate trading signals for all strategies\r\n      this.emit('progress', { status: 'RUNNING', progress: 10, message: 'Generating trading signals...' });\r\n      const allSignals = await this.generateAllSignals(historicalData, config.strategies);\r\n      \r\n      // Run simulation\r\n      this.emit('progress', { status: 'RUNNING', progress: 20, message: 'Running simulation...' });\r\n      const portfolioHistory = await this.runSimulation(historicalData, allSignals, config);\r\n      \r\n      // Calculate performance metrics\r\n      this.emit('progress', { status: 'RUNNING', progress: 80, message: 'Calculating performance metrics...' });\r\n      const result = await this.calculateBacktestResults(config, portfolioHistory, dataValidation);\r\n      \r\n      // Log audit event\r\n      await this.auditService.logSecurityEvent({\r\n        type: 'BACKTEST_COMPLETED',\r\n        severity: 'INFO',\r\n        details: {\r\n          symbol: config.symbol,\r\n          duration: Date.now() - startTime,\r\n          trades: result.trades.total,\r\n          performance: result.performance,\r\n        },\r\n        timestamp: new Date(),\r\n      });\r\n      \r\n      this.emit('progress', { status: 'COMPLETED', progress: 100, message: 'Backtesting completed successfully' });\r\n      \r\n      logger.info(`✅ Backtesting completed in ${Date.now() - startTime}ms`);\r\n      logger.info(`📊 Results: ${result.trades.total} trades, ${result.performance.totalReturnPercentage.toFixed(2)}% return, ${result.performance.sharpeRatio.toFixed(2)} Sharpe ratio`);\r\n      \r\n      return result;\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Backtesting failed:', error);\r\n      \r\n      await this.auditService.logSecurityEvent({\r\n        type: 'BACKTEST_FAILED',\r\n        severity: 'ERROR',\r\n        details: {\r\n          symbol: config.symbol,\r\n          error: error.message,\r\n          duration: Date.now() - startTime,\r\n        },\r\n        timestamp: new Date(),\r\n      });\r\n      \r\n      this.emit('progress', { status: 'ERROR', progress: 0, message: `Backtesting failed: ${error.message}` });\r\n      throw error;\r\n      \r\n    } finally {\r\n      this.state.isRunning = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate signals from all registered strategies\r\n   */\r\n  private async generateAllSignals(\r\n    historicalData: HistoricalMarketData[],\r\n    strategyNames: string[]\r\n  ): Promise<Map<string, TradingSignal[]>> {\r\n    const allSignals = new Map<string, TradingSignal[]>();\r\n    \r\n    for (const strategyName of strategyNames) {\r\n      const strategy = this.strategies.get(strategyName);\r\n      if (!strategy) {\r\n        logger.warn(`⚠️ Strategy not found: ${strategyName}`);\r\n        continue;\r\n      }\r\n      \r\n      try {\r\n        logger.info(`🔄 Generating signals for strategy: ${strategyName}`);\r\n        const signals = await strategy.generateSignals(historicalData);\r\n        allSignals.set(strategyName, signals);\r\n        logger.info(`✅ Generated ${signals.length} signals for ${strategyName}`);\r\n        \r\n      } catch (error) {\r\n        logger.error(`❌ Failed to generate signals for ${strategyName}:`, error);\r\n        allSignals.set(strategyName, []);\r\n      }\r\n    }\r\n    \r\n    return allSignals;\r\n  }\r\n\r\n  /**\r\n   * Run the main simulation loop\r\n   */\r\n  private async runSimulation(\r\n    historicalData: HistoricalMarketData[],\r\n    allSignals: Map<string, TradingSignal[]>,\r\n    config: BacktestConfig\r\n  ): Promise<BacktestPortfolio[]> {\r\n    const portfolioHistory: BacktestPortfolio[] = [];\r\n    const executionSim: ExecutionSimulation = {\r\n      slippage: config.slippage,\r\n      marketImpact: 0.001, // 0.1% additional impact\r\n      latency: 100, // 100ms execution delay\r\n      partialFills: true,\r\n      rejectProbability: 0.01, // 1% rejection rate\r\n    };\r\n    \r\n    // Combine and sort all signals by timestamp\r\n    const allSignalsList: Array<{ signal: TradingSignal; strategy: string }> = [];\r\n    for (const [strategy, signals] of allSignals) {\r\n      for (const signal of signals) {\r\n        allSignalsList.push({ signal, strategy });\r\n      }\r\n    }\r\n    allSignalsList.sort((a, b) => a.signal.timestamp.getTime() - b.signal.timestamp.getTime());\r\n    \r\n    let signalIndex = 0;\r\n    let maxEquity = config.initialBalance;\r\n    \r\n    // Process each data point\r\n    for (let i = 0; i < historicalData.length; i++) {\r\n      const marketData = historicalData[i];\r\n      this.state.currentTime = marketData.timestamp;\r\n      \r\n      // Update portfolio with current market prices\r\n      this.updatePortfolioValues(marketData);\r\n      \r\n      // Process signals at current timestamp\r\n      while (signalIndex < allSignalsList.length && \r\n             allSignalsList[signalIndex].signal.timestamp <= marketData.timestamp) {\r\n        \r\n        const { signal, strategy } = allSignalsList[signalIndex];\r\n        await this.processSignal(signal, strategy, marketData, config, executionSim);\r\n        signalIndex++;\r\n      }\r\n      \r\n      // Update stop losses and take profits\r\n      await this.updateStopLossesAndTakeProfits(marketData, config);\r\n      \r\n      // Calculate current portfolio state\r\n      const currentPortfolio = this.calculateCurrentPortfolio(marketData, maxEquity);\r\n      portfolioHistory.push(currentPortfolio);\r\n      \r\n      // Update max equity for drawdown calculation\r\n      if (currentPortfolio.equity > maxEquity) {\r\n        maxEquity = currentPortfolio.equity;\r\n      }\r\n      \r\n      // Update progress\r\n      const progress = 20 + Math.floor((i / historicalData.length) * 60);\r\n      if (i % Math.floor(historicalData.length / 20) === 0) {\r\n        this.emit('progress', { \r\n          status: 'RUNNING', \r\n          progress, \r\n          message: `Processing ${marketData.timestamp.toISOString()}...` \r\n        });\r\n      }\r\n      \r\n      // Risk management checks\r\n      if (currentPortfolio.drawdownPercentage > config.riskManagement.maxDrawdown * 100) {\r\n        logger.warn(`⚠️ Maximum drawdown exceeded: ${currentPortfolio.drawdownPercentage.toFixed(2)}%`);\r\n        // Close all positions in emergency\r\n        await this.closeAllPositions(marketData, 'EMERGENCY_STOP');\r\n      }\r\n    }\r\n    \r\n    // Close any remaining open positions at the end\r\n    if (this.state.openPositions.size > 0) {\r\n      const lastMarketData = historicalData[historicalData.length - 1];\r\n      await this.closeAllPositions(lastMarketData, 'END_OF_PERIOD');\r\n      \r\n      // Add final portfolio state\r\n      const finalPortfolio = this.calculateCurrentPortfolio(lastMarketData, maxEquity);\r\n      portfolioHistory.push(finalPortfolio);\r\n    }\r\n    \r\n    return portfolioHistory;\r\n  }\r\n\r\n  /**\r\n   * Process a trading signal\r\n   */\r\n  private async processSignal(\r\n    signal: TradingSignal,\r\n    strategy: string,\r\n    marketData: HistoricalMarketData,\r\n    config: BacktestConfig,\r\n    executionSim: ExecutionSimulation\r\n  ): Promise<void> {\r\n    try {\r\n      // Skip HOLD signals\r\n      if (signal.type === 'HOLD') return;\r\n      \r\n      // Validate signal\r\n      if (!this.validateSignal(signal, config)) {\r\n        logger.debug(`⚠️ Signal validation failed for ${signal.id}`);\r\n        return;\r\n      }\r\n      \r\n      // Calculate position size based on risk management\r\n      const positionSize = this.calculatePositionSize(signal, config, marketData);\r\n      if (positionSize <= 0) {\r\n        logger.debug(`⚠️ Position size too small for signal ${signal.id}`);\r\n        return;\r\n      }\r\n      \r\n      // Simulate execution with realistic conditions\r\n      const executedTrade = await this.simulateExecution(\r\n        signal,\r\n        strategy,\r\n        positionSize,\r\n        marketData,\r\n        config,\r\n        executionSim\r\n      );\r\n      \r\n      if (executedTrade) {\r\n        this.state.tradeHistory.push(executedTrade);\r\n        \r\n        if (signal.type === 'BUY') {\r\n          // Open new position\r\n          const position: BacktestPosition = {\r\n            symbol: signal.symbol,\r\n            quantity: executedTrade.quantity,\r\n            averagePrice: executedTrade.entryPrice,\r\n            currentPrice: marketData.close,\r\n            unrealizedPnL: 0,\r\n            unrealizedPnLPercentage: 0,\r\n            stopLoss: executedTrade.stopLoss,\r\n            takeProfit: executedTrade.takeProfit,\r\n            entryTime: executedTrade.entryTime,\r\n            strategy,\r\n          };\r\n          \r\n          this.state.openPositions.set(executedTrade.id, position);\r\n          \r\n        } else if (signal.type === 'SELL') {\r\n          // Close existing position\r\n          const positionId = this.findPositionToClose(signal.symbol);\r\n          if (positionId) {\r\n            this.state.openPositions.delete(positionId);\r\n            \r\n            // Update trade with exit information\r\n            const tradeIndex = this.state.tradeHistory.findIndex(t => t.id === positionId);\r\n            if (tradeIndex >= 0) {\r\n              const trade = this.state.tradeHistory[tradeIndex];\r\n              trade.exitPrice = executedTrade.entryPrice; // Exit price is entry price of sell order\r\n              trade.exitTime = executedTrade.entryTime;\r\n              trade.status = 'CLOSED';\r\n              trade.exitReason = 'STRATEGY_EXIT';\r\n              trade.pnl = this.calculateTradePnL(trade);\r\n              trade.pnlPercentage = trade.pnl / (trade.entryPrice * trade.quantity) * 100;\r\n            }\r\n          }\r\n        }\r\n        \r\n        logger.debug(`✅ Executed ${signal.type} signal for ${signal.symbol}: ${positionSize} @ ${executedTrade.entryPrice}`);\r\n      }\r\n      \r\n    } catch (error) {\r\n      logger.error(`❌ Failed to process signal ${signal.id}:`, error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Simulate realistic trade execution\r\n   */\r\n  private async simulateExecution(\r\n    signal: TradingSignal,\r\n    strategy: string,\r\n    positionSize: number,\r\n    marketData: HistoricalMarketData,\r\n    config: BacktestConfig,\r\n    executionSim: ExecutionSimulation\r\n  ): Promise<BacktestTrade | null> {\r\n    // Simulate order rejection\r\n    if (Math.random() < executionSim.rejectProbability) {\r\n      logger.debug(`❌ Order rejected for signal ${signal.id}`);\r\n      return null;\r\n    }\r\n    \r\n    // Calculate execution price with slippage\r\n    const basePrice = signal.type === 'BUY' ? marketData.close : marketData.close;\r\n    const slippageAmount = basePrice * executionSim.slippage;\r\n    const marketImpactAmount = basePrice * executionSim.marketImpact * Math.min(positionSize / 1000, 1);\r\n    \r\n    const executionPrice = signal.type === 'BUY' \r\n      ? basePrice + slippageAmount + marketImpactAmount\r\n      : basePrice - slippageAmount - marketImpactAmount;\r\n    \r\n    // Calculate fees\r\n    const feeRate = signal.type === 'BUY' ? config.fees.taker : config.fees.maker;\r\n    const fees = positionSize * executionPrice * feeRate;\r\n    \r\n    // Calculate stop loss and take profit levels\r\n    const stopLoss = signal.type === 'BUY' \r\n      ? executionPrice * (1 - config.riskManagement.stopLossPercentage)\r\n      : executionPrice * (1 + config.riskManagement.stopLossPercentage);\r\n    \r\n    const riskAmount = Math.abs(executionPrice - stopLoss) * positionSize;\r\n    const rewardAmount = riskAmount * config.riskManagement.minRiskRewardRatio;\r\n    const takeProfit = signal.type === 'BUY'\r\n      ? executionPrice + (rewardAmount / positionSize)\r\n      : executionPrice - (rewardAmount / positionSize);\r\n    \r\n    // Create trade record\r\n    const trade: BacktestTrade = {\r\n      id: uuidv4(),\r\n      symbol: signal.symbol,\r\n      type: signal.type,\r\n      quantity: positionSize,\r\n      entryPrice: executionPrice,\r\n      entryTime: new Date(marketData.timestamp.getTime() + executionSim.latency),\r\n      strategy,\r\n      signal,\r\n      stopLoss,\r\n      takeProfit,\r\n      fees,\r\n      slippage: slippageAmount,\r\n      status: 'OPEN',\r\n    };\r\n    \r\n    return trade;\r\n  }\r\n\r\n  /**\r\n   * Update stop losses and take profits\r\n   */\r\n  private async updateStopLossesAndTakeProfits(\r\n    marketData: HistoricalMarketData,\r\n    config: BacktestConfig\r\n  ): Promise<void> {\r\n    const positionsToClose: string[] = [];\r\n    \r\n    for (const [positionId, position] of this.state.openPositions) {\r\n      const currentPrice = marketData.close;\r\n      \r\n      // Check stop loss\r\n      if ((position.quantity > 0 && currentPrice <= position.stopLoss) ||\r\n          (position.quantity < 0 && currentPrice >= position.stopLoss)) {\r\n        positionsToClose.push(positionId);\r\n        \r\n        // Update trade record\r\n        const tradeIndex = this.state.tradeHistory.findIndex(t => t.id === positionId);\r\n        if (tradeIndex >= 0) {\r\n          const trade = this.state.tradeHistory[tradeIndex];\r\n          trade.exitPrice = position.stopLoss;\r\n          trade.exitTime = marketData.timestamp;\r\n          trade.status = 'STOPPED';\r\n          trade.exitReason = 'STOP_LOSS';\r\n          trade.pnl = this.calculateTradePnL(trade);\r\n          trade.pnlPercentage = trade.pnl / (trade.entryPrice * trade.quantity) * 100;\r\n        }\r\n        \r\n        continue;\r\n      }\r\n      \r\n      // Check take profit\r\n      if ((position.quantity > 0 && currentPrice >= position.takeProfit) ||\r\n          (position.quantity < 0 && currentPrice <= position.takeProfit)) {\r\n        positionsToClose.push(positionId);\r\n        \r\n        // Update trade record\r\n        const tradeIndex = this.state.tradeHistory.findIndex(t => t.id === positionId);\r\n        if (tradeIndex >= 0) {\r\n          const trade = this.state.tradeHistory[tradeIndex];\r\n          trade.exitPrice = position.takeProfit;\r\n          trade.exitTime = marketData.timestamp;\r\n          trade.status = 'CLOSED';\r\n          trade.exitReason = 'TAKE_PROFIT';\r\n          trade.pnl = this.calculateTradePnL(trade);\r\n          trade.pnlPercentage = trade.pnl / (trade.entryPrice * trade.quantity) * 100;\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Remove closed positions\r\n    for (const positionId of positionsToClose) {\r\n      this.state.openPositions.delete(positionId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Close all open positions\r\n   */\r\n  private async closeAllPositions(marketData: HistoricalMarketData, reason: string): Promise<void> {\r\n    for (const [positionId, position] of this.state.openPositions) {\r\n      // Update trade record\r\n      const tradeIndex = this.state.tradeHistory.findIndex(t => t.id === positionId);\r\n      if (tradeIndex >= 0) {\r\n        const trade = this.state.tradeHistory[tradeIndex];\r\n        trade.exitPrice = marketData.close;\r\n        trade.exitTime = marketData.timestamp;\r\n        trade.status = 'CLOSED';\r\n        trade.exitReason = reason as any;\r\n        trade.pnl = this.calculateTradePnL(trade);\r\n        trade.pnlPercentage = trade.pnl / (trade.entryPrice * trade.quantity) * 100;\r\n      }\r\n    }\r\n    \r\n    this.state.openPositions.clear();\r\n    logger.info(`🔒 Closed all positions due to: ${reason}`);\r\n  }\r\n\r\n  /**\r\n   * Calculate comprehensive backtest results\r\n   */\r\n  private async calculateBacktestResults(\r\n    config: BacktestConfig,\r\n    portfolioHistory: BacktestPortfolio[],\r\n    dataValidation: DataValidationResult\r\n  ): Promise<BacktestResult> {\r\n    const period = {\r\n      start: config.startDate,\r\n      end: config.endDate,\r\n      durationDays: (config.endDate.getTime() - config.startDate.getTime()) / (1000 * 60 * 60 * 24),\r\n    };\r\n    \r\n    // Calculate performance metrics\r\n    const performance = PerformanceCalculator.calculatePerformanceMetrics(\r\n      this.state.tradeHistory,\r\n      portfolioHistory,\r\n      config.initialBalance\r\n    );\r\n    \r\n    // Calculate risk metrics\r\n    const returns = this.calculateReturns(portfolioHistory);\r\n    const risk = PerformanceCalculator.calculateRiskMetrics(returns);\r\n    \r\n    // Calculate trade statistics\r\n    const trades = PerformanceCalculator.calculateTradeStatistics(this.state.tradeHistory);\r\n    \r\n    // Generate strategy performance breakdown\r\n    const strategyPerformance = this.calculateStrategyPerformance(config.strategies);\r\n    \r\n    // Generate time series data\r\n    const equityCurve = PerformanceCalculator.generateEquityCurve(portfolioHistory);\r\n    const drawdownCurve = PerformanceCalculator.generateDrawdownCurve(portfolioHistory);\r\n    const monthlyReturns = PerformanceCalculator.generateMonthlyReturns(portfolioHistory, this.state.tradeHistory);\r\n    \r\n    const result: BacktestResult = {\r\n      config,\r\n      period,\r\n      trades,\r\n      performance,\r\n      risk,\r\n      strategyPerformance,\r\n      equityCurve,\r\n      drawdownCurve,\r\n      monthlyReturns,\r\n      dataQuality: {\r\n        totalDataPoints: dataValidation.totalPoints,\r\n        validDataPoints: dataValidation.validPoints,\r\n        dataIntegrityScore: dataValidation.integrityScore,\r\n        gapsDetected: dataValidation.gaps.length,\r\n        averageGapMinutes: dataValidation.gaps.length > 0 \r\n          ? dataValidation.gaps.reduce((sum, gap) => sum + gap.durationMinutes, 0) / dataValidation.gaps.length\r\n          : 0,\r\n        dataSource: 'GATE_IO_REAL_DATA',\r\n      },\r\n      executionDetails: this.state.tradeHistory,\r\n      portfolioHistory,\r\n    };\r\n    \r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Helper methods\r\n   */\r\n  private validateBacktestConfig(config: BacktestConfig): void {\r\n    if (!config.symbol || config.symbol.trim() === '') {\r\n      throw new Error('Symbol is required');\r\n    }\r\n    \r\n    if (config.startDate >= config.endDate) {\r\n      throw new Error('Start date must be before end date');\r\n    }\r\n    \r\n    if (config.initialBalance <= 0) {\r\n      throw new Error('Initial balance must be positive');\r\n    }\r\n    \r\n    if (config.strategies.length === 0) {\r\n      throw new Error('At least one strategy must be specified');\r\n    }\r\n    \r\n    // Validate strategies exist\r\n    for (const strategyName of config.strategies) {\r\n      if (!this.strategies.has(strategyName)) {\r\n        throw new Error(`Strategy not found: ${strategyName}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeBacktestState(config: BacktestConfig): void {\r\n    this.state = {\r\n      currentTime: config.startDate,\r\n      portfolio: this.createInitialPortfolio(config.startDate, config.initialBalance),\r\n      openPositions: new Map(),\r\n      tradeHistory: [],\r\n      signals: [],\r\n      marketData: [],\r\n      isRunning: true,\r\n      progress: 0,\r\n    };\r\n  }\r\n\r\n  private createInitialPortfolio(timestamp: Date, balance: number): BacktestPortfolio {\r\n    return {\r\n      timestamp,\r\n      balance,\r\n      equity: balance,\r\n      positions: [],\r\n      totalPnL: 0,\r\n      unrealizedPnL: 0,\r\n      realizedPnL: 0,\r\n      drawdown: 0,\r\n      drawdownPercentage: 0,\r\n      maxDrawdown: 0,\r\n      maxDrawdownPercentage: 0,\r\n    };\r\n  }\r\n\r\n  private validateSignal(signal: TradingSignal, config: BacktestConfig): boolean {\r\n    // Check signal strength and confidence\r\n    if (signal.strength < 50 || signal.confidence < 60) {\r\n      return false;\r\n    }\r\n    \r\n    // Check risk-reward ratio\r\n    if (signal.riskReward < config.riskManagement.minRiskRewardRatio) {\r\n      return false;\r\n    }\r\n    \r\n    return true;\r\n  }\r\n\r\n  private calculatePositionSize(\r\n    signal: TradingSignal,\r\n    config: BacktestConfig,\r\n    marketData: HistoricalMarketData\r\n  ): number {\r\n    const availableBalance = this.state.portfolio.balance;\r\n    const riskAmount = availableBalance * config.riskManagement.maxRiskPerTrade;\r\n    \r\n    // Calculate position size based on stop loss distance\r\n    const stopLossDistance = config.riskManagement.stopLossPercentage;\r\n    const positionValue = riskAmount / stopLossDistance;\r\n    const positionSize = positionValue / marketData.close;\r\n    \r\n    // Apply confidence-based sizing\r\n    const confidenceMultiplier = signal.confidence / 100;\r\n    const adjustedSize = positionSize * confidenceMultiplier;\r\n    \r\n    // Ensure minimum trade amount\r\n    const minSize = config.riskManagement.maxRiskPerTrade * availableBalance / marketData.close;\r\n    \r\n    return Math.max(adjustedSize, minSize);\r\n  }\r\n\r\n  private updatePortfolioValues(marketData: HistoricalMarketData): void {\r\n    // Update position values\r\n    for (const [positionId, position] of this.state.openPositions) {\r\n      if (position.symbol === marketData.symbol) {\r\n        position.currentPrice = marketData.close;\r\n        position.unrealizedPnL = (marketData.close - position.averagePrice) * position.quantity;\r\n        position.unrealizedPnLPercentage = (position.unrealizedPnL / (position.averagePrice * Math.abs(position.quantity))) * 100;\r\n      }\r\n    }\r\n  }\r\n\r\n  private calculateCurrentPortfolio(marketData: HistoricalMarketData, maxEquity: number): BacktestPortfolio {\r\n    const positions: BacktestPosition[] = Array.from(this.state.openPositions.values());\r\n    const unrealizedPnL = positions.reduce((sum, pos) => sum + pos.unrealizedPnL, 0);\r\n    const realizedPnL = this.state.tradeHistory\r\n      .filter(t => t.status === 'CLOSED' && t.pnl !== undefined)\r\n      .reduce((sum, t) => sum + t.pnl!, 0);\r\n    \r\n    const equity = this.state.portfolio.balance + unrealizedPnL + realizedPnL;\r\n    const drawdown = Math.max(0, maxEquity - equity);\r\n    const drawdownPercentage = maxEquity > 0 ? (drawdown / maxEquity) * 100 : 0;\r\n    \r\n    return {\r\n      timestamp: marketData.timestamp,\r\n      balance: this.state.portfolio.balance,\r\n      equity,\r\n      positions,\r\n      totalPnL: unrealizedPnL + realizedPnL,\r\n      unrealizedPnL,\r\n      realizedPnL,\r\n      drawdown,\r\n      drawdownPercentage,\r\n      maxDrawdown: Math.max(this.state.portfolio.maxDrawdown, drawdown),\r\n      maxDrawdownPercentage: Math.max(this.state.portfolio.maxDrawdownPercentage, drawdownPercentage),\r\n    };\r\n  }\r\n\r\n  private calculateTradePnL(trade: BacktestTrade): number {\r\n    if (!trade.exitPrice) return 0;\r\n    \r\n    const pnl = trade.type === 'BUY'\r\n      ? (trade.exitPrice - trade.entryPrice) * trade.quantity\r\n      : (trade.entryPrice - trade.exitPrice) * trade.quantity;\r\n    \r\n    return pnl - trade.fees;\r\n  }\r\n\r\n  private findPositionToClose(symbol: string): string | null {\r\n    for (const [positionId, position] of this.state.openPositions) {\r\n      if (position.symbol === symbol) {\r\n        return positionId;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private calculateReturns(portfolioHistory: BacktestPortfolio[]): number[] {\r\n    const returns: number[] = [];\r\n    \r\n    for (let i = 1; i < portfolioHistory.length; i++) {\r\n      const prevEquity = portfolioHistory[i - 1].equity;\r\n      const currEquity = portfolioHistory[i].equity;\r\n      \r\n      if (prevEquity > 0) {\r\n        const returnRate = (currEquity - prevEquity) / prevEquity;\r\n        returns.push(returnRate);\r\n      }\r\n    }\r\n    \r\n    return returns;\r\n  }\r\n\r\n  private calculateStrategyPerformance(strategyNames: string[]): Record<string, StrategyBacktestResult> {\r\n    const strategyPerformance: Record<string, StrategyBacktestResult> = {};\r\n    \r\n    for (const strategyName of strategyNames) {\r\n      const strategyTrades = this.state.tradeHistory.filter(t => t.strategy === strategyName);\r\n      const closedTrades = strategyTrades.filter(t => t.status === 'CLOSED' && t.pnl !== undefined);\r\n      \r\n      const winningTrades = closedTrades.filter(t => t.pnl! > 0);\r\n      const winRate = closedTrades.length > 0 ? (winningTrades.length / closedTrades.length) * 100 : 0;\r\n      \r\n      const totalReturn = closedTrades.reduce((sum, t) => sum + t.pnl!, 0);\r\n      const grossProfit = winningTrades.reduce((sum, t) => sum + t.pnl!, 0);\r\n      const grossLoss = Math.abs(closedTrades.filter(t => t.pnl! < 0).reduce((sum, t) => sum + t.pnl!, 0));\r\n      const profitFactor = grossLoss > 0 ? grossProfit / grossLoss : grossProfit > 0 ? Infinity : 0;\r\n      \r\n      // Calculate average holding period\r\n      const holdingPeriods = closedTrades\r\n        .filter(t => t.exitTime)\r\n        .map(t => (t.exitTime!.getTime() - t.entryTime.getTime()) / (1000 * 60 * 60)); // in hours\r\n      const averageHoldingPeriod = holdingPeriods.length > 0 \r\n        ? holdingPeriods.reduce((sum, h) => sum + h, 0) / holdingPeriods.length \r\n        : 0;\r\n      \r\n      strategyPerformance[strategyName] = {\r\n        strategyName,\r\n        trades: closedTrades.length,\r\n        winRate,\r\n        totalReturn,\r\n        sharpeRatio: 0, // Would need returns series for each strategy\r\n        maxDrawdown: 0, // Would need to track per-strategy drawdown\r\n        profitFactor,\r\n        averageHoldingPeriod,\r\n        signalAccuracy: winRate / 100,\r\n        contribution: 0, // Would need to calculate contribution to overall performance\r\n      };\r\n    }\r\n    \r\n    return strategyPerformance;\r\n  }\r\n\r\n  /**\r\n   * Get current backtesting state\r\n   */\r\n  public getState(): BacktestEngineState {\r\n    return { ...this.state };\r\n  }\r\n\r\n  /**\r\n   * Stop running backtest\r\n   */\r\n  public stop(): void {\r\n    this.state.isRunning = false;\r\n    this.emit('progress', { status: 'CANCELLED', progress: 0, message: 'Backtesting cancelled by user' });\r\n    logger.info('🛑 Backtesting stopped by user');\r\n  }\r\n\r\n  /**\r\n   * Validate that only real data is used (no mock data)\r\n   */\r\n  private validateRealDataOnly(data: HistoricalMarketData[]): void {\r\n    for (const point of data) {\r\n      if (point.source !== 'GATE_IO' || !point.validated) {\r\n        throw new Error(`Mock or invalid data detected: ${point.symbol} at ${point.timestamp.toISOString()}`);\r\n      }\r\n    }\r\n    \r\n    logger.info('✅ Real data validation passed - no mock data detected');\r\n  }\r\n\r\n  /**\r\n   * Enhanced strategy validation with real data requirements\r\n   */\r\n  private validateStrategyWithRealData(\r\n    strategy: BacktestStrategy,\r\n    historicalData: HistoricalMarketData[]\r\n  ): void {\r\n    // Ensure strategy can handle real data format\r\n    if (!strategy.generateSignals) {\r\n      throw new Error(`Strategy ${strategy.name} missing generateSignals method`);\r\n    }\r\n    \r\n    // Validate data integrity for strategy\r\n    this.validateRealDataOnly(historicalData);\r\n    \r\n    logger.info(`✅ Strategy ${strategy.name} validated with real data`);\r\n  }\r\n\r\n  /**\r\n   * Stop running backtest\r\n   */\r\n  public stop(): void {\r\n    this.state.isRunning = false;\r\n    this.emit('progress', { status: 'CANCELLED', progress: 0, message: 'Backtesting stopped by user' });\r\n    logger.info('🛑 Backtesting stopped by user');\r\n  }\r\n}\r\n"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA,SAAAA,eAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,MAAA,OAAAC,QAAA;EAAA,IAAAC,GAAA;EAAA,IAAAC,YAAA;IAAAL,IAAA;IAAAM,YAAA;MAAA;QAAAC,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;U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C,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,K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AAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;M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","ignoreList":[]}