f8615bb7f115e188e421be7bb19540db
"use strict";

/**
 * Dynamic Position Sizing Engine
 *
 * Implements sophisticated position sizing based on:
 * - 2-3% risk per trade calculation
 * - Account balance and volatility considerations
 * - Confidence-based position size adjustment
 * - Correlation-based exposure limits
 */
/* istanbul ignore next */
function cov_dp0chv9am() {
  var path = "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\risk\\position-sizing-engine.ts";
  var hash = "9463e6d4c1be221bf466d86b52f28574fc87345b";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\risk\\position-sizing-engine.ts",
    statementMap: {
      "0": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 11,
          column: 62
        }
      },
      "1": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 12,
          column: 38
        }
      },
      "2": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 45
        }
      },
      "3": {
        start: {
          line: 23,
          column: 33
        },
        end: {
          line: 23,
          column: 130
        }
      },
      "4": {
        start: {
          line: 25,
          column: 39
        },
        end: {
          line: 25,
          column: 107
        }
      },
      "5": {
        start: {
          line: 27,
          column: 39
        },
        end: {
          line: 27,
          column: 113
        }
      },
      "6": {
        start: {
          line: 29,
          column: 38
        },
        end: {
          line: 29,
          column: 122
        }
      },
      "7": {
        start: {
          line: 30,
          column: 32
        },
        end: {
          line: 30,
          column: 78
        }
      },
      "8": {
        start: {
          line: 32,
          column: 34
        },
        end: {
          line: 32,
          column: 102
        }
      },
      "9": {
        start: {
          line: 33,
          column: 31
        },
        end: {
          line: 33,
          column: 103
        }
      },
      "10": {
        start: {
          line: 34,
          column: 29
        },
        end: {
          line: 34,
          column: 78
        }
      },
      "11": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 40,
          column: 9
        }
      },
      "12": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 37,
          column: 105
        }
      },
      "13": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 38,
          column: 104
        }
      },
      "14": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 39,
          column: 79
        }
      },
      "15": {
        start: {
          line: 42,
          column: 30
        },
        end: {
          line: 42,
          column: 68
        }
      },
      "16": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 47,
          column: 9
        }
      },
      "17": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 44,
          column: 76
        }
      },
      "18": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 45,
          column: 104
        }
      },
      "19": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 46,
          column: 79
        }
      },
      "20": {
        start: {
          line: 48,
          column: 32
        },
        end: {
          line: 48,
          column: 129
        }
      },
      "21": {
        start: {
          line: 50,
          column: 27
        },
        end: {
          line: 50,
          column: 113
        }
      },
      "22": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 60,
          column: 10
        }
      },
      "23": {
        start: {
          line: 66,
          column: 27
        },
        end: {
          line: 66,
          column: 87
        }
      },
      "24": {
        start: {
          line: 67,
          column: 26
        },
        end: {
          line: 67,
          column: 62
        }
      },
      "25": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 70,
          column: 9
        }
      },
      "26": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 72
        }
      },
      "27": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 71,
          column: 38
        }
      },
      "28": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 82,
          column: 9
        }
      },
      "29": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 81,
          column: 28
        }
      },
      "30": {
        start: {
          line: 84,
          column: 37
        },
        end: {
          line: 84,
          column: 81
        }
      },
      "31": {
        start: {
          line: 86,
          column: 37
        },
        end: {
          line: 86,
          column: 71
        }
      },
      "32": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 87,
          column: 47
        }
      },
      "33": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 98,
          column: 9
        }
      },
      "34": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 97,
          column: 29
        }
      },
      "35": {
        start: {
          line: 100,
          column: 37
        },
        end: {
          line: 100,
          column: 117
        }
      },
      "36": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 101,
          column: 47
        }
      },
      "37": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 110,
          column: 9
        }
      },
      "38": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 109,
          column: 23
        }
      },
      "39": {
        start: {
          line: 112,
          column: 34
        },
        end: {
          line: 112,
          column: 98
        }
      },
      "40": {
        start: {
          line: 114,
          column: 31
        },
        end: {
          line: 114,
          column: 95
        }
      },
      "41": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 119,
          column: 9
        }
      },
      "42": {
        start: {
          line: 117,
          column: 38
        },
        end: {
          line: 117,
          column: 97
        }
      },
      "43": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 118,
          column: 56
        }
      },
      "44": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 120,
          column: 19
        }
      },
      "45": {
        start: {
          line: 126,
          column: 29
        },
        end: {
          line: 126,
          column: 38
        }
      },
      "46": {
        start: {
          line: 129,
          column: 35
        },
        end: {
          line: 132,
          column: 9
        }
      },
      "47": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 136,
          column: 9
        }
      },
      "48": {
        start: {
          line: 134,
          column: 32
        },
        end: {
          line: 134,
          column: 85
        }
      },
      "49": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 135,
          column: 77
        }
      },
      "50": {
        start: {
          line: 137,
          column: 41
        },
        end: {
          line: 137,
          column: 93
        }
      },
      "51": {
        start: {
          line: 138,
          column: 37
        },
        end: {
          line: 138,
          column: 85
        }
      },
      "52": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 144,
          column: 10
        }
      },
      "53": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 151,
          column: 21
        }
      },
      "54": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 151,
          column: 21
        }
      },
      "55": {
        start: {
          line: 152,
          column: 34
        },
        end: {
          line: 152,
          column: 67
        }
      },
      "56": {
        start: {
          line: 153,
          column: 31
        },
        end: {
          line: 153,
          column: 122
        }
      },
      "57": {
        start: {
          line: 153,
          column: 71
        },
        end: {
          line: 153,
          column: 91
        }
      },
      "58": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 154,
          column: 30
        }
      },
      "59": {
        start: {
          line: 160,
          column: 30
        },
        end: {
          line: 160,
          column: 82
        }
      },
      "60": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 161,
          column: 56
        }
      },
      "61": {
        start: {
          line: 167,
          column: 21
        },
        end: {
          line: 167,
          column: 57
        }
      },
      "62": {
        start: {
          line: 168,
          column: 23
        },
        end: {
          line: 168,
          column: 61
        }
      },
      "63": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 170,
          column: 21
        }
      },
      "64": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 170,
          column: 21
        }
      },
      "65": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 171,
          column: 29
        }
      },
      "66": {
        start: {
          line: 177,
          column: 33
        },
        end: {
          line: 177,
          column: 35
        }
      },
      "67": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 181,
          column: 9
        }
      },
      "68": {
        start: {
          line: 180,
          column: 12
        },
        end: {
          line: 180,
          column: 139
        }
      },
      "69": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 185,
          column: 9
        }
      },
      "70": {
        start: {
          line: 184,
          column: 12
        },
        end: {
          line: 184,
          column: 141
        }
      },
      "71": {
        start: {
          line: 187,
          column: 8
        },
        end: {
          line: 189,
          column: 9
        }
      },
      "72": {
        start: {
          line: 188,
          column: 12
        },
        end: {
          line: 188,
          column: 68
        }
      },
      "73": {
        start: {
          line: 191,
          column: 30
        },
        end: {
          line: 191,
          column: 63
        }
      },
      "74": {
        start: {
          line: 192,
          column: 35
        },
        end: {
          line: 192,
          column: 81
        }
      },
      "75": {
        start: {
          line: 193,
          column: 8
        },
        end: {
          line: 195,
          column: 9
        }
      },
      "76": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 194,
          column: 110
        }
      },
      "77": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 199,
          column: 10
        }
      },
      "78": {
        start: {
          line: 205,
          column: 8
        },
        end: {
          line: 205,
          column: 75
        }
      },
      "79": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 211,
          column: 42
        }
      },
      "80": {
        start: {
          line: 217,
          column: 24
        },
        end: {
          line: 217,
          column: 26
        }
      },
      "81": {
        start: {
          line: 218,
          column: 8
        },
        end: {
          line: 226,
          column: 9
        }
      },
      "82": {
        start: {
          line: 219,
          column: 36
        },
        end: {
          line: 223,
          column: 13
        }
      },
      "83": {
        start: {
          line: 224,
          column: 27
        },
        end: {
          line: 224,
          column: 76
        }
      },
      "84": {
        start: {
          line: 225,
          column: 12
        },
        end: {
          line: 225,
          column: 33
        }
      },
      "85": {
        start: {
          line: 227,
          column: 8
        },
        end: {
          line: 227,
          column: 23
        }
      },
      "86": {
        start: {
          line: 230,
          column: 0
        },
        end: {
          line: 230,
          column: 52
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 32
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 41
          },
          end: {
            line: 61,
            column: 5
          }
        },
        line: 21
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 65,
            column: 4
          },
          end: {
            line: 65,
            column: 5
          }
        },
        loc: {
          start: {
            line: 65,
            column: 73
          },
          end: {
            line: 72,
            column: 5
          }
        },
        line: 65
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 78,
            column: 4
          },
          end: {
            line: 78,
            column: 5
          }
        },
        loc: {
          start: {
            line: 78,
            column: 52
          },
          end: {
            line: 88,
            column: 5
          }
        },
        line: 78
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 94,
            column: 4
          },
          end: {
            line: 94,
            column: 5
          }
        },
        loc: {
          start: {
            line: 94,
            column: 52
          },
          end: {
            line: 102,
            column: 5
          }
        },
        line: 94
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 107,
            column: 4
          },
          end: {
            line: 107,
            column: 5
          }
        },
        loc: {
          start: {
            line: 107,
            column: 68
          },
          end: {
            line: 121,
            column: 5
          }
        },
        line: 107
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 125,
            column: 4
          },
          end: {
            line: 125,
            column: 5
          }
        },
        loc: {
          start: {
            line: 125,
            column: 67
          },
          end: {
            line: 145,
            column: 5
          }
        },
        line: 125
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 149,
            column: 4
          },
          end: {
            line: 149,
            column: 5
          }
        },
        loc: {
          start: {
            line: 149,
            column: 52
          },
          end: {
            line: 155,
            column: 5
          }
        },
        line: 149
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 153,
            column: 56
          },
          end: {
            line: 153,
            column: 57
          }
        },
        loc: {
          start: {
            line: 153,
            column: 71
          },
          end: {
            line: 153,
            column: 91
          }
        },
        line: 153
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 159,
            column: 4
          },
          end: {
            line: 159,
            column: 5
          }
        },
        loc: {
          start: {
            line: 159,
            column: 48
          },
          end: {
            line: 162,
            column: 5
          }
        },
        line: 159
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 166,
            column: 4
          },
          end: {
            line: 166,
            column: 5
          }
        },
        loc: {
          start: {
            line: 166,
            column: 73
          },
          end: {
            line: 172,
            column: 5
          }
        },
        line: 166
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 176,
            column: 4
          },
          end: {
            line: 176,
            column: 5
          }
        },
        loc: {
          start: {
            line: 176,
            column: 81
          },
          end: {
            line: 200,
            column: 5
          }
        },
        line: 176
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 204,
            column: 4
          },
          end: {
            line: 204,
            column: 5
          }
        },
        loc: {
          start: {
            line: 204,
            column: 40
          },
          end: {
            line: 206,
            column: 5
          }
        },
        line: 204
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 210,
            column: 4
          },
          end: {
            line: 210,
            column: 5
          }
        },
        loc: {
          start: {
            line: 210,
            column: 24
          },
          end: {
            line: 212,
            column: 5
          }
        },
        line: 210
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 216,
            column: 4
          },
          end: {
            line: 216,
            column: 5
          }
        },
        loc: {
          start: {
            line: 216,
            column: 60
          },
          end: {
            line: 228,
            column: 5
          }
        },
        line: 216
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 40,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 40,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 36
      },
      "1": {
        loc: {
          start: {
            line: 43,
            column: 8
          },
          end: {
            line: 47,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 43,
            column: 8
          },
          end: {
            line: 47,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 43
      },
      "2": {
        loc: {
          start: {
            line: 52,
            column: 26
          },
          end: {
            line: 52,
            column: 69
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 52,
            column: 48
          },
          end: {
            line: 52,
            column: 65
          }
        }, {
          start: {
            line: 52,
            column: 68
          },
          end: {
            line: 52,
            column: 69
          }
        }],
        line: 52
      },
      "3": {
        loc: {
          start: {
            line: 68,
            column: 8
          },
          end: {
            line: 70,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 68,
            column: 8
          },
          end: {
            line: 70,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 68
      },
      "4": {
        loc: {
          start: {
            line: 80,
            column: 8
          },
          end: {
            line: 82,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 80,
            column: 8
          },
          end: {
            line: 82,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 80
      },
      "5": {
        loc: {
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 98,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 98,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 96
      },
      "6": {
        loc: {
          start: {
            line: 96,
            column: 12
          },
          end: {
            line: 96,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 96,
            column: 12
          },
          end: {
            line: 96,
            column: 29
          }
        }, {
          start: {
            line: 96,
            column: 33
          },
          end: {
            line: 96,
            column: 54
          }
        }],
        line: 96
      },
      "7": {
        loc: {
          start: {
            line: 108,
            column: 8
          },
          end: {
            line: 110,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 108,
            column: 8
          },
          end: {
            line: 110,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 108
      },
      "8": {
        loc: {
          start: {
            line: 115,
            column: 8
          },
          end: {
            line: 119,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 115,
            column: 8
          },
          end: {
            line: 119,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 115
      },
      "9": {
        loc: {
          start: {
            line: 134,
            column: 32
          },
          end: {
            line: 134,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 134,
            column: 32
          },
          end: {
            line: 134,
            column: 80
          }
        }, {
          start: {
            line: 134,
            column: 84
          },
          end: {
            line: 134,
            column: 85
          }
        }],
        line: 134
      },
      "10": {
        loc: {
          start: {
            line: 150,
            column: 8
          },
          end: {
            line: 151,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 150,
            column: 8
          },
          end: {
            line: 151,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 150
      },
      "11": {
        loc: {
          start: {
            line: 169,
            column: 8
          },
          end: {
            line: 170,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 169,
            column: 8
          },
          end: {
            line: 170,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 169
      },
      "12": {
        loc: {
          start: {
            line: 179,
            column: 8
          },
          end: {
            line: 181,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 179,
            column: 8
          },
          end: {
            line: 181,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 179
      },
      "13": {
        loc: {
          start: {
            line: 183,
            column: 8
          },
          end: {
            line: 185,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 183,
            column: 8
          },
          end: {
            line: 185,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 183
      },
      "14": {
        loc: {
          start: {
            line: 187,
            column: 8
          },
          end: {
            line: 189,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 187,
            column: 8
          },
          end: {
            line: 189,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 187
      },
      "15": {
        loc: {
          start: {
            line: 193,
            column: 8
          },
          end: {
            line: 195,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 193,
            column: 8
          },
          end: {
            line: 195,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 193
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\risk\\position-sizing-engine.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\risk\\position-sizing-engine.ts"],
      sourcesContent: ["/**\r\n * Dynamic Position Sizing Engine\r\n * \r\n * Implements sophisticated position sizing based on:\r\n * - 2-3% risk per trade calculation\r\n * - Account balance and volatility considerations\r\n * - Confidence-based position size adjustment\r\n * - Correlation-based exposure limits\r\n */\r\n\r\nimport { \r\n  PositionSizeRequest, \r\n  PositionSizeResult, \r\n  RiskParameters, \r\n  Position,\r\n  CorrelationMatrix \r\n} from './types.js';\r\n\r\nexport class PositionSizingEngine {\r\n  private riskParameters: RiskParameters;\r\n\r\n  constructor(riskParameters: RiskParameters) {\r\n    this.riskParameters = riskParameters;\r\n  }\r\n\r\n  /**\r\n   * Calculate optimal position size based on multiple risk factors\r\n   */\r\n  async calculatePositionSize(request: PositionSizeRequest): Promise<PositionSizeResult> {\r\n    // Calculate base position size using risk percentage\r\n    const basePositionSize = this.calculateBasePositionSize(\r\n      request.accountBalance,\r\n      request.entryPrice,\r\n      request.stopLossPrice\r\n    );\r\n\r\n    // Apply confidence adjustment\r\n    const confidenceAdjustedSize = this.applyConfidenceAdjustment(\r\n      basePositionSize,\r\n      request.confidence\r\n    );\r\n\r\n    // Apply volatility adjustment\r\n    const volatilityAdjustedSize = this.applyVolatilityAdjustment(\r\n      confidenceAdjustedSize,\r\n      request.volatility\r\n    );\r\n\r\n    // Calculate correlation adjustment\r\n    const correlationAdjustment = await this.calculateCorrelationAdjustment(\r\n      request.symbol,\r\n      request.existingPositions\r\n    );\r\n\r\n    let finalPositionSize = volatilityAdjustedSize * correlationAdjustment;\r\n\r\n    // Calculate risk metrics\r\n    const accountRiskAmount = request.accountBalance * (this.riskParameters.maxRiskPerTrade / 100);\r\n    let actualRiskAmount = Math.abs(request.entryPrice - request.stopLossPrice) * finalPositionSize;\r\n    let riskPercentage = (actualRiskAmount / request.accountBalance) * 100;\r\n\r\n    // Ensure we don't exceed max risk per trade due to adjustments\r\n    if (riskPercentage > this.riskParameters.maxRiskPerTrade) {\r\n      finalPositionSize = accountRiskAmount / Math.abs(request.entryPrice - request.stopLossPrice);\r\n      actualRiskAmount = Math.abs(request.entryPrice - request.stopLossPrice) * finalPositionSize;\r\n      riskPercentage = (actualRiskAmount / request.accountBalance) * 100;\r\n    }\r\n\r\n    // Also ensure position value doesn't exceed account balance\r\n    const positionValue = finalPositionSize * request.entryPrice;\r\n    if (positionValue > request.accountBalance) {\r\n      finalPositionSize = request.accountBalance / request.entryPrice;\r\n      actualRiskAmount = Math.abs(request.entryPrice - request.stopLossPrice) * finalPositionSize;\r\n      riskPercentage = (actualRiskAmount / request.accountBalance) * 100;\r\n    }\r\n    const riskRewardRatio = this.calculateRiskRewardRatio(\r\n      request.entryPrice,\r\n      request.stopLossPrice,\r\n      request.takeProfitPrice\r\n    );\r\n\r\n    // Validate position size\r\n    const validation = this.validatePositionSize(\r\n      finalPositionSize,\r\n      riskPercentage,\r\n      riskRewardRatio,\r\n      request\r\n    );\r\n\r\n    return {\r\n      positionSize: validation.approved ? finalPositionSize : 0,\r\n      riskAmount: accountRiskAmount,\r\n      riskPercentage,\r\n      riskRewardRatio,\r\n      confidenceAdjustedSize,\r\n      correlationAdjustment,\r\n      approved: validation.approved,\r\n      rejectionReasons: validation.rejectionReasons\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculate base position size using 2-3% risk rule\r\n   */\r\n  private calculateBasePositionSize(\r\n    accountBalance: number,\r\n    entryPrice: number,\r\n    stopLossPrice: number\r\n  ): number {\r\n    const riskAmount = accountBalance * (this.riskParameters.maxRiskPerTrade / 100);\r\n    const priceRisk = Math.abs(entryPrice - stopLossPrice);\r\n    \r\n    if (priceRisk === 0) {\r\n      throw new Error('Stop loss price cannot equal entry price');\r\n    }\r\n\r\n    return riskAmount / priceRisk;\r\n  }\r\n\r\n  /**\r\n   * Apply confidence-based position size adjustment\r\n   * Higher confidence = larger position (up to 150% of base)\r\n   * Lower confidence = smaller position (down to 50% of base)\r\n   */\r\n  private applyConfidenceAdjustment(baseSize: number, confidence: number): number {\r\n    // Handle NaN confidence values\r\n    if (isNaN(confidence)) {\r\n      confidence = 50; // Default to neutral confidence\r\n    }\r\n    \r\n    // Normalize confidence to 0-1 range\r\n    const normalizedConfidence = Math.max(0, Math.min(100, confidence)) / 100;\r\n    \r\n    // Apply confidence multiplier (0.5x to 1.5x)\r\n    const confidenceMultiplier = 0.5 + (normalizedConfidence * 1.0);\r\n    \r\n    return baseSize * confidenceMultiplier;\r\n  }\r\n\r\n  /**\r\n   * Apply volatility-based position size adjustment\r\n   * Higher volatility = smaller position\r\n   * Lower volatility = larger position\r\n   */\r\n  private applyVolatilityAdjustment(baseSize: number, volatility: number): number {\r\n    // Handle invalid volatility values\r\n    if (isNaN(volatility) || !isFinite(volatility)) {\r\n      volatility = 0.2; // Default to moderate volatility\r\n    }\r\n    \r\n    // Volatility adjustment factor (higher volatility reduces position size)\r\n    const volatilityMultiplier = Math.max(0.3, 1 - (volatility * this.riskParameters.volatilityAdjustmentFactor));\r\n    \r\n    return baseSize * volatilityMultiplier;\r\n  }\r\n\r\n  /**\r\n   * Calculate correlation-based position adjustment\r\n   * Reduces position size if high correlation with existing positions\r\n   */\r\n  private async calculateCorrelationAdjustment(\r\n    symbol: string,\r\n    existingPositions: Position[]\r\n  ): Promise<number> {\r\n    if (existingPositions.length === 0) {\r\n      return 1.0; // No adjustment needed\r\n    }\r\n\r\n    // Calculate correlation with existing positions\r\n    const correlationMatrix = await this.calculateCorrelationMatrix(symbol, existingPositions);\r\n    \r\n    // Reduce position size based on correlation exposure\r\n    const maxCorrelation = Math.max(...Array.from(correlationMatrix.correlations.values()));\r\n    \r\n    if (maxCorrelation > this.riskParameters.maxCorrelationExposure) {\r\n      // Reduce position size proportionally to correlation excess\r\n      const correlationExcess = maxCorrelation - this.riskParameters.maxCorrelationExposure;\r\n      return Math.max(0.2, 1 - correlationExcess);\r\n    }\r\n\r\n    return 1.0;\r\n  }\r\n\r\n  /**\r\n   * Calculate correlation matrix between symbols\r\n   */\r\n  private async calculateCorrelationMatrix(\r\n    newSymbol: string,\r\n    existingPositions: Position[]\r\n  ): Promise<CorrelationMatrix> {\r\n    const correlations = new Map<string, number>();\r\n    \r\n    // For crypto pairs, use predefined correlation coefficients\r\n    // In production, this would use historical price data\r\n    const cryptoCorrelations: Record<string, Record<string, number>> = {\r\n      'BTC': { 'ETH': 0.75, 'BTC': 1.0 },\r\n      'ETH': { 'BTC': 0.75, 'ETH': 1.0 }\r\n    };\r\n\r\n    for (const position of existingPositions) {\r\n      const correlation = cryptoCorrelations[newSymbol]?.[position.symbol] || 0;\r\n      correlations.set(`${newSymbol}-${position.symbol}`, correlation);\r\n    }\r\n\r\n    const portfolioCorrelationRisk = this.calculatePortfolioCorrelationRisk(correlations);\r\n    const diversificationScore = this.calculateDiversificationScore(correlations);\r\n\r\n    return {\r\n      correlations,\r\n      portfolioCorrelationRisk,\r\n      diversificationScore,\r\n      recommendations: []\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculate overall portfolio correlation risk\r\n   */\r\n  private calculatePortfolioCorrelationRisk(correlations: Map<string, number>): number {\r\n    if (correlations.size === 0) return 0;\r\n    \r\n    const correlationValues = Array.from(correlations.values());\r\n    const avgCorrelation = correlationValues.reduce((sum, corr) => sum + Math.abs(corr), 0) / correlationValues.length;\r\n    \r\n    return avgCorrelation;\r\n  }\r\n\r\n  /**\r\n   * Calculate portfolio diversification score\r\n   */\r\n  private calculateDiversificationScore(correlations: Map<string, number>): number {\r\n    const portfolioRisk = this.calculatePortfolioCorrelationRisk(correlations);\r\n    return Math.max(0, 100 - (portfolioRisk * 100));\r\n  }\r\n\r\n  /**\r\n   * Calculate risk-reward ratio\r\n   */\r\n  private calculateRiskRewardRatio(\r\n    entryPrice: number,\r\n    stopLossPrice: number,\r\n    takeProfitPrice: number\r\n  ): number {\r\n    const risk = Math.abs(entryPrice - stopLossPrice);\r\n    const reward = Math.abs(takeProfitPrice - entryPrice);\r\n    \r\n    if (risk === 0) return 0;\r\n    return reward / risk;\r\n  }\r\n\r\n  /**\r\n   * Validate position size against risk parameters\r\n   */\r\n  private validatePositionSize(\r\n    positionSize: number,\r\n    riskPercentage: number,\r\n    riskRewardRatio: number,\r\n    request: PositionSizeRequest\r\n  ): { approved: boolean; rejectionReasons: string[] } {\r\n    const rejectionReasons: string[] = [];\r\n\r\n    // Check maximum risk per trade\r\n    if (riskPercentage > this.riskParameters.maxRiskPerTrade) {\r\n      rejectionReasons.push(`Risk percentage ${riskPercentage.toFixed(2)}% exceeds maximum ${this.riskParameters.maxRiskPerTrade}%`);\r\n    }\r\n\r\n    // Check minimum risk-reward ratio\r\n    if (riskRewardRatio < this.riskParameters.minRiskRewardRatio) {\r\n      rejectionReasons.push(`Risk-reward ratio ${riskRewardRatio.toFixed(2)} below minimum ${this.riskParameters.minRiskRewardRatio}`);\r\n    }\r\n\r\n    // Check position size is positive and reasonable\r\n    if (positionSize <= 0) {\r\n      rejectionReasons.push('Position size must be positive');\r\n    }\r\n\r\n    // Check if position size is too large relative to account (allow up to 100% for crypto)\r\n    const positionValue = positionSize * request.entryPrice;\r\n    const positionPercentage = (positionValue / request.accountBalance) * 100;\r\n    if (positionPercentage > 100) {\r\n      rejectionReasons.push(`Position value ${positionPercentage.toFixed(2)}% of account is too large`);\r\n    }\r\n\r\n    return {\r\n      approved: rejectionReasons.length === 0,\r\n      rejectionReasons\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Update risk parameters\r\n   */\r\n  updateRiskParameters(newParameters: Partial<RiskParameters>): void {\r\n    this.riskParameters = { ...this.riskParameters, ...newParameters };\r\n  }\r\n\r\n  /**\r\n   * Get current risk parameters\r\n   */\r\n  getRiskParameters(): RiskParameters {\r\n    return { ...this.riskParameters };\r\n  }\r\n\r\n  /**\r\n   * Calculate recommended position size for multiple scenarios\r\n   */\r\n  async calculateScenarioAnalysis(\r\n    baseRequest: PositionSizeRequest,\r\n    scenarios: { confidence: number; volatility: number }[]\r\n  ): Promise<PositionSizeResult[]> {\r\n    const results: PositionSizeResult[] = [];\r\n\r\n    for (const scenario of scenarios) {\r\n      const scenarioRequest = {\r\n        ...baseRequest,\r\n        confidence: scenario.confidence,\r\n        volatility: scenario.volatility\r\n      };\r\n\r\n      const result = await this.calculatePositionSize(scenarioRequest);\r\n      results.push(result);\r\n    }\r\n\r\n    return results;\r\n  }\r\n}\r\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "9463e6d4c1be221bf466d86b52f28574fc87345b"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_dp0chv9am = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_dp0chv9am();
cov_dp0chv9am().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_dp0chv9am().s[1]++;
exports.PositionSizingEngine = void 0;
class PositionSizingEngine {
  riskParameters;
  constructor(riskParameters) {
    /* istanbul ignore next */
    cov_dp0chv9am().f[0]++;
    cov_dp0chv9am().s[2]++;
    this.riskParameters = riskParameters;
  }
  /**
   * Calculate optimal position size based on multiple risk factors
   */
  async calculatePositionSize(request) {
    /* istanbul ignore next */
    cov_dp0chv9am().f[1]++;
    // Calculate base position size using risk percentage
    const basePositionSize =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[3]++, this.calculateBasePositionSize(request.accountBalance, request.entryPrice, request.stopLossPrice));
    // Apply confidence adjustment
    const confidenceAdjustedSize =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[4]++, this.applyConfidenceAdjustment(basePositionSize, request.confidence));
    // Apply volatility adjustment
    const volatilityAdjustedSize =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[5]++, this.applyVolatilityAdjustment(confidenceAdjustedSize, request.volatility));
    // Calculate correlation adjustment
    const correlationAdjustment =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[6]++, await this.calculateCorrelationAdjustment(request.symbol, request.existingPositions));
    let finalPositionSize =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[7]++, volatilityAdjustedSize * correlationAdjustment);
    // Calculate risk metrics
    const accountRiskAmount =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[8]++, request.accountBalance * (this.riskParameters.maxRiskPerTrade / 100));
    let actualRiskAmount =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[9]++, Math.abs(request.entryPrice - request.stopLossPrice) * finalPositionSize);
    let riskPercentage =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[10]++, actualRiskAmount / request.accountBalance * 100);
    // Ensure we don't exceed max risk per trade due to adjustments
    /* istanbul ignore next */
    cov_dp0chv9am().s[11]++;
    if (riskPercentage > this.riskParameters.maxRiskPerTrade) {
      /* istanbul ignore next */
      cov_dp0chv9am().b[0][0]++;
      cov_dp0chv9am().s[12]++;
      finalPositionSize = accountRiskAmount / Math.abs(request.entryPrice - request.stopLossPrice);
      /* istanbul ignore next */
      cov_dp0chv9am().s[13]++;
      actualRiskAmount = Math.abs(request.entryPrice - request.stopLossPrice) * finalPositionSize;
      /* istanbul ignore next */
      cov_dp0chv9am().s[14]++;
      riskPercentage = actualRiskAmount / request.accountBalance * 100;
    } else
    /* istanbul ignore next */
    {
      cov_dp0chv9am().b[0][1]++;
    }
    // Also ensure position value doesn't exceed account balance
    const positionValue =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[15]++, finalPositionSize * request.entryPrice);
    /* istanbul ignore next */
    cov_dp0chv9am().s[16]++;
    if (positionValue > request.accountBalance) {
      /* istanbul ignore next */
      cov_dp0chv9am().b[1][0]++;
      cov_dp0chv9am().s[17]++;
      finalPositionSize = request.accountBalance / request.entryPrice;
      /* istanbul ignore next */
      cov_dp0chv9am().s[18]++;
      actualRiskAmount = Math.abs(request.entryPrice - request.stopLossPrice) * finalPositionSize;
      /* istanbul ignore next */
      cov_dp0chv9am().s[19]++;
      riskPercentage = actualRiskAmount / request.accountBalance * 100;
    } else
    /* istanbul ignore next */
    {
      cov_dp0chv9am().b[1][1]++;
    }
    const riskRewardRatio =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[20]++, this.calculateRiskRewardRatio(request.entryPrice, request.stopLossPrice, request.takeProfitPrice));
    // Validate position size
    const validation =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[21]++, this.validatePositionSize(finalPositionSize, riskPercentage, riskRewardRatio, request));
    /* istanbul ignore next */
    cov_dp0chv9am().s[22]++;
    return {
      positionSize: validation.approved ?
      /* istanbul ignore next */
      (cov_dp0chv9am().b[2][0]++, finalPositionSize) :
      /* istanbul ignore next */
      (cov_dp0chv9am().b[2][1]++, 0),
      riskAmount: accountRiskAmount,
      riskPercentage,
      riskRewardRatio,
      confidenceAdjustedSize,
      correlationAdjustment,
      approved: validation.approved,
      rejectionReasons: validation.rejectionReasons
    };
  }
  /**
   * Calculate base position size using 2-3% risk rule
   */
  calculateBasePositionSize(accountBalance, entryPrice, stopLossPrice) {
    /* istanbul ignore next */
    cov_dp0chv9am().f[2]++;
    const riskAmount =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[23]++, accountBalance * (this.riskParameters.maxRiskPerTrade / 100));
    const priceRisk =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[24]++, Math.abs(entryPrice - stopLossPrice));
    /* istanbul ignore next */
    cov_dp0chv9am().s[25]++;
    if (priceRisk === 0) {
      /* istanbul ignore next */
      cov_dp0chv9am().b[3][0]++;
      cov_dp0chv9am().s[26]++;
      throw new Error('Stop loss price cannot equal entry price');
    } else
    /* istanbul ignore next */
    {
      cov_dp0chv9am().b[3][1]++;
    }
    cov_dp0chv9am().s[27]++;
    return riskAmount / priceRisk;
  }
  /**
   * Apply confidence-based position size adjustment
   * Higher confidence = larger position (up to 150% of base)
   * Lower confidence = smaller position (down to 50% of base)
   */
  applyConfidenceAdjustment(baseSize, confidence) {
    /* istanbul ignore next */
    cov_dp0chv9am().f[3]++;
    cov_dp0chv9am().s[28]++;
    // Handle NaN confidence values
    if (isNaN(confidence)) {
      /* istanbul ignore next */
      cov_dp0chv9am().b[4][0]++;
      cov_dp0chv9am().s[29]++;
      confidence = 50; // Default to neutral confidence
    } else
    /* istanbul ignore next */
    {
      cov_dp0chv9am().b[4][1]++;
    }
    // Normalize confidence to 0-1 range
    const normalizedConfidence =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[30]++, Math.max(0, Math.min(100, confidence)) / 100);
    // Apply confidence multiplier (0.5x to 1.5x)
    const confidenceMultiplier =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[31]++, 0.5 + normalizedConfidence * 1.0);
    /* istanbul ignore next */
    cov_dp0chv9am().s[32]++;
    return baseSize * confidenceMultiplier;
  }
  /**
   * Apply volatility-based position size adjustment
   * Higher volatility = smaller position
   * Lower volatility = larger position
   */
  applyVolatilityAdjustment(baseSize, volatility) {
    /* istanbul ignore next */
    cov_dp0chv9am().f[4]++;
    cov_dp0chv9am().s[33]++;
    // Handle invalid volatility values
    if (
    /* istanbul ignore next */
    (cov_dp0chv9am().b[6][0]++, isNaN(volatility)) ||
    /* istanbul ignore next */
    (cov_dp0chv9am().b[6][1]++, !isFinite(volatility))) {
      /* istanbul ignore next */
      cov_dp0chv9am().b[5][0]++;
      cov_dp0chv9am().s[34]++;
      volatility = 0.2; // Default to moderate volatility
    } else
    /* istanbul ignore next */
    {
      cov_dp0chv9am().b[5][1]++;
    }
    // Volatility adjustment factor (higher volatility reduces position size)
    const volatilityMultiplier =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[35]++, Math.max(0.3, 1 - volatility * this.riskParameters.volatilityAdjustmentFactor));
    /* istanbul ignore next */
    cov_dp0chv9am().s[36]++;
    return baseSize * volatilityMultiplier;
  }
  /**
   * Calculate correlation-based position adjustment
   * Reduces position size if high correlation with existing positions
   */
  async calculateCorrelationAdjustment(symbol, existingPositions) {
    /* istanbul ignore next */
    cov_dp0chv9am().f[5]++;
    cov_dp0chv9am().s[37]++;
    if (existingPositions.length === 0) {
      /* istanbul ignore next */
      cov_dp0chv9am().b[7][0]++;
      cov_dp0chv9am().s[38]++;
      return 1.0; // No adjustment needed
    } else
    /* istanbul ignore next */
    {
      cov_dp0chv9am().b[7][1]++;
    }
    // Calculate correlation with existing positions
    const correlationMatrix =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[39]++, await this.calculateCorrelationMatrix(symbol, existingPositions));
    // Reduce position size based on correlation exposure
    const maxCorrelation =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[40]++, Math.max(...Array.from(correlationMatrix.correlations.values())));
    /* istanbul ignore next */
    cov_dp0chv9am().s[41]++;
    if (maxCorrelation > this.riskParameters.maxCorrelationExposure) {
      /* istanbul ignore next */
      cov_dp0chv9am().b[8][0]++;
      // Reduce position size proportionally to correlation excess
      const correlationExcess =
      /* istanbul ignore next */
      (cov_dp0chv9am().s[42]++, maxCorrelation - this.riskParameters.maxCorrelationExposure);
      /* istanbul ignore next */
      cov_dp0chv9am().s[43]++;
      return Math.max(0.2, 1 - correlationExcess);
    } else
    /* istanbul ignore next */
    {
      cov_dp0chv9am().b[8][1]++;
    }
    cov_dp0chv9am().s[44]++;
    return 1.0;
  }
  /**
   * Calculate correlation matrix between symbols
   */
  async calculateCorrelationMatrix(newSymbol, existingPositions) {
    /* istanbul ignore next */
    cov_dp0chv9am().f[6]++;
    const correlations =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[45]++, new Map());
    // For crypto pairs, use predefined correlation coefficients
    // In production, this would use historical price data
    const cryptoCorrelations =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[46]++, {
      'BTC': {
        'ETH': 0.75,
        'BTC': 1.0
      },
      'ETH': {
        'BTC': 0.75,
        'ETH': 1.0
      }
    });
    /* istanbul ignore next */
    cov_dp0chv9am().s[47]++;
    for (const position of existingPositions) {
      const correlation =
      /* istanbul ignore next */
      (cov_dp0chv9am().s[48]++,
      /* istanbul ignore next */
      (cov_dp0chv9am().b[9][0]++, cryptoCorrelations[newSymbol]?.[position.symbol]) ||
      /* istanbul ignore next */
      (cov_dp0chv9am().b[9][1]++, 0));
      /* istanbul ignore next */
      cov_dp0chv9am().s[49]++;
      correlations.set(`${newSymbol}-${position.symbol}`, correlation);
    }
    const portfolioCorrelationRisk =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[50]++, this.calculatePortfolioCorrelationRisk(correlations));
    const diversificationScore =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[51]++, this.calculateDiversificationScore(correlations));
    /* istanbul ignore next */
    cov_dp0chv9am().s[52]++;
    return {
      correlations,
      portfolioCorrelationRisk,
      diversificationScore,
      recommendations: []
    };
  }
  /**
   * Calculate overall portfolio correlation risk
   */
  calculatePortfolioCorrelationRisk(correlations) {
    /* istanbul ignore next */
    cov_dp0chv9am().f[7]++;
    cov_dp0chv9am().s[53]++;
    if (correlations.size === 0) {
      /* istanbul ignore next */
      cov_dp0chv9am().b[10][0]++;
      cov_dp0chv9am().s[54]++;
      return 0;
    } else
    /* istanbul ignore next */
    {
      cov_dp0chv9am().b[10][1]++;
    }
    const correlationValues =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[55]++, Array.from(correlations.values()));
    const avgCorrelation =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[56]++, correlationValues.reduce((sum, corr) => {
      /* istanbul ignore next */
      cov_dp0chv9am().f[8]++;
      cov_dp0chv9am().s[57]++;
      return sum + Math.abs(corr);
    }, 0) / correlationValues.length);
    /* istanbul ignore next */
    cov_dp0chv9am().s[58]++;
    return avgCorrelation;
  }
  /**
   * Calculate portfolio diversification score
   */
  calculateDiversificationScore(correlations) {
    /* istanbul ignore next */
    cov_dp0chv9am().f[9]++;
    const portfolioRisk =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[59]++, this.calculatePortfolioCorrelationRisk(correlations));
    /* istanbul ignore next */
    cov_dp0chv9am().s[60]++;
    return Math.max(0, 100 - portfolioRisk * 100);
  }
  /**
   * Calculate risk-reward ratio
   */
  calculateRiskRewardRatio(entryPrice, stopLossPrice, takeProfitPrice) {
    /* istanbul ignore next */
    cov_dp0chv9am().f[10]++;
    const risk =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[61]++, Math.abs(entryPrice - stopLossPrice));
    const reward =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[62]++, Math.abs(takeProfitPrice - entryPrice));
    /* istanbul ignore next */
    cov_dp0chv9am().s[63]++;
    if (risk === 0) {
      /* istanbul ignore next */
      cov_dp0chv9am().b[11][0]++;
      cov_dp0chv9am().s[64]++;
      return 0;
    } else
    /* istanbul ignore next */
    {
      cov_dp0chv9am().b[11][1]++;
    }
    cov_dp0chv9am().s[65]++;
    return reward / risk;
  }
  /**
   * Validate position size against risk parameters
   */
  validatePositionSize(positionSize, riskPercentage, riskRewardRatio, request) {
    /* istanbul ignore next */
    cov_dp0chv9am().f[11]++;
    const rejectionReasons =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[66]++, []);
    // Check maximum risk per trade
    /* istanbul ignore next */
    cov_dp0chv9am().s[67]++;
    if (riskPercentage > this.riskParameters.maxRiskPerTrade) {
      /* istanbul ignore next */
      cov_dp0chv9am().b[12][0]++;
      cov_dp0chv9am().s[68]++;
      rejectionReasons.push(`Risk percentage ${riskPercentage.toFixed(2)}% exceeds maximum ${this.riskParameters.maxRiskPerTrade}%`);
    } else
    /* istanbul ignore next */
    {
      cov_dp0chv9am().b[12][1]++;
    }
    // Check minimum risk-reward ratio
    cov_dp0chv9am().s[69]++;
    if (riskRewardRatio < this.riskParameters.minRiskRewardRatio) {
      /* istanbul ignore next */
      cov_dp0chv9am().b[13][0]++;
      cov_dp0chv9am().s[70]++;
      rejectionReasons.push(`Risk-reward ratio ${riskRewardRatio.toFixed(2)} below minimum ${this.riskParameters.minRiskRewardRatio}`);
    } else
    /* istanbul ignore next */
    {
      cov_dp0chv9am().b[13][1]++;
    }
    // Check position size is positive and reasonable
    cov_dp0chv9am().s[71]++;
    if (positionSize <= 0) {
      /* istanbul ignore next */
      cov_dp0chv9am().b[14][0]++;
      cov_dp0chv9am().s[72]++;
      rejectionReasons.push('Position size must be positive');
    } else
    /* istanbul ignore next */
    {
      cov_dp0chv9am().b[14][1]++;
    }
    // Check if position size is too large relative to account (allow up to 100% for crypto)
    const positionValue =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[73]++, positionSize * request.entryPrice);
    const positionPercentage =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[74]++, positionValue / request.accountBalance * 100);
    /* istanbul ignore next */
    cov_dp0chv9am().s[75]++;
    if (positionPercentage > 100) {
      /* istanbul ignore next */
      cov_dp0chv9am().b[15][0]++;
      cov_dp0chv9am().s[76]++;
      rejectionReasons.push(`Position value ${positionPercentage.toFixed(2)}% of account is too large`);
    } else
    /* istanbul ignore next */
    {
      cov_dp0chv9am().b[15][1]++;
    }
    cov_dp0chv9am().s[77]++;
    return {
      approved: rejectionReasons.length === 0,
      rejectionReasons
    };
  }
  /**
   * Update risk parameters
   */
  updateRiskParameters(newParameters) {
    /* istanbul ignore next */
    cov_dp0chv9am().f[12]++;
    cov_dp0chv9am().s[78]++;
    this.riskParameters = {
      ...this.riskParameters,
      ...newParameters
    };
  }
  /**
   * Get current risk parameters
   */
  getRiskParameters() {
    /* istanbul ignore next */
    cov_dp0chv9am().f[13]++;
    cov_dp0chv9am().s[79]++;
    return {
      ...this.riskParameters
    };
  }
  /**
   * Calculate recommended position size for multiple scenarios
   */
  async calculateScenarioAnalysis(baseRequest, scenarios) {
    /* istanbul ignore next */
    cov_dp0chv9am().f[14]++;
    const results =
    /* istanbul ignore next */
    (cov_dp0chv9am().s[80]++, []);
    /* istanbul ignore next */
    cov_dp0chv9am().s[81]++;
    for (const scenario of scenarios) {
      const scenarioRequest =
      /* istanbul ignore next */
      (cov_dp0chv9am().s[82]++, {
        ...baseRequest,
        confidence: scenario.confidence,
        volatility: scenario.volatility
      });
      const result =
      /* istanbul ignore next */
      (cov_dp0chv9am().s[83]++, await this.calculatePositionSize(scenarioRequest));
      /* istanbul ignore next */
      cov_dp0chv9am().s[84]++;
      results.push(result);
    }
    /* istanbul ignore next */
    cov_dp0chv9am().s[85]++;
    return results;
  }
}
/* istanbul ignore next */
cov_dp0chv9am().s[86]++;
exports.PositionSizingEngine = PositionSizingEngine;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,