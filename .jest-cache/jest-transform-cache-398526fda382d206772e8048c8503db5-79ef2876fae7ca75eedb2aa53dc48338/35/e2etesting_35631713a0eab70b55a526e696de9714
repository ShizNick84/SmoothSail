868d8991322f3133507f6eecba6e48b4
"use strict";

/**
 * =============================================================================
 * AI CRYPTO TRADING AGENT - END-TO-END TESTING
 * =============================================================================
 *
 * This module provides comprehensive end-to-end testing for the complete
 * AI crypto trading agent system in a production-like environment.
 */
/* istanbul ignore next */
function cov_8n6mpkaoa() {
  var path = "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\deployment\\e2e-testing.ts";
  var hash = "b280fdd6e03bfb825c3f7083d3347f650de3fb16";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\deployment\\e2e-testing.ts",
    statementMap: {
      "0": {
        start: {
          line: 10,
          column: 22
        },
        end: {
          line: 12,
          column: 1
        }
      },
      "1": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 11,
          column: 62
        }
      },
      "2": {
        start: {
          line: 13,
          column: 0
        },
        end: {
          line: 13,
          column: 62
        }
      },
      "3": {
        start: {
          line: 14,
          column: 0
        },
        end: {
          line: 14,
          column: 55
        }
      },
      "4": {
        start: {
          line: 15,
          column: 24
        },
        end: {
          line: 15,
          column: 48
        }
      },
      "5": {
        start: {
          line: 16,
          column: 13
        },
        end: {
          line: 16,
          column: 26
        }
      },
      "6": {
        start: {
          line: 17,
          column: 15
        },
        end: {
          line: 17,
          column: 30
        }
      },
      "7": {
        start: {
          line: 18,
          column: 17
        },
        end: {
          line: 18,
          column: 42
        }
      },
      "8": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 49
        }
      },
      "9": {
        start: {
          line: 21,
          column: 17
        },
        end: {
          line: 21,
          column: 19
        }
      },
      "10": {
        start: {
          line: 22,
          column: 14
        },
        end: {
          line: 22,
          column: 37
        }
      },
      "11": {
        start: {
          line: 23,
          column: 19
        },
        end: {
          line: 23,
          column: 42
        }
      },
      "12": {
        start: {
          line: 24,
          column: 22
        },
        end: {
          line: 24,
          column: 27
        }
      },
      "13": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 36
        }
      },
      "14": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 66
        }
      },
      "15": {
        start: {
          line: 33,
          column: 26
        },
        end: {
          line: 33,
          column: 36
        }
      },
      "16": {
        start: {
          line: 34,
          column: 24
        },
        end: {
          line: 34,
          column: 26
        }
      },
      "17": {
        start: {
          line: 35,
          column: 25
        },
        end: {
          line: 35,
          column: 26
        }
      },
      "18": {
        start: {
          line: 36,
          column: 26
        },
        end: {
          line: 36,
          column: 27
        }
      },
      "19": {
        start: {
          line: 37,
          column: 26
        },
        end: {
          line: 37,
          column: 27
        }
      },
      "20": {
        start: {
          line: 38,
          column: 27
        },
        end: {
          line: 38,
          column: 28
        }
      },
      "21": {
        start: {
          line: 39,
          column: 31
        },
        end: {
          line: 39,
          column: 32
        }
      },
      "22": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 128,
          column: 9
        }
      },
      "23": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 42,
          column: 43
        }
      },
      "24": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 123,
          column: 13
        }
      },
      "25": {
        start: {
          line: 45,
          column: 16
        },
        end: {
          line: 48,
          column: 17
        }
      },
      "26": {
        start: {
          line: 46,
          column: 20
        },
        end: {
          line: 46,
          column: 91
        }
      },
      "27": {
        start: {
          line: 47,
          column: 20
        },
        end: {
          line: 47,
          column: 29
        }
      },
      "28": {
        start: {
          line: 49,
          column: 16
        },
        end: {
          line: 49,
          column: 81
        }
      },
      "29": {
        start: {
          line: 51,
          column: 16
        },
        end: {
          line: 59,
          column: 17
        }
      },
      "30": {
        start: {
          line: 52,
          column: 20
        },
        end: {
          line: 58,
          column: 21
        }
      },
      "31": {
        start: {
          line: 53,
          column: 24
        },
        end: {
          line: 53,
          column: 44
        }
      },
      "32": {
        start: {
          line: 56,
          column: 24
        },
        end: {
          line: 56,
          column: 92
        }
      },
      "33": {
        start: {
          line: 57,
          column: 24
        },
        end: {
          line: 57,
          column: 33
        }
      },
      "34": {
        start: {
          line: 61,
          column: 16
        },
        end: {
          line: 113,
          column: 17
        }
      },
      "35": {
        start: {
          line: 62,
          column: 20
        },
        end: {
          line: 62,
          column: 33
        }
      },
      "36": {
        start: {
          line: 63,
          column: 42
        },
        end: {
          line: 63,
          column: 52
        }
      },
      "37": {
        start: {
          line: 64,
          column: 20
        },
        end: {
          line: 112,
          column: 21
        }
      },
      "38": {
        start: {
          line: 65,
          column: 24
        },
        end: {
          line: 65,
          column: 80
        }
      },
      "39": {
        start: {
          line: 66,
          column: 43
        },
        end: {
          line: 69,
          column: 26
        }
      },
      "40": {
        start: {
          line: 70,
          column: 41
        },
        end: {
          line: 70,
          column: 67
        }
      },
      "41": {
        start: {
          line: 71,
          column: 39
        },
        end: {
          line: 71,
          column: 75
        }
      },
      "42": {
        start: {
          line: 72,
          column: 39
        },
        end: {
          line: 80,
          column: 25
        }
      },
      "43": {
        start: {
          line: 81,
          column: 24
        },
        end: {
          line: 81,
          column: 45
        }
      },
      "44": {
        start: {
          line: 82,
          column: 24
        },
        end: {
          line: 92,
          column: 25
        }
      },
      "45": {
        start: {
          line: 83,
          column: 28
        },
        end: {
          line: 83,
          column: 42
        }
      },
      "46": {
        start: {
          line: 84,
          column: 28
        },
        end: {
          line: 84,
          column: 95
        }
      },
      "47": {
        start: {
          line: 87,
          column: 28
        },
        end: {
          line: 87,
          column: 42
        }
      },
      "48": {
        start: {
          line: 88,
          column: 28
        },
        end: {
          line: 90,
          column: 29
        }
      },
      "49": {
        start: {
          line: 89,
          column: 32
        },
        end: {
          line: 89,
          column: 51
        }
      },
      "50": {
        start: {
          line: 91,
          column: 28
        },
        end: {
          line: 91,
          column: 96
        }
      },
      "51": {
        start: {
          line: 95,
          column: 41
        },
        end: {
          line: 95,
          column: 67
        }
      },
      "52": {
        start: {
          line: 96,
          column: 42
        },
        end: {
          line: 96,
          column: 74
        }
      },
      "53": {
        start: {
          line: 97,
          column: 39
        },
        end: {
          line: 105,
          column: 25
        }
      },
      "54": {
        start: {
          line: 106,
          column: 24
        },
        end: {
          line: 106,
          column: 45
        }
      },
      "55": {
        start: {
          line: 107,
          column: 24
        },
        end: {
          line: 107,
          column: 38
        }
      },
      "56": {
        start: {
          line: 108,
          column: 24
        },
        end: {
          line: 110,
          column: 25
        }
      },
      "57": {
        start: {
          line: 109,
          column: 28
        },
        end: {
          line: 109,
          column: 47
        }
      },
      "58": {
        start: {
          line: 111,
          column: 24
        },
        end: {
          line: 111,
          column: 88
        }
      },
      "59": {
        start: {
          line: 115,
          column: 16
        },
        end: {
          line: 122,
          column: 17
        }
      },
      "60": {
        start: {
          line: 116,
          column: 20
        },
        end: {
          line: 121,
          column: 21
        }
      },
      "61": {
        start: {
          line: 117,
          column: 24
        },
        end: {
          line: 117,
          column: 47
        }
      },
      "62": {
        start: {
          line: 120,
          column: 24
        },
        end: {
          line: 120,
          column: 96
        }
      },
      "63": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 127,
          column: 42
        }
      },
      "64": {
        start: {
          line: 129,
          column: 30
        },
        end: {
          line: 129,
          column: 52
        }
      },
      "65": {
        start: {
          line: 130,
          column: 28
        },
        end: {
          line: 130,
          column: 50
        }
      },
      "66": {
        start: {
          line: 131,
          column: 23
        },
        end: {
          line: 144,
          column: 9
        }
      },
      "67": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 146,
          column: 41
        }
      },
      "68": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 148,
          column: 35
        }
      },
      "69": {
        start: {
          line: 149,
          column: 8
        },
        end: {
          line: 149,
          column: 22
        }
      },
      "70": {
        start: {
          line: 155,
          column: 8
        },
        end: {
          line: 641,
          column: 10
        }
      },
      "71": {
        start: {
          line: 168,
          column: 46
        },
        end: {
          line: 168,
          column: 75
        }
      },
      "72": {
        start: {
          line: 169,
          column: 53
        },
        end: {
          line: 169,
          column: 105
        }
      },
      "73": {
        start: {
          line: 169,
          column: 75
        },
        end: {
          line: 169,
          column: 104
        }
      },
      "74": {
        start: {
          line: 170,
          column: 28
        },
        end: {
          line: 172,
          column: 29
        }
      },
      "75": {
        start: {
          line: 171,
          column: 32
        },
        end: {
          line: 171,
          column: 94
        }
      },
      "76": {
        start: {
          line: 173,
          column: 28
        },
        end: {
          line: 183,
          column: 30
        }
      },
      "77": {
        start: {
          line: 177,
          column: 74
        },
        end: {
          line: 181,
          column: 37
        }
      },
      "78": {
        start: {
          line: 192,
          column: 28
        },
        end: {
          line: 205,
          column: 29
        }
      },
      "79": {
        start: {
          line: 193,
          column: 49
        },
        end: {
          line: 195,
          column: 34
        }
      },
      "80": {
        start: {
          line: 196,
          column: 32
        },
        end: {
          line: 201,
          column: 33
        }
      },
      "81": {
        start: {
          line: 197,
          column: 36
        },
        end: {
          line: 197,
          column: 102
        }
      },
      "82": {
        start: {
          line: 200,
          column: 36
        },
        end: {
          line: 200,
          column: 103
        }
      },
      "83": {
        start: {
          line: 204,
          column: 32
        },
        end: {
          line: 204,
          column: 115
        }
      },
      "84": {
        start: {
          line: 214,
          column: 28
        },
        end: {
          line: 231,
          column: 29
        }
      },
      "85": {
        start: {
          line: 215,
          column: 49
        },
        end: {
          line: 217,
          column: 34
        }
      },
      "86": {
        start: {
          line: 218,
          column: 32
        },
        end: {
          line: 227,
          column: 33
        }
      },
      "87": {
        start: {
          line: 219,
          column: 36
        },
        end: {
          line: 223,
          column: 38
        }
      },
      "88": {
        start: {
          line: 226,
          column: 36
        },
        end: {
          line: 226,
          column: 102
        }
      },
      "89": {
        start: {
          line: 230,
          column: 32
        },
        end: {
          line: 230,
          column: 112
        }
      },
      "90": {
        start: {
          line: 247,
          column: 28
        },
        end: {
          line: 266,
          column: 29
        }
      },
      "91": {
        start: {
          line: 248,
          column: 50
        },
        end: {
          line: 248,
          column: 60
        }
      },
      "92": {
        start: {
          line: 249,
          column: 49
        },
        end: {
          line: 251,
          column: 34
        }
      },
      "93": {
        start: {
          line: 252,
          column: 53
        },
        end: {
          line: 252,
          column: 75
        }
      },
      "94": {
        start: {
          line: 253,
          column: 32
        },
        end: {
          line: 262,
          column: 33
        }
      },
      "95": {
        start: {
          line: 254,
          column: 36
        },
        end: {
          line: 258,
          column: 38
        }
      },
      "96": {
        start: {
          line: 261,
          column: 36
        },
        end: {
          line: 261,
          column: 117
        }
      },
      "97": {
        start: {
          line: 265,
          column: 32
        },
        end: {
          line: 265,
          column: 111
        }
      },
      "98": {
        start: {
          line: 275,
          column: 28
        },
        end: {
          line: 295,
          column: 29
        }
      },
      "99": {
        start: {
          line: 276,
          column: 49
        },
        end: {
          line: 278,
          column: 34
        }
      },
      "100": {
        start: {
          line: 279,
          column: 32
        },
        end: {
          line: 291,
          column: 33
        }
      },
      "101": {
        start: {
          line: 280,
          column: 36
        },
        end: {
          line: 287,
          column: 38
        }
      },
      "102": {
        start: {
          line: 290,
          column: 36
        },
        end: {
          line: 290,
          column: 106
        }
      },
      "103": {
        start: {
          line: 294,
          column: 32
        },
        end: {
          line: 294,
          column: 110
        }
      },
      "104": {
        start: {
          line: 304,
          column: 28
        },
        end: {
          line: 321,
          column: 29
        }
      },
      "105": {
        start: {
          line: 305,
          column: 49
        },
        end: {
          line: 307,
          column: 34
        }
      },
      "106": {
        start: {
          line: 308,
          column: 32
        },
        end: {
          line: 317,
          column: 33
        }
      },
      "107": {
        start: {
          line: 309,
          column: 36
        },
        end: {
          line: 313,
          column: 38
        }
      },
      "108": {
        start: {
          line: 316,
          column: 36
        },
        end: {
          line: 316,
          column: 116
        }
      },
      "109": {
        start: {
          line: 320,
          column: 32
        },
        end: {
          line: 320,
          column: 109
        }
      },
      "110": {
        start: {
          line: 330,
          column: 28
        },
        end: {
          line: 352,
          column: 29
        }
      },
      "111": {
        start: {
          line: 331,
          column: 49
        },
        end: {
          line: 333,
          column: 34
        }
      },
      "112": {
        start: {
          line: 334,
          column: 56
        },
        end: {
          line: 338,
          column: 33
        }
      },
      "113": {
        start: {
          line: 339,
          column: 55
        },
        end: {
          line: 339,
          column: 114
        }
      },
      "114": {
        start: {
          line: 339,
          column: 88
        },
        end: {
          line: 339,
          column: 113
        }
      },
      "115": {
        start: {
          line: 340,
          column: 32
        },
        end: {
          line: 348,
          column: 33
        }
      },
      "116": {
        start: {
          line: 341,
          column: 36
        },
        end: {
          line: 341,
          column: 102
        }
      },
      "117": {
        start: {
          line: 344,
          column: 36
        },
        end: {
          line: 347,
          column: 38
        }
      },
      "118": {
        start: {
          line: 351,
          column: 32
        },
        end: {
          line: 351,
          column: 118
        }
      },
      "119": {
        start: {
          line: 368,
          column: 28
        },
        end: {
          line: 381,
          column: 29
        }
      },
      "120": {
        start: {
          line: 369,
          column: 49
        },
        end: {
          line: 371,
          column: 34
        }
      },
      "121": {
        start: {
          line: 372,
          column: 32
        },
        end: {
          line: 377,
          column: 33
        }
      },
      "122": {
        start: {
          line: 373,
          column: 36
        },
        end: {
          line: 373,
          column: 97
        }
      },
      "123": {
        start: {
          line: 376,
          column: 36
        },
        end: {
          line: 376,
          column: 120
        }
      },
      "124": {
        start: {
          line: 380,
          column: 32
        },
        end: {
          line: 380,
          column: 113
        }
      },
      "125": {
        start: {
          line: 390,
          column: 28
        },
        end: {
          line: 414,
          column: 29
        }
      },
      "126": {
        start: {
          line: 392,
          column: 51
        },
        end: {
          line: 395,
          column: 33
        }
      },
      "127": {
        start: {
          line: 396,
          column: 51
        },
        end: {
          line: 396,
          column: 52
        }
      },
      "128": {
        start: {
          line: 397,
          column: 32
        },
        end: {
          line: 405,
          column: 33
        }
      },
      "129": {
        start: {
          line: 398,
          column: 36
        },
        end: {
          line: 404,
          column: 37
        }
      },
      "130": {
        start: {
          line: 399,
          column: 40
        },
        end: {
          line: 399,
          column: 116
        }
      },
      "131": {
        start: {
          line: 400,
          column: 40
        },
        end: {
          line: 400,
          column: 55
        }
      },
      "132": {
        start: {
          line: 406,
          column: 32
        },
        end: {
          line: 410,
          column: 34
        }
      },
      "133": {
        start: {
          line: 413,
          column: 32
        },
        end: {
          line: 413,
          column: 118
        }
      },
      "134": {
        start: {
          line: 430,
          column: 28
        },
        end: {
          line: 448,
          column: 29
        }
      },
      "135": {
        start: {
          line: 432,
          column: 49
        },
        end: {
          line: 434,
          column: 34
        }
      },
      "136": {
        start: {
          line: 435,
          column: 32
        },
        end: {
          line: 444,
          column: 33
        }
      },
      "137": {
        start: {
          line: 436,
          column: 36
        },
        end: {
          line: 440,
          column: 38
        }
      },
      "138": {
        start: {
          line: 443,
          column: 36
        },
        end: {
          line: 443,
          column: 124
        }
      },
      "139": {
        start: {
          line: 447,
          column: 32
        },
        end: {
          line: 447,
          column: 111
        }
      },
      "140": {
        start: {
          line: 457,
          column: 28
        },
        end: {
          line: 476,
          column: 29
        }
      },
      "141": {
        start: {
          line: 458,
          column: 49
        },
        end: {
          line: 460,
          column: 34
        }
      },
      "142": {
        start: {
          line: 461,
          column: 32
        },
        end: {
          line: 472,
          column: 33
        }
      },
      "143": {
        start: {
          line: 462,
          column: 36
        },
        end: {
          line: 468,
          column: 38
        }
      },
      "144": {
        start: {
          line: 471,
          column: 36
        },
        end: {
          line: 471,
          column: 109
        }
      },
      "145": {
        start: {
          line: 475,
          column: 32
        },
        end: {
          line: 475,
          column: 115
        }
      },
      "146": {
        start: {
          line: 485,
          column: 28
        },
        end: {
          line: 502,
          column: 29
        }
      },
      "147": {
        start: {
          line: 486,
          column: 49
        },
        end: {
          line: 488,
          column: 34
        }
      },
      "148": {
        start: {
          line: 489,
          column: 32
        },
        end: {
          line: 498,
          column: 33
        }
      },
      "149": {
        start: {
          line: 490,
          column: 36
        },
        end: {
          line: 494,
          column: 38
        }
      },
      "150": {
        start: {
          line: 497,
          column: 36
        },
        end: {
          line: 497,
          column: 120
        }
      },
      "151": {
        start: {
          line: 501,
          column: 32
        },
        end: {
          line: 501,
          column: 113
        }
      },
      "152": {
        start: {
          line: 518,
          column: 28
        },
        end: {
          line: 533,
          column: 29
        }
      },
      "153": {
        start: {
          line: 520,
          column: 49
        },
        end: {
          line: 521,
          column: 106
        }
      },
      "154": {
        start: {
          line: 520,
          column: 80
        },
        end: {
          line: 521,
          column: 105
        }
      },
      "155": {
        start: {
          line: 521,
          column: 53
        },
        end: {
          line: 521,
          column: 103
        }
      },
      "156": {
        start: {
          line: 522,
          column: 50
        },
        end: {
          line: 522,
          column: 77
        }
      },
      "157": {
        start: {
          line: 523,
          column: 52
        },
        end: {
          line: 523,
          column: 148
        }
      },
      "158": {
        start: {
          line: 523,
          column: 72
        },
        end: {
          line: 523,
          column: 147
        }
      },
      "159": {
        start: {
          line: 524,
          column: 32
        },
        end: {
          line: 529,
          column: 33
        }
      },
      "160": {
        start: {
          line: 525,
          column: 36
        },
        end: {
          line: 525,
          column: 98
        }
      },
      "161": {
        start: {
          line: 528,
          column: 36
        },
        end: {
          line: 528,
          column: 110
        }
      },
      "162": {
        start: {
          line: 532,
          column: 32
        },
        end: {
          line: 532,
          column: 113
        }
      },
      "163": {
        start: {
          line: 542,
          column: 28
        },
        end: {
          line: 560,
          column: 29
        }
      },
      "164": {
        start: {
          line: 544,
          column: 49
        },
        end: {
          line: 550,
          column: 34
        }
      },
      "165": {
        start: {
          line: 549,
          column: 58
        },
        end: {
          line: 549,
          column: 62
        }
      },
      "166": {
        start: {
          line: 551,
          column: 32
        },
        end: {
          line: 556,
          column: 33
        }
      },
      "167": {
        start: {
          line: 552,
          column: 36
        },
        end: {
          line: 552,
          column: 101
        }
      },
      "168": {
        start: {
          line: 555,
          column: 36
        },
        end: {
          line: 555,
          column: 111
        }
      },
      "169": {
        start: {
          line: 559,
          column: 32
        },
        end: {
          line: 559,
          column: 116
        }
      },
      "170": {
        start: {
          line: 576,
          column: 28
        },
        end: {
          line: 602,
          column: 29
        }
      },
      "171": {
        start: {
          line: 577,
          column: 49
        },
        end: {
          line: 577,
          column: 51
        }
      },
      "172": {
        start: {
          line: 578,
          column: 54
        },
        end: {
          line: 578,
          column: 56
        }
      },
      "173": {
        start: {
          line: 579,
          column: 32
        },
        end: {
          line: 583,
          column: 33
        }
      },
      "174": {
        start: {
          line: 579,
          column: 45
        },
        end: {
          line: 579,
          column: 46
        }
      },
      "175": {
        start: {
          line: 580,
          column: 54
        },
        end: {
          line: 580,
          column: 64
        }
      },
      "176": {
        start: {
          line: 581,
          column: 36
        },
        end: {
          line: 581,
          column: 114
        }
      },
      "177": {
        start: {
          line: 582,
          column: 36
        },
        end: {
          line: 582,
          column: 79
        }
      },
      "178": {
        start: {
          line: 584,
          column: 56
        },
        end: {
          line: 584,
          column: 119
        }
      },
      "179": {
        start: {
          line: 584,
          column: 87
        },
        end: {
          line: 584,
          column: 92
        }
      },
      "180": {
        start: {
          line: 585,
          column: 56
        },
        end: {
          line: 585,
          column: 82
        }
      },
      "181": {
        start: {
          line: 586,
          column: 32
        },
        end: {
          line: 598,
          column: 33
        }
      },
      "182": {
        start: {
          line: 587,
          column: 36
        },
        end: {
          line: 591,
          column: 38
        }
      },
      "183": {
        start: {
          line: 594,
          column: 36
        },
        end: {
          line: 597,
          column: 38
        }
      },
      "184": {
        start: {
          line: 601,
          column: 32
        },
        end: {
          line: 601,
          column: 113
        }
      },
      "185": {
        start: {
          line: 611,
          column: 28
        },
        end: {
          line: 636,
          column: 29
        }
      },
      "186": {
        start: {
          line: 612,
          column: 59
        },
        end: {
          line: 612,
          column: 61
        }
      },
      "187": {
        start: {
          line: 613,
          column: 49
        },
        end: {
          line: 614,
          column: 80
        }
      },
      "188": {
        start: {
          line: 613,
          column: 96
        },
        end: {
          line: 614,
          column: 79
        }
      },
      "189": {
        start: {
          line: 614,
          column: 53
        },
        end: {
          line: 614,
          column: 77
        }
      },
      "190": {
        start: {
          line: 615,
          column: 50
        },
        end: {
          line: 615,
          column: 60
        }
      },
      "191": {
        start: {
          line: 616,
          column: 50
        },
        end: {
          line: 616,
          column: 77
        }
      },
      "192": {
        start: {
          line: 617,
          column: 49
        },
        end: {
          line: 617,
          column: 71
        }
      },
      "193": {
        start: {
          line: 618,
          column: 51
        },
        end: {
          line: 618,
          column: 89
        }
      },
      "194": {
        start: {
          line: 618,
          column: 73
        },
        end: {
          line: 618,
          column: 81
        }
      },
      "195": {
        start: {
          line: 619,
          column: 52
        },
        end: {
          line: 619,
          column: 91
        }
      },
      "196": {
        start: {
          line: 620,
          column: 32
        },
        end: {
          line: 632,
          column: 33
        }
      },
      "197": {
        start: {
          line: 621,
          column: 36
        },
        end: {
          line: 625,
          column: 38
        }
      },
      "198": {
        start: {
          line: 628,
          column: 36
        },
        end: {
          line: 631,
          column: 38
        }
      },
      "199": {
        start: {
          line: 635,
          column: 32
        },
        end: {
          line: 635,
          column: 119
        }
      },
      "200": {
        start: {
          line: 647,
          column: 8
        },
        end: {
          line: 649,
          column: 9
        }
      },
      "201": {
        start: {
          line: 648,
          column: 12
        },
        end: {
          line: 648,
          column: 19
        }
      },
      "202": {
        start: {
          line: 650,
          column: 8
        },
        end: {
          line: 650,
          column: 61
        }
      },
      "203": {
        start: {
          line: 651,
          column: 8
        },
        end: {
          line: 676,
          column: 9
        }
      },
      "204": {
        start: {
          line: 653,
          column: 12
        },
        end: {
          line: 659,
          column: 13
        }
      },
      "205": {
        start: {
          line: 654,
          column: 16
        },
        end: {
          line: 654,
          column: 81
        }
      },
      "206": {
        start: {
          line: 655,
          column: 16
        },
        end: {
          line: 655,
          column: 83
        }
      },
      "207": {
        start: {
          line: 661,
          column: 12
        },
        end: {
          line: 661,
          column: 108
        }
      },
      "208": {
        start: {
          line: 663,
          column: 12
        },
        end: {
          line: 663,
          column: 69
        }
      },
      "209": {
        start: {
          line: 663,
          column: 41
        },
        end: {
          line: 663,
          column: 67
        }
      },
      "210": {
        start: {
          line: 665,
          column: 30
        },
        end: {
          line: 665,
          column: 59
        }
      },
      "211": {
        start: {
          line: 666,
          column: 37
        },
        end: {
          line: 666,
          column: 89
        }
      },
      "212": {
        start: {
          line: 666,
          column: 59
        },
        end: {
          line: 666,
          column: 88
        }
      },
      "213": {
        start: {
          line: 667,
          column: 12
        },
        end: {
          line: 669,
          column: 13
        }
      },
      "214": {
        start: {
          line: 668,
          column: 16
        },
        end: {
          line: 668,
          column: 68
        }
      },
      "215": {
        start: {
          line: 670,
          column: 12
        },
        end: {
          line: 670,
          column: 40
        }
      },
      "216": {
        start: {
          line: 671,
          column: 12
        },
        end: {
          line: 671,
          column: 87
        }
      },
      "217": {
        start: {
          line: 674,
          column: 12
        },
        end: {
          line: 674,
          column: 77
        }
      },
      "218": {
        start: {
          line: 675,
          column: 12
        },
        end: {
          line: 675,
          column: 24
        }
      },
      "219": {
        start: {
          line: 682,
          column: 8
        },
        end: {
          line: 684,
          column: 9
        }
      },
      "220": {
        start: {
          line: 683,
          column: 12
        },
        end: {
          line: 683,
          column: 19
        }
      },
      "221": {
        start: {
          line: 685,
          column: 8
        },
        end: {
          line: 685,
          column: 61
        }
      },
      "222": {
        start: {
          line: 686,
          column: 8
        },
        end: {
          line: 694,
          column: 9
        }
      },
      "223": {
        start: {
          line: 687,
          column: 12
        },
        end: {
          line: 687,
          column: 77
        }
      },
      "224": {
        start: {
          line: 688,
          column: 12
        },
        end: {
          line: 688,
          column: 79
        }
      },
      "225": {
        start: {
          line: 689,
          column: 12
        },
        end: {
          line: 689,
          column: 41
        }
      },
      "226": {
        start: {
          line: 690,
          column: 12
        },
        end: {
          line: 690,
          column: 60
        }
      },
      "227": {
        start: {
          line: 693,
          column: 12
        },
        end: {
          line: 693,
          column: 77
        }
      },
      "228": {
        start: {
          line: 700,
          column: 8
        },
        end: {
          line: 706,
          column: 9
        }
      },
      "229": {
        start: {
          line: 701,
          column: 28
        },
        end: {
          line: 701,
          column: 93
        }
      },
      "230": {
        start: {
          line: 702,
          column: 12
        },
        end: {
          line: 702,
          column: 39
        }
      },
      "231": {
        start: {
          line: 705,
          column: 12
        },
        end: {
          line: 705,
          column: 22
        }
      },
      "232": {
        start: {
          line: 712,
          column: 8
        },
        end: {
          line: 714,
          column: 11
        }
      },
      "233": {
        start: {
          line: 713,
          column: 12
        },
        end: {
          line: 713,
          column: 73
        }
      },
      "234": {
        start: {
          line: 713,
          column: 29
        },
        end: {
          line: 713,
          column: 62
        }
      },
      "235": {
        start: {
          line: 720,
          column: 26
        },
        end: {
          line: 720,
          column: 78
        }
      },
      "236": {
        start: {
          line: 721,
          column: 27
        },
        end: {
          line: 721,
          column: 98
        }
      },
      "237": {
        start: {
          line: 722,
          column: 8
        },
        end: {
          line: 722,
          column: 77
        }
      },
      "238": {
        start: {
          line: 723,
          column: 8
        },
        end: {
          line: 723,
          column: 72
        }
      },
      "239": {
        start: {
          line: 729,
          column: 8
        },
        end: {
          line: 729,
          column: 61
        }
      },
      "240": {
        start: {
          line: 730,
          column: 8
        },
        end: {
          line: 730,
          column: 45
        }
      },
      "241": {
        start: {
          line: 731,
          column: 8
        },
        end: {
          line: 731,
          column: 67
        }
      },
      "242": {
        start: {
          line: 732,
          column: 8
        },
        end: {
          line: 732,
          column: 81
        }
      },
      "243": {
        start: {
          line: 733,
          column: 8
        },
        end: {
          line: 733,
          column: 69
        }
      },
      "244": {
        start: {
          line: 734,
          column: 8
        },
        end: {
          line: 734,
          column: 67
        }
      },
      "245": {
        start: {
          line: 735,
          column: 8
        },
        end: {
          line: 735,
          column: 67
        }
      },
      "246": {
        start: {
          line: 736,
          column: 8
        },
        end: {
          line: 736,
          column: 70
        }
      },
      "247": {
        start: {
          line: 737,
          column: 8
        },
        end: {
          line: 737,
          column: 87
        }
      },
      "248": {
        start: {
          line: 738,
          column: 8
        },
        end: {
          line: 738,
          column: 86
        }
      },
      "249": {
        start: {
          line: 739,
          column: 8
        },
        end: {
          line: 744,
          column: 9
        }
      },
      "250": {
        start: {
          line: 740,
          column: 12
        },
        end: {
          line: 740,
          column: 92
        }
      },
      "251": {
        start: {
          line: 743,
          column: 12
        },
        end: {
          line: 743,
          column: 91
        }
      },
      "252": {
        start: {
          line: 750,
          column: 22
        },
        end: {
          line: 750,
          column: 69
        }
      },
      "253": {
        start: {
          line: 750,
          column: 48
        },
        end: {
          line: 750,
          column: 68
        }
      },
      "254": {
        start: {
          line: 751,
          column: 8
        },
        end: {
          line: 753,
          column: 9
        }
      },
      "255": {
        start: {
          line: 752,
          column: 12
        },
        end: {
          line: 752,
          column: 66
        }
      },
      "256": {
        start: {
          line: 754,
          column: 8
        },
        end: {
          line: 754,
          column: 73
        }
      },
      "257": {
        start: {
          line: 756,
          column: 8
        },
        end: {
          line: 758,
          column: 9
        }
      },
      "258": {
        start: {
          line: 757,
          column: 12
        },
        end: {
          line: 757,
          column: 43
        }
      },
      "259": {
        start: {
          line: 759,
          column: 24
        },
        end: {
          line: 759,
          column: 26
        }
      },
      "260": {
        start: {
          line: 761,
          column: 8
        },
        end: {
          line: 763,
          column: 9
        }
      },
      "261": {
        start: {
          line: 762,
          column: 12
        },
        end: {
          line: 762,
          column: 32
        }
      },
      "262": {
        start: {
          line: 764,
          column: 8
        },
        end: {
          line: 804,
          column: 9
        }
      },
      "263": {
        start: {
          line: 766,
          column: 12
        },
        end: {
          line: 797,
          column: 13
        }
      },
      "264": {
        start: {
          line: 767,
          column: 38
        },
        end: {
          line: 767,
          column: 48
        }
      },
      "265": {
        start: {
          line: 768,
          column: 16
        },
        end: {
          line: 796,
          column: 17
        }
      },
      "266": {
        start: {
          line: 769,
          column: 39
        },
        end: {
          line: 772,
          column: 22
        }
      },
      "267": {
        start: {
          line: 773,
          column: 37
        },
        end: {
          line: 773,
          column: 63
        }
      },
      "268": {
        start: {
          line: 774,
          column: 35
        },
        end: {
          line: 774,
          column: 71
        }
      },
      "269": {
        start: {
          line: 775,
          column: 20
        },
        end: {
          line: 783,
          column: 23
        }
      },
      "270": {
        start: {
          line: 786,
          column: 37
        },
        end: {
          line: 786,
          column: 63
        }
      },
      "271": {
        start: {
          line: 787,
          column: 20
        },
        end: {
          line: 795,
          column: 23
        }
      },
      "272": {
        start: {
          line: 801,
          column: 12
        },
        end: {
          line: 803,
          column: 13
        }
      },
      "273": {
        start: {
          line: 802,
          column: 16
        },
        end: {
          line: 802,
          column: 39
        }
      },
      "274": {
        start: {
          line: 805,
          column: 8
        },
        end: {
          line: 805,
          column: 23
        }
      },
      "275": {
        start: {
          line: 811,
          column: 8
        },
        end: {
          line: 815,
          column: 12
        }
      },
      "276": {
        start: {
          line: 811,
          column: 45
        },
        end: {
          line: 815,
          column: 9
        }
      },
      "277": {
        start: {
          line: 818,
          column: 0
        },
        end: {
          line: 818,
          column: 38
        }
      },
      "278": {
        start: {
          line: 820,
          column: 0
        },
        end: {
          line: 820,
          column: 44
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 10,
            column: 56
          },
          end: {
            line: 10,
            column: 57
          }
        },
        loc: {
          start: {
            line: 10,
            column: 71
          },
          end: {
            line: 12,
            column: 1
          }
        },
        line: 10
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        },
        loc: {
          start: {
            line: 25,
            column: 18
          },
          end: {
            line: 27,
            column: 5
          }
        },
        line: 25
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 31,
            column: 4
          },
          end: {
            line: 31,
            column: 5
          }
        },
        loc: {
          start: {
            line: 31,
            column: 24
          },
          end: {
            line: 150,
            column: 5
          }
        },
        line: 31
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 154,
            column: 4
          },
          end: {
            line: 154,
            column: 5
          }
        },
        loc: {
          start: {
            line: 154,
            column: 27
          },
          end: {
            line: 642,
            column: 5
          }
        },
        line: 154
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 166,
            column: 30
          },
          end: {
            line: 166,
            column: 31
          }
        },
        loc: {
          start: {
            line: 166,
            column: 42
          },
          end: {
            line: 184,
            column: 25
          }
        },
        line: 166
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 169,
            column: 70
          },
          end: {
            line: 169,
            column: 71
          }
        },
        loc: {
          start: {
            line: 169,
            column: 75
          },
          end: {
            line: 169,
            column: 104
          }
        },
        line: 169
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 177,
            column: 68
          },
          end: {
            line: 177,
            column: 69
          }
        },
        loc: {
          start: {
            line: 177,
            column: 74
          },
          end: {
            line: 181,
            column: 37
          }
        },
        line: 177
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 191,
            column: 30
          },
          end: {
            line: 191,
            column: 31
          }
        },
        loc: {
          start: {
            line: 191,
            column: 42
          },
          end: {
            line: 206,
            column: 25
          }
        },
        line: 191
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 213,
            column: 30
          },
          end: {
            line: 213,
            column: 31
          }
        },
        loc: {
          start: {
            line: 213,
            column: 42
          },
          end: {
            line: 232,
            column: 25
          }
        },
        line: 213
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 246,
            column: 30
          },
          end: {
            line: 246,
            column: 31
          }
        },
        loc: {
          start: {
            line: 246,
            column: 42
          },
          end: {
            line: 267,
            column: 25
          }
        },
        line: 246
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 274,
            column: 30
          },
          end: {
            line: 274,
            column: 31
          }
        },
        loc: {
          start: {
            line: 274,
            column: 42
          },
          end: {
            line: 296,
            column: 25
          }
        },
        line: 274
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 303,
            column: 30
          },
          end: {
            line: 303,
            column: 31
          }
        },
        loc: {
          start: {
            line: 303,
            column: 42
          },
          end: {
            line: 322,
            column: 25
          }
        },
        line: 303
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 329,
            column: 30
          },
          end: {
            line: 329,
            column: 31
          }
        },
        loc: {
          start: {
            line: 329,
            column: 42
          },
          end: {
            line: 353,
            column: 25
          }
        },
        line: 329
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 339,
            column: 78
          },
          end: {
            line: 339,
            column: 79
          }
        },
        loc: {
          start: {
            line: 339,
            column: 88
          },
          end: {
            line: 339,
            column: 113
          }
        },
        line: 339
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 367,
            column: 30
          },
          end: {
            line: 367,
            column: 31
          }
        },
        loc: {
          start: {
            line: 367,
            column: 42
          },
          end: {
            line: 382,
            column: 25
          }
        },
        line: 367
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 389,
            column: 30
          },
          end: {
            line: 389,
            column: 31
          }
        },
        loc: {
          start: {
            line: 389,
            column: 42
          },
          end: {
            line: 415,
            column: 25
          }
        },
        line: 389
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 429,
            column: 30
          },
          end: {
            line: 429,
            column: 31
          }
        },
        loc: {
          start: {
            line: 429,
            column: 42
          },
          end: {
            line: 449,
            column: 25
          }
        },
        line: 429
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 456,
            column: 30
          },
          end: {
            line: 456,
            column: 31
          }
        },
        loc: {
          start: {
            line: 456,
            column: 42
          },
          end: {
            line: 477,
            column: 25
          }
        },
        line: 456
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 484,
            column: 30
          },
          end: {
            line: 484,
            column: 31
          }
        },
        loc: {
          start: {
            line: 484,
            column: 42
          },
          end: {
            line: 503,
            column: 25
          }
        },
        line: 484
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 517,
            column: 30
          },
          end: {
            line: 517,
            column: 31
          }
        },
        loc: {
          start: {
            line: 517,
            column: 42
          },
          end: {
            line: 534,
            column: 25
          }
        },
        line: 517
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 520,
            column: 74
          },
          end: {
            line: 520,
            column: 75
          }
        },
        loc: {
          start: {
            line: 520,
            column: 80
          },
          end: {
            line: 521,
            column: 105
          }
        },
        line: 520
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 521,
            column: 43
          },
          end: {
            line: 521,
            column: 44
          }
        },
        loc: {
          start: {
            line: 521,
            column: 53
          },
          end: {
            line: 521,
            column: 103
          }
        },
        line: 521
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 523,
            column: 67
          },
          end: {
            line: 523,
            column: 68
          }
        },
        loc: {
          start: {
            line: 523,
            column: 72
          },
          end: {
            line: 523,
            column: 147
          }
        },
        line: 523
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 541,
            column: 30
          },
          end: {
            line: 541,
            column: 31
          }
        },
        loc: {
          start: {
            line: 541,
            column: 42
          },
          end: {
            line: 561,
            column: 25
          }
        },
        line: 541
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 549,
            column: 52
          },
          end: {
            line: 549,
            column: 53
          }
        },
        loc: {
          start: {
            line: 549,
            column: 58
          },
          end: {
            line: 549,
            column: 62
          }
        },
        line: 549
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 575,
            column: 30
          },
          end: {
            line: 575,
            column: 31
          }
        },
        loc: {
          start: {
            line: 575,
            column: 42
          },
          end: {
            line: 603,
            column: 25
          }
        },
        line: 575
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 584,
            column: 77
          },
          end: {
            line: 584,
            column: 78
          }
        },
        loc: {
          start: {
            line: 584,
            column: 87
          },
          end: {
            line: 584,
            column: 92
          }
        },
        line: 584
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 610,
            column: 30
          },
          end: {
            line: 610,
            column: 31
          }
        },
        loc: {
          start: {
            line: 610,
            column: 42
          },
          end: {
            line: 637,
            column: 25
          }
        },
        line: 610
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 613,
            column: 90
          },
          end: {
            line: 613,
            column: 91
          }
        },
        loc: {
          start: {
            line: 613,
            column: 96
          },
          end: {
            line: 614,
            column: 79
          }
        },
        line: 613
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 614,
            column: 43
          },
          end: {
            line: 614,
            column: 44
          }
        },
        loc: {
          start: {
            line: 614,
            column: 53
          },
          end: {
            line: 614,
            column: 77
          }
        },
        line: 614
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 618,
            column: 68
          },
          end: {
            line: 618,
            column: 69
          }
        },
        loc: {
          start: {
            line: 618,
            column: 73
          },
          end: {
            line: 618,
            column: 81
          }
        },
        line: 618
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 646,
            column: 4
          },
          end: {
            line: 646,
            column: 5
          }
        },
        loc: {
          start: {
            line: 646,
            column: 30
          },
          end: {
            line: 677,
            column: 5
          }
        },
        line: 646
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 663,
            column: 30
          },
          end: {
            line: 663,
            column: 31
          }
        },
        loc: {
          start: {
            line: 663,
            column: 41
          },
          end: {
            line: 663,
            column: 67
          }
        },
        line: 663
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 666,
            column: 54
          },
          end: {
            line: 666,
            column: 55
          }
        },
        loc: {
          start: {
            line: 666,
            column: 59
          },
          end: {
            line: 666,
            column: 88
          }
        },
        line: 666
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 681,
            column: 4
          },
          end: {
            line: 681,
            column: 5
          }
        },
        loc: {
          start: {
            line: 681,
            column: 29
          },
          end: {
            line: 695,
            column: 5
          }
        },
        line: 681
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 699,
            column: 4
          },
          end: {
            line: 699,
            column: 5
          }
        },
        loc: {
          start: {
            line: 699,
            column: 29
          },
          end: {
            line: 707,
            column: 5
          }
        },
        line: 699
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 711,
            column: 4
          },
          end: {
            line: 711,
            column: 5
          }
        },
        loc: {
          start: {
            line: 711,
            column: 34
          },
          end: {
            line: 715,
            column: 5
          }
        },
        line: 711
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 712,
            column: 27
          },
          end: {
            line: 712,
            column: 28
          }
        },
        loc: {
          start: {
            line: 712,
            column: 42
          },
          end: {
            line: 714,
            column: 9
          }
        },
        line: 712
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 713,
            column: 23
          },
          end: {
            line: 713,
            column: 24
          }
        },
        loc: {
          start: {
            line: 713,
            column: 29
          },
          end: {
            line: 713,
            column: 62
          }
        },
        line: 713
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 719,
            column: 4
          },
          end: {
            line: 719,
            column: 5
          }
        },
        loc: {
          start: {
            line: 719,
            column: 32
          },
          end: {
            line: 724,
            column: 5
          }
        },
        line: 719
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 728,
            column: 4
          },
          end: {
            line: 728,
            column: 5
          }
        },
        loc: {
          start: {
            line: 728,
            column: 26
          },
          end: {
            line: 745,
            column: 5
          }
        },
        line: 728
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 749,
            column: 4
          },
          end: {
            line: 749,
            column: 5
          }
        },
        loc: {
          start: {
            line: 749,
            column: 34
          },
          end: {
            line: 806,
            column: 5
          }
        },
        line: 749
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 750,
            column: 43
          },
          end: {
            line: 750,
            column: 44
          }
        },
        loc: {
          start: {
            line: 750,
            column: 48
          },
          end: {
            line: 750,
            column: 68
          }
        },
        line: 750
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 810,
            column: 4
          },
          end: {
            line: 810,
            column: 5
          }
        },
        loc: {
          start: {
            line: 810,
            column: 20
          },
          end: {
            line: 816,
            column: 5
          }
        },
        line: 810
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 811,
            column: 35
          },
          end: {
            line: 811,
            column: 36
          }
        },
        loc: {
          start: {
            line: 811,
            column: 45
          },
          end: {
            line: 815,
            column: 9
          }
        },
        line: 811
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 10,
            column: 22
          },
          end: {
            line: 12,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 10,
            column: 23
          },
          end: {
            line: 10,
            column: 27
          }
        }, {
          start: {
            line: 10,
            column: 31
          },
          end: {
            line: 10,
            column: 51
          }
        }, {
          start: {
            line: 10,
            column: 56
          },
          end: {
            line: 12,
            column: 1
          }
        }],
        line: 10
      },
      "1": {
        loc: {
          start: {
            line: 11,
            column: 11
          },
          end: {
            line: 11,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 11,
            column: 37
          },
          end: {
            line: 11,
            column: 40
          }
        }, {
          start: {
            line: 11,
            column: 43
          },
          end: {
            line: 11,
            column: 61
          }
        }],
        line: 11
      },
      "2": {
        loc: {
          start: {
            line: 11,
            column: 12
          },
          end: {
            line: 11,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 11,
            column: 12
          },
          end: {
            line: 11,
            column: 15
          }
        }, {
          start: {
            line: 11,
            column: 19
          },
          end: {
            line: 11,
            column: 33
          }
        }],
        line: 11
      },
      "3": {
        loc: {
          start: {
            line: 45,
            column: 16
          },
          end: {
            line: 48,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 45,
            column: 16
          },
          end: {
            line: 48,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 45
      },
      "4": {
        loc: {
          start: {
            line: 51,
            column: 16
          },
          end: {
            line: 59,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 51,
            column: 16
          },
          end: {
            line: 59,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 51
      },
      "5": {
        loc: {
          start: {
            line: 71,
            column: 39
          },
          end: {
            line: 71,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 71,
            column: 60
          },
          end: {
            line: 71,
            column: 66
          }
        }, {
          start: {
            line: 71,
            column: 69
          },
          end: {
            line: 71,
            column: 75
          }
        }],
        line: 71
      },
      "6": {
        loc: {
          start: {
            line: 82,
            column: 24
          },
          end: {
            line: 92,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 82,
            column: 24
          },
          end: {
            line: 92,
            column: 25
          }
        }, {
          start: {
            line: 86,
            column: 29
          },
          end: {
            line: 92,
            column: 25
          }
        }],
        line: 82
      },
      "7": {
        loc: {
          start: {
            line: 88,
            column: 28
          },
          end: {
            line: 90,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 88,
            column: 28
          },
          end: {
            line: 90,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 88
      },
      "8": {
        loc: {
          start: {
            line: 102,
            column: 37
          },
          end: {
            line: 102,
            column: 98
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 102,
            column: 49
          },
          end: {
            line: 102,
            column: 65
          }
        }, {
          start: {
            line: 102,
            column: 68
          },
          end: {
            line: 102,
            column: 98
          }
        }],
        line: 102
      },
      "9": {
        loc: {
          start: {
            line: 108,
            column: 24
          },
          end: {
            line: 110,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 108,
            column: 24
          },
          end: {
            line: 110,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 108
      },
      "10": {
        loc: {
          start: {
            line: 115,
            column: 16
          },
          end: {
            line: 122,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 115,
            column: 16
          },
          end: {
            line: 122,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 115
      },
      "11": {
        loc: {
          start: {
            line: 133,
            column: 25
          },
          end: {
            line: 133,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 133,
            column: 25
          },
          end: {
            line: 133,
            column: 45
          }
        }, {
          start: {
            line: 133,
            column: 49
          },
          end: {
            line: 133,
            column: 55
          }
        }],
        line: 133
      },
      "12": {
        loc: {
          start: {
            line: 170,
            column: 28
          },
          end: {
            line: 172,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 170,
            column: 28
          },
          end: {
            line: 172,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 170
      },
      "13": {
        loc: {
          start: {
            line: 196,
            column: 32
          },
          end: {
            line: 201,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 196,
            column: 32
          },
          end: {
            line: 201,
            column: 33
          }
        }, {
          start: {
            line: 199,
            column: 37
          },
          end: {
            line: 201,
            column: 33
          }
        }],
        line: 196
      },
      "14": {
        loc: {
          start: {
            line: 196,
            column: 36
          },
          end: {
            line: 196,
            column: 97
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 196,
            column: 36
          },
          end: {
            line: 196,
            column: 59
          }
        }, {
          start: {
            line: 196,
            column: 63
          },
          end: {
            line: 196,
            column: 97
          }
        }],
        line: 196
      },
      "15": {
        loc: {
          start: {
            line: 218,
            column: 32
          },
          end: {
            line: 227,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 218,
            column: 32
          },
          end: {
            line: 227,
            column: 33
          }
        }, {
          start: {
            line: 225,
            column: 37
          },
          end: {
            line: 227,
            column: 33
          }
        }],
        line: 218
      },
      "16": {
        loc: {
          start: {
            line: 218,
            column: 36
          },
          end: {
            line: 218,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 218,
            column: 36
          },
          end: {
            line: 218,
            column: 59
          }
        }, {
          start: {
            line: 218,
            column: 63
          },
          end: {
            line: 218,
            column: 86
          }
        }],
        line: 218
      },
      "17": {
        loc: {
          start: {
            line: 253,
            column: 32
          },
          end: {
            line: 262,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 253,
            column: 32
          },
          end: {
            line: 262,
            column: 33
          }
        }, {
          start: {
            line: 260,
            column: 37
          },
          end: {
            line: 262,
            column: 33
          }
        }],
        line: 253
      },
      "18": {
        loc: {
          start: {
            line: 279,
            column: 32
          },
          end: {
            line: 291,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 279,
            column: 32
          },
          end: {
            line: 291,
            column: 33
          }
        }, {
          start: {
            line: 289,
            column: 37
          },
          end: {
            line: 291,
            column: 33
          }
        }],
        line: 279
      },
      "19": {
        loc: {
          start: {
            line: 279,
            column: 36
          },
          end: {
            line: 279,
            column: 104
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 279,
            column: 36
          },
          end: {
            line: 279,
            column: 59
          }
        }, {
          start: {
            line: 279,
            column: 63
          },
          end: {
            line: 279,
            column: 80
          }
        }, {
          start: {
            line: 279,
            column: 84
          },
          end: {
            line: 279,
            column: 104
          }
        }],
        line: 279
      },
      "20": {
        loc: {
          start: {
            line: 308,
            column: 32
          },
          end: {
            line: 317,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 308,
            column: 32
          },
          end: {
            line: 317,
            column: 33
          }
        }, {
          start: {
            line: 315,
            column: 37
          },
          end: {
            line: 317,
            column: 33
          }
        }],
        line: 308
      },
      "21": {
        loc: {
          start: {
            line: 340,
            column: 32
          },
          end: {
            line: 348,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 340,
            column: 32
          },
          end: {
            line: 348,
            column: 33
          }
        }, {
          start: {
            line: 343,
            column: 37
          },
          end: {
            line: 348,
            column: 33
          }
        }],
        line: 340
      },
      "22": {
        loc: {
          start: {
            line: 372,
            column: 32
          },
          end: {
            line: 377,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 372,
            column: 32
          },
          end: {
            line: 377,
            column: 33
          }
        }, {
          start: {
            line: 375,
            column: 37
          },
          end: {
            line: 377,
            column: 33
          }
        }],
        line: 372
      },
      "23": {
        loc: {
          start: {
            line: 435,
            column: 32
          },
          end: {
            line: 444,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 435,
            column: 32
          },
          end: {
            line: 444,
            column: 33
          }
        }, {
          start: {
            line: 442,
            column: 37
          },
          end: {
            line: 444,
            column: 33
          }
        }],
        line: 435
      },
      "24": {
        loc: {
          start: {
            line: 461,
            column: 32
          },
          end: {
            line: 472,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 461,
            column: 32
          },
          end: {
            line: 472,
            column: 33
          }
        }, {
          start: {
            line: 470,
            column: 37
          },
          end: {
            line: 472,
            column: 33
          }
        }],
        line: 461
      },
      "25": {
        loc: {
          start: {
            line: 461,
            column: 36
          },
          end: {
            line: 461,
            column: 87
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 461,
            column: 36
          },
          end: {
            line: 461,
            column: 59
          }
        }, {
          start: {
            line: 461,
            column: 63
          },
          end: {
            line: 461,
            column: 87
          }
        }],
        line: 461
      },
      "26": {
        loc: {
          start: {
            line: 489,
            column: 32
          },
          end: {
            line: 498,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 489,
            column: 32
          },
          end: {
            line: 498,
            column: 33
          }
        }, {
          start: {
            line: 496,
            column: 37
          },
          end: {
            line: 498,
            column: 33
          }
        }],
        line: 489
      },
      "27": {
        loc: {
          start: {
            line: 521,
            column: 62
          },
          end: {
            line: 521,
            column: 101
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 521,
            column: 62
          },
          end: {
            line: 521,
            column: 84
          }
        }, {
          start: {
            line: 521,
            column: 88
          },
          end: {
            line: 521,
            column: 101
          }
        }],
        line: 521
      },
      "28": {
        loc: {
          start: {
            line: 523,
            column: 72
          },
          end: {
            line: 523,
            column: 147
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 523,
            column: 72
          },
          end: {
            line: 523,
            column: 87
          }
        }, {
          start: {
            line: 523,
            column: 92
          },
          end: {
            line: 523,
            column: 119
          }
        }, {
          start: {
            line: 523,
            column: 123
          },
          end: {
            line: 523,
            column: 146
          }
        }],
        line: 523
      },
      "29": {
        loc: {
          start: {
            line: 524,
            column: 32
          },
          end: {
            line: 529,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 524,
            column: 32
          },
          end: {
            line: 529,
            column: 33
          }
        }, {
          start: {
            line: 527,
            column: 37
          },
          end: {
            line: 529,
            column: 33
          }
        }],
        line: 524
      },
      "30": {
        loc: {
          start: {
            line: 551,
            column: 32
          },
          end: {
            line: 556,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 551,
            column: 32
          },
          end: {
            line: 556,
            column: 33
          }
        }, {
          start: {
            line: 554,
            column: 37
          },
          end: {
            line: 556,
            column: 33
          }
        }],
        line: 551
      },
      "31": {
        loc: {
          start: {
            line: 551,
            column: 36
          },
          end: {
            line: 551,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 551,
            column: 36
          },
          end: {
            line: 551,
            column: 59
          }
        }, {
          start: {
            line: 551,
            column: 63
          },
          end: {
            line: 551,
            column: 86
          }
        }],
        line: 551
      },
      "32": {
        loc: {
          start: {
            line: 586,
            column: 32
          },
          end: {
            line: 598,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 586,
            column: 32
          },
          end: {
            line: 598,
            column: 33
          }
        }, {
          start: {
            line: 593,
            column: 37
          },
          end: {
            line: 598,
            column: 33
          }
        }],
        line: 586
      },
      "33": {
        loc: {
          start: {
            line: 586,
            column: 36
          },
          end: {
            line: 586,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 586,
            column: 36
          },
          end: {
            line: 586,
            column: 58
          }
        }, {
          start: {
            line: 586,
            column: 62
          },
          end: {
            line: 586,
            column: 84
          }
        }],
        line: 586
      },
      "34": {
        loc: {
          start: {
            line: 620,
            column: 32
          },
          end: {
            line: 632,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 620,
            column: 32
          },
          end: {
            line: 632,
            column: 33
          }
        }, {
          start: {
            line: 627,
            column: 37
          },
          end: {
            line: 632,
            column: 33
          }
        }],
        line: 620
      },
      "35": {
        loc: {
          start: {
            line: 647,
            column: 8
          },
          end: {
            line: 649,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 647,
            column: 8
          },
          end: {
            line: 649,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 647
      },
      "36": {
        loc: {
          start: {
            line: 667,
            column: 12
          },
          end: {
            line: 669,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 667,
            column: 12
          },
          end: {
            line: 669,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 667
      },
      "37": {
        loc: {
          start: {
            line: 682,
            column: 8
          },
          end: {
            line: 684,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 682,
            column: 8
          },
          end: {
            line: 684,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 682
      },
      "38": {
        loc: {
          start: {
            line: 738,
            column: 49
          },
          end: {
            line: 738,
            column: 82
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 738,
            column: 70
          },
          end: {
            line: 738,
            column: 75
          }
        }, {
          start: {
            line: 738,
            column: 78
          },
          end: {
            line: 738,
            column: 82
          }
        }],
        line: 738
      },
      "39": {
        loc: {
          start: {
            line: 739,
            column: 8
          },
          end: {
            line: 744,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 739,
            column: 8
          },
          end: {
            line: 744,
            column: 9
          }
        }, {
          start: {
            line: 742,
            column: 13
          },
          end: {
            line: 744,
            column: 9
          }
        }],
        line: 739
      },
      "40": {
        loc: {
          start: {
            line: 751,
            column: 8
          },
          end: {
            line: 753,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 751,
            column: 8
          },
          end: {
            line: 753,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 751
      },
      "41": {
        loc: {
          start: {
            line: 756,
            column: 8
          },
          end: {
            line: 758,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 756,
            column: 8
          },
          end: {
            line: 758,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 756
      },
      "42": {
        loc: {
          start: {
            line: 761,
            column: 8
          },
          end: {
            line: 763,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 761,
            column: 8
          },
          end: {
            line: 763,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 761
      },
      "43": {
        loc: {
          start: {
            line: 774,
            column: 35
          },
          end: {
            line: 774,
            column: 71
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 774,
            column: 56
          },
          end: {
            line: 774,
            column: 62
          }
        }, {
          start: {
            line: 774,
            column: 65
          },
          end: {
            line: 774,
            column: 71
          }
        }],
        line: 774
      },
      "44": {
        loc: {
          start: {
            line: 792,
            column: 33
          },
          end: {
            line: 792,
            column: 117
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 792,
            column: 68
          },
          end: {
            line: 792,
            column: 84
          }
        }, {
          start: {
            line: 792,
            column: 87
          },
          end: {
            line: 792,
            column: 117
          }
        }],
        line: 792
      },
      "45": {
        loc: {
          start: {
            line: 801,
            column: 12
          },
          end: {
            line: 803,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 801,
            column: 12
          },
          end: {
            line: 803,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 801
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0,
      "261": 0,
      "262": 0,
      "263": 0,
      "264": 0,
      "265": 0,
      "266": 0,
      "267": 0,
      "268": 0,
      "269": 0,
      "270": 0,
      "271": 0,
      "272": 0,
      "273": 0,
      "274": 0,
      "275": 0,
      "276": 0,
      "277": 0,
      "278": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\deployment\\e2e-testing.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\deployment\\e2e-testing.ts"],
      sourcesContent: ["/**\r\n * =============================================================================\r\n * AI CRYPTO TRADING AGENT - END-TO-END TESTING\r\n * =============================================================================\r\n * \r\n * This module provides comprehensive end-to-end testing for the complete\r\n * AI crypto trading agent system in a production-like environment.\r\n */\r\n\r\nimport { execSync } from 'child_process';\r\nimport { existsSync, writeFileSync } from 'fs';\r\nimport { join } from 'path';\r\nimport { logger } from '../core/logger';\r\nimport axios from 'axios';\r\n\r\ninterface E2ETestResult {\r\n  name: string;\r\n  category: string;\r\n  status: 'PASS' | 'FAIL' | 'SKIP';\r\n  duration: number;\r\n  message: string;\r\n  details?: any;\r\n  critical: boolean;\r\n}\r\n\r\ninterface E2ETestSuite {\r\n  name: string;\r\n  description: string;\r\n  tests: E2ETest[];\r\n  setup?: () => Promise<void>;\r\n  teardown?: () => Promise<void>;\r\n  enabled: boolean;\r\n}\r\n\r\ninterface E2ETest {\r\n  name: string;\r\n  description: string;\r\n  critical: boolean;\r\n  timeout: number;\r\n  test: () => Promise<{ success: boolean; message: string; details?: any }>;\r\n}\r\n\r\ninterface E2EReport {\r\n  timestamp: Date;\r\n  environment: string;\r\n  duration: number;\r\n  summary: {\r\n    total: number;\r\n    passed: number;\r\n    failed: number;\r\n    skipped: number;\r\n    criticalFailed: number;\r\n  };\r\n  results: E2ETestResult[];\r\n  systemReady: boolean;\r\n}\r\n\r\nexport class E2ETestRunner {\r\n  private testSuites: E2ETestSuite[] = [];\r\n  private baseUrl: string = 'http://localhost:3001';\r\n  private dashboardUrl: string = 'http://localhost:3002';\r\n  private servicesStarted: boolean = false;\r\n\r\n  constructor() {\r\n    this.initializeTestSuites();\r\n  }\r\n\r\n  /**\r\n   * Run complete end-to-end test suite\r\n   */\r\n  async runE2ETests(): Promise<E2EReport> {\r\n    logger.info('\uD83D\uDE80 Starting end-to-end testing...');\r\n    const startTime = Date.now();\r\n\r\n    const results: E2ETestResult[] = [];\r\n    let totalTests = 0;\r\n    let passedTests = 0;\r\n    let failedTests = 0;\r\n    let skippedTests = 0;\r\n    let criticalFailures = 0;\r\n\r\n    try {\r\n      // Start services for testing\r\n      await this.startTestServices();\r\n\r\n      // Run all test suites\r\n      for (const suite of this.testSuites) {\r\n        if (!suite.enabled) {\r\n          logger.info(`\u23ED\uFE0F Skipping disabled test suite: ${suite.name}`);\r\n          continue;\r\n        }\r\n\r\n        logger.info(`\uD83E\uDDEA Running E2E test suite: ${suite.name}`);\r\n\r\n        // Run suite setup\r\n        if (suite.setup) {\r\n          try {\r\n            await suite.setup();\r\n          } catch (error) {\r\n            logger.error(`\u274C Suite setup failed: ${suite.name}`, error);\r\n            continue;\r\n          }\r\n        }\r\n\r\n        // Run tests\r\n        for (const test of suite.tests) {\r\n          totalTests++;\r\n          const testStartTime = Date.now();\r\n\r\n          try {\r\n            logger.info(`  \uD83D\uDD0D Running test: ${test.name}`);\r\n\r\n            const testResult = await Promise.race([\r\n              test.test(),\r\n              this.createTimeoutPromise(test.timeout)\r\n            ]);\r\n\r\n            const duration = Date.now() - testStartTime;\r\n            const status = testResult.success ? 'PASS' : 'FAIL';\r\n\r\n            const result: E2ETestResult = {\r\n              name: test.name,\r\n              category: suite.name,\r\n              status,\r\n              duration,\r\n              message: testResult.message,\r\n              details: testResult.details,\r\n              critical: test.critical\r\n            };\r\n\r\n            results.push(result);\r\n\r\n            if (status === 'PASS') {\r\n              passedTests++;\r\n              logger.info(`    \u2705 ${test.name} - ${testResult.message}`);\r\n            } else {\r\n              failedTests++;\r\n              if (test.critical) {\r\n                criticalFailures++;\r\n              }\r\n              logger.error(`    \u274C ${test.name} - ${testResult.message}`);\r\n            }\r\n\r\n          } catch (error) {\r\n            const duration = Date.now() - testStartTime;\r\n            const isTimeout = error.message === 'Test timeout';\r\n            \r\n            const result: E2ETestResult = {\r\n              name: test.name,\r\n              category: suite.name,\r\n              status: 'FAIL',\r\n              duration,\r\n              message: isTimeout ? 'Test timed out' : `Test error: ${error.message}`,\r\n              details: { error: error.message },\r\n              critical: test.critical\r\n            };\r\n\r\n            results.push(result);\r\n            failedTests++;\r\n            \r\n            if (test.critical) {\r\n              criticalFailures++;\r\n            }\r\n\r\n            logger.error(`    \u274C ${test.name} - ${result.message}`);\r\n          }\r\n        }\r\n\r\n        // Run suite teardown\r\n        if (suite.teardown) {\r\n          try {\r\n            await suite.teardown();\r\n          } catch (error) {\r\n            logger.error(`\u26A0\uFE0F Suite teardown failed: ${suite.name}`, error);\r\n          }\r\n        }\r\n      }\r\n\r\n    } finally {\r\n      // Stop test services\r\n      await this.stopTestServices();\r\n    }\r\n\r\n    const totalDuration = Date.now() - startTime;\r\n    const systemReady = criticalFailures === 0;\r\n\r\n    const report: E2EReport = {\r\n      timestamp: new Date(),\r\n      environment: process.env.NODE_ENV || 'test',\r\n      duration: totalDuration,\r\n      summary: {\r\n        total: totalTests,\r\n        passed: passedTests,\r\n        failed: failedTests,\r\n        skipped: skippedTests,\r\n        criticalFailed: criticalFailures\r\n      },\r\n      results,\r\n      systemReady\r\n    };\r\n\r\n    // Save test report\r\n    await this.saveE2EReport(report);\r\n\r\n    // Log summary\r\n    this.logE2ESummary(report);\r\n\r\n    return report;\r\n  }\r\n\r\n  /**\r\n   * Initialize end-to-end test suites\r\n   */\r\n  private initializeTestSuites(): void {\r\n    this.testSuites = [\r\n      {\r\n        name: 'System Startup',\r\n        description: 'Test complete system startup and initialization',\r\n        enabled: true,\r\n        tests: [\r\n          {\r\n            name: 'Service Startup',\r\n            description: 'Verify all services start successfully',\r\n            critical: true,\r\n            timeout: 60000,\r\n            test: async () => {\r\n              // Services should already be started by startTestServices\r\n              const processes = await this.getProcessStatus();\r\n              const runningProcesses = processes.filter(p => p.pm2_env.status === 'online');\r\n\r\n              if (runningProcesses.length === 0) {\r\n                return { success: false, message: 'No services are running' };\r\n              }\r\n\r\n              return { \r\n                success: true, \r\n                message: `${runningProcesses.length} services started successfully`,\r\n                details: { \r\n                  processes: runningProcesses.map(p => ({ \r\n                    name: p.name, \r\n                    status: p.pm2_env.status,\r\n                    uptime: p.pm2_env.pm_uptime \r\n                  }))\r\n                }\r\n              };\r\n            }\r\n          },\r\n          {\r\n            name: 'Database Connection',\r\n            description: 'Verify database connectivity and initialization',\r\n            critical: true,\r\n            timeout: 15000,\r\n            test: async () => {\r\n              try {\r\n                const response = await axios.get(`${this.baseUrl}/api/v1/health/database`, {\r\n                  timeout: 10000\r\n                });\r\n\r\n                if (response.status === 200 && response.data.status === 'HEALTHY') {\r\n                  return { success: true, message: 'Database connection verified' };\r\n                } else {\r\n                  return { success: false, message: 'Database health check failed' };\r\n                }\r\n              } catch (error) {\r\n                return { success: false, message: `Database connection failed: ${error.message}` };\r\n              }\r\n            }\r\n          },\r\n          {\r\n            name: 'SSH Tunnel Status',\r\n            description: 'Verify SSH tunnel is established',\r\n            critical: true,\r\n            timeout: 20000,\r\n            test: async () => {\r\n              try {\r\n                const response = await axios.get(`${this.baseUrl}/api/v1/tunnel/status`, {\r\n                  timeout: 15000\r\n                });\r\n\r\n                if (response.status === 200 && response.data.connected) {\r\n                  return { \r\n                    success: true, \r\n                    message: 'SSH tunnel is connected',\r\n                    details: response.data\r\n                  };\r\n                } else {\r\n                  return { success: false, message: 'SSH tunnel is not connected' };\r\n                }\r\n              } catch (error) {\r\n                return { success: false, message: `SSH tunnel check failed: ${error.message}` };\r\n              }\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        name: 'API Functionality',\r\n        description: 'Test all API endpoints and functionality',\r\n        enabled: true,\r\n        tests: [\r\n          {\r\n            name: 'Health Endpoint',\r\n            description: 'Test main health endpoint',\r\n            critical: true,\r\n            timeout: 10000,\r\n            test: async () => {\r\n              try {\r\n                const startTime = Date.now();\r\n                const response = await axios.get(`${this.baseUrl}/api/v1/health`, {\r\n                  timeout: 8000\r\n                });\r\n                const responseTime = Date.now() - startTime;\r\n\r\n                if (response.status === 200) {\r\n                  return { \r\n                    success: true, \r\n                    message: `Health endpoint responding (${responseTime}ms)`,\r\n                    details: { responseTime, data: response.data }\r\n                  };\r\n                } else {\r\n                  return { success: false, message: `Unexpected status code: ${response.status}` };\r\n                }\r\n              } catch (error) {\r\n                return { success: false, message: `Health endpoint failed: ${error.message}` };\r\n              }\r\n            }\r\n          },\r\n          {\r\n            name: 'System Metrics',\r\n            description: 'Test system metrics endpoint',\r\n            critical: false,\r\n            timeout: 15000,\r\n            test: async () => {\r\n              try {\r\n                const response = await axios.get(`${this.baseUrl}/api/v1/metrics/system`, {\r\n                  timeout: 10000\r\n                });\r\n\r\n                if (response.status === 200 && response.data.cpu && response.data.memory) {\r\n                  return { \r\n                    success: true, \r\n                    message: 'System metrics endpoint working',\r\n                    details: { \r\n                      cpu: response.data.cpu.usage,\r\n                      memory: response.data.memory.percentage\r\n                    }\r\n                  };\r\n                } else {\r\n                  return { success: false, message: 'Invalid system metrics response' };\r\n                }\r\n              } catch (error) {\r\n                return { success: false, message: `System metrics failed: ${error.message}` };\r\n              }\r\n            }\r\n          },\r\n          {\r\n            name: 'Trading Status',\r\n            description: 'Test trading status endpoint',\r\n            critical: false,\r\n            timeout: 10000,\r\n            test: async () => {\r\n              try {\r\n                const response = await axios.get(`${this.baseUrl}/api/v1/trading/status`, {\r\n                  timeout: 8000\r\n                });\r\n\r\n                if (response.status === 200) {\r\n                  return { \r\n                    success: true, \r\n                    message: 'Trading status endpoint working',\r\n                    details: response.data\r\n                  };\r\n                } else {\r\n                  return { success: false, message: `Trading status failed: ${response.status}` };\r\n                }\r\n              } catch (error) {\r\n                return { success: false, message: `Trading status error: ${error.message}` };\r\n              }\r\n            }\r\n          },\r\n          {\r\n            name: 'Security Headers',\r\n            description: 'Verify security headers are present',\r\n            critical: false,\r\n            timeout: 10000,\r\n            test: async () => {\r\n              try {\r\n                const response = await axios.get(`${this.baseUrl}/api/v1/health`, {\r\n                  timeout: 8000\r\n                });\r\n\r\n                const securityHeaders = [\r\n                  'x-content-type-options',\r\n                  'x-frame-options',\r\n                  'x-xss-protection'\r\n                ];\r\n\r\n                const missingHeaders = securityHeaders.filter(header => \r\n                  !response.headers[header]\r\n                );\r\n\r\n                if (missingHeaders.length === 0) {\r\n                  return { success: true, message: 'All security headers present' };\r\n                } else {\r\n                  return { \r\n                    success: false, \r\n                    message: `Missing security headers: ${missingHeaders.join(', ')}` \r\n                  };\r\n                }\r\n              } catch (error) {\r\n                return { success: false, message: `Security headers check failed: ${error.message}` };\r\n              }\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        name: 'Dashboard Functionality',\r\n        description: 'Test dashboard accessibility and functionality',\r\n        enabled: true,\r\n        tests: [\r\n          {\r\n            name: 'Dashboard Accessibility',\r\n            description: 'Verify dashboard is accessible',\r\n            critical: false,\r\n            timeout: 15000,\r\n            test: async () => {\r\n              try {\r\n                const response = await axios.get(this.dashboardUrl, {\r\n                  timeout: 10000\r\n                });\r\n\r\n                if (response.status === 200) {\r\n                  return { success: true, message: 'Dashboard is accessible' };\r\n                } else {\r\n                  return { success: false, message: `Dashboard returned status: ${response.status}` };\r\n                }\r\n              } catch (error) {\r\n                return { success: false, message: `Dashboard not accessible: ${error.message}` };\r\n              }\r\n            }\r\n          },\r\n          {\r\n            name: 'Dashboard Assets',\r\n            description: 'Verify dashboard static assets load',\r\n            critical: false,\r\n            timeout: 20000,\r\n            test: async () => {\r\n              try {\r\n                // Test common asset paths\r\n                const assetPaths = [\r\n                  '/_next/static/css',\r\n                  '/_next/static/js'\r\n                ];\r\n\r\n                let assetsLoaded = 0;\r\n                for (const path of assetPaths) {\r\n                  try {\r\n                    await axios.get(`${this.dashboardUrl}${path}`, { timeout: 5000 });\r\n                    assetsLoaded++;\r\n                  } catch {\r\n                    // Asset might not exist, which is okay\r\n                  }\r\n                }\r\n\r\n                return { \r\n                  success: true, \r\n                  message: `Dashboard assets check completed`,\r\n                  details: { assetsChecked: assetPaths.length, assetsLoaded }\r\n                };\r\n              } catch (error) {\r\n                return { success: false, message: `Dashboard assets check failed: ${error.message}` };\r\n              }\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        name: 'Data Flow',\r\n        description: 'Test data flow through the system',\r\n        enabled: true,\r\n        tests: [\r\n          {\r\n            name: 'Market Data Flow',\r\n            description: 'Test market data collection and processing',\r\n            critical: false,\r\n            timeout: 30000,\r\n            test: async () => {\r\n              try {\r\n                // Trigger market data collection\r\n                const response = await axios.post(`${this.baseUrl}/api/v1/market/collect`, {}, {\r\n                  timeout: 25000\r\n                });\r\n\r\n                if (response.status === 200) {\r\n                  return { \r\n                    success: true, \r\n                    message: 'Market data collection working',\r\n                    details: response.data\r\n                  };\r\n                } else {\r\n                  return { success: false, message: `Market data collection failed: ${response.status}` };\r\n                }\r\n              } catch (error) {\r\n                return { success: false, message: `Market data flow error: ${error.message}` };\r\n              }\r\n            }\r\n          },\r\n          {\r\n            name: 'Technical Indicators',\r\n            description: 'Test technical indicator calculations',\r\n            critical: false,\r\n            timeout: 20000,\r\n            test: async () => {\r\n              try {\r\n                const response = await axios.get(`${this.baseUrl}/api/v1/indicators/BTC_USDT`, {\r\n                  timeout: 15000\r\n                });\r\n\r\n                if (response.status === 200 && response.data.indicators) {\r\n                  return { \r\n                    success: true, \r\n                    message: 'Technical indicators working',\r\n                    details: { \r\n                      indicators: Object.keys(response.data.indicators).length \r\n                    }\r\n                  };\r\n                } else {\r\n                  return { success: false, message: 'Technical indicators not available' };\r\n                }\r\n              } catch (error) {\r\n                return { success: false, message: `Technical indicators error: ${error.message}` };\r\n              }\r\n            }\r\n          },\r\n          {\r\n            name: 'Sentiment Analysis',\r\n            description: 'Test sentiment analysis functionality',\r\n            critical: false,\r\n            timeout: 25000,\r\n            test: async () => {\r\n              try {\r\n                const response = await axios.get(`${this.baseUrl}/api/v1/sentiment/BTC`, {\r\n                  timeout: 20000\r\n                });\r\n\r\n                if (response.status === 200) {\r\n                  return { \r\n                    success: true, \r\n                    message: 'Sentiment analysis working',\r\n                    details: response.data\r\n                  };\r\n                } else {\r\n                  return { success: false, message: `Sentiment analysis failed: ${response.status}` };\r\n                }\r\n              } catch (error) {\r\n                return { success: false, message: `Sentiment analysis error: ${error.message}` };\r\n              }\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        name: 'Security Testing',\r\n        description: 'Test security measures and protections',\r\n        enabled: true,\r\n        tests: [\r\n          {\r\n            name: 'Rate Limiting',\r\n            description: 'Test API rate limiting',\r\n            critical: false,\r\n            timeout: 30000,\r\n            test: async () => {\r\n              try {\r\n                // Make multiple rapid requests to test rate limiting\r\n                const requests = Array(20).fill(null).map(() => \r\n                  axios.get(`${this.baseUrl}/api/v1/health`, { timeout: 2000 })\r\n                    .catch(error => ({ error: error.response?.status || error.message }))\r\n                );\r\n\r\n                const responses = await Promise.all(requests);\r\n                const rateLimited = responses.some(r => \r\n                  r.error === 429 || (typeof r.error === 'string' && r.error.includes('429'))\r\n                );\r\n\r\n                if (rateLimited) {\r\n                  return { success: true, message: 'Rate limiting is working' };\r\n                } else {\r\n                  return { success: false, message: 'Rate limiting may not be configured' };\r\n                }\r\n              } catch (error) {\r\n                return { success: false, message: `Rate limiting test error: ${error.message}` };\r\n              }\r\n            }\r\n          },\r\n          {\r\n            name: 'Input Validation',\r\n            description: 'Test input validation on API endpoints',\r\n            critical: false,\r\n            timeout: 15000,\r\n            test: async () => {\r\n              try {\r\n                // Test with invalid input\r\n                const response = await axios.post(`${this.baseUrl}/api/v1/trading/order`, {\r\n                  invalid: 'data',\r\n                  malicious: '<script>alert(\"xss\")</script>'\r\n                }, { \r\n                  timeout: 10000,\r\n                  validateStatus: () => true // Accept all status codes\r\n                });\r\n\r\n                if (response.status === 400 || response.status === 422) {\r\n                  return { success: true, message: 'Input validation is working' };\r\n                } else {\r\n                  return { success: false, message: 'Input validation may be insufficient' };\r\n                }\r\n              } catch (error) {\r\n                return { success: false, message: `Input validation test error: ${error.message}` };\r\n              }\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        name: 'Performance Testing',\r\n        description: 'Test system performance under load',\r\n        enabled: true,\r\n        tests: [\r\n          {\r\n            name: 'Response Time',\r\n            description: 'Test API response times',\r\n            critical: false,\r\n            timeout: 30000,\r\n            test: async () => {\r\n              try {\r\n                const requests = 10;\r\n                const responseTimes: number[] = [];\r\n\r\n                for (let i = 0; i < requests; i++) {\r\n                  const startTime = Date.now();\r\n                  await axios.get(`${this.baseUrl}/api/v1/health`, { timeout: 5000 });\r\n                  responseTimes.push(Date.now() - startTime);\r\n                }\r\n\r\n                const avgResponseTime = responseTimes.reduce((a, b) => a + b, 0) / responseTimes.length;\r\n                const maxResponseTime = Math.max(...responseTimes);\r\n\r\n                if (avgResponseTime < 1000 && maxResponseTime < 2000) {\r\n                  return { \r\n                    success: true, \r\n                    message: `Good response times (avg: ${avgResponseTime.toFixed(0)}ms)`,\r\n                    details: { average: avgResponseTime, maximum: maxResponseTime }\r\n                  };\r\n                } else {\r\n                  return { \r\n                    success: false, \r\n                    message: `Slow response times (avg: ${avgResponseTime.toFixed(0)}ms, max: ${maxResponseTime}ms)` \r\n                  };\r\n                }\r\n              } catch (error) {\r\n                return { success: false, message: `Response time test error: ${error.message}` };\r\n              }\r\n            }\r\n          },\r\n          {\r\n            name: 'Concurrent Requests',\r\n            description: 'Test handling of concurrent requests',\r\n            critical: false,\r\n            timeout: 45000,\r\n            test: async () => {\r\n              try {\r\n                const concurrentRequests = 50;\r\n                const requests = Array(concurrentRequests).fill(null).map(() => \r\n                  axios.get(`${this.baseUrl}/api/v1/health`, { timeout: 10000 })\r\n                    .catch(error => ({ error: error.message }))\r\n                );\r\n\r\n                const startTime = Date.now();\r\n                const responses = await Promise.all(requests);\r\n                const duration = Date.now() - startTime;\r\n\r\n                const successful = responses.filter(r => !r.error).length;\r\n                const successRate = (successful / concurrentRequests) * 100;\r\n\r\n                if (successRate >= 95) {\r\n                  return { \r\n                    success: true, \r\n                    message: `Handled ${successful}/${concurrentRequests} concurrent requests (${duration}ms)`,\r\n                    details: { successRate, duration, concurrent: concurrentRequests }\r\n                  };\r\n                } else {\r\n                  return { \r\n                    success: false, \r\n                    message: `Poor concurrent performance: ${successRate.toFixed(1)}% success rate` \r\n                  };\r\n                }\r\n              } catch (error) {\r\n                return { success: false, message: `Concurrent requests test error: ${error.message}` };\r\n              }\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Start test services\r\n   */\r\n  private async startTestServices(): Promise<void> {\r\n    if (this.servicesStarted) {\r\n      return;\r\n    }\r\n\r\n    logger.info('\uD83D\uDE80 Starting test services...');\r\n\r\n    try {\r\n      // Stop any existing services\r\n      try {\r\n        execSync('pm2 stop all', { stdio: 'pipe' });\r\n        execSync('pm2 delete all', { stdio: 'pipe' });\r\n      } catch {\r\n        // Ignore if no services running\r\n      }\r\n\r\n      // Start services\r\n      execSync('pm2 start ecosystem.config.js --env test', { stdio: 'inherit' });\r\n\r\n      // Wait for services to start\r\n      await new Promise(resolve => setTimeout(resolve, 10000));\r\n\r\n      // Verify services are running\r\n      const processes = await this.getProcessStatus();\r\n      const runningProcesses = processes.filter(p => p.pm2_env.status === 'online');\r\n\r\n      if (runningProcesses.length === 0) {\r\n        throw new Error('No services started successfully');\r\n      }\r\n\r\n      this.servicesStarted = true;\r\n      logger.info(`\u2705 ${runningProcesses.length} test services started`);\r\n\r\n    } catch (error) {\r\n      logger.error('\u274C Failed to start test services:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop test services\r\n   */\r\n  private async stopTestServices(): Promise<void> {\r\n    if (!this.servicesStarted) {\r\n      return;\r\n    }\r\n\r\n    logger.info('\uD83D\uDED1 Stopping test services...');\r\n\r\n    try {\r\n      execSync('pm2 stop all', { stdio: 'pipe' });\r\n      execSync('pm2 delete all', { stdio: 'pipe' });\r\n      this.servicesStarted = false;\r\n      logger.info('\u2705 Test services stopped');\r\n    } catch (error) {\r\n      logger.error('\u26A0\uFE0F Error stopping test services:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get process status\r\n   */\r\n  private async getProcessStatus(): Promise<any[]> {\r\n    try {\r\n      const pm2List = execSync('pm2 jlist', { encoding: 'utf-8' });\r\n      return JSON.parse(pm2List);\r\n    } catch {\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create timeout promise\r\n   */\r\n  private createTimeoutPromise(timeout: number): Promise<never> {\r\n    return new Promise((_, reject) => {\r\n      setTimeout(() => reject(new Error('Test timeout')), timeout);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Save E2E test report\r\n   */\r\n  private async saveE2EReport(report: E2EReport): Promise<void> {\r\n    const timestamp = report.timestamp.toISOString().replace(/[:.]/g, '-');\r\n    const reportPath = join(process.cwd(), 'logs', `e2e-report-${timestamp}.json`);\r\n    \r\n    writeFileSync(reportPath, JSON.stringify(report, null, 2));\r\n    logger.info(`\uD83D\uDCCA E2E test report saved: ${reportPath}`);\r\n  }\r\n\r\n  /**\r\n   * Log E2E test summary\r\n   */\r\n  private logE2ESummary(report: E2EReport): void {\r\n    logger.info('\\n\uD83D\uDE80 END-TO-END TEST SUMMARY');\r\n    logger.info('\u2550'.repeat(50));\r\n    logger.info(`Environment: ${report.environment}`);\r\n    logger.info(`Duration: ${Math.round(report.duration / 1000)}s`);\r\n    logger.info(`Total Tests: ${report.summary.total}`);\r\n    logger.info(`\u2705 Passed: ${report.summary.passed}`);\r\n    logger.info(`\u274C Failed: ${report.summary.failed}`);\r\n    logger.info(`\u23ED\uFE0F Skipped: ${report.summary.skipped}`);\r\n    logger.info(`\uD83D\uDEA8 Critical Failures: ${report.summary.criticalFailed}`);\r\n    logger.info(`\uD83C\uDFAF System Ready: ${report.systemReady ? 'YES' : 'NO'}`);\r\n\r\n    if (!report.systemReady) {\r\n      logger.error('\\n\u274C E2E TESTS FAILED - System not ready for production');\r\n    } else {\r\n      logger.info('\\n\u2705 E2E TESTS PASSED - System ready for production use');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Run specific test suite\r\n   */\r\n  async runTestSuite(suiteName: string): Promise<E2ETestResult[]> {\r\n    const suite = this.testSuites.find(s => s.name === suiteName);\r\n    if (!suite) {\r\n      throw new Error(`Test suite not found: ${suiteName}`);\r\n    }\r\n\r\n    logger.info(`\uD83E\uDDEA Running E2E test suite: ${suite.name}`);\r\n    \r\n    // Start services if not already started\r\n    if (!this.servicesStarted) {\r\n      await this.startTestServices();\r\n    }\r\n\r\n    const results: E2ETestResult[] = [];\r\n\r\n    // Run suite setup\r\n    if (suite.setup) {\r\n      await suite.setup();\r\n    }\r\n\r\n    try {\r\n      // Run tests\r\n      for (const test of suite.tests) {\r\n        const testStartTime = Date.now();\r\n\r\n        try {\r\n          const testResult = await Promise.race([\r\n            test.test(),\r\n            this.createTimeoutPromise(test.timeout)\r\n          ]);\r\n\r\n          const duration = Date.now() - testStartTime;\r\n          const status = testResult.success ? 'PASS' : 'FAIL';\r\n\r\n          results.push({\r\n            name: test.name,\r\n            category: suite.name,\r\n            status,\r\n            duration,\r\n            message: testResult.message,\r\n            details: testResult.details,\r\n            critical: test.critical\r\n          });\r\n\r\n        } catch (error) {\r\n          const duration = Date.now() - testStartTime;\r\n          \r\n          results.push({\r\n            name: test.name,\r\n            category: suite.name,\r\n            status: 'FAIL',\r\n            duration,\r\n            message: error.message === 'Test timeout' ? 'Test timed out' : `Test error: ${error.message}`,\r\n            details: { error: error.message },\r\n            critical: test.critical\r\n          });\r\n        }\r\n      }\r\n\r\n    } finally {\r\n      // Run suite teardown\r\n      if (suite.teardown) {\r\n        await suite.teardown();\r\n      }\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  /**\r\n   * Get available test suites\r\n   */\r\n  getTestSuites(): Omit<E2ETestSuite, 'tests' | 'setup' | 'teardown'>[] {\r\n    return this.testSuites.map(suite => ({\r\n      name: suite.name,\r\n      description: suite.description,\r\n      enabled: suite.enabled\r\n    }));\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const e2eTestRunner = new E2ETestRunner();\r\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "b280fdd6e03bfb825c3f7083d3347f650de3fb16"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_8n6mpkaoa = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_8n6mpkaoa();
var __importDefault =
/* istanbul ignore next */
(cov_8n6mpkaoa().s[0]++,
/* istanbul ignore next */
(cov_8n6mpkaoa().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_8n6mpkaoa().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_8n6mpkaoa().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_8n6mpkaoa().f[0]++;
  cov_8n6mpkaoa().s[1]++;
  return /* istanbul ignore next */(cov_8n6mpkaoa().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_8n6mpkaoa().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_8n6mpkaoa().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_8n6mpkaoa().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_8n6mpkaoa().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_8n6mpkaoa().s[3]++;
exports.e2eTestRunner = exports.E2ETestRunner = void 0;
const child_process_1 =
/* istanbul ignore next */
(cov_8n6mpkaoa().s[4]++, require("child_process"));
const fs_1 =
/* istanbul ignore next */
(cov_8n6mpkaoa().s[5]++, require("fs"));
const path_1 =
/* istanbul ignore next */
(cov_8n6mpkaoa().s[6]++, require("path"));
const logger_1 =
/* istanbul ignore next */
(cov_8n6mpkaoa().s[7]++, require("../core/logger"));
const axios_1 =
/* istanbul ignore next */
(cov_8n6mpkaoa().s[8]++, __importDefault(require("axios")));
class E2ETestRunner {
  testSuites =
  /* istanbul ignore next */
  (cov_8n6mpkaoa().s[9]++, []);
  baseUrl =
  /* istanbul ignore next */
  (cov_8n6mpkaoa().s[10]++, 'http://localhost:3001');
  dashboardUrl =
  /* istanbul ignore next */
  (cov_8n6mpkaoa().s[11]++, 'http://localhost:3002');
  servicesStarted =
  /* istanbul ignore next */
  (cov_8n6mpkaoa().s[12]++, false);
  constructor() {
    /* istanbul ignore next */
    cov_8n6mpkaoa().f[1]++;
    cov_8n6mpkaoa().s[13]++;
    this.initializeTestSuites();
  }
  /**
   * Run complete end-to-end test suite
   */
  async runE2ETests() {
    /* istanbul ignore next */
    cov_8n6mpkaoa().f[2]++;
    cov_8n6mpkaoa().s[14]++;
    logger_1.logger.info('🚀 Starting end-to-end testing...');
    const startTime =
    /* istanbul ignore next */
    (cov_8n6mpkaoa().s[15]++, Date.now());
    const results =
    /* istanbul ignore next */
    (cov_8n6mpkaoa().s[16]++, []);
    let totalTests =
    /* istanbul ignore next */
    (cov_8n6mpkaoa().s[17]++, 0);
    let passedTests =
    /* istanbul ignore next */
    (cov_8n6mpkaoa().s[18]++, 0);
    let failedTests =
    /* istanbul ignore next */
    (cov_8n6mpkaoa().s[19]++, 0);
    let skippedTests =
    /* istanbul ignore next */
    (cov_8n6mpkaoa().s[20]++, 0);
    let criticalFailures =
    /* istanbul ignore next */
    (cov_8n6mpkaoa().s[21]++, 0);
    /* istanbul ignore next */
    cov_8n6mpkaoa().s[22]++;
    try {
      /* istanbul ignore next */
      cov_8n6mpkaoa().s[23]++;
      // Start services for testing
      await this.startTestServices();
      // Run all test suites
      /* istanbul ignore next */
      cov_8n6mpkaoa().s[24]++;
      for (const suite of this.testSuites) {
        /* istanbul ignore next */
        cov_8n6mpkaoa().s[25]++;
        if (!suite.enabled) {
          /* istanbul ignore next */
          cov_8n6mpkaoa().b[3][0]++;
          cov_8n6mpkaoa().s[26]++;
          logger_1.logger.info(`⏭️ Skipping disabled test suite: ${suite.name}`);
          /* istanbul ignore next */
          cov_8n6mpkaoa().s[27]++;
          continue;
        } else
        /* istanbul ignore next */
        {
          cov_8n6mpkaoa().b[3][1]++;
        }
        cov_8n6mpkaoa().s[28]++;
        logger_1.logger.info(`🧪 Running E2E test suite: ${suite.name}`);
        // Run suite setup
        /* istanbul ignore next */
        cov_8n6mpkaoa().s[29]++;
        if (suite.setup) {
          /* istanbul ignore next */
          cov_8n6mpkaoa().b[4][0]++;
          cov_8n6mpkaoa().s[30]++;
          try {
            /* istanbul ignore next */
            cov_8n6mpkaoa().s[31]++;
            await suite.setup();
          } catch (error) {
            /* istanbul ignore next */
            cov_8n6mpkaoa().s[32]++;
            logger_1.logger.error(`❌ Suite setup failed: ${suite.name}`, error);
            /* istanbul ignore next */
            cov_8n6mpkaoa().s[33]++;
            continue;
          }
        } else
        /* istanbul ignore next */
        {
          cov_8n6mpkaoa().b[4][1]++;
        }
        // Run tests
        cov_8n6mpkaoa().s[34]++;
        for (const test of suite.tests) {
          /* istanbul ignore next */
          cov_8n6mpkaoa().s[35]++;
          totalTests++;
          const testStartTime =
          /* istanbul ignore next */
          (cov_8n6mpkaoa().s[36]++, Date.now());
          /* istanbul ignore next */
          cov_8n6mpkaoa().s[37]++;
          try {
            /* istanbul ignore next */
            cov_8n6mpkaoa().s[38]++;
            logger_1.logger.info(`  🔍 Running test: ${test.name}`);
            const testResult =
            /* istanbul ignore next */
            (cov_8n6mpkaoa().s[39]++, await Promise.race([test.test(), this.createTimeoutPromise(test.timeout)]));
            const duration =
            /* istanbul ignore next */
            (cov_8n6mpkaoa().s[40]++, Date.now() - testStartTime);
            const status =
            /* istanbul ignore next */
            (cov_8n6mpkaoa().s[41]++, testResult.success ?
            /* istanbul ignore next */
            (cov_8n6mpkaoa().b[5][0]++, 'PASS') :
            /* istanbul ignore next */
            (cov_8n6mpkaoa().b[5][1]++, 'FAIL'));
            const result =
            /* istanbul ignore next */
            (cov_8n6mpkaoa().s[42]++, {
              name: test.name,
              category: suite.name,
              status,
              duration,
              message: testResult.message,
              details: testResult.details,
              critical: test.critical
            });
            /* istanbul ignore next */
            cov_8n6mpkaoa().s[43]++;
            results.push(result);
            /* istanbul ignore next */
            cov_8n6mpkaoa().s[44]++;
            if (status === 'PASS') {
              /* istanbul ignore next */
              cov_8n6mpkaoa().b[6][0]++;
              cov_8n6mpkaoa().s[45]++;
              passedTests++;
              /* istanbul ignore next */
              cov_8n6mpkaoa().s[46]++;
              logger_1.logger.info(`    ✅ ${test.name} - ${testResult.message}`);
            } else {
              /* istanbul ignore next */
              cov_8n6mpkaoa().b[6][1]++;
              cov_8n6mpkaoa().s[47]++;
              failedTests++;
              /* istanbul ignore next */
              cov_8n6mpkaoa().s[48]++;
              if (test.critical) {
                /* istanbul ignore next */
                cov_8n6mpkaoa().b[7][0]++;
                cov_8n6mpkaoa().s[49]++;
                criticalFailures++;
              } else
              /* istanbul ignore next */
              {
                cov_8n6mpkaoa().b[7][1]++;
              }
              cov_8n6mpkaoa().s[50]++;
              logger_1.logger.error(`    ❌ ${test.name} - ${testResult.message}`);
            }
          } catch (error) {
            const duration =
            /* istanbul ignore next */
            (cov_8n6mpkaoa().s[51]++, Date.now() - testStartTime);
            const isTimeout =
            /* istanbul ignore next */
            (cov_8n6mpkaoa().s[52]++, error.message === 'Test timeout');
            const result =
            /* istanbul ignore next */
            (cov_8n6mpkaoa().s[53]++, {
              name: test.name,
              category: suite.name,
              status: 'FAIL',
              duration,
              message: isTimeout ?
              /* istanbul ignore next */
              (cov_8n6mpkaoa().b[8][0]++, 'Test timed out') :
              /* istanbul ignore next */
              (cov_8n6mpkaoa().b[8][1]++, `Test error: ${error.message}`),
              details: {
                error: error.message
              },
              critical: test.critical
            });
            /* istanbul ignore next */
            cov_8n6mpkaoa().s[54]++;
            results.push(result);
            /* istanbul ignore next */
            cov_8n6mpkaoa().s[55]++;
            failedTests++;
            /* istanbul ignore next */
            cov_8n6mpkaoa().s[56]++;
            if (test.critical) {
              /* istanbul ignore next */
              cov_8n6mpkaoa().b[9][0]++;
              cov_8n6mpkaoa().s[57]++;
              criticalFailures++;
            } else
            /* istanbul ignore next */
            {
              cov_8n6mpkaoa().b[9][1]++;
            }
            cov_8n6mpkaoa().s[58]++;
            logger_1.logger.error(`    ❌ ${test.name} - ${result.message}`);
          }
        }
        // Run suite teardown
        /* istanbul ignore next */
        cov_8n6mpkaoa().s[59]++;
        if (suite.teardown) {
          /* istanbul ignore next */
          cov_8n6mpkaoa().b[10][0]++;
          cov_8n6mpkaoa().s[60]++;
          try {
            /* istanbul ignore next */
            cov_8n6mpkaoa().s[61]++;
            await suite.teardown();
          } catch (error) {
            /* istanbul ignore next */
            cov_8n6mpkaoa().s[62]++;
            logger_1.logger.error(`⚠️ Suite teardown failed: ${suite.name}`, error);
          }
        } else
        /* istanbul ignore next */
        {
          cov_8n6mpkaoa().b[10][1]++;
        }
      }
    } finally {
      /* istanbul ignore next */
      cov_8n6mpkaoa().s[63]++;
      // Stop test services
      await this.stopTestServices();
    }
    const totalDuration =
    /* istanbul ignore next */
    (cov_8n6mpkaoa().s[64]++, Date.now() - startTime);
    const systemReady =
    /* istanbul ignore next */
    (cov_8n6mpkaoa().s[65]++, criticalFailures === 0);
    const report =
    /* istanbul ignore next */
    (cov_8n6mpkaoa().s[66]++, {
      timestamp: new Date(),
      environment:
      /* istanbul ignore next */
      (cov_8n6mpkaoa().b[11][0]++, process.env.NODE_ENV) ||
      /* istanbul ignore next */
      (cov_8n6mpkaoa().b[11][1]++, 'test'),
      duration: totalDuration,
      summary: {
        total: totalTests,
        passed: passedTests,
        failed: failedTests,
        skipped: skippedTests,
        criticalFailed: criticalFailures
      },
      results,
      systemReady
    });
    // Save test report
    /* istanbul ignore next */
    cov_8n6mpkaoa().s[67]++;
    await this.saveE2EReport(report);
    // Log summary
    /* istanbul ignore next */
    cov_8n6mpkaoa().s[68]++;
    this.logE2ESummary(report);
    /* istanbul ignore next */
    cov_8n6mpkaoa().s[69]++;
    return report;
  }
  /**
   * Initialize end-to-end test suites
   */
  initializeTestSuites() {
    /* istanbul ignore next */
    cov_8n6mpkaoa().f[3]++;
    cov_8n6mpkaoa().s[70]++;
    this.testSuites = [{
      name: 'System Startup',
      description: 'Test complete system startup and initialization',
      enabled: true,
      tests: [{
        name: 'Service Startup',
        description: 'Verify all services start successfully',
        critical: true,
        timeout: 60000,
        test: async () => {
          /* istanbul ignore next */
          cov_8n6mpkaoa().f[4]++;
          // Services should already be started by startTestServices
          const processes =
          /* istanbul ignore next */
          (cov_8n6mpkaoa().s[71]++, await this.getProcessStatus());
          const runningProcesses =
          /* istanbul ignore next */
          (cov_8n6mpkaoa().s[72]++, processes.filter(p => {
            /* istanbul ignore next */
            cov_8n6mpkaoa().f[5]++;
            cov_8n6mpkaoa().s[73]++;
            return p.pm2_env.status === 'online';
          }));
          /* istanbul ignore next */
          cov_8n6mpkaoa().s[74]++;
          if (runningProcesses.length === 0) {
            /* istanbul ignore next */
            cov_8n6mpkaoa().b[12][0]++;
            cov_8n6mpkaoa().s[75]++;
            return {
              success: false,
              message: 'No services are running'
            };
          } else
          /* istanbul ignore next */
          {
            cov_8n6mpkaoa().b[12][1]++;
          }
          cov_8n6mpkaoa().s[76]++;
          return {
            success: true,
            message: `${runningProcesses.length} services started successfully`,
            details: {
              processes: runningProcesses.map(p => {
                /* istanbul ignore next */
                cov_8n6mpkaoa().f[6]++;
                cov_8n6mpkaoa().s[77]++;
                return {
                  name: p.name,
                  status: p.pm2_env.status,
                  uptime: p.pm2_env.pm_uptime
                };
              })
            }
          };
        }
      }, {
        name: 'Database Connection',
        description: 'Verify database connectivity and initialization',
        critical: true,
        timeout: 15000,
        test: async () => {
          /* istanbul ignore next */
          cov_8n6mpkaoa().f[7]++;
          cov_8n6mpkaoa().s[78]++;
          try {
            const response =
            /* istanbul ignore next */
            (cov_8n6mpkaoa().s[79]++, await axios_1.default.get(`${this.baseUrl}/api/v1/health/database`, {
              timeout: 10000
            }));
            /* istanbul ignore next */
            cov_8n6mpkaoa().s[80]++;
            if (
            /* istanbul ignore next */
            (cov_8n6mpkaoa().b[14][0]++, response.status === 200) &&
            /* istanbul ignore next */
            (cov_8n6mpkaoa().b[14][1]++, response.data.status === 'HEALTHY')) {
              /* istanbul ignore next */
              cov_8n6mpkaoa().b[13][0]++;
              cov_8n6mpkaoa().s[81]++;
              return {
                success: true,
                message: 'Database connection verified'
              };
            } else {
              /* istanbul ignore next */
              cov_8n6mpkaoa().b[13][1]++;
              cov_8n6mpkaoa().s[82]++;
              return {
                success: false,
                message: 'Database health check failed'
              };
            }
          } catch (error) {
            /* istanbul ignore next */
            cov_8n6mpkaoa().s[83]++;
            return {
              success: false,
              message: `Database connection failed: ${error.message}`
            };
          }
        }
      }, {
        name: 'SSH Tunnel Status',
        description: 'Verify SSH tunnel is established',
        critical: true,
        timeout: 20000,
        test: async () => {
          /* istanbul ignore next */
          cov_8n6mpkaoa().f[8]++;
          cov_8n6mpkaoa().s[84]++;
          try {
            const response =
            /* istanbul ignore next */
            (cov_8n6mpkaoa().s[85]++, await axios_1.default.get(`${this.baseUrl}/api/v1/tunnel/status`, {
              timeout: 15000
            }));
            /* istanbul ignore next */
            cov_8n6mpkaoa().s[86]++;
            if (
            /* istanbul ignore next */
            (cov_8n6mpkaoa().b[16][0]++, response.status === 200) &&
            /* istanbul ignore next */
            (cov_8n6mpkaoa().b[16][1]++, response.data.connected)) {
              /* istanbul ignore next */
              cov_8n6mpkaoa().b[15][0]++;
              cov_8n6mpkaoa().s[87]++;
              return {
                success: true,
                message: 'SSH tunnel is connected',
                details: response.data
              };
            } else {
              /* istanbul ignore next */
              cov_8n6mpkaoa().b[15][1]++;
              cov_8n6mpkaoa().s[88]++;
              return {
                success: false,
                message: 'SSH tunnel is not connected'
              };
            }
          } catch (error) {
            /* istanbul ignore next */
            cov_8n6mpkaoa().s[89]++;
            return {
              success: false,
              message: `SSH tunnel check failed: ${error.message}`
            };
          }
        }
      }]
    }, {
      name: 'API Functionality',
      description: 'Test all API endpoints and functionality',
      enabled: true,
      tests: [{
        name: 'Health Endpoint',
        description: 'Test main health endpoint',
        critical: true,
        timeout: 10000,
        test: async () => {
          /* istanbul ignore next */
          cov_8n6mpkaoa().f[9]++;
          cov_8n6mpkaoa().s[90]++;
          try {
            const startTime =
            /* istanbul ignore next */
            (cov_8n6mpkaoa().s[91]++, Date.now());
            const response =
            /* istanbul ignore next */
            (cov_8n6mpkaoa().s[92]++, await axios_1.default.get(`${this.baseUrl}/api/v1/health`, {
              timeout: 8000
            }));
            const responseTime =
            /* istanbul ignore next */
            (cov_8n6mpkaoa().s[93]++, Date.now() - startTime);
            /* istanbul ignore next */
            cov_8n6mpkaoa().s[94]++;
            if (response.status === 200) {
              /* istanbul ignore next */
              cov_8n6mpkaoa().b[17][0]++;
              cov_8n6mpkaoa().s[95]++;
              return {
                success: true,
                message: `Health endpoint responding (${responseTime}ms)`,
                details: {
                  responseTime,
                  data: response.data
                }
              };
            } else {
              /* istanbul ignore next */
              cov_8n6mpkaoa().b[17][1]++;
              cov_8n6mpkaoa().s[96]++;
              return {
                success: false,
                message: `Unexpected status code: ${response.status}`
              };
            }
          } catch (error) {
            /* istanbul ignore next */
            cov_8n6mpkaoa().s[97]++;
            return {
              success: false,
              message: `Health endpoint failed: ${error.message}`
            };
          }
        }
      }, {
        name: 'System Metrics',
        description: 'Test system metrics endpoint',
        critical: false,
        timeout: 15000,
        test: async () => {
          /* istanbul ignore next */
          cov_8n6mpkaoa().f[10]++;
          cov_8n6mpkaoa().s[98]++;
          try {
            const response =
            /* istanbul ignore next */
            (cov_8n6mpkaoa().s[99]++, await axios_1.default.get(`${this.baseUrl}/api/v1/metrics/system`, {
              timeout: 10000
            }));
            /* istanbul ignore next */
            cov_8n6mpkaoa().s[100]++;
            if (
            /* istanbul ignore next */
            (cov_8n6mpkaoa().b[19][0]++, response.status === 200) &&
            /* istanbul ignore next */
            (cov_8n6mpkaoa().b[19][1]++, response.data.cpu) &&
            /* istanbul ignore next */
            (cov_8n6mpkaoa().b[19][2]++, response.data.memory)) {
              /* istanbul ignore next */
              cov_8n6mpkaoa().b[18][0]++;
              cov_8n6mpkaoa().s[101]++;
              return {
                success: true,
                message: 'System metrics endpoint working',
                details: {
                  cpu: response.data.cpu.usage,
                  memory: response.data.memory.percentage
                }
              };
            } else {
              /* istanbul ignore next */
              cov_8n6mpkaoa().b[18][1]++;
              cov_8n6mpkaoa().s[102]++;
              return {
                success: false,
                message: 'Invalid system metrics response'
              };
            }
          } catch (error) {
            /* istanbul ignore next */
            cov_8n6mpkaoa().s[103]++;
            return {
              success: false,
              message: `System metrics failed: ${error.message}`
            };
          }
        }
      }, {
        name: 'Trading Status',
        description: 'Test trading status endpoint',
        critical: false,
        timeout: 10000,
        test: async () => {
          /* istanbul ignore next */
          cov_8n6mpkaoa().f[11]++;
          cov_8n6mpkaoa().s[104]++;
          try {
            const response =
            /* istanbul ignore next */
            (cov_8n6mpkaoa().s[105]++, await axios_1.default.get(`${this.baseUrl}/api/v1/trading/status`, {
              timeout: 8000
            }));
            /* istanbul ignore next */
            cov_8n6mpkaoa().s[106]++;
            if (response.status === 200) {
              /* istanbul ignore next */
              cov_8n6mpkaoa().b[20][0]++;
              cov_8n6mpkaoa().s[107]++;
              return {
                success: true,
                message: 'Trading status endpoint working',
                details: response.data
              };
            } else {
              /* istanbul ignore next */
              cov_8n6mpkaoa().b[20][1]++;
              cov_8n6mpkaoa().s[108]++;
              return {
                success: false,
                message: `Trading status failed: ${response.status}`
              };
            }
          } catch (error) {
            /* istanbul ignore next */
            cov_8n6mpkaoa().s[109]++;
            return {
              success: false,
              message: `Trading status error: ${error.message}`
            };
          }
        }
      }, {
        name: 'Security Headers',
        description: 'Verify security headers are present',
        critical: false,
        timeout: 10000,
        test: async () => {
          /* istanbul ignore next */
          cov_8n6mpkaoa().f[12]++;
          cov_8n6mpkaoa().s[110]++;
          try {
            const response =
            /* istanbul ignore next */
            (cov_8n6mpkaoa().s[111]++, await axios_1.default.get(`${this.baseUrl}/api/v1/health`, {
              timeout: 8000
            }));
            const securityHeaders =
            /* istanbul ignore next */
            (cov_8n6mpkaoa().s[112]++, ['x-content-type-options', 'x-frame-options', 'x-xss-protection']);
            const missingHeaders =
            /* istanbul ignore next */
            (cov_8n6mpkaoa().s[113]++, securityHeaders.filter(header => {
              /* istanbul ignore next */
              cov_8n6mpkaoa().f[13]++;
              cov_8n6mpkaoa().s[114]++;
              return !response.headers[header];
            }));
            /* istanbul ignore next */
            cov_8n6mpkaoa().s[115]++;
            if (missingHeaders.length === 0) {
              /* istanbul ignore next */
              cov_8n6mpkaoa().b[21][0]++;
              cov_8n6mpkaoa().s[116]++;
              return {
                success: true,
                message: 'All security headers present'
              };
            } else {
              /* istanbul ignore next */
              cov_8n6mpkaoa().b[21][1]++;
              cov_8n6mpkaoa().s[117]++;
              return {
                success: false,
                message: `Missing security headers: ${missingHeaders.join(', ')}`
              };
            }
          } catch (error) {
            /* istanbul ignore next */
            cov_8n6mpkaoa().s[118]++;
            return {
              success: false,
              message: `Security headers check failed: ${error.message}`
            };
          }
        }
      }]
    }, {
      name: 'Dashboard Functionality',
      description: 'Test dashboard accessibility and functionality',
      enabled: true,
      tests: [{
        name: 'Dashboard Accessibility',
        description: 'Verify dashboard is accessible',
        critical: false,
        timeout: 15000,
        test: async () => {
          /* istanbul ignore next */
          cov_8n6mpkaoa().f[14]++;
          cov_8n6mpkaoa().s[119]++;
          try {
            const response =
            /* istanbul ignore next */
            (cov_8n6mpkaoa().s[120]++, await axios_1.default.get(this.dashboardUrl, {
              timeout: 10000
            }));
            /* istanbul ignore next */
            cov_8n6mpkaoa().s[121]++;
            if (response.status === 200) {
              /* istanbul ignore next */
              cov_8n6mpkaoa().b[22][0]++;
              cov_8n6mpkaoa().s[122]++;
              return {
                success: true,
                message: 'Dashboard is accessible'
              };
            } else {
              /* istanbul ignore next */
              cov_8n6mpkaoa().b[22][1]++;
              cov_8n6mpkaoa().s[123]++;
              return {
                success: false,
                message: `Dashboard returned status: ${response.status}`
              };
            }
          } catch (error) {
            /* istanbul ignore next */
            cov_8n6mpkaoa().s[124]++;
            return {
              success: false,
              message: `Dashboard not accessible: ${error.message}`
            };
          }
        }
      }, {
        name: 'Dashboard Assets',
        description: 'Verify dashboard static assets load',
        critical: false,
        timeout: 20000,
        test: async () => {
          /* istanbul ignore next */
          cov_8n6mpkaoa().f[15]++;
          cov_8n6mpkaoa().s[125]++;
          try {
            // Test common asset paths
            const assetPaths =
            /* istanbul ignore next */
            (cov_8n6mpkaoa().s[126]++, ['/_next/static/css', '/_next/static/js']);
            let assetsLoaded =
            /* istanbul ignore next */
            (cov_8n6mpkaoa().s[127]++, 0);
            /* istanbul ignore next */
            cov_8n6mpkaoa().s[128]++;
            for (const path of assetPaths) {
              /* istanbul ignore next */
              cov_8n6mpkaoa().s[129]++;
              try {
                /* istanbul ignore next */
                cov_8n6mpkaoa().s[130]++;
                await axios_1.default.get(`${this.dashboardUrl}${path}`, {
                  timeout: 5000
                });
                /* istanbul ignore next */
                cov_8n6mpkaoa().s[131]++;
                assetsLoaded++;
              } catch {
                // Asset might not exist, which is okay
              }
            }
            /* istanbul ignore next */
            cov_8n6mpkaoa().s[132]++;
            return {
              success: true,
              message: `Dashboard assets check completed`,
              details: {
                assetsChecked: assetPaths.length,
                assetsLoaded
              }
            };
          } catch (error) {
            /* istanbul ignore next */
            cov_8n6mpkaoa().s[133]++;
            return {
              success: false,
              message: `Dashboard assets check failed: ${error.message}`
            };
          }
        }
      }]
    }, {
      name: 'Data Flow',
      description: 'Test data flow through the system',
      enabled: true,
      tests: [{
        name: 'Market Data Flow',
        description: 'Test market data collection and processing',
        critical: false,
        timeout: 30000,
        test: async () => {
          /* istanbul ignore next */
          cov_8n6mpkaoa().f[16]++;
          cov_8n6mpkaoa().s[134]++;
          try {
            // Trigger market data collection
            const response =
            /* istanbul ignore next */
            (cov_8n6mpkaoa().s[135]++, await axios_1.default.post(`${this.baseUrl}/api/v1/market/collect`, {}, {
              timeout: 25000
            }));
            /* istanbul ignore next */
            cov_8n6mpkaoa().s[136]++;
            if (response.status === 200) {
              /* istanbul ignore next */
              cov_8n6mpkaoa().b[23][0]++;
              cov_8n6mpkaoa().s[137]++;
              return {
                success: true,
                message: 'Market data collection working',
                details: response.data
              };
            } else {
              /* istanbul ignore next */
              cov_8n6mpkaoa().b[23][1]++;
              cov_8n6mpkaoa().s[138]++;
              return {
                success: false,
                message: `Market data collection failed: ${response.status}`
              };
            }
          } catch (error) {
            /* istanbul ignore next */
            cov_8n6mpkaoa().s[139]++;
            return {
              success: false,
              message: `Market data flow error: ${error.message}`
            };
          }
        }
      }, {
        name: 'Technical Indicators',
        description: 'Test technical indicator calculations',
        critical: false,
        timeout: 20000,
        test: async () => {
          /* istanbul ignore next */
          cov_8n6mpkaoa().f[17]++;
          cov_8n6mpkaoa().s[140]++;
          try {
            const response =
            /* istanbul ignore next */
            (cov_8n6mpkaoa().s[141]++, await axios_1.default.get(`${this.baseUrl}/api/v1/indicators/BTC_USDT`, {
              timeout: 15000
            }));
            /* istanbul ignore next */
            cov_8n6mpkaoa().s[142]++;
            if (
            /* istanbul ignore next */
            (cov_8n6mpkaoa().b[25][0]++, response.status === 200) &&
            /* istanbul ignore next */
            (cov_8n6mpkaoa().b[25][1]++, response.data.indicators)) {
              /* istanbul ignore next */
              cov_8n6mpkaoa().b[24][0]++;
              cov_8n6mpkaoa().s[143]++;
              return {
                success: true,
                message: 'Technical indicators working',
                details: {
                  indicators: Object.keys(response.data.indicators).length
                }
              };
            } else {
              /* istanbul ignore next */
              cov_8n6mpkaoa().b[24][1]++;
              cov_8n6mpkaoa().s[144]++;
              return {
                success: false,
                message: 'Technical indicators not available'
              };
            }
          } catch (error) {
            /* istanbul ignore next */
            cov_8n6mpkaoa().s[145]++;
            return {
              success: false,
              message: `Technical indicators error: ${error.message}`
            };
          }
        }
      }, {
        name: 'Sentiment Analysis',
        description: 'Test sentiment analysis functionality',
        critical: false,
        timeout: 25000,
        test: async () => {
          /* istanbul ignore next */
          cov_8n6mpkaoa().f[18]++;
          cov_8n6mpkaoa().s[146]++;
          try {
            const response =
            /* istanbul ignore next */
            (cov_8n6mpkaoa().s[147]++, await axios_1.default.get(`${this.baseUrl}/api/v1/sentiment/BTC`, {
              timeout: 20000
            }));
            /* istanbul ignore next */
            cov_8n6mpkaoa().s[148]++;
            if (response.status === 200) {
              /* istanbul ignore next */
              cov_8n6mpkaoa().b[26][0]++;
              cov_8n6mpkaoa().s[149]++;
              return {
                success: true,
                message: 'Sentiment analysis working',
                details: response.data
              };
            } else {
              /* istanbul ignore next */
              cov_8n6mpkaoa().b[26][1]++;
              cov_8n6mpkaoa().s[150]++;
              return {
                success: false,
                message: `Sentiment analysis failed: ${response.status}`
              };
            }
          } catch (error) {
            /* istanbul ignore next */
            cov_8n6mpkaoa().s[151]++;
            return {
              success: false,
              message: `Sentiment analysis error: ${error.message}`
            };
          }
        }
      }]
    }, {
      name: 'Security Testing',
      description: 'Test security measures and protections',
      enabled: true,
      tests: [{
        name: 'Rate Limiting',
        description: 'Test API rate limiting',
        critical: false,
        timeout: 30000,
        test: async () => {
          /* istanbul ignore next */
          cov_8n6mpkaoa().f[19]++;
          cov_8n6mpkaoa().s[152]++;
          try {
            // Make multiple rapid requests to test rate limiting
            const requests =
            /* istanbul ignore next */
            (cov_8n6mpkaoa().s[153]++, Array(20).fill(null).map(() => {
              /* istanbul ignore next */
              cov_8n6mpkaoa().f[20]++;
              cov_8n6mpkaoa().s[154]++;
              return axios_1.default.get(`${this.baseUrl}/api/v1/health`, {
                timeout: 2000
              }).catch(error => {
                /* istanbul ignore next */
                cov_8n6mpkaoa().f[21]++;
                cov_8n6mpkaoa().s[155]++;
                return {
                  error:
                  /* istanbul ignore next */
                  (cov_8n6mpkaoa().b[27][0]++, error.response?.status) ||
                  /* istanbul ignore next */
                  (cov_8n6mpkaoa().b[27][1]++, error.message)
                };
              });
            }));
            const responses =
            /* istanbul ignore next */
            (cov_8n6mpkaoa().s[156]++, await Promise.all(requests));
            const rateLimited =
            /* istanbul ignore next */
            (cov_8n6mpkaoa().s[157]++, responses.some(r => {
              /* istanbul ignore next */
              cov_8n6mpkaoa().f[22]++;
              cov_8n6mpkaoa().s[158]++;
              return /* istanbul ignore next */(cov_8n6mpkaoa().b[28][0]++, r.error === 429) ||
              /* istanbul ignore next */
              (cov_8n6mpkaoa().b[28][1]++, typeof r.error === 'string') &&
              /* istanbul ignore next */
              (cov_8n6mpkaoa().b[28][2]++, r.error.includes('429'));
            }));
            /* istanbul ignore next */
            cov_8n6mpkaoa().s[159]++;
            if (rateLimited) {
              /* istanbul ignore next */
              cov_8n6mpkaoa().b[29][0]++;
              cov_8n6mpkaoa().s[160]++;
              return {
                success: true,
                message: 'Rate limiting is working'
              };
            } else {
              /* istanbul ignore next */
              cov_8n6mpkaoa().b[29][1]++;
              cov_8n6mpkaoa().s[161]++;
              return {
                success: false,
                message: 'Rate limiting may not be configured'
              };
            }
          } catch (error) {
            /* istanbul ignore next */
            cov_8n6mpkaoa().s[162]++;
            return {
              success: false,
              message: `Rate limiting test error: ${error.message}`
            };
          }
        }
      }, {
        name: 'Input Validation',
        description: 'Test input validation on API endpoints',
        critical: false,
        timeout: 15000,
        test: async () => {
          /* istanbul ignore next */
          cov_8n6mpkaoa().f[23]++;
          cov_8n6mpkaoa().s[163]++;
          try {
            // Test with invalid input
            const response =
            /* istanbul ignore next */
            (cov_8n6mpkaoa().s[164]++, await axios_1.default.post(`${this.baseUrl}/api/v1/trading/order`, {
              invalid: 'data',
              malicious: '<script>alert("xss")</script>'
            }, {
              timeout: 10000,
              validateStatus: () => {
                /* istanbul ignore next */
                cov_8n6mpkaoa().f[24]++;
                cov_8n6mpkaoa().s[165]++;
                return true;
              } // Accept all status codes
            }));
            /* istanbul ignore next */
            cov_8n6mpkaoa().s[166]++;
            if (
            /* istanbul ignore next */
            (cov_8n6mpkaoa().b[31][0]++, response.status === 400) ||
            /* istanbul ignore next */
            (cov_8n6mpkaoa().b[31][1]++, response.status === 422)) {
              /* istanbul ignore next */
              cov_8n6mpkaoa().b[30][0]++;
              cov_8n6mpkaoa().s[167]++;
              return {
                success: true,
                message: 'Input validation is working'
              };
            } else {
              /* istanbul ignore next */
              cov_8n6mpkaoa().b[30][1]++;
              cov_8n6mpkaoa().s[168]++;
              return {
                success: false,
                message: 'Input validation may be insufficient'
              };
            }
          } catch (error) {
            /* istanbul ignore next */
            cov_8n6mpkaoa().s[169]++;
            return {
              success: false,
              message: `Input validation test error: ${error.message}`
            };
          }
        }
      }]
    }, {
      name: 'Performance Testing',
      description: 'Test system performance under load',
      enabled: true,
      tests: [{
        name: 'Response Time',
        description: 'Test API response times',
        critical: false,
        timeout: 30000,
        test: async () => {
          /* istanbul ignore next */
          cov_8n6mpkaoa().f[25]++;
          cov_8n6mpkaoa().s[170]++;
          try {
            const requests =
            /* istanbul ignore next */
            (cov_8n6mpkaoa().s[171]++, 10);
            const responseTimes =
            /* istanbul ignore next */
            (cov_8n6mpkaoa().s[172]++, []);
            /* istanbul ignore next */
            cov_8n6mpkaoa().s[173]++;
            for (let i =
            /* istanbul ignore next */
            (cov_8n6mpkaoa().s[174]++, 0); i < requests; i++) {
              const startTime =
              /* istanbul ignore next */
              (cov_8n6mpkaoa().s[175]++, Date.now());
              /* istanbul ignore next */
              cov_8n6mpkaoa().s[176]++;
              await axios_1.default.get(`${this.baseUrl}/api/v1/health`, {
                timeout: 5000
              });
              /* istanbul ignore next */
              cov_8n6mpkaoa().s[177]++;
              responseTimes.push(Date.now() - startTime);
            }
            const avgResponseTime =
            /* istanbul ignore next */
            (cov_8n6mpkaoa().s[178]++, responseTimes.reduce((a, b) => {
              /* istanbul ignore next */
              cov_8n6mpkaoa().f[26]++;
              cov_8n6mpkaoa().s[179]++;
              return a + b;
            }, 0) / responseTimes.length);
            const maxResponseTime =
            /* istanbul ignore next */
            (cov_8n6mpkaoa().s[180]++, Math.max(...responseTimes));
            /* istanbul ignore next */
            cov_8n6mpkaoa().s[181]++;
            if (
            /* istanbul ignore next */
            (cov_8n6mpkaoa().b[33][0]++, avgResponseTime < 1000) &&
            /* istanbul ignore next */
            (cov_8n6mpkaoa().b[33][1]++, maxResponseTime < 2000)) {
              /* istanbul ignore next */
              cov_8n6mpkaoa().b[32][0]++;
              cov_8n6mpkaoa().s[182]++;
              return {
                success: true,
                message: `Good response times (avg: ${avgResponseTime.toFixed(0)}ms)`,
                details: {
                  average: avgResponseTime,
                  maximum: maxResponseTime
                }
              };
            } else {
              /* istanbul ignore next */
              cov_8n6mpkaoa().b[32][1]++;
              cov_8n6mpkaoa().s[183]++;
              return {
                success: false,
                message: `Slow response times (avg: ${avgResponseTime.toFixed(0)}ms, max: ${maxResponseTime}ms)`
              };
            }
          } catch (error) {
            /* istanbul ignore next */
            cov_8n6mpkaoa().s[184]++;
            return {
              success: false,
              message: `Response time test error: ${error.message}`
            };
          }
        }
      }, {
        name: 'Concurrent Requests',
        description: 'Test handling of concurrent requests',
        critical: false,
        timeout: 45000,
        test: async () => {
          /* istanbul ignore next */
          cov_8n6mpkaoa().f[27]++;
          cov_8n6mpkaoa().s[185]++;
          try {
            const concurrentRequests =
            /* istanbul ignore next */
            (cov_8n6mpkaoa().s[186]++, 50);
            const requests =
            /* istanbul ignore next */
            (cov_8n6mpkaoa().s[187]++, Array(concurrentRequests).fill(null).map(() => {
              /* istanbul ignore next */
              cov_8n6mpkaoa().f[28]++;
              cov_8n6mpkaoa().s[188]++;
              return axios_1.default.get(`${this.baseUrl}/api/v1/health`, {
                timeout: 10000
              }).catch(error => {
                /* istanbul ignore next */
                cov_8n6mpkaoa().f[29]++;
                cov_8n6mpkaoa().s[189]++;
                return {
                  error: error.message
                };
              });
            }));
            const startTime =
            /* istanbul ignore next */
            (cov_8n6mpkaoa().s[190]++, Date.now());
            const responses =
            /* istanbul ignore next */
            (cov_8n6mpkaoa().s[191]++, await Promise.all(requests));
            const duration =
            /* istanbul ignore next */
            (cov_8n6mpkaoa().s[192]++, Date.now() - startTime);
            const successful =
            /* istanbul ignore next */
            (cov_8n6mpkaoa().s[193]++, responses.filter(r => {
              /* istanbul ignore next */
              cov_8n6mpkaoa().f[30]++;
              cov_8n6mpkaoa().s[194]++;
              return !r.error;
            }).length);
            const successRate =
            /* istanbul ignore next */
            (cov_8n6mpkaoa().s[195]++, successful / concurrentRequests * 100);
            /* istanbul ignore next */
            cov_8n6mpkaoa().s[196]++;
            if (successRate >= 95) {
              /* istanbul ignore next */
              cov_8n6mpkaoa().b[34][0]++;
              cov_8n6mpkaoa().s[197]++;
              return {
                success: true,
                message: `Handled ${successful}/${concurrentRequests} concurrent requests (${duration}ms)`,
                details: {
                  successRate,
                  duration,
                  concurrent: concurrentRequests
                }
              };
            } else {
              /* istanbul ignore next */
              cov_8n6mpkaoa().b[34][1]++;
              cov_8n6mpkaoa().s[198]++;
              return {
                success: false,
                message: `Poor concurrent performance: ${successRate.toFixed(1)}% success rate`
              };
            }
          } catch (error) {
            /* istanbul ignore next */
            cov_8n6mpkaoa().s[199]++;
            return {
              success: false,
              message: `Concurrent requests test error: ${error.message}`
            };
          }
        }
      }]
    }];
  }
  /**
   * Start test services
   */
  async startTestServices() {
    /* istanbul ignore next */
    cov_8n6mpkaoa().f[31]++;
    cov_8n6mpkaoa().s[200]++;
    if (this.servicesStarted) {
      /* istanbul ignore next */
      cov_8n6mpkaoa().b[35][0]++;
      cov_8n6mpkaoa().s[201]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_8n6mpkaoa().b[35][1]++;
    }
    cov_8n6mpkaoa().s[202]++;
    logger_1.logger.info('🚀 Starting test services...');
    /* istanbul ignore next */
    cov_8n6mpkaoa().s[203]++;
    try {
      /* istanbul ignore next */
      cov_8n6mpkaoa().s[204]++;
      // Stop any existing services
      try {
        /* istanbul ignore next */
        cov_8n6mpkaoa().s[205]++;
        (0, child_process_1.execSync)('pm2 stop all', {
          stdio: 'pipe'
        });
        /* istanbul ignore next */
        cov_8n6mpkaoa().s[206]++;
        (0, child_process_1.execSync)('pm2 delete all', {
          stdio: 'pipe'
        });
      } catch {
        // Ignore if no services running
      }
      // Start services
      /* istanbul ignore next */
      cov_8n6mpkaoa().s[207]++;
      (0, child_process_1.execSync)('pm2 start ecosystem.config.js --env test', {
        stdio: 'inherit'
      });
      // Wait for services to start
      /* istanbul ignore next */
      cov_8n6mpkaoa().s[208]++;
      await new Promise(resolve => {
        /* istanbul ignore next */
        cov_8n6mpkaoa().f[32]++;
        cov_8n6mpkaoa().s[209]++;
        return setTimeout(resolve, 10000);
      });
      // Verify services are running
      const processes =
      /* istanbul ignore next */
      (cov_8n6mpkaoa().s[210]++, await this.getProcessStatus());
      const runningProcesses =
      /* istanbul ignore next */
      (cov_8n6mpkaoa().s[211]++, processes.filter(p => {
        /* istanbul ignore next */
        cov_8n6mpkaoa().f[33]++;
        cov_8n6mpkaoa().s[212]++;
        return p.pm2_env.status === 'online';
      }));
      /* istanbul ignore next */
      cov_8n6mpkaoa().s[213]++;
      if (runningProcesses.length === 0) {
        /* istanbul ignore next */
        cov_8n6mpkaoa().b[36][0]++;
        cov_8n6mpkaoa().s[214]++;
        throw new Error('No services started successfully');
      } else
      /* istanbul ignore next */
      {
        cov_8n6mpkaoa().b[36][1]++;
      }
      cov_8n6mpkaoa().s[215]++;
      this.servicesStarted = true;
      /* istanbul ignore next */
      cov_8n6mpkaoa().s[216]++;
      logger_1.logger.info(`✅ ${runningProcesses.length} test services started`);
    } catch (error) {
      /* istanbul ignore next */
      cov_8n6mpkaoa().s[217]++;
      logger_1.logger.error('❌ Failed to start test services:', error);
      /* istanbul ignore next */
      cov_8n6mpkaoa().s[218]++;
      throw error;
    }
  }
  /**
   * Stop test services
   */
  async stopTestServices() {
    /* istanbul ignore next */
    cov_8n6mpkaoa().f[34]++;
    cov_8n6mpkaoa().s[219]++;
    if (!this.servicesStarted) {
      /* istanbul ignore next */
      cov_8n6mpkaoa().b[37][0]++;
      cov_8n6mpkaoa().s[220]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_8n6mpkaoa().b[37][1]++;
    }
    cov_8n6mpkaoa().s[221]++;
    logger_1.logger.info('🛑 Stopping test services...');
    /* istanbul ignore next */
    cov_8n6mpkaoa().s[222]++;
    try {
      /* istanbul ignore next */
      cov_8n6mpkaoa().s[223]++;
      (0, child_process_1.execSync)('pm2 stop all', {
        stdio: 'pipe'
      });
      /* istanbul ignore next */
      cov_8n6mpkaoa().s[224]++;
      (0, child_process_1.execSync)('pm2 delete all', {
        stdio: 'pipe'
      });
      /* istanbul ignore next */
      cov_8n6mpkaoa().s[225]++;
      this.servicesStarted = false;
      /* istanbul ignore next */
      cov_8n6mpkaoa().s[226]++;
      logger_1.logger.info('✅ Test services stopped');
    } catch (error) {
      /* istanbul ignore next */
      cov_8n6mpkaoa().s[227]++;
      logger_1.logger.error('⚠️ Error stopping test services:', error);
    }
  }
  /**
   * Get process status
   */
  async getProcessStatus() {
    /* istanbul ignore next */
    cov_8n6mpkaoa().f[35]++;
    cov_8n6mpkaoa().s[228]++;
    try {
      const pm2List =
      /* istanbul ignore next */
      (cov_8n6mpkaoa().s[229]++, (0, child_process_1.execSync)('pm2 jlist', {
        encoding: 'utf-8'
      }));
      /* istanbul ignore next */
      cov_8n6mpkaoa().s[230]++;
      return JSON.parse(pm2List);
    } catch {
      /* istanbul ignore next */
      cov_8n6mpkaoa().s[231]++;
      return [];
    }
  }
  /**
   * Create timeout promise
   */
  createTimeoutPromise(timeout) {
    /* istanbul ignore next */
    cov_8n6mpkaoa().f[36]++;
    cov_8n6mpkaoa().s[232]++;
    return new Promise((_, reject) => {
      /* istanbul ignore next */
      cov_8n6mpkaoa().f[37]++;
      cov_8n6mpkaoa().s[233]++;
      setTimeout(() => {
        /* istanbul ignore next */
        cov_8n6mpkaoa().f[38]++;
        cov_8n6mpkaoa().s[234]++;
        return reject(new Error('Test timeout'));
      }, timeout);
    });
  }
  /**
   * Save E2E test report
   */
  async saveE2EReport(report) {
    /* istanbul ignore next */
    cov_8n6mpkaoa().f[39]++;
    const timestamp =
    /* istanbul ignore next */
    (cov_8n6mpkaoa().s[235]++, report.timestamp.toISOString().replace(/[:.]/g, '-'));
    const reportPath =
    /* istanbul ignore next */
    (cov_8n6mpkaoa().s[236]++, (0, path_1.join)(process.cwd(), 'logs', `e2e-report-${timestamp}.json`));
    /* istanbul ignore next */
    cov_8n6mpkaoa().s[237]++;
    (0, fs_1.writeFileSync)(reportPath, JSON.stringify(report, null, 2));
    /* istanbul ignore next */
    cov_8n6mpkaoa().s[238]++;
    logger_1.logger.info(`📊 E2E test report saved: ${reportPath}`);
  }
  /**
   * Log E2E test summary
   */
  logE2ESummary(report) {
    /* istanbul ignore next */
    cov_8n6mpkaoa().f[40]++;
    cov_8n6mpkaoa().s[239]++;
    logger_1.logger.info('\n🚀 END-TO-END TEST SUMMARY');
    /* istanbul ignore next */
    cov_8n6mpkaoa().s[240]++;
    logger_1.logger.info('═'.repeat(50));
    /* istanbul ignore next */
    cov_8n6mpkaoa().s[241]++;
    logger_1.logger.info(`Environment: ${report.environment}`);
    /* istanbul ignore next */
    cov_8n6mpkaoa().s[242]++;
    logger_1.logger.info(`Duration: ${Math.round(report.duration / 1000)}s`);
    /* istanbul ignore next */
    cov_8n6mpkaoa().s[243]++;
    logger_1.logger.info(`Total Tests: ${report.summary.total}`);
    /* istanbul ignore next */
    cov_8n6mpkaoa().s[244]++;
    logger_1.logger.info(`✅ Passed: ${report.summary.passed}`);
    /* istanbul ignore next */
    cov_8n6mpkaoa().s[245]++;
    logger_1.logger.info(`❌ Failed: ${report.summary.failed}`);
    /* istanbul ignore next */
    cov_8n6mpkaoa().s[246]++;
    logger_1.logger.info(`⏭️ Skipped: ${report.summary.skipped}`);
    /* istanbul ignore next */
    cov_8n6mpkaoa().s[247]++;
    logger_1.logger.info(`🚨 Critical Failures: ${report.summary.criticalFailed}`);
    /* istanbul ignore next */
    cov_8n6mpkaoa().s[248]++;
    logger_1.logger.info(`🎯 System Ready: ${report.systemReady ?
    /* istanbul ignore next */
    (cov_8n6mpkaoa().b[38][0]++, 'YES') :
    /* istanbul ignore next */
    (cov_8n6mpkaoa().b[38][1]++, 'NO')}`);
    /* istanbul ignore next */
    cov_8n6mpkaoa().s[249]++;
    if (!report.systemReady) {
      /* istanbul ignore next */
      cov_8n6mpkaoa().b[39][0]++;
      cov_8n6mpkaoa().s[250]++;
      logger_1.logger.error('\n❌ E2E TESTS FAILED - System not ready for production');
    } else {
      /* istanbul ignore next */
      cov_8n6mpkaoa().b[39][1]++;
      cov_8n6mpkaoa().s[251]++;
      logger_1.logger.info('\n✅ E2E TESTS PASSED - System ready for production use');
    }
  }
  /**
   * Run specific test suite
   */
  async runTestSuite(suiteName) {
    /* istanbul ignore next */
    cov_8n6mpkaoa().f[41]++;
    const suite =
    /* istanbul ignore next */
    (cov_8n6mpkaoa().s[252]++, this.testSuites.find(s => {
      /* istanbul ignore next */
      cov_8n6mpkaoa().f[42]++;
      cov_8n6mpkaoa().s[253]++;
      return s.name === suiteName;
    }));
    /* istanbul ignore next */
    cov_8n6mpkaoa().s[254]++;
    if (!suite) {
      /* istanbul ignore next */
      cov_8n6mpkaoa().b[40][0]++;
      cov_8n6mpkaoa().s[255]++;
      throw new Error(`Test suite not found: ${suiteName}`);
    } else
    /* istanbul ignore next */
    {
      cov_8n6mpkaoa().b[40][1]++;
    }
    cov_8n6mpkaoa().s[256]++;
    logger_1.logger.info(`🧪 Running E2E test suite: ${suite.name}`);
    // Start services if not already started
    /* istanbul ignore next */
    cov_8n6mpkaoa().s[257]++;
    if (!this.servicesStarted) {
      /* istanbul ignore next */
      cov_8n6mpkaoa().b[41][0]++;
      cov_8n6mpkaoa().s[258]++;
      await this.startTestServices();
    } else
    /* istanbul ignore next */
    {
      cov_8n6mpkaoa().b[41][1]++;
    }
    const results =
    /* istanbul ignore next */
    (cov_8n6mpkaoa().s[259]++, []);
    // Run suite setup
    /* istanbul ignore next */
    cov_8n6mpkaoa().s[260]++;
    if (suite.setup) {
      /* istanbul ignore next */
      cov_8n6mpkaoa().b[42][0]++;
      cov_8n6mpkaoa().s[261]++;
      await suite.setup();
    } else
    /* istanbul ignore next */
    {
      cov_8n6mpkaoa().b[42][1]++;
    }
    cov_8n6mpkaoa().s[262]++;
    try {
      /* istanbul ignore next */
      cov_8n6mpkaoa().s[263]++;
      // Run tests
      for (const test of suite.tests) {
        const testStartTime =
        /* istanbul ignore next */
        (cov_8n6mpkaoa().s[264]++, Date.now());
        /* istanbul ignore next */
        cov_8n6mpkaoa().s[265]++;
        try {
          const testResult =
          /* istanbul ignore next */
          (cov_8n6mpkaoa().s[266]++, await Promise.race([test.test(), this.createTimeoutPromise(test.timeout)]));
          const duration =
          /* istanbul ignore next */
          (cov_8n6mpkaoa().s[267]++, Date.now() - testStartTime);
          const status =
          /* istanbul ignore next */
          (cov_8n6mpkaoa().s[268]++, testResult.success ?
          /* istanbul ignore next */
          (cov_8n6mpkaoa().b[43][0]++, 'PASS') :
          /* istanbul ignore next */
          (cov_8n6mpkaoa().b[43][1]++, 'FAIL'));
          /* istanbul ignore next */
          cov_8n6mpkaoa().s[269]++;
          results.push({
            name: test.name,
            category: suite.name,
            status,
            duration,
            message: testResult.message,
            details: testResult.details,
            critical: test.critical
          });
        } catch (error) {
          const duration =
          /* istanbul ignore next */
          (cov_8n6mpkaoa().s[270]++, Date.now() - testStartTime);
          /* istanbul ignore next */
          cov_8n6mpkaoa().s[271]++;
          results.push({
            name: test.name,
            category: suite.name,
            status: 'FAIL',
            duration,
            message: error.message === 'Test timeout' ?
            /* istanbul ignore next */
            (cov_8n6mpkaoa().b[44][0]++, 'Test timed out') :
            /* istanbul ignore next */
            (cov_8n6mpkaoa().b[44][1]++, `Test error: ${error.message}`),
            details: {
              error: error.message
            },
            critical: test.critical
          });
        }
      }
    } finally {
      /* istanbul ignore next */
      cov_8n6mpkaoa().s[272]++;
      // Run suite teardown
      if (suite.teardown) {
        /* istanbul ignore next */
        cov_8n6mpkaoa().b[45][0]++;
        cov_8n6mpkaoa().s[273]++;
        await suite.teardown();
      } else
      /* istanbul ignore next */
      {
        cov_8n6mpkaoa().b[45][1]++;
      }
    }
    /* istanbul ignore next */
    cov_8n6mpkaoa().s[274]++;
    return results;
  }
  /**
   * Get available test suites
   */
  getTestSuites() {
    /* istanbul ignore next */
    cov_8n6mpkaoa().f[43]++;
    cov_8n6mpkaoa().s[275]++;
    return this.testSuites.map(suite => {
      /* istanbul ignore next */
      cov_8n6mpkaoa().f[44]++;
      cov_8n6mpkaoa().s[276]++;
      return {
        name: suite.name,
        description: suite.description,
        enabled: suite.enabled
      };
    });
  }
}
/* istanbul ignore next */
cov_8n6mpkaoa().s[277]++;
exports.E2ETestRunner = E2ETestRunner;
// Export singleton instance
/* istanbul ignore next */
cov_8n6mpkaoa().s[278]++;
exports.e2eTestRunner = new E2ETestRunner();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,