{"version":3,"names":["cov_mzgom6xlz","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","events_1","require","logger_1","gate_io_client_1","order_manager_1","balance_manager_1","portfolio_risk_manager_1","moving_average_1","macd_1","rsi_1","TradingEngine","EventEmitter","logger","config","gateIOClient","orderManager","balanceManager","riskManager","strategies","isRunning","isInitialized","marketDataInterval","healthCheckInterval","constructor","Logger","Map","GateIOClient","apiKey","apiSecret","passphrase","testnet","baseUrl","OrderManager","BalanceManager","PortfolioRiskManager","maxPositionSize","riskSettings","maxDailyLoss","stopLossPercent","takeProfitPercent","info","exchange","defaultStrategy","initialize","initializeStrategies","testAPIConnectivity","loadAccountData","emit","error","Error","warn","startMarketDataProcessing","startHealthMonitoring","startStrategyExecution","shutdown","clearInterval","cancelAllOrders","getSystemHealth","health","isHealthy","components","apiConnection","lastUpdate","Date","errors","warnings","isConnected","size","Object","values","every","status","push","getTradingStats","orderHistory","getOrderHistory","balance","getTotalBalance","completedTrades","filter","order","winningTrades","stats","totalTrades","length","losingTrades","winRate","totalPnL","dailyPnL","maxDrawdown","sharpeRatio","lastTradeTime","timestamp","executeTrade","symbol","side","amount","price","riskCheck","validateTrade","approved","reason","createOrder","orderId","id","getPortfolioStatus","getBalance","positions","getPositions","openOrders","getOpenOrders","maStrategy","MovingAverageStrategy","fastPeriod","slowPeriod","set","macdStrategy","MACDStrategy","signalPeriod","rsiStrategy","RSIStrategy","period","overbought","oversold","serverTime","getServerTime","accountInfo","getAccountInfo","userId","user_id","refreshBalance","refreshOpenOrders","setInterval","strategy","isActive","processStrategySignals","get","strategyName","marketData","getMarketData","signal","generateSignal","action","confidence","executeStrategyTrade","calculatePositionSize","getStatus","strategiesCount","now","exports","default"],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\trading-engine.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * AI CRYPTO TRADING AGENT - TRADING ENGINE\r\n * =============================================================================\r\n * \r\n * Core trading engine that manages all trading operations, order execution,\r\n * position management, and integration with Gate.io through SSH tunnel.\r\n * \r\n * This is the heart of the trading system that coordinates:\r\n * - Market data processing\r\n * - Strategy execution\r\n * - Order management\r\n * - Risk management\r\n * - Portfolio tracking\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport { EventEmitter } from 'events';\r\nimport { Logger } from '../core/logging/logger';\r\nimport { GateIOClient } from './api/gate-io-client';\r\nimport { OrderManager } from './orders/order-manager';\r\nimport { BalanceManager } from './account/balance-manager';\r\nimport { PortfolioRiskManager } from './risk/portfolio-risk-manager';\r\nimport { MovingAverageStrategy } from './strategies/moving-average';\r\nimport { MACDStrategy } from './strategies/macd';\r\nimport { RSIStrategy } from './strategies/rsi';\r\n\r\n/**\r\n * Trading engine configuration interface\r\n */\r\nexport interface TradingEngineConfig {\r\n  exchange: string;\r\n  apiKey: string;\r\n  apiSecret: string;\r\n  passphrase?: string;\r\n  testnet: boolean;\r\n  baseUrl?: string;\r\n  defaultStrategy: string;\r\n  riskSettings: {\r\n    maxPositionSize: number;\r\n    maxDailyLoss: number;\r\n    stopLossPercent: number;\r\n    takeProfitPercent: number;\r\n  };\r\n}\r\n\r\n/**\r\n * Trading engine system health interface\r\n */\r\nexport interface TradingSystemHealth {\r\n  isHealthy: boolean;\r\n  components: {\r\n    apiConnection: boolean;\r\n    orderManager: boolean;\r\n    balanceManager: boolean;\r\n    riskManager: boolean;\r\n    strategies: boolean;\r\n  };\r\n  lastUpdate: Date;\r\n  errors: string[];\r\n  warnings: string[];\r\n}\r\n\r\n/**\r\n * Trading statistics interface\r\n */\r\nexport interface TradingStats {\r\n  totalTrades: number;\r\n  winningTrades: number;\r\n  losingTrades: number;\r\n  winRate: number;\r\n  totalPnL: number;\r\n  dailyPnL: number;\r\n  maxDrawdown: number;\r\n  sharpeRatio: number;\r\n  lastTradeTime: Date | null;\r\n}\r\n\r\n/**\r\n * Main trading engine class\r\n * Orchestrates all trading operations and system components\r\n */\r\nexport class TradingEngine extends EventEmitter {\r\n  private logger: Logger;\r\n  private config: TradingEngineConfig;\r\n  private gateIOClient: GateIOClient;\r\n  private orderManager: OrderManager;\r\n  private balanceManager: BalanceManager;\r\n  private riskManager: PortfolioRiskManager;\r\n  private strategies: Map<string, any>;\r\n  private isRunning: boolean = false;\r\n  private isInitialized: boolean = false;\r\n  private marketDataInterval: NodeJS.Timeout | null = null;\r\n  private healthCheckInterval: NodeJS.Timeout | null = null;\r\n\r\n  constructor(config: TradingEngineConfig) {\r\n    super();\r\n    this.logger = new Logger('TradingEngine');\r\n    this.config = config;\r\n    this.strategies = new Map();\r\n    \r\n    // Initialize components\r\n    this.gateIOClient = new GateIOClient({\r\n      apiKey: config.apiKey,\r\n      apiSecret: config.apiSecret,\r\n      passphrase: config.passphrase,\r\n      testnet: config.testnet,\r\n      baseUrl: config.baseUrl || 'http://localhost:8443' // SSH tunnel endpoint\r\n    });\r\n\r\n    this.orderManager = new OrderManager(this.gateIOClient);\r\n    this.balanceManager = new BalanceManager(this.gateIOClient);\r\n    this.riskManager = new PortfolioRiskManager({\r\n      maxPositionSize: config.riskSettings.maxPositionSize,\r\n      maxDailyLoss: config.riskSettings.maxDailyLoss,\r\n      stopLossPercent: config.riskSettings.stopLossPercent,\r\n      takeProfitPercent: config.riskSettings.takeProfitPercent\r\n    });\r\n\r\n    this.logger.info('Trading Engine created', {\r\n      exchange: config.exchange,\r\n      testnet: config.testnet,\r\n      defaultStrategy: config.defaultStrategy\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Initialize the trading engine\r\n   * Sets up all components and validates connections\r\n   */\r\n  async initialize(): Promise<void> {\r\n    try {\r\n      this.logger.info('üîß Initializing Trading Engine...');\r\n\r\n      // Initialize Gate.io API client\r\n      await this.gateIOClient.initialize();\r\n      this.logger.info('‚úÖ Gate.io API client initialized');\r\n\r\n      // Initialize order manager\r\n      await this.orderManager.initialize();\r\n      this.logger.info('‚úÖ Order manager initialized');\r\n\r\n      // Initialize balance manager\r\n      await this.balanceManager.initialize();\r\n      this.logger.info('‚úÖ Balance manager initialized');\r\n\r\n      // Initialize risk manager\r\n      await this.riskManager.initialize();\r\n      this.logger.info('‚úÖ Risk manager initialized');\r\n\r\n      // Initialize trading strategies\r\n      await this.initializeStrategies();\r\n      this.logger.info('‚úÖ Trading strategies initialized');\r\n\r\n      // Test API connectivity\r\n      await this.testAPIConnectivity();\r\n      this.logger.info('‚úÖ API connectivity verified');\r\n\r\n      // Load initial account data\r\n      await this.loadAccountData();\r\n      this.logger.info('‚úÖ Account data loaded');\r\n\r\n      this.isInitialized = true;\r\n      this.logger.info('‚úÖ Trading Engine initialization complete');\r\n\r\n      this.emit('initialized');\r\n\r\n    } catch (error) {\r\n      this.logger.error('‚ùå Trading Engine initialization failed:', error);\r\n      throw new Error(`Trading Engine initialization failed: ${error}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Start trading operations\r\n   * Begins market data processing and strategy execution\r\n   */\r\n  async start(): Promise<void> {\r\n    if (!this.isInitialized) {\r\n      throw new Error('Trading Engine must be initialized before starting');\r\n    }\r\n\r\n    if (this.isRunning) {\r\n      this.logger.warn('Trading Engine is already running');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      this.logger.info('üöÄ Starting Trading Engine...');\r\n\r\n      // Start market data processing\r\n      this.startMarketDataProcessing();\r\n\r\n      // Start health monitoring\r\n      this.startHealthMonitoring();\r\n\r\n      // Start strategy execution\r\n      this.startStrategyExecution();\r\n\r\n      this.isRunning = true;\r\n      this.logger.info('‚úÖ Trading Engine started successfully');\r\n\r\n      this.emit('started');\r\n\r\n    } catch (error) {\r\n      this.logger.error('‚ùå Failed to start Trading Engine:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop trading operations\r\n   * Gracefully shuts down all trading activities\r\n   */\r\n  async shutdown(): Promise<void> {\r\n    if (!this.isRunning) {\r\n      this.logger.warn('Trading Engine is not running');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      this.logger.info('üõë Shutting down Trading Engine...');\r\n\r\n      // Stop market data processing\r\n      if (this.marketDataInterval) {\r\n        clearInterval(this.marketDataInterval);\r\n        this.marketDataInterval = null;\r\n      }\r\n\r\n      // Stop health monitoring\r\n      if (this.healthCheckInterval) {\r\n        clearInterval(this.healthCheckInterval);\r\n        this.healthCheckInterval = null;\r\n      }\r\n\r\n      // Cancel all open orders\r\n      await this.orderManager.cancelAllOrders();\r\n\r\n      // Close all positions (if configured)\r\n      // await this.closeAllPositions();\r\n\r\n      this.isRunning = false;\r\n      this.logger.info('‚úÖ Trading Engine shutdown complete');\r\n\r\n      this.emit('shutdown');\r\n\r\n    } catch (error) {\r\n      this.logger.error('‚ùå Error during Trading Engine shutdown:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get system health status\r\n   */\r\n  async getSystemHealth(): Promise<TradingSystemHealth> {\r\n    const health: TradingSystemHealth = {\r\n      isHealthy: true,\r\n      components: {\r\n        apiConnection: false,\r\n        orderManager: false,\r\n        balanceManager: false,\r\n        riskManager: false,\r\n        strategies: false\r\n      },\r\n      lastUpdate: new Date(),\r\n      errors: [],\r\n      warnings: []\r\n    };\r\n\r\n    try {\r\n      // Check API connection\r\n      health.components.apiConnection = await this.gateIOClient.isConnected();\r\n      \r\n      // Check order manager\r\n      health.components.orderManager = this.orderManager.isHealthy();\r\n      \r\n      // Check balance manager\r\n      health.components.balanceManager = this.balanceManager.isHealthy();\r\n      \r\n      // Check risk manager\r\n      health.components.riskManager = this.riskManager.isHealthy();\r\n      \r\n      // Check strategies\r\n      health.components.strategies = this.strategies.size > 0;\r\n\r\n      // Overall health\r\n      health.isHealthy = Object.values(health.components).every(status => status);\r\n\r\n      if (!health.isHealthy) {\r\n        health.errors.push('One or more components are unhealthy');\r\n      }\r\n\r\n    } catch (error) {\r\n      health.isHealthy = false;\r\n      health.errors.push(`Health check failed: ${error}`);\r\n    }\r\n\r\n    return health;\r\n  }\r\n\r\n  /**\r\n   * Get trading statistics\r\n   */\r\n  async getTradingStats(): Promise<TradingStats> {\r\n    try {\r\n      const orderHistory = await this.orderManager.getOrderHistory();\r\n      const balance = await this.balanceManager.getTotalBalance();\r\n\r\n      // Calculate statistics from order history\r\n      const completedTrades = orderHistory.filter(order => order.status === 'filled');\r\n      const winningTrades = completedTrades.filter(order => {\r\n        // This would need proper P&L calculation\r\n        return true; // Placeholder\r\n      });\r\n\r\n      const stats: TradingStats = {\r\n        totalTrades: completedTrades.length,\r\n        winningTrades: winningTrades.length,\r\n        losingTrades: completedTrades.length - winningTrades.length,\r\n        winRate: completedTrades.length > 0 ? (winningTrades.length / completedTrades.length) * 100 : 0,\r\n        totalPnL: 0, // Would calculate from trade history\r\n        dailyPnL: 0, // Would calculate from today's trades\r\n        maxDrawdown: 0, // Would calculate from balance history\r\n        sharpeRatio: 0, // Would calculate from returns\r\n        lastTradeTime: completedTrades.length > 0 ? completedTrades[completedTrades.length - 1].timestamp : null\r\n      };\r\n\r\n      return stats;\r\n\r\n    } catch (error) {\r\n      this.logger.error('Error getting trading stats:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Execute a manual trade\r\n   */\r\n  async executeTrade(symbol: string, side: 'buy' | 'sell', amount: number, price?: number): Promise<any> {\r\n    try {\r\n      this.logger.info('Executing manual trade', { symbol, side, amount, price });\r\n\r\n      // Risk check\r\n      const riskCheck = await this.riskManager.validateTrade({\r\n        symbol,\r\n        side,\r\n        amount,\r\n        price: price || 0\r\n      });\r\n\r\n      if (!riskCheck.approved) {\r\n        throw new Error(`Trade rejected by risk manager: ${riskCheck.reason}`);\r\n      }\r\n\r\n      // Execute order\r\n      const order = await this.orderManager.createOrder({\r\n        symbol,\r\n        side,\r\n        amount,\r\n        price,\r\n        type: price ? 'limit' : 'market'\r\n      });\r\n\r\n      this.logger.info('Manual trade executed', { orderId: order.id });\r\n      this.emit('tradeExecuted', order);\r\n\r\n      return order;\r\n\r\n    } catch (error) {\r\n      this.logger.error('Manual trade execution failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get current portfolio status\r\n   */\r\n  async getPortfolioStatus(): Promise<any> {\r\n    try {\r\n      const balance = await this.balanceManager.getBalance();\r\n      const positions = await this.balanceManager.getPositions();\r\n      const openOrders = await this.orderManager.getOpenOrders();\r\n\r\n      return {\r\n        balance,\r\n        positions,\r\n        openOrders,\r\n        timestamp: new Date()\r\n      };\r\n\r\n    } catch (error) {\r\n      this.logger.error('Error getting portfolio status:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialize trading strategies\r\n   */\r\n  private async initializeStrategies(): Promise<void> {\r\n    try {\r\n      // Initialize Moving Average strategy\r\n      const maStrategy = new MovingAverageStrategy({\r\n        fastPeriod: 20,\r\n        slowPeriod: 50,\r\n        symbol: 'BTC_USDT'\r\n      });\r\n      this.strategies.set('moving-average', maStrategy);\r\n\r\n      // Initialize MACD strategy\r\n      const macdStrategy = new MACDStrategy({\r\n        fastPeriod: 12,\r\n        slowPeriod: 26,\r\n        signalPeriod: 9,\r\n        symbol: 'BTC_USDT'\r\n      });\r\n      this.strategies.set('macd', macdStrategy);\r\n\r\n      // Initialize RSI strategy\r\n      const rsiStrategy = new RSIStrategy({\r\n        period: 14,\r\n        overbought: 70,\r\n        oversold: 30,\r\n        symbol: 'BTC_USDT'\r\n      });\r\n      this.strategies.set('rsi', rsiStrategy);\r\n\r\n      this.logger.info(`Initialized ${this.strategies.size} trading strategies`);\r\n\r\n    } catch (error) {\r\n      this.logger.error('Strategy initialization failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Test API connectivity\r\n   */\r\n  private async testAPIConnectivity(): Promise<void> {\r\n    try {\r\n      // Test basic API connectivity\r\n      const serverTime = await this.gateIOClient.getServerTime();\r\n      this.logger.info('API connectivity test passed', { serverTime });\r\n\r\n      // Test account access\r\n      const accountInfo = await this.gateIOClient.getAccountInfo();\r\n      this.logger.info('Account access verified', { \r\n        userId: accountInfo.user_id || 'N/A' \r\n      });\r\n\r\n    } catch (error) {\r\n      this.logger.error('API connectivity test failed:', error);\r\n      throw new Error(`API connectivity test failed: ${error}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load initial account data\r\n   */\r\n  private async loadAccountData(): Promise<void> {\r\n    try {\r\n      // Load account balance\r\n      await this.balanceManager.refreshBalance();\r\n      \r\n      // Load open orders\r\n      await this.orderManager.refreshOpenOrders();\r\n\r\n      this.logger.info('Account data loaded successfully');\r\n\r\n    } catch (error) {\r\n      this.logger.error('Failed to load account data:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Start market data processing\r\n   */\r\n  private startMarketDataProcessing(): void {\r\n    this.marketDataInterval = setInterval(async () => {\r\n      try {\r\n        // Process market data for each strategy\r\n        for (const [name, strategy] of this.strategies) {\r\n          if (strategy.isActive) {\r\n            await this.processStrategySignals(name, strategy);\r\n          }\r\n        }\r\n      } catch (error) {\r\n        this.logger.error('Market data processing error:', error);\r\n      }\r\n    }, 30000); // Process every 30 seconds\r\n\r\n    this.logger.info('Market data processing started');\r\n  }\r\n\r\n  /**\r\n   * Start health monitoring\r\n   */\r\n  private startHealthMonitoring(): void {\r\n    this.healthCheckInterval = setInterval(async () => {\r\n      try {\r\n        const health = await this.getSystemHealth();\r\n        if (!health.isHealthy) {\r\n          this.logger.warn('System health check failed', health.errors);\r\n          this.emit('healthWarning', health);\r\n        }\r\n      } catch (error) {\r\n        this.logger.error('Health monitoring error:', error);\r\n      }\r\n    }, 60000); // Check every minute\r\n\r\n    this.logger.info('Health monitoring started');\r\n  }\r\n\r\n  /**\r\n   * Start strategy execution\r\n   */\r\n  private startStrategyExecution(): void {\r\n    // Enable the default strategy\r\n    const defaultStrategy = this.strategies.get(this.config.defaultStrategy);\r\n    if (defaultStrategy) {\r\n      defaultStrategy.isActive = true;\r\n      this.logger.info(`Activated default strategy: ${this.config.defaultStrategy}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Process signals from a trading strategy\r\n   */\r\n  private async processStrategySignals(strategyName: string, strategy: any): Promise<void> {\r\n    try {\r\n      // Get market data\r\n      const marketData = await this.gateIOClient.getMarketData(strategy.symbol);\r\n      \r\n      // Generate trading signal\r\n      const signal = await strategy.generateSignal(marketData);\r\n      \r\n      if (signal && signal.action !== 'hold') {\r\n        this.logger.info(`Strategy signal generated`, {\r\n          strategy: strategyName,\r\n          signal: signal.action,\r\n          symbol: signal.symbol,\r\n          confidence: signal.confidence\r\n        });\r\n\r\n        // Execute trade if confidence is high enough\r\n        if (signal.confidence > 0.7) {\r\n          await this.executeStrategyTrade(signal);\r\n        }\r\n      }\r\n\r\n    } catch (error) {\r\n      this.logger.error(`Strategy processing error for ${strategyName}:`, error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Execute a trade based on strategy signal\r\n   */\r\n  private async executeStrategyTrade(signal: any): Promise<void> {\r\n    try {\r\n      const amount = await this.riskManager.calculatePositionSize(signal);\r\n      \r\n      await this.executeTrade(\r\n        signal.symbol,\r\n        signal.action,\r\n        amount,\r\n        signal.price\r\n      );\r\n\r\n    } catch (error) {\r\n      this.logger.error('Strategy trade execution failed:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get trading engine status for monitoring\r\n   */\r\n  getStatus(): {\r\n    isRunning: boolean;\r\n    isInitialized: boolean;\r\n    strategiesCount: number;\r\n    timestamp: number;\r\n  } {\r\n    return {\r\n      isRunning: this.isRunning,\r\n      isInitialized: this.isInitialized,\r\n      strategiesCount: this.strategies.size,\r\n      timestamp: Date.now()\r\n    };\r\n  }\r\n}\r\n\r\nexport default TradingEngine;\r\n"],"mappings":"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","ignoreList":[]}