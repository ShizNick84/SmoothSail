{"version":3,"names":["cov_n7stll51c","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","events_1","require","logger_1","AdaptiveLearner","EventEmitter","llmEngine","isInitialized","tradingOutcomes","strategyPerformance","Map","learningInsights","maxHistorySize","learningUpdateInterval","learningTimer","LEARNING_CONFIG","minTradesForLearning","minTradesForOptimization","confidenceThreshold","significanceThreshold","adaptationThreshold","maxParameterChange","learningRate","explorationRate","constructor","logger","info","initialize","isReady","Error","loadHistoricalData","initializeStrategyTracking","startLearningCycle","emit","error","initializeMockData","length","mockOutcomes","decisionId","symbol","decision","entryPrice","exitPrice","quantity","timestamp","Date","now","exitTimestamp","pnl","pnlPercentage","holdingPeriod","strategy","confidence","riskReward","marketConditions","volatility","trend","sentiment","volume","outcome","outcomeQuality","strategies","performance","strategyName","totalTrades","winRate","avgPnL","avgPnLPercentage","maxDrawdown","sharpeRatio","profitFactor","performanceByCondition","recentPerformance","last10Trades","last30Days","lastUpdated","set","setInterval","performLearningUpdate","recordTradingOutcome","push","slice","updateStrategyPerformance","feedback","generateLearningFeedback","performImmediateLearning","get","isWin","oldWinRate","oldAvgPnL","oldAvgPnLPercentage","toFixed","accuracy","actualOutcome","predictionId","notes","insights","generateInsightsFromOutcome","insight","impact","recommendation","supportingData","updateAllStrategyPerformance","generatePeriodicInsights","cleanupOldData","totalOutcomes","strategyOutcomes","filter","o","wins","reduce","sum","recentOutcomes","avgReturn","trades","maxAge","cutoffDate","getStrategyPerformance","Array","from","values","getLearningInsights","limit","sort","a","getTime","getLearningSummary","overallWinRate","bestStrategy","best","current","worstStrategy","worst","keyInsights","shutdown","clearInterval","clear","exports"],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\ai\\adaptive-learner.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * ADAPTIVE LEARNER - AI LEARNING AND OPTIMIZATION SYSTEM\r\n * =============================================================================\r\n * \r\n * This module implements adaptive learning and continuous optimization for\r\n * the AI trading system. It learns from trading outcomes, market conditions,\r\n * and performance feedback to continuously improve decision-making and\r\n * strategy parameters.\r\n * \r\n * Key Features:\r\n * - Performance feedback loops for strategy improvement\r\n * - Market condition adaptation mechanisms\r\n * - Strategy parameter optimization based on results\r\n * - Continuous learning from trading outcomes\r\n * - Model performance tracking and adjustment\r\n * - Automated hyperparameter tuning\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport { EventEmitter } from 'events';\r\nimport { logger } from '@/core/logging/logger';\r\nimport { LLMEngine } from './llm-engine';\r\nimport type { LearningFeedback } from './llm-engine';\r\n\r\n/**\r\n * Interface for trading outcome data\r\n */\r\ninterface TradingOutcome {\r\n  decisionId: string;\r\n  symbol: string;\r\n  decision: 'BUY' | 'SELL' | 'HOLD';\r\n  entryPrice: number;\r\n  exitPrice?: number;\r\n  quantity: number;\r\n  timestamp: Date;\r\n  exitTimestamp?: Date;\r\n  \r\n  // Performance metrics\r\n  pnl: number; // Profit/Loss in dollars\r\n  pnlPercentage: number; // Profit/Loss percentage\r\n  holdingPeriod: number; // Hours held\r\n  \r\n  // Strategy information\r\n  strategy: string;\r\n  confidence: number;\r\n  riskReward: number;\r\n  \r\n  // Market conditions at time of trade\r\n  marketConditions: {\r\n    volatility: string;\r\n    trend: string;\r\n    sentiment: number;\r\n    volume: number;\r\n  };\r\n  \r\n  // Outcome classification\r\n  outcome: 'WIN' | 'LOSS' | 'BREAKEVEN';\r\n  outcomeQuality: 'EXCELLENT' | 'GOOD' | 'AVERAGE' | 'POOR' | 'TERRIBLE';\r\n}\r\n\r\n/**\r\n * Interface for strategy performance metrics\r\n */\r\ninterface StrategyPerformance {\r\n  strategyName: string;\r\n  totalTrades: number;\r\n  winRate: number; // 0-100\r\n  avgPnL: number;\r\n  avgPnLPercentage: number;\r\n  maxDrawdown: number;\r\n  sharpeRatio: number;\r\n  profitFactor: number;\r\n  \r\n  // Performance by market conditions\r\n  performanceByCondition: {\r\n    [condition: string]: {\r\n      trades: number;\r\n      winRate: number;\r\n      avgPnL: number;\r\n    };\r\n  };\r\n  \r\n  // Recent performance trend\r\n  recentPerformance: {\r\n    last10Trades: number; // Win rate\r\n    last30Days: number; // Win rate\r\n    trend: 'IMPROVING' | 'DECLINING' | 'STABLE';\r\n  };\r\n  \r\n  lastUpdated: Date;\r\n}\r\n\r\n/**\r\n * Interface for learning insights\r\n */\r\ninterface LearningInsight {\r\n  type: 'STRATEGY' | 'PARAMETER' | 'MARKET_CONDITION' | 'RISK_MANAGEMENT' | 'TIMING';\r\n  insight: string;\r\n  confidence: number; // 0-100\r\n  impact: 'HIGH' | 'MEDIUM' | 'LOW';\r\n  recommendation: string;\r\n  supportingData: any;\r\n  timestamp: Date;\r\n}\r\n\r\n/**\r\n * Adaptive Learner class for continuous system improvement\r\n */\r\nexport class AdaptiveLearner extends EventEmitter {\r\n  private llmEngine: LLMEngine;\r\n  private isInitialized: boolean = false;\r\n  private tradingOutcomes: TradingOutcome[] = [];\r\n  private strategyPerformance: Map<string, StrategyPerformance> = new Map();\r\n  private learningInsights: LearningInsight[] = [];\r\n  \r\n  private maxHistorySize: number = 10000;\r\n  private learningUpdateInterval: number = 3600000; // 1 hour\r\n  private learningTimer: NodeJS.Timeout | null = null;\r\n\r\n  // Learning configuration\r\n  private readonly LEARNING_CONFIG = {\r\n    minTradesForLearning: 50,\r\n    minTradesForOptimization: 100,\r\n    confidenceThreshold: 70,\r\n    significanceThreshold: 0.05, // Statistical significance\r\n    adaptationThreshold: 5, // Minimum % improvement to adapt\r\n    maxParameterChange: 0.2, // Maximum 20% parameter change per iteration\r\n    learningRate: 0.1, // Learning rate for parameter updates\r\n    explorationRate: 0.1 // Exploration vs exploitation balance\r\n  };\r\n\r\n  constructor(llmEngine: LLMEngine) {\r\n    super();\r\n    this.llmEngine = llmEngine;\r\n\r\n    logger.info('üß† Adaptive Learner initialized');\r\n  }\r\n\r\n  /**\r\n   * Initialize the adaptive learner\r\n   */\r\n  public async initialize(): Promise<void> {\r\n    try {\r\n      logger.info('üöÄ Initializing Adaptive Learner...');\r\n\r\n      // Verify LLM engine is ready\r\n      if (!this.llmEngine.isReady()) {\r\n        throw new Error('LLM Engine is not ready');\r\n      }\r\n\r\n      // Load historical data if available\r\n      await this.loadHistoricalData();\r\n\r\n      // Initialize strategy performance tracking\r\n      await this.initializeStrategyTracking();\r\n\r\n      // Start learning update cycle\r\n      this.startLearningCycle();\r\n\r\n      this.isInitialized = true;\r\n      logger.info('‚úÖ Adaptive Learner initialized successfully');\r\n\r\n      this.emit('initialized');\r\n\r\n    } catch (error) {\r\n      logger.error('‚ùå Failed to initialize Adaptive Learner:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load historical trading data for learning\r\n   */\r\n  private async loadHistoricalData(): Promise<void> {\r\n    try {\r\n      // In production, this would load from database\r\n      // For now, initialize with empty data\r\n      logger.info('üìö Loading historical trading data for learning...');\r\n      \r\n      // Mock some historical data for demonstration\r\n      this.initializeMockData();\r\n      \r\n      logger.info(`üìä Loaded ${this.tradingOutcomes.length} historical trading outcomes`);\r\n      \r\n    } catch (error) {\r\n      logger.error('‚ùå Error loading historical data:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialize mock data for demonstration\r\n   */\r\n  private initializeMockData(): void {\r\n    // Create some mock trading outcomes\r\n    const mockOutcomes: TradingOutcome[] = [\r\n      {\r\n        decisionId: 'DEC_12345678',\r\n        symbol: 'BTC',\r\n        decision: 'BUY',\r\n        entryPrice: 45000,\r\n        exitPrice: 46500,\r\n        quantity: 0.1,\r\n        timestamp: new Date(Date.now() - 86400000 * 7), // 7 days ago\r\n        exitTimestamp: new Date(Date.now() - 86400000 * 6), // 6 days ago\r\n        pnl: 150,\r\n        pnlPercentage: 3.33,\r\n        holdingPeriod: 24,\r\n        strategy: 'moving_average_crossover',\r\n        confidence: 75,\r\n        riskReward: 1.5,\r\n        marketConditions: {\r\n          volatility: 'MEDIUM',\r\n          trend: 'BULLISH',\r\n          sentiment: 35,\r\n          volume: 1500000\r\n        },\r\n        outcome: 'WIN',\r\n        outcomeQuality: 'GOOD'\r\n      },\r\n      {\r\n        decisionId: 'DEC_87654321',\r\n        symbol: 'ETH',\r\n        decision: 'SELL',\r\n        entryPrice: 3200,\r\n        exitPrice: 3100,\r\n        quantity: 1.0,\r\n        timestamp: new Date(Date.now() - 86400000 * 5), // 5 days ago\r\n        exitTimestamp: new Date(Date.now() - 86400000 * 4), // 4 days ago\r\n        pnl: -100,\r\n        pnlPercentage: -3.125,\r\n        holdingPeriod: 18,\r\n        strategy: 'rsi_momentum',\r\n        confidence: 68,\r\n        riskReward: 1.3,\r\n        marketConditions: {\r\n          volatility: 'HIGH',\r\n          trend: 'BEARISH',\r\n          sentiment: -25,\r\n          volume: 800000\r\n        },\r\n        outcome: 'LOSS',\r\n        outcomeQuality: 'AVERAGE'\r\n      }\r\n    ];\r\n\r\n    this.tradingOutcomes = mockOutcomes;\r\n  }\r\n\r\n  /**\r\n   * Initialize strategy performance tracking\r\n   */\r\n  private async initializeStrategyTracking(): Promise<void> {\r\n    const strategies = ['moving_average_crossover', 'rsi_momentum', 'macd_trend', 'fibonacci_retracement'];\r\n    \r\n    for (const strategy of strategies) {\r\n      const performance: StrategyPerformance = {\r\n        strategyName: strategy,\r\n        totalTrades: 0,\r\n        winRate: 0,\r\n        avgPnL: 0,\r\n        avgPnLPercentage: 0,\r\n        maxDrawdown: 0,\r\n        sharpeRatio: 0,\r\n        profitFactor: 0,\r\n        performanceByCondition: {},\r\n        recentPerformance: {\r\n          last10Trades: 0,\r\n          last30Days: 0,\r\n          trend: 'STABLE'\r\n        },\r\n        lastUpdated: new Date()\r\n      };\r\n      \r\n      this.strategyPerformance.set(strategy, performance);\r\n    }\r\n\r\n    logger.info(`üìà Initialized tracking for ${strategies.length} strategies`);\r\n  }\r\n\r\n  /**\r\n   * Start the learning cycle\r\n   */\r\n  private startLearningCycle(): void {\r\n    this.learningTimer = setInterval(async () => {\r\n      try {\r\n        await this.performLearningUpdate();\r\n      } catch (error) {\r\n        logger.error('‚ùå Error in learning cycle:', error);\r\n      }\r\n    }, this.learningUpdateInterval);\r\n\r\n    logger.info('üîÑ Learning cycle started');\r\n  }\r\n\r\n  /**\r\n   * Record a trading outcome for learning\r\n   */\r\n  public async recordTradingOutcome(outcome: TradingOutcome): Promise<void> {\r\n    try {\r\n      logger.info(`üìù Recording trading outcome: ${outcome.symbol} ${outcome.decision} - ${outcome.outcome}`);\r\n\r\n      // Add to outcomes history\r\n      this.tradingOutcomes.push(outcome);\r\n      \r\n      // Maintain history size limit\r\n      if (this.tradingOutcomes.length > this.maxHistorySize) {\r\n        this.tradingOutcomes = this.tradingOutcomes.slice(-this.maxHistorySize);\r\n      }\r\n\r\n      // Update strategy performance\r\n      await this.updateStrategyPerformance(outcome);\r\n\r\n      // Generate learning feedback\r\n      const feedback = this.generateLearningFeedback(outcome);\r\n      \r\n      // Trigger immediate learning if significant outcome\r\n      if (outcome.outcomeQuality === 'EXCELLENT' || outcome.outcomeQuality === 'TERRIBLE') {\r\n        await this.performImmediateLearning(outcome);\r\n      }\r\n\r\n      this.emit('outcomeRecorded', outcome);\r\n\r\n    } catch (error) {\r\n      logger.error('‚ùå Error recording trading outcome:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update strategy performance metrics\r\n   */\r\n  private async updateStrategyPerformance(outcome: TradingOutcome): Promise<void> {\r\n    const performance = this.strategyPerformance.get(outcome.strategy);\r\n    if (!performance) return;\r\n\r\n    // Update basic metrics\r\n    performance.totalTrades++;\r\n    \r\n    const isWin = outcome.outcome === 'WIN';\r\n    const oldWinRate = performance.winRate;\r\n    performance.winRate = ((oldWinRate * (performance.totalTrades - 1)) + (isWin ? 100 : 0)) / performance.totalTrades;\r\n    \r\n    const oldAvgPnL = performance.avgPnL;\r\n    performance.avgPnL = ((oldAvgPnL * (performance.totalTrades - 1)) + outcome.pnl) / performance.totalTrades;\r\n    \r\n    const oldAvgPnLPercentage = performance.avgPnLPercentage;\r\n    performance.avgPnLPercentage = ((oldAvgPnLPercentage * (performance.totalTrades - 1)) + outcome.pnlPercentage) / performance.totalTrades;\r\n\r\n    performance.lastUpdated = new Date();\r\n\r\n    logger.info(`üìä Updated performance for ${outcome.strategy}: ${performance.winRate.toFixed(1)}% win rate`);\r\n  }\r\n\r\n  /**\r\n   * Generate learning feedback from outcome\r\n   */\r\n  private generateLearningFeedback(outcome: TradingOutcome): LearningFeedback {\r\n    let accuracy: number;\r\n    let actualOutcome: 'CORRECT' | 'INCORRECT' | 'PARTIAL';\r\n\r\n    // Determine accuracy based on outcome quality and confidence\r\n    if (outcome.outcome === 'WIN') {\r\n      if (outcome.outcomeQuality === 'EXCELLENT') {\r\n        accuracy = 1.0;\r\n        actualOutcome = 'CORRECT';\r\n      } else if (outcome.outcomeQuality === 'GOOD') {\r\n        accuracy = 0.8;\r\n        actualOutcome = 'CORRECT';\r\n      } else {\r\n        accuracy = 0.6;\r\n        actualOutcome = 'PARTIAL';\r\n      }\r\n    } else if (outcome.outcome === 'LOSS') {\r\n      if (outcome.outcomeQuality === 'TERRIBLE') {\r\n        accuracy = 0.0;\r\n        actualOutcome = 'INCORRECT';\r\n      } else if (outcome.outcomeQuality === 'POOR') {\r\n        accuracy = 0.2;\r\n        actualOutcome = 'INCORRECT';\r\n      } else {\r\n        accuracy = 0.4;\r\n        actualOutcome = 'PARTIAL';\r\n      }\r\n    } else { // BREAKEVEN\r\n      accuracy = 0.5;\r\n      actualOutcome = 'PARTIAL';\r\n    }\r\n\r\n    return {\r\n      predictionId: outcome.decisionId,\r\n      actualOutcome,\r\n      accuracy,\r\n      marketConditions: outcome.marketConditions,\r\n      timestamp: outcome.exitTimestamp || new Date(),\r\n      notes: `${outcome.strategy} strategy result: ${outcome.outcome} with ${outcome.pnlPercentage.toFixed(2)}% return`\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Perform immediate learning from significant outcomes\r\n   */\r\n  private async performImmediateLearning(outcome: TradingOutcome): Promise<void> {\r\n    try {\r\n      logger.info(`üß† Performing immediate learning from ${outcome.outcomeQuality} outcome`);\r\n\r\n      // Generate insights from the outcome\r\n      const insights = await this.generateInsightsFromOutcome(outcome);\r\n      \r\n      // Add insights to learning history\r\n      this.learningInsights.push(...insights);\r\n\r\n      this.emit('immediateLearning', { outcome, insights });\r\n\r\n    } catch (error) {\r\n      logger.error('‚ùå Error in immediate learning:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate insights from trading outcome\r\n   */\r\n  private async generateInsightsFromOutcome(outcome: TradingOutcome): Promise<LearningInsight[]> {\r\n    const insights: LearningInsight[] = [];\r\n\r\n    // Strategy performance insight\r\n    if (outcome.outcomeQuality === 'EXCELLENT') {\r\n      insights.push({\r\n        type: 'STRATEGY',\r\n        insight: `${outcome.strategy} performed excellently in ${outcome.marketConditions.volatility} volatility, ${outcome.marketConditions.trend} trend conditions`,\r\n        confidence: 85,\r\n        impact: 'HIGH',\r\n        recommendation: `Increase allocation to ${outcome.strategy} in similar market conditions`,\r\n        supportingData: {\r\n          pnlPercentage: outcome.pnlPercentage,\r\n          confidence: outcome.confidence,\r\n          marketConditions: outcome.marketConditions\r\n        },\r\n        timestamp: new Date()\r\n      });\r\n    } else if (outcome.outcomeQuality === 'TERRIBLE') {\r\n      insights.push({\r\n        type: 'STRATEGY',\r\n        insight: `${outcome.strategy} performed poorly in ${outcome.marketConditions.volatility} volatility, ${outcome.marketConditions.trend} trend conditions`,\r\n        confidence: 80,\r\n        impact: 'HIGH',\r\n        recommendation: `Reduce allocation to ${outcome.strategy} in similar market conditions or optimize parameters`,\r\n        supportingData: {\r\n          pnlPercentage: outcome.pnlPercentage,\r\n          confidence: outcome.confidence,\r\n          marketConditions: outcome.marketConditions\r\n        },\r\n        timestamp: new Date()\r\n      });\r\n    }\r\n\r\n    return insights;\r\n  }\r\n\r\n  /**\r\n   * Perform regular learning update\r\n   */\r\n  private async performLearningUpdate(): Promise<void> {\r\n    try {\r\n      logger.info('üîÑ Performing regular learning update...');\r\n\r\n      if (this.tradingOutcomes.length < this.LEARNING_CONFIG.minTradesForLearning) {\r\n        logger.info(`üìä Insufficient data for learning (${this.tradingOutcomes.length}/${this.LEARNING_CONFIG.minTradesForLearning})`);\r\n        return;\r\n      }\r\n\r\n      // Update strategy performance metrics\r\n      await this.updateAllStrategyPerformance();\r\n\r\n      // Generate new insights\r\n      await this.generatePeriodicInsights();\r\n\r\n      // Clean up old data\r\n      this.cleanupOldData();\r\n\r\n      logger.info('‚úÖ Learning update completed');\r\n\r\n      this.emit('learningUpdate', {\r\n        totalOutcomes: this.tradingOutcomes.length,\r\n        insights: this.learningInsights.length\r\n      });\r\n\r\n    } catch (error) {\r\n      logger.error('‚ùå Error in learning update:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update all strategy performance metrics\r\n   */\r\n  private async updateAllStrategyPerformance(): Promise<void> {\r\n    for (const [strategyName, performance] of this.strategyPerformance) {\r\n      const strategyOutcomes = this.tradingOutcomes.filter(o => o.strategy === strategyName);\r\n      \r\n      if (strategyOutcomes.length === 0) continue;\r\n\r\n      // Recalculate metrics\r\n      const wins = strategyOutcomes.filter(o => o.outcome === 'WIN').length;\r\n      performance.winRate = (wins / strategyOutcomes.length) * 100;\r\n      \r\n      performance.avgPnL = strategyOutcomes.reduce((sum, o) => sum + o.pnl, 0) / strategyOutcomes.length;\r\n      performance.avgPnLPercentage = strategyOutcomes.reduce((sum, o) => sum + o.pnlPercentage, 0) / strategyOutcomes.length;\r\n      \r\n      performance.lastUpdated = new Date();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate periodic insights\r\n   */\r\n  private async generatePeriodicInsights(): Promise<void> {\r\n    const recentOutcomes = this.tradingOutcomes.slice(-100); // Last 100 trades\r\n    \r\n    // Overall performance insight\r\n    const winRate = (recentOutcomes.filter(o => o.outcome === 'WIN').length / recentOutcomes.length) * 100;\r\n    const avgReturn = recentOutcomes.reduce((sum, o) => sum + o.pnlPercentage, 0) / recentOutcomes.length;\r\n    \r\n    if (winRate > 70) {\r\n      this.learningInsights.push({\r\n        type: 'STRATEGY',\r\n        insight: `Excellent recent performance with ${winRate.toFixed(1)}% win rate and ${avgReturn.toFixed(2)}% average return`,\r\n        confidence: 90,\r\n        impact: 'HIGH',\r\n        recommendation: 'Continue current strategy mix with potential for increased position sizing',\r\n        supportingData: { winRate, avgReturn, trades: recentOutcomes.length },\r\n        timestamp: new Date()\r\n      });\r\n    } else if (winRate < 50) {\r\n      this.learningInsights.push({\r\n        type: 'STRATEGY',\r\n        insight: `Poor recent performance with ${winRate.toFixed(1)}% win rate requires immediate attention`,\r\n        confidence: 95,\r\n        impact: 'HIGH',\r\n        recommendation: 'Review and adjust strategy parameters or reduce position sizes',\r\n        supportingData: { winRate, avgReturn, trades: recentOutcomes.length },\r\n        timestamp: new Date()\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clean up old data\r\n   */\r\n  private cleanupOldData(): void {\r\n    const maxAge = 90 * 24 * 60 * 60 * 1000; // 90 days\r\n    const cutoffDate = new Date(Date.now() - maxAge);\r\n    \r\n    // Clean up old insights\r\n    this.learningInsights = this.learningInsights.filter(insight => insight.timestamp >= cutoffDate);\r\n    \r\n    logger.info('üßπ Cleaned up old learning data');\r\n  }\r\n\r\n  /**\r\n   * Get strategy performance\r\n   */\r\n  public getStrategyPerformance(strategyName?: string): StrategyPerformance[] {\r\n    if (strategyName) {\r\n      const performance = this.strategyPerformance.get(strategyName);\r\n      return performance ? [performance] : [];\r\n    }\r\n    \r\n    return Array.from(this.strategyPerformance.values());\r\n  }\r\n\r\n  /**\r\n   * Get learning insights\r\n   */\r\n  public getLearningInsights(limit?: number): LearningInsight[] {\r\n    const insights = [...this.learningInsights].sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\r\n    return limit ? insights.slice(0, limit) : insights;\r\n  }\r\n\r\n  /**\r\n   * Get learning summary\r\n   */\r\n  public getLearningSummary(): {\r\n    totalOutcomes: number;\r\n    overallWinRate: number;\r\n    bestStrategy: string;\r\n    worstStrategy: string;\r\n    keyInsights: number;\r\n  } {\r\n    const totalOutcomes = this.tradingOutcomes.length;\r\n    const overallWinRate = totalOutcomes > 0 ? \r\n      (this.tradingOutcomes.filter(o => o.outcome === 'WIN').length / totalOutcomes) * 100 : 0;\r\n    \r\n    const strategies = Array.from(this.strategyPerformance.values());\r\n    const bestStrategy = strategies.reduce((best, current) => \r\n      current.winRate > best.winRate ? current : best, strategies[0])?.strategyName || 'None';\r\n    const worstStrategy = strategies.reduce((worst, current) => \r\n      current.winRate < worst.winRate ? current : worst, strategies[0])?.strategyName || 'None';\r\n    \r\n    return {\r\n      totalOutcomes,\r\n      overallWinRate,\r\n      bestStrategy,\r\n      worstStrategy,\r\n      keyInsights: this.learningInsights.length\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Shutdown the adaptive learner\r\n   */\r\n  public async shutdown(): Promise<void> {\r\n    try {\r\n      logger.info('üõë Shutting down Adaptive Learner...');\r\n      \r\n      // Stop learning cycle\r\n      if (this.learningTimer) {\r\n        clearInterval(this.learningTimer);\r\n        this.learningTimer = null;\r\n      }\r\n      \r\n      // Clear data\r\n      this.tradingOutcomes = [];\r\n      this.strategyPerformance.clear();\r\n      this.learningInsights = [];\r\n      \r\n      this.isInitialized = false;\r\n      \r\n      logger.info('‚úÖ Adaptive Learner shutdown completed');\r\n      \r\n    } catch (error) {\r\n      logger.error('‚ùå Error during Adaptive Learner shutdown:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\n// Export types\r\nexport type {\r\n  TradingOutcome,\r\n  StrategyPerformance,\r\n  LearningInsight\r\n};\r\n"],"mappings":"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","ignoreList":[]}