{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\strategies\\__tests__\\fibonacci.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\strategies\\__tests__\\fibonacci.test.ts"],"sourcesContent":["/**\r\n * Fibonacci Strategy Tests\r\n * \r\n * Comprehensive test suite for Fibonacci retracement calculations, level analysis, and signal generation.\r\n * Tests cover Fibonacci level calculations, swing point detection, and trading signal generation.\r\n */\r\n\r\nimport { FibonacciStrategy } from '../fibonacci';\r\nimport { MarketData } from '../types';\r\n\r\ndescribe('FibonacciStrategy', () => {\r\n  let strategy: FibonacciStrategy;\r\n  let mockMarketData: MarketData[];\r\n\r\n  beforeEach(() => {\r\n    strategy = new FibonacciStrategy();\r\n    \r\n    // Create mock market data with clear swing points\r\n    mockMarketData = [];\r\n    const basePrice = 100;\r\n    const baseVolume = 1000000;\r\n    \r\n    // Create a clear uptrend with swing points\r\n    for (let i = 0; i < 60; i++) {\r\n      let price: number;\r\n      \r\n      if (i < 20) {\r\n        // Initial downtrend to create swing low\r\n        price = basePrice - (i * 2);\r\n      } else if (i < 40) {\r\n        // Strong uptrend to create swing high\r\n        price = 60 + ((i - 20) * 4);\r\n      } else {\r\n        // Retracement phase\r\n        price = 140 - ((i - 40) * 1.5);\r\n      }\r\n      \r\n      mockMarketData.push({\r\n        symbol: 'BTC/USDT',\r\n        timestamp: new Date(Date.now() - (60 - i) * 60000),\r\n        open: price - 0.5,\r\n        high: price + 1,\r\n        low: price - 1,\r\n        close: price,\r\n        volume: baseVolume + Math.random() * 500000\r\n      });\r\n    }\r\n  });\r\n\r\n  describe('Fibonacci Level Calculations', () => {\r\n    test('should calculate Fibonacci levels correctly', () => {\r\n      const high = 140;\r\n      const low = 60;\r\n      const fibLevels = strategy.calculateFibonacciLevels(high, low);\r\n      \r\n      expect(fibLevels.high).toBe(high);\r\n      expect(fibLevels.low).toBe(low);\r\n      \r\n      // Check specific Fibonacci levels\r\n      expect(fibLevels.levels['23.6']).toBeCloseTo(121.12, 2); // 140 - (80 * 0.236)\r\n      expect(fibLevels.levels['38.2']).toBeCloseTo(109.44, 2); // 140 - (80 * 0.382)\r\n      expect(fibLevels.levels['50.0']).toBeCloseTo(100, 2);    // 140 - (80 * 0.5)\r\n      expect(fibLevels.levels['61.8']).toBeCloseTo(90.56, 2);  // 140 - (80 * 0.618)\r\n      expect(fibLevels.levels['78.6']).toBeCloseTo(77.12, 2);  // 140 - (80 * 0.786)\r\n    });\r\n\r\n    test('should categorize levels as support in uptrend', () => {\r\n      const high = 140;\r\n      const low = 60;\r\n      const fibLevels = strategy.calculateFibonacciLevels(high, low);\r\n      \r\n      expect(fibLevels.support.length).toBe(5);\r\n      expect(fibLevels.resistance.length).toBe(0);\r\n      expect(fibLevels.support).toEqual(expect.arrayContaining([\r\n        expect.closeTo(121.12, 2),\r\n        expect.closeTo(109.44, 2),\r\n        expect.closeTo(100, 2),\r\n        expect.closeTo(90.56, 2),\r\n        expect.closeTo(77.12, 2)\r\n      ]));\r\n    });\r\n\r\n    test('should categorize levels as resistance in downtrend', () => {\r\n      const high = 60; // Inverted for downtrend\r\n      const low = 140;\r\n      const fibLevels = strategy.calculateFibonacciLevels(high, low);\r\n      \r\n      expect(fibLevels.support.length).toBe(0);\r\n      expect(fibLevels.resistance.length).toBe(5);\r\n    });\r\n\r\n    test('should handle equal high and low', () => {\r\n      const fibLevels = strategy.calculateFibonacciLevels(100, 100);\r\n      \r\n      expect(fibLevels.high).toBe(100);\r\n      expect(fibLevels.low).toBe(100);\r\n      Object.values(fibLevels.levels).forEach(level => {\r\n        expect(level).toBe(100);\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('Swing Point Detection', () => {\r\n    test('should find swing highs and lows', () => {\r\n      const swingPoints = strategy.findSwingPoints(mockMarketData, 10);\r\n      \r\n      expect(swingPoints.swingHigh).not.toBeNull();\r\n      expect(swingPoints.swingLow).not.toBeNull();\r\n      expect(swingPoints.swingHigh!.price).toBeGreaterThan(swingPoints.swingLow!.price);\r\n    });\r\n\r\n    test('should return null for insufficient data', () => {\r\n      const shortData = mockMarketData.slice(0, 15);\r\n      const swingPoints = strategy.findSwingPoints(shortData, 10);\r\n      \r\n      expect(swingPoints.swingHigh).toBeNull();\r\n      expect(swingPoints.swingLow).toBeNull();\r\n    });\r\n\r\n    test('should find most significant swing points', () => {\r\n      // Create data with multiple swing points\r\n      const swingData: MarketData[] = [];\r\n      const prices = [100, 95, 90, 95, 100, 110, 120, 115, 110, 105, 100];\r\n      \r\n      prices.forEach((price, i) => {\r\n        swingData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (prices.length - i) * 60000),\r\n          open: price - 0.5,\r\n          high: price + 1,\r\n          low: price - 1,\r\n          close: price,\r\n          volume: 1000000\r\n        });\r\n      });\r\n\r\n      const swingPoints = strategy.findSwingPoints(swingData, 2);\r\n      \r\n      if (swingPoints.swingHigh && swingPoints.swingLow) {\r\n        expect(swingPoints.swingHigh.price).toBeGreaterThan(115); // Should find the highest point\r\n        expect(swingPoints.swingLow.price).toBeLessThan(95);      // Should find the lowest point\r\n      }\r\n    });\r\n  });\r\n\r\n  describe('Dynamic Fibonacci Levels', () => {\r\n    test('should generate dynamic Fibonacci levels', () => {\r\n      const fibLevels = strategy.getDynamicFibonacciLevels(mockMarketData, 15);\r\n      \r\n      expect(fibLevels).not.toBeNull();\r\n      expect(fibLevels!.high).toBeGreaterThan(fibLevels!.low);\r\n      expect(Object.keys(fibLevels!.levels)).toHaveLength(5);\r\n    });\r\n\r\n    test('should return null for insufficient swing size', () => {\r\n      // Create data with very small price movements\r\n      const flatData: MarketData[] = [];\r\n      for (let i = 0; i < 50; i++) {\r\n        const price = 100 + Math.sin(i * 0.1) * 0.5; // Very small oscillations\r\n        flatData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (50 - i) * 60000),\r\n          open: price - 0.1,\r\n          high: price + 0.1,\r\n          low: price - 0.1,\r\n          close: price,\r\n          volume: 1000000\r\n        });\r\n      }\r\n\r\n      const fibLevels = strategy.getDynamicFibonacciLevels(flatData, 15);\r\n      expect(fibLevels).toBeNull(); // Should return null for insignificant swings\r\n    });\r\n\r\n    test('should return null for insufficient data', () => {\r\n      const shortData = mockMarketData.slice(0, 20);\r\n      const fibLevels = strategy.getDynamicFibonacciLevels(shortData, 15);\r\n      expect(fibLevels).toBeNull();\r\n    });\r\n  });\r\n\r\n  describe('Fibonacci Proximity Check', () => {\r\n    test('should detect proximity to Fibonacci levels', () => {\r\n      const fibLevels = strategy.calculateFibonacciLevels(140, 60);\r\n      const currentPrice = 100.1; // Very close to 50% level (100)\r\n      \r\n      const proximity = strategy.checkFibonacciProximity(currentPrice, fibLevels);\r\n      \r\n      expect(proximity.nearLevel).toBe('50.0');\r\n      expect(proximity.levelPrice).toBeCloseTo(100, 2);\r\n      expect(proximity.distance).toBeLessThan(0.002); // Within threshold\r\n      expect(proximity.levelType).toBe('support');\r\n    });\r\n\r\n    test('should return null when not near any level', () => {\r\n      const fibLevels = strategy.calculateFibonacciLevels(140, 60);\r\n      const currentPrice = 95; // Not close to any level\r\n      \r\n      const proximity = strategy.checkFibonacciProximity(currentPrice, fibLevels);\r\n      \r\n      expect(proximity.nearLevel).toBeNull();\r\n      expect(proximity.levelPrice).toBeNull();\r\n      expect(proximity.levelType).toBeNull();\r\n    });\r\n\r\n    test('should identify correct level type', () => {\r\n      const fibLevels = strategy.calculateFibonacciLevels(140, 60);\r\n      \r\n      // Test support level\r\n      const supportProximity = strategy.checkFibonacciProximity(100.05, fibLevels);\r\n      expect(supportProximity.levelType).toBe('support');\r\n      \r\n      // Test with downtrend (resistance levels)\r\n      const fibLevelsDown = strategy.calculateFibonacciLevels(60, 140);\r\n      const resistanceProximity = strategy.checkFibonacciProximity(100.05, fibLevelsDown);\r\n      expect(resistanceProximity.levelType).toBe('resistance');\r\n    });\r\n  });\r\n\r\n  describe('Trading Signal Generation', () => {\r\n    test('should generate buy signal at support level', () => {\r\n      // Create data where price bounces off Fibonacci support\r\n      const bounceData: MarketData[] = [];\r\n      \r\n      // Build up to swing high\r\n      for (let i = 0; i < 25; i++) {\r\n        const price = 60 + (i * 3.2); // Up to 140\r\n        bounceData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (50 - i) * 60000),\r\n          open: price - 0.5,\r\n          high: price + 1,\r\n          low: price - 1,\r\n          close: price,\r\n          volume: 1000000\r\n        });\r\n      }\r\n      \r\n      // Retrace to Fibonacci level and bounce\r\n      for (let i = 0; i < 15; i++) {\r\n        const price = 140 - (i * 2.5); // Down to around 102.5\r\n        bounceData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (25 - i) * 60000),\r\n          open: price - 0.5,\r\n          high: price + 1,\r\n          low: price - 1,\r\n          close: price,\r\n          volume: 1000000 * (i > 12 ? 2 : 1) // Higher volume on bounce\r\n        });\r\n      }\r\n      \r\n      // Bounce up\r\n      for (let i = 0; i < 10; i++) {\r\n        const price = 102.5 + (i * 1); // Bounce up\r\n        bounceData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (10 - i) * 60000),\r\n          open: price - 0.5,\r\n          high: price + 1,\r\n          low: price - 1,\r\n          close: price,\r\n          volume: 2000000 // High volume on bounce\r\n        });\r\n      }\r\n\r\n      const signal = strategy.generateSignal(bounceData, 15);\r\n      \r\n      if (signal) {\r\n        expect(signal.type).toBe('BUY');\r\n        expect(signal.strength).toBeGreaterThan(0);\r\n        expect(signal.confidence).toBeGreaterThan(0);\r\n        expect(signal.reasoning).toContain('support');\r\n        expect(signal.metadata?.levelType).toBe('support');\r\n      }\r\n    });\r\n\r\n    test('should generate sell signal at resistance level', () => {\r\n      // Create data where price is rejected at Fibonacci resistance\r\n      const rejectionData: MarketData[] = [];\r\n      \r\n      // Build down to swing low\r\n      for (let i = 0; i < 25; i++) {\r\n        const price = 140 - (i * 3.2); // Down to 60\r\n        rejectionData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (50 - i) * 60000),\r\n          open: price - 0.5,\r\n          high: price + 1,\r\n          low: price - 1,\r\n          close: price,\r\n          volume: 1000000\r\n        });\r\n      }\r\n      \r\n      // Rally to Fibonacci level and get rejected\r\n      for (let i = 0; i < 15; i++) {\r\n        const price = 60 + (i * 2.5); // Up to around 97.5\r\n        rejectionData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (25 - i) * 60000),\r\n          open: price - 0.5,\r\n          high: price + 1,\r\n          low: price - 1,\r\n          close: price,\r\n          volume: 1000000 * (i > 12 ? 2 : 1) // Higher volume on rejection\r\n        });\r\n      }\r\n      \r\n      // Get rejected\r\n      for (let i = 0; i < 10; i++) {\r\n        const price = 97.5 - (i * 1); // Rejection down\r\n        rejectionData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (10 - i) * 60000),\r\n          open: price - 0.5,\r\n          high: price + 1,\r\n          low: price - 1,\r\n          close: price,\r\n          volume: 2000000 // High volume on rejection\r\n        });\r\n      }\r\n\r\n      const signal = strategy.generateSignal(rejectionData, 15);\r\n      \r\n      if (signal) {\r\n        expect(signal.type).toBe('SELL');\r\n        expect(signal.strength).toBeGreaterThan(0);\r\n        expect(signal.confidence).toBeGreaterThan(0);\r\n        expect(signal.reasoning).toContain('resistance');\r\n        expect(signal.metadata?.levelType).toBe('resistance');\r\n      }\r\n    });\r\n\r\n    test('should return null when not near Fibonacci levels', () => {\r\n      // Create data where price is not near any Fibonacci level\r\n      const neutralData: MarketData[] = [];\r\n      for (let i = 0; i < 50; i++) {\r\n        const price = 95 + Math.sin(i * 0.1) * 1; // Oscillate around 95 (not near any Fib level)\r\n        neutralData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (50 - i) * 60000),\r\n          open: price - 0.5,\r\n          high: price + 1,\r\n          low: price - 1,\r\n          close: price,\r\n          volume: 1000000\r\n        });\r\n      }\r\n\r\n      const signal = strategy.generateSignal(neutralData, 15);\r\n      expect(signal).toBeNull();\r\n    });\r\n\r\n    test('should include proper metadata', () => {\r\n      const signal = strategy.generateSignal(mockMarketData, 15);\r\n      \r\n      if (signal) {\r\n        expect(signal.metadata).toBeDefined();\r\n        expect(signal.metadata?.fibonacciLevel).toBeDefined();\r\n        expect(signal.metadata?.levelPrice).toBeDefined();\r\n        expect(signal.metadata?.levelType).toBeDefined();\r\n        expect(signal.metadata?.swingHigh).toBeDefined();\r\n        expect(signal.metadata?.swingLow).toBeDefined();\r\n        expect(signal.metadata?.allLevels).toBeDefined();\r\n        expect(signal.indicators[0]).toContain('FIB_');\r\n      }\r\n    });\r\n\r\n    test('should calculate risk-reward ratio', () => {\r\n      const signal = strategy.generateSignal(mockMarketData, 15);\r\n      \r\n      if (signal) {\r\n        expect(signal.riskReward).toBeGreaterThan(0);\r\n        expect(typeof signal.riskReward).toBe('number');\r\n      }\r\n    });\r\n  });\r\n\r\n  describe('Signal Confidence Evaluation', () => {\r\n    test('should evaluate signal confidence correctly', () => {\r\n      const signal = strategy.generateSignal(mockMarketData, 15);\r\n      \r\n      if (signal) {\r\n        const confidence = strategy.evaluateSignalConfidence(mockMarketData, signal);\r\n        \r\n        expect(confidence.overall).toBeGreaterThanOrEqual(0);\r\n        expect(confidence.overall).toBeLessThanOrEqual(100);\r\n        expect(confidence.technical).toBeGreaterThanOrEqual(0);\r\n        expect(confidence.technical).toBeLessThanOrEqual(100);\r\n        expect(confidence.volume).toBeGreaterThanOrEqual(0);\r\n        expect(confidence.volume).toBeLessThanOrEqual(100);\r\n        expect(confidence.momentum).toBeGreaterThanOrEqual(0);\r\n        expect(confidence.momentum).toBeLessThanOrEqual(100);\r\n        expect(confidence.factors.length).toBeGreaterThanOrEqual(4);\r\n      }\r\n    });\r\n\r\n    test('should provide detailed factors', () => {\r\n      const signal = strategy.generateSignal(mockMarketData, 15);\r\n      \r\n      if (signal) {\r\n        const confidence = strategy.evaluateSignalConfidence(mockMarketData, signal);\r\n        \r\n        expect(confidence.factors[0]).toContain('Fibonacci signal strength');\r\n        expect(confidence.factors[1]).toContain('Volume confirmation');\r\n        expect(confidence.factors[2]).toContain('Level significance');\r\n        expect(confidence.factors[3]).toContain('Fibonacci level');\r\n      }\r\n    });\r\n\r\n    test('should include price action details in factors', () => {\r\n      const signal = strategy.generateSignal(mockMarketData, 15);\r\n      \r\n      if (signal) {\r\n        const confidence = strategy.evaluateSignalConfidence(mockMarketData, signal);\r\n        \r\n        // Should include level type and price action information\r\n        const levelTypeFactors = confidence.factors.filter(f => f.includes('Level type'));\r\n        const volumeFactors = confidence.factors.filter(f => f.includes('Volume:'));\r\n        \r\n        expect(levelTypeFactors.length).toBeGreaterThan(0);\r\n        expect(volumeFactors.length).toBeGreaterThan(0);\r\n      }\r\n    });\r\n  });\r\n\r\n  describe('Edge Cases', () => {\r\n    test('should handle empty market data', () => {\r\n      const signal = strategy.generateSignal([], 15);\r\n      expect(signal).toBeNull();\r\n    });\r\n\r\n    test('should handle single data point', () => {\r\n      const singleData = [mockMarketData[0]];\r\n      const signal = strategy.generateSignal(singleData, 15);\r\n      expect(signal).toBeNull();\r\n    });\r\n\r\n    test('should handle very small lookback period', () => {\r\n      const fibLevels = strategy.getDynamicFibonacciLevels(mockMarketData, 5);\r\n      // May or may not find levels depending on data structure\r\n      if (fibLevels) {\r\n        expect(fibLevels.high).toBeGreaterThanOrEqual(fibLevels.low);\r\n      }\r\n    });\r\n\r\n    test('should handle identical swing points', () => {\r\n      const flatData: MarketData[] = [];\r\n      for (let i = 0; i < 50; i++) {\r\n        flatData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (50 - i) * 60000),\r\n          open: 100,\r\n          high: 100,\r\n          low: 100,\r\n          close: 100,\r\n          volume: 1000000\r\n        });\r\n      }\r\n\r\n      const fibLevels = strategy.calculateFibonacciLevels(100, 100);\r\n      expect(fibLevels.high).toBe(100);\r\n      expect(fibLevels.low).toBe(100);\r\n      Object.values(fibLevels.levels).forEach(level => {\r\n        expect(level).toBe(100);\r\n      });\r\n    });\r\n\r\n    test('should handle extreme price ratios', () => {\r\n      const fibLevels = strategy.calculateFibonacciLevels(1000, 1);\r\n      \r\n      expect(fibLevels.high).toBe(1000);\r\n      expect(fibLevels.low).toBe(1);\r\n      expect(fibLevels.levels['50.0']).toBeCloseTo(500.5, 1);\r\n      expect(fibLevels.levels['61.8']).toBeCloseTo(382.618, 1);\r\n    });\r\n\r\n    test('should handle negative prices gracefully', () => {\r\n      // While negative prices are unrealistic for crypto, test robustness\r\n      const fibLevels = strategy.calculateFibonacciLevels(10, -10);\r\n      \r\n      expect(fibLevels.high).toBe(10);\r\n      expect(fibLevels.low).toBe(-10);\r\n      expect(fibLevels.levels['50.0']).toBe(0);\r\n    });\r\n  });\r\n\r\n  describe('Level Significance', () => {\r\n    test('should give higher strength to 61.8% level', () => {\r\n      const fibLevels = strategy.calculateFibonacciLevels(140, 60);\r\n      \r\n      // Test proximity to 61.8% level\r\n      const proximity618 = strategy.checkFibonacciProximity(90.56, fibLevels);\r\n      expect(proximity618.nearLevel).toBe('61.8');\r\n      \r\n      // Test proximity to 23.6% level\r\n      const proximity236 = strategy.checkFibonacciProximity(121.12, fibLevels);\r\n      expect(proximity236.nearLevel).toBe('23.6');\r\n      \r\n      // 61.8% should be considered more significant in signal generation\r\n      // This is tested indirectly through the signal strength calculation\r\n    });\r\n\r\n    test('should recognize 50% as psychological level', () => {\r\n      const fibLevels = strategy.calculateFibonacciLevels(140, 60);\r\n      const proximity = strategy.checkFibonacciProximity(100, fibLevels);\r\n      \r\n      expect(proximity.nearLevel).toBe('50.0');\r\n      expect(proximity.levelPrice).toBe(100);\r\n    });\r\n  });\r\n});"],"version":3}