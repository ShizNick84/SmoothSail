{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\backtesting\\__tests__\\simple-backtest.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\backtesting\\__tests__\\simple-backtest.test.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * SIMPLE BACKTESTING TEST - NO DEPENDENCIES\r\n * =============================================================================\r\n * \r\n * Simple test to verify the backtesting system works without external\r\n * dependencies like encryption services.\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport { describe, test, expect } from '@jest/globals';\r\nimport { PerformanceCalculator } from '../performance-calculator';\r\nimport { BacktestReportGenerator } from '../report-generator';\r\nimport { \r\n  BacktestTrade, \r\n  BacktestPortfolio,\r\n  BacktestResult \r\n} from '../types';\r\n\r\ndescribe('Simple Backtesting Tests', () => {\r\n  describe('PerformanceCalculator', () => {\r\n    test('should calculate basic performance metrics', () => {\r\n      const sampleTrades: BacktestTrade[] = [\r\n        {\r\n          id: 'trade_1',\r\n          symbol: 'BTC_USDT',\r\n          type: 'BUY',\r\n          quantity: 0.1,\r\n          entryPrice: 42000,\r\n          exitPrice: 43000,\r\n          entryTime: new Date('2024-01-01T00:00:00Z'),\r\n          exitTime: new Date('2024-01-01T01:00:00Z'),\r\n          strategy: 'TestStrategy',\r\n          signal: {\r\n            id: 'signal_1',\r\n            symbol: 'BTC_USDT',\r\n            type: 'BUY',\r\n            strength: 75,\r\n            confidence: 80,\r\n            indicators: ['MA_CROSSOVER'],\r\n            reasoning: 'Test signal',\r\n            riskReward: 2.5,\r\n            timestamp: new Date('2024-01-01T00:00:00Z'),\r\n          },\r\n          stopLoss: 41580,\r\n          takeProfit: 43050,\r\n          fees: 8.4,\r\n          slippage: 4.2,\r\n          pnl: 91.6,\r\n          pnlPercentage: 2.18,\r\n          status: 'CLOSED',\r\n          exitReason: 'TAKE_PROFIT',\r\n        },\r\n      ];\r\n\r\n      const samplePortfolioHistory: BacktestPortfolio[] = [\r\n        {\r\n          timestamp: new Date('2024-01-01T00:00:00Z'),\r\n          balance: 10000,\r\n          equity: 10000,\r\n          positions: [],\r\n          totalPnL: 0,\r\n          unrealizedPnL: 0,\r\n          realizedPnL: 0,\r\n          drawdown: 0,\r\n          drawdownPercentage: 0,\r\n          maxDrawdown: 0,\r\n          maxDrawdownPercentage: 0,\r\n        },\r\n        {\r\n          timestamp: new Date('2024-01-01T01:00:00Z'),\r\n          balance: 10000,\r\n          equity: 10091.6,\r\n          positions: [],\r\n          totalPnL: 91.6,\r\n          unrealizedPnL: 0,\r\n          realizedPnL: 91.6,\r\n          drawdown: 0,\r\n          drawdownPercentage: 0,\r\n          maxDrawdown: 0,\r\n          maxDrawdownPercentage: 0,\r\n        },\r\n      ];\r\n\r\n      const performance = PerformanceCalculator.calculatePerformanceMetrics(\r\n        sampleTrades,\r\n        samplePortfolioHistory,\r\n        10000\r\n      );\r\n\r\n      expect(performance.totalReturn).toBeCloseTo(91.6, 2);\r\n      expect(performance.totalReturnPercentage).toBeCloseTo(0.916, 2);\r\n      expect(performance.sharpeRatio).toBeDefined();\r\n      expect(performance.profitFactor).toBeGreaterThan(0);\r\n    });\r\n\r\n    test('should calculate trade statistics', () => {\r\n      const sampleTrades: BacktestTrade[] = [\r\n        {\r\n          id: 'trade_1',\r\n          symbol: 'BTC_USDT',\r\n          type: 'BUY',\r\n          quantity: 0.1,\r\n          entryPrice: 42000,\r\n          exitPrice: 43000,\r\n          entryTime: new Date('2024-01-01T00:00:00Z'),\r\n          exitTime: new Date('2024-01-01T01:00:00Z'),\r\n          strategy: 'TestStrategy',\r\n          signal: {\r\n            id: 'signal_1',\r\n            symbol: 'BTC_USDT',\r\n            type: 'BUY',\r\n            strength: 75,\r\n            confidence: 80,\r\n            indicators: ['MA_CROSSOVER'],\r\n            reasoning: 'Test signal',\r\n            riskReward: 2.5,\r\n            timestamp: new Date('2024-01-01T00:00:00Z'),\r\n          },\r\n          stopLoss: 41580,\r\n          takeProfit: 43050,\r\n          fees: 8.4,\r\n          slippage: 4.2,\r\n          pnl: 91.6,\r\n          pnlPercentage: 2.18,\r\n          status: 'CLOSED',\r\n          exitReason: 'TAKE_PROFIT',\r\n        },\r\n        {\r\n          id: 'trade_2',\r\n          symbol: 'BTC_USDT',\r\n          type: 'BUY',\r\n          quantity: 0.05,\r\n          entryPrice: 43000,\r\n          exitPrice: 42500,\r\n          entryTime: new Date('2024-01-01T01:00:00Z'),\r\n          exitTime: new Date('2024-01-01T02:00:00Z'),\r\n          strategy: 'TestStrategy',\r\n          signal: {\r\n            id: 'signal_2',\r\n            symbol: 'BTC_USDT',\r\n            type: 'SELL',\r\n            strength: 70,\r\n            confidence: 75,\r\n            indicators: ['RSI_OVERBOUGHT'],\r\n            reasoning: 'Test signal',\r\n            riskReward: 2.0,\r\n            timestamp: new Date('2024-01-01T01:00:00Z'),\r\n          },\r\n          stopLoss: 42570,\r\n          takeProfit: 43645,\r\n          fees: 4.25,\r\n          slippage: 2.15,\r\n          pnl: -29.25,\r\n          pnlPercentage: -1.36,\r\n          status: 'CLOSED',\r\n          exitReason: 'STOP_LOSS',\r\n        },\r\n      ];\r\n\r\n      const tradeStats = PerformanceCalculator.calculateTradeStatistics(sampleTrades);\r\n\r\n      expect(tradeStats.total).toBe(2);\r\n      expect(tradeStats.winning).toBe(1);\r\n      expect(tradeStats.losing).toBe(1);\r\n      expect(tradeStats.winRate).toBe(50);\r\n      expect(tradeStats.averageWin).toBeCloseTo(91.6, 2);\r\n      expect(tradeStats.averageLoss).toBeCloseTo(29.25, 2);\r\n    });\r\n\r\n    test('should generate equity curve', () => {\r\n      const samplePortfolioHistory: BacktestPortfolio[] = [\r\n        {\r\n          timestamp: new Date('2024-01-01T00:00:00Z'),\r\n          balance: 10000,\r\n          equity: 10000,\r\n          positions: [],\r\n          totalPnL: 0,\r\n          unrealizedPnL: 0,\r\n          realizedPnL: 0,\r\n          drawdown: 0,\r\n          drawdownPercentage: 0,\r\n          maxDrawdown: 0,\r\n          maxDrawdownPercentage: 0,\r\n        },\r\n        {\r\n          timestamp: new Date('2024-01-01T01:00:00Z'),\r\n          balance: 10000,\r\n          equity: 10091.6,\r\n          positions: [],\r\n          totalPnL: 91.6,\r\n          unrealizedPnL: 0,\r\n          realizedPnL: 91.6,\r\n          drawdown: 0,\r\n          drawdownPercentage: 0,\r\n          maxDrawdown: 0,\r\n          maxDrawdownPercentage: 0,\r\n        },\r\n      ];\r\n\r\n      const equityCurve = PerformanceCalculator.generateEquityCurve(samplePortfolioHistory);\r\n\r\n      expect(equityCurve.length).toBe(2);\r\n      expect(equityCurve[0].equity).toBe(10000);\r\n      expect(equityCurve[1].equity).toBeCloseTo(10091.6, 2);\r\n    });\r\n  });\r\n\r\n  describe('BacktestReportGenerator', () => {\r\n    test('should generate JSON report', async () => {\r\n      const sampleResult: BacktestResult = {\r\n        config: {\r\n          symbol: 'BTC_USDT',\r\n          startDate: new Date('2024-01-01'),\r\n          endDate: new Date('2024-01-02'),\r\n          initialBalance: 10000,\r\n          strategies: ['TestStrategy'],\r\n          riskManagement: {\r\n            maxRiskPerTrade: 0.02,\r\n            stopLossPercentage: 0.01,\r\n            minRiskRewardRatio: 1.5,\r\n            maxDrawdown: 0.15,\r\n          },\r\n          fees: { maker: 0.002, taker: 0.002 },\r\n          slippage: 0.001,\r\n          dataValidation: {\r\n            requireRealData: true,\r\n            minDataPoints: 100,\r\n            maxGapMinutes: 60,\r\n          },\r\n        },\r\n        period: {\r\n          start: new Date('2024-01-01'),\r\n          end: new Date('2024-01-02'),\r\n          durationDays: 1,\r\n        },\r\n        trades: {\r\n          total: 1,\r\n          winning: 1,\r\n          losing: 0,\r\n          winRate: 100,\r\n          averageWin: 100,\r\n          averageLoss: 0,\r\n          largestWin: 100,\r\n          largestLoss: 0,\r\n          consecutiveWins: 0,\r\n          consecutiveLosses: 0,\r\n          maxConsecutiveWins: 1,\r\n          maxConsecutiveLosses: 0,\r\n        },\r\n        performance: {\r\n          totalReturn: 100,\r\n          totalReturnPercentage: 1.0,\r\n          annualizedReturn: 365,\r\n          sharpeRatio: 2.0,\r\n          sortinoRatio: 2.5,\r\n          calmarRatio: 36.5,\r\n          maxDrawdown: 0,\r\n          maxDrawdownPercentage: 0,\r\n          averageDrawdown: 0,\r\n          recoveryFactor: Infinity,\r\n          profitFactor: Infinity,\r\n          payoffRatio: Infinity,\r\n          expectedValue: 100,\r\n        },\r\n        risk: {\r\n          volatility: 5,\r\n          downside_deviation: 2,\r\n          var95: -1,\r\n          cvar95: -1.5,\r\n          beta: 1.0,\r\n          alpha: 10,\r\n          informationRatio: 1.0,\r\n        },\r\n        strategyPerformance: {\r\n          TestStrategy: {\r\n            strategyName: 'TestStrategy',\r\n            trades: 1,\r\n            winRate: 100,\r\n            totalReturn: 100,\r\n            sharpeRatio: 2.0,\r\n            maxDrawdown: 0,\r\n            profitFactor: Infinity,\r\n            averageHoldingPeriod: 1,\r\n            signalAccuracy: 1.0,\r\n            contribution: 100,\r\n          },\r\n        },\r\n        equityCurve: [],\r\n        drawdownCurve: [],\r\n        monthlyReturns: [],\r\n        dataQuality: {\r\n          totalDataPoints: 100,\r\n          validDataPoints: 100,\r\n          dataIntegrityScore: 100,\r\n          gapsDetected: 0,\r\n          averageGapMinutes: 0,\r\n          dataSource: 'GATE_IO_REAL_DATA',\r\n        },\r\n        executionDetails: [],\r\n        portfolioHistory: [],\r\n      };\r\n\r\n      const reportConfig = {\r\n        includeCharts: false,\r\n        includeTradeDetails: false,\r\n        includeStrategyBreakdown: false,\r\n        includeBenchmarkComparison: false,\r\n        includeRiskMetrics: false,\r\n        includeMonthlyReturns: false,\r\n        format: 'JSON' as const,\r\n      };\r\n\r\n      const report = await BacktestReportGenerator.generateReport(sampleResult, reportConfig);\r\n      \r\n      expect(report).toBeDefined();\r\n      expect(typeof report).toBe('string');\r\n      \r\n      // Should be valid JSON\r\n      const parsed = JSON.parse(report);\r\n      expect(parsed.config).toBeDefined();\r\n      expect(parsed.performance).toBeDefined();\r\n      expect(parsed.dataQuality.dataSource).toBe('GATE_IO_REAL_DATA');\r\n    });\r\n\r\n    test('should generate HTML report', async () => {\r\n      const sampleResult: BacktestResult = {\r\n        config: {\r\n          symbol: 'BTC_USDT',\r\n          startDate: new Date('2024-01-01'),\r\n          endDate: new Date('2024-01-02'),\r\n          initialBalance: 10000,\r\n          strategies: ['TestStrategy'],\r\n          riskManagement: {\r\n            maxRiskPerTrade: 0.02,\r\n            stopLossPercentage: 0.01,\r\n            minRiskRewardRatio: 1.5,\r\n            maxDrawdown: 0.15,\r\n          },\r\n          fees: { maker: 0.002, taker: 0.002 },\r\n          slippage: 0.001,\r\n          dataValidation: {\r\n            requireRealData: true,\r\n            minDataPoints: 100,\r\n            maxGapMinutes: 60,\r\n          },\r\n        },\r\n        period: {\r\n          start: new Date('2024-01-01'),\r\n          end: new Date('2024-01-02'),\r\n          durationDays: 1,\r\n        },\r\n        trades: {\r\n          total: 1,\r\n          winning: 1,\r\n          losing: 0,\r\n          winRate: 100,\r\n          averageWin: 100,\r\n          averageLoss: 0,\r\n          largestWin: 100,\r\n          largestLoss: 0,\r\n          consecutiveWins: 0,\r\n          consecutiveLosses: 0,\r\n          maxConsecutiveWins: 1,\r\n          maxConsecutiveLosses: 0,\r\n        },\r\n        performance: {\r\n          totalReturn: 100,\r\n          totalReturnPercentage: 1.0,\r\n          annualizedReturn: 365,\r\n          sharpeRatio: 2.0,\r\n          sortinoRatio: 2.5,\r\n          calmarRatio: 36.5,\r\n          maxDrawdown: 0,\r\n          maxDrawdownPercentage: 0,\r\n          averageDrawdown: 0,\r\n          recoveryFactor: Infinity,\r\n          profitFactor: Infinity,\r\n          payoffRatio: Infinity,\r\n          expectedValue: 100,\r\n        },\r\n        risk: {\r\n          volatility: 5,\r\n          downside_deviation: 2,\r\n          var95: -1,\r\n          cvar95: -1.5,\r\n          beta: 1.0,\r\n          alpha: 10,\r\n          informationRatio: 1.0,\r\n        },\r\n        strategyPerformance: {\r\n          TestStrategy: {\r\n            strategyName: 'TestStrategy',\r\n            trades: 1,\r\n            winRate: 100,\r\n            totalReturn: 100,\r\n            sharpeRatio: 2.0,\r\n            maxDrawdown: 0,\r\n            profitFactor: Infinity,\r\n            averageHoldingPeriod: 1,\r\n            signalAccuracy: 1.0,\r\n            contribution: 100,\r\n          },\r\n        },\r\n        equityCurve: [],\r\n        drawdownCurve: [],\r\n        monthlyReturns: [],\r\n        dataQuality: {\r\n          totalDataPoints: 100,\r\n          validDataPoints: 100,\r\n          dataIntegrityScore: 100,\r\n          gapsDetected: 0,\r\n          averageGapMinutes: 0,\r\n          dataSource: 'GATE_IO_REAL_DATA',\r\n        },\r\n        executionDetails: [],\r\n        portfolioHistory: [],\r\n      };\r\n\r\n      const reportConfig = {\r\n        includeCharts: true,\r\n        includeTradeDetails: true,\r\n        includeStrategyBreakdown: true,\r\n        includeBenchmarkComparison: false,\r\n        includeRiskMetrics: true,\r\n        includeMonthlyReturns: true,\r\n        format: 'HTML' as const,\r\n      };\r\n\r\n      const report = await BacktestReportGenerator.generateReport(sampleResult, reportConfig);\r\n      \r\n      expect(report).toBeDefined();\r\n      expect(typeof report).toBe('string');\r\n      expect(report).toContain('<!DOCTYPE html>');\r\n      expect(report).toContain('Backtesting Report');\r\n      expect(report).toContain('BTC_USDT');\r\n      expect(report).toContain('GATE_IO_REAL_DATA');\r\n    });\r\n  });\r\n});"],"version":3}