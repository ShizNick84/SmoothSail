d82721980b8f3e3a791bb5cf475badaf
"use strict";

/* istanbul ignore next */
function cov_2pgvlnd7u9() {
  var path = "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\ssh-tunnel-manager.ts";
  var hash = "2874f98886918cca3985002b73a243208cc8dec8";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\ssh-tunnel-manager.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 56
        }
      },
      "2": {
        start: {
          line: 4,
          column: 17
        },
        end: {
          line: 4,
          column: 34
        }
      },
      "3": {
        start: {
          line: 5,
          column: 24
        },
        end: {
          line: 5,
          column: 48
        }
      },
      "4": {
        start: {
          line: 6,
          column: 13
        },
        end: {
          line: 6,
          column: 26
        }
      },
      "5": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 60
        }
      },
      "6": {
        start: {
          line: 12,
          column: 4
        },
        end: {
          line: 12,
          column: 49
        }
      },
      "7": {
        start: {
          line: 13,
          column: 4
        },
        end: {
          line: 13,
          column: 45
        }
      },
      "8": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 14,
          column: 43
        }
      },
      "9": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 15,
          column: 49
        }
      },
      "10": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 16,
          column: 37
        }
      },
      "11": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 17,
          column: 45
        }
      },
      "12": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 16
        }
      },
      "13": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 29
        }
      },
      "14": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 51
        }
      },
      "15": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 37
        }
      },
      "16": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 43,
          column: 10
        }
      },
      "17": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 44,
          column: 59
        }
      },
      "18": {
        start: {
          line: 54,
          column: 27
        },
        end: {
          line: 54,
          column: 63
        }
      },
      "19": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 56,
          column: 52
        }
      },
      "20": {
        start: {
          line: 58,
          column: 29
        },
        end: {
          line: 58,
          column: 56
        }
      },
      "21": {
        start: {
          line: 60,
          column: 27
        },
        end: {
          line: 74,
          column: 9
        }
      },
      "22": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 76,
          column: 55
        }
      },
      "23": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 81,
          column: 11
        }
      },
      "24": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 82,
          column: 26
        }
      },
      "25": {
        start: {
          line: 92,
          column: 27
        },
        end: {
          line: 92,
          column: 61
        }
      },
      "26": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 95,
          column: 9
        }
      },
      "27": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 94,
          column: 69
        }
      },
      "28": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 99,
          column: 9
        }
      },
      "29": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 97,
          column: 74
        }
      },
      "30": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 98,
          column: 19
        }
      },
      "31": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 133,
          column: 9
        }
      },
      "32": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 102,
          column: 75
        }
      },
      "33": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 104,
          column: 76
        }
      },
      "34": {
        start: {
          line: 106,
          column: 28
        },
        end: {
          line: 106,
          column: 69
        }
      },
      "35": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 110,
          column: 15
        }
      },
      "36": {
        start: {
          line: 109,
          column: 44
        },
        end: {
          line: 109,
          column: 73
        }
      },
      "37": {
        start: {
          line: 112,
          column: 31
        },
        end: {
          line: 115,
          column: 14
        }
      },
      "38": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 116,
          column: 44
        }
      },
      "39": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 118,
          column: 50
        }
      },
      "40": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 120,
          column: 53
        }
      },
      "41": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 122,
          column: 74
        }
      },
      "42": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 123,
          column: 48
        }
      },
      "43": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 124,
          column: 85
        }
      },
      "44": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 125,
          column: 53
        }
      },
      "45": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 128,
          column: 88
        }
      },
      "46": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 129,
          column: 71
        }
      },
      "47": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 130,
          column: 96
        }
      },
      "48": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 131,
          column: 56
        }
      },
      "49": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 132,
          column: 24
        }
      },
      "50": {
        start: {
          line: 143,
          column: 27
        },
        end: {
          line: 143,
          column: 61
        }
      },
      "51": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 146,
          column: 9
        }
      },
      "52": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 145,
          column: 69
        }
      },
      "53": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 150,
          column: 9
        }
      },
      "54": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 148,
          column: 77
        }
      },
      "55": {
        start: {
          line: 149,
          column: 12
        },
        end: {
          line: 149,
          column: 19
        }
      },
      "56": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 180,
          column: 9
        }
      },
      "57": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 152,
          column: 74
        }
      },
      "58": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 170,
          column: 13
        }
      },
      "59": {
        start: {
          line: 155,
          column: 16
        },
        end: {
          line: 155,
          column: 51
        }
      },
      "60": {
        start: {
          line: 157,
          column: 16
        },
        end: {
          line: 169,
          column: 19
        }
      },
      "61": {
        start: {
          line: 158,
          column: 36
        },
        end: {
          line: 164,
          column: 28
        }
      },
      "62": {
        start: {
          line: 160,
          column: 24
        },
        end: {
          line: 162,
          column: 25
        }
      },
      "63": {
        start: {
          line: 161,
          column: 28
        },
        end: {
          line: 161,
          column: 63
        }
      },
      "64": {
        start: {
          line: 163,
          column: 24
        },
        end: {
          line: 163,
          column: 34
        }
      },
      "65": {
        start: {
          line: 165,
          column: 20
        },
        end: {
          line: 168,
          column: 23
        }
      },
      "66": {
        start: {
          line: 166,
          column: 24
        },
        end: {
          line: 166,
          column: 46
        }
      },
      "67": {
        start: {
          line: 167,
          column: 24
        },
        end: {
          line: 167,
          column: 34
        }
      },
      "68": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 171,
          column: 77
        }
      },
      "69": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 172,
          column: 38
        }
      },
      "70": {
        start: {
          line: 173,
          column: 12
        },
        end: {
          line: 173,
          column: 42
        }
      },
      "71": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 174,
          column: 73
        }
      },
      "72": {
        start: {
          line: 175,
          column: 12
        },
        end: {
          line: 175,
          column: 56
        }
      },
      "73": {
        start: {
          line: 178,
          column: 12
        },
        end: {
          line: 178,
          column: 88
        }
      },
      "74": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 179,
          column: 24
        }
      },
      "75": {
        start: {
          line: 189,
          column: 8
        },
        end: {
          line: 189,
          column: 50
        }
      },
      "76": {
        start: {
          line: 197,
          column: 8
        },
        end: {
          line: 197,
          column: 53
        }
      },
      "77": {
        start: {
          line: 205,
          column: 8
        },
        end: {
          line: 205,
          column: 93
        }
      },
      "78": {
        start: {
          line: 205,
          column: 55
        },
        end: {
          line: 205,
          column: 91
        }
      },
      "79": {
        start: {
          line: 214,
          column: 31
        },
        end: {
          line: 216,
          column: 9
        }
      },
      "80": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 221,
          column: 9
        }
      },
      "81": {
        start: {
          line: 218,
          column: 12
        },
        end: {
          line: 220,
          column: 13
        }
      },
      "82": {
        start: {
          line: 219,
          column: 16
        },
        end: {
          line: 219,
          column: 83
        }
      },
      "83": {
        start: {
          line: 223,
          column: 8
        },
        end: {
          line: 225,
          column: 9
        }
      },
      "84": {
        start: {
          line: 224,
          column: 12
        },
        end: {
          line: 224,
          column: 77
        }
      },
      "85": {
        start: {
          line: 227,
          column: 8
        },
        end: {
          line: 229,
          column: 9
        }
      },
      "86": {
        start: {
          line: 228,
          column: 12
        },
        end: {
          line: 228,
          column: 71
        }
      },
      "87": {
        start: {
          line: 230,
          column: 8
        },
        end: {
          line: 232,
          column: 9
        }
      },
      "88": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 231,
          column: 73
        }
      },
      "89": {
        start: {
          line: 233,
          column: 8
        },
        end: {
          line: 233,
          column: 73
        }
      },
      "90": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 252,
          column: 9
        }
      },
      "91": {
        start: {
          line: 242,
          column: 26
        },
        end: {
          line: 242,
          column: 66
        }
      },
      "92": {
        start: {
          line: 243,
          column: 12
        },
        end: {
          line: 245,
          column: 13
        }
      },
      "93": {
        start: {
          line: 244,
          column: 16
        },
        end: {
          line: 244,
          column: 85
        }
      },
      "94": {
        start: {
          line: 247,
          column: 12
        },
        end: {
          line: 247,
          column: 76
        }
      },
      "95": {
        start: {
          line: 248,
          column: 12
        },
        end: {
          line: 248,
          column: 74
        }
      },
      "96": {
        start: {
          line: 251,
          column: 12
        },
        end: {
          line: 251,
          column: 120
        }
      },
      "97": {
        start: {
          line: 261,
          column: 21
        },
        end: {
          line: 272,
          column: 9
        }
      },
      "98": {
        start: {
          line: 274,
          column: 8
        },
        end: {
          line: 276,
          column: 9
        }
      },
      "99": {
        start: {
          line: 275,
          column: 12
        },
        end: {
          line: 275,
          column: 28
        }
      },
      "100": {
        start: {
          line: 278,
          column: 8
        },
        end: {
          line: 280,
          column: 9
        }
      },
      "101": {
        start: {
          line: 279,
          column: 12
        },
        end: {
          line: 279,
          column: 48
        }
      },
      "102": {
        start: {
          line: 282,
          column: 8
        },
        end: {
          line: 282,
          column: 59
        }
      },
      "103": {
        start: {
          line: 283,
          column: 8
        },
        end: {
          line: 283,
          column: 20
        }
      },
      "104": {
        start: {
          line: 291,
          column: 8
        },
        end: {
          line: 292,
          column: 19
        }
      },
      "105": {
        start: {
          line: 292,
          column: 12
        },
        end: {
          line: 292,
          column: 19
        }
      },
      "106": {
        start: {
          line: 293,
          column: 24
        },
        end: {
          line: 293,
          column: 42
        }
      },
      "107": {
        start: {
          line: 294,
          column: 8
        },
        end: {
          line: 296,
          column: 11
        }
      },
      "108": {
        start: {
          line: 295,
          column: 12
        },
        end: {
          line: 295,
          column: 90
        }
      },
      "109": {
        start: {
          line: 297,
          column: 8
        },
        end: {
          line: 304,
          column: 11
        }
      },
      "110": {
        start: {
          line: 298,
          column: 28
        },
        end: {
          line: 298,
          column: 50
        }
      },
      "111": {
        start: {
          line: 299,
          column: 12
        },
        end: {
          line: 299,
          column: 75
        }
      },
      "112": {
        start: {
          line: 301,
          column: 12
        },
        end: {
          line: 303,
          column: 13
        }
      },
      "113": {
        start: {
          line: 302,
          column: 16
        },
        end: {
          line: 302,
          column: 53
        }
      },
      "114": {
        start: {
          line: 305,
          column: 8
        },
        end: {
          line: 312,
          column: 11
        }
      },
      "115": {
        start: {
          line: 306,
          column: 12
        },
        end: {
          line: 306,
          column: 88
        }
      },
      "116": {
        start: {
          line: 307,
          column: 12
        },
        end: {
          line: 310,
          column: 13
        }
      },
      "117": {
        start: {
          line: 308,
          column: 16
        },
        end: {
          line: 308,
          column: 81
        }
      },
      "118": {
        start: {
          line: 309,
          column: 16
        },
        end: {
          line: 309,
          column: 60
        }
      },
      "119": {
        start: {
          line: 311,
          column: 12
        },
        end: {
          line: 311,
          column: 38
        }
      },
      "120": {
        start: {
          line: 313,
          column: 8
        },
        end: {
          line: 318,
          column: 11
        }
      },
      "121": {
        start: {
          line: 314,
          column: 12
        },
        end: {
          line: 314,
          column: 77
        }
      },
      "122": {
        start: {
          line: 315,
          column: 12
        },
        end: {
          line: 315,
          column: 71
        }
      },
      "123": {
        start: {
          line: 316,
          column: 12
        },
        end: {
          line: 316,
          column: 55
        }
      },
      "124": {
        start: {
          line: 317,
          column: 12
        },
        end: {
          line: 317,
          column: 56
        }
      },
      "125": {
        start: {
          line: 327,
          column: 8
        },
        end: {
          line: 345,
          column: 11
        }
      },
      "126": {
        start: {
          line: 328,
          column: 28
        },
        end: {
          line: 330,
          column: 25
        }
      },
      "127": {
        start: {
          line: 329,
          column: 16
        },
        end: {
          line: 329,
          column: 85
        }
      },
      "128": {
        start: {
          line: 331,
          column: 28
        },
        end: {
          line: 335,
          column: 13
        }
      },
      "129": {
        start: {
          line: 332,
          column: 16
        },
        end: {
          line: 332,
          column: 38
        }
      },
      "130": {
        start: {
          line: 333,
          column: 16
        },
        end: {
          line: 333,
          column: 60
        }
      },
      "131": {
        start: {
          line: 334,
          column: 16
        },
        end: {
          line: 334,
          column: 26
        }
      },
      "132": {
        start: {
          line: 336,
          column: 28
        },
        end: {
          line: 342,
          column: 13
        }
      },
      "133": {
        start: {
          line: 337,
          column: 16
        },
        end: {
          line: 341,
          column: 17
        }
      },
      "134": {
        start: {
          line: 338,
          column: 20
        },
        end: {
          line: 338,
          column: 42
        }
      },
      "135": {
        start: {
          line: 339,
          column: 20
        },
        end: {
          line: 339,
          column: 64
        }
      },
      "136": {
        start: {
          line: 340,
          column: 20
        },
        end: {
          line: 340,
          column: 34
        }
      },
      "137": {
        start: {
          line: 343,
          column: 12
        },
        end: {
          line: 343,
          column: 46
        }
      },
      "138": {
        start: {
          line: 344,
          column: 12
        },
        end: {
          line: 344,
          column: 46
        }
      },
      "139": {
        start: {
          line: 354,
          column: 25
        },
        end: {
          line: 354,
          column: 41
        }
      },
      "140": {
        start: {
          line: 355,
          column: 8
        },
        end: {
          line: 355,
          column: 36
        }
      },
      "141": {
        start: {
          line: 356,
          column: 8
        },
        end: {
          line: 356,
          column: 45
        }
      },
      "142": {
        start: {
          line: 357,
          column: 8
        },
        end: {
          line: 357,
          column: 97
        }
      },
      "143": {
        start: {
          line: 358,
          column: 8
        },
        end: {
          line: 358,
          column: 66
        }
      },
      "144": {
        start: {
          line: 366,
          column: 8
        },
        end: {
          line: 366,
          column: 81
        }
      },
      "145": {
        start: {
          line: 375,
          column: 24
        },
        end: {
          line: 375,
          column: 117
        }
      },
      "146": {
        start: {
          line: 376,
          column: 8
        },
        end: {
          line: 376,
          column: 32
        }
      },
      "147": {
        start: {
          line: 382,
          column: 8
        },
        end: {
          line: 382,
          column: 63
        }
      },
      "148": {
        start: {
          line: 383,
          column: 35
        },
        end: {
          line: 383,
          column: 214
        }
      },
      "149": {
        start: {
          line: 383,
          column: 91
        },
        end: {
          line: 383,
          column: 213
        }
      },
      "150": {
        start: {
          line: 383,
          column: 142
        },
        end: {
          line: 383,
          column: 212
        }
      },
      "151": {
        start: {
          line: 384,
          column: 8
        },
        end: {
          line: 384,
          column: 46
        }
      },
      "152": {
        start: {
          line: 385,
          column: 8
        },
        end: {
          line: 385,
          column: 33
        }
      },
      "153": {
        start: {
          line: 386,
          column: 8
        },
        end: {
          line: 386,
          column: 57
        }
      },
      "154": {
        start: {
          line: 389,
          column: 0
        },
        end: {
          line: 389,
          column: 44
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 11,
            column: 1
          },
          end: {
            line: 11,
            column: 2
          }
        },
        loc: {
          start: {
            line: 11,
            column: 24
          },
          end: {
            line: 18,
            column: 1
          }
        },
        line: 11
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 29,
            column: 4
          },
          end: {
            line: 29,
            column: 5
          }
        },
        loc: {
          start: {
            line: 29,
            column: 43
          },
          end: {
            line: 45,
            column: 5
          }
        },
        line: 29
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 53,
            column: 4
          },
          end: {
            line: 53,
            column: 5
          }
        },
        loc: {
          start: {
            line: 53,
            column: 31
          },
          end: {
            line: 83,
            column: 5
          }
        },
        line: 53
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 91,
            column: 4
          },
          end: {
            line: 91,
            column: 5
          }
        },
        loc: {
          start: {
            line: 91,
            column: 40
          },
          end: {
            line: 134,
            column: 5
          }
        },
        line: 91
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 109,
            column: 37
          },
          end: {
            line: 109,
            column: 38
          }
        },
        loc: {
          start: {
            line: 109,
            column: 44
          },
          end: {
            line: 109,
            column: 73
          }
        },
        line: 109
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 142,
            column: 4
          },
          end: {
            line: 142,
            column: 5
          }
        },
        loc: {
          start: {
            line: 142,
            column: 41
          },
          end: {
            line: 181,
            column: 5
          }
        },
        line: 142
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 157,
            column: 34
          },
          end: {
            line: 157,
            column: 35
          }
        },
        loc: {
          start: {
            line: 157,
            column: 47
          },
          end: {
            line: 169,
            column: 17
          }
        },
        line: 157
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 158,
            column: 47
          },
          end: {
            line: 158,
            column: 48
          }
        },
        loc: {
          start: {
            line: 158,
            column: 53
          },
          end: {
            line: 164,
            column: 21
          }
        },
        line: 158
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 165,
            column: 50
          },
          end: {
            line: 165,
            column: 51
          }
        },
        loc: {
          start: {
            line: 165,
            column: 56
          },
          end: {
            line: 168,
            column: 21
          }
        },
        line: 165
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 188,
            column: 4
          },
          end: {
            line: 188,
            column: 5
          }
        },
        loc: {
          start: {
            line: 188,
            column: 32
          },
          end: {
            line: 190,
            column: 5
          }
        },
        line: 188
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 196,
            column: 4
          },
          end: {
            line: 196,
            column: 5
          }
        },
        loc: {
          start: {
            line: 196,
            column: 24
          },
          end: {
            line: 198,
            column: 5
          }
        },
        line: 196
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 204,
            column: 4
          },
          end: {
            line: 204,
            column: 5
          }
        },
        loc: {
          start: {
            line: 204,
            column: 27
          },
          end: {
            line: 206,
            column: 5
          }
        },
        line: 204
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 205,
            column: 47
          },
          end: {
            line: 205,
            column: 48
          }
        },
        loc: {
          start: {
            line: 205,
            column: 55
          },
          end: {
            line: 205,
            column: 91
          }
        },
        line: 205
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 213,
            column: 4
          },
          end: {
            line: 213,
            column: 5
          }
        },
        loc: {
          start: {
            line: 213,
            column: 39
          },
          end: {
            line: 234,
            column: 5
          }
        },
        line: 213
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 240,
            column: 4
          },
          end: {
            line: 240,
            column: 5
          }
        },
        loc: {
          start: {
            line: 240,
            column: 45
          },
          end: {
            line: 253,
            column: 5
          }
        },
        line: 240
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 260,
            column: 4
          },
          end: {
            line: 260,
            column: 5
          }
        },
        loc: {
          start: {
            line: 260,
            column: 30
          },
          end: {
            line: 284,
            column: 5
          }
        },
        line: 260
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 290,
            column: 4
          },
          end: {
            line: 290,
            column: 5
          }
        },
        loc: {
          start: {
            line: 290,
            column: 37
          },
          end: {
            line: 319,
            column: 5
          }
        },
        line: 290
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 294,
            column: 35
          },
          end: {
            line: 294,
            column: 36
          }
        },
        loc: {
          start: {
            line: 294,
            column: 45
          },
          end: {
            line: 296,
            column: 9
          }
        },
        line: 294
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 297,
            column: 35
          },
          end: {
            line: 297,
            column: 36
          }
        },
        loc: {
          start: {
            line: 297,
            column: 45
          },
          end: {
            line: 304,
            column: 9
          }
        },
        line: 297
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 305,
            column: 27
          },
          end: {
            line: 305,
            column: 28
          }
        },
        loc: {
          start: {
            line: 305,
            column: 45
          },
          end: {
            line: 312,
            column: 9
          }
        },
        line: 305
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 313,
            column: 28
          },
          end: {
            line: 313,
            column: 29
          }
        },
        loc: {
          start: {
            line: 313,
            column: 39
          },
          end: {
            line: 318,
            column: 9
          }
        },
        line: 313
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 326,
            column: 4
          },
          end: {
            line: 326,
            column: 5
          }
        },
        loc: {
          start: {
            line: 326,
            column: 59
          },
          end: {
            line: 346,
            column: 5
          }
        },
        line: 326
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 327,
            column: 27
          },
          end: {
            line: 327,
            column: 28
          }
        },
        loc: {
          start: {
            line: 327,
            column: 48
          },
          end: {
            line: 345,
            column: 9
          }
        },
        line: 327
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 328,
            column: 39
          },
          end: {
            line: 328,
            column: 40
          }
        },
        loc: {
          start: {
            line: 328,
            column: 45
          },
          end: {
            line: 330,
            column: 13
          }
        },
        line: 328
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 331,
            column: 28
          },
          end: {
            line: 331,
            column: 29
          }
        },
        loc: {
          start: {
            line: 331,
            column: 34
          },
          end: {
            line: 335,
            column: 13
          }
        },
        line: 331
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 336,
            column: 28
          },
          end: {
            line: 336,
            column: 29
          }
        },
        loc: {
          start: {
            line: 336,
            column: 45
          },
          end: {
            line: 342,
            column: 13
          }
        },
        line: 336
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 353,
            column: 4
          },
          end: {
            line: 353,
            column: 5
          }
        },
        loc: {
          start: {
            line: 353,
            column: 48
          },
          end: {
            line: 359,
            column: 5
          }
        },
        line: 353
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 365,
            column: 4
          },
          end: {
            line: 365,
            column: 5
          }
        },
        loc: {
          start: {
            line: 365,
            column: 27
          },
          end: {
            line: 367,
            column: 5
          }
        },
        line: 365
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 374,
            column: 4
          },
          end: {
            line: 374,
            column: 5
          }
        },
        loc: {
          start: {
            line: 374,
            column: 18
          },
          end: {
            line: 377,
            column: 5
          }
        },
        line: 374
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 381,
            column: 4
          },
          end: {
            line: 381,
            column: 5
          }
        },
        loc: {
          start: {
            line: 381,
            column: 20
          },
          end: {
            line: 387,
            column: 5
          }
        },
        line: 381
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 383,
            column: 75
          },
          end: {
            line: 383,
            column: 76
          }
        },
        loc: {
          start: {
            line: 383,
            column: 91
          },
          end: {
            line: 383,
            column: 213
          }
        },
        line: 383
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 383,
            column: 133
          },
          end: {
            line: 383,
            column: 134
          }
        },
        loc: {
          start: {
            line: 383,
            column: 142
          },
          end: {
            line: 383,
            column: 212
          }
        },
        line: 383
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 18,
            column: 3
          },
          end: {
            line: 18,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 3
          },
          end: {
            line: 18,
            column: 14
          }
        }, {
          start: {
            line: 18,
            column: 19
          },
          end: {
            line: 18,
            column: 57
          }
        }],
        line: 18
      },
      "1": {
        loc: {
          start: {
            line: 93,
            column: 8
          },
          end: {
            line: 95,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 93,
            column: 8
          },
          end: {
            line: 95,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 93
      },
      "2": {
        loc: {
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 99,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 99,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 96
      },
      "3": {
        loc: {
          start: {
            line: 130,
            column: 41
          },
          end: {
            line: 130,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 130,
            column: 66
          },
          end: {
            line: 130,
            column: 79
          }
        }, {
          start: {
            line: 130,
            column: 82
          },
          end: {
            line: 130,
            column: 95
          }
        }],
        line: 130
      },
      "4": {
        loc: {
          start: {
            line: 144,
            column: 8
          },
          end: {
            line: 146,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 144,
            column: 8
          },
          end: {
            line: 146,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 144
      },
      "5": {
        loc: {
          start: {
            line: 147,
            column: 8
          },
          end: {
            line: 150,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 147,
            column: 8
          },
          end: {
            line: 150,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 147
      },
      "6": {
        loc: {
          start: {
            line: 153,
            column: 12
          },
          end: {
            line: 170,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 153,
            column: 12
          },
          end: {
            line: 170,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 153
      },
      "7": {
        loc: {
          start: {
            line: 160,
            column: 24
          },
          end: {
            line: 162,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 160,
            column: 24
          },
          end: {
            line: 162,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 160
      },
      "8": {
        loc: {
          start: {
            line: 160,
            column: 28
          },
          end: {
            line: 160,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 160,
            column: 28
          },
          end: {
            line: 160,
            column: 46
          }
        }, {
          start: {
            line: 160,
            column: 50
          },
          end: {
            line: 160,
            column: 76
          }
        }],
        line: 160
      },
      "9": {
        loc: {
          start: {
            line: 218,
            column: 12
          },
          end: {
            line: 220,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 218,
            column: 12
          },
          end: {
            line: 220,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 218
      },
      "10": {
        loc: {
          start: {
            line: 223,
            column: 8
          },
          end: {
            line: 225,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 223,
            column: 8
          },
          end: {
            line: 225,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 223
      },
      "11": {
        loc: {
          start: {
            line: 227,
            column: 8
          },
          end: {
            line: 229,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 227,
            column: 8
          },
          end: {
            line: 229,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 227
      },
      "12": {
        loc: {
          start: {
            line: 227,
            column: 12
          },
          end: {
            line: 227,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 227,
            column: 12
          },
          end: {
            line: 227,
            column: 32
          }
        }, {
          start: {
            line: 227,
            column: 36
          },
          end: {
            line: 227,
            column: 60
          }
        }],
        line: 227
      },
      "13": {
        loc: {
          start: {
            line: 230,
            column: 8
          },
          end: {
            line: 232,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 230,
            column: 8
          },
          end: {
            line: 232,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 230
      },
      "14": {
        loc: {
          start: {
            line: 230,
            column: 12
          },
          end: {
            line: 230,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 230,
            column: 12
          },
          end: {
            line: 230,
            column: 33
          }
        }, {
          start: {
            line: 230,
            column: 37
          },
          end: {
            line: 230,
            column: 62
          }
        }],
        line: 230
      },
      "15": {
        loc: {
          start: {
            line: 243,
            column: 12
          },
          end: {
            line: 245,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 243,
            column: 12
          },
          end: {
            line: 245,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 243
      },
      "16": {
        loc: {
          start: {
            line: 251,
            column: 62
          },
          end: {
            line: 251,
            column: 116
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 251,
            column: 87
          },
          end: {
            line: 251,
            column: 100
          }
        }, {
          start: {
            line: 251,
            column: 103
          },
          end: {
            line: 251,
            column: 116
          }
        }],
        line: 251
      },
      "17": {
        loc: {
          start: {
            line: 274,
            column: 8
          },
          end: {
            line: 276,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 274,
            column: 8
          },
          end: {
            line: 276,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 274
      },
      "18": {
        loc: {
          start: {
            line: 278,
            column: 8
          },
          end: {
            line: 280,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 278,
            column: 8
          },
          end: {
            line: 280,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 278
      },
      "19": {
        loc: {
          start: {
            line: 291,
            column: 8
          },
          end: {
            line: 292,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 291,
            column: 8
          },
          end: {
            line: 292,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 291
      },
      "20": {
        loc: {
          start: {
            line: 301,
            column: 12
          },
          end: {
            line: 303,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 301,
            column: 12
          },
          end: {
            line: 303,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 301
      },
      "21": {
        loc: {
          start: {
            line: 307,
            column: 12
          },
          end: {
            line: 310,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 307,
            column: 12
          },
          end: {
            line: 310,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 307
      },
      "22": {
        loc: {
          start: {
            line: 326,
            column: 40
          },
          end: {
            line: 326,
            column: 57
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 326,
            column: 52
          },
          end: {
            line: 326,
            column: 57
          }
        }],
        line: 326
      },
      "23": {
        loc: {
          start: {
            line: 337,
            column: 16
          },
          end: {
            line: 341,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 337,
            column: 16
          },
          end: {
            line: 341,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 337
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0],
      "23": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\ssh-tunnel-manager.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\ssh-tunnel-manager.ts"],
      sourcesContent: ["import { EventEmitter } from 'events';\r\nimport { spawn, ChildProcess } from 'child_process';\r\nimport { promises as fs, constants as fsConstants } from 'fs';\r\nimport { join } from 'path';\r\nimport { Logger } from '../core/logging/logger';\r\nimport { EncryptionService } from '../security/encryption-service';\r\n\r\n/**\r\n * SSH Tunnel Configuration interface\r\n * Defines all parameters needed to establish a secure SSH tunnel to Oracle Free Tier\r\n */\r\nexport interface TunnelConfig {\r\n  /** Oracle Free Tier IP address */\r\n  oracleIP: string;\r\n  /** SSH port (default: 22) */\r\n  sshPort: number;\r\n  /** SSH username for Oracle instance */\r\n  username: string;\r\n  /** Path to private key file */\r\n  privateKeyPath: string;\r\n  /** Local port for tunnel */\r\n  localPort: number;\r\n  /** Remote port on Oracle instance */\r\n  remotePort: number;\r\n  /** Enable SSH keep-alive */\r\n  keepAlive: boolean;\r\n  /** Enable SSH compression */\r\n  compression: boolean;\r\n  /** Connection timeout in seconds */\r\n  connectionTimeout: number;\r\n  /** Server alive interval in seconds */\r\n  serverAliveInterval: number;\r\n  /** Maximum server alive count misses */\r\n  serverAliveCountMax: number;\r\n}\r\n\r\n/**\r\n * SSH Tunnel Connection interface\r\n * Represents an active SSH tunnel connection with state management\r\n */\r\nexport interface TunnelConnection {\r\n  /** Unique connection identifier */\r\n  id: string;\r\n  /** Connection configuration */\r\n  config: TunnelConfig;\r\n  /** SSH process handle */\r\n  process: ChildProcess | null;\r\n  /** Connection state */\r\n  state: TunnelState;\r\n  /** Connection establishment timestamp */\r\n  connectedAt: Date | null;\r\n  /** Last activity timestamp */\r\n  lastActivity: Date;\r\n  /** Connection statistics */\r\n  stats: TunnelStats;\r\n}\r\n\r\n/**\r\n * Tunnel connection states\r\n */\r\nexport enum TunnelState {\r\n  DISCONNECTED = 'DISCONNECTED',\r\n  CONNECTING = 'CONNECTING',\r\n  CONNECTED = 'CONNECTED',\r\n  RECONNECTING = 'RECONNECTING',\r\n  FAILED = 'FAILED',\r\n  TERMINATED = 'TERMINATED'\r\n}\r\n\r\n/**\r\n * Tunnel connection statistics\r\n */\r\nexport interface TunnelStats {\r\n  /** Total bytes transferred */\r\n  bytesTransferred: number;\r\n  /** Connection uptime in milliseconds */\r\n  uptime: number;\r\n  /** Number of reconnection attempts */\r\n  reconnectAttempts: number;\r\n  /** Last error message */\r\n  lastError: string | null;\r\n  /** Connection quality score (0-100) */\r\n  qualityScore: number;\r\n}\r\n\r\n/**\r\n * SSH Tunnel Manager\r\n * Manages SSH tunnel connections to Oracle Free Tier with authentication,\r\n * state management, and connection validation\r\n */\r\nexport class SSHTunnelManager extends EventEmitter {\r\n  private logger: Logger;\r\n  private encryptionService: EncryptionService;\r\n  private connections: Map<string, TunnelConnection>;\r\n  private defaultConfig: Partial<TunnelConfig>;\r\n\r\n  constructor(\r\n    logger: Logger,\r\n    encryptionService: EncryptionService\r\n  ) {\r\n    super();\r\n    this.logger = logger;\r\n    this.encryptionService = encryptionService;\r\n    this.connections = new Map();\r\n    \r\n    // Default configuration for Oracle Free Tier\r\n    this.defaultConfig = {\r\n      oracleIP: '168.138.104.117',\r\n      sshPort: 22,\r\n      keepAlive: true,\r\n      compression: true,\r\n      connectionTimeout: 30,\r\n      serverAliveInterval: 60,\r\n      serverAliveCountMax: 3\r\n    };\r\n\r\n    this.logger.info('SSH Tunnel Manager initialized');\r\n  }\r\n\r\n  /**\r\n   * Create a new SSH tunnel connection to Oracle Free Tier\r\n   * Implements secure authentication with private key management\r\n   * \r\n   * @param config - Tunnel configuration parameters\r\n   * @returns Promise resolving to tunnel connection\r\n   */\r\n  async createTunnel(config: Partial<TunnelConfig>): Promise<TunnelConnection> {\r\n    const fullConfig = { ...this.defaultConfig, ...config } as TunnelConfig;\r\n    \r\n    // Validate configuration\r\n    await this.validateTunnelConfig(fullConfig);\r\n    \r\n    // Generate unique connection ID\r\n    const connectionId = this.generateConnectionId();\r\n    \r\n    // Create connection object\r\n    const connection: TunnelConnection = {\r\n      id: connectionId,\r\n      config: fullConfig,\r\n      process: null,\r\n      state: TunnelState.DISCONNECTED,\r\n      connectedAt: null,\r\n      lastActivity: new Date(),\r\n      stats: {\r\n        bytesTransferred: 0,\r\n        uptime: 0,\r\n        reconnectAttempts: 0,\r\n        lastError: null,\r\n        qualityScore: 0\r\n      }\r\n    };\r\n\r\n    // Store connection\r\n    this.connections.set(connectionId, connection);\r\n    \r\n    this.logger.info(`Created SSH tunnel connection: ${connectionId}`, {\r\n      oracleIP: fullConfig.oracleIP,\r\n      localPort: fullConfig.localPort,\r\n      remotePort: fullConfig.remotePort\r\n    });\r\n\r\n    return connection;\r\n  }\r\n\r\n  /**\r\n   * Establish SSH tunnel connection\r\n   * Implements connection authentication and state management\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @returns Promise resolving when connection is established\r\n   */\r\n  async establishTunnel(connectionId: string): Promise<void> {\r\n    const connection = this.connections.get(connectionId);\r\n    if (!connection) {\r\n      throw new Error(`Connection not found: ${connectionId}`);\r\n    }\r\n\r\n    if (connection.state === TunnelState.CONNECTED) {\r\n      this.logger.warn(`Tunnel already connected: ${connectionId}`);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Update state to connecting\r\n      this.updateConnectionState(connection, TunnelState.CONNECTING);\r\n      \r\n      // Validate private key exists and is accessible\r\n      await this.validatePrivateKey(connection.config.privateKeyPath);\r\n      \r\n      // Build SSH command arguments\r\n      const sshArgs = this.buildSSHArguments(connection.config);\r\n      \r\n      this.logger.info(`Establishing SSH tunnel: ${connectionId}`, {\r\n        command: 'ssh',\r\n        args: sshArgs.filter(arg => !arg.includes('IdentityFile')) // Don't log private key path\r\n      });\r\n\r\n      // Spawn SSH process\r\n      const sshProcess = spawn('ssh', sshArgs, {\r\n        stdio: ['pipe', 'pipe', 'pipe'],\r\n        detached: false\r\n      });\r\n\r\n      connection.process = sshProcess;\r\n\r\n      // Set up process event handlers\r\n      this.setupProcessHandlers(connection);\r\n\r\n      // Wait for connection establishment\r\n      await this.waitForConnection(connection);\r\n      \r\n      // Update connection state\r\n      this.updateConnectionState(connection, TunnelState.CONNECTED);\r\n      connection.connectedAt = new Date();\r\n      \r\n      this.logger.info(`SSH tunnel established successfully: ${connectionId}`);\r\n      this.emit('tunnelConnected', connection);\r\n\r\n    } catch (error) {\r\n      this.logger.error(`Failed to establish SSH tunnel: ${connectionId}`, error);\r\n      this.updateConnectionState(connection, TunnelState.FAILED);\r\n      connection.stats.lastError = error instanceof Error ? error.message : String(error);\r\n      this.emit('tunnelError', connection, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Disconnect SSH tunnel\r\n   * Gracefully terminates the SSH connection\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @returns Promise resolving when disconnected\r\n   */\r\n  async disconnectTunnel(connectionId: string): Promise<void> {\r\n    const connection = this.connections.get(connectionId);\r\n    if (!connection) {\r\n      throw new Error(`Connection not found: ${connectionId}`);\r\n    }\r\n\r\n    if (connection.state === TunnelState.DISCONNECTED) {\r\n      this.logger.warn(`Tunnel already disconnected: ${connectionId}`);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      this.logger.info(`Disconnecting SSH tunnel: ${connectionId}`);\r\n      \r\n      if (connection.process) {\r\n        // Graceful termination\r\n        connection.process.kill('SIGTERM');\r\n        \r\n        // Wait for process to exit\r\n        await new Promise<void>((resolve) => {\r\n          const timeout = setTimeout(() => {\r\n            // Force kill if graceful termination fails\r\n            if (connection.process && !connection.process.killed) {\r\n              connection.process.kill('SIGKILL');\r\n            }\r\n            resolve();\r\n          }, 5000);\r\n\r\n          connection.process!.on('exit', () => {\r\n            clearTimeout(timeout);\r\n            resolve();\r\n          });\r\n        });\r\n      }\r\n\r\n      this.updateConnectionState(connection, TunnelState.DISCONNECTED);\r\n      connection.process = null;\r\n      connection.connectedAt = null;\r\n      \r\n      this.logger.info(`SSH tunnel disconnected: ${connectionId}`);\r\n      this.emit('tunnelDisconnected', connection);\r\n\r\n    } catch (error) {\r\n      this.logger.error(`Error disconnecting SSH tunnel: ${connectionId}`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get connection by ID\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @returns Tunnel connection or undefined\r\n   */\r\n  getConnection(connectionId: string): TunnelConnection | undefined {\r\n    return this.connections.get(connectionId);\r\n  }\r\n\r\n  /**\r\n   * Get all connections\r\n   * \r\n   * @returns Array of all tunnel connections\r\n   */\r\n  getAllConnections(): TunnelConnection[] {\r\n    return Array.from(this.connections.values());\r\n  }\r\n\r\n  /**\r\n   * Get active connections\r\n   * \r\n   * @returns Array of connected tunnel connections\r\n   */\r\n  getActiveConnections(): TunnelConnection[] {\r\n    return this.getAllConnections().filter(\r\n      conn => conn.state === TunnelState.CONNECTED\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Validate tunnel configuration\r\n   * Ensures all required parameters are present and valid\r\n   * \r\n   * @param config - Tunnel configuration to validate\r\n   */\r\n  private async validateTunnelConfig(config: TunnelConfig): Promise<void> {\r\n    const requiredFields: (keyof TunnelConfig)[] = [\r\n      'oracleIP', 'username', 'privateKeyPath', 'localPort', 'remotePort'\r\n    ];\r\n\r\n    for (const field of requiredFields) {\r\n      if (!config[field]) {\r\n        throw new Error(`Missing required tunnel configuration: ${field}`);\r\n      }\r\n    }\r\n\r\n    // Validate IP address format\r\n    if (!this.isValidIP(config.oracleIP)) {\r\n      throw new Error(`Invalid Oracle IP address: ${config.oracleIP}`);\r\n    }\r\n\r\n    // Validate port ranges\r\n    if (config.localPort < 1 || config.localPort > 65535) {\r\n      throw new Error(`Invalid local port: ${config.localPort}`);\r\n    }\r\n\r\n    if (config.remotePort < 1 || config.remotePort > 65535) {\r\n      throw new Error(`Invalid remote port: ${config.remotePort}`);\r\n    }\r\n\r\n    this.logger.debug('Tunnel configuration validated successfully');\r\n  }\r\n\r\n  /**\r\n   * Validate private key file exists and is accessible\r\n   * \r\n   * @param privateKeyPath - Path to private key file\r\n   */\r\n  private async validatePrivateKey(privateKeyPath: string): Promise<void> {\r\n    try {\r\n      const stats = await fs.stat(privateKeyPath);\r\n      \r\n      if (!stats.isFile()) {\r\n        throw new Error(`Private key path is not a file: ${privateKeyPath}`);\r\n      }\r\n\r\n      // Check file permissions (should be readable by owner only)\r\n      await fs.access(privateKeyPath, fsConstants.R_OK);\r\n      \r\n      this.logger.debug(`Private key validated: ${privateKeyPath}`);\r\n      \r\n    } catch (error) {\r\n      throw new Error(`Private key validation failed: ${error instanceof Error ? error.message : String(error)}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Build SSH command arguments\r\n   * \r\n   * @param config - Tunnel configuration\r\n   * @returns Array of SSH command arguments\r\n   */\r\n  private buildSSHArguments(config: TunnelConfig): string[] {\r\n    const args = [\r\n      '-N', // No remote command execution\r\n      '-T', // Disable pseudo-terminal allocation\r\n      '-o', 'StrictHostKeyChecking=no', // Accept new host keys\r\n      '-o', 'UserKnownHostsFile=/dev/null', // Don't save host keys\r\n      '-o', `ConnectTimeout=${config.connectionTimeout}`,\r\n      '-o', `ServerAliveInterval=${config.serverAliveInterval}`,\r\n      '-o', `ServerAliveCountMax=${config.serverAliveCountMax}`,\r\n      '-i', config.privateKeyPath, // Identity file\r\n      '-p', config.sshPort.toString(), // SSH port\r\n      '-L', `${config.localPort}:localhost:${config.remotePort}`, // Local port forwarding\r\n    ];\r\n\r\n    // Add compression if enabled\r\n    if (config.compression) {\r\n      args.push('-C');\r\n    }\r\n\r\n    // Add keep-alive if enabled\r\n    if (config.keepAlive) {\r\n      args.push('-o', 'TCPKeepAlive=yes');\r\n    }\r\n\r\n    // Add connection target\r\n    args.push(`${config.username}@${config.oracleIP}`);\r\n\r\n    return args;\r\n  }\r\n\r\n  /**\r\n   * Set up SSH process event handlers\r\n   * \r\n   * @param connection - Tunnel connection\r\n   */\r\n  private setupProcessHandlers(connection: TunnelConnection): void {\r\n    if (!connection.process) return;\r\n\r\n    const process = connection.process;\r\n\r\n    process.stdout?.on('data', (data) => {\r\n      this.logger.debug(`SSH stdout [${connection.id}]: ${data.toString().trim()}`);\r\n    });\r\n\r\n    process.stderr?.on('data', (data) => {\r\n      const message = data.toString().trim();\r\n      this.logger.debug(`SSH stderr [${connection.id}]: ${message}`);\r\n      \r\n      // Check for connection success indicators\r\n      if (message.includes('Local forwarding listening')) {\r\n        this.emit('tunnelReady', connection);\r\n      }\r\n    });\r\n\r\n    process.on('exit', (code, signal) => {\r\n      this.logger.info(`SSH process exited [${connection.id}]`, { code, signal });\r\n      \r\n      if (connection.state === TunnelState.CONNECTED) {\r\n        this.updateConnectionState(connection, TunnelState.DISCONNECTED);\r\n        this.emit('tunnelDisconnected', connection);\r\n      }\r\n      \r\n      connection.process = null;\r\n    });\r\n\r\n    process.on('error', (error) => {\r\n      this.logger.error(`SSH process error [${connection.id}]`, error);\r\n      this.updateConnectionState(connection, TunnelState.FAILED);\r\n      connection.stats.lastError = error.message;\r\n      this.emit('tunnelError', connection, error);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Wait for SSH tunnel connection to be established\r\n   * \r\n   * @param connection - Tunnel connection\r\n   * @param timeoutMs - Timeout in milliseconds\r\n   */\r\n  private async waitForConnection(connection: TunnelConnection, timeoutMs: number = 30000): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      const timeout = setTimeout(() => {\r\n        reject(new Error(`SSH tunnel connection timeout: ${connection.id}`));\r\n      }, timeoutMs);\r\n\r\n      const onReady = () => {\r\n        clearTimeout(timeout);\r\n        this.removeListener('tunnelError', onError);\r\n        resolve();\r\n      };\r\n\r\n      const onError = (conn: TunnelConnection, error: Error) => {\r\n        if (conn.id === connection.id) {\r\n          clearTimeout(timeout);\r\n          this.removeListener('tunnelReady', onReady);\r\n          reject(error);\r\n        }\r\n      };\r\n\r\n      this.once('tunnelReady', onReady);\r\n      this.once('tunnelError', onError);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update connection state and emit events\r\n   * \r\n   * @param connection - Tunnel connection\r\n   * @param newState - New connection state\r\n   */\r\n  private updateConnectionState(connection: TunnelConnection, newState: TunnelState): void {\r\n    const oldState = connection.state;\r\n    connection.state = newState;\r\n    connection.lastActivity = new Date();\r\n\r\n    this.logger.debug(`Tunnel state changed [${connection.id}]: ${oldState} -> ${newState}`);\r\n    this.emit('stateChanged', connection, oldState, newState);\r\n  }\r\n\r\n  /**\r\n   * Generate unique connection ID\r\n   * \r\n   * @returns Unique connection identifier\r\n   */\r\n  private generateConnectionId(): string {\r\n    return `tunnel_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  /**\r\n   * Validate IP address format\r\n   * \r\n   * @param ip - IP address to validate\r\n   * @returns True if valid IP address\r\n   */\r\n  private isValidIP(ip: string): boolean {\r\n    const ipRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;\r\n    return ipRegex.test(ip);\r\n  }\r\n\r\n  /**\r\n   * Cleanup all connections on shutdown\r\n   */\r\n  async cleanup(): Promise<void> {\r\n    this.logger.info('Cleaning up SSH tunnel connections');\r\n    \r\n    const disconnectPromises = Array.from(this.connections.keys()).map(\r\n      connectionId => this.disconnectTunnel(connectionId).catch(error => \r\n        this.logger.error(`Error disconnecting tunnel ${connectionId}`, error)\r\n      )\r\n    );\r\n\r\n    await Promise.all(disconnectPromises);\r\n    this.connections.clear();\r\n    \r\n    this.logger.info('SSH tunnel cleanup completed');\r\n  }\r\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "2874f98886918cca3985002b73a243208cc8dec8"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2pgvlnd7u9 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2pgvlnd7u9();
cov_2pgvlnd7u9().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2pgvlnd7u9().s[1]++;
exports.SSHTunnelManager = exports.TunnelState = void 0;
const events_1 =
/* istanbul ignore next */
(cov_2pgvlnd7u9().s[2]++, require("events"));
const child_process_1 =
/* istanbul ignore next */
(cov_2pgvlnd7u9().s[3]++, require("child_process"));
const fs_1 =
/* istanbul ignore next */
(cov_2pgvlnd7u9().s[4]++, require("fs"));
/**
 * Tunnel connection states
 */
var TunnelState;
/* istanbul ignore next */
cov_2pgvlnd7u9().s[5]++;
(function (TunnelState) {
  /* istanbul ignore next */
  cov_2pgvlnd7u9().f[0]++;
  cov_2pgvlnd7u9().s[6]++;
  TunnelState["DISCONNECTED"] = "DISCONNECTED";
  /* istanbul ignore next */
  cov_2pgvlnd7u9().s[7]++;
  TunnelState["CONNECTING"] = "CONNECTING";
  /* istanbul ignore next */
  cov_2pgvlnd7u9().s[8]++;
  TunnelState["CONNECTED"] = "CONNECTED";
  /* istanbul ignore next */
  cov_2pgvlnd7u9().s[9]++;
  TunnelState["RECONNECTING"] = "RECONNECTING";
  /* istanbul ignore next */
  cov_2pgvlnd7u9().s[10]++;
  TunnelState["FAILED"] = "FAILED";
  /* istanbul ignore next */
  cov_2pgvlnd7u9().s[11]++;
  TunnelState["TERMINATED"] = "TERMINATED";
})(
/* istanbul ignore next */
(cov_2pgvlnd7u9().b[0][0]++, TunnelState) ||
/* istanbul ignore next */
(cov_2pgvlnd7u9().b[0][1]++, exports.TunnelState = TunnelState = {}));
/**
 * SSH Tunnel Manager
 * Manages SSH tunnel connections to Oracle Free Tier with authentication,
 * state management, and connection validation
 */
class SSHTunnelManager extends
/* istanbul ignore next */
(events_1.EventEmitter) {
  logger;
  encryptionService;
  connections;
  defaultConfig;
  constructor(logger, encryptionService) {
    /* istanbul ignore next */
    cov_2pgvlnd7u9().f[1]++;
    cov_2pgvlnd7u9().s[12]++;
    super();
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[13]++;
    this.logger = logger;
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[14]++;
    this.encryptionService = encryptionService;
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[15]++;
    this.connections = new Map();
    // Default configuration for Oracle Free Tier
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[16]++;
    this.defaultConfig = {
      oracleIP: '168.138.104.117',
      sshPort: 22,
      keepAlive: true,
      compression: true,
      connectionTimeout: 30,
      serverAliveInterval: 60,
      serverAliveCountMax: 3
    };
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[17]++;
    this.logger.info('SSH Tunnel Manager initialized');
  }
  /**
   * Create a new SSH tunnel connection to Oracle Free Tier
   * Implements secure authentication with private key management
   *
   * @param config - Tunnel configuration parameters
   * @returns Promise resolving to tunnel connection
   */
  async createTunnel(config) {
    /* istanbul ignore next */
    cov_2pgvlnd7u9().f[2]++;
    const fullConfig =
    /* istanbul ignore next */
    (cov_2pgvlnd7u9().s[18]++, {
      ...this.defaultConfig,
      ...config
    });
    // Validate configuration
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[19]++;
    await this.validateTunnelConfig(fullConfig);
    // Generate unique connection ID
    const connectionId =
    /* istanbul ignore next */
    (cov_2pgvlnd7u9().s[20]++, this.generateConnectionId());
    // Create connection object
    const connection =
    /* istanbul ignore next */
    (cov_2pgvlnd7u9().s[21]++, {
      id: connectionId,
      config: fullConfig,
      process: null,
      state: TunnelState.DISCONNECTED,
      connectedAt: null,
      lastActivity: new Date(),
      stats: {
        bytesTransferred: 0,
        uptime: 0,
        reconnectAttempts: 0,
        lastError: null,
        qualityScore: 0
      }
    });
    // Store connection
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[22]++;
    this.connections.set(connectionId, connection);
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[23]++;
    this.logger.info(`Created SSH tunnel connection: ${connectionId}`, {
      oracleIP: fullConfig.oracleIP,
      localPort: fullConfig.localPort,
      remotePort: fullConfig.remotePort
    });
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[24]++;
    return connection;
  }
  /**
   * Establish SSH tunnel connection
   * Implements connection authentication and state management
   *
   * @param connectionId - Connection identifier
   * @returns Promise resolving when connection is established
   */
  async establishTunnel(connectionId) {
    /* istanbul ignore next */
    cov_2pgvlnd7u9().f[3]++;
    const connection =
    /* istanbul ignore next */
    (cov_2pgvlnd7u9().s[25]++, this.connections.get(connectionId));
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[26]++;
    if (!connection) {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().b[1][0]++;
      cov_2pgvlnd7u9().s[27]++;
      throw new Error(`Connection not found: ${connectionId}`);
    } else
    /* istanbul ignore next */
    {
      cov_2pgvlnd7u9().b[1][1]++;
    }
    cov_2pgvlnd7u9().s[28]++;
    if (connection.state === TunnelState.CONNECTED) {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().b[2][0]++;
      cov_2pgvlnd7u9().s[29]++;
      this.logger.warn(`Tunnel already connected: ${connectionId}`);
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[30]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2pgvlnd7u9().b[2][1]++;
    }
    cov_2pgvlnd7u9().s[31]++;
    try {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[32]++;
      // Update state to connecting
      this.updateConnectionState(connection, TunnelState.CONNECTING);
      // Validate private key exists and is accessible
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[33]++;
      await this.validatePrivateKey(connection.config.privateKeyPath);
      // Build SSH command arguments
      const sshArgs =
      /* istanbul ignore next */
      (cov_2pgvlnd7u9().s[34]++, this.buildSSHArguments(connection.config));
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[35]++;
      this.logger.info(`Establishing SSH tunnel: ${connectionId}`, {
        command: 'ssh',
        args: sshArgs.filter(arg => {
          /* istanbul ignore next */
          cov_2pgvlnd7u9().f[4]++;
          cov_2pgvlnd7u9().s[36]++;
          return !arg.includes('IdentityFile');
        }) // Don't log private key path
      });
      // Spawn SSH process
      const sshProcess =
      /* istanbul ignore next */
      (cov_2pgvlnd7u9().s[37]++, (0, child_process_1.spawn)('ssh', sshArgs, {
        stdio: ['pipe', 'pipe', 'pipe'],
        detached: false
      }));
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[38]++;
      connection.process = sshProcess;
      // Set up process event handlers
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[39]++;
      this.setupProcessHandlers(connection);
      // Wait for connection establishment
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[40]++;
      await this.waitForConnection(connection);
      // Update connection state
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[41]++;
      this.updateConnectionState(connection, TunnelState.CONNECTED);
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[42]++;
      connection.connectedAt = new Date();
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[43]++;
      this.logger.info(`SSH tunnel established successfully: ${connectionId}`);
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[44]++;
      this.emit('tunnelConnected', connection);
    } catch (error) {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[45]++;
      this.logger.error(`Failed to establish SSH tunnel: ${connectionId}`, error);
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[46]++;
      this.updateConnectionState(connection, TunnelState.FAILED);
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[47]++;
      connection.stats.lastError = error instanceof Error ?
      /* istanbul ignore next */
      (cov_2pgvlnd7u9().b[3][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2pgvlnd7u9().b[3][1]++, String(error));
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[48]++;
      this.emit('tunnelError', connection, error);
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[49]++;
      throw error;
    }
  }
  /**
   * Disconnect SSH tunnel
   * Gracefully terminates the SSH connection
   *
   * @param connectionId - Connection identifier
   * @returns Promise resolving when disconnected
   */
  async disconnectTunnel(connectionId) {
    /* istanbul ignore next */
    cov_2pgvlnd7u9().f[5]++;
    const connection =
    /* istanbul ignore next */
    (cov_2pgvlnd7u9().s[50]++, this.connections.get(connectionId));
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[51]++;
    if (!connection) {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().b[4][0]++;
      cov_2pgvlnd7u9().s[52]++;
      throw new Error(`Connection not found: ${connectionId}`);
    } else
    /* istanbul ignore next */
    {
      cov_2pgvlnd7u9().b[4][1]++;
    }
    cov_2pgvlnd7u9().s[53]++;
    if (connection.state === TunnelState.DISCONNECTED) {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().b[5][0]++;
      cov_2pgvlnd7u9().s[54]++;
      this.logger.warn(`Tunnel already disconnected: ${connectionId}`);
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[55]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2pgvlnd7u9().b[5][1]++;
    }
    cov_2pgvlnd7u9().s[56]++;
    try {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[57]++;
      this.logger.info(`Disconnecting SSH tunnel: ${connectionId}`);
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[58]++;
      if (connection.process) {
        /* istanbul ignore next */
        cov_2pgvlnd7u9().b[6][0]++;
        cov_2pgvlnd7u9().s[59]++;
        // Graceful termination
        connection.process.kill('SIGTERM');
        // Wait for process to exit
        /* istanbul ignore next */
        cov_2pgvlnd7u9().s[60]++;
        await new Promise(resolve => {
          /* istanbul ignore next */
          cov_2pgvlnd7u9().f[6]++;
          const timeout =
          /* istanbul ignore next */
          (cov_2pgvlnd7u9().s[61]++, setTimeout(() => {
            /* istanbul ignore next */
            cov_2pgvlnd7u9().f[7]++;
            cov_2pgvlnd7u9().s[62]++;
            // Force kill if graceful termination fails
            if (
            /* istanbul ignore next */
            (cov_2pgvlnd7u9().b[8][0]++, connection.process) &&
            /* istanbul ignore next */
            (cov_2pgvlnd7u9().b[8][1]++, !connection.process.killed)) {
              /* istanbul ignore next */
              cov_2pgvlnd7u9().b[7][0]++;
              cov_2pgvlnd7u9().s[63]++;
              connection.process.kill('SIGKILL');
            } else
            /* istanbul ignore next */
            {
              cov_2pgvlnd7u9().b[7][1]++;
            }
            cov_2pgvlnd7u9().s[64]++;
            resolve();
          }, 5000));
          /* istanbul ignore next */
          cov_2pgvlnd7u9().s[65]++;
          connection.process.on('exit', () => {
            /* istanbul ignore next */
            cov_2pgvlnd7u9().f[8]++;
            cov_2pgvlnd7u9().s[66]++;
            clearTimeout(timeout);
            /* istanbul ignore next */
            cov_2pgvlnd7u9().s[67]++;
            resolve();
          });
        });
      } else
      /* istanbul ignore next */
      {
        cov_2pgvlnd7u9().b[6][1]++;
      }
      cov_2pgvlnd7u9().s[68]++;
      this.updateConnectionState(connection, TunnelState.DISCONNECTED);
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[69]++;
      connection.process = null;
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[70]++;
      connection.connectedAt = null;
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[71]++;
      this.logger.info(`SSH tunnel disconnected: ${connectionId}`);
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[72]++;
      this.emit('tunnelDisconnected', connection);
    } catch (error) {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[73]++;
      this.logger.error(`Error disconnecting SSH tunnel: ${connectionId}`, error);
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[74]++;
      throw error;
    }
  }
  /**
   * Get connection by ID
   *
   * @param connectionId - Connection identifier
   * @returns Tunnel connection or undefined
   */
  getConnection(connectionId) {
    /* istanbul ignore next */
    cov_2pgvlnd7u9().f[9]++;
    cov_2pgvlnd7u9().s[75]++;
    return this.connections.get(connectionId);
  }
  /**
   * Get all connections
   *
   * @returns Array of all tunnel connections
   */
  getAllConnections() {
    /* istanbul ignore next */
    cov_2pgvlnd7u9().f[10]++;
    cov_2pgvlnd7u9().s[76]++;
    return Array.from(this.connections.values());
  }
  /**
   * Get active connections
   *
   * @returns Array of connected tunnel connections
   */
  getActiveConnections() {
    /* istanbul ignore next */
    cov_2pgvlnd7u9().f[11]++;
    cov_2pgvlnd7u9().s[77]++;
    return this.getAllConnections().filter(conn => {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().f[12]++;
      cov_2pgvlnd7u9().s[78]++;
      return conn.state === TunnelState.CONNECTED;
    });
  }
  /**
   * Validate tunnel configuration
   * Ensures all required parameters are present and valid
   *
   * @param config - Tunnel configuration to validate
   */
  async validateTunnelConfig(config) {
    /* istanbul ignore next */
    cov_2pgvlnd7u9().f[13]++;
    const requiredFields =
    /* istanbul ignore next */
    (cov_2pgvlnd7u9().s[79]++, ['oracleIP', 'username', 'privateKeyPath', 'localPort', 'remotePort']);
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[80]++;
    for (const field of requiredFields) {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[81]++;
      if (!config[field]) {
        /* istanbul ignore next */
        cov_2pgvlnd7u9().b[9][0]++;
        cov_2pgvlnd7u9().s[82]++;
        throw new Error(`Missing required tunnel configuration: ${field}`);
      } else
      /* istanbul ignore next */
      {
        cov_2pgvlnd7u9().b[9][1]++;
      }
    }
    // Validate IP address format
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[83]++;
    if (!this.isValidIP(config.oracleIP)) {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().b[10][0]++;
      cov_2pgvlnd7u9().s[84]++;
      throw new Error(`Invalid Oracle IP address: ${config.oracleIP}`);
    } else
    /* istanbul ignore next */
    {
      cov_2pgvlnd7u9().b[10][1]++;
    }
    // Validate port ranges
    cov_2pgvlnd7u9().s[85]++;
    if (
    /* istanbul ignore next */
    (cov_2pgvlnd7u9().b[12][0]++, config.localPort < 1) ||
    /* istanbul ignore next */
    (cov_2pgvlnd7u9().b[12][1]++, config.localPort > 65535)) {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().b[11][0]++;
      cov_2pgvlnd7u9().s[86]++;
      throw new Error(`Invalid local port: ${config.localPort}`);
    } else
    /* istanbul ignore next */
    {
      cov_2pgvlnd7u9().b[11][1]++;
    }
    cov_2pgvlnd7u9().s[87]++;
    if (
    /* istanbul ignore next */
    (cov_2pgvlnd7u9().b[14][0]++, config.remotePort < 1) ||
    /* istanbul ignore next */
    (cov_2pgvlnd7u9().b[14][1]++, config.remotePort > 65535)) {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().b[13][0]++;
      cov_2pgvlnd7u9().s[88]++;
      throw new Error(`Invalid remote port: ${config.remotePort}`);
    } else
    /* istanbul ignore next */
    {
      cov_2pgvlnd7u9().b[13][1]++;
    }
    cov_2pgvlnd7u9().s[89]++;
    this.logger.debug('Tunnel configuration validated successfully');
  }
  /**
   * Validate private key file exists and is accessible
   *
   * @param privateKeyPath - Path to private key file
   */
  async validatePrivateKey(privateKeyPath) {
    /* istanbul ignore next */
    cov_2pgvlnd7u9().f[14]++;
    cov_2pgvlnd7u9().s[90]++;
    try {
      const stats =
      /* istanbul ignore next */
      (cov_2pgvlnd7u9().s[91]++, await fs_1.promises.stat(privateKeyPath));
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[92]++;
      if (!stats.isFile()) {
        /* istanbul ignore next */
        cov_2pgvlnd7u9().b[15][0]++;
        cov_2pgvlnd7u9().s[93]++;
        throw new Error(`Private key path is not a file: ${privateKeyPath}`);
      } else
      /* istanbul ignore next */
      {
        cov_2pgvlnd7u9().b[15][1]++;
      }
      // Check file permissions (should be readable by owner only)
      cov_2pgvlnd7u9().s[94]++;
      await fs_1.promises.access(privateKeyPath, fs_1.constants.R_OK);
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[95]++;
      this.logger.debug(`Private key validated: ${privateKeyPath}`);
    } catch (error) {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[96]++;
      throw new Error(`Private key validation failed: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_2pgvlnd7u9().b[16][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2pgvlnd7u9().b[16][1]++, String(error))}`);
    }
  }
  /**
   * Build SSH command arguments
   *
   * @param config - Tunnel configuration
   * @returns Array of SSH command arguments
   */
  buildSSHArguments(config) {
    /* istanbul ignore next */
    cov_2pgvlnd7u9().f[15]++;
    const args =
    /* istanbul ignore next */
    (cov_2pgvlnd7u9().s[97]++, ['-N',
    // No remote command execution
    '-T',
    // Disable pseudo-terminal allocation
    '-o', 'StrictHostKeyChecking=no',
    // Accept new host keys
    '-o', 'UserKnownHostsFile=/dev/null',
    // Don't save host keys
    '-o', `ConnectTimeout=${config.connectionTimeout}`, '-o', `ServerAliveInterval=${config.serverAliveInterval}`, '-o', `ServerAliveCountMax=${config.serverAliveCountMax}`, '-i', config.privateKeyPath,
    // Identity file
    '-p', config.sshPort.toString(),
    // SSH port
    '-L', `${config.localPort}:localhost:${config.remotePort}` // Local port forwarding
    ]);
    // Add compression if enabled
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[98]++;
    if (config.compression) {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().b[17][0]++;
      cov_2pgvlnd7u9().s[99]++;
      args.push('-C');
    } else
    /* istanbul ignore next */
    {
      cov_2pgvlnd7u9().b[17][1]++;
    }
    // Add keep-alive if enabled
    cov_2pgvlnd7u9().s[100]++;
    if (config.keepAlive) {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().b[18][0]++;
      cov_2pgvlnd7u9().s[101]++;
      args.push('-o', 'TCPKeepAlive=yes');
    } else
    /* istanbul ignore next */
    {
      cov_2pgvlnd7u9().b[18][1]++;
    }
    // Add connection target
    cov_2pgvlnd7u9().s[102]++;
    args.push(`${config.username}@${config.oracleIP}`);
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[103]++;
    return args;
  }
  /**
   * Set up SSH process event handlers
   *
   * @param connection - Tunnel connection
   */
  setupProcessHandlers(connection) {
    /* istanbul ignore next */
    cov_2pgvlnd7u9().f[16]++;
    cov_2pgvlnd7u9().s[104]++;
    if (!connection.process) {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().b[19][0]++;
      cov_2pgvlnd7u9().s[105]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2pgvlnd7u9().b[19][1]++;
    }
    const process =
    /* istanbul ignore next */
    (cov_2pgvlnd7u9().s[106]++, connection.process);
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[107]++;
    process.stdout?.on('data', data => {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().f[17]++;
      cov_2pgvlnd7u9().s[108]++;
      this.logger.debug(`SSH stdout [${connection.id}]: ${data.toString().trim()}`);
    });
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[109]++;
    process.stderr?.on('data', data => {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().f[18]++;
      const message =
      /* istanbul ignore next */
      (cov_2pgvlnd7u9().s[110]++, data.toString().trim());
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[111]++;
      this.logger.debug(`SSH stderr [${connection.id}]: ${message}`);
      // Check for connection success indicators
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[112]++;
      if (message.includes('Local forwarding listening')) {
        /* istanbul ignore next */
        cov_2pgvlnd7u9().b[20][0]++;
        cov_2pgvlnd7u9().s[113]++;
        this.emit('tunnelReady', connection);
      } else
      /* istanbul ignore next */
      {
        cov_2pgvlnd7u9().b[20][1]++;
      }
    });
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[114]++;
    process.on('exit', (code, signal) => {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().f[19]++;
      cov_2pgvlnd7u9().s[115]++;
      this.logger.info(`SSH process exited [${connection.id}]`, {
        code,
        signal
      });
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[116]++;
      if (connection.state === TunnelState.CONNECTED) {
        /* istanbul ignore next */
        cov_2pgvlnd7u9().b[21][0]++;
        cov_2pgvlnd7u9().s[117]++;
        this.updateConnectionState(connection, TunnelState.DISCONNECTED);
        /* istanbul ignore next */
        cov_2pgvlnd7u9().s[118]++;
        this.emit('tunnelDisconnected', connection);
      } else
      /* istanbul ignore next */
      {
        cov_2pgvlnd7u9().b[21][1]++;
      }
      cov_2pgvlnd7u9().s[119]++;
      connection.process = null;
    });
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[120]++;
    process.on('error', error => {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().f[20]++;
      cov_2pgvlnd7u9().s[121]++;
      this.logger.error(`SSH process error [${connection.id}]`, error);
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[122]++;
      this.updateConnectionState(connection, TunnelState.FAILED);
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[123]++;
      connection.stats.lastError = error.message;
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[124]++;
      this.emit('tunnelError', connection, error);
    });
  }
  /**
   * Wait for SSH tunnel connection to be established
   *
   * @param connection - Tunnel connection
   * @param timeoutMs - Timeout in milliseconds
   */
  async waitForConnection(connection, timeoutMs =
  /* istanbul ignore next */
  (cov_2pgvlnd7u9().b[22][0]++, 30000)) {
    /* istanbul ignore next */
    cov_2pgvlnd7u9().f[21]++;
    cov_2pgvlnd7u9().s[125]++;
    return new Promise((resolve, reject) => {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().f[22]++;
      const timeout =
      /* istanbul ignore next */
      (cov_2pgvlnd7u9().s[126]++, setTimeout(() => {
        /* istanbul ignore next */
        cov_2pgvlnd7u9().f[23]++;
        cov_2pgvlnd7u9().s[127]++;
        reject(new Error(`SSH tunnel connection timeout: ${connection.id}`));
      }, timeoutMs));
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[128]++;
      const onReady = () => {
        /* istanbul ignore next */
        cov_2pgvlnd7u9().f[24]++;
        cov_2pgvlnd7u9().s[129]++;
        clearTimeout(timeout);
        /* istanbul ignore next */
        cov_2pgvlnd7u9().s[130]++;
        this.removeListener('tunnelError', onError);
        /* istanbul ignore next */
        cov_2pgvlnd7u9().s[131]++;
        resolve();
      };
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[132]++;
      const onError = (conn, error) => {
        /* istanbul ignore next */
        cov_2pgvlnd7u9().f[25]++;
        cov_2pgvlnd7u9().s[133]++;
        if (conn.id === connection.id) {
          /* istanbul ignore next */
          cov_2pgvlnd7u9().b[23][0]++;
          cov_2pgvlnd7u9().s[134]++;
          clearTimeout(timeout);
          /* istanbul ignore next */
          cov_2pgvlnd7u9().s[135]++;
          this.removeListener('tunnelReady', onReady);
          /* istanbul ignore next */
          cov_2pgvlnd7u9().s[136]++;
          reject(error);
        } else
        /* istanbul ignore next */
        {
          cov_2pgvlnd7u9().b[23][1]++;
        }
      };
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[137]++;
      this.once('tunnelReady', onReady);
      /* istanbul ignore next */
      cov_2pgvlnd7u9().s[138]++;
      this.once('tunnelError', onError);
    });
  }
  /**
   * Update connection state and emit events
   *
   * @param connection - Tunnel connection
   * @param newState - New connection state
   */
  updateConnectionState(connection, newState) {
    /* istanbul ignore next */
    cov_2pgvlnd7u9().f[26]++;
    const oldState =
    /* istanbul ignore next */
    (cov_2pgvlnd7u9().s[139]++, connection.state);
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[140]++;
    connection.state = newState;
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[141]++;
    connection.lastActivity = new Date();
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[142]++;
    this.logger.debug(`Tunnel state changed [${connection.id}]: ${oldState} -> ${newState}`);
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[143]++;
    this.emit('stateChanged', connection, oldState, newState);
  }
  /**
   * Generate unique connection ID
   *
   * @returns Unique connection identifier
   */
  generateConnectionId() {
    /* istanbul ignore next */
    cov_2pgvlnd7u9().f[27]++;
    cov_2pgvlnd7u9().s[144]++;
    return `tunnel_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }
  /**
   * Validate IP address format
   *
   * @param ip - IP address to validate
   * @returns True if valid IP address
   */
  isValidIP(ip) {
    /* istanbul ignore next */
    cov_2pgvlnd7u9().f[28]++;
    const ipRegex =
    /* istanbul ignore next */
    (cov_2pgvlnd7u9().s[145]++, /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/);
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[146]++;
    return ipRegex.test(ip);
  }
  /**
   * Cleanup all connections on shutdown
   */
  async cleanup() {
    /* istanbul ignore next */
    cov_2pgvlnd7u9().f[29]++;
    cov_2pgvlnd7u9().s[147]++;
    this.logger.info('Cleaning up SSH tunnel connections');
    const disconnectPromises =
    /* istanbul ignore next */
    (cov_2pgvlnd7u9().s[148]++, Array.from(this.connections.keys()).map(connectionId => {
      /* istanbul ignore next */
      cov_2pgvlnd7u9().f[30]++;
      cov_2pgvlnd7u9().s[149]++;
      return this.disconnectTunnel(connectionId).catch(error => {
        /* istanbul ignore next */
        cov_2pgvlnd7u9().f[31]++;
        cov_2pgvlnd7u9().s[150]++;
        return this.logger.error(`Error disconnecting tunnel ${connectionId}`, error);
      });
    }));
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[151]++;
    await Promise.all(disconnectPromises);
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[152]++;
    this.connections.clear();
    /* istanbul ignore next */
    cov_2pgvlnd7u9().s[153]++;
    this.logger.info('SSH tunnel cleanup completed');
  }
}
/* istanbul ignore next */
cov_2pgvlnd7u9().s[154]++;
exports.SSHTunnelManager = SSHTunnelManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,