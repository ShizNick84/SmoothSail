{"version":3,"names":["cov_1l4ww0hrmr","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","dotenv_1","require","path_1","logger_1","security_manager_1","system_monitor_1","trading_engine_1","tunnel_manager_1","environment_validator_1","graceful_shutdown_1","AITradingAgent","securityManager","systemMonitor","tradingEngine","tunnelManager","isShuttingDown","constructor","SecurityManager","SystemMonitor","TradingEngine","TunnelManager","initialize","logger","info","loadConfiguration","initializeSecurity","initializeSystemMonitoring","initializeTunnel","initializeTradingEngine","setupShutdownHandlers","error","emergencyShutdown","config","resolve","process","cwd","validationResult","validateEnvironment","isValid","errors","Error","initializeEncryption","startThreatMonitoring","initializeAuditLogging","securityStatus","performSecurityScan","isSecure","threats","startHardwareMonitoring","initializePerformanceOptimization","setupThermalManagement","systemStatus","validateSystemRequirements","meetsRequirements","warn","warnings","establishTunnel","tunnelStatus","verifyTunnelHealth","isHealthy","issues","initializeAPIConnection","loadTradingStrategies","initializeRiskManagement","startMarketDataFeeds","tradingStatus","performHealthCheck","on","handleShutdown","reason","promise","signal","gracefulShutdown","exit","emergencyStop","secureAssets","sendEmergencyAlert","startTrading","exports","main","tradingAgent","import","meta","url","argv","catch","console"],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\index.ts"],"sourcesContent":["#!/usr/bin/env node\r\n\r\n/**\r\n * =============================================================================\r\n * AI CRYPTO TRADING AGENT - MAIN ENTRY POINT\r\n * =============================================================================\r\n * \r\n * This is the main entry point for the AI-powered cryptocurrency trading agent.\r\n * The system is designed with security-first principles, focusing on capital\r\n * preservation and profit maximization through sophisticated trading strategies.\r\n * \r\n * CRITICAL SECURITY NOTICE:\r\n * This system handles real financial assets and trading operations.\r\n * All security measures must be maintained and regularly audited.\r\n * \r\n * Hardware Requirements:\r\n * - Intel NUC with i5 CPU\r\n * - 12GB RAM minimum\r\n * - 256GB M.2 SSD\r\n * - Stable internet connection (wireless + ethernet)\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport { config } from 'dotenv';\r\nimport { resolve } from 'path';\r\nimport { logger } from '@/core/logging/logger';\r\nimport { SecurityManager } from '@/security/security-manager';\r\nimport { SystemMonitor } from '@/infrastructure/system-monitor';\r\nimport { TradingEngine } from '@/trading/trading-engine';\r\nimport { TunnelManager } from '@/infrastructure/tunnel/tunnel-manager';\r\nimport { validateEnvironment } from '@/config/environment-validator';\r\nimport { gracefulShutdown } from '@/core/shutdown/graceful-shutdown';\r\n\r\n/**\r\n * Main application class that orchestrates all system components\r\n * Implements security-first initialization and proper error handling\r\n */\r\nclass AITradingAgent {\r\n  private securityManager: SecurityManager;\r\n  private systemMonitor: SystemMonitor;\r\n  private tradingEngine: TradingEngine;\r\n  private tunnelManager: TunnelManager;\r\n  private isShuttingDown: boolean = false;\r\n\r\n  constructor() {\r\n    // Initialize core components with security-first approach\r\n    this.securityManager = new SecurityManager();\r\n    this.systemMonitor = new SystemMonitor();\r\n    this.tradingEngine = new TradingEngine();\r\n    this.tunnelManager = new TunnelManager();\r\n  }\r\n\r\n  /**\r\n   * Initialize the trading agent with comprehensive security checks\r\n   * This method performs all necessary startup procedures in the correct order\r\n   * \r\n   * @returns Promise<void> Resolves when initialization is complete\r\n   * @throws Error if any critical initialization step fails\r\n   */\r\n  public async initialize(): Promise<void> {\r\n    try {\r\n      logger.info('üöÄ Starting AI Crypto Trading Agent initialization...');\r\n      \r\n      // Step 1: Load and validate environment configuration\r\n      await this.loadConfiguration();\r\n      \r\n      // Step 2: Initialize security systems first (critical for financial system)\r\n      await this.initializeSecurity();\r\n      \r\n      // Step 3: Start system monitoring for Intel NUC hardware\r\n      await this.initializeSystemMonitoring();\r\n      \r\n      // Step 4: Establish SSH tunnel to Oracle Free Tier\r\n      await this.initializeTunnel();\r\n      \r\n      // Step 5: Initialize trading engine with all safety systems\r\n      await this.initializeTradingEngine();\r\n      \r\n      // Step 6: Set up graceful shutdown handlers\r\n      this.setupShutdownHandlers();\r\n      \r\n      logger.info('‚úÖ AI Crypto Trading Agent initialized successfully');\r\n      logger.info('üéØ System ready for 24/7 trading operations');\r\n      \r\n    } catch (error) {\r\n      logger.error('‚ùå Failed to initialize AI Crypto Trading Agent:', error);\r\n      await this.emergencyShutdown();\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load and validate environment configuration\r\n   * Ensures all required environment variables are present and valid\r\n   */\r\n  private async loadConfiguration(): Promise<void> {\r\n    logger.info('üìã Loading configuration...');\r\n    \r\n    // Load environment variables from .env file\r\n    config({ path: resolve(process.cwd(), '.env') });\r\n    \r\n    // Validate all required environment variables\r\n    const validationResult = await validateEnvironment();\r\n    \r\n    if (!validationResult.isValid) {\r\n      logger.error('‚ùå Environment validation failed:', validationResult.errors);\r\n      throw new Error('Invalid environment configuration');\r\n    }\r\n    \r\n    logger.info('‚úÖ Configuration loaded and validated successfully');\r\n  }\r\n\r\n  /**\r\n   * Initialize security systems with military-grade protection\r\n   * This is the most critical initialization step for financial system\r\n   */\r\n  private async initializeSecurity(): Promise<void> {\r\n    logger.info('üîí Initializing security systems...');\r\n    \r\n    // Initialize encryption and key management\r\n    await this.securityManager.initializeEncryption();\r\n    \r\n    // Start threat detection and monitoring\r\n    await this.securityManager.startThreatMonitoring();\r\n    \r\n    // Initialize audit logging system\r\n    await this.securityManager.initializeAuditLogging();\r\n    \r\n    // Perform initial security scan\r\n    const securityStatus = await this.securityManager.performSecurityScan();\r\n    \r\n    if (!securityStatus.isSecure) {\r\n      logger.error('‚ùå Security scan failed:', securityStatus.threats);\r\n      throw new Error('System security compromised - cannot start trading');\r\n    }\r\n    \r\n    logger.info('‚úÖ Security systems initialized and verified');\r\n  }\r\n\r\n  /**\r\n   * Initialize Intel NUC system monitoring\r\n   * Monitors CPU, RAM, SSD, network, and thermal conditions\r\n   */\r\n  private async initializeSystemMonitoring(): Promise<void> {\r\n    logger.info('üìä Initializing Intel NUC system monitoring...');\r\n    \r\n    // Start hardware monitoring\r\n    await this.systemMonitor.startHardwareMonitoring();\r\n    \r\n    // Initialize performance optimization\r\n    await this.systemMonitor.initializePerformanceOptimization();\r\n    \r\n    // Set up thermal management\r\n    await this.systemMonitor.setupThermalManagement();\r\n    \r\n    // Verify system meets requirements\r\n    const systemStatus = await this.systemMonitor.validateSystemRequirements();\r\n    \r\n    if (!systemStatus.meetsRequirements) {\r\n      logger.warn('‚ö†Ô∏è System may not meet optimal requirements:', systemStatus.warnings);\r\n    }\r\n    \r\n    logger.info('‚úÖ System monitoring initialized successfully');\r\n  }\r\n\r\n  /**\r\n   * Initialize SSH tunnel to Oracle Free Tier\r\n   * Establishes secure connection for consistent IP address\r\n   */\r\n  private async initializeTunnel(): Promise<void> {\r\n    logger.info('üåê Initializing SSH tunnel to Oracle Free Tier...');\r\n    \r\n    // Establish SSH tunnel connection\r\n    await this.tunnelManager.establishTunnel();\r\n    \r\n    // Verify tunnel connectivity\r\n    const tunnelStatus = await this.tunnelManager.verifyTunnelHealth();\r\n    \r\n    if (!tunnelStatus.isHealthy) {\r\n      logger.error('‚ùå SSH tunnel health check failed:', tunnelStatus.issues);\r\n      throw new Error('SSH tunnel connection failed');\r\n    }\r\n    \r\n    logger.info('‚úÖ SSH tunnel established and verified');\r\n  }\r\n\r\n  /**\r\n   * Initialize trading engine with all safety systems\r\n   * Sets up strategies, risk management, and API connections\r\n   */\r\n  private async initializeTradingEngine(): Promise<void> {\r\n    logger.info('üíπ Initializing trading engine...');\r\n    \r\n    // Initialize Gate.io API connection through tunnel\r\n    await this.tradingEngine.initializeAPIConnection();\r\n    \r\n    // Load and validate trading strategies\r\n    await this.tradingEngine.loadTradingStrategies();\r\n    \r\n    // Initialize risk management system\r\n    await this.tradingEngine.initializeRiskManagement();\r\n    \r\n    // Start market data feeds\r\n    await this.tradingEngine.startMarketDataFeeds();\r\n    \r\n    // Perform trading system health check\r\n    const tradingStatus = await this.tradingEngine.performHealthCheck();\r\n    \r\n    if (!tradingStatus.isHealthy) {\r\n      logger.error('‚ùå Trading engine health check failed:', tradingStatus.issues);\r\n      throw new Error('Trading engine initialization failed');\r\n    }\r\n    \r\n    logger.info('‚úÖ Trading engine initialized and ready');\r\n  }\r\n\r\n  /**\r\n   * Set up graceful shutdown handlers for clean system termination\r\n   * Ensures all positions are safely closed and data is preserved\r\n   */\r\n  private setupShutdownHandlers(): void {\r\n    // Handle various shutdown signals\r\n    process.on('SIGTERM', () => this.handleShutdown('SIGTERM'));\r\n    process.on('SIGINT', () => this.handleShutdown('SIGINT'));\r\n    process.on('SIGHUP', () => this.handleShutdown('SIGHUP'));\r\n    \r\n    // Handle uncaught exceptions and rejections\r\n    process.on('uncaughtException', (error) => {\r\n      logger.error('‚ùå Uncaught exception:', error);\r\n      this.handleShutdown('UNCAUGHT_EXCEPTION');\r\n    });\r\n    \r\n    process.on('unhandledRejection', (reason, promise) => {\r\n      logger.error('‚ùå Unhandled rejection at:', promise, 'reason:', reason);\r\n      this.handleShutdown('UNHANDLED_REJECTION');\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Handle shutdown signals with proper cleanup\r\n   * Ensures safe termination of all trading operations\r\n   * \r\n   * @param signal - The shutdown signal received\r\n   */\r\n  private async handleShutdown(signal: string): Promise<void> {\r\n    if (this.isShuttingDown) {\r\n      logger.warn('‚ö†Ô∏è Shutdown already in progress, ignoring signal:', signal);\r\n      return;\r\n    }\r\n    \r\n    this.isShuttingDown = true;\r\n    logger.info(`üõë Received shutdown signal: ${signal}`);\r\n    \r\n    try {\r\n      await gracefulShutdown({\r\n        tradingEngine: this.tradingEngine,\r\n        tunnelManager: this.tunnelManager,\r\n        systemMonitor: this.systemMonitor,\r\n        securityManager: this.securityManager\r\n      });\r\n      \r\n      logger.info('‚úÖ Graceful shutdown completed successfully');\r\n      process.exit(0);\r\n      \r\n    } catch (error) {\r\n      logger.error('‚ùå Error during graceful shutdown:', error);\r\n      await this.emergencyShutdown();\r\n      process.exit(1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Emergency shutdown procedure for critical failures\r\n   * Immediately stops all operations and secures assets\r\n   */\r\n  private async emergencyShutdown(): Promise<void> {\r\n    logger.error('üö® EMERGENCY SHUTDOWN INITIATED');\r\n    \r\n    try {\r\n      // Immediately stop trading operations\r\n      await this.tradingEngine?.emergencyStop();\r\n      \r\n      // Secure all assets and positions\r\n      await this.tradingEngine?.secureAssets();\r\n      \r\n      // Send emergency notifications\r\n      await this.securityManager?.sendEmergencyAlert('EMERGENCY_SHUTDOWN');\r\n      \r\n    } catch (error) {\r\n      logger.error('‚ùå Error during emergency shutdown:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Start the main trading loop\r\n   * Begins continuous trading operations with monitoring\r\n   */\r\n  public async start(): Promise<void> {\r\n    logger.info('üéØ Starting AI Crypto Trading Agent main loop...');\r\n    \r\n    // Start trading operations\r\n    await this.tradingEngine.startTrading();\r\n    \r\n    logger.info('üöÄ AI Crypto Trading Agent is now running 24/7');\r\n    logger.info('üí∞ Focus: Capital preservation and profit maximization');\r\n    logger.info('üéØ Goal: Building generational wealth through compound returns');\r\n  }\r\n}\r\n\r\n/**\r\n * Main execution function\r\n * Entry point for the entire trading system\r\n */\r\nasync function main(): Promise<void> {\r\n  try {\r\n    // Create and initialize the trading agent\r\n    const tradingAgent = new AITradingAgent();\r\n    await tradingAgent.initialize();\r\n    \r\n    // Start trading operations\r\n    await tradingAgent.start();\r\n    \r\n  } catch (error) {\r\n    logger.error('‚ùå Fatal error in main execution:', error);\r\n    process.exit(1);\r\n  }\r\n}\r\n\r\n// Start the application if this file is run directly\r\nif (import.meta.url === `file://${process.argv[1]}`) {\r\n  main().catch((error) => {\r\n    console.error('Fatal startup error:', error);\r\n    process.exit(1);\r\n  });\r\n}\r\n\r\nexport { AITradingAgent };\r\n\r\n// =============================================================================\r\n// SECURITY AND OPERATIONAL NOTES\r\n// =============================================================================\r\n// 1. This system handles real financial assets - security is paramount\r\n// 2. All errors are logged and monitored for security analysis\r\n// 3. Graceful shutdown ensures no trading positions are left unmanaged\r\n// 4. Emergency shutdown procedures protect capital in critical situations\r\n// 5. System is designed for 24/7 operation with automatic recovery\r\n// 6. Regular security audits and updates are essential\r\n// 7. Monitor system logs continuously for any suspicious activity\r\n// ============================================================================="],"mappings":"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","ignoreList":[]}