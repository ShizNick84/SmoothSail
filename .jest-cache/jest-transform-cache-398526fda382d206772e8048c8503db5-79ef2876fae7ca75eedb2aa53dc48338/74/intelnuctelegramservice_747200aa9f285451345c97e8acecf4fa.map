{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\core\\notifications\\intel-nuc-telegram-service.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\core\\notifications\\intel-nuc-telegram-service.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * INTEL NUC TELEGRAM BOT NOTIFICATION SERVICE\r\n * =============================================================================\r\n * \r\n * Enhanced Telegram Bot API integration specifically optimized for Intel NUC\r\n * deployment with rich templates, interactive commands, and comprehensive\r\n * trading decision notifications.\r\n * \r\n * Features:\r\n * - Intel NUC system monitoring integration\r\n * - Enhanced emoji-rich message formatting\r\n * - Interactive bot commands with inline keyboards\r\n * - Trading decision explanations with AI reasoning\r\n * - Market analysis summaries in notifications\r\n * - Rate limiting and message threading\r\n * - SSH tunnel health monitoring alerts\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 2.0.0 - Intel NUC Optimized\r\n * =============================================================================\r\n */\r\n\r\nimport { Telegraf, Context, Markup } from 'telegraf';\r\nimport { logger } from '@/core/logging/logger';\r\nimport { EncryptionService } from '@/security/encryption-service';\r\n\r\n/**\r\n * Enhanced trading data for Intel NUC notifications\r\n */\r\nexport interface IntelNucTradingData {\r\n  symbol: string;\r\n  action: 'BUY' | 'SELL';\r\n  quantity: number;\r\n  price: number;\r\n  pnl?: number;\r\n  balance: number;\r\n  strategy: string;\r\n  timestamp: Date;\r\n  \r\n  // Enhanced Intel NUC specific data\r\n  reasoning?: string;\r\n  marketAnalysis?: string;\r\n  sentimentScore?: number;\r\n  riskAssessment?: string;\r\n  confidence?: number;\r\n  systemLoad?: number;\r\n  networkLatency?: number;\r\n  sshTunnelStatus?: 'healthy' | 'degraded' | 'failed';\r\n}\r\n\r\n/**\r\n * Intel NUC system health data\r\n */\r\nexport interface IntelNucSystemData {\r\n  cpuUsage: number;\r\n  ramUsage: number;\r\n  diskUsage: number;\r\n  cpuTemperature: number;\r\n  networkStatus: string;\r\n  uptime: number;\r\n  activeConnections: number;\r\n  sshTunnelHealth: 'healthy' | 'degraded' | 'failed';\r\n  sshTunnelLatency: number;\r\n  tradingEngineStatus: 'active' | 'paused' | 'error';\r\n  databaseConnections: number;\r\n}\r\n\r\n/**\r\n * Enhanced notification types for Intel NUC\r\n */\r\nexport enum IntelNucNotificationType {\r\n  TRADE_EXECUTION = 'TRADE_EXECUTION',\r\n  TRADE_OPPORTUNITY_MISSED = 'TRADE_OPPORTUNITY_MISSED',\r\n  PROFIT_TARGET = 'PROFIT_TARGET',\r\n  STOP_LOSS = 'STOP_LOSS',\r\n  SYSTEM_ALERT = 'SYSTEM_ALERT',\r\n  SECURITY_ALERT = 'SECURITY_ALERT',\r\n  DAILY_SUMMARY = 'DAILY_SUMMARY',\r\n  WEEKLY_SUMMARY = 'WEEKLY_SUMMARY',\r\n  SYSTEM_HEALTH = 'SYSTEM_HEALTH',\r\n  SSH_TUNNEL_ALERT = 'SSH_TUNNEL_ALERT',\r\n  THERMAL_ALERT = 'THERMAL_ALERT',\r\n  PERFORMANCE_ALERT = 'PERFORMANCE_ALERT',\r\n  STRATEGY_OPTIMIZATION = 'STRATEGY_OPTIMIZATION',\r\n  MARKET_SENTIMENT_UPDATE = 'MARKET_SENTIMENT_UPDATE',\r\n  EMERGENCY = 'EMERGENCY',\r\n  STARTUP = 'STARTUP'\r\n}\r\n\r\n/**\r\n * Intel NUC Telegram service class\r\n */\r\nexport class IntelNucTelegramService {\r\n  private bot: Telegraf;\r\n  private encryptionService: EncryptionService;\r\n  private deliveryTracking: Map<string, any>;\r\n  private authorizedUsers: Set<string>;\r\n  private adminUsers: Set<string>;\r\n  private isInitialized: boolean = false;\r\n  private botCommands: Map<string, any>;\r\n  private messageThreads: Map<string, number>;\r\n  private rateLimitTracker: Map<string, number[]>;\r\n\r\n  constructor() {\r\n    this.encryptionService = new EncryptionService();\r\n    this.deliveryTracking = new Map();\r\n    this.authorizedUsers = new Set();\r\n    this.adminUsers = new Set();\r\n    this.botCommands = new Map();\r\n    this.messageThreads = new Map();\r\n    this.rateLimitTracker = new Map();\r\n  }\r\n\r\n  /**\r\n   * Initialize the Intel NUC Telegram bot service\r\n   */\r\n  public async initialize(): Promise<void> {\r\n    try {\r\n      logger.info('🤖 Initializing Intel NUC Telegram bot service...');\r\n\r\n      // Load bot token from environment\r\n      const botToken = await this.loadBotToken();\r\n      \r\n      // Create Telegraf bot instance\r\n      this.bot = new Telegraf(botToken);\r\n\r\n      // Load authorized users\r\n      await this.loadAuthorizedUsers();\r\n\r\n      // Set up enhanced bot commands for Intel NUC\r\n      await this.setupIntelNucBotCommands();\r\n\r\n      // Set up middleware\r\n      this.setupMiddleware();\r\n\r\n      // Start bot\r\n      await this.startBot();\r\n\r\n      this.isInitialized = true;\r\n      logger.info('✅ Intel NUC Telegram bot service initialized successfully');\r\n\r\n    } catch (error) {\r\n      logger.error('❌ Failed to initialize Intel NUC Telegram bot service:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send enhanced trade execution notification with AI reasoning\r\n   */\r\n  public async sendTradeExecutionNotification(data: IntelNucTradingData): Promise<number> {\r\n    const emoji = data.action === 'BUY' ? '🟢' : '🔴';\r\n    const actionEmoji = data.action === 'BUY' ? '📈' : '📉';\r\n    const pnlEmoji = (data.pnl || 0) >= 0 ? '💰' : '📉';\r\n    const confidenceEmoji = this.getConfidenceEmoji(data.confidence || 0);\r\n    const sentimentEmoji = this.getSentimentEmoji(data.sentimentScore || 0);\r\n    const systemEmoji = this.getSystemHealthEmoji(data.systemLoad || 0);\r\n    const tunnelEmoji = this.getTunnelStatusEmoji(data.sshTunnelStatus || 'healthy');\r\n\r\n    let message = `\r\n${emoji} <b>TRADE EXECUTED</b> ${actionEmoji} <i>[Intel NUC]</i>\r\n\r\n🎯 <b>Symbol:</b> ${data.symbol}\r\n⚡ <b>Action:</b> ${data.action}\r\n📊 <b>Quantity:</b> ${data.quantity}\r\n💵 <b>Price:</b> $${data.price?.toFixed(4)}\r\n${pnlEmoji} <b>P&L:</b> $${data.pnl?.toFixed(2)}\r\n💎 <b>Balance:</b> $${data.balance?.toFixed(2)}\r\n🧠 <b>Strategy:</b> ${data.strategy}\r\n${confidenceEmoji} <b>Confidence:</b> ${((data.confidence || 0) * 100).toFixed(1)}%\r\n${sentimentEmoji} <b>Sentiment:</b> ${this.formatSentimentScore(data.sentimentScore || 0)}\r\n\r\n🖥️ <b>System Status:</b>\r\n${systemEmoji} <b>Load:</b> ${(data.systemLoad || 0).toFixed(1)}%\r\n${tunnelEmoji} <b>SSH Tunnel:</b> ${data.sshTunnelStatus?.toUpperCase()}\r\n🌐 <b>Latency:</b> ${data.networkLatency || 0}ms\r\n    `.trim();\r\n\r\n    // Add AI reasoning if available\r\n    if (data.reasoning) {\r\n      message += `\\n\\n🤖 <b>AI Reasoning:</b>\\n<i>${this.truncateText(data.reasoning, 200)}</i>`;\r\n    }\r\n\r\n    // Add market analysis if available\r\n    if (data.marketAnalysis) {\r\n      message += `\\n\\n📊 <b>Market Analysis:</b>\\n<i>${this.truncateText(data.marketAnalysis, 200)}</i>`;\r\n    }\r\n\r\n    // Add risk assessment if available\r\n    if (data.riskAssessment) {\r\n      message += `\\n\\n⚠️ <b>Risk Assessment:</b>\\n<i>${this.truncateText(data.riskAssessment, 150)}</i>`;\r\n    }\r\n\r\n    message += `\\n\\n⏰ <i>${data.timestamp?.toLocaleString()}</i>`;\r\n\r\n    // Create interactive keyboard for trade management\r\n    const replyMarkup = this.createTradeManagementKeyboard(data.symbol);\r\n\r\n    return await this.sendNotificationWithRateLimit({\r\n      id: `trade_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n      type: IntelNucNotificationType.TRADE_EXECUTION,\r\n      priority: 'high',\r\n      chatId: process.env.TELEGRAM_CHAT_ID!,\r\n      message,\r\n      parseMode: 'HTML',\r\n      replyMarkup,\r\n      timestamp: new Date()\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Send notification when trade opportunity is missed with explanation\r\n   */\r\n  public async sendTradeOpportunityMissedNotification(data: {\r\n    symbol: string;\r\n    reason: string;\r\n    marketConditions: string;\r\n    sentimentScore?: number;\r\n    potentialPnL?: number;\r\n    timestamp: Date;\r\n  }): Promise<number> {\r\n    const sentimentEmoji = this.getSentimentEmoji(data.sentimentScore || 0);\r\n    const reasonEmoji = this.getReasonEmoji(data.reason);\r\n\r\n    const message = `\r\n⏸️ <b>TRADE OPPORTUNITY MISSED</b> 🚫 <i>[Intel NUC]</i>\r\n\r\n🎯 <b>Symbol:</b> ${data.symbol}\r\n${reasonEmoji} <b>Reason:</b> ${data.reason}\r\n${sentimentEmoji} <b>Sentiment:</b> ${this.formatSentimentScore(data.sentimentScore || 0)}\r\n💸 <b>Potential P&L:</b> $${data.potentialPnL?.toFixed(2) || 'N/A'}\r\n\r\n📊 <b>Market Conditions:</b>\r\n<i>${data.marketConditions}</i>\r\n\r\n💡 <i>This helps optimize future trading decisions</i>\r\n\r\n⏰ <i>${data.timestamp.toLocaleString()}</i>\r\n    `.trim();\r\n\r\n    return await this.sendNotificationWithRateLimit({\r\n      id: `missed_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n      type: IntelNucNotificationType.TRADE_OPPORTUNITY_MISSED,\r\n      priority: 'normal',\r\n      chatId: process.env.TELEGRAM_CHAT_ID!,\r\n      message,\r\n      parseMode: 'HTML',\r\n      timestamp: new Date()\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Send enhanced daily summary with Intel NUC performance metrics\r\n   */\r\n  public async sendDailySummary(data: {\r\n    totalTrades: number;\r\n    winRate: number;\r\n    totalPnL: number;\r\n    bestTrade: number;\r\n    worstTrade: number;\r\n    balance: number;\r\n    date: Date;\r\n    systemPerformance: IntelNucSystemData;\r\n    strategyBreakdown: Record<string, { trades: number; pnl: number }>;\r\n    marketConditions: string;\r\n  }): Promise<number> {\r\n    const pnlEmoji = data.totalPnL >= 0 ? '🚀' : '📉';\r\n    const winRateEmoji = data.winRate >= 70 ? '🎯' : data.winRate >= 50 ? '⚖️' : '🎲';\r\n    const systemHealthEmoji = this.getSystemHealthEmoji(\r\n      Math.max(data.systemPerformance.cpuUsage, data.systemPerformance.ramUsage)\r\n    );\r\n\r\n    let message = `\r\n📊 <b>DAILY TRADING SUMMARY</b> 📈 <i>[Intel NUC]</i>\r\n\r\n📅 <b>Date:</b> ${data.date.toDateString()}\r\n\r\n📈 <b>Trading Performance:</b>\r\n• 🎯 <b>Total Trades:</b> ${data.totalTrades}\r\n• ${winRateEmoji} <b>Win Rate:</b> ${data.winRate.toFixed(1)}%\r\n• ${pnlEmoji} <b>Total P&L:</b> $${data.totalPnL.toFixed(2)}\r\n• 🏆 <b>Best Trade:</b> $${data.bestTrade.toFixed(2)}\r\n• 📉 <b>Worst Trade:</b> $${data.worstTrade.toFixed(2)}\r\n• 💎 <b>Current Balance:</b> $${data.balance.toFixed(2)}\r\n\r\n🖥️ <b>Intel NUC Performance:</b>\r\n${systemHealthEmoji} <b>Avg CPU:</b> ${data.systemPerformance.cpuUsage.toFixed(1)}%\r\n🧠 <b>Avg RAM:</b> ${data.systemPerformance.ramUsage.toFixed(1)}%\r\n🌡️ <b>Max Temp:</b> ${data.systemPerformance.cpuTemperature.toFixed(1)}°C\r\n🌐 <b>SSH Tunnel:</b> ${data.systemPerformance.sshTunnelHealth.toUpperCase()}\r\n⚡ <b>Avg Latency:</b> ${data.systemPerformance.sshTunnelLatency}ms\r\n    `.trim();\r\n\r\n    // Add strategy breakdown\r\n    if (Object.keys(data.strategyBreakdown).length > 0) {\r\n      message += `\\n\\n🧠 <b>Strategy Breakdown:</b>`;\r\n      for (const [strategy, stats] of Object.entries(data.strategyBreakdown)) {\r\n        const strategyPnlEmoji = stats.pnl >= 0 ? '💰' : '📉';\r\n        message += `\\n• ${strategyPnlEmoji} <b>${strategy}:</b> ${stats.trades} trades, $${stats.pnl.toFixed(2)}`;\r\n      }\r\n    }\r\n\r\n    // Add market conditions\r\n    if (data.marketConditions) {\r\n      message += `\\n\\n🌍 <b>Market Conditions:</b>\\n<i>${data.marketConditions}</i>`;\r\n    }\r\n\r\n    message += `\\n\\n${data.totalPnL >= 0 ? '🎉 Profitable day! Keep it up!' : '💪 Learning day - tomorrow will be better!'}`;\r\n\r\n    // Create interactive keyboard for daily actions\r\n    const replyMarkup = this.createDailySummaryKeyboard();\r\n\r\n    return await this.sendNotificationWithRateLimit({\r\n      id: `daily_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n      type: IntelNucNotificationType.DAILY_SUMMARY,\r\n      priority: 'normal',\r\n      chatId: process.env.TELEGRAM_CHAT_ID!,\r\n      message,\r\n      parseMode: 'HTML',\r\n      replyMarkup,\r\n      timestamp: new Date()\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Send Intel NUC system health notification\r\n   */\r\n  public async sendSystemHealth(data: IntelNucSystemData): Promise<number> {\r\n    const cpuEmoji = data.cpuUsage < 70 ? '🟢' : data.cpuUsage < 90 ? '🟡' : '🔴';\r\n    const ramEmoji = data.ramUsage < 70 ? '🟢' : data.ramUsage < 90 ? '🟡' : '🔴';\r\n    const diskEmoji = data.diskUsage < 70 ? '🟢' : data.diskUsage < 90 ? '🟡' : '🔴';\r\n    const tempEmoji = data.cpuTemperature < 70 ? '❄️' : data.cpuTemperature < 80 ? '🌡️' : '🔥';\r\n    const tunnelEmoji = this.getTunnelStatusEmoji(data.sshTunnelHealth);\r\n\r\n    const message = `\r\n🖥️ <b>INTEL NUC SYSTEM HEALTH</b> 📊\r\n\r\n💻 <b>Hardware Status:</b>\r\n• ${cpuEmoji} <b>CPU Usage:</b> ${data.cpuUsage.toFixed(1)}%\r\n• ${ramEmoji} <b>RAM Usage:</b> ${data.ramUsage.toFixed(1)}%\r\n• ${diskEmoji} <b>Disk Usage:</b> ${data.diskUsage.toFixed(1)}%\r\n• ${tempEmoji} <b>CPU Temp:</b> ${data.cpuTemperature.toFixed(1)}°C\r\n\r\n🌐 <b>Network & Connectivity:</b>\r\n• ${tunnelEmoji} <b>SSH Tunnel:</b> ${data.sshTunnelHealth.toUpperCase()}\r\n• ⚡ <b>Tunnel Latency:</b> ${data.sshTunnelLatency}ms\r\n• 🔗 <b>Active Connections:</b> ${data.activeConnections}\r\n• 🌍 <b>Network Status:</b> ${data.networkStatus}\r\n\r\n🤖 <b>Trading System:</b>\r\n• 🎯 <b>Engine Status:</b> ${data.tradingEngineStatus.toUpperCase()}\r\n• 🗄️ <b>DB Connections:</b> ${data.databaseConnections}\r\n\r\n⏱️ <b>Uptime:</b> ${this.formatUptime(data.uptime)}\r\n\r\n${this.getSystemHealthEmoji(data)} <i>System is ${this.getSystemHealthStatus(data)}</i>\r\n    `.trim();\r\n\r\n    // Create interactive keyboard for system management\r\n    const replyMarkup = this.createSystemManagementKeyboard();\r\n\r\n    return await this.sendNotificationWithRateLimit({\r\n      id: `health_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n      type: IntelNucNotificationType.SYSTEM_HEALTH,\r\n      priority: 'normal',\r\n      chatId: process.env.TELEGRAM_CHAT_ID!,\r\n      message,\r\n      parseMode: 'HTML',\r\n      replyMarkup,\r\n      timestamp: new Date()\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Send SSH tunnel alert notification\r\n   */\r\n  public async sendSSHTunnelAlert(data: {\r\n    status: 'reconnecting' | 'failed' | 'restored';\r\n    latency?: number;\r\n    errorMessage?: string;\r\n    timestamp: Date;\r\n  }): Promise<number> {\r\n    const statusEmojis = {\r\n      reconnecting: '🔄',\r\n      failed: '🚨',\r\n      restored: '✅'\r\n    };\r\n\r\n    const priorityMap = {\r\n      reconnecting: 'normal',\r\n      failed: 'critical',\r\n      restored: 'high'\r\n    };\r\n\r\n    let message = `\r\n${statusEmojis[data.status]} <b>SSH TUNNEL ALERT</b> 🌐 <i>[Intel NUC]</i>\r\n\r\n🔗 <b>Status:</b> ${data.status.toUpperCase()}\r\n⚡ <b>Latency:</b> ${data.latency || 'N/A'}ms\r\n    `.trim();\r\n\r\n    if (data.errorMessage) {\r\n      message += `\\n🚫 <b>Error:</b> <i>${data.errorMessage}</i>`;\r\n    }\r\n\r\n    switch (data.status) {\r\n      case 'reconnecting':\r\n        message += `\\n\\n🔄 <i>Attempting to restore connection to Oracle Cloud...</i>`;\r\n        break;\r\n      case 'failed':\r\n        message += `\\n\\n🚨 <i>Trading operations may be affected. Manual intervention may be required.</i>`;\r\n        break;\r\n      case 'restored':\r\n        message += `\\n\\n✅ <i>Connection restored. Trading operations resumed.</i>`;\r\n        break;\r\n    }\r\n\r\n    message += `\\n\\n⏰ <i>${data.timestamp.toLocaleString()}</i>`;\r\n\r\n    return await this.sendNotificationWithRateLimit({\r\n      id: `tunnel_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n      type: IntelNucNotificationType.SSH_TUNNEL_ALERT,\r\n      priority: priorityMap[data.status] as any,\r\n      chatId: process.env.TELEGRAM_CHAT_ID!,\r\n      message,\r\n      parseMode: 'HTML',\r\n      timestamp: new Date()\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Send strategy optimization notification\r\n   */\r\n  public async sendStrategyOptimizationNotification(data: {\r\n    strategy: string;\r\n    oldPerformance: { winRate: number; pnl: number };\r\n    newPerformance: { winRate: number; pnl: number };\r\n    optimizationDetails: string;\r\n    timestamp: Date;\r\n  }): Promise<number> {\r\n    const improvementEmoji = data.newPerformance.pnl > data.oldPerformance.pnl ? '📈' : '📉';\r\n    const winRateChange = data.newPerformance.winRate - data.oldPerformance.winRate;\r\n    const pnlChange = data.newPerformance.pnl - data.oldPerformance.pnl;\r\n\r\n    const message = `\r\n🧠 <b>STRATEGY OPTIMIZATION</b> ${improvementEmoji} <i>[Intel NUC]</i>\r\n\r\n🎯 <b>Strategy:</b> ${data.strategy}\r\n\r\n📊 <b>Performance Comparison:</b>\r\n• 🎯 <b>Win Rate:</b> ${data.oldPerformance.winRate.toFixed(1)}% → ${data.newPerformance.winRate.toFixed(1)}% (${winRateChange >= 0 ? '+' : ''}${winRateChange.toFixed(1)}%)\r\n• 💰 <b>P&L:</b> $${data.oldPerformance.pnl.toFixed(2)} → $${data.newPerformance.pnl.toFixed(2)} (${pnlChange >= 0 ? '+' : ''}$${pnlChange.toFixed(2)})\r\n\r\n🔧 <b>Optimization Details:</b>\r\n<i>${data.optimizationDetails}</i>\r\n\r\n${pnlChange >= 0 ? '🚀 Strategy improved!' : '🔍 Further optimization needed'}\r\n\r\n⏰ <i>${data.timestamp.toLocaleString()}</i>\r\n    `.trim();\r\n\r\n    return await this.sendNotificationWithRateLimit({\r\n      id: `optimization_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n      type: IntelNucNotificationType.STRATEGY_OPTIMIZATION,\r\n      priority: 'normal',\r\n      chatId: process.env.TELEGRAM_CHAT_ID!,\r\n      message,\r\n      parseMode: 'HTML',\r\n      timestamp: new Date()\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Helper method to get confidence emoji\r\n   */\r\n  private getConfidenceEmoji(confidence: number): string {\r\n    if (confidence >= 0.8) return '🎯';\r\n    if (confidence >= 0.6) return '✅';\r\n    if (confidence >= 0.4) return '⚖️';\r\n    return '❓';\r\n  }\r\n\r\n  /**\r\n   * Helper method to get sentiment emoji\r\n   */\r\n  private getSentimentEmoji(score: number): string {\r\n    if (score >= 0.6) return '😊';\r\n    if (score >= 0.2) return '😐';\r\n    if (score >= -0.2) return '😕';\r\n    return '😰';\r\n  }\r\n\r\n  /**\r\n   * Helper method to get system health emoji\r\n   */\r\n  private getSystemHealthEmoji(usage: number): string {\r\n    if (usage < 70) return '🟢';\r\n    if (usage < 90) return '🟡';\r\n    return '🔴';\r\n  }\r\n\r\n  /**\r\n   * Helper method to get tunnel status emoji\r\n   */\r\n  private getTunnelStatusEmoji(status: string): string {\r\n    switch (status) {\r\n      case 'healthy': return '🟢';\r\n      case 'degraded': return '🟡';\r\n      case 'failed': return '🔴';\r\n      default: return '❓';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Helper method to get reason emoji\r\n   */\r\n  private getReasonEmoji(reason: string): string {\r\n    if (reason.toLowerCase().includes('risk')) return '⚠️';\r\n    if (reason.toLowerCase().includes('sentiment')) return '📊';\r\n    if (reason.toLowerCase().includes('technical')) return '📈';\r\n    if (reason.toLowerCase().includes('system')) return '🖥️';\r\n    return '❓';\r\n  }\r\n\r\n  /**\r\n   * Format sentiment score for display\r\n   */\r\n  private formatSentimentScore(score: number): string {\r\n    if (score >= 0.6) return 'Very Positive';\r\n    if (score >= 0.2) return 'Positive';\r\n    if (score >= -0.2) return 'Neutral';\r\n    if (score >= -0.6) return 'Negative';\r\n    return 'Very Negative';\r\n  }\r\n\r\n  /**\r\n   * Format uptime in human-readable format\r\n   */\r\n  private formatUptime(seconds: number): string {\r\n    const days = Math.floor(seconds / 86400);\r\n    const hours = Math.floor((seconds % 86400) / 3600);\r\n    const minutes = Math.floor((seconds % 3600) / 60);\r\n\r\n    if (days > 0) {\r\n      return `${days}d ${hours}h ${minutes}m`;\r\n    } else if (hours > 0) {\r\n      return `${hours}h ${minutes}m`;\r\n    } else {\r\n      return `${minutes}m`;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get system health status text\r\n   */\r\n  private getSystemHealthStatus(data: IntelNucSystemData): string {\r\n    const maxUsage = Math.max(data.cpuUsage, data.ramUsage, data.diskUsage);\r\n    \r\n    if (maxUsage < 70 && data.cpuTemperature < 70 && data.sshTunnelHealth === 'healthy') {\r\n      return 'running optimally';\r\n    }\r\n    if (maxUsage < 90 && data.cpuTemperature < 80) {\r\n      return 'under moderate load';\r\n    }\r\n    return 'under heavy load or stress';\r\n  }\r\n\r\n  /**\r\n   * Truncate text for message length limits\r\n   */\r\n  private truncateText(text: string, maxLength: number): string {\r\n    if (text.length <= maxLength) return text;\r\n    return text.substring(0, maxLength - 3) + '...';\r\n  }\r\n\r\n  /**\r\n   * Create trade management inline keyboard\r\n   */\r\n  private createTradeManagementKeyboard(symbol: string): any {\r\n    return Markup.inlineKeyboard([\r\n      [\r\n        Markup.button.callback(`📊 ${symbol} Chart`, `chart_${symbol}`),\r\n        Markup.button.callback('💰 Balance', 'balance')\r\n      ],\r\n      [\r\n        Markup.button.callback('📈 Positions', 'positions'),\r\n        Markup.button.callback('🎯 Strategy', 'strategy')\r\n      ],\r\n      [\r\n        Markup.button.callback('⏸️ Pause Trading', 'pause'),\r\n        Markup.button.callback('🚨 Emergency Stop', 'emergency_stop')\r\n      ]\r\n    ]);\r\n  }\r\n\r\n  /**\r\n   * Create daily summary inline keyboard\r\n   */\r\n  private createDailySummaryKeyboard(): any {\r\n    return Markup.inlineKeyboard([\r\n      [\r\n        Markup.button.callback('📊 Detailed Report', 'detailed_report'),\r\n        Markup.button.callback('📈 Performance Chart', 'performance_chart')\r\n      ],\r\n      [\r\n        Markup.button.callback('🧠 Strategy Analysis', 'strategy_analysis'),\r\n        Markup.button.callback('🔧 Optimize Settings', 'optimize')\r\n      ]\r\n    ]);\r\n  }\r\n\r\n  /**\r\n   * Create system management inline keyboard\r\n   */\r\n  private createSystemManagementKeyboard(): any {\r\n    return Markup.inlineKeyboard([\r\n      [\r\n        Markup.button.callback('🔄 Restart Services', 'restart_services'),\r\n        Markup.button.callback('🧹 Clear Logs', 'clear_logs')\r\n      ],\r\n      [\r\n        Markup.button.callback('🌐 Test SSH Tunnel', 'test_tunnel'),\r\n        Markup.button.callback('💾 Backup Data', 'backup')\r\n      ],\r\n      [\r\n        Markup.button.callback('📊 System Stats', 'system_stats'),\r\n        Markup.button.callback('🔧 Maintenance', 'maintenance')\r\n      ]\r\n    ]);\r\n  }\r\n\r\n  /**\r\n   * Send notification with rate limiting\r\n   */\r\n  private async sendNotificationWithRateLimit(notification: any): Promise<number> {\r\n    const now = Date.now();\r\n    const windowMs = 60000; // 1 minute window\r\n    const maxPerWindow = 20; // Max 20 messages per minute\r\n\r\n    // Clean old entries\r\n    const userKey = notification.chatId;\r\n    const userMessages = this.rateLimitTracker.get(userKey) || [];\r\n    const recentMessages = userMessages.filter(timestamp => now - timestamp < windowMs);\r\n\r\n    if (recentMessages.length >= maxPerWindow) {\r\n      logger.warn(`Rate limit exceeded for chat ${userKey}, queuing message`);\r\n      // In a real implementation, you might queue the message\r\n      throw new Error('Rate limit exceeded');\r\n    }\r\n\r\n    recentMessages.push(now);\r\n    this.rateLimitTracker.set(userKey, recentMessages);\r\n\r\n    // Send the notification\r\n    try {\r\n      const result = await this.bot.telegram.sendMessage(\r\n        notification.chatId,\r\n        notification.message,\r\n        {\r\n          parse_mode: notification.parseMode || 'HTML',\r\n          disable_web_page_preview: notification.disableWebPagePreview !== false,\r\n          disable_notification: notification.disableNotification,\r\n          reply_markup: notification.replyMarkup\r\n        }\r\n      );\r\n\r\n      logger.info(`✅ Intel NUC Telegram message sent: ${result.message_id}`);\r\n      return result.message_id;\r\n\r\n    } catch (error) {\r\n      logger.error(`❌ Failed to send Intel NUC Telegram notification:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load bot token from environment with decryption\r\n   */\r\n  private async loadBotToken(): Promise<string> {\r\n    const encryptedToken = process.env.TELEGRAM_BOT_TOKEN;\r\n    if (!encryptedToken) {\r\n      throw new Error('TELEGRAM_BOT_TOKEN environment variable not found');\r\n    }\r\n\r\n    try {\r\n      return await this.encryptionService.decrypt(encryptedToken);\r\n    } catch {\r\n      return encryptedToken;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load authorized users from environment\r\n   */\r\n  private async loadAuthorizedUsers(): Promise<void> {\r\n    const authorizedUsersStr = process.env.TELEGRAM_AUTHORIZED_USERS || '';\r\n    const adminUsersStr = process.env.TELEGRAM_ADMIN_USERS || '';\r\n\r\n    if (authorizedUsersStr) {\r\n      const users = authorizedUsersStr.split(',').map(id => id.trim());\r\n      users.forEach(user => this.authorizedUsers.add(user));\r\n    }\r\n\r\n    if (adminUsersStr) {\r\n      const admins = adminUsersStr.split(',').map(id => id.trim());\r\n      admins.forEach(admin => {\r\n        this.adminUsers.add(admin);\r\n        this.authorizedUsers.add(admin);\r\n      });\r\n    }\r\n\r\n    logger.info(`✅ Loaded ${this.authorizedUsers.size} authorized users and ${this.adminUsers.size} admin users`);\r\n  }\r\n\r\n  /**\r\n   * Set up enhanced bot commands for Intel NUC\r\n   */\r\n  private async setupIntelNucBotCommands(): Promise<void> {\r\n    // Enhanced status command with Intel NUC details\r\n    this.botCommands.set('status', {\r\n      command: 'status',\r\n      description: 'Get Intel NUC system and trading status',\r\n      handler: async (ctx: Context) => {\r\n        const message = `\r\n🤖 <b>AI Crypto Trading Agent Status</b> <i>[Intel NUC]</i>\r\n\r\n✅ <b>System:</b> Online and operational\r\n🔄 <b>Trading:</b> Active\r\n🔒 <b>Security:</b> All systems secure\r\n🌐 <b>SSH Tunnel:</b> Healthy connection to Oracle Cloud\r\n🖥️ <b>Intel NUC:</b> Running optimally\r\n\r\nUse /help for more commands.\r\n        `.trim();\r\n\r\n        await ctx.replyWithHTML(message);\r\n      }\r\n    });\r\n\r\n    // System health command\r\n    this.botCommands.set('health', {\r\n      command: 'health',\r\n      description: 'Get detailed Intel NUC system health',\r\n      handler: async (ctx: Context) => {\r\n        // This would integrate with actual system monitoring\r\n        const message = `\r\n🖥️ <b>Intel NUC System Health</b>\r\n\r\n💻 <b>Hardware:</b>\r\n• 🟢 CPU: 45.2% (Normal)\r\n• 🟢 RAM: 62.8% (Normal)\r\n• 🟢 Disk: 34.1% (Normal)\r\n• ❄️ Temp: 58.3°C (Cool)\r\n\r\n🌐 <b>Network:</b>\r\n• 🟢 SSH Tunnel: Healthy\r\n• ⚡ Latency: 23ms\r\n• 🔗 Connections: 12 active\r\n\r\n🤖 <b>Trading:</b>\r\n• 🎯 Engine: Active\r\n• 🗄️ Database: Connected\r\n• 📊 Strategies: 5 running\r\n        `.trim();\r\n\r\n        await ctx.replyWithHTML(message);\r\n      }\r\n    });\r\n\r\n    // Set bot commands\r\n    const commandList = Array.from(this.botCommands.values()).map(cmd => ({\r\n      command: cmd.command,\r\n      description: cmd.description\r\n    }));\r\n\r\n    await this.bot.telegram.setMyCommands(commandList);\r\n    logger.info(`✅ Set up ${commandList.length} Intel NUC bot commands`);\r\n  }\r\n\r\n  /**\r\n   * Set up middleware for authorization and logging\r\n   */\r\n  private setupMiddleware(): void {\r\n    // Authorization middleware\r\n    this.bot.use(async (ctx, next) => {\r\n      const userId = ctx.from?.id.toString();\r\n      \r\n      if (!userId || !this.authorizedUsers.has(userId)) {\r\n        logger.warn(`🚫 Unauthorized Intel NUC Telegram access attempt from user: ${userId}`);\r\n        await ctx.reply('🚫 Unauthorized access. Contact administrator.');\r\n        return;\r\n      }\r\n\r\n      logger.info(`✅ Authorized Intel NUC Telegram user: ${userId}`);\r\n      return next();\r\n    });\r\n\r\n    // Command handlers\r\n    for (const [command, config] of this.botCommands.entries()) {\r\n      this.bot.command(command, async (ctx) => {\r\n        try {\r\n          await config.handler(ctx);\r\n        } catch (error) {\r\n          logger.error(`❌ Error handling Intel NUC command /${command}:`, error);\r\n          await ctx.reply('❌ An error occurred processing your command.');\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Start the Telegram bot\r\n   */\r\n  private async startBot(): Promise<void> {\r\n    try {\r\n      await this.bot.launch();\r\n      logger.info('🚀 Intel NUC Telegram bot started successfully');\r\n\r\n      // Send startup notification\r\n      if (process.env.TELEGRAM_CHAT_ID) {\r\n        await this.sendNotificationWithRateLimit({\r\n          id: `startup_${Date.now()}`,\r\n          type: IntelNucNotificationType.STARTUP,\r\n          priority: 'normal',\r\n          chatId: process.env.TELEGRAM_CHAT_ID,\r\n          message: `\r\n🚀 <b>AI Crypto Trading Agent Started</b> <i>[Intel NUC]</i>\r\n\r\n✅ System initialized successfully on Intel NUC\r\n🔒 Security systems active\r\n🌐 SSH tunnel to Oracle Cloud established\r\n🤖 Bot ready for enhanced commands\r\n\r\nType /help for available commands.\r\n          `.trim(),\r\n          parseMode: 'HTML',\r\n          timestamp: new Date()\r\n        });\r\n      }\r\n\r\n    } catch (error) {\r\n      logger.error('❌ Failed to start Intel NUC Telegram bot:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop the Telegram bot\r\n   */\r\n  public async stop(): Promise<void> {\r\n    if (this.bot) {\r\n      this.bot.stop();\r\n      logger.info('🛑 Intel NUC Telegram bot stopped');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get service statistics\r\n   */\r\n  public getStatistics(): {\r\n    totalSent: number;\r\n    totalFailed: number;\r\n    authorizedUsers: number;\r\n    adminUsers: number;\r\n    rateLimitHits: number;\r\n  } {\r\n    let totalSent = 0;\r\n    let totalFailed = 0;\r\n\r\n    for (const status of this.deliveryTracking.values()) {\r\n      if (status.status === 'sent' || status.status === 'delivered') {\r\n        totalSent++;\r\n      } else if (status.status === 'failed') {\r\n        totalFailed++;\r\n      }\r\n    }\r\n\r\n    return {\r\n      totalSent,\r\n      totalFailed,\r\n      authorizedUsers: this.authorizedUsers.size,\r\n      adminUsers: this.adminUsers.size,\r\n      rateLimitHits: 0 // Would track actual rate limit hits\r\n    };\r\n  }\r\n}\r\n\r\nexport default IntelNucTelegramService;"],"version":3}