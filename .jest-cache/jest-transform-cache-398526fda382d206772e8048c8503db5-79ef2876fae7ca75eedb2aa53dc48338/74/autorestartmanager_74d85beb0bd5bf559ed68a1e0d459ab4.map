{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\auto-restart-manager.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\auto-restart-manager.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * AI CRYPTO TRADING AGENT - AUTO-RESTART AND RECOVERY MANAGER\r\n * =============================================================================\r\n * \r\n * This service provides comprehensive auto-restart and recovery capabilities\r\n * for the AI crypto trading agent. It manages systemd services, graceful\r\n * shutdowns, failure detection, and automatic recovery procedures.\r\n * \r\n * CRITICAL RELIABILITY NOTICE:\r\n * This system manages the availability of trading operations. System failures\r\n * or improper recovery could impact trading decisions and result in financial\r\n * losses. All recovery procedures are logged and monitored.\r\n * \r\n * Hardware Specifications:\r\n * - Intel NUC with i5 CPU\r\n * - 12GB RAM\r\n * - 256GB M.2 SSD\r\n * - Ubuntu OS with systemd\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport { EventEmitter } from 'events';\r\nimport { logger } from '@/core/logging/logger';\r\nimport { auditService } from '@/security/audit-service';\r\n\r\n/**\r\n * Interface for service configuration\r\n */\r\nexport interface ServiceConfig {\r\n  /** Service name */\r\n  name: string;\r\n  /** Service description */\r\n  description: string;\r\n  /** Executable path */\r\n  execPath: string;\r\n  /** Working directory */\r\n  workingDirectory: string;\r\n  /** Environment variables */\r\n  environment: Record<string, string>;\r\n  /** User to run service as */\r\n  user: string;\r\n  /** Group to run service as */\r\n  group: string;\r\n  /** Restart policy */\r\n  restartPolicy: 'always' | 'on-failure' | 'on-abnormal' | 'on-watchdog' | 'on-abort' | 'never';\r\n  /** Restart delay in seconds */\r\n  restartDelay: number;\r\n  /** Maximum restart attempts */\r\n  maxRestartAttempts: number;\r\n  /** Dependencies */\r\n  dependencies: string[];\r\n  /** Required services */\r\n  requires: string[];\r\n  /** Services to start after */\r\n  after: string[];\r\n  /** Services to start before */\r\n  before: string[];\r\n}\r\n\r\n/**\r\n * Interface for failure detection configuration\r\n */\r\nexport interface FailureDetectionConfig {\r\n  /** Enable health check monitoring */\r\n  enableHealthCheck: boolean;\r\n  /** Health check interval in milliseconds */\r\n  healthCheckInterval: number;\r\n  /** Health check timeout in milliseconds */\r\n  healthCheckTimeout: number;\r\n  /** Maximum consecutive failures before restart */\r\n  maxConsecutiveFailures: number;\r\n  /** Enable process monitoring */\r\n  enableProcessMonitoring: boolean;\r\n  /** Enable resource monitoring */\r\n  enableResourceMonitoring: boolean;\r\n  /** Memory usage threshold for restart (percentage) */\r\n  memoryThreshold: number;\r\n  /** CPU usage threshold for restart (percentage) */\r\n  cpuThreshold: number;\r\n  /** Enable log monitoring */\r\n  enableLogMonitoring: boolean;\r\n  /** Error patterns to monitor in logs */\r\n  errorPatterns: string[];\r\n}\r\n\r\n/**\r\n * Interface for recovery status\r\n */\r\nexport interface RecoveryStatus {\r\n  /** Service name */\r\n  serviceName: string;\r\n  /** Current status */\r\n  status: 'running' | 'stopped' | 'failed' | 'restarting' | 'unknown';\r\n  /** Last restart time */\r\n  lastRestart: Date | null;\r\n  /** Restart count */\r\n  restartCount: number;\r\n  /** Consecutive failure count */\r\n  consecutiveFailures: number;\r\n  /** Last failure reason */\r\n  lastFailureReason: string | null;\r\n  /** Recovery actions taken */\r\n  recoveryActions: string[];\r\n  /** Health check status */\r\n  healthStatus: 'healthy' | 'unhealthy' | 'unknown';\r\n  /** Last health check */\r\n  lastHealthCheck: Date | null;\r\n}\r\n\r\n/**\r\n * Interface for graceful shutdown configuration\r\n */\r\nexport interface ShutdownConfig {\r\n  /** Shutdown timeout in milliseconds */\r\n  timeout: number;\r\n  /** Enable position closure before shutdown */\r\n  closePositions: boolean;\r\n  /** Enable data backup before shutdown */\r\n  backupData: boolean;\r\n  /** Enable notification sending */\r\n  sendNotifications: boolean;\r\n  /** Shutdown hooks to execute */\r\n  shutdownHooks: Array<() => Promise<void>>;\r\n}\r\n\r\n/**\r\n * Auto-Restart and Recovery Manager\r\n * Provides comprehensive system recovery and restart capabilities\r\n */\r\nexport class AutoRestartManager extends EventEmitter {\r\n  private services: Map<string, ServiceConfig> = new Map();\r\n  private recoveryStatus: Map<string, RecoveryStatus> = new Map();\r\n  private failureDetectionConfig: FailureDetectionConfig;\r\n  private shutdownConfig: ShutdownConfig;\r\n  private monitoringInterval: NodeJS.Timeout | null = null;\r\n  private isShuttingDown: boolean = false;\r\n  private healthCheckIntervals: Map<string, NodeJS.Timeout> = new Map();\r\n\r\n  constructor() {\r\n    super();\r\n    this.failureDetectionConfig = this.loadFailureDetectionConfig();\r\n    this.shutdownConfig = this.loadShutdownConfig();\r\n    logger.info('🔄 Auto-Restart Manager initializing...');\r\n  }\r\n\r\n  /**\r\n   * Load failure detection configuration\r\n   * \r\n   * @returns FailureDetectionConfig Configuration object\r\n   */\r\n  private loadFailureDetectionConfig(): FailureDetectionConfig {\r\n    return {\r\n      enableHealthCheck: process.env.ENABLE_HEALTH_CHECK !== 'false',\r\n      healthCheckInterval: parseInt(process.env.HEALTH_CHECK_INTERVAL_MS || '30000'),\r\n      healthCheckTimeout: parseInt(process.env.HEALTH_CHECK_TIMEOUT_MS || '5000'),\r\n      maxConsecutiveFailures: parseInt(process.env.MAX_CONSECUTIVE_FAILURES || '3'),\r\n      enableProcessMonitoring: process.env.ENABLE_PROCESS_MONITORING !== 'false',\r\n      enableResourceMonitoring: process.env.ENABLE_RESOURCE_MONITORING !== 'false',\r\n      memoryThreshold: parseInt(process.env.MEMORY_RESTART_THRESHOLD || '90'),\r\n      cpuThreshold: parseInt(process.env.CPU_RESTART_THRESHOLD || '95'),\r\n      enableLogMonitoring: process.env.ENABLE_LOG_MONITORING !== 'false',\r\n      errorPatterns: (process.env.ERROR_PATTERNS || 'FATAL,CRITICAL,OutOfMemoryError').split(',')\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Load graceful shutdown configuration\r\n   * \r\n   * @returns ShutdownConfig Configuration object\r\n   */\r\n  private loadShutdownConfig(): ShutdownConfig {\r\n    return {\r\n      timeout: parseInt(process.env.SHUTDOWN_TIMEOUT_MS || '30000'),\r\n      closePositions: process.env.SHUTDOWN_CLOSE_POSITIONS !== 'false',\r\n      backupData: process.env.SHUTDOWN_BACKUP_DATA !== 'false',\r\n      sendNotifications: process.env.SHUTDOWN_SEND_NOTIFICATIONS !== 'false',\r\n      shutdownHooks: []\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Initialize auto-restart and recovery system\r\n   * \r\n   * @returns Promise<void>\r\n   */\r\n  public async initialize(): Promise<void> {\r\n    try {\r\n      logger.info('🔄 Initializing auto-restart and recovery system...');\r\n\r\n      // Create main trading service configuration\r\n      await this.createTradingServiceConfig();\r\n\r\n      // Create supporting service configurations\r\n      await this.createSupportingServiceConfigs();\r\n\r\n      // Generate systemd service files\r\n      await this.generateSystemdServiceFiles();\r\n\r\n      // Start failure detection monitoring\r\n      await this.startFailureDetection();\r\n\r\n      // Set up graceful shutdown handlers\r\n      this.setupGracefulShutdownHandlers();\r\n\r\n      logger.info('✅ Auto-restart and recovery system initialized');\r\n\r\n      // Audit log\r\n      await auditService.createAuditEntry({\r\n        auditId: `restart_mgr_init_${Date.now()}`,\r\n        eventType: 'AUTO_RESTART_MANAGER_INIT',\r\n        actor: 'SYSTEM',\r\n        resource: 'AUTO_RESTART_MANAGER',\r\n        action: 'INITIALIZE',\r\n        result: 'SUCCESS',\r\n        timestamp: new Date(),\r\n        auditData: { \r\n          servicesCount: this.services.size,\r\n          failureDetectionEnabled: this.failureDetectionConfig.enableHealthCheck\r\n        }\r\n      });\r\n\r\n    } catch (error) {\r\n      logger.error('❌ Failed to initialize auto-restart system:', error);\r\n      throw new Error('Auto-restart system initialization failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create main trading service configuration\r\n   * \r\n   * @returns Promise<void>\r\n   */\r\n  private async createTradingServiceConfig(): Promise<void> {\r\n    const tradingServiceConfig: ServiceConfig = {\r\n      name: 'ai-crypto-trading-agent',\r\n      description: 'AI Cryptocurrency Trading Agent - Main Service',\r\n      execPath: '/usr/bin/node',\r\n      workingDirectory: process.cwd(),\r\n      environment: {\r\n        NODE_ENV: 'production',\r\n        NODE_OPTIONS: '--max-old-space-size=8192',\r\n        PATH: '/usr/local/bin:/usr/bin:/bin'\r\n      },\r\n      user: process.env.SERVICE_USER || 'trading',\r\n      group: process.env.SERVICE_GROUP || 'trading',\r\n      restartPolicy: 'always',\r\n      restartDelay: 10,\r\n      maxRestartAttempts: 5,\r\n      dependencies: ['network.target', 'ssh-tunnel.service'],\r\n      requires: ['network.target'],\r\n      after: ['network.target', 'ssh-tunnel.service', 'system-monitor.service'],\r\n      before: []\r\n    };\r\n\r\n    this.services.set(tradingServiceConfig.name, tradingServiceConfig);\r\n    this.initializeRecoveryStatus(tradingServiceConfig.name);\r\n  }\r\n\r\n  /**\r\n   * Create supporting service configurations\r\n   * \r\n   * @returns Promise<void>\r\n   */\r\n  private async createSupportingServiceConfigs(): Promise<void> {\r\n    // SSH Tunnel Service\r\n    const sshTunnelConfig: ServiceConfig = {\r\n      name: 'ssh-tunnel',\r\n      description: 'SSH Tunnel to Oracle Free Tier',\r\n      execPath: '/usr/bin/ssh',\r\n      workingDirectory: '/home/trading',\r\n      environment: {\r\n        SSH_AUTH_SOCK: '',\r\n        PATH: '/usr/local/bin:/usr/bin:/bin'\r\n      },\r\n      user: 'trading',\r\n      group: 'trading',\r\n      restartPolicy: 'always',\r\n      restartDelay: 5,\r\n      maxRestartAttempts: 10,\r\n      dependencies: ['network.target'],\r\n      requires: ['network.target'],\r\n      after: ['network.target'],\r\n      before: ['ai-crypto-trading-agent.service']\r\n    };\r\n\r\n    // System Monitor Service\r\n    const systemMonitorConfig: ServiceConfig = {\r\n      name: 'system-monitor',\r\n      description: 'Intel NUC System Monitor',\r\n      execPath: '/usr/bin/node',\r\n      workingDirectory: process.cwd(),\r\n      environment: {\r\n        NODE_ENV: 'production',\r\n        PATH: '/usr/local/bin:/usr/bin:/bin'\r\n      },\r\n      user: 'trading',\r\n      group: 'trading',\r\n      restartPolicy: 'always',\r\n      restartDelay: 5,\r\n      maxRestartAttempts: 3,\r\n      dependencies: ['network.target'],\r\n      requires: [],\r\n      after: ['network.target'],\r\n      before: ['ai-crypto-trading-agent.service']\r\n    };\r\n\r\n    this.services.set(sshTunnelConfig.name, sshTunnelConfig);\r\n    this.services.set(systemMonitorConfig.name, systemMonitorConfig);\r\n\r\n    this.initializeRecoveryStatus(sshTunnelConfig.name);\r\n    this.initializeRecoveryStatus(systemMonitorConfig.name);\r\n  }\r\n\r\n  /**\r\n   * Initialize recovery status for a service\r\n   * \r\n   * @param serviceName Service name\r\n   */\r\n  private initializeRecoveryStatus(serviceName: string): void {\r\n    this.recoveryStatus.set(serviceName, {\r\n      serviceName,\r\n      status: 'unknown',\r\n      lastRestart: null,\r\n      restartCount: 0,\r\n      consecutiveFailures: 0,\r\n      lastFailureReason: null,\r\n      recoveryActions: [],\r\n      healthStatus: 'unknown',\r\n      lastHealthCheck: null\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Generate systemd service files\r\n   * \r\n   * @returns Promise<void>\r\n   */\r\n  private async generateSystemdServiceFiles(): Promise<void> {\r\n    try {\r\n      logger.info('📝 Generating systemd service files...');\r\n\r\n      for (const [serviceName, config] of this.services) {\r\n        const serviceFileContent = this.generateServiceFileContent(config);\r\n        const serviceFilePath = `/etc/systemd/system/${serviceName}.service`;\r\n\r\n        // Write service file (would need sudo permissions)\r\n        try {\r\n          const { writeFileSync } = await import('fs');\r\n          const { execSync } = await import('child_process');\r\n\r\n          // Create temporary file first\r\n          const tempPath = `/tmp/${serviceName}.service`;\r\n          writeFileSync(tempPath, serviceFileContent);\r\n\r\n          // Move to systemd directory with sudo\r\n          execSync(`sudo mv ${tempPath} ${serviceFilePath}`, { stdio: 'pipe' });\r\n          execSync(`sudo chmod 644 ${serviceFilePath}`, { stdio: 'pipe' });\r\n\r\n          logger.info(`✅ Created service file: ${serviceFilePath}`);\r\n\r\n        } catch (error) {\r\n          logger.warn(`⚠️ Could not create service file for ${serviceName}:`, error);\r\n          // Continue with other services\r\n        }\r\n      }\r\n\r\n      // Reload systemd daemon\r\n      try {\r\n        const { execSync } = await import('child_process');\r\n        execSync('sudo systemctl daemon-reload', { stdio: 'pipe' });\r\n        logger.info('✅ Systemd daemon reloaded');\r\n      } catch (error) {\r\n        logger.warn('⚠️ Could not reload systemd daemon:', error);\r\n      }\r\n\r\n    } catch (error) {\r\n      logger.error('❌ Failed to generate systemd service files:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate systemd service file content\r\n   * \r\n   * @param config Service configuration\r\n   * @returns string Service file content\r\n   */\r\n  private generateServiceFileContent(config: ServiceConfig): string {\r\n    const environmentVars = Object.entries(config.environment)\r\n      .map(([key, value]) => `Environment=${key}=${value}`)\r\n      .join('\\n');\r\n\r\n    const dependencies = config.dependencies.length > 0 \r\n      ? `Wants=${config.dependencies.join(' ')}\\n` \r\n      : '';\r\n\r\n    const requires = config.requires.length > 0 \r\n      ? `Requires=${config.requires.join(' ')}\\n` \r\n      : '';\r\n\r\n    const after = config.after.length > 0 \r\n      ? `After=${config.after.join(' ')}\\n` \r\n      : '';\r\n\r\n    const before = config.before.length > 0 \r\n      ? `Before=${config.before.join(' ')}\\n` \r\n      : '';\r\n\r\n    return `[Unit]\r\nDescription=${config.description}\r\n${dependencies}${requires}${after}${before}\r\n\r\n[Service]\r\nType=simple\r\nUser=${config.user}\r\nGroup=${config.group}\r\nWorkingDirectory=${config.workingDirectory}\r\nExecStart=${this.generateExecStart(config)}\r\nRestart=${config.restartPolicy}\r\nRestartSec=${config.restartDelay}\r\nStartLimitBurst=${config.maxRestartAttempts}\r\nStartLimitIntervalSec=300\r\n${environmentVars}\r\n\r\n# Security settings\r\nNoNewPrivileges=true\r\nProtectSystem=strict\r\nProtectHome=true\r\nReadWritePaths=${config.workingDirectory}\r\nPrivateTmp=true\r\n\r\n# Resource limits\r\nLimitNOFILE=65536\r\nLimitNPROC=4096\r\n\r\n[Install]\r\nWantedBy=multi-user.target\r\n`;\r\n  }\r\n\r\n  /**\r\n   * Generate ExecStart command for service\r\n   * \r\n   * @param config Service configuration\r\n   * @returns string ExecStart command\r\n   */\r\n  private generateExecStart(config: ServiceConfig): string {\r\n    switch (config.name) {\r\n      case 'ai-crypto-trading-agent':\r\n        return `${config.execPath} ${config.workingDirectory}/dist/index.js`;\r\n      \r\n      case 'ssh-tunnel':\r\n        const oracleIP = process.env.ORACLE_IP || '168.138.104.117';\r\n        const sshUser = process.env.SSH_USER || 'ubuntu';\r\n        const sshKey = process.env.SSH_KEY_PATH || '/home/trading/.ssh/id_rsa';\r\n        const localPort = process.env.LOCAL_TUNNEL_PORT || '8080';\r\n        const remotePort = process.env.REMOTE_TUNNEL_PORT || '80';\r\n        return `${config.execPath} -N -L ${localPort}:localhost:${remotePort} -i ${sshKey} ${sshUser}@${oracleIP}`;\r\n      \r\n      case 'system-monitor':\r\n        return `${config.execPath} ${config.workingDirectory}/dist/scripts/system-monitor.js`;\r\n      \r\n      default:\r\n        return `${config.execPath} ${config.workingDirectory}/dist/index.js`;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Start failure detection monitoring\r\n   * \r\n   * @returns Promise<void>\r\n   */\r\n  private async startFailureDetection(): Promise<void> {\r\n    try {\r\n      logger.info('🔍 Starting failure detection monitoring...');\r\n\r\n      if (this.failureDetectionConfig.enableHealthCheck) {\r\n        // Start health checks for each service\r\n        for (const serviceName of this.services.keys()) {\r\n          this.startHealthCheck(serviceName);\r\n        }\r\n      }\r\n\r\n      // Start general monitoring\r\n      this.monitoringInterval = setInterval(async () => {\r\n        try {\r\n          await this.performFailureDetection();\r\n        } catch (error) {\r\n          logger.error('❌ Failure detection error:', error);\r\n        }\r\n      }, this.failureDetectionConfig.healthCheckInterval);\r\n\r\n      logger.info('✅ Failure detection monitoring started');\r\n\r\n    } catch (error) {\r\n      logger.error('❌ Failed to start failure detection:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Start health check for a specific service\r\n   * \r\n   * @param serviceName Service name\r\n   */\r\n  private startHealthCheck(serviceName: string): void {\r\n    const interval = setInterval(async () => {\r\n      try {\r\n        await this.performHealthCheck(serviceName);\r\n      } catch (error) {\r\n        logger.error(`❌ Health check failed for ${serviceName}:`, error);\r\n      }\r\n    }, this.failureDetectionConfig.healthCheckInterval);\r\n\r\n    this.healthCheckIntervals.set(serviceName, interval);\r\n  }\r\n\r\n  /**\r\n   * Perform health check for a service\r\n   * \r\n   * @param serviceName Service name\r\n   * @returns Promise<void>\r\n   */\r\n  private async performHealthCheck(serviceName: string): Promise<void> {\r\n    try {\r\n      const status = this.recoveryStatus.get(serviceName);\r\n      if (!status) return;\r\n\r\n      // Check service status using systemctl\r\n      const isHealthy = await this.checkServiceHealth(serviceName);\r\n      \r\n      status.lastHealthCheck = new Date();\r\n      \r\n      if (isHealthy) {\r\n        status.healthStatus = 'healthy';\r\n        status.consecutiveFailures = 0;\r\n      } else {\r\n        status.healthStatus = 'unhealthy';\r\n        status.consecutiveFailures++;\r\n        \r\n        logger.warn(`⚠️ Health check failed for ${serviceName} (${status.consecutiveFailures}/${this.failureDetectionConfig.maxConsecutiveFailures})`);\r\n        \r\n        // Trigger recovery if threshold exceeded\r\n        if (status.consecutiveFailures >= this.failureDetectionConfig.maxConsecutiveFailures) {\r\n          await this.triggerServiceRecovery(serviceName, 'consecutive_health_check_failures');\r\n        }\r\n      }\r\n\r\n    } catch (error) {\r\n      logger.error(`❌ Health check error for ${serviceName}:`, error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check service health using systemctl\r\n   * \r\n   * @param serviceName Service name\r\n   * @returns Promise<boolean> True if healthy\r\n   */\r\n  private async checkServiceHealth(serviceName: string): Promise<boolean> {\r\n    try {\r\n      const { execSync } = await import('child_process');\r\n      \r\n      // Check if service is active\r\n      const result = execSync(`systemctl is-active ${serviceName}`, { \r\n        stdio: 'pipe',\r\n        encoding: 'utf8'\r\n      });\r\n      \r\n      return result.trim() === 'active';\r\n      \r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Perform comprehensive failure detection\r\n   * \r\n   * @returns Promise<void>\r\n   */\r\n  private async performFailureDetection(): Promise<void> {\r\n    try {\r\n      for (const serviceName of this.services.keys()) {\r\n        const status = this.recoveryStatus.get(serviceName);\r\n        if (!status) continue;\r\n\r\n        // Update service status\r\n        await this.updateServiceStatus(serviceName);\r\n\r\n        // Check for resource issues\r\n        if (this.failureDetectionConfig.enableResourceMonitoring) {\r\n          await this.checkResourceUsage(serviceName);\r\n        }\r\n\r\n        // Check for log errors\r\n        if (this.failureDetectionConfig.enableLogMonitoring) {\r\n          await this.checkLogErrors(serviceName);\r\n        }\r\n      }\r\n\r\n    } catch (error) {\r\n      logger.error('❌ Failure detection error:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update service status\r\n   * \r\n   * @param serviceName Service name\r\n   * @returns Promise<void>\r\n   */\r\n  private async updateServiceStatus(serviceName: string): Promise<void> {\r\n    try {\r\n      const { execSync } = await import('child_process');\r\n      const status = this.recoveryStatus.get(serviceName);\r\n      if (!status) return;\r\n\r\n      // Get service status\r\n      const result = execSync(`systemctl show ${serviceName} --property=ActiveState,SubState`, {\r\n        stdio: 'pipe',\r\n        encoding: 'utf8'\r\n      });\r\n\r\n      const lines = result.split('\\n');\r\n      const activeState = lines.find(line => line.startsWith('ActiveState='))?.split('=')[1];\r\n      const subState = lines.find(line => line.startsWith('SubState='))?.split('=')[1];\r\n\r\n      // Map systemd states to our status\r\n      if (activeState === 'active' && subState === 'running') {\r\n        status.status = 'running';\r\n      } else if (activeState === 'failed') {\r\n        status.status = 'failed';\r\n        if (status.lastFailureReason !== 'systemd_failed') {\r\n          await this.triggerServiceRecovery(serviceName, 'systemd_failed');\r\n        }\r\n      } else if (activeState === 'activating') {\r\n        status.status = 'restarting';\r\n      } else {\r\n        status.status = 'stopped';\r\n      }\r\n\r\n    } catch (error) {\r\n      logger.error(`❌ Failed to update status for ${serviceName}:`, error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check resource usage for a service\r\n   * \r\n   * @param serviceName Service name\r\n   * @returns Promise<void>\r\n   */\r\n  private async checkResourceUsage(serviceName: string): Promise<void> {\r\n    try {\r\n      // This would integrate with system monitoring to check resource usage\r\n      // For now, we'll implement a basic check\r\n      \r\n      if (serviceName === 'ai-crypto-trading-agent') {\r\n        const memoryUsage = process.memoryUsage();\r\n        const memoryUsagePercent = (memoryUsage.heapUsed / memoryUsage.heapTotal) * 100;\r\n        \r\n        if (memoryUsagePercent > this.failureDetectionConfig.memoryThreshold) {\r\n          await this.triggerServiceRecovery(serviceName, `high_memory_usage_${memoryUsagePercent.toFixed(1)}%`);\r\n        }\r\n      }\r\n\r\n    } catch (error) {\r\n      logger.error(`❌ Resource usage check failed for ${serviceName}:`, error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check for log errors\r\n   * \r\n   * @param serviceName Service name\r\n   * @returns Promise<void>\r\n   */\r\n  private async checkLogErrors(serviceName: string): Promise<void> {\r\n    try {\r\n      const { execSync } = await import('child_process');\r\n      \r\n      // Check recent journal entries for error patterns\r\n      const result = execSync(`journalctl -u ${serviceName} --since \"5 minutes ago\" --no-pager`, {\r\n        stdio: 'pipe',\r\n        encoding: 'utf8'\r\n      });\r\n\r\n      for (const pattern of this.failureDetectionConfig.errorPatterns) {\r\n        if (result.includes(pattern)) {\r\n          await this.triggerServiceRecovery(serviceName, `log_error_pattern_${pattern}`);\r\n          break;\r\n        }\r\n      }\r\n\r\n    } catch (error) {\r\n      // Ignore errors - service might not exist yet\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trigger service recovery\r\n   * \r\n   * @param serviceName Service name\r\n   * @param reason Failure reason\r\n   * @returns Promise<void>\r\n   */\r\n  private async triggerServiceRecovery(serviceName: string, reason: string): Promise<void> {\r\n    try {\r\n      const status = this.recoveryStatus.get(serviceName);\r\n      if (!status) return;\r\n\r\n      logger.warn(`🔄 Triggering recovery for ${serviceName} - Reason: ${reason}`);\r\n\r\n      status.lastFailureReason = reason;\r\n      status.restartCount++;\r\n      status.lastRestart = new Date();\r\n      status.recoveryActions.push(`restart_${Date.now()}_${reason}`);\r\n\r\n      // Perform recovery actions\r\n      await this.performRecoveryActions(serviceName, reason);\r\n\r\n      // Audit log\r\n      await auditService.createAuditEntry({\r\n        auditId: `service_recovery_${serviceName}_${Date.now()}`,\r\n        eventType: 'SERVICE_RECOVERY_TRIGGERED',\r\n        actor: 'AUTO_RESTART_MANAGER',\r\n        resource: `SERVICE_${serviceName.toUpperCase()}`,\r\n        action: 'TRIGGER_RECOVERY',\r\n        result: 'SUCCESS',\r\n        timestamp: new Date(),\r\n        auditData: { \r\n          serviceName,\r\n          reason,\r\n          restartCount: status.restartCount,\r\n          consecutiveFailures: status.consecutiveFailures\r\n        }\r\n      });\r\n\r\n      // Emit recovery event\r\n      this.emit('serviceRecovery', { serviceName, reason, status });\r\n\r\n    } catch (error) {\r\n      logger.error(`❌ Service recovery failed for ${serviceName}:`, error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Perform recovery actions for a service\r\n   * \r\n   * @param serviceName Service name\r\n   * @param reason Failure reason\r\n   * @returns Promise<void>\r\n   */\r\n  private async performRecoveryActions(serviceName: string, reason: string): Promise<void> {\r\n    try {\r\n      const { execSync } = await import('child_process');\r\n\r\n      // Stop service gracefully first\r\n      try {\r\n        execSync(`sudo systemctl stop ${serviceName}`, { stdio: 'pipe', timeout: 10000 });\r\n        await new Promise(resolve => setTimeout(resolve, 2000));\r\n      } catch (error) {\r\n        logger.warn(`⚠️ Graceful stop failed for ${serviceName}, forcing stop`);\r\n      }\r\n\r\n      // Force kill if necessary\r\n      try {\r\n        execSync(`sudo systemctl kill ${serviceName}`, { stdio: 'pipe' });\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n      } catch (error) {\r\n        // Ignore - service might already be stopped\r\n      }\r\n\r\n      // Clear any failed state\r\n      try {\r\n        execSync(`sudo systemctl reset-failed ${serviceName}`, { stdio: 'pipe' });\r\n      } catch (error) {\r\n        // Ignore - service might not be in failed state\r\n      }\r\n\r\n      // Restart service\r\n      execSync(`sudo systemctl start ${serviceName}`, { stdio: 'pipe' });\r\n\r\n      logger.info(`✅ Service ${serviceName} restarted successfully`);\r\n\r\n    } catch (error) {\r\n      logger.error(`❌ Recovery actions failed for ${serviceName}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Setup graceful shutdown handlers\r\n   */\r\n  private setupGracefulShutdownHandlers(): void {\r\n    // Handle shutdown signals\r\n    process.on('SIGTERM', () => this.handleGracefulShutdown('SIGTERM'));\r\n    process.on('SIGINT', () => this.handleGracefulShutdown('SIGINT'));\r\n    process.on('SIGHUP', () => this.handleGracefulShutdown('SIGHUP'));\r\n\r\n    logger.info('✅ Graceful shutdown handlers configured');\r\n  }\r\n\r\n  /**\r\n   * Handle graceful shutdown\r\n   * \r\n   * @param signal Shutdown signal\r\n   * @returns Promise<void>\r\n   */\r\n  private async handleGracefulShutdown(signal: string): Promise<void> {\r\n    if (this.isShuttingDown) {\r\n      logger.warn('⚠️ Shutdown already in progress');\r\n      return;\r\n    }\r\n\r\n    this.isShuttingDown = true;\r\n    logger.info(`🛑 Graceful shutdown initiated - Signal: ${signal}`);\r\n\r\n    try {\r\n      const shutdownPromise = this.performGracefulShutdown();\r\n      const timeoutPromise = new Promise((_, reject) => \r\n        setTimeout(() => reject(new Error('Shutdown timeout')), this.shutdownConfig.timeout)\r\n      );\r\n\r\n      await Promise.race([shutdownPromise, timeoutPromise]);\r\n      \r\n      logger.info('✅ Graceful shutdown completed');\r\n      process.exit(0);\r\n\r\n    } catch (error) {\r\n      logger.error('❌ Graceful shutdown failed:', error);\r\n      process.exit(1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Perform graceful shutdown procedures\r\n   * \r\n   * @returns Promise<void>\r\n   */\r\n  private async performGracefulShutdown(): Promise<void> {\r\n    try {\r\n      // Stop monitoring\r\n      this.stopMonitoring();\r\n\r\n      // Execute shutdown hooks\r\n      for (const hook of this.shutdownConfig.shutdownHooks) {\r\n        try {\r\n          await hook();\r\n        } catch (error) {\r\n          logger.error('❌ Shutdown hook failed:', error);\r\n        }\r\n      }\r\n\r\n      // Stop all managed services\r\n      await this.stopAllServices();\r\n\r\n      // Send shutdown notifications\r\n      if (this.shutdownConfig.sendNotifications) {\r\n        await this.sendShutdownNotifications();\r\n      }\r\n\r\n      // Create final audit entry\r\n      await auditService.createAuditEntry({\r\n        auditId: `graceful_shutdown_${Date.now()}`,\r\n        eventType: 'GRACEFUL_SHUTDOWN_COMPLETED',\r\n        actor: 'AUTO_RESTART_MANAGER',\r\n        resource: 'SYSTEM',\r\n        action: 'GRACEFUL_SHUTDOWN',\r\n        result: 'SUCCESS',\r\n        timestamp: new Date(),\r\n        auditData: { shutdownConfig: this.shutdownConfig }\r\n      });\r\n\r\n    } catch (error) {\r\n      logger.error('❌ Graceful shutdown procedures failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop all monitoring activities\r\n   */\r\n  private stopMonitoring(): void {\r\n    // Stop main monitoring interval\r\n    if (this.monitoringInterval) {\r\n      clearInterval(this.monitoringInterval);\r\n      this.monitoringInterval = null;\r\n    }\r\n\r\n    // Stop health check intervals\r\n    for (const [serviceName, interval] of this.healthCheckIntervals) {\r\n      clearInterval(interval);\r\n    }\r\n    this.healthCheckIntervals.clear();\r\n\r\n    logger.info('🛑 Monitoring stopped');\r\n  }\r\n\r\n  /**\r\n   * Stop all managed services\r\n   * \r\n   * @returns Promise<void>\r\n   */\r\n  private async stopAllServices(): Promise<void> {\r\n    try {\r\n      const { execSync } = await import('child_process');\r\n\r\n      // Stop services in reverse dependency order\r\n      const serviceOrder = ['ai-crypto-trading-agent', 'system-monitor', 'ssh-tunnel'];\r\n\r\n      for (const serviceName of serviceOrder) {\r\n        if (this.services.has(serviceName)) {\r\n          try {\r\n            execSync(`sudo systemctl stop ${serviceName}`, { stdio: 'pipe', timeout: 10000 });\r\n            logger.info(`✅ Stopped service: ${serviceName}`);\r\n          } catch (error) {\r\n            logger.warn(`⚠️ Failed to stop service ${serviceName}:`, error);\r\n          }\r\n        }\r\n      }\r\n\r\n    } catch (error) {\r\n      logger.error('❌ Failed to stop services:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send shutdown notifications\r\n   * \r\n   * @returns Promise<void>\r\n   */\r\n  private async sendShutdownNotifications(): Promise<void> {\r\n    try {\r\n      // This would integrate with notification service\r\n      logger.info('📧 Shutdown notifications sent');\r\n    } catch (error) {\r\n      logger.error('❌ Failed to send shutdown notifications:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add shutdown hook\r\n   * \r\n   * @param hook Shutdown hook function\r\n   */\r\n  public addShutdownHook(hook: () => Promise<void>): void {\r\n    this.shutdownConfig.shutdownHooks.push(hook);\r\n  }\r\n\r\n  /**\r\n   * Get recovery status for all services\r\n   * \r\n   * @returns Map<string, RecoveryStatus> Recovery status map\r\n   */\r\n  public getRecoveryStatus(): Map<string, RecoveryStatus> {\r\n    return new Map(this.recoveryStatus);\r\n  }\r\n\r\n  /**\r\n   * Get recovery status for a specific service\r\n   * \r\n   * @param serviceName Service name\r\n   * @returns RecoveryStatus | null Recovery status\r\n   */\r\n  public getServiceRecoveryStatus(serviceName: string): RecoveryStatus | null {\r\n    return this.recoveryStatus.get(serviceName) || null;\r\n  }\r\n\r\n  /**\r\n   * Get manager status\r\n   * \r\n   * @returns Object containing status information\r\n   */\r\n  public getStatus(): {\r\n    isMonitoring: boolean;\r\n    servicesCount: number;\r\n    activeServices: number;\r\n    failedServices: number;\r\n    totalRestarts: number;\r\n    isShuttingDown: boolean;\r\n    timestamp: number;\r\n  } {\r\n    const activeServices = Array.from(this.recoveryStatus.values())\r\n      .filter(status => status.status === 'running').length;\r\n    \r\n    const failedServices = Array.from(this.recoveryStatus.values())\r\n      .filter(status => status.status === 'failed').length;\r\n    \r\n    const totalRestarts = Array.from(this.recoveryStatus.values())\r\n      .reduce((sum, status) => sum + status.restartCount, 0);\r\n\r\n    return {\r\n      isMonitoring: this.monitoringInterval !== null,\r\n      servicesCount: this.services.size,\r\n      activeServices,\r\n      failedServices,\r\n      totalRestarts,\r\n      isShuttingDown: this.isShuttingDown,\r\n      timestamp: Date.now()\r\n    };\r\n  }\r\n}\r\n\r\n// =============================================================================\r\n// AUTO-RESTART AND RECOVERY SYSTEM NOTES\r\n// =============================================================================\r\n// 1. Systemd service file generation for automatic startup\r\n// 2. Comprehensive failure detection and health monitoring\r\n// 3. Automatic service recovery with exponential backoff\r\n// 4. Graceful shutdown procedures with position closure\r\n// 5. Dependency management for proper service startup order\r\n// 6. Resource monitoring and automatic restart on threshold breach\r\n// 7. Log monitoring for error pattern detection\r\n// 8. Comprehensive audit logging for all recovery actions\r\n// =============================================================================\r\n"],"version":3}