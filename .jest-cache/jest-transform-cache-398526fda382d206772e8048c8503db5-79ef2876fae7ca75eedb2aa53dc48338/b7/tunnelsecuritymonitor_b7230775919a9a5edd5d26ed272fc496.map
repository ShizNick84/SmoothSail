{"version":3,"names":["cov_j673vc7wm","actualCoverage","s","events_1","require","crypto_1","ThreatLevel","f","b","exports","SecurityEventType","TunnelSecurityMonitor","EventEmitter","logger","tunnelManager","encryptionService","config","securityEvents","trafficAnalysis","intrusionPatterns","securityMetrics","monitoringIntervals","isMonitoring","constructor","Map","enableTrafficMonitoring","enableIntrusionDetection","enableDataIntegrityChecking","trafficAnalysisInterval","maxAnomalyScore","enableAutoResponse","threatResponseTimeout","eventRetentionPeriod","totalEvents","eventsByType","eventsByThreatLevel","averageAnomalyScore","integrityViolations","resolvedEvents","activeThreats","lastSecurityScan","Date","systemSecurityScore","initializeIntrusionPatterns","setupEventListeners","info","startMonitoring","warn","connections","getAllConnections","connection","startMonitoringConnection","id","startPeriodicSecurityScans","emit","stopMonitoring","connectionId","interval","entries","clearInterval","delete","has","debug","set","setInterval","analyzeTraffic","error","setTimeout","performSecurityScan","stopMonitoringConnection","get","reportSecurityEvent","type","threatLevel","description","metadata","event","generateEventId","timestamp","resolved","responseActions","updateSecurityMetrics","triggerAutomaticResponse","resolveSecurityEvent","eventId","resolvedAt","Math","max","getSecurityEvents","limit","events","Array","from","values","filter","sort","a","getTime","slice","getTrafficAnalysis","analysis","getSecurityMetrics","getConnection","checkConnectionIntegrity","detectIntrusions","checkDataIntegrity","ENCRYPTION_FAILURE","HIGH","Error","message","String","stack","on","CONNECTION_TAMPERING","MEDIUM","name","pattern","responseAction","CRITICAL","bytesIn","floor","random","bytesOut","packetsIn","packetsOut","suspiciousPatterns","anomalyScore","encryptionIntegrity","dataIntegrityHash","calculateDataIntegrityHash","detectSuspiciousPatterns","TRAFFIC_ANOMALY","analysisHistory","push","maxHistorySize","length","splice","updateAnomalyMetrics","process","killed","processKilled","localPort","getuid","UNAUTHORIZED_ACCESS","logEntries","getRecentLogEntries","logEntry","test","SUSPICIOUS_TRAFFIC","currentHash","previousAnalysis","hashDifference","calculateHashDifference","DATA_INTEGRITY_VIOLATION","previousHash","difference","patterns","packetRatio","data","JSON","stringify","state","now","createHash","update","digest","hash1","hash2","differences","i","disconnectTunnel","LOW","typeCount","threatCount","calculateSystemSecurityScore","allAnalysis","flat","totalScore","reduce","sum","score","criticalEvents","min","toString","substr","cleanup","cutoffTime","clear"],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\tunnel-security-monitor.ts"],"sourcesContent":["import { EventEmitter } from 'events';\r\nimport { createHash, createHmac } from 'crypto';\r\nimport { Logger } from '../core/logging/logger';\r\nimport { SSHTunnelManager, TunnelConnection } from './ssh-tunnel-manager';\r\nimport { EncryptionService } from '../security/encryption-service';\r\n\r\n/**\r\n * Security threat levels\r\n */\r\nexport enum ThreatLevel {\r\n  LOW = 'LOW',\r\n  MEDIUM = 'MEDIUM',\r\n  HIGH = 'HIGH',\r\n  CRITICAL = 'CRITICAL'\r\n}\r\n\r\n/**\r\n * Security event types\r\n */\r\nexport enum SecurityEventType {\r\n  UNAUTHORIZED_ACCESS = 'UNAUTHORIZED_ACCESS',\r\n  SUSPICIOUS_TRAFFIC = 'SUSPICIOUS_TRAFFIC',\r\n  TUNNEL_HIJACK_ATTEMPT = 'TUNNEL_HIJACK_ATTEMPT',\r\n  DATA_INTEGRITY_VIOLATION = 'DATA_INTEGRITY_VIOLATION',\r\n  ENCRYPTION_FAILURE = 'ENCRYPTION_FAILURE',\r\n  AUTHENTICATION_FAILURE = 'AUTHENTICATION_FAILURE',\r\n  TRAFFIC_ANOMALY = 'TRAFFIC_ANOMALY',\r\n  CONNECTION_TAMPERING = 'CONNECTION_TAMPERING'\r\n}\r\n\r\n/**\r\n * Security event information\r\n */\r\nexport interface SecurityEvent {\r\n  id: string;\r\n  timestamp: Date;\r\n  connectionId: string;\r\n  type: SecurityEventType;\r\n  threatLevel: ThreatLevel;\r\n  description: string;\r\n  sourceIP?: string;\r\n  targetIP?: string;\r\n  dataSize?: number;\r\n  metadata: Record<string, any>;\r\n  resolved: boolean;\r\n  resolvedAt?: Date;\r\n  responseActions: string[];\r\n}\r\n\r\n/**\r\n * Traffic analysis result\r\n */\r\nexport interface TrafficAnalysis {\r\n  connectionId: string;\r\n  timestamp: Date;\r\n  bytesIn: number;\r\n  bytesOut: number;\r\n  packetsIn: number;\r\n  packetsOut: number;\r\n  suspiciousPatterns: string[];\r\n  anomalyScore: number; // 0-100\r\n  encryptionIntegrity: boolean;\r\n  dataIntegrityHash: string;\r\n}\r\n\r\n/**\r\n * Security monitoring configuration\r\n */\r\nexport interface SecurityMonitorConfig {\r\n  /** Enable traffic monitoring */\r\n  enableTrafficMonitoring: boolean;\r\n  /** Enable intrusion detection */\r\n  enableIntrusionDetection: boolean;\r\n  /** Enable data integrity checking */\r\n  enableDataIntegrityChecking: boolean;\r\n  /** Traffic analysis interval in milliseconds */\r\n  trafficAnalysisInterval: number;\r\n  /** Maximum allowed traffic anomaly score */\r\n  maxAnomalyScore: number;\r\n  /** Enable automatic threat response */\r\n  enableAutoResponse: boolean;\r\n  /** Threat response timeout in milliseconds */\r\n  threatResponseTimeout: number;\r\n  /** Security event retention period in milliseconds */\r\n  eventRetentionPeriod: number;\r\n}\r\n\r\n/**\r\n * Intrusion detection patterns\r\n */\r\nexport interface IntrusionPattern {\r\n  name: string;\r\n  pattern: RegExp;\r\n  threatLevel: ThreatLevel;\r\n  description: string;\r\n  responseAction: string;\r\n}\r\n\r\n/**\r\n * Security metrics\r\n */\r\nexport interface SecurityMetrics {\r\n  totalEvents: number;\r\n  eventsByType: Map<SecurityEventType, number>;\r\n  eventsByThreatLevel: Map<ThreatLevel, number>;\r\n  averageAnomalyScore: number;\r\n  integrityViolations: number;\r\n  resolvedEvents: number;\r\n  activeThreats: number;\r\n  lastSecurityScan: Date;\r\n  systemSecurityScore: number; // 0-100\r\n}\r\n\r\n/**\r\n * Tunnel Security Monitor\r\n * Monitors SSH tunnel security with traffic analysis, intrusion detection, and integrity checking\r\n */\r\nexport class TunnelSecurityMonitor extends EventEmitter {\r\n  private logger: Logger;\r\n  private tunnelManager: SSHTunnelManager;\r\n  private encryptionService: EncryptionService;\r\n  private config: SecurityMonitorConfig;\r\n  private securityEvents: Map<string, SecurityEvent>;\r\n  private trafficAnalysis: Map<string, TrafficAnalysis[]>;\r\n  private intrusionPatterns: IntrusionPattern[];\r\n  private securityMetrics: SecurityMetrics;\r\n  private monitoringIntervals: Map<string, NodeJS.Timeout>;\r\n  private isMonitoring: boolean;\r\n\r\n  constructor(\r\n    logger: Logger,\r\n    tunnelManager: SSHTunnelManager,\r\n    encryptionService: EncryptionService,\r\n    config?: Partial<SecurityMonitorConfig>\r\n  ) {\r\n    super();\r\n    this.logger = logger;\r\n    this.tunnelManager = tunnelManager;\r\n    this.encryptionService = encryptionService;\r\n    this.securityEvents = new Map();\r\n    this.trafficAnalysis = new Map();\r\n    this.monitoringIntervals = new Map();\r\n    this.isMonitoring = false;\r\n\r\n    // Default configuration\r\n    this.config = {\r\n      enableTrafficMonitoring: true,\r\n      enableIntrusionDetection: true,\r\n      enableDataIntegrityChecking: true,\r\n      trafficAnalysisInterval: 30000, // 30 seconds\r\n      maxAnomalyScore: 70,\r\n      enableAutoResponse: true,\r\n      threatResponseTimeout: 10000,\r\n      eventRetentionPeriod: 7 * 24 * 60 * 60 * 1000, // 7 days\r\n      ...config\r\n    };\r\n\r\n    // Initialize security metrics\r\n    this.securityMetrics = {\r\n      totalEvents: 0,\r\n      eventsByType: new Map(),\r\n      eventsByThreatLevel: new Map(),\r\n      averageAnomalyScore: 0,\r\n      integrityViolations: 0,\r\n      resolvedEvents: 0,\r\n      activeThreats: 0,\r\n      lastSecurityScan: new Date(),\r\n      systemSecurityScore: 100\r\n    };\r\n\r\n    // Initialize intrusion detection patterns\r\n    this.initializeIntrusionPatterns();\r\n\r\n    this.setupEventListeners();\r\n    this.logger.info('Tunnel Security Monitor initialized', this.config);\r\n  }\r\n\r\n  /**\r\n   * Start security monitoring\r\n   */\r\n  startMonitoring(): void {\r\n    if (this.isMonitoring) {\r\n      this.logger.warn('Security monitoring is already running');\r\n      return;\r\n    }\r\n\r\n    this.isMonitoring = true;\r\n    this.logger.info('Starting tunnel security monitoring');\r\n\r\n    // Monitor existing connections\r\n    const connections = this.tunnelManager.getAllConnections();\r\n    for (const connection of connections) {\r\n      this.startMonitoringConnection(connection.id);\r\n    }\r\n\r\n    // Start periodic security scans\r\n    this.startPeriodicSecurityScans();\r\n\r\n    this.emit('securityMonitoringStarted');\r\n  }\r\n\r\n  /**\r\n   * Stop security monitoring\r\n   */\r\n  stopMonitoring(): void {\r\n    if (!this.isMonitoring) {\r\n      this.logger.warn('Security monitoring is not running');\r\n      return;\r\n    }\r\n\r\n    this.isMonitoring = false;\r\n    this.logger.info('Stopping tunnel security monitoring');\r\n\r\n    // Clear all monitoring intervals\r\n    for (const [connectionId, interval] of this.monitoringIntervals.entries()) {\r\n      clearInterval(interval);\r\n      this.monitoringIntervals.delete(connectionId);\r\n    }\r\n\r\n    this.emit('securityMonitoringStopped');\r\n  }\r\n\r\n  /**\r\n   * Start monitoring a specific connection\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   */\r\n  startMonitoringConnection(connectionId: string): void {\r\n    if (this.monitoringIntervals.has(connectionId)) {\r\n      this.logger.debug(`Already monitoring connection: ${connectionId}`);\r\n      return;\r\n    }\r\n\r\n    this.logger.info(`Starting security monitoring for connection: ${connectionId}`);\r\n\r\n    // Initialize traffic analysis history\r\n    this.trafficAnalysis.set(connectionId, []);\r\n\r\n    // Start periodic traffic analysis\r\n    if (this.config.enableTrafficMonitoring) {\r\n      const interval = setInterval(async () => {\r\n        try {\r\n          await this.analyzeTraffic(connectionId);\r\n        } catch (error) {\r\n          this.logger.error(`Traffic analysis failed for connection ${connectionId}`, error);\r\n        }\r\n      }, this.config.trafficAnalysisInterval);\r\n\r\n      this.monitoringIntervals.set(connectionId, interval);\r\n    }\r\n\r\n    // Perform initial security scan\r\n    setTimeout(() => this.performSecurityScan(connectionId), 1000);\r\n  }\r\n\r\n  /**\r\n   * Stop monitoring a specific connection\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   */\r\n  stopMonitoringConnection(connectionId: string): void {\r\n    const interval = this.monitoringIntervals.get(connectionId);\r\n    if (interval) {\r\n      clearInterval(interval);\r\n      this.monitoringIntervals.delete(connectionId);\r\n      this.logger.info(`Stopped security monitoring for connection: ${connectionId}`);\r\n    }\r\n\r\n    // Clean up traffic analysis data\r\n    this.trafficAnalysis.delete(connectionId);\r\n  }\r\n\r\n  /**\r\n   * Report security event\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @param type - Security event type\r\n   * @param threatLevel - Threat level\r\n   * @param description - Event description\r\n   * @param metadata - Additional metadata\r\n   */\r\n  reportSecurityEvent(\r\n    connectionId: string,\r\n    type: SecurityEventType,\r\n    threatLevel: ThreatLevel,\r\n    description: string,\r\n    metadata: Record<string, any> = {}\r\n  ): SecurityEvent {\r\n    const event: SecurityEvent = {\r\n      id: this.generateEventId(),\r\n      timestamp: new Date(),\r\n      connectionId,\r\n      type,\r\n      threatLevel,\r\n      description,\r\n      metadata,\r\n      resolved: false,\r\n      responseActions: []\r\n    };\r\n\r\n    // Store event\r\n    this.securityEvents.set(event.id, event);\r\n\r\n    // Update metrics\r\n    this.updateSecurityMetrics(event);\r\n\r\n    // Log event\r\n    this.logger.warn(`Security event detected: ${event.id}`, {\r\n      connectionId,\r\n      type,\r\n      threatLevel,\r\n      description\r\n    });\r\n\r\n    // Emit event\r\n    this.emit('securityEvent', event);\r\n\r\n    // Trigger automatic response if enabled\r\n    if (this.config.enableAutoResponse) {\r\n      this.triggerAutomaticResponse(event);\r\n    }\r\n\r\n    return event;\r\n  }\r\n\r\n  /**\r\n   * Resolve security event\r\n   * \r\n   * @param eventId - Event identifier\r\n   * @param responseActions - Actions taken to resolve the event\r\n   */\r\n  resolveSecurityEvent(eventId: string, responseActions: string[]): void {\r\n    const event = this.securityEvents.get(eventId);\r\n    if (!event) {\r\n      this.logger.warn(`Security event not found: ${eventId}`);\r\n      return;\r\n    }\r\n\r\n    event.resolved = true;\r\n    event.resolvedAt = new Date();\r\n    event.responseActions = responseActions;\r\n\r\n    this.securityMetrics.resolvedEvents++;\r\n    this.securityMetrics.activeThreats = Math.max(0, this.securityMetrics.activeThreats - 1);\r\n\r\n    this.logger.info(`Security event resolved: ${eventId}`, { responseActions });\r\n    this.emit('securityEventResolved', event);\r\n  }\r\n\r\n  /**\r\n   * Get security events\r\n   * \r\n   * @param connectionId - Optional connection filter\r\n   * @param threatLevel - Optional threat level filter\r\n   * @param limit - Maximum number of events to return\r\n   * @returns Array of security events\r\n   */\r\n  getSecurityEvents(\r\n    connectionId?: string,\r\n    threatLevel?: ThreatLevel,\r\n    limit?: number\r\n  ): SecurityEvent[] {\r\n    let events = Array.from(this.securityEvents.values());\r\n\r\n    // Apply filters\r\n    if (connectionId) {\r\n      events = events.filter(event => event.connectionId === connectionId);\r\n    }\r\n\r\n    if (threatLevel) {\r\n      events = events.filter(event => event.threatLevel === threatLevel);\r\n    }\r\n\r\n    // Sort by timestamp (newest first)\r\n    events.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\r\n\r\n    // Apply limit\r\n    if (limit) {\r\n      events = events.slice(0, limit);\r\n    }\r\n\r\n    return events;\r\n  }\r\n\r\n  /**\r\n   * Get traffic analysis data\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @param limit - Maximum number of analysis entries to return\r\n   * @returns Array of traffic analysis results\r\n   */\r\n  getTrafficAnalysis(connectionId: string, limit?: number): TrafficAnalysis[] {\r\n    const analysis = this.trafficAnalysis.get(connectionId) || [];\r\n    return limit ? analysis.slice(-limit) : [...analysis];\r\n  }\r\n\r\n  /**\r\n   * Get security metrics\r\n   * \r\n   * @returns Current security metrics\r\n   */\r\n  getSecurityMetrics(): SecurityMetrics {\r\n    return { ...this.securityMetrics };\r\n  }\r\n\r\n  /**\r\n   * Perform comprehensive security scan\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   */\r\n  async performSecurityScan(connectionId: string): Promise<void> {\r\n    const connection = this.tunnelManager.getConnection(connectionId);\r\n    if (!connection) {\r\n      this.logger.warn(`Connection not found for security scan: ${connectionId}`);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      this.logger.debug(`Performing security scan for connection: ${connectionId}`);\r\n\r\n      // Check connection integrity\r\n      await this.checkConnectionIntegrity(connection);\r\n\r\n      // Analyze traffic patterns\r\n      if (this.config.enableTrafficMonitoring) {\r\n        await this.analyzeTraffic(connectionId);\r\n      }\r\n\r\n      // Check for intrusion attempts\r\n      if (this.config.enableIntrusionDetection) {\r\n        await this.detectIntrusions(connection);\r\n      }\r\n\r\n      // Verify data integrity\r\n      if (this.config.enableDataIntegrityChecking) {\r\n        await this.checkDataIntegrity(connection);\r\n      }\r\n\r\n      this.securityMetrics.lastSecurityScan = new Date();\r\n\r\n    } catch (error) {\r\n      this.logger.error(`Security scan failed for connection ${connectionId}`, error);\r\n      \r\n      this.reportSecurityEvent(\r\n        connectionId,\r\n        SecurityEventType.ENCRYPTION_FAILURE,\r\n        ThreatLevel.HIGH,\r\n        `Security scan failed: ${error instanceof Error ? error.message : String(error)}`,\r\n        { error: error instanceof Error ? error.stack : String(error) }\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Setup event listeners\r\n   */\r\n  private setupEventListeners(): void {\r\n    // Listen for new tunnel connections\r\n    this.tunnelManager.on('tunnelConnected', (connection) => {\r\n      if (this.isMonitoring) {\r\n        this.startMonitoringConnection(connection.id);\r\n      }\r\n    });\r\n\r\n    // Listen for tunnel disconnections\r\n    this.tunnelManager.on('tunnelDisconnected', (connection) => {\r\n      this.stopMonitoringConnection(connection.id);\r\n    });\r\n\r\n    // Listen for tunnel errors (potential security issues)\r\n    this.tunnelManager.on('tunnelError', (connection, error) => {\r\n      this.reportSecurityEvent(\r\n        connection.id,\r\n        SecurityEventType.CONNECTION_TAMPERING,\r\n        ThreatLevel.MEDIUM,\r\n        `Tunnel error detected: ${error.message}`,\r\n        { error: error.stack }\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Initialize intrusion detection patterns\r\n   */\r\n  private initializeIntrusionPatterns(): void {\r\n    this.intrusionPatterns = [\r\n      {\r\n        name: 'Port Scanning',\r\n        pattern: /(?:nmap|masscan|zmap)/i,\r\n        threatLevel: ThreatLevel.MEDIUM,\r\n        description: 'Port scanning activity detected',\r\n        responseAction: 'Block source IP'\r\n      },\r\n      {\r\n        name: 'SQL Injection',\r\n        pattern: /(?:union|select|insert|update|delete|drop|create|alter)\\s+/i,\r\n        threatLevel: ThreatLevel.HIGH,\r\n        description: 'SQL injection attempt detected',\r\n        responseAction: 'Block connection and alert'\r\n      },\r\n      {\r\n        name: 'SSH Brute Force',\r\n        pattern: /(?:ssh|sshd).*(?:failed|invalid|authentication)/i,\r\n        threatLevel: ThreatLevel.HIGH,\r\n        description: 'SSH brute force attack detected',\r\n        responseAction: 'Implement rate limiting'\r\n      },\r\n      {\r\n        name: 'Malware Signature',\r\n        pattern: /(?:malware|virus|trojan|backdoor|rootkit)/i,\r\n        threatLevel: ThreatLevel.CRITICAL,\r\n        description: 'Malware signature detected',\r\n        responseAction: 'Immediate connection termination'\r\n      },\r\n      {\r\n        name: 'Data Exfiltration',\r\n        pattern: /(?:wget|curl|nc|netcat).*(?:http|ftp|tcp)/i,\r\n        threatLevel: ThreatLevel.HIGH,\r\n        description: 'Potential data exfiltration detected',\r\n        responseAction: 'Monitor and analyze traffic'\r\n      }\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Analyze traffic for security threats\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   */\r\n  private async analyzeTraffic(connectionId: string): Promise<void> {\r\n    const connection = this.tunnelManager.getConnection(connectionId);\r\n    if (!connection) return;\r\n\r\n    try {\r\n      // Simulate traffic analysis (in real implementation, this would analyze actual network traffic)\r\n      const analysis: TrafficAnalysis = {\r\n        connectionId,\r\n        timestamp: new Date(),\r\n        bytesIn: Math.floor(Math.random() * 10000),\r\n        bytesOut: Math.floor(Math.random() * 10000),\r\n        packetsIn: Math.floor(Math.random() * 100),\r\n        packetsOut: Math.floor(Math.random() * 100),\r\n        suspiciousPatterns: [],\r\n        anomalyScore: Math.floor(Math.random() * 100),\r\n        encryptionIntegrity: true,\r\n        dataIntegrityHash: this.calculateDataIntegrityHash(connectionId)\r\n      };\r\n\r\n      // Check for suspicious patterns\r\n      analysis.suspiciousPatterns = this.detectSuspiciousPatterns(analysis);\r\n\r\n      // Check anomaly score\r\n      if (analysis.anomalyScore > this.config.maxAnomalyScore) {\r\n        this.reportSecurityEvent(\r\n          connectionId,\r\n          SecurityEventType.TRAFFIC_ANOMALY,\r\n          analysis.anomalyScore > 90 ? ThreatLevel.HIGH : ThreatLevel.MEDIUM,\r\n          `High traffic anomaly score: ${analysis.anomalyScore}`,\r\n          { analysis }\r\n        );\r\n      }\r\n\r\n      // Store analysis\r\n      const analysisHistory = this.trafficAnalysis.get(connectionId) || [];\r\n      analysisHistory.push(analysis);\r\n\r\n      // Limit history size\r\n      const maxHistorySize = 1000;\r\n      if (analysisHistory.length > maxHistorySize) {\r\n        analysisHistory.splice(0, analysisHistory.length - maxHistorySize);\r\n      }\r\n\r\n      this.trafficAnalysis.set(connectionId, analysisHistory);\r\n\r\n      // Update metrics\r\n      this.updateAnomalyMetrics(analysis);\r\n\r\n    } catch (error) {\r\n      this.logger.error(`Traffic analysis failed for connection ${connectionId}`, error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check connection integrity\r\n   * \r\n   * @param connection - Tunnel connection\r\n   */\r\n  private async checkConnectionIntegrity(connection: TunnelConnection): Promise<void> {\r\n    try {\r\n      // Verify connection state\r\n      if (connection.process && connection.process.killed) {\r\n        this.reportSecurityEvent(\r\n          connection.id,\r\n          SecurityEventType.CONNECTION_TAMPERING,\r\n          ThreatLevel.HIGH,\r\n          'Connection process was terminated unexpectedly',\r\n          { processKilled: true }\r\n        );\r\n      }\r\n\r\n      // Check for unusual connection parameters\r\n      if (connection.config.localPort < 1024 && process.getuid && process.getuid() !== 0) {\r\n        this.reportSecurityEvent(\r\n          connection.id,\r\n          SecurityEventType.UNAUTHORIZED_ACCESS,\r\n          ThreatLevel.MEDIUM,\r\n          'Privileged port usage without root access',\r\n          { localPort: connection.config.localPort }\r\n        );\r\n      }\r\n\r\n    } catch (error) {\r\n      this.logger.error(`Connection integrity check failed for ${connection.id}`, error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Detect intrusion attempts\r\n   * \r\n   * @param connection - Tunnel connection\r\n   */\r\n  private async detectIntrusions(connection: TunnelConnection): Promise<void> {\r\n    try {\r\n      // Simulate log analysis (in real implementation, this would analyze actual logs)\r\n      const logEntries = this.getRecentLogEntries(connection.id);\r\n\r\n      for (const logEntry of logEntries) {\r\n        for (const pattern of this.intrusionPatterns) {\r\n          if (pattern.pattern.test(logEntry)) {\r\n            this.reportSecurityEvent(\r\n              connection.id,\r\n              SecurityEventType.SUSPICIOUS_TRAFFIC,\r\n              pattern.threatLevel,\r\n              pattern.description,\r\n              {\r\n                pattern: pattern.name,\r\n                logEntry,\r\n                responseAction: pattern.responseAction\r\n              }\r\n            );\r\n          }\r\n        }\r\n      }\r\n\r\n    } catch (error) {\r\n      this.logger.error(`Intrusion detection failed for connection ${connection.id}`, error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check data integrity\r\n   * \r\n   * @param connection - Tunnel connection\r\n   */\r\n  private async checkDataIntegrity(connection: TunnelConnection): Promise<void> {\r\n    try {\r\n      // Calculate current data integrity hash\r\n      const currentHash = this.calculateDataIntegrityHash(connection.id);\r\n      \r\n      // Get previous hash from traffic analysis\r\n      const analysisHistory = this.trafficAnalysis.get(connection.id) || [];\r\n      const previousAnalysis = analysisHistory[analysisHistory.length - 1];\r\n\r\n      if (previousAnalysis && previousAnalysis.dataIntegrityHash !== currentHash) {\r\n        // Check if the difference is significant\r\n        const hashDifference = this.calculateHashDifference(previousAnalysis.dataIntegrityHash, currentHash);\r\n        \r\n        if (hashDifference > 0.1) { // 10% threshold\r\n          this.reportSecurityEvent(\r\n            connection.id,\r\n            SecurityEventType.DATA_INTEGRITY_VIOLATION,\r\n            ThreatLevel.HIGH,\r\n            'Data integrity violation detected',\r\n            {\r\n              previousHash: previousAnalysis.dataIntegrityHash,\r\n              currentHash,\r\n              difference: hashDifference\r\n            }\r\n          );\r\n\r\n          this.securityMetrics.integrityViolations++;\r\n        }\r\n      }\r\n\r\n    } catch (error) {\r\n      this.logger.error(`Data integrity check failed for connection ${connection.id}`, error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Detect suspicious patterns in traffic analysis\r\n   * \r\n   * @param analysis - Traffic analysis data\r\n   * @returns Array of suspicious pattern names\r\n   */\r\n  private detectSuspiciousPatterns(analysis: TrafficAnalysis): string[] {\r\n    const patterns: string[] = [];\r\n\r\n    // Check for unusual traffic volume\r\n    if (analysis.bytesIn > 100000 || analysis.bytesOut > 100000) {\r\n      patterns.push('High traffic volume');\r\n    }\r\n\r\n    // Check for packet ratio anomalies\r\n    const packetRatio = analysis.packetsIn / Math.max(analysis.packetsOut, 1);\r\n    if (packetRatio > 10 || packetRatio < 0.1) {\r\n      patterns.push('Unusual packet ratio');\r\n    }\r\n\r\n    // Check for potential data exfiltration\r\n    if (analysis.bytesOut > analysis.bytesIn * 2) {\r\n      patterns.push('Potential data exfiltration');\r\n    }\r\n\r\n    return patterns;\r\n  }\r\n\r\n  /**\r\n   * Calculate data integrity hash\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @returns Data integrity hash\r\n   */\r\n  private calculateDataIntegrityHash(connectionId: string): string {\r\n    const connection = this.tunnelManager.getConnection(connectionId);\r\n    if (!connection) return '';\r\n\r\n    const data = JSON.stringify({\r\n      connectionId,\r\n      config: connection.config,\r\n      state: connection.state,\r\n      timestamp: Date.now()\r\n    });\r\n\r\n    return createHash('sha256').update(data).digest('hex');\r\n  }\r\n\r\n  /**\r\n   * Calculate hash difference percentage\r\n   * \r\n   * @param hash1 - First hash\r\n   * @param hash2 - Second hash\r\n   * @returns Difference percentage (0-1)\r\n   */\r\n  private calculateHashDifference(hash1: string, hash2: string): number {\r\n    if (hash1.length !== hash2.length) return 1;\r\n\r\n    let differences = 0;\r\n    for (let i = 0; i < hash1.length; i++) {\r\n      if (hash1[i] !== hash2[i]) {\r\n        differences++;\r\n      }\r\n    }\r\n\r\n    return differences / hash1.length;\r\n  }\r\n\r\n  /**\r\n   * Get recent log entries for analysis\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @returns Array of log entries\r\n   */\r\n  private getRecentLogEntries(connectionId: string): string[] {\r\n    // Simulate log entries (in real implementation, this would read actual logs)\r\n    return [\r\n      `SSH connection established for ${connectionId}`,\r\n      `Data transfer initiated for ${connectionId}`,\r\n      `Normal operation for ${connectionId}`,\r\n      // Add some potentially suspicious entries for testing\r\n      ...(Math.random() > 0.8 ? ['SSH authentication failed for user admin'] : []),\r\n      ...(Math.random() > 0.9 ? ['Port scan detected from 192.168.1.100'] : [])\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Trigger automatic response to security event\r\n   * \r\n   * @param event - Security event\r\n   */\r\n  private async triggerAutomaticResponse(event: SecurityEvent): Promise<void> {\r\n    try {\r\n      const responseActions: string[] = [];\r\n\r\n      switch (event.threatLevel) {\r\n        case ThreatLevel.CRITICAL:\r\n          // Immediate connection termination\r\n          await this.tunnelManager.disconnectTunnel(event.connectionId);\r\n          responseActions.push('Connection terminated');\r\n          break;\r\n\r\n        case ThreatLevel.HIGH:\r\n          // Enhanced monitoring and alerting\r\n          responseActions.push('Enhanced monitoring enabled');\r\n          this.emit('highThreatDetected', event);\r\n          break;\r\n\r\n        case ThreatLevel.MEDIUM:\r\n          // Increased logging and monitoring\r\n          responseActions.push('Increased monitoring');\r\n          break;\r\n\r\n        case ThreatLevel.LOW:\r\n          // Log and continue monitoring\r\n          responseActions.push('Logged for analysis');\r\n          break;\r\n      }\r\n\r\n      // Update event with response actions\r\n      event.responseActions = responseActions;\r\n\r\n      this.logger.info(`Automatic response triggered for event ${event.id}`, { responseActions });\r\n\r\n    } catch (error) {\r\n      this.logger.error(`Automatic response failed for event ${event.id}`, error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Start periodic security scans\r\n   */\r\n  private startPeriodicSecurityScans(): void {\r\n    // Perform security scans every 5 minutes\r\n    setInterval(() => {\r\n      const connections = this.tunnelManager.getAllConnections();\r\n      for (const connection of connections) {\r\n        this.performSecurityScan(connection.id);\r\n      }\r\n    }, 5 * 60 * 1000);\r\n  }\r\n\r\n  /**\r\n   * Update security metrics\r\n   * \r\n   * @param event - Security event\r\n   */\r\n  private updateSecurityMetrics(event: SecurityEvent): void {\r\n    this.securityMetrics.totalEvents++;\r\n    this.securityMetrics.activeThreats++;\r\n\r\n    // Update event type counts\r\n    const typeCount = this.securityMetrics.eventsByType.get(event.type) || 0;\r\n    this.securityMetrics.eventsByType.set(event.type, typeCount + 1);\r\n\r\n    // Update threat level counts\r\n    const threatCount = this.securityMetrics.eventsByThreatLevel.get(event.threatLevel) || 0;\r\n    this.securityMetrics.eventsByThreatLevel.set(event.threatLevel, threatCount + 1);\r\n\r\n    // Calculate system security score\r\n    this.calculateSystemSecurityScore();\r\n  }\r\n\r\n  /**\r\n   * Update anomaly metrics\r\n   * \r\n   * @param analysis - Traffic analysis\r\n   */\r\n  private updateAnomalyMetrics(analysis: TrafficAnalysis): void {\r\n    // Calculate running average of anomaly scores\r\n    const allAnalysis = Array.from(this.trafficAnalysis.values()).flat();\r\n    const totalScore = allAnalysis.reduce((sum, a) => sum + a.anomalyScore, 0);\r\n    this.securityMetrics.averageAnomalyScore = allAnalysis.length > 0 ? totalScore / allAnalysis.length : 0;\r\n  }\r\n\r\n  /**\r\n   * Calculate system security score\r\n   */\r\n  private calculateSystemSecurityScore(): void {\r\n    let score = 100;\r\n\r\n    // Deduct points for active threats\r\n    score -= this.securityMetrics.activeThreats * 10;\r\n\r\n    // Deduct points for high anomaly scores\r\n    if (this.securityMetrics.averageAnomalyScore > 70) {\r\n      score -= (this.securityMetrics.averageAnomalyScore - 70) * 0.5;\r\n    }\r\n\r\n    // Deduct points for integrity violations\r\n    score -= this.securityMetrics.integrityViolations * 5;\r\n\r\n    // Deduct points for critical events\r\n    const criticalEvents = this.securityMetrics.eventsByThreatLevel.get(ThreatLevel.CRITICAL) || 0;\r\n    score -= criticalEvents * 20;\r\n\r\n    this.securityMetrics.systemSecurityScore = Math.max(0, Math.min(100, score));\r\n  }\r\n\r\n  /**\r\n   * Generate unique event ID\r\n   * \r\n   * @returns Unique event identifier\r\n   */\r\n  private generateEventId(): string {\r\n    return `sec_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  /**\r\n   * Cleanup security monitor resources\r\n   */\r\n  cleanup(): void {\r\n    this.stopMonitoring();\r\n    \r\n    // Clean up old events\r\n    const cutoffTime = Date.now() - this.config.eventRetentionPeriod;\r\n    for (const [eventId, event] of this.securityEvents.entries()) {\r\n      if (event.timestamp.getTime() < cutoffTime) {\r\n        this.securityEvents.delete(eventId);\r\n      }\r\n    }\r\n\r\n    this.trafficAnalysis.clear();\r\n    this.logger.info('Tunnel security monitor cleanup completed');\r\n  }\r\n}\r\n"],"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","ignoreList":[]}