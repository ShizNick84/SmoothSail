{"version":3,"names":["cov_2cu9wf92am","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","events_1","require","logger_1","MarketAnalyzer","EventEmitter","llmEngine","isInitialized","analysisHistory","maxHistorySize","analysisCache","Map","cacheExpiryMs","ANALYSIS_PARAMS","volatility","extremelyLow","low","normal","high","extremelyHigh","sentiment","strongBullish","bullish","neutral","bearish","strongBearish","trend","strongTrend","moderateTrend","weakTrend","constructor","logger","info","initialize","isReady","Error","emit","error","analyzeMarket","marketData","sentimentData","symbol","cacheKey","timestamp","getTime","cached","getCachedAnalysis","marketAnalysis","trendAnalysis","volatilityAnalysis","marketRegime","anomalies","Promise","all","performLLMMarketAnalysis","analyzeTrends","analyzeVolatility","identifyMarketRegime","detectAnomalies","tradingRecommendation","generateTradingRecommendation","overallConfidence","calculateOverallConfidence","comprehensiveAnalysis","Date","sentimentImpact","overall","detectedAnomalies","recommendation","riskLevel","positionSizeRecommendation","positionSize","keyInsights","extractKeyInsights","riskFactors","identifyRiskFactors","opportunities","identifyOpportunities","dataQuality","assessDataQuality","cacheAnalysis","addToHistory","prompt","buildMarketAnalysisPrompt","llmResponse","getLLMAnalysis","parseLLMResponse","fallbackMarketAnalysis","price","volume","technicalIndicators","toFixed","open","toLocaleString","sma20","sma50","ema20","ema50","rsi","macd","signal","histogram","bollinger","upper","middle","lower","twitter","score","reddit","hotTopics","join","news","headlines","slice","confidence","keyFactors","recommendations","riskAssessment","timeframe","bbPosition","Math","max","min","calculateVolatilityFromBollinger","round","generateKeyFactors","generateRecommendations","generateRiskAssessment","bandWidth","factors","push","risk","abs","shortTermDirection","shortTermStrength","mediumTermDirection","mediumTermStrength","longTermDirection","longTermStrength","bullishCount","filter","d","length","shortTerm","direction","strength","mediumTerm","longTerm","keyLevels","support","resistance","close","currentVolatility","classification","expectedRange","current","historical","day7","day30","day90","regime","duration","characteristics","getRegimeCharacteristics","expectedDuration","transitionProbability","volume_sma","severity","description","impact","affectedSymbols","gapPercentage","priceDirection","sentimentDirection","confidences","reduce","sum","conf","insights","toLowerCase","replace","quality","dataAge","now","key","analysis","set","setTimeout","delete","get","getAnalysisHistory","limit","history","getMarketConditionsSummary","symbols","overallSentiment","dominantTrend","averageVolatility","warnings","shutdown","clear","exports"],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\ai\\market-analyzer.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * MARKET ANALYZER - AI-POWERED MARKET ANALYSIS ENGINE\r\n * =============================================================================\r\n * \r\n * This module implements comprehensive AI-powered market analysis using LLM\r\n * capabilities optimized for cryptocurrency trading. It provides real-time\r\n * market condition analysis, trend detection, sentiment analysis, volatility\r\n * assessment, and market regime identification.\r\n * \r\n * Key Features:\r\n * - Real-time market condition analysis using LLM\r\n * - Multi-timeframe trend detection and analysis\r\n * - Market sentiment analysis and scoring\r\n * - Volatility assessment and regime identification\r\n * - Market anomaly detection and alerts\r\n * - Integration with technical indicators and sentiment data\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport { EventEmitter } from 'events';\r\nimport { logger } from '@/core/logging/logger';\r\nimport { LLMEngine } from './llm-engine';\r\nimport type { MarketAnalysis } from './llm-engine';\r\n\r\n/**\r\n * Interface for market data input\r\n */\r\ninterface MarketDataInput {\r\n  symbol: string;\r\n  price: number;\r\n  volume: number;\r\n  timestamp: Date;\r\n  \r\n  // OHLCV data\r\n  open: number;\r\n  high: number;\r\n  low: number;\r\n  close: number;\r\n  \r\n  // Technical indicators\r\n  technicalIndicators: {\r\n    sma20: number;\r\n    sma50: number;\r\n    ema20: number;\r\n    ema50: number;\r\n    rsi: number;\r\n    macd: {\r\n      macd: number;\r\n      signal: number;\r\n      histogram: number;\r\n    };\r\n    bollinger: {\r\n      upper: number;\r\n      middle: number;\r\n      lower: number;\r\n    };\r\n    volume_sma: number;\r\n  };\r\n  \r\n  // Market metrics\r\n  marketCap?: number;\r\n  dominance?: number;\r\n  fearGreedIndex?: number;\r\n}\r\n\r\n/**\r\n * Interface for sentiment data input\r\n */\r\ninterface SentimentDataInput {\r\n  twitter: {\r\n    score: number; // -100 to 100\r\n    volume: number;\r\n    influencerSentiment: number;\r\n  };\r\n  reddit: {\r\n    score: number; // -100 to 100\r\n    volume: number;\r\n    hotTopics: string[];\r\n  };\r\n  news: {\r\n    score: number; // -100 to 100\r\n    volume: number;\r\n    headlines: string[];\r\n  };\r\n  overall: number; // -100 to 100\r\n  confidence: number; // 0-100\r\n}\r\n\r\n/**\r\n * Interface for market regime classification\r\n */\r\ninterface MarketRegime {\r\n  regime: 'BULL_MARKET' | 'BEAR_MARKET' | 'SIDEWAYS' | 'ACCUMULATION' | 'DISTRIBUTION' | 'CRASH' | 'RECOVERY';\r\n  confidence: number; // 0-100\r\n  duration: number; // days in current regime\r\n  characteristics: string[];\r\n  expectedDuration: number; // expected remaining days\r\n  transitionProbability: {\r\n    [key: string]: number; // probability of transitioning to other regimes\r\n  };\r\n}\r\n\r\n/**\r\n * Interface for volatility analysis\r\n */\r\ninterface VolatilityAnalysis {\r\n  current: number; // current volatility percentage\r\n  historical: {\r\n    day7: number;\r\n    day30: number;\r\n    day90: number;\r\n  };\r\n  classification: 'EXTREMELY_LOW' | 'LOW' | 'NORMAL' | 'HIGH' | 'EXTREMELY_HIGH';\r\n  trend: 'INCREASING' | 'DECREASING' | 'STABLE';\r\n  expectedRange: {\r\n    lower: number;\r\n    upper: number;\r\n  };\r\n  riskLevel: 'LOW' | 'MEDIUM' | 'HIGH' | 'EXTREME';\r\n}\r\n\r\n/**\r\n * Interface for trend analysis\r\n */\r\ninterface TrendAnalysis {\r\n  shortTerm: { // 1-7 days\r\n    direction: 'UP' | 'DOWN' | 'SIDEWAYS';\r\n    strength: number; // 0-100\r\n    confidence: number; // 0-100\r\n  };\r\n  mediumTerm: { // 1-4 weeks\r\n    direction: 'UP' | 'DOWN' | 'SIDEWAYS';\r\n    strength: number; // 0-100\r\n    confidence: number; // 0-100\r\n  };\r\n  longTerm: { // 1-6 months\r\n    direction: 'UP' | 'DOWN' | 'SIDEWAYS';\r\n    strength: number; // 0-100\r\n    confidence: number; // 0-100\r\n  };\r\n  overall: 'BULLISH' | 'BEARISH' | 'NEUTRAL';\r\n  keyLevels: {\r\n    support: number[];\r\n    resistance: number[];\r\n  };\r\n}\r\n\r\n/**\r\n * Interface for market anomaly detection\r\n */\r\ninterface MarketAnomaly {\r\n  type: 'VOLUME_SPIKE' | 'PRICE_GAP' | 'UNUSUAL_PATTERN' | 'SENTIMENT_DIVERGENCE' | 'LIQUIDITY_ISSUE';\r\n  severity: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';\r\n  description: string;\r\n  impact: string;\r\n  recommendation: string;\r\n  confidence: number; // 0-100\r\n  timestamp: Date;\r\n  affectedSymbols: string[];\r\n}\r\n\r\n/**\r\n * Interface for comprehensive market analysis result\r\n */\r\ninterface ComprehensiveMarketAnalysis {\r\n  symbol: string;\r\n  timestamp: Date;\r\n  \r\n  // Core analysis\r\n  marketAnalysis: MarketAnalysis;\r\n  trendAnalysis: TrendAnalysis;\r\n  volatilityAnalysis: VolatilityAnalysis;\r\n  marketRegime: MarketRegime;\r\n  \r\n  // Sentiment and anomalies\r\n  sentimentImpact: number; // -100 to 100\r\n  detectedAnomalies: MarketAnomaly[];\r\n  \r\n  // Trading implications\r\n  tradingRecommendation: 'STRONG_BUY' | 'BUY' | 'HOLD' | 'SELL' | 'STRONG_SELL';\r\n  riskLevel: 'LOW' | 'MEDIUM' | 'HIGH' | 'EXTREME';\r\n  positionSizeRecommendation: number; // 0-100 percentage of portfolio\r\n  \r\n  // Key insights\r\n  keyInsights: string[];\r\n  riskFactors: string[];\r\n  opportunities: string[];\r\n  \r\n  // Confidence metrics\r\n  overallConfidence: number; // 0-100\r\n  dataQuality: number; // 0-100\r\n}\r\n\r\n/**\r\n * Market Analyzer class for AI-powered market analysis\r\n */\r\nexport class MarketAnalyzer extends EventEmitter {\r\n  private llmEngine: LLMEngine;\r\n  private isInitialized: boolean = false;\r\n  private analysisHistory: ComprehensiveMarketAnalysis[] = [];\r\n  private maxHistorySize: number = 1000;\r\n  private analysisCache: Map<string, ComprehensiveMarketAnalysis> = new Map();\r\n  private cacheExpiryMs: number = 60000; // 1 minute cache\r\n\r\n  // Analysis thresholds and parameters\r\n  private readonly ANALYSIS_PARAMS = {\r\n    volatility: {\r\n      extremelyLow: 5,\r\n      low: 15,\r\n      normal: 30,\r\n      high: 50,\r\n      extremelyHigh: 100\r\n    },\r\n    sentiment: {\r\n      strongBullish: 60,\r\n      bullish: 20,\r\n      neutral: 0,\r\n      bearish: -20,\r\n      strongBearish: -60\r\n    },\r\n    trend: {\r\n      strongTrend: 70,\r\n      moderateTrend: 40,\r\n      weakTrend: 20\r\n    }\r\n  };\r\n\r\n  constructor(llmEngine: LLMEngine) {\r\n    super();\r\n    this.llmEngine = llmEngine;\r\n\r\n    logger.info('📊 Market Analyzer initialized');\r\n  }\r\n\r\n  /**\r\n   * Initialize the market analyzer\r\n   */\r\n  public async initialize(): Promise<void> {\r\n    try {\r\n      logger.info('🚀 Initializing Market Analyzer...');\r\n\r\n      // Verify LLM engine is ready\r\n      if (!this.llmEngine.isReady()) {\r\n        throw new Error('LLM Engine is not ready');\r\n      }\r\n\r\n      this.isInitialized = true;\r\n      logger.info('✅ Market Analyzer initialized successfully');\r\n\r\n      this.emit('initialized');\r\n\r\n    } catch (error) {\r\n      logger.error('❌ Failed to initialize Market Analyzer:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Perform comprehensive market analysis\r\n   */\r\n  public async analyzeMarket(\r\n    marketData: MarketDataInput,\r\n    sentimentData?: SentimentDataInput\r\n  ): Promise<ComprehensiveMarketAnalysis> {\r\n    try {\r\n      if (!this.isInitialized) {\r\n        throw new Error('Market Analyzer not initialized');\r\n      }\r\n\r\n      logger.info(`📊 Analyzing market for ${marketData.symbol}...`);\r\n\r\n      // Check cache first\r\n      const cacheKey = `${marketData.symbol}_${marketData.timestamp.getTime()}`;\r\n      const cached = this.getCachedAnalysis(cacheKey);\r\n      if (cached) {\r\n        logger.info('📋 Returning cached analysis');\r\n        return cached;\r\n      }\r\n\r\n      // Perform individual analyses\r\n      const [\r\n        marketAnalysis,\r\n        trendAnalysis,\r\n        volatilityAnalysis,\r\n        marketRegime,\r\n        anomalies\r\n      ] = await Promise.all([\r\n        this.performLLMMarketAnalysis(marketData, sentimentData),\r\n        this.analyzeTrends(marketData),\r\n        this.analyzeVolatility(marketData),\r\n        this.identifyMarketRegime(marketData),\r\n        this.detectAnomalies(marketData, sentimentData)\r\n      ]);\r\n\r\n      // Generate trading recommendation\r\n      const tradingRecommendation = this.generateTradingRecommendation(\r\n        marketAnalysis,\r\n        trendAnalysis,\r\n        volatilityAnalysis,\r\n        sentimentData\r\n      );\r\n\r\n      // Calculate overall metrics\r\n      const overallConfidence = this.calculateOverallConfidence(\r\n        marketAnalysis,\r\n        trendAnalysis,\r\n        volatilityAnalysis\r\n      );\r\n\r\n      // Compile comprehensive analysis\r\n      const comprehensiveAnalysis: ComprehensiveMarketAnalysis = {\r\n        symbol: marketData.symbol,\r\n        timestamp: new Date(),\r\n        \r\n        marketAnalysis,\r\n        trendAnalysis,\r\n        volatilityAnalysis,\r\n        marketRegime,\r\n        \r\n        sentimentImpact: sentimentData?.overall || 0,\r\n        detectedAnomalies: anomalies,\r\n        \r\n        tradingRecommendation: tradingRecommendation.recommendation,\r\n        riskLevel: tradingRecommendation.riskLevel,\r\n        positionSizeRecommendation: tradingRecommendation.positionSize,\r\n        \r\n        keyInsights: this.extractKeyInsights(marketAnalysis, trendAnalysis, volatilityAnalysis),\r\n        riskFactors: this.identifyRiskFactors(marketAnalysis, volatilityAnalysis, anomalies),\r\n        opportunities: this.identifyOpportunities(marketAnalysis, trendAnalysis, sentimentData),\r\n        \r\n        overallConfidence,\r\n        dataQuality: this.assessDataQuality(marketData, sentimentData)\r\n      };\r\n\r\n      // Cache the result\r\n      this.cacheAnalysis(cacheKey, comprehensiveAnalysis);\r\n\r\n      // Add to history\r\n      this.addToHistory(comprehensiveAnalysis);\r\n\r\n      logger.info(`✅ Market analysis completed for ${marketData.symbol}`);\r\n      \r\n      this.emit('analysisCompleted', comprehensiveAnalysis);\r\n\r\n      return comprehensiveAnalysis;\r\n\r\n    } catch (error) {\r\n      logger.error('❌ Error in market analysis:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Perform LLM-powered market analysis\r\n   */\r\n  private async performLLMMarketAnalysis(\r\n    marketData: MarketDataInput,\r\n    sentimentData?: SentimentDataInput\r\n  ): Promise<MarketAnalysis> {\r\n    try {\r\n      // Construct analysis prompt\r\n      const prompt = this.buildMarketAnalysisPrompt(marketData, sentimentData);\r\n\r\n      // Get LLM analysis (this would use actual LLM in production)\r\n      const llmResponse = await this.getLLMAnalysis(prompt);\r\n\r\n      // Parse and structure the response\r\n      const marketAnalysis = this.parseLLMResponse(llmResponse, marketData);\r\n\r\n      return marketAnalysis;\r\n\r\n    } catch (error) {\r\n      logger.error('❌ Error in LLM market analysis:', error);\r\n      \r\n      // Fallback to rule-based analysis\r\n      return this.fallbackMarketAnalysis(marketData, sentimentData);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Build comprehensive market analysis prompt for LLM\r\n   */\r\n  private buildMarketAnalysisPrompt(\r\n    marketData: MarketDataInput,\r\n    sentimentData?: SentimentDataInput\r\n  ): string {\r\n    const { symbol, price, volume, technicalIndicators } = marketData;\r\n    \r\n    let prompt = `Analyze the current market conditions for ${symbol}:\r\n\r\nPRICE DATA:\r\n- Current Price: $${price.toFixed(2)}\r\n- Open: $${marketData.open.toFixed(2)}\r\n- High: $${marketData.high.toFixed(2)}\r\n- Low: $${marketData.low.toFixed(2)}\r\n- Volume: ${volume.toLocaleString()}\r\n\r\nTECHNICAL INDICATORS:\r\n- SMA20: $${technicalIndicators.sma20.toFixed(2)}\r\n- SMA50: $${technicalIndicators.sma50.toFixed(2)}\r\n- EMA20: $${technicalIndicators.ema20.toFixed(2)}\r\n- EMA50: $${technicalIndicators.ema50.toFixed(2)}\r\n- RSI: ${technicalIndicators.rsi.toFixed(2)}\r\n- MACD: ${technicalIndicators.macd.macd.toFixed(4)}\r\n- MACD Signal: ${technicalIndicators.macd.signal.toFixed(4)}\r\n- MACD Histogram: ${technicalIndicators.macd.histogram.toFixed(4)}\r\n- Bollinger Upper: $${technicalIndicators.bollinger.upper.toFixed(2)}\r\n- Bollinger Middle: $${technicalIndicators.bollinger.middle.toFixed(2)}\r\n- Bollinger Lower: $${technicalIndicators.bollinger.lower.toFixed(2)}`;\r\n\r\n    if (sentimentData) {\r\n      prompt += `\r\n\r\nSENTIMENT DATA:\r\n- Twitter Sentiment: ${sentimentData.twitter.score} (Volume: ${sentimentData.twitter.volume})\r\n- Reddit Sentiment: ${sentimentData.reddit.score} (Hot Topics: ${sentimentData.reddit.hotTopics.join(', ')})\r\n- News Sentiment: ${sentimentData.news.score} (Headlines: ${sentimentData.news.headlines.slice(0, 3).join('; ')})\r\n- Overall Sentiment: ${sentimentData.overall} (Confidence: ${sentimentData.confidence}%)`;\r\n    }\r\n\r\n    prompt += `\r\n\r\nPlease provide a comprehensive analysis including:\r\n1. Overall market sentiment (-100 to 100)\r\n2. Volatility assessment (LOW/MEDIUM/HIGH)\r\n3. Trend direction (BULLISH/BEARISH/SIDEWAYS)\r\n4. Confidence level (0-100)\r\n5. Key factors influencing the market\r\n6. Specific recommendations for traders\r\n7. Risk assessment and key concerns\r\n\r\nFocus on actionable insights for cryptocurrency trading with emphasis on capital preservation and profit maximization.`;\r\n\r\n    return prompt;\r\n  }\r\n\r\n  /**\r\n   * Get LLM analysis (mock implementation)\r\n   */\r\n  private async getLLMAnalysis(prompt: string): Promise<string> {\r\n    // In production, this would call the actual LLM\r\n    // For now, return a mock response\r\n    return `Based on the current market data analysis:\r\n\r\nThe market sentiment appears moderately bullish at +35, driven by positive technical indicators and improving volume patterns. The RSI at current levels suggests momentum without being overbought, while MACD shows bullish crossover potential.\r\n\r\nVolatility is assessed as MEDIUM, with price action showing controlled movements within established ranges. The Bollinger Bands indicate normal volatility conditions with potential for breakout.\r\n\r\nTrend analysis reveals BULLISH bias in the short to medium term, supported by price action above key moving averages and increasing volume confirmation.\r\n\r\nKey factors:\r\n- Technical indicators align bullishly\r\n- Volume confirms price movements\r\n- Support levels holding strong\r\n- Sentiment improving gradually\r\n\r\nRecommendations:\r\n- Consider gradual position building\r\n- Monitor volume for confirmation\r\n- Set stop losses at key support levels\r\n- Target resistance levels for profit taking\r\n\r\nRisk factors:\r\n- Market volatility remains present\r\n- External factors could impact sentiment\r\n- Technical levels need confirmation\r\n\r\nConfidence level: 75%`;\r\n  }\r\n\r\n  /**\r\n   * Parse LLM response into structured market analysis\r\n   */\r\n  private parseLLMResponse(llmResponse: string, marketData: MarketDataInput): MarketAnalysis {\r\n    // In production, this would use sophisticated NLP parsing\r\n    // For now, create a structured response based on mock data\r\n    \r\n    return {\r\n      sentiment: 35, // Extracted from response\r\n      volatility: 'MEDIUM',\r\n      trend: 'BULLISH',\r\n      confidence: 75,\r\n      keyFactors: [\r\n        'Technical indicators align bullishly',\r\n        'Volume confirms price movements',\r\n        'Support levels holding strong',\r\n        'Sentiment improving gradually'\r\n      ],\r\n      recommendations: [\r\n        'Consider gradual position building',\r\n        'Monitor volume for confirmation',\r\n        'Set stop losses at key support levels',\r\n        'Target resistance levels for profit taking'\r\n      ],\r\n      riskAssessment: 'Market volatility remains present with external factors potentially impacting sentiment',\r\n      timeframe: '1-7 days',\r\n      timestamp: new Date()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Fallback market analysis using rule-based approach\r\n   */\r\n  private fallbackMarketAnalysis(\r\n    marketData: MarketDataInput,\r\n    sentimentData?: SentimentDataInput\r\n  ): MarketAnalysis {\r\n    logger.info('📊 Using fallback rule-based market analysis');\r\n\r\n    const { technicalIndicators, price } = marketData;\r\n    \r\n    // Calculate sentiment based on technical indicators\r\n    let sentiment = 0;\r\n    \r\n    // RSI contribution\r\n    if (technicalIndicators.rsi > 70) sentiment -= 20; // Overbought\r\n    else if (technicalIndicators.rsi < 30) sentiment += 20; // Oversold\r\n    else if (technicalIndicators.rsi > 50) sentiment += 10; // Bullish momentum\r\n    else sentiment -= 10; // Bearish momentum\r\n    \r\n    // Moving average contribution\r\n    if (price > technicalIndicators.ema20) sentiment += 15;\r\n    if (price > technicalIndicators.ema50) sentiment += 15;\r\n    if (technicalIndicators.ema20 > technicalIndicators.ema50) sentiment += 10;\r\n    \r\n    // MACD contribution\r\n    if (technicalIndicators.macd.macd > technicalIndicators.macd.signal) sentiment += 10;\r\n    if (technicalIndicators.macd.histogram > 0) sentiment += 5;\r\n    \r\n    // Bollinger Bands contribution\r\n    const bbPosition = (price - technicalIndicators.bollinger.lower) / \r\n                      (technicalIndicators.bollinger.upper - technicalIndicators.bollinger.lower);\r\n    if (bbPosition > 0.8) sentiment -= 10; // Near upper band\r\n    else if (bbPosition < 0.2) sentiment += 10; // Near lower band\r\n    \r\n    // Add sentiment data if available\r\n    if (sentimentData) {\r\n      sentiment += sentimentData.overall * 0.3; // 30% weight to sentiment\r\n    }\r\n    \r\n    // Clamp sentiment to -100 to 100 range\r\n    sentiment = Math.max(-100, Math.min(100, sentiment));\r\n    \r\n    // Determine volatility\r\n    const volatility = this.calculateVolatilityFromBollinger(technicalIndicators.bollinger, price);\r\n    \r\n    // Determine trend\r\n    let trend: 'BULLISH' | 'BEARISH' | 'SIDEWAYS' = 'SIDEWAYS';\r\n    if (sentiment > 20) trend = 'BULLISH';\r\n    else if (sentiment < -20) trend = 'BEARISH';\r\n    \r\n    return {\r\n      sentiment: Math.round(sentiment),\r\n      volatility,\r\n      trend,\r\n      confidence: 65, // Lower confidence for rule-based analysis\r\n      keyFactors: this.generateKeyFactors(technicalIndicators, price),\r\n      recommendations: this.generateRecommendations(sentiment, volatility, trend),\r\n      riskAssessment: this.generateRiskAssessment(volatility, sentiment),\r\n      timeframe: '1-7 days',\r\n      timestamp: new Date()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculate volatility from Bollinger Bands\r\n   */\r\n  private calculateVolatilityFromBollinger(bollinger: any, price: number): 'LOW' | 'MEDIUM' | 'HIGH' {\r\n    const bandWidth = (bollinger.upper - bollinger.lower) / bollinger.middle;\r\n    \r\n    if (bandWidth < 0.05) return 'LOW';\r\n    if (bandWidth > 0.15) return 'HIGH';\r\n    return 'MEDIUM';\r\n  }\r\n\r\n  /**\r\n   * Generate key factors based on technical analysis\r\n   */\r\n  private generateKeyFactors(technicalIndicators: any, price: number): string[] {\r\n    const factors: string[] = [];\r\n    \r\n    if (price > technicalIndicators.ema20) {\r\n      factors.push('Price above short-term moving average');\r\n    }\r\n    \r\n    if (technicalIndicators.rsi > 70) {\r\n      factors.push('RSI indicates overbought conditions');\r\n    } else if (technicalIndicators.rsi < 30) {\r\n      factors.push('RSI indicates oversold conditions');\r\n    }\r\n    \r\n    if (technicalIndicators.macd.macd > technicalIndicators.macd.signal) {\r\n      factors.push('MACD showing bullish crossover');\r\n    }\r\n    \r\n    return factors;\r\n  }\r\n\r\n  /**\r\n   * Generate recommendations based on analysis\r\n   */\r\n  private generateRecommendations(sentiment: number, volatility: string, trend: string): string[] {\r\n    const recommendations: string[] = [];\r\n    \r\n    if (trend === 'BULLISH' && sentiment > 30) {\r\n      recommendations.push('Consider long positions with proper risk management');\r\n    } else if (trend === 'BEARISH' && sentiment < -30) {\r\n      recommendations.push('Consider short positions or exit long positions');\r\n    } else {\r\n      recommendations.push('Maintain current positions and wait for clearer signals');\r\n    }\r\n    \r\n    if (volatility === 'HIGH') {\r\n      recommendations.push('Use smaller position sizes due to high volatility');\r\n    }\r\n    \r\n    recommendations.push('Set appropriate stop losses based on volatility');\r\n    \r\n    return recommendations;\r\n  }\r\n\r\n  /**\r\n   * Generate risk assessment\r\n   */\r\n  private generateRiskAssessment(volatility: string, sentiment: number): string {\r\n    let risk = 'Moderate risk conditions';\r\n    \r\n    if (volatility === 'HIGH') {\r\n      risk = 'High volatility increases trading risk';\r\n    } else if (volatility === 'LOW') {\r\n      risk = 'Low volatility suggests stable conditions';\r\n    }\r\n    \r\n    if (Math.abs(sentiment) > 70) {\r\n      risk += '. Extreme sentiment levels suggest potential reversal risk';\r\n    }\r\n    \r\n    return risk;\r\n  }\r\n\r\n  /**\r\n   * Analyze trends across multiple timeframes\r\n   */\r\n  private async analyzeTrends(marketData: MarketDataInput): Promise<TrendAnalysis> {\r\n    const { price, technicalIndicators } = marketData;\r\n    \r\n    // Short-term trend (based on EMA20 vs price)\r\n    const shortTermDirection = price > technicalIndicators.ema20 ? 'UP' : 'DOWN';\r\n    const shortTermStrength = Math.abs(((price - technicalIndicators.ema20) / technicalIndicators.ema20) * 100);\r\n    \r\n    // Medium-term trend (based on EMA20 vs EMA50)\r\n    const mediumTermDirection = technicalIndicators.ema20 > technicalIndicators.ema50 ? 'UP' : 'DOWN';\r\n    const mediumTermStrength = Math.abs(((technicalIndicators.ema20 - technicalIndicators.ema50) / technicalIndicators.ema50) * 100);\r\n    \r\n    // Long-term trend (based on SMA50 vs price)\r\n    const longTermDirection = price > technicalIndicators.sma50 ? 'UP' : 'DOWN';\r\n    const longTermStrength = Math.abs(((price - technicalIndicators.sma50) / technicalIndicators.sma50) * 100);\r\n    \r\n    // Overall trend assessment\r\n    let overall: 'BULLISH' | 'BEARISH' | 'NEUTRAL' = 'NEUTRAL';\r\n    const bullishCount = [shortTermDirection, mediumTermDirection, longTermDirection].filter(d => d === 'UP').length;\r\n    \r\n    if (bullishCount >= 2) overall = 'BULLISH';\r\n    else if (bullishCount <= 1) overall = 'BEARISH';\r\n    \r\n    return {\r\n      shortTerm: {\r\n        direction: shortTermDirection,\r\n        strength: Math.min(100, shortTermStrength * 10),\r\n        confidence: 80\r\n      },\r\n      mediumTerm: {\r\n        direction: mediumTermDirection,\r\n        strength: Math.min(100, mediumTermStrength * 10),\r\n        confidence: 75\r\n      },\r\n      longTerm: {\r\n        direction: longTermDirection,\r\n        strength: Math.min(100, longTermStrength * 10),\r\n        confidence: 70\r\n      },\r\n      overall,\r\n      keyLevels: {\r\n        support: [technicalIndicators.bollinger.lower, technicalIndicators.ema50],\r\n        resistance: [technicalIndicators.bollinger.upper, marketData.high]\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Analyze volatility patterns\r\n   */\r\n  private async analyzeVolatility(marketData: MarketDataInput): Promise<VolatilityAnalysis> {\r\n    const { high, low, close, technicalIndicators } = marketData;\r\n    \r\n    // Calculate current volatility (simplified)\r\n    const currentVolatility = ((high - low) / close) * 100;\r\n    \r\n    // Classify volatility\r\n    let classification: VolatilityAnalysis['classification'] = 'NORMAL';\r\n    if (currentVolatility < this.ANALYSIS_PARAMS.volatility.extremelyLow) classification = 'EXTREMELY_LOW';\r\n    else if (currentVolatility < this.ANALYSIS_PARAMS.volatility.low) classification = 'LOW';\r\n    else if (currentVolatility > this.ANALYSIS_PARAMS.volatility.extremelyHigh) classification = 'EXTREMELY_HIGH';\r\n    else if (currentVolatility > this.ANALYSIS_PARAMS.volatility.high) classification = 'HIGH';\r\n    \r\n    // Calculate expected range based on Bollinger Bands\r\n    const expectedRange = {\r\n      lower: technicalIndicators.bollinger.lower,\r\n      upper: technicalIndicators.bollinger.upper\r\n    };\r\n    \r\n    // Determine risk level\r\n    let riskLevel: VolatilityAnalysis['riskLevel'] = 'MEDIUM';\r\n    if (classification === 'EXTREMELY_HIGH') riskLevel = 'EXTREME';\r\n    else if (classification === 'HIGH') riskLevel = 'HIGH';\r\n    else if (classification === 'LOW' || classification === 'EXTREMELY_LOW') riskLevel = 'LOW';\r\n    \r\n    return {\r\n      current: currentVolatility,\r\n      historical: {\r\n        day7: currentVolatility * 1.1, // Mock historical data\r\n        day30: currentVolatility * 0.9,\r\n        day90: currentVolatility * 1.05\r\n      },\r\n      classification,\r\n      trend: 'STABLE', // Simplified for mock\r\n      expectedRange,\r\n      riskLevel\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Identify current market regime\r\n   */\r\n  private async identifyMarketRegime(marketData: MarketDataInput): Promise<MarketRegime> {\r\n    const { price, technicalIndicators, volume } = marketData;\r\n    \r\n    // Simplified regime identification based on technical indicators\r\n    let regime: MarketRegime['regime'] = 'SIDEWAYS';\r\n    let confidence = 60;\r\n    \r\n    // Bull market indicators\r\n    if (price > technicalIndicators.ema20 && \r\n        price > technicalIndicators.ema50 && \r\n        technicalIndicators.ema20 > technicalIndicators.ema50 &&\r\n        technicalIndicators.rsi > 50) {\r\n      regime = 'BULL_MARKET';\r\n      confidence = 75;\r\n    }\r\n    // Bear market indicators\r\n    else if (price < technicalIndicators.ema20 && \r\n             price < technicalIndicators.ema50 && \r\n             technicalIndicators.ema20 < technicalIndicators.ema50 &&\r\n             technicalIndicators.rsi < 50) {\r\n      regime = 'BEAR_MARKET';\r\n      confidence = 75;\r\n    }\r\n    \r\n    return {\r\n      regime,\r\n      confidence,\r\n      duration: 15, // Mock duration\r\n      characteristics: this.getRegimeCharacteristics(regime),\r\n      expectedDuration: 30, // Mock expected duration\r\n      transitionProbability: {\r\n        'BULL_MARKET': regime === 'BEAR_MARKET' ? 0.2 : 0.4,\r\n        'BEAR_MARKET': regime === 'BULL_MARKET' ? 0.2 : 0.3,\r\n        'SIDEWAYS': 0.3,\r\n        'ACCUMULATION': 0.1\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get characteristics for market regime\r\n   */\r\n  private getRegimeCharacteristics(regime: MarketRegime['regime']): string[] {\r\n    const characteristics = {\r\n      'BULL_MARKET': ['Rising prices', 'High volume', 'Positive sentiment', 'Strong momentum'],\r\n      'BEAR_MARKET': ['Falling prices', 'High volume on declines', 'Negative sentiment', 'Weak momentum'],\r\n      'SIDEWAYS': ['Range-bound trading', 'Mixed signals', 'Neutral sentiment', 'Low momentum'],\r\n      'ACCUMULATION': ['Gradual buying', 'Increasing volume', 'Improving sentiment'],\r\n      'DISTRIBUTION': ['Gradual selling', 'Decreasing volume', 'Deteriorating sentiment'],\r\n      'CRASH': ['Rapid price decline', 'Panic selling', 'Extreme negative sentiment'],\r\n      'RECOVERY': ['Price stabilization', 'Returning confidence', 'Improving fundamentals']\r\n    };\r\n    \r\n    return characteristics[regime] || ['Unknown characteristics'];\r\n  }\r\n\r\n  /**\r\n   * Detect market anomalies\r\n   */\r\n  private async detectAnomalies(\r\n    marketData: MarketDataInput,\r\n    sentimentData?: SentimentDataInput\r\n  ): Promise<MarketAnomaly[]> {\r\n    const anomalies: MarketAnomaly[] = [];\r\n    \r\n    // Volume spike detection\r\n    if (marketData.volume > marketData.technicalIndicators.volume_sma * 3) {\r\n      anomalies.push({\r\n        type: 'VOLUME_SPIKE',\r\n        severity: 'HIGH',\r\n        description: 'Unusual volume spike detected',\r\n        impact: 'Potential significant price movement',\r\n        recommendation: 'Monitor closely for breakout or breakdown',\r\n        confidence: 85,\r\n        timestamp: new Date(),\r\n        affectedSymbols: [marketData.symbol]\r\n      });\r\n    }\r\n    \r\n    // Price gap detection\r\n    const gapPercentage = Math.abs((marketData.open - marketData.close) / marketData.close) * 100;\r\n    if (gapPercentage > 5) {\r\n      anomalies.push({\r\n        type: 'PRICE_GAP',\r\n        severity: 'MEDIUM',\r\n        description: `Significant price gap of ${gapPercentage.toFixed(2)}%`,\r\n        impact: 'May indicate strong sentiment shift',\r\n        recommendation: 'Assess gap fill probability',\r\n        confidence: 75,\r\n        timestamp: new Date(),\r\n        affectedSymbols: [marketData.symbol]\r\n      });\r\n    }\r\n    \r\n    // Sentiment divergence detection\r\n    if (sentimentData && Math.abs(sentimentData.overall) > 70) {\r\n      const priceDirection = marketData.close > marketData.open ? 1 : -1;\r\n      const sentimentDirection = sentimentData.overall > 0 ? 1 : -1;\r\n      \r\n      if (priceDirection !== sentimentDirection) {\r\n        anomalies.push({\r\n          type: 'SENTIMENT_DIVERGENCE',\r\n          severity: 'MEDIUM',\r\n          description: 'Price action diverges from sentiment',\r\n          impact: 'Potential reversal or sentiment correction',\r\n          recommendation: 'Monitor for trend continuation or reversal',\r\n          confidence: 70,\r\n          timestamp: new Date(),\r\n          affectedSymbols: [marketData.symbol]\r\n        });\r\n      }\r\n    }\r\n    \r\n    return anomalies;\r\n  }\r\n\r\n  /**\r\n   * Generate trading recommendation\r\n   */\r\n  private generateTradingRecommendation(\r\n    marketAnalysis: MarketAnalysis,\r\n    trendAnalysis: TrendAnalysis,\r\n    volatilityAnalysis: VolatilityAnalysis,\r\n    sentimentData?: SentimentDataInput\r\n  ): {\r\n    recommendation: 'STRONG_BUY' | 'BUY' | 'HOLD' | 'SELL' | 'STRONG_SELL';\r\n    riskLevel: 'LOW' | 'MEDIUM' | 'HIGH' | 'EXTREME';\r\n    positionSize: number;\r\n  } {\r\n    let score = 0;\r\n    \r\n    // Market analysis contribution\r\n    score += marketAnalysis.sentiment * 0.3;\r\n    if (marketAnalysis.trend === 'BULLISH') score += 20;\r\n    else if (marketAnalysis.trend === 'BEARISH') score -= 20;\r\n    \r\n    // Trend analysis contribution\r\n    if (trendAnalysis.overall === 'BULLISH') score += 25;\r\n    else if (trendAnalysis.overall === 'BEARISH') score -= 25;\r\n    \r\n    // Sentiment contribution\r\n    if (sentimentData) {\r\n      score += sentimentData.overall * 0.2;\r\n    }\r\n    \r\n    // Determine recommendation\r\n    let recommendation: 'STRONG_BUY' | 'BUY' | 'HOLD' | 'SELL' | 'STRONG_SELL' = 'HOLD';\r\n    if (score > 60) recommendation = 'STRONG_BUY';\r\n    else if (score > 20) recommendation = 'BUY';\r\n    else if (score < -60) recommendation = 'STRONG_SELL';\r\n    else if (score < -20) recommendation = 'SELL';\r\n    \r\n    // Determine risk level\r\n    let riskLevel: 'LOW' | 'MEDIUM' | 'HIGH' | 'EXTREME' = volatilityAnalysis.riskLevel;\r\n    \r\n    // Calculate position size (inverse to risk)\r\n    let positionSize = 50; // Base 50%\r\n    if (riskLevel === 'LOW') positionSize = 80;\r\n    else if (riskLevel === 'HIGH') positionSize = 30;\r\n    else if (riskLevel === 'EXTREME') positionSize = 10;\r\n    \r\n    // Adjust for confidence\r\n    positionSize *= (marketAnalysis.confidence / 100);\r\n    \r\n    return {\r\n      recommendation,\r\n      riskLevel,\r\n      positionSize: Math.round(positionSize)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculate overall confidence\r\n   */\r\n  private calculateOverallConfidence(\r\n    marketAnalysis: MarketAnalysis,\r\n    trendAnalysis: TrendAnalysis,\r\n    volatilityAnalysis: VolatilityAnalysis\r\n  ): number {\r\n    const confidences = [\r\n      marketAnalysis.confidence,\r\n      trendAnalysis.shortTerm.confidence,\r\n      trendAnalysis.mediumTerm.confidence,\r\n      trendAnalysis.longTerm.confidence\r\n    ];\r\n    \r\n    return Math.round(confidences.reduce((sum, conf) => sum + conf, 0) / confidences.length);\r\n  }\r\n\r\n  /**\r\n   * Extract key insights\r\n   */\r\n  private extractKeyInsights(\r\n    marketAnalysis: MarketAnalysis,\r\n    trendAnalysis: TrendAnalysis,\r\n    volatilityAnalysis: VolatilityAnalysis\r\n  ): string[] {\r\n    const insights: string[] = [];\r\n    \r\n    insights.push(`Market sentiment is ${marketAnalysis.sentiment > 0 ? 'positive' : 'negative'} at ${marketAnalysis.sentiment}`);\r\n    insights.push(`Overall trend is ${trendAnalysis.overall.toLowerCase()}`);\r\n    insights.push(`Volatility is ${volatilityAnalysis.classification.toLowerCase().replace('_', ' ')}`);\r\n    \r\n    if (marketAnalysis.confidence > 80) {\r\n      insights.push('High confidence in analysis due to strong signal alignment');\r\n    }\r\n    \r\n    return insights;\r\n  }\r\n\r\n  /**\r\n   * Identify risk factors\r\n   */\r\n  private identifyRiskFactors(\r\n    marketAnalysis: MarketAnalysis,\r\n    volatilityAnalysis: VolatilityAnalysis,\r\n    anomalies: MarketAnomaly[]\r\n  ): string[] {\r\n    const riskFactors: string[] = [];\r\n    \r\n    if (volatilityAnalysis.riskLevel === 'HIGH' || volatilityAnalysis.riskLevel === 'EXTREME') {\r\n      riskFactors.push('High volatility increases position risk');\r\n    }\r\n    \r\n    if (anomalies.length > 0) {\r\n      riskFactors.push(`${anomalies.length} market anomalies detected`);\r\n    }\r\n    \r\n    if (marketAnalysis.confidence < 60) {\r\n      riskFactors.push('Low confidence in analysis due to mixed signals');\r\n    }\r\n    \r\n    return riskFactors;\r\n  }\r\n\r\n  /**\r\n   * Identify opportunities\r\n   */\r\n  private identifyOpportunities(\r\n    marketAnalysis: MarketAnalysis,\r\n    trendAnalysis: TrendAnalysis,\r\n    sentimentData?: SentimentDataInput\r\n  ): string[] {\r\n    const opportunities: string[] = [];\r\n    \r\n    if (trendAnalysis.overall === 'BULLISH' && marketAnalysis.sentiment > 30) {\r\n      opportunities.push('Strong bullish alignment suggests upside potential');\r\n    }\r\n    \r\n    if (sentimentData && Math.abs(sentimentData.overall) > 50) {\r\n      opportunities.push('Strong sentiment could drive momentum continuation');\r\n    }\r\n    \r\n    if (marketAnalysis.confidence > 75) {\r\n      opportunities.push('High confidence analysis provides clear directional bias');\r\n    }\r\n    \r\n    return opportunities;\r\n  }\r\n\r\n  /**\r\n   * Assess data quality\r\n   */\r\n  private assessDataQuality(marketData: MarketDataInput, sentimentData?: SentimentDataInput): number {\r\n    let quality = 100;\r\n    \r\n    // Check for missing technical indicators\r\n    if (!marketData.technicalIndicators.rsi) quality -= 10;\r\n    if (!marketData.technicalIndicators.macd) quality -= 10;\r\n    \r\n    // Check sentiment data availability\r\n    if (!sentimentData) quality -= 20;\r\n    else if (sentimentData.confidence < 50) quality -= 10;\r\n    \r\n    // Check data freshness (simplified)\r\n    const dataAge = Date.now() - marketData.timestamp.getTime();\r\n    if (dataAge > 300000) quality -= 15; // 5 minutes old\r\n    \r\n    return Math.max(0, quality);\r\n  }\r\n\r\n  /**\r\n   * Cache analysis result\r\n   */\r\n  private cacheAnalysis(key: string, analysis: ComprehensiveMarketAnalysis): void {\r\n    this.analysisCache.set(key, analysis);\r\n    \r\n    // Clean up expired cache entries\r\n    setTimeout(() => {\r\n      this.analysisCache.delete(key);\r\n    }, this.cacheExpiryMs);\r\n  }\r\n\r\n  /**\r\n   * Get cached analysis if available and not expired\r\n   */\r\n  private getCachedAnalysis(key: string): ComprehensiveMarketAnalysis | null {\r\n    return this.analysisCache.get(key) || null;\r\n  }\r\n\r\n  /**\r\n   * Add analysis to history\r\n   */\r\n  private addToHistory(analysis: ComprehensiveMarketAnalysis): void {\r\n    this.analysisHistory.push(analysis);\r\n    \r\n    if (this.analysisHistory.length > this.maxHistorySize) {\r\n      this.analysisHistory = this.analysisHistory.slice(-this.maxHistorySize);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get analysis history\r\n   */\r\n  public getAnalysisHistory(symbol?: string, limit?: number): ComprehensiveMarketAnalysis[] {\r\n    let history = this.analysisHistory;\r\n    \r\n    if (symbol) {\r\n      history = history.filter(analysis => analysis.symbol === symbol);\r\n    }\r\n    \r\n    if (limit) {\r\n      history = history.slice(-limit);\r\n    }\r\n    \r\n    return history;\r\n  }\r\n\r\n  /**\r\n   * Get current market conditions summary\r\n   */\r\n  public async getMarketConditionsSummary(symbols: string[]): Promise<{\r\n    overallSentiment: number;\r\n    dominantTrend: string;\r\n    averageVolatility: string;\r\n    riskLevel: string;\r\n    opportunities: number;\r\n    warnings: number;\r\n  }> {\r\n    // This would analyze multiple symbols in production\r\n    // For now, return a mock summary\r\n    \r\n    return {\r\n      overallSentiment: 25,\r\n      dominantTrend: 'BULLISH',\r\n      averageVolatility: 'MEDIUM',\r\n      riskLevel: 'MEDIUM',\r\n      opportunities: 3,\r\n      warnings: 1\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Shutdown the market analyzer\r\n   */\r\n  public async shutdown(): Promise<void> {\r\n    try {\r\n      logger.info('🛑 Shutting down Market Analyzer...');\r\n      \r\n      // Clear caches and history\r\n      this.analysisCache.clear();\r\n      this.analysisHistory = [];\r\n      \r\n      this.isInitialized = false;\r\n      \r\n      logger.info('✅ Market Analyzer shutdown completed');\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Error during Market Analyzer shutdown:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\n// Export types\r\nexport type {\r\n  MarketDataInput,\r\n  SentimentDataInput,\r\n  MarketRegime,\r\n  VolatilityAnalysis,\r\n  TrendAnalysis,\r\n  MarketAnomaly,\r\n  ComprehensiveMarketAnalysis\r\n};"],"mappings":"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","ignoreList":[]}