{"version":3,"names":["cov_10ksclylsm","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","events_1","require","logger_1","AnomalyDetector","EventEmitter","llmEngine","config","baselines","Map","detectionHistory","alertHistory","isInitialized","maxHistorySize","STATISTICAL_CONSTANTS","zScoreThreshold","outlierThreshold","minSampleSize","baselineUpdateFrequency","constructor","volumeAnomalySensitivity","priceAnomalySensitivity","sentimentAnomalySensitivity","patternAnomalySensitivity","volumeSpikeThreshold","priceGapThreshold","sentimentDivergenceThreshold","shortTermWindow","mediumTermWindow","longTermWindow","enableRealTimeAlerts","alertCooldownPeriod","maxAlertsPerHour","logger","info","initialize","isReady","Error","initializeBaselines","emit","error","symbols","symbol","baseline","timeframe","averagePrice","priceStdDev","priceRange","min","max","averageVolume","volumeStdDev","volumeRange","averageVolatility","volatilityStdDev","patternFrequencies","lastUpdated","Date","sampleSize","set","detectAnomalies","marketData","sentimentData","startTime","now","get","updateBaseline","volumeAnomalies","priceAnomalies","patternAnomalies","sentimentAnomalies","volatilityAnomalies","Promise","all","detectVolumeAnomalies","detectPriceAnomalies","detectPatternAnomalies","detectSentimentAnomalies","detectVolatilityAnomalies","allAnomalies","length","llmAnomalies","getLLMAnomalyAnalysis","push","overallRiskScore","calculateOverallRiskScore","confidenceScore","calculateConfidenceScore","result","anomalies","detectionTime","algorithmsUsed","addToHistory","generateAlerts","price","volume","high","low","volatility","oldAvg","Math","sqrt","pow","oldVolumeAvg","oldVolatilityAvg","zScore","abs","severity","description","toFixed","impact","recommendation","confidence","timestamp","affectedSymbols","volumeRatio","open","gapPercentage","intradayVolatility","technicalIndicators","rsi","macdDivergence","macd","signal","bbWidth","bollinger","upper","lower","middle","priceChange","close","sentimentScore","overall","priceDirection","sentimentDirection","currentVolatility","prompt","buildAnomalyAnalysisPrompt","llmResponse","getLLMAnomalyResponse","parseLLMAnomalyResponse","map","anomaly","index","join","toLocaleString","twitter","score","reddit","news","includes","totalRisk","severityWeights","LOW","MEDIUM","HIGH","CRITICAL","weight","confidenceMultiplier","maxPossibleRisk","dataAge","getTime","avgAnomalyConfidence","reduce","sum","a","round","alertKey","getHours","lastAlert","hourlyAlerts","Array","from","entries","filter","key","time","startsWith","criticalAnomalies","warn","slice","getDetectionHistory","limit","history","some","getBaselines","updateConfig","newConfig","getConfig","resetBaseline","delete","shutdown","clear","exports"],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\ai\\anomaly-detector.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * ANOMALY DETECTOR - AI-POWERED MARKET ANOMALY DETECTION\r\n * =============================================================================\r\n * \r\n * This module implements sophisticated anomaly detection for cryptocurrency\r\n * markets using AI and statistical methods. It identifies unusual patterns,\r\n * market irregularities, and potential trading opportunities or risks.\r\n * \r\n * Key Features:\r\n * - Real-time anomaly detection using multiple algorithms\r\n * - Pattern recognition for unusual market behavior\r\n * - Volume and price anomaly identification\r\n * - Sentiment-price divergence detection\r\n * - Liquidity and order book anomalies\r\n * - Alert generation and risk assessment\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport { EventEmitter } from 'events';\r\nimport { logger } from '@/core/logging/logger';\r\nimport { LLMEngine } from './llm-engine';\r\nimport type { MarketDataInput, SentimentDataInput, MarketAnomaly } from './market-analyzer';\r\n\r\n/**\r\n * Interface for anomaly detection configuration\r\n */\r\ninterface AnomalyDetectionConfig {\r\n  // Sensitivity settings (0-100)\r\n  volumeAnomalySensitivity: number;\r\n  priceAnomalySensitivity: number;\r\n  sentimentAnomalySensitivity: number;\r\n  patternAnomalySensitivity: number;\r\n  \r\n  // Thresholds\r\n  volumeSpikeThreshold: number; // Multiple of average volume\r\n  priceGapThreshold: number; // Percentage gap\r\n  sentimentDivergenceThreshold: number; // Sentiment vs price divergence\r\n  \r\n  // Time windows\r\n  shortTermWindow: number; // Minutes\r\n  mediumTermWindow: number; // Hours\r\n  longTermWindow: number; // Days\r\n  \r\n  // Alert settings\r\n  enableRealTimeAlerts: boolean;\r\n  alertCooldownPeriod: number; // Milliseconds\r\n  maxAlertsPerHour: number;\r\n}\r\n\r\n/**\r\n * Interface for statistical baseline data\r\n */\r\ninterface StatisticalBaseline {\r\n  symbol: string;\r\n  timeframe: string;\r\n  \r\n  // Price statistics\r\n  averagePrice: number;\r\n  priceStdDev: number;\r\n  priceRange: { min: number; max: number };\r\n  \r\n  // Volume statistics\r\n  averageVolume: number;\r\n  volumeStdDev: number;\r\n  volumeRange: { min: number; max: number };\r\n  \r\n  // Volatility statistics\r\n  averageVolatility: number;\r\n  volatilityStdDev: number;\r\n  \r\n  // Pattern frequencies\r\n  patternFrequencies: Map<string, number>;\r\n  \r\n  lastUpdated: Date;\r\n  sampleSize: number;\r\n}\r\n\r\n/**\r\n * Interface for anomaly detection result\r\n */\r\ninterface AnomalyDetectionResult {\r\n  anomalies: MarketAnomaly[];\r\n  overallRiskScore: number; // 0-100\r\n  confidenceScore: number; // 0-100\r\n  detectionTime: number; // milliseconds\r\n  algorithmsUsed: string[];\r\n  baseline: StatisticalBaseline;\r\n}\r\n\r\n/**\r\n * Interface for pattern anomaly\r\n */\r\ninterface PatternAnomaly {\r\n  patternType: string;\r\n  description: string;\r\n  frequency: number; // How often this pattern typically occurs\r\n  currentOccurrence: number; // Current frequency\r\n  deviationScore: number; // How much it deviates from normal\r\n  significance: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';\r\n}\r\n\r\n/**\r\n * Interface for order book anomaly (for future implementation)\r\n */\r\ninterface OrderBookAnomaly {\r\n  type: 'BID_ASK_SPREAD' | 'DEPTH_IMBALANCE' | 'LARGE_ORDER' | 'SPOOFING';\r\n  severity: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';\r\n  description: string;\r\n  impact: string;\r\n  timestamp: Date;\r\n}\r\n\r\n/**\r\n * Anomaly Detector class for market irregularity detection\r\n */\r\nexport class AnomalyDetector extends EventEmitter {\r\n  private llmEngine: LLMEngine;\r\n  private config: AnomalyDetectionConfig;\r\n  private baselines: Map<string, StatisticalBaseline> = new Map();\r\n  private detectionHistory: AnomalyDetectionResult[] = [];\r\n  private alertHistory: Map<string, Date> = new Map(); // For cooldown tracking\r\n  private isInitialized: boolean = false;\r\n  private maxHistorySize: number = 1000;\r\n\r\n  // Statistical constants\r\n  private readonly STATISTICAL_CONSTANTS = {\r\n    zScoreThreshold: 2.5, // 2.5 standard deviations\r\n    outlierThreshold: 3.0, // 3 standard deviations for outliers\r\n    minSampleSize: 100, // Minimum samples for reliable statistics\r\n    baselineUpdateFrequency: 3600000 // 1 hour in milliseconds\r\n  };\r\n\r\n  constructor(llmEngine: LLMEngine, config?: Partial<AnomalyDetectionConfig>) {\r\n    super();\r\n    this.llmEngine = llmEngine;\r\n    \r\n    // Default configuration\r\n    this.config = {\r\n      volumeAnomalySensitivity: 75,\r\n      priceAnomalySensitivity: 80,\r\n      sentimentAnomalySensitivity: 70,\r\n      patternAnomalySensitivity: 65,\r\n      \r\n      volumeSpikeThreshold: 3.0,\r\n      priceGapThreshold: 5.0,\r\n      sentimentDivergenceThreshold: 50,\r\n      \r\n      shortTermWindow: 15,\r\n      mediumTermWindow: 4,\r\n      longTermWindow: 1,\r\n      \r\n      enableRealTimeAlerts: true,\r\n      alertCooldownPeriod: 300000, // 5 minutes\r\n      maxAlertsPerHour: 10,\r\n      \r\n      ...config\r\n    };\r\n\r\n    logger.info('üîç Anomaly Detector initialized');\r\n  }\r\n\r\n  /**\r\n   * Initialize the anomaly detector\r\n   */\r\n  public async initialize(): Promise<void> {\r\n    try {\r\n      logger.info('üöÄ Initializing Anomaly Detector...');\r\n\r\n      // Verify LLM engine is ready\r\n      if (!this.llmEngine.isReady()) {\r\n        throw new Error('LLM Engine is not ready');\r\n      }\r\n\r\n      // Initialize baselines for common symbols\r\n      await this.initializeBaselines(['BTC', 'ETH']);\r\n\r\n      this.isInitialized = true;\r\n      logger.info('‚úÖ Anomaly Detector initialized successfully');\r\n\r\n      this.emit('initialized');\r\n\r\n    } catch (error) {\r\n      logger.error('‚ùå Failed to initialize Anomaly Detector:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialize statistical baselines for symbols\r\n   */\r\n  private async initializeBaselines(symbols: string[]): Promise<void> {\r\n    for (const symbol of symbols) {\r\n      const baseline: StatisticalBaseline = {\r\n        symbol,\r\n        timeframe: '1h',\r\n        averagePrice: 0,\r\n        priceStdDev: 0,\r\n        priceRange: { min: 0, max: 0 },\r\n        averageVolume: 0,\r\n        volumeStdDev: 0,\r\n        volumeRange: { min: 0, max: 0 },\r\n        averageVolatility: 0,\r\n        volatilityStdDev: 0,\r\n        patternFrequencies: new Map(),\r\n        lastUpdated: new Date(),\r\n        sampleSize: 0\r\n      };\r\n\r\n      this.baselines.set(symbol, baseline);\r\n      logger.info(`üìä Initialized baseline for ${symbol}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Detect anomalies in market data\r\n   */\r\n  public async detectAnomalies(\r\n    marketData: MarketDataInput,\r\n    sentimentData?: SentimentDataInput\r\n  ): Promise<AnomalyDetectionResult> {\r\n    try {\r\n      if (!this.isInitialized) {\r\n        throw new Error('Anomaly Detector not initialized');\r\n      }\r\n\r\n      const startTime = Date.now();\r\n      logger.info(`üîç Detecting anomalies for ${marketData.symbol}...`);\r\n\r\n      // Get or create baseline for symbol\r\n      let baseline = this.baselines.get(marketData.symbol);\r\n      if (!baseline) {\r\n        await this.initializeBaselines([marketData.symbol]);\r\n        baseline = this.baselines.get(marketData.symbol)!;\r\n      }\r\n\r\n      // Update baseline with new data\r\n      await this.updateBaseline(baseline, marketData);\r\n\r\n      // Run different anomaly detection algorithms\r\n      const [\r\n        volumeAnomalies,\r\n        priceAnomalies,\r\n        patternAnomalies,\r\n        sentimentAnomalies,\r\n        volatilityAnomalies\r\n      ] = await Promise.all([\r\n        this.detectVolumeAnomalies(marketData, baseline),\r\n        this.detectPriceAnomalies(marketData, baseline),\r\n        this.detectPatternAnomalies(marketData, baseline),\r\n        this.detectSentimentAnomalies(marketData, sentimentData, baseline),\r\n        this.detectVolatilityAnomalies(marketData, baseline)\r\n      ]);\r\n\r\n      // Combine all anomalies\r\n      const allAnomalies = [\r\n        ...volumeAnomalies,\r\n        ...priceAnomalies,\r\n        ...patternAnomalies,\r\n        ...sentimentAnomalies,\r\n        ...volatilityAnomalies\r\n      ];\r\n\r\n      // Use LLM for additional analysis if anomalies found\r\n      if (allAnomalies.length > 0) {\r\n        const llmAnomalies = await this.getLLMAnomalyAnalysis(marketData, allAnomalies, sentimentData);\r\n        allAnomalies.push(...llmAnomalies);\r\n      }\r\n\r\n      // Calculate overall risk and confidence scores\r\n      const overallRiskScore = this.calculateOverallRiskScore(allAnomalies);\r\n      const confidenceScore = this.calculateConfidenceScore(baseline, allAnomalies);\r\n\r\n      const result: AnomalyDetectionResult = {\r\n        anomalies: allAnomalies,\r\n        overallRiskScore,\r\n        confidenceScore,\r\n        detectionTime: Date.now() - startTime,\r\n        algorithmsUsed: ['volume', 'price', 'pattern', 'sentiment', 'volatility', 'llm'],\r\n        baseline\r\n      };\r\n\r\n      // Add to history\r\n      this.addToHistory(result);\r\n\r\n      // Generate alerts if enabled\r\n      if (this.config.enableRealTimeAlerts && allAnomalies.length > 0) {\r\n        await this.generateAlerts(allAnomalies, marketData.symbol);\r\n      }\r\n\r\n      logger.info(`‚úÖ Anomaly detection completed for ${marketData.symbol} - Found ${allAnomalies.length} anomalies`);\r\n      \r\n      this.emit('anomaliesDetected', result);\r\n\r\n      return result;\r\n\r\n    } catch (error) {\r\n      logger.error('‚ùå Error in anomaly detection:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update statistical baseline with new market data\r\n   */\r\n  private async updateBaseline(baseline: StatisticalBaseline, marketData: MarketDataInput): Promise<void> {\r\n    const { price, volume, high, low } = marketData;\r\n    const volatility = ((high - low) / price) * 100;\r\n\r\n    // Update sample size\r\n    baseline.sampleSize++;\r\n\r\n    // Update price statistics (running average and std dev)\r\n    if (baseline.sampleSize === 1) {\r\n      baseline.averagePrice = price;\r\n      baseline.priceRange = { min: price, max: price };\r\n    } else {\r\n      // Running average\r\n      const oldAvg = baseline.averagePrice;\r\n      baseline.averagePrice = oldAvg + (price - oldAvg) / baseline.sampleSize;\r\n      \r\n      // Running standard deviation (Welford's algorithm)\r\n      baseline.priceStdDev = Math.sqrt(\r\n        ((baseline.sampleSize - 2) * Math.pow(baseline.priceStdDev, 2) + \r\n         (price - oldAvg) * (price - baseline.averagePrice)) / (baseline.sampleSize - 1)\r\n      );\r\n      \r\n      // Update range\r\n      baseline.priceRange.min = Math.min(baseline.priceRange.min, price);\r\n      baseline.priceRange.max = Math.max(baseline.priceRange.max, price);\r\n    }\r\n\r\n    // Update volume statistics\r\n    if (baseline.sampleSize === 1) {\r\n      baseline.averageVolume = volume;\r\n      baseline.volumeRange = { min: volume, max: volume };\r\n    } else {\r\n      const oldVolumeAvg = baseline.averageVolume;\r\n      baseline.averageVolume = oldVolumeAvg + (volume - oldVolumeAvg) / baseline.sampleSize;\r\n      \r\n      baseline.volumeStdDev = Math.sqrt(\r\n        ((baseline.sampleSize - 2) * Math.pow(baseline.volumeStdDev, 2) + \r\n         (volume - oldVolumeAvg) * (volume - baseline.averageVolume)) / (baseline.sampleSize - 1)\r\n      );\r\n      \r\n      baseline.volumeRange.min = Math.min(baseline.volumeRange.min, volume);\r\n      baseline.volumeRange.max = Math.max(baseline.volumeRange.max, volume);\r\n    }\r\n\r\n    // Update volatility statistics\r\n    if (baseline.sampleSize === 1) {\r\n      baseline.averageVolatility = volatility;\r\n    } else {\r\n      const oldVolatilityAvg = baseline.averageVolatility;\r\n      baseline.averageVolatility = oldVolatilityAvg + (volatility - oldVolatilityAvg) / baseline.sampleSize;\r\n      \r\n      baseline.volatilityStdDev = Math.sqrt(\r\n        ((baseline.sampleSize - 2) * Math.pow(baseline.volatilityStdDev, 2) + \r\n         (volatility - oldVolatilityAvg) * (volatility - baseline.averageVolatility)) / (baseline.sampleSize - 1)\r\n      );\r\n    }\r\n\r\n    baseline.lastUpdated = new Date();\r\n  }\r\n\r\n  /**\r\n   * Detect volume anomalies\r\n   */\r\n  private async detectVolumeAnomalies(\r\n    marketData: MarketDataInput,\r\n    baseline: StatisticalBaseline\r\n  ): Promise<MarketAnomaly[]> {\r\n    const anomalies: MarketAnomaly[] = [];\r\n    \r\n    if (baseline.sampleSize < this.STATISTICAL_CONSTANTS.minSampleSize) {\r\n      return anomalies; // Not enough data for reliable detection\r\n    }\r\n\r\n    const { volume } = marketData;\r\n    const { averageVolume, volumeStdDev } = baseline;\r\n\r\n    // Z-score calculation\r\n    const zScore = volumeStdDev > 0 ? (volume - averageVolume) / volumeStdDev : 0;\r\n\r\n    // Volume spike detection\r\n    if (Math.abs(zScore) > this.STATISTICAL_CONSTANTS.zScoreThreshold) {\r\n      const severity = Math.abs(zScore) > this.STATISTICAL_CONSTANTS.outlierThreshold ? 'HIGH' : 'MEDIUM';\r\n      \r\n      anomalies.push({\r\n        type: 'VOLUME_SPIKE',\r\n        severity: severity as MarketAnomaly['severity'],\r\n        description: `Volume ${zScore > 0 ? 'spike' : 'drop'} detected: ${(volume / averageVolume).toFixed(2)}x average`,\r\n        impact: zScore > 0 ? 'Potential breakout or significant news' : 'Potential lack of interest or liquidity issues',\r\n        recommendation: zScore > 0 ? 'Monitor for price movement confirmation' : 'Check for market conditions or news',\r\n        confidence: Math.min(95, 60 + Math.abs(zScore) * 10),\r\n        timestamp: new Date(),\r\n        affectedSymbols: [marketData.symbol]\r\n      });\r\n    }\r\n\r\n    // Volume pattern anomalies\r\n    const volumeRatio = volume / averageVolume;\r\n    if (volumeRatio > this.config.volumeSpikeThreshold) {\r\n      anomalies.push({\r\n        type: 'VOLUME_SPIKE',\r\n        severity: volumeRatio > 5 ? 'CRITICAL' : 'HIGH',\r\n        description: `Extreme volume spike: ${volumeRatio.toFixed(1)}x normal volume`,\r\n        impact: 'Major market event or institutional activity',\r\n        recommendation: 'Immediate attention required - check news and order books',\r\n        confidence: 90,\r\n        timestamp: new Date(),\r\n        affectedSymbols: [marketData.symbol]\r\n      });\r\n    }\r\n\r\n    return anomalies;\r\n  }\r\n\r\n  /**\r\n   * Detect price anomalies\r\n   */\r\n  private async detectPriceAnomalies(\r\n    marketData: MarketDataInput,\r\n    baseline: StatisticalBaseline\r\n  ): Promise<MarketAnomaly[]> {\r\n    const anomalies: MarketAnomaly[] = [];\r\n    \r\n    if (baseline.sampleSize < this.STATISTICAL_CONSTANTS.minSampleSize) {\r\n      return anomalies;\r\n    }\r\n\r\n    const { price, open, high, low } = marketData;\r\n    const { averagePrice, priceStdDev } = baseline;\r\n\r\n    // Price gap detection\r\n    const gapPercentage = Math.abs((open - price) / price) * 100;\r\n    if (gapPercentage > this.config.priceGapThreshold) {\r\n      anomalies.push({\r\n        type: 'PRICE_GAP',\r\n        severity: gapPercentage > 10 ? 'HIGH' : 'MEDIUM',\r\n        description: `Price gap of ${gapPercentage.toFixed(2)}% detected`,\r\n        impact: 'Potential sentiment shift or news impact',\r\n        recommendation: 'Assess gap fill probability and market sentiment',\r\n        confidence: 80,\r\n        timestamp: new Date(),\r\n        affectedSymbols: [marketData.symbol]\r\n      });\r\n    }\r\n\r\n    // Price deviation from baseline\r\n    if (priceStdDev > 0) {\r\n      const zScore = (price - averagePrice) / priceStdDev;\r\n      \r\n      if (Math.abs(zScore) > this.STATISTICAL_CONSTANTS.outlierThreshold) {\r\n        anomalies.push({\r\n          type: 'UNUSUAL_PATTERN',\r\n          severity: Math.abs(zScore) > 4 ? 'CRITICAL' : 'HIGH',\r\n          description: `Price deviation: ${Math.abs(zScore).toFixed(2)} standard deviations from average`,\r\n          impact: 'Significant price movement outside normal range',\r\n          recommendation: 'Investigate underlying causes and market conditions',\r\n          confidence: 85,\r\n          timestamp: new Date(),\r\n          affectedSymbols: [marketData.symbol]\r\n        });\r\n      }\r\n    }\r\n\r\n    // Intraday volatility anomaly\r\n    const intradayVolatility = ((high - low) / open) * 100;\r\n    if (intradayVolatility > baseline.averageVolatility * 2) {\r\n      anomalies.push({\r\n        type: 'UNUSUAL_PATTERN',\r\n        severity: intradayVolatility > baseline.averageVolatility * 3 ? 'HIGH' : 'MEDIUM',\r\n        description: `Unusual intraday volatility: ${intradayVolatility.toFixed(2)}%`,\r\n        impact: 'Increased trading risk and potential opportunities',\r\n        recommendation: 'Adjust position sizes and risk management',\r\n        confidence: 75,\r\n        timestamp: new Date(),\r\n        affectedSymbols: [marketData.symbol]\r\n      });\r\n    }\r\n\r\n    return anomalies;\r\n  }\r\n\r\n  /**\r\n   * Detect pattern anomalies using statistical analysis\r\n   */\r\n  private async detectPatternAnomalies(\r\n    marketData: MarketDataInput,\r\n    baseline: StatisticalBaseline\r\n  ): Promise<MarketAnomaly[]> {\r\n    const anomalies: MarketAnomaly[] = [];\r\n    \r\n    // Technical indicator anomalies\r\n    const { technicalIndicators } = marketData;\r\n    \r\n    // RSI extreme values\r\n    if (technicalIndicators.rsi > 90 || technicalIndicators.rsi < 10) {\r\n      anomalies.push({\r\n        type: 'UNUSUAL_PATTERN',\r\n        severity: 'HIGH',\r\n        description: `Extreme RSI value: ${technicalIndicators.rsi.toFixed(2)}`,\r\n        impact: technicalIndicators.rsi > 90 ? 'Severely overbought conditions' : 'Severely oversold conditions',\r\n        recommendation: technicalIndicators.rsi > 90 ? 'Consider taking profits or shorting' : 'Consider buying opportunity',\r\n        confidence: 85,\r\n        timestamp: new Date(),\r\n        affectedSymbols: [marketData.symbol]\r\n      });\r\n    }\r\n\r\n    // MACD divergence anomaly\r\n    const macdDivergence = Math.abs(technicalIndicators.macd.macd - technicalIndicators.macd.signal);\r\n    if (macdDivergence > 0.01) { // Threshold for significant divergence\r\n      anomalies.push({\r\n        type: 'UNUSUAL_PATTERN',\r\n        severity: 'MEDIUM',\r\n        description: `Significant MACD divergence detected: ${macdDivergence.toFixed(4)}`,\r\n        impact: 'Potential trend change or momentum shift',\r\n        recommendation: 'Monitor for trend confirmation or reversal',\r\n        confidence: 70,\r\n        timestamp: new Date(),\r\n        affectedSymbols: [marketData.symbol]\r\n      });\r\n    }\r\n\r\n    // Bollinger Band squeeze/expansion\r\n    const bbWidth = (technicalIndicators.bollinger.upper - technicalIndicators.bollinger.lower) / technicalIndicators.bollinger.middle;\r\n    if (bbWidth < 0.02) { // Very tight bands\r\n      anomalies.push({\r\n        type: 'UNUSUAL_PATTERN',\r\n        severity: 'MEDIUM',\r\n        description: 'Bollinger Band squeeze detected - low volatility',\r\n        impact: 'Potential for significant price movement',\r\n        recommendation: 'Prepare for volatility expansion and breakout',\r\n        confidence: 75,\r\n        timestamp: new Date(),\r\n        affectedSymbols: [marketData.symbol]\r\n      });\r\n    } else if (bbWidth > 0.15) { // Very wide bands\r\n      anomalies.push({\r\n        type: 'UNUSUAL_PATTERN',\r\n        severity: 'MEDIUM',\r\n        description: 'Bollinger Band expansion detected - high volatility',\r\n        impact: 'Increased trading risk and opportunities',\r\n        recommendation: 'Use appropriate position sizing for high volatility',\r\n        confidence: 75,\r\n        timestamp: new Date(),\r\n        affectedSymbols: [marketData.symbol]\r\n      });\r\n    }\r\n\r\n    return anomalies;\r\n  }\r\n\r\n  /**\r\n   * Detect sentiment anomalies and divergences\r\n   */\r\n  private async detectSentimentAnomalies(\r\n    marketData: MarketDataInput,\r\n    sentimentData: SentimentDataInput | undefined,\r\n    baseline: StatisticalBaseline\r\n  ): Promise<MarketAnomaly[]> {\r\n    const anomalies: MarketAnomaly[] = [];\r\n    \r\n    if (!sentimentData) {\r\n      return anomalies;\r\n    }\r\n\r\n    // Price-sentiment divergence\r\n    const priceChange = ((marketData.close - marketData.open) / marketData.open) * 100;\r\n    const sentimentScore = sentimentData.overall;\r\n    \r\n    // Check for divergence\r\n    const priceDirection = priceChange > 0 ? 1 : -1;\r\n    const sentimentDirection = sentimentScore > 0 ? 1 : -1;\r\n    \r\n    if (priceDirection !== sentimentDirection && Math.abs(sentimentScore) > this.config.sentimentDivergenceThreshold) {\r\n      anomalies.push({\r\n        type: 'SENTIMENT_DIVERGENCE',\r\n        severity: Math.abs(sentimentScore) > 70 ? 'HIGH' : 'MEDIUM',\r\n        description: `Price-sentiment divergence: Price ${priceChange > 0 ? 'up' : 'down'} ${Math.abs(priceChange).toFixed(2)}%, sentiment ${sentimentScore.toFixed(0)}`,\r\n        impact: 'Potential reversal or sentiment correction incoming',\r\n        recommendation: 'Monitor for trend continuation or reversal signals',\r\n        confidence: Math.min(90, 50 + Math.abs(sentimentScore) * 0.5),\r\n        timestamp: new Date(),\r\n        affectedSymbols: [marketData.symbol]\r\n      });\r\n    }\r\n\r\n    // Extreme sentiment levels\r\n    if (Math.abs(sentimentScore) > 80) {\r\n      anomalies.push({\r\n        type: 'SENTIMENT_DIVERGENCE',\r\n        severity: Math.abs(sentimentScore) > 90 ? 'HIGH' : 'MEDIUM',\r\n        description: `Extreme sentiment detected: ${sentimentScore.toFixed(0)}`,\r\n        impact: sentimentScore > 0 ? 'Potential euphoria and reversal risk' : 'Potential capitulation and bounce opportunity',\r\n        recommendation: sentimentScore > 0 ? 'Consider contrarian positioning' : 'Look for oversold bounce opportunities',\r\n        confidence: 80,\r\n        timestamp: new Date(),\r\n        affectedSymbols: [marketData.symbol]\r\n      });\r\n    }\r\n\r\n    // Sentiment confidence anomaly\r\n    if (sentimentData.confidence < 30) {\r\n      anomalies.push({\r\n        type: 'SENTIMENT_DIVERGENCE',\r\n        severity: 'LOW',\r\n        description: `Low sentiment confidence: ${sentimentData.confidence}%`,\r\n        impact: 'Unreliable sentiment data may affect analysis quality',\r\n        recommendation: 'Rely more on technical analysis until sentiment clarity improves',\r\n        confidence: 60,\r\n        timestamp: new Date(),\r\n        affectedSymbols: [marketData.symbol]\r\n      });\r\n    }\r\n\r\n    return anomalies;\r\n  }\r\n\r\n  /**\r\n   * Detect volatility anomalies\r\n   */\r\n  private async detectVolatilityAnomalies(\r\n    marketData: MarketDataInput,\r\n    baseline: StatisticalBaseline\r\n  ): Promise<MarketAnomaly[]> {\r\n    const anomalies: MarketAnomaly[] = [];\r\n    \r\n    if (baseline.sampleSize < this.STATISTICAL_CONSTANTS.minSampleSize) {\r\n      return anomalies;\r\n    }\r\n\r\n    const currentVolatility = ((marketData.high - marketData.low) / marketData.close) * 100;\r\n    const { averageVolatility, volatilityStdDev } = baseline;\r\n\r\n    if (volatilityStdDev > 0) {\r\n      const zScore = (currentVolatility - averageVolatility) / volatilityStdDev;\r\n      \r\n      if (Math.abs(zScore) > this.STATISTICAL_CONSTANTS.zScoreThreshold) {\r\n        const severity = Math.abs(zScore) > this.STATISTICAL_CONSTANTS.outlierThreshold ? 'HIGH' : 'MEDIUM';\r\n        \r\n        anomalies.push({\r\n          type: 'UNUSUAL_PATTERN',\r\n          severity: severity as MarketAnomaly['severity'],\r\n          description: `Volatility anomaly: ${currentVolatility.toFixed(2)}% (${Math.abs(zScore).toFixed(2)} std dev from average)`,\r\n          impact: zScore > 0 ? 'Increased risk and trading opportunities' : 'Unusually low volatility may precede major moves',\r\n          recommendation: zScore > 0 ? 'Reduce position sizes and tighten stops' : 'Prepare for potential volatility expansion',\r\n          confidence: Math.min(90, 60 + Math.abs(zScore) * 10),\r\n          timestamp: new Date(),\r\n          affectedSymbols: [marketData.symbol]\r\n        });\r\n      }\r\n    }\r\n\r\n    return anomalies;\r\n  }\r\n\r\n  /**\r\n   * Get LLM analysis of detected anomalies\r\n   */\r\n  private async getLLMAnomalyAnalysis(\r\n    marketData: MarketDataInput,\r\n    anomalies: MarketAnomaly[],\r\n    sentimentData?: SentimentDataInput\r\n  ): Promise<MarketAnomaly[]> {\r\n    try {\r\n      // Build prompt for LLM analysis\r\n      const prompt = this.buildAnomalyAnalysisPrompt(marketData, anomalies, sentimentData);\r\n      \r\n      // Get LLM analysis (mock implementation)\r\n      const llmResponse = await this.getLLMAnomalyResponse(prompt);\r\n      \r\n      // Parse LLM response for additional anomalies\r\n      const llmAnomalies = this.parseLLMAnomalyResponse(llmResponse, marketData.symbol);\r\n      \r\n      return llmAnomalies;\r\n      \r\n    } catch (error) {\r\n      logger.error('‚ùå Error in LLM anomaly analysis:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Build prompt for LLM anomaly analysis\r\n   */\r\n  private buildAnomalyAnalysisPrompt(\r\n    marketData: MarketDataInput,\r\n    anomalies: MarketAnomaly[],\r\n    sentimentData?: SentimentDataInput\r\n  ): string {\r\n    let prompt = `Analyze the following market anomalies for ${marketData.symbol}:\r\n\r\nDETECTED ANOMALIES:\r\n${anomalies.map((anomaly, index) => \r\n  `${index + 1}. ${anomaly.type}: ${anomaly.description} (${anomaly.severity} severity)`\r\n).join('\\n')}\r\n\r\nMARKET DATA:\r\n- Price: $${marketData.price.toFixed(2)}\r\n- Volume: ${marketData.volume.toLocaleString()}\r\n- RSI: ${marketData.technicalIndicators.rsi.toFixed(2)}\r\n- MACD: ${marketData.technicalIndicators.macd.macd.toFixed(4)}`;\r\n\r\n    if (sentimentData) {\r\n      prompt += `\\n\\nSENTIMENT DATA:\r\n- Overall Sentiment: ${sentimentData.overall}\r\n- Twitter: ${sentimentData.twitter.score}\r\n- Reddit: ${sentimentData.reddit.score}\r\n- News: ${sentimentData.news.score}`;\r\n    }\r\n\r\n    prompt += `\\n\\nPlease identify any additional anomalies or patterns that might have been missed, and provide insights on:\r\n1. Potential market implications\r\n2. Risk assessment\r\n3. Trading recommendations\r\n4. Any interconnected anomalies that might amplify risks`;\r\n\r\n    return prompt;\r\n  }\r\n\r\n  /**\r\n   * Get LLM response for anomaly analysis (mock implementation)\r\n   */\r\n  private async getLLMAnomalyResponse(prompt: string): Promise<string> {\r\n    // Mock LLM response\r\n    return `Additional analysis reveals:\r\n\r\n1. The combination of volume spike and sentiment divergence suggests institutional activity that may not be reflected in public sentiment yet.\r\n\r\n2. The RSI extreme reading combined with price gap indicates potential exhaustion move that could lead to reversal.\r\n\r\n3. Cross-market correlation anomaly detected - this asset is moving independently of broader market trends, suggesting asset-specific news or events.\r\n\r\nRisk Assessment: ELEVATED - Multiple anomalies occurring simultaneously increases the probability of significant price movement.\r\n\r\nRecommendation: Reduce position sizes and implement tighter risk management until anomalies resolve.`;\r\n  }\r\n\r\n  /**\r\n   * Parse LLM response for additional anomalies\r\n   */\r\n  private parseLLMAnomalyResponse(llmResponse: string, symbol: string): MarketAnomaly[] {\r\n    const anomalies: MarketAnomaly[] = [];\r\n    \r\n    // In production, this would use sophisticated NLP parsing\r\n    // For now, create structured anomalies based on mock response\r\n    \r\n    if (llmResponse.includes('institutional activity')) {\r\n      anomalies.push({\r\n        type: 'UNUSUAL_PATTERN',\r\n        severity: 'MEDIUM',\r\n        description: 'Potential institutional activity detected by AI analysis',\r\n        impact: 'Large player involvement may drive significant price movements',\r\n        recommendation: 'Monitor order flow and volume patterns closely',\r\n        confidence: 75,\r\n        timestamp: new Date(),\r\n        affectedSymbols: [symbol]\r\n      });\r\n    }\r\n    \r\n    if (llmResponse.includes('Cross-market correlation anomaly')) {\r\n      anomalies.push({\r\n        type: 'UNUSUAL_PATTERN',\r\n        severity: 'MEDIUM',\r\n        description: 'Asset moving independently of broader market trends',\r\n        impact: 'Asset-specific factors may be driving price action',\r\n        recommendation: 'Research asset-specific news and developments',\r\n        confidence: 70,\r\n        timestamp: new Date(),\r\n        affectedSymbols: [symbol]\r\n      });\r\n    }\r\n    \r\n    return anomalies;\r\n  }\r\n\r\n  /**\r\n   * Calculate overall risk score from anomalies\r\n   */\r\n  private calculateOverallRiskScore(anomalies: MarketAnomaly[]): number {\r\n    if (anomalies.length === 0) return 0;\r\n    \r\n    let totalRisk = 0;\r\n    const severityWeights = { LOW: 1, MEDIUM: 2, HIGH: 3, CRITICAL: 4 };\r\n    \r\n    for (const anomaly of anomalies) {\r\n      const weight = severityWeights[anomaly.severity];\r\n      const confidenceMultiplier = anomaly.confidence / 100;\r\n      totalRisk += weight * confidenceMultiplier;\r\n    }\r\n    \r\n    // Normalize to 0-100 scale\r\n    const maxPossibleRisk = anomalies.length * 4; // All critical with 100% confidence\r\n    return Math.min(100, (totalRisk / maxPossibleRisk) * 100);\r\n  }\r\n\r\n  /**\r\n   * Calculate confidence score for detection\r\n   */\r\n  private calculateConfidenceScore(baseline: StatisticalBaseline, anomalies: MarketAnomaly[]): number {\r\n    let confidence = 100;\r\n    \r\n    // Reduce confidence if baseline has insufficient data\r\n    if (baseline.sampleSize < this.STATISTICAL_CONSTANTS.minSampleSize) {\r\n      confidence -= 30;\r\n    }\r\n    \r\n    // Reduce confidence if data is stale\r\n    const dataAge = Date.now() - baseline.lastUpdated.getTime();\r\n    if (dataAge > this.STATISTICAL_CONSTANTS.baselineUpdateFrequency) {\r\n      confidence -= 20;\r\n    }\r\n    \r\n    // Average confidence of individual anomalies\r\n    if (anomalies.length > 0) {\r\n      const avgAnomalyConfidence = anomalies.reduce((sum, a) => sum + a.confidence, 0) / anomalies.length;\r\n      confidence = (confidence + avgAnomalyConfidence) / 2;\r\n    }\r\n    \r\n    return Math.max(0, Math.round(confidence));\r\n  }\r\n\r\n  /**\r\n   * Generate alerts for detected anomalies\r\n   */\r\n  private async generateAlerts(anomalies: MarketAnomaly[], symbol: string): Promise<void> {\r\n    const now = new Date();\r\n    const alertKey = `${symbol}_${now.getHours()}`;\r\n    \r\n    // Check cooldown period\r\n    const lastAlert = this.alertHistory.get(alertKey);\r\n    if (lastAlert && (now.getTime() - lastAlert.getTime()) < this.config.alertCooldownPeriod) {\r\n      return; // Still in cooldown\r\n    }\r\n    \r\n    // Check hourly alert limit\r\n    const hourlyAlerts = Array.from(this.alertHistory.entries())\r\n      .filter(([key, time]) => key.startsWith(symbol) && (now.getTime() - time.getTime()) < 3600000)\r\n      .length;\r\n    \r\n    if (hourlyAlerts >= this.config.maxAlertsPerHour) {\r\n      return; // Exceeded hourly limit\r\n    }\r\n    \r\n    // Generate alerts for high and critical severity anomalies\r\n    const criticalAnomalies = anomalies.filter(a => a.severity === 'HIGH' || a.severity === 'CRITICAL');\r\n    \r\n    if (criticalAnomalies.length > 0) {\r\n      this.emit('criticalAnomalies', {\r\n        symbol,\r\n        anomalies: criticalAnomalies,\r\n        timestamp: now\r\n      });\r\n      \r\n      this.alertHistory.set(alertKey, now);\r\n      \r\n      logger.warn(`üö® Critical anomalies detected for ${symbol}:`, criticalAnomalies.map(a => a.description));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add detection result to history\r\n   */\r\n  private addToHistory(result: AnomalyDetectionResult): void {\r\n    this.detectionHistory.push(result);\r\n    \r\n    if (this.detectionHistory.length > this.maxHistorySize) {\r\n      this.detectionHistory = this.detectionHistory.slice(-this.maxHistorySize);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get detection history\r\n   */\r\n  public getDetectionHistory(symbol?: string, limit?: number): AnomalyDetectionResult[] {\r\n    let history = this.detectionHistory;\r\n    \r\n    if (symbol) {\r\n      history = history.filter(result => \r\n        result.anomalies.some(anomaly => anomaly.affectedSymbols.includes(symbol))\r\n      );\r\n    }\r\n    \r\n    if (limit) {\r\n      history = history.slice(-limit);\r\n    }\r\n    \r\n    return history;\r\n  }\r\n\r\n  /**\r\n   * Get current baselines\r\n   */\r\n  public getBaselines(): Map<string, StatisticalBaseline> {\r\n    return new Map(this.baselines);\r\n  }\r\n\r\n  /**\r\n   * Update configuration\r\n   */\r\n  public updateConfig(newConfig: Partial<AnomalyDetectionConfig>): void {\r\n    this.config = { ...this.config, ...newConfig };\r\n    logger.info('üîß Anomaly detection configuration updated');\r\n  }\r\n\r\n  /**\r\n   * Get current configuration\r\n   */\r\n  public getConfig(): AnomalyDetectionConfig {\r\n    return { ...this.config };\r\n  }\r\n\r\n  /**\r\n   * Reset baseline for a symbol\r\n   */\r\n  public async resetBaseline(symbol: string): Promise<void> {\r\n    this.baselines.delete(symbol);\r\n    await this.initializeBaselines([symbol]);\r\n    logger.info(`üîÑ Baseline reset for ${symbol}`);\r\n  }\r\n\r\n  /**\r\n   * Shutdown the anomaly detector\r\n   */\r\n  public async shutdown(): Promise<void> {\r\n    try {\r\n      logger.info('üõë Shutting down Anomaly Detector...');\r\n      \r\n      // Clear all data\r\n      this.baselines.clear();\r\n      this.detectionHistory = [];\r\n      this.alertHistory.clear();\r\n      \r\n      this.isInitialized = false;\r\n      \r\n      logger.info('‚úÖ Anomaly Detector shutdown completed');\r\n      \r\n    } catch (error) {\r\n      logger.error('‚ùå Error during Anomaly Detector shutdown:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\n// Export types\r\nexport type {\r\n  AnomalyDetectionConfig,\r\n  StatisticalBaseline,\r\n  AnomalyDetectionResult,\r\n  PatternAnomaly,\r\n  OrderBookAnomaly\r\n};"],"mappings":"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AA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC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MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;IAAA;IAAAC,CAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA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","ignoreList":[]}