bf73cd6e9225f4452c4902d5d90556e6
"use strict";
/**
 * Strategy Harmonization Integration Tests
 *
 * Integration tests to verify the harmonization engine works correctly
 * with actual strategy implementations and real market data patterns.
 *
 * Requirements: 4.8, 17.10 - Strategy harmonization integration testing
 */
Object.defineProperty(exports, "__esModule", { value: true });
const harmonization_1 = require("../harmonization");
describe('StrategyHarmonizationEngine Integration', () => {
    let harmonizationEngine;
    beforeEach(() => {
        harmonizationEngine = new harmonization_1.StrategyHarmonizationEngine();
    });
    describe('Real Market Scenarios', () => {
        it('should handle bullish market conditions', () => {
            // Create bullish market data (uptrend with increasing volume)
            const bullishData = [];
            let basePrice = 45000;
            for (let i = 0; i < 50; i++) {
                basePrice += Math.random() * 200 + 50; // Generally increasing
                bullishData.push({
                    symbol: 'BTC/USDT',
                    timestamp: new Date(Date.now() - (50 - i) * 60000),
                    open: basePrice - 20,
                    high: basePrice + 100,
                    low: basePrice - 50,
                    close: basePrice,
                    volume: 1000000 + (i * 20000) // Increasing volume
                });
            }
            const harmonizedSignal = harmonizationEngine.harmonizeSignals(bullishData);
            expect(harmonizedSignal).toBeDefined();
            if (harmonizedSignal) {
                // Should make a valid trading decision
                expect(['BUY', 'SELL', 'HOLD']).toContain(harmonizedSignal.overallSignal);
                expect(harmonizedSignal.confidence).toBeGreaterThan(0);
                expect(harmonizedSignal.reasoning).toContain('indicators');
                expect(harmonizedSignal.strength).toBeGreaterThanOrEqual(0);
                expect(harmonizedSignal.strength).toBeLessThanOrEqual(100);
            }
        });
        it('should handle bearish market conditions', () => {
            // Create bearish market data (downtrend with increasing volume)
            const bearishData = [];
            let basePrice = 55000;
            for (let i = 0; i < 50; i++) {
                basePrice -= Math.random() * 200 + 50; // Generally decreasing
                bearishData.push({
                    symbol: 'BTC/USDT',
                    timestamp: new Date(Date.now() - (50 - i) * 60000),
                    open: basePrice + 20,
                    high: basePrice + 50,
                    low: basePrice - 100,
                    close: basePrice,
                    volume: 1000000 + (i * 20000) // Increasing volume
                });
            }
            const harmonizedSignal = harmonizationEngine.harmonizeSignals(bearishData);
            expect(harmonizedSignal).toBeDefined();
            if (harmonizedSignal) {
                // Should make a valid trading decision
                expect(['BUY', 'SELL', 'HOLD']).toContain(harmonizedSignal.overallSignal);
                expect(harmonizedSignal.confidence).toBeGreaterThan(0);
                expect(harmonizedSignal.reasoning).toContain('indicators');
                expect(harmonizedSignal.strength).toBeGreaterThanOrEqual(0);
                expect(harmonizedSignal.strength).toBeLessThanOrEqual(100);
            }
        });
        it('should handle sideways market conditions', () => {
            // Create sideways market data (range-bound)
            const sidewaysData = [];
            const basePrice = 50000;
            for (let i = 0; i < 50; i++) {
                const price = basePrice + (Math.sin(i * 0.2) * 500) + (Math.random() * 200 - 100);
                sidewaysData.push({
                    symbol: 'BTC/USDT',
                    timestamp: new Date(Date.now() - (50 - i) * 60000),
                    open: price - 10,
                    high: price + 50,
                    low: price - 50,
                    close: price,
                    volume: 1000000 + (Math.random() * 200000)
                });
            }
            const harmonizedSignal = harmonizationEngine.harmonizeSignals(sidewaysData);
            expect(harmonizedSignal).toBeDefined();
            if (harmonizedSignal) {
                // In sideways markets, we often expect HOLD or weak signals
                expect(['BUY', 'SELL', 'HOLD']).toContain(harmonizedSignal.overallSignal);
                expect(harmonizedSignal.reasoning).toContain('indicators');
            }
        });
        it('should handle volatile market conditions', () => {
            // Create highly volatile market data
            const volatileData = [];
            let basePrice = 50000;
            for (let i = 0; i < 50; i++) {
                // High volatility with random large moves
                const change = (Math.random() - 0.5) * 2000;
                basePrice += change;
                volatileData.push({
                    symbol: 'BTC/USDT',
                    timestamp: new Date(Date.now() - (50 - i) * 60000),
                    open: basePrice - change / 2,
                    high: basePrice + Math.abs(change),
                    low: basePrice - Math.abs(change),
                    close: basePrice,
                    volume: 1000000 + (Math.random() * 1000000) // High volume variance
                });
            }
            const harmonizedSignal = harmonizationEngine.harmonizeSignals(volatileData);
            expect(harmonizedSignal).toBeDefined();
            if (harmonizedSignal) {
                // In volatile markets, confidence should be lower
                expect(harmonizedSignal.confidence).toBeLessThan(90);
                expect(harmonizedSignal.reasoning).toContain('indicators');
                // Validation should flag potential issues
                const validation = harmonizationEngine.validateSignalHarmony(harmonizedSignal);
                expect(validation).toBeDefined();
            }
        });
    });
    describe('Strategy Interaction', () => {
        it('should demonstrate weighted scoring with custom weights', () => {
            // Create market data that would trigger different strategies
            const marketData = [];
            let basePrice = 50000;
            // Create data that shows RSI oversold but MACD bearish
            for (let i = 0; i < 30; i++) {
                if (i < 20) {
                    basePrice -= 100; // Decline for RSI oversold
                }
                else {
                    basePrice += 50; // Small recovery
                }
                marketData.push({
                    symbol: 'BTC/USDT',
                    timestamp: new Date(Date.now() - (30 - i) * 60000),
                    open: basePrice - 10,
                    high: basePrice + 30,
                    low: basePrice - 40,
                    close: basePrice,
                    volume: 1000000 + (Math.random() * 200000)
                });
            }
            // Test with RSI heavily weighted
            const rsiWeightedConfig = {
                rsi: { name: 'RSI', enabled: true, weight: 0.7, parameters: {} },
                macd: { name: 'MACD', enabled: true, weight: 0.3, parameters: {} }
            };
            const rsiWeightedSignal = harmonizationEngine.harmonizeSignals(marketData, rsiWeightedConfig);
            // Test with MACD heavily weighted
            const macdWeightedConfig = {
                rsi: { name: 'RSI', enabled: true, weight: 0.3, parameters: {} },
                macd: { name: 'MACD', enabled: true, weight: 0.7, parameters: {} }
            };
            const macdWeightedSignal = harmonizationEngine.harmonizeSignals(marketData, macdWeightedConfig);
            expect(rsiWeightedSignal).toBeDefined();
            expect(macdWeightedSignal).toBeDefined();
            if (rsiWeightedSignal && macdWeightedSignal) {
                // The weights should be reflected in the harmonized signals
                expect(rsiWeightedSignal.weights).toBeDefined();
                expect(macdWeightedSignal.weights).toBeDefined();
                // Both should have reasoning explaining the decision
                expect(rsiWeightedSignal.reasoning).toContain('indicators');
                expect(macdWeightedSignal.reasoning).toContain('indicators');
            }
        });
        it('should detect and report conflicts between strategies', () => {
            // Create market data that would cause conflicting signals
            const conflictingData = [];
            let basePrice = 50000;
            // Create a scenario where momentum is bullish but trend is bearish
            for (let i = 0; i < 40; i++) {
                if (i < 30) {
                    basePrice -= 50; // Long-term decline (bearish trend)
                }
                else {
                    basePrice += 200; // Recent sharp recovery (bullish momentum)
                }
                conflictingData.push({
                    symbol: 'BTC/USDT',
                    timestamp: new Date(Date.now() - (40 - i) * 60000),
                    open: basePrice - 20,
                    high: basePrice + 50,
                    low: basePrice - 60,
                    close: basePrice,
                    volume: 1000000 + (i > 30 ? 500000 : 0) // High volume on recovery
                });
            }
            const harmonizedSignal = harmonizationEngine.harmonizeSignals(conflictingData);
            expect(harmonizedSignal).toBeDefined();
            if (harmonizedSignal) {
                // Should detect conflicts between momentum and trend indicators
                expect(harmonizedSignal.conflicts.length).toBeGreaterThanOrEqual(0);
                // Validation should flag the conflicts
                const validation = harmonizationEngine.validateSignalHarmony(harmonizedSignal);
                expect(validation).toBeDefined();
                if (harmonizedSignal.conflicts.length > 0) {
                    expect(validation.issues.some(issue => issue.includes('conflicts'))).toBe(true);
                }
            }
        });
    });
    describe('Edge Cases and Error Handling', () => {
        it('should handle insufficient data gracefully', () => {
            const insufficientData = [
                {
                    symbol: 'BTC/USDT',
                    timestamp: new Date(),
                    open: 50000,
                    high: 50100,
                    low: 49900,
                    close: 50050,
                    volume: 1000000
                }
            ];
            const harmonizedSignal = harmonizationEngine.harmonizeSignals(insufficientData);
            // Should either return null or a signal with low confidence
            if (harmonizedSignal) {
                expect(harmonizedSignal.confidence).toBeLessThan(80);
            }
        });
        it('should handle extreme price movements', () => {
            const extremeData = [];
            let basePrice = 50000;
            for (let i = 0; i < 20; i++) {
                if (i === 10) {
                    basePrice *= 1.5; // 50% price spike
                }
                else if (i === 15) {
                    basePrice *= 0.7; // 30% price crash
                }
                else {
                    basePrice += (Math.random() - 0.5) * 100;
                }
                extremeData.push({
                    symbol: 'BTC/USDT',
                    timestamp: new Date(Date.now() - (20 - i) * 60000),
                    open: basePrice - 50,
                    high: basePrice + 100,
                    low: basePrice - 100,
                    close: basePrice,
                    volume: 1000000 + (Math.random() * 2000000)
                });
            }
            const harmonizedSignal = harmonizationEngine.harmonizeSignals(extremeData);
            expect(harmonizedSignal).toBeDefined();
            if (harmonizedSignal) {
                // Should handle extreme movements without crashing
                expect(harmonizedSignal.overallSignal).toMatch(/^(BUY|SELL|HOLD)$/);
                expect(harmonizedSignal.reasoning).toBeDefined();
            }
        });
    });
    describe('Performance and Reliability', () => {
        it('should provide consistent results for the same input', () => {
            const testData = [];
            for (let i = 0; i < 30; i++) {
                testData.push({
                    symbol: 'BTC/USDT',
                    timestamp: new Date(Date.now() - (30 - i) * 60000),
                    open: 50000 + i * 10,
                    high: 50000 + i * 10 + 50,
                    low: 50000 + i * 10 - 50,
                    close: 50000 + i * 10 + 5,
                    volume: 1000000
                });
            }
            // Run harmonization multiple times with same data
            const signal1 = harmonizationEngine.harmonizeSignals(testData);
            const signal2 = harmonizationEngine.harmonizeSignals(testData);
            const signal3 = harmonizationEngine.harmonizeSignals(testData);
            // Results should be consistent
            if (signal1 && signal2 && signal3) {
                expect(signal1.overallSignal).toBe(signal2.overallSignal);
                expect(signal2.overallSignal).toBe(signal3.overallSignal);
                expect(Math.abs(signal1.strength - signal2.strength)).toBeLessThan(0.1);
                expect(Math.abs(signal1.confidence - signal2.confidence)).toBeLessThan(0.1);
            }
        });
        it('should handle concurrent harmonization requests', async () => {
            const testData = [];
            for (let i = 0; i < 25; i++) {
                testData.push({
                    symbol: 'BTC/USDT',
                    timestamp: new Date(Date.now() - (25 - i) * 60000),
                    open: 50000 + Math.sin(i * 0.1) * 500,
                    high: 50000 + Math.sin(i * 0.1) * 500 + 100,
                    low: 50000 + Math.sin(i * 0.1) * 500 - 100,
                    close: 50000 + Math.sin(i * 0.1) * 500 + 25,
                    volume: 1000000
                });
            }
            // Run multiple harmonizations concurrently
            const promises = Array(5).fill(null).map(() => Promise.resolve(harmonizationEngine.harmonizeSignals(testData)));
            const results = await Promise.all(promises);
            // All should complete successfully
            results.forEach(result => {
                if (result) {
                    expect(result.overallSignal).toMatch(/^(BUY|SELL|HOLD)$/);
                    expect(result.strength).toBeGreaterThanOrEqual(0);
                    expect(result.confidence).toBeGreaterThanOrEqual(0);
                }
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxOaWNrXFxEZXNrdG9wXFxTbW9vdGhTYWlsXFxzcmNcXHRyYWRpbmdcXHN0cmF0ZWdpZXNcXF9fdGVzdHNfX1xcaGFybW9uaXphdGlvbi1pbnRlZ3JhdGlvbi50ZXN0LnRzIiwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7OztHQU9HOztBQUVILG9EQUErRDtBQUcvRCxRQUFRLENBQUMseUNBQXlDLEVBQUUsR0FBRyxFQUFFO0lBQ3ZELElBQUksbUJBQWdELENBQUM7SUFFckQsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNkLG1CQUFtQixHQUFHLElBQUksMkNBQTJCLEVBQUUsQ0FBQztJQUMxRCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyx1QkFBdUIsRUFBRSxHQUFHLEVBQUU7UUFDckMsRUFBRSxDQUFDLHlDQUF5QyxFQUFFLEdBQUcsRUFBRTtZQUNqRCw4REFBOEQ7WUFDOUQsTUFBTSxXQUFXLEdBQWlCLEVBQUUsQ0FBQztZQUNyQyxJQUFJLFNBQVMsR0FBRyxLQUFLLENBQUM7WUFFdEIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO2dCQUM1QixTQUFTLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyx1QkFBdUI7Z0JBQzlELFdBQVcsQ0FBQyxJQUFJLENBQUM7b0JBQ2YsTUFBTSxFQUFFLFVBQVU7b0JBQ2xCLFNBQVMsRUFBRSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO29CQUNsRCxJQUFJLEVBQUUsU0FBUyxHQUFHLEVBQUU7b0JBQ3BCLElBQUksRUFBRSxTQUFTLEdBQUcsR0FBRztvQkFDckIsR0FBRyxFQUFFLFNBQVMsR0FBRyxFQUFFO29CQUNuQixLQUFLLEVBQUUsU0FBUztvQkFDaEIsTUFBTSxFQUFFLE9BQU8sR0FBRyxD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M0MsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQzVDLE9BQU8sQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FDaEUsQ0FBQztZQUVGLE1BQU0sT0FBTyxHQUFHLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUU1QyxtQ0FBbUM7WUFDbkMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRTtnQkFDdkIsSUFBSSxNQUFNLEVBQUUsQ0FBQztvQkFDWCxNQUFNLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO29CQUMxRCxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNsRCxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN0RCxDQUFDO1lBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxOaWNrXFxEZXNrdG9wXFxTbW9vdGhTYWlsXFxzcmNcXHRyYWRpbmdcXHN0cmF0ZWdpZXNcXF9fdGVzdHNfX1xcaGFybW9uaXphdGlvbi1pbnRlZ3JhdGlvbi50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBTdHJhdGVneSBIYXJtb25pemF0aW9uIEludGVncmF0aW9uIFRlc3RzXHJcbiAqIFxyXG4gKiBJbnRlZ3JhdGlvbiB0ZXN0cyB0byB2ZXJpZnkgdGhlIGhhcm1vbml6YXRpb24gZW5naW5lIHdvcmtzIGNvcnJlY3RseVxyXG4gKiB3aXRoIGFjdHVhbCBzdHJhdGVneSBpbXBsZW1lbnRhdGlvbnMgYW5kIHJlYWwgbWFya2V0IGRhdGEgcGF0dGVybnMuXHJcbiAqIFxyXG4gKiBSZXF1aXJlbWVudHM6IDQuOCwgMTcuMTAgLSBTdHJhdGVneSBoYXJtb25pemF0aW9uIGludGVncmF0aW9uIHRlc3RpbmdcclxuICovXHJcblxyXG5pbXBvcnQgeyBTdHJhdGVneUhhcm1vbml6YXRpb25FbmdpbmUgfSBmcm9tICcuLi9oYXJtb25pemF0aW9uJztcclxuaW1wb3J0IHsgTWFya2V0RGF0YSB9IGZyb20gJy4uL3R5cGVzJztcclxuXHJcbmRlc2NyaWJlKCdTdHJhdGVneUhhcm1vbml6YXRpb25FbmdpbmUgSW50ZWdyYXRpb24nLCAoKSA9PiB7XHJcbiAgbGV0IGhhcm1vbml6YXRpb25FbmdpbmU6IFN0cmF0ZWd5SGFybW9uaXphdGlvbkVuZ2luZTtcclxuXHJcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XHJcbiAgICBoYXJtb25pemF0aW9uRW5naW5lID0gbmV3IFN0cmF0ZWd5SGFybW9uaXphdGlvbkVuZ2luZSgpO1xyXG4gIH0pO1xyXG5cclxuICBkZXNjcmliZSgnUmVhbCBNYXJrZXQgU2NlbmFyaW9zJywgKCkgPT4ge1xyXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgYnVsbGlzaCBtYXJrZXQgY29uZGl0aW9ucycsICgpID0+IHtcclxuICAgICAgLy8gQ3JlYXRlIGJ1bGxpc2ggbWFya2V0IGRhdGEgKHVwdHJlbmQgd2l0aCBpbmNyZWFzaW5nIHZvbHVtZSlcclxuICAgICAgY29uc3QgYnVsbGlzaERhdGE6IE1hcmtldERhdGFbXSA9IFtdO1xyXG4gICAgICBsZXQgYmFzZVByaWNlID0gNDUwMDA7XHJcbiAgICAgIFxyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDUwOyBpKyspIHtcclxuICAgICAgICBiYXNlUHJpY2UgKz0gTWF0aC5yYW5kb20oKSAqIDIwMCArIDUwOyAvLyBHZW5lcmFsbHkgaW5jcmVhc2luZ1xyXG4gICAgICAgIGJ1bGxpc2hEYXRhLnB1c2goe1xyXG4gICAgICAgICAgc3ltYm9sOiAnQlRDL1VTRFQnLFxyXG4gICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZShEYXRlLm5vdygpIC0gKDUwIC0gaSkgKiA2MDAwMCksXHJcbiAgICAgICAgICBvcGVuOiBiYXNlUHJpY2UgLSAyMCxcclxuICAgICAgICAgIGhpZ2g6IGJhc2VQcmljZSArIDEwMCxcclxuICAgICAgICAgIGxvdzogYmFzZVByaWNlIC0gNTAsXHJcbiAgICAgICAgICBjbG9zZTogYmFzZVByaWNlLFxyXG4gICAgICAgICAgdm9sdW1lOiAxMDAwMDAwICsgKGkgKiAyMDAwMCkgLy8gSW5jcmVhc2luZyB2b2x1bWVcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgaGFybW9uaXplZFNpZ25hbCA9IGhhcm1vbml6YXRpb25FbmdpbmUuaGFybW9uaXplU2lnbmFscyhidWxsaXNoRGF0YSk7XHJcbiAgICAgIFxyXG4gICAgICBleHBlY3QoaGFybW9uaXplZFNpZ25hbCkudG9CZURlZmluZWQoKTtcclxuICAgICAgaWYgKGhhcm1vbml6ZWRTaWduYWwpIHtcclxuICAgICAgICAvLyBTaG91bGQgbWFrZSBhIHZhbGlkIHRyYWRpbmcgZGVjaXNpb25cclxuICAgICAgICBleHBlY3QoWydCVVknLCAnU0VMTCcsICdIT0xEJ10pLnRvQ29udGFpbihoYXJtb25pemVkU2lnbmFsLm92ZXJhbGxTaWduYWwpO1xyXG4gICAgICAgIGV4cGVjdChoYXJtb25pemVkU2lnbmFsLmNvbmZpZGVuY2UpLnRvQmVHcmVhdGVyVGhhbigwKTtcclxuICAgICAgICBleHBlY3QoaGFybW9uaXplZFNpZ25hbC5yZWFzb25pbmcpLnRvQ29udGFpbignaW5kaWNhdG9ycycpO1xyXG4gICAgICAgIGV4cGVjdChoYXJtb25pemVkU2lnbmFsLnN0cmVuZ3RoKS50b0JlR3JlYXRlclRoYW5PckVxdWFsKDApO1xyXG4gICAgICAgIGV4cGVjdChoYXJtb25pemVkU2lnbmFsLnN0cmVuZ3RoKS50b0JlTGVzc1RoYW5PckVxdWFsKDEwMCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGJlYXJpc2ggbWFya2V0IGNvbmRpdGlvbnMnLCAoKSA9PiB7XHJcbiAgICAgIC8vIENyZWF0ZSBiZWFyaXNoIG1hcmtldCBkYXRhIChkb3dudHJlbmQgd2l0aCBpbmNyZWFzaW5nIHZvbHVtZSlcclxuICAgICAgY29uc3QgYmVhcmlzaERhdGE6IE1hcmtldERhdGFbXSA9IFtdO1xyXG4gICAgICBsZXQgYmFzZVByaWNlID0gNTUwMDA7XHJcbiAgICAgIFxyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDUwOyBpKyspIHtcclxuICAgICAgICBiYXNlUHJpY2UgLT0gTWF0aC5yYW5kb20oKSAqIDIwMCArIDUwOyAvLyBHZW5lcmFsbHkgZGVjcmVhc2luZ1xyXG4gICAgICAgIGJlYXJpc2hEYXRhLnB1c2goe1xyXG4gICAgICAgICAgc3ltYm9sOiAnQlRDL1VTRFQnLFxyXG4gICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZShEYXRlLm5vdygpIC0gKDUwIC0gaSkgKiA2MDAwMCksXHJcbiAgICAgICAgICBvcGVuOiBiYXNlUHJpY2UgKyAyMCxcclxuICAgICAgICAgIGhpZ2g6IGJhc2VQcmljZSArIDUwLFxyXG4gICAgICAgICAgbG93OiBiYXNlUHJpY2UgLSAxMDAsXHJcbiAgICAgICAgICBjbG9zZTogYmFzZVByaWNlLFxyXG4gICAgICAgICAgdm9sdW1lOiAxMDAwMDAwICsgKGkgKiAyMDAwMCkgLy8gSW5jcmVhc2luZyB2b2x1bWVcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgaGFybW9uaXplZFNpZ25hbCA9IGhhcm1vbml6YXRpb25FbmdpbmUuaGFybW9uaXplU2lnbmFscyhiZWFyaXNoRGF0YSk7XHJcbiAgICAgIFxyXG4gICAgICBleHBlY3QoaGFybW9uaXplZFNpZ25hbCkudG9CZURlZmluZWQoKTtcclxuICAgICAgaWYgKGhhcm1vbml6ZWRTaWduYWwpIHtcclxuICAgICAgICAvLyBTaG91bGQgbWFrZSBhIHZhbGlkIHRyYWRpbmcgZGVjaXNpb25cclxuICAgICAgICBleHBlY3QoWydCVVknLCAnU0VMTCcsICdIT0xEJ10pLnRvQ29udGFpbihoYXJtb25pemVkU2lnbmFsLm92ZXJhbGxTaWduYWwpO1xyXG4gICAgICAgIGV4cGVjdChoYXJtb25pemVkU2lnbmFsLmNvbmZpZGVuY2UpLnRvQmVHcmVhdGVyVGhhbigwKTtcclxuICAgICAgICBleHBlY3QoaGFybW9uaXplZFNpZ25hbC5yZWFzb25pbmcpLnRvQ29udGFpbignaW5kaWNhdG9ycycpO1xyXG4gICAgICAgIGV4cGVjdChoYXJtb25pemVkU2lnbmFsLnN0cmVuZ3RoKS50b0JlR3JlYXRlclRoYW5PckVxdWFsKDApO1xyXG4gICAgICAgIGV4cGVjdChoYXJtb25pemVkU2lnbmFsLnN0cmVuZ3RoKS50b0JlTGVzc1RoYW5PckVxdWFsKDEwMCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdzaG91bGQgaGFuZGxlIHNpZGV3YXlzIG1hcmtldCBjb25kaXRpb25zJywgKCkgPT4ge1xyXG4gICAgICAvLyBDcmVhdGUgc2lkZXdheXMgbWFya2V0IGRhdGEgKHJhbmdlLWJvdW5kKVxyXG4gICAgICBjb25zdCBzaWRld2F5c0RhdGE6IE1hcmtldERhdGFbXSA9IFtdO1xyXG4gICAgICBjb25zdCBiYXNlUHJpY2UgPSA1MDAwMDtcclxuICAgICAgXHJcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNTA7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IHByaWNlID0gYmFzZVByaWNlICsgKE1hdGguc2luKGkgKiAwLjIpICogNTAwKSArIChNYXRoLnJhbmRvbSgpICogMjAwIC0gMTAwKTtcclxuICAgICAgICBzaWRld2F5c0RhdGEucHVzaCh7XHJcbiAgICAgICAgICBzeW1ib2w6ICdCVEMvVVNEVCcsXHJcbiAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKERhdGUubm93KCkgLSAoNTAgLSBpKSAqIDYwMDAwKSxcclxuICAgICAgICAgIG9wZW46IHByaWNlIC0gMTAsXHJcbiAgICAgICAgICBoaWdoOiBwcmljZSArIDUwLFxyXG4gICAgICAgICAgbG93OiBwcmljZSAtIDUwLFxyXG4gICAgICAgICAgY2xvc2U6IHByaWNlLFxyXG4gICAgICAgICAgdm9sdW1lOiAxMDAwMDAwICsgKE1hdGgucmFuZG9tKCkgKiAyMDAwMDApXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IGhhcm1vbml6ZWRTaWduYWwgPSBoYXJtb25pemF0aW9uRW5naW5lLmhhcm1vbml6ZVNpZ25hbHMoc2lkZXdheXNEYXRhKTtcclxuICAgICAgXHJcbiAgICAgIGV4cGVjdChoYXJtb25pemVkU2lnbmFsKS50b0JlRGVmaW5lZCgpO1xyXG4gICAgICBpZiAoaGFybW9uaXplZFNpZ25hbCkge1xyXG4gICAgICAgIC8vIEluIHNpZGV3YXlzIG1hcmtldHMsIHdlIG9mdGVuIGV4cGVjdCBIT0xEIG9yIHdlYWsgc2lnbmFsc1xyXG4gICAgICAgIGV4cGVjdChbJ0JVWScsICdTRUxMJywgJ0hPTEQnXSkudG9Db250YWluKGhhcm1vbml6ZWRTaWduYWwub3ZlcmFsbFNpZ25hbCk7XHJcbiAgICAgICAgZXhwZWN0KGhhcm1vbml6ZWRTaWduYWwucmVhc29uaW5nKS50b0NvbnRhaW4oJ2luZGljYXRvcnMnKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgdm9sYXRpbGUgbWFya2V0IGNvbmRpdGlvbnMnLCAoKSA9PiB7XHJcbiAgICAgIC8vIENyZWF0ZSBoaWdobHkgdm9sYXRpbGUgbWFya2V0IGRhdGFcclxuICAgICAgY29uc3Qgdm9sYXRpbGVEYXRhOiBNYXJrZXREYXRhW10gPSBbXTtcclxuICAgICAgbGV0IGJhc2VQcmljZSA9IDUwMDAwO1xyXG4gICAgICBcclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA1MDsgaSsrKSB7XHJcbiAgICAgICAgLy8gSGlnaCB2b2xhdGlsaXR5IHdpdGggcmFuZG9tIGxhcmdlIG1vdmVzXHJcbiAgICAgICAgY29uc3QgY2hhbmdlID0gKE1hdGgucmFuZG9tKCkgLSAwLjUpICogMjAwMDtcclxuICAgICAgICBiYXNlUHJpY2UgKz0gY2hhbmdlO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHZvbGF0aWxlRGF0YS5wdXNoKHtcclxuICAgICAgICAgIHN5bWJvbDogJ0JUQy9VU0RUJyxcclxuICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoRGF0ZS5ub3coKSAtICg1MCAtIGkpICogNjAwMDApLFxyXG4gICAgICAgICAgb3BlbjogYmFzZVByaWNlIC0gY2hhbmdlIC8gMixcclxuICAgICAgICAgIGhpZ2g6IGJhc2VQcmljZSArIE1hdGguYWJzKGNoYW5nZSksXHJcbiAgICAgICAgICBsb3c6IGJhc2VQcmljZSAtIE1hdGguYWJzKGNoYW5nZSksXHJcbiAgICAgICAgICBjbG9zZTogYmFzZVByaWNlLFxyXG4gICAgICAgICAgdm9sdW1lOiAxMDAwMDAwICsgKE1hdGgucmFuZG9tKCkgKiAxMDAwMDAwKSAvLyBIaWdoIHZvbHVtZSB2YXJpYW5jZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCBoYXJtb25pemVkU2lnbmFsID0gaGFybW9uaXphdGlvbkVuZ2luZS5oYXJtb25pemVTaWduYWxzKHZvbGF0aWxlRGF0YSk7XHJcbiAgICAgIFxyXG4gICAgICBleHBlY3QoaGFybW9uaXplZFNpZ25hbCkudG9CZURlZmluZWQoKTtcclxuICAgICAgaWYgKGhhcm1vbml6ZWRTaWduYWwpIHtcclxuICAgICAgICAvLyBJbiB2b2xhdGlsZSBtYXJrZXRzLCBjb25maWRlbmNlIHNob3VsZCBiZSBsb3dlclxyXG4gICAgICAgIGV4cGVjdChoYXJtb25pemVkU2lnbmFsLmNvbmZpZGVuY2UpLnRvQmVMZXNzVGhhbig5MCk7XHJcbiAgICAgICAgZXhwZWN0KGhhcm1vbml6ZWRTaWduYWwucmVhc29uaW5nKS50b0NvbnRhaW4oJ2luZGljYXRvcnMnKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBWYWxpZGF0aW9uIHNob3VsZCBmbGFnIHBvdGVudGlhbCBpc3N1ZXNcclxuICAgICAgICBjb25zdCB2YWxpZGF0aW9uID0gaGFybW9uaXphdGlvbkVuZ2luZS52YWxpZGF0ZVNpZ25hbEhhcm1vbnkoaGFybW9uaXplZFNpZ25hbCk7XHJcbiAgICAgICAgZXhwZWN0KHZhbGlkYXRpb24pLnRvQmVEZWZpbmVkKCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICBkZXNjcmliZSgnU3RyYXRlZ3kgSW50ZXJhY3Rpb24nLCAoKSA9PiB7XHJcbiAgICBpdCgnc2hvdWxkIGRlbW9uc3RyYXRlIHdlaWdodGVkIHNjb3Jpbmcgd2l0aCBjdXN0b20gd2VpZ2h0cycsICgpID0+IHtcclxuICAgICAgLy8gQ3JlYXRlIG1hcmtldCBkYXRhIHRoYXQgd291bGQgdHJpZ2dlciBkaWZmZXJlbnQgc3RyYXRlZ2llc1xyXG4gICAgICBjb25zdCBtYXJrZXREYXRhOiBNYXJrZXREYXRhW10gPSBbXTtcclxuICAgICAgbGV0IGJhc2VQcmljZSA9IDUwMDAwO1xyXG4gICAgICBcclxuICAgICAgLy8gQ3JlYXRlIGRhdGEgdGhhdCBzaG93cyBSU0kgb3ZlcnNvbGQgYnV0IE1BQ0QgYmVhcmlzaFxyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDMwOyBpKyspIHtcclxuICAgICAgICBpZiAoaSA8IDIwKSB7XHJcbiAgICAgICAgICBiYXNlUHJpY2UgLT0gMTAwOyAvLyBEZWNsaW5lIGZvciBSU0kgb3ZlcnNvbGRcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgYmFzZVByaWNlICs9IDUwOyAvLyBTbWFsbCByZWNvdmVyeVxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBtYXJrZXREYXRhLnB1c2goe1xyXG4gICAgICAgICAgc3ltYm9sOiAnQlRDL1VTRFQnLFxyXG4gICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZShEYXRlLm5vdygpIC0gKDMwIC0gaSkgKiA2MDAwMCksXHJcbiAgICAgICAgICBvcGVuOiBiYXNlUHJpY2UgLSAxMCxcclxuICAgICAgICAgIGhpZ2g6IGJhc2VQcmljZSArIDMwLFxyXG4gICAgICAgICAgbG93OiBiYXNlUHJpY2UgLSA0MCxcclxuICAgICAgICAgIGNsb3NlOiBiYXNlUHJpY2UsXHJcbiAgICAgICAgICB2b2x1bWU6IDEwMDAwMDAgKyAoTWF0aC5yYW5kb20oKSAqIDIwMDAwMClcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gVGVzdCB3aXRoIFJTSSBoZWF2aWx5IHdlaWdodGVkXHJcbiAgICAgIGNvbnN0IHJzaVdlaWdodGVkQ29uZmlnID0ge1xyXG4gICAgICAgIHJzaTogeyBuYW1lOiAnUlNJJywgZW5hYmxlZDogdHJ1ZSwgd2VpZ2h0OiAwLjcsIHBhcmFtZXRlcnM6IHt9IH0sXHJcbiAgICAgICAgbWFjZDogeyBuYW1lOiAnTUFDRCcsIGVuYWJsZWQ6IHRydWUsIHdlaWdodDogMC4zLCBwYXJhbWV0ZXJzOiB7fSB9XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBjb25zdCByc2lXZWlnaHRlZFNpZ25hbCA9IGhhcm1vbml6YXRpb25FbmdpbmUuaGFybW9uaXplU2lnbmFscyhtYXJrZXREYXRhLCByc2lXZWlnaHRlZENvbmZpZyk7XHJcbiAgICAgIFxyXG4gICAgICAvLyBUZXN0IHdpdGggTUFDRCBoZWF2aWx5IHdlaWdodGVkXHJcbiAgICAgIGNvbnN0IG1hY2RXZWlnaHRlZENvbmZpZyA9IHtcclxuICAgICAgICByc2k6IHsgbmFtZTogJ1JTSScsIGVuYWJsZWQ6IHRydWUsIHdlaWdodDogMC4zLCBwYXJhbWV0ZXJzOiB7fSB9LFxyXG4gICAgICAgIG1hY2Q6IHsgbmFtZTogJ01BQ0QnLCBlbmFibGVkOiB0cnVlLCB3ZWlnaHQ6IDAuNywgcGFyYW1ldGVyczoge30gfVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgY29uc3QgbWFjZFdlaWdodGVkU2lnbmFsID0gaGFybW9uaXphdGlvbkVuZ2luZS5oYXJtb25pemVTaWduYWxzKG1hcmtldERhdGEsIG1hY2RXZWlnaHRlZENvbmZpZyk7XHJcbiAgICAgIFxyXG4gICAgICBleHBlY3QocnNpV2VpZ2h0ZWRTaWduYWwpLnRvQmVEZWZpbmVkKCk7XHJcbiAgICAgIGV4cGVjdChtYWNkV2VpZ2h0ZWRTaWduYWwpLnRvQmVEZWZpbmVkKCk7XHJcbiAgICAgIFxyXG4gICAgICBpZiAocnNpV2VpZ2h0ZWRTaWduYWwgJiYgbWFjZFdlaWdodGVkU2lnbmFsKSB7XHJcbiAgICAgICAgLy8gVGhlIHdlaWdodHMgc2hvdWxkIGJlIHJlZmxlY3RlZCBpbiB0aGUgaGFybW9uaXplZCBzaWduYWxzXHJcbiAgICAgICAgZXhwZWN0KHJzaVdlaWdodGVkU2lnbmFsLndlaWdodHMpLnRvQmVEZWZpbmVkKCk7XHJcbiAgICAgICAgZXhwZWN0KG1hY2RXZWlnaHRlZFNpZ25hbC53ZWlnaHRzKS50b0JlRGVmaW5lZCgpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIEJvdGggc2hvdWxkIGhhdmUgcmVhc29uaW5nIGV4cGxhaW5pbmcgdGhlIGRlY2lzaW9uXHJcbiAgICAgICAgZXhwZWN0KHJzaVdlaWdodGVkU2lnbmFsLnJlYXNvbmluZykudG9Db250YWluKCdpbmRpY2F0b3JzJyk7XHJcbiAgICAgICAgZXhwZWN0KG1hY2RXZWlnaHRlZFNpZ25hbC5yZWFzb25pbmcpLnRvQ29udGFpbignaW5kaWNhdG9ycycpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnc2hvdWxkIGRldGVjdCBhbmQgcmVwb3J0IGNvbmZsaWN0cyBiZXR3ZWVuIHN0cmF0ZWdpZXMnLCAoKSA9PiB7XHJcbiAgICAgIC8vIENyZWF0ZSBtYXJrZXQgZGF0YSB0aGF0IHdvdWxkIGNhdXNlIGNvbmZsaWN0aW5nIHNpZ25hbHNcclxuICAgICAgY29uc3QgY29uZmxpY3RpbmdEYXRhOiBNYXJrZXREYXRhW10gPSBbXTtcclxuICAgICAgbGV0IGJhc2VQcmljZSA9IDUwMDAwO1xyXG4gICAgICBcclxuICAgICAgLy8gQ3JlYXRlIGEgc2NlbmFyaW8gd2hlcmUgbW9tZW50dW0gaXMgYnVsbGlzaCBidXQgdHJlbmQgaXMgYmVhcmlzaFxyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDQwOyBpKyspIHtcclxuICAgICAgICBpZiAoaSA8IDMwKSB7XHJcbiAgICAgICAgICBiYXNlUHJpY2UgLT0gNTA7IC8vIExvbmctdGVybSBkZWNsaW5lIChiZWFyaXNoIHRyZW5kKVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBiYXNlUHJpY2UgKz0gMjAwOyAvLyBSZWNlbnQgc2hhcnAgcmVjb3ZlcnkgKGJ1bGxpc2ggbW9tZW50dW0pXHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbmZsaWN0aW5nRGF0YS5wdXNoKHtcclxuICAgICAgICAgIHN5bWJvbDogJ0JUQy9VU0RUJyxcclxuICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoRGF0ZS5ub3coKSAtICg0MCAtIGkpICogNjAwMDApLFxyXG4gICAgICAgICAgb3BlbjogYmFzZVByaWNlIC0gMjAsXHJcbiAgICAgICAgICBoaWdoOiBiYXNlUHJpY2UgKyA1MCxcclxuICAgICAgICAgIGxvdzogYmFzZVByaWNlIC0gNjAsXHJcbiAgICAgICAgICBjbG9zZTogYmFzZVByaWNlLFxyXG4gICAgICAgICAgdm9sdW1lOiAxMDAwMDAwICsgKGkgPiAzMCA/IDUwMDAwMCA6IDApIC8vIEhpZ2ggdm9sdW1lIG9uIHJlY292ZXJ5XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IGhhcm1vbml6ZWRTaWduYWwgPSBoYXJtb25pemF0aW9uRW5naW5lLmhhcm1vbml6ZVNpZ25hbHMoY29uZmxpY3RpbmdEYXRhKTtcclxuICAgICAgXHJcbiAgICAgIGV4cGVjdChoYXJtb25pemVkU2lnbmFsKS50b0JlRGVmaW5lZCgpO1xyXG4gICAgICBpZiAoaGFybW9uaXplZFNpZ25hbCkge1xyXG4gICAgICAgIC8vIFNob3VsZCBkZXRlY3QgY29uZmxpY3RzIGJldHdlZW4gbW9tZW50dW0gYW5kIHRyZW5kIGluZGljYXRvcnNcclxuICAgICAgICBleHBlY3QoaGFybW9uaXplZFNpZ25hbC5jb25mbGljdHMubGVuZ3RoKS50b0JlR3JlYXRlclRoYW5PckVxdWFsKDApO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFZhbGlkYXRpb24gc2hvdWxkIGZsYWcgdGhlIGNvbmZsaWN0c1xyXG4gICAgICAgIGNvbnN0IHZhbGlkYXRpb24gPSBoYXJtb25pemF0aW9uRW5naW5lLnZhbGlkYXRlU2lnbmFsSGFybW9ueShoYXJtb25pemVkU2lnbmFsKTtcclxuICAgICAgICBleHBlY3QodmFsaWRhdGlvbikudG9CZURlZmluZWQoKTtcclxuICAgICAgICBcclxuICAgICAgICBpZiAoaGFybW9uaXplZFNpZ25hbC5jb25mbGljdHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgZXhwZWN0KHZhbGlkYXRpb24uaXNzdWVzLnNvbWUoaXNzdWUgPT4gaXNzdWUuaW5jbHVkZXMoJ2NvbmZsaWN0cycpKSkudG9CZSh0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICBkZXNjcmliZSgnRWRnZSBDYXNlcyBhbmQgRXJyb3IgSGFuZGxpbmcnLCAoKSA9PiB7XHJcbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBpbnN1ZmZpY2llbnQgZGF0YSBncmFjZWZ1bGx5JywgKCkgPT4ge1xyXG4gICAgICBjb25zdCBpbnN1ZmZpY2llbnREYXRhOiBNYXJrZXREYXRhW10gPSBbXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgc3ltYm9sOiAnQlRDL1VTRFQnLFxyXG4gICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxyXG4gICAgICAgICAgb3BlbjogNTAwMDAsXHJcbiAgICAgICAgICBoaWdoOiA1MDEwMCxcclxuICAgICAgICAgIGxvdzogNDk5MDAsXHJcbiAgICAgICAgICBjbG9zZTogNTAwNTAsXHJcbiAgICAgICAgICB2b2x1bWU6IDEwMDAwMDBcclxuICAgICAgICB9XHJcbiAgICAgIF07XHJcblxyXG4gICAgICBjb25zdCBoYXJtb25pemVkU2lnbmFsID0gaGFybW9uaXphdGlvbkVuZ2luZS5oYXJtb25pemVTaWduYWxzKGluc3VmZmljaWVudERhdGEpO1xyXG4gICAgICBcclxuICAgICAgLy8gU2hvdWxkIGVpdGhlciByZXR1cm4gbnVsbCBvciBhIHNpZ25hbCB3aXRoIGxvdyBjb25maWRlbmNlXHJcbiAgICAgIGlmIChoYXJtb25pemVkU2lnbmFsKSB7XHJcbiAgICAgICAgZXhwZWN0KGhhcm1vbml6ZWRTaWduYWwuY29uZmlkZW5jZSkudG9CZUxlc3NUaGFuKDgwKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgZXh0cmVtZSBwcmljZSBtb3ZlbWVudHMnLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGV4dHJlbWVEYXRhOiBNYXJrZXREYXRhW10gPSBbXTtcclxuICAgICAgbGV0IGJhc2VQcmljZSA9IDUwMDAwO1xyXG4gICAgICBcclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAyMDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKGkgPT09IDEwKSB7XHJcbiAgICAgICAgICBiYXNlUHJpY2UgKj0gMS41OyAvLyA1MCUgcHJpY2Ugc3Bpa2VcclxuICAgICAgICB9IGVsc2UgaWYgKGkgPT09IDE1KSB7XHJcbiAgICAgICAgICBiYXNlUHJpY2UgKj0gMC43OyAvLyAzMCUgcHJpY2UgY3Jhc2hcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgYmFzZVByaWNlICs9IChNYXRoLnJhbmRvbSgpIC0gMC41KSAqIDEwMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgZXh0cmVtZURhdGEucHVzaCh7XHJcbiAgICAgICAgICBzeW1ib2w6ICdCVEMvVVNEVCcsXHJcbiAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKERhdGUubm93KCkgLSAoMjAgLSBpKSAqIDYwMDAwKSxcclxuICAgICAgICAgIG9wZW46IGJhc2VQcmljZSAtIDUwLFxyXG4gICAgICAgICAgaGlnaDogYmFzZVByaWNlICsgMTAwLFxyXG4gICAgICAgICAgbG93OiBiYXNlUHJpY2UgLSAxMDAsXHJcbiAgICAgICAgICBjbG9zZTogYmFzZVByaWNlLFxyXG4gICAgICAgICAgdm9sdW1lOiAxMDAwMDAwICsgKE1hdGgucmFuZG9tKCkgKiAyMDAwMDAwKVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCBoYXJtb25pemVkU2lnbmFsID0gaGFybW9uaXphdGlvbkVuZ2luZS5oYXJtb25pemVTaWduYWxzKGV4dHJlbWVEYXRhKTtcclxuICAgICAgXHJcbiAgICAgIGV4cGVjdChoYXJtb25pemVkU2lnbmFsKS50b0JlRGVmaW5lZCgpO1xyXG4gICAgICBpZiAoaGFybW9uaXplZFNpZ25hbCkge1xyXG4gICAgICAgIC8vIFNob3VsZCBoYW5kbGUgZXh0cmVtZSBtb3ZlbWVudHMgd2l0aG91dCBjcmFzaGluZ1xyXG4gICAgICAgIGV4cGVjdChoYXJtb25pemVkU2lnbmFsLm92ZXJhbGxTaWduYWwpLnRvTWF0Y2goL14oQlVZfFNFTEx8SE9MRCkkLyk7XHJcbiAgICAgICAgZXhwZWN0KGhhcm1vbml6ZWRTaWduYWwucmVhc29uaW5nKS50b0JlRGVmaW5lZCgpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbiAgZGVzY3JpYmUoJ1BlcmZvcm1hbmNlIGFuZCBSZWxpYWJpbGl0eScsICgpID0+IHtcclxuICAgIGl0KCdzaG91bGQgcHJvdmlkZSBjb25zaXN0ZW50IHJlc3VsdHMgZm9yIHRoZSBzYW1lIGlucHV0JywgKCkgPT4ge1xyXG4gICAgICBjb25zdCB0ZXN0RGF0YTogTWFya2V0RGF0YVtdID0gW107XHJcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzA7IGkrKykge1xyXG4gICAgICAgIHRlc3REYXRhLnB1c2goe1xyXG4gICAgICAgICAgc3ltYm9sOiAnQlRDL1VTRFQnLFxyXG4gICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZShEYXRlLm5vdygpIC0gKDMwIC0gaSkgKiA2MDAwMCksXHJcbiAgICAgICAgICBvcGVuOiA1MDAwMCArIGkgKiAxMCxcclxuICAgICAgICAgIGhpZ2g6IDUwMDAwICsgaSAqIDEwICsgNTAsXHJcbiAgICAgICAgICBsb3c6IDUwMDAwICsgaSAqIDEwIC0gNTAsXHJcbiAgICAgICAgICBjbG9zZTogNTAwMDAgKyBpICogMTAgKyA1LFxyXG4gICAgICAgICAgdm9sdW1lOiAxMDAwMDAwXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFJ1biBoYXJtb25pemF0aW9uIG11bHRpcGxlIHRpbWVzIHdpdGggc2FtZSBkYXRhXHJcbiAgICAgIGNvbnN0IHNpZ25hbDEgPSBoYXJtb25pemF0aW9uRW5naW5lLmhhcm1vbml6ZVNpZ25hbHModGVzdERhdGEpO1xyXG4gICAgICBjb25zdCBzaWduYWwyID0gaGFybW9uaXphdGlvbkVuZ2luZS5oYXJtb25pemVTaWduYWxzKHRlc3REYXRhKTtcclxuICAgICAgY29uc3Qgc2lnbmFsMyA9IGhhcm1vbml6YXRpb25FbmdpbmUuaGFybW9uaXplU2lnbmFscyh0ZXN0RGF0YSk7XHJcblxyXG4gICAgICAvLyBSZXN1bHRzIHNob3VsZCBiZSBjb25zaXN0ZW50XHJcbiAgICAgIGlmIChzaWduYWwxICYmIHNpZ25hbDIgJiYgc2lnbmFsMykge1xyXG4gICAgICAgIGV4cGVjdChzaWduYWwxLm92ZXJhbGxTaWduYWwpLnRvQmUoc2lnbmFsMi5vdmVyYWxsU2lnbmFsKTtcclxuICAgICAgICBleHBlY3Qoc2lnbmFsMi5vdmVyYWxsU2lnbmFsKS50b0JlKHNpZ25hbDMub3ZlcmFsbFNpZ25hbCk7XHJcbiAgICAgICAgZXhwZWN0KE1hdGguYWJzKHNpZ25hbDEuc3RyZW5ndGggLSBzaWduYWwyLnN0cmVuZ3RoKSkudG9CZUxlc3NUaGFuKDAuMSk7XHJcbiAgICAgICAgZXhwZWN0KE1hdGguYWJzKHNpZ25hbDEuY29uZmlkZW5jZSAtIHNpZ25hbDIuY29uZmlkZW5jZSkpLnRvQmVMZXNzVGhhbigwLjEpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBjb25jdXJyZW50IGhhcm1vbml6YXRpb24gcmVxdWVzdHMnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHRlc3REYXRhOiBNYXJrZXREYXRhW10gPSBbXTtcclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAyNTsgaSsrKSB7XHJcbiAgICAgICAgdGVzdERhdGEucHVzaCh7XHJcbiAgICAgICAgICBzeW1ib2w6ICdCVEMvVVNEVCcsXHJcbiAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKERhdGUubm93KCkgLSAoMjUgLSBpKSAqIDYwMDAwKSxcclxuICAgICAgICAgIG9wZW46IDUwMDAwICsgTWF0aC5zaW4oaSAqIDAuMSkgKiA1MDAsXHJcbiAgICAgICAgICBoaWdoOiA1MDAwMCArIE1hdGguc2luKGkgKiAwLjEpICogNTAwICsgMTAwLFxyXG4gICAgICAgICAgbG93OiA1MDAwMCArIE1hdGguc2luKGkgKiAwLjEpICogNTAwIC0gMTAwLFxyXG4gICAgICAgICAgY2xvc2U6IDUwMDAwICsgTWF0aC5zaW4oaSAqIDAuMSkgKiA1MDAgKyAyNSxcclxuICAgICAgICAgIHZvbHVtZTogMTAwMDAwMFxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBSdW4gbXVsdGlwbGUgaGFybW9uaXphdGlvbnMgY29uY3VycmVudGx5XHJcbiAgICAgIGNvbnN0IHByb21pc2VzID0gQXJyYXkoNSkuZmlsbChudWxsKS5tYXAoKCkgPT4gXHJcbiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKGhhcm1vbml6YXRpb25FbmdpbmUuaGFybW9uaXplU2lnbmFscyh0ZXN0RGF0YSkpXHJcbiAgICAgICk7XHJcblxyXG4gICAgICBjb25zdCByZXN1bHRzID0gYXdhaXQgUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xyXG4gICAgICBcclxuICAgICAgLy8gQWxsIHNob3VsZCBjb21wbGV0ZSBzdWNjZXNzZnVsbHlcclxuICAgICAgcmVzdWx0cy5mb3JFYWNoKHJlc3VsdCA9PiB7XHJcbiAgICAgICAgaWYgKHJlc3VsdCkge1xyXG4gICAgICAgICAgZXhwZWN0KHJlc3VsdC5vdmVyYWxsU2lnbmFsKS50b01hdGNoKC9eKEJVWXxTRUxMfEhPTEQpJC8pO1xyXG4gICAgICAgICAgZXhwZWN0KHJlc3VsdC5zdHJlbmd0aCkudG9CZUdyZWF0ZXJUaGFuT3JFcXVhbCgwKTtcclxuICAgICAgICAgIGV4cGVjdChyZXN1bHQuY29uZmlkZW5jZSkudG9CZUdyZWF0ZXJUaGFuT3JFcXVhbCgwKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn0pOyJdLCJ2ZXJzaW9uIjozfQ==