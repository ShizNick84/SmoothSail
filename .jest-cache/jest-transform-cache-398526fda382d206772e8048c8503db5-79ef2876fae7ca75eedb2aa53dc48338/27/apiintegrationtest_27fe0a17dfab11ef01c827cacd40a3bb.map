{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\tests\\integration\\api-integration.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\tests\\integration\\api-integration.test.ts"],"sourcesContent":["/**\r\n * API Integration Tests\r\n * \r\n * Integration tests for external API connections, SSH tunnel routing,\r\n * and system integration with external services.\r\n * \r\n * Requirements: 17.2, 17.4, 17.5 - System integration tests with external APIs\r\n */\r\n\r\nimport axios from 'axios';\r\nimport { SSHTunnelManager } from '@/infrastructure/ssh-tunnel-manager';\r\nimport { SystemMonitor } from '@/infrastructure/system-monitor';\r\n\r\n// Mock external dependencies for testing\r\njest.mock('axios');\r\njest.mock('@/core/logging/logger', () => ({\r\n  logger: {\r\n    info: jest.fn(),\r\n    debug: jest.fn(),\r\n    warn: jest.fn(),\r\n    error: jest.fn()\r\n  }\r\n}));\r\n\r\nconst mockedAxios = axios as jest.Mocked<typeof axios>;\r\n\r\ndescribe('API Integration Tests', () => {\r\n  let tunnelManager: SSHTunnelManager;\r\n  let systemMonitor: SystemMonitor;\r\n\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    \r\n    // Mock successful axios responses\r\n    mockedAxios.get.mockResolvedValue({\r\n      data: { server_time: Date.now() },\r\n      status: 200,\r\n      statusText: 'OK',\r\n      headers: {},\r\n      config: {}\r\n    });\r\n\r\n    tunnelManager = new SSHTunnelManager();\r\n    systemMonitor = new SystemMonitor();\r\n  });\r\n\r\n  describe('SSH Tunnel Integration', () => {\r\n    it('should establish SSH tunnel connection', async () => {\r\n      const tunnelConfig = {\r\n        host: '168.138.104.117', // Oracle Free Tier IP\r\n        port: 22,\r\n        username: 'ubuntu',\r\n        privateKeyPath: '/path/to/key',\r\n        localPort: 8080,\r\n        remotePort: 80,\r\n        keepAlive: true,\r\n        compression: true\r\n      };\r\n\r\n      // Mock successful tunnel establishment\r\n      const mockTunnel = {\r\n        isConnected: true,\r\n        localPort: 8080,\r\n        remotePort: 80,\r\n        host: tunnelConfig.host,\r\n        status: 'CONNECTED',\r\n        lastActivity: new Date(),\r\n        bytesTransferred: 0,\r\n        connectionTime: new Date()\r\n      };\r\n\r\n      // Test tunnel establishment\r\n      const result = await tunnelManager.establishTunnel(tunnelConfig);\r\n      \r\n      expect(result).toBeDefined();\r\n      expect(typeof result.isConnected).toBe('boolean');\r\n      expect(typeof result.localPort).toBe('number');\r\n      expect(typeof result.remotePort).toBe('number');\r\n    });\r\n\r\n    it('should handle tunnel connection failures gracefully', async () => {\r\n      const invalidConfig = {\r\n        host: 'invalid-host',\r\n        port: 22,\r\n        username: 'invalid-user',\r\n        privateKeyPath: '/invalid/path',\r\n        localPort: 8080,\r\n        remotePort: 80,\r\n        keepAlive: true,\r\n        compression: true\r\n      };\r\n\r\n      // Test should handle connection failure without throwing\r\n      await expect(async () => {\r\n        await tunnelManager.establishTunnel(invalidConfig);\r\n      }).not.toThrow();\r\n    });\r\n\r\n    it('should monitor tunnel health and performance', async () => {\r\n      const tunnelConfig = {\r\n        host: '168.138.104.117',\r\n        port: 22,\r\n        username: 'ubuntu',\r\n        privateKeyPath: '/path/to/key',\r\n        localPort: 8080,\r\n        remotePort: 80,\r\n        keepAlive: true,\r\n        compression: true\r\n      };\r\n\r\n      // Establish tunnel first\r\n      await tunnelManager.establishTunnel(tunnelConfig);\r\n\r\n      // Monitor tunnel health\r\n      const healthStatus = await tunnelManager.monitorTunnelHealth();\r\n      \r\n      expect(healthStatus).toBeDefined();\r\n      expect(typeof healthStatus.isHealthy).toBe('boolean');\r\n      expect(typeof healthStatus.latency).toBe('number');\r\n      expect(typeof healthStatus.throughput).toBe('number');\r\n      expect(healthStatus.lastCheck).toBeInstanceOf(Date);\r\n    });\r\n\r\n    it('should implement automatic reconnection on failure', async () => {\r\n      const tunnelConfig = {\r\n        host: '168.138.104.117',\r\n        port: 22,\r\n        username: 'ubuntu',\r\n        privateKeyPath: '/path/to/key',\r\n        localPort: 8080,\r\n        remotePort: 80,\r\n        keepAlive: true,\r\n        compression: true\r\n      };\r\n\r\n      // Simulate tunnel failure and recovery\r\n      let connectionAttempts = 0;\r\n      const originalEstablishTunnel = tunnelManager.establishTunnel;\r\n      \r\n      tunnelManager.establishTunnel = jest.fn().mockImplementation(async (config) => {\r\n        connectionAttempts++;\r\n        if (connectionAttempts <= 2) {\r\n          throw new Error('Connection failed');\r\n        }\r\n        return originalEstablishTunnel.call(tunnelManager, config);\r\n      });\r\n\r\n      // Test automatic reconnection\r\n      const result = await tunnelManager.handleTunnelFailure();\r\n      \r\n      expect(connectionAttempts).toBeGreaterThan(1);\r\n      expect(result).toBeDefined();\r\n    });\r\n  });\r\n\r\n  describe('External API Integration', () => {\r\n    it('should route API requests through SSH tunnel', async () => {\r\n      // Mock tunnel routing\r\n      const mockProxyConfig = {\r\n        host: 'localhost',\r\n        port: 8080,\r\n        protocol: 'http' as const\r\n      };\r\n\r\n      // Configure axios to use proxy\r\n      mockedAxios.create.mockReturnValue({\r\n        ...mockedAxios,\r\n        defaults: {\r\n          proxy: mockProxyConfig\r\n        }\r\n      } as any);\r\n\r\n      // Test API request routing\r\n      const response = await mockedAxios.get('https://api.gateio.ws/api/v4/spot/time', {\r\n        proxy: mockProxyConfig\r\n      });\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(response.data).toBeDefined();\r\n    });\r\n\r\n    it('should handle API rate limiting correctly', async () => {\r\n      // Mock rate limit response\r\n      mockedAxios.get\r\n        .mockRejectedValueOnce({\r\n          response: {\r\n            status: 429,\r\n            headers: { 'retry-after': '5' }\r\n          }\r\n        })\r\n        .mockResolvedValueOnce({\r\n          data: { server_time: Date.now() },\r\n          status: 200\r\n        });\r\n\r\n      // Mock setTimeout for testing\r\n      jest.spyOn(global, 'setTimeout').mockImplementation((callback: any) => {\r\n        callback();\r\n        return {} as any;\r\n      });\r\n\r\n      // Test rate limit handling\r\n      let response;\r\n      try {\r\n        response = await mockedAxios.get('https://api.gateio.ws/api/v4/spot/time');\r\n      } catch (error) {\r\n        // Retry after rate limit\r\n        await new Promise(resolve => setTimeout(resolve, 5000));\r\n        response = await mockedAxios.get('https://api.gateio.ws/api/v4/spot/time');\r\n      }\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(setTimeout).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should validate API response integrity', async () => {\r\n      const mockResponse = {\r\n        data: {\r\n          server_time: Date.now(),\r\n          currency_pairs: [\r\n            {\r\n              id: 'BTC_USDT',\r\n              base: 'BTC',\r\n              quote: 'USDT',\r\n              fee: '0.2',\r\n              min_base_amount: '0.001',\r\n              min_quote_amount: '1.0'\r\n            }\r\n          ]\r\n        },\r\n        status: 200,\r\n        statusText: 'OK',\r\n        headers: {\r\n          'content-type': 'application/json'\r\n        },\r\n        config: {}\r\n      };\r\n\r\n      mockedAxios.get.mockResolvedValue(mockResponse);\r\n\r\n      const response = await mockedAxios.get('https://api.gateio.ws/api/v4/spot/currency_pairs');\r\n\r\n      // Validate response structure\r\n      expect(response.status).toBe(200);\r\n      expect(response.data).toBeDefined();\r\n      expect(response.data.server_time).toBeGreaterThan(0);\r\n      expect(Array.isArray(response.data.currency_pairs)).toBe(true);\r\n      \r\n      if (response.data.currency_pairs.length > 0) {\r\n        const pair = response.data.currency_pairs[0];\r\n        expect(pair).toHaveProperty('id');\r\n        expect(pair).toHaveProperty('base');\r\n        expect(pair).toHaveProperty('quote');\r\n        expect(pair).toHaveProperty('fee');\r\n      }\r\n    });\r\n\r\n    it('should handle network timeouts and retries', async () => {\r\n      // Mock network timeout\r\n      mockedAxios.get\r\n        .mockRejectedValueOnce(new Error('Network timeout'))\r\n        .mockRejectedValueOnce(new Error('Network timeout'))\r\n        .mockResolvedValueOnce({\r\n          data: { server_time: Date.now() },\r\n          status: 200\r\n        });\r\n\r\n      let attempts = 0;\r\n      let response;\r\n\r\n      // Implement retry logic\r\n      const maxRetries = 3;\r\n      for (let i = 0; i < maxRetries; i++) {\r\n        try {\r\n          attempts++;\r\n          response = await mockedAxios.get('https://api.gateio.ws/api/v4/spot/time');\r\n          break;\r\n        } catch (error) {\r\n          if (i === maxRetries - 1) throw error;\r\n          await new Promise(resolve => setTimeout(resolve, 1000 * Math.pow(2, i)));\r\n        }\r\n      }\r\n\r\n      expect(attempts).toBe(3);\r\n      expect(response?.status).toBe(200);\r\n    });\r\n  });\r\n\r\n  describe('System Integration', () => {\r\n    it('should monitor system resources during API operations', async () => {\r\n      // Get initial system metrics\r\n      const initialMetrics = systemMonitor.getSystemMetrics();\r\n      \r\n      expect(initialMetrics).toBeDefined();\r\n      expect(typeof initialMetrics.cpu.usage).toBe('number');\r\n      expect(typeof initialMetrics.memory.used).toBe('number');\r\n      expect(typeof initialMetrics.disk.used).toBe('number');\r\n      expect(typeof initialMetrics.network.bytesReceived).toBe('number');\r\n\r\n      // Simulate API load\r\n      const promises = [];\r\n      for (let i = 0; i < 10; i++) {\r\n        promises.push(mockedAxios.get(`https://api.gateio.ws/api/v4/spot/time?${i}`));\r\n      }\r\n\r\n      await Promise.all(promises);\r\n\r\n      // Get metrics after load\r\n      const afterMetrics = systemMonitor.getSystemMetrics();\r\n      \r\n      expect(afterMetrics).toBeDefined();\r\n      expect(afterMetrics.timestamp.getTime()).toBeGreaterThan(initialMetrics.timestamp.getTime());\r\n    });\r\n\r\n    it('should detect and handle system resource constraints', async () => {\r\n      // Mock high resource usage\r\n      const mockHighUsageMetrics = {\r\n        cpu: { usage: 95, temperature: 75, frequency: 2400 },\r\n        memory: { used: 11000, available: 1000, total: 12000 },\r\n        disk: { used: 240000, available: 16000, total: 256000 },\r\n        network: { bytesReceived: 1000000, bytesSent: 500000 },\r\n        timestamp: new Date()\r\n      };\r\n\r\n      // Override system monitor to return high usage\r\n      systemMonitor.getSystemMetrics = jest.fn().mockReturnValue(mockHighUsageMetrics);\r\n\r\n      const metrics = systemMonitor.getSystemMetrics();\r\n      \r\n      // Should detect high resource usage\r\n      expect(metrics.cpu.usage).toBeGreaterThan(90);\r\n      expect(metrics.memory.used / metrics.memory.total).toBeGreaterThan(0.9);\r\n      expect(metrics.disk.used / metrics.disk.total).toBeGreaterThan(0.9);\r\n    });\r\n\r\n    it('should coordinate multiple system components', async () => {\r\n      // Test coordination between tunnel, API, and monitoring\r\n      const tunnelConfig = {\r\n        host: '168.138.104.117',\r\n        port: 22,\r\n        username: 'ubuntu',\r\n        privateKeyPath: '/path/to/key',\r\n        localPort: 8080,\r\n        remotePort: 80,\r\n        keepAlive: true,\r\n        compression: true\r\n      };\r\n\r\n      // Establish tunnel\r\n      const tunnelResult = await tunnelManager.establishTunnel(tunnelConfig);\r\n      \r\n      // Monitor system during tunnel operation\r\n      const systemMetrics = systemMonitor.getSystemMetrics();\r\n      \r\n      // Make API request through tunnel\r\n      const apiResponse = await mockedAxios.get('https://api.gateio.ws/api/v4/spot/time');\r\n\r\n      // Validate coordination\r\n      expect(tunnelResult).toBeDefined();\r\n      expect(systemMetrics).toBeDefined();\r\n      expect(apiResponse.status).toBe(200);\r\n      \r\n      // All components should be operational\r\n      expect(typeof tunnelResult.isConnected).toBe('boolean');\r\n      expect(systemMetrics.timestamp).toBeInstanceOf(Date);\r\n      expect(apiResponse.data).toBeDefined();\r\n    });\r\n  });\r\n\r\n  describe('Error Handling and Recovery', () => {\r\n    it('should handle cascading failures gracefully', async () => {\r\n      // Simulate multiple system failures\r\n      const errors = [];\r\n\r\n      // Tunnel failure\r\n      try {\r\n        await tunnelManager.establishTunnel({\r\n          host: 'invalid-host',\r\n          port: 22,\r\n          username: 'invalid',\r\n          privateKeyPath: '/invalid',\r\n          localPort: 8080,\r\n          remotePort: 80,\r\n          keepAlive: true,\r\n          compression: true\r\n        });\r\n      } catch (error) {\r\n        errors.push('tunnel');\r\n      }\r\n\r\n      // API failure\r\n      mockedAxios.get.mockRejectedValue(new Error('API unavailable'));\r\n      try {\r\n        await mockedAxios.get('https://api.gateio.ws/api/v4/spot/time');\r\n      } catch (error) {\r\n        errors.push('api');\r\n      }\r\n\r\n      // System should handle multiple failures without crashing\r\n      expect(errors.length).toBeGreaterThan(0);\r\n      expect(errors).toContain('api');\r\n    });\r\n\r\n    it('should implement circuit breaker pattern for API calls', async () => {\r\n      let failureCount = 0;\r\n      const maxFailures = 5;\r\n      let circuitOpen = false;\r\n\r\n      // Mock consecutive failures\r\n      mockedAxios.get.mockImplementation(async () => {\r\n        if (circuitOpen) {\r\n          throw new Error('Circuit breaker is open');\r\n        }\r\n        \r\n        failureCount++;\r\n        if (failureCount <= maxFailures) {\r\n          throw new Error('Service unavailable');\r\n        }\r\n        \r\n        return { data: { server_time: Date.now() }, status: 200 };\r\n      });\r\n\r\n      // Test circuit breaker logic\r\n      for (let i = 0; i < maxFailures; i++) {\r\n        try {\r\n          await mockedAxios.get('https://api.gateio.ws/api/v4/spot/time');\r\n        } catch (error) {\r\n          // Expected failures\r\n        }\r\n      }\r\n\r\n      // Open circuit after max failures\r\n      circuitOpen = true;\r\n\r\n      try {\r\n        await mockedAxios.get('https://api.gateio.ws/api/v4/spot/time');\r\n      } catch (error) {\r\n        expect(error.message).toContain('Circuit breaker is open');\r\n      }\r\n\r\n      expect(failureCount).toBe(maxFailures);\r\n    });\r\n\r\n    it('should validate data integrity across system boundaries', async () => {\r\n      const testData = {\r\n        timestamp: Date.now(),\r\n        symbol: 'BTC/USDT',\r\n        price: 42000.50,\r\n        volume: 1234.567\r\n      };\r\n\r\n      // Mock API response with test data\r\n      mockedAxios.get.mockResolvedValue({\r\n        data: testData,\r\n        status: 200\r\n      });\r\n\r\n      const response = await mockedAxios.get('https://api.gateio.ws/api/v4/spot/tickers');\r\n\r\n      // Validate data integrity\r\n      expect(response.data.timestamp).toBe(testData.timestamp);\r\n      expect(response.data.symbol).toBe(testData.symbol);\r\n      expect(response.data.price).toBe(testData.price);\r\n      expect(response.data.volume).toBe(testData.volume);\r\n\r\n      // Validate data types\r\n      expect(typeof response.data.timestamp).toBe('number');\r\n      expect(typeof response.data.symbol).toBe('string');\r\n      expect(typeof response.data.price).toBe('number');\r\n      expect(typeof response.data.volume).toBe('number');\r\n    });\r\n  });\r\n\r\n  describe('Performance and Load Testing', () => {\r\n    it('should handle concurrent API requests efficiently', async () => {\r\n      const concurrentRequests = 20;\r\n      const promises = [];\r\n\r\n      const startTime = Date.now();\r\n\r\n      // Create concurrent requests\r\n      for (let i = 0; i < concurrentRequests; i++) {\r\n        promises.push(mockedAxios.get(`https://api.gateio.ws/api/v4/spot/time?req=${i}`));\r\n      }\r\n\r\n      const results = await Promise.all(promises);\r\n      const endTime = Date.now();\r\n      const totalTime = endTime - startTime;\r\n\r\n      // Validate results\r\n      expect(results.length).toBe(concurrentRequests);\r\n      results.forEach(result => {\r\n        expect(result.status).toBe(200);\r\n      });\r\n\r\n      // Should complete within reasonable time (less than 5 seconds)\r\n      expect(totalTime).toBeLessThan(5000);\r\n    });\r\n\r\n    it('should maintain performance under sustained load', async () => {\r\n      const requestBatches = 5;\r\n      const requestsPerBatch = 10;\r\n      const batchResults = [];\r\n\r\n      for (let batch = 0; batch < requestBatches; batch++) {\r\n        const batchStartTime = Date.now();\r\n        const promises = [];\r\n\r\n        for (let i = 0; i < requestsPerBatch; i++) {\r\n          promises.push(mockedAxios.get(`https://api.gateio.ws/api/v4/spot/time?batch=${batch}&req=${i}`));\r\n        }\r\n\r\n        const results = await Promise.all(promises);\r\n        const batchEndTime = Date.now();\r\n        const batchTime = batchEndTime - batchStartTime;\r\n\r\n        batchResults.push({\r\n          batch,\r\n          time: batchTime,\r\n          successCount: results.filter(r => r.status === 200).length\r\n        });\r\n\r\n        // Small delay between batches\r\n        await new Promise(resolve => setTimeout(resolve, 100));\r\n      }\r\n\r\n      // Validate sustained performance\r\n      expect(batchResults.length).toBe(requestBatches);\r\n      batchResults.forEach(result => {\r\n        expect(result.successCount).toBe(requestsPerBatch);\r\n        expect(result.time).toBeLessThan(2000); // Each batch should complete within 2 seconds\r\n      });\r\n\r\n      // Performance should not degrade significantly over time\r\n      const firstBatchTime = batchResults[0].time;\r\n      const lastBatchTime = batchResults[batchResults.length - 1].time;\r\n      const performanceDegradation = (lastBatchTime - firstBatchTime) / firstBatchTime;\r\n      \r\n      expect(performanceDegradation).toBeLessThan(0.5); // Less than 50% degradation\r\n    });\r\n  });\r\n});"],"version":3}