{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\strategies\\__tests__\\harmonization-integration.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\strategies\\__tests__\\harmonization-integration.test.ts"],"sourcesContent":["/**\r\n * Strategy Harmonization Integration Tests\r\n * \r\n * Integration tests to verify the harmonization engine works correctly\r\n * with actual strategy implementations and real market data patterns.\r\n * \r\n * Requirements: 4.8, 17.10 - Strategy harmonization integration testing\r\n */\r\n\r\nimport { StrategyHarmonizationEngine } from '../harmonization';\r\nimport { MarketData } from '../types';\r\n\r\ndescribe('StrategyHarmonizationEngine Integration', () => {\r\n  let harmonizationEngine: StrategyHarmonizationEngine;\r\n\r\n  beforeEach(() => {\r\n    harmonizationEngine = new StrategyHarmonizationEngine();\r\n  });\r\n\r\n  describe('Real Market Scenarios', () => {\r\n    it('should handle bullish market conditions', () => {\r\n      // Create bullish market data (uptrend with increasing volume)\r\n      const bullishData: MarketData[] = [];\r\n      let basePrice = 45000;\r\n      \r\n      for (let i = 0; i < 50; i++) {\r\n        basePrice += Math.random() * 200 + 50; // Generally increasing\r\n        bullishData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (50 - i) * 60000),\r\n          open: basePrice - 20,\r\n          high: basePrice + 100,\r\n          low: basePrice - 50,\r\n          close: basePrice,\r\n          volume: 1000000 + (i * 20000) // Increasing volume\r\n        });\r\n      }\r\n\r\n      const harmonizedSignal = harmonizationEngine.harmonizeSignals(bullishData);\r\n      \r\n      expect(harmonizedSignal).toBeDefined();\r\n      if (harmonizedSignal) {\r\n        // Should make a valid trading decision\r\n        expect(['BUY', 'SELL', 'HOLD']).toContain(harmonizedSignal.overallSignal);\r\n        expect(harmonizedSignal.confidence).toBeGreaterThan(0);\r\n        expect(harmonizedSignal.reasoning).toContain('indicators');\r\n        expect(harmonizedSignal.strength).toBeGreaterThanOrEqual(0);\r\n        expect(harmonizedSignal.strength).toBeLessThanOrEqual(100);\r\n      }\r\n    });\r\n\r\n    it('should handle bearish market conditions', () => {\r\n      // Create bearish market data (downtrend with increasing volume)\r\n      const bearishData: MarketData[] = [];\r\n      let basePrice = 55000;\r\n      \r\n      for (let i = 0; i < 50; i++) {\r\n        basePrice -= Math.random() * 200 + 50; // Generally decreasing\r\n        bearishData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (50 - i) * 60000),\r\n          open: basePrice + 20,\r\n          high: basePrice + 50,\r\n          low: basePrice - 100,\r\n          close: basePrice,\r\n          volume: 1000000 + (i * 20000) // Increasing volume\r\n        });\r\n      }\r\n\r\n      const harmonizedSignal = harmonizationEngine.harmonizeSignals(bearishData);\r\n      \r\n      expect(harmonizedSignal).toBeDefined();\r\n      if (harmonizedSignal) {\r\n        // Should make a valid trading decision\r\n        expect(['BUY', 'SELL', 'HOLD']).toContain(harmonizedSignal.overallSignal);\r\n        expect(harmonizedSignal.confidence).toBeGreaterThan(0);\r\n        expect(harmonizedSignal.reasoning).toContain('indicators');\r\n        expect(harmonizedSignal.strength).toBeGreaterThanOrEqual(0);\r\n        expect(harmonizedSignal.strength).toBeLessThanOrEqual(100);\r\n      }\r\n    });\r\n\r\n    it('should handle sideways market conditions', () => {\r\n      // Create sideways market data (range-bound)\r\n      const sidewaysData: MarketData[] = [];\r\n      const basePrice = 50000;\r\n      \r\n      for (let i = 0; i < 50; i++) {\r\n        const price = basePrice + (Math.sin(i * 0.2) * 500) + (Math.random() * 200 - 100);\r\n        sidewaysData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (50 - i) * 60000),\r\n          open: price - 10,\r\n          high: price + 50,\r\n          low: price - 50,\r\n          close: price,\r\n          volume: 1000000 + (Math.random() * 200000)\r\n        });\r\n      }\r\n\r\n      const harmonizedSignal = harmonizationEngine.harmonizeSignals(sidewaysData);\r\n      \r\n      expect(harmonizedSignal).toBeDefined();\r\n      if (harmonizedSignal) {\r\n        // In sideways markets, we often expect HOLD or weak signals\r\n        expect(['BUY', 'SELL', 'HOLD']).toContain(harmonizedSignal.overallSignal);\r\n        expect(harmonizedSignal.reasoning).toContain('indicators');\r\n      }\r\n    });\r\n\r\n    it('should handle volatile market conditions', () => {\r\n      // Create highly volatile market data\r\n      const volatileData: MarketData[] = [];\r\n      let basePrice = 50000;\r\n      \r\n      for (let i = 0; i < 50; i++) {\r\n        // High volatility with random large moves\r\n        const change = (Math.random() - 0.5) * 2000;\r\n        basePrice += change;\r\n        \r\n        volatileData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (50 - i) * 60000),\r\n          open: basePrice - change / 2,\r\n          high: basePrice + Math.abs(change),\r\n          low: basePrice - Math.abs(change),\r\n          close: basePrice,\r\n          volume: 1000000 + (Math.random() * 1000000) // High volume variance\r\n        });\r\n      }\r\n\r\n      const harmonizedSignal = harmonizationEngine.harmonizeSignals(volatileData);\r\n      \r\n      expect(harmonizedSignal).toBeDefined();\r\n      if (harmonizedSignal) {\r\n        // In volatile markets, confidence should be lower\r\n        expect(harmonizedSignal.confidence).toBeLessThan(90);\r\n        expect(harmonizedSignal.reasoning).toContain('indicators');\r\n        \r\n        // Validation should flag potential issues\r\n        const validation = harmonizationEngine.validateSignalHarmony(harmonizedSignal);\r\n        expect(validation).toBeDefined();\r\n      }\r\n    });\r\n  });\r\n\r\n  describe('Strategy Interaction', () => {\r\n    it('should demonstrate weighted scoring with custom weights', () => {\r\n      // Create market data that would trigger different strategies\r\n      const marketData: MarketData[] = [];\r\n      let basePrice = 50000;\r\n      \r\n      // Create data that shows RSI oversold but MACD bearish\r\n      for (let i = 0; i < 30; i++) {\r\n        if (i < 20) {\r\n          basePrice -= 100; // Decline for RSI oversold\r\n        } else {\r\n          basePrice += 50; // Small recovery\r\n        }\r\n        \r\n        marketData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (30 - i) * 60000),\r\n          open: basePrice - 10,\r\n          high: basePrice + 30,\r\n          low: basePrice - 40,\r\n          close: basePrice,\r\n          volume: 1000000 + (Math.random() * 200000)\r\n        });\r\n      }\r\n\r\n      // Test with RSI heavily weighted\r\n      const rsiWeightedConfig = {\r\n        rsi: { name: 'RSI', enabled: true, weight: 0.7, parameters: {} },\r\n        macd: { name: 'MACD', enabled: true, weight: 0.3, parameters: {} }\r\n      };\r\n\r\n      const rsiWeightedSignal = harmonizationEngine.harmonizeSignals(marketData, rsiWeightedConfig);\r\n      \r\n      // Test with MACD heavily weighted\r\n      const macdWeightedConfig = {\r\n        rsi: { name: 'RSI', enabled: true, weight: 0.3, parameters: {} },\r\n        macd: { name: 'MACD', enabled: true, weight: 0.7, parameters: {} }\r\n      };\r\n\r\n      const macdWeightedSignal = harmonizationEngine.harmonizeSignals(marketData, macdWeightedConfig);\r\n      \r\n      expect(rsiWeightedSignal).toBeDefined();\r\n      expect(macdWeightedSignal).toBeDefined();\r\n      \r\n      if (rsiWeightedSignal && macdWeightedSignal) {\r\n        // The weights should be reflected in the harmonized signals\r\n        expect(rsiWeightedSignal.weights).toBeDefined();\r\n        expect(macdWeightedSignal.weights).toBeDefined();\r\n        \r\n        // Both should have reasoning explaining the decision\r\n        expect(rsiWeightedSignal.reasoning).toContain('indicators');\r\n        expect(macdWeightedSignal.reasoning).toContain('indicators');\r\n      }\r\n    });\r\n\r\n    it('should detect and report conflicts between strategies', () => {\r\n      // Create market data that would cause conflicting signals\r\n      const conflictingData: MarketData[] = [];\r\n      let basePrice = 50000;\r\n      \r\n      // Create a scenario where momentum is bullish but trend is bearish\r\n      for (let i = 0; i < 40; i++) {\r\n        if (i < 30) {\r\n          basePrice -= 50; // Long-term decline (bearish trend)\r\n        } else {\r\n          basePrice += 200; // Recent sharp recovery (bullish momentum)\r\n        }\r\n        \r\n        conflictingData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (40 - i) * 60000),\r\n          open: basePrice - 20,\r\n          high: basePrice + 50,\r\n          low: basePrice - 60,\r\n          close: basePrice,\r\n          volume: 1000000 + (i > 30 ? 500000 : 0) // High volume on recovery\r\n        });\r\n      }\r\n\r\n      const harmonizedSignal = harmonizationEngine.harmonizeSignals(conflictingData);\r\n      \r\n      expect(harmonizedSignal).toBeDefined();\r\n      if (harmonizedSignal) {\r\n        // Should detect conflicts between momentum and trend indicators\r\n        expect(harmonizedSignal.conflicts.length).toBeGreaterThanOrEqual(0);\r\n        \r\n        // Validation should flag the conflicts\r\n        const validation = harmonizationEngine.validateSignalHarmony(harmonizedSignal);\r\n        expect(validation).toBeDefined();\r\n        \r\n        if (harmonizedSignal.conflicts.length > 0) {\r\n          expect(validation.issues.some(issue => issue.includes('conflicts'))).toBe(true);\r\n        }\r\n      }\r\n    });\r\n  });\r\n\r\n  describe('Edge Cases and Error Handling', () => {\r\n    it('should handle insufficient data gracefully', () => {\r\n      const insufficientData: MarketData[] = [\r\n        {\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(),\r\n          open: 50000,\r\n          high: 50100,\r\n          low: 49900,\r\n          close: 50050,\r\n          volume: 1000000\r\n        }\r\n      ];\r\n\r\n      const harmonizedSignal = harmonizationEngine.harmonizeSignals(insufficientData);\r\n      \r\n      // Should either return null or a signal with low confidence\r\n      if (harmonizedSignal) {\r\n        expect(harmonizedSignal.confidence).toBeLessThan(80);\r\n      }\r\n    });\r\n\r\n    it('should handle extreme price movements', () => {\r\n      const extremeData: MarketData[] = [];\r\n      let basePrice = 50000;\r\n      \r\n      for (let i = 0; i < 20; i++) {\r\n        if (i === 10) {\r\n          basePrice *= 1.5; // 50% price spike\r\n        } else if (i === 15) {\r\n          basePrice *= 0.7; // 30% price crash\r\n        } else {\r\n          basePrice += (Math.random() - 0.5) * 100;\r\n        }\r\n        \r\n        extremeData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (20 - i) * 60000),\r\n          open: basePrice - 50,\r\n          high: basePrice + 100,\r\n          low: basePrice - 100,\r\n          close: basePrice,\r\n          volume: 1000000 + (Math.random() * 2000000)\r\n        });\r\n      }\r\n\r\n      const harmonizedSignal = harmonizationEngine.harmonizeSignals(extremeData);\r\n      \r\n      expect(harmonizedSignal).toBeDefined();\r\n      if (harmonizedSignal) {\r\n        // Should handle extreme movements without crashing\r\n        expect(harmonizedSignal.overallSignal).toMatch(/^(BUY|SELL|HOLD)$/);\r\n        expect(harmonizedSignal.reasoning).toBeDefined();\r\n      }\r\n    });\r\n  });\r\n\r\n  describe('Performance and Reliability', () => {\r\n    it('should provide consistent results for the same input', () => {\r\n      const testData: MarketData[] = [];\r\n      for (let i = 0; i < 30; i++) {\r\n        testData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (30 - i) * 60000),\r\n          open: 50000 + i * 10,\r\n          high: 50000 + i * 10 + 50,\r\n          low: 50000 + i * 10 - 50,\r\n          close: 50000 + i * 10 + 5,\r\n          volume: 1000000\r\n        });\r\n      }\r\n\r\n      // Run harmonization multiple times with same data\r\n      const signal1 = harmonizationEngine.harmonizeSignals(testData);\r\n      const signal2 = harmonizationEngine.harmonizeSignals(testData);\r\n      const signal3 = harmonizationEngine.harmonizeSignals(testData);\r\n\r\n      // Results should be consistent\r\n      if (signal1 && signal2 && signal3) {\r\n        expect(signal1.overallSignal).toBe(signal2.overallSignal);\r\n        expect(signal2.overallSignal).toBe(signal3.overallSignal);\r\n        expect(Math.abs(signal1.strength - signal2.strength)).toBeLessThan(0.1);\r\n        expect(Math.abs(signal1.confidence - signal2.confidence)).toBeLessThan(0.1);\r\n      }\r\n    });\r\n\r\n    it('should handle concurrent harmonization requests', async () => {\r\n      const testData: MarketData[] = [];\r\n      for (let i = 0; i < 25; i++) {\r\n        testData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (25 - i) * 60000),\r\n          open: 50000 + Math.sin(i * 0.1) * 500,\r\n          high: 50000 + Math.sin(i * 0.1) * 500 + 100,\r\n          low: 50000 + Math.sin(i * 0.1) * 500 - 100,\r\n          close: 50000 + Math.sin(i * 0.1) * 500 + 25,\r\n          volume: 1000000\r\n        });\r\n      }\r\n\r\n      // Run multiple harmonizations concurrently\r\n      const promises = Array(5).fill(null).map(() => \r\n        Promise.resolve(harmonizationEngine.harmonizeSignals(testData))\r\n      );\r\n\r\n      const results = await Promise.all(promises);\r\n      \r\n      // All should complete successfully\r\n      results.forEach(result => {\r\n        if (result) {\r\n          expect(result.overallSignal).toMatch(/^(BUY|SELL|HOLD)$/);\r\n          expect(result.strength).toBeGreaterThanOrEqual(0);\r\n          expect(result.confidence).toBeGreaterThanOrEqual(0);\r\n        }\r\n      });\r\n    });\r\n  });\r\n});"],"version":3}