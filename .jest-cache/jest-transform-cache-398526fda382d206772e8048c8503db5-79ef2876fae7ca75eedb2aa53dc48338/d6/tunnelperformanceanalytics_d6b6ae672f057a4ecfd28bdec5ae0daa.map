{"version":3,"names":["cov_ynqe030dn","actualCoverage","s","events_1","require","MetricType","f","b","exports","TunnelPerformanceAnalytics","EventEmitter","logger","tunnelManager","healthMonitor","stateTracker","config","performanceData","benchmarks","collectionIntervals","reportingTimer","isCollecting","constructor","Map","collectionInterval","retentionPeriod","enableTrendAnalysis","trendAnalysisWindow","enablePerformanceAlerts","alertThresholds","LATENCY","PACKET_LOSS","ERROR_RATE","THROUGHPUT","enableAutoReporting","reportInterval","initializeBenchmarks","setupEventListeners","info","startCollection","warn","connections","getAllConnections","connection","startCollectionForConnection","id","startAutoReporting","emit","stopCollection","connectionId","interval","entries","clearInterval","delete","has","debug","set","setInterval","collectPerformanceData","error","setTimeout","stopCollectionForConnection","get","getPerformanceData","metricType","timeRange","data","filter","point","timestamp","start","end","analyzeTrend","now","Date","defaultTimeRange","getTime","range","length","values","map","value","timestamps","trend","calculateTrend","stats","calculateStatistics","direction","changePercentage","confidence","dataPoints","averageValue","mean","minValue","min","maxValue","max","standardDeviation","generateReport","report","generatedAt","overallScore","metrics","summary","strengths","weaknesses","recommendations","totalScore","metricCount","Object","currentValue","reduce","sum","benchmark","getBenchmarkRating","generateRecommendations","current","average","metricScore","calculateMetricScore","push","toLowerCase","getBenchmarks","updateBenchmark","on","excellent","good","acceptable","poor","unit","description","CONNECTION_TIME","UPTIME","getConnection","healthMetrics","getHealthMetrics","latency","throughput","packetLoss","stateStats","getStatistics","reliability","averageConnectionTime","totalAttempts","connectionAttempts","errorRate","failedConnections","connectionData","cleanupOldData","checkPerformanceAlerts","cutoffTime","filteredData","dataPoint","threshold","undefined","alertTriggered","alertMessage","message","n","sumX","t","sumY","v","sumXY","i","sumXX","slope","intercept","meanY","ssRes","predicted","Math","pow","ssTot","rSquared","firstValue","lastValue","abs","variance","sqrt","lowerIsBetter","includes","rating","toFixed","cleanup","clear"],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\tunnel-performance-analytics.ts"],"sourcesContent":["import { EventEmitter } from 'events';\r\nimport { Logger } from '../core/logging/logger';\r\nimport { SSHTunnelManager, TunnelConnection } from './ssh-tunnel-manager';\r\nimport { TunnelHealthMonitor, TunnelHealthMetrics } from './tunnel-health-monitor';\r\nimport { TunnelStateTracker } from './tunnel-state-tracker';\r\n\r\n/**\r\n * Performance metric types\r\n */\r\nexport enum MetricType {\r\n  LATENCY = 'LATENCY',\r\n  THROUGHPUT = 'THROUGHPUT',\r\n  PACKET_LOSS = 'PACKET_LOSS',\r\n  CONNECTION_TIME = 'CONNECTION_TIME',\r\n  UPTIME = 'UPTIME',\r\n  ERROR_RATE = 'ERROR_RATE',\r\n  BANDWIDTH_UTILIZATION = 'BANDWIDTH_UTILIZATION'\r\n}\r\n\r\n/**\r\n * Performance data point\r\n */\r\nexport interface PerformanceDataPoint {\r\n  timestamp: Date;\r\n  connectionId: string;\r\n  metricType: MetricType;\r\n  value: number;\r\n  unit: string;\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\n/**\r\n * Performance trend analysis\r\n */\r\nexport interface PerformanceTrend {\r\n  metricType: MetricType;\r\n  connectionId: string;\r\n  timeRange: {\r\n    start: Date;\r\n    end: Date;\r\n  };\r\n  trend: 'IMPROVING' | 'DEGRADING' | 'STABLE';\r\n  changePercentage: number;\r\n  confidence: number; // 0-100\r\n  dataPoints: number;\r\n  averageValue: number;\r\n  minValue: number;\r\n  maxValue: number;\r\n  standardDeviation: number;\r\n}\r\n\r\n/**\r\n * Performance benchmark\r\n */\r\nexport interface PerformanceBenchmark {\r\n  metricType: MetricType;\r\n  excellent: number;\r\n  good: number;\r\n  acceptable: number;\r\n  poor: number;\r\n  unit: string;\r\n  description: string;\r\n}\r\n\r\n/**\r\n * Performance report\r\n */\r\nexport interface PerformanceReport {\r\n  connectionId: string;\r\n  generatedAt: Date;\r\n  timeRange: {\r\n    start: Date;\r\n    end: Date;\r\n  };\r\n  overallScore: number; // 0-100\r\n  metrics: {\r\n    [key in MetricType]?: {\r\n      current: number;\r\n      average: number;\r\n      trend: PerformanceTrend;\r\n      benchmark: 'EXCELLENT' | 'GOOD' | 'ACCEPTABLE' | 'POOR';\r\n      recommendations: string[];\r\n    };\r\n  };\r\n  summary: {\r\n    strengths: string[];\r\n    weaknesses: string[];\r\n    recommendations: string[];\r\n  };\r\n}\r\n\r\n/**\r\n * Analytics configuration\r\n */\r\nexport interface AnalyticsConfig {\r\n  /** Data collection interval in milliseconds */\r\n  collectionInterval: number;\r\n  /** Data retention period in milliseconds */\r\n  retentionPeriod: number;\r\n  /** Enable trend analysis */\r\n  enableTrendAnalysis: boolean;\r\n  /** Trend analysis window in milliseconds */\r\n  trendAnalysisWindow: number;\r\n  /** Enable performance alerts */\r\n  enablePerformanceAlerts: boolean;\r\n  /** Performance alert thresholds */\r\n  alertThresholds: {\r\n    [key in MetricType]?: number;\r\n  };\r\n  /** Enable automatic reporting */\r\n  enableAutoReporting: boolean;\r\n  /** Report generation interval in milliseconds */\r\n  reportInterval: number;\r\n}\r\n\r\n/**\r\n * Tunnel Performance Analytics\r\n * Collects, analyzes, and reports on SSH tunnel performance metrics\r\n */\r\nexport class TunnelPerformanceAnalytics extends EventEmitter {\r\n  private logger: Logger;\r\n  private tunnelManager: SSHTunnelManager;\r\n  private healthMonitor: TunnelHealthMonitor;\r\n  private stateTracker: TunnelStateTracker;\r\n  private config: AnalyticsConfig;\r\n  private performanceData: Map<string, PerformanceDataPoint[]>;\r\n  private benchmarks: Map<MetricType, PerformanceBenchmark>;\r\n  private collectionIntervals: Map<string, NodeJS.Timeout>;\r\n  private reportingTimer: NodeJS.Timeout | null;\r\n  private isCollecting: boolean;\r\n\r\n  constructor(\r\n    logger: Logger,\r\n    tunnelManager: SSHTunnelManager,\r\n    healthMonitor: TunnelHealthMonitor,\r\n    stateTracker: TunnelStateTracker,\r\n    config?: Partial<AnalyticsConfig>\r\n  ) {\r\n    super();\r\n    this.logger = logger;\r\n    this.tunnelManager = tunnelManager;\r\n    this.healthMonitor = healthMonitor;\r\n    this.stateTracker = stateTracker;\r\n    this.performanceData = new Map();\r\n    this.collectionIntervals = new Map();\r\n    this.reportingTimer = null;\r\n    this.isCollecting = false;\r\n\r\n    // Default configuration\r\n    this.config = {\r\n      collectionInterval: 60000, // 1 minute\r\n      retentionPeriod: 7 * 24 * 60 * 60 * 1000, // 7 days\r\n      enableTrendAnalysis: true,\r\n      trendAnalysisWindow: 24 * 60 * 60 * 1000, // 24 hours\r\n      enablePerformanceAlerts: true,\r\n      alertThresholds: {\r\n        [MetricType.LATENCY]: 1000, // 1 second\r\n        [MetricType.PACKET_LOSS]: 5, // 5%\r\n        [MetricType.ERROR_RATE]: 10, // 10%\r\n        [MetricType.THROUGHPUT]: 1024 // 1 KB/s minimum\r\n      },\r\n      enableAutoReporting: true,\r\n      reportInterval: 24 * 60 * 60 * 1000, // 24 hours\r\n      ...config\r\n    };\r\n\r\n    // Initialize performance benchmarks\r\n    this.initializeBenchmarks();\r\n\r\n    this.setupEventListeners();\r\n    this.logger.info('Tunnel Performance Analytics initialized', this.config);\r\n  }\r\n\r\n  /**\r\n   * Start performance data collection\r\n   */\r\n  startCollection(): void {\r\n    if (this.isCollecting) {\r\n      this.logger.warn('Performance data collection is already running');\r\n      return;\r\n    }\r\n\r\n    this.isCollecting = true;\r\n    this.logger.info('Starting performance data collection');\r\n\r\n    // Start collecting for existing connections\r\n    const connections = this.tunnelManager.getAllConnections();\r\n    for (const connection of connections) {\r\n      this.startCollectionForConnection(connection.id);\r\n    }\r\n\r\n    // Start automatic reporting if enabled\r\n    if (this.config.enableAutoReporting) {\r\n      this.startAutoReporting();\r\n    }\r\n\r\n    this.emit('collectionStarted');\r\n  }\r\n\r\n  /**\r\n   * Stop performance data collection\r\n   */\r\n  stopCollection(): void {\r\n    if (!this.isCollecting) {\r\n      this.logger.warn('Performance data collection is not running');\r\n      return;\r\n    }\r\n\r\n    this.isCollecting = false;\r\n    this.logger.info('Stopping performance data collection');\r\n\r\n    // Clear all collection intervals\r\n    for (const [connectionId, interval] of this.collectionIntervals.entries()) {\r\n      clearInterval(interval);\r\n      this.collectionIntervals.delete(connectionId);\r\n    }\r\n\r\n    // Stop automatic reporting\r\n    if (this.reportingTimer) {\r\n      clearInterval(this.reportingTimer);\r\n      this.reportingTimer = null;\r\n    }\r\n\r\n    this.emit('collectionStopped');\r\n  }\r\n\r\n  /**\r\n   * Start data collection for a specific connection\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   */\r\n  startCollectionForConnection(connectionId: string): void {\r\n    if (this.collectionIntervals.has(connectionId)) {\r\n      this.logger.debug(`Already collecting data for connection: ${connectionId}`);\r\n      return;\r\n    }\r\n\r\n    this.logger.info(`Starting performance data collection for connection: ${connectionId}`);\r\n\r\n    // Initialize data storage\r\n    this.performanceData.set(connectionId, []);\r\n\r\n    // Start periodic data collection\r\n    const interval = setInterval(async () => {\r\n      try {\r\n        await this.collectPerformanceData(connectionId);\r\n      } catch (error) {\r\n        this.logger.error(`Performance data collection failed for connection ${connectionId}`, error);\r\n      }\r\n    }, this.config.collectionInterval);\r\n\r\n    this.collectionIntervals.set(connectionId, interval);\r\n\r\n    // Perform initial data collection\r\n    setTimeout(() => this.collectPerformanceData(connectionId), 1000);\r\n  }\r\n\r\n  /**\r\n   * Stop data collection for a specific connection\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   */\r\n  stopCollectionForConnection(connectionId: string): void {\r\n    const interval = this.collectionIntervals.get(connectionId);\r\n    if (interval) {\r\n      clearInterval(interval);\r\n      this.collectionIntervals.delete(connectionId);\r\n      this.logger.info(`Stopped performance data collection for connection: ${connectionId}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get performance data for a connection\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @param metricType - Optional metric type filter\r\n   * @param timeRange - Optional time range filter\r\n   * @returns Array of performance data points\r\n   */\r\n  getPerformanceData(\r\n    connectionId: string,\r\n    metricType?: MetricType,\r\n    timeRange?: { start: Date; end: Date }\r\n  ): PerformanceDataPoint[] {\r\n    let data = this.performanceData.get(connectionId) || [];\r\n\r\n    // Apply metric type filter\r\n    if (metricType) {\r\n      data = data.filter(point => point.metricType === metricType);\r\n    }\r\n\r\n    // Apply time range filter\r\n    if (timeRange) {\r\n      data = data.filter(point => \r\n        point.timestamp >= timeRange.start && point.timestamp <= timeRange.end\r\n      );\r\n    }\r\n\r\n    return [...data];\r\n  }\r\n\r\n  /**\r\n   * Analyze performance trends\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @param metricType - Metric type to analyze\r\n   * @param timeRange - Optional time range (defaults to trend analysis window)\r\n   * @returns Performance trend analysis\r\n   */\r\n  analyzeTrend(\r\n    connectionId: string,\r\n    metricType: MetricType,\r\n    timeRange?: { start: Date; end: Date }\r\n  ): PerformanceTrend | null {\r\n    if (!this.config.enableTrendAnalysis) {\r\n      return null;\r\n    }\r\n\r\n    const now = new Date();\r\n    const defaultTimeRange = {\r\n      start: new Date(now.getTime() - this.config.trendAnalysisWindow),\r\n      end: now\r\n    };\r\n\r\n    const range = timeRange || defaultTimeRange;\r\n    const data = this.getPerformanceData(connectionId, metricType, range);\r\n\r\n    if (data.length < 2) {\r\n      return null;\r\n    }\r\n\r\n    // Calculate trend statistics\r\n    const values = data.map(point => point.value);\r\n    const timestamps = data.map(point => point.timestamp.getTime());\r\n\r\n    const trend = this.calculateTrend(values, timestamps);\r\n    const stats = this.calculateStatistics(values);\r\n\r\n    return {\r\n      metricType,\r\n      connectionId,\r\n      timeRange: range,\r\n      trend: trend.direction,\r\n      changePercentage: trend.changePercentage,\r\n      confidence: trend.confidence,\r\n      dataPoints: data.length,\r\n      averageValue: stats.mean,\r\n      minValue: stats.min,\r\n      maxValue: stats.max,\r\n      standardDeviation: stats.standardDeviation\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generate performance report\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @param timeRange - Optional time range\r\n   * @returns Performance report\r\n   */\r\n  generateReport(\r\n    connectionId: string,\r\n    timeRange?: { start: Date; end: Date }\r\n  ): PerformanceReport {\r\n    const now = new Date();\r\n    const defaultTimeRange = {\r\n      start: new Date(now.getTime() - 24 * 60 * 60 * 1000), // Last 24 hours\r\n      end: now\r\n    };\r\n\r\n    const range = timeRange || defaultTimeRange;\r\n    const report: PerformanceReport = {\r\n      connectionId,\r\n      generatedAt: now,\r\n      timeRange: range,\r\n      overallScore: 0,\r\n      metrics: {},\r\n      summary: {\r\n        strengths: [],\r\n        weaknesses: [],\r\n        recommendations: []\r\n      }\r\n    };\r\n\r\n    let totalScore = 0;\r\n    let metricCount = 0;\r\n\r\n    // Analyze each metric type\r\n    for (const metricType of Object.values(MetricType)) {\r\n      const data = this.getPerformanceData(connectionId, metricType, range);\r\n      if (data.length === 0) continue;\r\n\r\n      const trend = this.analyzeTrend(connectionId, metricType, range);\r\n      const currentValue = data[data.length - 1].value;\r\n      const averageValue = data.reduce((sum, point) => sum + point.value, 0) / data.length;\r\n      const benchmark = this.getBenchmarkRating(metricType, currentValue);\r\n      const recommendations = this.generateRecommendations(metricType, currentValue, trend);\r\n\r\n      report.metrics[metricType] = {\r\n        current: currentValue,\r\n        average: averageValue,\r\n        trend: trend!,\r\n        benchmark,\r\n        recommendations\r\n      };\r\n\r\n      // Calculate metric score\r\n      const metricScore = this.calculateMetricScore(metricType, currentValue);\r\n      totalScore += metricScore;\r\n      metricCount++;\r\n\r\n      // Add to summary\r\n      if (benchmark === 'EXCELLENT' || benchmark === 'GOOD') {\r\n        report.summary.strengths.push(`${metricType}: ${benchmark.toLowerCase()}`);\r\n      } else {\r\n        report.summary.weaknesses.push(`${metricType}: ${benchmark.toLowerCase()}`);\r\n      }\r\n\r\n      report.summary.recommendations.push(...recommendations);\r\n    }\r\n\r\n    // Calculate overall score\r\n    report.overallScore = metricCount > 0 ? totalScore / metricCount : 0;\r\n\r\n    this.logger.info(`Generated performance report for connection: ${connectionId}`, {\r\n      overallScore: report.overallScore,\r\n      timeRange: range\r\n    });\r\n\r\n    this.emit('reportGenerated', report);\r\n    return report;\r\n  }\r\n\r\n  /**\r\n   * Get performance benchmarks\r\n   * \r\n   * @returns Map of performance benchmarks\r\n   */\r\n  getBenchmarks(): Map<MetricType, PerformanceBenchmark> {\r\n    return new Map(this.benchmarks);\r\n  }\r\n\r\n  /**\r\n   * Update performance benchmark\r\n   * \r\n   * @param metricType - Metric type\r\n   * @param benchmark - New benchmark values\r\n   */\r\n  updateBenchmark(metricType: MetricType, benchmark: PerformanceBenchmark): void {\r\n    this.benchmarks.set(metricType, benchmark);\r\n    this.logger.info(`Updated performance benchmark for ${metricType}`, benchmark);\r\n    this.emit('benchmarkUpdated', metricType, benchmark);\r\n  }\r\n\r\n  /**\r\n   * Setup event listeners\r\n   */\r\n  private setupEventListeners(): void {\r\n    // Listen for new tunnel connections\r\n    this.tunnelManager.on('tunnelConnected', (connection) => {\r\n      if (this.isCollecting) {\r\n        this.startCollectionForConnection(connection.id);\r\n      }\r\n    });\r\n\r\n    // Listen for tunnel disconnections\r\n    this.tunnelManager.on('tunnelDisconnected', (connection) => {\r\n      this.stopCollectionForConnection(connection.id);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Initialize performance benchmarks\r\n   */\r\n  private initializeBenchmarks(): void {\r\n    this.benchmarks = new Map([\r\n      [MetricType.LATENCY, {\r\n        metricType: MetricType.LATENCY,\r\n        excellent: 50,\r\n        good: 100,\r\n        acceptable: 500,\r\n        poor: 1000,\r\n        unit: 'ms',\r\n        description: 'Connection latency'\r\n      }],\r\n      [MetricType.THROUGHPUT, {\r\n        metricType: MetricType.THROUGHPUT,\r\n        excellent: 10240, // 10 KB/s\r\n        good: 5120,       // 5 KB/s\r\n        acceptable: 1024, // 1 KB/s\r\n        poor: 512,        // 512 B/s\r\n        unit: 'bytes/s',\r\n        description: 'Data throughput'\r\n      }],\r\n      [MetricType.PACKET_LOSS, {\r\n        metricType: MetricType.PACKET_LOSS,\r\n        excellent: 0,\r\n        good: 1,\r\n        acceptable: 5,\r\n        poor: 10,\r\n        unit: '%',\r\n        description: 'Packet loss percentage'\r\n      }],\r\n      [MetricType.CONNECTION_TIME, {\r\n        metricType: MetricType.CONNECTION_TIME,\r\n        excellent: 1000,  // 1 second\r\n        good: 3000,       // 3 seconds\r\n        acceptable: 10000, // 10 seconds\r\n        poor: 30000,      // 30 seconds\r\n        unit: 'ms',\r\n        description: 'Time to establish connection'\r\n      }],\r\n      [MetricType.UPTIME, {\r\n        metricType: MetricType.UPTIME,\r\n        excellent: 99.9,\r\n        good: 99.5,\r\n        acceptable: 99.0,\r\n        poor: 95.0,\r\n        unit: '%',\r\n        description: 'Connection uptime percentage'\r\n      }],\r\n      [MetricType.ERROR_RATE, {\r\n        metricType: MetricType.ERROR_RATE,\r\n        excellent: 0,\r\n        good: 1,\r\n        acceptable: 5,\r\n        poor: 10,\r\n        unit: '%',\r\n        description: 'Error rate percentage'\r\n      }]\r\n    ]);\r\n  }\r\n\r\n  /**\r\n   * Collect performance data for a connection\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   */\r\n  private async collectPerformanceData(connectionId: string): Promise<void> {\r\n    const connection = this.tunnelManager.getConnection(connectionId);\r\n    if (!connection) return;\r\n\r\n    const timestamp = new Date();\r\n    const dataPoints: PerformanceDataPoint[] = [];\r\n\r\n    try {\r\n      // Get health metrics\r\n      const healthMetrics = this.healthMonitor.getHealthMetrics(connectionId);\r\n      if (healthMetrics) {\r\n        dataPoints.push(\r\n          {\r\n            timestamp,\r\n            connectionId,\r\n            metricType: MetricType.LATENCY,\r\n            value: healthMetrics.latency,\r\n            unit: 'ms'\r\n          },\r\n          {\r\n            timestamp,\r\n            connectionId,\r\n            metricType: MetricType.THROUGHPUT,\r\n            value: healthMetrics.throughput,\r\n            unit: 'bytes/s'\r\n          },\r\n          {\r\n            timestamp,\r\n            connectionId,\r\n            metricType: MetricType.PACKET_LOSS,\r\n            value: healthMetrics.packetLoss,\r\n            unit: '%'\r\n          }\r\n        );\r\n      }\r\n\r\n      // Get state statistics\r\n      const stateStats = this.stateTracker.getStatistics(connectionId);\r\n      if (stateStats) {\r\n        dataPoints.push(\r\n          {\r\n            timestamp,\r\n            connectionId,\r\n            metricType: MetricType.UPTIME,\r\n            value: stateStats.reliability,\r\n            unit: '%'\r\n          },\r\n          {\r\n            timestamp,\r\n            connectionId,\r\n            metricType: MetricType.CONNECTION_TIME,\r\n            value: stateStats.averageConnectionTime,\r\n            unit: 'ms'\r\n          }\r\n        );\r\n\r\n        // Calculate error rate\r\n        const totalAttempts = stateStats.connectionAttempts;\r\n        const errorRate = totalAttempts > 0 \r\n          ? (stateStats.failedConnections / totalAttempts) * 100 \r\n          : 0;\r\n\r\n        dataPoints.push({\r\n          timestamp,\r\n          connectionId,\r\n          metricType: MetricType.ERROR_RATE,\r\n          value: errorRate,\r\n          unit: '%'\r\n        });\r\n      }\r\n\r\n      // Store data points\r\n      const connectionData = this.performanceData.get(connectionId) || [];\r\n      connectionData.push(...dataPoints);\r\n\r\n      // Clean up old data\r\n      this.cleanupOldData(connectionId);\r\n\r\n      // Check for performance alerts\r\n      if (this.config.enablePerformanceAlerts) {\r\n        this.checkPerformanceAlerts(dataPoints);\r\n      }\r\n\r\n    } catch (error) {\r\n      this.logger.error(`Failed to collect performance data for connection ${connectionId}`, error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clean up old performance data\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   */\r\n  private cleanupOldData(connectionId: string): void {\r\n    const data = this.performanceData.get(connectionId);\r\n    if (!data) return;\r\n\r\n    const cutoffTime = Date.now() - this.config.retentionPeriod;\r\n    const filteredData = data.filter(point => point.timestamp.getTime() > cutoffTime);\r\n\r\n    this.performanceData.set(connectionId, filteredData);\r\n  }\r\n\r\n  /**\r\n   * Check for performance alerts\r\n   * \r\n   * @param dataPoints - Performance data points to check\r\n   */\r\n  private checkPerformanceAlerts(dataPoints: PerformanceDataPoint[]): void {\r\n    for (const dataPoint of dataPoints) {\r\n      const threshold = this.config.alertThresholds[dataPoint.metricType];\r\n      if (threshold === undefined) continue;\r\n\r\n      let alertTriggered = false;\r\n      let alertMessage = '';\r\n\r\n      switch (dataPoint.metricType) {\r\n        case MetricType.LATENCY:\r\n        case MetricType.CONNECTION_TIME:\r\n          if (dataPoint.value > threshold) {\r\n            alertTriggered = true;\r\n            alertMessage = `High ${dataPoint.metricType.toLowerCase()}: ${dataPoint.value}${dataPoint.unit}`;\r\n          }\r\n          break;\r\n\r\n        case MetricType.PACKET_LOSS:\r\n        case MetricType.ERROR_RATE:\r\n          if (dataPoint.value > threshold) {\r\n            alertTriggered = true;\r\n            alertMessage = `High ${dataPoint.metricType.toLowerCase()}: ${dataPoint.value}${dataPoint.unit}`;\r\n          }\r\n          break;\r\n\r\n        case MetricType.THROUGHPUT:\r\n          if (dataPoint.value < threshold) {\r\n            alertTriggered = true;\r\n            alertMessage = `Low ${dataPoint.metricType.toLowerCase()}: ${dataPoint.value}${dataPoint.unit}`;\r\n          }\r\n          break;\r\n\r\n        case MetricType.UPTIME:\r\n          if (dataPoint.value < threshold) {\r\n            alertTriggered = true;\r\n            alertMessage = `Low ${dataPoint.metricType.toLowerCase()}: ${dataPoint.value}${dataPoint.unit}`;\r\n          }\r\n          break;\r\n      }\r\n\r\n      if (alertTriggered) {\r\n        this.logger.warn(`Performance alert: ${alertMessage}`, {\r\n          connectionId: dataPoint.connectionId,\r\n          metricType: dataPoint.metricType,\r\n          value: dataPoint.value,\r\n          threshold\r\n        });\r\n\r\n        this.emit('performanceAlert', {\r\n          connectionId: dataPoint.connectionId,\r\n          metricType: dataPoint.metricType,\r\n          value: dataPoint.value,\r\n          threshold,\r\n          message: alertMessage,\r\n          timestamp: dataPoint.timestamp\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate trend direction and statistics\r\n   * \r\n   * @param values - Array of values\r\n   * @param timestamps - Array of timestamps\r\n   * @returns Trend analysis\r\n   */\r\n  private calculateTrend(values: number[], timestamps: number[]): {\r\n    direction: 'IMPROVING' | 'DEGRADING' | 'STABLE';\r\n    changePercentage: number;\r\n    confidence: number;\r\n  } {\r\n    if (values.length < 2) {\r\n      return { direction: 'STABLE', changePercentage: 0, confidence: 0 };\r\n    }\r\n\r\n    // Calculate linear regression\r\n    const n = values.length;\r\n    const sumX = timestamps.reduce((sum, t) => sum + t, 0);\r\n    const sumY = values.reduce((sum, v) => sum + v, 0);\r\n    const sumXY = timestamps.reduce((sum, t, i) => sum + t * values[i], 0);\r\n    const sumXX = timestamps.reduce((sum, t) => sum + t * t, 0);\r\n\r\n    const slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);\r\n    const intercept = (sumY - slope * sumX) / n;\r\n\r\n    // Calculate R-squared for confidence\r\n    const meanY = sumY / n;\r\n    const ssRes = values.reduce((sum, v, i) => {\r\n      const predicted = slope * timestamps[i] + intercept;\r\n      return sum + Math.pow(v - predicted, 2);\r\n    }, 0);\r\n    const ssTot = values.reduce((sum, v) => sum + Math.pow(v - meanY, 2), 0);\r\n    const rSquared = 1 - (ssRes / ssTot);\r\n\r\n    // Determine trend direction\r\n    const firstValue = values[0];\r\n    const lastValue = values[values.length - 1];\r\n    const changePercentage = firstValue !== 0 ? ((lastValue - firstValue) / firstValue) * 100 : 0;\r\n\r\n    let direction: 'IMPROVING' | 'DEGRADING' | 'STABLE';\r\n    if (Math.abs(changePercentage) < 5) {\r\n      direction = 'STABLE';\r\n    } else if (changePercentage > 0) {\r\n      direction = 'IMPROVING';\r\n    } else {\r\n      direction = 'DEGRADING';\r\n    }\r\n\r\n    return {\r\n      direction,\r\n      changePercentage: Math.abs(changePercentage),\r\n      confidence: Math.max(0, Math.min(100, rSquared * 100))\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculate basic statistics\r\n   * \r\n   * @param values - Array of values\r\n   * @returns Statistical measures\r\n   */\r\n  private calculateStatistics(values: number[]): {\r\n    mean: number;\r\n    min: number;\r\n    max: number;\r\n    standardDeviation: number;\r\n  } {\r\n    if (values.length === 0) {\r\n      return { mean: 0, min: 0, max: 0, standardDeviation: 0 };\r\n    }\r\n\r\n    const mean = values.reduce((sum, v) => sum + v, 0) / values.length;\r\n    const min = Math.min(...values);\r\n    const max = Math.max(...values);\r\n\r\n    const variance = values.reduce((sum, v) => sum + Math.pow(v - mean, 2), 0) / values.length;\r\n    const standardDeviation = Math.sqrt(variance);\r\n\r\n    return { mean, min, max, standardDeviation };\r\n  }\r\n\r\n  /**\r\n   * Get benchmark rating for a metric value\r\n   * \r\n   * @param metricType - Metric type\r\n   * @param value - Metric value\r\n   * @returns Benchmark rating\r\n   */\r\n  private getBenchmarkRating(metricType: MetricType, value: number): 'EXCELLENT' | 'GOOD' | 'ACCEPTABLE' | 'POOR' {\r\n    const benchmark = this.benchmarks.get(metricType);\r\n    if (!benchmark) return 'ACCEPTABLE';\r\n\r\n    // For metrics where lower is better (latency, packet loss, error rate)\r\n    const lowerIsBetter = [MetricType.LATENCY, MetricType.PACKET_LOSS, MetricType.ERROR_RATE, MetricType.CONNECTION_TIME];\r\n    \r\n    if (lowerIsBetter.includes(metricType)) {\r\n      if (value <= benchmark.excellent) return 'EXCELLENT';\r\n      if (value <= benchmark.good) return 'GOOD';\r\n      if (value <= benchmark.acceptable) return 'ACCEPTABLE';\r\n      return 'POOR';\r\n    } else {\r\n      // For metrics where higher is better (throughput, uptime)\r\n      if (value >= benchmark.excellent) return 'EXCELLENT';\r\n      if (value >= benchmark.good) return 'GOOD';\r\n      if (value >= benchmark.acceptable) return 'ACCEPTABLE';\r\n      return 'POOR';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate metric score (0-100)\r\n   * \r\n   * @param metricType - Metric type\r\n   * @param value - Metric value\r\n   * @returns Score (0-100)\r\n   */\r\n  private calculateMetricScore(metricType: MetricType, value: number): number {\r\n    const rating = this.getBenchmarkRating(metricType, value);\r\n    \r\n    switch (rating) {\r\n      case 'EXCELLENT': return 100;\r\n      case 'GOOD': return 80;\r\n      case 'ACCEPTABLE': return 60;\r\n      case 'POOR': return 30;\r\n      default: return 50;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate recommendations based on metric performance\r\n   * \r\n   * @param metricType - Metric type\r\n   * @param value - Current value\r\n   * @param trend - Performance trend\r\n   * @returns Array of recommendations\r\n   */\r\n  private generateRecommendations(metricType: MetricType, value: number, trend: PerformanceTrend | null): string[] {\r\n    const recommendations: string[] = [];\r\n    const rating = this.getBenchmarkRating(metricType, value);\r\n\r\n    if (rating === 'POOR' || rating === 'ACCEPTABLE') {\r\n      switch (metricType) {\r\n        case MetricType.LATENCY:\r\n          recommendations.push('Consider optimizing network routing or switching to a closer server');\r\n          break;\r\n        case MetricType.THROUGHPUT:\r\n          recommendations.push('Check for bandwidth limitations or network congestion');\r\n          break;\r\n        case MetricType.PACKET_LOSS:\r\n          recommendations.push('Investigate network stability and consider alternative routing');\r\n          break;\r\n        case MetricType.CONNECTION_TIME:\r\n          recommendations.push('Optimize SSH configuration or check server responsiveness');\r\n          break;\r\n        case MetricType.UPTIME:\r\n          recommendations.push('Implement better connection monitoring and auto-reconnection');\r\n          break;\r\n        case MetricType.ERROR_RATE:\r\n          recommendations.push('Review error logs and implement better error handling');\r\n          break;\r\n      }\r\n    }\r\n\r\n    if (trend && trend.trend === 'DEGRADING' && trend.confidence > 70) {\r\n      recommendations.push(`Performance is degrading (${trend.changePercentage.toFixed(1)}% decline)`);\r\n    }\r\n\r\n    return recommendations;\r\n  }\r\n\r\n  /**\r\n   * Start automatic report generation\r\n   */\r\n  private startAutoReporting(): void {\r\n    if (this.reportingTimer) {\r\n      clearInterval(this.reportingTimer);\r\n    }\r\n\r\n    this.reportingTimer = setInterval(() => {\r\n      const connections = this.tunnelManager.getAllConnections();\r\n      for (const connection of connections) {\r\n        try {\r\n          const report = this.generateReport(connection.id);\r\n          this.emit('automaticReport', report);\r\n        } catch (error) {\r\n          this.logger.error(`Failed to generate automatic report for connection ${connection.id}`, error);\r\n        }\r\n      }\r\n    }, this.config.reportInterval);\r\n\r\n    this.logger.info('Started automatic performance reporting');\r\n  }\r\n\r\n  /**\r\n   * Cleanup analytics resources\r\n   */\r\n  cleanup(): void {\r\n    this.stopCollection();\r\n    this.performanceData.clear();\r\n    this.logger.info('Tunnel performance analytics cleanup completed');\r\n  }\r\n}\r\n"],"mappingsgBE;IAAAA,aAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,aAAA;AAAAA,aAAA,GAAAE,CAAA;;;;;;;AAhBF,MAAAC,QAAA;AAAA;AAAA,CAAAH,aAAA,GAAAE,CAAA,OAAAE,OAAA;AAMA;;;AAGA,IAAYC,UAQX;AAAA;AAAAL,aAAA,GAAAE,CAAA;AARD,WAAYG,UAAU;EAAA;EAAAL,aAAA,GAAAM,CAAA;EAAAN,aAAA,GAAAE,CAAA;EACpBG,UAAA,uBAAmB;EAAA;EAAAL,aAAA,GAAAE,CAAA;EACnBG,UAAA,6BAAyB;EAAA;EAAAL,aAAA,GAAAE,CAAA;EACzBG,UAAA,+BAA2B;EAAA;EAAAL,aAAA,GAAAE,CAAA;EAC3BG,UAAA,uCAAmC;EAAA;EAAAL,aAAA,GAAAE,CAAA;EACnCG,UAAA,qBAAiB;EAAA;EAAAL,aAAA,GAAAE,CAAA;EACjBG,UAAA,6BAAyB;EAAA;EAAAL,aAAA,GAAAE,CAAA;EACzBG,UAAA,mDAA+C;AACjD,CAAC;AARW;AAAA,CAAAL,aAAA,GAAAO,CAAA,UAAAF,UAAU;AAAA;AAAA,CAAAL,aAAA,GAAAO,CAAA,UAAAC,OAAA,CAAAH,UAAA,GAAVA,UAAU;AA0GtB;;;;AAIA,MAAaI,0BAA2B;AAAA;AAAA,CAAQN,QAAA,CAAAO,YAAY;EAClDC,MAAM;EACNC,aAAa;EACbC,aAAa;EACbC,YAAY;EACZC,MAAM;EACNC,eAAe;EACfC,UAAU;EACVC,mBAAmB;EACnBC,cAAc;EACdC,YAAY;EAEpBC,YACEV,MAAc,EACdC,aAA+B,EAC/BC,aAAkC,EAClCC,YAAgC,EAChCC,MAAiC;IAAA;IAAAf,aAAA,GAAAM,CAAA;IAAAN,aAAA,GAAAE,CAAA;IAEjC,KAAK,EAAE;IAAC;IAAAF,aAAA,GAAAE,CAAA;IACR,IAAI,CAACS,MAAM,GAAGA,MAAM;IAAC;IAAAX,aAAA,GAAAE,CAAA;IACrB,IAAI,CAACU,aAAa,GAAGA,aAAa;IAAC;IAAAZ,aAAA,GAAAE,CAAA;IACnC,IAAI,CAACW,aAAa,GAAGA,aAAa;IAAC;IAAAb,aAAA,GAAAE,CAAA;IACnC,IAAI,CAACY,YAAY,GAAGA,YAAY;IAAC;IAAAd,aAAA,GAAAE,CAAA;IACjC,IAAI,CAACc,eAAe,GAAG,IAAIM,GAAG,EAAE;IAAC;IAAAtB,aAAA,GAAAE,CAAA;IACjC,IAAI,CAACgB,mBAAmB,GAAG,IAAII,GAAG,EAAE;IAAC;IAAAtB,aAAA,GAAAE,CAAA;IACrC,IAAI,CAACiB,cAAc,GAAG,IAAI;IAAC;IAAAnB,aAAA,GAAAE,CAAA;IAC3B,IAAI,CAACkB,YAAY,GAAG,KAAK;IAEzB;IAAA;IAAApB,aAAA,GAAAE,CAAA;IACA,IAAI,CAACa,MAAM,GAAG;MACZQ,kBAAkB,EAAE,KAAK;MAAE;MAC3BC,eAAe,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;MAAE;MAC1CC,mBAAmB,EAAE,IAAI;MACzBC,mBAAmB,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;MAAE;MAC1CC,uBAAuB,EAAE,IAAI;MAC7BC,eAAe,EAAE;QACf,CAACvB,UAAU,CAACwB,OAAO,GAAG,IAAI;QAAE;QAC5B,CAACxB,UAAU,CAACyB,WAAW,GAAG,CAAC;QAAE;QAC7B,CAACzB,UAAU,CAAC0B,UAAU,GAAG,EAAE;QAAE;QAC7B,CAAC1B,UAAU,CAAC2B,UAAU,GAAG,IAAI,CAAC;OAC/B;MACDC,mBAAmB,EAAE,IAAI;MACzBC,cAAc,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;MAAE;MACrC,GAAGnB;KACJ;IAED;IAAA;IAAAf,aAAA,GAAAE,CAAA;IACA,IAAI,CAACiC,oBAAoB,EAAE;IAAC;IAAAnC,aAAA,GAAAE,CAAA;IAE5B,IAAI,CAACkC,mBAAmB,EAAE;IAAC;IAAApC,aAAA,GAAAE,CAAA;IAC3B,IAAI,CAACS,MAAM,CAAC0B,IAAI,CAAC,0CAA0C,EAAE,IAAI,CAACtB,MAAM,CAAC;EAC3E;EAEA;;;EAGAuB,eAAeA,CAAA;IAAA;IAAAtC,aAAA,GAAAM,CAAA;IAAAN,aAAA,GAAAE,CAAA;IACb,IAAI,IAAI,CAACkB,YAAY,EAAE;MAAA;MAAApB,aAAA,GAAAO,CAAA;MAAAP,aAAA,GAAAE,CAAA;MACrB,IAAI,CAACS,MAAM,CAAC4B,IAAI,CAAC,gDAAgD,CAAC;MAAC;MAAAvC,aAAA,GAAAE,CAAA;MACnE;IACF,CAAC;IAAA;IAAA;MAAAF,aAAA,GAAAO,CAAA;IAAA;IAAAP,aAAA,GAAAE,CAAA;IAED,IAAI,CAACkB,YAAY,GAAG,IAAI;IAAC;IAAApB,aAAA,GAAAE,CAAA;IACzB,IAAI,CAACS,MAAM,CAAC0B,IAAI,CAAC,sCAAsC,CAAC;IAExD;IACA,MAAMG,WAAW;IAAA;IAAA,CAAAxC,aAAA,GAAAE,CAAA,QAAG,IAAI,CAACU,aAAa,CAAC6B,iBAAiB,EAAE;IAAC;IAAAzC,aAAA,GAAAE,CAAA;IAC3D,KAAK,MAAMwC,UAAU,IAAIF,WAAW,EAAE;MAAA;MAAAxC,aAAA,GAAAE,CAAA;MACpC,IAAI,CAACyC,4BAA4B,CAACD,UAAU,CAACE,EAAE,CAAC;IAClD;IAEA;IAAA;IAAA5C,aAAA,GAAAE,CAAA;IACA,IAAI,IAAI,CAACa,MAAM,CAACkB,mBAAmB,EAAE;MAAA;MAAAjC,aAAA,GAAAO,CAAA;MAAAP,aAAA,GAAAE,CAAA;MACnC,IAAI,CAAC2C,kBAAkB,EAAE;IAC3B,CAAC;IAAA;IAAA;MAAA7C,aAAA,GAAAO,CAAA;IAAA;IAAAP,aAAA,GAAAE,CAAA;IAED,IAAI,CAAC4C,IAAI,CAAC,mBAAmB,CAAC;EAChC;EAEA;;;EAGAC,cAAcA,CAAA;IAAA;IAAA/C,aAAA,GAAAM,CAAA;IAAAN,aAAA,GAAAE,CAAA;IACZ,IAAI,CAAC,IAAI,CAACkB,YAAY,EAAE;MAAA;MAAApB,aAAA,GAAAO,CAAA;MAAAP,aAAA,GAAAE,CAAA;MACtB,IAAI,CAACS,MAAM,CAAC4B,IAAI,CAAC,4CAA4C,CAAC;MAAC;MAAAvC,aAAA,GAAAE,CAAA;MAC/D;IACF,CAAC;IAAA;IAAA;MAAAF,aAAA,GAAAO,CAAA;IAAA;IAAAP,aAAA,GAAAE,CAAA;IAED,IAAI,CAACkB,YAAY,GAAG,KAAK;IAAC;IAAApB,aAAA,GAAAE,CAAA;IAC1B,IAAI,CAACS,MAAM,CAAC0B,IAAI,CAAC,sCAAsC,CAAC;IAExD;IAAA;IAAArC,aAAA,GAAAE,CAAA;IACA,KAAK,MAAM,CAAC8C,YAAY,EAAEC,QAAQ,CAAC,IAAI,IAAI,CAAC/B,mBAAmB,CAACgC,OAAO,EAAE,EAAE;MAAA;MAAAlD,aAAA,GAAAE,CAAA;MACzEiD,aAAa,CAACF,QAAQ,CAAC;MAAC;MAAAjD,aAAA,GAAAE,CAAA;MACxB,IAAI,CAACgB,mBAAmB,CAACkC,MAAM,CAACJ,YAAY,CAAC;IAC/C;IAEA;IAAA;IAAAhD,aAAA,GAAAE,CAAA;IACA,IAAI,IAAI,CAACiB,cAAc,EAAE;MAAA;MAAAnB,aAAA,GAAAO,CAAA;MAAAP,aAAA,GAAAE,CAAA;MACvBiD,aAAa,CAAC,IAAI,CAAChC,cAAc,CAAC;MAAC;MAAAnB,aAAA,GAAAE,CAAA;MACnC,IAAI,CAACiB,cAAc,GAAG,IAAI;IAC5B,CAAC;IAAA;IAAA;MAAAnB,aAAA,GAAAO,CAAA;IAAA;IAAAP,aAAA,GAAAE,CAAA;IAED,IAAI,CAAC4C,IAAI,CAAC,mBAAmB,CAAC;EAChC;EAEA;;;;;EAKAH,4BAA4BA,CAACK,YAAoB;IAAA;IAAAhD,aAAA,GAAAM,CAAA;IAAAN,aAAA,GAAAE,CAAA;IAC/C,IAAI,IAAI,CAACgB,mBAAmB,CAACmC,GAAG,CAACL,YAAY,CAAC,EAAE;MAAA;MAAAhD,aAAA,GAAAO,CAAA;MAAAP,aAAA,GAAAE,CAAA;MAC9C,IAAI,CAACS,MAAM,CAAC2C,KAAK,CAAC,2CAA2CN,YAAY,EAAE,CAAC;MAAC;MAAAhD,aAAA,GAAAE,CAAA;MAC7E;IACF,CAAC;IAAA;IAAA;MAAAF,aAAA,GAAAO,CAAA;IAAA;IAAAP,aAAA,GAAAE,CAAA;IAED,IAAI,CAACS,MAAM,CAAC0B,IAAI,CAAC,wDAAwDW,YAAY,EAAE,CAAC;IAExF;IAAA;IAAAhD,aAAA,GAAAE,CAAA;IACA,IAAI,CAACc,eAAe,CAACuC,GAAG,CAACP,YAAY,EAAE,EAAE,CAAC;IAE1C;IACA,MAAMC,QAAQ;IAAA;IAAA,CAAAjD,aAAA,GAAAE,CAAA,QAAGsD,WAAW,CAAC,YAAW;MAAA;MAAAxD,aAAA,GAAAM,CAAA;MAAAN,aAAA,GAAAE,CAAA;MACtC,IAAI;QAAA;QAAAF,aAAA,GAAAE,CAAA;QACF,MAAM,IAAI,CAACuD,sBAAsB,CAACT,YAAY,CAAC;MACjD,CAAC,CAAC,OAAOU,KAAK,EAAE;QAAA;QAAA1D,aAAA,GAAAE,CAAA;QACd,IAAI,CAACS,MAAM,CAAC+C,KAAK,CAAC,qDAAqDV,YAAY,EAAE,EAAEU,KAAK,CAAC;MAC/F;IACF,CAAC,EAAE,IAAI,CAAC3C,MAAM,CAACQ,kBAAkB,CAAC;IAAC;IAAAvB,aAAA,GAAAE,CAAA;IAEnC,IAAI,CAACgB,mBAAmB,CAACqC,GAAG,CAACP,YAAY,EAAEC,QAAQ,CAAC;IAEpD;IAAA;IAAAjD,aAAA,GAAAE,CAAA;IACAyD,UAAU,CAAC,MAAM;MAAA;MAAA3D,aAAA,GAAAM,CAAA;MAAAN,aAAA,GAAAE,CAAA;MAAA,WAAI,CAACuD,sBAAsB,CAACT,YAAY,CAAC;IAAD,CAAC,EAAE,IAAI,CAAC;EACnE;EAEA;;;;;EAKAY,2BAA2BA,CAACZ,YAAoB;IAAA;IAAAhD,aAAA,GAAAM,CAAA;IAC9C,MAAM2C,QAAQ;IAAA;IAAA,CAAAjD,aAAA,GAAAE,CAAA,QAAG,IAAI,CAACgB,mBAAmB,CAAC2C,GAAG,CAACb,YAAY,CAAC;IAAC;IAAAhD,aAAA,GAAAE,CAAA;IAC5D,IAAI+C,QAAQ,EAAE;MAAA;MAAAjD,aAAA,GAAAO,CAAA;MAAAP,aAAA,GAAAE,CAAA;MACZiD,aAAa,CAACF,QAAQ,CAAC;MAAC;MAAAjD,aAAA,GAAAE,CAAA;MACxB,IAAI,CAACgB,mBAAmB,CAACkC,MAAM,CAACJ,YAAY,CAAC;MAAC;MAAAhD,aAAA,GAAAE,CAAA;MAC9C,IAAI,CAACS,MAAM,CAAC0B,IAAI,CAAC,uDAAuDW,YAAY,EAAE,CAAC;IACzF,CAAC;IAAA;IAAA;MAAAhD,aAAA,GAAAO,CAAA;IAAA;EACH;EAEA;;;;;;;;EAQAuD,kBAAkBA,CAChBd,YAAoB,EACpBe,UAAuB,EACvBC,SAAsC;IAAA;IAAAhE,aAAA,GAAAM,CAAA;IAEtC,IAAI2D,IAAI;IAAA;IAAA,CAAAjE,aAAA,GAAAE,CAAA;IAAG;IAAA,CAAAF,aAAA,GAAAO,CAAA,cAAI,CAACS,eAAe,CAAC6C,GAAG,CAACb,YAAY,CAAC;IAAA;IAAA,CAAAhD,aAAA,GAAAO,CAAA,UAAI,EAAE;IAEvD;IAAA;IAAAP,aAAA,GAAAE,CAAA;IACA,IAAI6D,UAAU,EAAE;MAAA;MAAA/D,aAAA,GAAAO,CAAA;MAAAP,aAAA,GAAAE,CAAA;MACd+D,IAAI,GAAGA,IAAI,CAACC,MAAM,CAACC,KAAK,IAAI;QAAA;QAAAnE,aAAA,GAAAM,CAAA;QAAAN,aAAA,GAAAE,CAAA;QAAA,OAAAiE,KAAK,CAACJ,UAAU,KAAKA,UAAU;MAAV,CAAU,CAAC;IAC9D,CAAC;IAAA;IAAA;MAAA/D,aAAA,GAAAO,CAAA;IAAA;IAED;IAAAP,aAAA,GAAAE,CAAA;IACA,IAAI8D,SAAS,EAAE;MAAA;MAAAhE,aAAA,GAAAO,CAAA;MAAAP,aAAA,GAAAE,CAAA;MACb+D,IAAI,GAAGA,IAAI,CAACC,MAAM,CAACC,KAAK,IACtB;QAAA;QAAAnE,aAAA,GAAAM,CAAA;QAAAN,aAAA,GAAAE,CAAA;QAAA,kCAAAF,aAAA,GAAAO,CAAA,WAAA4D,KAAK,CAACC,SAAS,IAAIJ,SAAS,CAACK,KAAK;QAAA;QAAA,CAAArE,aAAA,GAAAO,CAAA,WAAI4D,KAAK,CAACC,SAAS,IAAIJ,SAAS,CAACM,GAAG;MAAH,CAAG,CACvE;IACH,CAAC;IAAA;IAAA;MAAAtE,aAAA,GAAAO,CAAA;IAAA;IAAAP,aAAA,GAAAE,CAAA;IAED,OAAO,CAAC,GAAG+D,IAAI,CAAC;EAClB;EAEA;;;;;;;;EAQAM,YAAYA,CACVvB,YAAoB,EACpBe,UAAsB,EACtBC,SAAsC;IAAA;IAAAhE,aAAA,GAAAM,CAAA;IAAAN,aAAA,GAAAE,CAAA;IAEtC,IAAI,CAAC,IAAI,CAACa,MAAM,CAACU,mBAAmB,EAAE;MAAA;MAAAzB,aAAA,GAAAO,CAAA;MAAAP,aAAA,GAAAE,CAAA;MACpC,OAAO,IAAI;IACb,CAAC;IAAA;IAAA;MAAAF,aAAA,GAAAO,CAAA;IAAA;IAED,MAAMiE,GAAG;IAAA;IAAA,CAAAxE,aAAA,GAAAE,CAAA,QAAG,IAAIuE,IAAI,EAAE;IACtB,MAAMC,gBAAgB;IAAA;IAAA,CAAA1E,aAAA,GAAAE,CAAA,QAAG;MACvBmE,KAAK,EAAE,IAAII,IAAI,CAACD,GAAG,CAACG,OAAO,EAAE,GAAG,IAAI,CAAC5D,MAAM,CAACW,mBAAmB,CAAC;MAChE4C,GAAG,EAAEE;KACN;IAED,MAAMI,KAAK;IAAA;IAAA,CAAA5E,aAAA,GAAAE,CAAA;IAAG;IAAA,CAAAF,aAAA,GAAAO,CAAA,WAAAyD,SAAS;IAAA;IAAA,CAAAhE,aAAA,GAAAO,CAAA,WAAImE,gBAAgB;IAC3C,MAAMT,IAAI;IAAA;IAAA,CAAAjE,aAAA,GAAAE,CAAA,QAAG,IAAI,CAAC4D,kBAAkB,CAACd,YAAY,EAAEe,UAAU,EAAEa,KAAK,CAAC;IAAC;IAAA5E,aAAA,GAAAE,CAAA;IAEtE,IAAI+D,IAAI,CAACY,MAAM,GAAG,CAAC,EAAE;MAAA;MAAA7E,aAAA,GAAAO,CAAA;MAAAP,aAAA,GAAAE,CAAA;MACnB,OAAO,IAAI;IACb,CAAC;IAAA;IAAA;MAAAF,aAAA,GAAAO,CAAA;IAAA;IAED;IACA,MAAMuE,MAAM;IAAA;IAAA,CAAA9E,aAAA,GAAAE,CAAA,QAAG+D,IAAI,CAACc,GAAG,CAACZ,KAAK,IAAI;MAAA;MAAAnE,aAAA,GAAAM,CAAA;MAAAN,aAAA,GAAAE,CAAA;MAAA,OAAAiE,KAAK,CAACa,KAAK;IAAL,CAAK,CAAC;IAC7C,MAAMC,UAAU;IAAA;IAAA,CAAAjF,aAAA,GAAAE,CAAA,QAAG+D,IAAI,CAACc,GAAG,CAACZ,KAAK,IAAI;MAAA;MAAAnE,aAAA,GAAAM,CAAA;MAAAN,aAAA,GAAAE,CAAA;MAAA,OAAAiE,KAAK,CAACC,SAAS,CAACO,OAAO,EAAE;IAAF,CAAE,CAAC;IAE/D,MAAMO,KAAK;IAAA;IAAA,CAAAlF,aAAA,GAAAE,CAAA,QAAG,IAAI,CAACiF,cAAc,CAACL,MAAM,EAAEG,UAAU,CAAC;IACrD,MAAMG,KAAK;IAAA;IAAA,CAAApF,aAAA,GAAAE,CAAA,QAAG,IAAI,CAACmF,mBAAmB,CAACP,MAAM,CAAC;IAAC;IAAA9E,aAAA,GAAAE,CAAA;IAE/C,OAAO;MACL6D,UAAU;MACVf,YAAY;MACZgB,SAAS,EAAEY,KAAK;MAChBM,KAAK,EAAEA,KAAK,CAACI,SAAS;MACtBC,gBAAgB,EAAEL,KAAK,CAACK,gBAAgB;MACxCC,UAAU,EAAEN,KAAK,CAACM,UAAU;MAC5BC,UAAU,EAAExB,IAAI,CAACY,MAAM;MACvBa,YAAY,EAAEN,KAAK,CAACO,IAAI;MACxBC,QAAQ,EAAER,KAAK,CAACS,GAAG;MACnBC,QAAQ,EAAEV,KAAK,CAACW,GAAG;MACnBC,iBAAiB,EAAEZ,KAAK,CAACY;KAC1B;EACH;EAEA;;;;;;;EAOAC,cAAcA,CACZjD,YAAoB,EACpBgB,SAAsC;IAAA;IAAAhE,aAAA,GAAAM,CAAA;IAEtC,MAAMkE,GAAG;IAAA;IAAA,CAAAxE,aAAA,GAAAE,CAAA,QAAG,IAAIuE,IAAI,EAAE;IACtB,MAAMC,gBAAgB;IAAA;IAAA,CAAA1E,aAAA,GAAAE,CAAA,QAAG;MACvBmE,KAAK,EAAE,IAAII,IAAI,CAACD,GAAG,CAACG,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;MAAE;MACtDL,GAAG,EAAEE;KACN;IAED,MAAMI,KAAK;IAAA;IAAA,CAAA5E,aAAA,GAAAE,CAAA;IAAG;IAAA,CAAAF,aAAA,GAAAO,CAAA,WAAAyD,SAAS;IAAA;IAAA,CAAAhE,aAAA,GAAAO,CAAA,WAAImE,gBAAgB;IAC3C,MAAMwB,MAAM;IAAA;IAAA,CAAAlG,aAAA,GAAAE,CAAA,QAAsB;MAChC8C,YAAY;MACZmD,WAAW,EAAE3B,GAAG;MAChBR,SAAS,EAAEY,KAAK;MAChBwB,YAAY,EAAE,CAAC;MACfC,OAAO,EAAE,EAAE;MACXC,OAAO,EAAE;QACPC,SAAS,EAAE,EAAE;QACbC,UAAU,EAAE,EAAE;QACdC,eAAe,EAAE;;KAEpB;IAED,IAAIC,UAAU;IAAA;IAAA,CAAA1G,aAAA,GAAAE,CAAA,QAAG,CAAC;IAClB,IAAIyG,WAAW;IAAA;IAAA,CAAA3G,aAAA,GAAAE,CAAA,QAAG,CAAC;IAEnB;IAAA;IAAAF,aAAA,GAAAE,CAAA;IACA,KAAK,MAAM6D,UAAU,IAAI6C,MAAM,CAAC9B,MAAM,CAACzE,UAAU,CAAC,EAAE;MAClD,MAAM4D,IAAI;MAAA;MAAA,CAAAjE,aAAA,GAAAE,CAAA,QAAG,IAAI,CAAC4D,kBAAkB,CAACd,YAAY,EAAEe,UAAU,EAAEa,KAAK,CAAC;MAAC;MAAA5E,aAAA,GAAAE,CAAA;MACtE,IAAI+D,IAAI,CAACY,MAAM,KAAK,CAAC,EAAE;QAAA;QAAA7E,aAAA,GAAAO,CAAA;QAAAP,aAAA,GAAAE,CAAA;QAAA;MAAA,CAAS;MAAA;MAAA;QAAAF,aAAA,GAAAO,CAAA;MAAA;MAEhC,MAAM2E,KAAK;MAAA;MAAA,CAAAlF,aAAA,GAAAE,CAAA,QAAG,IAAI,CAACqE,YAAY,CAACvB,YAAY,EAAEe,UAAU,EAAEa,KAAK,CAAC;MAChE,MAAMiC,YAAY;MAAA;MAAA,CAAA7G,aAAA,GAAAE,CAAA,QAAG+D,IAAI,CAACA,IAAI,CAACY,MAAM,GAAG,CAAC,CAAC,CAACG,KAAK;MAChD,MAAMU,YAAY;MAAA;MAAA,CAAA1F,aAAA,GAAAE,CAAA,QAAG+D,IAAI,CAAC6C,MAAM,CAAC,CAACC,GAAG,EAAE5C,KAAK,KAAK;QAAA;QAAAnE,aAAA,GAAAM,CAAA;QAAAN,aAAA,GAAAE,CAAA;QAAA,OAAA6G,GAAG,GAAG5C,KAAK,CAACa,KAAK;MAAL,CAAK,EAAE,CAAC,CAAC,GAAGf,IAAI,CAACY,MAAM;MACpF,MAAMmC,SAAS;MAAA;MAAA,CAAAhH,aAAA,GAAAE,CAAA,SAAG,IAAI,CAAC+G,kBAAkB,CAAClD,UAAU,EAAE8C,YAAY,CAAC;MACnE,MAAMJ,eAAe;MAAA;MAAA,CAAAzG,aAAA,GAAAE,CAAA,SAAG,IAAI,CAACgH,uBAAuB,CAACnD,UAAU,EAAE8C,YAAY,EAAE3B,KAAK,CAAC;MAAC;MAAAlF,aAAA,GAAAE,CAAA;MAEtFgG,MAAM,CAACG,OAAO,CAACtC,UAAU,CAAC,GAAG;QAC3BoD,OAAO,EAAEN,YAAY;QACrBO,OAAO,EAAE1B,YAAY;QACrBR,KAAK,EAAEA,KAAM;QACb8B,SAAS;QACTP;OACD;MAED;MACA,MAAMY,WAAW;MAAA;MAAA,CAAArH,aAAA,GAAAE,CAAA,SAAG,IAAI,CAACoH,oBAAoB,CAACvD,UAAU,EAAE8C,YAAY,CAAC;MAAC;MAAA7G,aAAA,GAAAE,CAAA;MACxEwG,UAAU,IAAIW,WAAW;MAAC;MAAArH,aAAA,GAAAE,CAAA;MAC1ByG,WAAW,EAAE;MAEb;MAAA;MAAA3G,aAAA,GAAAE,CAAA;MACA;MAAI;MAAA,CAAAF,aAAA,GAAAO,CAAA,WAAAyG,SAAS,KAAK,WAAW;MAAA;MAAA,CAAAhH,aAAA,GAAAO,CAAA,WAAIyG,SAAS,KAAK,MAAM,GAAE;QAAA;QAAAhH,aAAA,GAAAO,CAAA;QAAAP,aAAA,GAAAE,CAAA;QACrDgG,MAAM,CAACI,OAAO,CAACC,SAAS,CAACgB,IAAI,CAAC,GAAGxD,UAAU,KAAKiD,SAAS,CAACQ,WAAW,EAAE,EAAE,CAAC;MAC5E,CAAC,MAAM;QAAA;QAAAxH,aAAA,GAAAO,CAAA;QAAAP,aAAA,GAAAE,CAAA;QACLgG,MAAM,CAACI,OAAO,CAACE,UAAU,CAACe,IAAI,CAAC,GAAGxD,UAAU,KAAKiD,SAAS,CAACQ,WAAW,EAAE,EAAE,CAAC;MAC7E;MAAC;MAAAxH,aAAA,GAAAE,CAAA;MAEDgG,MAAM,CAACI,OAAO,CAACG,eAAe,CAACc,IAAI,CAAC,GAAGd,eAAe,CAAC;IACzD;IAEA;IAAA;IAAAzG,aAAA,GAAAE,CAAA;IACAgG,MAAM,CAACE,YAAY,GAAGO,WAAW,GAAG,CAAC;IAAA;IAAA,CAAA3G,aAAA,GAAAO,CAAA,WAAGmG,UAAU,GAAGC,WAAW;IAAA;IAAA,CAAA3G,aAAA,GAAAO,CAAA,WAAG,CAAC;IAAC;IAAAP,aAAA,GAAAE,CAAA;IAErE,IAAI,CAACS,MAAM,CAAC0B,IAAI,CAAC,gDAAgDW,YAAY,EAAE,EAAE;MAC/EoD,YAAY,EAAEF,MAAM,CAACE,YAAY;MACjCpC,SAAS,EAAEY;KACZ,CAAC;IAAC;IAAA5E,aAAA,GAAAE,CAAA;IAEH,IAAI,CAAC4C,IAAI,CAAC,iBAAiB,EAAEoD,MAAM,CAAC;IAAC;IAAAlG,aAAA,GAAAE,CAAA;IACrC,OAAOgG,MAAM;EACf;EAEA;;;;;EAKAuB,aAAaA,CAAA;IAAA;IAAAzH,aAAA,GAAAM,CAAA;IAAAN,aAAA,GAAAE,CAAA;IACX,OAAO,IAAIoB,GAAG,CAAC,IAAI,CAACL,UAAU,CAAC;EACjC;EAEA;;;;;;EAMAyG,eAAeA,CAAC3D,UAAsB,EAAEiD,SAA+B;IAAA;IAAAhH,aAAA,GAAAM,CAAA;IAAAN,aAAA,GAAAE,CAAA;IACrE,IAAI,CAACe,UAAU,CAACsC,GAAG,CAACQ,UAAU,EAAEiD,SAAS,CAAC;IAAC;IAAAhH,aAAA,GAAAE,CAAA;IAC3C,IAAI,CAACS,MAAM,CAAC0B,IAAI,CAAC,qCAAqC0B,UAAU,EAAE,EAAEiD,SAAS,CAAC;IAAC;IAAAhH,aAAA,GAAAE,CAAA;IAC/E,IAAI,CAAC4C,IAAI,CAAC,kBAAkB,EAAEiB,UAAU,EAAEiD,SAAS,CAAC;EACtD;EAEA;;;EAGQ5E,mBAAmBA,CAAA;IAAA;IAAApC,aAAA,GAAAM,CAAA;IAAAN,aAAA,GAAAE,CAAA;IACzB;IACA,IAAI,CAACU,aAAa,CAAC+G,EAAE,CAAC,iBAAiB,EAAGjF,UAAU,IAAI;MAAA;MAAA1C,aAAA,GAAAM,CAAA;MAAAN,aAAA,GAAAE,CAAA;MACtD,IAAI,IAAI,CAACkB,YAAY,EAAE;QAAA;QAAApB,aAAA,GAAAO,CAAA;QAAAP,aAAA,GAAAE,CAAA;QACrB,IAAI,CAACyC,4BAA4B,CAACD,UAAU,CAACE,EAAE,CAAC;MAClD,CAAC;MAAA;MAAA;QAAA5C,aAAA,GAAAO,CAAA;MAAA;IACH,CAAC,CAAC;IAEF;IAAA;IAAAP,aAAA,GAAAE,CAAA;IACA,IAAI,CAACU,aAAa,CAAC+G,EAAE,CAAC,oBAAoB,EAAGjF,UAAU,IAAI;MAAA;MAAA1C,aAAA,GAAAM,CAAA;MAAAN,aAAA,GAAAE,CAAA;MACzD,IAAI,CAAC0D,2BAA2B,CAAClB,UAAU,CAACE,EAAE,CAAC;IACjD,CAAC,CAAC;EACJ;EAEA;;;EAGQT,oBAAoBA,CAAA;IAAA;IAAAnC,aAAA,GAAAM,CAAA;IAAAN,aAAA,GAAAE,CAAA;IAC1B,IAAI,CAACe,UAAU,GAAG,IAAIK,GAAG,CAAC,CACxB,CAACjB,UAAU,CAACwB,OAAO,EAAE;MACnBkC,UAAU,EAAE1D,UAAU,CAACwB,OAAO;MAC9B+F,SAAS,EAAE,EAAE;MACbC,IAAI,EAAE,GAAG;MACTC,UAAU,EAAE,GAAG;MACfC,IAAI,EAAE,IAAI;MACVC,IAAI,EAAE,IAAI;MACVC,WAAW,EAAE;KACd,CAAC,EACF,CAAC5H,UAAU,CAAC2B,UAAU,EAAE;MACtB+B,UAAU,EAAE1D,UAAU,CAAC2B,UAAU;MACjC4F,SAAS,EAAE,KAAK;MAAE;MAClBC,IAAI,EAAE,IAAI;MAAQ;MAClBC,UAAU,EAAE,IAAI;MAAE;MAClBC,IAAI,EAAE,GAAG;MAAS;MAClBC,IAAI,EAAE,SAAS;MACfC,WAAW,EAAE;KACd,CAAC,EACF,CAAC5H,UAAU,CAACyB,WAAW,EAAE;MACvBiC,UAAU,EAAE1D,UAAU,CAACyB,WAAW;MAClC8F,SAAS,EAAE,CAAC;MACZC,IAAI,EAAE,CAAC;MACPC,UAAU,EAAE,CAAC;MACbC,IAAI,EAAE,EAAE;MACRC,IAAI,EAAE,GAAG;MACTC,WAAW,EAAE;KACd,CAAC,EACF,CAAC5H,UAAU,CAAC6H,eAAe,EAAE;MAC3BnE,UAAU,EAAE1D,UAAU,CAAC6H,eAAe;MACtCN,SAAS,EAAE,IAAI;MAAG;MAClBC,IAAI,EAAE,IAAI;MAAQ;MAClBC,UAAU,EAAE,KAAK;MAAE;MACnBC,IAAI,EAAE,KAAK;MAAO;MAClBC,IAAI,EAAE,IAAI;MACVC,WAAW,EAAE;KACd,CAAC,EACF,CAAC5H,UAAU,CAAC8H,MAAM,EAAE;MAClBpE,UAAU,EAAE1D,UAAU,CAAC8H,MAAM;MAC7BP,SAAS,EAAE,IAAI;MACfC,IAAI,EAAE,IAAI;MACVC,UAAU,EAAE,IAAI;MAChBC,IAAI,EAAE,IAAI;MACVC,IAAI,EAAE,GAAG;MACTC,WAAW,EAAE;KACd,CAAC,EACF,CAAC5H,UAAU,CAAC0B,UAAU,EAAE;MACtBgC,UAAU,EAAE1D,UAAU,CAAC0B,UAAU;MACjC6F,SAAS,EAAE,CAAC;MACZC,IAAI,EAAE,CAAC;MACPC,UAAU,EAAE,CAAC;MACbC,IAAI,EAAE,EAAE;MACRC,IAAI,EAAE,GAAG;MACTC,WAAW,EAAE;KACd,CAAC,CACH,CAAC;EACJ;EAEA;;;;;EAKQ,MAAMxE,sBAAsBA,CAACT,YAAoB;IAAA;IAAAhD,aAAA,GAAAM,CAAA;IACvD,MAAMoC,UAAU;IAAA;IAAA,CAAA1C,aAAA,GAAAE,CAAA,SAAG,IAAI,CAACU,aAAa,CAACwH,aAAa,CAACpF,YAAY,CAAC;IAAC;IAAAhD,aAAA,GAAAE,CAAA;IAClE,IAAI,CAACwC,UAAU,EAAE;MAAA;MAAA1C,aAAA,GAAAO,CAAA;MAAAP,aAAA,GAAAE,CAAA;MAAA;IAAA,CAAO;IAAA;IAAA;MAAAF,aAAA,GAAAO,CAAA;IAAA;IAExB,MAAM6D,SAAS;IAAA;IAAA,CAAApE,aAAA,GAAAE,CAAA,SAAG,IAAIuE,IAAI,EAAE;IAC5B,MAAMgB,UAAU;IAAA;IAAA,CAAAzF,aAAA,GAAAE,CAAA,SAA2B,EAAE;IAAC;IAAAF,aAAA,GAAAE,CAAA;IAE9C,IAAI;MACF;MACA,MAAMmI,aAAa;MAAA;MAAA,CAAArI,aAAA,GAAAE,CAAA,SAAG,IAAI,CAACW,aAAa,CAACyH,gBAAgB,CAACtF,YAAY,CAAC;MAAC;MAAAhD,aAAA,GAAAE,CAAA;MACxE,IAAImI,aAAa,EAAE;QAAA;QAAArI,aAAA,GAAAO,CAAA;QAAAP,aAAA,GAAAE,CAAA;QACjBuF,UAAU,CAAC8B,IAAI,CACb;UACEnD,SAAS;UACTpB,YAAY;UACZe,UAAU,EAAE1D,UAAU,CAACwB,OAAO;UAC9BmD,KAAK,EAAEqD,aAAa,CAACE,OAAO;UAC5BP,IAAI,EAAE;SACP,EACD;UACE5D,SAAS;UACTpB,YAAY;UACZe,UAAU,EAAE1D,UAAU,CAAC2B,UAAU;UACjCgD,KAAK,EAAEqD,aAAa,CAACG,UAAU;UAC/BR,IAAI,EAAE;SACP,EACD;UACE5D,SAAS;UACTpB,YAAY;UACZe,UAAU,EAAE1D,UAAU,CAACyB,WAAW;UAClCkD,KAAK,EAAEqD,aAAa,CAACI,UAAU;UAC/BT,IAAI,EAAE;SACP,CACF;MACH,CAAC;MAAA;MAAA;QAAAhI,aAAA,GAAAO,CAAA;MAAA;MAED;MACA,MAAMmI,UAAU;MAAA;MAAA,CAAA1I,aAAA,GAAAE,CAAA,SAAG,IAAI,CAACY,YAAY,CAAC6H,aAAa,CAAC3F,YAAY,CAAC;MAAC;MAAAhD,aAAA,GAAAE,CAAA;MACjE,IAAIwI,UAAU,EAAE;QAAA;QAAA1I,aAAA,GAAAO,CAAA;QAAAP,aAAA,GAAAE,CAAA;QACduF,UAAU,CAAC8B,IAAI,CACb;UACEnD,SAAS;UACTpB,YAAY;UACZe,UAAU,EAAE1D,UAAU,CAAC8H,MAAM;UAC7BnD,KAAK,EAAE0D,UAAU,CAACE,WAAW;UAC7BZ,IAAI,EAAE;SACP,EACD;UACE5D,SAAS;UACTpB,YAAY;UACZe,UAAU,EAAE1D,UAAU,CAAC6H,eAAe;UACtClD,KAAK,EAAE0D,UAAU,CAACG,qBAAqB;UACvCb,IAAI,EAAE;SACP,CACF;QAED;QACA,MAAMc,aAAa;QAAA;QAAA,CAAA9I,aAAA,GAAAE,CAAA,SAAGwI,UAAU,CAACK,kBAAkB;QACnD,MAAMC,SAAS;QAAA;QAAA,CAAAhJ,aAAA,GAAAE,CAAA,SAAG4I,aAAa,GAAG,CAAC;QAAA;QAAA,CAAA9I,aAAA,GAAAO,CAAA,WAC9BmI,UAAU,CAACO,iBAAiB,GAAGH,aAAa,GAAI,GAAG;QAAA;QAAA,CAAA9I,aAAA,GAAAO,CAAA,WACpD,CAAC;QAAC;QAAAP,aAAA,GAAAE,CAAA;QAENuF,UAAU,CAAC8B,IAAI,CAAC;UACdnD,SAAS;UACTpB,YAAY;UACZe,UAAU,EAAE1D,UAAU,CAAC0B,UAAU;UACjCiD,KAAK,EAAEgE,SAAS;UAChBhB,IAAI,EAAE;SACP,CAAC;MACJ,CAAC;MAAA;MAAA;QAAAhI,aAAA,GAAAO,CAAA;MAAA;MAED;MACA,MAAM2I,cAAc;MAAA;MAAA,CAAAlJ,aAAA,GAAAE,CAAA;MAAG;MAAA,CAAAF,aAAA,GAAAO,CAAA,eAAI,CAACS,eAAe,CAAC6C,GAAG,CAACb,YAAY,CAAC;MAAA;MAAA,CAAAhD,aAAA,GAAAO,CAAA,WAAI,EAAE;MAAC;MAAAP,aAAA,GAAAE,CAAA;MACpEgJ,cAAc,CAAC3B,IAAI,CAAC,GAAG9B,UAAU,CAAC;MAElC;MAAA;MAAAzF,aAAA,GAAAE,CAAA;MACA,IAAI,CAACiJ,cAAc,CAACnG,YAAY,CAAC;MAEjC;MAAA;MAAAhD,aAAA,GAAAE,CAAA;MACA,IAAI,IAAI,CAACa,MAAM,CAACY,uBAAuB,EAAE;QAAA;QAAA3B,aAAA,GAAAO,CAAA;QAAAP,aAAA,GAAAE,CAAA;QACvC,IAAI,CAACkJ,sBAAsB,CAAC3D,UAAU,CAAC;MACzC,CAAC;MAAA;MAAA;QAAAzF,aAAA,GAAAO,CAAA;MAAA;IAEH,CAAC,CAAC,OAAOmD,KAAK,EAAE;MAAA;MAAA1D,aAAA,GAAAE,CAAA;MACd,IAAI,CAACS,MAAM,CAAC+C,KAAK,CAAC,qDAAqDV,YAAY,EAAE,EAAEU,KAAK,CAAC;IAC/F;EACF;EAEA;;;;;EAKQyF,cAAcA,CAACnG,YAAoB;IAAA;IAAAhD,aAAA,GAAAM,CAAA;IACzC,MAAM2D,IAAI;IAAA;IAAA,CAAAjE,aAAA,GAAAE,CAAA,SAAG,IAAI,CAACc,eAAe,CAAC6C,GAAG,CAACb,YAAY,CAAC;IAAC;IAAAhD,aAAA,GAAAE,CAAA;IACpD,IAAI,CAAC+D,IAAI,EAAE;MAAA;MAAAjE,aAAA,GAAAO,CAAA;MAAAP,aAAA,GAAAE,CAAA;MAAA;IAAA,CAAO;IAAA;IAAA;MAAAF,aAAA,GAAAO,CAAA;IAAA;IAElB,MAAM8I,UAAU;IAAA;IAAA,CAAArJ,aAAA,GAAAE,CAAA,SAAGuE,IAAI,CAACD,GAAG,EAAE,GAAG,IAAI,CAACzD,MAAM,CAACS,eAAe;IAC3D,MAAM8H,YAAY;IAAA;IAAA,CAAAtJ,aAAA,GAAAE,CAAA,SAAG+D,IAAI,CAACC,MAAM,CAACC,KAAK,IAAI;MAAA;MAAAnE,aAAA,GAAAM,CAAA;MAAAN,aAAA,GAAAE,CAAA;MAAA,OAAAiE,KAAK,CAACC,SAAS,CAACO,OAAO,EAAE,GAAG0E,UAAU;IAAV,CAAU,CAAC;IAAC;IAAArJ,aAAA,GAAAE,CAAA;IAElF,IAAI,CAACc,eAAe,CAACuC,GAAG,CAACP,YAAY,EAAEsG,YAAY,CAAC;EACtD;EAEA;;;;;EAKQF,sBAAsBA,CAAC3D,UAAkC;IAAA;IAAAzF,aAAA,GAAAM,CAAA;IAAAN,aAAA,GAAAE,CAAA;IAC/D,KAAK,MAAMqJ,SAAS,IAAI9D,UAAU,EAAE;MAClC,MAAM+D,SAAS;MAAA;MAAA,CAAAxJ,aAAA,GAAAE,CAAA,SAAG,IAAI,CAACa,MAAM,CAACa,eAAe,CAAC2H,SAAS,CAACxF,UAAU,CAAC;MAAC;MAAA/D,aAAA,GAAAE,CAAA;MACpE,IAAIsJ,SAAS,KAAKC,SAAS,EAAE;QAAA;QAAAzJ,aAAA,GAAAO,CAAA;QAAAP,aAAA,GAAAE,CAAA;QAAA;MAAA,CAAS;MAAA;MAAA;QAAAF,aAAA,GAAAO,CAAA;MAAA;MAEtC,IAAImJ,cAAc;MAAA;MAAA,CAAA1J,aAAA,GAAAE,CAAA,SAAG,KAAK;MAC1B,IAAIyJ,YAAY;MAAA;MAAA,CAAA3J,aAAA,GAAAE,CAAA,SAAG,EAAE;MAAC;MAAAF,aAAA,GAAAE,CAAA;MAEtB,QAAQqJ,SAAS,CAACxF,UAAU;QAC1B,KAAK1D,UAAU,CAACwB,OAAO;UAAA;UAAA7B,aAAA,GAAAO,CAAA;QACvB,KAAKF,UAAU,CAAC6H,eAAe;UAAA;UAAAlI,aAAA,GAAAO,CAAA;UAAAP,aAAA,GAAAE,CAAA;UAC7B,IAAIqJ,SAAS,CAACvE,KAAK,GAAGwE,SAAS,EAAE;YAAA;YAAAxJ,aAAA,GAAAO,CAAA;YAAAP,aAAA,GAAAE,CAAA;YAC/BwJ,cAAc,GAAG,IAAI;YAAC;YAAA1J,aAAA,GAAAE,CAAA;YACtByJ,YAAY,GAAG,QAAQJ,SAAS,CAACxF,UAAU,CAACyD,WAAW,EAAE,KAAK+B,SAAS,CAACvE,KAAK,GAAGuE,SAAS,CAACvB,IAAI,EAAE;UAClG,CAAC;UAAA;UAAA;YAAAhI,aAAA,GAAAO,CAAA;UAAA;UAAAP,aAAA,GAAAE,CAAA;UACD;QAEF,KAAKG,UAAU,CAACyB,WAAW;UAAA;UAAA9B,aAAA,GAAAO,CAAA;QAC3B,KAAKF,UAAU,CAAC0B,UAAU;UAAA;UAAA/B,aAAA,GAAAO,CAAA;UAAAP,aAAA,GAAAE,CAAA;UACxB,IAAIqJ,SAAS,CAACvE,KAAK,GAAGwE,SAAS,EAAE;YAAA;YAAAxJ,aAAA,GAAAO,CAAA;YAAAP,aAAA,GAAAE,CAAA;YAC/BwJ,cAAc,GAAG,IAAI;YAAC;YAAA1J,aAAA,GAAAE,CAAA;YACtByJ,YAAY,GAAG,QAAQJ,SAAS,CAACxF,UAAU,CAACyD,WAAW,EAAE,KAAK+B,SAAS,CAACvE,KAAK,GAAGuE,SAAS,CAACvB,IAAI,EAAE;UAClG,CAAC;UAAA;UAAA;YAAAhI,aAAA,GAAAO,CAAA;UAAA;UAAAP,aAAA,GAAAE,CAAA;UACD;QAEF,KAAKG,UAAU,CAAC2B,UAAU;UAAA;UAAAhC,aAAA,GAAAO,CAAA;UAAAP,aAAA,GAAAE,CAAA;UACxB,IAAIqJ,SAAS,CAACvE,KAAK,GAAGwE,SAAS,EAAE;YAAA;YAAAxJ,aAAA,GAAAO,CAAA;YAAAP,aAAA,GAAAE,CAAA;YAC/BwJ,cAAc,GAAG,IAAI;YAAC;YAAA1J,aAAA,GAAAE,CAAA;YACtByJ,YAAY,GAAG,OAAOJ,SAAS,CAACxF,UAAU,CAACyD,WAAW,EAAE,KAAK+B,SAAS,CAACvE,KAAK,GAAGuE,SAAS,CAACvB,IAAI,EAAE;UACjG,CAAC;UAAA;UAAA;YAAAhI,aAAA,GAAAO,CAAA;UAAA;UAAAP,aAAA,GAAAE,CAAA;UACD;QAEF,KAAKG,UAAU,CAAC8H,MAAM;UAAA;UAAAnI,aAAA,GAAAO,CAAA;UAAAP,aAAA,GAAAE,CAAA;UACpB,IAAIqJ,SAAS,CAACvE,KAAK,GAAGwE,SAAS,EAAE;YAAA;YAAAxJ,aAAA,GAAAO,CAAA;YAAAP,aAAA,GAAAE,CAAA;YAC/BwJ,cAAc,GAAG,IAAI;YAAC;YAAA1J,aAAA,GAAAE,CAAA;YACtByJ,YAAY,GAAG,OAAOJ,SAAS,CAACxF,UAAU,CAACyD,WAAW,EAAE,KAAK+B,SAAS,CAACvE,KAAK,GAAGuE,SAAS,CAACvB,IAAI,EAAE;UACjG,CAAC;UAAA;UAAA;YAAAhI,aAAA,GAAAO,CAAA;UAAA;UAAAP,aAAA,GAAAE,CAAA;UACD;MACJ;MAAC;MAAAF,aAAA,GAAAE,CAAA;MAED,IAAIwJ,cAAc,EAAE;QAAA;QAAA1J,aAAA,GAAAO,CAAA;QAAAP,aAAA,GAAAE,CAAA;QAClB,IAAI,CAACS,MAAM,CAAC4B,IAAI,CAAC,sBAAsBoH,YAAY,EAAE,EAAE;UACrD3G,YAAY,EAAEuG,SAAS,CAACvG,YAAY;UACpCe,UAAU,EAAEwF,SAAS,CAACxF,UAAU;UAChCiB,KAAK,EAAEuE,SAAS,CAACvE,KAAK;UACtBwE;SACD,CAAC;QAAC;QAAAxJ,aAAA,GAAAE,CAAA;QAEH,IAAI,CAAC4C,IAAI,CAAC,kBAAkB,EAAE;UAC5BE,YAAY,EAAEuG,SAAS,CAACvG,YAAY;UACpCe,UAAU,EAAEwF,SAAS,CAACxF,UAAU;UAChCiB,KAAK,EAAEuE,SAAS,CAACvE,KAAK;UACtBwE,SAAS;UACTI,OAAO,EAAED,YAAY;UACrBvF,SAAS,EAAEmF,SAAS,CAACnF;SACtB,CAAC;MACJ,CAAC;MAAA;MAAA;QAAApE,aAAA,GAAAO,CAAA;MAAA;IACH;EACF;EAEA;;;;;;;EAOQ4E,cAAcA,CAACL,MAAgB,EAAEG,UAAoB;IAAA;IAAAjF,aAAA,GAAAM,CAAA;IAAAN,aAAA,GAAAE,CAAA;IAK3D,IAAI4E,MAAM,CAACD,MAAM,GAAG,CAAC,EAAE;MAAA;MAAA7E,aAAA,GAAAO,CAAA;MAAAP,aAAA,GAAAE,CAAA;MACrB,OAAO;QAAEoF,SAAS,EAAE,QAAQ;QAAEC,gBAAgB,EAAE,CAAC;QAAEC,UAAU,EAAE;MAAC,CAAE;IACpE,CAAC;IAAA;IAAA;MAAAxF,aAAA,GAAAO,CAAA;IAAA;IAED;IACA,MAAMsJ,CAAC;IAAA;IAAA,CAAA7J,aAAA,GAAAE,CAAA,SAAG4E,MAAM,CAACD,MAAM;IACvB,MAAMiF,IAAI;IAAA;IAAA,CAAA9J,aAAA,GAAAE,CAAA,SAAG+E,UAAU,CAAC6B,MAAM,CAAC,CAACC,GAAG,EAAEgD,CAAC,KAAK;MAAA;MAAA/J,aAAA,GAAAM,CAAA;MAAAN,aAAA,GAAAE,CAAA;MAAA,OAAA6G,GAAG,GAAGgD,CAAC;IAAD,CAAC,EAAE,CAAC,CAAC;IACtD,MAAMC,IAAI;IAAA;IAAA,CAAAhK,aAAA,GAAAE,CAAA,SAAG4E,MAAM,CAACgC,MAAM,CAAC,CAACC,GAAG,EAAEkD,CAAC,KAAK;MAAA;MAAAjK,aAAA,GAAAM,CAAA;MAAAN,aAAA,GAAAE,CAAA;MAAA,OAAA6G,GAAG,GAAGkD,CAAC;IAAD,CAAC,EAAE,CAAC,CAAC;IAClD,MAAMC,KAAK;IAAA;IAAA,CAAAlK,aAAA,GAAAE,CAAA,SAAG+E,UAAU,CAAC6B,MAAM,CAAC,CAACC,GAAG,EAAEgD,CAAC,EAAEI,CAAC,KAAK;MAAA;MAAAnK,aAAA,GAAAM,CAAA;MAAAN,aAAA,GAAAE,CAAA;MAAA,OAAA6G,GAAG,GAAGgD,CAAC,GAAGjF,MAAM,CAACqF,CAAC,CAAC;IAAD,CAAC,EAAE,CAAC,CAAC;IACtE,MAAMC,KAAK;IAAA;IAAA,CAAApK,aAAA,GAAAE,CAAA,SAAG+E,UAAU,CAAC6B,MAAM,CAAC,CAACC,GAAG,EAAEgD,CAAC,KAAK;MAAA;MAAA/J,aAAA,GAAAM,CAAA;MAAAN,aAAA,GAAAE,CAAA;MAAA,OAAA6G,GAAG,GAAGgD,CAAC,GAAGA,CAAC;IAAD,CAAC,EAAE,CAAC,CAAC;IAE3D,MAAMM,KAAK;IAAA;IAAA,CAAArK,aAAA,GAAAE,CAAA,SAAG,CAAC2J,CAAC,GAAGK,KAAK,GAAGJ,IAAI,GAAGE,IAAI,KAAKH,CAAC,GAAGO,KAAK,GAAGN,IAAI,GAAGA,IAAI,CAAC;IACnE,MAAMQ,SAAS;IAAA;IAAA,CAAAtK,aAAA,GAAAE,CAAA,SAAG,CAAC8J,IAAI,GAAGK,KAAK,GAAGP,IAAI,IAAID,CAAC;IAE3C;IACA,MAAMU,KAAK;IAAA;IAAA,CAAAvK,aAAA,GAAAE,CAAA,SAAG8J,IAAI,GAAGH,CAAC;IACtB,MAAMW,KAAK;IAAA;IAAA,CAAAxK,aAAA,GAAAE,CAAA,SAAG4E,MAAM,CAACgC,MAAM,CAAC,CAACC,GAAG,EAAEkD,CAAC,EAAEE,CAAC,KAAI;MAAA;MAAAnK,aAAA,GAAAM,CAAA;MACxC,MAAMmK,SAAS;MAAA;MAAA,CAAAzK,aAAA,GAAAE,CAAA,SAAGmK,KAAK,GAAGpF,UAAU,CAACkF,CAAC,CAAC,GAAGG,SAAS;MAAC;MAAAtK,aAAA,GAAAE,CAAA;MACpD,OAAO6G,GAAG,GAAG2D,IAAI,CAACC,GAAG,CAACV,CAAC,GAAGQ,SAAS,EAAE,CAAC,CAAC;IACzC,CAAC,EAAE,CAAC,CAAC;IACL,MAAMG,KAAK;IAAA;IAAA,CAAA5K,aAAA,GAAAE,CAAA,SAAG4E,MAAM,CAACgC,MAAM,CAAC,CAACC,GAAG,EAAEkD,CAAC,KAAK;MAAA;MAAAjK,aAAA,GAAAM,CAAA;MAAAN,aAAA,GAAAE,CAAA;MAAA,OAAA6G,GAAG,GAAG2D,IAAI,CAACC,GAAG,CAACV,CAAC,GAAGM,KAAK,EAAE,CAAC,CAAC;IAAD,CAAC,EAAE,CAAC,CAAC;IACxE,MAAMM,QAAQ;IAAA;IAAA,CAAA7K,aAAA,GAAAE,CAAA,SAAG,CAAC,GAAIsK,KAAK,GAAGI,KAAM;IAEpC;IACA,MAAME,UAAU;IAAA;IAAA,CAAA9K,aAAA,GAAAE,CAAA,SAAG4E,MAAM,CAAC,CAAC,CAAC;IAC5B,MAAMiG,SAAS;IAAA;IAAA,CAAA/K,aAAA,GAAAE,CAAA,SAAG4E,MAAM,CAACA,MAAM,CAACD,MAAM,GAAG,CAAC,CAAC;IAC3C,MAAMU,gBAAgB;IAAA;IAAA,CAAAvF,aAAA,GAAAE,CAAA,SAAG4K,UAAU,KAAK,CAAC;IAAA;IAAA,CAAA9K,aAAA,GAAAO,CAAA,WAAI,CAACwK,SAAS,GAAGD,UAAU,IAAIA,UAAU,GAAI,GAAG;IAAA;IAAA,CAAA9K,aAAA,GAAAO,CAAA,WAAG,CAAC;IAE7F,IAAI+E,SAA+C;IAAC;IAAAtF,aAAA,GAAAE,CAAA;IACpD,IAAIwK,IAAI,CAACM,GAAG,CAACzF,gBAAgB,CAAC,GAAG,CAAC,EAAE;MAAA;MAAAvF,aAAA,GAAAO,CAAA;MAAAP,aAAA,GAAAE,CAAA;MAClCoF,SAAS,GAAG,QAAQ;IACtB,CAAC,MAAM;MAAA;MAAAtF,aAAA,GAAAO,CAAA;MAAAP,aAAA,GAAAE,CAAA;MAAA,IAAIqF,gBAAgB,GAAG,CAAC,EAAE;QAAA;QAAAvF,aAAA,GAAAO,CAAA;QAAAP,aAAA,GAAAE,CAAA;QAC/BoF,SAAS,GAAG,WAAW;MACzB,CAAC,MAAM;QAAA;QAAAtF,aAAA,GAAAO,CAAA;QAAAP,aAAA,GAAAE,CAAA;QACLoF,SAAS,GAAG,WAAW;MACzB;IAAA;IAAC;IAAAtF,aAAA,GAAAE,CAAA;IAED,OAAO;MACLoF,SAAS;MACTC,gBAAgB,EAAEmF,IAAI,CAACM,GAAG,CAACzF,gBAAgB,CAAC;MAC5CC,UAAU,EAAEkF,IAAI,CAAC3E,GAAG,CAAC,CAAC,EAAE2E,IAAI,CAAC7E,GAAG,CAAC,GAAG,EAAEgF,QAAQ,GAAG,GAAG,CAAC;KACtD;EACH;EAEA;;;;;;EAMQxF,mBAAmBA,CAACP,MAAgB;IAAA;IAAA9E,aAAA,GAAAM,CAAA;IAAAN,aAAA,GAAAE,CAAA;IAM1C,IAAI4E,MAAM,CAACD,MAAM,KAAK,CAAC,EAAE;MAAA;MAAA7E,aAAA,GAAAO,CAAA;MAAAP,aAAA,GAAAE,CAAA;MACvB,OAAO;QAAEyF,IAAI,EAAE,CAAC;QAAEE,GAAG,EAAE,CAAC;QAAEE,GAAG,EAAE,CAAC;QAAEC,iBAAiB,EAAE;MAAC,CAAE;IAC1D,CAAC;IAAA;IAAA;MAAAhG,aAAA,GAAAO,CAAA;IAAA;IAED,MAAMoF,IAAI;IAAA;IAAA,CAAA3F,aAAA,GAAAE,CAAA,SAAG4E,MAAM,CAACgC,MAAM,CAAC,CAACC,GAAG,EAAEkD,CAAC,KAAK;MAAA;MAAAjK,aAAA,GAAAM,CAAA;MAAAN,aAAA,GAAAE,CAAA;MAAA,OAAA6G,GAAG,GAAGkD,CAAC;IAAD,CAAC,EAAE,CAAC,CAAC,GAAGnF,MAAM,CAACD,MAAM;IAClE,MAAMgB,GAAG;IAAA;IAAA,CAAA7F,aAAA,GAAAE,CAAA,SAAGwK,IAAI,CAAC7E,GAAG,CAAC,GAAGf,MAAM,CAAC;IAC/B,MAAMiB,GAAG;IAAA;IAAA,CAAA/F,aAAA,GAAAE,CAAA,SAAGwK,IAAI,CAAC3E,GAAG,CAAC,GAAGjB,MAAM,CAAC;IAE/B,MAAMmG,QAAQ;IAAA;IAAA,CAAAjL,aAAA,GAAAE,CAAA,SAAG4E,MAAM,CAACgC,MAAM,CAAC,CAACC,GAAG,EAAEkD,CAAC,KAAK;MAAA;MAAAjK,aAAA,GAAAM,CAAA;MAAAN,aAAA,GAAAE,CAAA;MAAA,OAAA6G,GAAG,GAAG2D,IAAI,CAACC,GAAG,CAACV,CAAC,GAAGtE,IAAI,EAAE,CAAC,CAAC;IAAD,CAAC,EAAE,CAAC,CAAC,GAAGb,MAAM,CAACD,MAAM;IAC1F,MAAMmB,iBAAiB;IAAA;IAAA,CAAAhG,aAAA,GAAAE,CAAA,SAAGwK,IAAI,CAACQ,IAAI,CAACD,QAAQ,CAAC;IAAC;IAAAjL,aAAA,GAAAE,CAAA;IAE9C,OAAO;MAAEyF,IAAI;MAAEE,GAAG;MAAEE,GAAG;MAAEC;IAAiB,CAAE;EAC9C;EAEA;;;;;;;EAOQiB,kBAAkBA,CAAClD,UAAsB,EAAEiB,KAAa;IAAA;IAAAhF,aAAA,GAAAM,CAAA;IAC9D,MAAM0G,SAAS;IAAA;IAAA,CAAAhH,aAAA,GAAAE,CAAA,SAAG,IAAI,CAACe,UAAU,CAAC4C,GAAG,CAACE,UAAU,CAAC;IAAC;IAAA/D,aAAA,GAAAE,CAAA;IAClD,IAAI,CAAC8G,SAAS,EAAE;MAAA;MAAAhH,aAAA,GAAAO,CAAA;MAAAP,aAAA,GAAAE,CAAA;MAAA,OAAO,YAAY;IAAA,CAAC;IAAA;IAAA;MAAAF,aAAA,GAAAO,CAAA;IAAA;IAEpC;IACA,MAAM4K,aAAa;IAAA;IAAA,CAAAnL,aAAA,GAAAE,CAAA,SAAG,CAACG,UAAU,CAACwB,OAAO,EAAExB,UAAU,CAACyB,WAAW,EAAEzB,UAAU,CAAC0B,UAAU,EAAE1B,UAAU,CAAC6H,eAAe,CAAC;IAAC;IAAAlI,aAAA,GAAAE,CAAA;IAEtH,IAAIiL,aAAa,CAACC,QAAQ,CAACrH,UAAU,CAAC,EAAE;MAAA;MAAA/D,aAAA,GAAAO,CAAA;MAAAP,aAAA,GAAAE,CAAA;MACtC,IAAI8E,KAAK,IAAIgC,SAAS,CAACY,SAAS,EAAE;QAAA;QAAA5H,aAAA,GAAAO,CAAA;QAAAP,aAAA,GAAAE,CAAA;QAAA,OAAO,WAAW;MAAA,CAAC;MAAA;MAAA;QAAAF,aAAA,GAAAO,CAAA;MAAA;MAAAP,aAAA,GAAAE,CAAA;MACrD,IAAI8E,KAAK,IAAIgC,SAAS,CAACa,IAAI,EAAE;QAAA;QAAA7H,aAAA,GAAAO,CAAA;QAAAP,aAAA,GAAAE,CAAA;QAAA,OAAO,MAAM;MAAA,CAAC;MAAA;MAAA;QAAAF,aAAA,GAAAO,CAAA;MAAA;MAAAP,aAAA,GAAAE,CAAA;MAC3C,IAAI8E,KAAK,IAAIgC,SAAS,CAACc,UAAU,EAAE;QAAA;QAAA9H,aAAA,GAAAO,CAAA;QAAAP,aAAA,GAAAE,CAAA;QAAA,OAAO,YAAY;MAAA,CAAC;MAAA;MAAA;QAAAF,aAAA,GAAAO,CAAA;MAAA;MAAAP,aAAA,GAAAE,CAAA;MACvD,OAAO,MAAM;IACf,CAAC,MAAM;MAAA;MAAAF,aAAA,GAAAO,CAAA;MAAAP,aAAA,GAAAE,CAAA;MACL;MACA,IAAI8E,KAAK,IAAIgC,SAAS,CAACY,SAAS,EAAE;QAAA;QAAA5H,aAAA,GAAAO,CAAA;QAAAP,aAAA,GAAAE,CAAA;QAAA,OAAO,WAAW;MAAA,CAAC;MAAA;MAAA;QAAAF,aAAA,GAAAO,CAAA;MAAA;MAAAP,aAAA,GAAAE,CAAA;MACrD,IAAI8E,KAAK,IAAIgC,SAAS,CAACa,IAAI,EAAE;QAAA;QAAA7H,aAAA,GAAAO,CAAA;QAAAP,aAAA,GAAAE,CAAA;QAAA,OAAO,MAAM;MAAA,CAAC;MAAA;MAAA;QAAAF,aAAA,GAAAO,CAAA;MAAA;MAAAP,aAAA,GAAAE,CAAA;MAC3C,IAAI8E,KAAK,IAAIgC,SAAS,CAACc,UAAU,EAAE;QAAA;QAAA9H,aAAA,GAAAO,CAAA;QAAAP,aAAA,GAAAE,CAAA;QAAA,OAAO,YAAY;MAAA,CAAC;MAAA;MAAA;QAAAF,aAAA,GAAAO,CAAA;MAAA;MAAAP,aAAA,GAAAE,CAAA;MACvD,OAAO,MAAM;IACf;EACF;EAEA;;;;;;;EAOQoH,oBAAoBA,CAACvD,UAAsB,EAAEiB,KAAa;IAAA;IAAAhF,aAAA,GAAAM,CAAA;IAChE,MAAM+K,MAAM;IAAA;IAAA,CAAArL,aAAA,GAAAE,CAAA,SAAG,IAAI,CAAC+G,kBAAkB,CAAClD,UAAU,EAAEiB,KAAK,CAAC;IAAC;IAAAhF,aAAA,GAAAE,CAAA;IAE1D,QAAQmL,MAAM;MACZ,KAAK,WAAW;QAAA;QAAArL,aAAA,GAAAO,CAAA;QAAAP,aAAA,GAAAE,CAAA;QAAE,OAAO,GAAG;MAC5B,KAAK,MAAM;QAAA;QAAAF,aAAA,GAAAO,CAAA;QAAAP,aAAA,GAAAE,CAAA;QAAE,OAAO,EAAE;MACtB,KAAK,YAAY;QAAA;QAAAF,aAAA,GAAAO,CAAA;QAAAP,aAAA,GAAAE,CAAA;QAAE,OAAO,EAAE;MAC5B,KAAK,MAAM;QAAA;QAAAF,aAAA,GAAAO,CAAA;QAAAP,aAAA,GAAAE,CAAA;QAAE,OAAO,EAAE;MACtB;QAAA;QAAAF,aAAA,GAAAO,CAAA;QAAAP,aAAA,GAAAE,CAAA;QAAS,OAAO,EAAE;IACpB;EACF;EAEA;;;;;;;;EAQQgH,uBAAuBA,CAACnD,UAAsB,EAAEiB,KAAa,EAAEE,KAA8B;IAAA;IAAAlF,aAAA,GAAAM,CAAA;IACnG,MAAMmG,eAAe;IAAA;IAAA,CAAAzG,aAAA,GAAAE,CAAA,SAAa,EAAE;IACpC,MAAMmL,MAAM;IAAA;IAAA,CAAArL,aAAA,GAAAE,CAAA,SAAG,IAAI,CAAC+G,kBAAkB,CAAClD,UAAU,EAAEiB,KAAK,CAAC;IAAC;IAAAhF,aAAA,GAAAE,CAAA;IAE1D;IAAI;IAAA,CAAAF,aAAA,GAAAO,CAAA,WAAA8K,MAAM,KAAK,MAAM;IAAA;IAAA,CAAArL,aAAA,GAAAO,CAAA,WAAI8K,MAAM,KAAK,YAAY,GAAE;MAAA;MAAArL,aAAA,GAAAO,CAAA;MAAAP,aAAA,GAAAE,CAAA;MAChD,QAAQ6D,UAAU;QAChB,KAAK1D,UAAU,CAACwB,OAAO;UAAA;UAAA7B,aAAA,GAAAO,CAAA;UAAAP,aAAA,GAAAE,CAAA;UACrBuG,eAAe,CAACc,IAAI,CAAC,qEAAqE,CAAC;UAAC;UAAAvH,aAAA,GAAAE,CAAA;UAC5F;QACF,KAAKG,UAAU,CAAC2B,UAAU;UAAA;UAAAhC,aAAA,GAAAO,CAAA;UAAAP,aAAA,GAAAE,CAAA;UACxBuG,eAAe,CAACc,IAAI,CAAC,uDAAuD,CAAC;UAAC;UAAAvH,aAAA,GAAAE,CAAA;UAC9E;QACF,KAAKG,UAAU,CAACyB,WAAW;UAAA;UAAA9B,aAAA,GAAAO,CAAA;UAAAP,aAAA,GAAAE,CAAA;UACzBuG,eAAe,CAACc,IAAI,CAAC,gEAAgE,CAAC;UAAC;UAAAvH,aAAA,GAAAE,CAAA;UACvF;QACF,KAAKG,UAAU,CAAC6H,eAAe;UAAA;UAAAlI,aAAA,GAAAO,CAAA;UAAAP,aAAA,GAAAE,CAAA;UAC7BuG,eAAe,CAACc,IAAI,CAAC,2DAA2D,CAAC;UAAC;UAAAvH,aAAA,GAAAE,CAAA;UAClF;QACF,KAAKG,UAAU,CAAC8H,MAAM;UAAA;UAAAnI,aAAA,GAAAO,CAAA;UAAAP,aAAA,GAAAE,CAAA;UACpBuG,eAAe,CAACc,IAAI,CAAC,8DAA8D,CAAC;UAAC;UAAAvH,aAAA,GAAAE,CAAA;UACrF;QACF,KAAKG,UAAU,CAAC0B,UAAU;UAAA;UAAA/B,aAAA,GAAAO,CAAA;UAAAP,aAAA,GAAAE,CAAA;UACxBuG,eAAe,CAACc,IAAI,CAAC,uDAAuD,CAAC;UAAC;UAAAvH,aAAA,GAAAE,CAAA;UAC9E;MACJ;IACF,CAAC;IAAA;IAAA;MAAAF,aAAA,GAAAO,CAAA;IAAA;IAAAP,aAAA,GAAAE,CAAA;IAED;IAAI;IAAA,CAAAF,aAAA,GAAAO,CAAA,WAAA2E,KAAK;IAAA;IAAA,CAAAlF,aAAA,GAAAO,CAAA,WAAI2E,KAAK,CAACA,KAAK,KAAK,WAAW;IAAA;IAAA,CAAAlF,aAAA,GAAAO,CAAA,WAAI2E,KAAK,CAACM,UAAU,GAAG,EAAE,GAAE;MAAA;MAAAxF,aAAA,GAAAO,CAAA;MAAAP,aAAA,GAAAE,CAAA;MACjEuG,eAAe,CAACc,IAAI,CAAC,6BAA6BrC,KAAK,CAACK,gBAAgB,CAAC+F,OAAO,CAAC,CAAC,CAAC,YAAY,CAAC;IAClG,CAAC;IAAA;IAAA;MAAAtL,aAAA,GAAAO,CAAA;IAAA;IAAAP,aAAA,GAAAE,CAAA;IAED,OAAOuG,eAAe;EACxB;EAEA;;;EAGQ5D,kBAAkBA,CAAA;IAAA;IAAA7C,aAAA,GAAAM,CAAA;IAAAN,aAAA,GAAAE,CAAA;IACxB,IAAI,IAAI,CAACiB,cAAc,EAAE;MAAA;MAAAnB,aAAA,GAAAO,CAAA;MAAAP,aAAA,GAAAE,CAAA;MACvBiD,aAAa,CAAC,IAAI,CAAChC,cAAc,CAAC;IACpC,CAAC;IAAA;IAAA;MAAAnB,aAAA,GAAAO,CAAA;IAAA;IAAAP,aAAA,GAAAE,CAAA;IAED,IAAI,CAACiB,cAAc,GAAGqC,WAAW,CAAC,MAAK;MAAA;MAAAxD,aAAA,GAAAM,CAAA;MACrC,MAAMkC,WAAW;MAAA;MAAA,CAAAxC,aAAA,GAAAE,CAAA,SAAG,IAAI,CAACU,aAAa,CAAC6B,iBAAiB,EAAE;MAAC;MAAAzC,aAAA,GAAAE,CAAA;MAC3D,KAAK,MAAMwC,UAAU,IAAIF,WAAW,EAAE;QAAA;QAAAxC,aAAA,GAAAE,CAAA;QACpC,IAAI;UACF,MAAMgG,MAAM;UAAA;UAAA,CAAAlG,aAAA,GAAAE,CAAA,SAAG,IAAI,CAAC+F,cAAc,CAACvD,UAAU,CAACE,EAAE,CAAC;UAAC;UAAA5C,aAAA,GAAAE,CAAA;UAClD,IAAI,CAAC4C,IAAI,CAAC,iBAAiB,EAAEoD,MAAM,CAAC;QACtC,CAAC,CAAC,OAAOxC,KAAK,EAAE;UAAA;UAAA1D,aAAA,GAAAE,CAAA;UACd,IAAI,CAACS,MAAM,CAAC+C,KAAK,CAAC,sDAAsDhB,UAAU,CAACE,EAAE,EAAE,EAAEc,KAAK,CAAC;QACjG;MACF;IACF,CAAC,EAAE,IAAI,CAAC3C,MAAM,CAACmB,cAAc,CAAC;IAAC;IAAAlC,aAAA,GAAAE,CAAA;IAE/B,IAAI,CAACS,MAAM,CAAC0B,IAAI,CAAC,yCAAyC,CAAC;EAC7D;EAEA;;;EAGAkJ,OAAOA,CAAA;IAAA;IAAAvL,aAAA,GAAAM,CAAA;IAAAN,aAAA,GAAAE,CAAA;IACL,IAAI,CAAC6C,cAAc,EAAE;IAAC;IAAA/C,aAAA,GAAAE,CAAA;IACtB,IAAI,CAACc,eAAe,CAACwK,KAAK,EAAE;IAAC;IAAAxL,aAAA,GAAAE,CAAA;IAC7B,IAAI,CAACS,MAAM,CAAC0B,IAAI,CAAC,gDAAgD,CAAC;EACpE;;AACD;AAAArC,aAAA,GAAAE,CAAA;AArxBDM,OAAA,CAAAC,0BAAA,GAAAA,0BAAA","ignoreList":[]}