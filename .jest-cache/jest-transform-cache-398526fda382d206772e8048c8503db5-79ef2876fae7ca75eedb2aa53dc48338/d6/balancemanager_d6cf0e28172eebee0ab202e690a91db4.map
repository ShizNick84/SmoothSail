{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\account\\balance-manager.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\account\\balance-manager.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * ACCOUNT AND BALANCE MANAGEMENT SYSTEM\r\n * =============================================================================\r\n * \r\n * This module implements comprehensive account and balance management for\r\n * Gate.io cryptocurrency trading with real-time monitoring, validation,\r\n * discrepancy detection, and comprehensive audit logging.\r\n * \r\n * SECURITY FEATURES:\r\n * - Real-time balance monitoring and validation\r\n * - Automatic discrepancy detection and alerting\r\n * - Transaction history tracking and reconciliation\r\n * - Balance threshold alerts and notifications\r\n * - Comprehensive audit logging for all balance operations\r\n * - Emergency balance protection mechanisms\r\n * \r\n * CRITICAL FINANCIAL NOTICE:\r\n * This system handles real financial assets and account balances.\r\n * All balance operations must be validated and logged for audit compliance.\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport { EventEmitter } from 'events';\r\nimport { logger } from '@/core/logging/logger';\r\nimport { AuditService } from '@/security/audit-service';\r\nimport { GateIOClient } from '../api/gate-io-client';\r\nimport { AccountBalance, SpotAccount, TradeHistory } from '../api/types';\r\n\r\n/**\r\n * Balance snapshot for historical tracking\r\n */\r\ninterface BalanceSnapshot {\r\n  timestamp: Date;\r\n  balances: Map<string, AccountBalance>;\r\n  totalValueUSD: number;\r\n  snapshotId: string;\r\n}\r\n\r\n/**\r\n * Balance discrepancy detection result\r\n */\r\ninterface DiscrepancyResult {\r\n  hasDiscrepancy: boolean;\r\n  currency: string;\r\n  expectedBalance: number;\r\n  actualBalance: number;\r\n  difference: number;\r\n  differencePercent: number;\r\n  severity: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';\r\n  timestamp: Date;\r\n}\r\n\r\n/**\r\n * Balance alert configuration\r\n */\r\ninterface BalanceAlert {\r\n  currency: string;\r\n  alertType: 'LOW_BALANCE' | 'HIGH_BALANCE' | 'RAPID_CHANGE' | 'DISCREPANCY';\r\n  threshold: number;\r\n  enabled: boolean;\r\n  lastTriggered: Date | null;\r\n  triggerCount: number;\r\n}\r\n\r\n/**\r\n * Transaction reconciliation result\r\n */\r\ninterface ReconciliationResult {\r\n  isReconciled: boolean;\r\n  currency: string;\r\n  expectedBalance: number;\r\n  actualBalance: number;\r\n  reconciledTransactions: number;\r\n  unreconciledTransactions: TradeHistory[];\r\n  discrepancies: DiscrepancyResult[];\r\n  timestamp: Date;\r\n}\r\n\r\n/**\r\n * Balance management statistics\r\n */\r\ninterface BalanceStats {\r\n  totalBalanceChecks: number;\r\n  discrepanciesDetected: number;\r\n  alertsTriggered: number;\r\n  reconciliationsPerformed: number;\r\n  lastBalanceUpdate: Date | null;\r\n  averageBalanceCheckTime: number;\r\n  balanceAccuracy: number; // Percentage\r\n}\r\n\r\n/**\r\n * Balance management configuration\r\n */\r\ninterface BalanceConfig {\r\n  enableRealTimeMonitoring: boolean;\r\n  monitoringInterval: number; // milliseconds\r\n  discrepancyThreshold: number; // percentage\r\n  enableAlerts: boolean;\r\n  enableReconciliation: boolean;\r\n  reconciliationInterval: number; // milliseconds\r\n  snapshotRetentionDays: number;\r\n  emergencyStopThreshold: number; // percentage loss\r\n}\r\n\r\n/**\r\n * Account and Balance Management System\r\n * Handles comprehensive balance monitoring, validation, and reconciliation\r\n */\r\nexport class BalanceManager extends EventEmitter {\r\n  private gateIOClient: GateIOClient;\r\n  private auditService: AuditService;\r\n  private currentBalances: Map<string, AccountBalance> = new Map();\r\n  private balanceHistory: BalanceSnapshot[] = [];\r\n  private balanceAlerts: Map<string, BalanceAlert[]> = new Map();\r\n  private stats: BalanceStats;\r\n  private config: BalanceConfig;\r\n  \r\n  // Monitoring intervals\r\n  private monitoringTimer: NodeJS.Timeout | null = null;\r\n  private reconciliationTimer: NodeJS.Timeout | null = null;\r\n  \r\n  // Transaction tracking\r\n  private transactionHistory: Map<string, TradeHistory[]> = new Map();\r\n  private lastReconciliation: Date | null = null;\r\n\r\n  constructor(gateIOClient: GateIOClient) {\r\n    super();\r\n    \r\n    this.gateIOClient = gateIOClient;\r\n    this.auditService = new AuditService();\r\n    \r\n    // Initialize statistics\r\n    this.stats = {\r\n      totalBalanceChecks: 0,\r\n      discrepanciesDetected: 0,\r\n      alertsTriggered: 0,\r\n      reconciliationsPerformed: 0,\r\n      lastBalanceUpdate: null,\r\n      averageBalanceCheckTime: 0,\r\n      balanceAccuracy: 100,\r\n    };\r\n    \r\n    // Default configuration\r\n    this.config = {\r\n      enableRealTimeMonitoring: true,\r\n      monitoringInterval: 30000, // 30 seconds\r\n      discrepancyThreshold: 0.01, // 1%\r\n      enableAlerts: true,\r\n      enableReconciliation: true,\r\n      reconciliationInterval: 300000, // 5 minutes\r\n      snapshotRetentionDays: 30,\r\n      emergencyStopThreshold: 10, // 10% loss\r\n    };\r\n    \r\n    logger.info('💰 Balance Manager initialized with comprehensive monitoring');\r\n  }\r\n\r\n  /**\r\n   * Initialize balance manager with configuration\r\n   * \r\n   * @param config - Balance management configuration\r\n   * @returns Promise<boolean> - Success status\r\n   */\r\n  public async initialize(config?: Partial<BalanceConfig>): Promise<boolean> {\r\n    try {\r\n      logger.info('🚀 Initializing Balance Manager...');\r\n      \r\n      // Update configuration\r\n      if (config) {\r\n        this.config = { ...this.config, ...config };\r\n      }\r\n      \r\n      // Load initial balances\r\n      await this.loadCurrentBalances();\r\n      \r\n      // Initialize balance alerts\r\n      this.initializeBalanceAlerts();\r\n      \r\n      // Load transaction history\r\n      await this.loadTransactionHistory();\r\n      \r\n      // Start monitoring if enabled\r\n      if (this.config.enableRealTimeMonitoring) {\r\n        this.startRealTimeMonitoring();\r\n      }\r\n      \r\n      // Start reconciliation if enabled\r\n      if (this.config.enableReconciliation) {\r\n        this.startReconciliation();\r\n      }\r\n      \r\n      await this.auditService.logSecurityEvent({\r\n        type: 'BALANCE_MANAGER_INITIALIZED',\r\n        severity: 'INFO',\r\n        details: { \r\n          config: this.config,\r\n          initialBalanceCount: this.currentBalances.size \r\n        },\r\n        timestamp: new Date(),\r\n      });\r\n      \r\n      logger.info('✅ Balance Manager initialized successfully');\r\n      return true;\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to initialize Balance Manager:', error);\r\n      await this.auditService.logSecurityEvent({\r\n        type: 'BALANCE_MANAGER_INIT_FAILED',\r\n        severity: 'ERROR',\r\n        details: { error: error.message },\r\n        timestamp: new Date(),\r\n      });\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get current account balances with real-time updates\r\n   * \r\n   * @param forceRefresh - Force refresh from exchange\r\n   * @returns Promise<Map<string, AccountBalance>> - Current balances\r\n   */\r\n  public async getCurrentBalances(forceRefresh: boolean = false): Promise<Map<string, AccountBalance>> {\r\n    try {\r\n      if (forceRefresh || this.shouldRefreshBalances()) {\r\n        await this.loadCurrentBalances();\r\n      }\r\n      \r\n      return new Map(this.currentBalances);\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to get current balances:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get balance for specific currency\r\n   * \r\n   * @param currency - Currency symbol\r\n   * @param forceRefresh - Force refresh from exchange\r\n   * @returns Promise<AccountBalance | null> - Balance or null if not found\r\n   */\r\n  public async getBalance(currency: string, forceRefresh: boolean = false): Promise<AccountBalance | null> {\r\n    try {\r\n      const balances = await this.getCurrentBalances(forceRefresh);\r\n      return balances.get(currency) || null;\r\n      \r\n    } catch (error) {\r\n      logger.error(`❌ Failed to get balance for ${currency}:`, error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get total portfolio value in USD\r\n   * \r\n   * @returns Promise<number> - Total portfolio value\r\n   */\r\n  public async getTotalPortfolioValue(): Promise<number> {\r\n    try {\r\n      const balances = await this.getCurrentBalances();\r\n      let totalValue = 0;\r\n      \r\n      for (const [currency, balance] of balances) {\r\n        if (currency === 'USDT' || currency === 'USD') {\r\n          totalValue += parseFloat(balance.total);\r\n        } else {\r\n          // Get current price and calculate value\r\n          const price = await this.getCurrencyPrice(currency);\r\n          totalValue += parseFloat(balance.total) * price;\r\n        }\r\n      }\r\n      \r\n      return totalValue;\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to calculate total portfolio value:', error);\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate balance consistency and detect discrepancies\r\n   * \r\n   * @param currency - Currency to validate (optional, validates all if not specified)\r\n   * @returns Promise<DiscrepancyResult[]> - Discrepancy results\r\n   */\r\n  public async validateBalances(currency?: string): Promise<DiscrepancyResult[]> {\r\n    const startTime = Date.now();\r\n    const discrepancies: DiscrepancyResult[] = [];\r\n    \r\n    try {\r\n      logger.info(`🔍 Validating balances${currency ? ` for ${currency}` : ''}...`);\r\n      \r\n      // Get current balances from exchange\r\n      const exchangeBalances = await this.fetchBalancesFromExchange();\r\n      \r\n      // Get currencies to validate\r\n      const currenciesToValidate = currency \r\n        ? [currency] \r\n        : Array.from(this.currentBalances.keys());\r\n      \r\n      for (const curr of currenciesToValidate) {\r\n        const cachedBalance = this.currentBalances.get(curr);\r\n        const exchangeBalance = exchangeBalances.get(curr);\r\n        \r\n        if (cachedBalance && exchangeBalance) {\r\n          const discrepancy = this.detectDiscrepancy(cachedBalance, exchangeBalance);\r\n          if (discrepancy.hasDiscrepancy) {\r\n            discrepancies.push(discrepancy);\r\n            this.stats.discrepanciesDetected++;\r\n            \r\n            // Log discrepancy\r\n            await this.logBalanceEvent('BALANCE_DISCREPANCY_DETECTED', {\r\n              currency: curr,\r\n              discrepancy,\r\n            });\r\n            \r\n            // Trigger alert if enabled\r\n            if (this.config.enableAlerts) {\r\n              await this.triggerBalanceAlert(curr, 'DISCREPANCY', discrepancy);\r\n            }\r\n          }\r\n        }\r\n      }\r\n      \r\n      // Update statistics\r\n      const validationTime = Date.now() - startTime;\r\n      this.updateBalanceStats(validationTime, discrepancies.length);\r\n      \r\n      if (discrepancies.length > 0) {\r\n        logger.warn(`⚠️ Found ${discrepancies.length} balance discrepancies`);\r\n      } else {\r\n        logger.info('✅ No balance discrepancies detected');\r\n      }\r\n      \r\n      return discrepancies;\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to validate balances:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reconcile transactions and balances\r\n   * \r\n   * @param currency - Currency to reconcile (optional, reconciles all if not specified)\r\n   * @returns Promise<ReconciliationResult[]> - Reconciliation results\r\n   */\r\n  public async reconcileTransactions(currency?: string): Promise<ReconciliationResult[]> {\r\n    try {\r\n      logger.info(`🔄 Reconciling transactions${currency ? ` for ${currency}` : ''}...`);\r\n      \r\n      const results: ReconciliationResult[] = [];\r\n      const currenciesToReconcile = currency \r\n        ? [currency] \r\n        : Array.from(this.currentBalances.keys());\r\n      \r\n      for (const curr of currenciesToReconcile) {\r\n        const result = await this.reconcileCurrencyTransactions(curr);\r\n        results.push(result);\r\n        \r\n        if (!result.isReconciled) {\r\n          logger.warn(`⚠️ Reconciliation failed for ${curr}: ${result.unreconciledTransactions.length} unreconciled transactions`);\r\n        }\r\n      }\r\n      \r\n      this.stats.reconciliationsPerformed++;\r\n      this.lastReconciliation = new Date();\r\n      \r\n      // Log reconciliation results\r\n      await this.logBalanceEvent('TRANSACTION_RECONCILIATION_COMPLETED', {\r\n        results,\r\n        timestamp: new Date(),\r\n      });\r\n      \r\n      logger.info(`✅ Transaction reconciliation completed for ${results.length} currencies`);\r\n      return results;\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to reconcile transactions:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create balance snapshot for historical tracking\r\n   * \r\n   * @returns Promise<BalanceSnapshot> - Balance snapshot\r\n   */\r\n  public async createBalanceSnapshot(): Promise<BalanceSnapshot> {\r\n    try {\r\n      const snapshot: BalanceSnapshot = {\r\n        timestamp: new Date(),\r\n        balances: new Map(this.currentBalances),\r\n        totalValueUSD: await this.getTotalPortfolioValue(),\r\n        snapshotId: this.generateSnapshotId(),\r\n      };\r\n      \r\n      // Store snapshot\r\n      this.balanceHistory.push(snapshot);\r\n      \r\n      // Clean up old snapshots\r\n      await this.cleanupOldSnapshots();\r\n      \r\n      // Log snapshot creation\r\n      await this.logBalanceEvent('BALANCE_SNAPSHOT_CREATED', {\r\n        snapshotId: snapshot.snapshotId,\r\n        totalValueUSD: snapshot.totalValueUSD,\r\n        balanceCount: snapshot.balances.size,\r\n      });\r\n      \r\n      logger.info(`📸 Balance snapshot created: ${snapshot.snapshotId}`);\r\n      return snapshot;\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to create balance snapshot:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get balance history snapshots\r\n   * \r\n   * @param limit - Maximum number of snapshots to return\r\n   * @returns BalanceSnapshot[] - Historical snapshots\r\n   */\r\n  public getBalanceHistory(limit: number = 100): BalanceSnapshot[] {\r\n    return this.balanceHistory\r\n      .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())\r\n      .slice(0, limit);\r\n  }\r\n\r\n  /**\r\n   * Set balance alert for currency\r\n   * \r\n   * @param currency - Currency symbol\r\n   * @param alertType - Type of alert\r\n   * @param threshold - Alert threshold\r\n   * @returns boolean - Success status\r\n   */\r\n  public setBalanceAlert(\r\n    currency: string, \r\n    alertType: BalanceAlert['alertType'], \r\n    threshold: number\r\n  ): boolean {\r\n    try {\r\n      const alerts = this.balanceAlerts.get(currency) || [];\r\n      \r\n      // Remove existing alert of same type\r\n      const filteredAlerts = alerts.filter(alert => alert.alertType !== alertType);\r\n      \r\n      // Add new alert\r\n      const newAlert: BalanceAlert = {\r\n        currency,\r\n        alertType,\r\n        threshold,\r\n        enabled: true,\r\n        lastTriggered: null,\r\n        triggerCount: 0,\r\n      };\r\n      \r\n      filteredAlerts.push(newAlert);\r\n      this.balanceAlerts.set(currency, filteredAlerts);\r\n      \r\n      logger.info(`🔔 Balance alert set: ${currency} ${alertType} at ${threshold}`);\r\n      return true;\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to set balance alert:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove balance alert\r\n   * \r\n   * @param currency - Currency symbol\r\n   * @param alertType - Type of alert to remove\r\n   * @returns boolean - Success status\r\n   */\r\n  public removeBalanceAlert(currency: string, alertType: BalanceAlert['alertType']): boolean {\r\n    try {\r\n      const alerts = this.balanceAlerts.get(currency) || [];\r\n      const filteredAlerts = alerts.filter(alert => alert.alertType !== alertType);\r\n      \r\n      if (filteredAlerts.length < alerts.length) {\r\n        this.balanceAlerts.set(currency, filteredAlerts);\r\n        logger.info(`🔕 Balance alert removed: ${currency} ${alertType}`);\r\n        return true;\r\n      }\r\n      \r\n      return false;\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to remove balance alert:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get balance alerts for currency\r\n   * \r\n   * @param currency - Currency symbol\r\n   * @returns BalanceAlert[] - Active alerts\r\n   */\r\n  public getBalanceAlerts(currency: string): BalanceAlert[] {\r\n    return this.balanceAlerts.get(currency) || [];\r\n  }\r\n\r\n  /**\r\n   * Emergency balance protection - stop trading if significant loss detected\r\n   * \r\n   * @returns Promise<boolean> - True if emergency stop triggered\r\n   */\r\n  public async checkEmergencyStop(): Promise<boolean> {\r\n    try {\r\n      const currentValue = await this.getTotalPortfolioValue();\r\n      \r\n      if (this.balanceHistory.length === 0) {\r\n        return false; // No historical data to compare\r\n      }\r\n      \r\n      // Get the most recent snapshot from 24 hours ago\r\n      const oneDayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);\r\n      const historicalSnapshot = this.balanceHistory\r\n        .filter(snapshot => snapshot.timestamp <= oneDayAgo)\r\n        .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())[0];\r\n      \r\n      if (!historicalSnapshot) {\r\n        return false; // No historical data old enough\r\n      }\r\n      \r\n      const historicalValue = historicalSnapshot.totalValueUSD;\r\n      const lossPercent = ((historicalValue - currentValue) / historicalValue) * 100;\r\n      \r\n      if (lossPercent >= this.config.emergencyStopThreshold) {\r\n        logger.error(`🚨 EMERGENCY STOP TRIGGERED: ${lossPercent.toFixed(2)}% portfolio loss detected`);\r\n        \r\n        await this.auditService.logSecurityEvent({\r\n          type: 'EMERGENCY_BALANCE_STOP',\r\n          severity: 'CRITICAL',\r\n          details: {\r\n            currentValue,\r\n            historicalValue,\r\n            lossPercent,\r\n            threshold: this.config.emergencyStopThreshold,\r\n          },\r\n          timestamp: new Date(),\r\n        });\r\n        \r\n        // Emit emergency stop event\r\n        this.emit('emergencyStop', {\r\n          reason: 'SIGNIFICANT_BALANCE_LOSS',\r\n          lossPercent,\r\n          currentValue,\r\n          historicalValue,\r\n        });\r\n        \r\n        return true;\r\n      }\r\n      \r\n      return false;\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to check emergency stop:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load current balances from exchange\r\n   */\r\n  private async loadCurrentBalances(): Promise<void> {\r\n    try {\r\n      const balances = await this.fetchBalancesFromExchange();\r\n      \r\n      // Update current balances\r\n      this.currentBalances = balances;\r\n      this.stats.lastBalanceUpdate = new Date();\r\n      this.stats.totalBalanceChecks++;\r\n      \r\n      // Create snapshot if significant change detected\r\n      if (await this.hasSignificantBalanceChange()) {\r\n        await this.createBalanceSnapshot();\r\n      }\r\n      \r\n      // Check for alerts\r\n      if (this.config.enableAlerts) {\r\n        await this.checkBalanceAlerts();\r\n      }\r\n      \r\n      logger.debug(`💰 Loaded ${balances.size} currency balances`);\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to load current balances:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fetch balances from Gate.io exchange\r\n   */\r\n  private async fetchBalancesFromExchange(): Promise<Map<string, AccountBalance>> {\r\n    const spotAccounts = await this.gateIOClient.makeRequest<SpotAccount[]>({\r\n      method: 'GET',\r\n      url: '/spot/accounts',\r\n    });\r\n    \r\n    const balanceMap = new Map<string, AccountBalance>();\r\n    \r\n    for (const account of spotAccounts) {\r\n      const balance: AccountBalance = {\r\n        currency: account.currency,\r\n        available: account.available,\r\n        locked: account.locked,\r\n        total: (parseFloat(account.available) + parseFloat(account.locked)).toString(),\r\n        update_time: Date.now(),\r\n      };\r\n      \r\n      balanceMap.set(account.currency, balance);\r\n    }\r\n    \r\n    return balanceMap;\r\n  }\r\n\r\n  /**\r\n   * Detect discrepancy between cached and exchange balances\r\n   */\r\n  private detectDiscrepancy(\r\n    cachedBalance: AccountBalance, \r\n    exchangeBalance: AccountBalance\r\n  ): DiscrepancyResult {\r\n    const cachedTotal = parseFloat(cachedBalance.total);\r\n    const exchangeTotal = parseFloat(exchangeBalance.total);\r\n    const difference = Math.abs(cachedTotal - exchangeTotal);\r\n    const differencePercent = cachedTotal > 0 ? (difference / cachedTotal) * 100 : 0;\r\n    \r\n    const hasDiscrepancy = differencePercent > this.config.discrepancyThreshold;\r\n    \r\n    let severity: DiscrepancyResult['severity'] = 'LOW';\r\n    if (differencePercent > 10) severity = 'CRITICAL';\r\n    else if (differencePercent > 5) severity = 'HIGH';\r\n    else if (differencePercent > 1) severity = 'MEDIUM';\r\n    \r\n    return {\r\n      hasDiscrepancy,\r\n      currency: cachedBalance.currency,\r\n      expectedBalance: cachedTotal,\r\n      actualBalance: exchangeTotal,\r\n      difference,\r\n      differencePercent,\r\n      severity,\r\n      timestamp: new Date(),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Reconcile transactions for specific currency\r\n   */\r\n  private async reconcileCurrencyTransactions(currency: string): Promise<ReconciliationResult> {\r\n    try {\r\n      // Get current balance\r\n      const currentBalance = this.currentBalances.get(currency);\r\n      if (!currentBalance) {\r\n        throw new Error(`Balance not found for currency: ${currency}`);\r\n      }\r\n      \r\n      // Get transaction history\r\n      const transactions = this.transactionHistory.get(currency) || [];\r\n      \r\n      // Calculate expected balance from transactions\r\n      let expectedBalance = 0;\r\n      const reconciledTransactions: TradeHistory[] = [];\r\n      const unreconciledTransactions: TradeHistory[] = [];\r\n      \r\n      for (const transaction of transactions) {\r\n        try {\r\n          const amount = parseFloat(transaction.amount);\r\n          const fee = parseFloat(transaction.fee);\r\n          \r\n          if (transaction.side === 'buy') {\r\n            expectedBalance += amount - fee;\r\n          } else {\r\n            expectedBalance -= amount + fee;\r\n          }\r\n          \r\n          reconciledTransactions.push(transaction);\r\n        } catch (error) {\r\n          unreconciledTransactions.push(transaction);\r\n        }\r\n      }\r\n      \r\n      const actualBalance = parseFloat(currentBalance.total);\r\n      const isReconciled = Math.abs(expectedBalance - actualBalance) < 0.00001; // Small tolerance for floating point\r\n      \r\n      const discrepancies: DiscrepancyResult[] = [];\r\n      if (!isReconciled) {\r\n        discrepancies.push({\r\n          hasDiscrepancy: true,\r\n          currency,\r\n          expectedBalance,\r\n          actualBalance,\r\n          difference: Math.abs(expectedBalance - actualBalance),\r\n          differencePercent: expectedBalance > 0 ? (Math.abs(expectedBalance - actualBalance) / expectedBalance) * 100 : 0,\r\n          severity: 'MEDIUM',\r\n          timestamp: new Date(),\r\n        });\r\n      }\r\n      \r\n      return {\r\n        isReconciled,\r\n        currency,\r\n        expectedBalance,\r\n        actualBalance,\r\n        reconciledTransactions: reconciledTransactions.length,\r\n        unreconciledTransactions,\r\n        discrepancies,\r\n        timestamp: new Date(),\r\n      };\r\n      \r\n    } catch (error) {\r\n      logger.error(`❌ Failed to reconcile transactions for ${currency}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load transaction history from exchange\r\n   */\r\n  private async loadTransactionHistory(): Promise<void> {\r\n    try {\r\n      // Load trade history for each currency\r\n      const currencies = Array.from(this.currentBalances.keys());\r\n      \r\n      for (const currency of currencies) {\r\n        try {\r\n          const trades = await this.gateIOClient.makeRequest<TradeHistory[]>({\r\n            method: 'GET',\r\n            url: '/spot/my_trades',\r\n            params: {\r\n              currency_pair: `${currency}_USDT`,\r\n              limit: 100,\r\n            },\r\n          });\r\n          \r\n          this.transactionHistory.set(currency, trades);\r\n        } catch (error) {\r\n          // Some currencies might not have trading pairs, skip silently\r\n          logger.debug(`No trade history found for ${currency}`);\r\n        }\r\n      }\r\n      \r\n      logger.info(`📋 Loaded transaction history for ${this.transactionHistory.size} currencies`);\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to load transaction history:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialize default balance alerts\r\n   */\r\n  private initializeBalanceAlerts(): void {\r\n    // Set default low balance alerts for major currencies\r\n    const majorCurrencies = ['BTC', 'ETH', 'USDT'];\r\n    \r\n    for (const currency of majorCurrencies) {\r\n      this.setBalanceAlert(currency, 'LOW_BALANCE', 0.001); // Very low threshold\r\n    }\r\n    \r\n    logger.info('🔔 Default balance alerts initialized');\r\n  }\r\n\r\n  /**\r\n   * Start real-time balance monitoring\r\n   */\r\n  private startRealTimeMonitoring(): void {\r\n    this.monitoringTimer = setInterval(async () => {\r\n      try {\r\n        await this.loadCurrentBalances();\r\n        await this.checkEmergencyStop();\r\n      } catch (error) {\r\n        logger.error('❌ Error in balance monitoring:', error);\r\n      }\r\n    }, this.config.monitoringInterval);\r\n    \r\n    logger.info('👁️ Started real-time balance monitoring');\r\n  }\r\n\r\n  /**\r\n   * Start transaction reconciliation\r\n   */\r\n  private startReconciliation(): void {\r\n    this.reconciliationTimer = setInterval(async () => {\r\n      try {\r\n        await this.reconcileTransactions();\r\n      } catch (error) {\r\n        logger.error('❌ Error in transaction reconciliation:', error);\r\n      }\r\n    }, this.config.reconciliationInterval);\r\n    \r\n    logger.info('🔄 Started transaction reconciliation');\r\n  }\r\n\r\n  /**\r\n   * Check balance alerts\r\n   */\r\n  private async checkBalanceAlerts(): Promise<void> {\r\n    for (const [currency, alerts] of this.balanceAlerts) {\r\n      const balance = this.currentBalances.get(currency);\r\n      if (!balance) continue;\r\n      \r\n      for (const alert of alerts) {\r\n        if (!alert.enabled) continue;\r\n        \r\n        const shouldTrigger = await this.shouldTriggerAlert(balance, alert);\r\n        if (shouldTrigger) {\r\n          await this.triggerBalanceAlert(currency, alert.alertType, alert);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Determine if alert should be triggered\r\n   */\r\n  private async shouldTriggerAlert(balance: AccountBalance, alert: BalanceAlert): Promise<boolean> {\r\n    const totalBalance = parseFloat(balance.total);\r\n    \r\n    switch (alert.alertType) {\r\n      case 'LOW_BALANCE':\r\n        return totalBalance < alert.threshold;\r\n      case 'HIGH_BALANCE':\r\n        return totalBalance > alert.threshold;\r\n      case 'RAPID_CHANGE':\r\n        // Check for rapid balance changes (simplified)\r\n        return false; // Would need historical comparison\r\n      case 'DISCREPANCY':\r\n        return false; // Handled separately in validation\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trigger balance alert\r\n   */\r\n  private async triggerBalanceAlert(\r\n    currency: string, \r\n    alertType: BalanceAlert['alertType'], \r\n    alertData: any\r\n  ): Promise<void> {\r\n    try {\r\n      // Update alert statistics\r\n      const alerts = this.balanceAlerts.get(currency) || [];\r\n      const alert = alerts.find(a => a.alertType === alertType);\r\n      if (alert) {\r\n        alert.lastTriggered = new Date();\r\n        alert.triggerCount++;\r\n      }\r\n      \r\n      this.stats.alertsTriggered++;\r\n      \r\n      // Log alert\r\n      await this.logBalanceEvent('BALANCE_ALERT_TRIGGERED', {\r\n        currency,\r\n        alertType,\r\n        alertData,\r\n      });\r\n      \r\n      // Emit alert event\r\n      this.emit('balanceAlert', {\r\n        currency,\r\n        alertType,\r\n        alertData,\r\n        timestamp: new Date(),\r\n      });\r\n      \r\n      logger.warn(`🔔 Balance alert triggered: ${currency} ${alertType}`);\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to trigger balance alert:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if balances should be refreshed\r\n   */\r\n  private shouldRefreshBalances(): boolean {\r\n    if (!this.stats.lastBalanceUpdate) return true;\r\n    \r\n    const timeSinceUpdate = Date.now() - this.stats.lastBalanceUpdate.getTime();\r\n    return timeSinceUpdate > this.config.monitoringInterval;\r\n  }\r\n\r\n  /**\r\n   * Check if there's a significant balance change\r\n   */\r\n  private async hasSignificantBalanceChange(): Promise<boolean> {\r\n    if (this.balanceHistory.length === 0) return true;\r\n    \r\n    const lastSnapshot = this.balanceHistory[this.balanceHistory.length - 1];\r\n    const currentValue = await this.getTotalPortfolioValue();\r\n    const changePercent = Math.abs((currentValue - lastSnapshot.totalValueUSD) / lastSnapshot.totalValueUSD) * 100;\r\n    \r\n    return changePercent > 1; // 1% change threshold\r\n  }\r\n\r\n  /**\r\n   * Get currency price in USD\r\n   */\r\n  private async getCurrencyPrice(currency: string): Promise<number> {\r\n    try {\r\n      if (currency === 'USDT' || currency === 'USD') return 1;\r\n      \r\n      const ticker = await this.gateIOClient.makeRequest({\r\n        method: 'GET',\r\n        url: '/spot/tickers',\r\n        params: { currency_pair: `${currency}_USDT` },\r\n      });\r\n      \r\n      return parseFloat(ticker[0]?.last || '0');\r\n      \r\n    } catch (error) {\r\n      logger.error(`❌ Failed to get price for ${currency}:`, error);\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update balance statistics\r\n   */\r\n  private updateBalanceStats(validationTime: number, discrepancyCount: number): void {\r\n    // Update average validation time\r\n    const alpha = 0.1;\r\n    this.stats.averageBalanceCheckTime = \r\n      (alpha * validationTime) + ((1 - alpha) * this.stats.averageBalanceCheckTime);\r\n    \r\n    // Update balance accuracy\r\n    const totalChecks = this.stats.totalBalanceChecks;\r\n    const totalDiscrepancies = this.stats.discrepanciesDetected;\r\n    this.stats.balanceAccuracy = totalChecks > 0 ? ((totalChecks - totalDiscrepancies) / totalChecks) * 100 : 100;\r\n  }\r\n\r\n  /**\r\n   * Clean up old snapshots\r\n   */\r\n  private async cleanupOldSnapshots(): Promise<void> {\r\n    const cutoffDate = new Date(Date.now() - (this.config.snapshotRetentionDays * 24 * 60 * 60 * 1000));\r\n    \r\n    const initialCount = this.balanceHistory.length;\r\n    this.balanceHistory = this.balanceHistory.filter(\r\n      snapshot => snapshot.timestamp > cutoffDate\r\n    );\r\n    \r\n    const removedCount = initialCount - this.balanceHistory.length;\r\n    if (removedCount > 0) {\r\n      logger.info(`🧹 Cleaned up ${removedCount} old balance snapshots`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate unique snapshot ID\r\n   */\r\n  private generateSnapshotId(): string {\r\n    return `snapshot_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  /**\r\n   * Log balance event for audit trail\r\n   */\r\n  private async logBalanceEvent(eventType: string, eventData: any): Promise<void> {\r\n    await this.auditService.logSecurityEvent({\r\n      type: eventType,\r\n      severity: 'INFO',\r\n      details: eventData,\r\n      timestamp: new Date(),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get balance management statistics\r\n   */\r\n  public getBalanceStats(): BalanceStats {\r\n    return { ...this.stats };\r\n  }\r\n\r\n  /**\r\n   * Get balance management configuration\r\n   */\r\n  public getConfig(): BalanceConfig {\r\n    return { ...this.config };\r\n  }\r\n\r\n  /**\r\n   * Update balance management configuration\r\n   */\r\n  public updateConfig(config: Partial<BalanceConfig>): void {\r\n    this.config = { ...this.config, ...config };\r\n    \r\n    // Restart monitoring if interval changed\r\n    if (config.monitoringInterval && this.monitoringTimer) {\r\n      clearInterval(this.monitoringTimer);\r\n      this.startRealTimeMonitoring();\r\n    }\r\n    \r\n    // Restart reconciliation if interval changed\r\n    if (config.reconciliationInterval && this.reconciliationTimer) {\r\n      clearInterval(this.reconciliationTimer);\r\n      this.startReconciliation();\r\n    }\r\n    \r\n    logger.info('⚙️ Balance management configuration updated');\r\n  }\r\n\r\n  /**\r\n   * Graceful shutdown\r\n   */\r\n  public async shutdown(): Promise<void> {\r\n    logger.info('🛑 Shutting down Balance Manager...');\r\n    \r\n    // Stop monitoring timers\r\n    if (this.monitoringTimer) {\r\n      clearInterval(this.monitoringTimer);\r\n      this.monitoringTimer = null;\r\n    }\r\n    \r\n    if (this.reconciliationTimer) {\r\n      clearInterval(this.reconciliationTimer);\r\n      this.reconciliationTimer = null;\r\n    }\r\n    \r\n    // Create final snapshot\r\n    await this.createBalanceSnapshot();\r\n    \r\n    // Log final statistics\r\n    await this.auditService.logSecurityEvent({\r\n      type: 'BALANCE_MANAGER_SHUTDOWN',\r\n      severity: 'INFO',\r\n      details: { \r\n        stats: this.stats,\r\n        balanceCount: this.currentBalances.size,\r\n        snapshotCount: this.balanceHistory.length \r\n      },\r\n      timestamp: new Date(),\r\n    });\r\n    \r\n    logger.info('✅ Balance Manager shutdown completed');\r\n  }\r\n}\r\n\r\n// Export types\r\nexport type {\r\n  BalanceSnapshot,\r\n  DiscrepancyResult,\r\n  BalanceAlert,\r\n  ReconciliationResult,\r\n  BalanceStats,\r\n  BalanceConfig,\r\n};"],"version":3}