{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\strategies\\__tests__\\macd.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\strategies\\__tests__\\macd.test.ts"],"sourcesContent":["/**\r\n * MACD Strategy Tests\r\n * \r\n * Comprehensive test suite for MACD calculations, crossover detection, and signal generation.\r\n * Tests cover MACD calculation, signal line crossovers, histogram analysis, and divergence detection.\r\n */\r\n\r\nimport { MACDStrategy } from '../macd';\r\nimport { MarketData } from '../types';\r\n\r\ndescribe('MACDStrategy', () => {\r\n  let strategy: MACDStrategy;\r\n  let mockMarketData: MarketData[];\r\n\r\n  beforeEach(() => {\r\n    strategy = new MACDStrategy();\r\n    \r\n    // Create mock market data for testing\r\n    mockMarketData = [];\r\n    const basePrice = 100;\r\n    const baseVolume = 1000000;\r\n    \r\n    for (let i = 0; i < 60; i++) {\r\n      // Create trending data with some volatility\r\n      const trend = i * 0.3; // Gradual upward trend\r\n      const volatility = Math.sin(i * 0.2) * 3; // Some oscillation\r\n      const price = basePrice + trend + volatility;\r\n      \r\n      mockMarketData.push({\r\n        symbol: 'BTC/USDT',\r\n        timestamp: new Date(Date.now() - (60 - i) * 60000),\r\n        open: price - 0.5,\r\n        high: price + 1,\r\n        low: price - 1,\r\n        close: price,\r\n        volume: baseVolume + Math.random() * 500000\r\n      });\r\n    }\r\n  });\r\n\r\n  describe('MACD Calculation', () => {\r\n    test('should calculate MACD correctly', () => {\r\n      const macd = strategy.calculateMACD(mockMarketData, 12, 26, 9);\r\n      \r\n      expect(macd).not.toBeNull();\r\n      expect(typeof macd!.macd).toBe('number');\r\n      expect(typeof macd!.signal).toBe('number');\r\n      expect(typeof macd!.histogram).toBe('number');\r\n      expect(macd!.histogram).toBeCloseTo(macd!.macd - macd!.signal, 4);\r\n    });\r\n\r\n    test('should return null for insufficient data', () => {\r\n      const shortData = mockMarketData.slice(0, 20);\r\n      const macd = strategy.calculateMACD(shortData, 12, 26, 9);\r\n      expect(macd).toBeNull();\r\n    });\r\n\r\n    test('should handle different periods', () => {\r\n      const macd1 = strategy.calculateMACD(mockMarketData, 5, 10, 3);\r\n      const macd2 = strategy.calculateMACD(mockMarketData, 12, 26, 9);\r\n      \r\n      expect(macd1).not.toBeNull();\r\n      expect(macd2).not.toBeNull();\r\n      expect(macd1!.macd).not.toBe(macd2!.macd); // Different periods should give different results\r\n    });\r\n\r\n    test('should calculate MACD for strong uptrend', () => {\r\n      const uptrendData: MarketData[] = [];\r\n      for (let i = 0; i < 50; i++) {\r\n        const price = 100 + i * 2; // Strong uptrend\r\n        uptrendData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (50 - i) * 60000),\r\n          open: price - 0.5,\r\n          high: price + 1,\r\n          low: price - 1,\r\n          close: price,\r\n          volume: 1000000\r\n        });\r\n      }\r\n\r\n      const macd = strategy.calculateMACD(uptrendData, 12, 26, 9);\r\n      expect(macd).not.toBeNull();\r\n      expect(macd!.macd).toBeGreaterThan(0); // Should be positive in uptrend\r\n    });\r\n\r\n    test('should calculate MACD for strong downtrend', () => {\r\n      const downtrendData: MarketData[] = [];\r\n      for (let i = 0; i < 50; i++) {\r\n        const price = 200 - i * 2; // Strong downtrend\r\n        downtrendData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (50 - i) * 60000),\r\n          open: price - 0.5,\r\n          high: price + 1,\r\n          low: price - 1,\r\n          close: price,\r\n          volume: 1000000\r\n        });\r\n      }\r\n\r\n      const macd = strategy.calculateMACD(downtrendData, 12, 26, 9);\r\n      expect(macd).not.toBeNull();\r\n      expect(macd!.macd).toBeLessThan(0); // Should be negative in downtrend\r\n    });\r\n\r\n    test('should round values to 4 decimal places', () => {\r\n      const macd = strategy.calculateMACD(mockMarketData, 12, 26, 9);\r\n      \r\n      expect(macd).not.toBeNull();\r\n      expect(macd!.macd.toString().split('.')[1]?.length || 0).toBeLessThanOrEqual(4);\r\n      expect(macd!.signal.toString().split('.')[1]?.length || 0).toBeLessThanOrEqual(4);\r\n      expect(macd!.histogram.toString().split('.')[1]?.length || 0).toBeLessThanOrEqual(4);\r\n    });\r\n  });\r\n\r\n  describe('Crossover Detection', () => {\r\n    test('should detect bullish crossover', () => {\r\n      // Create data that should result in bullish crossover\r\n      const crossoverData: MarketData[] = [];\r\n      \r\n      // Start with downtrend\r\n      for (let i = 0; i < 30; i++) {\r\n        const price = 150 - i * 1; // Downtrend\r\n        crossoverData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (60 - i) * 60000),\r\n          open: price - 0.5,\r\n          high: price + 1,\r\n          low: price - 1,\r\n          close: price,\r\n          volume: 1000000\r\n        });\r\n      }\r\n      \r\n      // Then strong uptrend\r\n      for (let i = 0; i < 30; i++) {\r\n        const price = 120 + i * 3; // Strong uptrend\r\n        crossoverData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (30 - i) * 60000),\r\n          open: price - 0.5,\r\n          high: price + 1,\r\n          low: price - 1,\r\n          close: price,\r\n          volume: 1000000\r\n        });\r\n      }\r\n\r\n      const crossover = strategy.detectCrossover(crossoverData, 12, 26, 9);\r\n      \r\n      // May detect bullish crossover depending on exact timing\r\n      expect(['BULLISH', 'BEARISH', 'NONE']).toContain(crossover.type);\r\n      expect(crossover.strength).toBeGreaterThanOrEqual(0);\r\n      expect(crossover.strength).toBeLessThanOrEqual(100);\r\n    });\r\n\r\n    test('should detect bearish crossover', () => {\r\n      // Create data that should result in bearish crossover\r\n      const crossoverData: MarketData[] = [];\r\n      \r\n      // Start with uptrend\r\n      for (let i = 0; i < 30; i++) {\r\n        const price = 100 + i * 1; // Uptrend\r\n        crossoverData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (60 - i) * 60000),\r\n          open: price - 0.5,\r\n          high: price + 1,\r\n          low: price - 1,\r\n          close: price,\r\n          volume: 1000000\r\n        });\r\n      }\r\n      \r\n      // Then strong downtrend\r\n      for (let i = 0; i < 30; i++) {\r\n        const price = 130 - i * 3; // Strong downtrend\r\n        crossoverData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (30 - i) * 60000),\r\n          open: price - 0.5,\r\n          high: price + 1,\r\n          low: price - 1,\r\n          close: price,\r\n          volume: 1000000\r\n        });\r\n      }\r\n\r\n      const crossover = strategy.detectCrossover(crossoverData, 12, 26, 9);\r\n      \r\n      // May detect bearish crossover depending on exact timing\r\n      expect(['BULLISH', 'BEARISH', 'NONE']).toContain(crossover.type);\r\n      expect(crossover.strength).toBeGreaterThanOrEqual(0);\r\n      expect(crossover.strength).toBeLessThanOrEqual(100);\r\n    });\r\n\r\n    test('should return NONE for insufficient data', () => {\r\n      const shortData = mockMarketData.slice(0, 20);\r\n      const crossover = strategy.detectCrossover(shortData, 12, 26, 9);\r\n      expect(crossover.type).toBe('NONE');\r\n      expect(crossover.strength).toBe(0);\r\n    });\r\n\r\n    test('should return NONE for sideways market', () => {\r\n      const sidewaysData: MarketData[] = [];\r\n      for (let i = 0; i < 50; i++) {\r\n        const price = 100 + Math.sin(i * 0.1) * 2; // Small oscillations\r\n        sidewaysData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (50 - i) * 60000),\r\n          open: price - 0.5,\r\n          high: price + 1,\r\n          low: price - 1,\r\n          close: price,\r\n          volume: 1000000\r\n        });\r\n      }\r\n\r\n      const crossover = strategy.detectCrossover(sidewaysData, 12, 26, 9);\r\n      // Sideways market may or may not have crossovers\r\n      expect(['BULLISH', 'BEARISH', 'NONE']).toContain(crossover.type);\r\n    });\r\n  });\r\n\r\n  describe('MACD Signal Generation', () => {\r\n    test('should generate MACD signal with correct properties', () => {\r\n      const macdSignal = strategy.generateMACDSignal(mockMarketData, 12, 26, 9);\r\n      \r\n      expect(macdSignal).not.toBeNull();\r\n      expect(macdSignal!.name).toBe('MACD');\r\n      expect(typeof macdSignal!.macd).toBe('number');\r\n      expect(typeof macdSignal!.signal).toBe('number');\r\n      expect(typeof macdSignal!.histogram).toBe('number');\r\n      expect(macdSignal!.parameters.fastPeriod).toBe(12);\r\n      expect(macdSignal!.parameters.slowPeriod).toBe(26);\r\n      expect(macdSignal!.parameters.signalPeriod).toBe(9);\r\n    });\r\n\r\n    test('should include crossover information when present', () => {\r\n      const macdSignal = strategy.generateMACDSignal(mockMarketData, 12, 26, 9);\r\n      \r\n      if (macdSignal && macdSignal.crossover) {\r\n        expect(['BULLISH', 'BEARISH']).toContain(macdSignal.crossover.type);\r\n        expect(macdSignal.crossover.strength).toBeGreaterThan(0);\r\n        expect(macdSignal.crossover.strength).toBeLessThanOrEqual(100);\r\n      }\r\n    });\r\n\r\n    test('should return null for insufficient data', () => {\r\n      const shortData = mockMarketData.slice(0, 20);\r\n      const macdSignal = strategy.generateMACDSignal(shortData, 12, 26, 9);\r\n      expect(macdSignal).toBeNull();\r\n    });\r\n  });\r\n\r\n  describe('Divergence Detection', () => {\r\n    test('should detect divergence patterns', () => {\r\n      // Create complex data that might have divergence\r\n      const divergenceData: MarketData[] = [];\r\n      \r\n      // Create base data\r\n      for (let i = 0; i < 30; i++) {\r\n        divergenceData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (80 - i) * 60000),\r\n          open: 100,\r\n          high: 101,\r\n          low: 99,\r\n          close: 100,\r\n          volume: 1000000\r\n        });\r\n      }\r\n      \r\n      // Create pattern that might show divergence\r\n      for (let i = 0; i < 50; i++) {\r\n        const price = 100 + Math.sin(i * 0.1) * 10 + (i < 25 ? -i * 0.3 : (i - 25) * 0.2);\r\n        divergenceData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (50 - i) * 60000),\r\n          open: price - 0.5,\r\n          high: price + 1,\r\n          low: price - 1,\r\n          close: price,\r\n          volume: 1000000\r\n        });\r\n      }\r\n\r\n      const divergence = strategy.detectDivergence(divergenceData, 12, 26, 9);\r\n      \r\n      expect(['BULLISH', 'BEARISH', 'NONE']).toContain(divergence.type);\r\n      expect(divergence.strength).toBeGreaterThanOrEqual(0);\r\n      expect(divergence.strength).toBeLessThanOrEqual(100);\r\n    });\r\n\r\n    test('should return NONE for insufficient data', () => {\r\n      const shortData = mockMarketData.slice(0, 40);\r\n      const divergence = strategy.detectDivergence(shortData, 12, 26, 9);\r\n      expect(divergence.type).toBe('NONE');\r\n      expect(divergence.strength).toBe(0);\r\n    });\r\n  });\r\n\r\n  describe('Trading Signal Generation', () => {\r\n    test('should generate buy signal for bullish crossover', () => {\r\n      // Create strong bullish crossover scenario\r\n      const bullishData: MarketData[] = [];\r\n      \r\n      // Downtrend first\r\n      for (let i = 0; i < 30; i++) {\r\n        const price = 150 - i * 2;\r\n        bullishData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (60 - i) * 60000),\r\n          open: price - 0.5,\r\n          high: price + 1,\r\n          low: price - 1,\r\n          close: price,\r\n          volume: 1000000 * (1 + Math.random())\r\n        });\r\n      }\r\n      \r\n      // Then strong uptrend\r\n      for (let i = 0; i < 30; i++) {\r\n        const price = 90 + i * 4;\r\n        bullishData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (30 - i) * 60000),\r\n          open: price - 0.5,\r\n          high: price + 1,\r\n          low: price - 1,\r\n          close: price,\r\n          volume: 1000000 * (1 + Math.random())\r\n        });\r\n      }\r\n\r\n      const signal = strategy.generateSignal(bullishData, 12, 26, 9);\r\n      \r\n      if (signal) {\r\n        expect(signal.type).toBe('BUY');\r\n        expect(signal.strength).toBeGreaterThan(0);\r\n        expect(signal.confidence).toBeGreaterThan(0);\r\n        expect(signal.reasoning).toContain('bullish crossover');\r\n        expect(signal.metadata?.crossover?.type).toBe('BULLISH');\r\n      }\r\n    });\r\n\r\n    test('should generate sell signal for bearish crossover', () => {\r\n      // Create strong bearish crossover scenario\r\n      const bearishData: MarketData[] = [];\r\n      \r\n      // Uptrend first\r\n      for (let i = 0; i < 30; i++) {\r\n        const price = 100 + i * 2;\r\n        bearishData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (60 - i) * 60000),\r\n          open: price - 0.5,\r\n          high: price + 1,\r\n          low: price - 1,\r\n          close: price,\r\n          volume: 1000000 * (1 + Math.random())\r\n        });\r\n      }\r\n      \r\n      // Then strong downtrend\r\n      for (let i = 0; i < 30; i++) {\r\n        const price = 160 - i * 4;\r\n        bearishData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (30 - i) * 60000),\r\n          open: price - 0.5,\r\n          high: price + 1,\r\n          low: price - 1,\r\n          close: price,\r\n          volume: 1000000 * (1 + Math.random())\r\n        });\r\n      }\r\n\r\n      const signal = strategy.generateSignal(bearishData, 12, 26, 9);\r\n      \r\n      if (signal) {\r\n        expect(signal.type).toBe('SELL');\r\n        expect(signal.strength).toBeGreaterThan(0);\r\n        expect(signal.confidence).toBeGreaterThan(0);\r\n        expect(signal.reasoning).toContain('bearish crossover');\r\n        expect(signal.metadata?.crossover?.type).toBe('BEARISH');\r\n      }\r\n    });\r\n\r\n    test('should return null for neutral MACD', () => {\r\n      const neutralData: MarketData[] = [];\r\n      for (let i = 0; i < 50; i++) {\r\n        const price = 100 + Math.sin(i * 0.05) * 1; // Very small oscillations\r\n        neutralData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (50 - i) * 60000),\r\n          open: price - 0.5,\r\n          high: price + 1,\r\n          low: price - 1,\r\n          close: price,\r\n          volume: 1000000\r\n        });\r\n      }\r\n\r\n      const signal = strategy.generateSignal(neutralData, 12, 26, 9);\r\n      // Neutral MACD without crossover should not generate signal\r\n      if (signal) {\r\n        expect(['BUY', 'SELL']).toContain(signal.type);\r\n      }\r\n    });\r\n\r\n    test('should include proper metadata', () => {\r\n      const signal = strategy.generateSignal(mockMarketData, 12, 26, 9);\r\n      \r\n      if (signal) {\r\n        expect(signal.metadata).toBeDefined();\r\n        expect(signal.metadata?.macd).toBeDefined();\r\n        expect(signal.metadata?.signal).toBeDefined();\r\n        expect(signal.metadata?.histogram).toBeDefined();\r\n        expect(typeof signal.metadata?.aboveZero).toBe('boolean');\r\n        expect(typeof signal.metadata?.histogramIncreasing).toBe('boolean');\r\n        expect(signal.indicators).toContain('MACD_12_26_9');\r\n      }\r\n    });\r\n\r\n    test('should calculate risk-reward ratio', () => {\r\n      const signal = strategy.generateSignal(mockMarketData, 12, 26, 9);\r\n      \r\n      if (signal) {\r\n        expect(signal.riskReward).toBeGreaterThan(0);\r\n        expect(typeof signal.riskReward).toBe('number');\r\n      }\r\n    });\r\n  });\r\n\r\n  describe('Signal Confidence Evaluation', () => {\r\n    test('should evaluate signal confidence correctly', () => {\r\n      const signal = strategy.generateSignal(mockMarketData, 12, 26, 9);\r\n      \r\n      if (signal) {\r\n        const confidence = strategy.evaluateSignalConfidence(mockMarketData, signal);\r\n        \r\n        expect(confidence.overall).toBeGreaterThanOrEqual(0);\r\n        expect(confidence.overall).toBeLessThanOrEqual(100);\r\n        expect(confidence.technical).toBeGreaterThanOrEqual(0);\r\n        expect(confidence.technical).toBeLessThanOrEqual(100);\r\n        expect(confidence.volume).toBeGreaterThanOrEqual(0);\r\n        expect(confidence.volume).toBeLessThanOrEqual(100);\r\n        expect(confidence.momentum).toBeGreaterThanOrEqual(0);\r\n        expect(confidence.momentum).toBeLessThanOrEqual(100);\r\n        expect(confidence.factors.length).toBeGreaterThanOrEqual(4);\r\n      }\r\n    });\r\n\r\n    test('should provide detailed factors', () => {\r\n      const signal = strategy.generateSignal(mockMarketData, 12, 26, 9);\r\n      \r\n      if (signal) {\r\n        const confidence = strategy.evaluateSignalConfidence(mockMarketData, signal);\r\n        \r\n        expect(confidence.factors[0]).toContain('MACD signal strength');\r\n        expect(confidence.factors[1]).toContain('Volume confirmation');\r\n        expect(confidence.factors[2]).toContain('Trend momentum');\r\n        expect(confidence.factors[3]).toContain('MACD position');\r\n      }\r\n    });\r\n\r\n    test('should include crossover and divergence in factors when present', () => {\r\n      const signal = strategy.generateSignal(mockMarketData, 12, 26, 9);\r\n      \r\n      if (signal) {\r\n        const confidence = strategy.evaluateSignalConfidence(mockMarketData, signal);\r\n        \r\n        if (signal.metadata?.crossover) {\r\n          const crossoverFactors = confidence.factors.filter(f => f.includes('Crossover'));\r\n          expect(crossoverFactors.length).toBeGreaterThan(0);\r\n        }\r\n        \r\n        if (signal.metadata?.divergence) {\r\n          const divergenceFactors = confidence.factors.filter(f => f.includes('Divergence'));\r\n          expect(divergenceFactors.length).toBeGreaterThan(0);\r\n        }\r\n      }\r\n    });\r\n  });\r\n\r\n  describe('Edge Cases', () => {\r\n    test('should handle empty market data', () => {\r\n      const signal = strategy.generateSignal([], 12, 26, 9);\r\n      expect(signal).toBeNull();\r\n    });\r\n\r\n    test('should handle single data point', () => {\r\n      const singleData = [mockMarketData[0]];\r\n      const signal = strategy.generateSignal(singleData, 12, 26, 9);\r\n      expect(signal).toBeNull();\r\n    });\r\n\r\n    test('should handle flat prices', () => {\r\n      const flatData: MarketData[] = [];\r\n      for (let i = 0; i < 50; i++) {\r\n        flatData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (50 - i) * 60000),\r\n          open: 100,\r\n          high: 100,\r\n          low: 100,\r\n          close: 100,\r\n          volume: 1000000\r\n        });\r\n      }\r\n\r\n      const macd = strategy.calculateMACD(flatData, 12, 26, 9);\r\n      if (macd) {\r\n        expect(macd.macd).toBe(0); // No price change should result in zero MACD\r\n        expect(macd.signal).toBe(0);\r\n        expect(macd.histogram).toBe(0);\r\n      }\r\n    });\r\n\r\n    test('should handle very small periods', () => {\r\n      const macd = strategy.calculateMACD(mockMarketData, 2, 5, 2);\r\n      expect(macd).not.toBeNull();\r\n      expect(typeof macd!.macd).toBe('number');\r\n      expect(typeof macd!.signal).toBe('number');\r\n      expect(typeof macd!.histogram).toBe('number');\r\n    });\r\n\r\n    test('should handle extreme price movements', () => {\r\n      const extremeData: MarketData[] = [];\r\n      for (let i = 0; i < 50; i++) {\r\n        const price = 100 * Math.pow(1.1, i); // Exponential growth\r\n        extremeData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (50 - i) * 60000),\r\n          open: price - price * 0.01,\r\n          high: price + price * 0.01,\r\n          low: price - price * 0.01,\r\n          close: price,\r\n          volume: 1000000\r\n        });\r\n      }\r\n\r\n      const macd = strategy.calculateMACD(extremeData, 12, 26, 9);\r\n      expect(macd).not.toBeNull();\r\n      expect(macd!.macd).toBeGreaterThan(0); // Should be positive for strong uptrend\r\n    });\r\n  });\r\n});"],"version":3}