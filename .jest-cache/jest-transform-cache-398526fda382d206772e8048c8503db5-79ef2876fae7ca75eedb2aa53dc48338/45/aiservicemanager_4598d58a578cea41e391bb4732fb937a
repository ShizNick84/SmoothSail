1fa37552871f4c6ebea882ac646f50ef
"use strict";

/**
 * =============================================================================
 * AI SERVICE MANAGER WITH COMPREHENSIVE ERROR HANDLING
 * =============================================================================
 *
 * Manages AI services with integrated error handling, fallbacks, and recovery.
 * Provides a unified interface for all AI operations with automatic error
 * recovery and graceful degradation.
 *
 * @author AI Crypto Trading System
 * @version 1.0.0
 * @license PROPRIETARY
 * =============================================================================
 */
/* istanbul ignore next */
function cov_sbqhrsmna() {
  var path = "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\ai\\ai-service-manager.ts";
  var hash = "114f249cfe5ee777f6bb2e7eee9a25f8557adb59";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\ai\\ai-service-manager.ts",
    statementMap: {
      "0": {
        start: {
          line: 16,
          column: 0
        },
        end: {
          line: 16,
          column: 62
        }
      },
      "1": {
        start: {
          line: 17,
          column: 0
        },
        end: {
          line: 17,
          column: 34
        }
      },
      "2": {
        start: {
          line: 18,
          column: 17
        },
        end: {
          line: 18,
          column: 34
        }
      },
      "3": {
        start: {
          line: 19,
          column: 17
        },
        end: {
          line: 19,
          column: 50
        }
      },
      "4": {
        start: {
          line: 20,
          column: 27
        },
        end: {
          line: 20,
          column: 77
        }
      },
      "5": {
        start: {
          line: 21,
          column: 31
        },
        end: {
          line: 21,
          column: 85
        }
      },
      "6": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 16
        }
      },
      "7": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 35
        }
      },
      "8": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 32
        }
      },
      "9": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 62
        }
      },
      "10": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 70
        }
      },
      "11": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 82
        }
      },
      "12": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 34
        }
      },
      "13": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 57,
          column: 9
        }
      },
      "14": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 37,
          column: 70
        }
      },
      "15": {
        start: {
          line: 39,
          column: 33
        },
        end: {
          line: 39,
          column: 70
        }
      },
      "16": {
        start: {
          line: 40,
          column: 36
        },
        end: {
          line: 40,
          column: 64
        }
      },
      "17": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 43,
          column: 13
        }
      },
      "18": {
        start: {
          line: 42,
          column: 16
        },
        end: {
          line: 42,
          column: 62
        }
      },
      "19": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 44,
          column: 38
        }
      },
      "20": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 45,
          column: 106
        }
      },
      "21": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 46,
          column: 24
        }
      },
      "22": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 49,
          column: 83
        }
      },
      "23": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 55,
          column: 15
        }
      },
      "24": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 56,
          column: 25
        }
      },
      "25": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 65,
          column: 9
        }
      },
      "26": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 64,
          column: 66
        }
      },
      "27": {
        start: {
          line: 66,
          column: 26
        },
        end: {
          line: 66,
          column: 50
        }
      },
      "28": {
        start: {
          line: 67,
          column: 26
        },
        end: {
          line: 67,
          column: 36
        }
      },
      "29": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 116,
          column: 9
        }
      },
      "30": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 73,
          column: 15
        }
      },
      "31": {
        start: {
          line: 75,
          column: 30
        },
        end: {
          line: 88,
          column: 13
        }
      },
      "32": {
        start: {
          line: 90,
          column: 31
        },
        end: {
          line: 90,
          column: 82
        }
      },
      "33": {
        start: {
          line: 92,
          column: 37
        },
        end: {
          line: 92,
          column: 84
        }
      },
      "34": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 98,
          column: 15
        }
      },
      "35": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 99,
          column: 36
        }
      },
      "36": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 102,
          column: 99
        }
      },
      "37": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 113,
          column: 15
        }
      },
      "38": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 115,
          column: 85
        }
      },
      "39": {
        start: {
          line: 122,
          column: 26
        },
        end: {
          line: 122,
          column: 50
        }
      },
      "40": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 150,
          column: 9
        }
      },
      "41": {
        start: {
          line: 124,
          column: 30
        },
        end: {
          line: 132,
          column: 13
        }
      },
      "42": {
        start: {
          line: 133,
          column: 29
        },
        end: {
          line: 133,
          column: 80
        }
      },
      "43": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 139,
          column: 14
        }
      },
      "44": {
        start: {
          line: 142,
          column: 12
        },
        end: {
          line: 142,
          column: 106
        }
      },
      "45": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 149,
          column: 14
        }
      },
      "46": {
        start: {
          line: 156,
          column: 26
        },
        end: {
          line: 156,
          column: 50
        }
      },
      "47": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 184,
          column: 9
        }
      },
      "48": {
        start: {
          line: 158,
          column: 30
        },
        end: {
          line: 166,
          column: 13
        }
      },
      "49": {
        start: {
          line: 167,
          column: 29
        },
        end: {
          line: 167,
          column: 80
        }
      },
      "50": {
        start: {
          line: 168,
          column: 12
        },
        end: {
          line: 173,
          column: 14
        }
      },
      "51": {
        start: {
          line: 176,
          column: 12
        },
        end: {
          line: 176,
          column: 106
        }
      },
      "52": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 183,
          column: 14
        }
      },
      "53": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 194,
          column: 11
        }
      },
      "54": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 192,
          column: 63
        }
      },
      "55": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 193,
          column: 43
        }
      },
      "56": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 199,
          column: 11
        }
      },
      "57": {
        start: {
          line: 197,
          column: 12
        },
        end: {
          line: 197,
          column: 65
        }
      },
      "58": {
        start: {
          line: 198,
          column: 12
        },
        end: {
          line: 198,
          column: 51
        }
      },
      "59": {
        start: {
          line: 201,
          column: 8
        },
        end: {
          line: 204,
          column: 11
        }
      },
      "60": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 202,
          column: 65
        }
      },
      "61": {
        start: {
          line: 203,
          column: 12
        },
        end: {
          line: 203,
          column: 51
        }
      },
      "62": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 210,
          column: 11
        }
      },
      "63": {
        start: {
          line: 207,
          column: 12
        },
        end: {
          line: 209,
          column: 13
        }
      },
      "64": {
        start: {
          line: 208,
          column: 16
        },
        end: {
          line: 208,
          column: 50
        }
      },
      "65": {
        start: {
          line: 216,
          column: 8
        },
        end: {
          line: 232,
          column: 9
        }
      },
      "66": {
        start: {
          line: 217,
          column: 12
        },
        end: {
          line: 217,
          column: 63
        }
      },
      "67": {
        start: {
          line: 219,
          column: 12
        },
        end: {
          line: 219,
          column: 43
        }
      },
      "68": {
        start: {
          line: 221,
          column: 12
        },
        end: {
          line: 221,
          column: 68
        }
      },
      "69": {
        start: {
          line: 221,
          column: 41
        },
        end: {
          line: 221,
          column: 66
        }
      },
      "70": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 223,
          column: 74
        }
      },
      "71": {
        start: {
          line: 224,
          column: 12
        },
        end: {
          line: 224,
          column: 38
        }
      },
      "72": {
        start: {
          line: 226,
          column: 12
        },
        end: {
          line: 226,
          column: 36
        }
      },
      "73": {
        start: {
          line: 227,
          column: 12
        },
        end: {
          line: 227,
          column: 61
        }
      },
      "74": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 230,
          column: 67
        }
      },
      "75": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 231,
          column: 24
        }
      },
      "76": {
        start: {
          line: 238,
          column: 64
        },
        end: {
          line: 238,
          column: 71
        }
      },
      "77": {
        start: {
          line: 239,
          column: 21
        },
        end: {
          line: 239,
          column: 100
        }
      },
      "78": {
        start: {
          line: 240,
          column: 8
        },
        end: {
          line: 240,
          column: 35
        }
      },
      "79": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 241,
          column: 59
        }
      },
      "80": {
        start: {
          line: 242,
          column: 8
        },
        end: {
          line: 242,
          column: 53
        }
      },
      "81": {
        start: {
          line: 243,
          column: 8
        },
        end: {
          line: 243,
          column: 61
        }
      },
      "82": {
        start: {
          line: 244,
          column: 8
        },
        end: {
          line: 248,
          column: 9
        }
      },
      "83": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 245,
          column: 62
        }
      },
      "84": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 246,
          column: 64
        }
      },
      "85": {
        start: {
          line: 247,
          column: 12
        },
        end: {
          line: 247,
          column: 89
        }
      },
      "86": {
        start: {
          line: 249,
          column: 8
        },
        end: {
          line: 254,
          column: 64
        }
      },
      "87": {
        start: {
          line: 255,
          column: 8
        },
        end: {
          line: 255,
          column: 22
        }
      },
      "88": {
        start: {
          line: 261,
          column: 8
        },
        end: {
          line: 266,
          column: 72
        }
      },
      "89": {
        start: {
          line: 272,
          column: 8
        },
        end: {
          line: 279,
          column: 30
        }
      },
      "90": {
        start: {
          line: 285,
          column: 25
        },
        end: {
          line: 285,
          column: 44
        }
      },
      "91": {
        start: {
          line: 287,
          column: 30
        },
        end: {
          line: 287,
          column: 83
        }
      },
      "92": {
        start: {
          line: 288,
          column: 32
        },
        end: {
          line: 288,
          column: 69
        }
      },
      "93": {
        start: {
          line: 289,
          column: 37
        },
        end: {
          line: 289,
          column: 97
        }
      },
      "94": {
        start: {
          line: 290,
          column: 31
        },
        end: {
          line: 290,
          column: 81
        }
      },
      "95": {
        start: {
          line: 291,
          column: 29
        },
        end: {
          line: 291,
          column: 65
        }
      },
      "96": {
        start: {
          line: 292,
          column: 8
        },
        end: {
          line: 301,
          column: 10
        }
      },
      "97": {
        start: {
          line: 307,
          column: 8
        },
        end: {
          line: 310,
          column: 25
        }
      },
      "98": {
        start: {
          line: 308,
          column: 25
        },
        end: {
          line: 308,
          column: 36
        }
      },
      "99": {
        start: {
          line: 309,
          column: 28
        },
        end: {
          line: 309,
          column: 43
        }
      },
      "100": {
        start: {
          line: 316,
          column: 28
        },
        end: {
          line: 316,
          column: 68
        }
      },
      "101": {
        start: {
          line: 317,
          column: 30
        },
        end: {
          line: 317,
          column: 61
        }
      },
      "102": {
        start: {
          line: 318,
          column: 31
        },
        end: {
          line: 318,
          column: 65
        }
      },
      "103": {
        start: {
          line: 319,
          column: 8
        },
        end: {
          line: 323,
          column: 15
        }
      },
      "104": {
        start: {
          line: 329,
          column: 31
        },
        end: {
          line: 329,
          column: 75
        }
      },
      "105": {
        start: {
          line: 330,
          column: 8
        },
        end: {
          line: 330,
          column: 63
        }
      },
      "106": {
        start: {
          line: 336,
          column: 8
        },
        end: {
          line: 354,
          column: 10
        }
      },
      "107": {
        start: {
          line: 360,
          column: 8
        },
        end: {
          line: 360,
          column: 63
        }
      },
      "108": {
        start: {
          line: 366,
          column: 25
        },
        end: {
          line: 366,
          column: 62
        }
      },
      "109": {
        start: {
          line: 367,
          column: 8
        },
        end: {
          line: 375,
          column: 10
        }
      },
      "110": {
        start: {
          line: 381,
          column: 8
        },
        end: {
          line: 381,
          column: 64
        }
      },
      "111": {
        start: {
          line: 382,
          column: 8
        },
        end: {
          line: 382,
          column: 39
        }
      },
      "112": {
        start: {
          line: 383,
          column: 8
        },
        end: {
          line: 383,
          column: 35
        }
      },
      "113": {
        start: {
          line: 384,
          column: 8
        },
        end: {
          line: 384,
          column: 66
        }
      },
      "114": {
        start: {
          line: 387,
          column: 0
        },
        end: {
          line: 387,
          column: 44
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 23,
            column: 5
          }
        },
        loc: {
          start: {
            line: 23,
            column: 18
          },
          end: {
            line: 31,
            column: 5
          }
        },
        line: 23
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 35,
            column: 4
          },
          end: {
            line: 35,
            column: 5
          }
        },
        loc: {
          start: {
            line: 35,
            column: 23
          },
          end: {
            line: 58,
            column: 5
          }
        },
        line: 35
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 62,
            column: 4
          },
          end: {
            line: 62,
            column: 5
          }
        },
        loc: {
          start: {
            line: 62,
            column: 42
          },
          end: {
            line: 117,
            column: 5
          }
        },
        line: 62
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 121,
            column: 4
          },
          end: {
            line: 121,
            column: 5
          }
        },
        loc: {
          start: {
            line: 121,
            column: 54
          },
          end: {
            line: 151,
            column: 5
          }
        },
        line: 121
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 155,
            column: 4
          },
          end: {
            line: 155,
            column: 5
          }
        },
        loc: {
          start: {
            line: 155,
            column: 63
          },
          end: {
            line: 185,
            column: 5
          }
        },
        line: 155
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 189,
            column: 4
          },
          end: {
            line: 189,
            column: 5
          }
        },
        loc: {
          start: {
            line: 189,
            column: 25
          },
          end: {
            line: 211,
            column: 5
          }
        },
        line: 189
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 191,
            column: 45
          },
          end: {
            line: 191,
            column: 46
          }
        },
        loc: {
          start: {
            line: 191,
            column: 56
          },
          end: {
            line: 194,
            column: 9
          }
        },
        line: 191
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 196,
            column: 49
          },
          end: {
            line: 196,
            column: 50
          }
        },
        loc: {
          start: {
            line: 196,
            column: 64
          },
          end: {
            line: 199,
            column: 9
          }
        },
        line: 196
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 201,
            column: 49
          },
          end: {
            line: 201,
            column: 50
          }
        },
        loc: {
          start: {
            line: 201,
            column: 64
          },
          end: {
            line: 204,
            column: 9
          }
        },
        line: 201
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 206,
            column: 55
          },
          end: {
            line: 206,
            column: 56
          }
        },
        loc: {
          start: {
            line: 206,
            column: 76
          },
          end: {
            line: 210,
            column: 9
          }
        },
        line: 206
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 215,
            column: 4
          },
          end: {
            line: 215,
            column: 5
          }
        },
        loc: {
          start: {
            line: 215,
            column: 33
          },
          end: {
            line: 233,
            column: 5
          }
        },
        line: 215
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 221,
            column: 30
          },
          end: {
            line: 221,
            column: 31
          }
        },
        loc: {
          start: {
            line: 221,
            column: 41
          },
          end: {
            line: 221,
            column: 66
          }
        },
        line: 221
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 237,
            column: 4
          },
          end: {
            line: 237,
            column: 5
          }
        },
        loc: {
          start: {
            line: 237,
            column: 33
          },
          end: {
            line: 256,
            column: 5
          }
        },
        line: 237
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 260,
            column: 4
          },
          end: {
            line: 260,
            column: 5
          }
        },
        loc: {
          start: {
            line: 260,
            column: 45
          },
          end: {
            line: 267,
            column: 5
          }
        },
        line: 260
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 271,
            column: 4
          },
          end: {
            line: 271,
            column: 5
          }
        },
        loc: {
          start: {
            line: 271,
            column: 52
          },
          end: {
            line: 280,
            column: 5
          }
        },
        line: 271
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 284,
            column: 4
          },
          end: {
            line: 284,
            column: 5
          }
        },
        loc: {
          start: {
            line: 284,
            column: 47
          },
          end: {
            line: 302,
            column: 5
          }
        },
        line: 284
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 306,
            column: 4
          },
          end: {
            line: 306,
            column: 5
          }
        },
        loc: {
          start: {
            line: 306,
            column: 31
          },
          end: {
            line: 311,
            column: 5
          }
        },
        line: 306
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 308,
            column: 17
          },
          end: {
            line: 308,
            column: 18
          }
        },
        loc: {
          start: {
            line: 308,
            column: 25
          },
          end: {
            line: 308,
            column: 36
          }
        },
        line: 308
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 309,
            column: 20
          },
          end: {
            line: 309,
            column: 21
          }
        },
        loc: {
          start: {
            line: 309,
            column: 28
          },
          end: {
            line: 309,
            column: 43
          }
        },
        line: 309
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 315,
            column: 4
          },
          end: {
            line: 315,
            column: 5
          }
        },
        loc: {
          start: {
            line: 315,
            column: 23
          },
          end: {
            line: 324,
            column: 5
          }
        },
        line: 315
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 328,
            column: 4
          },
          end: {
            line: 328,
            column: 5
          }
        },
        loc: {
          start: {
            line: 328,
            column: 29
          },
          end: {
            line: 331,
            column: 5
          }
        },
        line: 328
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 335,
            column: 4
          },
          end: {
            line: 335,
            column: 5
          }
        },
        loc: {
          start: {
            line: 335,
            column: 57
          },
          end: {
            line: 355,
            column: 5
          }
        },
        line: 335
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 359,
            column: 4
          },
          end: {
            line: 359,
            column: 5
          }
        },
        loc: {
          start: {
            line: 359,
            column: 24
          },
          end: {
            line: 361,
            column: 5
          }
        },
        line: 359
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 365,
            column: 4
          },
          end: {
            line: 365,
            column: 5
          }
        },
        loc: {
          start: {
            line: 365,
            column: 23
          },
          end: {
            line: 376,
            column: 5
          }
        },
        line: 365
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 380,
            column: 4
          },
          end: {
            line: 380,
            column: 5
          }
        },
        loc: {
          start: {
            line: 380,
            column: 15
          },
          end: {
            line: 385,
            column: 5
          }
        },
        line: 380
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 41,
            column: 12
          },
          end: {
            line: 43,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 41,
            column: 12
          },
          end: {
            line: 43,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 41
      },
      "1": {
        loc: {
          start: {
            line: 63,
            column: 8
          },
          end: {
            line: 65,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 63,
            column: 8
          },
          end: {
            line: 65,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 63
      },
      "2": {
        loc: {
          start: {
            line: 207,
            column: 12
          },
          end: {
            line: 209,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 207,
            column: 12
          },
          end: {
            line: 209,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 207
      },
      "3": {
        loc: {
          start: {
            line: 244,
            column: 8
          },
          end: {
            line: 248,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 244,
            column: 8
          },
          end: {
            line: 248,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 244
      },
      "4": {
        loc: {
          start: {
            line: 293,
            column: 22
          },
          end: {
            line: 293,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 293,
            column: 22
          },
          end: {
            line: 293,
            column: 48
          }
        }, {
          start: {
            line: 293,
            column: 52
          },
          end: {
            line: 293,
            column: 76
          }
        }],
        line: 293
      },
      "5": {
        loc: {
          start: {
            line: 294,
            column: 24
          },
          end: {
            line: 294,
            column: 109
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 294,
            column: 24
          },
          end: {
            line: 294,
            column: 45
          }
        }, {
          start: {
            line: 294,
            column: 50
          },
          end: {
            line: 294,
            column: 108
          }
        }],
        line: 294
      },
      "6": {
        loc: {
          start: {
            line: 294,
            column: 50
          },
          end: {
            line: 294,
            column: 108
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 294,
            column: 68
          },
          end: {
            line: 294,
            column: 102
          }
        }, {
          start: {
            line: 294,
            column: 105
          },
          end: {
            line: 294,
            column: 108
          }
        }],
        line: 294
      },
      "7": {
        loc: {
          start: {
            line: 295,
            column: 55
          },
          end: {
            line: 295,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 295,
            column: 55
          },
          end: {
            line: 295,
            column: 80
          }
        }, {
          start: {
            line: 295,
            column: 84
          },
          end: {
            line: 295,
            column: 86
          }
        }],
        line: 295
      },
      "8": {
        loc: {
          start: {
            line: 296,
            column: 23
          },
          end: {
            line: 296,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 296,
            column: 23
          },
          end: {
            line: 296,
            column: 57
          }
        }, {
          start: {
            line: 296,
            column: 61
          },
          end: {
            line: 296,
            column: 69
          }
        }],
        line: 296
      },
      "9": {
        loc: {
          start: {
            line: 297,
            column: 39
          },
          end: {
            line: 297,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 297,
            column: 39
          },
          end: {
            line: 297,
            column: 56
          }
        }, {
          start: {
            line: 297,
            column: 60
          },
          end: {
            line: 297,
            column: 62
          }
        }],
        line: 297
      },
      "10": {
        loc: {
          start: {
            line: 320,
            column: 24
          },
          end: {
            line: 320,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 320,
            column: 24
          },
          end: {
            line: 320,
            column: 55
          }
        }, {
          start: {
            line: 320,
            column: 59
          },
          end: {
            line: 320,
            column: 65
          }
        }],
        line: 320
      },
      "11": {
        loc: {
          start: {
            line: 321,
            column: 26
          },
          end: {
            line: 321,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 321,
            column: 42
          },
          end: {
            line: 321,
            column: 68
          }
        }, {
          start: {
            line: 321,
            column: 71
          },
          end: {
            line: 321,
            column: 73
          }
        }],
        line: 321
      },
      "12": {
        loc: {
          start: {
            line: 322,
            column: 27
          },
          end: {
            line: 322,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 322,
            column: 27
          },
          end: {
            line: 322,
            column: 54
          }
        }, {
          start: {
            line: 322,
            column: 58
          },
          end: {
            line: 322,
            column: 81
          }
        }],
        line: 322
      },
      "13": {
        loc: {
          start: {
            line: 330,
            column: 15
          },
          end: {
            line: 330,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 330,
            column: 15
          },
          end: {
            line: 330,
            column: 49
          }
        }, {
          start: {
            line: 330,
            column: 53
          },
          end: {
            line: 330,
            column: 62
          }
        }],
        line: 330
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "114f249cfe5ee777f6bb2e7eee9a25f8557adb59"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_sbqhrsmna = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_sbqhrsmna();
cov_sbqhrsmna().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_sbqhrsmna().s[1]++;
exports.AIServiceManager = void 0;
const events_1 =
/* istanbul ignore next */
(cov_sbqhrsmna().s[2]++, require("events"));
const logger_1 =
/* istanbul ignore next */
(cov_sbqhrsmna().s[3]++, require("../core/logging/logger"));
const ai_error_handler_1 =
/* istanbul ignore next */
(cov_sbqhrsmna().s[4]++, require("../core/error-handling/ai-error-handler"));
const system_error_manager_1 =
/* istanbul ignore next */
(cov_sbqhrsmna().s[5]++, require("../core/error-handling/system-error-manager"));
class AIServiceManager extends
/* istanbul ignore next */
(events_1.EventEmitter) {
  constructor() {
    /* istanbul ignore next */
    cov_sbqhrsmna().f[0]++;
    cov_sbqhrsmna().s[6]++;
    super();
    /* istanbul ignore next */
    cov_sbqhrsmna().s[7]++;
    this.isInitialized = false;
    /* istanbul ignore next */
    cov_sbqhrsmna().s[8]++;
    this.requestCounter = 0;
    /* istanbul ignore next */
    cov_sbqhrsmna().s[9]++;
    this.logger = new logger_1.Logger('AIServiceManager');
    /* istanbul ignore next */
    cov_sbqhrsmna().s[10]++;
    this.aiErrorHandler = new ai_error_handler_1.AIErrorHandler();
    /* istanbul ignore next */
    cov_sbqhrsmna().s[11]++;
    this.systemErrorManager = new system_error_manager_1.SystemErrorManager();
    /* istanbul ignore next */
    cov_sbqhrsmna().s[12]++;
    this.setupErrorHandling();
  }
  /**
   * Initialize AI service manager
   */
  async initialize() {
    /* istanbul ignore next */
    cov_sbqhrsmna().f[1]++;
    cov_sbqhrsmna().s[13]++;
    try {
      /* istanbul ignore next */
      cov_sbqhrsmna().s[14]++;
      this.logger.info('🤖 Initializing AI Service Manager...');
      // Check AI system health
      const systemStatus =
      /* istanbul ignore next */
      (cov_sbqhrsmna().s[15]++, this.aiErrorHandler.getSystemStatus());
      const availableModels =
      /* istanbul ignore next */
      (cov_sbqhrsmna().s[16]++, systemStatus.availableModels);
      /* istanbul ignore next */
      cov_sbqhrsmna().s[17]++;
      if (availableModels === 0) {
        /* istanbul ignore next */
        cov_sbqhrsmna().b[0][0]++;
        cov_sbqhrsmna().s[18]++;
        throw new Error('No AI models are available');
      } else
      /* istanbul ignore next */
      {
        cov_sbqhrsmna().b[0][1]++;
      }
      cov_sbqhrsmna().s[19]++;
      this.isInitialized = true;
      /* istanbul ignore next */
      cov_sbqhrsmna().s[20]++;
      this.logger.info(`✅ AI Service Manager initialized with ${availableModels} available models`);
      /* istanbul ignore next */
      cov_sbqhrsmna().s[21]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_sbqhrsmna().s[22]++;
      this.logger.error('❌ Failed to initialize AI Service Manager:', error);
      /* istanbul ignore next */
      cov_sbqhrsmna().s[23]++;
      await this.systemErrorManager.handleComponentError(system_error_manager_1.SystemComponent.AI_SYSTEM, {
        type: 'INITIALIZATION_FAILED',
        severity: 'CRITICAL',
        message: 'AI Service Manager initialization failed',
        details: {
          error: error.message
        }
      });
      /* istanbul ignore next */
      cov_sbqhrsmna().s[24]++;
      return false;
    }
  }
  /**
   * Perform trading analysis with comprehensive error handling
   */
  async performTradingAnalysis(request) {
    /* istanbul ignore next */
    cov_sbqhrsmna().f[2]++;
    cov_sbqhrsmna().s[25]++;
    if (!this.isInitialized) {
      /* istanbul ignore next */
      cov_sbqhrsmna().b[1][0]++;
      cov_sbqhrsmna().s[26]++;
      throw new Error('AI Service Manager not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_sbqhrsmna().b[1][1]++;
    }
    const requestId =
    /* istanbul ignore next */
    (cov_sbqhrsmna().s[27]++, this.generateRequestId());
    const startTime =
    /* istanbul ignore next */
    (cov_sbqhrsmna().s[28]++, Date.now());
    /* istanbul ignore next */
    cov_sbqhrsmna().s[29]++;
    try {
      /* istanbul ignore next */
      cov_sbqhrsmna().s[30]++;
      this.logger.info(`🔍 Performing trading analysis: ${requestId}`, {
        symbol: request.symbol,
        analysisType: request.analysisType,
        timeframe: request.timeframe
      });
      // Create AI request
      const aiRequest =
      /* istanbul ignore next */
      (cov_sbqhrsmna().s[31]++, {
        id: requestId,
        prompt: this.buildAnalysisPrompt(request),
        requiredCapabilities: ['trading', 'analysis'],
        maxTokens: 2048,
        temperature: 0.3,
        timeout: 30000,
        fallbackAllowed: true,
        context: {
          symbol: request.symbol,
          analysisType: request.analysisType,
          timeframe: request.timeframe
        }
      });
      // Process request through AI error handler
      const aiResponse =
      /* istanbul ignore next */
      (cov_sbqhrsmna().s[32]++, await this.aiErrorHandler.processRequest(aiRequest));
      // Parse and validate response
      const analysisResponse =
      /* istanbul ignore next */
      (cov_sbqhrsmna().s[33]++, this.parseAnalysisResponse(aiResponse, request));
      /* istanbul ignore next */
      cov_sbqhrsmna().s[34]++;
      this.logger.info(`✅ Trading analysis completed: ${requestId}`, {
        confidence: analysisResponse.confidence,
        modelUsed: analysisResponse.modelUsed,
        processingTime: analysisResponse.processingTime,
        fallbackUsed: analysisResponse.fallbackUsed
      });
      /* istanbul ignore next */
      cov_sbqhrsmna().s[35]++;
      return analysisResponse;
    } catch (error) {
      /* istanbul ignore next */
      cov_sbqhrsmna().s[36]++;
      this.logger.error(`❌ Trading analysis failed: ${requestId}`, {
        error: error.message
      });
      // Handle AI service error
      /* istanbul ignore next */
      cov_sbqhrsmna().s[37]++;
      await this.systemErrorManager.handleComponentError(system_error_manager_1.SystemComponent.AI_SYSTEM, {
        type: 'ANALYSIS_FAILED',
        severity: 'HIGH',
        message: 'Trading analysis failed',
        details: {
          requestId,
          request,
          error: error.message
        }
      });
      // Return degraded response
      /* istanbul ignore next */
      cov_sbqhrsmna().s[38]++;
      return this.getDegradedAnalysisResponse(request, Date.now() - startTime);
    }
  }
  /**
   * Generate market sentiment analysis
   */
  async generateMarketSentiment(marketData, symbol) {
    /* istanbul ignore next */
    cov_sbqhrsmna().f[3]++;
    const requestId =
    /* istanbul ignore next */
    (cov_sbqhrsmna().s[39]++, this.generateRequestId());
    /* istanbul ignore next */
    cov_sbqhrsmna().s[40]++;
    try {
      const aiRequest =
      /* istanbul ignore next */
      (cov_sbqhrsmna().s[41]++, {
        id: requestId,
        prompt: this.buildSentimentPrompt(marketData, symbol),
        requiredCapabilities: ['analysis', 'reasoning'],
        maxTokens: 1024,
        temperature: 0.5,
        timeout: 20000,
        fallbackAllowed: true
      });
      const response =
      /* istanbul ignore next */
      (cov_sbqhrsmna().s[42]++, await this.aiErrorHandler.processRequest(aiRequest));
      /* istanbul ignore next */
      cov_sbqhrsmna().s[43]++;
      return {
        sentiment: this.parseSentiment(response.response),
        confidence: response.confidence,
        modelUsed: response.modelUsed,
        fallbackUsed: response.fallbackUsed
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_sbqhrsmna().s[44]++;
      this.logger.error(`Market sentiment analysis failed: ${requestId}`, {
        error: error.message
      });
      /* istanbul ignore next */
      cov_sbqhrsmna().s[45]++;
      return {
        sentiment: 'neutral',
        confidence: 0,
        modelUsed: 'fallback',
        fallbackUsed: true,
        error: 'Sentiment analysis unavailable'
      };
    }
  }
  /**
   * Generate trading signals
   */
  async generateTradingSignals(marketData, symbol, strategy) {
    /* istanbul ignore next */
    cov_sbqhrsmna().f[4]++;
    const requestId =
    /* istanbul ignore next */
    (cov_sbqhrsmna().s[46]++, this.generateRequestId());
    /* istanbul ignore next */
    cov_sbqhrsmna().s[47]++;
    try {
      const aiRequest =
      /* istanbul ignore next */
      (cov_sbqhrsmna().s[48]++, {
        id: requestId,
        prompt: this.buildSignalPrompt(marketData, symbol, strategy),
        requiredCapabilities: ['trading', 'reasoning'],
        maxTokens: 1536,
        temperature: 0.2,
        timeout: 25000,
        fallbackAllowed: true
      });
      const response =
      /* istanbul ignore next */
      (cov_sbqhrsmna().s[49]++, await this.aiErrorHandler.processRequest(aiRequest));
      /* istanbul ignore next */
      cov_sbqhrsmna().s[50]++;
      return {
        signals: this.parseSignals(response.response),
        confidence: response.confidence,
        modelUsed: response.modelUsed,
        fallbackUsed: response.fallbackUsed
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_sbqhrsmna().s[51]++;
      this.logger.error(`Trading signal generation failed: ${requestId}`, {
        error: error.message
      });
      /* istanbul ignore next */
      cov_sbqhrsmna().s[52]++;
      return {
        signals: [{
          action: 'hold',
          strength: 0,
          reasoning: 'AI analysis unavailable'
        }],
        confidence: 0,
        modelUsed: 'fallback',
        fallbackUsed: true,
        error: 'Signal generation unavailable'
      };
    }
  }
  /**
   * Setup error handling listeners
   */
  setupErrorHandling() {
    /* istanbul ignore next */
    cov_sbqhrsmna().f[5]++;
    cov_sbqhrsmna().s[53]++;
    // Listen for AI model errors
    this.aiErrorHandler.on('modelError', error => {
      /* istanbul ignore next */
      cov_sbqhrsmna().f[6]++;
      cov_sbqhrsmna().s[54]++;
      this.logger.warn('AI model error detected', error);
      /* istanbul ignore next */
      cov_sbqhrsmna().s[55]++;
      this.emit('modelError', error);
    });
    // Listen for model recovery
    /* istanbul ignore next */
    cov_sbqhrsmna().s[56]++;
    this.aiErrorHandler.on('modelRecovered', modelName => {
      /* istanbul ignore next */
      cov_sbqhrsmna().f[7]++;
      cov_sbqhrsmna().s[57]++;
      this.logger.info(`AI model recovered: ${modelName}`);
      /* istanbul ignore next */
      cov_sbqhrsmna().s[58]++;
      this.emit('modelRecovered', modelName);
    });
    // Listen for request timeouts
    /* istanbul ignore next */
    cov_sbqhrsmna().s[59]++;
    this.aiErrorHandler.on('requestTimeout', requestId => {
      /* istanbul ignore next */
      cov_sbqhrsmna().f[8]++;
      cov_sbqhrsmna().s[60]++;
      this.logger.warn(`AI request timeout: ${requestId}`);
      /* istanbul ignore next */
      cov_sbqhrsmna().s[61]++;
      this.emit('requestTimeout', requestId);
    });
    // Listen for system error manager restart requests
    /* istanbul ignore next */
    cov_sbqhrsmna().s[62]++;
    this.systemErrorManager.on('restartComponent', async component => {
      /* istanbul ignore next */
      cov_sbqhrsmna().f[9]++;
      cov_sbqhrsmna().s[63]++;
      if (component === system_error_manager_1.SystemComponent.AI_SYSTEM) {
        /* istanbul ignore next */
        cov_sbqhrsmna().b[2][0]++;
        cov_sbqhrsmna().s[64]++;
        await this.handleServiceRestart();
      } else
      /* istanbul ignore next */
      {
        cov_sbqhrsmna().b[2][1]++;
      }
    });
  }
  /**
   * Handle AI service restart
   */
  async handleServiceRestart() {
    /* istanbul ignore next */
    cov_sbqhrsmna().f[10]++;
    cov_sbqhrsmna().s[65]++;
    try {
      /* istanbul ignore next */
      cov_sbqhrsmna().s[66]++;
      this.logger.info('Handling AI service restart...');
      // Shutdown current AI error handler
      /* istanbul ignore next */
      cov_sbqhrsmna().s[67]++;
      this.aiErrorHandler.shutdown();
      // Wait for cleanup
      /* istanbul ignore next */
      cov_sbqhrsmna().s[68]++;
      await new Promise(resolve => {
        /* istanbul ignore next */
        cov_sbqhrsmna().f[11]++;
        cov_sbqhrsmna().s[69]++;
        return setTimeout(resolve, 2000);
      });
      // Reinitialize
      /* istanbul ignore next */
      cov_sbqhrsmna().s[70]++;
      this.aiErrorHandler = new ai_error_handler_1.AIErrorHandler();
      /* istanbul ignore next */
      cov_sbqhrsmna().s[71]++;
      this.setupErrorHandling();
      // Reinitialize service
      /* istanbul ignore next */
      cov_sbqhrsmna().s[72]++;
      await this.initialize();
      /* istanbul ignore next */
      cov_sbqhrsmna().s[73]++;
      this.logger.info('AI service restart completed');
    } catch (error) {
      /* istanbul ignore next */
      cov_sbqhrsmna().s[74]++;
      this.logger.error('AI service restart failed:', error);
      /* istanbul ignore next */
      cov_sbqhrsmna().s[75]++;
      throw error;
    }
  }
  /**
   * Build analysis prompt for AI model
   */
  buildAnalysisPrompt(request) {
    /* istanbul ignore next */
    cov_sbqhrsmna().f[12]++;
    const {
      marketData,
      symbol,
      timeframe,
      analysisType
    } =
    /* istanbul ignore next */
    (cov_sbqhrsmna().s[76]++, request);
    let prompt =
    /* istanbul ignore next */
    (cov_sbqhrsmna().s[77]++, `Perform ${analysisType} analysis for ${symbol} on ${timeframe} timeframe.\n\n`);
    /* istanbul ignore next */
    cov_sbqhrsmna().s[78]++;
    prompt += `Market Data:\n`;
    /* istanbul ignore next */
    cov_sbqhrsmna().s[79]++;
    prompt += `- Current Price: ${marketData.price}\n`;
    /* istanbul ignore next */
    cov_sbqhrsmna().s[80]++;
    prompt += `- Volume: ${marketData.volume}\n`;
    /* istanbul ignore next */
    cov_sbqhrsmna().s[81]++;
    prompt += `- 24h Change: ${marketData.change24h}%\n`;
    /* istanbul ignore next */
    cov_sbqhrsmna().s[82]++;
    if (marketData.indicators) {
      /* istanbul ignore next */
      cov_sbqhrsmna().b[3][0]++;
      cov_sbqhrsmna().s[83]++;
      prompt += `- RSI: ${marketData.indicators.rsi}\n`;
      /* istanbul ignore next */
      cov_sbqhrsmna().s[84]++;
      prompt += `- MACD: ${marketData.indicators.macd}\n`;
      /* istanbul ignore next */
      cov_sbqhrsmna().s[85]++;
      prompt += `- Moving Averages: ${JSON.stringify(marketData.indicators.ma)}\n`;
    } else
    /* istanbul ignore next */
    {
      cov_sbqhrsmna().b[3][1]++;
    }
    cov_sbqhrsmna().s[86]++;
    prompt += `\nProvide analysis in the following format:
    ANALYSIS: [detailed analysis]
    CONFIDENCE: [0-100]
    RECOMMENDATIONS: [list of recommendations]
    RISK_LEVEL: [low/medium/high]
    SIGNALS: [buy/sell/hold with strength 0-100 and reasoning]`;
    /* istanbul ignore next */
    cov_sbqhrsmna().s[87]++;
    return prompt;
  }
  /**
   * Build sentiment analysis prompt
   */
  buildSentimentPrompt(marketData, symbol) {
    /* istanbul ignore next */
    cov_sbqhrsmna().f[13]++;
    cov_sbqhrsmna().s[88]++;
    return `Analyze market sentiment for ${symbol} based on:
    - Price action: ${marketData.priceAction}
    - Volume trends: ${marketData.volumeTrends}
    - Market indicators: ${JSON.stringify(marketData.indicators)}
    
    Provide sentiment as: bullish, bearish, or neutral with reasoning.`;
  }
  /**
   * Build trading signal prompt
   */
  buildSignalPrompt(marketData, symbol, strategy) {
    /* istanbul ignore next */
    cov_sbqhrsmna().f[14]++;
    cov_sbqhrsmna().s[89]++;
    return `Generate trading signals for ${symbol} using ${strategy} strategy:
    
    Market Data: ${JSON.stringify(marketData)}
    
    Provide signals in format:
    ACTION: [buy/sell/hold]
    STRENGTH: [0-100]
    REASONING: [explanation]`;
  }
  /**
   * Parse AI analysis response
   */
  parseAnalysisResponse(aiResponse, request) {
    /* istanbul ignore next */
    cov_sbqhrsmna().f[15]++;
    const response =
    /* istanbul ignore next */
    (cov_sbqhrsmna().s[90]++, aiResponse.response);
    // Extract analysis components using regex patterns
    const analysisMatch =
    /* istanbul ignore next */
    (cov_sbqhrsmna().s[91]++, response.match(/ANALYSIS:\s*(.+?)(?=CONFIDENCE:|$)/s));
    const confidenceMatch =
    /* istanbul ignore next */
    (cov_sbqhrsmna().s[92]++, response.match(/CONFIDENCE:\s*(\d+)/));
    const recommendationsMatch =
    /* istanbul ignore next */
    (cov_sbqhrsmna().s[93]++, response.match(/RECOMMENDATIONS:\s*(.+?)(?=RISK_LEVEL:|$)/s));
    const riskLevelMatch =
    /* istanbul ignore next */
    (cov_sbqhrsmna().s[94]++, response.match(/RISK_LEVEL:\s*(low|medium|high)/i));
    const signalsMatch =
    /* istanbul ignore next */
    (cov_sbqhrsmna().s[95]++, response.match(/SIGNALS:\s*(.+?)$/s));
    /* istanbul ignore next */
    cov_sbqhrsmna().s[96]++;
    return {
      analysis:
      /* istanbul ignore next */
      (cov_sbqhrsmna().b[4][0]++, analysisMatch?.[1]?.trim()) ||
      /* istanbul ignore next */
      (cov_sbqhrsmna().b[4][1]++, 'Analysis not available'),
      confidence:
      /* istanbul ignore next */
      (cov_sbqhrsmna().b[5][0]++, aiResponse.confidence) ||
      /* istanbul ignore next */
      (cov_sbqhrsmna().b[5][1]++, confidenceMatch ?
      /* istanbul ignore next */
      (cov_sbqhrsmna().b[6][0]++, parseInt(confidenceMatch[1]) / 100) :
      /* istanbul ignore next */
      (cov_sbqhrsmna().b[6][1]++, 0.5)),
      recommendations: this.parseRecommendations(
      /* istanbul ignore next */
      (cov_sbqhrsmna().b[7][0]++, recommendationsMatch?.[1]) ||
      /* istanbul ignore next */
      (cov_sbqhrsmna().b[7][1]++, '')),
      riskLevel:
      /* istanbul ignore next */
      (cov_sbqhrsmna().b[8][0]++, riskLevelMatch?.[1]?.toLowerCase()) ||
      /* istanbul ignore next */
      (cov_sbqhrsmna().b[8][1]++, 'medium'),
      signals: this.parseSignals(
      /* istanbul ignore next */
      (cov_sbqhrsmna().b[9][0]++, signalsMatch?.[1]) ||
      /* istanbul ignore next */
      (cov_sbqhrsmna().b[9][1]++, '')),
      processingTime: aiResponse.processingTime,
      modelUsed: aiResponse.modelUsed,
      fallbackUsed: aiResponse.fallbackUsed
    };
  }
  /**
   * Parse recommendations from text
   */
  parseRecommendations(text) {
    /* istanbul ignore next */
    cov_sbqhrsmna().f[16]++;
    cov_sbqhrsmna().s[97]++;
    return text.split('\n').map(line => {
      /* istanbul ignore next */
      cov_sbqhrsmna().f[17]++;
      cov_sbqhrsmna().s[98]++;
      return line.trim();
    }).filter(line => {
      /* istanbul ignore next */
      cov_sbqhrsmna().f[18]++;
      cov_sbqhrsmna().s[99]++;
      return line.length > 0;
    }).slice(0, 5); // Limit to 5 recommendations
  }
  /**
   * Parse trading signals from text
   */
  parseSignals(text) {
    /* istanbul ignore next */
    cov_sbqhrsmna().f[19]++;
    const actionMatch =
    /* istanbul ignore next */
    (cov_sbqhrsmna().s[100]++, text.match(/ACTION:\s*(buy|sell|hold)/i));
    const strengthMatch =
    /* istanbul ignore next */
    (cov_sbqhrsmna().s[101]++, text.match(/STRENGTH:\s*(\d+)/));
    const reasoningMatch =
    /* istanbul ignore next */
    (cov_sbqhrsmna().s[102]++, text.match(/REASONING:\s*(.+?)$/s));
    /* istanbul ignore next */
    cov_sbqhrsmna().s[103]++;
    return [{
      action:
      /* istanbul ignore next */
      (cov_sbqhrsmna().b[10][0]++, actionMatch?.[1]?.toLowerCase()) ||
      /* istanbul ignore next */
      (cov_sbqhrsmna().b[10][1]++, 'hold'),
      strength: strengthMatch ?
      /* istanbul ignore next */
      (cov_sbqhrsmna().b[11][0]++, parseInt(strengthMatch[1])) :
      /* istanbul ignore next */
      (cov_sbqhrsmna().b[11][1]++, 50),
      reasoning:
      /* istanbul ignore next */
      (cov_sbqhrsmna().b[12][0]++, reasoningMatch?.[1]?.trim()) ||
      /* istanbul ignore next */
      (cov_sbqhrsmna().b[12][1]++, 'No reasoning provided')
    }];
  }
  /**
   * Parse sentiment from response
   */
  parseSentiment(response) {
    /* istanbul ignore next */
    cov_sbqhrsmna().f[20]++;
    const sentimentMatch =
    /* istanbul ignore next */
    (cov_sbqhrsmna().s[104]++, response.match(/(bullish|bearish|neutral)/i));
    /* istanbul ignore next */
    cov_sbqhrsmna().s[105]++;
    return /* istanbul ignore next */(cov_sbqhrsmna().b[13][0]++, sentimentMatch?.[1]?.toLowerCase()) ||
    /* istanbul ignore next */
    (cov_sbqhrsmna().b[13][1]++, 'neutral');
  }
  /**
   * Get degraded analysis response when AI fails
   */
  getDegradedAnalysisResponse(request, processingTime) {
    /* istanbul ignore next */
    cov_sbqhrsmna().f[21]++;
    cov_sbqhrsmna().s[106]++;
    return {
      analysis: `AI analysis is currently unavailable for ${request.symbol}. Please perform manual analysis or wait for service recovery.`,
      confidence: 0,
      recommendations: ['Verify market conditions manually', 'Check technical indicators independently', 'Consider postponing trading decisions', 'Monitor for AI service recovery'],
      riskLevel: 'high',
      signals: [{
        action: 'hold',
        strength: 0,
        reasoning: 'AI analysis unavailable - manual review required'
      }],
      processingTime,
      modelUsed: 'degraded-fallback',
      fallbackUsed: true
    };
  }
  /**
   * Generate unique request ID
   */
  generateRequestId() {
    /* istanbul ignore next */
    cov_sbqhrsmna().f[22]++;
    cov_sbqhrsmna().s[107]++;
    return `ai_req_${Date.now()}_${++this.requestCounter}`;
  }
  /**
   * Get AI service status
   */
  getServiceStatus() {
    /* istanbul ignore next */
    cov_sbqhrsmna().f[23]++;
    const aiStatus =
    /* istanbul ignore next */
    (cov_sbqhrsmna().s[108]++, this.aiErrorHandler.getSystemStatus());
    /* istanbul ignore next */
    cov_sbqhrsmna().s[109]++;
    return {
      isInitialized: this.isInitialized,
      totalModels: aiStatus.totalModels,
      availableModels: aiStatus.availableModels,
      activeRequests: aiStatus.activeRequests,
      queuedRequests: aiStatus.queuedRequests,
      models: aiStatus.models,
      fallbackChains: aiStatus.fallbackChains
    };
  }
  /**
   * Shutdown AI service manager
   */
  shutdown() {
    /* istanbul ignore next */
    cov_sbqhrsmna().f[24]++;
    cov_sbqhrsmna().s[110]++;
    this.logger.info('Shutting down AI Service Manager...');
    /* istanbul ignore next */
    cov_sbqhrsmna().s[111]++;
    this.aiErrorHandler.shutdown();
    /* istanbul ignore next */
    cov_sbqhrsmna().s[112]++;
    this.isInitialized = false;
    /* istanbul ignore next */
    cov_sbqhrsmna().s[113]++;
    this.logger.info('AI Service Manager shutdown completed');
  }
}
/* istanbul ignore next */
cov_sbqhrsmna().s[114]++;
exports.AIServiceManager = AIServiceManager;