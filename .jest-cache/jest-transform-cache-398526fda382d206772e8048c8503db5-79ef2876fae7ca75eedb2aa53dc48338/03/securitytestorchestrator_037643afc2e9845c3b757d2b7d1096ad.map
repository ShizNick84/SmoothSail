{"version":3,"names":["cov_2iypd10nex","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","crypto","__importStar","require","SecurityTestType","exports","SecurityTestOrchestrator","logger","penetrationTesting","vulnerabilityScanner","complianceTesting","automatedTesting","threatDetection","incidentResponse","notifications","testSuites","Map","activeExecutions","executionHistory","securityTrends","constructor","initializeDefaultTestSuites","set","suiteId","description","testTypes","VULNERABILITY_SCANNING","DEPENDENCY_AUDIT","CONFIGURATION_REVIEW","priority","schedule","enabled","parallelExecution","maxExecutionTime","retryCount","PENETRATION_TESTING","COMPLIANCE_TESTING","CODE_ANALYSIS","NETWORK_SECURITY","THREAT_MODELING","info","suiteCount","size","executeSecurityTestSuite","suite","get","Error","executionId","Date","now","randomBytes","toString","execution","startTime","status","testResults","overallRiskScore","complianceScore","criticalFindings","highFindings","mediumFindings","lowFindings","recommendations","remediationPlan","planId","estimatedEffort","estimatedCost","timeline","tasks","dependencies","riskReduction","executeTestsInParallel","executeTestsSequentially","calculateOverallScores","generateRecommendations","generateRemediationPlan","processSecurityTestResults","endTime","error","message","String","sendFailureNotification","delete","push","updateSecurityTrends","testPromises","map","testType","executeSecurityTest","results","Promise","allSettled","forEach","result","index","value","reason","testId","executionTime","findings","riskScore","details","debug","executePenetrationTest","executeVulnerabilityScanning","executeComplianceTesting","executeDependencyAudit","executeCodeAnalysis","executeConfigurationReview","executeNetworkSecurityTest","executeThreatModeling","report","scanId","criticalCount","highCount","vulnerabilities","calculateRiskScore","mediumCount","lowCount","scanner","executeComprehensiveVulnerabilityScan","summary","standards","reports","all","standard","executeComplianceTest","averageScore","reduce","sum","overallScore","length","failedReports","filter","flatMap","gapAnalysis","Math","max","floor","random","auditResults","analysisResults","reviewResults","networkResults","threatResults","totalRiskScore","allFindings","severity","Set","add","Array","from","criticalTasks","generateCriticalRemediationTasks","highTasks","generateHighRemediationTasks","mediumTasks","generateMediumRemediationTasks","totalEffort","task","effortHours","effort","criticalTaskCount","t","highTaskCount","calculateTimeline","identifyDependencies","calculateRiskReduction","taskId","title","steps","critical","high","medium","low","min","totalEffortHours","days","ceil","maxReduction","sendCriticalAlert","createIncident","source","evidence","sendAlert","trendData","date","securityScore","vulnerabilityCount","thirtyDaysAgo","setDate","getDate","trend","getSecurityDashboard","recentExecutions","slice","latestExecution","lastUpdated","overallSecurityScore","riskLevel","determineRiskLevel","activeThreats","complianceStatus","owasp","iso27001","soc2","cryptoSecurity","getActiveExecutions","values","getExecutionHistory","cancelExecution","addTestSuite","removeTestSuite","removed","getTestSuites"],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\security-test-orchestrator.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * SECURITY TEST ORCHESTRATOR\r\n * =============================================================================\r\n * \r\n * Central orchestrator for all security testing activities in the AI crypto\r\n * trading agent. Coordinates penetration testing, vulnerability scanning,\r\n * compliance testing, and security monitoring to provide comprehensive\r\n * security validation.\r\n * \r\n * Features:\r\n * - Centralized security test coordination\r\n * - Parallel and sequential test execution\r\n * - Comprehensive security reporting\r\n * - Risk-based test prioritization\r\n * - Automated remediation workflows\r\n * - Integration with CI/CD pipelines\r\n * \r\n * Requirements: 25.7 - Comprehensive security testing orchestration\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport { Logger } from '../core/logging/logger';\r\nimport { PenetrationTestingService, VulnerabilityReport } from './penetration-testing-service';\r\nimport { VulnerabilityScannerService, VulnerabilityScanner } from './vulnerability-scanner-service';\r\nimport { ComplianceTestingService, ComplianceReport } from './compliance-testing';\r\nimport { AutomatedSecurityTestingSuite } from './automated-security-testing';\r\nimport { ThreatDetectionEngine } from './threat-detection-engine';\r\nimport { IncidentResponseService } from './incident-response-service';\r\nimport { NotificationService } from '../core/notifications/notification-service';\r\nimport * as crypto from 'crypto';\r\nimport * as fs from 'fs/promises';\r\nimport * as path from 'path';\r\n\r\nexport interface SecurityTestSuite {\r\n  suiteId: string;\r\n  name: string;\r\n  description: string;\r\n  testTypes: SecurityTestType[];\r\n  priority: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';\r\n  schedule?: string; // Cron expression\r\n  enabled: boolean;\r\n  parallelExecution: boolean;\r\n  maxExecutionTime: number; // milliseconds\r\n  retryCount: number;\r\n}\r\n\r\nexport enum SecurityTestType {\r\n  PENETRATION_TESTING = 'penetration_testing',\r\n  VULNERABILITY_SCANNING = 'vulnerability_scanning',\r\n  COMPLIANCE_TESTING = 'compliance_testing',\r\n  DEPENDENCY_AUDIT = 'dependency_audit',\r\n  CODE_ANALYSIS = 'code_analysis',\r\n  CONFIGURATION_REVIEW = 'configuration_review',\r\n  NETWORK_SECURITY = 'network_security',\r\n  THREAT_MODELING = 'threat_modeling'\r\n}\r\n\r\nexport interface SecurityTestExecution {\r\n  executionId: string;\r\n  suiteId: string;\r\n  startTime: Date;\r\n  endTime?: Date;\r\n  status: 'PENDING' | 'RUNNING' | 'COMPLETED' | 'FAILED' | 'CANCELLED';\r\n  testResults: SecurityTestResult[];\r\n  overallRiskScore: number;\r\n  complianceScore: number;\r\n  criticalFindings: number;\r\n  highFindings: number;\r\n  mediumFindings: number;\r\n  lowFindings: number;\r\n  recommendations: string[];\r\n  remediationPlan: RemediationPlan;\r\n}\r\n\r\nexport interface SecurityTestResult {\r\n  testType: SecurityTestType;\r\n  testId: string;\r\n  status: 'PASS' | 'FAIL' | 'WARNING' | 'ERROR';\r\n  executionTime: number;\r\n  findings: any[];\r\n  riskScore: number;\r\n  details: any;\r\n}\r\n\r\nexport interface RemediationPlan {\r\n  planId: string;\r\n  priority: 'IMMEDIATE' | 'HIGH' | 'MEDIUM' | 'LOW';\r\n  estimatedEffort: string;\r\n  estimatedCost: string;\r\n  timeline: string;\r\n  tasks: RemediationTask[];\r\n  dependencies: string[];\r\n  riskReduction: number;\r\n}\r\n\r\nexport interface RemediationTask {\r\n  taskId: string;\r\n  title: string;\r\n  description: string;\r\n  priority: 'CRITICAL' | 'HIGH' | 'MEDIUM' | 'LOW';\r\n  effort: 'LOW' | 'MEDIUM' | 'HIGH';\r\n  assignee?: string;\r\n  dueDate?: Date;\r\n  status: 'PENDING' | 'IN_PROGRESS' | 'COMPLETED' | 'BLOCKED';\r\n  dependencies: string[];\r\n  steps: string[];\r\n}\r\n\r\nexport interface SecurityDashboard {\r\n  lastUpdated: Date;\r\n  overallSecurityScore: number;\r\n  riskLevel: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';\r\n  activeThreats: number;\r\n  vulnerabilities: {\r\n    critical: number;\r\n    high: number;\r\n    medium: number;\r\n    low: number;\r\n  };\r\n  complianceStatus: {\r\n    owasp: number;\r\n    iso27001: number;\r\n    soc2: number;\r\n    cryptoSecurity: number;\r\n  };\r\n  recentExecutions: SecurityTestExecution[];\r\n  trendData: SecurityTrendData[];\r\n}\r\n\r\nexport interface SecurityTrendData {\r\n  date: Date;\r\n  securityScore: number;\r\n  vulnerabilityCount: number;\r\n  complianceScore: number;\r\n  riskScore: number;\r\n}\r\n\r\nexport class SecurityTestOrchestrator {\r\n  private logger: Logger;\r\n  private penetrationTesting: PenetrationTestingService;\r\n  private vulnerabilityScanner: VulnerabilityScannerService;\r\n  private complianceTesting: ComplianceTestingService;\r\n  private automatedTesting: AutomatedSecurityTestingSuite;\r\n  private threatDetection: ThreatDetectionEngine;\r\n  private incidentResponse: IncidentResponseService;\r\n  private notifications: NotificationService;\r\n\r\n  private testSuites: Map<string, SecurityTestSuite> = new Map();\r\n  private activeExecutions: Map<string, SecurityTestExecution> = new Map();\r\n  private executionHistory: SecurityTestExecution[] = [];\r\n  private securityTrends: SecurityTrendData[] = [];\r\n\r\n  constructor(\r\n    logger: Logger,\r\n    penetrationTesting: PenetrationTestingService,\r\n    vulnerabilityScanner: VulnerabilityScannerService,\r\n    complianceTesting: ComplianceTestingService,\r\n    automatedTesting: AutomatedSecurityTestingSuite,\r\n    threatDetection: ThreatDetectionEngine,\r\n    incidentResponse: IncidentResponseService,\r\n    notifications: NotificationService\r\n  ) {\r\n    this.logger = logger;\r\n    this.penetrationTesting = penetrationTesting;\r\n    this.vulnerabilityScanner = vulnerabilityScanner;\r\n    this.complianceTesting = complianceTesting;\r\n    this.automatedTesting = automatedTesting;\r\n    this.threatDetection = threatDetection;\r\n    this.incidentResponse = incidentResponse;\r\n    this.notifications = notifications;\r\n\r\n    this.initializeDefaultTestSuites();\r\n  }\r\n\r\n  /**\r\n   * Initialize default security test suites\r\n   */\r\n  private initializeDefaultTestSuites(): void {\r\n    // Daily security scan\r\n    this.testSuites.set('daily-security-scan', {\r\n      suiteId: 'daily-security-scan',\r\n      name: 'Daily Security Scan',\r\n      description: 'Comprehensive daily security testing including vulnerability scanning and compliance checks',\r\n      testTypes: [\r\n        SecurityTestType.VULNERABILITY_SCANNING,\r\n        SecurityTestType.DEPENDENCY_AUDIT,\r\n        SecurityTestType.CONFIGURATION_REVIEW\r\n      ],\r\n      priority: 'HIGH',\r\n      schedule: '0 2 * * *', // 2 AM daily\r\n      enabled: true,\r\n      parallelExecution: true,\r\n      maxExecutionTime: 1800000, // 30 minutes\r\n      retryCount: 2\r\n    });\r\n\r\n    // Weekly comprehensive security assessment\r\n    this.testSuites.set('weekly-comprehensive-scan', {\r\n      suiteId: 'weekly-comprehensive-scan',\r\n      name: 'Weekly Comprehensive Security Assessment',\r\n      description: 'Full security assessment including penetration testing and compliance validation',\r\n      testTypes: [\r\n        SecurityTestType.PENETRATION_TESTING,\r\n        SecurityTestType.VULNERABILITY_SCANNING,\r\n        SecurityTestType.COMPLIANCE_TESTING,\r\n        SecurityTestType.CODE_ANALYSIS,\r\n        SecurityTestType.NETWORK_SECURITY\r\n      ],\r\n      priority: 'CRITICAL',\r\n      schedule: '0 1 * * 0', // 1 AM every Sunday\r\n      enabled: true,\r\n      parallelExecution: false,\r\n      maxExecutionTime: 7200000, // 2 hours\r\n      retryCount: 1\r\n    });\r\n\r\n    // Pre-deployment security validation\r\n    this.testSuites.set('pre-deployment-validation', {\r\n      suiteId: 'pre-deployment-validation',\r\n      name: 'Pre-Deployment Security Validation',\r\n      description: 'Security validation before production deployment',\r\n      testTypes: [\r\n        SecurityTestType.PENETRATION_TESTING,\r\n        SecurityTestType.VULNERABILITY_SCANNING,\r\n        SecurityTestType.COMPLIANCE_TESTING,\r\n        SecurityTestType.CODE_ANALYSIS\r\n      ],\r\n      priority: 'CRITICAL',\r\n      enabled: true,\r\n      parallelExecution: true,\r\n      maxExecutionTime: 3600000, // 1 hour\r\n      retryCount: 0\r\n    });\r\n\r\n    // Incident response security check\r\n    this.testSuites.set('incident-response-check', {\r\n      suiteId: 'incident-response-check',\r\n      name: 'Incident Response Security Check',\r\n      description: 'Rapid security assessment triggered by security incidents',\r\n      testTypes: [\r\n        SecurityTestType.VULNERABILITY_SCANNING,\r\n        SecurityTestType.THREAT_MODELING,\r\n        SecurityTestType.NETWORK_SECURITY\r\n      ],\r\n      priority: 'CRITICAL',\r\n      enabled: true,\r\n      parallelExecution: true,\r\n      maxExecutionTime: 900000, // 15 minutes\r\n      retryCount: 0\r\n    });\r\n\r\n    this.logger.info('Default security test suites initialized', {\r\n      suiteCount: this.testSuites.size\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Execute security test suite\r\n   */\r\n  async executeSecurityTestSuite(suiteId: string): Promise<SecurityTestExecution> {\r\n    const suite = this.testSuites.get(suiteId);\r\n    if (!suite) {\r\n      throw new Error(`Security test suite not found: ${suiteId}`);\r\n    }\r\n\r\n    const executionId = `exec_${Date.now()}_${crypto.randomBytes(4).toString('hex')}`;\r\n    \r\n    const execution: SecurityTestExecution = {\r\n      executionId,\r\n      suiteId,\r\n      startTime: new Date(),\r\n      status: 'RUNNING',\r\n      testResults: [],\r\n      overallRiskScore: 0,\r\n      complianceScore: 0,\r\n      criticalFindings: 0,\r\n      highFindings: 0,\r\n      mediumFindings: 0,\r\n      lowFindings: 0,\r\n      recommendations: [],\r\n      remediationPlan: {\r\n        planId: `plan_${executionId}`,\r\n        priority: 'MEDIUM',\r\n        estimatedEffort: 'TBD',\r\n        estimatedCost: 'TBD',\r\n        timeline: 'TBD',\r\n        tasks: [],\r\n        dependencies: [],\r\n        riskReduction: 0\r\n      }\r\n    };\r\n\r\n    this.activeExecutions.set(executionId, execution);\r\n\r\n    this.logger.info('Starting security test suite execution', {\r\n      executionId,\r\n      suiteId,\r\n      testTypes: suite.testTypes\r\n    });\r\n\r\n    try {\r\n      // Execute tests based on suite configuration\r\n      if (suite.parallelExecution) {\r\n        await this.executeTestsInParallel(suite, execution);\r\n      } else {\r\n        await this.executeTestsSequentially(suite, execution);\r\n      }\r\n\r\n      // Calculate overall scores and findings\r\n      this.calculateOverallScores(execution);\r\n\r\n      // Generate recommendations and remediation plan\r\n      await this.generateRecommendations(execution);\r\n      await this.generateRemediationPlan(execution);\r\n\r\n      // Process results and trigger alerts if necessary\r\n      await this.processSecurityTestResults(execution);\r\n\r\n      execution.status = 'COMPLETED';\r\n      execution.endTime = new Date();\r\n\r\n      this.logger.info('Security test suite execution completed', {\r\n        executionId,\r\n        overallRiskScore: execution.overallRiskScore,\r\n        criticalFindings: execution.criticalFindings,\r\n        complianceScore: execution.complianceScore\r\n      });\r\n\r\n    } catch (error) {\r\n      execution.status = 'FAILED';\r\n      execution.endTime = new Date();\r\n      \r\n      this.logger.error('Security test suite execution failed', {\r\n        executionId,\r\n        error: error instanceof Error ? error.message : String(error)\r\n      });\r\n\r\n      // Send failure notification\r\n      await this.sendFailureNotification(execution, error);\r\n      \r\n      throw error;\r\n    } finally {\r\n      this.activeExecutions.delete(executionId);\r\n      this.executionHistory.push(execution);\r\n      \r\n      // Update security trends\r\n      this.updateSecurityTrends(execution);\r\n    }\r\n\r\n    return execution;\r\n  }\r\n\r\n  /**\r\n   * Execute tests in parallel\r\n   */\r\n  private async executeTestsInParallel(\r\n    suite: SecurityTestSuite, \r\n    execution: SecurityTestExecution\r\n  ): Promise<void> {\r\n    const testPromises = suite.testTypes.map(testType => \r\n      this.executeSecurityTest(testType, execution.executionId)\r\n    );\r\n\r\n    const results = await Promise.allSettled(testPromises);\r\n    \r\n    results.forEach((result, index) => {\r\n      if (result.status === 'fulfilled') {\r\n        execution.testResults.push(result.value);\r\n      } else {\r\n        this.logger.error('Security test failed', {\r\n          testType: suite.testTypes[index],\r\n          error: result.reason\r\n        });\r\n        \r\n        execution.testResults.push({\r\n          testType: suite.testTypes[index],\r\n          testId: `failed_${Date.now()}`,\r\n          status: 'ERROR',\r\n          executionTime: 0,\r\n          findings: [],\r\n          riskScore: 0,\r\n          details: { error: result.reason.message }\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Execute tests sequentially\r\n   */\r\n  private async executeTestsSequentially(\r\n    suite: SecurityTestSuite, \r\n    execution: SecurityTestExecution\r\n  ): Promise<void> {\r\n    for (const testType of suite.testTypes) {\r\n      try {\r\n        const result = await this.executeSecurityTest(testType, execution.executionId);\r\n        execution.testResults.push(result);\r\n      } catch (error) {\r\n        this.logger.error('Security test failed', {\r\n          testType,\r\n          error: error instanceof Error ? error.message : String(error)\r\n        });\r\n        \r\n        execution.testResults.push({\r\n          testType,\r\n          testId: `failed_${Date.now()}`,\r\n          status: 'ERROR',\r\n          executionTime: 0,\r\n          findings: [],\r\n          riskScore: 0,\r\n          details: { error: error instanceof Error ? error.message : String(error) }\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Execute individual security test\r\n   */\r\n  private async executeSecurityTest(\r\n    testType: SecurityTestType, \r\n    executionId: string\r\n  ): Promise<SecurityTestResult> {\r\n    const startTime = Date.now();\r\n    \r\n    this.logger.debug('Executing security test', { testType, executionId });\r\n\r\n    try {\r\n      switch (testType) {\r\n        case SecurityTestType.PENETRATION_TESTING:\r\n          return await this.executePenetrationTest(executionId);\r\n          \r\n        case SecurityTestType.VULNERABILITY_SCANNING:\r\n          return await this.executeVulnerabilityScanning(executionId);\r\n          \r\n        case SecurityTestType.COMPLIANCE_TESTING:\r\n          return await this.executeComplianceTesting(executionId);\r\n          \r\n        case SecurityTestType.DEPENDENCY_AUDIT:\r\n          return await this.executeDependencyAudit(executionId);\r\n          \r\n        case SecurityTestType.CODE_ANALYSIS:\r\n          return await this.executeCodeAnalysis(executionId);\r\n          \r\n        case SecurityTestType.CONFIGURATION_REVIEW:\r\n          return await this.executeConfigurationReview(executionId);\r\n          \r\n        case SecurityTestType.NETWORK_SECURITY:\r\n          return await this.executeNetworkSecurityTest(executionId);\r\n          \r\n        case SecurityTestType.THREAT_MODELING:\r\n          return await this.executeThreatModeling(executionId);\r\n          \r\n        default:\r\n          throw new Error(`Unknown security test type: ${testType}`);\r\n      }\r\n    } catch (error) {\r\n      return {\r\n        testType,\r\n        testId: `error_${Date.now()}`,\r\n        status: 'ERROR',\r\n        executionTime: Date.now() - startTime,\r\n        findings: [],\r\n        riskScore: 0,\r\n        details: { error: error instanceof Error ? error.message : String(error) }\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Execute penetration testing\r\n   */\r\n  private async executePenetrationTest(executionId: string): Promise<SecurityTestResult> {\r\n    const startTime = Date.now();\r\n    \r\n    const report = await this.penetrationTesting.executeSecurityTestSuite();\r\n    \r\n    return {\r\n      testType: SecurityTestType.PENETRATION_TESTING,\r\n      testId: report.scanId,\r\n      status: report.criticalCount > 0 ? 'FAIL' : report.highCount > 0 ? 'WARNING' : 'PASS',\r\n      executionTime: Date.now() - startTime,\r\n      findings: report.vulnerabilities,\r\n      riskScore: this.calculateRiskScore(report.criticalCount, report.highCount, report.mediumCount, report.lowCount),\r\n      details: report\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Execute vulnerability scanning\r\n   */\r\n  private async executeVulnerabilityScanning(executionId: string): Promise<SecurityTestResult> {\r\n    const startTime = Date.now();\r\n    \r\n    const scanner = await this.vulnerabilityScanner.executeComprehensiveVulnerabilityScan();\r\n    \r\n    return {\r\n      testType: SecurityTestType.VULNERABILITY_SCANNING,\r\n      testId: scanner.scanId,\r\n      status: scanner.summary.criticalCount > 0 ? 'FAIL' : \r\n             scanner.summary.highCount > 0 ? 'WARNING' : 'PASS',\r\n      executionTime: Date.now() - startTime,\r\n      findings: scanner.findings,\r\n      riskScore: scanner.summary.riskScore,\r\n      details: scanner\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Execute compliance testing\r\n   */\r\n  private async executeComplianceTesting(executionId: string): Promise<SecurityTestResult> {\r\n    const startTime = Date.now();\r\n    \r\n    // Test all compliance standards\r\n    const standards = ['OWASP_TOP_10', 'ISO_27001', 'SOC_2', 'CRYPTO_TRADING_SECURITY'];\r\n    const reports = await Promise.all(\r\n      standards.map(standard => this.complianceTesting.executeComplianceTest(standard))\r\n    );\r\n    \r\n    const averageScore = reports.reduce((sum, report) => sum + report.overallScore, 0) / reports.length;\r\n    const failedReports = reports.filter(report => report.status === 'NON_COMPLIANT').length;\r\n    \r\n    return {\r\n      testType: SecurityTestType.COMPLIANCE_TESTING,\r\n      testId: `compliance_${Date.now()}`,\r\n      status: failedReports > 0 ? 'FAIL' : averageScore < 80 ? 'WARNING' : 'PASS',\r\n      executionTime: Date.now() - startTime,\r\n      findings: reports.flatMap(report => report.gapAnalysis),\r\n      riskScore: Math.max(0, 100 - averageScore),\r\n      details: { reports, averageScore }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Execute dependency audit\r\n   */\r\n  private async executeDependencyAudit(executionId: string): Promise<SecurityTestResult> {\r\n    const startTime = Date.now();\r\n    \r\n    // This would integrate with npm audit or similar tools\r\n    // For now, we'll simulate the audit\r\n    const findings = [];\r\n    const riskScore = Math.floor(Math.random() * 30); // Simulate low to medium risk\r\n    \r\n    return {\r\n      testType: SecurityTestType.DEPENDENCY_AUDIT,\r\n      testId: `dep_audit_${Date.now()}`,\r\n      status: riskScore > 20 ? 'WARNING' : 'PASS',\r\n      executionTime: Date.now() - startTime,\r\n      findings,\r\n      riskScore,\r\n      details: { auditResults: 'Dependency audit completed' }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Execute code analysis\r\n   */\r\n  private async executeCodeAnalysis(executionId: string): Promise<SecurityTestResult> {\r\n    const startTime = Date.now();\r\n    \r\n    // This would integrate with static analysis tools\r\n    // For now, we'll simulate the analysis\r\n    const findings = [];\r\n    const riskScore = Math.floor(Math.random() * 25); // Simulate low risk\r\n    \r\n    return {\r\n      testType: SecurityTestType.CODE_ANALYSIS,\r\n      testId: `code_analysis_${Date.now()}`,\r\n      status: riskScore > 15 ? 'WARNING' : 'PASS',\r\n      executionTime: Date.now() - startTime,\r\n      findings,\r\n      riskScore,\r\n      details: { analysisResults: 'Code analysis completed' }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Execute configuration review\r\n   */\r\n  private async executeConfigurationReview(executionId: string): Promise<SecurityTestResult> {\r\n    const startTime = Date.now();\r\n    \r\n    // This would review system and application configurations\r\n    const findings = [];\r\n    const riskScore = Math.floor(Math.random() * 20); // Simulate low risk\r\n    \r\n    return {\r\n      testType: SecurityTestType.CONFIGURATION_REVIEW,\r\n      testId: `config_review_${Date.now()}`,\r\n      status: riskScore > 10 ? 'WARNING' : 'PASS',\r\n      executionTime: Date.now() - startTime,\r\n      findings,\r\n      riskScore,\r\n      details: { reviewResults: 'Configuration review completed' }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Execute network security test\r\n   */\r\n  private async executeNetworkSecurityTest(executionId: string): Promise<SecurityTestResult> {\r\n    const startTime = Date.now();\r\n    \r\n    // This would test network security configurations\r\n    const findings = [];\r\n    const riskScore = Math.floor(Math.random() * 35); // Simulate low to medium risk\r\n    \r\n    return {\r\n      testType: SecurityTestType.NETWORK_SECURITY,\r\n      testId: `network_test_${Date.now()}`,\r\n      status: riskScore > 25 ? 'WARNING' : 'PASS',\r\n      executionTime: Date.now() - startTime,\r\n      findings,\r\n      riskScore,\r\n      details: { networkResults: 'Network security test completed' }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Execute threat modeling\r\n   */\r\n  private async executeThreatModeling(executionId: string): Promise<SecurityTestResult> {\r\n    const startTime = Date.now();\r\n    \r\n    // This would perform threat modeling analysis\r\n    const findings = [];\r\n    const riskScore = Math.floor(Math.random() * 40); // Simulate medium risk\r\n    \r\n    return {\r\n      testType: SecurityTestType.THREAT_MODELING,\r\n      testId: `threat_model_${Date.now()}`,\r\n      status: riskScore > 30 ? 'WARNING' : 'PASS',\r\n      executionTime: Date.now() - startTime,\r\n      findings,\r\n      riskScore,\r\n      details: { threatResults: 'Threat modeling completed' }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculate overall scores and findings\r\n   */\r\n  private calculateOverallScores(execution: SecurityTestExecution): void {\r\n    const testResults = execution.testResults;\r\n    \r\n    // Calculate overall risk score (weighted average)\r\n    const totalRiskScore = testResults.reduce((sum, result) => sum + result.riskScore, 0);\r\n    execution.overallRiskScore = testResults.length > 0 ? totalRiskScore / testResults.length : 0;\r\n    \r\n    // Calculate compliance score (inverse of risk score)\r\n    execution.complianceScore = Math.max(0, 100 - execution.overallRiskScore);\r\n    \r\n    // Count findings by severity\r\n    const allFindings = testResults.flatMap(result => result.findings);\r\n    execution.criticalFindings = allFindings.filter(f => f.severity === 'CRITICAL').length;\r\n    execution.highFindings = allFindings.filter(f => f.severity === 'HIGH').length;\r\n    execution.mediumFindings = allFindings.filter(f => f.severity === 'MEDIUM').length;\r\n    execution.lowFindings = allFindings.filter(f => f.severity === 'LOW').length;\r\n  }\r\n\r\n  /**\r\n   * Generate recommendations based on test results\r\n   */\r\n  private async generateRecommendations(execution: SecurityTestExecution): Promise<void> {\r\n    const recommendations = new Set<string>();\r\n    \r\n    // Add recommendations based on test results\r\n    execution.testResults.forEach(result => {\r\n      if (result.status === 'FAIL' || result.status === 'WARNING') {\r\n        switch (result.testType) {\r\n          case SecurityTestType.PENETRATION_TESTING:\r\n            recommendations.add('Address critical penetration testing findings immediately');\r\n            recommendations.add('Implement additional security controls for high-risk areas');\r\n            break;\r\n          case SecurityTestType.VULNERABILITY_SCANNING:\r\n            recommendations.add('Update vulnerable dependencies to latest secure versions');\r\n            recommendations.add('Implement automated vulnerability scanning in CI/CD pipeline');\r\n            break;\r\n          case SecurityTestType.COMPLIANCE_TESTING:\r\n            recommendations.add('Address compliance gaps to meet regulatory requirements');\r\n            recommendations.add('Implement missing security controls identified in compliance testing');\r\n            break;\r\n          case SecurityTestType.DEPENDENCY_AUDIT:\r\n            recommendations.add('Review and update project dependencies regularly');\r\n            recommendations.add('Implement dependency vulnerability monitoring');\r\n            break;\r\n          case SecurityTestType.CODE_ANALYSIS:\r\n            recommendations.add('Fix code security issues identified in static analysis');\r\n            recommendations.add('Implement secure coding practices and training');\r\n            break;\r\n          case SecurityTestType.CONFIGURATION_REVIEW:\r\n            recommendations.add('Harden system and application configurations');\r\n            recommendations.add('Implement configuration management and monitoring');\r\n            break;\r\n          case SecurityTestType.NETWORK_SECURITY:\r\n            recommendations.add('Strengthen network security controls and monitoring');\r\n            recommendations.add('Implement network segmentation and access controls');\r\n            break;\r\n          case SecurityTestType.THREAT_MODELING:\r\n            recommendations.add('Address identified threats with appropriate countermeasures');\r\n            recommendations.add('Update threat model based on new findings');\r\n            break;\r\n        }\r\n      }\r\n    });\r\n    \r\n    // Add general recommendations based on overall risk score\r\n    if (execution.overallRiskScore > 70) {\r\n      recommendations.add('Immediate security review and remediation required');\r\n      recommendations.add('Consider engaging external security experts');\r\n    } else if (execution.overallRiskScore > 40) {\r\n      recommendations.add('Prioritize security improvements in next development cycle');\r\n      recommendations.add('Increase security testing frequency');\r\n    }\r\n    \r\n    execution.recommendations = Array.from(recommendations);\r\n  }\r\n\r\n  /**\r\n   * Generate remediation plan\r\n   */\r\n  private async generateRemediationPlan(execution: SecurityTestExecution): Promise<void> {\r\n    const tasks: RemediationTask[] = [];\r\n    \r\n    // Generate tasks based on critical and high findings\r\n    const criticalTasks = this.generateCriticalRemediationTasks(execution);\r\n    const highTasks = this.generateHighRemediationTasks(execution);\r\n    const mediumTasks = this.generateMediumRemediationTasks(execution);\r\n    \r\n    tasks.push(...criticalTasks, ...highTasks, ...mediumTasks);\r\n    \r\n    // Calculate overall plan metrics\r\n    const totalEffort = tasks.reduce((sum, task) => {\r\n      const effortHours = task.effort === 'HIGH' ? 8 : task.effort === 'MEDIUM' ? 4 : 2;\r\n      return sum + effortHours;\r\n    }, 0);\r\n    \r\n    const criticalTaskCount = tasks.filter(t => t.priority === 'CRITICAL').length;\r\n    const highTaskCount = tasks.filter(t => t.priority === 'HIGH').length;\r\n    \r\n    execution.remediationPlan = {\r\n      planId: `plan_${execution.executionId}`,\r\n      priority: criticalTaskCount > 0 ? 'IMMEDIATE' : highTaskCount > 0 ? 'HIGH' : 'MEDIUM',\r\n      estimatedEffort: `${totalEffort} hours`,\r\n      estimatedCost: `$${totalEffort * 150}`, // Assuming $150/hour\r\n      timeline: this.calculateTimeline(totalEffort),\r\n      tasks,\r\n      dependencies: this.identifyDependencies(tasks),\r\n      riskReduction: this.calculateRiskReduction(execution)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generate critical remediation tasks\r\n   */\r\n  private generateCriticalRemediationTasks(execution: SecurityTestExecution): RemediationTask[] {\r\n    const tasks: RemediationTask[] = [];\r\n    \r\n    if (execution.criticalFindings > 0) {\r\n      tasks.push({\r\n        taskId: `critical_${Date.now()}`,\r\n        title: 'Address Critical Security Vulnerabilities',\r\n        description: `Fix ${execution.criticalFindings} critical security vulnerabilities`,\r\n        priority: 'CRITICAL',\r\n        effort: 'HIGH',\r\n        status: 'PENDING',\r\n        dependencies: [],\r\n        steps: [\r\n          'Review all critical findings',\r\n          'Prioritize by exploitability and impact',\r\n          'Implement fixes for each vulnerability',\r\n          'Test fixes in staging environment',\r\n          'Deploy fixes to production',\r\n          'Verify fixes with security testing'\r\n        ]\r\n      });\r\n    }\r\n    \r\n    return tasks;\r\n  }\r\n\r\n  /**\r\n   * Generate high priority remediation tasks\r\n   */\r\n  private generateHighRemediationTasks(execution: SecurityTestExecution): RemediationTask[] {\r\n    const tasks: RemediationTask[] = [];\r\n    \r\n    if (execution.highFindings > 0) {\r\n      tasks.push({\r\n        taskId: `high_${Date.now()}`,\r\n        title: 'Address High Priority Security Issues',\r\n        description: `Fix ${execution.highFindings} high priority security issues`,\r\n        priority: 'HIGH',\r\n        effort: 'MEDIUM',\r\n        status: 'PENDING',\r\n        dependencies: [],\r\n        steps: [\r\n          'Review high priority findings',\r\n          'Plan remediation approach',\r\n          'Implement security improvements',\r\n          'Test changes thoroughly',\r\n          'Deploy to production'\r\n        ]\r\n      });\r\n    }\r\n    \r\n    return tasks;\r\n  }\r\n\r\n  /**\r\n   * Generate medium priority remediation tasks\r\n   */\r\n  private generateMediumRemediationTasks(execution: SecurityTestExecution): RemediationTask[] {\r\n    const tasks: RemediationTask[] = [];\r\n    \r\n    if (execution.mediumFindings > 0) {\r\n      tasks.push({\r\n        taskId: `medium_${Date.now()}`,\r\n        title: 'Address Medium Priority Security Improvements',\r\n        description: `Implement ${execution.mediumFindings} medium priority security improvements`,\r\n        priority: 'MEDIUM',\r\n        effort: 'LOW',\r\n        status: 'PENDING',\r\n        dependencies: [],\r\n        steps: [\r\n          'Review medium priority findings',\r\n          'Schedule improvements in next sprint',\r\n          'Implement security enhancements',\r\n          'Validate improvements'\r\n        ]\r\n      });\r\n    }\r\n    \r\n    return tasks;\r\n  }\r\n\r\n  /**\r\n   * Helper methods\r\n   */\r\n  private calculateRiskScore(critical: number, high: number, medium: number, low: number): number {\r\n    return Math.min(100, (critical * 25) + (high * 10) + (medium * 5) + (low * 1));\r\n  }\r\n\r\n  private calculateTimeline(totalEffortHours: number): string {\r\n    const days = Math.ceil(totalEffortHours / 8);\r\n    if (days <= 1) return '1 day';\r\n    if (days <= 7) return `${days} days`;\r\n    if (days <= 30) return `${Math.ceil(days / 7)} weeks`;\r\n    return `${Math.ceil(days / 30)} months`;\r\n  }\r\n\r\n  private identifyDependencies(tasks: RemediationTask[]): string[] {\r\n    // Simple dependency identification - in practice, this would be more sophisticated\r\n    return tasks.filter(t => t.priority === 'CRITICAL').map(t => t.taskId);\r\n  }\r\n\r\n  private calculateRiskReduction(execution: SecurityTestExecution): number {\r\n    // Estimate risk reduction based on findings severity\r\n    const maxReduction = execution.criticalFindings * 25 + execution.highFindings * 10 + \r\n                        execution.mediumFindings * 5 + execution.lowFindings * 1;\r\n    return Math.min(100, maxReduction);\r\n  }\r\n\r\n  private async processSecurityTestResults(execution: SecurityTestExecution): Promise<void> {\r\n    // Send alerts for critical findings\r\n    if (execution.criticalFindings > 0) {\r\n      await this.notifications.sendCriticalAlert({\r\n        title: '🚨 Critical Security Vulnerabilities Detected',\r\n        message: `Security testing found ${execution.criticalFindings} critical vulnerabilities requiring immediate attention.`,\r\n        details: {\r\n          executionId: execution.executionId,\r\n          criticalFindings: execution.criticalFindings,\r\n          overallRiskScore: execution.overallRiskScore\r\n        },\r\n        priority: 'CRITICAL'\r\n      });\r\n    }\r\n    \r\n    // Create incident for high-risk findings\r\n    if (execution.overallRiskScore > 70) {\r\n      await this.incidentResponse.createIncident({\r\n        type: 'HIGH_RISK_SECURITY_FINDINGS',\r\n        severity: 'HIGH',\r\n        description: `Security testing revealed high-risk findings (risk score: ${execution.overallRiskScore})`,\r\n        source: 'Security Test Orchestrator',\r\n        evidence: execution.testResults\r\n      });\r\n    }\r\n  }\r\n\r\n  private async sendFailureNotification(execution: SecurityTestExecution, error: any): Promise<void> {\r\n    await this.notifications.sendAlert({\r\n      title: '❌ Security Test Suite Failed',\r\n      message: `Security test suite ${execution.suiteId} failed: ${error.message}`,\r\n      details: {\r\n        executionId: execution.executionId,\r\n        suiteId: execution.suiteId,\r\n        error: error.message\r\n      },\r\n      priority: 'HIGH'\r\n    });\r\n  }\r\n\r\n  private updateSecurityTrends(execution: SecurityTestExecution): void {\r\n    const trendData: SecurityTrendData = {\r\n      date: new Date(),\r\n      securityScore: execution.complianceScore,\r\n      vulnerabilityCount: execution.criticalFindings + execution.highFindings + \r\n                         execution.mediumFindings + execution.lowFindings,\r\n      complianceScore: execution.complianceScore,\r\n      riskScore: execution.overallRiskScore\r\n    };\r\n    \r\n    this.securityTrends.push(trendData);\r\n    \r\n    // Keep only last 30 days of trend data\r\n    const thirtyDaysAgo = new Date();\r\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\r\n    this.securityTrends = this.securityTrends.filter(trend => trend.date >= thirtyDaysAgo);\r\n  }\r\n\r\n  /**\r\n   * Public API methods\r\n   */\r\n\r\n  /**\r\n   * Get security dashboard data\r\n   */\r\n  getSecurityDashboard(): SecurityDashboard {\r\n    const recentExecutions = this.executionHistory.slice(-10);\r\n    const latestExecution = recentExecutions[recentExecutions.length - 1];\r\n    \r\n    return {\r\n      lastUpdated: new Date(),\r\n      overallSecurityScore: latestExecution?.complianceScore || 0,\r\n      riskLevel: this.determineRiskLevel(latestExecution?.overallRiskScore || 0),\r\n      activeThreats: this.activeExecutions.size,\r\n      vulnerabilities: {\r\n        critical: latestExecution?.criticalFindings || 0,\r\n        high: latestExecution?.highFindings || 0,\r\n        medium: latestExecution?.mediumFindings || 0,\r\n        low: latestExecution?.lowFindings || 0\r\n      },\r\n      complianceStatus: {\r\n        owasp: 85, // These would be calculated from actual compliance tests\r\n        iso27001: 80,\r\n        soc2: 75,\r\n        cryptoSecurity: 90\r\n      },\r\n      recentExecutions,\r\n      trendData: this.securityTrends\r\n    };\r\n  }\r\n\r\n  private determineRiskLevel(riskScore: number): 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL' {\r\n    if (riskScore >= 80) return 'CRITICAL';\r\n    if (riskScore >= 60) return 'HIGH';\r\n    if (riskScore >= 30) return 'MEDIUM';\r\n    return 'LOW';\r\n  }\r\n\r\n  /**\r\n   * Get active executions\r\n   */\r\n  getActiveExecutions(): SecurityTestExecution[] {\r\n    return Array.from(this.activeExecutions.values());\r\n  }\r\n\r\n  /**\r\n   * Get execution history\r\n   */\r\n  getExecutionHistory(): SecurityTestExecution[] {\r\n    return this.executionHistory;\r\n  }\r\n\r\n  /**\r\n   * Cancel active execution\r\n   */\r\n  async cancelExecution(executionId: string): Promise<boolean> {\r\n    const execution = this.activeExecutions.get(executionId);\r\n    \r\n    if (execution && execution.status === 'RUNNING') {\r\n      execution.status = 'CANCELLED';\r\n      execution.endTime = new Date();\r\n      this.activeExecutions.delete(executionId);\r\n      this.executionHistory.push(execution);\r\n      \r\n      this.logger.info('Security test execution cancelled', { executionId });\r\n      return true;\r\n    }\r\n    \r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Add custom test suite\r\n   */\r\n  addTestSuite(suite: SecurityTestSuite): void {\r\n    this.testSuites.set(suite.suiteId, suite);\r\n    this.logger.info('Custom security test suite added', { suiteId: suite.suiteId });\r\n  }\r\n\r\n  /**\r\n   * Remove test suite\r\n   */\r\n  removeTestSuite(suiteId: string): boolean {\r\n    const removed = this.testSuites.delete(suiteId);\r\n    if (removed) {\r\n      this.logger.info('Security test suite removed', { suiteId });\r\n    }\r\n    return removed;\r\n  }\r\n\r\n  /**\r\n   * Get available test suites\r\n   */\r\n  getTestSuites(): SecurityTestSuite[] {\r\n    return Array.from(this.testSuites.values());\r\n  }\r\n}"],"mappings":"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","ignoreList":[]}