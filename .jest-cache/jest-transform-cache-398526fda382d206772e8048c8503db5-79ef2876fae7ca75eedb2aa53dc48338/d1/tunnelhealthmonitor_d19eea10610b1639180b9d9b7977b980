601b2ec536d9db2ee6707cc56b016c15
"use strict";

/* istanbul ignore next */
function cov_2qo9c4urn3() {
  var path = "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\tunnel-health-monitor.ts";
  var hash = "e974c0ca94dc649f360caf6c15006a916fb369c2";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\tunnel-health-monitor.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 37
        }
      },
      "2": {
        start: {
          line: 4,
          column: 17
        },
        end: {
          line: 4,
          column: 34
        }
      },
      "3": {
        start: {
          line: 5,
          column: 29
        },
        end: {
          line: 5,
          column: 60
        }
      },
      "4": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 16
        }
      },
      "5": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 29
        }
      },
      "6": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 43
        }
      },
      "7": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 41
        }
      },
      "8": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 39
        }
      },
      "9": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 44
        }
      },
      "10": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 45
        }
      },
      "11": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 34
        }
      },
      "12": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 38,
          column: 10
        }
      },
      "13": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 75
        }
      },
      "14": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 48,
          column: 9
        }
      },
      "15": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 46,
          column: 69
        }
      },
      "16": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 47,
          column: 19
        }
      },
      "17": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 33
        }
      },
      "18": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 50,
          column: 62
        }
      },
      "19": {
        start: {
          line: 52,
          column: 28
        },
        end: {
          line: 52,
          column: 66
        }
      },
      "20": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 55,
          column: 9
        }
      },
      "21": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 54,
          column: 58
        }
      },
      "22": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 59,
          column: 11
        }
      },
      "23": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 58,
          column: 58
        }
      },
      "24": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 63,
          column: 11
        }
      },
      "25": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 62,
          column: 57
        }
      },
      "26": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 64,
          column: 39
        }
      },
      "27": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 73,
          column: 9
        }
      },
      "28": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 71,
          column: 65
        }
      },
      "29": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 72,
          column: 19
        }
      },
      "30": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 74,
          column: 34
        }
      },
      "31": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 75,
          column: 62
        }
      },
      "32": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 80,
          column: 9
        }
      },
      "33": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 78,
          column: 36
        }
      },
      "34": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 79,
          column: 58
        }
      },
      "35": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 81,
          column: 39
        }
      },
      "36": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 92,
          column: 9
        }
      },
      "37": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 90,
          column: 80
        }
      },
      "38": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 19
        }
      },
      "39": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 93,
          column: 87
        }
      },
      "40": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 95,
          column: 51
        }
      },
      "41": {
        start: {
          line: 97,
          column: 25
        },
        end: {
          line: 104,
          column: 37
        }
      },
      "42": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 103,
          column: 13
        }
      },
      "43": {
        start: {
          line: 99,
          column: 16
        },
        end: {
          line: 99,
          column: 60
        }
      },
      "44": {
        start: {
          line: 102,
          column: 16
        },
        end: {
          line: 102,
          column: 95
        }
      },
      "45": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 105,
          column: 61
        }
      },
      "46": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 107,
          column: 70
        }
      },
      "47": {
        start: {
          line: 107,
          column: 25
        },
        end: {
          line: 107,
          column: 62
        }
      },
      "48": {
        start: {
          line: 115,
          column: 25
        },
        end: {
          line: 115,
          column: 67
        }
      },
      "49": {
        start: {
          line: 116,
          column: 8
        },
        end: {
          line: 120,
          column: 9
        }
      },
      "50": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 117,
          column: 36
        }
      },
      "51": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 118,
          column: 58
        }
      },
      "52": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 119,
          column: 90
        }
      },
      "53": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 129,
          column: 52
        }
      },
      "54": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 137,
          column: 43
        }
      },
      "55": {
        start: {
          line: 147,
          column: 24
        },
        end: {
          line: 147,
          column: 71
        }
      },
      "56": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 148,
          column: 60
        }
      },
      "57": {
        start: {
          line: 156,
          column: 27
        },
        end: {
          line: 156,
          column: 66
        }
      },
      "58": {
        start: {
          line: 157,
          column: 33
        },
        end: {
          line: 157,
          column: 50
        }
      },
      "59": {
        start: {
          line: 158,
          column: 35
        },
        end: {
          line: 158,
          column: 77
        }
      },
      "60": {
        start: {
          line: 158,
          column: 58
        },
        end: {
          line: 158,
          column: 69
        }
      },
      "61": {
        start: {
          line: 159,
          column: 37
        },
        end: {
          line: 159,
          column: 74
        }
      },
      "62": {
        start: {
          line: 160,
          column: 35
        },
        end: {
          line: 162,
          column: 15
        }
      },
      "63": {
        start: {
          line: 161,
          column: 44
        },
        end: {
          line: 161,
          column: 63
        }
      },
      "64": {
        start: {
          line: 163,
          column: 31
        },
        end: {
          line: 163,
          column: 125
        }
      },
      "65": {
        start: {
          line: 163,
          column: 61
        },
        end: {
          line: 163,
          column: 121
        }
      },
      "66": {
        start: {
          line: 163,
          column: 88
        },
        end: {
          line: 163,
          column: 113
        }
      },
      "67": {
        start: {
          line: 164,
          column: 34
        },
        end: {
          line: 164,
          column: 89
        }
      },
      "68": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 172,
          column: 10
        }
      },
      "69": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 188,
          column: 9
        }
      },
      "70": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 182,
          column: 56
        }
      },
      "71": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 183,
          column: 63
        }
      },
      "72": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 186,
          column: 98
        }
      },
      "73": {
        start: {
          line: 187,
          column: 12
        },
        end: {
          line: 187,
          column: 24
        }
      },
      "74": {
        start: {
          line: 196,
          column: 24
        },
        end: {
          line: 207,
          column: 9
        }
      },
      "75": {
        start: {
          line: 208,
          column: 8
        },
        end: {
          line: 208,
          column: 54
        }
      },
      "76": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 209,
          column: 54
        }
      },
      "77": {
        start: {
          line: 217,
          column: 27
        },
        end: {
          line: 217,
          column: 73
        }
      },
      "78": {
        start: {
          line: 218,
          column: 8
        },
        end: {
          line: 221,
          column: 9
        }
      },
      "79": {
        start: {
          line: 219,
          column: 12
        },
        end: {
          line: 219,
          column: 87
        }
      },
      "80": {
        start: {
          line: 220,
          column: 12
        },
        end: {
          line: 220,
          column: 19
        }
      },
      "81": {
        start: {
          line: 222,
          column: 24
        },
        end: {
          line: 222,
          column: 60
        }
      },
      "82": {
        start: {
          line: 223,
          column: 8
        },
        end: {
          line: 226,
          column: 9
        }
      },
      "83": {
        start: {
          line: 224,
          column: 12
        },
        end: {
          line: 224,
          column: 89
        }
      },
      "84": {
        start: {
          line: 225,
          column: 12
        },
        end: {
          line: 225,
          column: 19
        }
      },
      "85": {
        start: {
          line: 227,
          column: 8
        },
        end: {
          line: 291,
          column: 9
        }
      },
      "86": {
        start: {
          line: 229,
          column: 12
        },
        end: {
          line: 229,
          column: 49
        }
      },
      "87": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 234,
          column: 13
        }
      },
      "88": {
        start: {
          line: 232,
          column: 16
        },
        end: {
          line: 232,
          column: 91
        }
      },
      "89": {
        start: {
          line: 233,
          column: 16
        },
        end: {
          line: 233,
          column: 23
        }
      },
      "90": {
        start: {
          line: 236,
          column: 28
        },
        end: {
          line: 236,
          column: 65
        }
      },
      "91": {
        start: {
          line: 237,
          column: 12
        },
        end: {
          line: 237,
          column: 38
        }
      },
      "92": {
        start: {
          line: 239,
          column: 31
        },
        end: {
          line: 239,
          column: 71
        }
      },
      "93": {
        start: {
          line: 240,
          column: 12
        },
        end: {
          line: 240,
          column: 44
        }
      },
      "94": {
        start: {
          line: 242,
          column: 31
        },
        end: {
          line: 242,
          column: 71
        }
      },
      "95": {
        start: {
          line: 243,
          column: 12
        },
        end: {
          line: 243,
          column: 44
        }
      },
      "96": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 247,
          column: 13
        }
      },
      "97": {
        start: {
          line: 246,
          column: 16
        },
        end: {
          line: 246,
          column: 79
        }
      },
      "98": {
        start: {
          line: 249,
          column: 27
        },
        end: {
          line: 249,
          column: 60
        }
      },
      "99": {
        start: {
          line: 250,
          column: 12
        },
        end: {
          line: 250,
          column: 36
        }
      },
      "100": {
        start: {
          line: 252,
          column: 12
        },
        end: {
          line: 252,
          column: 69
        }
      },
      "101": {
        start: {
          line: 254,
          column: 31
        },
        end: {
          line: 254,
          column: 48
        }
      },
      "102": {
        start: {
          line: 255,
          column: 12
        },
        end: {
          line: 255,
          column: 68
        }
      },
      "103": {
        start: {
          line: 257,
          column: 12
        },
        end: {
          line: 272,
          column: 13
        }
      },
      "104": {
        start: {
          line: 258,
          column: 16
        },
        end: {
          line: 258,
          column: 48
        }
      },
      "105": {
        start: {
          line: 259,
          column: 16
        },
        end: {
          line: 262,
          column: 17
        }
      },
      "106": {
        start: {
          line: 260,
          column: 20
        },
        end: {
          line: 260,
          column: 84
        }
      },
      "107": {
        start: {
          line: 261,
          column: 20
        },
        end: {
          line: 261,
          column: 72
        }
      },
      "108": {
        start: {
          line: 265,
          column: 16
        },
        end: {
          line: 265,
          column: 46
        }
      },
      "109": {
        start: {
          line: 266,
          column: 16
        },
        end: {
          line: 271,
          column: 17
        }
      },
      "110": {
        start: {
          line: 267,
          column: 20
        },
        end: {
          line: 269,
          column: 23
        }
      },
      "111": {
        start: {
          line: 268,
          column: 48
        },
        end: {
          line: 268,
          column: 57
        }
      },
      "112": {
        start: {
          line: 270,
          column: 20
        },
        end: {
          line: 270,
          column: 74
        }
      },
      "113": {
        start: {
          line: 274,
          column: 12
        },
        end: {
          line: 284,
          column: 13
        }
      },
      "114": {
        start: {
          line: 275,
          column: 16
        },
        end: {
          line: 283,
          column: 19
        }
      },
      "115": {
        start: {
          line: 286,
          column: 12
        },
        end: {
          line: 286,
          column: 67
        }
      },
      "116": {
        start: {
          line: 289,
          column: 12
        },
        end: {
          line: 289,
          column: 91
        }
      },
      "117": {
        start: {
          line: 290,
          column: 12
        },
        end: {
          line: 290,
          column: 131
        }
      },
      "118": {
        start: {
          line: 300,
          column: 26
        },
        end: {
          line: 300,
          column: 36
        }
      },
      "119": {
        start: {
          line: 301,
          column: 8
        },
        end: {
          line: 325,
          column: 9
        }
      },
      "120": {
        start: {
          line: 303,
          column: 24
        },
        end: {
          line: 303,
          column: 43
        }
      },
      "121": {
        start: {
          line: 304,
          column: 12
        },
        end: {
          line: 320,
          column: 15
        }
      },
      "122": {
        start: {
          line: 305,
          column: 31
        },
        end: {
          line: 305,
          column: 47
        }
      },
      "123": {
        start: {
          line: 306,
          column: 32
        },
        end: {
          line: 309,
          column: 50
        }
      },
      "124": {
        start: {
          line: 307,
          column: 20
        },
        end: {
          line: 307,
          column: 37
        }
      },
      "125": {
        start: {
          line: 308,
          column: 20
        },
        end: {
          line: 308,
          column: 69
        }
      },
      "126": {
        start: {
          line: 310,
          column: 16
        },
        end: {
          line: 315,
          column: 19
        }
      },
      "127": {
        start: {
          line: 311,
          column: 36
        },
        end: {
          line: 311,
          column: 58
        }
      },
      "128": {
        start: {
          line: 312,
          column: 20
        },
        end: {
          line: 312,
          column: 42
        }
      },
      "129": {
        start: {
          line: 313,
          column: 20
        },
        end: {
          line: 313,
          column: 37
        }
      },
      "130": {
        start: {
          line: 314,
          column: 20
        },
        end: {
          line: 314,
          column: 37
        }
      },
      "131": {
        start: {
          line: 316,
          column: 16
        },
        end: {
          line: 319,
          column: 19
        }
      },
      "132": {
        start: {
          line: 317,
          column: 20
        },
        end: {
          line: 317,
          column: 42
        }
      },
      "133": {
        start: {
          line: 318,
          column: 20
        },
        end: {
          line: 318,
          column: 34
        }
      },
      "134": {
        start: {
          line: 323,
          column: 12
        },
        end: {
          line: 323,
          column: 88
        }
      },
      "135": {
        start: {
          line: 324,
          column: 12
        },
        end: {
          line: 324,
          column: 24
        }
      },
      "136": {
        start: {
          line: 334,
          column: 8
        },
        end: {
          line: 366,
          column: 9
        }
      },
      "137": {
        start: {
          line: 336,
          column: 24
        },
        end: {
          line: 336,
          column: 43
        }
      },
      "138": {
        start: {
          line: 337,
          column: 29
        },
        end: {
          line: 337,
          column: 52
        }
      },
      "139": {
        start: {
          line: 338,
          column: 30
        },
        end: {
          line: 338,
          column: 40
        }
      },
      "140": {
        start: {
          line: 339,
          column: 12
        },
        end: {
          line: 361,
          column: 15
        }
      },
      "141": {
        start: {
          line: 340,
          column: 31
        },
        end: {
          line: 340,
          column: 47
        }
      },
      "142": {
        start: {
          line: 341,
          column: 32
        },
        end: {
          line: 344,
          column: 50
        }
      },
      "143": {
        start: {
          line: 342,
          column: 20
        },
        end: {
          line: 342,
          column: 37
        }
      },
      "144": {
        start: {
          line: 343,
          column: 20
        },
        end: {
          line: 343,
          column: 72
        }
      },
      "145": {
        start: {
          line: 345,
          column: 36
        },
        end: {
          line: 345,
          column: 37
        }
      },
      "146": {
        start: {
          line: 346,
          column: 16
        },
        end: {
          line: 348,
          column: 19
        }
      },
      "147": {
        start: {
          line: 347,
          column: 20
        },
        end: {
          line: 347,
          column: 43
        }
      },
      "148": {
        start: {
          line: 349,
          column: 16
        },
        end: {
          line: 356,
          column: 19
        }
      },
      "149": {
        start: {
          line: 350,
          column: 20
        },
        end: {
          line: 350,
          column: 49
        }
      },
      "150": {
        start: {
          line: 351,
          column: 37
        },
        end: {
          line: 351,
          column: 68
        }
      },
      "151": {
        start: {
          line: 352,
          column: 39
        },
        end: {
          line: 352,
          column: 63
        }
      },
      "152": {
        start: {
          line: 353,
          column: 20
        },
        end: {
          line: 353,
          column: 42
        }
      },
      "153": {
        start: {
          line: 354,
          column: 20
        },
        end: {
          line: 354,
          column: 37
        }
      },
      "154": {
        start: {
          line: 355,
          column: 20
        },
        end: {
          line: 355,
          column: 40
        }
      },
      "155": {
        start: {
          line: 357,
          column: 16
        },
        end: {
          line: 360,
          column: 19
        }
      },
      "156": {
        start: {
          line: 358,
          column: 20
        },
        end: {
          line: 358,
          column: 42
        }
      },
      "157": {
        start: {
          line: 359,
          column: 20
        },
        end: {
          line: 359,
          column: 34
        }
      },
      "158": {
        start: {
          line: 364,
          column: 12
        },
        end: {
          line: 364,
          column: 91
        }
      },
      "159": {
        start: {
          line: 365,
          column: 12
        },
        end: {
          line: 365,
          column: 21
        }
      },
      "160": {
        start: {
          line: 375,
          column: 8
        },
        end: {
          line: 410,
          column: 9
        }
      },
      "161": {
        start: {
          line: 377,
          column: 24
        },
        end: {
          line: 377,
          column: 43
        }
      },
      "162": {
        start: {
          line: 378,
          column: 32
        },
        end: {
          line: 378,
          column: 34
        }
      },
      "163": {
        start: {
          line: 379,
          column: 34
        },
        end: {
          line: 379,
          column: 35
        }
      },
      "164": {
        start: {
          line: 380,
          column: 12
        },
        end: {
          line: 403,
          column: 13
        }
      },
      "165": {
        start: {
          line: 380,
          column: 25
        },
        end: {
          line: 380,
          column: 26
        }
      },
      "166": {
        start: {
          line: 381,
          column: 16
        },
        end: {
          line: 402,
          column: 17
        }
      },
      "167": {
        start: {
          line: 382,
          column: 20
        },
        end: {
          line: 398,
          column: 23
        }
      },
      "168": {
        start: {
          line: 383,
          column: 39
        },
        end: {
          line: 383,
          column: 55
        }
      },
      "169": {
        start: {
          line: 384,
          column: 40
        },
        end: {
          line: 387,
          column: 32
        }
      },
      "170": {
        start: {
          line: 385,
          column: 28
        },
        end: {
          line: 385,
          column: 45
        }
      },
      "171": {
        start: {
          line: 386,
          column: 28
        },
        end: {
          line: 386,
          column: 38
        }
      },
      "172": {
        start: {
          line: 388,
          column: 24
        },
        end: {
          line: 393,
          column: 27
        }
      },
      "173": {
        start: {
          line: 389,
          column: 28
        },
        end: {
          line: 389,
          column: 46
        }
      },
      "174": {
        start: {
          line: 390,
          column: 28
        },
        end: {
          line: 390,
          column: 50
        }
      },
      "175": {
        start: {
          line: 391,
          column: 28
        },
        end: {
          line: 391,
          column: 45
        }
      },
      "176": {
        start: {
          line: 392,
          column: 28
        },
        end: {
          line: 392,
          column: 38
        }
      },
      "177": {
        start: {
          line: 394,
          column: 24
        },
        end: {
          line: 397,
          column: 27
        }
      },
      "178": {
        start: {
          line: 395,
          column: 28
        },
        end: {
          line: 395,
          column: 50
        }
      },
      "179": {
        start: {
          line: 396,
          column: 28
        },
        end: {
          line: 396,
          column: 38
        }
      },
      "180": {
        start: {
          line: 404,
          column: 31
        },
        end: {
          line: 404,
          column: 84
        }
      },
      "181": {
        start: {
          line: 405,
          column: 12
        },
        end: {
          line: 405,
          column: 58
        }
      },
      "182": {
        start: {
          line: 408,
          column: 12
        },
        end: {
          line: 408,
          column: 92
        }
      },
      "183": {
        start: {
          line: 409,
          column: 12
        },
        end: {
          line: 409,
          column: 23
        }
      },
      "184": {
        start: {
          line: 419,
          column: 23
        },
        end: {
          line: 419,
          column: 25
        }
      },
      "185": {
        start: {
          line: 420,
          column: 20
        },
        end: {
          line: 420,
          column: 30
        }
      },
      "186": {
        start: {
          line: 422,
          column: 8
        },
        end: {
          line: 429,
          column: 9
        }
      },
      "187": {
        start: {
          line: 423,
          column: 12
        },
        end: {
          line: 428,
          column: 15
        }
      },
      "188": {
        start: {
          line: 431,
          column: 8
        },
        end: {
          line: 438,
          column: 9
        }
      },
      "189": {
        start: {
          line: 432,
          column: 12
        },
        end: {
          line: 437,
          column: 15
        }
      },
      "190": {
        start: {
          line: 440,
          column: 8
        },
        end: {
          line: 447,
          column: 9
        }
      },
      "191": {
        start: {
          line: 441,
          column: 12
        },
        end: {
          line: 446,
          column: 15
        }
      },
      "192": {
        start: {
          line: 449,
          column: 8
        },
        end: {
          line: 456,
          column: 9
        }
      },
      "193": {
        start: {
          line: 450,
          column: 12
        },
        end: {
          line: 455,
          column: 15
        }
      },
      "194": {
        start: {
          line: 457,
          column: 8
        },
        end: {
          line: 457,
          column: 22
        }
      },
      "195": {
        start: {
          line: 466,
          column: 20
        },
        end: {
          line: 466,
          column: 23
        }
      },
      "196": {
        start: {
          line: 468,
          column: 8
        },
        end: {
          line: 471,
          column: 9
        }
      },
      "197": {
        start: {
          line: 469,
          column: 35
        },
        end: {
          line: 469,
          column: 100
        }
      },
      "198": {
        start: {
          line: 470,
          column: 12
        },
        end: {
          line: 470,
          column: 36
        }
      },
      "199": {
        start: {
          line: 473,
          column: 8
        },
        end: {
          line: 476,
          column: 9
        }
      },
      "200": {
        start: {
          line: 474,
          column: 38
        },
        end: {
          line: 474,
          column: 74
        }
      },
      "201": {
        start: {
          line: 475,
          column: 12
        },
        end: {
          line: 475,
          column: 39
        }
      },
      "202": {
        start: {
          line: 478,
          column: 8
        },
        end: {
          line: 481,
          column: 9
        }
      },
      "203": {
        start: {
          line: 479,
          column: 38
        },
        end: {
          line: 479,
          column: 109
        }
      },
      "204": {
        start: {
          line: 480,
          column: 12
        },
        end: {
          line: 480,
          column: 39
        }
      },
      "205": {
        start: {
          line: 483,
          column: 8
        },
        end: {
          line: 483,
          column: 50
        }
      },
      "206": {
        start: {
          line: 485,
          column: 31
        },
        end: {
          line: 485,
          column: 91
        }
      },
      "207": {
        start: {
          line: 485,
          column: 58
        },
        end: {
          line: 485,
          column: 83
        }
      },
      "208": {
        start: {
          line: 486,
          column: 8
        },
        end: {
          line: 486,
          column: 37
        }
      },
      "209": {
        start: {
          line: 487,
          column: 8
        },
        end: {
          line: 487,
          column: 49
        }
      },
      "210": {
        start: {
          line: 497,
          column: 34
        },
        end: {
          line: 497,
          column: 85
        }
      },
      "211": {
        start: {
          line: 497,
          column: 59
        },
        end: {
          line: 497,
          column: 84
        }
      },
      "212": {
        start: {
          line: 498,
          column: 8
        },
        end: {
          line: 500,
          column: 9
        }
      },
      "213": {
        start: {
          line: 499,
          column: 12
        },
        end: {
          line: 499,
          column: 25
        }
      },
      "214": {
        start: {
          line: 502,
          column: 8
        },
        end: {
          line: 504,
          column: 9
        }
      },
      "215": {
        start: {
          line: 503,
          column: 12
        },
        end: {
          line: 503,
          column: 25
        }
      },
      "216": {
        start: {
          line: 506,
          column: 8
        },
        end: {
          line: 508,
          column: 9
        }
      },
      "217": {
        start: {
          line: 507,
          column: 12
        },
        end: {
          line: 507,
          column: 25
        }
      },
      "218": {
        start: {
          line: 509,
          column: 8
        },
        end: {
          line: 509,
          column: 20
        }
      },
      "219": {
        start: {
          line: 518,
          column: 8
        },
        end: {
          line: 518,
          column: 34
        }
      },
      "220": {
        start: {
          line: 519,
          column: 8
        },
        end: {
          line: 519,
          column: 38
        }
      },
      "221": {
        start: {
          line: 520,
          column: 8
        },
        end: {
          line: 520,
          column: 32
        }
      },
      "222": {
        start: {
          line: 521,
          column: 8
        },
        end: {
          line: 526,
          column: 15
        }
      },
      "223": {
        start: {
          line: 535,
          column: 8
        },
        end: {
          line: 537,
          column: 9
        }
      },
      "224": {
        start: {
          line: 536,
          column: 12
        },
        end: {
          line: 536,
          column: 58
        }
      },
      "225": {
        start: {
          line: 538,
          column: 24
        },
        end: {
          line: 538,
          column: 65
        }
      },
      "226": {
        start: {
          line: 539,
          column: 8
        },
        end: {
          line: 539,
          column: 41
        }
      },
      "227": {
        start: {
          line: 541,
          column: 31
        },
        end: {
          line: 541,
          column: 35
        }
      },
      "228": {
        start: {
          line: 542,
          column: 8
        },
        end: {
          line: 544,
          column: 9
        }
      },
      "229": {
        start: {
          line: 543,
          column: 12
        },
        end: {
          line: 543,
          column: 63
        }
      },
      "230": {
        start: {
          line: 552,
          column: 8
        },
        end: {
          line: 567,
          column: 9
        }
      },
      "231": {
        start: {
          line: 553,
          column: 23
        },
        end: {
          line: 553,
          column: 41
        }
      },
      "232": {
        start: {
          line: 554,
          column: 25
        },
        end: {
          line: 554,
          column: 34
        }
      },
      "233": {
        start: {
          line: 555,
          column: 28
        },
        end: {
          line: 555,
          column: 29
        }
      },
      "234": {
        start: {
          line: 556,
          column: 28
        },
        end: {
          line: 556,
          column: 29
        }
      },
      "235": {
        start: {
          line: 557,
          column: 12
        },
        end: {
          line: 562,
          column: 13
        }
      },
      "236": {
        start: {
          line: 558,
          column: 16
        },
        end: {
          line: 560,
          column: 17
        }
      },
      "237": {
        start: {
          line: 559,
          column: 20
        },
        end: {
          line: 559,
          column: 49
        }
      },
      "238": {
        start: {
          line: 561,
          column: 16
        },
        end: {
          line: 561,
          column: 44
        }
      },
      "239": {
        start: {
          line: 563,
          column: 12
        },
        end: {
          line: 563,
          column: 55
        }
      },
      "240": {
        start: {
          line: 566,
          column: 12
        },
        end: {
          line: 566,
          column: 21
        }
      },
      "241": {
        start: {
          line: 575,
          column: 8
        },
        end: {
          line: 583,
          column: 9
        }
      },
      "242": {
        start: {
          line: 576,
          column: 23
        },
        end: {
          line: 576,
          column: 41
        }
      },
      "243": {
        start: {
          line: 577,
          column: 29
        },
        end: {
          line: 577,
          column: 42
        }
      },
      "244": {
        start: {
          line: 578,
          column: 28
        },
        end: {
          line: 578,
          column: 40
        }
      },
      "245": {
        start: {
          line: 579,
          column: 12
        },
        end: {
          line: 579,
          column: 59
        }
      },
      "246": {
        start: {
          line: 582,
          column: 12
        },
        end: {
          line: 582,
          column: 21
        }
      },
      "247": {
        start: {
          line: 593,
          column: 8
        },
        end: {
          line: 593,
          column: 34
        }
      },
      "248": {
        start: {
          line: 599,
          column: 8
        },
        end: {
          line: 599,
          column: 30
        }
      },
      "249": {
        start: {
          line: 600,
          column: 8
        },
        end: {
          line: 600,
          column: 35
        }
      },
      "250": {
        start: {
          line: 601,
          column: 8
        },
        end: {
          line: 601,
          column: 40
        }
      },
      "251": {
        start: {
          line: 602,
          column: 8
        },
        end: {
          line: 602,
          column: 68
        }
      },
      "252": {
        start: {
          line: 605,
          column: 0
        },
        end: {
          line: 605,
          column: 50
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 61
          },
          end: {
            line: 40,
            column: 5
          }
        },
        line: 19
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 44,
            column: 4
          },
          end: {
            line: 44,
            column: 5
          }
        },
        loc: {
          start: {
            line: 44,
            column: 22
          },
          end: {
            line: 65,
            column: 5
          }
        },
        line: 44
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 57,
            column: 49
          },
          end: {
            line: 57,
            column: 50
          }
        },
        loc: {
          start: {
            line: 57,
            column: 65
          },
          end: {
            line: 59,
            column: 9
          }
        },
        line: 57
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 61,
            column: 52
          },
          end: {
            line: 61,
            column: 53
          }
        },
        loc: {
          start: {
            line: 61,
            column: 68
          },
          end: {
            line: 63,
            column: 9
          }
        },
        line: 61
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 69,
            column: 4
          },
          end: {
            line: 69,
            column: 5
          }
        },
        loc: {
          start: {
            line: 69,
            column: 21
          },
          end: {
            line: 82,
            column: 5
          }
        },
        line: 69
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 88,
            column: 4
          },
          end: {
            line: 88,
            column: 5
          }
        },
        loc: {
          start: {
            line: 88,
            column: 44
          },
          end: {
            line: 108,
            column: 5
          }
        },
        line: 88
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 97,
            column: 37
          },
          end: {
            line: 97,
            column: 38
          }
        },
        loc: {
          start: {
            line: 97,
            column: 49
          },
          end: {
            line: 104,
            column: 9
          }
        },
        line: 97
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 107,
            column: 19
          },
          end: {
            line: 107,
            column: 20
          }
        },
        loc: {
          start: {
            line: 107,
            column: 25
          },
          end: {
            line: 107,
            column: 62
          }
        },
        line: 107
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 114,
            column: 4
          },
          end: {
            line: 114,
            column: 5
          }
        },
        loc: {
          start: {
            line: 114,
            column: 43
          },
          end: {
            line: 121,
            column: 5
          }
        },
        line: 114
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 128,
            column: 4
          },
          end: {
            line: 128,
            column: 5
          }
        },
        loc: {
          start: {
            line: 128,
            column: 35
          },
          end: {
            line: 130,
            column: 5
          }
        },
        line: 128
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 136,
            column: 4
          },
          end: {
            line: 136,
            column: 5
          }
        },
        loc: {
          start: {
            line: 136,
            column: 26
          },
          end: {
            line: 138,
            column: 5
          }
        },
        line: 136
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 146,
            column: 4
          },
          end: {
            line: 146,
            column: 5
          }
        },
        loc: {
          start: {
            line: 146,
            column: 47
          },
          end: {
            line: 149,
            column: 5
          }
        },
        line: 146
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 155,
            column: 4
          },
          end: {
            line: 155,
            column: 5
          }
        },
        loc: {
          start: {
            line: 155,
            column: 28
          },
          end: {
            line: 173,
            column: 5
          }
        },
        line: 155
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 158,
            column: 53
          },
          end: {
            line: 158,
            column: 54
          }
        },
        loc: {
          start: {
            line: 158,
            column: 58
          },
          end: {
            line: 158,
            column: 69
          }
        },
        line: 158
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 161,
            column: 32
          },
          end: {
            line: 161,
            column: 33
          }
        },
        loc: {
          start: {
            line: 161,
            column: 44
          },
          end: {
            line: 161,
            column: 63
          }
        },
        line: 161
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 163,
            column: 49
          },
          end: {
            line: 163,
            column: 50
          }
        },
        loc: {
          start: {
            line: 163,
            column: 61
          },
          end: {
            line: 163,
            column: 121
          }
        },
        line: 163
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 163,
            column: 83
          },
          end: {
            line: 163,
            column: 84
          }
        },
        loc: {
          start: {
            line: 163,
            column: 88
          },
          end: {
            line: 163,
            column: 113
          }
        },
        line: 163
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 180,
            column: 4
          },
          end: {
            line: 180,
            column: 5
          }
        },
        loc: {
          start: {
            line: 180,
            column: 41
          },
          end: {
            line: 189,
            column: 5
          }
        },
        line: 180
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 195,
            column: 4
          },
          end: {
            line: 195,
            column: 5
          }
        },
        loc: {
          start: {
            line: 195,
            column: 42
          },
          end: {
            line: 210,
            column: 5
          }
        },
        line: 195
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 216,
            column: 4
          },
          end: {
            line: 216,
            column: 5
          }
        },
        loc: {
          start: {
            line: 216,
            column: 43
          },
          end: {
            line: 292,
            column: 5
          }
        },
        line: 216
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 268,
            column: 43
          },
          end: {
            line: 268,
            column: 44
          }
        },
        loc: {
          start: {
            line: 268,
            column: 48
          },
          end: {
            line: 268,
            column: 57
          }
        },
        line: 268
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 299,
            column: 4
          },
          end: {
            line: 299,
            column: 5
          }
        },
        loc: {
          start: {
            line: 299,
            column: 37
          },
          end: {
            line: 326,
            column: 5
          }
        },
        line: 299
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 304,
            column: 31
          },
          end: {
            line: 304,
            column: 32
          }
        },
        loc: {
          start: {
            line: 304,
            column: 52
          },
          end: {
            line: 320,
            column: 13
          }
        },
        line: 304
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 306,
            column: 43
          },
          end: {
            line: 306,
            column: 44
          }
        },
        loc: {
          start: {
            line: 306,
            column: 49
          },
          end: {
            line: 309,
            column: 17
          }
        },
        line: 306
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 310,
            column: 73
          },
          end: {
            line: 310,
            column: 74
          }
        },
        loc: {
          start: {
            line: 310,
            column: 79
          },
          end: {
            line: 315,
            column: 17
          }
        },
        line: 310
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 316,
            column: 35
          },
          end: {
            line: 316,
            column: 36
          }
        },
        loc: {
          start: {
            line: 316,
            column: 46
          },
          end: {
            line: 319,
            column: 17
          }
        },
        line: 316
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 333,
            column: 4
          },
          end: {
            line: 333,
            column: 5
          }
        },
        loc: {
          start: {
            line: 333,
            column: 40
          },
          end: {
            line: 367,
            column: 5
          }
        },
        line: 333
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 339,
            column: 31
          },
          end: {
            line: 339,
            column: 32
          }
        },
        loc: {
          start: {
            line: 339,
            column: 52
          },
          end: {
            line: 361,
            column: 13
          }
        },
        line: 339
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 341,
            column: 43
          },
          end: {
            line: 341,
            column: 44
          }
        },
        loc: {
          start: {
            line: 341,
            column: 49
          },
          end: {
            line: 344,
            column: 17
          }
        },
        line: 341
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 346,
            column: 73
          },
          end: {
            line: 346,
            column: 74
          }
        },
        loc: {
          start: {
            line: 346,
            column: 79
          },
          end: {
            line: 348,
            column: 17
          }
        },
        line: 346
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 349,
            column: 34
          },
          end: {
            line: 349,
            column: 35
          }
        },
        loc: {
          start: {
            line: 349,
            column: 44
          },
          end: {
            line: 356,
            column: 17
          }
        },
        line: 349
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 357,
            column: 35
          },
          end: {
            line: 357,
            column: 36
          }
        },
        loc: {
          start: {
            line: 357,
            column: 46
          },
          end: {
            line: 360,
            column: 17
          }
        },
        line: 357
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 374,
            column: 4
          },
          end: {
            line: 374,
            column: 5
          }
        },
        loc: {
          start: {
            line: 374,
            column: 40
          },
          end: {
            line: 411,
            column: 5
          }
        },
        line: 374
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 382,
            column: 38
          },
          end: {
            line: 382,
            column: 39
          }
        },
        loc: {
          start: {
            line: 382,
            column: 59
          },
          end: {
            line: 398,
            column: 21
          }
        },
        line: 382
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 384,
            column: 51
          },
          end: {
            line: 384,
            column: 52
          }
        },
        loc: {
          start: {
            line: 384,
            column: 57
          },
          end: {
            line: 387,
            column: 25
          }
        },
        line: 384
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 388,
            column: 81
          },
          end: {
            line: 388,
            column: 82
          }
        },
        loc: {
          start: {
            line: 388,
            column: 87
          },
          end: {
            line: 393,
            column: 25
          }
        },
        line: 388
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 394,
            column: 43
          },
          end: {
            line: 394,
            column: 44
          }
        },
        loc: {
          start: {
            line: 394,
            column: 49
          },
          end: {
            line: 397,
            column: 25
          }
        },
        line: 394
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 418,
            column: 4
          },
          end: {
            line: 418,
            column: 5
          }
        },
        loc: {
          start: {
            line: 418,
            column: 33
          },
          end: {
            line: 458,
            column: 5
          }
        },
        line: 418
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 465,
            column: 4
          },
          end: {
            line: 465,
            column: 5
          }
        },
        loc: {
          start: {
            line: 465,
            column: 34
          },
          end: {
            line: 488,
            column: 5
          }
        },
        line: 465
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 485,
            column: 53
          },
          end: {
            line: 485,
            column: 54
          }
        },
        loc: {
          start: {
            line: 485,
            column: 58
          },
          end: {
            line: 485,
            column: 83
          }
        },
        line: 485
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 495,
            column: 4
          },
          end: {
            line: 495,
            column: 5
          }
        },
        loc: {
          start: {
            line: 495,
            column: 35
          },
          end: {
            line: 510,
            column: 5
          }
        },
        line: 495
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 497,
            column: 54
          },
          end: {
            line: 497,
            column: 55
          }
        },
        loc: {
          start: {
            line: 497,
            column: 59
          },
          end: {
            line: 497,
            column: 84
          }
        },
        line: 497
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 517,
            column: 4
          },
          end: {
            line: 517,
            column: 5
          }
        },
        loc: {
          start: {
            line: 517,
            column: 45
          },
          end: {
            line: 527,
            column: 5
          }
        },
        line: 517
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 534,
            column: 4
          },
          end: {
            line: 534,
            column: 5
          }
        },
        loc: {
          start: {
            line: 534,
            column: 62
          },
          end: {
            line: 545,
            column: 5
          }
        },
        line: 534
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 551,
            column: 4
          },
          end: {
            line: 551,
            column: 5
          }
        },
        loc: {
          start: {
            line: 551,
            column: 24
          },
          end: {
            line: 568,
            column: 5
          }
        },
        line: 551
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 574,
            column: 4
          },
          end: {
            line: 574,
            column: 5
          }
        },
        loc: {
          start: {
            line: 574,
            column: 27
          },
          end: {
            line: 584,
            column: 5
          }
        },
        line: 574
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 590,
            column: 4
          },
          end: {
            line: 590,
            column: 5
          }
        },
        loc: {
          start: {
            line: 590,
            column: 34
          },
          end: {
            line: 594,
            column: 5
          }
        },
        line: 590
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 598,
            column: 4
          },
          end: {
            line: 598,
            column: 5
          }
        },
        loc: {
          start: {
            line: 598,
            column: 14
          },
          end: {
            line: 603,
            column: 5
          }
        },
        line: 598
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 45,
            column: 8
          },
          end: {
            line: 48,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 45,
            column: 8
          },
          end: {
            line: 48,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 45
      },
      "1": {
        loc: {
          start: {
            line: 70,
            column: 8
          },
          end: {
            line: 73,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 70,
            column: 8
          },
          end: {
            line: 73,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 70
      },
      "2": {
        loc: {
          start: {
            line: 89,
            column: 8
          },
          end: {
            line: 92,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 89,
            column: 8
          },
          end: {
            line: 92,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 89
      },
      "3": {
        loc: {
          start: {
            line: 116,
            column: 8
          },
          end: {
            line: 120,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 116,
            column: 8
          },
          end: {
            line: 120,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 116
      },
      "4": {
        loc: {
          start: {
            line: 147,
            column: 24
          },
          end: {
            line: 147,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 147,
            column: 24
          },
          end: {
            line: 147,
            column: 65
          }
        }, {
          start: {
            line: 147,
            column: 69
          },
          end: {
            line: 147,
            column: 71
          }
        }],
        line: 147
      },
      "5": {
        loc: {
          start: {
            line: 148,
            column: 15
          },
          end: {
            line: 148,
            column: 59
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 148,
            column: 23
          },
          end: {
            line: 148,
            column: 44
          }
        }, {
          start: {
            line: 148,
            column: 47
          },
          end: {
            line: 148,
            column: 59
          }
        }],
        line: 148
      },
      "6": {
        loc: {
          start: {
            line: 160,
            column: 35
          },
          end: {
            line: 162,
            column: 15
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 161,
            column: 14
          },
          end: {
            line: 161,
            column: 86
          }
        }, {
          start: {
            line: 162,
            column: 14
          },
          end: {
            line: 162,
            column: 15
          }
        }],
        line: 160
      },
      "7": {
        loc: {
          start: {
            line: 183,
            column: 19
          },
          end: {
            line: 183,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 183,
            column: 19
          },
          end: {
            line: 183,
            column: 54
          }
        }, {
          start: {
            line: 183,
            column: 58
          },
          end: {
            line: 183,
            column: 62
          }
        }],
        line: 183
      },
      "8": {
        loc: {
          start: {
            line: 218,
            column: 8
          },
          end: {
            line: 221,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 218,
            column: 8
          },
          end: {
            line: 221,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 218
      },
      "9": {
        loc: {
          start: {
            line: 223,
            column: 8
          },
          end: {
            line: 226,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 223,
            column: 8
          },
          end: {
            line: 226,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 223
      },
      "10": {
        loc: {
          start: {
            line: 231,
            column: 12
          },
          end: {
            line: 234,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 231,
            column: 12
          },
          end: {
            line: 234,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 231
      },
      "11": {
        loc: {
          start: {
            line: 245,
            column: 12
          },
          end: {
            line: 247,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 245,
            column: 12
          },
          end: {
            line: 247,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 245
      },
      "12": {
        loc: {
          start: {
            line: 257,
            column: 12
          },
          end: {
            line: 272,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 257,
            column: 12
          },
          end: {
            line: 272,
            column: 13
          }
        }, {
          start: {
            line: 264,
            column: 17
          },
          end: {
            line: 272,
            column: 13
          }
        }],
        line: 257
      },
      "13": {
        loc: {
          start: {
            line: 259,
            column: 16
          },
          end: {
            line: 262,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 259,
            column: 16
          },
          end: {
            line: 262,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 259
      },
      "14": {
        loc: {
          start: {
            line: 266,
            column: 16
          },
          end: {
            line: 271,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 266,
            column: 16
          },
          end: {
            line: 271,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 266
      },
      "15": {
        loc: {
          start: {
            line: 274,
            column: 12
          },
          end: {
            line: 284,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 274,
            column: 12
          },
          end: {
            line: 284,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 274
      },
      "16": {
        loc: {
          start: {
            line: 290,
            column: 73
          },
          end: {
            line: 290,
            column: 127
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 290,
            column: 98
          },
          end: {
            line: 290,
            column: 111
          }
        }, {
          start: {
            line: 290,
            column: 114
          },
          end: {
            line: 290,
            column: 127
          }
        }],
        line: 290
      },
      "17": {
        loc: {
          start: {
            line: 422,
            column: 8
          },
          end: {
            line: 429,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 422,
            column: 8
          },
          end: {
            line: 429,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 422
      },
      "18": {
        loc: {
          start: {
            line: 425,
            column: 26
          },
          end: {
            line: 425,
            column: 90
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 425,
            column: 73
          },
          end: {
            line: 425,
            column: 79
          }
        }, {
          start: {
            line: 425,
            column: 82
          },
          end: {
            line: 425,
            column: 90
          }
        }],
        line: 425
      },
      "19": {
        loc: {
          start: {
            line: 431,
            column: 8
          },
          end: {
            line: 438,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 431,
            column: 8
          },
          end: {
            line: 438,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 431
      },
      "20": {
        loc: {
          start: {
            line: 434,
            column: 26
          },
          end: {
            line: 434,
            column: 96
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 434,
            column: 79
          },
          end: {
            line: 434,
            column: 85
          }
        }, {
          start: {
            line: 434,
            column: 88
          },
          end: {
            line: 434,
            column: 96
          }
        }],
        line: 434
      },
      "21": {
        loc: {
          start: {
            line: 440,
            column: 8
          },
          end: {
            line: 447,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 440,
            column: 8
          },
          end: {
            line: 447,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 440
      },
      "22": {
        loc: {
          start: {
            line: 443,
            column: 26
          },
          end: {
            line: 443,
            column: 96
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 443,
            column: 79
          },
          end: {
            line: 443,
            column: 85
          }
        }, {
          start: {
            line: 443,
            column: 88
          },
          end: {
            line: 443,
            column: 96
          }
        }],
        line: 443
      },
      "23": {
        loc: {
          start: {
            line: 449,
            column: 8
          },
          end: {
            line: 456,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 449,
            column: 8
          },
          end: {
            line: 456,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 449
      },
      "24": {
        loc: {
          start: {
            line: 468,
            column: 8
          },
          end: {
            line: 471,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 468,
            column: 8
          },
          end: {
            line: 471,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 468
      },
      "25": {
        loc: {
          start: {
            line: 473,
            column: 8
          },
          end: {
            line: 476,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 473,
            column: 8
          },
          end: {
            line: 476,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 473
      },
      "26": {
        loc: {
          start: {
            line: 478,
            column: 8
          },
          end: {
            line: 481,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 478,
            column: 8
          },
          end: {
            line: 481,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 478
      },
      "27": {
        loc: {
          start: {
            line: 498,
            column: 8
          },
          end: {
            line: 500,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 498,
            column: 8
          },
          end: {
            line: 500,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 498
      },
      "28": {
        loc: {
          start: {
            line: 502,
            column: 8
          },
          end: {
            line: 504,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 502,
            column: 8
          },
          end: {
            line: 504,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 502
      },
      "29": {
        loc: {
          start: {
            line: 506,
            column: 8
          },
          end: {
            line: 508,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 506,
            column: 8
          },
          end: {
            line: 508,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 506
      },
      "30": {
        loc: {
          start: {
            line: 535,
            column: 8
          },
          end: {
            line: 537,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 535,
            column: 8
          },
          end: {
            line: 537,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 535
      },
      "31": {
        loc: {
          start: {
            line: 542,
            column: 8
          },
          end: {
            line: 544,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 542,
            column: 8
          },
          end: {
            line: 544,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 542
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\tunnel-health-monitor.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\tunnel-health-monitor.ts"],
      sourcesContent: ["import { EventEmitter } from 'events';\r\nimport { Logger } from '../core/logging/logger';\r\nimport { TunnelConnection, TunnelState, SSHTunnelManager } from './ssh-tunnel-manager';\r\nimport { TunnelStateTracker } from './tunnel-state-tracker';\r\n\r\n/**\r\n * Tunnel health metrics\r\n */\r\nexport interface TunnelHealthMetrics {\r\n  connectionId: string;\r\n  isHealthy: boolean;\r\n  latency: number; // ms\r\n  throughput: number; // bytes/sec\r\n  packetLoss: number; // percentage\r\n  uptime: number; // ms\r\n  lastHealthCheck: Date;\r\n  consecutiveFailures: number;\r\n  healthScore: number; // 0-100\r\n  issues: HealthIssue[];\r\n}\r\n\r\n/**\r\n * Health issue types\r\n */\r\nexport interface HealthIssue {\r\n  type: 'HIGH_LATENCY' | 'PACKET_LOSS' | 'LOW_THROUGHPUT' | 'CONNECTION_UNSTABLE' | 'AUTHENTICATION_FAILURE';\r\n  severity: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';\r\n  message: string;\r\n  timestamp: Date;\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\n/**\r\n * Health monitoring configuration\r\n */\r\nexport interface HealthMonitorConfig {\r\n  /** Health check interval in milliseconds */\r\n  checkInterval: number;\r\n  /** Maximum acceptable latency in milliseconds */\r\n  maxLatency: number;\r\n  /** Maximum acceptable packet loss percentage */\r\n  maxPacketLoss: number;\r\n  /** Minimum acceptable throughput in bytes/sec */\r\n  minThroughput: number;\r\n  /** Number of consecutive failures before marking unhealthy */\r\n  failureThreshold: number;\r\n  /** Health check timeout in milliseconds */\r\n  healthCheckTimeout: number;\r\n  /** Enable detailed performance monitoring */\r\n  enablePerformanceMonitoring: boolean;\r\n}\r\n\r\n/**\r\n * Performance metrics for tunnel monitoring\r\n */\r\nexport interface PerformanceMetrics {\r\n  timestamp: Date;\r\n  latency: number;\r\n  throughput: number;\r\n  packetLoss: number;\r\n  cpuUsage: number;\r\n  memoryUsage: number;\r\n  networkUtilization: number;\r\n}\r\n\r\n/**\r\n * Tunnel Health Monitor\r\n * Monitors SSH tunnel health with real-time metrics collection and alerting\r\n */\r\nexport class TunnelHealthMonitor extends EventEmitter {\r\n  private logger: Logger;\r\n  private tunnelManager: SSHTunnelManager;\r\n  private stateTracker: TunnelStateTracker;\r\n  private config: HealthMonitorConfig;\r\n  private healthMetrics: Map<string, TunnelHealthMetrics>;\r\n  private performanceHistory: Map<string, PerformanceMetrics[]>;\r\n  private monitoringIntervals: Map<string, NodeJS.Timeout>;\r\n  private isMonitoring: boolean;\r\n\r\n  constructor(\r\n    logger: Logger,\r\n    tunnelManager: SSHTunnelManager,\r\n    stateTracker: TunnelStateTracker,\r\n    config?: Partial<HealthMonitorConfig>\r\n  ) {\r\n    super();\r\n    this.logger = logger;\r\n    this.tunnelManager = tunnelManager;\r\n    this.stateTracker = stateTracker;\r\n    this.healthMetrics = new Map();\r\n    this.performanceHistory = new Map();\r\n    this.monitoringIntervals = new Map();\r\n    this.isMonitoring = false;\r\n\r\n    // Default configuration\r\n    this.config = {\r\n      checkInterval: 30000, // 30 seconds\r\n      maxLatency: 1000, // 1 second\r\n      maxPacketLoss: 5, // 5%\r\n      minThroughput: 1024, // 1 KB/s\r\n      failureThreshold: 3,\r\n      healthCheckTimeout: 10000, // 10 seconds\r\n      enablePerformanceMonitoring: true,\r\n      ...config\r\n    };\r\n\r\n    this.logger.info('Tunnel Health Monitor initialized', this.config);\r\n  }\r\n\r\n  /**\r\n   * Start monitoring all tunnel connections\r\n   */\r\n  startMonitoring(): void {\r\n    if (this.isMonitoring) {\r\n      this.logger.warn('Health monitoring is already running');\r\n      return;\r\n    }\r\n\r\n    this.isMonitoring = true;\r\n    this.logger.info('Starting tunnel health monitoring');\r\n\r\n    // Monitor existing connections\r\n    const connections = this.tunnelManager.getAllConnections();\r\n    for (const connection of connections) {\r\n      this.startMonitoringConnection(connection.id);\r\n    }\r\n\r\n    // Listen for new connections\r\n    this.tunnelManager.on('tunnelConnected', (connection) => {\r\n      this.startMonitoringConnection(connection.id);\r\n    });\r\n\r\n    // Listen for disconnections\r\n    this.tunnelManager.on('tunnelDisconnected', (connection) => {\r\n      this.stopMonitoringConnection(connection.id);\r\n    });\r\n\r\n    this.emit('monitoringStarted');\r\n  }\r\n\r\n  /**\r\n   * Stop monitoring all tunnel connections\r\n   */\r\n  stopMonitoring(): void {\r\n    if (!this.isMonitoring) {\r\n      this.logger.warn('Health monitoring is not running');\r\n      return;\r\n    }\r\n\r\n    this.isMonitoring = false;\r\n    this.logger.info('Stopping tunnel health monitoring');\r\n\r\n    // Clear all monitoring intervals\r\n    for (const [connectionId, interval] of this.monitoringIntervals.entries()) {\r\n      clearInterval(interval);\r\n      this.monitoringIntervals.delete(connectionId);\r\n    }\r\n\r\n    this.emit('monitoringStopped');\r\n  }\r\n\r\n  /**\r\n   * Start monitoring a specific connection\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   */\r\n  startMonitoringConnection(connectionId: string): void {\r\n    if (this.monitoringIntervals.has(connectionId)) {\r\n      this.logger.debug(`Already monitoring connection: ${connectionId}`);\r\n      return;\r\n    }\r\n\r\n    this.logger.info(`Starting health monitoring for connection: ${connectionId}`);\r\n\r\n    // Initialize health metrics\r\n    this.initializeHealthMetrics(connectionId);\r\n\r\n    // Start periodic health checks\r\n    const interval = setInterval(async () => {\r\n      try {\r\n        await this.performHealthCheck(connectionId);\r\n      } catch (error) {\r\n        this.logger.error(`Health check failed for connection ${connectionId}`, error);\r\n      }\r\n    }, this.config.checkInterval);\r\n\r\n    this.monitoringIntervals.set(connectionId, interval);\r\n\r\n    // Perform initial health check\r\n    setTimeout(() => this.performHealthCheck(connectionId), 1000);\r\n  }\r\n\r\n  /**\r\n   * Stop monitoring a specific connection\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   */\r\n  stopMonitoringConnection(connectionId: string): void {\r\n    const interval = this.monitoringIntervals.get(connectionId);\r\n    if (interval) {\r\n      clearInterval(interval);\r\n      this.monitoringIntervals.delete(connectionId);\r\n      this.logger.info(`Stopped health monitoring for connection: ${connectionId}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get health metrics for a connection\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @returns Health metrics or undefined\r\n   */\r\n  getHealthMetrics(connectionId: string): TunnelHealthMetrics | undefined {\r\n    return this.healthMetrics.get(connectionId);\r\n  }\r\n\r\n  /**\r\n   * Get health metrics for all connections\r\n   * \r\n   * @returns Map of all health metrics\r\n   */\r\n  getAllHealthMetrics(): Map<string, TunnelHealthMetrics> {\r\n    return new Map(this.healthMetrics);\r\n  }\r\n\r\n  /**\r\n   * Get performance history for a connection\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @param limit - Maximum number of history entries\r\n   * @returns Array of performance metrics\r\n   */\r\n  getPerformanceHistory(connectionId: string, limit?: number): PerformanceMetrics[] {\r\n    const history = this.performanceHistory.get(connectionId) || [];\r\n    return limit ? history.slice(-limit) : [...history];\r\n  }\r\n\r\n  /**\r\n   * Get overall system health status\r\n   * \r\n   * @returns System health summary\r\n   */\r\n  getSystemHealthStatus(): {\r\n    totalConnections: number;\r\n    healthyConnections: number;\r\n    unhealthyConnections: number;\r\n    averageHealthScore: number;\r\n    criticalIssues: number;\r\n    systemHealthScore: number;\r\n  } {\r\n    const allMetrics = Array.from(this.healthMetrics.values());\r\n    const totalConnections = allMetrics.length;\r\n    const healthyConnections = allMetrics.filter(m => m.isHealthy).length;\r\n    const unhealthyConnections = totalConnections - healthyConnections;\r\n    \r\n    const averageHealthScore = totalConnections > 0\r\n      ? allMetrics.reduce((sum, m) => sum + m.healthScore, 0) / totalConnections\r\n      : 0;\r\n\r\n    const criticalIssues = allMetrics.reduce(\r\n      (sum, m) => sum + m.issues.filter(i => i.severity === 'CRITICAL').length,\r\n      0\r\n    );\r\n\r\n    const systemHealthScore = Math.max(0, averageHealthScore - (criticalIssues * 10));\r\n\r\n    return {\r\n      totalConnections,\r\n      healthyConnections,\r\n      unhealthyConnections,\r\n      averageHealthScore,\r\n      criticalIssues,\r\n      systemHealthScore\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Force health check for a connection\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @returns Health check results\r\n   */\r\n  async forceHealthCheck(connectionId: string): Promise<TunnelHealthMetrics | null> {\r\n    try {\r\n      await this.performHealthCheck(connectionId);\r\n      return this.getHealthMetrics(connectionId) || null;\r\n    } catch (error) {\r\n      this.logger.error(`Forced health check failed for connection ${connectionId}`, error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialize health metrics for a connection\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   */\r\n  private initializeHealthMetrics(connectionId: string): void {\r\n    const metrics: TunnelHealthMetrics = {\r\n      connectionId,\r\n      isHealthy: false,\r\n      latency: 0,\r\n      throughput: 0,\r\n      packetLoss: 0,\r\n      uptime: 0,\r\n      lastHealthCheck: new Date(),\r\n      consecutiveFailures: 0,\r\n      healthScore: 0,\r\n      issues: []\r\n    };\r\n\r\n    this.healthMetrics.set(connectionId, metrics);\r\n    this.performanceHistory.set(connectionId, []);\r\n  }\r\n\r\n  /**\r\n   * Perform comprehensive health check for a connection\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   */\r\n  private async performHealthCheck(connectionId: string): Promise<void> {\r\n    const connection = this.tunnelManager.getConnection(connectionId);\r\n    if (!connection) {\r\n      this.logger.warn(`Connection not found for health check: ${connectionId}`);\r\n      return;\r\n    }\r\n\r\n    const metrics = this.healthMetrics.get(connectionId);\r\n    if (!metrics) {\r\n      this.logger.warn(`Health metrics not found for connection: ${connectionId}`);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Update last health check timestamp\r\n      metrics.lastHealthCheck = new Date();\r\n\r\n      // Check connection state\r\n      if (connection.state !== TunnelState.CONNECTED) {\r\n        this.markConnectionUnhealthy(metrics, 'Connection not in CONNECTED state');\r\n        return;\r\n      }\r\n\r\n      // Perform latency test\r\n      const latency = await this.measureLatency(connection);\r\n      metrics.latency = latency;\r\n\r\n      // Perform throughput test\r\n      const throughput = await this.measureThroughput(connection);\r\n      metrics.throughput = throughput;\r\n\r\n      // Measure packet loss\r\n      const packetLoss = await this.measurePacketLoss(connection);\r\n      metrics.packetLoss = packetLoss;\r\n\r\n      // Calculate uptime\r\n      if (connection.connectedAt) {\r\n        metrics.uptime = Date.now() - connection.connectedAt.getTime();\r\n      }\r\n\r\n      // Analyze health issues\r\n      const issues = this.analyzeHealthIssues(metrics);\r\n      metrics.issues = issues;\r\n\r\n      // Calculate health score\r\n      metrics.healthScore = this.calculateHealthScore(metrics);\r\n\r\n      // Determine overall health status\r\n      const wasHealthy = metrics.isHealthy;\r\n      metrics.isHealthy = this.determineHealthStatus(metrics);\r\n\r\n      // Handle health status changes\r\n      if (metrics.isHealthy) {\r\n        metrics.consecutiveFailures = 0;\r\n        if (!wasHealthy) {\r\n          this.logger.info(`Connection health restored: ${connectionId}`);\r\n          this.emit('connectionHealthy', connection, metrics);\r\n        }\r\n      } else {\r\n        metrics.consecutiveFailures++;\r\n        if (wasHealthy) {\r\n          this.logger.warn(`Connection health degraded: ${connectionId}`, {\r\n            issues: issues.map(i => i.message)\r\n          });\r\n          this.emit('connectionUnhealthy', connection, metrics);\r\n        }\r\n      }\r\n\r\n      // Store performance metrics\r\n      if (this.config.enablePerformanceMonitoring) {\r\n        this.storePerformanceMetrics(connectionId, {\r\n          timestamp: new Date(),\r\n          latency,\r\n          throughput,\r\n          packetLoss,\r\n          cpuUsage: await this.getCPUUsage(),\r\n          memoryUsage: await this.getMemoryUsage(),\r\n          networkUtilization: await this.getNetworkUtilization()\r\n        });\r\n      }\r\n\r\n      // Emit health check completed event\r\n      this.emit('healthCheckCompleted', connection, metrics);\r\n\r\n    } catch (error) {\r\n      this.logger.error(`Health check failed for connection ${connectionId}`, error);\r\n      this.markConnectionUnhealthy(metrics, `Health check error: ${error instanceof Error ? error.message : String(error)}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Measure connection latency using ping-like test\r\n   * \r\n   * @param connection - Tunnel connection\r\n   * @returns Latency in milliseconds\r\n   */\r\n  private async measureLatency(connection: TunnelConnection): Promise<number> {\r\n    const startTime = Date.now();\r\n    \r\n    try {\r\n      // Simple TCP connection test to local tunnel port\r\n      const net = await import('net');\r\n      \r\n      return new Promise<number>((resolve, reject) => {\r\n        const socket = new net.Socket();\r\n        const timeout = setTimeout(() => {\r\n          socket.destroy();\r\n          reject(new Error('Latency measurement timeout'));\r\n        }, this.config.healthCheckTimeout);\r\n\r\n        socket.connect(connection.config.localPort, 'localhost', () => {\r\n          const latency = Date.now() - startTime;\r\n          clearTimeout(timeout);\r\n          socket.destroy();\r\n          resolve(latency);\r\n        });\r\n\r\n        socket.on('error', (error) => {\r\n          clearTimeout(timeout);\r\n          reject(error);\r\n        });\r\n      });\r\n\r\n    } catch (error) {\r\n      this.logger.debug(`Latency measurement failed for ${connection.id}`, error);\r\n      return 9999; // High latency indicates problem\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Measure connection throughput\r\n   * \r\n   * @param connection - Tunnel connection\r\n   * @returns Throughput in bytes per second\r\n   */\r\n  private async measureThroughput(connection: TunnelConnection): Promise<number> {\r\n    try {\r\n      // Simple throughput test by sending small data packet\r\n      const net = await import('net');\r\n      const testData = Buffer.alloc(1024, 'A'); // 1KB test data\r\n      const startTime = Date.now();\r\n\r\n      return new Promise<number>((resolve, reject) => {\r\n        const socket = new net.Socket();\r\n        const timeout = setTimeout(() => {\r\n          socket.destroy();\r\n          reject(new Error('Throughput measurement timeout'));\r\n        }, this.config.healthCheckTimeout);\r\n\r\n        let bytesReceived = 0;\r\n\r\n        socket.connect(connection.config.localPort, 'localhost', () => {\r\n          socket.write(testData);\r\n        });\r\n\r\n        socket.on('data', (data) => {\r\n          bytesReceived += data.length;\r\n          const duration = (Date.now() - startTime) / 1000; // seconds\r\n          const throughput = bytesReceived / duration;\r\n          \r\n          clearTimeout(timeout);\r\n          socket.destroy();\r\n          resolve(throughput);\r\n        });\r\n\r\n        socket.on('error', (error) => {\r\n          clearTimeout(timeout);\r\n          reject(error);\r\n        });\r\n      });\r\n\r\n    } catch (error) {\r\n      this.logger.debug(`Throughput measurement failed for ${connection.id}`, error);\r\n      return 0; // No throughput indicates problem\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Measure packet loss percentage\r\n   * \r\n   * @param connection - Tunnel connection\r\n   * @returns Packet loss percentage\r\n   */\r\n  private async measurePacketLoss(connection: TunnelConnection): Promise<number> {\r\n    try {\r\n      // Simple packet loss test by sending multiple small packets\r\n      const net = await import('net');\r\n      const packetCount = 10;\r\n      let packetsReceived = 0;\r\n\r\n      for (let i = 0; i < packetCount; i++) {\r\n        try {\r\n          await new Promise<void>((resolve, reject) => {\r\n            const socket = new net.Socket();\r\n            const timeout = setTimeout(() => {\r\n              socket.destroy();\r\n              resolve(); // Count as lost packet\r\n            }, 1000);\r\n\r\n            socket.connect(connection.config.localPort, 'localhost', () => {\r\n              packetsReceived++;\r\n              clearTimeout(timeout);\r\n              socket.destroy();\r\n              resolve();\r\n            });\r\n\r\n            socket.on('error', () => {\r\n              clearTimeout(timeout);\r\n              resolve(); // Count as lost packet\r\n            });\r\n          });\r\n        } catch {\r\n          // Packet lost\r\n        }\r\n      }\r\n\r\n      const packetLoss = ((packetCount - packetsReceived) / packetCount) * 100;\r\n      return Math.max(0, Math.min(100, packetLoss));\r\n\r\n    } catch (error) {\r\n      this.logger.debug(`Packet loss measurement failed for ${connection.id}`, error);\r\n      return 100; // Assume 100% loss on error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Analyze health issues based on metrics\r\n   * \r\n   * @param metrics - Health metrics\r\n   * @returns Array of health issues\r\n   */\r\n  private analyzeHealthIssues(metrics: TunnelHealthMetrics): HealthIssue[] {\r\n    const issues: HealthIssue[] = [];\r\n    const now = new Date();\r\n\r\n    // Check latency\r\n    if (metrics.latency > this.config.maxLatency) {\r\n      issues.push({\r\n        type: 'HIGH_LATENCY',\r\n        severity: metrics.latency > this.config.maxLatency * 2 ? 'HIGH' : 'MEDIUM',\r\n        message: `High latency detected: ${metrics.latency}ms (max: ${this.config.maxLatency}ms)`,\r\n        timestamp: now\r\n      });\r\n    }\r\n\r\n    // Check packet loss\r\n    if (metrics.packetLoss > this.config.maxPacketLoss) {\r\n      issues.push({\r\n        type: 'PACKET_LOSS',\r\n        severity: metrics.packetLoss > this.config.maxPacketLoss * 2 ? 'HIGH' : 'MEDIUM',\r\n        message: `High packet loss detected: ${metrics.packetLoss}% (max: ${this.config.maxPacketLoss}%)`,\r\n        timestamp: now\r\n      });\r\n    }\r\n\r\n    // Check throughput\r\n    if (metrics.throughput < this.config.minThroughput) {\r\n      issues.push({\r\n        type: 'LOW_THROUGHPUT',\r\n        severity: metrics.throughput < this.config.minThroughput / 2 ? 'HIGH' : 'MEDIUM',\r\n        message: `Low throughput detected: ${metrics.throughput} bytes/s (min: ${this.config.minThroughput} bytes/s)`,\r\n        timestamp: now\r\n      });\r\n    }\r\n\r\n    // Check connection stability\r\n    if (metrics.consecutiveFailures >= this.config.failureThreshold) {\r\n      issues.push({\r\n        type: 'CONNECTION_UNSTABLE',\r\n        severity: 'CRITICAL',\r\n        message: `Connection unstable: ${metrics.consecutiveFailures} consecutive failures`,\r\n        timestamp: now\r\n      });\r\n    }\r\n\r\n    return issues;\r\n  }\r\n\r\n  /**\r\n   * Calculate health score based on metrics\r\n   * \r\n   * @param metrics - Health metrics\r\n   * @returns Health score (0-100)\r\n   */\r\n  private calculateHealthScore(metrics: TunnelHealthMetrics): number {\r\n    let score = 100;\r\n\r\n    // Deduct points for high latency\r\n    if (metrics.latency > this.config.maxLatency) {\r\n      const latencyPenalty = Math.min(30, (metrics.latency / this.config.maxLatency - 1) * 20);\r\n      score -= latencyPenalty;\r\n    }\r\n\r\n    // Deduct points for packet loss\r\n    if (metrics.packetLoss > this.config.maxPacketLoss) {\r\n      const packetLossPenalty = Math.min(40, metrics.packetLoss * 2);\r\n      score -= packetLossPenalty;\r\n    }\r\n\r\n    // Deduct points for low throughput\r\n    if (metrics.throughput < this.config.minThroughput) {\r\n      const throughputPenalty = Math.min(20, (1 - metrics.throughput / this.config.minThroughput) * 20);\r\n      score -= throughputPenalty;\r\n    }\r\n\r\n    // Deduct points for consecutive failures\r\n    score -= metrics.consecutiveFailures * 10;\r\n\r\n    // Deduct points for critical issues\r\n    const criticalIssues = metrics.issues.filter(i => i.severity === 'CRITICAL').length;\r\n    score -= criticalIssues * 20;\r\n\r\n    return Math.max(0, Math.min(100, score));\r\n  }\r\n\r\n  /**\r\n   * Determine overall health status\r\n   * \r\n   * @param metrics - Health metrics\r\n   * @returns True if connection is healthy\r\n   */\r\n  private determineHealthStatus(metrics: TunnelHealthMetrics): boolean {\r\n    // Connection is unhealthy if there are critical issues\r\n    const hasCriticalIssues = metrics.issues.some(i => i.severity === 'CRITICAL');\r\n    if (hasCriticalIssues) {\r\n      return false;\r\n    }\r\n\r\n    // Connection is unhealthy if health score is too low\r\n    if (metrics.healthScore < 50) {\r\n      return false;\r\n    }\r\n\r\n    // Connection is unhealthy if too many consecutive failures\r\n    if (metrics.consecutiveFailures >= this.config.failureThreshold) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Mark connection as unhealthy\r\n   * \r\n   * @param metrics - Health metrics\r\n   * @param reason - Reason for marking unhealthy\r\n   */\r\n  private markConnectionUnhealthy(metrics: TunnelHealthMetrics, reason: string): void {\r\n    metrics.isHealthy = false;\r\n    metrics.consecutiveFailures++;\r\n    metrics.healthScore = 0;\r\n    metrics.issues = [{\r\n      type: 'CONNECTION_UNSTABLE',\r\n      severity: 'CRITICAL',\r\n      message: reason,\r\n      timestamp: new Date()\r\n    }];\r\n  }\r\n\r\n  /**\r\n   * Store performance metrics in history\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @param performanceMetrics - Performance metrics to store\r\n   */\r\n  private storePerformanceMetrics(connectionId: string, performanceMetrics: PerformanceMetrics): void {\r\n    if (!this.performanceHistory.has(connectionId)) {\r\n      this.performanceHistory.set(connectionId, []);\r\n    }\r\n\r\n    const history = this.performanceHistory.get(connectionId)!;\r\n    history.push(performanceMetrics);\r\n\r\n    // Limit history size to prevent memory issues\r\n    const maxHistorySize = 1000;\r\n    if (history.length > maxHistorySize) {\r\n      history.splice(0, history.length - maxHistorySize);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get current CPU usage\r\n   * \r\n   * @returns CPU usage percentage\r\n   */\r\n  private async getCPUUsage(): Promise<number> {\r\n    try {\r\n      const os = await import('os');\r\n      const cpus = os.cpus();\r\n      \r\n      let totalIdle = 0;\r\n      let totalTick = 0;\r\n      \r\n      for (const cpu of cpus) {\r\n        for (const type in cpu.times) {\r\n          totalTick += cpu.times[type as keyof typeof cpu.times];\r\n        }\r\n        totalIdle += cpu.times.idle;\r\n      }\r\n      \r\n      return 100 - (totalIdle / totalTick * 100);\r\n    } catch {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get current memory usage\r\n   * \r\n   * @returns Memory usage percentage\r\n   */\r\n  private async getMemoryUsage(): Promise<number> {\r\n    try {\r\n      const os = await import('os');\r\n      const totalMem = os.totalmem();\r\n      const freeMem = os.freemem();\r\n      return ((totalMem - freeMem) / totalMem) * 100;\r\n    } catch {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get current network utilization\r\n   * \r\n   * @returns Network utilization percentage\r\n   */\r\n  private async getNetworkUtilization(): Promise<number> {\r\n    // Simplified network utilization calculation\r\n    // In a real implementation, this would measure actual network traffic\r\n    return Math.random() * 10; // Placeholder\r\n  }\r\n\r\n  /**\r\n   * Cleanup monitoring resources\r\n   */\r\n  cleanup(): void {\r\n    this.stopMonitoring();\r\n    this.healthMetrics.clear();\r\n    this.performanceHistory.clear();\r\n    this.logger.info('Tunnel health monitor cleanup completed');\r\n  }\r\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "e974c0ca94dc649f360caf6c15006a916fb369c2"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2qo9c4urn3 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2qo9c4urn3();
cov_2qo9c4urn3().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2qo9c4urn3().s[1]++;
exports.TunnelHealthMonitor = void 0;
const events_1 =
/* istanbul ignore next */
(cov_2qo9c4urn3().s[2]++, require("events"));
const ssh_tunnel_manager_1 =
/* istanbul ignore next */
(cov_2qo9c4urn3().s[3]++, require("./ssh-tunnel-manager"));
/**
 * Tunnel Health Monitor
 * Monitors SSH tunnel health with real-time metrics collection and alerting
 */
class TunnelHealthMonitor extends
/* istanbul ignore next */
(events_1.EventEmitter) {
  logger;
  tunnelManager;
  stateTracker;
  config;
  healthMetrics;
  performanceHistory;
  monitoringIntervals;
  isMonitoring;
  constructor(logger, tunnelManager, stateTracker, config) {
    /* istanbul ignore next */
    cov_2qo9c4urn3().f[0]++;
    cov_2qo9c4urn3().s[4]++;
    super();
    /* istanbul ignore next */
    cov_2qo9c4urn3().s[5]++;
    this.logger = logger;
    /* istanbul ignore next */
    cov_2qo9c4urn3().s[6]++;
    this.tunnelManager = tunnelManager;
    /* istanbul ignore next */
    cov_2qo9c4urn3().s[7]++;
    this.stateTracker = stateTracker;
    /* istanbul ignore next */
    cov_2qo9c4urn3().s[8]++;
    this.healthMetrics = new Map();
    /* istanbul ignore next */
    cov_2qo9c4urn3().s[9]++;
    this.performanceHistory = new Map();
    /* istanbul ignore next */
    cov_2qo9c4urn3().s[10]++;
    this.monitoringIntervals = new Map();
    /* istanbul ignore next */
    cov_2qo9c4urn3().s[11]++;
    this.isMonitoring = false;
    // Default configuration
    /* istanbul ignore next */
    cov_2qo9c4urn3().s[12]++;
    this.config = {
      checkInterval: 30000,
      // 30 seconds
      maxLatency: 1000,
      // 1 second
      maxPacketLoss: 5,
      // 5%
      minThroughput: 1024,
      // 1 KB/s
      failureThreshold: 3,
      healthCheckTimeout: 10000,
      // 10 seconds
      enablePerformanceMonitoring: true,
      ...config
    };
    /* istanbul ignore next */
    cov_2qo9c4urn3().s[13]++;
    this.logger.info('Tunnel Health Monitor initialized', this.config);
  }
  /**
   * Start monitoring all tunnel connections
   */
  startMonitoring() {
    /* istanbul ignore next */
    cov_2qo9c4urn3().f[1]++;
    cov_2qo9c4urn3().s[14]++;
    if (this.isMonitoring) {
      /* istanbul ignore next */
      cov_2qo9c4urn3().b[0][0]++;
      cov_2qo9c4urn3().s[15]++;
      this.logger.warn('Health monitoring is already running');
      /* istanbul ignore next */
      cov_2qo9c4urn3().s[16]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2qo9c4urn3().b[0][1]++;
    }
    cov_2qo9c4urn3().s[17]++;
    this.isMonitoring = true;
    /* istanbul ignore next */
    cov_2qo9c4urn3().s[18]++;
    this.logger.info('Starting tunnel health monitoring');
    // Monitor existing connections
    const connections =
    /* istanbul ignore next */
    (cov_2qo9c4urn3().s[19]++, this.tunnelManager.getAllConnections());
    /* istanbul ignore next */
    cov_2qo9c4urn3().s[20]++;
    for (const connection of connections) {
      /* istanbul ignore next */
      cov_2qo9c4urn3().s[21]++;
      this.startMonitoringConnection(connection.id);
    }
    // Listen for new connections
    /* istanbul ignore next */
    cov_2qo9c4urn3().s[22]++;
    this.tunnelManager.on('tunnelConnected', connection => {
      /* istanbul ignore next */
      cov_2qo9c4urn3().f[2]++;
      cov_2qo9c4urn3().s[23]++;
      this.startMonitoringConnection(connection.id);
    });
    // Listen for disconnections
    /* istanbul ignore next */
    cov_2qo9c4urn3().s[24]++;
    this.tunnelManager.on('tunnelDisconnected', connection => {
      /* istanbul ignore next */
      cov_2qo9c4urn3().f[3]++;
      cov_2qo9c4urn3().s[25]++;
      this.stopMonitoringConnection(connection.id);
    });
    /* istanbul ignore next */
    cov_2qo9c4urn3().s[26]++;
    this.emit('monitoringStarted');
  }
  /**
   * Stop monitoring all tunnel connections
   */
  stopMonitoring() {
    /* istanbul ignore next */
    cov_2qo9c4urn3().f[4]++;
    cov_2qo9c4urn3().s[27]++;
    if (!this.isMonitoring) {
      /* istanbul ignore next */
      cov_2qo9c4urn3().b[1][0]++;
      cov_2qo9c4urn3().s[28]++;
      this.logger.warn('Health monitoring is not running');
      /* istanbul ignore next */
      cov_2qo9c4urn3().s[29]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2qo9c4urn3().b[1][1]++;
    }
    cov_2qo9c4urn3().s[30]++;
    this.isMonitoring = false;
    /* istanbul ignore next */
    cov_2qo9c4urn3().s[31]++;
    this.logger.info('Stopping tunnel health monitoring');
    // Clear all monitoring intervals
    /* istanbul ignore next */
    cov_2qo9c4urn3().s[32]++;
    for (const [connectionId, interval] of this.monitoringIntervals.entries()) {
      /* istanbul ignore next */
      cov_2qo9c4urn3().s[33]++;
      clearInterval(interval);
      /* istanbul ignore next */
      cov_2qo9c4urn3().s[34]++;
      this.monitoringIntervals.delete(connectionId);
    }
    /* istanbul ignore next */
    cov_2qo9c4urn3().s[35]++;
    this.emit('monitoringStopped');
  }
  /**
   * Start monitoring a specific connection
   *
   * @param connectionId - Connection identifier
   */
  startMonitoringConnection(connectionId) {
    /* istanbul ignore next */
    cov_2qo9c4urn3().f[5]++;
    cov_2qo9c4urn3().s[36]++;
    if (this.monitoringIntervals.has(connectionId)) {
      /* istanbul ignore next */
      cov_2qo9c4urn3().b[2][0]++;
      cov_2qo9c4urn3().s[37]++;
      this.logger.debug(`Already monitoring connection: ${connectionId}`);
      /* istanbul ignore next */
      cov_2qo9c4urn3().s[38]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2qo9c4urn3().b[2][1]++;
    }
    cov_2qo9c4urn3().s[39]++;
    this.logger.info(`Starting health monitoring for connection: ${connectionId}`);
    // Initialize health metrics
    /* istanbul ignore next */
    cov_2qo9c4urn3().s[40]++;
    this.initializeHealthMetrics(connectionId);
    // Start periodic health checks
    const interval =
    /* istanbul ignore next */
    (cov_2qo9c4urn3().s[41]++, setInterval(async () => {
      /* istanbul ignore next */
      cov_2qo9c4urn3().f[6]++;
      cov_2qo9c4urn3().s[42]++;
      try {
        /* istanbul ignore next */
        cov_2qo9c4urn3().s[43]++;
        await this.performHealthCheck(connectionId);
      } catch (error) {
        /* istanbul ignore next */
        cov_2qo9c4urn3().s[44]++;
        this.logger.error(`Health check failed for connection ${connectionId}`, error);
      }
    }, this.config.checkInterval));
    /* istanbul ignore next */
    cov_2qo9c4urn3().s[45]++;
    this.monitoringIntervals.set(connectionId, interval);
    // Perform initial health check
    /* istanbul ignore next */
    cov_2qo9c4urn3().s[46]++;
    setTimeout(() => {
      /* istanbul ignore next */
      cov_2qo9c4urn3().f[7]++;
      cov_2qo9c4urn3().s[47]++;
      return this.performHealthCheck(connectionId);
    }, 1000);
  }
  /**
   * Stop monitoring a specific connection
   *
   * @param connectionId - Connection identifier
   */
  stopMonitoringConnection(connectionId) {
    /* istanbul ignore next */
    cov_2qo9c4urn3().f[8]++;
    const interval =
    /* istanbul ignore next */
    (cov_2qo9c4urn3().s[48]++, this.monitoringIntervals.get(connectionId));
    /* istanbul ignore next */
    cov_2qo9c4urn3().s[49]++;
    if (interval) {
      /* istanbul ignore next */
      cov_2qo9c4urn3().b[3][0]++;
      cov_2qo9c4urn3().s[50]++;
      clearInterval(interval);
      /* istanbul ignore next */
      cov_2qo9c4urn3().s[51]++;
      this.monitoringIntervals.delete(connectionId);
      /* istanbul ignore next */
      cov_2qo9c4urn3().s[52]++;
      this.logger.info(`Stopped health monitoring for connection: ${connectionId}`);
    } else
    /* istanbul ignore next */
    {
      cov_2qo9c4urn3().b[3][1]++;
    }
  }
  /**
   * Get health metrics for a connection
   *
   * @param connectionId - Connection identifier
   * @returns Health metrics or undefined
   */
  getHealthMetrics(connectionId) {
    /* istanbul ignore next */
    cov_2qo9c4urn3().f[9]++;
    cov_2qo9c4urn3().s[53]++;
    return this.healthMetrics.get(connectionId);
  }
  /**
   * Get health metrics for all connections
   *
   * @returns Map of all health metrics
   */
  getAllHealthMetrics() {
    /* istanbul ignore next */
    cov_2qo9c4urn3().f[10]++;
    cov_2qo9c4urn3().s[54]++;
    return new Map(this.healthMetrics);
  }
  /**
   * Get performance history for a connection
   *
   * @param connectionId - Connection identifier
   * @param limit - Maximum number of history entries
   * @returns Array of performance metrics
   */
  getPerformanceHistory(connectionId, limit) {
    /* istanbul ignore next */
    cov_2qo9c4urn3().f[11]++;
    const history =
    /* istanbul ignore next */
    (cov_2qo9c4urn3().s[55]++,
    /* istanbul ignore next */
    (cov_2qo9c4urn3().b[4][0]++, this.performanceHistory.get(connectionId)) ||
    /* istanbul ignore next */
    (cov_2qo9c4urn3().b[4][1]++, []));
    /* istanbul ignore next */
    cov_2qo9c4urn3().s[56]++;
    return limit ?
    /* istanbul ignore next */
    (cov_2qo9c4urn3().b[5][0]++, history.slice(-limit)) :
    /* istanbul ignore next */
    (cov_2qo9c4urn3().b[5][1]++, [...history]);
  }
  /**
   * Get overall system health status
   *
   * @returns System health summary
   */
  getSystemHealthStatus() {
    /* istanbul ignore next */
    cov_2qo9c4urn3().f[12]++;
    const allMetrics =
    /* istanbul ignore next */
    (cov_2qo9c4urn3().s[57]++, Array.from(this.healthMetrics.values()));
    const totalConnections =
    /* istanbul ignore next */
    (cov_2qo9c4urn3().s[58]++, allMetrics.length);
    const healthyConnections =
    /* istanbul ignore next */
    (cov_2qo9c4urn3().s[59]++, allMetrics.filter(m => {
      /* istanbul ignore next */
      cov_2qo9c4urn3().f[13]++;
      cov_2qo9c4urn3().s[60]++;
      return m.isHealthy;
    }).length);
    const unhealthyConnections =
    /* istanbul ignore next */
    (cov_2qo9c4urn3().s[61]++, totalConnections - healthyConnections);
    const averageHealthScore =
    /* istanbul ignore next */
    (cov_2qo9c4urn3().s[62]++, totalConnections > 0 ?
    /* istanbul ignore next */
    (cov_2qo9c4urn3().b[6][0]++, allMetrics.reduce((sum, m) => {
      /* istanbul ignore next */
      cov_2qo9c4urn3().f[14]++;
      cov_2qo9c4urn3().s[63]++;
      return sum + m.healthScore;
    }, 0) / totalConnections) :
    /* istanbul ignore next */
    (cov_2qo9c4urn3().b[6][1]++, 0));
    const criticalIssues =
    /* istanbul ignore next */
    (cov_2qo9c4urn3().s[64]++, allMetrics.reduce((sum, m) => {
      /* istanbul ignore next */
      cov_2qo9c4urn3().f[15]++;
      cov_2qo9c4urn3().s[65]++;
      return sum + m.issues.filter(i => {
        /* istanbul ignore next */
        cov_2qo9c4urn3().f[16]++;
        cov_2qo9c4urn3().s[66]++;
        return i.severity === 'CRITICAL';
      }).length;
    }, 0));
    const systemHealthScore =
    /* istanbul ignore next */
    (cov_2qo9c4urn3().s[67]++, Math.max(0, averageHealthScore - criticalIssues * 10));
    /* istanbul ignore next */
    cov_2qo9c4urn3().s[68]++;
    return {
      totalConnections,
      healthyConnections,
      unhealthyConnections,
      averageHealthScore,
      criticalIssues,
      systemHealthScore
    };
  }
  /**
   * Force health check for a connection
   *
   * @param connectionId - Connection identifier
   * @returns Health check results
   */
  async forceHealthCheck(connectionId) {
    /* istanbul ignore next */
    cov_2qo9c4urn3().f[17]++;
    cov_2qo9c4urn3().s[69]++;
    try {
      /* istanbul ignore next */
      cov_2qo9c4urn3().s[70]++;
      await this.performHealthCheck(connectionId);
      /* istanbul ignore next */
      cov_2qo9c4urn3().s[71]++;
      return /* istanbul ignore next */(cov_2qo9c4urn3().b[7][0]++, this.getHealthMetrics(connectionId)) ||
      /* istanbul ignore next */
      (cov_2qo9c4urn3().b[7][1]++, null);
    } catch (error) {
      /* istanbul ignore next */
      cov_2qo9c4urn3().s[72]++;
      this.logger.error(`Forced health check failed for connection ${connectionId}`, error);
      /* istanbul ignore next */
      cov_2qo9c4urn3().s[73]++;
      return null;
    }
  }
  /**
   * Initialize health metrics for a connection
   *
   * @param connectionId - Connection identifier
   */
  initializeHealthMetrics(connectionId) {
    /* istanbul ignore next */
    cov_2qo9c4urn3().f[18]++;
    const metrics =
    /* istanbul ignore next */
    (cov_2qo9c4urn3().s[74]++, {
      connectionId,
      isHealthy: false,
      latency: 0,
      throughput: 0,
      packetLoss: 0,
      uptime: 0,
      lastHealthCheck: new Date(),
      consecutiveFailures: 0,
      healthScore: 0,
      issues: []
    });
    /* istanbul ignore next */
    cov_2qo9c4urn3().s[75]++;
    this.healthMetrics.set(connectionId, metrics);
    /* istanbul ignore next */
    cov_2qo9c4urn3().s[76]++;
    this.performanceHistory.set(connectionId, []);
  }
  /**
   * Perform comprehensive health check for a connection
   *
   * @param connectionId - Connection identifier
   */
  async performHealthCheck(connectionId) {
    /* istanbul ignore next */
    cov_2qo9c4urn3().f[19]++;
    const connection =
    /* istanbul ignore next */
    (cov_2qo9c4urn3().s[77]++, this.tunnelManager.getConnection(connectionId));
    /* istanbul ignore next */
    cov_2qo9c4urn3().s[78]++;
    if (!connection) {
      /* istanbul ignore next */
      cov_2qo9c4urn3().b[8][0]++;
      cov_2qo9c4urn3().s[79]++;
      this.logger.warn(`Connection not found for health check: ${connectionId}`);
      /* istanbul ignore next */
      cov_2qo9c4urn3().s[80]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2qo9c4urn3().b[8][1]++;
    }
    const metrics =
    /* istanbul ignore next */
    (cov_2qo9c4urn3().s[81]++, this.healthMetrics.get(connectionId));
    /* istanbul ignore next */
    cov_2qo9c4urn3().s[82]++;
    if (!metrics) {
      /* istanbul ignore next */
      cov_2qo9c4urn3().b[9][0]++;
      cov_2qo9c4urn3().s[83]++;
      this.logger.warn(`Health metrics not found for connection: ${connectionId}`);
      /* istanbul ignore next */
      cov_2qo9c4urn3().s[84]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2qo9c4urn3().b[9][1]++;
    }
    cov_2qo9c4urn3().s[85]++;
    try {
      /* istanbul ignore next */
      cov_2qo9c4urn3().s[86]++;
      // Update last health check timestamp
      metrics.lastHealthCheck = new Date();
      // Check connection state
      /* istanbul ignore next */
      cov_2qo9c4urn3().s[87]++;
      if (connection.state !== ssh_tunnel_manager_1.TunnelState.CONNECTED) {
        /* istanbul ignore next */
        cov_2qo9c4urn3().b[10][0]++;
        cov_2qo9c4urn3().s[88]++;
        this.markConnectionUnhealthy(metrics, 'Connection not in CONNECTED state');
        /* istanbul ignore next */
        cov_2qo9c4urn3().s[89]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2qo9c4urn3().b[10][1]++;
      }
      // Perform latency test
      const latency =
      /* istanbul ignore next */
      (cov_2qo9c4urn3().s[90]++, await this.measureLatency(connection));
      /* istanbul ignore next */
      cov_2qo9c4urn3().s[91]++;
      metrics.latency = latency;
      // Perform throughput test
      const throughput =
      /* istanbul ignore next */
      (cov_2qo9c4urn3().s[92]++, await this.measureThroughput(connection));
      /* istanbul ignore next */
      cov_2qo9c4urn3().s[93]++;
      metrics.throughput = throughput;
      // Measure packet loss
      const packetLoss =
      /* istanbul ignore next */
      (cov_2qo9c4urn3().s[94]++, await this.measurePacketLoss(connection));
      /* istanbul ignore next */
      cov_2qo9c4urn3().s[95]++;
      metrics.packetLoss = packetLoss;
      // Calculate uptime
      /* istanbul ignore next */
      cov_2qo9c4urn3().s[96]++;
      if (connection.connectedAt) {
        /* istanbul ignore next */
        cov_2qo9c4urn3().b[11][0]++;
        cov_2qo9c4urn3().s[97]++;
        metrics.uptime = Date.now() - connection.connectedAt.getTime();
      } else
      /* istanbul ignore next */
      {
        cov_2qo9c4urn3().b[11][1]++;
      }
      // Analyze health issues
      const issues =
      /* istanbul ignore next */
      (cov_2qo9c4urn3().s[98]++, this.analyzeHealthIssues(metrics));
      /* istanbul ignore next */
      cov_2qo9c4urn3().s[99]++;
      metrics.issues = issues;
      // Calculate health score
      /* istanbul ignore next */
      cov_2qo9c4urn3().s[100]++;
      metrics.healthScore = this.calculateHealthScore(metrics);
      // Determine overall health status
      const wasHealthy =
      /* istanbul ignore next */
      (cov_2qo9c4urn3().s[101]++, metrics.isHealthy);
      /* istanbul ignore next */
      cov_2qo9c4urn3().s[102]++;
      metrics.isHealthy = this.determineHealthStatus(metrics);
      // Handle health status changes
      /* istanbul ignore next */
      cov_2qo9c4urn3().s[103]++;
      if (metrics.isHealthy) {
        /* istanbul ignore next */
        cov_2qo9c4urn3().b[12][0]++;
        cov_2qo9c4urn3().s[104]++;
        metrics.consecutiveFailures = 0;
        /* istanbul ignore next */
        cov_2qo9c4urn3().s[105]++;
        if (!wasHealthy) {
          /* istanbul ignore next */
          cov_2qo9c4urn3().b[13][0]++;
          cov_2qo9c4urn3().s[106]++;
          this.logger.info(`Connection health restored: ${connectionId}`);
          /* istanbul ignore next */
          cov_2qo9c4urn3().s[107]++;
          this.emit('connectionHealthy', connection, metrics);
        } else
        /* istanbul ignore next */
        {
          cov_2qo9c4urn3().b[13][1]++;
        }
      } else {
        /* istanbul ignore next */
        cov_2qo9c4urn3().b[12][1]++;
        cov_2qo9c4urn3().s[108]++;
        metrics.consecutiveFailures++;
        /* istanbul ignore next */
        cov_2qo9c4urn3().s[109]++;
        if (wasHealthy) {
          /* istanbul ignore next */
          cov_2qo9c4urn3().b[14][0]++;
          cov_2qo9c4urn3().s[110]++;
          this.logger.warn(`Connection health degraded: ${connectionId}`, {
            issues: issues.map(i => {
              /* istanbul ignore next */
              cov_2qo9c4urn3().f[20]++;
              cov_2qo9c4urn3().s[111]++;
              return i.message;
            })
          });
          /* istanbul ignore next */
          cov_2qo9c4urn3().s[112]++;
          this.emit('connectionUnhealthy', connection, metrics);
        } else
        /* istanbul ignore next */
        {
          cov_2qo9c4urn3().b[14][1]++;
        }
      }
      // Store performance metrics
      /* istanbul ignore next */
      cov_2qo9c4urn3().s[113]++;
      if (this.config.enablePerformanceMonitoring) {
        /* istanbul ignore next */
        cov_2qo9c4urn3().b[15][0]++;
        cov_2qo9c4urn3().s[114]++;
        this.storePerformanceMetrics(connectionId, {
          timestamp: new Date(),
          latency,
          throughput,
          packetLoss,
          cpuUsage: await this.getCPUUsage(),
          memoryUsage: await this.getMemoryUsage(),
          networkUtilization: await this.getNetworkUtilization()
        });
      } else
      /* istanbul ignore next */
      {
        cov_2qo9c4urn3().b[15][1]++;
      }
      // Emit health check completed event
      cov_2qo9c4urn3().s[115]++;
      this.emit('healthCheckCompleted', connection, metrics);
    } catch (error) {
      /* istanbul ignore next */
      cov_2qo9c4urn3().s[116]++;
      this.logger.error(`Health check failed for connection ${connectionId}`, error);
      /* istanbul ignore next */
      cov_2qo9c4urn3().s[117]++;
      this.markConnectionUnhealthy(metrics, `Health check error: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_2qo9c4urn3().b[16][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2qo9c4urn3().b[16][1]++, String(error))}`);
    }
  }
  /**
   * Measure connection latency using ping-like test
   *
   * @param connection - Tunnel connection
   * @returns Latency in milliseconds
   */
  async measureLatency(connection) {
    /* istanbul ignore next */
    cov_2qo9c4urn3().f[21]++;
    const startTime =
    /* istanbul ignore next */
    (cov_2qo9c4urn3().s[118]++, Date.now());
    /* istanbul ignore next */
    cov_2qo9c4urn3().s[119]++;
    try {
      // Simple TCP connection test to local tunnel port
      const net =
      /* istanbul ignore next */
      (cov_2qo9c4urn3().s[120]++, await import('net'));
      /* istanbul ignore next */
      cov_2qo9c4urn3().s[121]++;
      return new Promise((resolve, reject) => {
        /* istanbul ignore next */
        cov_2qo9c4urn3().f[22]++;
        const socket =
        /* istanbul ignore next */
        (cov_2qo9c4urn3().s[122]++, new net.Socket());
        const timeout =
        /* istanbul ignore next */
        (cov_2qo9c4urn3().s[123]++, setTimeout(() => {
          /* istanbul ignore next */
          cov_2qo9c4urn3().f[23]++;
          cov_2qo9c4urn3().s[124]++;
          socket.destroy();
          /* istanbul ignore next */
          cov_2qo9c4urn3().s[125]++;
          reject(new Error('Latency measurement timeout'));
        }, this.config.healthCheckTimeout));
        /* istanbul ignore next */
        cov_2qo9c4urn3().s[126]++;
        socket.connect(connection.config.localPort, 'localhost', () => {
          /* istanbul ignore next */
          cov_2qo9c4urn3().f[24]++;
          const latency =
          /* istanbul ignore next */
          (cov_2qo9c4urn3().s[127]++, Date.now() - startTime);
          /* istanbul ignore next */
          cov_2qo9c4urn3().s[128]++;
          clearTimeout(timeout);
          /* istanbul ignore next */
          cov_2qo9c4urn3().s[129]++;
          socket.destroy();
          /* istanbul ignore next */
          cov_2qo9c4urn3().s[130]++;
          resolve(latency);
        });
        /* istanbul ignore next */
        cov_2qo9c4urn3().s[131]++;
        socket.on('error', error => {
          /* istanbul ignore next */
          cov_2qo9c4urn3().f[25]++;
          cov_2qo9c4urn3().s[132]++;
          clearTimeout(timeout);
          /* istanbul ignore next */
          cov_2qo9c4urn3().s[133]++;
          reject(error);
        });
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2qo9c4urn3().s[134]++;
      this.logger.debug(`Latency measurement failed for ${connection.id}`, error);
      /* istanbul ignore next */
      cov_2qo9c4urn3().s[135]++;
      return 9999; // High latency indicates problem
    }
  }
  /**
   * Measure connection throughput
   *
   * @param connection - Tunnel connection
   * @returns Throughput in bytes per second
   */
  async measureThroughput(connection) {
    /* istanbul ignore next */
    cov_2qo9c4urn3().f[26]++;
    cov_2qo9c4urn3().s[136]++;
    try {
      // Simple throughput test by sending small data packet
      const net =
      /* istanbul ignore next */
      (cov_2qo9c4urn3().s[137]++, await import('net'));
      const testData =
      /* istanbul ignore next */
      (cov_2qo9c4urn3().s[138]++, Buffer.alloc(1024, 'A')); // 1KB test data
      const startTime =
      /* istanbul ignore next */
      (cov_2qo9c4urn3().s[139]++, Date.now());
      /* istanbul ignore next */
      cov_2qo9c4urn3().s[140]++;
      return new Promise((resolve, reject) => {
        /* istanbul ignore next */
        cov_2qo9c4urn3().f[27]++;
        const socket =
        /* istanbul ignore next */
        (cov_2qo9c4urn3().s[141]++, new net.Socket());
        const timeout =
        /* istanbul ignore next */
        (cov_2qo9c4urn3().s[142]++, setTimeout(() => {
          /* istanbul ignore next */
          cov_2qo9c4urn3().f[28]++;
          cov_2qo9c4urn3().s[143]++;
          socket.destroy();
          /* istanbul ignore next */
          cov_2qo9c4urn3().s[144]++;
          reject(new Error('Throughput measurement timeout'));
        }, this.config.healthCheckTimeout));
        let bytesReceived =
        /* istanbul ignore next */
        (cov_2qo9c4urn3().s[145]++, 0);
        /* istanbul ignore next */
        cov_2qo9c4urn3().s[146]++;
        socket.connect(connection.config.localPort, 'localhost', () => {
          /* istanbul ignore next */
          cov_2qo9c4urn3().f[29]++;
          cov_2qo9c4urn3().s[147]++;
          socket.write(testData);
        });
        /* istanbul ignore next */
        cov_2qo9c4urn3().s[148]++;
        socket.on('data', data => {
          /* istanbul ignore next */
          cov_2qo9c4urn3().f[30]++;
          cov_2qo9c4urn3().s[149]++;
          bytesReceived += data.length;
          const duration =
          /* istanbul ignore next */
          (cov_2qo9c4urn3().s[150]++, (Date.now() - startTime) / 1000); // seconds
          const throughput =
          /* istanbul ignore next */
          (cov_2qo9c4urn3().s[151]++, bytesReceived / duration);
          /* istanbul ignore next */
          cov_2qo9c4urn3().s[152]++;
          clearTimeout(timeout);
          /* istanbul ignore next */
          cov_2qo9c4urn3().s[153]++;
          socket.destroy();
          /* istanbul ignore next */
          cov_2qo9c4urn3().s[154]++;
          resolve(throughput);
        });
        /* istanbul ignore next */
        cov_2qo9c4urn3().s[155]++;
        socket.on('error', error => {
          /* istanbul ignore next */
          cov_2qo9c4urn3().f[31]++;
          cov_2qo9c4urn3().s[156]++;
          clearTimeout(timeout);
          /* istanbul ignore next */
          cov_2qo9c4urn3().s[157]++;
          reject(error);
        });
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2qo9c4urn3().s[158]++;
      this.logger.debug(`Throughput measurement failed for ${connection.id}`, error);
      /* istanbul ignore next */
      cov_2qo9c4urn3().s[159]++;
      return 0; // No throughput indicates problem
    }
  }
  /**
   * Measure packet loss percentage
   *
   * @param connection - Tunnel connection
   * @returns Packet loss percentage
   */
  async measurePacketLoss(connection) {
    /* istanbul ignore next */
    cov_2qo9c4urn3().f[32]++;
    cov_2qo9c4urn3().s[160]++;
    try {
      // Simple packet loss test by sending multiple small packets
      const net =
      /* istanbul ignore next */
      (cov_2qo9c4urn3().s[161]++, await import('net'));
      const packetCount =
      /* istanbul ignore next */
      (cov_2qo9c4urn3().s[162]++, 10);
      let packetsReceived =
      /* istanbul ignore next */
      (cov_2qo9c4urn3().s[163]++, 0);
      /* istanbul ignore next */
      cov_2qo9c4urn3().s[164]++;
      for (let i =
      /* istanbul ignore next */
      (cov_2qo9c4urn3().s[165]++, 0); i < packetCount; i++) {
        /* istanbul ignore next */
        cov_2qo9c4urn3().s[166]++;
        try {
          /* istanbul ignore next */
          cov_2qo9c4urn3().s[167]++;
          await new Promise((resolve, reject) => {
            /* istanbul ignore next */
            cov_2qo9c4urn3().f[33]++;
            const socket =
            /* istanbul ignore next */
            (cov_2qo9c4urn3().s[168]++, new net.Socket());
            const timeout =
            /* istanbul ignore next */
            (cov_2qo9c4urn3().s[169]++, setTimeout(() => {
              /* istanbul ignore next */
              cov_2qo9c4urn3().f[34]++;
              cov_2qo9c4urn3().s[170]++;
              socket.destroy();
              /* istanbul ignore next */
              cov_2qo9c4urn3().s[171]++;
              resolve(); // Count as lost packet
            }, 1000));
            /* istanbul ignore next */
            cov_2qo9c4urn3().s[172]++;
            socket.connect(connection.config.localPort, 'localhost', () => {
              /* istanbul ignore next */
              cov_2qo9c4urn3().f[35]++;
              cov_2qo9c4urn3().s[173]++;
              packetsReceived++;
              /* istanbul ignore next */
              cov_2qo9c4urn3().s[174]++;
              clearTimeout(timeout);
              /* istanbul ignore next */
              cov_2qo9c4urn3().s[175]++;
              socket.destroy();
              /* istanbul ignore next */
              cov_2qo9c4urn3().s[176]++;
              resolve();
            });
            /* istanbul ignore next */
            cov_2qo9c4urn3().s[177]++;
            socket.on('error', () => {
              /* istanbul ignore next */
              cov_2qo9c4urn3().f[36]++;
              cov_2qo9c4urn3().s[178]++;
              clearTimeout(timeout);
              /* istanbul ignore next */
              cov_2qo9c4urn3().s[179]++;
              resolve(); // Count as lost packet
            });
          });
        } catch {
          // Packet lost
        }
      }
      const packetLoss =
      /* istanbul ignore next */
      (cov_2qo9c4urn3().s[180]++, (packetCount - packetsReceived) / packetCount * 100);
      /* istanbul ignore next */
      cov_2qo9c4urn3().s[181]++;
      return Math.max(0, Math.min(100, packetLoss));
    } catch (error) {
      /* istanbul ignore next */
      cov_2qo9c4urn3().s[182]++;
      this.logger.debug(`Packet loss measurement failed for ${connection.id}`, error);
      /* istanbul ignore next */
      cov_2qo9c4urn3().s[183]++;
      return 100; // Assume 100% loss on error
    }
  }
  /**
   * Analyze health issues based on metrics
   *
   * @param metrics - Health metrics
   * @returns Array of health issues
   */
  analyzeHealthIssues(metrics) {
    /* istanbul ignore next */
    cov_2qo9c4urn3().f[37]++;
    const issues =
    /* istanbul ignore next */
    (cov_2qo9c4urn3().s[184]++, []);
    const now =
    /* istanbul ignore next */
    (cov_2qo9c4urn3().s[185]++, new Date());
    // Check latency
    /* istanbul ignore next */
    cov_2qo9c4urn3().s[186]++;
    if (metrics.latency > this.config.maxLatency) {
      /* istanbul ignore next */
      cov_2qo9c4urn3().b[17][0]++;
      cov_2qo9c4urn3().s[187]++;
      issues.push({
        type: 'HIGH_LATENCY',
        severity: metrics.latency > this.config.maxLatency * 2 ?
        /* istanbul ignore next */
        (cov_2qo9c4urn3().b[18][0]++, 'HIGH') :
        /* istanbul ignore next */
        (cov_2qo9c4urn3().b[18][1]++, 'MEDIUM'),
        message: `High latency detected: ${metrics.latency}ms (max: ${this.config.maxLatency}ms)`,
        timestamp: now
      });
    } else
    /* istanbul ignore next */
    {
      cov_2qo9c4urn3().b[17][1]++;
    }
    // Check packet loss
    cov_2qo9c4urn3().s[188]++;
    if (metrics.packetLoss > this.config.maxPacketLoss) {
      /* istanbul ignore next */
      cov_2qo9c4urn3().b[19][0]++;
      cov_2qo9c4urn3().s[189]++;
      issues.push({
        type: 'PACKET_LOSS',
        severity: metrics.packetLoss > this.config.maxPacketLoss * 2 ?
        /* istanbul ignore next */
        (cov_2qo9c4urn3().b[20][0]++, 'HIGH') :
        /* istanbul ignore next */
        (cov_2qo9c4urn3().b[20][1]++, 'MEDIUM'),
        message: `High packet loss detected: ${metrics.packetLoss}% (max: ${this.config.maxPacketLoss}%)`,
        timestamp: now
      });
    } else
    /* istanbul ignore next */
    {
      cov_2qo9c4urn3().b[19][1]++;
    }
    // Check throughput
    cov_2qo9c4urn3().s[190]++;
    if (metrics.throughput < this.config.minThroughput) {
      /* istanbul ignore next */
      cov_2qo9c4urn3().b[21][0]++;
      cov_2qo9c4urn3().s[191]++;
      issues.push({
        type: 'LOW_THROUGHPUT',
        severity: metrics.throughput < this.config.minThroughput / 2 ?
        /* istanbul ignore next */
        (cov_2qo9c4urn3().b[22][0]++, 'HIGH') :
        /* istanbul ignore next */
        (cov_2qo9c4urn3().b[22][1]++, 'MEDIUM'),
        message: `Low throughput detected: ${metrics.throughput} bytes/s (min: ${this.config.minThroughput} bytes/s)`,
        timestamp: now
      });
    } else
    /* istanbul ignore next */
    {
      cov_2qo9c4urn3().b[21][1]++;
    }
    // Check connection stability
    cov_2qo9c4urn3().s[192]++;
    if (metrics.consecutiveFailures >= this.config.failureThreshold) {
      /* istanbul ignore next */
      cov_2qo9c4urn3().b[23][0]++;
      cov_2qo9c4urn3().s[193]++;
      issues.push({
        type: 'CONNECTION_UNSTABLE',
        severity: 'CRITICAL',
        message: `Connection unstable: ${metrics.consecutiveFailures} consecutive failures`,
        timestamp: now
      });
    } else
    /* istanbul ignore next */
    {
      cov_2qo9c4urn3().b[23][1]++;
    }
    cov_2qo9c4urn3().s[194]++;
    return issues;
  }
  /**
   * Calculate health score based on metrics
   *
   * @param metrics - Health metrics
   * @returns Health score (0-100)
   */
  calculateHealthScore(metrics) {
    /* istanbul ignore next */
    cov_2qo9c4urn3().f[38]++;
    let score =
    /* istanbul ignore next */
    (cov_2qo9c4urn3().s[195]++, 100);
    // Deduct points for high latency
    /* istanbul ignore next */
    cov_2qo9c4urn3().s[196]++;
    if (metrics.latency > this.config.maxLatency) {
      /* istanbul ignore next */
      cov_2qo9c4urn3().b[24][0]++;
      const latencyPenalty =
      /* istanbul ignore next */
      (cov_2qo9c4urn3().s[197]++, Math.min(30, (metrics.latency / this.config.maxLatency - 1) * 20));
      /* istanbul ignore next */
      cov_2qo9c4urn3().s[198]++;
      score -= latencyPenalty;
    } else
    /* istanbul ignore next */
    {
      cov_2qo9c4urn3().b[24][1]++;
    }
    // Deduct points for packet loss
    cov_2qo9c4urn3().s[199]++;
    if (metrics.packetLoss > this.config.maxPacketLoss) {
      /* istanbul ignore next */
      cov_2qo9c4urn3().b[25][0]++;
      const packetLossPenalty =
      /* istanbul ignore next */
      (cov_2qo9c4urn3().s[200]++, Math.min(40, metrics.packetLoss * 2));
      /* istanbul ignore next */
      cov_2qo9c4urn3().s[201]++;
      score -= packetLossPenalty;
    } else
    /* istanbul ignore next */
    {
      cov_2qo9c4urn3().b[25][1]++;
    }
    // Deduct points for low throughput
    cov_2qo9c4urn3().s[202]++;
    if (metrics.throughput < this.config.minThroughput) {
      /* istanbul ignore next */
      cov_2qo9c4urn3().b[26][0]++;
      const throughputPenalty =
      /* istanbul ignore next */
      (cov_2qo9c4urn3().s[203]++, Math.min(20, (1 - metrics.throughput / this.config.minThroughput) * 20));
      /* istanbul ignore next */
      cov_2qo9c4urn3().s[204]++;
      score -= throughputPenalty;
    } else
    /* istanbul ignore next */
    {
      cov_2qo9c4urn3().b[26][1]++;
    }
    // Deduct points for consecutive failures
    cov_2qo9c4urn3().s[205]++;
    score -= metrics.consecutiveFailures * 10;
    // Deduct points for critical issues
    const criticalIssues =
    /* istanbul ignore next */
    (cov_2qo9c4urn3().s[206]++, metrics.issues.filter(i => {
      /* istanbul ignore next */
      cov_2qo9c4urn3().f[39]++;
      cov_2qo9c4urn3().s[207]++;
      return i.severity === 'CRITICAL';
    }).length);
    /* istanbul ignore next */
    cov_2qo9c4urn3().s[208]++;
    score -= criticalIssues * 20;
    /* istanbul ignore next */
    cov_2qo9c4urn3().s[209]++;
    return Math.max(0, Math.min(100, score));
  }
  /**
   * Determine overall health status
   *
   * @param metrics - Health metrics
   * @returns True if connection is healthy
   */
  determineHealthStatus(metrics) {
    /* istanbul ignore next */
    cov_2qo9c4urn3().f[40]++;
    // Connection is unhealthy if there are critical issues
    const hasCriticalIssues =
    /* istanbul ignore next */
    (cov_2qo9c4urn3().s[210]++, metrics.issues.some(i => {
      /* istanbul ignore next */
      cov_2qo9c4urn3().f[41]++;
      cov_2qo9c4urn3().s[211]++;
      return i.severity === 'CRITICAL';
    }));
    /* istanbul ignore next */
    cov_2qo9c4urn3().s[212]++;
    if (hasCriticalIssues) {
      /* istanbul ignore next */
      cov_2qo9c4urn3().b[27][0]++;
      cov_2qo9c4urn3().s[213]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_2qo9c4urn3().b[27][1]++;
    }
    // Connection is unhealthy if health score is too low
    cov_2qo9c4urn3().s[214]++;
    if (metrics.healthScore < 50) {
      /* istanbul ignore next */
      cov_2qo9c4urn3().b[28][0]++;
      cov_2qo9c4urn3().s[215]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_2qo9c4urn3().b[28][1]++;
    }
    // Connection is unhealthy if too many consecutive failures
    cov_2qo9c4urn3().s[216]++;
    if (metrics.consecutiveFailures >= this.config.failureThreshold) {
      /* istanbul ignore next */
      cov_2qo9c4urn3().b[29][0]++;
      cov_2qo9c4urn3().s[217]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_2qo9c4urn3().b[29][1]++;
    }
    cov_2qo9c4urn3().s[218]++;
    return true;
  }
  /**
   * Mark connection as unhealthy
   *
   * @param metrics - Health metrics
   * @param reason - Reason for marking unhealthy
   */
  markConnectionUnhealthy(metrics, reason) {
    /* istanbul ignore next */
    cov_2qo9c4urn3().f[42]++;
    cov_2qo9c4urn3().s[219]++;
    metrics.isHealthy = false;
    /* istanbul ignore next */
    cov_2qo9c4urn3().s[220]++;
    metrics.consecutiveFailures++;
    /* istanbul ignore next */
    cov_2qo9c4urn3().s[221]++;
    metrics.healthScore = 0;
    /* istanbul ignore next */
    cov_2qo9c4urn3().s[222]++;
    metrics.issues = [{
      type: 'CONNECTION_UNSTABLE',
      severity: 'CRITICAL',
      message: reason,
      timestamp: new Date()
    }];
  }
  /**
   * Store performance metrics in history
   *
   * @param connectionId - Connection identifier
   * @param performanceMetrics - Performance metrics to store
   */
  storePerformanceMetrics(connectionId, performanceMetrics) {
    /* istanbul ignore next */
    cov_2qo9c4urn3().f[43]++;
    cov_2qo9c4urn3().s[223]++;
    if (!this.performanceHistory.has(connectionId)) {
      /* istanbul ignore next */
      cov_2qo9c4urn3().b[30][0]++;
      cov_2qo9c4urn3().s[224]++;
      this.performanceHistory.set(connectionId, []);
    } else
    /* istanbul ignore next */
    {
      cov_2qo9c4urn3().b[30][1]++;
    }
    const history =
    /* istanbul ignore next */
    (cov_2qo9c4urn3().s[225]++, this.performanceHistory.get(connectionId));
    /* istanbul ignore next */
    cov_2qo9c4urn3().s[226]++;
    history.push(performanceMetrics);
    // Limit history size to prevent memory issues
    const maxHistorySize =
    /* istanbul ignore next */
    (cov_2qo9c4urn3().s[227]++, 1000);
    /* istanbul ignore next */
    cov_2qo9c4urn3().s[228]++;
    if (history.length > maxHistorySize) {
      /* istanbul ignore next */
      cov_2qo9c4urn3().b[31][0]++;
      cov_2qo9c4urn3().s[229]++;
      history.splice(0, history.length - maxHistorySize);
    } else
    /* istanbul ignore next */
    {
      cov_2qo9c4urn3().b[31][1]++;
    }
  }
  /**
   * Get current CPU usage
   *
   * @returns CPU usage percentage
   */
  async getCPUUsage() {
    /* istanbul ignore next */
    cov_2qo9c4urn3().f[44]++;
    cov_2qo9c4urn3().s[230]++;
    try {
      const os =
      /* istanbul ignore next */
      (cov_2qo9c4urn3().s[231]++, await import('os'));
      const cpus =
      /* istanbul ignore next */
      (cov_2qo9c4urn3().s[232]++, os.cpus());
      let totalIdle =
      /* istanbul ignore next */
      (cov_2qo9c4urn3().s[233]++, 0);
      let totalTick =
      /* istanbul ignore next */
      (cov_2qo9c4urn3().s[234]++, 0);
      /* istanbul ignore next */
      cov_2qo9c4urn3().s[235]++;
      for (const cpu of cpus) {
        /* istanbul ignore next */
        cov_2qo9c4urn3().s[236]++;
        for (const type in cpu.times) {
          /* istanbul ignore next */
          cov_2qo9c4urn3().s[237]++;
          totalTick += cpu.times[type];
        }
        /* istanbul ignore next */
        cov_2qo9c4urn3().s[238]++;
        totalIdle += cpu.times.idle;
      }
      /* istanbul ignore next */
      cov_2qo9c4urn3().s[239]++;
      return 100 - totalIdle / totalTick * 100;
    } catch {
      /* istanbul ignore next */
      cov_2qo9c4urn3().s[240]++;
      return 0;
    }
  }
  /**
   * Get current memory usage
   *
   * @returns Memory usage percentage
   */
  async getMemoryUsage() {
    /* istanbul ignore next */
    cov_2qo9c4urn3().f[45]++;
    cov_2qo9c4urn3().s[241]++;
    try {
      const os =
      /* istanbul ignore next */
      (cov_2qo9c4urn3().s[242]++, await import('os'));
      const totalMem =
      /* istanbul ignore next */
      (cov_2qo9c4urn3().s[243]++, os.totalmem());
      const freeMem =
      /* istanbul ignore next */
      (cov_2qo9c4urn3().s[244]++, os.freemem());
      /* istanbul ignore next */
      cov_2qo9c4urn3().s[245]++;
      return (totalMem - freeMem) / totalMem * 100;
    } catch {
      /* istanbul ignore next */
      cov_2qo9c4urn3().s[246]++;
      return 0;
    }
  }
  /**
   * Get current network utilization
   *
   * @returns Network utilization percentage
   */
  async getNetworkUtilization() {
    /* istanbul ignore next */
    cov_2qo9c4urn3().f[46]++;
    cov_2qo9c4urn3().s[247]++;
    // Simplified network utilization calculation
    // In a real implementation, this would measure actual network traffic
    return Math.random() * 10; // Placeholder
  }
  /**
   * Cleanup monitoring resources
   */
  cleanup() {
    /* istanbul ignore next */
    cov_2qo9c4urn3().f[47]++;
    cov_2qo9c4urn3().s[248]++;
    this.stopMonitoring();
    /* istanbul ignore next */
    cov_2qo9c4urn3().s[249]++;
    this.healthMetrics.clear();
    /* istanbul ignore next */
    cov_2qo9c4urn3().s[250]++;
    this.performanceHistory.clear();
    /* istanbul ignore next */
    cov_2qo9c4urn3().s[251]++;
    this.logger.info('Tunnel health monitor cleanup completed');
  }
}
/* istanbul ignore next */
cov_2qo9c4urn3().s[252]++;
exports.TunnelHealthMonitor = TunnelHealthMonitor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,