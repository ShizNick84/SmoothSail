aafcebd76bd27548404bee44b7581e89
"use strict";
/**
 * Trailing Stop Manager Tests
 *
 * Comprehensive tests for trailing stop loss functionality
 */
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const trailing_stop_manager_js_1 = require("../trailing-stop-manager.js");
(0, globals_1.describe)('TrailingStopManager', () => {
    let manager;
    let defaultConfig;
    let basePosition;
    let marketConditions;
    (0, globals_1.beforeEach)(() => {
        manager = new trailing_stop_manager_js_1.TrailingStopManager();
        defaultConfig = {
            initialStopLoss: 1.0, // 1% initial stop loss
            trailingDistance: 1.5, // 1.5% trailing distance
            minProfitToTrail: 0.5, // Start trailing at 0.5% profit
            breakevenThreshold: 2.0, // Move to breakeven at 2% profit
            volatilityAdjustment: true
        };
        basePosition = {
            id: 'test-position-1',
            symbol: 'BTC',
            size: 0.1,
            entryPrice: 50000,
            currentPrice: 51000, // 2% profit
            type: 'LONG',
            unrealizedPnL: 100,
            stopLoss: 49500, // 1% below entry
            takeProfit: 53000,
            timestamp: new Date()
        };
        marketConditions = {
            volatility: 0.3,
            trend: 'BULLISH',
            atr: 1000, // $1000 ATR
            supportLevel: 50500,
            resistanceLevel: 52000
        };
    });
    (0, globals_1.describe)('updateTrailingStop', () => {
        (0, globals_1.it)('should not trail if profit is below minimum threshold', () => {
            const lowProfitPosition = {
                ...basePosition,
                currentPrice: 50200 // Only 0.4% profit
            };
            const result = manager.updateTrailingStop(lowProfitPosition, defaultConfig, marketConditions);
            (0, globals_1.expect)(result.updated).toBe(false);
            (0, globals_1.expect)(result.reason).toContain('below minimum');
            (0, globals_1.expect)(result.newStopLoss).toBe(lowProfitPosition.stopLoss);
        });
        (0, globals_1.it)('should update trailing stop when profit exceeds threshold', () => {
            const result = manager.updateTrailingStop(basePosition, defaultConfig, marketConditions);
            (0, globals_1.expect)(result.updated).toBe(true);
            (0, globals_1.expect)(result.newStopLoss).toBeGreaterThan(basePosition.stopLoss);
            (0, globals_1.expect)(result.trailingDistance).toBeGreaterThan(0);
        });
        (0, globals_1.it)('should activate breakeven stop at threshold', () => {
            const result = manager.updateTrailingStop(basePosition, defaultConfig, marketConditions);
            // Position has 2% profit, which equals breakeven threshold
            (0, globals_1.expect)(result.breakevenActive).toBe(true);
            (0, globals_1.expect)(result.reason).toContain('Breakeven');
            (0, globals_1.expect)(result.newStopLoss).toBeGreaterThan(basePosition.entryPrice);
        });
        (0, globals_1.it)('should adjust trailing distance for volatility', () => {
            const highVolatilityConditions = {
                ...marketConditions,
                volatility: 0.8 // High volatility
            };
            const result = manager.updateTrailingStop(basePosition, defaultConfig, highVolatilityConditions);
            // Should use wider trailing distance due to high volatility
            (0, globals_1.expect)(result.trailingDistance).toBeGreaterThan(defaultConfig.trailingDistance);
        });
        (0, globals_1.it)('should consider support levels for long positions', () => {
            const positionNearSupport = {
                ...basePosition,
                currentPrice: 50600 // Close to support at 50500
            };
            const result = manager.updateTrailingStop(positionNearSupport, defaultConfig, marketConditions);
            if (result.updated) {
                // Stop loss should be influenced by support level
                (0, globals_1.expect)(result.newStopLoss).toBeGreaterThanOrEqual(marketConditions.supportLevel * 0.99);
            }
        });
        (0, globals_1.it)('should only move stop loss in favorable direction for long positions', () => {
            const currentStopLoss = basePosition.stopLoss;
            const result = manager.updateTrailingStop(basePosition, defaultConfig, marketConditions);
            if (result.updated) {
                (0, globals_1.expect)(result.newStopLoss).toBeGreaterThan(currentStopLoss);
            }
        });
        (0, globals_1.it)('should handle short positions correctly', () => {
            const shortPosition = {
                ...basePosition,
                type: 'SHORT',
                entryPrice: 50000,
                currentPrice: 49000, // 2% profit for short
                stopLoss: 50500 // 1% above entry
            };
            const result = manager.updateTrailingStop(shortPosition, defaultConfig, marketConditions);
            if (result.updated) {
                // For short positions, stop loss should move down
                (0, globals_1.expect)(result.newStopLoss).toBeLessThan(shortPosition.stopLoss);
            }
        });
    });
    (0, globals_1.describe)('calculateInitialStopLoss', () => {
        (0, globals_1.it)('should calculate correct initial stop loss for long position', () => {
            const initialStop = manager.calculateInitialStopLoss(50000, 'LONG', defaultConfig, marketConditions);
            // Should be approximately 1% below entry (adjusted for volatility and ATR)
            (0, globals_1.expect)(initialStop).toBeLessThan(50000);
            (0, globals_1.expect)(initialStop).toBeGreaterThan(48000); // Reasonable range
        });
        (0, globals_1.it)('should calculate correct initial stop loss for short position', () => {
            const initialStop = manager.calculateInitialStopLoss(50000, 'SHORT', defaultConfig, marketConditions);
            // Should be above entry price for short position
            (0, globals_1.expect)(initialStop).toBeGreaterThan(50000);
            (0, globals_1.expect)(initialStop).toBeLessThan(52000); // Reasonable range
        });
        (0, globals_1.it)('should adjust for high volatility', () => {
            const highVolatilityConditions = {
                ...marketConditions,
                volatility: 0.8,
                atr: 2000 // Higher ATR
            };
            const normalStop = manager.calculateInitialStopLoss(50000, 'LONG', defaultConfig, marketConditions);
            const volatilityAdjustedStop = manager.calculateInitialStopLoss(50000, 'LONG', defaultConfig, highVolatilityConditions);
            // High volatility should result in wider stop loss
            (0, globals_1.expect)(volatilityAdjustedStop).toBeLessThan(normalStop);
        });
    });
    (0, globals_1.describe)('optimizeStopLoss', () => {
        (0, globals_1.it)('should widen stop loss in high volatility', () => {
            const highVolatilityConditions = {
                ...marketConditions,
                volatility: 0.8,
                atr: 2000
            };
            const tightStopPosition = {
                ...basePosition,
                stopLoss: 50800 // Very tight stop
            };
            const result = manager.optimizeStopLoss(tightStopPosition, defaultConfig, highVolatilityConditions);
            (0, globals_1.expect)(result.optimizedStopLoss).toBeLessThan(tightStopPosition.stopLoss);
            (0, globals_1.expect)(result.reason).toContain('volatility');
        });
        (0, globals_1.it)('should optimize stop loss to support level', () => {
            const result = manager.optimizeStopLoss(basePosition, defaultConfig, marketConditions);
            if (marketConditions.supportLevel && result.optimizedStopLoss !== basePosition.stopLoss) {
                (0, globals_1.expect)(result.reason).toContain('support');
            }
        });
        (0, globals_1.it)('should return current stop if already optimal', () => {
            const optimalPosition = {
                ...basePosition,
                stopLoss: 50000 // Already at a good level
            };
            const result = manager.optimizeStopLoss(optimalPosition, defaultConfig, marketConditions);
            (0, globals_1.expect)(result.optimizedStopLoss).toBe(optimalPosition.stopLoss);
            (0, globals_1.expect)(result.reason).toContain('optimal');
        });
    });
    (0, globals_1.describe)('trailing stop history and statistics', () => {
        (0, globals_1.it)('should record trailing stop updates', () => {
            manager.updateTrailingStop(basePosition, defaultConfig, marketConditions);
            const history = manager.getTrailingStopHistory(basePosition.id);
            (0, globals_1.expect)(history.length).toBeGreaterThan(0);
            const lastUpdate = history[history.length - 1];
            (0, globals_1.expect)(lastUpdate.positionId).toBe(basePosition.id);
            (0, globals_1.expect)(lastUpdate.previousStopLoss).toBe(basePosition.stopLoss);
        });
        (0, globals_1.it)('should calculate trailing stop statistics', () => {
            // Generate multiple updates
            for (let i = 0; i < 5; i++) {
                const updatedPosition = {
                    ...basePosition,
                    currentPrice: 51000 + (i * 100)
                };
                manager.updateTrailingStop(updatedPosition, defaultConfig, marketConditions);
            }
            const stats = manager.getTrailingStopStatistics(basePosition.id);
            (0, globals_1.expect)(stats.totalUpdates).toBeGreaterThan(0);
            (0, globals_1.expect)(stats.averageTrailingDistance).toBeGreaterThan(0);
            (0, globals_1.expect)(stats.breakevenActivations).toBeGreaterThanOrEqual(0);
        });
        (0, globals_1.it)('should clear trailing stop history', () => {
            manager.updateTrailingStop(basePosition, defaultConfig, marketConditions);
            let history = manager.getTrailingStopHistory(basePosition.id);
            (0, globals_1.expect)(history.length).toBeGreaterThan(0);
            manager.clearTrailingStopHistory(basePosition.id);
            history = manager.getTrailingStopHistory(basePosition.id);
            (0, globals_1.expect)(history.length).toBe(0);
        });
        (0, globals_1.it)('should limit history to 100 updates', () => {
            // Generate 150 updates
            for (let i = 0; i < 150; i++) {
                const updatedPosition = {
                    ...basePosition,
                    currentPrice: 51000 + i,
                    stopLoss: 49500 + i
                };
                manager.updateTrailingStop(updatedPosition, defaultConfig, marketConditions);
            }
            const history = manager.getTrailingStopHistory(basePosition.id);
            (0, globals_1.expect)(history.length).toBeLessThanOrEqual(100);
        });
    });
    (0, globals_1.describe)('edge cases', () => {
        (0, globals_1.it)('should handle zero ATR', () => {
            const zeroATRConditions = {
                ...marketConditions,
                atr: 0
            };
            const result = manager.updateTrailingStop(basePosition, defaultConfig, zeroATRConditions);
            (0, globals_1.expect)(result).toBeDefined();
        });
        (0, globals_1.it)('should handle position at breakeven', () => {
            const breakevenPosition = {
                ...basePosition,
                currentPrice: 50000 // Exactly at entry
            };
            const result = manager.updateTrailingStop(breakevenPosition, defaultConfig, marketConditions);
            (0, globals_1.expect)(result.updated).toBe(false);
        });
        (0, globals_1.it)('should handle very high profit position', () => {
            const highProfitPosition = {
                ...basePosition,
                currentPrice: 60000 // 20% profit
            };
            const result = manager.updateTrailingStop(highProfitPosition, defaultConfig, marketConditions);
            (0, globals_1.expect)(result.breakevenActive).toBe(true);
            (0, globals_1.expect)(result.newStopLoss).toBeGreaterThan(basePosition.entryPrice);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,