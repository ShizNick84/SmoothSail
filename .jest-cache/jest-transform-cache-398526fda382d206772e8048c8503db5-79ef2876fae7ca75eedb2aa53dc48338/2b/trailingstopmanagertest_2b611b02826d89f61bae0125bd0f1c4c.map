{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\risk\\__tests__\\trailing-stop-manager.test.ts","mappings":";AAAA;;;;GAIG;;AAEH,2CAAiE;AACjE,0EAAoF;AAGpF,IAAA,kBAAQ,EAAC,qBAAqB,EAAE,GAAG,EAAE;IACnC,IAAI,OAA4B,CAAC;IACjC,IAAI,aAAiC,CAAC;IACtC,IAAI,YAAsB,CAAC;IAC3B,IAAI,gBAAkC,CAAC;IAEvC,IAAA,oBAAU,EAAC,GAAG,EAAE;QACd,OAAO,GAAG,IAAI,8CAAmB,EAAE,CAAC;QAEpC,aAAa,GAAG;YACd,eAAe,EAAE,GAAG,EAAE,uBAAuB;YAC7C,gBAAgB,EAAE,GAAG,EAAE,yBAAyB;YAChD,gBAAgB,EAAE,GAAG,EAAE,gCAAgC;YACvD,kBAAkB,EAAE,GAAG,EAAE,iCAAiC;YAC1D,oBAAoB,EAAE,IAAI;SAC3B,CAAC;QAEF,YAAY,GAAG;YACb,EAAE,EAAE,iBAAiB;YACrB,MAAM,EAAE,KAAK;YACb,IAAI,EAAE,GAAG;YACT,UAAU,EAAE,KAAK;YACjB,YAAY,EAAE,KAAK,EAAE,YAAY;YACjC,IAAI,EAAE,MAAM;YACZ,aAAa,EAAE,GAAG;YAClB,QAAQ,EAAE,KAAK,EAAE,iBAAiB;YAClC,UAAU,EAAE,KAAK;YACjB,SAAS,EAAE,IAAI,IAAI,EAAE;SACtB,CAAC;QAEF,gBAAgB,GAAG;YACjB,UAAU,EAAE,GAAG;YACf,KAAK,EAAE,SAAS;YAChB,GAAG,EAAE,IAAI,EAAE,YAAY;YACvB,YAAY,EAAE,KAAK;YACnB,eAAe,EAAE,KAAK;SACvB,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,oBAAoB,EAAE,GAAG,EAAE;QAClC,IAAA,YAAE,EAAC,uDAAuD,EAAE,GAAG,EAAE;YAC/D,MAAM,iBAAiB,GAAG;gBACxB,GAAG,YAAY;gBACf,YAAY,EAAE,KAAK,CAAC,mBAAmB;aACxC,CAAC;YAEF,MAAM,MAAM,GAAG,OAAO,CAAC,kBAAkB,CAAC,iBAAiB,EAAE,aAAa,EAAE,gBAAgB,CAAC,CAAC;YAE9F,IAAA,gBAAM,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACnC,IAAA,gBAAM,EAAC,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;YACjD,IAAA,gBAAM,EAAC,MAAM,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;QAC9D,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,2DAA2D,EAAE,GAAG,EAAE;YACnE,MAAM,MAAM,GAAG,OAAO,CAAC,kBAAkB,CAAC,YAAY,EAAE,aAAa,EAAE,gBAAgB,CAAC,CAAC;YAEzF,IAAA,gBAAM,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAClC,IAAA,gBAAM,EAAC,MAAM,CAAC,WAAW,CAAC,CAAC,eAAe,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;YAClE,IAAA,gBAAM,EAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,6CAA6C,EAAE,GAAG,EAAE;YACrD,MAAM,MAAM,GAAG,OAAO,CAAC,kBAAkB,CAAC,YAAY,EAAE,aAAa,EAAE,gBAAgB,CAAC,CAAC;YAEzF,2DAA2D;YAC3D,IAAA,gBAAM,EAAC,MAAM,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC1C,IAAA,gBAAM,EAAC,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;YAC7C,IAAA,gBAAM,EAAC,MAAM,CAAC,WAAW,CAAC,CAAC,eAAe,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;QACtE,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,gDAAgD,EAAE,GAAG,EAAE;YACxD,MAAM,wBAAwB,GAAG;gBAC/B,GAAG,gBAAgB;gBACnB,UAAU,EAAE,GAAG,CAAC,kBAAkB;aACnC,CAAC;YAEF,MAAM,MAAM,GAAG,OAAO,CAAC,kBAAkB,CAAC,YAAY,EAAE,aAAa,EAAE,wBAAwB,CAAC,CAAC;YAEjG,4DAA4D;YAC5D,IAAA,gBAAM,EAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,eAAe,CAAC,aAAa,CAAC,gBAAgB,CAAC,CAAC;QAClF,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,mDAAmD,EAAE,GAAG,EAAE;YAC3D,MAAM,mBAAmB,GAAG;gBAC1B,GAAG,YAAY;gBACf,YAAY,EAAE,KAAK,CAAC,4BAA4B;aACjD,CAAC;YAEF,MAAM,MAAM,GAAG,OAAO,CAAC,kBAAkB,CAAC,mBAAmB,EAAE,aAAa,EAAE,gBAAgB,CAAC,CAAC;YAEhG,IAAI,MAAM,CAAC,OAAO,EAAE,CAAC;gBACnB,kDAAkD;gBAClD,IAAA,gBAAM,EAAC,MAAM,CAAC,WAAW,CAAC,CAAC,sBAAsB,CAAC,gBAAgB,CAAC,YAAa,GAAG,IAAI,CAAC,CAAC;YAC3F,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,sEAAsE,EAAE,GAAG,EAAE;YAC9E,MAAM,eAAe,GAAG,YAAY,CAAC,QAAQ,CAAC;YAC9C,MAAM,MAAM,GAAG,OAAO,CAAC,kBAAkB,CAAC,YAAY,EAAE,aAAa,EAAE,gBAAgB,CAAC,CAAC;YAEzF,IAAI,MAAM,CAAC,OAAO,EAAE,CAAC;gBACnB,IAAA,gBAAM,EAAC,MAAM,CAAC,WAAW,CAAC,CAAC,eAAe,CAAC,eAAe,CAAC,CAAC;YAC9D,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,yCAAyC,EAAE,GAAG,EAAE;YACjD,MAAM,aAAa,GAAa;gBAC9B,GAAG,YAAY;gBACf,IAAI,EAAE,OAAO;gBACb,UAAU,EAAE,KAAK;gBACjB,YAAY,EAAE,KAAK,EAAE,sBAAsB;gBAC3C,QAAQ,EAAE,KAAK,CAAC,iBAAiB;aAClC,CAAC;YAEF,MAAM,MAAM,GAAG,OAAO,CAAC,kBAAkB,CAAC,aAAa,EAAE,aAAa,EAAE,gBAAgB,CAAC,CAAC;YAE1F,IAAI,MAAM,CAAC,OAAO,EAAE,CAAC;gBACnB,kDAAkD;gBAClD,IAAA,gBAAM,EAAC,MAAM,CAAC,WAAW,CAAC,CAAC,YAAY,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YAClE,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,0BAA0B,EAAE,GAAG,EAAE;QACxC,IAAA,YAAE,EAAC,8DAA8D,EAAE,GAAG,EAAE;YACtE,MAAM,WAAW,GAAG,OAAO,CAAC,wBAAwB,CAClD,KAAK,EACL,MAAM,EACN,aAAa,EACb,gBAAgB,CACjB,CAAC;YAEF,2EAA2E;YAC3E,IAAA,gBAAM,EAAC,WAAW,CAAC,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;YACxC,IAAA,gBAAM,EAAC,WAAW,CAAC,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC,mBAAmB;QACjE,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,+DAA+D,EAAE,GAAG,EAAE;YACvE,MAAM,WAAW,GAAG,OAAO,CAAC,wBAAwB,CAClD,KAAK,EACL,OAAO,EACP,aAAa,EACb,gBAAgB,CACjB,CAAC;YAEF,iDAAiD;YACjD,IAAA,gBAAM,EAAC,WAAW,CAAC,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;YAC3C,IAAA,gBAAM,EAAC,WAAW,CAAC,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,mBAAmB;QAC9D,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,mCAAmC,EAAE,GAAG,EAAE;YAC3C,MAAM,wBAAwB,GAAG;gBAC/B,GAAG,gBAAgB;gBACnB,UAAU,EAAE,GAAG;gBACf,GAAG,EAAE,IAAI,CAAC,aAAa;aACxB,CAAC;YAEF,MAAM,UAAU,GAAG,OAAO,CAAC,wBAAwB,CAAC,KAAK,EAAE,MAAM,EAAE,aAAa,EAAE,gBAAgB,CAAC,CAAC;YACpG,MAAM,sBAAsB,GAAG,OAAO,CAAC,wBAAwB,CAAC,KAAK,EAAE,MAAM,EAAE,aAAa,EAAE,wBAAwB,CAAC,CAAC;YAExH,mDAAmD;YACnD,IAAA,gBAAM,EAAC,sBAAsB,CAAC,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,kBAAkB,EAAE,GAAG,EAAE;QAChC,IAAA,YAAE,EAAC,2CAA2C,EAAE,GAAG,EAAE;YACnD,MAAM,wBAAwB,GAAG;gBAC/B,GAAG,gBAAgB;gBACnB,UAAU,EAAE,GAAG;gBACf,GAAG,EAAE,IAAI;aACV,CAAC;YAEF,MAAM,iBAAiB,GAAG;gBACxB,GAAG,YAAY;gBACf,QAAQ,EAAE,KAAK,CAAC,kBAAkB;aACnC,CAAC;YAEF,MAAM,MAAM,GAAG,OAAO,CAAC,gBAAgB,CAAC,iBAAiB,EAAE,aAAa,EAAE,wBAAwB,CAAC,CAAC;YAEpG,IAAA,gBAAM,EAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,YAAY,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;YAC1E,IAAA,gBAAM,EAAC,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,4CAA4C,EAAE,GAAG,EAAE;YACpD,MAAM,MAAM,GAAG,OAAO,CAAC,gBAAgB,CAAC,YAAY,EAAE,aAAa,EAAE,gBAAgB,CAAC,CAAC;YAEvF,IAAI,gBAAgB,CAAC,YAAY,IAAI,MAAM,CAAC,iBAAiB,KAAK,YAAY,CAAC,QAAQ,EAAE,CAAC;gBACxF,IAAA,gBAAM,EAAC,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;YAC7C,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,+CAA+C,EAAE,GAAG,EAAE;YACvD,MAAM,eAAe,GAAG;gBACtB,GAAG,YAAY;gBACf,QAAQ,EAAE,KAAK,CAAC,0BAA0B;aAC3C,CAAC;YAEF,MAAM,MAAM,GAAG,OAAO,CAAC,gBAAgB,CAAC,eAAe,EAAE,aAAa,EAAE,gBAAgB,CAAC,CAAC;YAE1F,IAAA,gBAAM,EAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;YAChE,IAAA,gBAAM,EAAC,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,sCAAsC,EAAE,GAAG,EAAE;QACpD,IAAA,YAAE,EAAC,qCAAqC,EAAE,GAAG,EAAE;YAC7C,OAAO,CAAC,kBAAkB,CAAC,YAAY,EAAE,aAAa,EAAE,gBAAgB,CAAC,CAAC;YAE1E,MAAM,OAAO,GAAG,OAAO,CAAC,sBAAsB,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;YAChE,IAAA,gBAAM,EAAC,OAAO,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YAE1C,MAAM,UAAU,GAAG,OAAO,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YAC/C,IAAA,gBAAM,EAAC,UAAU,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;YACpD,IAAA,gBAAM,EAAC,UAAU,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;QAClE,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,2CAA2C,EAAE,GAAG,EAAE;YACnD,4BAA4B;YAC5B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC3B,MAAM,eAAe,GAAG;oBACtB,GAAG,YAAY;oBACf,YAAY,EAAE,KAAK,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC;iBAChC,CAAC;gBACF,OAAO,CAAC,kBAAkB,CAAC,eAAe,EAAE,aAAa,EAAE,gBAAgB,CAAC,CAAC;YAC/E,CAAC;YAED,MAAM,KAAK,GAAG,OAAO,CAAC,yBAAyB,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;YAEjE,IAAA,gBAAM,EAAC,KAAK,CAAC,YAAY,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YAC9C,IAAA,gBAAM,EAAC,KAAK,CAAC,uBAAuB,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YACzD,IAAA,gBAAM,EAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,oCAAoC,EAAE,GAAG,EAAE;YAC5C,OAAO,CAAC,kBAAkB,CAAC,YAAY,EAAE,aAAa,EAAE,gBAAgB,CAAC,CAAC;YAE1E,IAAI,OAAO,GAAG,OAAO,CAAC,sBAAsB,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;YAC9D,IAAA,gBAAM,EAAC,OAAO,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YAE1C,OAAO,CAAC,wBAAwB,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;YAElD,OAAO,GAAG,OAAO,CAAC,sBAAsB,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;YAC1D,IAAA,gBAAM,EAAC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,qCAAqC,EAAE,GAAG,EAAE;YAC7C,uBAAuB;YACvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC7B,MAAM,eAAe,GAAG;oBACtB,GAAG,YAAY;oBACf,YAAY,EAAE,KAAK,GAAG,CAAC;oBACvB,QAAQ,EAAE,KAAK,GAAG,CAAC;iBACpB,CAAC;gBACF,OAAO,CAAC,kBAAkB,CAAC,eAAe,EAAE,aAAa,EAAE,gBAAgB,CAAC,CAAC;YAC/E,CAAC;YAED,MAAM,OAAO,GAAG,OAAO,CAAC,sBAAsB,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;YAChE,IAAA,gBAAM,EAAC,OAAO,CAAC,MAAM,CAAC,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,YAAY,EAAE,GAAG,EAAE;QAC1B,IAAA,YAAE,EAAC,wBAAwB,EAAE,GAAG,EAAE;YAChC,MAAM,iBAAiB,GAAG;gBACxB,GAAG,gBAAgB;gBACnB,GAAG,EAAE,CAAC;aACP,CAAC;YAEF,MAAM,MAAM,GAAG,OAAO,CAAC,kBAAkB,CAAC,YAAY,EAAE,aAAa,EAAE,iBAAiB,CAAC,CAAC;YAC1F,IAAA,gBAAM,EAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;QAC/B,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,qCAAqC,EAAE,GAAG,EAAE;YAC7C,MAAM,iBAAiB,GAAG;gBACxB,GAAG,YAAY;gBACf,YAAY,EAAE,KAAK,CAAC,mBAAmB;aACxC,CAAC;YAEF,MAAM,MAAM,GAAG,OAAO,CAAC,kBAAkB,CAAC,iBAAiB,EAAE,aAAa,EAAE,gBAAgB,CAAC,CAAC;YAC9F,IAAA,gBAAM,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,yCAAyC,EAAE,GAAG,EAAE;YACjD,MAAM,kBAAkB,GAAG;gBACzB,GAAG,YAAY;gBACf,YAAY,EAAE,KAAK,CAAC,aAAa;aAClC,CAAC;YAEF,MAAM,MAAM,GAAG,OAAO,CAAC,kBAAkB,CAAC,kBAAkB,EAAE,aAAa,EAAE,gBAAgB,CAAC,CAAC;YAC/F,IAAA,gBAAM,EAAC,MAAM,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC1C,IAAA,gBAAM,EAAC,MAAM,CAAC,WAAW,CAAC,CAAC,eAAe,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;QACtE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\risk\\__tests__\\trailing-stop-manager.test.ts"],"sourcesContent":["/**\r\n * Trailing Stop Manager Tests\r\n * \r\n * Comprehensive tests for trailing stop loss functionality\r\n */\r\n\r\nimport { describe, it, expect, beforeEach } from '@jest/globals';\r\nimport { TrailingStopManager, MarketConditions } from '../trailing-stop-manager.js';\r\nimport { TrailingStopConfig, Position } from '../types.js';\r\n\r\ndescribe('TrailingStopManager', () => {\r\n  let manager: TrailingStopManager;\r\n  let defaultConfig: TrailingStopConfig;\r\n  let basePosition: Position;\r\n  let marketConditions: MarketConditions;\r\n\r\n  beforeEach(() => {\r\n    manager = new TrailingStopManager();\r\n\r\n    defaultConfig = {\r\n      initialStopLoss: 1.0, // 1% initial stop loss\r\n      trailingDistance: 1.5, // 1.5% trailing distance\r\n      minProfitToTrail: 0.5, // Start trailing at 0.5% profit\r\n      breakevenThreshold: 2.0, // Move to breakeven at 2% profit\r\n      volatilityAdjustment: true\r\n    };\r\n\r\n    basePosition = {\r\n      id: 'test-position-1',\r\n      symbol: 'BTC',\r\n      size: 0.1,\r\n      entryPrice: 50000,\r\n      currentPrice: 51000, // 2% profit\r\n      type: 'LONG',\r\n      unrealizedPnL: 100,\r\n      stopLoss: 49500, // 1% below entry\r\n      takeProfit: 53000,\r\n      timestamp: new Date()\r\n    };\r\n\r\n    marketConditions = {\r\n      volatility: 0.3,\r\n      trend: 'BULLISH',\r\n      atr: 1000, // $1000 ATR\r\n      supportLevel: 50500,\r\n      resistanceLevel: 52000\r\n    };\r\n  });\r\n\r\n  describe('updateTrailingStop', () => {\r\n    it('should not trail if profit is below minimum threshold', () => {\r\n      const lowProfitPosition = {\r\n        ...basePosition,\r\n        currentPrice: 50200 // Only 0.4% profit\r\n      };\r\n\r\n      const result = manager.updateTrailingStop(lowProfitPosition, defaultConfig, marketConditions);\r\n\r\n      expect(result.updated).toBe(false);\r\n      expect(result.reason).toContain('below minimum');\r\n      expect(result.newStopLoss).toBe(lowProfitPosition.stopLoss);\r\n    });\r\n\r\n    it('should update trailing stop when profit exceeds threshold', () => {\r\n      const result = manager.updateTrailingStop(basePosition, defaultConfig, marketConditions);\r\n\r\n      expect(result.updated).toBe(true);\r\n      expect(result.newStopLoss).toBeGreaterThan(basePosition.stopLoss);\r\n      expect(result.trailingDistance).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('should activate breakeven stop at threshold', () => {\r\n      const result = manager.updateTrailingStop(basePosition, defaultConfig, marketConditions);\r\n\r\n      // Position has 2% profit, which equals breakeven threshold\r\n      expect(result.breakevenActive).toBe(true);\r\n      expect(result.reason).toContain('Breakeven');\r\n      expect(result.newStopLoss).toBeGreaterThan(basePosition.entryPrice);\r\n    });\r\n\r\n    it('should adjust trailing distance for volatility', () => {\r\n      const highVolatilityConditions = {\r\n        ...marketConditions,\r\n        volatility: 0.8 // High volatility\r\n      };\r\n\r\n      const result = manager.updateTrailingStop(basePosition, defaultConfig, highVolatilityConditions);\r\n\r\n      // Should use wider trailing distance due to high volatility\r\n      expect(result.trailingDistance).toBeGreaterThan(defaultConfig.trailingDistance);\r\n    });\r\n\r\n    it('should consider support levels for long positions', () => {\r\n      const positionNearSupport = {\r\n        ...basePosition,\r\n        currentPrice: 50600 // Close to support at 50500\r\n      };\r\n\r\n      const result = manager.updateTrailingStop(positionNearSupport, defaultConfig, marketConditions);\r\n\r\n      if (result.updated) {\r\n        // Stop loss should be influenced by support level\r\n        expect(result.newStopLoss).toBeGreaterThanOrEqual(marketConditions.supportLevel! * 0.99);\r\n      }\r\n    });\r\n\r\n    it('should only move stop loss in favorable direction for long positions', () => {\r\n      const currentStopLoss = basePosition.stopLoss;\r\n      const result = manager.updateTrailingStop(basePosition, defaultConfig, marketConditions);\r\n\r\n      if (result.updated) {\r\n        expect(result.newStopLoss).toBeGreaterThan(currentStopLoss);\r\n      }\r\n    });\r\n\r\n    it('should handle short positions correctly', () => {\r\n      const shortPosition: Position = {\r\n        ...basePosition,\r\n        type: 'SHORT',\r\n        entryPrice: 50000,\r\n        currentPrice: 49000, // 2% profit for short\r\n        stopLoss: 50500 // 1% above entry\r\n      };\r\n\r\n      const result = manager.updateTrailingStop(shortPosition, defaultConfig, marketConditions);\r\n\r\n      if (result.updated) {\r\n        // For short positions, stop loss should move down\r\n        expect(result.newStopLoss).toBeLessThan(shortPosition.stopLoss);\r\n      }\r\n    });\r\n  });\r\n\r\n  describe('calculateInitialStopLoss', () => {\r\n    it('should calculate correct initial stop loss for long position', () => {\r\n      const initialStop = manager.calculateInitialStopLoss(\r\n        50000,\r\n        'LONG',\r\n        defaultConfig,\r\n        marketConditions\r\n      );\r\n\r\n      // Should be approximately 1% below entry (adjusted for volatility and ATR)\r\n      expect(initialStop).toBeLessThan(50000);\r\n      expect(initialStop).toBeGreaterThan(48000); // Reasonable range\r\n    });\r\n\r\n    it('should calculate correct initial stop loss for short position', () => {\r\n      const initialStop = manager.calculateInitialStopLoss(\r\n        50000,\r\n        'SHORT',\r\n        defaultConfig,\r\n        marketConditions\r\n      );\r\n\r\n      // Should be above entry price for short position\r\n      expect(initialStop).toBeGreaterThan(50000);\r\n      expect(initialStop).toBeLessThan(52000); // Reasonable range\r\n    });\r\n\r\n    it('should adjust for high volatility', () => {\r\n      const highVolatilityConditions = {\r\n        ...marketConditions,\r\n        volatility: 0.8,\r\n        atr: 2000 // Higher ATR\r\n      };\r\n\r\n      const normalStop = manager.calculateInitialStopLoss(50000, 'LONG', defaultConfig, marketConditions);\r\n      const volatilityAdjustedStop = manager.calculateInitialStopLoss(50000, 'LONG', defaultConfig, highVolatilityConditions);\r\n\r\n      // High volatility should result in wider stop loss\r\n      expect(volatilityAdjustedStop).toBeLessThan(normalStop);\r\n    });\r\n  });\r\n\r\n  describe('optimizeStopLoss', () => {\r\n    it('should widen stop loss in high volatility', () => {\r\n      const highVolatilityConditions = {\r\n        ...marketConditions,\r\n        volatility: 0.8,\r\n        atr: 2000\r\n      };\r\n\r\n      const tightStopPosition = {\r\n        ...basePosition,\r\n        stopLoss: 50800 // Very tight stop\r\n      };\r\n\r\n      const result = manager.optimizeStopLoss(tightStopPosition, defaultConfig, highVolatilityConditions);\r\n\r\n      expect(result.optimizedStopLoss).toBeLessThan(tightStopPosition.stopLoss);\r\n      expect(result.reason).toContain('volatility');\r\n    });\r\n\r\n    it('should optimize stop loss to support level', () => {\r\n      const result = manager.optimizeStopLoss(basePosition, defaultConfig, marketConditions);\r\n\r\n      if (marketConditions.supportLevel && result.optimizedStopLoss !== basePosition.stopLoss) {\r\n        expect(result.reason).toContain('support');\r\n      }\r\n    });\r\n\r\n    it('should return current stop if already optimal', () => {\r\n      const optimalPosition = {\r\n        ...basePosition,\r\n        stopLoss: 50000 // Already at a good level\r\n      };\r\n\r\n      const result = manager.optimizeStopLoss(optimalPosition, defaultConfig, marketConditions);\r\n\r\n      expect(result.optimizedStopLoss).toBe(optimalPosition.stopLoss);\r\n      expect(result.reason).toContain('optimal');\r\n    });\r\n  });\r\n\r\n  describe('trailing stop history and statistics', () => {\r\n    it('should record trailing stop updates', () => {\r\n      manager.updateTrailingStop(basePosition, defaultConfig, marketConditions);\r\n\r\n      const history = manager.getTrailingStopHistory(basePosition.id);\r\n      expect(history.length).toBeGreaterThan(0);\r\n\r\n      const lastUpdate = history[history.length - 1];\r\n      expect(lastUpdate.positionId).toBe(basePosition.id);\r\n      expect(lastUpdate.previousStopLoss).toBe(basePosition.stopLoss);\r\n    });\r\n\r\n    it('should calculate trailing stop statistics', () => {\r\n      // Generate multiple updates\r\n      for (let i = 0; i < 5; i++) {\r\n        const updatedPosition = {\r\n          ...basePosition,\r\n          currentPrice: 51000 + (i * 100)\r\n        };\r\n        manager.updateTrailingStop(updatedPosition, defaultConfig, marketConditions);\r\n      }\r\n\r\n      const stats = manager.getTrailingStopStatistics(basePosition.id);\r\n\r\n      expect(stats.totalUpdates).toBeGreaterThan(0);\r\n      expect(stats.averageTrailingDistance).toBeGreaterThan(0);\r\n      expect(stats.breakevenActivations).toBeGreaterThanOrEqual(0);\r\n    });\r\n\r\n    it('should clear trailing stop history', () => {\r\n      manager.updateTrailingStop(basePosition, defaultConfig, marketConditions);\r\n      \r\n      let history = manager.getTrailingStopHistory(basePosition.id);\r\n      expect(history.length).toBeGreaterThan(0);\r\n\r\n      manager.clearTrailingStopHistory(basePosition.id);\r\n      \r\n      history = manager.getTrailingStopHistory(basePosition.id);\r\n      expect(history.length).toBe(0);\r\n    });\r\n\r\n    it('should limit history to 100 updates', () => {\r\n      // Generate 150 updates\r\n      for (let i = 0; i < 150; i++) {\r\n        const updatedPosition = {\r\n          ...basePosition,\r\n          currentPrice: 51000 + i,\r\n          stopLoss: 49500 + i\r\n        };\r\n        manager.updateTrailingStop(updatedPosition, defaultConfig, marketConditions);\r\n      }\r\n\r\n      const history = manager.getTrailingStopHistory(basePosition.id);\r\n      expect(history.length).toBeLessThanOrEqual(100);\r\n    });\r\n  });\r\n\r\n  describe('edge cases', () => {\r\n    it('should handle zero ATR', () => {\r\n      const zeroATRConditions = {\r\n        ...marketConditions,\r\n        atr: 0\r\n      };\r\n\r\n      const result = manager.updateTrailingStop(basePosition, defaultConfig, zeroATRConditions);\r\n      expect(result).toBeDefined();\r\n    });\r\n\r\n    it('should handle position at breakeven', () => {\r\n      const breakevenPosition = {\r\n        ...basePosition,\r\n        currentPrice: 50000 // Exactly at entry\r\n      };\r\n\r\n      const result = manager.updateTrailingStop(breakevenPosition, defaultConfig, marketConditions);\r\n      expect(result.updated).toBe(false);\r\n    });\r\n\r\n    it('should handle very high profit position', () => {\r\n      const highProfitPosition = {\r\n        ...basePosition,\r\n        currentPrice: 60000 // 20% profit\r\n      };\r\n\r\n      const result = manager.updateTrailingStop(highProfitPosition, defaultConfig, marketConditions);\r\n      expect(result.breakevenActive).toBe(true);\r\n      expect(result.newStopLoss).toBeGreaterThan(basePosition.entryPrice);\r\n    });\r\n  });\r\n});"],"version":3}