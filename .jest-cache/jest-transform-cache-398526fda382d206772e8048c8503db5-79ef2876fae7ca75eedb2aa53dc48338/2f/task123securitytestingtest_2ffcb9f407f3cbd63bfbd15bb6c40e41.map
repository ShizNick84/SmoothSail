{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\tests\\security\\task-12-3-security-testing.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\tests\\security\\task-12-3-security-testing.test.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * TASK 12.3 - SECURITY AND PENETRATION TESTING IMPLEMENTATION\r\n * =============================================================================\r\n * \r\n * Complete implementation of automated security testing suite, penetration\r\n * testing for API endpoints, vulnerability scanning and assessment, and\r\n * security compliance testing and validation as required by task 12.3.\r\n * \r\n * Features:\r\n * - Automated security testing suite\r\n * - Penetration testing for API endpoints  \r\n * - Vulnerability scanning and assessment\r\n * - Security compliance testing and validation\r\n * \r\n * Requirements: 25.7 - Create security and penetration testing\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport { Logger } from '../../core/logging/logger';\r\nimport { SecurityTestOrchestrator, SecurityTestType } from '../../security/security-test-orchestrator';\r\nimport { PenetrationTestingService, PenetrationTestConfig } from '../../security/penetration-testing-service';\r\nimport { VulnerabilityScannerService } from '../../security/vulnerability-scanner-service';\r\nimport { ComplianceTestingService } from '../../security/compliance-testing';\r\nimport { AutomatedSecurityTestingSuite, SecurityTestSuiteConfig } from '../../security/automated-security-testing';\r\nimport { ThreatDetectionEngine } from '../../security/threat-detection-engine';\r\nimport { IncidentResponseService } from '../../security/incident-response-service';\r\nimport { NotificationService } from '../../core/notifications/notification-service';\r\nimport { EncryptionService } from '../../security/encryption-service';\r\nimport { SecurityMonitoringService } from '../../security/security-monitoring-service';\r\nimport * as crypto from 'crypto';\r\nimport * as fs from 'fs/promises';\r\nimport * as path from 'path';\r\nimport * as os from 'os';\r\n\r\n// Mock external dependencies for testing\r\njest.mock('../../core/logging/logger');\r\njest.mock('../../core/notifications/notification-service');\r\njest.mock('axios');\r\njest.mock('child_process');\r\n\r\ndescribe('Task 12.3 - Security and Penetration Testing', () => {\r\n  let logger: Logger;\r\n  let securityOrchestrator: SecurityTestOrchestrator;\r\n  let penetrationTesting: PenetrationTestingService;\r\n  let vulnerabilityScanner: VulnerabilityScannerService;\r\n  let complianceTesting: ComplianceTestingService;\r\n  let automatedTesting: AutomatedSecurityTestingSuite;\r\n  let threatDetection: ThreatDetectionEngine;\r\n  let incidentResponse: IncidentResponseService;\r\n  let notifications: NotificationService;\r\n  let encryptionService: EncryptionService;\r\n  let securityMonitoring: SecurityMonitoringService;\r\n  let testOutputDir: string;\r\n\r\n  beforeAll(async () => {\r\n    // Set up test environment\r\n    process.env.NODE_ENV = 'test';\r\n    process.env.MASTER_ENCRYPTION_KEY = crypto.randomBytes(32).toString('hex');\r\n    process.env.GATE_IO_API_KEY = 'test_api_key';\r\n    process.env.GATE_IO_SECRET_KEY = 'test_secret_key';\r\n    \r\n    // Create temporary test output directory\r\n    testOutputDir = path.join(os.tmpdir(), 'task-12-3-security-test-output');\r\n    await fs.mkdir(testOutputDir, { recursive: true });\r\n  });\r\n\r\n  beforeEach(async () => {\r\n    // Initialize all security services\r\n    logger = new Logger();\r\n    encryptionService = new EncryptionService(logger);\r\n    threatDetection = new ThreatDetectionEngine(logger);\r\n    securityMonitoring = new SecurityMonitoringService(logger);\r\n    notifications = new NotificationService(logger);\r\n    incidentResponse = new IncidentResponseService(logger, notifications);\r\n    vulnerabilityScanner = new VulnerabilityScannerService(logger);\r\n    complianceTesting = new ComplianceTestingService(logger);\r\n\r\n    // Configure penetration testing\r\n    const penetrationConfig: PenetrationTestConfig = {\r\n      targetEndpoints: [\r\n        'http://localhost:3000/api/v4/spot/time',\r\n        'http://localhost:3000/api/v4/spot/accounts',\r\n        'http://localhost:3000/api/v4/spot/orders',\r\n        'http://localhost:3000/api/dashboard/status',\r\n        'http://localhost:3000/api/trading/positions'\r\n      ],\r\n      testTypes: [\r\n        'sql_injection',\r\n        'xss',\r\n        'authentication_bypass',\r\n        'input_validation',\r\n        'rate_limiting',\r\n        'tls_security'\r\n      ],\r\n      maxConcurrentTests: 5,\r\n      timeoutMs: 30000,\r\n      enableDestructiveTesting: false,\r\n      complianceStandards: ['OWASP_TOP_10', 'ISO_27001', 'SOC_2']\r\n    };\r\n\r\n    penetrationTesting = new PenetrationTestingService(\r\n      logger,\r\n      encryptionService,\r\n      threatDetection,\r\n      penetrationConfig\r\n    );\r\n\r\n    // Configure automated security testing\r\n    const securityTestConfig: SecurityTestSuiteConfig = {\r\n      schedules: [\r\n        {\r\n          id: 'task-12-3-daily-scan',\r\n          name: 'Task 12.3 Daily Security Scan',\r\n          cronExpression: '0 2 * * *',\r\n          testTypes: ['penetration', 'vulnerability', 'compliance'],\r\n          enabled: true\r\n        }\r\n      ],\r\n      reportingConfig: {\r\n        outputDirectory: testOutputDir,\r\n        retentionDays: 30,\r\n        emailReports: true,\r\n        slackIntegration: false\r\n      },\r\n      alertingConfig: {\r\n        criticalThreshold: 1,\r\n        highThreshold: 3,\r\n        emailAlerts: true,\r\n        immediateNotification: true\r\n      },\r\n      integrationConfig: {\r\n        cicdIntegration: true,\r\n        webhookUrl: 'http://localhost:3000/api/security/webhook',\r\n        apiKey: 'test-security-api-key'\r\n      }\r\n    };\r\n\r\n    automatedTesting = new AutomatedSecurityTestingSuite(\r\n      logger,\r\n      penetrationTesting,\r\n      securityMonitoring,\r\n      incidentResponse,\r\n      notifications,\r\n      securityTestConfig\r\n    );\r\n\r\n    // Initialize security test orchestrator\r\n    securityOrchestrator = new SecurityTestOrchestrator(\r\n      logger,\r\n      penetrationTesting,\r\n      vulnerabilityScanner,\r\n      complianceTesting,\r\n      automatedTesting,\r\n      threatDetection,\r\n      incidentResponse,\r\n      notifications\r\n    );\r\n\r\n    // Clear all mocks\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  afterEach(async () => {\r\n    // Clean up test files\r\n    try {\r\n      const files = await fs.readdir(testOutputDir);\r\n      for (const file of files) {\r\n        await fs.unlink(path.join(testOutputDir, file));\r\n      }\r\n    } catch (error) {\r\n      // Ignore cleanup errors\r\n    }\r\n  });\r\n\r\n  afterAll(async () => {\r\n    // Clean up test environment\r\n    delete process.env.MASTER_ENCRYPTION_KEY;\r\n    delete process.env.GATE_IO_API_KEY;\r\n    delete process.env.GATE_IO_SECRET_KEY;\r\n    delete process.env.NODE_ENV;\r\n    \r\n    try {\r\n      await fs.rmdir(testOutputDir);\r\n    } catch (error) {\r\n      // Ignore cleanup errors\r\n    }\r\n  });\r\n\r\n  describe('1. Automated Security Testing Suite', () => {\r\n    it('should initialize automated security testing suite successfully', async () => {\r\n      await expect(automatedTesting.initialize()).resolves.not.toThrow();\r\n      \r\n      expect(logger.info).toHaveBeenCalledWith(\r\n        'Automated security testing suite initialized successfully',\r\n        expect.any(Object)\r\n      );\r\n    });\r\n\r\n    it('should execute comprehensive security test suite', async () => {\r\n      const result = await securityOrchestrator.executeSecurityTestSuite('daily-security-scan');\r\n\r\n      expect(result).toBeDefined();\r\n      expect(result.executionId).toBeDefined();\r\n      expect(result.status).toBe('COMPLETED');\r\n      expect(result.testResults).toBeDefined();\r\n      expect(Array.isArray(result.testResults)).toBe(true);\r\n      expect(result.overallRiskScore).toBeGreaterThanOrEqual(0);\r\n      expect(result.complianceScore).toBeGreaterThanOrEqual(0);\r\n    });\r\n\r\n    it('should execute all security test types', async () => {\r\n      const testTypes = [\r\n        SecurityTestType.PENETRATION_TESTING,\r\n        SecurityTestType.VULNERABILITY_SCANNING,\r\n        SecurityTestType.COMPLIANCE_TESTING,\r\n        SecurityTestType.DEPENDENCY_AUDIT,\r\n        SecurityTestType.CODE_ANALYSIS,\r\n        SecurityTestType.CONFIGURATION_REVIEW,\r\n        SecurityTestType.NETWORK_SECURITY,\r\n        SecurityTestType.THREAT_MODELING\r\n      ];\r\n\r\n      for (const testType of testTypes) {\r\n        const result = await (securityOrchestrator as any).executeSecurityTest(testType, 'test-execution');\r\n        \r\n        expect(result).toBeDefined();\r\n        expect(result.testType).toBe(testType);\r\n        expect(['PASS', 'FAIL', 'WARNING', 'ERROR']).toContain(result.status);\r\n        expect(typeof result.executionTime).toBe('number');\r\n        expect(typeof result.riskScore).toBe('number');\r\n      }\r\n    });\r\n  });\r\n\r\n  describe('2. Penetration Testing for API Endpoints', () => {\r\n    it('should test all configured API endpoints', async () => {\r\n      const result = await penetrationTesting.executeSecurityTestSuite();\r\n\r\n      expect(result).toBeDefined();\r\n      expect(result.scanId).toBeDefined();\r\n      expect(result.vulnerabilities).toBeDefined();\r\n      expect(Array.isArray(result.vulnerabilities)).toBe(true);\r\n      expect(result.totalVulnerabilities).toBeGreaterThanOrEqual(0);\r\n    });\r\n\r\n    it('should test for SQL injection vulnerabilities', async () => {\r\n      const mockSQLTest = jest.spyOn(penetrationTesting as any, 'testSQLInjection');\r\n      mockSQLTest.mockResolvedValue({\r\n        testId: 'sql-injection-test',\r\n        testName: 'SQL Injection Test',\r\n        category: 'API_SECURITY',\r\n        status: 'PASS',\r\n        severity: 'LOW',\r\n        description: 'No SQL injection vulnerabilities detected',\r\n        findings: [],\r\n        recommendations: ['Continue using parameterized queries'],\r\n        timestamp: new Date(),\r\n        executionTime: 2000\r\n      });\r\n\r\n      const result = await penetrationTesting.executeSecurityTestSuite();\r\n      \r\n      expect(mockSQLTest).toHaveBeenCalled();\r\n      expect(result.vulnerabilities).toBeDefined();\r\n    });\r\n\r\n    it('should test for XSS vulnerabilities', async () => {\r\n      const mockXSSTest = jest.spyOn(penetrationTesting as any, 'testXSSVulnerabilities');\r\n      mockXSSTest.mockResolvedValue({\r\n        testId: 'xss-test',\r\n        testName: 'XSS Vulnerability Test',\r\n        category: 'API_SECURITY',\r\n        status: 'PASS',\r\n        severity: 'LOW',\r\n        description: 'No XSS vulnerabilities detected',\r\n        findings: [],\r\n        recommendations: ['Continue using output encoding'],\r\n        timestamp: new Date(),\r\n        executionTime: 1500\r\n      });\r\n\r\n      const result = await penetrationTesting.executeSecurityTestSuite();\r\n      \r\n      expect(mockXSSTest).toHaveBeenCalled();\r\n      expect(result.complianceScore).toBeGreaterThanOrEqual(0);\r\n    });\r\n\r\n    it('should test authentication bypass vulnerabilities', async () => {\r\n      const mockAuthTest = jest.spyOn(penetrationTesting as any, 'testAuthenticationBypass');\r\n      mockAuthTest.mockResolvedValue({\r\n        testId: 'auth-bypass-test',\r\n        testName: 'Authentication Bypass Test',\r\n        category: 'API_SECURITY',\r\n        status: 'PASS',\r\n        severity: 'LOW',\r\n        description: 'Authentication properly enforced',\r\n        findings: [],\r\n        recommendations: ['Maintain current authentication controls'],\r\n        timestamp: new Date(),\r\n        executionTime: 3000\r\n      });\r\n\r\n      const result = await penetrationTesting.executeSecurityTestSuite();\r\n      \r\n      expect(mockAuthTest).toHaveBeenCalled();\r\n      expect(result.recommendations).toBeDefined();\r\n    });\r\n  });\r\n\r\n  describe('3. Vulnerability Scanning and Assessment', () => {\r\n    it('should execute comprehensive vulnerability scan', async () => {\r\n      const result = await vulnerabilityScanner.executeComprehensiveVulnerabilityScan();\r\n\r\n      expect(result).toBeDefined();\r\n      expect(result.scanId).toBeDefined();\r\n      expect(result.scanType).toBe('comprehensive_scan');\r\n      expect(result.status).toBe('COMPLETED');\r\n      expect(result.findings).toBeDefined();\r\n      expect(Array.isArray(result.findings)).toBe(true);\r\n      expect(result.summary).toBeDefined();\r\n    });\r\n\r\n    it('should provide vulnerability severity classification', async () => {\r\n      const result = await vulnerabilityScanner.executeComprehensiveVulnerabilityScan();\r\n      \r\n      expect(result.summary.criticalCount).toBeGreaterThanOrEqual(0);\r\n      expect(result.summary.highCount).toBeGreaterThanOrEqual(0);\r\n      expect(result.summary.mediumCount).toBeGreaterThanOrEqual(0);\r\n      expect(result.summary.lowCount).toBeGreaterThanOrEqual(0);\r\n      \r\n      // Total should match sum of severity counts\r\n      const severitySum = result.summary.criticalCount + result.summary.highCount + \r\n                         result.summary.mediumCount + result.summary.lowCount;\r\n      expect(severitySum).toBe(result.summary.totalFindings);\r\n    });\r\n\r\n    it('should provide remediation priorities', async () => {\r\n      const result = await vulnerabilityScanner.executeComprehensiveVulnerabilityScan();\r\n      \r\n      expect(result.summary.remediationPriority).toBeDefined();\r\n      expect(Array.isArray(result.summary.remediationPriority)).toBe(true);\r\n      \r\n      if (result.summary.remediationPriority.length > 0) {\r\n        result.summary.remediationPriority.forEach(item => {\r\n          expect(item).toHaveProperty('id');\r\n          expect(item).toHaveProperty('priority');\r\n          expect(item).toHaveProperty('title');\r\n          expect(item).toHaveProperty('description');\r\n          expect(item).toHaveProperty('effort');\r\n          expect(item).toHaveProperty('impact');\r\n          expect(item).toHaveProperty('steps');\r\n          expect(item).toHaveProperty('estimatedTime');\r\n          expect(['CRITICAL', 'HIGH', 'MEDIUM', 'LOW']).toContain(item.priority);\r\n          expect(['LOW', 'MEDIUM', 'HIGH']).toContain(item.effort);\r\n        });\r\n      }\r\n    });\r\n  });\r\n\r\n  describe('4. Security Compliance Testing and Validation', () => {\r\n    it('should test OWASP Top 10 compliance', async () => {\r\n      const result = await complianceTesting.executeComplianceTest('OWASP_TOP_10');\r\n\r\n      expect(result).toBeDefined();\r\n      expect(result.standardId).toBe('OWASP_TOP_10');\r\n      expect(result.standardName).toBe('OWASP Top 10');\r\n      expect(result.overallScore).toBeGreaterThanOrEqual(0);\r\n      expect(result.overallScore).toBeLessThanOrEqual(100);\r\n      expect(['COMPLIANT', 'NON_COMPLIANT', 'PARTIAL']).toContain(result.status);\r\n      expect(result.controlResults.length).toBe(10);\r\n    });\r\n\r\n    it('should test ISO 27001 compliance', async () => {\r\n      const result = await complianceTesting.executeComplianceTest('ISO_27001');\r\n\r\n      expect(result.standardId).toBe('ISO_27001');\r\n      expect(result.standardName).toBe('ISO/IEC 27001');\r\n      expect(result.requiredScore).toBe(85);\r\n      expect(result.controlResults.length).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('should test SOC 2 compliance', async () => {\r\n      const result = await complianceTesting.executeComplianceTest('SOC_2');\r\n\r\n      expect(result.standardId).toBe('SOC_2');\r\n      expect(result.standardName).toBe('SOC 2 Type II');\r\n      expect(result.requiredScore).toBe(90);\r\n      expect(result.controlResults.length).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('should provide gap analysis for non-compliant standards', async () => {\r\n      const result = await complianceTesting.executeComplianceTest('OWASP_TOP_10');\r\n\r\n      expect(result.gapAnalysis).toBeDefined();\r\n      expect(Array.isArray(result.gapAnalysis)).toBe(true);\r\n      \r\n      if (result.status !== 'COMPLIANT') {\r\n        expect(result.gapAnalysis.length).toBeGreaterThan(0);\r\n        \r\n        result.gapAnalysis.forEach(gap => {\r\n          expect(gap).toHaveProperty('controlId');\r\n          expect(gap).toHaveProperty('controlName');\r\n          expect(gap).toHaveProperty('currentScore');\r\n          expect(gap).toHaveProperty('requiredScore');\r\n          expect(gap).toHaveProperty('gap');\r\n          expect(gap).toHaveProperty('priority');\r\n          expect(gap).toHaveProperty('remediation');\r\n          expect(['LOW', 'MEDIUM', 'HIGH', 'CRITICAL']).toContain(gap.priority);\r\n        });\r\n      }\r\n    });\r\n  });\r\n\r\n  describe('5. Security Test Integration and Orchestration', () => {\r\n    it('should integrate with threat detection engine', async () => {\r\n      const result = await securityOrchestrator.executeSecurityTestSuite('daily-security-scan');\r\n      \r\n      expect(result).toBeDefined();\r\n      expect(threatDetection).toBeDefined();\r\n      expect(result.testResults.length).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('should generate comprehensive remediation plans', async () => {\r\n      const result = await securityOrchestrator.executeSecurityTestSuite('weekly-comprehensive-scan');\r\n\r\n      expect(result.remediationPlan).toBeDefined();\r\n      expect(result.remediationPlan.planId).toBeDefined();\r\n      expect(['IMMEDIATE', 'HIGH', 'MEDIUM', 'LOW']).toContain(result.remediationPlan.priority);\r\n      expect(result.remediationPlan.estimatedEffort).toBeDefined();\r\n      expect(result.remediationPlan.timeline).toBeDefined();\r\n      expect(Array.isArray(result.remediationPlan.tasks)).toBe(true);\r\n      expect(result.remediationPlan.riskReduction).toBeGreaterThanOrEqual(0);\r\n    });\r\n\r\n    it('should provide security dashboard with metrics', async () => {\r\n      // Execute a test suite to populate data\r\n      await securityOrchestrator.executeSecurityTestSuite('daily-security-scan');\r\n      \r\n      const dashboard = securityOrchestrator.getSecurityDashboard();\r\n\r\n      expect(dashboard).toBeDefined();\r\n      expect(dashboard.lastUpdated).toBeInstanceOf(Date);\r\n      expect(dashboard.overallSecurityScore).toBeGreaterThanOrEqual(0);\r\n      expect(dashboard.overallSecurityScore).toBeLessThanOrEqual(100);\r\n      expect(['LOW', 'MEDIUM', 'HIGH', 'CRITICAL']).toContain(dashboard.riskLevel);\r\n      expect(dashboard.vulnerabilities).toBeDefined();\r\n      expect(dashboard.complianceStatus).toBeDefined();\r\n      expect(Array.isArray(dashboard.recentExecutions)).toBe(true);\r\n      expect(Array.isArray(dashboard.trendData)).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('6. Security Test Reporting and Documentation', () => {\r\n    it('should generate comprehensive security reports', async () => {\r\n      const result = await securityOrchestrator.executeSecurityTestSuite('daily-security-scan');\r\n      \r\n      expect(result.remediationPlan).toBeDefined();\r\n      expect(result.remediationPlan.tasks).toBeDefined();\r\n      expect(Array.isArray(result.remediationPlan.tasks)).toBe(true);\r\n      expect(result.recommendations).toBeDefined();\r\n      expect(Array.isArray(result.recommendations)).toBe(true);\r\n    });\r\n\r\n    it('should save security test reports to disk', async () => {\r\n      await automatedTesting.executeSecurityTestsOnDemand();\r\n      \r\n      // Check if reports are saved\r\n      const files = await fs.readdir(testOutputDir);\r\n      const reportFiles = files.filter(f => f.startsWith('security-report-'));\r\n      \r\n      expect(reportFiles.length).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('should provide security trend analysis', async () => {\r\n      // Execute multiple tests to generate trend data\r\n      await securityOrchestrator.executeSecurityTestSuite('daily-security-scan');\r\n      await securityOrchestrator.executeSecurityTestSuite('daily-security-scan');\r\n      \r\n      const dashboard = securityOrchestrator.getSecurityDashboard();\r\n      \r\n      expect(dashboard.trendData).toBeDefined();\r\n      expect(Array.isArray(dashboard.trendData)).toBe(true);\r\n    });\r\n  });\r\n});"],"version":3}