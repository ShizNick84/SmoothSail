{"version":3,"names":["cov_l79ej0g0l","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","exports","Inject","registerSingleton","registerTransient","logger_1","require","DependencyStatus","DependencyManager","dependencies","Map","metadata","resolutionCache","isShuttingDown","register","config","logger","info","String","token","validateDependencyConfig","checkCircularDependencies","set","registeredAt","Date","resolutionCount","singleton","status","REGISTERED","resolve","context","Error","resolveContext","depth","startTime","parent","includes","circularPath","map","join","get","newContext","instance","RESOLVING","debug","resolvedDependencies","resolveDependencies","createInstance","RESOLVED","resolvedAt","error","ERROR","isRegistered","has","getMetadata","getRegisteredDependencies","Array","from","keys","getDependenciesByTag","tag","result","tags","push","clear","shutdown","getStatistics","totalDependencies","size","singletonDependencies","totalResolutions","values","averageResolutionTime","factory","isArray","priority","visited","Set","visiting","visit","add","depConfig","dependency","delete","tokens","resolved","apply","DependencyTokens","LOGGER","Symbol","AUDIT_SERVICE","CONFIG_SERVICE","SECURITY_MANAGER","ENCRYPTION_SERVICE","THREAT_DETECTION","SYSTEM_MONITOR","TUNNEL_MANAGER","DATABASE_SERVICE","TRADING_ENGINE","RISK_MANAGER","STRATEGY_ENGINE","ORDER_MANAGER","LLM_ENGINE","SENTIMENT_ANALYZER","MARKET_ANALYZER","NOTIFICATION_MANAGER","EMAIL_SERVICE","TELEGRAM_SERVICE","GATE_IO_CLIENT","TUNNEL_ROUTER","dependencyManager","target","propertyKey","_dependencies"],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\core\\orchestration\\dependency-manager.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * AI CRYPTO TRADING AGENT - DEPENDENCY MANAGER\r\n * =============================================================================\r\n * \r\n * This module provides comprehensive dependency management for system components.\r\n * It handles dependency resolution, injection, and lifecycle coordination to\r\n * ensure proper component initialization order and runtime dependencies.\r\n * \r\n * CRITICAL SYSTEM NOTICE:\r\n * Proper dependency management is essential for system stability. Components\r\n * must be initialized in the correct order to prevent runtime errors and\r\n * ensure financial system safety.\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport { logger } from '@/core/logging/logger';\r\nimport { auditService } from '@/security/audit-service';\r\n\r\n/**\r\n * Dependency injection token\r\n */\r\nexport type DependencyToken = string | symbol;\r\n\r\n/**\r\n * Dependency factory function\r\n */\r\nexport type DependencyFactory<T = any> = () => T | Promise<T>;\r\n\r\n/**\r\n * Dependency configuration\r\n */\r\nexport interface DependencyConfig<T = any> {\r\n  /** Dependency token */\r\n  token: DependencyToken;\r\n  /** Factory function */\r\n  factory: DependencyFactory<T>;\r\n  /** Singleton instance */\r\n  singleton: boolean;\r\n  /** Dependencies required by this dependency */\r\n  dependencies: DependencyToken[];\r\n  /** Initialization priority (lower = higher priority) */\r\n  priority: number;\r\n  /** Optional tags for categorization */\r\n  tags: string[];\r\n}\r\n\r\n/**\r\n * Dependency metadata\r\n */\r\nexport interface DependencyMetadata {\r\n  /** When dependency was registered */\r\n  registeredAt: Date;\r\n  /** When dependency was first resolved */\r\n  resolvedAt?: Date;\r\n  /** Number of times resolved */\r\n  resolutionCount: number;\r\n  /** Whether dependency is singleton */\r\n  singleton: boolean;\r\n  /** Current instance (for singletons) */\r\n  instance?: any;\r\n  /** Dependency status */\r\n  status: DependencyStatus;\r\n}\r\n\r\n/**\r\n * Dependency status enumeration\r\n */\r\nexport enum DependencyStatus {\r\n  REGISTERED = 'REGISTERED',\r\n  RESOLVING = 'RESOLVING',\r\n  RESOLVED = 'RESOLVED',\r\n  ERROR = 'ERROR'\r\n}\r\n\r\n/**\r\n * Dependency resolution context\r\n */\r\nexport interface ResolutionContext {\r\n  /** Current resolution path */\r\n  path: DependencyToken[];\r\n  /** Resolution depth */\r\n  depth: number;\r\n  /** Start time */\r\n  startTime: Date;\r\n  /** Parent context */\r\n  parent?: ResolutionContext;\r\n}\r\n\r\n/**\r\n * Dependency manager class\r\n */\r\nexport class DependencyManager {\r\n  private dependencies: Map<DependencyToken, DependencyConfig> = new Map();\r\n  private metadata: Map<DependencyToken, DependencyMetadata> = new Map();\r\n  private resolutionCache: Map<DependencyToken, any> = new Map();\r\n  private isShuttingDown: boolean = false;\r\n\r\n  /**\r\n   * Register a dependency\r\n   * \r\n   * @param config Dependency configuration\r\n   */\r\n  public register<T>(config: DependencyConfig<T>): void {\r\n    logger.info(`üìã Registering dependency: ${String(config.token)}`);\r\n\r\n    // Validate configuration\r\n    this.validateDependencyConfig(config);\r\n\r\n    // Check for circular dependencies\r\n    this.checkCircularDependencies(config);\r\n\r\n    // Register dependency\r\n    this.dependencies.set(config.token, config);\r\n    this.metadata.set(config.token, {\r\n      registeredAt: new Date(),\r\n      resolutionCount: 0,\r\n      singleton: config.singleton,\r\n      status: DependencyStatus.REGISTERED\r\n    });\r\n\r\n    logger.info(`‚úÖ Dependency registered: ${String(config.token)}`);\r\n  }\r\n\r\n  /**\r\n   * Resolve a dependency\r\n   * \r\n   * @param token Dependency token\r\n   * @param context Resolution context\r\n   * @returns Resolved dependency instance\r\n   */\r\n  public async resolve<T>(token: DependencyToken, context?: ResolutionContext): T {\r\n    if (this.isShuttingDown) {\r\n      throw new Error('Cannot resolve dependencies during shutdown');\r\n    }\r\n\r\n    const resolveContext: ResolutionContext = context || {\r\n      path: [],\r\n      depth: 0,\r\n      startTime: new Date(),\r\n      parent: undefined\r\n    };\r\n\r\n    // Check for circular dependencies in resolution path\r\n    if (resolveContext.path.includes(token)) {\r\n      const circularPath = [...resolveContext.path, token].map(String).join(' ‚Üí ');\r\n      throw new Error(`Circular dependency detected: ${circularPath}`);\r\n    }\r\n\r\n    // Get dependency configuration\r\n    const config = this.dependencies.get(token);\r\n    if (!config) {\r\n      throw new Error(`Dependency not registered: ${String(token)}`);\r\n    }\r\n\r\n    const metadata = this.metadata.get(token)!;\r\n\r\n    try {\r\n      // Update resolution context\r\n      const newContext: ResolutionContext = {\r\n        path: [...resolveContext.path, token],\r\n        depth: resolveContext.depth + 1,\r\n        startTime: resolveContext.startTime,\r\n        parent: resolveContext\r\n      };\r\n\r\n      // Check if singleton and already resolved\r\n      if (config.singleton && metadata.instance) {\r\n        metadata.resolutionCount++;\r\n        return metadata.instance;\r\n      }\r\n\r\n      // Update status\r\n      metadata.status = DependencyStatus.RESOLVING;\r\n\r\n      logger.debug(`üîç Resolving dependency: ${String(token)} (depth: ${newContext.depth})`);\r\n\r\n      // Resolve dependencies first\r\n      const resolvedDependencies = await this.resolveDependencies(config.dependencies, newContext);\r\n\r\n      // Create instance\r\n      const instance = await this.createInstance(config, resolvedDependencies);\r\n\r\n      // Cache singleton instance\r\n      if (config.singleton) {\r\n        metadata.instance = instance;\r\n        this.resolutionCache.set(token, instance);\r\n      }\r\n\r\n      // Update metadata\r\n      metadata.status = DependencyStatus.RESOLVED;\r\n      metadata.resolutionCount++;\r\n      if (!metadata.resolvedAt) {\r\n        metadata.resolvedAt = new Date();\r\n      }\r\n\r\n      logger.debug(`‚úÖ Dependency resolved: ${String(token)}`);\r\n\r\n      return instance;\r\n\r\n    } catch (error) {\r\n      metadata.status = DependencyStatus.ERROR;\r\n      logger.error(`‚ùå Failed to resolve dependency ${String(token)}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if dependency is registered\r\n   * \r\n   * @param token Dependency token\r\n   * @returns True if registered\r\n   */\r\n  public isRegistered(token: DependencyToken): boolean {\r\n    return this.dependencies.has(token);\r\n  }\r\n\r\n  /**\r\n   * Get dependency metadata\r\n   * \r\n   * @param token Dependency token\r\n   * @returns Dependency metadata or undefined\r\n   */\r\n  public getMetadata(token: DependencyToken): DependencyMetadata | undefined {\r\n    return this.metadata.get(token);\r\n  }\r\n\r\n  /**\r\n   * Get all registered dependencies\r\n   * \r\n   * @returns Array of dependency tokens\r\n   */\r\n  public getRegisteredDependencies(): DependencyToken[] {\r\n    return Array.from(this.dependencies.keys());\r\n  }\r\n\r\n  /**\r\n   * Get dependencies by tag\r\n   * \r\n   * @param tag Tag to filter by\r\n   * @returns Array of dependency tokens\r\n   */\r\n  public getDependenciesByTag(tag: string): DependencyToken[] {\r\n    const result: DependencyToken[] = [];\r\n    \r\n    for (const [token, config] of this.dependencies) {\r\n      if (config.tags.includes(tag)) {\r\n        result.push(token);\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Clear all dependencies (for testing)\r\n   */\r\n  public clear(): void {\r\n    logger.info('üßπ Clearing all dependencies...');\r\n    \r\n    this.dependencies.clear();\r\n    this.metadata.clear();\r\n    this.resolutionCache.clear();\r\n    \r\n    logger.info('‚úÖ All dependencies cleared');\r\n  }\r\n\r\n  /**\r\n   * Shutdown dependency manager\r\n   */\r\n  public async shutdown(): Promise<void> {\r\n    logger.info('üõë Shutting down dependency manager...');\r\n    \r\n    this.isShuttingDown = true;\r\n\r\n    // Shutdown singleton instances that have shutdown methods\r\n    for (const [token, instance] of this.resolutionCache) {\r\n      if (instance && typeof instance.shutdown === 'function') {\r\n        try {\r\n          logger.info(`üõë Shutting down dependency: ${String(token)}`);\r\n          await instance.shutdown();\r\n        } catch (error) {\r\n          logger.error(`‚ùå Failed to shutdown dependency ${String(token)}:`, error);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Clear caches\r\n    this.resolutionCache.clear();\r\n\r\n    logger.info('‚úÖ Dependency manager shutdown completed');\r\n  }\r\n\r\n  /**\r\n   * Get dependency resolution statistics\r\n   * \r\n   * @returns Resolution statistics\r\n   */\r\n  public getStatistics(): {\r\n    totalDependencies: number;\r\n    resolvedDependencies: number;\r\n    singletonDependencies: number;\r\n    totalResolutions: number;\r\n    averageResolutionTime: number;\r\n  } {\r\n    const totalDependencies = this.dependencies.size;\r\n    let resolvedDependencies = 0;\r\n    let singletonDependencies = 0;\r\n    let totalResolutions = 0;\r\n\r\n    for (const metadata of this.metadata.values()) {\r\n      if (metadata.status === DependencyStatus.RESOLVED) {\r\n        resolvedDependencies++;\r\n      }\r\n      if (metadata.singleton) {\r\n        singletonDependencies++;\r\n      }\r\n      totalResolutions += metadata.resolutionCount;\r\n    }\r\n\r\n    return {\r\n      totalDependencies,\r\n      resolvedDependencies,\r\n      singletonDependencies,\r\n      totalResolutions,\r\n      averageResolutionTime: 0 // Would need to track timing\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Validate dependency configuration\r\n   * \r\n   * @param config Dependency configuration\r\n   */\r\n  private validateDependencyConfig<T>(config: DependencyConfig<T>): void {\r\n    if (!config.token) {\r\n      throw new Error('Dependency token is required');\r\n    }\r\n\r\n    if (this.dependencies.has(config.token)) {\r\n      throw new Error(`Dependency already registered: ${String(config.token)}`);\r\n    }\r\n\r\n    if (typeof config.factory !== 'function') {\r\n      throw new Error(`Dependency factory must be a function: ${String(config.token)}`);\r\n    }\r\n\r\n    if (typeof config.singleton !== 'boolean') {\r\n      throw new Error(`Dependency singleton must be a boolean: ${String(config.token)}`);\r\n    }\r\n\r\n    if (!Array.isArray(config.dependencies)) {\r\n      throw new Error(`Dependency dependencies must be an array: ${String(config.token)}`);\r\n    }\r\n\r\n    if (typeof config.priority !== 'number') {\r\n      throw new Error(`Dependency priority must be a number: ${String(config.token)}`);\r\n    }\r\n\r\n    if (!Array.isArray(config.tags)) {\r\n      throw new Error(`Dependency tags must be an array: ${String(config.token)}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check for circular dependencies\r\n   * \r\n   * @param config Dependency configuration\r\n   */\r\n  private checkCircularDependencies<T>(config: DependencyConfig<T>): void {\r\n    const visited = new Set<DependencyToken>();\r\n    const visiting = new Set<DependencyToken>();\r\n\r\n    const visit = (token: DependencyToken): void => {\r\n      if (visiting.has(token)) {\r\n        throw new Error(`Circular dependency detected involving: ${String(token)}`);\r\n      }\r\n\r\n      if (visited.has(token)) {\r\n        return;\r\n      }\r\n\r\n      visiting.add(token);\r\n\r\n      const depConfig = this.dependencies.get(token);\r\n      if (depConfig) {\r\n        for (const dependency of depConfig.dependencies) {\r\n          visit(dependency);\r\n        }\r\n      }\r\n\r\n      visiting.delete(token);\r\n      visited.add(token);\r\n    };\r\n\r\n    // Check the new dependency\r\n    for (const dependency of config.dependencies) {\r\n      visit(dependency);\r\n    }\r\n\r\n    // Check if adding this dependency creates a cycle\r\n    visit(config.token);\r\n  }\r\n\r\n  /**\r\n   * Resolve multiple dependencies\r\n   * \r\n   * @param tokens Dependency tokens\r\n   * @param context Resolution context\r\n   * @returns Array of resolved dependencies\r\n   */\r\n  private async resolveDependencies(\r\n    tokens: DependencyToken[],\r\n    context: ResolutionContext\r\n  ): Promise<any[]> {\r\n    const resolved: any[] = [];\r\n\r\n    for (const token of tokens) {\r\n      const dependency = await this.resolve(token, context);\r\n      resolved.push(dependency);\r\n    }\r\n\r\n    return resolved;\r\n  }\r\n\r\n  /**\r\n   * Create instance from factory\r\n   * \r\n   * @param config Dependency configuration\r\n   * @param dependencies Resolved dependencies\r\n   * @returns Created instance\r\n   */\r\n  private async createInstance<T>(\r\n    config: DependencyConfig<T>,\r\n    dependencies: any[]\r\n  ): Promise<T> {\r\n    try {\r\n      // Call factory function with dependencies\r\n      const instance = await config.factory.apply(null, dependencies);\r\n      \r\n      // Validate instance\r\n      if (instance === undefined || instance === null) {\r\n        throw new Error(`Factory returned null/undefined for: ${String(config.token)}`);\r\n      }\r\n\r\n      return instance;\r\n\r\n    } catch (error) {\r\n      throw new Error(`Failed to create instance for ${String(config.token)}: ${error}`);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Dependency tokens for system components\r\n */\r\nexport const DependencyTokens = {\r\n  // Core services\r\n  LOGGER: Symbol('LOGGER'),\r\n  AUDIT_SERVICE: Symbol('AUDIT_SERVICE'),\r\n  CONFIG_SERVICE: Symbol('CONFIG_SERVICE'),\r\n  \r\n  // Security services\r\n  SECURITY_MANAGER: Symbol('SECURITY_MANAGER'),\r\n  ENCRYPTION_SERVICE: Symbol('ENCRYPTION_SERVICE'),\r\n  THREAT_DETECTION: Symbol('THREAT_DETECTION'),\r\n  \r\n  // Infrastructure services\r\n  SYSTEM_MONITOR: Symbol('SYSTEM_MONITOR'),\r\n  TUNNEL_MANAGER: Symbol('TUNNEL_MANAGER'),\r\n  DATABASE_SERVICE: Symbol('DATABASE_SERVICE'),\r\n  \r\n  // Trading services\r\n  TRADING_ENGINE: Symbol('TRADING_ENGINE'),\r\n  RISK_MANAGER: Symbol('RISK_MANAGER'),\r\n  STRATEGY_ENGINE: Symbol('STRATEGY_ENGINE'),\r\n  ORDER_MANAGER: Symbol('ORDER_MANAGER'),\r\n  \r\n  // AI services\r\n  LLM_ENGINE: Symbol('LLM_ENGINE'),\r\n  SENTIMENT_ANALYZER: Symbol('SENTIMENT_ANALYZER'),\r\n  MARKET_ANALYZER: Symbol('MARKET_ANALYZER'),\r\n  \r\n  // Communication services\r\n  NOTIFICATION_MANAGER: Symbol('NOTIFICATION_MANAGER'),\r\n  EMAIL_SERVICE: Symbol('EMAIL_SERVICE'),\r\n  TELEGRAM_SERVICE: Symbol('TELEGRAM_SERVICE'),\r\n  \r\n  // API services\r\n  GATE_IO_CLIENT: Symbol('GATE_IO_CLIENT'),\r\n  TUNNEL_ROUTER: Symbol('TUNNEL_ROUTER')\r\n} as const;\r\n\r\n/**\r\n * Global dependency manager instance\r\n */\r\nexport const dependencyManager = new DependencyManager();\r\n\r\n/**\r\n * Decorator for dependency injection\r\n * \r\n * @param token Dependency token\r\n * @returns Property decorator\r\n */\r\nexport function Inject(token: DependencyToken) {\r\n  return function (target: any, propertyKey: string | symbol) {\r\n    // Store dependency metadata for later injection\r\n    if (!target._dependencies) {\r\n      target._dependencies = [];\r\n    }\r\n    target._dependencies.push({ token, propertyKey });\r\n  };\r\n}\r\n\r\n/**\r\n * Helper function to register a singleton dependency\r\n * \r\n * @param token Dependency token\r\n * @param factory Factory function\r\n * @param dependencies Dependencies\r\n * @param tags Tags\r\n * @param priority Priority\r\n */\r\nexport function registerSingleton<T>(\r\n  token: DependencyToken,\r\n  factory: DependencyFactory<T>,\r\n  dependencies: DependencyToken[] = [],\r\n  tags: string[] = [],\r\n  priority: number = 100\r\n): void {\r\n  dependencyManager.register({\r\n    token,\r\n    factory,\r\n    singleton: true,\r\n    dependencies,\r\n    priority,\r\n    tags\r\n  });\r\n}\r\n\r\n/**\r\n * Helper function to register a transient dependency\r\n * \r\n * @param token Dependency token\r\n * @param factory Factory function\r\n * @param dependencies Dependencies\r\n * @param tags Tags\r\n * @param priority Priority\r\n */\r\nexport function registerTransient<T>(\r\n  token: DependencyToken,\r\n  factory: DependencyFactory<T>,\r\n  dependencies: DependencyToken[] = [],\r\n  tags: string[] = [],\r\n  priority: number = 100\r\n): void {\r\n  dependencyManager.register({\r\n    token,\r\n    factory,\r\n    singleton: false,\r\n    dependencies,\r\n    priority,\r\n    tags\r\n  });\r\n}\r\n\r\n// =============================================================================\r\n// DEPENDENCY MANAGEMENT NOTES\r\n// =============================================================================\r\n// 1. Comprehensive dependency injection with circular dependency detection\r\n// 2. Singleton and transient dependency lifecycle management\r\n// 3. Dependency resolution with proper error handling and logging\r\n// 4. Metadata tracking for monitoring and debugging\r\n// 5. Tag-based dependency categorization and filtering\r\n// 6. Graceful shutdown with proper cleanup of singleton instances\r\n// 7. Resolution context tracking for debugging complex dependency chains\r\n// 8. Factory-based dependency creation with parameter injection\r\n// ============================================================================="],"mappings":"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","ignoreList":[]}