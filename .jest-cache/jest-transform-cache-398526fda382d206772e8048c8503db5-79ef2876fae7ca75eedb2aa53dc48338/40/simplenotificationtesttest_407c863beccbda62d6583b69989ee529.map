{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\tests\\notifications\\simple-notification-test.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\tests\\notifications\\simple-notification-test.test.ts"],"sourcesContent":["/**\r\n * Simple Notification Template Test for Task 8.3\r\n * Tests core notification functionality without complex dependencies\r\n */\r\n\r\nimport { describe, test, expect, jest } from '@jest/globals';\r\n\r\ndescribe('Task 8.3 - Simple Notification Template Tests', () => {\r\n  test('should validate emoji display functionality', () => {\r\n    // Test emoji functions that would be used in notifications\r\n    const getConfidenceEmoji = (confidence: number): string => {\r\n      if (confidence >= 0.8) return '🎯';\r\n      if (confidence >= 0.6) return '✅';\r\n      if (confidence >= 0.4) return '⚖️';\r\n      return '❓';\r\n    };\r\n\r\n    const getSentimentEmoji = (score: number): string => {\r\n      if (score >= 0.6) return '😊';\r\n      if (score >= 0.2) return '😐';\r\n      if (score >= -0.2) return '😕';\r\n      return '😰';\r\n    };\r\n\r\n    const getSystemHealthEmoji = (usage: number): string => {\r\n      if (usage < 70) return '🟢';\r\n      if (usage < 90) return '🟡';\r\n      return '🔴';\r\n    };\r\n\r\n    // Test confidence emojis\r\n    expect(getConfidenceEmoji(0.9)).toBe('🎯');\r\n    expect(getConfidenceEmoji(0.7)).toBe('✅');\r\n    expect(getConfidenceEmoji(0.5)).toBe('⚖️');\r\n    expect(getConfidenceEmoji(0.2)).toBe('❓');\r\n\r\n    // Test sentiment emojis\r\n    expect(getSentimentEmoji(0.8)).toBe('😊');\r\n    expect(getSentimentEmoji(0.3)).toBe('😐');\r\n    expect(getSentimentEmoji(-0.1)).toBe('😕');\r\n    expect(getSentimentEmoji(-0.5)).toBe('😰');\r\n\r\n    // Test system health emojis\r\n    expect(getSystemHealthEmoji(50)).toBe('🟢');\r\n    expect(getSystemHealthEmoji(80)).toBe('🟡');\r\n    expect(getSystemHealthEmoji(95)).toBe('🔴');\r\n  });\r\n\r\n  test('should validate text formatting functions', () => {\r\n    const formatSentimentScore = (score: number): string => {\r\n      if (score >= 0.6) return 'Very Positive';\r\n      if (score >= 0.2) return 'Positive';\r\n      if (score >= -0.2) return 'Neutral';\r\n      if (score >= -0.6) return 'Negative';\r\n      return 'Very Negative';\r\n    };\r\n\r\n    const formatUptime = (seconds: number): string => {\r\n      const days = Math.floor(seconds / 86400);\r\n      const hours = Math.floor((seconds % 86400) / 3600);\r\n      const minutes = Math.floor((seconds % 3600) / 60);\r\n\r\n      if (days > 0) {\r\n        return `${days}d ${hours}h ${minutes}m`;\r\n      } else if (hours > 0) {\r\n        return `${hours}h ${minutes}m`;\r\n      } else {\r\n        return `${minutes}m`;\r\n      }\r\n    };\r\n\r\n    const truncateText = (text: string, maxLength: number): string => {\r\n      if (text.length <= maxLength) return text;\r\n      return text.substring(0, maxLength - 3) + '...';\r\n    };\r\n\r\n    // Test sentiment score formatting\r\n    expect(formatSentimentScore(0.8)).toBe('Very Positive');\r\n    expect(formatSentimentScore(0.3)).toBe('Positive');\r\n    expect(formatSentimentScore(0.0)).toBe('Neutral');\r\n    expect(formatSentimentScore(-0.3)).toBe('Negative');\r\n    expect(formatSentimentScore(-0.8)).toBe('Very Negative');\r\n\r\n    // Test uptime formatting\r\n    expect(formatUptime(3600)).toBe('1h 0m');\r\n    expect(formatUptime(86400)).toBe('1d 0h 0m');\r\n    expect(formatUptime(90061)).toBe('1d 1h 1m');\r\n    expect(formatUptime(300)).toBe('5m');\r\n\r\n    // Test text truncation\r\n    const longText = 'This is a very long text that should be truncated when it exceeds the maximum length limit to prevent message overflow and ensure readability.';\r\n    const truncated = truncateText(longText, 50);\r\n    \r\n    expect(truncated.length).toBeLessThanOrEqual(50);\r\n    expect(truncated).toContain('...');\r\n    expect(truncated).toBe('This is a very long text that should be truncat...');\r\n  });\r\n\r\n  test('should validate notification message structure', () => {\r\n    // Mock trading data\r\n    const tradingData = {\r\n      symbol: 'BTC_USDT',\r\n      action: 'BUY',\r\n      quantity: 0.001,\r\n      price: 45000.50,\r\n      pnl: 125.75,\r\n      balance: 10500.25,\r\n      strategy: 'AI Enhanced Moving Average',\r\n      confidence: 0.85,\r\n      sentimentScore: 0.75,\r\n      systemLoad: 45.2,\r\n      networkLatency: 23,\r\n      sshTunnelStatus: 'healthy'\r\n    };\r\n\r\n    // Generate a mock Telegram message\r\n    const generateTelegramMessage = (data: typeof tradingData): string => {\r\n      const emoji = data.action === 'BUY' ? '🟢' : '🔴';\r\n      const actionEmoji = data.action === 'BUY' ? '📈' : '📉';\r\n      const pnlEmoji = data.pnl >= 0 ? '💰' : '📉';\r\n      const confidenceEmoji = data.confidence >= 0.8 ? '🎯' : '✅';\r\n      const sentimentEmoji = data.sentimentScore >= 0.6 ? '😊' : '😐';\r\n\r\n      return `\r\n${emoji} TRADE EXECUTED ${actionEmoji} [Intel NUC]\r\n\r\n🎯 Symbol: ${data.symbol}\r\n⚡ Action: ${data.action}\r\n📊 Quantity: ${data.quantity}\r\n💵 Price: ${data.price.toFixed(4)}\r\n${pnlEmoji} P&L: ${data.pnl.toFixed(2)}\r\n💎 Balance: ${data.balance.toFixed(2)}\r\n🧠 Strategy: ${data.strategy}\r\n${confidenceEmoji} Confidence: ${(data.confidence * 100).toFixed(1)}%\r\n${sentimentEmoji} Sentiment: Very Positive\r\n\r\n🖥️ System Status:\r\n🟢 Load: ${data.systemLoad.toFixed(1)}%\r\n🟢 SSH Tunnel: ${data.sshTunnelStatus.toUpperCase()}\r\n🌐 Latency: ${data.networkLatency}ms\r\n      `.trim();\r\n    };\r\n\r\n    const message = generateTelegramMessage(tradingData);\r\n\r\n    // Verify all essential data is included\r\n    expect(message).toContain('BTC_USDT');\r\n    expect(message).toContain('BUY');\r\n    expect(message).toContain('0.001');\r\n    expect(message).toContain('45000.50');\r\n    expect(message).toContain('125.75');\r\n    expect(message).toContain('10500.25');\r\n    expect(message).toContain('AI Enhanced Moving Average');\r\n    expect(message).toContain('85.0%');\r\n    expect(message).toContain('Intel NUC');\r\n    expect(message).toContain('HEALTHY');\r\n    expect(message).toContain('45.2%');\r\n    expect(message).toContain('23ms');\r\n\r\n    // Verify emojis are present\r\n    expect(message).toContain('🟢');\r\n    expect(message).toContain('📈');\r\n    expect(message).toContain('💰');\r\n    expect(message).toContain('🎯');\r\n    expect(message).toContain('😊');\r\n    expect(message).toContain('🖥️');\r\n  });\r\n\r\n  test('should validate email template structure', () => {\r\n    // Mock email template data\r\n    const emailData = {\r\n      systemName: 'AI Crypto Trading Agent - Intel NUC',\r\n      symbol: 'BTC_USDT',\r\n      action: 'BUY',\r\n      quantity: 0.001,\r\n      price: 45000.50,\r\n      pnl: 125.75,\r\n      balance: 10500.25,\r\n      strategy: 'AI Enhanced Moving Average',\r\n      confidence: 85,\r\n      reasoning: 'Strong bullish momentum detected with RSI oversold conditions.',\r\n      marketAnalysis: 'Bitcoin showing strong support at $44,000 level.',\r\n      riskAssessment: 'Low risk trade with 2.5% position size.'\r\n    };\r\n\r\n    // Generate mock HTML email content\r\n    const generateEmailHTML = (data: typeof emailData): string => {\r\n      return `\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n  <title>Trade Executed - Intel NUC</title>\r\n  <style>\r\n    body { font-family: Arial, sans-serif; margin: 0; padding: 0; }\r\n    .container { max-width: 600px; margin: 0 auto; }\r\n    .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 30px; color: white; }\r\n    .content { padding: 30px; }\r\n    .trade-summary { background: #f8f9fa; border-radius: 8px; padding: 20px; }\r\n    .pnl-positive { color: #28a745; font-weight: bold; }\r\n  </style>\r\n</head>\r\n<body>\r\n  <div class=\"container\">\r\n    <div class=\"header\">\r\n      <h1>🚀 Trade Executed</h1>\r\n      <div>${data.systemName}</div>\r\n    </div>\r\n    <div class=\"content\">\r\n      <div class=\"trade-summary\">\r\n        <p><strong>Symbol:</strong> ${data.symbol}</p>\r\n        <p><strong>Action:</strong> ${data.action}</p>\r\n        <p><strong>Quantity:</strong> ${data.quantity}</p>\r\n        <p><strong>Price:</strong> $${data.price}</p>\r\n        <p><strong>P&L:</strong> <span class=\"pnl-positive\">$${data.pnl}</span></p>\r\n        <p><strong>Balance:</strong> $${data.balance}</p>\r\n        <p><strong>Strategy:</strong> ${data.strategy}</p>\r\n        <p><strong>Confidence:</strong> ${data.confidence}%</p>\r\n      </div>\r\n      <div>\r\n        <h3>🤖 AI Reasoning</h3>\r\n        <p>${data.reasoning}</p>\r\n      </div>\r\n      <div>\r\n        <h3>📊 Market Analysis</h3>\r\n        <p>${data.marketAnalysis}</p>\r\n      </div>\r\n      <div>\r\n        <h3>⚠️ Risk Assessment</h3>\r\n        <p>${data.riskAssessment}</p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</body>\r\n</html>\r\n      `.trim();\r\n    };\r\n\r\n    const htmlContent = generateEmailHTML(emailData);\r\n\r\n    // Verify HTML structure\r\n    expect(htmlContent).toContain('<!DOCTYPE html>');\r\n    expect(htmlContent).toContain('<html>');\r\n    expect(htmlContent).toContain('font-family: Arial');\r\n    expect(htmlContent).toContain('max-width: 600px');\r\n    expect(htmlContent).toContain('margin: 0 auto');\r\n\r\n    // Verify content is included\r\n    expect(htmlContent).toContain('BTC_USDT');\r\n    expect(htmlContent).toContain('BUY');\r\n    expect(htmlContent).toContain('125.75');\r\n    expect(htmlContent).toContain('AI Enhanced Moving Average');\r\n    expect(htmlContent).toContain('Strong bullish momentum');\r\n    expect(htmlContent).toContain('Bitcoin showing strong support');\r\n    expect(htmlContent).toContain('Low risk trade');\r\n\r\n    // Verify styling classes\r\n    expect(htmlContent).toContain('pnl-positive');\r\n    expect(htmlContent).toContain('trade-summary');\r\n    expect(htmlContent).toContain('container');\r\n  });\r\n\r\n  test('should validate cross-platform compatibility', () => {\r\n    // Test special characters and encoding\r\n    const testData = {\r\n      symbol: 'BTC/USDT', // Forward slash\r\n      strategy: 'AI & ML Enhanced', // Ampersand\r\n      reasoning: 'Price > $45,000 indicates strong momentum', // Greater than, dollar sign\r\n    };\r\n\r\n    // Test that special characters are handled properly\r\n    expect(testData.symbol).toContain('/');\r\n    expect(testData.strategy).toContain('&');\r\n    expect(testData.reasoning).toContain('>');\r\n    expect(testData.reasoning).toContain('$');\r\n\r\n    // Test emoji encoding\r\n    const testMessage = '🚀 Trade: BTC_USDT 📈 Profit: $125.75 💰';\r\n    \r\n    // Verify emoji characters are properly encoded\r\n    expect(testMessage).toContain('🚀');\r\n    expect(testMessage).toContain('📈');\r\n    expect(testMessage).toContain('💰');\r\n    \r\n    // Verify message structure\r\n    expect(testMessage).toMatch(/🚀.*BTC_USDT.*📈.*\\$125\\.75.*💰/);\r\n  });\r\n\r\n  test('should validate notification escalation priorities', () => {\r\n    const getPriorityLevel = (threatLevel: string): string => {\r\n      switch (threatLevel) {\r\n        case 'CRITICAL': return 'critical';\r\n        case 'HIGH': return 'high';\r\n        case 'MEDIUM': return 'normal';\r\n        case 'LOW': return 'low';\r\n        default: return 'normal';\r\n      }\r\n    };\r\n\r\n    const getEscalationEmoji = (priority: string): string => {\r\n      switch (priority) {\r\n        case 'critical': return '🚨';\r\n        case 'high': return '⚠️';\r\n        case 'normal': return '📊';\r\n        case 'low': return 'ℹ️';\r\n        default: return '📋';\r\n      }\r\n    };\r\n\r\n    // Test priority mapping\r\n    expect(getPriorityLevel('CRITICAL')).toBe('critical');\r\n    expect(getPriorityLevel('HIGH')).toBe('high');\r\n    expect(getPriorityLevel('MEDIUM')).toBe('normal');\r\n    expect(getPriorityLevel('LOW')).toBe('low');\r\n\r\n    // Test escalation emojis\r\n    expect(getEscalationEmoji('critical')).toBe('🚨');\r\n    expect(getEscalationEmoji('high')).toBe('⚠️');\r\n    expect(getEscalationEmoji('normal')).toBe('📊');\r\n    expect(getEscalationEmoji('low')).toBe('ℹ️');\r\n  });\r\n\r\n  test('should validate performance and reliability metrics', () => {\r\n    // Test notification timing\r\n    const startTime = Date.now();\r\n    \r\n    // Simulate notification processing\r\n    const processNotification = (data: any): Promise<string> => {\r\n      return new Promise((resolve) => {\r\n        setTimeout(() => {\r\n          resolve(`notification_${Date.now()}`);\r\n        }, 10); // 10ms processing time\r\n      });\r\n    };\r\n\r\n    // Test multiple notifications\r\n    const notifications = Array.from({ length: 5 }, (_, i) => ({\r\n      id: i,\r\n      symbol: `TEST_${i}`,\r\n      action: 'BUY',\r\n      price: 45000 + i\r\n    }));\r\n\r\n    return Promise.all(notifications.map(processNotification)).then(results => {\r\n      const endTime = Date.now();\r\n      const totalTime = endTime - startTime;\r\n\r\n      // Verify all notifications were processed\r\n      expect(results.length).toBe(5);\r\n      expect(results.every(result => result.startsWith('notification_'))).toBe(true);\r\n      \r\n      // Verify reasonable performance (should complete quickly)\r\n      expect(totalTime).toBeLessThan(1000); // Less than 1 second\r\n    });\r\n  });\r\n});"],"version":3}