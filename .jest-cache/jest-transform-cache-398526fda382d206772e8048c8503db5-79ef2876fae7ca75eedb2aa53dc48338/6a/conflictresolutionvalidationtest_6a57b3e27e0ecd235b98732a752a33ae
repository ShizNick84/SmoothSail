a58dbf7e9df458de7510fcb400628d42
"use strict";
/**
 * =============================================================================
 * STRATEGY CONFLICT RESOLUTION VALIDATION TESTS
 * =============================================================================
 *
 * Comprehensive tests for strategy conflict detection and resolution mechanisms.
 * These tests validate that the harmonization engine correctly identifies,
 * analyzes, and resolves conflicts between different trading indicators.
 *
 * Requirements: 17.9, 17.10 - Conflict detection and resolution testing
 *
 * CRITICAL FEATURES:
 * - Conflict detection accuracy
 * - Resolution mechanism validation
 * - Weighted scoring conflict resolution
 * - Multi-indicator conflict scenarios
 * - Edge case handling
 *
 * @author AI Crypto Trading System
 * @version 1.0.0
 * @license PROPRIETARY
 * =============================================================================
 */
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const harmonization_1 = require("../../../trading/strategies/harmonization");
(0, globals_1.describe)('Strategy Conflict Resolution Validation', () => {
    let harmonizationEngine;
    let mockMarketData;
    (0, globals_1.beforeEach)(() => {
        harmonizationEngine = new harmonization_1.StrategyHarmonizationEngine();
        mockMarketData = generateMockMarketData();
    });
    (0, globals_1.describe)('Conflict Detection Accuracy', () => {
        (0, globals_1.test)('should detect strong opposing signals', () => {
            const strongOpposingSignals = [
                {
                    id: '1',
                    symbol: 'BTC/USDT',
                    type: 'BUY',
                    strength: 85,
                    confidence: 80,
                    indicators: ['RSI'],
                    reasoning: 'Strong RSI oversold signal',
                    riskReward: 2.5,
                    timestamp: new Date()
                },
                {
                    id: '2',
                    symbol: 'BTC/USDT',
                    type: 'SELL',
                    strength: 90,
                    confidence: 85,
                    indicators: ['MACD'],
                    reasoning: 'Strong MACD bearish crossover',
                    riskReward: 2.2,
                    timestamp: new Date()
                }
            ];
            globals_1.jest.spyOn(harmonizationEngine, 'generateAllSignals').mockReturnValue(strongOpposingSignals);
            const harmonizedSignal = harmonizationEngine.harmonizeSignals(mockMarketData);
            (0, globals_1.expect)(harmonizedSignal).toBeDefined();
            if (harmonizedSignal) {
                (0, globals_1.expect)(harmonizedSignal.conflicts.length).toBeGreaterThan(0);
                (0, globals_1.expect)(harmonizedSignal.conflicts.some(c => c.includes('Strong conflicting signals') || c.includes('conflicting'))).toBe(true);
                // Should include both indicators in conflict description
                const conflictText = harmonizedSignal.conflicts.join(' ');
                (0, globals_1.expect)(conflictText.includes('RSI') || conflictText.includes('MACD')).toBe(true);
            }
        });
        (0, globals_1.test)('should detect momentum vs trend conflicts', () => {
            const momentumTrendConflict = [
                {
                    id: '1',
                    symbol: 'BTC/USDT',
                    type: 'BUY',
                    strength: 75,
                    confidence: 70,
                    indicators: ['RSI'], // Momentum indicator
                    reasoning: 'RSI showing oversold momentum',
                    riskReward: 2.0,
                    timestamp: new Date()
                },
                {
                    id: '2',
                    symbol: 'BTC/USDT',
                    type: 'SELL',
                    strength: 80,
                    confidence: 75,
                    indicators: ['EMA'], // Trend indicator
                    reasoning: 'EMA showing bearish trend',
                    riskReward: 1.8,
                    timestamp: new Date()
                }
            ];
            globals_1.jest.spyOn(harmonizationEngine, 'generateAllSignals').mockReturnValue(momentumTrendConflict);
            const harmonizedSignal = harmonizationEngine.harmonizeSignals(mockMarketData);
            (0, globals_1.expect)(harmonizedSignal).toBeDefined();
            if (harmonizedSignal) {
                (0, globals_1.expect)(harmonizedSignal.conflicts.some(c => c.includes('Momentum vs Trend') || c.includes('momentum') || c.includes('trend'))).toBe(true);
            }
        });
        (0, globals_1.test)('should detect multiple indicator conflicts', () => {
            const multipleConflicts = [
                {
                    id: '1',
                    symbol: 'BTC/USDT',
                    type: 'BUY',
                    strength: 80,
                    confidence: 75,
                    indicators: ['RSI'],
                    reasoning: 'RSI oversold',
                    riskReward: 2.0,
                    timestamp: new Date()
                },
                {
                    id: '2',
                    symbol: 'BTC/USDT',
                    type: 'SELL',
                    strength: 85,
                    confidence: 80,
                    indicators: ['MACD'],
                    reasoning: 'MACD bearish',
                    riskReward: 1.9,
                    timestamp: new Date()
                },
                {
                    id: '3',
                    symbol: 'BTC/USDT',
                    type: 'BUY',
                    strength: 70,
                    confidence: 65,
                    indicators: ['Fibonacci'],
                    reasoning: 'Fibonacci support',
                    riskReward: 1.8,
                    timestamp: new Date()
                },
                {
                    id: '4',
                    symbol: 'BTC/USDT',
                    type: 'SELL',
                    strength: 75,
                    confidence: 70,
                    indicators: ['Breakout'],
                    reasoning: 'Breakout failure',
                    riskReward: 1.7,
                    timestamp: new Date()
                }
            ];
            globals_1.jest.spyOn(harmonizationEngine, 'generateAllSignals').mockReturnValue(multipleConflicts);
            const harmonizedSignal = harmonizationEngine.harmonizeSignals(mockMarketData);
            (0, globals_1.expect)(harmonizedSignal).toBeDefined();
            if (harmonizedSignal) {
                // Should detect multiple conflicts
                (0, globals_1.expect)(harmonizedSignal.conflicts.length).toBeGreaterThan(0);
                // Should handle complex conflict scenarios
                (0, globals_1.expect)(harmonizedSignal.reasoning).toContain('conflict');
                (0, globals_1.expect)(harmonizedSignal.confidence).toBeLessThan(80); // Confidence should be reduced due to conflicts
            }
        });
        (0, globals_1.test)('should not detect conflicts in aligned signals', () => {
            const alignedSignals = [
                {
                    id: '1',
                    symbol: 'BTC/USDT',
                    type: 'BUY',
                    strength: 75,
                    confidence: 70,
                    indicators: ['RSI'],
                    reasoning: 'RSI oversold',
                    riskReward: 2.0,
                    timestamp: new Date()
                },
                {
                    id: '2',
                    symbol: 'BTC/USDT',
                    type: 'BUY',
                    strength: 80,
                    confidence: 75,
                    indicators: ['MACD'],
                    reasoning: 'MACD bullish crossover',
                    riskReward: 1.9,
                    timestamp: new Date()
                },
                {
                    id: '3',
                    symbol: 'BTC/USDT',
                    type: 'BUY',
                    strength: 70,
                    confidence: 65,
                    indicators: ['EMA'],
                    reasoning: 'EMA bullish trend',
                    riskReward: 1.8,
                    timestamp: new Date()
                }
            ];
            globals_1.jest.spyOn(harmonizationEngine, 'generateAllSignals').mockReturnValue(alignedSignals);
            const harmonizedSignal = harmonizationEngine.harmonizeSignals(mockMarketData);
            (0, globals_1.expect)(harmonizedSignal).toBeDefined();
            if (harmonizedSignal) {
                // Should have minimal or no conflicts
                (0, globals_1.expect)(harmonizedSignal.conflicts.length).toBe(0);
                (0, globals_1.expect)(harmonizedSignal.overallSignal).toBe('BUY');
                (0, globals_1.expect)(harmonizedSignal.confidence).toBeGreaterThan(70); // High confidence due to alignment
            }
        });
        (0, globals_1.test)('should detect weak signal conflicts', () => {
            const weakConflictingSignals = [
                {
                    id: '1',
                    symbol: 'BTC/USDT',
                    type: 'BUY',
                    strength: 45, // Weak signal
                    confidence: 50,
                    indicators: ['RSI'],
                    reasoning: 'Weak RSI signal',
                    riskReward: 1.2,
                    timestamp: new Date()
                },
                {
                    id: '2',
                    symbol: 'BTC/USDT',
                    type: 'SELL',
                    strength: 40, // Weak signal
                    confidence: 45,
                    indicators: ['MACD'],
                    reasoning: 'Weak MACD signal',
                    riskReward: 1.1,
                    timestamp: new Date()
                }
            ];
            globals_1.jest.spyOn(harmonizationEngine, 'generateAllSignals').mockReturnValue(weakConflictingSignals);
            const harmonizedSignal = harmonizationEngine.harmonizeSignals(mockMarketData);
            (0, globals_1.expect)(harmonizedSignal).toBeDefined();
            if (harmonizedSignal) {
                // Should prefer HOLD for weak conflicting signals
                (0, globals_1.expect)(harmonizedSignal.overallSignal).toBe('HOLD');
                (0, globals_1.expect)(harmonizedSignal.confidence).toBeLessThan(60);
            }
        });
    });
    (0, globals_1.describe)('Resolution Mechanism Validation', () => {
        (0, globals_1.test)('should resolve conflicts through weighted scoring', () => {
            const conflictingSignals = [
                {
                    id: '1',
                    symbol: 'BTC/USDT',
                    type: 'BUY',
                    strength: 70,
                    confidence: 65,
                    indicators: ['RSI'],
                    reasoning: 'RSI oversold',
                    riskReward: 2.0,
                    timestamp: new Date()
                },
                {
                    id: '2',
                    symbol: 'BTC/USDT',
                    type: 'SELL',
                    strength: 60,
                    confidence: 55,
                    indicators: ['MACD'],
                    reasoning: 'MACD bearish',
                    riskReward: 1.5,
                    timestamp: new Date()
                }
            ];
            globals_1.jest.spyOn(harmonizationEngine, 'generateAllSignals').mockReturnValue(conflictingSignals);
            // Test with RSI heavily weighted
            const rsiWeightedConfig = {
                rsi: { name: 'RSI', enabled: true, weight: 0.8, parameters: {} },
                macd: { name: 'MACD', enabled: true, weight: 0.2, parameters: {} }
            };
            const rsiWeightedSignal = harmonizationEngine.harmonizeSignals(mockMarketData, rsiWeightedConfig);
            // Test with MACD heavily weighted
            const macdWeightedConfig = {
                rsi: { name: 'RSI', enabled: true, weight: 0.2, parameters: {} },
                macd: { name: 'MACD', enabled: true, weight: 0.8, parameters: {} }
            };
            const macdWeightedSignal = harmonizationEngine.harmonizeSignals(mockMarketData, macdWeightedConfig);
            (0, globals_1.expect)(rsiWeightedSignal).toBeDefined();
            (0, globals_1.expect)(macdWeightedSignal).toBeDefined();
            if (rsiWeightedSignal && macdWeightedSignal) {
                // RSI-weighted should favor BUY (stronger RSI signal)
                (0, globals_1.expect)(rsiWeightedSignal.overallSignal).toBe('BUY');
                // MACD-weighted might favor SELL or HOLD (weaker MACD signal)
                (0, globals_1.expect)(['SELL', 'HOLD']).toContain(macdWeightedSignal.overallSignal);
                // Weights should be reflected in the harmonized signals
                (0, globals_1.expect)(rsiWeightedSignal.weights.rsi).toBeGreaterThan(rsiWeightedSignal.weights.macd);
                (0, globals_1.expect)(macdWeightedSignal.weights.macd).toBeGreaterThan(macdWeightedSignal.weights.rsi);
            }
        });
        (0, globals_1.test)('should resolve conflicts based on signal strength', () => {
            const strengthBasedConflict = [
                {
                    id: '1',
                    symbol: 'BTC/USDT',
                    type: 'BUY',
                    strength: 90, // Very strong
                    confidence: 85,
                    indicators: ['RSI'],
                    reasoning: 'Very strong RSI oversold',
                    riskReward: 2.5,
                    timestamp: new Date()
                },
                {
                    id: '2',
                    symbol: 'BTC/USDT',
                    type: 'SELL',
                    strength: 55, // Moderate
                    confidence: 50,
                    indicators: ['MACD'],
                    reasoning: 'Moderate MACD bearish',
                    riskReward: 1.3,
                    timestamp: new Date()
                }
            ];
            globals_1.jest.spyOn(harmonizationEngine, 'generateAllSignals').mockReturnValue(strengthBasedConflict);
            const harmonizedSignal = harmonizationEngine.harmonizeSignals(mockMarketData);
            (0, globals_1.expect)(harmonizedSignal).toBeDefined();
            if (harmonizedSignal) {
                // Should favor the stronger signal (BUY)
                (0, globals_1.expect)(harmonizedSignal.overallSignal).toBe('BUY');
                (0, globals_1.expect)(harmonizedSignal.strength).toBeGreaterThan(70);
                // Should still detect the conflict
                (0, globals_1.expect)(harmonizedSignal.conflicts.length).toBeGreaterThan(0);
            }
        });
        (0, globals_1.test)('should resolve conflicts based on confidence levels', () => {
            const confidenceBasedConflict = [
                {
                    id: '1',
                    symbol: 'BTC/USDT',
                    type: 'BUY',
                    strength: 70,
                    confidence: 90, // Very high confidence
                    indicators: ['RSI'],
                    reasoning: 'High confidence RSI signal',
                    riskReward: 2.0,
                    timestamp: new Date()
                },
                {
                    id: '2',
                    symbol: 'BTC/USDT',
                    type: 'SELL',
                    strength: 75,
                    confidence: 45, // Low confidence
                    indicators: ['MACD'],
                    reasoning: 'Low confidence MACD signal',
                    riskReward: 1.8,
                    timestamp: new Date()
                }
            ];
            globals_1.jest.spyOn(harmonizationEngine, 'generateAllSignals').mockReturnValue(confidenceBasedConflict);
            const harmonizedSignal = harmonizationEngine.harmonizeSignals(mockMarketData);
            (0, globals_1.expect)(harmonizedSignal).toBeDefined();
            if (harmonizedSignal) {
                // Should favor the higher confidence signal (BUY)
                (0, globals_1.expect)(harmonizedSignal.overallSignal).toBe('BUY');
                (0, globals_1.expect)(harmonizedSignal.confidence).toBeGreaterThan(60);
            }
        });
        (0, globals_1.test)('should handle equal strength conflicts', () => {
            const equalStrengthConflict = [
                {
                    id: '1',
                    symbol: 'BTC/USDT',
                    type: 'BUY',
                    strength: 75,
                    confidence: 70,
                    indicators: ['RSI'],
                    reasoning: 'Equal strength buy signal',
                    riskReward: 2.0,
                    timestamp: new Date()
                },
                {
                    id: '2',
                    symbol: 'BTC/USDT',
                    type: 'SELL',
                    strength: 75,
                    confidence: 70,
                    indicators: ['MACD'],
                    reasoning: 'Equal strength sell signal',
                    riskReward: 2.0,
                    timestamp: new Date()
                }
            ];
            globals_1.jest.spyOn(harmonizationEngine, 'generateAllSignals').mockReturnValue(equalStrengthConflict);
            const harmonizedSignal = harmonizationEngine.harmonizeSignals(mockMarketData);
            (0, globals_1.expect)(harmonizedSignal).toBeDefined();
            if (harmonizedSignal) {
                // Should prefer HOLD when signals are equally strong and conflicting
                (0, globals_1.expect)(harmonizedSignal.overallSignal).toBe('HOLD');
                (0, globals_1.expect)(harmonizedSignal.conflicts.length).toBeGreaterThan(0);
                (0, globals_1.expect)(harmonizedSignal.reasoning).toContain('conflict');
            }
        });
    });
    (0, globals_1.describe)('Multi-Indicator Conflict Scenarios', () => {
        (0, globals_1.test)('should handle three-way conflicts', () => {
            const threeWayConflict = [
                {
                    id: '1',
                    symbol: 'BTC/USDT',
                    type: 'BUY',
                    strength: 70,
                    confidence: 65,
                    indicators: ['RSI'],
                    reasoning: 'RSI buy signal',
                    riskReward: 2.0,
                    timestamp: new Date()
                },
                {
                    id: '2',
                    symbol: 'BTC/USDT',
                    type: 'SELL',
                    strength: 75,
                    confidence: 70,
                    indicators: ['MACD'],
                    reasoning: 'MACD sell signal',
                    riskReward: 1.8,
                    timestamp: new Date()
                },
                {
                    id: '3',
                    symbol: 'BTC/USDT',
                    type: 'HOLD',
                    strength: 65,
                    confidence: 60,
                    indicators: ['EMA'],
                    reasoning: 'EMA neutral signal',
                    riskReward: 1.0,
                    timestamp: new Date()
                }
            ];
            globals_1.jest.spyOn(harmonizationEngine, 'generateAllSignals').mockReturnValue(threeWayConflict);
            const harmonizedSignal = harmonizationEngine.harmonizeSignals(mockMarketData);
            (0, globals_1.expect)(harmonizedSignal).toBeDefined();
            if (harmonizedSignal) {
                // Should handle three-way conflict appropriately
                (0, globals_1.expect)(['BUY', 'SELL', 'HOLD']).toContain(harmonizedSignal.overallSignal);
                (0, globals_1.expect)(harmonizedSignal.conflicts.length).toBeGreaterThan(0);
                (0, globals_1.expect)(harmonizedSignal.confidence).toBeLessThan(75); // Reduced due to conflicts
            }
        });
        (0, globals_1.test)('should handle majority vs minority conflicts', () => {
            const majorityMinorityConflict = [
                {
                    id: '1',
                    symbol: 'BTC/USDT',
                    type: 'BUY',
                    strength: 70,
                    confidence: 65,
                    indicators: ['RSI'],
                    reasoning: 'RSI buy signal',
                    riskReward: 2.0,
                    timestamp: new Date()
                },
                {
                    id: '2',
                    symbol: 'BTC/USDT',
                    type: 'BUY',
                    strength: 75,
                    confidence: 70,
                    indicators: ['MACD'],
                    reasoning: 'MACD buy signal',
                    riskReward: 1.9,
                    timestamp: new Date()
                },
                {
                    id: '3',
                    symbol: 'BTC/USDT',
                    type: 'BUY',
                    strength: 68,
                    confidence: 63,
                    indicators: ['Fibonacci'],
                    reasoning: 'Fibonacci buy signal',
                    riskReward: 1.8,
                    timestamp: new Date()
                },
                {
                    id: '4',
                    symbol: 'BTC/USDT',
                    type: 'SELL',
                    strength: 85, // Strong minority signal
                    confidence: 80,
                    indicators: ['Breakout'],
                    reasoning: 'Strong breakout sell signal',
                    riskReward: 2.2,
                    timestamp: new Date()
                }
            ];
            globals_1.jest.spyOn(harmonizationEngine, 'generateAllSignals').mockReturnValue(majorityMinorityConflict);
            const harmonizedSignal = harmonizationEngine.harmonizeSignals(mockMarketData);
            (0, globals_1.expect)(harmonizedSignal).toBeDefined();
            if (harmonizedSignal) {
                // Should consider both majority consensus and minority strength
                (0, globals_1.expect)(['BUY', 'HOLD']).toContain(harmonizedSignal.overallSignal);
                (0, globals_1.expect)(harmonizedSignal.conflicts.length).toBeGreaterThan(0);
                // Reasoning should mention the conflict
                (0, globals_1.expect)(harmonizedSignal.reasoning).toContain('conflict');
            }
        });
        (0, globals_1.test)('should handle cascading conflicts', () => {
            const cascadingConflicts = [
                {
                    id: '1',
                    symbol: 'BTC/USDT',
                    type: 'BUY',
                    strength: 80,
                    confidence: 75,
                    indicators: ['RSI', 'Stochastic'], // Multiple indicators in one signal
                    reasoning: 'Multiple momentum indicators bullish',
                    riskReward: 2.1,
                    timestamp: new Date()
                },
                {
                    id: '2',
                    symbol: 'BTC/USDT',
                    type: 'SELL',
                    strength: 85,
                    confidence: 80,
                    indicators: ['MACD', 'Signal Line'], // Multiple indicators in one signal
                    reasoning: 'Multiple trend indicators bearish',
                    riskReward: 2.0,
                    timestamp: new Date()
                }
            ];
            globals_1.jest.spyOn(harmonizationEngine, 'generateAllSignals').mockReturnValue(cascadingConflicts);
            const harmonizedSignal = harmonizationEngine.harmonizeSignals(mockMarketData);
            (0, globals_1.expect)(harmonizedSignal).toBeDefined();
            if (harmonizedSignal) {
                // Should handle complex multi-indicator conflicts
                (0, globals_1.expect)(harmonizedSignal.conflicts.length).toBeGreaterThan(0);
                (0, globals_1.expect)(harmonizedSignal.reasoning).toContain('conflict');
                // Should still make a decision
                (0, globals_1.expect)(['BUY', 'SELL', 'HOLD']).toContain(harmonizedSignal.overallSignal);
            }
        });
    });
    (0, globals_1.describe)('Edge Case Handling', () => {
        (0, globals_1.test)('should handle single signal (no conflicts)', () => {
            const singleSignal = [
                {
                    id: '1',
                    symbol: 'BTC/USDT',
                    type: 'BUY',
                    strength: 75,
                    confidence: 70,
                    indicators: ['RSI'],
                    reasoning: 'Single RSI signal',
                    riskReward: 2.0,
                    timestamp: new Date()
                }
            ];
            globals_1.jest.spyOn(harmonizationEngine, 'generateAllSignals').mockReturnValue(singleSignal);
            const harmonizedSignal = harmonizationEngine.harmonizeSignals(mockMarketData);
            (0, globals_1.expect)(harmonizedSignal).toBeDefined();
            if (harmonizedSignal) {
                (0, globals_1.expect)(harmonizedSignal.conflicts.length).toBe(0);
                (0, globals_1.expect)(harmonizedSignal.overallSignal).toBe('BUY');
                (0, globals_1.expect)(harmonizedSignal.confidence).toBe(70);
            }
        });
        (0, globals_1.test)('should handle empty signals', () => {
            globals_1.jest.spyOn(harmonizationEngine, 'generateAllSignals').mockReturnValue([]);
            const harmonizedSignal = harmonizationEngine.harmonizeSignals(mockMarketData);
            (0, globals_1.expect)(harmonizedSignal).toBeNull();
        });
        (0, globals_1.test)('should handle signals with missing metadata', () => {
            const signalsWithoutMetadata = [
                {
                    id: '1',
                    symbol: 'BTC/USDT',
                    type: 'BUY',
                    strength: 75,
                    confidence: 70,
                    indicators: ['RSI'],
                    reasoning: 'RSI signal without metadata',
                    riskReward: 2.0,
                    timestamp: new Date()
                    // No metadata property
                },
                {
                    id: '2',
                    symbol: 'BTC/USDT',
                    type: 'SELL',
                    strength: 65,
                    confidence: 60,
                    indicators: ['MACD'],
                    reasoning: 'MACD signal without metadata',
                    riskReward: 1.8,
                    timestamp: new Date()
                    // No metadata property
                }
            ];
            globals_1.jest.spyOn(harmonizationEngine, 'generateAllSignals').mockReturnValue(signalsWithoutMetadata);
            const harmonizedSignal = harmonizationEngine.harmonizeSignals(mockMarketData);
            (0, globals_1.expect)(harmonizedSignal).toBeDefined();
            if (harmonizedSignal) {
                // Should handle missing metadata gracefully
                (0, globals_1.expect)(harmonizedSignal.indicators).toBeDefined();
                (0, globals_1.expect)(Array.isArray(harmonizedSignal.indicators)).toBe(true);
                (0, globals_1.expect)(harmonizedSignal.conflicts.length).toBeGreaterThan(0);
            }
        });
        (0, globals_1.test)('should handle extreme signal values', () => {
            const extremeSignals = [
                {
                    id: '1',
                    symbol: 'BTC/USDT',
                    type: 'BUY',
                    strength: 100, // Maximum strength
                    confidence: 100, // Maximum confidence
                    indicators: ['RSI'],
                    reasoning: 'Extreme buy signal',
                    riskReward: 10.0, // Very high RR
                    timestamp: new Date()
                },
                {
                    id: '2',
                    symbol: 'BTC/USDT',
                    type: 'SELL',
                    strength: 0, // Minimum strength
                    confidence: 0, // Minimum confidence
                    indicators: ['MACD'],
                    reasoning: 'Extreme sell signal',
                    riskReward: 0.1, // Very low RR
                    timestamp: new Date()
                }
            ];
            globals_1.jest.spyOn(harmonizationEngine, 'generateAllSignals').mockReturnValue(extremeSignals);
            const harmonizedSignal = harmonizationEngine.harmonizeSignals(mockMarketData);
            (0, globals_1.expect)(harmonizedSignal).toBeDefined();
            if (harmonizedSignal) {
                // Should handle extreme values without crashing
                (0, globals_1.expect)(harmonizedSignal.strength).toBeGreaterThanOrEqual(0);
                (0, globals_1.expect)(harmonizedSignal.strength).toBeLessThanOrEqual(100);
                (0, globals_1.expect)(harmonizedSignal.confidence).toBeGreaterThanOrEqual(0);
                (0, globals_1.expect)(harmonizedSignal.confidence).toBeLessThanOrEqual(100);
                // Should favor the stronger signal
                (0, globals_1.expect)(harmonizedSignal.overallSignal).toBe('BUY');
            }
        });
        (0, globals_1.test)('should handle identical signals', () => {
            const identicalSignals = [
                {
                    id: '1',
                    symbol: 'BTC/USDT',
                    type: 'BUY',
                    strength: 75,
                    confidence: 70,
                    indicators: ['RSI'],
                    reasoning: 'Identical signal 1',
                    riskReward: 2.0,
                    timestamp: new Date()
                },
                {
                    id: '2',
                    symbol: 'BTC/USDT',
                    type: 'BUY',
                    strength: 75,
                    confidence: 70,
                    indicators: ['RSI'],
                    reasoning: 'Identical signal 2',
                    riskReward: 2.0,
                    timestamp: new Date()
                }
            ];
            globals_1.jest.spyOn(harmonizationEngine, 'generateAllSignals').mockReturnValue(identicalSignals);
            const harmonizedSignal = harmonizationEngine.harmonizeSignals(mockMarketData);
            (0, globals_1.expect)(harmonizedSignal).toBeDefined();
            if (harmonizedSignal) {
                // Should handle identical signals without conflicts
                (0, globals_1.expect)(harmonizedSignal.conflicts.length).toBe(0);
                (0, globals_1.expect)(harmonizedSignal.overallSignal).toBe('BUY');
                (0, globals_1.expect)(harmonizedSignal.confidence).toBeGreaterThan(70); // Should be higher due to consensus
            }
        });
    });
    (0, globals_1.describe)('Conflict Resolution Performance', () => {
        (0, globals_1.test)('should resolve conflicts efficiently with many signals', () => {
            // Generate many conflicting signals
            const manyConflictingSignals = [];
            for (let i = 0; i < 50; i++) {
                manyConflictingSignals.push({
                    id: `${i}`,
                    symbol: 'BTC/USDT',
                    type: i % 2 === 0 ? 'BUY' : 'SELL',
                    strength: 50 + Math.random() * 40,
                    confidence: 50 + Math.random() * 40,
                    indicators: [`Indicator${i % 5}`],
                    reasoning: `Signal ${i}`,
                    riskReward: 1.5 + Math.random(),
                    timestamp: new Date()
                });
            }
            globals_1.jest.spyOn(harmonizationEngine, 'generateAllSignals').mockReturnValue(manyConflictingSignals);
            const startTime = Date.now();
            const harmonizedSignal = harmonizationEngine.harmonizeSignals(mockMarketData);
            const endTime = Date.now();
            const processingTime = endTime - startTime;
            // Should complete within reasonable time (less than 1 second)
            (0, globals_1.expect)(processingTime).toBeLessThan(1000);
            (0, globals_1.expect)(harmonizedSignal).toBeDefined();
            if (harmonizedSignal) {
                (0, globals_1.expect)(harmonizedSignal.conflicts.length).toBeGreaterThan(0);
                (0, globals_1.expect)(['BUY', 'SELL', 'HOLD']).toContain(harmonizedSignal.overallSignal);
            }
        });
        (0, globals_1.test)('should maintain consistency in conflict resolution', () => {
            const consistentConflictSignals = [
                {
                    id: '1',
                    symbol: 'BTC/USDT',
                    type: 'BUY',
                    strength: 70,
                    confidence: 65,
                    indicators: ['RSI'],
                    reasoning: 'Consistent test signal',
                    riskReward: 2.0,
                    timestamp: new Date()
                },
                {
                    id: '2',
                    symbol: 'BTC/USDT',
                    type: 'SELL',
                    strength: 60,
                    confidence: 55,
                    indicators: ['MACD'],
                    reasoning: 'Consistent test signal',
                    riskReward: 1.5,
                    timestamp: new Date()
                }
            ];
            globals_1.jest.spyOn(harmonizationEngine, 'generateAllSignals').mockReturnValue(consistentConflictSignals);
            // Run harmonization multiple times
            const results = [
                harmonizationEngine.harmonizeSignals(mockMarketData),
                harmonizationEngine.harmonizeSignals(mockMarketData),
                harmonizationEngine.harmonizeSignals(mockMarketData)
            ];
            // Results should be consistent
            (0, globals_1.expect)(results[0]).toBeDefined();
            (0, globals_1.expect)(results[1]).toBeDefined();
            (0, globals_1.expect)(results[2]).toBeDefined();
            if (results[0] && results[1] && results[2]) {
                (0, globals_1.expect)(results[0].overallSignal).toBe(results[1].overallSignal);
                (0, globals_1.expect)(results[1].overallSignal).toBe(results[2].overallSignal);
                (0, globals_1.expect)(Math.abs(results[0].strength - results[1].strength)).toBeLessThan(0.1);
                (0, globals_1.expect)(Math.abs(results[0].confidence - results[1].confidence)).toBeLessThan(0.1);
                (0, globals_1.expect)(results[0].conflicts.length).toBe(results[1].conflicts.length);
                (0, globals_1.expect)(results[1].conflicts.length).toBe(results[2].conflicts.length);
            }
        });
    });
    // Helper function to generate mock market data
    function generateMockMarketData() {
        const data = [];
        let basePrice = 50000;
        for (let i = 0; i < 50; i++) {
            const price = basePrice + (Math.sin(i * 0.1) * 1000) + (Math.random() * 200 - 100);
            data.push({
                symbol: 'BTC/USDT',
                timestamp: new Date(Date.now() - (50 - i) * 60000),
                open: price - 10,
                high: price + 50,
                low: price - 50,
                close: price,
                volume: 1000000 + (Math.random() * 500000)
            });
        }
        return data;
    }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,