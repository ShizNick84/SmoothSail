afb6c4080f582525c67fb9cbe9bd7c83
"use strict";

/**
 * =============================================================================
 * MODEL MANAGER - LLM MODEL LIFECYCLE AND OPTIMIZATION
 * =============================================================================
 *
 * This module manages the lifecycle of LLM models, including loading, unloading,
 * optimization, and switching between models based on system resources and
 * performance requirements. Specifically designed for Intel NUC constraints.
 *
 * Key Features:
 * - Dynamic model loading/unloading based on memory pressure
 * - Model performance monitoring and optimization
 * - Automatic fallback mechanisms for model failures
 * - Resource-aware model selection
 * - Model integrity verification and security
 *
 * @author AI Crypto Trading System
 * @version 1.0.0
 * @license PROPRIETARY
 * =============================================================================
 */
/* istanbul ignore next */
function cov_wdfcab0iz() {
  var path = "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\ai\\model-manager.ts";
  var hash = "a1e959a4905e98ac5b835cf8b1ba225d3cf554de";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\ai\\model-manager.ts",
    statementMap: {
      "0": {
        start: {
          line: 23,
          column: 0
        },
        end: {
          line: 23,
          column: 62
        }
      },
      "1": {
        start: {
          line: 24,
          column: 0
        },
        end: {
          line: 24,
          column: 30
        }
      },
      "2": {
        start: {
          line: 25,
          column: 17
        },
        end: {
          line: 25,
          column: 34
        }
      },
      "3": {
        start: {
          line: 26,
          column: 13
        },
        end: {
          line: 26,
          column: 26
        }
      },
      "4": {
        start: {
          line: 27,
          column: 15
        },
        end: {
          line: 27,
          column: 30
        }
      },
      "5": {
        start: {
          line: 28,
          column: 17
        },
        end: {
          line: 28,
          column: 49
        }
      },
      "6": {
        start: {
          line: 37,
          column: 22
        },
        end: {
          line: 37,
          column: 31
        }
      },
      "7": {
        start: {
          line: 38,
          column: 19
        },
        end: {
          line: 38,
          column: 28
        }
      },
      "8": {
        start: {
          line: 39,
          column: 30
        },
        end: {
          line: 39,
          column: 39
        }
      },
      "9": {
        start: {
          line: 40,
          column: 24
        },
        end: {
          line: 40,
          column: 33
        }
      },
      "10": {
        start: {
          line: 41,
          column: 25
        },
        end: {
          line: 41,
          column: 29
        }
      },
      "11": {
        start: {
          line: 42,
          column: 20
        },
        end: {
          line: 42,
          column: 25
        }
      },
      "12": {
        start: {
          line: 44,
          column: 22
        },
        end: {
          line: 66,
          column: 5
        }
      },
      "13": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 68,
          column: 16
        }
      },
      "14": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 69,
          column: 43
        }
      },
      "15": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 70,
          column: 47
        }
      },
      "16": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 71,
          column: 47
        }
      },
      "17": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 72,
          column: 62
        }
      },
      "18": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 98,
          column: 9
        }
      },
      "19": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 80,
          column: 69
        }
      },
      "20": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 82,
          column: 47
        }
      },
      "21": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 84,
          column: 49
        }
      },
      "22": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 86,
          column: 48
        }
      },
      "23": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 88,
          column: 45
        }
      },
      "24": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 90,
          column: 47
        }
      },
      "25": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 38
        }
      },
      "26": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 92,
          column: 77
        }
      },
      "27": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 37
        }
      },
      "28": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 82
        }
      },
      "29": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 97,
          column: 85
        }
      },
      "30": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 111,
          column: 9
        }
      },
      "31": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 105,
          column: 61
        }
      },
      "32": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 106,
          column: 88
        }
      },
      "33": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 109,
          column: 90
        }
      },
      "34": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 110,
          column: 94
        }
      },
      "35": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 137,
          column: 9
        }
      },
      "36": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 118,
          column: 71
        }
      },
      "37": {
        start: {
          line: 119,
          column: 26
        },
        end: {
          line: 119,
          column: 75
        }
      },
      "38": {
        start: {
          line: 120,
          column: 31
        },
        end: {
          line: 120,
          column: 75
        }
      },
      "39": {
        start: {
          line: 120,
          column: 52
        },
        end: {
          line: 120,
          column: 74
        }
      },
      "40": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 131,
          column: 13
        }
      },
      "41": {
        start: {
          line: 122,
          column: 34
        },
        end: {
          line: 122,
          column: 83
        }
      },
      "42": {
        start: {
          line: 123,
          column: 34
        },
        end: {
          line: 123,
          column: 64
        }
      },
      "43": {
        start: {
          line: 125,
          column: 36
        },
        end: {
          line: 125,
          column: 72
        }
      },
      "44": {
        start: {
          line: 126,
          column: 16
        },
        end: {
          line: 130,
          column: 17
        }
      },
      "45": {
        start: {
          line: 127,
          column: 20
        },
        end: {
          line: 127,
          column: 54
        }
      },
      "46": {
        start: {
          line: 128,
          column: 20
        },
        end: {
          line: 128,
          column: 69
        }
      },
      "47": {
        start: {
          line: 129,
          column: 20
        },
        end: {
          line: 129,
          column: 78
        }
      },
      "48": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 132,
          column: 95
        }
      },
      "49": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 135,
          column: 72
        }
      },
      "50": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 136,
          column: 24
        }
      },
      "51": {
        start: {
          line: 144,
          column: 24
        },
        end: {
          line: 178,
          column: 9
        }
      },
      "52": {
        start: {
          line: 179,
          column: 27
        },
        end: {
          line: 179,
          column: 45
        }
      },
      "53": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 181,
          column: 24
        }
      },
      "54": {
        start: {
          line: 181,
          column: 12
        },
        end: {
          line: 181,
          column: 24
        }
      },
      "55": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 186,
          column: 10
        }
      },
      "56": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 208,
          column: 9
        }
      },
      "57": {
        start: {
          line: 193,
          column: 32
        },
        end: {
          line: 193,
          column: 98
        }
      },
      "58": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 204,
          column: 13
        }
      },
      "59": {
        start: {
          line: 195,
          column: 36
        },
        end: {
          line: 195,
          column: 86
        }
      },
      "60": {
        start: {
          line: 196,
          column: 32
        },
        end: {
          line: 196,
          column: 55
        }
      },
      "61": {
        start: {
          line: 197,
          column: 16
        },
        end: {
          line: 199,
          column: 17
        }
      },
      "62": {
        start: {
          line: 198,
          column: 20
        },
        end: {
          line: 198,
          column: 70
        }
      },
      "63": {
        start: {
          line: 200,
          column: 16
        },
        end: {
          line: 200,
          column: 118
        }
      },
      "64": {
        start: {
          line: 203,
          column: 16
        },
        end: {
          line: 203,
          column: 97
        }
      },
      "65": {
        start: {
          line: 207,
          column: 12
        },
        end: {
          line: 207,
          column: 81
        }
      },
      "66": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 214,
          column: 69
        }
      },
      "67": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 236,
          column: 9
        }
      },
      "68": {
        start: {
          line: 216,
          column: 12
        },
        end: {
          line: 235,
          column: 13
        }
      },
      "69": {
        start: {
          line: 217,
          column: 37
        },
        end: {
          line: 217,
          column: 83
        }
      },
      "70": {
        start: {
          line: 218,
          column: 16
        },
        end: {
          line: 218,
          column: 68
        }
      },
      "71": {
        start: {
          line: 219,
          column: 16
        },
        end: {
          line: 224,
          column: 17
        }
      },
      "72": {
        start: {
          line: 220,
          column: 20
        },
        end: {
          line: 220,
          column: 76
        }
      },
      "73": {
        start: {
          line: 223,
          column: 20
        },
        end: {
          line: 223,
          column: 99
        }
      },
      "74": {
        start: {
          line: 227,
          column: 16
        },
        end: {
          line: 227,
          column: 94
        }
      },
      "75": {
        start: {
          line: 228,
          column: 16
        },
        end: {
          line: 234,
          column: 19
        }
      },
      "76": {
        start: {
          line: 242,
          column: 23
        },
        end: {
          line: 242,
          column: 25
        }
      },
      "77": {
        start: {
          line: 243,
          column: 32
        },
        end: {
          line: 243,
          column: 34
        }
      },
      "78": {
        start: {
          line: 244,
          column: 8
        },
        end: {
          line: 269,
          column: 9
        }
      },
      "79": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 246,
          column: 87
        }
      },
      "80": {
        start: {
          line: 248,
          column: 26
        },
        end: {
          line: 248,
          column: 68
        }
      },
      "81": {
        start: {
          line: 249,
          column: 12
        },
        end: {
          line: 252,
          column: 13
        }
      },
      "82": {
        start: {
          line: 250,
          column: 16
        },
        end: {
          line: 250,
          column: 69
        }
      },
      "83": {
        start: {
          line: 251,
          column: 16
        },
        end: {
          line: 251,
          column: 62
        }
      },
      "84": {
        start: {
          line: 254,
          column: 36
        },
        end: {
          line: 254,
          column: 82
        }
      },
      "85": {
        start: {
          line: 255,
          column: 12
        },
        end: {
          line: 258,
          column: 13
        }
      },
      "86": {
        start: {
          line: 256,
          column: 16
        },
        end: {
          line: 256,
          column: 73
        }
      },
      "87": {
        start: {
          line: 257,
          column: 16
        },
        end: {
          line: 257,
          column: 78
        }
      },
      "88": {
        start: {
          line: 260,
          column: 37
        },
        end: {
          line: 260,
          column: 86
        }
      },
      "89": {
        start: {
          line: 261,
          column: 12
        },
        end: {
          line: 264,
          column: 13
        }
      },
      "90": {
        start: {
          line: 262,
          column: 16
        },
        end: {
          line: 262,
          column: 67
        }
      },
      "91": {
        start: {
          line: 263,
          column: 16
        },
        end: {
          line: 263,
          column: 82
        }
      },
      "92": {
        start: {
          line: 267,
          column: 12
        },
        end: {
          line: 267,
          column: 63
        }
      },
      "93": {
        start: {
          line: 268,
          column: 12
        },
        end: {
          line: 268,
          column: 68
        }
      },
      "94": {
        start: {
          line: 270,
          column: 8
        },
        end: {
          line: 276,
          column: 10
        }
      },
      "95": {
        start: {
          line: 283,
          column: 8
        },
        end: {
          line: 291,
          column: 9
        }
      },
      "96": {
        start: {
          line: 285,
          column: 26
        },
        end: {
          line: 285,
          column: 61
        }
      },
      "97": {
        start: {
          line: 286,
          column: 12
        },
        end: {
          line: 286,
          column: 34
        }
      },
      "98": {
        start: {
          line: 289,
          column: 12
        },
        end: {
          line: 289,
          column: 83
        }
      },
      "99": {
        start: {
          line: 290,
          column: 12
        },
        end: {
          line: 290,
          column: 25
        }
      },
      "100": {
        start: {
          line: 297,
          column: 8
        },
        end: {
          line: 297,
          column: 78
        }
      },
      "101": {
        start: {
          line: 299,
          column: 32
        },
        end: {
          line: 299,
          column: 92
        }
      },
      "102": {
        start: {
          line: 299,
          column: 68
        },
        end: {
          line: 299,
          column: 91
        }
      },
      "103": {
        start: {
          line: 300,
          column: 8
        },
        end: {
          line: 319,
          column: 9
        }
      },
      "104": {
        start: {
          line: 301,
          column: 12
        },
        end: {
          line: 318,
          column: 13
        }
      },
      "105": {
        start: {
          line: 302,
          column: 16
        },
        end: {
          line: 302,
          column: 113
        }
      },
      "106": {
        start: {
          line: 304,
          column: 40
        },
        end: {
          line: 304,
          column: 86
        }
      },
      "107": {
        start: {
          line: 305,
          column: 16
        },
        end: {
          line: 308,
          column: 17
        }
      },
      "108": {
        start: {
          line: 306,
          column: 20
        },
        end: {
          line: 306,
          column: 103
        }
      },
      "109": {
        start: {
          line: 307,
          column: 20
        },
        end: {
          line: 307,
          column: 29
        }
      },
      "110": {
        start: {
          line: 311,
          column: 16
        },
        end: {
          line: 311,
          column: 121
        }
      },
      "111": {
        start: {
          line: 313,
          column: 36
        },
        end: {
          line: 313,
          column: 87
        }
      },
      "112": {
        start: {
          line: 314,
          column: 16
        },
        end: {
          line: 317,
          column: 17
        }
      },
      "113": {
        start: {
          line: 315,
          column: 20
        },
        end: {
          line: 315,
          column: 119
        }
      },
      "114": {
        start: {
          line: 325,
          column: 8
        },
        end: {
          line: 373,
          column: 9
        }
      },
      "115": {
        start: {
          line: 326,
          column: 12
        },
        end: {
          line: 326,
          column: 66
        }
      },
      "116": {
        start: {
          line: 327,
          column: 36
        },
        end: {
          line: 327,
          column: 82
        }
      },
      "117": {
        start: {
          line: 328,
          column: 36
        },
        end: {
          line: 328,
          column: 68
        }
      },
      "118": {
        start: {
          line: 330,
          column: 33
        },
        end: {
          line: 335,
          column: 14
        }
      },
      "119": {
        start: {
          line: 332,
          column: 37
        },
        end: {
          line: 332,
          column: 74
        }
      },
      "120": {
        start: {
          line: 333,
          column: 16
        },
        end: {
          line: 334,
          column: 73
        }
      },
      "121": {
        start: {
          line: 336,
          column: 12
        },
        end: {
          line: 339,
          column: 13
        }
      },
      "122": {
        start: {
          line: 337,
          column: 16
        },
        end: {
          line: 337,
          column: 66
        }
      },
      "123": {
        start: {
          line: 338,
          column: 16
        },
        end: {
          line: 338,
          column: 28
        }
      },
      "124": {
        start: {
          line: 341,
          column: 33
        },
        end: {
          line: 363,
          column: 14
        }
      },
      "125": {
        start: {
          line: 342,
          column: 36
        },
        end: {
          line: 342,
          column: 79
        }
      },
      "126": {
        start: {
          line: 343,
          column: 28
        },
        end: {
          line: 343,
          column: 29
        }
      },
      "127": {
        start: {
          line: 345,
          column: 16
        },
        end: {
          line: 345,
          column: 57
        }
      },
      "128": {
        start: {
          line: 347,
          column: 16
        },
        end: {
          line: 351,
          column: 17
        }
      },
      "129": {
        start: {
          line: 348,
          column: 20
        },
        end: {
          line: 348,
          column: 69
        }
      },
      "130": {
        start: {
          line: 349,
          column: 20
        },
        end: {
          line: 349,
          column: 81
        }
      },
      "131": {
        start: {
          line: 350,
          column: 20
        },
        end: {
          line: 350,
          column: 57
        }
      },
      "132": {
        start: {
          line: 353,
          column: 16
        },
        end: {
          line: 355,
          column: 17
        }
      },
      "133": {
        start: {
          line: 354,
          column: 20
        },
        end: {
          line: 354,
          column: 33
        }
      },
      "134": {
        start: {
          line: 356,
          column: 16
        },
        end: {
          line: 358,
          column: 17
        }
      },
      "135": {
        start: {
          line: 357,
          column: 20
        },
        end: {
          line: 357,
          column: 33
        }
      },
      "136": {
        start: {
          line: 359,
          column: 16
        },
        end: {
          line: 361,
          column: 17
        }
      },
      "137": {
        start: {
          line: 360,
          column: 20
        },
        end: {
          line: 360,
          column: 33
        }
      },
      "138": {
        start: {
          line: 362,
          column: 16
        },
        end: {
          line: 362,
          column: 52
        }
      },
      "139": {
        start: {
          line: 365,
          column: 12
        },
        end: {
          line: 365,
          column: 59
        }
      },
      "140": {
        start: {
          line: 365,
          column: 40
        },
        end: {
          line: 365,
          column: 57
        }
      },
      "141": {
        start: {
          line: 366,
          column: 34
        },
        end: {
          line: 366,
          column: 49
        }
      },
      "142": {
        start: {
          line: 367,
          column: 12
        },
        end: {
          line: 367,
          column: 133
        }
      },
      "143": {
        start: {
          line: 368,
          column: 12
        },
        end: {
          line: 368,
          column: 43
        }
      },
      "144": {
        start: {
          line: 371,
          column: 12
        },
        end: {
          line: 371,
          column: 77
        }
      },
      "145": {
        start: {
          line: 372,
          column: 12
        },
        end: {
          line: 372,
          column: 24
        }
      },
      "146": {
        start: {
          line: 379,
          column: 8
        },
        end: {
          line: 413,
          column: 9
        }
      },
      "147": {
        start: {
          line: 380,
          column: 12
        },
        end: {
          line: 380,
          column: 70
        }
      },
      "148": {
        start: {
          line: 382,
          column: 12
        },
        end: {
          line: 385,
          column: 13
        }
      },
      "149": {
        start: {
          line: 383,
          column: 16
        },
        end: {
          line: 383,
          column: 76
        }
      },
      "150": {
        start: {
          line: 384,
          column: 16
        },
        end: {
          line: 384,
          column: 56
        }
      },
      "151": {
        start: {
          line: 387,
          column: 27
        },
        end: {
          line: 387,
          column: 62
        }
      },
      "152": {
        start: {
          line: 388,
          column: 12
        },
        end: {
          line: 390,
          column: 13
        }
      },
      "153": {
        start: {
          line: 389,
          column: 16
        },
        end: {
          line: 389,
          column: 84
        }
      },
      "154": {
        start: {
          line: 392,
          column: 33
        },
        end: {
          line: 392,
          column: 70
        }
      },
      "155": {
        start: {
          line: 393,
          column: 12
        },
        end: {
          line: 395,
          column: 13
        }
      },
      "156": {
        start: {
          line: 394,
          column: 16
        },
        end: {
          line: 394,
          column: 105
        }
      },
      "157": {
        start: {
          line: 397,
          column: 36
        },
        end: {
          line: 397,
          column: 82
        }
      },
      "158": {
        start: {
          line: 398,
          column: 12
        },
        end: {
          line: 400,
          column: 13
        }
      },
      "159": {
        start: {
          line: 399,
          column: 16
        },
        end: {
          line: 399,
          column: 76
        }
      },
      "160": {
        start: {
          line: 402,
          column: 34
        },
        end: {
          line: 402,
          column: 70
        }
      },
      "161": {
        start: {
          line: 404,
          column: 12
        },
        end: {
          line: 404,
          column: 60
        }
      },
      "162": {
        start: {
          line: 405,
          column: 12
        },
        end: {
          line: 405,
          column: 48
        }
      },
      "163": {
        start: {
          line: 406,
          column: 12
        },
        end: {
          line: 406,
          column: 77
        }
      },
      "164": {
        start: {
          line: 407,
          column: 12
        },
        end: {
          line: 407,
          column: 60
        }
      },
      "165": {
        start: {
          line: 408,
          column: 12
        },
        end: {
          line: 408,
          column: 33
        }
      },
      "166": {
        start: {
          line: 411,
          column: 12
        },
        end: {
          line: 411,
          column: 81
        }
      },
      "167": {
        start: {
          line: 412,
          column: 12
        },
        end: {
          line: 412,
          column: 24
        }
      },
      "168": {
        start: {
          line: 421,
          column: 8
        },
        end: {
          line: 433,
          column: 10
        }
      },
      "169": {
        start: {
          line: 424,
          column: 34
        },
        end: {
          line: 424,
          column: 44
        }
      },
      "170": {
        start: {
          line: 426,
          column: 38
        },
        end: {
          line: 426,
          column: 69
        }
      },
      "171": {
        start: {
          line: 427,
          column: 16
        },
        end: {
          line: 427,
          column: 81
        }
      },
      "172": {
        start: {
          line: 427,
          column: 45
        },
        end: {
          line: 427,
          column: 79
        }
      },
      "173": {
        start: {
          line: 428,
          column: 32
        },
        end: {
          line: 428,
          column: 42
        }
      },
      "174": {
        start: {
          line: 430,
          column: 16
        },
        end: {
          line: 430,
          column: 91
        }
      },
      "175": {
        start: {
          line: 431,
          column: 16
        },
        end: {
          line: 431,
          column: 69
        }
      },
      "176": {
        start: {
          line: 439,
          column: 26
        },
        end: {
          line: 439,
          column: 69
        }
      },
      "177": {
        start: {
          line: 440,
          column: 8
        },
        end: {
          line: 458,
          column: 9
        }
      },
      "178": {
        start: {
          line: 441,
          column: 12
        },
        end: {
          line: 450,
          column: 14
        }
      },
      "179": {
        start: {
          line: 454,
          column: 12
        },
        end: {
          line: 454,
          column: 102
        }
      },
      "180": {
        start: {
          line: 455,
          column: 12
        },
        end: {
          line: 455,
          column: 87
        }
      },
      "181": {
        start: {
          line: 456,
          column: 12
        },
        end: {
          line: 456,
          column: 46
        }
      },
      "182": {
        start: {
          line: 457,
          column: 12
        },
        end: {
          line: 457,
          column: 63
        }
      },
      "183": {
        start: {
          line: 459,
          column: 8
        },
        end: {
          line: 459,
          column: 65
        }
      },
      "184": {
        start: {
          line: 465,
          column: 8
        },
        end: {
          line: 478,
          column: 9
        }
      },
      "185": {
        start: {
          line: 466,
          column: 12
        },
        end: {
          line: 473,
          column: 13
        }
      },
      "186": {
        start: {
          line: 467,
          column: 16
        },
        end: {
          line: 467,
          column: 52
        }
      },
      "187": {
        start: {
          line: 468,
          column: 16
        },
        end: {
          line: 470,
          column: 17
        }
      },
      "188": {
        start: {
          line: 469,
          column: 20
        },
        end: {
          line: 469,
          column: 51
        }
      },
      "189": {
        start: {
          line: 471,
          column: 16
        },
        end: {
          line: 471,
          column: 83
        }
      },
      "190": {
        start: {
          line: 472,
          column: 16
        },
        end: {
          line: 472,
          column: 58
        }
      },
      "191": {
        start: {
          line: 476,
          column: 12
        },
        end: {
          line: 476,
          column: 82
        }
      },
      "192": {
        start: {
          line: 477,
          column: 12
        },
        end: {
          line: 477,
          column: 24
        }
      },
      "193": {
        start: {
          line: 484,
          column: 8
        },
        end: {
          line: 484,
          column: 55
        }
      },
      "194": {
        start: {
          line: 490,
          column: 8
        },
        end: {
          line: 490,
          column: 52
        }
      },
      "195": {
        start: {
          line: 496,
          column: 8
        },
        end: {
          line: 496,
          column: 39
        }
      },
      "196": {
        start: {
          line: 502,
          column: 8
        },
        end: {
          line: 505,
          column: 9
        }
      },
      "197": {
        start: {
          line: 503,
          column: 32
        },
        end: {
          line: 503,
          column: 75
        }
      },
      "198": {
        start: {
          line: 504,
          column: 12
        },
        end: {
          line: 504,
          column: 52
        }
      },
      "199": {
        start: {
          line: 506,
          column: 8
        },
        end: {
          line: 506,
          column: 65
        }
      },
      "200": {
        start: {
          line: 512,
          column: 8
        },
        end: {
          line: 515,
          column: 9
        }
      },
      "201": {
        start: {
          line: 513,
          column: 27
        },
        end: {
          line: 513,
          column: 64
        }
      },
      "202": {
        start: {
          line: 514,
          column: 12
        },
        end: {
          line: 514,
          column: 42
        }
      },
      "203": {
        start: {
          line: 516,
          column: 8
        },
        end: {
          line: 516,
          column: 59
        }
      },
      "204": {
        start: {
          line: 522,
          column: 8
        },
        end: {
          line: 530,
          column: 9
        }
      },
      "205": {
        start: {
          line: 523,
          column: 32
        },
        end: {
          line: 523,
          column: 98
        }
      },
      "206": {
        start: {
          line: 524,
          column: 32
        },
        end: {
          line: 524,
          column: 80
        }
      },
      "207": {
        start: {
          line: 525,
          column: 12
        },
        end: {
          line: 525,
          column: 93
        }
      },
      "208": {
        start: {
          line: 526,
          column: 12
        },
        end: {
          line: 526,
          column: 73
        }
      },
      "209": {
        start: {
          line: 529,
          column: 12
        },
        end: {
          line: 529,
          column: 80
        }
      },
      "210": {
        start: {
          line: 536,
          column: 8
        },
        end: {
          line: 554,
          column: 9
        }
      },
      "211": {
        start: {
          line: 537,
          column: 12
        },
        end: {
          line: 537,
          column: 70
        }
      },
      "212": {
        start: {
          line: 539,
          column: 12
        },
        end: {
          line: 539,
          column: 48
        }
      },
      "213": {
        start: {
          line: 541,
          column: 12
        },
        end: {
          line: 543,
          column: 13
        }
      },
      "214": {
        start: {
          line: 542,
          column: 16
        },
        end: {
          line: 542,
          column: 50
        }
      },
      "215": {
        start: {
          line: 545,
          column: 12
        },
        end: {
          line: 545,
          column: 41
        }
      },
      "216": {
        start: {
          line: 546,
          column: 12
        },
        end: {
          line: 546,
          column: 49
        }
      },
      "217": {
        start: {
          line: 547,
          column: 12
        },
        end: {
          line: 547,
          column: 43
        }
      },
      "218": {
        start: {
          line: 548,
          column: 12
        },
        end: {
          line: 548,
          column: 39
        }
      },
      "219": {
        start: {
          line: 549,
          column: 12
        },
        end: {
          line: 549,
          column: 71
        }
      },
      "220": {
        start: {
          line: 552,
          column: 12
        },
        end: {
          line: 552,
          column: 83
        }
      },
      "221": {
        start: {
          line: 553,
          column: 12
        },
        end: {
          line: 553,
          column: 24
        }
      },
      "222": {
        start: {
          line: 557,
          column: 0
        },
        end: {
          line: 557,
          column: 36
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 67,
            column: 4
          },
          end: {
            line: 67,
            column: 5
          }
        },
        loc: {
          start: {
            line: 67,
            column: 78
          },
          end: {
            line: 73,
            column: 5
          }
        },
        line: 67
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 78,
            column: 4
          },
          end: {
            line: 78,
            column: 5
          }
        },
        loc: {
          start: {
            line: 78,
            column: 23
          },
          end: {
            line: 99,
            column: 5
          }
        },
        line: 78
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 103,
            column: 4
          },
          end: {
            line: 103,
            column: 5
          }
        },
        loc: {
          start: {
            line: 103,
            column: 34
          },
          end: {
            line: 112,
            column: 5
          }
        },
        line: 103
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 116,
            column: 4
          },
          end: {
            line: 116,
            column: 5
          }
        },
        loc: {
          start: {
            line: 116,
            column: 36
          },
          end: {
            line: 138,
            column: 5
          }
        },
        line: 116
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 120,
            column: 44
          },
          end: {
            line: 120,
            column: 45
          }
        },
        loc: {
          start: {
            line: 120,
            column: 52
          },
          end: {
            line: 120,
            column: 74
          }
        },
        line: 120
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 143,
            column: 4
          },
          end: {
            line: 143,
            column: 5
          }
        },
        loc: {
          start: {
            line: 143,
            column: 36
          },
          end: {
            line: 187,
            column: 5
          }
        },
        line: 143
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 191,
            column: 4
          },
          end: {
            line: 191,
            column: 5
          }
        },
        loc: {
          start: {
            line: 191,
            column: 35
          },
          end: {
            line: 209,
            column: 5
          }
        },
        line: 191
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 213,
            column: 4
          },
          end: {
            line: 213,
            column: 5
          }
        },
        loc: {
          start: {
            line: 213,
            column: 32
          },
          end: {
            line: 237,
            column: 5
          }
        },
        line: 213
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 241,
            column: 4
          },
          end: {
            line: 241,
            column: 5
          }
        },
        loc: {
          start: {
            line: 241,
            column: 46
          },
          end: {
            line: 277,
            column: 5
          }
        },
        line: 241
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 282,
            column: 4
          },
          end: {
            line: 282,
            column: 5
          }
        },
        loc: {
          start: {
            line: 282,
            column: 42
          },
          end: {
            line: 292,
            column: 5
          }
        },
        line: 282
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 296,
            column: 4
          },
          end: {
            line: 296,
            column: 5
          }
        },
        loc: {
          start: {
            line: 296,
            column: 34
          },
          end: {
            line: 320,
            column: 5
          }
        },
        line: 296
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 299,
            column: 58
          },
          end: {
            line: 299,
            column: 59
          }
        },
        loc: {
          start: {
            line: 299,
            column: 68
          },
          end: {
            line: 299,
            column: 91
          }
        },
        line: 299
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 324,
            column: 4
          },
          end: {
            line: 324,
            column: 5
          }
        },
        loc: {
          start: {
            line: 324,
            column: 43
          },
          end: {
            line: 374,
            column: 5
          }
        },
        line: 324
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 331,
            column: 24
          },
          end: {
            line: 331,
            column: 25
          }
        },
        loc: {
          start: {
            line: 331,
            column: 49
          },
          end: {
            line: 335,
            column: 13
          }
        },
        line: 331
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 341,
            column: 50
          },
          end: {
            line: 341,
            column: 51
          }
        },
        loc: {
          start: {
            line: 341,
            column: 75
          },
          end: {
            line: 363,
            column: 13
          }
        },
        line: 341
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 365,
            column: 30
          },
          end: {
            line: 365,
            column: 31
          }
        },
        loc: {
          start: {
            line: 365,
            column: 40
          },
          end: {
            line: 365,
            column: 57
          }
        },
        line: 365
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 378,
            column: 4
          },
          end: {
            line: 378,
            column: 5
          }
        },
        loc: {
          start: {
            line: 378,
            column: 31
          },
          end: {
            line: 414,
            column: 5
          }
        },
        line: 378
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 419,
            column: 4
          },
          end: {
            line: 419,
            column: 5
          }
        },
        loc: {
          start: {
            line: 419,
            column: 36
          },
          end: {
            line: 434,
            column: 5
          }
        },
        line: 419
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 423,
            column: 21
          },
          end: {
            line: 423,
            column: 22
          }
        },
        loc: {
          start: {
            line: 423,
            column: 38
          },
          end: {
            line: 432,
            column: 13
          }
        },
        line: 423
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 427,
            column: 34
          },
          end: {
            line: 427,
            column: 35
          }
        },
        loc: {
          start: {
            line: 427,
            column: 45
          },
          end: {
            line: 427,
            column: 79
          }
        },
        line: 427
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 438,
            column: 4
          },
          end: {
            line: 438,
            column: 5
          }
        },
        loc: {
          start: {
            line: 438,
            column: 65
          },
          end: {
            line: 460,
            column: 5
          }
        },
        line: 438
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 464,
            column: 4
          },
          end: {
            line: 464,
            column: 5
          }
        },
        loc: {
          start: {
            line: 464,
            column: 33
          },
          end: {
            line: 479,
            column: 5
          }
        },
        line: 464
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 483,
            column: 4
          },
          end: {
            line: 483,
            column: 5
          }
        },
        loc: {
          start: {
            line: 483,
            column: 25
          },
          end: {
            line: 485,
            column: 5
          }
        },
        line: 483
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 489,
            column: 4
          },
          end: {
            line: 489,
            column: 5
          }
        },
        loc: {
          start: {
            line: 489,
            column: 22
          },
          end: {
            line: 491,
            column: 5
          }
        },
        line: 489
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 495,
            column: 4
          },
          end: {
            line: 495,
            column: 5
          }
        },
        loc: {
          start: {
            line: 495,
            column: 28
          },
          end: {
            line: 497,
            column: 5
          }
        },
        line: 495
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 501,
            column: 4
          },
          end: {
            line: 501,
            column: 5
          }
        },
        loc: {
          start: {
            line: 501,
            column: 42
          },
          end: {
            line: 507,
            column: 5
          }
        },
        line: 501
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 511,
            column: 4
          },
          end: {
            line: 511,
            column: 5
          }
        },
        loc: {
          start: {
            line: 511,
            column: 36
          },
          end: {
            line: 517,
            column: 5
          }
        },
        line: 511
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 521,
            column: 4
          },
          end: {
            line: 521,
            column: 5
          }
        },
        loc: {
          start: {
            line: 521,
            column: 35
          },
          end: {
            line: 531,
            column: 5
          }
        },
        line: 521
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 535,
            column: 4
          },
          end: {
            line: 535,
            column: 5
          }
        },
        loc: {
          start: {
            line: 535,
            column: 21
          },
          end: {
            line: 555,
            column: 5
          }
        },
        line: 535
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 67,
            column: 48
          },
          end: {
            line: 67,
            column: 76
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 67,
            column: 66
          },
          end: {
            line: 67,
            column: 76
          }
        }],
        line: 67
      },
      "1": {
        loc: {
          start: {
            line: 126,
            column: 16
          },
          end: {
            line: 130,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 126,
            column: 16
          },
          end: {
            line: 130,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 126
      },
      "2": {
        loc: {
          start: {
            line: 180,
            column: 8
          },
          end: {
            line: 181,
            column: 24
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 180,
            column: 8
          },
          end: {
            line: 181,
            column: 24
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 180
      },
      "3": {
        loc: {
          start: {
            line: 219,
            column: 16
          },
          end: {
            line: 224,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 219,
            column: 16
          },
          end: {
            line: 224,
            column: 17
          }
        }, {
          start: {
            line: 222,
            column: 21
          },
          end: {
            line: 224,
            column: 17
          }
        }],
        line: 219
      },
      "4": {
        loc: {
          start: {
            line: 249,
            column: 12
          },
          end: {
            line: 252,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 249,
            column: 12
          },
          end: {
            line: 252,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 249
      },
      "5": {
        loc: {
          start: {
            line: 255,
            column: 12
          },
          end: {
            line: 258,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 255,
            column: 12
          },
          end: {
            line: 258,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 255
      },
      "6": {
        loc: {
          start: {
            line: 261,
            column: 12
          },
          end: {
            line: 264,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 261,
            column: 12
          },
          end: {
            line: 264,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 261
      },
      "7": {
        loc: {
          start: {
            line: 301,
            column: 12
          },
          end: {
            line: 318,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 301,
            column: 12
          },
          end: {
            line: 318,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 301
      },
      "8": {
        loc: {
          start: {
            line: 305,
            column: 16
          },
          end: {
            line: 308,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 305,
            column: 16
          },
          end: {
            line: 308,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 305
      },
      "9": {
        loc: {
          start: {
            line: 314,
            column: 16
          },
          end: {
            line: 317,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 314,
            column: 16
          },
          end: {
            line: 317,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 314
      },
      "10": {
        loc: {
          start: {
            line: 333,
            column: 23
          },
          end: {
            line: 334,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 333,
            column: 23
          },
          end: {
            line: 333,
            column: 46
          }
        }, {
          start: {
            line: 334,
            column: 20
          },
          end: {
            line: 334,
            column: 72
          }
        }],
        line: 333
      },
      "11": {
        loc: {
          start: {
            line: 336,
            column: 12
          },
          end: {
            line: 339,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 336,
            column: 12
          },
          end: {
            line: 339,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 336
      },
      "12": {
        loc: {
          start: {
            line: 347,
            column: 16
          },
          end: {
            line: 351,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 347,
            column: 16
          },
          end: {
            line: 351,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 347
      },
      "13": {
        loc: {
          start: {
            line: 353,
            column: 16
          },
          end: {
            line: 355,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 353,
            column: 16
          },
          end: {
            line: 355,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 353
      },
      "14": {
        loc: {
          start: {
            line: 353,
            column: 20
          },
          end: {
            line: 353,
            column: 96
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 353,
            column: 20
          },
          end: {
            line: 353,
            column: 43
          }
        }, {
          start: {
            line: 353,
            column: 47
          },
          end: {
            line: 353,
            column: 96
          }
        }],
        line: 353
      },
      "15": {
        loc: {
          start: {
            line: 356,
            column: 16
          },
          end: {
            line: 358,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 356,
            column: 16
          },
          end: {
            line: 358,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 356
      },
      "16": {
        loc: {
          start: {
            line: 356,
            column: 20
          },
          end: {
            line: 356,
            column: 119
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 356,
            column: 20
          },
          end: {
            line: 356,
            column: 50
          }
        }, {
          start: {
            line: 356,
            column: 54
          },
          end: {
            line: 356,
            column: 119
          }
        }],
        line: 356
      },
      "17": {
        loc: {
          start: {
            line: 359,
            column: 16
          },
          end: {
            line: 361,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 359,
            column: 16
          },
          end: {
            line: 361,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 359
      },
      "18": {
        loc: {
          start: {
            line: 359,
            column: 20
          },
          end: {
            line: 359,
            column: 104
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 359,
            column: 20
          },
          end: {
            line: 359,
            column: 45
          }
        }, {
          start: {
            line: 359,
            column: 49
          },
          end: {
            line: 359,
            column: 104
          }
        }],
        line: 359
      },
      "19": {
        loc: {
          start: {
            line: 382,
            column: 12
          },
          end: {
            line: 385,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 382,
            column: 12
          },
          end: {
            line: 385,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 382
      },
      "20": {
        loc: {
          start: {
            line: 388,
            column: 12
          },
          end: {
            line: 390,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 388,
            column: 12
          },
          end: {
            line: 390,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 388
      },
      "21": {
        loc: {
          start: {
            line: 393,
            column: 12
          },
          end: {
            line: 395,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 393,
            column: 12
          },
          end: {
            line: 395,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 393
      },
      "22": {
        loc: {
          start: {
            line: 398,
            column: 12
          },
          end: {
            line: 400,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 398,
            column: 12
          },
          end: {
            line: 400,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 398
      },
      "23": {
        loc: {
          start: {
            line: 440,
            column: 8
          },
          end: {
            line: 458,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 440,
            column: 8
          },
          end: {
            line: 458,
            column: 9
          }
        }, {
          start: {
            line: 452,
            column: 13
          },
          end: {
            line: 458,
            column: 9
          }
        }],
        line: 440
      },
      "24": {
        loc: {
          start: {
            line: 466,
            column: 12
          },
          end: {
            line: 473,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 466,
            column: 12
          },
          end: {
            line: 473,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 466
      },
      "25": {
        loc: {
          start: {
            line: 468,
            column: 16
          },
          end: {
            line: 470,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 468,
            column: 16
          },
          end: {
            line: 470,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 468
      },
      "26": {
        loc: {
          start: {
            line: 502,
            column: 8
          },
          end: {
            line: 505,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 502,
            column: 8
          },
          end: {
            line: 505,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 502
      },
      "27": {
        loc: {
          start: {
            line: 504,
            column: 19
          },
          end: {
            line: 504,
            column: 51
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 504,
            column: 33
          },
          end: {
            line: 504,
            column: 46
          }
        }, {
          start: {
            line: 504,
            column: 49
          },
          end: {
            line: 504,
            column: 51
          }
        }],
        line: 504
      },
      "28": {
        loc: {
          start: {
            line: 512,
            column: 8
          },
          end: {
            line: 515,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 512,
            column: 8
          },
          end: {
            line: 515,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 512
      },
      "29": {
        loc: {
          start: {
            line: 514,
            column: 19
          },
          end: {
            line: 514,
            column: 41
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 514,
            column: 28
          },
          end: {
            line: 514,
            column: 36
          }
        }, {
          start: {
            line: 514,
            column: 39
          },
          end: {
            line: 514,
            column: 41
          }
        }],
        line: 514
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\ai\\model-manager.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\ai\\model-manager.ts"],
      sourcesContent: ["/**\r\n * =============================================================================\r\n * MODEL MANAGER - LLM MODEL LIFECYCLE AND OPTIMIZATION\r\n * =============================================================================\r\n * \r\n * This module manages the lifecycle of LLM models, including loading, unloading,\r\n * optimization, and switching between models based on system resources and\r\n * performance requirements. Specifically designed for Intel NUC constraints.\r\n * \r\n * Key Features:\r\n * - Dynamic model loading/unloading based on memory pressure\r\n * - Model performance monitoring and optimization\r\n * - Automatic fallback mechanisms for model failures\r\n * - Resource-aware model selection\r\n * - Model integrity verification and security\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport { EventEmitter } from 'events';\r\nimport { promises as fs } from 'fs';\r\nimport { join } from 'path';\r\nimport { logger } from '@/core/logging/logger';\r\nimport { SystemMonitor } from '@/infrastructure/system-monitor';\r\nimport { SecurityManager } from '@/security/security-manager';\r\nimport type { LLMModelConfig, ModelMetrics } from './llm-engine';\r\n\r\n/**\r\n * Interface for model download and management\r\n */\r\ninterface ModelDownloadConfig {\r\n  modelName: string;\r\n  downloadUrl: string;\r\n  expectedHash: string;\r\n  fileSize: number; // bytes\r\n  priority: number; // 1-10, higher is more important\r\n}\r\n\r\n/**\r\n * Interface for model performance history\r\n */\r\ninterface ModelPerformanceHistory {\r\n  modelName: string;\r\n  averageInferenceTime: number;\r\n  averageAccuracy: number;\r\n  memoryEfficiency: number;\r\n  cpuEfficiency: number;\r\n  successRate: number;\r\n  lastUsed: Date;\r\n  totalUsageTime: number; // seconds\r\n}\r\n\r\n/**\r\n * Interface for model health status\r\n */\r\ninterface ModelHealthStatus {\r\n  modelName: string;\r\n  isHealthy: boolean;\r\n  lastHealthCheck: Date;\r\n  issues: string[];\r\n  recommendations: string[];\r\n}\r\n\r\n/**\r\n * Model Manager class for handling LLM model lifecycle\r\n * Optimized for Intel NUC hardware constraints\r\n */\r\nexport class ModelManager extends EventEmitter {\r\n  private systemMonitor: SystemMonitor;\r\n  private securityManager: SecurityManager;\r\n  private modelsDirectory: string;\r\n  private availableModels: Map<string, LLMModelConfig> = new Map();\r\n  private loadedModels: Map<string, any> = new Map();\r\n  private modelPerformanceHistory: Map<string, ModelPerformanceHistory> = new Map();\r\n  private modelHealthStatus: Map<string, ModelHealthStatus> = new Map();\r\n  private currentActiveModel: string | null = null;\r\n  private isInitialized: boolean = false;\r\n\r\n  // Model download configurations for Intel NUC optimization\r\n  private readonly MODEL_DOWNLOADS: ModelDownloadConfig[] = [\r\n    {\r\n      modelName: 'phi-3-mini-4k-instruct-q4',\r\n      downloadUrl: 'https://huggingface.co/microsoft/Phi-3-mini-4K-instruct-onnx/resolve/main/cpu_and_mobile/cpu-int4-rtn-block-32-acc-level-4/phi-3-mini-4k-instruct-cpu-int4-rtn-block-32-acc-level-4.onnx',\r\n      expectedHash: 'sha256:abc123...', // Would be actual hash in production\r\n      fileSize: 2147483648, // 2GB\r\n      priority: 9\r\n    },\r\n    {\r\n      modelName: 'llama-3.2-1b-instruct-q8',\r\n      downloadUrl: 'https://huggingface.co/meta-llama/Llama-3.2-1B-Instruct-onnx/resolve/main/onnx/model_quantized.onnx',\r\n      expectedHash: 'sha256:def456...', // Would be actual hash in production\r\n      fileSize: 1610612736, // 1.5GB\r\n      priority: 8\r\n    },\r\n    {\r\n      modelName: 'tinyllama-1.1b-chat-q4',\r\n      downloadUrl: 'https://huggingface.co/TinyLlama/TinyLlama-1.1B-Chat-v1.0-onnx/resolve/main/onnx/model_quantized.onnx',\r\n      expectedHash: 'sha256:ghi789...', // Would be actual hash in production\r\n      fileSize: 805306368, // 768MB\r\n      priority: 7\r\n    }\r\n  ];\r\n\r\n  constructor(\r\n    systemMonitor: SystemMonitor, \r\n    securityManager: SecurityManager,\r\n    modelsDirectory: string = './models'\r\n  ) {\r\n    super();\r\n    this.systemMonitor = systemMonitor;\r\n    this.securityManager = securityManager;\r\n    this.modelsDirectory = modelsDirectory;\r\n\r\n    logger.info('\uD83D\uDDC2\uFE0F Model Manager initialized');\r\n  }\r\n\r\n  /**\r\n   * Initialize the model manager\r\n   * Sets up model directory and discovers available models\r\n   */\r\n  public async initialize(): Promise<void> {\r\n    try {\r\n      logger.info('\uD83D\uDE80 Initializing Model Manager...');\r\n\r\n      // Create models directory if it doesn't exist\r\n      await this.ensureModelsDirectory();\r\n\r\n      // Discover existing models\r\n      await this.discoverAvailableModels();\r\n\r\n      // Load model performance history\r\n      await this.loadPerformanceHistory();\r\n\r\n      // Perform initial health checks\r\n      await this.performHealthChecks();\r\n\r\n      // Download missing high-priority models\r\n      await this.downloadMissingModels();\r\n\r\n      this.isInitialized = true;\r\n      logger.info('\u2705 Model Manager initialized successfully');\r\n\r\n      this.emit('initialized');\r\n\r\n    } catch (error) {\r\n      logger.error('\u274C Failed to initialize Model Manager:', error);\r\n      throw new Error(`Model Manager initialization failed: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ensure models directory exists with proper permissions\r\n   */\r\n  private async ensureModelsDirectory(): Promise<void> {\r\n    try {\r\n      await fs.access(this.modelsDirectory);\r\n      logger.info(`\uD83D\uDCC1 Models directory exists: ${this.modelsDirectory}`);\r\n    } catch {\r\n      logger.info(`\uD83D\uDCC1 Creating models directory: ${this.modelsDirectory}`);\r\n      await fs.mkdir(this.modelsDirectory, { recursive: true, mode: 0o755 });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Discover available models in the models directory\r\n   */\r\n  private async discoverAvailableModels(): Promise<void> {\r\n    try {\r\n      logger.info('\uD83D\uDD0D Discovering available models...');\r\n\r\n      const files = await fs.readdir(this.modelsDirectory);\r\n      const modelFiles = files.filter(file => file.endsWith('.onnx'));\r\n\r\n      for (const modelFile of modelFiles) {\r\n        const modelPath = join(this.modelsDirectory, modelFile);\r\n        const modelName = modelFile.replace('.onnx', '');\r\n\r\n        // Get model configuration based on filename\r\n        const modelConfig = this.getModelConfigByName(modelName);\r\n        \r\n        if (modelConfig) {\r\n          modelConfig.modelPath = modelPath;\r\n          this.availableModels.set(modelName, modelConfig);\r\n          logger.info(`\uD83D\uDCE6 Discovered model: ${modelName}`);\r\n        }\r\n      }\r\n\r\n      logger.info(`\u2705 Discovered ${this.availableModels.size} available models`);\r\n\r\n    } catch (error) {\r\n      logger.error('\u274C Error discovering models:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get model configuration by name\r\n   * Returns predefined configuration for known models\r\n   */\r\n  private getModelConfigByName(modelName: string): LLMModelConfig | null {\r\n    const configs: Record<string, Partial<LLMModelConfig>> = {\r\n      'phi-3-mini-4k-instruct-q4': {\r\n        quantization: '4bit',\r\n        maxTokens: 2048,\r\n        temperature: 0.7,\r\n        topP: 0.9,\r\n        topK: 40,\r\n        memoryRequirement: 2048,\r\n        cpuThreads: 4,\r\n        contextWindow: 4096,\r\n        batchSize: 1\r\n      },\r\n      'llama-3.2-1b-instruct-q8': {\r\n        quantization: '8bit',\r\n        maxTokens: 2048,\r\n        temperature: 0.7,\r\n        topP: 0.9,\r\n        topK: 40,\r\n        memoryRequirement: 1536,\r\n        cpuThreads: 4,\r\n        contextWindow: 2048,\r\n        batchSize: 1\r\n      },\r\n      'tinyllama-1.1b-chat-q4': {\r\n        quantization: '4bit',\r\n        maxTokens: 1024,\r\n        temperature: 0.8,\r\n        topP: 0.95,\r\n        topK: 50,\r\n        memoryRequirement: 768,\r\n        cpuThreads: 2,\r\n        contextWindow: 2048,\r\n        batchSize: 1\r\n      }\r\n    };\r\n\r\n    const baseConfig = configs[modelName];\r\n    if (!baseConfig) return null;\r\n\r\n    return {\r\n      modelName,\r\n      modelPath: '',\r\n      ...baseConfig\r\n    } as LLMModelConfig;\r\n  }\r\n\r\n  /**\r\n   * Load model performance history from disk\r\n   */\r\n  private async loadPerformanceHistory(): Promise<void> {\r\n    try {\r\n      const historyPath = join(this.modelsDirectory, 'performance_history.json');\r\n      \r\n      try {\r\n        const historyData = await fs.readFile(historyPath, 'utf-8');\r\n        const history = JSON.parse(historyData);\r\n        \r\n        for (const [modelName, data] of Object.entries(history)) {\r\n          this.modelPerformanceHistory.set(modelName, data as ModelPerformanceHistory);\r\n        }\r\n        \r\n        logger.info(`\uD83D\uDCCA Loaded performance history for ${this.modelPerformanceHistory.size} models`);\r\n        \r\n      } catch {\r\n        logger.info('\uD83D\uDCCA No existing performance history found, starting fresh');\r\n      }\r\n      \r\n    } catch (error) {\r\n      logger.error('\u274C Error loading performance history:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Perform health checks on all available models\r\n   */\r\n  private async performHealthChecks(): Promise<void> {\r\n    logger.info('\uD83C\uDFE5 Performing model health checks...');\r\n\r\n    for (const [modelName, config] of this.availableModels) {\r\n      try {\r\n        const healthStatus = await this.checkModelHealth(modelName, config);\r\n        this.modelHealthStatus.set(modelName, healthStatus);\r\n        \r\n        if (healthStatus.isHealthy) {\r\n          logger.info(`\u2705 Model ${modelName} is healthy`);\r\n        } else {\r\n          logger.warn(`\u26A0\uFE0F Model ${modelName} has issues:`, healthStatus.issues);\r\n        }\r\n        \r\n      } catch (error) {\r\n        logger.error(`\u274C Health check failed for model ${modelName}:`, error);\r\n        \r\n        this.modelHealthStatus.set(modelName, {\r\n          modelName,\r\n          isHealthy: false,\r\n          lastHealthCheck: new Date(),\r\n          issues: [`Health check failed: ${error.message}`],\r\n          recommendations: ['Consider re-downloading the model']\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check health of a specific model\r\n   */\r\n  private async checkModelHealth(modelName: string, config: LLMModelConfig): Promise<ModelHealthStatus> {\r\n    const issues: string[] = [];\r\n    const recommendations: string[] = [];\r\n\r\n    try {\r\n      // Check if model file exists and is readable\r\n      await fs.access(config.modelPath, fs.constants.R_OK);\r\n      \r\n      // Check file size (basic integrity check)\r\n      const stats = await fs.stat(config.modelPath);\r\n      if (stats.size < 1024 * 1024) { // Less than 1MB is suspicious\r\n        issues.push('Model file size is suspiciously small');\r\n        recommendations.push('Re-download the model');\r\n      }\r\n      \r\n      // Check if model fits in available memory\r\n      const systemResources = await this.systemMonitor.getCurrentResources();\r\n      if (config.memoryRequirement > systemResources.memory.available) {\r\n        issues.push('Model requires more memory than available');\r\n        recommendations.push('Free up memory or use a smaller model');\r\n      }\r\n      \r\n      // Verify model integrity (in production, this would check cryptographic hashes)\r\n      const isIntegrityValid = await this.verifyModelIntegrity(config.modelPath);\r\n      if (!isIntegrityValid) {\r\n        issues.push('Model integrity verification failed');\r\n        recommendations.push('Re-download the model from trusted source');\r\n      }\r\n      \r\n    } catch (error) {\r\n      issues.push(`File access error: ${error.message}`);\r\n      recommendations.push('Check file permissions and path');\r\n    }\r\n\r\n    return {\r\n      modelName,\r\n      isHealthy: issues.length === 0,\r\n      lastHealthCheck: new Date(),\r\n      issues,\r\n      recommendations\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Verify model file integrity\r\n   * In production, this would use cryptographic hashes\r\n   */\r\n  private async verifyModelIntegrity(modelPath: string): Promise<boolean> {\r\n    try {\r\n      // Mock integrity check - in production, use actual hash verification\r\n      const stats = await fs.stat(modelPath);\r\n      return stats.size > 0; // Basic check that file exists and has content\r\n      \r\n    } catch (error) {\r\n      logger.error('\u274C Model integrity verification failed:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Download missing high-priority models\r\n   */\r\n  private async downloadMissingModels(): Promise<void> {\r\n    logger.info('\uD83D\uDCE5 Checking for missing models to download...');\r\n\r\n    // Sort by priority (highest first)\r\n    const sortedDownloads = this.MODEL_DOWNLOADS.sort((a, b) => b.priority - a.priority);\r\n\r\n    for (const downloadConfig of sortedDownloads) {\r\n      if (!this.availableModels.has(downloadConfig.modelName)) {\r\n        logger.info(`\uD83D\uDCE5 Model ${downloadConfig.modelName} not found, adding to download queue`);\r\n        \r\n        // Check if we have enough disk space\r\n        const systemResources = await this.systemMonitor.getCurrentResources();\r\n        if (systemResources.disk.available < downloadConfig.fileSize * 1.2) { // 20% buffer\r\n          logger.warn(`\u26A0\uFE0F Insufficient disk space for ${downloadConfig.modelName}`);\r\n          continue;\r\n        }\r\n        \r\n        // In production, this would actually download the model\r\n        // For now, we'll just log the intention\r\n        logger.info(`\uD83D\uDCE5 Would download ${downloadConfig.modelName} from ${downloadConfig.downloadUrl}`);\r\n        \r\n        // Create placeholder model config for now\r\n        const modelConfig = this.getModelConfigByName(downloadConfig.modelName);\r\n        if (modelConfig) {\r\n          modelConfig.modelPath = join(this.modelsDirectory, `${downloadConfig.modelName}.onnx`);\r\n          // Don't add to available models until actually downloaded\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Select the best model based on current system resources and requirements\r\n   */\r\n  public async selectOptimalModel(requirements?: {\r\n    maxMemory?: number;\r\n    maxInferenceTime?: number;\r\n    minAccuracy?: number;\r\n  }): Promise<string | null> {\r\n    try {\r\n      logger.info('\uD83C\uDFAF Selecting optimal model...');\r\n\r\n      const systemResources = await this.systemMonitor.getCurrentResources();\r\n      const availableMemory = systemResources.memory.available;\r\n\r\n      // Filter healthy models that fit in memory\r\n      const viableModels = Array.from(this.availableModels.entries())\r\n        .filter(([modelName, config]) => {\r\n          const healthStatus = this.modelHealthStatus.get(modelName);\r\n          return healthStatus?.isHealthy && \r\n                 config.memoryRequirement <= (availableMemory - 1024); // 1GB buffer\r\n        });\r\n\r\n      if (viableModels.length === 0) {\r\n        logger.warn('\u26A0\uFE0F No viable models found');\r\n        return null;\r\n      }\r\n\r\n      // Score models based on performance history and requirements\r\n      const scoredModels = viableModels.map(([modelName, config]) => {\r\n        const performance = this.modelPerformanceHistory.get(modelName);\r\n        let score = 0;\r\n\r\n        // Base score from model capability (larger models generally better)\r\n        score += config.memoryRequirement / 1000; // Normalize to 0-3 range\r\n\r\n        // Performance history bonus\r\n        if (performance) {\r\n          score += (performance.averageAccuracy / 100) * 2; // 0-2 bonus\r\n          score += (1 / (performance.averageInferenceTime / 1000)) * 1; // Speed bonus\r\n          score += performance.successRate * 1; // Reliability bonus\r\n        }\r\n\r\n        // Apply requirements filters\r\n        if (requirements?.maxMemory && config.memoryRequirement > requirements.maxMemory) {\r\n          score *= 0.5; // Penalty for exceeding memory requirement\r\n        }\r\n\r\n        if (requirements?.maxInferenceTime && performance?.averageInferenceTime > requirements.maxInferenceTime) {\r\n          score *= 0.7; // Penalty for being too slow\r\n        }\r\n\r\n        if (requirements?.minAccuracy && performance?.averageAccuracy < requirements.minAccuracy) {\r\n          score *= 0.3; // Heavy penalty for insufficient accuracy\r\n        }\r\n\r\n        return { modelName, config, score };\r\n      });\r\n\r\n      // Sort by score (highest first)\r\n      scoredModels.sort((a, b) => b.score - a.score);\r\n\r\n      const selectedModel = scoredModels[0];\r\n      logger.info(`\uD83C\uDFAF Selected optimal model: ${selectedModel.modelName} (score: ${selectedModel.score.toFixed(2)})`);\r\n\r\n      return selectedModel.modelName;\r\n\r\n    } catch (error) {\r\n      logger.error('\u274C Error selecting optimal model:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load a specific model into memory\r\n   */\r\n  public async loadModel(modelName: string): Promise<any> {\r\n    try {\r\n      logger.info(`\uD83D\uDCE5 Loading model: ${modelName}...`);\r\n\r\n      // Check if already loaded\r\n      if (this.loadedModels.has(modelName)) {\r\n        logger.info(`\u2705 Model ${modelName} already loaded`);\r\n        return this.loadedModels.get(modelName);\r\n      }\r\n\r\n      // Get model configuration\r\n      const config = this.availableModels.get(modelName);\r\n      if (!config) {\r\n        throw new Error(`Model ${modelName} not found in available models`);\r\n      }\r\n\r\n      // Check health status\r\n      const healthStatus = this.modelHealthStatus.get(modelName);\r\n      if (!healthStatus?.isHealthy) {\r\n        throw new Error(`Model ${modelName} is not healthy: ${healthStatus?.issues.join(', ')}`);\r\n      }\r\n\r\n      // Check system resources\r\n      const systemResources = await this.systemMonitor.getCurrentResources();\r\n      if (config.memoryRequirement > systemResources.memory.available) {\r\n        throw new Error(`Insufficient memory to load ${modelName}`);\r\n      }\r\n\r\n      // Load the model (mock implementation)\r\n      const modelInstance = await this.loadModelInstance(config);\r\n      \r\n      // Cache the loaded model\r\n      this.loadedModels.set(modelName, modelInstance);\r\n      this.currentActiveModel = modelName;\r\n\r\n      logger.info(`\u2705 Model ${modelName} loaded successfully`);\r\n      \r\n      this.emit('modelLoaded', { modelName, config });\r\n      \r\n      return modelInstance;\r\n\r\n    } catch (error) {\r\n      logger.error(`\u274C Failed to load model ${modelName}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load model instance (mock implementation)\r\n   * In production, this would use actual ONNX Runtime\r\n   */\r\n  private async loadModelInstance(config: LLMModelConfig): Promise<any> {\r\n    // Mock model instance\r\n    return {\r\n      config,\r\n      predict: async (input: string): Promise<string> => {\r\n        const startTime = Date.now();\r\n        \r\n        // Simulate inference time based on model complexity\r\n        const inferenceTime = config.memoryRequirement / 2000; // Rough simulation\r\n        await new Promise(resolve => setTimeout(resolve, inferenceTime));\r\n        \r\n        const endTime = Date.now();\r\n        \r\n        // Update performance metrics\r\n        this.updatePerformanceMetrics(config.modelName, endTime - startTime, 0.85); // Mock 85% accuracy\r\n        \r\n        return `Analysis from ${config.modelName}: ${input}`;\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Update performance metrics for a model\r\n   */\r\n  private updatePerformanceMetrics(modelName: string, inferenceTime: number, accuracy: number): void {\r\n    let performance = this.modelPerformanceHistory.get(modelName);\r\n    \r\n    if (!performance) {\r\n      performance = {\r\n        modelName,\r\n        averageInferenceTime: inferenceTime,\r\n        averageAccuracy: accuracy,\r\n        memoryEfficiency: 0,\r\n        cpuEfficiency: 0,\r\n        successRate: 1.0,\r\n        lastUsed: new Date(),\r\n        totalUsageTime: 0\r\n      };\r\n    } else {\r\n      // Update running averages\r\n      performance.averageInferenceTime = (performance.averageInferenceTime + inferenceTime) / 2;\r\n      performance.averageAccuracy = (performance.averageAccuracy + accuracy) / 2;\r\n      performance.lastUsed = new Date();\r\n      performance.totalUsageTime += inferenceTime / 1000; // Convert to seconds\r\n    }\r\n    \r\n    this.modelPerformanceHistory.set(modelName, performance);\r\n  }\r\n\r\n  /**\r\n   * Unload a model from memory\r\n   */\r\n  public async unloadModel(modelName: string): Promise<void> {\r\n    try {\r\n      if (this.loadedModels.has(modelName)) {\r\n        this.loadedModels.delete(modelName);\r\n        \r\n        if (this.currentActiveModel === modelName) {\r\n          this.currentActiveModel = null;\r\n        }\r\n        \r\n        logger.info(`\uD83D\uDCE4 Model ${modelName} unloaded from memory`);\r\n        \r\n        this.emit('modelUnloaded', { modelName });\r\n      }\r\n      \r\n    } catch (error) {\r\n      logger.error(`\u274C Error unloading model ${modelName}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get list of available models\r\n   */\r\n  public getAvailableModels(): string[] {\r\n    return Array.from(this.availableModels.keys());\r\n  }\r\n\r\n  /**\r\n   * Get list of loaded models\r\n   */\r\n  public getLoadedModels(): string[] {\r\n    return Array.from(this.loadedModels.keys());\r\n  }\r\n\r\n  /**\r\n   * Get current active model\r\n   */\r\n  public getCurrentActiveModel(): string | null {\r\n    return this.currentActiveModel;\r\n  }\r\n\r\n  /**\r\n   * Get model performance history\r\n   */\r\n  public getModelPerformanceHistory(modelName?: string): ModelPerformanceHistory[] {\r\n    if (modelName) {\r\n      const performance = this.modelPerformanceHistory.get(modelName);\r\n      return performance ? [performance] : [];\r\n    }\r\n    \r\n    return Array.from(this.modelPerformanceHistory.values());\r\n  }\r\n\r\n  /**\r\n   * Get model health status\r\n   */\r\n  public getModelHealthStatus(modelName?: string): ModelHealthStatus[] {\r\n    if (modelName) {\r\n      const health = this.modelHealthStatus.get(modelName);\r\n      return health ? [health] : [];\r\n    }\r\n    \r\n    return Array.from(this.modelHealthStatus.values());\r\n  }\r\n\r\n  /**\r\n   * Save performance history to disk\r\n   */\r\n  public async savePerformanceHistory(): Promise<void> {\r\n    try {\r\n      const historyPath = join(this.modelsDirectory, 'performance_history.json');\r\n      const historyData = Object.fromEntries(this.modelPerformanceHistory);\r\n      \r\n      await fs.writeFile(historyPath, JSON.stringify(historyData, null, 2));\r\n      \r\n      logger.info('\uD83D\uDCBE Performance history saved to disk');\r\n      \r\n    } catch (error) {\r\n      logger.error('\u274C Error saving performance history:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Shutdown the model manager gracefully\r\n   */\r\n  public async shutdown(): Promise<void> {\r\n    try {\r\n      logger.info('\uD83D\uDED1 Shutting down Model Manager...');\r\n\r\n      // Save performance history\r\n      await this.savePerformanceHistory();\r\n\r\n      // Unload all models\r\n      for (const modelName of this.loadedModels.keys()) {\r\n        await this.unloadModel(modelName);\r\n      }\r\n\r\n      // Clear caches\r\n      this.availableModels.clear();\r\n      this.modelPerformanceHistory.clear();\r\n      this.modelHealthStatus.clear();\r\n\r\n      this.isInitialized = false;\r\n      \r\n      logger.info('\u2705 Model Manager shutdown completed');\r\n\r\n    } catch (error) {\r\n      logger.error('\u274C Error during Model Manager shutdown:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\n// Export types\r\nexport type {\r\n  ModelDownloadConfig,\r\n  ModelPerformanceHistory,\r\n  ModelHealthStatus\r\n};\r\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "a1e959a4905e98ac5b835cf8b1ba225d3cf554de"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_wdfcab0iz = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_wdfcab0iz();
cov_wdfcab0iz().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_wdfcab0iz().s[1]++;
exports.ModelManager = void 0;
const events_1 =
/* istanbul ignore next */
(cov_wdfcab0iz().s[2]++, require("events"));
const fs_1 =
/* istanbul ignore next */
(cov_wdfcab0iz().s[3]++, require("fs"));
const path_1 =
/* istanbul ignore next */
(cov_wdfcab0iz().s[4]++, require("path"));
const logger_1 =
/* istanbul ignore next */
(cov_wdfcab0iz().s[5]++, require("@/core/logging/logger"));
/**
 * Model Manager class for handling LLM model lifecycle
 * Optimized for Intel NUC hardware constraints
 */
class ModelManager extends
/* istanbul ignore next */
(events_1.EventEmitter) {
  systemMonitor;
  securityManager;
  modelsDirectory;
  availableModels =
  /* istanbul ignore next */
  (cov_wdfcab0iz().s[6]++, new Map());
  loadedModels =
  /* istanbul ignore next */
  (cov_wdfcab0iz().s[7]++, new Map());
  modelPerformanceHistory =
  /* istanbul ignore next */
  (cov_wdfcab0iz().s[8]++, new Map());
  modelHealthStatus =
  /* istanbul ignore next */
  (cov_wdfcab0iz().s[9]++, new Map());
  currentActiveModel =
  /* istanbul ignore next */
  (cov_wdfcab0iz().s[10]++, null);
  isInitialized =
  /* istanbul ignore next */
  (cov_wdfcab0iz().s[11]++, false);
  // Model download configurations for Intel NUC optimization
  MODEL_DOWNLOADS =
  /* istanbul ignore next */
  (cov_wdfcab0iz().s[12]++, [{
    modelName: 'phi-3-mini-4k-instruct-q4',
    downloadUrl: 'https://huggingface.co/microsoft/Phi-3-mini-4K-instruct-onnx/resolve/main/cpu_and_mobile/cpu-int4-rtn-block-32-acc-level-4/phi-3-mini-4k-instruct-cpu-int4-rtn-block-32-acc-level-4.onnx',
    expectedHash: 'sha256:abc123...',
    // Would be actual hash in production
    fileSize: 2147483648,
    // 2GB
    priority: 9
  }, {
    modelName: 'llama-3.2-1b-instruct-q8',
    downloadUrl: 'https://huggingface.co/meta-llama/Llama-3.2-1B-Instruct-onnx/resolve/main/onnx/model_quantized.onnx',
    expectedHash: 'sha256:def456...',
    // Would be actual hash in production
    fileSize: 1610612736,
    // 1.5GB
    priority: 8
  }, {
    modelName: 'tinyllama-1.1b-chat-q4',
    downloadUrl: 'https://huggingface.co/TinyLlama/TinyLlama-1.1B-Chat-v1.0-onnx/resolve/main/onnx/model_quantized.onnx',
    expectedHash: 'sha256:ghi789...',
    // Would be actual hash in production
    fileSize: 805306368,
    // 768MB
    priority: 7
  }]);
  constructor(systemMonitor, securityManager, modelsDirectory =
  /* istanbul ignore next */
  (cov_wdfcab0iz().b[0][0]++, './models')) {
    /* istanbul ignore next */
    cov_wdfcab0iz().f[0]++;
    cov_wdfcab0iz().s[13]++;
    super();
    /* istanbul ignore next */
    cov_wdfcab0iz().s[14]++;
    this.systemMonitor = systemMonitor;
    /* istanbul ignore next */
    cov_wdfcab0iz().s[15]++;
    this.securityManager = securityManager;
    /* istanbul ignore next */
    cov_wdfcab0iz().s[16]++;
    this.modelsDirectory = modelsDirectory;
    /* istanbul ignore next */
    cov_wdfcab0iz().s[17]++;
    logger_1.logger.info('🗂️ Model Manager initialized');
  }
  /**
   * Initialize the model manager
   * Sets up model directory and discovers available models
   */
  async initialize() {
    /* istanbul ignore next */
    cov_wdfcab0iz().f[1]++;
    cov_wdfcab0iz().s[18]++;
    try {
      /* istanbul ignore next */
      cov_wdfcab0iz().s[19]++;
      logger_1.logger.info('🚀 Initializing Model Manager...');
      // Create models directory if it doesn't exist
      /* istanbul ignore next */
      cov_wdfcab0iz().s[20]++;
      await this.ensureModelsDirectory();
      // Discover existing models
      /* istanbul ignore next */
      cov_wdfcab0iz().s[21]++;
      await this.discoverAvailableModels();
      // Load model performance history
      /* istanbul ignore next */
      cov_wdfcab0iz().s[22]++;
      await this.loadPerformanceHistory();
      // Perform initial health checks
      /* istanbul ignore next */
      cov_wdfcab0iz().s[23]++;
      await this.performHealthChecks();
      // Download missing high-priority models
      /* istanbul ignore next */
      cov_wdfcab0iz().s[24]++;
      await this.downloadMissingModels();
      /* istanbul ignore next */
      cov_wdfcab0iz().s[25]++;
      this.isInitialized = true;
      /* istanbul ignore next */
      cov_wdfcab0iz().s[26]++;
      logger_1.logger.info('✅ Model Manager initialized successfully');
      /* istanbul ignore next */
      cov_wdfcab0iz().s[27]++;
      this.emit('initialized');
    } catch (error) {
      /* istanbul ignore next */
      cov_wdfcab0iz().s[28]++;
      logger_1.logger.error('❌ Failed to initialize Model Manager:', error);
      /* istanbul ignore next */
      cov_wdfcab0iz().s[29]++;
      throw new Error(`Model Manager initialization failed: ${error.message}`);
    }
  }
  /**
   * Ensure models directory exists with proper permissions
   */
  async ensureModelsDirectory() {
    /* istanbul ignore next */
    cov_wdfcab0iz().f[2]++;
    cov_wdfcab0iz().s[30]++;
    try {
      /* istanbul ignore next */
      cov_wdfcab0iz().s[31]++;
      await fs_1.promises.access(this.modelsDirectory);
      /* istanbul ignore next */
      cov_wdfcab0iz().s[32]++;
      logger_1.logger.info(`📁 Models directory exists: ${this.modelsDirectory}`);
    } catch {
      /* istanbul ignore next */
      cov_wdfcab0iz().s[33]++;
      logger_1.logger.info(`📁 Creating models directory: ${this.modelsDirectory}`);
      /* istanbul ignore next */
      cov_wdfcab0iz().s[34]++;
      await fs_1.promises.mkdir(this.modelsDirectory, {
        recursive: true,
        mode: 0o755
      });
    }
  }
  /**
   * Discover available models in the models directory
   */
  async discoverAvailableModels() {
    /* istanbul ignore next */
    cov_wdfcab0iz().f[3]++;
    cov_wdfcab0iz().s[35]++;
    try {
      /* istanbul ignore next */
      cov_wdfcab0iz().s[36]++;
      logger_1.logger.info('🔍 Discovering available models...');
      const files =
      /* istanbul ignore next */
      (cov_wdfcab0iz().s[37]++, await fs_1.promises.readdir(this.modelsDirectory));
      const modelFiles =
      /* istanbul ignore next */
      (cov_wdfcab0iz().s[38]++, files.filter(file => {
        /* istanbul ignore next */
        cov_wdfcab0iz().f[4]++;
        cov_wdfcab0iz().s[39]++;
        return file.endsWith('.onnx');
      }));
      /* istanbul ignore next */
      cov_wdfcab0iz().s[40]++;
      for (const modelFile of modelFiles) {
        const modelPath =
        /* istanbul ignore next */
        (cov_wdfcab0iz().s[41]++, (0, path_1.join)(this.modelsDirectory, modelFile));
        const modelName =
        /* istanbul ignore next */
        (cov_wdfcab0iz().s[42]++, modelFile.replace('.onnx', ''));
        // Get model configuration based on filename
        const modelConfig =
        /* istanbul ignore next */
        (cov_wdfcab0iz().s[43]++, this.getModelConfigByName(modelName));
        /* istanbul ignore next */
        cov_wdfcab0iz().s[44]++;
        if (modelConfig) {
          /* istanbul ignore next */
          cov_wdfcab0iz().b[1][0]++;
          cov_wdfcab0iz().s[45]++;
          modelConfig.modelPath = modelPath;
          /* istanbul ignore next */
          cov_wdfcab0iz().s[46]++;
          this.availableModels.set(modelName, modelConfig);
          /* istanbul ignore next */
          cov_wdfcab0iz().s[47]++;
          logger_1.logger.info(`📦 Discovered model: ${modelName}`);
        } else
        /* istanbul ignore next */
        {
          cov_wdfcab0iz().b[1][1]++;
        }
      }
      /* istanbul ignore next */
      cov_wdfcab0iz().s[48]++;
      logger_1.logger.info(`✅ Discovered ${this.availableModels.size} available models`);
    } catch (error) {
      /* istanbul ignore next */
      cov_wdfcab0iz().s[49]++;
      logger_1.logger.error('❌ Error discovering models:', error);
      /* istanbul ignore next */
      cov_wdfcab0iz().s[50]++;
      throw error;
    }
  }
  /**
   * Get model configuration by name
   * Returns predefined configuration for known models
   */
  getModelConfigByName(modelName) {
    /* istanbul ignore next */
    cov_wdfcab0iz().f[5]++;
    const configs =
    /* istanbul ignore next */
    (cov_wdfcab0iz().s[51]++, {
      'phi-3-mini-4k-instruct-q4': {
        quantization: '4bit',
        maxTokens: 2048,
        temperature: 0.7,
        topP: 0.9,
        topK: 40,
        memoryRequirement: 2048,
        cpuThreads: 4,
        contextWindow: 4096,
        batchSize: 1
      },
      'llama-3.2-1b-instruct-q8': {
        quantization: '8bit',
        maxTokens: 2048,
        temperature: 0.7,
        topP: 0.9,
        topK: 40,
        memoryRequirement: 1536,
        cpuThreads: 4,
        contextWindow: 2048,
        batchSize: 1
      },
      'tinyllama-1.1b-chat-q4': {
        quantization: '4bit',
        maxTokens: 1024,
        temperature: 0.8,
        topP: 0.95,
        topK: 50,
        memoryRequirement: 768,
        cpuThreads: 2,
        contextWindow: 2048,
        batchSize: 1
      }
    });
    const baseConfig =
    /* istanbul ignore next */
    (cov_wdfcab0iz().s[52]++, configs[modelName]);
    /* istanbul ignore next */
    cov_wdfcab0iz().s[53]++;
    if (!baseConfig) {
      /* istanbul ignore next */
      cov_wdfcab0iz().b[2][0]++;
      cov_wdfcab0iz().s[54]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_wdfcab0iz().b[2][1]++;
    }
    cov_wdfcab0iz().s[55]++;
    return {
      modelName,
      modelPath: '',
      ...baseConfig
    };
  }
  /**
   * Load model performance history from disk
   */
  async loadPerformanceHistory() {
    /* istanbul ignore next */
    cov_wdfcab0iz().f[6]++;
    cov_wdfcab0iz().s[56]++;
    try {
      const historyPath =
      /* istanbul ignore next */
      (cov_wdfcab0iz().s[57]++, (0, path_1.join)(this.modelsDirectory, 'performance_history.json'));
      /* istanbul ignore next */
      cov_wdfcab0iz().s[58]++;
      try {
        const historyData =
        /* istanbul ignore next */
        (cov_wdfcab0iz().s[59]++, await fs_1.promises.readFile(historyPath, 'utf-8'));
        const history =
        /* istanbul ignore next */
        (cov_wdfcab0iz().s[60]++, JSON.parse(historyData));
        /* istanbul ignore next */
        cov_wdfcab0iz().s[61]++;
        for (const [modelName, data] of Object.entries(history)) {
          /* istanbul ignore next */
          cov_wdfcab0iz().s[62]++;
          this.modelPerformanceHistory.set(modelName, data);
        }
        /* istanbul ignore next */
        cov_wdfcab0iz().s[63]++;
        logger_1.logger.info(`📊 Loaded performance history for ${this.modelPerformanceHistory.size} models`);
      } catch {
        /* istanbul ignore next */
        cov_wdfcab0iz().s[64]++;
        logger_1.logger.info('📊 No existing performance history found, starting fresh');
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_wdfcab0iz().s[65]++;
      logger_1.logger.error('❌ Error loading performance history:', error);
    }
  }
  /**
   * Perform health checks on all available models
   */
  async performHealthChecks() {
    /* istanbul ignore next */
    cov_wdfcab0iz().f[7]++;
    cov_wdfcab0iz().s[66]++;
    logger_1.logger.info('🏥 Performing model health checks...');
    /* istanbul ignore next */
    cov_wdfcab0iz().s[67]++;
    for (const [modelName, config] of this.availableModels) {
      /* istanbul ignore next */
      cov_wdfcab0iz().s[68]++;
      try {
        const healthStatus =
        /* istanbul ignore next */
        (cov_wdfcab0iz().s[69]++, await this.checkModelHealth(modelName, config));
        /* istanbul ignore next */
        cov_wdfcab0iz().s[70]++;
        this.modelHealthStatus.set(modelName, healthStatus);
        /* istanbul ignore next */
        cov_wdfcab0iz().s[71]++;
        if (healthStatus.isHealthy) {
          /* istanbul ignore next */
          cov_wdfcab0iz().b[3][0]++;
          cov_wdfcab0iz().s[72]++;
          logger_1.logger.info(`✅ Model ${modelName} is healthy`);
        } else {
          /* istanbul ignore next */
          cov_wdfcab0iz().b[3][1]++;
          cov_wdfcab0iz().s[73]++;
          logger_1.logger.warn(`⚠️ Model ${modelName} has issues:`, healthStatus.issues);
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_wdfcab0iz().s[74]++;
        logger_1.logger.error(`❌ Health check failed for model ${modelName}:`, error);
        /* istanbul ignore next */
        cov_wdfcab0iz().s[75]++;
        this.modelHealthStatus.set(modelName, {
          modelName,
          isHealthy: false,
          lastHealthCheck: new Date(),
          issues: [`Health check failed: ${error.message}`],
          recommendations: ['Consider re-downloading the model']
        });
      }
    }
  }
  /**
   * Check health of a specific model
   */
  async checkModelHealth(modelName, config) {
    /* istanbul ignore next */
    cov_wdfcab0iz().f[8]++;
    const issues =
    /* istanbul ignore next */
    (cov_wdfcab0iz().s[76]++, []);
    const recommendations =
    /* istanbul ignore next */
    (cov_wdfcab0iz().s[77]++, []);
    /* istanbul ignore next */
    cov_wdfcab0iz().s[78]++;
    try {
      /* istanbul ignore next */
      cov_wdfcab0iz().s[79]++;
      // Check if model file exists and is readable
      await fs_1.promises.access(config.modelPath, fs_1.promises.constants.R_OK);
      // Check file size (basic integrity check)
      const stats =
      /* istanbul ignore next */
      (cov_wdfcab0iz().s[80]++, await fs_1.promises.stat(config.modelPath));
      /* istanbul ignore next */
      cov_wdfcab0iz().s[81]++;
      if (stats.size < 1024 * 1024) {
        /* istanbul ignore next */
        cov_wdfcab0iz().b[4][0]++;
        cov_wdfcab0iz().s[82]++;
        // Less than 1MB is suspicious
        issues.push('Model file size is suspiciously small');
        /* istanbul ignore next */
        cov_wdfcab0iz().s[83]++;
        recommendations.push('Re-download the model');
      } else
      /* istanbul ignore next */
      {
        cov_wdfcab0iz().b[4][1]++;
      }
      // Check if model fits in available memory
      const systemResources =
      /* istanbul ignore next */
      (cov_wdfcab0iz().s[84]++, await this.systemMonitor.getCurrentResources());
      /* istanbul ignore next */
      cov_wdfcab0iz().s[85]++;
      if (config.memoryRequirement > systemResources.memory.available) {
        /* istanbul ignore next */
        cov_wdfcab0iz().b[5][0]++;
        cov_wdfcab0iz().s[86]++;
        issues.push('Model requires more memory than available');
        /* istanbul ignore next */
        cov_wdfcab0iz().s[87]++;
        recommendations.push('Free up memory or use a smaller model');
      } else
      /* istanbul ignore next */
      {
        cov_wdfcab0iz().b[5][1]++;
      }
      // Verify model integrity (in production, this would check cryptographic hashes)
      const isIntegrityValid =
      /* istanbul ignore next */
      (cov_wdfcab0iz().s[88]++, await this.verifyModelIntegrity(config.modelPath));
      /* istanbul ignore next */
      cov_wdfcab0iz().s[89]++;
      if (!isIntegrityValid) {
        /* istanbul ignore next */
        cov_wdfcab0iz().b[6][0]++;
        cov_wdfcab0iz().s[90]++;
        issues.push('Model integrity verification failed');
        /* istanbul ignore next */
        cov_wdfcab0iz().s[91]++;
        recommendations.push('Re-download the model from trusted source');
      } else
      /* istanbul ignore next */
      {
        cov_wdfcab0iz().b[6][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_wdfcab0iz().s[92]++;
      issues.push(`File access error: ${error.message}`);
      /* istanbul ignore next */
      cov_wdfcab0iz().s[93]++;
      recommendations.push('Check file permissions and path');
    }
    /* istanbul ignore next */
    cov_wdfcab0iz().s[94]++;
    return {
      modelName,
      isHealthy: issues.length === 0,
      lastHealthCheck: new Date(),
      issues,
      recommendations
    };
  }
  /**
   * Verify model file integrity
   * In production, this would use cryptographic hashes
   */
  async verifyModelIntegrity(modelPath) {
    /* istanbul ignore next */
    cov_wdfcab0iz().f[9]++;
    cov_wdfcab0iz().s[95]++;
    try {
      // Mock integrity check - in production, use actual hash verification
      const stats =
      /* istanbul ignore next */
      (cov_wdfcab0iz().s[96]++, await fs_1.promises.stat(modelPath));
      /* istanbul ignore next */
      cov_wdfcab0iz().s[97]++;
      return stats.size > 0; // Basic check that file exists and has content
    } catch (error) {
      /* istanbul ignore next */
      cov_wdfcab0iz().s[98]++;
      logger_1.logger.error('❌ Model integrity verification failed:', error);
      /* istanbul ignore next */
      cov_wdfcab0iz().s[99]++;
      return false;
    }
  }
  /**
   * Download missing high-priority models
   */
  async downloadMissingModels() {
    /* istanbul ignore next */
    cov_wdfcab0iz().f[10]++;
    cov_wdfcab0iz().s[100]++;
    logger_1.logger.info('📥 Checking for missing models to download...');
    // Sort by priority (highest first)
    const sortedDownloads =
    /* istanbul ignore next */
    (cov_wdfcab0iz().s[101]++, this.MODEL_DOWNLOADS.sort((a, b) => {
      /* istanbul ignore next */
      cov_wdfcab0iz().f[11]++;
      cov_wdfcab0iz().s[102]++;
      return b.priority - a.priority;
    }));
    /* istanbul ignore next */
    cov_wdfcab0iz().s[103]++;
    for (const downloadConfig of sortedDownloads) {
      /* istanbul ignore next */
      cov_wdfcab0iz().s[104]++;
      if (!this.availableModels.has(downloadConfig.modelName)) {
        /* istanbul ignore next */
        cov_wdfcab0iz().b[7][0]++;
        cov_wdfcab0iz().s[105]++;
        logger_1.logger.info(`📥 Model ${downloadConfig.modelName} not found, adding to download queue`);
        // Check if we have enough disk space
        const systemResources =
        /* istanbul ignore next */
        (cov_wdfcab0iz().s[106]++, await this.systemMonitor.getCurrentResources());
        /* istanbul ignore next */
        cov_wdfcab0iz().s[107]++;
        if (systemResources.disk.available < downloadConfig.fileSize * 1.2) {
          /* istanbul ignore next */
          cov_wdfcab0iz().b[8][0]++;
          cov_wdfcab0iz().s[108]++;
          // 20% buffer
          logger_1.logger.warn(`⚠️ Insufficient disk space for ${downloadConfig.modelName}`);
          /* istanbul ignore next */
          cov_wdfcab0iz().s[109]++;
          continue;
        } else
        /* istanbul ignore next */
        {
          cov_wdfcab0iz().b[8][1]++;
        }
        // In production, this would actually download the model
        // For now, we'll just log the intention
        cov_wdfcab0iz().s[110]++;
        logger_1.logger.info(`📥 Would download ${downloadConfig.modelName} from ${downloadConfig.downloadUrl}`);
        // Create placeholder model config for now
        const modelConfig =
        /* istanbul ignore next */
        (cov_wdfcab0iz().s[111]++, this.getModelConfigByName(downloadConfig.modelName));
        /* istanbul ignore next */
        cov_wdfcab0iz().s[112]++;
        if (modelConfig) {
          /* istanbul ignore next */
          cov_wdfcab0iz().b[9][0]++;
          cov_wdfcab0iz().s[113]++;
          modelConfig.modelPath = (0, path_1.join)(this.modelsDirectory, `${downloadConfig.modelName}.onnx`);
          // Don't add to available models until actually downloaded
        } else
        /* istanbul ignore next */
        {
          cov_wdfcab0iz().b[9][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_wdfcab0iz().b[7][1]++;
      }
    }
  }
  /**
   * Select the best model based on current system resources and requirements
   */
  async selectOptimalModel(requirements) {
    /* istanbul ignore next */
    cov_wdfcab0iz().f[12]++;
    cov_wdfcab0iz().s[114]++;
    try {
      /* istanbul ignore next */
      cov_wdfcab0iz().s[115]++;
      logger_1.logger.info('🎯 Selecting optimal model...');
      const systemResources =
      /* istanbul ignore next */
      (cov_wdfcab0iz().s[116]++, await this.systemMonitor.getCurrentResources());
      const availableMemory =
      /* istanbul ignore next */
      (cov_wdfcab0iz().s[117]++, systemResources.memory.available);
      // Filter healthy models that fit in memory
      const viableModels =
      /* istanbul ignore next */
      (cov_wdfcab0iz().s[118]++, Array.from(this.availableModels.entries()).filter(([modelName, config]) => {
        /* istanbul ignore next */
        cov_wdfcab0iz().f[13]++;
        const healthStatus =
        /* istanbul ignore next */
        (cov_wdfcab0iz().s[119]++, this.modelHealthStatus.get(modelName));
        /* istanbul ignore next */
        cov_wdfcab0iz().s[120]++;
        return /* istanbul ignore next */(cov_wdfcab0iz().b[10][0]++, healthStatus?.isHealthy) &&
        /* istanbul ignore next */
        (cov_wdfcab0iz().b[10][1]++, config.memoryRequirement <= availableMemory - 1024); // 1GB buffer
      }));
      /* istanbul ignore next */
      cov_wdfcab0iz().s[121]++;
      if (viableModels.length === 0) {
        /* istanbul ignore next */
        cov_wdfcab0iz().b[11][0]++;
        cov_wdfcab0iz().s[122]++;
        logger_1.logger.warn('⚠️ No viable models found');
        /* istanbul ignore next */
        cov_wdfcab0iz().s[123]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_wdfcab0iz().b[11][1]++;
      }
      // Score models based on performance history and requirements
      const scoredModels =
      /* istanbul ignore next */
      (cov_wdfcab0iz().s[124]++, viableModels.map(([modelName, config]) => {
        /* istanbul ignore next */
        cov_wdfcab0iz().f[14]++;
        const performance =
        /* istanbul ignore next */
        (cov_wdfcab0iz().s[125]++, this.modelPerformanceHistory.get(modelName));
        let score =
        /* istanbul ignore next */
        (cov_wdfcab0iz().s[126]++, 0);
        // Base score from model capability (larger models generally better)
        /* istanbul ignore next */
        cov_wdfcab0iz().s[127]++;
        score += config.memoryRequirement / 1000; // Normalize to 0-3 range
        // Performance history bonus
        /* istanbul ignore next */
        cov_wdfcab0iz().s[128]++;
        if (performance) {
          /* istanbul ignore next */
          cov_wdfcab0iz().b[12][0]++;
          cov_wdfcab0iz().s[129]++;
          score += performance.averageAccuracy / 100 * 2; // 0-2 bonus
          /* istanbul ignore next */
          cov_wdfcab0iz().s[130]++;
          score += 1 / (performance.averageInferenceTime / 1000) * 1; // Speed bonus
          /* istanbul ignore next */
          cov_wdfcab0iz().s[131]++;
          score += performance.successRate * 1; // Reliability bonus
        } else
        /* istanbul ignore next */
        {
          cov_wdfcab0iz().b[12][1]++;
        }
        // Apply requirements filters
        cov_wdfcab0iz().s[132]++;
        if (
        /* istanbul ignore next */
        (cov_wdfcab0iz().b[14][0]++, requirements?.maxMemory) &&
        /* istanbul ignore next */
        (cov_wdfcab0iz().b[14][1]++, config.memoryRequirement > requirements.maxMemory)) {
          /* istanbul ignore next */
          cov_wdfcab0iz().b[13][0]++;
          cov_wdfcab0iz().s[133]++;
          score *= 0.5; // Penalty for exceeding memory requirement
        } else
        /* istanbul ignore next */
        {
          cov_wdfcab0iz().b[13][1]++;
        }
        cov_wdfcab0iz().s[134]++;
        if (
        /* istanbul ignore next */
        (cov_wdfcab0iz().b[16][0]++, requirements?.maxInferenceTime) &&
        /* istanbul ignore next */
        (cov_wdfcab0iz().b[16][1]++, performance?.averageInferenceTime > requirements.maxInferenceTime)) {
          /* istanbul ignore next */
          cov_wdfcab0iz().b[15][0]++;
          cov_wdfcab0iz().s[135]++;
          score *= 0.7; // Penalty for being too slow
        } else
        /* istanbul ignore next */
        {
          cov_wdfcab0iz().b[15][1]++;
        }
        cov_wdfcab0iz().s[136]++;
        if (
        /* istanbul ignore next */
        (cov_wdfcab0iz().b[18][0]++, requirements?.minAccuracy) &&
        /* istanbul ignore next */
        (cov_wdfcab0iz().b[18][1]++, performance?.averageAccuracy < requirements.minAccuracy)) {
          /* istanbul ignore next */
          cov_wdfcab0iz().b[17][0]++;
          cov_wdfcab0iz().s[137]++;
          score *= 0.3; // Heavy penalty for insufficient accuracy
        } else
        /* istanbul ignore next */
        {
          cov_wdfcab0iz().b[17][1]++;
        }
        cov_wdfcab0iz().s[138]++;
        return {
          modelName,
          config,
          score
        };
      }));
      // Sort by score (highest first)
      /* istanbul ignore next */
      cov_wdfcab0iz().s[139]++;
      scoredModels.sort((a, b) => {
        /* istanbul ignore next */
        cov_wdfcab0iz().f[15]++;
        cov_wdfcab0iz().s[140]++;
        return b.score - a.score;
      });
      const selectedModel =
      /* istanbul ignore next */
      (cov_wdfcab0iz().s[141]++, scoredModels[0]);
      /* istanbul ignore next */
      cov_wdfcab0iz().s[142]++;
      logger_1.logger.info(`🎯 Selected optimal model: ${selectedModel.modelName} (score: ${selectedModel.score.toFixed(2)})`);
      /* istanbul ignore next */
      cov_wdfcab0iz().s[143]++;
      return selectedModel.modelName;
    } catch (error) {
      /* istanbul ignore next */
      cov_wdfcab0iz().s[144]++;
      logger_1.logger.error('❌ Error selecting optimal model:', error);
      /* istanbul ignore next */
      cov_wdfcab0iz().s[145]++;
      return null;
    }
  }
  /**
   * Load a specific model into memory
   */
  async loadModel(modelName) {
    /* istanbul ignore next */
    cov_wdfcab0iz().f[16]++;
    cov_wdfcab0iz().s[146]++;
    try {
      /* istanbul ignore next */
      cov_wdfcab0iz().s[147]++;
      logger_1.logger.info(`📥 Loading model: ${modelName}...`);
      // Check if already loaded
      /* istanbul ignore next */
      cov_wdfcab0iz().s[148]++;
      if (this.loadedModels.has(modelName)) {
        /* istanbul ignore next */
        cov_wdfcab0iz().b[19][0]++;
        cov_wdfcab0iz().s[149]++;
        logger_1.logger.info(`✅ Model ${modelName} already loaded`);
        /* istanbul ignore next */
        cov_wdfcab0iz().s[150]++;
        return this.loadedModels.get(modelName);
      } else
      /* istanbul ignore next */
      {
        cov_wdfcab0iz().b[19][1]++;
      }
      // Get model configuration
      const config =
      /* istanbul ignore next */
      (cov_wdfcab0iz().s[151]++, this.availableModels.get(modelName));
      /* istanbul ignore next */
      cov_wdfcab0iz().s[152]++;
      if (!config) {
        /* istanbul ignore next */
        cov_wdfcab0iz().b[20][0]++;
        cov_wdfcab0iz().s[153]++;
        throw new Error(`Model ${modelName} not found in available models`);
      } else
      /* istanbul ignore next */
      {
        cov_wdfcab0iz().b[20][1]++;
      }
      // Check health status
      const healthStatus =
      /* istanbul ignore next */
      (cov_wdfcab0iz().s[154]++, this.modelHealthStatus.get(modelName));
      /* istanbul ignore next */
      cov_wdfcab0iz().s[155]++;
      if (!healthStatus?.isHealthy) {
        /* istanbul ignore next */
        cov_wdfcab0iz().b[21][0]++;
        cov_wdfcab0iz().s[156]++;
        throw new Error(`Model ${modelName} is not healthy: ${healthStatus?.issues.join(', ')}`);
      } else
      /* istanbul ignore next */
      {
        cov_wdfcab0iz().b[21][1]++;
      }
      // Check system resources
      const systemResources =
      /* istanbul ignore next */
      (cov_wdfcab0iz().s[157]++, await this.systemMonitor.getCurrentResources());
      /* istanbul ignore next */
      cov_wdfcab0iz().s[158]++;
      if (config.memoryRequirement > systemResources.memory.available) {
        /* istanbul ignore next */
        cov_wdfcab0iz().b[22][0]++;
        cov_wdfcab0iz().s[159]++;
        throw new Error(`Insufficient memory to load ${modelName}`);
      } else
      /* istanbul ignore next */
      {
        cov_wdfcab0iz().b[22][1]++;
      }
      // Load the model (mock implementation)
      const modelInstance =
      /* istanbul ignore next */
      (cov_wdfcab0iz().s[160]++, await this.loadModelInstance(config));
      // Cache the loaded model
      /* istanbul ignore next */
      cov_wdfcab0iz().s[161]++;
      this.loadedModels.set(modelName, modelInstance);
      /* istanbul ignore next */
      cov_wdfcab0iz().s[162]++;
      this.currentActiveModel = modelName;
      /* istanbul ignore next */
      cov_wdfcab0iz().s[163]++;
      logger_1.logger.info(`✅ Model ${modelName} loaded successfully`);
      /* istanbul ignore next */
      cov_wdfcab0iz().s[164]++;
      this.emit('modelLoaded', {
        modelName,
        config
      });
      /* istanbul ignore next */
      cov_wdfcab0iz().s[165]++;
      return modelInstance;
    } catch (error) {
      /* istanbul ignore next */
      cov_wdfcab0iz().s[166]++;
      logger_1.logger.error(`❌ Failed to load model ${modelName}:`, error);
      /* istanbul ignore next */
      cov_wdfcab0iz().s[167]++;
      throw error;
    }
  }
  /**
   * Load model instance (mock implementation)
   * In production, this would use actual ONNX Runtime
   */
  async loadModelInstance(config) {
    /* istanbul ignore next */
    cov_wdfcab0iz().f[17]++;
    cov_wdfcab0iz().s[168]++;
    // Mock model instance
    return {
      config,
      predict: async input => {
        /* istanbul ignore next */
        cov_wdfcab0iz().f[18]++;
        const startTime =
        /* istanbul ignore next */
        (cov_wdfcab0iz().s[169]++, Date.now());
        // Simulate inference time based on model complexity
        const inferenceTime =
        /* istanbul ignore next */
        (cov_wdfcab0iz().s[170]++, config.memoryRequirement / 2000); // Rough simulation
        /* istanbul ignore next */
        cov_wdfcab0iz().s[171]++;
        await new Promise(resolve => {
          /* istanbul ignore next */
          cov_wdfcab0iz().f[19]++;
          cov_wdfcab0iz().s[172]++;
          return setTimeout(resolve, inferenceTime);
        });
        const endTime =
        /* istanbul ignore next */
        (cov_wdfcab0iz().s[173]++, Date.now());
        // Update performance metrics
        /* istanbul ignore next */
        cov_wdfcab0iz().s[174]++;
        this.updatePerformanceMetrics(config.modelName, endTime - startTime, 0.85); // Mock 85% accuracy
        /* istanbul ignore next */
        cov_wdfcab0iz().s[175]++;
        return `Analysis from ${config.modelName}: ${input}`;
      }
    };
  }
  /**
   * Update performance metrics for a model
   */
  updatePerformanceMetrics(modelName, inferenceTime, accuracy) {
    /* istanbul ignore next */
    cov_wdfcab0iz().f[20]++;
    let performance =
    /* istanbul ignore next */
    (cov_wdfcab0iz().s[176]++, this.modelPerformanceHistory.get(modelName));
    /* istanbul ignore next */
    cov_wdfcab0iz().s[177]++;
    if (!performance) {
      /* istanbul ignore next */
      cov_wdfcab0iz().b[23][0]++;
      cov_wdfcab0iz().s[178]++;
      performance = {
        modelName,
        averageInferenceTime: inferenceTime,
        averageAccuracy: accuracy,
        memoryEfficiency: 0,
        cpuEfficiency: 0,
        successRate: 1.0,
        lastUsed: new Date(),
        totalUsageTime: 0
      };
    } else {
      /* istanbul ignore next */
      cov_wdfcab0iz().b[23][1]++;
      cov_wdfcab0iz().s[179]++;
      // Update running averages
      performance.averageInferenceTime = (performance.averageInferenceTime + inferenceTime) / 2;
      /* istanbul ignore next */
      cov_wdfcab0iz().s[180]++;
      performance.averageAccuracy = (performance.averageAccuracy + accuracy) / 2;
      /* istanbul ignore next */
      cov_wdfcab0iz().s[181]++;
      performance.lastUsed = new Date();
      /* istanbul ignore next */
      cov_wdfcab0iz().s[182]++;
      performance.totalUsageTime += inferenceTime / 1000; // Convert to seconds
    }
    /* istanbul ignore next */
    cov_wdfcab0iz().s[183]++;
    this.modelPerformanceHistory.set(modelName, performance);
  }
  /**
   * Unload a model from memory
   */
  async unloadModel(modelName) {
    /* istanbul ignore next */
    cov_wdfcab0iz().f[21]++;
    cov_wdfcab0iz().s[184]++;
    try {
      /* istanbul ignore next */
      cov_wdfcab0iz().s[185]++;
      if (this.loadedModels.has(modelName)) {
        /* istanbul ignore next */
        cov_wdfcab0iz().b[24][0]++;
        cov_wdfcab0iz().s[186]++;
        this.loadedModels.delete(modelName);
        /* istanbul ignore next */
        cov_wdfcab0iz().s[187]++;
        if (this.currentActiveModel === modelName) {
          /* istanbul ignore next */
          cov_wdfcab0iz().b[25][0]++;
          cov_wdfcab0iz().s[188]++;
          this.currentActiveModel = null;
        } else
        /* istanbul ignore next */
        {
          cov_wdfcab0iz().b[25][1]++;
        }
        cov_wdfcab0iz().s[189]++;
        logger_1.logger.info(`📤 Model ${modelName} unloaded from memory`);
        /* istanbul ignore next */
        cov_wdfcab0iz().s[190]++;
        this.emit('modelUnloaded', {
          modelName
        });
      } else
      /* istanbul ignore next */
      {
        cov_wdfcab0iz().b[24][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_wdfcab0iz().s[191]++;
      logger_1.logger.error(`❌ Error unloading model ${modelName}:`, error);
      /* istanbul ignore next */
      cov_wdfcab0iz().s[192]++;
      throw error;
    }
  }
  /**
   * Get list of available models
   */
  getAvailableModels() {
    /* istanbul ignore next */
    cov_wdfcab0iz().f[22]++;
    cov_wdfcab0iz().s[193]++;
    return Array.from(this.availableModels.keys());
  }
  /**
   * Get list of loaded models
   */
  getLoadedModels() {
    /* istanbul ignore next */
    cov_wdfcab0iz().f[23]++;
    cov_wdfcab0iz().s[194]++;
    return Array.from(this.loadedModels.keys());
  }
  /**
   * Get current active model
   */
  getCurrentActiveModel() {
    /* istanbul ignore next */
    cov_wdfcab0iz().f[24]++;
    cov_wdfcab0iz().s[195]++;
    return this.currentActiveModel;
  }
  /**
   * Get model performance history
   */
  getModelPerformanceHistory(modelName) {
    /* istanbul ignore next */
    cov_wdfcab0iz().f[25]++;
    cov_wdfcab0iz().s[196]++;
    if (modelName) {
      /* istanbul ignore next */
      cov_wdfcab0iz().b[26][0]++;
      const performance =
      /* istanbul ignore next */
      (cov_wdfcab0iz().s[197]++, this.modelPerformanceHistory.get(modelName));
      /* istanbul ignore next */
      cov_wdfcab0iz().s[198]++;
      return performance ?
      /* istanbul ignore next */
      (cov_wdfcab0iz().b[27][0]++, [performance]) :
      /* istanbul ignore next */
      (cov_wdfcab0iz().b[27][1]++, []);
    } else
    /* istanbul ignore next */
    {
      cov_wdfcab0iz().b[26][1]++;
    }
    cov_wdfcab0iz().s[199]++;
    return Array.from(this.modelPerformanceHistory.values());
  }
  /**
   * Get model health status
   */
  getModelHealthStatus(modelName) {
    /* istanbul ignore next */
    cov_wdfcab0iz().f[26]++;
    cov_wdfcab0iz().s[200]++;
    if (modelName) {
      /* istanbul ignore next */
      cov_wdfcab0iz().b[28][0]++;
      const health =
      /* istanbul ignore next */
      (cov_wdfcab0iz().s[201]++, this.modelHealthStatus.get(modelName));
      /* istanbul ignore next */
      cov_wdfcab0iz().s[202]++;
      return health ?
      /* istanbul ignore next */
      (cov_wdfcab0iz().b[29][0]++, [health]) :
      /* istanbul ignore next */
      (cov_wdfcab0iz().b[29][1]++, []);
    } else
    /* istanbul ignore next */
    {
      cov_wdfcab0iz().b[28][1]++;
    }
    cov_wdfcab0iz().s[203]++;
    return Array.from(this.modelHealthStatus.values());
  }
  /**
   * Save performance history to disk
   */
  async savePerformanceHistory() {
    /* istanbul ignore next */
    cov_wdfcab0iz().f[27]++;
    cov_wdfcab0iz().s[204]++;
    try {
      const historyPath =
      /* istanbul ignore next */
      (cov_wdfcab0iz().s[205]++, (0, path_1.join)(this.modelsDirectory, 'performance_history.json'));
      const historyData =
      /* istanbul ignore next */
      (cov_wdfcab0iz().s[206]++, Object.fromEntries(this.modelPerformanceHistory));
      /* istanbul ignore next */
      cov_wdfcab0iz().s[207]++;
      await fs_1.promises.writeFile(historyPath, JSON.stringify(historyData, null, 2));
      /* istanbul ignore next */
      cov_wdfcab0iz().s[208]++;
      logger_1.logger.info('💾 Performance history saved to disk');
    } catch (error) {
      /* istanbul ignore next */
      cov_wdfcab0iz().s[209]++;
      logger_1.logger.error('❌ Error saving performance history:', error);
    }
  }
  /**
   * Shutdown the model manager gracefully
   */
  async shutdown() {
    /* istanbul ignore next */
    cov_wdfcab0iz().f[28]++;
    cov_wdfcab0iz().s[210]++;
    try {
      /* istanbul ignore next */
      cov_wdfcab0iz().s[211]++;
      logger_1.logger.info('🛑 Shutting down Model Manager...');
      // Save performance history
      /* istanbul ignore next */
      cov_wdfcab0iz().s[212]++;
      await this.savePerformanceHistory();
      // Unload all models
      /* istanbul ignore next */
      cov_wdfcab0iz().s[213]++;
      for (const modelName of this.loadedModels.keys()) {
        /* istanbul ignore next */
        cov_wdfcab0iz().s[214]++;
        await this.unloadModel(modelName);
      }
      // Clear caches
      /* istanbul ignore next */
      cov_wdfcab0iz().s[215]++;
      this.availableModels.clear();
      /* istanbul ignore next */
      cov_wdfcab0iz().s[216]++;
      this.modelPerformanceHistory.clear();
      /* istanbul ignore next */
      cov_wdfcab0iz().s[217]++;
      this.modelHealthStatus.clear();
      /* istanbul ignore next */
      cov_wdfcab0iz().s[218]++;
      this.isInitialized = false;
      /* istanbul ignore next */
      cov_wdfcab0iz().s[219]++;
      logger_1.logger.info('✅ Model Manager shutdown completed');
    } catch (error) {
      /* istanbul ignore next */
      cov_wdfcab0iz().s[220]++;
      logger_1.logger.error('❌ Error during Model Manager shutdown:', error);
      /* istanbul ignore next */
      cov_wdfcab0iz().s[221]++;
      throw error;
    }
  }
}
/* istanbul ignore next */
cov_wdfcab0iz().s[222]++;
exports.ModelManager = ModelManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,