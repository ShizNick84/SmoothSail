{"version":3,"names":["cov_wdfcab0iz","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","events_1","require","fs_1","path_1","logger_1","ModelManager","EventEmitter","systemMonitor","securityManager","modelsDirectory","availableModels","Map","loadedModels","modelPerformanceHistory","modelHealthStatus","currentActiveModel","isInitialized","MODEL_DOWNLOADS","modelName","downloadUrl","expectedHash","fileSize","priority","constructor","logger","info","initialize","ensureModelsDirectory","discoverAvailableModels","loadPerformanceHistory","performHealthChecks","downloadMissingModels","emit","error","Error","message","promises","access","mkdir","recursive","mode","files","readdir","modelFiles","filter","endsWith","modelFile","modelPath","join","replace","modelConfig","getModelConfigByName","set","size","configs","quantization","maxTokens","temperature","topP","topK","memoryRequirement","cpuThreads","contextWindow","batchSize","baseConfig","historyPath","historyData","readFile","history","JSON","parse","data","Object","entries","config","healthStatus","checkModelHealth","isHealthy","warn","issues","lastHealthCheck","Date","recommendations","constants","R_OK","stats","stat","push","systemResources","getCurrentResources","memory","available","isIntegrityValid","verifyModelIntegrity","length","sortedDownloads","sort","a","downloadConfig","has","disk","selectOptimalModel","requirements","availableMemory","viableModels","Array","from","get","scoredModels","map","performance","score","averageAccuracy","averageInferenceTime","successRate","maxMemory","maxInferenceTime","minAccuracy","selectedModel","toFixed","loadModel","modelInstance","loadModelInstance","predict","input","startTime","now","inferenceTime","Promise","resolve","setTimeout","endTime","updatePerformanceMetrics","accuracy","memoryEfficiency","cpuEfficiency","lastUsed","totalUsageTime","unloadModel","delete","getAvailableModels","keys","getLoadedModels","getCurrentActiveModel","getModelPerformanceHistory","values","getModelHealthStatus","health","savePerformanceHistory","fromEntries","writeFile","stringify","shutdown","clear","exports"],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\ai\\model-manager.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * MODEL MANAGER - LLM MODEL LIFECYCLE AND OPTIMIZATION\r\n * =============================================================================\r\n * \r\n * This module manages the lifecycle of LLM models, including loading, unloading,\r\n * optimization, and switching between models based on system resources and\r\n * performance requirements. Specifically designed for Intel NUC constraints.\r\n * \r\n * Key Features:\r\n * - Dynamic model loading/unloading based on memory pressure\r\n * - Model performance monitoring and optimization\r\n * - Automatic fallback mechanisms for model failures\r\n * - Resource-aware model selection\r\n * - Model integrity verification and security\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport { EventEmitter } from 'events';\r\nimport { promises as fs } from 'fs';\r\nimport { join } from 'path';\r\nimport { logger } from '@/core/logging/logger';\r\nimport { SystemMonitor } from '@/infrastructure/system-monitor';\r\nimport { SecurityManager } from '@/security/security-manager';\r\nimport type { LLMModelConfig, ModelMetrics } from './llm-engine';\r\n\r\n/**\r\n * Interface for model download and management\r\n */\r\ninterface ModelDownloadConfig {\r\n  modelName: string;\r\n  downloadUrl: string;\r\n  expectedHash: string;\r\n  fileSize: number; // bytes\r\n  priority: number; // 1-10, higher is more important\r\n}\r\n\r\n/**\r\n * Interface for model performance history\r\n */\r\ninterface ModelPerformanceHistory {\r\n  modelName: string;\r\n  averageInferenceTime: number;\r\n  averageAccuracy: number;\r\n  memoryEfficiency: number;\r\n  cpuEfficiency: number;\r\n  successRate: number;\r\n  lastUsed: Date;\r\n  totalUsageTime: number; // seconds\r\n}\r\n\r\n/**\r\n * Interface for model health status\r\n */\r\ninterface ModelHealthStatus {\r\n  modelName: string;\r\n  isHealthy: boolean;\r\n  lastHealthCheck: Date;\r\n  issues: string[];\r\n  recommendations: string[];\r\n}\r\n\r\n/**\r\n * Model Manager class for handling LLM model lifecycle\r\n * Optimized for Intel NUC hardware constraints\r\n */\r\nexport class ModelManager extends EventEmitter {\r\n  private systemMonitor: SystemMonitor;\r\n  private securityManager: SecurityManager;\r\n  private modelsDirectory: string;\r\n  private availableModels: Map<string, LLMModelConfig> = new Map();\r\n  private loadedModels: Map<string, any> = new Map();\r\n  private modelPerformanceHistory: Map<string, ModelPerformanceHistory> = new Map();\r\n  private modelHealthStatus: Map<string, ModelHealthStatus> = new Map();\r\n  private currentActiveModel: string | null = null;\r\n  private isInitialized: boolean = false;\r\n\r\n  // Model download configurations for Intel NUC optimization\r\n  private readonly MODEL_DOWNLOADS: ModelDownloadConfig[] = [\r\n    {\r\n      modelName: 'phi-3-mini-4k-instruct-q4',\r\n      downloadUrl: 'https://huggingface.co/microsoft/Phi-3-mini-4K-instruct-onnx/resolve/main/cpu_and_mobile/cpu-int4-rtn-block-32-acc-level-4/phi-3-mini-4k-instruct-cpu-int4-rtn-block-32-acc-level-4.onnx',\r\n      expectedHash: 'sha256:abc123...', // Would be actual hash in production\r\n      fileSize: 2147483648, // 2GB\r\n      priority: 9\r\n    },\r\n    {\r\n      modelName: 'llama-3.2-1b-instruct-q8',\r\n      downloadUrl: 'https://huggingface.co/meta-llama/Llama-3.2-1B-Instruct-onnx/resolve/main/onnx/model_quantized.onnx',\r\n      expectedHash: 'sha256:def456...', // Would be actual hash in production\r\n      fileSize: 1610612736, // 1.5GB\r\n      priority: 8\r\n    },\r\n    {\r\n      modelName: 'tinyllama-1.1b-chat-q4',\r\n      downloadUrl: 'https://huggingface.co/TinyLlama/TinyLlama-1.1B-Chat-v1.0-onnx/resolve/main/onnx/model_quantized.onnx',\r\n      expectedHash: 'sha256:ghi789...', // Would be actual hash in production\r\n      fileSize: 805306368, // 768MB\r\n      priority: 7\r\n    }\r\n  ];\r\n\r\n  constructor(\r\n    systemMonitor: SystemMonitor, \r\n    securityManager: SecurityManager,\r\n    modelsDirectory: string = './models'\r\n  ) {\r\n    super();\r\n    this.systemMonitor = systemMonitor;\r\n    this.securityManager = securityManager;\r\n    this.modelsDirectory = modelsDirectory;\r\n\r\n    logger.info('üóÇÔ∏è Model Manager initialized');\r\n  }\r\n\r\n  /**\r\n   * Initialize the model manager\r\n   * Sets up model directory and discovers available models\r\n   */\r\n  public async initialize(): Promise<void> {\r\n    try {\r\n      logger.info('üöÄ Initializing Model Manager...');\r\n\r\n      // Create models directory if it doesn't exist\r\n      await this.ensureModelsDirectory();\r\n\r\n      // Discover existing models\r\n      await this.discoverAvailableModels();\r\n\r\n      // Load model performance history\r\n      await this.loadPerformanceHistory();\r\n\r\n      // Perform initial health checks\r\n      await this.performHealthChecks();\r\n\r\n      // Download missing high-priority models\r\n      await this.downloadMissingModels();\r\n\r\n      this.isInitialized = true;\r\n      logger.info('‚úÖ Model Manager initialized successfully');\r\n\r\n      this.emit('initialized');\r\n\r\n    } catch (error) {\r\n      logger.error('‚ùå Failed to initialize Model Manager:', error);\r\n      throw new Error(`Model Manager initialization failed: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ensure models directory exists with proper permissions\r\n   */\r\n  private async ensureModelsDirectory(): Promise<void> {\r\n    try {\r\n      await fs.access(this.modelsDirectory);\r\n      logger.info(`üìÅ Models directory exists: ${this.modelsDirectory}`);\r\n    } catch {\r\n      logger.info(`üìÅ Creating models directory: ${this.modelsDirectory}`);\r\n      await fs.mkdir(this.modelsDirectory, { recursive: true, mode: 0o755 });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Discover available models in the models directory\r\n   */\r\n  private async discoverAvailableModels(): Promise<void> {\r\n    try {\r\n      logger.info('üîç Discovering available models...');\r\n\r\n      const files = await fs.readdir(this.modelsDirectory);\r\n      const modelFiles = files.filter(file => file.endsWith('.onnx'));\r\n\r\n      for (const modelFile of modelFiles) {\r\n        const modelPath = join(this.modelsDirectory, modelFile);\r\n        const modelName = modelFile.replace('.onnx', '');\r\n\r\n        // Get model configuration based on filename\r\n        const modelConfig = this.getModelConfigByName(modelName);\r\n        \r\n        if (modelConfig) {\r\n          modelConfig.modelPath = modelPath;\r\n          this.availableModels.set(modelName, modelConfig);\r\n          logger.info(`üì¶ Discovered model: ${modelName}`);\r\n        }\r\n      }\r\n\r\n      logger.info(`‚úÖ Discovered ${this.availableModels.size} available models`);\r\n\r\n    } catch (error) {\r\n      logger.error('‚ùå Error discovering models:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get model configuration by name\r\n   * Returns predefined configuration for known models\r\n   */\r\n  private getModelConfigByName(modelName: string): LLMModelConfig | null {\r\n    const configs: Record<string, Partial<LLMModelConfig>> = {\r\n      'phi-3-mini-4k-instruct-q4': {\r\n        quantization: '4bit',\r\n        maxTokens: 2048,\r\n        temperature: 0.7,\r\n        topP: 0.9,\r\n        topK: 40,\r\n        memoryRequirement: 2048,\r\n        cpuThreads: 4,\r\n        contextWindow: 4096,\r\n        batchSize: 1\r\n      },\r\n      'llama-3.2-1b-instruct-q8': {\r\n        quantization: '8bit',\r\n        maxTokens: 2048,\r\n        temperature: 0.7,\r\n        topP: 0.9,\r\n        topK: 40,\r\n        memoryRequirement: 1536,\r\n        cpuThreads: 4,\r\n        contextWindow: 2048,\r\n        batchSize: 1\r\n      },\r\n      'tinyllama-1.1b-chat-q4': {\r\n        quantization: '4bit',\r\n        maxTokens: 1024,\r\n        temperature: 0.8,\r\n        topP: 0.95,\r\n        topK: 50,\r\n        memoryRequirement: 768,\r\n        cpuThreads: 2,\r\n        contextWindow: 2048,\r\n        batchSize: 1\r\n      }\r\n    };\r\n\r\n    const baseConfig = configs[modelName];\r\n    if (!baseConfig) return null;\r\n\r\n    return {\r\n      modelName,\r\n      modelPath: '',\r\n      ...baseConfig\r\n    } as LLMModelConfig;\r\n  }\r\n\r\n  /**\r\n   * Load model performance history from disk\r\n   */\r\n  private async loadPerformanceHistory(): Promise<void> {\r\n    try {\r\n      const historyPath = join(this.modelsDirectory, 'performance_history.json');\r\n      \r\n      try {\r\n        const historyData = await fs.readFile(historyPath, 'utf-8');\r\n        const history = JSON.parse(historyData);\r\n        \r\n        for (const [modelName, data] of Object.entries(history)) {\r\n          this.modelPerformanceHistory.set(modelName, data as ModelPerformanceHistory);\r\n        }\r\n        \r\n        logger.info(`üìä Loaded performance history for ${this.modelPerformanceHistory.size} models`);\r\n        \r\n      } catch {\r\n        logger.info('üìä No existing performance history found, starting fresh');\r\n      }\r\n      \r\n    } catch (error) {\r\n      logger.error('‚ùå Error loading performance history:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Perform health checks on all available models\r\n   */\r\n  private async performHealthChecks(): Promise<void> {\r\n    logger.info('üè• Performing model health checks...');\r\n\r\n    for (const [modelName, config] of this.availableModels) {\r\n      try {\r\n        const healthStatus = await this.checkModelHealth(modelName, config);\r\n        this.modelHealthStatus.set(modelName, healthStatus);\r\n        \r\n        if (healthStatus.isHealthy) {\r\n          logger.info(`‚úÖ Model ${modelName} is healthy`);\r\n        } else {\r\n          logger.warn(`‚ö†Ô∏è Model ${modelName} has issues:`, healthStatus.issues);\r\n        }\r\n        \r\n      } catch (error) {\r\n        logger.error(`‚ùå Health check failed for model ${modelName}:`, error);\r\n        \r\n        this.modelHealthStatus.set(modelName, {\r\n          modelName,\r\n          isHealthy: false,\r\n          lastHealthCheck: new Date(),\r\n          issues: [`Health check failed: ${error.message}`],\r\n          recommendations: ['Consider re-downloading the model']\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check health of a specific model\r\n   */\r\n  private async checkModelHealth(modelName: string, config: LLMModelConfig): Promise<ModelHealthStatus> {\r\n    const issues: string[] = [];\r\n    const recommendations: string[] = [];\r\n\r\n    try {\r\n      // Check if model file exists and is readable\r\n      await fs.access(config.modelPath, fs.constants.R_OK);\r\n      \r\n      // Check file size (basic integrity check)\r\n      const stats = await fs.stat(config.modelPath);\r\n      if (stats.size < 1024 * 1024) { // Less than 1MB is suspicious\r\n        issues.push('Model file size is suspiciously small');\r\n        recommendations.push('Re-download the model');\r\n      }\r\n      \r\n      // Check if model fits in available memory\r\n      const systemResources = await this.systemMonitor.getCurrentResources();\r\n      if (config.memoryRequirement > systemResources.memory.available) {\r\n        issues.push('Model requires more memory than available');\r\n        recommendations.push('Free up memory or use a smaller model');\r\n      }\r\n      \r\n      // Verify model integrity (in production, this would check cryptographic hashes)\r\n      const isIntegrityValid = await this.verifyModelIntegrity(config.modelPath);\r\n      if (!isIntegrityValid) {\r\n        issues.push('Model integrity verification failed');\r\n        recommendations.push('Re-download the model from trusted source');\r\n      }\r\n      \r\n    } catch (error) {\r\n      issues.push(`File access error: ${error.message}`);\r\n      recommendations.push('Check file permissions and path');\r\n    }\r\n\r\n    return {\r\n      modelName,\r\n      isHealthy: issues.length === 0,\r\n      lastHealthCheck: new Date(),\r\n      issues,\r\n      recommendations\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Verify model file integrity\r\n   * In production, this would use cryptographic hashes\r\n   */\r\n  private async verifyModelIntegrity(modelPath: string): Promise<boolean> {\r\n    try {\r\n      // Mock integrity check - in production, use actual hash verification\r\n      const stats = await fs.stat(modelPath);\r\n      return stats.size > 0; // Basic check that file exists and has content\r\n      \r\n    } catch (error) {\r\n      logger.error('‚ùå Model integrity verification failed:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Download missing high-priority models\r\n   */\r\n  private async downloadMissingModels(): Promise<void> {\r\n    logger.info('üì• Checking for missing models to download...');\r\n\r\n    // Sort by priority (highest first)\r\n    const sortedDownloads = this.MODEL_DOWNLOADS.sort((a, b) => b.priority - a.priority);\r\n\r\n    for (const downloadConfig of sortedDownloads) {\r\n      if (!this.availableModels.has(downloadConfig.modelName)) {\r\n        logger.info(`üì• Model ${downloadConfig.modelName} not found, adding to download queue`);\r\n        \r\n        // Check if we have enough disk space\r\n        const systemResources = await this.systemMonitor.getCurrentResources();\r\n        if (systemResources.disk.available < downloadConfig.fileSize * 1.2) { // 20% buffer\r\n          logger.warn(`‚ö†Ô∏è Insufficient disk space for ${downloadConfig.modelName}`);\r\n          continue;\r\n        }\r\n        \r\n        // In production, this would actually download the model\r\n        // For now, we'll just log the intention\r\n        logger.info(`üì• Would download ${downloadConfig.modelName} from ${downloadConfig.downloadUrl}`);\r\n        \r\n        // Create placeholder model config for now\r\n        const modelConfig = this.getModelConfigByName(downloadConfig.modelName);\r\n        if (modelConfig) {\r\n          modelConfig.modelPath = join(this.modelsDirectory, `${downloadConfig.modelName}.onnx`);\r\n          // Don't add to available models until actually downloaded\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Select the best model based on current system resources and requirements\r\n   */\r\n  public async selectOptimalModel(requirements?: {\r\n    maxMemory?: number;\r\n    maxInferenceTime?: number;\r\n    minAccuracy?: number;\r\n  }): Promise<string | null> {\r\n    try {\r\n      logger.info('üéØ Selecting optimal model...');\r\n\r\n      const systemResources = await this.systemMonitor.getCurrentResources();\r\n      const availableMemory = systemResources.memory.available;\r\n\r\n      // Filter healthy models that fit in memory\r\n      const viableModels = Array.from(this.availableModels.entries())\r\n        .filter(([modelName, config]) => {\r\n          const healthStatus = this.modelHealthStatus.get(modelName);\r\n          return healthStatus?.isHealthy && \r\n                 config.memoryRequirement <= (availableMemory - 1024); // 1GB buffer\r\n        });\r\n\r\n      if (viableModels.length === 0) {\r\n        logger.warn('‚ö†Ô∏è No viable models found');\r\n        return null;\r\n      }\r\n\r\n      // Score models based on performance history and requirements\r\n      const scoredModels = viableModels.map(([modelName, config]) => {\r\n        const performance = this.modelPerformanceHistory.get(modelName);\r\n        let score = 0;\r\n\r\n        // Base score from model capability (larger models generally better)\r\n        score += config.memoryRequirement / 1000; // Normalize to 0-3 range\r\n\r\n        // Performance history bonus\r\n        if (performance) {\r\n          score += (performance.averageAccuracy / 100) * 2; // 0-2 bonus\r\n          score += (1 / (performance.averageInferenceTime / 1000)) * 1; // Speed bonus\r\n          score += performance.successRate * 1; // Reliability bonus\r\n        }\r\n\r\n        // Apply requirements filters\r\n        if (requirements?.maxMemory && config.memoryRequirement > requirements.maxMemory) {\r\n          score *= 0.5; // Penalty for exceeding memory requirement\r\n        }\r\n\r\n        if (requirements?.maxInferenceTime && performance?.averageInferenceTime > requirements.maxInferenceTime) {\r\n          score *= 0.7; // Penalty for being too slow\r\n        }\r\n\r\n        if (requirements?.minAccuracy && performance?.averageAccuracy < requirements.minAccuracy) {\r\n          score *= 0.3; // Heavy penalty for insufficient accuracy\r\n        }\r\n\r\n        return { modelName, config, score };\r\n      });\r\n\r\n      // Sort by score (highest first)\r\n      scoredModels.sort((a, b) => b.score - a.score);\r\n\r\n      const selectedModel = scoredModels[0];\r\n      logger.info(`üéØ Selected optimal model: ${selectedModel.modelName} (score: ${selectedModel.score.toFixed(2)})`);\r\n\r\n      return selectedModel.modelName;\r\n\r\n    } catch (error) {\r\n      logger.error('‚ùå Error selecting optimal model:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load a specific model into memory\r\n   */\r\n  public async loadModel(modelName: string): Promise<any> {\r\n    try {\r\n      logger.info(`üì• Loading model: ${modelName}...`);\r\n\r\n      // Check if already loaded\r\n      if (this.loadedModels.has(modelName)) {\r\n        logger.info(`‚úÖ Model ${modelName} already loaded`);\r\n        return this.loadedModels.get(modelName);\r\n      }\r\n\r\n      // Get model configuration\r\n      const config = this.availableModels.get(modelName);\r\n      if (!config) {\r\n        throw new Error(`Model ${modelName} not found in available models`);\r\n      }\r\n\r\n      // Check health status\r\n      const healthStatus = this.modelHealthStatus.get(modelName);\r\n      if (!healthStatus?.isHealthy) {\r\n        throw new Error(`Model ${modelName} is not healthy: ${healthStatus?.issues.join(', ')}`);\r\n      }\r\n\r\n      // Check system resources\r\n      const systemResources = await this.systemMonitor.getCurrentResources();\r\n      if (config.memoryRequirement > systemResources.memory.available) {\r\n        throw new Error(`Insufficient memory to load ${modelName}`);\r\n      }\r\n\r\n      // Load the model (mock implementation)\r\n      const modelInstance = await this.loadModelInstance(config);\r\n      \r\n      // Cache the loaded model\r\n      this.loadedModels.set(modelName, modelInstance);\r\n      this.currentActiveModel = modelName;\r\n\r\n      logger.info(`‚úÖ Model ${modelName} loaded successfully`);\r\n      \r\n      this.emit('modelLoaded', { modelName, config });\r\n      \r\n      return modelInstance;\r\n\r\n    } catch (error) {\r\n      logger.error(`‚ùå Failed to load model ${modelName}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load model instance (mock implementation)\r\n   * In production, this would use actual ONNX Runtime\r\n   */\r\n  private async loadModelInstance(config: LLMModelConfig): Promise<any> {\r\n    // Mock model instance\r\n    return {\r\n      config,\r\n      predict: async (input: string): Promise<string> => {\r\n        const startTime = Date.now();\r\n        \r\n        // Simulate inference time based on model complexity\r\n        const inferenceTime = config.memoryRequirement / 2000; // Rough simulation\r\n        await new Promise(resolve => setTimeout(resolve, inferenceTime));\r\n        \r\n        const endTime = Date.now();\r\n        \r\n        // Update performance metrics\r\n        this.updatePerformanceMetrics(config.modelName, endTime - startTime, 0.85); // Mock 85% accuracy\r\n        \r\n        return `Analysis from ${config.modelName}: ${input}`;\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Update performance metrics for a model\r\n   */\r\n  private updatePerformanceMetrics(modelName: string, inferenceTime: number, accuracy: number): void {\r\n    let performance = this.modelPerformanceHistory.get(modelName);\r\n    \r\n    if (!performance) {\r\n      performance = {\r\n        modelName,\r\n        averageInferenceTime: inferenceTime,\r\n        averageAccuracy: accuracy,\r\n        memoryEfficiency: 0,\r\n        cpuEfficiency: 0,\r\n        successRate: 1.0,\r\n        lastUsed: new Date(),\r\n        totalUsageTime: 0\r\n      };\r\n    } else {\r\n      // Update running averages\r\n      performance.averageInferenceTime = (performance.averageInferenceTime + inferenceTime) / 2;\r\n      performance.averageAccuracy = (performance.averageAccuracy + accuracy) / 2;\r\n      performance.lastUsed = new Date();\r\n      performance.totalUsageTime += inferenceTime / 1000; // Convert to seconds\r\n    }\r\n    \r\n    this.modelPerformanceHistory.set(modelName, performance);\r\n  }\r\n\r\n  /**\r\n   * Unload a model from memory\r\n   */\r\n  public async unloadModel(modelName: string): Promise<void> {\r\n    try {\r\n      if (this.loadedModels.has(modelName)) {\r\n        this.loadedModels.delete(modelName);\r\n        \r\n        if (this.currentActiveModel === modelName) {\r\n          this.currentActiveModel = null;\r\n        }\r\n        \r\n        logger.info(`üì§ Model ${modelName} unloaded from memory`);\r\n        \r\n        this.emit('modelUnloaded', { modelName });\r\n      }\r\n      \r\n    } catch (error) {\r\n      logger.error(`‚ùå Error unloading model ${modelName}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get list of available models\r\n   */\r\n  public getAvailableModels(): string[] {\r\n    return Array.from(this.availableModels.keys());\r\n  }\r\n\r\n  /**\r\n   * Get list of loaded models\r\n   */\r\n  public getLoadedModels(): string[] {\r\n    return Array.from(this.loadedModels.keys());\r\n  }\r\n\r\n  /**\r\n   * Get current active model\r\n   */\r\n  public getCurrentActiveModel(): string | null {\r\n    return this.currentActiveModel;\r\n  }\r\n\r\n  /**\r\n   * Get model performance history\r\n   */\r\n  public getModelPerformanceHistory(modelName?: string): ModelPerformanceHistory[] {\r\n    if (modelName) {\r\n      const performance = this.modelPerformanceHistory.get(modelName);\r\n      return performance ? [performance] : [];\r\n    }\r\n    \r\n    return Array.from(this.modelPerformanceHistory.values());\r\n  }\r\n\r\n  /**\r\n   * Get model health status\r\n   */\r\n  public getModelHealthStatus(modelName?: string): ModelHealthStatus[] {\r\n    if (modelName) {\r\n      const health = this.modelHealthStatus.get(modelName);\r\n      return health ? [health] : [];\r\n    }\r\n    \r\n    return Array.from(this.modelHealthStatus.values());\r\n  }\r\n\r\n  /**\r\n   * Save performance history to disk\r\n   */\r\n  public async savePerformanceHistory(): Promise<void> {\r\n    try {\r\n      const historyPath = join(this.modelsDirectory, 'performance_history.json');\r\n      const historyData = Object.fromEntries(this.modelPerformanceHistory);\r\n      \r\n      await fs.writeFile(historyPath, JSON.stringify(historyData, null, 2));\r\n      \r\n      logger.info('üíæ Performance history saved to disk');\r\n      \r\n    } catch (error) {\r\n      logger.error('‚ùå Error saving performance history:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Shutdown the model manager gracefully\r\n   */\r\n  public async shutdown(): Promise<void> {\r\n    try {\r\n      logger.info('üõë Shutting down Model Manager...');\r\n\r\n      // Save performance history\r\n      await this.savePerformanceHistory();\r\n\r\n      // Unload all models\r\n      for (const modelName of this.loadedModels.keys()) {\r\n        await this.unloadModel(modelName);\r\n      }\r\n\r\n      // Clear caches\r\n      this.availableModels.clear();\r\n      this.modelPerformanceHistory.clear();\r\n      this.modelHealthStatus.clear();\r\n\r\n      this.isInitialized = false;\r\n      \r\n      logger.info('‚úÖ Model Manager shutdown completed');\r\n\r\n    } catch (error) {\r\n      logger.error('‚ùå Error during Model Manager shutdown:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\n// Export types\r\nexport type {\r\n  ModelDownloadConfig,\r\n  ModelPerformanceHistory,\r\n  ModelHealthStatus\r\n};\r\n"],"mappings":"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","ignoreList":[]}