{"version":3,"names":["cov_mfsmsf4ax","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","crypto_1","require","logger_1","EncryptionService","DEFAULT_ALGORITHM","DEFAULT_KEY_PARAMS","iterations","saltLength","keyLength","hashAlgorithm","masterKey","constructor","initializeMasterKey","masterKeyHex","process","env","MASTER_ENCRYPTION_KEY","Error","length","Buffer","from","logger","info","error","encryptData","data","password","keyParams","params","salt","randomBytes","key","deriveKey","toString","iv","cipher","createCipherGCM","encrypted","update","concat","final","authTag","getAuthTag","encryptedData","algorithm","timestamp","Date","now","debug","dataLength","decryptData","validateEncryptedData","decipher","createDecipherGCM","setAuthTag","decrypted","plaintext","originalTimestamp","encryptCredentials","credentials","credentialsWithMetadata","_timestamp","_integrity","calculateIntegrityHash","credentialsJson","JSON","stringify","decryptCredentials","encryptedCredentials","parse","expectedIntegrity","age","thirtyDays","warn","Math","floor","generateSecureKey","pbkdf2Sync","sortedKeys","Object","keys","sort","sortedCredentials","map","join","createHash","digest","requiredFields","field","maxAge","secureClear","buffer","fill","getStatus","isInitialized","keyDerivationParams","exports","encryptionService"],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\encryption-service.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * AI CRYPTO TRADING AGENT - MILITARY-GRADE ENCRYPTION SERVICE\r\n * =============================================================================\r\n * \r\n * This service provides military-grade encryption capabilities for protecting\r\n * sensitive trading data, API credentials, and financial information.\r\n * \r\n * CRITICAL SECURITY NOTICE:\r\n * This service protects access to real financial assets and trading capital.\r\n * Any modifications must be thoroughly tested and security audited.\r\n * \r\n * Encryption Standards:\r\n * - AES-256-GCM for symmetric encryption\r\n * - RSA-4096 for asymmetric encryption\r\n * - PBKDF2 with 100,000 iterations for key derivation\r\n * - Cryptographically secure random number generation\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport { createCipherGCM, createDecipherGCM, randomBytes, pbkdf2Sync, createHash } from 'crypto';\r\nimport { logger } from '@/core/logging/logger';\r\n\r\n/**\r\n * Interface for encrypted data structure\r\n * Contains all necessary components for secure decryption\r\n */\r\nexport interface EncryptedData {\r\n  /** Base64 encoded encrypted data */\r\n  encryptedData: string;\r\n  /** Base64 encoded initialization vector */\r\n  iv: string;\r\n  /** Base64 encoded authentication tag */\r\n  authTag: string;\r\n  /** Base64 encoded salt used for key derivation */\r\n  salt: string;\r\n  /** Encryption algorithm used */\r\n  algorithm: string;\r\n  /** Timestamp when encryption was performed */\r\n  timestamp: number;\r\n}\r\n\r\n/**\r\n * Interface for key derivation parameters\r\n * Configures the security parameters for key generation\r\n */\r\nexport interface KeyDerivationParams {\r\n  /** Number of PBKDF2 iterations (minimum 100,000) */\r\n  iterations: number;\r\n  /** Salt length in bytes (minimum 32) */\r\n  saltLength: number;\r\n  /** Derived key length in bytes (32 for AES-256) */\r\n  keyLength: number;\r\n  /** Hash algorithm for PBKDF2 */\r\n  hashAlgorithm: string;\r\n}\r\n\r\n/**\r\n * Military-grade encryption service for protecting sensitive trading data\r\n * Implements industry-standard encryption with additional security measures\r\n */\r\nexport class EncryptionService {\r\n  /** Default encryption algorithm */\r\n  private static readonly DEFAULT_ALGORITHM = 'aes-256-gcm';\r\n  \r\n  /** Default key derivation parameters */\r\n  private static readonly DEFAULT_KEY_PARAMS: KeyDerivationParams = {\r\n    iterations: 100000, // NIST recommended minimum\r\n    saltLength: 32,     // 256 bits\r\n    keyLength: 32,      // 256 bits for AES-256\r\n    hashAlgorithm: 'sha256'\r\n  };\r\n\r\n  /** Master encryption key loaded from environment */\r\n  private masterKey: Buffer | null = null;\r\n\r\n  constructor() {\r\n    // Initialize the encryption service\r\n    this.initializeMasterKey();\r\n  }\r\n\r\n  /**\r\n   * Initialize the master encryption key from environment\r\n   * The master key is used for encrypting other keys and sensitive data\r\n   * \r\n   * @throws Error if master key is not configured or invalid\r\n   */\r\n  private initializeMasterKey(): void {\r\n    try {\r\n      const masterKeyHex = process.env.MASTER_ENCRYPTION_KEY;\r\n      \r\n      if (!masterKeyHex) {\r\n        throw new Error('MASTER_ENCRYPTION_KEY environment variable not set');\r\n      }\r\n      \r\n      // Validate master key length (minimum 64 hex characters = 32 bytes)\r\n      if (masterKeyHex.length < 64) {\r\n        throw new Error('Master encryption key must be at least 32 bytes (64 hex characters)');\r\n      }\r\n      \r\n      // Convert hex string to buffer\r\n      this.masterKey = Buffer.from(masterKeyHex, 'hex');\r\n      \r\n      logger.info('üîê Master encryption key initialized successfully');\r\n      \r\n    } catch (error) {\r\n      logger.error('‚ùå Failed to initialize master encryption key:', error);\r\n      throw new Error('Encryption service initialization failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Encrypt sensitive data using AES-256-GCM with key derivation\r\n   * Provides authenticated encryption with additional data protection\r\n   * \r\n   * @param data - The plaintext data to encrypt\r\n   * @param password - Password for key derivation (optional, uses master key if not provided)\r\n   * @param keyParams - Key derivation parameters (optional, uses defaults)\r\n   * @returns Promise<EncryptedData> The encrypted data structure\r\n   * @throws Error if encryption fails\r\n   */\r\n  public async encryptData(\r\n    data: string,\r\n    password?: string,\r\n    keyParams: Partial<KeyDerivationParams> = {}\r\n  ): Promise<EncryptedData> {\r\n    try {\r\n      // Merge with default parameters\r\n      const params = { ...EncryptionService.DEFAULT_KEY_PARAMS, ...keyParams };\r\n      \r\n      // Generate cryptographically secure random salt\r\n      const salt = randomBytes(params.saltLength);\r\n      \r\n      // Derive encryption key from password or master key\r\n      const key = this.deriveKey(password || this.masterKey!.toString('hex'), salt, params);\r\n      \r\n      // Generate random initialization vector\r\n      const iv = randomBytes(12); // 96 bits for GCM mode\r\n      \r\n      // Create cipher with AES-256-GCM\r\n      const cipher = createCipherGCM(EncryptionService.DEFAULT_ALGORITHM, key, iv);\r\n      \r\n      // Encrypt the data\r\n      let encrypted = cipher.update(data, 'utf8');\r\n      encrypted = Buffer.concat([encrypted, cipher.final()]);\r\n      \r\n      // Get authentication tag\r\n      const authTag = cipher.getAuthTag();\r\n      \r\n      // Create encrypted data structure\r\n      const encryptedData: EncryptedData = {\r\n        encryptedData: encrypted.toString('base64'),\r\n        iv: iv.toString('base64'),\r\n        authTag: authTag.toString('base64'),\r\n        salt: salt.toString('base64'),\r\n        algorithm: EncryptionService.DEFAULT_ALGORITHM,\r\n        timestamp: Date.now()\r\n      };\r\n      \r\n      // Log encryption operation (without sensitive data)\r\n      logger.debug('üîí Data encrypted successfully', {\r\n        algorithm: encryptedData.algorithm,\r\n        dataLength: data.length,\r\n        timestamp: encryptedData.timestamp\r\n      });\r\n      \r\n      return encryptedData;\r\n      \r\n    } catch (error) {\r\n      logger.error('‚ùå Encryption failed:', error);\r\n      throw new Error('Failed to encrypt data');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Decrypt data using AES-256-GCM with authentication verification\r\n   * Verifies data integrity and authenticity before returning plaintext\r\n   * \r\n   * @param encryptedData - The encrypted data structure\r\n   * @param password - Password for key derivation (optional, uses master key if not provided)\r\n   * @returns Promise<string> The decrypted plaintext data\r\n   * @throws Error if decryption fails or authentication verification fails\r\n   */\r\n  public async decryptData(\r\n    encryptedData: EncryptedData,\r\n    password?: string\r\n  ): Promise<string> {\r\n    try {\r\n      // Validate encrypted data structure\r\n      this.validateEncryptedData(encryptedData);\r\n      \r\n      // Convert base64 components back to buffers\r\n      const encrypted = Buffer.from(encryptedData.encryptedData, 'base64');\r\n      const iv = Buffer.from(encryptedData.iv, 'base64');\r\n      const authTag = Buffer.from(encryptedData.authTag, 'base64');\r\n      const salt = Buffer.from(encryptedData.salt, 'base64');\r\n      \r\n      // Derive the same key used for encryption\r\n      const key = this.deriveKey(\r\n        password || this.masterKey!.toString('hex'),\r\n        salt,\r\n        EncryptionService.DEFAULT_KEY_PARAMS\r\n      );\r\n      \r\n      // Create decipher with AES-256-GCM\r\n      const decipher = createDecipherGCM(encryptedData.algorithm, key, iv);\r\n      decipher.setAuthTag(authTag);\r\n      \r\n      // Decrypt the data\r\n      let decrypted = decipher.update(encrypted);\r\n      decrypted = Buffer.concat([decrypted, decipher.final()]);\r\n      \r\n      // Convert to string\r\n      const plaintext = decrypted.toString('utf8');\r\n      \r\n      // Log decryption operation (without sensitive data)\r\n      logger.debug('üîì Data decrypted successfully', {\r\n        algorithm: encryptedData.algorithm,\r\n        dataLength: plaintext.length,\r\n        originalTimestamp: encryptedData.timestamp\r\n      });\r\n      \r\n      return plaintext;\r\n      \r\n    } catch (error) {\r\n      logger.error('‚ùå Decryption failed:', error);\r\n      throw new Error('Failed to decrypt data - data may be corrupted or tampered with');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Encrypt API credentials with additional security measures\r\n   * Specialized encryption for protecting trading API keys and secrets\r\n   * \r\n   * @param credentials - Object containing API credentials\r\n   * @returns Promise<EncryptedData> Encrypted credentials\r\n   */\r\n  public async encryptCredentials(credentials: Record<string, string>): Promise<EncryptedData> {\r\n    try {\r\n      // Add timestamp and integrity hash to credentials\r\n      const credentialsWithMetadata = {\r\n        ...credentials,\r\n        _timestamp: Date.now(),\r\n        _integrity: this.calculateIntegrityHash(credentials)\r\n      };\r\n      \r\n      // Serialize credentials to JSON\r\n      const credentialsJson = JSON.stringify(credentialsWithMetadata);\r\n      \r\n      // Encrypt with additional security parameters\r\n      const encrypted = await this.encryptData(credentialsJson, undefined, {\r\n        iterations: 150000, // Higher iterations for credentials\r\n        saltLength: 64      // Larger salt for credentials\r\n      });\r\n      \r\n      logger.info('üîê API credentials encrypted successfully');\r\n      \r\n      return encrypted;\r\n      \r\n    } catch (error) {\r\n      logger.error('‚ùå Failed to encrypt credentials:', error);\r\n      throw new Error('Credential encryption failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Decrypt API credentials with integrity verification\r\n   * Verifies credential integrity and returns decrypted credentials\r\n   * \r\n   * @param encryptedCredentials - Encrypted credentials data\r\n   * @returns Promise<Record<string, string>> Decrypted credentials\r\n   * @throws Error if decryption fails or integrity check fails\r\n   */\r\n  public async decryptCredentials(\r\n    encryptedCredentials: EncryptedData\r\n  ): Promise<Record<string, string>> {\r\n    try {\r\n      // Decrypt the credentials JSON\r\n      const credentialsJson = await this.decryptData(encryptedCredentials);\r\n      \r\n      // Parse credentials from JSON\r\n      const credentialsWithMetadata = JSON.parse(credentialsJson);\r\n      \r\n      // Extract metadata\r\n      const { _timestamp, _integrity, ...credentials } = credentialsWithMetadata;\r\n      \r\n      // Verify integrity hash\r\n      const expectedIntegrity = this.calculateIntegrityHash(credentials);\r\n      if (_integrity !== expectedIntegrity) {\r\n        throw new Error('Credential integrity verification failed');\r\n      }\r\n      \r\n      // Check credential age (warn if older than 30 days)\r\n      const age = Date.now() - _timestamp;\r\n      const thirtyDays = 30 * 24 * 60 * 60 * 1000;\r\n      \r\n      if (age > thirtyDays) {\r\n        logger.warn('‚ö†Ô∏è Decrypted credentials are older than 30 days', {\r\n          age: Math.floor(age / (24 * 60 * 60 * 1000)),\r\n          timestamp: _timestamp\r\n        });\r\n      }\r\n      \r\n      logger.info('üîì API credentials decrypted and verified successfully');\r\n      \r\n      return credentials;\r\n      \r\n    } catch (error) {\r\n      logger.error('‚ùå Failed to decrypt credentials:', error);\r\n      throw new Error('Credential decryption failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate a cryptographically secure random key\r\n   * Used for generating new encryption keys and secrets\r\n   * \r\n   * @param length - Key length in bytes (default: 32 for AES-256)\r\n   * @returns string Hex-encoded random key\r\n   */\r\n  public generateSecureKey(length: number = 32): string {\r\n    try {\r\n      const key = randomBytes(length);\r\n      return key.toString('hex');\r\n    } catch (error) {\r\n      logger.error('‚ùå Failed to generate secure key:', error);\r\n      throw new Error('Key generation failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Derive encryption key from password using PBKDF2\r\n   * Implements secure key derivation with configurable parameters\r\n   * \r\n   * @param password - Password or master key for derivation\r\n   * @param salt - Cryptographic salt\r\n   * @param params - Key derivation parameters\r\n   * @returns Buffer The derived key\r\n   */\r\n  private deriveKey(password: string, salt: Buffer, params: KeyDerivationParams): Buffer {\r\n    return pbkdf2Sync(password, salt, params.iterations, params.keyLength, params.hashAlgorithm);\r\n  }\r\n\r\n  /**\r\n   * Calculate integrity hash for credential verification\r\n   * Creates a hash of credentials for tamper detection\r\n   * \r\n   * @param credentials - Credentials object to hash\r\n   * @returns string SHA-256 hash of credentials\r\n   */\r\n  private calculateIntegrityHash(credentials: Record<string, string>): string {\r\n    // Sort keys for consistent hashing\r\n    const sortedKeys = Object.keys(credentials).sort();\r\n    const sortedCredentials = sortedKeys.map(key => `${key}:${credentials[key]}`).join('|');\r\n    \r\n    return createHash('sha256').update(sortedCredentials).digest('hex');\r\n  }\r\n\r\n  /**\r\n   * Validate encrypted data structure\r\n   * Ensures all required fields are present and valid\r\n   * \r\n   * @param encryptedData - Encrypted data to validate\r\n   * @throws Error if validation fails\r\n   */\r\n  private validateEncryptedData(encryptedData: EncryptedData): void {\r\n    const requiredFields = ['encryptedData', 'iv', 'authTag', 'salt', 'algorithm', 'timestamp'];\r\n    \r\n    for (const field of requiredFields) {\r\n      if (!(field in encryptedData) || !encryptedData[field as keyof EncryptedData]) {\r\n        throw new Error(`Invalid encrypted data: missing ${field}`);\r\n      }\r\n    }\r\n    \r\n    // Validate algorithm\r\n    if (encryptedData.algorithm !== EncryptionService.DEFAULT_ALGORITHM) {\r\n      throw new Error(`Unsupported encryption algorithm: ${encryptedData.algorithm}`);\r\n    }\r\n    \r\n    // Validate timestamp (not too old or in the future)\r\n    const now = Date.now();\r\n    const maxAge = 365 * 24 * 60 * 60 * 1000; // 1 year\r\n    \r\n    if (encryptedData.timestamp > now + 60000) { // 1 minute future tolerance\r\n      throw new Error('Encrypted data timestamp is in the future');\r\n    }\r\n    \r\n    if (now - encryptedData.timestamp > maxAge) {\r\n      throw new Error('Encrypted data is too old');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Securely clear sensitive data from memory\r\n   * Overwrites memory containing sensitive information\r\n   * \r\n   * @param buffer - Buffer to clear\r\n   */\r\n  public secureClear(buffer: Buffer): void {\r\n    if (buffer && buffer.length > 0) {\r\n      buffer.fill(0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get encryption service status and health information\r\n   * Returns current status for monitoring and diagnostics\r\n   * \r\n   * @returns Object containing service status\r\n   */\r\n  public getStatus(): {\r\n    isInitialized: boolean;\r\n    algorithm: string;\r\n    keyDerivationParams: KeyDerivationParams;\r\n    timestamp: number;\r\n  } {\r\n    return {\r\n      isInitialized: this.masterKey !== null,\r\n      algorithm: EncryptionService.DEFAULT_ALGORITHM,\r\n      keyDerivationParams: EncryptionService.DEFAULT_KEY_PARAMS,\r\n      timestamp: Date.now()\r\n    };\r\n  }\r\n}\r\n\r\n// Create and export singleton instance\r\nexport const encryptionService = new EncryptionService();\r\n\r\n// =============================================================================\r\n// SECURITY NOTES AND BEST PRACTICES\r\n// =============================================================================\r\n// 1. Master key must be stored securely and never logged or exposed\r\n// 2. Use different passwords/keys for different types of data when possible\r\n// 3. Regularly rotate encryption keys and credentials\r\n// 4. Monitor for any encryption/decryption failures as potential security incidents\r\n// 5. Keep encryption libraries and dependencies updated\r\n// 6. Perform regular security audits of encryption implementation\r\n// 7. Use hardware security modules (HSM) in production if available\r\n// 8. Implement proper key escrow and recovery procedures\r\n// ============================================================================="],"mappings":"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","ignoreList":[]}