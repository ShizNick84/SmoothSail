0394061442a54ae55a33da0a03f4549e
"use strict";

/**
 * =============================================================================
 * INTEL NUC PERFORMANCE MONITORING SERVICE
 * =============================================================================
 *
 * This service monitors Intel NUC hardware performance, network connectivity,
 * database performance, and application metrics with comprehensive logging.
 *
 * Features:
 * - Intel NUC hardware monitoring (CPU, RAM, temperature)
 * - Network latency and SSH tunnel performance
 * - Database performance and query timing
 * - Application resource usage tracking
 * - Automated alerting and threshold management
 *
 * @author AI Crypto Trading System
 * @version 1.0.0
 * =============================================================================
 */
/* istanbul ignore next */
function cov_rpxvgdhc3() {
  var path = "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\core\\monitoring\\performance-monitor.ts";
  var hash = "4b20813f6e8b308e08156e309ccbe97268c1a945";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\core\\monitoring\\performance-monitor.ts",
    statementMap: {
      "0": {
        start: {
          line: 21,
          column: 22
        },
        end: {
          line: 23,
          column: 1
        }
      },
      "1": {
        start: {
          line: 22,
          column: 4
        },
        end: {
          line: 22,
          column: 62
        }
      },
      "2": {
        start: {
          line: 24,
          column: 0
        },
        end: {
          line: 24,
          column: 62
        }
      },
      "3": {
        start: {
          line: 25,
          column: 0
        },
        end: {
          line: 25,
          column: 65
        }
      },
      "4": {
        start: {
          line: 26,
          column: 17
        },
        end: {
          line: 26,
          column: 34
        }
      },
      "5": {
        start: {
          line: 27,
          column: 25
        },
        end: {
          line: 27,
          column: 61
        }
      },
      "6": {
        start: {
          line: 28,
          column: 24
        },
        end: {
          line: 28,
          column: 48
        }
      },
      "7": {
        start: {
          line: 29,
          column: 15
        },
        end: {
          line: 29,
          column: 30
        }
      },
      "8": {
        start: {
          line: 30,
          column: 13
        },
        end: {
          line: 30,
          column: 43
        }
      },
      "9": {
        start: {
          line: 31,
          column: 21
        },
        end: {
          line: 31,
          column: 42
        }
      },
      "10": {
        start: {
          line: 32,
          column: 18
        },
        end: {
          line: 32,
          column: 61
        }
      },
      "11": {
        start: {
          line: 38,
          column: 19
        },
        end: {
          line: 38,
          column: 24
        }
      },
      "12": {
        start: {
          line: 41,
          column: 25
        },
        end: {
          line: 41,
          column: 34
        }
      },
      "13": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 43,
          column: 16
        }
      },
      "14": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 52,
          column: 10
        }
      },
      "15": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 61,
          column: 9
        }
      },
      "16": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 59,
          column: 93
        }
      },
      "17": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 19
        }
      },
      "18": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 86,
          column: 9
        }
      },
      "19": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 64,
          column: 48
        }
      },
      "20": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 65,
          column: 37
        }
      },
      "21": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 51
        }
      },
      "22": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 76,
          column: 27
        }
      },
      "23": {
        start: {
          line: 70,
          column: 16
        },
        end: {
          line: 75,
          column: 17
        }
      },
      "24": {
        start: {
          line: 71,
          column: 20
        },
        end: {
          line: 71,
          column: 59
        }
      },
      "25": {
        start: {
          line: 74,
          column: 20
        },
        end: {
          line: 74,
          column: 109
        }
      },
      "26": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 80,
          column: 15
        }
      },
      "27": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 81,
          column: 44
        }
      },
      "28": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 84,
          column: 98
        }
      },
      "29": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 85,
          column: 24
        }
      },
      "30": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 95,
          column: 9
        }
      },
      "31": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 51
        }
      },
      "32": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 94,
          column: 48
        }
      },
      "33": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 96,
          column: 34
        }
      },
      "34": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 97,
          column: 97
        }
      },
      "35": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 98,
          column: 40
        }
      },
      "36": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 188,
          column: 9
        }
      },
      "37": {
        start: {
          line: 105,
          column: 28
        },
        end: {
          line: 105,
          column: 47
        }
      },
      "38": {
        start: {
          line: 106,
          column: 29
        },
        end: {
          line: 106,
          column: 52
        }
      },
      "39": {
        start: {
          line: 108,
          column: 27
        },
        end: {
          line: 108,
          column: 57
        }
      },
      "40": {
        start: {
          line: 109,
          column: 27
        },
        end: {
          line: 109,
          column: 28
        }
      },
      "41": {
        start: {
          line: 110,
          column: 26
        },
        end: {
          line: 110,
          column: 27
        }
      },
      "42": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 120,
          column: 13
        }
      },
      "43": {
        start: {
          line: 112,
          column: 36
        },
        end: {
          line: 112,
          column: 99
        }
      },
      "44": {
        start: {
          line: 113,
          column: 34
        },
        end: {
          line: 113,
          column: 85
        }
      },
      "45": {
        start: {
          line: 114,
          column: 16
        },
        end: {
          line: 116,
          column: 17
        }
      },
      "46": {
        start: {
          line: 115,
          column: 20
        },
        end: {
          line: 115,
          column: 56
        }
      },
      "47": {
        start: {
          line: 122,
          column: 26
        },
        end: {
          line: 122,
          column: 35
        }
      },
      "48": {
        start: {
          line: 123,
          column: 27
        },
        end: {
          line: 123,
          column: 28
        }
      },
      "49": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 135,
          column: 13
        }
      },
      "50": {
        start: {
          line: 125,
          column: 32
        },
        end: {
          line: 125,
          column: 110
        }
      },
      "51": {
        start: {
          line: 126,
          column: 34
        },
        end: {
          line: 126,
          column: 74
        }
      },
      "52": {
        start: {
          line: 127,
          column: 35
        },
        end: {
          line: 127,
          column: 76
        }
      },
      "53": {
        start: {
          line: 128,
          column: 16
        },
        end: {
          line: 129,
          column: 50
        }
      },
      "54": {
        start: {
          line: 129,
          column: 20
        },
        end: {
          line: 129,
          column: 50
        }
      },
      "55": {
        start: {
          line: 130,
          column: 16
        },
        end: {
          line: 131,
          column: 55
        }
      },
      "56": {
        start: {
          line: 131,
          column: 20
        },
        end: {
          line: 131,
          column: 55
        }
      },
      "57": {
        start: {
          line: 137,
          column: 30
        },
        end: {
          line: 137,
          column: 39
        }
      },
      "58": {
        start: {
          line: 138,
          column: 34
        },
        end: {
          line: 138,
          column: 35
        }
      },
      "59": {
        start: {
          line: 139,
          column: 35
        },
        end: {
          line: 139,
          column: 44
        }
      },
      "60": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 154,
          column: 13
        }
      },
      "61": {
        start: {
          line: 141,
          column: 36
        },
        end: {
          line: 141,
          column: 96
        }
      },
      "62": {
        start: {
          line: 142,
          column: 30
        },
        end: {
          line: 142,
          column: 76
        }
      },
      "63": {
        start: {
          line: 143,
          column: 16
        },
        end: {
          line: 150,
          column: 17
        }
      },
      "64": {
        start: {
          line: 144,
          column: 37
        },
        end: {
          line: 144,
          column: 58
        }
      },
      "65": {
        start: {
          line: 145,
          column: 36
        },
        end: {
          line: 145,
          column: 47
        }
      },
      "66": {
        start: {
          line: 146,
          column: 41
        },
        end: {
          line: 146,
          column: 60
        }
      },
      "67": {
        start: {
          line: 147,
          column: 20
        },
        end: {
          line: 147,
          column: 63
        }
      },
      "68": {
        start: {
          line: 148,
          column: 20
        },
        end: {
          line: 148,
          column: 69
        }
      },
      "69": {
        start: {
          line: 149,
          column: 20
        },
        end: {
          line: 149,
          column: 46
        }
      },
      "70": {
        start: {
          line: 156,
          column: 38
        },
        end: {
          line: 156,
          column: 83
        }
      },
      "71": {
        start: {
          line: 157,
          column: 32
        },
        end: {
          line: 157,
          column: 113
        }
      },
      "72": {
        start: {
          line: 157,
          column: 64
        },
        end: {
          line: 157,
          column: 112
        }
      },
      "73": {
        start: {
          line: 158,
          column: 12
        },
        end: {
          line: 180,
          column: 14
        }
      },
      "74": {
        start: {
          line: 181,
          column: 12
        },
        end: {
          line: 184,
          column: 15
        }
      },
      "75": {
        start: {
          line: 187,
          column: 12
        },
        end: {
          line: 187,
          column: 101
        }
      },
      "76": {
        start: {
          line: 194,
          column: 26
        },
        end: {
          line: 194,
          column: 36
        }
      },
      "77": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 196,
          column: 55
        }
      },
      "78": {
        start: {
          line: 198,
          column: 8
        },
        end: {
          line: 198,
          column: 54
        }
      },
      "79": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 200,
          column: 55
        }
      },
      "80": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 202,
          column: 58
        }
      },
      "81": {
        start: {
          line: 208,
          column: 8
        },
        end: {
          line: 257,
          column: 9
        }
      },
      "82": {
        start: {
          line: 210,
          column: 29
        },
        end: {
          line: 210,
          column: 53
        }
      },
      "83": {
        start: {
          line: 212,
          column: 32
        },
        end: {
          line: 212,
          column: 59
        }
      },
      "84": {
        start: {
          line: 214,
          column: 30
        },
        end: {
          line: 214,
          column: 55
        }
      },
      "85": {
        start: {
          line: 216,
          column: 32
        },
        end: {
          line: 216,
          column: 62
        }
      },
      "86": {
        start: {
          line: 218,
          column: 27
        },
        end: {
          line: 223,
          column: 14
        }
      },
      "87": {
        start: {
          line: 224,
          column: 28
        },
        end: {
          line: 238,
          column: 13
        }
      },
      "88": {
        start: {
          line: 239,
          column: 12
        },
        end: {
          line: 239,
          column: 73
        }
      },
      "89": {
        start: {
          line: 241,
          column: 12
        },
        end: {
          line: 241,
          column: 63
        }
      },
      "90": {
        start: {
          line: 242,
          column: 12
        },
        end: {
          line: 242,
          column: 80
        }
      },
      "91": {
        start: {
          line: 243,
          column: 12
        },
        end: {
          line: 243,
          column: 76
        }
      },
      "92": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 246,
          column: 13
        }
      },
      "93": {
        start: {
          line: 245,
          column: 16
        },
        end: {
          line: 245,
          column: 76
        }
      },
      "94": {
        start: {
          line: 248,
          column: 12
        },
        end: {
          line: 253,
          column: 13
        }
      },
      "95": {
        start: {
          line: 249,
          column: 16
        },
        end: {
          line: 249,
          column: 59
        }
      },
      "96": {
        start: {
          line: 251,
          column: 17
        },
        end: {
          line: 253,
          column: 13
        }
      },
      "97": {
        start: {
          line: 252,
          column: 16
        },
        end: {
          line: 252,
          column: 58
        }
      },
      "98": {
        start: {
          line: 256,
          column: 12
        },
        end: {
          line: 256,
          column: 97
        }
      },
      "99": {
        start: {
          line: 263,
          column: 8
        },
        end: {
          line: 298,
          column: 9
        }
      },
      "100": {
        start: {
          line: 265,
          column: 34
        },
        end: {
          line: 265,
          column: 68
        }
      },
      "101": {
        start: {
          line: 267,
          column: 31
        },
        end: {
          line: 267,
          column: 59
        }
      },
      "102": {
        start: {
          line: 269,
          column: 33
        },
        end: {
          line: 269,
          column: 66
        }
      },
      "103": {
        start: {
          line: 270,
          column: 31
        },
        end: {
          line: 270,
          column: 63
        }
      },
      "104": {
        start: {
          line: 271,
          column: 27
        },
        end: {
          line: 272,
          column: 84
        }
      },
      "105": {
        start: {
          line: 273,
          column: 28
        },
        end: {
          line: 286,
          column: 13
        }
      },
      "106": {
        start: {
          line: 287,
          column: 12
        },
        end: {
          line: 287,
          column: 73
        }
      },
      "107": {
        start: {
          line: 289,
          column: 12
        },
        end: {
          line: 289,
          column: 71
        }
      },
      "108": {
        start: {
          line: 290,
          column: 12
        },
        end: {
          line: 290,
          column: 77
        }
      },
      "109": {
        start: {
          line: 291,
          column: 12
        },
        end: {
          line: 291,
          column: 67
        }
      },
      "110": {
        start: {
          line: 292,
          column: 12
        },
        end: {
          line: 294,
          column: 13
        }
      },
      "111": {
        start: {
          line: 293,
          column: 16
        },
        end: {
          line: 293,
          column: 64
        }
      },
      "112": {
        start: {
          line: 297,
          column: 12
        },
        end: {
          line: 297,
          column: 95
        }
      },
      "113": {
        start: {
          line: 304,
          column: 8
        },
        end: {
          line: 339,
          column: 9
        }
      },
      "114": {
        start: {
          line: 306,
          column: 32
        },
        end: {
          line: 306,
          column: 67
        }
      },
      "115": {
        start: {
          line: 308,
          column: 30
        },
        end: {
          line: 308,
          column: 67
        }
      },
      "116": {
        start: {
          line: 310,
          column: 34
        },
        end: {
          line: 310,
          column: 71
        }
      },
      "117": {
        start: {
          line: 311,
          column: 27
        },
        end: {
          line: 312,
          column: 84
        }
      },
      "118": {
        start: {
          line: 313,
          column: 28
        },
        end: {
          line: 325,
          column: 13
        }
      },
      "119": {
        start: {
          line: 326,
          column: 12
        },
        end: {
          line: 326,
          column: 73
        }
      },
      "120": {
        start: {
          line: 328,
          column: 12
        },
        end: {
          line: 328,
          column: 68
        }
      },
      "121": {
        start: {
          line: 329,
          column: 12
        },
        end: {
          line: 329,
          column: 71
        }
      },
      "122": {
        start: {
          line: 330,
          column: 12
        },
        end: {
          line: 332,
          column: 13
        }
      },
      "123": {
        start: {
          line: 331,
          column: 16
        },
        end: {
          line: 331,
          column: 81
        }
      },
      "124": {
        start: {
          line: 333,
          column: 12
        },
        end: {
          line: 335,
          column: 13
        }
      },
      "125": {
        start: {
          line: 334,
          column: 16
        },
        end: {
          line: 334,
          column: 65
        }
      },
      "126": {
        start: {
          line: 338,
          column: 12
        },
        end: {
          line: 338,
          column: 96
        }
      },
      "127": {
        start: {
          line: 345,
          column: 8
        },
        end: {
          line: 377,
          column: 9
        }
      },
      "128": {
        start: {
          line: 346,
          column: 29
        },
        end: {
          line: 346,
          column: 50
        }
      },
      "129": {
        start: {
          line: 347,
          column: 29
        },
        end: {
          line: 347,
          column: 47
        }
      },
      "130": {
        start: {
          line: 349,
          column: 31
        },
        end: {
          line: 349,
          column: 62
        }
      },
      "131": {
        start: {
          line: 350,
          column: 32
        },
        end: {
          line: 350,
          column: 64
        }
      },
      "132": {
        start: {
          line: 351,
          column: 37
        },
        end: {
          line: 351,
          column: 69
        }
      },
      "133": {
        start: {
          line: 352,
          column: 27
        },
        end: {
          line: 353,
          column: 61
        }
      },
      "134": {
        start: {
          line: 354,
          column: 28
        },
        end: {
          line: 366,
          column: 13
        }
      },
      "135": {
        start: {
          line: 367,
          column: 12
        },
        end: {
          line: 367,
          column: 73
        }
      },
      "136": {
        start: {
          line: 369,
          column: 12
        },
        end: {
          line: 369,
          column: 76
        }
      },
      "137": {
        start: {
          line: 370,
          column: 12
        },
        end: {
          line: 370,
          column: 86
        }
      },
      "138": {
        start: {
          line: 371,
          column: 12
        },
        end: {
          line: 373,
          column: 13
        }
      },
      "139": {
        start: {
          line: 372,
          column: 16
        },
        end: {
          line: 372,
          column: 68
        }
      },
      "140": {
        start: {
          line: 376,
          column: 12
        },
        end: {
          line: 376,
          column: 99
        }
      },
      "141": {
        start: {
          line: 383,
          column: 8
        },
        end: {
          line: 394,
          column: 11
        }
      },
      "142": {
        start: {
          line: 384,
          column: 31
        },
        end: {
          line: 384,
          column: 49
        }
      },
      "143": {
        start: {
          line: 385,
          column: 30
        },
        end: {
          line: 385,
          column: 60
        }
      },
      "144": {
        start: {
          line: 386,
          column: 12
        },
        end: {
          line: 393,
          column: 20
        }
      },
      "145": {
        start: {
          line: 387,
          column: 33
        },
        end: {
          line: 387,
          column: 61
        }
      },
      "146": {
        start: {
          line: 388,
          column: 32
        },
        end: {
          line: 388,
          column: 62
        }
      },
      "147": {
        start: {
          line: 389,
          column: 33
        },
        end: {
          line: 389,
          column: 52
        }
      },
      "148": {
        start: {
          line: 390,
          column: 36
        },
        end: {
          line: 390,
          column: 75
        }
      },
      "149": {
        start: {
          line: 391,
          column: 38
        },
        end: {
          line: 391,
          column: 79
        }
      },
      "150": {
        start: {
          line: 392,
          column: 16
        },
        end: {
          line: 392,
          column: 68
        }
      },
      "151": {
        start: {
          line: 400,
          column: 25
        },
        end: {
          line: 400,
          column: 48
        }
      },
      "152": {
        start: {
          line: 401,
          column: 24
        },
        end: {
          line: 401,
          column: 46
        }
      },
      "153": {
        start: {
          line: 402,
          column: 24
        },
        end: {
          line: 402,
          column: 42
        }
      },
      "154": {
        start: {
          line: 403,
          column: 23
        },
        end: {
          line: 403,
          column: 24
        }
      },
      "155": {
        start: {
          line: 404,
          column: 8
        },
        end: {
          line: 413,
          column: 9
        }
      },
      "156": {
        start: {
          line: 405,
          column: 29
        },
        end: {
          line: 405,
          column: 64
        }
      },
      "157": {
        start: {
          line: 406,
          column: 30
        },
        end: {
          line: 406,
          column: 74
        }
      },
      "158": {
        start: {
          line: 407,
          column: 12
        },
        end: {
          line: 409,
          column: 13
        }
      },
      "159": {
        start: {
          line: 408,
          column: 16
        },
        end: {
          line: 408,
          column: 57
        }
      },
      "160": {
        start: {
          line: 414,
          column: 8
        },
        end: {
          line: 419,
          column: 10
        }
      },
      "161": {
        start: {
          line: 425,
          column: 8
        },
        end: {
          line: 447,
          column: 9
        }
      },
      "162": {
        start: {
          line: 426,
          column: 29
        },
        end: {
          line: 426,
          column: 65
        }
      },
      "163": {
        start: {
          line: 427,
          column: 26
        },
        end: {
          line: 427,
          column: 61
        }
      },
      "164": {
        start: {
          line: 428,
          column: 26
        },
        end: {
          line: 428,
          column: 57
        }
      },
      "165": {
        start: {
          line: 429,
          column: 25
        },
        end: {
          line: 429,
          column: 56
        }
      },
      "166": {
        start: {
          line: 430,
          column: 31
        },
        end: {
          line: 430,
          column: 68
        }
      },
      "167": {
        start: {
          line: 432,
          column: 23
        },
        end: {
          line: 432,
          column: 24
        }
      },
      "168": {
        start: {
          line: 433,
          column: 12
        },
        end: {
          line: 442,
          column: 13
        }
      },
      "169": {
        start: {
          line: 434,
          column: 31
        },
        end: {
          line: 434,
          column: 86
        }
      },
      "170": {
        start: {
          line: 435,
          column: 32
        },
        end: {
          line: 435,
          column: 80
        }
      },
      "171": {
        start: {
          line: 436,
          column: 16
        },
        end: {
          line: 438,
          column: 17
        }
      },
      "172": {
        start: {
          line: 437,
          column: 20
        },
        end: {
          line: 437,
          column: 75
        }
      },
      "173": {
        start: {
          line: 443,
          column: 12
        },
        end: {
          line: 443,
          column: 53
        }
      },
      "174": {
        start: {
          line: 446,
          column: 12
        },
        end: {
          line: 446,
          column: 56
        }
      },
      "175": {
        start: {
          line: 453,
          column: 8
        },
        end: {
          line: 480,
          column: 9
        }
      },
      "176": {
        start: {
          line: 455,
          column: 28
        },
        end: {
          line: 459,
          column: 13
        }
      },
      "177": {
        start: {
          line: 460,
          column: 12
        },
        end: {
          line: 475,
          column: 13
        }
      },
      "178": {
        start: {
          line: 461,
          column: 16
        },
        end: {
          line: 474,
          column: 17
        }
      },
      "179": {
        start: {
          line: 462,
          column: 35
        },
        end: {
          line: 462,
          column: 58
        }
      },
      "180": {
        start: {
          line: 463,
          column: 33
        },
        end: {
          line: 463,
          column: 65
        }
      },
      "181": {
        start: {
          line: 465,
          column: 20
        },
        end: {
          line: 467,
          column: 21
        }
      },
      "182": {
        start: {
          line: 466,
          column: 24
        },
        end: {
          line: 466,
          column: 43
        }
      },
      "183": {
        start: {
          line: 468,
          column: 20
        },
        end: {
          line: 470,
          column: 21
        }
      },
      "184": {
        start: {
          line: 469,
          column: 24
        },
        end: {
          line: 469,
          column: 36
        }
      },
      "185": {
        start: {
          line: 473,
          column: 20
        },
        end: {
          line: 473,
          column: 29
        }
      },
      "186": {
        start: {
          line: 476,
          column: 12
        },
        end: {
          line: 476,
          column: 21
        }
      },
      "187": {
        start: {
          line: 479,
          column: 12
        },
        end: {
          line: 479,
          column: 21
        }
      },
      "188": {
        start: {
          line: 486,
          column: 8
        },
        end: {
          line: 494,
          column: 9
        }
      },
      "189": {
        start: {
          line: 487,
          column: 30
        },
        end: {
          line: 487,
          column: 60
        }
      },
      "190": {
        start: {
          line: 488,
          column: 12
        },
        end: {
          line: 488,
          column: 91
        }
      },
      "191": {
        start: {
          line: 489,
          column: 28
        },
        end: {
          line: 489,
          column: 58
        }
      },
      "192": {
        start: {
          line: 490,
          column: 12
        },
        end: {
          line: 490,
          column: 39
        }
      },
      "193": {
        start: {
          line: 493,
          column: 12
        },
        end: {
          line: 493,
          column: 23
        }
      },
      "194": {
        start: {
          line: 500,
          column: 8
        },
        end: {
          line: 509,
          column: 9
        }
      },
      "195": {
        start: {
          line: 501,
          column: 30
        },
        end: {
          line: 501,
          column: 60
        }
      },
      "196": {
        start: {
          line: 503,
          column: 12
        },
        end: {
          line: 503,
          column: 66
        }
      },
      "197": {
        start: {
          line: 503,
          column: 41
        },
        end: {
          line: 503,
          column: 64
        }
      },
      "198": {
        start: {
          line: 504,
          column: 28
        },
        end: {
          line: 504,
          column: 58
        }
      },
      "199": {
        start: {
          line: 505,
          column: 12
        },
        end: {
          line: 505,
          column: 39
        }
      },
      "200": {
        start: {
          line: 508,
          column: 12
        },
        end: {
          line: 508,
          column: 23
        }
      },
      "201": {
        start: {
          line: 515,
          column: 8
        },
        end: {
          line: 528,
          column: 9
        }
      },
      "202": {
        start: {
          line: 517,
          column: 28
        },
        end: {
          line: 517,
          column: 85
        }
      },
      "203": {
        start: {
          line: 518,
          column: 32
        },
        end: {
          line: 518,
          column: 68
        }
      },
      "204": {
        start: {
          line: 520,
          column: 12
        },
        end: {
          line: 524,
          column: 14
        }
      },
      "205": {
        start: {
          line: 527,
          column: 12
        },
        end: {
          line: 527,
          column: 67
        }
      },
      "206": {
        start: {
          line: 534,
          column: 8
        },
        end: {
          line: 540,
          column: 9
        }
      },
      "207": {
        start: {
          line: 536,
          column: 12
        },
        end: {
          line: 536,
          column: 21
        }
      },
      "208": {
        start: {
          line: 539,
          column: 12
        },
        end: {
          line: 539,
          column: 21
        }
      },
      "209": {
        start: {
          line: 546,
          column: 8
        },
        end: {
          line: 555,
          column: 9
        }
      },
      "210": {
        start: {
          line: 547,
          column: 30
        },
        end: {
          line: 547,
          column: 60
        }
      },
      "211": {
        start: {
          line: 549,
          column: 12
        },
        end: {
          line: 549,
          column: 65
        }
      },
      "212": {
        start: {
          line: 549,
          column: 41
        },
        end: {
          line: 549,
          column: 63
        }
      },
      "213": {
        start: {
          line: 550,
          column: 28
        },
        end: {
          line: 550,
          column: 58
        }
      },
      "214": {
        start: {
          line: 551,
          column: 12
        },
        end: {
          line: 551,
          column: 39
        }
      },
      "215": {
        start: {
          line: 554,
          column: 12
        },
        end: {
          line: 554,
          column: 23
        }
      },
      "216": {
        start: {
          line: 561,
          column: 8
        },
        end: {
          line: 567,
          column: 9
        }
      },
      "217": {
        start: {
          line: 563,
          column: 12
        },
        end: {
          line: 563,
          column: 24
        }
      },
      "218": {
        start: {
          line: 566,
          column: 12
        },
        end: {
          line: 566,
          column: 21
        }
      },
      "219": {
        start: {
          line: 573,
          column: 22
        },
        end: {
          line: 573,
          column: 75
        }
      },
      "220": {
        start: {
          line: 574,
          column: 22
        },
        end: {
          line: 574,
          column: 59
        }
      },
      "221": {
        start: {
          line: 575,
          column: 8
        },
        end: {
          line: 576,
          column: 21
        }
      },
      "222": {
        start: {
          line: 576,
          column: 12
        },
        end: {
          line: 576,
          column: 21
        }
      },
      "223": {
        start: {
          line: 577,
          column: 22
        },
        end: {
          line: 577,
          column: 42
        }
      },
      "224": {
        start: {
          line: 578,
          column: 21
        },
        end: {
          line: 578,
          column: 29
        }
      },
      "225": {
        start: {
          line: 579,
          column: 8
        },
        end: {
          line: 579,
          column: 42
        }
      },
      "226": {
        start: {
          line: 585,
          column: 51
        },
        end: {
          line: 585,
          column: 58
        }
      },
      "227": {
        start: {
          line: 586,
          column: 8
        },
        end: {
          line: 591,
          column: 9
        }
      },
      "228": {
        start: {
          line: 590,
          column: 12
        },
        end: {
          line: 590,
          column: 30
        }
      },
      "229": {
        start: {
          line: 592,
          column: 8
        },
        end: {
          line: 597,
          column: 9
        }
      },
      "230": {
        start: {
          line: 596,
          column: 12
        },
        end: {
          line: 596,
          column: 29
        }
      },
      "231": {
        start: {
          line: 598,
          column: 8
        },
        end: {
          line: 598,
          column: 25
        }
      },
      "232": {
        start: {
          line: 604,
          column: 24
        },
        end: {
          line: 604,
          column: 65
        }
      },
      "233": {
        start: {
          line: 605,
          column: 8
        },
        end: {
          line: 605,
          column: 28
        }
      },
      "234": {
        start: {
          line: 607,
          column: 8
        },
        end: {
          line: 609,
          column: 9
        }
      },
      "235": {
        start: {
          line: 608,
          column: 12
        },
        end: {
          line: 608,
          column: 28
        }
      },
      "236": {
        start: {
          line: 610,
          column: 8
        },
        end: {
          line: 610,
          column: 53
        }
      },
      "237": {
        start: {
          line: 616,
          column: 8
        },
        end: {
          line: 616,
          column: 59
        }
      },
      "238": {
        start: {
          line: 622,
          column: 8
        },
        end: {
          line: 622,
          column: 67
        }
      },
      "239": {
        start: {
          line: 623,
          column: 8
        },
        end: {
          line: 626,
          column: 11
        }
      },
      "240": {
        start: {
          line: 632,
          column: 8
        },
        end: {
          line: 632,
          column: 33
        }
      },
      "241": {
        start: {
          line: 638,
          column: 8
        },
        end: {
          line: 638,
          column: 33
        }
      },
      "242": {
        start: {
          line: 641,
          column: 0
        },
        end: {
          line: 641,
          column: 48
        }
      },
      "243": {
        start: {
          line: 643,
          column: 0
        },
        end: {
          line: 643,
          column: 54
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 21,
            column: 56
          },
          end: {
            line: 21,
            column: 57
          }
        },
        loc: {
          start: {
            line: 21,
            column: 71
          },
          end: {
            line: 23,
            column: 1
          }
        },
        line: 21
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 42,
            column: 4
          },
          end: {
            line: 42,
            column: 5
          }
        },
        loc: {
          start: {
            line: 42,
            column: 18
          },
          end: {
            line: 53,
            column: 5
          }
        },
        line: 42
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 57,
            column: 4
          },
          end: {
            line: 57,
            column: 5
          }
        },
        loc: {
          start: {
            line: 57,
            column: 46
          },
          end: {
            line: 87,
            column: 5
          }
        },
        line: 57
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 69,
            column: 50
          },
          end: {
            line: 69,
            column: 51
          }
        },
        loc: {
          start: {
            line: 69,
            column: 62
          },
          end: {
            line: 76,
            column: 13
          }
        },
        line: 69
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 91,
            column: 4
          },
          end: {
            line: 91,
            column: 5
          }
        },
        loc: {
          start: {
            line: 91,
            column: 21
          },
          end: {
            line: 99,
            column: 5
          }
        },
        line: 91
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 103,
            column: 4
          },
          end: {
            line: 103,
            column: 5
          }
        },
        loc: {
          start: {
            line: 103,
            column: 35
          },
          end: {
            line: 189,
            column: 5
          }
        },
        line: 103
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 157,
            column: 55
          },
          end: {
            line: 157,
            column: 56
          }
        },
        loc: {
          start: {
            line: 157,
            column: 64
          },
          end: {
            line: 157,
            column: 112
          }
        },
        line: 157
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 193,
            column: 4
          },
          end: {
            line: 193,
            column: 5
          }
        },
        loc: {
          start: {
            line: 193,
            column: 38
          },
          end: {
            line: 203,
            column: 5
          }
        },
        line: 193
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 207,
            column: 4
          },
          end: {
            line: 207,
            column: 5
          }
        },
        loc: {
          start: {
            line: 207,
            column: 46
          },
          end: {
            line: 258,
            column: 5
          }
        },
        line: 207
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 262,
            column: 4
          },
          end: {
            line: 262,
            column: 5
          }
        },
        loc: {
          start: {
            line: 262,
            column: 45
          },
          end: {
            line: 299,
            column: 5
          }
        },
        line: 262
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 303,
            column: 4
          },
          end: {
            line: 303,
            column: 5
          }
        },
        loc: {
          start: {
            line: 303,
            column: 46
          },
          end: {
            line: 340,
            column: 5
          }
        },
        line: 303
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 344,
            column: 4
          },
          end: {
            line: 344,
            column: 5
          }
        },
        loc: {
          start: {
            line: 344,
            column: 49
          },
          end: {
            line: 378,
            column: 5
          }
        },
        line: 344
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 382,
            column: 4
          },
          end: {
            line: 382,
            column: 5
          }
        },
        loc: {
          start: {
            line: 382,
            column: 24
          },
          end: {
            line: 395,
            column: 5
          }
        },
        line: 382
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 383,
            column: 27
          },
          end: {
            line: 383,
            column: 28
          }
        },
        loc: {
          start: {
            line: 383,
            column: 40
          },
          end: {
            line: 394,
            column: 9
          }
        },
        line: 383
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 386,
            column: 23
          },
          end: {
            line: 386,
            column: 24
          }
        },
        loc: {
          start: {
            line: 386,
            column: 29
          },
          end: {
            line: 393,
            column: 13
          }
        },
        line: 386
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 399,
            column: 4
          },
          end: {
            line: 399,
            column: 5
          }
        },
        loc: {
          start: {
            line: 399,
            column: 27
          },
          end: {
            line: 420,
            column: 5
          }
        },
        line: 399
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 424,
            column: 4
          },
          end: {
            line: 424,
            column: 5
          }
        },
        loc: {
          start: {
            line: 424,
            column: 25
          },
          end: {
            line: 448,
            column: 5
          }
        },
        line: 424
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 452,
            column: 4
          },
          end: {
            line: 452,
            column: 5
          }
        },
        loc: {
          start: {
            line: 452,
            column: 30
          },
          end: {
            line: 481,
            column: 5
          }
        },
        line: 452
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 485,
            column: 4
          },
          end: {
            line: 485,
            column: 5
          }
        },
        loc: {
          start: {
            line: 485,
            column: 34
          },
          end: {
            line: 495,
            column: 5
          }
        },
        line: 485
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 499,
            column: 4
          },
          end: {
            line: 499,
            column: 5
          }
        },
        loc: {
          start: {
            line: 499,
            column: 28
          },
          end: {
            line: 510,
            column: 5
          }
        },
        line: 499
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 503,
            column: 30
          },
          end: {
            line: 503,
            column: 31
          }
        },
        loc: {
          start: {
            line: 503,
            column: 41
          },
          end: {
            line: 503,
            column: 64
          }
        },
        line: 503
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 514,
            column: 4
          },
          end: {
            line: 514,
            column: 5
          }
        },
        loc: {
          start: {
            line: 514,
            column: 33
          },
          end: {
            line: 529,
            column: 5
          }
        },
        line: 514
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 533,
            column: 4
          },
          end: {
            line: 533,
            column: 5
          }
        },
        loc: {
          start: {
            line: 533,
            column: 35
          },
          end: {
            line: 541,
            column: 5
          }
        },
        line: 533
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 545,
            column: 4
          },
          end: {
            line: 545,
            column: 5
          }
        },
        loc: {
          start: {
            line: 545,
            column: 37
          },
          end: {
            line: 556,
            column: 5
          }
        },
        line: 545
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 549,
            column: 30
          },
          end: {
            line: 549,
            column: 31
          }
        },
        loc: {
          start: {
            line: 549,
            column: 41
          },
          end: {
            line: 549,
            column: 63
          }
        },
        line: 549
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 560,
            column: 4
          },
          end: {
            line: 560,
            column: 5
          }
        },
        loc: {
          start: {
            line: 560,
            column: 37
          },
          end: {
            line: 568,
            column: 5
          }
        },
        line: 560
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 572,
            column: 4
          },
          end: {
            line: 572,
            column: 5
          }
        },
        loc: {
          start: {
            line: 572,
            column: 30
          },
          end: {
            line: 580,
            column: 5
          }
        },
        line: 572
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 584,
            column: 4
          },
          end: {
            line: 584,
            column: 5
          }
        },
        loc: {
          start: {
            line: 584,
            column: 35
          },
          end: {
            line: 599,
            column: 5
          }
        },
        line: 584
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 603,
            column: 4
          },
          end: {
            line: 603,
            column: 5
          }
        },
        loc: {
          start: {
            line: 603,
            column: 42
          },
          end: {
            line: 611,
            column: 5
          }
        },
        line: 603
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 615,
            column: 4
          },
          end: {
            line: 615,
            column: 5
          }
        },
        loc: {
          start: {
            line: 615,
            column: 28
          },
          end: {
            line: 617,
            column: 5
          }
        },
        line: 615
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 621,
            column: 4
          },
          end: {
            line: 621,
            column: 5
          }
        },
        loc: {
          start: {
            line: 621,
            column: 36
          },
          end: {
            line: 627,
            column: 5
          }
        },
        line: 621
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 631,
            column: 4
          },
          end: {
            line: 631,
            column: 5
          }
        },
        loc: {
          start: {
            line: 631,
            column: 22
          },
          end: {
            line: 633,
            column: 5
          }
        },
        line: 631
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 637,
            column: 4
          },
          end: {
            line: 637,
            column: 5
          }
        },
        loc: {
          start: {
            line: 637,
            column: 25
          },
          end: {
            line: 639,
            column: 5
          }
        },
        line: 637
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 21,
            column: 22
          },
          end: {
            line: 23,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 21,
            column: 23
          },
          end: {
            line: 21,
            column: 27
          }
        }, {
          start: {
            line: 21,
            column: 31
          },
          end: {
            line: 21,
            column: 51
          }
        }, {
          start: {
            line: 21,
            column: 56
          },
          end: {
            line: 23,
            column: 1
          }
        }],
        line: 21
      },
      "1": {
        loc: {
          start: {
            line: 22,
            column: 11
          },
          end: {
            line: 22,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 22,
            column: 37
          },
          end: {
            line: 22,
            column: 40
          }
        }, {
          start: {
            line: 22,
            column: 43
          },
          end: {
            line: 22,
            column: 61
          }
        }],
        line: 22
      },
      "2": {
        loc: {
          start: {
            line: 22,
            column: 12
          },
          end: {
            line: 22,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 22,
            column: 12
          },
          end: {
            line: 22,
            column: 15
          }
        }, {
          start: {
            line: 22,
            column: 19
          },
          end: {
            line: 22,
            column: 33
          }
        }],
        line: 22
      },
      "3": {
        loc: {
          start: {
            line: 57,
            column: 26
          },
          end: {
            line: 57,
            column: 44
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 57,
            column: 39
          },
          end: {
            line: 57,
            column: 44
          }
        }],
        line: 57
      },
      "4": {
        loc: {
          start: {
            line: 58,
            column: 8
          },
          end: {
            line: 61,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 58,
            column: 8
          },
          end: {
            line: 61,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 58
      },
      "5": {
        loc: {
          start: {
            line: 92,
            column: 8
          },
          end: {
            line: 95,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 92,
            column: 8
          },
          end: {
            line: 95,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 92
      },
      "6": {
        loc: {
          start: {
            line: 108,
            column: 27
          },
          end: {
            line: 108,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 108,
            column: 27
          },
          end: {
            line: 108,
            column: 44
          }
        }, {
          start: {
            line: 108,
            column: 48
          },
          end: {
            line: 108,
            column: 57
          }
        }],
        line: 108
      },
      "7": {
        loc: {
          start: {
            line: 114,
            column: 16
          },
          end: {
            line: 116,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 114,
            column: 16
          },
          end: {
            line: 116,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 114
      },
      "8": {
        loc: {
          start: {
            line: 128,
            column: 16
          },
          end: {
            line: 129,
            column: 50
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 128,
            column: 16
          },
          end: {
            line: 129,
            column: 50
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 128
      },
      "9": {
        loc: {
          start: {
            line: 130,
            column: 16
          },
          end: {
            line: 131,
            column: 55
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 130,
            column: 16
          },
          end: {
            line: 131,
            column: 55
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 130
      },
      "10": {
        loc: {
          start: {
            line: 143,
            column: 16
          },
          end: {
            line: 150,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 143,
            column: 16
          },
          end: {
            line: 150,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 143
      },
      "11": {
        loc: {
          start: {
            line: 147,
            column: 34
          },
          end: {
            line: 147,
            column: 62
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 147,
            column: 49
          },
          end: {
            line: 147,
            column: 54
          }
        }, {
          start: {
            line: 147,
            column: 57
          },
          end: {
            line: 147,
            column: 62
          }
        }],
        line: 147
      },
      "12": {
        loc: {
          start: {
            line: 157,
            column: 64
          },
          end: {
            line: 157,
            column: 112
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 157,
            column: 64
          },
          end: {
            line: 157,
            column: 86
          }
        }, {
          start: {
            line: 157,
            column: 90
          },
          end: {
            line: 157,
            column: 112
          }
        }],
        line: 157
      },
      "13": {
        loc: {
          start: {
            line: 164,
            column: 34
          },
          end: {
            line: 164,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 164,
            column: 34
          },
          end: {
            line: 164,
            column: 41
          }
        }, {
          start: {
            line: 164,
            column: 45
          },
          end: {
            line: 164,
            column: 53
          }
        }],
        line: 164
      },
      "14": {
        loc: {
          start: {
            line: 244,
            column: 12
          },
          end: {
            line: 246,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 244,
            column: 12
          },
          end: {
            line: 246,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 244
      },
      "15": {
        loc: {
          start: {
            line: 248,
            column: 12
          },
          end: {
            line: 253,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 248,
            column: 12
          },
          end: {
            line: 253,
            column: 13
          }
        }, {
          start: {
            line: 251,
            column: 17
          },
          end: {
            line: 253,
            column: 13
          }
        }],
        line: 248
      },
      "16": {
        loc: {
          start: {
            line: 251,
            column: 17
          },
          end: {
            line: 253,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 251,
            column: 17
          },
          end: {
            line: 253,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 251
      },
      "17": {
        loc: {
          start: {
            line: 271,
            column: 27
          },
          end: {
            line: 272,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 271,
            column: 75
          },
          end: {
            line: 271,
            column: 85
          }
        }, {
          start: {
            line: 272,
            column: 16
          },
          end: {
            line: 272,
            column: 84
          }
        }],
        line: 271
      },
      "18": {
        loc: {
          start: {
            line: 272,
            column: 16
          },
          end: {
            line: 272,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 272,
            column: 63
          },
          end: {
            line: 272,
            column: 72
          }
        }, {
          start: {
            line: 272,
            column: 75
          },
          end: {
            line: 272,
            column: 84
          }
        }],
        line: 272
      },
      "19": {
        loc: {
          start: {
            line: 292,
            column: 12
          },
          end: {
            line: 294,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 292,
            column: 12
          },
          end: {
            line: 294,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 292
      },
      "20": {
        loc: {
          start: {
            line: 311,
            column: 27
          },
          end: {
            line: 312,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 311,
            column: 75
          },
          end: {
            line: 311,
            column: 85
          }
        }, {
          start: {
            line: 312,
            column: 16
          },
          end: {
            line: 312,
            column: 84
          }
        }],
        line: 311
      },
      "21": {
        loc: {
          start: {
            line: 312,
            column: 16
          },
          end: {
            line: 312,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 312,
            column: 63
          },
          end: {
            line: 312,
            column: 72
          }
        }, {
          start: {
            line: 312,
            column: 75
          },
          end: {
            line: 312,
            column: 84
          }
        }],
        line: 312
      },
      "22": {
        loc: {
          start: {
            line: 330,
            column: 12
          },
          end: {
            line: 332,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 330,
            column: 12
          },
          end: {
            line: 332,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 330
      },
      "23": {
        loc: {
          start: {
            line: 333,
            column: 12
          },
          end: {
            line: 335,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 333,
            column: 12
          },
          end: {
            line: 335,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 333
      },
      "24": {
        loc: {
          start: {
            line: 352,
            column: 27
          },
          end: {
            line: 353,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 352,
            column: 51
          },
          end: {
            line: 352,
            column: 61
          }
        }, {
          start: {
            line: 353,
            column: 16
          },
          end: {
            line: 353,
            column: 61
          }
        }],
        line: 352
      },
      "25": {
        loc: {
          start: {
            line: 353,
            column: 16
          },
          end: {
            line: 353,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 353,
            column: 40
          },
          end: {
            line: 353,
            column: 49
          }
        }, {
          start: {
            line: 353,
            column: 52
          },
          end: {
            line: 353,
            column: 61
          }
        }],
        line: 353
      },
      "26": {
        loc: {
          start: {
            line: 371,
            column: 12
          },
          end: {
            line: 373,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 371,
            column: 12
          },
          end: {
            line: 373,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 371
      },
      "27": {
        loc: {
          start: {
            line: 407,
            column: 12
          },
          end: {
            line: 409,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 407,
            column: 12
          },
          end: {
            line: 409,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 407
      },
      "28": {
        loc: {
          start: {
            line: 436,
            column: 16
          },
          end: {
            line: 438,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 436,
            column: 16
          },
          end: {
            line: 438,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 436
      },
      "29": {
        loc: {
          start: {
            line: 465,
            column: 20
          },
          end: {
            line: 467,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 465,
            column: 20
          },
          end: {
            line: 467,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 465
      },
      "30": {
        loc: {
          start: {
            line: 468,
            column: 20
          },
          end: {
            line: 470,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 468,
            column: 20
          },
          end: {
            line: 470,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 468
      },
      "31": {
        loc: {
          start: {
            line: 468,
            column: 24
          },
          end: {
            line: 468,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 468,
            column: 24
          },
          end: {
            line: 468,
            column: 32
          }
        }, {
          start: {
            line: 468,
            column: 36
          },
          end: {
            line: 468,
            column: 46
          }
        }],
        line: 468
      },
      "32": {
        loc: {
          start: {
            line: 518,
            column: 32
          },
          end: {
            line: 518,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 518,
            column: 32
          },
          end: {
            line: 518,
            column: 63
          }
        }, {
          start: {
            line: 518,
            column: 67
          },
          end: {
            line: 518,
            column: 68
          }
        }],
        line: 518
      },
      "33": {
        loc: {
          start: {
            line: 575,
            column: 8
          },
          end: {
            line: 576,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 575,
            column: 8
          },
          end: {
            line: 576,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 575
      },
      "34": {
        loc: {
          start: {
            line: 579,
            column: 24
          },
          end: {
            line: 579,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 579,
            column: 24
          },
          end: {
            line: 579,
            column: 35
          }
        }, {
          start: {
            line: 579,
            column: 39
          },
          end: {
            line: 579,
            column: 40
          }
        }],
        line: 579
      },
      "35": {
        loc: {
          start: {
            line: 586,
            column: 8
          },
          end: {
            line: 591,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 586,
            column: 8
          },
          end: {
            line: 591,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 586
      },
      "36": {
        loc: {
          start: {
            line: 586,
            column: 12
          },
          end: {
            line: 589,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 586,
            column: 12
          },
          end: {
            line: 586,
            column: 46
          }
        }, {
          start: {
            line: 587,
            column: 12
          },
          end: {
            line: 587,
            column: 52
          }
        }, {
          start: {
            line: 588,
            column: 12
          },
          end: {
            line: 588,
            column: 48
          }
        }, {
          start: {
            line: 589,
            column: 12
          },
          end: {
            line: 589,
            column: 62
          }
        }],
        line: 586
      },
      "37": {
        loc: {
          start: {
            line: 592,
            column: 8
          },
          end: {
            line: 597,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 592,
            column: 8
          },
          end: {
            line: 597,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 592
      },
      "38": {
        loc: {
          start: {
            line: 592,
            column: 12
          },
          end: {
            line: 595,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 592,
            column: 12
          },
          end: {
            line: 592,
            column: 45
          }
        }, {
          start: {
            line: 593,
            column: 12
          },
          end: {
            line: 593,
            column: 51
          }
        }, {
          start: {
            line: 594,
            column: 12
          },
          end: {
            line: 594,
            column: 47
          }
        }, {
          start: {
            line: 595,
            column: 12
          },
          end: {
            line: 595,
            column: 61
          }
        }],
        line: 592
      },
      "39": {
        loc: {
          start: {
            line: 604,
            column: 24
          },
          end: {
            line: 604,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 604,
            column: 24
          },
          end: {
            line: 604,
            column: 59
          }
        }, {
          start: {
            line: 604,
            column: 63
          },
          end: {
            line: 604,
            column: 65
          }
        }],
        line: 604
      },
      "40": {
        loc: {
          start: {
            line: 607,
            column: 8
          },
          end: {
            line: 609,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 607,
            column: 8
          },
          end: {
            line: 609,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 607
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0, 0, 0],
      "37": [0, 0],
      "38": [0, 0, 0, 0],
      "39": [0, 0],
      "40": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\core\\monitoring\\performance-monitor.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\core\\monitoring\\performance-monitor.ts"],
      sourcesContent: ["/**\r\n * =============================================================================\r\n * INTEL NUC PERFORMANCE MONITORING SERVICE\r\n * =============================================================================\r\n * \r\n * This service monitors Intel NUC hardware performance, network connectivity,\r\n * database performance, and application metrics with comprehensive logging.\r\n * \r\n * Features:\r\n * - Intel NUC hardware monitoring (CPU, RAM, temperature)\r\n * - Network latency and SSH tunnel performance\r\n * - Database performance and query timing\r\n * - Application resource usage tracking\r\n * - Automated alerting and threshold management\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * =============================================================================\r\n */\r\n\r\nimport { EventEmitter } from 'events';\r\nimport { tradingLogger, SystemPerformanceContext } from '../logging/trading-logger';\r\nimport { execSync, exec } from 'child_process';\r\nimport { promisify } from 'util';\r\nimport os from 'os';\r\nimport fs from 'fs/promises';\r\nimport { performance } from 'perf_hooks';\r\n\r\nconst execAsync = promisify(exec);\r\n\r\n/**\r\n * Performance thresholds interface\r\n */\r\ninterface PerformanceThresholds {\r\n  cpu: { warning: number; critical: number };\r\n  memory: { warning: number; critical: number };\r\n  disk: { warning: number; critical: number };\r\n  temperature: { warning: number; critical: number };\r\n  network: { warning: number; critical: number };\r\n  database: { warning: number; critical: number };\r\n}\r\n\r\n/**\r\n * Hardware information interface\r\n */\r\ninterface HardwareInfo {\r\n  cpu: {\r\n    model: string;\r\n    cores: number;\r\n    threads: number;\r\n    baseFrequency: number;\r\n    maxFrequency: number;\r\n  };\r\n  memory: {\r\n    total: number;\r\n    type: string;\r\n    speed: number;\r\n  };\r\n  storage: {\r\n    type: string;\r\n    capacity: number;\r\n    interface: string;\r\n  };\r\n  network: {\r\n    interfaces: string[];\r\n    wifiCapable: boolean;\r\n  };\r\n}\r\n\r\n/**\r\n * Performance monitoring service for Intel NUC\r\n */\r\nexport class PerformanceMonitor extends EventEmitter {\r\n  private monitoringInterval?: NodeJS.Timeout;\r\n  private isMonitoring: boolean = false;\r\n  private thresholds: PerformanceThresholds;\r\n  private hardwareInfo?: HardwareInfo;\r\n  private performanceHistory: Map<string, number[]> = new Map();\r\n\r\n  constructor() {\r\n    super();\r\n    \r\n    // Default thresholds for Intel NUC\r\n    this.thresholds = {\r\n      cpu: { warning: 70, critical: 90 },\r\n      memory: { warning: 80, critical: 95 },\r\n      disk: { warning: 85, critical: 95 },\r\n      temperature: { warning: 70, critical: 85 },\r\n      network: { warning: 100, critical: 500 },\r\n      database: { warning: 100, critical: 500 }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Start performance monitoring\r\n   */\r\n  public async startMonitoring(intervalMs: number = 30000): Promise<void> {\r\n    if (this.isMonitoring) {\r\n      tradingLogger.warn('Performance monitoring is already running');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Initialize hardware information\r\n      await this.initializeHardwareInfo();\r\n      \r\n      this.isMonitoring = true;\r\n      \r\n      // Initial performance check\r\n      await this.performComprehensiveCheck();\r\n      \r\n      // Start periodic monitoring\r\n      this.monitoringInterval = setInterval(async () => {\r\n        try {\r\n          await this.performComprehensiveCheck();\r\n        } catch (error) {\r\n          tradingLogger.error('Error during performance monitoring cycle', error as Error);\r\n        }\r\n      }, intervalMs);\r\n\r\n      tradingLogger.logApplicationLifecycle('startup', 'PerformanceMonitor', {\r\n        interval: intervalMs,\r\n        thresholds: this.thresholds\r\n      });\r\n\r\n      this.emit('monitoring_started');\r\n      \r\n    } catch (error) {\r\n      tradingLogger.error('Failed to start performance monitoring', error as Error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop performance monitoring\r\n   */\r\n  public stopMonitoring(): void {\r\n    if (this.monitoringInterval) {\r\n      clearInterval(this.monitoringInterval);\r\n      this.monitoringInterval = undefined;\r\n    }\r\n    \r\n    this.isMonitoring = false;\r\n    \r\n    tradingLogger.logApplicationLifecycle('shutdown', 'PerformanceMonitor');\r\n    this.emit('monitoring_stopped');\r\n  }\r\n\r\n  /**\r\n   * Initialize hardware information\r\n   */\r\n  private async initializeHardwareInfo(): Promise<void> {\r\n    try {\r\n      const cpuInfo = os.cpus();\r\n      const totalMem = os.totalmem();\r\n      \r\n      // Get detailed CPU information\r\n      let cpuModel = cpuInfo[0]?.model || 'Unknown';\r\n      let baseFreq = 0;\r\n      let maxFreq = 0;\r\n      \r\n      try {\r\n        const cpuFreqInfo = await execAsync('cat /proc/cpuinfo | grep \"cpu MHz\" | head -1');\r\n        const freqMatch = cpuFreqInfo.stdout.match(/cpu MHz\\s*:\\s*([0-9.]+)/);\r\n        if (freqMatch) {\r\n          baseFreq = parseFloat(freqMatch[1]);\r\n        }\r\n      } catch (error) {\r\n        // Ignore if can't get frequency info\r\n      }\r\n\r\n      // Get memory information\r\n      let memType = 'Unknown';\r\n      let memSpeed = 0;\r\n      \r\n      try {\r\n        const memInfo = await execAsync('sudo dmidecode -t memory | grep -E \"Type:|Speed:\" | head -2');\r\n        const typeMatch = memInfo.stdout.match(/Type:\\s*([^\\n]+)/);\r\n        const speedMatch = memInfo.stdout.match(/Speed:\\s*([0-9]+)/);\r\n        \r\n        if (typeMatch) memType = typeMatch[1].trim();\r\n        if (speedMatch) memSpeed = parseInt(speedMatch[1]);\r\n      } catch (error) {\r\n        // Ignore if can't get memory details\r\n      }\r\n\r\n      // Get storage information\r\n      let storageType = 'Unknown';\r\n      let storageCapacity = 0;\r\n      let storageInterface = 'Unknown';\r\n      \r\n      try {\r\n        const storageInfo = await execAsync('lsblk -d -o NAME,SIZE,ROTA | grep -v loop');\r\n        const lines = storageInfo.stdout.trim().split('\\n').slice(1);\r\n        \r\n        if (lines.length > 0) {\r\n          const mainDisk = lines[0].split(/\\s+/);\r\n          const sizeStr = mainDisk[1];\r\n          const isRotational = mainDisk[2] === '1';\r\n          \r\n          storageType = isRotational ? 'HDD' : 'SSD';\r\n          storageCapacity = this.parseStorageSize(sizeStr);\r\n          storageInterface = 'SATA'; // Default assumption\r\n        }\r\n      } catch (error) {\r\n        // Ignore if can't get storage info\r\n      }\r\n\r\n      // Get network interfaces\r\n      const networkInterfaces = Object.keys(os.networkInterfaces());\r\n      const wifiCapable = networkInterfaces.some(iface => \r\n        iface.includes('wlan') || iface.includes('wifi')\r\n      );\r\n\r\n      this.hardwareInfo = {\r\n        cpu: {\r\n          model: cpuModel,\r\n          cores: cpuInfo.length,\r\n          threads: cpuInfo.length, // Simplified\r\n          baseFrequency: baseFreq,\r\n          maxFrequency: maxFreq || baseFreq\r\n        },\r\n        memory: {\r\n          total: totalMem,\r\n          type: memType,\r\n          speed: memSpeed\r\n        },\r\n        storage: {\r\n          type: storageType,\r\n          capacity: storageCapacity,\r\n          interface: storageInterface\r\n        },\r\n        network: {\r\n          interfaces: networkInterfaces,\r\n          wifiCapable\r\n        }\r\n      };\r\n\r\n      tradingLogger.info('Hardware information initialized', {\r\n        component: 'PerformanceMonitor',\r\n        hardwareInfo: this.hardwareInfo\r\n      });\r\n\r\n    } catch (error) {\r\n      tradingLogger.error('Failed to initialize hardware information', error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Perform comprehensive performance check\r\n   */\r\n  private async performComprehensiveCheck(): Promise<void> {\r\n    const timestamp = new Date();\r\n    \r\n    // Check Intel NUC hardware\r\n    await this.checkIntelNUCPerformance(timestamp);\r\n    \r\n    // Check network performance\r\n    await this.checkNetworkPerformance(timestamp);\r\n    \r\n    // Check database performance\r\n    await this.checkDatabasePerformance(timestamp);\r\n    \r\n    // Check application performance\r\n    await this.checkApplicationPerformance(timestamp);\r\n  }\r\n\r\n  /**\r\n   * Check Intel NUC hardware performance\r\n   */\r\n  private async checkIntelNUCPerformance(timestamp: Date): Promise<void> {\r\n    try {\r\n      // Get CPU usage\r\n      const cpuUsage = await this.getCPUUsage();\r\n      \r\n      // Get memory usage\r\n      const memoryUsage = await this.getMemoryUsage();\r\n      \r\n      // Get disk usage\r\n      const diskUsage = await this.getDiskUsage();\r\n      \r\n      // Get CPU temperature (if available)\r\n      const temperature = await this.getCPUTemperature();\r\n      \r\n      // Determine overall status\r\n      const status = this.determineSystemStatus({\r\n        cpu: cpuUsage,\r\n        memory: memoryUsage.percentage,\r\n        disk: diskUsage.percentage,\r\n        temperature\r\n      });\r\n\r\n      const context: SystemPerformanceContext = {\r\n        component: 'intel_nuc',\r\n        metrics: {\r\n          cpu: {\r\n            usage: cpuUsage,\r\n            temperature,\r\n            frequency: this.hardwareInfo?.cpu.baseFrequency\r\n          },\r\n          memory: memoryUsage,\r\n          disk: diskUsage\r\n        },\r\n        thresholds: this.thresholds,\r\n        status,\r\n        timestamp\r\n      };\r\n\r\n      tradingLogger.logSystemPerformance(context);\r\n      \r\n      // Store performance history\r\n      this.storePerformanceMetric('cpu_usage', cpuUsage);\r\n      this.storePerformanceMetric('memory_usage', memoryUsage.percentage);\r\n      this.storePerformanceMetric('disk_usage', diskUsage.percentage);\r\n      \r\n      if (temperature > 0) {\r\n        this.storePerformanceMetric('cpu_temperature', temperature);\r\n      }\r\n\r\n      // Emit events for critical conditions\r\n      if (status === 'critical') {\r\n        this.emit('critical_performance', context);\r\n      } else if (status === 'warning') {\r\n        this.emit('performance_warning', context);\r\n      }\r\n\r\n    } catch (error) {\r\n      tradingLogger.error('Failed to check Intel NUC performance', error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check network performance including SSH tunnel\r\n   */\r\n  private async checkNetworkPerformance(timestamp: Date): Promise<void> {\r\n    try {\r\n      // Check SSH tunnel latency\r\n      const tunnelLatency = await this.checkSSHTunnelLatency();\r\n      \r\n      // Check API connectivity latency\r\n      const apiLatency = await this.checkAPILatency();\r\n      \r\n      // Get network interface statistics\r\n      const networkStats = await this.getNetworkStatistics();\r\n      \r\n      const avgLatency = (tunnelLatency + apiLatency) / 2;\r\n      const status = avgLatency > this.thresholds.network.critical ? 'critical' :\r\n                    avgLatency > this.thresholds.network.warning ? 'warning' : 'healthy';\r\n\r\n      const context: SystemPerformanceContext = {\r\n        component: 'network',\r\n        metrics: {\r\n          network: {\r\n            latency: avgLatency,\r\n            bandwidth: networkStats.bandwidth,\r\n            packetLoss: networkStats.packetLoss,\r\n            connections: networkStats.connections\r\n          }\r\n        },\r\n        thresholds: this.thresholds,\r\n        status,\r\n        timestamp\r\n      };\r\n\r\n      tradingLogger.logSystemPerformance(context);\r\n      \r\n      // Store network performance history\r\n      this.storePerformanceMetric('network_latency', avgLatency);\r\n      this.storePerformanceMetric('ssh_tunnel_latency', tunnelLatency);\r\n      this.storePerformanceMetric('api_latency', apiLatency);\r\n\r\n      if (status !== 'healthy') {\r\n        this.emit('network_performance_issue', context);\r\n      }\r\n\r\n    } catch (error) {\r\n      tradingLogger.error('Failed to check network performance', error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check database performance\r\n   */\r\n  private async checkDatabasePerformance(timestamp: Date): Promise<void> {\r\n    try {\r\n      // Check database connection count\r\n      const connections = await this.getDatabaseConnections();\r\n      \r\n      // Check query performance\r\n      const queryTime = await this.measureDatabaseQueryTime();\r\n      \r\n      // Check cache hit ratio (if available)\r\n      const cacheHitRatio = await this.getDatabaseCacheHitRatio();\r\n      \r\n      const status = queryTime > this.thresholds.database.critical ? 'critical' :\r\n                    queryTime > this.thresholds.database.warning ? 'warning' : 'healthy';\r\n\r\n      const context: SystemPerformanceContext = {\r\n        component: 'database',\r\n        metrics: {\r\n          database: {\r\n            connections,\r\n            queryTime,\r\n            cacheHitRatio\r\n          }\r\n        },\r\n        thresholds: this.thresholds,\r\n        status,\r\n        timestamp\r\n      };\r\n\r\n      tradingLogger.logSystemPerformance(context);\r\n      \r\n      // Store database performance history\r\n      this.storePerformanceMetric('db_query_time', queryTime);\r\n      this.storePerformanceMetric('db_connections', connections);\r\n      \r\n      if (cacheHitRatio > 0) {\r\n        this.storePerformanceMetric('db_cache_hit_ratio', cacheHitRatio);\r\n      }\r\n\r\n      if (status !== 'healthy') {\r\n        this.emit('database_performance_issue', context);\r\n      }\r\n\r\n    } catch (error) {\r\n      tradingLogger.error('Failed to check database performance', error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check application performance\r\n   */\r\n  private async checkApplicationPerformance(timestamp: Date): Promise<void> {\r\n    try {\r\n      const memUsage = process.memoryUsage();\r\n      const cpuUsage = process.cpuUsage();\r\n      \r\n      // Calculate application-specific metrics\r\n      const heapUsedMB = memUsage.heapUsed / 1024 / 1024;\r\n      const heapTotalMB = memUsage.heapTotal / 1024 / 1024;\r\n      const heapUsagePercent = (heapUsedMB / heapTotalMB) * 100;\r\n      \r\n      const status = heapUsagePercent > 90 ? 'critical' :\r\n                    heapUsagePercent > 75 ? 'warning' : 'healthy';\r\n\r\n      const context: SystemPerformanceContext = {\r\n        component: 'application',\r\n        metrics: {\r\n          memory: {\r\n            used: memUsage.heapUsed,\r\n            total: memUsage.heapTotal,\r\n            percentage: heapUsagePercent\r\n          }\r\n        },\r\n        thresholds: this.thresholds,\r\n        status,\r\n        timestamp\r\n      };\r\n\r\n      tradingLogger.logSystemPerformance(context);\r\n      \r\n      // Store application performance history\r\n      this.storePerformanceMetric('app_heap_usage', heapUsagePercent);\r\n      this.storePerformanceMetric('app_memory_rss', memUsage.rss / 1024 / 1024);\r\n\r\n      if (status !== 'healthy') {\r\n        this.emit('application_performance_issue', context);\r\n      }\r\n\r\n    } catch (error) {\r\n      tradingLogger.error('Failed to check application performance', error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get CPU usage percentage\r\n   */\r\n  private async getCPUUsage(): Promise<number> {\r\n    return new Promise((resolve) => {\r\n      const startUsage = process.cpuUsage();\r\n      const startTime = performance.now();\r\n\r\n      setTimeout(() => {\r\n        const endUsage = process.cpuUsage(startUsage);\r\n        const endTime = performance.now();\r\n        const timeDiff = endTime - startTime;\r\n\r\n        const userPercent = (endUsage.user / 1000) / timeDiff * 100;\r\n        const systemPercent = (endUsage.system / 1000) / timeDiff * 100;\r\n        \r\n        resolve(Math.min(userPercent + systemPercent, 100));\r\n      }, 100);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get memory usage information\r\n   */\r\n  private async getMemoryUsage(): Promise<{\r\n    used: number;\r\n    total: number;\r\n    percentage: number;\r\n    swap?: number;\r\n  }> {\r\n    const totalMem = os.totalmem();\r\n    const freeMem = os.freemem();\r\n    const usedMem = totalMem - freeMem;\r\n\r\n    let swapUsed = 0;\r\n    try {\r\n      const swapInfo = await execAsync('free | grep Swap');\r\n      const swapMatch = swapInfo.stdout.match(/Swap:\\s+\\d+\\s+(\\d+)/);\r\n      if (swapMatch) {\r\n        swapUsed = parseInt(swapMatch[1]) * 1024; // Convert from KB to bytes\r\n      }\r\n    } catch (error) {\r\n      // Ignore if can't get swap info\r\n    }\r\n\r\n    return {\r\n      used: usedMem,\r\n      total: totalMem,\r\n      percentage: (usedMem / totalMem) * 100,\r\n      swap: swapUsed\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get disk usage information\r\n   */\r\n  private async getDiskUsage(): Promise<{\r\n    used: number;\r\n    total: number;\r\n    percentage: number;\r\n    iops?: number;\r\n  }> {\r\n    try {\r\n      const diskInfo = await execAsync('df -h / | tail -1');\r\n      const parts = diskInfo.stdout.trim().split(/\\s+/);\r\n      \r\n      const total = this.parseStorageSize(parts[1]);\r\n      const used = this.parseStorageSize(parts[2]);\r\n      const percentage = parseFloat(parts[4].replace('%', ''));\r\n\r\n      // Try to get IOPS if available\r\n      let iops = 0;\r\n      try {\r\n        const iostat = await execAsync('iostat -x 1 1 | tail -n +4 | head -1');\r\n        const ioMatch = iostat.stdout.match(/\\s+([0-9.]+)\\s+([0-9.]+)$/);\r\n        if (ioMatch) {\r\n          iops = parseFloat(ioMatch[1]) + parseFloat(ioMatch[2]);\r\n        }\r\n      } catch (error) {\r\n        // Ignore if iostat not available\r\n      }\r\n\r\n      return { used, total, percentage, iops };\r\n    } catch (error) {\r\n      return { used: 0, total: 0, percentage: 0 };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get CPU temperature\r\n   */\r\n  private async getCPUTemperature(): Promise<number> {\r\n    try {\r\n      // Try different methods to get CPU temperature\r\n      const methods = [\r\n        'cat /sys/class/thermal/thermal_zone0/temp',\r\n        'sensors | grep \"Core 0\" | awk \\'{print $3}\\' | sed \\'s/+//\\' | sed \\'s/\xB0C//\\'',\r\n        'cat /sys/devices/platform/coretemp.0/hwmon/hwmon*/temp1_input'\r\n      ];\r\n\r\n      for (const method of methods) {\r\n        try {\r\n          const result = await execAsync(method);\r\n          const temp = parseFloat(result.stdout.trim());\r\n          \r\n          // Convert from millidegrees if necessary\r\n          if (temp > 1000) {\r\n            return temp / 1000;\r\n          }\r\n          \r\n          if (temp > 0 && temp < 150) {\r\n            return temp;\r\n          }\r\n        } catch (error) {\r\n          continue;\r\n        }\r\n      }\r\n      \r\n      return 0; // Temperature not available\r\n    } catch (error) {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check SSH tunnel latency\r\n   */\r\n  private async checkSSHTunnelLatency(): Promise<number> {\r\n    try {\r\n      const startTime = performance.now();\r\n      await execAsync('curl -s --max-time 5 http://localhost:8443/api/v4/spot/time');\r\n      const endTime = performance.now();\r\n      \r\n      return endTime - startTime;\r\n    } catch (error) {\r\n      return 999; // High latency indicates connection issues\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check API latency\r\n   */\r\n  private async checkAPILatency(): Promise<number> {\r\n    try {\r\n      const startTime = performance.now();\r\n      // This would be replaced with actual API call\r\n      await new Promise(resolve => setTimeout(resolve, 10));\r\n      const endTime = performance.now();\r\n      \r\n      return endTime - startTime;\r\n    } catch (error) {\r\n      return 999;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get network statistics\r\n   */\r\n  private async getNetworkStatistics(): Promise<{\r\n    bandwidth: number;\r\n    packetLoss: number;\r\n    connections: number;\r\n  }> {\r\n    try {\r\n      // Get active connections\r\n      const netstat = await execAsync('netstat -an | grep ESTABLISHED | wc -l');\r\n      const connections = parseInt(netstat.stdout.trim()) || 0;\r\n\r\n      // Simplified bandwidth and packet loss (would need more sophisticated monitoring)\r\n      return {\r\n        bandwidth: 1000000, // 1MB/s default\r\n        packetLoss: 0,\r\n        connections\r\n      };\r\n    } catch (error) {\r\n      return { bandwidth: 0, packetLoss: 0, connections: 0 };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get database connections\r\n   */\r\n  private async getDatabaseConnections(): Promise<number> {\r\n    try {\r\n      // This would be replaced with actual database query\r\n      return 5; // Default connection count\r\n    } catch (error) {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Measure database query time\r\n   */\r\n  private async measureDatabaseQueryTime(): Promise<number> {\r\n    try {\r\n      const startTime = performance.now();\r\n      // This would be replaced with actual database query\r\n      await new Promise(resolve => setTimeout(resolve, 5));\r\n      const endTime = performance.now();\r\n      \r\n      return endTime - startTime;\r\n    } catch (error) {\r\n      return 999;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get database cache hit ratio\r\n   */\r\n  private async getDatabaseCacheHitRatio(): Promise<number> {\r\n    try {\r\n      // This would be replaced with actual database query\r\n      return 95.5; // Default cache hit ratio\r\n    } catch (error) {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parse storage size string to bytes\r\n   */\r\n  private parseStorageSize(sizeStr: string): number {\r\n    const units = { K: 1024, M: 1024**2, G: 1024**3, T: 1024**4 };\r\n    const match = sizeStr.match(/^([0-9.]+)([KMGT]?)$/);\r\n    \r\n    if (!match) return 0;\r\n    \r\n    const value = parseFloat(match[1]);\r\n    const unit = match[2] as keyof typeof units;\r\n    \r\n    return value * (units[unit] || 1);\r\n  }\r\n\r\n  /**\r\n   * Determine system status based on metrics\r\n   */\r\n  private determineSystemStatus(metrics: {\r\n    cpu: number;\r\n    memory: number;\r\n    disk: number;\r\n    temperature: number;\r\n  }): 'healthy' | 'warning' | 'critical' {\r\n    const { cpu, memory, disk, temperature } = metrics;\r\n    \r\n    if (cpu > this.thresholds.cpu.critical ||\r\n        memory > this.thresholds.memory.critical ||\r\n        disk > this.thresholds.disk.critical ||\r\n        temperature > this.thresholds.temperature.critical) {\r\n      return 'critical';\r\n    }\r\n    \r\n    if (cpu > this.thresholds.cpu.warning ||\r\n        memory > this.thresholds.memory.warning ||\r\n        disk > this.thresholds.disk.warning ||\r\n        temperature > this.thresholds.temperature.warning) {\r\n      return 'warning';\r\n    }\r\n    \r\n    return 'healthy';\r\n  }\r\n\r\n  /**\r\n   * Store performance metric in history\r\n   */\r\n  private storePerformanceMetric(metric: string, value: number): void {\r\n    const history = this.performanceHistory.get(metric) || [];\r\n    history.push(value);\r\n    \r\n    // Keep only last 100 values\r\n    if (history.length > 100) {\r\n      history.shift();\r\n    }\r\n    \r\n    this.performanceHistory.set(metric, history);\r\n  }\r\n\r\n  /**\r\n   * Get performance history\r\n   */\r\n  public getPerformanceHistory(): Record<string, number[]> {\r\n    return Object.fromEntries(this.performanceHistory);\r\n  }\r\n\r\n  /**\r\n   * Update performance thresholds\r\n   */\r\n  public updateThresholds(newThresholds: Partial<PerformanceThresholds>): void {\r\n    this.thresholds = { ...this.thresholds, ...newThresholds };\r\n    \r\n    tradingLogger.info('Performance thresholds updated', {\r\n      component: 'PerformanceMonitor',\r\n      thresholds: this.thresholds\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get current hardware information\r\n   */\r\n  public getHardwareInfo(): HardwareInfo | undefined {\r\n    return this.hardwareInfo;\r\n  }\r\n\r\n  /**\r\n   * Get monitoring status\r\n   */\r\n  public isMonitoringActive(): boolean {\r\n    return this.isMonitoring;\r\n  }\r\n}\r\n\r\n// Create and export singleton instance\r\nexport const performanceMonitor = new PerformanceMonitor();\r\n\r\n// Export types\r\nexport type { PerformanceThresholds, HardwareInfo };"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "4b20813f6e8b308e08156e309ccbe97268c1a945"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_rpxvgdhc3 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_rpxvgdhc3();
var __importDefault =
/* istanbul ignore next */
(cov_rpxvgdhc3().s[0]++,
/* istanbul ignore next */
(cov_rpxvgdhc3().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_rpxvgdhc3().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_rpxvgdhc3().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_rpxvgdhc3().f[0]++;
  cov_rpxvgdhc3().s[1]++;
  return /* istanbul ignore next */(cov_rpxvgdhc3().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_rpxvgdhc3().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_rpxvgdhc3().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_rpxvgdhc3().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_rpxvgdhc3().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_rpxvgdhc3().s[3]++;
exports.performanceMonitor = exports.PerformanceMonitor = void 0;
const events_1 =
/* istanbul ignore next */
(cov_rpxvgdhc3().s[4]++, require("events"));
const trading_logger_1 =
/* istanbul ignore next */
(cov_rpxvgdhc3().s[5]++, require("../logging/trading-logger"));
const child_process_1 =
/* istanbul ignore next */
(cov_rpxvgdhc3().s[6]++, require("child_process"));
const util_1 =
/* istanbul ignore next */
(cov_rpxvgdhc3().s[7]++, require("util"));
const os_1 =
/* istanbul ignore next */
(cov_rpxvgdhc3().s[8]++, __importDefault(require("os")));
const perf_hooks_1 =
/* istanbul ignore next */
(cov_rpxvgdhc3().s[9]++, require("perf_hooks"));
const execAsync =
/* istanbul ignore next */
(cov_rpxvgdhc3().s[10]++, (0, util_1.promisify)(child_process_1.exec));
/**
 * Performance monitoring service for Intel NUC
 */
class PerformanceMonitor extends
/* istanbul ignore next */
(events_1.EventEmitter) {
  monitoringInterval;
  isMonitoring =
  /* istanbul ignore next */
  (cov_rpxvgdhc3().s[11]++, false);
  thresholds;
  hardwareInfo;
  performanceHistory =
  /* istanbul ignore next */
  (cov_rpxvgdhc3().s[12]++, new Map());
  constructor() {
    /* istanbul ignore next */
    cov_rpxvgdhc3().f[1]++;
    cov_rpxvgdhc3().s[13]++;
    super();
    // Default thresholds for Intel NUC
    /* istanbul ignore next */
    cov_rpxvgdhc3().s[14]++;
    this.thresholds = {
      cpu: {
        warning: 70,
        critical: 90
      },
      memory: {
        warning: 80,
        critical: 95
      },
      disk: {
        warning: 85,
        critical: 95
      },
      temperature: {
        warning: 70,
        critical: 85
      },
      network: {
        warning: 100,
        critical: 500
      },
      database: {
        warning: 100,
        critical: 500
      }
    };
  }
  /**
   * Start performance monitoring
   */
  async startMonitoring(intervalMs =
  /* istanbul ignore next */
  (cov_rpxvgdhc3().b[3][0]++, 30000)) {
    /* istanbul ignore next */
    cov_rpxvgdhc3().f[2]++;
    cov_rpxvgdhc3().s[15]++;
    if (this.isMonitoring) {
      /* istanbul ignore next */
      cov_rpxvgdhc3().b[4][0]++;
      cov_rpxvgdhc3().s[16]++;
      trading_logger_1.tradingLogger.warn('Performance monitoring is already running');
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[17]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_rpxvgdhc3().b[4][1]++;
    }
    cov_rpxvgdhc3().s[18]++;
    try {
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[19]++;
      // Initialize hardware information
      await this.initializeHardwareInfo();
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[20]++;
      this.isMonitoring = true;
      // Initial performance check
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[21]++;
      await this.performComprehensiveCheck();
      // Start periodic monitoring
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[22]++;
      this.monitoringInterval = setInterval(async () => {
        /* istanbul ignore next */
        cov_rpxvgdhc3().f[3]++;
        cov_rpxvgdhc3().s[23]++;
        try {
          /* istanbul ignore next */
          cov_rpxvgdhc3().s[24]++;
          await this.performComprehensiveCheck();
        } catch (error) {
          /* istanbul ignore next */
          cov_rpxvgdhc3().s[25]++;
          trading_logger_1.tradingLogger.error('Error during performance monitoring cycle', error);
        }
      }, intervalMs);
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[26]++;
      trading_logger_1.tradingLogger.logApplicationLifecycle('startup', 'PerformanceMonitor', {
        interval: intervalMs,
        thresholds: this.thresholds
      });
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[27]++;
      this.emit('monitoring_started');
    } catch (error) {
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[28]++;
      trading_logger_1.tradingLogger.error('Failed to start performance monitoring', error);
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[29]++;
      throw error;
    }
  }
  /**
   * Stop performance monitoring
   */
  stopMonitoring() {
    /* istanbul ignore next */
    cov_rpxvgdhc3().f[4]++;
    cov_rpxvgdhc3().s[30]++;
    if (this.monitoringInterval) {
      /* istanbul ignore next */
      cov_rpxvgdhc3().b[5][0]++;
      cov_rpxvgdhc3().s[31]++;
      clearInterval(this.monitoringInterval);
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[32]++;
      this.monitoringInterval = undefined;
    } else
    /* istanbul ignore next */
    {
      cov_rpxvgdhc3().b[5][1]++;
    }
    cov_rpxvgdhc3().s[33]++;
    this.isMonitoring = false;
    /* istanbul ignore next */
    cov_rpxvgdhc3().s[34]++;
    trading_logger_1.tradingLogger.logApplicationLifecycle('shutdown', 'PerformanceMonitor');
    /* istanbul ignore next */
    cov_rpxvgdhc3().s[35]++;
    this.emit('monitoring_stopped');
  }
  /**
   * Initialize hardware information
   */
  async initializeHardwareInfo() {
    /* istanbul ignore next */
    cov_rpxvgdhc3().f[5]++;
    cov_rpxvgdhc3().s[36]++;
    try {
      const cpuInfo =
      /* istanbul ignore next */
      (cov_rpxvgdhc3().s[37]++, os_1.default.cpus());
      const totalMem =
      /* istanbul ignore next */
      (cov_rpxvgdhc3().s[38]++, os_1.default.totalmem());
      // Get detailed CPU information
      let cpuModel =
      /* istanbul ignore next */
      (cov_rpxvgdhc3().s[39]++,
      /* istanbul ignore next */
      (cov_rpxvgdhc3().b[6][0]++, cpuInfo[0]?.model) ||
      /* istanbul ignore next */
      (cov_rpxvgdhc3().b[6][1]++, 'Unknown'));
      let baseFreq =
      /* istanbul ignore next */
      (cov_rpxvgdhc3().s[40]++, 0);
      let maxFreq =
      /* istanbul ignore next */
      (cov_rpxvgdhc3().s[41]++, 0);
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[42]++;
      try {
        const cpuFreqInfo =
        /* istanbul ignore next */
        (cov_rpxvgdhc3().s[43]++, await execAsync('cat /proc/cpuinfo | grep "cpu MHz" | head -1'));
        const freqMatch =
        /* istanbul ignore next */
        (cov_rpxvgdhc3().s[44]++, cpuFreqInfo.stdout.match(/cpu MHz\s*:\s*([0-9.]+)/));
        /* istanbul ignore next */
        cov_rpxvgdhc3().s[45]++;
        if (freqMatch) {
          /* istanbul ignore next */
          cov_rpxvgdhc3().b[7][0]++;
          cov_rpxvgdhc3().s[46]++;
          baseFreq = parseFloat(freqMatch[1]);
        } else
        /* istanbul ignore next */
        {
          cov_rpxvgdhc3().b[7][1]++;
        }
      } catch (error) {
        // Ignore if can't get frequency info
      }
      // Get memory information
      let memType =
      /* istanbul ignore next */
      (cov_rpxvgdhc3().s[47]++, 'Unknown');
      let memSpeed =
      /* istanbul ignore next */
      (cov_rpxvgdhc3().s[48]++, 0);
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[49]++;
      try {
        const memInfo =
        /* istanbul ignore next */
        (cov_rpxvgdhc3().s[50]++, await execAsync('sudo dmidecode -t memory | grep -E "Type:|Speed:" | head -2'));
        const typeMatch =
        /* istanbul ignore next */
        (cov_rpxvgdhc3().s[51]++, memInfo.stdout.match(/Type:\s*([^\n]+)/));
        const speedMatch =
        /* istanbul ignore next */
        (cov_rpxvgdhc3().s[52]++, memInfo.stdout.match(/Speed:\s*([0-9]+)/));
        /* istanbul ignore next */
        cov_rpxvgdhc3().s[53]++;
        if (typeMatch) {
          /* istanbul ignore next */
          cov_rpxvgdhc3().b[8][0]++;
          cov_rpxvgdhc3().s[54]++;
          memType = typeMatch[1].trim();
        } else
        /* istanbul ignore next */
        {
          cov_rpxvgdhc3().b[8][1]++;
        }
        cov_rpxvgdhc3().s[55]++;
        if (speedMatch) {
          /* istanbul ignore next */
          cov_rpxvgdhc3().b[9][0]++;
          cov_rpxvgdhc3().s[56]++;
          memSpeed = parseInt(speedMatch[1]);
        } else
        /* istanbul ignore next */
        {
          cov_rpxvgdhc3().b[9][1]++;
        }
      } catch (error) {
        // Ignore if can't get memory details
      }
      // Get storage information
      let storageType =
      /* istanbul ignore next */
      (cov_rpxvgdhc3().s[57]++, 'Unknown');
      let storageCapacity =
      /* istanbul ignore next */
      (cov_rpxvgdhc3().s[58]++, 0);
      let storageInterface =
      /* istanbul ignore next */
      (cov_rpxvgdhc3().s[59]++, 'Unknown');
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[60]++;
      try {
        const storageInfo =
        /* istanbul ignore next */
        (cov_rpxvgdhc3().s[61]++, await execAsync('lsblk -d -o NAME,SIZE,ROTA | grep -v loop'));
        const lines =
        /* istanbul ignore next */
        (cov_rpxvgdhc3().s[62]++, storageInfo.stdout.trim().split('\n').slice(1));
        /* istanbul ignore next */
        cov_rpxvgdhc3().s[63]++;
        if (lines.length > 0) {
          /* istanbul ignore next */
          cov_rpxvgdhc3().b[10][0]++;
          const mainDisk =
          /* istanbul ignore next */
          (cov_rpxvgdhc3().s[64]++, lines[0].split(/\s+/));
          const sizeStr =
          /* istanbul ignore next */
          (cov_rpxvgdhc3().s[65]++, mainDisk[1]);
          const isRotational =
          /* istanbul ignore next */
          (cov_rpxvgdhc3().s[66]++, mainDisk[2] === '1');
          /* istanbul ignore next */
          cov_rpxvgdhc3().s[67]++;
          storageType = isRotational ?
          /* istanbul ignore next */
          (cov_rpxvgdhc3().b[11][0]++, 'HDD') :
          /* istanbul ignore next */
          (cov_rpxvgdhc3().b[11][1]++, 'SSD');
          /* istanbul ignore next */
          cov_rpxvgdhc3().s[68]++;
          storageCapacity = this.parseStorageSize(sizeStr);
          /* istanbul ignore next */
          cov_rpxvgdhc3().s[69]++;
          storageInterface = 'SATA'; // Default assumption
        } else
        /* istanbul ignore next */
        {
          cov_rpxvgdhc3().b[10][1]++;
        }
      } catch (error) {
        // Ignore if can't get storage info
      }
      // Get network interfaces
      const networkInterfaces =
      /* istanbul ignore next */
      (cov_rpxvgdhc3().s[70]++, Object.keys(os_1.default.networkInterfaces()));
      const wifiCapable =
      /* istanbul ignore next */
      (cov_rpxvgdhc3().s[71]++, networkInterfaces.some(iface => {
        /* istanbul ignore next */
        cov_rpxvgdhc3().f[6]++;
        cov_rpxvgdhc3().s[72]++;
        return /* istanbul ignore next */(cov_rpxvgdhc3().b[12][0]++, iface.includes('wlan')) ||
        /* istanbul ignore next */
        (cov_rpxvgdhc3().b[12][1]++, iface.includes('wifi'));
      }));
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[73]++;
      this.hardwareInfo = {
        cpu: {
          model: cpuModel,
          cores: cpuInfo.length,
          threads: cpuInfo.length,
          // Simplified
          baseFrequency: baseFreq,
          maxFrequency:
          /* istanbul ignore next */
          (cov_rpxvgdhc3().b[13][0]++, maxFreq) ||
          /* istanbul ignore next */
          (cov_rpxvgdhc3().b[13][1]++, baseFreq)
        },
        memory: {
          total: totalMem,
          type: memType,
          speed: memSpeed
        },
        storage: {
          type: storageType,
          capacity: storageCapacity,
          interface: storageInterface
        },
        network: {
          interfaces: networkInterfaces,
          wifiCapable
        }
      };
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[74]++;
      trading_logger_1.tradingLogger.info('Hardware information initialized', {
        component: 'PerformanceMonitor',
        hardwareInfo: this.hardwareInfo
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[75]++;
      trading_logger_1.tradingLogger.error('Failed to initialize hardware information', error);
    }
  }
  /**
   * Perform comprehensive performance check
   */
  async performComprehensiveCheck() {
    /* istanbul ignore next */
    cov_rpxvgdhc3().f[7]++;
    const timestamp =
    /* istanbul ignore next */
    (cov_rpxvgdhc3().s[76]++, new Date());
    // Check Intel NUC hardware
    /* istanbul ignore next */
    cov_rpxvgdhc3().s[77]++;
    await this.checkIntelNUCPerformance(timestamp);
    // Check network performance
    /* istanbul ignore next */
    cov_rpxvgdhc3().s[78]++;
    await this.checkNetworkPerformance(timestamp);
    // Check database performance
    /* istanbul ignore next */
    cov_rpxvgdhc3().s[79]++;
    await this.checkDatabasePerformance(timestamp);
    // Check application performance
    /* istanbul ignore next */
    cov_rpxvgdhc3().s[80]++;
    await this.checkApplicationPerformance(timestamp);
  }
  /**
   * Check Intel NUC hardware performance
   */
  async checkIntelNUCPerformance(timestamp) {
    /* istanbul ignore next */
    cov_rpxvgdhc3().f[8]++;
    cov_rpxvgdhc3().s[81]++;
    try {
      // Get CPU usage
      const cpuUsage =
      /* istanbul ignore next */
      (cov_rpxvgdhc3().s[82]++, await this.getCPUUsage());
      // Get memory usage
      const memoryUsage =
      /* istanbul ignore next */
      (cov_rpxvgdhc3().s[83]++, await this.getMemoryUsage());
      // Get disk usage
      const diskUsage =
      /* istanbul ignore next */
      (cov_rpxvgdhc3().s[84]++, await this.getDiskUsage());
      // Get CPU temperature (if available)
      const temperature =
      /* istanbul ignore next */
      (cov_rpxvgdhc3().s[85]++, await this.getCPUTemperature());
      // Determine overall status
      const status =
      /* istanbul ignore next */
      (cov_rpxvgdhc3().s[86]++, this.determineSystemStatus({
        cpu: cpuUsage,
        memory: memoryUsage.percentage,
        disk: diskUsage.percentage,
        temperature
      }));
      const context =
      /* istanbul ignore next */
      (cov_rpxvgdhc3().s[87]++, {
        component: 'intel_nuc',
        metrics: {
          cpu: {
            usage: cpuUsage,
            temperature,
            frequency: this.hardwareInfo?.cpu.baseFrequency
          },
          memory: memoryUsage,
          disk: diskUsage
        },
        thresholds: this.thresholds,
        status,
        timestamp
      });
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[88]++;
      trading_logger_1.tradingLogger.logSystemPerformance(context);
      // Store performance history
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[89]++;
      this.storePerformanceMetric('cpu_usage', cpuUsage);
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[90]++;
      this.storePerformanceMetric('memory_usage', memoryUsage.percentage);
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[91]++;
      this.storePerformanceMetric('disk_usage', diskUsage.percentage);
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[92]++;
      if (temperature > 0) {
        /* istanbul ignore next */
        cov_rpxvgdhc3().b[14][0]++;
        cov_rpxvgdhc3().s[93]++;
        this.storePerformanceMetric('cpu_temperature', temperature);
      } else
      /* istanbul ignore next */
      {
        cov_rpxvgdhc3().b[14][1]++;
      }
      // Emit events for critical conditions
      cov_rpxvgdhc3().s[94]++;
      if (status === 'critical') {
        /* istanbul ignore next */
        cov_rpxvgdhc3().b[15][0]++;
        cov_rpxvgdhc3().s[95]++;
        this.emit('critical_performance', context);
      } else {
        /* istanbul ignore next */
        cov_rpxvgdhc3().b[15][1]++;
        cov_rpxvgdhc3().s[96]++;
        if (status === 'warning') {
          /* istanbul ignore next */
          cov_rpxvgdhc3().b[16][0]++;
          cov_rpxvgdhc3().s[97]++;
          this.emit('performance_warning', context);
        } else
        /* istanbul ignore next */
        {
          cov_rpxvgdhc3().b[16][1]++;
        }
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[98]++;
      trading_logger_1.tradingLogger.error('Failed to check Intel NUC performance', error);
    }
  }
  /**
   * Check network performance including SSH tunnel
   */
  async checkNetworkPerformance(timestamp) {
    /* istanbul ignore next */
    cov_rpxvgdhc3().f[9]++;
    cov_rpxvgdhc3().s[99]++;
    try {
      // Check SSH tunnel latency
      const tunnelLatency =
      /* istanbul ignore next */
      (cov_rpxvgdhc3().s[100]++, await this.checkSSHTunnelLatency());
      // Check API connectivity latency
      const apiLatency =
      /* istanbul ignore next */
      (cov_rpxvgdhc3().s[101]++, await this.checkAPILatency());
      // Get network interface statistics
      const networkStats =
      /* istanbul ignore next */
      (cov_rpxvgdhc3().s[102]++, await this.getNetworkStatistics());
      const avgLatency =
      /* istanbul ignore next */
      (cov_rpxvgdhc3().s[103]++, (tunnelLatency + apiLatency) / 2);
      const status =
      /* istanbul ignore next */
      (cov_rpxvgdhc3().s[104]++, avgLatency > this.thresholds.network.critical ?
      /* istanbul ignore next */
      (cov_rpxvgdhc3().b[17][0]++, 'critical') :
      /* istanbul ignore next */
      (cov_rpxvgdhc3().b[17][1]++, avgLatency > this.thresholds.network.warning ?
      /* istanbul ignore next */
      (cov_rpxvgdhc3().b[18][0]++, 'warning') :
      /* istanbul ignore next */
      (cov_rpxvgdhc3().b[18][1]++, 'healthy')));
      const context =
      /* istanbul ignore next */
      (cov_rpxvgdhc3().s[105]++, {
        component: 'network',
        metrics: {
          network: {
            latency: avgLatency,
            bandwidth: networkStats.bandwidth,
            packetLoss: networkStats.packetLoss,
            connections: networkStats.connections
          }
        },
        thresholds: this.thresholds,
        status,
        timestamp
      });
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[106]++;
      trading_logger_1.tradingLogger.logSystemPerformance(context);
      // Store network performance history
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[107]++;
      this.storePerformanceMetric('network_latency', avgLatency);
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[108]++;
      this.storePerformanceMetric('ssh_tunnel_latency', tunnelLatency);
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[109]++;
      this.storePerformanceMetric('api_latency', apiLatency);
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[110]++;
      if (status !== 'healthy') {
        /* istanbul ignore next */
        cov_rpxvgdhc3().b[19][0]++;
        cov_rpxvgdhc3().s[111]++;
        this.emit('network_performance_issue', context);
      } else
      /* istanbul ignore next */
      {
        cov_rpxvgdhc3().b[19][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[112]++;
      trading_logger_1.tradingLogger.error('Failed to check network performance', error);
    }
  }
  /**
   * Check database performance
   */
  async checkDatabasePerformance(timestamp) {
    /* istanbul ignore next */
    cov_rpxvgdhc3().f[10]++;
    cov_rpxvgdhc3().s[113]++;
    try {
      // Check database connection count
      const connections =
      /* istanbul ignore next */
      (cov_rpxvgdhc3().s[114]++, await this.getDatabaseConnections());
      // Check query performance
      const queryTime =
      /* istanbul ignore next */
      (cov_rpxvgdhc3().s[115]++, await this.measureDatabaseQueryTime());
      // Check cache hit ratio (if available)
      const cacheHitRatio =
      /* istanbul ignore next */
      (cov_rpxvgdhc3().s[116]++, await this.getDatabaseCacheHitRatio());
      const status =
      /* istanbul ignore next */
      (cov_rpxvgdhc3().s[117]++, queryTime > this.thresholds.database.critical ?
      /* istanbul ignore next */
      (cov_rpxvgdhc3().b[20][0]++, 'critical') :
      /* istanbul ignore next */
      (cov_rpxvgdhc3().b[20][1]++, queryTime > this.thresholds.database.warning ?
      /* istanbul ignore next */
      (cov_rpxvgdhc3().b[21][0]++, 'warning') :
      /* istanbul ignore next */
      (cov_rpxvgdhc3().b[21][1]++, 'healthy')));
      const context =
      /* istanbul ignore next */
      (cov_rpxvgdhc3().s[118]++, {
        component: 'database',
        metrics: {
          database: {
            connections,
            queryTime,
            cacheHitRatio
          }
        },
        thresholds: this.thresholds,
        status,
        timestamp
      });
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[119]++;
      trading_logger_1.tradingLogger.logSystemPerformance(context);
      // Store database performance history
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[120]++;
      this.storePerformanceMetric('db_query_time', queryTime);
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[121]++;
      this.storePerformanceMetric('db_connections', connections);
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[122]++;
      if (cacheHitRatio > 0) {
        /* istanbul ignore next */
        cov_rpxvgdhc3().b[22][0]++;
        cov_rpxvgdhc3().s[123]++;
        this.storePerformanceMetric('db_cache_hit_ratio', cacheHitRatio);
      } else
      /* istanbul ignore next */
      {
        cov_rpxvgdhc3().b[22][1]++;
      }
      cov_rpxvgdhc3().s[124]++;
      if (status !== 'healthy') {
        /* istanbul ignore next */
        cov_rpxvgdhc3().b[23][0]++;
        cov_rpxvgdhc3().s[125]++;
        this.emit('database_performance_issue', context);
      } else
      /* istanbul ignore next */
      {
        cov_rpxvgdhc3().b[23][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[126]++;
      trading_logger_1.tradingLogger.error('Failed to check database performance', error);
    }
  }
  /**
   * Check application performance
   */
  async checkApplicationPerformance(timestamp) {
    /* istanbul ignore next */
    cov_rpxvgdhc3().f[11]++;
    cov_rpxvgdhc3().s[127]++;
    try {
      const memUsage =
      /* istanbul ignore next */
      (cov_rpxvgdhc3().s[128]++, process.memoryUsage());
      const cpuUsage =
      /* istanbul ignore next */
      (cov_rpxvgdhc3().s[129]++, process.cpuUsage());
      // Calculate application-specific metrics
      const heapUsedMB =
      /* istanbul ignore next */
      (cov_rpxvgdhc3().s[130]++, memUsage.heapUsed / 1024 / 1024);
      const heapTotalMB =
      /* istanbul ignore next */
      (cov_rpxvgdhc3().s[131]++, memUsage.heapTotal / 1024 / 1024);
      const heapUsagePercent =
      /* istanbul ignore next */
      (cov_rpxvgdhc3().s[132]++, heapUsedMB / heapTotalMB * 100);
      const status =
      /* istanbul ignore next */
      (cov_rpxvgdhc3().s[133]++, heapUsagePercent > 90 ?
      /* istanbul ignore next */
      (cov_rpxvgdhc3().b[24][0]++, 'critical') :
      /* istanbul ignore next */
      (cov_rpxvgdhc3().b[24][1]++, heapUsagePercent > 75 ?
      /* istanbul ignore next */
      (cov_rpxvgdhc3().b[25][0]++, 'warning') :
      /* istanbul ignore next */
      (cov_rpxvgdhc3().b[25][1]++, 'healthy')));
      const context =
      /* istanbul ignore next */
      (cov_rpxvgdhc3().s[134]++, {
        component: 'application',
        metrics: {
          memory: {
            used: memUsage.heapUsed,
            total: memUsage.heapTotal,
            percentage: heapUsagePercent
          }
        },
        thresholds: this.thresholds,
        status,
        timestamp
      });
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[135]++;
      trading_logger_1.tradingLogger.logSystemPerformance(context);
      // Store application performance history
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[136]++;
      this.storePerformanceMetric('app_heap_usage', heapUsagePercent);
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[137]++;
      this.storePerformanceMetric('app_memory_rss', memUsage.rss / 1024 / 1024);
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[138]++;
      if (status !== 'healthy') {
        /* istanbul ignore next */
        cov_rpxvgdhc3().b[26][0]++;
        cov_rpxvgdhc3().s[139]++;
        this.emit('application_performance_issue', context);
      } else
      /* istanbul ignore next */
      {
        cov_rpxvgdhc3().b[26][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[140]++;
      trading_logger_1.tradingLogger.error('Failed to check application performance', error);
    }
  }
  /**
   * Get CPU usage percentage
   */
  async getCPUUsage() {
    /* istanbul ignore next */
    cov_rpxvgdhc3().f[12]++;
    cov_rpxvgdhc3().s[141]++;
    return new Promise(resolve => {
      /* istanbul ignore next */
      cov_rpxvgdhc3().f[13]++;
      const startUsage =
      /* istanbul ignore next */
      (cov_rpxvgdhc3().s[142]++, process.cpuUsage());
      const startTime =
      /* istanbul ignore next */
      (cov_rpxvgdhc3().s[143]++, perf_hooks_1.performance.now());
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[144]++;
      setTimeout(() => {
        /* istanbul ignore next */
        cov_rpxvgdhc3().f[14]++;
        const endUsage =
        /* istanbul ignore next */
        (cov_rpxvgdhc3().s[145]++, process.cpuUsage(startUsage));
        const endTime =
        /* istanbul ignore next */
        (cov_rpxvgdhc3().s[146]++, perf_hooks_1.performance.now());
        const timeDiff =
        /* istanbul ignore next */
        (cov_rpxvgdhc3().s[147]++, endTime - startTime);
        const userPercent =
        /* istanbul ignore next */
        (cov_rpxvgdhc3().s[148]++, endUsage.user / 1000 / timeDiff * 100);
        const systemPercent =
        /* istanbul ignore next */
        (cov_rpxvgdhc3().s[149]++, endUsage.system / 1000 / timeDiff * 100);
        /* istanbul ignore next */
        cov_rpxvgdhc3().s[150]++;
        resolve(Math.min(userPercent + systemPercent, 100));
      }, 100);
    });
  }
  /**
   * Get memory usage information
   */
  async getMemoryUsage() {
    /* istanbul ignore next */
    cov_rpxvgdhc3().f[15]++;
    const totalMem =
    /* istanbul ignore next */
    (cov_rpxvgdhc3().s[151]++, os_1.default.totalmem());
    const freeMem =
    /* istanbul ignore next */
    (cov_rpxvgdhc3().s[152]++, os_1.default.freemem());
    const usedMem =
    /* istanbul ignore next */
    (cov_rpxvgdhc3().s[153]++, totalMem - freeMem);
    let swapUsed =
    /* istanbul ignore next */
    (cov_rpxvgdhc3().s[154]++, 0);
    /* istanbul ignore next */
    cov_rpxvgdhc3().s[155]++;
    try {
      const swapInfo =
      /* istanbul ignore next */
      (cov_rpxvgdhc3().s[156]++, await execAsync('free | grep Swap'));
      const swapMatch =
      /* istanbul ignore next */
      (cov_rpxvgdhc3().s[157]++, swapInfo.stdout.match(/Swap:\s+\d+\s+(\d+)/));
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[158]++;
      if (swapMatch) {
        /* istanbul ignore next */
        cov_rpxvgdhc3().b[27][0]++;
        cov_rpxvgdhc3().s[159]++;
        swapUsed = parseInt(swapMatch[1]) * 1024; // Convert from KB to bytes
      } else
      /* istanbul ignore next */
      {
        cov_rpxvgdhc3().b[27][1]++;
      }
    } catch (error) {
      // Ignore if can't get swap info
    }
    /* istanbul ignore next */
    cov_rpxvgdhc3().s[160]++;
    return {
      used: usedMem,
      total: totalMem,
      percentage: usedMem / totalMem * 100,
      swap: swapUsed
    };
  }
  /**
   * Get disk usage information
   */
  async getDiskUsage() {
    /* istanbul ignore next */
    cov_rpxvgdhc3().f[16]++;
    cov_rpxvgdhc3().s[161]++;
    try {
      const diskInfo =
      /* istanbul ignore next */
      (cov_rpxvgdhc3().s[162]++, await execAsync('df -h / | tail -1'));
      const parts =
      /* istanbul ignore next */
      (cov_rpxvgdhc3().s[163]++, diskInfo.stdout.trim().split(/\s+/));
      const total =
      /* istanbul ignore next */
      (cov_rpxvgdhc3().s[164]++, this.parseStorageSize(parts[1]));
      const used =
      /* istanbul ignore next */
      (cov_rpxvgdhc3().s[165]++, this.parseStorageSize(parts[2]));
      const percentage =
      /* istanbul ignore next */
      (cov_rpxvgdhc3().s[166]++, parseFloat(parts[4].replace('%', '')));
      // Try to get IOPS if available
      let iops =
      /* istanbul ignore next */
      (cov_rpxvgdhc3().s[167]++, 0);
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[168]++;
      try {
        const iostat =
        /* istanbul ignore next */
        (cov_rpxvgdhc3().s[169]++, await execAsync('iostat -x 1 1 | tail -n +4 | head -1'));
        const ioMatch =
        /* istanbul ignore next */
        (cov_rpxvgdhc3().s[170]++, iostat.stdout.match(/\s+([0-9.]+)\s+([0-9.]+)$/));
        /* istanbul ignore next */
        cov_rpxvgdhc3().s[171]++;
        if (ioMatch) {
          /* istanbul ignore next */
          cov_rpxvgdhc3().b[28][0]++;
          cov_rpxvgdhc3().s[172]++;
          iops = parseFloat(ioMatch[1]) + parseFloat(ioMatch[2]);
        } else
        /* istanbul ignore next */
        {
          cov_rpxvgdhc3().b[28][1]++;
        }
      } catch (error) {
        // Ignore if iostat not available
      }
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[173]++;
      return {
        used,
        total,
        percentage,
        iops
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[174]++;
      return {
        used: 0,
        total: 0,
        percentage: 0
      };
    }
  }
  /**
   * Get CPU temperature
   */
  async getCPUTemperature() {
    /* istanbul ignore next */
    cov_rpxvgdhc3().f[17]++;
    cov_rpxvgdhc3().s[175]++;
    try {
      // Try different methods to get CPU temperature
      const methods =
      /* istanbul ignore next */
      (cov_rpxvgdhc3().s[176]++, ['cat /sys/class/thermal/thermal_zone0/temp', 'sensors | grep "Core 0" | awk \'{print $3}\' | sed \'s/+//\' | sed \'s/°C//\'', 'cat /sys/devices/platform/coretemp.0/hwmon/hwmon*/temp1_input']);
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[177]++;
      for (const method of methods) {
        /* istanbul ignore next */
        cov_rpxvgdhc3().s[178]++;
        try {
          const result =
          /* istanbul ignore next */
          (cov_rpxvgdhc3().s[179]++, await execAsync(method));
          const temp =
          /* istanbul ignore next */
          (cov_rpxvgdhc3().s[180]++, parseFloat(result.stdout.trim()));
          // Convert from millidegrees if necessary
          /* istanbul ignore next */
          cov_rpxvgdhc3().s[181]++;
          if (temp > 1000) {
            /* istanbul ignore next */
            cov_rpxvgdhc3().b[29][0]++;
            cov_rpxvgdhc3().s[182]++;
            return temp / 1000;
          } else
          /* istanbul ignore next */
          {
            cov_rpxvgdhc3().b[29][1]++;
          }
          cov_rpxvgdhc3().s[183]++;
          if (
          /* istanbul ignore next */
          (cov_rpxvgdhc3().b[31][0]++, temp > 0) &&
          /* istanbul ignore next */
          (cov_rpxvgdhc3().b[31][1]++, temp < 150)) {
            /* istanbul ignore next */
            cov_rpxvgdhc3().b[30][0]++;
            cov_rpxvgdhc3().s[184]++;
            return temp;
          } else
          /* istanbul ignore next */
          {
            cov_rpxvgdhc3().b[30][1]++;
          }
        } catch (error) {
          /* istanbul ignore next */
          cov_rpxvgdhc3().s[185]++;
          continue;
        }
      }
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[186]++;
      return 0; // Temperature not available
    } catch (error) {
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[187]++;
      return 0;
    }
  }
  /**
   * Check SSH tunnel latency
   */
  async checkSSHTunnelLatency() {
    /* istanbul ignore next */
    cov_rpxvgdhc3().f[18]++;
    cov_rpxvgdhc3().s[188]++;
    try {
      const startTime =
      /* istanbul ignore next */
      (cov_rpxvgdhc3().s[189]++, perf_hooks_1.performance.now());
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[190]++;
      await execAsync('curl -s --max-time 5 http://localhost:8443/api/v4/spot/time');
      const endTime =
      /* istanbul ignore next */
      (cov_rpxvgdhc3().s[191]++, perf_hooks_1.performance.now());
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[192]++;
      return endTime - startTime;
    } catch (error) {
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[193]++;
      return 999; // High latency indicates connection issues
    }
  }
  /**
   * Check API latency
   */
  async checkAPILatency() {
    /* istanbul ignore next */
    cov_rpxvgdhc3().f[19]++;
    cov_rpxvgdhc3().s[194]++;
    try {
      const startTime =
      /* istanbul ignore next */
      (cov_rpxvgdhc3().s[195]++, perf_hooks_1.performance.now());
      // This would be replaced with actual API call
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[196]++;
      await new Promise(resolve => {
        /* istanbul ignore next */
        cov_rpxvgdhc3().f[20]++;
        cov_rpxvgdhc3().s[197]++;
        return setTimeout(resolve, 10);
      });
      const endTime =
      /* istanbul ignore next */
      (cov_rpxvgdhc3().s[198]++, perf_hooks_1.performance.now());
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[199]++;
      return endTime - startTime;
    } catch (error) {
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[200]++;
      return 999;
    }
  }
  /**
   * Get network statistics
   */
  async getNetworkStatistics() {
    /* istanbul ignore next */
    cov_rpxvgdhc3().f[21]++;
    cov_rpxvgdhc3().s[201]++;
    try {
      // Get active connections
      const netstat =
      /* istanbul ignore next */
      (cov_rpxvgdhc3().s[202]++, await execAsync('netstat -an | grep ESTABLISHED | wc -l'));
      const connections =
      /* istanbul ignore next */
      (cov_rpxvgdhc3().s[203]++,
      /* istanbul ignore next */
      (cov_rpxvgdhc3().b[32][0]++, parseInt(netstat.stdout.trim())) ||
      /* istanbul ignore next */
      (cov_rpxvgdhc3().b[32][1]++, 0));
      // Simplified bandwidth and packet loss (would need more sophisticated monitoring)
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[204]++;
      return {
        bandwidth: 1000000,
        // 1MB/s default
        packetLoss: 0,
        connections
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[205]++;
      return {
        bandwidth: 0,
        packetLoss: 0,
        connections: 0
      };
    }
  }
  /**
   * Get database connections
   */
  async getDatabaseConnections() {
    /* istanbul ignore next */
    cov_rpxvgdhc3().f[22]++;
    cov_rpxvgdhc3().s[206]++;
    try {
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[207]++;
      // This would be replaced with actual database query
      return 5; // Default connection count
    } catch (error) {
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[208]++;
      return 0;
    }
  }
  /**
   * Measure database query time
   */
  async measureDatabaseQueryTime() {
    /* istanbul ignore next */
    cov_rpxvgdhc3().f[23]++;
    cov_rpxvgdhc3().s[209]++;
    try {
      const startTime =
      /* istanbul ignore next */
      (cov_rpxvgdhc3().s[210]++, perf_hooks_1.performance.now());
      // This would be replaced with actual database query
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[211]++;
      await new Promise(resolve => {
        /* istanbul ignore next */
        cov_rpxvgdhc3().f[24]++;
        cov_rpxvgdhc3().s[212]++;
        return setTimeout(resolve, 5);
      });
      const endTime =
      /* istanbul ignore next */
      (cov_rpxvgdhc3().s[213]++, perf_hooks_1.performance.now());
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[214]++;
      return endTime - startTime;
    } catch (error) {
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[215]++;
      return 999;
    }
  }
  /**
   * Get database cache hit ratio
   */
  async getDatabaseCacheHitRatio() {
    /* istanbul ignore next */
    cov_rpxvgdhc3().f[25]++;
    cov_rpxvgdhc3().s[216]++;
    try {
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[217]++;
      // This would be replaced with actual database query
      return 95.5; // Default cache hit ratio
    } catch (error) {
      /* istanbul ignore next */
      cov_rpxvgdhc3().s[218]++;
      return 0;
    }
  }
  /**
   * Parse storage size string to bytes
   */
  parseStorageSize(sizeStr) {
    /* istanbul ignore next */
    cov_rpxvgdhc3().f[26]++;
    const units =
    /* istanbul ignore next */
    (cov_rpxvgdhc3().s[219]++, {
      K: 1024,
      M: 1024 ** 2,
      G: 1024 ** 3,
      T: 1024 ** 4
    });
    const match =
    /* istanbul ignore next */
    (cov_rpxvgdhc3().s[220]++, sizeStr.match(/^([0-9.]+)([KMGT]?)$/));
    /* istanbul ignore next */
    cov_rpxvgdhc3().s[221]++;
    if (!match) {
      /* istanbul ignore next */
      cov_rpxvgdhc3().b[33][0]++;
      cov_rpxvgdhc3().s[222]++;
      return 0;
    } else
    /* istanbul ignore next */
    {
      cov_rpxvgdhc3().b[33][1]++;
    }
    const value =
    /* istanbul ignore next */
    (cov_rpxvgdhc3().s[223]++, parseFloat(match[1]));
    const unit =
    /* istanbul ignore next */
    (cov_rpxvgdhc3().s[224]++, match[2]);
    /* istanbul ignore next */
    cov_rpxvgdhc3().s[225]++;
    return value * (
    /* istanbul ignore next */
    (cov_rpxvgdhc3().b[34][0]++, units[unit]) ||
    /* istanbul ignore next */
    (cov_rpxvgdhc3().b[34][1]++, 1));
  }
  /**
   * Determine system status based on metrics
   */
  determineSystemStatus(metrics) {
    /* istanbul ignore next */
    cov_rpxvgdhc3().f[27]++;
    const {
      cpu,
      memory,
      disk,
      temperature
    } =
    /* istanbul ignore next */
    (cov_rpxvgdhc3().s[226]++, metrics);
    /* istanbul ignore next */
    cov_rpxvgdhc3().s[227]++;
    if (
    /* istanbul ignore next */
    (cov_rpxvgdhc3().b[36][0]++, cpu > this.thresholds.cpu.critical) ||
    /* istanbul ignore next */
    (cov_rpxvgdhc3().b[36][1]++, memory > this.thresholds.memory.critical) ||
    /* istanbul ignore next */
    (cov_rpxvgdhc3().b[36][2]++, disk > this.thresholds.disk.critical) ||
    /* istanbul ignore next */
    (cov_rpxvgdhc3().b[36][3]++, temperature > this.thresholds.temperature.critical)) {
      /* istanbul ignore next */
      cov_rpxvgdhc3().b[35][0]++;
      cov_rpxvgdhc3().s[228]++;
      return 'critical';
    } else
    /* istanbul ignore next */
    {
      cov_rpxvgdhc3().b[35][1]++;
    }
    cov_rpxvgdhc3().s[229]++;
    if (
    /* istanbul ignore next */
    (cov_rpxvgdhc3().b[38][0]++, cpu > this.thresholds.cpu.warning) ||
    /* istanbul ignore next */
    (cov_rpxvgdhc3().b[38][1]++, memory > this.thresholds.memory.warning) ||
    /* istanbul ignore next */
    (cov_rpxvgdhc3().b[38][2]++, disk > this.thresholds.disk.warning) ||
    /* istanbul ignore next */
    (cov_rpxvgdhc3().b[38][3]++, temperature > this.thresholds.temperature.warning)) {
      /* istanbul ignore next */
      cov_rpxvgdhc3().b[37][0]++;
      cov_rpxvgdhc3().s[230]++;
      return 'warning';
    } else
    /* istanbul ignore next */
    {
      cov_rpxvgdhc3().b[37][1]++;
    }
    cov_rpxvgdhc3().s[231]++;
    return 'healthy';
  }
  /**
   * Store performance metric in history
   */
  storePerformanceMetric(metric, value) {
    /* istanbul ignore next */
    cov_rpxvgdhc3().f[28]++;
    const history =
    /* istanbul ignore next */
    (cov_rpxvgdhc3().s[232]++,
    /* istanbul ignore next */
    (cov_rpxvgdhc3().b[39][0]++, this.performanceHistory.get(metric)) ||
    /* istanbul ignore next */
    (cov_rpxvgdhc3().b[39][1]++, []));
    /* istanbul ignore next */
    cov_rpxvgdhc3().s[233]++;
    history.push(value);
    // Keep only last 100 values
    /* istanbul ignore next */
    cov_rpxvgdhc3().s[234]++;
    if (history.length > 100) {
      /* istanbul ignore next */
      cov_rpxvgdhc3().b[40][0]++;
      cov_rpxvgdhc3().s[235]++;
      history.shift();
    } else
    /* istanbul ignore next */
    {
      cov_rpxvgdhc3().b[40][1]++;
    }
    cov_rpxvgdhc3().s[236]++;
    this.performanceHistory.set(metric, history);
  }
  /**
   * Get performance history
   */
  getPerformanceHistory() {
    /* istanbul ignore next */
    cov_rpxvgdhc3().f[29]++;
    cov_rpxvgdhc3().s[237]++;
    return Object.fromEntries(this.performanceHistory);
  }
  /**
   * Update performance thresholds
   */
  updateThresholds(newThresholds) {
    /* istanbul ignore next */
    cov_rpxvgdhc3().f[30]++;
    cov_rpxvgdhc3().s[238]++;
    this.thresholds = {
      ...this.thresholds,
      ...newThresholds
    };
    /* istanbul ignore next */
    cov_rpxvgdhc3().s[239]++;
    trading_logger_1.tradingLogger.info('Performance thresholds updated', {
      component: 'PerformanceMonitor',
      thresholds: this.thresholds
    });
  }
  /**
   * Get current hardware information
   */
  getHardwareInfo() {
    /* istanbul ignore next */
    cov_rpxvgdhc3().f[31]++;
    cov_rpxvgdhc3().s[240]++;
    return this.hardwareInfo;
  }
  /**
   * Get monitoring status
   */
  isMonitoringActive() {
    /* istanbul ignore next */
    cov_rpxvgdhc3().f[32]++;
    cov_rpxvgdhc3().s[241]++;
    return this.isMonitoring;
  }
}
/* istanbul ignore next */
cov_rpxvgdhc3().s[242]++;
exports.PerformanceMonitor = PerformanceMonitor;
// Create and export singleton instance
/* istanbul ignore next */
cov_rpxvgdhc3().s[243]++;
exports.performanceMonitor = new PerformanceMonitor();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,