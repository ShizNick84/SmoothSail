a2d331227ede55efe253b958dbf72299
"use strict";

/**
 * =============================================================================
 * BACKTESTING SYSTEM EXAMPLE - COMPLETE IMPLEMENTATION
 * =============================================================================
 *
 * This example demonstrates the complete backtesting system implementation
 * with real historical data fetching, strategy harmonization, performance
 * calculation, and comprehensive reporting.
 *
 * FEATURES DEMONSTRATED:
 * - Historical data fetching with real data validation
 * - Strategy harmonization across multiple indicators
 * - Realistic execution simulation with slippage and fees
 * - Comprehensive performance metrics calculation
 * - Risk management and capital protection
 * - Detailed backtesting reports
 *
 * @author AI Crypto Trading System
 * @version 1.0.0
 * @license PROPRIETARY
 * =============================================================================
 */
/* istanbul ignore next */
function cov_1up5od8lu9() {
  var path = "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\backtesting\\example-backtest.ts";
  var hash = "f5e274096340999cd82c8de1915be198851f7f62";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\backtesting\\example-backtest.ts",
    statementMap: {
      "0": {
        start: {
          line: 24,
          column: 0
        },
        end: {
          line: 24,
          column: 62
        }
      },
      "1": {
        start: {
          line: 25,
          column: 0
        },
        end: {
          line: 25,
          column: 43
        }
      },
      "2": {
        start: {
          line: 26,
          column: 0
        },
        end: {
          line: 26,
          column: 54
        }
      },
      "3": {
        start: {
          line: 27,
          column: 0
        },
        end: {
          line: 27,
          column: 64
        }
      },
      "4": {
        start: {
          line: 28,
          column: 29
        },
        end: {
          line: 28,
          column: 60
        }
      },
      "5": {
        start: {
          line: 29,
          column: 27
        },
        end: {
          line: 29,
          column: 56
        }
      },
      "6": {
        start: {
          line: 30,
          column: 24
        },
        end: {
          line: 30,
          column: 62
        }
      },
      "7": {
        start: {
          line: 31,
          column: 17
        },
        end: {
          line: 31,
          column: 49
        }
      },
      "8": {
        start: {
          line: 36,
          column: 11
        },
        end: {
          line: 36,
          column: 31
        }
      },
      "9": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 85
        }
      },
      "10": {
        start: {
          line: 45,
          column: 24
        },
        end: {
          line: 45,
          column: 26
        }
      },
      "11": {
        start: {
          line: 47,
          column: 35
        },
        end: {
          line: 55,
          column: 11
        }
      },
      "12": {
        start: {
          line: 47,
          column: 59
        },
        end: {
          line: 55,
          column: 9
        }
      },
      "13": {
        start: {
          line: 57,
          column: 27
        },
        end: {
          line: 57,
          column: 29
        }
      },
      "14": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 87,
          column: 9
        }
      },
      "15": {
        start: {
          line: 58,
          column: 21
        },
        end: {
          line: 58,
          column: 31
        }
      },
      "16": {
        start: {
          line: 59,
          column: 31
        },
        end: {
          line: 59,
          column: 78
        }
      },
      "17": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 86,
          column: 13
        }
      },
      "18": {
        start: {
          line: 62,
          column: 41
        },
        end: {
          line: 62,
          column: 94
        }
      },
      "19": {
        start: {
          line: 63,
          column: 16
        },
        end: {
          line: 82,
          column: 17
        }
      },
      "20": {
        start: {
          line: 65,
          column: 42
        },
        end: {
          line: 80,
          column: 21
        }
      },
      "21": {
        start: {
          line: 71,
          column: 75
        },
        end: {
          line: 71,
          column: 83
        }
      },
      "22": {
        start: {
          line: 81,
          column: 20
        },
        end: {
          line: 81,
          column: 48
        }
      },
      "23": {
        start: {
          line: 85,
          column: 16
        },
        end: {
          line: 85,
          column: 99
        }
      },
      "24": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 88,
          column: 87
        }
      },
      "25": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 89,
          column: 23
        }
      },
      "26": {
        start: {
          line: 96,
          column: 23
        },
        end: {
          line: 96,
          column: 26
        }
      },
      "27": {
        start: {
          line: 97,
          column: 34
        },
        end: {
          line: 97,
          column: 63
        }
      },
      "28": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 98,
          column: 50
        }
      },
      "29": {
        start: {
          line: 101,
          column: 0
        },
        end: {
          line: 101,
          column: 62
        }
      },
      "30": {
        start: {
          line: 106,
          column: 4
        },
        end: {
          line: 106,
          column: 77
        }
      },
      "31": {
        start: {
          line: 107,
          column: 4
        },
        end: {
          line: 189,
          column: 5
        }
      },
      "32": {
        start: {
          line: 109,
          column: 33
        },
        end: {
          line: 114,
          column: 9
        }
      },
      "33": {
        start: {
          line: 112,
          column: 16
        },
        end: {
          line: 112,
          column: 76
        }
      },
      "34": {
        start: {
          line: 115,
          column: 34
        },
        end: {
          line: 115,
          column: 94
        }
      },
      "35": {
        start: {
          line: 116,
          column: 35
        },
        end: {
          line: 116,
          column: 66
        }
      },
      "36": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 118,
          column: 63
        }
      },
      "37": {
        start: {
          line: 120,
          column: 31
        },
        end: {
          line: 146,
          column: 9
        }
      },
      "38": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 153,
          column: 11
        }
      },
      "39": {
        start: {
          line: 155,
          column: 8
        },
        end: {
          line: 155,
          column: 82
        }
      },
      "40": {
        start: {
          line: 156,
          column: 23
        },
        end: {
          line: 156,
          column: 74
        }
      },
      "41": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 158,
          column: 70
        }
      },
      "42": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 166,
          column: 11
        }
      },
      "43": {
        start: {
          line: 168,
          column: 29
        },
        end: {
          line: 177,
          column: 9
        }
      },
      "44": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 178,
          column: 79
        }
      },
      "45": {
        start: {
          line: 179,
          column: 23
        },
        end: {
          line: 179,
          column: 108
        }
      },
      "46": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 180,
          column: 73
        }
      },
      "47": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 181,
          column: 79
        }
      },
      "48": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 183,
          column: 40
        }
      },
      "49": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 184,
          column: 22
        }
      },
      "50": {
        start: {
          line: 187,
          column: 8
        },
        end: {
          line: 187,
          column: 70
        }
      },
      "51": {
        start: {
          line: 188,
          column: 8
        },
        end: {
          line: 188,
          column: 20
        }
      },
      "52": {
        start: {
          line: 195,
          column: 4
        },
        end: {
          line: 195,
          column: 70
        }
      },
      "53": {
        start: {
          line: 196,
          column: 19
        },
        end: {
          line: 196,
          column: 21
        }
      },
      "54": {
        start: {
          line: 197,
          column: 21
        },
        end: {
          line: 197,
          column: 23
        }
      },
      "55": {
        start: {
          line: 199,
          column: 4
        },
        end: {
          line: 201,
          column: 5
        }
      },
      "56": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 200,
          column: 91
        }
      },
      "57": {
        start: {
          line: 202,
          column: 4
        },
        end: {
          line: 204,
          column: 5
        }
      },
      "58": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 203,
          column: 105
        }
      },
      "59": {
        start: {
          line: 205,
          column: 4
        },
        end: {
          line: 207,
          column: 5
        }
      },
      "60": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 206,
          column: 95
        }
      },
      "61": {
        start: {
          line: 209,
          column: 4
        },
        end: {
          line: 211,
          column: 5
        }
      },
      "62": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 210,
          column: 109
        }
      },
      "63": {
        start: {
          line: 212,
          column: 4
        },
        end: {
          line: 214,
          column: 5
        }
      },
      "64": {
        start: {
          line: 213,
          column: 8
        },
        end: {
          line: 213,
          column: 108
        }
      },
      "65": {
        start: {
          line: 215,
          column: 4
        },
        end: {
          line: 217,
          column: 5
        }
      },
      "66": {
        start: {
          line: 216,
          column: 8
        },
        end: {
          line: 216,
          column: 114
        }
      },
      "67": {
        start: {
          line: 219,
          column: 4
        },
        end: {
          line: 226,
          column: 5
        }
      },
      "68": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 222,
          column: 9
        }
      },
      "69": {
        start: {
          line: 221,
          column: 12
        },
        end: {
          line: 221,
          column: 74
        }
      },
      "70": {
        start: {
          line: 223,
          column: 8
        },
        end: {
          line: 225,
          column: 9
        }
      },
      "71": {
        start: {
          line: 224,
          column: 12
        },
        end: {
          line: 224,
          column: 121
        }
      },
      "72": {
        start: {
          line: 228,
          column: 4
        },
        end: {
          line: 231,
          column: 5
        }
      },
      "73": {
        start: {
          line: 229,
          column: 8
        },
        end: {
          line: 229,
          column: 71
        }
      },
      "74": {
        start: {
          line: 230,
          column: 8
        },
        end: {
          line: 230,
          column: 76
        }
      },
      "75": {
        start: {
          line: 232,
          column: 4
        },
        end: {
          line: 237,
          column: 5
        }
      },
      "76": {
        start: {
          line: 233,
          column: 8
        },
        end: {
          line: 233,
          column: 75
        }
      },
      "77": {
        start: {
          line: 236,
          column: 8
        },
        end: {
          line: 236,
          column: 82
        }
      },
      "78": {
        start: {
          line: 244,
          column: 17
        },
        end: {
          line: 244,
          column: 19
        }
      },
      "79": {
        start: {
          line: 245,
          column: 22
        },
        end: {
          line: 245,
          column: 54
        }
      },
      "80": {
        start: {
          line: 246,
          column: 22
        },
        end: {
          line: 246,
          column: 27
        }
      },
      "81": {
        start: {
          line: 248,
          column: 4
        },
        end: {
          line: 274,
          column: 5
        }
      },
      "82": {
        start: {
          line: 248,
          column: 17
        },
        end: {
          line: 248,
          column: 18
        }
      },
      "83": {
        start: {
          line: 249,
          column: 26
        },
        end: {
          line: 249,
          column: 78
        }
      },
      "84": {
        start: {
          line: 251,
          column: 27
        },
        end: {
          line: 251,
          column: 31
        }
      },
      "85": {
        start: {
          line: 252,
          column: 22
        },
        end: {
          line: 252,
          column: 46
        }
      },
      "86": {
        start: {
          line: 253,
          column: 27
        },
        end: {
          line: 253,
          column: 61
        }
      },
      "87": {
        start: {
          line: 254,
          column: 28
        },
        end: {
          line: 254,
          column: 46
        }
      },
      "88": {
        start: {
          line: 255,
          column: 29
        },
        end: {
          line: 255,
          column: 68
        }
      },
      "89": {
        start: {
          line: 256,
          column: 21
        },
        end: {
          line: 256,
          column: 60
        }
      },
      "90": {
        start: {
          line: 257,
          column: 22
        },
        end: {
          line: 257,
          column: 34
        }
      },
      "91": {
        start: {
          line: 258,
          column: 21
        },
        end: {
          line: 258,
          column: 72
        }
      },
      "92": {
        start: {
          line: 259,
          column: 20
        },
        end: {
          line: 259,
          column: 71
        }
      },
      "93": {
        start: {
          line: 260,
          column: 23
        },
        end: {
          line: 260,
          column: 50
        }
      },
      "94": {
        start: {
          line: 261,
          column: 8
        },
        end: {
          line: 273,
          column: 11
        }
      },
      "95": {
        start: {
          line: 275,
          column: 4
        },
        end: {
          line: 275,
          column: 16
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 38,
            column: 4
          },
          end: {
            line: 38,
            column: 5
          }
        },
        loc: {
          start: {
            line: 38,
            column: 18
          },
          end: {
            line: 40,
            column: 5
          }
        },
        line: 38
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 44,
            column: 4
          },
          end: {
            line: 44,
            column: 5
          }
        },
        loc: {
          start: {
            line: 44,
            column: 38
          },
          end: {
            line: 90,
            column: 5
          }
        },
        line: 44
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 47,
            column: 50
          },
          end: {
            line: 47,
            column: 51
          }
        },
        loc: {
          start: {
            line: 47,
            column: 59
          },
          end: {
            line: 55,
            column: 9
          }
        },
        line: 47
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 71,
            column: 68
          },
          end: {
            line: 71,
            column: 69
          }
        },
        loc: {
          start: {
            line: 71,
            column: 75
          },
          end: {
            line: 71,
            column: 83
          }
        },
        line: 71
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 94,
            column: 4
          },
          end: {
            line: 94,
            column: 5
          }
        },
        loc: {
          start: {
            line: 94,
            column: 46
          },
          end: {
            line: 99,
            column: 5
          }
        },
        line: 94
      },
      "5": {
        name: "runBacktestingExample",
        decl: {
          start: {
            line: 105,
            column: 15
          },
          end: {
            line: 105,
            column: 36
          }
        },
        loc: {
          start: {
            line: 105,
            column: 39
          },
          end: {
            line: 190,
            column: 1
          }
        },
        line: 105
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 110,
            column: 25
          },
          end: {
            line: 110,
            column: 26
          }
        },
        loc: {
          start: {
            line: 110,
            column: 37
          },
          end: {
            line: 113,
            column: 13
          }
        },
        line: 110
      },
      "7": {
        name: "validateBacktestResults",
        decl: {
          start: {
            line: 194,
            column: 9
          },
          end: {
            line: 194,
            column: 32
          }
        },
        loc: {
          start: {
            line: 194,
            column: 41
          },
          end: {
            line: 238,
            column: 1
          }
        },
        line: 194
      },
      "8": {
        name: "createSampleHistoricalData",
        decl: {
          start: {
            line: 243,
            column: 9
          },
          end: {
            line: 243,
            column: 35
          }
        },
        loc: {
          start: {
            line: 243,
            column: 38
          },
          end: {
            line: 276,
            column: 1
          }
        },
        line: 243
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 63,
            column: 16
          },
          end: {
            line: 82,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 63,
            column: 16
          },
          end: {
            line: 82,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 63
      },
      "1": {
        loc: {
          start: {
            line: 63,
            column: 20
          },
          end: {
            line: 63,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 63,
            column: 20
          },
          end: {
            line: 63,
            column: 36
          }
        }, {
          start: {
            line: 63,
            column: 40
          },
          end: {
            line: 63,
            column: 81
          }
        }],
        line: 63
      },
      "2": {
        loc: {
          start: {
            line: 199,
            column: 4
          },
          end: {
            line: 201,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 199,
            column: 4
          },
          end: {
            line: 201,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 199
      },
      "3": {
        loc: {
          start: {
            line: 202,
            column: 4
          },
          end: {
            line: 204,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 202,
            column: 4
          },
          end: {
            line: 204,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 202
      },
      "4": {
        loc: {
          start: {
            line: 205,
            column: 4
          },
          end: {
            line: 207,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 205,
            column: 4
          },
          end: {
            line: 207,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 205
      },
      "5": {
        loc: {
          start: {
            line: 209,
            column: 4
          },
          end: {
            line: 211,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 209,
            column: 4
          },
          end: {
            line: 211,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 209
      },
      "6": {
        loc: {
          start: {
            line: 212,
            column: 4
          },
          end: {
            line: 214,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 212,
            column: 4
          },
          end: {
            line: 214,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 212
      },
      "7": {
        loc: {
          start: {
            line: 215,
            column: 4
          },
          end: {
            line: 217,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 215,
            column: 4
          },
          end: {
            line: 217,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 215
      },
      "8": {
        loc: {
          start: {
            line: 220,
            column: 8
          },
          end: {
            line: 222,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 220,
            column: 8
          },
          end: {
            line: 222,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 220
      },
      "9": {
        loc: {
          start: {
            line: 223,
            column: 8
          },
          end: {
            line: 225,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 223,
            column: 8
          },
          end: {
            line: 225,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 223
      },
      "10": {
        loc: {
          start: {
            line: 228,
            column: 4
          },
          end: {
            line: 231,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 228,
            column: 4
          },
          end: {
            line: 231,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 228
      },
      "11": {
        loc: {
          start: {
            line: 232,
            column: 4
          },
          end: {
            line: 237,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 232,
            column: 4
          },
          end: {
            line: 237,
            column: 5
          }
        }, {
          start: {
            line: 235,
            column: 9
          },
          end: {
            line: 237,
            column: 5
          }
        }],
        line: 232
      },
      "12": {
        loc: {
          start: {
            line: 256,
            column: 21
          },
          end: {
            line: 256,
            column: 60
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 256,
            column: 31
          },
          end: {
            line: 256,
            column: 40
          }
        }, {
          start: {
            line: 256,
            column: 43
          },
          end: {
            line: 256,
            column: 60
          }
        }],
        line: 256
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\backtesting\\example-backtest.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\backtesting\\example-backtest.ts"],
      sourcesContent: ["/**\r\n * =============================================================================\r\n * BACKTESTING SYSTEM EXAMPLE - COMPLETE IMPLEMENTATION\r\n * =============================================================================\r\n * \r\n * This example demonstrates the complete backtesting system implementation\r\n * with real historical data fetching, strategy harmonization, performance\r\n * calculation, and comprehensive reporting.\r\n * \r\n * FEATURES DEMONSTRATED:\r\n * - Historical data fetching with real data validation\r\n * - Strategy harmonization across multiple indicators\r\n * - Realistic execution simulation with slippage and fees\r\n * - Comprehensive performance metrics calculation\r\n * - Risk management and capital protection\r\n * - Detailed backtesting reports\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport { BacktestingEngine } from './backtesting-engine';\r\nimport { HistoricalDataFetcher } from './historical-data-fetcher';\r\nimport { BacktestReportGenerator } from './report-generator';\r\nimport { StrategyHarmonizationEngine } from '../strategies/harmonization';\r\nimport { GateIOClient } from '../api/gate-io-client';\r\nimport { \r\n  BacktestConfig, \r\n  BacktestResult,\r\n  BacktestReportConfig,\r\n  HistoricalMarketData \r\n} from './types';\r\nimport { TradingSignal } from '../strategies/types';\r\nimport { logger } from '@/core/logging/logger';\r\n\r\n/**\r\n * Example strategy that generates signals based on harmonized indicators\r\n */\r\nclass ExampleHarmonizedStrategy {\r\n  public name = 'HarmonizedStrategy';\r\n  private harmonizationEngine: StrategyHarmonizationEngine;\r\n\r\n  constructor() {\r\n    this.harmonizationEngine = new StrategyHarmonizationEngine();\r\n  }\r\n\r\n  /**\r\n   * Generate trading signals using harmonized strategy approach\r\n   */\r\n  public async generateSignals(marketData: HistoricalMarketData[]): Promise<TradingSignal[]> {\r\n    const signals: TradingSignal[] = [];\r\n    \r\n    // Convert historical data to market data format for strategies\r\n    const strategyMarketData = marketData.map(data => ({\r\n      symbol: data.symbol,\r\n      timestamp: data.timestamp,\r\n      open: data.open,\r\n      high: data.high,\r\n      low: data.low,\r\n      close: data.close,\r\n      volume: data.volume,\r\n    }));\r\n\r\n    // Process data in windows to generate signals\r\n    const windowSize = 50; // Minimum data points needed for indicators\r\n    \r\n    for (let i = windowSize; i < strategyMarketData.length; i++) {\r\n      const dataWindow = strategyMarketData.slice(i - windowSize, i + 1);\r\n      \r\n      try {\r\n        // Generate harmonized signal\r\n        const harmonizedSignal = this.harmonizationEngine.harmonizeSignals(dataWindow);\r\n        \r\n        if (harmonizedSignal && harmonizedSignal.overallSignal !== 'HOLD') {\r\n          // Convert harmonized signal to trading signal\r\n          const tradingSignal: TradingSignal = {\r\n            id: `harmonized_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n            symbol: harmonizedSignal.symbol,\r\n            type: harmonizedSignal.overallSignal,\r\n            strength: harmonizedSignal.strength,\r\n            confidence: harmonizedSignal.confidence,\r\n            indicators: harmonizedSignal.indicators.map(ind => ind.name),\r\n            reasoning: harmonizedSignal.reasoning,\r\n            riskReward: this.calculateRiskReward(harmonizedSignal.strength, harmonizedSignal.confidence),\r\n            timestamp: harmonizedSignal.timestamp,\r\n            metadata: {\r\n              harmonizedSignal,\r\n              conflicts: harmonizedSignal.conflicts,\r\n              weights: harmonizedSignal.weights,\r\n            },\r\n          };\r\n          \r\n          signals.push(tradingSignal);\r\n        }\r\n      } catch (error) {\r\n        logger.warn(`Failed to generate harmonized signal at index ${i}:`, error);\r\n      }\r\n    }\r\n    \r\n    logger.info(`Generated ${signals.length} harmonized trading signals`);\r\n    return signals;\r\n  }\r\n\r\n  /**\r\n   * Calculate risk-reward ratio based on signal strength and confidence\r\n   */\r\n  private calculateRiskReward(strength: number, confidence: number): number {\r\n    // Base risk-reward ratio of 1.5:1, adjusted by signal quality\r\n    const baseRR = 1.5;\r\n    const qualityMultiplier = (strength + confidence) / 200; // 0-1 range\r\n    return baseRR + (qualityMultiplier * 1.0); // Range: 1.5 - 2.5\r\n  }\r\n}\r\n\r\n/**\r\n * Run a comprehensive backtesting example\r\n */\r\nexport async function runBacktestingExample(): Promise<BacktestResult> {\r\n  logger.info('\uD83D\uDE80 Starting comprehensive backtesting example...');\r\n  \r\n  try {\r\n    // Initialize components (in real implementation, these would be properly configured)\r\n    const mockGateIOClient = {\r\n      makeRequest: async () => {\r\n        // Mock implementation - in real system this would fetch from Gate.io\r\n        throw new Error('Mock client - real implementation needed');\r\n      }\r\n    } as unknown as GateIOClient;\r\n    \r\n    const backtestingEngine = new BacktestingEngine(mockGateIOClient);\r\n    const harmonizedStrategy = new ExampleHarmonizedStrategy();\r\n    \r\n    // Register the harmonized strategy\r\n    backtestingEngine.registerStrategy(harmonizedStrategy);\r\n    \r\n    // Configure backtesting parameters\r\n    const backtestConfig: BacktestConfig = {\r\n      symbol: 'BTC_USDT',\r\n      startDate: new Date('2024-01-01T00:00:00Z'),\r\n      endDate: new Date('2024-01-07T23:59:59Z'), // 1 week backtest\r\n      initialBalance: 10000, // $10,000 starting capital\r\n      strategies: ['HarmonizedStrategy'],\r\n      \r\n      // Risk management configuration\r\n      riskManagement: {\r\n        maxRiskPerTrade: 0.02, // 2% risk per trade\r\n        stopLossPercentage: 0.01, // 1% stop loss\r\n        minRiskRewardRatio: 1.3, // Minimum 1.3:1 risk-reward\r\n        maxDrawdown: 0.15, // 15% maximum drawdown\r\n      },\r\n      \r\n      // Trading fees (Gate.io rates)\r\n      fees: {\r\n        maker: 0.002, // 0.2% maker fee\r\n        taker: 0.002, // 0.2% taker fee\r\n      },\r\n      \r\n      // Execution simulation\r\n      slippage: 0.001, // 0.1% slippage\r\n      \r\n      // Data validation (enforce real data only)\r\n      dataValidation: {\r\n        requireRealData: true, // CRITICAL: No mock data allowed\r\n        minDataPoints: 1000, // Minimum data points for reliable backtest\r\n        maxGapMinutes: 60, // Maximum 1 hour gaps in data\r\n      },\r\n    };\r\n    \r\n    logger.info('\uD83D\uDCCA Backtesting Configuration:', {\r\n      symbol: backtestConfig.symbol,\r\n      period: `${backtestConfig.startDate.toISOString()} to ${backtestConfig.endDate.toISOString()}`,\r\n      initialBalance: backtestConfig.initialBalance,\r\n      strategies: backtestConfig.strategies,\r\n      riskManagement: backtestConfig.riskManagement,\r\n    });\r\n    \r\n    // Run the backtest\r\n    logger.info('\uD83D\uDD04 Running backtest with harmonized strategies...');\r\n    const result = await backtestingEngine.runBacktest(backtestConfig);\r\n    \r\n    // Log key results\r\n    logger.info('\u2705 Backtesting completed successfully!');\r\n    logger.info('\uD83D\uDCC8 Performance Summary:', {\r\n      totalReturn: `${result.performance.totalReturnPercentage.toFixed(2)}%`,\r\n      sharpeRatio: result.performance.sharpeRatio.toFixed(2),\r\n      maxDrawdown: `${result.performance.maxDrawdownPercentage.toFixed(2)}%`,\r\n      winRate: `${result.trades.winRate.toFixed(1)}%`,\r\n      totalTrades: result.trades.total,\r\n      profitFactor: result.performance.profitFactor.toFixed(2),\r\n    });\r\n    \r\n    // Generate comprehensive report\r\n    const reportConfig: BacktestReportConfig = {\r\n      includeCharts: true,\r\n      includeTradeDetails: true,\r\n      includeStrategyBreakdown: true,\r\n      includeBenchmarkComparison: false, // No benchmark for this example\r\n      includeRiskMetrics: true,\r\n      includeMonthlyReturns: true,\r\n      format: 'HTML',\r\n      outputPath: './backtest-reports/harmonized-strategy-report.html',\r\n    };\r\n    \r\n    logger.info('\uD83D\uDCC4 Generating comprehensive backtest report...');\r\n    const report = await BacktestReportGenerator.generateReport(result, reportConfig);\r\n    \r\n    logger.info('\u2705 Backtest report generated successfully');\r\n    logger.info(`\uD83D\uDCC1 Report saved to: ${reportConfig.outputPath}`);\r\n    \r\n    // Validate results meet quality standards\r\n    validateBacktestResults(result);\r\n    \r\n    return result;\r\n    \r\n  } catch (error) {\r\n    logger.error('\u274C Backtesting example failed:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Validate backtest results meet quality standards\r\n */\r\nfunction validateBacktestResults(result: BacktestResult): void {\r\n  logger.info('\uD83D\uDD0D Validating backtest results quality...');\r\n  \r\n  const issues: string[] = [];\r\n  const warnings: string[] = [];\r\n  \r\n  // Data quality validation\r\n  if (result.dataQuality.dataIntegrityScore < 95) {\r\n    issues.push(`Low data integrity score: ${result.dataQuality.dataIntegrityScore}%`);\r\n  }\r\n  \r\n  if (result.dataQuality.dataSource !== 'GATE_IO_REAL_DATA') {\r\n    issues.push(`Invalid data source: ${result.dataQuality.dataSource} (must be GATE_IO_REAL_DATA)`);\r\n  }\r\n  \r\n  if (result.dataQuality.gapsDetected > 5) {\r\n    warnings.push(`High number of data gaps detected: ${result.dataQuality.gapsDetected}`);\r\n  }\r\n  \r\n  // Performance validation\r\n  if (result.trades.total < 5) {\r\n    warnings.push(`Low number of trades: ${result.trades.total} (may not be statistically significant)`);\r\n  }\r\n  \r\n  if (Math.abs(result.performance.sharpeRatio) > 10) {\r\n    warnings.push(`Extreme Sharpe ratio: ${result.performance.sharpeRatio} (may indicate overfitting)`);\r\n  }\r\n  \r\n  if (result.performance.maxDrawdownPercentage > 50) {\r\n    issues.push(`Excessive drawdown: ${result.performance.maxDrawdownPercentage}% (risk management failure)`);\r\n  }\r\n  \r\n  // Strategy validation\r\n  for (const [strategyName, strategyPerf] of Object.entries(result.strategyPerformance)) {\r\n    if (strategyPerf.trades === 0) {\r\n      warnings.push(`Strategy ${strategyName} generated no trades`);\r\n    }\r\n    \r\n    if (strategyPerf.signalAccuracy < 0.3) {\r\n      warnings.push(`Low signal accuracy for ${strategyName}: ${(strategyPerf.signalAccuracy * 100).toFixed(1)}%`);\r\n    }\r\n  }\r\n  \r\n  // Log validation results\r\n  if (issues.length > 0) {\r\n    logger.error('\u274C Backtest validation failed:', issues);\r\n    throw new Error(`Backtest validation failed: ${issues.join(', ')}`);\r\n  }\r\n  \r\n  if (warnings.length > 0) {\r\n    logger.warn('\u26A0\uFE0F Backtest validation warnings:', warnings);\r\n  } else {\r\n    logger.info('\u2705 Backtest results passed all quality validations');\r\n  }\r\n}\r\n\r\n/**\r\n * Example of creating sample historical data for testing\r\n * (In real implementation, this would come from Gate.io API)\r\n */\r\nexport function createSampleHistoricalData(): HistoricalMarketData[] {\r\n  const data: HistoricalMarketData[] = [];\r\n  const startTime = new Date('2024-01-01T00:00:00Z');\r\n  const basePrice = 42000;\r\n  \r\n  // Generate 1 week of hourly data (168 data points)\r\n  for (let i = 0; i < 168; i++) {\r\n    const timestamp = new Date(startTime.getTime() + (i * 60 * 60 * 1000));\r\n    \r\n    // Simulate realistic price movement\r\n    const volatility = 0.02; // 2% volatility\r\n    const trend = Math.sin(i / 24) * 0.001; // Daily trend cycle\r\n    const randomWalk = (Math.random() - 0.5) * volatility;\r\n    \r\n    const priceChange = trend + randomWalk;\r\n    const currentPrice = basePrice * (1 + priceChange * i / 168);\r\n    \r\n    const open = i === 0 ? basePrice : data[i - 1].close;\r\n    const close = currentPrice;\r\n    const high = Math.max(open, close) * (1 + Math.random() * 0.005);\r\n    const low = Math.min(open, close) * (1 - Math.random() * 0.005);\r\n    const volume = 1000 + Math.random() * 2000;\r\n    \r\n    data.push({\r\n      symbol: 'BTC_USDT',\r\n      timestamp,\r\n      open,\r\n      high,\r\n      low,\r\n      close,\r\n      volume,\r\n      validated: true,\r\n      source: 'GATE_IO',\r\n      integrity: `hash_${i}_${timestamp.getTime()}`,\r\n      fetchedAt: new Date(),\r\n    });\r\n  }\r\n  \r\n  return data;\r\n}\r\n\r\n// Export for use in other modules\r\nexport { ExampleHarmonizedStrategy };\r\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "f5e274096340999cd82c8de1915be198851f7f62"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1up5od8lu9 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1up5od8lu9();
cov_1up5od8lu9().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1up5od8lu9().s[1]++;
exports.ExampleHarmonizedStrategy = void 0;
/* istanbul ignore next */
cov_1up5od8lu9().s[2]++;
exports.runBacktestingExample = runBacktestingExample;
/* istanbul ignore next */
cov_1up5od8lu9().s[3]++;
exports.createSampleHistoricalData = createSampleHistoricalData;
const backtesting_engine_1 =
/* istanbul ignore next */
(cov_1up5od8lu9().s[4]++, require("./backtesting-engine"));
const report_generator_1 =
/* istanbul ignore next */
(cov_1up5od8lu9().s[5]++, require("./report-generator"));
const harmonization_1 =
/* istanbul ignore next */
(cov_1up5od8lu9().s[6]++, require("../strategies/harmonization"));
const logger_1 =
/* istanbul ignore next */
(cov_1up5od8lu9().s[7]++, require("@/core/logging/logger"));
/**
 * Example strategy that generates signals based on harmonized indicators
 */
class ExampleHarmonizedStrategy {
  name =
  /* istanbul ignore next */
  (cov_1up5od8lu9().s[8]++, 'HarmonizedStrategy');
  harmonizationEngine;
  constructor() {
    /* istanbul ignore next */
    cov_1up5od8lu9().f[0]++;
    cov_1up5od8lu9().s[9]++;
    this.harmonizationEngine = new harmonization_1.StrategyHarmonizationEngine();
  }
  /**
   * Generate trading signals using harmonized strategy approach
   */
  async generateSignals(marketData) {
    /* istanbul ignore next */
    cov_1up5od8lu9().f[1]++;
    const signals =
    /* istanbul ignore next */
    (cov_1up5od8lu9().s[10]++, []);
    // Convert historical data to market data format for strategies
    const strategyMarketData =
    /* istanbul ignore next */
    (cov_1up5od8lu9().s[11]++, marketData.map(data => {
      /* istanbul ignore next */
      cov_1up5od8lu9().f[2]++;
      cov_1up5od8lu9().s[12]++;
      return {
        symbol: data.symbol,
        timestamp: data.timestamp,
        open: data.open,
        high: data.high,
        low: data.low,
        close: data.close,
        volume: data.volume
      };
    }));
    // Process data in windows to generate signals
    const windowSize =
    /* istanbul ignore next */
    (cov_1up5od8lu9().s[13]++, 50); // Minimum data points needed for indicators
    /* istanbul ignore next */
    cov_1up5od8lu9().s[14]++;
    for (let i =
    /* istanbul ignore next */
    (cov_1up5od8lu9().s[15]++, windowSize); i < strategyMarketData.length; i++) {
      const dataWindow =
      /* istanbul ignore next */
      (cov_1up5od8lu9().s[16]++, strategyMarketData.slice(i - windowSize, i + 1));
      /* istanbul ignore next */
      cov_1up5od8lu9().s[17]++;
      try {
        // Generate harmonized signal
        const harmonizedSignal =
        /* istanbul ignore next */
        (cov_1up5od8lu9().s[18]++, this.harmonizationEngine.harmonizeSignals(dataWindow));
        /* istanbul ignore next */
        cov_1up5od8lu9().s[19]++;
        if (
        /* istanbul ignore next */
        (cov_1up5od8lu9().b[1][0]++, harmonizedSignal) &&
        /* istanbul ignore next */
        (cov_1up5od8lu9().b[1][1]++, harmonizedSignal.overallSignal !== 'HOLD')) {
          /* istanbul ignore next */
          cov_1up5od8lu9().b[0][0]++;
          // Convert harmonized signal to trading signal
          const tradingSignal =
          /* istanbul ignore next */
          (cov_1up5od8lu9().s[20]++, {
            id: `harmonized_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
            symbol: harmonizedSignal.symbol,
            type: harmonizedSignal.overallSignal,
            strength: harmonizedSignal.strength,
            confidence: harmonizedSignal.confidence,
            indicators: harmonizedSignal.indicators.map(ind => {
              /* istanbul ignore next */
              cov_1up5od8lu9().f[3]++;
              cov_1up5od8lu9().s[21]++;
              return ind.name;
            }),
            reasoning: harmonizedSignal.reasoning,
            riskReward: this.calculateRiskReward(harmonizedSignal.strength, harmonizedSignal.confidence),
            timestamp: harmonizedSignal.timestamp,
            metadata: {
              harmonizedSignal,
              conflicts: harmonizedSignal.conflicts,
              weights: harmonizedSignal.weights
            }
          });
          /* istanbul ignore next */
          cov_1up5od8lu9().s[22]++;
          signals.push(tradingSignal);
        } else
        /* istanbul ignore next */
        {
          cov_1up5od8lu9().b[0][1]++;
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_1up5od8lu9().s[23]++;
        logger_1.logger.warn(`Failed to generate harmonized signal at index ${i}:`, error);
      }
    }
    /* istanbul ignore next */
    cov_1up5od8lu9().s[24]++;
    logger_1.logger.info(`Generated ${signals.length} harmonized trading signals`);
    /* istanbul ignore next */
    cov_1up5od8lu9().s[25]++;
    return signals;
  }
  /**
   * Calculate risk-reward ratio based on signal strength and confidence
   */
  calculateRiskReward(strength, confidence) {
    /* istanbul ignore next */
    cov_1up5od8lu9().f[4]++;
    // Base risk-reward ratio of 1.5:1, adjusted by signal quality
    const baseRR =
    /* istanbul ignore next */
    (cov_1up5od8lu9().s[26]++, 1.5);
    const qualityMultiplier =
    /* istanbul ignore next */
    (cov_1up5od8lu9().s[27]++, (strength + confidence) / 200); // 0-1 range
    /* istanbul ignore next */
    cov_1up5od8lu9().s[28]++;
    return baseRR + qualityMultiplier * 1.0; // Range: 1.5 - 2.5
  }
}
/* istanbul ignore next */
cov_1up5od8lu9().s[29]++;
exports.ExampleHarmonizedStrategy = ExampleHarmonizedStrategy;
/**
 * Run a comprehensive backtesting example
 */
async function runBacktestingExample() {
  /* istanbul ignore next */
  cov_1up5od8lu9().f[5]++;
  cov_1up5od8lu9().s[30]++;
  logger_1.logger.info('🚀 Starting comprehensive backtesting example...');
  /* istanbul ignore next */
  cov_1up5od8lu9().s[31]++;
  try {
    // Initialize components (in real implementation, these would be properly configured)
    const mockGateIOClient =
    /* istanbul ignore next */
    (cov_1up5od8lu9().s[32]++, {
      makeRequest: async () => {
        /* istanbul ignore next */
        cov_1up5od8lu9().f[6]++;
        cov_1up5od8lu9().s[33]++;
        // Mock implementation - in real system this would fetch from Gate.io
        throw new Error('Mock client - real implementation needed');
      }
    });
    const backtestingEngine =
    /* istanbul ignore next */
    (cov_1up5od8lu9().s[34]++, new backtesting_engine_1.BacktestingEngine(mockGateIOClient));
    const harmonizedStrategy =
    /* istanbul ignore next */
    (cov_1up5od8lu9().s[35]++, new ExampleHarmonizedStrategy());
    // Register the harmonized strategy
    /* istanbul ignore next */
    cov_1up5od8lu9().s[36]++;
    backtestingEngine.registerStrategy(harmonizedStrategy);
    // Configure backtesting parameters
    const backtestConfig =
    /* istanbul ignore next */
    (cov_1up5od8lu9().s[37]++, {
      symbol: 'BTC_USDT',
      startDate: new Date('2024-01-01T00:00:00Z'),
      endDate: new Date('2024-01-07T23:59:59Z'),
      // 1 week backtest
      initialBalance: 10000,
      // $10,000 starting capital
      strategies: ['HarmonizedStrategy'],
      // Risk management configuration
      riskManagement: {
        maxRiskPerTrade: 0.02,
        // 2% risk per trade
        stopLossPercentage: 0.01,
        // 1% stop loss
        minRiskRewardRatio: 1.3,
        // Minimum 1.3:1 risk-reward
        maxDrawdown: 0.15 // 15% maximum drawdown
      },
      // Trading fees (Gate.io rates)
      fees: {
        maker: 0.002,
        // 0.2% maker fee
        taker: 0.002 // 0.2% taker fee
      },
      // Execution simulation
      slippage: 0.001,
      // 0.1% slippage
      // Data validation (enforce real data only)
      dataValidation: {
        requireRealData: true,
        // CRITICAL: No mock data allowed
        minDataPoints: 1000,
        // Minimum data points for reliable backtest
        maxGapMinutes: 60 // Maximum 1 hour gaps in data
      }
    });
    /* istanbul ignore next */
    cov_1up5od8lu9().s[38]++;
    logger_1.logger.info('📊 Backtesting Configuration:', {
      symbol: backtestConfig.symbol,
      period: `${backtestConfig.startDate.toISOString()} to ${backtestConfig.endDate.toISOString()}`,
      initialBalance: backtestConfig.initialBalance,
      strategies: backtestConfig.strategies,
      riskManagement: backtestConfig.riskManagement
    });
    // Run the backtest
    /* istanbul ignore next */
    cov_1up5od8lu9().s[39]++;
    logger_1.logger.info('🔄 Running backtest with harmonized strategies...');
    const result =
    /* istanbul ignore next */
    (cov_1up5od8lu9().s[40]++, await backtestingEngine.runBacktest(backtestConfig));
    // Log key results
    /* istanbul ignore next */
    cov_1up5od8lu9().s[41]++;
    logger_1.logger.info('✅ Backtesting completed successfully!');
    /* istanbul ignore next */
    cov_1up5od8lu9().s[42]++;
    logger_1.logger.info('📈 Performance Summary:', {
      totalReturn: `${result.performance.totalReturnPercentage.toFixed(2)}%`,
      sharpeRatio: result.performance.sharpeRatio.toFixed(2),
      maxDrawdown: `${result.performance.maxDrawdownPercentage.toFixed(2)}%`,
      winRate: `${result.trades.winRate.toFixed(1)}%`,
      totalTrades: result.trades.total,
      profitFactor: result.performance.profitFactor.toFixed(2)
    });
    // Generate comprehensive report
    const reportConfig =
    /* istanbul ignore next */
    (cov_1up5od8lu9().s[43]++, {
      includeCharts: true,
      includeTradeDetails: true,
      includeStrategyBreakdown: true,
      includeBenchmarkComparison: false,
      // No benchmark for this example
      includeRiskMetrics: true,
      includeMonthlyReturns: true,
      format: 'HTML',
      outputPath: './backtest-reports/harmonized-strategy-report.html'
    });
    /* istanbul ignore next */
    cov_1up5od8lu9().s[44]++;
    logger_1.logger.info('📄 Generating comprehensive backtest report...');
    const report =
    /* istanbul ignore next */
    (cov_1up5od8lu9().s[45]++, await report_generator_1.BacktestReportGenerator.generateReport(result, reportConfig));
    /* istanbul ignore next */
    cov_1up5od8lu9().s[46]++;
    logger_1.logger.info('✅ Backtest report generated successfully');
    /* istanbul ignore next */
    cov_1up5od8lu9().s[47]++;
    logger_1.logger.info(`📁 Report saved to: ${reportConfig.outputPath}`);
    // Validate results meet quality standards
    /* istanbul ignore next */
    cov_1up5od8lu9().s[48]++;
    validateBacktestResults(result);
    /* istanbul ignore next */
    cov_1up5od8lu9().s[49]++;
    return result;
  } catch (error) {
    /* istanbul ignore next */
    cov_1up5od8lu9().s[50]++;
    logger_1.logger.error('❌ Backtesting example failed:', error);
    /* istanbul ignore next */
    cov_1up5od8lu9().s[51]++;
    throw error;
  }
}
/**
 * Validate backtest results meet quality standards
 */
function validateBacktestResults(result) {
  /* istanbul ignore next */
  cov_1up5od8lu9().f[7]++;
  cov_1up5od8lu9().s[52]++;
  logger_1.logger.info('🔍 Validating backtest results quality...');
  const issues =
  /* istanbul ignore next */
  (cov_1up5od8lu9().s[53]++, []);
  const warnings =
  /* istanbul ignore next */
  (cov_1up5od8lu9().s[54]++, []);
  // Data quality validation
  /* istanbul ignore next */
  cov_1up5od8lu9().s[55]++;
  if (result.dataQuality.dataIntegrityScore < 95) {
    /* istanbul ignore next */
    cov_1up5od8lu9().b[2][0]++;
    cov_1up5od8lu9().s[56]++;
    issues.push(`Low data integrity score: ${result.dataQuality.dataIntegrityScore}%`);
  } else
  /* istanbul ignore next */
  {
    cov_1up5od8lu9().b[2][1]++;
  }
  cov_1up5od8lu9().s[57]++;
  if (result.dataQuality.dataSource !== 'GATE_IO_REAL_DATA') {
    /* istanbul ignore next */
    cov_1up5od8lu9().b[3][0]++;
    cov_1up5od8lu9().s[58]++;
    issues.push(`Invalid data source: ${result.dataQuality.dataSource} (must be GATE_IO_REAL_DATA)`);
  } else
  /* istanbul ignore next */
  {
    cov_1up5od8lu9().b[3][1]++;
  }
  cov_1up5od8lu9().s[59]++;
  if (result.dataQuality.gapsDetected > 5) {
    /* istanbul ignore next */
    cov_1up5od8lu9().b[4][0]++;
    cov_1up5od8lu9().s[60]++;
    warnings.push(`High number of data gaps detected: ${result.dataQuality.gapsDetected}`);
  } else
  /* istanbul ignore next */
  {
    cov_1up5od8lu9().b[4][1]++;
  }
  // Performance validation
  cov_1up5od8lu9().s[61]++;
  if (result.trades.total < 5) {
    /* istanbul ignore next */
    cov_1up5od8lu9().b[5][0]++;
    cov_1up5od8lu9().s[62]++;
    warnings.push(`Low number of trades: ${result.trades.total} (may not be statistically significant)`);
  } else
  /* istanbul ignore next */
  {
    cov_1up5od8lu9().b[5][1]++;
  }
  cov_1up5od8lu9().s[63]++;
  if (Math.abs(result.performance.sharpeRatio) > 10) {
    /* istanbul ignore next */
    cov_1up5od8lu9().b[6][0]++;
    cov_1up5od8lu9().s[64]++;
    warnings.push(`Extreme Sharpe ratio: ${result.performance.sharpeRatio} (may indicate overfitting)`);
  } else
  /* istanbul ignore next */
  {
    cov_1up5od8lu9().b[6][1]++;
  }
  cov_1up5od8lu9().s[65]++;
  if (result.performance.maxDrawdownPercentage > 50) {
    /* istanbul ignore next */
    cov_1up5od8lu9().b[7][0]++;
    cov_1up5od8lu9().s[66]++;
    issues.push(`Excessive drawdown: ${result.performance.maxDrawdownPercentage}% (risk management failure)`);
  } else
  /* istanbul ignore next */
  {
    cov_1up5od8lu9().b[7][1]++;
  }
  // Strategy validation
  cov_1up5od8lu9().s[67]++;
  for (const [strategyName, strategyPerf] of Object.entries(result.strategyPerformance)) {
    /* istanbul ignore next */
    cov_1up5od8lu9().s[68]++;
    if (strategyPerf.trades === 0) {
      /* istanbul ignore next */
      cov_1up5od8lu9().b[8][0]++;
      cov_1up5od8lu9().s[69]++;
      warnings.push(`Strategy ${strategyName} generated no trades`);
    } else
    /* istanbul ignore next */
    {
      cov_1up5od8lu9().b[8][1]++;
    }
    cov_1up5od8lu9().s[70]++;
    if (strategyPerf.signalAccuracy < 0.3) {
      /* istanbul ignore next */
      cov_1up5od8lu9().b[9][0]++;
      cov_1up5od8lu9().s[71]++;
      warnings.push(`Low signal accuracy for ${strategyName}: ${(strategyPerf.signalAccuracy * 100).toFixed(1)}%`);
    } else
    /* istanbul ignore next */
    {
      cov_1up5od8lu9().b[9][1]++;
    }
  }
  // Log validation results
  /* istanbul ignore next */
  cov_1up5od8lu9().s[72]++;
  if (issues.length > 0) {
    /* istanbul ignore next */
    cov_1up5od8lu9().b[10][0]++;
    cov_1up5od8lu9().s[73]++;
    logger_1.logger.error('❌ Backtest validation failed:', issues);
    /* istanbul ignore next */
    cov_1up5od8lu9().s[74]++;
    throw new Error(`Backtest validation failed: ${issues.join(', ')}`);
  } else
  /* istanbul ignore next */
  {
    cov_1up5od8lu9().b[10][1]++;
  }
  cov_1up5od8lu9().s[75]++;
  if (warnings.length > 0) {
    /* istanbul ignore next */
    cov_1up5od8lu9().b[11][0]++;
    cov_1up5od8lu9().s[76]++;
    logger_1.logger.warn('⚠️ Backtest validation warnings:', warnings);
  } else {
    /* istanbul ignore next */
    cov_1up5od8lu9().b[11][1]++;
    cov_1up5od8lu9().s[77]++;
    logger_1.logger.info('✅ Backtest results passed all quality validations');
  }
}
/**
 * Example of creating sample historical data for testing
 * (In real implementation, this would come from Gate.io API)
 */
function createSampleHistoricalData() {
  /* istanbul ignore next */
  cov_1up5od8lu9().f[8]++;
  const data =
  /* istanbul ignore next */
  (cov_1up5od8lu9().s[78]++, []);
  const startTime =
  /* istanbul ignore next */
  (cov_1up5od8lu9().s[79]++, new Date('2024-01-01T00:00:00Z'));
  const basePrice =
  /* istanbul ignore next */
  (cov_1up5od8lu9().s[80]++, 42000);
  // Generate 1 week of hourly data (168 data points)
  /* istanbul ignore next */
  cov_1up5od8lu9().s[81]++;
  for (let i =
  /* istanbul ignore next */
  (cov_1up5od8lu9().s[82]++, 0); i < 168; i++) {
    const timestamp =
    /* istanbul ignore next */
    (cov_1up5od8lu9().s[83]++, new Date(startTime.getTime() + i * 60 * 60 * 1000));
    // Simulate realistic price movement
    const volatility =
    /* istanbul ignore next */
    (cov_1up5od8lu9().s[84]++, 0.02); // 2% volatility
    const trend =
    /* istanbul ignore next */
    (cov_1up5od8lu9().s[85]++, Math.sin(i / 24) * 0.001); // Daily trend cycle
    const randomWalk =
    /* istanbul ignore next */
    (cov_1up5od8lu9().s[86]++, (Math.random() - 0.5) * volatility);
    const priceChange =
    /* istanbul ignore next */
    (cov_1up5od8lu9().s[87]++, trend + randomWalk);
    const currentPrice =
    /* istanbul ignore next */
    (cov_1up5od8lu9().s[88]++, basePrice * (1 + priceChange * i / 168));
    const open =
    /* istanbul ignore next */
    (cov_1up5od8lu9().s[89]++, i === 0 ?
    /* istanbul ignore next */
    (cov_1up5od8lu9().b[12][0]++, basePrice) :
    /* istanbul ignore next */
    (cov_1up5od8lu9().b[12][1]++, data[i - 1].close));
    const close =
    /* istanbul ignore next */
    (cov_1up5od8lu9().s[90]++, currentPrice);
    const high =
    /* istanbul ignore next */
    (cov_1up5od8lu9().s[91]++, Math.max(open, close) * (1 + Math.random() * 0.005));
    const low =
    /* istanbul ignore next */
    (cov_1up5od8lu9().s[92]++, Math.min(open, close) * (1 - Math.random() * 0.005));
    const volume =
    /* istanbul ignore next */
    (cov_1up5od8lu9().s[93]++, 1000 + Math.random() * 2000);
    /* istanbul ignore next */
    cov_1up5od8lu9().s[94]++;
    data.push({
      symbol: 'BTC_USDT',
      timestamp,
      open,
      high,
      low,
      close,
      volume,
      validated: true,
      source: 'GATE_IO',
      integrity: `hash_${i}_${timestamp.getTime()}`,
      fetchedAt: new Date()
    });
  }
  /* istanbul ignore next */
  cov_1up5od8lu9().s[95]++;
  return data;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMXVwNW9kOGx1OSIsInBhdGgiLCJoYXNoIiwiZ2xvYmFsIiwiRnVuY3Rpb24iLCJnY3YiLCJjb3ZlcmFnZURhdGEiLCJzdGF0ZW1lbnRNYXAiLCJzdGFydCIsImxpbmUiLCJjb2x1bW4iLCJlbmQiLCJmbk1hcCIsIm5hbWUiLCJkZWNsIiwibG9jIiwiYnJhbmNoTWFwIiwidHlwZSIsImxvY2F0aW9ucyIsInVuZGVmaW5lZCIsInMiLCJmIiwiYiIsImlucHV0U291cmNlTWFwIiwiZmlsZSIsIm1hcHBpbmdzIiwibmFtZXMiLCJzb3VyY2VzIiwic291cmNlc0NvbnRlbnQiLCJ2ZXJzaW9uIiwiX2NvdmVyYWdlU2NoZW1hIiwiY292ZXJhZ2UiLCJhY3R1YWxDb3ZlcmFnZSIsImV4cG9ydHMiLCJydW5CYWNrdGVzdGluZ0V4YW1wbGUiLCJjcmVhdGVTYW1wbGVIaXN0b3JpY2FsRGF0YSIsImJhY2t0ZXN0aW5nX2VuZ2luZV8xIiwicmVxdWlyZSIsInJlcG9ydF9nZW5lcmF0b3JfMSIsImhhcm1vbml6YXRpb25fMSIsImxvZ2dlcl8xIiwiRXhhbXBsZUhhcm1vbml6ZWRTdHJhdGVneSIsImhhcm1vbml6YXRpb25FbmdpbmUiLCJjb25zdHJ1Y3RvciIsIlN0cmF0ZWd5SGFybW9uaXphdGlvbkVuZ2luZSIsImdlbmVyYXRlU2lnbmFscyIsIm1hcmtldERhdGEiLCJzaWduYWxzIiwic3RyYXRlZ3lNYXJrZXREYXRhIiwibWFwIiwiZGF0YSIsInN5bWJvbCIsInRpbWVzdGFtcCIsIm9wZW4iLCJoaWdoIiwibG93IiwiY2xvc2UiLCJ2b2x1bWUiLCJ3aW5kb3dTaXplIiwiaSIsImxlbmd0aCIsImRhdGFXaW5kb3ciLCJzbGljZSIsImhhcm1vbml6ZWRTaWduYWwiLCJoYXJtb25pemVTaWduYWxzIiwib3ZlcmFsbFNpZ25hbCIsInRyYWRpbmdTaWduYWwiLCJpZCIsIkRhdGUiLCJub3ciLCJNYXRoIiwicmFuZG9tIiwidG9TdHJpbmciLCJzdWJzdHIiLCJzdHJlbmd0aCIsImNvbmZpZGVuY2UiLCJpbmRpY2F0b3JzIiwiaW5kIiwicmVhc29uaW5nIiwicmlza1Jld2FyZCIsImNhbGN1bGF0ZVJpc2tSZXdhcmQiLCJtZXRhZGF0YSIsImNvbmZsaWN0cyIsIndlaWdodHMiLCJwdXNoIiwiZXJyb3IiLCJsb2dnZXIiLCJ3YXJuIiwiaW5mbyIsImJhc2VSUiIsInF1YWxpdHlNdWx0aXBsaWVyIiwibW9ja0dhdGVJT0NsaWVudCIsIm1ha2VSZXF1ZXN0IiwiRXJyb3IiLCJiYWNrdGVzdGluZ0VuZ2luZSIsIkJhY2t0ZXN0aW5nRW5naW5lIiwiaGFybW9uaXplZFN0cmF0ZWd5IiwicmVnaXN0ZXJTdHJhdGVneSIsImJhY2t0ZXN0Q29uZmlnIiwic3RhcnREYXRlIiwiZW5kRGF0ZSIsImluaXRpYWxCYWxhbmNlIiwic3RyYXRlZ2llcyIsInJpc2tNYW5hZ2VtZW50IiwibWF4Umlza1BlclRyYWRlIiwic3RvcExvc3NQZXJjZW50YWdlIiwibWluUmlza1Jld2FyZFJhdGlvIiwibWF4RHJhd2Rvd24iLCJmZWVzIiwibWFrZXIiLCJ0YWtlciIsInNsaXBwYWdlIiwiZGF0YVZhbGlkYXRpb24iLCJyZXF1aXJlUmVhbERhdGEiLCJtaW5EYXRhUG9pbnRzIiwibWF4R2FwTWludXRlcyIsInBlcmlvZCIsInRvSVNPU3RyaW5nIiwicmVzdWx0IiwicnVuQmFja3Rlc3QiLCJ0b3RhbFJldHVybiIsInBlcmZvcm1hbmNlIiwidG90YWxSZXR1cm5QZXJjZW50YWdlIiwidG9GaXhlZCIsInNoYXJwZVJhdGlvIiwibWF4RHJhd2Rvd25QZXJjZW50YWdlIiwid2luUmF0ZSIsInRyYWRlcyIsInRvdGFsVHJhZGVzIiwidG90YWwiLCJwcm9maXRGYWN0b3IiLCJyZXBvcnRDb25maWciLCJpbmNsdWRlQ2hhcnRzIiwiaW5jbHVkZVRyYWRlRGV0YWlscyIsImluY2x1ZGVTdHJhdGVneUJyZWFrZG93biIsImluY2x1ZGVCZW5jaG1hcmtDb21wYXJpc29uIiwiaW5jbHVkZVJpc2tNZXRyaWNzIiwiaW5jbHVkZU1vbnRobHlSZXR1cm5zIiwiZm9ybWF0Iiwib3V0cHV0UGF0aCIsInJlcG9ydCIsIkJhY2t0ZXN0UmVwb3J0R2VuZXJhdG9yIiwiZ2VuZXJhdGVSZXBvcnQiLCJ2YWxpZGF0ZUJhY2t0ZXN0UmVzdWx0cyIsImlzc3VlcyIsIndhcm5pbmdzIiwiZGF0YVF1YWxpdHkiLCJkYXRhSW50ZWdyaXR5U2NvcmUiLCJkYXRhU291cmNlIiwiZ2Fwc0RldGVjdGVkIiwiYWJzIiwic3RyYXRlZ3lOYW1lIiwic3RyYXRlZ3lQZXJmIiwiT2JqZWN0IiwiZW50cmllcyIsInN0cmF0ZWd5UGVyZm9ybWFuY2UiLCJzaWduYWxBY2N1cmFjeSIsImpvaW4iLCJzdGFydFRpbWUiLCJiYXNlUHJpY2UiLCJnZXRUaW1lIiwidm9sYXRpbGl0eSIsInRyZW5kIiwic2luIiwicmFuZG9tV2FsayIsInByaWNlQ2hhbmdlIiwiY3VycmVudFByaWNlIiwibWF4IiwibWluIiwidmFsaWRhdGVkIiwic291cmNlIiwiaW50ZWdyaXR5IiwiZmV0Y2hlZEF0Il0sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxOaWNrXFxEZXNrdG9wXFxTbW9vdGhTYWlsXFxzcmNcXHRyYWRpbmdcXGJhY2t0ZXN0aW5nXFxleGFtcGxlLWJhY2t0ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gKiBCQUNLVEVTVElORyBTWVNURU0gRVhBTVBMRSAtIENPTVBMRVRFIElNUExFTUVOVEFUSU9OXHJcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAqIFxyXG4gKiBUaGlzIGV4YW1wbGUgZGVtb25zdHJhdGVzIHRoZSBjb21wbGV0ZSBiYWNrdGVzdGluZyBzeXN0ZW0gaW1wbGVtZW50YXRpb25cclxuICogd2l0aCByZWFsIGhpc3RvcmljYWwgZGF0YSBmZXRjaGluZywgc3RyYXRlZ3kgaGFybW9uaXphdGlvbiwgcGVyZm9ybWFuY2VcclxuICogY2FsY3VsYXRpb24sIGFuZCBjb21wcmVoZW5zaXZlIHJlcG9ydGluZy5cclxuICogXHJcbiAqIEZFQVRVUkVTIERFTU9OU1RSQVRFRDpcclxuICogLSBIaXN0b3JpY2FsIGRhdGEgZmV0Y2hpbmcgd2l0aCByZWFsIGRhdGEgdmFsaWRhdGlvblxyXG4gKiAtIFN0cmF0ZWd5IGhhcm1vbml6YXRpb24gYWNyb3NzIG11bHRpcGxlIGluZGljYXRvcnNcclxuICogLSBSZWFsaXN0aWMgZXhlY3V0aW9uIHNpbXVsYXRpb24gd2l0aCBzbGlwcGFnZSBhbmQgZmVlc1xyXG4gKiAtIENvbXByZWhlbnNpdmUgcGVyZm9ybWFuY2UgbWV0cmljcyBjYWxjdWxhdGlvblxyXG4gKiAtIFJpc2sgbWFuYWdlbWVudCBhbmQgY2FwaXRhbCBwcm90ZWN0aW9uXHJcbiAqIC0gRGV0YWlsZWQgYmFja3Rlc3RpbmcgcmVwb3J0c1xyXG4gKiBcclxuICogQGF1dGhvciBBSSBDcnlwdG8gVHJhZGluZyBTeXN0ZW1cclxuICogQHZlcnNpb24gMS4wLjBcclxuICogQGxpY2Vuc2UgUFJPUFJJRVRBUllcclxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICovXHJcblxyXG5pbXBvcnQgeyBCYWNrdGVzdGluZ0VuZ2luZSB9IGZyb20gJy4vYmFja3Rlc3RpbmctZW5naW5lJztcclxuaW1wb3J0IHsgSGlzdG9yaWNhbERhdGFGZXRjaGVyIH0gZnJvbSAnLi9oaXN0b3JpY2FsLWRhdGEtZmV0Y2hlcic7XHJcbmltcG9ydCB7IEJhY2t0ZXN0UmVwb3J0R2VuZXJhdG9yIH0gZnJvbSAnLi9yZXBvcnQtZ2VuZXJhdG9yJztcclxuaW1wb3J0IHsgU3RyYXRlZ3lIYXJtb25pemF0aW9uRW5naW5lIH0gZnJvbSAnLi4vc3RyYXRlZ2llcy9oYXJtb25pemF0aW9uJztcclxuaW1wb3J0IHsgR2F0ZUlPQ2xpZW50IH0gZnJvbSAnLi4vYXBpL2dhdGUtaW8tY2xpZW50JztcclxuaW1wb3J0IHsgXHJcbiAgQmFja3Rlc3RDb25maWcsIFxyXG4gIEJhY2t0ZXN0UmVzdWx0LFxyXG4gIEJhY2t0ZXN0UmVwb3J0Q29uZmlnLFxyXG4gIEhpc3RvcmljYWxNYXJrZXREYXRhIFxyXG59IGZyb20gJy4vdHlwZXMnO1xyXG5pbXBvcnQgeyBUcmFkaW5nU2lnbmFsIH0gZnJvbSAnLi4vc3RyYXRlZ2llcy90eXBlcyc7XHJcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJ0AvY29yZS9sb2dnaW5nL2xvZ2dlcic7XHJcblxyXG4vKipcclxuICogRXhhbXBsZSBzdHJhdGVneSB0aGF0IGdlbmVyYXRlcyBzaWduYWxzIGJhc2VkIG9uIGhhcm1vbml6ZWQgaW5kaWNhdG9yc1xyXG4gKi9cclxuY2xhc3MgRXhhbXBsZUhhcm1vbml6ZWRTdHJhdGVneSB7XHJcbiAgcHVibGljIG5hbWUgPSAnSGFybW9uaXplZFN0cmF0ZWd5JztcclxuICBwcml2YXRlIGhhcm1vbml6YXRpb25FbmdpbmU6IFN0cmF0ZWd5SGFybW9uaXphdGlvbkVuZ2luZTtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLmhhcm1vbml6YXRpb25FbmdpbmUgPSBuZXcgU3RyYXRlZ3lIYXJtb25pemF0aW9uRW5naW5lKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZW5lcmF0ZSB0cmFkaW5nIHNpZ25hbHMgdXNpbmcgaGFybW9uaXplZCBzdHJhdGVneSBhcHByb2FjaFxyXG4gICAqL1xyXG4gIHB1YmxpYyBhc3luYyBnZW5lcmF0ZVNpZ25hbHMobWFya2V0RGF0YTogSGlzdG9yaWNhbE1hcmtldERhdGFbXSk6IFByb21pc2U8VHJhZGluZ1NpZ25hbFtdPiB7XHJcbiAgICBjb25zdCBzaWduYWxzOiBUcmFkaW5nU2lnbmFsW10gPSBbXTtcclxuICAgIFxyXG4gICAgLy8gQ29udmVydCBoaXN0b3JpY2FsIGRhdGEgdG8gbWFya2V0IGRhdGEgZm9ybWF0IGZvciBzdHJhdGVnaWVzXHJcbiAgICBjb25zdCBzdHJhdGVneU1hcmtldERhdGEgPSBtYXJrZXREYXRhLm1hcChkYXRhID0+ICh7XHJcbiAgICAgIHN5bWJvbDogZGF0YS5zeW1ib2wsXHJcbiAgICAgIHRpbWVzdGFtcDogZGF0YS50aW1lc3RhbXAsXHJcbiAgICAgIG9wZW46IGRhdGEub3BlbixcclxuICAgICAgaGlnaDogZGF0YS5oaWdoLFxyXG4gICAgICBsb3c6IGRhdGEubG93LFxyXG4gICAgICBjbG9zZTogZGF0YS5jbG9zZSxcclxuICAgICAgdm9sdW1lOiBkYXRhLnZvbHVtZSxcclxuICAgIH0pKTtcclxuXHJcbiAgICAvLyBQcm9jZXNzIGRhdGEgaW4gd2luZG93cyB0byBnZW5lcmF0ZSBzaWduYWxzXHJcbiAgICBjb25zdCB3aW5kb3dTaXplID0gNTA7IC8vIE1pbmltdW0gZGF0YSBwb2ludHMgbmVlZGVkIGZvciBpbmRpY2F0b3JzXHJcbiAgICBcclxuICAgIGZvciAobGV0IGkgPSB3aW5kb3dTaXplOyBpIDwgc3RyYXRlZ3lNYXJrZXREYXRhLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGNvbnN0IGRhdGFXaW5kb3cgPSBzdHJhdGVneU1hcmtldERhdGEuc2xpY2UoaSAtIHdpbmRvd1NpemUsIGkgKyAxKTtcclxuICAgICAgXHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgLy8gR2VuZXJhdGUgaGFybW9uaXplZCBzaWduYWxcclxuICAgICAgICBjb25zdCBoYXJtb25pemVkU2lnbmFsID0gdGhpcy5oYXJtb25pemF0aW9uRW5naW5lLmhhcm1vbml6ZVNpZ25hbHMoZGF0YVdpbmRvdyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKGhhcm1vbml6ZWRTaWduYWwgJiYgaGFybW9uaXplZFNpZ25hbC5vdmVyYWxsU2lnbmFsICE9PSAnSE9MRCcpIHtcclxuICAgICAgICAgIC8vIENvbnZlcnQgaGFybW9uaXplZCBzaWduYWwgdG8gdHJhZGluZyBzaWduYWxcclxuICAgICAgICAgIGNvbnN0IHRyYWRpbmdTaWduYWw6IFRyYWRpbmdTaWduYWwgPSB7XHJcbiAgICAgICAgICAgIGlkOiBgaGFybW9uaXplZF8ke0RhdGUubm93KCl9XyR7TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIDkpfWAsXHJcbiAgICAgICAgICAgIHN5bWJvbDogaGFybW9uaXplZFNpZ25hbC5zeW1ib2wsXHJcbiAgICAgICAgICAgIHR5cGU6IGhhcm1vbml6ZWRTaWduYWwub3ZlcmFsbFNpZ25hbCxcclxuICAgICAgICAgICAgc3RyZW5ndGg6IGhhcm1vbml6ZWRTaWduYWwuc3RyZW5ndGgsXHJcbiAgICAgICAgICAgIGNvbmZpZGVuY2U6IGhhcm1vbml6ZWRTaWduYWwuY29uZmlkZW5jZSxcclxuICAgICAgICAgICAgaW5kaWNhdG9yczogaGFybW9uaXplZFNpZ25hbC5pbmRpY2F0b3JzLm1hcChpbmQgPT4gaW5kLm5hbWUpLFxyXG4gICAgICAgICAgICByZWFzb25pbmc6IGhhcm1vbml6ZWRTaWduYWwucmVhc29uaW5nLFxyXG4gICAgICAgICAgICByaXNrUmV3YXJkOiB0aGlzLmNhbGN1bGF0ZVJpc2tSZXdhcmQoaGFybW9uaXplZFNpZ25hbC5zdHJlbmd0aCwgaGFybW9uaXplZFNpZ25hbC5jb25maWRlbmNlKSxcclxuICAgICAgICAgICAgdGltZXN0YW1wOiBoYXJtb25pemVkU2lnbmFsLnRpbWVzdGFtcCxcclxuICAgICAgICAgICAgbWV0YWRhdGE6IHtcclxuICAgICAgICAgICAgICBoYXJtb25pemVkU2lnbmFsLFxyXG4gICAgICAgICAgICAgIGNvbmZsaWN0czogaGFybW9uaXplZFNpZ25hbC5jb25mbGljdHMsXHJcbiAgICAgICAgICAgICAgd2VpZ2h0czogaGFybW9uaXplZFNpZ25hbC53ZWlnaHRzLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgfTtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgc2lnbmFscy5wdXNoKHRyYWRpbmdTaWduYWwpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBsb2dnZXIud2FybihgRmFpbGVkIHRvIGdlbmVyYXRlIGhhcm1vbml6ZWQgc2lnbmFsIGF0IGluZGV4ICR7aX06YCwgZXJyb3IpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGxvZ2dlci5pbmZvKGBHZW5lcmF0ZWQgJHtzaWduYWxzLmxlbmd0aH0gaGFybW9uaXplZCB0cmFkaW5nIHNpZ25hbHNgKTtcclxuICAgIHJldHVybiBzaWduYWxzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2FsY3VsYXRlIHJpc2stcmV3YXJkIHJhdGlvIGJhc2VkIG9uIHNpZ25hbCBzdHJlbmd0aCBhbmQgY29uZmlkZW5jZVxyXG4gICAqL1xyXG4gIHByaXZhdGUgY2FsY3VsYXRlUmlza1Jld2FyZChzdHJlbmd0aDogbnVtYmVyLCBjb25maWRlbmNlOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgLy8gQmFzZSByaXNrLXJld2FyZCByYXRpbyBvZiAxLjU6MSwgYWRqdXN0ZWQgYnkgc2lnbmFsIHF1YWxpdHlcclxuICAgIGNvbnN0IGJhc2VSUiA9IDEuNTtcclxuICAgIGNvbnN0IHF1YWxpdHlNdWx0aXBsaWVyID0gKHN0cmVuZ3RoICsgY29uZmlkZW5jZSkgLyAyMDA7IC8vIDAtMSByYW5nZVxyXG4gICAgcmV0dXJuIGJhc2VSUiArIChxdWFsaXR5TXVsdGlwbGllciAqIDEuMCk7IC8vIFJhbmdlOiAxLjUgLSAyLjVcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSdW4gYSBjb21wcmVoZW5zaXZlIGJhY2t0ZXN0aW5nIGV4YW1wbGVcclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBydW5CYWNrdGVzdGluZ0V4YW1wbGUoKTogUHJvbWlzZTxCYWNrdGVzdFJlc3VsdD4ge1xyXG4gIGxvZ2dlci5pbmZvKCfwn5qAIFN0YXJ0aW5nIGNvbXByZWhlbnNpdmUgYmFja3Rlc3RpbmcgZXhhbXBsZS4uLicpO1xyXG4gIFxyXG4gIHRyeSB7XHJcbiAgICAvLyBJbml0aWFsaXplIGNvbXBvbmVudHMgKGluIHJlYWwgaW1wbGVtZW50YXRpb24sIHRoZXNlIHdvdWxkIGJlIHByb3Blcmx5IGNvbmZpZ3VyZWQpXHJcbiAgICBjb25zdCBtb2NrR2F0ZUlPQ2xpZW50ID0ge1xyXG4gICAgICBtYWtlUmVxdWVzdDogYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgIC8vIE1vY2sgaW1wbGVtZW50YXRpb24gLSBpbiByZWFsIHN5c3RlbSB0aGlzIHdvdWxkIGZldGNoIGZyb20gR2F0ZS5pb1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTW9jayBjbGllbnQgLSByZWFsIGltcGxlbWVudGF0aW9uIG5lZWRlZCcpO1xyXG4gICAgICB9XHJcbiAgICB9IGFzIHVua25vd24gYXMgR2F0ZUlPQ2xpZW50O1xyXG4gICAgXHJcbiAgICBjb25zdCBiYWNrdGVzdGluZ0VuZ2luZSA9IG5ldyBCYWNrdGVzdGluZ0VuZ2luZShtb2NrR2F0ZUlPQ2xpZW50KTtcclxuICAgIGNvbnN0IGhhcm1vbml6ZWRTdHJhdGVneSA9IG5ldyBFeGFtcGxlSGFybW9uaXplZFN0cmF0ZWd5KCk7XHJcbiAgICBcclxuICAgIC8vIFJlZ2lzdGVyIHRoZSBoYXJtb25pemVkIHN0cmF0ZWd5XHJcbiAgICBiYWNrdGVzdGluZ0VuZ2luZS5yZWdpc3RlclN0cmF0ZWd5KGhhcm1vbml6ZWRTdHJhdGVneSk7XHJcbiAgICBcclxuICAgIC8vIENvbmZpZ3VyZSBiYWNrdGVzdGluZyBwYXJhbWV0ZXJzXHJcbiAgICBjb25zdCBiYWNrdGVzdENvbmZpZzogQmFja3Rlc3RDb25maWcgPSB7XHJcbiAgICAgIHN5bWJvbDogJ0JUQ19VU0RUJyxcclxuICAgICAgc3RhcnREYXRlOiBuZXcgRGF0ZSgnMjAyNC0wMS0wMVQwMDowMDowMFonKSxcclxuICAgICAgZW5kRGF0ZTogbmV3IERhdGUoJzIwMjQtMDEtMDdUMjM6NTk6NTlaJyksIC8vIDEgd2VlayBiYWNrdGVzdFxyXG4gICAgICBpbml0aWFsQmFsYW5jZTogMTAwMDAsIC8vICQxMCwwMDAgc3RhcnRpbmcgY2FwaXRhbFxyXG4gICAgICBzdHJhdGVnaWVzOiBbJ0hhcm1vbml6ZWRTdHJhdGVneSddLFxyXG4gICAgICBcclxuICAgICAgLy8gUmlzayBtYW5hZ2VtZW50IGNvbmZpZ3VyYXRpb25cclxuICAgICAgcmlza01hbmFnZW1lbnQ6IHtcclxuICAgICAgICBtYXhSaXNrUGVyVHJhZGU6IDAuMDIsIC8vIDIlIHJpc2sgcGVyIHRyYWRlXHJcbiAgICAgICAgc3RvcExvc3NQZXJjZW50YWdlOiAwLjAxLCAvLyAxJSBzdG9wIGxvc3NcclxuICAgICAgICBtaW5SaXNrUmV3YXJkUmF0aW86IDEuMywgLy8gTWluaW11bSAxLjM6MSByaXNrLXJld2FyZFxyXG4gICAgICAgIG1heERyYXdkb3duOiAwLjE1LCAvLyAxNSUgbWF4aW11bSBkcmF3ZG93blxyXG4gICAgICB9LFxyXG4gICAgICBcclxuICAgICAgLy8gVHJhZGluZyBmZWVzIChHYXRlLmlvIHJhdGVzKVxyXG4gICAgICBmZWVzOiB7XHJcbiAgICAgICAgbWFrZXI6IDAuMDAyLCAvLyAwLjIlIG1ha2VyIGZlZVxyXG4gICAgICAgIHRha2VyOiAwLjAwMiwgLy8gMC4yJSB0YWtlciBmZWVcclxuICAgICAgfSxcclxuICAgICAgXHJcbiAgICAgIC8vIEV4ZWN1dGlvbiBzaW11bGF0aW9uXHJcbiAgICAgIHNsaXBwYWdlOiAwLjAwMSwgLy8gMC4xJSBzbGlwcGFnZVxyXG4gICAgICBcclxuICAgICAgLy8gRGF0YSB2YWxpZGF0aW9uIChlbmZvcmNlIHJlYWwgZGF0YSBvbmx5KVxyXG4gICAgICBkYXRhVmFsaWRhdGlvbjoge1xyXG4gICAgICAgIHJlcXVpcmVSZWFsRGF0YTogdHJ1ZSwgLy8gQ1JJVElDQUw6IE5vIG1vY2sgZGF0YSBhbGxvd2VkXHJcbiAgICAgICAgbWluRGF0YVBvaW50czogMTAwMCwgLy8gTWluaW11bSBkYXRhIHBvaW50cyBmb3IgcmVsaWFibGUgYmFja3Rlc3RcclxuICAgICAgICBtYXhHYXBNaW51dGVzOiA2MCwgLy8gTWF4aW11bSAxIGhvdXIgZ2FwcyBpbiBkYXRhXHJcbiAgICAgIH0sXHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICBsb2dnZXIuaW5mbygn8J+TiiBCYWNrdGVzdGluZyBDb25maWd1cmF0aW9uOicsIHtcclxuICAgICAgc3ltYm9sOiBiYWNrdGVzdENvbmZpZy5zeW1ib2wsXHJcbiAgICAgIHBlcmlvZDogYCR7YmFja3Rlc3RDb25maWcuc3RhcnREYXRlLnRvSVNPU3RyaW5nKCl9IHRvICR7YmFja3Rlc3RDb25maWcuZW5kRGF0ZS50b0lTT1N0cmluZygpfWAsXHJcbiAgICAgIGluaXRpYWxCYWxhbmNlOiBiYWNrdGVzdENvbmZpZy5pbml0aWFsQmFsYW5jZSxcclxuICAgICAgc3RyYXRlZ2llczogYmFja3Rlc3RDb25maWcuc3RyYXRlZ2llcyxcclxuICAgICAgcmlza01hbmFnZW1lbnQ6IGJhY2t0ZXN0Q29uZmlnLnJpc2tNYW5hZ2VtZW50LFxyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIC8vIFJ1biB0aGUgYmFja3Rlc3RcclxuICAgIGxvZ2dlci5pbmZvKCfwn5SEIFJ1bm5pbmcgYmFja3Rlc3Qgd2l0aCBoYXJtb25pemVkIHN0cmF0ZWdpZXMuLi4nKTtcclxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGJhY2t0ZXN0aW5nRW5naW5lLnJ1bkJhY2t0ZXN0KGJhY2t0ZXN0Q29uZmlnKTtcclxuICAgIFxyXG4gICAgLy8gTG9nIGtleSByZXN1bHRzXHJcbiAgICBsb2dnZXIuaW5mbygn4pyFIEJhY2t0ZXN0aW5nIGNvbXBsZXRlZCBzdWNjZXNzZnVsbHkhJyk7XHJcbiAgICBsb2dnZXIuaW5mbygn8J+TiCBQZXJmb3JtYW5jZSBTdW1tYXJ5OicsIHtcclxuICAgICAgdG90YWxSZXR1cm46IGAke3Jlc3VsdC5wZXJmb3JtYW5jZS50b3RhbFJldHVyblBlcmNlbnRhZ2UudG9GaXhlZCgyKX0lYCxcclxuICAgICAgc2hhcnBlUmF0aW86IHJlc3VsdC5wZXJmb3JtYW5jZS5zaGFycGVSYXRpby50b0ZpeGVkKDIpLFxyXG4gICAgICBtYXhEcmF3ZG93bjogYCR7cmVzdWx0LnBlcmZvcm1hbmNlLm1heERyYXdkb3duUGVyY2VudGFnZS50b0ZpeGVkKDIpfSVgLFxyXG4gICAgICB3aW5SYXRlOiBgJHtyZXN1bHQudHJhZGVzLndpblJhdGUudG9GaXhlZCgxKX0lYCxcclxuICAgICAgdG90YWxUcmFkZXM6IHJlc3VsdC50cmFkZXMudG90YWwsXHJcbiAgICAgIHByb2ZpdEZhY3RvcjogcmVzdWx0LnBlcmZvcm1hbmNlLnByb2ZpdEZhY3Rvci50b0ZpeGVkKDIpLFxyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIC8vIEdlbmVyYXRlIGNvbXByZWhlbnNpdmUgcmVwb3J0XHJcbiAgICBjb25zdCByZXBvcnRDb25maWc6IEJhY2t0ZXN0UmVwb3J0Q29uZmlnID0ge1xyXG4gICAgICBpbmNsdWRlQ2hhcnRzOiB0cnVlLFxyXG4gICAgICBpbmNsdWRlVHJhZGVEZXRhaWxzOiB0cnVlLFxyXG4gICAgICBpbmNsdWRlU3RyYXRlZ3lCcmVha2Rvd246IHRydWUsXHJcbiAgICAgIGluY2x1ZGVCZW5jaG1hcmtDb21wYXJpc29uOiBmYWxzZSwgLy8gTm8gYmVuY2htYXJrIGZvciB0aGlzIGV4YW1wbGVcclxuICAgICAgaW5jbHVkZVJpc2tNZXRyaWNzOiB0cnVlLFxyXG4gICAgICBpbmNsdWRlTW9udGhseVJldHVybnM6IHRydWUsXHJcbiAgICAgIGZvcm1hdDogJ0hUTUwnLFxyXG4gICAgICBvdXRwdXRQYXRoOiAnLi9iYWNrdGVzdC1yZXBvcnRzL2hhcm1vbml6ZWQtc3RyYXRlZ3ktcmVwb3J0Lmh0bWwnLFxyXG4gICAgfTtcclxuICAgIFxyXG4gICAgbG9nZ2VyLmluZm8oJ/Cfk4QgR2VuZXJhdGluZyBjb21wcmVoZW5zaXZlIGJhY2t0ZXN0IHJlcG9ydC4uLicpO1xyXG4gICAgY29uc3QgcmVwb3J0ID0gYXdhaXQgQmFja3Rlc3RSZXBvcnRHZW5lcmF0b3IuZ2VuZXJhdGVSZXBvcnQocmVzdWx0LCByZXBvcnRDb25maWcpO1xyXG4gICAgXHJcbiAgICBsb2dnZXIuaW5mbygn4pyFIEJhY2t0ZXN0IHJlcG9ydCBnZW5lcmF0ZWQgc3VjY2Vzc2Z1bGx5Jyk7XHJcbiAgICBsb2dnZXIuaW5mbyhg8J+TgSBSZXBvcnQgc2F2ZWQgdG86ICR7cmVwb3J0Q29uZmlnLm91dHB1dFBhdGh9YCk7XHJcbiAgICBcclxuICAgIC8vIFZhbGlkYXRlIHJlc3VsdHMgbWVldCBxdWFsaXR5IHN0YW5kYXJkc1xyXG4gICAgdmFsaWRhdGVCYWNrdGVzdFJlc3VsdHMocmVzdWx0KTtcclxuICAgIFxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIFxyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBsb2dnZXIuZXJyb3IoJ+KdjCBCYWNrdGVzdGluZyBleGFtcGxlIGZhaWxlZDonLCBlcnJvcik7XHJcbiAgICB0aHJvdyBlcnJvcjtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBWYWxpZGF0ZSBiYWNrdGVzdCByZXN1bHRzIG1lZXQgcXVhbGl0eSBzdGFuZGFyZHNcclxuICovXHJcbmZ1bmN0aW9uIHZhbGlkYXRlQmFja3Rlc3RSZXN1bHRzKHJlc3VsdDogQmFja3Rlc3RSZXN1bHQpOiB2b2lkIHtcclxuICBsb2dnZXIuaW5mbygn8J+UjSBWYWxpZGF0aW5nIGJhY2t0ZXN0IHJlc3VsdHMgcXVhbGl0eS4uLicpO1xyXG4gIFxyXG4gIGNvbnN0IGlzc3Vlczogc3RyaW5nW10gPSBbXTtcclxuICBjb25zdCB3YXJuaW5nczogc3RyaW5nW10gPSBbXTtcclxuICBcclxuICAvLyBEYXRhIHF1YWxpdHkgdmFsaWRhdGlvblxyXG4gIGlmIChyZXN1bHQuZGF0YVF1YWxpdHkuZGF0YUludGVncml0eVNjb3JlIDwgOTUpIHtcclxuICAgIGlzc3Vlcy5wdXNoKGBMb3cgZGF0YSBpbnRlZ3JpdHkgc2NvcmU6ICR7cmVzdWx0LmRhdGFRdWFsaXR5LmRhdGFJbnRlZ3JpdHlTY29yZX0lYCk7XHJcbiAgfVxyXG4gIFxyXG4gIGlmIChyZXN1bHQuZGF0YVF1YWxpdHkuZGF0YVNvdXJjZSAhPT0gJ0dBVEVfSU9fUkVBTF9EQVRBJykge1xyXG4gICAgaXNzdWVzLnB1c2goYEludmFsaWQgZGF0YSBzb3VyY2U6ICR7cmVzdWx0LmRhdGFRdWFsaXR5LmRhdGFTb3VyY2V9IChtdXN0IGJlIEdBVEVfSU9fUkVBTF9EQVRBKWApO1xyXG4gIH1cclxuICBcclxuICBpZiAocmVzdWx0LmRhdGFRdWFsaXR5LmdhcHNEZXRlY3RlZCA+IDUpIHtcclxuICAgIHdhcm5pbmdzLnB1c2goYEhpZ2ggbnVtYmVyIG9mIGRhdGEgZ2FwcyBkZXRlY3RlZDogJHtyZXN1bHQuZGF0YVF1YWxpdHkuZ2Fwc0RldGVjdGVkfWApO1xyXG4gIH1cclxuICBcclxuICAvLyBQZXJmb3JtYW5jZSB2YWxpZGF0aW9uXHJcbiAgaWYgKHJlc3VsdC50cmFkZXMudG90YWwgPCA1KSB7XHJcbiAgICB3YXJuaW5ncy5wdXNoKGBMb3cgbnVtYmVyIG9mIHRyYWRlczogJHtyZXN1bHQudHJhZGVzLnRvdGFsfSAobWF5IG5vdCBiZSBzdGF0aXN0aWNhbGx5IHNpZ25pZmljYW50KWApO1xyXG4gIH1cclxuICBcclxuICBpZiAoTWF0aC5hYnMocmVzdWx0LnBlcmZvcm1hbmNlLnNoYXJwZVJhdGlvKSA+IDEwKSB7XHJcbiAgICB3YXJuaW5ncy5wdXNoKGBFeHRyZW1lIFNoYXJwZSByYXRpbzogJHtyZXN1bHQucGVyZm9ybWFuY2Uuc2hhcnBlUmF0aW99IChtYXkgaW5kaWNhdGUgb3ZlcmZpdHRpbmcpYCk7XHJcbiAgfVxyXG4gIFxyXG4gIGlmIChyZXN1bHQucGVyZm9ybWFuY2UubWF4RHJhd2Rvd25QZXJjZW50YWdlID4gNTApIHtcclxuICAgIGlzc3Vlcy5wdXNoKGBFeGNlc3NpdmUgZHJhd2Rvd246ICR7cmVzdWx0LnBlcmZvcm1hbmNlLm1heERyYXdkb3duUGVyY2VudGFnZX0lIChyaXNrIG1hbmFnZW1lbnQgZmFpbHVyZSlgKTtcclxuICB9XHJcbiAgXHJcbiAgLy8gU3RyYXRlZ3kgdmFsaWRhdGlvblxyXG4gIGZvciAoY29uc3QgW3N0cmF0ZWd5TmFtZSwgc3RyYXRlZ3lQZXJmXSBvZiBPYmplY3QuZW50cmllcyhyZXN1bHQuc3RyYXRlZ3lQZXJmb3JtYW5jZSkpIHtcclxuICAgIGlmIChzdHJhdGVneVBlcmYudHJhZGVzID09PSAwKSB7XHJcbiAgICAgIHdhcm5pbmdzLnB1c2goYFN0cmF0ZWd5ICR7c3RyYXRlZ3lOYW1lfSBnZW5lcmF0ZWQgbm8gdHJhZGVzYCk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGlmIChzdHJhdGVneVBlcmYuc2lnbmFsQWNjdXJhY3kgPCAwLjMpIHtcclxuICAgICAgd2FybmluZ3MucHVzaChgTG93IHNpZ25hbCBhY2N1cmFjeSBmb3IgJHtzdHJhdGVneU5hbWV9OiAkeyhzdHJhdGVneVBlcmYuc2lnbmFsQWNjdXJhY3kgKiAxMDApLnRvRml4ZWQoMSl9JWApO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICAvLyBMb2cgdmFsaWRhdGlvbiByZXN1bHRzXHJcbiAgaWYgKGlzc3Vlcy5sZW5ndGggPiAwKSB7XHJcbiAgICBsb2dnZXIuZXJyb3IoJ+KdjCBCYWNrdGVzdCB2YWxpZGF0aW9uIGZhaWxlZDonLCBpc3N1ZXMpO1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKGBCYWNrdGVzdCB2YWxpZGF0aW9uIGZhaWxlZDogJHtpc3N1ZXMuam9pbignLCAnKX1gKTtcclxuICB9XHJcbiAgXHJcbiAgaWYgKHdhcm5pbmdzLmxlbmd0aCA+IDApIHtcclxuICAgIGxvZ2dlci53YXJuKCfimqDvuI8gQmFja3Rlc3QgdmFsaWRhdGlvbiB3YXJuaW5nczonLCB3YXJuaW5ncyk7XHJcbiAgfSBlbHNlIHtcclxuICAgIGxvZ2dlci5pbmZvKCfinIUgQmFja3Rlc3QgcmVzdWx0cyBwYXNzZWQgYWxsIHF1YWxpdHkgdmFsaWRhdGlvbnMnKTtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBFeGFtcGxlIG9mIGNyZWF0aW5nIHNhbXBsZSBoaXN0b3JpY2FsIGRhdGEgZm9yIHRlc3RpbmdcclxuICogKEluIHJlYWwgaW1wbGVtZW50YXRpb24sIHRoaXMgd291bGQgY29tZSBmcm9tIEdhdGUuaW8gQVBJKVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNhbXBsZUhpc3RvcmljYWxEYXRhKCk6IEhpc3RvcmljYWxNYXJrZXREYXRhW10ge1xyXG4gIGNvbnN0IGRhdGE6IEhpc3RvcmljYWxNYXJrZXREYXRhW10gPSBbXTtcclxuICBjb25zdCBzdGFydFRpbWUgPSBuZXcgRGF0ZSgnMjAyNC0wMS0wMVQwMDowMDowMFonKTtcclxuICBjb25zdCBiYXNlUHJpY2UgPSA0MjAwMDtcclxuICBcclxuICAvLyBHZW5lcmF0ZSAxIHdlZWsgb2YgaG91cmx5IGRhdGEgKDE2OCBkYXRhIHBvaW50cylcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IDE2ODsgaSsrKSB7XHJcbiAgICBjb25zdCB0aW1lc3RhbXAgPSBuZXcgRGF0ZShzdGFydFRpbWUuZ2V0VGltZSgpICsgKGkgKiA2MCAqIDYwICogMTAwMCkpO1xyXG4gICAgXHJcbiAgICAvLyBTaW11bGF0ZSByZWFsaXN0aWMgcHJpY2UgbW92ZW1lbnRcclxuICAgIGNvbnN0IHZvbGF0aWxpdHkgPSAwLjAyOyAvLyAyJSB2b2xhdGlsaXR5XHJcbiAgICBjb25zdCB0cmVuZCA9IE1hdGguc2luKGkgLyAyNCkgKiAwLjAwMTsgLy8gRGFpbHkgdHJlbmQgY3ljbGVcclxuICAgIGNvbnN0IHJhbmRvbVdhbGsgPSAoTWF0aC5yYW5kb20oKSAtIDAuNSkgKiB2b2xhdGlsaXR5O1xyXG4gICAgXHJcbiAgICBjb25zdCBwcmljZUNoYW5nZSA9IHRyZW5kICsgcmFuZG9tV2FsaztcclxuICAgIGNvbnN0IGN1cnJlbnRQcmljZSA9IGJhc2VQcmljZSAqICgxICsgcHJpY2VDaGFuZ2UgKiBpIC8gMTY4KTtcclxuICAgIFxyXG4gICAgY29uc3Qgb3BlbiA9IGkgPT09IDAgPyBiYXNlUHJpY2UgOiBkYXRhW2kgLSAxXS5jbG9zZTtcclxuICAgIGNvbnN0IGNsb3NlID0gY3VycmVudFByaWNlO1xyXG4gICAgY29uc3QgaGlnaCA9IE1hdGgubWF4KG9wZW4sIGNsb3NlKSAqICgxICsgTWF0aC5yYW5kb20oKSAqIDAuMDA1KTtcclxuICAgIGNvbnN0IGxvdyA9IE1hdGgubWluKG9wZW4sIGNsb3NlKSAqICgxIC0gTWF0aC5yYW5kb20oKSAqIDAuMDA1KTtcclxuICAgIGNvbnN0IHZvbHVtZSA9IDEwMDAgKyBNYXRoLnJhbmRvbSgpICogMjAwMDtcclxuICAgIFxyXG4gICAgZGF0YS5wdXNoKHtcclxuICAgICAgc3ltYm9sOiAnQlRDX1VTRFQnLFxyXG4gICAgICB0aW1lc3RhbXAsXHJcbiAgICAgIG9wZW4sXHJcbiAgICAgIGhpZ2gsXHJcbiAgICAgIGxvdyxcclxuICAgICAgY2xvc2UsXHJcbiAgICAgIHZvbHVtZSxcclxuICAgICAgdmFsaWRhdGVkOiB0cnVlLFxyXG4gICAgICBzb3VyY2U6ICdHQVRFX0lPJyxcclxuICAgICAgaW50ZWdyaXR5OiBgaGFzaF8ke2l9XyR7dGltZXN0YW1wLmdldFRpbWUoKX1gLFxyXG4gICAgICBmZXRjaGVkQXQ6IG5ldyBEYXRlKCksXHJcbiAgICB9KTtcclxuICB9XHJcbiAgXHJcbiAgcmV0dXJuIGRhdGE7XHJcbn1cclxuXHJcbi8vIEV4cG9ydCBmb3IgdXNlIGluIG90aGVyIG1vZHVsZXNcclxuZXhwb3J0IHsgRXhhbXBsZUhhcm1vbml6ZWRTdHJhdGVneSB9O1xyXG4iXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBLFNBQUFBLGVBQUE7RUFBQSxJQUFBQyxJQUFBO0VBQUEsSUFBQUMsSUFBQTtFQUFBLElBQUFDLE1BQUEsT0FBQUMsUUFBQTtFQUFBLElBQUFDLEdBQUE7RUFBQSxJQUFBQyxZQUFBO0lBQUFMLElBQUE7SUFBQU0sWUFBQTtNQUFBO1FBQUFDLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtJQUFBO0lBQUFFLEtBQUE7TUFBQTtRQUFBQyxJQUFBO1FBQUFDLElBQUE7VUFBQU4sS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUssR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBSSxJQUFBO1FBQUFDLElBQUE7VUFBQU4sS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUssR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBSSxJQUFBO1FBQUFDLElBQUE7VUFBQU4sS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUssR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBSSxJQUFBO1FBQUFDLElBQUE7VUFBQU4sS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUssR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBSSxJQUFBO1FBQUFDLElBQUE7VUFBQU4sS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUssR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBSSxJQUFBO1FBQUFDLElBQUE7VUFBQU4sS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUssR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBSSxJQUFBO1FBQUFDLElBQUE7VUFBQU4sS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUssR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBSSxJQUFBO1FBQUFDLElBQUE7VUFBQU4sS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUssR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBSSxJQUFBO1FBQUFDLElBQUE7VUFBQU4sS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUssR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7SUFBQTtJQUFBTyxTQUFBO01BQUE7UUFBQUQsR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1VBQUFSLEdBQUE7WUFBQUYsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtRQUFBO1FBQUFWLElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtVQUFBUixHQUFBO1lBQUFGLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7UUFBQTtRQUFBVixJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7VUFBQVIsR0FBQTtZQUFBRixJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1FBQUE7UUFBQVYsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1VBQUFSLEdBQUE7WUFBQUYsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtRQUFBO1FBQUFWLElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtVQUFBUixHQUFBO1lBQUFGLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7UUFBQTtRQUFBVixJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7VUFBQVIsR0FBQTtZQUFBRixJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1FBQUE7UUFBQVYsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1VBQUFSLEdBQUE7WUFBQUYsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtRQUFBO1FBQUFWLElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtVQUFBUixHQUFBO1lBQUFGLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7UUFBQTtRQUFBVixJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7VUFBQVIsR0FBQTtZQUFBRixJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1FBQUE7UUFBQVYsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1VBQUFSLEdBQUE7WUFBQUYsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtRQUFBO1FBQUFWLElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtJQUFBO0lBQUFXLENBQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7SUFBQTtJQUFBQyxDQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO0lBQUE7SUFBQUMsQ0FBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO0lBQUE7SUFBQUMsY0FBQTtNQUFBQyxJQUFBO01BQUFDLFFBQUE7TUFBQUMsS0FBQTtNQUFBQyxPQUFBO01BQUFDLGNBQUE7TUFBQUMsT0FBQTtJQUFBO0lBQUFDLGVBQUE7SUFBQTVCLElBQUE7RUFBQTtFQUFBLElBQUE2QixRQUFBLEdBQUE1QixNQUFBLENBQUFFLEdBQUEsTUFBQUYsTUFBQSxDQUFBRSxHQUFBO0VBQUEsS0FBQTBCLFFBQUEsQ0FB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