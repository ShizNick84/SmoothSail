{"version":3,"names":["cov_rpxvgdhc3","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","events_1","require","trading_logger_1","child_process_1","util_1","os_1","__importDefault","perf_hooks_1","execAsync","promisify","exec","PerformanceMonitor","EventEmitter","monitoringInterval","isMonitoring","thresholds","hardwareInfo","performanceHistory","Map","constructor","cpu","warning","critical","memory","disk","temperature","network","database","startMonitoring","intervalMs","tradingLogger","warn","initializeHardwareInfo","performComprehensiveCheck","setInterval","error","logApplicationLifecycle","interval","emit","stopMonitoring","clearInterval","cpuInfo","default","cpus","totalMem","totalmem","cpuModel","model","baseFreq","maxFreq","cpuFreqInfo","freqMatch","stdout","match","parseFloat","memType","memSpeed","memInfo","typeMatch","speedMatch","trim","parseInt","storageType","storageCapacity","storageInterface","storageInfo","lines","split","slice","length","mainDisk","sizeStr","isRotational","parseStorageSize","networkInterfaces","Object","keys","wifiCapable","some","iface","includes","cores","threads","baseFrequency","maxFrequency","total","speed","storage","capacity","interface","interfaces","info","component","timestamp","Date","checkIntelNUCPerformance","checkNetworkPerformance","checkDatabasePerformance","checkApplicationPerformance","cpuUsage","getCPUUsage","memoryUsage","getMemoryUsage","diskUsage","getDiskUsage","getCPUTemperature","status","determineSystemStatus","percentage","context","metrics","usage","frequency","logSystemPerformance","storePerformanceMetric","tunnelLatency","checkSSHTunnelLatency","apiLatency","checkAPILatency","networkStats","getNetworkStatistics","avgLatency","latency","bandwidth","packetLoss","connections","getDatabaseConnections","queryTime","measureDatabaseQueryTime","cacheHitRatio","getDatabaseCacheHitRatio","memUsage","process","heapUsedMB","heapUsed","heapTotalMB","heapTotal","heapUsagePercent","used","rss","Promise","resolve","startUsage","startTime","performance","now","setTimeout","endUsage","endTime","timeDiff","userPercent","user","systemPercent","system","Math","min","freeMem","freemem","usedMem","swapUsed","swapInfo","swapMatch","swap","diskInfo","parts","replace","iops","iostat","ioMatch","methods","method","result","temp","netstat","units","K","M","G","T","value","unit","metric","history","get","push","shift","set","getPerformanceHistory","fromEntries","updateThresholds","newThresholds","getHardwareInfo","isMonitoringActive","exports","performanceMonitor"],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\core\\monitoring\\performance-monitor.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * INTEL NUC PERFORMANCE MONITORING SERVICE\r\n * =============================================================================\r\n * \r\n * This service monitors Intel NUC hardware performance, network connectivity,\r\n * database performance, and application metrics with comprehensive logging.\r\n * \r\n * Features:\r\n * - Intel NUC hardware monitoring (CPU, RAM, temperature)\r\n * - Network latency and SSH tunnel performance\r\n * - Database performance and query timing\r\n * - Application resource usage tracking\r\n * - Automated alerting and threshold management\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * =============================================================================\r\n */\r\n\r\nimport { EventEmitter } from 'events';\r\nimport { tradingLogger, SystemPerformanceContext } from '../logging/trading-logger';\r\nimport { execSync, exec } from 'child_process';\r\nimport { promisify } from 'util';\r\nimport os from 'os';\r\nimport fs from 'fs/promises';\r\nimport { performance } from 'perf_hooks';\r\n\r\nconst execAsync = promisify(exec);\r\n\r\n/**\r\n * Performance thresholds interface\r\n */\r\ninterface PerformanceThresholds {\r\n  cpu: { warning: number; critical: number };\r\n  memory: { warning: number; critical: number };\r\n  disk: { warning: number; critical: number };\r\n  temperature: { warning: number; critical: number };\r\n  network: { warning: number; critical: number };\r\n  database: { warning: number; critical: number };\r\n}\r\n\r\n/**\r\n * Hardware information interface\r\n */\r\ninterface HardwareInfo {\r\n  cpu: {\r\n    model: string;\r\n    cores: number;\r\n    threads: number;\r\n    baseFrequency: number;\r\n    maxFrequency: number;\r\n  };\r\n  memory: {\r\n    total: number;\r\n    type: string;\r\n    speed: number;\r\n  };\r\n  storage: {\r\n    type: string;\r\n    capacity: number;\r\n    interface: string;\r\n  };\r\n  network: {\r\n    interfaces: string[];\r\n    wifiCapable: boolean;\r\n  };\r\n}\r\n\r\n/**\r\n * Performance monitoring service for Intel NUC\r\n */\r\nexport class PerformanceMonitor extends EventEmitter {\r\n  private monitoringInterval?: NodeJS.Timeout;\r\n  private isMonitoring: boolean = false;\r\n  private thresholds: PerformanceThresholds;\r\n  private hardwareInfo?: HardwareInfo;\r\n  private performanceHistory: Map<string, number[]> = new Map();\r\n\r\n  constructor() {\r\n    super();\r\n    \r\n    // Default thresholds for Intel NUC\r\n    this.thresholds = {\r\n      cpu: { warning: 70, critical: 90 },\r\n      memory: { warning: 80, critical: 95 },\r\n      disk: { warning: 85, critical: 95 },\r\n      temperature: { warning: 70, critical: 85 },\r\n      network: { warning: 100, critical: 500 },\r\n      database: { warning: 100, critical: 500 }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Start performance monitoring\r\n   */\r\n  public async startMonitoring(intervalMs: number = 30000): Promise<void> {\r\n    if (this.isMonitoring) {\r\n      tradingLogger.warn('Performance monitoring is already running');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Initialize hardware information\r\n      await this.initializeHardwareInfo();\r\n      \r\n      this.isMonitoring = true;\r\n      \r\n      // Initial performance check\r\n      await this.performComprehensiveCheck();\r\n      \r\n      // Start periodic monitoring\r\n      this.monitoringInterval = setInterval(async () => {\r\n        try {\r\n          await this.performComprehensiveCheck();\r\n        } catch (error) {\r\n          tradingLogger.error('Error during performance monitoring cycle', error as Error);\r\n        }\r\n      }, intervalMs);\r\n\r\n      tradingLogger.logApplicationLifecycle('startup', 'PerformanceMonitor', {\r\n        interval: intervalMs,\r\n        thresholds: this.thresholds\r\n      });\r\n\r\n      this.emit('monitoring_started');\r\n      \r\n    } catch (error) {\r\n      tradingLogger.error('Failed to start performance monitoring', error as Error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop performance monitoring\r\n   */\r\n  public stopMonitoring(): void {\r\n    if (this.monitoringInterval) {\r\n      clearInterval(this.monitoringInterval);\r\n      this.monitoringInterval = undefined;\r\n    }\r\n    \r\n    this.isMonitoring = false;\r\n    \r\n    tradingLogger.logApplicationLifecycle('shutdown', 'PerformanceMonitor');\r\n    this.emit('monitoring_stopped');\r\n  }\r\n\r\n  /**\r\n   * Initialize hardware information\r\n   */\r\n  private async initializeHardwareInfo(): Promise<void> {\r\n    try {\r\n      const cpuInfo = os.cpus();\r\n      const totalMem = os.totalmem();\r\n      \r\n      // Get detailed CPU information\r\n      let cpuModel = cpuInfo[0]?.model || 'Unknown';\r\n      let baseFreq = 0;\r\n      let maxFreq = 0;\r\n      \r\n      try {\r\n        const cpuFreqInfo = await execAsync('cat /proc/cpuinfo | grep \"cpu MHz\" | head -1');\r\n        const freqMatch = cpuFreqInfo.stdout.match(/cpu MHz\\s*:\\s*([0-9.]+)/);\r\n        if (freqMatch) {\r\n          baseFreq = parseFloat(freqMatch[1]);\r\n        }\r\n      } catch (error) {\r\n        // Ignore if can't get frequency info\r\n      }\r\n\r\n      // Get memory information\r\n      let memType = 'Unknown';\r\n      let memSpeed = 0;\r\n      \r\n      try {\r\n        const memInfo = await execAsync('sudo dmidecode -t memory | grep -E \"Type:|Speed:\" | head -2');\r\n        const typeMatch = memInfo.stdout.match(/Type:\\s*([^\\n]+)/);\r\n        const speedMatch = memInfo.stdout.match(/Speed:\\s*([0-9]+)/);\r\n        \r\n        if (typeMatch) memType = typeMatch[1].trim();\r\n        if (speedMatch) memSpeed = parseInt(speedMatch[1]);\r\n      } catch (error) {\r\n        // Ignore if can't get memory details\r\n      }\r\n\r\n      // Get storage information\r\n      let storageType = 'Unknown';\r\n      let storageCapacity = 0;\r\n      let storageInterface = 'Unknown';\r\n      \r\n      try {\r\n        const storageInfo = await execAsync('lsblk -d -o NAME,SIZE,ROTA | grep -v loop');\r\n        const lines = storageInfo.stdout.trim().split('\\n').slice(1);\r\n        \r\n        if (lines.length > 0) {\r\n          const mainDisk = lines[0].split(/\\s+/);\r\n          const sizeStr = mainDisk[1];\r\n          const isRotational = mainDisk[2] === '1';\r\n          \r\n          storageType = isRotational ? 'HDD' : 'SSD';\r\n          storageCapacity = this.parseStorageSize(sizeStr);\r\n          storageInterface = 'SATA'; // Default assumption\r\n        }\r\n      } catch (error) {\r\n        // Ignore if can't get storage info\r\n      }\r\n\r\n      // Get network interfaces\r\n      const networkInterfaces = Object.keys(os.networkInterfaces());\r\n      const wifiCapable = networkInterfaces.some(iface => \r\n        iface.includes('wlan') || iface.includes('wifi')\r\n      );\r\n\r\n      this.hardwareInfo = {\r\n        cpu: {\r\n          model: cpuModel,\r\n          cores: cpuInfo.length,\r\n          threads: cpuInfo.length, // Simplified\r\n          baseFrequency: baseFreq,\r\n          maxFrequency: maxFreq || baseFreq\r\n        },\r\n        memory: {\r\n          total: totalMem,\r\n          type: memType,\r\n          speed: memSpeed\r\n        },\r\n        storage: {\r\n          type: storageType,\r\n          capacity: storageCapacity,\r\n          interface: storageInterface\r\n        },\r\n        network: {\r\n          interfaces: networkInterfaces,\r\n          wifiCapable\r\n        }\r\n      };\r\n\r\n      tradingLogger.info('Hardware information initialized', {\r\n        component: 'PerformanceMonitor',\r\n        hardwareInfo: this.hardwareInfo\r\n      });\r\n\r\n    } catch (error) {\r\n      tradingLogger.error('Failed to initialize hardware information', error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Perform comprehensive performance check\r\n   */\r\n  private async performComprehensiveCheck(): Promise<void> {\r\n    const timestamp = new Date();\r\n    \r\n    // Check Intel NUC hardware\r\n    await this.checkIntelNUCPerformance(timestamp);\r\n    \r\n    // Check network performance\r\n    await this.checkNetworkPerformance(timestamp);\r\n    \r\n    // Check database performance\r\n    await this.checkDatabasePerformance(timestamp);\r\n    \r\n    // Check application performance\r\n    await this.checkApplicationPerformance(timestamp);\r\n  }\r\n\r\n  /**\r\n   * Check Intel NUC hardware performance\r\n   */\r\n  private async checkIntelNUCPerformance(timestamp: Date): Promise<void> {\r\n    try {\r\n      // Get CPU usage\r\n      const cpuUsage = await this.getCPUUsage();\r\n      \r\n      // Get memory usage\r\n      const memoryUsage = await this.getMemoryUsage();\r\n      \r\n      // Get disk usage\r\n      const diskUsage = await this.getDiskUsage();\r\n      \r\n      // Get CPU temperature (if available)\r\n      const temperature = await this.getCPUTemperature();\r\n      \r\n      // Determine overall status\r\n      const status = this.determineSystemStatus({\r\n        cpu: cpuUsage,\r\n        memory: memoryUsage.percentage,\r\n        disk: diskUsage.percentage,\r\n        temperature\r\n      });\r\n\r\n      const context: SystemPerformanceContext = {\r\n        component: 'intel_nuc',\r\n        metrics: {\r\n          cpu: {\r\n            usage: cpuUsage,\r\n            temperature,\r\n            frequency: this.hardwareInfo?.cpu.baseFrequency\r\n          },\r\n          memory: memoryUsage,\r\n          disk: diskUsage\r\n        },\r\n        thresholds: this.thresholds,\r\n        status,\r\n        timestamp\r\n      };\r\n\r\n      tradingLogger.logSystemPerformance(context);\r\n      \r\n      // Store performance history\r\n      this.storePerformanceMetric('cpu_usage', cpuUsage);\r\n      this.storePerformanceMetric('memory_usage', memoryUsage.percentage);\r\n      this.storePerformanceMetric('disk_usage', diskUsage.percentage);\r\n      \r\n      if (temperature > 0) {\r\n        this.storePerformanceMetric('cpu_temperature', temperature);\r\n      }\r\n\r\n      // Emit events for critical conditions\r\n      if (status === 'critical') {\r\n        this.emit('critical_performance', context);\r\n      } else if (status === 'warning') {\r\n        this.emit('performance_warning', context);\r\n      }\r\n\r\n    } catch (error) {\r\n      tradingLogger.error('Failed to check Intel NUC performance', error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check network performance including SSH tunnel\r\n   */\r\n  private async checkNetworkPerformance(timestamp: Date): Promise<void> {\r\n    try {\r\n      // Check SSH tunnel latency\r\n      const tunnelLatency = await this.checkSSHTunnelLatency();\r\n      \r\n      // Check API connectivity latency\r\n      const apiLatency = await this.checkAPILatency();\r\n      \r\n      // Get network interface statistics\r\n      const networkStats = await this.getNetworkStatistics();\r\n      \r\n      const avgLatency = (tunnelLatency + apiLatency) / 2;\r\n      const status = avgLatency > this.thresholds.network.critical ? 'critical' :\r\n                    avgLatency > this.thresholds.network.warning ? 'warning' : 'healthy';\r\n\r\n      const context: SystemPerformanceContext = {\r\n        component: 'network',\r\n        metrics: {\r\n          network: {\r\n            latency: avgLatency,\r\n            bandwidth: networkStats.bandwidth,\r\n            packetLoss: networkStats.packetLoss,\r\n            connections: networkStats.connections\r\n          }\r\n        },\r\n        thresholds: this.thresholds,\r\n        status,\r\n        timestamp\r\n      };\r\n\r\n      tradingLogger.logSystemPerformance(context);\r\n      \r\n      // Store network performance history\r\n      this.storePerformanceMetric('network_latency', avgLatency);\r\n      this.storePerformanceMetric('ssh_tunnel_latency', tunnelLatency);\r\n      this.storePerformanceMetric('api_latency', apiLatency);\r\n\r\n      if (status !== 'healthy') {\r\n        this.emit('network_performance_issue', context);\r\n      }\r\n\r\n    } catch (error) {\r\n      tradingLogger.error('Failed to check network performance', error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check database performance\r\n   */\r\n  private async checkDatabasePerformance(timestamp: Date): Promise<void> {\r\n    try {\r\n      // Check database connection count\r\n      const connections = await this.getDatabaseConnections();\r\n      \r\n      // Check query performance\r\n      const queryTime = await this.measureDatabaseQueryTime();\r\n      \r\n      // Check cache hit ratio (if available)\r\n      const cacheHitRatio = await this.getDatabaseCacheHitRatio();\r\n      \r\n      const status = queryTime > this.thresholds.database.critical ? 'critical' :\r\n                    queryTime > this.thresholds.database.warning ? 'warning' : 'healthy';\r\n\r\n      const context: SystemPerformanceContext = {\r\n        component: 'database',\r\n        metrics: {\r\n          database: {\r\n            connections,\r\n            queryTime,\r\n            cacheHitRatio\r\n          }\r\n        },\r\n        thresholds: this.thresholds,\r\n        status,\r\n        timestamp\r\n      };\r\n\r\n      tradingLogger.logSystemPerformance(context);\r\n      \r\n      // Store database performance history\r\n      this.storePerformanceMetric('db_query_time', queryTime);\r\n      this.storePerformanceMetric('db_connections', connections);\r\n      \r\n      if (cacheHitRatio > 0) {\r\n        this.storePerformanceMetric('db_cache_hit_ratio', cacheHitRatio);\r\n      }\r\n\r\n      if (status !== 'healthy') {\r\n        this.emit('database_performance_issue', context);\r\n      }\r\n\r\n    } catch (error) {\r\n      tradingLogger.error('Failed to check database performance', error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check application performance\r\n   */\r\n  private async checkApplicationPerformance(timestamp: Date): Promise<void> {\r\n    try {\r\n      const memUsage = process.memoryUsage();\r\n      const cpuUsage = process.cpuUsage();\r\n      \r\n      // Calculate application-specific metrics\r\n      const heapUsedMB = memUsage.heapUsed / 1024 / 1024;\r\n      const heapTotalMB = memUsage.heapTotal / 1024 / 1024;\r\n      const heapUsagePercent = (heapUsedMB / heapTotalMB) * 100;\r\n      \r\n      const status = heapUsagePercent > 90 ? 'critical' :\r\n                    heapUsagePercent > 75 ? 'warning' : 'healthy';\r\n\r\n      const context: SystemPerformanceContext = {\r\n        component: 'application',\r\n        metrics: {\r\n          memory: {\r\n            used: memUsage.heapUsed,\r\n            total: memUsage.heapTotal,\r\n            percentage: heapUsagePercent\r\n          }\r\n        },\r\n        thresholds: this.thresholds,\r\n        status,\r\n        timestamp\r\n      };\r\n\r\n      tradingLogger.logSystemPerformance(context);\r\n      \r\n      // Store application performance history\r\n      this.storePerformanceMetric('app_heap_usage', heapUsagePercent);\r\n      this.storePerformanceMetric('app_memory_rss', memUsage.rss / 1024 / 1024);\r\n\r\n      if (status !== 'healthy') {\r\n        this.emit('application_performance_issue', context);\r\n      }\r\n\r\n    } catch (error) {\r\n      tradingLogger.error('Failed to check application performance', error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get CPU usage percentage\r\n   */\r\n  private async getCPUUsage(): Promise<number> {\r\n    return new Promise((resolve) => {\r\n      const startUsage = process.cpuUsage();\r\n      const startTime = performance.now();\r\n\r\n      setTimeout(() => {\r\n        const endUsage = process.cpuUsage(startUsage);\r\n        const endTime = performance.now();\r\n        const timeDiff = endTime - startTime;\r\n\r\n        const userPercent = (endUsage.user / 1000) / timeDiff * 100;\r\n        const systemPercent = (endUsage.system / 1000) / timeDiff * 100;\r\n        \r\n        resolve(Math.min(userPercent + systemPercent, 100));\r\n      }, 100);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get memory usage information\r\n   */\r\n  private async getMemoryUsage(): Promise<{\r\n    used: number;\r\n    total: number;\r\n    percentage: number;\r\n    swap?: number;\r\n  }> {\r\n    const totalMem = os.totalmem();\r\n    const freeMem = os.freemem();\r\n    const usedMem = totalMem - freeMem;\r\n\r\n    let swapUsed = 0;\r\n    try {\r\n      const swapInfo = await execAsync('free | grep Swap');\r\n      const swapMatch = swapInfo.stdout.match(/Swap:\\s+\\d+\\s+(\\d+)/);\r\n      if (swapMatch) {\r\n        swapUsed = parseInt(swapMatch[1]) * 1024; // Convert from KB to bytes\r\n      }\r\n    } catch (error) {\r\n      // Ignore if can't get swap info\r\n    }\r\n\r\n    return {\r\n      used: usedMem,\r\n      total: totalMem,\r\n      percentage: (usedMem / totalMem) * 100,\r\n      swap: swapUsed\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get disk usage information\r\n   */\r\n  private async getDiskUsage(): Promise<{\r\n    used: number;\r\n    total: number;\r\n    percentage: number;\r\n    iops?: number;\r\n  }> {\r\n    try {\r\n      const diskInfo = await execAsync('df -h / | tail -1');\r\n      const parts = diskInfo.stdout.trim().split(/\\s+/);\r\n      \r\n      const total = this.parseStorageSize(parts[1]);\r\n      const used = this.parseStorageSize(parts[2]);\r\n      const percentage = parseFloat(parts[4].replace('%', ''));\r\n\r\n      // Try to get IOPS if available\r\n      let iops = 0;\r\n      try {\r\n        const iostat = await execAsync('iostat -x 1 1 | tail -n +4 | head -1');\r\n        const ioMatch = iostat.stdout.match(/\\s+([0-9.]+)\\s+([0-9.]+)$/);\r\n        if (ioMatch) {\r\n          iops = parseFloat(ioMatch[1]) + parseFloat(ioMatch[2]);\r\n        }\r\n      } catch (error) {\r\n        // Ignore if iostat not available\r\n      }\r\n\r\n      return { used, total, percentage, iops };\r\n    } catch (error) {\r\n      return { used: 0, total: 0, percentage: 0 };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get CPU temperature\r\n   */\r\n  private async getCPUTemperature(): Promise<number> {\r\n    try {\r\n      // Try different methods to get CPU temperature\r\n      const methods = [\r\n        'cat /sys/class/thermal/thermal_zone0/temp',\r\n        'sensors | grep \"Core 0\" | awk \\'{print $3}\\' | sed \\'s/+//\\' | sed \\'s/°C//\\'',\r\n        'cat /sys/devices/platform/coretemp.0/hwmon/hwmon*/temp1_input'\r\n      ];\r\n\r\n      for (const method of methods) {\r\n        try {\r\n          const result = await execAsync(method);\r\n          const temp = parseFloat(result.stdout.trim());\r\n          \r\n          // Convert from millidegrees if necessary\r\n          if (temp > 1000) {\r\n            return temp / 1000;\r\n          }\r\n          \r\n          if (temp > 0 && temp < 150) {\r\n            return temp;\r\n          }\r\n        } catch (error) {\r\n          continue;\r\n        }\r\n      }\r\n      \r\n      return 0; // Temperature not available\r\n    } catch (error) {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check SSH tunnel latency\r\n   */\r\n  private async checkSSHTunnelLatency(): Promise<number> {\r\n    try {\r\n      const startTime = performance.now();\r\n      await execAsync('curl -s --max-time 5 http://localhost:8443/api/v4/spot/time');\r\n      const endTime = performance.now();\r\n      \r\n      return endTime - startTime;\r\n    } catch (error) {\r\n      return 999; // High latency indicates connection issues\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check API latency\r\n   */\r\n  private async checkAPILatency(): Promise<number> {\r\n    try {\r\n      const startTime = performance.now();\r\n      // This would be replaced with actual API call\r\n      await new Promise(resolve => setTimeout(resolve, 10));\r\n      const endTime = performance.now();\r\n      \r\n      return endTime - startTime;\r\n    } catch (error) {\r\n      return 999;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get network statistics\r\n   */\r\n  private async getNetworkStatistics(): Promise<{\r\n    bandwidth: number;\r\n    packetLoss: number;\r\n    connections: number;\r\n  }> {\r\n    try {\r\n      // Get active connections\r\n      const netstat = await execAsync('netstat -an | grep ESTABLISHED | wc -l');\r\n      const connections = parseInt(netstat.stdout.trim()) || 0;\r\n\r\n      // Simplified bandwidth and packet loss (would need more sophisticated monitoring)\r\n      return {\r\n        bandwidth: 1000000, // 1MB/s default\r\n        packetLoss: 0,\r\n        connections\r\n      };\r\n    } catch (error) {\r\n      return { bandwidth: 0, packetLoss: 0, connections: 0 };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get database connections\r\n   */\r\n  private async getDatabaseConnections(): Promise<number> {\r\n    try {\r\n      // This would be replaced with actual database query\r\n      return 5; // Default connection count\r\n    } catch (error) {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Measure database query time\r\n   */\r\n  private async measureDatabaseQueryTime(): Promise<number> {\r\n    try {\r\n      const startTime = performance.now();\r\n      // This would be replaced with actual database query\r\n      await new Promise(resolve => setTimeout(resolve, 5));\r\n      const endTime = performance.now();\r\n      \r\n      return endTime - startTime;\r\n    } catch (error) {\r\n      return 999;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get database cache hit ratio\r\n   */\r\n  private async getDatabaseCacheHitRatio(): Promise<number> {\r\n    try {\r\n      // This would be replaced with actual database query\r\n      return 95.5; // Default cache hit ratio\r\n    } catch (error) {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parse storage size string to bytes\r\n   */\r\n  private parseStorageSize(sizeStr: string): number {\r\n    const units = { K: 1024, M: 1024**2, G: 1024**3, T: 1024**4 };\r\n    const match = sizeStr.match(/^([0-9.]+)([KMGT]?)$/);\r\n    \r\n    if (!match) return 0;\r\n    \r\n    const value = parseFloat(match[1]);\r\n    const unit = match[2] as keyof typeof units;\r\n    \r\n    return value * (units[unit] || 1);\r\n  }\r\n\r\n  /**\r\n   * Determine system status based on metrics\r\n   */\r\n  private determineSystemStatus(metrics: {\r\n    cpu: number;\r\n    memory: number;\r\n    disk: number;\r\n    temperature: number;\r\n  }): 'healthy' | 'warning' | 'critical' {\r\n    const { cpu, memory, disk, temperature } = metrics;\r\n    \r\n    if (cpu > this.thresholds.cpu.critical ||\r\n        memory > this.thresholds.memory.critical ||\r\n        disk > this.thresholds.disk.critical ||\r\n        temperature > this.thresholds.temperature.critical) {\r\n      return 'critical';\r\n    }\r\n    \r\n    if (cpu > this.thresholds.cpu.warning ||\r\n        memory > this.thresholds.memory.warning ||\r\n        disk > this.thresholds.disk.warning ||\r\n        temperature > this.thresholds.temperature.warning) {\r\n      return 'warning';\r\n    }\r\n    \r\n    return 'healthy';\r\n  }\r\n\r\n  /**\r\n   * Store performance metric in history\r\n   */\r\n  private storePerformanceMetric(metric: string, value: number): void {\r\n    const history = this.performanceHistory.get(metric) || [];\r\n    history.push(value);\r\n    \r\n    // Keep only last 100 values\r\n    if (history.length > 100) {\r\n      history.shift();\r\n    }\r\n    \r\n    this.performanceHistory.set(metric, history);\r\n  }\r\n\r\n  /**\r\n   * Get performance history\r\n   */\r\n  public getPerformanceHistory(): Record<string, number[]> {\r\n    return Object.fromEntries(this.performanceHistory);\r\n  }\r\n\r\n  /**\r\n   * Update performance thresholds\r\n   */\r\n  public updateThresholds(newThresholds: Partial<PerformanceThresholds>): void {\r\n    this.thresholds = { ...this.thresholds, ...newThresholds };\r\n    \r\n    tradingLogger.info('Performance thresholds updated', {\r\n      component: 'PerformanceMonitor',\r\n      thresholds: this.thresholds\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get current hardware information\r\n   */\r\n  public getHardwareInfo(): HardwareInfo | undefined {\r\n    return this.hardwareInfo;\r\n  }\r\n\r\n  /**\r\n   * Get monitoring status\r\n   */\r\n  public isMonitoringActive(): boolean {\r\n    return this.isMonitoring;\r\n  }\r\n}\r\n\r\n// Create and export singleton instance\r\nexport const performanceMonitor = new PerformanceMonitor();\r\n\r\n// Export types\r\nexport type { PerformanceThresholds, HardwareInfo };"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;AAAA;AAAA,SAAAA,cAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,MAAA,OAAAC,QAAA;EAAA,IAAAC,GAAA;EAAA,IAAAC,YAAA;IAAAL,IAAA;IAAAM,YAAA;MAAA;QAAAC,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MA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MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;IAAA;IAAAC,CAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;IAAA;IAAAC,CAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;IAAA;IAAAC,cAAA;MAAAC,IAAA;MAAAC,QAAA;MAAAC,KAAA;MAAAC,OAAA;MAAAC,cAAA;MAAAC,O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","ignoreList":[]}