{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\tests\\security\\vulnerability-scanner.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\tests\\security\\vulnerability-scanner.test.ts"],"sourcesContent":["/**\r\n * Vulnerability Scanner Tests\r\n * \r\n * Automated vulnerability scanning and security assessment tests\r\n * for the AI crypto trading system.\r\n * \r\n * Requirements: 25.7 - Vulnerability scanning and assessment\r\n */\r\n\r\nimport { SecurityManager } from '@/security/security-manager';\r\nimport { ThreatDetectionEngine } from '@/security/threat-detection-engine';\r\nimport { EncryptionService } from '@/security/encryption-service';\r\nimport crypto from 'crypto';\r\nimport fs from 'fs';\r\nimport path from 'path';\r\n\r\n// Mock external dependencies\r\njest.mock('@/core/logging/logger', () => ({\r\n  logger: {\r\n    info: jest.fn(),\r\n    debug: jest.fn(),\r\n    warn: jest.fn(),\r\n    error: jest.fn()\r\n  }\r\n}));\r\n\r\njest.mock('@/security/key-manager', () => ({\r\n  keyManager: {\r\n    generateSecureKey: jest.fn(() => 'mock-key'),\r\n    encryptKey: jest.fn(() => 'encrypted-key'),\r\n    decryptKey: jest.fn(() => 'decrypted-key')\r\n  }\r\n}));\r\n\r\njest.mock('fs');\r\njest.mock('path');\r\n\r\nconst mockedFs = fs as jest.Mocked<typeof fs>;\r\nconst mockedPath = path as jest.Mocked<typeof path>;\r\n\r\ndescribe('Vulnerability Scanner Tests', () => {\r\n  let securityManager: SecurityManager;\r\n  let threatDetection: ThreatDetectionEngine;\r\n\r\n  beforeEach(() => {\r\n    // Set up test environment\r\n    process.env.MASTER_ENCRYPTION_KEY = crypto.randomBytes(32).toString('hex');\r\n    \r\n    securityManager = new SecurityManager();\r\n    threatDetection = new ThreatDetectionEngine();\r\n    \r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  afterEach(() => {\r\n    delete process.env.MASTER_ENCRYPTION_KEY;\r\n  });\r\n\r\n  describe('Code Vulnerability Scanning', () => {\r\n    it('should detect hardcoded secrets in code', async () => {\r\n      const codeSnippets = [\r\n        // API Keys\r\n        'const apiKey = \"gateio_api_key_12345\";',\r\n        'GATE_IO_SECRET = \"super_secret_key_67890\"',\r\n        'const password = \"weak123\";'\r\n      ];\r\n\r\n      // Mock vulnerability scanning\r\n      const vulnerabilities = await threatDetection.scanCodeVulnerabilities(codeSnippets);\r\n      \r\n      expect(vulnerabilities).toBeDefined();\r\n      expect(vulnerabilities.length).toBeGreaterThan(0);\r\n      expect(vulnerabilities.some(v => v.type === 'HARDCODED_SECRET')).toBe(true);\r\n    });\r\n\r\n    it('should detect SQL injection vulnerabilities', async () => {\r\n      const sqlQueries = [\r\n        'SELECT * FROM users WHERE id = ' + userId,\r\n        'DELETE FROM orders WHERE user_id = \"' + userInput + '\"'\r\n      ];\r\n\r\n      const vulnerabilities = await threatDetection.scanSQLInjection(sqlQueries);\r\n      \r\n      expect(vulnerabilities).toBeDefined();\r\n      expect(vulnerabilities.length).toBeGreaterThan(0);\r\n    });\r\n  });\r\n\r\n  describe('Dependency Vulnerability Scanning', () => {\r\n    it('should scan package.json for vulnerable dependencies', async () => {\r\n      const mockPackageJson = {\r\n        dependencies: {\r\n          'vulnerable-package': '1.0.0',\r\n          'safe-package': '2.0.0'\r\n        }\r\n      };\r\n\r\n      mockedFs.readFileSync.mockReturnValue(JSON.stringify(mockPackageJson));\r\n      \r\n      const vulnerabilities = await securityManager.scanDependencies();\r\n      \r\n      expect(vulnerabilities).toBeDefined();\r\n      expect(Array.isArray(vulnerabilities)).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('Network Vulnerability Scanning', () => {\r\n    it('should scan for open ports and services', async () => {\r\n      const networkScan = await securityManager.scanNetwork();\r\n      \r\n      expect(networkScan).toBeDefined();\r\n      expect(networkScan).toHaveProperty('openPorts');\r\n      expect(networkScan).toHaveProperty('services');\r\n    });\r\n  });\r\n});"],"version":3}