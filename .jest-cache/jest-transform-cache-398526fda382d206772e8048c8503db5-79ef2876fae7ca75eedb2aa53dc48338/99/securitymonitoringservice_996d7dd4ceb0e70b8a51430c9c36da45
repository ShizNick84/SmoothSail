c8490328930ea5caa4c0aba3a8ab1468
"use strict";

/**
 * =============================================================================
 * AI CRYPTO TRADING AGENT - CONTINUOUS SECURITY MONITORING SERVICE
 * =============================================================================
 *
 * This service provides 24/7 continuous security monitoring capabilities for
 * the AI crypto trading agent. It orchestrates real-time threat detection,
 * security event analysis, and automated incident response.
 *
 * CRITICAL SECURITY NOTICE:
 * This service is the central nervous system for security operations.
 * It must operate continuously without interruption to protect trading capital
 * and system integrity. All security events are monitored, analyzed, and
 * responded to in real-time.
 *
 * Monitoring Capabilities:
 * - 24/7 real-time security event monitoring
 * - Automated threat detection and analysis
 * - Security dashboard with threat visualization
 * - Security metrics and KPI tracking
 * - Incident correlation and pattern analysis
 * - Automated alerting and escalation
 *
 * @author AI Crypto Trading System
 * @version 1.0.0
 * @license PROPRIETARY
 * =============================================================================
 */
/* istanbul ignore next */
function cov_1fe1wefs5z() {
  var path = "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\security-monitoring-service.ts";
  var hash = "06f6753f776168b0357ea1c931430cc1c2abfd93";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\security-monitoring-service.ts",
    statementMap: {
      "0": {
        start: {
          line: 30,
          column: 0
        },
        end: {
          line: 30,
          column: 62
        }
      },
      "1": {
        start: {
          line: 31,
          column: 0
        },
        end: {
          line: 31,
          column: 137
        }
      },
      "2": {
        start: {
          line: 32,
          column: 17
        },
        end: {
          line: 32,
          column: 34
        }
      },
      "3": {
        start: {
          line: 33,
          column: 17
        },
        end: {
          line: 33,
          column: 49
        }
      },
      "4": {
        start: {
          line: 34,
          column: 24
        },
        end: {
          line: 34,
          column: 59
        }
      },
      "5": {
        start: {
          line: 35,
          column: 34
        },
        end: {
          line: 35,
          column: 79
        }
      },
      "6": {
        start: {
          line: 40,
          column: 0
        },
        end: {
          line: 51,
          column: 78
        }
      },
      "7": {
        start: {
          line: 41,
          column: 4
        },
        end: {
          line: 41,
          column: 61
        }
      },
      "8": {
        start: {
          line: 42,
          column: 4
        },
        end: {
          line: 42,
          column: 75
        }
      },
      "9": {
        start: {
          line: 43,
          column: 4
        },
        end: {
          line: 43,
          column: 69
        }
      },
      "10": {
        start: {
          line: 44,
          column: 4
        },
        end: {
          line: 44,
          column: 69
        }
      },
      "11": {
        start: {
          line: 45,
          column: 4
        },
        end: {
          line: 45,
          column: 59
        }
      },
      "12": {
        start: {
          line: 46,
          column: 4
        },
        end: {
          line: 46,
          column: 65
        }
      },
      "13": {
        start: {
          line: 47,
          column: 4
        },
        end: {
          line: 47,
          column: 73
        }
      },
      "14": {
        start: {
          line: 48,
          column: 4
        },
        end: {
          line: 48,
          column: 71
        }
      },
      "15": {
        start: {
          line: 49,
          column: 4
        },
        end: {
          line: 49,
          column: 81
        }
      },
      "16": {
        start: {
          line: 50,
          column: 4
        },
        end: {
          line: 50,
          column: 69
        }
      },
      "17": {
        start: {
          line: 56,
          column: 0
        },
        end: {
          line: 63,
          column: 84
        }
      },
      "18": {
        start: {
          line: 57,
          column: 4
        },
        end: {
          line: 57,
          column: 39
        }
      },
      "19": {
        start: {
          line: 58,
          column: 4
        },
        end: {
          line: 58,
          column: 59
        }
      },
      "20": {
        start: {
          line: 59,
          column: 4
        },
        end: {
          line: 59,
          column: 53
        }
      },
      "21": {
        start: {
          line: 60,
          column: 4
        },
        end: {
          line: 60,
          column: 51
        }
      },
      "22": {
        start: {
          line: 61,
          column: 4
        },
        end: {
          line: 61,
          column: 49
        }
      },
      "23": {
        start: {
          line: 62,
          column: 4
        },
        end: {
          line: 62,
          column: 61
        }
      },
      "24": {
        start: {
          line: 72,
          column: 19
        },
        end: {
          line: 72,
          column: 21
        }
      },
      "25": {
        start: {
          line: 74,
          column: 22
        },
        end: {
          line: 74,
          column: 31
        }
      },
      "26": {
        start: {
          line: 78,
          column: 25
        },
        end: {
          line: 78,
          column: 29
        }
      },
      "27": {
        start: {
          line: 79,
          column: 22
        },
        end: {
          line: 79,
          column: 26
        }
      },
      "28": {
        start: {
          line: 80,
          column: 24
        },
        end: {
          line: 80,
          column: 28
        }
      },
      "29": {
        start: {
          line: 82,
          column: 23
        },
        end: {
          line: 82,
          column: 33
        }
      },
      "30": {
        start: {
          line: 84,
          column: 26
        },
        end: {
          line: 84,
          column: 35
        }
      },
      "31": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 86,
          column: 16
        }
      },
      "32": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 101,
          column: 10
        }
      },
      "33": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 103,
          column: 56
        }
      },
      "34": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 105,
          column: 34
        }
      },
      "35": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 106,
          column: 76
        }
      },
      "36": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 142,
          column: 9
        }
      },
      "37": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 116,
          column: 82
        }
      },
      "38": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 118,
          column: 44
        }
      },
      "39": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 120,
          column: 56
        }
      },
      "40": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 122,
          column: 45
        }
      },
      "41": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 136,
          column: 15
        }
      },
      "42": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 137,
          column: 90
        }
      },
      "43": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 140,
          column: 83
        }
      },
      "44": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 141,
          column: 66
        }
      },
      "45": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 174,
          column: 9
        }
      },
      "46": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 152,
          column: 82
        }
      },
      "47": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 154,
          column: 43
        }
      },
      "48": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 168,
          column: 15
        }
      },
      "49": {
        start: {
          line: 169,
          column: 12
        },
        end: {
          line: 169,
          column: 79
        }
      },
      "50": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 172,
          column: 82
        }
      },
      "51": {
        start: {
          line: 173,
          column: 12
        },
        end: {
          line: 173,
          column: 67
        }
      },
      "52": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 227,
          column: 9
        }
      },
      "53": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 186,
          column: 42
        }
      },
      "54": {
        start: {
          line: 188,
          column: 12
        },
        end: {
          line: 188,
          column: 53
        }
      },
      "55": {
        start: {
          line: 190,
          column: 36
        },
        end: {
          line: 190,
          column: 78
        }
      },
      "56": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 191,
          column: 52
        }
      },
      "57": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 193,
          column: 55
        }
      },
      "58": {
        start: {
          line: 195,
          column: 12
        },
        end: {
          line: 195,
          column: 46
        }
      },
      "59": {
        start: {
          line: 197,
          column: 12
        },
        end: {
          line: 197,
          column: 46
        }
      },
      "60": {
        start: {
          line: 199,
          column: 12
        },
        end: {
          line: 212,
          column: 15
        }
      },
      "61": {
        start: {
          line: 215,
          column: 12
        },
        end: {
          line: 215,
          column: 80
        }
      },
      "62": {
        start: {
          line: 217,
          column: 12
        },
        end: {
          line: 226,
          column: 15
        }
      },
      "63": {
        start: {
          line: 236,
          column: 20
        },
        end: {
          line: 236,
          column: 30
        }
      },
      "64": {
        start: {
          line: 237,
          column: 29
        },
        end: {
          line: 239,
          column: 23
        }
      },
      "65": {
        start: {
          line: 238,
          column: 29
        },
        end: {
          line: 238,
          column: 80
        }
      },
      "66": {
        start: {
          line: 241,
          column: 31
        },
        end: {
          line: 241,
          column: 118
        }
      },
      "67": {
        start: {
          line: 241,
          column: 56
        },
        end: {
          line: 241,
          column: 117
        }
      },
      "68": {
        start: {
          line: 242,
          column: 27
        },
        end: {
          line: 242,
          column: 110
        }
      },
      "69": {
        start: {
          line: 242,
          column: 52
        },
        end: {
          line: 242,
          column: 109
        }
      },
      "70": {
        start: {
          line: 243,
          column: 29
        },
        end: {
          line: 243,
          column: 37
        }
      },
      "71": {
        start: {
          line: 244,
          column: 8
        },
        end: {
          line: 249,
          column: 9
        }
      },
      "72": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 245,
          column: 40
        }
      },
      "73": {
        start: {
          line: 247,
          column: 13
        },
        end: {
          line: 249,
          column: 9
        }
      },
      "74": {
        start: {
          line: 248,
          column: 12
        },
        end: {
          line: 248,
          column: 39
        }
      },
      "75": {
        start: {
          line: 251,
          column: 36
        },
        end: {
          line: 251,
          column: 82
        }
      },
      "76": {
        start: {
          line: 253,
          column: 29
        },
        end: {
          line: 253,
          column: 60
        }
      },
      "77": {
        start: {
          line: 254,
          column: 8
        },
        end: {
          line: 261,
          column: 10
        }
      },
      "78": {
        start: {
          line: 270,
          column: 8
        },
        end: {
          line: 270,
          column: 43
        }
      },
      "79": {
        start: {
          line: 279,
          column: 8
        },
        end: {
          line: 289,
          column: 10
        }
      },
      "80": {
        start: {
          line: 297,
          column: 8
        },
        end: {
          line: 319,
          column: 11
        }
      },
      "81": {
        start: {
          line: 298,
          column: 12
        },
        end: {
          line: 318,
          column: 13
        }
      },
      "82": {
        start: {
          line: 300,
          column: 16
        },
        end: {
          line: 306,
          column: 19
        }
      },
      "83": {
        start: {
          line: 308,
          column: 16
        },
        end: {
          line: 310,
          column: 17
        }
      },
      "84": {
        start: {
          line: 309,
          column: 20
        },
        end: {
          line: 309,
          column: 62
        }
      },
      "85": {
        start: {
          line: 312,
          column: 16
        },
        end: {
          line: 314,
          column: 17
        }
      },
      "86": {
        start: {
          line: 313,
          column: 20
        },
        end: {
          line: 313,
          column: 58
        }
      },
      "87": {
        start: {
          line: 317,
          column: 16
        },
        end: {
          line: 317,
          column: 81
        }
      },
      "88": {
        start: {
          line: 327,
          column: 8
        },
        end: {
          line: 334,
          column: 43
        }
      },
      "89": {
        start: {
          line: 328,
          column: 12
        },
        end: {
          line: 333,
          column: 13
        }
      },
      "90": {
        start: {
          line: 329,
          column: 16
        },
        end: {
          line: 329,
          column: 49
        }
      },
      "91": {
        start: {
          line: 332,
          column: 16
        },
        end: {
          line: 332,
          column: 71
        }
      },
      "92": {
        start: {
          line: 336,
          column: 8
        },
        end: {
          line: 343,
          column: 40
        }
      },
      "93": {
        start: {
          line: 337,
          column: 12
        },
        end: {
          line: 342,
          column: 13
        }
      },
      "94": {
        start: {
          line: 338,
          column: 16
        },
        end: {
          line: 338,
          column: 37
        }
      },
      "95": {
        start: {
          line: 341,
          column: 16
        },
        end: {
          line: 341,
          column: 72
        }
      },
      "96": {
        start: {
          line: 345,
          column: 8
        },
        end: {
          line: 352,
          column: 49
        }
      },
      "97": {
        start: {
          line: 346,
          column: 12
        },
        end: {
          line: 351,
          column: 13
        }
      },
      "98": {
        start: {
          line: 347,
          column: 16
        },
        end: {
          line: 347,
          column: 78
        }
      },
      "99": {
        start: {
          line: 350,
          column: 16
        },
        end: {
          line: 350,
          column: 74
        }
      },
      "100": {
        start: {
          line: 359,
          column: 8
        },
        end: {
          line: 362,
          column: 9
        }
      },
      "101": {
        start: {
          line: 360,
          column: 12
        },
        end: {
          line: 360,
          column: 51
        }
      },
      "102": {
        start: {
          line: 361,
          column: 12
        },
        end: {
          line: 361,
          column: 43
        }
      },
      "103": {
        start: {
          line: 363,
          column: 8
        },
        end: {
          line: 366,
          column: 9
        }
      },
      "104": {
        start: {
          line: 364,
          column: 12
        },
        end: {
          line: 364,
          column: 48
        }
      },
      "105": {
        start: {
          line: 365,
          column: 12
        },
        end: {
          line: 365,
          column: 40
        }
      },
      "106": {
        start: {
          line: 367,
          column: 8
        },
        end: {
          line: 370,
          column: 9
        }
      },
      "107": {
        start: {
          line: 368,
          column: 12
        },
        end: {
          line: 368,
          column: 50
        }
      },
      "108": {
        start: {
          line: 369,
          column: 12
        },
        end: {
          line: 369,
          column: 42
        }
      },
      "109": {
        start: {
          line: 378,
          column: 8
        },
        end: {
          line: 397,
          column: 11
        }
      },
      "110": {
        start: {
          line: 379,
          column: 34
        },
        end: {
          line: 395,
          column: 13
        }
      },
      "111": {
        start: {
          line: 396,
          column: 12
        },
        end: {
          line: 396,
          column: 59
        }
      },
      "112": {
        start: {
          line: 399,
          column: 8
        },
        end: {
          line: 408,
          column: 11
        }
      },
      "113": {
        start: {
          line: 400,
          column: 12
        },
        end: {
          line: 405,
          column: 15
        }
      },
      "114": {
        start: {
          line: 407,
          column: 12
        },
        end: {
          line: 407,
          column: 52
        }
      },
      "115": {
        start: {
          line: 417,
          column: 8
        },
        end: {
          line: 429,
          column: 9
        }
      },
      "116": {
        start: {
          line: 419,
          column: 12
        },
        end: {
          line: 419,
          column: 43
        }
      },
      "117": {
        start: {
          line: 421,
          column: 12
        },
        end: {
          line: 421,
          column: 40
        }
      },
      "118": {
        start: {
          line: 423,
          column: 12
        },
        end: {
          line: 423,
          column: 36
        }
      },
      "119": {
        start: {
          line: 425,
          column: 12
        },
        end: {
          line: 425,
          column: 45
        }
      },
      "120": {
        start: {
          line: 428,
          column: 12
        },
        end: {
          line: 428,
          column: 68
        }
      },
      "121": {
        start: {
          line: 438,
          column: 8
        },
        end: {
          line: 438,
          column: 38
        }
      },
      "122": {
        start: {
          line: 440,
          column: 8
        },
        end: {
          line: 442,
          column: 9
        }
      },
      "123": {
        start: {
          line: 441,
          column: 12
        },
        end: {
          line: 441,
          column: 38
        }
      },
      "124": {
        start: {
          line: 444,
          column: 8
        },
        end: {
          line: 446,
          column: 9
        }
      },
      "125": {
        start: {
          line: 445,
          column: 12
        },
        end: {
          line: 445,
          column: 59
        }
      },
      "126": {
        start: {
          line: 456,
          column: 8
        },
        end: {
          line: 472,
          column: 9
        }
      },
      "127": {
        start: {
          line: 457,
          column: 35
        },
        end: {
          line: 457,
          column: 71
        }
      },
      "128": {
        start: {
          line: 458,
          column: 37
        },
        end: {
          line: 458,
          column: 87
        }
      },
      "129": {
        start: {
          line: 460,
          column: 12
        },
        end: {
          line: 460,
          column: 41
        }
      },
      "130": {
        start: {
          line: 462,
          column: 32
        },
        end: {
          line: 462,
          column: 74
        }
      },
      "131": {
        start: {
          line: 463,
          column: 33
        },
        end: {
          line: 463,
          column: 98
        }
      },
      "132": {
        start: {
          line: 463,
          column: 62
        },
        end: {
          line: 463,
          column: 97
        }
      },
      "133": {
        start: {
          line: 464,
          column: 12
        },
        end: {
          line: 464,
          column: 71
        }
      },
      "134": {
        start: {
          line: 466,
          column: 12
        },
        end: {
          line: 468,
          column: 13
        }
      },
      "135": {
        start: {
          line: 467,
          column: 16
        },
        end: {
          line: 467,
          column: 80
        }
      },
      "136": {
        start: {
          line: 471,
          column: 12
        },
        end: {
          line: 471,
          column: 72
        }
      },
      "137": {
        start: {
          line: 482,
          column: 24
        },
        end: {
          line: 482,
          column: 26
        }
      },
      "138": {
        start: {
          line: 484,
          column: 8
        },
        end: {
          line: 506,
          column: 9
        }
      },
      "139": {
        start: {
          line: 486,
          column: 16
        },
        end: {
          line: 486,
          column: 51
        }
      },
      "140": {
        start: {
          line: 487,
          column: 16
        },
        end: {
          line: 489,
          column: 17
        }
      },
      "141": {
        start: {
          line: 488,
          column: 20
        },
        end: {
          line: 488,
          column: 56
        }
      },
      "142": {
        start: {
          line: 490,
          column: 16
        },
        end: {
          line: 492,
          column: 17
        }
      },
      "143": {
        start: {
          line: 491,
          column: 20
        },
        end: {
          line: 491,
          column: 63
        }
      },
      "144": {
        start: {
          line: 493,
          column: 16
        },
        end: {
          line: 493,
          column: 22
        }
      },
      "145": {
        start: {
          line: 495,
          column: 16
        },
        end: {
          line: 495,
          column: 50
        }
      },
      "146": {
        start: {
          line: 496,
          column: 16
        },
        end: {
          line: 498,
          column: 17
        }
      },
      "147": {
        start: {
          line: 497,
          column: 20
        },
        end: {
          line: 497,
          column: 60
        }
      },
      "148": {
        start: {
          line: 499,
          column: 16
        },
        end: {
          line: 499,
          column: 22
        }
      },
      "149": {
        start: {
          line: 501,
          column: 16
        },
        end: {
          line: 501,
          column: 53
        }
      },
      "150": {
        start: {
          line: 502,
          column: 16
        },
        end: {
          line: 502,
          column: 52
        }
      },
      "151": {
        start: {
          line: 503,
          column: 16
        },
        end: {
          line: 503,
          column: 22
        }
      },
      "152": {
        start: {
          line: 505,
          column: 16
        },
        end: {
          line: 505,
          column: 48
        }
      },
      "153": {
        start: {
          line: 507,
          column: 8
        },
        end: {
          line: 507,
          column: 23
        }
      },
      "154": {
        start: {
          line: 517,
          column: 8
        },
        end: {
          line: 548,
          column: 9
        }
      },
      "155": {
        start: {
          line: 518,
          column: 12
        },
        end: {
          line: 544,
          column: 13
        }
      },
      "156": {
        start: {
          line: 519,
          column: 16
        },
        end: {
          line: 543,
          column: 17
        }
      },
      "157": {
        start: {
          line: 521,
          column: 24
        },
        end: {
          line: 525,
          column: 27
        }
      },
      "158": {
        start: {
          line: 526,
          column: 24
        },
        end: {
          line: 526,
          column: 30
        }
      },
      "159": {
        start: {
          line: 528,
          column: 24
        },
        end: {
          line: 528,
          column: 60
        }
      },
      "160": {
        start: {
          line: 529,
          column: 24
        },
        end: {
          line: 529,
          column: 30
        }
      },
      "161": {
        start: {
          line: 531,
          column: 24
        },
        end: {
          line: 531,
          column: 67
        }
      },
      "162": {
        start: {
          line: 532,
          column: 24
        },
        end: {
          line: 532,
          column: 30
        }
      },
      "163": {
        start: {
          line: 535,
          column: 24
        },
        end: {
          line: 535,
          column: 82
        }
      },
      "164": {
        start: {
          line: 536,
          column: 24
        },
        end: {
          line: 536,
          column: 30
        }
      },
      "165": {
        start: {
          line: 539,
          column: 24
        },
        end: {
          line: 539,
          column: 89
        }
      },
      "166": {
        start: {
          line: 540,
          column: 24
        },
        end: {
          line: 540,
          column: 30
        }
      },
      "167": {
        start: {
          line: 542,
          column: 24
        },
        end: {
          line: 542,
          column: 79
        }
      },
      "168": {
        start: {
          line: 547,
          column: 12
        },
        end: {
          line: 547,
          column: 83
        }
      },
      "169": {
        start: {
          line: 557,
          column: 8
        },
        end: {
          line: 557,
          column: 43
        }
      },
      "170": {
        start: {
          line: 559,
          column: 8
        },
        end: {
          line: 560,
          column: 77
        }
      },
      "171": {
        start: {
          line: 562,
          column: 8
        },
        end: {
          line: 563,
          column: 74
        }
      },
      "172": {
        start: {
          line: 565,
          column: 8
        },
        end: {
          line: 565,
          column: 53
        }
      },
      "173": {
        start: {
          line: 575,
          column: 8
        },
        end: {
          line: 580,
          column: 11
        }
      },
      "174": {
        start: {
          line: 582,
          column: 8
        },
        end: {
          line: 582,
          column: 44
        }
      },
      "175": {
        start: {
          line: 584,
          column: 8
        },
        end: {
          line: 584,
          column: 57
        }
      },
      "176": {
        start: {
          line: 594,
          column: 8
        },
        end: {
          line: 599,
          column: 11
        }
      },
      "177": {
        start: {
          line: 601,
          column: 8
        },
        end: {
          line: 601,
          column: 51
        }
      },
      "178": {
        start: {
          line: 603,
          column: 8
        },
        end: {
          line: 603,
          column: 54
        }
      },
      "179": {
        start: {
          line: 614,
          column: 31
        },
        end: {
          line: 628,
          column: 9
        }
      },
      "180": {
        start: {
          line: 629,
          column: 8
        },
        end: {
          line: 629,
          column: 56
        }
      },
      "181": {
        start: {
          line: 640,
          column: 8
        },
        end: {
          line: 644,
          column: 11
        }
      },
      "182": {
        start: {
          line: 646,
          column: 33
        },
        end: {
          line: 660,
          column: 9
        }
      },
      "183": {
        start: {
          line: 649,
          column: 50
        },
        end: {
          line: 649,
          column: 60
        }
      },
      "184": {
        start: {
          line: 654,
          column: 50
        },
        end: {
          line: 654,
          column: 59
        }
      },
      "185": {
        start: {
          line: 661,
          column: 8
        },
        end: {
          line: 661,
          column: 58
        }
      },
      "186": {
        start: {
          line: 672,
          column: 8
        },
        end: {
          line: 676,
          column: 11
        }
      },
      "187": {
        start: {
          line: 686,
          column: 8
        },
        end: {
          line: 690,
          column: 11
        }
      },
      "188": {
        start: {
          line: 709,
          column: 29
        },
        end: {
          line: 709,
          column: 47
        }
      },
      "189": {
        start: {
          line: 710,
          column: 29
        },
        end: {
          line: 710,
          column: 104
        }
      },
      "190": {
        start: {
          line: 710,
          column: 63
        },
        end: {
          line: 710,
          column: 103
        }
      },
      "191": {
        start: {
          line: 711,
          column: 8
        },
        end: {
          line: 716,
          column: 9
        }
      },
      "192": {
        start: {
          line: 712,
          column: 12
        },
        end: {
          line: 715,
          column: 15
        }
      },
      "193": {
        start: {
          line: 723,
          column: 27
        },
        end: {
          line: 723,
          column: 61
        }
      },
      "194": {
        start: {
          line: 725,
          column: 8
        },
        end: {
          line: 725,
          column: 102
        }
      },
      "195": {
        start: {
          line: 725,
          column: 62
        },
        end: {
          line: 725,
          column: 100
        }
      },
      "196": {
        start: {
          line: 727,
          column: 8
        },
        end: {
          line: 732,
          column: 9
        }
      },
      "197": {
        start: {
          line: 728,
          column: 12
        },
        end: {
          line: 731,
          column: 13
        }
      },
      "198": {
        start: {
          line: 730,
          column: 16
        },
        end: {
          line: 730,
          column: 53
        }
      },
      "199": {
        start: {
          line: 734,
          column: 8
        },
        end: {
          line: 742,
          column: 9
        }
      },
      "200": {
        start: {
          line: 735,
          column: 33
        },
        end: {
          line: 735,
          column: 95
        }
      },
      "201": {
        start: {
          line: 735,
          column: 56
        },
        end: {
          line: 735,
          column: 94
        }
      },
      "202": {
        start: {
          line: 736,
          column: 12
        },
        end: {
          line: 741,
          column: 13
        }
      },
      "203": {
        start: {
          line: 737,
          column: 16
        },
        end: {
          line: 737,
          column: 53
        }
      },
      "204": {
        start: {
          line: 740,
          column: 16
        },
        end: {
          line: 740,
          column: 64
        }
      },
      "205": {
        start: {
          line: 758,
          column: 8
        },
        end: {
          line: 759,
          column: 66
        }
      },
      "206": {
        start: {
          line: 761,
          column: 29
        },
        end: {
          line: 761,
          column: 124
        }
      },
      "207": {
        start: {
          line: 761,
          column: 63
        },
        end: {
          line: 761,
          column: 116
        }
      },
      "208": {
        start: {
          line: 762,
          column: 8
        },
        end: {
          line: 764,
          column: 76
        }
      },
      "209": {
        start: {
          line: 766,
          column: 29
        },
        end: {
          line: 767,
          column: 9
        }
      },
      "210": {
        start: {
          line: 766,
          column: 63
        },
        end: {
          line: 766,
          column: 111
        }
      },
      "211": {
        start: {
          line: 768,
          column: 28
        },
        end: {
          line: 768,
          column: 88
        }
      },
      "212": {
        start: {
          line: 768,
          column: 64
        },
        end: {
          line: 768,
          column: 84
        }
      },
      "213": {
        start: {
          line: 769,
          column: 32
        },
        end: {
          line: 769,
          column: 95
        }
      },
      "214": {
        start: {
          line: 770,
          column: 8
        },
        end: {
          line: 770,
          column: 87
        }
      },
      "215": {
        start: {
          line: 772,
          column: 8
        },
        end: {
          line: 772,
          column: 53
        }
      },
      "216": {
        start: {
          line: 782,
          column: 30
        },
        end: {
          line: 782,
          column: 32
        }
      },
      "217": {
        start: {
          line: 783,
          column: 32
        },
        end: {
          line: 783,
          column: 34
        }
      },
      "218": {
        start: {
          line: 784,
          column: 31
        },
        end: {
          line: 784,
          column: 33
        }
      },
      "219": {
        start: {
          line: 786,
          column: 8
        },
        end: {
          line: 789,
          column: 9
        }
      },
      "220": {
        start: {
          line: 787,
          column: 12
        },
        end: {
          line: 787,
          column: 87
        }
      },
      "221": {
        start: {
          line: 788,
          column: 12
        },
        end: {
          line: 788,
          column: 85
        }
      },
      "222": {
        start: {
          line: 791,
          column: 20
        },
        end: {
          line: 791,
          column: 30
        }
      },
      "223": {
        start: {
          line: 792,
          column: 8
        },
        end: {
          line: 799,
          column: 9
        }
      },
      "224": {
        start: {
          line: 792,
          column: 21
        },
        end: {
          line: 792,
          column: 23
        }
      },
      "225": {
        start: {
          line: 793,
          column: 31
        },
        end: {
          line: 793,
          column: 77
        }
      },
      "226": {
        start: {
          line: 794,
          column: 32
        },
        end: {
          line: 794,
          column: 52
        }
      },
      "227": {
        start: {
          line: 795,
          column: 30
        },
        end: {
          line: 795,
          column: 60
        }
      },
      "228": {
        start: {
          line: 796,
          column: 26
        },
        end: {
          line: 797,
          column: 61
        }
      },
      "229": {
        start: {
          line: 796,
          column: 49
        },
        end: {
          line: 797,
          column: 53
        }
      },
      "230": {
        start: {
          line: 798,
          column: 12
        },
        end: {
          line: 798,
          column: 66
        }
      },
      "231": {
        start: {
          line: 800,
          column: 8
        },
        end: {
          line: 800,
          column: 66
        }
      },
      "232": {
        start: {
          line: 809,
          column: 8
        },
        end: {
          line: 818,
          column: 10
        }
      },
      "233": {
        start: {
          line: 827,
          column: 8
        },
        end: {
          line: 834,
          column: 10
        }
      },
      "234": {
        start: {
          line: 837,
          column: 0
        },
        end: {
          line: 837,
          column: 62
        }
      },
      "235": {
        start: {
          line: 839,
          column: 0
        },
        end: {
          line: 839,
          column: 68
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 40,
            column: 1
          },
          end: {
            line: 40,
            column: 2
          }
        },
        loc: {
          start: {
            line: 40,
            column: 30
          },
          end: {
            line: 51,
            column: 1
          }
        },
        line: 40
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 56,
            column: 1
          },
          end: {
            line: 56,
            column: 2
          }
        },
        loc: {
          start: {
            line: 56,
            column: 32
          },
          end: {
            line: 63,
            column: 1
          }
        },
        line: 56
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 85,
            column: 4
          },
          end: {
            line: 85,
            column: 5
          }
        },
        loc: {
          start: {
            line: 85,
            column: 24
          },
          end: {
            line: 107,
            column: 5
          }
        },
        line: 85
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 114,
            column: 4
          },
          end: {
            line: 114,
            column: 5
          }
        },
        loc: {
          start: {
            line: 114,
            column: 28
          },
          end: {
            line: 143,
            column: 5
          }
        },
        line: 114
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 150,
            column: 4
          },
          end: {
            line: 150,
            column: 5
          }
        },
        loc: {
          start: {
            line: 150,
            column: 27
          },
          end: {
            line: 175,
            column: 5
          }
        },
        line: 150
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 183,
            column: 4
          },
          end: {
            line: 183,
            column: 5
          }
        },
        loc: {
          start: {
            line: 183,
            column: 38
          },
          end: {
            line: 228,
            column: 5
          }
        },
        line: 183
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 235,
            column: 4
          },
          end: {
            line: 235,
            column: 5
          }
        },
        loc: {
          start: {
            line: 235,
            column: 31
          },
          end: {
            line: 262,
            column: 5
          }
        },
        line: 235
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 238,
            column: 20
          },
          end: {
            line: 238,
            column: 21
          }
        },
        loc: {
          start: {
            line: 238,
            column: 29
          },
          end: {
            line: 238,
            column: 80
          }
        },
        line: 238
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 241,
            column: 51
          },
          end: {
            line: 241,
            column: 52
          }
        },
        loc: {
          start: {
            line: 241,
            column: 56
          },
          end: {
            line: 241,
            column: 117
          }
        },
        line: 241
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 242,
            column: 47
          },
          end: {
            line: 242,
            column: 48
          }
        },
        loc: {
          start: {
            line: 242,
            column: 52
          },
          end: {
            line: 242,
            column: 109
          }
        },
        line: 242
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 269,
            column: 4
          },
          end: {
            line: 269,
            column: 5
          }
        },
        loc: {
          start: {
            line: 269,
            column: 25
          },
          end: {
            line: 271,
            column: 5
          }
        },
        line: 269
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 278,
            column: 4
          },
          end: {
            line: 278,
            column: 5
          }
        },
        loc: {
          start: {
            line: 278,
            column: 24
          },
          end: {
            line: 290,
            column: 5
          }
        },
        line: 278
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 295,
            column: 4
          },
          end: {
            line: 295,
            column: 5
          }
        },
        loc: {
          start: {
            line: 295,
            column: 25
          },
          end: {
            line: 320,
            column: 5
          }
        },
        line: 295
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 297,
            column: 33
          },
          end: {
            line: 297,
            column: 34
          }
        },
        loc: {
          start: {
            line: 297,
            column: 50
          },
          end: {
            line: 319,
            column: 9
          }
        },
        line: 297
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 325,
            column: 4
          },
          end: {
            line: 325,
            column: 5
          }
        },
        loc: {
          start: {
            line: 325,
            column: 31
          },
          end: {
            line: 353,
            column: 5
          }
        },
        line: 325
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 327,
            column: 46
          },
          end: {
            line: 327,
            column: 47
          }
        },
        loc: {
          start: {
            line: 327,
            column: 58
          },
          end: {
            line: 334,
            column: 9
          }
        },
        line: 327
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 336,
            column: 43
          },
          end: {
            line: 336,
            column: 44
          }
        },
        loc: {
          start: {
            line: 336,
            column: 49
          },
          end: {
            line: 343,
            column: 9
          }
        },
        line: 336
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 345,
            column: 45
          },
          end: {
            line: 345,
            column: 46
          }
        },
        loc: {
          start: {
            line: 345,
            column: 51
          },
          end: {
            line: 352,
            column: 9
          }
        },
        line: 345
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 358,
            column: 4
          },
          end: {
            line: 358,
            column: 5
          }
        },
        loc: {
          start: {
            line: 358,
            column: 30
          },
          end: {
            line: 371,
            column: 5
          }
        },
        line: 358
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 376,
            column: 4
          },
          end: {
            line: 376,
            column: 5
          }
        },
        loc: {
          start: {
            line: 376,
            column: 43
          },
          end: {
            line: 409,
            column: 5
          }
        },
        line: 376
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 378,
            column: 77
          },
          end: {
            line: 378,
            column: 78
          }
        },
        loc: {
          start: {
            line: 378,
            column: 95
          },
          end: {
            line: 397,
            column: 9
          }
        },
        line: 378
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 399,
            column: 81
          },
          end: {
            line: 399,
            column: 82
          }
        },
        loc: {
          start: {
            line: 399,
            column: 99
          },
          end: {
            line: 408,
            column: 9
          }
        },
        line: 399
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 416,
            column: 4
          },
          end: {
            line: 416,
            column: 5
          }
        },
        loc: {
          start: {
            line: 416,
            column: 32
          },
          end: {
            line: 430,
            column: 5
          }
        },
        line: 416
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 437,
            column: 4
          },
          end: {
            line: 437,
            column: 5
          }
        },
        loc: {
          start: {
            line: 437,
            column: 29
          },
          end: {
            line: 447,
            column: 5
          }
        },
        line: 437
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 455,
            column: 4
          },
          end: {
            line: 455,
            column: 5
          }
        },
        loc: {
          start: {
            line: 455,
            column: 40
          },
          end: {
            line: 473,
            column: 5
          }
        },
        line: 455
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 463,
            column: 57
          },
          end: {
            line: 463,
            column: 58
          }
        },
        loc: {
          start: {
            line: 463,
            column: 62
          },
          end: {
            line: 463,
            column: 97
          }
        },
        line: 463
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 481,
            column: 4
          },
          end: {
            line: 481,
            column: 5
          }
        },
        loc: {
          start: {
            line: 481,
            column: 42
          },
          end: {
            line: 508,
            column: 5
          }
        },
        line: 481
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 516,
            column: 4
          },
          end: {
            line: 516,
            column: 5
          }
        },
        loc: {
          start: {
            line: 516,
            column: 42
          },
          end: {
            line: 549,
            column: 5
          }
        },
        line: 516
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 556,
            column: 4
          },
          end: {
            line: 556,
            column: 5
          }
        },
        loc: {
          start: {
            line: 556,
            column: 33
          },
          end: {
            line: 566,
            column: 5
          }
        },
        line: 556
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 574,
            column: 4
          },
          end: {
            line: 574,
            column: 5
          }
        },
        loc: {
          start: {
            line: 574,
            column: 41
          },
          end: {
            line: 585,
            column: 5
          }
        },
        line: 574
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 593,
            column: 4
          },
          end: {
            line: 593,
            column: 5
          }
        },
        loc: {
          start: {
            line: 593,
            column: 37
          },
          end: {
            line: 604,
            column: 5
          }
        },
        line: 593
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 612,
            column: 4
          },
          end: {
            line: 612,
            column: 5
          }
        },
        loc: {
          start: {
            line: 612,
            column: 39
          },
          end: {
            line: 630,
            column: 5
          }
        },
        line: 612
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 639,
            column: 4
          },
          end: {
            line: 639,
            column: 5
          }
        },
        loc: {
          start: {
            line: 639,
            column: 57
          },
          end: {
            line: 662,
            column: 5
          }
        },
        line: 639
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 649,
            column: 45
          },
          end: {
            line: 649,
            column: 46
          }
        },
        loc: {
          start: {
            line: 649,
            column: 50
          },
          end: {
            line: 649,
            column: 60
          }
        },
        line: 649
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 654,
            column: 45
          },
          end: {
            line: 654,
            column: 46
          }
        },
        loc: {
          start: {
            line: 654,
            column: 50
          },
          end: {
            line: 654,
            column: 59
          }
        },
        line: 654
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 670,
            column: 4
          },
          end: {
            line: 670,
            column: 5
          }
        },
        loc: {
          start: {
            line: 670,
            column: 35
          },
          end: {
            line: 677,
            column: 5
          }
        },
        line: 670
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 685,
            column: 4
          },
          end: {
            line: 685,
            column: 5
          }
        },
        loc: {
          start: {
            line: 685,
            column: 42
          },
          end: {
            line: 693,
            column: 5
          }
        },
        line: 685
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 700,
            column: 4
          },
          end: {
            line: 700,
            column: 5
          }
        },
        loc: {
          start: {
            line: 700,
            column: 30
          },
          end: {
            line: 703,
            column: 5
          }
        },
        line: 700
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 708,
            column: 4
          },
          end: {
            line: 708,
            column: 5
          }
        },
        loc: {
          start: {
            line: 708,
            column: 27
          },
          end: {
            line: 717,
            column: 5
          }
        },
        line: 708
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 710,
            column: 54
          },
          end: {
            line: 710,
            column: 55
          }
        },
        loc: {
          start: {
            line: 710,
            column: 63
          },
          end: {
            line: 710,
            column: 103
          }
        },
        line: 710
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 722,
            column: 4
          },
          end: {
            line: 722,
            column: 5
          }
        },
        loc: {
          start: {
            line: 722,
            column: 23
          },
          end: {
            line: 743,
            column: 5
          }
        },
        line: 722
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 725,
            column: 53
          },
          end: {
            line: 725,
            column: 54
          }
        },
        loc: {
          start: {
            line: 725,
            column: 62
          },
          end: {
            line: 725,
            column: 100
          }
        },
        line: 725
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 735,
            column: 47
          },
          end: {
            line: 735,
            column: 48
          }
        },
        loc: {
          start: {
            line: 735,
            column: 56
          },
          end: {
            line: 735,
            column: 94
          }
        },
        line: 735
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 748,
            column: 4
          },
          end: {
            line: 748,
            column: 5
          }
        },
        loc: {
          start: {
            line: 748,
            column: 32
          },
          end: {
            line: 751,
            column: 5
          }
        },
        line: 748
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 756,
            column: 4
          },
          end: {
            line: 756,
            column: 5
          }
        },
        loc: {
          start: {
            line: 756,
            column: 20
          },
          end: {
            line: 773,
            column: 5
          }
        },
        line: 756
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 761,
            column: 54
          },
          end: {
            line: 761,
            column: 55
          }
        },
        loc: {
          start: {
            line: 761,
            column: 63
          },
          end: {
            line: 761,
            column: 116
          }
        },
        line: 761
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 766,
            column: 54
          },
          end: {
            line: 766,
            column: 55
          }
        },
        loc: {
          start: {
            line: 766,
            column: 63
          },
          end: {
            line: 766,
            column: 111
          }
        },
        line: 766
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 768,
            column: 48
          },
          end: {
            line: 768,
            column: 49
          }
        },
        loc: {
          start: {
            line: 768,
            column: 64
          },
          end: {
            line: 768,
            column: 84
          }
        },
        line: 768
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 781,
            column: 4
          },
          end: {
            line: 781,
            column: 5
          }
        },
        loc: {
          start: {
            line: 781,
            column: 40
          },
          end: {
            line: 801,
            column: 5
          }
        },
        line: 781
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 796,
            column: 40
          },
          end: {
            line: 796,
            column: 41
          }
        },
        loc: {
          start: {
            line: 796,
            column: 49
          },
          end: {
            line: 797,
            column: 53
          }
        },
        line: 796
      },
      "50": {
        name: "(anonymous_50)",
        decl: {
          start: {
            line: 808,
            column: 4
          },
          end: {
            line: 808,
            column: 5
          }
        },
        loc: {
          start: {
            line: 808,
            column: 31
          },
          end: {
            line: 819,
            column: 5
          }
        },
        line: 808
      },
      "51": {
        name: "(anonymous_51)",
        decl: {
          start: {
            line: 826,
            column: 4
          },
          end: {
            line: 826,
            column: 5
          }
        },
        loc: {
          start: {
            line: 826,
            column: 16
          },
          end: {
            line: 835,
            column: 5
          }
        },
        line: 826
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 51,
            column: 3
          },
          end: {
            line: 51,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 51,
            column: 3
          },
          end: {
            line: 51,
            column: 20
          }
        }, {
          start: {
            line: 51,
            column: 25
          },
          end: {
            line: 51,
            column: 75
          }
        }],
        line: 51
      },
      "1": {
        loc: {
          start: {
            line: 63,
            column: 3
          },
          end: {
            line: 63,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 63,
            column: 3
          },
          end: {
            line: 63,
            column: 22
          }
        }, {
          start: {
            line: 63,
            column: 27
          },
          end: {
            line: 63,
            column: 81
          }
        }],
        line: 63
      },
      "2": {
        loc: {
          start: {
            line: 244,
            column: 8
          },
          end: {
            line: 249,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 244,
            column: 8
          },
          end: {
            line: 249,
            column: 9
          }
        }, {
          start: {
            line: 247,
            column: 13
          },
          end: {
            line: 249,
            column: 9
          }
        }],
        line: 244
      },
      "3": {
        loc: {
          start: {
            line: 247,
            column: 13
          },
          end: {
            line: 249,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 247,
            column: 13
          },
          end: {
            line: 249,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 247
      },
      "4": {
        loc: {
          start: {
            line: 308,
            column: 16
          },
          end: {
            line: 310,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 308,
            column: 16
          },
          end: {
            line: 310,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 308
      },
      "5": {
        loc: {
          start: {
            line: 312,
            column: 16
          },
          end: {
            line: 314,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 312,
            column: 16
          },
          end: {
            line: 314,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 312
      },
      "6": {
        loc: {
          start: {
            line: 359,
            column: 8
          },
          end: {
            line: 362,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 359,
            column: 8
          },
          end: {
            line: 362,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 359
      },
      "7": {
        loc: {
          start: {
            line: 363,
            column: 8
          },
          end: {
            line: 366,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 363,
            column: 8
          },
          end: {
            line: 366,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 363
      },
      "8": {
        loc: {
          start: {
            line: 367,
            column: 8
          },
          end: {
            line: 370,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 367,
            column: 8
          },
          end: {
            line: 370,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 367
      },
      "9": {
        loc: {
          start: {
            line: 440,
            column: 8
          },
          end: {
            line: 442,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 440,
            column: 8
          },
          end: {
            line: 442,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 440
      },
      "10": {
        loc: {
          start: {
            line: 444,
            column: 8
          },
          end: {
            line: 446,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 444,
            column: 8
          },
          end: {
            line: 446,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 444
      },
      "11": {
        loc: {
          start: {
            line: 458,
            column: 37
          },
          end: {
            line: 458,
            column: 87
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 458,
            column: 37
          },
          end: {
            line: 458,
            column: 81
          }
        }, {
          start: {
            line: 458,
            column: 85
          },
          end: {
            line: 458,
            column: 87
          }
        }],
        line: 458
      },
      "12": {
        loc: {
          start: {
            line: 466,
            column: 12
          },
          end: {
            line: 468,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 466,
            column: 12
          },
          end: {
            line: 468,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 466
      },
      "13": {
        loc: {
          start: {
            line: 484,
            column: 8
          },
          end: {
            line: 506,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 485,
            column: 12
          },
          end: {
            line: 493,
            column: 22
          }
        }, {
          start: {
            line: 494,
            column: 12
          },
          end: {
            line: 499,
            column: 22
          }
        }, {
          start: {
            line: 500,
            column: 12
          },
          end: {
            line: 503,
            column: 22
          }
        }, {
          start: {
            line: 504,
            column: 12
          },
          end: {
            line: 505,
            column: 48
          }
        }],
        line: 484
      },
      "14": {
        loc: {
          start: {
            line: 487,
            column: 16
          },
          end: {
            line: 489,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 487,
            column: 16
          },
          end: {
            line: 489,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 487
      },
      "15": {
        loc: {
          start: {
            line: 490,
            column: 16
          },
          end: {
            line: 492,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 490,
            column: 16
          },
          end: {
            line: 492,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 490
      },
      "16": {
        loc: {
          start: {
            line: 496,
            column: 16
          },
          end: {
            line: 498,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 496,
            column: 16
          },
          end: {
            line: 498,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 496
      },
      "17": {
        loc: {
          start: {
            line: 519,
            column: 16
          },
          end: {
            line: 543,
            column: 17
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 520,
            column: 20
          },
          end: {
            line: 526,
            column: 30
          }
        }, {
          start: {
            line: 527,
            column: 20
          },
          end: {
            line: 529,
            column: 30
          }
        }, {
          start: {
            line: 530,
            column: 20
          },
          end: {
            line: 532,
            column: 30
          }
        }, {
          start: {
            line: 533,
            column: 20
          },
          end: {
            line: 536,
            column: 30
          }
        }, {
          start: {
            line: 537,
            column: 20
          },
          end: {
            line: 540,
            column: 30
          }
        }, {
          start: {
            line: 541,
            column: 20
          },
          end: {
            line: 542,
            column: 79
          }
        }],
        line: 519
      },
      "18": {
        loc: {
          start: {
            line: 560,
            column: 13
          },
          end: {
            line: 560,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 560,
            column: 13
          },
          end: {
            line: 560,
            column: 66
          }
        }, {
          start: {
            line: 560,
            column: 70
          },
          end: {
            line: 560,
            column: 71
          }
        }],
        line: 560
      },
      "19": {
        loc: {
          start: {
            line: 563,
            column: 13
          },
          end: {
            line: 563,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 563,
            column: 13
          },
          end: {
            line: 563,
            column: 63
          }
        }, {
          start: {
            line: 563,
            column: 67
          },
          end: {
            line: 563,
            column: 68
          }
        }],
        line: 563
      },
      "20": {
        loc: {
          start: {
            line: 711,
            column: 8
          },
          end: {
            line: 716,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 711,
            column: 8
          },
          end: {
            line: 716,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 711
      },
      "21": {
        loc: {
          start: {
            line: 728,
            column: 12
          },
          end: {
            line: 731,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 728,
            column: 12
          },
          end: {
            line: 731,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 728
      },
      "22": {
        loc: {
          start: {
            line: 728,
            column: 16
          },
          end: {
            line: 729,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 728,
            column: 16
          },
          end: {
            line: 728,
            column: 64
          }
        }, {
          start: {
            line: 729,
            column: 16
          },
          end: {
            line: 729,
            column: 57
          }
        }],
        line: 728
      },
      "23": {
        loc: {
          start: {
            line: 736,
            column: 12
          },
          end: {
            line: 741,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 736,
            column: 12
          },
          end: {
            line: 741,
            column: 13
          }
        }, {
          start: {
            line: 739,
            column: 17
          },
          end: {
            line: 741,
            column: 13
          }
        }],
        line: 736
      },
      "24": {
        loc: {
          start: {
            line: 763,
            column: 12
          },
          end: {
            line: 764,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 764,
            column: 16
          },
          end: {
            line: 764,
            column: 71
          }
        }, {
          start: {
            line: 764,
            column: 74
          },
          end: {
            line: 764,
            column: 75
          }
        }],
        line: 763
      },
      "25": {
        loc: {
          start: {
            line: 769,
            column: 32
          },
          end: {
            line: 769,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 769,
            column: 58
          },
          end: {
            line: 769,
            column: 91
          }
        }, {
          start: {
            line: 769,
            column: 94
          },
          end: {
            line: 769,
            column: 95
          }
        }],
        line: 769
      },
      "26": {
        loc: {
          start: {
            line: 787,
            column: 46
          },
          end: {
            line: 787,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 787,
            column: 46
          },
          end: {
            line: 787,
            column: 76
          }
        }, {
          start: {
            line: 787,
            column: 80
          },
          end: {
            line: 787,
            column: 81
          }
        }],
        line: 787
      },
      "27": {
        loc: {
          start: {
            line: 788,
            column: 45
          },
          end: {
            line: 788,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 788,
            column: 45
          },
          end: {
            line: 788,
            column: 74
          }
        }, {
          start: {
            line: 788,
            column: 78
          },
          end: {
            line: 788,
            column: 79
          }
        }],
        line: 788
      },
      "28": {
        loc: {
          start: {
            line: 796,
            column: 49
          },
          end: {
            line: 797,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 796,
            column: 49
          },
          end: {
            line: 796,
            column: 89
          }
        }, {
          start: {
            line: 797,
            column: 16
          },
          end: {
            line: 797,
            column: 53
          }
        }],
        line: 796
      },
      "29": {
        loc: {
          start: {
            line: 810,
            column: 30
          },
          end: {
            line: 810,
            column: 76
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 810,
            column: 56
          },
          end: {
            line: 810,
            column: 64
          }
        }, {
          start: {
            line: 810,
            column: 67
          },
          end: {
            line: 810,
            column: 76
          }
        }],
        line: 810
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0, 0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0, 0, 0, 0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\security-monitoring-service.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\security-monitoring-service.ts"],
      sourcesContent: ["/**\r\n * =============================================================================\r\n * AI CRYPTO TRADING AGENT - CONTINUOUS SECURITY MONITORING SERVICE\r\n * =============================================================================\r\n * \r\n * This service provides 24/7 continuous security monitoring capabilities for\r\n * the AI crypto trading agent. It orchestrates real-time threat detection,\r\n * security event analysis, and automated incident response.\r\n * \r\n * CRITICAL SECURITY NOTICE:\r\n * This service is the central nervous system for security operations.\r\n * It must operate continuously without interruption to protect trading capital\r\n * and system integrity. All security events are monitored, analyzed, and\r\n * responded to in real-time.\r\n * \r\n * Monitoring Capabilities:\r\n * - 24/7 real-time security event monitoring\r\n * - Automated threat detection and analysis\r\n * - Security dashboard with threat visualization\r\n * - Security metrics and KPI tracking\r\n * - Incident correlation and pattern analysis\r\n * - Automated alerting and escalation\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport { EventEmitter } from 'events';\r\nimport { logger } from '@/core/logging/logger';\r\nimport { auditService } from '@/security/audit-service';\r\nimport { threatDetectionEngine, ThreatDetectionEvent, ThreatType } from '@/security/threat-detection-engine';\r\n\r\n/**\r\n * Interface for security monitoring configuration\r\n */\r\nexport interface SecurityMonitoringConfig {\r\n  /** Monitoring interval in milliseconds */\r\n  monitoringInterval: number;\r\n  /** Threat correlation window in milliseconds */\r\n  correlationWindow: number;\r\n  /** Maximum events to store in memory */\r\n  maxEventHistory: number;\r\n  /** Alert thresholds */\r\n  alertThresholds: {\r\n    criticalThreatScore: number;\r\n    highThreatScore: number;\r\n    mediumThreatScore: number;\r\n    eventVelocityThreshold: number;\r\n  };\r\n  /** Dashboard refresh interval */\r\n  dashboardRefreshInterval: number;\r\n  /** Metrics collection interval */\r\n  metricsInterval: number;\r\n}\r\n\r\n/**\r\n * Interface for security event\r\n */\r\nexport interface SecurityEvent {\r\n  /** Unique event identifier */\r\n  eventId: string;\r\n  /** Event type */\r\n  eventType: SecurityEventType;\r\n  /** Event severity (1-10) */\r\n  severity: number;\r\n  /** Event source */\r\n  source: string;\r\n  /** Event target */\r\n  target: string;\r\n  /** Event timestamp */\r\n  timestamp: Date;\r\n  /** Event details */\r\n  details: Record<string, any>;\r\n  /** Related threat detection */\r\n  threatDetection?: ThreatDetectionEvent;\r\n  /** Event status */\r\n  status: SecurityEventStatus;\r\n  /** Response actions taken */\r\n  responseActions: string[];\r\n}\r\n\r\n/**\r\n * Enumeration of security event types\r\n */\r\nexport enum SecurityEventType {\r\n  THREAT_DETECTED = 'threat_detected',\r\n  AUTHENTICATION_FAILURE = 'authentication_failure',\r\n  UNAUTHORIZED_ACCESS = 'unauthorized_access',\r\n  SUSPICIOUS_ACTIVITY = 'suspicious_activity',\r\n  SYSTEM_ANOMALY = 'system_anomaly',\r\n  NETWORK_INTRUSION = 'network_intrusion',\r\n  DATA_ACCESS_VIOLATION = 'data_access_violation',\r\n  CONFIGURATION_CHANGE = 'configuration_change',\r\n  SECURITY_POLICY_VIOLATION = 'security_policy_violation',\r\n  INCIDENT_ESCALATION = 'incident_escalation'\r\n}\r\n\r\n/**\r\n * Enumeration of security event status\r\n */\r\nexport enum SecurityEventStatus {\r\n  NEW = 'new',\r\n  INVESTIGATING = 'investigating',\r\n  RESPONDING = 'responding',\r\n  CONTAINED = 'contained',\r\n  RESOLVED = 'resolved',\r\n  FALSE_POSITIVE = 'false_positive'\r\n}\r\n\r\n/**\r\n * Interface for security metrics\r\n */\r\nexport interface SecurityMetrics {\r\n  /** Total events in monitoring period */\r\n  totalEvents: number;\r\n  /** Events by severity */\r\n  eventsBySeverity: Record<number, number>;\r\n  /** Events by type */\r\n  eventsByType: Record<string, number>;\r\n  /** Threat detection rate */\r\n  threatDetectionRate: number;\r\n  /** False positive rate */\r\n  falsePositiveRate: number;\r\n  /** Average response time */\r\n  averageResponseTime: number;\r\n  /** System security score */\r\n  securityScore: number;\r\n  /** Monitoring uptime */\r\n  monitoringUptime: number;\r\n  /** Last update timestamp */\r\n  lastUpdate: Date;\r\n}\r\n\r\n/**\r\n * Interface for security dashboard data\r\n */\r\nexport interface SecurityDashboardData {\r\n  /** Current security status */\r\n  securityStatus: 'SECURE' | 'WARNING' | 'CRITICAL';\r\n  /** Active threats count */\r\n  activeThreats: number;\r\n  /** Recent events */\r\n  recentEvents: SecurityEvent[];\r\n  /** Security metrics */\r\n  metrics: SecurityMetrics;\r\n  /** Threat visualization data */\r\n  threatVisualization: {\r\n    threatsByType: Record<string, number>;\r\n    threatsBySource: Record<string, number>;\r\n    threatTimeline: Array<{ timestamp: Date; count: number }>;\r\n  };\r\n  /** System health indicators */\r\n  systemHealth: {\r\n    monitoringStatus: 'ACTIVE' | 'DEGRADED' | 'OFFLINE';\r\n    lastHealthCheck: Date;\r\n    componentStatus: Record<string, 'HEALTHY' | 'WARNING' | 'CRITICAL'>;\r\n  };\r\n}\r\n\r\n/**\r\n * Continuous security monitoring service\r\n * Provides 24/7 security monitoring and threat analysis\r\n */\r\nexport class SecurityMonitoringService extends EventEmitter {\r\n  /** Service configuration */\r\n  private config: SecurityMonitoringConfig;\r\n  \r\n  /** Security event history */\r\n  private eventHistory: SecurityEvent[] = [];\r\n  \r\n  /** Active security incidents */\r\n  private activeIncidents: Map<string, SecurityEvent> = new Map();\r\n  \r\n  /** Security metrics */\r\n  private securityMetrics: SecurityMetrics;\r\n  \r\n  /** Monitoring intervals */\r\n  private monitoringInterval: NodeJS.Timeout | null = null;\r\n  private metricsInterval: NodeJS.Timeout | null = null;\r\n  private dashboardInterval: NodeJS.Timeout | null = null;\r\n  \r\n  /** Service start time for uptime calculation */\r\n  private serviceStartTime: Date = new Date();\r\n  \r\n  /** Event correlation patterns */\r\n  private correlationPatterns: Map<string, SecurityEvent[]> = new Map();\r\n\r\n  constructor(config?: Partial<SecurityMonitoringConfig>) {\r\n    super();\r\n    \r\n    // Initialize configuration with defaults\r\n    this.config = {\r\n      monitoringInterval: 5000, // 5 seconds\r\n      correlationWindow: 300000, // 5 minutes\r\n      maxEventHistory: 10000,\r\n      alertThresholds: {\r\n        criticalThreatScore: 9,\r\n        highThreatScore: 7,\r\n        mediumThreatScore: 5,\r\n        eventVelocityThreshold: 100 // events per minute\r\n      },\r\n      dashboardRefreshInterval: 10000, // 10 seconds\r\n      metricsInterval: 60000, // 1 minute\r\n      ...config\r\n    };\r\n    \r\n    // Initialize security metrics\r\n    this.securityMetrics = this.initializeMetrics();\r\n    \r\n    // Set up event handlers\r\n    this.setupEventHandlers();\r\n    \r\n    logger.info('\uD83D\uDEE1\uFE0F Security Monitoring Service initialized');\r\n  }\r\n\r\n  /**\r\n   * Start continuous security monitoring\r\n   * Begins 24/7 security monitoring operations\r\n   * \r\n   * @returns Promise<void>\r\n   */\r\n  public async startMonitoring(): Promise<void> {\r\n    try {\r\n      logger.info('\uD83D\uDE80 Starting continuous security monitoring...');\r\n      \r\n      // Start monitoring intervals\r\n      this.startMonitoringIntervals();\r\n      \r\n      // Initialize threat detection integration\r\n      this.initializeThreatDetectionIntegration();\r\n      \r\n      // Perform initial security scan\r\n      await this.performSecurityScan();\r\n      \r\n      // Create audit entry\r\n      await auditService.createAuditEntry({\r\n        auditId: `sec_mon_start_${Date.now()}`,\r\n        eventType: 'SECURITY_MONITORING_START',\r\n        actor: 'SYSTEM',\r\n        resource: 'SECURITY_MONITORING_SERVICE',\r\n        action: 'START_MONITORING',\r\n        result: 'SUCCESS',\r\n        timestamp: new Date(),\r\n        auditData: {\r\n          config: this.config,\r\n          startTime: this.serviceStartTime\r\n        }\r\n      });\r\n      \r\n      logger.info('\u2705 Continuous security monitoring started successfully');\r\n      \r\n    } catch (error) {\r\n      logger.error('\u274C Failed to start security monitoring:', error);\r\n      throw new Error('Security monitoring startup failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop continuous security monitoring\r\n   * Gracefully stops all monitoring operations\r\n   * \r\n   * @returns Promise<void>\r\n   */\r\n  public async stopMonitoring(): Promise<void> {\r\n    try {\r\n      logger.info('\uD83D\uDED1 Stopping continuous security monitoring...');\r\n      \r\n      // Stop monitoring intervals\r\n      this.stopMonitoringIntervals();\r\n      \r\n      // Create audit entry\r\n      await auditService.createAuditEntry({\r\n        auditId: `sec_mon_stop_${Date.now()}`,\r\n        eventType: 'SECURITY_MONITORING_STOP',\r\n        actor: 'SYSTEM',\r\n        resource: 'SECURITY_MONITORING_SERVICE',\r\n        action: 'STOP_MONITORING',\r\n        result: 'SUCCESS',\r\n        timestamp: new Date(),\r\n        auditData: {\r\n          uptime: Date.now() - this.serviceStartTime.getTime(),\r\n          totalEventsProcessed: this.eventHistory.length\r\n        }\r\n      });\r\n      \r\n      logger.info('\u2705 Security monitoring stopped successfully');\r\n      \r\n    } catch (error) {\r\n      logger.error('\u274C Failed to stop security monitoring:', error);\r\n      throw new Error('Security monitoring shutdown failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Process security event\r\n   * Analyzes and responds to security events\r\n   * \r\n   * @param event - Security event to process\r\n   * @returns Promise<void>\r\n   */\r\n  public async processSecurityEvent(event: SecurityEvent): Promise<void> {\r\n    try {\r\n      // Add to event history\r\n      this.addToEventHistory(event);\r\n      \r\n      // Perform event correlation\r\n      await this.correlateSecurityEvent(event);\r\n      \r\n      // Determine response actions\r\n      const responseActions = await this.determineResponseActions(event);\r\n      event.responseActions = responseActions;\r\n      \r\n      // Execute automated responses\r\n      await this.executeAutomatedResponse(event);\r\n      \r\n      // Update security metrics\r\n      this.updateSecurityMetrics(event);\r\n      \r\n      // Emit event for external handlers\r\n      this.emit('securityEvent', event);\r\n      \r\n      // Create audit entry\r\n      await auditService.createAuditEntry({\r\n        auditId: event.eventId,\r\n        eventType: 'SECURITY_EVENT_PROCESSED',\r\n        actor: 'SECURITY_MONITORING_SERVICE',\r\n        resource: event.target,\r\n        action: 'PROCESS_EVENT',\r\n        result: 'SUCCESS',\r\n        timestamp: new Date(),\r\n        auditData: {\r\n          eventType: event.eventType,\r\n          severity: event.severity,\r\n          responseActions: event.responseActions\r\n        }\r\n      });\r\n      \r\n    } catch (error) {\r\n      logger.error('\u274C Failed to process security event:', error);\r\n      \r\n      // Create error audit entry\r\n      await auditService.createAuditEntry({\r\n        auditId: `error_${event.eventId}`,\r\n        eventType: 'SECURITY_EVENT_PROCESSING_ERROR',\r\n        actor: 'SECURITY_MONITORING_SERVICE',\r\n        resource: event.target,\r\n        action: 'PROCESS_EVENT',\r\n        result: 'FAILURE',\r\n        timestamp: new Date(),\r\n        auditData: { error: error.message, originalEvent: event }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get security dashboard data\r\n   * Returns comprehensive security status for dashboard\r\n   * \r\n   * @returns SecurityDashboardData Current security dashboard data\r\n   */\r\n  public getSecurityDashboardData(): SecurityDashboardData {\r\n    const now = new Date();\r\n    const recentEvents = this.eventHistory\r\n      .filter(event => now.getTime() - event.timestamp.getTime() < 3600000) // Last hour\r\n      .slice(-50); // Last 50 events\r\n    \r\n    // Calculate security status\r\n    const criticalEvents = recentEvents.filter(e => e.severity >= this.config.alertThresholds.criticalThreatScore);\r\n    const highEvents = recentEvents.filter(e => e.severity >= this.config.alertThresholds.highThreatScore);\r\n    \r\n    let securityStatus: 'SECURE' | 'WARNING' | 'CRITICAL' = 'SECURE';\r\n    if (criticalEvents.length > 0) {\r\n      securityStatus = 'CRITICAL';\r\n    } else if (highEvents.length > 0) {\r\n      securityStatus = 'WARNING';\r\n    }\r\n    \r\n    // Generate threat visualization data\r\n    const threatVisualization = this.generateThreatVisualization(recentEvents);\r\n    \r\n    // Generate system health data\r\n    const systemHealth = this.generateSystemHealthData();\r\n    \r\n    return {\r\n      securityStatus,\r\n      activeThreats: this.activeIncidents.size,\r\n      recentEvents,\r\n      metrics: this.securityMetrics,\r\n      threatVisualization,\r\n      systemHealth\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get security metrics\r\n   * Returns current security metrics and KPIs\r\n   * \r\n   * @returns SecurityMetrics Current security metrics\r\n   */\r\n  public getSecurityMetrics(): SecurityMetrics {\r\n    return { ...this.securityMetrics };\r\n  }\r\n\r\n  /**\r\n   * Initialize security metrics\r\n   * Sets up initial metrics structure\r\n   * \r\n   * @returns SecurityMetrics Initial metrics\r\n   */\r\n  private initializeMetrics(): SecurityMetrics {\r\n    return {\r\n      totalEvents: 0,\r\n      eventsBySeverity: {},\r\n      eventsByType: {},\r\n      threatDetectionRate: 0,\r\n      falsePositiveRate: 0,\r\n      averageResponseTime: 0,\r\n      securityScore: 100,\r\n      monitoringUptime: 0,\r\n      lastUpdate: new Date()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Set up event handlers\r\n   * Configures event handling for security monitoring\r\n   */\r\n  private setupEventHandlers(): void {\r\n    // Handle threat detection events\r\n    this.on('securityEvent', async (event: SecurityEvent) => {\r\n      try {\r\n        // Log security event\r\n        logger.security('SECURITY_EVENT', 'Security event processed', {\r\n          eventId: event.eventId,\r\n          eventType: event.eventType,\r\n          severity: event.severity,\r\n          source: event.source,\r\n          classification: 'RESTRICTED'\r\n        });\r\n        \r\n        // Handle high-severity events\r\n        if (event.severity >= this.config.alertThresholds.highThreatScore) {\r\n          await this.handleHighSeverityEvent(event);\r\n        }\r\n        \r\n        // Handle critical events\r\n        if (event.severity >= this.config.alertThresholds.criticalThreatScore) {\r\n          await this.handleCriticalEvent(event);\r\n        }\r\n        \r\n      } catch (error) {\r\n        logger.error('\u274C Error handling security event:', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Start monitoring intervals\r\n   * Begins periodic monitoring tasks\r\n   */\r\n  private startMonitoringIntervals(): void {\r\n    // Main monitoring interval\r\n    this.monitoringInterval = setInterval(async () => {\r\n      try {\r\n        await this.performSecurityScan();\r\n      } catch (error) {\r\n        logger.error('\u274C Security scan error:', error);\r\n      }\r\n    }, this.config.monitoringInterval);\r\n    \r\n    // Metrics collection interval\r\n    this.metricsInterval = setInterval(() => {\r\n      try {\r\n        this.updateMetrics();\r\n      } catch (error) {\r\n        logger.error('\u274C Metrics update error:', error);\r\n      }\r\n    }, this.config.metricsInterval);\r\n    \r\n    // Dashboard refresh interval\r\n    this.dashboardInterval = setInterval(() => {\r\n      try {\r\n        this.emit('dashboardUpdate', this.getSecurityDashboardData());\r\n      } catch (error) {\r\n        logger.error('\u274C Dashboard update error:', error);\r\n      }\r\n    }, this.config.dashboardRefreshInterval);\r\n  }\r\n\r\n  /**\r\n   * Stop monitoring intervals\r\n   * Stops all periodic monitoring tasks\r\n   */\r\n  private stopMonitoringIntervals(): void {\r\n    if (this.monitoringInterval) {\r\n      clearInterval(this.monitoringInterval);\r\n      this.monitoringInterval = null;\r\n    }\r\n    \r\n    if (this.metricsInterval) {\r\n      clearInterval(this.metricsInterval);\r\n      this.metricsInterval = null;\r\n    }\r\n    \r\n    if (this.dashboardInterval) {\r\n      clearInterval(this.dashboardInterval);\r\n      this.dashboardInterval = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialize threat detection integration\r\n   * Sets up integration with threat detection engine\r\n   */\r\n  private initializeThreatDetectionIntegration(): void {\r\n    // Listen for threat detection events\r\n    threatDetectionEngine.on('threatDetected', async (threat: ThreatDetectionEvent) => {\r\n      const securityEvent: SecurityEvent = {\r\n        eventId: threat.detectionId,\r\n        eventType: SecurityEventType.THREAT_DETECTED,\r\n        severity: threat.severity,\r\n        source: threat.source,\r\n        target: threat.target,\r\n        timestamp: threat.timestamp,\r\n        details: {\r\n          threatType: threat.threatType,\r\n          confidence: threat.confidence,\r\n          detectionMethod: threat.detectionMethod,\r\n          rawData: threat.rawData\r\n        },\r\n        threatDetection: threat,\r\n        status: SecurityEventStatus.NEW,\r\n        responseActions: []\r\n      };\r\n      \r\n      await this.processSecurityEvent(securityEvent);\r\n    });\r\n    \r\n    // Listen for high-severity threats\r\n    threatDetectionEngine.on('highSeverityThreat', async (threat: ThreatDetectionEvent) => {\r\n      logger.warn('\uD83D\uDEA8 HIGH SEVERITY THREAT DETECTED', {\r\n        detectionId: threat.detectionId,\r\n        threatType: threat.threatType,\r\n        severity: threat.severity,\r\n        source: threat.source\r\n      });\r\n      \r\n      // Trigger immediate response\r\n      await this.handleCriticalThreat(threat);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Perform security scan\r\n   * Conducts comprehensive security monitoring scan\r\n   * \r\n   * @returns Promise<void>\r\n   */\r\n  private async performSecurityScan(): Promise<void> {\r\n    try {\r\n      // Check system health\r\n      await this.checkSystemHealth();\r\n      \r\n      // Monitor event velocity\r\n      this.monitorEventVelocity();\r\n      \r\n      // Clean up old events\r\n      this.cleanupOldEvents();\r\n      \r\n      // Update correlation patterns\r\n      this.updateCorrelationPatterns();\r\n      \r\n    } catch (error) {\r\n      logger.error('\u274C Security scan failed:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add event to history\r\n   * Adds security event to monitoring history\r\n   * \r\n   * @param event - Security event to add\r\n   */\r\n  private addToEventHistory(event: SecurityEvent): void {\r\n    this.eventHistory.push(event);\r\n    \r\n    // Maintain history size limit\r\n    if (this.eventHistory.length > this.config.maxEventHistory) {\r\n      this.eventHistory.shift();\r\n    }\r\n    \r\n    // Add to active incidents if high severity\r\n    if (event.severity >= this.config.alertThresholds.highThreatScore) {\r\n      this.activeIncidents.set(event.eventId, event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Correlate security event\r\n   * Analyzes event for correlation with other events\r\n   * \r\n   * @param event - Security event to correlate\r\n   * @returns Promise<void>\r\n   */\r\n  private async correlateSecurityEvent(event: SecurityEvent): Promise<void> {\r\n    try {\r\n      const correlationKey = `${event.source}_${event.eventType}`;\r\n      const correlatedEvents = this.correlationPatterns.get(correlationKey) || [];\r\n      \r\n      // Add current event to correlation\r\n      correlatedEvents.push(event);\r\n      \r\n      // Keep only events within correlation window\r\n      const windowStart = Date.now() - this.config.correlationWindow;\r\n      const recentEvents = correlatedEvents.filter(\r\n        e => e.timestamp.getTime() > windowStart\r\n      );\r\n      \r\n      this.correlationPatterns.set(correlationKey, recentEvents);\r\n      \r\n      // Check for correlation patterns\r\n      if (recentEvents.length >= 3) {\r\n        await this.handleCorrelatedEvents(correlationKey, recentEvents);\r\n      }\r\n      \r\n    } catch (error) {\r\n      logger.error('\u274C Event correlation failed:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Determine response actions\r\n   * Determines appropriate response actions for security event\r\n   * \r\n   * @param event - Security event\r\n   * @returns Promise<string[]> Response actions\r\n   */\r\n  private async determineResponseActions(event: SecurityEvent): Promise<string[]> {\r\n    const actions: string[] = [];\r\n    \r\n    // Actions based on event type\r\n    switch (event.eventType) {\r\n      case SecurityEventType.THREAT_DETECTED:\r\n        actions.push('Log threat details');\r\n        if (event.severity >= 7) {\r\n          actions.push('Alert security team');\r\n        }\r\n        if (event.severity >= 9) {\r\n          actions.push('Initiate incident response');\r\n        }\r\n        break;\r\n      \r\n      case SecurityEventType.AUTHENTICATION_FAILURE:\r\n        actions.push('Monitor source IP');\r\n        if (event.severity >= 5) {\r\n          actions.push('Implement rate limiting');\r\n        }\r\n        break;\r\n      \r\n      case SecurityEventType.UNAUTHORIZED_ACCESS:\r\n        actions.push('Block access attempt');\r\n        actions.push('Alert security team');\r\n        break;\r\n      \r\n      default:\r\n        actions.push('Monitor and log');\r\n    }\r\n    \r\n    return actions;\r\n  }\r\n\r\n  /**\r\n   * Execute automated response\r\n   * Executes automated response actions for security event\r\n   * \r\n   * @param event - Security event\r\n   * @returns Promise<void>\r\n   */\r\n  private async executeAutomatedResponse(event: SecurityEvent): Promise<void> {\r\n    try {\r\n      for (const action of event.responseActions) {\r\n        switch (action) {\r\n          case 'Log threat details':\r\n            logger.security('THREAT_DETAILS', 'Detailed threat information', {\r\n              eventId: event.eventId,\r\n              details: event.details,\r\n              classification: 'RESTRICTED'\r\n            });\r\n            break;\r\n          \r\n          case 'Alert security team':\r\n            await this.sendSecurityAlert(event);\r\n            break;\r\n          \r\n          case 'Initiate incident response':\r\n            await this.initiateIncidentResponse(event);\r\n            break;\r\n          \r\n          case 'Monitor source IP':\r\n            // Implementation would add IP to monitoring list\r\n            logger.info(`\uD83D\uDD0D Monitoring IP: ${event.source}`);\r\n            break;\r\n          \r\n          case 'Block access attempt':\r\n            // Implementation would block access\r\n            logger.warn(`\uD83D\uDEAB Blocking access from: ${event.source}`);\r\n            break;\r\n          \r\n          default:\r\n            logger.debug(`\uD83D\uDCDD Response action: ${action}`);\r\n        }\r\n      }\r\n      \r\n    } catch (error) {\r\n      logger.error('\u274C Automated response execution failed:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update security metrics\r\n   * Updates security metrics based on processed event\r\n   * \r\n   * @param event - Processed security event\r\n   */\r\n  private updateSecurityMetrics(event: SecurityEvent): void {\r\n    this.securityMetrics.totalEvents++;\r\n    \r\n    // Update events by severity\r\n    this.securityMetrics.eventsBySeverity[event.severity] = \r\n      (this.securityMetrics.eventsBySeverity[event.severity] || 0) + 1;\r\n    \r\n    // Update events by type\r\n    this.securityMetrics.eventsByType[event.eventType] = \r\n      (this.securityMetrics.eventsByType[event.eventType] || 0) + 1;\r\n    \r\n    // Update last update timestamp\r\n    this.securityMetrics.lastUpdate = new Date();\r\n  }\r\n\r\n  /**\r\n   * Handle high-severity event\r\n   * Processes high-severity security events\r\n   * \r\n   * @param event - High-severity security event\r\n   * @returns Promise<void>\r\n   */\r\n  private async handleHighSeverityEvent(event: SecurityEvent): Promise<void> {\r\n    logger.warn('\u26A0\uFE0F HIGH SEVERITY SECURITY EVENT', {\r\n      eventId: event.eventId,\r\n      eventType: event.eventType,\r\n      severity: event.severity,\r\n      source: event.source\r\n    });\r\n    \r\n    // Send immediate alert\r\n    await this.sendSecurityAlert(event);\r\n    \r\n    // Update event status\r\n    event.status = SecurityEventStatus.INVESTIGATING;\r\n  }\r\n\r\n  /**\r\n   * Handle critical event\r\n   * Processes critical security events\r\n   * \r\n   * @param event - Critical security event\r\n   * @returns Promise<void>\r\n   */\r\n  private async handleCriticalEvent(event: SecurityEvent): Promise<void> {\r\n    logger.error('\uD83D\uDEA8 CRITICAL SECURITY EVENT', {\r\n      eventId: event.eventId,\r\n      eventType: event.eventType,\r\n      severity: event.severity,\r\n      source: event.source\r\n    });\r\n    \r\n    // Initiate incident response\r\n    await this.initiateIncidentResponse(event);\r\n    \r\n    // Update event status\r\n    event.status = SecurityEventStatus.RESPONDING;\r\n  }\r\n\r\n  /**\r\n   * Handle critical threat\r\n   * Processes critical threat detection events\r\n   * \r\n   * @param threat - Critical threat detection event\r\n   * @returns Promise<void>\r\n   */\r\n  private async handleCriticalThreat(threat: ThreatDetectionEvent): Promise<void> {\r\n    // Create emergency security event\r\n    const emergencyEvent: SecurityEvent = {\r\n      eventId: `emergency_${threat.detectionId}`,\r\n      eventType: SecurityEventType.INCIDENT_ESCALATION,\r\n      severity: 10,\r\n      source: threat.source,\r\n      target: threat.target,\r\n      timestamp: new Date(),\r\n      details: {\r\n        originalThreat: threat,\r\n        escalationReason: 'Critical threat severity'\r\n      },\r\n      threatDetection: threat,\r\n      status: SecurityEventStatus.NEW,\r\n      responseActions: ['Initiate emergency response', 'Alert all stakeholders']\r\n    };\r\n    \r\n    await this.processSecurityEvent(emergencyEvent);\r\n  }\r\n\r\n  /**\r\n   * Handle correlated events\r\n   * Processes correlated security events\r\n   * \r\n   * @param correlationKey - Correlation key\r\n   * @param events - Correlated events\r\n   * @returns Promise<void>\r\n   */\r\n  private async handleCorrelatedEvents(correlationKey: string, events: SecurityEvent[]): Promise<void> {\r\n    logger.warn('\uD83D\uDD17 CORRELATED SECURITY EVENTS DETECTED', {\r\n      correlationKey,\r\n      eventCount: events.length,\r\n      timeSpan: events[events.length - 1].timestamp.getTime() - events[0].timestamp.getTime()\r\n    });\r\n    \r\n    // Create correlation event\r\n    const correlationEvent: SecurityEvent = {\r\n      eventId: `correlation_${Date.now()}`,\r\n      eventType: SecurityEventType.SUSPICIOUS_ACTIVITY,\r\n      severity: Math.max(...events.map(e => e.severity)) + 1,\r\n      source: correlationKey,\r\n      target: 'SYSTEM',\r\n      timestamp: new Date(),\r\n      details: {\r\n        correlatedEvents: events.map(e => e.eventId),\r\n        pattern: correlationKey,\r\n        eventCount: events.length\r\n      },\r\n      status: SecurityEventStatus.NEW,\r\n      responseActions: ['Investigate correlation pattern', 'Monitor for additional events']\r\n    };\r\n    \r\n    await this.processSecurityEvent(correlationEvent);\r\n  }\r\n\r\n  /**\r\n   * Send security alert\r\n   * Sends security alert notification\r\n   * \r\n   * @param event - Security event to alert about\r\n   * @returns Promise<void>\r\n   */\r\n  private async sendSecurityAlert(event: SecurityEvent): Promise<void> {\r\n    // Implementation would send actual alerts (email, Telegram, etc.)\r\n    logger.info('\uD83D\uDCE7 Security alert sent', {\r\n      eventId: event.eventId,\r\n      severity: event.severity,\r\n      eventType: event.eventType\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Initiate incident response\r\n   * Starts incident response procedures\r\n   * \r\n   * @param event - Security event triggering incident response\r\n   * @returns Promise<void>\r\n   */\r\n  private async initiateIncidentResponse(event: SecurityEvent): Promise<void> {\r\n    logger.error('\uD83D\uDEA8 INCIDENT RESPONSE INITIATED', {\r\n      eventId: event.eventId,\r\n      severity: event.severity,\r\n      eventType: event.eventType\r\n    });\r\n    \r\n    // Implementation would trigger incident response procedures\r\n    // This would integrate with the incident response system\r\n  }\r\n\r\n  /**\r\n   * Check system health\r\n   * Monitors system health indicators\r\n   * \r\n   * @returns Promise<void>\r\n   */\r\n  private async checkSystemHealth(): Promise<void> {\r\n    // Implementation would check various system health indicators\r\n    // CPU usage, memory usage, disk space, network connectivity, etc.\r\n  }\r\n\r\n  /**\r\n   * Monitor event velocity\r\n   * Monitors the rate of security events\r\n   */\r\n  private monitorEventVelocity(): void {\r\n    const oneMinuteAgo = Date.now() - 60000;\r\n    const recentEvents = this.eventHistory.filter(\r\n      event => event.timestamp.getTime() > oneMinuteAgo\r\n    );\r\n    \r\n    if (recentEvents.length > this.config.alertThresholds.eventVelocityThreshold) {\r\n      logger.warn('\u26A1 HIGH EVENT VELOCITY DETECTED', {\r\n        eventsPerMinute: recentEvents.length,\r\n        threshold: this.config.alertThresholds.eventVelocityThreshold\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clean up old events\r\n   * Removes old events from memory\r\n   */\r\n  private cleanupOldEvents(): void {\r\n    const cutoffTime = Date.now() - (24 * 60 * 60 * 1000); // 24 hours\r\n    \r\n    // Clean up event history\r\n    this.eventHistory = this.eventHistory.filter(\r\n      event => event.timestamp.getTime() > cutoffTime\r\n    );\r\n    \r\n    // Clean up active incidents (resolved or old)\r\n    for (const [eventId, incident] of this.activeIncidents.entries()) {\r\n      if (incident.status === SecurityEventStatus.RESOLVED || \r\n          incident.timestamp.getTime() < cutoffTime) {\r\n        this.activeIncidents.delete(eventId);\r\n      }\r\n    }\r\n    \r\n    // Clean up correlation patterns\r\n    for (const [key, events] of this.correlationPatterns.entries()) {\r\n      const recentEvents = events.filter(\r\n        event => event.timestamp.getTime() > cutoffTime\r\n      );\r\n      \r\n      if (recentEvents.length === 0) {\r\n        this.correlationPatterns.delete(key);\r\n      } else {\r\n        this.correlationPatterns.set(key, recentEvents);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update correlation patterns\r\n   * Updates event correlation patterns\r\n   */\r\n  private updateCorrelationPatterns(): void {\r\n    // Implementation would analyze patterns and update correlation rules\r\n    // This could use machine learning for pattern recognition\r\n  }\r\n\r\n  /**\r\n   * Update metrics\r\n   * Updates security metrics and KPIs\r\n   */\r\n  private updateMetrics(): void {\r\n    // Calculate monitoring uptime\r\n    this.securityMetrics.monitoringUptime = \r\n      (Date.now() - this.serviceStartTime.getTime()) / 1000;\r\n    \r\n    // Calculate threat detection rate\r\n    const totalThreats = this.eventHistory.filter(\r\n      event => event.eventType === SecurityEventType.THREAT_DETECTED\r\n    ).length;\r\n    \r\n    this.securityMetrics.threatDetectionRate = \r\n      this.securityMetrics.totalEvents > 0 ? \r\n      (totalThreats / this.securityMetrics.totalEvents) * 100 : 0;\r\n    \r\n    // Calculate security score based on recent events\r\n    const recentEvents = this.eventHistory.filter(\r\n      event => Date.now() - event.timestamp.getTime() < 3600000 // Last hour\r\n    );\r\n    \r\n    const severitySum = recentEvents.reduce((sum, event) => sum + event.severity, 0);\r\n    const averageSeverity = recentEvents.length > 0 ? severitySum / recentEvents.length : 0;\r\n    \r\n    this.securityMetrics.securityScore = Math.max(0, 100 - (averageSeverity * 10));\r\n    \r\n    // Update timestamp\r\n    this.securityMetrics.lastUpdate = new Date();\r\n  }\r\n\r\n  /**\r\n   * Generate threat visualization data\r\n   * Creates data for threat visualization dashboard\r\n   * \r\n   * @param events - Security events to visualize\r\n   * @returns Threat visualization data\r\n   */\r\n  private generateThreatVisualization(events: SecurityEvent[]): {\r\n    threatsByType: Record<string, number>;\r\n    threatsBySource: Record<string, number>;\r\n    threatTimeline: Array<{ timestamp: Date; count: number }>;\r\n  } {\r\n    const threatsByType: Record<string, number> = {};\r\n    const threatsBySource: Record<string, number> = {};\r\n    const threatTimeline: Array<{ timestamp: Date; count: number }> = [];\r\n    \r\n    // Count threats by type\r\n    for (const event of events) {\r\n      threatsByType[event.eventType] = (threatsByType[event.eventType] || 0) + 1;\r\n      threatsBySource[event.source] = (threatsBySource[event.source] || 0) + 1;\r\n    }\r\n    \r\n    // Generate timeline (hourly buckets for last 24 hours)\r\n    const now = new Date();\r\n    for (let i = 23; i >= 0; i--) {\r\n      const bucketTime = new Date(now.getTime() - (i * 60 * 60 * 1000));\r\n      const bucketStart = bucketTime.getTime();\r\n      const bucketEnd = bucketStart + (60 * 60 * 1000);\r\n      \r\n      const count = events.filter(\r\n        event => event.timestamp.getTime() >= bucketStart && \r\n                event.timestamp.getTime() < bucketEnd\r\n      ).length;\r\n      \r\n      threatTimeline.push({ timestamp: bucketTime, count });\r\n    }\r\n    \r\n    return { threatsByType, threatsBySource, threatTimeline };\r\n  }\r\n\r\n  /**\r\n   * Generate system health data\r\n   * Creates system health indicators for dashboard\r\n   * \r\n   * @returns System health data\r\n   */\r\n  private generateSystemHealthData(): {\r\n    monitoringStatus: 'ACTIVE' | 'DEGRADED' | 'OFFLINE';\r\n    lastHealthCheck: Date;\r\n    componentStatus: Record<string, 'HEALTHY' | 'WARNING' | 'CRITICAL'>;\r\n  } {\r\n    return {\r\n      monitoringStatus: this.monitoringInterval ? 'ACTIVE' : 'OFFLINE',\r\n      lastHealthCheck: new Date(),\r\n      componentStatus: {\r\n        'Threat Detection': 'HEALTHY',\r\n        'Event Processing': 'HEALTHY',\r\n        'Audit Logging': 'HEALTHY',\r\n        'Alert System': 'HEALTHY'\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get service status\r\n   * Returns current service status for monitoring\r\n   * \r\n   * @returns Service status information\r\n   */\r\n  public getStatus(): {\r\n    isMonitoring: boolean;\r\n    eventHistory: number;\r\n    activeIncidents: number;\r\n    correlationPatterns: number;\r\n    uptime: number;\r\n    timestamp: number;\r\n  } {\r\n    return {\r\n      isMonitoring: this.monitoringInterval !== null,\r\n      eventHistory: this.eventHistory.length,\r\n      activeIncidents: this.activeIncidents.size,\r\n      correlationPatterns: this.correlationPatterns.size,\r\n      uptime: Date.now() - this.serviceStartTime.getTime(),\r\n      timestamp: Date.now()\r\n    };\r\n  }\r\n}\r\n\r\n// Create and export singleton instance\r\nexport const securityMonitoringService = new SecurityMonitoringService();\r\n\r\n// =============================================================================\r\n// SECURITY MONITORING NOTES\r\n// =============================================================================\r\n// 1. 24/7 continuous monitoring of all security events and threats\r\n// 2. Real-time threat detection and automated response capabilities\r\n// 3. Event correlation and pattern analysis for advanced threat detection\r\n// 4. Comprehensive security metrics and KPI tracking\r\n// 5. Security dashboard with real-time threat visualization\r\n// 6. Automated incident response and escalation procedures\r\n// 7. Integration with threat detection engine and audit service\r\n// 8. Configurable alert thresholds and response actions\r\n// =============================================================================\r\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "06f6753f776168b0357ea1c931430cc1c2abfd93"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1fe1wefs5z = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1fe1wefs5z();
cov_1fe1wefs5z().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1fe1wefs5z().s[1]++;
exports.securityMonitoringService = exports.SecurityMonitoringService = exports.SecurityEventStatus = exports.SecurityEventType = void 0;
const events_1 =
/* istanbul ignore next */
(cov_1fe1wefs5z().s[2]++, require("events"));
const logger_1 =
/* istanbul ignore next */
(cov_1fe1wefs5z().s[3]++, require("@/core/logging/logger"));
const audit_service_1 =
/* istanbul ignore next */
(cov_1fe1wefs5z().s[4]++, require("@/security/audit-service"));
const threat_detection_engine_1 =
/* istanbul ignore next */
(cov_1fe1wefs5z().s[5]++, require("@/security/threat-detection-engine"));
/**
 * Enumeration of security event types
 */
var SecurityEventType;
/* istanbul ignore next */
cov_1fe1wefs5z().s[6]++;
(function (SecurityEventType) {
  /* istanbul ignore next */
  cov_1fe1wefs5z().f[0]++;
  cov_1fe1wefs5z().s[7]++;
  SecurityEventType["THREAT_DETECTED"] = "threat_detected";
  /* istanbul ignore next */
  cov_1fe1wefs5z().s[8]++;
  SecurityEventType["AUTHENTICATION_FAILURE"] = "authentication_failure";
  /* istanbul ignore next */
  cov_1fe1wefs5z().s[9]++;
  SecurityEventType["UNAUTHORIZED_ACCESS"] = "unauthorized_access";
  /* istanbul ignore next */
  cov_1fe1wefs5z().s[10]++;
  SecurityEventType["SUSPICIOUS_ACTIVITY"] = "suspicious_activity";
  /* istanbul ignore next */
  cov_1fe1wefs5z().s[11]++;
  SecurityEventType["SYSTEM_ANOMALY"] = "system_anomaly";
  /* istanbul ignore next */
  cov_1fe1wefs5z().s[12]++;
  SecurityEventType["NETWORK_INTRUSION"] = "network_intrusion";
  /* istanbul ignore next */
  cov_1fe1wefs5z().s[13]++;
  SecurityEventType["DATA_ACCESS_VIOLATION"] = "data_access_violation";
  /* istanbul ignore next */
  cov_1fe1wefs5z().s[14]++;
  SecurityEventType["CONFIGURATION_CHANGE"] = "configuration_change";
  /* istanbul ignore next */
  cov_1fe1wefs5z().s[15]++;
  SecurityEventType["SECURITY_POLICY_VIOLATION"] = "security_policy_violation";
  /* istanbul ignore next */
  cov_1fe1wefs5z().s[16]++;
  SecurityEventType["INCIDENT_ESCALATION"] = "incident_escalation";
})(
/* istanbul ignore next */
(cov_1fe1wefs5z().b[0][0]++, SecurityEventType) ||
/* istanbul ignore next */
(cov_1fe1wefs5z().b[0][1]++, exports.SecurityEventType = SecurityEventType = {}));
/**
 * Enumeration of security event status
 */
var SecurityEventStatus;
/* istanbul ignore next */
cov_1fe1wefs5z().s[17]++;
(function (SecurityEventStatus) {
  /* istanbul ignore next */
  cov_1fe1wefs5z().f[1]++;
  cov_1fe1wefs5z().s[18]++;
  SecurityEventStatus["NEW"] = "new";
  /* istanbul ignore next */
  cov_1fe1wefs5z().s[19]++;
  SecurityEventStatus["INVESTIGATING"] = "investigating";
  /* istanbul ignore next */
  cov_1fe1wefs5z().s[20]++;
  SecurityEventStatus["RESPONDING"] = "responding";
  /* istanbul ignore next */
  cov_1fe1wefs5z().s[21]++;
  SecurityEventStatus["CONTAINED"] = "contained";
  /* istanbul ignore next */
  cov_1fe1wefs5z().s[22]++;
  SecurityEventStatus["RESOLVED"] = "resolved";
  /* istanbul ignore next */
  cov_1fe1wefs5z().s[23]++;
  SecurityEventStatus["FALSE_POSITIVE"] = "false_positive";
})(
/* istanbul ignore next */
(cov_1fe1wefs5z().b[1][0]++, SecurityEventStatus) ||
/* istanbul ignore next */
(cov_1fe1wefs5z().b[1][1]++, exports.SecurityEventStatus = SecurityEventStatus = {}));
/**
 * Continuous security monitoring service
 * Provides 24/7 security monitoring and threat analysis
 */
class SecurityMonitoringService extends
/* istanbul ignore next */
(events_1.EventEmitter) {
  /** Service configuration */
  config;
  /** Security event history */
  eventHistory =
  /* istanbul ignore next */
  (cov_1fe1wefs5z().s[24]++, []);
  /** Active security incidents */
  activeIncidents =
  /* istanbul ignore next */
  (cov_1fe1wefs5z().s[25]++, new Map());
  /** Security metrics */
  securityMetrics;
  /** Monitoring intervals */
  monitoringInterval =
  /* istanbul ignore next */
  (cov_1fe1wefs5z().s[26]++, null);
  metricsInterval =
  /* istanbul ignore next */
  (cov_1fe1wefs5z().s[27]++, null);
  dashboardInterval =
  /* istanbul ignore next */
  (cov_1fe1wefs5z().s[28]++, null);
  /** Service start time for uptime calculation */
  serviceStartTime =
  /* istanbul ignore next */
  (cov_1fe1wefs5z().s[29]++, new Date());
  /** Event correlation patterns */
  correlationPatterns =
  /* istanbul ignore next */
  (cov_1fe1wefs5z().s[30]++, new Map());
  constructor(config) {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[2]++;
    cov_1fe1wefs5z().s[31]++;
    super();
    // Initialize configuration with defaults
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[32]++;
    this.config = {
      monitoringInterval: 5000,
      // 5 seconds
      correlationWindow: 300000,
      // 5 minutes
      maxEventHistory: 10000,
      alertThresholds: {
        criticalThreatScore: 9,
        highThreatScore: 7,
        mediumThreatScore: 5,
        eventVelocityThreshold: 100 // events per minute
      },
      dashboardRefreshInterval: 10000,
      // 10 seconds
      metricsInterval: 60000,
      // 1 minute
      ...config
    };
    // Initialize security metrics
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[33]++;
    this.securityMetrics = this.initializeMetrics();
    // Set up event handlers
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[34]++;
    this.setupEventHandlers();
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[35]++;
    logger_1.logger.info('🛡️ Security Monitoring Service initialized');
  }
  /**
   * Start continuous security monitoring
   * Begins 24/7 security monitoring operations
   *
   * @returns Promise<void>
   */
  async startMonitoring() {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[3]++;
    cov_1fe1wefs5z().s[36]++;
    try {
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[37]++;
      logger_1.logger.info('🚀 Starting continuous security monitoring...');
      // Start monitoring intervals
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[38]++;
      this.startMonitoringIntervals();
      // Initialize threat detection integration
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[39]++;
      this.initializeThreatDetectionIntegration();
      // Perform initial security scan
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[40]++;
      await this.performSecurityScan();
      // Create audit entry
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[41]++;
      await audit_service_1.auditService.createAuditEntry({
        auditId: `sec_mon_start_${Date.now()}`,
        eventType: 'SECURITY_MONITORING_START',
        actor: 'SYSTEM',
        resource: 'SECURITY_MONITORING_SERVICE',
        action: 'START_MONITORING',
        result: 'SUCCESS',
        timestamp: new Date(),
        auditData: {
          config: this.config,
          startTime: this.serviceStartTime
        }
      });
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[42]++;
      logger_1.logger.info('✅ Continuous security monitoring started successfully');
    } catch (error) {
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[43]++;
      logger_1.logger.error('❌ Failed to start security monitoring:', error);
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[44]++;
      throw new Error('Security monitoring startup failed');
    }
  }
  /**
   * Stop continuous security monitoring
   * Gracefully stops all monitoring operations
   *
   * @returns Promise<void>
   */
  async stopMonitoring() {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[4]++;
    cov_1fe1wefs5z().s[45]++;
    try {
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[46]++;
      logger_1.logger.info('🛑 Stopping continuous security monitoring...');
      // Stop monitoring intervals
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[47]++;
      this.stopMonitoringIntervals();
      // Create audit entry
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[48]++;
      await audit_service_1.auditService.createAuditEntry({
        auditId: `sec_mon_stop_${Date.now()}`,
        eventType: 'SECURITY_MONITORING_STOP',
        actor: 'SYSTEM',
        resource: 'SECURITY_MONITORING_SERVICE',
        action: 'STOP_MONITORING',
        result: 'SUCCESS',
        timestamp: new Date(),
        auditData: {
          uptime: Date.now() - this.serviceStartTime.getTime(),
          totalEventsProcessed: this.eventHistory.length
        }
      });
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[49]++;
      logger_1.logger.info('✅ Security monitoring stopped successfully');
    } catch (error) {
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[50]++;
      logger_1.logger.error('❌ Failed to stop security monitoring:', error);
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[51]++;
      throw new Error('Security monitoring shutdown failed');
    }
  }
  /**
   * Process security event
   * Analyzes and responds to security events
   *
   * @param event - Security event to process
   * @returns Promise<void>
   */
  async processSecurityEvent(event) {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[5]++;
    cov_1fe1wefs5z().s[52]++;
    try {
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[53]++;
      // Add to event history
      this.addToEventHistory(event);
      // Perform event correlation
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[54]++;
      await this.correlateSecurityEvent(event);
      // Determine response actions
      const responseActions =
      /* istanbul ignore next */
      (cov_1fe1wefs5z().s[55]++, await this.determineResponseActions(event));
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[56]++;
      event.responseActions = responseActions;
      // Execute automated responses
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[57]++;
      await this.executeAutomatedResponse(event);
      // Update security metrics
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[58]++;
      this.updateSecurityMetrics(event);
      // Emit event for external handlers
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[59]++;
      this.emit('securityEvent', event);
      // Create audit entry
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[60]++;
      await audit_service_1.auditService.createAuditEntry({
        auditId: event.eventId,
        eventType: 'SECURITY_EVENT_PROCESSED',
        actor: 'SECURITY_MONITORING_SERVICE',
        resource: event.target,
        action: 'PROCESS_EVENT',
        result: 'SUCCESS',
        timestamp: new Date(),
        auditData: {
          eventType: event.eventType,
          severity: event.severity,
          responseActions: event.responseActions
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[61]++;
      logger_1.logger.error('❌ Failed to process security event:', error);
      // Create error audit entry
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[62]++;
      await audit_service_1.auditService.createAuditEntry({
        auditId: `error_${event.eventId}`,
        eventType: 'SECURITY_EVENT_PROCESSING_ERROR',
        actor: 'SECURITY_MONITORING_SERVICE',
        resource: event.target,
        action: 'PROCESS_EVENT',
        result: 'FAILURE',
        timestamp: new Date(),
        auditData: {
          error: error.message,
          originalEvent: event
        }
      });
    }
  }
  /**
   * Get security dashboard data
   * Returns comprehensive security status for dashboard
   *
   * @returns SecurityDashboardData Current security dashboard data
   */
  getSecurityDashboardData() {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[6]++;
    const now =
    /* istanbul ignore next */
    (cov_1fe1wefs5z().s[63]++, new Date());
    const recentEvents =
    /* istanbul ignore next */
    (cov_1fe1wefs5z().s[64]++, this.eventHistory.filter(event => {
      /* istanbul ignore next */
      cov_1fe1wefs5z().f[7]++;
      cov_1fe1wefs5z().s[65]++;
      return now.getTime() - event.timestamp.getTime() < 3600000;
    }) // Last hour
    .slice(-50)); // Last 50 events
    // Calculate security status
    const criticalEvents =
    /* istanbul ignore next */
    (cov_1fe1wefs5z().s[66]++, recentEvents.filter(e => {
      /* istanbul ignore next */
      cov_1fe1wefs5z().f[8]++;
      cov_1fe1wefs5z().s[67]++;
      return e.severity >= this.config.alertThresholds.criticalThreatScore;
    }));
    const highEvents =
    /* istanbul ignore next */
    (cov_1fe1wefs5z().s[68]++, recentEvents.filter(e => {
      /* istanbul ignore next */
      cov_1fe1wefs5z().f[9]++;
      cov_1fe1wefs5z().s[69]++;
      return e.severity >= this.config.alertThresholds.highThreatScore;
    }));
    let securityStatus =
    /* istanbul ignore next */
    (cov_1fe1wefs5z().s[70]++, 'SECURE');
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[71]++;
    if (criticalEvents.length > 0) {
      /* istanbul ignore next */
      cov_1fe1wefs5z().b[2][0]++;
      cov_1fe1wefs5z().s[72]++;
      securityStatus = 'CRITICAL';
    } else {
      /* istanbul ignore next */
      cov_1fe1wefs5z().b[2][1]++;
      cov_1fe1wefs5z().s[73]++;
      if (highEvents.length > 0) {
        /* istanbul ignore next */
        cov_1fe1wefs5z().b[3][0]++;
        cov_1fe1wefs5z().s[74]++;
        securityStatus = 'WARNING';
      } else
      /* istanbul ignore next */
      {
        cov_1fe1wefs5z().b[3][1]++;
      }
    }
    // Generate threat visualization data
    const threatVisualization =
    /* istanbul ignore next */
    (cov_1fe1wefs5z().s[75]++, this.generateThreatVisualization(recentEvents));
    // Generate system health data
    const systemHealth =
    /* istanbul ignore next */
    (cov_1fe1wefs5z().s[76]++, this.generateSystemHealthData());
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[77]++;
    return {
      securityStatus,
      activeThreats: this.activeIncidents.size,
      recentEvents,
      metrics: this.securityMetrics,
      threatVisualization,
      systemHealth
    };
  }
  /**
   * Get security metrics
   * Returns current security metrics and KPIs
   *
   * @returns SecurityMetrics Current security metrics
   */
  getSecurityMetrics() {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[10]++;
    cov_1fe1wefs5z().s[78]++;
    return {
      ...this.securityMetrics
    };
  }
  /**
   * Initialize security metrics
   * Sets up initial metrics structure
   *
   * @returns SecurityMetrics Initial metrics
   */
  initializeMetrics() {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[11]++;
    cov_1fe1wefs5z().s[79]++;
    return {
      totalEvents: 0,
      eventsBySeverity: {},
      eventsByType: {},
      threatDetectionRate: 0,
      falsePositiveRate: 0,
      averageResponseTime: 0,
      securityScore: 100,
      monitoringUptime: 0,
      lastUpdate: new Date()
    };
  }
  /**
   * Set up event handlers
   * Configures event handling for security monitoring
   */
  setupEventHandlers() {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[12]++;
    cov_1fe1wefs5z().s[80]++;
    // Handle threat detection events
    this.on('securityEvent', async event => {
      /* istanbul ignore next */
      cov_1fe1wefs5z().f[13]++;
      cov_1fe1wefs5z().s[81]++;
      try {
        /* istanbul ignore next */
        cov_1fe1wefs5z().s[82]++;
        // Log security event
        logger_1.logger.security('SECURITY_EVENT', 'Security event processed', {
          eventId: event.eventId,
          eventType: event.eventType,
          severity: event.severity,
          source: event.source,
          classification: 'RESTRICTED'
        });
        // Handle high-severity events
        /* istanbul ignore next */
        cov_1fe1wefs5z().s[83]++;
        if (event.severity >= this.config.alertThresholds.highThreatScore) {
          /* istanbul ignore next */
          cov_1fe1wefs5z().b[4][0]++;
          cov_1fe1wefs5z().s[84]++;
          await this.handleHighSeverityEvent(event);
        } else
        /* istanbul ignore next */
        {
          cov_1fe1wefs5z().b[4][1]++;
        }
        // Handle critical events
        cov_1fe1wefs5z().s[85]++;
        if (event.severity >= this.config.alertThresholds.criticalThreatScore) {
          /* istanbul ignore next */
          cov_1fe1wefs5z().b[5][0]++;
          cov_1fe1wefs5z().s[86]++;
          await this.handleCriticalEvent(event);
        } else
        /* istanbul ignore next */
        {
          cov_1fe1wefs5z().b[5][1]++;
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_1fe1wefs5z().s[87]++;
        logger_1.logger.error('❌ Error handling security event:', error);
      }
    });
  }
  /**
   * Start monitoring intervals
   * Begins periodic monitoring tasks
   */
  startMonitoringIntervals() {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[14]++;
    cov_1fe1wefs5z().s[88]++;
    // Main monitoring interval
    this.monitoringInterval = setInterval(async () => {
      /* istanbul ignore next */
      cov_1fe1wefs5z().f[15]++;
      cov_1fe1wefs5z().s[89]++;
      try {
        /* istanbul ignore next */
        cov_1fe1wefs5z().s[90]++;
        await this.performSecurityScan();
      } catch (error) {
        /* istanbul ignore next */
        cov_1fe1wefs5z().s[91]++;
        logger_1.logger.error('❌ Security scan error:', error);
      }
    }, this.config.monitoringInterval);
    // Metrics collection interval
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[92]++;
    this.metricsInterval = setInterval(() => {
      /* istanbul ignore next */
      cov_1fe1wefs5z().f[16]++;
      cov_1fe1wefs5z().s[93]++;
      try {
        /* istanbul ignore next */
        cov_1fe1wefs5z().s[94]++;
        this.updateMetrics();
      } catch (error) {
        /* istanbul ignore next */
        cov_1fe1wefs5z().s[95]++;
        logger_1.logger.error('❌ Metrics update error:', error);
      }
    }, this.config.metricsInterval);
    // Dashboard refresh interval
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[96]++;
    this.dashboardInterval = setInterval(() => {
      /* istanbul ignore next */
      cov_1fe1wefs5z().f[17]++;
      cov_1fe1wefs5z().s[97]++;
      try {
        /* istanbul ignore next */
        cov_1fe1wefs5z().s[98]++;
        this.emit('dashboardUpdate', this.getSecurityDashboardData());
      } catch (error) {
        /* istanbul ignore next */
        cov_1fe1wefs5z().s[99]++;
        logger_1.logger.error('❌ Dashboard update error:', error);
      }
    }, this.config.dashboardRefreshInterval);
  }
  /**
   * Stop monitoring intervals
   * Stops all periodic monitoring tasks
   */
  stopMonitoringIntervals() {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[18]++;
    cov_1fe1wefs5z().s[100]++;
    if (this.monitoringInterval) {
      /* istanbul ignore next */
      cov_1fe1wefs5z().b[6][0]++;
      cov_1fe1wefs5z().s[101]++;
      clearInterval(this.monitoringInterval);
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[102]++;
      this.monitoringInterval = null;
    } else
    /* istanbul ignore next */
    {
      cov_1fe1wefs5z().b[6][1]++;
    }
    cov_1fe1wefs5z().s[103]++;
    if (this.metricsInterval) {
      /* istanbul ignore next */
      cov_1fe1wefs5z().b[7][0]++;
      cov_1fe1wefs5z().s[104]++;
      clearInterval(this.metricsInterval);
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[105]++;
      this.metricsInterval = null;
    } else
    /* istanbul ignore next */
    {
      cov_1fe1wefs5z().b[7][1]++;
    }
    cov_1fe1wefs5z().s[106]++;
    if (this.dashboardInterval) {
      /* istanbul ignore next */
      cov_1fe1wefs5z().b[8][0]++;
      cov_1fe1wefs5z().s[107]++;
      clearInterval(this.dashboardInterval);
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[108]++;
      this.dashboardInterval = null;
    } else
    /* istanbul ignore next */
    {
      cov_1fe1wefs5z().b[8][1]++;
    }
  }
  /**
   * Initialize threat detection integration
   * Sets up integration with threat detection engine
   */
  initializeThreatDetectionIntegration() {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[19]++;
    cov_1fe1wefs5z().s[109]++;
    // Listen for threat detection events
    threat_detection_engine_1.threatDetectionEngine.on('threatDetected', async threat => {
      /* istanbul ignore next */
      cov_1fe1wefs5z().f[20]++;
      const securityEvent =
      /* istanbul ignore next */
      (cov_1fe1wefs5z().s[110]++, {
        eventId: threat.detectionId,
        eventType: SecurityEventType.THREAT_DETECTED,
        severity: threat.severity,
        source: threat.source,
        target: threat.target,
        timestamp: threat.timestamp,
        details: {
          threatType: threat.threatType,
          confidence: threat.confidence,
          detectionMethod: threat.detectionMethod,
          rawData: threat.rawData
        },
        threatDetection: threat,
        status: SecurityEventStatus.NEW,
        responseActions: []
      });
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[111]++;
      await this.processSecurityEvent(securityEvent);
    });
    // Listen for high-severity threats
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[112]++;
    threat_detection_engine_1.threatDetectionEngine.on('highSeverityThreat', async threat => {
      /* istanbul ignore next */
      cov_1fe1wefs5z().f[21]++;
      cov_1fe1wefs5z().s[113]++;
      logger_1.logger.warn('🚨 HIGH SEVERITY THREAT DETECTED', {
        detectionId: threat.detectionId,
        threatType: threat.threatType,
        severity: threat.severity,
        source: threat.source
      });
      // Trigger immediate response
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[114]++;
      await this.handleCriticalThreat(threat);
    });
  }
  /**
   * Perform security scan
   * Conducts comprehensive security monitoring scan
   *
   * @returns Promise<void>
   */
  async performSecurityScan() {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[22]++;
    cov_1fe1wefs5z().s[115]++;
    try {
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[116]++;
      // Check system health
      await this.checkSystemHealth();
      // Monitor event velocity
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[117]++;
      this.monitorEventVelocity();
      // Clean up old events
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[118]++;
      this.cleanupOldEvents();
      // Update correlation patterns
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[119]++;
      this.updateCorrelationPatterns();
    } catch (error) {
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[120]++;
      logger_1.logger.error('❌ Security scan failed:', error);
    }
  }
  /**
   * Add event to history
   * Adds security event to monitoring history
   *
   * @param event - Security event to add
   */
  addToEventHistory(event) {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[23]++;
    cov_1fe1wefs5z().s[121]++;
    this.eventHistory.push(event);
    // Maintain history size limit
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[122]++;
    if (this.eventHistory.length > this.config.maxEventHistory) {
      /* istanbul ignore next */
      cov_1fe1wefs5z().b[9][0]++;
      cov_1fe1wefs5z().s[123]++;
      this.eventHistory.shift();
    } else
    /* istanbul ignore next */
    {
      cov_1fe1wefs5z().b[9][1]++;
    }
    // Add to active incidents if high severity
    cov_1fe1wefs5z().s[124]++;
    if (event.severity >= this.config.alertThresholds.highThreatScore) {
      /* istanbul ignore next */
      cov_1fe1wefs5z().b[10][0]++;
      cov_1fe1wefs5z().s[125]++;
      this.activeIncidents.set(event.eventId, event);
    } else
    /* istanbul ignore next */
    {
      cov_1fe1wefs5z().b[10][1]++;
    }
  }
  /**
   * Correlate security event
   * Analyzes event for correlation with other events
   *
   * @param event - Security event to correlate
   * @returns Promise<void>
   */
  async correlateSecurityEvent(event) {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[24]++;
    cov_1fe1wefs5z().s[126]++;
    try {
      const correlationKey =
      /* istanbul ignore next */
      (cov_1fe1wefs5z().s[127]++, `${event.source}_${event.eventType}`);
      const correlatedEvents =
      /* istanbul ignore next */
      (cov_1fe1wefs5z().s[128]++,
      /* istanbul ignore next */
      (cov_1fe1wefs5z().b[11][0]++, this.correlationPatterns.get(correlationKey)) ||
      /* istanbul ignore next */
      (cov_1fe1wefs5z().b[11][1]++, []));
      // Add current event to correlation
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[129]++;
      correlatedEvents.push(event);
      // Keep only events within correlation window
      const windowStart =
      /* istanbul ignore next */
      (cov_1fe1wefs5z().s[130]++, Date.now() - this.config.correlationWindow);
      const recentEvents =
      /* istanbul ignore next */
      (cov_1fe1wefs5z().s[131]++, correlatedEvents.filter(e => {
        /* istanbul ignore next */
        cov_1fe1wefs5z().f[25]++;
        cov_1fe1wefs5z().s[132]++;
        return e.timestamp.getTime() > windowStart;
      }));
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[133]++;
      this.correlationPatterns.set(correlationKey, recentEvents);
      // Check for correlation patterns
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[134]++;
      if (recentEvents.length >= 3) {
        /* istanbul ignore next */
        cov_1fe1wefs5z().b[12][0]++;
        cov_1fe1wefs5z().s[135]++;
        await this.handleCorrelatedEvents(correlationKey, recentEvents);
      } else
      /* istanbul ignore next */
      {
        cov_1fe1wefs5z().b[12][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[136]++;
      logger_1.logger.error('❌ Event correlation failed:', error);
    }
  }
  /**
   * Determine response actions
   * Determines appropriate response actions for security event
   *
   * @param event - Security event
   * @returns Promise<string[]> Response actions
   */
  async determineResponseActions(event) {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[26]++;
    const actions =
    /* istanbul ignore next */
    (cov_1fe1wefs5z().s[137]++, []);
    // Actions based on event type
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[138]++;
    switch (event.eventType) {
      case SecurityEventType.THREAT_DETECTED:
        /* istanbul ignore next */
        cov_1fe1wefs5z().b[13][0]++;
        cov_1fe1wefs5z().s[139]++;
        actions.push('Log threat details');
        /* istanbul ignore next */
        cov_1fe1wefs5z().s[140]++;
        if (event.severity >= 7) {
          /* istanbul ignore next */
          cov_1fe1wefs5z().b[14][0]++;
          cov_1fe1wefs5z().s[141]++;
          actions.push('Alert security team');
        } else
        /* istanbul ignore next */
        {
          cov_1fe1wefs5z().b[14][1]++;
        }
        cov_1fe1wefs5z().s[142]++;
        if (event.severity >= 9) {
          /* istanbul ignore next */
          cov_1fe1wefs5z().b[15][0]++;
          cov_1fe1wefs5z().s[143]++;
          actions.push('Initiate incident response');
        } else
        /* istanbul ignore next */
        {
          cov_1fe1wefs5z().b[15][1]++;
        }
        cov_1fe1wefs5z().s[144]++;
        break;
      case SecurityEventType.AUTHENTICATION_FAILURE:
        /* istanbul ignore next */
        cov_1fe1wefs5z().b[13][1]++;
        cov_1fe1wefs5z().s[145]++;
        actions.push('Monitor source IP');
        /* istanbul ignore next */
        cov_1fe1wefs5z().s[146]++;
        if (event.severity >= 5) {
          /* istanbul ignore next */
          cov_1fe1wefs5z().b[16][0]++;
          cov_1fe1wefs5z().s[147]++;
          actions.push('Implement rate limiting');
        } else
        /* istanbul ignore next */
        {
          cov_1fe1wefs5z().b[16][1]++;
        }
        cov_1fe1wefs5z().s[148]++;
        break;
      case SecurityEventType.UNAUTHORIZED_ACCESS:
        /* istanbul ignore next */
        cov_1fe1wefs5z().b[13][2]++;
        cov_1fe1wefs5z().s[149]++;
        actions.push('Block access attempt');
        /* istanbul ignore next */
        cov_1fe1wefs5z().s[150]++;
        actions.push('Alert security team');
        /* istanbul ignore next */
        cov_1fe1wefs5z().s[151]++;
        break;
      default:
        /* istanbul ignore next */
        cov_1fe1wefs5z().b[13][3]++;
        cov_1fe1wefs5z().s[152]++;
        actions.push('Monitor and log');
    }
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[153]++;
    return actions;
  }
  /**
   * Execute automated response
   * Executes automated response actions for security event
   *
   * @param event - Security event
   * @returns Promise<void>
   */
  async executeAutomatedResponse(event) {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[27]++;
    cov_1fe1wefs5z().s[154]++;
    try {
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[155]++;
      for (const action of event.responseActions) {
        /* istanbul ignore next */
        cov_1fe1wefs5z().s[156]++;
        switch (action) {
          case 'Log threat details':
            /* istanbul ignore next */
            cov_1fe1wefs5z().b[17][0]++;
            cov_1fe1wefs5z().s[157]++;
            logger_1.logger.security('THREAT_DETAILS', 'Detailed threat information', {
              eventId: event.eventId,
              details: event.details,
              classification: 'RESTRICTED'
            });
            /* istanbul ignore next */
            cov_1fe1wefs5z().s[158]++;
            break;
          case 'Alert security team':
            /* istanbul ignore next */
            cov_1fe1wefs5z().b[17][1]++;
            cov_1fe1wefs5z().s[159]++;
            await this.sendSecurityAlert(event);
            /* istanbul ignore next */
            cov_1fe1wefs5z().s[160]++;
            break;
          case 'Initiate incident response':
            /* istanbul ignore next */
            cov_1fe1wefs5z().b[17][2]++;
            cov_1fe1wefs5z().s[161]++;
            await this.initiateIncidentResponse(event);
            /* istanbul ignore next */
            cov_1fe1wefs5z().s[162]++;
            break;
          case 'Monitor source IP':
            /* istanbul ignore next */
            cov_1fe1wefs5z().b[17][3]++;
            cov_1fe1wefs5z().s[163]++;
            // Implementation would add IP to monitoring list
            logger_1.logger.info(`🔍 Monitoring IP: ${event.source}`);
            /* istanbul ignore next */
            cov_1fe1wefs5z().s[164]++;
            break;
          case 'Block access attempt':
            /* istanbul ignore next */
            cov_1fe1wefs5z().b[17][4]++;
            cov_1fe1wefs5z().s[165]++;
            // Implementation would block access
            logger_1.logger.warn(`🚫 Blocking access from: ${event.source}`);
            /* istanbul ignore next */
            cov_1fe1wefs5z().s[166]++;
            break;
          default:
            /* istanbul ignore next */
            cov_1fe1wefs5z().b[17][5]++;
            cov_1fe1wefs5z().s[167]++;
            logger_1.logger.debug(`📝 Response action: ${action}`);
        }
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[168]++;
      logger_1.logger.error('❌ Automated response execution failed:', error);
    }
  }
  /**
   * Update security metrics
   * Updates security metrics based on processed event
   *
   * @param event - Processed security event
   */
  updateSecurityMetrics(event) {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[28]++;
    cov_1fe1wefs5z().s[169]++;
    this.securityMetrics.totalEvents++;
    // Update events by severity
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[170]++;
    this.securityMetrics.eventsBySeverity[event.severity] = (
    /* istanbul ignore next */
    (cov_1fe1wefs5z().b[18][0]++, this.securityMetrics.eventsBySeverity[event.severity]) ||
    /* istanbul ignore next */
    (cov_1fe1wefs5z().b[18][1]++, 0)) + 1;
    // Update events by type
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[171]++;
    this.securityMetrics.eventsByType[event.eventType] = (
    /* istanbul ignore next */
    (cov_1fe1wefs5z().b[19][0]++, this.securityMetrics.eventsByType[event.eventType]) ||
    /* istanbul ignore next */
    (cov_1fe1wefs5z().b[19][1]++, 0)) + 1;
    // Update last update timestamp
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[172]++;
    this.securityMetrics.lastUpdate = new Date();
  }
  /**
   * Handle high-severity event
   * Processes high-severity security events
   *
   * @param event - High-severity security event
   * @returns Promise<void>
   */
  async handleHighSeverityEvent(event) {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[29]++;
    cov_1fe1wefs5z().s[173]++;
    logger_1.logger.warn('⚠️ HIGH SEVERITY SECURITY EVENT', {
      eventId: event.eventId,
      eventType: event.eventType,
      severity: event.severity,
      source: event.source
    });
    // Send immediate alert
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[174]++;
    await this.sendSecurityAlert(event);
    // Update event status
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[175]++;
    event.status = SecurityEventStatus.INVESTIGATING;
  }
  /**
   * Handle critical event
   * Processes critical security events
   *
   * @param event - Critical security event
   * @returns Promise<void>
   */
  async handleCriticalEvent(event) {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[30]++;
    cov_1fe1wefs5z().s[176]++;
    logger_1.logger.error('🚨 CRITICAL SECURITY EVENT', {
      eventId: event.eventId,
      eventType: event.eventType,
      severity: event.severity,
      source: event.source
    });
    // Initiate incident response
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[177]++;
    await this.initiateIncidentResponse(event);
    // Update event status
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[178]++;
    event.status = SecurityEventStatus.RESPONDING;
  }
  /**
   * Handle critical threat
   * Processes critical threat detection events
   *
   * @param threat - Critical threat detection event
   * @returns Promise<void>
   */
  async handleCriticalThreat(threat) {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[31]++;
    // Create emergency security event
    const emergencyEvent =
    /* istanbul ignore next */
    (cov_1fe1wefs5z().s[179]++, {
      eventId: `emergency_${threat.detectionId}`,
      eventType: SecurityEventType.INCIDENT_ESCALATION,
      severity: 10,
      source: threat.source,
      target: threat.target,
      timestamp: new Date(),
      details: {
        originalThreat: threat,
        escalationReason: 'Critical threat severity'
      },
      threatDetection: threat,
      status: SecurityEventStatus.NEW,
      responseActions: ['Initiate emergency response', 'Alert all stakeholders']
    });
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[180]++;
    await this.processSecurityEvent(emergencyEvent);
  }
  /**
   * Handle correlated events
   * Processes correlated security events
   *
   * @param correlationKey - Correlation key
   * @param events - Correlated events
   * @returns Promise<void>
   */
  async handleCorrelatedEvents(correlationKey, events) {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[32]++;
    cov_1fe1wefs5z().s[181]++;
    logger_1.logger.warn('🔗 CORRELATED SECURITY EVENTS DETECTED', {
      correlationKey,
      eventCount: events.length,
      timeSpan: events[events.length - 1].timestamp.getTime() - events[0].timestamp.getTime()
    });
    // Create correlation event
    const correlationEvent =
    /* istanbul ignore next */
    (cov_1fe1wefs5z().s[182]++, {
      eventId: `correlation_${Date.now()}`,
      eventType: SecurityEventType.SUSPICIOUS_ACTIVITY,
      severity: Math.max(...events.map(e => {
        /* istanbul ignore next */
        cov_1fe1wefs5z().f[33]++;
        cov_1fe1wefs5z().s[183]++;
        return e.severity;
      })) + 1,
      source: correlationKey,
      target: 'SYSTEM',
      timestamp: new Date(),
      details: {
        correlatedEvents: events.map(e => {
          /* istanbul ignore next */
          cov_1fe1wefs5z().f[34]++;
          cov_1fe1wefs5z().s[184]++;
          return e.eventId;
        }),
        pattern: correlationKey,
        eventCount: events.length
      },
      status: SecurityEventStatus.NEW,
      responseActions: ['Investigate correlation pattern', 'Monitor for additional events']
    });
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[185]++;
    await this.processSecurityEvent(correlationEvent);
  }
  /**
   * Send security alert
   * Sends security alert notification
   *
   * @param event - Security event to alert about
   * @returns Promise<void>
   */
  async sendSecurityAlert(event) {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[35]++;
    cov_1fe1wefs5z().s[186]++;
    // Implementation would send actual alerts (email, Telegram, etc.)
    logger_1.logger.info('📧 Security alert sent', {
      eventId: event.eventId,
      severity: event.severity,
      eventType: event.eventType
    });
  }
  /**
   * Initiate incident response
   * Starts incident response procedures
   *
   * @param event - Security event triggering incident response
   * @returns Promise<void>
   */
  async initiateIncidentResponse(event) {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[36]++;
    cov_1fe1wefs5z().s[187]++;
    logger_1.logger.error('🚨 INCIDENT RESPONSE INITIATED', {
      eventId: event.eventId,
      severity: event.severity,
      eventType: event.eventType
    });
    // Implementation would trigger incident response procedures
    // This would integrate with the incident response system
  }
  /**
   * Check system health
   * Monitors system health indicators
   *
   * @returns Promise<void>
   */
  async checkSystemHealth() {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[37]++;
  } // Implementation would check various system health indicators
  // CPU usage, memory usage, disk space, network connectivity, etc.
  /**
   * Monitor event velocity
   * Monitors the rate of security events
   */
  monitorEventVelocity() {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[38]++;
    const oneMinuteAgo =
    /* istanbul ignore next */
    (cov_1fe1wefs5z().s[188]++, Date.now() - 60000);
    const recentEvents =
    /* istanbul ignore next */
    (cov_1fe1wefs5z().s[189]++, this.eventHistory.filter(event => {
      /* istanbul ignore next */
      cov_1fe1wefs5z().f[39]++;
      cov_1fe1wefs5z().s[190]++;
      return event.timestamp.getTime() > oneMinuteAgo;
    }));
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[191]++;
    if (recentEvents.length > this.config.alertThresholds.eventVelocityThreshold) {
      /* istanbul ignore next */
      cov_1fe1wefs5z().b[20][0]++;
      cov_1fe1wefs5z().s[192]++;
      logger_1.logger.warn('⚡ HIGH EVENT VELOCITY DETECTED', {
        eventsPerMinute: recentEvents.length,
        threshold: this.config.alertThresholds.eventVelocityThreshold
      });
    } else
    /* istanbul ignore next */
    {
      cov_1fe1wefs5z().b[20][1]++;
    }
  }
  /**
   * Clean up old events
   * Removes old events from memory
   */
  cleanupOldEvents() {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[40]++;
    const cutoffTime =
    /* istanbul ignore next */
    (cov_1fe1wefs5z().s[193]++, Date.now() - 24 * 60 * 60 * 1000); // 24 hours
    // Clean up event history
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[194]++;
    this.eventHistory = this.eventHistory.filter(event => {
      /* istanbul ignore next */
      cov_1fe1wefs5z().f[41]++;
      cov_1fe1wefs5z().s[195]++;
      return event.timestamp.getTime() > cutoffTime;
    });
    // Clean up active incidents (resolved or old)
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[196]++;
    for (const [eventId, incident] of this.activeIncidents.entries()) {
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[197]++;
      if (
      /* istanbul ignore next */
      (cov_1fe1wefs5z().b[22][0]++, incident.status === SecurityEventStatus.RESOLVED) ||
      /* istanbul ignore next */
      (cov_1fe1wefs5z().b[22][1]++, incident.timestamp.getTime() < cutoffTime)) {
        /* istanbul ignore next */
        cov_1fe1wefs5z().b[21][0]++;
        cov_1fe1wefs5z().s[198]++;
        this.activeIncidents.delete(eventId);
      } else
      /* istanbul ignore next */
      {
        cov_1fe1wefs5z().b[21][1]++;
      }
    }
    // Clean up correlation patterns
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[199]++;
    for (const [key, events] of this.correlationPatterns.entries()) {
      const recentEvents =
      /* istanbul ignore next */
      (cov_1fe1wefs5z().s[200]++, events.filter(event => {
        /* istanbul ignore next */
        cov_1fe1wefs5z().f[42]++;
        cov_1fe1wefs5z().s[201]++;
        return event.timestamp.getTime() > cutoffTime;
      }));
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[202]++;
      if (recentEvents.length === 0) {
        /* istanbul ignore next */
        cov_1fe1wefs5z().b[23][0]++;
        cov_1fe1wefs5z().s[203]++;
        this.correlationPatterns.delete(key);
      } else {
        /* istanbul ignore next */
        cov_1fe1wefs5z().b[23][1]++;
        cov_1fe1wefs5z().s[204]++;
        this.correlationPatterns.set(key, recentEvents);
      }
    }
  }
  /**
   * Update correlation patterns
   * Updates event correlation patterns
   */
  updateCorrelationPatterns() {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[43]++;
  } // Implementation would analyze patterns and update correlation rules
  // This could use machine learning for pattern recognition
  /**
   * Update metrics
   * Updates security metrics and KPIs
   */
  updateMetrics() {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[44]++;
    cov_1fe1wefs5z().s[205]++;
    // Calculate monitoring uptime
    this.securityMetrics.monitoringUptime = (Date.now() - this.serviceStartTime.getTime()) / 1000;
    // Calculate threat detection rate
    const totalThreats =
    /* istanbul ignore next */
    (cov_1fe1wefs5z().s[206]++, this.eventHistory.filter(event => {
      /* istanbul ignore next */
      cov_1fe1wefs5z().f[45]++;
      cov_1fe1wefs5z().s[207]++;
      return event.eventType === SecurityEventType.THREAT_DETECTED;
    }).length);
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[208]++;
    this.securityMetrics.threatDetectionRate = this.securityMetrics.totalEvents > 0 ?
    /* istanbul ignore next */
    (cov_1fe1wefs5z().b[24][0]++, totalThreats / this.securityMetrics.totalEvents * 100) :
    /* istanbul ignore next */
    (cov_1fe1wefs5z().b[24][1]++, 0);
    // Calculate security score based on recent events
    const recentEvents =
    /* istanbul ignore next */
    (cov_1fe1wefs5z().s[209]++, this.eventHistory.filter(event => {
      /* istanbul ignore next */
      cov_1fe1wefs5z().f[46]++;
      cov_1fe1wefs5z().s[210]++;
      return Date.now() - event.timestamp.getTime() < 3600000;
    } // Last hour
    ));
    const severitySum =
    /* istanbul ignore next */
    (cov_1fe1wefs5z().s[211]++, recentEvents.reduce((sum, event) => {
      /* istanbul ignore next */
      cov_1fe1wefs5z().f[47]++;
      cov_1fe1wefs5z().s[212]++;
      return sum + event.severity;
    }, 0));
    const averageSeverity =
    /* istanbul ignore next */
    (cov_1fe1wefs5z().s[213]++, recentEvents.length > 0 ?
    /* istanbul ignore next */
    (cov_1fe1wefs5z().b[25][0]++, severitySum / recentEvents.length) :
    /* istanbul ignore next */
    (cov_1fe1wefs5z().b[25][1]++, 0));
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[214]++;
    this.securityMetrics.securityScore = Math.max(0, 100 - averageSeverity * 10);
    // Update timestamp
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[215]++;
    this.securityMetrics.lastUpdate = new Date();
  }
  /**
   * Generate threat visualization data
   * Creates data for threat visualization dashboard
   *
   * @param events - Security events to visualize
   * @returns Threat visualization data
   */
  generateThreatVisualization(events) {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[48]++;
    const threatsByType =
    /* istanbul ignore next */
    (cov_1fe1wefs5z().s[216]++, {});
    const threatsBySource =
    /* istanbul ignore next */
    (cov_1fe1wefs5z().s[217]++, {});
    const threatTimeline =
    /* istanbul ignore next */
    (cov_1fe1wefs5z().s[218]++, []);
    // Count threats by type
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[219]++;
    for (const event of events) {
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[220]++;
      threatsByType[event.eventType] = (
      /* istanbul ignore next */
      (cov_1fe1wefs5z().b[26][0]++, threatsByType[event.eventType]) ||
      /* istanbul ignore next */
      (cov_1fe1wefs5z().b[26][1]++, 0)) + 1;
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[221]++;
      threatsBySource[event.source] = (
      /* istanbul ignore next */
      (cov_1fe1wefs5z().b[27][0]++, threatsBySource[event.source]) ||
      /* istanbul ignore next */
      (cov_1fe1wefs5z().b[27][1]++, 0)) + 1;
    }
    // Generate timeline (hourly buckets for last 24 hours)
    const now =
    /* istanbul ignore next */
    (cov_1fe1wefs5z().s[222]++, new Date());
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[223]++;
    for (let i =
    /* istanbul ignore next */
    (cov_1fe1wefs5z().s[224]++, 23); i >= 0; i--) {
      const bucketTime =
      /* istanbul ignore next */
      (cov_1fe1wefs5z().s[225]++, new Date(now.getTime() - i * 60 * 60 * 1000));
      const bucketStart =
      /* istanbul ignore next */
      (cov_1fe1wefs5z().s[226]++, bucketTime.getTime());
      const bucketEnd =
      /* istanbul ignore next */
      (cov_1fe1wefs5z().s[227]++, bucketStart + 60 * 60 * 1000);
      const count =
      /* istanbul ignore next */
      (cov_1fe1wefs5z().s[228]++, events.filter(event => {
        /* istanbul ignore next */
        cov_1fe1wefs5z().f[49]++;
        cov_1fe1wefs5z().s[229]++;
        return /* istanbul ignore next */(cov_1fe1wefs5z().b[28][0]++, event.timestamp.getTime() >= bucketStart) &&
        /* istanbul ignore next */
        (cov_1fe1wefs5z().b[28][1]++, event.timestamp.getTime() < bucketEnd);
      }).length);
      /* istanbul ignore next */
      cov_1fe1wefs5z().s[230]++;
      threatTimeline.push({
        timestamp: bucketTime,
        count
      });
    }
    /* istanbul ignore next */
    cov_1fe1wefs5z().s[231]++;
    return {
      threatsByType,
      threatsBySource,
      threatTimeline
    };
  }
  /**
   * Generate system health data
   * Creates system health indicators for dashboard
   *
   * @returns System health data
   */
  generateSystemHealthData() {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[50]++;
    cov_1fe1wefs5z().s[232]++;
    return {
      monitoringStatus: this.monitoringInterval ?
      /* istanbul ignore next */
      (cov_1fe1wefs5z().b[29][0]++, 'ACTIVE') :
      /* istanbul ignore next */
      (cov_1fe1wefs5z().b[29][1]++, 'OFFLINE'),
      lastHealthCheck: new Date(),
      componentStatus: {
        'Threat Detection': 'HEALTHY',
        'Event Processing': 'HEALTHY',
        'Audit Logging': 'HEALTHY',
        'Alert System': 'HEALTHY'
      }
    };
  }
  /**
   * Get service status
   * Returns current service status for monitoring
   *
   * @returns Service status information
   */
  getStatus() {
    /* istanbul ignore next */
    cov_1fe1wefs5z().f[51]++;
    cov_1fe1wefs5z().s[233]++;
    return {
      isMonitoring: this.monitoringInterval !== null,
      eventHistory: this.eventHistory.length,
      activeIncidents: this.activeIncidents.size,
      correlationPatterns: this.correlationPatterns.size,
      uptime: Date.now() - this.serviceStartTime.getTime(),
      timestamp: Date.now()
    };
  }
}
/* istanbul ignore next */
cov_1fe1wefs5z().s[234]++;
exports.SecurityMonitoringService = SecurityMonitoringService;
// Create and export singleton instance
/* istanbul ignore next */
cov_1fe1wefs5z().s[235]++;
exports.securityMonitoringService = new SecurityMonitoringService();
// =============================================================================
// SECURITY MONITORING NOTES
// =============================================================================
// 1. 24/7 continuous monitoring of all security events and threats
// 2. Real-time threat detection and automated response capabilities
// 3. Event correlation and pattern analysis for advanced threat detection
// 4. Comprehensive security metrics and KPI tracking
// 5. Security dashboard with real-time threat visualization
// 6. Automated incident response and escalation procedures
// 7. Integration with threat detection engine and audit service
// 8. Configurable alert thresholds and response actions
// =============================================================================
//# sourceMappingURL=data:application/json;charset=utf-8;base64,