{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\tests\\ai\\sentiment\\sentiment-engine.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\tests\\ai\\sentiment\\sentiment-engine.test.ts"],"sourcesContent":["/**\r\n * Sentiment Analysis Engine Tests\r\n * Unit tests for the sentiment analysis engine\r\n */\r\n\r\nimport { SentimentAnalysisEngine } from '../../../ai/sentiment/sentiment-engine';\r\nimport { SentimentConfig, SentimentScore, WeightedSentiment } from '../../../ai/sentiment/types';\r\n\r\n// Mock the individual monitors\r\njest.mock('../../../ai/sentiment/twitter-monitor');\r\njest.mock('../../../ai/sentiment/reddit-monitor');\r\njest.mock('../../../ai/sentiment/news-monitor');\r\njest.mock('../../../core/logging/logger');\r\n\r\ndescribe('SentimentAnalysisEngine', () => {\r\n  let engine: SentimentAnalysisEngine;\r\n  let mockConfig: SentimentConfig;\r\n\r\n  beforeEach(() => {\r\n    mockConfig = {\r\n      twitter: {\r\n        apiKey: 'test_key',\r\n        apiSecret: 'test_secret',\r\n        accessToken: 'test_token',\r\n        accessTokenSecret: 'test_token_secret',\r\n        bearerToken: 'test_bearer'\r\n      },\r\n      reddit: {\r\n        clientId: 'test_client_id',\r\n        clientSecret: 'test_client_secret',\r\n        username: 'test_user',\r\n        password: 'test_pass',\r\n        userAgent: 'test_agent'\r\n      },\r\n      news: {\r\n        sources: ['coindesk', 'cointelegraph'],\r\n        apiKeys: {},\r\n        updateInterval: 15\r\n      },\r\n      weights: {\r\n        twitter: 0.4,\r\n        reddit: 0.35,\r\n        news: 0.25\r\n      },\r\n      thresholds: {\r\n        extremePositive: 70,\r\n        extremeNegative: -70,\r\n        rapidChange: 15,\r\n        volumeSpike: 500\r\n      }\r\n    };\r\n\r\n    engine = new SentimentAnalysisEngine(mockConfig);\r\n  });\r\n\r\n  afterEach(() => {\r\n    if (engine) {\r\n      engine.stopEngine();\r\n    }\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('Weighted Sentiment Calculation', () => {\r\n    it('should calculate weighted sentiment correctly', async () => {\r\n      // Mock sentiment scores from different sources\r\n      const mockTwitterScore: SentimentScore = {\r\n        source: 'twitter',\r\n        score: 50,\r\n        confidence: 80,\r\n        volume: 100,\r\n        timestamp: new Date(),\r\n        keyTopics: ['bitcoin', 'bullish']\r\n      };\r\n\r\n      const mockRedditScore: SentimentScore = {\r\n        source: 'reddit',\r\n        score: 30,\r\n        confidence: 70,\r\n        volume: 50,\r\n        timestamp: new Date(),\r\n        keyTopics: ['ethereum', 'defi']\r\n      };\r\n\r\n      const mockNewsScore: SentimentScore = {\r\n        source: 'news',\r\n        score: 20,\r\n        confidence: 90,\r\n        volume: 25,\r\n        timestamp: new Date(),\r\n        keyTopics: ['regulation', 'adoption']\r\n      };\r\n\r\n      // Mock the monitor methods\r\n      const mockTwitterMonitor = require('../../../ai/sentiment/twitter-monitor').TwitterSentimentMonitor;\r\n      const mockRedditMonitor = require('../../../ai/sentiment/reddit-monitor').RedditSentimentMonitor;\r\n      const mockNewsMonitor = require('../../../ai/sentiment/news-monitor').NewsSentimentMonitor;\r\n\r\n      mockTwitterMonitor.prototype.getCurrentSentiment = jest.fn().mockResolvedValue(mockTwitterScore);\r\n      mockRedditMonitor.prototype.getCurrentSentiment = jest.fn().mockResolvedValue(mockRedditScore);\r\n      mockNewsMonitor.prototype.getCurrentSentiment = jest.fn().mockResolvedValue(mockNewsScore);\r\n\r\n      const result = await engine.getCurrentSentiment();\r\n\r\n      expect(result).toBeDefined();\r\n      expect(result.aggregatedScore).toBeGreaterThan(0);\r\n      expect(result.confidence).toBeGreaterThan(0);\r\n      expect(result.sources).toHaveLength(3);\r\n      expect(result.weights).toBeDefined();\r\n      expect(result.timestamp).toBeInstanceOf(Date);\r\n    });\r\n\r\n    it('should handle failed source gracefully', async () => {\r\n      const mockTwitterScore: SentimentScore = {\r\n        source: 'twitter',\r\n        score: 40,\r\n        confidence: 75,\r\n        volume: 80,\r\n        timestamp: new Date(),\r\n        keyTopics: ['bitcoin']\r\n      };\r\n\r\n      // Mock Twitter success, Reddit failure, News success\r\n      const mockTwitterMonitor = require('../../../ai/sentiment/twitter-monitor').TwitterSentimentMonitor;\r\n      const mockRedditMonitor = require('../../../ai/sentiment/reddit-monitor').RedditSentimentMonitor;\r\n      const mockNewsMonitor = require('../../../ai/sentiment/news-monitor').NewsSentimentMonitor;\r\n\r\n      mockTwitterMonitor.prototype.getCurrentSentiment = jest.fn().mockResolvedValue(mockTwitterScore);\r\n      mockRedditMonitor.prototype.getCurrentSentiment = jest.fn().mockRejectedValue(new Error('Reddit API error'));\r\n      mockNewsMonitor.prototype.getCurrentSentiment = jest.fn().mockResolvedValue({\r\n        source: 'news',\r\n        score: 25,\r\n        confidence: 85,\r\n        volume: 30,\r\n        timestamp: new Date(),\r\n        keyTopics: ['crypto']\r\n      });\r\n\r\n      const result = await engine.getCurrentSentiment();\r\n\r\n      expect(result).toBeDefined();\r\n      expect(result.sources).toHaveLength(3);\r\n      expect(result.sources.find(s => s.source === 'reddit')?.score).toBe(0);\r\n      expect(result.sources.find(s => s.source === 'reddit')?.confidence).toBe(0);\r\n    });\r\n  });\r\n\r\n  describe('Position Sizing Adjustment', () => {\r\n    it('should increase position size for positive sentiment', () => {\r\n      // Create mock sentiment history\r\n      const positiveSentiment: WeightedSentiment = {\r\n        aggregatedScore: 60,\r\n        confidence: 80,\r\n        sources: [],\r\n        weights: {},\r\n        timestamp: new Date()\r\n      };\r\n\r\n      // Access private method through type assertion\r\n      (engine as any).sentimentHistory = [positiveSentiment];\r\n\r\n      const baseSizePercent = 2.0;\r\n      const adjustedSize = engine.calculateSentimentPositionAdjustment(baseSizePercent);\r\n\r\n      expect(adjustedSize).toBeGreaterThan(baseSizePercent);\r\n      expect(adjustedSize).toBeLessThanOrEqual(baseSizePercent * 2.0); // Max 2x increase\r\n    });\r\n\r\n    it('should decrease position size for negative sentiment', () => {\r\n      const negativeSentiment: WeightedSentiment = {\r\n        aggregatedScore: -50,\r\n        confidence: 75,\r\n        sources: [],\r\n        weights: {},\r\n        timestamp: new Date()\r\n      };\r\n\r\n      (engine as any).sentimentHistory = [negativeSentiment];\r\n\r\n      const baseSizePercent = 2.0;\r\n      const adjustedSize = engine.calculateSentimentPositionAdjustment(baseSizePercent);\r\n\r\n      expect(adjustedSize).toBeLessThan(baseSizePercent);\r\n      expect(adjustedSize).toBeGreaterThanOrEqual(baseSizePercent * 0.5); // Min 0.5x decrease\r\n    });\r\n\r\n    it('should not adjust for neutral sentiment', () => {\r\n      const neutralSentiment: WeightedSentiment = {\r\n        aggregatedScore: 5,\r\n        confidence: 60,\r\n        sources: [],\r\n        weights: {},\r\n        timestamp: new Date()\r\n      };\r\n\r\n      (engine as any).sentimentHistory = [neutralSentiment];\r\n\r\n      const baseSizePercent = 2.0;\r\n      const adjustedSize = engine.calculateSentimentPositionAdjustment(baseSizePercent);\r\n\r\n      expect(Math.abs(adjustedSize - baseSizePercent)).toBeLessThan(0.1);\r\n    });\r\n\r\n    it('should scale adjustment by confidence', () => {\r\n      const lowConfidenceSentiment: WeightedSentiment = {\r\n        aggregatedScore: 60,\r\n        confidence: 30, // Low confidence\r\n        sources: [],\r\n        weights: {},\r\n        timestamp: new Date()\r\n      };\r\n\r\n      const highConfidenceSentiment: WeightedSentiment = {\r\n        aggregatedScore: 60,\r\n        confidence: 90, // High confidence\r\n        sources: [],\r\n        weights: {},\r\n        timestamp: new Date()\r\n      };\r\n\r\n      const baseSizePercent = 2.0;\r\n\r\n      (engine as any).sentimentHistory = [lowConfidenceSentiment];\r\n      const lowConfidenceAdjustment = engine.calculateSentimentPositionAdjustment(baseSizePercent);\r\n\r\n      (engine as any).sentimentHistory = [highConfidenceSentiment];\r\n      const highConfidenceAdjustment = engine.calculateSentimentPositionAdjustment(baseSizePercent);\r\n\r\n      expect(highConfidenceAdjustment).toBeGreaterThan(lowConfidenceAdjustment);\r\n    });\r\n  });\r\n\r\n  describe('Trend Analysis', () => {\r\n    it('should detect bullish trend', () => {\r\n      // Create ascending sentiment history\r\n      const history: WeightedSentiment[] = [];\r\n      for (let i = 0; i < 10; i++) {\r\n        history.push({\r\n          aggregatedScore: i * 5, // Increasing scores\r\n          confidence: 70,\r\n          sources: [],\r\n          weights: {},\r\n          timestamp: new Date(Date.now() - (10 - i) * 5 * 60 * 1000) // 5 minutes apart\r\n        });\r\n      }\r\n\r\n      (engine as any).sentimentHistory = history;\r\n      const trends = (engine as any).analyzeSentimentTrends();\r\n\r\n      expect(trends).toHaveLength(1);\r\n      expect(trends[0].direction).toBe('BULLISH');\r\n      expect(trends[0].strength).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('should detect bearish trend', () => {\r\n      // Create descending sentiment history\r\n      const history: WeightedSentiment[] = [];\r\n      for (let i = 0; i < 10; i++) {\r\n        history.push({\r\n          aggregatedScore: 50 - i * 5, // Decreasing scores\r\n          confidence: 70,\r\n          sources: [],\r\n          weights: {},\r\n          timestamp: new Date(Date.now() - (10 - i) * 5 * 60 * 1000)\r\n        });\r\n      }\r\n\r\n      (engine as any).sentimentHistory = history;\r\n      const trends = (engine as any).analyzeSentimentTrends();\r\n\r\n      expect(trends).toHaveLength(1);\r\n      expect(trends[0].direction).toBe('BEARISH');\r\n      expect(trends[0].strength).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('should detect neutral trend for flat data', () => {\r\n      // Create flat sentiment history\r\n      const history: WeightedSentiment[] = [];\r\n      for (let i = 0; i < 10; i++) {\r\n        history.push({\r\n          aggregatedScore: 25, // Constant score\r\n          confidence: 70,\r\n          sources: [],\r\n          weights: {},\r\n          timestamp: new Date(Date.now() - (10 - i) * 5 * 60 * 1000)\r\n        });\r\n      }\r\n\r\n      (engine as any).sentimentHistory = history;\r\n      const trends = (engine as any).analyzeSentimentTrends();\r\n\r\n      expect(trends).toHaveLength(1);\r\n      expect(trends[0].direction).toBe('NEUTRAL');\r\n      expect(trends[0].strength).toBeLessThan(20);\r\n    });\r\n  });\r\n\r\n  describe('Alert Generation', () => {\r\n    it('should generate extreme positive alert', async () => {\r\n      const extremePositiveSentiment: WeightedSentiment = {\r\n        aggregatedScore: 85, // Above threshold\r\n        confidence: 80,\r\n        sources: [],\r\n        weights: {},\r\n        timestamp: new Date()\r\n      };\r\n\r\n      const alerts = await (engine as any).generateSentimentAlerts(extremePositiveSentiment);\r\n\r\n      expect(alerts).toHaveLength(1);\r\n      expect(alerts[0].type).toBe('EXTREME_POSITIVE');\r\n      expect(alerts[0].severity).toBe('HIGH');\r\n    });\r\n\r\n    it('should generate extreme negative alert', async () => {\r\n      const extremeNegativeSentiment: WeightedSentiment = {\r\n        aggregatedScore: -85, // Below threshold\r\n        confidence: 80,\r\n        sources: [],\r\n        weights: {},\r\n        timestamp: new Date()\r\n      };\r\n\r\n      const alerts = await (engine as any).generateSentimentAlerts(extremeNegativeSentiment);\r\n\r\n      expect(alerts).toHaveLength(1);\r\n      expect(alerts[0].type).toBe('EXTREME_NEGATIVE');\r\n      expect(alerts[0].severity).toBe('HIGH');\r\n    });\r\n\r\n    it('should generate rapid change alert', async () => {\r\n      // Set up history with previous sentiment\r\n      const previousSentiment: WeightedSentiment = {\r\n        aggregatedScore: 10,\r\n        confidence: 70,\r\n        sources: [],\r\n        weights: {},\r\n        timestamp: new Date(Date.now() - 5 * 60 * 1000)\r\n      };\r\n\r\n      const currentSentiment: WeightedSentiment = {\r\n        aggregatedScore: 30, // Change of 20, above rapid change threshold\r\n        confidence: 70,\r\n        sources: [],\r\n        weights: {},\r\n        timestamp: new Date()\r\n      };\r\n\r\n      (engine as any).sentimentHistory = [previousSentiment];\r\n\r\n      const alerts = await (engine as any).generateSentimentAlerts(currentSentiment);\r\n\r\n      expect(alerts).toHaveLength(1);\r\n      expect(alerts[0].type).toBe('RAPID_CHANGE');\r\n      expect(alerts[0].severity).toBe('MEDIUM');\r\n    });\r\n  });\r\n\r\n  describe('Engine Status', () => {\r\n    it('should return correct status when stopped', () => {\r\n      const status = engine.getStatus();\r\n\r\n      expect(status.isRunning).toBe(false);\r\n      expect(status.historySize).toBe(0);\r\n      expect(status.lastUpdate).toBeNull();\r\n      expect(status.sources.twitter).toBe(true);\r\n      expect(status.sources.reddit).toBe(true);\r\n      expect(status.sources.news).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('Recommendation Generation', () => {\r\n    it('should generate bullish recommendations for high positive sentiment', () => {\r\n      const positiveSentiment: WeightedSentiment = {\r\n        aggregatedScore: 60,\r\n        confidence: 80,\r\n        sources: [],\r\n        weights: {},\r\n        timestamp: new Date()\r\n      };\r\n\r\n      const recommendations = (engine as any).generateRecommendations(positiveSentiment, []);\r\n\r\n      expect(recommendations.length).toBeGreaterThan(0);\r\n      expect(recommendations.some((r: string) => r.includes('bullish'))).toBe(true);\r\n    });\r\n\r\n    it('should generate bearish recommendations for high negative sentiment', () => {\r\n      const negativeSentiment: WeightedSentiment = {\r\n        aggregatedScore: -60,\r\n        confidence: 80,\r\n        sources: [],\r\n        weights: {},\r\n        timestamp: new Date()\r\n      };\r\n\r\n      const recommendations = (engine as any).generateRecommendations(negativeSentiment, []);\r\n\r\n      expect(recommendations.length).toBeGreaterThan(0);\r\n      expect(recommendations.some((r: string) => r.includes('bearish'))).toBe(true);\r\n    });\r\n\r\n    it('should warn about low confidence', () => {\r\n      const lowConfidenceSentiment: WeightedSentiment = {\r\n        aggregatedScore: 40,\r\n        confidence: 25, // Low confidence\r\n        sources: [],\r\n        weights: {},\r\n        timestamp: new Date()\r\n      };\r\n\r\n      const recommendations = (engine as any).generateRecommendations(lowConfidenceSentiment, []);\r\n\r\n      expect(recommendations.some((r: string) => r.includes('Low sentiment confidence'))).toBe(true);\r\n    });\r\n  });\r\n});"],"version":3}