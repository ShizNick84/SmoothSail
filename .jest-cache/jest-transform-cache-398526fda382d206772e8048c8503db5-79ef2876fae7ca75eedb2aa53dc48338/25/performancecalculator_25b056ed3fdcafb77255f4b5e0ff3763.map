{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\backtesting\\performance-calculator.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\backtesting\\performance-calculator.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * PERFORMANCE CALCULATOR - COMPREHENSIVE TRADING METRICS\r\n * =============================================================================\r\n * \r\n * This module calculates comprehensive performance metrics for backtesting\r\n * results, including Sharpe ratio, Sortino ratio, maximum drawdown, and\r\n * other advanced risk-adjusted performance measures.\r\n * \r\n * METRICS CALCULATED:\r\n * - Return metrics: Total return, annualized return, CAGR\r\n * - Risk metrics: Sharpe ratio, Sortino ratio, Calmar ratio\r\n * - Drawdown metrics: Maximum drawdown, average drawdown, recovery factor\r\n * - Trade metrics: Win rate, profit factor, payoff ratio\r\n * - Advanced metrics: VaR, CVaR, Beta, Alpha, Information ratio\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport { logger } from '@/core/logging/logger';\r\nimport { \r\n  BacktestResult, \r\n  BacktestTrade, \r\n  BacktestPortfolio,\r\n  EquityPoint,\r\n  DrawdownPoint,\r\n  MonthlyReturn,\r\n  BenchmarkComparison\r\n} from './types';\r\n\r\n/**\r\n * Risk-free rate for Sharpe ratio calculation (US Treasury 3-month rate)\r\n */\r\nconst RISK_FREE_RATE = 0.05; // 5% annual\r\n\r\n/**\r\n * Trading days per year for annualization\r\n */\r\nconst TRADING_DAYS_PER_YEAR = 365; // Crypto markets trade 24/7\r\n\r\n/**\r\n * Performance Calculator for comprehensive backtesting metrics\r\n */\r\nexport class PerformanceCalculator {\r\n  \r\n  /**\r\n   * Calculate comprehensive performance metrics\r\n   */\r\n  public static calculatePerformanceMetrics(\r\n    trades: BacktestTrade[],\r\n    portfolioHistory: BacktestPortfolio[],\r\n    initialBalance: number,\r\n    benchmarkReturns?: number[]\r\n  ): BacktestResult['performance'] {\r\n    logger.info('📊 Calculating comprehensive performance metrics...');\r\n    \r\n    if (portfolioHistory.length === 0) {\r\n      throw new Error('Portfolio history is required for performance calculation');\r\n    }\r\n    \r\n    const finalPortfolio = portfolioHistory[portfolioHistory.length - 1];\r\n    const totalReturn = finalPortfolio.equity - initialBalance;\r\n    const totalReturnPercentage = (totalReturn / initialBalance) * 100;\r\n    \r\n    // Calculate time period\r\n    const startDate = portfolioHistory[0].timestamp;\r\n    const endDate = finalPortfolio.timestamp;\r\n    const durationDays = (endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24);\r\n    const durationYears = durationDays / TRADING_DAYS_PER_YEAR;\r\n    \r\n    // Calculate returns array for advanced metrics\r\n    const returns = this.calculateReturns(portfolioHistory);\r\n    const negativeReturns = returns.filter(r => r < 0);\r\n    \r\n    // Calculate annualized return (CAGR)\r\n    const annualizedReturn = durationYears > 0 \r\n      ? Math.pow(finalPortfolio.equity / initialBalance, 1 / durationYears) - 1\r\n      : 0;\r\n    \r\n    // Calculate Sharpe ratio\r\n    const sharpeRatio = this.calculateSharpeRatio(returns, RISK_FREE_RATE);\r\n    \r\n    // Calculate Sortino ratio (using downside deviation)\r\n    const sortinoRatio = this.calculateSortinoRatio(returns, RISK_FREE_RATE);\r\n    \r\n    // Calculate Calmar ratio\r\n    const maxDrawdownPercent = Math.max(...portfolioHistory.map(p => p.maxDrawdownPercentage));\r\n    const calmarRatio = maxDrawdownPercent > 0 ? (annualizedReturn * 100) / maxDrawdownPercent : 0;\r\n    \r\n    // Calculate recovery factor\r\n    const recoveryFactor = totalReturnPercentage / maxDrawdownPercent;\r\n    \r\n    // Calculate profit factor\r\n    const profitFactor = this.calculateProfitFactor(trades);\r\n    \r\n    // Calculate payoff ratio\r\n    const payoffRatio = this.calculatePayoffRatio(trades);\r\n    \r\n    // Calculate expected value\r\n    const expectedValue = this.calculateExpectedValue(trades);\r\n    \r\n    // Calculate volatility (annualized)\r\n    const volatility = this.calculateVolatility(returns) * Math.sqrt(TRADING_DAYS_PER_YEAR);\r\n    \r\n    // Calculate downside deviation\r\n    const downsideDeviation = this.calculateDownsideDeviation(returns, RISK_FREE_RATE / TRADING_DAYS_PER_YEAR);\r\n    \r\n    // Calculate VaR and CVaR\r\n    const var95 = this.calculateVaR(returns, 0.95);\r\n    const cvar95 = this.calculateCVaR(returns, 0.95);\r\n    \r\n    // Calculate Beta and Alpha (if benchmark provided)\r\n    let beta = 0;\r\n    let alpha = 0;\r\n    let informationRatio = 0;\r\n    \r\n    if (benchmarkReturns && benchmarkReturns.length === returns.length) {\r\n      beta = this.calculateBeta(returns, benchmarkReturns);\r\n      alpha = this.calculateAlpha(returns, benchmarkReturns, RISK_FREE_RATE / TRADING_DAYS_PER_YEAR, beta);\r\n      informationRatio = this.calculateInformationRatio(returns, benchmarkReturns);\r\n    }\r\n    \r\n    const performance = {\r\n      totalReturn,\r\n      totalReturnPercentage,\r\n      annualizedReturn: annualizedReturn * 100,\r\n      sharpeRatio,\r\n      sortinoRatio,\r\n      calmarRatio,\r\n      maxDrawdown: Math.max(...portfolioHistory.map(p => p.maxDrawdown)),\r\n      maxDrawdownPercentage: maxDrawdownPercent,\r\n      averageDrawdown: this.calculateAverageDrawdown(portfolioHistory),\r\n      recoveryFactor,\r\n      profitFactor,\r\n      payoffRatio,\r\n      expectedValue,\r\n    };\r\n    \r\n    logger.info('✅ Performance metrics calculated successfully');\r\n    logger.info(`📈 Total Return: ${totalReturnPercentage.toFixed(2)}%`);\r\n    logger.info(`📊 Sharpe Ratio: ${sharpeRatio.toFixed(2)}`);\r\n    logger.info(`📉 Max Drawdown: ${maxDrawdownPercent.toFixed(2)}%`);\r\n    \r\n    return performance;\r\n  }\r\n\r\n  /**\r\n   * Calculate risk metrics\r\n   */\r\n  public static calculateRiskMetrics(\r\n    returns: number[],\r\n    benchmarkReturns?: number[]\r\n  ): BacktestResult['risk'] {\r\n    logger.info('⚠️ Calculating risk metrics...');\r\n    \r\n    const volatility = this.calculateVolatility(returns) * Math.sqrt(TRADING_DAYS_PER_YEAR);\r\n    const downsideDeviation = this.calculateDownsideDeviation(returns, RISK_FREE_RATE / TRADING_DAYS_PER_YEAR);\r\n    const var95 = this.calculateVaR(returns, 0.95);\r\n    const cvar95 = this.calculateCVaR(returns, 0.95);\r\n    \r\n    let beta = 0;\r\n    let alpha = 0;\r\n    let informationRatio = 0;\r\n    \r\n    if (benchmarkReturns && benchmarkReturns.length === returns.length) {\r\n      beta = this.calculateBeta(returns, benchmarkReturns);\r\n      alpha = this.calculateAlpha(returns, benchmarkReturns, RISK_FREE_RATE / TRADING_DAYS_PER_YEAR, beta);\r\n      informationRatio = this.calculateInformationRatio(returns, benchmarkReturns);\r\n    }\r\n    \r\n    return {\r\n      volatility: volatility * 100,\r\n      downside_deviation: downsideDeviation * Math.sqrt(TRADING_DAYS_PER_YEAR) * 100,\r\n      var95: var95 * 100,\r\n      cvar95: cvar95 * 100,\r\n      beta,\r\n      alpha: alpha * 100,\r\n      informationRatio,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculate trade statistics\r\n   */\r\n  public static calculateTradeStatistics(trades: BacktestTrade[]): BacktestResult['trades'] {\r\n    logger.info('📋 Calculating trade statistics...');\r\n    \r\n    const closedTrades = trades.filter(t => t.status === 'CLOSED' && t.pnl !== undefined);\r\n    const winningTrades = closedTrades.filter(t => t.pnl! > 0);\r\n    const losingTrades = closedTrades.filter(t => t.pnl! < 0);\r\n    \r\n    const winRate = closedTrades.length > 0 ? (winningTrades.length / closedTrades.length) * 100 : 0;\r\n    const averageWin = winningTrades.length > 0 \r\n      ? winningTrades.reduce((sum, t) => sum + t.pnl!, 0) / winningTrades.length \r\n      : 0;\r\n    const averageLoss = losingTrades.length > 0 \r\n      ? Math.abs(losingTrades.reduce((sum, t) => sum + t.pnl!, 0) / losingTrades.length)\r\n      : 0;\r\n    \r\n    const largestWin = winningTrades.length > 0 \r\n      ? Math.max(...winningTrades.map(t => t.pnl!)) \r\n      : 0;\r\n    const largestLoss = losingTrades.length > 0 \r\n      ? Math.abs(Math.min(...losingTrades.map(t => t.pnl!)))\r\n      : 0;\r\n    \r\n    // Calculate consecutive wins/losses\r\n    const { maxConsecutiveWins, maxConsecutiveLosses } = this.calculateConsecutiveWinsLosses(closedTrades);\r\n    \r\n    return {\r\n      total: closedTrades.length,\r\n      winning: winningTrades.length,\r\n      losing: losingTrades.length,\r\n      winRate,\r\n      averageWin,\r\n      averageLoss,\r\n      largestWin,\r\n      largestLoss,\r\n      consecutiveWins: 0, // Current streak (would be calculated in real-time)\r\n      consecutiveLosses: 0, // Current streak (would be calculated in real-time)\r\n      maxConsecutiveWins,\r\n      maxConsecutiveLosses,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generate equity curve data\r\n   */\r\n  public static generateEquityCurve(portfolioHistory: BacktestPortfolio[]): EquityPoint[] {\r\n    return portfolioHistory.map(portfolio => ({\r\n      timestamp: portfolio.timestamp,\r\n      equity: portfolio.equity,\r\n      balance: portfolio.balance,\r\n      unrealizedPnL: portfolio.unrealizedPnL,\r\n      drawdown: portfolio.drawdown,\r\n      drawdownPercentage: portfolio.drawdownPercentage,\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Generate drawdown curve data\r\n   */\r\n  public static generateDrawdownCurve(portfolioHistory: BacktestPortfolio[]): DrawdownPoint[] {\r\n    const drawdownCurve: DrawdownPoint[] = [];\r\n    let inDrawdown = false;\r\n    let drawdownStart: Date | null = null;\r\n    \r\n    for (let i = 0; i < portfolioHistory.length; i++) {\r\n      const portfolio = portfolioHistory[i];\r\n      const isUnderwater = portfolio.drawdownPercentage > 0;\r\n      \r\n      if (!inDrawdown && isUnderwater) {\r\n        inDrawdown = true;\r\n        drawdownStart = portfolio.timestamp;\r\n      } else if (inDrawdown && !isUnderwater) {\r\n        inDrawdown = false;\r\n        // Calculate recovery time for previous drawdown points\r\n        if (drawdownStart) {\r\n          const recoveryTime = portfolio.timestamp.getTime() - drawdownStart.getTime();\r\n          for (let j = drawdownCurve.length - 1; j >= 0; j--) {\r\n            if (drawdownCurve[j].timestamp >= drawdownStart) {\r\n              drawdownCurve[j].recoveryTime = recoveryTime;\r\n            } else {\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        drawdownStart = null;\r\n      }\r\n      \r\n      drawdownCurve.push({\r\n        timestamp: portfolio.timestamp,\r\n        drawdown: portfolio.drawdown,\r\n        drawdownPercentage: portfolio.drawdownPercentage,\r\n        underwater: isUnderwater,\r\n      });\r\n    }\r\n    \r\n    return drawdownCurve;\r\n  }\r\n\r\n  /**\r\n   * Generate monthly returns breakdown\r\n   */\r\n  public static generateMonthlyReturns(\r\n    portfolioHistory: BacktestPortfolio[],\r\n    trades: BacktestTrade[]\r\n  ): MonthlyReturn[] {\r\n    const monthlyReturns: MonthlyReturn[] = [];\r\n    const monthlyData = new Map<string, {\r\n      startEquity: number;\r\n      endEquity: number;\r\n      trades: BacktestTrade[];\r\n      maxDrawdown: number;\r\n    }>();\r\n    \r\n    // Group data by month\r\n    for (const portfolio of portfolioHistory) {\r\n      const monthKey = `${portfolio.timestamp.getFullYear()}-${portfolio.timestamp.getMonth()}`;\r\n      \r\n      if (!monthlyData.has(monthKey)) {\r\n        monthlyData.set(monthKey, {\r\n          startEquity: portfolio.equity,\r\n          endEquity: portfolio.equity,\r\n          trades: [],\r\n          maxDrawdown: 0,\r\n        });\r\n      } else {\r\n        const data = monthlyData.get(monthKey)!;\r\n        data.endEquity = portfolio.equity;\r\n        data.maxDrawdown = Math.max(data.maxDrawdown, portfolio.drawdownPercentage);\r\n      }\r\n    }\r\n    \r\n    // Group trades by month\r\n    for (const trade of trades) {\r\n      if (trade.exitTime) {\r\n        const monthKey = `${trade.exitTime.getFullYear()}-${trade.exitTime.getMonth()}`;\r\n        const data = monthlyData.get(monthKey);\r\n        if (data) {\r\n          data.trades.push(trade);\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Calculate monthly returns\r\n    for (const [monthKey, data] of monthlyData) {\r\n      const [year, month] = monthKey.split('-').map(Number);\r\n      const returnAmount = data.endEquity - data.startEquity;\r\n      const returnPercentage = data.startEquity > 0 ? (returnAmount / data.startEquity) * 100 : 0;\r\n      \r\n      const winningTrades = data.trades.filter(t => t.pnl && t.pnl > 0);\r\n      const winRate = data.trades.length > 0 ? (winningTrades.length / data.trades.length) * 100 : 0;\r\n      \r\n      monthlyReturns.push({\r\n        year,\r\n        month,\r\n        return: returnAmount,\r\n        returnPercentage,\r\n        trades: data.trades.length,\r\n        winRate,\r\n        maxDrawdown: data.maxDrawdown,\r\n      });\r\n    }\r\n    \r\n    return monthlyReturns.sort((a, b) => {\r\n      if (a.year !== b.year) return a.year - b.year;\r\n      return a.month - b.month;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Calculate returns array from portfolio history\r\n   */\r\n  private static calculateReturns(portfolioHistory: BacktestPortfolio[]): number[] {\r\n    const returns: number[] = [];\r\n    \r\n    for (let i = 1; i < portfolioHistory.length; i++) {\r\n      const prevEquity = portfolioHistory[i - 1].equity;\r\n      const currEquity = portfolioHistory[i].equity;\r\n      \r\n      if (prevEquity > 0) {\r\n        const returnRate = (currEquity - prevEquity) / prevEquity;\r\n        returns.push(returnRate);\r\n      }\r\n    }\r\n    \r\n    return returns;\r\n  }\r\n\r\n  /**\r\n   * Calculate Sharpe ratio\r\n   */\r\n  private static calculateSharpeRatio(returns: number[], riskFreeRate: number): number {\r\n    if (returns.length === 0) return 0;\r\n    \r\n    const avgReturn = returns.reduce((sum, r) => sum + r, 0) / returns.length;\r\n    const annualizedReturn = avgReturn * TRADING_DAYS_PER_YEAR;\r\n    const volatility = this.calculateVolatility(returns) * Math.sqrt(TRADING_DAYS_PER_YEAR);\r\n    \r\n    return volatility > 0 ? (annualizedReturn - riskFreeRate) / volatility : 0;\r\n  }\r\n\r\n  /**\r\n   * Calculate Sortino ratio\r\n   */\r\n  private static calculateSortinoRatio(returns: number[], riskFreeRate: number): number {\r\n    if (returns.length === 0) return 0;\r\n    \r\n    const avgReturn = returns.reduce((sum, r) => sum + r, 0) / returns.length;\r\n    const annualizedReturn = avgReturn * TRADING_DAYS_PER_YEAR;\r\n    const downsideDeviation = this.calculateDownsideDeviation(returns, riskFreeRate / TRADING_DAYS_PER_YEAR);\r\n    const annualizedDownsideDeviation = downsideDeviation * Math.sqrt(TRADING_DAYS_PER_YEAR);\r\n    \r\n    return annualizedDownsideDeviation > 0 ? (annualizedReturn - riskFreeRate) / annualizedDownsideDeviation : 0;\r\n  }\r\n\r\n  /**\r\n   * Calculate volatility (standard deviation)\r\n   */\r\n  private static calculateVolatility(returns: number[]): number {\r\n    if (returns.length <= 1) return 0;\r\n    \r\n    const avgReturn = returns.reduce((sum, r) => sum + r, 0) / returns.length;\r\n    const variance = returns.reduce((sum, r) => sum + Math.pow(r - avgReturn, 2), 0) / (returns.length - 1);\r\n    \r\n    return Math.sqrt(variance);\r\n  }\r\n\r\n  /**\r\n   * Calculate downside deviation\r\n   */\r\n  private static calculateDownsideDeviation(returns: number[], targetReturn: number): number {\r\n    const downsideReturns = returns.filter(r => r < targetReturn);\r\n    \r\n    if (downsideReturns.length === 0) return 0;\r\n    \r\n    const downsideVariance = downsideReturns.reduce((sum, r) => sum + Math.pow(r - targetReturn, 2), 0) / downsideReturns.length;\r\n    \r\n    return Math.sqrt(downsideVariance);\r\n  }\r\n\r\n  /**\r\n   * Calculate Value at Risk (VaR)\r\n   */\r\n  private static calculateVaR(returns: number[], confidence: number): number {\r\n    if (returns.length === 0) return 0;\r\n    \r\n    const sortedReturns = [...returns].sort((a, b) => a - b);\r\n    const index = Math.floor((1 - confidence) * sortedReturns.length);\r\n    \r\n    return sortedReturns[index] || 0;\r\n  }\r\n\r\n  /**\r\n   * Calculate Conditional Value at Risk (CVaR)\r\n   */\r\n  private static calculateCVaR(returns: number[], confidence: number): number {\r\n    if (returns.length === 0) return 0;\r\n    \r\n    const sortedReturns = [...returns].sort((a, b) => a - b);\r\n    const cutoffIndex = Math.floor((1 - confidence) * sortedReturns.length);\r\n    const tailReturns = sortedReturns.slice(0, cutoffIndex + 1);\r\n    \r\n    if (tailReturns.length === 0) return 0;\r\n    \r\n    return tailReturns.reduce((sum, r) => sum + r, 0) / tailReturns.length;\r\n  }\r\n\r\n  /**\r\n   * Calculate Beta (correlation with benchmark)\r\n   */\r\n  private static calculateBeta(returns: number[], benchmarkReturns: number[]): number {\r\n    if (returns.length !== benchmarkReturns.length || returns.length === 0) return 0;\r\n    \r\n    const avgReturn = returns.reduce((sum, r) => sum + r, 0) / returns.length;\r\n    const avgBenchmark = benchmarkReturns.reduce((sum, r) => sum + r, 0) / benchmarkReturns.length;\r\n    \r\n    let covariance = 0;\r\n    let benchmarkVariance = 0;\r\n    \r\n    for (let i = 0; i < returns.length; i++) {\r\n      const returnDiff = returns[i] - avgReturn;\r\n      const benchmarkDiff = benchmarkReturns[i] - avgBenchmark;\r\n      \r\n      covariance += returnDiff * benchmarkDiff;\r\n      benchmarkVariance += benchmarkDiff * benchmarkDiff;\r\n    }\r\n    \r\n    covariance /= returns.length - 1;\r\n    benchmarkVariance /= returns.length - 1;\r\n    \r\n    return benchmarkVariance > 0 ? covariance / benchmarkVariance : 0;\r\n  }\r\n\r\n  /**\r\n   * Calculate Alpha (excess return over benchmark)\r\n   */\r\n  private static calculateAlpha(\r\n    returns: number[], \r\n    benchmarkReturns: number[], \r\n    riskFreeRate: number, \r\n    beta: number\r\n  ): number {\r\n    if (returns.length === 0) return 0;\r\n    \r\n    const avgReturn = returns.reduce((sum, r) => sum + r, 0) / returns.length;\r\n    const avgBenchmark = benchmarkReturns.reduce((sum, r) => sum + r, 0) / benchmarkReturns.length;\r\n    \r\n    return avgReturn - (riskFreeRate + beta * (avgBenchmark - riskFreeRate));\r\n  }\r\n\r\n  /**\r\n   * Calculate Information Ratio\r\n   */\r\n  private static calculateInformationRatio(returns: number[], benchmarkReturns: number[]): number {\r\n    if (returns.length !== benchmarkReturns.length || returns.length === 0) return 0;\r\n    \r\n    const excessReturns = returns.map((r, i) => r - benchmarkReturns[i]);\r\n    const avgExcessReturn = excessReturns.reduce((sum, r) => sum + r, 0) / excessReturns.length;\r\n    const trackingError = this.calculateVolatility(excessReturns);\r\n    \r\n    return trackingError > 0 ? avgExcessReturn / trackingError : 0;\r\n  }\r\n\r\n  /**\r\n   * Calculate profit factor\r\n   */\r\n  private static calculateProfitFactor(trades: BacktestTrade[]): number {\r\n    const closedTrades = trades.filter(t => t.status === 'CLOSED' && t.pnl !== undefined);\r\n    \r\n    const grossProfit = closedTrades\r\n      .filter(t => t.pnl! > 0)\r\n      .reduce((sum, t) => sum + t.pnl!, 0);\r\n    \r\n    const grossLoss = Math.abs(closedTrades\r\n      .filter(t => t.pnl! < 0)\r\n      .reduce((sum, t) => sum + t.pnl!, 0));\r\n    \r\n    return grossLoss > 0 ? grossProfit / grossLoss : grossProfit > 0 ? Infinity : 0;\r\n  }\r\n\r\n  /**\r\n   * Calculate payoff ratio (average win / average loss)\r\n   */\r\n  private static calculatePayoffRatio(trades: BacktestTrade[]): number {\r\n    const closedTrades = trades.filter(t => t.status === 'CLOSED' && t.pnl !== undefined);\r\n    const winningTrades = closedTrades.filter(t => t.pnl! > 0);\r\n    const losingTrades = closedTrades.filter(t => t.pnl! < 0);\r\n    \r\n    const averageWin = winningTrades.length > 0 \r\n      ? winningTrades.reduce((sum, t) => sum + t.pnl!, 0) / winningTrades.length \r\n      : 0;\r\n    \r\n    const averageLoss = losingTrades.length > 0 \r\n      ? Math.abs(losingTrades.reduce((sum, t) => sum + t.pnl!, 0) / losingTrades.length)\r\n      : 0;\r\n    \r\n    return averageLoss > 0 ? averageWin / averageLoss : averageWin > 0 ? Infinity : 0;\r\n  }\r\n\r\n  /**\r\n   * Calculate expected value per trade\r\n   */\r\n  private static calculateExpectedValue(trades: BacktestTrade[]): number {\r\n    const closedTrades = trades.filter(t => t.status === 'CLOSED' && t.pnl !== undefined);\r\n    \r\n    if (closedTrades.length === 0) return 0;\r\n    \r\n    return closedTrades.reduce((sum, t) => sum + t.pnl!, 0) / closedTrades.length;\r\n  }\r\n\r\n  /**\r\n   * Calculate average drawdown\r\n   */\r\n  private static calculateAverageDrawdown(portfolioHistory: BacktestPortfolio[]): number {\r\n    const drawdowns = portfolioHistory.map(p => p.drawdownPercentage).filter(d => d > 0);\r\n    \r\n    if (drawdowns.length === 0) return 0;\r\n    \r\n    return drawdowns.reduce((sum, d) => sum + d, 0) / drawdowns.length;\r\n  }\r\n\r\n  /**\r\n   * Calculate consecutive wins and losses\r\n   */\r\n  private static calculateConsecutiveWinsLosses(trades: BacktestTrade[]): {\r\n    maxConsecutiveWins: number;\r\n    maxConsecutiveLosses: number;\r\n  } {\r\n    let maxConsecutiveWins = 0;\r\n    let maxConsecutiveLosses = 0;\r\n    let currentWins = 0;\r\n    let currentLosses = 0;\r\n    \r\n    for (const trade of trades) {\r\n      if (trade.pnl && trade.pnl > 0) {\r\n        currentWins++;\r\n        currentLosses = 0;\r\n        maxConsecutiveWins = Math.max(maxConsecutiveWins, currentWins);\r\n      } else if (trade.pnl && trade.pnl < 0) {\r\n        currentLosses++;\r\n        currentWins = 0;\r\n        maxConsecutiveLosses = Math.max(maxConsecutiveLosses, currentLosses);\r\n      }\r\n    }\r\n    \r\n    return { maxConsecutiveWins, maxConsecutiveLosses };\r\n  }\r\n}\r\n"],"version":3}