f78f920172598a88b7eb27de6bc61587
"use strict";

/* istanbul ignore next */
function cov_ynqe030dn() {
  var path = "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\tunnel-performance-analytics.ts";
  var hash = "8f510a7d8ce690ade3315f9ecb2f529519dd608f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\tunnel-performance-analytics.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 65
        }
      },
      "2": {
        start: {
          line: 4,
          column: 17
        },
        end: {
          line: 4,
          column: 34
        }
      },
      "3": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 17,
          column: 57
        }
      },
      "4": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 10,
          column: 38
        }
      },
      "5": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 11,
          column: 44
        }
      },
      "6": {
        start: {
          line: 12,
          column: 4
        },
        end: {
          line: 12,
          column: 46
        }
      },
      "7": {
        start: {
          line: 13,
          column: 4
        },
        end: {
          line: 13,
          column: 54
        }
      },
      "8": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 14,
          column: 36
        }
      },
      "9": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 15,
          column: 44
        }
      },
      "10": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 16,
          column: 66
        }
      },
      "11": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 16
        }
      },
      "12": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 35,
          column: 29
        }
      },
      "13": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 36,
          column: 43
        }
      },
      "14": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 43
        }
      },
      "15": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 38,
          column: 41
        }
      },
      "16": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 41
        }
      },
      "17": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 45
        }
      },
      "18": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 41,
          column: 35
        }
      },
      "19": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 42,
          column: 34
        }
      },
      "20": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 59,
          column: 10
        }
      },
      "21": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 61,
          column: 36
        }
      },
      "22": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 62,
          column: 35
        }
      },
      "23": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 63,
          column: 82
        }
      },
      "24": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 72,
          column: 9
        }
      },
      "25": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 79
        }
      },
      "26": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 71,
          column: 19
        }
      },
      "27": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 73,
          column: 33
        }
      },
      "28": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 74,
          column: 65
        }
      },
      "29": {
        start: {
          line: 76,
          column: 28
        },
        end: {
          line: 76,
          column: 66
        }
      },
      "30": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 79,
          column: 9
        }
      },
      "31": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 78,
          column: 61
        }
      },
      "32": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 83,
          column: 9
        }
      },
      "33": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 82,
          column: 38
        }
      },
      "34": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 84,
          column: 39
        }
      },
      "35": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 93,
          column: 9
        }
      },
      "36": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 75
        }
      },
      "37": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 92,
          column: 19
        }
      },
      "38": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 94,
          column: 34
        }
      },
      "39": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 95,
          column: 65
        }
      },
      "40": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 100,
          column: 9
        }
      },
      "41": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 98,
          column: 36
        }
      },
      "42": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 99,
          column: 58
        }
      },
      "43": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 105,
          column: 9
        }
      },
      "44": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 103,
          column: 47
        }
      },
      "45": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 104,
          column: 39
        }
      },
      "46": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 106,
          column: 39
        }
      },
      "47": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 117,
          column: 9
        }
      },
      "48": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 115,
          column: 89
        }
      },
      "49": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 116,
          column: 19
        }
      },
      "50": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 118,
          column: 97
        }
      },
      "51": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 120,
          column: 51
        }
      },
      "52": {
        start: {
          line: 122,
          column: 25
        },
        end: {
          line: 129,
          column: 42
        }
      },
      "53": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 128,
          column: 13
        }
      },
      "54": {
        start: {
          line: 124,
          column: 16
        },
        end: {
          line: 124,
          column: 64
        }
      },
      "55": {
        start: {
          line: 127,
          column: 16
        },
        end: {
          line: 127,
          column: 110
        }
      },
      "56": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 130,
          column: 61
        }
      },
      "57": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 132,
          column: 74
        }
      },
      "58": {
        start: {
          line: 132,
          column: 25
        },
        end: {
          line: 132,
          column: 66
        }
      },
      "59": {
        start: {
          line: 140,
          column: 25
        },
        end: {
          line: 140,
          column: 67
        }
      },
      "60": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 145,
          column: 9
        }
      },
      "61": {
        start: {
          line: 142,
          column: 12
        },
        end: {
          line: 142,
          column: 36
        }
      },
      "62": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 143,
          column: 58
        }
      },
      "63": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 144,
          column: 100
        }
      },
      "64": {
        start: {
          line: 156,
          column: 19
        },
        end: {
          line: 156,
          column: 63
        }
      },
      "65": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 160,
          column: 9
        }
      },
      "66": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 159,
          column: 73
        }
      },
      "67": {
        start: {
          line: 159,
          column: 40
        },
        end: {
          line: 159,
          column: 71
        }
      },
      "68": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 164,
          column: 9
        }
      },
      "69": {
        start: {
          line: 163,
          column: 12
        },
        end: {
          line: 163,
          column: 112
        }
      },
      "70": {
        start: {
          line: 163,
          column: 40
        },
        end: {
          line: 163,
          column: 110
        }
      },
      "71": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 165,
          column: 25
        }
      },
      "72": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 178,
          column: 9
        }
      },
      "73": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 177,
          column: 24
        }
      },
      "74": {
        start: {
          line: 179,
          column: 20
        },
        end: {
          line: 179,
          column: 30
        }
      },
      "75": {
        start: {
          line: 180,
          column: 33
        },
        end: {
          line: 183,
          column: 9
        }
      },
      "76": {
        start: {
          line: 184,
          column: 22
        },
        end: {
          line: 184,
          column: 51
        }
      },
      "77": {
        start: {
          line: 185,
          column: 21
        },
        end: {
          line: 185,
          column: 77
        }
      },
      "78": {
        start: {
          line: 186,
          column: 8
        },
        end: {
          line: 188,
          column: 9
        }
      },
      "79": {
        start: {
          line: 187,
          column: 12
        },
        end: {
          line: 187,
          column: 24
        }
      },
      "80": {
        start: {
          line: 190,
          column: 23
        },
        end: {
          line: 190,
          column: 53
        }
      },
      "81": {
        start: {
          line: 190,
          column: 41
        },
        end: {
          line: 190,
          column: 52
        }
      },
      "82": {
        start: {
          line: 191,
          column: 27
        },
        end: {
          line: 191,
          column: 71
        }
      },
      "83": {
        start: {
          line: 191,
          column: 45
        },
        end: {
          line: 191,
          column: 70
        }
      },
      "84": {
        start: {
          line: 192,
          column: 22
        },
        end: {
          line: 192,
          column: 61
        }
      },
      "85": {
        start: {
          line: 193,
          column: 22
        },
        end: {
          line: 193,
          column: 54
        }
      },
      "86": {
        start: {
          line: 194,
          column: 8
        },
        end: {
          line: 206,
          column: 10
        }
      },
      "87": {
        start: {
          line: 216,
          column: 20
        },
        end: {
          line: 216,
          column: 30
        }
      },
      "88": {
        start: {
          line: 217,
          column: 33
        },
        end: {
          line: 220,
          column: 9
        }
      },
      "89": {
        start: {
          line: 221,
          column: 22
        },
        end: {
          line: 221,
          column: 51
        }
      },
      "90": {
        start: {
          line: 222,
          column: 23
        },
        end: {
          line: 233,
          column: 9
        }
      },
      "91": {
        start: {
          line: 234,
          column: 25
        },
        end: {
          line: 234,
          column: 26
        }
      },
      "92": {
        start: {
          line: 235,
          column: 26
        },
        end: {
          line: 235,
          column: 27
        }
      },
      "93": {
        start: {
          line: 237,
          column: 8
        },
        end: {
          line: 265,
          column: 9
        }
      },
      "94": {
        start: {
          line: 238,
          column: 25
        },
        end: {
          line: 238,
          column: 81
        }
      },
      "95": {
        start: {
          line: 239,
          column: 12
        },
        end: {
          line: 240,
          column: 25
        }
      },
      "96": {
        start: {
          line: 240,
          column: 16
        },
        end: {
          line: 240,
          column: 25
        }
      },
      "97": {
        start: {
          line: 241,
          column: 26
        },
        end: {
          line: 241,
          column: 76
        }
      },
      "98": {
        start: {
          line: 242,
          column: 33
        },
        end: {
          line: 242,
          column: 60
        }
      },
      "99": {
        start: {
          line: 243,
          column: 33
        },
        end: {
          line: 243,
          column: 96
        }
      },
      "100": {
        start: {
          line: 243,
          column: 61
        },
        end: {
          line: 243,
          column: 78
        }
      },
      "101": {
        start: {
          line: 244,
          column: 30
        },
        end: {
          line: 244,
          column: 79
        }
      },
      "102": {
        start: {
          line: 245,
          column: 36
        },
        end: {
          line: 245,
          column: 97
        }
      },
      "103": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 252,
          column: 14
        }
      },
      "104": {
        start: {
          line: 254,
          column: 32
        },
        end: {
          line: 254,
          column: 83
        }
      },
      "105": {
        start: {
          line: 255,
          column: 12
        },
        end: {
          line: 255,
          column: 38
        }
      },
      "106": {
        start: {
          line: 256,
          column: 12
        },
        end: {
          line: 256,
          column: 26
        }
      },
      "107": {
        start: {
          line: 258,
          column: 12
        },
        end: {
          line: 263,
          column: 13
        }
      },
      "108": {
        start: {
          line: 259,
          column: 16
        },
        end: {
          line: 259,
          column: 91
        }
      },
      "109": {
        start: {
          line: 262,
          column: 16
        },
        end: {
          line: 262,
          column: 92
        }
      },
      "110": {
        start: {
          line: 264,
          column: 12
        },
        end: {
          line: 264,
          column: 68
        }
      },
      "111": {
        start: {
          line: 267,
          column: 8
        },
        end: {
          line: 267,
          column: 77
        }
      },
      "112": {
        start: {
          line: 268,
          column: 8
        },
        end: {
          line: 271,
          column: 11
        }
      },
      "113": {
        start: {
          line: 272,
          column: 8
        },
        end: {
          line: 272,
          column: 45
        }
      },
      "114": {
        start: {
          line: 273,
          column: 8
        },
        end: {
          line: 273,
          column: 22
        }
      },
      "115": {
        start: {
          line: 281,
          column: 8
        },
        end: {
          line: 281,
          column: 40
        }
      },
      "116": {
        start: {
          line: 290,
          column: 8
        },
        end: {
          line: 290,
          column: 51
        }
      },
      "117": {
        start: {
          line: 291,
          column: 8
        },
        end: {
          line: 291,
          column: 87
        }
      },
      "118": {
        start: {
          line: 292,
          column: 8
        },
        end: {
          line: 292,
          column: 61
        }
      },
      "119": {
        start: {
          line: 299,
          column: 8
        },
        end: {
          line: 303,
          column: 11
        }
      },
      "120": {
        start: {
          line: 300,
          column: 12
        },
        end: {
          line: 302,
          column: 13
        }
      },
      "121": {
        start: {
          line: 301,
          column: 16
        },
        end: {
          line: 301,
          column: 65
        }
      },
      "122": {
        start: {
          line: 305,
          column: 8
        },
        end: {
          line: 307,
          column: 11
        }
      },
      "123": {
        start: {
          line: 306,
          column: 12
        },
        end: {
          line: 306,
          column: 60
        }
      },
      "124": {
        start: {
          line: 313,
          column: 8
        },
        end: {
          line: 368,
          column: 11
        }
      },
      "125": {
        start: {
          line: 376,
          column: 27
        },
        end: {
          line: 376,
          column: 73
        }
      },
      "126": {
        start: {
          line: 377,
          column: 8
        },
        end: {
          line: 378,
          column: 19
        }
      },
      "127": {
        start: {
          line: 378,
          column: 12
        },
        end: {
          line: 378,
          column: 19
        }
      },
      "128": {
        start: {
          line: 379,
          column: 26
        },
        end: {
          line: 379,
          column: 36
        }
      },
      "129": {
        start: {
          line: 380,
          column: 27
        },
        end: {
          line: 380,
          column: 29
        }
      },
      "130": {
        start: {
          line: 381,
          column: 8
        },
        end: {
          line: 446,
          column: 9
        }
      },
      "131": {
        start: {
          line: 383,
          column: 34
        },
        end: {
          line: 383,
          column: 83
        }
      },
      "132": {
        start: {
          line: 384,
          column: 12
        },
        end: {
          line: 404,
          column: 13
        }
      },
      "133": {
        start: {
          line: 385,
          column: 16
        },
        end: {
          line: 403,
          column: 19
        }
      },
      "134": {
        start: {
          line: 406,
          column: 31
        },
        end: {
          line: 406,
          column: 76
        }
      },
      "135": {
        start: {
          line: 407,
          column: 12
        },
        end: {
          line: 433,
          column: 13
        }
      },
      "136": {
        start: {
          line: 408,
          column: 16
        },
        end: {
          line: 420,
          column: 19
        }
      },
      "137": {
        start: {
          line: 422,
          column: 38
        },
        end: {
          line: 422,
          column: 67
        }
      },
      "138": {
        start: {
          line: 423,
          column: 34
        },
        end: {
          line: 425,
          column: 23
        }
      },
      "139": {
        start: {
          line: 426,
          column: 16
        },
        end: {
          line: 432,
          column: 19
        }
      },
      "140": {
        start: {
          line: 435,
          column: 35
        },
        end: {
          line: 435,
          column: 79
        }
      },
      "141": {
        start: {
          line: 436,
          column: 12
        },
        end: {
          line: 436,
          column: 47
        }
      },
      "142": {
        start: {
          line: 438,
          column: 12
        },
        end: {
          line: 438,
          column: 46
        }
      },
      "143": {
        start: {
          line: 440,
          column: 12
        },
        end: {
          line: 442,
          column: 13
        }
      },
      "144": {
        start: {
          line: 441,
          column: 16
        },
        end: {
          line: 441,
          column: 56
        }
      },
      "145": {
        start: {
          line: 445,
          column: 12
        },
        end: {
          line: 445,
          column: 106
        }
      },
      "146": {
        start: {
          line: 454,
          column: 21
        },
        end: {
          line: 454,
          column: 59
        }
      },
      "147": {
        start: {
          line: 455,
          column: 8
        },
        end: {
          line: 456,
          column: 19
        }
      },
      "148": {
        start: {
          line: 456,
          column: 12
        },
        end: {
          line: 456,
          column: 19
        }
      },
      "149": {
        start: {
          line: 457,
          column: 27
        },
        end: {
          line: 457,
          column: 67
        }
      },
      "150": {
        start: {
          line: 458,
          column: 29
        },
        end: {
          line: 458,
          column: 89
        }
      },
      "151": {
        start: {
          line: 458,
          column: 50
        },
        end: {
          line: 458,
          column: 88
        }
      },
      "152": {
        start: {
          line: 459,
          column: 8
        },
        end: {
          line: 459,
          column: 61
        }
      },
      "153": {
        start: {
          line: 467,
          column: 8
        },
        end: {
          line: 517,
          column: 9
        }
      },
      "154": {
        start: {
          line: 468,
          column: 30
        },
        end: {
          line: 468,
          column: 79
        }
      },
      "155": {
        start: {
          line: 469,
          column: 12
        },
        end: {
          line: 470,
          column: 25
        }
      },
      "156": {
        start: {
          line: 470,
          column: 16
        },
        end: {
          line: 470,
          column: 25
        }
      },
      "157": {
        start: {
          line: 471,
          column: 33
        },
        end: {
          line: 471,
          column: 38
        }
      },
      "158": {
        start: {
          line: 472,
          column: 31
        },
        end: {
          line: 472,
          column: 33
        }
      },
      "159": {
        start: {
          line: 473,
          column: 12
        },
        end: {
          line: 500,
          column: 13
        }
      },
      "160": {
        start: {
          line: 476,
          column: 20
        },
        end: {
          line: 479,
          column: 21
        }
      },
      "161": {
        start: {
          line: 477,
          column: 24
        },
        end: {
          line: 477,
          column: 46
        }
      },
      "162": {
        start: {
          line: 478,
          column: 24
        },
        end: {
          line: 478,
          column: 121
        }
      },
      "163": {
        start: {
          line: 480,
          column: 20
        },
        end: {
          line: 480,
          column: 26
        }
      },
      "164": {
        start: {
          line: 483,
          column: 20
        },
        end: {
          line: 486,
          column: 21
        }
      },
      "165": {
        start: {
          line: 484,
          column: 24
        },
        end: {
          line: 484,
          column: 46
        }
      },
      "166": {
        start: {
          line: 485,
          column: 24
        },
        end: {
          line: 485,
          column: 121
        }
      },
      "167": {
        start: {
          line: 487,
          column: 20
        },
        end: {
          line: 487,
          column: 26
        }
      },
      "168": {
        start: {
          line: 489,
          column: 20
        },
        end: {
          line: 492,
          column: 21
        }
      },
      "169": {
        start: {
          line: 490,
          column: 24
        },
        end: {
          line: 490,
          column: 46
        }
      },
      "170": {
        start: {
          line: 491,
          column: 24
        },
        end: {
          line: 491,
          column: 120
        }
      },
      "171": {
        start: {
          line: 493,
          column: 20
        },
        end: {
          line: 493,
          column: 26
        }
      },
      "172": {
        start: {
          line: 495,
          column: 20
        },
        end: {
          line: 498,
          column: 21
        }
      },
      "173": {
        start: {
          line: 496,
          column: 24
        },
        end: {
          line: 496,
          column: 46
        }
      },
      "174": {
        start: {
          line: 497,
          column: 24
        },
        end: {
          line: 497,
          column: 120
        }
      },
      "175": {
        start: {
          line: 499,
          column: 20
        },
        end: {
          line: 499,
          column: 26
        }
      },
      "176": {
        start: {
          line: 501,
          column: 12
        },
        end: {
          line: 516,
          column: 13
        }
      },
      "177": {
        start: {
          line: 502,
          column: 16
        },
        end: {
          line: 507,
          column: 19
        }
      },
      "178": {
        start: {
          line: 508,
          column: 16
        },
        end: {
          line: 515,
          column: 19
        }
      },
      "179": {
        start: {
          line: 527,
          column: 8
        },
        end: {
          line: 529,
          column: 9
        }
      },
      "180": {
        start: {
          line: 528,
          column: 12
        },
        end: {
          line: 528,
          column: 79
        }
      },
      "181": {
        start: {
          line: 531,
          column: 18
        },
        end: {
          line: 531,
          column: 31
        }
      },
      "182": {
        start: {
          line: 532,
          column: 21
        },
        end: {
          line: 532,
          column: 62
        }
      },
      "183": {
        start: {
          line: 532,
          column: 51
        },
        end: {
          line: 532,
          column: 58
        }
      },
      "184": {
        start: {
          line: 533,
          column: 21
        },
        end: {
          line: 533,
          column: 58
        }
      },
      "185": {
        start: {
          line: 533,
          column: 47
        },
        end: {
          line: 533,
          column: 54
        }
      },
      "186": {
        start: {
          line: 534,
          column: 22
        },
        end: {
          line: 534,
          column: 78
        }
      },
      "187": {
        start: {
          line: 534,
          column: 55
        },
        end: {
          line: 534,
          column: 74
        }
      },
      "188": {
        start: {
          line: 535,
          column: 22
        },
        end: {
          line: 535,
          column: 67
        }
      },
      "189": {
        start: {
          line: 535,
          column: 52
        },
        end: {
          line: 535,
          column: 63
        }
      },
      "190": {
        start: {
          line: 536,
          column: 22
        },
        end: {
          line: 536,
          column: 75
        }
      },
      "191": {
        start: {
          line: 537,
          column: 26
        },
        end: {
          line: 537,
          column: 51
        }
      },
      "192": {
        start: {
          line: 539,
          column: 22
        },
        end: {
          line: 539,
          column: 30
        }
      },
      "193": {
        start: {
          line: 540,
          column: 22
        },
        end: {
          line: 543,
          column: 13
        }
      },
      "194": {
        start: {
          line: 541,
          column: 30
        },
        end: {
          line: 541,
          column: 63
        }
      },
      "195": {
        start: {
          line: 542,
          column: 12
        },
        end: {
          line: 542,
          column: 52
        }
      },
      "196": {
        start: {
          line: 544,
          column: 22
        },
        end: {
          line: 544,
          column: 80
        }
      },
      "197": {
        start: {
          line: 544,
          column: 48
        },
        end: {
          line: 544,
          column: 76
        }
      },
      "198": {
        start: {
          line: 545,
          column: 25
        },
        end: {
          line: 545,
          column: 44
        }
      },
      "199": {
        start: {
          line: 547,
          column: 27
        },
        end: {
          line: 547,
          column: 36
        }
      },
      "200": {
        start: {
          line: 548,
          column: 26
        },
        end: {
          line: 548,
          column: 51
        }
      },
      "201": {
        start: {
          line: 549,
          column: 33
        },
        end: {
          line: 549,
          column: 101
        }
      },
      "202": {
        start: {
          line: 551,
          column: 8
        },
        end: {
          line: 559,
          column: 9
        }
      },
      "203": {
        start: {
          line: 552,
          column: 12
        },
        end: {
          line: 552,
          column: 33
        }
      },
      "204": {
        start: {
          line: 554,
          column: 13
        },
        end: {
          line: 559,
          column: 9
        }
      },
      "205": {
        start: {
          line: 555,
          column: 12
        },
        end: {
          line: 555,
          column: 36
        }
      },
      "206": {
        start: {
          line: 558,
          column: 12
        },
        end: {
          line: 558,
          column: 36
        }
      },
      "207": {
        start: {
          line: 560,
          column: 8
        },
        end: {
          line: 564,
          column: 10
        }
      },
      "208": {
        start: {
          line: 573,
          column: 8
        },
        end: {
          line: 575,
          column: 9
        }
      },
      "209": {
        start: {
          line: 574,
          column: 12
        },
        end: {
          line: 574,
          column: 69
        }
      },
      "210": {
        start: {
          line: 576,
          column: 21
        },
        end: {
          line: 576,
          column: 74
        }
      },
      "211": {
        start: {
          line: 576,
          column: 47
        },
        end: {
          line: 576,
          column: 54
        }
      },
      "212": {
        start: {
          line: 577,
          column: 20
        },
        end: {
          line: 577,
          column: 39
        }
      },
      "213": {
        start: {
          line: 578,
          column: 20
        },
        end: {
          line: 578,
          column: 39
        }
      },
      "214": {
        start: {
          line: 579,
          column: 25
        },
        end: {
          line: 579,
          column: 98
        }
      },
      "215": {
        start: {
          line: 579,
          column: 51
        },
        end: {
          line: 579,
          column: 78
        }
      },
      "216": {
        start: {
          line: 580,
          column: 34
        },
        end: {
          line: 580,
          column: 53
        }
      },
      "217": {
        start: {
          line: 581,
          column: 8
        },
        end: {
          line: 581,
          column: 53
        }
      },
      "218": {
        start: {
          line: 591,
          column: 26
        },
        end: {
          line: 591,
          column: 57
        }
      },
      "219": {
        start: {
          line: 592,
          column: 8
        },
        end: {
          line: 593,
          column: 32
        }
      },
      "220": {
        start: {
          line: 593,
          column: 12
        },
        end: {
          line: 593,
          column: 32
        }
      },
      "221": {
        start: {
          line: 595,
          column: 30
        },
        end: {
          line: 595,
          column: 125
        }
      },
      "222": {
        start: {
          line: 596,
          column: 8
        },
        end: {
          line: 614,
          column: 9
        }
      },
      "223": {
        start: {
          line: 597,
          column: 12
        },
        end: {
          line: 598,
          column: 35
        }
      },
      "224": {
        start: {
          line: 598,
          column: 16
        },
        end: {
          line: 598,
          column: 35
        }
      },
      "225": {
        start: {
          line: 599,
          column: 12
        },
        end: {
          line: 600,
          column: 30
        }
      },
      "226": {
        start: {
          line: 600,
          column: 16
        },
        end: {
          line: 600,
          column: 30
        }
      },
      "227": {
        start: {
          line: 601,
          column: 12
        },
        end: {
          line: 602,
          column: 36
        }
      },
      "228": {
        start: {
          line: 602,
          column: 16
        },
        end: {
          line: 602,
          column: 36
        }
      },
      "229": {
        start: {
          line: 603,
          column: 12
        },
        end: {
          line: 603,
          column: 26
        }
      },
      "230": {
        start: {
          line: 607,
          column: 12
        },
        end: {
          line: 608,
          column: 35
        }
      },
      "231": {
        start: {
          line: 608,
          column: 16
        },
        end: {
          line: 608,
          column: 35
        }
      },
      "232": {
        start: {
          line: 609,
          column: 12
        },
        end: {
          line: 610,
          column: 30
        }
      },
      "233": {
        start: {
          line: 610,
          column: 16
        },
        end: {
          line: 610,
          column: 30
        }
      },
      "234": {
        start: {
          line: 611,
          column: 12
        },
        end: {
          line: 612,
          column: 36
        }
      },
      "235": {
        start: {
          line: 612,
          column: 16
        },
        end: {
          line: 612,
          column: 36
        }
      },
      "236": {
        start: {
          line: 613,
          column: 12
        },
        end: {
          line: 613,
          column: 26
        }
      },
      "237": {
        start: {
          line: 624,
          column: 23
        },
        end: {
          line: 624,
          column: 65
        }
      },
      "238": {
        start: {
          line: 625,
          column: 8
        },
        end: {
          line: 631,
          column: 9
        }
      },
      "239": {
        start: {
          line: 626,
          column: 30
        },
        end: {
          line: 626,
          column: 41
        }
      },
      "240": {
        start: {
          line: 627,
          column: 25
        },
        end: {
          line: 627,
          column: 35
        }
      },
      "241": {
        start: {
          line: 628,
          column: 31
        },
        end: {
          line: 628,
          column: 41
        }
      },
      "242": {
        start: {
          line: 629,
          column: 25
        },
        end: {
          line: 629,
          column: 35
        }
      },
      "243": {
        start: {
          line: 630,
          column: 21
        },
        end: {
          line: 630,
          column: 31
        }
      },
      "244": {
        start: {
          line: 642,
          column: 32
        },
        end: {
          line: 642,
          column: 34
        }
      },
      "245": {
        start: {
          line: 643,
          column: 23
        },
        end: {
          line: 643,
          column: 65
        }
      },
      "246": {
        start: {
          line: 644,
          column: 8
        },
        end: {
          line: 665,
          column: 9
        }
      },
      "247": {
        start: {
          line: 645,
          column: 12
        },
        end: {
          line: 664,
          column: 13
        }
      },
      "248": {
        start: {
          line: 647,
          column: 20
        },
        end: {
          line: 647,
          column: 112
        }
      },
      "249": {
        start: {
          line: 648,
          column: 20
        },
        end: {
          line: 648,
          column: 26
        }
      },
      "250": {
        start: {
          line: 650,
          column: 20
        },
        end: {
          line: 650,
          column: 98
        }
      },
      "251": {
        start: {
          line: 651,
          column: 20
        },
        end: {
          line: 651,
          column: 26
        }
      },
      "252": {
        start: {
          line: 653,
          column: 20
        },
        end: {
          line: 653,
          column: 107
        }
      },
      "253": {
        start: {
          line: 654,
          column: 20
        },
        end: {
          line: 654,
          column: 26
        }
      },
      "254": {
        start: {
          line: 656,
          column: 20
        },
        end: {
          line: 656,
          column: 102
        }
      },
      "255": {
        start: {
          line: 657,
          column: 20
        },
        end: {
          line: 657,
          column: 26
        }
      },
      "256": {
        start: {
          line: 659,
          column: 20
        },
        end: {
          line: 659,
          column: 105
        }
      },
      "257": {
        start: {
          line: 660,
          column: 20
        },
        end: {
          line: 660,
          column: 26
        }
      },
      "258": {
        start: {
          line: 662,
          column: 20
        },
        end: {
          line: 662,
          column: 98
        }
      },
      "259": {
        start: {
          line: 663,
          column: 20
        },
        end: {
          line: 663,
          column: 26
        }
      },
      "260": {
        start: {
          line: 666,
          column: 8
        },
        end: {
          line: 668,
          column: 9
        }
      },
      "261": {
        start: {
          line: 667,
          column: 12
        },
        end: {
          line: 667,
          column: 109
        }
      },
      "262": {
        start: {
          line: 669,
          column: 8
        },
        end: {
          line: 669,
          column: 31
        }
      },
      "263": {
        start: {
          line: 675,
          column: 8
        },
        end: {
          line: 677,
          column: 9
        }
      },
      "264": {
        start: {
          line: 676,
          column: 12
        },
        end: {
          line: 676,
          column: 47
        }
      },
      "265": {
        start: {
          line: 678,
          column: 8
        },
        end: {
          line: 689,
          column: 39
        }
      },
      "266": {
        start: {
          line: 679,
          column: 32
        },
        end: {
          line: 679,
          column: 70
        }
      },
      "267": {
        start: {
          line: 680,
          column: 12
        },
        end: {
          line: 688,
          column: 13
        }
      },
      "268": {
        start: {
          line: 681,
          column: 16
        },
        end: {
          line: 687,
          column: 17
        }
      },
      "269": {
        start: {
          line: 682,
          column: 35
        },
        end: {
          line: 682,
          column: 69
        }
      },
      "270": {
        start: {
          line: 683,
          column: 20
        },
        end: {
          line: 683,
          column: 57
        }
      },
      "271": {
        start: {
          line: 686,
          column: 20
        },
        end: {
          line: 686,
          column: 116
        }
      },
      "272": {
        start: {
          line: 690,
          column: 8
        },
        end: {
          line: 690,
          column: 68
        }
      },
      "273": {
        start: {
          line: 696,
          column: 8
        },
        end: {
          line: 696,
          column: 30
        }
      },
      "274": {
        start: {
          line: 697,
          column: 8
        },
        end: {
          line: 697,
          column: 37
        }
      },
      "275": {
        start: {
          line: 698,
          column: 8
        },
        end: {
          line: 698,
          column: 75
        }
      },
      "276": {
        start: {
          line: 701,
          column: 0
        },
        end: {
          line: 701,
          column: 64
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 9,
            column: 1
          },
          end: {
            line: 9,
            column: 2
          }
        },
        loc: {
          start: {
            line: 9,
            column: 23
          },
          end: {
            line: 17,
            column: 1
          }
        },
        line: 9
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 33,
            column: 5
          }
        },
        loc: {
          start: {
            line: 33,
            column: 76
          },
          end: {
            line: 64,
            column: 5
          }
        },
        line: 33
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 68,
            column: 4
          },
          end: {
            line: 68,
            column: 5
          }
        },
        loc: {
          start: {
            line: 68,
            column: 22
          },
          end: {
            line: 85,
            column: 5
          }
        },
        line: 68
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 89,
            column: 4
          },
          end: {
            line: 89,
            column: 5
          }
        },
        loc: {
          start: {
            line: 89,
            column: 21
          },
          end: {
            line: 107,
            column: 5
          }
        },
        line: 89
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 113,
            column: 4
          },
          end: {
            line: 113,
            column: 5
          }
        },
        loc: {
          start: {
            line: 113,
            column: 47
          },
          end: {
            line: 133,
            column: 5
          }
        },
        line: 113
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 122,
            column: 37
          },
          end: {
            line: 122,
            column: 38
          }
        },
        loc: {
          start: {
            line: 122,
            column: 49
          },
          end: {
            line: 129,
            column: 9
          }
        },
        line: 122
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 132,
            column: 19
          },
          end: {
            line: 132,
            column: 20
          }
        },
        loc: {
          start: {
            line: 132,
            column: 25
          },
          end: {
            line: 132,
            column: 66
          }
        },
        line: 132
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 139,
            column: 4
          },
          end: {
            line: 139,
            column: 5
          }
        },
        loc: {
          start: {
            line: 139,
            column: 46
          },
          end: {
            line: 146,
            column: 5
          }
        },
        line: 139
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 155,
            column: 4
          },
          end: {
            line: 155,
            column: 5
          }
        },
        loc: {
          start: {
            line: 155,
            column: 60
          },
          end: {
            line: 166,
            column: 5
          }
        },
        line: 155
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 159,
            column: 31
          },
          end: {
            line: 159,
            column: 32
          }
        },
        loc: {
          start: {
            line: 159,
            column: 40
          },
          end: {
            line: 159,
            column: 71
          }
        },
        line: 159
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 163,
            column: 31
          },
          end: {
            line: 163,
            column: 32
          }
        },
        loc: {
          start: {
            line: 163,
            column: 40
          },
          end: {
            line: 163,
            column: 110
          }
        },
        line: 163
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 175,
            column: 4
          },
          end: {
            line: 175,
            column: 5
          }
        },
        loc: {
          start: {
            line: 175,
            column: 54
          },
          end: {
            line: 207,
            column: 5
          }
        },
        line: 175
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 190,
            column: 32
          },
          end: {
            line: 190,
            column: 33
          }
        },
        loc: {
          start: {
            line: 190,
            column: 41
          },
          end: {
            line: 190,
            column: 52
          }
        },
        line: 190
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 191,
            column: 36
          },
          end: {
            line: 191,
            column: 37
          }
        },
        loc: {
          start: {
            line: 191,
            column: 45
          },
          end: {
            line: 191,
            column: 70
          }
        },
        line: 191
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 215,
            column: 4
          },
          end: {
            line: 215,
            column: 5
          }
        },
        loc: {
          start: {
            line: 215,
            column: 44
          },
          end: {
            line: 274,
            column: 5
          }
        },
        line: 215
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 243,
            column: 45
          },
          end: {
            line: 243,
            column: 46
          }
        },
        loc: {
          start: {
            line: 243,
            column: 61
          },
          end: {
            line: 243,
            column: 78
          }
        },
        line: 243
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 280,
            column: 4
          },
          end: {
            line: 280,
            column: 5
          }
        },
        loc: {
          start: {
            line: 280,
            column: 20
          },
          end: {
            line: 282,
            column: 5
          }
        },
        line: 280
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 289,
            column: 4
          },
          end: {
            line: 289,
            column: 5
          }
        },
        loc: {
          start: {
            line: 289,
            column: 43
          },
          end: {
            line: 293,
            column: 5
          }
        },
        line: 289
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 297,
            column: 4
          },
          end: {
            line: 297,
            column: 5
          }
        },
        loc: {
          start: {
            line: 297,
            column: 26
          },
          end: {
            line: 308,
            column: 5
          }
        },
        line: 297
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 299,
            column: 49
          },
          end: {
            line: 299,
            column: 50
          }
        },
        loc: {
          start: {
            line: 299,
            column: 65
          },
          end: {
            line: 303,
            column: 9
          }
        },
        line: 299
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 305,
            column: 52
          },
          end: {
            line: 305,
            column: 53
          }
        },
        loc: {
          start: {
            line: 305,
            column: 68
          },
          end: {
            line: 307,
            column: 9
          }
        },
        line: 305
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 312,
            column: 4
          },
          end: {
            line: 312,
            column: 5
          }
        },
        loc: {
          start: {
            line: 312,
            column: 27
          },
          end: {
            line: 369,
            column: 5
          }
        },
        line: 312
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 375,
            column: 4
          },
          end: {
            line: 375,
            column: 5
          }
        },
        loc: {
          start: {
            line: 375,
            column: 47
          },
          end: {
            line: 447,
            column: 5
          }
        },
        line: 375
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 453,
            column: 4
          },
          end: {
            line: 453,
            column: 5
          }
        },
        loc: {
          start: {
            line: 453,
            column: 33
          },
          end: {
            line: 460,
            column: 5
          }
        },
        line: 453
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 458,
            column: 41
          },
          end: {
            line: 458,
            column: 42
          }
        },
        loc: {
          start: {
            line: 458,
            column: 50
          },
          end: {
            line: 458,
            column: 88
          }
        },
        line: 458
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 466,
            column: 4
          },
          end: {
            line: 466,
            column: 5
          }
        },
        loc: {
          start: {
            line: 466,
            column: 39
          },
          end: {
            line: 518,
            column: 5
          }
        },
        line: 466
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 526,
            column: 4
          },
          end: {
            line: 526,
            column: 5
          }
        },
        loc: {
          start: {
            line: 526,
            column: 39
          },
          end: {
            line: 565,
            column: 5
          }
        },
        line: 526
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 532,
            column: 39
          },
          end: {
            line: 532,
            column: 40
          }
        },
        loc: {
          start: {
            line: 532,
            column: 51
          },
          end: {
            line: 532,
            column: 58
          }
        },
        line: 532
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 533,
            column: 35
          },
          end: {
            line: 533,
            column: 36
          }
        },
        loc: {
          start: {
            line: 533,
            column: 47
          },
          end: {
            line: 533,
            column: 54
          }
        },
        line: 533
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 534,
            column: 40
          },
          end: {
            line: 534,
            column: 41
          }
        },
        loc: {
          start: {
            line: 534,
            column: 55
          },
          end: {
            line: 534,
            column: 74
          }
        },
        line: 534
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 535,
            column: 40
          },
          end: {
            line: 535,
            column: 41
          }
        },
        loc: {
          start: {
            line: 535,
            column: 52
          },
          end: {
            line: 535,
            column: 63
          }
        },
        line: 535
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 540,
            column: 36
          },
          end: {
            line: 540,
            column: 37
          }
        },
        loc: {
          start: {
            line: 540,
            column: 51
          },
          end: {
            line: 543,
            column: 9
          }
        },
        line: 540
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 544,
            column: 36
          },
          end: {
            line: 544,
            column: 37
          }
        },
        loc: {
          start: {
            line: 544,
            column: 48
          },
          end: {
            line: 544,
            column: 76
          }
        },
        line: 544
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 572,
            column: 4
          },
          end: {
            line: 572,
            column: 5
          }
        },
        loc: {
          start: {
            line: 572,
            column: 32
          },
          end: {
            line: 582,
            column: 5
          }
        },
        line: 572
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 576,
            column: 35
          },
          end: {
            line: 576,
            column: 36
          }
        },
        loc: {
          start: {
            line: 576,
            column: 47
          },
          end: {
            line: 576,
            column: 54
          }
        },
        line: 576
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 579,
            column: 39
          },
          end: {
            line: 579,
            column: 40
          }
        },
        loc: {
          start: {
            line: 579,
            column: 51
          },
          end: {
            line: 579,
            column: 78
          }
        },
        line: 579
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 590,
            column: 4
          },
          end: {
            line: 590,
            column: 5
          }
        },
        loc: {
          start: {
            line: 590,
            column: 42
          },
          end: {
            line: 615,
            column: 5
          }
        },
        line: 590
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 623,
            column: 4
          },
          end: {
            line: 623,
            column: 5
          }
        },
        loc: {
          start: {
            line: 623,
            column: 44
          },
          end: {
            line: 632,
            column: 5
          }
        },
        line: 623
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 641,
            column: 4
          },
          end: {
            line: 641,
            column: 5
          }
        },
        loc: {
          start: {
            line: 641,
            column: 54
          },
          end: {
            line: 670,
            column: 5
          }
        },
        line: 641
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 674,
            column: 4
          },
          end: {
            line: 674,
            column: 5
          }
        },
        loc: {
          start: {
            line: 674,
            column: 25
          },
          end: {
            line: 691,
            column: 5
          }
        },
        line: 674
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 678,
            column: 42
          },
          end: {
            line: 678,
            column: 43
          }
        },
        loc: {
          start: {
            line: 678,
            column: 48
          },
          end: {
            line: 689,
            column: 9
          }
        },
        line: 678
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 695,
            column: 4
          },
          end: {
            line: 695,
            column: 5
          }
        },
        loc: {
          start: {
            line: 695,
            column: 14
          },
          end: {
            line: 699,
            column: 5
          }
        },
        line: 695
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 17,
            column: 3
          },
          end: {
            line: 17,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 17,
            column: 3
          },
          end: {
            line: 17,
            column: 13
          }
        }, {
          start: {
            line: 17,
            column: 18
          },
          end: {
            line: 17,
            column: 54
          }
        }],
        line: 17
      },
      "1": {
        loc: {
          start: {
            line: 69,
            column: 8
          },
          end: {
            line: 72,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 69,
            column: 8
          },
          end: {
            line: 72,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 69
      },
      "2": {
        loc: {
          start: {
            line: 81,
            column: 8
          },
          end: {
            line: 83,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 81,
            column: 8
          },
          end: {
            line: 83,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 81
      },
      "3": {
        loc: {
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 93,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 93,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 90
      },
      "4": {
        loc: {
          start: {
            line: 102,
            column: 8
          },
          end: {
            line: 105,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 102,
            column: 8
          },
          end: {
            line: 105,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 102
      },
      "5": {
        loc: {
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 117,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 117,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 114
      },
      "6": {
        loc: {
          start: {
            line: 141,
            column: 8
          },
          end: {
            line: 145,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 141,
            column: 8
          },
          end: {
            line: 145,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 141
      },
      "7": {
        loc: {
          start: {
            line: 156,
            column: 19
          },
          end: {
            line: 156,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 156,
            column: 19
          },
          end: {
            line: 156,
            column: 57
          }
        }, {
          start: {
            line: 156,
            column: 61
          },
          end: {
            line: 156,
            column: 63
          }
        }],
        line: 156
      },
      "8": {
        loc: {
          start: {
            line: 158,
            column: 8
          },
          end: {
            line: 160,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 158,
            column: 8
          },
          end: {
            line: 160,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 158
      },
      "9": {
        loc: {
          start: {
            line: 162,
            column: 8
          },
          end: {
            line: 164,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 162,
            column: 8
          },
          end: {
            line: 164,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 162
      },
      "10": {
        loc: {
          start: {
            line: 163,
            column: 40
          },
          end: {
            line: 163,
            column: 110
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 163,
            column: 40
          },
          end: {
            line: 163,
            column: 74
          }
        }, {
          start: {
            line: 163,
            column: 78
          },
          end: {
            line: 163,
            column: 110
          }
        }],
        line: 163
      },
      "11": {
        loc: {
          start: {
            line: 176,
            column: 8
          },
          end: {
            line: 178,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 176,
            column: 8
          },
          end: {
            line: 178,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 176
      },
      "12": {
        loc: {
          start: {
            line: 184,
            column: 22
          },
          end: {
            line: 184,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 184,
            column: 22
          },
          end: {
            line: 184,
            column: 31
          }
        }, {
          start: {
            line: 184,
            column: 35
          },
          end: {
            line: 184,
            column: 51
          }
        }],
        line: 184
      },
      "13": {
        loc: {
          start: {
            line: 186,
            column: 8
          },
          end: {
            line: 188,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 186,
            column: 8
          },
          end: {
            line: 188,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 186
      },
      "14": {
        loc: {
          start: {
            line: 221,
            column: 22
          },
          end: {
            line: 221,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 221,
            column: 22
          },
          end: {
            line: 221,
            column: 31
          }
        }, {
          start: {
            line: 221,
            column: 35
          },
          end: {
            line: 221,
            column: 51
          }
        }],
        line: 221
      },
      "15": {
        loc: {
          start: {
            line: 239,
            column: 12
          },
          end: {
            line: 240,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 239,
            column: 12
          },
          end: {
            line: 240,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 239
      },
      "16": {
        loc: {
          start: {
            line: 258,
            column: 12
          },
          end: {
            line: 263,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 258,
            column: 12
          },
          end: {
            line: 263,
            column: 13
          }
        }, {
          start: {
            line: 261,
            column: 17
          },
          end: {
            line: 263,
            column: 13
          }
        }],
        line: 258
      },
      "17": {
        loc: {
          start: {
            line: 258,
            column: 16
          },
          end: {
            line: 258,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 258,
            column: 16
          },
          end: {
            line: 258,
            column: 41
          }
        }, {
          start: {
            line: 258,
            column: 45
          },
          end: {
            line: 258,
            column: 65
          }
        }],
        line: 258
      },
      "18": {
        loc: {
          start: {
            line: 267,
            column: 30
          },
          end: {
            line: 267,
            column: 76
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 267,
            column: 48
          },
          end: {
            line: 267,
            column: 72
          }
        }, {
          start: {
            line: 267,
            column: 75
          },
          end: {
            line: 267,
            column: 76
          }
        }],
        line: 267
      },
      "19": {
        loc: {
          start: {
            line: 300,
            column: 12
          },
          end: {
            line: 302,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 300,
            column: 12
          },
          end: {
            line: 302,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 300
      },
      "20": {
        loc: {
          start: {
            line: 377,
            column: 8
          },
          end: {
            line: 378,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 377,
            column: 8
          },
          end: {
            line: 378,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 377
      },
      "21": {
        loc: {
          start: {
            line: 384,
            column: 12
          },
          end: {
            line: 404,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 384,
            column: 12
          },
          end: {
            line: 404,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 384
      },
      "22": {
        loc: {
          start: {
            line: 407,
            column: 12
          },
          end: {
            line: 433,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 407,
            column: 12
          },
          end: {
            line: 433,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 407
      },
      "23": {
        loc: {
          start: {
            line: 423,
            column: 34
          },
          end: {
            line: 425,
            column: 23
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 424,
            column: 22
          },
          end: {
            line: 424,
            column: 74
          }
        }, {
          start: {
            line: 425,
            column: 22
          },
          end: {
            line: 425,
            column: 23
          }
        }],
        line: 423
      },
      "24": {
        loc: {
          start: {
            line: 435,
            column: 35
          },
          end: {
            line: 435,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 435,
            column: 35
          },
          end: {
            line: 435,
            column: 73
          }
        }, {
          start: {
            line: 435,
            column: 77
          },
          end: {
            line: 435,
            column: 79
          }
        }],
        line: 435
      },
      "25": {
        loc: {
          start: {
            line: 440,
            column: 12
          },
          end: {
            line: 442,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 440,
            column: 12
          },
          end: {
            line: 442,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 440
      },
      "26": {
        loc: {
          start: {
            line: 455,
            column: 8
          },
          end: {
            line: 456,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 455,
            column: 8
          },
          end: {
            line: 456,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 455
      },
      "27": {
        loc: {
          start: {
            line: 469,
            column: 12
          },
          end: {
            line: 470,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 469,
            column: 12
          },
          end: {
            line: 470,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 469
      },
      "28": {
        loc: {
          start: {
            line: 473,
            column: 12
          },
          end: {
            line: 500,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 474,
            column: 16
          },
          end: {
            line: 474,
            column: 40
          }
        }, {
          start: {
            line: 475,
            column: 16
          },
          end: {
            line: 480,
            column: 26
          }
        }, {
          start: {
            line: 481,
            column: 16
          },
          end: {
            line: 481,
            column: 44
          }
        }, {
          start: {
            line: 482,
            column: 16
          },
          end: {
            line: 487,
            column: 26
          }
        }, {
          start: {
            line: 488,
            column: 16
          },
          end: {
            line: 493,
            column: 26
          }
        }, {
          start: {
            line: 494,
            column: 16
          },
          end: {
            line: 499,
            column: 26
          }
        }],
        line: 473
      },
      "29": {
        loc: {
          start: {
            line: 476,
            column: 20
          },
          end: {
            line: 479,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 476,
            column: 20
          },
          end: {
            line: 479,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 476
      },
      "30": {
        loc: {
          start: {
            line: 483,
            column: 20
          },
          end: {
            line: 486,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 483,
            column: 20
          },
          end: {
            line: 486,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 483
      },
      "31": {
        loc: {
          start: {
            line: 489,
            column: 20
          },
          end: {
            line: 492,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 489,
            column: 20
          },
          end: {
            line: 492,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 489
      },
      "32": {
        loc: {
          start: {
            line: 495,
            column: 20
          },
          end: {
            line: 498,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 495,
            column: 20
          },
          end: {
            line: 498,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 495
      },
      "33": {
        loc: {
          start: {
            line: 501,
            column: 12
          },
          end: {
            line: 516,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 501,
            column: 12
          },
          end: {
            line: 516,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 501
      },
      "34": {
        loc: {
          start: {
            line: 527,
            column: 8
          },
          end: {
            line: 529,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 527,
            column: 8
          },
          end: {
            line: 529,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 527
      },
      "35": {
        loc: {
          start: {
            line: 549,
            column: 33
          },
          end: {
            line: 549,
            column: 101
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 549,
            column: 52
          },
          end: {
            line: 549,
            column: 97
          }
        }, {
          start: {
            line: 549,
            column: 100
          },
          end: {
            line: 549,
            column: 101
          }
        }],
        line: 549
      },
      "36": {
        loc: {
          start: {
            line: 551,
            column: 8
          },
          end: {
            line: 559,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 551,
            column: 8
          },
          end: {
            line: 559,
            column: 9
          }
        }, {
          start: {
            line: 554,
            column: 13
          },
          end: {
            line: 559,
            column: 9
          }
        }],
        line: 551
      },
      "37": {
        loc: {
          start: {
            line: 554,
            column: 13
          },
          end: {
            line: 559,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 554,
            column: 13
          },
          end: {
            line: 559,
            column: 9
          }
        }, {
          start: {
            line: 557,
            column: 13
          },
          end: {
            line: 559,
            column: 9
          }
        }],
        line: 554
      },
      "38": {
        loc: {
          start: {
            line: 573,
            column: 8
          },
          end: {
            line: 575,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 573,
            column: 8
          },
          end: {
            line: 575,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 573
      },
      "39": {
        loc: {
          start: {
            line: 592,
            column: 8
          },
          end: {
            line: 593,
            column: 32
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 592,
            column: 8
          },
          end: {
            line: 593,
            column: 32
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 592
      },
      "40": {
        loc: {
          start: {
            line: 596,
            column: 8
          },
          end: {
            line: 614,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 596,
            column: 8
          },
          end: {
            line: 614,
            column: 9
          }
        }, {
          start: {
            line: 605,
            column: 13
          },
          end: {
            line: 614,
            column: 9
          }
        }],
        line: 596
      },
      "41": {
        loc: {
          start: {
            line: 597,
            column: 12
          },
          end: {
            line: 598,
            column: 35
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 597,
            column: 12
          },
          end: {
            line: 598,
            column: 35
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 597
      },
      "42": {
        loc: {
          start: {
            line: 599,
            column: 12
          },
          end: {
            line: 600,
            column: 30
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 599,
            column: 12
          },
          end: {
            line: 600,
            column: 30
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 599
      },
      "43": {
        loc: {
          start: {
            line: 601,
            column: 12
          },
          end: {
            line: 602,
            column: 36
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 601,
            column: 12
          },
          end: {
            line: 602,
            column: 36
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 601
      },
      "44": {
        loc: {
          start: {
            line: 607,
            column: 12
          },
          end: {
            line: 608,
            column: 35
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 607,
            column: 12
          },
          end: {
            line: 608,
            column: 35
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 607
      },
      "45": {
        loc: {
          start: {
            line: 609,
            column: 12
          },
          end: {
            line: 610,
            column: 30
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 609,
            column: 12
          },
          end: {
            line: 610,
            column: 30
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 609
      },
      "46": {
        loc: {
          start: {
            line: 611,
            column: 12
          },
          end: {
            line: 612,
            column: 36
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 611,
            column: 12
          },
          end: {
            line: 612,
            column: 36
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 611
      },
      "47": {
        loc: {
          start: {
            line: 625,
            column: 8
          },
          end: {
            line: 631,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 626,
            column: 12
          },
          end: {
            line: 626,
            column: 41
          }
        }, {
          start: {
            line: 627,
            column: 12
          },
          end: {
            line: 627,
            column: 35
          }
        }, {
          start: {
            line: 628,
            column: 12
          },
          end: {
            line: 628,
            column: 41
          }
        }, {
          start: {
            line: 629,
            column: 12
          },
          end: {
            line: 629,
            column: 35
          }
        }, {
          start: {
            line: 630,
            column: 12
          },
          end: {
            line: 630,
            column: 31
          }
        }],
        line: 625
      },
      "48": {
        loc: {
          start: {
            line: 644,
            column: 8
          },
          end: {
            line: 665,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 644,
            column: 8
          },
          end: {
            line: 665,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 644
      },
      "49": {
        loc: {
          start: {
            line: 644,
            column: 12
          },
          end: {
            line: 644,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 644,
            column: 12
          },
          end: {
            line: 644,
            column: 29
          }
        }, {
          start: {
            line: 644,
            column: 33
          },
          end: {
            line: 644,
            column: 56
          }
        }],
        line: 644
      },
      "50": {
        loc: {
          start: {
            line: 645,
            column: 12
          },
          end: {
            line: 664,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 646,
            column: 16
          },
          end: {
            line: 648,
            column: 26
          }
        }, {
          start: {
            line: 649,
            column: 16
          },
          end: {
            line: 651,
            column: 26
          }
        }, {
          start: {
            line: 652,
            column: 16
          },
          end: {
            line: 654,
            column: 26
          }
        }, {
          start: {
            line: 655,
            column: 16
          },
          end: {
            line: 657,
            column: 26
          }
        }, {
          start: {
            line: 658,
            column: 16
          },
          end: {
            line: 660,
            column: 26
          }
        }, {
          start: {
            line: 661,
            column: 16
          },
          end: {
            line: 663,
            column: 26
          }
        }],
        line: 645
      },
      "51": {
        loc: {
          start: {
            line: 666,
            column: 8
          },
          end: {
            line: 668,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 666,
            column: 8
          },
          end: {
            line: 668,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 666
      },
      "52": {
        loc: {
          start: {
            line: 666,
            column: 12
          },
          end: {
            line: 666,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 666,
            column: 12
          },
          end: {
            line: 666,
            column: 17
          }
        }, {
          start: {
            line: 666,
            column: 21
          },
          end: {
            line: 666,
            column: 48
          }
        }, {
          start: {
            line: 666,
            column: 52
          },
          end: {
            line: 666,
            column: 73
          }
        }],
        line: 666
      },
      "53": {
        loc: {
          start: {
            line: 675,
            column: 8
          },
          end: {
            line: 677,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 675,
            column: 8
          },
          end: {
            line: 677,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 675
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0,
      "261": 0,
      "262": 0,
      "263": 0,
      "264": 0,
      "265": 0,
      "266": 0,
      "267": 0,
      "268": 0,
      "269": 0,
      "270": 0,
      "271": 0,
      "272": 0,
      "273": 0,
      "274": 0,
      "275": 0,
      "276": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0, 0, 0, 0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0, 0, 0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0, 0, 0, 0, 0],
      "51": [0, 0],
      "52": [0, 0, 0],
      "53": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\tunnel-performance-analytics.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\tunnel-performance-analytics.ts"],
      sourcesContent: ["import { EventEmitter } from 'events';\r\nimport { Logger } from '../core/logging/logger';\r\nimport { SSHTunnelManager, TunnelConnection } from './ssh-tunnel-manager';\r\nimport { TunnelHealthMonitor, TunnelHealthMetrics } from './tunnel-health-monitor';\r\nimport { TunnelStateTracker } from './tunnel-state-tracker';\r\n\r\n/**\r\n * Performance metric types\r\n */\r\nexport enum MetricType {\r\n  LATENCY = 'LATENCY',\r\n  THROUGHPUT = 'THROUGHPUT',\r\n  PACKET_LOSS = 'PACKET_LOSS',\r\n  CONNECTION_TIME = 'CONNECTION_TIME',\r\n  UPTIME = 'UPTIME',\r\n  ERROR_RATE = 'ERROR_RATE',\r\n  BANDWIDTH_UTILIZATION = 'BANDWIDTH_UTILIZATION'\r\n}\r\n\r\n/**\r\n * Performance data point\r\n */\r\nexport interface PerformanceDataPoint {\r\n  timestamp: Date;\r\n  connectionId: string;\r\n  metricType: MetricType;\r\n  value: number;\r\n  unit: string;\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\n/**\r\n * Performance trend analysis\r\n */\r\nexport interface PerformanceTrend {\r\n  metricType: MetricType;\r\n  connectionId: string;\r\n  timeRange: {\r\n    start: Date;\r\n    end: Date;\r\n  };\r\n  trend: 'IMPROVING' | 'DEGRADING' | 'STABLE';\r\n  changePercentage: number;\r\n  confidence: number; // 0-100\r\n  dataPoints: number;\r\n  averageValue: number;\r\n  minValue: number;\r\n  maxValue: number;\r\n  standardDeviation: number;\r\n}\r\n\r\n/**\r\n * Performance benchmark\r\n */\r\nexport interface PerformanceBenchmark {\r\n  metricType: MetricType;\r\n  excellent: number;\r\n  good: number;\r\n  acceptable: number;\r\n  poor: number;\r\n  unit: string;\r\n  description: string;\r\n}\r\n\r\n/**\r\n * Performance report\r\n */\r\nexport interface PerformanceReport {\r\n  connectionId: string;\r\n  generatedAt: Date;\r\n  timeRange: {\r\n    start: Date;\r\n    end: Date;\r\n  };\r\n  overallScore: number; // 0-100\r\n  metrics: {\r\n    [key in MetricType]?: {\r\n      current: number;\r\n      average: number;\r\n      trend: PerformanceTrend;\r\n      benchmark: 'EXCELLENT' | 'GOOD' | 'ACCEPTABLE' | 'POOR';\r\n      recommendations: string[];\r\n    };\r\n  };\r\n  summary: {\r\n    strengths: string[];\r\n    weaknesses: string[];\r\n    recommendations: string[];\r\n  };\r\n}\r\n\r\n/**\r\n * Analytics configuration\r\n */\r\nexport interface AnalyticsConfig {\r\n  /** Data collection interval in milliseconds */\r\n  collectionInterval: number;\r\n  /** Data retention period in milliseconds */\r\n  retentionPeriod: number;\r\n  /** Enable trend analysis */\r\n  enableTrendAnalysis: boolean;\r\n  /** Trend analysis window in milliseconds */\r\n  trendAnalysisWindow: number;\r\n  /** Enable performance alerts */\r\n  enablePerformanceAlerts: boolean;\r\n  /** Performance alert thresholds */\r\n  alertThresholds: {\r\n    [key in MetricType]?: number;\r\n  };\r\n  /** Enable automatic reporting */\r\n  enableAutoReporting: boolean;\r\n  /** Report generation interval in milliseconds */\r\n  reportInterval: number;\r\n}\r\n\r\n/**\r\n * Tunnel Performance Analytics\r\n * Collects, analyzes, and reports on SSH tunnel performance metrics\r\n */\r\nexport class TunnelPerformanceAnalytics extends EventEmitter {\r\n  private logger: Logger;\r\n  private tunnelManager: SSHTunnelManager;\r\n  private healthMonitor: TunnelHealthMonitor;\r\n  private stateTracker: TunnelStateTracker;\r\n  private config: AnalyticsConfig;\r\n  private performanceData: Map<string, PerformanceDataPoint[]>;\r\n  private benchmarks: Map<MetricType, PerformanceBenchmark>;\r\n  private collectionIntervals: Map<string, NodeJS.Timeout>;\r\n  private reportingTimer: NodeJS.Timeout | null;\r\n  private isCollecting: boolean;\r\n\r\n  constructor(\r\n    logger: Logger,\r\n    tunnelManager: SSHTunnelManager,\r\n    healthMonitor: TunnelHealthMonitor,\r\n    stateTracker: TunnelStateTracker,\r\n    config?: Partial<AnalyticsConfig>\r\n  ) {\r\n    super();\r\n    this.logger = logger;\r\n    this.tunnelManager = tunnelManager;\r\n    this.healthMonitor = healthMonitor;\r\n    this.stateTracker = stateTracker;\r\n    this.performanceData = new Map();\r\n    this.collectionIntervals = new Map();\r\n    this.reportingTimer = null;\r\n    this.isCollecting = false;\r\n\r\n    // Default configuration\r\n    this.config = {\r\n      collectionInterval: 60000, // 1 minute\r\n      retentionPeriod: 7 * 24 * 60 * 60 * 1000, // 7 days\r\n      enableTrendAnalysis: true,\r\n      trendAnalysisWindow: 24 * 60 * 60 * 1000, // 24 hours\r\n      enablePerformanceAlerts: true,\r\n      alertThresholds: {\r\n        [MetricType.LATENCY]: 1000, // 1 second\r\n        [MetricType.PACKET_LOSS]: 5, // 5%\r\n        [MetricType.ERROR_RATE]: 10, // 10%\r\n        [MetricType.THROUGHPUT]: 1024 // 1 KB/s minimum\r\n      },\r\n      enableAutoReporting: true,\r\n      reportInterval: 24 * 60 * 60 * 1000, // 24 hours\r\n      ...config\r\n    };\r\n\r\n    // Initialize performance benchmarks\r\n    this.initializeBenchmarks();\r\n\r\n    this.setupEventListeners();\r\n    this.logger.info('Tunnel Performance Analytics initialized', this.config);\r\n  }\r\n\r\n  /**\r\n   * Start performance data collection\r\n   */\r\n  startCollection(): void {\r\n    if (this.isCollecting) {\r\n      this.logger.warn('Performance data collection is already running');\r\n      return;\r\n    }\r\n\r\n    this.isCollecting = true;\r\n    this.logger.info('Starting performance data collection');\r\n\r\n    // Start collecting for existing connections\r\n    const connections = this.tunnelManager.getAllConnections();\r\n    for (const connection of connections) {\r\n      this.startCollectionForConnection(connection.id);\r\n    }\r\n\r\n    // Start automatic reporting if enabled\r\n    if (this.config.enableAutoReporting) {\r\n      this.startAutoReporting();\r\n    }\r\n\r\n    this.emit('collectionStarted');\r\n  }\r\n\r\n  /**\r\n   * Stop performance data collection\r\n   */\r\n  stopCollection(): void {\r\n    if (!this.isCollecting) {\r\n      this.logger.warn('Performance data collection is not running');\r\n      return;\r\n    }\r\n\r\n    this.isCollecting = false;\r\n    this.logger.info('Stopping performance data collection');\r\n\r\n    // Clear all collection intervals\r\n    for (const [connectionId, interval] of this.collectionIntervals.entries()) {\r\n      clearInterval(interval);\r\n      this.collectionIntervals.delete(connectionId);\r\n    }\r\n\r\n    // Stop automatic reporting\r\n    if (this.reportingTimer) {\r\n      clearInterval(this.reportingTimer);\r\n      this.reportingTimer = null;\r\n    }\r\n\r\n    this.emit('collectionStopped');\r\n  }\r\n\r\n  /**\r\n   * Start data collection for a specific connection\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   */\r\n  startCollectionForConnection(connectionId: string): void {\r\n    if (this.collectionIntervals.has(connectionId)) {\r\n      this.logger.debug(`Already collecting data for connection: ${connectionId}`);\r\n      return;\r\n    }\r\n\r\n    this.logger.info(`Starting performance data collection for connection: ${connectionId}`);\r\n\r\n    // Initialize data storage\r\n    this.performanceData.set(connectionId, []);\r\n\r\n    // Start periodic data collection\r\n    const interval = setInterval(async () => {\r\n      try {\r\n        await this.collectPerformanceData(connectionId);\r\n      } catch (error) {\r\n        this.logger.error(`Performance data collection failed for connection ${connectionId}`, error);\r\n      }\r\n    }, this.config.collectionInterval);\r\n\r\n    this.collectionIntervals.set(connectionId, interval);\r\n\r\n    // Perform initial data collection\r\n    setTimeout(() => this.collectPerformanceData(connectionId), 1000);\r\n  }\r\n\r\n  /**\r\n   * Stop data collection for a specific connection\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   */\r\n  stopCollectionForConnection(connectionId: string): void {\r\n    const interval = this.collectionIntervals.get(connectionId);\r\n    if (interval) {\r\n      clearInterval(interval);\r\n      this.collectionIntervals.delete(connectionId);\r\n      this.logger.info(`Stopped performance data collection for connection: ${connectionId}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get performance data for a connection\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @param metricType - Optional metric type filter\r\n   * @param timeRange - Optional time range filter\r\n   * @returns Array of performance data points\r\n   */\r\n  getPerformanceData(\r\n    connectionId: string,\r\n    metricType?: MetricType,\r\n    timeRange?: { start: Date; end: Date }\r\n  ): PerformanceDataPoint[] {\r\n    let data = this.performanceData.get(connectionId) || [];\r\n\r\n    // Apply metric type filter\r\n    if (metricType) {\r\n      data = data.filter(point => point.metricType === metricType);\r\n    }\r\n\r\n    // Apply time range filter\r\n    if (timeRange) {\r\n      data = data.filter(point => \r\n        point.timestamp >= timeRange.start && point.timestamp <= timeRange.end\r\n      );\r\n    }\r\n\r\n    return [...data];\r\n  }\r\n\r\n  /**\r\n   * Analyze performance trends\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @param metricType - Metric type to analyze\r\n   * @param timeRange - Optional time range (defaults to trend analysis window)\r\n   * @returns Performance trend analysis\r\n   */\r\n  analyzeTrend(\r\n    connectionId: string,\r\n    metricType: MetricType,\r\n    timeRange?: { start: Date; end: Date }\r\n  ): PerformanceTrend | null {\r\n    if (!this.config.enableTrendAnalysis) {\r\n      return null;\r\n    }\r\n\r\n    const now = new Date();\r\n    const defaultTimeRange = {\r\n      start: new Date(now.getTime() - this.config.trendAnalysisWindow),\r\n      end: now\r\n    };\r\n\r\n    const range = timeRange || defaultTimeRange;\r\n    const data = this.getPerformanceData(connectionId, metricType, range);\r\n\r\n    if (data.length < 2) {\r\n      return null;\r\n    }\r\n\r\n    // Calculate trend statistics\r\n    const values = data.map(point => point.value);\r\n    const timestamps = data.map(point => point.timestamp.getTime());\r\n\r\n    const trend = this.calculateTrend(values, timestamps);\r\n    const stats = this.calculateStatistics(values);\r\n\r\n    return {\r\n      metricType,\r\n      connectionId,\r\n      timeRange: range,\r\n      trend: trend.direction,\r\n      changePercentage: trend.changePercentage,\r\n      confidence: trend.confidence,\r\n      dataPoints: data.length,\r\n      averageValue: stats.mean,\r\n      minValue: stats.min,\r\n      maxValue: stats.max,\r\n      standardDeviation: stats.standardDeviation\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generate performance report\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @param timeRange - Optional time range\r\n   * @returns Performance report\r\n   */\r\n  generateReport(\r\n    connectionId: string,\r\n    timeRange?: { start: Date; end: Date }\r\n  ): PerformanceReport {\r\n    const now = new Date();\r\n    const defaultTimeRange = {\r\n      start: new Date(now.getTime() - 24 * 60 * 60 * 1000), // Last 24 hours\r\n      end: now\r\n    };\r\n\r\n    const range = timeRange || defaultTimeRange;\r\n    const report: PerformanceReport = {\r\n      connectionId,\r\n      generatedAt: now,\r\n      timeRange: range,\r\n      overallScore: 0,\r\n      metrics: {},\r\n      summary: {\r\n        strengths: [],\r\n        weaknesses: [],\r\n        recommendations: []\r\n      }\r\n    };\r\n\r\n    let totalScore = 0;\r\n    let metricCount = 0;\r\n\r\n    // Analyze each metric type\r\n    for (const metricType of Object.values(MetricType)) {\r\n      const data = this.getPerformanceData(connectionId, metricType, range);\r\n      if (data.length === 0) continue;\r\n\r\n      const trend = this.analyzeTrend(connectionId, metricType, range);\r\n      const currentValue = data[data.length - 1].value;\r\n      const averageValue = data.reduce((sum, point) => sum + point.value, 0) / data.length;\r\n      const benchmark = this.getBenchmarkRating(metricType, currentValue);\r\n      const recommendations = this.generateRecommendations(metricType, currentValue, trend);\r\n\r\n      report.metrics[metricType] = {\r\n        current: currentValue,\r\n        average: averageValue,\r\n        trend: trend!,\r\n        benchmark,\r\n        recommendations\r\n      };\r\n\r\n      // Calculate metric score\r\n      const metricScore = this.calculateMetricScore(metricType, currentValue);\r\n      totalScore += metricScore;\r\n      metricCount++;\r\n\r\n      // Add to summary\r\n      if (benchmark === 'EXCELLENT' || benchmark === 'GOOD') {\r\n        report.summary.strengths.push(`${metricType}: ${benchmark.toLowerCase()}`);\r\n      } else {\r\n        report.summary.weaknesses.push(`${metricType}: ${benchmark.toLowerCase()}`);\r\n      }\r\n\r\n      report.summary.recommendations.push(...recommendations);\r\n    }\r\n\r\n    // Calculate overall score\r\n    report.overallScore = metricCount > 0 ? totalScore / metricCount : 0;\r\n\r\n    this.logger.info(`Generated performance report for connection: ${connectionId}`, {\r\n      overallScore: report.overallScore,\r\n      timeRange: range\r\n    });\r\n\r\n    this.emit('reportGenerated', report);\r\n    return report;\r\n  }\r\n\r\n  /**\r\n   * Get performance benchmarks\r\n   * \r\n   * @returns Map of performance benchmarks\r\n   */\r\n  getBenchmarks(): Map<MetricType, PerformanceBenchmark> {\r\n    return new Map(this.benchmarks);\r\n  }\r\n\r\n  /**\r\n   * Update performance benchmark\r\n   * \r\n   * @param metricType - Metric type\r\n   * @param benchmark - New benchmark values\r\n   */\r\n  updateBenchmark(metricType: MetricType, benchmark: PerformanceBenchmark): void {\r\n    this.benchmarks.set(metricType, benchmark);\r\n    this.logger.info(`Updated performance benchmark for ${metricType}`, benchmark);\r\n    this.emit('benchmarkUpdated', metricType, benchmark);\r\n  }\r\n\r\n  /**\r\n   * Setup event listeners\r\n   */\r\n  private setupEventListeners(): void {\r\n    // Listen for new tunnel connections\r\n    this.tunnelManager.on('tunnelConnected', (connection) => {\r\n      if (this.isCollecting) {\r\n        this.startCollectionForConnection(connection.id);\r\n      }\r\n    });\r\n\r\n    // Listen for tunnel disconnections\r\n    this.tunnelManager.on('tunnelDisconnected', (connection) => {\r\n      this.stopCollectionForConnection(connection.id);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Initialize performance benchmarks\r\n   */\r\n  private initializeBenchmarks(): void {\r\n    this.benchmarks = new Map([\r\n      [MetricType.LATENCY, {\r\n        metricType: MetricType.LATENCY,\r\n        excellent: 50,\r\n        good: 100,\r\n        acceptable: 500,\r\n        poor: 1000,\r\n        unit: 'ms',\r\n        description: 'Connection latency'\r\n      }],\r\n      [MetricType.THROUGHPUT, {\r\n        metricType: MetricType.THROUGHPUT,\r\n        excellent: 10240, // 10 KB/s\r\n        good: 5120,       // 5 KB/s\r\n        acceptable: 1024, // 1 KB/s\r\n        poor: 512,        // 512 B/s\r\n        unit: 'bytes/s',\r\n        description: 'Data throughput'\r\n      }],\r\n      [MetricType.PACKET_LOSS, {\r\n        metricType: MetricType.PACKET_LOSS,\r\n        excellent: 0,\r\n        good: 1,\r\n        acceptable: 5,\r\n        poor: 10,\r\n        unit: '%',\r\n        description: 'Packet loss percentage'\r\n      }],\r\n      [MetricType.CONNECTION_TIME, {\r\n        metricType: MetricType.CONNECTION_TIME,\r\n        excellent: 1000,  // 1 second\r\n        good: 3000,       // 3 seconds\r\n        acceptable: 10000, // 10 seconds\r\n        poor: 30000,      // 30 seconds\r\n        unit: 'ms',\r\n        description: 'Time to establish connection'\r\n      }],\r\n      [MetricType.UPTIME, {\r\n        metricType: MetricType.UPTIME,\r\n        excellent: 99.9,\r\n        good: 99.5,\r\n        acceptable: 99.0,\r\n        poor: 95.0,\r\n        unit: '%',\r\n        description: 'Connection uptime percentage'\r\n      }],\r\n      [MetricType.ERROR_RATE, {\r\n        metricType: MetricType.ERROR_RATE,\r\n        excellent: 0,\r\n        good: 1,\r\n        acceptable: 5,\r\n        poor: 10,\r\n        unit: '%',\r\n        description: 'Error rate percentage'\r\n      }]\r\n    ]);\r\n  }\r\n\r\n  /**\r\n   * Collect performance data for a connection\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   */\r\n  private async collectPerformanceData(connectionId: string): Promise<void> {\r\n    const connection = this.tunnelManager.getConnection(connectionId);\r\n    if (!connection) return;\r\n\r\n    const timestamp = new Date();\r\n    const dataPoints: PerformanceDataPoint[] = [];\r\n\r\n    try {\r\n      // Get health metrics\r\n      const healthMetrics = this.healthMonitor.getHealthMetrics(connectionId);\r\n      if (healthMetrics) {\r\n        dataPoints.push(\r\n          {\r\n            timestamp,\r\n            connectionId,\r\n            metricType: MetricType.LATENCY,\r\n            value: healthMetrics.latency,\r\n            unit: 'ms'\r\n          },\r\n          {\r\n            timestamp,\r\n            connectionId,\r\n            metricType: MetricType.THROUGHPUT,\r\n            value: healthMetrics.throughput,\r\n            unit: 'bytes/s'\r\n          },\r\n          {\r\n            timestamp,\r\n            connectionId,\r\n            metricType: MetricType.PACKET_LOSS,\r\n            value: healthMetrics.packetLoss,\r\n            unit: '%'\r\n          }\r\n        );\r\n      }\r\n\r\n      // Get state statistics\r\n      const stateStats = this.stateTracker.getStatistics(connectionId);\r\n      if (stateStats) {\r\n        dataPoints.push(\r\n          {\r\n            timestamp,\r\n            connectionId,\r\n            metricType: MetricType.UPTIME,\r\n            value: stateStats.reliability,\r\n            unit: '%'\r\n          },\r\n          {\r\n            timestamp,\r\n            connectionId,\r\n            metricType: MetricType.CONNECTION_TIME,\r\n            value: stateStats.averageConnectionTime,\r\n            unit: 'ms'\r\n          }\r\n        );\r\n\r\n        // Calculate error rate\r\n        const totalAttempts = stateStats.connectionAttempts;\r\n        const errorRate = totalAttempts > 0 \r\n          ? (stateStats.failedConnections / totalAttempts) * 100 \r\n          : 0;\r\n\r\n        dataPoints.push({\r\n          timestamp,\r\n          connectionId,\r\n          metricType: MetricType.ERROR_RATE,\r\n          value: errorRate,\r\n          unit: '%'\r\n        });\r\n      }\r\n\r\n      // Store data points\r\n      const connectionData = this.performanceData.get(connectionId) || [];\r\n      connectionData.push(...dataPoints);\r\n\r\n      // Clean up old data\r\n      this.cleanupOldData(connectionId);\r\n\r\n      // Check for performance alerts\r\n      if (this.config.enablePerformanceAlerts) {\r\n        this.checkPerformanceAlerts(dataPoints);\r\n      }\r\n\r\n    } catch (error) {\r\n      this.logger.error(`Failed to collect performance data for connection ${connectionId}`, error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clean up old performance data\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   */\r\n  private cleanupOldData(connectionId: string): void {\r\n    const data = this.performanceData.get(connectionId);\r\n    if (!data) return;\r\n\r\n    const cutoffTime = Date.now() - this.config.retentionPeriod;\r\n    const filteredData = data.filter(point => point.timestamp.getTime() > cutoffTime);\r\n\r\n    this.performanceData.set(connectionId, filteredData);\r\n  }\r\n\r\n  /**\r\n   * Check for performance alerts\r\n   * \r\n   * @param dataPoints - Performance data points to check\r\n   */\r\n  private checkPerformanceAlerts(dataPoints: PerformanceDataPoint[]): void {\r\n    for (const dataPoint of dataPoints) {\r\n      const threshold = this.config.alertThresholds[dataPoint.metricType];\r\n      if (threshold === undefined) continue;\r\n\r\n      let alertTriggered = false;\r\n      let alertMessage = '';\r\n\r\n      switch (dataPoint.metricType) {\r\n        case MetricType.LATENCY:\r\n        case MetricType.CONNECTION_TIME:\r\n          if (dataPoint.value > threshold) {\r\n            alertTriggered = true;\r\n            alertMessage = `High ${dataPoint.metricType.toLowerCase()}: ${dataPoint.value}${dataPoint.unit}`;\r\n          }\r\n          break;\r\n\r\n        case MetricType.PACKET_LOSS:\r\n        case MetricType.ERROR_RATE:\r\n          if (dataPoint.value > threshold) {\r\n            alertTriggered = true;\r\n            alertMessage = `High ${dataPoint.metricType.toLowerCase()}: ${dataPoint.value}${dataPoint.unit}`;\r\n          }\r\n          break;\r\n\r\n        case MetricType.THROUGHPUT:\r\n          if (dataPoint.value < threshold) {\r\n            alertTriggered = true;\r\n            alertMessage = `Low ${dataPoint.metricType.toLowerCase()}: ${dataPoint.value}${dataPoint.unit}`;\r\n          }\r\n          break;\r\n\r\n        case MetricType.UPTIME:\r\n          if (dataPoint.value < threshold) {\r\n            alertTriggered = true;\r\n            alertMessage = `Low ${dataPoint.metricType.toLowerCase()}: ${dataPoint.value}${dataPoint.unit}`;\r\n          }\r\n          break;\r\n      }\r\n\r\n      if (alertTriggered) {\r\n        this.logger.warn(`Performance alert: ${alertMessage}`, {\r\n          connectionId: dataPoint.connectionId,\r\n          metricType: dataPoint.metricType,\r\n          value: dataPoint.value,\r\n          threshold\r\n        });\r\n\r\n        this.emit('performanceAlert', {\r\n          connectionId: dataPoint.connectionId,\r\n          metricType: dataPoint.metricType,\r\n          value: dataPoint.value,\r\n          threshold,\r\n          message: alertMessage,\r\n          timestamp: dataPoint.timestamp\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate trend direction and statistics\r\n   * \r\n   * @param values - Array of values\r\n   * @param timestamps - Array of timestamps\r\n   * @returns Trend analysis\r\n   */\r\n  private calculateTrend(values: number[], timestamps: number[]): {\r\n    direction: 'IMPROVING' | 'DEGRADING' | 'STABLE';\r\n    changePercentage: number;\r\n    confidence: number;\r\n  } {\r\n    if (values.length < 2) {\r\n      return { direction: 'STABLE', changePercentage: 0, confidence: 0 };\r\n    }\r\n\r\n    // Calculate linear regression\r\n    const n = values.length;\r\n    const sumX = timestamps.reduce((sum, t) => sum + t, 0);\r\n    const sumY = values.reduce((sum, v) => sum + v, 0);\r\n    const sumXY = timestamps.reduce((sum, t, i) => sum + t * values[i], 0);\r\n    const sumXX = timestamps.reduce((sum, t) => sum + t * t, 0);\r\n\r\n    const slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);\r\n    const intercept = (sumY - slope * sumX) / n;\r\n\r\n    // Calculate R-squared for confidence\r\n    const meanY = sumY / n;\r\n    const ssRes = values.reduce((sum, v, i) => {\r\n      const predicted = slope * timestamps[i] + intercept;\r\n      return sum + Math.pow(v - predicted, 2);\r\n    }, 0);\r\n    const ssTot = values.reduce((sum, v) => sum + Math.pow(v - meanY, 2), 0);\r\n    const rSquared = 1 - (ssRes / ssTot);\r\n\r\n    // Determine trend direction\r\n    const firstValue = values[0];\r\n    const lastValue = values[values.length - 1];\r\n    const changePercentage = firstValue !== 0 ? ((lastValue - firstValue) / firstValue) * 100 : 0;\r\n\r\n    let direction: 'IMPROVING' | 'DEGRADING' | 'STABLE';\r\n    if (Math.abs(changePercentage) < 5) {\r\n      direction = 'STABLE';\r\n    } else if (changePercentage > 0) {\r\n      direction = 'IMPROVING';\r\n    } else {\r\n      direction = 'DEGRADING';\r\n    }\r\n\r\n    return {\r\n      direction,\r\n      changePercentage: Math.abs(changePercentage),\r\n      confidence: Math.max(0, Math.min(100, rSquared * 100))\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculate basic statistics\r\n   * \r\n   * @param values - Array of values\r\n   * @returns Statistical measures\r\n   */\r\n  private calculateStatistics(values: number[]): {\r\n    mean: number;\r\n    min: number;\r\n    max: number;\r\n    standardDeviation: number;\r\n  } {\r\n    if (values.length === 0) {\r\n      return { mean: 0, min: 0, max: 0, standardDeviation: 0 };\r\n    }\r\n\r\n    const mean = values.reduce((sum, v) => sum + v, 0) / values.length;\r\n    const min = Math.min(...values);\r\n    const max = Math.max(...values);\r\n\r\n    const variance = values.reduce((sum, v) => sum + Math.pow(v - mean, 2), 0) / values.length;\r\n    const standardDeviation = Math.sqrt(variance);\r\n\r\n    return { mean, min, max, standardDeviation };\r\n  }\r\n\r\n  /**\r\n   * Get benchmark rating for a metric value\r\n   * \r\n   * @param metricType - Metric type\r\n   * @param value - Metric value\r\n   * @returns Benchmark rating\r\n   */\r\n  private getBenchmarkRating(metricType: MetricType, value: number): 'EXCELLENT' | 'GOOD' | 'ACCEPTABLE' | 'POOR' {\r\n    const benchmark = this.benchmarks.get(metricType);\r\n    if (!benchmark) return 'ACCEPTABLE';\r\n\r\n    // For metrics where lower is better (latency, packet loss, error rate)\r\n    const lowerIsBetter = [MetricType.LATENCY, MetricType.PACKET_LOSS, MetricType.ERROR_RATE, MetricType.CONNECTION_TIME];\r\n    \r\n    if (lowerIsBetter.includes(metricType)) {\r\n      if (value <= benchmark.excellent) return 'EXCELLENT';\r\n      if (value <= benchmark.good) return 'GOOD';\r\n      if (value <= benchmark.acceptable) return 'ACCEPTABLE';\r\n      return 'POOR';\r\n    } else {\r\n      // For metrics where higher is better (throughput, uptime)\r\n      if (value >= benchmark.excellent) return 'EXCELLENT';\r\n      if (value >= benchmark.good) return 'GOOD';\r\n      if (value >= benchmark.acceptable) return 'ACCEPTABLE';\r\n      return 'POOR';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate metric score (0-100)\r\n   * \r\n   * @param metricType - Metric type\r\n   * @param value - Metric value\r\n   * @returns Score (0-100)\r\n   */\r\n  private calculateMetricScore(metricType: MetricType, value: number): number {\r\n    const rating = this.getBenchmarkRating(metricType, value);\r\n    \r\n    switch (rating) {\r\n      case 'EXCELLENT': return 100;\r\n      case 'GOOD': return 80;\r\n      case 'ACCEPTABLE': return 60;\r\n      case 'POOR': return 30;\r\n      default: return 50;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate recommendations based on metric performance\r\n   * \r\n   * @param metricType - Metric type\r\n   * @param value - Current value\r\n   * @param trend - Performance trend\r\n   * @returns Array of recommendations\r\n   */\r\n  private generateRecommendations(metricType: MetricType, value: number, trend: PerformanceTrend | null): string[] {\r\n    const recommendations: string[] = [];\r\n    const rating = this.getBenchmarkRating(metricType, value);\r\n\r\n    if (rating === 'POOR' || rating === 'ACCEPTABLE') {\r\n      switch (metricType) {\r\n        case MetricType.LATENCY:\r\n          recommendations.push('Consider optimizing network routing or switching to a closer server');\r\n          break;\r\n        case MetricType.THROUGHPUT:\r\n          recommendations.push('Check for bandwidth limitations or network congestion');\r\n          break;\r\n        case MetricType.PACKET_LOSS:\r\n          recommendations.push('Investigate network stability and consider alternative routing');\r\n          break;\r\n        case MetricType.CONNECTION_TIME:\r\n          recommendations.push('Optimize SSH configuration or check server responsiveness');\r\n          break;\r\n        case MetricType.UPTIME:\r\n          recommendations.push('Implement better connection monitoring and auto-reconnection');\r\n          break;\r\n        case MetricType.ERROR_RATE:\r\n          recommendations.push('Review error logs and implement better error handling');\r\n          break;\r\n      }\r\n    }\r\n\r\n    if (trend && trend.trend === 'DEGRADING' && trend.confidence > 70) {\r\n      recommendations.push(`Performance is degrading (${trend.changePercentage.toFixed(1)}% decline)`);\r\n    }\r\n\r\n    return recommendations;\r\n  }\r\n\r\n  /**\r\n   * Start automatic report generation\r\n   */\r\n  private startAutoReporting(): void {\r\n    if (this.reportingTimer) {\r\n      clearInterval(this.reportingTimer);\r\n    }\r\n\r\n    this.reportingTimer = setInterval(() => {\r\n      const connections = this.tunnelManager.getAllConnections();\r\n      for (const connection of connections) {\r\n        try {\r\n          const report = this.generateReport(connection.id);\r\n          this.emit('automaticReport', report);\r\n        } catch (error) {\r\n          this.logger.error(`Failed to generate automatic report for connection ${connection.id}`, error);\r\n        }\r\n      }\r\n    }, this.config.reportInterval);\r\n\r\n    this.logger.info('Started automatic performance reporting');\r\n  }\r\n\r\n  /**\r\n   * Cleanup analytics resources\r\n   */\r\n  cleanup(): void {\r\n    this.stopCollection();\r\n    this.performanceData.clear();\r\n    this.logger.info('Tunnel performance analytics cleanup completed');\r\n  }\r\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "8f510a7d8ce690ade3315f9ecb2f529519dd608f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_ynqe030dn = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_ynqe030dn();
cov_ynqe030dn().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_ynqe030dn().s[1]++;
exports.TunnelPerformanceAnalytics = exports.MetricType = void 0;
const events_1 =
/* istanbul ignore next */
(cov_ynqe030dn().s[2]++, require("events"));
/**
 * Performance metric types
 */
var MetricType;
/* istanbul ignore next */
cov_ynqe030dn().s[3]++;
(function (MetricType) {
  /* istanbul ignore next */
  cov_ynqe030dn().f[0]++;
  cov_ynqe030dn().s[4]++;
  MetricType["LATENCY"] = "LATENCY";
  /* istanbul ignore next */
  cov_ynqe030dn().s[5]++;
  MetricType["THROUGHPUT"] = "THROUGHPUT";
  /* istanbul ignore next */
  cov_ynqe030dn().s[6]++;
  MetricType["PACKET_LOSS"] = "PACKET_LOSS";
  /* istanbul ignore next */
  cov_ynqe030dn().s[7]++;
  MetricType["CONNECTION_TIME"] = "CONNECTION_TIME";
  /* istanbul ignore next */
  cov_ynqe030dn().s[8]++;
  MetricType["UPTIME"] = "UPTIME";
  /* istanbul ignore next */
  cov_ynqe030dn().s[9]++;
  MetricType["ERROR_RATE"] = "ERROR_RATE";
  /* istanbul ignore next */
  cov_ynqe030dn().s[10]++;
  MetricType["BANDWIDTH_UTILIZATION"] = "BANDWIDTH_UTILIZATION";
})(
/* istanbul ignore next */
(cov_ynqe030dn().b[0][0]++, MetricType) ||
/* istanbul ignore next */
(cov_ynqe030dn().b[0][1]++, exports.MetricType = MetricType = {}));
/**
 * Tunnel Performance Analytics
 * Collects, analyzes, and reports on SSH tunnel performance metrics
 */
class TunnelPerformanceAnalytics extends
/* istanbul ignore next */
(events_1.EventEmitter) {
  logger;
  tunnelManager;
  healthMonitor;
  stateTracker;
  config;
  performanceData;
  benchmarks;
  collectionIntervals;
  reportingTimer;
  isCollecting;
  constructor(logger, tunnelManager, healthMonitor, stateTracker, config) {
    /* istanbul ignore next */
    cov_ynqe030dn().f[1]++;
    cov_ynqe030dn().s[11]++;
    super();
    /* istanbul ignore next */
    cov_ynqe030dn().s[12]++;
    this.logger = logger;
    /* istanbul ignore next */
    cov_ynqe030dn().s[13]++;
    this.tunnelManager = tunnelManager;
    /* istanbul ignore next */
    cov_ynqe030dn().s[14]++;
    this.healthMonitor = healthMonitor;
    /* istanbul ignore next */
    cov_ynqe030dn().s[15]++;
    this.stateTracker = stateTracker;
    /* istanbul ignore next */
    cov_ynqe030dn().s[16]++;
    this.performanceData = new Map();
    /* istanbul ignore next */
    cov_ynqe030dn().s[17]++;
    this.collectionIntervals = new Map();
    /* istanbul ignore next */
    cov_ynqe030dn().s[18]++;
    this.reportingTimer = null;
    /* istanbul ignore next */
    cov_ynqe030dn().s[19]++;
    this.isCollecting = false;
    // Default configuration
    /* istanbul ignore next */
    cov_ynqe030dn().s[20]++;
    this.config = {
      collectionInterval: 60000,
      // 1 minute
      retentionPeriod: 7 * 24 * 60 * 60 * 1000,
      // 7 days
      enableTrendAnalysis: true,
      trendAnalysisWindow: 24 * 60 * 60 * 1000,
      // 24 hours
      enablePerformanceAlerts: true,
      alertThresholds: {
        [MetricType.LATENCY]: 1000,
        // 1 second
        [MetricType.PACKET_LOSS]: 5,
        // 5%
        [MetricType.ERROR_RATE]: 10,
        // 10%
        [MetricType.THROUGHPUT]: 1024 // 1 KB/s minimum
      },
      enableAutoReporting: true,
      reportInterval: 24 * 60 * 60 * 1000,
      // 24 hours
      ...config
    };
    // Initialize performance benchmarks
    /* istanbul ignore next */
    cov_ynqe030dn().s[21]++;
    this.initializeBenchmarks();
    /* istanbul ignore next */
    cov_ynqe030dn().s[22]++;
    this.setupEventListeners();
    /* istanbul ignore next */
    cov_ynqe030dn().s[23]++;
    this.logger.info('Tunnel Performance Analytics initialized', this.config);
  }
  /**
   * Start performance data collection
   */
  startCollection() {
    /* istanbul ignore next */
    cov_ynqe030dn().f[2]++;
    cov_ynqe030dn().s[24]++;
    if (this.isCollecting) {
      /* istanbul ignore next */
      cov_ynqe030dn().b[1][0]++;
      cov_ynqe030dn().s[25]++;
      this.logger.warn('Performance data collection is already running');
      /* istanbul ignore next */
      cov_ynqe030dn().s[26]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_ynqe030dn().b[1][1]++;
    }
    cov_ynqe030dn().s[27]++;
    this.isCollecting = true;
    /* istanbul ignore next */
    cov_ynqe030dn().s[28]++;
    this.logger.info('Starting performance data collection');
    // Start collecting for existing connections
    const connections =
    /* istanbul ignore next */
    (cov_ynqe030dn().s[29]++, this.tunnelManager.getAllConnections());
    /* istanbul ignore next */
    cov_ynqe030dn().s[30]++;
    for (const connection of connections) {
      /* istanbul ignore next */
      cov_ynqe030dn().s[31]++;
      this.startCollectionForConnection(connection.id);
    }
    // Start automatic reporting if enabled
    /* istanbul ignore next */
    cov_ynqe030dn().s[32]++;
    if (this.config.enableAutoReporting) {
      /* istanbul ignore next */
      cov_ynqe030dn().b[2][0]++;
      cov_ynqe030dn().s[33]++;
      this.startAutoReporting();
    } else
    /* istanbul ignore next */
    {
      cov_ynqe030dn().b[2][1]++;
    }
    cov_ynqe030dn().s[34]++;
    this.emit('collectionStarted');
  }
  /**
   * Stop performance data collection
   */
  stopCollection() {
    /* istanbul ignore next */
    cov_ynqe030dn().f[3]++;
    cov_ynqe030dn().s[35]++;
    if (!this.isCollecting) {
      /* istanbul ignore next */
      cov_ynqe030dn().b[3][0]++;
      cov_ynqe030dn().s[36]++;
      this.logger.warn('Performance data collection is not running');
      /* istanbul ignore next */
      cov_ynqe030dn().s[37]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_ynqe030dn().b[3][1]++;
    }
    cov_ynqe030dn().s[38]++;
    this.isCollecting = false;
    /* istanbul ignore next */
    cov_ynqe030dn().s[39]++;
    this.logger.info('Stopping performance data collection');
    // Clear all collection intervals
    /* istanbul ignore next */
    cov_ynqe030dn().s[40]++;
    for (const [connectionId, interval] of this.collectionIntervals.entries()) {
      /* istanbul ignore next */
      cov_ynqe030dn().s[41]++;
      clearInterval(interval);
      /* istanbul ignore next */
      cov_ynqe030dn().s[42]++;
      this.collectionIntervals.delete(connectionId);
    }
    // Stop automatic reporting
    /* istanbul ignore next */
    cov_ynqe030dn().s[43]++;
    if (this.reportingTimer) {
      /* istanbul ignore next */
      cov_ynqe030dn().b[4][0]++;
      cov_ynqe030dn().s[44]++;
      clearInterval(this.reportingTimer);
      /* istanbul ignore next */
      cov_ynqe030dn().s[45]++;
      this.reportingTimer = null;
    } else
    /* istanbul ignore next */
    {
      cov_ynqe030dn().b[4][1]++;
    }
    cov_ynqe030dn().s[46]++;
    this.emit('collectionStopped');
  }
  /**
   * Start data collection for a specific connection
   *
   * @param connectionId - Connection identifier
   */
  startCollectionForConnection(connectionId) {
    /* istanbul ignore next */
    cov_ynqe030dn().f[4]++;
    cov_ynqe030dn().s[47]++;
    if (this.collectionIntervals.has(connectionId)) {
      /* istanbul ignore next */
      cov_ynqe030dn().b[5][0]++;
      cov_ynqe030dn().s[48]++;
      this.logger.debug(`Already collecting data for connection: ${connectionId}`);
      /* istanbul ignore next */
      cov_ynqe030dn().s[49]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_ynqe030dn().b[5][1]++;
    }
    cov_ynqe030dn().s[50]++;
    this.logger.info(`Starting performance data collection for connection: ${connectionId}`);
    // Initialize data storage
    /* istanbul ignore next */
    cov_ynqe030dn().s[51]++;
    this.performanceData.set(connectionId, []);
    // Start periodic data collection
    const interval =
    /* istanbul ignore next */
    (cov_ynqe030dn().s[52]++, setInterval(async () => {
      /* istanbul ignore next */
      cov_ynqe030dn().f[5]++;
      cov_ynqe030dn().s[53]++;
      try {
        /* istanbul ignore next */
        cov_ynqe030dn().s[54]++;
        await this.collectPerformanceData(connectionId);
      } catch (error) {
        /* istanbul ignore next */
        cov_ynqe030dn().s[55]++;
        this.logger.error(`Performance data collection failed for connection ${connectionId}`, error);
      }
    }, this.config.collectionInterval));
    /* istanbul ignore next */
    cov_ynqe030dn().s[56]++;
    this.collectionIntervals.set(connectionId, interval);
    // Perform initial data collection
    /* istanbul ignore next */
    cov_ynqe030dn().s[57]++;
    setTimeout(() => {
      /* istanbul ignore next */
      cov_ynqe030dn().f[6]++;
      cov_ynqe030dn().s[58]++;
      return this.collectPerformanceData(connectionId);
    }, 1000);
  }
  /**
   * Stop data collection for a specific connection
   *
   * @param connectionId - Connection identifier
   */
  stopCollectionForConnection(connectionId) {
    /* istanbul ignore next */
    cov_ynqe030dn().f[7]++;
    const interval =
    /* istanbul ignore next */
    (cov_ynqe030dn().s[59]++, this.collectionIntervals.get(connectionId));
    /* istanbul ignore next */
    cov_ynqe030dn().s[60]++;
    if (interval) {
      /* istanbul ignore next */
      cov_ynqe030dn().b[6][0]++;
      cov_ynqe030dn().s[61]++;
      clearInterval(interval);
      /* istanbul ignore next */
      cov_ynqe030dn().s[62]++;
      this.collectionIntervals.delete(connectionId);
      /* istanbul ignore next */
      cov_ynqe030dn().s[63]++;
      this.logger.info(`Stopped performance data collection for connection: ${connectionId}`);
    } else
    /* istanbul ignore next */
    {
      cov_ynqe030dn().b[6][1]++;
    }
  }
  /**
   * Get performance data for a connection
   *
   * @param connectionId - Connection identifier
   * @param metricType - Optional metric type filter
   * @param timeRange - Optional time range filter
   * @returns Array of performance data points
   */
  getPerformanceData(connectionId, metricType, timeRange) {
    /* istanbul ignore next */
    cov_ynqe030dn().f[8]++;
    let data =
    /* istanbul ignore next */
    (cov_ynqe030dn().s[64]++,
    /* istanbul ignore next */
    (cov_ynqe030dn().b[7][0]++, this.performanceData.get(connectionId)) ||
    /* istanbul ignore next */
    (cov_ynqe030dn().b[7][1]++, []));
    // Apply metric type filter
    /* istanbul ignore next */
    cov_ynqe030dn().s[65]++;
    if (metricType) {
      /* istanbul ignore next */
      cov_ynqe030dn().b[8][0]++;
      cov_ynqe030dn().s[66]++;
      data = data.filter(point => {
        /* istanbul ignore next */
        cov_ynqe030dn().f[9]++;
        cov_ynqe030dn().s[67]++;
        return point.metricType === metricType;
      });
    } else
    /* istanbul ignore next */
    {
      cov_ynqe030dn().b[8][1]++;
    }
    // Apply time range filter
    cov_ynqe030dn().s[68]++;
    if (timeRange) {
      /* istanbul ignore next */
      cov_ynqe030dn().b[9][0]++;
      cov_ynqe030dn().s[69]++;
      data = data.filter(point => {
        /* istanbul ignore next */
        cov_ynqe030dn().f[10]++;
        cov_ynqe030dn().s[70]++;
        return /* istanbul ignore next */(cov_ynqe030dn().b[10][0]++, point.timestamp >= timeRange.start) &&
        /* istanbul ignore next */
        (cov_ynqe030dn().b[10][1]++, point.timestamp <= timeRange.end);
      });
    } else
    /* istanbul ignore next */
    {
      cov_ynqe030dn().b[9][1]++;
    }
    cov_ynqe030dn().s[71]++;
    return [...data];
  }
  /**
   * Analyze performance trends
   *
   * @param connectionId - Connection identifier
   * @param metricType - Metric type to analyze
   * @param timeRange - Optional time range (defaults to trend analysis window)
   * @returns Performance trend analysis
   */
  analyzeTrend(connectionId, metricType, timeRange) {
    /* istanbul ignore next */
    cov_ynqe030dn().f[11]++;
    cov_ynqe030dn().s[72]++;
    if (!this.config.enableTrendAnalysis) {
      /* istanbul ignore next */
      cov_ynqe030dn().b[11][0]++;
      cov_ynqe030dn().s[73]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_ynqe030dn().b[11][1]++;
    }
    const now =
    /* istanbul ignore next */
    (cov_ynqe030dn().s[74]++, new Date());
    const defaultTimeRange =
    /* istanbul ignore next */
    (cov_ynqe030dn().s[75]++, {
      start: new Date(now.getTime() - this.config.trendAnalysisWindow),
      end: now
    });
    const range =
    /* istanbul ignore next */
    (cov_ynqe030dn().s[76]++,
    /* istanbul ignore next */
    (cov_ynqe030dn().b[12][0]++, timeRange) ||
    /* istanbul ignore next */
    (cov_ynqe030dn().b[12][1]++, defaultTimeRange));
    const data =
    /* istanbul ignore next */
    (cov_ynqe030dn().s[77]++, this.getPerformanceData(connectionId, metricType, range));
    /* istanbul ignore next */
    cov_ynqe030dn().s[78]++;
    if (data.length < 2) {
      /* istanbul ignore next */
      cov_ynqe030dn().b[13][0]++;
      cov_ynqe030dn().s[79]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_ynqe030dn().b[13][1]++;
    }
    // Calculate trend statistics
    const values =
    /* istanbul ignore next */
    (cov_ynqe030dn().s[80]++, data.map(point => {
      /* istanbul ignore next */
      cov_ynqe030dn().f[12]++;
      cov_ynqe030dn().s[81]++;
      return point.value;
    }));
    const timestamps =
    /* istanbul ignore next */
    (cov_ynqe030dn().s[82]++, data.map(point => {
      /* istanbul ignore next */
      cov_ynqe030dn().f[13]++;
      cov_ynqe030dn().s[83]++;
      return point.timestamp.getTime();
    }));
    const trend =
    /* istanbul ignore next */
    (cov_ynqe030dn().s[84]++, this.calculateTrend(values, timestamps));
    const stats =
    /* istanbul ignore next */
    (cov_ynqe030dn().s[85]++, this.calculateStatistics(values));
    /* istanbul ignore next */
    cov_ynqe030dn().s[86]++;
    return {
      metricType,
      connectionId,
      timeRange: range,
      trend: trend.direction,
      changePercentage: trend.changePercentage,
      confidence: trend.confidence,
      dataPoints: data.length,
      averageValue: stats.mean,
      minValue: stats.min,
      maxValue: stats.max,
      standardDeviation: stats.standardDeviation
    };
  }
  /**
   * Generate performance report
   *
   * @param connectionId - Connection identifier
   * @param timeRange - Optional time range
   * @returns Performance report
   */
  generateReport(connectionId, timeRange) {
    /* istanbul ignore next */
    cov_ynqe030dn().f[14]++;
    const now =
    /* istanbul ignore next */
    (cov_ynqe030dn().s[87]++, new Date());
    const defaultTimeRange =
    /* istanbul ignore next */
    (cov_ynqe030dn().s[88]++, {
      start: new Date(now.getTime() - 24 * 60 * 60 * 1000),
      // Last 24 hours
      end: now
    });
    const range =
    /* istanbul ignore next */
    (cov_ynqe030dn().s[89]++,
    /* istanbul ignore next */
    (cov_ynqe030dn().b[14][0]++, timeRange) ||
    /* istanbul ignore next */
    (cov_ynqe030dn().b[14][1]++, defaultTimeRange));
    const report =
    /* istanbul ignore next */
    (cov_ynqe030dn().s[90]++, {
      connectionId,
      generatedAt: now,
      timeRange: range,
      overallScore: 0,
      metrics: {},
      summary: {
        strengths: [],
        weaknesses: [],
        recommendations: []
      }
    });
    let totalScore =
    /* istanbul ignore next */
    (cov_ynqe030dn().s[91]++, 0);
    let metricCount =
    /* istanbul ignore next */
    (cov_ynqe030dn().s[92]++, 0);
    // Analyze each metric type
    /* istanbul ignore next */
    cov_ynqe030dn().s[93]++;
    for (const metricType of Object.values(MetricType)) {
      const data =
      /* istanbul ignore next */
      (cov_ynqe030dn().s[94]++, this.getPerformanceData(connectionId, metricType, range));
      /* istanbul ignore next */
      cov_ynqe030dn().s[95]++;
      if (data.length === 0) {
        /* istanbul ignore next */
        cov_ynqe030dn().b[15][0]++;
        cov_ynqe030dn().s[96]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_ynqe030dn().b[15][1]++;
      }
      const trend =
      /* istanbul ignore next */
      (cov_ynqe030dn().s[97]++, this.analyzeTrend(connectionId, metricType, range));
      const currentValue =
      /* istanbul ignore next */
      (cov_ynqe030dn().s[98]++, data[data.length - 1].value);
      const averageValue =
      /* istanbul ignore next */
      (cov_ynqe030dn().s[99]++, data.reduce((sum, point) => {
        /* istanbul ignore next */
        cov_ynqe030dn().f[15]++;
        cov_ynqe030dn().s[100]++;
        return sum + point.value;
      }, 0) / data.length);
      const benchmark =
      /* istanbul ignore next */
      (cov_ynqe030dn().s[101]++, this.getBenchmarkRating(metricType, currentValue));
      const recommendations =
      /* istanbul ignore next */
      (cov_ynqe030dn().s[102]++, this.generateRecommendations(metricType, currentValue, trend));
      /* istanbul ignore next */
      cov_ynqe030dn().s[103]++;
      report.metrics[metricType] = {
        current: currentValue,
        average: averageValue,
        trend: trend,
        benchmark,
        recommendations
      };
      // Calculate metric score
      const metricScore =
      /* istanbul ignore next */
      (cov_ynqe030dn().s[104]++, this.calculateMetricScore(metricType, currentValue));
      /* istanbul ignore next */
      cov_ynqe030dn().s[105]++;
      totalScore += metricScore;
      /* istanbul ignore next */
      cov_ynqe030dn().s[106]++;
      metricCount++;
      // Add to summary
      /* istanbul ignore next */
      cov_ynqe030dn().s[107]++;
      if (
      /* istanbul ignore next */
      (cov_ynqe030dn().b[17][0]++, benchmark === 'EXCELLENT') ||
      /* istanbul ignore next */
      (cov_ynqe030dn().b[17][1]++, benchmark === 'GOOD')) {
        /* istanbul ignore next */
        cov_ynqe030dn().b[16][0]++;
        cov_ynqe030dn().s[108]++;
        report.summary.strengths.push(`${metricType}: ${benchmark.toLowerCase()}`);
      } else {
        /* istanbul ignore next */
        cov_ynqe030dn().b[16][1]++;
        cov_ynqe030dn().s[109]++;
        report.summary.weaknesses.push(`${metricType}: ${benchmark.toLowerCase()}`);
      }
      /* istanbul ignore next */
      cov_ynqe030dn().s[110]++;
      report.summary.recommendations.push(...recommendations);
    }
    // Calculate overall score
    /* istanbul ignore next */
    cov_ynqe030dn().s[111]++;
    report.overallScore = metricCount > 0 ?
    /* istanbul ignore next */
    (cov_ynqe030dn().b[18][0]++, totalScore / metricCount) :
    /* istanbul ignore next */
    (cov_ynqe030dn().b[18][1]++, 0);
    /* istanbul ignore next */
    cov_ynqe030dn().s[112]++;
    this.logger.info(`Generated performance report for connection: ${connectionId}`, {
      overallScore: report.overallScore,
      timeRange: range
    });
    /* istanbul ignore next */
    cov_ynqe030dn().s[113]++;
    this.emit('reportGenerated', report);
    /* istanbul ignore next */
    cov_ynqe030dn().s[114]++;
    return report;
  }
  /**
   * Get performance benchmarks
   *
   * @returns Map of performance benchmarks
   */
  getBenchmarks() {
    /* istanbul ignore next */
    cov_ynqe030dn().f[16]++;
    cov_ynqe030dn().s[115]++;
    return new Map(this.benchmarks);
  }
  /**
   * Update performance benchmark
   *
   * @param metricType - Metric type
   * @param benchmark - New benchmark values
   */
  updateBenchmark(metricType, benchmark) {
    /* istanbul ignore next */
    cov_ynqe030dn().f[17]++;
    cov_ynqe030dn().s[116]++;
    this.benchmarks.set(metricType, benchmark);
    /* istanbul ignore next */
    cov_ynqe030dn().s[117]++;
    this.logger.info(`Updated performance benchmark for ${metricType}`, benchmark);
    /* istanbul ignore next */
    cov_ynqe030dn().s[118]++;
    this.emit('benchmarkUpdated', metricType, benchmark);
  }
  /**
   * Setup event listeners
   */
  setupEventListeners() {
    /* istanbul ignore next */
    cov_ynqe030dn().f[18]++;
    cov_ynqe030dn().s[119]++;
    // Listen for new tunnel connections
    this.tunnelManager.on('tunnelConnected', connection => {
      /* istanbul ignore next */
      cov_ynqe030dn().f[19]++;
      cov_ynqe030dn().s[120]++;
      if (this.isCollecting) {
        /* istanbul ignore next */
        cov_ynqe030dn().b[19][0]++;
        cov_ynqe030dn().s[121]++;
        this.startCollectionForConnection(connection.id);
      } else
      /* istanbul ignore next */
      {
        cov_ynqe030dn().b[19][1]++;
      }
    });
    // Listen for tunnel disconnections
    /* istanbul ignore next */
    cov_ynqe030dn().s[122]++;
    this.tunnelManager.on('tunnelDisconnected', connection => {
      /* istanbul ignore next */
      cov_ynqe030dn().f[20]++;
      cov_ynqe030dn().s[123]++;
      this.stopCollectionForConnection(connection.id);
    });
  }
  /**
   * Initialize performance benchmarks
   */
  initializeBenchmarks() {
    /* istanbul ignore next */
    cov_ynqe030dn().f[21]++;
    cov_ynqe030dn().s[124]++;
    this.benchmarks = new Map([[MetricType.LATENCY, {
      metricType: MetricType.LATENCY,
      excellent: 50,
      good: 100,
      acceptable: 500,
      poor: 1000,
      unit: 'ms',
      description: 'Connection latency'
    }], [MetricType.THROUGHPUT, {
      metricType: MetricType.THROUGHPUT,
      excellent: 10240,
      // 10 KB/s
      good: 5120,
      // 5 KB/s
      acceptable: 1024,
      // 1 KB/s
      poor: 512,
      // 512 B/s
      unit: 'bytes/s',
      description: 'Data throughput'
    }], [MetricType.PACKET_LOSS, {
      metricType: MetricType.PACKET_LOSS,
      excellent: 0,
      good: 1,
      acceptable: 5,
      poor: 10,
      unit: '%',
      description: 'Packet loss percentage'
    }], [MetricType.CONNECTION_TIME, {
      metricType: MetricType.CONNECTION_TIME,
      excellent: 1000,
      // 1 second
      good: 3000,
      // 3 seconds
      acceptable: 10000,
      // 10 seconds
      poor: 30000,
      // 30 seconds
      unit: 'ms',
      description: 'Time to establish connection'
    }], [MetricType.UPTIME, {
      metricType: MetricType.UPTIME,
      excellent: 99.9,
      good: 99.5,
      acceptable: 99.0,
      poor: 95.0,
      unit: '%',
      description: 'Connection uptime percentage'
    }], [MetricType.ERROR_RATE, {
      metricType: MetricType.ERROR_RATE,
      excellent: 0,
      good: 1,
      acceptable: 5,
      poor: 10,
      unit: '%',
      description: 'Error rate percentage'
    }]]);
  }
  /**
   * Collect performance data for a connection
   *
   * @param connectionId - Connection identifier
   */
  async collectPerformanceData(connectionId) {
    /* istanbul ignore next */
    cov_ynqe030dn().f[22]++;
    const connection =
    /* istanbul ignore next */
    (cov_ynqe030dn().s[125]++, this.tunnelManager.getConnection(connectionId));
    /* istanbul ignore next */
    cov_ynqe030dn().s[126]++;
    if (!connection) {
      /* istanbul ignore next */
      cov_ynqe030dn().b[20][0]++;
      cov_ynqe030dn().s[127]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_ynqe030dn().b[20][1]++;
    }
    const timestamp =
    /* istanbul ignore next */
    (cov_ynqe030dn().s[128]++, new Date());
    const dataPoints =
    /* istanbul ignore next */
    (cov_ynqe030dn().s[129]++, []);
    /* istanbul ignore next */
    cov_ynqe030dn().s[130]++;
    try {
      // Get health metrics
      const healthMetrics =
      /* istanbul ignore next */
      (cov_ynqe030dn().s[131]++, this.healthMonitor.getHealthMetrics(connectionId));
      /* istanbul ignore next */
      cov_ynqe030dn().s[132]++;
      if (healthMetrics) {
        /* istanbul ignore next */
        cov_ynqe030dn().b[21][0]++;
        cov_ynqe030dn().s[133]++;
        dataPoints.push({
          timestamp,
          connectionId,
          metricType: MetricType.LATENCY,
          value: healthMetrics.latency,
          unit: 'ms'
        }, {
          timestamp,
          connectionId,
          metricType: MetricType.THROUGHPUT,
          value: healthMetrics.throughput,
          unit: 'bytes/s'
        }, {
          timestamp,
          connectionId,
          metricType: MetricType.PACKET_LOSS,
          value: healthMetrics.packetLoss,
          unit: '%'
        });
      } else
      /* istanbul ignore next */
      {
        cov_ynqe030dn().b[21][1]++;
      }
      // Get state statistics
      const stateStats =
      /* istanbul ignore next */
      (cov_ynqe030dn().s[134]++, this.stateTracker.getStatistics(connectionId));
      /* istanbul ignore next */
      cov_ynqe030dn().s[135]++;
      if (stateStats) {
        /* istanbul ignore next */
        cov_ynqe030dn().b[22][0]++;
        cov_ynqe030dn().s[136]++;
        dataPoints.push({
          timestamp,
          connectionId,
          metricType: MetricType.UPTIME,
          value: stateStats.reliability,
          unit: '%'
        }, {
          timestamp,
          connectionId,
          metricType: MetricType.CONNECTION_TIME,
          value: stateStats.averageConnectionTime,
          unit: 'ms'
        });
        // Calculate error rate
        const totalAttempts =
        /* istanbul ignore next */
        (cov_ynqe030dn().s[137]++, stateStats.connectionAttempts);
        const errorRate =
        /* istanbul ignore next */
        (cov_ynqe030dn().s[138]++, totalAttempts > 0 ?
        /* istanbul ignore next */
        (cov_ynqe030dn().b[23][0]++, stateStats.failedConnections / totalAttempts * 100) :
        /* istanbul ignore next */
        (cov_ynqe030dn().b[23][1]++, 0));
        /* istanbul ignore next */
        cov_ynqe030dn().s[139]++;
        dataPoints.push({
          timestamp,
          connectionId,
          metricType: MetricType.ERROR_RATE,
          value: errorRate,
          unit: '%'
        });
      } else
      /* istanbul ignore next */
      {
        cov_ynqe030dn().b[22][1]++;
      }
      // Store data points
      const connectionData =
      /* istanbul ignore next */
      (cov_ynqe030dn().s[140]++,
      /* istanbul ignore next */
      (cov_ynqe030dn().b[24][0]++, this.performanceData.get(connectionId)) ||
      /* istanbul ignore next */
      (cov_ynqe030dn().b[24][1]++, []));
      /* istanbul ignore next */
      cov_ynqe030dn().s[141]++;
      connectionData.push(...dataPoints);
      // Clean up old data
      /* istanbul ignore next */
      cov_ynqe030dn().s[142]++;
      this.cleanupOldData(connectionId);
      // Check for performance alerts
      /* istanbul ignore next */
      cov_ynqe030dn().s[143]++;
      if (this.config.enablePerformanceAlerts) {
        /* istanbul ignore next */
        cov_ynqe030dn().b[25][0]++;
        cov_ynqe030dn().s[144]++;
        this.checkPerformanceAlerts(dataPoints);
      } else
      /* istanbul ignore next */
      {
        cov_ynqe030dn().b[25][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_ynqe030dn().s[145]++;
      this.logger.error(`Failed to collect performance data for connection ${connectionId}`, error);
    }
  }
  /**
   * Clean up old performance data
   *
   * @param connectionId - Connection identifier
   */
  cleanupOldData(connectionId) {
    /* istanbul ignore next */
    cov_ynqe030dn().f[23]++;
    const data =
    /* istanbul ignore next */
    (cov_ynqe030dn().s[146]++, this.performanceData.get(connectionId));
    /* istanbul ignore next */
    cov_ynqe030dn().s[147]++;
    if (!data) {
      /* istanbul ignore next */
      cov_ynqe030dn().b[26][0]++;
      cov_ynqe030dn().s[148]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_ynqe030dn().b[26][1]++;
    }
    const cutoffTime =
    /* istanbul ignore next */
    (cov_ynqe030dn().s[149]++, Date.now() - this.config.retentionPeriod);
    const filteredData =
    /* istanbul ignore next */
    (cov_ynqe030dn().s[150]++, data.filter(point => {
      /* istanbul ignore next */
      cov_ynqe030dn().f[24]++;
      cov_ynqe030dn().s[151]++;
      return point.timestamp.getTime() > cutoffTime;
    }));
    /* istanbul ignore next */
    cov_ynqe030dn().s[152]++;
    this.performanceData.set(connectionId, filteredData);
  }
  /**
   * Check for performance alerts
   *
   * @param dataPoints - Performance data points to check
   */
  checkPerformanceAlerts(dataPoints) {
    /* istanbul ignore next */
    cov_ynqe030dn().f[25]++;
    cov_ynqe030dn().s[153]++;
    for (const dataPoint of dataPoints) {
      const threshold =
      /* istanbul ignore next */
      (cov_ynqe030dn().s[154]++, this.config.alertThresholds[dataPoint.metricType]);
      /* istanbul ignore next */
      cov_ynqe030dn().s[155]++;
      if (threshold === undefined) {
        /* istanbul ignore next */
        cov_ynqe030dn().b[27][0]++;
        cov_ynqe030dn().s[156]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_ynqe030dn().b[27][1]++;
      }
      let alertTriggered =
      /* istanbul ignore next */
      (cov_ynqe030dn().s[157]++, false);
      let alertMessage =
      /* istanbul ignore next */
      (cov_ynqe030dn().s[158]++, '');
      /* istanbul ignore next */
      cov_ynqe030dn().s[159]++;
      switch (dataPoint.metricType) {
        case MetricType.LATENCY:
          /* istanbul ignore next */
          cov_ynqe030dn().b[28][0]++;
        case MetricType.CONNECTION_TIME:
          /* istanbul ignore next */
          cov_ynqe030dn().b[28][1]++;
          cov_ynqe030dn().s[160]++;
          if (dataPoint.value > threshold) {
            /* istanbul ignore next */
            cov_ynqe030dn().b[29][0]++;
            cov_ynqe030dn().s[161]++;
            alertTriggered = true;
            /* istanbul ignore next */
            cov_ynqe030dn().s[162]++;
            alertMessage = `High ${dataPoint.metricType.toLowerCase()}: ${dataPoint.value}${dataPoint.unit}`;
          } else
          /* istanbul ignore next */
          {
            cov_ynqe030dn().b[29][1]++;
          }
          cov_ynqe030dn().s[163]++;
          break;
        case MetricType.PACKET_LOSS:
          /* istanbul ignore next */
          cov_ynqe030dn().b[28][2]++;
        case MetricType.ERROR_RATE:
          /* istanbul ignore next */
          cov_ynqe030dn().b[28][3]++;
          cov_ynqe030dn().s[164]++;
          if (dataPoint.value > threshold) {
            /* istanbul ignore next */
            cov_ynqe030dn().b[30][0]++;
            cov_ynqe030dn().s[165]++;
            alertTriggered = true;
            /* istanbul ignore next */
            cov_ynqe030dn().s[166]++;
            alertMessage = `High ${dataPoint.metricType.toLowerCase()}: ${dataPoint.value}${dataPoint.unit}`;
          } else
          /* istanbul ignore next */
          {
            cov_ynqe030dn().b[30][1]++;
          }
          cov_ynqe030dn().s[167]++;
          break;
        case MetricType.THROUGHPUT:
          /* istanbul ignore next */
          cov_ynqe030dn().b[28][4]++;
          cov_ynqe030dn().s[168]++;
          if (dataPoint.value < threshold) {
            /* istanbul ignore next */
            cov_ynqe030dn().b[31][0]++;
            cov_ynqe030dn().s[169]++;
            alertTriggered = true;
            /* istanbul ignore next */
            cov_ynqe030dn().s[170]++;
            alertMessage = `Low ${dataPoint.metricType.toLowerCase()}: ${dataPoint.value}${dataPoint.unit}`;
          } else
          /* istanbul ignore next */
          {
            cov_ynqe030dn().b[31][1]++;
          }
          cov_ynqe030dn().s[171]++;
          break;
        case MetricType.UPTIME:
          /* istanbul ignore next */
          cov_ynqe030dn().b[28][5]++;
          cov_ynqe030dn().s[172]++;
          if (dataPoint.value < threshold) {
            /* istanbul ignore next */
            cov_ynqe030dn().b[32][0]++;
            cov_ynqe030dn().s[173]++;
            alertTriggered = true;
            /* istanbul ignore next */
            cov_ynqe030dn().s[174]++;
            alertMessage = `Low ${dataPoint.metricType.toLowerCase()}: ${dataPoint.value}${dataPoint.unit}`;
          } else
          /* istanbul ignore next */
          {
            cov_ynqe030dn().b[32][1]++;
          }
          cov_ynqe030dn().s[175]++;
          break;
      }
      /* istanbul ignore next */
      cov_ynqe030dn().s[176]++;
      if (alertTriggered) {
        /* istanbul ignore next */
        cov_ynqe030dn().b[33][0]++;
        cov_ynqe030dn().s[177]++;
        this.logger.warn(`Performance alert: ${alertMessage}`, {
          connectionId: dataPoint.connectionId,
          metricType: dataPoint.metricType,
          value: dataPoint.value,
          threshold
        });
        /* istanbul ignore next */
        cov_ynqe030dn().s[178]++;
        this.emit('performanceAlert', {
          connectionId: dataPoint.connectionId,
          metricType: dataPoint.metricType,
          value: dataPoint.value,
          threshold,
          message: alertMessage,
          timestamp: dataPoint.timestamp
        });
      } else
      /* istanbul ignore next */
      {
        cov_ynqe030dn().b[33][1]++;
      }
    }
  }
  /**
   * Calculate trend direction and statistics
   *
   * @param values - Array of values
   * @param timestamps - Array of timestamps
   * @returns Trend analysis
   */
  calculateTrend(values, timestamps) {
    /* istanbul ignore next */
    cov_ynqe030dn().f[26]++;
    cov_ynqe030dn().s[179]++;
    if (values.length < 2) {
      /* istanbul ignore next */
      cov_ynqe030dn().b[34][0]++;
      cov_ynqe030dn().s[180]++;
      return {
        direction: 'STABLE',
        changePercentage: 0,
        confidence: 0
      };
    } else
    /* istanbul ignore next */
    {
      cov_ynqe030dn().b[34][1]++;
    }
    // Calculate linear regression
    const n =
    /* istanbul ignore next */
    (cov_ynqe030dn().s[181]++, values.length);
    const sumX =
    /* istanbul ignore next */
    (cov_ynqe030dn().s[182]++, timestamps.reduce((sum, t) => {
      /* istanbul ignore next */
      cov_ynqe030dn().f[27]++;
      cov_ynqe030dn().s[183]++;
      return sum + t;
    }, 0));
    const sumY =
    /* istanbul ignore next */
    (cov_ynqe030dn().s[184]++, values.reduce((sum, v) => {
      /* istanbul ignore next */
      cov_ynqe030dn().f[28]++;
      cov_ynqe030dn().s[185]++;
      return sum + v;
    }, 0));
    const sumXY =
    /* istanbul ignore next */
    (cov_ynqe030dn().s[186]++, timestamps.reduce((sum, t, i) => {
      /* istanbul ignore next */
      cov_ynqe030dn().f[29]++;
      cov_ynqe030dn().s[187]++;
      return sum + t * values[i];
    }, 0));
    const sumXX =
    /* istanbul ignore next */
    (cov_ynqe030dn().s[188]++, timestamps.reduce((sum, t) => {
      /* istanbul ignore next */
      cov_ynqe030dn().f[30]++;
      cov_ynqe030dn().s[189]++;
      return sum + t * t;
    }, 0));
    const slope =
    /* istanbul ignore next */
    (cov_ynqe030dn().s[190]++, (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX));
    const intercept =
    /* istanbul ignore next */
    (cov_ynqe030dn().s[191]++, (sumY - slope * sumX) / n);
    // Calculate R-squared for confidence
    const meanY =
    /* istanbul ignore next */
    (cov_ynqe030dn().s[192]++, sumY / n);
    const ssRes =
    /* istanbul ignore next */
    (cov_ynqe030dn().s[193]++, values.reduce((sum, v, i) => {
      /* istanbul ignore next */
      cov_ynqe030dn().f[31]++;
      const predicted =
      /* istanbul ignore next */
      (cov_ynqe030dn().s[194]++, slope * timestamps[i] + intercept);
      /* istanbul ignore next */
      cov_ynqe030dn().s[195]++;
      return sum + Math.pow(v - predicted, 2);
    }, 0));
    const ssTot =
    /* istanbul ignore next */
    (cov_ynqe030dn().s[196]++, values.reduce((sum, v) => {
      /* istanbul ignore next */
      cov_ynqe030dn().f[32]++;
      cov_ynqe030dn().s[197]++;
      return sum + Math.pow(v - meanY, 2);
    }, 0));
    const rSquared =
    /* istanbul ignore next */
    (cov_ynqe030dn().s[198]++, 1 - ssRes / ssTot);
    // Determine trend direction
    const firstValue =
    /* istanbul ignore next */
    (cov_ynqe030dn().s[199]++, values[0]);
    const lastValue =
    /* istanbul ignore next */
    (cov_ynqe030dn().s[200]++, values[values.length - 1]);
    const changePercentage =
    /* istanbul ignore next */
    (cov_ynqe030dn().s[201]++, firstValue !== 0 ?
    /* istanbul ignore next */
    (cov_ynqe030dn().b[35][0]++, (lastValue - firstValue) / firstValue * 100) :
    /* istanbul ignore next */
    (cov_ynqe030dn().b[35][1]++, 0));
    let direction;
    /* istanbul ignore next */
    cov_ynqe030dn().s[202]++;
    if (Math.abs(changePercentage) < 5) {
      /* istanbul ignore next */
      cov_ynqe030dn().b[36][0]++;
      cov_ynqe030dn().s[203]++;
      direction = 'STABLE';
    } else {
      /* istanbul ignore next */
      cov_ynqe030dn().b[36][1]++;
      cov_ynqe030dn().s[204]++;
      if (changePercentage > 0) {
        /* istanbul ignore next */
        cov_ynqe030dn().b[37][0]++;
        cov_ynqe030dn().s[205]++;
        direction = 'IMPROVING';
      } else {
        /* istanbul ignore next */
        cov_ynqe030dn().b[37][1]++;
        cov_ynqe030dn().s[206]++;
        direction = 'DEGRADING';
      }
    }
    /* istanbul ignore next */
    cov_ynqe030dn().s[207]++;
    return {
      direction,
      changePercentage: Math.abs(changePercentage),
      confidence: Math.max(0, Math.min(100, rSquared * 100))
    };
  }
  /**
   * Calculate basic statistics
   *
   * @param values - Array of values
   * @returns Statistical measures
   */
  calculateStatistics(values) {
    /* istanbul ignore next */
    cov_ynqe030dn().f[33]++;
    cov_ynqe030dn().s[208]++;
    if (values.length === 0) {
      /* istanbul ignore next */
      cov_ynqe030dn().b[38][0]++;
      cov_ynqe030dn().s[209]++;
      return {
        mean: 0,
        min: 0,
        max: 0,
        standardDeviation: 0
      };
    } else
    /* istanbul ignore next */
    {
      cov_ynqe030dn().b[38][1]++;
    }
    const mean =
    /* istanbul ignore next */
    (cov_ynqe030dn().s[210]++, values.reduce((sum, v) => {
      /* istanbul ignore next */
      cov_ynqe030dn().f[34]++;
      cov_ynqe030dn().s[211]++;
      return sum + v;
    }, 0) / values.length);
    const min =
    /* istanbul ignore next */
    (cov_ynqe030dn().s[212]++, Math.min(...values));
    const max =
    /* istanbul ignore next */
    (cov_ynqe030dn().s[213]++, Math.max(...values));
    const variance =
    /* istanbul ignore next */
    (cov_ynqe030dn().s[214]++, values.reduce((sum, v) => {
      /* istanbul ignore next */
      cov_ynqe030dn().f[35]++;
      cov_ynqe030dn().s[215]++;
      return sum + Math.pow(v - mean, 2);
    }, 0) / values.length);
    const standardDeviation =
    /* istanbul ignore next */
    (cov_ynqe030dn().s[216]++, Math.sqrt(variance));
    /* istanbul ignore next */
    cov_ynqe030dn().s[217]++;
    return {
      mean,
      min,
      max,
      standardDeviation
    };
  }
  /**
   * Get benchmark rating for a metric value
   *
   * @param metricType - Metric type
   * @param value - Metric value
   * @returns Benchmark rating
   */
  getBenchmarkRating(metricType, value) {
    /* istanbul ignore next */
    cov_ynqe030dn().f[36]++;
    const benchmark =
    /* istanbul ignore next */
    (cov_ynqe030dn().s[218]++, this.benchmarks.get(metricType));
    /* istanbul ignore next */
    cov_ynqe030dn().s[219]++;
    if (!benchmark) {
      /* istanbul ignore next */
      cov_ynqe030dn().b[39][0]++;
      cov_ynqe030dn().s[220]++;
      return 'ACCEPTABLE';
    } else
    /* istanbul ignore next */
    {
      cov_ynqe030dn().b[39][1]++;
    }
    // For metrics where lower is better (latency, packet loss, error rate)
    const lowerIsBetter =
    /* istanbul ignore next */
    (cov_ynqe030dn().s[221]++, [MetricType.LATENCY, MetricType.PACKET_LOSS, MetricType.ERROR_RATE, MetricType.CONNECTION_TIME]);
    /* istanbul ignore next */
    cov_ynqe030dn().s[222]++;
    if (lowerIsBetter.includes(metricType)) {
      /* istanbul ignore next */
      cov_ynqe030dn().b[40][0]++;
      cov_ynqe030dn().s[223]++;
      if (value <= benchmark.excellent) {
        /* istanbul ignore next */
        cov_ynqe030dn().b[41][0]++;
        cov_ynqe030dn().s[224]++;
        return 'EXCELLENT';
      } else
      /* istanbul ignore next */
      {
        cov_ynqe030dn().b[41][1]++;
      }
      cov_ynqe030dn().s[225]++;
      if (value <= benchmark.good) {
        /* istanbul ignore next */
        cov_ynqe030dn().b[42][0]++;
        cov_ynqe030dn().s[226]++;
        return 'GOOD';
      } else
      /* istanbul ignore next */
      {
        cov_ynqe030dn().b[42][1]++;
      }
      cov_ynqe030dn().s[227]++;
      if (value <= benchmark.acceptable) {
        /* istanbul ignore next */
        cov_ynqe030dn().b[43][0]++;
        cov_ynqe030dn().s[228]++;
        return 'ACCEPTABLE';
      } else
      /* istanbul ignore next */
      {
        cov_ynqe030dn().b[43][1]++;
      }
      cov_ynqe030dn().s[229]++;
      return 'POOR';
    } else {
      /* istanbul ignore next */
      cov_ynqe030dn().b[40][1]++;
      cov_ynqe030dn().s[230]++;
      // For metrics where higher is better (throughput, uptime)
      if (value >= benchmark.excellent) {
        /* istanbul ignore next */
        cov_ynqe030dn().b[44][0]++;
        cov_ynqe030dn().s[231]++;
        return 'EXCELLENT';
      } else
      /* istanbul ignore next */
      {
        cov_ynqe030dn().b[44][1]++;
      }
      cov_ynqe030dn().s[232]++;
      if (value >= benchmark.good) {
        /* istanbul ignore next */
        cov_ynqe030dn().b[45][0]++;
        cov_ynqe030dn().s[233]++;
        return 'GOOD';
      } else
      /* istanbul ignore next */
      {
        cov_ynqe030dn().b[45][1]++;
      }
      cov_ynqe030dn().s[234]++;
      if (value >= benchmark.acceptable) {
        /* istanbul ignore next */
        cov_ynqe030dn().b[46][0]++;
        cov_ynqe030dn().s[235]++;
        return 'ACCEPTABLE';
      } else
      /* istanbul ignore next */
      {
        cov_ynqe030dn().b[46][1]++;
      }
      cov_ynqe030dn().s[236]++;
      return 'POOR';
    }
  }
  /**
   * Calculate metric score (0-100)
   *
   * @param metricType - Metric type
   * @param value - Metric value
   * @returns Score (0-100)
   */
  calculateMetricScore(metricType, value) {
    /* istanbul ignore next */
    cov_ynqe030dn().f[37]++;
    const rating =
    /* istanbul ignore next */
    (cov_ynqe030dn().s[237]++, this.getBenchmarkRating(metricType, value));
    /* istanbul ignore next */
    cov_ynqe030dn().s[238]++;
    switch (rating) {
      case 'EXCELLENT':
        /* istanbul ignore next */
        cov_ynqe030dn().b[47][0]++;
        cov_ynqe030dn().s[239]++;
        return 100;
      case 'GOOD':
        /* istanbul ignore next */
        cov_ynqe030dn().b[47][1]++;
        cov_ynqe030dn().s[240]++;
        return 80;
      case 'ACCEPTABLE':
        /* istanbul ignore next */
        cov_ynqe030dn().b[47][2]++;
        cov_ynqe030dn().s[241]++;
        return 60;
      case 'POOR':
        /* istanbul ignore next */
        cov_ynqe030dn().b[47][3]++;
        cov_ynqe030dn().s[242]++;
        return 30;
      default:
        /* istanbul ignore next */
        cov_ynqe030dn().b[47][4]++;
        cov_ynqe030dn().s[243]++;
        return 50;
    }
  }
  /**
   * Generate recommendations based on metric performance
   *
   * @param metricType - Metric type
   * @param value - Current value
   * @param trend - Performance trend
   * @returns Array of recommendations
   */
  generateRecommendations(metricType, value, trend) {
    /* istanbul ignore next */
    cov_ynqe030dn().f[38]++;
    const recommendations =
    /* istanbul ignore next */
    (cov_ynqe030dn().s[244]++, []);
    const rating =
    /* istanbul ignore next */
    (cov_ynqe030dn().s[245]++, this.getBenchmarkRating(metricType, value));
    /* istanbul ignore next */
    cov_ynqe030dn().s[246]++;
    if (
    /* istanbul ignore next */
    (cov_ynqe030dn().b[49][0]++, rating === 'POOR') ||
    /* istanbul ignore next */
    (cov_ynqe030dn().b[49][1]++, rating === 'ACCEPTABLE')) {
      /* istanbul ignore next */
      cov_ynqe030dn().b[48][0]++;
      cov_ynqe030dn().s[247]++;
      switch (metricType) {
        case MetricType.LATENCY:
          /* istanbul ignore next */
          cov_ynqe030dn().b[50][0]++;
          cov_ynqe030dn().s[248]++;
          recommendations.push('Consider optimizing network routing or switching to a closer server');
          /* istanbul ignore next */
          cov_ynqe030dn().s[249]++;
          break;
        case MetricType.THROUGHPUT:
          /* istanbul ignore next */
          cov_ynqe030dn().b[50][1]++;
          cov_ynqe030dn().s[250]++;
          recommendations.push('Check for bandwidth limitations or network congestion');
          /* istanbul ignore next */
          cov_ynqe030dn().s[251]++;
          break;
        case MetricType.PACKET_LOSS:
          /* istanbul ignore next */
          cov_ynqe030dn().b[50][2]++;
          cov_ynqe030dn().s[252]++;
          recommendations.push('Investigate network stability and consider alternative routing');
          /* istanbul ignore next */
          cov_ynqe030dn().s[253]++;
          break;
        case MetricType.CONNECTION_TIME:
          /* istanbul ignore next */
          cov_ynqe030dn().b[50][3]++;
          cov_ynqe030dn().s[254]++;
          recommendations.push('Optimize SSH configuration or check server responsiveness');
          /* istanbul ignore next */
          cov_ynqe030dn().s[255]++;
          break;
        case MetricType.UPTIME:
          /* istanbul ignore next */
          cov_ynqe030dn().b[50][4]++;
          cov_ynqe030dn().s[256]++;
          recommendations.push('Implement better connection monitoring and auto-reconnection');
          /* istanbul ignore next */
          cov_ynqe030dn().s[257]++;
          break;
        case MetricType.ERROR_RATE:
          /* istanbul ignore next */
          cov_ynqe030dn().b[50][5]++;
          cov_ynqe030dn().s[258]++;
          recommendations.push('Review error logs and implement better error handling');
          /* istanbul ignore next */
          cov_ynqe030dn().s[259]++;
          break;
      }
    } else
    /* istanbul ignore next */
    {
      cov_ynqe030dn().b[48][1]++;
    }
    cov_ynqe030dn().s[260]++;
    if (
    /* istanbul ignore next */
    (cov_ynqe030dn().b[52][0]++, trend) &&
    /* istanbul ignore next */
    (cov_ynqe030dn().b[52][1]++, trend.trend === 'DEGRADING') &&
    /* istanbul ignore next */
    (cov_ynqe030dn().b[52][2]++, trend.confidence > 70)) {
      /* istanbul ignore next */
      cov_ynqe030dn().b[51][0]++;
      cov_ynqe030dn().s[261]++;
      recommendations.push(`Performance is degrading (${trend.changePercentage.toFixed(1)}% decline)`);
    } else
    /* istanbul ignore next */
    {
      cov_ynqe030dn().b[51][1]++;
    }
    cov_ynqe030dn().s[262]++;
    return recommendations;
  }
  /**
   * Start automatic report generation
   */
  startAutoReporting() {
    /* istanbul ignore next */
    cov_ynqe030dn().f[39]++;
    cov_ynqe030dn().s[263]++;
    if (this.reportingTimer) {
      /* istanbul ignore next */
      cov_ynqe030dn().b[53][0]++;
      cov_ynqe030dn().s[264]++;
      clearInterval(this.reportingTimer);
    } else
    /* istanbul ignore next */
    {
      cov_ynqe030dn().b[53][1]++;
    }
    cov_ynqe030dn().s[265]++;
    this.reportingTimer = setInterval(() => {
      /* istanbul ignore next */
      cov_ynqe030dn().f[40]++;
      const connections =
      /* istanbul ignore next */
      (cov_ynqe030dn().s[266]++, this.tunnelManager.getAllConnections());
      /* istanbul ignore next */
      cov_ynqe030dn().s[267]++;
      for (const connection of connections) {
        /* istanbul ignore next */
        cov_ynqe030dn().s[268]++;
        try {
          const report =
          /* istanbul ignore next */
          (cov_ynqe030dn().s[269]++, this.generateReport(connection.id));
          /* istanbul ignore next */
          cov_ynqe030dn().s[270]++;
          this.emit('automaticReport', report);
        } catch (error) {
          /* istanbul ignore next */
          cov_ynqe030dn().s[271]++;
          this.logger.error(`Failed to generate automatic report for connection ${connection.id}`, error);
        }
      }
    }, this.config.reportInterval);
    /* istanbul ignore next */
    cov_ynqe030dn().s[272]++;
    this.logger.info('Started automatic performance reporting');
  }
  /**
   * Cleanup analytics resources
   */
  cleanup() {
    /* istanbul ignore next */
    cov_ynqe030dn().f[41]++;
    cov_ynqe030dn().s[273]++;
    this.stopCollection();
    /* istanbul ignore next */
    cov_ynqe030dn().s[274]++;
    this.performanceData.clear();
    /* istanbul ignore next */
    cov_ynqe030dn().s[275]++;
    this.logger.info('Tunnel performance analytics cleanup completed');
  }
}
/* istanbul ignore next */
cov_ynqe030dn().s[276]++;
exports.TunnelPerformanceAnalytics = TunnelPerformanceAnalytics;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,