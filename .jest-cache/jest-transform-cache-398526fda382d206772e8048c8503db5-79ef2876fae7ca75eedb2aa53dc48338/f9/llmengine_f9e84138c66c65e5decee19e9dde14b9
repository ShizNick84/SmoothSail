2f2d90971240de60fb8f31256258a5ab
"use strict";

/**
 * =============================================================================
 * LLM ENGINE - INTEL NUC OPTIMIZED AI INTEGRATION
 * =============================================================================
 *
 * This module implements a Large Language Model engine specifically optimized
 * for Intel NUC hardware constraints (i5 CPU, 12GB RAM). The system provides
 * market analysis, trading decision explanations, and adaptive learning
 * capabilities while maintaining optimal performance.
 *
 * Hardware Optimization Strategy:
 * - Use quantized models (4-bit/8-bit) to reduce memory footprint
 * - Implement CPU-optimized inference with ONNX Runtime
 * - Dynamic model loading/unloading based on memory pressure
 * - Efficient batching and caching strategies
 *
 * Security Considerations:
 * - All model inputs are sanitized and validated
 * - Model outputs are filtered for sensitive information
 * - Secure model storage and integrity verification
 *
 * @author AI Crypto Trading System
 * @version 1.0.0
 * @license PROPRIETARY
 * =============================================================================
 */
/* istanbul ignore next */
function cov_11yd5y45ij() {
  var path = "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\ai\\llm-engine.ts";
  var hash = "b0af28e8bd862c6dfb8ed48a67e424f6a6afb45b";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\ai\\llm-engine.ts",
    statementMap: {
      "0": {
        start: {
          line: 28,
          column: 0
        },
        end: {
          line: 28,
          column: 62
        }
      },
      "1": {
        start: {
          line: 29,
          column: 0
        },
        end: {
          line: 29,
          column: 27
        }
      },
      "2": {
        start: {
          line: 30,
          column: 17
        },
        end: {
          line: 30,
          column: 34
        }
      },
      "3": {
        start: {
          line: 31,
          column: 17
        },
        end: {
          line: 31,
          column: 49
        }
      },
      "4": {
        start: {
          line: 37,
          column: 19
        },
        end: {
          line: 37,
          column: 23
        }
      },
      "5": {
        start: {
          line: 38,
          column: 20
        },
        end: {
          line: 38,
          column: 24
        }
      },
      "6": {
        start: {
          line: 41,
          column: 20
        },
        end: {
          line: 41,
          column: 25
        }
      },
      "7": {
        start: {
          line: 43,
          column: 22
        },
        end: {
          line: 43,
          column: 24
        }
      },
      "8": {
        start: {
          line: 44,
          column: 17
        },
        end: {
          line: 44,
          column: 26
        }
      },
      "9": {
        start: {
          line: 46,
          column: 23
        },
        end: {
          line: 86,
          column: 5
        }
      },
      "10": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 88,
          column: 16
        }
      },
      "11": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 89,
          column: 43
        }
      },
      "12": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 90,
          column: 47
        }
      },
      "13": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 101,
          column: 10
        }
      },
      "14": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 102,
          column: 85
        }
      },
      "15": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 128,
          column: 9
        }
      },
      "16": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 110,
          column: 80
        }
      },
      "17": {
        start: {
          line: 112,
          column: 36
        },
        end: {
          line: 112,
          column: 82
        }
      },
      "18": {
        start: {
          line: 114,
          column: 33
        },
        end: {
          line: 114,
          column: 79
        }
      },
      "19": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 116,
          column: 47
        }
      },
      "20": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 118,
          column: 50
        }
      },
      "21": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 120,
          column: 46
        }
      },
      "22": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 121,
          column: 38
        }
      },
      "23": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 122,
          column: 74
        }
      },
      "24": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 123,
          column: 67
        }
      },
      "25": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 126,
          column: 79
        }
      },
      "26": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 127,
          column: 82
        }
      },
      "27": {
        start: {
          line: 135,
          column: 32
        },
        end: {
          line: 135,
          column: 64
        }
      },
      "28": {
        start: {
          line: 136,
          column: 25
        },
        end: {
          line: 136,
          column: 50
        }
      },
      "29": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 137,
          column: 107
        }
      },
      "30": {
        start: {
          line: 139,
          column: 29
        },
        end: {
          line: 139,
          column: 119
        }
      },
      "31": {
        start: {
          line: 139,
          column: 67
        },
        end: {
          line: 139,
          column: 118
        }
      },
      "32": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 143,
          column: 9
        }
      },
      "33": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 141,
          column: 95
        }
      },
      "34": {
        start: {
          line: 142,
          column: 12
        },
        end: {
          line: 142,
          column: 75
        }
      },
      "35": {
        start: {
          line: 145,
          column: 30
        },
        end: {
          line: 145,
          column: 45
        }
      },
      "36": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 147,
          column: 97
        }
      },
      "37": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 148,
          column: 117
        }
      },
      "38": {
        start: {
          line: 149,
          column: 8
        },
        end: {
          line: 149,
          column: 29
        }
      },
      "39": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 178,
          column: 9
        }
      },
      "40": {
        start: {
          line: 157,
          column: 12
        },
        end: {
          line: 157,
          column: 82
        }
      },
      "41": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 164,
          column: 13
        }
      },
      "42": {
        start: {
          line: 160,
          column: 16
        },
        end: {
          line: 160,
          column: 80
        }
      },
      "43": {
        start: {
          line: 161,
          column: 16
        },
        end: {
          line: 161,
          column: 48
        }
      },
      "44": {
        start: {
          line: 162,
          column: 16
        },
        end: {
          line: 162,
          column: 66
        }
      },
      "45": {
        start: {
          line: 163,
          column: 16
        },
        end: {
          line: 163,
          column: 23
        }
      },
      "46": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 166,
          column: 67
        }
      },
      "47": {
        start: {
          line: 168,
          column: 34
        },
        end: {
          line: 168,
          column: 71
        }
      },
      "48": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 170,
          column: 70
        }
      },
      "49": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 171,
          column: 47
        }
      },
      "50": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 172,
          column: 44
        }
      },
      "51": {
        start: {
          line: 173,
          column: 12
        },
        end: {
          line: 173,
          column: 64
        }
      },
      "52": {
        start: {
          line: 176,
          column: 12
        },
        end: {
          line: 176,
          column: 68
        }
      },
      "53": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 177,
          column: 70
        }
      },
      "54": {
        start: {
          line: 187,
          column: 26
        },
        end: {
          line: 196,
          column: 9
        }
      },
      "55": {
        start: {
          line: 191,
          column: 38
        },
        end: {
          line: 191,
          column: 69
        }
      },
      "56": {
        start: {
          line: 192,
          column: 16
        },
        end: {
          line: 192,
          column: 81
        }
      },
      "57": {
        start: {
          line: 192,
          column: 45
        },
        end: {
          line: 192,
          column: 79
        }
      },
      "58": {
        start: {
          line: 194,
          column: 16
        },
        end: {
          line: 194,
          column: 56
        }
      },
      "59": {
        start: {
          line: 197,
          column: 8
        },
        end: {
          line: 197,
          column: 96
        }
      },
      "60": {
        start: {
          line: 198,
          column: 8
        },
        end: {
          line: 198,
          column: 25
        }
      },
      "61": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 208,
          column: 9
        }
      },
      "62": {
        start: {
          line: 207,
          column: 12
        },
        end: {
          line: 207,
          column: 276
        }
      },
      "63": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 211,
          column: 9
        }
      },
      "64": {
        start: {
          line: 210,
          column: 12
        },
        end: {
          line: 210,
          column: 269
        }
      },
      "65": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 212,
          column: 167
        }
      },
      "66": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 232,
          column: 9
        }
      },
      "67": {
        start: {
          line: 221,
          column: 12
        },
        end: {
          line: 221,
          column: 79
        }
      },
      "68": {
        start: {
          line: 223,
          column: 28
        },
        end: {
          line: 223,
          column: 32
        }
      },
      "69": {
        start: {
          line: 224,
          column: 12
        },
        end: {
          line: 226,
          column: 13
        }
      },
      "70": {
        start: {
          line: 225,
          column: 16
        },
        end: {
          line: 225,
          column: 71
        }
      },
      "71": {
        start: {
          line: 227,
          column: 12
        },
        end: {
          line: 227,
          column: 63
        }
      },
      "72": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 230,
          column: 83
        }
      },
      "73": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 231,
          column: 24
        }
      },
      "74": {
        start: {
          line: 239,
          column: 8
        },
        end: {
          line: 253,
          column: 9
        }
      },
      "75": {
        start: {
          line: 240,
          column: 12
        },
        end: {
          line: 240,
          column: 72
        }
      },
      "76": {
        start: {
          line: 241,
          column: 30
        },
        end: {
          line: 241,
          column: 69
        }
      },
      "77": {
        start: {
          line: 242,
          column: 30
        },
        end: {
          line: 242,
          column: 40
        }
      },
      "78": {
        start: {
          line: 243,
          column: 29
        },
        end: {
          line: 243,
          column: 72
        }
      },
      "79": {
        start: {
          line: 244,
          column: 34
        },
        end: {
          line: 244,
          column: 56
        }
      },
      "80": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 247,
          column: 13
        }
      },
      "81": {
        start: {
          line: 246,
          column: 16
        },
        end: {
          line: 246,
          column: 67
        }
      },
      "82": {
        start: {
          line: 248,
          column: 12
        },
        end: {
          line: 248,
          column: 103
        }
      },
      "83": {
        start: {
          line: 251,
          column: 12
        },
        end: {
          line: 251,
          column: 87
        }
      },
      "84": {
        start: {
          line: 252,
          column: 12
        },
        end: {
          line: 252,
          column: 24
        }
      },
      "85": {
        start: {
          line: 260,
          column: 26
        },
        end: {
          line: 260,
          column: 36
        }
      },
      "86": {
        start: {
          line: 261,
          column: 8
        },
        end: {
          line: 278,
          column: 18
        }
      },
      "87": {
        start: {
          line: 262,
          column: 12
        },
        end: {
          line: 277,
          column: 13
        }
      },
      "88": {
        start: {
          line: 263,
          column: 40
        },
        end: {
          line: 263,
          column: 86
        }
      },
      "89": {
        start: {
          line: 264,
          column: 16
        },
        end: {
          line: 269,
          column: 18
        }
      },
      "90": {
        start: {
          line: 271,
          column: 16
        },
        end: {
          line: 271,
          column: 66
        }
      },
      "91": {
        start: {
          line: 273,
          column: 16
        },
        end: {
          line: 273,
          column: 56
        }
      },
      "92": {
        start: {
          line: 276,
          column: 16
        },
        end: {
          line: 276,
          column: 83
        }
      },
      "93": {
        start: {
          line: 285,
          column: 57
        },
        end: {
          line: 285,
          column: 80
        }
      },
      "94": {
        start: {
          line: 287,
          column: 8
        },
        end: {
          line: 290,
          column: 9
        }
      },
      "95": {
        start: {
          line: 288,
          column: 12
        },
        end: {
          line: 288,
          column: 98
        }
      },
      "96": {
        start: {
          line: 289,
          column: 12
        },
        end: {
          line: 289,
          column: 51
        }
      },
      "97": {
        start: {
          line: 292,
          column: 8
        },
        end: {
          line: 295,
          column: 9
        }
      },
      "98": {
        start: {
          line: 293,
          column: 12
        },
        end: {
          line: 293,
          column: 93
        }
      },
      "99": {
        start: {
          line: 294,
          column: 12
        },
        end: {
          line: 294,
          column: 48
        }
      },
      "100": {
        start: {
          line: 297,
          column: 8
        },
        end: {
          line: 300,
          column: 9
        }
      },
      "101": {
        start: {
          line: 298,
          column: 12
        },
        end: {
          line: 298,
          column: 92
        }
      },
      "102": {
        start: {
          line: 299,
          column: 12
        },
        end: {
          line: 299,
          column: 48
        }
      },
      "103": {
        start: {
          line: 307,
          column: 8
        },
        end: {
          line: 307,
          column: 69
        }
      },
      "104": {
        start: {
          line: 309,
          column: 33
        },
        end: {
          line: 309,
          column: 74
        }
      },
      "105": {
        start: {
          line: 310,
          column: 29
        },
        end: {
          line: 310,
          column: 108
        }
      },
      "106": {
        start: {
          line: 310,
          column: 65
        },
        end: {
          line: 310,
          column: 107
        }
      },
      "107": {
        start: {
          line: 311,
          column: 8
        },
        end: {
          line: 322,
          column: 9
        }
      },
      "108": {
        start: {
          line: 312,
          column: 12
        },
        end: {
          line: 312,
          column: 93
        }
      },
      "109": {
        start: {
          line: 313,
          column: 12
        },
        end: {
          line: 313,
          column: 49
        }
      },
      "110": {
        start: {
          line: 317,
          column: 12
        },
        end: {
          line: 321,
          column: 13
        }
      },
      "111": {
        start: {
          line: 318,
          column: 16
        },
        end: {
          line: 318,
          column: 91
        }
      },
      "112": {
        start: {
          line: 319,
          column: 16
        },
        end: {
          line: 319,
          column: 103
        }
      },
      "113": {
        start: {
          line: 320,
          column: 16
        },
        end: {
          line: 320,
          column: 81
        }
      },
      "114": {
        start: {
          line: 329,
          column: 8
        },
        end: {
          line: 329,
          column: 66
        }
      },
      "115": {
        start: {
          line: 330,
          column: 8
        },
        end: {
          line: 333,
          column: 9
        }
      },
      "116": {
        start: {
          line: 331,
          column: 12
        },
        end: {
          line: 331,
          column: 89
        }
      },
      "117": {
        start: {
          line: 332,
          column: 12
        },
        end: {
          line: 332,
          column: 94
        }
      },
      "118": {
        start: {
          line: 340,
          column: 8
        },
        end: {
          line: 340,
          column: 65
        }
      },
      "119": {
        start: {
          line: 341,
          column: 8
        },
        end: {
          line: 347,
          column: 9
        }
      },
      "120": {
        start: {
          line: 343,
          column: 12
        },
        end: {
          line: 343,
          column: 91
        }
      },
      "121": {
        start: {
          line: 345,
          column: 12
        },
        end: {
          line: 345,
          column: 95
        }
      },
      "122": {
        start: {
          line: 346,
          column: 12
        },
        end: {
          line: 346,
          column: 88
        }
      },
      "123": {
        start: {
          line: 354,
          column: 8
        },
        end: {
          line: 369,
          column: 9
        }
      },
      "124": {
        start: {
          line: 355,
          column: 12
        },
        end: {
          line: 355,
          column: 123
        }
      },
      "125": {
        start: {
          line: 357,
          column: 12
        },
        end: {
          line: 357,
          column: 49
        }
      },
      "126": {
        start: {
          line: 359,
          column: 12
        },
        end: {
          line: 359,
          column: 50
        }
      },
      "127": {
        start: {
          line: 360,
          column: 12
        },
        end: {
          line: 360,
          column: 74
        }
      },
      "128": {
        start: {
          line: 361,
          column: 12
        },
        end: {
          line: 364,
          column: 15
        }
      },
      "129": {
        start: {
          line: 367,
          column: 12
        },
        end: {
          line: 367,
          column: 70
        }
      },
      "130": {
        start: {
          line: 368,
          column: 12
        },
        end: {
          line: 368,
          column: 24
        }
      },
      "131": {
        start: {
          line: 376,
          column: 8
        },
        end: {
          line: 376,
          column: 46
        }
      },
      "132": {
        start: {
          line: 383,
          column: 8
        },
        end: {
          line: 383,
          column: 67
        }
      },
      "133": {
        start: {
          line: 389,
          column: 8
        },
        end: {
          line: 389,
          column: 65
        }
      },
      "134": {
        start: {
          line: 396,
          column: 8
        },
        end: {
          line: 409,
          column: 9
        }
      },
      "135": {
        start: {
          line: 397,
          column: 12
        },
        end: {
          line: 397,
          column: 67
        }
      },
      "136": {
        start: {
          line: 399,
          column: 12
        },
        end: {
          line: 399,
          column: 36
        }
      },
      "137": {
        start: {
          line: 401,
          column: 12
        },
        end: {
          line: 401,
          column: 38
        }
      },
      "138": {
        start: {
          line: 402,
          column: 12
        },
        end: {
          line: 402,
          column: 37
        }
      },
      "139": {
        start: {
          line: 403,
          column: 12
        },
        end: {
          line: 403,
          column: 39
        }
      },
      "140": {
        start: {
          line: 404,
          column: 12
        },
        end: {
          line: 404,
          column: 68
        }
      },
      "141": {
        start: {
          line: 407,
          column: 12
        },
        end: {
          line: 407,
          column: 80
        }
      },
      "142": {
        start: {
          line: 408,
          column: 12
        },
        end: {
          line: 408,
          column: 24
        }
      },
      "143": {
        start: {
          line: 412,
          column: 0
        },
        end: {
          line: 412,
          column: 30
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 87,
            column: 4
          },
          end: {
            line: 87,
            column: 5
          }
        },
        loc: {
          start: {
            line: 87,
            column: 48
          },
          end: {
            line: 103,
            column: 5
          }
        },
        line: 87
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 108,
            column: 4
          },
          end: {
            line: 108,
            column: 5
          }
        },
        loc: {
          start: {
            line: 108,
            column: 23
          },
          end: {
            line: 129,
            column: 5
          }
        },
        line: 108
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 134,
            column: 4
          },
          end: {
            line: 134,
            column: 5
          }
        },
        loc: {
          start: {
            line: 134,
            column: 46
          },
          end: {
            line: 150,
            column: 5
          }
        },
        line: 134
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 139,
            column: 58
          },
          end: {
            line: 139,
            column: 59
          }
        },
        loc: {
          start: {
            line: 139,
            column: 67
          },
          end: {
            line: 139,
            column: 118
          }
        },
        line: 139
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 155,
            column: 4
          },
          end: {
            line: 155,
            column: 5
          }
        },
        loc: {
          start: {
            line: 155,
            column: 33
          },
          end: {
            line: 179,
            column: 5
          }
        },
        line: 155
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 184,
            column: 4
          },
          end: {
            line: 184,
            column: 5
          }
        },
        loc: {
          start: {
            line: 184,
            column: 32
          },
          end: {
            line: 199,
            column: 5
          }
        },
        line: 184
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 189,
            column: 21
          },
          end: {
            line: 189,
            column: 22
          }
        },
        loc: {
          start: {
            line: 189,
            column: 38
          },
          end: {
            line: 195,
            column: 13
          }
        },
        line: 189
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 192,
            column: 34
          },
          end: {
            line: 192,
            column: 35
          }
        },
        loc: {
          start: {
            line: 192,
            column: 45
          },
          end: {
            line: 192,
            column: 79
          }
        },
        line: 192
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 204,
            column: 4
          },
          end: {
            line: 204,
            column: 5
          }
        },
        loc: {
          start: {
            line: 204,
            column: 32
          },
          end: {
            line: 213,
            column: 5
          }
        },
        line: 204
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 218,
            column: 4
          },
          end: {
            line: 218,
            column: 5
          }
        },
        loc: {
          start: {
            line: 218,
            column: 42
          },
          end: {
            line: 233,
            column: 5
          }
        },
        line: 218
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 238,
            column: 4
          },
          end: {
            line: 238,
            column: 5
          }
        },
        loc: {
          start: {
            line: 238,
            column: 37
          },
          end: {
            line: 254,
            column: 5
          }
        },
        line: 238
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 259,
            column: 4
          },
          end: {
            line: 259,
            column: 5
          }
        },
        loc: {
          start: {
            line: 259,
            column: 33
          },
          end: {
            line: 279,
            column: 5
          }
        },
        line: 259
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 261,
            column: 20
          },
          end: {
            line: 261,
            column: 21
          }
        },
        loc: {
          start: {
            line: 261,
            column: 32
          },
          end: {
            line: 278,
            column: 9
          }
        },
        line: 261
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 284,
            column: 4
          },
          end: {
            line: 284,
            column: 5
          }
        },
        loc: {
          start: {
            line: 284,
            column: 39
          },
          end: {
            line: 301,
            column: 5
          }
        },
        line: 284
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 306,
            column: 4
          },
          end: {
            line: 306,
            column: 5
          }
        },
        loc: {
          start: {
            line: 306,
            column: 38
          },
          end: {
            line: 323,
            column: 5
          }
        },
        line: 306
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 310,
            column: 56
          },
          end: {
            line: 310,
            column: 57
          }
        },
        loc: {
          start: {
            line: 310,
            column: 65
          },
          end: {
            line: 310,
            column: 107
          }
        },
        line: 310
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 328,
            column: 4
          },
          end: {
            line: 328,
            column: 5
          }
        },
        loc: {
          start: {
            line: 328,
            column: 35
          },
          end: {
            line: 334,
            column: 5
          }
        },
        line: 328
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 339,
            column: 4
          },
          end: {
            line: 339,
            column: 5
          }
        },
        loc: {
          start: {
            line: 339,
            column: 35
          },
          end: {
            line: 348,
            column: 5
          }
        },
        line: 339
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 353,
            column: 4
          },
          end: {
            line: 353,
            column: 5
          }
        },
        loc: {
          start: {
            line: 353,
            column: 38
          },
          end: {
            line: 370,
            column: 5
          }
        },
        line: 353
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 375,
            column: 4
          },
          end: {
            line: 375,
            column: 5
          }
        },
        loc: {
          start: {
            line: 375,
            column: 28
          },
          end: {
            line: 377,
            column: 5
          }
        },
        line: 375
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 382,
            column: 4
          },
          end: {
            line: 382,
            column: 5
          }
        },
        loc: {
          start: {
            line: 382,
            column: 28
          },
          end: {
            line: 384,
            column: 5
          }
        },
        line: 382
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 388,
            column: 4
          },
          end: {
            line: 388,
            column: 5
          }
        },
        loc: {
          start: {
            line: 388,
            column: 14
          },
          end: {
            line: 390,
            column: 5
          }
        },
        line: 388
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 395,
            column: 4
          },
          end: {
            line: 395,
            column: 5
          }
        },
        loc: {
          start: {
            line: 395,
            column: 21
          },
          end: {
            line: 410,
            column: 5
          }
        },
        line: 395
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 140,
            column: 8
          },
          end: {
            line: 143,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 140,
            column: 8
          },
          end: {
            line: 143,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 140
      },
      "1": {
        loc: {
          start: {
            line: 159,
            column: 12
          },
          end: {
            line: 164,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 159,
            column: 12
          },
          end: {
            line: 164,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 159
      },
      "2": {
        loc: {
          start: {
            line: 206,
            column: 8
          },
          end: {
            line: 208,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 206,
            column: 8
          },
          end: {
            line: 208,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 206
      },
      "3": {
        loc: {
          start: {
            line: 209,
            column: 8
          },
          end: {
            line: 211,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 209,
            column: 8
          },
          end: {
            line: 211,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 209
      },
      "4": {
        loc: {
          start: {
            line: 224,
            column: 12
          },
          end: {
            line: 226,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 224,
            column: 12
          },
          end: {
            line: 226,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 224
      },
      "5": {
        loc: {
          start: {
            line: 245,
            column: 12
          },
          end: {
            line: 247,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 245,
            column: 12
          },
          end: {
            line: 247,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 245
      },
      "6": {
        loc: {
          start: {
            line: 245,
            column: 16
          },
          end: {
            line: 245,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 245,
            column: 16
          },
          end: {
            line: 245,
            column: 25
          }
        }, {
          start: {
            line: 245,
            column: 29
          },
          end: {
            line: 245,
            column: 49
          }
        }],
        line: 245
      },
      "7": {
        loc: {
          start: {
            line: 287,
            column: 8
          },
          end: {
            line: 290,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 287,
            column: 8
          },
          end: {
            line: 290,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 287
      },
      "8": {
        loc: {
          start: {
            line: 292,
            column: 8
          },
          end: {
            line: 295,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 292,
            column: 8
          },
          end: {
            line: 295,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 292
      },
      "9": {
        loc: {
          start: {
            line: 297,
            column: 8
          },
          end: {
            line: 300,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 297,
            column: 8
          },
          end: {
            line: 300,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 297
      },
      "10": {
        loc: {
          start: {
            line: 309,
            column: 33
          },
          end: {
            line: 309,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 309,
            column: 33
          },
          end: {
            line: 309,
            column: 69
          }
        }, {
          start: {
            line: 309,
            column: 73
          },
          end: {
            line: 309,
            column: 74
          }
        }],
        line: 309
      },
      "11": {
        loc: {
          start: {
            line: 311,
            column: 8
          },
          end: {
            line: 322,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 311,
            column: 8
          },
          end: {
            line: 322,
            column: 9
          }
        }, {
          start: {
            line: 315,
            column: 13
          },
          end: {
            line: 322,
            column: 9
          }
        }],
        line: 311
      },
      "12": {
        loc: {
          start: {
            line: 311,
            column: 12
          },
          end: {
            line: 311,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 311,
            column: 12
          },
          end: {
            line: 311,
            column: 24
          }
        }, {
          start: {
            line: 311,
            column: 28
          },
          end: {
            line: 311,
            column: 62
          }
        }],
        line: 311
      },
      "13": {
        loc: {
          start: {
            line: 317,
            column: 12
          },
          end: {
            line: 321,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 317,
            column: 12
          },
          end: {
            line: 321,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 317
      },
      "14": {
        loc: {
          start: {
            line: 330,
            column: 8
          },
          end: {
            line: 333,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 330,
            column: 8
          },
          end: {
            line: 333,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 330
      },
      "15": {
        loc: {
          start: {
            line: 330,
            column: 12
          },
          end: {
            line: 330,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 330,
            column: 12
          },
          end: {
            line: 330,
            column: 29
          }
        }, {
          start: {
            line: 330,
            column: 33
          },
          end: {
            line: 330,
            column: 65
          }
        }],
        line: 330
      },
      "16": {
        loc: {
          start: {
            line: 341,
            column: 8
          },
          end: {
            line: 347,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 341,
            column: 8
          },
          end: {
            line: 347,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 341
      },
      "17": {
        loc: {
          start: {
            line: 383,
            column: 15
          },
          end: {
            line: 383,
            column: 66
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 383,
            column: 35
          },
          end: {
            line: 383,
            column: 59
          }
        }, {
          start: {
            line: 383,
            column: 62
          },
          end: {
            line: 383,
            column: 66
          }
        }],
        line: 383
      },
      "18": {
        loc: {
          start: {
            line: 389,
            column: 15
          },
          end: {
            line: 389,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 389,
            column: 15
          },
          end: {
            line: 389,
            column: 33
          }
        }, {
          start: {
            line: 389,
            column: 37
          },
          end: {
            line: 389,
            column: 64
          }
        }],
        line: 389
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\ai\\llm-engine.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\ai\\llm-engine.ts"],
      sourcesContent: ["/**\r\n * =============================================================================\r\n * LLM ENGINE - INTEL NUC OPTIMIZED AI INTEGRATION\r\n * =============================================================================\r\n * \r\n * This module implements a Large Language Model engine specifically optimized\r\n * for Intel NUC hardware constraints (i5 CPU, 12GB RAM). The system provides\r\n * market analysis, trading decision explanations, and adaptive learning\r\n * capabilities while maintaining optimal performance.\r\n * \r\n * Hardware Optimization Strategy:\r\n * - Use quantized models (4-bit/8-bit) to reduce memory footprint\r\n * - Implement CPU-optimized inference with ONNX Runtime\r\n * - Dynamic model loading/unloading based on memory pressure\r\n * - Efficient batching and caching strategies\r\n * \r\n * Security Considerations:\r\n * - All model inputs are sanitized and validated\r\n * - Model outputs are filtered for sensitive information\r\n * - Secure model storage and integrity verification\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport { EventEmitter } from 'events';\r\nimport { logger } from '@/core/logging/logger';\r\nimport { SystemMonitor } from '@/infrastructure/system-monitor';\r\nimport { SecurityManager } from '@/security/security-manager';\r\n\r\n/**\r\n * Interface for LLM model configuration optimized for Intel NUC\r\n */\r\ninterface LLMModelConfig {\r\n  modelName: string;\r\n  modelPath: string;\r\n  quantization: '4bit' | '8bit' | '16bit';\r\n  maxTokens: number;\r\n  temperature: number;\r\n  topP: number;\r\n  topK: number;\r\n  memoryRequirement: number; // MB\r\n  cpuThreads: number;\r\n  contextWindow: number;\r\n  batchSize: number;\r\n}\r\n\r\n/**\r\n * Interface for market analysis results from LLM\r\n */\r\ninterface MarketAnalysis {\r\n  sentiment: number; // -100 to 100\r\n  volatility: 'LOW' | 'MEDIUM' | 'HIGH';\r\n  trend: 'BULLISH' | 'BEARISH' | 'SIDEWAYS';\r\n  confidence: number; // 0-100\r\n  keyFactors: string[];\r\n  recommendations: string[];\r\n  riskAssessment: string;\r\n  timeframe: string;\r\n  timestamp: Date;\r\n}\r\n\r\n/**\r\n * Interface for trading decision explanations\r\n */\r\ninterface TradingDecisionExplanation {\r\n  decision: 'BUY' | 'SELL' | 'HOLD';\r\n  reasoning: string[];\r\n  confidence: number;\r\n  riskFactors: string[];\r\n  expectedOutcome: string;\r\n  alternativeScenarios: string[];\r\n  timestamp: Date;\r\n}\r\n\r\n/**\r\n * Interface for model performance metrics\r\n */\r\ninterface ModelMetrics {\r\n  inferenceTime: number; // milliseconds\r\n  memoryUsage: number; // MB\r\n  cpuUsage: number; // percentage\r\n  tokensPerSecond: number;\r\n  accuracy: number; // 0-100\r\n  uptime: number; // seconds\r\n  totalInferences: number;\r\n  errorRate: number; // percentage\r\n}\r\n\r\n/**\r\n * Interface for adaptive learning feedback\r\n */\r\ninterface LearningFeedback {\r\n  predictionId: string;\r\n  actualOutcome: 'CORRECT' | 'INCORRECT' | 'PARTIAL';\r\n  accuracy: number;\r\n  marketConditions: Record<string, any>;\r\n  timestamp: Date;\r\n  notes?: string;\r\n}\r\n\r\n/**\r\n * LLM Engine class optimized for Intel NUC hardware constraints\r\n * Provides AI-powered market analysis and trading decision support\r\n */\r\nexport class LLMEngine extends EventEmitter {\r\n  private currentModel: LLMModelConfig | null = null;\r\n  private modelInstance: any = null;\r\n  private systemMonitor: SystemMonitor;\r\n  private securityManager: SecurityManager;\r\n  private isInitialized: boolean = false;\r\n  private performanceMetrics: ModelMetrics;\r\n  private learningHistory: LearningFeedback[] = [];\r\n  private modelCache: Map<string, any> = new Map();\r\n\r\n  // Optimized model configurations for Intel NUC\r\n  private readonly AVAILABLE_MODELS: LLMModelConfig[] = [\r\n    {\r\n      modelName: 'phi-3-mini-4k-instruct-q4',\r\n      modelPath: './models/phi-3-mini-4k-instruct-q4.onnx',\r\n      quantization: '4bit',\r\n      maxTokens: 2048,\r\n      temperature: 0.7,\r\n      topP: 0.9,\r\n      topK: 40,\r\n      memoryRequirement: 2048, // 2GB\r\n      cpuThreads: 4,\r\n      contextWindow: 4096,\r\n      batchSize: 1\r\n    },\r\n    {\r\n      modelName: 'llama-3.2-1b-instruct-q8',\r\n      modelPath: './models/llama-3.2-1b-instruct-q8.onnx',\r\n      quantization: '8bit',\r\n      maxTokens: 2048,\r\n      temperature: 0.7,\r\n      topP: 0.9,\r\n      topK: 40,\r\n      memoryRequirement: 1536, // 1.5GB\r\n      cpuThreads: 4,\r\n      contextWindow: 2048,\r\n      batchSize: 1\r\n    },\r\n    {\r\n      modelName: 'tinyllama-1.1b-chat-q4',\r\n      modelPath: './models/tinyllama-1.1b-chat-q4.onnx',\r\n      quantization: '4bit',\r\n      maxTokens: 1024,\r\n      temperature: 0.8,\r\n      topP: 0.95,\r\n      topK: 50,\r\n      memoryRequirement: 768, // 768MB\r\n      cpuThreads: 2,\r\n      contextWindow: 2048,\r\n      batchSize: 1\r\n    }\r\n  ];\r\n\r\n  constructor(systemMonitor: SystemMonitor, securityManager: SecurityManager) {\r\n    super();\r\n    this.systemMonitor = systemMonitor;\r\n    this.securityManager = securityManager;\r\n    \r\n    // Initialize performance metrics\r\n    this.performanceMetrics = {\r\n      inferenceTime: 0,\r\n      memoryUsage: 0,\r\n      cpuUsage: 0,\r\n      tokensPerSecond: 0,\r\n      accuracy: 0,\r\n      uptime: 0,\r\n      totalInferences: 0,\r\n      errorRate: 0\r\n    };\r\n\r\n    logger.info('\uD83E\uDD16 LLM Engine initialized for Intel NUC optimization');\r\n  }\r\n\r\n  /**\r\n   * Initialize the LLM engine with optimal model selection\r\n   * Automatically selects the best model based on available system resources\r\n   */\r\n  public async initialize(): Promise<void> {\r\n    try {\r\n      logger.info('\uD83D\uDE80 Initializing LLM Engine for Intel NUC...');\r\n\r\n      // Get current system resources\r\n      const systemResources = await this.systemMonitor.getCurrentResources();\r\n      \r\n      // Select optimal model based on available resources\r\n      const optimalModel = await this.selectOptimalModel(systemResources);\r\n      \r\n      // Load the selected model\r\n      await this.loadModel(optimalModel);\r\n      \r\n      // Verify model functionality\r\n      await this.verifyModelFunctionality();\r\n      \r\n      // Start performance monitoring\r\n      this.startPerformanceMonitoring();\r\n      \r\n      this.isInitialized = true;\r\n      logger.info('\u2705 LLM Engine initialized successfully');\r\n      \r\n      this.emit('initialized', { model: this.currentModel });\r\n      \r\n    } catch (error) {\r\n      logger.error('\u274C Failed to initialize LLM Engine:', error);\r\n      throw new Error(`LLM Engine initialization failed: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Select the optimal model based on current system resources\r\n   * Prioritizes models that fit within memory constraints while maximizing capability\r\n   */\r\n  private async selectOptimalModel(systemResources: any): Promise<LLMModelConfig> {\r\n    const availableMemory = systemResources.memory.available;\r\n    const cpuCores = systemResources.cpu.cores;\r\n    \r\n    logger.info(`\uD83D\uDCCA System resources - Memory: ${availableMemory}MB, CPU cores: ${cpuCores}`);\r\n    \r\n    // Filter models that fit within memory constraints (leave 2GB buffer)\r\n    const viableModels = this.AVAILABLE_MODELS.filter(\r\n      model => model.memoryRequirement <= (availableMemory - 2048)\r\n    );\r\n    \r\n    if (viableModels.length === 0) {\r\n      logger.warn('\u26A0\uFE0F No models fit in available memory, using smallest model');\r\n      return this.AVAILABLE_MODELS[this.AVAILABLE_MODELS.length - 1];\r\n    }\r\n    \r\n    // Select the most capable model that fits\r\n    const selectedModel = viableModels[0];\r\n    \r\n    // Optimize CPU threads based on available cores\r\n    selectedModel.cpuThreads = Math.min(selectedModel.cpuThreads, Math.max(1, cpuCores - 1));\r\n    \r\n    logger.info(`\uD83C\uDFAF Selected model: ${selectedModel.modelName} (${selectedModel.memoryRequirement}MB)`);\r\n    \r\n    return selectedModel;\r\n  }\r\n\r\n  /**\r\n   * Load and initialize the selected model\r\n   * Implements secure model loading with integrity verification\r\n   */\r\n  private async loadModel(modelConfig: LLMModelConfig): Promise<void> {\r\n    try {\r\n      logger.info(`\uD83D\uDCE5 Loading model: ${modelConfig.modelName}...`);\r\n      \r\n      // Check if model is already cached\r\n      if (this.modelCache.has(modelConfig.modelName)) {\r\n        this.modelInstance = this.modelCache.get(modelConfig.modelName);\r\n        this.currentModel = modelConfig;\r\n        logger.info('\u2705 Model loaded from cache');\r\n        return;\r\n      }\r\n      \r\n      // Verify model file integrity\r\n      await this.verifyModelIntegrity(modelConfig.modelPath);\r\n      \r\n      // Load model with ONNX Runtime (CPU optimized)\r\n      const modelInstance = await this.loadONNXModel(modelConfig);\r\n      \r\n      // Cache the loaded model\r\n      this.modelCache.set(modelConfig.modelName, modelInstance);\r\n      \r\n      this.modelInstance = modelInstance;\r\n      this.currentModel = modelConfig;\r\n      \r\n      logger.info('\u2705 Model loaded successfully');\r\n      \r\n    } catch (error) {\r\n      logger.error('\u274C Failed to load model:', error);\r\n      throw new Error(`Model loading failed: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load ONNX model with CPU optimization\r\n   * Implements efficient CPU-based inference for Intel NUC\r\n   */\r\n  private async loadONNXModel(config: LLMModelConfig): Promise<any> {\r\n    // This would typically use ONNX Runtime\r\n    // For now, we'll create a mock implementation that demonstrates the interface\r\n    \r\n    const mockModel = {\r\n      config,\r\n      predict: async (input: string): Promise<string> => {\r\n        // Simulate inference time based on model complexity\r\n        const inferenceTime = config.memoryRequirement / 1000; // Rough simulation\r\n        await new Promise(resolve => setTimeout(resolve, inferenceTime));\r\n        \r\n        // Mock response - in real implementation, this would be actual model inference\r\n        return this.generateMockResponse(input);\r\n      }\r\n    };\r\n    \r\n    logger.info(`\uD83D\uDD27 Mock ONNX model loaded with ${config.cpuThreads} CPU threads`);\r\n    \r\n    return mockModel;\r\n  }\r\n\r\n  /**\r\n   * Generate mock response for development/testing\r\n   * This will be replaced with actual model inference in production\r\n   */\r\n  private generateMockResponse(input: string): string {\r\n    // Simple mock responses based on input patterns\r\n    if (input.includes('market analysis')) {\r\n      return 'Based on current market conditions, I observe moderate bullish sentiment with increasing volume. Key resistance levels are being tested, suggesting potential breakout opportunities. Risk factors include regulatory uncertainty and macroeconomic headwinds.';\r\n    }\r\n    \r\n    if (input.includes('trading decision')) {\r\n      return 'The technical indicators suggest a BUY signal with 75% confidence. Moving averages are aligned bullishly, RSI shows momentum without being overbought, and volume confirms the trend. Recommended position size: 2% of portfolio with stop loss at -1%.';\r\n    }\r\n    \r\n    return 'Market analysis indicates neutral conditions with mixed signals. Recommend maintaining current positions and monitoring for clearer directional bias.';\r\n  }\r\n\r\n  /**\r\n   * Verify model file integrity using cryptographic hashes\r\n   * Ensures model hasn't been tampered with\r\n   */\r\n  private async verifyModelIntegrity(modelPath: string): Promise<void> {\r\n    try {\r\n      // In production, this would verify cryptographic signatures\r\n      logger.info(`\uD83D\uDD10 Verifying model integrity: ${modelPath}`);\r\n      \r\n      // Mock verification - in production, use actual file hash verification\r\n      const isValid = true; // await this.securityManager.verifyFileIntegrity(modelPath);\r\n      \r\n      if (!isValid) {\r\n        throw new Error('Model integrity verification failed');\r\n      }\r\n      \r\n      logger.info('\u2705 Model integrity verified');\r\n      \r\n    } catch (error) {\r\n      logger.error('\u274C Model integrity verification failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verify model functionality with test inference\r\n   * Ensures the loaded model is working correctly\r\n   */\r\n  private async verifyModelFunctionality(): Promise<void> {\r\n    try {\r\n      logger.info('\uD83E\uDDEA Verifying model functionality...');\r\n      \r\n      const testInput = 'Analyze current BTC market conditions';\r\n      const startTime = Date.now();\r\n      \r\n      const response = await this.modelInstance.predict(testInput);\r\n      \r\n      const inferenceTime = Date.now() - startTime;\r\n      \r\n      if (!response || response.length < 10) {\r\n        throw new Error('Model produced invalid response');\r\n      }\r\n      \r\n      logger.info(`\u2705 Model functionality verified (${inferenceTime}ms inference time)`);\r\n      \r\n    } catch (error) {\r\n      logger.error('\u274C Model functionality verification failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Start performance monitoring for the LLM engine\r\n   * Tracks resource usage and inference performance\r\n   */\r\n  private startPerformanceMonitoring(): void {\r\n    const startTime = Date.now();\r\n    \r\n    setInterval(async () => {\r\n      try {\r\n        const systemResources = await this.systemMonitor.getCurrentResources();\r\n        \r\n        this.performanceMetrics = {\r\n          ...this.performanceMetrics,\r\n          memoryUsage: systemResources.memory.used,\r\n          cpuUsage: systemResources.cpu.usage,\r\n          uptime: Math.floor((Date.now() - startTime) / 1000)\r\n        };\r\n        \r\n        // Emit performance metrics for monitoring\r\n        this.emit('performance', this.performanceMetrics);\r\n        \r\n        // Check for performance issues\r\n        await this.checkPerformanceThresholds();\r\n        \r\n      } catch (error) {\r\n        logger.error('\u274C Error in performance monitoring:', error);\r\n      }\r\n    }, 30000); // Monitor every 30 seconds\r\n  }\r\n\r\n  /**\r\n   * Check performance thresholds and trigger optimizations if needed\r\n   * Implements automatic performance management\r\n   */\r\n  private async checkPerformanceThresholds(): Promise<void> {\r\n    const { memoryUsage, cpuUsage, inferenceTime } = this.performanceMetrics;\r\n    \r\n    // Check memory pressure (>80% of available memory)\r\n    if (memoryUsage > 9600) { // 80% of 12GB\r\n      logger.warn('\u26A0\uFE0F High memory usage detected, considering model optimization');\r\n      await this.optimizeForMemoryPressure();\r\n    }\r\n    \r\n    // Check CPU usage (>90%)\r\n    if (cpuUsage > 90) {\r\n      logger.warn('\u26A0\uFE0F High CPU usage detected, reducing inference frequency');\r\n      await this.optimizeForCPUPressure();\r\n    }\r\n    \r\n    // Check inference time (>5 seconds is too slow for trading)\r\n    if (inferenceTime > 5000) {\r\n      logger.warn('\u26A0\uFE0F Slow inference detected, optimizing model parameters');\r\n      await this.optimizeInferenceSpeed();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Optimize model for memory pressure\r\n   * Switches to smaller model or adjusts parameters\r\n   */\r\n  private async optimizeForMemoryPressure(): Promise<void> {\r\n    logger.info('\uD83D\uDD27 Optimizing for memory pressure...');\r\n    \r\n    // Find a smaller model that uses less memory\r\n    const currentMemoryReq = this.currentModel?.memoryRequirement || 0;\r\n    const smallerModel = this.AVAILABLE_MODELS.find(\r\n      model => model.memoryRequirement < currentMemoryReq\r\n    );\r\n    \r\n    if (smallerModel && smallerModel !== this.currentModel) {\r\n      logger.info(`\uD83D\uDD04 Switching to smaller model: ${smallerModel.modelName}`);\r\n      await this.switchModel(smallerModel);\r\n    } else {\r\n      // Reduce batch size and context window\r\n      if (this.currentModel) {\r\n        this.currentModel.batchSize = Math.max(1, this.currentModel.batchSize - 1);\r\n        this.currentModel.contextWindow = Math.max(512, this.currentModel.contextWindow * 0.8);\r\n        logger.info('\uD83D\uDD27 Reduced batch size and context window');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Optimize model for CPU pressure\r\n   * Reduces CPU threads and inference frequency\r\n   */\r\n  private async optimizeForCPUPressure(): Promise<void> {\r\n    logger.info('\uD83D\uDD27 Optimizing for CPU pressure...');\r\n    \r\n    if (this.currentModel && this.currentModel.cpuThreads > 1) {\r\n      this.currentModel.cpuThreads = Math.max(1, this.currentModel.cpuThreads - 1);\r\n      logger.info(`\uD83D\uDD27 Reduced CPU threads to ${this.currentModel.cpuThreads}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Optimize inference speed\r\n   * Adjusts model parameters for faster inference\r\n   */\r\n  private async optimizeInferenceSpeed(): Promise<void> {\r\n    logger.info('\uD83D\uDD27 Optimizing inference speed...');\r\n    \r\n    if (this.currentModel) {\r\n      // Reduce max tokens for faster generation\r\n      this.currentModel.maxTokens = Math.max(256, this.currentModel.maxTokens * 0.8);\r\n      \r\n      // Increase temperature slightly for faster sampling\r\n      this.currentModel.temperature = Math.min(1.0, this.currentModel.temperature + 0.1);\r\n      \r\n      logger.info('\uD83D\uDD27 Adjusted model parameters for speed optimization');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Switch to a different model configuration\r\n   * Implements hot-swapping of models for optimization\r\n   */\r\n  private async switchModel(newModelConfig: LLMModelConfig): Promise<void> {\r\n    try {\r\n      logger.info(`\uD83D\uDD04 Switching model from ${this.currentModel?.modelName} to ${newModelConfig.modelName}`);\r\n      \r\n      // Load new model\r\n      await this.loadModel(newModelConfig);\r\n      \r\n      // Verify functionality\r\n      await this.verifyModelFunctionality();\r\n      \r\n      logger.info('\u2705 Model switch completed successfully');\r\n      \r\n      this.emit('modelSwitched', { \r\n        previousModel: this.currentModel?.modelName,\r\n        newModel: newModelConfig.modelName \r\n      });\r\n      \r\n    } catch (error) {\r\n      logger.error('\u274C Failed to switch model:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get current model performance metrics\r\n   * Returns comprehensive performance data\r\n   */\r\n  public getPerformanceMetrics(): ModelMetrics {\r\n    return { ...this.performanceMetrics };\r\n  }\r\n\r\n  /**\r\n   * Get current model configuration\r\n   * Returns the active model configuration\r\n   */\r\n  public getCurrentModelConfig(): LLMModelConfig | null {\r\n    return this.currentModel ? { ...this.currentModel } : null;\r\n  }\r\n\r\n  /**\r\n   * Check if the LLM engine is initialized and ready\r\n   */\r\n  public isReady(): boolean {\r\n    return this.isInitialized && this.modelInstance !== null;\r\n  }\r\n\r\n  /**\r\n   * Shutdown the LLM engine gracefully\r\n   * Cleans up resources and saves state\r\n   */\r\n  public async shutdown(): Promise<void> {\r\n    try {\r\n      logger.info('\uD83D\uDED1 Shutting down LLM Engine...');\r\n      \r\n      // Clear model cache to free memory\r\n      this.modelCache.clear();\r\n      \r\n      // Reset state\r\n      this.modelInstance = null;\r\n      this.currentModel = null;\r\n      this.isInitialized = false;\r\n      \r\n      logger.info('\u2705 LLM Engine shutdown completed');\r\n      \r\n    } catch (error) {\r\n      logger.error('\u274C Error during LLM Engine shutdown:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\n// Export types for use in other modules\r\nexport type {\r\n  LLMModelConfig,\r\n  MarketAnalysis,\r\n  TradingDecisionExplanation,\r\n  ModelMetrics,\r\n  LearningFeedback\r\n};"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "b0af28e8bd862c6dfb8ed48a67e424f6a6afb45b"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_11yd5y45ij = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_11yd5y45ij();
cov_11yd5y45ij().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_11yd5y45ij().s[1]++;
exports.LLMEngine = void 0;
const events_1 =
/* istanbul ignore next */
(cov_11yd5y45ij().s[2]++, require("events"));
const logger_1 =
/* istanbul ignore next */
(cov_11yd5y45ij().s[3]++, require("@/core/logging/logger"));
/**
 * LLM Engine class optimized for Intel NUC hardware constraints
 * Provides AI-powered market analysis and trading decision support
 */
class LLMEngine extends
/* istanbul ignore next */
(events_1.EventEmitter) {
  currentModel =
  /* istanbul ignore next */
  (cov_11yd5y45ij().s[4]++, null);
  modelInstance =
  /* istanbul ignore next */
  (cov_11yd5y45ij().s[5]++, null);
  systemMonitor;
  securityManager;
  isInitialized =
  /* istanbul ignore next */
  (cov_11yd5y45ij().s[6]++, false);
  performanceMetrics;
  learningHistory =
  /* istanbul ignore next */
  (cov_11yd5y45ij().s[7]++, []);
  modelCache =
  /* istanbul ignore next */
  (cov_11yd5y45ij().s[8]++, new Map());
  // Optimized model configurations for Intel NUC
  AVAILABLE_MODELS =
  /* istanbul ignore next */
  (cov_11yd5y45ij().s[9]++, [{
    modelName: 'phi-3-mini-4k-instruct-q4',
    modelPath: './models/phi-3-mini-4k-instruct-q4.onnx',
    quantization: '4bit',
    maxTokens: 2048,
    temperature: 0.7,
    topP: 0.9,
    topK: 40,
    memoryRequirement: 2048,
    // 2GB
    cpuThreads: 4,
    contextWindow: 4096,
    batchSize: 1
  }, {
    modelName: 'llama-3.2-1b-instruct-q8',
    modelPath: './models/llama-3.2-1b-instruct-q8.onnx',
    quantization: '8bit',
    maxTokens: 2048,
    temperature: 0.7,
    topP: 0.9,
    topK: 40,
    memoryRequirement: 1536,
    // 1.5GB
    cpuThreads: 4,
    contextWindow: 2048,
    batchSize: 1
  }, {
    modelName: 'tinyllama-1.1b-chat-q4',
    modelPath: './models/tinyllama-1.1b-chat-q4.onnx',
    quantization: '4bit',
    maxTokens: 1024,
    temperature: 0.8,
    topP: 0.95,
    topK: 50,
    memoryRequirement: 768,
    // 768MB
    cpuThreads: 2,
    contextWindow: 2048,
    batchSize: 1
  }]);
  constructor(systemMonitor, securityManager) {
    /* istanbul ignore next */
    cov_11yd5y45ij().f[0]++;
    cov_11yd5y45ij().s[10]++;
    super();
    /* istanbul ignore next */
    cov_11yd5y45ij().s[11]++;
    this.systemMonitor = systemMonitor;
    /* istanbul ignore next */
    cov_11yd5y45ij().s[12]++;
    this.securityManager = securityManager;
    // Initialize performance metrics
    /* istanbul ignore next */
    cov_11yd5y45ij().s[13]++;
    this.performanceMetrics = {
      inferenceTime: 0,
      memoryUsage: 0,
      cpuUsage: 0,
      tokensPerSecond: 0,
      accuracy: 0,
      uptime: 0,
      totalInferences: 0,
      errorRate: 0
    };
    /* istanbul ignore next */
    cov_11yd5y45ij().s[14]++;
    logger_1.logger.info('🤖 LLM Engine initialized for Intel NUC optimization');
  }
  /**
   * Initialize the LLM engine with optimal model selection
   * Automatically selects the best model based on available system resources
   */
  async initialize() {
    /* istanbul ignore next */
    cov_11yd5y45ij().f[1]++;
    cov_11yd5y45ij().s[15]++;
    try {
      /* istanbul ignore next */
      cov_11yd5y45ij().s[16]++;
      logger_1.logger.info('🚀 Initializing LLM Engine for Intel NUC...');
      // Get current system resources
      const systemResources =
      /* istanbul ignore next */
      (cov_11yd5y45ij().s[17]++, await this.systemMonitor.getCurrentResources());
      // Select optimal model based on available resources
      const optimalModel =
      /* istanbul ignore next */
      (cov_11yd5y45ij().s[18]++, await this.selectOptimalModel(systemResources));
      // Load the selected model
      /* istanbul ignore next */
      cov_11yd5y45ij().s[19]++;
      await this.loadModel(optimalModel);
      // Verify model functionality
      /* istanbul ignore next */
      cov_11yd5y45ij().s[20]++;
      await this.verifyModelFunctionality();
      // Start performance monitoring
      /* istanbul ignore next */
      cov_11yd5y45ij().s[21]++;
      this.startPerformanceMonitoring();
      /* istanbul ignore next */
      cov_11yd5y45ij().s[22]++;
      this.isInitialized = true;
      /* istanbul ignore next */
      cov_11yd5y45ij().s[23]++;
      logger_1.logger.info('✅ LLM Engine initialized successfully');
      /* istanbul ignore next */
      cov_11yd5y45ij().s[24]++;
      this.emit('initialized', {
        model: this.currentModel
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_11yd5y45ij().s[25]++;
      logger_1.logger.error('❌ Failed to initialize LLM Engine:', error);
      /* istanbul ignore next */
      cov_11yd5y45ij().s[26]++;
      throw new Error(`LLM Engine initialization failed: ${error.message}`);
    }
  }
  /**
   * Select the optimal model based on current system resources
   * Prioritizes models that fit within memory constraints while maximizing capability
   */
  async selectOptimalModel(systemResources) {
    /* istanbul ignore next */
    cov_11yd5y45ij().f[2]++;
    const availableMemory =
    /* istanbul ignore next */
    (cov_11yd5y45ij().s[27]++, systemResources.memory.available);
    const cpuCores =
    /* istanbul ignore next */
    (cov_11yd5y45ij().s[28]++, systemResources.cpu.cores);
    /* istanbul ignore next */
    cov_11yd5y45ij().s[29]++;
    logger_1.logger.info(`📊 System resources - Memory: ${availableMemory}MB, CPU cores: ${cpuCores}`);
    // Filter models that fit within memory constraints (leave 2GB buffer)
    const viableModels =
    /* istanbul ignore next */
    (cov_11yd5y45ij().s[30]++, this.AVAILABLE_MODELS.filter(model => {
      /* istanbul ignore next */
      cov_11yd5y45ij().f[3]++;
      cov_11yd5y45ij().s[31]++;
      return model.memoryRequirement <= availableMemory - 2048;
    }));
    /* istanbul ignore next */
    cov_11yd5y45ij().s[32]++;
    if (viableModels.length === 0) {
      /* istanbul ignore next */
      cov_11yd5y45ij().b[0][0]++;
      cov_11yd5y45ij().s[33]++;
      logger_1.logger.warn('⚠️ No models fit in available memory, using smallest model');
      /* istanbul ignore next */
      cov_11yd5y45ij().s[34]++;
      return this.AVAILABLE_MODELS[this.AVAILABLE_MODELS.length - 1];
    } else
    /* istanbul ignore next */
    {
      cov_11yd5y45ij().b[0][1]++;
    }
    // Select the most capable model that fits
    const selectedModel =
    /* istanbul ignore next */
    (cov_11yd5y45ij().s[35]++, viableModels[0]);
    // Optimize CPU threads based on available cores
    /* istanbul ignore next */
    cov_11yd5y45ij().s[36]++;
    selectedModel.cpuThreads = Math.min(selectedModel.cpuThreads, Math.max(1, cpuCores - 1));
    /* istanbul ignore next */
    cov_11yd5y45ij().s[37]++;
    logger_1.logger.info(`🎯 Selected model: ${selectedModel.modelName} (${selectedModel.memoryRequirement}MB)`);
    /* istanbul ignore next */
    cov_11yd5y45ij().s[38]++;
    return selectedModel;
  }
  /**
   * Load and initialize the selected model
   * Implements secure model loading with integrity verification
   */
  async loadModel(modelConfig) {
    /* istanbul ignore next */
    cov_11yd5y45ij().f[4]++;
    cov_11yd5y45ij().s[39]++;
    try {
      /* istanbul ignore next */
      cov_11yd5y45ij().s[40]++;
      logger_1.logger.info(`📥 Loading model: ${modelConfig.modelName}...`);
      // Check if model is already cached
      /* istanbul ignore next */
      cov_11yd5y45ij().s[41]++;
      if (this.modelCache.has(modelConfig.modelName)) {
        /* istanbul ignore next */
        cov_11yd5y45ij().b[1][0]++;
        cov_11yd5y45ij().s[42]++;
        this.modelInstance = this.modelCache.get(modelConfig.modelName);
        /* istanbul ignore next */
        cov_11yd5y45ij().s[43]++;
        this.currentModel = modelConfig;
        /* istanbul ignore next */
        cov_11yd5y45ij().s[44]++;
        logger_1.logger.info('✅ Model loaded from cache');
        /* istanbul ignore next */
        cov_11yd5y45ij().s[45]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_11yd5y45ij().b[1][1]++;
      }
      // Verify model file integrity
      cov_11yd5y45ij().s[46]++;
      await this.verifyModelIntegrity(modelConfig.modelPath);
      // Load model with ONNX Runtime (CPU optimized)
      const modelInstance =
      /* istanbul ignore next */
      (cov_11yd5y45ij().s[47]++, await this.loadONNXModel(modelConfig));
      // Cache the loaded model
      /* istanbul ignore next */
      cov_11yd5y45ij().s[48]++;
      this.modelCache.set(modelConfig.modelName, modelInstance);
      /* istanbul ignore next */
      cov_11yd5y45ij().s[49]++;
      this.modelInstance = modelInstance;
      /* istanbul ignore next */
      cov_11yd5y45ij().s[50]++;
      this.currentModel = modelConfig;
      /* istanbul ignore next */
      cov_11yd5y45ij().s[51]++;
      logger_1.logger.info('✅ Model loaded successfully');
    } catch (error) {
      /* istanbul ignore next */
      cov_11yd5y45ij().s[52]++;
      logger_1.logger.error('❌ Failed to load model:', error);
      /* istanbul ignore next */
      cov_11yd5y45ij().s[53]++;
      throw new Error(`Model loading failed: ${error.message}`);
    }
  }
  /**
   * Load ONNX model with CPU optimization
   * Implements efficient CPU-based inference for Intel NUC
   */
  async loadONNXModel(config) {
    /* istanbul ignore next */
    cov_11yd5y45ij().f[5]++;
    // This would typically use ONNX Runtime
    // For now, we'll create a mock implementation that demonstrates the interface
    const mockModel =
    /* istanbul ignore next */
    (cov_11yd5y45ij().s[54]++, {
      config,
      predict: async input => {
        /* istanbul ignore next */
        cov_11yd5y45ij().f[6]++;
        // Simulate inference time based on model complexity
        const inferenceTime =
        /* istanbul ignore next */
        (cov_11yd5y45ij().s[55]++, config.memoryRequirement / 1000); // Rough simulation
        /* istanbul ignore next */
        cov_11yd5y45ij().s[56]++;
        await new Promise(resolve => {
          /* istanbul ignore next */
          cov_11yd5y45ij().f[7]++;
          cov_11yd5y45ij().s[57]++;
          return setTimeout(resolve, inferenceTime);
        });
        // Mock response - in real implementation, this would be actual model inference
        /* istanbul ignore next */
        cov_11yd5y45ij().s[58]++;
        return this.generateMockResponse(input);
      }
    });
    /* istanbul ignore next */
    cov_11yd5y45ij().s[59]++;
    logger_1.logger.info(`🔧 Mock ONNX model loaded with ${config.cpuThreads} CPU threads`);
    /* istanbul ignore next */
    cov_11yd5y45ij().s[60]++;
    return mockModel;
  }
  /**
   * Generate mock response for development/testing
   * This will be replaced with actual model inference in production
   */
  generateMockResponse(input) {
    /* istanbul ignore next */
    cov_11yd5y45ij().f[8]++;
    cov_11yd5y45ij().s[61]++;
    // Simple mock responses based on input patterns
    if (input.includes('market analysis')) {
      /* istanbul ignore next */
      cov_11yd5y45ij().b[2][0]++;
      cov_11yd5y45ij().s[62]++;
      return 'Based on current market conditions, I observe moderate bullish sentiment with increasing volume. Key resistance levels are being tested, suggesting potential breakout opportunities. Risk factors include regulatory uncertainty and macroeconomic headwinds.';
    } else
    /* istanbul ignore next */
    {
      cov_11yd5y45ij().b[2][1]++;
    }
    cov_11yd5y45ij().s[63]++;
    if (input.includes('trading decision')) {
      /* istanbul ignore next */
      cov_11yd5y45ij().b[3][0]++;
      cov_11yd5y45ij().s[64]++;
      return 'The technical indicators suggest a BUY signal with 75% confidence. Moving averages are aligned bullishly, RSI shows momentum without being overbought, and volume confirms the trend. Recommended position size: 2% of portfolio with stop loss at -1%.';
    } else
    /* istanbul ignore next */
    {
      cov_11yd5y45ij().b[3][1]++;
    }
    cov_11yd5y45ij().s[65]++;
    return 'Market analysis indicates neutral conditions with mixed signals. Recommend maintaining current positions and monitoring for clearer directional bias.';
  }
  /**
   * Verify model file integrity using cryptographic hashes
   * Ensures model hasn't been tampered with
   */
  async verifyModelIntegrity(modelPath) {
    /* istanbul ignore next */
    cov_11yd5y45ij().f[9]++;
    cov_11yd5y45ij().s[66]++;
    try {
      /* istanbul ignore next */
      cov_11yd5y45ij().s[67]++;
      // In production, this would verify cryptographic signatures
      logger_1.logger.info(`🔐 Verifying model integrity: ${modelPath}`);
      // Mock verification - in production, use actual file hash verification
      const isValid =
      /* istanbul ignore next */
      (cov_11yd5y45ij().s[68]++, true); // await this.securityManager.verifyFileIntegrity(modelPath);
      /* istanbul ignore next */
      cov_11yd5y45ij().s[69]++;
      if (!isValid) {
        /* istanbul ignore next */
        cov_11yd5y45ij().b[4][0]++;
        cov_11yd5y45ij().s[70]++;
        throw new Error('Model integrity verification failed');
      } else
      /* istanbul ignore next */
      {
        cov_11yd5y45ij().b[4][1]++;
      }
      cov_11yd5y45ij().s[71]++;
      logger_1.logger.info('✅ Model integrity verified');
    } catch (error) {
      /* istanbul ignore next */
      cov_11yd5y45ij().s[72]++;
      logger_1.logger.error('❌ Model integrity verification failed:', error);
      /* istanbul ignore next */
      cov_11yd5y45ij().s[73]++;
      throw error;
    }
  }
  /**
   * Verify model functionality with test inference
   * Ensures the loaded model is working correctly
   */
  async verifyModelFunctionality() {
    /* istanbul ignore next */
    cov_11yd5y45ij().f[10]++;
    cov_11yd5y45ij().s[74]++;
    try {
      /* istanbul ignore next */
      cov_11yd5y45ij().s[75]++;
      logger_1.logger.info('🧪 Verifying model functionality...');
      const testInput =
      /* istanbul ignore next */
      (cov_11yd5y45ij().s[76]++, 'Analyze current BTC market conditions');
      const startTime =
      /* istanbul ignore next */
      (cov_11yd5y45ij().s[77]++, Date.now());
      const response =
      /* istanbul ignore next */
      (cov_11yd5y45ij().s[78]++, await this.modelInstance.predict(testInput));
      const inferenceTime =
      /* istanbul ignore next */
      (cov_11yd5y45ij().s[79]++, Date.now() - startTime);
      /* istanbul ignore next */
      cov_11yd5y45ij().s[80]++;
      if (
      /* istanbul ignore next */
      (cov_11yd5y45ij().b[6][0]++, !response) ||
      /* istanbul ignore next */
      (cov_11yd5y45ij().b[6][1]++, response.length < 10)) {
        /* istanbul ignore next */
        cov_11yd5y45ij().b[5][0]++;
        cov_11yd5y45ij().s[81]++;
        throw new Error('Model produced invalid response');
      } else
      /* istanbul ignore next */
      {
        cov_11yd5y45ij().b[5][1]++;
      }
      cov_11yd5y45ij().s[82]++;
      logger_1.logger.info(`✅ Model functionality verified (${inferenceTime}ms inference time)`);
    } catch (error) {
      /* istanbul ignore next */
      cov_11yd5y45ij().s[83]++;
      logger_1.logger.error('❌ Model functionality verification failed:', error);
      /* istanbul ignore next */
      cov_11yd5y45ij().s[84]++;
      throw error;
    }
  }
  /**
   * Start performance monitoring for the LLM engine
   * Tracks resource usage and inference performance
   */
  startPerformanceMonitoring() {
    /* istanbul ignore next */
    cov_11yd5y45ij().f[11]++;
    const startTime =
    /* istanbul ignore next */
    (cov_11yd5y45ij().s[85]++, Date.now());
    /* istanbul ignore next */
    cov_11yd5y45ij().s[86]++;
    setInterval(async () => {
      /* istanbul ignore next */
      cov_11yd5y45ij().f[12]++;
      cov_11yd5y45ij().s[87]++;
      try {
        const systemResources =
        /* istanbul ignore next */
        (cov_11yd5y45ij().s[88]++, await this.systemMonitor.getCurrentResources());
        /* istanbul ignore next */
        cov_11yd5y45ij().s[89]++;
        this.performanceMetrics = {
          ...this.performanceMetrics,
          memoryUsage: systemResources.memory.used,
          cpuUsage: systemResources.cpu.usage,
          uptime: Math.floor((Date.now() - startTime) / 1000)
        };
        // Emit performance metrics for monitoring
        /* istanbul ignore next */
        cov_11yd5y45ij().s[90]++;
        this.emit('performance', this.performanceMetrics);
        // Check for performance issues
        /* istanbul ignore next */
        cov_11yd5y45ij().s[91]++;
        await this.checkPerformanceThresholds();
      } catch (error) {
        /* istanbul ignore next */
        cov_11yd5y45ij().s[92]++;
        logger_1.logger.error('❌ Error in performance monitoring:', error);
      }
    }, 30000); // Monitor every 30 seconds
  }
  /**
   * Check performance thresholds and trigger optimizations if needed
   * Implements automatic performance management
   */
  async checkPerformanceThresholds() {
    /* istanbul ignore next */
    cov_11yd5y45ij().f[13]++;
    const {
      memoryUsage,
      cpuUsage,
      inferenceTime
    } =
    /* istanbul ignore next */
    (cov_11yd5y45ij().s[93]++, this.performanceMetrics);
    // Check memory pressure (>80% of available memory)
    /* istanbul ignore next */
    cov_11yd5y45ij().s[94]++;
    if (memoryUsage > 9600) {
      /* istanbul ignore next */
      cov_11yd5y45ij().b[7][0]++;
      cov_11yd5y45ij().s[95]++;
      // 80% of 12GB
      logger_1.logger.warn('⚠️ High memory usage detected, considering model optimization');
      /* istanbul ignore next */
      cov_11yd5y45ij().s[96]++;
      await this.optimizeForMemoryPressure();
    } else
    /* istanbul ignore next */
    {
      cov_11yd5y45ij().b[7][1]++;
    }
    // Check CPU usage (>90%)
    cov_11yd5y45ij().s[97]++;
    if (cpuUsage > 90) {
      /* istanbul ignore next */
      cov_11yd5y45ij().b[8][0]++;
      cov_11yd5y45ij().s[98]++;
      logger_1.logger.warn('⚠️ High CPU usage detected, reducing inference frequency');
      /* istanbul ignore next */
      cov_11yd5y45ij().s[99]++;
      await this.optimizeForCPUPressure();
    } else
    /* istanbul ignore next */
    {
      cov_11yd5y45ij().b[8][1]++;
    }
    // Check inference time (>5 seconds is too slow for trading)
    cov_11yd5y45ij().s[100]++;
    if (inferenceTime > 5000) {
      /* istanbul ignore next */
      cov_11yd5y45ij().b[9][0]++;
      cov_11yd5y45ij().s[101]++;
      logger_1.logger.warn('⚠️ Slow inference detected, optimizing model parameters');
      /* istanbul ignore next */
      cov_11yd5y45ij().s[102]++;
      await this.optimizeInferenceSpeed();
    } else
    /* istanbul ignore next */
    {
      cov_11yd5y45ij().b[9][1]++;
    }
  }
  /**
   * Optimize model for memory pressure
   * Switches to smaller model or adjusts parameters
   */
  async optimizeForMemoryPressure() {
    /* istanbul ignore next */
    cov_11yd5y45ij().f[14]++;
    cov_11yd5y45ij().s[103]++;
    logger_1.logger.info('🔧 Optimizing for memory pressure...');
    // Find a smaller model that uses less memory
    const currentMemoryReq =
    /* istanbul ignore next */
    (cov_11yd5y45ij().s[104]++,
    /* istanbul ignore next */
    (cov_11yd5y45ij().b[10][0]++, this.currentModel?.memoryRequirement) ||
    /* istanbul ignore next */
    (cov_11yd5y45ij().b[10][1]++, 0));
    const smallerModel =
    /* istanbul ignore next */
    (cov_11yd5y45ij().s[105]++, this.AVAILABLE_MODELS.find(model => {
      /* istanbul ignore next */
      cov_11yd5y45ij().f[15]++;
      cov_11yd5y45ij().s[106]++;
      return model.memoryRequirement < currentMemoryReq;
    }));
    /* istanbul ignore next */
    cov_11yd5y45ij().s[107]++;
    if (
    /* istanbul ignore next */
    (cov_11yd5y45ij().b[12][0]++, smallerModel) &&
    /* istanbul ignore next */
    (cov_11yd5y45ij().b[12][1]++, smallerModel !== this.currentModel)) {
      /* istanbul ignore next */
      cov_11yd5y45ij().b[11][0]++;
      cov_11yd5y45ij().s[108]++;
      logger_1.logger.info(`🔄 Switching to smaller model: ${smallerModel.modelName}`);
      /* istanbul ignore next */
      cov_11yd5y45ij().s[109]++;
      await this.switchModel(smallerModel);
    } else {
      /* istanbul ignore next */
      cov_11yd5y45ij().b[11][1]++;
      cov_11yd5y45ij().s[110]++;
      // Reduce batch size and context window
      if (this.currentModel) {
        /* istanbul ignore next */
        cov_11yd5y45ij().b[13][0]++;
        cov_11yd5y45ij().s[111]++;
        this.currentModel.batchSize = Math.max(1, this.currentModel.batchSize - 1);
        /* istanbul ignore next */
        cov_11yd5y45ij().s[112]++;
        this.currentModel.contextWindow = Math.max(512, this.currentModel.contextWindow * 0.8);
        /* istanbul ignore next */
        cov_11yd5y45ij().s[113]++;
        logger_1.logger.info('🔧 Reduced batch size and context window');
      } else
      /* istanbul ignore next */
      {
        cov_11yd5y45ij().b[13][1]++;
      }
    }
  }
  /**
   * Optimize model for CPU pressure
   * Reduces CPU threads and inference frequency
   */
  async optimizeForCPUPressure() {
    /* istanbul ignore next */
    cov_11yd5y45ij().f[16]++;
    cov_11yd5y45ij().s[114]++;
    logger_1.logger.info('🔧 Optimizing for CPU pressure...');
    /* istanbul ignore next */
    cov_11yd5y45ij().s[115]++;
    if (
    /* istanbul ignore next */
    (cov_11yd5y45ij().b[15][0]++, this.currentModel) &&
    /* istanbul ignore next */
    (cov_11yd5y45ij().b[15][1]++, this.currentModel.cpuThreads > 1)) {
      /* istanbul ignore next */
      cov_11yd5y45ij().b[14][0]++;
      cov_11yd5y45ij().s[116]++;
      this.currentModel.cpuThreads = Math.max(1, this.currentModel.cpuThreads - 1);
      /* istanbul ignore next */
      cov_11yd5y45ij().s[117]++;
      logger_1.logger.info(`🔧 Reduced CPU threads to ${this.currentModel.cpuThreads}`);
    } else
    /* istanbul ignore next */
    {
      cov_11yd5y45ij().b[14][1]++;
    }
  }
  /**
   * Optimize inference speed
   * Adjusts model parameters for faster inference
   */
  async optimizeInferenceSpeed() {
    /* istanbul ignore next */
    cov_11yd5y45ij().f[17]++;
    cov_11yd5y45ij().s[118]++;
    logger_1.logger.info('🔧 Optimizing inference speed...');
    /* istanbul ignore next */
    cov_11yd5y45ij().s[119]++;
    if (this.currentModel) {
      /* istanbul ignore next */
      cov_11yd5y45ij().b[16][0]++;
      cov_11yd5y45ij().s[120]++;
      // Reduce max tokens for faster generation
      this.currentModel.maxTokens = Math.max(256, this.currentModel.maxTokens * 0.8);
      // Increase temperature slightly for faster sampling
      /* istanbul ignore next */
      cov_11yd5y45ij().s[121]++;
      this.currentModel.temperature = Math.min(1.0, this.currentModel.temperature + 0.1);
      /* istanbul ignore next */
      cov_11yd5y45ij().s[122]++;
      logger_1.logger.info('🔧 Adjusted model parameters for speed optimization');
    } else
    /* istanbul ignore next */
    {
      cov_11yd5y45ij().b[16][1]++;
    }
  }
  /**
   * Switch to a different model configuration
   * Implements hot-swapping of models for optimization
   */
  async switchModel(newModelConfig) {
    /* istanbul ignore next */
    cov_11yd5y45ij().f[18]++;
    cov_11yd5y45ij().s[123]++;
    try {
      /* istanbul ignore next */
      cov_11yd5y45ij().s[124]++;
      logger_1.logger.info(`🔄 Switching model from ${this.currentModel?.modelName} to ${newModelConfig.modelName}`);
      // Load new model
      /* istanbul ignore next */
      cov_11yd5y45ij().s[125]++;
      await this.loadModel(newModelConfig);
      // Verify functionality
      /* istanbul ignore next */
      cov_11yd5y45ij().s[126]++;
      await this.verifyModelFunctionality();
      /* istanbul ignore next */
      cov_11yd5y45ij().s[127]++;
      logger_1.logger.info('✅ Model switch completed successfully');
      /* istanbul ignore next */
      cov_11yd5y45ij().s[128]++;
      this.emit('modelSwitched', {
        previousModel: this.currentModel?.modelName,
        newModel: newModelConfig.modelName
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_11yd5y45ij().s[129]++;
      logger_1.logger.error('❌ Failed to switch model:', error);
      /* istanbul ignore next */
      cov_11yd5y45ij().s[130]++;
      throw error;
    }
  }
  /**
   * Get current model performance metrics
   * Returns comprehensive performance data
   */
  getPerformanceMetrics() {
    /* istanbul ignore next */
    cov_11yd5y45ij().f[19]++;
    cov_11yd5y45ij().s[131]++;
    return {
      ...this.performanceMetrics
    };
  }
  /**
   * Get current model configuration
   * Returns the active model configuration
   */
  getCurrentModelConfig() {
    /* istanbul ignore next */
    cov_11yd5y45ij().f[20]++;
    cov_11yd5y45ij().s[132]++;
    return this.currentModel ?
    /* istanbul ignore next */
    (cov_11yd5y45ij().b[17][0]++, {
      ...this.currentModel
    }) :
    /* istanbul ignore next */
    (cov_11yd5y45ij().b[17][1]++, null);
  }
  /**
   * Check if the LLM engine is initialized and ready
   */
  isReady() {
    /* istanbul ignore next */
    cov_11yd5y45ij().f[21]++;
    cov_11yd5y45ij().s[133]++;
    return /* istanbul ignore next */(cov_11yd5y45ij().b[18][0]++, this.isInitialized) &&
    /* istanbul ignore next */
    (cov_11yd5y45ij().b[18][1]++, this.modelInstance !== null);
  }
  /**
   * Shutdown the LLM engine gracefully
   * Cleans up resources and saves state
   */
  async shutdown() {
    /* istanbul ignore next */
    cov_11yd5y45ij().f[22]++;
    cov_11yd5y45ij().s[134]++;
    try {
      /* istanbul ignore next */
      cov_11yd5y45ij().s[135]++;
      logger_1.logger.info('🛑 Shutting down LLM Engine...');
      // Clear model cache to free memory
      /* istanbul ignore next */
      cov_11yd5y45ij().s[136]++;
      this.modelCache.clear();
      // Reset state
      /* istanbul ignore next */
      cov_11yd5y45ij().s[137]++;
      this.modelInstance = null;
      /* istanbul ignore next */
      cov_11yd5y45ij().s[138]++;
      this.currentModel = null;
      /* istanbul ignore next */
      cov_11yd5y45ij().s[139]++;
      this.isInitialized = false;
      /* istanbul ignore next */
      cov_11yd5y45ij().s[140]++;
      logger_1.logger.info('✅ LLM Engine shutdown completed');
    } catch (error) {
      /* istanbul ignore next */
      cov_11yd5y45ij().s[141]++;
      logger_1.logger.error('❌ Error during LLM Engine shutdown:', error);
      /* istanbul ignore next */
      cov_11yd5y45ij().s[142]++;
      throw error;
    }
  }
}
/* istanbul ignore next */
cov_11yd5y45ij().s[143]++;
exports.LLMEngine = LLMEngine;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,