{"version":3,"names":["cov_27b1lx3rb0","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","events_1","require","logger_1","audit_service_1","BalanceManager","EventEmitter","gateIOClient","auditService","currentBalances","Map","balanceHistory","balanceAlerts","stats","config","monitoringTimer","reconciliationTimer","transactionHistory","lastReconciliation","constructor","AuditService","totalBalanceChecks","discrepanciesDetected","alertsTriggered","reconciliationsPerformed","lastBalanceUpdate","averageBalanceCheckTime","balanceAccuracy","enableRealTimeMonitoring","monitoringInterval","discrepancyThreshold","enableAlerts","enableReconciliation","reconciliationInterval","snapshotRetentionDays","emergencyStopThreshold","logger","info","initialize","loadCurrentBalances","initializeBalanceAlerts","loadTransactionHistory","startRealTimeMonitoring","startReconciliation","logSecurityEvent","severity","details","initialBalanceCount","size","timestamp","Date","error","message","getCurrentBalances","forceRefresh","shouldRefreshBalances","getBalance","currency","balances","get","getTotalPortfolioValue","totalValue","balance","parseFloat","total","price","getCurrencyPrice","validateBalances","startTime","now","discrepancies","exchangeBalances","fetchBalancesFromExchange","currenciesToValidate","Array","from","keys","curr","cachedBalance","exchangeBalance","discrepancy","detectDiscrepancy","hasDiscrepancy","push","logBalanceEvent","triggerBalanceAlert","validationTime","updateBalanceStats","length","warn","reconcileTransactions","results","currenciesToReconcile","result","reconcileCurrencyTransactions","isReconciled","unreconciledTransactions","createBalanceSnapshot","snapshot","totalValueUSD","snapshotId","generateSnapshotId","cleanupOldSnapshots","balanceCount","getBalanceHistory","limit","sort","a","getTime","slice","setBalanceAlert","alertType","threshold","alerts","filteredAlerts","filter","alert","newAlert","enabled","lastTriggered","triggerCount","set","removeBalanceAlert","getBalanceAlerts","checkEmergencyStop","currentValue","oneDayAgo","historicalSnapshot","historicalValue","lossPercent","toFixed","emit","reason","hasSignificantBalanceChange","checkBalanceAlerts","debug","spotAccounts","makeRequest","method","url","balanceMap","account","available","locked","toString","update_time","cachedTotal","exchangeTotal","difference","Math","abs","differencePercent","expectedBalance","actualBalance","currentBalance","Error","transactions","reconciledTransactions","transaction","amount","fee","side","currencies","trades","params","currency_pair","majorCurrencies","setInterval","shouldTrigger","shouldTriggerAlert","totalBalance","alertData","find","timeSinceUpdate","lastSnapshot","changePercent","ticker","last","discrepancyCount","alpha","totalChecks","totalDiscrepancies","cutoffDate","initialCount","removedCount","random","substr","eventType","eventData","getBalanceStats","getConfig","updateConfig","clearInterval","shutdown","snapshotCount","exports"],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\account\\balance-manager.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * ACCOUNT AND BALANCE MANAGEMENT SYSTEM\r\n * =============================================================================\r\n * \r\n * This module implements comprehensive account and balance management for\r\n * Gate.io cryptocurrency trading with real-time monitoring, validation,\r\n * discrepancy detection, and comprehensive audit logging.\r\n * \r\n * SECURITY FEATURES:\r\n * - Real-time balance monitoring and validation\r\n * - Automatic discrepancy detection and alerting\r\n * - Transaction history tracking and reconciliation\r\n * - Balance threshold alerts and notifications\r\n * - Comprehensive audit logging for all balance operations\r\n * - Emergency balance protection mechanisms\r\n * \r\n * CRITICAL FINANCIAL NOTICE:\r\n * This system handles real financial assets and account balances.\r\n * All balance operations must be validated and logged for audit compliance.\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport { EventEmitter } from 'events';\r\nimport { logger } from '@/core/logging/logger';\r\nimport { AuditService } from '@/security/audit-service';\r\nimport { GateIOClient } from '../api/gate-io-client';\r\nimport { AccountBalance, SpotAccount, TradeHistory } from '../api/types';\r\n\r\n/**\r\n * Balance snapshot for historical tracking\r\n */\r\ninterface BalanceSnapshot {\r\n  timestamp: Date;\r\n  balances: Map<string, AccountBalance>;\r\n  totalValueUSD: number;\r\n  snapshotId: string;\r\n}\r\n\r\n/**\r\n * Balance discrepancy detection result\r\n */\r\ninterface DiscrepancyResult {\r\n  hasDiscrepancy: boolean;\r\n  currency: string;\r\n  expectedBalance: number;\r\n  actualBalance: number;\r\n  difference: number;\r\n  differencePercent: number;\r\n  severity: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';\r\n  timestamp: Date;\r\n}\r\n\r\n/**\r\n * Balance alert configuration\r\n */\r\ninterface BalanceAlert {\r\n  currency: string;\r\n  alertType: 'LOW_BALANCE' | 'HIGH_BALANCE' | 'RAPID_CHANGE' | 'DISCREPANCY';\r\n  threshold: number;\r\n  enabled: boolean;\r\n  lastTriggered: Date | null;\r\n  triggerCount: number;\r\n}\r\n\r\n/**\r\n * Transaction reconciliation result\r\n */\r\ninterface ReconciliationResult {\r\n  isReconciled: boolean;\r\n  currency: string;\r\n  expectedBalance: number;\r\n  actualBalance: number;\r\n  reconciledTransactions: number;\r\n  unreconciledTransactions: TradeHistory[];\r\n  discrepancies: DiscrepancyResult[];\r\n  timestamp: Date;\r\n}\r\n\r\n/**\r\n * Balance management statistics\r\n */\r\ninterface BalanceStats {\r\n  totalBalanceChecks: number;\r\n  discrepanciesDetected: number;\r\n  alertsTriggered: number;\r\n  reconciliationsPerformed: number;\r\n  lastBalanceUpdate: Date | null;\r\n  averageBalanceCheckTime: number;\r\n  balanceAccuracy: number; // Percentage\r\n}\r\n\r\n/**\r\n * Balance management configuration\r\n */\r\ninterface BalanceConfig {\r\n  enableRealTimeMonitoring: boolean;\r\n  monitoringInterval: number; // milliseconds\r\n  discrepancyThreshold: number; // percentage\r\n  enableAlerts: boolean;\r\n  enableReconciliation: boolean;\r\n  reconciliationInterval: number; // milliseconds\r\n  snapshotRetentionDays: number;\r\n  emergencyStopThreshold: number; // percentage loss\r\n}\r\n\r\n/**\r\n * Account and Balance Management System\r\n * Handles comprehensive balance monitoring, validation, and reconciliation\r\n */\r\nexport class BalanceManager extends EventEmitter {\r\n  private gateIOClient: GateIOClient;\r\n  private auditService: AuditService;\r\n  private currentBalances: Map<string, AccountBalance> = new Map();\r\n  private balanceHistory: BalanceSnapshot[] = [];\r\n  private balanceAlerts: Map<string, BalanceAlert[]> = new Map();\r\n  private stats: BalanceStats;\r\n  private config: BalanceConfig;\r\n  \r\n  // Monitoring intervals\r\n  private monitoringTimer: NodeJS.Timeout | null = null;\r\n  private reconciliationTimer: NodeJS.Timeout | null = null;\r\n  \r\n  // Transaction tracking\r\n  private transactionHistory: Map<string, TradeHistory[]> = new Map();\r\n  private lastReconciliation: Date | null = null;\r\n\r\n  constructor(gateIOClient: GateIOClient) {\r\n    super();\r\n    \r\n    this.gateIOClient = gateIOClient;\r\n    this.auditService = new AuditService();\r\n    \r\n    // Initialize statistics\r\n    this.stats = {\r\n      totalBalanceChecks: 0,\r\n      discrepanciesDetected: 0,\r\n      alertsTriggered: 0,\r\n      reconciliationsPerformed: 0,\r\n      lastBalanceUpdate: null,\r\n      averageBalanceCheckTime: 0,\r\n      balanceAccuracy: 100,\r\n    };\r\n    \r\n    // Default configuration\r\n    this.config = {\r\n      enableRealTimeMonitoring: true,\r\n      monitoringInterval: 30000, // 30 seconds\r\n      discrepancyThreshold: 0.01, // 1%\r\n      enableAlerts: true,\r\n      enableReconciliation: true,\r\n      reconciliationInterval: 300000, // 5 minutes\r\n      snapshotRetentionDays: 30,\r\n      emergencyStopThreshold: 10, // 10% loss\r\n    };\r\n    \r\n    logger.info('💰 Balance Manager initialized with comprehensive monitoring');\r\n  }\r\n\r\n  /**\r\n   * Initialize balance manager with configuration\r\n   * \r\n   * @param config - Balance management configuration\r\n   * @returns Promise<boolean> - Success status\r\n   */\r\n  public async initialize(config?: Partial<BalanceConfig>): Promise<boolean> {\r\n    try {\r\n      logger.info('🚀 Initializing Balance Manager...');\r\n      \r\n      // Update configuration\r\n      if (config) {\r\n        this.config = { ...this.config, ...config };\r\n      }\r\n      \r\n      // Load initial balances\r\n      await this.loadCurrentBalances();\r\n      \r\n      // Initialize balance alerts\r\n      this.initializeBalanceAlerts();\r\n      \r\n      // Load transaction history\r\n      await this.loadTransactionHistory();\r\n      \r\n      // Start monitoring if enabled\r\n      if (this.config.enableRealTimeMonitoring) {\r\n        this.startRealTimeMonitoring();\r\n      }\r\n      \r\n      // Start reconciliation if enabled\r\n      if (this.config.enableReconciliation) {\r\n        this.startReconciliation();\r\n      }\r\n      \r\n      await this.auditService.logSecurityEvent({\r\n        type: 'BALANCE_MANAGER_INITIALIZED',\r\n        severity: 'INFO',\r\n        details: { \r\n          config: this.config,\r\n          initialBalanceCount: this.currentBalances.size \r\n        },\r\n        timestamp: new Date(),\r\n      });\r\n      \r\n      logger.info('✅ Balance Manager initialized successfully');\r\n      return true;\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to initialize Balance Manager:', error);\r\n      await this.auditService.logSecurityEvent({\r\n        type: 'BALANCE_MANAGER_INIT_FAILED',\r\n        severity: 'ERROR',\r\n        details: { error: error.message },\r\n        timestamp: new Date(),\r\n      });\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get current account balances with real-time updates\r\n   * \r\n   * @param forceRefresh - Force refresh from exchange\r\n   * @returns Promise<Map<string, AccountBalance>> - Current balances\r\n   */\r\n  public async getCurrentBalances(forceRefresh: boolean = false): Promise<Map<string, AccountBalance>> {\r\n    try {\r\n      if (forceRefresh || this.shouldRefreshBalances()) {\r\n        await this.loadCurrentBalances();\r\n      }\r\n      \r\n      return new Map(this.currentBalances);\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to get current balances:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get balance for specific currency\r\n   * \r\n   * @param currency - Currency symbol\r\n   * @param forceRefresh - Force refresh from exchange\r\n   * @returns Promise<AccountBalance | null> - Balance or null if not found\r\n   */\r\n  public async getBalance(currency: string, forceRefresh: boolean = false): Promise<AccountBalance | null> {\r\n    try {\r\n      const balances = await this.getCurrentBalances(forceRefresh);\r\n      return balances.get(currency) || null;\r\n      \r\n    } catch (error) {\r\n      logger.error(`❌ Failed to get balance for ${currency}:`, error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get total portfolio value in USD\r\n   * \r\n   * @returns Promise<number> - Total portfolio value\r\n   */\r\n  public async getTotalPortfolioValue(): Promise<number> {\r\n    try {\r\n      const balances = await this.getCurrentBalances();\r\n      let totalValue = 0;\r\n      \r\n      for (const [currency, balance] of balances) {\r\n        if (currency === 'USDT' || currency === 'USD') {\r\n          totalValue += parseFloat(balance.total);\r\n        } else {\r\n          // Get current price and calculate value\r\n          const price = await this.getCurrencyPrice(currency);\r\n          totalValue += parseFloat(balance.total) * price;\r\n        }\r\n      }\r\n      \r\n      return totalValue;\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to calculate total portfolio value:', error);\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate balance consistency and detect discrepancies\r\n   * \r\n   * @param currency - Currency to validate (optional, validates all if not specified)\r\n   * @returns Promise<DiscrepancyResult[]> - Discrepancy results\r\n   */\r\n  public async validateBalances(currency?: string): Promise<DiscrepancyResult[]> {\r\n    const startTime = Date.now();\r\n    const discrepancies: DiscrepancyResult[] = [];\r\n    \r\n    try {\r\n      logger.info(`🔍 Validating balances${currency ? ` for ${currency}` : ''}...`);\r\n      \r\n      // Get current balances from exchange\r\n      const exchangeBalances = await this.fetchBalancesFromExchange();\r\n      \r\n      // Get currencies to validate\r\n      const currenciesToValidate = currency \r\n        ? [currency] \r\n        : Array.from(this.currentBalances.keys());\r\n      \r\n      for (const curr of currenciesToValidate) {\r\n        const cachedBalance = this.currentBalances.get(curr);\r\n        const exchangeBalance = exchangeBalances.get(curr);\r\n        \r\n        if (cachedBalance && exchangeBalance) {\r\n          const discrepancy = this.detectDiscrepancy(cachedBalance, exchangeBalance);\r\n          if (discrepancy.hasDiscrepancy) {\r\n            discrepancies.push(discrepancy);\r\n            this.stats.discrepanciesDetected++;\r\n            \r\n            // Log discrepancy\r\n            await this.logBalanceEvent('BALANCE_DISCREPANCY_DETECTED', {\r\n              currency: curr,\r\n              discrepancy,\r\n            });\r\n            \r\n            // Trigger alert if enabled\r\n            if (this.config.enableAlerts) {\r\n              await this.triggerBalanceAlert(curr, 'DISCREPANCY', discrepancy);\r\n            }\r\n          }\r\n        }\r\n      }\r\n      \r\n      // Update statistics\r\n      const validationTime = Date.now() - startTime;\r\n      this.updateBalanceStats(validationTime, discrepancies.length);\r\n      \r\n      if (discrepancies.length > 0) {\r\n        logger.warn(`⚠️ Found ${discrepancies.length} balance discrepancies`);\r\n      } else {\r\n        logger.info('✅ No balance discrepancies detected');\r\n      }\r\n      \r\n      return discrepancies;\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to validate balances:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reconcile transactions and balances\r\n   * \r\n   * @param currency - Currency to reconcile (optional, reconciles all if not specified)\r\n   * @returns Promise<ReconciliationResult[]> - Reconciliation results\r\n   */\r\n  public async reconcileTransactions(currency?: string): Promise<ReconciliationResult[]> {\r\n    try {\r\n      logger.info(`🔄 Reconciling transactions${currency ? ` for ${currency}` : ''}...`);\r\n      \r\n      const results: ReconciliationResult[] = [];\r\n      const currenciesToReconcile = currency \r\n        ? [currency] \r\n        : Array.from(this.currentBalances.keys());\r\n      \r\n      for (const curr of currenciesToReconcile) {\r\n        const result = await this.reconcileCurrencyTransactions(curr);\r\n        results.push(result);\r\n        \r\n        if (!result.isReconciled) {\r\n          logger.warn(`⚠️ Reconciliation failed for ${curr}: ${result.unreconciledTransactions.length} unreconciled transactions`);\r\n        }\r\n      }\r\n      \r\n      this.stats.reconciliationsPerformed++;\r\n      this.lastReconciliation = new Date();\r\n      \r\n      // Log reconciliation results\r\n      await this.logBalanceEvent('TRANSACTION_RECONCILIATION_COMPLETED', {\r\n        results,\r\n        timestamp: new Date(),\r\n      });\r\n      \r\n      logger.info(`✅ Transaction reconciliation completed for ${results.length} currencies`);\r\n      return results;\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to reconcile transactions:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create balance snapshot for historical tracking\r\n   * \r\n   * @returns Promise<BalanceSnapshot> - Balance snapshot\r\n   */\r\n  public async createBalanceSnapshot(): Promise<BalanceSnapshot> {\r\n    try {\r\n      const snapshot: BalanceSnapshot = {\r\n        timestamp: new Date(),\r\n        balances: new Map(this.currentBalances),\r\n        totalValueUSD: await this.getTotalPortfolioValue(),\r\n        snapshotId: this.generateSnapshotId(),\r\n      };\r\n      \r\n      // Store snapshot\r\n      this.balanceHistory.push(snapshot);\r\n      \r\n      // Clean up old snapshots\r\n      await this.cleanupOldSnapshots();\r\n      \r\n      // Log snapshot creation\r\n      await this.logBalanceEvent('BALANCE_SNAPSHOT_CREATED', {\r\n        snapshotId: snapshot.snapshotId,\r\n        totalValueUSD: snapshot.totalValueUSD,\r\n        balanceCount: snapshot.balances.size,\r\n      });\r\n      \r\n      logger.info(`📸 Balance snapshot created: ${snapshot.snapshotId}`);\r\n      return snapshot;\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to create balance snapshot:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get balance history snapshots\r\n   * \r\n   * @param limit - Maximum number of snapshots to return\r\n   * @returns BalanceSnapshot[] - Historical snapshots\r\n   */\r\n  public getBalanceHistory(limit: number = 100): BalanceSnapshot[] {\r\n    return this.balanceHistory\r\n      .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())\r\n      .slice(0, limit);\r\n  }\r\n\r\n  /**\r\n   * Set balance alert for currency\r\n   * \r\n   * @param currency - Currency symbol\r\n   * @param alertType - Type of alert\r\n   * @param threshold - Alert threshold\r\n   * @returns boolean - Success status\r\n   */\r\n  public setBalanceAlert(\r\n    currency: string, \r\n    alertType: BalanceAlert['alertType'], \r\n    threshold: number\r\n  ): boolean {\r\n    try {\r\n      const alerts = this.balanceAlerts.get(currency) || [];\r\n      \r\n      // Remove existing alert of same type\r\n      const filteredAlerts = alerts.filter(alert => alert.alertType !== alertType);\r\n      \r\n      // Add new alert\r\n      const newAlert: BalanceAlert = {\r\n        currency,\r\n        alertType,\r\n        threshold,\r\n        enabled: true,\r\n        lastTriggered: null,\r\n        triggerCount: 0,\r\n      };\r\n      \r\n      filteredAlerts.push(newAlert);\r\n      this.balanceAlerts.set(currency, filteredAlerts);\r\n      \r\n      logger.info(`🔔 Balance alert set: ${currency} ${alertType} at ${threshold}`);\r\n      return true;\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to set balance alert:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove balance alert\r\n   * \r\n   * @param currency - Currency symbol\r\n   * @param alertType - Type of alert to remove\r\n   * @returns boolean - Success status\r\n   */\r\n  public removeBalanceAlert(currency: string, alertType: BalanceAlert['alertType']): boolean {\r\n    try {\r\n      const alerts = this.balanceAlerts.get(currency) || [];\r\n      const filteredAlerts = alerts.filter(alert => alert.alertType !== alertType);\r\n      \r\n      if (filteredAlerts.length < alerts.length) {\r\n        this.balanceAlerts.set(currency, filteredAlerts);\r\n        logger.info(`🔕 Balance alert removed: ${currency} ${alertType}`);\r\n        return true;\r\n      }\r\n      \r\n      return false;\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to remove balance alert:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get balance alerts for currency\r\n   * \r\n   * @param currency - Currency symbol\r\n   * @returns BalanceAlert[] - Active alerts\r\n   */\r\n  public getBalanceAlerts(currency: string): BalanceAlert[] {\r\n    return this.balanceAlerts.get(currency) || [];\r\n  }\r\n\r\n  /**\r\n   * Emergency balance protection - stop trading if significant loss detected\r\n   * \r\n   * @returns Promise<boolean> - True if emergency stop triggered\r\n   */\r\n  public async checkEmergencyStop(): Promise<boolean> {\r\n    try {\r\n      const currentValue = await this.getTotalPortfolioValue();\r\n      \r\n      if (this.balanceHistory.length === 0) {\r\n        return false; // No historical data to compare\r\n      }\r\n      \r\n      // Get the most recent snapshot from 24 hours ago\r\n      const oneDayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);\r\n      const historicalSnapshot = this.balanceHistory\r\n        .filter(snapshot => snapshot.timestamp <= oneDayAgo)\r\n        .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())[0];\r\n      \r\n      if (!historicalSnapshot) {\r\n        return false; // No historical data old enough\r\n      }\r\n      \r\n      const historicalValue = historicalSnapshot.totalValueUSD;\r\n      const lossPercent = ((historicalValue - currentValue) / historicalValue) * 100;\r\n      \r\n      if (lossPercent >= this.config.emergencyStopThreshold) {\r\n        logger.error(`🚨 EMERGENCY STOP TRIGGERED: ${lossPercent.toFixed(2)}% portfolio loss detected`);\r\n        \r\n        await this.auditService.logSecurityEvent({\r\n          type: 'EMERGENCY_BALANCE_STOP',\r\n          severity: 'CRITICAL',\r\n          details: {\r\n            currentValue,\r\n            historicalValue,\r\n            lossPercent,\r\n            threshold: this.config.emergencyStopThreshold,\r\n          },\r\n          timestamp: new Date(),\r\n        });\r\n        \r\n        // Emit emergency stop event\r\n        this.emit('emergencyStop', {\r\n          reason: 'SIGNIFICANT_BALANCE_LOSS',\r\n          lossPercent,\r\n          currentValue,\r\n          historicalValue,\r\n        });\r\n        \r\n        return true;\r\n      }\r\n      \r\n      return false;\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to check emergency stop:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load current balances from exchange\r\n   */\r\n  private async loadCurrentBalances(): Promise<void> {\r\n    try {\r\n      const balances = await this.fetchBalancesFromExchange();\r\n      \r\n      // Update current balances\r\n      this.currentBalances = balances;\r\n      this.stats.lastBalanceUpdate = new Date();\r\n      this.stats.totalBalanceChecks++;\r\n      \r\n      // Create snapshot if significant change detected\r\n      if (await this.hasSignificantBalanceChange()) {\r\n        await this.createBalanceSnapshot();\r\n      }\r\n      \r\n      // Check for alerts\r\n      if (this.config.enableAlerts) {\r\n        await this.checkBalanceAlerts();\r\n      }\r\n      \r\n      logger.debug(`💰 Loaded ${balances.size} currency balances`);\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to load current balances:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fetch balances from Gate.io exchange\r\n   */\r\n  private async fetchBalancesFromExchange(): Promise<Map<string, AccountBalance>> {\r\n    const spotAccounts = await this.gateIOClient.makeRequest<SpotAccount[]>({\r\n      method: 'GET',\r\n      url: '/spot/accounts',\r\n    });\r\n    \r\n    const balanceMap = new Map<string, AccountBalance>();\r\n    \r\n    for (const account of spotAccounts) {\r\n      const balance: AccountBalance = {\r\n        currency: account.currency,\r\n        available: account.available,\r\n        locked: account.locked,\r\n        total: (parseFloat(account.available) + parseFloat(account.locked)).toString(),\r\n        update_time: Date.now(),\r\n      };\r\n      \r\n      balanceMap.set(account.currency, balance);\r\n    }\r\n    \r\n    return balanceMap;\r\n  }\r\n\r\n  /**\r\n   * Detect discrepancy between cached and exchange balances\r\n   */\r\n  private detectDiscrepancy(\r\n    cachedBalance: AccountBalance, \r\n    exchangeBalance: AccountBalance\r\n  ): DiscrepancyResult {\r\n    const cachedTotal = parseFloat(cachedBalance.total);\r\n    const exchangeTotal = parseFloat(exchangeBalance.total);\r\n    const difference = Math.abs(cachedTotal - exchangeTotal);\r\n    const differencePercent = cachedTotal > 0 ? (difference / cachedTotal) * 100 : 0;\r\n    \r\n    const hasDiscrepancy = differencePercent > this.config.discrepancyThreshold;\r\n    \r\n    let severity: DiscrepancyResult['severity'] = 'LOW';\r\n    if (differencePercent > 10) severity = 'CRITICAL';\r\n    else if (differencePercent > 5) severity = 'HIGH';\r\n    else if (differencePercent > 1) severity = 'MEDIUM';\r\n    \r\n    return {\r\n      hasDiscrepancy,\r\n      currency: cachedBalance.currency,\r\n      expectedBalance: cachedTotal,\r\n      actualBalance: exchangeTotal,\r\n      difference,\r\n      differencePercent,\r\n      severity,\r\n      timestamp: new Date(),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Reconcile transactions for specific currency\r\n   */\r\n  private async reconcileCurrencyTransactions(currency: string): Promise<ReconciliationResult> {\r\n    try {\r\n      // Get current balance\r\n      const currentBalance = this.currentBalances.get(currency);\r\n      if (!currentBalance) {\r\n        throw new Error(`Balance not found for currency: ${currency}`);\r\n      }\r\n      \r\n      // Get transaction history\r\n      const transactions = this.transactionHistory.get(currency) || [];\r\n      \r\n      // Calculate expected balance from transactions\r\n      let expectedBalance = 0;\r\n      const reconciledTransactions: TradeHistory[] = [];\r\n      const unreconciledTransactions: TradeHistory[] = [];\r\n      \r\n      for (const transaction of transactions) {\r\n        try {\r\n          const amount = parseFloat(transaction.amount);\r\n          const fee = parseFloat(transaction.fee);\r\n          \r\n          if (transaction.side === 'buy') {\r\n            expectedBalance += amount - fee;\r\n          } else {\r\n            expectedBalance -= amount + fee;\r\n          }\r\n          \r\n          reconciledTransactions.push(transaction);\r\n        } catch (error) {\r\n          unreconciledTransactions.push(transaction);\r\n        }\r\n      }\r\n      \r\n      const actualBalance = parseFloat(currentBalance.total);\r\n      const isReconciled = Math.abs(expectedBalance - actualBalance) < 0.00001; // Small tolerance for floating point\r\n      \r\n      const discrepancies: DiscrepancyResult[] = [];\r\n      if (!isReconciled) {\r\n        discrepancies.push({\r\n          hasDiscrepancy: true,\r\n          currency,\r\n          expectedBalance,\r\n          actualBalance,\r\n          difference: Math.abs(expectedBalance - actualBalance),\r\n          differencePercent: expectedBalance > 0 ? (Math.abs(expectedBalance - actualBalance) / expectedBalance) * 100 : 0,\r\n          severity: 'MEDIUM',\r\n          timestamp: new Date(),\r\n        });\r\n      }\r\n      \r\n      return {\r\n        isReconciled,\r\n        currency,\r\n        expectedBalance,\r\n        actualBalance,\r\n        reconciledTransactions: reconciledTransactions.length,\r\n        unreconciledTransactions,\r\n        discrepancies,\r\n        timestamp: new Date(),\r\n      };\r\n      \r\n    } catch (error) {\r\n      logger.error(`❌ Failed to reconcile transactions for ${currency}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load transaction history from exchange\r\n   */\r\n  private async loadTransactionHistory(): Promise<void> {\r\n    try {\r\n      // Load trade history for each currency\r\n      const currencies = Array.from(this.currentBalances.keys());\r\n      \r\n      for (const currency of currencies) {\r\n        try {\r\n          const trades = await this.gateIOClient.makeRequest<TradeHistory[]>({\r\n            method: 'GET',\r\n            url: '/spot/my_trades',\r\n            params: {\r\n              currency_pair: `${currency}_USDT`,\r\n              limit: 100,\r\n            },\r\n          });\r\n          \r\n          this.transactionHistory.set(currency, trades);\r\n        } catch (error) {\r\n          // Some currencies might not have trading pairs, skip silently\r\n          logger.debug(`No trade history found for ${currency}`);\r\n        }\r\n      }\r\n      \r\n      logger.info(`📋 Loaded transaction history for ${this.transactionHistory.size} currencies`);\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to load transaction history:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialize default balance alerts\r\n   */\r\n  private initializeBalanceAlerts(): void {\r\n    // Set default low balance alerts for major currencies\r\n    const majorCurrencies = ['BTC', 'ETH', 'USDT'];\r\n    \r\n    for (const currency of majorCurrencies) {\r\n      this.setBalanceAlert(currency, 'LOW_BALANCE', 0.001); // Very low threshold\r\n    }\r\n    \r\n    logger.info('🔔 Default balance alerts initialized');\r\n  }\r\n\r\n  /**\r\n   * Start real-time balance monitoring\r\n   */\r\n  private startRealTimeMonitoring(): void {\r\n    this.monitoringTimer = setInterval(async () => {\r\n      try {\r\n        await this.loadCurrentBalances();\r\n        await this.checkEmergencyStop();\r\n      } catch (error) {\r\n        logger.error('❌ Error in balance monitoring:', error);\r\n      }\r\n    }, this.config.monitoringInterval);\r\n    \r\n    logger.info('👁️ Started real-time balance monitoring');\r\n  }\r\n\r\n  /**\r\n   * Start transaction reconciliation\r\n   */\r\n  private startReconciliation(): void {\r\n    this.reconciliationTimer = setInterval(async () => {\r\n      try {\r\n        await this.reconcileTransactions();\r\n      } catch (error) {\r\n        logger.error('❌ Error in transaction reconciliation:', error);\r\n      }\r\n    }, this.config.reconciliationInterval);\r\n    \r\n    logger.info('🔄 Started transaction reconciliation');\r\n  }\r\n\r\n  /**\r\n   * Check balance alerts\r\n   */\r\n  private async checkBalanceAlerts(): Promise<void> {\r\n    for (const [currency, alerts] of this.balanceAlerts) {\r\n      const balance = this.currentBalances.get(currency);\r\n      if (!balance) continue;\r\n      \r\n      for (const alert of alerts) {\r\n        if (!alert.enabled) continue;\r\n        \r\n        const shouldTrigger = await this.shouldTriggerAlert(balance, alert);\r\n        if (shouldTrigger) {\r\n          await this.triggerBalanceAlert(currency, alert.alertType, alert);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Determine if alert should be triggered\r\n   */\r\n  private async shouldTriggerAlert(balance: AccountBalance, alert: BalanceAlert): Promise<boolean> {\r\n    const totalBalance = parseFloat(balance.total);\r\n    \r\n    switch (alert.alertType) {\r\n      case 'LOW_BALANCE':\r\n        return totalBalance < alert.threshold;\r\n      case 'HIGH_BALANCE':\r\n        return totalBalance > alert.threshold;\r\n      case 'RAPID_CHANGE':\r\n        // Check for rapid balance changes (simplified)\r\n        return false; // Would need historical comparison\r\n      case 'DISCREPANCY':\r\n        return false; // Handled separately in validation\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trigger balance alert\r\n   */\r\n  private async triggerBalanceAlert(\r\n    currency: string, \r\n    alertType: BalanceAlert['alertType'], \r\n    alertData: any\r\n  ): Promise<void> {\r\n    try {\r\n      // Update alert statistics\r\n      const alerts = this.balanceAlerts.get(currency) || [];\r\n      const alert = alerts.find(a => a.alertType === alertType);\r\n      if (alert) {\r\n        alert.lastTriggered = new Date();\r\n        alert.triggerCount++;\r\n      }\r\n      \r\n      this.stats.alertsTriggered++;\r\n      \r\n      // Log alert\r\n      await this.logBalanceEvent('BALANCE_ALERT_TRIGGERED', {\r\n        currency,\r\n        alertType,\r\n        alertData,\r\n      });\r\n      \r\n      // Emit alert event\r\n      this.emit('balanceAlert', {\r\n        currency,\r\n        alertType,\r\n        alertData,\r\n        timestamp: new Date(),\r\n      });\r\n      \r\n      logger.warn(`🔔 Balance alert triggered: ${currency} ${alertType}`);\r\n      \r\n    } catch (error) {\r\n      logger.error('❌ Failed to trigger balance alert:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if balances should be refreshed\r\n   */\r\n  private shouldRefreshBalances(): boolean {\r\n    if (!this.stats.lastBalanceUpdate) return true;\r\n    \r\n    const timeSinceUpdate = Date.now() - this.stats.lastBalanceUpdate.getTime();\r\n    return timeSinceUpdate > this.config.monitoringInterval;\r\n  }\r\n\r\n  /**\r\n   * Check if there's a significant balance change\r\n   */\r\n  private async hasSignificantBalanceChange(): Promise<boolean> {\r\n    if (this.balanceHistory.length === 0) return true;\r\n    \r\n    const lastSnapshot = this.balanceHistory[this.balanceHistory.length - 1];\r\n    const currentValue = await this.getTotalPortfolioValue();\r\n    const changePercent = Math.abs((currentValue - lastSnapshot.totalValueUSD) / lastSnapshot.totalValueUSD) * 100;\r\n    \r\n    return changePercent > 1; // 1% change threshold\r\n  }\r\n\r\n  /**\r\n   * Get currency price in USD\r\n   */\r\n  private async getCurrencyPrice(currency: string): Promise<number> {\r\n    try {\r\n      if (currency === 'USDT' || currency === 'USD') return 1;\r\n      \r\n      const ticker = await this.gateIOClient.makeRequest({\r\n        method: 'GET',\r\n        url: '/spot/tickers',\r\n        params: { currency_pair: `${currency}_USDT` },\r\n      });\r\n      \r\n      return parseFloat(ticker[0]?.last || '0');\r\n      \r\n    } catch (error) {\r\n      logger.error(`❌ Failed to get price for ${currency}:`, error);\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update balance statistics\r\n   */\r\n  private updateBalanceStats(validationTime: number, discrepancyCount: number): void {\r\n    // Update average validation time\r\n    const alpha = 0.1;\r\n    this.stats.averageBalanceCheckTime = \r\n      (alpha * validationTime) + ((1 - alpha) * this.stats.averageBalanceCheckTime);\r\n    \r\n    // Update balance accuracy\r\n    const totalChecks = this.stats.totalBalanceChecks;\r\n    const totalDiscrepancies = this.stats.discrepanciesDetected;\r\n    this.stats.balanceAccuracy = totalChecks > 0 ? ((totalChecks - totalDiscrepancies) / totalChecks) * 100 : 100;\r\n  }\r\n\r\n  /**\r\n   * Clean up old snapshots\r\n   */\r\n  private async cleanupOldSnapshots(): Promise<void> {\r\n    const cutoffDate = new Date(Date.now() - (this.config.snapshotRetentionDays * 24 * 60 * 60 * 1000));\r\n    \r\n    const initialCount = this.balanceHistory.length;\r\n    this.balanceHistory = this.balanceHistory.filter(\r\n      snapshot => snapshot.timestamp > cutoffDate\r\n    );\r\n    \r\n    const removedCount = initialCount - this.balanceHistory.length;\r\n    if (removedCount > 0) {\r\n      logger.info(`🧹 Cleaned up ${removedCount} old balance snapshots`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate unique snapshot ID\r\n   */\r\n  private generateSnapshotId(): string {\r\n    return `snapshot_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  /**\r\n   * Log balance event for audit trail\r\n   */\r\n  private async logBalanceEvent(eventType: string, eventData: any): Promise<void> {\r\n    await this.auditService.logSecurityEvent({\r\n      type: eventType,\r\n      severity: 'INFO',\r\n      details: eventData,\r\n      timestamp: new Date(),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get balance management statistics\r\n   */\r\n  public getBalanceStats(): BalanceStats {\r\n    return { ...this.stats };\r\n  }\r\n\r\n  /**\r\n   * Get balance management configuration\r\n   */\r\n  public getConfig(): BalanceConfig {\r\n    return { ...this.config };\r\n  }\r\n\r\n  /**\r\n   * Update balance management configuration\r\n   */\r\n  public updateConfig(config: Partial<BalanceConfig>): void {\r\n    this.config = { ...this.config, ...config };\r\n    \r\n    // Restart monitoring if interval changed\r\n    if (config.monitoringInterval && this.monitoringTimer) {\r\n      clearInterval(this.monitoringTimer);\r\n      this.startRealTimeMonitoring();\r\n    }\r\n    \r\n    // Restart reconciliation if interval changed\r\n    if (config.reconciliationInterval && this.reconciliationTimer) {\r\n      clearInterval(this.reconciliationTimer);\r\n      this.startReconciliation();\r\n    }\r\n    \r\n    logger.info('⚙️ Balance management configuration updated');\r\n  }\r\n\r\n  /**\r\n   * Graceful shutdown\r\n   */\r\n  public async shutdown(): Promise<void> {\r\n    logger.info('🛑 Shutting down Balance Manager...');\r\n    \r\n    // Stop monitoring timers\r\n    if (this.monitoringTimer) {\r\n      clearInterval(this.monitoringTimer);\r\n      this.monitoringTimer = null;\r\n    }\r\n    \r\n    if (this.reconciliationTimer) {\r\n      clearInterval(this.reconciliationTimer);\r\n      this.reconciliationTimer = null;\r\n    }\r\n    \r\n    // Create final snapshot\r\n    await this.createBalanceSnapshot();\r\n    \r\n    // Log final statistics\r\n    await this.auditService.logSecurityEvent({\r\n      type: 'BALANCE_MANAGER_SHUTDOWN',\r\n      severity: 'INFO',\r\n      details: { \r\n        stats: this.stats,\r\n        balanceCount: this.currentBalances.size,\r\n        snapshotCount: this.balanceHistory.length \r\n      },\r\n      timestamp: new Date(),\r\n    });\r\n    \r\n    logger.info('✅ Balance Manager shutdown completed');\r\n  }\r\n}\r\n\r\n// Export types\r\nexport type {\r\n  BalanceSnapshot,\r\n  DiscrepancyResult,\r\n  BalanceAlert,\r\n  ReconciliationResult,\r\n  BalanceStats,\r\n  BalanceConfig,\r\n};"],"mappings":"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","ignoreList":[]}