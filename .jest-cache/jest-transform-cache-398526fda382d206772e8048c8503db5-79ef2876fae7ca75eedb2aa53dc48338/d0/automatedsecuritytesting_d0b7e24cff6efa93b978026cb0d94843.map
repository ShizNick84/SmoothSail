{"version":3,"names":["cov_g4w5h3veu","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","cron","__importStar","require","fs","AutomatedSecurityTestingSuite","logger","penetrationTesting","securityMonitoring","incidentResponse","notifications","config","scheduledJobs","Map","activeExecutions","constructor","initialize","info","ensureOutputDirectory","scheduleSecurityTests","startContinuousMonitoring","scheduledTests","size","outputDirectory","reportingConfig","error","schedule","schedules","enabled","scheduleSecurityTest","task","cronExpression","executeScheduledTest","scheduled","timezone","set","id","scheduleId","testTypes","executionId","Date","now","Math","random","toString","substr","execution","startTime","status","scheduleName","report","executeSecurityTestSuite","endTime","lastRun","saveSecurityReport","processSecurityTestResults","totalVulnerabilities","criticalCount","complianceScore","Error","message","String","sendFailureNotification","delete","executeSecurityTestsOnDemand","alertingConfig","criticalThreshold","handleCriticalVulnerabilities","highCount","highThreshold","handleHighVulnerabilities","emailReports","sendSecurityReport","updateSecurityMetrics","integrationConfig","cicdIntegration","triggerCICDIntegration","warn","threshold","incident","createIncident","severity","description","source","evidence","vulnerabilities","filter","v","immediateNotification","sendCriticalAlert","title","details","incidentId","priority","emailAlerts","sendAlert","reportData","metadata","generatedAt","format","fileName","filePath","join","writeFile","JSON","stringify","fileSize","length","cleanupOldReports","emailContent","generateEmailReport","sendEmail","to","subject","html","attachments","filename","content","contentType","severityColors","CRITICAL","HIGH","MEDIUM","LOW","toISOString","mediumCount","lowCount","slice","map","toLowerCase","location","remediation","recommendations","r","notificationError","originalError","timestamp","webhookUrl","payload","total","critical","high","medium","low","mkdir","recursive","directory","files","readdir","cutoffDate","setDate","getDate","retentionDays","startsWith","stats","stat","mtime","unlink","getActiveExecutions","Array","from","values","getScheduledTests","addSecurityTestSchedule","push","removeSecurityTestSchedule","get","stop","stopAllScheduledTests","clear","shutdown","exports"],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\automated-security-testing.ts"],"sourcesContent":["/**\r\n * Automated Security Testing Suite\r\n * \r\n * Orchestrates comprehensive security testing including penetration testing,\r\n * vulnerability scanning, and compliance validation for the AI crypto trading agent.\r\n * \r\n * Features:\r\n * - Automated test scheduling and execution\r\n * - Continuous security monitoring\r\n * - Integration with CI/CD pipelines\r\n * - Comprehensive reporting and alerting\r\n */\r\n\r\nimport { Logger } from '../core/logging/logger';\r\nimport { PenetrationTestingService, VulnerabilityReport, PenetrationTestConfig } from './penetration-testing-service';\r\nimport { SecurityMonitoringService } from './security-monitoring-service';\r\nimport { IncidentResponseService } from './incident-response-service';\r\nimport { NotificationService } from '../core/notifications/notification-service';\r\nimport * as cron from 'node-cron';\r\nimport * as fs from 'fs/promises';\r\nimport * as path from 'path';\r\n\r\nexport interface SecurityTestSchedule {\r\n  id: string;\r\n  name: string;\r\n  cronExpression: string;\r\n  testTypes: string[];\r\n  enabled: boolean;\r\n  lastRun?: Date;\r\n  nextRun?: Date;\r\n}\r\n\r\nexport interface SecurityTestSuiteConfig {\r\n  schedules: SecurityTestSchedule[];\r\n  reportingConfig: {\r\n    outputDirectory: string;\r\n    retentionDays: number;\r\n    emailReports: boolean;\r\n    slackIntegration: boolean;\r\n  };\r\n  alertingConfig: {\r\n    criticalThreshold: number;\r\n    highThreshold: number;\r\n    emailAlerts: boolean;\r\n    immediateNotification: boolean;\r\n  };\r\n  integrationConfig: {\r\n    cicdIntegration: boolean;\r\n    webhookUrl?: string;\r\n    apiKey?: string;\r\n  };\r\n}\r\n\r\nexport interface SecurityTestExecution {\r\n  executionId: string;\r\n  scheduleId: string;\r\n  startTime: Date;\r\n  endTime?: Date;\r\n  status: 'RUNNING' | 'COMPLETED' | 'FAILED' | 'CANCELLED';\r\n  report?: VulnerabilityReport;\r\n  error?: string;\r\n}\r\n\r\nexport class AutomatedSecurityTestingSuite {\r\n  private logger: Logger;\r\n  private penetrationTesting: PenetrationTestingService;\r\n  private securityMonitoring: SecurityMonitoringService;\r\n  private incidentResponse: IncidentResponseService;\r\n  private notifications: NotificationService;\r\n  private config: SecurityTestSuiteConfig;\r\n  private scheduledJobs: Map<string, cron.ScheduledTask> = new Map();\r\n  private activeExecutions: Map<string, SecurityTestExecution> = new Map();\r\n\r\n  constructor(\r\n    logger: Logger,\r\n    penetrationTesting: PenetrationTestingService,\r\n    securityMonitoring: SecurityMonitoringService,\r\n    incidentResponse: IncidentResponseService,\r\n    notifications: NotificationService,\r\n    config: SecurityTestSuiteConfig\r\n  ) {\r\n    this.logger = logger;\r\n    this.penetrationTesting = penetrationTesting;\r\n    this.securityMonitoring = securityMonitoring;\r\n    this.incidentResponse = incidentResponse;\r\n    this.notifications = notifications;\r\n    this.config = config;\r\n  }\r\n\r\n  /**\r\n   * Initialize the automated security testing suite\r\n   */\r\n  async initialize(): Promise<void> {\r\n    this.logger.info('Initializing automated security testing suite');\r\n\r\n    try {\r\n      // Create output directory if it doesn't exist\r\n      await this.ensureOutputDirectory();\r\n\r\n      // Schedule all enabled security tests\r\n      await this.scheduleSecurityTests();\r\n\r\n      // Start continuous monitoring\r\n      await this.startContinuousMonitoring();\r\n\r\n      this.logger.info('Automated security testing suite initialized successfully', {\r\n        scheduledTests: this.scheduledJobs.size,\r\n        outputDirectory: this.config.reportingConfig.outputDirectory\r\n      });\r\n    } catch (error) {\r\n      this.logger.error('Failed to initialize automated security testing suite', { error });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Schedule all security tests based on configuration\r\n   */\r\n  private async scheduleSecurityTests(): Promise<void> {\r\n    for (const schedule of this.config.schedules) {\r\n      if (schedule.enabled) {\r\n        await this.scheduleSecurityTest(schedule);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Schedule a specific security test\r\n   */\r\n  private async scheduleSecurityTest(schedule: SecurityTestSchedule): Promise<void> {\r\n    try {\r\n      const task = cron.schedule(schedule.cronExpression, async () => {\r\n        await this.executeScheduledTest(schedule);\r\n      }, {\r\n        scheduled: false,\r\n        timezone: 'UTC'\r\n      });\r\n\r\n      this.scheduledJobs.set(schedule.id, task);\r\n      task.start();\r\n\r\n      this.logger.info(`Scheduled security test: ${schedule.name}`, {\r\n        scheduleId: schedule.id,\r\n        cronExpression: schedule.cronExpression,\r\n        testTypes: schedule.testTypes\r\n      });\r\n    } catch (error) {\r\n      this.logger.error(`Failed to schedule security test: ${schedule.name}`, { \r\n        scheduleId: schedule.id, \r\n        error \r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Execute a scheduled security test\r\n   */\r\n  private async executeScheduledTest(schedule: SecurityTestSchedule): Promise<void> {\r\n    const executionId = `exec_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n    \r\n    const execution: SecurityTestExecution = {\r\n      executionId,\r\n      scheduleId: schedule.id,\r\n      startTime: new Date(),\r\n      status: 'RUNNING'\r\n    };\r\n\r\n    this.activeExecutions.set(executionId, execution);\r\n\r\n    this.logger.info(`Starting scheduled security test execution`, {\r\n      executionId,\r\n      scheduleName: schedule.name,\r\n      testTypes: schedule.testTypes\r\n    });\r\n\r\n    try {\r\n      // Execute the security test suite\r\n      const report = await this.penetrationTesting.executeSecurityTestSuite();\r\n\r\n      // Update execution status\r\n      execution.endTime = new Date();\r\n      execution.status = 'COMPLETED';\r\n      execution.report = report;\r\n\r\n      // Update schedule last run time\r\n      schedule.lastRun = new Date();\r\n\r\n      // Save report to disk\r\n      await this.saveSecurityReport(execution, report);\r\n\r\n      // Process results and send alerts if necessary\r\n      await this.processSecurityTestResults(execution, report);\r\n\r\n      this.logger.info(`Security test execution completed successfully`, {\r\n        executionId,\r\n        totalVulnerabilities: report.totalVulnerabilities,\r\n        criticalCount: report.criticalCount,\r\n        complianceScore: report.complianceScore\r\n      });\r\n\r\n    } catch (error) {\r\n      execution.endTime = new Date();\r\n      execution.status = 'FAILED';\r\n      execution.error = error instanceof Error ? error.message : String(error);\r\n\r\n      this.logger.error(`Security test execution failed`, {\r\n        executionId,\r\n        scheduleName: schedule.name,\r\n        error\r\n      });\r\n\r\n      // Send failure notification\r\n      await this.sendFailureNotification(execution, error);\r\n    } finally {\r\n      this.activeExecutions.delete(executionId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Execute security tests on demand\r\n   */\r\n  async executeSecurityTestsOnDemand(testTypes?: string[]): Promise<VulnerabilityReport> {\r\n    const executionId = `ondemand_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n    \r\n    const execution: SecurityTestExecution = {\r\n      executionId,\r\n      scheduleId: 'on-demand',\r\n      startTime: new Date(),\r\n      status: 'RUNNING'\r\n    };\r\n\r\n    this.activeExecutions.set(executionId, execution);\r\n\r\n    this.logger.info(`Starting on-demand security test execution`, {\r\n      executionId,\r\n      testTypes: testTypes || 'all'\r\n    });\r\n\r\n    try {\r\n      // Execute the security test suite\r\n      const report = await this.penetrationTesting.executeSecurityTestSuite();\r\n\r\n      execution.endTime = new Date();\r\n      execution.status = 'COMPLETED';\r\n      execution.report = report;\r\n\r\n      // Save report to disk\r\n      await this.saveSecurityReport(execution, report);\r\n\r\n      // Process results\r\n      await this.processSecurityTestResults(execution, report);\r\n\r\n      this.logger.info(`On-demand security test execution completed`, {\r\n        executionId,\r\n        totalVulnerabilities: report.totalVulnerabilities,\r\n        criticalCount: report.criticalCount\r\n      });\r\n\r\n      return report;\r\n\r\n    } catch (error) {\r\n      execution.endTime = new Date();\r\n      execution.status = 'FAILED';\r\n      execution.error = error instanceof Error ? error.message : String(error);\r\n\r\n      this.logger.error(`On-demand security test execution failed`, {\r\n        executionId,\r\n        error\r\n      });\r\n\r\n      throw error;\r\n    } finally {\r\n      this.activeExecutions.delete(executionId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Process security test results and trigger appropriate actions\r\n   */\r\n  private async processSecurityTestResults(\r\n    execution: SecurityTestExecution,\r\n    report: VulnerabilityReport\r\n  ): Promise<void> {\r\n    // Check if critical vulnerabilities exceed threshold\r\n    if (report.criticalCount >= this.config.alertingConfig.criticalThreshold) {\r\n      await this.handleCriticalVulnerabilities(execution, report);\r\n    }\r\n\r\n    // Check if high vulnerabilities exceed threshold\r\n    if (report.highCount >= this.config.alertingConfig.highThreshold) {\r\n      await this.handleHighVulnerabilities(execution, report);\r\n    }\r\n\r\n    // Send regular report if configured\r\n    if (this.config.reportingConfig.emailReports) {\r\n      await this.sendSecurityReport(execution, report);\r\n    }\r\n\r\n    // Update security metrics\r\n    await this.updateSecurityMetrics(report);\r\n\r\n    // Trigger CI/CD integration if configured\r\n    if (this.config.integrationConfig.cicdIntegration) {\r\n      await this.triggerCICDIntegration(execution, report);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle critical vulnerabilities\r\n   */\r\n  private async handleCriticalVulnerabilities(\r\n    execution: SecurityTestExecution,\r\n    report: VulnerabilityReport\r\n  ): Promise<void> {\r\n    this.logger.warn(`Critical vulnerabilities detected`, {\r\n      executionId: execution.executionId,\r\n      criticalCount: report.criticalCount,\r\n      threshold: this.config.alertingConfig.criticalThreshold\r\n    });\r\n\r\n    // Create security incident\r\n    const incident = await this.incidentResponse.createIncident({\r\n      type: 'CRITICAL_VULNERABILITIES',\r\n      severity: 'CRITICAL',\r\n      description: `${report.criticalCount} critical vulnerabilities detected in security scan`,\r\n      source: 'Automated Security Testing',\r\n      evidence: report.vulnerabilities.filter(v => v.severity === 'CRITICAL')\r\n    });\r\n\r\n    // Send immediate notification if configured\r\n    if (this.config.alertingConfig.immediateNotification) {\r\n      await this.notifications.sendCriticalAlert({\r\n        title: '🚨 Critical Security Vulnerabilities Detected',\r\n        message: `Security scan found ${report.criticalCount} critical vulnerabilities requiring immediate attention.`,\r\n        details: {\r\n          executionId: execution.executionId,\r\n          criticalCount: report.criticalCount,\r\n          complianceScore: report.complianceScore,\r\n          incidentId: incident.id\r\n        },\r\n        priority: 'CRITICAL'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle high severity vulnerabilities\r\n   */\r\n  private async handleHighVulnerabilities(\r\n    execution: SecurityTestExecution,\r\n    report: VulnerabilityReport\r\n  ): Promise<void> {\r\n    this.logger.warn(`High severity vulnerabilities detected`, {\r\n      executionId: execution.executionId,\r\n      highCount: report.highCount,\r\n      threshold: this.config.alertingConfig.highThreshold\r\n    });\r\n\r\n    // Send alert notification\r\n    if (this.config.alertingConfig.emailAlerts) {\r\n      await this.notifications.sendAlert({\r\n        title: '⚠️ High Severity Security Vulnerabilities',\r\n        message: `Security scan found ${report.highCount} high severity vulnerabilities.`,\r\n        details: {\r\n          executionId: execution.executionId,\r\n          highCount: report.highCount,\r\n          complianceScore: report.complianceScore\r\n        },\r\n        priority: 'HIGH'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Save security report to disk\r\n   */\r\n  private async saveSecurityReport(\r\n    execution: SecurityTestExecution,\r\n    report: VulnerabilityReport\r\n  ): Promise<void> {\r\n    try {\r\n      const reportData = {\r\n        execution: {\r\n          executionId: execution.executionId,\r\n          scheduleId: execution.scheduleId,\r\n          startTime: execution.startTime,\r\n          endTime: execution.endTime,\r\n          status: execution.status\r\n        },\r\n        report,\r\n        metadata: {\r\n          generatedAt: new Date(),\r\n          version: '1.0',\r\n          format: 'json'\r\n        }\r\n      };\r\n\r\n      const fileName = `security-report-${execution.executionId}-${Date.now()}.json`;\r\n      const filePath = path.join(this.config.reportingConfig.outputDirectory, fileName);\r\n\r\n      await fs.writeFile(filePath, JSON.stringify(reportData, null, 2));\r\n\r\n      this.logger.info(`Security report saved`, {\r\n        executionId: execution.executionId,\r\n        filePath,\r\n        fileSize: JSON.stringify(reportData).length\r\n      });\r\n\r\n      // Clean up old reports if retention policy is configured\r\n      await this.cleanupOldReports();\r\n\r\n    } catch (error) {\r\n      this.logger.error(`Failed to save security report`, {\r\n        executionId: execution.executionId,\r\n        error\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send security report via email\r\n   */\r\n  private async sendSecurityReport(\r\n    execution: SecurityTestExecution,\r\n    report: VulnerabilityReport\r\n  ): Promise<void> {\r\n    try {\r\n      const emailContent = this.generateEmailReport(execution, report);\r\n\r\n      await this.notifications.sendEmail({\r\n        to: 'security-team@company.com',\r\n        subject: `Security Test Report - ${execution.executionId}`,\r\n        html: emailContent,\r\n        attachments: [{\r\n          filename: `security-report-${execution.executionId}.json`,\r\n          content: JSON.stringify(report, null, 2),\r\n          contentType: 'application/json'\r\n        }]\r\n      });\r\n\r\n      this.logger.info(`Security report sent via email`, {\r\n        executionId: execution.executionId\r\n      });\r\n\r\n    } catch (error) {\r\n      this.logger.error(`Failed to send security report via email`, {\r\n        executionId: execution.executionId,\r\n        error\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate HTML email report\r\n   */\r\n  private generateEmailReport(\r\n    execution: SecurityTestExecution,\r\n    report: VulnerabilityReport\r\n  ): string {\r\n    const severityColors = {\r\n      CRITICAL: '#dc3545',\r\n      HIGH: '#fd7e14',\r\n      MEDIUM: '#ffc107',\r\n      LOW: '#28a745'\r\n    };\r\n\r\n    return `\r\n      <!DOCTYPE html>\r\n      <html>\r\n      <head>\r\n        <style>\r\n          body { font-family: Arial, sans-serif; margin: 20px; }\r\n          .header { background-color: #f8f9fa; padding: 20px; border-radius: 5px; }\r\n          .summary { display: flex; justify-content: space-around; margin: 20px 0; }\r\n          .metric { text-align: center; padding: 15px; border-radius: 5px; background-color: #e9ecef; }\r\n          .vulnerability { margin: 10px 0; padding: 15px; border-left: 4px solid #ccc; }\r\n          .critical { border-left-color: ${severityColors.CRITICAL}; }\r\n          .high { border-left-color: ${severityColors.HIGH}; }\r\n          .medium { border-left-color: ${severityColors.MEDIUM}; }\r\n          .low { border-left-color: ${severityColors.LOW}; }\r\n          .recommendations { background-color: #d1ecf1; padding: 15px; border-radius: 5px; }\r\n        </style>\r\n      </head>\r\n      <body>\r\n        <div class=\"header\">\r\n          <h1>🔒 Security Test Report</h1>\r\n          <p><strong>Execution ID:</strong> ${execution.executionId}</p>\r\n          <p><strong>Execution Time:</strong> ${execution.startTime.toISOString()}</p>\r\n          <p><strong>Status:</strong> ${execution.status}</p>\r\n        </div>\r\n\r\n        <div class=\"summary\">\r\n          <div class=\"metric\">\r\n            <h3>${report.totalVulnerabilities}</h3>\r\n            <p>Total Vulnerabilities</p>\r\n          </div>\r\n          <div class=\"metric\">\r\n            <h3 style=\"color: ${severityColors.CRITICAL}\">${report.criticalCount}</h3>\r\n            <p>Critical</p>\r\n          </div>\r\n          <div class=\"metric\">\r\n            <h3 style=\"color: ${severityColors.HIGH}\">${report.highCount}</h3>\r\n            <p>High</p>\r\n          </div>\r\n          <div class=\"metric\">\r\n            <h3 style=\"color: ${severityColors.MEDIUM}\">${report.mediumCount}</h3>\r\n            <p>Medium</p>\r\n          </div>\r\n          <div class=\"metric\">\r\n            <h3 style=\"color: ${severityColors.LOW}\">${report.lowCount}</h3>\r\n            <p>Low</p>\r\n          </div>\r\n          <div class=\"metric\">\r\n            <h3>${report.complianceScore}%</h3>\r\n            <p>Compliance Score</p>\r\n          </div>\r\n        </div>\r\n\r\n        <h2>🔍 Top Vulnerabilities</h2>\r\n        ${report.vulnerabilities\r\n          .filter(v => v.severity === 'CRITICAL' || v.severity === 'HIGH')\r\n          .slice(0, 10)\r\n          .map(v => `\r\n            <div class=\"vulnerability ${v.severity.toLowerCase()}\">\r\n              <h4>${v.type} - ${v.severity}</h4>\r\n              <p><strong>Description:</strong> ${v.description}</p>\r\n              <p><strong>Location:</strong> ${v.location}</p>\r\n              <p><strong>Remediation:</strong> ${v.remediation}</p>\r\n            </div>\r\n          `).join('')}\r\n\r\n        <div class=\"recommendations\">\r\n          <h2>💡 Recommendations</h2>\r\n          <ul>\r\n            ${report.recommendations.slice(0, 10).map(r => `<li>${r}</li>`).join('')}\r\n          </ul>\r\n        </div>\r\n\r\n        <p><em>This is an automated security report generated by the AI Crypto Trading Agent Security Testing Suite.</em></p>\r\n      </body>\r\n      </html>\r\n    `;\r\n  }\r\n\r\n  /**\r\n   * Send failure notification\r\n   */\r\n  private async sendFailureNotification(\r\n    execution: SecurityTestExecution,\r\n    error: any\r\n  ): Promise<void> {\r\n    try {\r\n      await this.notifications.sendAlert({\r\n        title: '❌ Security Test Execution Failed',\r\n        message: `Security test execution ${execution.executionId} failed with error: ${error.message}`,\r\n        details: {\r\n          executionId: execution.executionId,\r\n          scheduleId: execution.scheduleId,\r\n          error: error.message,\r\n          startTime: execution.startTime,\r\n          endTime: execution.endTime\r\n        },\r\n        priority: 'HIGH'\r\n      });\r\n    } catch (notificationError) {\r\n      this.logger.error(`Failed to send failure notification`, {\r\n        executionId: execution.executionId,\r\n        originalError: error,\r\n        notificationError\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update security metrics\r\n   */\r\n  private async updateSecurityMetrics(report: VulnerabilityReport): Promise<void> {\r\n    try {\r\n      await this.securityMonitoring.updateSecurityMetrics({\r\n        timestamp: new Date(),\r\n        totalVulnerabilities: report.totalVulnerabilities,\r\n        criticalCount: report.criticalCount,\r\n        highCount: report.highCount,\r\n        mediumCount: report.mediumCount,\r\n        lowCount: report.lowCount,\r\n        complianceScore: report.complianceScore\r\n      });\r\n    } catch (error) {\r\n      this.logger.error(`Failed to update security metrics`, { error });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trigger CI/CD integration\r\n   */\r\n  private async triggerCICDIntegration(\r\n    execution: SecurityTestExecution,\r\n    report: VulnerabilityReport\r\n  ): Promise<void> {\r\n    if (!this.config.integrationConfig.webhookUrl) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const payload = {\r\n        executionId: execution.executionId,\r\n        timestamp: new Date().toISOString(),\r\n        status: execution.status,\r\n        vulnerabilities: {\r\n          total: report.totalVulnerabilities,\r\n          critical: report.criticalCount,\r\n          high: report.highCount,\r\n          medium: report.mediumCount,\r\n          low: report.lowCount\r\n        },\r\n        complianceScore: report.complianceScore,\r\n        recommendations: report.recommendations.slice(0, 5)\r\n      };\r\n\r\n      // This would make an HTTP request to the CI/CD webhook\r\n      this.logger.info(`Triggering CI/CD integration`, {\r\n        executionId: execution.executionId,\r\n        webhookUrl: this.config.integrationConfig.webhookUrl\r\n      });\r\n\r\n    } catch (error) {\r\n      this.logger.error(`Failed to trigger CI/CD integration`, {\r\n        executionId: execution.executionId,\r\n        error\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Start continuous monitoring\r\n   */\r\n  private async startContinuousMonitoring(): Promise<void> {\r\n    // This would start continuous security monitoring\r\n    // For now, we'll just log that it's started\r\n    this.logger.info('Continuous security monitoring started');\r\n  }\r\n\r\n  /**\r\n   * Ensure output directory exists\r\n   */\r\n  private async ensureOutputDirectory(): Promise<void> {\r\n    try {\r\n      await fs.mkdir(this.config.reportingConfig.outputDirectory, { recursive: true });\r\n    } catch (error) {\r\n      this.logger.error(`Failed to create output directory`, {\r\n        directory: this.config.reportingConfig.outputDirectory,\r\n        error\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clean up old reports based on retention policy\r\n   */\r\n  private async cleanupOldReports(): Promise<void> {\r\n    try {\r\n      const files = await fs.readdir(this.config.reportingConfig.outputDirectory);\r\n      const cutoffDate = new Date();\r\n      cutoffDate.setDate(cutoffDate.getDate() - this.config.reportingConfig.retentionDays);\r\n\r\n      for (const file of files) {\r\n        if (file.startsWith('security-report-')) {\r\n          const filePath = path.join(this.config.reportingConfig.outputDirectory, file);\r\n          const stats = await fs.stat(filePath);\r\n          \r\n          if (stats.mtime < cutoffDate) {\r\n            await fs.unlink(filePath);\r\n            this.logger.info(`Deleted old security report`, { file });\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      this.logger.error(`Failed to cleanup old reports`, { error });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get active executions\r\n   */\r\n  getActiveExecutions(): SecurityTestExecution[] {\r\n    return Array.from(this.activeExecutions.values());\r\n  }\r\n\r\n  /**\r\n   * Get scheduled tests\r\n   */\r\n  getScheduledTests(): SecurityTestSchedule[] {\r\n    return this.config.schedules;\r\n  }\r\n\r\n  /**\r\n   * Add new security test schedule\r\n   */\r\n  async addSecurityTestSchedule(schedule: SecurityTestSchedule): Promise<void> {\r\n    this.config.schedules.push(schedule);\r\n    \r\n    if (schedule.enabled) {\r\n      await this.scheduleSecurityTest(schedule);\r\n    }\r\n\r\n    this.logger.info(`Added new security test schedule`, {\r\n      scheduleId: schedule.id,\r\n      name: schedule.name\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Remove security test schedule\r\n   */\r\n  async removeSecurityTestSchedule(scheduleId: string): Promise<void> {\r\n    const task = this.scheduledJobs.get(scheduleId);\r\n    if (task) {\r\n      task.stop();\r\n      this.scheduledJobs.delete(scheduleId);\r\n    }\r\n\r\n    this.config.schedules = this.config.schedules.filter(s => s.id !== scheduleId);\r\n\r\n    this.logger.info(`Removed security test schedule`, { scheduleId });\r\n  }\r\n\r\n  /**\r\n   * Stop all scheduled tests\r\n   */\r\n  async stopAllScheduledTests(): Promise<void> {\r\n    for (const [scheduleId, task] of this.scheduledJobs) {\r\n      task.stop();\r\n      this.logger.info(`Stopped scheduled test`, { scheduleId });\r\n    }\r\n    \r\n    this.scheduledJobs.clear();\r\n  }\r\n\r\n  /**\r\n   * Shutdown the automated security testing suite\r\n   */\r\n  async shutdown(): Promise<void> {\r\n    this.logger.info('Shutting down automated security testing suite');\r\n\r\n    // Stop all scheduled tests\r\n    await this.stopAllScheduledTests();\r\n\r\n    // Cancel active executions\r\n    for (const execution of this.activeExecutions.values()) {\r\n      execution.status = 'CANCELLED';\r\n      execution.endTime = new Date();\r\n    }\r\n\r\n    this.activeExecutions.clear();\r\n\r\n    this.logger.info('Automated security testing suite shutdown complete');\r\n  }\r\n}\r\n"],"mappings":";;AAAA;;;;;;;;;;;;AAAA;AAAA,SAAAA,ccAAA;MAAAC,IAAA;MAAAC,QAAA;MAAAC,KAAA;MAAAC,OAAA;MAAAC,cAAA;MAAAC,OAAA;IAAA;IAAAC,eAAA;IAAA5B,IAAA;EAAA;EAAA,IAAA6B,QAAA,GAAA5B,MAAA,CAAAE,GAAA,MAAAF,MAAA,CAAAE,GAAA;EAAA,KAAA0B,QAAA,CAAA9B,IAAA,KAAA8B,QAAA,CAAA9B,IAAA,EAAAC,IAAA,KAAAA,IAAA;IAAA6B,QAAA,CAAA9B,IAAA,IAAAK,YAAA;EAAA;EAAA,IAAA0B,cAAA,GAAAD,QAAA,CAAA9B,IAAA;EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBA,MAAAgC,IAAA;AAAA;AAAA,CAAAjC,aAAA,GAAAoB,CAAA,QAAAc,YAAA,CAAAC,OAAA;AACA,MAAAC,EAAA;AAAA;AAAA,CAAApC,aAAA,GAAAoB,CAAA,QAAAc,YAAA,CAAAC,OAAA;AACA,MAAAlC,IAAA;AAAA;AAAA,CAAAD,aAAA,GAAAoB,CAAA,QAAAc,YAAA,CAAAC,OAAA;AA2CA,MAAaE,6BAA6B;EAChCC,MAAM;EACNC,kBAAkB;EAClBC,kBAAkB;EAClBC,gBAAgB;EAChBC,aAAa;EACbC,MAAM;EACNC,aAAa;EAAA;EAAA,CAAA5C,aAAA,GAAAoB,CAAA,QAAoC,IAAIyB,GAAG,EAAE;EAC1DC,gBAAgB;EAAA;EAAA,CAAA9C,aAAA,GAAAoB,CAAA,QAAuC,IAAIyB,GAAG,EAAE;EAExEE,YACET,MAAc,EACdC,kBAA6C,EAC7CC,kBAA6C,EAC7CC,gBAAyC,EACzCC,aAAkC,EAClCC,MAA+B;IAAA;IAAA3C,aAAA,GAAAqB,CAAA;IAAArB,aAAA,GAAAoB,CAAA;IAE/B,IAAI,CAACkB,MAAM,GAAGA,MAAM;IAAC;IAAAtC,aAAA,GAAAoB,CAAA;IACrB,IAAI,CAACmB,kBAAkB,GAAGA,kBAAkB;IAAC;IAAAvC,aAAA,GAAAoB,CAAA;IAC7C,IAAI,CAACoB,kBAAkB,GAAGA,kBAAkB;IAAC;IAAAxC,aAAA,GAAAoB,CAAA;IAC7C,IAAI,CAACqB,gBAAgB,GAAGA,gBAAgB;IAAC;IAAAzC,aAAA,GAAAoB,CAAA;IACzC,IAAI,CAACsB,aAAa,GAAGA,aAAa;IAAC;IAAA1C,aAAA,GAAAoB,CAAA;IACnC,IAAI,CAACuB,MAAM,GAAGA,MAAM;EACtB;EAEA;;;EAGA,MAAMK,UAAUA,CAAA;IAAA;IAAAhD,aAAA,GAAAqB,CAAA;IAAArB,aAAA,GAAAoB,CAAA;IACd,IAAI,CAACkB,MAAM,CAACW,IAAI,CAAC,+CAA+C,CAAC;IAAC;IAAAjD,aAAA,GAAAoB,CAAA;IAElE,IAAI;MAAA;MAAApB,aAAA,GAAAoB,CAAA;MACF;MACA,MAAM,IAAI,CAAC8B,qBAAqB,EAAE;MAElC;MAAA;MAAAlD,aAAA,GAAAoB,CAAA;MACA,MAAM,IAAI,CAAC+B,qBAAqB,EAAE;MAElC;MAAA;MAAAnD,aAAA,GAAAoB,CAAA;MACA,MAAM,IAAI,CAACgC,yBAAyB,EAAE;MAAC;MAAApD,aAAA,GAAAoB,CAAA;MAEvC,IAAI,CAACkB,MAAM,CAACW,IAAI,CAAC,2DAA2D,EAAE;QAC5EI,cAAc,EAAE,IAAI,CAACT,aAAa,CAACU,IAAI;QACvCC,eAAe,EAAE,IAAI,CAACZ,MAAM,CAACa,eAAe,CAACD;OAC9C,CAAC;IACJ,CAAC,CAAC,OAAOE,KAAK,EAAE;MAAA;MAAAzD,aAAA,GAAAoB,CAAA;MACd,IAAI,CAACkB,MAAM,CAACmB,KAAK,CAAC,uDAAuD,EAAE;QAAEA;MAAK,CAAE,CAAC;MAAC;MAAAzD,aAAA,GAAAoB,CAAA;MACtF,MAAMqC,KAAK;IACb;EACF;EAEA;;;EAGQ,MAAMN,qBAAqBA,CAAA;IAAA;IAAAnD,aAAA,GAAAqB,CAAA;IAAArB,aAAA,GAAAoB,CAAA;IACjC,KAAK,MAAMsC,QAAQ,IAAI,IAAI,CAACf,MAAM,CAACgB,SAAS,EAAE;MAAA;MAAA3D,aAAA,GAAAoB,CAAA;MAC5C,IAAIsC,QAAQ,CAACE,OAAO,EAAE;QAAA;QAAA5D,aAAA,GAAAsB,CAAA;QAAAtB,aAAA,GAAAoB,CAAA;QACpB,MAAM,IAAI,CAACyC,oBAAoB,CAACH,QAAQ,CAAC;MAC3C,CAAC;MAAA;MAAA;QAAA1D,aAAA,GAAAsB,CAAA;MAAA;IACH;EACF;EAEA;;;EAGQ,MAAMuC,oBAAoBA,CAACH,QAA8B;IAAA;IAAA1D,aAAA,GAAAqB,CAAA;IAAArB,aAAA,GAAAoB,CAAA;IAC/D,IAAI;MACF,MAAM0C,IAAI;MAAA;MAAA,CAAA9D,aAAA,GAAAoB,CAAA,QAAGa,IAAI,CAACyB,QAAQ,CAACA,QAAQ,CAACK,cAAc,EAAE,YAAW;QAAA;QAAA/D,aAAA,GAAAqB,CAAA;QAAArB,aAAA,GAAAoB,CAAA;QAC7D,MAAM,IAAI,CAAC4C,oBAAoB,CAACN,QAAQ,CAAC;MAC3C,CAAC,EAAE;QACDO,SAAS,EAAE,KAAK;QAChBC,QAAQ,EAAE;OACX,CAAC;MAAC;MAAAlE,aAAA,GAAAoB,CAAA;MAEH,IAAI,CAACwB,aAAa,CAACuB,GAAG,CAACT,QAAQ,CAACU,EAAE,EAAEN,IAAI,CAAC;MAAC;MAAA9D,aAAA,GAAAoB,CAAA;MAC1C0C,IAAI,CAACtD,KAAK,EAAE;MAAC;MAAAR,aAAA,GAAAoB,CAAA;MAEb,IAAI,CAACkB,MAAM,CAACW,IAAI,CAAC,4BAA4BS,QAAQ,CAAC7C,IAAI,EAAE,EAAE;QAC5DwD,UAAU,EAAEX,QAAQ,CAACU,EAAE;QACvBL,cAAc,EAAEL,QAAQ,CAACK,cAAc;QACvCO,SAAS,EAAEZ,QAAQ,CAACY;OACrB,CAAC;IACJ,CAAC,CAAC,OAAOb,KAAK,EAAE;MAAA;MAAAzD,aAAA,GAAAoB,CAAA;MACd,IAAI,CAACkB,MAAM,CAACmB,KAAK,CAAC,qCAAqCC,QAAQ,CAAC7C,IAAI,EAAE,EAAE;QACtEwD,UAAU,EAAEX,QAAQ,CAACU,EAAE;QACvBX;OACD,CAAC;IACJ;EACF;EAEA;;;EAGQ,MAAMO,oBAAoBA,CAACN,QAA8B;IAAA;IAAA1D,aAAA,GAAAqB,CAAA;IAC/D,MAAMkD,WAAW;IAAA;IAAA,CAAAvE,aAAA,GAAAoB,CAAA,QAAG,QAAQoD,IAAI,CAACC,GAAG,EAAE,IAAIC,IAAI,CAACC,MAAM,EAAE,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;IAEnF,MAAMC,SAAS;IAAA;IAAA,CAAA9E,aAAA,GAAAoB,CAAA,QAA0B;MACvCmD,WAAW;MACXF,UAAU,EAAEX,QAAQ,CAACU,EAAE;MACvBW,SAAS,EAAE,IAAIP,IAAI,EAAE;MACrBQ,MAAM,EAAE;KACT;IAAC;IAAAhF,aAAA,GAAAoB,CAAA;IAEF,IAAI,CAAC0B,gBAAgB,CAACqB,GAAG,CAACI,WAAW,EAAEO,SAAS,CAAC;IAAC;IAAA9E,aAAA,GAAAoB,CAAA;IAElD,IAAI,CAACkB,MAAM,CAACW,IAAI,CAAC,4CAA4C,EAAE;MAC7DsB,WAAW;MACXU,YAAY,EAAEvB,QAAQ,CAAC7C,IAAI;MAC3ByD,SAAS,EAAEZ,QAAQ,CAACY;KACrB,CAAC;IAAC;IAAAtE,aAAA,GAAAoB,CAAA;IAEH,IAAI;MACF;MACA,MAAM8D,MAAM;MAAA;MAAA,CAAAlF,aAAA,GAAAoB,CAAA,QAAG,MAAM,IAAI,CAACmB,kBAAkB,CAAC4C,wBAAwB,EAAE;MAEvE;MAAA;MAAAnF,aAAA,GAAAoB,CAAA;MACA0D,SAAS,CAACM,OAAO,GAAG,IAAIZ,IAAI,EAAE;MAAC;MAAAxE,aAAA,GAAAoB,CAAA;MAC/B0D,SAAS,CAACE,MAAM,GAAG,WAAW;MAAC;MAAAhF,aAAA,GAAAoB,CAAA;MAC/B0D,SAAS,CAACI,MAAM,GAAGA,MAAM;MAEzB;MAAA;MAAAlF,aAAA,GAAAoB,CAAA;MACAsC,QAAQ,CAAC2B,OAAO,GAAG,IAAIb,IAAI,EAAE;MAE7B;MAAA;MAAAxE,aAAA,GAAAoB,CAAA;MACA,MAAM,IAAI,CAACkE,kBAAkB,CAACR,SAAS,EAAEI,MAAM,CAAC;MAEhD;MAAA;MAAAlF,aAAA,GAAAoB,CAAA;MACA,MAAM,IAAI,CAACmE,0BAA0B,CAACT,SAAS,EAAEI,MAAM,CAAC;MAAC;MAAAlF,aAAA,GAAAoB,CAAA;MAEzD,IAAI,CAACkB,MAAM,CAACW,IAAI,CAAC,gDAAgD,EAAE;QACjEsB,WAAW;QACXiB,oBAAoB,EAAEN,MAAM,CAACM,oBAAoB;QACjDC,aAAa,EAAEP,MAAM,CAACO,aAAa;QACnCC,eAAe,EAAER,MAAM,CAACQ;OACzB,CAAC;IAEJ,CAAC,CAAC,OAAOjC,KAAK,EAAE;MAAA;MAAAzD,aAAA,GAAAoB,CAAA;MACd0D,SAAS,CAACM,OAAO,GAAG,IAAIZ,IAAI,EAAE;MAAC;MAAAxE,aAAA,GAAAoB,CAAA;MAC/B0D,SAAS,CAACE,MAAM,GAAG,QAAQ;MAAC;MAAAhF,aAAA,GAAAoB,CAAA;MAC5B0D,SAAS,CAACrB,KAAK,GAAGA,KAAK,YAAYkC,KAAK;MAAA;MAAA,CAAA3F,aAAA,GAAAsB,CAAA,WAAGmC,KAAK,CAACmC,OAAO;MAAA;MAAA,CAAA5F,aAAA,GAAAsB,CAAA,WAAGuE,MAAM,CAACpC,KAAK,CAAC;MAAC;MAAAzD,aAAA,GAAAoB,CAAA;MAEzE,IAAI,CAACkB,MAAM,CAACmB,KAAK,CAAC,gCAAgC,EAAE;QAClDc,WAAW;QACXU,YAAY,EAAEvB,QAAQ,CAAC7C,IAAI;QAC3B4C;OACD,CAAC;MAEF;MAAA;MAAAzD,aAAA,GAAAoB,CAAA;MACA,MAAM,IAAI,CAAC0E,uBAAuB,CAAChB,SAAS,EAAErB,KAAK,CAAC;IACtD,CAAC,SAAS;MAAA;MAAAzD,aAAA,GAAAoB,CAAA;MACR,IAAI,CAAC0B,gBAAgB,CAACiD,MAAM,CAACxB,WAAW,CAAC;IAC3C;EACF;EAEA;;;EAGA,MAAMyB,4BAA4BA,CAAC1B,SAAoB;IAAA;IAAAtE,aAAA,GAAAqB,CAAA;IACrD,MAAMkD,WAAW;IAAA;IAAA,CAAAvE,aAAA,GAAAoB,CAAA,QAAG,YAAYoD,IAAI,CAACC,GAAG,EAAE,IAAIC,IAAI,CAACC,MAAM,EAAE,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;IAEvF,MAAMC,SAAS;IAAA;IAAA,CAAA9E,aAAA,GAAAoB,CAAA,QAA0B;MACvCmD,WAAW;MACXF,UAAU,EAAE,WAAW;MACvBU,SAAS,EAAE,IAAIP,IAAI,EAAE;MACrBQ,MAAM,EAAE;KACT;IAAC;IAAAhF,aAAA,GAAAoB,CAAA;IAEF,IAAI,CAAC0B,gBAAgB,CAACqB,GAAG,CAACI,WAAW,EAAEO,SAAS,CAAC;IAAC;IAAA9E,aAAA,GAAAoB,CAAA;IAElD,IAAI,CAACkB,MAAM,CAACW,IAAI,CAAC,4CAA4C,EAAE;MAC7DsB,WAAW;MACXD,SAAS;MAAE;MAAA,CAAAtE,aAAA,GAAAsB,CAAA,WAAAgD,SAAS;MAAA;MAAA,CAAAtE,aAAA,GAAAsB,CAAA,WAAI,KAAK;KAC9B,CAAC;IAAC;IAAAtB,aAAA,GAAAoB,CAAA;IAEH,IAAI;MACF;MACA,MAAM8D,MAAM;MAAA;MAAA,CAAAlF,aAAA,GAAAoB,CAAA,QAAG,MAAM,IAAI,CAACmB,kBAAkB,CAAC4C,wBAAwB,EAAE;MAAC;MAAAnF,aAAA,GAAAoB,CAAA;MAExE0D,SAAS,CAACM,OAAO,GAAG,IAAIZ,IAAI,EAAE;MAAC;MAAAxE,aAAA,GAAAoB,CAAA;MAC/B0D,SAAS,CAACE,MAAM,GAAG,WAAW;MAAC;MAAAhF,aAAA,GAAAoB,CAAA;MAC/B0D,SAAS,CAACI,MAAM,GAAGA,MAAM;MAEzB;MAAA;MAAAlF,aAAA,GAAAoB,CAAA;MACA,MAAM,IAAI,CAACkE,kBAAkB,CAACR,SAAS,EAAEI,MAAM,CAAC;MAEhD;MAAA;MAAAlF,aAAA,GAAAoB,CAAA;MACA,MAAM,IAAI,CAACmE,0BAA0B,CAACT,SAAS,EAAEI,MAAM,CAAC;MAAC;MAAAlF,aAAA,GAAAoB,CAAA;MAEzD,IAAI,CAACkB,MAAM,CAACW,IAAI,CAAC,6CAA6C,EAAE;QAC9DsB,WAAW;QACXiB,oBAAoB,EAAEN,MAAM,CAACM,oBAAoB;QACjDC,aAAa,EAAEP,MAAM,CAACO;OACvB,CAAC;MAAC;MAAAzF,aAAA,GAAAoB,CAAA;MAEH,OAAO8D,MAAM;IAEf,CAAC,CAAC,OAAOzB,KAAK,EAAE;MAAA;MAAAzD,aAAA,GAAAoB,CAAA;MACd0D,SAAS,CAACM,OAAO,GAAG,IAAIZ,IAAI,EAAE;MAAC;MAAAxE,aAAA,GAAAoB,CAAA;MAC/B0D,SAAS,CAACE,MAAM,GAAG,QAAQ;MAAC;MAAAhF,aAAA,GAAAoB,CAAA;MAC5B0D,SAAS,CAACrB,KAAK,GAAGA,KAAK,YAAYkC,KAAK;MAAA;MAAA,CAAA3F,aAAA,GAAAsB,CAAA,WAAGmC,KAAK,CAACmC,OAAO;MAAA;MAAA,CAAA5F,aAAA,GAAAsB,CAAA,WAAGuE,MAAM,CAACpC,KAAK,CAAC;MAAC;MAAAzD,aAAA,GAAAoB,CAAA;MAEzE,IAAI,CAACkB,MAAM,CAACmB,KAAK,CAAC,0CAA0C,EAAE;QAC5Dc,WAAW;QACXd;OACD,CAAC;MAAC;MAAAzD,aAAA,GAAAoB,CAAA;MAEH,MAAMqC,KAAK;IACb,CAAC,SAAS;MAAA;MAAAzD,aAAA,GAAAoB,CAAA;MACR,IAAI,CAAC0B,gBAAgB,CAACiD,MAAM,CAACxB,WAAW,CAAC;IAC3C;EACF;EAEA;;;EAGQ,MAAMgB,0BAA0BA,CACtCT,SAAgC,EAChCI,MAA2B;IAAA;IAAAlF,aAAA,GAAAqB,CAAA;IAAArB,aAAA,GAAAoB,CAAA;IAE3B;IACA,IAAI8D,MAAM,CAACO,aAAa,IAAI,IAAI,CAAC9C,MAAM,CAACsD,cAAc,CAACC,iBAAiB,EAAE;MAAA;MAAAlG,aAAA,GAAAsB,CAAA;MAAAtB,aAAA,GAAAoB,CAAA;MACxE,MAAM,IAAI,CAAC+E,6BAA6B,CAACrB,SAAS,EAAEI,MAAM,CAAC;IAC7D,CAAC;IAAA;IAAA;MAAAlF,aAAA,GAAAsB,CAAA;IAAA;IAED;IAAAtB,aAAA,GAAAoB,CAAA;IACA,IAAI8D,MAAM,CAACkB,SAAS,IAAI,IAAI,CAACzD,MAAM,CAACsD,cAAc,CAACI,aAAa,EAAE;MAAA;MAAArG,aAAA,GAAAsB,CAAA;MAAAtB,aAAA,GAAAoB,CAAA;MAChE,MAAM,IAAI,CAACkF,yBAAyB,CAACxB,SAAS,EAAEI,MAAM,CAAC;IACzD,CAAC;IAAA;IAAA;MAAAlF,aAAA,GAAAsB,CAAA;IAAA;IAED;IAAAtB,aAAA,GAAAoB,CAAA;IACA,IAAI,IAAI,CAACuB,MAAM,CAACa,eAAe,CAAC+C,YAAY,EAAE;MAAA;MAAAvG,aAAA,GAAAsB,CAAA;MAAAtB,aAAA,GAAAoB,CAAA;MAC5C,MAAM,IAAI,CAACoF,kBAAkB,CAAC1B,SAAS,EAAEI,MAAM,CAAC;IAClD,CAAC;IAAA;IAAA;MAAAlF,aAAA,GAAAsB,CAAA;IAAA;IAED;IAAAtB,aAAA,GAAAoB,CAAA;IACA,MAAM,IAAI,CAACqF,qBAAqB,CAACvB,MAAM,CAAC;IAExC;IAAA;IAAAlF,aAAA,GAAAoB,CAAA;IACA,IAAI,IAAI,CAACuB,MAAM,CAAC+D,iBAAiB,CAACC,eAAe,EAAE;MAAA;MAAA3G,aAAA,GAAAsB,CAAA;MAAAtB,aAAA,GAAAoB,CAAA;MACjD,MAAM,IAAI,CAACwF,sBAAsB,CAAC9B,SAAS,EAAEI,MAAM,CAAC;IACtD,CAAC;IAAA;IAAA;MAAAlF,aAAA,GAAAsB,CAAA;IAAA;EACH;EAEA;;;EAGQ,MAAM6E,6BAA6BA,CACzCrB,SAAgC,EAChCI,MAA2B;IAAA;IAAAlF,aAAA,GAAAqB,CAAA;IAAArB,aAAA,GAAAoB,CAAA;IAE3B,IAAI,CAACkB,MAAM,CAACuE,IAAI,CAAC,mCAAmC,EAAE;MACpDtC,WAAW,EAAEO,SAAS,CAACP,WAAW;MAClCkB,aAAa,EAAEP,MAAM,CAACO,aAAa;MACnCqB,SAAS,EAAE,IAAI,CAACnE,MAAM,CAACsD,cAAc,CAACC;KACvC,CAAC;IAEF;IACA,MAAMa,QAAQ;IAAA;IAAA,CAAA/G,aAAA,GAAAoB,CAAA,SAAG,MAAM,IAAI,CAACqB,gBAAgB,CAACuE,cAAc,CAAC;MAC1D/F,IAAI,EAAE,0BAA0B;MAChCgG,QAAQ,EAAE,UAAU;MACpBC,WAAW,EAAE,GAAGhC,MAAM,CAACO,aAAa,qDAAqD;MACzF0B,MAAM,EAAE,4BAA4B;MACpCC,QAAQ,EAAElC,MAAM,CAACmC,eAAe,CAACC,MAAM,CAACC,CAAC,IAAI;QAAA;QAAAvH,aAAA,GAAAqB,CAAA;QAAArB,aAAA,GAAAoB,CAAA;QAAA,OAAAmG,CAAC,CAACN,QAAQ,KAAK,UAAU;MAAV,CAAU;KACvE,CAAC;IAEF;IAAA;IAAAjH,aAAA,GAAAoB,CAAA;IACA,IAAI,IAAI,CAACuB,MAAM,CAACsD,cAAc,CAACuB,qBAAqB,EAAE;MAAA;MAAAxH,aAAA,GAAAsB,CAAA;MAAAtB,aAAA,GAAAoB,CAAA;MACpD,MAAM,IAAI,CAACsB,aAAa,CAAC+E,iBAAiB,CAAC;QACzCC,KAAK,EAAE,+CAA+C;QACtD9B,OAAO,EAAE,uBAAuBV,MAAM,CAACO,aAAa,0DAA0D;QAC9GkC,OAAO,EAAE;UACPpD,WAAW,EAAEO,SAAS,CAACP,WAAW;UAClCkB,aAAa,EAAEP,MAAM,CAACO,aAAa;UACnCC,eAAe,EAAER,MAAM,CAACQ,eAAe;UACvCkC,UAAU,EAAEb,QAAQ,CAAC3C;SACtB;QACDyD,QAAQ,EAAE;OACX,CAAC;IACJ,CAAC;IAAA;IAAA;MAAA7H,aAAA,GAAAsB,CAAA;IAAA;EACH;EAEA;;;EAGQ,MAAMgF,yBAAyBA,CACrCxB,SAAgC,EAChCI,MAA2B;IAAA;IAAAlF,aAAA,GAAAqB,CAAA;IAAArB,aAAA,GAAAoB,CAAA;IAE3B,IAAI,CAACkB,MAAM,CAACuE,IAAI,CAAC,wCAAwC,EAAE;MACzDtC,WAAW,EAAEO,SAAS,CAACP,WAAW;MAClC6B,SAAS,EAAElB,MAAM,CAACkB,SAAS;MAC3BU,SAAS,EAAE,IAAI,CAACnE,MAAM,CAACsD,cAAc,CAACI;KACvC,CAAC;IAEF;IAAA;IAAArG,aAAA,GAAAoB,CAAA;IACA,IAAI,IAAI,CAACuB,MAAM,CAACsD,cAAc,CAAC6B,WAAW,EAAE;MAAA;MAAA9H,aAAA,GAAAsB,CAAA;MAAAtB,aAAA,GAAAoB,CAAA;MAC1C,MAAM,IAAI,CAACsB,aAAa,CAACqF,SAAS,CAAC;QACjCL,KAAK,EAAE,2CAA2C;QAClD9B,OAAO,EAAE,uBAAuBV,MAAM,CAACkB,SAAS,iCAAiC;QACjFuB,OAAO,EAAE;UACPpD,WAAW,EAAEO,SAAS,CAACP,WAAW;UAClC6B,SAAS,EAAElB,MAAM,CAACkB,SAAS;UAC3BV,eAAe,EAAER,MAAM,CAACQ;SACzB;QACDmC,QAAQ,EAAE;OACX,CAAC;IACJ,CAAC;IAAA;IAAA;MAAA7H,aAAA,GAAAsB,CAAA;IAAA;EACH;EAEA;;;EAGQ,MAAMgE,kBAAkBA,CAC9BR,SAAgC,EAChCI,MAA2B;IAAA;IAAAlF,aAAA,GAAAqB,CAAA;IAAArB,aAAA,GAAAoB,CAAA;IAE3B,IAAI;MACF,MAAM4G,UAAU;MAAA;MAAA,CAAAhI,aAAA,GAAAoB,CAAA,SAAG;QACjB0D,SAAS,EAAE;UACTP,WAAW,EAAEO,SAAS,CAACP,WAAW;UAClCF,UAAU,EAAES,SAAS,CAACT,UAAU;UAChCU,SAAS,EAAED,SAAS,CAACC,SAAS;UAC9BK,OAAO,EAAEN,SAAS,CAACM,OAAO;UAC1BJ,MAAM,EAAEF,SAAS,CAACE;SACnB;QACDE,MAAM;QACN+C,QAAQ,EAAE;UACRC,WAAW,EAAE,IAAI1D,IAAI,EAAE;UACvB3C,OAAO,EAAE,KAAK;UACdsG,MAAM,EAAE;;OAEX;MAED,MAAMC,QAAQ;MAAA;MAAA,CAAApI,aAAA,GAAAoB,CAAA,SAAG,mBAAmB0D,SAAS,CAACP,WAAW,IAAIC,IAAI,CAACC,GAAG,EAAE,OAAO;MAC9E,MAAM4D,QAAQ;MAAA;MAAA,CAAArI,aAAA,GAAAoB,CAAA,SAAGnB,IAAI,CAACqI,IAAI,CAAC,IAAI,CAAC3F,MAAM,CAACa,eAAe,CAACD,eAAe,EAAE6E,QAAQ,CAAC;MAAC;MAAApI,aAAA,GAAAoB,CAAA;MAElF,MAAMgB,EAAE,CAACmG,SAAS,CAACF,QAAQ,EAAEG,IAAI,CAACC,SAAS,CAACT,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;MAAC;MAAAhI,aAAA,GAAAoB,CAAA;MAElE,IAAI,CAACkB,MAAM,CAACW,IAAI,CAAC,uBAAuB,EAAE;QACxCsB,WAAW,EAAEO,SAAS,CAACP,WAAW;QAClC8D,QAAQ;QACRK,QAAQ,EAAEF,IAAI,CAACC,SAAS,CAACT,UAAU,CAAC,CAACW;OACtC,CAAC;MAEF;MAAA;MAAA3I,aAAA,GAAAoB,CAAA;MACA,MAAM,IAAI,CAACwH,iBAAiB,EAAE;IAEhC,CAAC,CAAC,OAAOnF,KAAK,EAAE;MAAA;MAAAzD,aAAA,GAAAoB,CAAA;MACd,IAAI,CAACkB,MAAM,CAACmB,KAAK,CAAC,gCAAgC,EAAE;QAClDc,WAAW,EAAEO,SAAS,CAACP,WAAW;QAClCd;OACD,CAAC;IACJ;EACF;EAEA;;;EAGQ,MAAM+C,kBAAkBA,CAC9B1B,SAAgC,EAChCI,MAA2B;IAAA;IAAAlF,aAAA,GAAAqB,CAAA;IAAArB,aAAA,GAAAoB,CAAA;IAE3B,IAAI;MACF,MAAMyH,YAAY;MAAA;MAAA,CAAA7I,aAAA,GAAAoB,CAAA,SAAG,IAAI,CAAC0H,mBAAmB,CAAChE,SAAS,EAAEI,MAAM,CAAC;MAAC;MAAAlF,aAAA,GAAAoB,CAAA;MAEjE,MAAM,IAAI,CAACsB,aAAa,CAACqG,SAAS,CAAC;QACjCC,EAAE,EAAE,2BAA2B;QAC/BC,OAAO,EAAE,0BAA0BnE,SAAS,CAACP,WAAW,EAAE;QAC1D2E,IAAI,EAAEL,YAAY;QAClBM,WAAW,EAAE,CAAC;UACZC,QAAQ,EAAE,mBAAmBtE,SAAS,CAACP,WAAW,OAAO;UACzD8E,OAAO,EAAEb,IAAI,CAACC,SAAS,CAACvD,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;UACxCoE,WAAW,EAAE;SACd;OACF,CAAC;MAAC;MAAAtJ,aAAA,GAAAoB,CAAA;MAEH,IAAI,CAACkB,MAAM,CAACW,IAAI,CAAC,gCAAgC,EAAE;QACjDsB,WAAW,EAAEO,SAAS,CAACP;OACxB,CAAC;IAEJ,CAAC,CAAC,OAAOd,KAAK,EAAE;MAAA;MAAAzD,aAAA,GAAAoB,CAAA;MACd,IAAI,CAACkB,MAAM,CAACmB,KAAK,CAAC,0CAA0C,EAAE;QAC5Dc,WAAW,EAAEO,SAAS,CAACP,WAAW;QAClCd;OACD,CAAC;IACJ;EACF;EAEA;;;EAGQqF,mBAAmBA,CACzBhE,SAAgC,EAChCI,MAA2B;IAAA;IAAAlF,aAAA,GAAAqB,CAAA;IAE3B,MAAMkI,cAAc;IAAA;IAAA,CAAAvJ,aAAA,GAAAoB,CAAA,SAAG;MACrBoI,QAAQ,EAAE,SAAS;MACnBC,IAAI,EAAE,SAAS;MACfC,MAAM,EAAE,SAAS;MACjBC,GAAG,EAAE;KACN;IAAC;IAAA3J,aAAA,GAAAoB,CAAA;IAEF,OAAO;;;;;;;;;;2CAUgCmI,cAAc,CAACC,QAAQ;uCAC3BD,cAAc,CAACE,IAAI;yCACjBF,cAAc,CAACG,MAAM;sCACxBH,cAAc,CAACI,GAAG;;;;;;;8CAOV7E,SAAS,CAACP,WAAW;gDACnBO,SAAS,CAACC,SAAS,CAAC6E,WAAW,EAAE;wCACzC9E,SAAS,CAACE,MAAM;;;;;kBAKtCE,MAAM,CAACM,oBAAoB;;;;gCAIb+D,cAAc,CAACC,QAAQ,KAAKtE,MAAM,CAACO,aAAa;;;;gCAIhD8D,cAAc,CAACE,IAAI,KAAKvE,MAAM,CAACkB,SAAS;;;;gCAIxCmD,cAAc,CAACG,MAAM,KAAKxE,MAAM,CAAC2E,WAAW;;;;gCAI5CN,cAAc,CAACI,GAAG,KAAKzE,MAAM,CAAC4E,QAAQ;;;;kBAIpD5E,MAAM,CAACQ,eAAe;;;;;;UAM9BR,MAAM,CAACmC,eAAe,CACrBC,MAAM,CAACC,CAAC,IAAI;MAAA;MAAAvH,aAAA,GAAAqB,CAAA;MAAArB,aAAA,GAAAoB,CAAA;MAAA,kCAAApB,aAAA,GAAAsB,CAAA,WAAAiG,CAAC,CAACN,QAAQ,KAAK,UAAU;MAAA;MAAA,CAAAjH,aAAA,GAAAsB,CAAA,WAAIiG,CAAC,CAACN,QAAQ,KAAK,MAAM;IAAN,CAAM,CAAC,CAC/D8C,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CACZC,GAAG,CAACzC,CAAC,IAAI;MAAA;MAAAvH,aAAA,GAAAqB,CAAA;MAAArB,aAAA,GAAAoB,CAAA;MAAA;wCACoBmG,CAAC,CAACN,QAAQ,CAACgD,WAAW,EAAE;oBAC5C1C,CAAC,CAACtG,IAAI,MAAMsG,CAAC,CAACN,QAAQ;iDACOM,CAAC,CAACL,WAAW;8CAChBK,CAAC,CAAC2C,QAAQ;iDACP3C,CAAC,CAAC4C,WAAW;;WAEnD;KAAA,CAAC,CAAC7B,IAAI,CAAC,EAAE,CAAC;;;;;cAKPpD,MAAM,CAACkF,eAAe,CAACL,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAACC,GAAG,CAACK,CAAC,IAAI;MAAA;MAAArK,aAAA,GAAAqB,CAAA;MAAArB,aAAA,GAAAoB,CAAA;MAAA,cAAOiJ,CAAC,OAAO;IAAP,CAAO,CAAC,CAAC/B,IAAI,CAAC,EAAE,CAAC;;;;;;;KAO/E;EACH;EAEA;;;EAGQ,MAAMxC,uBAAuBA,CACnChB,SAAgC,EAChCrB,KAAU;IAAA;IAAAzD,aAAA,GAAAqB,CAAA;IAAArB,aAAA,GAAAoB,CAAA;IAEV,IAAI;MAAA;MAAApB,aAAA,GAAAoB,CAAA;MACF,MAAM,IAAI,CAACsB,aAAa,CAACqF,SAAS,CAAC;QACjCL,KAAK,EAAE,kCAAkC;QACzC9B,OAAO,EAAE,2BAA2Bd,SAAS,CAACP,WAAW,uBAAuBd,KAAK,CAACmC,OAAO,EAAE;QAC/F+B,OAAO,EAAE;UACPpD,WAAW,EAAEO,SAAS,CAACP,WAAW;UAClCF,UAAU,EAAES,SAAS,CAACT,UAAU;UAChCZ,KAAK,EAAEA,KAAK,CAACmC,OAAO;UACpBb,SAAS,EAAED,SAAS,CAACC,SAAS;UAC9BK,OAAO,EAAEN,SAAS,CAACM;SACpB;QACDyC,QAAQ,EAAE;OACX,CAAC;IACJ,CAAC,CAAC,OAAOyC,iBAAiB,EAAE;MAAA;MAAAtK,aAAA,GAAAoB,CAAA;MAC1B,IAAI,CAACkB,MAAM,CAACmB,KAAK,CAAC,qCAAqC,EAAE;QACvDc,WAAW,EAAEO,SAAS,CAACP,WAAW;QAClCgG,aAAa,EAAE9G,KAAK;QACpB6G;OACD,CAAC;IACJ;EACF;EAEA;;;EAGQ,MAAM7D,qBAAqBA,CAACvB,MAA2B;IAAA;IAAAlF,aAAA,GAAAqB,CAAA;IAAArB,aAAA,GAAAoB,CAAA;IAC7D,IAAI;MAAA;MAAApB,aAAA,GAAAoB,CAAA;MACF,MAAM,IAAI,CAACoB,kBAAkB,CAACiE,qBAAqB,CAAC;QAClD+D,SAAS,EAAE,IAAIhG,IAAI,EAAE;QACrBgB,oBAAoB,EAAEN,MAAM,CAACM,oBAAoB;QACjDC,aAAa,EAAEP,MAAM,CAACO,aAAa;QACnCW,SAAS,EAAElB,MAAM,CAACkB,SAAS;QAC3ByD,WAAW,EAAE3E,MAAM,CAAC2E,WAAW;QAC/BC,QAAQ,EAAE5E,MAAM,CAAC4E,QAAQ;QACzBpE,eAAe,EAAER,MAAM,CAACQ;OACzB,CAAC;IACJ,CAAC,CAAC,OAAOjC,KAAK,EAAE;MAAA;MAAAzD,aAAA,GAAAoB,CAAA;MACd,IAAI,CAACkB,MAAM,CAACmB,KAAK,CAAC,mCAAmC,EAAE;QAAEA;MAAK,CAAE,CAAC;IACnE;EACF;EAEA;;;EAGQ,MAAMmD,sBAAsBA,CAClC9B,SAAgC,EAChCI,MAA2B;IAAA;IAAAlF,aAAA,GAAAqB,CAAA;IAAArB,aAAA,GAAAoB,CAAA;IAE3B,IAAI,CAAC,IAAI,CAACuB,MAAM,CAAC+D,iBAAiB,CAAC+D,UAAU,EAAE;MAAA;MAAAzK,aAAA,GAAAsB,CAAA;MAAAtB,aAAA,GAAAoB,CAAA;MAC7C;IACF,CAAC;IAAA;IAAA;MAAApB,aAAA,GAAAsB,CAAA;IAAA;IAAAtB,aAAA,GAAAoB,CAAA;IAED,IAAI;MACF,MAAMsJ,OAAO;MAAA;MAAA,CAAA1K,aAAA,GAAAoB,CAAA,SAAG;QACdmD,WAAW,EAAEO,SAAS,CAACP,WAAW;QAClCiG,SAAS,EAAE,IAAIhG,IAAI,EAAE,CAACoF,WAAW,EAAE;QACnC5E,MAAM,EAAEF,SAAS,CAACE,MAAM;QACxBqC,eAAe,EAAE;UACfsD,KAAK,EAAEzF,MAAM,CAACM,oBAAoB;UAClCoF,QAAQ,EAAE1F,MAAM,CAACO,aAAa;UAC9BoF,IAAI,EAAE3F,MAAM,CAACkB,SAAS;UACtB0E,MAAM,EAAE5F,MAAM,CAAC2E,WAAW;UAC1BkB,GAAG,EAAE7F,MAAM,CAAC4E;SACb;QACDpE,eAAe,EAAER,MAAM,CAACQ,eAAe;QACvC0E,eAAe,EAAElF,MAAM,CAACkF,eAAe,CAACL,KAAK,CAAC,CAAC,EAAE,CAAC;OACnD;MAED;MAAA;MAAA/J,aAAA,GAAAoB,CAAA;MACA,IAAI,CAACkB,MAAM,CAACW,IAAI,CAAC,8BAA8B,EAAE;QAC/CsB,WAAW,EAAEO,SAAS,CAACP,WAAW;QAClCkG,UAAU,EAAE,IAAI,CAAC9H,MAAM,CAAC+D,iBAAiB,CAAC+D;OAC3C,CAAC;IAEJ,CAAC,CAAC,OAAOhH,KAAK,EAAE;MAAA;MAAAzD,aAAA,GAAAoB,CAAA;MACd,IAAI,CAACkB,MAAM,CAACmB,KAAK,CAAC,qCAAqC,EAAE;QACvDc,WAAW,EAAEO,SAAS,CAACP,WAAW;QAClCd;OACD,CAAC;IACJ;EACF;EAEA;;;EAGQ,MAAML,yBAAyBA,CAAA;IAAA;IAAApD,aAAA,GAAAqB,CAAA;IAAArB,aAAA,GAAAoB,CAAA;IACrC;IACA;IACA,IAAI,CAACkB,MAAM,CAACW,IAAI,CAAC,wCAAwC,CAAC;EAC5D;EAEA;;;EAGQ,MAAMC,qBAAqBA,CAAA;IAAA;IAAAlD,aAAA,GAAAqB,CAAA;IAAArB,aAAA,GAAAoB,CAAA;IACjC,IAAI;MAAA;MAAApB,aAAA,GAAAoB,CAAA;MACF,MAAMgB,EAAE,CAAC4I,KAAK,CAAC,IAAI,CAACrI,MAAM,CAACa,eAAe,CAACD,eAAe,EAAE;QAAE0H,SAAS,EAAE;MAAI,CAAE,CAAC;IAClF,CAAC,CAAC,OAAOxH,KAAK,EAAE;MAAA;MAAAzD,aAAA,GAAAoB,CAAA;MACd,IAAI,CAACkB,MAAM,CAACmB,KAAK,CAAC,mCAAmC,EAAE;QACrDyH,SAAS,EAAE,IAAI,CAACvI,MAAM,CAACa,eAAe,CAACD,eAAe;QACtDE;OACD,CAAC;MAAC;MAAAzD,aAAA,GAAAoB,CAAA;MACH,MAAMqC,KAAK;IACb;EACF;EAEA;;;EAGQ,MAAMmF,iBAAiBA,CAAA;IAAA;IAAA5I,aAAA,GAAAqB,CAAA;IAAArB,aAAA,GAAAoB,CAAA;IAC7B,IAAI;MACF,MAAM+J,KAAK;MAAA;MAAA,CAAAnL,aAAA,GAAAoB,CAAA,SAAG,MAAMgB,EAAE,CAACgJ,OAAO,CAAC,IAAI,CAACzI,MAAM,CAACa,eAAe,CAACD,eAAe,CAAC;MAC3E,MAAM8H,UAAU;MAAA;MAAA,CAAArL,aAAA,GAAAoB,CAAA,SAAG,IAAIoD,IAAI,EAAE;MAAC;MAAAxE,aAAA,GAAAoB,CAAA;MAC9BiK,UAAU,CAACC,OAAO,CAACD,UAAU,CAACE,OAAO,EAAE,GAAG,IAAI,CAAC5I,MAAM,CAACa,eAAe,CAACgI,aAAa,CAAC;MAAC;MAAAxL,aAAA,GAAAoB,CAAA;MAErF,KAAK,MAAMI,IAAI,IAAI2J,KAAK,EAAE;QAAA;QAAAnL,aAAA,GAAAoB,CAAA;QACxB,IAAII,IAAI,CAACiK,UAAU,CAAC,kBAAkB,CAAC,EAAE;UAAA;UAAAzL,aAAA,GAAAsB,CAAA;UACvC,MAAM+G,QAAQ;UAAA;UAAA,CAAArI,aAAA,GAAAoB,CAAA,SAAGnB,IAAI,CAACqI,IAAI,CAAC,IAAI,CAAC3F,MAAM,CAACa,eAAe,CAACD,eAAe,EAAE/B,IAAI,CAAC;UAC7E,MAAMkK,KAAK;UAAA;UAAA,CAAA1L,aAAA,GAAAoB,CAAA,SAAG,MAAMgB,EAAE,CAACuJ,IAAI,CAACtD,QAAQ,CAAC;UAAC;UAAArI,aAAA,GAAAoB,CAAA;UAEtC,IAAIsK,KAAK,CAACE,KAAK,GAAGP,UAAU,EAAE;YAAA;YAAArL,aAAA,GAAAsB,CAAA;YAAAtB,aAAA,GAAAoB,CAAA;YAC5B,MAAMgB,EAAE,CAACyJ,MAAM,CAACxD,QAAQ,CAAC;YAAC;YAAArI,aAAA,GAAAoB,CAAA;YAC1B,IAAI,CAACkB,MAAM,CAACW,IAAI,CAAC,6BAA6B,EAAE;cAAEzB;YAAI,CAAE,CAAC;UAC3D,CAAC;UAAA;UAAA;YAAAxB,aAAA,GAAAsB,CAAA;UAAA;QACH,CAAC;QAAA;QAAA;UAAAtB,aAAA,GAAAsB,CAAA;QAAA;MACH;IACF,CAAC,CAAC,OAAOmC,KAAK,EAAE;MAAA;MAAAzD,aAAA,GAAAoB,CAAA;MACd,IAAI,CAACkB,MAAM,CAACmB,KAAK,CAAC,+BAA+B,EAAE;QAAEA;MAAK,CAAE,CAAC;IAC/D;EACF;EAEA;;;EAGAqI,mBAAmBA,CAAA;IAAA;IAAA9L,aAAA,GAAAqB,CAAA;IAAArB,aAAA,GAAAoB,CAAA;IACjB,OAAO2K,KAAK,CAACC,IAAI,CAAC,IAAI,CAAClJ,gBAAgB,CAACmJ,MAAM,EAAE,CAAC;EACnD;EAEA;;;EAGAC,iBAAiBA,CAAA;IAAA;IAAAlM,aAAA,GAAAqB,CAAA;IAAArB,aAAA,GAAAoB,CAAA;IACf,OAAO,IAAI,CAACuB,MAAM,CAACgB,SAAS;EAC9B;EAEA;;;EAGA,MAAMwI,uBAAuBA,CAACzI,QAA8B;IAAA;IAAA1D,aAAA,GAAAqB,CAAA;IAAArB,aAAA,GAAAoB,CAAA;IAC1D,IAAI,CAACuB,MAAM,CAACgB,SAAS,CAACyI,IAAI,CAAC1I,QAAQ,CAAC;IAAC;IAAA1D,aAAA,GAAAoB,CAAA;IAErC,IAAIsC,QAAQ,CAACE,OAAO,EAAE;MAAA;MAAA5D,aAAA,GAAAsB,CAAA;MAAAtB,aAAA,GAAAoB,CAAA;MACpB,MAAM,IAAI,CAACyC,oBAAoB,CAACH,QAAQ,CAAC;IAC3C,CAAC;IAAA;IAAA;MAAA1D,aAAA,GAAAsB,CAAA;IAAA;IAAAtB,aAAA,GAAAoB,CAAA;IAED,IAAI,CAACkB,MAAM,CAACW,IAAI,CAAC,kCAAkC,EAAE;MACnDoB,UAAU,EAAEX,QAAQ,CAACU,EAAE;MACvBvD,IAAI,EAAE6C,QAAQ,CAAC7C;KAChB,CAAC;EACJ;EAEA;;;EAGA,MAAMwL,0BAA0BA,CAAChI,UAAkB;IAAA;IAAArE,aAAA,GAAAqB,CAAA;IACjD,MAAMyC,IAAI;IAAA;IAAA,CAAA9D,aAAA,GAAAoB,CAAA,SAAG,IAAI,CAACwB,aAAa,CAAC0J,GAAG,CAACjI,UAAU,CAAC;IAAC;IAAArE,aAAA,GAAAoB,CAAA;IAChD,IAAI0C,IAAI,EAAE;MAAA;MAAA9D,aAAA,GAAAsB,CAAA;MAAAtB,aAAA,GAAAoB,CAAA;MACR0C,IAAI,CAACyI,IAAI,EAAE;MAAC;MAAAvM,aAAA,GAAAoB,CAAA;MACZ,IAAI,CAACwB,aAAa,CAACmD,MAAM,CAAC1B,UAAU,CAAC;IACvC,CAAC;IAAA;IAAA;MAAArE,aAAA,GAAAsB,CAAA;IAAA;IAAAtB,aAAA,GAAAoB,CAAA;IAED,IAAI,CAACuB,MAAM,CAACgB,SAAS,GAAG,IAAI,CAAChB,MAAM,CAACgB,SAAS,CAAC2D,MAAM,CAAClG,CAAC,IAAI;MAAA;MAAApB,aAAA,GAAAqB,CAAA;MAAArB,aAAA,GAAAoB,CAAA;MAAA,OAAAA,CAAC,CAACgD,EAAE,KAAKC,UAAU;IAAV,CAAU,CAAC;IAAC;IAAArE,aAAA,GAAAoB,CAAA;IAE/E,IAAI,CAACkB,MAAM,CAACW,IAAI,CAAC,gCAAgC,EAAE;MAAEoB;IAAU,CAAE,CAAC;EACpE;EAEA;;;EAGA,MAAMmI,qBAAqBA,CAAA;IAAA;IAAAxM,aAAA,GAAAqB,CAAA;IAAArB,aAAA,GAAAoB,CAAA;IACzB,KAAK,MAAM,CAACiD,UAAU,EAAEP,IAAI,CAAC,IAAI,IAAI,CAAClB,aAAa,EAAE;MAAA;MAAA5C,aAAA,GAAAoB,CAAA;MACnD0C,IAAI,CAACyI,IAAI,EAAE;MAAC;MAAAvM,aAAA,GAAAoB,CAAA;MACZ,IAAI,CAACkB,MAAM,CAACW,IAAI,CAAC,wBAAwB,EAAE;QAAEoB;MAAU,CAAE,CAAC;IAC5D;IAAC;IAAArE,aAAA,GAAAoB,CAAA;IAED,IAAI,CAACwB,aAAa,CAAC6J,KAAK,EAAE;EAC5B;EAEA;;;EAGA,MAAMC,QAAQA,CAAA;IAAA;IAAA1M,aAAA,GAAAqB,CAAA;IAAArB,aAAA,GAAAoB,CAAA;IACZ,IAAI,CAACkB,MAAM,CAACW,IAAI,CAAC,gDAAgD,CAAC;IAElE;IAAA;IAAAjD,aAAA,GAAAoB,CAAA;IACA,MAAM,IAAI,CAACoL,qBAAqB,EAAE;IAElC;IAAA;IAAAxM,aAAA,GAAAoB,CAAA;IACA,KAAK,MAAM0D,SAAS,IAAI,IAAI,CAAChC,gBAAgB,CAACmJ,MAAM,EAAE,EAAE;MAAA;MAAAjM,aAAA,GAAAoB,CAAA;MACtD0D,SAAS,CAACE,MAAM,GAAG,WAAW;MAAC;MAAAhF,aAAA,GAAAoB,CAAA;MAC/B0D,SAAS,CAACM,OAAO,GAAG,IAAIZ,IAAI,EAAE;IAChC;IAAC;IAAAxE,aAAA,GAAAoB,CAAA;IAED,IAAI,CAAC0B,gBAAgB,CAAC2J,KAAK,EAAE;IAAC;IAAAzM,aAAA,GAAAoB,CAAA;IAE9B,IAAI,CAACkB,MAAM,CAACW,IAAI,CAAC,oDAAoD,CAAC;EACxE;;AACD;AAAAjD,aAAA,GAAAoB,CAAA;AAvrBDuL,OAAA,CAAAtK,6BAAA,GAAAA,6BAAA","ignoreList":[]}