{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\__tests__\\tunnel-health-monitor.test.ts","mappings":";;AAKA,oBAAoB;AACpB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AANjB,oEAAoF;AACpF,8DAAwF;AAOxF,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;IACnC,IAAI,aAAkC,CAAC;IACvC,IAAI,UAA+B,CAAC;IACpC,IAAI,iBAAgD,CAAC;IACrD,IAAI,gBAAiD,CAAC;IACtD,IAAI,cAAgC,CAAC;IAErC,UAAU,CAAC,GAAG,EAAE;QACd,cAAc;QACd,UAAU,GAAG;YACX,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;YACf,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;YAChB,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;YACf,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;SACV,CAAC;QAET,iBAAiB,GAAG;YAClB,iBAAiB,EAAE,IAAI,CAAC,EAAE,EAAE;YAC5B,aAAa,EAAE,IAAI,CAAC,EAAE,EAAE;YACxB,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE;SACP,CAAC;QAET,gBAAgB,GAAG,EAAS,CAAC;QAE7B,yBAAyB;QACzB,cAAc,GAAG;YACf,EAAE,EAAE,mBAAmB;YACvB,MAAM,EAAE;gBACN,QAAQ,EAAE,iBAAiB;gBAC3B,OAAO,EAAE,EAAE;gBACX,QAAQ,EAAE,UAAU;gBACpB,cAAc,EAAE,cAAc;gBAC9B,SAAS,EAAE,IAAI;gBACf,UAAU,EAAE,IAAI;gBAChB,SAAS,EAAE,IAAI;gBACf,WAAW,EAAE,IAAI;gBACjB,iBAAiB,EAAE,EAAE;gBACrB,mBAAmB,EAAE,EAAE;gBACvB,mBAAmB,EAAE,CAAC;aACvB;YACD,OAAO,EAAE,IAAI;YACb,KAAK,EAAE,gCAAW,CAAC,SAAS;YAC5B,WAAW,EAAE,IAAI,IAAI,EAAE;YACvB,YAAY,EAAE,IAAI,IAAI,EAAE;YACxB,KAAK,EAAE;gBACL,gBAAgB,EAAE,CAAC;gBACnB,MAAM,EAAE,CAAC;gBACT,iBAAiB,EAAE,CAAC;gBACpB,SAAS,EAAE,IAAI;gBACf,YAAY,EAAE,GAAG;aAClB;SACF,CAAC;QAEF,gDAAgD;QAChD,MAAM,MAAM,GAAiC;YAC3C,aAAa,EAAE,IAAI,EAAE,uBAAuB;YAC5C,UAAU,EAAE,GAAG;YACf,aAAa,EAAE,CAAC;YAChB,aAAa,EAAE,IAAI;YACnB,gBAAgB,EAAE,CAAC;YACnB,kBAAkB,EAAE,IAAI;YACxB,2BAA2B,EAAE,IAAI;SAClC,CAAC;QAEF,aAAa,GAAG,IAAI,2CAAmB,CACrC,UAAU,EACV,iBAAiB,EACjB,gBAAgB,EAChB,MAAM,CACP,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,GAAG,EAAE;QACb,aAAa,CAAC,OAAO,EAAE,CAAC;QACxB,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAC9B,EAAE,CAAC,8CAA8C,EAAE,GAAG,EAAE;YACtD,MAAM,cAAc,GAAG,IAAI,2CAAmB,CAC5C,UAAU,EACV,iBAAiB,EACjB,gBAAgB,CACjB,CAAC;YAEF,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAC1C,mCAAmC,EACnC,MAAM,CAAC,gBAAgB,CAAC;gBACtB,aAAa,EAAE,KAAK;gBACpB,UAAU,EAAE,IAAI;gBAChB,aAAa,EAAE,CAAC;aACjB,CAAC,CACH,CAAC;YAEF,cAAc,CAAC,OAAO,EAAE,CAAC;QAC3B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iDAAiD,EAAE,GAAG,EAAE;YACzD,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAC1C,mCAAmC,EACnC,MAAM,CAAC,gBAAgB,CAAC;gBACtB,aAAa,EAAE,IAAI;gBACnB,UAAU,EAAE,GAAG;gBACf,aAAa,EAAE,CAAC;aACjB,CAAC,CACH,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,sBAAsB,EAAE,GAAG,EAAE;QACpC,UAAU,CAAC,GAAG,EAAE;YACd,iBAAiB,CAAC,iBAAiB,CAAC,eAAe,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;YACtE,iBAAiB,CAAC,aAAa,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC;QAClE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sCAAsC,EAAE,GAAG,EAAE;YAC9C,MAAM,oBAAoB,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;YACvC,aAAa,CAAC,EAAE,CAAC,mBAAmB,EAAE,oBAAoB,CAAC,CAAC;YAE5D,aAAa,CAAC,eAAe,EAAE,CAAC;YAEhC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAAC,mCAAmC,CAAC,CAAC;YAClF,MAAM,CAAC,oBAAoB,CAAC,CAAC,gBAAgB,EAAE,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gDAAgD,EAAE,GAAG,EAAE;YACxD,aAAa,CAAC,eAAe,EAAE,CAAC;YAChC,aAAa,CAAC,eAAe,EAAE,CAAC;YAEhC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAAC,sCAAsC,CAAC,CAAC;QACvF,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qCAAqC,EAAE,GAAG,EAAE;YAC7C,MAAM,oBAAoB,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;YACvC,aAAa,CAAC,EAAE,CAAC,mBAAmB,EAAE,oBAAoB,CAAC,CAAC;YAE5D,aAAa,CAAC,eAAe,EAAE,CAAC;YAChC,aAAa,CAAC,cAAc,EAAE,CAAC;YAE/B,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAAC,mCAAmC,CAAC,CAAC;YAClF,MAAM,CAAC,oBAAoB,CAAC,CAAC,gBAAgB,EAAE,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2CAA2C,EAAE,GAAG,EAAE;YACnD,aAAa,CAAC,cAAc,EAAE,CAAC;YAE/B,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAAC,kCAAkC,CAAC,CAAC;QACnF,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;QACrC,UAAU,CAAC,GAAG,EAAE;YACd,iBAAiB,CAAC,aAAa,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC;QAClE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+CAA+C,EAAE,GAAG,EAAE;YACvD,aAAa,CAAC,yBAAyB,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;YAE3D,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAC1C,8CAA8C,cAAc,CAAC,EAAE,EAAE,CAClE,CAAC;YAEF,MAAM,OAAO,GAAG,aAAa,CAAC,gBAAgB,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;YAClE,MAAM,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,CAAC;YAC9B,MAAM,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8DAA8D,EAAE,GAAG,EAAE;YACtE,aAAa,CAAC,yBAAyB,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;YAC3D,aAAa,CAAC,yBAAyB,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;YAE3D,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,oBAAoB,CAC3C,kCAAkC,cAAc,CAAC,EAAE,EAAE,CACtD,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8CAA8C,EAAE,GAAG,EAAE;YACtD,aAAa,CAAC,yBAAyB,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;YAC3D,aAAa,CAAC,wBAAwB,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;YAE1D,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAC1C,6CAA6C,cAAc,CAAC,EAAE,EAAE,CACjE,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAC9B,UAAU,CAAC,GAAG,EAAE;YACd,iBAAiB,CAAC,aAAa,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC;YAChE,aAAa,CAAC,yBAAyB,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4CAA4C,EAAE,GAAG,EAAE;YACpD,MAAM,OAAO,GAAG,aAAa,CAAC,gBAAgB,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;YAElE,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC;gBACtB,YAAY,EAAE,cAAc,CAAC,EAAE;gBAC/B,SAAS,EAAE,KAAK;gBAChB,OAAO,EAAE,CAAC;gBACV,UAAU,EAAE,CAAC;gBACb,UAAU,EAAE,CAAC;gBACb,MAAM,EAAE,CAAC;gBACT,eAAe,EAAE,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC;gBACjC,mBAAmB,EAAE,CAAC;gBACtB,WAAW,EAAE,CAAC;gBACd,MAAM,EAAE,EAAE;aACX,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qDAAqD,EAAE,GAAG,EAAE;YAC7D,MAAM,OAAO,GAAG,aAAa,CAAC,gBAAgB,CAAC,cAAc,CAAC,CAAC;YAC/D,MAAM,CAAC,OAAO,CAAC,CAAC,aAAa,EAAE,CAAC;QAClC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kCAAkC,EAAE,GAAG,EAAE;YAC1C,MAAM,UAAU,GAAG,aAAa,CAAC,mBAAmB,EAAE,CAAC;YACvD,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAChC,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,sBAAsB,EAAE,GAAG,EAAE;QACpC,UAAU,CAAC,GAAG,EAAE;YACd,iBAAiB,CAAC,aAAa,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC;YAChE,aAAa,CAAC,yBAAyB,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iDAAiD,EAAE,GAAG,EAAE;YACzD,MAAM,YAAY,GAAG,aAAa,CAAC,qBAAqB,EAAE,CAAC;YAE3D,MAAM,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC;gBAC3B,gBAAgB,EAAE,CAAC;gBACnB,kBAAkB,EAAE,CAAC,EAAE,sBAAsB;gBAC7C,oBAAoB,EAAE,CAAC;gBACvB,kBAAkB,EAAE,CAAC;gBACrB,cAAc,EAAE,CAAC;gBACjB,iBAAiB,EAAE,CAAC;aACrB,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6BAA6B,EAAE,GAAG,EAAE;YACrC,aAAa,CAAC,wBAAwB,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;YAC1D,MAAM,YAAY,GAAG,aAAa,CAAC,qBAAqB,EAAE,CAAC;YAE3D,MAAM,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC;gBAC3B,gBAAgB,EAAE,CAAC;gBACnB,kBAAkB,EAAE,CAAC;gBACrB,oBAAoB,EAAE,CAAC;gBACvB,kBAAkB,EAAE,CAAC;gBACrB,cAAc,EAAE,CAAC;gBACjB,iBAAiB,EAAE,CAAC;aACrB,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;QACnC,UAAU,CAAC,GAAG,EAAE;YACd,iBAAiB,CAAC,aAAa,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC;YAChE,aAAa,CAAC,yBAAyB,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mDAAmD,EAAE,GAAG,EAAE;YAC3D,MAAM,OAAO,GAAG,aAAa,CAAC,qBAAqB,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;YACvE,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0CAA0C,EAAE,GAAG,EAAE;YAClD,MAAM,OAAO,GAAG,aAAa,CAAC,qBAAqB,CAAC,cAAc,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;YAC1E,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uDAAuD,EAAE,GAAG,EAAE;YAC/D,MAAM,OAAO,GAAG,aAAa,CAAC,qBAAqB,CAAC,cAAc,CAAC,CAAC;YACpE,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;QACnC,UAAU,CAAC,GAAG,EAAE;YACd,iBAAiB,CAAC,aAAa,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC;YAChE,aAAa,CAAC,yBAAyB,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;YAClD,MAAM,MAAM,GAAG,MAAM,aAAa,CAAC,gBAAgB,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;YACvE,MAAM,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;YAC7B,MAAM,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gDAAgD,EAAE,KAAK,IAAI,EAAE;YAC9D,iBAAiB,CAAC,aAAa,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;YAC3D,MAAM,MAAM,GAAG,MAAM,aAAa,CAAC,gBAAgB,CAAC,cAAc,CAAC,CAAC;YACpE,MAAM,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,CAAC;QAC5B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;YAC5D,qDAAqD;YACrD,MAAM,eAAe,GAAG;gBACtB,GAAG,cAAc;gBACjB,KAAK,EAAE,gCAAW,CAAC,MAAM;aAC1B,CAAC;YACF,iBAAiB,CAAC,aAAa,CAAC,eAAe,CAAC,eAAe,CAAC,CAAC;YAEjE,MAAM,MAAM,GAAG,MAAM,aAAa,CAAC,gBAAgB,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;YACvE,MAAM,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;YAC7B,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAC9B,UAAU,CAAC,GAAG,EAAE;YACd,iBAAiB,CAAC,aAAa,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC;QAClE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wCAAwC,EAAE,CAAC,IAAI,EAAE,EAAE;YACpD,aAAa,CAAC,EAAE,CAAC,sBAAsB,EAAE,CAAC,UAAU,EAAE,OAAO,EAAE,EAAE;gBAC/D,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;gBAC9C,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;gBACrD,IAAI,EAAE,CAAC;YACT,CAAC,CAAC,CAAC;YAEH,aAAa,CAAC,yBAAyB,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gEAAgE,EAAE,CAAC,IAAI,EAAE,EAAE;YAC5E,uCAAuC;YACvC,MAAM,mBAAmB,GAAG;gBAC1B,GAAG,cAAc;gBACjB,KAAK,EAAE,gCAAW,CAAC,YAAY;aAChC,CAAC;YACF,iBAAiB,CAAC,aAAa,CAAC,eAAe,CAAC,mBAAmB,CAAC,CAAC;YAErE,aAAa,CAAC,EAAE,CAAC,qBAAqB,EAAE,CAAC,UAAU,EAAE,OAAO,EAAE,EAAE;gBAC9D,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;gBAC9C,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBACtC,IAAI,EAAE,CAAC;YACT,CAAC,CAAC,CAAC;YAEH,aAAa,CAAC,yBAAyB,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE;QACvB,EAAE,CAAC,mCAAmC,EAAE,GAAG,EAAE;YAC3C,iBAAiB,CAAC,iBAAiB,CAAC,eAAe,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;YACtE,iBAAiB,CAAC,aAAa,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC;YAEhE,aAAa,CAAC,eAAe,EAAE,CAAC;YAChC,aAAa,CAAC,OAAO,EAAE,CAAC;YAExB,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAAC,yCAAyC,CAAC,CAAC;QAC1F,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\__tests__\\tunnel-health-monitor.test.ts"],"sourcesContent":["import { TunnelHealthMonitor, HealthMonitorConfig } from '../tunnel-health-monitor';\r\nimport { SSHTunnelManager, TunnelConnection, TunnelState } from '../ssh-tunnel-manager';\r\nimport { TunnelStateTracker } from '../tunnel-state-tracker';\r\nimport { Logger } from '../../core/logging/logger';\r\n\r\n// Mock dependencies\r\njest.mock('net');\r\n\r\ndescribe('TunnelHealthMonitor', () => {\r\n  let healthMonitor: TunnelHealthMonitor;\r\n  let mockLogger: jest.Mocked<Logger>;\r\n  let mockTunnelManager: jest.Mocked<SSHTunnelManager>;\r\n  let mockStateTracker: jest.Mocked<TunnelStateTracker>;\r\n  let mockConnection: TunnelConnection;\r\n\r\n  beforeEach(() => {\r\n    // Setup mocks\r\n    mockLogger = {\r\n      info: jest.fn(),\r\n      debug: jest.fn(),\r\n      warn: jest.fn(),\r\n      error: jest.fn()\r\n    } as any;\r\n\r\n    mockTunnelManager = {\r\n      getAllConnections: jest.fn(),\r\n      getConnection: jest.fn(),\r\n      on: jest.fn()\r\n    } as any;\r\n\r\n    mockStateTracker = {} as any;\r\n\r\n    // Create mock connection\r\n    mockConnection = {\r\n      id: 'test-connection-1',\r\n      config: {\r\n        oracleIP: '168.138.104.117',\r\n        sshPort: 22,\r\n        username: 'testuser',\r\n        privateKeyPath: '/path/to/key',\r\n        localPort: 8080,\r\n        remotePort: 3000,\r\n        keepAlive: true,\r\n        compression: true,\r\n        connectionTimeout: 30,\r\n        serverAliveInterval: 60,\r\n        serverAliveCountMax: 3\r\n      },\r\n      process: null,\r\n      state: TunnelState.CONNECTED,\r\n      connectedAt: new Date(),\r\n      lastActivity: new Date(),\r\n      stats: {\r\n        bytesTransferred: 0,\r\n        uptime: 0,\r\n        reconnectAttempts: 0,\r\n        lastError: null,\r\n        qualityScore: 100\r\n      }\r\n    };\r\n\r\n    // Create health monitor with test configuration\r\n    const config: Partial<HealthMonitorConfig> = {\r\n      checkInterval: 1000, // 1 second for testing\r\n      maxLatency: 100,\r\n      maxPacketLoss: 5,\r\n      minThroughput: 1024,\r\n      failureThreshold: 2,\r\n      healthCheckTimeout: 5000,\r\n      enablePerformanceMonitoring: true\r\n    };\r\n\r\n    healthMonitor = new TunnelHealthMonitor(\r\n      mockLogger,\r\n      mockTunnelManager,\r\n      mockStateTracker,\r\n      config\r\n    );\r\n  });\r\n\r\n  afterEach(() => {\r\n    healthMonitor.cleanup();\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('initialization', () => {\r\n    it('should initialize with default configuration', () => {\r\n      const defaultMonitor = new TunnelHealthMonitor(\r\n        mockLogger,\r\n        mockTunnelManager,\r\n        mockStateTracker\r\n      );\r\n\r\n      expect(mockLogger.info).toHaveBeenCalledWith(\r\n        'Tunnel Health Monitor initialized',\r\n        expect.objectContaining({\r\n          checkInterval: 30000,\r\n          maxLatency: 1000,\r\n          maxPacketLoss: 5\r\n        })\r\n      );\r\n\r\n      defaultMonitor.cleanup();\r\n    });\r\n\r\n    it('should merge custom configuration with defaults', () => {\r\n      expect(mockLogger.info).toHaveBeenCalledWith(\r\n        'Tunnel Health Monitor initialized',\r\n        expect.objectContaining({\r\n          checkInterval: 1000,\r\n          maxLatency: 100,\r\n          maxPacketLoss: 5\r\n        })\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('monitoring lifecycle', () => {\r\n    beforeEach(() => {\r\n      mockTunnelManager.getAllConnections.mockReturnValue([mockConnection]);\r\n      mockTunnelManager.getConnection.mockReturnValue(mockConnection);\r\n    });\r\n\r\n    it('should start monitoring successfully', () => {\r\n      const monitoringStartedSpy = jest.fn();\r\n      healthMonitor.on('monitoringStarted', monitoringStartedSpy);\r\n\r\n      healthMonitor.startMonitoring();\r\n\r\n      expect(mockLogger.info).toHaveBeenCalledWith('Starting tunnel health monitoring');\r\n      expect(monitoringStartedSpy).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should not start monitoring if already running', () => {\r\n      healthMonitor.startMonitoring();\r\n      healthMonitor.startMonitoring();\r\n\r\n      expect(mockLogger.warn).toHaveBeenCalledWith('Health monitoring is already running');\r\n    });\r\n\r\n    it('should stop monitoring successfully', () => {\r\n      const monitoringStoppedSpy = jest.fn();\r\n      healthMonitor.on('monitoringStopped', monitoringStoppedSpy);\r\n\r\n      healthMonitor.startMonitoring();\r\n      healthMonitor.stopMonitoring();\r\n\r\n      expect(mockLogger.info).toHaveBeenCalledWith('Stopping tunnel health monitoring');\r\n      expect(monitoringStoppedSpy).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should not stop monitoring if not running', () => {\r\n      healthMonitor.stopMonitoring();\r\n\r\n      expect(mockLogger.warn).toHaveBeenCalledWith('Health monitoring is not running');\r\n    });\r\n  });\r\n\r\n  describe('connection monitoring', () => {\r\n    beforeEach(() => {\r\n      mockTunnelManager.getConnection.mockReturnValue(mockConnection);\r\n    });\r\n\r\n    it('should start monitoring a specific connection', () => {\r\n      healthMonitor.startMonitoringConnection(mockConnection.id);\r\n\r\n      expect(mockLogger.info).toHaveBeenCalledWith(\r\n        `Starting health monitoring for connection: ${mockConnection.id}`\r\n      );\r\n\r\n      const metrics = healthMonitor.getHealthMetrics(mockConnection.id);\r\n      expect(metrics).toBeDefined();\r\n      expect(metrics?.connectionId).toBe(mockConnection.id);\r\n    });\r\n\r\n    it('should not start monitoring if already monitoring connection', () => {\r\n      healthMonitor.startMonitoringConnection(mockConnection.id);\r\n      healthMonitor.startMonitoringConnection(mockConnection.id);\r\n\r\n      expect(mockLogger.debug).toHaveBeenCalledWith(\r\n        `Already monitoring connection: ${mockConnection.id}`\r\n      );\r\n    });\r\n\r\n    it('should stop monitoring a specific connection', () => {\r\n      healthMonitor.startMonitoringConnection(mockConnection.id);\r\n      healthMonitor.stopMonitoringConnection(mockConnection.id);\r\n\r\n      expect(mockLogger.info).toHaveBeenCalledWith(\r\n        `Stopped health monitoring for connection: ${mockConnection.id}`\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('health metrics', () => {\r\n    beforeEach(() => {\r\n      mockTunnelManager.getConnection.mockReturnValue(mockConnection);\r\n      healthMonitor.startMonitoringConnection(mockConnection.id);\r\n    });\r\n\r\n    it('should initialize health metrics correctly', () => {\r\n      const metrics = healthMonitor.getHealthMetrics(mockConnection.id);\r\n\r\n      expect(metrics).toEqual({\r\n        connectionId: mockConnection.id,\r\n        isHealthy: false,\r\n        latency: 0,\r\n        throughput: 0,\r\n        packetLoss: 0,\r\n        uptime: 0,\r\n        lastHealthCheck: expect.any(Date),\r\n        consecutiveFailures: 0,\r\n        healthScore: 0,\r\n        issues: []\r\n      });\r\n    });\r\n\r\n    it('should return undefined for non-existent connection', () => {\r\n      const metrics = healthMonitor.getHealthMetrics('non-existent');\r\n      expect(metrics).toBeUndefined();\r\n    });\r\n\r\n    it('should return all health metrics', () => {\r\n      const allMetrics = healthMonitor.getAllHealthMetrics();\r\n      expect(allMetrics.size).toBe(1);\r\n      expect(allMetrics.has(mockConnection.id)).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('system health status', () => {\r\n    beforeEach(() => {\r\n      mockTunnelManager.getConnection.mockReturnValue(mockConnection);\r\n      healthMonitor.startMonitoringConnection(mockConnection.id);\r\n    });\r\n\r\n    it('should calculate system health status correctly', () => {\r\n      const systemHealth = healthMonitor.getSystemHealthStatus();\r\n\r\n      expect(systemHealth).toEqual({\r\n        totalConnections: 1,\r\n        healthyConnections: 0, // Initially unhealthy\r\n        unhealthyConnections: 1,\r\n        averageHealthScore: 0,\r\n        criticalIssues: 0,\r\n        systemHealthScore: 0\r\n      });\r\n    });\r\n\r\n    it('should handle empty metrics', () => {\r\n      healthMonitor.stopMonitoringConnection(mockConnection.id);\r\n      const systemHealth = healthMonitor.getSystemHealthStatus();\r\n\r\n      expect(systemHealth).toEqual({\r\n        totalConnections: 0,\r\n        healthyConnections: 0,\r\n        unhealthyConnections: 0,\r\n        averageHealthScore: 0,\r\n        criticalIssues: 0,\r\n        systemHealthScore: 0\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('performance history', () => {\r\n    beforeEach(() => {\r\n      mockTunnelManager.getConnection.mockReturnValue(mockConnection);\r\n      healthMonitor.startMonitoringConnection(mockConnection.id);\r\n    });\r\n\r\n    it('should return empty performance history initially', () => {\r\n      const history = healthMonitor.getPerformanceHistory(mockConnection.id);\r\n      expect(history).toEqual([]);\r\n    });\r\n\r\n    it('should limit performance history entries', () => {\r\n      const history = healthMonitor.getPerformanceHistory(mockConnection.id, 5);\r\n      expect(history.length).toBeLessThanOrEqual(5);\r\n    });\r\n\r\n    it('should return empty array for non-existent connection', () => {\r\n      const history = healthMonitor.getPerformanceHistory('non-existent');\r\n      expect(history).toEqual([]);\r\n    });\r\n  });\r\n\r\n  describe('forced health check', () => {\r\n    beforeEach(() => {\r\n      mockTunnelManager.getConnection.mockReturnValue(mockConnection);\r\n      healthMonitor.startMonitoringConnection(mockConnection.id);\r\n    });\r\n\r\n    it('should perform forced health check', async () => {\r\n      const result = await healthMonitor.forceHealthCheck(mockConnection.id);\r\n      expect(result).toBeDefined();\r\n      expect(result?.connectionId).toBe(mockConnection.id);\r\n    });\r\n\r\n    it('should return null for non-existent connection', async () => {\r\n      mockTunnelManager.getConnection.mockReturnValue(undefined);\r\n      const result = await healthMonitor.forceHealthCheck('non-existent');\r\n      expect(result).toBeNull();\r\n    });\r\n\r\n    it('should handle health check errors gracefully', async () => {\r\n      // Mock connection to throw error during health check\r\n      const errorConnection = {\r\n        ...mockConnection,\r\n        state: TunnelState.FAILED\r\n      };\r\n      mockTunnelManager.getConnection.mockReturnValue(errorConnection);\r\n\r\n      const result = await healthMonitor.forceHealthCheck(mockConnection.id);\r\n      expect(result).toBeDefined();\r\n      expect(result?.isHealthy).toBe(false);\r\n    });\r\n  });\r\n\r\n  describe('event emission', () => {\r\n    beforeEach(() => {\r\n      mockTunnelManager.getConnection.mockReturnValue(mockConnection);\r\n    });\r\n\r\n    it('should emit healthCheckCompleted event', (done) => {\r\n      healthMonitor.on('healthCheckCompleted', (connection, metrics) => {\r\n        expect(connection.id).toBe(mockConnection.id);\r\n        expect(metrics.connectionId).toBe(mockConnection.id);\r\n        done();\r\n      });\r\n\r\n      healthMonitor.startMonitoringConnection(mockConnection.id);\r\n    });\r\n\r\n    it('should emit connectionUnhealthy event for unhealthy connection', (done) => {\r\n      // Set connection to disconnected state\r\n      const unhealthyConnection = {\r\n        ...mockConnection,\r\n        state: TunnelState.DISCONNECTED\r\n      };\r\n      mockTunnelManager.getConnection.mockReturnValue(unhealthyConnection);\r\n\r\n      healthMonitor.on('connectionUnhealthy', (connection, metrics) => {\r\n        expect(connection.id).toBe(mockConnection.id);\r\n        expect(metrics.isHealthy).toBe(false);\r\n        done();\r\n      });\r\n\r\n      healthMonitor.startMonitoringConnection(mockConnection.id);\r\n    });\r\n  });\r\n\r\n  describe('cleanup', () => {\r\n    it('should cleanup resources properly', () => {\r\n      mockTunnelManager.getAllConnections.mockReturnValue([mockConnection]);\r\n      mockTunnelManager.getConnection.mockReturnValue(mockConnection);\r\n\r\n      healthMonitor.startMonitoring();\r\n      healthMonitor.cleanup();\r\n\r\n      expect(mockLogger.info).toHaveBeenCalledWith('Tunnel health monitor cleanup completed');\r\n    });\r\n  });\r\n});"],"version":3}