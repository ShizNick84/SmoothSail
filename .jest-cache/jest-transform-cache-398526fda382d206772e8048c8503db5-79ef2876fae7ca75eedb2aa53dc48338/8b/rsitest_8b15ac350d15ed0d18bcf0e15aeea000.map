{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\strategies\\__tests__\\rsi.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\strategies\\__tests__\\rsi.test.ts"],"sourcesContent":["/**\r\n * RSI Strategy Tests\r\n * \r\n * Comprehensive test suite for RSI calculations, divergence detection, and signal generation.\r\n * Tests cover RSI calculation, overbought/oversold detection, divergence analysis, and signal generation.\r\n */\r\n\r\nimport { RSIStrategy } from '../rsi';\r\nimport { MarketData } from '../types';\r\n\r\ndescribe('RSIStrategy', () => {\r\n  let strategy: RSIStrategy;\r\n  let mockMarketData: MarketData[];\r\n\r\n  beforeEach(() => {\r\n    strategy = new RSIStrategy();\r\n    \r\n    // Create mock market data for testing\r\n    mockMarketData = [];\r\n    const basePrice = 100;\r\n    const baseVolume = 1000000;\r\n    \r\n    for (let i = 0; i < 60; i++) {\r\n      // Create trending data with some volatility\r\n      const trend = i * 0.5; // Upward trend\r\n      const volatility = Math.sin(i * 0.3) * 5; // Some oscillation\r\n      const price = basePrice + trend + volatility;\r\n      \r\n      mockMarketData.push({\r\n        symbol: 'BTC/USDT',\r\n        timestamp: new Date(Date.now() - (60 - i) * 60000),\r\n        open: price - 0.5,\r\n        high: price + 1,\r\n        low: price - 1,\r\n        close: price,\r\n        volume: baseVolume + Math.random() * 500000\r\n      });\r\n    }\r\n  });\r\n\r\n  describe('RSI Calculation', () => {\r\n    test('should calculate RSI correctly for trending data', () => {\r\n      const rsi = strategy.calculateRSI(mockMarketData, 14);\r\n      \r\n      expect(rsi).not.toBeNull();\r\n      expect(rsi).toBeGreaterThanOrEqual(0);\r\n      expect(rsi).toBeLessThanOrEqual(100);\r\n      expect(typeof rsi).toBe('number');\r\n    });\r\n\r\n    test('should return null for insufficient data', () => {\r\n      const shortData = mockMarketData.slice(0, 10);\r\n      const rsi = strategy.calculateRSI(shortData, 14);\r\n      expect(rsi).toBeNull();\r\n    });\r\n\r\n    test('should handle flat prices correctly', () => {\r\n      const flatData: MarketData[] = [];\r\n      for (let i = 0; i < 30; i++) {\r\n        flatData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (30 - i) * 60000),\r\n          open: 100,\r\n          high: 100,\r\n          low: 100,\r\n          close: 100,\r\n          volume: 1000000\r\n        });\r\n      }\r\n\r\n      const rsi = strategy.calculateRSI(flatData, 14);\r\n      expect(rsi).toBe(100); // Should return 100 for no losses\r\n    });\r\n\r\n    test('should calculate RSI for strong uptrend', () => {\r\n      const uptrendData: MarketData[] = [];\r\n      for (let i = 0; i < 30; i++) {\r\n        const price = 100 + i * 2; // Strong uptrend\r\n        uptrendData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (30 - i) * 60000),\r\n          open: price - 0.5,\r\n          high: price + 1,\r\n          low: price - 1,\r\n          close: price,\r\n          volume: 1000000\r\n        });\r\n      }\r\n\r\n      const rsi = strategy.calculateRSI(uptrendData, 14);\r\n      expect(rsi).toBeGreaterThan(70); // Should be overbought\r\n    });\r\n\r\n    test('should calculate RSI for strong downtrend', () => {\r\n      const downtrendData: MarketData[] = [];\r\n      for (let i = 0; i < 30; i++) {\r\n        const price = 100 - i * 2; // Strong downtrend\r\n        downtrendData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (30 - i) * 60000),\r\n          open: price - 0.5,\r\n          high: price + 1,\r\n          low: price - 1,\r\n          close: price,\r\n          volume: 1000000\r\n        });\r\n      }\r\n\r\n      const rsi = strategy.calculateRSI(downtrendData, 14);\r\n      expect(rsi).toBeLessThan(30); // Should be oversold\r\n    });\r\n\r\n    test('should handle different periods', () => {\r\n      const rsi7 = strategy.calculateRSI(mockMarketData, 7);\r\n      const rsi21 = strategy.calculateRSI(mockMarketData, 21);\r\n      \r\n      expect(rsi7).not.toBeNull();\r\n      expect(rsi21).not.toBeNull();\r\n      expect(typeof rsi7).toBe('number');\r\n      expect(typeof rsi21).toBe('number');\r\n    });\r\n  });\r\n\r\n  describe('RSI Signal Generation', () => {\r\n    test('should generate RSI signal with correct properties', () => {\r\n      const rsiSignal = strategy.generateRSISignal(mockMarketData, 14);\r\n      \r\n      expect(rsiSignal).not.toBeNull();\r\n      expect(rsiSignal!.name).toBe('RSI');\r\n      expect(rsiSignal!.period).toBe(14);\r\n      expect(rsiSignal!.value).toBeGreaterThanOrEqual(0);\r\n      expect(rsiSignal!.value).toBeLessThanOrEqual(100);\r\n      expect(typeof rsiSignal!.overbought).toBe('boolean');\r\n      expect(typeof rsiSignal!.oversold).toBe('boolean');\r\n      expect(rsiSignal!.parameters.overboughtThreshold).toBe(70);\r\n      expect(rsiSignal!.parameters.oversoldThreshold).toBe(30);\r\n    });\r\n\r\n    test('should detect overbought condition', () => {\r\n      const overboughtData: MarketData[] = [];\r\n      for (let i = 0; i < 30; i++) {\r\n        const price = 100 + i * 3; // Strong uptrend to create overbought\r\n        overboughtData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (30 - i) * 60000),\r\n          open: price - 0.5,\r\n          high: price + 1,\r\n          low: price - 1,\r\n          close: price,\r\n          volume: 1000000\r\n        });\r\n      }\r\n\r\n      const rsiSignal = strategy.generateRSISignal(overboughtData, 14);\r\n      expect(rsiSignal!.overbought).toBe(true);\r\n      expect(rsiSignal!.oversold).toBe(false);\r\n      expect(rsiSignal!.value).toBeGreaterThanOrEqual(70);\r\n    });\r\n\r\n    test('should detect oversold condition', () => {\r\n      const oversoldData: MarketData[] = [];\r\n      for (let i = 0; i < 30; i++) {\r\n        const price = 100 - i * 3; // Strong downtrend to create oversold\r\n        oversoldData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (30 - i) * 60000),\r\n          open: price - 0.5,\r\n          high: price + 1,\r\n          low: price - 1,\r\n          close: price,\r\n          volume: 1000000\r\n        });\r\n      }\r\n\r\n      const rsiSignal = strategy.generateRSISignal(oversoldData, 14);\r\n      expect(rsiSignal!.oversold).toBe(true);\r\n      expect(rsiSignal!.overbought).toBe(false);\r\n      expect(rsiSignal!.value).toBeLessThanOrEqual(30);\r\n    });\r\n\r\n    test('should return null for insufficient data', () => {\r\n      const shortData = mockMarketData.slice(0, 10);\r\n      const rsiSignal = strategy.generateRSISignal(shortData, 14);\r\n      expect(rsiSignal).toBeNull();\r\n    });\r\n  });\r\n\r\n  describe('Divergence Detection', () => {\r\n    test('should detect bullish divergence', () => {\r\n      // Create data with price making lower lows but RSI making higher lows\r\n      const divergenceData: MarketData[] = [];\r\n      \r\n      // First create some base data\r\n      for (let i = 0; i < 20; i++) {\r\n        divergenceData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (40 - i) * 60000),\r\n          open: 100,\r\n          high: 101,\r\n          low: 99,\r\n          close: 100,\r\n          volume: 1000000\r\n        });\r\n      }\r\n      \r\n      // Create first low\r\n      for (let i = 0; i < 5; i++) {\r\n        const price = 100 - i * 4; // Down to 84\r\n        divergenceData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (20 - i) * 60000),\r\n          open: price - 0.5,\r\n          high: price + 1,\r\n          low: price - 1,\r\n          close: price,\r\n          volume: 1000000\r\n        });\r\n      }\r\n      \r\n      // Recovery\r\n      for (let i = 0; i < 5; i++) {\r\n        const price = 84 + i * 2;\r\n        divergenceData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (15 - i) * 60000),\r\n          open: price - 0.5,\r\n          high: price + 1,\r\n          low: price - 1,\r\n          close: price,\r\n          volume: 1000000\r\n        });\r\n      }\r\n      \r\n      // Second low (higher than first but still low)\r\n      for (let i = 0; i < 5; i++) {\r\n        const price = 94 - i * 2; // Down to 86 (higher than 84)\r\n        divergenceData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (10 - i) * 60000),\r\n          open: price - 0.5,\r\n          high: price + 1,\r\n          low: price - 1,\r\n          close: price,\r\n          volume: 1000000\r\n        });\r\n      }\r\n      \r\n      // Final recovery\r\n      for (let i = 0; i < 5; i++) {\r\n        const price = 86 + i;\r\n        divergenceData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (5 - i) * 60000),\r\n          open: price - 0.5,\r\n          high: price + 1,\r\n          low: price - 1,\r\n          close: price,\r\n          volume: 1000000\r\n        });\r\n      }\r\n\r\n      const divergence = strategy.detectDivergence(divergenceData, 14);\r\n      \r\n      // May or may not detect divergence depending on exact RSI calculation\r\n      // This is a complex pattern that requires specific conditions\r\n      expect(['BULLISH', 'BEARISH', 'NONE']).toContain(divergence.type);\r\n      expect(divergence.strength).toBeGreaterThanOrEqual(0);\r\n      expect(divergence.strength).toBeLessThanOrEqual(100);\r\n    });\r\n\r\n    test('should return NONE for insufficient data', () => {\r\n      const shortData = mockMarketData.slice(0, 20);\r\n      const divergence = strategy.detectDivergence(shortData, 14);\r\n      expect(divergence.type).toBe('NONE');\r\n      expect(divergence.strength).toBe(0);\r\n    });\r\n\r\n    test('should return NONE for sideways market', () => {\r\n      const sidewaysData: MarketData[] = [];\r\n      for (let i = 0; i < 40; i++) {\r\n        const price = 100 + Math.sin(i * 0.2) * 2; // Small oscillations\r\n        sidewaysData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (40 - i) * 60000),\r\n          open: price - 0.5,\r\n          high: price + 1,\r\n          low: price - 1,\r\n          close: price,\r\n          volume: 1000000\r\n        });\r\n      }\r\n\r\n      const divergence = strategy.detectDivergence(sidewaysData, 14);\r\n      // Sideways market typically won't have clear divergence\r\n      expect(['BULLISH', 'BEARISH', 'NONE']).toContain(divergence.type);\r\n    });\r\n  });\r\n\r\n  describe('Trading Signal Generation', () => {\r\n    test('should generate buy signal for oversold condition', () => {\r\n      const oversoldData: MarketData[] = [];\r\n      for (let i = 0; i < 30; i++) {\r\n        const price = 100 - i * 4; // Strong downtrend to create oversold\r\n        oversoldData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (30 - i) * 60000),\r\n          open: price - 0.5,\r\n          high: price + 1,\r\n          low: price - 1,\r\n          close: price,\r\n          volume: 1000000 * (1 + Math.random())\r\n        });\r\n      }\r\n\r\n      const signal = strategy.generateSignal(oversoldData, 14);\r\n      \r\n      if (signal) {\r\n        expect(signal.type).toBe('BUY');\r\n        expect(signal.strength).toBeGreaterThan(0);\r\n        expect(signal.confidence).toBeGreaterThan(0);\r\n        expect(signal.reasoning).toContain('oversold');\r\n        expect(signal.metadata?.rsi).toBeLessThanOrEqual(30);\r\n        expect(signal.metadata?.oversold).toBe(true);\r\n      }\r\n    });\r\n\r\n    test('should generate sell signal for overbought condition', () => {\r\n      const overboughtData: MarketData[] = [];\r\n      for (let i = 0; i < 30; i++) {\r\n        const price = 100 + i * 4; // Strong uptrend to create overbought\r\n        overboughtData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (30 - i) * 60000),\r\n          open: price - 0.5,\r\n          high: price + 1,\r\n          low: price - 1,\r\n          close: price,\r\n          volume: 1000000 * (1 + Math.random())\r\n        });\r\n      }\r\n\r\n      const signal = strategy.generateSignal(overboughtData, 14);\r\n      \r\n      if (signal) {\r\n        expect(signal.type).toBe('SELL');\r\n        expect(signal.strength).toBeGreaterThan(0);\r\n        expect(signal.confidence).toBeGreaterThan(0);\r\n        expect(signal.reasoning).toContain('overbought');\r\n        expect(signal.metadata?.rsi).toBeGreaterThanOrEqual(70);\r\n        expect(signal.metadata?.overbought).toBe(true);\r\n      }\r\n    });\r\n\r\n    test('should return null for neutral RSI', () => {\r\n      const neutralData: MarketData[] = [];\r\n      for (let i = 0; i < 30; i++) {\r\n        const price = 100 + Math.sin(i * 0.1) * 1; // Small oscillations around 100\r\n        neutralData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (30 - i) * 60000),\r\n          open: price - 0.5,\r\n          high: price + 1,\r\n          low: price - 1,\r\n          close: price,\r\n          volume: 1000000\r\n        });\r\n      }\r\n\r\n      const signal = strategy.generateSignal(neutralData, 14);\r\n      // Neutral RSI (30-70) without divergence should not generate signal\r\n      // May generate signal if there's divergence detected\r\n      if (signal) {\r\n        expect(['BUY', 'SELL']).toContain(signal.type);\r\n      }\r\n    });\r\n\r\n    test('should include proper metadata', () => {\r\n      const signal = strategy.generateSignal(mockMarketData, 14);\r\n      \r\n      if (signal) {\r\n        expect(signal.metadata).toBeDefined();\r\n        expect(signal.metadata?.rsi).toBeDefined();\r\n        expect(typeof signal.metadata?.overbought).toBe('boolean');\r\n        expect(typeof signal.metadata?.oversold).toBe('boolean');\r\n        expect(typeof signal.metadata?.extremeLevel).toBe('boolean');\r\n        expect(signal.indicators).toContain('RSI_14');\r\n      }\r\n    });\r\n\r\n    test('should calculate risk-reward ratio', () => {\r\n      const signal = strategy.generateSignal(mockMarketData, 14);\r\n      \r\n      if (signal) {\r\n        expect(signal.riskReward).toBeGreaterThan(0);\r\n        expect(typeof signal.riskReward).toBe('number');\r\n      }\r\n    });\r\n  });\r\n\r\n  describe('Signal Confidence Evaluation', () => {\r\n    test('should evaluate signal confidence correctly', () => {\r\n      const signal = strategy.generateSignal(mockMarketData, 14);\r\n      \r\n      if (signal) {\r\n        const confidence = strategy.evaluateSignalConfidence(mockMarketData, signal);\r\n        \r\n        expect(confidence.overall).toBeGreaterThanOrEqual(0);\r\n        expect(confidence.overall).toBeLessThanOrEqual(100);\r\n        expect(confidence.technical).toBeGreaterThanOrEqual(0);\r\n        expect(confidence.technical).toBeLessThanOrEqual(100);\r\n        expect(confidence.volume).toBeGreaterThanOrEqual(0);\r\n        expect(confidence.volume).toBeLessThanOrEqual(100);\r\n        expect(confidence.momentum).toBeGreaterThanOrEqual(0);\r\n        expect(confidence.momentum).toBeLessThanOrEqual(100);\r\n        expect(confidence.factors.length).toBeGreaterThanOrEqual(4);\r\n      }\r\n    });\r\n\r\n    test('should provide detailed factors', () => {\r\n      const signal = strategy.generateSignal(mockMarketData, 14);\r\n      \r\n      if (signal) {\r\n        const confidence = strategy.evaluateSignalConfidence(mockMarketData, signal);\r\n        \r\n        expect(confidence.factors[0]).toContain('RSI signal strength');\r\n        expect(confidence.factors[1]).toContain('Volume confirmation');\r\n        expect(confidence.factors[2]).toContain('Price momentum alignment');\r\n        expect(confidence.factors[3]).toContain('RSI level');\r\n      }\r\n    });\r\n\r\n    test('should include divergence in factors when present', () => {\r\n      // Create data that might have divergence\r\n      const complexData: MarketData[] = [];\r\n      for (let i = 0; i < 50; i++) {\r\n        const price = 100 + Math.sin(i * 0.1) * 10 + (i < 25 ? -i * 0.5 : (i - 25) * 0.3);\r\n        complexData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (50 - i) * 60000),\r\n          open: price - 0.5,\r\n          high: price + 1,\r\n          low: price - 1,\r\n          close: price,\r\n          volume: 1000000\r\n        });\r\n      }\r\n\r\n      const signal = strategy.generateSignal(complexData, 14);\r\n      \r\n      if (signal && signal.metadata?.divergence) {\r\n        const confidence = strategy.evaluateSignalConfidence(complexData, signal);\r\n        const divergenceFactors = confidence.factors.filter(f => f.includes('Divergence'));\r\n        expect(divergenceFactors.length).toBeGreaterThan(0);\r\n      }\r\n    });\r\n  });\r\n\r\n  describe('Edge Cases', () => {\r\n    test('should handle empty market data', () => {\r\n      const signal = strategy.generateSignal([], 14);\r\n      expect(signal).toBeNull();\r\n    });\r\n\r\n    test('should handle single data point', () => {\r\n      const singleData = [mockMarketData[0]];\r\n      const signal = strategy.generateSignal(singleData, 14);\r\n      expect(signal).toBeNull();\r\n    });\r\n\r\n    test('should handle extreme RSI values', () => {\r\n      // Create data that should result in extreme RSI\r\n      const extremeData: MarketData[] = [];\r\n      for (let i = 0; i < 30; i++) {\r\n        const price = 100 - i * 10; // Extreme downtrend\r\n        extremeData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (30 - i) * 60000),\r\n          open: price - 0.5,\r\n          high: price + 1,\r\n          low: price - 1,\r\n          close: price,\r\n          volume: 1000000\r\n        });\r\n      }\r\n\r\n      const signal = strategy.generateSignal(extremeData, 14);\r\n      \r\n      if (signal) {\r\n        expect(signal.metadata?.extremeLevel).toBe(true);\r\n        expect(signal.strength).toBeGreaterThan(50); // Should have high strength\r\n      }\r\n    });\r\n\r\n    test('should handle very small periods', () => {\r\n      const rsi = strategy.calculateRSI(mockMarketData, 2);\r\n      expect(rsi).not.toBeNull();\r\n      expect(rsi).toBeGreaterThanOrEqual(0);\r\n      expect(rsi).toBeLessThanOrEqual(100);\r\n    });\r\n\r\n    test('should handle identical consecutive prices', () => {\r\n      const flatData: MarketData[] = [];\r\n      for (let i = 0; i < 20; i++) {\r\n        flatData.push({\r\n          symbol: 'BTC/USDT',\r\n          timestamp: new Date(Date.now() - (20 - i) * 60000),\r\n          open: 100,\r\n          high: 100,\r\n          low: 100,\r\n          close: 100,\r\n          volume: 1000000\r\n        });\r\n      }\r\n\r\n      const rsi = strategy.calculateRSI(flatData, 14);\r\n      expect(rsi).toBe(100); // No losses should result in RSI of 100\r\n    });\r\n  });\r\n});"],"version":3}