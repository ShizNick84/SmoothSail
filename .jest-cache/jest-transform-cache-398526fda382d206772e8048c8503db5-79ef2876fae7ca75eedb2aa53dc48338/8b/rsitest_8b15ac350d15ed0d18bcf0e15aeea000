f222e1fbe8a238ed26b01ecf575a1b36
"use strict";
/**
 * RSI Strategy Tests
 *
 * Comprehensive test suite for RSI calculations, divergence detection, and signal generation.
 * Tests cover RSI calculation, overbought/oversold detection, divergence analysis, and signal generation.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const rsi_1 = require("../rsi");
describe('RSIStrategy', () => {
    let strategy;
    let mockMarketData;
    beforeEach(() => {
        strategy = new rsi_1.RSIStrategy();
        // Create mock market data for testing
        mockMarketData = [];
        const basePrice = 100;
        const baseVolume = 1000000;
        for (let i = 0; i < 60; i++) {
            // Create trending data with some volatility
            const trend = i * 0.5; // Upward trend
            const volatility = Math.sin(i * 0.3) * 5; // Some oscillation
            const price = basePrice + trend + volatility;
            mockMarketData.push({
                symbol: 'BTC/USDT',
                timestamp: new Date(Date.now() - (60 - i) * 60000),
                open: price - 0.5,
                high: price + 1,
                low: price - 1,
                close: price,
                volume: baseVolume + Math.random() * 500000
            });
        }
    });
    describe('RSI Calculation', () => {
        test('should calculate RSI correctly for trending data', () => {
            const rsi = strategy.calculateRSI(mockMarketData, 14);
            expect(rsi).not.toBeNull();
            expect(rsi).toBeGreaterThanOrEqual(0);
            expect(rsi).toBeLessThanOrEqual(100);
            expect(typeof rsi).toBe('number');
        });
        test('should return null for insufficient data', () => {
            const shortData = mockMarketData.slice(0, 10);
            const rsi = strategy.calculateRSI(shortData, 14);
            expect(rsi).toBeNull();
        });
        test('should handle flat prices correctly', () => {
            const flatData = [];
            for (let i = 0; i < 30; i++) {
                flatData.push({
                    symbol: 'BTC/USDT',
                    timestamp: new Date(Date.now() - (30 - i) * 60000),
                    open: 100,
                    high: 100,
                    low: 100,
                    close: 100,
                    volume: 1000000
                });
            }
            const rsi = strategy.calculateRSI(flatData, 14);
            expect(rsi).toBe(100); // Should return 100 for no losses
        });
        test('should calculate RSI for strong uptrend', () => {
            const uptrendData = [];
            for (let i = 0; i < 30; i++) {
                const price = 100 + i * 2; // Strong uptrend
                uptrendData.push({
                    symbol: 'BTC/USDT',
                    timestamp: new Date(Date.now() - (30 - i) * 60000),
                    open: price - 0.5,
                    high: price + 1,
                    low: price - 1,
                    close: price,
                    volume: 1000000
                });
            }
            const rsi = strategy.calculateRSI(uptrendData, 14);
            expect(rsi).toBeGreaterThan(70); // Should be overbought
        });
        test('should calculate RSI for strong downtrend', () => {
            const downtrendData = [];
            for (let i = 0; i < 30; i++) {
                const price = 100 - i * 2; // Strong downtrend
                downtrendData.push({
                    symbol: 'BTC/USDT',
                    timestamp: new Date(Date.now() - (30 - i) * 60000),
                    open: price - 0.5,
                    high: price + 1,
                    low: price - 1,
                    close: price,
                    volume: 1000000
                });
            }
            const rsi = strategy.calculateRSI(downtrendData, 14);
            expect(rsi).toBeLessThan(30); // Should be oversold
        });
        test('should handle different periods', () => {
            const rsi7 = strategy.calculateRSI(mockMarketData, 7);
            const rsi21 = strategy.calculateRSI(mockMarketData, 21);
            expect(rsi7).not.toBeNull();
            expect(rsi21).not.toBeNull();
            expect(typeof rsi7).toBe('number');
            expect(typeof rsi21).toBe('number');
        });
    });
    describe('RSI Signal Generation', () => {
        test('should generate RSI signal with correct properties', () => {
            const rsiSignal = strategy.generateRSISignal(mockMarketData, 14);
            expect(rsiSignal).not.toBeNull();
            expect(rsiSignal.name).toBe('RSI');
            expect(rsiSignal.period).toBe(14);
            expect(rsiSignal.value).toBeGreaterThanOrEqual(0);
            expect(rsiSignal.value).toBeLessThanOrEqual(100);
            expect(typeof rsiSignal.overbought).toBe('boolean');
            expect(typeof rsiSignal.oversold).toBe('boolean');
            expect(rsiSignal.parameters.overboughtThreshold).toBe(70);
            expect(rsiSignal.parameters.oversoldThreshold).toBe(30);
        });
        test('should detect overbought condition', () => {
            const overboughtData = [];
            for (let i = 0; i < 30; i++) {
                const price = 100 + i * 3; // Strong uptrend to create overbought
                overboughtData.push({
                    symbol: 'BTC/USDT',
                    timestamp: new Date(Date.now() - (30 - i) * 60000),
                    open: price - 0.5,
                    high: price + 1,
                    low: price - 1,
                    close: price,
                    volume: 1000000
                });
            }
            const rsiSignal = strategy.generateRSISignal(overboughtData, 14);
            expect(rsiSignal.overbought).toBe(true);
            expect(rsiSignal.oversold).toBe(false);
            expect(rsiSignal.value).toBeGreaterThanOrEqual(70);
        });
        test('should detect oversold condition', () => {
            const oversoldData = [];
            for (let i = 0; i < 30; i++) {
                const price = 100 - i * 3; // Strong downtrend to create oversold
                oversoldData.push({
                    symbol: 'BTC/USDT',
                    timestamp: new Date(Date.now() - (30 - i) * 60000),
                    open: price - 0.5,
                    high: price + 1,
                    low: price - 1,
                    close: price,
                    volume: 1000000
                });
            }
            const rsiSignal = strategy.generateRSISignal(oversoldData, 14);
            expect(rsiSignal.oversold).toBe(true);
            expect(rsiSignal.overbought).toBe(false);
            expect(rsiSignal.value).toBeLessThanOrEqual(30);
        });
        test('should return null for insufficient data', () => {
            const shortData = mockMarketData.slice(0, 10);
            const rsiSignal = strategy.generateRSISignal(shortData, 14);
            expect(rsiSignal).toBeNull();
        });
    });
    describe('Divergence Detection', () => {
        test('should detect bullish divergence', () => {
            // Create data with price making lower lows but RSI making higher lows
            const divergenceData = [];
            // First create some base data
            for (let i = 0; i < 20; i++) {
                divergenceData.push({
                    symbol: 'BTC/USDT',
                    timestamp: new Date(Date.now() - (40 - i) * 60000),
                    open: 100,
                    high: 101,
                    low: 99,
                    close: 100,
                    volume: 1000000
                });
            }
            // Create first low
            for (let i = 0; i < 5; i++) {
                const price = 100 - i * 4; // Down to 84
                divergenceData.push({
                    symbol: 'BTC/USDT',
                    timestamp: new Date(Date.now() - (20 - i) * 60000),
                    open: price - 0.5,
                    high: price + 1,
                    low: price - 1,
                    close: price,
                    volume: 1000000
                });
            }
            // Recovery
            for (let i = 0; i < 5; i++) {
                const price = 84 + i * 2;
                divergenceData.push({
                    symbol: 'BTC/USDT',
                    timestamp: new Date(Date.now() - (15 - i) * 60000),
                    open: price - 0.5,
                    high: price + 1,
                    low: price - 1,
                    close: price,
                    volume: 1000000
                });
            }
            // Second low (higher than first but still low)
            for (let i = 0; i < 5; i++) {
                const price = 94 - i * 2; // Down to 86 (higher than 84)
                divergenceData.push({
                    symbol: 'BTC/USDT',
                    timestamp: new Date(Date.now() - (10 - i) * 60000),
                    open: price - 0.5,
                    high: price + 1,
                    low: price - 1,
                    close: price,
                    volume: 1000000
                });
            }
            // Final recovery
            for (let i = 0; i < 5; i++) {
                const price = 86 + i;
                divergenceData.push({
                    symbol: 'BTC/USDT',
                    timestamp: new Date(Date.now() - (5 - i) * 60000),
                    open: price - 0.5,
                    high: price + 1,
                    low: price - 1,
                    close: price,
                    volume: 1000000
                });
            }
            const divergence = strategy.detectDivergence(divergenceData, 14);
            // May or may not detect divergence depending on exact RSI calculation
            // This is a complex pattern that requires specific conditions
            expect(['BULLISH', 'BEARISH', 'NONE']).toContain(divergence.type);
            expect(divergence.strength).toBeGreaterThanOrEqual(0);
            expect(divergence.strength).toBeLessThanOrEqual(100);
        });
        test('should return NONE for insufficient data', () => {
            const shortData = mockMarketData.slice(0, 20);
            const divergence = strategy.detectDivergence(shortData, 14);
            expect(divergence.type).toBe('NONE');
            expect(divergence.strength).toBe(0);
        });
        test('should return NONE for sideways market', () => {
            const sidewaysData = [];
            for (let i = 0; i < 40; i++) {
                const price = 100 + Math.sin(i * 0.2) * 2; // Small oscillations
                sidewaysData.push({
                    symbol: 'BTC/USDT',
                    timestamp: new Date(Date.now() - (40 - i) * 60000),
                    open: price - 0.5,
                    high: price + 1,
                    low: price - 1,
                    close: price,
                    volume: 1000000
                });
            }
            const divergence = strategy.detectDivergence(sidewaysData, 14);
            // Sideways market typically won't have clear divergence
            expect(['BULLISH', 'BEARISH', 'NONE']).toContain(divergence.type);
        });
    });
    describe('Trading Signal Generation', () => {
        test('should generate buy signal for oversold condition', () => {
            const oversoldData = [];
            for (let i = 0; i < 30; i++) {
                const price = 100 - i * 4; // Strong downtrend to create oversold
                oversoldData.push({
                    symbol: 'BTC/USDT',
                    timestamp: new Date(Date.now() - (30 - i) * 60000),
                    open: price - 0.5,
                    high: price + 1,
                    low: price - 1,
                    close: price,
                    volume: 1000000 * (1 + Math.random())
                });
            }
            const signal = strategy.generateSignal(oversoldData, 14);
            if (signal) {
                expect(signal.type).toBe('BUY');
                expect(signal.strength).toBeGreaterThan(0);
                expect(signal.confidence).toBeGreaterThan(0);
                expect(signal.reasoning).toContain('oversold');
                expect(signal.metadata?.rsi).toBeLessThanOrEqual(30);
                expect(signal.metadata?.oversold).toBe(true);
            }
        });
        test('should generate sell signal for overbought condition', () => {
            const overboughtData = [];
            for (let i = 0; i < 30; i++) {
                const price = 100 + i * 4; // Strong uptrend to create overbought
                overboughtData.push({
                    symbol: 'BTC/USDT',
                    timestamp: new Date(Date.now() - (30 - i) * 60000),
                    open: price - 0.5,
                    high: price + 1,
                    low: price - 1,
                    close: price,
                    volume: 1000000 * (1 + Math.random())
                });
            }
            const signal = strategy.generateSignal(overboughtData, 14);
            if (signal) {
                expect(signal.type).toBe('SELL');
                expect(signal.strength).toBeGreaterThan(0);
                expect(signal.confidence).toBeGreaterThan(0);
                expect(signal.reasoning).toContain('overbought');
                expect(signal.metadata?.rsi).toBeGreaterThanOrEqual(70);
                expect(signal.metadata?.overbought).toBe(true);
            }
        });
        test('should return null for neutral RSI', () => {
            const neutralData = [];
            for (let i = 0; i < 30; i++) {
                const price = 100 + Math.sin(i * 0.1) * 1; // Small oscillations around 100
                neutralData.push({
                    symbol: 'BTC/USDT',
                    timestamp: new Date(Date.now() - (30 - i) * 60000),
                    open: price - 0.5,
                    high: price + 1,
                    low: price - 1,
                    close: price,
                    volume: 1000000
                });
            }
            const signal = strategy.generateSignal(neutralData, 14);
            // Neutral RSI (30-70) without divergence should not generate signal
            // May generate signal if there's divergence detected
            if (signal) {
                expect(['BUY', 'SELL']).toContain(signal.type);
            }
        });
        test('should include proper metadata', () => {
            const signal = strategy.generateSignal(mockMarketData, 14);
            if (signal) {
                expect(signal.metadata).toBeDefined();
                expect(signal.metadata?.rsi).toBeDefined();
                expect(typeof signal.metadata?.overbought).toBe('boolean');
                expect(typeof signal.metadata?.oversold).toBe('boolean');
                expect(typeof signal.metadata?.extremeLevel).toBe('boolean');
                expect(signal.indicators).toContain('RSI_14');
            }
        });
        test('should calculate risk-reward ratio', () => {
            const signal = strategy.generateSignal(mockMarketData, 14);
            if (signal) {
                expect(signal.riskReward).toBeGreaterThan(0);
                expect(typeof signal.riskReward).toBe('number');
            }
        });
    });
    describe('Signal Confidence Evaluation', () => {
        test('should evaluate signal confidence correctly', () => {
            const signal = strategy.generateSignal(mockMarketData, 14);
            if (signal) {
                const confidence = strategy.evaluateSignalConfidence(mockMarketData, signal);
                expect(confidence.overall).toBeGreaterThanOrEqual(0);
                expect(confidence.overall).toBeLessThanOrEqual(100);
                expect(confidence.technical).toBeGreaterThanOrEqual(0);
                expect(confidence.technical).toBeLessThanOrEqual(100);
                expect(confidence.volume).toBeGreaterThanOrEqual(0);
                expect(confidence.volume).toBeLessThanOrEqual(100);
                expect(confidence.momentum).toBeGreaterThanOrEqual(0);
                expect(confidence.momentum).toBeLessThanOrEqual(100);
                expect(confidence.factors.length).toBeGreaterThanOrEqual(4);
            }
        });
        test('should provide detailed factors', () => {
            const signal = strategy.generateSignal(mockMarketData, 14);
            if (signal) {
                const confidence = strategy.evaluateSignalConfidence(mockMarketData, signal);
                expect(confidence.factors[0]).toContain('RSI signal strength');
                expect(confidence.factors[1]).toContain('Volume confirmation');
                expect(confidence.factors[2]).toContain('Price momentum alignment');
                expect(confidence.factors[3]).toContain('RSI level');
            }
        });
        test('should include divergence in factors when present', () => {
            // Create data that might have divergence
            const complexData = [];
            for (let i = 0; i < 50; i++) {
                const price = 100 + Math.sin(i * 0.1) * 10 + (i < 25 ? -i * 0.5 : (i - 25) * 0.3);
                complexData.push({
                    symbol: 'BTC/USDT',
                    timestamp: new Date(Date.now() - (50 - i) * 60000),
                    open: price - 0.5,
                    high: price + 1,
                    low: price - 1,
                    close: price,
                    volume: 1000000
                });
            }
            const signal = strategy.generateSignal(complexData, 14);
            if (signal && signal.metadata?.divergence) {
                const confidence = strategy.evaluateSignalConfidence(complexData, signal);
                const divergenceFactors = confidence.factors.filter(f => f.includes('Divergence'));
                expect(divergenceFactors.length).toBeGreaterThan(0);
            }
        });
    });
    describe('Edge Cases', () => {
        test('should handle empty market data', () => {
            const signal = strategy.generateSignal([], 14);
            expect(signal).toBeNull();
        });
        test('should handle single data point', () => {
            const singleData = [mockMarketData[0]];
            const signal = strategy.generateSignal(singleData, 14);
            expect(signal).toBeNull();
        });
        test('should handle extreme RSI values', () => {
            // Create data that should result in extreme RSI
            const extremeData = [];
            for (let i = 0; i < 30; i++) {
                const price = 100 - i * 10; // Extreme downtrend
                extremeData.push({
                    symbol: 'BTC/USDT',
                    timestamp: new Date(Date.now() - (30 - i) * 60000),
                    open: price - 0.5,
                    high: price + 1,
                    low: price - 1,
                    close: price,
                    volume: 1000000
                });
            }
            const signal = strategy.generateSignal(extremeData, 14);
            if (signal) {
                expect(signal.metadata?.extremeLevel).toBe(true);
                expect(signal.strength).toBeGreaterThan(50); // Should have high strength
            }
        });
        test('should handle very small periods', () => {
            const rsi = strategy.calculateRSI(mockMarketData, 2);
            expect(rsi).not.toBeNull();
            expect(rsi).toBeGreaterThanOrEqual(0);
            expect(rsi).toBeLessThanOrEqual(100);
        });
        test('should handle identical consecutive prices', () => {
            const flatData = [];
            for (let i = 0; i < 20; i++) {
                flatData.push({
                    symbol: 'BTC/USDT',
                    timestamp: new Date(Date.now() - (20 - i) * 60000),
                    open: 100,
                    high: 100,
                    low: 100,
                    close: 100,
                    volume: 1000000
                });
            }
            const rsi = strategy.calculateRSI(flatData, 14);
            expect(rsi).toBe(100); // No losses should result in RSI of 100
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,