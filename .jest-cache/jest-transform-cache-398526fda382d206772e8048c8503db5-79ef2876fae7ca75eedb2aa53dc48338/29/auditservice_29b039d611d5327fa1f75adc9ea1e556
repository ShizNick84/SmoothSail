e59086f7b8ed607fce74ad288c6a259e
"use strict";

/**
 * =============================================================================
 * AI CRYPTO TRADING AGENT - COMPREHENSIVE AUDIT SERVICE
 * =============================================================================
 *
 * This service provides tamper-proof audit logging capabilities for the AI
 * crypto trading agent. It maintains comprehensive audit trails for all
 * security events, trading operations, and system activities.
 *
 * CRITICAL SECURITY NOTICE:
 * This service creates legal audit trails for financial operations.
 * All audit logs must be protected from tampering and maintained for
 * compliance with financial regulations.
 *
 * Features:
 * - Tamper-proof audit logging with hash chains
 * - Comprehensive event tracking and correlation
 * - Compliance reporting and data export
 * - Forensic analysis capabilities
 * - Automated integrity verification
 *
 * @author AI Crypto Trading System
 * @version 1.0.0
 * @license PROPRIETARY
 * =============================================================================
 */
/* istanbul ignore next */
function cov_9uxc2hz10() {
  var path = "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\audit-service.ts";
  var hash = "a0ce0111b9eba9e9f4dbef6f2a2904ed4c04c002";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\audit-service.ts",
    statementMap: {
      "0": {
        start: {
          line: 28,
          column: 0
        },
        end: {
          line: 28,
          column: 62
        }
      },
      "1": {
        start: {
          line: 29,
          column: 0
        },
        end: {
          line: 29,
          column: 53
        }
      },
      "2": {
        start: {
          line: 30,
          column: 17
        },
        end: {
          line: 30,
          column: 34
        }
      },
      "3": {
        start: {
          line: 31,
          column: 17
        },
        end: {
          line: 31,
          column: 49
        }
      },
      "4": {
        start: {
          line: 32,
          column: 29
        },
        end: {
          line: 32,
          column: 69
        }
      },
      "5": {
        start: {
          line: 39,
          column: 21
        },
        end: {
          line: 39,
          column: 22
        }
      },
      "6": {
        start: {
          line: 41,
          column: 20
        },
        end: {
          line: 41,
          column: 22
        }
      },
      "7": {
        start: {
          line: 45,
          column: 17
        },
        end: {
          line: 45,
          column: 26
        }
      },
      "8": {
        start: {
          line: 47,
          column: 28
        },
        end: {
          line: 47,
          column: 32
        }
      },
      "9": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 50,
          column: 38
        }
      },
      "10": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 52,
          column: 36
        }
      },
      "11": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 68,
          column: 9
        }
      },
      "12": {
        start: {
          line: 60,
          column: 34
        },
        end: {
          line: 61,
          column: 76
        }
      },
      "13": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 62,
          column: 69
        }
      },
      "14": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 63,
          column: 72
        }
      },
      "15": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 66,
          column: 82
        }
      },
      "16": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 67
        }
      },
      "17": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 94,
          column: 9
        }
      },
      "18": {
        start: {
          line: 76,
          column: 30
        },
        end: {
          line: 76,
          column: 60
        }
      },
      "19": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 85,
          column: 13
        }
      },
      "20": {
        start: {
          line: 78,
          column: 16
        },
        end: {
          line: 78,
          column: 63
        }
      },
      "21": {
        start: {
          line: 79,
          column: 16
        },
        end: {
          line: 79,
          column: 59
        }
      },
      "22": {
        start: {
          line: 83,
          column: 16
        },
        end: {
          line: 83,
          column: 40
        }
      },
      "23": {
        start: {
          line: 84,
          column: 16
        },
        end: {
          line: 84,
          column: 65
        }
      },
      "24": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 89,
          column: 15
        }
      },
      "25": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 92,
          column: 80
        }
      },
      "26": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 65
        }
      },
      "27": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 139,
          column: 9
        }
      },
      "28": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 106,
          column: 34
        }
      },
      "29": {
        start: {
          line: 108,
          column: 30
        },
        end: {
          line: 108,
          column: 65
        }
      },
      "30": {
        start: {
          line: 110,
          column: 35
        },
        end: {
          line: 110,
          column: 75
        }
      },
      "31": {
        start: {
          line: 112,
          column: 34
        },
        end: {
          line: 121,
          column: 13
        }
      },
      "32": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 123,
          column: 79
        }
      },
      "33": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 125,
          column: 73
        }
      },
      "34": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 127,
          column: 59
        }
      },
      "35": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 129,
          column: 54
        }
      },
      "36": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 131,
          column: 48
        }
      },
      "37": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 133,
          column: 46
        }
      },
      "38": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 134,
          column: 33
        }
      },
      "39": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 137,
          column: 76
        }
      },
      "40": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 138,
          column: 59
        }
      },
      "41": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 184,
          column: 9
        }
      },
      "42": {
        start: {
          line: 151,
          column: 27
        },
        end: {
          line: 151,
          column: 29
        }
      },
      "43": {
        start: {
          line: 152,
          column: 26
        },
        end: {
          line: 152,
          column: 30
        }
      },
      "44": {
        start: {
          line: 154,
          column: 28
        },
        end: {
          line: 157,
          column: 14
        }
      },
      "45": {
        start: {
          line: 158,
          column: 31
        },
        end: {
          line: 158,
          column: 85
        }
      },
      "46": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 178,
          column: 13
        }
      },
      "47": {
        start: {
          line: 161,
          column: 16
        },
        end: {
          line: 164,
          column: 17
        }
      },
      "48": {
        start: {
          line: 162,
          column: 20
        },
        end: {
          line: 162,
          column: 89
        }
      },
      "49": {
        start: {
          line: 163,
          column: 20
        },
        end: {
          line: 163,
          column: 36
        }
      },
      "50": {
        start: {
          line: 166,
          column: 39
        },
        end: {
          line: 166,
          column: 69
        }
      },
      "51": {
        start: {
          line: 167,
          column: 16
        },
        end: {
          line: 170,
          column: 17
        }
      },
      "52": {
        start: {
          line: 168,
          column: 20
        },
        end: {
          line: 168,
          column: 90
        }
      },
      "53": {
        start: {
          line: 169,
          column: 20
        },
        end: {
          line: 169,
          column: 36
        }
      },
      "54": {
        start: {
          line: 172,
          column: 44
        },
        end: {
          line: 172,
          column: 70
        }
      },
      "55": {
        start: {
          line: 173,
          column: 16
        },
        end: {
          line: 176,
          column: 17
        }
      },
      "56": {
        start: {
          line: 174,
          column: 20
        },
        end: {
          line: 174,
          column: 89
        }
      },
      "57": {
        start: {
          line: 175,
          column: 20
        },
        end: {
          line: 175,
          column: 36
        }
      },
      "58": {
        start: {
          line: 177,
          column: 16
        },
        end: {
          line: 177,
          column: 49
        }
      },
      "59": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 179,
          column: 39
        }
      },
      "60": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 182,
          column: 76
        }
      },
      "61": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 183,
          column: 79
        }
      },
      "62": {
        start: {
          line: 194,
          column: 8
        },
        end: {
          line: 202,
          column: 9
        }
      },
      "63": {
        start: {
          line: 197,
          column: 12
        },
        end: {
          line: 197,
          column: 22
        }
      },
      "64": {
        start: {
          line: 200,
          column: 12
        },
        end: {
          line: 200,
          column: 77
        }
      },
      "65": {
        start: {
          line: 201,
          column: 12
        },
        end: {
          line: 201,
          column: 50
        }
      },
      "66": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 228,
          column: 9
        }
      },
      "67": {
        start: {
          line: 215,
          column: 12
        },
        end: {
          line: 223,
          column: 14
        }
      },
      "68": {
        start: {
          line: 226,
          column: 12
        },
        end: {
          line: 226,
          column: 83
        }
      },
      "69": {
        start: {
          line: 227,
          column: 12
        },
        end: {
          line: 227,
          column: 66
        }
      },
      "70": {
        start: {
          line: 239,
          column: 8
        },
        end: {
          line: 255,
          column: 9
        }
      },
      "71": {
        start: {
          line: 240,
          column: 28
        },
        end: {
          line: 240,
          column: 61
        }
      },
      "72": {
        start: {
          line: 241,
          column: 12
        },
        end: {
          line: 250,
          column: 13
        }
      },
      "73": {
        start: {
          line: 243,
          column: 20
        },
        end: {
          line: 243,
          column: 60
        }
      },
      "74": {
        start: {
          line: 245,
          column: 20
        },
        end: {
          line: 245,
          column: 54
        }
      },
      "75": {
        start: {
          line: 247,
          column: 20
        },
        end: {
          line: 247,
          column: 54
        }
      },
      "76": {
        start: {
          line: 249,
          column: 20
        },
        end: {
          line: 249,
          column: 76
        }
      },
      "77": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 253,
          column: 75
        }
      },
      "78": {
        start: {
          line: 254,
          column: 12
        },
        end: {
          line: 254,
          column: 56
        }
      },
      "79": {
        start: {
          line: 265,
          column: 24
        },
        end: {
          line: 265,
          column: 25
        }
      },
      "80": {
        start: {
          line: 267,
          column: 29
        },
        end: {
          line: 278,
          column: 9
        }
      },
      "81": {
        start: {
          line: 279,
          column: 8
        },
        end: {
          line: 279,
          column: 60
        }
      },
      "82": {
        start: {
          line: 281,
          column: 8
        },
        end: {
          line: 283,
          column: 9
        }
      },
      "83": {
        start: {
          line: 282,
          column: 12
        },
        end: {
          line: 282,
          column: 27
        }
      },
      "84": {
        start: {
          line: 285,
          column: 8
        },
        end: {
          line: 287,
          column: 9
        }
      },
      "85": {
        start: {
          line: 286,
          column: 12
        },
        end: {
          line: 286,
          column: 27
        }
      },
      "86": {
        start: {
          line: 289,
          column: 8
        },
        end: {
          line: 289,
          column: 39
        }
      },
      "87": {
        start: {
          line: 299,
          column: 21
        },
        end: {
          line: 299,
          column: 23
        }
      },
      "88": {
        start: {
          line: 301,
          column: 8
        },
        end: {
          line: 303,
          column: 9
        }
      },
      "89": {
        start: {
          line: 302,
          column: 12
        },
        end: {
          line: 302,
          column: 47
        }
      },
      "90": {
        start: {
          line: 305,
          column: 8
        },
        end: {
          line: 307,
          column: 9
        }
      },
      "91": {
        start: {
          line: 306,
          column: 12
        },
        end: {
          line: 306,
          column: 40
        }
      },
      "92": {
        start: {
          line: 309,
          column: 8
        },
        end: {
          line: 311,
          column: 9
        }
      },
      "93": {
        start: {
          line: 310,
          column: 12
        },
        end: {
          line: 310,
          column: 41
        }
      },
      "94": {
        start: {
          line: 313,
          column: 8
        },
        end: {
          line: 315,
          column: 9
        }
      },
      "95": {
        start: {
          line: 314,
          column: 12
        },
        end: {
          line: 314,
          column: 35
        }
      },
      "96": {
        start: {
          line: 316,
          column: 8
        },
        end: {
          line: 316,
          column: 20
        }
      },
      "97": {
        start: {
          line: 326,
          column: 25
        },
        end: {
          line: 337,
          column: 9
        }
      },
      "98": {
        start: {
          line: 338,
          column: 8
        },
        end: {
          line: 340,
          column: 27
        }
      },
      "99": {
        start: {
          line: 350,
          column: 30
        },
        end: {
          line: 350,
          column: 93
        }
      },
      "100": {
        start: {
          line: 351,
          column: 8
        },
        end: {
          line: 353,
          column: 27
        }
      },
      "101": {
        start: {
          line: 362,
          column: 8
        },
        end: {
          line: 364,
          column: 27
        }
      },
      "102": {
        start: {
          line: 375,
          column: 8
        },
        end: {
          line: 378,
          column: 11
        }
      },
      "103": {
        start: {
          line: 389,
          column: 8
        },
        end: {
          line: 389,
          column: 20
        }
      },
      "104": {
        start: {
          line: 399,
          column: 8
        },
        end: {
          line: 402,
          column: 9
        }
      },
      "105": {
        start: {
          line: 400,
          column: 29
        },
        end: {
          line: 400,
          column: 64
        }
      },
      "106": {
        start: {
          line: 401,
          column: 12
        },
        end: {
          line: 401,
          column: 45
        }
      },
      "107": {
        start: {
          line: 403,
          column: 8
        },
        end: {
          line: 403,
          column: 50
        }
      },
      "108": {
        start: {
          line: 413,
          column: 8
        },
        end: {
          line: 414,
          column: 22
        }
      },
      "109": {
        start: {
          line: 414,
          column: 12
        },
        end: {
          line: 414,
          column: 22
        }
      },
      "110": {
        start: {
          line: 415,
          column: 24
        },
        end: {
          line: 415,
          column: 57
        }
      },
      "111": {
        start: {
          line: 416,
          column: 21
        },
        end: {
          line: 416,
          column: 153
        }
      },
      "112": {
        start: {
          line: 416,
          column: 42
        },
        end: {
          line: 416,
          column: 152
        }
      },
      "113": {
        start: {
          line: 416,
          column: 76
        },
        end: {
          line: 416,
          column: 141
        }
      },
      "114": {
        start: {
          line: 417,
          column: 8
        },
        end: {
          line: 417,
          column: 45
        }
      },
      "115": {
        start: {
          line: 427,
          column: 18
        },
        end: {
          line: 427,
          column: 76
        }
      },
      "116": {
        start: {
          line: 428,
          column: 8
        },
        end: {
          line: 436,
          column: 9
        }
      },
      "117": {
        start: {
          line: 429,
          column: 12
        },
        end: {
          line: 429,
          column: 38
        }
      },
      "118": {
        start: {
          line: 430,
          column: 12
        },
        end: {
          line: 434,
          column: 13
        }
      },
      "119": {
        start: {
          line: 431,
          column: 33
        },
        end: {
          line: 432,
          column: 57
        }
      },
      "120": {
        start: {
          line: 433,
          column: 16
        },
        end: {
          line: 433,
          column: 60
        }
      },
      "121": {
        start: {
          line: 435,
          column: 12
        },
        end: {
          line: 435,
          column: 39
        }
      },
      "122": {
        start: {
          line: 437,
          column: 8
        },
        end: {
          line: 437,
          column: 33
        }
      },
      "123": {
        start: {
          line: 438,
          column: 8
        },
        end: {
          line: 438,
          column: 19
        }
      },
      "124": {
        start: {
          line: 447,
          column: 8
        },
        end: {
          line: 452,
          column: 10
        }
      },
      "125": {
        start: {
          line: 455,
          column: 0
        },
        end: {
          line: 455,
          column: 36
        }
      },
      "126": {
        start: {
          line: 457,
          column: 0
        },
        end: {
          line: 457,
          column: 42
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 48,
            column: 4
          },
          end: {
            line: 48,
            column: 5
          }
        },
        loc: {
          start: {
            line: 48,
            column: 18
          },
          end: {
            line: 53,
            column: 5
          }
        },
        line: 48
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 57,
            column: 4
          },
          end: {
            line: 57,
            column: 5
          }
        },
        loc: {
          start: {
            line: 57,
            column: 35
          },
          end: {
            line: 69,
            column: 5
          }
        },
        line: 57
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 73,
            column: 4
          },
          end: {
            line: 73,
            column: 5
          }
        },
        loc: {
          start: {
            line: 73,
            column: 33
          },
          end: {
            line: 95,
            column: 5
          }
        },
        line: 73
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 103,
            column: 4
          },
          end: {
            line: 103,
            column: 5
          }
        },
        loc: {
          start: {
            line: 103,
            column: 39
          },
          end: {
            line: 140,
            column: 5
          }
        },
        line: 103
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 149,
            column: 4
          },
          end: {
            line: 149,
            column: 5
          }
        },
        loc: {
          start: {
            line: 149,
            column: 55
          },
          end: {
            line: 185,
            column: 5
          }
        },
        line: 149
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 193,
            column: 4
          },
          end: {
            line: 193,
            column: 5
          }
        },
        loc: {
          start: {
            line: 193,
            column: 38
          },
          end: {
            line: 203,
            column: 5
          }
        },
        line: 193
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 211,
            column: 4
          },
          end: {
            line: 211,
            column: 5
          }
        },
        loc: {
          start: {
            line: 211,
            column: 36
          },
          end: {
            line: 229,
            column: 5
          }
        },
        line: 211
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 238,
            column: 4
          },
          end: {
            line: 238,
            column: 5
          }
        },
        loc: {
          start: {
            line: 238,
            column: 50
          },
          end: {
            line: 256,
            column: 5
          }
        },
        line: 238
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 264,
            column: 4
          },
          end: {
            line: 264,
            column: 5
          }
        },
        loc: {
          start: {
            line: 264,
            column: 35
          },
          end: {
            line: 290,
            column: 5
          }
        },
        line: 264
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 298,
            column: 4
          },
          end: {
            line: 298,
            column: 5
          }
        },
        loc: {
          start: {
            line: 298,
            column: 40
          },
          end: {
            line: 317,
            column: 5
          }
        },
        line: 298
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 325,
            column: 4
          },
          end: {
            line: 325,
            column: 5
          }
        },
        loc: {
          start: {
            line: 325,
            column: 30
          },
          end: {
            line: 341,
            column: 5
          }
        },
        line: 325
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 349,
            column: 4
          },
          end: {
            line: 349,
            column: 5
          }
        },
        loc: {
          start: {
            line: 349,
            column: 26
          },
          end: {
            line: 354,
            column: 5
          }
        },
        line: 349
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 361,
            column: 4
          },
          end: {
            line: 361,
            column: 5
          }
        },
        loc: {
          start: {
            line: 361,
            column: 27
          },
          end: {
            line: 365,
            column: 5
          }
        },
        line: 361
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 372,
            column: 4
          },
          end: {
            line: 372,
            column: 5
          }
        },
        loc: {
          start: {
            line: 372,
            column: 33
          },
          end: {
            line: 379,
            column: 5
          }
        },
        line: 372
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 386,
            column: 4
          },
          end: {
            line: 386,
            column: 5
          }
        },
        loc: {
          start: {
            line: 386,
            column: 30
          },
          end: {
            line: 390,
            column: 5
          }
        },
        line: 386
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 397,
            column: 4
          },
          end: {
            line: 397,
            column: 5
          }
        },
        loc: {
          start: {
            line: 397,
            column: 27
          },
          end: {
            line: 404,
            column: 5
          }
        },
        line: 397
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 412,
            column: 4
          },
          end: {
            line: 412,
            column: 5
          }
        },
        loc: {
          start: {
            line: 412,
            column: 26
          },
          end: {
            line: 418,
            column: 5
          }
        },
        line: 412
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 416,
            column: 33
          },
          end: {
            line: 416,
            column: 34
          }
        },
        loc: {
          start: {
            line: 416,
            column: 42
          },
          end: {
            line: 416,
            column: 152
          }
        },
        line: 416
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 416,
            column: 67
          },
          end: {
            line: 416,
            column: 68
          }
        },
        loc: {
          start: {
            line: 416,
            column: 76
          },
          end: {
            line: 416,
            column: 141
          }
        },
        line: 416
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 426,
            column: 4
          },
          end: {
            line: 426,
            column: 5
          }
        },
        loc: {
          start: {
            line: 426,
            column: 26
          },
          end: {
            line: 439,
            column: 5
          }
        },
        line: 426
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 446,
            column: 4
          },
          end: {
            line: 446,
            column: 5
          }
        },
        loc: {
          start: {
            line: 446,
            column: 16
          },
          end: {
            line: 453,
            column: 5
          }
        },
        line: 446
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 60,
            column: 34
          },
          end: {
            line: 61,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 60,
            column: 34
          },
          end: {
            line: 60,
            column: 63
          }
        }, {
          start: {
            line: 61,
            column: 16
          },
          end: {
            line: 61,
            column: 76
          }
        }],
        line: 60
      },
      "1": {
        loc: {
          start: {
            line: 77,
            column: 12
          },
          end: {
            line: 85,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 77,
            column: 12
          },
          end: {
            line: 85,
            column: 13
          }
        }, {
          start: {
            line: 81,
            column: 17
          },
          end: {
            line: 85,
            column: 13
          }
        }],
        line: 77
      },
      "2": {
        loc: {
          start: {
            line: 155,
            column: 23
          },
          end: {
            line: 155,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 155,
            column: 37
          },
          end: {
            line: 155,
            column: 71
          }
        }, {
          start: {
            line: 155,
            column: 74
          },
          end: {
            line: 155,
            column: 83
          }
        }],
        line: 155
      },
      "3": {
        loc: {
          start: {
            line: 155,
            column: 52
          },
          end: {
            line: 155,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 155,
            column: 52
          },
          end: {
            line: 155,
            column: 65
          }
        }, {
          start: {
            line: 155,
            column: 69
          },
          end: {
            line: 155,
            column: 70
          }
        }],
        line: 155
      },
      "4": {
        loc: {
          start: {
            line: 156,
            column: 24
          },
          end: {
            line: 156,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 156,
            column: 24
          },
          end: {
            line: 156,
            column: 37
          }
        }, {
          start: {
            line: 156,
            column: 41
          },
          end: {
            line: 156,
            column: 42
          }
        }],
        line: 156
      },
      "5": {
        loc: {
          start: {
            line: 158,
            column: 31
          },
          end: {
            line: 158,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 158,
            column: 53
          },
          end: {
            line: 158,
            column: 80
          }
        }, {
          start: {
            line: 158,
            column: 83
          },
          end: {
            line: 158,
            column: 85
          }
        }],
        line: 158
      },
      "6": {
        loc: {
          start: {
            line: 161,
            column: 16
          },
          end: {
            line: 164,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 161,
            column: 16
          },
          end: {
            line: 164,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 161
      },
      "7": {
        loc: {
          start: {
            line: 167,
            column: 16
          },
          end: {
            line: 170,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 167,
            column: 16
          },
          end: {
            line: 170,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 167
      },
      "8": {
        loc: {
          start: {
            line: 173,
            column: 16
          },
          end: {
            line: 176,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 173,
            column: 16
          },
          end: {
            line: 176,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 173
      },
      "9": {
        loc: {
          start: {
            line: 193,
            column: 26
          },
          end: {
            line: 193,
            column: 36
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 193,
            column: 34
          },
          end: {
            line: 193,
            column: 36
          }
        }],
        line: 193
      },
      "10": {
        loc: {
          start: {
            line: 238,
            column: 33
          },
          end: {
            line: 238,
            column: 48
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 238,
            column: 42
          },
          end: {
            line: 238,
            column: 48
          }
        }],
        line: 238
      },
      "11": {
        loc: {
          start: {
            line: 241,
            column: 12
          },
          end: {
            line: 250,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 242,
            column: 16
          },
          end: {
            line: 243,
            column: 60
          }
        }, {
          start: {
            line: 244,
            column: 16
          },
          end: {
            line: 245,
            column: 54
          }
        }, {
          start: {
            line: 246,
            column: 16
          },
          end: {
            line: 247,
            column: 54
          }
        }, {
          start: {
            line: 248,
            column: 16
          },
          end: {
            line: 249,
            column: 76
          }
        }],
        line: 241
      },
      "12": {
        loc: {
          start: {
            line: 279,
            column: 20
          },
          end: {
            line: 279,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 279,
            column: 20
          },
          end: {
            line: 279,
            column: 54
          }
        }, {
          start: {
            line: 279,
            column: 58
          },
          end: {
            line: 279,
            column: 59
          }
        }],
        line: 279
      },
      "13": {
        loc: {
          start: {
            line: 281,
            column: 8
          },
          end: {
            line: 283,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 281,
            column: 8
          },
          end: {
            line: 283,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 281
      },
      "14": {
        loc: {
          start: {
            line: 285,
            column: 8
          },
          end: {
            line: 287,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 285,
            column: 8
          },
          end: {
            line: 287,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 285
      },
      "15": {
        loc: {
          start: {
            line: 301,
            column: 8
          },
          end: {
            line: 303,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 301,
            column: 8
          },
          end: {
            line: 303,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 301
      },
      "16": {
        loc: {
          start: {
            line: 301,
            column: 12
          },
          end: {
            line: 301,
            column: 91
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 301,
            column: 12
          },
          end: {
            line: 301,
            column: 50
          }
        }, {
          start: {
            line: 301,
            column: 54
          },
          end: {
            line: 301,
            column: 91
          }
        }],
        line: 301
      },
      "17": {
        loc: {
          start: {
            line: 305,
            column: 8
          },
          end: {
            line: 307,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 305,
            column: 8
          },
          end: {
            line: 307,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 305
      },
      "18": {
        loc: {
          start: {
            line: 305,
            column: 12
          },
          end: {
            line: 305,
            column: 95
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 305,
            column: 12
          },
          end: {
            line: 305,
            column: 53
          }
        }, {
          start: {
            line: 305,
            column: 57
          },
          end: {
            line: 305,
            column: 95
          }
        }],
        line: 305
      },
      "19": {
        loc: {
          start: {
            line: 309,
            column: 8
          },
          end: {
            line: 311,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 309,
            column: 8
          },
          end: {
            line: 311,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 309
      },
      "20": {
        loc: {
          start: {
            line: 309,
            column: 12
          },
          end: {
            line: 309,
            column: 96
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 309,
            column: 12
          },
          end: {
            line: 309,
            column: 55
          }
        }, {
          start: {
            line: 309,
            column: 59
          },
          end: {
            line: 309,
            column: 96
          }
        }],
        line: 309
      },
      "21": {
        loc: {
          start: {
            line: 313,
            column: 8
          },
          end: {
            line: 315,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 313,
            column: 8
          },
          end: {
            line: 315,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 313
      },
      "22": {
        loc: {
          start: {
            line: 399,
            column: 8
          },
          end: {
            line: 402,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 399,
            column: 8
          },
          end: {
            line: 402,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 399
      },
      "23": {
        loc: {
          start: {
            line: 413,
            column: 8
          },
          end: {
            line: 414,
            column: 22
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 413,
            column: 8
          },
          end: {
            line: 414,
            column: 22
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 413
      },
      "24": {
        loc: {
          start: {
            line: 416,
            column: 76
          },
          end: {
            line: 416,
            column: 141
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 416,
            column: 104
          },
          end: {
            line: 416,
            column: 125
          }
        }, {
          start: {
            line: 416,
            column: 128
          },
          end: {
            line: 416,
            column: 141
          }
        }],
        line: 416
      },
      "25": {
        loc: {
          start: {
            line: 431,
            column: 33
          },
          end: {
            line: 432,
            column: 57
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 432,
            column: 20
          },
          end: {
            line: 432,
            column: 41
          }
        }, {
          start: {
            line: 432,
            column: 44
          },
          end: {
            line: 432,
            column: 57
          }
        }],
        line: 431
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0],
      "10": [0],
      "11": [0, 0, 0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\audit-service.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\audit-service.ts"],
      sourcesContent: ["/**\r\n * =============================================================================\r\n * AI CRYPTO TRADING AGENT - COMPREHENSIVE AUDIT SERVICE\r\n * =============================================================================\r\n * \r\n * This service provides tamper-proof audit logging capabilities for the AI\r\n * crypto trading agent. It maintains comprehensive audit trails for all\r\n * security events, trading operations, and system activities.\r\n * \r\n * CRITICAL SECURITY NOTICE:\r\n * This service creates legal audit trails for financial operations.\r\n * All audit logs must be protected from tampering and maintained for\r\n * compliance with financial regulations.\r\n * \r\n * Features:\r\n * - Tamper-proof audit logging with hash chains\r\n * - Comprehensive event tracking and correlation\r\n * - Compliance reporting and data export\r\n * - Forensic analysis capabilities\r\n * - Automated integrity verification\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport { createHash, createHmac } from 'crypto';\r\nimport { logger, AuditLogEntry } from '@/core/logging/logger';\r\nimport { encryptionService } from '@/security/encryption-service';\r\n\r\n/**\r\n * Interface for enhanced audit entry\r\n * Extends basic audit entry with additional security fields\r\n */\r\nexport interface EnhancedAuditEntry extends AuditLogEntry {\r\n  /** Sequence number for ordering */\r\n  sequenceNumber: number;\r\n  /** Hash of previous audit entry for chain integrity */\r\n  previousHash: string;\r\n  /** Hash of current entry */\r\n  currentHash: string;\r\n  /** Digital signature of the entry */\r\n  signature: string;\r\n  /** Risk score of the audited action */\r\n  riskScore: number;\r\n  /** Compliance tags */\r\n  complianceTags: string[];\r\n  /** Related audit entries */\r\n  relatedEntries: string[];\r\n}\r\n\r\n/**\r\n * Interface for audit query parameters\r\n */\r\nexport interface AuditQuery {\r\n  /** Start date for query */\r\n  startDate?: Date;\r\n  /** End date for query */\r\n  endDate?: Date;\r\n  /** Event type filter */\r\n  eventType?: string;\r\n  /** Actor filter */\r\n  actor?: string;\r\n  /** Resource filter */\r\n  resource?: string;\r\n  /** Result filter */\r\n  result?: 'SUCCESS' | 'FAILURE' | 'PARTIAL';\r\n  /** Risk score range */\r\n  riskScoreMin?: number;\r\n  /** Risk score range */\r\n  riskScoreMax?: number;\r\n  /** Compliance tags */\r\n  complianceTags?: string[];\r\n  /** Maximum number of results */\r\n  limit?: number;\r\n  /** Offset for pagination */\r\n  offset?: number;\r\n}\r\n\r\n/**\r\n * Interface for audit statistics\r\n */\r\nexport interface AuditStatistics {\r\n  /** Total number of audit entries */\r\n  totalEntries: number;\r\n  /** Entries by event type */\r\n  entriesByType: Record<string, number>;\r\n  /** Entries by result */\r\n  entriesByResult: Record<string, number>;\r\n  /** Average risk score */\r\n  averageRiskScore: number;\r\n  /** High-risk entries count */\r\n  highRiskEntries: number;\r\n  /** Failed operations count */\r\n  failedOperations: number;\r\n  /** Time range of audit data */\r\n  timeRange: { start: Date; end: Date };\r\n}\r\n\r\n/**\r\n * Comprehensive audit service with tamper-proof logging\r\n * Provides secure audit trail capabilities for compliance and forensics\r\n */\r\nexport class AuditService {\r\n  /** Current sequence number for audit entries */\r\n  private sequenceNumber: number = 0;\r\n  \r\n  /** Hash of the last audit entry for chain integrity */\r\n  private lastEntryHash: string = '';\r\n  \r\n  /** HMAC key for audit entry signatures */\r\n  private auditSigningKey: Buffer;\r\n  \r\n  /** In-memory audit cache for performance */\r\n  private auditCache: Map<string, EnhancedAuditEntry> = new Map();\r\n  \r\n  /** Maximum cache size */\r\n  private static readonly MAX_CACHE_SIZE = 1000;\r\n\r\n  constructor() {\r\n    // Initialize audit signing key\r\n    this.initializeAuditSigning();\r\n    \r\n    // Load last sequence number and hash\r\n    this.initializeAuditChain();\r\n  }\r\n\r\n  /**\r\n   * Initialize audit signing key for tamper-proof signatures\r\n   */\r\n  private async initializeAuditSigning(): Promise<void> {\r\n    try {\r\n      // Generate or retrieve audit signing key\r\n      const signingKeyHex = process.env.AUDIT_SIGNING_KEY || \r\n                           encryptionService.generateSecureKey(32);\r\n      \r\n      this.auditSigningKey = Buffer.from(signingKeyHex, 'hex');\r\n      \r\n      logger.info('\uD83D\uDD10 Audit signing system initialized');\r\n      \r\n    } catch (error) {\r\n      logger.error('\u274C Failed to initialize audit signing:', error);\r\n      throw new Error('Audit service initialization failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialize audit chain by loading last entry\r\n   */\r\n  private async initializeAuditChain(): Promise<void> {\r\n    try {\r\n      // Load last audit entry to continue chain\r\n      const lastEntry = await this.getLastAuditEntry();\r\n      \r\n      if (lastEntry) {\r\n        this.sequenceNumber = lastEntry.sequenceNumber;\r\n        this.lastEntryHash = lastEntry.currentHash;\r\n      } else {\r\n        // Initialize genesis entry\r\n        this.sequenceNumber = 0;\r\n        this.lastEntryHash = this.calculateGenesisHash();\r\n      }\r\n      \r\n      logger.info('\uD83D\uDD17 Audit chain initialized', {\r\n        sequenceNumber: this.sequenceNumber,\r\n        lastHash: this.lastEntryHash.substring(0, 16) + '...'\r\n      });\r\n      \r\n    } catch (error) {\r\n      logger.error('\u274C Failed to initialize audit chain:', error);\r\n      throw new Error('Audit chain initialization failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create tamper-proof audit entry\r\n   * Generates audit entry with hash chain and digital signature\r\n   * \r\n   * @param auditEntry - Basic audit entry data\r\n   * @returns Promise<EnhancedAuditEntry> Enhanced audit entry with security fields\r\n   */\r\n  public async createAuditEntry(auditEntry: AuditLogEntry): Promise<EnhancedAuditEntry> {\r\n    try {\r\n      // Increment sequence number\r\n      this.sequenceNumber++;\r\n      \r\n      // Calculate risk score\r\n      const riskScore = this.calculateRiskScore(auditEntry);\r\n      \r\n      // Determine compliance tags\r\n      const complianceTags = this.determineComplianceTags(auditEntry);\r\n      \r\n      // Create enhanced audit entry\r\n      const enhancedEntry: EnhancedAuditEntry = {\r\n        ...auditEntry,\r\n        sequenceNumber: this.sequenceNumber,\r\n        previousHash: this.lastEntryHash,\r\n        currentHash: '', // Will be calculated\r\n        signature: '', // Will be calculated\r\n        riskScore,\r\n        complianceTags,\r\n        relatedEntries: []\r\n      };\r\n      \r\n      // Calculate current hash\r\n      enhancedEntry.currentHash = this.calculateEntryHash(enhancedEntry);\r\n      \r\n      // Generate digital signature\r\n      enhancedEntry.signature = this.signAuditEntry(enhancedEntry);\r\n      \r\n      // Update last entry hash for chain\r\n      this.lastEntryHash = enhancedEntry.currentHash;\r\n      \r\n      // Store audit entry\r\n      await this.storeAuditEntry(enhancedEntry);\r\n      \r\n      // Cache for performance\r\n      this.cacheAuditEntry(enhancedEntry);\r\n      \r\n      // Log to standard audit logger\r\n      logger.audit(auditEntry);\r\n      \r\n      return enhancedEntry;\r\n      \r\n    } catch (error) {\r\n      logger.error('\u274C Failed to create audit entry:', error);\r\n      throw new Error('Audit entry creation failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verify audit chain integrity\r\n   * Checks hash chain and signatures for tampering\r\n   * \r\n   * @param startSequence - Starting sequence number (optional)\r\n   * @param endSequence - Ending sequence number (optional)\r\n   * @returns Promise<{ isValid: boolean; errors: string[] }> Verification result\r\n   */\r\n  public async verifyAuditChain(\r\n    startSequence?: number,\r\n    endSequence?: number\r\n  ): Promise<{ isValid: boolean; errors: string[] }> {\r\n    try {\r\n      const errors: string[] = [];\r\n      let isValid = true;\r\n      \r\n      // Get audit entries in sequence\r\n      const entries = await this.getAuditEntries({\r\n        limit: endSequence ? endSequence - (startSequence || 0) : undefined,\r\n        offset: startSequence || 0\r\n      });\r\n      \r\n      let previousHash = startSequence === 0 ? this.calculateGenesisHash() : '';\r\n      \r\n      for (const entry of entries) {\r\n        // Verify hash chain\r\n        if (entry.previousHash !== previousHash) {\r\n          errors.push(`Hash chain broken at sequence ${entry.sequenceNumber}`);\r\n          isValid = false;\r\n        }\r\n        \r\n        // Verify entry hash\r\n        const calculatedHash = this.calculateEntryHash(entry);\r\n        if (entry.currentHash !== calculatedHash) {\r\n          errors.push(`Entry hash invalid at sequence ${entry.sequenceNumber}`);\r\n          isValid = false;\r\n        }\r\n        \r\n        // Verify signature\r\n        const calculatedSignature = this.signAuditEntry(entry);\r\n        if (entry.signature !== calculatedSignature) {\r\n          errors.push(`Signature invalid at sequence ${entry.sequenceNumber}`);\r\n          isValid = false;\r\n        }\r\n        \r\n        previousHash = entry.currentHash;\r\n      }\r\n      \r\n      return { isValid, errors };\r\n      \r\n    } catch (error) {\r\n      logger.error('\u274C Failed to verify audit chain:', error);\r\n      return { isValid: false, errors: ['Verification process failed'] };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Query audit entries with filtering\r\n   * Retrieves audit entries based on specified criteria\r\n   * \r\n   * @param query - Query parameters\r\n   * @returns Promise<EnhancedAuditEntry[]> Matching audit entries\r\n   */\r\n  public async getAuditEntries(query: AuditQuery = {}): Promise<EnhancedAuditEntry[]> {\r\n    try {\r\n      // Implementation would query secure audit database\r\n      // For now, return empty array as placeholder\r\n      return [];\r\n      \r\n    } catch (error) {\r\n      logger.error('\u274C Failed to query audit entries:', error);\r\n      throw new Error('Audit query failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate audit statistics\r\n   * Provides comprehensive statistics about audit data\r\n   * \r\n   * @param query - Optional query to filter statistics\r\n   * @returns Promise<AuditStatistics> Audit statistics\r\n   */\r\n  public async getAuditStatistics(query?: AuditQuery): Promise<AuditStatistics> {\r\n    try {\r\n      // Implementation would analyze audit database\r\n      // For now, return placeholder statistics\r\n      return {\r\n        totalEntries: this.sequenceNumber,\r\n        entriesByType: {},\r\n        entriesByResult: {},\r\n        averageRiskScore: 0,\r\n        highRiskEntries: 0,\r\n        failedOperations: 0,\r\n        timeRange: { start: new Date(), end: new Date() }\r\n      };\r\n      \r\n    } catch (error) {\r\n      logger.error('\u274C Failed to generate audit statistics:', error);\r\n      throw new Error('Audit statistics generation failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Export audit data for compliance\r\n   * Generates audit reports in various formats\r\n   * \r\n   * @param query - Query parameters for export\r\n   * @param format - Export format ('json', 'csv', 'xml')\r\n   * @returns Promise<string> Exported audit data\r\n   */\r\n  public async exportAuditData(\r\n    query: AuditQuery,\r\n    format: 'json' | 'csv' | 'xml' = 'json'\r\n  ): Promise<string> {\r\n    try {\r\n      const entries = await this.getAuditEntries(query);\r\n      \r\n      switch (format) {\r\n        case 'json':\r\n          return JSON.stringify(entries, null, 2);\r\n        \r\n        case 'csv':\r\n          return this.convertToCSV(entries);\r\n        \r\n        case 'xml':\r\n          return this.convertToXML(entries);\r\n        \r\n        default:\r\n          throw new Error(`Unsupported export format: ${format}`);\r\n      }\r\n      \r\n    } catch (error) {\r\n      logger.error('\u274C Failed to export audit data:', error);\r\n      throw new Error('Audit data export failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate risk score for audit entry\r\n   * Assigns risk score based on event type and context\r\n   * \r\n   * @param auditEntry - Audit entry to score\r\n   * @returns number Risk score (0-10)\r\n   */\r\n  private calculateRiskScore(auditEntry: AuditLogEntry): number {\r\n    let riskScore = 0;\r\n    \r\n    // Base risk by event type\r\n    const eventRiskMap: Record<string, number> = {\r\n      'LOGIN_ATTEMPT': 2,\r\n      'LOGIN_SUCCESS': 1,\r\n      'LOGIN_FAILURE': 4,\r\n      'API_ACCESS': 1,\r\n      'TRADE_EXECUTION': 3,\r\n      'FUND_TRANSFER': 8,\r\n      'CREDENTIAL_ACCESS': 6,\r\n      'SYSTEM_CONFIGURATION': 5,\r\n      'SECURITY_INCIDENT': 9,\r\n      'EMERGENCY_SHUTDOWN': 10\r\n    };\r\n    \r\n    riskScore = eventRiskMap[auditEntry.eventType] || 1;\r\n    \r\n    // Increase risk for failures\r\n    if (auditEntry.result === 'FAILURE') {\r\n      riskScore += 2;\r\n    }\r\n    \r\n    // Increase risk for external actors\r\n    if (auditEntry.actor !== 'SYSTEM') {\r\n      riskScore += 1;\r\n    }\r\n    \r\n    // Cap at maximum risk score\r\n    return Math.min(riskScore, 10);\r\n  }\r\n\r\n  /**\r\n   * Determine compliance tags for audit entry\r\n   * Assigns relevant compliance tags based on event type\r\n   * \r\n   * @param auditEntry - Audit entry to tag\r\n   * @returns string[] Compliance tags\r\n   */\r\n  private determineComplianceTags(auditEntry: AuditLogEntry): string[] {\r\n    const tags: string[] = [];\r\n    \r\n    // Financial compliance tags\r\n    if (auditEntry.eventType.includes('TRADE') || auditEntry.eventType.includes('FUND')) {\r\n      tags.push('FINANCIAL_TRANSACTION');\r\n    }\r\n    \r\n    // Security compliance tags\r\n    if (auditEntry.eventType.includes('SECURITY') || auditEntry.eventType.includes('LOGIN')) {\r\n      tags.push('SECURITY_EVENT');\r\n    }\r\n    \r\n    // Data protection tags\r\n    if (auditEntry.eventType.includes('CREDENTIAL') || auditEntry.eventType.includes('DATA')) {\r\n      tags.push('DATA_PROTECTION');\r\n    }\r\n    \r\n    // High-risk tags\r\n    if (this.calculateRiskScore(auditEntry) >= 7) {\r\n      tags.push('HIGH_RISK');\r\n    }\r\n    \r\n    return tags;\r\n  }\r\n\r\n  /**\r\n   * Calculate hash for audit entry\r\n   * Generates SHA-256 hash of entry data\r\n   * \r\n   * @param entry - Audit entry to hash\r\n   * @returns string SHA-256 hash\r\n   */\r\n  private calculateEntryHash(entry: Partial<EnhancedAuditEntry>): string {\r\n    const hashData = {\r\n      auditId: entry.auditId,\r\n      eventType: entry.eventType,\r\n      actor: entry.actor,\r\n      resource: entry.resource,\r\n      action: entry.action,\r\n      result: entry.result,\r\n      timestamp: entry.timestamp,\r\n      sequenceNumber: entry.sequenceNumber,\r\n      previousHash: entry.previousHash,\r\n      auditData: entry.auditData\r\n    };\r\n    \r\n    return createHash('sha256')\r\n      .update(JSON.stringify(hashData))\r\n      .digest('hex');\r\n  }\r\n\r\n  /**\r\n   * Sign audit entry with HMAC\r\n   * Generates tamper-proof signature for audit entry\r\n   * \r\n   * @param entry - Audit entry to sign\r\n   * @returns string HMAC signature\r\n   */\r\n  private signAuditEntry(entry: Partial<EnhancedAuditEntry>): string {\r\n    const signatureData = `${entry.auditId}:${entry.currentHash}:${entry.sequenceNumber}`;\r\n    \r\n    return createHmac('sha256', this.auditSigningKey)\r\n      .update(signatureData)\r\n      .digest('hex');\r\n  }\r\n\r\n  /**\r\n   * Calculate genesis hash for audit chain\r\n   * Generates initial hash for audit chain\r\n   * \r\n   * @returns string Genesis hash\r\n   */\r\n  private calculateGenesisHash(): string {\r\n    return createHash('sha256')\r\n      .update('AI_CRYPTO_TRADING_AGENT_AUDIT_GENESIS')\r\n      .digest('hex');\r\n  }\r\n\r\n  /**\r\n   * Store audit entry securely\r\n   * Persists audit entry to secure storage\r\n   * \r\n   * @param entry - Enhanced audit entry to store\r\n   */\r\n  private async storeAuditEntry(entry: EnhancedAuditEntry): Promise<void> {\r\n    // Implementation would store in secure audit database\r\n    // For now, this is a placeholder\r\n    logger.debug('Audit entry stored securely', {\r\n      auditId: entry.auditId,\r\n      sequenceNumber: entry.sequenceNumber\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get last audit entry from storage\r\n   * Retrieves the most recent audit entry\r\n   * \r\n   * @returns Promise<EnhancedAuditEntry | null> Last audit entry or null\r\n   */\r\n  private async getLastAuditEntry(): Promise<EnhancedAuditEntry | null> {\r\n    // Implementation would query secure audit database\r\n    // For now, return null as placeholder\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Cache audit entry for performance\r\n   * Stores audit entry in memory cache\r\n   * \r\n   * @param entry - Audit entry to cache\r\n   */\r\n  private cacheAuditEntry(entry: EnhancedAuditEntry): void {\r\n    // Maintain cache size limit\r\n    if (this.auditCache.size >= AuditService.MAX_CACHE_SIZE) {\r\n      const firstKey = this.auditCache.keys().next().value;\r\n      this.auditCache.delete(firstKey);\r\n    }\r\n    \r\n    this.auditCache.set(entry.auditId, entry);\r\n  }\r\n\r\n  /**\r\n   * Convert audit entries to CSV format\r\n   * Generates CSV representation of audit data\r\n   * \r\n   * @param entries - Audit entries to convert\r\n   * @returns string CSV data\r\n   */\r\n  private convertToCSV(entries: EnhancedAuditEntry[]): string {\r\n    if (entries.length === 0) return '';\r\n    \r\n    const headers = Object.keys(entries[0]).join(',');\r\n    const rows = entries.map(entry => \r\n      Object.values(entry).map(value => \r\n        typeof value === 'object' ? JSON.stringify(value) : String(value)\r\n      ).join(',')\r\n    );\r\n    \r\n    return [headers, ...rows].join('\\n');\r\n  }\r\n\r\n  /**\r\n   * Convert audit entries to XML format\r\n   * Generates XML representation of audit data\r\n   * \r\n   * @param entries - Audit entries to convert\r\n   * @returns string XML data\r\n   */\r\n  private convertToXML(entries: EnhancedAuditEntry[]): string {\r\n    let xml = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<auditEntries>\\n';\r\n    \r\n    for (const entry of entries) {\r\n      xml += '  <auditEntry>\\n';\r\n      for (const [key, value] of Object.entries(entry)) {\r\n        const xmlValue = typeof value === 'object' ? \r\n          JSON.stringify(value) : String(value);\r\n        xml += `    <${key}>${xmlValue}</${key}>\\n`;\r\n      }\r\n      xml += '  </auditEntry>\\n';\r\n    }\r\n    \r\n    xml += '</auditEntries>';\r\n    return xml;\r\n  }\r\n\r\n  /**\r\n   * Get audit service status\r\n   * Returns current status for monitoring\r\n   * \r\n   * @returns Object containing status information\r\n   */\r\n  public getStatus(): {\r\n    sequenceNumber: number;\r\n    cacheSize: number;\r\n    lastEntryHash: string;\r\n    timestamp: number;\r\n  } {\r\n    return {\r\n      sequenceNumber: this.sequenceNumber,\r\n      cacheSize: this.auditCache.size,\r\n      lastEntryHash: this.lastEntryHash.substring(0, 16) + '...',\r\n      timestamp: Date.now()\r\n    };\r\n  }\r\n}\r\n\r\n// Create and export singleton instance\r\nexport const auditService = new AuditService();\r\n\r\n// =============================================================================\r\n// AUDIT SECURITY NOTES\r\n// =============================================================================\r\n// 1. All audit entries are cryptographically signed for tamper detection\r\n// 2. Hash chains ensure audit trail integrity and detect tampering\r\n// 3. Risk scores help prioritize security analysis and response\r\n// 4. Compliance tags enable automated regulatory reporting\r\n// 5. Audit data export supports compliance and forensic analysis\r\n// 6. Chain verification should be performed regularly\r\n// 7. Audit signing keys must be protected and rotated regularly\r\n// 8. All audit operations are themselves audited for accountability\r\n// ============================================================================="],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "a0ce0111b9eba9e9f4dbef6f2a2904ed4c04c002"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_9uxc2hz10 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_9uxc2hz10();
cov_9uxc2hz10().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_9uxc2hz10().s[1]++;
exports.auditService = exports.AuditService = void 0;
const crypto_1 =
/* istanbul ignore next */
(cov_9uxc2hz10().s[2]++, require("crypto"));
const logger_1 =
/* istanbul ignore next */
(cov_9uxc2hz10().s[3]++, require("@/core/logging/logger"));
const encryption_service_1 =
/* istanbul ignore next */
(cov_9uxc2hz10().s[4]++, require("@/security/encryption-service"));
/**
 * Comprehensive audit service with tamper-proof logging
 * Provides secure audit trail capabilities for compliance and forensics
 */
class AuditService {
  /** Current sequence number for audit entries */
  sequenceNumber =
  /* istanbul ignore next */
  (cov_9uxc2hz10().s[5]++, 0);
  /** Hash of the last audit entry for chain integrity */
  lastEntryHash =
  /* istanbul ignore next */
  (cov_9uxc2hz10().s[6]++, '');
  /** HMAC key for audit entry signatures */
  auditSigningKey;
  /** In-memory audit cache for performance */
  auditCache =
  /* istanbul ignore next */
  (cov_9uxc2hz10().s[7]++, new Map());
  /** Maximum cache size */
  static MAX_CACHE_SIZE =
  /* istanbul ignore next */
  (cov_9uxc2hz10().s[8]++, 1000);
  constructor() {
    /* istanbul ignore next */
    cov_9uxc2hz10().f[0]++;
    cov_9uxc2hz10().s[9]++;
    // Initialize audit signing key
    this.initializeAuditSigning();
    // Load last sequence number and hash
    /* istanbul ignore next */
    cov_9uxc2hz10().s[10]++;
    this.initializeAuditChain();
  }
  /**
   * Initialize audit signing key for tamper-proof signatures
   */
  async initializeAuditSigning() {
    /* istanbul ignore next */
    cov_9uxc2hz10().f[1]++;
    cov_9uxc2hz10().s[11]++;
    try {
      // Generate or retrieve audit signing key
      const signingKeyHex =
      /* istanbul ignore next */
      (cov_9uxc2hz10().s[12]++,
      /* istanbul ignore next */
      (cov_9uxc2hz10().b[0][0]++, process.env.AUDIT_SIGNING_KEY) ||
      /* istanbul ignore next */
      (cov_9uxc2hz10().b[0][1]++, encryption_service_1.encryptionService.generateSecureKey(32)));
      /* istanbul ignore next */
      cov_9uxc2hz10().s[13]++;
      this.auditSigningKey = Buffer.from(signingKeyHex, 'hex');
      /* istanbul ignore next */
      cov_9uxc2hz10().s[14]++;
      logger_1.logger.info('🔐 Audit signing system initialized');
    } catch (error) {
      /* istanbul ignore next */
      cov_9uxc2hz10().s[15]++;
      logger_1.logger.error('❌ Failed to initialize audit signing:', error);
      /* istanbul ignore next */
      cov_9uxc2hz10().s[16]++;
      throw new Error('Audit service initialization failed');
    }
  }
  /**
   * Initialize audit chain by loading last entry
   */
  async initializeAuditChain() {
    /* istanbul ignore next */
    cov_9uxc2hz10().f[2]++;
    cov_9uxc2hz10().s[17]++;
    try {
      // Load last audit entry to continue chain
      const lastEntry =
      /* istanbul ignore next */
      (cov_9uxc2hz10().s[18]++, await this.getLastAuditEntry());
      /* istanbul ignore next */
      cov_9uxc2hz10().s[19]++;
      if (lastEntry) {
        /* istanbul ignore next */
        cov_9uxc2hz10().b[1][0]++;
        cov_9uxc2hz10().s[20]++;
        this.sequenceNumber = lastEntry.sequenceNumber;
        /* istanbul ignore next */
        cov_9uxc2hz10().s[21]++;
        this.lastEntryHash = lastEntry.currentHash;
      } else {
        /* istanbul ignore next */
        cov_9uxc2hz10().b[1][1]++;
        cov_9uxc2hz10().s[22]++;
        // Initialize genesis entry
        this.sequenceNumber = 0;
        /* istanbul ignore next */
        cov_9uxc2hz10().s[23]++;
        this.lastEntryHash = this.calculateGenesisHash();
      }
      /* istanbul ignore next */
      cov_9uxc2hz10().s[24]++;
      logger_1.logger.info('🔗 Audit chain initialized', {
        sequenceNumber: this.sequenceNumber,
        lastHash: this.lastEntryHash.substring(0, 16) + '...'
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_9uxc2hz10().s[25]++;
      logger_1.logger.error('❌ Failed to initialize audit chain:', error);
      /* istanbul ignore next */
      cov_9uxc2hz10().s[26]++;
      throw new Error('Audit chain initialization failed');
    }
  }
  /**
   * Create tamper-proof audit entry
   * Generates audit entry with hash chain and digital signature
   *
   * @param auditEntry - Basic audit entry data
   * @returns Promise<EnhancedAuditEntry> Enhanced audit entry with security fields
   */
  async createAuditEntry(auditEntry) {
    /* istanbul ignore next */
    cov_9uxc2hz10().f[3]++;
    cov_9uxc2hz10().s[27]++;
    try {
      /* istanbul ignore next */
      cov_9uxc2hz10().s[28]++;
      // Increment sequence number
      this.sequenceNumber++;
      // Calculate risk score
      const riskScore =
      /* istanbul ignore next */
      (cov_9uxc2hz10().s[29]++, this.calculateRiskScore(auditEntry));
      // Determine compliance tags
      const complianceTags =
      /* istanbul ignore next */
      (cov_9uxc2hz10().s[30]++, this.determineComplianceTags(auditEntry));
      // Create enhanced audit entry
      const enhancedEntry =
      /* istanbul ignore next */
      (cov_9uxc2hz10().s[31]++, {
        ...auditEntry,
        sequenceNumber: this.sequenceNumber,
        previousHash: this.lastEntryHash,
        currentHash: '',
        // Will be calculated
        signature: '',
        // Will be calculated
        riskScore,
        complianceTags,
        relatedEntries: []
      });
      // Calculate current hash
      /* istanbul ignore next */
      cov_9uxc2hz10().s[32]++;
      enhancedEntry.currentHash = this.calculateEntryHash(enhancedEntry);
      // Generate digital signature
      /* istanbul ignore next */
      cov_9uxc2hz10().s[33]++;
      enhancedEntry.signature = this.signAuditEntry(enhancedEntry);
      // Update last entry hash for chain
      /* istanbul ignore next */
      cov_9uxc2hz10().s[34]++;
      this.lastEntryHash = enhancedEntry.currentHash;
      // Store audit entry
      /* istanbul ignore next */
      cov_9uxc2hz10().s[35]++;
      await this.storeAuditEntry(enhancedEntry);
      // Cache for performance
      /* istanbul ignore next */
      cov_9uxc2hz10().s[36]++;
      this.cacheAuditEntry(enhancedEntry);
      // Log to standard audit logger
      /* istanbul ignore next */
      cov_9uxc2hz10().s[37]++;
      logger_1.logger.audit(auditEntry);
      /* istanbul ignore next */
      cov_9uxc2hz10().s[38]++;
      return enhancedEntry;
    } catch (error) {
      /* istanbul ignore next */
      cov_9uxc2hz10().s[39]++;
      logger_1.logger.error('❌ Failed to create audit entry:', error);
      /* istanbul ignore next */
      cov_9uxc2hz10().s[40]++;
      throw new Error('Audit entry creation failed');
    }
  }
  /**
   * Verify audit chain integrity
   * Checks hash chain and signatures for tampering
   *
   * @param startSequence - Starting sequence number (optional)
   * @param endSequence - Ending sequence number (optional)
   * @returns Promise<{ isValid: boolean; errors: string[] }> Verification result
   */
  async verifyAuditChain(startSequence, endSequence) {
    /* istanbul ignore next */
    cov_9uxc2hz10().f[4]++;
    cov_9uxc2hz10().s[41]++;
    try {
      const errors =
      /* istanbul ignore next */
      (cov_9uxc2hz10().s[42]++, []);
      let isValid =
      /* istanbul ignore next */
      (cov_9uxc2hz10().s[43]++, true);
      // Get audit entries in sequence
      const entries =
      /* istanbul ignore next */
      (cov_9uxc2hz10().s[44]++, await this.getAuditEntries({
        limit: endSequence ?
        /* istanbul ignore next */
        (cov_9uxc2hz10().b[2][0]++, endSequence - (
        /* istanbul ignore next */
        (cov_9uxc2hz10().b[3][0]++, startSequence) ||
        /* istanbul ignore next */
        (cov_9uxc2hz10().b[3][1]++, 0))) :
        /* istanbul ignore next */
        (cov_9uxc2hz10().b[2][1]++, undefined),
        offset:
        /* istanbul ignore next */
        (cov_9uxc2hz10().b[4][0]++, startSequence) ||
        /* istanbul ignore next */
        (cov_9uxc2hz10().b[4][1]++, 0)
      }));
      let previousHash =
      /* istanbul ignore next */
      (cov_9uxc2hz10().s[45]++, startSequence === 0 ?
      /* istanbul ignore next */
      (cov_9uxc2hz10().b[5][0]++, this.calculateGenesisHash()) :
      /* istanbul ignore next */
      (cov_9uxc2hz10().b[5][1]++, ''));
      /* istanbul ignore next */
      cov_9uxc2hz10().s[46]++;
      for (const entry of entries) {
        /* istanbul ignore next */
        cov_9uxc2hz10().s[47]++;
        // Verify hash chain
        if (entry.previousHash !== previousHash) {
          /* istanbul ignore next */
          cov_9uxc2hz10().b[6][0]++;
          cov_9uxc2hz10().s[48]++;
          errors.push(`Hash chain broken at sequence ${entry.sequenceNumber}`);
          /* istanbul ignore next */
          cov_9uxc2hz10().s[49]++;
          isValid = false;
        } else
        /* istanbul ignore next */
        {
          cov_9uxc2hz10().b[6][1]++;
        }
        // Verify entry hash
        const calculatedHash =
        /* istanbul ignore next */
        (cov_9uxc2hz10().s[50]++, this.calculateEntryHash(entry));
        /* istanbul ignore next */
        cov_9uxc2hz10().s[51]++;
        if (entry.currentHash !== calculatedHash) {
          /* istanbul ignore next */
          cov_9uxc2hz10().b[7][0]++;
          cov_9uxc2hz10().s[52]++;
          errors.push(`Entry hash invalid at sequence ${entry.sequenceNumber}`);
          /* istanbul ignore next */
          cov_9uxc2hz10().s[53]++;
          isValid = false;
        } else
        /* istanbul ignore next */
        {
          cov_9uxc2hz10().b[7][1]++;
        }
        // Verify signature
        const calculatedSignature =
        /* istanbul ignore next */
        (cov_9uxc2hz10().s[54]++, this.signAuditEntry(entry));
        /* istanbul ignore next */
        cov_9uxc2hz10().s[55]++;
        if (entry.signature !== calculatedSignature) {
          /* istanbul ignore next */
          cov_9uxc2hz10().b[8][0]++;
          cov_9uxc2hz10().s[56]++;
          errors.push(`Signature invalid at sequence ${entry.sequenceNumber}`);
          /* istanbul ignore next */
          cov_9uxc2hz10().s[57]++;
          isValid = false;
        } else
        /* istanbul ignore next */
        {
          cov_9uxc2hz10().b[8][1]++;
        }
        cov_9uxc2hz10().s[58]++;
        previousHash = entry.currentHash;
      }
      /* istanbul ignore next */
      cov_9uxc2hz10().s[59]++;
      return {
        isValid,
        errors
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_9uxc2hz10().s[60]++;
      logger_1.logger.error('❌ Failed to verify audit chain:', error);
      /* istanbul ignore next */
      cov_9uxc2hz10().s[61]++;
      return {
        isValid: false,
        errors: ['Verification process failed']
      };
    }
  }
  /**
   * Query audit entries with filtering
   * Retrieves audit entries based on specified criteria
   *
   * @param query - Query parameters
   * @returns Promise<EnhancedAuditEntry[]> Matching audit entries
   */
  async getAuditEntries(query =
  /* istanbul ignore next */
  (cov_9uxc2hz10().b[9][0]++, {})) {
    /* istanbul ignore next */
    cov_9uxc2hz10().f[5]++;
    cov_9uxc2hz10().s[62]++;
    try {
      /* istanbul ignore next */
      cov_9uxc2hz10().s[63]++;
      // Implementation would query secure audit database
      // For now, return empty array as placeholder
      return [];
    } catch (error) {
      /* istanbul ignore next */
      cov_9uxc2hz10().s[64]++;
      logger_1.logger.error('❌ Failed to query audit entries:', error);
      /* istanbul ignore next */
      cov_9uxc2hz10().s[65]++;
      throw new Error('Audit query failed');
    }
  }
  /**
   * Generate audit statistics
   * Provides comprehensive statistics about audit data
   *
   * @param query - Optional query to filter statistics
   * @returns Promise<AuditStatistics> Audit statistics
   */
  async getAuditStatistics(query) {
    /* istanbul ignore next */
    cov_9uxc2hz10().f[6]++;
    cov_9uxc2hz10().s[66]++;
    try {
      /* istanbul ignore next */
      cov_9uxc2hz10().s[67]++;
      // Implementation would analyze audit database
      // For now, return placeholder statistics
      return {
        totalEntries: this.sequenceNumber,
        entriesByType: {},
        entriesByResult: {},
        averageRiskScore: 0,
        highRiskEntries: 0,
        failedOperations: 0,
        timeRange: {
          start: new Date(),
          end: new Date()
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_9uxc2hz10().s[68]++;
      logger_1.logger.error('❌ Failed to generate audit statistics:', error);
      /* istanbul ignore next */
      cov_9uxc2hz10().s[69]++;
      throw new Error('Audit statistics generation failed');
    }
  }
  /**
   * Export audit data for compliance
   * Generates audit reports in various formats
   *
   * @param query - Query parameters for export
   * @param format - Export format ('json', 'csv', 'xml')
   * @returns Promise<string> Exported audit data
   */
  async exportAuditData(query, format =
  /* istanbul ignore next */
  (cov_9uxc2hz10().b[10][0]++, 'json')) {
    /* istanbul ignore next */
    cov_9uxc2hz10().f[7]++;
    cov_9uxc2hz10().s[70]++;
    try {
      const entries =
      /* istanbul ignore next */
      (cov_9uxc2hz10().s[71]++, await this.getAuditEntries(query));
      /* istanbul ignore next */
      cov_9uxc2hz10().s[72]++;
      switch (format) {
        case 'json':
          /* istanbul ignore next */
          cov_9uxc2hz10().b[11][0]++;
          cov_9uxc2hz10().s[73]++;
          return JSON.stringify(entries, null, 2);
        case 'csv':
          /* istanbul ignore next */
          cov_9uxc2hz10().b[11][1]++;
          cov_9uxc2hz10().s[74]++;
          return this.convertToCSV(entries);
        case 'xml':
          /* istanbul ignore next */
          cov_9uxc2hz10().b[11][2]++;
          cov_9uxc2hz10().s[75]++;
          return this.convertToXML(entries);
        default:
          /* istanbul ignore next */
          cov_9uxc2hz10().b[11][3]++;
          cov_9uxc2hz10().s[76]++;
          throw new Error(`Unsupported export format: ${format}`);
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_9uxc2hz10().s[77]++;
      logger_1.logger.error('❌ Failed to export audit data:', error);
      /* istanbul ignore next */
      cov_9uxc2hz10().s[78]++;
      throw new Error('Audit data export failed');
    }
  }
  /**
   * Calculate risk score for audit entry
   * Assigns risk score based on event type and context
   *
   * @param auditEntry - Audit entry to score
   * @returns number Risk score (0-10)
   */
  calculateRiskScore(auditEntry) {
    /* istanbul ignore next */
    cov_9uxc2hz10().f[8]++;
    let riskScore =
    /* istanbul ignore next */
    (cov_9uxc2hz10().s[79]++, 0);
    // Base risk by event type
    const eventRiskMap =
    /* istanbul ignore next */
    (cov_9uxc2hz10().s[80]++, {
      'LOGIN_ATTEMPT': 2,
      'LOGIN_SUCCESS': 1,
      'LOGIN_FAILURE': 4,
      'API_ACCESS': 1,
      'TRADE_EXECUTION': 3,
      'FUND_TRANSFER': 8,
      'CREDENTIAL_ACCESS': 6,
      'SYSTEM_CONFIGURATION': 5,
      'SECURITY_INCIDENT': 9,
      'EMERGENCY_SHUTDOWN': 10
    });
    /* istanbul ignore next */
    cov_9uxc2hz10().s[81]++;
    riskScore =
    /* istanbul ignore next */
    (cov_9uxc2hz10().b[12][0]++, eventRiskMap[auditEntry.eventType]) ||
    /* istanbul ignore next */
    (cov_9uxc2hz10().b[12][1]++, 1);
    // Increase risk for failures
    /* istanbul ignore next */
    cov_9uxc2hz10().s[82]++;
    if (auditEntry.result === 'FAILURE') {
      /* istanbul ignore next */
      cov_9uxc2hz10().b[13][0]++;
      cov_9uxc2hz10().s[83]++;
      riskScore += 2;
    } else
    /* istanbul ignore next */
    {
      cov_9uxc2hz10().b[13][1]++;
    }
    // Increase risk for external actors
    cov_9uxc2hz10().s[84]++;
    if (auditEntry.actor !== 'SYSTEM') {
      /* istanbul ignore next */
      cov_9uxc2hz10().b[14][0]++;
      cov_9uxc2hz10().s[85]++;
      riskScore += 1;
    } else
    /* istanbul ignore next */
    {
      cov_9uxc2hz10().b[14][1]++;
    }
    // Cap at maximum risk score
    cov_9uxc2hz10().s[86]++;
    return Math.min(riskScore, 10);
  }
  /**
   * Determine compliance tags for audit entry
   * Assigns relevant compliance tags based on event type
   *
   * @param auditEntry - Audit entry to tag
   * @returns string[] Compliance tags
   */
  determineComplianceTags(auditEntry) {
    /* istanbul ignore next */
    cov_9uxc2hz10().f[9]++;
    const tags =
    /* istanbul ignore next */
    (cov_9uxc2hz10().s[87]++, []);
    // Financial compliance tags
    /* istanbul ignore next */
    cov_9uxc2hz10().s[88]++;
    if (
    /* istanbul ignore next */
    (cov_9uxc2hz10().b[16][0]++, auditEntry.eventType.includes('TRADE')) ||
    /* istanbul ignore next */
    (cov_9uxc2hz10().b[16][1]++, auditEntry.eventType.includes('FUND'))) {
      /* istanbul ignore next */
      cov_9uxc2hz10().b[15][0]++;
      cov_9uxc2hz10().s[89]++;
      tags.push('FINANCIAL_TRANSACTION');
    } else
    /* istanbul ignore next */
    {
      cov_9uxc2hz10().b[15][1]++;
    }
    // Security compliance tags
    cov_9uxc2hz10().s[90]++;
    if (
    /* istanbul ignore next */
    (cov_9uxc2hz10().b[18][0]++, auditEntry.eventType.includes('SECURITY')) ||
    /* istanbul ignore next */
    (cov_9uxc2hz10().b[18][1]++, auditEntry.eventType.includes('LOGIN'))) {
      /* istanbul ignore next */
      cov_9uxc2hz10().b[17][0]++;
      cov_9uxc2hz10().s[91]++;
      tags.push('SECURITY_EVENT');
    } else
    /* istanbul ignore next */
    {
      cov_9uxc2hz10().b[17][1]++;
    }
    // Data protection tags
    cov_9uxc2hz10().s[92]++;
    if (
    /* istanbul ignore next */
    (cov_9uxc2hz10().b[20][0]++, auditEntry.eventType.includes('CREDENTIAL')) ||
    /* istanbul ignore next */
    (cov_9uxc2hz10().b[20][1]++, auditEntry.eventType.includes('DATA'))) {
      /* istanbul ignore next */
      cov_9uxc2hz10().b[19][0]++;
      cov_9uxc2hz10().s[93]++;
      tags.push('DATA_PROTECTION');
    } else
    /* istanbul ignore next */
    {
      cov_9uxc2hz10().b[19][1]++;
    }
    // High-risk tags
    cov_9uxc2hz10().s[94]++;
    if (this.calculateRiskScore(auditEntry) >= 7) {
      /* istanbul ignore next */
      cov_9uxc2hz10().b[21][0]++;
      cov_9uxc2hz10().s[95]++;
      tags.push('HIGH_RISK');
    } else
    /* istanbul ignore next */
    {
      cov_9uxc2hz10().b[21][1]++;
    }
    cov_9uxc2hz10().s[96]++;
    return tags;
  }
  /**
   * Calculate hash for audit entry
   * Generates SHA-256 hash of entry data
   *
   * @param entry - Audit entry to hash
   * @returns string SHA-256 hash
   */
  calculateEntryHash(entry) {
    /* istanbul ignore next */
    cov_9uxc2hz10().f[10]++;
    const hashData =
    /* istanbul ignore next */
    (cov_9uxc2hz10().s[97]++, {
      auditId: entry.auditId,
      eventType: entry.eventType,
      actor: entry.actor,
      resource: entry.resource,
      action: entry.action,
      result: entry.result,
      timestamp: entry.timestamp,
      sequenceNumber: entry.sequenceNumber,
      previousHash: entry.previousHash,
      auditData: entry.auditData
    });
    /* istanbul ignore next */
    cov_9uxc2hz10().s[98]++;
    return (0, crypto_1.createHash)('sha256').update(JSON.stringify(hashData)).digest('hex');
  }
  /**
   * Sign audit entry with HMAC
   * Generates tamper-proof signature for audit entry
   *
   * @param entry - Audit entry to sign
   * @returns string HMAC signature
   */
  signAuditEntry(entry) {
    /* istanbul ignore next */
    cov_9uxc2hz10().f[11]++;
    const signatureData =
    /* istanbul ignore next */
    (cov_9uxc2hz10().s[99]++, `${entry.auditId}:${entry.currentHash}:${entry.sequenceNumber}`);
    /* istanbul ignore next */
    cov_9uxc2hz10().s[100]++;
    return (0, crypto_1.createHmac)('sha256', this.auditSigningKey).update(signatureData).digest('hex');
  }
  /**
   * Calculate genesis hash for audit chain
   * Generates initial hash for audit chain
   *
   * @returns string Genesis hash
   */
  calculateGenesisHash() {
    /* istanbul ignore next */
    cov_9uxc2hz10().f[12]++;
    cov_9uxc2hz10().s[101]++;
    return (0, crypto_1.createHash)('sha256').update('AI_CRYPTO_TRADING_AGENT_AUDIT_GENESIS').digest('hex');
  }
  /**
   * Store audit entry securely
   * Persists audit entry to secure storage
   *
   * @param entry - Enhanced audit entry to store
   */
  async storeAuditEntry(entry) {
    /* istanbul ignore next */
    cov_9uxc2hz10().f[13]++;
    cov_9uxc2hz10().s[102]++;
    // Implementation would store in secure audit database
    // For now, this is a placeholder
    logger_1.logger.debug('Audit entry stored securely', {
      auditId: entry.auditId,
      sequenceNumber: entry.sequenceNumber
    });
  }
  /**
   * Get last audit entry from storage
   * Retrieves the most recent audit entry
   *
   * @returns Promise<EnhancedAuditEntry | null> Last audit entry or null
   */
  async getLastAuditEntry() {
    /* istanbul ignore next */
    cov_9uxc2hz10().f[14]++;
    cov_9uxc2hz10().s[103]++;
    // Implementation would query secure audit database
    // For now, return null as placeholder
    return null;
  }
  /**
   * Cache audit entry for performance
   * Stores audit entry in memory cache
   *
   * @param entry - Audit entry to cache
   */
  cacheAuditEntry(entry) {
    /* istanbul ignore next */
    cov_9uxc2hz10().f[15]++;
    cov_9uxc2hz10().s[104]++;
    // Maintain cache size limit
    if (this.auditCache.size >= AuditService.MAX_CACHE_SIZE) {
      /* istanbul ignore next */
      cov_9uxc2hz10().b[22][0]++;
      const firstKey =
      /* istanbul ignore next */
      (cov_9uxc2hz10().s[105]++, this.auditCache.keys().next().value);
      /* istanbul ignore next */
      cov_9uxc2hz10().s[106]++;
      this.auditCache.delete(firstKey);
    } else
    /* istanbul ignore next */
    {
      cov_9uxc2hz10().b[22][1]++;
    }
    cov_9uxc2hz10().s[107]++;
    this.auditCache.set(entry.auditId, entry);
  }
  /**
   * Convert audit entries to CSV format
   * Generates CSV representation of audit data
   *
   * @param entries - Audit entries to convert
   * @returns string CSV data
   */
  convertToCSV(entries) {
    /* istanbul ignore next */
    cov_9uxc2hz10().f[16]++;
    cov_9uxc2hz10().s[108]++;
    if (entries.length === 0) {
      /* istanbul ignore next */
      cov_9uxc2hz10().b[23][0]++;
      cov_9uxc2hz10().s[109]++;
      return '';
    } else
    /* istanbul ignore next */
    {
      cov_9uxc2hz10().b[23][1]++;
    }
    const headers =
    /* istanbul ignore next */
    (cov_9uxc2hz10().s[110]++, Object.keys(entries[0]).join(','));
    const rows =
    /* istanbul ignore next */
    (cov_9uxc2hz10().s[111]++, entries.map(entry => {
      /* istanbul ignore next */
      cov_9uxc2hz10().f[17]++;
      cov_9uxc2hz10().s[112]++;
      return Object.values(entry).map(value => {
        /* istanbul ignore next */
        cov_9uxc2hz10().f[18]++;
        cov_9uxc2hz10().s[113]++;
        return typeof value === 'object' ?
        /* istanbul ignore next */
        (cov_9uxc2hz10().b[24][0]++, JSON.stringify(value)) :
        /* istanbul ignore next */
        (cov_9uxc2hz10().b[24][1]++, String(value));
      }).join(',');
    }));
    /* istanbul ignore next */
    cov_9uxc2hz10().s[114]++;
    return [headers, ...rows].join('\n');
  }
  /**
   * Convert audit entries to XML format
   * Generates XML representation of audit data
   *
   * @param entries - Audit entries to convert
   * @returns string XML data
   */
  convertToXML(entries) {
    /* istanbul ignore next */
    cov_9uxc2hz10().f[19]++;
    let xml =
    /* istanbul ignore next */
    (cov_9uxc2hz10().s[115]++, '<?xml version="1.0" encoding="UTF-8"?>\n<auditEntries>\n');
    /* istanbul ignore next */
    cov_9uxc2hz10().s[116]++;
    for (const entry of entries) {
      /* istanbul ignore next */
      cov_9uxc2hz10().s[117]++;
      xml += '  <auditEntry>\n';
      /* istanbul ignore next */
      cov_9uxc2hz10().s[118]++;
      for (const [key, value] of Object.entries(entry)) {
        const xmlValue =
        /* istanbul ignore next */
        (cov_9uxc2hz10().s[119]++, typeof value === 'object' ?
        /* istanbul ignore next */
        (cov_9uxc2hz10().b[25][0]++, JSON.stringify(value)) :
        /* istanbul ignore next */
        (cov_9uxc2hz10().b[25][1]++, String(value)));
        /* istanbul ignore next */
        cov_9uxc2hz10().s[120]++;
        xml += `    <${key}>${xmlValue}</${key}>\n`;
      }
      /* istanbul ignore next */
      cov_9uxc2hz10().s[121]++;
      xml += '  </auditEntry>\n';
    }
    /* istanbul ignore next */
    cov_9uxc2hz10().s[122]++;
    xml += '</auditEntries>';
    /* istanbul ignore next */
    cov_9uxc2hz10().s[123]++;
    return xml;
  }
  /**
   * Get audit service status
   * Returns current status for monitoring
   *
   * @returns Object containing status information
   */
  getStatus() {
    /* istanbul ignore next */
    cov_9uxc2hz10().f[20]++;
    cov_9uxc2hz10().s[124]++;
    return {
      sequenceNumber: this.sequenceNumber,
      cacheSize: this.auditCache.size,
      lastEntryHash: this.lastEntryHash.substring(0, 16) + '...',
      timestamp: Date.now()
    };
  }
}
/* istanbul ignore next */
cov_9uxc2hz10().s[125]++;
exports.AuditService = AuditService;
// Create and export singleton instance
/* istanbul ignore next */
cov_9uxc2hz10().s[126]++;
exports.auditService = new AuditService();
// =============================================================================
// AUDIT SECURITY NOTES
// =============================================================================
// 1. All audit entries are cryptographically signed for tamper detection
// 2. Hash chains ensure audit trail integrity and detect tampering
// 3. Risk scores help prioritize security analysis and response
// 4. Compliance tags enable automated regulatory reporting
// 5. Audit data export supports compliance and forensic analysis
// 6. Chain verification should be performed regularly
// 7. Audit signing keys must be protected and rotated regularly
// 8. All audit operations are themselves audited for accountability
// =============================================================================
//# sourceMappingURL=data:application/json;charset=utf-8;base64,