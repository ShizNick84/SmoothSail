b11bf55a20cee70e8f545ce2e89ad117
"use strict";

/**
 * =============================================================================
 * GATE.IO API TYPES AND INTERFACES
 * =============================================================================
 *
 * This module defines all TypeScript types and interfaces for Gate.io API
 * integration, ensuring type safety and proper data validation throughout
 * the trading system.
 *
 * @author AI Crypto Trading System
 * @version 1.0.0
 * @license PROPRIETARY
 * =============================================================================
 */
/* istanbul ignore next */
function cov_ahougwrdj() {
  var path = "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\api\\types.ts";
  var hash = "630ef1a00e54cd9429a97e6bc42607b82b8496fa";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\api\\types.ts",
    statementMap: {
      "0": {
        start: {
          line: 16,
          column: 0
        },
        end: {
          line: 16,
          column: 62
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0
    },
    f: {},
    b: {},
    inputSourceMap: {
      file: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\api\\types.ts",
      mappings: ";AAAA;;;;;;;;;;;;;GAaG",
      names: [],
      sources: ["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\api\\types.ts"],
      sourcesContent: ["/**\r\n * =============================================================================\r\n * GATE.IO API TYPES AND INTERFACES\r\n * =============================================================================\r\n * \r\n * This module defines all TypeScript types and interfaces for Gate.io API\r\n * integration, ensuring type safety and proper data validation throughout\r\n * the trading system.\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\n/**\r\n * Trading pair symbols supported by the system\r\n */\r\nexport type TradingSymbol = 'BTC_USDT' | 'ETH_USDT';\r\n\r\n/**\r\n * Order types supported by Gate.io\r\n */\r\nexport type OrderType = 'limit' | 'market' | 'stop_limit' | 'stop_market';\r\n\r\n/**\r\n * Order sides\r\n */\r\nexport type OrderSide = 'buy' | 'sell';\r\n\r\n/**\r\n * Order status from Gate.io API\r\n */\r\nexport type OrderStatus = 'open' | 'closed' | 'cancelled' | 'expired';\r\n\r\n/**\r\n * Time in force options\r\n */\r\nexport type TimeInForce = 'GTC' | 'IOC' | 'FOK' | 'PO';\r\n\r\n/**\r\n * Account balance information\r\n */\r\nexport interface AccountBalance {\r\n  currency: string;\r\n  available: string;\r\n  locked: string;\r\n  total: string;\r\n  update_time: number;\r\n}\r\n\r\n/**\r\n * Spot account information\r\n */\r\nexport interface SpotAccount {\r\n  currency: string;\r\n  available: string;\r\n  locked: string;\r\n}\r\n\r\n/**\r\n * Market ticker information\r\n */\r\nexport interface MarketTicker {\r\n  currency_pair: string;\r\n  last: string;\r\n  lowest_ask: string;\r\n  highest_bid: string;\r\n  change_percentage: string;\r\n  base_volume: string;\r\n  quote_volume: string;\r\n  high_24h: string;\r\n  low_24h: string;\r\n}\r\n\r\n/**\r\n * Order book entry\r\n */\r\nexport interface OrderBookEntry {\r\n  price: string;\r\n  amount: string;\r\n}\r\n\r\n/**\r\n * Order book data\r\n */\r\nexport interface OrderBook {\r\n  id: number;\r\n  current: number;\r\n  update: number;\r\n  asks: OrderBookEntry[];\r\n  bids: OrderBookEntry[];\r\n}\r\n\r\n/**\r\n * Candlestick/OHLCV data\r\n */\r\nexport interface Candlestick {\r\n  timestamp: number;\r\n  volume: string;\r\n  close: string;\r\n  high: string;\r\n  low: string;\r\n  open: string;\r\n  quote_volume: string;\r\n}\r\n\r\n/**\r\n * Trade history entry\r\n */\r\nexport interface TradeHistory {\r\n  id: string;\r\n  create_time: string;\r\n  create_time_ms: string;\r\n  currency_pair: string;\r\n  side: OrderSide;\r\n  role: 'maker' | 'taker';\r\n  amount: string;\r\n  price: string;\r\n  order_id: string;\r\n  fee: string;\r\n  fee_currency: string;\r\n  point_fee: string;\r\n  gt_fee: string;\r\n}\r\n\r\n/**\r\n * Order request parameters\r\n */\r\nexport interface OrderRequest {\r\n  currency_pair: string;\r\n  type: OrderType;\r\n  side: OrderSide;\r\n  amount: string;\r\n  price?: string;\r\n  time_in_force?: TimeInForce;\r\n  iceberg?: string;\r\n  auto_borrow?: boolean;\r\n  auto_repay?: boolean;\r\n  stp_act?: 'cn' | 'co' | 'cb';\r\n  text?: string;\r\n}\r\n\r\n/**\r\n * Order response from Gate.io API\r\n */\r\nexport interface OrderResponse {\r\n  id: string;\r\n  text: string;\r\n  create_time: string;\r\n  update_time: string;\r\n  create_time_ms: number;\r\n  update_time_ms: number;\r\n  status: OrderStatus;\r\n  currency_pair: string;\r\n  type: OrderType;\r\n  account: string;\r\n  side: OrderSide;\r\n  amount: string;\r\n  price: string;\r\n  time_in_force: TimeInForce;\r\n  iceberg: string;\r\n  auto_borrow: boolean;\r\n  auto_repay: boolean;\r\n  left: string;\r\n  filled_total: string;\r\n  fee: string;\r\n  fee_currency: string;\r\n  point_fee: string;\r\n  gt_fee: string;\r\n  gt_discount: boolean;\r\n  rebated_fee: string;\r\n  rebated_fee_currency: string;\r\n}\r\n\r\n/**\r\n * Order modification request\r\n */\r\nexport interface OrderModifyRequest {\r\n  price?: string;\r\n  amount?: string;\r\n  amend_text?: string;\r\n}\r\n\r\n/**\r\n * Server time response\r\n */\r\nexport interface ServerTime {\r\n  server_time: number;\r\n}\r\n\r\n/**\r\n * API error response\r\n */\r\nexport interface APIError {\r\n  label: string;\r\n  message: string;\r\n  detail?: string;\r\n}\r\n\r\n/**\r\n * WebSocket subscription message\r\n */\r\nexport interface WebSocketSubscription {\r\n  time: number;\r\n  channel: string;\r\n  event: 'subscribe' | 'unsubscribe' | 'update';\r\n  payload?: any;\r\n}\r\n\r\n/**\r\n * WebSocket ticker update\r\n */\r\nexport interface WebSocketTicker {\r\n  currency_pair: string;\r\n  last: string;\r\n  change_percentage: string;\r\n  base_volume: string;\r\n  quote_volume: string;\r\n  high_24h: string;\r\n  low_24h: string;\r\n}\r\n\r\n/**\r\n * WebSocket order book update\r\n */\r\nexport interface WebSocketOrderBook {\r\n  t: number; // timestamp\r\n  e: string; // event type\r\n  E: number; // event time\r\n  s: string; // symbol\r\n  U: number; // first update id\r\n  u: number; // final update id\r\n  b: OrderBookEntry[]; // bids\r\n  a: OrderBookEntry[]; // asks\r\n}\r\n\r\n/**\r\n * WebSocket trade update\r\n */\r\nexport interface WebSocketTrade {\r\n  id: number;\r\n  create_time: number;\r\n  create_time_ms: string;\r\n  currency_pair: string;\r\n  side: OrderSide;\r\n  amount: string;\r\n  price: string;\r\n}\r\n\r\n/**\r\n * Rate limit information\r\n */\r\nexport interface RateLimitInfo {\r\n  limit: number;\r\n  remaining: number;\r\n  reset: number;\r\n  resetTime: Date;\r\n}\r\n\r\n/**\r\n * API request metadata\r\n */\r\nexport interface RequestMetadata {\r\n  startTime: number;\r\n  endTime?: number;\r\n  requestId: string;\r\n  rateLimitInfo?: RateLimitInfo;\r\n}\r\n\r\n/**\r\n * Trading fees information\r\n */\r\nexport interface TradingFees {\r\n  currency_pair: string;\r\n  maker_fee: string;\r\n  taker_fee: string;\r\n  gt_discount: boolean;\r\n  gt_maker_fee: string;\r\n  gt_taker_fee: string;\r\n  loan_fee: string;\r\n  point_type: string;\r\n}\r\n\r\n/**\r\n * Currency information\r\n */\r\nexport interface CurrencyInfo {\r\n  currency: string;\r\n  delisted: boolean;\r\n  withdraw_disabled: boolean;\r\n  withdraw_delayed: boolean;\r\n  deposit_disabled: boolean;\r\n  trade_disabled: boolean;\r\n}\r\n\r\n/**\r\n * Trading pair information\r\n */\r\nexport interface TradingPairInfo {\r\n  id: string;\r\n  base: string;\r\n  quote: string;\r\n  fee: string;\r\n  min_base_amount: string;\r\n  min_quote_amount: string;\r\n  amount_precision: number;\r\n  precision: number;\r\n  trade_status: 'tradable' | 'untradable';\r\n  sell_start: number;\r\n  buy_start: number;\r\n}\r\n\r\n/**\r\n * Position information (for margin/futures trading)\r\n */\r\nexport interface Position {\r\n  user: number;\r\n  contract: string;\r\n  size: number;\r\n  leverage: string;\r\n  risk_limit: string;\r\n  leverage_max: string;\r\n  maintenance_rate: string;\r\n  value: string;\r\n  margin: string;\r\n  entry_price: string;\r\n  liq_price: string;\r\n  mark_price: string;\r\n  unrealised_pnl: string;\r\n  realised_pnl: string;\r\n  history_pnl: string;\r\n  last_close_pnl: string;\r\n  realised_point: string;\r\n  history_point: string;\r\n  adl_ranking: number;\r\n  pending_orders: number;\r\n  close_order: any;\r\n  mode: string;\r\n  cross_leverage_limit: string;\r\n  update_time: number;\r\n}\r\n\r\n/**\r\n * Withdrawal request\r\n */\r\nexport interface WithdrawalRequest {\r\n  currency: string;\r\n  address: string;\r\n  amount: string;\r\n  memo?: string;\r\n  chain?: string;\r\n}\r\n\r\n/**\r\n * Withdrawal response\r\n */\r\nexport interface WithdrawalResponse {\r\n  id: string;\r\n  timestamp: string;\r\n  currency: string;\r\n  address: string;\r\n  txid: string;\r\n  amount: string;\r\n  memo: string;\r\n  status: 'DONE' | 'CANCEL' | 'REQUEST' | 'MANUAL' | 'BCODE' | 'EXTPEND' | 'FAIL' | 'INVALID' | 'VERIFY' | 'PROCES' | 'PEND' | 'DMOVE' | 'SPLITPEND';\r\n  chain: string;\r\n  fee: string;\r\n}\r\n\r\n/**\r\n * Deposit information\r\n */\r\nexport interface DepositInfo {\r\n  currency: string;\r\n  address: string;\r\n  memo: string;\r\n  chain: string;\r\n  multichain_addresses: Array<{\r\n    chain: string;\r\n    address: string;\r\n    memo: string;\r\n  }>;\r\n}\r\n\r\n/**\r\n * System status information\r\n */\r\nexport interface SystemStatus {\r\n  status: 'normal' | 'maintenance';\r\n  message?: string;\r\n  estimated_recovery_time?: number;\r\n}\r\n\r\n/**\r\n * API response wrapper\r\n */\r\nexport interface APIResponse<T = any> {\r\n  success: boolean;\r\n  data: T;\r\n  error?: APIError;\r\n  metadata?: RequestMetadata;\r\n}\r\n\r\n/**\r\n * Pagination parameters\r\n */\r\nexport interface PaginationParams {\r\n  page?: number;\r\n  limit?: number;\r\n  from?: number;\r\n  to?: number;\r\n  last_id?: string;\r\n}\r\n\r\n/**\r\n * Query parameters for various endpoints\r\n */\r\nexport interface MarketDataParams extends PaginationParams {\r\n  currency_pair?: string;\r\n  interval?: '10s' | '1m' | '5m' | '15m' | '30m' | '1h' | '4h' | '8h' | '1d' | '7d' | '30d';\r\n}\r\n\r\nexport interface TradeHistoryParams extends PaginationParams {\r\n  currency_pair?: string;\r\n  order_id?: string;\r\n  account?: string;\r\n}\r\n\r\nexport interface OrderHistoryParams extends PaginationParams {\r\n  currency_pair?: string;\r\n  status?: OrderStatus;\r\n  side?: OrderSide;\r\n  account?: string;\r\n}\r\n\r\n/**\r\n * WebSocket channel types\r\n */\r\nexport type WebSocketChannel = \r\n  | 'spot.tickers'\r\n  | 'spot.trades'\r\n  | 'spot.candlesticks'\r\n  | 'spot.order_book'\r\n  | 'spot.order_book_update'\r\n  | 'spot.orders'\r\n  | 'spot.usertrades'\r\n  | 'spot.balances';\r\n\r\n/**\r\n * WebSocket message types\r\n */\r\nexport interface WebSocketMessage {\r\n  time: number;\r\n  channel: WebSocketChannel;\r\n  event: 'subscribe' | 'unsubscribe' | 'update';\r\n  error?: APIError;\r\n  result?: any;\r\n}\r\n\r\n/**\r\n * Configuration for different trading environments\r\n */\r\nexport interface TradingEnvironment {\r\n  name: 'production' | 'testnet' | 'sandbox';\r\n  baseUrl: string;\r\n  wsUrl: string;\r\n  rateLimits: {\r\n    public: number;\r\n    private: number;\r\n    orders: number;\r\n  };\r\n}\r\n\r\n/**\r\n * Security configuration for API client\r\n */\r\nexport interface SecurityConfig {\r\n  enableSignatureValidation: boolean;\r\n  enableTimestampValidation: boolean;\r\n  timestampWindow: number; // in milliseconds\r\n  enableIPWhitelist: boolean;\r\n  allowedIPs: string[];\r\n  enableRateLimiting: boolean;\r\n  enableCircuitBreaker: boolean;\r\n}\r\n\r\n/**\r\n * Monitoring and alerting configuration\r\n */\r\nexport interface MonitoringConfig {\r\n  enableHealthChecks: boolean;\r\n  healthCheckInterval: number; // in milliseconds\r\n  enableMetricsCollection: boolean;\r\n  metricsRetentionPeriod: number; // in milliseconds\r\n  enableAlerting: boolean;\r\n  alertThresholds: {\r\n    errorRate: number; // percentage\r\n    responseTime: number; // in milliseconds\r\n    failureCount: number;\r\n  };\r\n}\r\n\r\n/**\r\n * Complete Gate.io client configuration\r\n */\r\nexport interface GateIOClientConfig {\r\n  environment: TradingEnvironment;\r\n  security: SecurityConfig;\r\n  monitoring: MonitoringConfig;\r\n  proxy?: {\r\n    host: string;\r\n    port: number;\r\n    protocol: 'http' | 'https';\r\n  };\r\n  timeout: number;\r\n  retryConfig: {\r\n    maxRetries: number;\r\n    baseDelay: number;\r\n    maxDelay: number;\r\n  };\r\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "630ef1a00e54cd9429a97e6bc42607b82b8496fa"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_ahougwrdj = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_ahougwrdj();
cov_ahougwrdj().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,