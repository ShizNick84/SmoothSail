{"version":3,"names":["cov_uzcmlkyo7","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","winston_1","__importDefault","require","winston_daily_rotate_file_1","path_1","fs_1","Logger","winston","auditLogger","securityLogger","tradingLogger","SENSITIVE_PATTERNS","constructor","ensureLogDirectories","createMainLogger","createAuditLogger","createSecurityLogger","createTradingLogger","logDirs","process","env","LOG_DIR","AUDIT_LOG_DIR","SECURITY_LOG_DIR","dir","existsSync","mkdirSync","recursive","mode","default","createLogger","level","LOG_LEVEL","format","combine","timestamp","errors","stack","json","printf","formatLogMessage","bind","transports","Console","colorize","simple","formatConsoleMessage","filename","resolve","datePattern","maxSize","maxFiles","zippedArchive","TRADING_LOG_LEVEL","info","message","meta","sanitizedMessage","sanitizeSensitiveData","sanitizedMeta","JSON","stringify","parse","output","toUpperCase","Object","keys","length","data","sanitized","pattern","replace","match","group1","maskedValue","repeat","Math","min","debug","enrichMetadata","warn","error","Error","audit","auditEntry","enrichedEntry","Date","auditId","generateAuditId","security","eventType","securityMeta","securityLevel","classification","toISOString","trading","operation","tradingMeta","pid","hostname","nodeVersion","environment","NODE_ENV","now","toString","random","substring","getStats","mainLogger","exports","logger"],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\core\\logging\\logger.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * AI CRYPTO TRADING AGENT - COMPREHENSIVE LOGGING SYSTEM\r\n * =============================================================================\r\n * \r\n * This module provides a comprehensive logging system with security-focused\r\n * features for the AI crypto trading agent. All trading operations, security\r\n * events, and system activities are logged with appropriate detail levels.\r\n * \r\n * CRITICAL SECURITY NOTICE:\r\n * This logging system handles sensitive financial and security data.\r\n * All logs must be protected and never expose sensitive information.\r\n * \r\n * Features:\r\n * - Multiple log levels with appropriate filtering\r\n * - Automatic log rotation and archival\r\n * - Security-aware log sanitization\r\n * - Structured logging with JSON format\r\n * - Separate log files for different components\r\n * - Audit trail capabilities\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport winston from 'winston';\r\nimport DailyRotateFile from 'winston-daily-rotate-file';\r\nimport { resolve } from 'path';\r\nimport { existsSync, mkdirSync } from 'fs';\r\n\r\n/**\r\n * Interface for log metadata\r\n * Provides structured context for log entries\r\n */\r\nexport interface LogMetadata {\r\n  /** Component that generated the log */\r\n  component?: string;\r\n  /** Trading pair if applicable */\r\n  symbol?: string;\r\n  /** User ID if applicable */\r\n  userId?: string;\r\n  /** Session ID for tracking */\r\n  sessionId?: string;\r\n  /** Request ID for API calls */\r\n  requestId?: string;\r\n  /** Additional context data */\r\n  context?: Record<string, any>;\r\n  /** Security classification */\r\n  classification?: 'PUBLIC' | 'INTERNAL' | 'CONFIDENTIAL' | 'RESTRICTED';\r\n}\r\n\r\n/**\r\n * Interface for audit log entries\r\n * Specialized structure for security and compliance logging\r\n */\r\nexport interface AuditLogEntry {\r\n  /** Unique audit event ID */\r\n  auditId: string;\r\n  /** Type of audit event */\r\n  eventType: string;\r\n  /** User or system that performed the action */\r\n  actor: string;\r\n  /** Resource that was affected */\r\n  resource: string;\r\n  /** Action that was performed */\r\n  action: string;\r\n  /** Result of the action */\r\n  result: 'SUCCESS' | 'FAILURE' | 'PARTIAL';\r\n  /** IP address of the actor */\r\n  ipAddress?: string;\r\n  /** Additional audit data */\r\n  auditData?: Record<string, any>;\r\n  /** Timestamp of the event */\r\n  timestamp: Date;\r\n}\r\n\r\n/**\r\n * Comprehensive logging service for the AI crypto trading agent\r\n * Provides secure, structured logging with automatic rotation and sanitization\r\n */\r\nclass Logger {\r\n  private winston: winston.Logger;\r\n  private auditLogger: winston.Logger;\r\n  private securityLogger: winston.Logger;\r\n  private tradingLogger: winston.Logger;\r\n  \r\n  /** Sensitive data patterns to sanitize from logs */\r\n  private static readonly SENSITIVE_PATTERNS = [\r\n    /api[_-]?key[\"\\s]*[:=][\"\\s]*([^\"\\s,}]+)/gi,\r\n    /secret[\"\\s]*[:=][\"\\s]*([^\"\\s,}]+)/gi,\r\n    /password[\"\\s]*[:=][\"\\s]*([^\"\\s,}]+)/gi,\r\n    /token[\"\\s]*[:=][\"\\s]*([^\"\\s,}]+)/gi,\r\n    /authorization[\"\\s]*[:=][\"\\s]*([^\"\\s,}]+)/gi,\r\n    /private[_-]?key[\"\\s]*[:=][\"\\s]*([^\"\\s,}]+)/gi,\r\n    /\\b[A-Za-z0-9]{32,}\\b/g, // Potential API keys or hashes\r\n  ];\r\n\r\n  constructor() {\r\n    // Ensure log directories exist\r\n    this.ensureLogDirectories();\r\n    \r\n    // Initialize main logger\r\n    this.winston = this.createMainLogger();\r\n    \r\n    // Initialize specialized loggers\r\n    this.auditLogger = this.createAuditLogger();\r\n    this.securityLogger = this.createSecurityLogger();\r\n    this.tradingLogger = this.createTradingLogger();\r\n  }\r\n\r\n  /**\r\n   * Ensure all required log directories exist\r\n   * Creates directories with appropriate permissions\r\n   */\r\n  private ensureLogDirectories(): void {\r\n    const logDirs = [\r\n      process.env.LOG_DIR || './logs',\r\n      process.env.AUDIT_LOG_DIR || './logs/audit',\r\n      process.env.SECURITY_LOG_DIR || './logs/security',\r\n      './logs/trading'\r\n    ];\r\n\r\n    for (const dir of logDirs) {\r\n      if (!existsSync(dir)) {\r\n        mkdirSync(dir, { recursive: true, mode: 0o750 });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create the main application logger\r\n   * Handles general application logging with rotation\r\n   * \r\n   * @returns winston.Logger Configured main logger\r\n   */\r\n  private createMainLogger(): winston.Logger {\r\n    return winston.createLogger({\r\n      level: process.env.LOG_LEVEL || 'info',\r\n      format: winston.format.combine(\r\n        winston.format.timestamp(),\r\n        winston.format.errors({ stack: true }),\r\n        winston.format.json(),\r\n        winston.format.printf(this.formatLogMessage.bind(this))\r\n      ),\r\n      transports: [\r\n        // Console output for development\r\n        new winston.transports.Console({\r\n          format: winston.format.combine(\r\n            winston.format.colorize(),\r\n            winston.format.simple(),\r\n            winston.format.printf(this.formatConsoleMessage.bind(this))\r\n          )\r\n        }),\r\n        \r\n        // Daily rotating file for general logs\r\n        new DailyRotateFile({\r\n          filename: resolve(process.env.LOG_DIR || './logs', 'application-%DATE%.log'),\r\n          datePattern: 'YYYY-MM-DD',\r\n          maxSize: '100m',\r\n          maxFiles: '30d',\r\n          zippedArchive: true,\r\n          format: winston.format.combine(\r\n            winston.format.timestamp(),\r\n            winston.format.json()\r\n          )\r\n        }),\r\n        \r\n        // Error-only log file\r\n        new DailyRotateFile({\r\n          filename: resolve(process.env.LOG_DIR || './logs', 'error-%DATE%.log'),\r\n          datePattern: 'YYYY-MM-DD',\r\n          level: 'error',\r\n          maxSize: '100m',\r\n          maxFiles: '90d',\r\n          zippedArchive: true\r\n        })\r\n      ]\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create specialized audit logger for compliance and security\r\n   * Maintains tamper-evident audit trails\r\n   * \r\n   * @returns winston.Logger Configured audit logger\r\n   */\r\n  private createAuditLogger(): winston.Logger {\r\n    return winston.createLogger({\r\n      level: 'info',\r\n      format: winston.format.combine(\r\n        winston.format.timestamp(),\r\n        winston.format.json()\r\n      ),\r\n      transports: [\r\n        new DailyRotateFile({\r\n          filename: resolve(process.env.AUDIT_LOG_DIR || './logs/audit', 'audit-%DATE%.log'),\r\n          datePattern: 'YYYY-MM-DD',\r\n          maxSize: '50m',\r\n          maxFiles: '365d', // Keep audit logs for 1 year\r\n          zippedArchive: true\r\n        })\r\n      ]\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create specialized security logger for threat monitoring\r\n   * Logs all security-related events and incidents\r\n   * \r\n   * @returns winston.Logger Configured security logger\r\n   */\r\n  private createSecurityLogger(): winston.Logger {\r\n    return winston.createLogger({\r\n      level: 'debug',\r\n      format: winston.format.combine(\r\n        winston.format.timestamp(),\r\n        winston.format.json()\r\n      ),\r\n      transports: [\r\n        new DailyRotateFile({\r\n          filename: resolve(process.env.SECURITY_LOG_DIR || './logs/security', 'security-%DATE%.log'),\r\n          datePattern: 'YYYY-MM-DD',\r\n          maxSize: '50m',\r\n          maxFiles: '365d', // Keep security logs for 1 year\r\n          zippedArchive: true\r\n        })\r\n      ]\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create specialized trading logger for financial operations\r\n   * Logs all trading activities and market data\r\n   * \r\n   * @returns winston.Logger Configured trading logger\r\n   */\r\n  private createTradingLogger(): winston.Logger {\r\n    return winston.createLogger({\r\n      level: process.env.TRADING_LOG_LEVEL || 'info',\r\n      format: winston.format.combine(\r\n        winston.format.timestamp(),\r\n        winston.format.json()\r\n      ),\r\n      transports: [\r\n        new DailyRotateFile({\r\n          filename: resolve('./logs/trading', 'trading-%DATE%.log'),\r\n          datePattern: 'YYYY-MM-DD',\r\n          maxSize: '100m',\r\n          maxFiles: '90d', // Keep trading logs for 90 days\r\n          zippedArchive: true\r\n        })\r\n      ]\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Format log messages with sanitization\r\n   * Removes sensitive data and adds structured formatting\r\n   * \r\n   * @param info - Winston log info object\r\n   * @returns string Formatted log message\r\n   */\r\n  private formatLogMessage(info: winston.Logform.TransformableInfo): string {\r\n    const { timestamp, level, message, ...meta } = info;\r\n    \r\n    // Sanitize the message and metadata\r\n    const sanitizedMessage = this.sanitizeSensitiveData(message);\r\n    const sanitizedMeta = this.sanitizeSensitiveData(JSON.stringify(meta));\r\n    \r\n    return JSON.stringify({\r\n      timestamp,\r\n      level,\r\n      message: sanitizedMessage,\r\n      ...JSON.parse(sanitizedMeta)\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Format console messages for development\r\n   * Provides readable console output with colors\r\n   * \r\n   * @param info - Winston log info object\r\n   * @returns string Formatted console message\r\n   */\r\n  private formatConsoleMessage(info: winston.Logform.TransformableInfo): string {\r\n    const { timestamp, level, message, ...meta } = info;\r\n    const sanitizedMessage = this.sanitizeSensitiveData(message);\r\n    \r\n    let output = `${timestamp} [${level.toUpperCase()}]: ${sanitizedMessage}`;\r\n    \r\n    if (Object.keys(meta).length > 0) {\r\n      const sanitizedMeta = this.sanitizeSensitiveData(JSON.stringify(meta, null, 2));\r\n      output += `\\n${sanitizedMeta}`;\r\n    }\r\n    \r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Sanitize sensitive data from log messages\r\n   * Replaces sensitive patterns with masked values\r\n   * \r\n   * @param data - Data to sanitize (string or object)\r\n   * @returns string Sanitized data\r\n   */\r\n  private sanitizeSensitiveData(data: any): string {\r\n    if (typeof data !== 'string') {\r\n      data = JSON.stringify(data);\r\n    }\r\n    \r\n    let sanitized = data;\r\n    \r\n    // Replace sensitive patterns with masked values\r\n    for (const pattern of Logger.SENSITIVE_PATTERNS) {\r\n      sanitized = sanitized.replace(pattern, (match, group1) => {\r\n        if (group1) {\r\n          const maskedValue = '*'.repeat(Math.min(group1.length, 8));\r\n          return match.replace(group1, maskedValue);\r\n        }\r\n        return '***REDACTED***';\r\n      });\r\n    }\r\n    \r\n    return sanitized;\r\n  }\r\n\r\n  /**\r\n   * Log debug messages\r\n   * Used for detailed diagnostic information\r\n   * \r\n   * @param message - Log message\r\n   * @param meta - Additional metadata\r\n   */\r\n  public debug(message: string, meta?: LogMetadata): void {\r\n    this.winston.debug(message, this.enrichMetadata(meta));\r\n  }\r\n\r\n  /**\r\n   * Log info messages\r\n   * Used for general operational information\r\n   * \r\n   * @param message - Log message\r\n   * @param meta - Additional metadata\r\n   */\r\n  public info(message: string, meta?: LogMetadata): void {\r\n    this.winston.info(message, this.enrichMetadata(meta));\r\n  }\r\n\r\n  /**\r\n   * Log warning messages\r\n   * Used for potentially problematic situations\r\n   * \r\n   * @param message - Log message\r\n   * @param meta - Additional metadata\r\n   */\r\n  public warn(message: string, meta?: LogMetadata): void {\r\n    this.winston.warn(message, this.enrichMetadata(meta));\r\n  }\r\n\r\n  /**\r\n   * Log error messages\r\n   * Used for error conditions and exceptions\r\n   * \r\n   * @param message - Log message\r\n   * @param error - Error object or additional metadata\r\n   */\r\n  public error(message: string, error?: Error | LogMetadata): void {\r\n    let meta: LogMetadata = {};\r\n    \r\n    if (error instanceof Error) {\r\n      meta = {\r\n        error: {\r\n          name: error.name,\r\n          message: error.message,\r\n          stack: error.stack\r\n        }\r\n      };\r\n    } else if (error) {\r\n      meta = error;\r\n    }\r\n    \r\n    this.winston.error(message, this.enrichMetadata(meta));\r\n  }\r\n\r\n  /**\r\n   * Log audit events for compliance and security\r\n   * Creates tamper-evident audit trail entries\r\n   * \r\n   * @param auditEntry - Structured audit log entry\r\n   */\r\n  public audit(auditEntry: AuditLogEntry): void {\r\n    const enrichedEntry = {\r\n      ...auditEntry,\r\n      timestamp: auditEntry.timestamp || new Date(),\r\n      auditId: auditEntry.auditId || this.generateAuditId()\r\n    };\r\n    \r\n    this.auditLogger.info('AUDIT_EVENT', enrichedEntry);\r\n  }\r\n\r\n  /**\r\n   * Log security events and incidents\r\n   * Specialized logging for security monitoring\r\n   * \r\n   * @param eventType - Type of security event\r\n   * @param message - Security event message\r\n   * @param meta - Security event metadata\r\n   */\r\n  public security(eventType: string, message: string, meta?: LogMetadata): void {\r\n    const securityMeta = {\r\n      ...this.enrichMetadata(meta),\r\n      eventType,\r\n      securityLevel: meta?.classification || 'INTERNAL',\r\n      timestamp: new Date().toISOString()\r\n    };\r\n    \r\n    this.securityLogger.info(message, securityMeta);\r\n  }\r\n\r\n  /**\r\n   * Log trading operations and market data\r\n   * Specialized logging for financial operations\r\n   * \r\n   * @param operation - Trading operation type\r\n   * @param message - Trading message\r\n   * @param meta - Trading metadata\r\n   */\r\n  public trading(operation: string, message: string, meta?: LogMetadata): void {\r\n    const tradingMeta = {\r\n      ...this.enrichMetadata(meta),\r\n      operation,\r\n      timestamp: new Date().toISOString()\r\n    };\r\n    \r\n    this.tradingLogger.info(message, tradingMeta);\r\n  }\r\n\r\n  /**\r\n   * Enrich metadata with common fields\r\n   * Adds standard fields to all log entries\r\n   * \r\n   * @param meta - Original metadata\r\n   * @returns LogMetadata Enriched metadata\r\n   */\r\n  private enrichMetadata(meta?: LogMetadata): LogMetadata {\r\n    return {\r\n      ...meta,\r\n      pid: process.pid,\r\n      hostname: require('os').hostname(),\r\n      nodeVersion: process.version,\r\n      environment: process.env.NODE_ENV || 'development'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generate unique audit ID\r\n   * Creates a unique identifier for audit trail entries\r\n   * \r\n   * @returns string Unique audit ID\r\n   */\r\n  private generateAuditId(): string {\r\n    const timestamp = Date.now().toString(36);\r\n    const random = Math.random().toString(36).substring(2);\r\n    return `audit_${timestamp}_${random}`;\r\n  }\r\n\r\n  /**\r\n   * Get logger statistics and health information\r\n   * Returns current logging status for monitoring\r\n   * \r\n   * @returns Object containing logger statistics\r\n   */\r\n  public getStats(): {\r\n    mainLogger: any;\r\n    auditLogger: any;\r\n    securityLogger: any;\r\n    tradingLogger: any;\r\n    timestamp: number;\r\n  } {\r\n    return {\r\n      mainLogger: {\r\n        level: this.winston.level,\r\n        transports: this.winston.transports.length\r\n      },\r\n      auditLogger: {\r\n        level: this.auditLogger.level,\r\n        transports: this.auditLogger.transports.length\r\n      },\r\n      securityLogger: {\r\n        level: this.securityLogger.level,\r\n        transports: this.securityLogger.transports.length\r\n      },\r\n      tradingLogger: {\r\n        level: this.tradingLogger.level,\r\n        transports: this.tradingLogger.transports.length\r\n      },\r\n      timestamp: Date.now()\r\n    };\r\n  }\r\n}\r\n\r\n// Create and export singleton logger instance\r\nexport const logger = new Logger();\r\n\r\n// Export the Logger class for tests and custom instances\r\nexport { Logger };\r\n\r\n// Export types for use in other modules\r\nexport type { LogMetadata, AuditLogEntry };\r\n\r\n// =============================================================================\r\n// LOGGING SECURITY NOTES\r\n// =============================================================================\r\n// 1. All sensitive data is automatically sanitized before logging\r\n// 2. Audit logs are kept for 1 year for compliance requirements\r\n// 3. Security logs are kept for 1 year for incident investigation\r\n// 4. Log files are automatically rotated and compressed\r\n// 5. Log directories have restricted permissions (750)\r\n// 6. Never manually log sensitive information like API keys or passwords\r\n// 7. Use appropriate log levels to control information exposure\r\n// 8. Monitor log files for unauthorized access or tampering\r\n// ============================================================================="],"mappings":"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","ignoreList":[]}