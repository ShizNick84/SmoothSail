feca1a1d47b52e80266f63baa2654153
"use strict";

/**
 * =============================================================================
 * AI CRYPTO TRADING AGENT - MILITARY-GRADE KEY MANAGEMENT SERVICE
 * =============================================================================
 *
 * This service provides secure key management capabilities for the AI crypto
 * trading agent. It handles encryption key generation, rotation, storage, and
 * lifecycle management with military-grade security standards.
 *
 * CRITICAL SECURITY NOTICE:
 * This service protects the keys that secure access to trading capital and
 * sensitive financial data. Any compromise of this service could result in
 * total loss of funds. All operations must be audited and monitored.
 *
 * Security Features:
 * - Hardware-based key generation when available
 * - Automatic key rotation with configurable intervals
 * - Secure key storage with multiple encryption layers
 * - Key escrow and recovery capabilities
 * - Comprehensive audit logging of all key operations
 *
 * @author AI Crypto Trading System
 * @version 1.0.0
 * @license PROPRIETARY
 * =============================================================================
 */
/* istanbul ignore next */
function cov_2d7cimrxhs() {
  var path = "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\key-manager.ts";
  var hash = "5d367bddf85c7b055b3865b84acff3977bbc6bd0";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\key-manager.ts",
    statementMap: {
      "0": {
        start: {
          line: 28,
          column: 0
        },
        end: {
          line: 28,
          column: 62
        }
      },
      "1": {
        start: {
          line: 29,
          column: 0
        },
        end: {
          line: 29,
          column: 87
        }
      },
      "2": {
        start: {
          line: 30,
          column: 17
        },
        end: {
          line: 30,
          column: 34
        }
      },
      "3": {
        start: {
          line: 31,
          column: 29
        },
        end: {
          line: 31,
          column: 69
        }
      },
      "4": {
        start: {
          line: 32,
          column: 17
        },
        end: {
          line: 32,
          column: 49
        }
      },
      "5": {
        start: {
          line: 33,
          column: 13
        },
        end: {
          line: 33,
          column: 26
        }
      },
      "6": {
        start: {
          line: 34,
          column: 15
        },
        end: {
          line: 34,
          column: 30
        }
      },
      "7": {
        start: {
          line: 40,
          column: 0
        },
        end: {
          line: 48,
          column: 48
        }
      },
      "8": {
        start: {
          line: 41,
          column: 4
        },
        end: {
          line: 41,
          column: 33
        }
      },
      "9": {
        start: {
          line: 42,
          column: 4
        },
        end: {
          line: 42,
          column: 49
        }
      },
      "10": {
        start: {
          line: 43,
          column: 4
        },
        end: {
          line: 43,
          column: 35
        }
      },
      "11": {
        start: {
          line: 44,
          column: 4
        },
        end: {
          line: 44,
          column: 37
        }
      },
      "12": {
        start: {
          line: 45,
          column: 4
        },
        end: {
          line: 45,
          column: 33
        }
      },
      "13": {
        start: {
          line: 46,
          column: 4
        },
        end: {
          line: 46,
          column: 31
        }
      },
      "14": {
        start: {
          line: 47,
          column: 4
        },
        end: {
          line: 47,
          column: 47
        }
      },
      "15": {
        start: {
          line: 54,
          column: 0
        },
        end: {
          line: 60,
          column: 54
        }
      },
      "16": {
        start: {
          line: 55,
          column: 4
        },
        end: {
          line: 55,
          column: 35
        }
      },
      "17": {
        start: {
          line: 56,
          column: 4
        },
        end: {
          line: 56,
          column: 55
        }
      },
      "18": {
        start: {
          line: 57,
          column: 4
        },
        end: {
          line: 57,
          column: 43
        }
      },
      "19": {
        start: {
          line: 58,
          column: 4
        },
        end: {
          line: 58,
          column: 37
        }
      },
      "20": {
        start: {
          line: 59,
          column: 4
        },
        end: {
          line: 59,
          column: 45
        }
      },
      "21": {
        start: {
          line: 69,
          column: 15
        },
        end: {
          line: 69,
          column: 24
        }
      },
      "22": {
        start: {
          line: 71,
          column: 39
        },
        end: {
          line: 102,
          column: 5
        }
      },
      "23": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 105,
          column: 73
        }
      },
      "24": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 106,
          column: 36
        }
      },
      "25": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 108,
          column: 42
        }
      },
      "26": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 134,
          column: 9
        }
      },
      "27": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 119,
          column: 13
        }
      },
      "28": {
        start: {
          line: 117,
          column: 16
        },
        end: {
          line: 117,
          column: 91
        }
      },
      "29": {
        start: {
          line: 118,
          column: 16
        },
        end: {
          line: 118,
          column: 104
        }
      },
      "30": {
        start: {
          line: 121,
          column: 26
        },
        end: {
          line: 121,
          column: 69
        }
      },
      "31": {
        start: {
          line: 122,
          column: 25
        },
        end: {
          line: 122,
          column: 56
        }
      },
      "32": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 129,
          column: 13
        }
      },
      "33": {
        start: {
          line: 124,
          column: 16
        },
        end: {
          line: 128,
          column: 19
        }
      },
      "34": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 132,
          column: 80
        }
      },
      "35": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 133,
          column: 65
        }
      },
      "36": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 196,
          column: 9
        }
      },
      "37": {
        start: {
          line: 148,
          column: 26
        },
        end: {
          line: 148,
          column: 53
        }
      },
      "38": {
        start: {
          line: 150,
          column: 29
        },
        end: {
          line: 150,
          column: 41
        }
      },
      "39": {
        start: {
          line: 151,
          column: 30
        },
        end: {
          line: 151,
          column: 65
        }
      },
      "40": {
        start: {
          line: 153,
          column: 29
        },
        end: {
          line: 162,
          column: 13
        }
      },
      "41": {
        start: {
          line: 164,
          column: 27
        },
        end: {
          line: 164,
          column: 58
        }
      },
      "42": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 167,
          column: 13
        }
      },
      "43": {
        start: {
          line: 166,
          column: 16
        },
        end: {
          line: 166,
          column: 87
        }
      },
      "44": {
        start: {
          line: 169,
          column: 12
        },
        end: {
          line: 169,
          column: 60
        }
      },
      "45": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 171,
          column: 67
        }
      },
      "46": {
        start: {
          line: 173,
          column: 12
        },
        end: {
          line: 179,
          column: 15
        }
      },
      "47": {
        start: {
          line: 181,
          column: 12
        },
        end: {
          line: 190,
          column: 15
        }
      },
      "48": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 191,
          column: 25
        }
      },
      "49": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 194,
          column: 69
        }
      },
      "50": {
        start: {
          line: 195,
          column: 12
        },
        end: {
          line: 195,
          column: 68
        }
      },
      "51": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 230,
          column: 9
        }
      },
      "52": {
        start: {
          line: 208,
          column: 27
        },
        end: {
          line: 208,
          column: 51
        }
      },
      "53": {
        start: {
          line: 209,
          column: 12
        },
        end: {
          line: 214,
          column: 13
        }
      },
      "54": {
        start: {
          line: 211,
          column: 16
        },
        end: {
          line: 211,
          column: 45
        }
      },
      "55": {
        start: {
          line: 212,
          column: 16
        },
        end: {
          line: 212,
          column: 69
        }
      },
      "56": {
        start: {
          line: 213,
          column: 16
        },
        end: {
          line: 213,
          column: 30
        }
      },
      "57": {
        start: {
          line: 216,
          column: 28
        },
        end: {
          line: 216,
          column: 53
        }
      },
      "58": {
        start: {
          line: 217,
          column: 12
        },
        end: {
          line: 219,
          column: 13
        }
      },
      "59": {
        start: {
          line: 218,
          column: 16
        },
        end: {
          line: 218,
          column: 28
        }
      },
      "60": {
        start: {
          line: 221,
          column: 12
        },
        end: {
          line: 221,
          column: 42
        }
      },
      "61": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 222,
          column: 66
        }
      },
      "62": {
        start: {
          line: 224,
          column: 12
        },
        end: {
          line: 224,
          column: 46
        }
      },
      "63": {
        start: {
          line: 225,
          column: 12
        },
        end: {
          line: 225,
          column: 27
        }
      },
      "64": {
        start: {
          line: 228,
          column: 12
        },
        end: {
          line: 228,
          column: 68
        }
      },
      "65": {
        start: {
          line: 229,
          column: 12
        },
        end: {
          line: 229,
          column: 68
        }
      },
      "66": {
        start: {
          line: 240,
          column: 8
        },
        end: {
          line: 277,
          column: 9
        }
      },
      "67": {
        start: {
          line: 242,
          column: 31
        },
        end: {
          line: 242,
          column: 55
        }
      },
      "68": {
        start: {
          line: 243,
          column: 12
        },
        end: {
          line: 245,
          column: 13
        }
      },
      "69": {
        start: {
          line: 244,
          column: 16
        },
        end: {
          line: 244,
          column: 59
        }
      },
      "70": {
        start: {
          line: 247,
          column: 29
        },
        end: {
          line: 247,
          column: 139
        }
      },
      "71": {
        start: {
          line: 249,
          column: 12
        },
        end: {
          line: 249,
          column: 62
        }
      },
      "72": {
        start: {
          line: 250,
          column: 12
        },
        end: {
          line: 250,
          column: 57
        }
      },
      "73": {
        start: {
          line: 251,
          column: 12
        },
        end: {
          line: 251,
          column: 69
        }
      },
      "74": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 253,
          column: 40
        }
      },
      "75": {
        start: {
          line: 255,
          column: 12
        },
        end: {
          line: 260,
          column: 15
        }
      },
      "76": {
        start: {
          line: 262,
          column: 12
        },
        end: {
          line: 271,
          column: 15
        }
      },
      "77": {
        start: {
          line: 272,
          column: 12
        },
        end: {
          line: 272,
          column: 28
        }
      },
      "78": {
        start: {
          line: 275,
          column: 12
        },
        end: {
          line: 275,
          column: 67
        }
      },
      "79": {
        start: {
          line: 276,
          column: 12
        },
        end: {
          line: 276,
          column: 66
        }
      },
      "80": {
        start: {
          line: 287,
          column: 8
        },
        end: {
          line: 322,
          column: 9
        }
      },
      "81": {
        start: {
          line: 289,
          column: 31
        },
        end: {
          line: 289,
          column: 55
        }
      },
      "82": {
        start: {
          line: 290,
          column: 12
        },
        end: {
          line: 292,
          column: 13
        }
      },
      "83": {
        start: {
          line: 291,
          column: 16
        },
        end: {
          line: 291,
          column: 59
        }
      },
      "84": {
        start: {
          line: 294,
          column: 12
        },
        end: {
          line: 294,
          column: 59
        }
      },
      "85": {
        start: {
          line: 295,
          column: 12
        },
        end: {
          line: 295,
          column: 69
        }
      },
      "86": {
        start: {
          line: 297,
          column: 12
        },
        end: {
          line: 297,
          column: 40
        }
      },
      "87": {
        start: {
          line: 299,
          column: 12
        },
        end: {
          line: 299,
          column: 79
        }
      },
      "88": {
        start: {
          line: 301,
          column: 12
        },
        end: {
          line: 306,
          column: 15
        }
      },
      "89": {
        start: {
          line: 308,
          column: 12
        },
        end: {
          line: 317,
          column: 15
        }
      },
      "90": {
        start: {
          line: 320,
          column: 12
        },
        end: {
          line: 320,
          column: 69
        }
      },
      "91": {
        start: {
          line: 321,
          column: 12
        },
        end: {
          line: 321,
          column: 66
        }
      },
      "92": {
        start: {
          line: 332,
          column: 8
        },
        end: {
          line: 352,
          column: 9
        }
      },
      "93": {
        start: {
          line: 333,
          column: 29
        },
        end: {
          line: 334,
          column: 56
        }
      },
      "94": {
        start: {
          line: 334,
          column: 34
        },
        end: {
          line: 334,
          column: 55
        }
      },
      "95": {
        start: {
          line: 335,
          column: 25
        },
        end: {
          line: 335,
          column: 27
        }
      },
      "96": {
        start: {
          line: 336,
          column: 12
        },
        end: {
          line: 346,
          column: 13
        }
      },
      "97": {
        start: {
          line: 337,
          column: 16
        },
        end: {
          line: 345,
          column: 17
        }
      },
      "98": {
        start: {
          line: 338,
          column: 36
        },
        end: {
          line: 338,
          column: 80
        }
      },
      "99": {
        start: {
          line: 339,
          column: 20
        },
        end: {
          line: 341,
          column: 21
        }
      },
      "100": {
        start: {
          line: 340,
          column: 24
        },
        end: {
          line: 340,
          column: 52
        }
      },
      "101": {
        start: {
          line: 344,
          column: 20
        },
        end: {
          line: 344,
          column: 92
        }
      },
      "102": {
        start: {
          line: 347,
          column: 12
        },
        end: {
          line: 347,
          column: 86
        }
      },
      "103": {
        start: {
          line: 347,
          column: 39
        },
        end: {
          line: 347,
          column: 84
        }
      },
      "104": {
        start: {
          line: 350,
          column: 12
        },
        end: {
          line: 350,
          column: 67
        }
      },
      "105": {
        start: {
          line: 351,
          column: 12
        },
        end: {
          line: 351,
          column: 65
        }
      },
      "106": {
        start: {
          line: 361,
          column: 8
        },
        end: {
          line: 392,
          column: 9
        }
      },
      "107": {
        start: {
          line: 362,
          column: 28
        },
        end: {
          line: 362,
          column: 49
        }
      },
      "108": {
        start: {
          line: 363,
          column: 40
        },
        end: {
          line: 363,
          column: 42
        }
      },
      "109": {
        start: {
          line: 364,
          column: 12
        },
        end: {
          line: 386,
          column: 13
        }
      },
      "110": {
        start: {
          line: 365,
          column: 16
        },
        end: {
          line: 367,
          column: 17
        }
      },
      "111": {
        start: {
          line: 366,
          column: 20
        },
        end: {
          line: 366,
          column: 29
        }
      },
      "112": {
        start: {
          line: 368,
          column: 31
        },
        end: {
          line: 368,
          column: 74
        }
      },
      "113": {
        start: {
          line: 369,
          column: 16
        },
        end: {
          line: 371,
          column: 17
        }
      },
      "114": {
        start: {
          line: 370,
          column: 20
        },
        end: {
          line: 370,
          column: 29
        }
      },
      "115": {
        start: {
          line: 372,
          column: 28
        },
        end: {
          line: 372,
          column: 38
        }
      },
      "116": {
        start: {
          line: 373,
          column: 31
        },
        end: {
          line: 373,
          column: 68
        }
      },
      "117": {
        start: {
          line: 374,
          column: 37
        },
        end: {
          line: 374,
          column: 106
        }
      },
      "118": {
        start: {
          line: 375,
          column: 42
        },
        end: {
          line: 375,
          column: 60
        }
      },
      "119": {
        start: {
          line: 377,
          column: 38
        },
        end: {
          line: 380,
          column: 90
        }
      },
      "120": {
        start: {
          line: 381,
          column: 16
        },
        end: {
          line: 385,
          column: 17
        }
      },
      "121": {
        start: {
          line: 382,
          column: 20
        },
        end: {
          line: 382,
          column: 68
        }
      },
      "122": {
        start: {
          line: 383,
          column: 20
        },
        end: {
          line: 383,
          column: 81
        }
      },
      "123": {
        start: {
          line: 384,
          column: 20
        },
        end: {
          line: 384,
          column: 58
        }
      },
      "124": {
        start: {
          line: 387,
          column: 12
        },
        end: {
          line: 387,
          column: 39
        }
      },
      "125": {
        start: {
          line: 390,
          column: 12
        },
        end: {
          line: 390,
          column: 81
        }
      },
      "126": {
        start: {
          line: 391,
          column: 12
        },
        end: {
          line: 391,
          column: 67
        }
      },
      "127": {
        start: {
          line: 403,
          column: 8
        },
        end: {
          line: 425,
          column: 9
        }
      },
      "128": {
        start: {
          line: 405,
          column: 33
        },
        end: {
          line: 405,
          column: 116
        }
      },
      "129": {
        start: {
          line: 407,
          column: 34
        },
        end: {
          line: 410,
          column: 30
        }
      },
      "130": {
        start: {
          line: 412,
          column: 33
        },
        end: {
          line: 417,
          column: 13
        }
      },
      "131": {
        start: {
          line: 419,
          column: 32
        },
        end: {
          line: 419,
          column: 88
        }
      },
      "132": {
        start: {
          line: 420,
          column: 12
        },
        end: {
          line: 420,
          column: 96
        }
      },
      "133": {
        start: {
          line: 423,
          column: 12
        },
        end: {
          line: 423,
          column: 67
        }
      },
      "134": {
        start: {
          line: 424,
          column: 12
        },
        end: {
          line: 424,
          column: 50
        }
      },
      "135": {
        start: {
          line: 435,
          column: 8
        },
        end: {
          line: 462,
          column: 9
        }
      },
      "136": {
        start: {
          line: 436,
          column: 32
        },
        end: {
          line: 436,
          column: 88
        }
      },
      "137": {
        start: {
          line: 437,
          column: 12
        },
        end: {
          line: 439,
          column: 13
        }
      },
      "138": {
        start: {
          line: 438,
          column: 16
        },
        end: {
          line: 438,
          column: 28
        }
      },
      "139": {
        start: {
          line: 441,
          column: 32
        },
        end: {
          line: 441,
          column: 75
        }
      },
      "140": {
        start: {
          line: 442,
          column: 33
        },
        end: {
          line: 442,
          column: 56
        }
      },
      "141": {
        start: {
          line: 444,
          column: 27
        },
        end: {
          line: 444,
          column: 110
        }
      },
      "142": {
        start: {
          line: 445,
          column: 30
        },
        end: {
          line: 445,
          column: 56
        }
      },
      "143": {
        start: {
          line: 447,
          column: 33
        },
        end: {
          line: 450,
          column: 30
        }
      },
      "144": {
        start: {
          line: 451,
          column: 12
        },
        end: {
          line: 453,
          column: 13
        }
      },
      "145": {
        start: {
          line: 452,
          column: 16
        },
        end: {
          line: 452,
          column: 69
        }
      },
      "146": {
        start: {
          line: 454,
          column: 12
        },
        end: {
          line: 457,
          column: 14
        }
      },
      "147": {
        start: {
          line: 460,
          column: 12
        },
        end: {
          line: 460,
          column: 66
        }
      },
      "148": {
        start: {
          line: 461,
          column: 12
        },
        end: {
          line: 461,
          column: 50
        }
      },
      "149": {
        start: {
          line: 472,
          column: 8
        },
        end: {
          line: 488,
          column: 9
        }
      },
      "150": {
        start: {
          line: 473,
          column: 28
        },
        end: {
          line: 473,
          column: 53
        }
      },
      "151": {
        start: {
          line: 474,
          column: 12
        },
        end: {
          line: 476,
          column: 13
        }
      },
      "152": {
        start: {
          line: 475,
          column: 16
        },
        end: {
          line: 475,
          column: 59
        }
      },
      "153": {
        start: {
          line: 478,
          column: 12
        },
        end: {
          line: 478,
          column: 62
        }
      },
      "154": {
        start: {
          line: 480,
          column: 27
        },
        end: {
          line: 480,
          column: 51
        }
      },
      "155": {
        start: {
          line: 481,
          column: 12
        },
        end: {
          line: 483,
          column: 13
        }
      },
      "156": {
        start: {
          line: 482,
          column: 16
        },
        end: {
          line: 482,
          column: 43
        }
      },
      "157": {
        start: {
          line: 486,
          column: 12
        },
        end: {
          line: 486,
          column: 77
        }
      },
      "158": {
        start: {
          line: 487,
          column: 12
        },
        end: {
          line: 487,
          column: 58
        }
      },
      "159": {
        start: {
          line: 498,
          column: 26
        },
        end: {
          line: 498,
          column: 49
        }
      },
      "160": {
        start: {
          line: 499,
          column: 23
        },
        end: {
          line: 499,
          column: 67
        }
      },
      "161": {
        start: {
          line: 500,
          column: 8
        },
        end: {
          line: 500,
          column: 51
        }
      },
      "162": {
        start: {
          line: 510,
          column: 8
        },
        end: {
          line: 510,
          column: 103
        }
      },
      "163": {
        start: {
          line: 510,
          column: 67
        },
        end: {
          line: 510,
          column: 93
        }
      },
      "164": {
        start: {
          line: 518,
          column: 8
        },
        end: {
          line: 543,
          column: 27
        }
      },
      "165": {
        start: {
          line: 519,
          column: 12
        },
        end: {
          line: 542,
          column: 13
        }
      },
      "166": {
        start: {
          line: 520,
          column: 44
        },
        end: {
          line: 520,
          column: 77
        }
      },
      "167": {
        start: {
          line: 521,
          column: 16
        },
        end: {
          line: 538,
          column: 17
        }
      },
      "168": {
        start: {
          line: 522,
          column: 20
        },
        end: {
          line: 525,
          column: 23
        }
      },
      "169": {
        start: {
          line: 524,
          column: 60
        },
        end: {
          line: 524,
          column: 98
        }
      },
      "170": {
        start: {
          line: 527,
          column: 20
        },
        end: {
          line: 537,
          column: 21
        }
      },
      "171": {
        start: {
          line: 528,
          column: 24
        },
        end: {
          line: 536,
          column: 25
        }
      },
      "172": {
        start: {
          line: 529,
          column: 28
        },
        end: {
          line: 535,
          column: 29
        }
      },
      "173": {
        start: {
          line: 530,
          column: 32
        },
        end: {
          line: 530,
          column: 72
        }
      },
      "174": {
        start: {
          line: 531,
          column: 32
        },
        end: {
          line: 531,
          column: 115
        }
      },
      "175": {
        start: {
          line: 534,
          column: 32
        },
        end: {
          line: 534,
          column: 126
        }
      },
      "176": {
        start: {
          line: 541,
          column: 16
        },
        end: {
          line: 541,
          column: 81
        }
      },
      "177": {
        start: {
          line: 552,
          column: 8
        },
        end: {
          line: 573,
          column: 9
        }
      },
      "178": {
        start: {
          line: 553,
          column: 28
        },
        end: {
          line: 553,
          column: 49
        }
      },
      "179": {
        start: {
          line: 554,
          column: 40
        },
        end: {
          line: 554,
          column: 73
        }
      },
      "180": {
        start: {
          line: 555,
          column: 31
        },
        end: {
          line: 555,
          column: 33
        }
      },
      "181": {
        start: {
          line: 556,
          column: 33
        },
        end: {
          line: 556,
          column: 35
        }
      },
      "182": {
        start: {
          line: 557,
          column: 12
        },
        end: {
          line: 560,
          column: 13
        }
      },
      "183": {
        start: {
          line: 558,
          column: 16
        },
        end: {
          line: 558,
          column: 77
        }
      },
      "184": {
        start: {
          line: 559,
          column: 16
        },
        end: {
          line: 559,
          column: 79
        }
      },
      "185": {
        start: {
          line: 561,
          column: 12
        },
        end: {
          line: 568,
          column: 14
        }
      },
      "186": {
        start: {
          line: 571,
          column: 12
        },
        end: {
          line: 571,
          column: 80
        }
      },
      "187": {
        start: {
          line: 572,
          column: 12
        },
        end: {
          line: 572,
          column: 64
        }
      },
      "188": {
        start: {
          line: 576,
          column: 0
        },
        end: {
          line: 576,
          column: 32
        }
      },
      "189": {
        start: {
          line: 578,
          column: 0
        },
        end: {
          line: 578,
          column: 38
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 40,
            column: 1
          },
          end: {
            line: 40,
            column: 2
          }
        },
        loc: {
          start: {
            line: 40,
            column: 20
          },
          end: {
            line: 48,
            column: 1
          }
        },
        line: 40
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 54,
            column: 1
          },
          end: {
            line: 54,
            column: 2
          }
        },
        loc: {
          start: {
            line: 54,
            column: 22
          },
          end: {
            line: 60,
            column: 1
          }
        },
        line: 54
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 103,
            column: 4
          },
          end: {
            line: 103,
            column: 5
          }
        },
        loc: {
          start: {
            line: 103,
            column: 18
          },
          end: {
            line: 109,
            column: 5
          }
        },
        line: 103
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 114,
            column: 4
          },
          end: {
            line: 114,
            column: 5
          }
        },
        loc: {
          start: {
            line: 114,
            column: 27
          },
          end: {
            line: 135,
            column: 5
          }
        },
        line: 114
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 145,
            column: 4
          },
          end: {
            line: 145,
            column: 5
          }
        },
        loc: {
          start: {
            line: 145,
            column: 56
          },
          end: {
            line: 197,
            column: 5
          }
        },
        line: 145
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 205,
            column: 4
          },
          end: {
            line: 205,
            column: 5
          }
        },
        loc: {
          start: {
            line: 205,
            column: 24
          },
          end: {
            line: 231,
            column: 5
          }
        },
        line: 205
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 239,
            column: 4
          },
          end: {
            line: 239,
            column: 5
          }
        },
        loc: {
          start: {
            line: 239,
            column: 27
          },
          end: {
            line: 278,
            column: 5
          }
        },
        line: 239
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 286,
            column: 4
          },
          end: {
            line: 286,
            column: 5
          }
        },
        loc: {
          start: {
            line: 286,
            column: 35
          },
          end: {
            line: 323,
            column: 5
          }
        },
        line: 286
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 331,
            column: 4
          },
          end: {
            line: 331,
            column: 5
          }
        },
        loc: {
          start: {
            line: 331,
            column: 28
          },
          end: {
            line: 353,
            column: 5
          }
        },
        line: 331
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 334,
            column: 24
          },
          end: {
            line: 334,
            column: 25
          }
        },
        loc: {
          start: {
            line: 334,
            column: 34
          },
          end: {
            line: 334,
            column: 55
          }
        },
        line: 334
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 347,
            column: 29
          },
          end: {
            line: 347,
            column: 30
          }
        },
        loc: {
          start: {
            line: 347,
            column: 39
          },
          end: {
            line: 347,
            column: 84
          }
        },
        line: 347
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 360,
            column: 4
          },
          end: {
            line: 360,
            column: 5
          }
        },
        loc: {
          start: {
            line: 360,
            column: 33
          },
          end: {
            line: 393,
            column: 5
          }
        },
        line: 360
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 402,
            column: 4
          },
          end: {
            line: 402,
            column: 5
          }
        },
        loc: {
          start: {
            line: 402,
            column: 47
          },
          end: {
            line: 426,
            column: 5
          }
        },
        line: 402
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 434,
            column: 4
          },
          end: {
            line: 434,
            column: 5
          }
        },
        loc: {
          start: {
            line: 434,
            column: 25
          },
          end: {
            line: 463,
            column: 5
          }
        },
        line: 434
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 471,
            column: 4
          },
          end: {
            line: 471,
            column: 5
          }
        },
        loc: {
          start: {
            line: 471,
            column: 45
          },
          end: {
            line: 489,
            column: 5
          }
        },
        line: 471
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 497,
            column: 4
          },
          end: {
            line: 497,
            column: 5
          }
        },
        loc: {
          start: {
            line: 497,
            column: 27
          },
          end: {
            line: 501,
            column: 5
          }
        },
        line: 497
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 509,
            column: 4
          },
          end: {
            line: 509,
            column: 5
          }
        },
        loc: {
          start: {
            line: 509,
            column: 31
          },
          end: {
            line: 511,
            column: 5
          }
        },
        line: 509
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 510,
            column: 57
          },
          end: {
            line: 510,
            column: 58
          }
        },
        loc: {
          start: {
            line: 510,
            column: 67
          },
          end: {
            line: 510,
            column: 93
          }
        },
        line: 510
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 516,
            column: 4
          },
          end: {
            line: 516,
            column: 5
          }
        },
        loc: {
          start: {
            line: 516,
            column: 33
          },
          end: {
            line: 544,
            column: 5
          }
        },
        line: 516
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 518,
            column: 20
          },
          end: {
            line: 518,
            column: 21
          }
        },
        loc: {
          start: {
            line: 518,
            column: 32
          },
          end: {
            line: 543,
            column: 9
          }
        },
        line: 518
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 524,
            column: 54
          },
          end: {
            line: 524,
            column: 55
          }
        },
        loc: {
          start: {
            line: 524,
            column: 60
          },
          end: {
            line: 524,
            column: 98
          }
        },
        line: 524
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 551,
            column: 4
          },
          end: {
            line: 551,
            column: 5
          }
        },
        loc: {
          start: {
            line: 551,
            column: 22
          },
          end: {
            line: 574,
            column: 5
          }
        },
        line: 551
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 48,
            column: 3
          },
          end: {
            line: 48,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 48,
            column: 3
          },
          end: {
            line: 48,
            column: 10
          }
        }, {
          start: {
            line: 48,
            column: 15
          },
          end: {
            line: 48,
            column: 45
          }
        }],
        line: 48
      },
      "1": {
        loc: {
          start: {
            line: 60,
            column: 3
          },
          end: {
            line: 60,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 60,
            column: 3
          },
          end: {
            line: 60,
            column: 12
          }
        }, {
          start: {
            line: 60,
            column: 17
          },
          end: {
            line: 60,
            column: 51
          }
        }],
        line: 60
      },
      "2": {
        loc: {
          start: {
            line: 116,
            column: 12
          },
          end: {
            line: 119,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 116,
            column: 12
          },
          end: {
            line: 119,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 116
      },
      "3": {
        loc: {
          start: {
            line: 123,
            column: 12
          },
          end: {
            line: 129,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 123,
            column: 12
          },
          end: {
            line: 129,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 123
      },
      "4": {
        loc: {
          start: {
            line: 145,
            column: 40
          },
          end: {
            line: 145,
            column: 54
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 145,
            column: 51
          },
          end: {
            line: 145,
            column: 54
          }
        }],
        line: 145
      },
      "5": {
        loc: {
          start: {
            line: 165,
            column: 12
          },
          end: {
            line: 167,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 165,
            column: 12
          },
          end: {
            line: 167,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 165
      },
      "6": {
        loc: {
          start: {
            line: 209,
            column: 12
          },
          end: {
            line: 214,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 209,
            column: 12
          },
          end: {
            line: 214,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 209
      },
      "7": {
        loc: {
          start: {
            line: 217,
            column: 12
          },
          end: {
            line: 219,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 217,
            column: 12
          },
          end: {
            line: 219,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 217
      },
      "8": {
        loc: {
          start: {
            line: 243,
            column: 12
          },
          end: {
            line: 245,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 243,
            column: 12
          },
          end: {
            line: 245,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 243
      },
      "9": {
        loc: {
          start: {
            line: 290,
            column: 12
          },
          end: {
            line: 292,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 290,
            column: 12
          },
          end: {
            line: 292,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 290
      },
      "10": {
        loc: {
          start: {
            line: 339,
            column: 20
          },
          end: {
            line: 341,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 339,
            column: 20
          },
          end: {
            line: 341,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 339
      },
      "11": {
        loc: {
          start: {
            line: 339,
            column: 24
          },
          end: {
            line: 339,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 339,
            column: 24
          },
          end: {
            line: 339,
            column: 31
          }
        }, {
          start: {
            line: 339,
            column: 36
          },
          end: {
            line: 339,
            column: 44
          }
        }, {
          start: {
            line: 339,
            column: 48
          },
          end: {
            line: 339,
            column: 84
          }
        }],
        line: 339
      },
      "12": {
        loc: {
          start: {
            line: 365,
            column: 16
          },
          end: {
            line: 367,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 365,
            column: 16
          },
          end: {
            line: 367,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 365
      },
      "13": {
        loc: {
          start: {
            line: 369,
            column: 16
          },
          end: {
            line: 371,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 369,
            column: 16
          },
          end: {
            line: 371,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 369
      },
      "14": {
        loc: {
          start: {
            line: 374,
            column: 37
          },
          end: {
            line: 374,
            column: 106
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 374,
            column: 37
          },
          end: {
            line: 374,
            column: 71
          }
        }, {
          start: {
            line: 374,
            column: 75
          },
          end: {
            line: 374,
            column: 106
          }
        }],
        line: 374
      },
      "15": {
        loc: {
          start: {
            line: 377,
            column: 38
          },
          end: {
            line: 380,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 377,
            column: 38
          },
          end: {
            line: 377,
            column: 60
          }
        }, {
          start: {
            line: 378,
            column: 20
          },
          end: {
            line: 378,
            column: 63
          }
        }, {
          start: {
            line: 379,
            column: 21
          },
          end: {
            line: 379,
            column: 36
          }
        }, {
          start: {
            line: 379,
            column: 40
          },
          end: {
            line: 379,
            column: 80
          }
        }, {
          start: {
            line: 380,
            column: 21
          },
          end: {
            line: 380,
            column: 45
          }
        }, {
          start: {
            line: 380,
            column: 49
          },
          end: {
            line: 380,
            column: 89
          }
        }],
        line: 377
      },
      "16": {
        loc: {
          start: {
            line: 381,
            column: 16
          },
          end: {
            line: 385,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 381,
            column: 16
          },
          end: {
            line: 385,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 381
      },
      "17": {
        loc: {
          start: {
            line: 437,
            column: 12
          },
          end: {
            line: 439,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 437,
            column: 12
          },
          end: {
            line: 439,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 437
      },
      "18": {
        loc: {
          start: {
            line: 451,
            column: 12
          },
          end: {
            line: 453,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 451,
            column: 12
          },
          end: {
            line: 453,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 451
      },
      "19": {
        loc: {
          start: {
            line: 474,
            column: 12
          },
          end: {
            line: 476,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 474,
            column: 12
          },
          end: {
            line: 476,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 474
      },
      "20": {
        loc: {
          start: {
            line: 481,
            column: 12
          },
          end: {
            line: 483,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 481,
            column: 12
          },
          end: {
            line: 483,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 481
      },
      "21": {
        loc: {
          start: {
            line: 510,
            column: 15
          },
          end: {
            line: 510,
            column: 102
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 510,
            column: 15
          },
          end: {
            line: 510,
            column: 94
          }
        }, {
          start: {
            line: 510,
            column: 98
          },
          end: {
            line: 510,
            column: 102
          }
        }],
        line: 510
      },
      "22": {
        loc: {
          start: {
            line: 521,
            column: 16
          },
          end: {
            line: 538,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 521,
            column: 16
          },
          end: {
            line: 538,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 521
      },
      "23": {
        loc: {
          start: {
            line: 528,
            column: 24
          },
          end: {
            line: 536,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 528,
            column: 24
          },
          end: {
            line: 536,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 528
      },
      "24": {
        loc: {
          start: {
            line: 558,
            column: 43
          },
          end: {
            line: 558,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 558,
            column: 43
          },
          end: {
            line: 558,
            column: 66
          }
        }, {
          start: {
            line: 558,
            column: 70
          },
          end: {
            line: 558,
            column: 71
          }
        }],
        line: 558
      },
      "25": {
        loc: {
          start: {
            line: 559,
            column: 44
          },
          end: {
            line: 559,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 559,
            column: 44
          },
          end: {
            line: 559,
            column: 68
          }
        }, {
          start: {
            line: 559,
            column: 72
          },
          end: {
            line: 559,
            column: 73
          }
        }],
        line: 559
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0, 0, 0, 0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\key-manager.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\security\\key-manager.ts"],
      sourcesContent: ["/**\r\n * =============================================================================\r\n * AI CRYPTO TRADING AGENT - MILITARY-GRADE KEY MANAGEMENT SERVICE\r\n * =============================================================================\r\n * \r\n * This service provides secure key management capabilities for the AI crypto\r\n * trading agent. It handles encryption key generation, rotation, storage, and\r\n * lifecycle management with military-grade security standards.\r\n * \r\n * CRITICAL SECURITY NOTICE:\r\n * This service protects the keys that secure access to trading capital and\r\n * sensitive financial data. Any compromise of this service could result in\r\n * total loss of funds. All operations must be audited and monitored.\r\n * \r\n * Security Features:\r\n * - Hardware-based key generation when available\r\n * - Automatic key rotation with configurable intervals\r\n * - Secure key storage with multiple encryption layers\r\n * - Key escrow and recovery capabilities\r\n * - Comprehensive audit logging of all key operations\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport { randomBytes, createHash, timingSafeEqual } from 'crypto';\r\nimport { encryptionService, EncryptedData } from '@/security/encryption-service';\r\nimport { logger } from '@/core/logging/logger';\r\nimport { existsSync, readFileSync, writeFileSync, mkdirSync } from 'fs';\r\nimport { resolve } from 'path';\r\n\r\n/**\r\n * Interface for key metadata\r\n * Contains information about key lifecycle and usage\r\n */\r\nexport interface KeyMetadata {\r\n  /** Unique key identifier */\r\n  keyId: string;\r\n  /** Key type (master, api, session, etc.) */\r\n  keyType: KeyType;\r\n  /** Key purpose description */\r\n  purpose: string;\r\n  /** Creation timestamp */\r\n  createdAt: Date;\r\n  /** Last rotation timestamp */\r\n  lastRotated?: Date;\r\n  /** Next scheduled rotation */\r\n  nextRotation?: Date;\r\n  /** Key status */\r\n  status: KeyStatus;\r\n  /** Key version for rotation tracking */\r\n  version: number;\r\n  /** Key strength in bits */\r\n  strength: number;\r\n  /** Usage counter */\r\n  usageCount: number;\r\n  /** Maximum allowed usage count */\r\n  maxUsage?: number;\r\n}\r\n\r\n/**\r\n * Enumeration of key types\r\n * Defines different categories of keys managed by the system\r\n */\r\nexport enum KeyType {\r\n  MASTER = 'master',\r\n  API_ENCRYPTION = 'api_encryption',\r\n  SESSION = 'session',\r\n  DATABASE = 'database',\r\n  BACKUP = 'backup',\r\n  AUDIT = 'audit',\r\n  COMMUNICATION = 'communication'\r\n}\r\n\r\n/**\r\n * Enumeration of key status values\r\n * Tracks the lifecycle state of each key\r\n */\r\nexport enum KeyStatus {\r\n  ACTIVE = 'active',\r\n  PENDING_ROTATION = 'pending_rotation',\r\n  DEPRECATED = 'deprecated',\r\n  REVOKED = 'revoked',\r\n  COMPROMISED = 'compromised'\r\n}\r\n\r\n/**\r\n * Interface for key rotation policy\r\n * Defines when and how keys should be rotated\r\n */\r\nexport interface KeyRotationPolicy {\r\n  /** Key type this policy applies to */\r\n  keyType: KeyType;\r\n  /** Rotation interval in milliseconds */\r\n  rotationInterval: number;\r\n  /** Maximum key age before forced rotation */\r\n  maxAge: number;\r\n  /** Maximum usage count before rotation */\r\n  maxUsage?: number;\r\n  /** Whether to rotate on security events */\r\n  rotateOnSecurityEvent: boolean;\r\n  /** Grace period for old key after rotation */\r\n  gracePeriod: number;\r\n}\r\n\r\n/**\r\n * Interface for key storage entry\r\n * Structure for persisting keys securely\r\n */\r\ninterface KeyStorageEntry {\r\n  /** Key metadata */\r\n  metadata: KeyMetadata;\r\n  /** Encrypted key data */\r\n  encryptedKey: EncryptedData;\r\n  /** Key integrity hash */\r\n  integrityHash: string;\r\n  /** Storage timestamp */\r\n  storedAt: Date;\r\n}\r\n\r\n/**\r\n * Military-grade key management service\r\n * Provides comprehensive key lifecycle management with security focus\r\n */\r\nexport class KeyManager {\r\n  /** Path to secure key storage directory */\r\n  private readonly keyStoragePath: string;\r\n  \r\n  /** In-memory key cache for performance */\r\n  private keyCache: Map<string, { key: Buffer; metadata: KeyMetadata }> = new Map();\r\n  \r\n  /** Default key rotation policies */\r\n  private static readonly DEFAULT_ROTATION_POLICIES: KeyRotationPolicy[] = [\r\n    {\r\n      keyType: KeyType.MASTER,\r\n      rotationInterval: 90 * 24 * 60 * 60 * 1000, // 90 days\r\n      maxAge: 365 * 24 * 60 * 60 * 1000, // 1 year\r\n      rotateOnSecurityEvent: true,\r\n      gracePeriod: 7 * 24 * 60 * 60 * 1000 // 7 days\r\n    },\r\n    {\r\n      keyType: KeyType.API_ENCRYPTION,\r\n      rotationInterval: 30 * 24 * 60 * 60 * 1000, // 30 days\r\n      maxAge: 90 * 24 * 60 * 60 * 1000, // 90 days\r\n      maxUsage: 1000000, // 1 million operations\r\n      rotateOnSecurityEvent: true,\r\n      gracePeriod: 24 * 60 * 60 * 1000 // 24 hours\r\n    },\r\n    {\r\n      keyType: KeyType.SESSION,\r\n      rotationInterval: 24 * 60 * 60 * 1000, // 24 hours\r\n      maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days\r\n      maxUsage: 10000, // 10k sessions\r\n      rotateOnSecurityEvent: true,\r\n      gracePeriod: 60 * 60 * 1000 // 1 hour\r\n    },\r\n    {\r\n      keyType: KeyType.DATABASE,\r\n      rotationInterval: 60 * 24 * 60 * 60 * 1000, // 60 days\r\n      maxAge: 180 * 24 * 60 * 60 * 1000, // 180 days\r\n      rotateOnSecurityEvent: true,\r\n      gracePeriod: 3 * 24 * 60 * 60 * 1000 // 3 days\r\n    }\r\n  ];\r\n\r\n  constructor() {\r\n    // Initialize key storage directory\r\n    this.keyStoragePath = resolve(process.cwd(), 'keys');\r\n    this.initializeKeyStorage();\r\n    \r\n    // Start key rotation monitoring\r\n    this.startKeyRotationMonitoring();\r\n  }\r\n\r\n  /**\r\n   * Initialize secure key storage directory\r\n   * Creates directory with restricted permissions if it doesn't exist\r\n   */\r\n  private initializeKeyStorage(): void {\r\n    try {\r\n      if (!existsSync(this.keyStoragePath)) {\r\n        mkdirSync(this.keyStoragePath, { recursive: true, mode: 0o700 });\r\n        logger.info('\uD83D\uDD10 Key storage directory created', { path: this.keyStoragePath });\r\n      }\r\n      \r\n      // Verify directory permissions\r\n      const stats = require('fs').statSync(this.keyStoragePath);\r\n      const mode = stats.mode & parseInt('777', 8);\r\n      \r\n      if (mode !== parseInt('700', 8)) {\r\n        logger.warn('\u26A0\uFE0F Key storage directory has incorrect permissions', { \r\n          path: this.keyStoragePath, \r\n          currentMode: mode.toString(8),\r\n          expectedMode: '700'\r\n        });\r\n      }\r\n      \r\n    } catch (error) {\r\n      logger.error('\u274C Failed to initialize key storage:', error);\r\n      throw new Error('Key storage initialization failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate a new cryptographically secure key\r\n   * Creates a new key with specified type and strength\r\n   * \r\n   * @param keyType - Type of key to generate\r\n   * @param purpose - Purpose description for the key\r\n   * @param strength - Key strength in bits (default: 256)\r\n   * @returns Promise<string> The generated key ID\r\n   */\r\n  public async generateKey(\r\n    keyType: KeyType,\r\n    purpose: string,\r\n    strength: number = 256\r\n  ): Promise<string> {\r\n    try {\r\n      // Generate unique key ID\r\n      const keyId = this.generateKeyId(keyType);\r\n      \r\n      // Generate cryptographically secure key\r\n      const keyBytes = strength / 8;\r\n      const keyBuffer = randomBytes(keyBytes);\r\n      \r\n      // Create key metadata\r\n      const metadata: KeyMetadata = {\r\n        keyId,\r\n        keyType,\r\n        purpose,\r\n        createdAt: new Date(),\r\n        status: KeyStatus.ACTIVE,\r\n        version: 1,\r\n        strength,\r\n        usageCount: 0\r\n      };\r\n      \r\n      // Set next rotation based on policy\r\n      const policy = this.getRotationPolicy(keyType);\r\n      if (policy) {\r\n        metadata.nextRotation = new Date(Date.now() + policy.rotationInterval);\r\n      }\r\n      \r\n      // Store key securely\r\n      await this.storeKey(keyId, keyBuffer, metadata);\r\n      \r\n      // Cache key for performance\r\n      this.keyCache.set(keyId, { key: keyBuffer, metadata });\r\n      \r\n      // Log key generation (without sensitive data)\r\n      logger.security('KEY_GENERATED', 'New cryptographic key generated', {\r\n        keyId,\r\n        keyType,\r\n        purpose,\r\n        strength,\r\n        classification: 'RESTRICTED'\r\n      });\r\n      \r\n      // Audit log\r\n      logger.audit({\r\n        auditId: `key_gen_${keyId}`,\r\n        eventType: 'KEY_GENERATION',\r\n        actor: 'SYSTEM',\r\n        resource: `KEY:${keyId}`,\r\n        action: 'GENERATE',\r\n        result: 'SUCCESS',\r\n        timestamp: new Date(),\r\n        auditData: { keyType, purpose, strength }\r\n      });\r\n      \r\n      return keyId;\r\n      \r\n    } catch (error) {\r\n      logger.error('\u274C Key generation failed:', error);\r\n      throw new Error('Failed to generate cryptographic key');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieve a key by ID\r\n   * Returns the key data and metadata for the specified key ID\r\n   * \r\n   * @param keyId - Unique key identifier\r\n   * @returns Promise<{ key: Buffer; metadata: KeyMetadata } | null> Key data or null if not found\r\n   */\r\n  public async getKey(keyId: string): Promise<{ key: Buffer; metadata: KeyMetadata } | null> {\r\n    try {\r\n      // Check cache first\r\n      const cached = this.keyCache.get(keyId);\r\n      if (cached) {\r\n        // Update usage count\r\n        cached.metadata.usageCount++;\r\n        await this.updateKeyMetadata(keyId, cached.metadata);\r\n        return cached;\r\n      }\r\n      \r\n      // Load from storage\r\n      const keyData = await this.loadKey(keyId);\r\n      if (!keyData) {\r\n        return null;\r\n      }\r\n      \r\n      // Update usage count\r\n      keyData.metadata.usageCount++;\r\n      await this.updateKeyMetadata(keyId, keyData.metadata);\r\n      \r\n      // Cache for future use\r\n      this.keyCache.set(keyId, keyData);\r\n      \r\n      return keyData;\r\n      \r\n    } catch (error) {\r\n      logger.error('\u274C Key retrieval failed:', error);\r\n      throw new Error('Failed to retrieve cryptographic key');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Rotate a key to a new version\r\n   * Generates a new key and marks the old one as deprecated\r\n   * \r\n   * @param keyId - Key ID to rotate\r\n   * @returns Promise<string> New key ID\r\n   */\r\n  public async rotateKey(keyId: string): Promise<string> {\r\n    try {\r\n      // Get current key\r\n      const currentKey = await this.getKey(keyId);\r\n      if (!currentKey) {\r\n        throw new Error(`Key not found: ${keyId}`);\r\n      }\r\n      \r\n      // Generate new key with same parameters\r\n      const newKeyId = await this.generateKey(\r\n        currentKey.metadata.keyType,\r\n        currentKey.metadata.purpose,\r\n        currentKey.metadata.strength\r\n      );\r\n      \r\n      // Mark old key as deprecated\r\n      currentKey.metadata.status = KeyStatus.DEPRECATED;\r\n      currentKey.metadata.lastRotated = new Date();\r\n      await this.updateKeyMetadata(keyId, currentKey.metadata);\r\n      \r\n      // Remove from cache to force reload\r\n      this.keyCache.delete(keyId);\r\n      \r\n      // Log key rotation\r\n      logger.security('KEY_ROTATED', 'Cryptographic key rotated', {\r\n        oldKeyId: keyId,\r\n        newKeyId,\r\n        keyType: currentKey.metadata.keyType,\r\n        classification: 'RESTRICTED'\r\n      });\r\n      \r\n      // Audit log\r\n      logger.audit({\r\n        auditId: `key_rot_${keyId}`,\r\n        eventType: 'KEY_ROTATION',\r\n        actor: 'SYSTEM',\r\n        resource: `KEY:${keyId}`,\r\n        action: 'ROTATE',\r\n        result: 'SUCCESS',\r\n        timestamp: new Date(),\r\n        auditData: { oldKeyId: keyId, newKeyId }\r\n      });\r\n      \r\n      return newKeyId;\r\n      \r\n    } catch (error) {\r\n      logger.error('\u274C Key rotation failed:', error);\r\n      throw new Error('Failed to rotate cryptographic key');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Revoke a key immediately\r\n   * Marks a key as revoked and removes it from cache\r\n   * \r\n   * @param keyId - Key ID to revoke\r\n   * @param reason - Reason for revocation\r\n   */\r\n  public async revokeKey(keyId: string, reason: string): Promise<void> {\r\n    try {\r\n      // Get current key\r\n      const currentKey = await this.getKey(keyId);\r\n      if (!currentKey) {\r\n        throw new Error(`Key not found: ${keyId}`);\r\n      }\r\n      \r\n      // Mark key as revoked\r\n      currentKey.metadata.status = KeyStatus.REVOKED;\r\n      await this.updateKeyMetadata(keyId, currentKey.metadata);\r\n      \r\n      // Remove from cache\r\n      this.keyCache.delete(keyId);\r\n      \r\n      // Clear key from memory\r\n      encryptionService.secureClear(currentKey.key);\r\n      \r\n      // Log key revocation\r\n      logger.security('KEY_REVOKED', 'Cryptographic key revoked', {\r\n        keyId,\r\n        reason,\r\n        keyType: currentKey.metadata.keyType,\r\n        classification: 'RESTRICTED'\r\n      });\r\n      \r\n      // Audit log\r\n      logger.audit({\r\n        auditId: `key_rev_${keyId}`,\r\n        eventType: 'KEY_REVOCATION',\r\n        actor: 'SYSTEM',\r\n        resource: `KEY:${keyId}`,\r\n        action: 'REVOKE',\r\n        result: 'SUCCESS',\r\n        timestamp: new Date(),\r\n        auditData: { reason }\r\n      });\r\n      \r\n    } catch (error) {\r\n      logger.error('\u274C Key revocation failed:', error);\r\n      throw new Error('Failed to revoke cryptographic key');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * List all keys with their metadata\r\n   * Returns metadata for all keys (without key data)\r\n   * \r\n   * @param keyType - Optional filter by key type\r\n   * @returns Promise<KeyMetadata[]> Array of key metadata\r\n   */\r\n  public async listKeys(keyType?: KeyType): Promise<KeyMetadata[]> {\r\n    try {\r\n      const keyFiles = require('fs').readdirSync(this.keyStoragePath)\r\n        .filter((file: string) => file.endsWith('.key'));\r\n      \r\n      const keys: KeyMetadata[] = [];\r\n      \r\n      for (const file of keyFiles) {\r\n        try {\r\n          const keyData = await this.loadKey(file.replace('.key', ''));\r\n          if (keyData && (!keyType || keyData.metadata.keyType === keyType)) {\r\n            keys.push(keyData.metadata);\r\n          }\r\n        } catch (error) {\r\n          logger.warn('\u26A0\uFE0F Failed to load key metadata', { file, error });\r\n        }\r\n      }\r\n      \r\n      return keys.sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\r\n      \r\n    } catch (error) {\r\n      logger.error('\u274C Failed to list keys:', error);\r\n      throw new Error('Failed to list cryptographic keys');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if keys need rotation\r\n   * Identifies keys that should be rotated based on policies\r\n   * \r\n   * @returns Promise<KeyMetadata[]> Keys that need rotation\r\n   */\r\n  public async checkKeysForRotation(): Promise<KeyMetadata[]> {\r\n    try {\r\n      const allKeys = await this.listKeys();\r\n      const keysNeedingRotation: KeyMetadata[] = [];\r\n      \r\n      for (const keyMetadata of allKeys) {\r\n        if (keyMetadata.status !== KeyStatus.ACTIVE) {\r\n          continue;\r\n        }\r\n        \r\n        const policy = this.getRotationPolicy(keyMetadata.keyType);\r\n        if (!policy) {\r\n          continue;\r\n        }\r\n        \r\n        const now = Date.now();\r\n        const keyAge = now - keyMetadata.createdAt.getTime();\r\n        const lastRotation = keyMetadata.lastRotated?.getTime() || keyMetadata.createdAt.getTime();\r\n        const timeSinceRotation = now - lastRotation;\r\n        \r\n        // Check if rotation is needed\r\n        const needsRotation = \r\n          keyAge > policy.maxAge ||\r\n          timeSinceRotation > policy.rotationInterval ||\r\n          (policy.maxUsage && keyMetadata.usageCount > policy.maxUsage) ||\r\n          (keyMetadata.nextRotation && now > keyMetadata.nextRotation.getTime());\r\n        \r\n        if (needsRotation) {\r\n          keyMetadata.status = KeyStatus.PENDING_ROTATION;\r\n          await this.updateKeyMetadata(keyMetadata.keyId, keyMetadata);\r\n          keysNeedingRotation.push(keyMetadata);\r\n        }\r\n      }\r\n      \r\n      return keysNeedingRotation;\r\n      \r\n    } catch (error) {\r\n      logger.error('\u274C Failed to check keys for rotation:', error);\r\n      throw new Error('Failed to check key rotation status');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Store a key securely to disk\r\n   * Encrypts and stores key with metadata and integrity checking\r\n   * \r\n   * @param keyId - Unique key identifier\r\n   * @param keyBuffer - Key data to store\r\n   * @param metadata - Key metadata\r\n   */\r\n  private async storeKey(keyId: string, keyBuffer: Buffer, metadata: KeyMetadata): Promise<void> {\r\n    try {\r\n      // Encrypt the key data\r\n      const encryptedKey = await encryptionService.encryptData(keyBuffer.toString('hex'));\r\n      \r\n      // Calculate integrity hash\r\n      const integrityHash = createHash('sha256')\r\n        .update(keyBuffer)\r\n        .update(JSON.stringify(metadata))\r\n        .digest('hex');\r\n      \r\n      // Create storage entry\r\n      const storageEntry: KeyStorageEntry = {\r\n        metadata,\r\n        encryptedKey,\r\n        integrityHash,\r\n        storedAt: new Date()\r\n      };\r\n      \r\n      // Write to secure storage\r\n      const keyFilePath = resolve(this.keyStoragePath, `${keyId}.key`);\r\n      writeFileSync(keyFilePath, JSON.stringify(storageEntry), { mode: 0o600 });\r\n      \r\n    } catch (error) {\r\n      logger.error('\u274C Failed to store key:', error);\r\n      throw new Error('Key storage failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load a key securely from disk\r\n   * Decrypts and verifies integrity of stored key\r\n   * \r\n   * @param keyId - Unique key identifier\r\n   * @returns Promise<{ key: Buffer; metadata: KeyMetadata } | null> Key data or null\r\n   */\r\n  private async loadKey(keyId: string): Promise<{ key: Buffer; metadata: KeyMetadata } | null> {\r\n    try {\r\n      const keyFilePath = resolve(this.keyStoragePath, `${keyId}.key`);\r\n      \r\n      if (!existsSync(keyFilePath)) {\r\n        return null;\r\n      }\r\n      \r\n      // Read storage entry\r\n      const storageData = readFileSync(keyFilePath, 'utf8');\r\n      const storageEntry: KeyStorageEntry = JSON.parse(storageData);\r\n      \r\n      // Decrypt key data\r\n      const keyHex = await encryptionService.decryptData(storageEntry.encryptedKey);\r\n      const keyBuffer = Buffer.from(keyHex, 'hex');\r\n      \r\n      // Verify integrity\r\n      const expectedHash = createHash('sha256')\r\n        .update(keyBuffer)\r\n        .update(JSON.stringify(storageEntry.metadata))\r\n        .digest('hex');\r\n      \r\n      if (!timingSafeEqual(Buffer.from(storageEntry.integrityHash, 'hex'), Buffer.from(expectedHash, 'hex'))) {\r\n        throw new Error('Key integrity verification failed');\r\n      }\r\n      \r\n      return {\r\n        key: keyBuffer,\r\n        metadata: storageEntry.metadata\r\n      };\r\n      \r\n    } catch (error) {\r\n      logger.error('\u274C Failed to load key:', error);\r\n      throw new Error('Key loading failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update key metadata\r\n   * Updates stored metadata for a key\r\n   * \r\n   * @param keyId - Key identifier\r\n   * @param metadata - Updated metadata\r\n   */\r\n  private async updateKeyMetadata(keyId: string, metadata: KeyMetadata): Promise<void> {\r\n    try {\r\n      const keyData = await this.loadKey(keyId);\r\n      if (!keyData) {\r\n        throw new Error(`Key not found: ${keyId}`);\r\n      }\r\n      \r\n      // Update metadata and re-store\r\n      await this.storeKey(keyId, keyData.key, metadata);\r\n      \r\n      // Update cache if present\r\n      const cached = this.keyCache.get(keyId);\r\n      if (cached) {\r\n        cached.metadata = metadata;\r\n      }\r\n      \r\n    } catch (error) {\r\n      logger.error('\u274C Failed to update key metadata:', error);\r\n      throw new Error('Key metadata update failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate unique key ID\r\n   * Creates a unique identifier for a new key\r\n   * \r\n   * @param keyType - Type of key\r\n   * @returns string Unique key ID\r\n   */\r\n  private generateKeyId(keyType: KeyType): string {\r\n    const timestamp = Date.now().toString(36);\r\n    const random = randomBytes(8).toString('hex');\r\n    return `${keyType}_${timestamp}_${random}`;\r\n  }\r\n\r\n  /**\r\n   * Get rotation policy for key type\r\n   * Returns the rotation policy for a specific key type\r\n   * \r\n   * @param keyType - Key type to get policy for\r\n   * @returns KeyRotationPolicy | null Policy or null if not found\r\n   */\r\n  private getRotationPolicy(keyType: KeyType): KeyRotationPolicy | null {\r\n    return KeyManager.DEFAULT_ROTATION_POLICIES.find(policy => policy.keyType === keyType) || null;\r\n  }\r\n\r\n  /**\r\n   * Start key rotation monitoring\r\n   * Begins periodic checking for keys that need rotation\r\n   */\r\n  private startKeyRotationMonitoring(): void {\r\n    // Check for key rotation every hour\r\n    setInterval(async () => {\r\n      try {\r\n        const keysNeedingRotation = await this.checkKeysForRotation();\r\n        \r\n        if (keysNeedingRotation.length > 0) {\r\n          logger.warn('\u26A0\uFE0F Keys requiring rotation detected', {\r\n            count: keysNeedingRotation.length,\r\n            keys: keysNeedingRotation.map(k => ({ keyId: k.keyId, keyType: k.keyType }))\r\n          });\r\n          \r\n          // Auto-rotate non-critical keys\r\n          for (const keyMetadata of keysNeedingRotation) {\r\n            if (keyMetadata.keyType !== KeyType.MASTER) {\r\n              try {\r\n                await this.rotateKey(keyMetadata.keyId);\r\n                logger.info('\uD83D\uDD04 Key automatically rotated', { keyId: keyMetadata.keyId });\r\n              } catch (error) {\r\n                logger.error('\u274C Automatic key rotation failed', { keyId: keyMetadata.keyId, error });\r\n              }\r\n            }\r\n          }\r\n        }\r\n        \r\n      } catch (error) {\r\n        logger.error('\u274C Key rotation monitoring error:', error);\r\n      }\r\n    }, 60 * 60 * 1000); // 1 hour\r\n  }\r\n\r\n  /**\r\n   * Get key manager status and statistics\r\n   * Returns current status for monitoring and diagnostics\r\n   * \r\n   * @returns Object containing key manager status\r\n   */\r\n  public async getStatus(): Promise<{\r\n    totalKeys: number;\r\n    keysByType: Record<string, number>;\r\n    keysByStatus: Record<string, number>;\r\n    cacheSize: number;\r\n    keysNeedingRotation: number;\r\n    timestamp: number;\r\n  }> {\r\n    try {\r\n      const allKeys = await this.listKeys();\r\n      const keysNeedingRotation = await this.checkKeysForRotation();\r\n      \r\n      const keysByType: Record<string, number> = {};\r\n      const keysByStatus: Record<string, number> = {};\r\n      \r\n      for (const key of allKeys) {\r\n        keysByType[key.keyType] = (keysByType[key.keyType] || 0) + 1;\r\n        keysByStatus[key.status] = (keysByStatus[key.status] || 0) + 1;\r\n      }\r\n      \r\n      return {\r\n        totalKeys: allKeys.length,\r\n        keysByType,\r\n        keysByStatus,\r\n        cacheSize: this.keyCache.size,\r\n        keysNeedingRotation: keysNeedingRotation.length,\r\n        timestamp: Date.now()\r\n      };\r\n      \r\n    } catch (error) {\r\n      logger.error('\u274C Failed to get key manager status:', error);\r\n      throw new Error('Failed to get key manager status');\r\n    }\r\n  }\r\n}\r\n\r\n// Create and export singleton instance\r\nexport const keyManager = new KeyManager();\r\n\r\n// =============================================================================\r\n// KEY MANAGEMENT SECURITY NOTES\r\n// =============================================================================\r\n// 1. All keys are stored encrypted with the master encryption key\r\n// 2. Key files have restricted permissions (600) for security\r\n// 3. Keys are automatically rotated based on configurable policies\r\n// 4. All key operations are logged and audited\r\n// 5. Key integrity is verified on every load operation\r\n// 6. Sensitive key data is cleared from memory after use\r\n// 7. Key cache improves performance but maintains security\r\n// 8. Master keys require manual rotation for maximum security\r\n// ============================================================================="],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "5d367bddf85c7b055b3865b84acff3977bbc6bd0"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2d7cimrxhs = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2d7cimrxhs();
cov_2d7cimrxhs().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2d7cimrxhs().s[1]++;
exports.keyManager = exports.KeyManager = exports.KeyStatus = exports.KeyType = void 0;
const crypto_1 =
/* istanbul ignore next */
(cov_2d7cimrxhs().s[2]++, require("crypto"));
const encryption_service_1 =
/* istanbul ignore next */
(cov_2d7cimrxhs().s[3]++, require("@/security/encryption-service"));
const logger_1 =
/* istanbul ignore next */
(cov_2d7cimrxhs().s[4]++, require("@/core/logging/logger"));
const fs_1 =
/* istanbul ignore next */
(cov_2d7cimrxhs().s[5]++, require("fs"));
const path_1 =
/* istanbul ignore next */
(cov_2d7cimrxhs().s[6]++, require("path"));
/**
 * Enumeration of key types
 * Defines different categories of keys managed by the system
 */
var KeyType;
/* istanbul ignore next */
cov_2d7cimrxhs().s[7]++;
(function (KeyType) {
  /* istanbul ignore next */
  cov_2d7cimrxhs().f[0]++;
  cov_2d7cimrxhs().s[8]++;
  KeyType["MASTER"] = "master";
  /* istanbul ignore next */
  cov_2d7cimrxhs().s[9]++;
  KeyType["API_ENCRYPTION"] = "api_encryption";
  /* istanbul ignore next */
  cov_2d7cimrxhs().s[10]++;
  KeyType["SESSION"] = "session";
  /* istanbul ignore next */
  cov_2d7cimrxhs().s[11]++;
  KeyType["DATABASE"] = "database";
  /* istanbul ignore next */
  cov_2d7cimrxhs().s[12]++;
  KeyType["BACKUP"] = "backup";
  /* istanbul ignore next */
  cov_2d7cimrxhs().s[13]++;
  KeyType["AUDIT"] = "audit";
  /* istanbul ignore next */
  cov_2d7cimrxhs().s[14]++;
  KeyType["COMMUNICATION"] = "communication";
})(
/* istanbul ignore next */
(cov_2d7cimrxhs().b[0][0]++, KeyType) ||
/* istanbul ignore next */
(cov_2d7cimrxhs().b[0][1]++, exports.KeyType = KeyType = {}));
/**
 * Enumeration of key status values
 * Tracks the lifecycle state of each key
 */
var KeyStatus;
/* istanbul ignore next */
cov_2d7cimrxhs().s[15]++;
(function (KeyStatus) {
  /* istanbul ignore next */
  cov_2d7cimrxhs().f[1]++;
  cov_2d7cimrxhs().s[16]++;
  KeyStatus["ACTIVE"] = "active";
  /* istanbul ignore next */
  cov_2d7cimrxhs().s[17]++;
  KeyStatus["PENDING_ROTATION"] = "pending_rotation";
  /* istanbul ignore next */
  cov_2d7cimrxhs().s[18]++;
  KeyStatus["DEPRECATED"] = "deprecated";
  /* istanbul ignore next */
  cov_2d7cimrxhs().s[19]++;
  KeyStatus["REVOKED"] = "revoked";
  /* istanbul ignore next */
  cov_2d7cimrxhs().s[20]++;
  KeyStatus["COMPROMISED"] = "compromised";
})(
/* istanbul ignore next */
(cov_2d7cimrxhs().b[1][0]++, KeyStatus) ||
/* istanbul ignore next */
(cov_2d7cimrxhs().b[1][1]++, exports.KeyStatus = KeyStatus = {}));
/**
 * Military-grade key management service
 * Provides comprehensive key lifecycle management with security focus
 */
class KeyManager {
  /** Path to secure key storage directory */
  keyStoragePath;
  /** In-memory key cache for performance */
  keyCache =
  /* istanbul ignore next */
  (cov_2d7cimrxhs().s[21]++, new Map());
  /** Default key rotation policies */
  static DEFAULT_ROTATION_POLICIES =
  /* istanbul ignore next */
  (cov_2d7cimrxhs().s[22]++, [{
    keyType: KeyType.MASTER,
    rotationInterval: 90 * 24 * 60 * 60 * 1000,
    // 90 days
    maxAge: 365 * 24 * 60 * 60 * 1000,
    // 1 year
    rotateOnSecurityEvent: true,
    gracePeriod: 7 * 24 * 60 * 60 * 1000 // 7 days
  }, {
    keyType: KeyType.API_ENCRYPTION,
    rotationInterval: 30 * 24 * 60 * 60 * 1000,
    // 30 days
    maxAge: 90 * 24 * 60 * 60 * 1000,
    // 90 days
    maxUsage: 1000000,
    // 1 million operations
    rotateOnSecurityEvent: true,
    gracePeriod: 24 * 60 * 60 * 1000 // 24 hours
  }, {
    keyType: KeyType.SESSION,
    rotationInterval: 24 * 60 * 60 * 1000,
    // 24 hours
    maxAge: 7 * 24 * 60 * 60 * 1000,
    // 7 days
    maxUsage: 10000,
    // 10k sessions
    rotateOnSecurityEvent: true,
    gracePeriod: 60 * 60 * 1000 // 1 hour
  }, {
    keyType: KeyType.DATABASE,
    rotationInterval: 60 * 24 * 60 * 60 * 1000,
    // 60 days
    maxAge: 180 * 24 * 60 * 60 * 1000,
    // 180 days
    rotateOnSecurityEvent: true,
    gracePeriod: 3 * 24 * 60 * 60 * 1000 // 3 days
  }]);
  constructor() {
    /* istanbul ignore next */
    cov_2d7cimrxhs().f[2]++;
    cov_2d7cimrxhs().s[23]++;
    // Initialize key storage directory
    this.keyStoragePath = (0, path_1.resolve)(process.cwd(), 'keys');
    /* istanbul ignore next */
    cov_2d7cimrxhs().s[24]++;
    this.initializeKeyStorage();
    // Start key rotation monitoring
    /* istanbul ignore next */
    cov_2d7cimrxhs().s[25]++;
    this.startKeyRotationMonitoring();
  }
  /**
   * Initialize secure key storage directory
   * Creates directory with restricted permissions if it doesn't exist
   */
  initializeKeyStorage() {
    /* istanbul ignore next */
    cov_2d7cimrxhs().f[3]++;
    cov_2d7cimrxhs().s[26]++;
    try {
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[27]++;
      if (!(0, fs_1.existsSync)(this.keyStoragePath)) {
        /* istanbul ignore next */
        cov_2d7cimrxhs().b[2][0]++;
        cov_2d7cimrxhs().s[28]++;
        (0, fs_1.mkdirSync)(this.keyStoragePath, {
          recursive: true,
          mode: 0o700
        });
        /* istanbul ignore next */
        cov_2d7cimrxhs().s[29]++;
        logger_1.logger.info('🔐 Key storage directory created', {
          path: this.keyStoragePath
        });
      } else
      /* istanbul ignore next */
      {
        cov_2d7cimrxhs().b[2][1]++;
      }
      // Verify directory permissions
      const stats =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[30]++, require('fs').statSync(this.keyStoragePath));
      const mode =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[31]++, stats.mode & parseInt('777', 8));
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[32]++;
      if (mode !== parseInt('700', 8)) {
        /* istanbul ignore next */
        cov_2d7cimrxhs().b[3][0]++;
        cov_2d7cimrxhs().s[33]++;
        logger_1.logger.warn('⚠️ Key storage directory has incorrect permissions', {
          path: this.keyStoragePath,
          currentMode: mode.toString(8),
          expectedMode: '700'
        });
      } else
      /* istanbul ignore next */
      {
        cov_2d7cimrxhs().b[3][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[34]++;
      logger_1.logger.error('❌ Failed to initialize key storage:', error);
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[35]++;
      throw new Error('Key storage initialization failed');
    }
  }
  /**
   * Generate a new cryptographically secure key
   * Creates a new key with specified type and strength
   *
   * @param keyType - Type of key to generate
   * @param purpose - Purpose description for the key
   * @param strength - Key strength in bits (default: 256)
   * @returns Promise<string> The generated key ID
   */
  async generateKey(keyType, purpose, strength =
  /* istanbul ignore next */
  (cov_2d7cimrxhs().b[4][0]++, 256)) {
    /* istanbul ignore next */
    cov_2d7cimrxhs().f[4]++;
    cov_2d7cimrxhs().s[36]++;
    try {
      // Generate unique key ID
      const keyId =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[37]++, this.generateKeyId(keyType));
      // Generate cryptographically secure key
      const keyBytes =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[38]++, strength / 8);
      const keyBuffer =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[39]++, (0, crypto_1.randomBytes)(keyBytes));
      // Create key metadata
      const metadata =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[40]++, {
        keyId,
        keyType,
        purpose,
        createdAt: new Date(),
        status: KeyStatus.ACTIVE,
        version: 1,
        strength,
        usageCount: 0
      });
      // Set next rotation based on policy
      const policy =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[41]++, this.getRotationPolicy(keyType));
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[42]++;
      if (policy) {
        /* istanbul ignore next */
        cov_2d7cimrxhs().b[5][0]++;
        cov_2d7cimrxhs().s[43]++;
        metadata.nextRotation = new Date(Date.now() + policy.rotationInterval);
      } else
      /* istanbul ignore next */
      {
        cov_2d7cimrxhs().b[5][1]++;
      }
      // Store key securely
      cov_2d7cimrxhs().s[44]++;
      await this.storeKey(keyId, keyBuffer, metadata);
      // Cache key for performance
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[45]++;
      this.keyCache.set(keyId, {
        key: keyBuffer,
        metadata
      });
      // Log key generation (without sensitive data)
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[46]++;
      logger_1.logger.security('KEY_GENERATED', 'New cryptographic key generated', {
        keyId,
        keyType,
        purpose,
        strength,
        classification: 'RESTRICTED'
      });
      // Audit log
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[47]++;
      logger_1.logger.audit({
        auditId: `key_gen_${keyId}`,
        eventType: 'KEY_GENERATION',
        actor: 'SYSTEM',
        resource: `KEY:${keyId}`,
        action: 'GENERATE',
        result: 'SUCCESS',
        timestamp: new Date(),
        auditData: {
          keyType,
          purpose,
          strength
        }
      });
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[48]++;
      return keyId;
    } catch (error) {
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[49]++;
      logger_1.logger.error('❌ Key generation failed:', error);
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[50]++;
      throw new Error('Failed to generate cryptographic key');
    }
  }
  /**
   * Retrieve a key by ID
   * Returns the key data and metadata for the specified key ID
   *
   * @param keyId - Unique key identifier
   * @returns Promise<{ key: Buffer; metadata: KeyMetadata } | null> Key data or null if not found
   */
  async getKey(keyId) {
    /* istanbul ignore next */
    cov_2d7cimrxhs().f[5]++;
    cov_2d7cimrxhs().s[51]++;
    try {
      // Check cache first
      const cached =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[52]++, this.keyCache.get(keyId));
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[53]++;
      if (cached) {
        /* istanbul ignore next */
        cov_2d7cimrxhs().b[6][0]++;
        cov_2d7cimrxhs().s[54]++;
        // Update usage count
        cached.metadata.usageCount++;
        /* istanbul ignore next */
        cov_2d7cimrxhs().s[55]++;
        await this.updateKeyMetadata(keyId, cached.metadata);
        /* istanbul ignore next */
        cov_2d7cimrxhs().s[56]++;
        return cached;
      } else
      /* istanbul ignore next */
      {
        cov_2d7cimrxhs().b[6][1]++;
      }
      // Load from storage
      const keyData =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[57]++, await this.loadKey(keyId));
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[58]++;
      if (!keyData) {
        /* istanbul ignore next */
        cov_2d7cimrxhs().b[7][0]++;
        cov_2d7cimrxhs().s[59]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_2d7cimrxhs().b[7][1]++;
      }
      // Update usage count
      cov_2d7cimrxhs().s[60]++;
      keyData.metadata.usageCount++;
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[61]++;
      await this.updateKeyMetadata(keyId, keyData.metadata);
      // Cache for future use
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[62]++;
      this.keyCache.set(keyId, keyData);
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[63]++;
      return keyData;
    } catch (error) {
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[64]++;
      logger_1.logger.error('❌ Key retrieval failed:', error);
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[65]++;
      throw new Error('Failed to retrieve cryptographic key');
    }
  }
  /**
   * Rotate a key to a new version
   * Generates a new key and marks the old one as deprecated
   *
   * @param keyId - Key ID to rotate
   * @returns Promise<string> New key ID
   */
  async rotateKey(keyId) {
    /* istanbul ignore next */
    cov_2d7cimrxhs().f[6]++;
    cov_2d7cimrxhs().s[66]++;
    try {
      // Get current key
      const currentKey =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[67]++, await this.getKey(keyId));
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[68]++;
      if (!currentKey) {
        /* istanbul ignore next */
        cov_2d7cimrxhs().b[8][0]++;
        cov_2d7cimrxhs().s[69]++;
        throw new Error(`Key not found: ${keyId}`);
      } else
      /* istanbul ignore next */
      {
        cov_2d7cimrxhs().b[8][1]++;
      }
      // Generate new key with same parameters
      const newKeyId =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[70]++, await this.generateKey(currentKey.metadata.keyType, currentKey.metadata.purpose, currentKey.metadata.strength));
      // Mark old key as deprecated
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[71]++;
      currentKey.metadata.status = KeyStatus.DEPRECATED;
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[72]++;
      currentKey.metadata.lastRotated = new Date();
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[73]++;
      await this.updateKeyMetadata(keyId, currentKey.metadata);
      // Remove from cache to force reload
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[74]++;
      this.keyCache.delete(keyId);
      // Log key rotation
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[75]++;
      logger_1.logger.security('KEY_ROTATED', 'Cryptographic key rotated', {
        oldKeyId: keyId,
        newKeyId,
        keyType: currentKey.metadata.keyType,
        classification: 'RESTRICTED'
      });
      // Audit log
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[76]++;
      logger_1.logger.audit({
        auditId: `key_rot_${keyId}`,
        eventType: 'KEY_ROTATION',
        actor: 'SYSTEM',
        resource: `KEY:${keyId}`,
        action: 'ROTATE',
        result: 'SUCCESS',
        timestamp: new Date(),
        auditData: {
          oldKeyId: keyId,
          newKeyId
        }
      });
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[77]++;
      return newKeyId;
    } catch (error) {
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[78]++;
      logger_1.logger.error('❌ Key rotation failed:', error);
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[79]++;
      throw new Error('Failed to rotate cryptographic key');
    }
  }
  /**
   * Revoke a key immediately
   * Marks a key as revoked and removes it from cache
   *
   * @param keyId - Key ID to revoke
   * @param reason - Reason for revocation
   */
  async revokeKey(keyId, reason) {
    /* istanbul ignore next */
    cov_2d7cimrxhs().f[7]++;
    cov_2d7cimrxhs().s[80]++;
    try {
      // Get current key
      const currentKey =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[81]++, await this.getKey(keyId));
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[82]++;
      if (!currentKey) {
        /* istanbul ignore next */
        cov_2d7cimrxhs().b[9][0]++;
        cov_2d7cimrxhs().s[83]++;
        throw new Error(`Key not found: ${keyId}`);
      } else
      /* istanbul ignore next */
      {
        cov_2d7cimrxhs().b[9][1]++;
      }
      // Mark key as revoked
      cov_2d7cimrxhs().s[84]++;
      currentKey.metadata.status = KeyStatus.REVOKED;
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[85]++;
      await this.updateKeyMetadata(keyId, currentKey.metadata);
      // Remove from cache
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[86]++;
      this.keyCache.delete(keyId);
      // Clear key from memory
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[87]++;
      encryption_service_1.encryptionService.secureClear(currentKey.key);
      // Log key revocation
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[88]++;
      logger_1.logger.security('KEY_REVOKED', 'Cryptographic key revoked', {
        keyId,
        reason,
        keyType: currentKey.metadata.keyType,
        classification: 'RESTRICTED'
      });
      // Audit log
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[89]++;
      logger_1.logger.audit({
        auditId: `key_rev_${keyId}`,
        eventType: 'KEY_REVOCATION',
        actor: 'SYSTEM',
        resource: `KEY:${keyId}`,
        action: 'REVOKE',
        result: 'SUCCESS',
        timestamp: new Date(),
        auditData: {
          reason
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[90]++;
      logger_1.logger.error('❌ Key revocation failed:', error);
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[91]++;
      throw new Error('Failed to revoke cryptographic key');
    }
  }
  /**
   * List all keys with their metadata
   * Returns metadata for all keys (without key data)
   *
   * @param keyType - Optional filter by key type
   * @returns Promise<KeyMetadata[]> Array of key metadata
   */
  async listKeys(keyType) {
    /* istanbul ignore next */
    cov_2d7cimrxhs().f[8]++;
    cov_2d7cimrxhs().s[92]++;
    try {
      const keyFiles =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[93]++, require('fs').readdirSync(this.keyStoragePath).filter(file => {
        /* istanbul ignore next */
        cov_2d7cimrxhs().f[9]++;
        cov_2d7cimrxhs().s[94]++;
        return file.endsWith('.key');
      }));
      const keys =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[95]++, []);
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[96]++;
      for (const file of keyFiles) {
        /* istanbul ignore next */
        cov_2d7cimrxhs().s[97]++;
        try {
          const keyData =
          /* istanbul ignore next */
          (cov_2d7cimrxhs().s[98]++, await this.loadKey(file.replace('.key', '')));
          /* istanbul ignore next */
          cov_2d7cimrxhs().s[99]++;
          if (
          /* istanbul ignore next */
          (cov_2d7cimrxhs().b[11][0]++, keyData) && (
          /* istanbul ignore next */
          (cov_2d7cimrxhs().b[11][1]++, !keyType) ||
          /* istanbul ignore next */
          (cov_2d7cimrxhs().b[11][2]++, keyData.metadata.keyType === keyType))) {
            /* istanbul ignore next */
            cov_2d7cimrxhs().b[10][0]++;
            cov_2d7cimrxhs().s[100]++;
            keys.push(keyData.metadata);
          } else
          /* istanbul ignore next */
          {
            cov_2d7cimrxhs().b[10][1]++;
          }
        } catch (error) {
          /* istanbul ignore next */
          cov_2d7cimrxhs().s[101]++;
          logger_1.logger.warn('⚠️ Failed to load key metadata', {
            file,
            error
          });
        }
      }
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[102]++;
      return keys.sort((a, b) => {
        /* istanbul ignore next */
        cov_2d7cimrxhs().f[10]++;
        cov_2d7cimrxhs().s[103]++;
        return b.createdAt.getTime() - a.createdAt.getTime();
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[104]++;
      logger_1.logger.error('❌ Failed to list keys:', error);
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[105]++;
      throw new Error('Failed to list cryptographic keys');
    }
  }
  /**
   * Check if keys need rotation
   * Identifies keys that should be rotated based on policies
   *
   * @returns Promise<KeyMetadata[]> Keys that need rotation
   */
  async checkKeysForRotation() {
    /* istanbul ignore next */
    cov_2d7cimrxhs().f[11]++;
    cov_2d7cimrxhs().s[106]++;
    try {
      const allKeys =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[107]++, await this.listKeys());
      const keysNeedingRotation =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[108]++, []);
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[109]++;
      for (const keyMetadata of allKeys) {
        /* istanbul ignore next */
        cov_2d7cimrxhs().s[110]++;
        if (keyMetadata.status !== KeyStatus.ACTIVE) {
          /* istanbul ignore next */
          cov_2d7cimrxhs().b[12][0]++;
          cov_2d7cimrxhs().s[111]++;
          continue;
        } else
        /* istanbul ignore next */
        {
          cov_2d7cimrxhs().b[12][1]++;
        }
        const policy =
        /* istanbul ignore next */
        (cov_2d7cimrxhs().s[112]++, this.getRotationPolicy(keyMetadata.keyType));
        /* istanbul ignore next */
        cov_2d7cimrxhs().s[113]++;
        if (!policy) {
          /* istanbul ignore next */
          cov_2d7cimrxhs().b[13][0]++;
          cov_2d7cimrxhs().s[114]++;
          continue;
        } else
        /* istanbul ignore next */
        {
          cov_2d7cimrxhs().b[13][1]++;
        }
        const now =
        /* istanbul ignore next */
        (cov_2d7cimrxhs().s[115]++, Date.now());
        const keyAge =
        /* istanbul ignore next */
        (cov_2d7cimrxhs().s[116]++, now - keyMetadata.createdAt.getTime());
        const lastRotation =
        /* istanbul ignore next */
        (cov_2d7cimrxhs().s[117]++,
        /* istanbul ignore next */
        (cov_2d7cimrxhs().b[14][0]++, keyMetadata.lastRotated?.getTime()) ||
        /* istanbul ignore next */
        (cov_2d7cimrxhs().b[14][1]++, keyMetadata.createdAt.getTime()));
        const timeSinceRotation =
        /* istanbul ignore next */
        (cov_2d7cimrxhs().s[118]++, now - lastRotation);
        // Check if rotation is needed
        const needsRotation =
        /* istanbul ignore next */
        (cov_2d7cimrxhs().s[119]++,
        /* istanbul ignore next */
        (cov_2d7cimrxhs().b[15][0]++, keyAge > policy.maxAge) ||
        /* istanbul ignore next */
        (cov_2d7cimrxhs().b[15][1]++, timeSinceRotation > policy.rotationInterval) ||
        /* istanbul ignore next */
        (cov_2d7cimrxhs().b[15][2]++, policy.maxUsage) &&
        /* istanbul ignore next */
        (cov_2d7cimrxhs().b[15][3]++, keyMetadata.usageCount > policy.maxUsage) ||
        /* istanbul ignore next */
        (cov_2d7cimrxhs().b[15][4]++, keyMetadata.nextRotation) &&
        /* istanbul ignore next */
        (cov_2d7cimrxhs().b[15][5]++, now > keyMetadata.nextRotation.getTime()));
        /* istanbul ignore next */
        cov_2d7cimrxhs().s[120]++;
        if (needsRotation) {
          /* istanbul ignore next */
          cov_2d7cimrxhs().b[16][0]++;
          cov_2d7cimrxhs().s[121]++;
          keyMetadata.status = KeyStatus.PENDING_ROTATION;
          /* istanbul ignore next */
          cov_2d7cimrxhs().s[122]++;
          await this.updateKeyMetadata(keyMetadata.keyId, keyMetadata);
          /* istanbul ignore next */
          cov_2d7cimrxhs().s[123]++;
          keysNeedingRotation.push(keyMetadata);
        } else
        /* istanbul ignore next */
        {
          cov_2d7cimrxhs().b[16][1]++;
        }
      }
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[124]++;
      return keysNeedingRotation;
    } catch (error) {
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[125]++;
      logger_1.logger.error('❌ Failed to check keys for rotation:', error);
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[126]++;
      throw new Error('Failed to check key rotation status');
    }
  }
  /**
   * Store a key securely to disk
   * Encrypts and stores key with metadata and integrity checking
   *
   * @param keyId - Unique key identifier
   * @param keyBuffer - Key data to store
   * @param metadata - Key metadata
   */
  async storeKey(keyId, keyBuffer, metadata) {
    /* istanbul ignore next */
    cov_2d7cimrxhs().f[12]++;
    cov_2d7cimrxhs().s[127]++;
    try {
      // Encrypt the key data
      const encryptedKey =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[128]++, await encryption_service_1.encryptionService.encryptData(keyBuffer.toString('hex')));
      // Calculate integrity hash
      const integrityHash =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[129]++, (0, crypto_1.createHash)('sha256').update(keyBuffer).update(JSON.stringify(metadata)).digest('hex'));
      // Create storage entry
      const storageEntry =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[130]++, {
        metadata,
        encryptedKey,
        integrityHash,
        storedAt: new Date()
      });
      // Write to secure storage
      const keyFilePath =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[131]++, (0, path_1.resolve)(this.keyStoragePath, `${keyId}.key`));
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[132]++;
      (0, fs_1.writeFileSync)(keyFilePath, JSON.stringify(storageEntry), {
        mode: 0o600
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[133]++;
      logger_1.logger.error('❌ Failed to store key:', error);
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[134]++;
      throw new Error('Key storage failed');
    }
  }
  /**
   * Load a key securely from disk
   * Decrypts and verifies integrity of stored key
   *
   * @param keyId - Unique key identifier
   * @returns Promise<{ key: Buffer; metadata: KeyMetadata } | null> Key data or null
   */
  async loadKey(keyId) {
    /* istanbul ignore next */
    cov_2d7cimrxhs().f[13]++;
    cov_2d7cimrxhs().s[135]++;
    try {
      const keyFilePath =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[136]++, (0, path_1.resolve)(this.keyStoragePath, `${keyId}.key`));
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[137]++;
      if (!(0, fs_1.existsSync)(keyFilePath)) {
        /* istanbul ignore next */
        cov_2d7cimrxhs().b[17][0]++;
        cov_2d7cimrxhs().s[138]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_2d7cimrxhs().b[17][1]++;
      }
      // Read storage entry
      const storageData =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[139]++, (0, fs_1.readFileSync)(keyFilePath, 'utf8'));
      const storageEntry =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[140]++, JSON.parse(storageData));
      // Decrypt key data
      const keyHex =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[141]++, await encryption_service_1.encryptionService.decryptData(storageEntry.encryptedKey));
      const keyBuffer =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[142]++, Buffer.from(keyHex, 'hex'));
      // Verify integrity
      const expectedHash =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[143]++, (0, crypto_1.createHash)('sha256').update(keyBuffer).update(JSON.stringify(storageEntry.metadata)).digest('hex'));
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[144]++;
      if (!(0, crypto_1.timingSafeEqual)(Buffer.from(storageEntry.integrityHash, 'hex'), Buffer.from(expectedHash, 'hex'))) {
        /* istanbul ignore next */
        cov_2d7cimrxhs().b[18][0]++;
        cov_2d7cimrxhs().s[145]++;
        throw new Error('Key integrity verification failed');
      } else
      /* istanbul ignore next */
      {
        cov_2d7cimrxhs().b[18][1]++;
      }
      cov_2d7cimrxhs().s[146]++;
      return {
        key: keyBuffer,
        metadata: storageEntry.metadata
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[147]++;
      logger_1.logger.error('❌ Failed to load key:', error);
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[148]++;
      throw new Error('Key loading failed');
    }
  }
  /**
   * Update key metadata
   * Updates stored metadata for a key
   *
   * @param keyId - Key identifier
   * @param metadata - Updated metadata
   */
  async updateKeyMetadata(keyId, metadata) {
    /* istanbul ignore next */
    cov_2d7cimrxhs().f[14]++;
    cov_2d7cimrxhs().s[149]++;
    try {
      const keyData =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[150]++, await this.loadKey(keyId));
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[151]++;
      if (!keyData) {
        /* istanbul ignore next */
        cov_2d7cimrxhs().b[19][0]++;
        cov_2d7cimrxhs().s[152]++;
        throw new Error(`Key not found: ${keyId}`);
      } else
      /* istanbul ignore next */
      {
        cov_2d7cimrxhs().b[19][1]++;
      }
      // Update metadata and re-store
      cov_2d7cimrxhs().s[153]++;
      await this.storeKey(keyId, keyData.key, metadata);
      // Update cache if present
      const cached =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[154]++, this.keyCache.get(keyId));
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[155]++;
      if (cached) {
        /* istanbul ignore next */
        cov_2d7cimrxhs().b[20][0]++;
        cov_2d7cimrxhs().s[156]++;
        cached.metadata = metadata;
      } else
      /* istanbul ignore next */
      {
        cov_2d7cimrxhs().b[20][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[157]++;
      logger_1.logger.error('❌ Failed to update key metadata:', error);
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[158]++;
      throw new Error('Key metadata update failed');
    }
  }
  /**
   * Generate unique key ID
   * Creates a unique identifier for a new key
   *
   * @param keyType - Type of key
   * @returns string Unique key ID
   */
  generateKeyId(keyType) {
    /* istanbul ignore next */
    cov_2d7cimrxhs().f[15]++;
    const timestamp =
    /* istanbul ignore next */
    (cov_2d7cimrxhs().s[159]++, Date.now().toString(36));
    const random =
    /* istanbul ignore next */
    (cov_2d7cimrxhs().s[160]++, (0, crypto_1.randomBytes)(8).toString('hex'));
    /* istanbul ignore next */
    cov_2d7cimrxhs().s[161]++;
    return `${keyType}_${timestamp}_${random}`;
  }
  /**
   * Get rotation policy for key type
   * Returns the rotation policy for a specific key type
   *
   * @param keyType - Key type to get policy for
   * @returns KeyRotationPolicy | null Policy or null if not found
   */
  getRotationPolicy(keyType) {
    /* istanbul ignore next */
    cov_2d7cimrxhs().f[16]++;
    cov_2d7cimrxhs().s[162]++;
    return /* istanbul ignore next */(cov_2d7cimrxhs().b[21][0]++, KeyManager.DEFAULT_ROTATION_POLICIES.find(policy => {
      /* istanbul ignore next */
      cov_2d7cimrxhs().f[17]++;
      cov_2d7cimrxhs().s[163]++;
      return policy.keyType === keyType;
    })) ||
    /* istanbul ignore next */
    (cov_2d7cimrxhs().b[21][1]++, null);
  }
  /**
   * Start key rotation monitoring
   * Begins periodic checking for keys that need rotation
   */
  startKeyRotationMonitoring() {
    /* istanbul ignore next */
    cov_2d7cimrxhs().f[18]++;
    cov_2d7cimrxhs().s[164]++;
    // Check for key rotation every hour
    setInterval(async () => {
      /* istanbul ignore next */
      cov_2d7cimrxhs().f[19]++;
      cov_2d7cimrxhs().s[165]++;
      try {
        const keysNeedingRotation =
        /* istanbul ignore next */
        (cov_2d7cimrxhs().s[166]++, await this.checkKeysForRotation());
        /* istanbul ignore next */
        cov_2d7cimrxhs().s[167]++;
        if (keysNeedingRotation.length > 0) {
          /* istanbul ignore next */
          cov_2d7cimrxhs().b[22][0]++;
          cov_2d7cimrxhs().s[168]++;
          logger_1.logger.warn('⚠️ Keys requiring rotation detected', {
            count: keysNeedingRotation.length,
            keys: keysNeedingRotation.map(k => {
              /* istanbul ignore next */
              cov_2d7cimrxhs().f[20]++;
              cov_2d7cimrxhs().s[169]++;
              return {
                keyId: k.keyId,
                keyType: k.keyType
              };
            })
          });
          // Auto-rotate non-critical keys
          /* istanbul ignore next */
          cov_2d7cimrxhs().s[170]++;
          for (const keyMetadata of keysNeedingRotation) {
            /* istanbul ignore next */
            cov_2d7cimrxhs().s[171]++;
            if (keyMetadata.keyType !== KeyType.MASTER) {
              /* istanbul ignore next */
              cov_2d7cimrxhs().b[23][0]++;
              cov_2d7cimrxhs().s[172]++;
              try {
                /* istanbul ignore next */
                cov_2d7cimrxhs().s[173]++;
                await this.rotateKey(keyMetadata.keyId);
                /* istanbul ignore next */
                cov_2d7cimrxhs().s[174]++;
                logger_1.logger.info('🔄 Key automatically rotated', {
                  keyId: keyMetadata.keyId
                });
              } catch (error) {
                /* istanbul ignore next */
                cov_2d7cimrxhs().s[175]++;
                logger_1.logger.error('❌ Automatic key rotation failed', {
                  keyId: keyMetadata.keyId,
                  error
                });
              }
            } else
            /* istanbul ignore next */
            {
              cov_2d7cimrxhs().b[23][1]++;
            }
          }
        } else
        /* istanbul ignore next */
        {
          cov_2d7cimrxhs().b[22][1]++;
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_2d7cimrxhs().s[176]++;
        logger_1.logger.error('❌ Key rotation monitoring error:', error);
      }
    }, 60 * 60 * 1000); // 1 hour
  }
  /**
   * Get key manager status and statistics
   * Returns current status for monitoring and diagnostics
   *
   * @returns Object containing key manager status
   */
  async getStatus() {
    /* istanbul ignore next */
    cov_2d7cimrxhs().f[21]++;
    cov_2d7cimrxhs().s[177]++;
    try {
      const allKeys =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[178]++, await this.listKeys());
      const keysNeedingRotation =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[179]++, await this.checkKeysForRotation());
      const keysByType =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[180]++, {});
      const keysByStatus =
      /* istanbul ignore next */
      (cov_2d7cimrxhs().s[181]++, {});
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[182]++;
      for (const key of allKeys) {
        /* istanbul ignore next */
        cov_2d7cimrxhs().s[183]++;
        keysByType[key.keyType] = (
        /* istanbul ignore next */
        (cov_2d7cimrxhs().b[24][0]++, keysByType[key.keyType]) ||
        /* istanbul ignore next */
        (cov_2d7cimrxhs().b[24][1]++, 0)) + 1;
        /* istanbul ignore next */
        cov_2d7cimrxhs().s[184]++;
        keysByStatus[key.status] = (
        /* istanbul ignore next */
        (cov_2d7cimrxhs().b[25][0]++, keysByStatus[key.status]) ||
        /* istanbul ignore next */
        (cov_2d7cimrxhs().b[25][1]++, 0)) + 1;
      }
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[185]++;
      return {
        totalKeys: allKeys.length,
        keysByType,
        keysByStatus,
        cacheSize: this.keyCache.size,
        keysNeedingRotation: keysNeedingRotation.length,
        timestamp: Date.now()
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[186]++;
      logger_1.logger.error('❌ Failed to get key manager status:', error);
      /* istanbul ignore next */
      cov_2d7cimrxhs().s[187]++;
      throw new Error('Failed to get key manager status');
    }
  }
}
/* istanbul ignore next */
cov_2d7cimrxhs().s[188]++;
exports.KeyManager = KeyManager;
// Create and export singleton instance
/* istanbul ignore next */
cov_2d7cimrxhs().s[189]++;
exports.keyManager = new KeyManager();
// =============================================================================
// KEY MANAGEMENT SECURITY NOTES
// =============================================================================
// 1. All keys are stored encrypted with the master encryption key
// 2. Key files have restricted permissions (600) for security
// 3. Keys are automatically rotated based on configurable policies
// 4. All key operations are logged and audited
// 5. Key integrity is verified on every load operation
// 6. Sensitive key data is cleared from memory after use
// 7. Key cache improves performance but maintains security
// 8. Master keys require manual rotation for maximum security
// =============================================================================
//# sourceMappingURL=data:application/json;charset=utf-8;base64,