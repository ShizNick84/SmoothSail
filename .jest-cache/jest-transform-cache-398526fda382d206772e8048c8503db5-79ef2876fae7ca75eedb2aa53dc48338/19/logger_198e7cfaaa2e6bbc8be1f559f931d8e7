4b7b4bbf5694f6371ece4ac07d9c27cc
"use strict";

/**
 * =============================================================================
 * AI CRYPTO TRADING AGENT - COMPREHENSIVE LOGGING SYSTEM
 * =============================================================================
 *
 * This module provides a comprehensive logging system with security-focused
 * features for the AI crypto trading agent. All trading operations, security
 * events, and system activities are logged with appropriate detail levels.
 *
 * CRITICAL SECURITY NOTICE:
 * This logging system handles sensitive financial and security data.
 * All logs must be protected and never expose sensitive information.
 *
 * Features:
 * - Multiple log levels with appropriate filtering
 * - Automatic log rotation and archival
 * - Security-aware log sanitization
 * - Structured logging with JSON format
 * - Separate log files for different components
 * - Audit trail capabilities
 *
 * @author AI Crypto Trading System
 * @version 1.0.0
 * @license PROPRIETARY
 * =============================================================================
 */
/* istanbul ignore next */
function cov_uzcmlkyo7() {
  var path = "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\core\\logging\\logger.ts";
  var hash = "8017367e3303ac9dcf1a8798315d4d076331e3e9";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\core\\logging\\logger.ts",
    statementMap: {
      "0": {
        start: {
          line: 28,
          column: 22
        },
        end: {
          line: 30,
          column: 1
        }
      },
      "1": {
        start: {
          line: 29,
          column: 4
        },
        end: {
          line: 29,
          column: 62
        }
      },
      "2": {
        start: {
          line: 31,
          column: 0
        },
        end: {
          line: 31,
          column: 62
        }
      },
      "3": {
        start: {
          line: 32,
          column: 0
        },
        end: {
          line: 32,
          column: 41
        }
      },
      "4": {
        start: {
          line: 33,
          column: 18
        },
        end: {
          line: 33,
          column: 53
        }
      },
      "5": {
        start: {
          line: 34,
          column: 36
        },
        end: {
          line: 34,
          column: 89
        }
      },
      "6": {
        start: {
          line: 35,
          column: 15
        },
        end: {
          line: 35,
          column: 30
        }
      },
      "7": {
        start: {
          line: 36,
          column: 13
        },
        end: {
          line: 36,
          column: 26
        }
      },
      "8": {
        start: {
          line: 48,
          column: 32
        },
        end: {
          line: 56,
          column: 5
        }
      },
      "9": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 58,
          column: 60
        }
      },
      "10": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 60,
          column: 36
        }
      },
      "11": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 62,
          column: 47
        }
      },
      "12": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 64,
          column: 52
        }
      },
      "13": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 65,
          column: 58
        }
      },
      "14": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 66,
          column: 56
        }
      },
      "15": {
        start: {
          line: 73,
          column: 24
        },
        end: {
          line: 78,
          column: 9
        }
      },
      "16": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 83,
          column: 9
        }
      },
      "17": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 82,
          column: 13
        }
      },
      "18": {
        start: {
          line: 81,
          column: 16
        },
        end: {
          line: 81,
          column: 75
        }
      },
      "19": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 119,
          column: 11
        }
      },
      "20": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 140,
          column: 11
        }
      },
      "21": {
        start: {
          line: 149,
          column: 8
        },
        end: {
          line: 161,
          column: 11
        }
      },
      "22": {
        start: {
          line: 170,
          column: 8
        },
        end: {
          line: 182,
          column: 11
        }
      },
      "23": {
        start: {
          line: 192,
          column: 55
        },
        end: {
          line: 192,
          column: 59
        }
      },
      "24": {
        start: {
          line: 194,
          column: 33
        },
        end: {
          line: 194,
          column: 68
        }
      },
      "25": {
        start: {
          line: 195,
          column: 30
        },
        end: {
          line: 195,
          column: 78
        }
      },
      "26": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 201,
          column: 11
        }
      },
      "27": {
        start: {
          line: 211,
          column: 55
        },
        end: {
          line: 211,
          column: 59
        }
      },
      "28": {
        start: {
          line: 212,
          column: 33
        },
        end: {
          line: 212,
          column: 68
        }
      },
      "29": {
        start: {
          line: 213,
          column: 21
        },
        end: {
          line: 213,
          column: 81
        }
      },
      "30": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 217,
          column: 9
        }
      },
      "31": {
        start: {
          line: 215,
          column: 34
        },
        end: {
          line: 215,
          column: 91
        }
      },
      "32": {
        start: {
          line: 216,
          column: 12
        },
        end: {
          line: 216,
          column: 43
        }
      },
      "33": {
        start: {
          line: 218,
          column: 8
        },
        end: {
          line: 218,
          column: 22
        }
      },
      "34": {
        start: {
          line: 228,
          column: 8
        },
        end: {
          line: 230,
          column: 9
        }
      },
      "35": {
        start: {
          line: 229,
          column: 12
        },
        end: {
          line: 229,
          column: 40
        }
      },
      "36": {
        start: {
          line: 231,
          column: 24
        },
        end: {
          line: 231,
          column: 28
        }
      },
      "37": {
        start: {
          line: 233,
          column: 8
        },
        end: {
          line: 241,
          column: 9
        }
      },
      "38": {
        start: {
          line: 234,
          column: 12
        },
        end: {
          line: 240,
          column: 15
        }
      },
      "39": {
        start: {
          line: 235,
          column: 16
        },
        end: {
          line: 238,
          column: 17
        }
      },
      "40": {
        start: {
          line: 236,
          column: 40
        },
        end: {
          line: 236,
          column: 78
        }
      },
      "41": {
        start: {
          line: 237,
          column: 20
        },
        end: {
          line: 237,
          column: 62
        }
      },
      "42": {
        start: {
          line: 239,
          column: 16
        },
        end: {
          line: 239,
          column: 40
        }
      },
      "43": {
        start: {
          line: 242,
          column: 8
        },
        end: {
          line: 242,
          column: 25
        }
      },
      "44": {
        start: {
          line: 252,
          column: 8
        },
        end: {
          line: 252,
          column: 63
        }
      },
      "45": {
        start: {
          line: 262,
          column: 8
        },
        end: {
          line: 262,
          column: 62
        }
      },
      "46": {
        start: {
          line: 272,
          column: 8
        },
        end: {
          line: 272,
          column: 62
        }
      },
      "47": {
        start: {
          line: 282,
          column: 19
        },
        end: {
          line: 282,
          column: 21
        }
      },
      "48": {
        start: {
          line: 283,
          column: 8
        },
        end: {
          line: 294,
          column: 9
        }
      },
      "49": {
        start: {
          line: 284,
          column: 12
        },
        end: {
          line: 290,
          column: 14
        }
      },
      "50": {
        start: {
          line: 292,
          column: 13
        },
        end: {
          line: 294,
          column: 9
        }
      },
      "51": {
        start: {
          line: 293,
          column: 12
        },
        end: {
          line: 293,
          column: 25
        }
      },
      "52": {
        start: {
          line: 295,
          column: 8
        },
        end: {
          line: 295,
          column: 63
        }
      },
      "53": {
        start: {
          line: 304,
          column: 30
        },
        end: {
          line: 308,
          column: 9
        }
      },
      "54": {
        start: {
          line: 309,
          column: 8
        },
        end: {
          line: 309,
          column: 60
        }
      },
      "55": {
        start: {
          line: 320,
          column: 29
        },
        end: {
          line: 325,
          column: 9
        }
      },
      "56": {
        start: {
          line: 326,
          column: 8
        },
        end: {
          line: 326,
          column: 56
        }
      },
      "57": {
        start: {
          line: 337,
          column: 28
        },
        end: {
          line: 341,
          column: 9
        }
      },
      "58": {
        start: {
          line: 342,
          column: 8
        },
        end: {
          line: 342,
          column: 54
        }
      },
      "59": {
        start: {
          line: 352,
          column: 8
        },
        end: {
          line: 359,
          column: 10
        }
      },
      "60": {
        start: {
          line: 368,
          column: 26
        },
        end: {
          line: 368,
          column: 49
        }
      },
      "61": {
        start: {
          line: 369,
          column: 23
        },
        end: {
          line: 369,
          column: 62
        }
      },
      "62": {
        start: {
          line: 370,
          column: 8
        },
        end: {
          line: 370,
          column: 46
        }
      },
      "63": {
        start: {
          line: 379,
          column: 8
        },
        end: {
          line: 397,
          column: 10
        }
      },
      "64": {
        start: {
          line: 400,
          column: 0
        },
        end: {
          line: 400,
          column: 24
        }
      },
      "65": {
        start: {
          line: 402,
          column: 0
        },
        end: {
          line: 402,
          column: 30
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 28,
            column: 56
          },
          end: {
            line: 28,
            column: 57
          }
        },
        loc: {
          start: {
            line: 28,
            column: 71
          },
          end: {
            line: 30,
            column: 1
          }
        },
        line: 28
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 57,
            column: 4
          },
          end: {
            line: 57,
            column: 5
          }
        },
        loc: {
          start: {
            line: 57,
            column: 31
          },
          end: {
            line: 67,
            column: 5
          }
        },
        line: 57
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 72,
            column: 4
          },
          end: {
            line: 72,
            column: 5
          }
        },
        loc: {
          start: {
            line: 72,
            column: 27
          },
          end: {
            line: 84,
            column: 5
          }
        },
        line: 72
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 91,
            column: 4
          },
          end: {
            line: 91,
            column: 5
          }
        },
        loc: {
          start: {
            line: 91,
            column: 23
          },
          end: {
            line: 120,
            column: 5
          }
        },
        line: 91
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 127,
            column: 4
          },
          end: {
            line: 127,
            column: 5
          }
        },
        loc: {
          start: {
            line: 127,
            column: 24
          },
          end: {
            line: 141,
            column: 5
          }
        },
        line: 127
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 148,
            column: 4
          },
          end: {
            line: 148,
            column: 5
          }
        },
        loc: {
          start: {
            line: 148,
            column: 27
          },
          end: {
            line: 162,
            column: 5
          }
        },
        line: 148
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 169,
            column: 4
          },
          end: {
            line: 169,
            column: 5
          }
        },
        loc: {
          start: {
            line: 169,
            column: 26
          },
          end: {
            line: 183,
            column: 5
          }
        },
        line: 169
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 191,
            column: 4
          },
          end: {
            line: 191,
            column: 5
          }
        },
        loc: {
          start: {
            line: 191,
            column: 27
          },
          end: {
            line: 202,
            column: 5
          }
        },
        line: 191
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 210,
            column: 4
          },
          end: {
            line: 210,
            column: 5
          }
        },
        loc: {
          start: {
            line: 210,
            column: 31
          },
          end: {
            line: 219,
            column: 5
          }
        },
        line: 210
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 227,
            column: 4
          },
          end: {
            line: 227,
            column: 5
          }
        },
        loc: {
          start: {
            line: 227,
            column: 32
          },
          end: {
            line: 243,
            column: 5
          }
        },
        line: 227
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 234,
            column: 51
          },
          end: {
            line: 234,
            column: 52
          }
        },
        loc: {
          start: {
            line: 234,
            column: 70
          },
          end: {
            line: 240,
            column: 13
          }
        },
        line: 234
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 251,
            column: 4
          },
          end: {
            line: 251,
            column: 5
          }
        },
        loc: {
          start: {
            line: 251,
            column: 25
          },
          end: {
            line: 253,
            column: 5
          }
        },
        line: 251
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 261,
            column: 4
          },
          end: {
            line: 261,
            column: 5
          }
        },
        loc: {
          start: {
            line: 261,
            column: 24
          },
          end: {
            line: 263,
            column: 5
          }
        },
        line: 261
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 271,
            column: 4
          },
          end: {
            line: 271,
            column: 5
          }
        },
        loc: {
          start: {
            line: 271,
            column: 24
          },
          end: {
            line: 273,
            column: 5
          }
        },
        line: 271
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 281,
            column: 4
          },
          end: {
            line: 281,
            column: 5
          }
        },
        loc: {
          start: {
            line: 281,
            column: 26
          },
          end: {
            line: 296,
            column: 5
          }
        },
        line: 281
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 303,
            column: 4
          },
          end: {
            line: 303,
            column: 5
          }
        },
        loc: {
          start: {
            line: 303,
            column: 22
          },
          end: {
            line: 310,
            column: 5
          }
        },
        line: 303
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 319,
            column: 4
          },
          end: {
            line: 319,
            column: 5
          }
        },
        loc: {
          start: {
            line: 319,
            column: 39
          },
          end: {
            line: 327,
            column: 5
          }
        },
        line: 319
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 336,
            column: 4
          },
          end: {
            line: 336,
            column: 5
          }
        },
        loc: {
          start: {
            line: 336,
            column: 38
          },
          end: {
            line: 343,
            column: 5
          }
        },
        line: 336
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 351,
            column: 4
          },
          end: {
            line: 351,
            column: 5
          }
        },
        loc: {
          start: {
            line: 351,
            column: 25
          },
          end: {
            line: 360,
            column: 5
          }
        },
        line: 351
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 367,
            column: 4
          },
          end: {
            line: 367,
            column: 5
          }
        },
        loc: {
          start: {
            line: 367,
            column: 22
          },
          end: {
            line: 371,
            column: 5
          }
        },
        line: 367
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 378,
            column: 4
          },
          end: {
            line: 378,
            column: 5
          }
        },
        loc: {
          start: {
            line: 378,
            column: 15
          },
          end: {
            line: 398,
            column: 5
          }
        },
        line: 378
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 28,
            column: 22
          },
          end: {
            line: 30,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 28,
            column: 23
          },
          end: {
            line: 28,
            column: 27
          }
        }, {
          start: {
            line: 28,
            column: 31
          },
          end: {
            line: 28,
            column: 51
          }
        }, {
          start: {
            line: 28,
            column: 56
          },
          end: {
            line: 30,
            column: 1
          }
        }],
        line: 28
      },
      "1": {
        loc: {
          start: {
            line: 29,
            column: 11
          },
          end: {
            line: 29,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 29,
            column: 37
          },
          end: {
            line: 29,
            column: 40
          }
        }, {
          start: {
            line: 29,
            column: 43
          },
          end: {
            line: 29,
            column: 61
          }
        }],
        line: 29
      },
      "2": {
        loc: {
          start: {
            line: 29,
            column: 12
          },
          end: {
            line: 29,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 29,
            column: 12
          },
          end: {
            line: 29,
            column: 15
          }
        }, {
          start: {
            line: 29,
            column: 19
          },
          end: {
            line: 29,
            column: 33
          }
        }],
        line: 29
      },
      "3": {
        loc: {
          start: {
            line: 58,
            column: 29
          },
          end: {
            line: 58,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 58,
            column: 29
          },
          end: {
            line: 58,
            column: 42
          }
        }, {
          start: {
            line: 58,
            column: 46
          },
          end: {
            line: 58,
            column: 59
          }
        }],
        line: 58
      },
      "4": {
        loc: {
          start: {
            line: 74,
            column: 12
          },
          end: {
            line: 74,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 74,
            column: 12
          },
          end: {
            line: 74,
            column: 31
          }
        }, {
          start: {
            line: 74,
            column: 35
          },
          end: {
            line: 74,
            column: 43
          }
        }],
        line: 74
      },
      "5": {
        loc: {
          start: {
            line: 75,
            column: 12
          },
          end: {
            line: 75,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 75,
            column: 12
          },
          end: {
            line: 75,
            column: 37
          }
        }, {
          start: {
            line: 75,
            column: 41
          },
          end: {
            line: 75,
            column: 55
          }
        }],
        line: 75
      },
      "6": {
        loc: {
          start: {
            line: 76,
            column: 12
          },
          end: {
            line: 76,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 76,
            column: 12
          },
          end: {
            line: 76,
            column: 40
          }
        }, {
          start: {
            line: 76,
            column: 44
          },
          end: {
            line: 76,
            column: 61
          }
        }],
        line: 76
      },
      "7": {
        loc: {
          start: {
            line: 80,
            column: 12
          },
          end: {
            line: 82,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 80,
            column: 12
          },
          end: {
            line: 82,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 80
      },
      "8": {
        loc: {
          start: {
            line: 93,
            column: 19
          },
          end: {
            line: 93,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 93,
            column: 19
          },
          end: {
            line: 93,
            column: 40
          }
        }, {
          start: {
            line: 93,
            column: 44
          },
          end: {
            line: 93,
            column: 50
          }
        }],
        line: 93
      },
      "9": {
        loc: {
          start: {
            line: 102,
            column: 50
          },
          end: {
            line: 102,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 102,
            column: 50
          },
          end: {
            line: 102,
            column: 69
          }
        }, {
          start: {
            line: 102,
            column: 73
          },
          end: {
            line: 102,
            column: 81
          }
        }],
        line: 102
      },
      "10": {
        loc: {
          start: {
            line: 111,
            column: 50
          },
          end: {
            line: 111,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 111,
            column: 50
          },
          end: {
            line: 111,
            column: 69
          }
        }, {
          start: {
            line: 111,
            column: 73
          },
          end: {
            line: 111,
            column: 81
          }
        }],
        line: 111
      },
      "11": {
        loc: {
          start: {
            line: 133,
            column: 50
          },
          end: {
            line: 133,
            column: 93
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 133,
            column: 50
          },
          end: {
            line: 133,
            column: 75
          }
        }, {
          start: {
            line: 133,
            column: 79
          },
          end: {
            line: 133,
            column: 93
          }
        }],
        line: 133
      },
      "12": {
        loc: {
          start: {
            line: 154,
            column: 50
          },
          end: {
            line: 154,
            column: 99
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 154,
            column: 50
          },
          end: {
            line: 154,
            column: 78
          }
        }, {
          start: {
            line: 154,
            column: 82
          },
          end: {
            line: 154,
            column: 99
          }
        }],
        line: 154
      },
      "13": {
        loc: {
          start: {
            line: 171,
            column: 19
          },
          end: {
            line: 171,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 171,
            column: 19
          },
          end: {
            line: 171,
            column: 48
          }
        }, {
          start: {
            line: 171,
            column: 52
          },
          end: {
            line: 171,
            column: 58
          }
        }],
        line: 171
      },
      "14": {
        loc: {
          start: {
            line: 214,
            column: 8
          },
          end: {
            line: 217,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 214,
            column: 8
          },
          end: {
            line: 217,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 214
      },
      "15": {
        loc: {
          start: {
            line: 228,
            column: 8
          },
          end: {
            line: 230,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 228,
            column: 8
          },
          end: {
            line: 230,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 228
      },
      "16": {
        loc: {
          start: {
            line: 235,
            column: 16
          },
          end: {
            line: 238,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 235,
            column: 16
          },
          end: {
            line: 238,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 235
      },
      "17": {
        loc: {
          start: {
            line: 283,
            column: 8
          },
          end: {
            line: 294,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 283,
            column: 8
          },
          end: {
            line: 294,
            column: 9
          }
        }, {
          start: {
            line: 292,
            column: 13
          },
          end: {
            line: 294,
            column: 9
          }
        }],
        line: 283
      },
      "18": {
        loc: {
          start: {
            line: 292,
            column: 13
          },
          end: {
            line: 294,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 292,
            column: 13
          },
          end: {
            line: 294,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 292
      },
      "19": {
        loc: {
          start: {
            line: 306,
            column: 23
          },
          end: {
            line: 306,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 306,
            column: 23
          },
          end: {
            line: 306,
            column: 43
          }
        }, {
          start: {
            line: 306,
            column: 47
          },
          end: {
            line: 306,
            column: 57
          }
        }],
        line: 306
      },
      "20": {
        loc: {
          start: {
            line: 307,
            column: 21
          },
          end: {
            line: 307,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 307,
            column: 21
          },
          end: {
            line: 307,
            column: 39
          }
        }, {
          start: {
            line: 307,
            column: 43
          },
          end: {
            line: 307,
            column: 65
          }
        }],
        line: 307
      },
      "21": {
        loc: {
          start: {
            line: 323,
            column: 27
          },
          end: {
            line: 323,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 323,
            column: 27
          },
          end: {
            line: 323,
            column: 47
          }
        }, {
          start: {
            line: 323,
            column: 51
          },
          end: {
            line: 323,
            column: 61
          }
        }],
        line: 323
      },
      "22": {
        loc: {
          start: {
            line: 354,
            column: 23
          },
          end: {
            line: 354,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 354,
            column: 23
          },
          end: {
            line: 354,
            column: 38
          }
        }, {
          start: {
            line: 354,
            column: 42
          },
          end: {
            line: 354,
            column: 60
          }
        }],
        line: 354
      },
      "23": {
        loc: {
          start: {
            line: 358,
            column: 25
          },
          end: {
            line: 358,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 358,
            column: 25
          },
          end: {
            line: 358,
            column: 45
          }
        }, {
          start: {
            line: 358,
            column: 49
          },
          end: {
            line: 358,
            column: 62
          }
        }],
        line: 358
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\core\\logging\\logger.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\core\\logging\\logger.ts"],
      sourcesContent: ["/**\r\n * =============================================================================\r\n * AI CRYPTO TRADING AGENT - COMPREHENSIVE LOGGING SYSTEM\r\n * =============================================================================\r\n * \r\n * This module provides a comprehensive logging system with security-focused\r\n * features for the AI crypto trading agent. All trading operations, security\r\n * events, and system activities are logged with appropriate detail levels.\r\n * \r\n * CRITICAL SECURITY NOTICE:\r\n * This logging system handles sensitive financial and security data.\r\n * All logs must be protected and never expose sensitive information.\r\n * \r\n * Features:\r\n * - Multiple log levels with appropriate filtering\r\n * - Automatic log rotation and archival\r\n * - Security-aware log sanitization\r\n * - Structured logging with JSON format\r\n * - Separate log files for different components\r\n * - Audit trail capabilities\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport winston from 'winston';\r\nimport DailyRotateFile from 'winston-daily-rotate-file';\r\nimport { resolve } from 'path';\r\nimport { existsSync, mkdirSync } from 'fs';\r\n\r\n/**\r\n * Interface for log metadata\r\n * Provides structured context for log entries\r\n */\r\nexport interface LogMetadata {\r\n  /** Component that generated the log */\r\n  component?: string;\r\n  /** Trading pair if applicable */\r\n  symbol?: string;\r\n  /** User ID if applicable */\r\n  userId?: string;\r\n  /** Session ID for tracking */\r\n  sessionId?: string;\r\n  /** Request ID for API calls */\r\n  requestId?: string;\r\n  /** Additional context data */\r\n  context?: Record<string, any>;\r\n  /** Security classification */\r\n  classification?: 'PUBLIC' | 'INTERNAL' | 'CONFIDENTIAL' | 'RESTRICTED';\r\n  /** Error information */\r\n  error?: {\r\n    name: string;\r\n    message: string;\r\n    stack?: string;\r\n  };\r\n  /** Process ID */\r\n  pid?: number;\r\n  /** Hostname */\r\n  hostname?: string;\r\n  /** Node.js version */\r\n  nodeVersion?: string;\r\n  /** Environment */\r\n  environment?: string;\r\n  /** Timestamp */\r\n  timestamp?: string;\r\n  /** Log level */\r\n  level?: string;\r\n}\r\n\r\n/**\r\n * Interface for audit log entries\r\n * Specialized structure for security and compliance logging\r\n */\r\nexport interface AuditLogEntry {\r\n  /** Unique audit event ID */\r\n  auditId: string;\r\n  /** Type of audit event */\r\n  eventType: string;\r\n  /** User or system that performed the action */\r\n  actor: string;\r\n  /** Resource that was affected */\r\n  resource: string;\r\n  /** Action that was performed */\r\n  action: string;\r\n  /** Result of the action */\r\n  result: 'SUCCESS' | 'FAILURE' | 'PARTIAL';\r\n  /** IP address of the actor */\r\n  ipAddress?: string;\r\n  /** Additional audit data */\r\n  auditData?: Record<string, any>;\r\n  /** Timestamp of the event */\r\n  timestamp: Date;\r\n}\r\n\r\n/**\r\n * Comprehensive logging service for the AI crypto trading agent\r\n * Provides secure, structured logging with automatic rotation and sanitization\r\n */\r\nclass Logger {\r\n  private winston: winston.Logger;\r\n  private auditLogger: winston.Logger;\r\n  private securityLogger: winston.Logger;\r\n  private tradingLogger: winston.Logger;\r\n  private componentName: string;\r\n  \r\n  /** Sensitive data patterns to sanitize from logs */\r\n  private static readonly SENSITIVE_PATTERNS = [\r\n    /api[_-]?key[\"\\s]*[:=][\"\\s]*([^\"\\s,}]+)/gi,\r\n    /secret[\"\\s]*[:=][\"\\s]*([^\"\\s,}]+)/gi,\r\n    /password[\"\\s]*[:=][\"\\s]*([^\"\\s,}]+)/gi,\r\n    /token[\"\\s]*[:=][\"\\s]*([^\"\\s,}]+)/gi,\r\n    /authorization[\"\\s]*[:=][\"\\s]*([^\"\\s,}]+)/gi,\r\n    /private[_-]?key[\"\\s]*[:=][\"\\s]*([^\"\\s,}]+)/gi,\r\n    /\\b[A-Za-z0-9]{32,}\\b/g, // Potential API keys or hashes\r\n  ];\r\n\r\n  constructor(componentName?: string) {\r\n    this.componentName = componentName || 'Application';\r\n    // Ensure log directories exist\r\n    this.ensureLogDirectories();\r\n    \r\n    // Initialize main logger\r\n    this.winston = this.createMainLogger();\r\n    \r\n    // Initialize specialized loggers\r\n    this.auditLogger = this.createAuditLogger();\r\n    this.securityLogger = this.createSecurityLogger();\r\n    this.tradingLogger = this.createTradingLogger();\r\n  }\r\n\r\n  /**\r\n   * Ensure all required log directories exist\r\n   * Creates directories with appropriate permissions\r\n   */\r\n  private ensureLogDirectories(): void {\r\n    const logDirs = [\r\n      process.env.LOG_DIR || './logs',\r\n      process.env.AUDIT_LOG_DIR || './logs/audit',\r\n      process.env.SECURITY_LOG_DIR || './logs/security',\r\n      './logs/trading'\r\n    ];\r\n\r\n    for (const dir of logDirs) {\r\n      if (!existsSync(dir)) {\r\n        mkdirSync(dir, { recursive: true, mode: 0o750 });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create the main application logger\r\n   * Handles general application logging with rotation\r\n   * \r\n   * @returns winston.Logger Configured main logger\r\n   */\r\n  private createMainLogger(): winston.Logger {\r\n    return winston.createLogger({\r\n      level: process.env.LOG_LEVEL || 'info',\r\n      format: winston.format.combine(\r\n        winston.format.timestamp(),\r\n        winston.format.errors({ stack: true }),\r\n        winston.format.json(),\r\n        winston.format.printf(this.formatLogMessage.bind(this))\r\n      ),\r\n      transports: [\r\n        // Console output for development\r\n        new winston.transports.Console({\r\n          format: winston.format.combine(\r\n            winston.format.colorize(),\r\n            winston.format.simple(),\r\n            winston.format.printf(this.formatConsoleMessage.bind(this))\r\n          )\r\n        }),\r\n        \r\n        // Daily rotating file for general logs\r\n        new DailyRotateFile({\r\n          filename: resolve(process.env.LOG_DIR || './logs', 'application-%DATE%.log'),\r\n          datePattern: 'YYYY-MM-DD',\r\n          maxSize: '100m',\r\n          maxFiles: '30d',\r\n          zippedArchive: true,\r\n          format: winston.format.combine(\r\n            winston.format.timestamp(),\r\n            winston.format.json()\r\n          )\r\n        }),\r\n        \r\n        // Error-only log file\r\n        new DailyRotateFile({\r\n          filename: resolve(process.env.LOG_DIR || './logs', 'error-%DATE%.log'),\r\n          datePattern: 'YYYY-MM-DD',\r\n          level: 'error',\r\n          maxSize: '100m',\r\n          maxFiles: '90d',\r\n          zippedArchive: true\r\n        })\r\n      ]\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create specialized audit logger for compliance and security\r\n   * Maintains tamper-evident audit trails\r\n   * \r\n   * @returns winston.Logger Configured audit logger\r\n   */\r\n  private createAuditLogger(): winston.Logger {\r\n    return winston.createLogger({\r\n      level: 'info',\r\n      format: winston.format.combine(\r\n        winston.format.timestamp(),\r\n        winston.format.json()\r\n      ),\r\n      transports: [\r\n        new DailyRotateFile({\r\n          filename: resolve(process.env.AUDIT_LOG_DIR || './logs/audit', 'audit-%DATE%.log'),\r\n          datePattern: 'YYYY-MM-DD',\r\n          maxSize: '50m',\r\n          maxFiles: '365d', // Keep audit logs for 1 year\r\n          zippedArchive: true\r\n        })\r\n      ]\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create specialized security logger for threat monitoring\r\n   * Logs all security-related events and incidents\r\n   * \r\n   * @returns winston.Logger Configured security logger\r\n   */\r\n  private createSecurityLogger(): winston.Logger {\r\n    return winston.createLogger({\r\n      level: 'debug',\r\n      format: winston.format.combine(\r\n        winston.format.timestamp(),\r\n        winston.format.json()\r\n      ),\r\n      transports: [\r\n        new DailyRotateFile({\r\n          filename: resolve(process.env.SECURITY_LOG_DIR || './logs/security', 'security-%DATE%.log'),\r\n          datePattern: 'YYYY-MM-DD',\r\n          maxSize: '50m',\r\n          maxFiles: '365d', // Keep security logs for 1 year\r\n          zippedArchive: true\r\n        })\r\n      ]\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create specialized trading logger for financial operations\r\n   * Logs all trading activities and market data\r\n   * \r\n   * @returns winston.Logger Configured trading logger\r\n   */\r\n  private createTradingLogger(): winston.Logger {\r\n    return winston.createLogger({\r\n      level: process.env.TRADING_LOG_LEVEL || 'info',\r\n      format: winston.format.combine(\r\n        winston.format.timestamp(),\r\n        winston.format.json()\r\n      ),\r\n      transports: [\r\n        new DailyRotateFile({\r\n          filename: resolve('./logs/trading', 'trading-%DATE%.log'),\r\n          datePattern: 'YYYY-MM-DD',\r\n          maxSize: '100m',\r\n          maxFiles: '90d', // Keep trading logs for 90 days\r\n          zippedArchive: true\r\n        })\r\n      ]\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Format log messages with sanitization\r\n   * Removes sensitive data and adds structured formatting\r\n   * \r\n   * @param info - Winston log info object\r\n   * @returns string Formatted log message\r\n   */\r\n  private formatLogMessage(info: winston.Logform.TransformableInfo): string {\r\n    const { timestamp, level, message, ...meta } = info;\r\n    \r\n    // Sanitize the message and metadata\r\n    const sanitizedMessage = this.sanitizeSensitiveData(message);\r\n    const sanitizedMeta = this.sanitizeSensitiveData(JSON.stringify(meta));\r\n    \r\n    return JSON.stringify({\r\n      timestamp,\r\n      level,\r\n      message: sanitizedMessage,\r\n      ...JSON.parse(sanitizedMeta)\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Format console messages for development\r\n   * Provides readable console output with colors\r\n   * \r\n   * @param info - Winston log info object\r\n   * @returns string Formatted console message\r\n   */\r\n  private formatConsoleMessage(info: winston.Logform.TransformableInfo): string {\r\n    const { timestamp, level, message, ...meta } = info;\r\n    const sanitizedMessage = this.sanitizeSensitiveData(message);\r\n    \r\n    let output = `${timestamp} [${level.toUpperCase()}]: ${sanitizedMessage}`;\r\n    \r\n    if (Object.keys(meta).length > 0) {\r\n      const sanitizedMeta = this.sanitizeSensitiveData(JSON.stringify(meta, null, 2));\r\n      output += `\\n${sanitizedMeta}`;\r\n    }\r\n    \r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Sanitize sensitive data from log messages\r\n   * Replaces sensitive patterns with masked values\r\n   * \r\n   * @param data - Data to sanitize (string or object)\r\n   * @returns string Sanitized data\r\n   */\r\n  private sanitizeSensitiveData(data: any): string {\r\n    if (typeof data !== 'string') {\r\n      data = JSON.stringify(data);\r\n    }\r\n    \r\n    let sanitized = data;\r\n    \r\n    // Replace sensitive patterns with masked values\r\n    for (const pattern of Logger.SENSITIVE_PATTERNS) {\r\n      sanitized = sanitized.replace(pattern, (match: string, group1?: string) => {\r\n        if (group1) {\r\n          const maskedValue = '*'.repeat(Math.min(group1.length, 8));\r\n          return match.replace(group1, maskedValue);\r\n        }\r\n        return '***REDACTED***';\r\n      });\r\n    }\r\n    \r\n    return sanitized;\r\n  }\r\n\r\n  /**\r\n   * Log debug messages\r\n   * Used for detailed diagnostic information\r\n   * \r\n   * @param message - Log message\r\n   * @param meta - Additional metadata\r\n   */\r\n  public debug(message: string, meta?: LogMetadata): void {\r\n    this.winston.debug(message, this.enrichMetadata(meta));\r\n  }\r\n\r\n  /**\r\n   * Log info messages\r\n   * Used for general operational information\r\n   * \r\n   * @param message - Log message\r\n   * @param meta - Additional metadata\r\n   */\r\n  public info(message: string, meta?: LogMetadata): void {\r\n    this.winston.info(message, this.enrichMetadata(meta));\r\n  }\r\n\r\n  /**\r\n   * Log warning messages\r\n   * Used for potentially problematic situations\r\n   * \r\n   * @param message - Log message\r\n   * @param meta - Additional metadata\r\n   */\r\n  public warn(message: string, meta?: LogMetadata): void {\r\n    this.winston.warn(message, this.enrichMetadata(meta));\r\n  }\r\n\r\n  /**\r\n   * Log error messages\r\n   * Used for error conditions and exceptions\r\n   * \r\n   * @param message - Log message\r\n   * @param error - Error object or additional metadata\r\n   */\r\n  public error(message: string, error?: Error | LogMetadata): void {\r\n    let meta: LogMetadata = {};\r\n    \r\n    if (error instanceof Error) {\r\n      meta = {\r\n        error: {\r\n          name: error.name,\r\n          message: error.message,\r\n          stack: error.stack\r\n        }\r\n      };\r\n    } else if (error) {\r\n      meta = error;\r\n    }\r\n    \r\n    this.winston.error(message, this.enrichMetadata(meta));\r\n  }\r\n\r\n  /**\r\n   * Log audit events for compliance and security\r\n   * Creates tamper-evident audit trail entries\r\n   * \r\n   * @param auditEntry - Structured audit log entry\r\n   */\r\n  public audit(auditEntry: AuditLogEntry): void {\r\n    const enrichedEntry = {\r\n      ...auditEntry,\r\n      timestamp: auditEntry.timestamp || new Date(),\r\n      auditId: auditEntry.auditId || this.generateAuditId()\r\n    };\r\n    \r\n    this.auditLogger.info('AUDIT_EVENT', enrichedEntry);\r\n  }\r\n\r\n  /**\r\n   * Log security events and incidents\r\n   * Specialized logging for security monitoring\r\n   * \r\n   * @param eventType - Type of security event\r\n   * @param message - Security event message\r\n   * @param meta - Security event metadata\r\n   */\r\n  public security(eventType: string, message: string, meta?: LogMetadata): void {\r\n    const securityMeta = {\r\n      ...this.enrichMetadata(meta),\r\n      eventType,\r\n      securityLevel: meta?.classification || 'INTERNAL',\r\n      timestamp: new Date().toISOString()\r\n    };\r\n    \r\n    this.securityLogger.info(message, securityMeta);\r\n  }\r\n\r\n  /**\r\n   * Log trading operations and market data\r\n   * Specialized logging for financial operations\r\n   * \r\n   * @param operation - Trading operation type\r\n   * @param message - Trading message\r\n   * @param meta - Trading metadata\r\n   */\r\n  public trading(operation: string, message: string, meta?: LogMetadata): void {\r\n    const tradingMeta = {\r\n      ...this.enrichMetadata(meta),\r\n      operation,\r\n      timestamp: new Date().toISOString()\r\n    };\r\n    \r\n    this.tradingLogger.info(message, tradingMeta);\r\n  }\r\n\r\n  /**\r\n   * Enrich metadata with common fields\r\n   * Adds standard fields to all log entries\r\n   * \r\n   * @param meta - Original metadata\r\n   * @returns LogMetadata Enriched metadata\r\n   */\r\n  private enrichMetadata(meta?: LogMetadata): LogMetadata {\r\n    return {\r\n      ...meta,\r\n      component: meta?.component || this.componentName,\r\n      pid: process.pid,\r\n      hostname: require('os').hostname(),\r\n      nodeVersion: process.version,\r\n      environment: process.env.NODE_ENV || 'development'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generate unique audit ID\r\n   * Creates a unique identifier for audit trail entries\r\n   * \r\n   * @returns string Unique audit ID\r\n   */\r\n  private generateAuditId(): string {\r\n    const timestamp = Date.now().toString(36);\r\n    const random = Math.random().toString(36).substring(2);\r\n    return `audit_${timestamp}_${random}`;\r\n  }\r\n\r\n  /**\r\n   * Get logger statistics and health information\r\n   * Returns current logging status for monitoring\r\n   * \r\n   * @returns Object containing logger statistics\r\n   */\r\n  public getStats(): {\r\n    mainLogger: any;\r\n    auditLogger: any;\r\n    securityLogger: any;\r\n    tradingLogger: any;\r\n    timestamp: number;\r\n  } {\r\n    return {\r\n      mainLogger: {\r\n        level: this.winston.level,\r\n        transports: this.winston.transports.length\r\n      },\r\n      auditLogger: {\r\n        level: this.auditLogger.level,\r\n        transports: this.auditLogger.transports.length\r\n      },\r\n      securityLogger: {\r\n        level: this.securityLogger.level,\r\n        transports: this.securityLogger.transports.length\r\n      },\r\n      tradingLogger: {\r\n        level: this.tradingLogger.level,\r\n        transports: this.tradingLogger.transports.length\r\n      },\r\n      timestamp: Date.now()\r\n    };\r\n  }\r\n}\r\n\r\n// Create and export singleton logger instance\r\nexport const logger = new Logger();\r\n\r\n// Export the Logger class for tests and custom instances\r\nexport { Logger };\r\n\r\n// Export types for use in other modules\r\nexport type { AuditLogEntry };\r\n\r\n// =============================================================================\r\n// LOGGING SECURITY NOTES\r\n// =============================================================================\r\n// 1. All sensitive data is automatically sanitized before logging\r\n// 2. Audit logs are kept for 1 year for compliance requirements\r\n// 3. Security logs are kept for 1 year for incident investigation\r\n// 4. Log files are automatically rotated and compressed\r\n// 5. Log directories have restricted permissions (750)\r\n// 6. Never manually log sensitive information like API keys or passwords\r\n// 7. Use appropriate log levels to control information exposure\r\n// 8. Monitor log files for unauthorized access or tampering\r\n// =============================================================================\r\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "8017367e3303ac9dcf1a8798315d4d076331e3e9"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_uzcmlkyo7 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_uzcmlkyo7();
var __importDefault =
/* istanbul ignore next */
(cov_uzcmlkyo7().s[0]++,
/* istanbul ignore next */
(cov_uzcmlkyo7().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_uzcmlkyo7().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_uzcmlkyo7().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_uzcmlkyo7().f[0]++;
  cov_uzcmlkyo7().s[1]++;
  return /* istanbul ignore next */(cov_uzcmlkyo7().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_uzcmlkyo7().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_uzcmlkyo7().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_uzcmlkyo7().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_uzcmlkyo7().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_uzcmlkyo7().s[3]++;
exports.Logger = exports.logger = void 0;
const winston_1 =
/* istanbul ignore next */
(cov_uzcmlkyo7().s[4]++, __importDefault(require("winston")));
const winston_daily_rotate_file_1 =
/* istanbul ignore next */
(cov_uzcmlkyo7().s[5]++, __importDefault(require("winston-daily-rotate-file")));
const path_1 =
/* istanbul ignore next */
(cov_uzcmlkyo7().s[6]++, require("path"));
const fs_1 =
/* istanbul ignore next */
(cov_uzcmlkyo7().s[7]++, require("fs"));
/**
 * Comprehensive logging service for the AI crypto trading agent
 * Provides secure, structured logging with automatic rotation and sanitization
 */
class Logger {
  winston;
  auditLogger;
  securityLogger;
  tradingLogger;
  componentName;
  /** Sensitive data patterns to sanitize from logs */
  static SENSITIVE_PATTERNS =
  /* istanbul ignore next */
  (cov_uzcmlkyo7().s[8]++, [/api[_-]?key["\s]*[:=]["\s]*([^"\s,}]+)/gi, /secret["\s]*[:=]["\s]*([^"\s,}]+)/gi, /password["\s]*[:=]["\s]*([^"\s,}]+)/gi, /token["\s]*[:=]["\s]*([^"\s,}]+)/gi, /authorization["\s]*[:=]["\s]*([^"\s,}]+)/gi, /private[_-]?key["\s]*[:=]["\s]*([^"\s,}]+)/gi, /\b[A-Za-z0-9]{32,}\b/g // Potential API keys or hashes
  ]);
  constructor(componentName) {
    /* istanbul ignore next */
    cov_uzcmlkyo7().f[1]++;
    cov_uzcmlkyo7().s[9]++;
    this.componentName =
    /* istanbul ignore next */
    (cov_uzcmlkyo7().b[3][0]++, componentName) ||
    /* istanbul ignore next */
    (cov_uzcmlkyo7().b[3][1]++, 'Application');
    // Ensure log directories exist
    /* istanbul ignore next */
    cov_uzcmlkyo7().s[10]++;
    this.ensureLogDirectories();
    // Initialize main logger
    /* istanbul ignore next */
    cov_uzcmlkyo7().s[11]++;
    this.winston = this.createMainLogger();
    // Initialize specialized loggers
    /* istanbul ignore next */
    cov_uzcmlkyo7().s[12]++;
    this.auditLogger = this.createAuditLogger();
    /* istanbul ignore next */
    cov_uzcmlkyo7().s[13]++;
    this.securityLogger = this.createSecurityLogger();
    /* istanbul ignore next */
    cov_uzcmlkyo7().s[14]++;
    this.tradingLogger = this.createTradingLogger();
  }
  /**
   * Ensure all required log directories exist
   * Creates directories with appropriate permissions
   */
  ensureLogDirectories() {
    /* istanbul ignore next */
    cov_uzcmlkyo7().f[2]++;
    const logDirs =
    /* istanbul ignore next */
    (cov_uzcmlkyo7().s[15]++, [
    /* istanbul ignore next */
    (cov_uzcmlkyo7().b[4][0]++, process.env.LOG_DIR) ||
    /* istanbul ignore next */
    (cov_uzcmlkyo7().b[4][1]++, './logs'),
    /* istanbul ignore next */
    (cov_uzcmlkyo7().b[5][0]++, process.env.AUDIT_LOG_DIR) ||
    /* istanbul ignore next */
    (cov_uzcmlkyo7().b[5][1]++, './logs/audit'),
    /* istanbul ignore next */
    (cov_uzcmlkyo7().b[6][0]++, process.env.SECURITY_LOG_DIR) ||
    /* istanbul ignore next */
    (cov_uzcmlkyo7().b[6][1]++, './logs/security'), './logs/trading']);
    /* istanbul ignore next */
    cov_uzcmlkyo7().s[16]++;
    for (const dir of logDirs) {
      /* istanbul ignore next */
      cov_uzcmlkyo7().s[17]++;
      if (!(0, fs_1.existsSync)(dir)) {
        /* istanbul ignore next */
        cov_uzcmlkyo7().b[7][0]++;
        cov_uzcmlkyo7().s[18]++;
        (0, fs_1.mkdirSync)(dir, {
          recursive: true,
          mode: 0o750
        });
      } else
      /* istanbul ignore next */
      {
        cov_uzcmlkyo7().b[7][1]++;
      }
    }
  }
  /**
   * Create the main application logger
   * Handles general application logging with rotation
   *
   * @returns winston.Logger Configured main logger
   */
  createMainLogger() {
    /* istanbul ignore next */
    cov_uzcmlkyo7().f[3]++;
    cov_uzcmlkyo7().s[19]++;
    return winston_1.default.createLogger({
      level:
      /* istanbul ignore next */
      (cov_uzcmlkyo7().b[8][0]++, process.env.LOG_LEVEL) ||
      /* istanbul ignore next */
      (cov_uzcmlkyo7().b[8][1]++, 'info'),
      format: winston_1.default.format.combine(winston_1.default.format.timestamp(), winston_1.default.format.errors({
        stack: true
      }), winston_1.default.format.json(), winston_1.default.format.printf(this.formatLogMessage.bind(this))),
      transports: [
      // Console output for development
      new winston_1.default.transports.Console({
        format: winston_1.default.format.combine(winston_1.default.format.colorize(), winston_1.default.format.simple(), winston_1.default.format.printf(this.formatConsoleMessage.bind(this)))
      }),
      // Daily rotating file for general logs
      new winston_daily_rotate_file_1.default({
        filename: (0, path_1.resolve)(
        /* istanbul ignore next */
        (cov_uzcmlkyo7().b[9][0]++, process.env.LOG_DIR) ||
        /* istanbul ignore next */
        (cov_uzcmlkyo7().b[9][1]++, './logs'), 'application-%DATE%.log'),
        datePattern: 'YYYY-MM-DD',
        maxSize: '100m',
        maxFiles: '30d',
        zippedArchive: true,
        format: winston_1.default.format.combine(winston_1.default.format.timestamp(), winston_1.default.format.json())
      }),
      // Error-only log file
      new winston_daily_rotate_file_1.default({
        filename: (0, path_1.resolve)(
        /* istanbul ignore next */
        (cov_uzcmlkyo7().b[10][0]++, process.env.LOG_DIR) ||
        /* istanbul ignore next */
        (cov_uzcmlkyo7().b[10][1]++, './logs'), 'error-%DATE%.log'),
        datePattern: 'YYYY-MM-DD',
        level: 'error',
        maxSize: '100m',
        maxFiles: '90d',
        zippedArchive: true
      })]
    });
  }
  /**
   * Create specialized audit logger for compliance and security
   * Maintains tamper-evident audit trails
   *
   * @returns winston.Logger Configured audit logger
   */
  createAuditLogger() {
    /* istanbul ignore next */
    cov_uzcmlkyo7().f[4]++;
    cov_uzcmlkyo7().s[20]++;
    return winston_1.default.createLogger({
      level: 'info',
      format: winston_1.default.format.combine(winston_1.default.format.timestamp(), winston_1.default.format.json()),
      transports: [new winston_daily_rotate_file_1.default({
        filename: (0, path_1.resolve)(
        /* istanbul ignore next */
        (cov_uzcmlkyo7().b[11][0]++, process.env.AUDIT_LOG_DIR) ||
        /* istanbul ignore next */
        (cov_uzcmlkyo7().b[11][1]++, './logs/audit'), 'audit-%DATE%.log'),
        datePattern: 'YYYY-MM-DD',
        maxSize: '50m',
        maxFiles: '365d',
        // Keep audit logs for 1 year
        zippedArchive: true
      })]
    });
  }
  /**
   * Create specialized security logger for threat monitoring
   * Logs all security-related events and incidents
   *
   * @returns winston.Logger Configured security logger
   */
  createSecurityLogger() {
    /* istanbul ignore next */
    cov_uzcmlkyo7().f[5]++;
    cov_uzcmlkyo7().s[21]++;
    return winston_1.default.createLogger({
      level: 'debug',
      format: winston_1.default.format.combine(winston_1.default.format.timestamp(), winston_1.default.format.json()),
      transports: [new winston_daily_rotate_file_1.default({
        filename: (0, path_1.resolve)(
        /* istanbul ignore next */
        (cov_uzcmlkyo7().b[12][0]++, process.env.SECURITY_LOG_DIR) ||
        /* istanbul ignore next */
        (cov_uzcmlkyo7().b[12][1]++, './logs/security'), 'security-%DATE%.log'),
        datePattern: 'YYYY-MM-DD',
        maxSize: '50m',
        maxFiles: '365d',
        // Keep security logs for 1 year
        zippedArchive: true
      })]
    });
  }
  /**
   * Create specialized trading logger for financial operations
   * Logs all trading activities and market data
   *
   * @returns winston.Logger Configured trading logger
   */
  createTradingLogger() {
    /* istanbul ignore next */
    cov_uzcmlkyo7().f[6]++;
    cov_uzcmlkyo7().s[22]++;
    return winston_1.default.createLogger({
      level:
      /* istanbul ignore next */
      (cov_uzcmlkyo7().b[13][0]++, process.env.TRADING_LOG_LEVEL) ||
      /* istanbul ignore next */
      (cov_uzcmlkyo7().b[13][1]++, 'info'),
      format: winston_1.default.format.combine(winston_1.default.format.timestamp(), winston_1.default.format.json()),
      transports: [new winston_daily_rotate_file_1.default({
        filename: (0, path_1.resolve)('./logs/trading', 'trading-%DATE%.log'),
        datePattern: 'YYYY-MM-DD',
        maxSize: '100m',
        maxFiles: '90d',
        // Keep trading logs for 90 days
        zippedArchive: true
      })]
    });
  }
  /**
   * Format log messages with sanitization
   * Removes sensitive data and adds structured formatting
   *
   * @param info - Winston log info object
   * @returns string Formatted log message
   */
  formatLogMessage(info) {
    /* istanbul ignore next */
    cov_uzcmlkyo7().f[7]++;
    const {
      timestamp,
      level,
      message,
      ...meta
    } =
    /* istanbul ignore next */
    (cov_uzcmlkyo7().s[23]++, info);
    // Sanitize the message and metadata
    const sanitizedMessage =
    /* istanbul ignore next */
    (cov_uzcmlkyo7().s[24]++, this.sanitizeSensitiveData(message));
    const sanitizedMeta =
    /* istanbul ignore next */
    (cov_uzcmlkyo7().s[25]++, this.sanitizeSensitiveData(JSON.stringify(meta)));
    /* istanbul ignore next */
    cov_uzcmlkyo7().s[26]++;
    return JSON.stringify({
      timestamp,
      level,
      message: sanitizedMessage,
      ...JSON.parse(sanitizedMeta)
    });
  }
  /**
   * Format console messages for development
   * Provides readable console output with colors
   *
   * @param info - Winston log info object
   * @returns string Formatted console message
   */
  formatConsoleMessage(info) {
    /* istanbul ignore next */
    cov_uzcmlkyo7().f[8]++;
    const {
      timestamp,
      level,
      message,
      ...meta
    } =
    /* istanbul ignore next */
    (cov_uzcmlkyo7().s[27]++, info);
    const sanitizedMessage =
    /* istanbul ignore next */
    (cov_uzcmlkyo7().s[28]++, this.sanitizeSensitiveData(message));
    let output =
    /* istanbul ignore next */
    (cov_uzcmlkyo7().s[29]++, `${timestamp} [${level.toUpperCase()}]: ${sanitizedMessage}`);
    /* istanbul ignore next */
    cov_uzcmlkyo7().s[30]++;
    if (Object.keys(meta).length > 0) {
      /* istanbul ignore next */
      cov_uzcmlkyo7().b[14][0]++;
      const sanitizedMeta =
      /* istanbul ignore next */
      (cov_uzcmlkyo7().s[31]++, this.sanitizeSensitiveData(JSON.stringify(meta, null, 2)));
      /* istanbul ignore next */
      cov_uzcmlkyo7().s[32]++;
      output += `\n${sanitizedMeta}`;
    } else
    /* istanbul ignore next */
    {
      cov_uzcmlkyo7().b[14][1]++;
    }
    cov_uzcmlkyo7().s[33]++;
    return output;
  }
  /**
   * Sanitize sensitive data from log messages
   * Replaces sensitive patterns with masked values
   *
   * @param data - Data to sanitize (string or object)
   * @returns string Sanitized data
   */
  sanitizeSensitiveData(data) {
    /* istanbul ignore next */
    cov_uzcmlkyo7().f[9]++;
    cov_uzcmlkyo7().s[34]++;
    if (typeof data !== 'string') {
      /* istanbul ignore next */
      cov_uzcmlkyo7().b[15][0]++;
      cov_uzcmlkyo7().s[35]++;
      data = JSON.stringify(data);
    } else
    /* istanbul ignore next */
    {
      cov_uzcmlkyo7().b[15][1]++;
    }
    let sanitized =
    /* istanbul ignore next */
    (cov_uzcmlkyo7().s[36]++, data);
    // Replace sensitive patterns with masked values
    /* istanbul ignore next */
    cov_uzcmlkyo7().s[37]++;
    for (const pattern of Logger.SENSITIVE_PATTERNS) {
      /* istanbul ignore next */
      cov_uzcmlkyo7().s[38]++;
      sanitized = sanitized.replace(pattern, (match, group1) => {
        /* istanbul ignore next */
        cov_uzcmlkyo7().f[10]++;
        cov_uzcmlkyo7().s[39]++;
        if (group1) {
          /* istanbul ignore next */
          cov_uzcmlkyo7().b[16][0]++;
          const maskedValue =
          /* istanbul ignore next */
          (cov_uzcmlkyo7().s[40]++, '*'.repeat(Math.min(group1.length, 8)));
          /* istanbul ignore next */
          cov_uzcmlkyo7().s[41]++;
          return match.replace(group1, maskedValue);
        } else
        /* istanbul ignore next */
        {
          cov_uzcmlkyo7().b[16][1]++;
        }
        cov_uzcmlkyo7().s[42]++;
        return '***REDACTED***';
      });
    }
    /* istanbul ignore next */
    cov_uzcmlkyo7().s[43]++;
    return sanitized;
  }
  /**
   * Log debug messages
   * Used for detailed diagnostic information
   *
   * @param message - Log message
   * @param meta - Additional metadata
   */
  debug(message, meta) {
    /* istanbul ignore next */
    cov_uzcmlkyo7().f[11]++;
    cov_uzcmlkyo7().s[44]++;
    this.winston.debug(message, this.enrichMetadata(meta));
  }
  /**
   * Log info messages
   * Used for general operational information
   *
   * @param message - Log message
   * @param meta - Additional metadata
   */
  info(message, meta) {
    /* istanbul ignore next */
    cov_uzcmlkyo7().f[12]++;
    cov_uzcmlkyo7().s[45]++;
    this.winston.info(message, this.enrichMetadata(meta));
  }
  /**
   * Log warning messages
   * Used for potentially problematic situations
   *
   * @param message - Log message
   * @param meta - Additional metadata
   */
  warn(message, meta) {
    /* istanbul ignore next */
    cov_uzcmlkyo7().f[13]++;
    cov_uzcmlkyo7().s[46]++;
    this.winston.warn(message, this.enrichMetadata(meta));
  }
  /**
   * Log error messages
   * Used for error conditions and exceptions
   *
   * @param message - Log message
   * @param error - Error object or additional metadata
   */
  error(message, error) {
    /* istanbul ignore next */
    cov_uzcmlkyo7().f[14]++;
    let meta =
    /* istanbul ignore next */
    (cov_uzcmlkyo7().s[47]++, {});
    /* istanbul ignore next */
    cov_uzcmlkyo7().s[48]++;
    if (error instanceof Error) {
      /* istanbul ignore next */
      cov_uzcmlkyo7().b[17][0]++;
      cov_uzcmlkyo7().s[49]++;
      meta = {
        error: {
          name: error.name,
          message: error.message,
          stack: error.stack
        }
      };
    } else {
      /* istanbul ignore next */
      cov_uzcmlkyo7().b[17][1]++;
      cov_uzcmlkyo7().s[50]++;
      if (error) {
        /* istanbul ignore next */
        cov_uzcmlkyo7().b[18][0]++;
        cov_uzcmlkyo7().s[51]++;
        meta = error;
      } else
      /* istanbul ignore next */
      {
        cov_uzcmlkyo7().b[18][1]++;
      }
    }
    /* istanbul ignore next */
    cov_uzcmlkyo7().s[52]++;
    this.winston.error(message, this.enrichMetadata(meta));
  }
  /**
   * Log audit events for compliance and security
   * Creates tamper-evident audit trail entries
   *
   * @param auditEntry - Structured audit log entry
   */
  audit(auditEntry) {
    /* istanbul ignore next */
    cov_uzcmlkyo7().f[15]++;
    const enrichedEntry =
    /* istanbul ignore next */
    (cov_uzcmlkyo7().s[53]++, {
      ...auditEntry,
      timestamp:
      /* istanbul ignore next */
      (cov_uzcmlkyo7().b[19][0]++, auditEntry.timestamp) ||
      /* istanbul ignore next */
      (cov_uzcmlkyo7().b[19][1]++, new Date()),
      auditId:
      /* istanbul ignore next */
      (cov_uzcmlkyo7().b[20][0]++, auditEntry.auditId) ||
      /* istanbul ignore next */
      (cov_uzcmlkyo7().b[20][1]++, this.generateAuditId())
    });
    /* istanbul ignore next */
    cov_uzcmlkyo7().s[54]++;
    this.auditLogger.info('AUDIT_EVENT', enrichedEntry);
  }
  /**
   * Log security events and incidents
   * Specialized logging for security monitoring
   *
   * @param eventType - Type of security event
   * @param message - Security event message
   * @param meta - Security event metadata
   */
  security(eventType, message, meta) {
    /* istanbul ignore next */
    cov_uzcmlkyo7().f[16]++;
    const securityMeta =
    /* istanbul ignore next */
    (cov_uzcmlkyo7().s[55]++, {
      ...this.enrichMetadata(meta),
      eventType,
      securityLevel:
      /* istanbul ignore next */
      (cov_uzcmlkyo7().b[21][0]++, meta?.classification) ||
      /* istanbul ignore next */
      (cov_uzcmlkyo7().b[21][1]++, 'INTERNAL'),
      timestamp: new Date().toISOString()
    });
    /* istanbul ignore next */
    cov_uzcmlkyo7().s[56]++;
    this.securityLogger.info(message, securityMeta);
  }
  /**
   * Log trading operations and market data
   * Specialized logging for financial operations
   *
   * @param operation - Trading operation type
   * @param message - Trading message
   * @param meta - Trading metadata
   */
  trading(operation, message, meta) {
    /* istanbul ignore next */
    cov_uzcmlkyo7().f[17]++;
    const tradingMeta =
    /* istanbul ignore next */
    (cov_uzcmlkyo7().s[57]++, {
      ...this.enrichMetadata(meta),
      operation,
      timestamp: new Date().toISOString()
    });
    /* istanbul ignore next */
    cov_uzcmlkyo7().s[58]++;
    this.tradingLogger.info(message, tradingMeta);
  }
  /**
   * Enrich metadata with common fields
   * Adds standard fields to all log entries
   *
   * @param meta - Original metadata
   * @returns LogMetadata Enriched metadata
   */
  enrichMetadata(meta) {
    /* istanbul ignore next */
    cov_uzcmlkyo7().f[18]++;
    cov_uzcmlkyo7().s[59]++;
    return {
      ...meta,
      component:
      /* istanbul ignore next */
      (cov_uzcmlkyo7().b[22][0]++, meta?.component) ||
      /* istanbul ignore next */
      (cov_uzcmlkyo7().b[22][1]++, this.componentName),
      pid: process.pid,
      hostname: require('os').hostname(),
      nodeVersion: process.version,
      environment:
      /* istanbul ignore next */
      (cov_uzcmlkyo7().b[23][0]++, process.env.NODE_ENV) ||
      /* istanbul ignore next */
      (cov_uzcmlkyo7().b[23][1]++, 'development')
    };
  }
  /**
   * Generate unique audit ID
   * Creates a unique identifier for audit trail entries
   *
   * @returns string Unique audit ID
   */
  generateAuditId() {
    /* istanbul ignore next */
    cov_uzcmlkyo7().f[19]++;
    const timestamp =
    /* istanbul ignore next */
    (cov_uzcmlkyo7().s[60]++, Date.now().toString(36));
    const random =
    /* istanbul ignore next */
    (cov_uzcmlkyo7().s[61]++, Math.random().toString(36).substring(2));
    /* istanbul ignore next */
    cov_uzcmlkyo7().s[62]++;
    return `audit_${timestamp}_${random}`;
  }
  /**
   * Get logger statistics and health information
   * Returns current logging status for monitoring
   *
   * @returns Object containing logger statistics
   */
  getStats() {
    /* istanbul ignore next */
    cov_uzcmlkyo7().f[20]++;
    cov_uzcmlkyo7().s[63]++;
    return {
      mainLogger: {
        level: this.winston.level,
        transports: this.winston.transports.length
      },
      auditLogger: {
        level: this.auditLogger.level,
        transports: this.auditLogger.transports.length
      },
      securityLogger: {
        level: this.securityLogger.level,
        transports: this.securityLogger.transports.length
      },
      tradingLogger: {
        level: this.tradingLogger.level,
        transports: this.tradingLogger.transports.length
      },
      timestamp: Date.now()
    };
  }
}
/* istanbul ignore next */
cov_uzcmlkyo7().s[64]++;
exports.Logger = Logger;
// Create and export singleton logger instance
/* istanbul ignore next */
cov_uzcmlkyo7().s[65]++;
exports.logger = new Logger();
// =============================================================================
// LOGGING SECURITY NOTES
// =============================================================================
// 1. All sensitive data is automatically sanitized before logging
// 2. Audit logs are kept for 1 year for compliance requirements
// 3. Security logs are kept for 1 year for incident investigation
// 4. Log files are automatically rotated and compressed
// 5. Log directories have restricted permissions (750)
// 6. Never manually log sensitive information like API keys or passwords
// 7. Use appropriate log levels to control information exposure
// 8. Monitor log files for unauthorized access or tampering
// =============================================================================
//# sourceMappingURL=data:application/json;charset=utf-8;base64,