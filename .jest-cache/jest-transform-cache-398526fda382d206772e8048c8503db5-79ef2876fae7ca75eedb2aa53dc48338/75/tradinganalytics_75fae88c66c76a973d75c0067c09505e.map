{"version":3,"names":["cov_oh7dct0h6","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","events_1","require","trading_logger_1","enhanced_logger_1","promises_1","__importDefault","path_1","TradingAnalytics","EventEmitter","reportsDir","analyticsHistory","Map","performanceCache","constructor","initializeReportsDirectory","default","mkdir","recursive","join","tradingLogger","info","component","error","generateDailyReport","date","Date","startDate","setHours","endDate","metrics","calculatePerformanceMetrics","savePerformanceReport","logWithEmoji","LogEmojis","REPORT","totalTrades","totalPnL","toFixed","period","trades","pnl","successRate","emit","generateWeeklyReport","setDate","getDate","getDay","generateMonthlyReport","getFullYear","getMonth","analyzeStrategyEffectiveness","strategyName","periodMatch","match","value","parseInt","unit","setMonth","strategyData","getStrategyData","performance","total","length","successful","filter","t","failed","profitLoss","reduce","sum","average","best","Math","max","map","worst","min","profitFactor","riskMetrics","maxDrawdown","calculateMaxDrawdown","sharpeRatio","calculateSharpeRatio","volatility","calculateVolatility","var95","calculateVaR","marketConditions","bullishPerformance","calculateMarketConditionPerformance","bearishPerformance","neutralPerformance","volatilityCorrelation","calculateVolatilityCorrelation","recommendations","profits","losses","abs","Infinity","generateStrategyRecommendations","saveStrategyAnalysis","TRADING","analyzeMarketCorrelations","symbol","marketData","getMarketData","tradingData","getTradingData","analysis","correlations","priceMovement","calculatePriceCorrelation","volumeCorrelation","calculateVolumeCorrelation","sentimentCorrelation","calculateSentimentCorrelation","tradingResults","bullishMarkets","analyzeMarketConditionResults","bearishMarkets","neutralMarkets","insights","generateMarketInsights","saveCorrelationAnalysis","TREND_UP","generateRiskAssessmentReport","portfolioData","getPortfolioData","getAllTradingData","report","portfolioMetrics","totalValue","allocation","concentration","calculateConcentration","diversificationRatio","calculateDiversificationRatio","positionSizing","averagePosition","calculateAveragePosition","maxPosition","calculateMaxPosition","positionSizeDistribution","calculatePositionSizeDistribution","riskPerTrade","calculateRiskPerTrade","portfolioVaR","calculatePortfolioVaR","expectedShortfall","calculateExpectedShortfall","beta","calculateBeta","riskFactors","identifyRiskFactors","generateRiskRecommendations","saveRiskAssessment","SECURITY","generateOptimizationRecommendations","dailyMetrics","weeklyMetrics","push","category","priority","recommendation","expectedImpact","implementation","riskLevel","timeframe","currentSuccessRate","targetSuccessRate","currentDrawdown","targetDrawdown","tradingFrequency","currentFrequency","targetFrequency","marketVolatility","calculateCurrentMarketVolatility","currentVolatility","normalVolatility","saveOptimizationRecommendations","INSIGHT","recommendationCount","highPriority","r","compareStrategies","strategyNames","comparisons","generateComparativeInsights","saveStrategyComparison","BALANCE","strategies","bestStrategy","current","comparison","successfulTrades","failedTrades","totalVolume","averagePnL","maxProfit","maxLoss","winLossRatio","averageHoldTime","marketCondition","timestamp","peak","runningPnL","trade","drawdown","returns","avgReturn","variance","pow","stdDev","sqrt","confidence","sort","a","index","floor","condition","conditionTrades","mostConsistent","avgPnL","filename","toISOString","split","filepath","writeFile","JSON","stringify","exports","tradingAnalytics"],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\core\\analytics\\trading-analytics.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * TRADING ANALYTICS AND REPORTING SYSTEM\r\n * =============================================================================\r\n * \r\n * This module provides comprehensive trading analytics, performance reports,\r\n * strategy effectiveness analysis, and automated optimization recommendations.\r\n * \r\n * Features:\r\n * - Daily/weekly/monthly trading performance reports\r\n * - Strategy effectiveness analysis with profit/loss breakdowns\r\n * - Market condition correlation analysis\r\n * - Risk assessment reports with position sizing analysis\r\n * - Automated performance optimization recommendations\r\n * - Comparative analysis between trading strategies\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * =============================================================================\r\n */\r\n\r\nimport { EventEmitter } from 'events';\r\nimport { tradingLogger } from '../logging/trading-logger';\r\nimport { LogEmojis } from '../logging/enhanced-logger';\r\nimport fs from 'fs/promises';\r\nimport path from 'path';\r\n\r\n/**\r\n * Trading performance metrics interface\r\n */\r\ninterface TradingPerformanceMetrics {\r\n  period: 'daily' | 'weekly' | 'monthly';\r\n  startDate: Date;\r\n  endDate: Date;\r\n  totalTrades: number;\r\n  successfulTrades: number;\r\n  failedTrades: number;\r\n  successRate: number;\r\n  totalVolume: number;\r\n  totalPnL: number;\r\n  averagePnL: number;\r\n  maxProfit: number;\r\n  maxLoss: number;\r\n  winLossRatio: number;\r\n  sharpeRatio: number;\r\n  maxDrawdown: number;\r\n  profitFactor: number;\r\n  averageHoldTime: number;\r\n  tradingFrequency: number;\r\n}\r\n\r\n/**\r\n * Strategy performance interface\r\n */\r\ninterface StrategyPerformance {\r\n  strategyName: string;\r\n  period: string;\r\n  trades: {\r\n    total: number;\r\n    successful: number;\r\n    failed: number;\r\n    successRate: number;\r\n  };\r\n  profitLoss: {\r\n    total: number;\r\n    average: number;\r\n    best: number;\r\n    worst: number;\r\n    profitFactor: number;\r\n  };\r\n  riskMetrics: {\r\n    maxDrawdown: number;\r\n    sharpeRatio: number;\r\n    volatility: number;\r\n    var95: number; // Value at Risk 95%\r\n  };\r\n  marketConditions: {\r\n    bullishPerformance: number;\r\n    bearishPerformance: number;\r\n    neutralPerformance: number;\r\n    volatilityCorrelation: number;\r\n  };\r\n  recommendations: string[];\r\n}\r\n\r\n/**\r\n * Market correlation analysis interface\r\n */\r\ninterface MarketCorrelationAnalysis {\r\n  symbol: string;\r\n  period: string;\r\n  correlations: {\r\n    priceMovement: number;\r\n    volumeCorrelation: number;\r\n    volatilityCorrelation: number;\r\n    sentimentCorrelation: number;\r\n  };\r\n  tradingResults: {\r\n    bullishMarkets: {\r\n      trades: number;\r\n      successRate: number;\r\n      avgPnL: number;\r\n    };\r\n    bearishMarkets: {\r\n      trades: number;\r\n      successRate: number;\r\n      avgPnL: number;\r\n    };\r\n    neutralMarkets: {\r\n      trades: number;\r\n      successRate: number;\r\n      avgPnL: number;\r\n    };\r\n  };\r\n  insights: string[];\r\n}\r\n\r\n/**\r\n * Risk assessment report interface\r\n */\r\ninterface RiskAssessmentReport {\r\n  period: string;\r\n  portfolioMetrics: {\r\n    totalValue: number;\r\n    allocation: Record<string, number>;\r\n    concentration: number;\r\n    diversificationRatio: number;\r\n  };\r\n  positionSizing: {\r\n    averagePosition: number;\r\n    maxPosition: number;\r\n    positionSizeDistribution: Record<string, number>;\r\n    riskPerTrade: number;\r\n  };\r\n  riskMetrics: {\r\n    portfolioVaR: number;\r\n    expectedShortfall: number;\r\n    maxDrawdown: number;\r\n    volatility: number;\r\n    beta: number;\r\n  };\r\n  riskFactors: {\r\n    factor: string;\r\n    exposure: number;\r\n    impact: 'low' | 'medium' | 'high';\r\n    mitigation: string;\r\n  }[];\r\n  recommendations: string[];\r\n}\r\n\r\n/**\r\n * Performance optimization recommendations interface\r\n */\r\ninterface OptimizationRecommendations {\r\n  category: 'strategy' | 'risk' | 'execution' | 'market_timing';\r\n  priority: 'high' | 'medium' | 'low';\r\n  recommendation: string;\r\n  expectedImpact: string;\r\n  implementation: string;\r\n  riskLevel: 'low' | 'medium' | 'high';\r\n  timeframe: string;\r\n  metrics: Record<string, number>;\r\n}\r\n\r\n/**\r\n * Trading analytics and reporting service\r\n */\r\nexport class TradingAnalytics extends EventEmitter {\r\n  private reportsDir: string;\r\n  private analyticsHistory: Map<string, any[]> = new Map();\r\n  private performanceCache: Map<string, any> = new Map();\r\n\r\n  constructor(reportsDir: string = './reports') {\r\n    super();\r\n    this.reportsDir = reportsDir;\r\n    this.initializeReportsDirectory();\r\n  }\r\n\r\n  /**\r\n   * Initialize reports directory\r\n   */\r\n  private async initializeReportsDirectory(): Promise<void> {\r\n    try {\r\n      await fs.mkdir(this.reportsDir, { recursive: true });\r\n      await fs.mkdir(path.join(this.reportsDir, 'daily'), { recursive: true });\r\n      await fs.mkdir(path.join(this.reportsDir, 'weekly'), { recursive: true });\r\n      await fs.mkdir(path.join(this.reportsDir, 'monthly'), { recursive: true });\r\n      await fs.mkdir(path.join(this.reportsDir, 'analytics'), { recursive: true });\r\n      \r\n      tradingLogger.info('Trading analytics reports directory initialized', {\r\n        component: 'TradingAnalytics',\r\n        reportsDir: this.reportsDir\r\n      });\r\n    } catch (error) {\r\n      tradingLogger.error('Failed to initialize reports directory', error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate daily trading performance report\r\n   */\r\n  public async generateDailyReport(date: Date = new Date()): Promise<TradingPerformanceMetrics> {\r\n    const startDate = new Date(date);\r\n    startDate.setHours(0, 0, 0, 0);\r\n    \r\n    const endDate = new Date(date);\r\n    endDate.setHours(23, 59, 59, 999);\r\n\r\n    const metrics = await this.calculatePerformanceMetrics('daily', startDate, endDate);\r\n    \r\n    // Generate report file\r\n    await this.savePerformanceReport(metrics, 'daily');\r\n    \r\n    tradingLogger.logWithEmoji(\r\n      'info',\r\n      LogEmojis.REPORT,\r\n      `Daily trading report generated: ${metrics.totalTrades} trades, $${metrics.totalPnL.toFixed(2)} P&L`,\r\n      {\r\n        component: 'TradingAnalytics',\r\n        period: 'daily',\r\n        metrics: {\r\n          trades: metrics.totalTrades,\r\n          pnl: metrics.totalPnL,\r\n          successRate: metrics.successRate\r\n        }\r\n      }\r\n    );\r\n\r\n    this.emit('daily_report_generated', metrics);\r\n    return metrics;\r\n  }\r\n\r\n  /**\r\n   * Generate weekly trading performance report\r\n   */\r\n  public async generateWeeklyReport(date: Date = new Date()): Promise<TradingPerformanceMetrics> {\r\n    const startDate = new Date(date);\r\n    startDate.setDate(date.getDate() - date.getDay()); // Start of week\r\n    startDate.setHours(0, 0, 0, 0);\r\n    \r\n    const endDate = new Date(startDate);\r\n    endDate.setDate(startDate.getDate() + 6); // End of week\r\n    endDate.setHours(23, 59, 59, 999);\r\n\r\n    const metrics = await this.calculatePerformanceMetrics('weekly', startDate, endDate);\r\n    \r\n    // Generate report file\r\n    await this.savePerformanceReport(metrics, 'weekly');\r\n    \r\n    tradingLogger.logWithEmoji(\r\n      'info',\r\n      LogEmojis.REPORT,\r\n      `Weekly trading report generated: ${metrics.totalTrades} trades, $${metrics.totalPnL.toFixed(2)} P&L`,\r\n      {\r\n        component: 'TradingAnalytics',\r\n        period: 'weekly',\r\n        metrics: {\r\n          trades: metrics.totalTrades,\r\n          pnl: metrics.totalPnL,\r\n          successRate: metrics.successRate\r\n        }\r\n      }\r\n    );\r\n\r\n    this.emit('weekly_report_generated', metrics);\r\n    return metrics;\r\n  }\r\n\r\n  /**\r\n   * Generate monthly trading performance report\r\n   */\r\n  public async generateMonthlyReport(date: Date = new Date()): Promise<TradingPerformanceMetrics> {\r\n    const startDate = new Date(date.getFullYear(), date.getMonth(), 1);\r\n    const endDate = new Date(date.getFullYear(), date.getMonth() + 1, 0, 23, 59, 59, 999);\r\n\r\n    const metrics = await this.calculatePerformanceMetrics('monthly', startDate, endDate);\r\n    \r\n    // Generate report file\r\n    await this.savePerformanceReport(metrics, 'monthly');\r\n    \r\n    tradingLogger.logWithEmoji(\r\n      'info',\r\n      LogEmojis.REPORT,\r\n      `Monthly trading report generated: ${metrics.totalTrades} trades, $${metrics.totalPnL.toFixed(2)} P&L`,\r\n      {\r\n        component: 'TradingAnalytics',\r\n        period: 'monthly',\r\n        metrics: {\r\n          trades: metrics.totalTrades,\r\n          pnl: metrics.totalPnL,\r\n          successRate: metrics.successRate\r\n        }\r\n      }\r\n    );\r\n\r\n    this.emit('monthly_report_generated', metrics);\r\n    return metrics;\r\n  }\r\n\r\n  /**\r\n   * Analyze strategy effectiveness\r\n   */\r\n  public async analyzeStrategyEffectiveness(\r\n    strategyName: string,\r\n    period: string = '30d'\r\n  ): Promise<StrategyPerformance> {\r\n    const endDate = new Date();\r\n    const startDate = new Date();\r\n    \r\n    // Parse period (e.g., '30d', '7d', '1m')\r\n    const periodMatch = period.match(/^(\\d+)([dwm])$/);\r\n    if (periodMatch) {\r\n      const value = parseInt(periodMatch[1]);\r\n      const unit = periodMatch[2];\r\n      \r\n      switch (unit) {\r\n        case 'd':\r\n          startDate.setDate(endDate.getDate() - value);\r\n          break;\r\n        case 'w':\r\n          startDate.setDate(endDate.getDate() - (value * 7));\r\n          break;\r\n        case 'm':\r\n          startDate.setMonth(endDate.getMonth() - value);\r\n          break;\r\n      }\r\n    }\r\n\r\n    // This would typically query the database for strategy-specific trades\r\n    const strategyData = await this.getStrategyData(strategyName, startDate, endDate);\r\n    \r\n    const performance: StrategyPerformance = {\r\n      strategyName,\r\n      period,\r\n      trades: {\r\n        total: strategyData.trades.length,\r\n        successful: strategyData.trades.filter((t: any) => t.pnl > 0).length,\r\n        failed: strategyData.trades.filter((t: any) => t.pnl <= 0).length,\r\n        successRate: 0\r\n      },\r\n      profitLoss: {\r\n        total: strategyData.trades.reduce((sum: number, t: any) => sum + t.pnl, 0),\r\n        average: 0,\r\n        best: Math.max(...strategyData.trades.map((t: any) => t.pnl), 0),\r\n        worst: Math.min(...strategyData.trades.map((t: any) => t.pnl), 0),\r\n        profitFactor: 0\r\n      },\r\n      riskMetrics: {\r\n        maxDrawdown: this.calculateMaxDrawdown(strategyData.trades),\r\n        sharpeRatio: this.calculateSharpeRatio(strategyData.trades),\r\n        volatility: this.calculateVolatility(strategyData.trades),\r\n        var95: this.calculateVaR(strategyData.trades, 0.95)\r\n      },\r\n      marketConditions: {\r\n        bullishPerformance: this.calculateMarketConditionPerformance(strategyData.trades, 'bullish'),\r\n        bearishPerformance: this.calculateMarketConditionPerformance(strategyData.trades, 'bearish'),\r\n        neutralPerformance: this.calculateMarketConditionPerformance(strategyData.trades, 'neutral'),\r\n        volatilityCorrelation: this.calculateVolatilityCorrelation(strategyData.trades)\r\n      },\r\n      recommendations: []\r\n    };\r\n\r\n    // Calculate derived metrics\r\n    performance.trades.successRate = performance.trades.total > 0 ? \r\n      (performance.trades.successful / performance.trades.total) * 100 : 0;\r\n    \r\n    performance.profitLoss.average = performance.trades.total > 0 ? \r\n      performance.profitLoss.total / performance.trades.total : 0;\r\n\r\n    const profits = strategyData.trades.filter((t: any) => t.pnl > 0).reduce((sum: number, t: any) => sum + t.pnl, 0);\r\n    const losses = Math.abs(strategyData.trades.filter((t: any) => t.pnl < 0).reduce((sum: number, t: any) => sum + t.pnl, 0));\r\n    performance.profitLoss.profitFactor = losses > 0 ? profits / losses : profits > 0 ? Infinity : 0;\r\n\r\n    // Generate recommendations\r\n    performance.recommendations = this.generateStrategyRecommendations(performance);\r\n\r\n    // Save strategy analysis\r\n    await this.saveStrategyAnalysis(performance);\r\n\r\n    tradingLogger.logWithEmoji(\r\n      'info',\r\n      LogEmojis.TRADING,\r\n      `Strategy analysis completed: ${strategyName} - ${performance.trades.successRate.toFixed(1)}% success rate`,\r\n      {\r\n        component: 'TradingAnalytics',\r\n        strategyName,\r\n        period,\r\n        performance: {\r\n          successRate: performance.trades.successRate,\r\n          totalPnL: performance.profitLoss.total,\r\n          sharpeRatio: performance.riskMetrics.sharpeRatio\r\n        }\r\n      }\r\n    );\r\n\r\n    this.emit('strategy_analysis_completed', performance);\r\n    return performance;\r\n  }\r\n\r\n  /**\r\n   * Analyze market condition correlations\r\n   */\r\n  public async analyzeMarketCorrelations(\r\n    symbol: string,\r\n    period: string = '30d'\r\n  ): Promise<MarketCorrelationAnalysis> {\r\n    const endDate = new Date();\r\n    const startDate = new Date();\r\n    startDate.setDate(endDate.getDate() - 30); // Default 30 days\r\n\r\n    // This would typically query market data and trading results\r\n    const marketData = await this.getMarketData(symbol, startDate, endDate);\r\n    const tradingData = await this.getTradingData(symbol, startDate, endDate);\r\n\r\n    const analysis: MarketCorrelationAnalysis = {\r\n      symbol,\r\n      period,\r\n      correlations: {\r\n        priceMovement: this.calculatePriceCorrelation(marketData, tradingData),\r\n        volumeCorrelation: this.calculateVolumeCorrelation(marketData, tradingData),\r\n        volatilityCorrelation: this.calculateVolatilityCorrelation(tradingData),\r\n        sentimentCorrelation: this.calculateSentimentCorrelation(marketData, tradingData)\r\n      },\r\n      tradingResults: {\r\n        bullishMarkets: this.analyzeMarketConditionResults(tradingData, 'bullish'),\r\n        bearishMarkets: this.analyzeMarketConditionResults(tradingData, 'bearish'),\r\n        neutralMarkets: this.analyzeMarketConditionResults(tradingData, 'neutral')\r\n      },\r\n      insights: []\r\n    };\r\n\r\n    // Generate insights\r\n    analysis.insights = this.generateMarketInsights(analysis);\r\n\r\n    // Save correlation analysis\r\n    await this.saveCorrelationAnalysis(analysis);\r\n\r\n    tradingLogger.logWithEmoji(\r\n      'info',\r\n      LogEmojis.TREND_UP,\r\n      `Market correlation analysis completed for ${symbol}`,\r\n      {\r\n        component: 'TradingAnalytics',\r\n        symbol,\r\n        period,\r\n        correlations: analysis.correlations\r\n      }\r\n    );\r\n\r\n    this.emit('correlation_analysis_completed', analysis);\r\n    return analysis;\r\n  }\r\n\r\n  /**\r\n   * Generate risk assessment report\r\n   */\r\n  public async generateRiskAssessmentReport(period: string = '30d'): Promise<RiskAssessmentReport> {\r\n    const endDate = new Date();\r\n    const startDate = new Date();\r\n    startDate.setDate(endDate.getDate() - 30);\r\n\r\n    // This would typically query portfolio and trading data\r\n    const portfolioData = await this.getPortfolioData(startDate, endDate);\r\n    const tradingData = await this.getAllTradingData(startDate, endDate);\r\n\r\n    const report: RiskAssessmentReport = {\r\n      period,\r\n      portfolioMetrics: {\r\n        totalValue: portfolioData.totalValue,\r\n        allocation: portfolioData.allocation,\r\n        concentration: this.calculateConcentration(portfolioData.allocation),\r\n        diversificationRatio: this.calculateDiversificationRatio(portfolioData.allocation)\r\n      },\r\n      positionSizing: {\r\n        averagePosition: this.calculateAveragePosition(tradingData),\r\n        maxPosition: this.calculateMaxPosition(tradingData),\r\n        positionSizeDistribution: this.calculatePositionSizeDistribution(tradingData),\r\n        riskPerTrade: this.calculateRiskPerTrade(tradingData)\r\n      },\r\n      riskMetrics: {\r\n        portfolioVaR: this.calculatePortfolioVaR(portfolioData, tradingData),\r\n        expectedShortfall: this.calculateExpectedShortfall(tradingData),\r\n        maxDrawdown: this.calculateMaxDrawdown(tradingData),\r\n        volatility: this.calculateVolatility(tradingData),\r\n        beta: this.calculateBeta(tradingData)\r\n      },\r\n      riskFactors: this.identifyRiskFactors(portfolioData, tradingData),\r\n      recommendations: []\r\n    };\r\n\r\n    // Generate risk recommendations\r\n    report.recommendations = this.generateRiskRecommendations(report);\r\n\r\n    // Save risk assessment\r\n    await this.saveRiskAssessment(report);\r\n\r\n    tradingLogger.logWithEmoji(\r\n      'info',\r\n      LogEmojis.SECURITY,\r\n      `Risk assessment report generated - Portfolio VaR: ${report.riskMetrics.portfolioVaR.toFixed(2)}%`,\r\n      {\r\n        component: 'TradingAnalytics',\r\n        period,\r\n        riskMetrics: report.riskMetrics\r\n      }\r\n    );\r\n\r\n    this.emit('risk_assessment_completed', report);\r\n    return report;\r\n  }\r\n\r\n  /**\r\n   * Generate automated performance optimization recommendations\r\n   */\r\n  public async generateOptimizationRecommendations(): Promise<OptimizationRecommendations[]> {\r\n    const recommendations: OptimizationRecommendations[] = [];\r\n\r\n    // Analyze recent performance\r\n    const dailyMetrics = await this.generateDailyReport();\r\n    const weeklyMetrics = await this.generateWeeklyReport();\r\n\r\n    // Strategy optimization recommendations\r\n    if (dailyMetrics.successRate < 60) {\r\n      recommendations.push({\r\n        category: 'strategy',\r\n        priority: 'high',\r\n        recommendation: 'Review and optimize trading strategies - success rate below 60%',\r\n        expectedImpact: 'Improve success rate by 10-15%',\r\n        implementation: 'Analyze failed trades, adjust entry/exit criteria, consider market condition filters',\r\n        riskLevel: 'medium',\r\n        timeframe: '1-2 weeks',\r\n        metrics: { currentSuccessRate: dailyMetrics.successRate, targetSuccessRate: 70 }\r\n      });\r\n    }\r\n\r\n    // Risk management recommendations\r\n    if (dailyMetrics.maxDrawdown > 10) {\r\n      recommendations.push({\r\n        category: 'risk',\r\n        priority: 'high',\r\n        recommendation: 'Implement stricter risk management - drawdown exceeds 10%',\r\n        expectedImpact: 'Reduce maximum drawdown by 30-50%',\r\n        implementation: 'Reduce position sizes, implement stop-losses, diversify strategies',\r\n        riskLevel: 'low',\r\n        timeframe: 'Immediate',\r\n        metrics: { currentDrawdown: dailyMetrics.maxDrawdown, targetDrawdown: 5 }\r\n      });\r\n    }\r\n\r\n    // Execution optimization recommendations\r\n    if (dailyMetrics.tradingFrequency > 50) {\r\n      recommendations.push({\r\n        category: 'execution',\r\n        priority: 'medium',\r\n        recommendation: 'Consider reducing trading frequency to improve quality',\r\n        expectedImpact: 'Improve average P&L per trade by 20-30%',\r\n        implementation: 'Increase signal confidence thresholds, implement trade filtering',\r\n        riskLevel: 'low',\r\n        timeframe: '1 week',\r\n        metrics: { currentFrequency: dailyMetrics.tradingFrequency, targetFrequency: 30 }\r\n      });\r\n    }\r\n\r\n    // Market timing recommendations\r\n    const marketVolatility = this.calculateCurrentMarketVolatility();\r\n    if (marketVolatility > 0.3) {\r\n      recommendations.push({\r\n        category: 'market_timing',\r\n        priority: 'medium',\r\n        recommendation: 'Adjust strategy for high volatility market conditions',\r\n        expectedImpact: 'Reduce volatility impact on performance by 25%',\r\n        implementation: 'Implement volatility-based position sizing, use wider stop-losses',\r\n        riskLevel: 'medium',\r\n        timeframe: '3-5 days',\r\n        metrics: { currentVolatility: marketVolatility, normalVolatility: 0.2 }\r\n      });\r\n    }\r\n\r\n    // Save optimization recommendations\r\n    await this.saveOptimizationRecommendations(recommendations);\r\n\r\n    tradingLogger.logWithEmoji(\r\n      'info',\r\n      LogEmojis.INSIGHT,\r\n      `Generated ${recommendations.length} optimization recommendations`,\r\n      {\r\n        component: 'TradingAnalytics',\r\n        recommendationCount: recommendations.length,\r\n        highPriority: recommendations.filter(r => r.priority === 'high').length\r\n      }\r\n    );\r\n\r\n    this.emit('optimization_recommendations_generated', recommendations);\r\n    return recommendations;\r\n  }\r\n\r\n  /**\r\n   * Compare multiple trading strategies\r\n   */\r\n  public async compareStrategies(\r\n    strategyNames: string[],\r\n    period: string = '30d'\r\n  ): Promise<{ comparison: StrategyPerformance[]; insights: string[] }> {\r\n    const comparisons: StrategyPerformance[] = [];\r\n\r\n    // Analyze each strategy\r\n    for (const strategyName of strategyNames) {\r\n      const performance = await this.analyzeStrategyEffectiveness(strategyName, period);\r\n      comparisons.push(performance);\r\n    }\r\n\r\n    // Generate comparative insights\r\n    const insights = this.generateComparativeInsights(comparisons);\r\n\r\n    // Save strategy comparison\r\n    await this.saveStrategyComparison({ comparisons, insights, period });\r\n\r\n    tradingLogger.logWithEmoji(\r\n      'info',\r\n      LogEmojis.BALANCE,\r\n      `Strategy comparison completed for ${strategyNames.length} strategies`,\r\n      {\r\n        component: 'TradingAnalytics',\r\n        strategies: strategyNames,\r\n        period,\r\n        bestStrategy: comparisons.reduce((best, current) => \r\n          current.profitLoss.total > best.profitLoss.total ? current : best\r\n        ).strategyName\r\n      }\r\n    );\r\n\r\n    this.emit('strategy_comparison_completed', { comparisons, insights });\r\n    return { comparison: comparisons, insights };\r\n  }\r\n\r\n  // Helper methods for calculations (simplified implementations)\r\n  \r\n  private async calculatePerformanceMetrics(\r\n    period: 'daily' | 'weekly' | 'monthly',\r\n    startDate: Date,\r\n    endDate: Date\r\n  ): Promise<TradingPerformanceMetrics> {\r\n    // This would typically query the database for actual trading data\r\n    // For now, returning mock data structure\r\n    return {\r\n      period,\r\n      startDate,\r\n      endDate,\r\n      totalTrades: 25,\r\n      successfulTrades: 18,\r\n      failedTrades: 7,\r\n      successRate: 72,\r\n      totalVolume: 50000,\r\n      totalPnL: 1250.50,\r\n      averagePnL: 50.02,\r\n      maxProfit: 350.75,\r\n      maxLoss: -125.25,\r\n      winLossRatio: 2.57,\r\n      sharpeRatio: 1.85,\r\n      maxDrawdown: 5.2,\r\n      profitFactor: 2.8,\r\n      averageHoldTime: 4.5,\r\n      tradingFrequency: 8.3\r\n    };\r\n  }\r\n\r\n  private async getStrategyData(strategyName: string, startDate: Date, endDate: Date): Promise<any> {\r\n    // Mock strategy data - would be replaced with actual database query\r\n    return {\r\n      trades: [\r\n        { pnl: 125.50, marketCondition: 'bullish', timestamp: new Date() },\r\n        { pnl: -45.25, marketCondition: 'bearish', timestamp: new Date() },\r\n        // ... more trades\r\n      ]\r\n    };\r\n  }\r\n\r\n  private calculateMaxDrawdown(trades: any[]): number {\r\n    // Simplified drawdown calculation\r\n    let maxDrawdown = 0;\r\n    let peak = 0;\r\n    let runningPnL = 0;\r\n\r\n    for (const trade of trades) {\r\n      runningPnL += trade.pnl;\r\n      if (runningPnL > peak) {\r\n        peak = runningPnL;\r\n      }\r\n      const drawdown = (peak - runningPnL) / peak * 100;\r\n      if (drawdown > maxDrawdown) {\r\n        maxDrawdown = drawdown;\r\n      }\r\n    }\r\n\r\n    return maxDrawdown;\r\n  }\r\n\r\n  private calculateSharpeRatio(trades: any[]): number {\r\n    if (trades.length === 0) return 0;\r\n    \r\n    const returns = trades.map(t => t.pnl);\r\n    const avgReturn = returns.reduce((sum, r) => sum + r, 0) / returns.length;\r\n    const variance = returns.reduce((sum, r) => sum + Math.pow(r - avgReturn, 2), 0) / returns.length;\r\n    const stdDev = Math.sqrt(variance);\r\n    \r\n    return stdDev > 0 ? avgReturn / stdDev : 0;\r\n  }\r\n\r\n  private calculateVolatility(trades: any[]): number {\r\n    if (trades.length === 0) return 0;\r\n    \r\n    const returns = trades.map(t => t.pnl);\r\n    const avgReturn = returns.reduce((sum, r) => sum + r, 0) / returns.length;\r\n    const variance = returns.reduce((sum, r) => sum + Math.pow(r - avgReturn, 2), 0) / returns.length;\r\n    \r\n    return Math.sqrt(variance);\r\n  }\r\n\r\n  private calculateVaR(trades: any[], confidence: number): number {\r\n    if (trades.length === 0) return 0;\r\n    \r\n    const returns = trades.map(t => t.pnl).sort((a, b) => a - b);\r\n    const index = Math.floor((1 - confidence) * returns.length);\r\n    \r\n    return Math.abs(returns[index] || 0);\r\n  }\r\n\r\n  private calculateMarketConditionPerformance(trades: any[], condition: string): number {\r\n    const conditionTrades = trades.filter(t => t.marketCondition === condition);\r\n    if (conditionTrades.length === 0) return 0;\r\n    \r\n    return conditionTrades.reduce((sum, t) => sum + t.pnl, 0) / conditionTrades.length;\r\n  }\r\n\r\n  private calculateVolatilityCorrelation(trades: any[]): number {\r\n    // Simplified correlation calculation\r\n    return 0.65; // Mock value\r\n  }\r\n\r\n  private calculateCurrentMarketVolatility(): number {\r\n    // Mock current market volatility\r\n    return 0.25;\r\n  }\r\n\r\n  private generateStrategyRecommendations(performance: StrategyPerformance): string[] {\r\n    const recommendations: string[] = [];\r\n    \r\n    if (performance.trades.successRate < 60) {\r\n      recommendations.push('Consider tightening entry criteria to improve success rate');\r\n    }\r\n    \r\n    if (performance.riskMetrics.maxDrawdown > 10) {\r\n      recommendations.push('Implement stricter risk management to reduce drawdown');\r\n    }\r\n    \r\n    if (performance.riskMetrics.sharpeRatio < 1.0) {\r\n      recommendations.push('Optimize risk-adjusted returns by reducing position sizes in volatile conditions');\r\n    }\r\n    \r\n    return recommendations;\r\n  }\r\n\r\n  private generateComparativeInsights(comparisons: StrategyPerformance[]): string[] {\r\n    const insights: string[] = [];\r\n    \r\n    const bestStrategy = comparisons.reduce((best, current) => \r\n      current.profitLoss.total > best.profitLoss.total ? current : best\r\n    );\r\n    \r\n    insights.push(`Best performing strategy: ${bestStrategy.strategyName} with $${bestStrategy.profitLoss.total.toFixed(2)} total P&L`);\r\n    \r\n    const mostConsistent = comparisons.reduce((best, current) => \r\n      current.riskMetrics.sharpeRatio > best.riskMetrics.sharpeRatio ? current : best\r\n    );\r\n    \r\n    insights.push(`Most consistent strategy: ${mostConsistent.strategyName} with ${mostConsistent.riskMetrics.sharpeRatio.toFixed(2)} Sharpe ratio`);\r\n    \r\n    return insights;\r\n  }\r\n\r\n  // Additional helper methods would be implemented here...\r\n  private async getMarketData(symbol: string, startDate: Date, endDate: Date): Promise<any> { return {}; }\r\n  private async getTradingData(symbol: string, startDate: Date, endDate: Date): Promise<any> { return []; }\r\n  private async getPortfolioData(startDate: Date, endDate: Date): Promise<any> { return {}; }\r\n  private async getAllTradingData(startDate: Date, endDate: Date): Promise<any> { return []; }\r\n  \r\n  private calculatePriceCorrelation(marketData: any, tradingData: any): number { return 0.75; }\r\n  private calculateVolumeCorrelation(marketData: any, tradingData: any): number { return 0.65; }\r\n  private calculateSentimentCorrelation(marketData: any, tradingData: any): number { return 0.55; }\r\n  private analyzeMarketConditionResults(tradingData: any, condition: string): any { \r\n    return { trades: 10, successRate: 70, avgPnL: 25.5 }; \r\n  }\r\n  private generateMarketInsights(analysis: MarketCorrelationAnalysis): string[] { return []; }\r\n  \r\n  private calculateConcentration(allocation: Record<string, number>): number { return 0.3; }\r\n  private calculateDiversificationRatio(allocation: Record<string, number>): number { return 0.8; }\r\n  private calculateAveragePosition(tradingData: any): number { return 1000; }\r\n  private calculateMaxPosition(tradingData: any): number { return 5000; }\r\n  private calculatePositionSizeDistribution(tradingData: any): Record<string, number> { return {}; }\r\n  private calculateRiskPerTrade(tradingData: any): number { return 2.5; }\r\n  private calculatePortfolioVaR(portfolioData: any, tradingData: any): number { return 5.2; }\r\n  private calculateExpectedShortfall(tradingData: any): number { return 7.8; }\r\n  private calculateBeta(tradingData: any): number { return 1.2; }\r\n  private identifyRiskFactors(portfolioData: any, tradingData: any): any[] { return []; }\r\n  private generateRiskRecommendations(report: RiskAssessmentReport): string[] { return []; }\r\n\r\n  // Save methods\r\n  private async savePerformanceReport(metrics: TradingPerformanceMetrics, period: string): Promise<void> {\r\n    const filename = `${period}-report-${new Date().toISOString().split('T')[0]}.json`;\r\n    const filepath = path.join(this.reportsDir, period, filename);\r\n    await fs.writeFile(filepath, JSON.stringify(metrics, null, 2));\r\n  }\r\n\r\n  private async saveStrategyAnalysis(performance: StrategyPerformance): Promise<void> {\r\n    const filename = `strategy-${performance.strategyName}-${new Date().toISOString().split('T')[0]}.json`;\r\n    const filepath = path.join(this.reportsDir, 'analytics', filename);\r\n    await fs.writeFile(filepath, JSON.stringify(performance, null, 2));\r\n  }\r\n\r\n  private async saveCorrelationAnalysis(analysis: MarketCorrelationAnalysis): Promise<void> {\r\n    const filename = `correlation-${analysis.symbol}-${new Date().toISOString().split('T')[0]}.json`;\r\n    const filepath = path.join(this.reportsDir, 'analytics', filename);\r\n    await fs.writeFile(filepath, JSON.stringify(analysis, null, 2));\r\n  }\r\n\r\n  private async saveRiskAssessment(report: RiskAssessmentReport): Promise<void> {\r\n    const filename = `risk-assessment-${new Date().toISOString().split('T')[0]}.json`;\r\n    const filepath = path.join(this.reportsDir, 'analytics', filename);\r\n    await fs.writeFile(filepath, JSON.stringify(report, null, 2));\r\n  }\r\n\r\n  private async saveOptimizationRecommendations(recommendations: OptimizationRecommendations[]): Promise<void> {\r\n    const filename = `optimization-${new Date().toISOString().split('T')[0]}.json`;\r\n    const filepath = path.join(this.reportsDir, 'analytics', filename);\r\n    await fs.writeFile(filepath, JSON.stringify(recommendations, null, 2));\r\n  }\r\n\r\n  private async saveStrategyComparison(comparison: any): Promise<void> {\r\n    const filename = `strategy-comparison-${new Date().toISOString().split('T')[0]}.json`;\r\n    const filepath = path.join(this.reportsDir, 'analytics', filename);\r\n    await fs.writeFile(filepath, JSON.stringify(comparison, null, 2));\r\n  }\r\n}\r\n\r\n// Create and export singleton instance\r\nexport const tradingAnalytics = new TradingAnalytics();\r\n\r\n// Export types\r\nexport type {\r\n  TradingPerformanceMetrics,\r\n  StrategyPerformance,\r\n  MarketCorrelationAnalysis,\r\n  RiskAssessmentReport,\r\n  OptimizationRecommendations\r\n};"],"mappings":"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","ignoreList":[]}