{"version":3,"names":["cov_dp0chv9am","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","PositionSizingEngine","riskParameters","constructor","calculatePositionSize","request","basePositionSize","calculateBasePositionSize","accountBalance","entryPrice","stopLossPrice","confidenceAdjustedSize","applyConfidenceAdjustment","confidence","volatilityAdjustedSize","applyVolatilityAdjustment","volatility","correlationAdjustment","calculateCorrelationAdjustment","symbol","existingPositions","finalPositionSize","accountRiskAmount","maxRiskPerTrade","actualRiskAmount","Math","abs","riskPercentage","positionValue","riskRewardRatio","calculateRiskRewardRatio","takeProfitPrice","validation","validatePositionSize","positionSize","approved","riskAmount","rejectionReasons","priceRisk","Error","baseSize","normalizedConfidence","max","min","confidenceMultiplier","volatilityMultiplier","volatilityAdjustmentFactor","length","correlationMatrix","calculateCorrelationMatrix","maxCorrelation","Array","from","correlations","values","maxCorrelationExposure","correlationExcess","newSymbol","Map","cryptoCorrelations","position","correlation","set","portfolioCorrelationRisk","calculatePortfolioCorrelationRisk","diversificationScore","calculateDiversificationScore","recommendations","size","correlationValues","avgCorrelation","reduce","sum","corr","portfolioRisk","risk","reward","push","toFixed","minRiskRewardRatio","positionPercentage","updateRiskParameters","newParameters","getRiskParameters","calculateScenarioAnalysis","baseRequest","scenarios","results","scenario","scenarioRequest","result","exports"],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\trading\\risk\\position-sizing-engine.ts"],"sourcesContent":["/**\r\n * Dynamic Position Sizing Engine\r\n * \r\n * Implements sophisticated position sizing based on:\r\n * - 2-3% risk per trade calculation\r\n * - Account balance and volatility considerations\r\n * - Confidence-based position size adjustment\r\n * - Correlation-based exposure limits\r\n */\r\n\r\nimport { \r\n  PositionSizeRequest, \r\n  PositionSizeResult, \r\n  RiskParameters, \r\n  Position,\r\n  CorrelationMatrix \r\n} from './types.js';\r\n\r\nexport class PositionSizingEngine {\r\n  private riskParameters: RiskParameters;\r\n\r\n  constructor(riskParameters: RiskParameters) {\r\n    this.riskParameters = riskParameters;\r\n  }\r\n\r\n  /**\r\n   * Calculate optimal position size based on multiple risk factors\r\n   */\r\n  async calculatePositionSize(request: PositionSizeRequest): Promise<PositionSizeResult> {\r\n    // Calculate base position size using risk percentage\r\n    const basePositionSize = this.calculateBasePositionSize(\r\n      request.accountBalance,\r\n      request.entryPrice,\r\n      request.stopLossPrice\r\n    );\r\n\r\n    // Apply confidence adjustment\r\n    const confidenceAdjustedSize = this.applyConfidenceAdjustment(\r\n      basePositionSize,\r\n      request.confidence\r\n    );\r\n\r\n    // Apply volatility adjustment\r\n    const volatilityAdjustedSize = this.applyVolatilityAdjustment(\r\n      confidenceAdjustedSize,\r\n      request.volatility\r\n    );\r\n\r\n    // Calculate correlation adjustment\r\n    const correlationAdjustment = await this.calculateCorrelationAdjustment(\r\n      request.symbol,\r\n      request.existingPositions\r\n    );\r\n\r\n    let finalPositionSize = volatilityAdjustedSize * correlationAdjustment;\r\n\r\n    // Calculate risk metrics\r\n    const accountRiskAmount = request.accountBalance * (this.riskParameters.maxRiskPerTrade / 100);\r\n    let actualRiskAmount = Math.abs(request.entryPrice - request.stopLossPrice) * finalPositionSize;\r\n    let riskPercentage = (actualRiskAmount / request.accountBalance) * 100;\r\n\r\n    // Ensure we don't exceed max risk per trade due to adjustments\r\n    if (riskPercentage > this.riskParameters.maxRiskPerTrade) {\r\n      finalPositionSize = accountRiskAmount / Math.abs(request.entryPrice - request.stopLossPrice);\r\n      actualRiskAmount = Math.abs(request.entryPrice - request.stopLossPrice) * finalPositionSize;\r\n      riskPercentage = (actualRiskAmount / request.accountBalance) * 100;\r\n    }\r\n\r\n    // Also ensure position value doesn't exceed account balance\r\n    const positionValue = finalPositionSize * request.entryPrice;\r\n    if (positionValue > request.accountBalance) {\r\n      finalPositionSize = request.accountBalance / request.entryPrice;\r\n      actualRiskAmount = Math.abs(request.entryPrice - request.stopLossPrice) * finalPositionSize;\r\n      riskPercentage = (actualRiskAmount / request.accountBalance) * 100;\r\n    }\r\n    const riskRewardRatio = this.calculateRiskRewardRatio(\r\n      request.entryPrice,\r\n      request.stopLossPrice,\r\n      request.takeProfitPrice\r\n    );\r\n\r\n    // Validate position size\r\n    const validation = this.validatePositionSize(\r\n      finalPositionSize,\r\n      riskPercentage,\r\n      riskRewardRatio,\r\n      request\r\n    );\r\n\r\n    return {\r\n      positionSize: validation.approved ? finalPositionSize : 0,\r\n      riskAmount: accountRiskAmount,\r\n      riskPercentage,\r\n      riskRewardRatio,\r\n      confidenceAdjustedSize,\r\n      correlationAdjustment,\r\n      approved: validation.approved,\r\n      rejectionReasons: validation.rejectionReasons\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculate base position size using 2-3% risk rule\r\n   */\r\n  private calculateBasePositionSize(\r\n    accountBalance: number,\r\n    entryPrice: number,\r\n    stopLossPrice: number\r\n  ): number {\r\n    const riskAmount = accountBalance * (this.riskParameters.maxRiskPerTrade / 100);\r\n    const priceRisk = Math.abs(entryPrice - stopLossPrice);\r\n    \r\n    if (priceRisk === 0) {\r\n      throw new Error('Stop loss price cannot equal entry price');\r\n    }\r\n\r\n    return riskAmount / priceRisk;\r\n  }\r\n\r\n  /**\r\n   * Apply confidence-based position size adjustment\r\n   * Higher confidence = larger position (up to 150% of base)\r\n   * Lower confidence = smaller position (down to 50% of base)\r\n   */\r\n  private applyConfidenceAdjustment(baseSize: number, confidence: number): number {\r\n    // Normalize confidence to 0-1 range\r\n    const normalizedConfidence = Math.max(0, Math.min(100, confidence)) / 100;\r\n    \r\n    // Apply confidence multiplier (0.5x to 1.5x)\r\n    const confidenceMultiplier = 0.5 + (normalizedConfidence * 1.0);\r\n    \r\n    return baseSize * confidenceMultiplier;\r\n  }\r\n\r\n  /**\r\n   * Apply volatility-based position size adjustment\r\n   * Higher volatility = smaller position\r\n   * Lower volatility = larger position\r\n   */\r\n  private applyVolatilityAdjustment(baseSize: number, volatility: number): number {\r\n    // Volatility adjustment factor (higher volatility reduces position size)\r\n    const volatilityMultiplier = Math.max(0.3, 1 - (volatility * this.riskParameters.volatilityAdjustmentFactor));\r\n    \r\n    return baseSize * volatilityMultiplier;\r\n  }\r\n\r\n  /**\r\n   * Calculate correlation-based position adjustment\r\n   * Reduces position size if high correlation with existing positions\r\n   */\r\n  private async calculateCorrelationAdjustment(\r\n    symbol: string,\r\n    existingPositions: Position[]\r\n  ): Promise<number> {\r\n    if (existingPositions.length === 0) {\r\n      return 1.0; // No adjustment needed\r\n    }\r\n\r\n    // Calculate correlation with existing positions\r\n    const correlationMatrix = await this.calculateCorrelationMatrix(symbol, existingPositions);\r\n    \r\n    // Reduce position size based on correlation exposure\r\n    const maxCorrelation = Math.max(...Array.from(correlationMatrix.correlations.values()));\r\n    \r\n    if (maxCorrelation > this.riskParameters.maxCorrelationExposure) {\r\n      // Reduce position size proportionally to correlation excess\r\n      const correlationExcess = maxCorrelation - this.riskParameters.maxCorrelationExposure;\r\n      return Math.max(0.2, 1 - correlationExcess);\r\n    }\r\n\r\n    return 1.0;\r\n  }\r\n\r\n  /**\r\n   * Calculate correlation matrix between symbols\r\n   */\r\n  private async calculateCorrelationMatrix(\r\n    newSymbol: string,\r\n    existingPositions: Position[]\r\n  ): Promise<CorrelationMatrix> {\r\n    const correlations = new Map<string, number>();\r\n    \r\n    // For crypto pairs, use predefined correlation coefficients\r\n    // In production, this would use historical price data\r\n    const cryptoCorrelations: Record<string, Record<string, number>> = {\r\n      'BTC': { 'ETH': 0.75, 'BTC': 1.0 },\r\n      'ETH': { 'BTC': 0.75, 'ETH': 1.0 }\r\n    };\r\n\r\n    for (const position of existingPositions) {\r\n      const correlation = cryptoCorrelations[newSymbol]?.[position.symbol] || 0;\r\n      correlations.set(`${newSymbol}-${position.symbol}`, correlation);\r\n    }\r\n\r\n    const portfolioCorrelationRisk = this.calculatePortfolioCorrelationRisk(correlations);\r\n    const diversificationScore = this.calculateDiversificationScore(correlations);\r\n\r\n    return {\r\n      correlations,\r\n      portfolioCorrelationRisk,\r\n      diversificationScore,\r\n      recommendations: []\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculate overall portfolio correlation risk\r\n   */\r\n  private calculatePortfolioCorrelationRisk(correlations: Map<string, number>): number {\r\n    if (correlations.size === 0) return 0;\r\n    \r\n    const correlationValues = Array.from(correlations.values());\r\n    const avgCorrelation = correlationValues.reduce((sum, corr) => sum + Math.abs(corr), 0) / correlationValues.length;\r\n    \r\n    return avgCorrelation;\r\n  }\r\n\r\n  /**\r\n   * Calculate portfolio diversification score\r\n   */\r\n  private calculateDiversificationScore(correlations: Map<string, number>): number {\r\n    const portfolioRisk = this.calculatePortfolioCorrelationRisk(correlations);\r\n    return Math.max(0, 100 - (portfolioRisk * 100));\r\n  }\r\n\r\n  /**\r\n   * Calculate risk-reward ratio\r\n   */\r\n  private calculateRiskRewardRatio(\r\n    entryPrice: number,\r\n    stopLossPrice: number,\r\n    takeProfitPrice: number\r\n  ): number {\r\n    const risk = Math.abs(entryPrice - stopLossPrice);\r\n    const reward = Math.abs(takeProfitPrice - entryPrice);\r\n    \r\n    if (risk === 0) return 0;\r\n    return reward / risk;\r\n  }\r\n\r\n  /**\r\n   * Validate position size against risk parameters\r\n   */\r\n  private validatePositionSize(\r\n    positionSize: number,\r\n    riskPercentage: number,\r\n    riskRewardRatio: number,\r\n    request: PositionSizeRequest\r\n  ): { approved: boolean; rejectionReasons: string[] } {\r\n    const rejectionReasons: string[] = [];\r\n\r\n    // Check maximum risk per trade\r\n    if (riskPercentage > this.riskParameters.maxRiskPerTrade) {\r\n      rejectionReasons.push(`Risk percentage ${riskPercentage.toFixed(2)}% exceeds maximum ${this.riskParameters.maxRiskPerTrade}%`);\r\n    }\r\n\r\n    // Check minimum risk-reward ratio\r\n    if (riskRewardRatio < this.riskParameters.minRiskRewardRatio) {\r\n      rejectionReasons.push(`Risk-reward ratio ${riskRewardRatio.toFixed(2)} below minimum ${this.riskParameters.minRiskRewardRatio}`);\r\n    }\r\n\r\n    // Check position size is positive and reasonable\r\n    if (positionSize <= 0) {\r\n      rejectionReasons.push('Position size must be positive');\r\n    }\r\n\r\n    // Check if position size is too large relative to account (allow up to 100% for crypto)\r\n    const positionValue = positionSize * request.entryPrice;\r\n    const positionPercentage = (positionValue / request.accountBalance) * 100;\r\n    if (positionPercentage > 100) {\r\n      rejectionReasons.push(`Position value ${positionPercentage.toFixed(2)}% of account is too large`);\r\n    }\r\n\r\n    return {\r\n      approved: rejectionReasons.length === 0,\r\n      rejectionReasons\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Update risk parameters\r\n   */\r\n  updateRiskParameters(newParameters: Partial<RiskParameters>): void {\r\n    this.riskParameters = { ...this.riskParameters, ...newParameters };\r\n  }\r\n\r\n  /**\r\n   * Get current risk parameters\r\n   */\r\n  getRiskParameters(): RiskParameters {\r\n    return { ...this.riskParameters };\r\n  }\r\n\r\n  /**\r\n   * Calculate recommended position size for multiple scenarios\r\n   */\r\n  async calculateScenarioAnalysis(\r\n    baseRequest: PositionSizeRequest,\r\n    scenarios: { confidence: number; volatility: number }[]\r\n  ): Promise<PositionSizeResult[]> {\r\n    const results: PositionSizeResult[] = [];\r\n\r\n    for (const scenario of scenarios) {\r\n      const scenarioRequest = {\r\n        ...baseRequest,\r\n        confidence: scenario.confidence,\r\n        volatility: scenario.volatility\r\n      };\r\n\r\n      const result = await this.calculatePositionSize(scenarioRequest);\r\n      results.push(result);\r\n    }\r\n\r\n    return results;\r\n  }\r\n}"],"mappings":"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","ignoreList":[]}