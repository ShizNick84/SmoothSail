a937e734ee4e21acdcf378a13afa07ea
"use strict";
/**
 * =============================================================================
 * COMPREHENSIVE TRADING AND SYSTEM LOGGER
 * =============================================================================
 *
 * This module provides detailed logging for all trading operations, market
 * analysis, strategy decisions, and system performance with rich context
 * and AI-powered explanations.
 *
 * Features:
 * - Detailed trade execution logging with reasoning
 * - Market analysis and sentiment logging
 * - Strategy decision logs with AI explanations
 * - Performance metrics with Intel NUC monitoring
 * - Error and exception logging with recovery actions
 * - Audit trail for configuration changes
 *
 * @author AI Crypto Trading System
 * @version 1.0.0
 * =============================================================================
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.tradingLogger = exports.TradingLogger = void 0;
const enhanced_logger_1 = require("./enhanced-logger");
const os_1 = __importDefault(require("os"));
/**
 * Comprehensive trading and system logger
 */
class TradingLogger extends enhanced_logger_1.EnhancedLogger {
    tradeSequence = 0;
    performanceHistory = new Map();
    errorHistory = new Map();
    constructor(componentName) {
        super(componentName || 'TradingLogger');
    }
    /**
     * Log detailed trade execution with reasoning
     */
    logTradeExecution(context) {
        this.tradeSequence++;
        const emoji = context.side === 'buy' ? enhanced_logger_1.LogEmojis.BUY : enhanced_logger_1.LogEmojis.SELL;
        const message = `Trade execution: ${context.side.toUpperCase()} ${context.amount} ${context.symbol} @ $${context.price?.toFixed(4) || 'MARKET'}`;
        const enrichedMeta = {
            tradeId: context.tradeId,
            sequence: this.tradeSequence,
            symbol: context.symbol,
            side: context.side,
            amount: context.amount,
            price: context.price,
            orderType: context.orderType,
            strategy: context.strategy,
            confidence: context.confidence,
            marketConditions: context.marketConditions,
            reasoning: context.reasoning,
            classification: 'CONFIDENTIAL',
            timestamp: context.timestamp.toISOString()
        };
        this.logWithEmoji('info', emoji, message, enrichedMeta);
        this.trading('trade_execution', message, enrichedMeta);
        // Log detailed reasoning
        this.logTradeReasoning(context);
    }
    /**
     * Log trade reasoning and AI explanation
     */
    logTradeReasoning(context) {
        const reasoningMessage = `Trade reasoning for ${context.tradeId}:
    
üìä Market Conditions:
  ‚Ä¢ Price: $${context.marketConditions.price.toFixed(4)}
  ‚Ä¢ Volume: ${context.marketConditions.volume.toLocaleString()}
  ‚Ä¢ Volatility: ${(context.marketConditions.volatility * 100).toFixed(2)}%
  ‚Ä¢ Trend: ${context.marketConditions.trend} ${this.getTrendEmoji(context.marketConditions.trend)}
  ‚Ä¢ Sentiment: ${(context.marketConditions.sentiment * 100).toFixed(1)}%

üß† AI Reasoning:
  ‚Ä¢ Entry Reason: ${context.reasoning.entryReason}
  ‚Ä¢ Risk Assessment: ${context.reasoning.riskAssessment}
  ‚Ä¢ Expected Outcome: ${context.reasoning.expectedOutcome}
  
üéØ Strategy: ${context.strategy} (${(context.confidence * 100).toFixed(1)}% confidence)

üîÑ Alternative Actions Considered:
${context.reasoning.alternativeActions.map(action => `  ‚Ä¢ ${action}`).join('\n')}`;
        this.trading('trade_reasoning', reasoningMessage, {
            tradeId: context.tradeId,
            component: 'ai_decision_engine',
            classification: 'INTERNAL'
        });
    }
    /**
     * Log market analysis with sentiment and predictions
     */
    logMarketAnalysis(context) {
        const trendEmoji = this.getTrendEmoji(context.prediction.direction === 'up' ? 'bullish' :
            context.prediction.direction === 'down' ? 'bearish' : 'neutral');
        const message = `Market analysis for ${context.symbol} (${context.timeframe}): ${context.prediction.direction} ${trendEmoji} (${(context.prediction.confidence * 100).toFixed(1)}% confidence)`;
        const enrichedMeta = {
            symbol: context.symbol,
            timeframe: context.timeframe,
            analysis: context.analysis,
            prediction: context.prediction,
            reasoning: context.reasoning,
            classification: 'INTERNAL',
            timestamp: context.timestamp.toISOString()
        };
        this.logWithEmoji('info', enhanced_logger_1.LogEmojis.TREND_UP, message, enrichedMeta);
        this.trading('market_analysis', message, enrichedMeta);
        // Log detailed technical analysis
        this.logTechnicalAnalysis(context);
    }
    /**
     * Log detailed technical analysis
     */
    logTechnicalAnalysis(context) {
        const technicalMessage = `Technical analysis for ${context.symbol}:

üìà Technical Indicators:
${Object.entries(context.analysis.technicalIndicators)
            .map(([indicator, value]) => `  ‚Ä¢ ${indicator}: ${typeof value === 'number' ? value.toFixed(4) : value}`)
            .join('\n')}

üìä Volume Analysis:
${Object.entries(context.analysis.volumeAnalysis)
            .map(([metric, value]) => `  ‚Ä¢ ${metric}: ${typeof value === 'number' ? value.toLocaleString() : value}`)
            .join('\n')}

üéØ Support/Resistance Levels:
  ‚Ä¢ Support: ${context.analysis.supportResistance.support.map(s => `$${s.toFixed(4)}`).join(', ')}
  ‚Ä¢ Resistance: ${context.analysis.supportResistance.resistance.map(r => `$${r.toFixed(4)}`).join(', ')}

üß† AI Analysis: ${context.reasoning}`;
        this.trading('technical_analysis', technicalMessage, {
            symbol: context.symbol,
            component: 'technical_analyzer',
            classification: 'INTERNAL'
        });
    }
    /**
     * Log strategy decisions with AI explanations
     */
    logStrategyDecision(context) {
        const decisionEmoji = this.getDecisionEmoji(context.decision);
        const message = `Strategy decision: ${context.strategyName} ‚Üí ${context.decision.toUpperCase()} ${context.symbol} (${(context.confidence * 100).toFixed(1)}% confidence)`;
        const enrichedMeta = {
            strategyName: context.strategyName,
            symbol: context.symbol,
            decision: context.decision,
            confidence: context.confidence,
            parameters: context.parameters,
            signals: context.signals,
            reasoning: context.reasoning,
            alternatives: context.alternatives,
            classification: 'INTERNAL',
            timestamp: context.timestamp.toISOString()
        };
        this.logWithEmoji('info', decisionEmoji, message, enrichedMeta);
        this.trading('strategy_decision', message, enrichedMeta);
        // Log detailed strategy reasoning
        this.logStrategyReasoning(context);
    }
    /**
     * Log detailed strategy reasoning
     */
    logStrategyReasoning(context) {
        const reasoningMessage = `Strategy reasoning for ${context.strategyName}:

üéØ Decision: ${context.decision.toUpperCase()} (${(context.confidence * 100).toFixed(1)}% confidence)

üìä Signals:
  ‚Ä¢ Technical: ${Object.entries(context.signals.technical)
            .map(([signal, value]) => `${signal}=${typeof value === 'number' ? value.toFixed(4) : value}`)
            .join(', ')}
  ‚Ä¢ Sentiment: ${(context.signals.sentiment * 100).toFixed(1)}%

üß† AI Reasoning: ${context.reasoning.aiExplanation}

‚úÖ Primary Factors:
${context.reasoning.primaryFactors.map(factor => `  ‚Ä¢ ${factor}`).join('\n')}

‚ö†Ô∏è Risk Factors:
${context.reasoning.riskFactors.map(factor => `  ‚Ä¢ ${factor}`).join('\n')}

üöÄ Opportunity Factors:
${context.reasoning.opportunityFactors.map(factor => `  ‚Ä¢ ${factor}`).join('\n')}

üé≤ Alternative Actions:
${context.alternatives.map(alt => `  ‚Ä¢ ${alt.action} (${(alt.probability * 100).toFixed(1)}%): ${alt.reasoning}`).join('\n')}`;
        this.trading('strategy_reasoning', reasoningMessage, {
            strategyName: context.strategyName,
            symbol: context.symbol,
            component: 'strategy_engine',
            classification: 'INTERNAL'
        });
    }
    /**
     * Log Intel NUC and system performance metrics
     */
    logSystemPerformance(context) {
        const statusEmoji = context.status === 'healthy' ? enhanced_logger_1.LogEmojis.SUCCESS :
            context.status === 'warning' ? enhanced_logger_1.LogEmojis.WARNING : enhanced_logger_1.LogEmojis.ERROR;
        const message = `System performance: ${context.component} - ${context.status.toUpperCase()}`;
        const enrichedMeta = {
            component: context.component,
            metrics: context.metrics,
            thresholds: context.thresholds,
            status: context.status,
            classification: 'INTERNAL',
            timestamp: context.timestamp.toISOString()
        };
        this.logWithEmoji(context.status === 'critical' ? 'error' : context.status === 'warning' ? 'warn' : 'info', statusEmoji, message, enrichedMeta);
        // Log detailed performance metrics
        this.logDetailedPerformanceMetrics(context);
        // Store performance history
        this.storePerformanceHistory(context);
    }
    /**
     * Log detailed performance metrics
     */
    logDetailedPerformanceMetrics(context) {
        let metricsMessage = `Detailed performance metrics for ${context.component}:\n`;
        if (context.metrics.cpu) {
            metricsMessage += `\n‚öôÔ∏è CPU Metrics:
  ‚Ä¢ Usage: ${context.metrics.cpu.usage.toFixed(1)}%
  ‚Ä¢ Temperature: ${context.metrics.cpu.temperature?.toFixed(1) || 'N/A'}¬∞C
  ‚Ä¢ Frequency: ${context.metrics.cpu.frequency?.toFixed(0) || 'N/A'}MHz`;
        }
        if (context.metrics.memory) {
            metricsMessage += `\nüß† Memory Metrics:
  ‚Ä¢ Used: ${(context.metrics.memory.used / 1024 ** 3).toFixed(2)}GB
  ‚Ä¢ Total: ${(context.metrics.memory.total / 1024 ** 3).toFixed(2)}GB
  ‚Ä¢ Usage: ${context.metrics.memory.percentage.toFixed(1)}%
  ‚Ä¢ Swap: ${context.metrics.memory.swap ? (context.metrics.memory.swap / 1024 ** 3).toFixed(2) + 'GB' : 'N/A'}`;
        }
        if (context.metrics.disk) {
            metricsMessage += `\nüíΩ Disk Metrics:
  ‚Ä¢ Used: ${(context.metrics.disk.used / 1024 ** 3).toFixed(2)}GB
  ‚Ä¢ Total: ${(context.metrics.disk.total / 1024 ** 3).toFixed(2)}GB
  ‚Ä¢ Usage: ${context.metrics.disk.percentage.toFixed(1)}%
  ‚Ä¢ IOPS: ${context.metrics.disk.iops?.toLocaleString() || 'N/A'}`;
        }
        if (context.metrics.network) {
            metricsMessage += `\nüåê Network Metrics:
  ‚Ä¢ Latency: ${context.metrics.network.latency.toFixed(1)}ms
  ‚Ä¢ Bandwidth: ${(context.metrics.network.bandwidth / 1024 ** 2).toFixed(2)}MB/s
  ‚Ä¢ Packet Loss: ${context.metrics.network.packetLoss?.toFixed(2) || 'N/A'}%
  ‚Ä¢ Connections: ${context.metrics.network.connections}`;
        }
        if (context.metrics.database) {
            metricsMessage += `\nüóÑÔ∏è Database Metrics:
  ‚Ä¢ Connections: ${context.metrics.database.connections}
  ‚Ä¢ Query Time: ${context.metrics.database.queryTime.toFixed(2)}ms
  ‚Ä¢ Cache Hit Ratio: ${context.metrics.database.cacheHitRatio?.toFixed(1) || 'N/A'}%`;
        }
        this.info(metricsMessage, {
            component: context.component,
            classification: 'INTERNAL'
        });
    }
    /**
     * Log errors with comprehensive context and recovery actions
     */
    logErrorWithRecovery(context) {
        const severityEmoji = context.severity === 'critical' ? enhanced_logger_1.LogEmojis.ERROR :
            context.severity === 'high' ? enhanced_logger_1.LogEmojis.ALERT :
                context.severity === 'medium' ? enhanced_logger_1.LogEmojis.WARNING : enhanced_logger_1.LogEmojis.INFO;
        const message = `${context.errorType.toUpperCase()} error in ${context.component}: ${context.error.message}`;
        const enrichedMeta = {
            errorId: context.errorId,
            component: context.component,
            errorType: context.errorType,
            severity: context.severity,
            error: {
                name: context.error.name,
                message: context.error.message,
                stack: context.error.stack
            },
            context: context.context,
            recoveryActions: context.recoveryActions,
            impact: context.impact,
            classification: 'CONFIDENTIAL',
            timestamp: context.timestamp.toISOString()
        };
        this.logWithEmoji('error', severityEmoji, message, enrichedMeta);
        // Log detailed error context and recovery
        this.logErrorRecoveryDetails(context);
        // Store error history
        this.storeErrorHistory(context);
    }
    /**
     * Log detailed error recovery information
     */
    logErrorRecoveryDetails(context) {
        const recoveryMessage = `Error recovery details for ${context.errorId}:

‚ùå Error Details:
  ‚Ä¢ Type: ${context.errorType}
  ‚Ä¢ Severity: ${context.severity}
  ‚Ä¢ Component: ${context.component}
  ‚Ä¢ Message: ${context.error.message}

üîß Recovery Actions:
  ‚Ä¢ Attempted: ${context.recoveryActions.attempted.join(', ') || 'None'}
  ‚Ä¢ Successful: ${context.recoveryActions.successful.join(', ') || 'None'}
  ‚Ä¢ Failed: ${context.recoveryActions.failed.join(', ') || 'None'}
  ‚Ä¢ Next Steps: ${context.recoveryActions.nextSteps.join(', ') || 'None'}

üìä Impact Assessment:
  ‚Ä¢ Trading Affected: ${context.impact.tradingAffected ? 'Yes' : 'No'}
  ‚Ä¢ System Stability: ${context.impact.systemStability}
  ‚Ä¢ User Experience: ${context.impact.userExperience}

üîç Context:
${Object.entries(context.context)
            .map(([key, value]) => `  ‚Ä¢ ${key}: ${typeof value === 'object' ? JSON.stringify(value) : value}`)
            .join('\n')}`;
        this.error(recoveryMessage, {
            errorId: context.errorId,
            component: context.component,
            classification: 'CONFIDENTIAL'
        });
    }
    /**
     * Log configuration changes with audit trail
     */
    logConfigurationChange(context) {
        const changeEmoji = context.changeType === 'create' ? enhanced_logger_1.LogEmojis.SUCCESS :
            context.changeType === 'update' ? enhanced_logger_1.LogEmojis.RESTART :
                enhanced_logger_1.LogEmojis.ERROR;
        const message = `Configuration ${context.changeType}: ${context.component} (${context.changes.length} changes)`;
        const enrichedMeta = {
            changeId: context.changeId,
            component: context.component,
            changeType: context.changeType,
            changes: context.changes,
            reason: context.reason,
            approvedBy: context.approvedBy,
            impact: context.impact,
            classification: 'CONFIDENTIAL',
            timestamp: context.timestamp.toISOString()
        };
        this.logWithEmoji('info', changeEmoji, message, enrichedMeta);
        this.audit({
            auditId: context.changeId,
            eventType: 'CONFIGURATION_CHANGE',
            actor: context.approvedBy,
            resource: context.component,
            action: context.changeType.toUpperCase(),
            result: 'SUCCESS',
            auditData: enrichedMeta,
            timestamp: context.timestamp
        });
        // Log detailed configuration changes
        this.logConfigurationDetails(context);
    }
    /**
     * Log detailed configuration change information
     */
    logConfigurationDetails(context) {
        const configMessage = `Configuration change details for ${context.changeId}:

üîß Change Summary:
  ‚Ä¢ Component: ${context.component}
  ‚Ä¢ Type: ${context.changeType}
  ‚Ä¢ Approved By: ${context.approvedBy}
  ‚Ä¢ Reason: ${context.reason}

üìù Changes Made:
${context.changes.map(change => `  ‚Ä¢ ${change.field}: ${JSON.stringify(change.oldValue)} ‚Üí ${JSON.stringify(change.newValue)}`).join('\n')}

‚ö†Ô∏è Impact Assessment:
  ‚Ä¢ Requires Restart: ${context.impact.requiresRestart ? 'Yes' : 'No'}
  ‚Ä¢ Risk Level: ${context.impact.riskLevel}
  ‚Ä¢ Affected Components: ${context.impact.affectedComponents.join(', ') || 'None'}`;
        this.info(configMessage, {
            changeId: context.changeId,
            component: context.component,
            classification: 'CONFIDENTIAL'
        });
    }
    /**
     * Get trend emoji based on direction
     */
    getTrendEmoji(trend) {
        switch (trend) {
            case 'bullish': return enhanced_logger_1.LogEmojis.BULL;
            case 'bearish': return enhanced_logger_1.LogEmojis.BEAR;
            case 'neutral': return enhanced_logger_1.LogEmojis.BALANCE;
            default: return enhanced_logger_1.LogEmojis.INFO;
        }
    }
    /**
     * Get decision emoji based on action
     */
    getDecisionEmoji(decision) {
        switch (decision) {
            case 'buy': return enhanced_logger_1.LogEmojis.BUY;
            case 'sell': return enhanced_logger_1.LogEmojis.SELL;
            case 'hold': return enhanced_logger_1.LogEmojis.BALANCE;
            case 'exit': return enhanced_logger_1.LogEmojis.STOP;
            default: return enhanced_logger_1.LogEmojis.INFO;
        }
    }
    /**
     * Store performance history for trend analysis
     */
    storePerformanceHistory(context) {
        const key = `${context.component}_${context.status}`;
        const history = this.performanceHistory.get(key) || [];
        // Store timestamp as performance metric
        history.push(Date.now());
        // Keep only last 100 entries
        if (history.length > 100) {
            history.shift();
        }
        this.performanceHistory.set(key, history);
    }
    /**
     * Store error history for pattern analysis
     */
    storeErrorHistory(context) {
        const key = `${context.component}_${context.errorType}`;
        const history = this.errorHistory.get(key) || [];
        history.push(context);
        // Keep only last 50 errors
        if (history.length > 50) {
            history.shift();
        }
        this.errorHistory.set(key, history);
    }
    /**
     * Get performance trends
     */
    getPerformanceTrends() {
        return Object.fromEntries(this.performanceHistory);
    }
    /**
     * Get error patterns
     */
    getErrorPatterns() {
        return Object.fromEntries(this.errorHistory);
    }
    /**
     * Generate comprehensive system report
     */
    async generateComprehensiveReport() {
        return {
            timestamp: new Date().toISOString(),
            performanceTrends: this.getPerformanceTrends(),
            errorPatterns: this.getErrorPatterns(),
            systemHealth: await this.getSystemHealth(),
            tradingMetrics: this.getOperationCounters()
        };
    }
    /**
     * Get current system health
     */
    async getSystemHealth() {
        try {
            const cpuInfo = os_1.default.cpus();
            const memInfo = process.memoryUsage();
            const loadAvg = os_1.default.loadavg();
            return {
                cpu: {
                    cores: cpuInfo.length,
                    model: cpuInfo[0]?.model || 'Unknown',
                    loadAverage: loadAvg
                },
                memory: {
                    rss: memInfo.rss,
                    heapTotal: memInfo.heapTotal,
                    heapUsed: memInfo.heapUsed,
                    external: memInfo.external
                },
                system: {
                    platform: os_1.default.platform(),
                    arch: os_1.default.arch(),
                    uptime: os_1.default.uptime(),
                    hostname: os_1.default.hostname()
                }
            };
        }
        catch (error) {
            return { error: 'Failed to collect system health data' };
        }
    }
}
exports.TradingLogger = TradingLogger;
// Create and export singleton instance
exports.tradingLogger = new TradingLogger();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,