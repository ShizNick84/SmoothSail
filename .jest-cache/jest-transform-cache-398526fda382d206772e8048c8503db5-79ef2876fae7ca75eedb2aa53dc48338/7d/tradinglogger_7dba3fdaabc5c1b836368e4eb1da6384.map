{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\core\\logging\\trading-logger.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\core\\logging\\trading-logger.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * COMPREHENSIVE TRADING AND SYSTEM LOGGER\r\n * =============================================================================\r\n * \r\n * This module provides detailed logging for all trading operations, market\r\n * analysis, strategy decisions, and system performance with rich context\r\n * and AI-powered explanations.\r\n * \r\n * Features:\r\n * - Detailed trade execution logging with reasoning\r\n * - Market analysis and sentiment logging\r\n * - Strategy decision logs with AI explanations\r\n * - Performance metrics with Intel NUC monitoring\r\n * - Error and exception logging with recovery actions\r\n * - Audit trail for configuration changes\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * =============================================================================\r\n */\r\n\r\nimport { EnhancedLogger, LogEmojis } from './enhanced-logger';\r\nimport { LogMetadata } from './logger';\r\nimport os from 'os';\r\nimport { performance } from 'perf_hooks';\r\nimport { execSync } from 'child_process';\r\n\r\n/**\r\n * Trade execution context interface\r\n */\r\ninterface TradeExecutionContext {\r\n  tradeId: string;\r\n  symbol: string;\r\n  side: 'buy' | 'sell';\r\n  amount: number;\r\n  price?: number;\r\n  orderType: 'market' | 'limit' | 'stop';\r\n  strategy: string;\r\n  confidence: number;\r\n  marketConditions: {\r\n    price: number;\r\n    volume: number;\r\n    volatility: number;\r\n    trend: 'bullish' | 'bearish' | 'neutral';\r\n    sentiment: number;\r\n  };\r\n  reasoning: {\r\n    entryReason: string;\r\n    exitReason?: string;\r\n    riskAssessment: string;\r\n    expectedOutcome: string;\r\n    alternativeActions: string[];\r\n  };\r\n  timestamp: Date;\r\n}\r\n\r\n/**\r\n * Market analysis context interface\r\n */\r\ninterface MarketAnalysisContext {\r\n  symbol: string;\r\n  timeframe: string;\r\n  analysis: {\r\n    technicalIndicators: Record<string, number>;\r\n    sentimentScore: number;\r\n    volumeAnalysis: Record<string, number>;\r\n    priceAction: Record<string, any>;\r\n    supportResistance: {\r\n      support: number[];\r\n      resistance: number[];\r\n    };\r\n  };\r\n  prediction: {\r\n    direction: 'up' | 'down' | 'sideways';\r\n    confidence: number;\r\n    timeHorizon: string;\r\n    targetPrice?: number;\r\n    stopLoss?: number;\r\n  };\r\n  reasoning: string;\r\n  timestamp: Date;\r\n}\r\n\r\n/**\r\n * Strategy decision context interface\r\n */\r\ninterface StrategyDecisionContext {\r\n  strategyName: string;\r\n  symbol: string;\r\n  decision: 'buy' | 'sell' | 'hold' | 'exit';\r\n  confidence: number;\r\n  parameters: Record<string, any>;\r\n  signals: {\r\n    technical: Record<string, number>;\r\n    fundamental: Record<string, any>;\r\n    sentiment: number;\r\n  };\r\n  reasoning: {\r\n    primaryFactors: string[];\r\n    riskFactors: string[];\r\n    opportunityFactors: string[];\r\n    aiExplanation: string;\r\n    confidenceFactors: string[];\r\n  };\r\n  alternatives: {\r\n    action: string;\r\n    probability: number;\r\n    reasoning: string;\r\n  }[];\r\n  timestamp: Date;\r\n}\r\n\r\n/**\r\n * System performance context interface\r\n */\r\ninterface SystemPerformanceContext {\r\n  component: 'intel_nuc' | 'network' | 'database' | 'api' | 'application';\r\n  metrics: {\r\n    cpu?: {\r\n      usage: number;\r\n      temperature?: number;\r\n      frequency?: number;\r\n    };\r\n    memory?: {\r\n      used: number;\r\n      total: number;\r\n      percentage: number;\r\n      swap?: number;\r\n    };\r\n    disk?: {\r\n      used: number;\r\n      total: number;\r\n      percentage: number;\r\n      iops?: number;\r\n    };\r\n    network?: {\r\n      latency: number;\r\n      bandwidth: number;\r\n      packetLoss?: number;\r\n      connections: number;\r\n    };\r\n    database?: {\r\n      connections: number;\r\n      queryTime: number;\r\n      cacheHitRatio?: number;\r\n    };\r\n  };\r\n  thresholds: {\r\n    warning: Record<string, number>;\r\n    critical: Record<string, number>;\r\n  };\r\n  status: 'healthy' | 'warning' | 'critical';\r\n  timestamp: Date;\r\n}\r\n\r\n/**\r\n * Error context interface with recovery actions\r\n */\r\ninterface ErrorContext {\r\n  errorId: string;\r\n  component: string;\r\n  errorType: 'trading' | 'system' | 'network' | 'database' | 'api';\r\n  severity: 'low' | 'medium' | 'high' | 'critical';\r\n  error: Error;\r\n  context: Record<string, any>;\r\n  recoveryActions: {\r\n    attempted: string[];\r\n    successful: string[];\r\n    failed: string[];\r\n    nextSteps: string[];\r\n  };\r\n  impact: {\r\n    tradingAffected: boolean;\r\n    systemStability: 'stable' | 'degraded' | 'unstable';\r\n    userExperience: 'normal' | 'degraded' | 'unavailable';\r\n  };\r\n  timestamp: Date;\r\n}\r\n\r\n/**\r\n * Configuration change audit context\r\n */\r\ninterface ConfigChangeContext {\r\n  changeId: string;\r\n  component: string;\r\n  changeType: 'create' | 'update' | 'delete';\r\n  changes: {\r\n    field: string;\r\n    oldValue: any;\r\n    newValue: any;\r\n  }[];\r\n  reason: string;\r\n  approvedBy: string;\r\n  impact: {\r\n    requiresRestart: boolean;\r\n    affectedComponents: string[];\r\n    riskLevel: 'low' | 'medium' | 'high';\r\n  };\r\n  timestamp: Date;\r\n}\r\n\r\n/**\r\n * Comprehensive trading and system logger\r\n */\r\nexport class TradingLogger extends EnhancedLogger {\r\n  private tradeSequence: number = 0;\r\n  private performanceHistory: Map<string, number[]> = new Map();\r\n  private errorHistory: Map<string, ErrorContext[]> = new Map();\r\n\r\n  constructor(componentName?: string) {\r\n    super(componentName || 'TradingLogger');\r\n  }\r\n\r\n  /**\r\n   * Log detailed trade execution with reasoning\r\n   */\r\n  public logTradeExecution(context: TradeExecutionContext): void {\r\n    this.tradeSequence++;\r\n    \r\n    const emoji = context.side === 'buy' ? LogEmojis.BUY : LogEmojis.SELL;\r\n    const message = `Trade execution: ${context.side.toUpperCase()} ${context.amount} ${context.symbol} @ $${context.price?.toFixed(4) || 'MARKET'}`;\r\n    \r\n    const enrichedMeta: LogMetadata = {\r\n      tradeId: context.tradeId,\r\n      sequence: this.tradeSequence,\r\n      symbol: context.symbol,\r\n      side: context.side,\r\n      amount: context.amount,\r\n      price: context.price,\r\n      orderType: context.orderType,\r\n      strategy: context.strategy,\r\n      confidence: context.confidence,\r\n      marketConditions: context.marketConditions,\r\n      reasoning: context.reasoning,\r\n      classification: 'CONFIDENTIAL',\r\n      timestamp: context.timestamp.toISOString()\r\n    };\r\n\r\n    this.logWithEmoji('info', emoji, message, enrichedMeta);\r\n    this.trading('trade_execution', message, enrichedMeta);\r\n\r\n    // Log detailed reasoning\r\n    this.logTradeReasoning(context);\r\n  }\r\n\r\n  /**\r\n   * Log trade reasoning and AI explanation\r\n   */\r\n  private logTradeReasoning(context: TradeExecutionContext): void {\r\n    const reasoningMessage = `Trade reasoning for ${context.tradeId}:\r\n    \r\n📊 Market Conditions:\r\n  • Price: $${context.marketConditions.price.toFixed(4)}\r\n  • Volume: ${context.marketConditions.volume.toLocaleString()}\r\n  • Volatility: ${(context.marketConditions.volatility * 100).toFixed(2)}%\r\n  • Trend: ${context.marketConditions.trend} ${this.getTrendEmoji(context.marketConditions.trend)}\r\n  • Sentiment: ${(context.marketConditions.sentiment * 100).toFixed(1)}%\r\n\r\n🧠 AI Reasoning:\r\n  • Entry Reason: ${context.reasoning.entryReason}\r\n  • Risk Assessment: ${context.reasoning.riskAssessment}\r\n  • Expected Outcome: ${context.reasoning.expectedOutcome}\r\n  \r\n🎯 Strategy: ${context.strategy} (${(context.confidence * 100).toFixed(1)}% confidence)\r\n\r\n🔄 Alternative Actions Considered:\r\n${context.reasoning.alternativeActions.map(action => `  • ${action}`).join('\\n')}`;\r\n\r\n    this.trading('trade_reasoning', reasoningMessage, {\r\n      tradeId: context.tradeId,\r\n      component: 'ai_decision_engine',\r\n      classification: 'INTERNAL'\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Log market analysis with sentiment and predictions\r\n   */\r\n  public logMarketAnalysis(context: MarketAnalysisContext): void {\r\n    const trendEmoji = this.getTrendEmoji(context.prediction.direction === 'up' ? 'bullish' : \r\n                                        context.prediction.direction === 'down' ? 'bearish' : 'neutral');\r\n    \r\n    const message = `Market analysis for ${context.symbol} (${context.timeframe}): ${context.prediction.direction} ${trendEmoji} (${(context.prediction.confidence * 100).toFixed(1)}% confidence)`;\r\n    \r\n    const enrichedMeta: LogMetadata = {\r\n      symbol: context.symbol,\r\n      timeframe: context.timeframe,\r\n      analysis: context.analysis,\r\n      prediction: context.prediction,\r\n      reasoning: context.reasoning,\r\n      classification: 'INTERNAL',\r\n      timestamp: context.timestamp.toISOString()\r\n    };\r\n\r\n    this.logWithEmoji('info', LogEmojis.TREND_UP, message, enrichedMeta);\r\n    this.trading('market_analysis', message, enrichedMeta);\r\n\r\n    // Log detailed technical analysis\r\n    this.logTechnicalAnalysis(context);\r\n  }\r\n\r\n  /**\r\n   * Log detailed technical analysis\r\n   */\r\n  private logTechnicalAnalysis(context: MarketAnalysisContext): void {\r\n    const technicalMessage = `Technical analysis for ${context.symbol}:\r\n\r\n📈 Technical Indicators:\r\n${Object.entries(context.analysis.technicalIndicators)\r\n  .map(([indicator, value]) => `  • ${indicator}: ${typeof value === 'number' ? value.toFixed(4) : value}`)\r\n  .join('\\n')}\r\n\r\n📊 Volume Analysis:\r\n${Object.entries(context.analysis.volumeAnalysis)\r\n  .map(([metric, value]) => `  • ${metric}: ${typeof value === 'number' ? value.toLocaleString() : value}`)\r\n  .join('\\n')}\r\n\r\n🎯 Support/Resistance Levels:\r\n  • Support: ${context.analysis.supportResistance.support.map(s => `$${s.toFixed(4)}`).join(', ')}\r\n  • Resistance: ${context.analysis.supportResistance.resistance.map(r => `$${r.toFixed(4)}`).join(', ')}\r\n\r\n🧠 AI Analysis: ${context.reasoning}`;\r\n\r\n    this.trading('technical_analysis', technicalMessage, {\r\n      symbol: context.symbol,\r\n      component: 'technical_analyzer',\r\n      classification: 'INTERNAL'\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Log strategy decisions with AI explanations\r\n   */\r\n  public logStrategyDecision(context: StrategyDecisionContext): void {\r\n    const decisionEmoji = this.getDecisionEmoji(context.decision);\r\n    const message = `Strategy decision: ${context.strategyName} → ${context.decision.toUpperCase()} ${context.symbol} (${(context.confidence * 100).toFixed(1)}% confidence)`;\r\n    \r\n    const enrichedMeta: LogMetadata = {\r\n      strategyName: context.strategyName,\r\n      symbol: context.symbol,\r\n      decision: context.decision,\r\n      confidence: context.confidence,\r\n      parameters: context.parameters,\r\n      signals: context.signals,\r\n      reasoning: context.reasoning,\r\n      alternatives: context.alternatives,\r\n      classification: 'INTERNAL',\r\n      timestamp: context.timestamp.toISOString()\r\n    };\r\n\r\n    this.logWithEmoji('info', decisionEmoji, message, enrichedMeta);\r\n    this.trading('strategy_decision', message, enrichedMeta);\r\n\r\n    // Log detailed strategy reasoning\r\n    this.logStrategyReasoning(context);\r\n  }\r\n\r\n  /**\r\n   * Log detailed strategy reasoning\r\n   */\r\n  private logStrategyReasoning(context: StrategyDecisionContext): void {\r\n    const reasoningMessage = `Strategy reasoning for ${context.strategyName}:\r\n\r\n🎯 Decision: ${context.decision.toUpperCase()} (${(context.confidence * 100).toFixed(1)}% confidence)\r\n\r\n📊 Signals:\r\n  • Technical: ${Object.entries(context.signals.technical)\r\n    .map(([signal, value]) => `${signal}=${typeof value === 'number' ? value.toFixed(4) : value}`)\r\n    .join(', ')}\r\n  • Sentiment: ${(context.signals.sentiment * 100).toFixed(1)}%\r\n\r\n🧠 AI Reasoning: ${context.reasoning.aiExplanation}\r\n\r\n✅ Primary Factors:\r\n${context.reasoning.primaryFactors.map(factor => `  • ${factor}`).join('\\n')}\r\n\r\n⚠️ Risk Factors:\r\n${context.reasoning.riskFactors.map(factor => `  • ${factor}`).join('\\n')}\r\n\r\n🚀 Opportunity Factors:\r\n${context.reasoning.opportunityFactors.map(factor => `  • ${factor}`).join('\\n')}\r\n\r\n🎲 Alternative Actions:\r\n${context.alternatives.map(alt => `  • ${alt.action} (${(alt.probability * 100).toFixed(1)}%): ${alt.reasoning}`).join('\\n')}`;\r\n\r\n    this.trading('strategy_reasoning', reasoningMessage, {\r\n      strategyName: context.strategyName,\r\n      symbol: context.symbol,\r\n      component: 'strategy_engine',\r\n      classification: 'INTERNAL'\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Log Intel NUC and system performance metrics\r\n   */\r\n  public logSystemPerformance(context: SystemPerformanceContext): void {\r\n    const statusEmoji = context.status === 'healthy' ? LogEmojis.SUCCESS :\r\n                       context.status === 'warning' ? LogEmojis.WARNING : LogEmojis.ERROR;\r\n    \r\n    const message = `System performance: ${context.component} - ${context.status.toUpperCase()}`;\r\n    \r\n    const enrichedMeta: LogMetadata = {\r\n      component: context.component,\r\n      metrics: context.metrics,\r\n      thresholds: context.thresholds,\r\n      status: context.status,\r\n      classification: 'INTERNAL',\r\n      timestamp: context.timestamp.toISOString()\r\n    };\r\n\r\n    this.logWithEmoji(\r\n      context.status === 'critical' ? 'error' : context.status === 'warning' ? 'warn' : 'info',\r\n      statusEmoji,\r\n      message,\r\n      enrichedMeta\r\n    );\r\n\r\n    // Log detailed performance metrics\r\n    this.logDetailedPerformanceMetrics(context);\r\n    \r\n    // Store performance history\r\n    this.storePerformanceHistory(context);\r\n  }\r\n\r\n  /**\r\n   * Log detailed performance metrics\r\n   */\r\n  private logDetailedPerformanceMetrics(context: SystemPerformanceContext): void {\r\n    let metricsMessage = `Detailed performance metrics for ${context.component}:\\n`;\r\n\r\n    if (context.metrics.cpu) {\r\n      metricsMessage += `\\n⚙️ CPU Metrics:\r\n  • Usage: ${context.metrics.cpu.usage.toFixed(1)}%\r\n  • Temperature: ${context.metrics.cpu.temperature?.toFixed(1) || 'N/A'}°C\r\n  • Frequency: ${context.metrics.cpu.frequency?.toFixed(0) || 'N/A'}MHz`;\r\n    }\r\n\r\n    if (context.metrics.memory) {\r\n      metricsMessage += `\\n🧠 Memory Metrics:\r\n  • Used: ${(context.metrics.memory.used / 1024**3).toFixed(2)}GB\r\n  • Total: ${(context.metrics.memory.total / 1024**3).toFixed(2)}GB\r\n  • Usage: ${context.metrics.memory.percentage.toFixed(1)}%\r\n  • Swap: ${context.metrics.memory.swap ? (context.metrics.memory.swap / 1024**3).toFixed(2) + 'GB' : 'N/A'}`;\r\n    }\r\n\r\n    if (context.metrics.disk) {\r\n      metricsMessage += `\\n💽 Disk Metrics:\r\n  • Used: ${(context.metrics.disk.used / 1024**3).toFixed(2)}GB\r\n  • Total: ${(context.metrics.disk.total / 1024**3).toFixed(2)}GB\r\n  • Usage: ${context.metrics.disk.percentage.toFixed(1)}%\r\n  • IOPS: ${context.metrics.disk.iops?.toLocaleString() || 'N/A'}`;\r\n    }\r\n\r\n    if (context.metrics.network) {\r\n      metricsMessage += `\\n🌐 Network Metrics:\r\n  • Latency: ${context.metrics.network.latency.toFixed(1)}ms\r\n  • Bandwidth: ${(context.metrics.network.bandwidth / 1024**2).toFixed(2)}MB/s\r\n  • Packet Loss: ${context.metrics.network.packetLoss?.toFixed(2) || 'N/A'}%\r\n  • Connections: ${context.metrics.network.connections}`;\r\n    }\r\n\r\n    if (context.metrics.database) {\r\n      metricsMessage += `\\n🗄️ Database Metrics:\r\n  • Connections: ${context.metrics.database.connections}\r\n  • Query Time: ${context.metrics.database.queryTime.toFixed(2)}ms\r\n  • Cache Hit Ratio: ${context.metrics.database.cacheHitRatio?.toFixed(1) || 'N/A'}%`;\r\n    }\r\n\r\n    this.info(metricsMessage, {\r\n      component: context.component,\r\n      classification: 'INTERNAL'\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Log errors with comprehensive context and recovery actions\r\n   */\r\n  public logErrorWithRecovery(context: ErrorContext): void {\r\n    const severityEmoji = context.severity === 'critical' ? LogEmojis.ERROR :\r\n                         context.severity === 'high' ? LogEmojis.ALERT :\r\n                         context.severity === 'medium' ? LogEmojis.WARNING : LogEmojis.INFO;\r\n    \r\n    const message = `${context.errorType.toUpperCase()} error in ${context.component}: ${context.error.message}`;\r\n    \r\n    const enrichedMeta: LogMetadata = {\r\n      errorId: context.errorId,\r\n      component: context.component,\r\n      errorType: context.errorType,\r\n      severity: context.severity,\r\n      error: {\r\n        name: context.error.name,\r\n        message: context.error.message,\r\n        stack: context.error.stack\r\n      },\r\n      context: context.context,\r\n      recoveryActions: context.recoveryActions,\r\n      impact: context.impact,\r\n      classification: 'CONFIDENTIAL',\r\n      timestamp: context.timestamp.toISOString()\r\n    };\r\n\r\n    this.logWithEmoji('error', severityEmoji, message, enrichedMeta);\r\n    \r\n    // Log detailed error context and recovery\r\n    this.logErrorRecoveryDetails(context);\r\n    \r\n    // Store error history\r\n    this.storeErrorHistory(context);\r\n  }\r\n\r\n  /**\r\n   * Log detailed error recovery information\r\n   */\r\n  private logErrorRecoveryDetails(context: ErrorContext): void {\r\n    const recoveryMessage = `Error recovery details for ${context.errorId}:\r\n\r\n❌ Error Details:\r\n  • Type: ${context.errorType}\r\n  • Severity: ${context.severity}\r\n  • Component: ${context.component}\r\n  • Message: ${context.error.message}\r\n\r\n🔧 Recovery Actions:\r\n  • Attempted: ${context.recoveryActions.attempted.join(', ') || 'None'}\r\n  • Successful: ${context.recoveryActions.successful.join(', ') || 'None'}\r\n  • Failed: ${context.recoveryActions.failed.join(', ') || 'None'}\r\n  • Next Steps: ${context.recoveryActions.nextSteps.join(', ') || 'None'}\r\n\r\n📊 Impact Assessment:\r\n  • Trading Affected: ${context.impact.tradingAffected ? 'Yes' : 'No'}\r\n  • System Stability: ${context.impact.systemStability}\r\n  • User Experience: ${context.impact.userExperience}\r\n\r\n🔍 Context:\r\n${Object.entries(context.context)\r\n  .map(([key, value]) => `  • ${key}: ${typeof value === 'object' ? JSON.stringify(value) : value}`)\r\n  .join('\\n')}`;\r\n\r\n    this.error(recoveryMessage, {\r\n      errorId: context.errorId,\r\n      component: context.component,\r\n      classification: 'CONFIDENTIAL'\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Log configuration changes with audit trail\r\n   */\r\n  public logConfigurationChange(context: ConfigChangeContext): void {\r\n    const changeEmoji = context.changeType === 'create' ? LogEmojis.SUCCESS :\r\n                       context.changeType === 'update' ? LogEmojis.RESTART :\r\n                       LogEmojis.ERROR;\r\n    \r\n    const message = `Configuration ${context.changeType}: ${context.component} (${context.changes.length} changes)`;\r\n    \r\n    const enrichedMeta: LogMetadata = {\r\n      changeId: context.changeId,\r\n      component: context.component,\r\n      changeType: context.changeType,\r\n      changes: context.changes,\r\n      reason: context.reason,\r\n      approvedBy: context.approvedBy,\r\n      impact: context.impact,\r\n      classification: 'CONFIDENTIAL',\r\n      timestamp: context.timestamp.toISOString()\r\n    };\r\n\r\n    this.logWithEmoji('info', changeEmoji, message, enrichedMeta);\r\n    this.audit({\r\n      auditId: context.changeId,\r\n      eventType: 'CONFIGURATION_CHANGE',\r\n      actor: context.approvedBy,\r\n      resource: context.component,\r\n      action: context.changeType.toUpperCase(),\r\n      result: 'SUCCESS',\r\n      auditData: enrichedMeta,\r\n      timestamp: context.timestamp\r\n    });\r\n\r\n    // Log detailed configuration changes\r\n    this.logConfigurationDetails(context);\r\n  }\r\n\r\n  /**\r\n   * Log detailed configuration change information\r\n   */\r\n  private logConfigurationDetails(context: ConfigChangeContext): void {\r\n    const configMessage = `Configuration change details for ${context.changeId}:\r\n\r\n🔧 Change Summary:\r\n  • Component: ${context.component}\r\n  • Type: ${context.changeType}\r\n  • Approved By: ${context.approvedBy}\r\n  • Reason: ${context.reason}\r\n\r\n📝 Changes Made:\r\n${context.changes.map(change => \r\n  `  • ${change.field}: ${JSON.stringify(change.oldValue)} → ${JSON.stringify(change.newValue)}`\r\n).join('\\n')}\r\n\r\n⚠️ Impact Assessment:\r\n  • Requires Restart: ${context.impact.requiresRestart ? 'Yes' : 'No'}\r\n  • Risk Level: ${context.impact.riskLevel}\r\n  • Affected Components: ${context.impact.affectedComponents.join(', ') || 'None'}`;\r\n\r\n    this.info(configMessage, {\r\n      changeId: context.changeId,\r\n      component: context.component,\r\n      classification: 'CONFIDENTIAL'\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get trend emoji based on direction\r\n   */\r\n  private getTrendEmoji(trend: string): string {\r\n    switch (trend) {\r\n      case 'bullish': return LogEmojis.BULL;\r\n      case 'bearish': return LogEmojis.BEAR;\r\n      case 'neutral': return LogEmojis.BALANCE;\r\n      default: return LogEmojis.INFO;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get decision emoji based on action\r\n   */\r\n  private getDecisionEmoji(decision: string): string {\r\n    switch (decision) {\r\n      case 'buy': return LogEmojis.BUY;\r\n      case 'sell': return LogEmojis.SELL;\r\n      case 'hold': return LogEmojis.BALANCE;\r\n      case 'exit': return LogEmojis.STOP;\r\n      default: return LogEmojis.INFO;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Store performance history for trend analysis\r\n   */\r\n  private storePerformanceHistory(context: SystemPerformanceContext): void {\r\n    const key = `${context.component}_${context.status}`;\r\n    const history = this.performanceHistory.get(key) || [];\r\n    \r\n    // Store timestamp as performance metric\r\n    history.push(Date.now());\r\n    \r\n    // Keep only last 100 entries\r\n    if (history.length > 100) {\r\n      history.shift();\r\n    }\r\n    \r\n    this.performanceHistory.set(key, history);\r\n  }\r\n\r\n  /**\r\n   * Store error history for pattern analysis\r\n   */\r\n  private storeErrorHistory(context: ErrorContext): void {\r\n    const key = `${context.component}_${context.errorType}`;\r\n    const history = this.errorHistory.get(key) || [];\r\n    \r\n    history.push(context);\r\n    \r\n    // Keep only last 50 errors\r\n    if (history.length > 50) {\r\n      history.shift();\r\n    }\r\n    \r\n    this.errorHistory.set(key, history);\r\n  }\r\n\r\n  /**\r\n   * Get performance trends\r\n   */\r\n  public getPerformanceTrends(): Record<string, number[]> {\r\n    return Object.fromEntries(this.performanceHistory);\r\n  }\r\n\r\n  /**\r\n   * Get error patterns\r\n   */\r\n  public getErrorPatterns(): Record<string, ErrorContext[]> {\r\n    return Object.fromEntries(this.errorHistory);\r\n  }\r\n\r\n  /**\r\n   * Generate comprehensive system report\r\n   */\r\n  public async generateComprehensiveReport(): Promise<{\r\n    timestamp: string;\r\n    performanceTrends: Record<string, number[]>;\r\n    errorPatterns: Record<string, ErrorContext[]>;\r\n    systemHealth: any;\r\n    tradingMetrics: any;\r\n  }> {\r\n    return {\r\n      timestamp: new Date().toISOString(),\r\n      performanceTrends: this.getPerformanceTrends(),\r\n      errorPatterns: this.getErrorPatterns(),\r\n      systemHealth: await this.getSystemHealth(),\r\n      tradingMetrics: this.getOperationCounters()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get current system health\r\n   */\r\n  private async getSystemHealth(): Promise<any> {\r\n    try {\r\n      const cpuInfo = os.cpus();\r\n      const memInfo = process.memoryUsage();\r\n      const loadAvg = os.loadavg();\r\n      \r\n      return {\r\n        cpu: {\r\n          cores: cpuInfo.length,\r\n          model: cpuInfo[0]?.model || 'Unknown',\r\n          loadAverage: loadAvg\r\n        },\r\n        memory: {\r\n          rss: memInfo.rss,\r\n          heapTotal: memInfo.heapTotal,\r\n          heapUsed: memInfo.heapUsed,\r\n          external: memInfo.external\r\n        },\r\n        system: {\r\n          platform: os.platform(),\r\n          arch: os.arch(),\r\n          uptime: os.uptime(),\r\n          hostname: os.hostname()\r\n        }\r\n      };\r\n    } catch (error) {\r\n      return { error: 'Failed to collect system health data' };\r\n    }\r\n  }\r\n}\r\n\r\n// Create and export singleton instance\r\nexport const tradingLogger = new TradingLogger();\r\n\r\n// Export types and interfaces\r\nexport type {\r\n  TradeExecutionContext,\r\n  MarketAnalysisContext,\r\n  StrategyDecisionContext,\r\n  SystemPerformanceContext,\r\n  ErrorContext,\r\n  ConfigChangeContext\r\n};"],"version":3}