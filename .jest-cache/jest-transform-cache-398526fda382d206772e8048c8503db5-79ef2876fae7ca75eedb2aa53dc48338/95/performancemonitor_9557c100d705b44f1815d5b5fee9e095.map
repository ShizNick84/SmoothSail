{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\core\\monitoring\\performance-monitor.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\core\\monitoring\\performance-monitor.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * INTEL NUC PERFORMANCE MONITORING SERVICE\r\n * =============================================================================\r\n * \r\n * This service monitors Intel NUC hardware performance, network connectivity,\r\n * database performance, and application metrics with comprehensive logging.\r\n * \r\n * Features:\r\n * - Intel NUC hardware monitoring (CPU, RAM, temperature)\r\n * - Network latency and SSH tunnel performance\r\n * - Database performance and query timing\r\n * - Application resource usage tracking\r\n * - Automated alerting and threshold management\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * =============================================================================\r\n */\r\n\r\nimport { EventEmitter } from 'events';\r\nimport { tradingLogger, SystemPerformanceContext } from '../logging/trading-logger';\r\nimport { execSync, exec } from 'child_process';\r\nimport { promisify } from 'util';\r\nimport os from 'os';\r\nimport fs from 'fs/promises';\r\nimport { performance } from 'perf_hooks';\r\n\r\nconst execAsync = promisify(exec);\r\n\r\n/**\r\n * Performance thresholds interface\r\n */\r\ninterface PerformanceThresholds {\r\n  cpu: { warning: number; critical: number };\r\n  memory: { warning: number; critical: number };\r\n  disk: { warning: number; critical: number };\r\n  temperature: { warning: number; critical: number };\r\n  network: { warning: number; critical: number };\r\n  database: { warning: number; critical: number };\r\n}\r\n\r\n/**\r\n * Hardware information interface\r\n */\r\ninterface HardwareInfo {\r\n  cpu: {\r\n    model: string;\r\n    cores: number;\r\n    threads: number;\r\n    baseFrequency: number;\r\n    maxFrequency: number;\r\n  };\r\n  memory: {\r\n    total: number;\r\n    type: string;\r\n    speed: number;\r\n  };\r\n  storage: {\r\n    type: string;\r\n    capacity: number;\r\n    interface: string;\r\n  };\r\n  network: {\r\n    interfaces: string[];\r\n    wifiCapable: boolean;\r\n  };\r\n}\r\n\r\n/**\r\n * Performance monitoring service for Intel NUC\r\n */\r\nexport class PerformanceMonitor extends EventEmitter {\r\n  private monitoringInterval?: NodeJS.Timeout;\r\n  private isMonitoring: boolean = false;\r\n  private thresholds: PerformanceThresholds;\r\n  private hardwareInfo?: HardwareInfo;\r\n  private performanceHistory: Map<string, number[]> = new Map();\r\n\r\n  constructor() {\r\n    super();\r\n    \r\n    // Default thresholds for Intel NUC\r\n    this.thresholds = {\r\n      cpu: { warning: 70, critical: 90 },\r\n      memory: { warning: 80, critical: 95 },\r\n      disk: { warning: 85, critical: 95 },\r\n      temperature: { warning: 70, critical: 85 },\r\n      network: { warning: 100, critical: 500 },\r\n      database: { warning: 100, critical: 500 }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Start performance monitoring\r\n   */\r\n  public async startMonitoring(intervalMs: number = 30000): Promise<void> {\r\n    if (this.isMonitoring) {\r\n      tradingLogger.warn('Performance monitoring is already running');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Initialize hardware information\r\n      await this.initializeHardwareInfo();\r\n      \r\n      this.isMonitoring = true;\r\n      \r\n      // Initial performance check\r\n      await this.performComprehensiveCheck();\r\n      \r\n      // Start periodic monitoring\r\n      this.monitoringInterval = setInterval(async () => {\r\n        try {\r\n          await this.performComprehensiveCheck();\r\n        } catch (error) {\r\n          tradingLogger.error('Error during performance monitoring cycle', error as Error);\r\n        }\r\n      }, intervalMs);\r\n\r\n      tradingLogger.logApplicationLifecycle('startup', 'PerformanceMonitor', {\r\n        interval: intervalMs,\r\n        thresholds: this.thresholds\r\n      });\r\n\r\n      this.emit('monitoring_started');\r\n      \r\n    } catch (error) {\r\n      tradingLogger.error('Failed to start performance monitoring', error as Error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop performance monitoring\r\n   */\r\n  public stopMonitoring(): void {\r\n    if (this.monitoringInterval) {\r\n      clearInterval(this.monitoringInterval);\r\n      this.monitoringInterval = undefined;\r\n    }\r\n    \r\n    this.isMonitoring = false;\r\n    \r\n    tradingLogger.logApplicationLifecycle('shutdown', 'PerformanceMonitor');\r\n    this.emit('monitoring_stopped');\r\n  }\r\n\r\n  /**\r\n   * Initialize hardware information\r\n   */\r\n  private async initializeHardwareInfo(): Promise<void> {\r\n    try {\r\n      const cpuInfo = os.cpus();\r\n      const totalMem = os.totalmem();\r\n      \r\n      // Get detailed CPU information\r\n      let cpuModel = cpuInfo[0]?.model || 'Unknown';\r\n      let baseFreq = 0;\r\n      let maxFreq = 0;\r\n      \r\n      try {\r\n        const cpuFreqInfo = await execAsync('cat /proc/cpuinfo | grep \"cpu MHz\" | head -1');\r\n        const freqMatch = cpuFreqInfo.stdout.match(/cpu MHz\\s*:\\s*([0-9.]+)/);\r\n        if (freqMatch) {\r\n          baseFreq = parseFloat(freqMatch[1]);\r\n        }\r\n      } catch (error) {\r\n        // Ignore if can't get frequency info\r\n      }\r\n\r\n      // Get memory information\r\n      let memType = 'Unknown';\r\n      let memSpeed = 0;\r\n      \r\n      try {\r\n        const memInfo = await execAsync('sudo dmidecode -t memory | grep -E \"Type:|Speed:\" | head -2');\r\n        const typeMatch = memInfo.stdout.match(/Type:\\s*([^\\n]+)/);\r\n        const speedMatch = memInfo.stdout.match(/Speed:\\s*([0-9]+)/);\r\n        \r\n        if (typeMatch) memType = typeMatch[1].trim();\r\n        if (speedMatch) memSpeed = parseInt(speedMatch[1]);\r\n      } catch (error) {\r\n        // Ignore if can't get memory details\r\n      }\r\n\r\n      // Get storage information\r\n      let storageType = 'Unknown';\r\n      let storageCapacity = 0;\r\n      let storageInterface = 'Unknown';\r\n      \r\n      try {\r\n        const storageInfo = await execAsync('lsblk -d -o NAME,SIZE,ROTA | grep -v loop');\r\n        const lines = storageInfo.stdout.trim().split('\\n').slice(1);\r\n        \r\n        if (lines.length > 0) {\r\n          const mainDisk = lines[0].split(/\\s+/);\r\n          const sizeStr = mainDisk[1];\r\n          const isRotational = mainDisk[2] === '1';\r\n          \r\n          storageType = isRotational ? 'HDD' : 'SSD';\r\n          storageCapacity = this.parseStorageSize(sizeStr);\r\n          storageInterface = 'SATA'; // Default assumption\r\n        }\r\n      } catch (error) {\r\n        // Ignore if can't get storage info\r\n      }\r\n\r\n      // Get network interfaces\r\n      const networkInterfaces = Object.keys(os.networkInterfaces());\r\n      const wifiCapable = networkInterfaces.some(iface => \r\n        iface.includes('wlan') || iface.includes('wifi')\r\n      );\r\n\r\n      this.hardwareInfo = {\r\n        cpu: {\r\n          model: cpuModel,\r\n          cores: cpuInfo.length,\r\n          threads: cpuInfo.length, // Simplified\r\n          baseFrequency: baseFreq,\r\n          maxFrequency: maxFreq || baseFreq\r\n        },\r\n        memory: {\r\n          total: totalMem,\r\n          type: memType,\r\n          speed: memSpeed\r\n        },\r\n        storage: {\r\n          type: storageType,\r\n          capacity: storageCapacity,\r\n          interface: storageInterface\r\n        },\r\n        network: {\r\n          interfaces: networkInterfaces,\r\n          wifiCapable\r\n        }\r\n      };\r\n\r\n      tradingLogger.info('Hardware information initialized', {\r\n        component: 'PerformanceMonitor',\r\n        hardwareInfo: this.hardwareInfo\r\n      });\r\n\r\n    } catch (error) {\r\n      tradingLogger.error('Failed to initialize hardware information', error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Perform comprehensive performance check\r\n   */\r\n  private async performComprehensiveCheck(): Promise<void> {\r\n    const timestamp = new Date();\r\n    \r\n    // Check Intel NUC hardware\r\n    await this.checkIntelNUCPerformance(timestamp);\r\n    \r\n    // Check network performance\r\n    await this.checkNetworkPerformance(timestamp);\r\n    \r\n    // Check database performance\r\n    await this.checkDatabasePerformance(timestamp);\r\n    \r\n    // Check application performance\r\n    await this.checkApplicationPerformance(timestamp);\r\n  }\r\n\r\n  /**\r\n   * Check Intel NUC hardware performance\r\n   */\r\n  private async checkIntelNUCPerformance(timestamp: Date): Promise<void> {\r\n    try {\r\n      // Get CPU usage\r\n      const cpuUsage = await this.getCPUUsage();\r\n      \r\n      // Get memory usage\r\n      const memoryUsage = await this.getMemoryUsage();\r\n      \r\n      // Get disk usage\r\n      const diskUsage = await this.getDiskUsage();\r\n      \r\n      // Get CPU temperature (if available)\r\n      const temperature = await this.getCPUTemperature();\r\n      \r\n      // Determine overall status\r\n      const status = this.determineSystemStatus({\r\n        cpu: cpuUsage,\r\n        memory: memoryUsage.percentage,\r\n        disk: diskUsage.percentage,\r\n        temperature\r\n      });\r\n\r\n      const context: SystemPerformanceContext = {\r\n        component: 'intel_nuc',\r\n        metrics: {\r\n          cpu: {\r\n            usage: cpuUsage,\r\n            temperature,\r\n            frequency: this.hardwareInfo?.cpu.baseFrequency\r\n          },\r\n          memory: memoryUsage,\r\n          disk: diskUsage\r\n        },\r\n        thresholds: this.thresholds,\r\n        status,\r\n        timestamp\r\n      };\r\n\r\n      tradingLogger.logSystemPerformance(context);\r\n      \r\n      // Store performance history\r\n      this.storePerformanceMetric('cpu_usage', cpuUsage);\r\n      this.storePerformanceMetric('memory_usage', memoryUsage.percentage);\r\n      this.storePerformanceMetric('disk_usage', diskUsage.percentage);\r\n      \r\n      if (temperature > 0) {\r\n        this.storePerformanceMetric('cpu_temperature', temperature);\r\n      }\r\n\r\n      // Emit events for critical conditions\r\n      if (status === 'critical') {\r\n        this.emit('critical_performance', context);\r\n      } else if (status === 'warning') {\r\n        this.emit('performance_warning', context);\r\n      }\r\n\r\n    } catch (error) {\r\n      tradingLogger.error('Failed to check Intel NUC performance', error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check network performance including SSH tunnel\r\n   */\r\n  private async checkNetworkPerformance(timestamp: Date): Promise<void> {\r\n    try {\r\n      // Check SSH tunnel latency\r\n      const tunnelLatency = await this.checkSSHTunnelLatency();\r\n      \r\n      // Check API connectivity latency\r\n      const apiLatency = await this.checkAPILatency();\r\n      \r\n      // Get network interface statistics\r\n      const networkStats = await this.getNetworkStatistics();\r\n      \r\n      const avgLatency = (tunnelLatency + apiLatency) / 2;\r\n      const status = avgLatency > this.thresholds.network.critical ? 'critical' :\r\n                    avgLatency > this.thresholds.network.warning ? 'warning' : 'healthy';\r\n\r\n      const context: SystemPerformanceContext = {\r\n        component: 'network',\r\n        metrics: {\r\n          network: {\r\n            latency: avgLatency,\r\n            bandwidth: networkStats.bandwidth,\r\n            packetLoss: networkStats.packetLoss,\r\n            connections: networkStats.connections\r\n          }\r\n        },\r\n        thresholds: this.thresholds,\r\n        status,\r\n        timestamp\r\n      };\r\n\r\n      tradingLogger.logSystemPerformance(context);\r\n      \r\n      // Store network performance history\r\n      this.storePerformanceMetric('network_latency', avgLatency);\r\n      this.storePerformanceMetric('ssh_tunnel_latency', tunnelLatency);\r\n      this.storePerformanceMetric('api_latency', apiLatency);\r\n\r\n      if (status !== 'healthy') {\r\n        this.emit('network_performance_issue', context);\r\n      }\r\n\r\n    } catch (error) {\r\n      tradingLogger.error('Failed to check network performance', error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check database performance\r\n   */\r\n  private async checkDatabasePerformance(timestamp: Date): Promise<void> {\r\n    try {\r\n      // Check database connection count\r\n      const connections = await this.getDatabaseConnections();\r\n      \r\n      // Check query performance\r\n      const queryTime = await this.measureDatabaseQueryTime();\r\n      \r\n      // Check cache hit ratio (if available)\r\n      const cacheHitRatio = await this.getDatabaseCacheHitRatio();\r\n      \r\n      const status = queryTime > this.thresholds.database.critical ? 'critical' :\r\n                    queryTime > this.thresholds.database.warning ? 'warning' : 'healthy';\r\n\r\n      const context: SystemPerformanceContext = {\r\n        component: 'database',\r\n        metrics: {\r\n          database: {\r\n            connections,\r\n            queryTime,\r\n            cacheHitRatio\r\n          }\r\n        },\r\n        thresholds: this.thresholds,\r\n        status,\r\n        timestamp\r\n      };\r\n\r\n      tradingLogger.logSystemPerformance(context);\r\n      \r\n      // Store database performance history\r\n      this.storePerformanceMetric('db_query_time', queryTime);\r\n      this.storePerformanceMetric('db_connections', connections);\r\n      \r\n      if (cacheHitRatio > 0) {\r\n        this.storePerformanceMetric('db_cache_hit_ratio', cacheHitRatio);\r\n      }\r\n\r\n      if (status !== 'healthy') {\r\n        this.emit('database_performance_issue', context);\r\n      }\r\n\r\n    } catch (error) {\r\n      tradingLogger.error('Failed to check database performance', error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check application performance\r\n   */\r\n  private async checkApplicationPerformance(timestamp: Date): Promise<void> {\r\n    try {\r\n      const memUsage = process.memoryUsage();\r\n      const cpuUsage = process.cpuUsage();\r\n      \r\n      // Calculate application-specific metrics\r\n      const heapUsedMB = memUsage.heapUsed / 1024 / 1024;\r\n      const heapTotalMB = memUsage.heapTotal / 1024 / 1024;\r\n      const heapUsagePercent = (heapUsedMB / heapTotalMB) * 100;\r\n      \r\n      const status = heapUsagePercent > 90 ? 'critical' :\r\n                    heapUsagePercent > 75 ? 'warning' : 'healthy';\r\n\r\n      const context: SystemPerformanceContext = {\r\n        component: 'application',\r\n        metrics: {\r\n          memory: {\r\n            used: memUsage.heapUsed,\r\n            total: memUsage.heapTotal,\r\n            percentage: heapUsagePercent\r\n          }\r\n        },\r\n        thresholds: this.thresholds,\r\n        status,\r\n        timestamp\r\n      };\r\n\r\n      tradingLogger.logSystemPerformance(context);\r\n      \r\n      // Store application performance history\r\n      this.storePerformanceMetric('app_heap_usage', heapUsagePercent);\r\n      this.storePerformanceMetric('app_memory_rss', memUsage.rss / 1024 / 1024);\r\n\r\n      if (status !== 'healthy') {\r\n        this.emit('application_performance_issue', context);\r\n      }\r\n\r\n    } catch (error) {\r\n      tradingLogger.error('Failed to check application performance', error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get CPU usage percentage\r\n   */\r\n  private async getCPUUsage(): Promise<number> {\r\n    return new Promise((resolve) => {\r\n      const startUsage = process.cpuUsage();\r\n      const startTime = performance.now();\r\n\r\n      setTimeout(() => {\r\n        const endUsage = process.cpuUsage(startUsage);\r\n        const endTime = performance.now();\r\n        const timeDiff = endTime - startTime;\r\n\r\n        const userPercent = (endUsage.user / 1000) / timeDiff * 100;\r\n        const systemPercent = (endUsage.system / 1000) / timeDiff * 100;\r\n        \r\n        resolve(Math.min(userPercent + systemPercent, 100));\r\n      }, 100);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get memory usage information\r\n   */\r\n  private async getMemoryUsage(): Promise<{\r\n    used: number;\r\n    total: number;\r\n    percentage: number;\r\n    swap?: number;\r\n  }> {\r\n    const totalMem = os.totalmem();\r\n    const freeMem = os.freemem();\r\n    const usedMem = totalMem - freeMem;\r\n\r\n    let swapUsed = 0;\r\n    try {\r\n      const swapInfo = await execAsync('free | grep Swap');\r\n      const swapMatch = swapInfo.stdout.match(/Swap:\\s+\\d+\\s+(\\d+)/);\r\n      if (swapMatch) {\r\n        swapUsed = parseInt(swapMatch[1]) * 1024; // Convert from KB to bytes\r\n      }\r\n    } catch (error) {\r\n      // Ignore if can't get swap info\r\n    }\r\n\r\n    return {\r\n      used: usedMem,\r\n      total: totalMem,\r\n      percentage: (usedMem / totalMem) * 100,\r\n      swap: swapUsed\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get disk usage information\r\n   */\r\n  private async getDiskUsage(): Promise<{\r\n    used: number;\r\n    total: number;\r\n    percentage: number;\r\n    iops?: number;\r\n  }> {\r\n    try {\r\n      const diskInfo = await execAsync('df -h / | tail -1');\r\n      const parts = diskInfo.stdout.trim().split(/\\s+/);\r\n      \r\n      const total = this.parseStorageSize(parts[1]);\r\n      const used = this.parseStorageSize(parts[2]);\r\n      const percentage = parseFloat(parts[4].replace('%', ''));\r\n\r\n      // Try to get IOPS if available\r\n      let iops = 0;\r\n      try {\r\n        const iostat = await execAsync('iostat -x 1 1 | tail -n +4 | head -1');\r\n        const ioMatch = iostat.stdout.match(/\\s+([0-9.]+)\\s+([0-9.]+)$/);\r\n        if (ioMatch) {\r\n          iops = parseFloat(ioMatch[1]) + parseFloat(ioMatch[2]);\r\n        }\r\n      } catch (error) {\r\n        // Ignore if iostat not available\r\n      }\r\n\r\n      return { used, total, percentage, iops };\r\n    } catch (error) {\r\n      return { used: 0, total: 0, percentage: 0 };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get CPU temperature\r\n   */\r\n  private async getCPUTemperature(): Promise<number> {\r\n    try {\r\n      // Try different methods to get CPU temperature\r\n      const methods = [\r\n        'cat /sys/class/thermal/thermal_zone0/temp',\r\n        'sensors | grep \"Core 0\" | awk \\'{print $3}\\' | sed \\'s/+//\\' | sed \\'s/°C//\\'',\r\n        'cat /sys/devices/platform/coretemp.0/hwmon/hwmon*/temp1_input'\r\n      ];\r\n\r\n      for (const method of methods) {\r\n        try {\r\n          const result = await execAsync(method);\r\n          const temp = parseFloat(result.stdout.trim());\r\n          \r\n          // Convert from millidegrees if necessary\r\n          if (temp > 1000) {\r\n            return temp / 1000;\r\n          }\r\n          \r\n          if (temp > 0 && temp < 150) {\r\n            return temp;\r\n          }\r\n        } catch (error) {\r\n          continue;\r\n        }\r\n      }\r\n      \r\n      return 0; // Temperature not available\r\n    } catch (error) {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check SSH tunnel latency\r\n   */\r\n  private async checkSSHTunnelLatency(): Promise<number> {\r\n    try {\r\n      const startTime = performance.now();\r\n      await execAsync('curl -s --max-time 5 http://localhost:8443/api/v4/spot/time');\r\n      const endTime = performance.now();\r\n      \r\n      return endTime - startTime;\r\n    } catch (error) {\r\n      return 999; // High latency indicates connection issues\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check API latency\r\n   */\r\n  private async checkAPILatency(): Promise<number> {\r\n    try {\r\n      const startTime = performance.now();\r\n      // This would be replaced with actual API call\r\n      await new Promise(resolve => setTimeout(resolve, 10));\r\n      const endTime = performance.now();\r\n      \r\n      return endTime - startTime;\r\n    } catch (error) {\r\n      return 999;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get network statistics\r\n   */\r\n  private async getNetworkStatistics(): Promise<{\r\n    bandwidth: number;\r\n    packetLoss: number;\r\n    connections: number;\r\n  }> {\r\n    try {\r\n      // Get active connections\r\n      const netstat = await execAsync('netstat -an | grep ESTABLISHED | wc -l');\r\n      const connections = parseInt(netstat.stdout.trim()) || 0;\r\n\r\n      // Simplified bandwidth and packet loss (would need more sophisticated monitoring)\r\n      return {\r\n        bandwidth: 1000000, // 1MB/s default\r\n        packetLoss: 0,\r\n        connections\r\n      };\r\n    } catch (error) {\r\n      return { bandwidth: 0, packetLoss: 0, connections: 0 };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get database connections\r\n   */\r\n  private async getDatabaseConnections(): Promise<number> {\r\n    try {\r\n      // This would be replaced with actual database query\r\n      return 5; // Default connection count\r\n    } catch (error) {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Measure database query time\r\n   */\r\n  private async measureDatabaseQueryTime(): Promise<number> {\r\n    try {\r\n      const startTime = performance.now();\r\n      // This would be replaced with actual database query\r\n      await new Promise(resolve => setTimeout(resolve, 5));\r\n      const endTime = performance.now();\r\n      \r\n      return endTime - startTime;\r\n    } catch (error) {\r\n      return 999;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get database cache hit ratio\r\n   */\r\n  private async getDatabaseCacheHitRatio(): Promise<number> {\r\n    try {\r\n      // This would be replaced with actual database query\r\n      return 95.5; // Default cache hit ratio\r\n    } catch (error) {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parse storage size string to bytes\r\n   */\r\n  private parseStorageSize(sizeStr: string): number {\r\n    const units = { K: 1024, M: 1024**2, G: 1024**3, T: 1024**4 };\r\n    const match = sizeStr.match(/^([0-9.]+)([KMGT]?)$/);\r\n    \r\n    if (!match) return 0;\r\n    \r\n    const value = parseFloat(match[1]);\r\n    const unit = match[2] as keyof typeof units;\r\n    \r\n    return value * (units[unit] || 1);\r\n  }\r\n\r\n  /**\r\n   * Determine system status based on metrics\r\n   */\r\n  private determineSystemStatus(metrics: {\r\n    cpu: number;\r\n    memory: number;\r\n    disk: number;\r\n    temperature: number;\r\n  }): 'healthy' | 'warning' | 'critical' {\r\n    const { cpu, memory, disk, temperature } = metrics;\r\n    \r\n    if (cpu > this.thresholds.cpu.critical ||\r\n        memory > this.thresholds.memory.critical ||\r\n        disk > this.thresholds.disk.critical ||\r\n        temperature > this.thresholds.temperature.critical) {\r\n      return 'critical';\r\n    }\r\n    \r\n    if (cpu > this.thresholds.cpu.warning ||\r\n        memory > this.thresholds.memory.warning ||\r\n        disk > this.thresholds.disk.warning ||\r\n        temperature > this.thresholds.temperature.warning) {\r\n      return 'warning';\r\n    }\r\n    \r\n    return 'healthy';\r\n  }\r\n\r\n  /**\r\n   * Store performance metric in history\r\n   */\r\n  private storePerformanceMetric(metric: string, value: number): void {\r\n    const history = this.performanceHistory.get(metric) || [];\r\n    history.push(value);\r\n    \r\n    // Keep only last 100 values\r\n    if (history.length > 100) {\r\n      history.shift();\r\n    }\r\n    \r\n    this.performanceHistory.set(metric, history);\r\n  }\r\n\r\n  /**\r\n   * Get performance history\r\n   */\r\n  public getPerformanceHistory(): Record<string, number[]> {\r\n    return Object.fromEntries(this.performanceHistory);\r\n  }\r\n\r\n  /**\r\n   * Update performance thresholds\r\n   */\r\n  public updateThresholds(newThresholds: Partial<PerformanceThresholds>): void {\r\n    this.thresholds = { ...this.thresholds, ...newThresholds };\r\n    \r\n    tradingLogger.info('Performance thresholds updated', {\r\n      component: 'PerformanceMonitor',\r\n      thresholds: this.thresholds\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get current hardware information\r\n   */\r\n  public getHardwareInfo(): HardwareInfo | undefined {\r\n    return this.hardwareInfo;\r\n  }\r\n\r\n  /**\r\n   * Get monitoring status\r\n   */\r\n  public isMonitoringActive(): boolean {\r\n    return this.isMonitoring;\r\n  }\r\n}\r\n\r\n// Create and export singleton instance\r\nexport const performanceMonitor = new PerformanceMonitor();\r\n\r\n// Export types\r\nexport type { PerformanceThresholds, HardwareInfo };"],"version":3}