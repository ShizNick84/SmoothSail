6fc86ae1d1bb3dc865d5240466b906b0
"use strict";
/**
 * =============================================================================
 * INTEL NUC PERFORMANCE MONITORING SERVICE
 * =============================================================================
 *
 * This service monitors Intel NUC hardware performance, network connectivity,
 * database performance, and application metrics with comprehensive logging.
 *
 * Features:
 * - Intel NUC hardware monitoring (CPU, RAM, temperature)
 * - Network latency and SSH tunnel performance
 * - Database performance and query timing
 * - Application resource usage tracking
 * - Automated alerting and threshold management
 *
 * @author AI Crypto Trading System
 * @version 1.0.0
 * =============================================================================
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.performanceMonitor = exports.PerformanceMonitor = void 0;
const events_1 = require("events");
const trading_logger_1 = require("../logging/trading-logger");
const child_process_1 = require("child_process");
const util_1 = require("util");
const os_1 = __importDefault(require("os"));
const perf_hooks_1 = require("perf_hooks");
const execAsync = (0, util_1.promisify)(child_process_1.exec);
/**
 * Performance monitoring service for Intel NUC
 */
class PerformanceMonitor extends events_1.EventEmitter {
    monitoringInterval;
    isMonitoring = false;
    thresholds;
    hardwareInfo;
    performanceHistory = new Map();
    constructor() {
        super();
        // Default thresholds for Intel NUC
        this.thresholds = {
            cpu: { warning: 70, critical: 90 },
            memory: { warning: 80, critical: 95 },
            disk: { warning: 85, critical: 95 },
            temperature: { warning: 70, critical: 85 },
            network: { warning: 100, critical: 500 },
            database: { warning: 100, critical: 500 }
        };
    }
    /**
     * Start performance monitoring
     */
    async startMonitoring(intervalMs = 30000) {
        if (this.isMonitoring) {
            trading_logger_1.tradingLogger.warn('Performance monitoring is already running');
            return;
        }
        try {
            // Initialize hardware information
            await this.initializeHardwareInfo();
            this.isMonitoring = true;
            // Initial performance check
            await this.performComprehensiveCheck();
            // Start periodic monitoring
            this.monitoringInterval = setInterval(async () => {
                try {
                    await this.performComprehensiveCheck();
                }
                catch (error) {
                    trading_logger_1.tradingLogger.error('Error during performance monitoring cycle', error);
                }
            }, intervalMs);
            trading_logger_1.tradingLogger.logApplicationLifecycle('startup', 'PerformanceMonitor', {
                interval: intervalMs,
                thresholds: this.thresholds
            });
            this.emit('monitoring_started');
        }
        catch (error) {
            trading_logger_1.tradingLogger.error('Failed to start performance monitoring', error);
            throw error;
        }
    }
    /**
     * Stop performance monitoring
     */
    stopMonitoring() {
        if (this.monitoringInterval) {
            clearInterval(this.monitoringInterval);
            this.monitoringInterval = undefined;
        }
        this.isMonitoring = false;
        trading_logger_1.tradingLogger.logApplicationLifecycle('shutdown', 'PerformanceMonitor');
        this.emit('monitoring_stopped');
    }
    /**
     * Initialize hardware information
     */
    async initializeHardwareInfo() {
        try {
            const cpuInfo = os_1.default.cpus();
            const totalMem = os_1.default.totalmem();
            // Get detailed CPU information
            let cpuModel = cpuInfo[0]?.model || 'Unknown';
            let baseFreq = 0;
            let maxFreq = 0;
            try {
                const cpuFreqInfo = await execAsync('cat /proc/cpuinfo | grep "cpu MHz" | head -1');
                const freqMatch = cpuFreqInfo.stdout.match(/cpu MHz\s*:\s*([0-9.]+)/);
                if (freqMatch) {
                    baseFreq = parseFloat(freqMatch[1]);
                }
            }
            catch (error) {
                // Ignore if can't get frequency info
            }
            // Get memory information
            let memType = 'Unknown';
            let memSpeed = 0;
            try {
                const memInfo = await execAsync('sudo dmidecode -t memory | grep -E "Type:|Speed:" | head -2');
                const typeMatch = memInfo.stdout.match(/Type:\s*([^\n]+)/);
                const speedMatch = memInfo.stdout.match(/Speed:\s*([0-9]+)/);
                if (typeMatch)
                    memType = typeMatch[1].trim();
                if (speedMatch)
                    memSpeed = parseInt(speedMatch[1]);
            }
            catch (error) {
                // Ignore if can't get memory details
            }
            // Get storage information
            let storageType = 'Unknown';
            let storageCapacity = 0;
            let storageInterface = 'Unknown';
            try {
                const storageInfo = await execAsync('lsblk -d -o NAME,SIZE,ROTA | grep -v loop');
                const lines = storageInfo.stdout.trim().split('\n').slice(1);
                if (lines.length > 0) {
                    const mainDisk = lines[0].split(/\s+/);
                    const sizeStr = mainDisk[1];
                    const isRotational = mainDisk[2] === '1';
                    storageType = isRotational ? 'HDD' : 'SSD';
                    storageCapacity = this.parseStorageSize(sizeStr);
                    storageInterface = 'SATA'; // Default assumption
                }
            }
            catch (error) {
                // Ignore if can't get storage info
            }
            // Get network interfaces
            const networkInterfaces = Object.keys(os_1.default.networkInterfaces());
            const wifiCapable = networkInterfaces.some(iface => iface.includes('wlan') || iface.includes('wifi'));
            this.hardwareInfo = {
                cpu: {
                    model: cpuModel,
                    cores: cpuInfo.length,
                    threads: cpuInfo.length, // Simplified
                    baseFrequency: baseFreq,
                    maxFrequency: maxFreq || baseFreq
                },
                memory: {
                    total: totalMem,
                    type: memType,
                    speed: memSpeed
                },
                storage: {
                    type: storageType,
                    capacity: storageCapacity,
                    interface: storageInterface
                },
                network: {
                    interfaces: networkInterfaces,
                    wifiCapable
                }
            };
            trading_logger_1.tradingLogger.info('Hardware information initialized', {
                component: 'PerformanceMonitor',
                hardwareInfo: this.hardwareInfo
            });
        }
        catch (error) {
            trading_logger_1.tradingLogger.error('Failed to initialize hardware information', error);
        }
    }
    /**
     * Perform comprehensive performance check
     */
    async performComprehensiveCheck() {
        const timestamp = new Date();
        // Check Intel NUC hardware
        await this.checkIntelNUCPerformance(timestamp);
        // Check network performance
        await this.checkNetworkPerformance(timestamp);
        // Check database performance
        await this.checkDatabasePerformance(timestamp);
        // Check application performance
        await this.checkApplicationPerformance(timestamp);
    }
    /**
     * Check Intel NUC hardware performance
     */
    async checkIntelNUCPerformance(timestamp) {
        try {
            // Get CPU usage
            const cpuUsage = await this.getCPUUsage();
            // Get memory usage
            const memoryUsage = await this.getMemoryUsage();
            // Get disk usage
            const diskUsage = await this.getDiskUsage();
            // Get CPU temperature (if available)
            const temperature = await this.getCPUTemperature();
            // Determine overall status
            const status = this.determineSystemStatus({
                cpu: cpuUsage,
                memory: memoryUsage.percentage,
                disk: diskUsage.percentage,
                temperature
            });
            const context = {
                component: 'intel_nuc',
                metrics: {
                    cpu: {
                        usage: cpuUsage,
                        temperature,
                        frequency: this.hardwareInfo?.cpu.baseFrequency
                    },
                    memory: memoryUsage,
                    disk: diskUsage
                },
                thresholds: this.thresholds,
                status,
                timestamp
            };
            trading_logger_1.tradingLogger.logSystemPerformance(context);
            // Store performance history
            this.storePerformanceMetric('cpu_usage', cpuUsage);
            this.storePerformanceMetric('memory_usage', memoryUsage.percentage);
            this.storePerformanceMetric('disk_usage', diskUsage.percentage);
            if (temperature > 0) {
                this.storePerformanceMetric('cpu_temperature', temperature);
            }
            // Emit events for critical conditions
            if (status === 'critical') {
                this.emit('critical_performance', context);
            }
            else if (status === 'warning') {
                this.emit('performance_warning', context);
            }
        }
        catch (error) {
            trading_logger_1.tradingLogger.error('Failed to check Intel NUC performance', error);
        }
    }
    /**
     * Check network performance including SSH tunnel
     */
    async checkNetworkPerformance(timestamp) {
        try {
            // Check SSH tunnel latency
            const tunnelLatency = await this.checkSSHTunnelLatency();
            // Check API connectivity latency
            const apiLatency = await this.checkAPILatency();
            // Get network interface statistics
            const networkStats = await this.getNetworkStatistics();
            const avgLatency = (tunnelLatency + apiLatency) / 2;
            const status = avgLatency > this.thresholds.network.critical ? 'critical' :
                avgLatency > this.thresholds.network.warning ? 'warning' : 'healthy';
            const context = {
                component: 'network',
                metrics: {
                    network: {
                        latency: avgLatency,
                        bandwidth: networkStats.bandwidth,
                        packetLoss: networkStats.packetLoss,
                        connections: networkStats.connections
                    }
                },
                thresholds: this.thresholds,
                status,
                timestamp
            };
            trading_logger_1.tradingLogger.logSystemPerformance(context);
            // Store network performance history
            this.storePerformanceMetric('network_latency', avgLatency);
            this.storePerformanceMetric('ssh_tunnel_latency', tunnelLatency);
            this.storePerformanceMetric('api_latency', apiLatency);
            if (status !== 'healthy') {
                this.emit('network_performance_issue', context);
            }
        }
        catch (error) {
            trading_logger_1.tradingLogger.error('Failed to check network performance', error);
        }
    }
    /**
     * Check database performance
     */
    async checkDatabasePerformance(timestamp) {
        try {
            // Check database connection count
            const connections = await this.getDatabaseConnections();
            // Check query performance
            const queryTime = await this.measureDatabaseQueryTime();
            // Check cache hit ratio (if available)
            const cacheHitRatio = await this.getDatabaseCacheHitRatio();
            const status = queryTime > this.thresholds.database.critical ? 'critical' :
                queryTime > this.thresholds.database.warning ? 'warning' : 'healthy';
            const context = {
                component: 'database',
                metrics: {
                    database: {
                        connections,
                        queryTime,
                        cacheHitRatio
                    }
                },
                thresholds: this.thresholds,
                status,
                timestamp
            };
            trading_logger_1.tradingLogger.logSystemPerformance(context);
            // Store database performance history
            this.storePerformanceMetric('db_query_time', queryTime);
            this.storePerformanceMetric('db_connections', connections);
            if (cacheHitRatio > 0) {
                this.storePerformanceMetric('db_cache_hit_ratio', cacheHitRatio);
            }
            if (status !== 'healthy') {
                this.emit('database_performance_issue', context);
            }
        }
        catch (error) {
            trading_logger_1.tradingLogger.error('Failed to check database performance', error);
        }
    }
    /**
     * Check application performance
     */
    async checkApplicationPerformance(timestamp) {
        try {
            const memUsage = process.memoryUsage();
            const cpuUsage = process.cpuUsage();
            // Calculate application-specific metrics
            const heapUsedMB = memUsage.heapUsed / 1024 / 1024;
            const heapTotalMB = memUsage.heapTotal / 1024 / 1024;
            const heapUsagePercent = (heapUsedMB / heapTotalMB) * 100;
            const status = heapUsagePercent > 90 ? 'critical' :
                heapUsagePercent > 75 ? 'warning' : 'healthy';
            const context = {
                component: 'application',
                metrics: {
                    memory: {
                        used: memUsage.heapUsed,
                        total: memUsage.heapTotal,
                        percentage: heapUsagePercent
                    }
                },
                thresholds: this.thresholds,
                status,
                timestamp
            };
            trading_logger_1.tradingLogger.logSystemPerformance(context);
            // Store application performance history
            this.storePerformanceMetric('app_heap_usage', heapUsagePercent);
            this.storePerformanceMetric('app_memory_rss', memUsage.rss / 1024 / 1024);
            if (status !== 'healthy') {
                this.emit('application_performance_issue', context);
            }
        }
        catch (error) {
            trading_logger_1.tradingLogger.error('Failed to check application performance', error);
        }
    }
    /**
     * Get CPU usage percentage
     */
    async getCPUUsage() {
        return new Promise((resolve) => {
            const startUsage = process.cpuUsage();
            const startTime = perf_hooks_1.performance.now();
            setTimeout(() => {
                const endUsage = process.cpuUsage(startUsage);
                const endTime = perf_hooks_1.performance.now();
                const timeDiff = endTime - startTime;
                const userPercent = (endUsage.user / 1000) / timeDiff * 100;
                const systemPercent = (endUsage.system / 1000) / timeDiff * 100;
                resolve(Math.min(userPercent + systemPercent, 100));
            }, 100);
        });
    }
    /**
     * Get memory usage information
     */
    async getMemoryUsage() {
        const totalMem = os_1.default.totalmem();
        const freeMem = os_1.default.freemem();
        const usedMem = totalMem - freeMem;
        let swapUsed = 0;
        try {
            const swapInfo = await execAsync('free | grep Swap');
            const swapMatch = swapInfo.stdout.match(/Swap:\s+\d+\s+(\d+)/);
            if (swapMatch) {
                swapUsed = parseInt(swapMatch[1]) * 1024; // Convert from KB to bytes
            }
        }
        catch (error) {
            // Ignore if can't get swap info
        }
        return {
            used: usedMem,
            total: totalMem,
            percentage: (usedMem / totalMem) * 100,
            swap: swapUsed
        };
    }
    /**
     * Get disk usage information
     */
    async getDiskUsage() {
        try {
            const diskInfo = await execAsync('df -h / | tail -1');
            const parts = diskInfo.stdout.trim().split(/\s+/);
            const total = this.parseStorageSize(parts[1]);
            const used = this.parseStorageSize(parts[2]);
            const percentage = parseFloat(parts[4].replace('%', ''));
            // Try to get IOPS if available
            let iops = 0;
            try {
                const iostat = await execAsync('iostat -x 1 1 | tail -n +4 | head -1');
                const ioMatch = iostat.stdout.match(/\s+([0-9.]+)\s+([0-9.]+)$/);
                if (ioMatch) {
                    iops = parseFloat(ioMatch[1]) + parseFloat(ioMatch[2]);
                }
            }
            catch (error) {
                // Ignore if iostat not available
            }
            return { used, total, percentage, iops };
        }
        catch (error) {
            return { used: 0, total: 0, percentage: 0 };
        }
    }
    /**
     * Get CPU temperature
     */
    async getCPUTemperature() {
        try {
            // Try different methods to get CPU temperature
            const methods = [
                'cat /sys/class/thermal/thermal_zone0/temp',
                'sensors | grep "Core 0" | awk \'{print $3}\' | sed \'s/+//\' | sed \'s/°C//\'',
                'cat /sys/devices/platform/coretemp.0/hwmon/hwmon*/temp1_input'
            ];
            for (const method of methods) {
                try {
                    const result = await execAsync(method);
                    const temp = parseFloat(result.stdout.trim());
                    // Convert from millidegrees if necessary
                    if (temp > 1000) {
                        return temp / 1000;
                    }
                    if (temp > 0 && temp < 150) {
                        return temp;
                    }
                }
                catch (error) {
                    continue;
                }
            }
            return 0; // Temperature not available
        }
        catch (error) {
            return 0;
        }
    }
    /**
     * Check SSH tunnel latency
     */
    async checkSSHTunnelLatency() {
        try {
            const startTime = perf_hooks_1.performance.now();
            await execAsync('curl -s --max-time 5 http://localhost:8443/api/v4/spot/time');
            const endTime = perf_hooks_1.performance.now();
            return endTime - startTime;
        }
        catch (error) {
            return 999; // High latency indicates connection issues
        }
    }
    /**
     * Check API latency
     */
    async checkAPILatency() {
        try {
            const startTime = perf_hooks_1.performance.now();
            // This would be replaced with actual API call
            await new Promise(resolve => setTimeout(resolve, 10));
            const endTime = perf_hooks_1.performance.now();
            return endTime - startTime;
        }
        catch (error) {
            return 999;
        }
    }
    /**
     * Get network statistics
     */
    async getNetworkStatistics() {
        try {
            // Get active connections
            const netstat = await execAsync('netstat -an | grep ESTABLISHED | wc -l');
            const connections = parseInt(netstat.stdout.trim()) || 0;
            // Simplified bandwidth and packet loss (would need more sophisticated monitoring)
            return {
                bandwidth: 1000000, // 1MB/s default
                packetLoss: 0,
                connections
            };
        }
        catch (error) {
            return { bandwidth: 0, packetLoss: 0, connections: 0 };
        }
    }
    /**
     * Get database connections
     */
    async getDatabaseConnections() {
        try {
            // This would be replaced with actual database query
            return 5; // Default connection count
        }
        catch (error) {
            return 0;
        }
    }
    /**
     * Measure database query time
     */
    async measureDatabaseQueryTime() {
        try {
            const startTime = perf_hooks_1.performance.now();
            // This would be replaced with actual database query
            await new Promise(resolve => setTimeout(resolve, 5));
            const endTime = perf_hooks_1.performance.now();
            return endTime - startTime;
        }
        catch (error) {
            return 999;
        }
    }
    /**
     * Get database cache hit ratio
     */
    async getDatabaseCacheHitRatio() {
        try {
            // This would be replaced with actual database query
            return 95.5; // Default cache hit ratio
        }
        catch (error) {
            return 0;
        }
    }
    /**
     * Parse storage size string to bytes
     */
    parseStorageSize(sizeStr) {
        const units = { K: 1024, M: 1024 ** 2, G: 1024 ** 3, T: 1024 ** 4 };
        const match = sizeStr.match(/^([0-9.]+)([KMGT]?)$/);
        if (!match)
            return 0;
        const value = parseFloat(match[1]);
        const unit = match[2];
        return value * (units[unit] || 1);
    }
    /**
     * Determine system status based on metrics
     */
    determineSystemStatus(metrics) {
        const { cpu, memory, disk, temperature } = metrics;
        if (cpu > this.thresholds.cpu.critical ||
            memory > this.thresholds.memory.critical ||
            disk > this.thresholds.disk.critical ||
            temperature > this.thresholds.temperature.critical) {
            return 'critical';
        }
        if (cpu > this.thresholds.cpu.warning ||
            memory > this.thresholds.memory.warning ||
            disk > this.thresholds.disk.warning ||
            temperature > this.thresholds.temperature.warning) {
            return 'warning';
        }
        return 'healthy';
    }
    /**
     * Store performance metric in history
     */
    storePerformanceMetric(metric, value) {
        const history = this.performanceHistory.get(metric) || [];
        history.push(value);
        // Keep only last 100 values
        if (history.length > 100) {
            history.shift();
        }
        this.performanceHistory.set(metric, history);
    }
    /**
     * Get performance history
     */
    getPerformanceHistory() {
        return Object.fromEntries(this.performanceHistory);
    }
    /**
     * Update performance thresholds
     */
    updateThresholds(newThresholds) {
        this.thresholds = { ...this.thresholds, ...newThresholds };
        trading_logger_1.tradingLogger.info('Performance thresholds updated', {
            component: 'PerformanceMonitor',
            thresholds: this.thresholds
        });
    }
    /**
     * Get current hardware information
     */
    getHardwareInfo() {
        return this.hardwareInfo;
    }
    /**
     * Get monitoring status
     */
    isMonitoringActive() {
        return this.isMonitoring;
    }
}
exports.PerformanceMonitor = PerformanceMonitor;
// Create and export singleton instance
exports.performanceMonitor = new PerformanceMonitor();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,