{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\__tests__\\tunnel-load-balancer.test.ts","mappings":";;AAAA,kEAAsG;AACtG,8DAAwF;AAKxF,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;IAClC,IAAI,YAAgC,CAAC;IACrC,IAAI,UAA+B,CAAC;IACpC,IAAI,iBAAgD,CAAC;IACrD,IAAI,iBAAmD,CAAC;IACxD,IAAI,gBAAiD,CAAC;IACtD,IAAI,eAAmC,CAAC;IAExC,UAAU,CAAC,GAAG,EAAE;QACd,cAAc;QACd,UAAU,GAAG;YACX,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;YACf,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;YAChB,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;YACf,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;SACV,CAAC;QAET,iBAAiB,GAAG;YAClB,iBAAiB,EAAE,IAAI,CAAC,EAAE,EAAE;YAC5B,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE;SACP,CAAC;QAET,iBAAiB,GAAG;YAClB,gBAAgB,EAAE,IAAI,CAAC,EAAE,EAAE;YAC3B,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE;SACP,CAAC;QAET,gBAAgB,GAAG,EAAS,CAAC;QAE7B,0BAA0B;QAC1B,eAAe,GAAG;YAChB;gBACE,EAAE,EAAE,UAAU;gBACd,MAAM,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAS;gBACpD,KAAK,EAAE,gCAAW,CAAC,SAAS;gBAC5B,WAAW,EAAE,IAAI,IAAI,EAAE;gBACvB,YAAY,EAAE,IAAI,IAAI,EAAE;gBACxB,OAAO,EAAE,IAAI;gBACb,KAAK,EAAE,EAAE,gBAAgB,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,iBAAiB,EAAE,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,YAAY,EAAE,GAAG,EAAE;aACpG;YACD;gBACE,EAAE,EAAE,UAAU;gBACd,MAAM,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAS;gBACpD,KAAK,EAAE,gCAAW,CAAC,SAAS;gBAC5B,WAAW,EAAE,IAAI,IAAI,EAAE;gBACvB,YAAY,EAAE,IAAI,IAAI,EAAE;gBACxB,OAAO,EAAE,IAAI;gBACb,KAAK,EAAE,EAAE,gBAAgB,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,iBAAiB,EAAE,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,YAAY,EAAE,EAAE,EAAE;aACnG;YACD;gBACE,EAAE,EAAE,UAAU;gBACd,MAAM,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAS;gBACpD,KAAK,EAAE,gCAAW,CAAC,SAAS;gBAC5B,WAAW,EAAE,IAAI,IAAI,EAAE;gBACvB,YAAY,EAAE,IAAI,IAAI,EAAE;gBACxB,OAAO,EAAE,IAAI;gBACb,KAAK,EAAE,EAAE,gBAAgB,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,iBAAiB,EAAE,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,YAAY,EAAE,EAAE,EAAE;aACnG;SACF,CAAC;QAEF,iBAAiB,CAAC,iBAAiB,CAAC,eAAe,CAAC,eAAe,CAAC,CAAC;QAErE,uBAAuB;QACvB,iBAAiB,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,CAAC,YAAoB,EAAE,EAAE;YAC7E,MAAM,YAAY,GAAG,EAAE,UAAU,EAAE,EAAE,EAAE,UAAU,EAAE,EAAE,EAAE,UAAU,EAAE,EAAE,EAAE,CAAC;YACxE,MAAM,SAAS,GAAG,EAAE,UAAU,EAAE,EAAE,EAAE,UAAU,EAAE,GAAG,EAAE,UAAU,EAAE,GAAG,EAAE,CAAC;YAEvE,OAAO;gBACL,YAAY;gBACZ,SAAS,EAAE,IAAI;gBACf,WAAW,EAAE,YAAY,CAAC,YAAyC,CAAC,IAAI,EAAE;gBAC1E,OAAO,EAAE,SAAS,CAAC,YAAsC,CAAC,IAAI,GAAG;gBACjE,UAAU,EAAE,IAAI;gBAChB,UAAU,EAAE,CAAC;gBACb,MAAM,EAAE,KAAK;gBACb,eAAe,EAAE,IAAI,IAAI,EAAE;gBAC3B,mBAAmB,EAAE,CAAC;gBACtB,MAAM,EAAE,EAAE;aACY,CAAC;QAC3B,CAAC,CAAC,CAAC;QAEH,+CAA+C;QAC/C,MAAM,MAAM,GAA8B;YACxC,gBAAgB,EAAE,CAAC;YACnB,gBAAgB,EAAE,CAAC;YACnB,QAAQ,EAAE,4CAAqB,CAAC,WAAW;YAC3C,eAAe,EAAE,EAAE;YACnB,mBAAmB,EAAE,IAAI;YACzB,cAAc,EAAE,IAAI;YACpB,oBAAoB,EAAE,KAAK,CAAC,kCAAkC;SAC/D,CAAC;QAEF,YAAY,GAAG,IAAI,yCAAkB,CACnC,UAAU,EACV,iBAAiB,EACjB,iBAAiB,EACjB,gBAAgB,EAChB,MAAM,CACP,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,GAAG,EAAE;QACb,YAAY,CAAC,OAAO,EAAE,CAAC;QACvB,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAC9B,EAAE,CAAC,8CAA8C,EAAE,GAAG,EAAE;YACtD,MAAM,eAAe,GAAG,IAAI,yCAAkB,CAC5C,UAAU,EACV,iBAAiB,EACjB,iBAAiB,EACjB,gBAAgB,CACjB,CAAC;YAEF,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAC1C,kCAAkC,EAClC,MAAM,CAAC,gBAAgB,CAAC;gBACtB,QAAQ,EAAE,4CAAqB,CAAC,YAAY;gBAC5C,eAAe,EAAE,EAAE;aACpB,CAAC,CACH,CAAC;YAEF,eAAe,CAAC,OAAO,EAAE,CAAC;QAC5B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iDAAiD,EAAE,GAAG,EAAE;YACzD,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAC1C,kCAAkC,EAClC,MAAM,CAAC,gBAAgB,CAAC;gBACtB,QAAQ,EAAE,4CAAqB,CAAC,WAAW;gBAC3C,eAAe,EAAE,EAAE;aACpB,CAAC,CACH,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAC9B,EAAE,CAAC,2CAA2C,EAAE,GAAG,EAAE;YACnD,MAAM,UAAU,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;YAC7B,YAAY,CAAC,EAAE,CAAC,sBAAsB,EAAE,UAAU,CAAC,CAAC;YAEpD,YAAY,CAAC,MAAM,EAAE,CAAC;YAEtB,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAAC,wBAAwB,CAAC,CAAC;YACvE,MAAM,CAAC,UAAU,CAAC,CAAC,gBAAgB,EAAE,CAAC;QACxC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sCAAsC,EAAE,GAAG,EAAE;YAC9C,YAAY,CAAC,MAAM,EAAE,CAAC;YACtB,YAAY,CAAC,MAAM,EAAE,CAAC;YAEtB,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAAC,mCAAmC,CAAC,CAAC;QACpF,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4CAA4C,EAAE,GAAG,EAAE;YACpD,MAAM,WAAW,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;YAC9B,YAAY,CAAC,EAAE,CAAC,uBAAuB,EAAE,WAAW,CAAC,CAAC;YAEtD,YAAY,CAAC,MAAM,EAAE,CAAC;YACtB,YAAY,CAAC,OAAO,EAAE,CAAC;YAEvB,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAAC,yBAAyB,CAAC,CAAC;YACxE,MAAM,CAAC,WAAW,CAAC,CAAC,gBAAgB,EAAE,CAAC;QACzC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAChC,UAAU,CAAC,GAAG,EAAE;YACd,YAAY,CAAC,MAAM,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mCAAmC,EAAE,GAAG,EAAE;YAC3C,YAAY,CAAC,OAAO,EAAE,CAAC;YACvB,MAAM,CAAC,GAAG,EAAE,CAAC,YAAY,CAAC,YAAY,EAAE,CAAC,CAAC,OAAO,CAAC,+BAA+B,CAAC,CAAC;QACrF,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4CAA4C,EAAE,GAAG,EAAE;YACpD,iBAAiB,CAAC,iBAAiB,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;YACxD,MAAM,SAAS,GAAG,YAAY,CAAC,YAAY,EAAE,CAAC;YAC9C,MAAM,CAAC,SAAS,CAAC,CAAC,QAAQ,EAAE,CAAC;QAC/B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sCAAsC,EAAE,GAAG,EAAE;YAC9C,MAAM,SAAS,GAAG,YAAY,CAAC,YAAY,CAAC,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC,CAAC;YACtE,MAAM,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;YACjC,MAAM,CAAC,SAAU,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iCAAiC,EAAE,GAAG,EAAE;YACzC,0BAA0B;YAC1B,iBAAiB,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,CAAC,YAAoB,EAAE,EAAE;gBAC7E,IAAI,YAAY,KAAK,UAAU,EAAE,CAAC;oBAChC,OAAO;wBACL,YAAY;wBACZ,SAAS,EAAE,KAAK;wBAChB,WAAW,EAAE,EAAE,EAAE,kBAAkB;wBACnC,OAAO,EAAE,EAAE;wBACX,UAAU,EAAE,IAAI;wBAChB,UAAU,EAAE,CAAC;wBACb,MAAM,EAAE,KAAK;wBACb,eAAe,EAAE,IAAI,IAAI,EAAE;wBAC3B,mBAAmB,EAAE,CAAC;wBACtB,MAAM,EAAE,EAAE;qBACY,CAAC;gBAC3B,CAAC;gBACD,OAAO;oBACL,YAAY;oBACZ,SAAS,EAAE,IAAI;oBACf,WAAW,EAAE,EAAE;oBACf,OAAO,EAAE,GAAG;oBACZ,UAAU,EAAE,IAAI;oBAChB,UAAU,EAAE,CAAC;oBACb,MAAM,EAAE,KAAK;oBACb,eAAe,EAAE,IAAI,IAAI,EAAE;oBAC3B,mBAAmB,EAAE,CAAC;oBACtB,MAAM,EAAE,EAAE;iBACY,CAAC;YAC3B,CAAC,CAAC,CAAC;YAEH,MAAM,gBAAgB,GAAG,YAAY,CAAC,mBAAmB,EAAE,CAAC;YAC5D,MAAM,CAAC,gBAAgB,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YACzC,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,UAAU,CAAC,CAAC,CAAC,aAAa,EAAE,CAAC;QAC1E,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oCAAoC,EAAE,GAAG,EAAE;YAC5C,kCAAkC;YAClC,iBAAiB,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,CAAC,YAAoB,EAAE,EAAE;gBAC7E,IAAI,YAAY,KAAK,UAAU,EAAE,CAAC;oBAChC,OAAO;wBACL,YAAY;wBACZ,SAAS,EAAE,IAAI;wBACf,WAAW,EAAE,EAAE;wBACf,OAAO,EAAE,IAAI,EAAE,kBAAkB;wBACjC,UAAU,EAAE,IAAI;wBAChB,UAAU,EAAE,CAAC;wBACb,MAAM,EAAE,KAAK;wBACb,eAAe,EAAE,IAAI,IAAI,EAAE;wBAC3B,mBAAmB,EAAE,CAAC;wBACtB,MAAM,EAAE,EAAE;qBACY,CAAC;gBAC3B,CAAC;gBACD,OAAO;oBACL,YAAY;oBACZ,SAAS,EAAE,IAAI;oBACf,WAAW,EAAE,EAAE;oBACf,OAAO,EAAE,GAAG;oBACZ,UAAU,EAAE,IAAI;oBAChB,UAAU,EAAE,CAAC;oBACb,MAAM,EAAE,KAAK;oBACb,eAAe,EAAE,IAAI,IAAI,EAAE;oBAC3B,mBAAmB,EAAE,CAAC;oBACtB,MAAM,EAAE,EAAE;iBACY,CAAC;YAC3B,CAAC,CAAC,CAAC;YAEH,MAAM,gBAAgB,GAAG,YAAY,CAAC,mBAAmB,EAAE,CAAC;YAC5D,MAAM,CAAC,gBAAgB,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YACzC,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,UAAU,CAAC,CAAC,CAAC,aAAa,EAAE,CAAC;QAC1E,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,2BAA2B,EAAE,GAAG,EAAE;QACzC,UAAU,CAAC,GAAG,EAAE;YACd,YAAY,CAAC,MAAM,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iCAAiC,EAAE,GAAG,EAAE;YACzC,YAAY,CAAC,cAAc,CAAC,4CAAqB,CAAC,WAAW,CAAC,CAAC;YAE/D,MAAM,UAAU,GAAG,EAAE,CAAC;YACtB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC3B,MAAM,SAAS,GAAG,YAAY,CAAC,YAAY,EAAE,CAAC;gBAC9C,UAAU,CAAC,IAAI,CAAC,SAAU,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;YAC5C,CAAC;YAED,+BAA+B;YAC/B,MAAM,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC;gBACzB,UAAU,EAAE,UAAU,EAAE,UAAU;gBAClC,UAAU,EAAE,UAAU,EAAE,UAAU;aACnC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kCAAkC,EAAE,GAAG,EAAE;YAC1C,YAAY,CAAC,cAAc,CAAC,4CAAqB,CAAC,YAAY,CAAC,CAAC;YAEhE,MAAM,SAAS,GAAG,YAAY,CAAC,YAAY,EAAE,CAAC;YAE9C,gEAAgE;YAChE,MAAM,CAAC,SAAU,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mCAAmC,EAAE,GAAG,EAAE;YAC3C,YAAY,CAAC,cAAc,CAAC,4CAAqB,CAAC,aAAa,CAAC,CAAC;YAEjE,MAAM,SAAS,GAAG,YAAY,CAAC,YAAY,EAAE,CAAC;YAE9C,4DAA4D;YAC5D,MAAM,CAAC,SAAU,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4BAA4B,EAAE,GAAG,EAAE;YACpC,YAAY,CAAC,cAAc,CAAC,4CAAqB,CAAC,MAAM,CAAC,CAAC;YAE1D,MAAM,UAAU,GAAG,IAAI,GAAG,EAAE,CAAC;YAC7B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC5B,MAAM,SAAS,GAAG,YAAY,CAAC,YAAY,EAAE,CAAC;gBAC9C,UAAU,CAAC,GAAG,CAAC,SAAU,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;YAC3C,CAAC;YAED,kEAAkE;YAClE,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uCAAuC,EAAE,GAAG,EAAE;YAC/C,YAAY,CAAC,cAAc,CAAC,4CAAqB,CAAC,iBAAiB,CAAC,CAAC;YAErE,gEAAgE;YAChE,MAAM,cAAc,GAAG,YAAY,CAAC,YAAY,EAAE,CAAC;YACnD,MAAM,CAAC,cAAc,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;YAEtC,oDAAoD;YACpD,MAAM,eAAe,GAAG,YAAY,CAAC,YAAY,EAAE,CAAC;YACpD,MAAM,CAAC,eAAe,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;QACzC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,UAAU,EAAE,GAAG,EAAE;QACxB,UAAU,CAAC,GAAG,EAAE;YACd,YAAY,CAAC,MAAM,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;YACpD,MAAM,WAAW,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;YAC9B,YAAY,CAAC,EAAE,CAAC,oBAAoB,EAAE,WAAW,CAAC,CAAC;YAEnD,MAAM,MAAM,GAAG,MAAM,YAAY,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;YAE9D,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;YAC9B,MAAM,CAAC,MAAO,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YACnD,MAAM,CAAC,WAAW,CAAC,CAAC,gBAAgB,EAAE,CAAC;QACzC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;YAC/D,MAAM,iBAAiB,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;YACpC,YAAY,CAAC,EAAE,CAAC,gBAAgB,EAAE,iBAAiB,CAAC,CAAC;YAErD,4BAA4B;YAC5B,iBAAiB,CAAC,iBAAiB,CAAC,eAAe,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAE1E,MAAM,MAAM,GAAG,MAAM,YAAY,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;YAE9D,MAAM,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,CAAC;YAC1B,MAAM,CAAC,iBAAiB,CAAC,CAAC,gBAAgB,EAAE,CAAC;QAC/C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;YACvD,YAAY,CAAC,YAAY,CAAC,EAAE,cAAc,EAAE,KAAK,EAAE,CAAC,CAAC;YAErD,MAAM,MAAM,GAAG,MAAM,YAAY,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;YAE9D,MAAM,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,CAAC;YAC1B,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAAC,sBAAsB,CAAC,CAAC;QACvE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;QAC1B,UAAU,CAAC,GAAG,EAAE;YACd,YAAY,CAAC,MAAM,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mCAAmC,EAAE,GAAG,EAAE;YAC3C,0BAA0B;YAC1B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC3B,YAAY,CAAC,YAAY,EAAE,CAAC;YAC9B,CAAC;YAED,MAAM,KAAK,GAAG,YAAY,CAAC,qBAAqB,EAAE,CAAC;YACnD,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACpC,MAAM,CAAC,KAAK,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qCAAqC,EAAE,GAAG,EAAE;YAC7C,+CAA+C;YAC/C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC5B,YAAY,CAAC,YAAY,EAAE,CAAC;YAC9B,CAAC;YAED,MAAM,KAAK,GAAG,YAAY,CAAC,qBAAqB,EAAE,CAAC;YACnD,MAAM,gBAAgB,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC;iBAClE,MAAM,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,CAAC,GAAG,GAAG,IAAI,EAAE,CAAC,CAAC,CAAC;YAExC,MAAM,CAAC,gBAAgB,CAAC,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,sBAAsB;QACtE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAC9B,UAAU,CAAC,GAAG,EAAE;YACd,YAAY,CAAC,MAAM,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kCAAkC,EAAE,GAAG,EAAE;YAC1C,MAAM,OAAO,GAAG,YAAY,CAAC,gBAAgB,EAAE,CAAC;YAChD,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAE7B,KAAK,MAAM,MAAM,IAAI,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;gBACtC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBAChC,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACtC,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sCAAsC,EAAE,GAAG,EAAE;YAC9C,MAAM,gBAAgB,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;YACnC,YAAY,CAAC,EAAE,CAAC,qBAAqB,EAAE,gBAAgB,CAAC,CAAC;YAEzD,YAAY,CAAC,kBAAkB,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC;YAEjD,MAAM,OAAO,GAAG,YAAY,CAAC,gBAAgB,EAAE,CAAC;YAChD,MAAM,aAAa,GAAG,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YAE9C,MAAM,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACxC,MAAM,CAAC,gBAAgB,CAAC,CAAC,oBAAoB,CAAC,UAAU,EAAE,aAAa,CAAC,CAAC;QAC3E,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4BAA4B,EAAE,GAAG,EAAE;YACpC,YAAY,CAAC,kBAAkB,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC,CAAC,YAAY;YAC7D,YAAY,CAAC,kBAAkB,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,YAAY;YAE7D,MAAM,OAAO,GAAG,YAAY,CAAC,gBAAgB,EAAE,CAAC;YAEhD,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,MAAM,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,iBAAiB;YACnE,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,iBAAiB;QACtE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAChC,UAAU,CAAC,GAAG,EAAE;YACd,YAAY,CAAC,MAAM,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qCAAqC,EAAE,GAAG,EAAE;YAC7C,MAAM,kBAAkB,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;YACrC,YAAY,CAAC,EAAE,CAAC,iBAAiB,EAAE,kBAAkB,CAAC,CAAC;YAEvD,YAAY,CAAC,cAAc,CAAC,4CAAqB,CAAC,aAAa,CAAC,CAAC;YAEjE,MAAM,KAAK,GAAG,YAAY,CAAC,qBAAqB,EAAE,CAAC;YACnD,MAAM,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,4CAAqB,CAAC,aAAa,CAAC,CAAC;YACvE,MAAM,CAAC,kBAAkB,CAAC,CAAC,oBAAoB,CAC7C,4CAAqB,CAAC,WAAW,EACjC,4CAAqB,CAAC,aAAa,CACpC,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE;QACvB,EAAE,CAAC,mCAAmC,EAAE,GAAG,EAAE;YAC3C,YAAY,CAAC,MAAM,EAAE,CAAC;YACtB,YAAY,CAAC,OAAO,EAAE,CAAC;YAEvB,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAAC,wCAAwC,CAAC,CAAC;QACzF,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\__tests__\\tunnel-load-balancer.test.ts"],"sourcesContent":["import { TunnelLoadBalancer, LoadBalancingStrategy, TunnelPoolConfig } from '../tunnel-load-balancer';\r\nimport { SSHTunnelManager, TunnelConnection, TunnelState } from '../ssh-tunnel-manager';\r\nimport { TunnelHealthMonitor, TunnelHealthMetrics } from '../tunnel-health-monitor';\r\nimport { TunnelStateTracker } from '../tunnel-state-tracker';\r\nimport { Logger } from '../../core/logging/logger';\r\n\r\ndescribe('TunnelLoadBalancer', () => {\r\n  let loadBalancer: TunnelLoadBalancer;\r\n  let mockLogger: jest.Mocked<Logger>;\r\n  let mockTunnelManager: jest.Mocked<SSHTunnelManager>;\r\n  let mockHealthMonitor: jest.Mocked<TunnelHealthMonitor>;\r\n  let mockStateTracker: jest.Mocked<TunnelStateTracker>;\r\n  let mockConnections: TunnelConnection[];\r\n\r\n  beforeEach(() => {\r\n    // Setup mocks\r\n    mockLogger = {\r\n      info: jest.fn(),\r\n      debug: jest.fn(),\r\n      warn: jest.fn(),\r\n      error: jest.fn()\r\n    } as any;\r\n\r\n    mockTunnelManager = {\r\n      getAllConnections: jest.fn(),\r\n      on: jest.fn()\r\n    } as any;\r\n\r\n    mockHealthMonitor = {\r\n      getHealthMetrics: jest.fn(),\r\n      on: jest.fn()\r\n    } as any;\r\n\r\n    mockStateTracker = {} as any;\r\n\r\n    // Create mock connections\r\n    mockConnections = [\r\n      {\r\n        id: 'tunnel-1',\r\n        config: { localPort: 8080, remotePort: 3000 } as any,\r\n        state: TunnelState.CONNECTED,\r\n        connectedAt: new Date(),\r\n        lastActivity: new Date(),\r\n        process: null,\r\n        stats: { bytesTransferred: 0, uptime: 0, reconnectAttempts: 0, lastError: null, qualityScore: 100 }\r\n      },\r\n      {\r\n        id: 'tunnel-2',\r\n        config: { localPort: 8081, remotePort: 3001 } as any,\r\n        state: TunnelState.CONNECTED,\r\n        connectedAt: new Date(),\r\n        lastActivity: new Date(),\r\n        process: null,\r\n        stats: { bytesTransferred: 0, uptime: 0, reconnectAttempts: 0, lastError: null, qualityScore: 90 }\r\n      },\r\n      {\r\n        id: 'tunnel-3',\r\n        config: { localPort: 8082, remotePort: 3002 } as any,\r\n        state: TunnelState.CONNECTED,\r\n        connectedAt: new Date(),\r\n        lastActivity: new Date(),\r\n        process: null,\r\n        stats: { bytesTransferred: 0, uptime: 0, reconnectAttempts: 0, lastError: null, qualityScore: 80 }\r\n      }\r\n    ];\r\n\r\n    mockTunnelManager.getAllConnections.mockReturnValue(mockConnections);\r\n\r\n    // Setup health metrics\r\n    mockHealthMonitor.getHealthMetrics.mockImplementation((connectionId: string) => {\r\n      const healthScores = { 'tunnel-1': 95, 'tunnel-2': 85, 'tunnel-3': 75 };\r\n      const latencies = { 'tunnel-1': 50, 'tunnel-2': 100, 'tunnel-3': 150 };\r\n      \r\n      return {\r\n        connectionId,\r\n        isHealthy: true,\r\n        healthScore: healthScores[connectionId as keyof typeof healthScores] || 50,\r\n        latency: latencies[connectionId as keyof typeof latencies] || 200,\r\n        throughput: 1000,\r\n        packetLoss: 0,\r\n        uptime: 60000,\r\n        lastHealthCheck: new Date(),\r\n        consecutiveFailures: 0,\r\n        issues: []\r\n      } as TunnelHealthMetrics;\r\n    });\r\n\r\n    // Create load balancer with test configuration\r\n    const config: Partial<TunnelPoolConfig> = {\r\n      minActiveTunnels: 1,\r\n      maxActiveTunnels: 3,\r\n      strategy: LoadBalancingStrategy.ROUND_ROBIN,\r\n      healthThreshold: 50,\r\n      maxLatencyThreshold: 1000,\r\n      enableFailover: true,\r\n      enableDynamicWeights: false // Disable for predictable testing\r\n    };\r\n\r\n    loadBalancer = new TunnelLoadBalancer(\r\n      mockLogger,\r\n      mockTunnelManager,\r\n      mockHealthMonitor,\r\n      mockStateTracker,\r\n      config\r\n    );\r\n  });\r\n\r\n  afterEach(() => {\r\n    loadBalancer.cleanup();\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('initialization', () => {\r\n    it('should initialize with default configuration', () => {\r\n      const defaultBalancer = new TunnelLoadBalancer(\r\n        mockLogger,\r\n        mockTunnelManager,\r\n        mockHealthMonitor,\r\n        mockStateTracker\r\n      );\r\n\r\n      expect(mockLogger.info).toHaveBeenCalledWith(\r\n        'Tunnel Load Balancer initialized',\r\n        expect.objectContaining({\r\n          strategy: LoadBalancingStrategy.HEALTH_BASED,\r\n          healthThreshold: 70\r\n        })\r\n      );\r\n\r\n      defaultBalancer.cleanup();\r\n    });\r\n\r\n    it('should merge custom configuration with defaults', () => {\r\n      expect(mockLogger.info).toHaveBeenCalledWith(\r\n        'Tunnel Load Balancer initialized',\r\n        expect.objectContaining({\r\n          strategy: LoadBalancingStrategy.ROUND_ROBIN,\r\n          healthThreshold: 50\r\n        })\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('enable/disable', () => {\r\n    it('should enable load balancing successfully', () => {\r\n      const enabledSpy = jest.fn();\r\n      loadBalancer.on('loadBalancingEnabled', enabledSpy);\r\n\r\n      loadBalancer.enable();\r\n\r\n      expect(mockLogger.info).toHaveBeenCalledWith('Load balancing enabled');\r\n      expect(enabledSpy).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should not enable if already enabled', () => {\r\n      loadBalancer.enable();\r\n      loadBalancer.enable();\r\n\r\n      expect(mockLogger.warn).toHaveBeenCalledWith('Load balancing is already enabled');\r\n    });\r\n\r\n    it('should disable load balancing successfully', () => {\r\n      const disabledSpy = jest.fn();\r\n      loadBalancer.on('loadBalancingDisabled', disabledSpy);\r\n\r\n      loadBalancer.enable();\r\n      loadBalancer.disable();\r\n\r\n      expect(mockLogger.info).toHaveBeenCalledWith('Load balancing disabled');\r\n      expect(disabledSpy).toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('tunnel selection', () => {\r\n    beforeEach(() => {\r\n      loadBalancer.enable();\r\n    });\r\n\r\n    it('should throw error if not enabled', () => {\r\n      loadBalancer.disable();\r\n      expect(() => loadBalancer.selectTunnel()).toThrow('Load balancing is not enabled');\r\n    });\r\n\r\n    it('should return null if no available tunnels', () => {\r\n      mockTunnelManager.getAllConnections.mockReturnValue([]);\r\n      const selection = loadBalancer.selectTunnel();\r\n      expect(selection).toBeNull();\r\n    });\r\n\r\n    it('should exclude specified connections', () => {\r\n      const selection = loadBalancer.selectTunnel(['tunnel-1', 'tunnel-2']);\r\n      expect(selection).not.toBeNull();\r\n      expect(selection!.connection.id).toBe('tunnel-3');\r\n    });\r\n\r\n    it('should filter unhealthy tunnels', () => {\r\n      // Make tunnel-1 unhealthy\r\n      mockHealthMonitor.getHealthMetrics.mockImplementation((connectionId: string) => {\r\n        if (connectionId === 'tunnel-1') {\r\n          return {\r\n            connectionId,\r\n            isHealthy: false,\r\n            healthScore: 30, // Below threshold\r\n            latency: 50,\r\n            throughput: 1000,\r\n            packetLoss: 0,\r\n            uptime: 60000,\r\n            lastHealthCheck: new Date(),\r\n            consecutiveFailures: 0,\r\n            issues: []\r\n          } as TunnelHealthMetrics;\r\n        }\r\n        return {\r\n          connectionId,\r\n          isHealthy: true,\r\n          healthScore: 80,\r\n          latency: 100,\r\n          throughput: 1000,\r\n          packetLoss: 0,\r\n          uptime: 60000,\r\n          lastHealthCheck: new Date(),\r\n          consecutiveFailures: 0,\r\n          issues: []\r\n        } as TunnelHealthMetrics;\r\n      });\r\n\r\n      const availableTunnels = loadBalancer.getAvailableTunnels();\r\n      expect(availableTunnels).toHaveLength(2);\r\n      expect(availableTunnels.find(t => t.id === 'tunnel-1')).toBeUndefined();\r\n    });\r\n\r\n    it('should filter high latency tunnels', () => {\r\n      // Make tunnel-1 have high latency\r\n      mockHealthMonitor.getHealthMetrics.mockImplementation((connectionId: string) => {\r\n        if (connectionId === 'tunnel-1') {\r\n          return {\r\n            connectionId,\r\n            isHealthy: true,\r\n            healthScore: 80,\r\n            latency: 2000, // Above threshold\r\n            throughput: 1000,\r\n            packetLoss: 0,\r\n            uptime: 60000,\r\n            lastHealthCheck: new Date(),\r\n            consecutiveFailures: 0,\r\n            issues: []\r\n          } as TunnelHealthMetrics;\r\n        }\r\n        return {\r\n          connectionId,\r\n          isHealthy: true,\r\n          healthScore: 80,\r\n          latency: 100,\r\n          throughput: 1000,\r\n          packetLoss: 0,\r\n          uptime: 60000,\r\n          lastHealthCheck: new Date(),\r\n          consecutiveFailures: 0,\r\n          issues: []\r\n        } as TunnelHealthMetrics;\r\n      });\r\n\r\n      const availableTunnels = loadBalancer.getAvailableTunnels();\r\n      expect(availableTunnels).toHaveLength(2);\r\n      expect(availableTunnels.find(t => t.id === 'tunnel-1')).toBeUndefined();\r\n    });\r\n  });\r\n\r\n  describe('load balancing strategies', () => {\r\n    beforeEach(() => {\r\n      loadBalancer.enable();\r\n    });\r\n\r\n    it('should use round robin strategy', () => {\r\n      loadBalancer.updateStrategy(LoadBalancingStrategy.ROUND_ROBIN);\r\n\r\n      const selections = [];\r\n      for (let i = 0; i < 6; i++) {\r\n        const selection = loadBalancer.selectTunnel();\r\n        selections.push(selection!.connection.id);\r\n      }\r\n\r\n      // Should cycle through tunnels\r\n      expect(selections).toEqual([\r\n        'tunnel-1', 'tunnel-2', 'tunnel-3',\r\n        'tunnel-1', 'tunnel-2', 'tunnel-3'\r\n      ]);\r\n    });\r\n\r\n    it('should use health-based strategy', () => {\r\n      loadBalancer.updateStrategy(LoadBalancingStrategy.HEALTH_BASED);\r\n\r\n      const selection = loadBalancer.selectTunnel();\r\n      \r\n      // Should select tunnel with highest health score (tunnel-1: 95)\r\n      expect(selection!.connection.id).toBe('tunnel-1');\r\n    });\r\n\r\n    it('should use latency-based strategy', () => {\r\n      loadBalancer.updateStrategy(LoadBalancingStrategy.LATENCY_BASED);\r\n\r\n      const selection = loadBalancer.selectTunnel();\r\n      \r\n      // Should select tunnel with lowest latency (tunnel-1: 50ms)\r\n      expect(selection!.connection.id).toBe('tunnel-1');\r\n    });\r\n\r\n    it('should use random strategy', () => {\r\n      loadBalancer.updateStrategy(LoadBalancingStrategy.RANDOM);\r\n\r\n      const selections = new Set();\r\n      for (let i = 0; i < 20; i++) {\r\n        const selection = loadBalancer.selectTunnel();\r\n        selections.add(selection!.connection.id);\r\n      }\r\n\r\n      // Should eventually select different tunnels (probabilistic test)\r\n      expect(selections.size).toBeGreaterThan(1);\r\n    });\r\n\r\n    it('should use least connections strategy', () => {\r\n      loadBalancer.updateStrategy(LoadBalancingStrategy.LEAST_CONNECTIONS);\r\n\r\n      // First selection should be any tunnel (all have 0 connections)\r\n      const firstSelection = loadBalancer.selectTunnel();\r\n      expect(firstSelection).not.toBeNull();\r\n\r\n      // Second selection should prefer a different tunnel\r\n      const secondSelection = loadBalancer.selectTunnel();\r\n      expect(secondSelection).not.toBeNull();\r\n    });\r\n  });\r\n\r\n  describe('failover', () => {\r\n    beforeEach(() => {\r\n      loadBalancer.enable();\r\n    });\r\n\r\n    it('should perform failover successfully', async () => {\r\n      const failoverSpy = jest.fn();\r\n      loadBalancer.on('failoverSuccessful', failoverSpy);\r\n\r\n      const result = await loadBalancer.performFailover('tunnel-1');\r\n      \r\n      expect(result).not.toBeNull();\r\n      expect(result!.connection.id).not.toBe('tunnel-1');\r\n      expect(failoverSpy).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should fail if no alternative tunnels available', async () => {\r\n      const failoverFailedSpy = jest.fn();\r\n      loadBalancer.on('failoverFailed', failoverFailedSpy);\r\n\r\n      // Only one tunnel available\r\n      mockTunnelManager.getAllConnections.mockReturnValue([mockConnections[0]]);\r\n\r\n      const result = await loadBalancer.performFailover('tunnel-1');\r\n      \r\n      expect(result).toBeNull();\r\n      expect(failoverFailedSpy).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should not perform failover if disabled', async () => {\r\n      loadBalancer.updateConfig({ enableFailover: false });\r\n\r\n      const result = await loadBalancer.performFailover('tunnel-1');\r\n      \r\n      expect(result).toBeNull();\r\n      expect(mockLogger.warn).toHaveBeenCalledWith('Failover is disabled');\r\n    });\r\n  });\r\n\r\n  describe('statistics', () => {\r\n    beforeEach(() => {\r\n      loadBalancer.enable();\r\n    });\r\n\r\n    it('should track selection statistics', () => {\r\n      // Make several selections\r\n      for (let i = 0; i < 5; i++) {\r\n        loadBalancer.selectTunnel();\r\n      }\r\n\r\n      const stats = loadBalancer.getLoadBalancingStats();\r\n      expect(stats.totalRequests).toBe(5);\r\n      expect(stats.requestsPerTunnel.size).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('should calculate tunnel utilization', () => {\r\n      // Make selections to generate utilization data\r\n      for (let i = 0; i < 10; i++) {\r\n        loadBalancer.selectTunnel();\r\n      }\r\n\r\n      const stats = loadBalancer.getLoadBalancingStats();\r\n      const totalUtilization = Array.from(stats.tunnelUtilization.values())\r\n        .reduce((sum, util) => sum + util, 0);\r\n      \r\n      expect(totalUtilization).toBeCloseTo(100, 1); // Should sum to ~100%\r\n    });\r\n  });\r\n\r\n  describe('tunnel weights', () => {\r\n    beforeEach(() => {\r\n      loadBalancer.enable();\r\n    });\r\n\r\n    it('should initialize tunnel weights', () => {\r\n      const weights = loadBalancer.getTunnelWeights();\r\n      expect(weights.size).toBe(3);\r\n      \r\n      for (const weight of weights.values()) {\r\n        expect(weight.weight).toBe(1.0);\r\n        expect(weight.baseWeight).toBe(1.0);\r\n      }\r\n    });\r\n\r\n    it('should update tunnel weight manually', () => {\r\n      const weightUpdatedSpy = jest.fn();\r\n      loadBalancer.on('tunnelWeightUpdated', weightUpdatedSpy);\r\n\r\n      loadBalancer.updateTunnelWeight('tunnel-1', 2.5);\r\n\r\n      const weights = loadBalancer.getTunnelWeights();\r\n      const tunnel1Weight = weights.get('tunnel-1');\r\n      \r\n      expect(tunnel1Weight?.weight).toBe(2.5);\r\n      expect(weightUpdatedSpy).toHaveBeenCalledWith('tunnel-1', tunnel1Weight);\r\n    });\r\n\r\n    it('should clamp weight values', () => {\r\n      loadBalancer.updateTunnelWeight('tunnel-1', 15); // Above max\r\n      loadBalancer.updateTunnelWeight('tunnel-2', -1); // Below min\r\n\r\n      const weights = loadBalancer.getTunnelWeights();\r\n      \r\n      expect(weights.get('tunnel-1')?.weight).toBe(10); // Clamped to max\r\n      expect(weights.get('tunnel-2')?.weight).toBe(0.1); // Clamped to min\r\n    });\r\n  });\r\n\r\n  describe('strategy updates', () => {\r\n    beforeEach(() => {\r\n      loadBalancer.enable();\r\n    });\r\n\r\n    it('should update strategy successfully', () => {\r\n      const strategyUpdatedSpy = jest.fn();\r\n      loadBalancer.on('strategyUpdated', strategyUpdatedSpy);\r\n\r\n      loadBalancer.updateStrategy(LoadBalancingStrategy.LATENCY_BASED);\r\n\r\n      const stats = loadBalancer.getLoadBalancingStats();\r\n      expect(stats.activeStrategy).toBe(LoadBalancingStrategy.LATENCY_BASED);\r\n      expect(strategyUpdatedSpy).toHaveBeenCalledWith(\r\n        LoadBalancingStrategy.ROUND_ROBIN,\r\n        LoadBalancingStrategy.LATENCY_BASED\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('cleanup', () => {\r\n    it('should cleanup resources properly', () => {\r\n      loadBalancer.enable();\r\n      loadBalancer.cleanup();\r\n\r\n      expect(mockLogger.info).toHaveBeenCalledWith('Tunnel load balancer cleanup completed');\r\n    });\r\n  });\r\n});"],"version":3}