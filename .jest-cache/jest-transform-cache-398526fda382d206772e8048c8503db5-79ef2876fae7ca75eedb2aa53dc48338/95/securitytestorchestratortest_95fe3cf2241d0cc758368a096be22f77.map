{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\tests\\security\\security-test-orchestrator.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\tests\\security\\security-test-orchestrator.test.ts"],"sourcesContent":["/**\r\n * =============================================================================\r\n * SECURITY TEST ORCHESTRATOR TESTS\r\n * =============================================================================\r\n * \r\n * Comprehensive tests for the security test orchestrator that coordinates\r\n * all security testing activities in the AI crypto trading agent.\r\n * \r\n * Features tested:\r\n * - Security test suite execution\r\n * - Parallel and sequential test coordination\r\n * - Risk scoring and compliance calculation\r\n * - Remediation plan generation\r\n * - Security dashboard functionality\r\n * - Error handling and resilience\r\n * \r\n * Requirements: 25.7 - Security testing orchestration validation\r\n * \r\n * @author AI Crypto Trading System\r\n * @version 1.0.0\r\n * @license PROPRIETARY\r\n * =============================================================================\r\n */\r\n\r\nimport { Logger } from '../../core/logging/logger';\r\nimport { SecurityTestOrchestrator, SecurityTestType, SecurityTestSuite } from '../../security/security-test-orchestrator';\r\nimport { PenetrationTestingService } from '../../security/penetration-testing-service';\r\nimport { VulnerabilityScannerService } from '../../security/vulnerability-scanner-service';\r\nimport { ComplianceTestingService } from '../../security/compliance-testing';\r\nimport { AutomatedSecurityTestingSuite } from '../../security/automated-security-testing';\r\nimport { ThreatDetectionEngine } from '../../security/threat-detection-engine';\r\nimport { IncidentResponseService } from '../../security/incident-response-service';\r\nimport { NotificationService } from '../../core/notifications/notification-service';\r\nimport { EncryptionService } from '../../security/encryption-service';\r\nimport * as crypto from 'crypto';\r\n\r\n// Mock all dependencies\r\njest.mock('../../core/logging/logger');\r\njest.mock('../../core/notifications/notification-service');\r\njest.mock('../../security/penetration-testing-service');\r\njest.mock('../../security/vulnerability-scanner-service');\r\njest.mock('../../security/compliance-testing');\r\njest.mock('../../security/automated-security-testing');\r\njest.mock('../../security/threat-detection-engine');\r\njest.mock('../../security/incident-response-service');\r\njest.mock('../../security/encryption-service');\r\n\r\ndescribe('Security Test Orchestrator', () => {\r\n  let orchestrator: SecurityTestOrchestrator;\r\n  let logger: jest.Mocked<Logger>;\r\n  let penetrationTesting: jest.Mocked<PenetrationTestingService>;\r\n  let vulnerabilityScanner: jest.Mocked<VulnerabilityScannerService>;\r\n  let complianceTesting: jest.Mocked<ComplianceTestingService>;\r\n  let automatedTesting: jest.Mocked<AutomatedSecurityTestingSuite>;\r\n  let threatDetection: jest.Mocked<ThreatDetectionEngine>;\r\n  let incidentResponse: jest.Mocked<IncidentResponseService>;\r\n  let notifications: jest.Mocked<NotificationService>;\r\n\r\n  beforeAll(() => {\r\n    // Set up test environment\r\n    process.env.NODE_ENV = 'test';\r\n    process.env.MASTER_ENCRYPTION_KEY = crypto.randomBytes(32).toString('hex');\r\n  });\r\n\r\n  beforeEach(() => {\r\n    // Create mocked instances\r\n    logger = new Logger() as jest.Mocked<Logger>;\r\n    penetrationTesting = new PenetrationTestingService(\r\n      logger, \r\n      new EncryptionService(logger), \r\n      new ThreatDetectionEngine(logger), \r\n      {} as any\r\n    ) as jest.Mocked<PenetrationTestingService>;\r\n    vulnerabilityScanner = new VulnerabilityScannerService(logger) as jest.Mocked<VulnerabilityScannerService>;\r\n    complianceTesting = new ComplianceTestingService(logger) as jest.Mocked<ComplianceTestingService>;\r\n    automatedTesting = new AutomatedSecurityTestingSuite(\r\n      logger, \r\n      penetrationTesting, \r\n      {} as any, \r\n      incidentResponse, \r\n      notifications, \r\n      {} as any\r\n    ) as jest.Mocked<AutomatedSecurityTestingSuite>;\r\n    threatDetection = new ThreatDetectionEngine(logger) as jest.Mocked<ThreatDetectionEngine>;\r\n    incidentResponse = new IncidentResponseService(logger, notifications) as jest.Mocked<IncidentResponseService>;\r\n    notifications = new NotificationService(logger) as jest.Mocked<NotificationService>;\r\n\r\n    // Initialize orchestrator\r\n    orchestrator = new SecurityTestOrchestrator(\r\n      logger,\r\n      penetrationTesting,\r\n      vulnerabilityScanner,\r\n      complianceTesting,\r\n      automatedTesting,\r\n      threatDetection,\r\n      incidentResponse,\r\n      notifications\r\n    );\r\n\r\n    // Clear all mocks\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  afterAll(() => {\r\n    delete process.env.MASTER_ENCRYPTION_KEY;\r\n    delete process.env.NODE_ENV;\r\n  });\r\n\r\n  describe('Initialization', () => {\r\n    it('should initialize with default test suites', () => {\r\n      const testSuites = orchestrator.getTestSuites();\r\n      \r\n      expect(testSuites).toBeDefined();\r\n      expect(testSuites.length).toBeGreaterThan(0);\r\n      \r\n      // Check for expected default suites\r\n      const suiteIds = testSuites.map(suite => suite.suiteId);\r\n      expect(suiteIds).toContain('daily-security-scan');\r\n      expect(suiteIds).toContain('weekly-comprehensive-scan');\r\n      expect(suiteIds).toContain('pre-deployment-validation');\r\n      expect(suiteIds).toContain('incident-response-check');\r\n    });\r\n\r\n    it('should have properly configured default test suites', () => {\r\n      const testSuites = orchestrator.getTestSuites();\r\n      \r\n      testSuites.forEach(suite => {\r\n        expect(suite).toHaveProperty('suiteId');\r\n        expect(suite).toHaveProperty('name');\r\n        expect(suite).toHaveProperty('description');\r\n        expect(suite).toHaveProperty('testTypes');\r\n        expect(suite).toHaveProperty('priority');\r\n        expect(suite).toHaveProperty('enabled');\r\n        expect(suite).toHaveProperty('parallelExecution');\r\n        expect(suite).toHaveProperty('maxExecutionTime');\r\n        expect(suite).toHaveProperty('retryCount');\r\n        \r\n        expect(Array.isArray(suite.testTypes)).toBe(true);\r\n        expect(suite.testTypes.length).toBeGreaterThan(0);\r\n        expect(['LOW', 'MEDIUM', 'HIGH', 'CRITICAL']).toContain(suite.priority);\r\n        expect(typeof suite.enabled).toBe('boolean');\r\n        expect(typeof suite.parallelExecution).toBe('boolean');\r\n        expect(typeof suite.maxExecutionTime).toBe('number');\r\n        expect(typeof suite.retryCount).toBe('number');\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('Security Test Suite Execution', () => {\r\n    beforeEach(() => {\r\n      // Mock service responses\r\n      penetrationTesting.executeSecurityTestSuite.mockResolvedValue({\r\n        scanId: 'pen-test-123',\r\n        timestamp: new Date(),\r\n        totalVulnerabilities: 5,\r\n        criticalCount: 1,\r\n        highCount: 2,\r\n        mediumCount: 1,\r\n        lowCount: 1,\r\n        vulnerabilities: [\r\n          {\r\n            id: 'vuln-1',\r\n            type: 'SQL_INJECTION',\r\n            severity: 'CRITICAL',\r\n            description: 'SQL injection vulnerability',\r\n            location: '/api/test',\r\n            evidence: 'Test evidence',\r\n            remediation: 'Use parameterized queries'\r\n          }\r\n        ],\r\n        complianceScore: 75,\r\n        recommendations: ['Fix SQL injection', 'Implement input validation']\r\n      });\r\n\r\n      vulnerabilityScanner.executeComprehensiveVulnerabilityScan.mockResolvedValue({\r\n        scanId: 'vuln-scan-456',\r\n        scanType: 'comprehensive_scan' as any,\r\n        target: 'system',\r\n        startTime: new Date(),\r\n        endTime: new Date(),\r\n        status: 'COMPLETED',\r\n        findings: [\r\n          {\r\n            id: 'finding-1',\r\n            type: 'DEPENDENCY_VULNERABILITY',\r\n            severity: 'HIGH',\r\n            description: 'Vulnerable dependency',\r\n            location: 'package.json',\r\n            evidence: 'lodash@4.17.11',\r\n            remediation: 'Update to lodash@4.17.21'\r\n          }\r\n        ],\r\n        summary: {\r\n          totalFindings: 3,\r\n          criticalCount: 0,\r\n          highCount: 1,\r\n          mediumCount: 1,\r\n          lowCount: 1,\r\n          riskScore: 25,\r\n          complianceScore: 75,\r\n          remediationPriority: []\r\n        }\r\n      });\r\n\r\n      complianceTesting.executeComplianceTest.mockResolvedValue({\r\n        reportId: 'compliance-789',\r\n        standardId: 'OWASP_TOP_10',\r\n        standardName: 'OWASP Top 10',\r\n        timestamp: new Date(),\r\n        overallScore: 80,\r\n        requiredScore: 80,\r\n        status: 'COMPLIANT',\r\n        controlResults: [],\r\n        gapAnalysis: [],\r\n        recommendations: ['Maintain current security posture'],\r\n        executionTime: 5000\r\n      });\r\n    });\r\n\r\n    it('should execute daily security scan successfully', async () => {\r\n      const execution = await orchestrator.executeSecurityTestSuite('daily-security-scan');\r\n      \r\n      expect(execution).toBeDefined();\r\n      expect(execution.suiteId).toBe('daily-security-scan');\r\n      expect(execution.status).toBe('COMPLETED');\r\n      expect(execution.executionId).toBeDefined();\r\n      expect(execution.startTime).toBeInstanceOf(Date);\r\n      expect(execution.endTime).toBeInstanceOf(Date);\r\n      expect(execution.testResults).toBeDefined();\r\n      expect(Array.isArray(execution.testResults)).toBe(true);\r\n      expect(execution.testResults.length).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('should execute weekly comprehensive scan successfully', async () => {\r\n      const execution = await orchestrator.executeSecurityTestSuite('weekly-comprehensive-scan');\r\n      \r\n      expect(execution).toBeDefined();\r\n      expect(execution.suiteId).toBe('weekly-comprehensive-scan');\r\n      expect(execution.status).toBe('COMPLETED');\r\n      expect(execution.testResults.length).toBeGreaterThan(0);\r\n      \r\n      // Should include all test types for comprehensive scan\r\n      const testTypes = execution.testResults.map(result => result.testType);\r\n      expect(testTypes).toContain(SecurityTestType.PENETRATION_TESTING);\r\n      expect(testTypes).toContain(SecurityTestType.VULNERABILITY_SCANNING);\r\n      expect(testTypes).toContain(SecurityTestType.COMPLIANCE_TESTING);\r\n    });\r\n\r\n    it('should calculate overall risk and compliance scores correctly', async () => {\r\n      const execution = await orchestrator.executeSecurityTestSuite('daily-security-scan');\r\n      \r\n      expect(execution.overallRiskScore).toBeGreaterThanOrEqual(0);\r\n      expect(execution.overallRiskScore).toBeLessThanOrEqual(100);\r\n      expect(execution.complianceScore).toBeGreaterThanOrEqual(0);\r\n      expect(execution.complianceScore).toBeLessThanOrEqual(100);\r\n      \r\n      // Compliance score should be inverse of risk score\r\n      expect(execution.complianceScore).toBe(Math.max(0, 100 - execution.overallRiskScore));\r\n    });\r\n\r\n    it('should count findings by severity correctly', async () => {\r\n      const execution = await orchestrator.executeSecurityTestSuite('weekly-comprehensive-scan');\r\n      \r\n      expect(execution.criticalFindings).toBeGreaterThanOrEqual(0);\r\n      expect(execution.highFindings).toBeGreaterThanOrEqual(0);\r\n      expect(execution.mediumFindings).toBeGreaterThanOrEqual(0);\r\n      expect(execution.lowFindings).toBeGreaterThanOrEqual(0);\r\n      \r\n      const totalFindings = execution.criticalFindings + execution.highFindings + \r\n                           execution.mediumFindings + execution.lowFindings;\r\n      expect(totalFindings).toBeGreaterThanOrEqual(0);\r\n    });\r\n\r\n    it('should generate appropriate recommendations', async () => {\r\n      const execution = await orchestrator.executeSecurityTestSuite('weekly-comprehensive-scan');\r\n      \r\n      expect(execution.recommendations).toBeDefined();\r\n      expect(Array.isArray(execution.recommendations)).toBe(true);\r\n      expect(execution.recommendations.length).toBeGreaterThan(0);\r\n      \r\n      execution.recommendations.forEach(recommendation => {\r\n        expect(typeof recommendation).toBe('string');\r\n        expect(recommendation.length).toBeGreaterThan(0);\r\n      });\r\n    });\r\n\r\n    it('should generate remediation plan with tasks', async () => {\r\n      const execution = await orchestrator.executeSecurityTestSuite('weekly-comprehensive-scan');\r\n      \r\n      expect(execution.remediationPlan).toBeDefined();\r\n      expect(execution.remediationPlan.planId).toBeDefined();\r\n      expect(['IMMEDIATE', 'HIGH', 'MEDIUM', 'LOW']).toContain(execution.remediationPlan.priority);\r\n      expect(execution.remediationPlan.estimatedEffort).toBeDefined();\r\n      expect(execution.remediationPlan.estimatedCost).toBeDefined();\r\n      expect(execution.remediationPlan.timeline).toBeDefined();\r\n      expect(Array.isArray(execution.remediationPlan.tasks)).toBe(true);\r\n      expect(execution.remediationPlan.riskReduction).toBeGreaterThanOrEqual(0);\r\n      expect(execution.remediationPlan.riskReduction).toBeLessThanOrEqual(100);\r\n    });\r\n\r\n    it('should handle unknown test suite gracefully', async () => {\r\n      await expect(\r\n        orchestrator.executeSecurityTestSuite('unknown-suite')\r\n      ).rejects.toThrow('Security test suite not found: unknown-suite');\r\n    });\r\n  });\r\n\r\n  describe('Parallel vs Sequential Execution', () => {\r\n    it('should execute tests in parallel when configured', async () => {\r\n      const startTime = Date.now();\r\n      const execution = await orchestrator.executeSecurityTestSuite('daily-security-scan');\r\n      const endTime = Date.now();\r\n      \r\n      expect(execution.status).toBe('COMPLETED');\r\n      \r\n      // Parallel execution should be faster than sequential\r\n      // (This is a rough check - in practice, you'd need more sophisticated timing)\r\n      const executionTime = endTime - startTime;\r\n      expect(executionTime).toBeLessThan(30000); // Should complete within 30 seconds\r\n    });\r\n\r\n    it('should execute tests sequentially when configured', async () => {\r\n      const execution = await orchestrator.executeSecurityTestSuite('weekly-comprehensive-scan');\r\n      \r\n      expect(execution.status).toBe('COMPLETED');\r\n      expect(execution.testResults.length).toBeGreaterThan(0);\r\n      \r\n      // All tests should have completed\r\n      execution.testResults.forEach(result => {\r\n        expect(['PASS', 'FAIL', 'WARNING', 'ERROR']).toContain(result.status);\r\n        expect(result.executionTime).toBeGreaterThan(0);\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('Individual Security Test Types', () => {\r\n    it('should execute penetration testing', async () => {\r\n      const execution = await orchestrator.executeSecurityTestSuite('weekly-comprehensive-scan');\r\n      \r\n      const penTestResult = execution.testResults.find(\r\n        result => result.testType === SecurityTestType.PENETRATION_TESTING\r\n      );\r\n      \r\n      expect(penTestResult).toBeDefined();\r\n      expect(penTestResult!.testId).toBeDefined();\r\n      expect(['PASS', 'FAIL', 'WARNING', 'ERROR']).toContain(penTestResult!.status);\r\n      expect(penTestResult!.executionTime).toBeGreaterThan(0);\r\n      expect(penTestResult!.riskScore).toBeGreaterThanOrEqual(0);\r\n      expect(penTestResult!.riskScore).toBeLessThanOrEqual(100);\r\n    });\r\n\r\n    it('should execute vulnerability scanning', async () => {\r\n      const execution = await orchestrator.executeSecurityTestSuite('daily-security-scan');\r\n      \r\n      const vulnScanResult = execution.testResults.find(\r\n        result => result.testType === SecurityTestType.VULNERABILITY_SCANNING\r\n      );\r\n      \r\n      expect(vulnScanResult).toBeDefined();\r\n      expect(vulnScanResult!.testId).toBeDefined();\r\n      expect(Array.isArray(vulnScanResult!.findings)).toBe(true);\r\n    });\r\n\r\n    it('should execute compliance testing', async () => {\r\n      const execution = await orchestrator.executeSecurityTestSuite('weekly-comprehensive-scan');\r\n      \r\n      const complianceResult = execution.testResults.find(\r\n        result => result.testType === SecurityTestType.COMPLIANCE_TESTING\r\n      );\r\n      \r\n      expect(complianceResult).toBeDefined();\r\n      expect(complianceResult!.details).toBeDefined();\r\n      expect(complianceResult!.details.reports).toBeDefined();\r\n      expect(Array.isArray(complianceResult!.details.reports)).toBe(true);\r\n    });\r\n\r\n    it('should execute dependency audit', async () => {\r\n      const execution = await orchestrator.executeSecurityTestSuite('daily-security-scan');\r\n      \r\n      const depAuditResult = execution.testResults.find(\r\n        result => result.testType === SecurityTestType.DEPENDENCY_AUDIT\r\n      );\r\n      \r\n      expect(depAuditResult).toBeDefined();\r\n      expect(depAuditResult!.status).toBeDefined();\r\n    });\r\n\r\n    it('should execute code analysis', async () => {\r\n      const execution = await orchestrator.executeSecurityTestSuite('weekly-comprehensive-scan');\r\n      \r\n      const codeAnalysisResult = execution.testResults.find(\r\n        result => result.testType === SecurityTestType.CODE_ANALYSIS\r\n      );\r\n      \r\n      expect(codeAnalysisResult).toBeDefined();\r\n      expect(codeAnalysisResult!.riskScore).toBeGreaterThanOrEqual(0);\r\n    });\r\n\r\n    it('should execute configuration review', async () => {\r\n      const execution = await orchestrator.executeSecurityTestSuite('daily-security-scan');\r\n      \r\n      const configReviewResult = execution.testResults.find(\r\n        result => result.testType === SecurityTestType.CONFIGURATION_REVIEW\r\n      );\r\n      \r\n      expect(configReviewResult).toBeDefined();\r\n      expect(configReviewResult!.details).toBeDefined();\r\n    });\r\n\r\n    it('should execute network security test', async () => {\r\n      const execution = await orchestrator.executeSecurityTestSuite('weekly-comprehensive-scan');\r\n      \r\n      const networkTestResult = execution.testResults.find(\r\n        result => result.testType === SecurityTestType.NETWORK_SECURITY\r\n      );\r\n      \r\n      expect(networkTestResult).toBeDefined();\r\n      expect(networkTestResult!.executionTime).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('should execute threat modeling', async () => {\r\n      const execution = await orchestrator.executeSecurityTestSuite('incident-response-check');\r\n      \r\n      const threatModelResult = execution.testResults.find(\r\n        result => result.testType === SecurityTestType.THREAT_MODELING\r\n      );\r\n      \r\n      expect(threatModelResult).toBeDefined();\r\n      expect(threatModelResult!.findings).toBeDefined();\r\n    });\r\n  });\r\n\r\n  describe('Security Dashboard', () => {\r\n    beforeEach(async () => {\r\n      // Execute a test suite to populate data\r\n      await orchestrator.executeSecurityTestSuite('daily-security-scan');\r\n    });\r\n\r\n    it('should provide comprehensive security dashboard data', () => {\r\n      const dashboard = orchestrator.getSecurityDashboard();\r\n      \r\n      expect(dashboard).toBeDefined();\r\n      expect(dashboard.lastUpdated).toBeInstanceOf(Date);\r\n      expect(dashboard.overallSecurityScore).toBeGreaterThanOrEqual(0);\r\n      expect(dashboard.overallSecurityScore).toBeLessThanOrEqual(100);\r\n      expect(['LOW', 'MEDIUM', 'HIGH', 'CRITICAL']).toContain(dashboard.riskLevel);\r\n      expect(dashboard.activeThreats).toBeGreaterThanOrEqual(0);\r\n    });\r\n\r\n    it('should provide vulnerability breakdown', () => {\r\n      const dashboard = orchestrator.getSecurityDashboard();\r\n      \r\n      expect(dashboard.vulnerabilities).toBeDefined();\r\n      expect(dashboard.vulnerabilities.critical).toBeGreaterThanOrEqual(0);\r\n      expect(dashboard.vulnerabilities.high).toBeGreaterThanOrEqual(0);\r\n      expect(dashboard.vulnerabilities.medium).toBeGreaterThanOrEqual(0);\r\n      expect(dashboard.vulnerabilities.low).toBeGreaterThanOrEqual(0);\r\n    });\r\n\r\n    it('should provide compliance status', () => {\r\n      const dashboard = orchestrator.getSecurityDashboard();\r\n      \r\n      expect(dashboard.complianceStatus).toBeDefined();\r\n      expect(dashboard.complianceStatus.owasp).toBeGreaterThanOrEqual(0);\r\n      expect(dashboard.complianceStatus.owasp).toBeLessThanOrEqual(100);\r\n      expect(dashboard.complianceStatus.iso27001).toBeGreaterThanOrEqual(0);\r\n      expect(dashboard.complianceStatus.iso27001).toBeLessThanOrEqual(100);\r\n      expect(dashboard.complianceStatus.soc2).toBeGreaterThanOrEqual(0);\r\n      expect(dashboard.complianceStatus.soc2).toBeLessThanOrEqual(100);\r\n      expect(dashboard.complianceStatus.cryptoSecurity).toBeGreaterThanOrEqual(0);\r\n      expect(dashboard.complianceStatus.cryptoSecurity).toBeLessThanOrEqual(100);\r\n    });\r\n\r\n    it('should provide recent executions', () => {\r\n      const dashboard = orchestrator.getSecurityDashboard();\r\n      \r\n      expect(dashboard.recentExecutions).toBeDefined();\r\n      expect(Array.isArray(dashboard.recentExecutions)).toBe(true);\r\n      expect(dashboard.recentExecutions.length).toBeGreaterThan(0);\r\n      \r\n      dashboard.recentExecutions.forEach(execution => {\r\n        expect(execution.executionId).toBeDefined();\r\n        expect(execution.suiteId).toBeDefined();\r\n        expect(['PENDING', 'RUNNING', 'COMPLETED', 'FAILED', 'CANCELLED']).toContain(execution.status);\r\n      });\r\n    });\r\n\r\n    it('should provide trend data', () => {\r\n      const dashboard = orchestrator.getSecurityDashboard();\r\n      \r\n      expect(dashboard.trendData).toBeDefined();\r\n      expect(Array.isArray(dashboard.trendData)).toBe(true);\r\n      \r\n      dashboard.trendData.forEach(trend => {\r\n        expect(trend.date).toBeInstanceOf(Date);\r\n        expect(trend.securityScore).toBeGreaterThanOrEqual(0);\r\n        expect(trend.securityScore).toBeLessThanOrEqual(100);\r\n        expect(trend.vulnerabilityCount).toBeGreaterThanOrEqual(0);\r\n        expect(trend.complianceScore).toBeGreaterThanOrEqual(0);\r\n        expect(trend.complianceScore).toBeLessThanOrEqual(100);\r\n        expect(trend.riskScore).toBeGreaterThanOrEqual(0);\r\n        expect(trend.riskScore).toBeLessThanOrEqual(100);\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('Execution Management', () => {\r\n    it('should track active executions', async () => {\r\n      // Start an execution but don't wait for it\r\n      const executionPromise = orchestrator.executeSecurityTestSuite('daily-security-scan');\r\n      \r\n      // Check active executions (might be empty if execution completes quickly)\r\n      const activeExecutions = orchestrator.getActiveExecutions();\r\n      expect(Array.isArray(activeExecutions)).toBe(true);\r\n      \r\n      // Wait for execution to complete\r\n      await executionPromise;\r\n      \r\n      // Should no longer be active\r\n      const activeExecutionsAfter = orchestrator.getActiveExecutions();\r\n      expect(activeExecutionsAfter.length).toBe(0);\r\n    });\r\n\r\n    it('should maintain execution history', async () => {\r\n      await orchestrator.executeSecurityTestSuite('daily-security-scan');\r\n      await orchestrator.executeSecurityTestSuite('incident-response-check');\r\n      \r\n      const history = orchestrator.getExecutionHistory();\r\n      expect(Array.isArray(history)).toBe(true);\r\n      expect(history.length).toBeGreaterThanOrEqual(2);\r\n      \r\n      history.forEach(execution => {\r\n        expect(execution.executionId).toBeDefined();\r\n        expect(execution.status).toBe('COMPLETED');\r\n        expect(execution.startTime).toBeInstanceOf(Date);\r\n        expect(execution.endTime).toBeInstanceOf(Date);\r\n      });\r\n    });\r\n\r\n    it('should cancel active execution', async () => {\r\n      // Mock a long-running test\r\n      penetrationTesting.executeSecurityTestSuite.mockImplementation(\r\n        () => new Promise(resolve => setTimeout(resolve, 5000))\r\n      );\r\n      \r\n      // Start execution\r\n      const executionPromise = orchestrator.executeSecurityTestSuite('daily-security-scan');\r\n      \r\n      // Get execution ID\r\n      const activeExecutions = orchestrator.getActiveExecutions();\r\n      if (activeExecutions.length > 0) {\r\n        const executionId = activeExecutions[0].executionId;\r\n        \r\n        // Cancel execution\r\n        const cancelled = await orchestrator.cancelExecution(executionId);\r\n        expect(cancelled).toBe(true);\r\n        \r\n        // Execution should be cancelled\r\n        try {\r\n          await executionPromise;\r\n        } catch (error) {\r\n          // Expected to throw due to cancellation\r\n        }\r\n        \r\n        const history = orchestrator.getExecutionHistory();\r\n        const cancelledExecution = history.find(e => e.executionId === executionId);\r\n        expect(cancelledExecution?.status).toBe('CANCELLED');\r\n      }\r\n    });\r\n  });\r\n\r\n  describe('Custom Test Suites', () => {\r\n    it('should add custom test suite', () => {\r\n      const customSuite: SecurityTestSuite = {\r\n        suiteId: 'custom-test-suite',\r\n        name: 'Custom Security Test',\r\n        description: 'Custom security testing suite',\r\n        testTypes: [SecurityTestType.VULNERABILITY_SCANNING, SecurityTestType.CODE_ANALYSIS],\r\n        priority: 'MEDIUM',\r\n        enabled: true,\r\n        parallelExecution: true,\r\n        maxExecutionTime: 600000,\r\n        retryCount: 1\r\n      };\r\n      \r\n      orchestrator.addTestSuite(customSuite);\r\n      \r\n      const testSuites = orchestrator.getTestSuites();\r\n      const addedSuite = testSuites.find(suite => suite.suiteId === 'custom-test-suite');\r\n      \r\n      expect(addedSuite).toBeDefined();\r\n      expect(addedSuite!.name).toBe('Custom Security Test');\r\n      expect(addedSuite!.testTypes).toEqual([\r\n        SecurityTestType.VULNERABILITY_SCANNING, \r\n        SecurityTestType.CODE_ANALYSIS\r\n      ]);\r\n    });\r\n\r\n    it('should execute custom test suite', async () => {\r\n      const customSuite: SecurityTestSuite = {\r\n        suiteId: 'custom-execution-test',\r\n        name: 'Custom Execution Test',\r\n        description: 'Test custom suite execution',\r\n        testTypes: [SecurityTestType.DEPENDENCY_AUDIT],\r\n        priority: 'LOW',\r\n        enabled: true,\r\n        parallelExecution: false,\r\n        maxExecutionTime: 300000,\r\n        retryCount: 0\r\n      };\r\n      \r\n      orchestrator.addTestSuite(customSuite);\r\n      \r\n      const execution = await orchestrator.executeSecurityTestSuite('custom-execution-test');\r\n      \r\n      expect(execution.suiteId).toBe('custom-execution-test');\r\n      expect(execution.status).toBe('COMPLETED');\r\n      expect(execution.testResults.length).toBe(1);\r\n      expect(execution.testResults[0].testType).toBe(SecurityTestType.DEPENDENCY_AUDIT);\r\n    });\r\n\r\n    it('should remove test suite', () => {\r\n      const customSuite: SecurityTestSuite = {\r\n        suiteId: 'removable-suite',\r\n        name: 'Removable Suite',\r\n        description: 'Suite to be removed',\r\n        testTypes: [SecurityTestType.CONFIGURATION_REVIEW],\r\n        priority: 'LOW',\r\n        enabled: true,\r\n        parallelExecution: true,\r\n        maxExecutionTime: 300000,\r\n        retryCount: 0\r\n      };\r\n      \r\n      orchestrator.addTestSuite(customSuite);\r\n      \r\n      // Verify it was added\r\n      let testSuites = orchestrator.getTestSuites();\r\n      expect(testSuites.find(suite => suite.suiteId === 'removable-suite')).toBeDefined();\r\n      \r\n      // Remove it\r\n      const removed = orchestrator.removeTestSuite('removable-suite');\r\n      expect(removed).toBe(true);\r\n      \r\n      // Verify it was removed\r\n      testSuites = orchestrator.getTestSuites();\r\n      expect(testSuites.find(suite => suite.suiteId === 'removable-suite')).toBeUndefined();\r\n    });\r\n  });\r\n\r\n  describe('Error Handling and Resilience', () => {\r\n    it('should handle individual test failures gracefully', async () => {\r\n      // Mock one test to fail\r\n      vulnerabilityScanner.executeComprehensiveVulnerabilityScan.mockRejectedValue(\r\n        new Error('Vulnerability scan failed')\r\n      );\r\n      \r\n      const execution = await orchestrator.executeSecurityTestSuite('daily-security-scan');\r\n      \r\n      // Should still complete overall execution\r\n      expect(execution.status).toBe('COMPLETED');\r\n      \r\n      // Should have error result for failed test\r\n      const vulnScanResult = execution.testResults.find(\r\n        result => result.testType === SecurityTestType.VULNERABILITY_SCANNING\r\n      );\r\n      expect(vulnScanResult).toBeDefined();\r\n      expect(vulnScanResult!.status).toBe('ERROR');\r\n      expect(vulnScanResult!.details.error).toBeDefined();\r\n    });\r\n\r\n    it('should handle complete test suite failure', async () => {\r\n      // Mock all tests to fail\r\n      penetrationTesting.executeSecurityTestSuite.mockRejectedValue(new Error('Pen test failed'));\r\n      vulnerabilityScanner.executeComprehensiveVulnerabilityScan.mockRejectedValue(new Error('Vuln scan failed'));\r\n      complianceTesting.executeComplianceTest.mockRejectedValue(new Error('Compliance test failed'));\r\n      \r\n      await expect(\r\n        orchestrator.executeSecurityTestSuite('weekly-comprehensive-scan')\r\n      ).rejects.toThrow();\r\n      \r\n      // Should send failure notification\r\n      expect(notifications.sendAlert).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          title: expect.stringContaining('Security Test Suite Failed'),\r\n          priority: 'HIGH'\r\n        })\r\n      );\r\n    });\r\n\r\n    it('should handle critical findings appropriately', async () => {\r\n      // Mock critical findings\r\n      penetrationTesting.executeSecurityTestSuite.mockResolvedValue({\r\n        scanId: 'critical-test',\r\n        timestamp: new Date(),\r\n        totalVulnerabilities: 10,\r\n        criticalCount: 5,\r\n        highCount: 3,\r\n        mediumCount: 2,\r\n        lowCount: 0,\r\n        vulnerabilities: [],\r\n        complianceScore: 30,\r\n        recommendations: ['Immediate action required']\r\n      });\r\n      \r\n      const execution = await orchestrator.executeSecurityTestSuite('weekly-comprehensive-scan');\r\n      \r\n      expect(execution.criticalFindings).toBeGreaterThan(0);\r\n      \r\n      // Should send critical alert\r\n      expect(notifications.sendCriticalAlert).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          title: expect.stringContaining('Critical Security Vulnerabilities'),\r\n          priority: 'CRITICAL'\r\n        })\r\n      );\r\n      \r\n      // Should create incident for high risk\r\n      expect(incidentResponse.createIncident).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          type: 'HIGH_RISK_SECURITY_FINDINGS',\r\n          severity: 'HIGH'\r\n        })\r\n      );\r\n    });\r\n\r\n    it('should handle resource constraints', async () => {\r\n      // Simulate resource constraints by running multiple tests concurrently\r\n      const executionPromises = [\r\n        orchestrator.executeSecurityTestSuite('daily-security-scan'),\r\n        orchestrator.executeSecurityTestSuite('incident-response-check'),\r\n        orchestrator.executeSecurityTestSuite('pre-deployment-validation')\r\n      ];\r\n      \r\n      const results = await Promise.all(executionPromises);\r\n      \r\n      // All executions should complete\r\n      results.forEach(execution => {\r\n        expect(execution.status).toBe('COMPLETED');\r\n        expect(execution.executionId).toBeDefined();\r\n      });\r\n    });\r\n\r\n    it('should handle timeout scenarios', async () => {\r\n      // Mock a test that takes too long\r\n      penetrationTesting.executeSecurityTestSuite.mockImplementation(\r\n        () => new Promise(resolve => setTimeout(resolve, 10000))\r\n      );\r\n      \r\n      // This test should complete within reasonable time due to mocking\r\n      const startTime = Date.now();\r\n      const execution = await orchestrator.executeSecurityTestSuite('daily-security-scan');\r\n      const endTime = Date.now();\r\n      \r\n      expect(execution.status).toBe('COMPLETED');\r\n      expect(endTime - startTime).toBeLessThan(15000); // Should complete within 15 seconds\r\n    });\r\n  });\r\n\r\n  describe('Integration with Security Services', () => {\r\n    it('should integrate with threat detection engine', async () => {\r\n      await orchestrator.executeSecurityTestSuite('incident-response-check');\r\n      \r\n      // Threat detection should be available\r\n      expect(threatDetection).toBeDefined();\r\n    });\r\n\r\n    it('should integrate with incident response service', async () => {\r\n      // Mock high-risk findings to trigger incident response\r\n      penetrationTesting.executeSecurityTestSuite.mockResolvedValue({\r\n        scanId: 'high-risk-test',\r\n        timestamp: new Date(),\r\n        totalVulnerabilities: 8,\r\n        criticalCount: 3,\r\n        highCount: 5,\r\n        mediumCount: 0,\r\n        lowCount: 0,\r\n        vulnerabilities: [],\r\n        complianceScore: 20,\r\n        recommendations: ['Critical action required']\r\n      });\r\n      \r\n      await orchestrator.executeSecurityTestSuite('weekly-comprehensive-scan');\r\n      \r\n      // Should create incident for high-risk findings\r\n      expect(incidentResponse.createIncident).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should integrate with notification service', async () => {\r\n      await orchestrator.executeSecurityTestSuite('daily-security-scan');\r\n      \r\n      // Notification service should be available for alerts\r\n      expect(notifications).toBeDefined();\r\n    });\r\n  });\r\n});"],"version":3}