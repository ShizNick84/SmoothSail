5d386519e131f5434e43f5f229dacc14
"use strict";

/* istanbul ignore next */
function cov_gufsogc7m() {
  var path = "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\tunnel-config-validator.ts";
  var hash = "b9b2d6f463025ead3672277d358b3e7479c47dce";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\tunnel-config-validator.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 39
        }
      },
      "2": {
        start: {
          line: 4,
          column: 13
        },
        end: {
          line: 4,
          column: 26
        }
      },
      "3": {
        start: {
          line: 5,
          column: 15
        },
        end: {
          line: 5,
          column: 30
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 29
        }
      },
      "5": {
        start: {
          line: 23,
          column: 23
        },
        end: {
          line: 27,
          column: 9
        }
      },
      "6": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 58,
          column: 9
        }
      },
      "7": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 30,
          column: 56
        }
      },
      "8": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 32,
          column: 59
        }
      },
      "9": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 34,
          column: 47
        }
      },
      "10": {
        start: {
          line: 36,
          column: 12
        },
        end: {
          line: 36,
          column: 64
        }
      },
      "11": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 40,
          column: 13
        }
      },
      "12": {
        start: {
          line: 39,
          column: 16
        },
        end: {
          line: 39,
          column: 77
        }
      },
      "13": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 42,
          column: 57
        }
      },
      "14": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 44,
          column: 56
        }
      },
      "15": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 47,
          column: 13
        }
      },
      "16": {
        start: {
          line: 46,
          column: 16
        },
        end: {
          line: 46,
          column: 77
        }
      },
      "17": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 52,
          column: 15
        }
      },
      "18": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 55,
          column: 35
        }
      },
      "19": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 56,
          column: 110
        }
      },
      "20": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 57,
          column: 79
        }
      },
      "21": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 59,
          column: 22
        }
      },
      "22": {
        start: {
          line: 68,
          column: 31
        },
        end: {
          line: 74,
          column: 9
        }
      },
      "23": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 79,
          column: 9
        }
      },
      "24": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 78,
          column: 13
        }
      },
      "25": {
        start: {
          line: 77,
          column: 16
        },
        end: {
          line: 77,
          column: 71
        }
      },
      "26": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 89,
          column: 19
        }
      },
      "27": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 89,
          column: 19
        }
      },
      "28": {
        start: {
          line: 91,
          column: 24
        },
        end: {
          line: 91,
          column: 117
        }
      },
      "29": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 95,
          column: 9
        }
      },
      "30": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 73
        }
      },
      "31": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 94,
          column: 19
        }
      },
      "32": {
        start: {
          line: 97,
          column: 33
        },
        end: {
          line: 97,
          column: 50
        }
      },
      "33": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 100,
          column: 9
        }
      },
      "34": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 99,
          column: 122
        }
      },
      "35": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 104,
          column: 9
        }
      },
      "36": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 103,
          column: 94
        }
      },
      "37": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 121,
          column: 9
        }
      },
      "38": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 120,
          column: 13
        }
      },
      "39": {
        start: {
          line: 116,
          column: 16
        },
        end: {
          line: 116,
          column: 74
        }
      },
      "40": {
        start: {
          line: 118,
          column: 17
        },
        end: {
          line: 120,
          column: 13
        }
      },
      "41": {
        start: {
          line: 119,
          column: 16
        },
        end: {
          line: 119,
          column: 81
        }
      },
      "42": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 130,
          column: 9
        }
      },
      "43": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 129,
          column: 13
        }
      },
      "44": {
        start: {
          line: 125,
          column: 16
        },
        end: {
          line: 125,
          column: 78
        }
      },
      "45": {
        start: {
          line: 127,
          column: 17
        },
        end: {
          line: 129,
          column: 13
        }
      },
      "46": {
        start: {
          line: 128,
          column: 16
        },
        end: {
          line: 128,
          column: 100
        }
      },
      "47": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 136,
          column: 9
        }
      },
      "48": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 135,
          column: 13
        }
      },
      "49": {
        start: {
          line: 134,
          column: 16
        },
        end: {
          line: 134,
          column: 80
        }
      },
      "50": {
        start: {
          line: 138,
          column: 8
        },
        end: {
          line: 140,
          column: 9
        }
      },
      "51": {
        start: {
          line: 139,
          column: 12
        },
        end: {
          line: 139,
          column: 100
        }
      },
      "52": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 154,
          column: 9
        }
      },
      "53": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 153,
          column: 13
        }
      },
      "54": {
        start: {
          line: 152,
          column: 16
        },
        end: {
          line: 152,
          column: 82
        }
      },
      "55": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 181,
          column: 9
        }
      },
      "56": {
        start: {
          line: 157,
          column: 30
        },
        end: {
          line: 157,
          column: 59
        }
      },
      "57": {
        start: {
          line: 158,
          column: 29
        },
        end: {
          line: 158,
          column: 68
        }
      },
      "58": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 177,
          column: 15
        }
      },
      "59": {
        start: {
          line: 160,
          column: 32
        },
        end: {
          line: 163,
          column: 24
        }
      },
      "60": {
        start: {
          line: 161,
          column: 20
        },
        end: {
          line: 161,
          column: 36
        }
      },
      "61": {
        start: {
          line: 162,
          column: 20
        },
        end: {
          line: 162,
          column: 66
        }
      },
      "62": {
        start: {
          line: 164,
          column: 16
        },
        end: {
          line: 172,
          column: 19
        }
      },
      "63": {
        start: {
          line: 165,
          column: 20
        },
        end: {
          line: 165,
          column: 42
        }
      },
      "64": {
        start: {
          line: 166,
          column: 20
        },
        end: {
          line: 171,
          column: 21
        }
      },
      "65": {
        start: {
          line: 167,
          column: 24
        },
        end: {
          line: 167,
          column: 34
        }
      },
      "66": {
        start: {
          line: 170,
          column: 24
        },
        end: {
          line: 170,
          column: 88
        }
      },
      "67": {
        start: {
          line: 173,
          column: 16
        },
        end: {
          line: 176,
          column: 19
        }
      },
      "68": {
        start: {
          line: 174,
          column: 20
        },
        end: {
          line: 174,
          column: 42
        }
      },
      "69": {
        start: {
          line: 175,
          column: 20
        },
        end: {
          line: 175,
          column: 34
        }
      },
      "70": {
        start: {
          line: 180,
          column: 12
        },
        end: {
          line: 180,
          column: 132
        }
      },
      "71": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 228,
          column: 9
        }
      },
      "72": {
        start: {
          line: 192,
          column: 33
        },
        end: {
          line: 192,
          column: 68
        }
      },
      "73": {
        start: {
          line: 194,
          column: 26
        },
        end: {
          line: 194,
          column: 64
        }
      },
      "74": {
        start: {
          line: 195,
          column: 12
        },
        end: {
          line: 198,
          column: 13
        }
      },
      "75": {
        start: {
          line: 196,
          column: 16
        },
        end: {
          line: 196,
          column: 88
        }
      },
      "76": {
        start: {
          line: 197,
          column: 16
        },
        end: {
          line: 197,
          column: 23
        }
      },
      "77": {
        start: {
          line: 200,
          column: 12
        },
        end: {
          line: 206,
          column: 13
        }
      },
      "78": {
        start: {
          line: 201,
          column: 16
        },
        end: {
          line: 201,
          column: 87
        }
      },
      "79": {
        start: {
          line: 204,
          column: 16
        },
        end: {
          line: 204,
          column: 90
        }
      },
      "80": {
        start: {
          line: 205,
          column: 16
        },
        end: {
          line: 205,
          column: 23
        }
      },
      "81": {
        start: {
          line: 208,
          column: 12
        },
        end: {
          line: 211,
          column: 13
        }
      },
      "82": {
        start: {
          line: 209,
          column: 16
        },
        end: {
          line: 209,
          column: 83
        }
      },
      "83": {
        start: {
          line: 210,
          column: 16
        },
        end: {
          line: 210,
          column: 23
        }
      },
      "84": {
        start: {
          line: 213,
          column: 31
        },
        end: {
          line: 213,
          column: 81
        }
      },
      "85": {
        start: {
          line: 214,
          column: 12
        },
        end: {
          line: 217,
          column: 13
        }
      },
      "86": {
        start: {
          line: 215,
          column: 16
        },
        end: {
          line: 215,
          column: 84
        }
      },
      "87": {
        start: {
          line: 216,
          column: 16
        },
        end: {
          line: 216,
          column: 23
        }
      },
      "88": {
        start: {
          line: 219,
          column: 12
        },
        end: {
          line: 224,
          column: 13
        }
      },
      "89": {
        start: {
          line: 220,
          column: 29
        },
        end: {
          line: 220,
          column: 60
        }
      },
      "90": {
        start: {
          line: 221,
          column: 16
        },
        end: {
          line: 223,
          column: 17
        }
      },
      "91": {
        start: {
          line: 222,
          column: 20
        },
        end: {
          line: 222,
          column: 114
        }
      },
      "92": {
        start: {
          line: 227,
          column: 12
        },
        end: {
          line: 227,
          column: 123
        }
      },
      "93": {
        start: {
          line: 238,
          column: 8
        },
        end: {
          line: 245,
          column: 9
        }
      },
      "94": {
        start: {
          line: 239,
          column: 12
        },
        end: {
          line: 244,
          column: 13
        }
      },
      "95": {
        start: {
          line: 240,
          column: 16
        },
        end: {
          line: 240,
          column: 120
        }
      },
      "96": {
        start: {
          line: 242,
          column: 17
        },
        end: {
          line: 244,
          column: 13
        }
      },
      "97": {
        start: {
          line: 243,
          column: 16
        },
        end: {
          line: 243,
          column: 103
        }
      },
      "98": {
        start: {
          line: 247,
          column: 8
        },
        end: {
          line: 251,
          column: 9
        }
      },
      "99": {
        start: {
          line: 248,
          column: 12
        },
        end: {
          line: 250,
          column: 13
        }
      },
      "100": {
        start: {
          line: 249,
          column: 16
        },
        end: {
          line: 249,
          column: 126
        }
      },
      "101": {
        start: {
          line: 253,
          column: 8
        },
        end: {
          line: 257,
          column: 9
        }
      },
      "102": {
        start: {
          line: 254,
          column: 12
        },
        end: {
          line: 256,
          column: 13
        }
      },
      "103": {
        start: {
          line: 255,
          column: 16
        },
        end: {
          line: 255,
          column: 117
        }
      },
      "104": {
        start: {
          line: 266,
          column: 8
        },
        end: {
          line: 278,
          column: 10
        }
      },
      "105": {
        start: {
          line: 287,
          column: 22
        },
        end: {
          line: 287,
          column: 47
        }
      },
      "106": {
        start: {
          line: 289,
          column: 8
        },
        end: {
          line: 290,
          column: 24
        }
      },
      "107": {
        start: {
          line: 290,
          column: 12
        },
        end: {
          line: 290,
          column: 24
        }
      },
      "108": {
        start: {
          line: 292,
          column: 8
        },
        end: {
          line: 293,
          column: 24
        }
      },
      "109": {
        start: {
          line: 293,
          column: 12
        },
        end: {
          line: 293,
          column: 24
        }
      },
      "110": {
        start: {
          line: 295,
          column: 8
        },
        end: {
          line: 296,
          column: 24
        }
      },
      "111": {
        start: {
          line: 296,
          column: 12
        },
        end: {
          line: 296,
          column: 24
        }
      },
      "112": {
        start: {
          line: 298,
          column: 8
        },
        end: {
          line: 299,
          column: 24
        }
      },
      "113": {
        start: {
          line: 299,
          column: 12
        },
        end: {
          line: 299,
          column: 24
        }
      },
      "114": {
        start: {
          line: 300,
          column: 8
        },
        end: {
          line: 300,
          column: 21
        }
      },
      "115": {
        start: {
          line: 309,
          column: 8
        },
        end: {
          line: 309,
          column: 68
        }
      },
      "116": {
        start: {
          line: 319,
          column: 29
        },
        end: {
          line: 325,
          column: 9
        }
      },
      "117": {
        start: {
          line: 326,
          column: 8
        },
        end: {
          line: 326,
          column: 72
        }
      },
      "118": {
        start: {
          line: 326,
          column: 43
        },
        end: {
          line: 326,
          column: 70
        }
      },
      "119": {
        start: {
          line: 329,
          column: 0
        },
        end: {
          line: 329,
          column: 54
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 24
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 40
          },
          end: {
            line: 60,
            column: 5
          }
        },
        line: 22
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 67,
            column: 4
          },
          end: {
            line: 67,
            column: 5
          }
        },
        loc: {
          start: {
            line: 67,
            column: 43
          },
          end: {
            line: 80,
            column: 5
          }
        },
        line: 67
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 87,
            column: 4
          },
          end: {
            line: 87,
            column: 5
          }
        },
        loc: {
          start: {
            line: 87,
            column: 39
          },
          end: {
            line: 105,
            column: 5
          }
        },
        line: 87
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 112,
            column: 4
          },
          end: {
            line: 112,
            column: 5
          }
        },
        loc: {
          start: {
            line: 112,
            column: 34
          },
          end: {
            line: 141,
            column: 5
          }
        },
        line: 112
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 148,
            column: 4
          },
          end: {
            line: 148,
            column: 5
          }
        },
        loc: {
          start: {
            line: 148,
            column: 51
          },
          end: {
            line: 182,
            column: 5
          }
        },
        line: 148
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 159,
            column: 30
          },
          end: {
            line: 159,
            column: 31
          }
        },
        loc: {
          start: {
            line: 159,
            column: 51
          },
          end: {
            line: 177,
            column: 13
          }
        },
        line: 159
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 160,
            column: 43
          },
          end: {
            line: 160,
            column: 44
          }
        },
        loc: {
          start: {
            line: 160,
            column: 49
          },
          end: {
            line: 163,
            column: 17
          }
        },
        line: 160
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 164,
            column: 36
          },
          end: {
            line: 164,
            column: 37
          }
        },
        loc: {
          start: {
            line: 164,
            column: 46
          },
          end: {
            line: 172,
            column: 17
          }
        },
        line: 164
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 173,
            column: 37
          },
          end: {
            line: 173,
            column: 38
          }
        },
        loc: {
          start: {
            line: 173,
            column: 48
          },
          end: {
            line: 176,
            column: 17
          }
        },
        line: 173
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 189,
            column: 4
          },
          end: {
            line: 189,
            column: 5
          }
        },
        loc: {
          start: {
            line: 189,
            column: 53
          },
          end: {
            line: 229,
            column: 5
          }
        },
        line: 189
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 236,
            column: 4
          },
          end: {
            line: 236,
            column: 5
          }
        },
        loc: {
          start: {
            line: 236,
            column: 44
          },
          end: {
            line: 258,
            column: 5
          }
        },
        line: 236
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 265,
            column: 4
          },
          end: {
            line: 265,
            column: 5
          }
        },
        loc: {
          start: {
            line: 265,
            column: 35
          },
          end: {
            line: 279,
            column: 5
          }
        },
        line: 265
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 286,
            column: 4
          },
          end: {
            line: 286,
            column: 5
          }
        },
        loc: {
          start: {
            line: 286,
            column: 20
          },
          end: {
            line: 301,
            column: 5
          }
        },
        line: 286
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 308,
            column: 4
          },
          end: {
            line: 308,
            column: 5
          }
        },
        loc: {
          start: {
            line: 308,
            column: 22
          },
          end: {
            line: 310,
            column: 5
          }
        },
        line: 308
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 317,
            column: 4
          },
          end: {
            line: 317,
            column: 5
          }
        },
        loc: {
          start: {
            line: 317,
            column: 40
          },
          end: {
            line: 327,
            column: 5
          }
        },
        line: 317
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 326,
            column: 33
          },
          end: {
            line: 326,
            column: 34
          }
        },
        loc: {
          start: {
            line: 326,
            column: 43
          },
          end: {
            line: 326,
            column: 70
          }
        },
        line: 326
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 38,
            column: 12
          },
          end: {
            line: 40,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 12
          },
          end: {
            line: 40,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      },
      "1": {
        loc: {
          start: {
            line: 45,
            column: 12
          },
          end: {
            line: 47,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 45,
            column: 12
          },
          end: {
            line: 47,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 45
      },
      "2": {
        loc: {
          start: {
            line: 56,
            column: 52
          },
          end: {
            line: 56,
            column: 106
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 56,
            column: 77
          },
          end: {
            line: 56,
            column: 90
          }
        }, {
          start: {
            line: 56,
            column: 93
          },
          end: {
            line: 56,
            column: 106
          }
        }],
        line: 56
      },
      "3": {
        loc: {
          start: {
            line: 76,
            column: 12
          },
          end: {
            line: 78,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 76,
            column: 12
          },
          end: {
            line: 78,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 76
      },
      "4": {
        loc: {
          start: {
            line: 88,
            column: 8
          },
          end: {
            line: 89,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 88,
            column: 8
          },
          end: {
            line: 89,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 88
      },
      "5": {
        loc: {
          start: {
            line: 92,
            column: 8
          },
          end: {
            line: 95,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 92,
            column: 8
          },
          end: {
            line: 95,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 92
      },
      "6": {
        loc: {
          start: {
            line: 98,
            column: 8
          },
          end: {
            line: 100,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 98,
            column: 8
          },
          end: {
            line: 100,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 98
      },
      "7": {
        loc: {
          start: {
            line: 102,
            column: 8
          },
          end: {
            line: 104,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 102,
            column: 8
          },
          end: {
            line: 104,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 102
      },
      "8": {
        loc: {
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 121,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 121,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 114
      },
      "9": {
        loc: {
          start: {
            line: 115,
            column: 12
          },
          end: {
            line: 120,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 115,
            column: 12
          },
          end: {
            line: 120,
            column: 13
          }
        }, {
          start: {
            line: 118,
            column: 17
          },
          end: {
            line: 120,
            column: 13
          }
        }],
        line: 115
      },
      "10": {
        loc: {
          start: {
            line: 118,
            column: 17
          },
          end: {
            line: 120,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 118,
            column: 17
          },
          end: {
            line: 120,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 118
      },
      "11": {
        loc: {
          start: {
            line: 123,
            column: 8
          },
          end: {
            line: 130,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 123,
            column: 8
          },
          end: {
            line: 130,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 123
      },
      "12": {
        loc: {
          start: {
            line: 124,
            column: 12
          },
          end: {
            line: 129,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 124,
            column: 12
          },
          end: {
            line: 129,
            column: 13
          }
        }, {
          start: {
            line: 127,
            column: 17
          },
          end: {
            line: 129,
            column: 13
          }
        }],
        line: 124
      },
      "13": {
        loc: {
          start: {
            line: 127,
            column: 17
          },
          end: {
            line: 129,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 127,
            column: 17
          },
          end: {
            line: 129,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 127
      },
      "14": {
        loc: {
          start: {
            line: 132,
            column: 8
          },
          end: {
            line: 136,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 132,
            column: 8
          },
          end: {
            line: 136,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 132
      },
      "15": {
        loc: {
          start: {
            line: 133,
            column: 12
          },
          end: {
            line: 135,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 133,
            column: 12
          },
          end: {
            line: 135,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 133
      },
      "16": {
        loc: {
          start: {
            line: 138,
            column: 8
          },
          end: {
            line: 140,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 138,
            column: 8
          },
          end: {
            line: 140,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 138
      },
      "17": {
        loc: {
          start: {
            line: 138,
            column: 12
          },
          end: {
            line: 138,
            column: 91
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 138,
            column: 12
          },
          end: {
            line: 138,
            column: 28
          }
        }, {
          start: {
            line: 138,
            column: 32
          },
          end: {
            line: 138,
            column: 49
          }
        }, {
          start: {
            line: 138,
            column: 53
          },
          end: {
            line: 138,
            column: 91
          }
        }],
        line: 138
      },
      "18": {
        loc: {
          start: {
            line: 150,
            column: 8
          },
          end: {
            line: 154,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 150,
            column: 8
          },
          end: {
            line: 154,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 150
      },
      "19": {
        loc: {
          start: {
            line: 151,
            column: 12
          },
          end: {
            line: 153,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 151,
            column: 12
          },
          end: {
            line: 153,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 151
      },
      "20": {
        loc: {
          start: {
            line: 166,
            column: 20
          },
          end: {
            line: 171,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 166,
            column: 20
          },
          end: {
            line: 171,
            column: 21
          }
        }, {
          start: {
            line: 169,
            column: 25
          },
          end: {
            line: 171,
            column: 21
          }
        }],
        line: 166
      },
      "21": {
        loc: {
          start: {
            line: 166,
            column: 24
          },
          end: {
            line: 166,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 166,
            column: 24
          },
          end: {
            line: 166,
            column: 34
          }
        }, {
          start: {
            line: 166,
            column: 38
          },
          end: {
            line: 166,
            column: 51
          }
        }],
        line: 166
      },
      "22": {
        loc: {
          start: {
            line: 180,
            column: 74
          },
          end: {
            line: 180,
            column: 128
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 180,
            column: 99
          },
          end: {
            line: 180,
            column: 112
          }
        }, {
          start: {
            line: 180,
            column: 115
          },
          end: {
            line: 180,
            column: 128
          }
        }],
        line: 180
      },
      "23": {
        loc: {
          start: {
            line: 195,
            column: 12
          },
          end: {
            line: 198,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 195,
            column: 12
          },
          end: {
            line: 198,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 195
      },
      "24": {
        loc: {
          start: {
            line: 208,
            column: 12
          },
          end: {
            line: 211,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 208,
            column: 12
          },
          end: {
            line: 211,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 208
      },
      "25": {
        loc: {
          start: {
            line: 214,
            column: 12
          },
          end: {
            line: 217,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 214,
            column: 12
          },
          end: {
            line: 217,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 214
      },
      "26": {
        loc: {
          start: {
            line: 219,
            column: 12
          },
          end: {
            line: 224,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 219,
            column: 12
          },
          end: {
            line: 224,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 219
      },
      "27": {
        loc: {
          start: {
            line: 221,
            column: 16
          },
          end: {
            line: 223,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 221,
            column: 16
          },
          end: {
            line: 223,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 221
      },
      "28": {
        loc: {
          start: {
            line: 227,
            column: 65
          },
          end: {
            line: 227,
            column: 119
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 227,
            column: 90
          },
          end: {
            line: 227,
            column: 103
          }
        }, {
          start: {
            line: 227,
            column: 106
          },
          end: {
            line: 227,
            column: 119
          }
        }],
        line: 227
      },
      "29": {
        loc: {
          start: {
            line: 238,
            column: 8
          },
          end: {
            line: 245,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 238,
            column: 8
          },
          end: {
            line: 245,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 238
      },
      "30": {
        loc: {
          start: {
            line: 239,
            column: 12
          },
          end: {
            line: 244,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 239,
            column: 12
          },
          end: {
            line: 244,
            column: 13
          }
        }, {
          start: {
            line: 242,
            column: 17
          },
          end: {
            line: 244,
            column: 13
          }
        }],
        line: 239
      },
      "31": {
        loc: {
          start: {
            line: 239,
            column: 16
          },
          end: {
            line: 239,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 239,
            column: 16
          },
          end: {
            line: 239,
            column: 44
          }
        }, {
          start: {
            line: 239,
            column: 48
          },
          end: {
            line: 239,
            column: 78
          }
        }],
        line: 239
      },
      "32": {
        loc: {
          start: {
            line: 242,
            column: 17
          },
          end: {
            line: 244,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 242,
            column: 17
          },
          end: {
            line: 244,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 242
      },
      "33": {
        loc: {
          start: {
            line: 247,
            column: 8
          },
          end: {
            line: 251,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 247,
            column: 8
          },
          end: {
            line: 251,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 247
      },
      "34": {
        loc: {
          start: {
            line: 248,
            column: 12
          },
          end: {
            line: 250,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 248,
            column: 12
          },
          end: {
            line: 250,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 248
      },
      "35": {
        loc: {
          start: {
            line: 248,
            column: 16
          },
          end: {
            line: 248,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 248,
            column: 16
          },
          end: {
            line: 248,
            column: 46
          }
        }, {
          start: {
            line: 248,
            column: 50
          },
          end: {
            line: 248,
            column: 83
          }
        }],
        line: 248
      },
      "36": {
        loc: {
          start: {
            line: 253,
            column: 8
          },
          end: {
            line: 257,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 253,
            column: 8
          },
          end: {
            line: 257,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 253
      },
      "37": {
        loc: {
          start: {
            line: 254,
            column: 12
          },
          end: {
            line: 256,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 254,
            column: 12
          },
          end: {
            line: 256,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 254
      },
      "38": {
        loc: {
          start: {
            line: 254,
            column: 16
          },
          end: {
            line: 254,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 254,
            column: 16
          },
          end: {
            line: 254,
            column: 46
          }
        }, {
          start: {
            line: 254,
            column: 50
          },
          end: {
            line: 254,
            column: 81
          }
        }],
        line: 254
      },
      "39": {
        loc: {
          start: {
            line: 267,
            column: 22
          },
          end: {
            line: 267,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 267,
            column: 22
          },
          end: {
            line: 267,
            column: 37
          }
        }, {
          start: {
            line: 267,
            column: 41
          },
          end: {
            line: 267,
            column: 58
          }
        }],
        line: 267
      },
      "40": {
        loc: {
          start: {
            line: 268,
            column: 21
          },
          end: {
            line: 268,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 268,
            column: 21
          },
          end: {
            line: 268,
            column: 35
          }
        }, {
          start: {
            line: 268,
            column: 39
          },
          end: {
            line: 268,
            column: 41
          }
        }],
        line: 268
      },
      "41": {
        loc: {
          start: {
            line: 275,
            column: 31
          },
          end: {
            line: 275,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 275,
            column: 31
          },
          end: {
            line: 275,
            column: 55
          }
        }, {
          start: {
            line: 275,
            column: 59
          },
          end: {
            line: 275,
            column: 61
          }
        }],
        line: 275
      },
      "42": {
        loc: {
          start: {
            line: 276,
            column: 33
          },
          end: {
            line: 276,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 276,
            column: 33
          },
          end: {
            line: 276,
            column: 59
          }
        }, {
          start: {
            line: 276,
            column: 63
          },
          end: {
            line: 276,
            column: 65
          }
        }],
        line: 276
      },
      "43": {
        loc: {
          start: {
            line: 277,
            column: 33
          },
          end: {
            line: 277,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 277,
            column: 33
          },
          end: {
            line: 277,
            column: 59
          }
        }, {
          start: {
            line: 277,
            column: 63
          },
          end: {
            line: 277,
            column: 64
          }
        }],
        line: 277
      },
      "44": {
        loc: {
          start: {
            line: 289,
            column: 8
          },
          end: {
            line: 290,
            column: 24
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 289,
            column: 8
          },
          end: {
            line: 290,
            column: 24
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 289
      },
      "45": {
        loc: {
          start: {
            line: 292,
            column: 8
          },
          end: {
            line: 293,
            column: 24
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 292,
            column: 8
          },
          end: {
            line: 293,
            column: 24
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 292
      },
      "46": {
        loc: {
          start: {
            line: 292,
            column: 12
          },
          end: {
            line: 292,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 292,
            column: 12
          },
          end: {
            line: 292,
            column: 28
          }
        }, {
          start: {
            line: 292,
            column: 32
          },
          end: {
            line: 292,
            column: 46
          }
        }, {
          start: {
            line: 292,
            column: 50
          },
          end: {
            line: 292,
            column: 64
          }
        }],
        line: 292
      },
      "47": {
        loc: {
          start: {
            line: 295,
            column: 8
          },
          end: {
            line: 296,
            column: 24
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 295,
            column: 8
          },
          end: {
            line: 296,
            column: 24
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 295
      },
      "48": {
        loc: {
          start: {
            line: 295,
            column: 12
          },
          end: {
            line: 295,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 295,
            column: 12
          },
          end: {
            line: 295,
            column: 28
          }
        }, {
          start: {
            line: 295,
            column: 32
          },
          end: {
            line: 295,
            column: 48
          }
        }],
        line: 295
      },
      "49": {
        loc: {
          start: {
            line: 298,
            column: 8
          },
          end: {
            line: 299,
            column: 24
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 298,
            column: 8
          },
          end: {
            line: 299,
            column: 24
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 298
      },
      "50": {
        loc: {
          start: {
            line: 309,
            column: 15
          },
          end: {
            line: 309,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 309,
            column: 15
          },
          end: {
            line: 309,
            column: 37
          }
        }, {
          start: {
            line: 309,
            column: 41
          },
          end: {
            line: 309,
            column: 50
          }
        }, {
          start: {
            line: 309,
            column: 54
          },
          end: {
            line: 309,
            column: 67
          }
        }],
        line: 309
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\tunnel-config-validator.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\tunnel-config-validator.ts"],
      sourcesContent: ["import { promises as fs } from 'fs';\r\nimport { resolve } from 'path';\r\nimport { Logger } from '../core/logging/logger';\r\n\r\n/**\r\n * Tunnel Configuration Validation Result\r\n */\r\nexport interface ValidationResult {\r\n  /** Whether validation passed */\r\n  isValid: boolean;\r\n  /** Validation errors */\r\n  errors: string[];\r\n  /** Validation warnings */\r\n  warnings: string[];\r\n  /** Validated configuration */\r\n  validatedConfig?: TunnelConfigInput;\r\n}\r\n\r\n/**\r\n * Input configuration for tunnel validation\r\n */\r\nexport interface TunnelConfigInput {\r\n  oracleIP?: string;\r\n  sshPort?: number;\r\n  username?: string;\r\n  privateKeyPath?: string;\r\n  localPort?: number;\r\n  remotePort?: number;\r\n  keepAlive?: boolean;\r\n  compression?: boolean;\r\n  connectionTimeout?: number;\r\n  serverAliveInterval?: number;\r\n  serverAliveCountMax?: number;\r\n}\r\n\r\n/**\r\n * Tunnel Configuration Validator\r\n * Validates SSH tunnel configuration parameters and ensures system readiness\r\n */\r\nexport class TunnelConfigValidator {\r\n  private logger: Logger;\r\n\r\n  constructor(logger: Logger) {\r\n    this.logger = logger;\r\n  }\r\n\r\n  /**\r\n   * Validate complete tunnel configuration\r\n   * Performs comprehensive validation of all tunnel parameters\r\n   * \r\n   * @param config - Configuration to validate\r\n   * @returns Validation result with errors and warnings\r\n   */\r\n  async validateConfiguration(config: TunnelConfigInput): Promise<ValidationResult> {\r\n    const result: ValidationResult = {\r\n      isValid: true,\r\n      errors: [],\r\n      warnings: []\r\n    };\r\n\r\n    try {\r\n      // Validate required fields\r\n      this.validateRequiredFields(config, result);\r\n      \r\n      // Validate Oracle IP address\r\n      this.validateOracleIP(config.oracleIP, result);\r\n      \r\n      // Validate ports\r\n      this.validatePorts(config, result);\r\n      \r\n      // Validate SSH configuration\r\n      await this.validateSSHConfiguration(config, result);\r\n      \r\n      // Validate private key\r\n      if (config.privateKeyPath) {\r\n        await this.validatePrivateKey(config.privateKeyPath, result);\r\n      }\r\n      \r\n      // Validate timeout settings\r\n      this.validateTimeoutSettings(config, result);\r\n      \r\n      // Set final validation status\r\n      result.isValid = result.errors.length === 0;\r\n      \r\n      if (result.isValid) {\r\n        result.validatedConfig = this.normalizeConfiguration(config);\r\n      }\r\n\r\n      this.logger.info('Tunnel configuration validation completed', {\r\n        isValid: result.isValid,\r\n        errorCount: result.errors.length,\r\n        warningCount: result.warnings.length\r\n      });\r\n\r\n    } catch (error) {\r\n      result.isValid = false;\r\n      result.errors.push(`Validation error: ${error instanceof Error ? error.message : String(error)}`);\r\n      this.logger.error('Tunnel configuration validation failed', error);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Validate required configuration fields\r\n   * \r\n   * @param config - Configuration to validate\r\n   * @param result - Validation result to update\r\n   */\r\n  private validateRequiredFields(config: TunnelConfigInput, result: ValidationResult): void {\r\n    const requiredFields: (keyof TunnelConfigInput)[] = [\r\n      'oracleIP',\r\n      'username',\r\n      'privateKeyPath',\r\n      'localPort',\r\n      'remotePort'\r\n    ];\r\n\r\n    for (const field of requiredFields) {\r\n      if (!config[field]) {\r\n        result.errors.push(`Missing required field: ${field}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate Oracle Free Tier IP address\r\n   * \r\n   * @param oracleIP - IP address to validate\r\n   * @param result - Validation result to update\r\n   */\r\n  private validateOracleIP(oracleIP: string | undefined, result: ValidationResult): void {\r\n    if (!oracleIP) return;\r\n\r\n    // Validate IP format\r\n    const ipRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;\r\n    \r\n    if (!ipRegex.test(oracleIP)) {\r\n      result.errors.push(`Invalid IP address format: ${oracleIP}`);\r\n      return;\r\n    }\r\n\r\n    // Check if it's the expected Oracle Free Tier IP\r\n    const expectedOracleIP = '168.138.104.117';\r\n    if (oracleIP !== expectedOracleIP) {\r\n      result.warnings.push(`IP address ${oracleIP} differs from expected Oracle Free Tier IP: ${expectedOracleIP}`);\r\n    }\r\n\r\n    // Validate it's not a private/local IP\r\n    if (this.isPrivateIP(oracleIP)) {\r\n      result.warnings.push(`IP address ${oracleIP} appears to be a private IP address`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate port configurations\r\n   * \r\n   * @param config - Configuration to validate\r\n   * @param result - Validation result to update\r\n   */\r\n  private validatePorts(config: TunnelConfigInput, result: ValidationResult): void {\r\n    // Validate SSH port\r\n    if (config.sshPort !== undefined) {\r\n      if (!this.isValidPort(config.sshPort)) {\r\n        result.errors.push(`Invalid SSH port: ${config.sshPort}`);\r\n      } else if (config.sshPort !== 22) {\r\n        result.warnings.push(`Non-standard SSH port: ${config.sshPort}`);\r\n      }\r\n    }\r\n\r\n    // Validate local port\r\n    if (config.localPort !== undefined) {\r\n      if (!this.isValidPort(config.localPort)) {\r\n        result.errors.push(`Invalid local port: ${config.localPort}`);\r\n      } else if (config.localPort < 1024) {\r\n        result.warnings.push(`Local port ${config.localPort} requires elevated privileges`);\r\n      }\r\n    }\r\n\r\n    // Validate remote port\r\n    if (config.remotePort !== undefined) {\r\n      if (!this.isValidPort(config.remotePort)) {\r\n        result.errors.push(`Invalid remote port: ${config.remotePort}`);\r\n      }\r\n    }\r\n\r\n    // Check for port conflicts\r\n    if (config.localPort && config.remotePort && config.localPort === config.remotePort) {\r\n      result.warnings.push('Local and remote ports are the same, ensure this is intentional');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate SSH configuration parameters\r\n   * \r\n   * @param config - Configuration to validate\r\n   * @param result - Validation result to update\r\n   */\r\n  private async validateSSHConfiguration(config: TunnelConfigInput, result: ValidationResult): Promise<void> {\r\n    // Validate username\r\n    if (config.username) {\r\n      if (!/^[a-zA-Z0-9_-]+$/.test(config.username)) {\r\n        result.errors.push(`Invalid username format: ${config.username}`);\r\n      }\r\n    }\r\n\r\n    // Check SSH client availability\r\n    try {\r\n      const { spawn } = await import('child_process');\r\n      const sshCheck = spawn('ssh', ['-V'], { stdio: 'pipe' });\r\n      \r\n      await new Promise<void>((resolve, reject) => {\r\n        const timeout = setTimeout(() => {\r\n          sshCheck.kill();\r\n          reject(new Error('SSH client check timeout'));\r\n        }, 5000);\r\n\r\n        sshCheck.on('exit', (code) => {\r\n          clearTimeout(timeout);\r\n          if (code === 0 || code === null) {\r\n            resolve();\r\n          } else {\r\n            reject(new Error(`SSH client check failed with code: ${code}`));\r\n          }\r\n        });\r\n\r\n        sshCheck.on('error', (error) => {\r\n          clearTimeout(timeout);\r\n          reject(error);\r\n        });\r\n      });\r\n\r\n    } catch (error) {\r\n      result.warnings.push(`SSH client availability check failed: ${error instanceof Error ? error.message : String(error)}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate private key file\r\n   * \r\n   * @param privateKeyPath - Path to private key file\r\n   * @param result - Validation result to update\r\n   */\r\n  private async validatePrivateKey(privateKeyPath: string, result: ValidationResult): Promise<void> {\r\n    try {\r\n      // Resolve absolute path\r\n      const absolutePath = resolve(privateKeyPath);\r\n      \r\n      // Check if file exists\r\n      const stats = await fs.stat(absolutePath);\r\n      \r\n      if (!stats.isFile()) {\r\n        result.errors.push(`Private key path is not a file: ${privateKeyPath}`);\r\n        return;\r\n      }\r\n\r\n      // Check file permissions\r\n      try {\r\n        await fs.access(absolutePath, fs.constants.R_OK);\r\n      } catch {\r\n        result.errors.push(`Private key file is not readable: ${privateKeyPath}`);\r\n        return;\r\n      }\r\n\r\n      // Check file size (should not be empty)\r\n      if (stats.size === 0) {\r\n        result.errors.push(`Private key file is empty: ${privateKeyPath}`);\r\n        return;\r\n      }\r\n\r\n      // Validate key format\r\n      const keyContent = await fs.readFile(absolutePath, 'utf8');\r\n      if (!this.isValidPrivateKeyFormat(keyContent)) {\r\n        result.errors.push(`Invalid private key format: ${privateKeyPath}`);\r\n        return;\r\n      }\r\n\r\n      // Check file permissions (Unix-like systems)\r\n      if (process.platform !== 'win32') {\r\n        const mode = stats.mode & parseInt('777', 8);\r\n        if (mode & parseInt('077', 8)) {\r\n          result.warnings.push(`Private key file has overly permissive permissions: ${privateKeyPath}`);\r\n        }\r\n      }\r\n\r\n    } catch (error) {\r\n      result.errors.push(`Private key validation failed: ${error instanceof Error ? error.message : String(error)}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate timeout and connection settings\r\n   * \r\n   * @param config - Configuration to validate\r\n   * @param result - Validation result to update\r\n   */\r\n  private validateTimeoutSettings(config: TunnelConfigInput, result: ValidationResult): void {\r\n    // Validate connection timeout\r\n    if (config.connectionTimeout !== undefined) {\r\n      if (config.connectionTimeout < 1 || config.connectionTimeout > 300) {\r\n        result.errors.push(`Connection timeout must be between 1 and 300 seconds: ${config.connectionTimeout}`);\r\n      } else if (config.connectionTimeout < 10) {\r\n        result.warnings.push(`Connection timeout is very short: ${config.connectionTimeout}s`);\r\n      }\r\n    }\r\n\r\n    // Validate server alive interval\r\n    if (config.serverAliveInterval !== undefined) {\r\n      if (config.serverAliveInterval < 1 || config.serverAliveInterval > 3600) {\r\n        result.errors.push(`Server alive interval must be between 1 and 3600 seconds: ${config.serverAliveInterval}`);\r\n      }\r\n    }\r\n\r\n    // Validate server alive count max\r\n    if (config.serverAliveCountMax !== undefined) {\r\n      if (config.serverAliveCountMax < 1 || config.serverAliveCountMax > 10) {\r\n        result.errors.push(`Server alive count max must be between 1 and 10: ${config.serverAliveCountMax}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Normalize configuration with defaults\r\n   * \r\n   * @param config - Input configuration\r\n   * @returns Normalized configuration\r\n   */\r\n  private normalizeConfiguration(config: TunnelConfigInput): TunnelConfigInput {\r\n    return {\r\n      oracleIP: config.oracleIP || '168.138.104.117',\r\n      sshPort: config.sshPort || 22,\r\n      username: config.username,\r\n      privateKeyPath: config.privateKeyPath,\r\n      localPort: config.localPort,\r\n      remotePort: config.remotePort,\r\n      keepAlive: config.keepAlive !== false, // Default to true\r\n      compression: config.compression !== false, // Default to true\r\n      connectionTimeout: config.connectionTimeout || 30,\r\n      serverAliveInterval: config.serverAliveInterval || 60,\r\n      serverAliveCountMax: config.serverAliveCountMax || 3\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Check if IP address is private\r\n   * \r\n   * @param ip - IP address to check\r\n   * @returns True if private IP\r\n   */\r\n  private isPrivateIP(ip: string): boolean {\r\n    const parts = ip.split('.').map(Number);\r\n    \r\n    // 10.0.0.0/8\r\n    if (parts[0] === 10) return true;\r\n    \r\n    // 172.16.0.0/12\r\n    if (parts[0] === 172 && parts[1] >= 16 && parts[1] <= 31) return true;\r\n    \r\n    // 192.168.0.0/16\r\n    if (parts[0] === 192 && parts[1] === 168) return true;\r\n    \r\n    // 127.0.0.0/8 (localhost)\r\n    if (parts[0] === 127) return true;\r\n    \r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Validate port number\r\n   * \r\n   * @param port - Port number to validate\r\n   * @returns True if valid port\r\n   */\r\n  private isValidPort(port: number): boolean {\r\n    return Number.isInteger(port) && port >= 1 && port <= 65535;\r\n  }\r\n\r\n  /**\r\n   * Validate private key format\r\n   * \r\n   * @param keyContent - Private key content\r\n   * @returns True if valid format\r\n   */\r\n  private isValidPrivateKeyFormat(keyContent: string): boolean {\r\n    // Check for common private key headers\r\n    const validHeaders = [\r\n      '-----BEGIN RSA PRIVATE KEY-----',\r\n      '-----BEGIN DSA PRIVATE KEY-----',\r\n      '-----BEGIN EC PRIVATE KEY-----',\r\n      '-----BEGIN OPENSSH PRIVATE KEY-----',\r\n      '-----BEGIN PRIVATE KEY-----'\r\n    ];\r\n\r\n    return validHeaders.some(header => keyContent.includes(header));\r\n  }\r\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "b9b2d6f463025ead3672277d358b3e7479c47dce"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_gufsogc7m = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_gufsogc7m();
cov_gufsogc7m().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_gufsogc7m().s[1]++;
exports.TunnelConfigValidator = void 0;
const fs_1 =
/* istanbul ignore next */
(cov_gufsogc7m().s[2]++, require("fs"));
const path_1 =
/* istanbul ignore next */
(cov_gufsogc7m().s[3]++, require("path"));
/**
 * Tunnel Configuration Validator
 * Validates SSH tunnel configuration parameters and ensures system readiness
 */
class TunnelConfigValidator {
  logger;
  constructor(logger) {
    /* istanbul ignore next */
    cov_gufsogc7m().f[0]++;
    cov_gufsogc7m().s[4]++;
    this.logger = logger;
  }
  /**
   * Validate complete tunnel configuration
   * Performs comprehensive validation of all tunnel parameters
   *
   * @param config - Configuration to validate
   * @returns Validation result with errors and warnings
   */
  async validateConfiguration(config) {
    /* istanbul ignore next */
    cov_gufsogc7m().f[1]++;
    const result =
    /* istanbul ignore next */
    (cov_gufsogc7m().s[5]++, {
      isValid: true,
      errors: [],
      warnings: []
    });
    /* istanbul ignore next */
    cov_gufsogc7m().s[6]++;
    try {
      /* istanbul ignore next */
      cov_gufsogc7m().s[7]++;
      // Validate required fields
      this.validateRequiredFields(config, result);
      // Validate Oracle IP address
      /* istanbul ignore next */
      cov_gufsogc7m().s[8]++;
      this.validateOracleIP(config.oracleIP, result);
      // Validate ports
      /* istanbul ignore next */
      cov_gufsogc7m().s[9]++;
      this.validatePorts(config, result);
      // Validate SSH configuration
      /* istanbul ignore next */
      cov_gufsogc7m().s[10]++;
      await this.validateSSHConfiguration(config, result);
      // Validate private key
      /* istanbul ignore next */
      cov_gufsogc7m().s[11]++;
      if (config.privateKeyPath) {
        /* istanbul ignore next */
        cov_gufsogc7m().b[0][0]++;
        cov_gufsogc7m().s[12]++;
        await this.validatePrivateKey(config.privateKeyPath, result);
      } else
      /* istanbul ignore next */
      {
        cov_gufsogc7m().b[0][1]++;
      }
      // Validate timeout settings
      cov_gufsogc7m().s[13]++;
      this.validateTimeoutSettings(config, result);
      // Set final validation status
      /* istanbul ignore next */
      cov_gufsogc7m().s[14]++;
      result.isValid = result.errors.length === 0;
      /* istanbul ignore next */
      cov_gufsogc7m().s[15]++;
      if (result.isValid) {
        /* istanbul ignore next */
        cov_gufsogc7m().b[1][0]++;
        cov_gufsogc7m().s[16]++;
        result.validatedConfig = this.normalizeConfiguration(config);
      } else
      /* istanbul ignore next */
      {
        cov_gufsogc7m().b[1][1]++;
      }
      cov_gufsogc7m().s[17]++;
      this.logger.info('Tunnel configuration validation completed', {
        isValid: result.isValid,
        errorCount: result.errors.length,
        warningCount: result.warnings.length
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_gufsogc7m().s[18]++;
      result.isValid = false;
      /* istanbul ignore next */
      cov_gufsogc7m().s[19]++;
      result.errors.push(`Validation error: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_gufsogc7m().b[2][0]++, error.message) :
      /* istanbul ignore next */
      (cov_gufsogc7m().b[2][1]++, String(error))}`);
      /* istanbul ignore next */
      cov_gufsogc7m().s[20]++;
      this.logger.error('Tunnel configuration validation failed', error);
    }
    /* istanbul ignore next */
    cov_gufsogc7m().s[21]++;
    return result;
  }
  /**
   * Validate required configuration fields
   *
   * @param config - Configuration to validate
   * @param result - Validation result to update
   */
  validateRequiredFields(config, result) {
    /* istanbul ignore next */
    cov_gufsogc7m().f[2]++;
    const requiredFields =
    /* istanbul ignore next */
    (cov_gufsogc7m().s[22]++, ['oracleIP', 'username', 'privateKeyPath', 'localPort', 'remotePort']);
    /* istanbul ignore next */
    cov_gufsogc7m().s[23]++;
    for (const field of requiredFields) {
      /* istanbul ignore next */
      cov_gufsogc7m().s[24]++;
      if (!config[field]) {
        /* istanbul ignore next */
        cov_gufsogc7m().b[3][0]++;
        cov_gufsogc7m().s[25]++;
        result.errors.push(`Missing required field: ${field}`);
      } else
      /* istanbul ignore next */
      {
        cov_gufsogc7m().b[3][1]++;
      }
    }
  }
  /**
   * Validate Oracle Free Tier IP address
   *
   * @param oracleIP - IP address to validate
   * @param result - Validation result to update
   */
  validateOracleIP(oracleIP, result) {
    /* istanbul ignore next */
    cov_gufsogc7m().f[3]++;
    cov_gufsogc7m().s[26]++;
    if (!oracleIP) {
      /* istanbul ignore next */
      cov_gufsogc7m().b[4][0]++;
      cov_gufsogc7m().s[27]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_gufsogc7m().b[4][1]++;
    }
    // Validate IP format
    const ipRegex =
    /* istanbul ignore next */
    (cov_gufsogc7m().s[28]++, /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/);
    /* istanbul ignore next */
    cov_gufsogc7m().s[29]++;
    if (!ipRegex.test(oracleIP)) {
      /* istanbul ignore next */
      cov_gufsogc7m().b[5][0]++;
      cov_gufsogc7m().s[30]++;
      result.errors.push(`Invalid IP address format: ${oracleIP}`);
      /* istanbul ignore next */
      cov_gufsogc7m().s[31]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_gufsogc7m().b[5][1]++;
    }
    // Check if it's the expected Oracle Free Tier IP
    const expectedOracleIP =
    /* istanbul ignore next */
    (cov_gufsogc7m().s[32]++, '168.138.104.117');
    /* istanbul ignore next */
    cov_gufsogc7m().s[33]++;
    if (oracleIP !== expectedOracleIP) {
      /* istanbul ignore next */
      cov_gufsogc7m().b[6][0]++;
      cov_gufsogc7m().s[34]++;
      result.warnings.push(`IP address ${oracleIP} differs from expected Oracle Free Tier IP: ${expectedOracleIP}`);
    } else
    /* istanbul ignore next */
    {
      cov_gufsogc7m().b[6][1]++;
    }
    // Validate it's not a private/local IP
    cov_gufsogc7m().s[35]++;
    if (this.isPrivateIP(oracleIP)) {
      /* istanbul ignore next */
      cov_gufsogc7m().b[7][0]++;
      cov_gufsogc7m().s[36]++;
      result.warnings.push(`IP address ${oracleIP} appears to be a private IP address`);
    } else
    /* istanbul ignore next */
    {
      cov_gufsogc7m().b[7][1]++;
    }
  }
  /**
   * Validate port configurations
   *
   * @param config - Configuration to validate
   * @param result - Validation result to update
   */
  validatePorts(config, result) {
    /* istanbul ignore next */
    cov_gufsogc7m().f[4]++;
    cov_gufsogc7m().s[37]++;
    // Validate SSH port
    if (config.sshPort !== undefined) {
      /* istanbul ignore next */
      cov_gufsogc7m().b[8][0]++;
      cov_gufsogc7m().s[38]++;
      if (!this.isValidPort(config.sshPort)) {
        /* istanbul ignore next */
        cov_gufsogc7m().b[9][0]++;
        cov_gufsogc7m().s[39]++;
        result.errors.push(`Invalid SSH port: ${config.sshPort}`);
      } else {
        /* istanbul ignore next */
        cov_gufsogc7m().b[9][1]++;
        cov_gufsogc7m().s[40]++;
        if (config.sshPort !== 22) {
          /* istanbul ignore next */
          cov_gufsogc7m().b[10][0]++;
          cov_gufsogc7m().s[41]++;
          result.warnings.push(`Non-standard SSH port: ${config.sshPort}`);
        } else
        /* istanbul ignore next */
        {
          cov_gufsogc7m().b[10][1]++;
        }
      }
    } else
    /* istanbul ignore next */
    {
      cov_gufsogc7m().b[8][1]++;
    }
    // Validate local port
    cov_gufsogc7m().s[42]++;
    if (config.localPort !== undefined) {
      /* istanbul ignore next */
      cov_gufsogc7m().b[11][0]++;
      cov_gufsogc7m().s[43]++;
      if (!this.isValidPort(config.localPort)) {
        /* istanbul ignore next */
        cov_gufsogc7m().b[12][0]++;
        cov_gufsogc7m().s[44]++;
        result.errors.push(`Invalid local port: ${config.localPort}`);
      } else {
        /* istanbul ignore next */
        cov_gufsogc7m().b[12][1]++;
        cov_gufsogc7m().s[45]++;
        if (config.localPort < 1024) {
          /* istanbul ignore next */
          cov_gufsogc7m().b[13][0]++;
          cov_gufsogc7m().s[46]++;
          result.warnings.push(`Local port ${config.localPort} requires elevated privileges`);
        } else
        /* istanbul ignore next */
        {
          cov_gufsogc7m().b[13][1]++;
        }
      }
    } else
    /* istanbul ignore next */
    {
      cov_gufsogc7m().b[11][1]++;
    }
    // Validate remote port
    cov_gufsogc7m().s[47]++;
    if (config.remotePort !== undefined) {
      /* istanbul ignore next */
      cov_gufsogc7m().b[14][0]++;
      cov_gufsogc7m().s[48]++;
      if (!this.isValidPort(config.remotePort)) {
        /* istanbul ignore next */
        cov_gufsogc7m().b[15][0]++;
        cov_gufsogc7m().s[49]++;
        result.errors.push(`Invalid remote port: ${config.remotePort}`);
      } else
      /* istanbul ignore next */
      {
        cov_gufsogc7m().b[15][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_gufsogc7m().b[14][1]++;
    }
    // Check for port conflicts
    cov_gufsogc7m().s[50]++;
    if (
    /* istanbul ignore next */
    (cov_gufsogc7m().b[17][0]++, config.localPort) &&
    /* istanbul ignore next */
    (cov_gufsogc7m().b[17][1]++, config.remotePort) &&
    /* istanbul ignore next */
    (cov_gufsogc7m().b[17][2]++, config.localPort === config.remotePort)) {
      /* istanbul ignore next */
      cov_gufsogc7m().b[16][0]++;
      cov_gufsogc7m().s[51]++;
      result.warnings.push('Local and remote ports are the same, ensure this is intentional');
    } else
    /* istanbul ignore next */
    {
      cov_gufsogc7m().b[16][1]++;
    }
  }
  /**
   * Validate SSH configuration parameters
   *
   * @param config - Configuration to validate
   * @param result - Validation result to update
   */
  async validateSSHConfiguration(config, result) {
    /* istanbul ignore next */
    cov_gufsogc7m().f[5]++;
    cov_gufsogc7m().s[52]++;
    // Validate username
    if (config.username) {
      /* istanbul ignore next */
      cov_gufsogc7m().b[18][0]++;
      cov_gufsogc7m().s[53]++;
      if (!/^[a-zA-Z0-9_-]+$/.test(config.username)) {
        /* istanbul ignore next */
        cov_gufsogc7m().b[19][0]++;
        cov_gufsogc7m().s[54]++;
        result.errors.push(`Invalid username format: ${config.username}`);
      } else
      /* istanbul ignore next */
      {
        cov_gufsogc7m().b[19][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_gufsogc7m().b[18][1]++;
    }
    // Check SSH client availability
    cov_gufsogc7m().s[55]++;
    try {
      const {
        spawn
      } =
      /* istanbul ignore next */
      (cov_gufsogc7m().s[56]++, await import('child_process'));
      const sshCheck =
      /* istanbul ignore next */
      (cov_gufsogc7m().s[57]++, spawn('ssh', ['-V'], {
        stdio: 'pipe'
      }));
      /* istanbul ignore next */
      cov_gufsogc7m().s[58]++;
      await new Promise((resolve, reject) => {
        /* istanbul ignore next */
        cov_gufsogc7m().f[6]++;
        const timeout =
        /* istanbul ignore next */
        (cov_gufsogc7m().s[59]++, setTimeout(() => {
          /* istanbul ignore next */
          cov_gufsogc7m().f[7]++;
          cov_gufsogc7m().s[60]++;
          sshCheck.kill();
          /* istanbul ignore next */
          cov_gufsogc7m().s[61]++;
          reject(new Error('SSH client check timeout'));
        }, 5000));
        /* istanbul ignore next */
        cov_gufsogc7m().s[62]++;
        sshCheck.on('exit', code => {
          /* istanbul ignore next */
          cov_gufsogc7m().f[8]++;
          cov_gufsogc7m().s[63]++;
          clearTimeout(timeout);
          /* istanbul ignore next */
          cov_gufsogc7m().s[64]++;
          if (
          /* istanbul ignore next */
          (cov_gufsogc7m().b[21][0]++, code === 0) ||
          /* istanbul ignore next */
          (cov_gufsogc7m().b[21][1]++, code === null)) {
            /* istanbul ignore next */
            cov_gufsogc7m().b[20][0]++;
            cov_gufsogc7m().s[65]++;
            resolve();
          } else {
            /* istanbul ignore next */
            cov_gufsogc7m().b[20][1]++;
            cov_gufsogc7m().s[66]++;
            reject(new Error(`SSH client check failed with code: ${code}`));
          }
        });
        /* istanbul ignore next */
        cov_gufsogc7m().s[67]++;
        sshCheck.on('error', error => {
          /* istanbul ignore next */
          cov_gufsogc7m().f[9]++;
          cov_gufsogc7m().s[68]++;
          clearTimeout(timeout);
          /* istanbul ignore next */
          cov_gufsogc7m().s[69]++;
          reject(error);
        });
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_gufsogc7m().s[70]++;
      result.warnings.push(`SSH client availability check failed: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_gufsogc7m().b[22][0]++, error.message) :
      /* istanbul ignore next */
      (cov_gufsogc7m().b[22][1]++, String(error))}`);
    }
  }
  /**
   * Validate private key file
   *
   * @param privateKeyPath - Path to private key file
   * @param result - Validation result to update
   */
  async validatePrivateKey(privateKeyPath, result) {
    /* istanbul ignore next */
    cov_gufsogc7m().f[10]++;
    cov_gufsogc7m().s[71]++;
    try {
      // Resolve absolute path
      const absolutePath =
      /* istanbul ignore next */
      (cov_gufsogc7m().s[72]++, (0, path_1.resolve)(privateKeyPath));
      // Check if file exists
      const stats =
      /* istanbul ignore next */
      (cov_gufsogc7m().s[73]++, await fs_1.promises.stat(absolutePath));
      /* istanbul ignore next */
      cov_gufsogc7m().s[74]++;
      if (!stats.isFile()) {
        /* istanbul ignore next */
        cov_gufsogc7m().b[23][0]++;
        cov_gufsogc7m().s[75]++;
        result.errors.push(`Private key path is not a file: ${privateKeyPath}`);
        /* istanbul ignore next */
        cov_gufsogc7m().s[76]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_gufsogc7m().b[23][1]++;
      }
      // Check file permissions
      cov_gufsogc7m().s[77]++;
      try {
        /* istanbul ignore next */
        cov_gufsogc7m().s[78]++;
        await fs_1.promises.access(absolutePath, fs_1.promises.constants.R_OK);
      } catch {
        /* istanbul ignore next */
        cov_gufsogc7m().s[79]++;
        result.errors.push(`Private key file is not readable: ${privateKeyPath}`);
        /* istanbul ignore next */
        cov_gufsogc7m().s[80]++;
        return;
      }
      // Check file size (should not be empty)
      /* istanbul ignore next */
      cov_gufsogc7m().s[81]++;
      if (stats.size === 0) {
        /* istanbul ignore next */
        cov_gufsogc7m().b[24][0]++;
        cov_gufsogc7m().s[82]++;
        result.errors.push(`Private key file is empty: ${privateKeyPath}`);
        /* istanbul ignore next */
        cov_gufsogc7m().s[83]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_gufsogc7m().b[24][1]++;
      }
      // Validate key format
      const keyContent =
      /* istanbul ignore next */
      (cov_gufsogc7m().s[84]++, await fs_1.promises.readFile(absolutePath, 'utf8'));
      /* istanbul ignore next */
      cov_gufsogc7m().s[85]++;
      if (!this.isValidPrivateKeyFormat(keyContent)) {
        /* istanbul ignore next */
        cov_gufsogc7m().b[25][0]++;
        cov_gufsogc7m().s[86]++;
        result.errors.push(`Invalid private key format: ${privateKeyPath}`);
        /* istanbul ignore next */
        cov_gufsogc7m().s[87]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_gufsogc7m().b[25][1]++;
      }
      // Check file permissions (Unix-like systems)
      cov_gufsogc7m().s[88]++;
      if (process.platform !== 'win32') {
        /* istanbul ignore next */
        cov_gufsogc7m().b[26][0]++;
        const mode =
        /* istanbul ignore next */
        (cov_gufsogc7m().s[89]++, stats.mode & parseInt('777', 8));
        /* istanbul ignore next */
        cov_gufsogc7m().s[90]++;
        if (mode & parseInt('077', 8)) {
          /* istanbul ignore next */
          cov_gufsogc7m().b[27][0]++;
          cov_gufsogc7m().s[91]++;
          result.warnings.push(`Private key file has overly permissive permissions: ${privateKeyPath}`);
        } else
        /* istanbul ignore next */
        {
          cov_gufsogc7m().b[27][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_gufsogc7m().b[26][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_gufsogc7m().s[92]++;
      result.errors.push(`Private key validation failed: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_gufsogc7m().b[28][0]++, error.message) :
      /* istanbul ignore next */
      (cov_gufsogc7m().b[28][1]++, String(error))}`);
    }
  }
  /**
   * Validate timeout and connection settings
   *
   * @param config - Configuration to validate
   * @param result - Validation result to update
   */
  validateTimeoutSettings(config, result) {
    /* istanbul ignore next */
    cov_gufsogc7m().f[11]++;
    cov_gufsogc7m().s[93]++;
    // Validate connection timeout
    if (config.connectionTimeout !== undefined) {
      /* istanbul ignore next */
      cov_gufsogc7m().b[29][0]++;
      cov_gufsogc7m().s[94]++;
      if (
      /* istanbul ignore next */
      (cov_gufsogc7m().b[31][0]++, config.connectionTimeout < 1) ||
      /* istanbul ignore next */
      (cov_gufsogc7m().b[31][1]++, config.connectionTimeout > 300)) {
        /* istanbul ignore next */
        cov_gufsogc7m().b[30][0]++;
        cov_gufsogc7m().s[95]++;
        result.errors.push(`Connection timeout must be between 1 and 300 seconds: ${config.connectionTimeout}`);
      } else {
        /* istanbul ignore next */
        cov_gufsogc7m().b[30][1]++;
        cov_gufsogc7m().s[96]++;
        if (config.connectionTimeout < 10) {
          /* istanbul ignore next */
          cov_gufsogc7m().b[32][0]++;
          cov_gufsogc7m().s[97]++;
          result.warnings.push(`Connection timeout is very short: ${config.connectionTimeout}s`);
        } else
        /* istanbul ignore next */
        {
          cov_gufsogc7m().b[32][1]++;
        }
      }
    } else
    /* istanbul ignore next */
    {
      cov_gufsogc7m().b[29][1]++;
    }
    // Validate server alive interval
    cov_gufsogc7m().s[98]++;
    if (config.serverAliveInterval !== undefined) {
      /* istanbul ignore next */
      cov_gufsogc7m().b[33][0]++;
      cov_gufsogc7m().s[99]++;
      if (
      /* istanbul ignore next */
      (cov_gufsogc7m().b[35][0]++, config.serverAliveInterval < 1) ||
      /* istanbul ignore next */
      (cov_gufsogc7m().b[35][1]++, config.serverAliveInterval > 3600)) {
        /* istanbul ignore next */
        cov_gufsogc7m().b[34][0]++;
        cov_gufsogc7m().s[100]++;
        result.errors.push(`Server alive interval must be between 1 and 3600 seconds: ${config.serverAliveInterval}`);
      } else
      /* istanbul ignore next */
      {
        cov_gufsogc7m().b[34][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_gufsogc7m().b[33][1]++;
    }
    // Validate server alive count max
    cov_gufsogc7m().s[101]++;
    if (config.serverAliveCountMax !== undefined) {
      /* istanbul ignore next */
      cov_gufsogc7m().b[36][0]++;
      cov_gufsogc7m().s[102]++;
      if (
      /* istanbul ignore next */
      (cov_gufsogc7m().b[38][0]++, config.serverAliveCountMax < 1) ||
      /* istanbul ignore next */
      (cov_gufsogc7m().b[38][1]++, config.serverAliveCountMax > 10)) {
        /* istanbul ignore next */
        cov_gufsogc7m().b[37][0]++;
        cov_gufsogc7m().s[103]++;
        result.errors.push(`Server alive count max must be between 1 and 10: ${config.serverAliveCountMax}`);
      } else
      /* istanbul ignore next */
      {
        cov_gufsogc7m().b[37][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_gufsogc7m().b[36][1]++;
    }
  }
  /**
   * Normalize configuration with defaults
   *
   * @param config - Input configuration
   * @returns Normalized configuration
   */
  normalizeConfiguration(config) {
    /* istanbul ignore next */
    cov_gufsogc7m().f[12]++;
    cov_gufsogc7m().s[104]++;
    return {
      oracleIP:
      /* istanbul ignore next */
      (cov_gufsogc7m().b[39][0]++, config.oracleIP) ||
      /* istanbul ignore next */
      (cov_gufsogc7m().b[39][1]++, '168.138.104.117'),
      sshPort:
      /* istanbul ignore next */
      (cov_gufsogc7m().b[40][0]++, config.sshPort) ||
      /* istanbul ignore next */
      (cov_gufsogc7m().b[40][1]++, 22),
      username: config.username,
      privateKeyPath: config.privateKeyPath,
      localPort: config.localPort,
      remotePort: config.remotePort,
      keepAlive: config.keepAlive !== false,
      // Default to true
      compression: config.compression !== false,
      // Default to true
      connectionTimeout:
      /* istanbul ignore next */
      (cov_gufsogc7m().b[41][0]++, config.connectionTimeout) ||
      /* istanbul ignore next */
      (cov_gufsogc7m().b[41][1]++, 30),
      serverAliveInterval:
      /* istanbul ignore next */
      (cov_gufsogc7m().b[42][0]++, config.serverAliveInterval) ||
      /* istanbul ignore next */
      (cov_gufsogc7m().b[42][1]++, 60),
      serverAliveCountMax:
      /* istanbul ignore next */
      (cov_gufsogc7m().b[43][0]++, config.serverAliveCountMax) ||
      /* istanbul ignore next */
      (cov_gufsogc7m().b[43][1]++, 3)
    };
  }
  /**
   * Check if IP address is private
   *
   * @param ip - IP address to check
   * @returns True if private IP
   */
  isPrivateIP(ip) {
    /* istanbul ignore next */
    cov_gufsogc7m().f[13]++;
    const parts =
    /* istanbul ignore next */
    (cov_gufsogc7m().s[105]++, ip.split('.').map(Number));
    // 10.0.0.0/8
    /* istanbul ignore next */
    cov_gufsogc7m().s[106]++;
    if (parts[0] === 10) {
      /* istanbul ignore next */
      cov_gufsogc7m().b[44][0]++;
      cov_gufsogc7m().s[107]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_gufsogc7m().b[44][1]++;
    }
    // 172.16.0.0/12
    cov_gufsogc7m().s[108]++;
    if (
    /* istanbul ignore next */
    (cov_gufsogc7m().b[46][0]++, parts[0] === 172) &&
    /* istanbul ignore next */
    (cov_gufsogc7m().b[46][1]++, parts[1] >= 16) &&
    /* istanbul ignore next */
    (cov_gufsogc7m().b[46][2]++, parts[1] <= 31)) {
      /* istanbul ignore next */
      cov_gufsogc7m().b[45][0]++;
      cov_gufsogc7m().s[109]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_gufsogc7m().b[45][1]++;
    }
    // 192.168.0.0/16
    cov_gufsogc7m().s[110]++;
    if (
    /* istanbul ignore next */
    (cov_gufsogc7m().b[48][0]++, parts[0] === 192) &&
    /* istanbul ignore next */
    (cov_gufsogc7m().b[48][1]++, parts[1] === 168)) {
      /* istanbul ignore next */
      cov_gufsogc7m().b[47][0]++;
      cov_gufsogc7m().s[111]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_gufsogc7m().b[47][1]++;
    }
    // 127.0.0.0/8 (localhost)
    cov_gufsogc7m().s[112]++;
    if (parts[0] === 127) {
      /* istanbul ignore next */
      cov_gufsogc7m().b[49][0]++;
      cov_gufsogc7m().s[113]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_gufsogc7m().b[49][1]++;
    }
    cov_gufsogc7m().s[114]++;
    return false;
  }
  /**
   * Validate port number
   *
   * @param port - Port number to validate
   * @returns True if valid port
   */
  isValidPort(port) {
    /* istanbul ignore next */
    cov_gufsogc7m().f[14]++;
    cov_gufsogc7m().s[115]++;
    return /* istanbul ignore next */(cov_gufsogc7m().b[50][0]++, Number.isInteger(port)) &&
    /* istanbul ignore next */
    (cov_gufsogc7m().b[50][1]++, port >= 1) &&
    /* istanbul ignore next */
    (cov_gufsogc7m().b[50][2]++, port <= 65535);
  }
  /**
   * Validate private key format
   *
   * @param keyContent - Private key content
   * @returns True if valid format
   */
  isValidPrivateKeyFormat(keyContent) {
    /* istanbul ignore next */
    cov_gufsogc7m().f[15]++;
    // Check for common private key headers
    const validHeaders =
    /* istanbul ignore next */
    (cov_gufsogc7m().s[116]++, ['-----BEGIN RSA PRIVATE KEY-----', '-----BEGIN DSA PRIVATE KEY-----', '-----BEGIN EC PRIVATE KEY-----', '-----BEGIN OPENSSH PRIVATE KEY-----', '-----BEGIN PRIVATE KEY-----']);
    /* istanbul ignore next */
    cov_gufsogc7m().s[117]++;
    return validHeaders.some(header => {
      /* istanbul ignore next */
      cov_gufsogc7m().f[16]++;
      cov_gufsogc7m().s[118]++;
      return keyContent.includes(header);
    });
  }
}
/* istanbul ignore next */
cov_gufsogc7m().s[119]++;
exports.TunnelConfigValidator = TunnelConfigValidator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,