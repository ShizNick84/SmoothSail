{"version":3,"names":["cov_2r2y6mo8b2","actualCoverage","s","events_1","require","ssh_tunnel_manager_1","TunnelAutoReconnect","EventEmitter","logger","tunnelManager","healthMonitor","stateTracker","config","reconnectionStats","reconnectionTimers","reconnectionAttempts","isEnabled","constructor","f","Map","enabled","initialRetryDelay","maxRetryDelay","backoffMultiplier","maxRetryAttempts","resetRetryCountAfter","healthThreshold","failureThreshold","jitterFactor","setupEventListeners","info","enable","b","warn","checkExistingConnections","emit","disable","cancelAllReconnectionAttempts","getReconnectionStats","connectionId","get","getAllReconnectionStats","getReconnectionHistory","limit","attempts","slice","forceReconnection","reason","connection","getConnection","Error","cancelReconnectionAttempt","performReconnection","updateConfig","newConfig","on","handleConnectionLoss","error","message","metrics","handleHealthIssue","handleSuccessfulConnection","stateChangeEvent","handleConnectionFailure","connections","getAllConnections","initializeReconnectionStats","id","state","TunnelState","FAILED","DISCONNECTED","healthMetrics","getHealthMetrics","isHealthy","scheduleReconnection","healthScore","threshold","consecutiveFailures","failures","stats","isReconnecting","successfulAttempts","setTimeout","currentRetryCount","maxAttempts","baseDelay","Math","min","pow","jitter","random","retryDelay","max","attempt","delay","timer","String","set","attemptNumber","startTime","Date","now","timestamp","success","duration","CONNECTED","disconnectTunnel","Promise","resolve","establishTunnel","totalAttempts","lastReconnectionAttempt","totalTime","filter","a","reduce","sum","averageReconnectionTime","failedAttempts","storeReconnectionAttempt","clearTimeout","delete","debug","entries","clear","has","longestDowntime","shortestDowntime","Infinity","push","maxHistorySize","length","splice","cleanup","exports"],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\tunnel-auto-reconnect.ts"],"sourcesContent":["import { EventEmitter } from 'events';\r\nimport { Logger } from '../core/logging/logger';\r\nimport { SSHTunnelManager, TunnelConnection, TunnelState } from './ssh-tunnel-manager';\r\nimport { TunnelHealthMonitor, TunnelHealthMetrics } from './tunnel-health-monitor';\r\nimport { TunnelStateTracker } from './tunnel-state-tracker';\r\n\r\n/**\r\n * Reconnection strategy configuration\r\n */\r\nexport interface ReconnectionConfig {\r\n  /** Enable automatic reconnection */\r\n  enabled: boolean;\r\n  /** Initial retry delay in milliseconds */\r\n  initialRetryDelay: number;\r\n  /** Maximum retry delay in milliseconds */\r\n  maxRetryDelay: number;\r\n  /** Exponential backoff multiplier */\r\n  backoffMultiplier: number;\r\n  /** Maximum number of retry attempts */\r\n  maxRetryAttempts: number;\r\n  /** Reset retry count after successful connection duration (ms) */\r\n  resetRetryCountAfter: number;\r\n  /** Health check threshold for triggering reconnection */\r\n  healthThreshold: number;\r\n  /** Consecutive failure threshold for triggering reconnection */\r\n  failureThreshold: number;\r\n  /** Jitter factor for retry delays (0-1) */\r\n  jitterFactor: number;\r\n}\r\n\r\n/**\r\n * Reconnection attempt information\r\n */\r\nexport interface ReconnectionAttempt {\r\n  connectionId: string;\r\n  attemptNumber: number;\r\n  timestamp: Date;\r\n  reason: string;\r\n  success: boolean;\r\n  error?: Error;\r\n  duration: number;\r\n  nextRetryDelay?: number;\r\n}\r\n\r\n/**\r\n * Reconnection statistics\r\n */\r\nexport interface ReconnectionStats {\r\n  connectionId: string;\r\n  totalAttempts: number;\r\n  successfulAttempts: number;\r\n  failedAttempts: number;\r\n  averageReconnectionTime: number;\r\n  longestDowntime: number;\r\n  shortestDowntime: number;\r\n  lastReconnectionAttempt: Date | null;\r\n  currentRetryCount: number;\r\n  isReconnecting: boolean;\r\n}\r\n\r\n/**\r\n * Tunnel Auto-Reconnection Manager\r\n * Implements intelligent auto-reconnection with exponential backoff and failure detection\r\n */\r\nexport class TunnelAutoReconnect extends EventEmitter {\r\n  private logger: Logger;\r\n  private tunnelManager: SSHTunnelManager;\r\n  private healthMonitor: TunnelHealthMonitor;\r\n  private stateTracker: TunnelStateTracker;\r\n  private config: ReconnectionConfig;\r\n  private reconnectionStats: Map<string, ReconnectionStats>;\r\n  private reconnectionTimers: Map<string, NodeJS.Timeout>;\r\n  private reconnectionAttempts: Map<string, ReconnectionAttempt[]>;\r\n  private isEnabled: boolean;\r\n\r\n  constructor(\r\n    logger: Logger,\r\n    tunnelManager: SSHTunnelManager,\r\n    healthMonitor: TunnelHealthMonitor,\r\n    stateTracker: TunnelStateTracker,\r\n    config?: Partial<ReconnectionConfig>\r\n  ) {\r\n    super();\r\n    this.logger = logger;\r\n    this.tunnelManager = tunnelManager;\r\n    this.healthMonitor = healthMonitor;\r\n    this.stateTracker = stateTracker;\r\n    this.reconnectionStats = new Map();\r\n    this.reconnectionTimers = new Map();\r\n    this.reconnectionAttempts = new Map();\r\n    this.isEnabled = false;\r\n\r\n    // Default configuration\r\n    this.config = {\r\n      enabled: true,\r\n      initialRetryDelay: 5000, // 5 seconds\r\n      maxRetryDelay: 300000, // 5 minutes\r\n      backoffMultiplier: 2,\r\n      maxRetryAttempts: 10,\r\n      resetRetryCountAfter: 300000, // 5 minutes\r\n      healthThreshold: 30,\r\n      failureThreshold: 3,\r\n      jitterFactor: 0.1,\r\n      ...config\r\n    };\r\n\r\n    this.setupEventListeners();\r\n    this.logger.info('Tunnel Auto-Reconnection Manager initialized', this.config);\r\n  }\r\n\r\n  /**\r\n   * Enable auto-reconnection\r\n   */\r\n  enable(): void {\r\n    if (this.isEnabled) {\r\n      this.logger.warn('Auto-reconnection is already enabled');\r\n      return;\r\n    }\r\n\r\n    this.isEnabled = true;\r\n    this.logger.info('Auto-reconnection enabled');\r\n\r\n    // Check existing connections for health issues\r\n    this.checkExistingConnections();\r\n\r\n    this.emit('autoReconnectEnabled');\r\n  }\r\n\r\n  /**\r\n   * Disable auto-reconnection\r\n   */\r\n  disable(): void {\r\n    if (!this.isEnabled) {\r\n      this.logger.warn('Auto-reconnection is already disabled');\r\n      return;\r\n    }\r\n\r\n    this.isEnabled = false;\r\n    this.logger.info('Auto-reconnection disabled');\r\n\r\n    // Cancel all pending reconnection attempts\r\n    this.cancelAllReconnectionAttempts();\r\n\r\n    this.emit('autoReconnectDisabled');\r\n  }\r\n\r\n  /**\r\n   * Get reconnection statistics for a connection\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @returns Reconnection statistics or undefined\r\n   */\r\n  getReconnectionStats(connectionId: string): ReconnectionStats | undefined {\r\n    return this.reconnectionStats.get(connectionId);\r\n  }\r\n\r\n  /**\r\n   * Get all reconnection statistics\r\n   * \r\n   * @returns Map of all reconnection statistics\r\n   */\r\n  getAllReconnectionStats(): Map<string, ReconnectionStats> {\r\n    return new Map(this.reconnectionStats);\r\n  }\r\n\r\n  /**\r\n   * Get reconnection attempt history for a connection\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @param limit - Maximum number of attempts to return\r\n   * @returns Array of reconnection attempts\r\n   */\r\n  getReconnectionHistory(connectionId: string, limit?: number): ReconnectionAttempt[] {\r\n    const attempts = this.reconnectionAttempts.get(connectionId) || [];\r\n    return limit ? attempts.slice(-limit) : [...attempts];\r\n  }\r\n\r\n  /**\r\n   * Force reconnection for a specific connection\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @param reason - Reason for forced reconnection\r\n   * @returns Promise resolving when reconnection is complete\r\n   */\r\n  async forceReconnection(connectionId: string, reason: string = 'Manual reconnection'): Promise<void> {\r\n    const connection = this.tunnelManager.getConnection(connectionId);\r\n    if (!connection) {\r\n      throw new Error(`Connection not found: ${connectionId}`);\r\n    }\r\n\r\n    this.logger.info(`Forcing reconnection for connection: ${connectionId}`, { reason });\r\n\r\n    // Cancel any pending reconnection\r\n    this.cancelReconnectionAttempt(connectionId);\r\n\r\n    // Perform immediate reconnection\r\n    await this.performReconnection(connectionId, reason, 0);\r\n  }\r\n\r\n  /**\r\n   * Update reconnection configuration\r\n   * \r\n   * @param newConfig - New configuration parameters\r\n   */\r\n  updateConfig(newConfig: Partial<ReconnectionConfig>): void {\r\n    this.config = { ...this.config, ...newConfig };\r\n    this.logger.info('Auto-reconnection configuration updated', this.config);\r\n    this.emit('configUpdated', this.config);\r\n  }\r\n\r\n  /**\r\n   * Setup event listeners for tunnel events\r\n   */\r\n  private setupEventListeners(): void {\r\n    // Listen for tunnel disconnections\r\n    this.tunnelManager.on('tunnelDisconnected', (connection) => {\r\n      if (this.isEnabled) {\r\n        this.handleConnectionLoss(connection, 'Tunnel disconnected');\r\n      }\r\n    });\r\n\r\n    // Listen for tunnel errors\r\n    this.tunnelManager.on('tunnelError', (connection, error) => {\r\n      if (this.isEnabled) {\r\n        this.handleConnectionLoss(connection, `Tunnel error: ${error.message}`);\r\n      }\r\n    });\r\n\r\n    // Listen for health issues\r\n    this.healthMonitor.on('connectionUnhealthy', (connection, metrics) => {\r\n      if (this.isEnabled) {\r\n        this.handleHealthIssue(connection, metrics);\r\n      }\r\n    });\r\n\r\n    // Listen for successful connections to reset retry counts\r\n    this.tunnelManager.on('tunnelConnected', (connection) => {\r\n      this.handleSuccessfulConnection(connection);\r\n    });\r\n\r\n    // Listen for state changes\r\n    this.stateTracker.on('connectionFailed', (connection, stateChangeEvent) => {\r\n      if (this.isEnabled) {\r\n        this.handleConnectionFailure(connection, 'Connection failed');\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Check existing connections for health issues\r\n   */\r\n  private checkExistingConnections(): void {\r\n    const connections = this.tunnelManager.getAllConnections();\r\n    \r\n    for (const connection of connections) {\r\n      // Initialize stats if not exists\r\n      this.initializeReconnectionStats(connection.id);\r\n\r\n      // Check if connection needs reconnection\r\n      if (connection.state === TunnelState.FAILED || connection.state === TunnelState.DISCONNECTED) {\r\n        this.handleConnectionLoss(connection, 'Connection check on enable');\r\n      } else {\r\n        // Check health metrics\r\n        const healthMetrics = this.healthMonitor.getHealthMetrics(connection.id);\r\n        if (healthMetrics && !healthMetrics.isHealthy) {\r\n          this.handleHealthIssue(connection, healthMetrics);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle connection loss event\r\n   * \r\n   * @param connection - Lost connection\r\n   * @param reason - Reason for connection loss\r\n   */\r\n  private handleConnectionLoss(connection: TunnelConnection, reason: string): void {\r\n    if (!this.config.enabled) return;\r\n\r\n    this.logger.warn(`Connection lost: ${connection.id}`, { reason });\r\n\r\n    // Initialize stats if not exists\r\n    this.initializeReconnectionStats(connection.id);\r\n\r\n    // Schedule reconnection\r\n    this.scheduleReconnection(connection.id, reason);\r\n  }\r\n\r\n  /**\r\n   * Handle health issue event\r\n   * \r\n   * @param connection - Connection with health issues\r\n   * @param metrics - Health metrics\r\n   */\r\n  private handleHealthIssue(connection: TunnelConnection, metrics: TunnelHealthMetrics): void {\r\n    if (!this.config.enabled) return;\r\n\r\n    // Check if health is below threshold\r\n    if (metrics.healthScore < this.config.healthThreshold) {\r\n      this.logger.warn(`Connection health below threshold: ${connection.id}`, {\r\n        healthScore: metrics.healthScore,\r\n        threshold: this.config.healthThreshold\r\n      });\r\n\r\n      this.scheduleReconnection(connection.id, `Health score below threshold: ${metrics.healthScore}`);\r\n    }\r\n\r\n    // Check for consecutive failures\r\n    if (metrics.consecutiveFailures >= this.config.failureThreshold) {\r\n      this.logger.warn(`Connection has too many consecutive failures: ${connection.id}`, {\r\n        failures: metrics.consecutiveFailures,\r\n        threshold: this.config.failureThreshold\r\n      });\r\n\r\n      this.scheduleReconnection(connection.id, `Too many consecutive failures: ${metrics.consecutiveFailures}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle connection failure event\r\n   * \r\n   * @param connection - Failed connection\r\n   * @param reason - Reason for failure\r\n   */\r\n  private handleConnectionFailure(connection: TunnelConnection, reason: string): void {\r\n    if (!this.config.enabled) return;\r\n\r\n    this.logger.error(`Connection failed: ${connection.id}`, { reason });\r\n    this.scheduleReconnection(connection.id, reason);\r\n  }\r\n\r\n  /**\r\n   * Handle successful connection event\r\n   * \r\n   * @param connection - Successfully connected tunnel\r\n   */\r\n  private handleSuccessfulConnection(connection: TunnelConnection): void {\r\n    const stats = this.reconnectionStats.get(connection.id);\r\n    if (!stats) return;\r\n\r\n    // Cancel any pending reconnection\r\n    this.cancelReconnectionAttempt(connection.id);\r\n\r\n    // Update stats\r\n    stats.isReconnecting = false;\r\n    stats.successfulAttempts++;\r\n\r\n    // Reset retry count after successful connection\r\n    setTimeout(() => {\r\n      if (stats.currentRetryCount > 0) {\r\n        this.logger.info(`Resetting retry count for connection: ${connection.id}`);\r\n        stats.currentRetryCount = 0;\r\n      }\r\n    }, this.config.resetRetryCountAfter);\r\n\r\n    this.logger.info(`Connection successfully established: ${connection.id}`);\r\n    this.emit('reconnectionSuccessful', connection, stats);\r\n  }\r\n\r\n  /**\r\n   * Schedule reconnection attempt\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @param reason - Reason for reconnection\r\n   */\r\n  private scheduleReconnection(connectionId: string, reason: string): void {\r\n    // Cancel any existing reconnection timer\r\n    this.cancelReconnectionAttempt(connectionId);\r\n\r\n    const stats = this.reconnectionStats.get(connectionId);\r\n    if (!stats) {\r\n      this.initializeReconnectionStats(connectionId);\r\n      return this.scheduleReconnection(connectionId, reason);\r\n    }\r\n\r\n    // Check if max attempts reached\r\n    if (stats.currentRetryCount >= this.config.maxRetryAttempts) {\r\n      this.logger.error(`Max reconnection attempts reached for connection: ${connectionId}`, {\r\n        attempts: stats.currentRetryCount,\r\n        maxAttempts: this.config.maxRetryAttempts\r\n      });\r\n      \r\n      stats.isReconnecting = false;\r\n      this.emit('reconnectionFailed', connectionId, stats, 'Max attempts reached');\r\n      return;\r\n    }\r\n\r\n    // Calculate retry delay with exponential backoff and jitter\r\n    const baseDelay = Math.min(\r\n      this.config.initialRetryDelay * Math.pow(this.config.backoffMultiplier, stats.currentRetryCount),\r\n      this.config.maxRetryDelay\r\n    );\r\n\r\n    // Add jitter to prevent thundering herd\r\n    const jitter = baseDelay * this.config.jitterFactor * (Math.random() - 0.5);\r\n    const retryDelay = Math.max(1000, baseDelay + jitter); // Minimum 1 second\r\n\r\n    this.logger.info(`Scheduling reconnection for connection: ${connectionId}`, {\r\n      reason,\r\n      attempt: stats.currentRetryCount + 1,\r\n      delay: `${retryDelay}ms`\r\n    });\r\n\r\n    // Update stats\r\n    stats.isReconnecting = true;\r\n    stats.currentRetryCount++;\r\n\r\n    // Schedule reconnection\r\n    const timer = setTimeout(async () => {\r\n      try {\r\n        await this.performReconnection(connectionId, reason, stats.currentRetryCount);\r\n      } catch (error) {\r\n        this.logger.error(`Reconnection attempt failed: ${connectionId}`, error);\r\n        \r\n        // Schedule next attempt if not at max\r\n        if (stats.currentRetryCount < this.config.maxRetryAttempts) {\r\n          this.scheduleReconnection(connectionId, `Retry after failure: ${error instanceof Error ? error.message : String(error)}`);\r\n        } else {\r\n          stats.isReconnecting = false;\r\n          this.emit('reconnectionFailed', connectionId, stats, 'All attempts exhausted');\r\n        }\r\n      }\r\n    }, retryDelay);\r\n\r\n    this.reconnectionTimers.set(connectionId, timer);\r\n    this.emit('reconnectionScheduled', connectionId, stats, retryDelay);\r\n  }\r\n\r\n  /**\r\n   * Perform actual reconnection attempt\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @param reason - Reason for reconnection\r\n   * @param attemptNumber - Current attempt number\r\n   */\r\n  private async performReconnection(connectionId: string, reason: string, attemptNumber: number): Promise<void> {\r\n    const connection = this.tunnelManager.getConnection(connectionId);\r\n    if (!connection) {\r\n      throw new Error(`Connection not found: ${connectionId}`);\r\n    }\r\n\r\n    const stats = this.reconnectionStats.get(connectionId);\r\n    if (!stats) {\r\n      throw new Error(`Reconnection stats not found: ${connectionId}`);\r\n    }\r\n\r\n    const startTime = Date.now();\r\n    const attempt: ReconnectionAttempt = {\r\n      connectionId,\r\n      attemptNumber,\r\n      timestamp: new Date(),\r\n      reason,\r\n      success: false,\r\n      duration: 0\r\n    };\r\n\r\n    try {\r\n      this.logger.info(`Attempting reconnection: ${connectionId}`, {\r\n        attempt: attemptNumber,\r\n        reason\r\n      });\r\n\r\n      // Disconnect existing connection if still connected\r\n      if (connection.state === TunnelState.CONNECTED) {\r\n        await this.tunnelManager.disconnectTunnel(connectionId);\r\n      }\r\n\r\n      // Wait a moment before reconnecting\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n\r\n      // Attempt to establish new connection\r\n      await this.tunnelManager.establishTunnel(connectionId);\r\n\r\n      // Success\r\n      attempt.success = true;\r\n      attempt.duration = Date.now() - startTime;\r\n\r\n      // Update stats\r\n      stats.totalAttempts++;\r\n      stats.successfulAttempts++;\r\n      stats.lastReconnectionAttempt = new Date();\r\n      stats.isReconnecting = false;\r\n\r\n      // Calculate average reconnection time\r\n      if (stats.successfulAttempts > 0) {\r\n        const totalTime = this.getReconnectionHistory(connectionId)\r\n          .filter(a => a.success)\r\n          .reduce((sum, a) => sum + a.duration, 0);\r\n        stats.averageReconnectionTime = totalTime / stats.successfulAttempts;\r\n      }\r\n\r\n      this.logger.info(`Reconnection successful: ${connectionId}`, {\r\n        attempt: attemptNumber,\r\n        duration: `${attempt.duration}ms`\r\n      });\r\n\r\n      this.emit('reconnectionAttemptSuccessful', connection, attempt, stats);\r\n\r\n    } catch (error) {\r\n      // Failure\r\n      attempt.success = false;\r\n      attempt.error = error instanceof Error ? error : new Error(String(error));\r\n      attempt.duration = Date.now() - startTime;\r\n\r\n      // Update stats\r\n      stats.totalAttempts++;\r\n      stats.failedAttempts++;\r\n      stats.lastReconnectionAttempt = new Date();\r\n\r\n      this.logger.error(`Reconnection attempt failed: ${connectionId}`, {\r\n        attempt: attemptNumber,\r\n        error: attempt.error.message,\r\n        duration: `${attempt.duration}ms`\r\n      });\r\n\r\n      this.emit('reconnectionAttemptFailed', connection, attempt, stats);\r\n      throw attempt.error;\r\n\r\n    } finally {\r\n      // Store attempt in history\r\n      this.storeReconnectionAttempt(connectionId, attempt);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cancel reconnection attempt for a connection\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   */\r\n  private cancelReconnectionAttempt(connectionId: string): void {\r\n    const timer = this.reconnectionTimers.get(connectionId);\r\n    if (timer) {\r\n      clearTimeout(timer);\r\n      this.reconnectionTimers.delete(connectionId);\r\n      \r\n      const stats = this.reconnectionStats.get(connectionId);\r\n      if (stats) {\r\n        stats.isReconnecting = false;\r\n      }\r\n\r\n      this.logger.debug(`Cancelled reconnection attempt for connection: ${connectionId}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cancel all pending reconnection attempts\r\n   */\r\n  private cancelAllReconnectionAttempts(): void {\r\n    for (const [connectionId, timer] of this.reconnectionTimers.entries()) {\r\n      clearTimeout(timer);\r\n      \r\n      const stats = this.reconnectionStats.get(connectionId);\r\n      if (stats) {\r\n        stats.isReconnecting = false;\r\n      }\r\n    }\r\n\r\n    this.reconnectionTimers.clear();\r\n    this.logger.info('Cancelled all pending reconnection attempts');\r\n  }\r\n\r\n  /**\r\n   * Initialize reconnection statistics for a connection\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   */\r\n  private initializeReconnectionStats(connectionId: string): void {\r\n    if (this.reconnectionStats.has(connectionId)) {\r\n      return;\r\n    }\r\n\r\n    const stats: ReconnectionStats = {\r\n      connectionId,\r\n      totalAttempts: 0,\r\n      successfulAttempts: 0,\r\n      failedAttempts: 0,\r\n      averageReconnectionTime: 0,\r\n      longestDowntime: 0,\r\n      shortestDowntime: Infinity,\r\n      lastReconnectionAttempt: null,\r\n      currentRetryCount: 0,\r\n      isReconnecting: false\r\n    };\r\n\r\n    this.reconnectionStats.set(connectionId, stats);\r\n    this.reconnectionAttempts.set(connectionId, []);\r\n  }\r\n\r\n  /**\r\n   * Store reconnection attempt in history\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @param attempt - Reconnection attempt to store\r\n   */\r\n  private storeReconnectionAttempt(connectionId: string, attempt: ReconnectionAttempt): void {\r\n    if (!this.reconnectionAttempts.has(connectionId)) {\r\n      this.reconnectionAttempts.set(connectionId, []);\r\n    }\r\n\r\n    const attempts = this.reconnectionAttempts.get(connectionId)!;\r\n    attempts.push(attempt);\r\n\r\n    // Limit history size\r\n    const maxHistorySize = 100;\r\n    if (attempts.length > maxHistorySize) {\r\n      attempts.splice(0, attempts.length - maxHistorySize);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cleanup auto-reconnection resources\r\n   */\r\n  cleanup(): void {\r\n    this.disable();\r\n    this.reconnectionStats.clear();\r\n    this.reconnectionAttempts.clear();\r\n    this.logger.info('Tunnel auto-reconnection cleanup completed');\r\n  }\r\n}\r\n"],"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","ignoreList":[]}