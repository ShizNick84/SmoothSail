fe3b22a681db03b065be0e2b65db2f6a
"use strict";

/* istanbul ignore next */
function cov_2r2y6mo8b2() {
  var path = "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\tunnel-auto-reconnect.ts";
  var hash = "0779f2c967f0b42b9705ace34f94d9fb1253045b";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\tunnel-auto-reconnect.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 37
        }
      },
      "2": {
        start: {
          line: 4,
          column: 17
        },
        end: {
          line: 4,
          column: 34
        }
      },
      "3": {
        start: {
          line: 5,
          column: 29
        },
        end: {
          line: 5,
          column: 60
        }
      },
      "4": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 16
        }
      },
      "5": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 29
        }
      },
      "6": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 43
        }
      },
      "7": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 43
        }
      },
      "8": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 41
        }
      },
      "9": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 43
        }
      },
      "10": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 44
        }
      },
      "11": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 46
        }
      },
      "12": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 31
        }
      },
      "13": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 42,
          column: 10
        }
      },
      "14": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 43,
          column: 35
        }
      },
      "15": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 44,
          column: 86
        }
      },
      "16": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 53,
          column: 9
        }
      },
      "17": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 51,
          column: 69
        }
      },
      "18": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 52,
          column: 19
        }
      },
      "19": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 54,
          column: 30
        }
      },
      "20": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 55,
          column: 54
        }
      },
      "21": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 57,
          column: 40
        }
      },
      "22": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 58,
          column: 42
        }
      },
      "23": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 67,
          column: 9
        }
      },
      "24": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 65,
          column: 70
        }
      },
      "25": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 66,
          column: 19
        }
      },
      "26": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 68,
          column: 31
        }
      },
      "27": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 69,
          column: 55
        }
      },
      "28": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 71,
          column: 45
        }
      },
      "29": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 72,
          column: 43
        }
      },
      "30": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 81,
          column: 56
        }
      },
      "31": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 89,
          column: 47
        }
      },
      "32": {
        start: {
          line: 99,
          column: 25
        },
        end: {
          line: 99,
          column: 74
        }
      },
      "33": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 100,
          column: 62
        }
      },
      "34": {
        start: {
          line: 110,
          column: 27
        },
        end: {
          line: 110,
          column: 73
        }
      },
      "35": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 113,
          column: 9
        }
      },
      "36": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 112,
          column: 69
        }
      },
      "37": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 114,
          column: 93
        }
      },
      "38": {
        start: {
          line: 116,
          column: 8
        },
        end: {
          line: 116,
          column: 53
        }
      },
      "39": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 118,
          column: 64
        }
      },
      "40": {
        start: {
          line: 126,
          column: 8
        },
        end: {
          line: 126,
          column: 55
        }
      },
      "41": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 127,
          column: 81
        }
      },
      "42": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 128,
          column: 48
        }
      },
      "43": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 139,
          column: 11
        }
      },
      "44": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 138,
          column: 13
        }
      },
      "45": {
        start: {
          line: 137,
          column: 16
        },
        end: {
          line: 137,
          column: 77
        }
      },
      "46": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 145,
          column: 11
        }
      },
      "47": {
        start: {
          line: 142,
          column: 12
        },
        end: {
          line: 144,
          column: 13
        }
      },
      "48": {
        start: {
          line: 143,
          column: 16
        },
        end: {
          line: 143,
          column: 88
        }
      },
      "49": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 151,
          column: 11
        }
      },
      "50": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 150,
          column: 13
        }
      },
      "51": {
        start: {
          line: 149,
          column: 16
        },
        end: {
          line: 149,
          column: 60
        }
      },
      "52": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 155,
          column: 11
        }
      },
      "53": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 154,
          column: 56
        }
      },
      "54": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 161,
          column: 11
        }
      },
      "55": {
        start: {
          line: 158,
          column: 12
        },
        end: {
          line: 160,
          column: 13
        }
      },
      "56": {
        start: {
          line: 159,
          column: 16
        },
        end: {
          line: 159,
          column: 78
        }
      },
      "57": {
        start: {
          line: 167,
          column: 28
        },
        end: {
          line: 167,
          column: 66
        }
      },
      "58": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 182,
          column: 9
        }
      },
      "59": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 170,
          column: 60
        }
      },
      "60": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 181,
          column: 13
        }
      },
      "61": {
        start: {
          line: 173,
          column: 16
        },
        end: {
          line: 173,
          column: 84
        }
      },
      "62": {
        start: {
          line: 177,
          column: 38
        },
        end: {
          line: 177,
          column: 88
        }
      },
      "63": {
        start: {
          line: 178,
          column: 16
        },
        end: {
          line: 180,
          column: 17
        }
      },
      "64": {
        start: {
          line: 179,
          column: 20
        },
        end: {
          line: 179,
          column: 70
        }
      },
      "65": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 192,
          column: 19
        }
      },
      "66": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 192,
          column: 19
        }
      },
      "67": {
        start: {
          line: 193,
          column: 8
        },
        end: {
          line: 193,
          column: 74
        }
      },
      "68": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 195,
          column: 56
        }
      },
      "69": {
        start: {
          line: 197,
          column: 8
        },
        end: {
          line: 197,
          column: 57
        }
      },
      "70": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 207,
          column: 19
        }
      },
      "71": {
        start: {
          line: 207,
          column: 12
        },
        end: {
          line: 207,
          column: 19
        }
      },
      "72": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 215,
          column: 9
        }
      },
      "73": {
        start: {
          line: 210,
          column: 12
        },
        end: {
          line: 213,
          column: 15
        }
      },
      "74": {
        start: {
          line: 214,
          column: 12
        },
        end: {
          line: 214,
          column: 109
        }
      },
      "75": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 223,
          column: 9
        }
      },
      "76": {
        start: {
          line: 218,
          column: 12
        },
        end: {
          line: 221,
          column: 15
        }
      },
      "77": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 222,
          column: 118
        }
      },
      "78": {
        start: {
          line: 232,
          column: 8
        },
        end: {
          line: 233,
          column: 19
        }
      },
      "79": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 233,
          column: 19
        }
      },
      "80": {
        start: {
          line: 234,
          column: 8
        },
        end: {
          line: 234,
          column: 77
        }
      },
      "81": {
        start: {
          line: 235,
          column: 8
        },
        end: {
          line: 235,
          column: 57
        }
      },
      "82": {
        start: {
          line: 243,
          column: 22
        },
        end: {
          line: 243,
          column: 63
        }
      },
      "83": {
        start: {
          line: 244,
          column: 8
        },
        end: {
          line: 245,
          column: 19
        }
      },
      "84": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 245,
          column: 19
        }
      },
      "85": {
        start: {
          line: 247,
          column: 8
        },
        end: {
          line: 247,
          column: 54
        }
      },
      "86": {
        start: {
          line: 249,
          column: 8
        },
        end: {
          line: 249,
          column: 37
        }
      },
      "87": {
        start: {
          line: 250,
          column: 8
        },
        end: {
          line: 250,
          column: 35
        }
      },
      "88": {
        start: {
          line: 252,
          column: 8
        },
        end: {
          line: 257,
          column: 45
        }
      },
      "89": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 256,
          column: 13
        }
      },
      "90": {
        start: {
          line: 254,
          column: 16
        },
        end: {
          line: 254,
          column: 91
        }
      },
      "91": {
        start: {
          line: 255,
          column: 16
        },
        end: {
          line: 255,
          column: 44
        }
      },
      "92": {
        start: {
          line: 258,
          column: 8
        },
        end: {
          line: 258,
          column: 82
        }
      },
      "93": {
        start: {
          line: 259,
          column: 8
        },
        end: {
          line: 259,
          column: 63
        }
      },
      "94": {
        start: {
          line: 269,
          column: 8
        },
        end: {
          line: 269,
          column: 53
        }
      },
      "95": {
        start: {
          line: 270,
          column: 22
        },
        end: {
          line: 270,
          column: 62
        }
      },
      "96": {
        start: {
          line: 271,
          column: 8
        },
        end: {
          line: 274,
          column: 9
        }
      },
      "97": {
        start: {
          line: 272,
          column: 12
        },
        end: {
          line: 272,
          column: 59
        }
      },
      "98": {
        start: {
          line: 273,
          column: 12
        },
        end: {
          line: 273,
          column: 67
        }
      },
      "99": {
        start: {
          line: 276,
          column: 8
        },
        end: {
          line: 284,
          column: 9
        }
      },
      "100": {
        start: {
          line: 277,
          column: 12
        },
        end: {
          line: 280,
          column: 15
        }
      },
      "101": {
        start: {
          line: 281,
          column: 12
        },
        end: {
          line: 281,
          column: 41
        }
      },
      "102": {
        start: {
          line: 282,
          column: 12
        },
        end: {
          line: 282,
          column: 89
        }
      },
      "103": {
        start: {
          line: 283,
          column: 12
        },
        end: {
          line: 283,
          column: 19
        }
      },
      "104": {
        start: {
          line: 286,
          column: 26
        },
        end: {
          line: 286,
          column: 159
        }
      },
      "105": {
        start: {
          line: 288,
          column: 23
        },
        end: {
          line: 288,
          column: 83
        }
      },
      "106": {
        start: {
          line: 289,
          column: 27
        },
        end: {
          line: 289,
          column: 61
        }
      },
      "107": {
        start: {
          line: 290,
          column: 8
        },
        end: {
          line: 294,
          column: 11
        }
      },
      "108": {
        start: {
          line: 296,
          column: 8
        },
        end: {
          line: 296,
          column: 36
        }
      },
      "109": {
        start: {
          line: 297,
          column: 8
        },
        end: {
          line: 297,
          column: 34
        }
      },
      "110": {
        start: {
          line: 299,
          column: 22
        },
        end: {
          line: 314,
          column: 22
        }
      },
      "111": {
        start: {
          line: 300,
          column: 12
        },
        end: {
          line: 313,
          column: 13
        }
      },
      "112": {
        start: {
          line: 301,
          column: 16
        },
        end: {
          line: 301,
          column: 94
        }
      },
      "113": {
        start: {
          line: 304,
          column: 16
        },
        end: {
          line: 304,
          column: 89
        }
      },
      "114": {
        start: {
          line: 306,
          column: 16
        },
        end: {
          line: 312,
          column: 17
        }
      },
      "115": {
        start: {
          line: 307,
          column: 20
        },
        end: {
          line: 307,
          column: 142
        }
      },
      "116": {
        start: {
          line: 310,
          column: 20
        },
        end: {
          line: 310,
          column: 49
        }
      },
      "117": {
        start: {
          line: 311,
          column: 20
        },
        end: {
          line: 311,
          column: 99
        }
      },
      "118": {
        start: {
          line: 315,
          column: 8
        },
        end: {
          line: 315,
          column: 57
        }
      },
      "119": {
        start: {
          line: 316,
          column: 8
        },
        end: {
          line: 316,
          column: 76
        }
      },
      "120": {
        start: {
          line: 326,
          column: 27
        },
        end: {
          line: 326,
          column: 73
        }
      },
      "121": {
        start: {
          line: 327,
          column: 8
        },
        end: {
          line: 329,
          column: 9
        }
      },
      "122": {
        start: {
          line: 328,
          column: 12
        },
        end: {
          line: 328,
          column: 69
        }
      },
      "123": {
        start: {
          line: 330,
          column: 22
        },
        end: {
          line: 330,
          column: 62
        }
      },
      "124": {
        start: {
          line: 331,
          column: 8
        },
        end: {
          line: 333,
          column: 9
        }
      },
      "125": {
        start: {
          line: 332,
          column: 12
        },
        end: {
          line: 332,
          column: 77
        }
      },
      "126": {
        start: {
          line: 334,
          column: 26
        },
        end: {
          line: 334,
          column: 36
        }
      },
      "127": {
        start: {
          line: 335,
          column: 24
        },
        end: {
          line: 342,
          column: 9
        }
      },
      "128": {
        start: {
          line: 343,
          column: 8
        },
        end: {
          line: 397,
          column: 9
        }
      },
      "129": {
        start: {
          line: 344,
          column: 12
        },
        end: {
          line: 347,
          column: 15
        }
      },
      "130": {
        start: {
          line: 349,
          column: 12
        },
        end: {
          line: 351,
          column: 13
        }
      },
      "131": {
        start: {
          line: 350,
          column: 16
        },
        end: {
          line: 350,
          column: 72
        }
      },
      "132": {
        start: {
          line: 353,
          column: 12
        },
        end: {
          line: 353,
          column: 68
        }
      },
      "133": {
        start: {
          line: 353,
          column: 41
        },
        end: {
          line: 353,
          column: 66
        }
      },
      "134": {
        start: {
          line: 355,
          column: 12
        },
        end: {
          line: 355,
          column: 67
        }
      },
      "135": {
        start: {
          line: 357,
          column: 12
        },
        end: {
          line: 357,
          column: 35
        }
      },
      "136": {
        start: {
          line: 358,
          column: 12
        },
        end: {
          line: 358,
          column: 54
        }
      },
      "137": {
        start: {
          line: 360,
          column: 12
        },
        end: {
          line: 360,
          column: 34
        }
      },
      "138": {
        start: {
          line: 361,
          column: 12
        },
        end: {
          line: 361,
          column: 39
        }
      },
      "139": {
        start: {
          line: 362,
          column: 12
        },
        end: {
          line: 362,
          column: 55
        }
      },
      "140": {
        start: {
          line: 363,
          column: 12
        },
        end: {
          line: 363,
          column: 41
        }
      },
      "141": {
        start: {
          line: 365,
          column: 12
        },
        end: {
          line: 370,
          column: 13
        }
      },
      "142": {
        start: {
          line: 366,
          column: 34
        },
        end: {
          line: 368,
          column: 60
        }
      },
      "143": {
        start: {
          line: 367,
          column: 33
        },
        end: {
          line: 367,
          column: 42
        }
      },
      "144": {
        start: {
          line: 368,
          column: 40
        },
        end: {
          line: 368,
          column: 56
        }
      },
      "145": {
        start: {
          line: 369,
          column: 16
        },
        end: {
          line: 369,
          column: 85
        }
      },
      "146": {
        start: {
          line: 371,
          column: 12
        },
        end: {
          line: 374,
          column: 15
        }
      },
      "147": {
        start: {
          line: 375,
          column: 12
        },
        end: {
          line: 375,
          column: 83
        }
      },
      "148": {
        start: {
          line: 379,
          column: 12
        },
        end: {
          line: 379,
          column: 36
        }
      },
      "149": {
        start: {
          line: 380,
          column: 12
        },
        end: {
          line: 380,
          column: 86
        }
      },
      "150": {
        start: {
          line: 381,
          column: 12
        },
        end: {
          line: 381,
          column: 54
        }
      },
      "151": {
        start: {
          line: 383,
          column: 12
        },
        end: {
          line: 383,
          column: 34
        }
      },
      "152": {
        start: {
          line: 384,
          column: 12
        },
        end: {
          line: 384,
          column: 35
        }
      },
      "153": {
        start: {
          line: 385,
          column: 12
        },
        end: {
          line: 385,
          column: 55
        }
      },
      "154": {
        start: {
          line: 386,
          column: 12
        },
        end: {
          line: 390,
          column: 15
        }
      },
      "155": {
        start: {
          line: 391,
          column: 12
        },
        end: {
          line: 391,
          column: 79
        }
      },
      "156": {
        start: {
          line: 392,
          column: 12
        },
        end: {
          line: 392,
          column: 32
        }
      },
      "157": {
        start: {
          line: 396,
          column: 12
        },
        end: {
          line: 396,
          column: 65
        }
      },
      "158": {
        start: {
          line: 405,
          column: 22
        },
        end: {
          line: 405,
          column: 63
        }
      },
      "159": {
        start: {
          line: 406,
          column: 8
        },
        end: {
          line: 414,
          column: 9
        }
      },
      "160": {
        start: {
          line: 407,
          column: 12
        },
        end: {
          line: 407,
          column: 32
        }
      },
      "161": {
        start: {
          line: 408,
          column: 12
        },
        end: {
          line: 408,
          column: 57
        }
      },
      "162": {
        start: {
          line: 409,
          column: 26
        },
        end: {
          line: 409,
          column: 66
        }
      },
      "163": {
        start: {
          line: 410,
          column: 12
        },
        end: {
          line: 412,
          column: 13
        }
      },
      "164": {
        start: {
          line: 411,
          column: 16
        },
        end: {
          line: 411,
          column: 45
        }
      },
      "165": {
        start: {
          line: 413,
          column: 12
        },
        end: {
          line: 413,
          column: 96
        }
      },
      "166": {
        start: {
          line: 420,
          column: 8
        },
        end: {
          line: 426,
          column: 9
        }
      },
      "167": {
        start: {
          line: 421,
          column: 12
        },
        end: {
          line: 421,
          column: 32
        }
      },
      "168": {
        start: {
          line: 422,
          column: 26
        },
        end: {
          line: 422,
          column: 66
        }
      },
      "169": {
        start: {
          line: 423,
          column: 12
        },
        end: {
          line: 425,
          column: 13
        }
      },
      "170": {
        start: {
          line: 424,
          column: 16
        },
        end: {
          line: 424,
          column: 45
        }
      },
      "171": {
        start: {
          line: 427,
          column: 8
        },
        end: {
          line: 427,
          column: 40
        }
      },
      "172": {
        start: {
          line: 428,
          column: 8
        },
        end: {
          line: 428,
          column: 72
        }
      },
      "173": {
        start: {
          line: 436,
          column: 8
        },
        end: {
          line: 438,
          column: 9
        }
      },
      "174": {
        start: {
          line: 437,
          column: 12
        },
        end: {
          line: 437,
          column: 19
        }
      },
      "175": {
        start: {
          line: 439,
          column: 22
        },
        end: {
          line: 450,
          column: 9
        }
      },
      "176": {
        start: {
          line: 451,
          column: 8
        },
        end: {
          line: 451,
          column: 56
        }
      },
      "177": {
        start: {
          line: 452,
          column: 8
        },
        end: {
          line: 452,
          column: 56
        }
      },
      "178": {
        start: {
          line: 461,
          column: 8
        },
        end: {
          line: 463,
          column: 9
        }
      },
      "179": {
        start: {
          line: 462,
          column: 12
        },
        end: {
          line: 462,
          column: 60
        }
      },
      "180": {
        start: {
          line: 464,
          column: 25
        },
        end: {
          line: 464,
          column: 68
        }
      },
      "181": {
        start: {
          line: 465,
          column: 8
        },
        end: {
          line: 465,
          column: 31
        }
      },
      "182": {
        start: {
          line: 467,
          column: 31
        },
        end: {
          line: 467,
          column: 34
        }
      },
      "183": {
        start: {
          line: 468,
          column: 8
        },
        end: {
          line: 470,
          column: 9
        }
      },
      "184": {
        start: {
          line: 469,
          column: 12
        },
        end: {
          line: 469,
          column: 65
        }
      },
      "185": {
        start: {
          line: 476,
          column: 8
        },
        end: {
          line: 476,
          column: 23
        }
      },
      "186": {
        start: {
          line: 477,
          column: 8
        },
        end: {
          line: 477,
          column: 39
        }
      },
      "187": {
        start: {
          line: 478,
          column: 8
        },
        end: {
          line: 478,
          column: 42
        }
      },
      "188": {
        start: {
          line: 479,
          column: 8
        },
        end: {
          line: 479,
          column: 71
        }
      },
      "189": {
        start: {
          line: 482,
          column: 0
        },
        end: {
          line: 482,
          column: 50
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 20,
            column: 4
          },
          end: {
            line: 20,
            column: 5
          }
        },
        loc: {
          start: {
            line: 20,
            column: 76
          },
          end: {
            line: 45,
            column: 5
          }
        },
        line: 20
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 49,
            column: 4
          },
          end: {
            line: 49,
            column: 5
          }
        },
        loc: {
          start: {
            line: 49,
            column: 13
          },
          end: {
            line: 59,
            column: 5
          }
        },
        line: 49
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 63,
            column: 4
          },
          end: {
            line: 63,
            column: 5
          }
        },
        loc: {
          start: {
            line: 63,
            column: 14
          },
          end: {
            line: 73,
            column: 5
          }
        },
        line: 63
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 80,
            column: 4
          },
          end: {
            line: 80,
            column: 5
          }
        },
        loc: {
          start: {
            line: 80,
            column: 39
          },
          end: {
            line: 82,
            column: 5
          }
        },
        line: 80
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 88,
            column: 4
          },
          end: {
            line: 88,
            column: 5
          }
        },
        loc: {
          start: {
            line: 88,
            column: 30
          },
          end: {
            line: 90,
            column: 5
          }
        },
        line: 88
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 98,
            column: 4
          },
          end: {
            line: 98,
            column: 5
          }
        },
        loc: {
          start: {
            line: 98,
            column: 48
          },
          end: {
            line: 101,
            column: 5
          }
        },
        line: 98
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 109,
            column: 4
          },
          end: {
            line: 109,
            column: 5
          }
        },
        loc: {
          start: {
            line: 109,
            column: 74
          },
          end: {
            line: 119,
            column: 5
          }
        },
        line: 109
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 125,
            column: 4
          },
          end: {
            line: 125,
            column: 5
          }
        },
        loc: {
          start: {
            line: 125,
            column: 28
          },
          end: {
            line: 129,
            column: 5
          }
        },
        line: 125
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 133,
            column: 4
          },
          end: {
            line: 133,
            column: 5
          }
        },
        loc: {
          start: {
            line: 133,
            column: 26
          },
          end: {
            line: 162,
            column: 5
          }
        },
        line: 133
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 135,
            column: 52
          },
          end: {
            line: 135,
            column: 53
          }
        },
        loc: {
          start: {
            line: 135,
            column: 68
          },
          end: {
            line: 139,
            column: 9
          }
        },
        line: 135
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 141,
            column: 45
          },
          end: {
            line: 141,
            column: 46
          }
        },
        loc: {
          start: {
            line: 141,
            column: 68
          },
          end: {
            line: 145,
            column: 9
          }
        },
        line: 141
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 147,
            column: 53
          },
          end: {
            line: 147,
            column: 54
          }
        },
        loc: {
          start: {
            line: 147,
            column: 78
          },
          end: {
            line: 151,
            column: 9
          }
        },
        line: 147
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 153,
            column: 49
          },
          end: {
            line: 153,
            column: 50
          }
        },
        loc: {
          start: {
            line: 153,
            column: 65
          },
          end: {
            line: 155,
            column: 9
          }
        },
        line: 153
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 157,
            column: 49
          },
          end: {
            line: 157,
            column: 50
          }
        },
        loc: {
          start: {
            line: 157,
            column: 83
          },
          end: {
            line: 161,
            column: 9
          }
        },
        line: 157
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 166,
            column: 4
          },
          end: {
            line: 166,
            column: 5
          }
        },
        loc: {
          start: {
            line: 166,
            column: 31
          },
          end: {
            line: 183,
            column: 5
          }
        },
        line: 166
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 190,
            column: 4
          },
          end: {
            line: 190,
            column: 5
          }
        },
        loc: {
          start: {
            line: 190,
            column: 45
          },
          end: {
            line: 198,
            column: 5
          }
        },
        line: 190
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 205,
            column: 4
          },
          end: {
            line: 205,
            column: 5
          }
        },
        loc: {
          start: {
            line: 205,
            column: 43
          },
          end: {
            line: 224,
            column: 5
          }
        },
        line: 205
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 231,
            column: 4
          },
          end: {
            line: 231,
            column: 5
          }
        },
        loc: {
          start: {
            line: 231,
            column: 48
          },
          end: {
            line: 236,
            column: 5
          }
        },
        line: 231
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 242,
            column: 4
          },
          end: {
            line: 242,
            column: 5
          }
        },
        loc: {
          start: {
            line: 242,
            column: 43
          },
          end: {
            line: 260,
            column: 5
          }
        },
        line: 242
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 252,
            column: 19
          },
          end: {
            line: 252,
            column: 20
          }
        },
        loc: {
          start: {
            line: 252,
            column: 25
          },
          end: {
            line: 257,
            column: 9
          }
        },
        line: 252
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 267,
            column: 4
          },
          end: {
            line: 267,
            column: 5
          }
        },
        loc: {
          start: {
            line: 267,
            column: 47
          },
          end: {
            line: 317,
            column: 5
          }
        },
        line: 267
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 299,
            column: 33
          },
          end: {
            line: 299,
            column: 34
          }
        },
        loc: {
          start: {
            line: 299,
            column: 45
          },
          end: {
            line: 314,
            column: 9
          }
        },
        line: 299
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 325,
            column: 4
          },
          end: {
            line: 325,
            column: 5
          }
        },
        loc: {
          start: {
            line: 325,
            column: 67
          },
          end: {
            line: 398,
            column: 5
          }
        },
        line: 325
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 353,
            column: 30
          },
          end: {
            line: 353,
            column: 31
          }
        },
        loc: {
          start: {
            line: 353,
            column: 41
          },
          end: {
            line: 353,
            column: 66
          }
        },
        line: 353
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 367,
            column: 28
          },
          end: {
            line: 367,
            column: 29
          }
        },
        loc: {
          start: {
            line: 367,
            column: 33
          },
          end: {
            line: 367,
            column: 42
          }
        },
        line: 367
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 368,
            column: 28
          },
          end: {
            line: 368,
            column: 29
          }
        },
        loc: {
          start: {
            line: 368,
            column: 40
          },
          end: {
            line: 368,
            column: 56
          }
        },
        line: 368
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 404,
            column: 4
          },
          end: {
            line: 404,
            column: 5
          }
        },
        loc: {
          start: {
            line: 404,
            column: 44
          },
          end: {
            line: 415,
            column: 5
          }
        },
        line: 404
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 419,
            column: 4
          },
          end: {
            line: 419,
            column: 5
          }
        },
        loc: {
          start: {
            line: 419,
            column: 36
          },
          end: {
            line: 429,
            column: 5
          }
        },
        line: 419
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 435,
            column: 4
          },
          end: {
            line: 435,
            column: 5
          }
        },
        loc: {
          start: {
            line: 435,
            column: 46
          },
          end: {
            line: 453,
            column: 5
          }
        },
        line: 435
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 460,
            column: 4
          },
          end: {
            line: 460,
            column: 5
          }
        },
        loc: {
          start: {
            line: 460,
            column: 52
          },
          end: {
            line: 471,
            column: 5
          }
        },
        line: 460
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 475,
            column: 4
          },
          end: {
            line: 475,
            column: 5
          }
        },
        loc: {
          start: {
            line: 475,
            column: 14
          },
          end: {
            line: 480,
            column: 5
          }
        },
        line: 475
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 50,
            column: 8
          },
          end: {
            line: 53,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 50,
            column: 8
          },
          end: {
            line: 53,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 50
      },
      "1": {
        loc: {
          start: {
            line: 64,
            column: 8
          },
          end: {
            line: 67,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 64,
            column: 8
          },
          end: {
            line: 67,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 64
      },
      "2": {
        loc: {
          start: {
            line: 99,
            column: 25
          },
          end: {
            line: 99,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 99,
            column: 25
          },
          end: {
            line: 99,
            column: 68
          }
        }, {
          start: {
            line: 99,
            column: 72
          },
          end: {
            line: 99,
            column: 74
          }
        }],
        line: 99
      },
      "3": {
        loc: {
          start: {
            line: 100,
            column: 15
          },
          end: {
            line: 100,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 100,
            column: 23
          },
          end: {
            line: 100,
            column: 45
          }
        }, {
          start: {
            line: 100,
            column: 48
          },
          end: {
            line: 100,
            column: 61
          }
        }],
        line: 100
      },
      "4": {
        loc: {
          start: {
            line: 109,
            column: 42
          },
          end: {
            line: 109,
            column: 72
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 109,
            column: 51
          },
          end: {
            line: 109,
            column: 72
          }
        }],
        line: 109
      },
      "5": {
        loc: {
          start: {
            line: 111,
            column: 8
          },
          end: {
            line: 113,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 111,
            column: 8
          },
          end: {
            line: 113,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 111
      },
      "6": {
        loc: {
          start: {
            line: 136,
            column: 12
          },
          end: {
            line: 138,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 136,
            column: 12
          },
          end: {
            line: 138,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 136
      },
      "7": {
        loc: {
          start: {
            line: 142,
            column: 12
          },
          end: {
            line: 144,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 142,
            column: 12
          },
          end: {
            line: 144,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 142
      },
      "8": {
        loc: {
          start: {
            line: 148,
            column: 12
          },
          end: {
            line: 150,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 148,
            column: 12
          },
          end: {
            line: 150,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 148
      },
      "9": {
        loc: {
          start: {
            line: 158,
            column: 12
          },
          end: {
            line: 160,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 158,
            column: 12
          },
          end: {
            line: 160,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 158
      },
      "10": {
        loc: {
          start: {
            line: 172,
            column: 12
          },
          end: {
            line: 181,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 172,
            column: 12
          },
          end: {
            line: 181,
            column: 13
          }
        }, {
          start: {
            line: 175,
            column: 17
          },
          end: {
            line: 181,
            column: 13
          }
        }],
        line: 172
      },
      "11": {
        loc: {
          start: {
            line: 172,
            column: 16
          },
          end: {
            line: 172,
            column: 146
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 172,
            column: 16
          },
          end: {
            line: 172,
            column: 76
          }
        }, {
          start: {
            line: 172,
            column: 80
          },
          end: {
            line: 172,
            column: 146
          }
        }],
        line: 172
      },
      "12": {
        loc: {
          start: {
            line: 178,
            column: 16
          },
          end: {
            line: 180,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 178,
            column: 16
          },
          end: {
            line: 180,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 178
      },
      "13": {
        loc: {
          start: {
            line: 178,
            column: 20
          },
          end: {
            line: 178,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 178,
            column: 20
          },
          end: {
            line: 178,
            column: 33
          }
        }, {
          start: {
            line: 178,
            column: 37
          },
          end: {
            line: 178,
            column: 61
          }
        }],
        line: 178
      },
      "14": {
        loc: {
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 192,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 192,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 191
      },
      "15": {
        loc: {
          start: {
            line: 206,
            column: 8
          },
          end: {
            line: 207,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 206,
            column: 8
          },
          end: {
            line: 207,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 206
      },
      "16": {
        loc: {
          start: {
            line: 209,
            column: 8
          },
          end: {
            line: 215,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 209,
            column: 8
          },
          end: {
            line: 215,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 209
      },
      "17": {
        loc: {
          start: {
            line: 217,
            column: 8
          },
          end: {
            line: 223,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 217,
            column: 8
          },
          end: {
            line: 223,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 217
      },
      "18": {
        loc: {
          start: {
            line: 232,
            column: 8
          },
          end: {
            line: 233,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 232,
            column: 8
          },
          end: {
            line: 233,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 232
      },
      "19": {
        loc: {
          start: {
            line: 244,
            column: 8
          },
          end: {
            line: 245,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 244,
            column: 8
          },
          end: {
            line: 245,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 244
      },
      "20": {
        loc: {
          start: {
            line: 253,
            column: 12
          },
          end: {
            line: 256,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 253,
            column: 12
          },
          end: {
            line: 256,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 253
      },
      "21": {
        loc: {
          start: {
            line: 271,
            column: 8
          },
          end: {
            line: 274,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 271,
            column: 8
          },
          end: {
            line: 274,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 271
      },
      "22": {
        loc: {
          start: {
            line: 276,
            column: 8
          },
          end: {
            line: 284,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 276,
            column: 8
          },
          end: {
            line: 284,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 276
      },
      "23": {
        loc: {
          start: {
            line: 306,
            column: 16
          },
          end: {
            line: 312,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 306,
            column: 16
          },
          end: {
            line: 312,
            column: 17
          }
        }, {
          start: {
            line: 309,
            column: 21
          },
          end: {
            line: 312,
            column: 17
          }
        }],
        line: 306
      },
      "24": {
        loc: {
          start: {
            line: 307,
            column: 84
          },
          end: {
            line: 307,
            column: 138
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 307,
            column: 109
          },
          end: {
            line: 307,
            column: 122
          }
        }, {
          start: {
            line: 307,
            column: 125
          },
          end: {
            line: 307,
            column: 138
          }
        }],
        line: 307
      },
      "25": {
        loc: {
          start: {
            line: 327,
            column: 8
          },
          end: {
            line: 329,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 327,
            column: 8
          },
          end: {
            line: 329,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 327
      },
      "26": {
        loc: {
          start: {
            line: 331,
            column: 8
          },
          end: {
            line: 333,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 331,
            column: 8
          },
          end: {
            line: 333,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 331
      },
      "27": {
        loc: {
          start: {
            line: 349,
            column: 12
          },
          end: {
            line: 351,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 349,
            column: 12
          },
          end: {
            line: 351,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 349
      },
      "28": {
        loc: {
          start: {
            line: 365,
            column: 12
          },
          end: {
            line: 370,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 365,
            column: 12
          },
          end: {
            line: 370,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 365
      },
      "29": {
        loc: {
          start: {
            line: 380,
            column: 28
          },
          end: {
            line: 380,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 380,
            column: 53
          },
          end: {
            line: 380,
            column: 58
          }
        }, {
          start: {
            line: 380,
            column: 61
          },
          end: {
            line: 380,
            column: 85
          }
        }],
        line: 380
      },
      "30": {
        loc: {
          start: {
            line: 406,
            column: 8
          },
          end: {
            line: 414,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 406,
            column: 8
          },
          end: {
            line: 414,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 406
      },
      "31": {
        loc: {
          start: {
            line: 410,
            column: 12
          },
          end: {
            line: 412,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 410,
            column: 12
          },
          end: {
            line: 412,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 410
      },
      "32": {
        loc: {
          start: {
            line: 423,
            column: 12
          },
          end: {
            line: 425,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 423,
            column: 12
          },
          end: {
            line: 425,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 423
      },
      "33": {
        loc: {
          start: {
            line: 436,
            column: 8
          },
          end: {
            line: 438,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 436,
            column: 8
          },
          end: {
            line: 438,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 436
      },
      "34": {
        loc: {
          start: {
            line: 461,
            column: 8
          },
          end: {
            line: 463,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 461,
            column: 8
          },
          end: {
            line: 463,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 461
      },
      "35": {
        loc: {
          start: {
            line: 468,
            column: 8
          },
          end: {
            line: 470,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 468,
            column: 8
          },
          end: {
            line: 470,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 468
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\tunnel-auto-reconnect.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\infrastructure\\tunnel-auto-reconnect.ts"],
      sourcesContent: ["import { EventEmitter } from 'events';\r\nimport { Logger } from '../core/logging/logger';\r\nimport { SSHTunnelManager, TunnelConnection, TunnelState } from './ssh-tunnel-manager';\r\nimport { TunnelHealthMonitor, TunnelHealthMetrics } from './tunnel-health-monitor';\r\nimport { TunnelStateTracker } from './tunnel-state-tracker';\r\n\r\n/**\r\n * Reconnection strategy configuration\r\n */\r\nexport interface ReconnectionConfig {\r\n  /** Enable automatic reconnection */\r\n  enabled: boolean;\r\n  /** Initial retry delay in milliseconds */\r\n  initialRetryDelay: number;\r\n  /** Maximum retry delay in milliseconds */\r\n  maxRetryDelay: number;\r\n  /** Exponential backoff multiplier */\r\n  backoffMultiplier: number;\r\n  /** Maximum number of retry attempts */\r\n  maxRetryAttempts: number;\r\n  /** Reset retry count after successful connection duration (ms) */\r\n  resetRetryCountAfter: number;\r\n  /** Health check threshold for triggering reconnection */\r\n  healthThreshold: number;\r\n  /** Consecutive failure threshold for triggering reconnection */\r\n  failureThreshold: number;\r\n  /** Jitter factor for retry delays (0-1) */\r\n  jitterFactor: number;\r\n}\r\n\r\n/**\r\n * Reconnection attempt information\r\n */\r\nexport interface ReconnectionAttempt {\r\n  connectionId: string;\r\n  attemptNumber: number;\r\n  timestamp: Date;\r\n  reason: string;\r\n  success: boolean;\r\n  error?: Error;\r\n  duration: number;\r\n  nextRetryDelay?: number;\r\n}\r\n\r\n/**\r\n * Reconnection statistics\r\n */\r\nexport interface ReconnectionStats {\r\n  connectionId: string;\r\n  totalAttempts: number;\r\n  successfulAttempts: number;\r\n  failedAttempts: number;\r\n  averageReconnectionTime: number;\r\n  longestDowntime: number;\r\n  shortestDowntime: number;\r\n  lastReconnectionAttempt: Date | null;\r\n  currentRetryCount: number;\r\n  isReconnecting: boolean;\r\n}\r\n\r\n/**\r\n * Tunnel Auto-Reconnection Manager\r\n * Implements intelligent auto-reconnection with exponential backoff and failure detection\r\n */\r\nexport class TunnelAutoReconnect extends EventEmitter {\r\n  private logger: Logger;\r\n  private tunnelManager: SSHTunnelManager;\r\n  private healthMonitor: TunnelHealthMonitor;\r\n  private stateTracker: TunnelStateTracker;\r\n  private config: ReconnectionConfig;\r\n  private reconnectionStats: Map<string, ReconnectionStats>;\r\n  private reconnectionTimers: Map<string, NodeJS.Timeout>;\r\n  private reconnectionAttempts: Map<string, ReconnectionAttempt[]>;\r\n  private isEnabled: boolean;\r\n\r\n  constructor(\r\n    logger: Logger,\r\n    tunnelManager: SSHTunnelManager,\r\n    healthMonitor: TunnelHealthMonitor,\r\n    stateTracker: TunnelStateTracker,\r\n    config?: Partial<ReconnectionConfig>\r\n  ) {\r\n    super();\r\n    this.logger = logger;\r\n    this.tunnelManager = tunnelManager;\r\n    this.healthMonitor = healthMonitor;\r\n    this.stateTracker = stateTracker;\r\n    this.reconnectionStats = new Map();\r\n    this.reconnectionTimers = new Map();\r\n    this.reconnectionAttempts = new Map();\r\n    this.isEnabled = false;\r\n\r\n    // Default configuration\r\n    this.config = {\r\n      enabled: true,\r\n      initialRetryDelay: 5000, // 5 seconds\r\n      maxRetryDelay: 300000, // 5 minutes\r\n      backoffMultiplier: 2,\r\n      maxRetryAttempts: 10,\r\n      resetRetryCountAfter: 300000, // 5 minutes\r\n      healthThreshold: 30,\r\n      failureThreshold: 3,\r\n      jitterFactor: 0.1,\r\n      ...config\r\n    };\r\n\r\n    this.setupEventListeners();\r\n    this.logger.info('Tunnel Auto-Reconnection Manager initialized', this.config);\r\n  }\r\n\r\n  /**\r\n   * Enable auto-reconnection\r\n   */\r\n  enable(): void {\r\n    if (this.isEnabled) {\r\n      this.logger.warn('Auto-reconnection is already enabled');\r\n      return;\r\n    }\r\n\r\n    this.isEnabled = true;\r\n    this.logger.info('Auto-reconnection enabled');\r\n\r\n    // Check existing connections for health issues\r\n    this.checkExistingConnections();\r\n\r\n    this.emit('autoReconnectEnabled');\r\n  }\r\n\r\n  /**\r\n   * Disable auto-reconnection\r\n   */\r\n  disable(): void {\r\n    if (!this.isEnabled) {\r\n      this.logger.warn('Auto-reconnection is already disabled');\r\n      return;\r\n    }\r\n\r\n    this.isEnabled = false;\r\n    this.logger.info('Auto-reconnection disabled');\r\n\r\n    // Cancel all pending reconnection attempts\r\n    this.cancelAllReconnectionAttempts();\r\n\r\n    this.emit('autoReconnectDisabled');\r\n  }\r\n\r\n  /**\r\n   * Get reconnection statistics for a connection\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @returns Reconnection statistics or undefined\r\n   */\r\n  getReconnectionStats(connectionId: string): ReconnectionStats | undefined {\r\n    return this.reconnectionStats.get(connectionId);\r\n  }\r\n\r\n  /**\r\n   * Get all reconnection statistics\r\n   * \r\n   * @returns Map of all reconnection statistics\r\n   */\r\n  getAllReconnectionStats(): Map<string, ReconnectionStats> {\r\n    return new Map(this.reconnectionStats);\r\n  }\r\n\r\n  /**\r\n   * Get reconnection attempt history for a connection\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @param limit - Maximum number of attempts to return\r\n   * @returns Array of reconnection attempts\r\n   */\r\n  getReconnectionHistory(connectionId: string, limit?: number): ReconnectionAttempt[] {\r\n    const attempts = this.reconnectionAttempts.get(connectionId) || [];\r\n    return limit ? attempts.slice(-limit) : [...attempts];\r\n  }\r\n\r\n  /**\r\n   * Force reconnection for a specific connection\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @param reason - Reason for forced reconnection\r\n   * @returns Promise resolving when reconnection is complete\r\n   */\r\n  async forceReconnection(connectionId: string, reason: string = 'Manual reconnection'): Promise<void> {\r\n    const connection = this.tunnelManager.getConnection(connectionId);\r\n    if (!connection) {\r\n      throw new Error(`Connection not found: ${connectionId}`);\r\n    }\r\n\r\n    this.logger.info(`Forcing reconnection for connection: ${connectionId}`, { reason });\r\n\r\n    // Cancel any pending reconnection\r\n    this.cancelReconnectionAttempt(connectionId);\r\n\r\n    // Perform immediate reconnection\r\n    await this.performReconnection(connectionId, reason, 0);\r\n  }\r\n\r\n  /**\r\n   * Update reconnection configuration\r\n   * \r\n   * @param newConfig - New configuration parameters\r\n   */\r\n  updateConfig(newConfig: Partial<ReconnectionConfig>): void {\r\n    this.config = { ...this.config, ...newConfig };\r\n    this.logger.info('Auto-reconnection configuration updated', this.config);\r\n    this.emit('configUpdated', this.config);\r\n  }\r\n\r\n  /**\r\n   * Setup event listeners for tunnel events\r\n   */\r\n  private setupEventListeners(): void {\r\n    // Listen for tunnel disconnections\r\n    this.tunnelManager.on('tunnelDisconnected', (connection) => {\r\n      if (this.isEnabled) {\r\n        this.handleConnectionLoss(connection, 'Tunnel disconnected');\r\n      }\r\n    });\r\n\r\n    // Listen for tunnel errors\r\n    this.tunnelManager.on('tunnelError', (connection, error) => {\r\n      if (this.isEnabled) {\r\n        this.handleConnectionLoss(connection, `Tunnel error: ${error.message}`);\r\n      }\r\n    });\r\n\r\n    // Listen for health issues\r\n    this.healthMonitor.on('connectionUnhealthy', (connection, metrics) => {\r\n      if (this.isEnabled) {\r\n        this.handleHealthIssue(connection, metrics);\r\n      }\r\n    });\r\n\r\n    // Listen for successful connections to reset retry counts\r\n    this.tunnelManager.on('tunnelConnected', (connection) => {\r\n      this.handleSuccessfulConnection(connection);\r\n    });\r\n\r\n    // Listen for state changes\r\n    this.stateTracker.on('connectionFailed', (connection, stateChangeEvent) => {\r\n      if (this.isEnabled) {\r\n        this.handleConnectionFailure(connection, 'Connection failed');\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Check existing connections for health issues\r\n   */\r\n  private checkExistingConnections(): void {\r\n    const connections = this.tunnelManager.getAllConnections();\r\n    \r\n    for (const connection of connections) {\r\n      // Initialize stats if not exists\r\n      this.initializeReconnectionStats(connection.id);\r\n\r\n      // Check if connection needs reconnection\r\n      if (connection.state === TunnelState.FAILED || connection.state === TunnelState.DISCONNECTED) {\r\n        this.handleConnectionLoss(connection, 'Connection check on enable');\r\n      } else {\r\n        // Check health metrics\r\n        const healthMetrics = this.healthMonitor.getHealthMetrics(connection.id);\r\n        if (healthMetrics && !healthMetrics.isHealthy) {\r\n          this.handleHealthIssue(connection, healthMetrics);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle connection loss event\r\n   * \r\n   * @param connection - Lost connection\r\n   * @param reason - Reason for connection loss\r\n   */\r\n  private handleConnectionLoss(connection: TunnelConnection, reason: string): void {\r\n    if (!this.config.enabled) return;\r\n\r\n    this.logger.warn(`Connection lost: ${connection.id}`, { reason });\r\n\r\n    // Initialize stats if not exists\r\n    this.initializeReconnectionStats(connection.id);\r\n\r\n    // Schedule reconnection\r\n    this.scheduleReconnection(connection.id, reason);\r\n  }\r\n\r\n  /**\r\n   * Handle health issue event\r\n   * \r\n   * @param connection - Connection with health issues\r\n   * @param metrics - Health metrics\r\n   */\r\n  private handleHealthIssue(connection: TunnelConnection, metrics: TunnelHealthMetrics): void {\r\n    if (!this.config.enabled) return;\r\n\r\n    // Check if health is below threshold\r\n    if (metrics.healthScore < this.config.healthThreshold) {\r\n      this.logger.warn(`Connection health below threshold: ${connection.id}`, {\r\n        healthScore: metrics.healthScore,\r\n        threshold: this.config.healthThreshold\r\n      });\r\n\r\n      this.scheduleReconnection(connection.id, `Health score below threshold: ${metrics.healthScore}`);\r\n    }\r\n\r\n    // Check for consecutive failures\r\n    if (metrics.consecutiveFailures >= this.config.failureThreshold) {\r\n      this.logger.warn(`Connection has too many consecutive failures: ${connection.id}`, {\r\n        failures: metrics.consecutiveFailures,\r\n        threshold: this.config.failureThreshold\r\n      });\r\n\r\n      this.scheduleReconnection(connection.id, `Too many consecutive failures: ${metrics.consecutiveFailures}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle connection failure event\r\n   * \r\n   * @param connection - Failed connection\r\n   * @param reason - Reason for failure\r\n   */\r\n  private handleConnectionFailure(connection: TunnelConnection, reason: string): void {\r\n    if (!this.config.enabled) return;\r\n\r\n    this.logger.error(`Connection failed: ${connection.id}`, { reason });\r\n    this.scheduleReconnection(connection.id, reason);\r\n  }\r\n\r\n  /**\r\n   * Handle successful connection event\r\n   * \r\n   * @param connection - Successfully connected tunnel\r\n   */\r\n  private handleSuccessfulConnection(connection: TunnelConnection): void {\r\n    const stats = this.reconnectionStats.get(connection.id);\r\n    if (!stats) return;\r\n\r\n    // Cancel any pending reconnection\r\n    this.cancelReconnectionAttempt(connection.id);\r\n\r\n    // Update stats\r\n    stats.isReconnecting = false;\r\n    stats.successfulAttempts++;\r\n\r\n    // Reset retry count after successful connection\r\n    setTimeout(() => {\r\n      if (stats.currentRetryCount > 0) {\r\n        this.logger.info(`Resetting retry count for connection: ${connection.id}`);\r\n        stats.currentRetryCount = 0;\r\n      }\r\n    }, this.config.resetRetryCountAfter);\r\n\r\n    this.logger.info(`Connection successfully established: ${connection.id}`);\r\n    this.emit('reconnectionSuccessful', connection, stats);\r\n  }\r\n\r\n  /**\r\n   * Schedule reconnection attempt\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @param reason - Reason for reconnection\r\n   */\r\n  private scheduleReconnection(connectionId: string, reason: string): void {\r\n    // Cancel any existing reconnection timer\r\n    this.cancelReconnectionAttempt(connectionId);\r\n\r\n    const stats = this.reconnectionStats.get(connectionId);\r\n    if (!stats) {\r\n      this.initializeReconnectionStats(connectionId);\r\n      return this.scheduleReconnection(connectionId, reason);\r\n    }\r\n\r\n    // Check if max attempts reached\r\n    if (stats.currentRetryCount >= this.config.maxRetryAttempts) {\r\n      this.logger.error(`Max reconnection attempts reached for connection: ${connectionId}`, {\r\n        attempts: stats.currentRetryCount,\r\n        maxAttempts: this.config.maxRetryAttempts\r\n      });\r\n      \r\n      stats.isReconnecting = false;\r\n      this.emit('reconnectionFailed', connectionId, stats, 'Max attempts reached');\r\n      return;\r\n    }\r\n\r\n    // Calculate retry delay with exponential backoff and jitter\r\n    const baseDelay = Math.min(\r\n      this.config.initialRetryDelay * Math.pow(this.config.backoffMultiplier, stats.currentRetryCount),\r\n      this.config.maxRetryDelay\r\n    );\r\n\r\n    // Add jitter to prevent thundering herd\r\n    const jitter = baseDelay * this.config.jitterFactor * (Math.random() - 0.5);\r\n    const retryDelay = Math.max(1000, baseDelay + jitter); // Minimum 1 second\r\n\r\n    this.logger.info(`Scheduling reconnection for connection: ${connectionId}`, {\r\n      reason,\r\n      attempt: stats.currentRetryCount + 1,\r\n      delay: `${retryDelay}ms`\r\n    });\r\n\r\n    // Update stats\r\n    stats.isReconnecting = true;\r\n    stats.currentRetryCount++;\r\n\r\n    // Schedule reconnection\r\n    const timer = setTimeout(async () => {\r\n      try {\r\n        await this.performReconnection(connectionId, reason, stats.currentRetryCount);\r\n      } catch (error) {\r\n        this.logger.error(`Reconnection attempt failed: ${connectionId}`, error);\r\n        \r\n        // Schedule next attempt if not at max\r\n        if (stats.currentRetryCount < this.config.maxRetryAttempts) {\r\n          this.scheduleReconnection(connectionId, `Retry after failure: ${error instanceof Error ? error.message : String(error)}`);\r\n        } else {\r\n          stats.isReconnecting = false;\r\n          this.emit('reconnectionFailed', connectionId, stats, 'All attempts exhausted');\r\n        }\r\n      }\r\n    }, retryDelay);\r\n\r\n    this.reconnectionTimers.set(connectionId, timer);\r\n    this.emit('reconnectionScheduled', connectionId, stats, retryDelay);\r\n  }\r\n\r\n  /**\r\n   * Perform actual reconnection attempt\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @param reason - Reason for reconnection\r\n   * @param attemptNumber - Current attempt number\r\n   */\r\n  private async performReconnection(connectionId: string, reason: string, attemptNumber: number): Promise<void> {\r\n    const connection = this.tunnelManager.getConnection(connectionId);\r\n    if (!connection) {\r\n      throw new Error(`Connection not found: ${connectionId}`);\r\n    }\r\n\r\n    const stats = this.reconnectionStats.get(connectionId);\r\n    if (!stats) {\r\n      throw new Error(`Reconnection stats not found: ${connectionId}`);\r\n    }\r\n\r\n    const startTime = Date.now();\r\n    const attempt: ReconnectionAttempt = {\r\n      connectionId,\r\n      attemptNumber,\r\n      timestamp: new Date(),\r\n      reason,\r\n      success: false,\r\n      duration: 0\r\n    };\r\n\r\n    try {\r\n      this.logger.info(`Attempting reconnection: ${connectionId}`, {\r\n        attempt: attemptNumber,\r\n        reason\r\n      });\r\n\r\n      // Disconnect existing connection if still connected\r\n      if (connection.state === TunnelState.CONNECTED) {\r\n        await this.tunnelManager.disconnectTunnel(connectionId);\r\n      }\r\n\r\n      // Wait a moment before reconnecting\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n\r\n      // Attempt to establish new connection\r\n      await this.tunnelManager.establishTunnel(connectionId);\r\n\r\n      // Success\r\n      attempt.success = true;\r\n      attempt.duration = Date.now() - startTime;\r\n\r\n      // Update stats\r\n      stats.totalAttempts++;\r\n      stats.successfulAttempts++;\r\n      stats.lastReconnectionAttempt = new Date();\r\n      stats.isReconnecting = false;\r\n\r\n      // Calculate average reconnection time\r\n      if (stats.successfulAttempts > 0) {\r\n        const totalTime = this.getReconnectionHistory(connectionId)\r\n          .filter(a => a.success)\r\n          .reduce((sum, a) => sum + a.duration, 0);\r\n        stats.averageReconnectionTime = totalTime / stats.successfulAttempts;\r\n      }\r\n\r\n      this.logger.info(`Reconnection successful: ${connectionId}`, {\r\n        attempt: attemptNumber,\r\n        duration: `${attempt.duration}ms`\r\n      });\r\n\r\n      this.emit('reconnectionAttemptSuccessful', connection, attempt, stats);\r\n\r\n    } catch (error) {\r\n      // Failure\r\n      attempt.success = false;\r\n      attempt.error = error instanceof Error ? error : new Error(String(error));\r\n      attempt.duration = Date.now() - startTime;\r\n\r\n      // Update stats\r\n      stats.totalAttempts++;\r\n      stats.failedAttempts++;\r\n      stats.lastReconnectionAttempt = new Date();\r\n\r\n      this.logger.error(`Reconnection attempt failed: ${connectionId}`, {\r\n        attempt: attemptNumber,\r\n        error: attempt.error.message,\r\n        duration: `${attempt.duration}ms`\r\n      });\r\n\r\n      this.emit('reconnectionAttemptFailed', connection, attempt, stats);\r\n      throw attempt.error;\r\n\r\n    } finally {\r\n      // Store attempt in history\r\n      this.storeReconnectionAttempt(connectionId, attempt);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cancel reconnection attempt for a connection\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   */\r\n  private cancelReconnectionAttempt(connectionId: string): void {\r\n    const timer = this.reconnectionTimers.get(connectionId);\r\n    if (timer) {\r\n      clearTimeout(timer);\r\n      this.reconnectionTimers.delete(connectionId);\r\n      \r\n      const stats = this.reconnectionStats.get(connectionId);\r\n      if (stats) {\r\n        stats.isReconnecting = false;\r\n      }\r\n\r\n      this.logger.debug(`Cancelled reconnection attempt for connection: ${connectionId}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cancel all pending reconnection attempts\r\n   */\r\n  private cancelAllReconnectionAttempts(): void {\r\n    for (const [connectionId, timer] of this.reconnectionTimers.entries()) {\r\n      clearTimeout(timer);\r\n      \r\n      const stats = this.reconnectionStats.get(connectionId);\r\n      if (stats) {\r\n        stats.isReconnecting = false;\r\n      }\r\n    }\r\n\r\n    this.reconnectionTimers.clear();\r\n    this.logger.info('Cancelled all pending reconnection attempts');\r\n  }\r\n\r\n  /**\r\n   * Initialize reconnection statistics for a connection\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   */\r\n  private initializeReconnectionStats(connectionId: string): void {\r\n    if (this.reconnectionStats.has(connectionId)) {\r\n      return;\r\n    }\r\n\r\n    const stats: ReconnectionStats = {\r\n      connectionId,\r\n      totalAttempts: 0,\r\n      successfulAttempts: 0,\r\n      failedAttempts: 0,\r\n      averageReconnectionTime: 0,\r\n      longestDowntime: 0,\r\n      shortestDowntime: Infinity,\r\n      lastReconnectionAttempt: null,\r\n      currentRetryCount: 0,\r\n      isReconnecting: false\r\n    };\r\n\r\n    this.reconnectionStats.set(connectionId, stats);\r\n    this.reconnectionAttempts.set(connectionId, []);\r\n  }\r\n\r\n  /**\r\n   * Store reconnection attempt in history\r\n   * \r\n   * @param connectionId - Connection identifier\r\n   * @param attempt - Reconnection attempt to store\r\n   */\r\n  private storeReconnectionAttempt(connectionId: string, attempt: ReconnectionAttempt): void {\r\n    if (!this.reconnectionAttempts.has(connectionId)) {\r\n      this.reconnectionAttempts.set(connectionId, []);\r\n    }\r\n\r\n    const attempts = this.reconnectionAttempts.get(connectionId)!;\r\n    attempts.push(attempt);\r\n\r\n    // Limit history size\r\n    const maxHistorySize = 100;\r\n    if (attempts.length > maxHistorySize) {\r\n      attempts.splice(0, attempts.length - maxHistorySize);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cleanup auto-reconnection resources\r\n   */\r\n  cleanup(): void {\r\n    this.disable();\r\n    this.reconnectionStats.clear();\r\n    this.reconnectionAttempts.clear();\r\n    this.logger.info('Tunnel auto-reconnection cleanup completed');\r\n  }\r\n}\r\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "0779f2c967f0b42b9705ace34f94d9fb1253045b"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2r2y6mo8b2 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2r2y6mo8b2();
cov_2r2y6mo8b2().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2r2y6mo8b2().s[1]++;
exports.TunnelAutoReconnect = void 0;
const events_1 =
/* istanbul ignore next */
(cov_2r2y6mo8b2().s[2]++, require("events"));
const ssh_tunnel_manager_1 =
/* istanbul ignore next */
(cov_2r2y6mo8b2().s[3]++, require("./ssh-tunnel-manager"));
/**
 * Tunnel Auto-Reconnection Manager
 * Implements intelligent auto-reconnection with exponential backoff and failure detection
 */
class TunnelAutoReconnect extends
/* istanbul ignore next */
(events_1.EventEmitter) {
  logger;
  tunnelManager;
  healthMonitor;
  stateTracker;
  config;
  reconnectionStats;
  reconnectionTimers;
  reconnectionAttempts;
  isEnabled;
  constructor(logger, tunnelManager, healthMonitor, stateTracker, config) {
    /* istanbul ignore next */
    cov_2r2y6mo8b2().f[0]++;
    cov_2r2y6mo8b2().s[4]++;
    super();
    /* istanbul ignore next */
    cov_2r2y6mo8b2().s[5]++;
    this.logger = logger;
    /* istanbul ignore next */
    cov_2r2y6mo8b2().s[6]++;
    this.tunnelManager = tunnelManager;
    /* istanbul ignore next */
    cov_2r2y6mo8b2().s[7]++;
    this.healthMonitor = healthMonitor;
    /* istanbul ignore next */
    cov_2r2y6mo8b2().s[8]++;
    this.stateTracker = stateTracker;
    /* istanbul ignore next */
    cov_2r2y6mo8b2().s[9]++;
    this.reconnectionStats = new Map();
    /* istanbul ignore next */
    cov_2r2y6mo8b2().s[10]++;
    this.reconnectionTimers = new Map();
    /* istanbul ignore next */
    cov_2r2y6mo8b2().s[11]++;
    this.reconnectionAttempts = new Map();
    /* istanbul ignore next */
    cov_2r2y6mo8b2().s[12]++;
    this.isEnabled = false;
    // Default configuration
    /* istanbul ignore next */
    cov_2r2y6mo8b2().s[13]++;
    this.config = {
      enabled: true,
      initialRetryDelay: 5000,
      // 5 seconds
      maxRetryDelay: 300000,
      // 5 minutes
      backoffMultiplier: 2,
      maxRetryAttempts: 10,
      resetRetryCountAfter: 300000,
      // 5 minutes
      healthThreshold: 30,
      failureThreshold: 3,
      jitterFactor: 0.1,
      ...config
    };
    /* istanbul ignore next */
    cov_2r2y6mo8b2().s[14]++;
    this.setupEventListeners();
    /* istanbul ignore next */
    cov_2r2y6mo8b2().s[15]++;
    this.logger.info('Tunnel Auto-Reconnection Manager initialized', this.config);
  }
  /**
   * Enable auto-reconnection
   */
  enable() {
    /* istanbul ignore next */
    cov_2r2y6mo8b2().f[1]++;
    cov_2r2y6mo8b2().s[16]++;
    if (this.isEnabled) {
      /* istanbul ignore next */
      cov_2r2y6mo8b2().b[0][0]++;
      cov_2r2y6mo8b2().s[17]++;
      this.logger.warn('Auto-reconnection is already enabled');
      /* istanbul ignore next */
      cov_2r2y6mo8b2().s[18]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2r2y6mo8b2().b[0][1]++;
    }
    cov_2r2y6mo8b2().s[19]++;
    this.isEnabled = true;
    /* istanbul ignore next */
    cov_2r2y6mo8b2().s[20]++;
    this.logger.info('Auto-reconnection enabled');
    // Check existing connections for health issues
    /* istanbul ignore next */
    cov_2r2y6mo8b2().s[21]++;
    this.checkExistingConnections();
    /* istanbul ignore next */
    cov_2r2y6mo8b2().s[22]++;
    this.emit('autoReconnectEnabled');
  }
  /**
   * Disable auto-reconnection
   */
  disable() {
    /* istanbul ignore next */
    cov_2r2y6mo8b2().f[2]++;
    cov_2r2y6mo8b2().s[23]++;
    if (!this.isEnabled) {
      /* istanbul ignore next */
      cov_2r2y6mo8b2().b[1][0]++;
      cov_2r2y6mo8b2().s[24]++;
      this.logger.warn('Auto-reconnection is already disabled');
      /* istanbul ignore next */
      cov_2r2y6mo8b2().s[25]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2r2y6mo8b2().b[1][1]++;
    }
    cov_2r2y6mo8b2().s[26]++;
    this.isEnabled = false;
    /* istanbul ignore next */
    cov_2r2y6mo8b2().s[27]++;
    this.logger.info('Auto-reconnection disabled');
    // Cancel all pending reconnection attempts
    /* istanbul ignore next */
    cov_2r2y6mo8b2().s[28]++;
    this.cancelAllReconnectionAttempts();
    /* istanbul ignore next */
    cov_2r2y6mo8b2().s[29]++;
    this.emit('autoReconnectDisabled');
  }
  /**
   * Get reconnection statistics for a connection
   *
   * @param connectionId - Connection identifier
   * @returns Reconnection statistics or undefined
   */
  getReconnectionStats(connectionId) {
    /* istanbul ignore next */
    cov_2r2y6mo8b2().f[3]++;
    cov_2r2y6mo8b2().s[30]++;
    return this.reconnectionStats.get(connectionId);
  }
  /**
   * Get all reconnection statistics
   *
   * @returns Map of all reconnection statistics
   */
  getAllReconnectionStats() {
    /* istanbul ignore next */
    cov_2r2y6mo8b2().f[4]++;
    cov_2r2y6mo8b2().s[31]++;
    return new Map(this.reconnectionStats);
  }
  /**
   * Get reconnection attempt history for a connection
   *
   * @param connectionId - Connection identifier
   * @param limit - Maximum number of attempts to return
   * @returns Array of reconnection attempts
   */
  getReconnectionHistory(connectionId, limit) {
    /* istanbul ignore next */
    cov_2r2y6mo8b2().f[5]++;
    const attempts =
    /* istanbul ignore next */
    (cov_2r2y6mo8b2().s[32]++,
    /* istanbul ignore next */
    (cov_2r2y6mo8b2().b[2][0]++, this.reconnectionAttempts.get(connectionId)) ||
    /* istanbul ignore next */
    (cov_2r2y6mo8b2().b[2][1]++, []));
    /* istanbul ignore next */
    cov_2r2y6mo8b2().s[33]++;
    return limit ?
    /* istanbul ignore next */
    (cov_2r2y6mo8b2().b[3][0]++, attempts.slice(-limit)) :
    /* istanbul ignore next */
    (cov_2r2y6mo8b2().b[3][1]++, [...attempts]);
  }
  /**
   * Force reconnection for a specific connection
   *
   * @param connectionId - Connection identifier
   * @param reason - Reason for forced reconnection
   * @returns Promise resolving when reconnection is complete
   */
  async forceReconnection(connectionId, reason =
  /* istanbul ignore next */
  (cov_2r2y6mo8b2().b[4][0]++, 'Manual reconnection')) {
    /* istanbul ignore next */
    cov_2r2y6mo8b2().f[6]++;
    const connection =
    /* istanbul ignore next */
    (cov_2r2y6mo8b2().s[34]++, this.tunnelManager.getConnection(connectionId));
    /* istanbul ignore next */
    cov_2r2y6mo8b2().s[35]++;
    if (!connection) {
      /* istanbul ignore next */
      cov_2r2y6mo8b2().b[5][0]++;
      cov_2r2y6mo8b2().s[36]++;
      throw new Error(`Connection not found: ${connectionId}`);
    } else
    /* istanbul ignore next */
    {
      cov_2r2y6mo8b2().b[5][1]++;
    }
    cov_2r2y6mo8b2().s[37]++;
    this.logger.info(`Forcing reconnection for connection: ${connectionId}`, {
      reason
    });
    // Cancel any pending reconnection
    /* istanbul ignore next */
    cov_2r2y6mo8b2().s[38]++;
    this.cancelReconnectionAttempt(connectionId);
    // Perform immediate reconnection
    /* istanbul ignore next */
    cov_2r2y6mo8b2().s[39]++;
    await this.performReconnection(connectionId, reason, 0);
  }
  /**
   * Update reconnection configuration
   *
   * @param newConfig - New configuration parameters
   */
  updateConfig(newConfig) {
    /* istanbul ignore next */
    cov_2r2y6mo8b2().f[7]++;
    cov_2r2y6mo8b2().s[40]++;
    this.config = {
      ...this.config,
      ...newConfig
    };
    /* istanbul ignore next */
    cov_2r2y6mo8b2().s[41]++;
    this.logger.info('Auto-reconnection configuration updated', this.config);
    /* istanbul ignore next */
    cov_2r2y6mo8b2().s[42]++;
    this.emit('configUpdated', this.config);
  }
  /**
   * Setup event listeners for tunnel events
   */
  setupEventListeners() {
    /* istanbul ignore next */
    cov_2r2y6mo8b2().f[8]++;
    cov_2r2y6mo8b2().s[43]++;
    // Listen for tunnel disconnections
    this.tunnelManager.on('tunnelDisconnected', connection => {
      /* istanbul ignore next */
      cov_2r2y6mo8b2().f[9]++;
      cov_2r2y6mo8b2().s[44]++;
      if (this.isEnabled) {
        /* istanbul ignore next */
        cov_2r2y6mo8b2().b[6][0]++;
        cov_2r2y6mo8b2().s[45]++;
        this.handleConnectionLoss(connection, 'Tunnel disconnected');
      } else
      /* istanbul ignore next */
      {
        cov_2r2y6mo8b2().b[6][1]++;
      }
    });
    // Listen for tunnel errors
    /* istanbul ignore next */
    cov_2r2y6mo8b2().s[46]++;
    this.tunnelManager.on('tunnelError', (connection, error) => {
      /* istanbul ignore next */
      cov_2r2y6mo8b2().f[10]++;
      cov_2r2y6mo8b2().s[47]++;
      if (this.isEnabled) {
        /* istanbul ignore next */
        cov_2r2y6mo8b2().b[7][0]++;
        cov_2r2y6mo8b2().s[48]++;
        this.handleConnectionLoss(connection, `Tunnel error: ${error.message}`);
      } else
      /* istanbul ignore next */
      {
        cov_2r2y6mo8b2().b[7][1]++;
      }
    });
    // Listen for health issues
    /* istanbul ignore next */
    cov_2r2y6mo8b2().s[49]++;
    this.healthMonitor.on('connectionUnhealthy', (connection, metrics) => {
      /* istanbul ignore next */
      cov_2r2y6mo8b2().f[11]++;
      cov_2r2y6mo8b2().s[50]++;
      if (this.isEnabled) {
        /* istanbul ignore next */
        cov_2r2y6mo8b2().b[8][0]++;
        cov_2r2y6mo8b2().s[51]++;
        this.handleHealthIssue(connection, metrics);
      } else
      /* istanbul ignore next */
      {
        cov_2r2y6mo8b2().b[8][1]++;
      }
    });
    // Listen for successful connections to reset retry counts
    /* istanbul ignore next */
    cov_2r2y6mo8b2().s[52]++;
    this.tunnelManager.on('tunnelConnected', connection => {
      /* istanbul ignore next */
      cov_2r2y6mo8b2().f[12]++;
      cov_2r2y6mo8b2().s[53]++;
      this.handleSuccessfulConnection(connection);
    });
    // Listen for state changes
    /* istanbul ignore next */
    cov_2r2y6mo8b2().s[54]++;
    this.stateTracker.on('connectionFailed', (connection, stateChangeEvent) => {
      /* istanbul ignore next */
      cov_2r2y6mo8b2().f[13]++;
      cov_2r2y6mo8b2().s[55]++;
      if (this.isEnabled) {
        /* istanbul ignore next */
        cov_2r2y6mo8b2().b[9][0]++;
        cov_2r2y6mo8b2().s[56]++;
        this.handleConnectionFailure(connection, 'Connection failed');
      } else
      /* istanbul ignore next */
      {
        cov_2r2y6mo8b2().b[9][1]++;
      }
    });
  }
  /**
   * Check existing connections for health issues
   */
  checkExistingConnections() {
    /* istanbul ignore next */
    cov_2r2y6mo8b2().f[14]++;
    const connections =
    /* istanbul ignore next */
    (cov_2r2y6mo8b2().s[57]++, this.tunnelManager.getAllConnections());
    /* istanbul ignore next */
    cov_2r2y6mo8b2().s[58]++;
    for (const connection of connections) {
      /* istanbul ignore next */
      cov_2r2y6mo8b2().s[59]++;
      // Initialize stats if not exists
      this.initializeReconnectionStats(connection.id);
      // Check if connection needs reconnection
      /* istanbul ignore next */
      cov_2r2y6mo8b2().s[60]++;
      if (
      /* istanbul ignore next */
      (cov_2r2y6mo8b2().b[11][0]++, connection.state === ssh_tunnel_manager_1.TunnelState.FAILED) ||
      /* istanbul ignore next */
      (cov_2r2y6mo8b2().b[11][1]++, connection.state === ssh_tunnel_manager_1.TunnelState.DISCONNECTED)) {
        /* istanbul ignore next */
        cov_2r2y6mo8b2().b[10][0]++;
        cov_2r2y6mo8b2().s[61]++;
        this.handleConnectionLoss(connection, 'Connection check on enable');
      } else {
        /* istanbul ignore next */
        cov_2r2y6mo8b2().b[10][1]++;
        // Check health metrics
        const healthMetrics =
        /* istanbul ignore next */
        (cov_2r2y6mo8b2().s[62]++, this.healthMonitor.getHealthMetrics(connection.id));
        /* istanbul ignore next */
        cov_2r2y6mo8b2().s[63]++;
        if (
        /* istanbul ignore next */
        (cov_2r2y6mo8b2().b[13][0]++, healthMetrics) &&
        /* istanbul ignore next */
        (cov_2r2y6mo8b2().b[13][1]++, !healthMetrics.isHealthy)) {
          /* istanbul ignore next */
          cov_2r2y6mo8b2().b[12][0]++;
          cov_2r2y6mo8b2().s[64]++;
          this.handleHealthIssue(connection, healthMetrics);
        } else
        /* istanbul ignore next */
        {
          cov_2r2y6mo8b2().b[12][1]++;
        }
      }
    }
  }
  /**
   * Handle connection loss event
   *
   * @param connection - Lost connection
   * @param reason - Reason for connection loss
   */
  handleConnectionLoss(connection, reason) {
    /* istanbul ignore next */
    cov_2r2y6mo8b2().f[15]++;
    cov_2r2y6mo8b2().s[65]++;
    if (!this.config.enabled) {
      /* istanbul ignore next */
      cov_2r2y6mo8b2().b[14][0]++;
      cov_2r2y6mo8b2().s[66]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2r2y6mo8b2().b[14][1]++;
    }
    cov_2r2y6mo8b2().s[67]++;
    this.logger.warn(`Connection lost: ${connection.id}`, {
      reason
    });
    // Initialize stats if not exists
    /* istanbul ignore next */
    cov_2r2y6mo8b2().s[68]++;
    this.initializeReconnectionStats(connection.id);
    // Schedule reconnection
    /* istanbul ignore next */
    cov_2r2y6mo8b2().s[69]++;
    this.scheduleReconnection(connection.id, reason);
  }
  /**
   * Handle health issue event
   *
   * @param connection - Connection with health issues
   * @param metrics - Health metrics
   */
  handleHealthIssue(connection, metrics) {
    /* istanbul ignore next */
    cov_2r2y6mo8b2().f[16]++;
    cov_2r2y6mo8b2().s[70]++;
    if (!this.config.enabled) {
      /* istanbul ignore next */
      cov_2r2y6mo8b2().b[15][0]++;
      cov_2r2y6mo8b2().s[71]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2r2y6mo8b2().b[15][1]++;
    }
    // Check if health is below threshold
    cov_2r2y6mo8b2().s[72]++;
    if (metrics.healthScore < this.config.healthThreshold) {
      /* istanbul ignore next */
      cov_2r2y6mo8b2().b[16][0]++;
      cov_2r2y6mo8b2().s[73]++;
      this.logger.warn(`Connection health below threshold: ${connection.id}`, {
        healthScore: metrics.healthScore,
        threshold: this.config.healthThreshold
      });
      /* istanbul ignore next */
      cov_2r2y6mo8b2().s[74]++;
      this.scheduleReconnection(connection.id, `Health score below threshold: ${metrics.healthScore}`);
    } else
    /* istanbul ignore next */
    {
      cov_2r2y6mo8b2().b[16][1]++;
    }
    // Check for consecutive failures
    cov_2r2y6mo8b2().s[75]++;
    if (metrics.consecutiveFailures >= this.config.failureThreshold) {
      /* istanbul ignore next */
      cov_2r2y6mo8b2().b[17][0]++;
      cov_2r2y6mo8b2().s[76]++;
      this.logger.warn(`Connection has too many consecutive failures: ${connection.id}`, {
        failures: metrics.consecutiveFailures,
        threshold: this.config.failureThreshold
      });
      /* istanbul ignore next */
      cov_2r2y6mo8b2().s[77]++;
      this.scheduleReconnection(connection.id, `Too many consecutive failures: ${metrics.consecutiveFailures}`);
    } else
    /* istanbul ignore next */
    {
      cov_2r2y6mo8b2().b[17][1]++;
    }
  }
  /**
   * Handle connection failure event
   *
   * @param connection - Failed connection
   * @param reason - Reason for failure
   */
  handleConnectionFailure(connection, reason) {
    /* istanbul ignore next */
    cov_2r2y6mo8b2().f[17]++;
    cov_2r2y6mo8b2().s[78]++;
    if (!this.config.enabled) {
      /* istanbul ignore next */
      cov_2r2y6mo8b2().b[18][0]++;
      cov_2r2y6mo8b2().s[79]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2r2y6mo8b2().b[18][1]++;
    }
    cov_2r2y6mo8b2().s[80]++;
    this.logger.error(`Connection failed: ${connection.id}`, {
      reason
    });
    /* istanbul ignore next */
    cov_2r2y6mo8b2().s[81]++;
    this.scheduleReconnection(connection.id, reason);
  }
  /**
   * Handle successful connection event
   *
   * @param connection - Successfully connected tunnel
   */
  handleSuccessfulConnection(connection) {
    /* istanbul ignore next */
    cov_2r2y6mo8b2().f[18]++;
    const stats =
    /* istanbul ignore next */
    (cov_2r2y6mo8b2().s[82]++, this.reconnectionStats.get(connection.id));
    /* istanbul ignore next */
    cov_2r2y6mo8b2().s[83]++;
    if (!stats) {
      /* istanbul ignore next */
      cov_2r2y6mo8b2().b[19][0]++;
      cov_2r2y6mo8b2().s[84]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2r2y6mo8b2().b[19][1]++;
    }
    // Cancel any pending reconnection
    cov_2r2y6mo8b2().s[85]++;
    this.cancelReconnectionAttempt(connection.id);
    // Update stats
    /* istanbul ignore next */
    cov_2r2y6mo8b2().s[86]++;
    stats.isReconnecting = false;
    /* istanbul ignore next */
    cov_2r2y6mo8b2().s[87]++;
    stats.successfulAttempts++;
    // Reset retry count after successful connection
    /* istanbul ignore next */
    cov_2r2y6mo8b2().s[88]++;
    setTimeout(() => {
      /* istanbul ignore next */
      cov_2r2y6mo8b2().f[19]++;
      cov_2r2y6mo8b2().s[89]++;
      if (stats.currentRetryCount > 0) {
        /* istanbul ignore next */
        cov_2r2y6mo8b2().b[20][0]++;
        cov_2r2y6mo8b2().s[90]++;
        this.logger.info(`Resetting retry count for connection: ${connection.id}`);
        /* istanbul ignore next */
        cov_2r2y6mo8b2().s[91]++;
        stats.currentRetryCount = 0;
      } else
      /* istanbul ignore next */
      {
        cov_2r2y6mo8b2().b[20][1]++;
      }
    }, this.config.resetRetryCountAfter);
    /* istanbul ignore next */
    cov_2r2y6mo8b2().s[92]++;
    this.logger.info(`Connection successfully established: ${connection.id}`);
    /* istanbul ignore next */
    cov_2r2y6mo8b2().s[93]++;
    this.emit('reconnectionSuccessful', connection, stats);
  }
  /**
   * Schedule reconnection attempt
   *
   * @param connectionId - Connection identifier
   * @param reason - Reason for reconnection
   */
  scheduleReconnection(connectionId, reason) {
    /* istanbul ignore next */
    cov_2r2y6mo8b2().f[20]++;
    cov_2r2y6mo8b2().s[94]++;
    // Cancel any existing reconnection timer
    this.cancelReconnectionAttempt(connectionId);
    const stats =
    /* istanbul ignore next */
    (cov_2r2y6mo8b2().s[95]++, this.reconnectionStats.get(connectionId));
    /* istanbul ignore next */
    cov_2r2y6mo8b2().s[96]++;
    if (!stats) {
      /* istanbul ignore next */
      cov_2r2y6mo8b2().b[21][0]++;
      cov_2r2y6mo8b2().s[97]++;
      this.initializeReconnectionStats(connectionId);
      /* istanbul ignore next */
      cov_2r2y6mo8b2().s[98]++;
      return this.scheduleReconnection(connectionId, reason);
    } else
    /* istanbul ignore next */
    {
      cov_2r2y6mo8b2().b[21][1]++;
    }
    // Check if max attempts reached
    cov_2r2y6mo8b2().s[99]++;
    if (stats.currentRetryCount >= this.config.maxRetryAttempts) {
      /* istanbul ignore next */
      cov_2r2y6mo8b2().b[22][0]++;
      cov_2r2y6mo8b2().s[100]++;
      this.logger.error(`Max reconnection attempts reached for connection: ${connectionId}`, {
        attempts: stats.currentRetryCount,
        maxAttempts: this.config.maxRetryAttempts
      });
      /* istanbul ignore next */
      cov_2r2y6mo8b2().s[101]++;
      stats.isReconnecting = false;
      /* istanbul ignore next */
      cov_2r2y6mo8b2().s[102]++;
      this.emit('reconnectionFailed', connectionId, stats, 'Max attempts reached');
      /* istanbul ignore next */
      cov_2r2y6mo8b2().s[103]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2r2y6mo8b2().b[22][1]++;
    }
    // Calculate retry delay with exponential backoff and jitter
    const baseDelay =
    /* istanbul ignore next */
    (cov_2r2y6mo8b2().s[104]++, Math.min(this.config.initialRetryDelay * Math.pow(this.config.backoffMultiplier, stats.currentRetryCount), this.config.maxRetryDelay));
    // Add jitter to prevent thundering herd
    const jitter =
    /* istanbul ignore next */
    (cov_2r2y6mo8b2().s[105]++, baseDelay * this.config.jitterFactor * (Math.random() - 0.5));
    const retryDelay =
    /* istanbul ignore next */
    (cov_2r2y6mo8b2().s[106]++, Math.max(1000, baseDelay + jitter)); // Minimum 1 second
    /* istanbul ignore next */
    cov_2r2y6mo8b2().s[107]++;
    this.logger.info(`Scheduling reconnection for connection: ${connectionId}`, {
      reason,
      attempt: stats.currentRetryCount + 1,
      delay: `${retryDelay}ms`
    });
    // Update stats
    /* istanbul ignore next */
    cov_2r2y6mo8b2().s[108]++;
    stats.isReconnecting = true;
    /* istanbul ignore next */
    cov_2r2y6mo8b2().s[109]++;
    stats.currentRetryCount++;
    // Schedule reconnection
    const timer =
    /* istanbul ignore next */
    (cov_2r2y6mo8b2().s[110]++, setTimeout(async () => {
      /* istanbul ignore next */
      cov_2r2y6mo8b2().f[21]++;
      cov_2r2y6mo8b2().s[111]++;
      try {
        /* istanbul ignore next */
        cov_2r2y6mo8b2().s[112]++;
        await this.performReconnection(connectionId, reason, stats.currentRetryCount);
      } catch (error) {
        /* istanbul ignore next */
        cov_2r2y6mo8b2().s[113]++;
        this.logger.error(`Reconnection attempt failed: ${connectionId}`, error);
        // Schedule next attempt if not at max
        /* istanbul ignore next */
        cov_2r2y6mo8b2().s[114]++;
        if (stats.currentRetryCount < this.config.maxRetryAttempts) {
          /* istanbul ignore next */
          cov_2r2y6mo8b2().b[23][0]++;
          cov_2r2y6mo8b2().s[115]++;
          this.scheduleReconnection(connectionId, `Retry after failure: ${error instanceof Error ?
          /* istanbul ignore next */
          (cov_2r2y6mo8b2().b[24][0]++, error.message) :
          /* istanbul ignore next */
          (cov_2r2y6mo8b2().b[24][1]++, String(error))}`);
        } else {
          /* istanbul ignore next */
          cov_2r2y6mo8b2().b[23][1]++;
          cov_2r2y6mo8b2().s[116]++;
          stats.isReconnecting = false;
          /* istanbul ignore next */
          cov_2r2y6mo8b2().s[117]++;
          this.emit('reconnectionFailed', connectionId, stats, 'All attempts exhausted');
        }
      }
    }, retryDelay));
    /* istanbul ignore next */
    cov_2r2y6mo8b2().s[118]++;
    this.reconnectionTimers.set(connectionId, timer);
    /* istanbul ignore next */
    cov_2r2y6mo8b2().s[119]++;
    this.emit('reconnectionScheduled', connectionId, stats, retryDelay);
  }
  /**
   * Perform actual reconnection attempt
   *
   * @param connectionId - Connection identifier
   * @param reason - Reason for reconnection
   * @param attemptNumber - Current attempt number
   */
  async performReconnection(connectionId, reason, attemptNumber) {
    /* istanbul ignore next */
    cov_2r2y6mo8b2().f[22]++;
    const connection =
    /* istanbul ignore next */
    (cov_2r2y6mo8b2().s[120]++, this.tunnelManager.getConnection(connectionId));
    /* istanbul ignore next */
    cov_2r2y6mo8b2().s[121]++;
    if (!connection) {
      /* istanbul ignore next */
      cov_2r2y6mo8b2().b[25][0]++;
      cov_2r2y6mo8b2().s[122]++;
      throw new Error(`Connection not found: ${connectionId}`);
    } else
    /* istanbul ignore next */
    {
      cov_2r2y6mo8b2().b[25][1]++;
    }
    const stats =
    /* istanbul ignore next */
    (cov_2r2y6mo8b2().s[123]++, this.reconnectionStats.get(connectionId));
    /* istanbul ignore next */
    cov_2r2y6mo8b2().s[124]++;
    if (!stats) {
      /* istanbul ignore next */
      cov_2r2y6mo8b2().b[26][0]++;
      cov_2r2y6mo8b2().s[125]++;
      throw new Error(`Reconnection stats not found: ${connectionId}`);
    } else
    /* istanbul ignore next */
    {
      cov_2r2y6mo8b2().b[26][1]++;
    }
    const startTime =
    /* istanbul ignore next */
    (cov_2r2y6mo8b2().s[126]++, Date.now());
    const attempt =
    /* istanbul ignore next */
    (cov_2r2y6mo8b2().s[127]++, {
      connectionId,
      attemptNumber,
      timestamp: new Date(),
      reason,
      success: false,
      duration: 0
    });
    /* istanbul ignore next */
    cov_2r2y6mo8b2().s[128]++;
    try {
      /* istanbul ignore next */
      cov_2r2y6mo8b2().s[129]++;
      this.logger.info(`Attempting reconnection: ${connectionId}`, {
        attempt: attemptNumber,
        reason
      });
      // Disconnect existing connection if still connected
      /* istanbul ignore next */
      cov_2r2y6mo8b2().s[130]++;
      if (connection.state === ssh_tunnel_manager_1.TunnelState.CONNECTED) {
        /* istanbul ignore next */
        cov_2r2y6mo8b2().b[27][0]++;
        cov_2r2y6mo8b2().s[131]++;
        await this.tunnelManager.disconnectTunnel(connectionId);
      } else
      /* istanbul ignore next */
      {
        cov_2r2y6mo8b2().b[27][1]++;
      }
      // Wait a moment before reconnecting
      cov_2r2y6mo8b2().s[132]++;
      await new Promise(resolve => {
        /* istanbul ignore next */
        cov_2r2y6mo8b2().f[23]++;
        cov_2r2y6mo8b2().s[133]++;
        return setTimeout(resolve, 1000);
      });
      // Attempt to establish new connection
      /* istanbul ignore next */
      cov_2r2y6mo8b2().s[134]++;
      await this.tunnelManager.establishTunnel(connectionId);
      // Success
      /* istanbul ignore next */
      cov_2r2y6mo8b2().s[135]++;
      attempt.success = true;
      /* istanbul ignore next */
      cov_2r2y6mo8b2().s[136]++;
      attempt.duration = Date.now() - startTime;
      // Update stats
      /* istanbul ignore next */
      cov_2r2y6mo8b2().s[137]++;
      stats.totalAttempts++;
      /* istanbul ignore next */
      cov_2r2y6mo8b2().s[138]++;
      stats.successfulAttempts++;
      /* istanbul ignore next */
      cov_2r2y6mo8b2().s[139]++;
      stats.lastReconnectionAttempt = new Date();
      /* istanbul ignore next */
      cov_2r2y6mo8b2().s[140]++;
      stats.isReconnecting = false;
      // Calculate average reconnection time
      /* istanbul ignore next */
      cov_2r2y6mo8b2().s[141]++;
      if (stats.successfulAttempts > 0) {
        /* istanbul ignore next */
        cov_2r2y6mo8b2().b[28][0]++;
        const totalTime =
        /* istanbul ignore next */
        (cov_2r2y6mo8b2().s[142]++, this.getReconnectionHistory(connectionId).filter(a => {
          /* istanbul ignore next */
          cov_2r2y6mo8b2().f[24]++;
          cov_2r2y6mo8b2().s[143]++;
          return a.success;
        }).reduce((sum, a) => {
          /* istanbul ignore next */
          cov_2r2y6mo8b2().f[25]++;
          cov_2r2y6mo8b2().s[144]++;
          return sum + a.duration;
        }, 0));
        /* istanbul ignore next */
        cov_2r2y6mo8b2().s[145]++;
        stats.averageReconnectionTime = totalTime / stats.successfulAttempts;
      } else
      /* istanbul ignore next */
      {
        cov_2r2y6mo8b2().b[28][1]++;
      }
      cov_2r2y6mo8b2().s[146]++;
      this.logger.info(`Reconnection successful: ${connectionId}`, {
        attempt: attemptNumber,
        duration: `${attempt.duration}ms`
      });
      /* istanbul ignore next */
      cov_2r2y6mo8b2().s[147]++;
      this.emit('reconnectionAttemptSuccessful', connection, attempt, stats);
    } catch (error) {
      /* istanbul ignore next */
      cov_2r2y6mo8b2().s[148]++;
      // Failure
      attempt.success = false;
      /* istanbul ignore next */
      cov_2r2y6mo8b2().s[149]++;
      attempt.error = error instanceof Error ?
      /* istanbul ignore next */
      (cov_2r2y6mo8b2().b[29][0]++, error) :
      /* istanbul ignore next */
      (cov_2r2y6mo8b2().b[29][1]++, new Error(String(error)));
      /* istanbul ignore next */
      cov_2r2y6mo8b2().s[150]++;
      attempt.duration = Date.now() - startTime;
      // Update stats
      /* istanbul ignore next */
      cov_2r2y6mo8b2().s[151]++;
      stats.totalAttempts++;
      /* istanbul ignore next */
      cov_2r2y6mo8b2().s[152]++;
      stats.failedAttempts++;
      /* istanbul ignore next */
      cov_2r2y6mo8b2().s[153]++;
      stats.lastReconnectionAttempt = new Date();
      /* istanbul ignore next */
      cov_2r2y6mo8b2().s[154]++;
      this.logger.error(`Reconnection attempt failed: ${connectionId}`, {
        attempt: attemptNumber,
        error: attempt.error.message,
        duration: `${attempt.duration}ms`
      });
      /* istanbul ignore next */
      cov_2r2y6mo8b2().s[155]++;
      this.emit('reconnectionAttemptFailed', connection, attempt, stats);
      /* istanbul ignore next */
      cov_2r2y6mo8b2().s[156]++;
      throw attempt.error;
    } finally {
      /* istanbul ignore next */
      cov_2r2y6mo8b2().s[157]++;
      // Store attempt in history
      this.storeReconnectionAttempt(connectionId, attempt);
    }
  }
  /**
   * Cancel reconnection attempt for a connection
   *
   * @param connectionId - Connection identifier
   */
  cancelReconnectionAttempt(connectionId) {
    /* istanbul ignore next */
    cov_2r2y6mo8b2().f[26]++;
    const timer =
    /* istanbul ignore next */
    (cov_2r2y6mo8b2().s[158]++, this.reconnectionTimers.get(connectionId));
    /* istanbul ignore next */
    cov_2r2y6mo8b2().s[159]++;
    if (timer) {
      /* istanbul ignore next */
      cov_2r2y6mo8b2().b[30][0]++;
      cov_2r2y6mo8b2().s[160]++;
      clearTimeout(timer);
      /* istanbul ignore next */
      cov_2r2y6mo8b2().s[161]++;
      this.reconnectionTimers.delete(connectionId);
      const stats =
      /* istanbul ignore next */
      (cov_2r2y6mo8b2().s[162]++, this.reconnectionStats.get(connectionId));
      /* istanbul ignore next */
      cov_2r2y6mo8b2().s[163]++;
      if (stats) {
        /* istanbul ignore next */
        cov_2r2y6mo8b2().b[31][0]++;
        cov_2r2y6mo8b2().s[164]++;
        stats.isReconnecting = false;
      } else
      /* istanbul ignore next */
      {
        cov_2r2y6mo8b2().b[31][1]++;
      }
      cov_2r2y6mo8b2().s[165]++;
      this.logger.debug(`Cancelled reconnection attempt for connection: ${connectionId}`);
    } else
    /* istanbul ignore next */
    {
      cov_2r2y6mo8b2().b[30][1]++;
    }
  }
  /**
   * Cancel all pending reconnection attempts
   */
  cancelAllReconnectionAttempts() {
    /* istanbul ignore next */
    cov_2r2y6mo8b2().f[27]++;
    cov_2r2y6mo8b2().s[166]++;
    for (const [connectionId, timer] of this.reconnectionTimers.entries()) {
      /* istanbul ignore next */
      cov_2r2y6mo8b2().s[167]++;
      clearTimeout(timer);
      const stats =
      /* istanbul ignore next */
      (cov_2r2y6mo8b2().s[168]++, this.reconnectionStats.get(connectionId));
      /* istanbul ignore next */
      cov_2r2y6mo8b2().s[169]++;
      if (stats) {
        /* istanbul ignore next */
        cov_2r2y6mo8b2().b[32][0]++;
        cov_2r2y6mo8b2().s[170]++;
        stats.isReconnecting = false;
      } else
      /* istanbul ignore next */
      {
        cov_2r2y6mo8b2().b[32][1]++;
      }
    }
    /* istanbul ignore next */
    cov_2r2y6mo8b2().s[171]++;
    this.reconnectionTimers.clear();
    /* istanbul ignore next */
    cov_2r2y6mo8b2().s[172]++;
    this.logger.info('Cancelled all pending reconnection attempts');
  }
  /**
   * Initialize reconnection statistics for a connection
   *
   * @param connectionId - Connection identifier
   */
  initializeReconnectionStats(connectionId) {
    /* istanbul ignore next */
    cov_2r2y6mo8b2().f[28]++;
    cov_2r2y6mo8b2().s[173]++;
    if (this.reconnectionStats.has(connectionId)) {
      /* istanbul ignore next */
      cov_2r2y6mo8b2().b[33][0]++;
      cov_2r2y6mo8b2().s[174]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2r2y6mo8b2().b[33][1]++;
    }
    const stats =
    /* istanbul ignore next */
    (cov_2r2y6mo8b2().s[175]++, {
      connectionId,
      totalAttempts: 0,
      successfulAttempts: 0,
      failedAttempts: 0,
      averageReconnectionTime: 0,
      longestDowntime: 0,
      shortestDowntime: Infinity,
      lastReconnectionAttempt: null,
      currentRetryCount: 0,
      isReconnecting: false
    });
    /* istanbul ignore next */
    cov_2r2y6mo8b2().s[176]++;
    this.reconnectionStats.set(connectionId, stats);
    /* istanbul ignore next */
    cov_2r2y6mo8b2().s[177]++;
    this.reconnectionAttempts.set(connectionId, []);
  }
  /**
   * Store reconnection attempt in history
   *
   * @param connectionId - Connection identifier
   * @param attempt - Reconnection attempt to store
   */
  storeReconnectionAttempt(connectionId, attempt) {
    /* istanbul ignore next */
    cov_2r2y6mo8b2().f[29]++;
    cov_2r2y6mo8b2().s[178]++;
    if (!this.reconnectionAttempts.has(connectionId)) {
      /* istanbul ignore next */
      cov_2r2y6mo8b2().b[34][0]++;
      cov_2r2y6mo8b2().s[179]++;
      this.reconnectionAttempts.set(connectionId, []);
    } else
    /* istanbul ignore next */
    {
      cov_2r2y6mo8b2().b[34][1]++;
    }
    const attempts =
    /* istanbul ignore next */
    (cov_2r2y6mo8b2().s[180]++, this.reconnectionAttempts.get(connectionId));
    /* istanbul ignore next */
    cov_2r2y6mo8b2().s[181]++;
    attempts.push(attempt);
    // Limit history size
    const maxHistorySize =
    /* istanbul ignore next */
    (cov_2r2y6mo8b2().s[182]++, 100);
    /* istanbul ignore next */
    cov_2r2y6mo8b2().s[183]++;
    if (attempts.length > maxHistorySize) {
      /* istanbul ignore next */
      cov_2r2y6mo8b2().b[35][0]++;
      cov_2r2y6mo8b2().s[184]++;
      attempts.splice(0, attempts.length - maxHistorySize);
    } else
    /* istanbul ignore next */
    {
      cov_2r2y6mo8b2().b[35][1]++;
    }
  }
  /**
   * Cleanup auto-reconnection resources
   */
  cleanup() {
    /* istanbul ignore next */
    cov_2r2y6mo8b2().f[30]++;
    cov_2r2y6mo8b2().s[185]++;
    this.disable();
    /* istanbul ignore next */
    cov_2r2y6mo8b2().s[186]++;
    this.reconnectionStats.clear();
    /* istanbul ignore next */
    cov_2r2y6mo8b2().s[187]++;
    this.reconnectionAttempts.clear();
    /* istanbul ignore next */
    cov_2r2y6mo8b2().s[188]++;
    this.logger.info('Tunnel auto-reconnection cleanup completed');
  }
}
/* istanbul ignore next */
cov_2r2y6mo8b2().s[189]++;
exports.TunnelAutoReconnect = TunnelAutoReconnect;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,