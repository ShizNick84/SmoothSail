{"file":"C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\tests\\integration\\system-integration.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nick\\Desktop\\SmoothSail\\src\\tests\\integration\\system-integration.test.ts"],"sourcesContent":["/**\r\n * System Integration Tests\r\n * \r\n * End-to-end system integration tests covering the complete trading system\r\n * including hardware monitoring, security, and performance validation.\r\n * \r\n * Requirements: 17.2, 17.4, 17.5 - System integration and performance testing\r\n */\r\n\r\nimport { SystemMonitor } from '@/infrastructure/system-monitor';\r\nimport { PerformanceOptimizer } from '@/infrastructure/performance-optimizer';\r\nimport { AutoRestartManager } from '@/infrastructure/auto-restart-manager';\r\nimport { AdminTools } from '@/infrastructure/admin-tools';\r\n\r\n// Mock external dependencies\r\njest.mock('@/core/logging/logger', () => ({\r\n  logger: {\r\n    info: jest.fn(),\r\n    debug: jest.fn(),\r\n    warn: jest.fn(),\r\n    error: jest.fn()\r\n  }\r\n}));\r\n\r\njest.mock('systeminformation', () => ({\r\n  cpu: jest.fn().mockResolvedValue({\r\n    manufacturer: 'Intel',\r\n    brand: 'Intel(R) Core(TM) i5-1135G7',\r\n    speed: 2.4,\r\n    cores: 4,\r\n    physicalCores: 4,\r\n    processors: 1\r\n  }),\r\n  mem: jest.fn().mockResolvedValue({\r\n    total: 12884901888, // 12GB\r\n    free: 2147483648,   // 2GB\r\n    used: 10737418240,  // 10GB\r\n    active: 8589934592  // 8GB\r\n  }),\r\n  fsSize: jest.fn().mockResolvedValue([{\r\n    fs: '/dev/nvme0n1p1',\r\n    type: 'ext4',\r\n    size: 274877906944, // 256GB\r\n    used: 137438953472, // 128GB\r\n    available: 137438953472, // 128GB\r\n    use: 50.0,\r\n    mount: '/'\r\n  }]),\r\n  networkStats: jest.fn().mockResolvedValue([{\r\n    iface: 'eth0',\r\n    operstate: 'up',\r\n    rx_bytes: 1073741824, // 1GB\r\n    tx_bytes: 536870912,  // 512MB\r\n    rx_sec: 1048576,      // 1MB/s\r\n    tx_sec: 524288        // 512KB/s\r\n  }]),\r\n  currentLoad: jest.fn().mockResolvedValue({\r\n    avgLoad: 1.5,\r\n    currentLoad: 25.5,\r\n    currentLoadUser: 15.2,\r\n    currentLoadSystem: 10.3,\r\n    currentLoadNice: 0.0,\r\n    currentLoadIdle: 74.5\r\n  }),\r\n  cpuTemperature: jest.fn().mockResolvedValue({\r\n    main: 45.0,\r\n    cores: [42.0, 43.0, 45.0, 44.0],\r\n    max: 45.0,\r\n    socket: [],\r\n    chipset: null\r\n  })\r\n}));\r\n\r\ndescribe('System Integration Tests', () => {\r\n  let systemMonitor: SystemMonitor;\r\n  let performanceOptimizer: PerformanceOptimizer;\r\n  let autoRestartManager: AutoRestartManager;\r\n  let adminTools: AdminTools;\r\n\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    \r\n    systemMonitor = new SystemMonitor();\r\n    performanceOptimizer = new PerformanceOptimizer();\r\n    autoRestartManager = new AutoRestartManager();\r\n    adminTools = new AdminTools();\r\n  });\r\n\r\n  describe('Intel NUC Hardware Integration', () => {\r\n    it('should monitor Intel NUC hardware components', async () => {\r\n      const metrics = await systemMonitor.getDetailedSystemMetrics();\r\n      \r\n      // Validate CPU monitoring\r\n      expect(metrics.cpu).toBeDefined();\r\n      expect(metrics.cpu.brand).toContain('Intel');\r\n      expect(metrics.cpu.cores).toBeGreaterThan(0);\r\n      expect(metrics.cpu.usage).toBeGreaterThanOrEqual(0);\r\n      expect(metrics.cpu.usage).toBeLessThanOrEqual(100);\r\n      expect(metrics.cpu.temperature).toBeGreaterThan(0);\r\n      expect(metrics.cpu.temperature).toBeLessThan(100);\r\n\r\n      // Validate memory monitoring (12GB expected)\r\n      expect(metrics.memory).toBeDefined();\r\n      expect(metrics.memory.total).toBeGreaterThan(10 * 1024 * 1024 * 1024); // > 10GB\r\n      expect(metrics.memory.total).toBeLessThan(16 * 1024 * 1024 * 1024);    // < 16GB\r\n      expect(metrics.memory.used).toBeGreaterThan(0);\r\n      expect(metrics.memory.available).toBeGreaterThan(0);\r\n      expect(metrics.memory.usage).toBeGreaterThanOrEqual(0);\r\n      expect(metrics.memory.usage).toBeLessThanOrEqual(100);\r\n\r\n      // Validate storage monitoring (256GB M.2 SSD expected)\r\n      expect(metrics.storage).toBeDefined();\r\n      expect(metrics.storage.total).toBeGreaterThan(200 * 1024 * 1024 * 1024); // > 200GB\r\n      expect(metrics.storage.total).toBeLessThan(300 * 1024 * 1024 * 1024);    // < 300GB\r\n      expect(metrics.storage.used).toBeGreaterThan(0);\r\n      expect(metrics.storage.available).toBeGreaterThan(0);\r\n      expect(metrics.storage.usage).toBeGreaterThanOrEqual(0);\r\n      expect(metrics.storage.usage).toBeLessThanOrEqual(100);\r\n\r\n      // Validate network monitoring\r\n      expect(metrics.network).toBeDefined();\r\n      expect(metrics.network.interfaces).toBeDefined();\r\n      expect(Array.isArray(metrics.network.interfaces)).toBe(true);\r\n      expect(metrics.network.bytesReceived).toBeGreaterThanOrEqual(0);\r\n      expect(metrics.network.bytesSent).toBeGreaterThanOrEqual(0);\r\n    });\r\n\r\n    it('should detect hardware performance issues', async () => {\r\n      // Mock high resource usage scenario\r\n      const mockHighUsageMetrics = {\r\n        cpu: {\r\n          brand: 'Intel(R) Core(TM) i5-1135G7',\r\n          cores: 4,\r\n          usage: 95.5,\r\n          temperature: 85.0,\r\n          frequency: 2400\r\n        },\r\n        memory: {\r\n          total: 12884901888,\r\n          used: 12347418240, // 95% usage\r\n          available: 537483648,\r\n          usage: 95.8\r\n        },\r\n        storage: {\r\n          total: 274877906944,\r\n          used: 261993005056, // 95% usage\r\n          available: 12884901888,\r\n          usage: 95.3\r\n        },\r\n        network: {\r\n          interfaces: ['eth0', 'wlan0'],\r\n          bytesReceived: 1073741824,\r\n          bytesSent: 536870912,\r\n          currentSpeed: 1000\r\n        },\r\n        timestamp: new Date()\r\n      };\r\n\r\n      // Override system monitor to return high usage\r\n      systemMonitor.getDetailedSystemMetrics = jest.fn().mockResolvedValue(mockHighUsageMetrics);\r\n\r\n      const metrics = await systemMonitor.getDetailedSystemMetrics();\r\n      const issues = await systemMonitor.detectPerformanceIssues(metrics);\r\n\r\n      // Should detect high resource usage\r\n      expect(issues.length).toBeGreaterThan(0);\r\n      \r\n      const cpuIssue = issues.find(issue => issue.component === 'CPU');\r\n      const memoryIssue = issues.find(issue => issue.component === 'MEMORY');\r\n      const storageIssue = issues.find(issue => issue.component === 'STORAGE');\r\n\r\n      expect(cpuIssue).toBeDefined();\r\n      expect(memoryIssue).toBeDefined();\r\n      expect(storageIssue).toBeDefined();\r\n\r\n      if (cpuIssue) {\r\n        expect(cpuIssue.severity).toMatch(/^(MEDIUM|HIGH|CRITICAL)$/);\r\n        expect(cpuIssue.description).toContain('CPU');\r\n      }\r\n    });\r\n\r\n    it('should optimize system performance for trading', async () => {\r\n      const currentMetrics = await systemMonitor.getDetailedSystemMetrics();\r\n      const optimizations = await performanceOptimizer.optimizeForTrading(currentMetrics);\r\n\r\n      expect(optimizations).toBeDefined();\r\n      expect(Array.isArray(optimizations.appliedOptimizations)).toBe(true);\r\n      expect(typeof optimizations.performanceGain).toBe('number');\r\n      expect(optimizations.recommendations).toBeDefined();\r\n\r\n      // Should have applied some optimizations\r\n      if (optimizations.appliedOptimizations.length > 0) {\r\n        optimizations.appliedOptimizations.forEach(optimization => {\r\n          expect(optimization).toHaveProperty('type');\r\n          expect(optimization).toHaveProperty('description');\r\n          expect(optimization).toHaveProperty('impact');\r\n        });\r\n      }\r\n    });\r\n\r\n    it('should handle thermal management', async () => {\r\n      // Mock high temperature scenario\r\n      const mockHighTempMetrics = {\r\n        cpu: {\r\n          brand: 'Intel(R) Core(TM) i5-1135G7',\r\n          cores: 4,\r\n          usage: 75.0,\r\n          temperature: 85.0, // High temperature\r\n          frequency: 2400\r\n        },\r\n        memory: { total: 12884901888, used: 6442450944, available: 6442450944, usage: 50.0 },\r\n        storage: { total: 274877906944, used: 137438953472, available: 137438953472, usage: 50.0 },\r\n        network: { interfaces: ['eth0'], bytesReceived: 1073741824, bytesSent: 536870912, currentSpeed: 1000 },\r\n        timestamp: new Date()\r\n      };\r\n\r\n      systemMonitor.getDetailedSystemMetrics = jest.fn().mockResolvedValue(mockHighTempMetrics);\r\n\r\n      const metrics = await systemMonitor.getDetailedSystemMetrics();\r\n      const thermalAction = await performanceOptimizer.implementThermalThrottling(metrics);\r\n\r\n      expect(thermalAction).toBeDefined();\r\n      expect(typeof thermalAction.throttlingApplied).toBe('boolean');\r\n      expect(typeof thermalAction.newFrequency).toBe('number');\r\n      expect(thermalAction.reason).toBeDefined();\r\n\r\n      if (thermalAction.throttlingApplied) {\r\n        expect(thermalAction.newFrequency).toBeLessThan(2400);\r\n        expect(thermalAction.reason).toContain('temperature');\r\n      }\r\n    });\r\n  });\r\n\r\n  describe('System Reliability and Auto-Restart', () => {\r\n    it('should implement auto-restart functionality', async () => {\r\n      const restartConfig = {\r\n        maxRestarts: 3,\r\n        restartDelay: 5000,\r\n        healthCheckInterval: 30000,\r\n        failureThreshold: 5\r\n      };\r\n\r\n      const restartResult = await autoRestartManager.configureAutoRestart(restartConfig);\r\n\r\n      expect(restartResult).toBeDefined();\r\n      expect(restartResult.configured).toBe(true);\r\n      expect(restartResult.config).toEqual(restartConfig);\r\n    });\r\n\r\n    it('should detect system failures and trigger restart', async () => {\r\n      // Mock system failure scenario\r\n      const mockFailureConditions = {\r\n        processRunning: false,\r\n        memoryLeakDetected: true,\r\n        networkConnectivity: false,\r\n        diskSpaceAvailable: true,\r\n        cpuResponsive: true\r\n      };\r\n\r\n      const failureDetected = await autoRestartManager.detectSystemFailure(mockFailureConditions);\r\n\r\n      expect(failureDetected).toBe(true);\r\n\r\n      if (failureDetected) {\r\n        const restartAction = await autoRestartManager.executeRestart('SYSTEM_FAILURE');\r\n        \r\n        expect(restartAction).toBeDefined();\r\n        expect(restartAction.restartInitiated).toBe(true);\r\n        expect(restartAction.reason).toBe('SYSTEM_FAILURE');\r\n        expect(restartAction.timestamp).toBeInstanceOf(Date);\r\n      }\r\n    });\r\n\r\n    it('should implement graceful shutdown procedures', async () => {\r\n      const shutdownResult = await autoRestartManager.gracefulShutdown({\r\n        saveState: true,\r\n        closeConnections: true,\r\n        notifyUsers: true,\r\n        timeout: 30000\r\n      });\r\n\r\n      expect(shutdownResult).toBeDefined();\r\n      expect(shutdownResult.shutdownCompleted).toBe(true);\r\n      expect(shutdownResult.stateSaved).toBe(true);\r\n      expect(shutdownResult.connectionsClosed).toBe(true);\r\n      expect(shutdownResult.duration).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('should maintain system uptime statistics', async () => {\r\n      const uptimeStats = await autoRestartManager.getUptimeStatistics();\r\n\r\n      expect(uptimeStats).toBeDefined();\r\n      expect(typeof uptimeStats.currentUptime).toBe('number');\r\n      expect(typeof uptimeStats.totalRestarts).toBe('number');\r\n      expect(typeof uptimeStats.averageUptime).toBe('number');\r\n      expect(uptimeStats.lastRestart).toBeInstanceOf(Date);\r\n      expect(Array.isArray(uptimeStats.restartHistory)).toBe(true);\r\n\r\n      // Validate uptime is reasonable\r\n      expect(uptimeStats.currentUptime).toBeGreaterThanOrEqual(0);\r\n      expect(uptimeStats.totalRestarts).toBeGreaterThanOrEqual(0);\r\n    });\r\n  });\r\n\r\n  describe('System Administration and Maintenance', () => {\r\n    it('should provide comprehensive system diagnostics', async () => {\r\n      const diagnostics = await adminTools.runSystemDiagnostics();\r\n\r\n      expect(diagnostics).toBeDefined();\r\n      expect(diagnostics.systemHealth).toBeDefined();\r\n      expect(diagnostics.performanceMetrics).toBeDefined();\r\n      expect(diagnostics.securityStatus).toBeDefined();\r\n      expect(diagnostics.networkConnectivity).toBeDefined();\r\n      expect(diagnostics.diskHealth).toBeDefined();\r\n\r\n      // Validate diagnostic results\r\n      expect(typeof diagnostics.systemHealth.overall).toBe('string');\r\n      expect(['HEALTHY', 'WARNING', 'CRITICAL']).toContain(diagnostics.systemHealth.overall);\r\n      \r\n      expect(typeof diagnostics.performanceMetrics.score).toBe('number');\r\n      expect(diagnostics.performanceMetrics.score).toBeGreaterThanOrEqual(0);\r\n      expect(diagnostics.performanceMetrics.score).toBeLessThanOrEqual(100);\r\n    });\r\n\r\n    it('should create and manage system backups', async () => {\r\n      const backupConfig = {\r\n        includeConfigurations: true,\r\n        includeLogs: true,\r\n        includeData: true,\r\n        compressionLevel: 6,\r\n        encryptBackup: true\r\n      };\r\n\r\n      const backupResult = await adminTools.createSystemBackup(backupConfig);\r\n\r\n      expect(backupResult).toBeDefined();\r\n      expect(backupResult.backupCreated).toBe(true);\r\n      expect(backupResult.backupPath).toBeDefined();\r\n      expect(backupResult.backupSize).toBeGreaterThan(0);\r\n      expect(backupResult.timestamp).toBeInstanceOf(Date);\r\n      expect(backupResult.checksum).toBeDefined();\r\n\r\n      // Validate backup integrity\r\n      const integrityCheck = await adminTools.verifyBackupIntegrity(backupResult.backupPath);\r\n      expect(integrityCheck.isValid).toBe(true);\r\n      expect(integrityCheck.checksumMatch).toBe(true);\r\n    });\r\n\r\n    it('should manage system updates and patches', async () => {\r\n      const updateCheck = await adminTools.checkForUpdates();\r\n\r\n      expect(updateCheck).toBeDefined();\r\n      expect(typeof updateCheck.updatesAvailable).toBe('boolean');\r\n      expect(Array.isArray(updateCheck.availableUpdates)).toBe(true);\r\n      expect(typeof updateCheck.securityUpdates).toBe('number');\r\n      expect(typeof updateCheck.systemUpdates).toBe('number');\r\n\r\n      if (updateCheck.updatesAvailable) {\r\n        updateCheck.availableUpdates.forEach(update => {\r\n          expect(update).toHaveProperty('package');\r\n          expect(update).toHaveProperty('currentVersion');\r\n          expect(update).toHaveProperty('availableVersion');\r\n          expect(update).toHaveProperty('priority');\r\n        });\r\n      }\r\n    });\r\n\r\n    it('should monitor and manage system logs', async () => {\r\n      const logManagement = await adminTools.manageSystemLogs();\r\n\r\n      expect(logManagement).toBeDefined();\r\n      expect(typeof logManagement.totalLogSize).toBe('number');\r\n      expect(typeof logManagement.oldestLogDate).toBe('object');\r\n      expect(typeof logManagement.newestLogDate).toBe('object');\r\n      expect(Array.isArray(logManagement.logFiles)).toBe(true);\r\n\r\n      // Validate log rotation\r\n      const rotationResult = await adminTools.rotateSystemLogs();\r\n      expect(rotationResult.rotationCompleted).toBe(true);\r\n      expect(rotationResult.filesRotated).toBeGreaterThanOrEqual(0);\r\n      expect(rotationResult.spaceSaved).toBeGreaterThanOrEqual(0);\r\n    });\r\n  });\r\n\r\n  describe('Performance Benchmarking', () => {\r\n    it('should benchmark system performance for trading operations', async () => {\r\n      const benchmarkResults = await performanceOptimizer.runTradingBenchmark();\r\n\r\n      expect(benchmarkResults).toBeDefined();\r\n      expect(typeof benchmarkResults.overallScore).toBe('number');\r\n      expect(benchmarkResults.overallScore).toBeGreaterThan(0);\r\n      expect(benchmarkResults.overallScore).toBeLessThanOrEqual(100);\r\n\r\n      // Validate individual benchmark metrics\r\n      expect(benchmarkResults.cpuPerformance).toBeDefined();\r\n      expect(benchmarkResults.memoryPerformance).toBeDefined();\r\n      expect(benchmarkResults.diskPerformance).toBeDefined();\r\n      expect(benchmarkResults.networkPerformance).toBeDefined();\r\n\r\n      // CPU benchmark\r\n      expect(typeof benchmarkResults.cpuPerformance.score).toBe('number');\r\n      expect(typeof benchmarkResults.cpuPerformance.operationsPerSecond).toBe('number');\r\n      expect(benchmarkResults.cpuPerformance.operationsPerSecond).toBeGreaterThan(0);\r\n\r\n      // Memory benchmark\r\n      expect(typeof benchmarkResults.memoryPerformance.score).toBe('number');\r\n      expect(typeof benchmarkResults.memoryPerformance.throughputMBps).toBe('number');\r\n      expect(benchmarkResults.memoryPerformance.throughputMBps).toBeGreaterThan(0);\r\n\r\n      // Disk benchmark\r\n      expect(typeof benchmarkResults.diskPerformance.score).toBe('number');\r\n      expect(typeof benchmarkResults.diskPerformance.readSpeedMBps).toBe('number');\r\n      expect(typeof benchmarkResults.diskPerformance.writeSpeedMBps).toBe('number');\r\n      expect(benchmarkResults.diskPerformance.readSpeedMBps).toBeGreaterThan(0);\r\n      expect(benchmarkResults.diskPerformance.writeSpeedMBps).toBeGreaterThan(0);\r\n\r\n      // Network benchmark\r\n      expect(typeof benchmarkResults.networkPerformance.score).toBe('number');\r\n      expect(typeof benchmarkResults.networkPerformance.latencyMs).toBe('number');\r\n      expect(typeof benchmarkResults.networkPerformance.throughputMbps).toBe('number');\r\n      expect(benchmarkResults.networkPerformance.latencyMs).toBeGreaterThan(0);\r\n      expect(benchmarkResults.networkPerformance.throughputMbps).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('should validate system meets trading performance requirements', async () => {\r\n      const performanceRequirements = {\r\n        minCpuScore: 70,\r\n        minMemoryThroughput: 1000, // MB/s\r\n        minDiskReadSpeed: 500,     // MB/s\r\n        minDiskWriteSpeed: 200,    // MB/s\r\n        maxNetworkLatency: 50,     // ms\r\n        minNetworkThroughput: 100  // Mbps\r\n      };\r\n\r\n      const benchmarkResults = await performanceOptimizer.runTradingBenchmark();\r\n      const validationResult = await performanceOptimizer.validatePerformanceRequirements(\r\n        benchmarkResults,\r\n        performanceRequirements\r\n      );\r\n\r\n      expect(validationResult).toBeDefined();\r\n      expect(typeof validationResult.meetsRequirements).toBe('boolean');\r\n      expect(Array.isArray(validationResult.failedRequirements)).toBe(true);\r\n      expect(Array.isArray(validationResult.recommendations)).toBe(true);\r\n\r\n      // Log performance validation results\r\n      console.log('Performance Validation:', {\r\n        meetsRequirements: validationResult.meetsRequirements,\r\n        failedRequirements: validationResult.failedRequirements,\r\n        recommendations: validationResult.recommendations\r\n      });\r\n\r\n      // If requirements are not met, should provide recommendations\r\n      if (!validationResult.meetsRequirements) {\r\n        expect(validationResult.failedRequirements.length).toBeGreaterThan(0);\r\n        expect(validationResult.recommendations.length).toBeGreaterThan(0);\r\n      }\r\n    });\r\n\r\n    it('should stress test system under trading load', async () => {\r\n      const stressTestConfig = {\r\n        duration: 30000,        // 30 seconds\r\n        concurrentOperations: 50,\r\n        memoryPressure: true,\r\n        cpuIntensive: true,\r\n        diskIO: true,\r\n        networkRequests: true\r\n      };\r\n\r\n      const stressTestResults = await performanceOptimizer.runStressTest(stressTestConfig);\r\n\r\n      expect(stressTestResults).toBeDefined();\r\n      expect(typeof stressTestResults.testCompleted).toBe('boolean');\r\n      expect(typeof stressTestResults.duration).toBe('number');\r\n      expect(typeof stressTestResults.operationsCompleted).toBe('number');\r\n      expect(typeof stressTestResults.operationsPerSecond).toBe('number');\r\n      expect(typeof stressTestResults.errorRate).toBe('number');\r\n\r\n      // Validate stress test results\r\n      expect(stressTestResults.testCompleted).toBe(true);\r\n      expect(stressTestResults.duration).toBeGreaterThan(0);\r\n      expect(stressTestResults.operationsCompleted).toBeGreaterThan(0);\r\n      expect(stressTestResults.operationsPerSecond).toBeGreaterThan(0);\r\n      expect(stressTestResults.errorRate).toBeGreaterThanOrEqual(0);\r\n      expect(stressTestResults.errorRate).toBeLessThan(0.1); // Less than 10% error rate\r\n\r\n      // System should remain stable under stress\r\n      expect(stressTestResults.systemStability).toBeDefined();\r\n      expect(stressTestResults.systemStability.cpuStable).toBe(true);\r\n      expect(stressTestResults.systemStability.memoryStable).toBe(true);\r\n      expect(stressTestResults.systemStability.diskStable).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('System Integration Edge Cases', () => {\r\n    it('should handle system resource exhaustion gracefully', async () => {\r\n      // Mock resource exhaustion scenario\r\n      const mockExhaustedMetrics = {\r\n        cpu: { usage: 99.9, temperature: 95.0 },\r\n        memory: { usage: 99.5, available: 52428800 }, // 50MB available\r\n        storage: { usage: 99.8, available: 536870912 }, // 512MB available\r\n        network: { interfaces: [], bytesReceived: 0, bytesSent: 0 }\r\n      };\r\n\r\n      systemMonitor.getDetailedSystemMetrics = jest.fn().mockResolvedValue(mockExhaustedMetrics);\r\n\r\n      const metrics = await systemMonitor.getDetailedSystemMetrics();\r\n      const emergencyActions = await performanceOptimizer.handleResourceExhaustion(metrics);\r\n\r\n      expect(emergencyActions).toBeDefined();\r\n      expect(Array.isArray(emergencyActions.actionsPerformed)).toBe(true);\r\n      expect(typeof emergencyActions.systemStabilized).toBe('boolean');\r\n      expect(emergencyActions.emergencyMode).toBe(true);\r\n\r\n      // Should have performed emergency actions\r\n      expect(emergencyActions.actionsPerformed.length).toBeGreaterThan(0);\r\n      emergencyActions.actionsPerformed.forEach(action => {\r\n        expect(action).toHaveProperty('type');\r\n        expect(action).toHaveProperty('description');\r\n        expect(action).toHaveProperty('success');\r\n      });\r\n    });\r\n\r\n    it('should recover from system crashes and maintain data integrity', async () => {\r\n      // Simulate system crash recovery\r\n      const crashRecoveryResult = await autoRestartManager.recoverFromCrash({\r\n        crashType: 'SYSTEM_CRASH',\r\n        crashTime: new Date(Date.now() - 60000), // 1 minute ago\r\n        dataCorruption: false,\r\n        configurationIntact: true\r\n      });\r\n\r\n      expect(crashRecoveryResult).toBeDefined();\r\n      expect(typeof crashRecoveryResult.recoverySuccessful).toBe('boolean');\r\n      expect(typeof crashRecoveryResult.dataIntegrityVerified).toBe('boolean');\r\n      expect(typeof crashRecoveryResult.systemStable).toBe('boolean');\r\n      expect(crashRecoveryResult.recoveryActions).toBeDefined();\r\n\r\n      // Recovery should be successful\r\n      expect(crashRecoveryResult.recoverySuccessful).toBe(true);\r\n      expect(crashRecoveryResult.dataIntegrityVerified).toBe(true);\r\n      expect(crashRecoveryResult.systemStable).toBe(true);\r\n    });\r\n\r\n    it('should handle concurrent system operations safely', async () => {\r\n      const concurrentOperations = [\r\n        systemMonitor.getDetailedSystemMetrics(),\r\n        performanceOptimizer.optimizeForTrading({}),\r\n        adminTools.runSystemDiagnostics(),\r\n        autoRestartManager.getUptimeStatistics(),\r\n        adminTools.manageSystemLogs()\r\n      ];\r\n\r\n      const results = await Promise.all(concurrentOperations);\r\n\r\n      // All operations should complete successfully\r\n      expect(results.length).toBe(5);\r\n      results.forEach(result => {\r\n        expect(result).toBeDefined();\r\n      });\r\n\r\n      // Validate specific results\r\n      const [metrics, optimizations, diagnostics, uptime, logs] = results;\r\n      \r\n      expect(metrics.timestamp).toBeInstanceOf(Date);\r\n      expect(Array.isArray(optimizations.appliedOptimizations)).toBe(true);\r\n      expect(diagnostics.systemHealth).toBeDefined();\r\n      expect(typeof uptime.currentUptime).toBe('number');\r\n      expect(Array.isArray(logs.logFiles)).toBe(true);\r\n    });\r\n  });\r\n});"],"version":3}